<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13133.c" pos:tabs="8"><function pos:start="1:1" pos:end="5411:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">disas_sparc_insn</name><parameter_list pos:start="1:29" pos:end="1:66">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:41">DisasContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type> <name pos:start="1:45" pos:end="1:46">dc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:56">unsigned</name> <name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:65">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="5411:1">{<block_content pos:start="5:5" pos:end="5409:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">opc</name></decl>, <decl pos:start="5:23" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:25">rs1</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:28" pos:end="5:30">rs2</name></decl>, <decl pos:start="5:33" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:33" pos:end="5:34">rd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">TCGv</name></type> <name pos:start="7:10" pos:end="7:17">cpu_src1</name></decl>, <decl pos:start="7:20" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:20" pos:end="7:27">cpu_src2</name></decl>, <decl pos:start="7:30" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:30" pos:end="7:37">cpu_tmp1</name></decl>, <decl pos:start="7:40" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:40" pos:end="7:47">cpu_tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">TCGv_i32</name></type> <name pos:start="9:14" pos:end="9:24">cpu_src1_32</name></decl>, <decl pos:start="9:27" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:37">cpu_src2_32</name></decl>, <decl pos:start="9:40" pos:end="9:49"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:40" pos:end="9:49">cpu_dst_32</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_i64</name></type> <name pos:start="11:14" pos:end="11:24">cpu_src1_64</name></decl>, <decl pos:start="11:27" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:27" pos:end="11:37">cpu_src2_64</name></decl>, <decl pos:start="11:40" pos:end="11:49"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:40" pos:end="11:49">cpu_dst_64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">target_long</name></type> <name pos:start="13:17" pos:end="13:20">simm</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:72">(<expr pos:start="17:9" pos:end="17:71"><call pos:start="17:9" pos:end="17:71"><name pos:start="17:9" pos:end="17:16">unlikely</name><argument_list pos:start="17:17" pos:end="17:71">(<argument pos:start="17:18" pos:end="17:70"><expr pos:start="17:18" pos:end="17:70"><call pos:start="17:18" pos:end="17:70"><name pos:start="17:18" pos:end="17:35">qemu_loglevel_mask</name><argument_list pos:start="17:36" pos:end="17:70">(<argument pos:start="17:37" pos:end="17:69"><expr pos:start="17:37" pos:end="17:69"><name pos:start="17:37" pos:end="17:49">CPU_LOG_TB_OP</name> <operator pos:start="17:51" pos:end="17:51">|</operator> <name pos:start="17:53" pos:end="17:69">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:74" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:41">

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><call pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:32">tcg_gen_debug_insn_start</name><argument_list pos:start="19:33" pos:end="19:40">(<argument pos:start="19:34" pos:end="19:39"><expr pos:start="19:34" pos:end="19:39"><name pos:start="19:34" pos:end="19:39"><name pos:start="19:34" pos:end="19:35">dc</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:7">opc</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:31"><name pos:start="25:11" pos:end="25:19">GET_FIELD</name><argument_list pos:start="25:20" pos:end="25:31">(<argument pos:start="25:21" pos:end="25:24"><expr pos:start="25:21" pos:end="25:24"><name pos:start="25:21" pos:end="25:24">insn</name></expr></argument>, <argument pos:start="25:27" pos:end="25:27"><expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr></argument>, <argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:6">rd</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:30"><name pos:start="29:10" pos:end="29:18">GET_FIELD</name><argument_list pos:start="29:19" pos:end="29:30">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">insn</name></expr></argument>, <argument pos:start="29:26" pos:end="29:26"><expr pos:start="29:26" pos:end="29:26"><literal type="number" pos:start="29:26" pos:end="29:26">2</literal></expr></argument>, <argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:12">cpu_tmp1</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:23">cpu_src1</name> <operator pos:start="33:25" pos:end="33:25">=</operator> <call pos:start="33:27" pos:end="33:40"><name pos:start="33:27" pos:end="33:38">tcg_temp_new</name><argument_list pos:start="33:39" pos:end="33:40">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:12">cpu_tmp2</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:23">cpu_src2</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="35:40"><name pos:start="35:27" pos:end="35:38">tcg_temp_new</name><argument_list pos:start="35:39" pos:end="35:40">()</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="39:5" pos:end="5227:5">switch <condition pos:start="39:12" pos:end="39:16">(<expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">opc</name></expr>)</condition> <block pos:start="39:18" pos:end="5227:5">{<block_content pos:start="41:5" pos:end="5225:14">

    <case pos:start="41:5" pos:end="41:11">case <expr pos:start="41:10" pos:end="41:10"><literal type="number" pos:start="41:10" pos:end="41:10">0</literal></expr>:</case>                     <comment type="block" pos:start="41:33" pos:end="41:52">/* branches/sethi */</comment>

        <block pos:start="43:9" pos:end="207:9">{<block_content pos:start="45:13" pos:end="205:18">

            <decl_stmt pos:start="45:13" pos:end="45:53"><decl pos:start="45:13" pos:end="45:52"><type pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:20">unsigned</name> <name pos:start="45:22" pos:end="45:24">int</name></type> <name pos:start="45:26" pos:end="45:28">xop</name> <init pos:start="45:30" pos:end="45:52">= <expr pos:start="45:32" pos:end="45:52"><call pos:start="45:32" pos:end="45:52"><name pos:start="45:32" pos:end="45:40">GET_FIELD</name><argument_list pos:start="45:41" pos:end="45:52">(<argument pos:start="45:42" pos:end="45:45"><expr pos:start="45:42" pos:end="45:45"><name pos:start="45:42" pos:end="45:45">insn</name></expr></argument>, <argument pos:start="45:48" pos:end="45:48"><expr pos:start="45:48" pos:end="45:48"><literal type="number" pos:start="45:48" pos:end="45:48">7</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:51"><expr pos:start="45:51" pos:end="45:51"><literal type="number" pos:start="45:51" pos:end="45:51">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:27"><decl pos:start="47:13" pos:end="47:26"><type pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:19">int32_t</name></type> <name pos:start="47:21" pos:end="47:26">target</name></decl>;</decl_stmt>

            <switch pos:start="49:13" pos:end="203:13">switch <condition pos:start="49:20" pos:end="49:24">(<expr pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:23">xop</name></expr>)</condition> <block pos:start="49:26" pos:end="203:13">{<block_content pos:start="53:13" pos:end="201:34">

<cpp:ifdef pos:start="51:1" pos:end="51:21">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:21">TARGET_SPARC64</name></cpp:ifdef>

            <case pos:start="53:13" pos:end="53:21">case <expr pos:start="53:18" pos:end="53:20"><literal type="number" pos:start="53:18" pos:end="53:20">0x1</literal></expr>:</case>           <comment type="block" pos:start="53:33" pos:end="53:45">/* V9 BPcc */</comment>

                <block pos:start="55:17" pos:end="83:17">{<block_content pos:start="57:21" pos:end="81:34">

                    <decl_stmt pos:start="57:21" pos:end="57:27"><decl pos:start="57:21" pos:end="57:26"><type pos:start="57:21" pos:end="57:23"><name pos:start="57:21" pos:end="57:23">int</name></type> <name pos:start="57:25" pos:end="57:26">cc</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="61:21" pos:end="61:55"><expr pos:start="61:21" pos:end="61:54"><name pos:start="61:21" pos:end="61:26">target</name> <operator pos:start="61:28" pos:end="61:28">=</operator> <call pos:start="61:30" pos:end="61:54"><name pos:start="61:30" pos:end="61:41">GET_FIELD_SP</name><argument_list pos:start="61:42" pos:end="61:54">(<argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">insn</name></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><literal type="number" pos:start="61:49" pos:end="61:49">0</literal></expr></argument>, <argument pos:start="61:52" pos:end="61:53"><expr pos:start="61:52" pos:end="61:53"><literal type="number" pos:start="61:52" pos:end="61:53">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="63:21" pos:end="63:53"><expr pos:start="63:21" pos:end="63:52"><name pos:start="63:21" pos:end="63:26">target</name> <operator pos:start="63:28" pos:end="63:28">=</operator> <call pos:start="63:30" pos:end="63:52"><name pos:start="63:30" pos:end="63:40">sign_extend</name><argument_list pos:start="63:41" pos:end="63:52">(<argument pos:start="63:42" pos:end="63:47"><expr pos:start="63:42" pos:end="63:47"><name pos:start="63:42" pos:end="63:47">target</name></expr></argument>, <argument pos:start="63:50" pos:end="63:51"><expr pos:start="63:50" pos:end="63:51"><literal type="number" pos:start="63:50" pos:end="63:51">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:33"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:26">target</name> <operator pos:start="65:28" pos:end="65:30">&lt;&lt;=</operator> <literal type="number" pos:start="65:32" pos:end="65:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:52"><expr pos:start="67:21" pos:end="67:51"><name pos:start="67:21" pos:end="67:22">cc</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:51"><name pos:start="67:26" pos:end="67:37">GET_FIELD_SP</name><argument_list pos:start="67:38" pos:end="67:51">(<argument pos:start="67:39" pos:end="67:42"><expr pos:start="67:39" pos:end="67:42"><name pos:start="67:39" pos:end="67:42">insn</name></expr></argument>, <argument pos:start="67:45" pos:end="67:46"><expr pos:start="67:45" pos:end="67:46"><literal type="number" pos:start="67:45" pos:end="67:46">20</literal></expr></argument>, <argument pos:start="67:49" pos:end="67:50"><expr pos:start="67:49" pos:end="67:50"><literal type="number" pos:start="67:49" pos:end="67:50">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="69:21" pos:end="79:42"><if pos:start="69:21" pos:end="71:55">if <condition pos:start="69:24" pos:end="69:32">(<expr pos:start="69:25" pos:end="69:31"><name pos:start="69:25" pos:end="69:26">cc</name> <operator pos:start="69:28" pos:end="69:29">==</operator> <literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr>)</condition><block type="pseudo" pos:start="71:25" pos:end="71:55"><block_content pos:start="71:25" pos:end="71:55">

                        <expr_stmt pos:start="71:25" pos:end="71:55"><expr pos:start="71:25" pos:end="71:54"><call pos:start="71:25" pos:end="71:54"><name pos:start="71:25" pos:end="71:33">do_branch</name><argument_list pos:start="71:34" pos:end="71:54">(<argument pos:start="71:35" pos:end="71:36"><expr pos:start="71:35" pos:end="71:36"><name pos:start="71:35" pos:end="71:36">dc</name></expr></argument>, <argument pos:start="71:39" pos:end="71:44"><expr pos:start="71:39" pos:end="71:44"><name pos:start="71:39" pos:end="71:44">target</name></expr></argument>, <argument pos:start="71:47" pos:end="71:50"><expr pos:start="71:47" pos:end="71:50"><name pos:start="71:47" pos:end="71:50">insn</name></expr></argument>, <argument pos:start="71:53" pos:end="71:53"><expr pos:start="71:53" pos:end="71:53"><literal type="number" pos:start="71:53" pos:end="71:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="73:21" pos:end="75:55">else if <condition pos:start="73:29" pos:end="73:37">(<expr pos:start="73:30" pos:end="73:36"><name pos:start="73:30" pos:end="73:31">cc</name> <operator pos:start="73:33" pos:end="73:34">==</operator> <literal type="number" pos:start="73:36" pos:end="73:36">2</literal></expr>)</condition><block type="pseudo" pos:start="75:25" pos:end="75:55"><block_content pos:start="75:25" pos:end="75:55">

                        <expr_stmt pos:start="75:25" pos:end="75:55"><expr pos:start="75:25" pos:end="75:54"><call pos:start="75:25" pos:end="75:54"><name pos:start="75:25" pos:end="75:33">do_branch</name><argument_list pos:start="75:34" pos:end="75:54">(<argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><name pos:start="75:35" pos:end="75:36">dc</name></expr></argument>, <argument pos:start="75:39" pos:end="75:44"><expr pos:start="75:39" pos:end="75:44"><name pos:start="75:39" pos:end="75:44">target</name></expr></argument>, <argument pos:start="75:47" pos:end="75:50"><expr pos:start="75:47" pos:end="75:50"><name pos:start="75:47" pos:end="75:50">insn</name></expr></argument>, <argument pos:start="75:53" pos:end="75:53"><expr pos:start="75:53" pos:end="75:53"><literal type="number" pos:start="75:53" pos:end="75:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="77:21" pos:end="79:42">else<block type="pseudo" pos:start="79:25" pos:end="79:42"><block_content pos:start="79:25" pos:end="79:42">

                        <goto pos:start="79:25" pos:end="79:42">goto <name pos:start="79:30" pos:end="79:41">illegal_insn</name>;</goto></block_content></block></else></if_stmt>

                    <goto pos:start="81:21" pos:end="81:34">goto <name pos:start="81:26" pos:end="81:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="85:13" pos:end="85:21">case <expr pos:start="85:18" pos:end="85:20"><literal type="number" pos:start="85:18" pos:end="85:20">0x3</literal></expr>:</case>           <comment type="block" pos:start="85:33" pos:end="85:44">/* V9 BPr */</comment>

                <block pos:start="87:17" pos:end="103:17">{<block_content pos:start="89:21" pos:end="101:34">

                    <expr_stmt pos:start="89:21" pos:end="91:59"><expr pos:start="89:21" pos:end="91:58"><name pos:start="89:21" pos:end="89:26">target</name> <operator pos:start="89:28" pos:end="89:28">=</operator> <call pos:start="89:30" pos:end="89:54"><name pos:start="89:30" pos:end="89:41">GET_FIELD_SP</name><argument_list pos:start="89:42" pos:end="89:54">(<argument pos:start="89:43" pos:end="89:46"><expr pos:start="89:43" pos:end="89:46"><name pos:start="89:43" pos:end="89:46">insn</name></expr></argument>, <argument pos:start="89:49" pos:end="89:49"><expr pos:start="89:49" pos:end="89:49"><literal type="number" pos:start="89:49" pos:end="89:49">0</literal></expr></argument>, <argument pos:start="89:52" pos:end="89:53"><expr pos:start="89:52" pos:end="89:53"><literal type="number" pos:start="89:52" pos:end="89:53">13</literal></expr></argument>)</argument_list></call> <operator pos:start="89:56" pos:end="89:56">|</operator>

                        <operator pos:start="91:25" pos:end="91:25">(</operator><call pos:start="91:26" pos:end="91:51"><name pos:start="91:26" pos:end="91:37">GET_FIELD_SP</name><argument_list pos:start="91:38" pos:end="91:51">(<argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><name pos:start="91:39" pos:end="91:42">insn</name></expr></argument>, <argument pos:start="91:45" pos:end="91:46"><expr pos:start="91:45" pos:end="91:46"><literal type="number" pos:start="91:45" pos:end="91:46">20</literal></expr></argument>, <argument pos:start="91:49" pos:end="91:50"><expr pos:start="91:49" pos:end="91:50"><literal type="number" pos:start="91:49" pos:end="91:50">21</literal></expr></argument>)</argument_list></call> <operator pos:start="91:53" pos:end="91:54">&lt;&lt;</operator> <literal type="number" pos:start="91:56" pos:end="91:57">14</literal><operator pos:start="91:58" pos:end="91:58">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:53"><expr pos:start="93:21" pos:end="93:52"><name pos:start="93:21" pos:end="93:26">target</name> <operator pos:start="93:28" pos:end="93:28">=</operator> <call pos:start="93:30" pos:end="93:52"><name pos:start="93:30" pos:end="93:40">sign_extend</name><argument_list pos:start="93:41" pos:end="93:52">(<argument pos:start="93:42" pos:end="93:47"><expr pos:start="93:42" pos:end="93:47"><name pos:start="93:42" pos:end="93:47">target</name></expr></argument>, <argument pos:start="93:50" pos:end="93:51"><expr pos:start="93:50" pos:end="93:51"><literal type="number" pos:start="93:50" pos:end="93:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:33"><expr pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:26">target</name> <operator pos:start="95:28" pos:end="95:30">&lt;&lt;=</operator> <literal type="number" pos:start="95:32" pos:end="95:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:50"><expr pos:start="97:21" pos:end="97:49"><name pos:start="97:21" pos:end="97:28">cpu_src1</name> <operator pos:start="97:30" pos:end="97:30">=</operator> <call pos:start="97:32" pos:end="97:49"><name pos:start="97:32" pos:end="97:39">get_src1</name><argument_list pos:start="97:40" pos:end="97:49">(<argument pos:start="97:41" pos:end="97:42"><expr pos:start="97:41" pos:end="97:42"><name pos:start="97:41" pos:end="97:42">dc</name></expr></argument>, <argument pos:start="97:45" pos:end="97:48"><expr pos:start="97:45" pos:end="97:48"><name pos:start="97:45" pos:end="97:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:62"><expr pos:start="99:21" pos:end="99:61"><call pos:start="99:21" pos:end="99:61"><name pos:start="99:21" pos:end="99:33">do_branch_reg</name><argument_list pos:start="99:34" pos:end="99:61">(<argument pos:start="99:35" pos:end="99:36"><expr pos:start="99:35" pos:end="99:36"><name pos:start="99:35" pos:end="99:36">dc</name></expr></argument>, <argument pos:start="99:39" pos:end="99:44"><expr pos:start="99:39" pos:end="99:44"><name pos:start="99:39" pos:end="99:44">target</name></expr></argument>, <argument pos:start="99:47" pos:end="99:50"><expr pos:start="99:47" pos:end="99:50"><name pos:start="99:47" pos:end="99:50">insn</name></expr></argument>, <argument pos:start="99:53" pos:end="99:60"><expr pos:start="99:53" pos:end="99:60"><name pos:start="99:53" pos:end="99:60">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="101:21" pos:end="101:34">goto <name pos:start="101:26" pos:end="101:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="105:13" pos:end="105:21">case <expr pos:start="105:18" pos:end="105:20"><literal type="number" pos:start="105:18" pos:end="105:20">0x5</literal></expr>:</case>           <comment type="block" pos:start="105:33" pos:end="105:46">/* V9 FBPcc */</comment>

                <block pos:start="107:17" pos:end="130:0">{<block_content pos:start="109:21" pos:end="125:34">

                    <decl_stmt pos:start="109:21" pos:end="109:56"><decl pos:start="109:21" pos:end="109:55"><type pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">int</name></type> <name pos:start="109:25" pos:end="109:26">cc</name> <init pos:start="109:28" pos:end="109:55">= <expr pos:start="109:30" pos:end="109:55"><call pos:start="109:30" pos:end="109:55"><name pos:start="109:30" pos:end="109:41">GET_FIELD_SP</name><argument_list pos:start="109:42" pos:end="109:55">(<argument pos:start="109:43" pos:end="109:46"><expr pos:start="109:43" pos:end="109:46"><name pos:start="109:43" pos:end="109:46">insn</name></expr></argument>, <argument pos:start="109:49" pos:end="109:50"><expr pos:start="109:49" pos:end="109:50"><literal type="number" pos:start="109:49" pos:end="109:50">20</literal></expr></argument>, <argument pos:start="109:53" pos:end="109:54"><expr pos:start="109:53" pos:end="109:54"><literal type="number" pos:start="109:53" pos:end="109:54">21</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="111:21" pos:end="115:21"><if pos:start="111:21" pos:end="115:21">if <condition pos:start="111:24" pos:end="111:45">(<expr pos:start="111:25" pos:end="111:44"><call pos:start="111:25" pos:end="111:44"><name pos:start="111:25" pos:end="111:40">gen_trap_ifnofpu</name><argument_list pos:start="111:41" pos:end="111:44">(<argument pos:start="111:42" pos:end="111:43"><expr pos:start="111:42" pos:end="111:43"><name pos:start="111:42" pos:end="111:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:47" pos:end="115:21">{<block_content pos:start="113:25" pos:end="113:38">

                        <goto pos:start="113:25" pos:end="113:38">goto <name pos:start="113:30" pos:end="113:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:55"><expr pos:start="117:21" pos:end="117:54"><name pos:start="117:21" pos:end="117:26">target</name> <operator pos:start="117:28" pos:end="117:28">=</operator> <call pos:start="117:30" pos:end="117:54"><name pos:start="117:30" pos:end="117:41">GET_FIELD_SP</name><argument_list pos:start="117:42" pos:end="117:54">(<argument pos:start="117:43" pos:end="117:46"><expr pos:start="117:43" pos:end="117:46"><name pos:start="117:43" pos:end="117:46">insn</name></expr></argument>, <argument pos:start="117:49" pos:end="117:49"><expr pos:start="117:49" pos:end="117:49"><literal type="number" pos:start="117:49" pos:end="117:49">0</literal></expr></argument>, <argument pos:start="117:52" pos:end="117:53"><expr pos:start="117:52" pos:end="117:53"><literal type="number" pos:start="117:52" pos:end="117:53">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:53"><expr pos:start="119:21" pos:end="119:52"><name pos:start="119:21" pos:end="119:26">target</name> <operator pos:start="119:28" pos:end="119:28">=</operator> <call pos:start="119:30" pos:end="119:52"><name pos:start="119:30" pos:end="119:40">sign_extend</name><argument_list pos:start="119:41" pos:end="119:52">(<argument pos:start="119:42" pos:end="119:47"><expr pos:start="119:42" pos:end="119:47"><name pos:start="119:42" pos:end="119:47">target</name></expr></argument>, <argument pos:start="119:50" pos:end="119:51"><expr pos:start="119:50" pos:end="119:51"><literal type="number" pos:start="119:50" pos:end="119:51">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="121:21" pos:end="121:33"><expr pos:start="121:21" pos:end="121:32"><name pos:start="121:21" pos:end="121:26">target</name> <operator pos:start="121:28" pos:end="121:30">&lt;&lt;=</operator> <literal type="number" pos:start="121:32" pos:end="121:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:53"><expr pos:start="123:21" pos:end="123:52"><call pos:start="123:21" pos:end="123:52"><name pos:start="123:21" pos:end="123:30">do_fbranch</name><argument_list pos:start="123:31" pos:end="123:52">(<argument pos:start="123:32" pos:end="123:33"><expr pos:start="123:32" pos:end="123:33"><name pos:start="123:32" pos:end="123:33">dc</name></expr></argument>, <argument pos:start="123:36" pos:end="123:41"><expr pos:start="123:36" pos:end="123:41"><name pos:start="123:36" pos:end="123:41">target</name></expr></argument>, <argument pos:start="123:44" pos:end="123:47"><expr pos:start="123:44" pos:end="123:47"><name pos:start="123:44" pos:end="123:47">insn</name></expr></argument>, <argument pos:start="123:50" pos:end="123:51"><expr pos:start="123:50" pos:end="123:51"><name pos:start="123:50" pos:end="123:51">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="125:21" pos:end="125:34">goto <name pos:start="125:26" pos:end="125:33">jmp_insn</name>;</goto>

                </block_content>}</block>

<cpp:else pos:start="129:1" pos:end="129:5">#<cpp:directive pos:start="129:2" pos:end="129:5">else</cpp:directive></cpp:else>

            <case pos:start="131:13" pos:end="131:21">case <expr pos:start="131:18" pos:end="131:20"><literal type="number" pos:start="131:18" pos:end="131:20">0x7</literal></expr>:</case>           <comment type="block" pos:start="131:33" pos:end="131:43">/* CBN+x */</comment>

                <block pos:start="133:17" pos:end="140:0">{<block_content pos:start="135:21" pos:end="135:34">

                    <goto pos:start="135:21" pos:end="135:34">goto <name pos:start="135:26" pos:end="135:33">ncp_insn</name>;</goto>

                </block_content>}</block>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>

            <case pos:start="141:13" pos:end="141:21">case <expr pos:start="141:18" pos:end="141:20"><literal type="number" pos:start="141:18" pos:end="141:20">0x2</literal></expr>:</case>           <comment type="block" pos:start="141:33" pos:end="141:42">/* BN+x */</comment>

                <block pos:start="143:17" pos:end="155:17">{<block_content pos:start="145:21" pos:end="153:34">

                    <expr_stmt pos:start="145:21" pos:end="145:53"><expr pos:start="145:21" pos:end="145:52"><name pos:start="145:21" pos:end="145:26">target</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <call pos:start="145:30" pos:end="145:52"><name pos:start="145:30" pos:end="145:38">GET_FIELD</name><argument_list pos:start="145:39" pos:end="145:52">(<argument pos:start="145:40" pos:end="145:43"><expr pos:start="145:40" pos:end="145:43"><name pos:start="145:40" pos:end="145:43">insn</name></expr></argument>, <argument pos:start="145:46" pos:end="145:47"><expr pos:start="145:46" pos:end="145:47"><literal type="number" pos:start="145:46" pos:end="145:47">10</literal></expr></argument>, <argument pos:start="145:50" pos:end="145:51"><expr pos:start="145:50" pos:end="145:51"><literal type="number" pos:start="145:50" pos:end="145:51">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:53"><expr pos:start="147:21" pos:end="147:52"><name pos:start="147:21" pos:end="147:26">target</name> <operator pos:start="147:28" pos:end="147:28">=</operator> <call pos:start="147:30" pos:end="147:52"><name pos:start="147:30" pos:end="147:40">sign_extend</name><argument_list pos:start="147:41" pos:end="147:52">(<argument pos:start="147:42" pos:end="147:47"><expr pos:start="147:42" pos:end="147:47"><name pos:start="147:42" pos:end="147:47">target</name></expr></argument>, <argument pos:start="147:50" pos:end="147:51"><expr pos:start="147:50" pos:end="147:51"><literal type="number" pos:start="147:50" pos:end="147:51">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:33"><expr pos:start="149:21" pos:end="149:32"><name pos:start="149:21" pos:end="149:26">target</name> <operator pos:start="149:28" pos:end="149:30">&lt;&lt;=</operator> <literal type="number" pos:start="149:32" pos:end="149:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="151:21" pos:end="151:51"><expr pos:start="151:21" pos:end="151:50"><call pos:start="151:21" pos:end="151:50"><name pos:start="151:21" pos:end="151:29">do_branch</name><argument_list pos:start="151:30" pos:end="151:50">(<argument pos:start="151:31" pos:end="151:32"><expr pos:start="151:31" pos:end="151:32"><name pos:start="151:31" pos:end="151:32">dc</name></expr></argument>, <argument pos:start="151:35" pos:end="151:40"><expr pos:start="151:35" pos:end="151:40"><name pos:start="151:35" pos:end="151:40">target</name></expr></argument>, <argument pos:start="151:43" pos:end="151:46"><expr pos:start="151:43" pos:end="151:46"><name pos:start="151:43" pos:end="151:46">insn</name></expr></argument>, <argument pos:start="151:49" pos:end="151:49"><expr pos:start="151:49" pos:end="151:49"><literal type="number" pos:start="151:49" pos:end="151:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="153:21" pos:end="153:34">goto <name pos:start="153:26" pos:end="153:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="157:13" pos:end="157:21">case <expr pos:start="157:18" pos:end="157:20"><literal type="number" pos:start="157:18" pos:end="157:20">0x6</literal></expr>:</case>           <comment type="block" pos:start="157:33" pos:end="157:43">/* FBN+x */</comment>

                <block pos:start="159:17" pos:end="177:17">{<block_content pos:start="161:21" pos:end="175:34">

                    <if_stmt pos:start="161:21" pos:end="165:21"><if pos:start="161:21" pos:end="165:21">if <condition pos:start="161:24" pos:end="161:45">(<expr pos:start="161:25" pos:end="161:44"><call pos:start="161:25" pos:end="161:44"><name pos:start="161:25" pos:end="161:40">gen_trap_ifnofpu</name><argument_list pos:start="161:41" pos:end="161:44">(<argument pos:start="161:42" pos:end="161:43"><expr pos:start="161:42" pos:end="161:43"><name pos:start="161:42" pos:end="161:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:47" pos:end="165:21">{<block_content pos:start="163:25" pos:end="163:38">

                        <goto pos:start="163:25" pos:end="163:38">goto <name pos:start="163:30" pos:end="163:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="167:21" pos:end="167:53"><expr pos:start="167:21" pos:end="167:52"><name pos:start="167:21" pos:end="167:26">target</name> <operator pos:start="167:28" pos:end="167:28">=</operator> <call pos:start="167:30" pos:end="167:52"><name pos:start="167:30" pos:end="167:38">GET_FIELD</name><argument_list pos:start="167:39" pos:end="167:52">(<argument pos:start="167:40" pos:end="167:43"><expr pos:start="167:40" pos:end="167:43"><name pos:start="167:40" pos:end="167:43">insn</name></expr></argument>, <argument pos:start="167:46" pos:end="167:47"><expr pos:start="167:46" pos:end="167:47"><literal type="number" pos:start="167:46" pos:end="167:47">10</literal></expr></argument>, <argument pos:start="167:50" pos:end="167:51"><expr pos:start="167:50" pos:end="167:51"><literal type="number" pos:start="167:50" pos:end="167:51">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:53"><expr pos:start="169:21" pos:end="169:52"><name pos:start="169:21" pos:end="169:26">target</name> <operator pos:start="169:28" pos:end="169:28">=</operator> <call pos:start="169:30" pos:end="169:52"><name pos:start="169:30" pos:end="169:40">sign_extend</name><argument_list pos:start="169:41" pos:end="169:52">(<argument pos:start="169:42" pos:end="169:47"><expr pos:start="169:42" pos:end="169:47"><name pos:start="169:42" pos:end="169:47">target</name></expr></argument>, <argument pos:start="169:50" pos:end="169:51"><expr pos:start="169:50" pos:end="169:51"><literal type="number" pos:start="169:50" pos:end="169:51">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:33"><expr pos:start="171:21" pos:end="171:32"><name pos:start="171:21" pos:end="171:26">target</name> <operator pos:start="171:28" pos:end="171:30">&lt;&lt;=</operator> <literal type="number" pos:start="171:32" pos:end="171:32">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:52"><expr pos:start="173:21" pos:end="173:51"><call pos:start="173:21" pos:end="173:51"><name pos:start="173:21" pos:end="173:30">do_fbranch</name><argument_list pos:start="173:31" pos:end="173:51">(<argument pos:start="173:32" pos:end="173:33"><expr pos:start="173:32" pos:end="173:33"><name pos:start="173:32" pos:end="173:33">dc</name></expr></argument>, <argument pos:start="173:36" pos:end="173:41"><expr pos:start="173:36" pos:end="173:41"><name pos:start="173:36" pos:end="173:41">target</name></expr></argument>, <argument pos:start="173:44" pos:end="173:47"><expr pos:start="173:44" pos:end="173:47"><name pos:start="173:44" pos:end="173:47">insn</name></expr></argument>, <argument pos:start="173:50" pos:end="173:50"><expr pos:start="173:50" pos:end="173:50"><literal type="number" pos:start="173:50" pos:end="173:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="175:21" pos:end="175:34">goto <name pos:start="175:26" pos:end="175:33">jmp_insn</name>;</goto>

                </block_content>}</block>

            <case pos:start="179:13" pos:end="179:21">case <expr pos:start="179:18" pos:end="179:20"><literal type="number" pos:start="179:18" pos:end="179:20">0x4</literal></expr>:</case>           <comment type="block" pos:start="179:33" pos:end="179:43">/* SETHI */</comment>

                <comment type="block" pos:start="181:17" pos:end="181:73">/* Special-case %g0 because that's the canonical nop.  */</comment>

                <if_stmt pos:start="183:17" pos:end="193:17"><if pos:start="183:17" pos:end="193:17">if <condition pos:start="183:20" pos:end="183:23">(<expr pos:start="183:21" pos:end="183:22"><name pos:start="183:21" pos:end="183:22">rd</name></expr>)</condition> <block pos:start="183:25" pos:end="193:17">{<block_content pos:start="185:21" pos:end="191:45">

                    <decl_stmt pos:start="185:21" pos:end="185:61"><decl pos:start="185:21" pos:end="185:60"><type pos:start="185:21" pos:end="185:28"><name pos:start="185:21" pos:end="185:28">uint32_t</name></type> <name pos:start="185:30" pos:end="185:34">value</name> <init pos:start="185:36" pos:end="185:60">= <expr pos:start="185:38" pos:end="185:60"><call pos:start="185:38" pos:end="185:60"><name pos:start="185:38" pos:end="185:46">GET_FIELD</name><argument_list pos:start="185:47" pos:end="185:60">(<argument pos:start="185:48" pos:end="185:51"><expr pos:start="185:48" pos:end="185:51"><name pos:start="185:48" pos:end="185:51">insn</name></expr></argument>, <argument pos:start="185:54" pos:end="185:55"><expr pos:start="185:54" pos:end="185:55"><literal type="number" pos:start="185:54" pos:end="185:55">10</literal></expr></argument>, <argument pos:start="185:58" pos:end="185:59"><expr pos:start="185:58" pos:end="185:59"><literal type="number" pos:start="185:58" pos:end="185:59">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="187:21" pos:end="187:50"><decl pos:start="187:21" pos:end="187:49"><type pos:start="187:21" pos:end="187:24"><name pos:start="187:21" pos:end="187:24">TCGv</name></type> <name pos:start="187:26" pos:end="187:26">t</name> <init pos:start="187:28" pos:end="187:49">= <expr pos:start="187:30" pos:end="187:49"><call pos:start="187:30" pos:end="187:49"><name pos:start="187:30" pos:end="187:41">gen_dest_gpr</name><argument_list pos:start="187:42" pos:end="187:49">(<argument pos:start="187:43" pos:end="187:44"><expr pos:start="187:43" pos:end="187:44"><name pos:start="187:43" pos:end="187:44">dc</name></expr></argument>, <argument pos:start="187:47" pos:end="187:48"><expr pos:start="187:47" pos:end="187:48"><name pos:start="187:47" pos:end="187:48">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:52"><expr pos:start="189:21" pos:end="189:51"><call pos:start="189:21" pos:end="189:51"><name pos:start="189:21" pos:end="189:35">tcg_gen_movi_tl</name><argument_list pos:start="189:36" pos:end="189:51">(<argument pos:start="189:37" pos:end="189:37"><expr pos:start="189:37" pos:end="189:37"><name pos:start="189:37" pos:end="189:37">t</name></expr></argument>, <argument pos:start="189:40" pos:end="189:50"><expr pos:start="189:40" pos:end="189:50"><name pos:start="189:40" pos:end="189:44">value</name> <operator pos:start="189:46" pos:end="189:47">&lt;&lt;</operator> <literal type="number" pos:start="189:49" pos:end="189:50">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:45"><expr pos:start="191:21" pos:end="191:44"><call pos:start="191:21" pos:end="191:44"><name pos:start="191:21" pos:end="191:33">gen_store_gpr</name><argument_list pos:start="191:34" pos:end="191:44">(<argument pos:start="191:35" pos:end="191:36"><expr pos:start="191:35" pos:end="191:36"><name pos:start="191:35" pos:end="191:36">dc</name></expr></argument>, <argument pos:start="191:39" pos:end="191:40"><expr pos:start="191:39" pos:end="191:40"><name pos:start="191:39" pos:end="191:40">rd</name></expr></argument>, <argument pos:start="191:43" pos:end="191:43"><expr pos:start="191:43" pos:end="191:43"><name pos:start="191:43" pos:end="191:43">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="195:17" pos:end="195:22">break;</break>

            <case pos:start="197:13" pos:end="197:21">case <expr pos:start="197:18" pos:end="197:20"><literal type="number" pos:start="197:18" pos:end="197:20">0x0</literal></expr>:</case>           <comment type="block" pos:start="197:33" pos:end="197:44">/* UNIMPL */</comment>

            <default pos:start="199:13" pos:end="199:20">default:</default>

                <goto pos:start="201:17" pos:end="201:34">goto <name pos:start="201:22" pos:end="201:33">illegal_insn</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        </block_content>}</block>

        <break pos:start="209:9" pos:end="209:14">break;</break>

    <case pos:start="211:5" pos:end="211:11">case <expr pos:start="211:10" pos:end="211:10"><literal type="number" pos:start="211:10" pos:end="211:10">1</literal></expr>:</case>                     <comment type="block" pos:start="211:33" pos:end="211:40">/*CALL*/</comment>

        <block pos:start="213:9" pos:end="241:9">{<block_content pos:start="215:13" pos:end="239:29">

            <decl_stmt pos:start="215:13" pos:end="215:62"><decl pos:start="215:13" pos:end="215:61"><type pos:start="215:13" pos:end="215:23"><name pos:start="215:13" pos:end="215:23">target_long</name></type> <name pos:start="215:25" pos:end="215:30">target</name> <init pos:start="215:32" pos:end="215:61">= <expr pos:start="215:34" pos:end="215:61"><call pos:start="215:34" pos:end="215:56"><name pos:start="215:34" pos:end="215:43">GET_FIELDs</name><argument_list pos:start="215:44" pos:end="215:56">(<argument pos:start="215:45" pos:end="215:48"><expr pos:start="215:45" pos:end="215:48"><name pos:start="215:45" pos:end="215:48">insn</name></expr></argument>, <argument pos:start="215:51" pos:end="215:51"><expr pos:start="215:51" pos:end="215:51"><literal type="number" pos:start="215:51" pos:end="215:51">2</literal></expr></argument>, <argument pos:start="215:54" pos:end="215:55"><expr pos:start="215:54" pos:end="215:55"><literal type="number" pos:start="215:54" pos:end="215:55">31</literal></expr></argument>)</argument_list></call> <operator pos:start="215:58" pos:end="215:59">&lt;&lt;</operator> <literal type="number" pos:start="215:61" pos:end="215:61">2</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="217:13" pos:end="217:43"><decl pos:start="217:13" pos:end="217:42"><type pos:start="217:13" pos:end="217:16"><name pos:start="217:13" pos:end="217:16">TCGv</name></type> <name pos:start="217:18" pos:end="217:19">o7</name> <init pos:start="217:21" pos:end="217:42">= <expr pos:start="217:23" pos:end="217:42"><call pos:start="217:23" pos:end="217:42"><name pos:start="217:23" pos:end="217:34">gen_dest_gpr</name><argument_list pos:start="217:35" pos:end="217:42">(<argument pos:start="217:36" pos:end="217:37"><expr pos:start="217:36" pos:end="217:37"><name pos:start="217:36" pos:end="217:37">dc</name></expr></argument>, <argument pos:start="217:40" pos:end="217:41"><expr pos:start="217:40" pos:end="217:41"><literal type="number" pos:start="217:40" pos:end="217:41">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="221:13" pos:end="221:40"><expr pos:start="221:13" pos:end="221:39"><call pos:start="221:13" pos:end="221:39"><name pos:start="221:13" pos:end="221:27">tcg_gen_movi_tl</name><argument_list pos:start="221:28" pos:end="221:39">(<argument pos:start="221:29" pos:end="221:30"><expr pos:start="221:29" pos:end="221:30"><name pos:start="221:29" pos:end="221:30">o7</name></expr></argument>, <argument pos:start="221:33" pos:end="221:38"><expr pos:start="221:33" pos:end="221:38"><name pos:start="221:33" pos:end="221:38"><name pos:start="221:33" pos:end="221:34">dc</name><operator pos:start="221:35" pos:end="221:36">-&gt;</operator><name pos:start="221:37" pos:end="221:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:38"><expr pos:start="223:13" pos:end="223:37"><call pos:start="223:13" pos:end="223:37"><name pos:start="223:13" pos:end="223:25">gen_store_gpr</name><argument_list pos:start="223:26" pos:end="223:37">(<argument pos:start="223:27" pos:end="223:28"><expr pos:start="223:27" pos:end="223:28"><name pos:start="223:27" pos:end="223:28">dc</name></expr></argument>, <argument pos:start="223:31" pos:end="223:32"><expr pos:start="223:31" pos:end="223:32"><literal type="number" pos:start="223:31" pos:end="223:32">15</literal></expr></argument>, <argument pos:start="223:35" pos:end="223:36"><expr pos:start="223:35" pos:end="223:36"><name pos:start="223:35" pos:end="223:36">o7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:29"><expr pos:start="225:13" pos:end="225:28"><name pos:start="225:13" pos:end="225:18">target</name> <operator pos:start="225:20" pos:end="225:21">+=</operator> <name pos:start="225:23" pos:end="225:28"><name pos:start="225:23" pos:end="225:24">dc</name><operator pos:start="225:25" pos:end="225:26">-&gt;</operator><name pos:start="225:27" pos:end="225:28">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="230:0"><expr pos:start="227:13" pos:end="227:30"><call pos:start="227:13" pos:end="227:30"><name pos:start="227:13" pos:end="227:26">gen_mov_pc_npc</name><argument_list pos:start="227:27" pos:end="227:30">(<argument pos:start="227:28" pos:end="227:29"><expr pos:start="227:28" pos:end="227:29"><name pos:start="227:28" pos:end="227:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="229:1" pos:end="229:21">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:21">TARGET_SPARC64</name></cpp:ifdef>

            <if_stmt pos:start="231:13" pos:end="238:0"><if pos:start="231:13" pos:end="238:0">if <condition pos:start="231:16" pos:end="231:39">(<expr pos:start="231:17" pos:end="231:38"><call pos:start="231:17" pos:end="231:38"><name pos:start="231:17" pos:end="231:24">unlikely</name><argument_list pos:start="231:25" pos:end="231:38">(<argument pos:start="231:26" pos:end="231:37"><expr pos:start="231:26" pos:end="231:37"><call pos:start="231:26" pos:end="231:37"><name pos:start="231:26" pos:end="231:33">AM_CHECK</name><argument_list pos:start="231:34" pos:end="231:37">(<argument pos:start="231:35" pos:end="231:36"><expr pos:start="231:35" pos:end="231:36"><name pos:start="231:35" pos:end="231:36">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:41" pos:end="238:0">{<block_content pos:start="233:17" pos:end="233:40">

                <expr_stmt pos:start="233:17" pos:end="233:40"><expr pos:start="233:17" pos:end="233:39"><name pos:start="233:17" pos:end="233:22">target</name> <operator pos:start="233:24" pos:end="233:25">&amp;=</operator> <literal type="number" pos:start="233:27" pos:end="233:39">0xffffffffULL</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="239:13" pos:end="239:29"><expr pos:start="239:13" pos:end="239:28"><name pos:start="239:13" pos:end="239:19"><name pos:start="239:13" pos:end="239:14">dc</name><operator pos:start="239:15" pos:end="239:16">-&gt;</operator><name pos:start="239:17" pos:end="239:19">npc</name></name> <operator pos:start="239:21" pos:end="239:21">=</operator> <name pos:start="239:23" pos:end="239:28">target</name></expr>;</expr_stmt>

        </block_content>}</block>

        <goto pos:start="243:9" pos:end="243:22">goto <name pos:start="243:14" pos:end="243:21">jmp_insn</name>;</goto>

    <case pos:start="245:5" pos:end="245:11">case <expr pos:start="245:10" pos:end="245:10"><literal type="number" pos:start="245:10" pos:end="245:10">2</literal></expr>:</case>                     <comment type="block" pos:start="245:33" pos:end="245:62">/* FPU &amp; Logical Operations */</comment>

        <block pos:start="247:9" pos:end="4229:9">{<block_content pos:start="249:13" pos:end="4227:18">

            <decl_stmt pos:start="249:13" pos:end="249:54"><decl pos:start="249:13" pos:end="249:53"><type pos:start="249:13" pos:end="249:24"><name pos:start="249:13" pos:end="249:20">unsigned</name> <name pos:start="249:22" pos:end="249:24">int</name></type> <name pos:start="249:26" pos:end="249:28">xop</name> <init pos:start="249:30" pos:end="249:53">= <expr pos:start="249:32" pos:end="249:53"><call pos:start="249:32" pos:end="249:53"><name pos:start="249:32" pos:end="249:40">GET_FIELD</name><argument_list pos:start="249:41" pos:end="249:53">(<argument pos:start="249:42" pos:end="249:45"><expr pos:start="249:42" pos:end="249:45"><name pos:start="249:42" pos:end="249:45">insn</name></expr></argument>, <argument pos:start="249:48" pos:end="249:48"><expr pos:start="249:48" pos:end="249:48"><literal type="number" pos:start="249:48" pos:end="249:48">7</literal></expr></argument>, <argument pos:start="249:51" pos:end="249:52"><expr pos:start="249:51" pos:end="249:52"><literal type="number" pos:start="249:51" pos:end="249:52">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="251:13" pos:end="4225:13"><if pos:start="251:13" pos:end="409:13">if <condition pos:start="251:16" pos:end="251:28">(<expr pos:start="251:17" pos:end="251:27"><name pos:start="251:17" pos:end="251:19">xop</name> <operator pos:start="251:21" pos:end="251:22">==</operator> <literal type="number" pos:start="251:24" pos:end="251:27">0x3a</literal></expr>)</condition> <block pos:start="251:30" pos:end="409:13">{<block_content pos:start="253:17" pos:end="407:17">  <comment type="block" pos:start="251:33" pos:end="251:51">/* generate trap */</comment>

                <decl_stmt pos:start="253:17" pos:end="253:49"><decl pos:start="253:17" pos:end="253:48"><type pos:start="253:17" pos:end="253:19"><name pos:start="253:17" pos:end="253:19">int</name></type> <name pos:start="253:21" pos:end="253:24">cond</name> <init pos:start="253:26" pos:end="253:48">= <expr pos:start="253:28" pos:end="253:48"><call pos:start="253:28" pos:end="253:48"><name pos:start="253:28" pos:end="253:36">GET_FIELD</name><argument_list pos:start="253:37" pos:end="253:48">(<argument pos:start="253:38" pos:end="253:41"><expr pos:start="253:38" pos:end="253:41"><name pos:start="253:38" pos:end="253:41">insn</name></expr></argument>, <argument pos:start="253:44" pos:end="253:44"><expr pos:start="253:44" pos:end="253:44"><literal type="number" pos:start="253:44" pos:end="253:44">3</literal></expr></argument>, <argument pos:start="253:47" pos:end="253:47"><expr pos:start="253:47" pos:end="253:47"><literal type="number" pos:start="253:47" pos:end="253:47">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="255:17" pos:end="255:30"><decl pos:start="255:17" pos:end="255:29"><type pos:start="255:17" pos:end="255:24"><name pos:start="255:17" pos:end="255:24">TCGv_i32</name></type> <name pos:start="255:26" pos:end="255:29">trap</name></decl>;</decl_stmt>

                <decl_stmt pos:start="257:17" pos:end="257:34"><decl pos:start="257:17" pos:end="257:27"><type pos:start="257:17" pos:end="257:19"><name pos:start="257:17" pos:end="257:19">int</name></type> <name pos:start="257:21" pos:end="257:22">l1</name> <init pos:start="257:24" pos:end="257:27">= <expr pos:start="257:26" pos:end="257:27"><operator pos:start="257:26" pos:end="257:26">-</operator><literal type="number" pos:start="257:27" pos:end="257:27">1</literal></expr></init></decl>, <decl pos:start="257:30" pos:end="257:33"><type ref="prev" pos:start="257:17" pos:end="257:19"/><name pos:start="257:30" pos:end="257:33">mask</name></decl>;</decl_stmt>



                <if_stmt pos:start="261:17" pos:end="267:17"><if pos:start="261:17" pos:end="267:17">if <condition pos:start="261:20" pos:end="261:30">(<expr pos:start="261:21" pos:end="261:29"><name pos:start="261:21" pos:end="261:24">cond</name> <operator pos:start="261:26" pos:end="261:27">==</operator> <literal type="number" pos:start="261:29" pos:end="261:29">0</literal></expr>)</condition> <block pos:start="261:32" pos:end="267:17">{<block_content pos:start="265:21" pos:end="265:26">

                    <comment type="block" pos:start="263:21" pos:end="263:38">/* Trap never.  */</comment>

                    <break pos:start="265:21" pos:end="265:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="271:17" pos:end="271:31"><expr pos:start="271:17" pos:end="271:30"><call pos:start="271:17" pos:end="271:30"><name pos:start="271:17" pos:end="271:26">save_state</name><argument_list pos:start="271:27" pos:end="271:30">(<argument pos:start="271:28" pos:end="271:29"><expr pos:start="271:28" pos:end="271:29"><name pos:start="271:28" pos:end="271:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="275:17" pos:end="315:17"><if pos:start="275:17" pos:end="315:17">if <condition pos:start="275:20" pos:end="275:30">(<expr pos:start="275:21" pos:end="275:29"><name pos:start="275:21" pos:end="275:24">cond</name> <operator pos:start="275:26" pos:end="275:27">!=</operator> <literal type="number" pos:start="275:29" pos:end="275:29">8</literal></expr>)</condition> <block pos:start="275:32" pos:end="315:17">{<block_content pos:start="279:21" pos:end="313:39">

                    <comment type="block" pos:start="277:21" pos:end="277:44">/* Conditional trap.  */</comment>

                    <decl_stmt pos:start="279:21" pos:end="282:0"><decl pos:start="279:21" pos:end="279:36"><type pos:start="279:21" pos:end="279:32"><name pos:start="279:21" pos:end="279:32">DisasCompare</name></type> <name pos:start="279:34" pos:end="279:36">cmp</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="281:1" pos:end="281:21">#<cpp:directive pos:start="281:2" pos:end="281:6">ifdef</cpp:directive> <name pos:start="281:8" pos:end="281:21">TARGET_SPARC64</name></cpp:ifdef>

                    <comment type="block" pos:start="283:21" pos:end="283:36">/* V9 icc/xcc */</comment>

                    <decl_stmt pos:start="285:21" pos:end="285:56"><decl pos:start="285:21" pos:end="285:55"><type pos:start="285:21" pos:end="285:23"><name pos:start="285:21" pos:end="285:23">int</name></type> <name pos:start="285:25" pos:end="285:26">cc</name> <init pos:start="285:28" pos:end="285:55">= <expr pos:start="285:30" pos:end="285:55"><call pos:start="285:30" pos:end="285:55"><name pos:start="285:30" pos:end="285:41">GET_FIELD_SP</name><argument_list pos:start="285:42" pos:end="285:55">(<argument pos:start="285:43" pos:end="285:46"><expr pos:start="285:43" pos:end="285:46"><name pos:start="285:43" pos:end="285:46">insn</name></expr></argument>, <argument pos:start="285:49" pos:end="285:50"><expr pos:start="285:49" pos:end="285:50"><literal type="number" pos:start="285:49" pos:end="285:50">11</literal></expr></argument>, <argument pos:start="285:53" pos:end="285:54"><expr pos:start="285:53" pos:end="285:54"><literal type="number" pos:start="285:53" pos:end="285:54">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="287:21" pos:end="302:0"><if pos:start="287:21" pos:end="291:21">if <condition pos:start="287:24" pos:end="287:32">(<expr pos:start="287:25" pos:end="287:31"><name pos:start="287:25" pos:end="287:26">cc</name> <operator pos:start="287:28" pos:end="287:29">==</operator> <literal type="number" pos:start="287:31" pos:end="287:31">0</literal></expr>)</condition> <block pos:start="287:34" pos:end="291:21">{<block_content pos:start="289:25" pos:end="289:55">

                        <expr_stmt pos:start="289:25" pos:end="289:55"><expr pos:start="289:25" pos:end="289:54"><call pos:start="289:25" pos:end="289:54"><name pos:start="289:25" pos:end="289:35">gen_compare</name><argument_list pos:start="289:36" pos:end="289:54">(<argument pos:start="289:37" pos:end="289:40"><expr pos:start="289:37" pos:end="289:40"><operator pos:start="289:37" pos:end="289:37">&amp;</operator><name pos:start="289:38" pos:end="289:40">cmp</name></expr></argument>, <argument pos:start="289:43" pos:end="289:43"><expr pos:start="289:43" pos:end="289:43"><literal type="number" pos:start="289:43" pos:end="289:43">0</literal></expr></argument>, <argument pos:start="289:46" pos:end="289:49"><expr pos:start="289:46" pos:end="289:49"><name pos:start="289:46" pos:end="289:49">cond</name></expr></argument>, <argument pos:start="289:52" pos:end="289:53"><expr pos:start="289:52" pos:end="289:53"><name pos:start="289:52" pos:end="289:53">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="291:23" pos:end="295:21">else if <condition pos:start="291:31" pos:end="291:39">(<expr pos:start="291:32" pos:end="291:38"><name pos:start="291:32" pos:end="291:33">cc</name> <operator pos:start="291:35" pos:end="291:36">==</operator> <literal type="number" pos:start="291:38" pos:end="291:38">2</literal></expr>)</condition> <block pos:start="291:41" pos:end="295:21">{<block_content pos:start="293:25" pos:end="293:55">

                        <expr_stmt pos:start="293:25" pos:end="293:55"><expr pos:start="293:25" pos:end="293:54"><call pos:start="293:25" pos:end="293:54"><name pos:start="293:25" pos:end="293:35">gen_compare</name><argument_list pos:start="293:36" pos:end="293:54">(<argument pos:start="293:37" pos:end="293:40"><expr pos:start="293:37" pos:end="293:40"><operator pos:start="293:37" pos:end="293:37">&amp;</operator><name pos:start="293:38" pos:end="293:40">cmp</name></expr></argument>, <argument pos:start="293:43" pos:end="293:43"><expr pos:start="293:43" pos:end="293:43"><literal type="number" pos:start="293:43" pos:end="293:43">1</literal></expr></argument>, <argument pos:start="293:46" pos:end="293:49"><expr pos:start="293:46" pos:end="293:49"><name pos:start="293:46" pos:end="293:49">cond</name></expr></argument>, <argument pos:start="293:52" pos:end="293:53"><expr pos:start="293:52" pos:end="293:53"><name pos:start="293:52" pos:end="293:53">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="295:23" pos:end="302:0">else <block pos:start="295:28" pos:end="302:0">{<block_content pos:start="297:25" pos:end="297:42">

                        <goto pos:start="297:25" pos:end="297:42">goto <name pos:start="297:30" pos:end="297:41">illegal_insn</name>;</goto>

                    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="301:1" pos:end="301:5">#<cpp:directive pos:start="301:2" pos:end="301:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="303:21" pos:end="306:0"><expr pos:start="303:21" pos:end="303:50"><call pos:start="303:21" pos:end="303:50"><name pos:start="303:21" pos:end="303:31">gen_compare</name><argument_list pos:start="303:32" pos:end="303:50">(<argument pos:start="303:33" pos:end="303:36"><expr pos:start="303:33" pos:end="303:36"><operator pos:start="303:33" pos:end="303:33">&amp;</operator><name pos:start="303:34" pos:end="303:36">cmp</name></expr></argument>, <argument pos:start="303:39" pos:end="303:39"><expr pos:start="303:39" pos:end="303:39"><literal type="number" pos:start="303:39" pos:end="303:39">0</literal></expr></argument>, <argument pos:start="303:42" pos:end="303:45"><expr pos:start="303:42" pos:end="303:45"><name pos:start="303:42" pos:end="303:45">cond</name></expr></argument>, <argument pos:start="303:48" pos:end="303:49"><expr pos:start="303:48" pos:end="303:49"><name pos:start="303:48" pos:end="303:49">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="307:21" pos:end="307:41"><expr pos:start="307:21" pos:end="307:40"><name pos:start="307:21" pos:end="307:22">l1</name> <operator pos:start="307:24" pos:end="307:24">=</operator> <call pos:start="307:26" pos:end="307:40"><name pos:start="307:26" pos:end="307:38">gen_new_label</name><argument_list pos:start="307:39" pos:end="307:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="309:21" pos:end="311:58"><expr pos:start="309:21" pos:end="311:57"><call pos:start="309:21" pos:end="311:57"><name pos:start="309:21" pos:end="309:37">tcg_gen_brcond_tl</name><argument_list pos:start="309:38" pos:end="311:57">(<argument pos:start="309:39" pos:end="309:63"><expr pos:start="309:39" pos:end="309:63"><call pos:start="309:39" pos:end="309:63"><name pos:start="309:39" pos:end="309:53">tcg_invert_cond</name><argument_list pos:start="309:54" pos:end="309:63">(<argument pos:start="309:55" pos:end="309:62"><expr pos:start="309:55" pos:end="309:62"><name pos:start="309:55" pos:end="309:62"><name pos:start="309:55" pos:end="309:57">cmp</name><operator pos:start="309:58" pos:end="309:58">.</operator><name pos:start="309:59" pos:end="309:62">cond</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="311:39" pos:end="311:44"><expr pos:start="311:39" pos:end="311:44"><name pos:start="311:39" pos:end="311:44"><name pos:start="311:39" pos:end="311:41">cmp</name><operator pos:start="311:42" pos:end="311:42">.</operator><name pos:start="311:43" pos:end="311:44">c1</name></name></expr></argument>, <argument pos:start="311:47" pos:end="311:52"><expr pos:start="311:47" pos:end="311:52"><name pos:start="311:47" pos:end="311:52"><name pos:start="311:47" pos:end="311:49">cmp</name><operator pos:start="311:50" pos:end="311:50">.</operator><name pos:start="311:51" pos:end="311:52">c2</name></name></expr></argument>, <argument pos:start="311:55" pos:end="311:56"><expr pos:start="311:55" pos:end="311:56"><name pos:start="311:55" pos:end="311:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="313:21" pos:end="313:39"><expr pos:start="313:21" pos:end="313:38"><call pos:start="313:21" pos:end="313:38"><name pos:start="313:21" pos:end="313:32">free_compare</name><argument_list pos:start="313:33" pos:end="313:38">(<argument pos:start="313:34" pos:end="313:37"><expr pos:start="313:34" pos:end="313:37"><operator pos:start="313:34" pos:end="313:34">&amp;</operator><name pos:start="313:35" pos:end="313:37">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="319:17" pos:end="321:60"><expr pos:start="319:17" pos:end="321:59"><name pos:start="319:17" pos:end="319:20">mask</name> <operator pos:start="319:22" pos:end="319:22">=</operator> <operator pos:start="319:24" pos:end="319:24">(</operator><ternary pos:start="319:25" pos:end="321:58"><condition pos:start="319:25" pos:end="321:25"><expr pos:start="319:25" pos:end="319:80"><operator pos:start="319:25" pos:end="319:25">(</operator><name pos:start="319:26" pos:end="319:42"><name pos:start="319:26" pos:end="319:27">dc</name><operator pos:start="319:28" pos:end="319:29">-&gt;</operator><name pos:start="319:30" pos:end="319:32">def</name><operator pos:start="319:33" pos:end="319:34">-&gt;</operator><name pos:start="319:35" pos:end="319:42">features</name></name> <operator pos:start="319:44" pos:end="319:44">&amp;</operator> <name pos:start="319:46" pos:end="319:61">CPU_FEATURE_HYPV</name><operator pos:start="319:62" pos:end="319:62">)</operator> <operator pos:start="319:64" pos:end="319:65">&amp;&amp;</operator> <call pos:start="319:67" pos:end="319:80"><name pos:start="319:67" pos:end="319:76">supervisor</name><argument_list pos:start="319:77" pos:end="319:80">(<argument pos:start="319:78" pos:end="319:79"><expr pos:start="319:78" pos:end="319:79"><name pos:start="319:78" pos:end="319:79">dc</name></expr></argument>)</argument_list></call></expr>

                        ?</condition><then pos:start="321:27" pos:end="321:43"> <expr pos:start="321:27" pos:end="321:43"><name pos:start="321:27" pos:end="321:43">UA2005_HTRAP_MASK</name></expr> </then><else pos:start="321:45" pos:end="321:58">: <expr pos:start="321:47" pos:end="321:58"><name pos:start="321:47" pos:end="321:58">V8_TRAP_MASK</name></expr></else></ternary><operator pos:start="321:59" pos:end="321:59">)</operator></expr>;</expr_stmt>



                <comment type="block" pos:start="325:17" pos:end="329:74">/* Don't use the normal temporaries, as they may well have

                   gone out of scope with the branch above.  While we're

                   doing that we might as well pre-truncate to 32-bit.  */</comment>

                <expr_stmt pos:start="331:17" pos:end="331:42"><expr pos:start="331:17" pos:end="331:41"><name pos:start="331:17" pos:end="331:20">trap</name> <operator pos:start="331:22" pos:end="331:22">=</operator> <call pos:start="331:24" pos:end="331:41"><name pos:start="331:24" pos:end="331:39">tcg_temp_new_i32</name><argument_list pos:start="331:40" pos:end="331:41">()</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="335:17" pos:end="335:49"><expr pos:start="335:17" pos:end="335:48"><name pos:start="335:17" pos:end="335:19">rs1</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="335:48"><name pos:start="335:23" pos:end="335:34">GET_FIELD_SP</name><argument_list pos:start="335:35" pos:end="335:48">(<argument pos:start="335:36" pos:end="335:39"><expr pos:start="335:36" pos:end="335:39"><name pos:start="335:36" pos:end="335:39">insn</name></expr></argument>, <argument pos:start="335:42" pos:end="335:43"><expr pos:start="335:42" pos:end="335:43"><literal type="number" pos:start="335:42" pos:end="335:43">14</literal></expr></argument>, <argument pos:start="335:46" pos:end="335:47"><expr pos:start="335:46" pos:end="335:47"><literal type="number" pos:start="335:46" pos:end="335:47">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="337:17" pos:end="373:17"><if pos:start="337:17" pos:end="359:17">if <condition pos:start="337:20" pos:end="337:27">(<expr pos:start="337:21" pos:end="337:26"><name pos:start="337:21" pos:end="337:26">IS_IMM</name></expr>)</condition> <block pos:start="337:29" pos:end="359:17">{<block_content pos:start="339:21" pos:end="357:21">

                    <expr_stmt pos:start="339:21" pos:end="339:51"><expr pos:start="339:21" pos:end="339:50"><name pos:start="339:21" pos:end="339:23">rs2</name> <operator pos:start="339:25" pos:end="339:25">=</operator> <call pos:start="339:27" pos:end="339:50"><name pos:start="339:27" pos:end="339:38">GET_FIELD_SP</name><argument_list pos:start="339:39" pos:end="339:50">(<argument pos:start="339:40" pos:end="339:43"><expr pos:start="339:40" pos:end="339:43"><name pos:start="339:40" pos:end="339:43">insn</name></expr></argument>, <argument pos:start="339:46" pos:end="339:46"><expr pos:start="339:46" pos:end="339:46"><literal type="number" pos:start="339:46" pos:end="339:46">0</literal></expr></argument>, <argument pos:start="339:49" pos:end="339:49"><expr pos:start="339:49" pos:end="339:49"><literal type="number" pos:start="339:49" pos:end="339:49">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="341:21" pos:end="357:21"><if pos:start="341:21" pos:end="349:21">if <condition pos:start="341:24" pos:end="341:33">(<expr pos:start="341:25" pos:end="341:32"><name pos:start="341:25" pos:end="341:27">rs1</name> <operator pos:start="341:29" pos:end="341:30">==</operator> <literal type="number" pos:start="341:32" pos:end="341:32">0</literal></expr>)</condition> <block pos:start="341:35" pos:end="349:21">{<block_content pos:start="343:25" pos:end="347:33">

                        <expr_stmt pos:start="343:25" pos:end="343:71"><expr pos:start="343:25" pos:end="343:70"><call pos:start="343:25" pos:end="343:70"><name pos:start="343:25" pos:end="343:40">tcg_gen_movi_i32</name><argument_list pos:start="343:41" pos:end="343:70">(<argument pos:start="343:42" pos:end="343:45"><expr pos:start="343:42" pos:end="343:45"><name pos:start="343:42" pos:end="343:45">trap</name></expr></argument>, <argument pos:start="343:48" pos:end="343:69"><expr pos:start="343:48" pos:end="343:69"><operator pos:start="343:48" pos:end="343:48">(</operator><name pos:start="343:49" pos:end="343:51">rs2</name> <operator pos:start="343:53" pos:end="343:53">&amp;</operator> <name pos:start="343:55" pos:end="343:58">mask</name><operator pos:start="343:59" pos:end="343:59">)</operator> <operator pos:start="343:61" pos:end="343:61">+</operator> <name pos:start="343:63" pos:end="343:69">TT_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="345:25" pos:end="345:76">/* Signal that the trap value is fully constant.  */</comment>

                        <expr_stmt pos:start="347:25" pos:end="347:33"><expr pos:start="347:25" pos:end="347:32"><name pos:start="347:25" pos:end="347:28">mask</name> <operator pos:start="347:30" pos:end="347:30">=</operator> <literal type="number" pos:start="347:32" pos:end="347:32">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="349:23" pos:end="357:21">else <block pos:start="349:28" pos:end="357:21">{<block_content pos:start="351:25" pos:end="355:58">

                        <decl_stmt pos:start="351:25" pos:end="351:56"><decl pos:start="351:25" pos:end="351:55"><type pos:start="351:25" pos:end="351:28"><name pos:start="351:25" pos:end="351:28">TCGv</name></type> <name pos:start="351:30" pos:end="351:31">t1</name> <init pos:start="351:33" pos:end="351:55">= <expr pos:start="351:35" pos:end="351:55"><call pos:start="351:35" pos:end="351:55"><name pos:start="351:35" pos:end="351:46">gen_load_gpr</name><argument_list pos:start="351:47" pos:end="351:55">(<argument pos:start="351:48" pos:end="351:49"><expr pos:start="351:48" pos:end="351:49"><name pos:start="351:48" pos:end="351:49">dc</name></expr></argument>, <argument pos:start="351:52" pos:end="351:54"><expr pos:start="351:52" pos:end="351:54"><name pos:start="351:52" pos:end="351:54">rs1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="353:25" pos:end="353:55"><expr pos:start="353:25" pos:end="353:54"><call pos:start="353:25" pos:end="353:54"><name pos:start="353:25" pos:end="353:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="353:45" pos:end="353:54">(<argument pos:start="353:46" pos:end="353:49"><expr pos:start="353:46" pos:end="353:49"><name pos:start="353:46" pos:end="353:49">trap</name></expr></argument>, <argument pos:start="353:52" pos:end="353:53"><expr pos:start="353:52" pos:end="353:53"><name pos:start="353:52" pos:end="353:53">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="355:25" pos:end="355:58"><expr pos:start="355:25" pos:end="355:57"><call pos:start="355:25" pos:end="355:57"><name pos:start="355:25" pos:end="355:40">tcg_gen_addi_i32</name><argument_list pos:start="355:41" pos:end="355:57">(<argument pos:start="355:42" pos:end="355:45"><expr pos:start="355:42" pos:end="355:45"><name pos:start="355:42" pos:end="355:45">trap</name></expr></argument>, <argument pos:start="355:48" pos:end="355:51"><expr pos:start="355:48" pos:end="355:51"><name pos:start="355:48" pos:end="355:51">trap</name></expr></argument>, <argument pos:start="355:54" pos:end="355:56"><expr pos:start="355:54" pos:end="355:56"><name pos:start="355:54" pos:end="355:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="359:19" pos:end="373:17">else <block pos:start="359:24" pos:end="373:17">{<block_content pos:start="361:21" pos:end="371:51">

                    <decl_stmt pos:start="361:21" pos:end="361:32"><decl pos:start="361:21" pos:end="361:27"><type pos:start="361:21" pos:end="361:24"><name pos:start="361:21" pos:end="361:24">TCGv</name></type> <name pos:start="361:26" pos:end="361:27">t1</name></decl>, <decl pos:start="361:30" pos:end="361:31"><type ref="prev" pos:start="361:21" pos:end="361:24"/><name pos:start="361:30" pos:end="361:31">t2</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="363:21" pos:end="363:51"><expr pos:start="363:21" pos:end="363:50"><name pos:start="363:21" pos:end="363:23">rs2</name> <operator pos:start="363:25" pos:end="363:25">=</operator> <call pos:start="363:27" pos:end="363:50"><name pos:start="363:27" pos:end="363:38">GET_FIELD_SP</name><argument_list pos:start="363:39" pos:end="363:50">(<argument pos:start="363:40" pos:end="363:43"><expr pos:start="363:40" pos:end="363:43"><name pos:start="363:40" pos:end="363:43">insn</name></expr></argument>, <argument pos:start="363:46" pos:end="363:46"><expr pos:start="363:46" pos:end="363:46"><literal type="number" pos:start="363:46" pos:end="363:46">0</literal></expr></argument>, <argument pos:start="363:49" pos:end="363:49"><expr pos:start="363:49" pos:end="363:49"><literal type="number" pos:start="363:49" pos:end="363:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="365:21" pos:end="365:47"><expr pos:start="365:21" pos:end="365:46"><name pos:start="365:21" pos:end="365:22">t1</name> <operator pos:start="365:24" pos:end="365:24">=</operator> <call pos:start="365:26" pos:end="365:46"><name pos:start="365:26" pos:end="365:37">gen_load_gpr</name><argument_list pos:start="365:38" pos:end="365:46">(<argument pos:start="365:39" pos:end="365:40"><expr pos:start="365:39" pos:end="365:40"><name pos:start="365:39" pos:end="365:40">dc</name></expr></argument>, <argument pos:start="365:43" pos:end="365:45"><expr pos:start="365:43" pos:end="365:45"><name pos:start="365:43" pos:end="365:45">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:47"><expr pos:start="367:21" pos:end="367:46"><name pos:start="367:21" pos:end="367:22">t2</name> <operator pos:start="367:24" pos:end="367:24">=</operator> <call pos:start="367:26" pos:end="367:46"><name pos:start="367:26" pos:end="367:37">gen_load_gpr</name><argument_list pos:start="367:38" pos:end="367:46">(<argument pos:start="367:39" pos:end="367:40"><expr pos:start="367:39" pos:end="367:40"><name pos:start="367:39" pos:end="367:40">dc</name></expr></argument>, <argument pos:start="367:43" pos:end="367:45"><expr pos:start="367:43" pos:end="367:45"><name pos:start="367:43" pos:end="367:45">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:47"><expr pos:start="369:21" pos:end="369:46"><call pos:start="369:21" pos:end="369:46"><name pos:start="369:21" pos:end="369:34">tcg_gen_add_tl</name><argument_list pos:start="369:35" pos:end="369:46">(<argument pos:start="369:36" pos:end="369:37"><expr pos:start="369:36" pos:end="369:37"><name pos:start="369:36" pos:end="369:37">t1</name></expr></argument>, <argument pos:start="369:40" pos:end="369:41"><expr pos:start="369:40" pos:end="369:41"><name pos:start="369:40" pos:end="369:41">t1</name></expr></argument>, <argument pos:start="369:44" pos:end="369:45"><expr pos:start="369:44" pos:end="369:45"><name pos:start="369:44" pos:end="369:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="371:21" pos:end="371:51"><expr pos:start="371:21" pos:end="371:50"><call pos:start="371:21" pos:end="371:50"><name pos:start="371:21" pos:end="371:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="371:41" pos:end="371:50">(<argument pos:start="371:42" pos:end="371:45"><expr pos:start="371:42" pos:end="371:45"><name pos:start="371:42" pos:end="371:45">trap</name></expr></argument>, <argument pos:start="371:48" pos:end="371:49"><expr pos:start="371:48" pos:end="371:49"><name pos:start="371:48" pos:end="371:49">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="375:17" pos:end="381:17"><if pos:start="375:17" pos:end="381:17">if <condition pos:start="375:20" pos:end="375:30">(<expr pos:start="375:21" pos:end="375:29"><name pos:start="375:21" pos:end="375:24">mask</name> <operator pos:start="375:26" pos:end="375:27">!=</operator> <literal type="number" pos:start="375:29" pos:end="375:29">0</literal></expr>)</condition> <block pos:start="375:32" pos:end="381:17">{<block_content pos:start="377:21" pos:end="379:58">

                    <expr_stmt pos:start="377:21" pos:end="377:55"><expr pos:start="377:21" pos:end="377:54"><call pos:start="377:21" pos:end="377:54"><name pos:start="377:21" pos:end="377:36">tcg_gen_andi_i32</name><argument_list pos:start="377:37" pos:end="377:54">(<argument pos:start="377:38" pos:end="377:41"><expr pos:start="377:38" pos:end="377:41"><name pos:start="377:38" pos:end="377:41">trap</name></expr></argument>, <argument pos:start="377:44" pos:end="377:47"><expr pos:start="377:44" pos:end="377:47"><name pos:start="377:44" pos:end="377:47">trap</name></expr></argument>, <argument pos:start="377:50" pos:end="377:53"><expr pos:start="377:50" pos:end="377:53"><name pos:start="377:50" pos:end="377:53">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:58"><expr pos:start="379:21" pos:end="379:57"><call pos:start="379:21" pos:end="379:57"><name pos:start="379:21" pos:end="379:36">tcg_gen_addi_i32</name><argument_list pos:start="379:37" pos:end="379:57">(<argument pos:start="379:38" pos:end="379:41"><expr pos:start="379:38" pos:end="379:41"><name pos:start="379:38" pos:end="379:41">trap</name></expr></argument>, <argument pos:start="379:44" pos:end="379:47"><expr pos:start="379:44" pos:end="379:47"><name pos:start="379:44" pos:end="379:47">trap</name></expr></argument>, <argument pos:start="379:50" pos:end="379:56"><expr pos:start="379:50" pos:end="379:56"><name pos:start="379:50" pos:end="379:56">TT_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="385:17" pos:end="385:58"><expr pos:start="385:17" pos:end="385:57"><call pos:start="385:17" pos:end="385:57"><name pos:start="385:17" pos:end="385:42">gen_helper_raise_exception</name><argument_list pos:start="385:43" pos:end="385:57">(<argument pos:start="385:44" pos:end="385:50"><expr pos:start="385:44" pos:end="385:50"><name pos:start="385:44" pos:end="385:50">cpu_env</name></expr></argument>, <argument pos:start="385:53" pos:end="385:56"><expr pos:start="385:53" pos:end="385:56"><name pos:start="385:53" pos:end="385:56">trap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:40"><expr pos:start="387:17" pos:end="387:39"><call pos:start="387:17" pos:end="387:39"><name pos:start="387:17" pos:end="387:33">tcg_temp_free_i32</name><argument_list pos:start="387:34" pos:end="387:39">(<argument pos:start="387:35" pos:end="387:38"><expr pos:start="387:35" pos:end="387:38"><name pos:start="387:35" pos:end="387:38">trap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="391:17" pos:end="407:17"><if pos:start="391:17" pos:end="399:17">if <condition pos:start="391:20" pos:end="391:30">(<expr pos:start="391:21" pos:end="391:29"><name pos:start="391:21" pos:end="391:24">cond</name> <operator pos:start="391:26" pos:end="391:27">==</operator> <literal type="number" pos:start="391:29" pos:end="391:29">8</literal></expr>)</condition> <block pos:start="391:32" pos:end="399:17">{<block_content pos:start="395:21" pos:end="397:34">

                    <comment type="block" pos:start="393:21" pos:end="393:61">/* An unconditional trap ends the TB.  */</comment>

                    <expr_stmt pos:start="395:21" pos:end="395:34"><expr pos:start="395:21" pos:end="395:33"><name pos:start="395:21" pos:end="395:29"><name pos:start="395:21" pos:end="395:22">dc</name><operator pos:start="395:23" pos:end="395:24">-&gt;</operator><name pos:start="395:25" pos:end="395:29">is_br</name></name> <operator pos:start="395:31" pos:end="395:31">=</operator> <literal type="number" pos:start="395:33" pos:end="395:33">1</literal></expr>;</expr_stmt>

                    <goto pos:start="397:21" pos:end="397:34">goto <name pos:start="397:26" pos:end="397:33">jmp_insn</name>;</goto>

                </block_content>}</block></if> <else pos:start="399:19" pos:end="407:17">else <block pos:start="399:24" pos:end="407:17">{<block_content pos:start="403:21" pos:end="405:26">

                    <comment type="block" pos:start="401:21" pos:end="401:77">/* A conditional trap falls through to the next insn.  */</comment>

                    <expr_stmt pos:start="403:21" pos:end="403:38"><expr pos:start="403:21" pos:end="403:37"><call pos:start="403:21" pos:end="403:37"><name pos:start="403:21" pos:end="403:33">gen_set_label</name><argument_list pos:start="403:34" pos:end="403:37">(<argument pos:start="403:35" pos:end="403:36"><expr pos:start="403:35" pos:end="403:36"><name pos:start="403:35" pos:end="403:36">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="405:21" pos:end="405:26">break;</break>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="409:15" pos:end="611:13">else if <condition pos:start="409:23" pos:end="409:35">(<expr pos:start="409:24" pos:end="409:34"><name pos:start="409:24" pos:end="409:26">xop</name> <operator pos:start="409:28" pos:end="409:29">==</operator> <literal type="number" pos:start="409:31" pos:end="409:34">0x28</literal></expr>)</condition> <block pos:start="409:37" pos:end="611:13">{<block_content pos:start="411:17" pos:end="610:0">

                <expr_stmt pos:start="411:17" pos:end="411:46"><expr pos:start="411:17" pos:end="411:45"><name pos:start="411:17" pos:end="411:19">rs1</name> <operator pos:start="411:21" pos:end="411:21">=</operator> <call pos:start="411:23" pos:end="411:45"><name pos:start="411:23" pos:end="411:31">GET_FIELD</name><argument_list pos:start="411:32" pos:end="411:45">(<argument pos:start="411:33" pos:end="411:36"><expr pos:start="411:33" pos:end="411:36"><name pos:start="411:33" pos:end="411:36">insn</name></expr></argument>, <argument pos:start="411:39" pos:end="411:40"><expr pos:start="411:39" pos:end="411:40"><literal type="number" pos:start="411:39" pos:end="411:40">13</literal></expr></argument>, <argument pos:start="411:43" pos:end="411:44"><expr pos:start="411:43" pos:end="411:44"><literal type="number" pos:start="411:43" pos:end="411:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="413:17" pos:end="610:0">switch<condition pos:start="413:23" pos:end="413:27">(<expr pos:start="413:24" pos:end="413:26"><name pos:start="413:24" pos:end="413:26">rs1</name></expr>)</condition> <block pos:start="413:29" pos:end="610:0">{<block_content pos:start="415:17" pos:end="605:38">

                <case pos:start="415:17" pos:end="418:0">case <expr pos:start="415:22" pos:end="415:22"><literal type="number" pos:start="415:22" pos:end="415:22">0</literal></expr>:</case> <comment type="block" pos:start="415:25" pos:end="415:33">/* rdy */</comment>

<cpp:ifndef pos:start="417:1" pos:end="417:22">#<cpp:directive pos:start="417:2" pos:end="417:7">ifndef</cpp:directive> <name pos:start="417:9" pos:end="417:22">TARGET_SPARC64</name></cpp:ifndef>

                <case pos:start="419:17" pos:end="419:35">case <expr pos:start="419:22" pos:end="419:34"><literal type="number" pos:start="419:22" pos:end="419:25">0x01</literal> <operator pos:start="419:27" pos:end="419:29">...</operator> <literal type="number" pos:start="419:31" pos:end="419:34">0x0e</literal></expr>:</case> <comment type="block" pos:start="419:37" pos:end="423:44">/* undefined in the SPARCv8

                                       manual, rdy on the microSPARC

                                       II */</comment>

                <case pos:start="425:17" pos:end="425:26">case <expr pos:start="425:22" pos:end="425:25"><literal type="number" pos:start="425:22" pos:end="425:25">0x0f</literal></expr>:</case>          <comment type="block" pos:start="425:37" pos:end="427:66">/* stbar in the SPARCv8 manual,

                                       rdy on the microSPARC II */</comment>

                <case pos:start="429:17" pos:end="429:35">case <expr pos:start="429:22" pos:end="429:34"><literal type="number" pos:start="429:22" pos:end="429:25">0x10</literal> <operator pos:start="429:27" pos:end="429:29">...</operator> <literal type="number" pos:start="429:31" pos:end="429:34">0x1f</literal></expr>:</case> <comment type="block" pos:start="429:37" pos:end="433:55">/* implementation-dependent in the

                                       SPARCv8 manual, rdy on the

                                       microSPARC II */</comment>

                    <comment type="block" pos:start="435:21" pos:end="435:36">/* Read Asr17 */</comment>

                    <if_stmt pos:start="437:21" pos:end="452:0"><if pos:start="437:21" pos:end="452:0">if <condition pos:start="437:24" pos:end="437:77">(<expr pos:start="437:25" pos:end="437:76"><name pos:start="437:25" pos:end="437:27">rs1</name> <operator pos:start="437:29" pos:end="437:30">==</operator> <literal type="number" pos:start="437:32" pos:end="437:35">0x11</literal> <operator pos:start="437:37" pos:end="437:38">&amp;&amp;</operator> <name pos:start="437:40" pos:end="437:56"><name pos:start="437:40" pos:end="437:41">dc</name><operator pos:start="437:42" pos:end="437:43">-&gt;</operator><name pos:start="437:44" pos:end="437:46">def</name><operator pos:start="437:47" pos:end="437:48">-&gt;</operator><name pos:start="437:49" pos:end="437:56">features</name></name> <operator pos:start="437:58" pos:end="437:58">&amp;</operator> <name pos:start="437:60" pos:end="437:76">CPU_FEATURE_ASR17</name></expr>)</condition> <block pos:start="437:79" pos:end="452:0">{<block_content pos:start="439:25" pos:end="447:30">

                        <decl_stmt pos:start="439:25" pos:end="439:54"><decl pos:start="439:25" pos:end="439:53"><type pos:start="439:25" pos:end="439:28"><name pos:start="439:25" pos:end="439:28">TCGv</name></type> <name pos:start="439:30" pos:end="439:30">t</name> <init pos:start="439:32" pos:end="439:53">= <expr pos:start="439:34" pos:end="439:53"><call pos:start="439:34" pos:end="439:53"><name pos:start="439:34" pos:end="439:45">gen_dest_gpr</name><argument_list pos:start="439:46" pos:end="439:53">(<argument pos:start="439:47" pos:end="439:48"><expr pos:start="439:47" pos:end="439:48"><name pos:start="439:47" pos:end="439:48">dc</name></expr></argument>, <argument pos:start="439:51" pos:end="439:52"><expr pos:start="439:51" pos:end="439:52"><name pos:start="439:51" pos:end="439:52">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="block" pos:start="441:25" pos:end="441:66">/* Read Asr17 for a Leon3 monoprocessor */</comment>

                        <expr_stmt pos:start="443:25" pos:end="443:79"><expr pos:start="443:25" pos:end="443:78"><call pos:start="443:25" pos:end="443:78"><name pos:start="443:25" pos:end="443:39">tcg_gen_movi_tl</name><argument_list pos:start="443:40" pos:end="443:78">(<argument pos:start="443:41" pos:end="443:41"><expr pos:start="443:41" pos:end="443:41"><name pos:start="443:41" pos:end="443:41">t</name></expr></argument>, <argument pos:start="443:44" pos:end="443:77"><expr pos:start="443:44" pos:end="443:77"><operator pos:start="443:44" pos:end="443:44">(</operator><literal type="number" pos:start="443:45" pos:end="443:45">1</literal> <operator pos:start="443:47" pos:end="443:48">&lt;&lt;</operator> <literal type="number" pos:start="443:50" pos:end="443:50">8</literal><operator pos:start="443:51" pos:end="443:51">)</operator> <operator pos:start="443:53" pos:end="443:53">|</operator> <operator pos:start="443:55" pos:end="443:55">(</operator><name pos:start="443:56" pos:end="443:72"><name pos:start="443:56" pos:end="443:57">dc</name><operator pos:start="443:58" pos:end="443:59">-&gt;</operator><name pos:start="443:60" pos:end="443:62">def</name><operator pos:start="443:63" pos:end="443:64">-&gt;</operator><name pos:start="443:65" pos:end="443:72">nwindows</name></name> <operator pos:start="443:74" pos:end="443:74">-</operator> <literal type="number" pos:start="443:76" pos:end="443:76">1</literal><operator pos:start="443:77" pos:end="443:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="445:25" pos:end="445:49"><expr pos:start="445:25" pos:end="445:48"><call pos:start="445:25" pos:end="445:48"><name pos:start="445:25" pos:end="445:37">gen_store_gpr</name><argument_list pos:start="445:38" pos:end="445:48">(<argument pos:start="445:39" pos:end="445:40"><expr pos:start="445:39" pos:end="445:40"><name pos:start="445:39" pos:end="445:40">dc</name></expr></argument>, <argument pos:start="445:43" pos:end="445:44"><expr pos:start="445:43" pos:end="445:44"><name pos:start="445:43" pos:end="445:44">rd</name></expr></argument>, <argument pos:start="445:47" pos:end="445:47"><expr pos:start="445:47" pos:end="445:47"><name pos:start="445:47" pos:end="445:47">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="447:25" pos:end="447:30">break;</break>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="451:1" pos:end="451:6">#<cpp:directive pos:start="451:2" pos:end="451:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="453:21" pos:end="453:49"><expr pos:start="453:21" pos:end="453:48"><call pos:start="453:21" pos:end="453:48"><name pos:start="453:21" pos:end="453:33">gen_store_gpr</name><argument_list pos:start="453:34" pos:end="453:48">(<argument pos:start="453:35" pos:end="453:36"><expr pos:start="453:35" pos:end="453:36"><name pos:start="453:35" pos:end="453:36">dc</name></expr></argument>, <argument pos:start="453:39" pos:end="453:40"><expr pos:start="453:39" pos:end="453:40"><name pos:start="453:39" pos:end="453:40">rd</name></expr></argument>, <argument pos:start="453:43" pos:end="453:47"><expr pos:start="453:43" pos:end="453:47"><name pos:start="453:43" pos:end="453:47">cpu_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="455:21" pos:end="458:0">break;</break>

<cpp:ifdef pos:start="457:1" pos:end="457:21">#<cpp:directive pos:start="457:2" pos:end="457:6">ifdef</cpp:directive> <name pos:start="457:8" pos:end="457:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="459:17" pos:end="459:25">case <expr pos:start="459:22" pos:end="459:24"><literal type="number" pos:start="459:22" pos:end="459:24">0x2</literal></expr>:</case> <comment type="block" pos:start="459:27" pos:end="459:40">/* V9 rdccr */</comment>

                    <expr_stmt pos:start="461:21" pos:end="461:35"><expr pos:start="461:21" pos:end="461:34"><call pos:start="461:21" pos:end="461:34"><name pos:start="461:21" pos:end="461:30">update_psr</name><argument_list pos:start="461:31" pos:end="461:34">(<argument pos:start="461:32" pos:end="461:33"><expr pos:start="461:32" pos:end="461:33"><name pos:start="461:32" pos:end="461:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="463:21" pos:end="463:55"><expr pos:start="463:21" pos:end="463:54"><call pos:start="463:21" pos:end="463:54"><name pos:start="463:21" pos:end="463:36">gen_helper_rdccr</name><argument_list pos:start="463:37" pos:end="463:54">(<argument pos:start="463:38" pos:end="463:44"><expr pos:start="463:38" pos:end="463:44"><name pos:start="463:38" pos:end="463:44">cpu_dst</name></expr></argument>, <argument pos:start="463:47" pos:end="463:53"><expr pos:start="463:47" pos:end="463:53"><name pos:start="463:47" pos:end="463:53">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="465:21" pos:end="465:51"><expr pos:start="465:21" pos:end="465:50"><call pos:start="465:21" pos:end="465:50"><name pos:start="465:21" pos:end="465:33">gen_store_gpr</name><argument_list pos:start="465:34" pos:end="465:50">(<argument pos:start="465:35" pos:end="465:36"><expr pos:start="465:35" pos:end="465:36"><name pos:start="465:35" pos:end="465:36">dc</name></expr></argument>, <argument pos:start="465:39" pos:end="465:40"><expr pos:start="465:39" pos:end="465:40"><name pos:start="465:39" pos:end="465:40">rd</name></expr></argument>, <argument pos:start="465:43" pos:end="465:49"><expr pos:start="465:43" pos:end="465:49"><name pos:start="465:43" pos:end="465:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="467:21" pos:end="467:26">break;</break>

                <case pos:start="469:17" pos:end="469:25">case <expr pos:start="469:22" pos:end="469:24"><literal type="number" pos:start="469:22" pos:end="469:24">0x3</literal></expr>:</case> <comment type="block" pos:start="469:27" pos:end="469:40">/* V9 rdasi */</comment>

                    <expr_stmt pos:start="471:21" pos:end="471:57"><expr pos:start="471:21" pos:end="471:56"><call pos:start="471:21" pos:end="471:56"><name pos:start="471:21" pos:end="471:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="471:39" pos:end="471:56">(<argument pos:start="471:40" pos:end="471:46"><expr pos:start="471:40" pos:end="471:46"><name pos:start="471:40" pos:end="471:46">cpu_dst</name></expr></argument>, <argument pos:start="471:49" pos:end="471:55"><expr pos:start="471:49" pos:end="471:55"><name pos:start="471:49" pos:end="471:55">cpu_asi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="473:21" pos:end="473:51"><expr pos:start="473:21" pos:end="473:50"><call pos:start="473:21" pos:end="473:50"><name pos:start="473:21" pos:end="473:33">gen_store_gpr</name><argument_list pos:start="473:34" pos:end="473:50">(<argument pos:start="473:35" pos:end="473:36"><expr pos:start="473:35" pos:end="473:36"><name pos:start="473:35" pos:end="473:36">dc</name></expr></argument>, <argument pos:start="473:39" pos:end="473:40"><expr pos:start="473:39" pos:end="473:40"><name pos:start="473:39" pos:end="473:40">rd</name></expr></argument>, <argument pos:start="473:43" pos:end="473:49"><expr pos:start="473:43" pos:end="473:49"><name pos:start="473:43" pos:end="473:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="475:21" pos:end="475:26">break;</break>

                <case pos:start="477:17" pos:end="477:25">case <expr pos:start="477:22" pos:end="477:24"><literal type="number" pos:start="477:22" pos:end="477:24">0x4</literal></expr>:</case> <comment type="block" pos:start="477:27" pos:end="477:41">/* V9 rdtick */</comment>

                    <block pos:start="479:21" pos:end="497:21">{<block_content pos:start="481:25" pos:end="495:55">

                        <decl_stmt pos:start="481:25" pos:end="481:43"><decl pos:start="481:25" pos:end="481:42"><type pos:start="481:25" pos:end="481:32"><name pos:start="481:25" pos:end="481:32">TCGv_ptr</name></type> <name pos:start="481:34" pos:end="481:42">r_tickptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="485:25" pos:end="485:55"><expr pos:start="485:25" pos:end="485:54"><name pos:start="485:25" pos:end="485:33">r_tickptr</name> <operator pos:start="485:35" pos:end="485:35">=</operator> <call pos:start="485:37" pos:end="485:54"><name pos:start="485:37" pos:end="485:52">tcg_temp_new_ptr</name><argument_list pos:start="485:53" pos:end="485:54">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="487:25" pos:end="489:70"><expr pos:start="487:25" pos:end="489:69"><call pos:start="487:25" pos:end="489:69"><name pos:start="487:25" pos:end="487:38">tcg_gen_ld_ptr</name><argument_list pos:start="487:39" pos:end="489:69">(<argument pos:start="487:40" pos:end="487:48"><expr pos:start="487:40" pos:end="487:48"><name pos:start="487:40" pos:end="487:48">r_tickptr</name></expr></argument>, <argument pos:start="487:51" pos:end="487:57"><expr pos:start="487:51" pos:end="487:57"><name pos:start="487:51" pos:end="487:57">cpu_env</name></expr></argument>,

                                       <argument pos:start="489:40" pos:end="489:68"><expr pos:start="489:40" pos:end="489:68"><call pos:start="489:40" pos:end="489:68"><name pos:start="489:40" pos:end="489:47">offsetof</name><argument_list pos:start="489:48" pos:end="489:68">(<argument pos:start="489:49" pos:end="489:61"><expr pos:start="489:49" pos:end="489:61"><name pos:start="489:49" pos:end="489:61">CPUSPARCState</name></expr></argument>, <argument pos:start="489:64" pos:end="489:67"><expr pos:start="489:64" pos:end="489:67"><name pos:start="489:64" pos:end="489:67">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="491:25" pos:end="491:70"><expr pos:start="491:25" pos:end="491:69"><call pos:start="491:25" pos:end="491:69"><name pos:start="491:25" pos:end="491:49">gen_helper_tick_get_count</name><argument_list pos:start="491:50" pos:end="491:69">(<argument pos:start="491:51" pos:end="491:57"><expr pos:start="491:51" pos:end="491:57"><name pos:start="491:51" pos:end="491:57">cpu_dst</name></expr></argument>, <argument pos:start="491:60" pos:end="491:68"><expr pos:start="491:60" pos:end="491:68"><name pos:start="491:60" pos:end="491:68">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="493:25" pos:end="493:53"><expr pos:start="493:25" pos:end="493:52"><call pos:start="493:25" pos:end="493:52"><name pos:start="493:25" pos:end="493:41">tcg_temp_free_ptr</name><argument_list pos:start="493:42" pos:end="493:52">(<argument pos:start="493:43" pos:end="493:51"><expr pos:start="493:43" pos:end="493:51"><name pos:start="493:43" pos:end="493:51">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="495:25" pos:end="495:55"><expr pos:start="495:25" pos:end="495:54"><call pos:start="495:25" pos:end="495:54"><name pos:start="495:25" pos:end="495:37">gen_store_gpr</name><argument_list pos:start="495:38" pos:end="495:54">(<argument pos:start="495:39" pos:end="495:40"><expr pos:start="495:39" pos:end="495:40"><name pos:start="495:39" pos:end="495:40">dc</name></expr></argument>, <argument pos:start="495:43" pos:end="495:44"><expr pos:start="495:43" pos:end="495:44"><name pos:start="495:43" pos:end="495:44">rd</name></expr></argument>, <argument pos:start="495:47" pos:end="495:53"><expr pos:start="495:47" pos:end="495:53"><name pos:start="495:47" pos:end="495:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="499:21" pos:end="499:26">break;</break>

                <case pos:start="501:17" pos:end="501:25">case <expr pos:start="501:22" pos:end="501:24"><literal type="number" pos:start="501:22" pos:end="501:24">0x5</literal></expr>:</case> <comment type="block" pos:start="501:27" pos:end="501:39">/* V9 rdpc */</comment>

                    <block pos:start="503:21" pos:end="519:21">{<block_content pos:start="505:25" pos:end="517:49">

                        <decl_stmt pos:start="505:25" pos:end="505:54"><decl pos:start="505:25" pos:end="505:53"><type pos:start="505:25" pos:end="505:28"><name pos:start="505:25" pos:end="505:28">TCGv</name></type> <name pos:start="505:30" pos:end="505:30">t</name> <init pos:start="505:32" pos:end="505:53">= <expr pos:start="505:34" pos:end="505:53"><call pos:start="505:34" pos:end="505:53"><name pos:start="505:34" pos:end="505:45">gen_dest_gpr</name><argument_list pos:start="505:46" pos:end="505:53">(<argument pos:start="505:47" pos:end="505:48"><expr pos:start="505:47" pos:end="505:48"><name pos:start="505:47" pos:end="505:48">dc</name></expr></argument>, <argument pos:start="505:51" pos:end="505:52"><expr pos:start="505:51" pos:end="505:52"><name pos:start="505:51" pos:end="505:52">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="507:25" pos:end="515:25"><if pos:start="507:25" pos:end="511:25">if <condition pos:start="507:28" pos:end="507:51">(<expr pos:start="507:29" pos:end="507:50"><call pos:start="507:29" pos:end="507:50"><name pos:start="507:29" pos:end="507:36">unlikely</name><argument_list pos:start="507:37" pos:end="507:50">(<argument pos:start="507:38" pos:end="507:49"><expr pos:start="507:38" pos:end="507:49"><call pos:start="507:38" pos:end="507:49"><name pos:start="507:38" pos:end="507:45">AM_CHECK</name><argument_list pos:start="507:46" pos:end="507:49">(<argument pos:start="507:47" pos:end="507:48"><expr pos:start="507:47" pos:end="507:48"><name pos:start="507:47" pos:end="507:48">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="507:53" pos:end="511:25">{<block_content pos:start="509:29" pos:end="509:71">

                            <expr_stmt pos:start="509:29" pos:end="509:71"><expr pos:start="509:29" pos:end="509:70"><call pos:start="509:29" pos:end="509:70"><name pos:start="509:29" pos:end="509:43">tcg_gen_movi_tl</name><argument_list pos:start="509:44" pos:end="509:70">(<argument pos:start="509:45" pos:end="509:45"><expr pos:start="509:45" pos:end="509:45"><name pos:start="509:45" pos:end="509:45">t</name></expr></argument>, <argument pos:start="509:48" pos:end="509:69"><expr pos:start="509:48" pos:end="509:69"><name pos:start="509:48" pos:end="509:53"><name pos:start="509:48" pos:end="509:49">dc</name><operator pos:start="509:50" pos:end="509:51">-&gt;</operator><name pos:start="509:52" pos:end="509:53">pc</name></name> <operator pos:start="509:55" pos:end="509:55">&amp;</operator> <literal type="number" pos:start="509:57" pos:end="509:69">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="511:27" pos:end="515:25">else <block pos:start="511:32" pos:end="515:25">{<block_content pos:start="513:29" pos:end="513:55">

                            <expr_stmt pos:start="513:29" pos:end="513:55"><expr pos:start="513:29" pos:end="513:54"><call pos:start="513:29" pos:end="513:54"><name pos:start="513:29" pos:end="513:43">tcg_gen_movi_tl</name><argument_list pos:start="513:44" pos:end="513:54">(<argument pos:start="513:45" pos:end="513:45"><expr pos:start="513:45" pos:end="513:45"><name pos:start="513:45" pos:end="513:45">t</name></expr></argument>, <argument pos:start="513:48" pos:end="513:53"><expr pos:start="513:48" pos:end="513:53"><name pos:start="513:48" pos:end="513:53"><name pos:start="513:48" pos:end="513:49">dc</name><operator pos:start="513:50" pos:end="513:51">-&gt;</operator><name pos:start="513:52" pos:end="513:53">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="517:25" pos:end="517:49"><expr pos:start="517:25" pos:end="517:48"><call pos:start="517:25" pos:end="517:48"><name pos:start="517:25" pos:end="517:37">gen_store_gpr</name><argument_list pos:start="517:38" pos:end="517:48">(<argument pos:start="517:39" pos:end="517:40"><expr pos:start="517:39" pos:end="517:40"><name pos:start="517:39" pos:end="517:40">dc</name></expr></argument>, <argument pos:start="517:43" pos:end="517:44"><expr pos:start="517:43" pos:end="517:44"><name pos:start="517:43" pos:end="517:44">rd</name></expr></argument>, <argument pos:start="517:47" pos:end="517:47"><expr pos:start="517:47" pos:end="517:47"><name pos:start="517:47" pos:end="517:47">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="521:21" pos:end="521:26">break;</break>

                <case pos:start="523:17" pos:end="523:25">case <expr pos:start="523:22" pos:end="523:24"><literal type="number" pos:start="523:22" pos:end="523:24">0x6</literal></expr>:</case> <comment type="block" pos:start="523:27" pos:end="523:41">/* V9 rdfprs */</comment>

                    <expr_stmt pos:start="525:21" pos:end="525:58"><expr pos:start="525:21" pos:end="525:57"><call pos:start="525:21" pos:end="525:57"><name pos:start="525:21" pos:end="525:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="525:39" pos:end="525:57">(<argument pos:start="525:40" pos:end="525:46"><expr pos:start="525:40" pos:end="525:46"><name pos:start="525:40" pos:end="525:46">cpu_dst</name></expr></argument>, <argument pos:start="525:49" pos:end="525:56"><expr pos:start="525:49" pos:end="525:56"><name pos:start="525:49" pos:end="525:56">cpu_fprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="527:21" pos:end="527:51"><expr pos:start="527:21" pos:end="527:50"><call pos:start="527:21" pos:end="527:50"><name pos:start="527:21" pos:end="527:33">gen_store_gpr</name><argument_list pos:start="527:34" pos:end="527:50">(<argument pos:start="527:35" pos:end="527:36"><expr pos:start="527:35" pos:end="527:36"><name pos:start="527:35" pos:end="527:36">dc</name></expr></argument>, <argument pos:start="527:39" pos:end="527:40"><expr pos:start="527:39" pos:end="527:40"><name pos:start="527:39" pos:end="527:40">rd</name></expr></argument>, <argument pos:start="527:43" pos:end="527:49"><expr pos:start="527:43" pos:end="527:49"><name pos:start="527:43" pos:end="527:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="529:21" pos:end="529:26">break;</break>

                <case pos:start="531:17" pos:end="531:25">case <expr pos:start="531:22" pos:end="531:24"><literal type="number" pos:start="531:22" pos:end="531:24">0xf</literal></expr>:</case> <comment type="block" pos:start="531:27" pos:end="531:41">/* V9 membar */</comment>

                    <break pos:start="533:21" pos:end="533:26">break;</break> <comment type="block" pos:start="533:28" pos:end="533:42">/* no effect */</comment>

                <case pos:start="535:17" pos:end="535:26">case <expr pos:start="535:22" pos:end="535:25"><literal type="number" pos:start="535:22" pos:end="535:25">0x13</literal></expr>:</case> <comment type="block" pos:start="535:28" pos:end="535:48">/* Graphics Status */</comment>

                    <if_stmt pos:start="537:21" pos:end="541:21"><if pos:start="537:21" pos:end="541:21">if <condition pos:start="537:24" pos:end="537:45">(<expr pos:start="537:25" pos:end="537:44"><call pos:start="537:25" pos:end="537:44"><name pos:start="537:25" pos:end="537:40">gen_trap_ifnofpu</name><argument_list pos:start="537:41" pos:end="537:44">(<argument pos:start="537:42" pos:end="537:43"><expr pos:start="537:42" pos:end="537:43"><name pos:start="537:42" pos:end="537:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="537:47" pos:end="541:21">{<block_content pos:start="539:25" pos:end="539:38">

                        <goto pos:start="539:25" pos:end="539:38">goto <name pos:start="539:30" pos:end="539:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="543:21" pos:end="543:51"><expr pos:start="543:21" pos:end="543:50"><call pos:start="543:21" pos:end="543:50"><name pos:start="543:21" pos:end="543:33">gen_store_gpr</name><argument_list pos:start="543:34" pos:end="543:50">(<argument pos:start="543:35" pos:end="543:36"><expr pos:start="543:35" pos:end="543:36"><name pos:start="543:35" pos:end="543:36">dc</name></expr></argument>, <argument pos:start="543:39" pos:end="543:40"><expr pos:start="543:39" pos:end="543:40"><name pos:start="543:39" pos:end="543:40">rd</name></expr></argument>, <argument pos:start="543:43" pos:end="543:49"><expr pos:start="543:43" pos:end="543:49"><name pos:start="543:43" pos:end="543:49">cpu_gsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="545:21" pos:end="545:26">break;</break>

                <case pos:start="547:17" pos:end="547:26">case <expr pos:start="547:22" pos:end="547:25"><literal type="number" pos:start="547:22" pos:end="547:25">0x16</literal></expr>:</case> <comment type="block" pos:start="547:28" pos:end="547:40">/* Softint */</comment>

                    <expr_stmt pos:start="549:21" pos:end="549:61"><expr pos:start="549:21" pos:end="549:60"><call pos:start="549:21" pos:end="549:60"><name pos:start="549:21" pos:end="549:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="549:39" pos:end="549:60">(<argument pos:start="549:40" pos:end="549:46"><expr pos:start="549:40" pos:end="549:46"><name pos:start="549:40" pos:end="549:46">cpu_dst</name></expr></argument>, <argument pos:start="549:49" pos:end="549:59"><expr pos:start="549:49" pos:end="549:59"><name pos:start="549:49" pos:end="549:59">cpu_softint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="551:21" pos:end="551:51"><expr pos:start="551:21" pos:end="551:50"><call pos:start="551:21" pos:end="551:50"><name pos:start="551:21" pos:end="551:33">gen_store_gpr</name><argument_list pos:start="551:34" pos:end="551:50">(<argument pos:start="551:35" pos:end="551:36"><expr pos:start="551:35" pos:end="551:36"><name pos:start="551:35" pos:end="551:36">dc</name></expr></argument>, <argument pos:start="551:39" pos:end="551:40"><expr pos:start="551:39" pos:end="551:40"><name pos:start="551:39" pos:end="551:40">rd</name></expr></argument>, <argument pos:start="551:43" pos:end="551:49"><expr pos:start="551:43" pos:end="551:49"><name pos:start="551:43" pos:end="551:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="553:21" pos:end="553:26">break;</break>

                <case pos:start="555:17" pos:end="555:26">case <expr pos:start="555:22" pos:end="555:25"><literal type="number" pos:start="555:22" pos:end="555:25">0x17</literal></expr>:</case> <comment type="block" pos:start="555:28" pos:end="555:45">/* Tick compare */</comment>

                    <expr_stmt pos:start="557:21" pos:end="557:57"><expr pos:start="557:21" pos:end="557:56"><call pos:start="557:21" pos:end="557:56"><name pos:start="557:21" pos:end="557:33">gen_store_gpr</name><argument_list pos:start="557:34" pos:end="557:56">(<argument pos:start="557:35" pos:end="557:36"><expr pos:start="557:35" pos:end="557:36"><name pos:start="557:35" pos:end="557:36">dc</name></expr></argument>, <argument pos:start="557:39" pos:end="557:40"><expr pos:start="557:39" pos:end="557:40"><name pos:start="557:39" pos:end="557:40">rd</name></expr></argument>, <argument pos:start="557:43" pos:end="557:55"><expr pos:start="557:43" pos:end="557:55"><name pos:start="557:43" pos:end="557:55">cpu_tick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="559:21" pos:end="559:26">break;</break>

                <case pos:start="561:17" pos:end="561:26">case <expr pos:start="561:22" pos:end="561:25"><literal type="number" pos:start="561:22" pos:end="561:25">0x18</literal></expr>:</case> <comment type="block" pos:start="561:28" pos:end="561:44">/* System tick */</comment>

                    <block pos:start="563:21" pos:end="581:21">{<block_content pos:start="565:25" pos:end="579:55">

                        <decl_stmt pos:start="565:25" pos:end="565:43"><decl pos:start="565:25" pos:end="565:42"><type pos:start="565:25" pos:end="565:32"><name pos:start="565:25" pos:end="565:32">TCGv_ptr</name></type> <name pos:start="565:34" pos:end="565:42">r_tickptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="569:25" pos:end="569:55"><expr pos:start="569:25" pos:end="569:54"><name pos:start="569:25" pos:end="569:33">r_tickptr</name> <operator pos:start="569:35" pos:end="569:35">=</operator> <call pos:start="569:37" pos:end="569:54"><name pos:start="569:37" pos:end="569:52">tcg_temp_new_ptr</name><argument_list pos:start="569:53" pos:end="569:54">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="571:25" pos:end="573:71"><expr pos:start="571:25" pos:end="573:70"><call pos:start="571:25" pos:end="573:70"><name pos:start="571:25" pos:end="571:38">tcg_gen_ld_ptr</name><argument_list pos:start="571:39" pos:end="573:70">(<argument pos:start="571:40" pos:end="571:48"><expr pos:start="571:40" pos:end="571:48"><name pos:start="571:40" pos:end="571:48">r_tickptr</name></expr></argument>, <argument pos:start="571:51" pos:end="571:57"><expr pos:start="571:51" pos:end="571:57"><name pos:start="571:51" pos:end="571:57">cpu_env</name></expr></argument>,

                                       <argument pos:start="573:40" pos:end="573:69"><expr pos:start="573:40" pos:end="573:69"><call pos:start="573:40" pos:end="573:69"><name pos:start="573:40" pos:end="573:47">offsetof</name><argument_list pos:start="573:48" pos:end="573:69">(<argument pos:start="573:49" pos:end="573:61"><expr pos:start="573:49" pos:end="573:61"><name pos:start="573:49" pos:end="573:61">CPUSPARCState</name></expr></argument>, <argument pos:start="573:64" pos:end="573:68"><expr pos:start="573:64" pos:end="573:68"><name pos:start="573:64" pos:end="573:68">stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="575:25" pos:end="575:70"><expr pos:start="575:25" pos:end="575:69"><call pos:start="575:25" pos:end="575:69"><name pos:start="575:25" pos:end="575:49">gen_helper_tick_get_count</name><argument_list pos:start="575:50" pos:end="575:69">(<argument pos:start="575:51" pos:end="575:57"><expr pos:start="575:51" pos:end="575:57"><name pos:start="575:51" pos:end="575:57">cpu_dst</name></expr></argument>, <argument pos:start="575:60" pos:end="575:68"><expr pos:start="575:60" pos:end="575:68"><name pos:start="575:60" pos:end="575:68">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="577:25" pos:end="577:53"><expr pos:start="577:25" pos:end="577:52"><call pos:start="577:25" pos:end="577:52"><name pos:start="577:25" pos:end="577:41">tcg_temp_free_ptr</name><argument_list pos:start="577:42" pos:end="577:52">(<argument pos:start="577:43" pos:end="577:51"><expr pos:start="577:43" pos:end="577:51"><name pos:start="577:43" pos:end="577:51">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="579:25" pos:end="579:55"><expr pos:start="579:25" pos:end="579:54"><call pos:start="579:25" pos:end="579:54"><name pos:start="579:25" pos:end="579:37">gen_store_gpr</name><argument_list pos:start="579:38" pos:end="579:54">(<argument pos:start="579:39" pos:end="579:40"><expr pos:start="579:39" pos:end="579:40"><name pos:start="579:39" pos:end="579:40">dc</name></expr></argument>, <argument pos:start="579:43" pos:end="579:44"><expr pos:start="579:43" pos:end="579:44"><name pos:start="579:43" pos:end="579:44">rd</name></expr></argument>, <argument pos:start="579:47" pos:end="579:53"><expr pos:start="579:47" pos:end="579:53"><name pos:start="579:47" pos:end="579:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="583:21" pos:end="583:26">break;</break>

                <case pos:start="585:17" pos:end="585:26">case <expr pos:start="585:22" pos:end="585:25"><literal type="number" pos:start="585:22" pos:end="585:25">0x19</literal></expr>:</case> <comment type="block" pos:start="585:28" pos:end="585:52">/* System tick compare */</comment>

                    <expr_stmt pos:start="587:21" pos:end="587:58"><expr pos:start="587:21" pos:end="587:57"><call pos:start="587:21" pos:end="587:57"><name pos:start="587:21" pos:end="587:33">gen_store_gpr</name><argument_list pos:start="587:34" pos:end="587:57">(<argument pos:start="587:35" pos:end="587:36"><expr pos:start="587:35" pos:end="587:36"><name pos:start="587:35" pos:end="587:36">dc</name></expr></argument>, <argument pos:start="587:39" pos:end="587:40"><expr pos:start="587:39" pos:end="587:40"><name pos:start="587:39" pos:end="587:40">rd</name></expr></argument>, <argument pos:start="587:43" pos:end="587:56"><expr pos:start="587:43" pos:end="587:56"><name pos:start="587:43" pos:end="587:56">cpu_stick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="589:21" pos:end="589:26">break;</break>

                <case pos:start="591:17" pos:end="591:26">case <expr pos:start="591:22" pos:end="591:25"><literal type="number" pos:start="591:22" pos:end="591:25">0x10</literal></expr>:</case> <comment type="block" pos:start="591:28" pos:end="591:52">/* Performance Control */</comment>

                <case pos:start="593:17" pos:end="593:26">case <expr pos:start="593:22" pos:end="593:25"><literal type="number" pos:start="593:22" pos:end="593:25">0x11</literal></expr>:</case> <comment type="block" pos:start="593:28" pos:end="593:68">/* Performance Instrumentation Counter */</comment>

                <case pos:start="595:17" pos:end="595:26">case <expr pos:start="595:22" pos:end="595:25"><literal type="number" pos:start="595:22" pos:end="595:25">0x12</literal></expr>:</case> <comment type="block" pos:start="595:28" pos:end="595:49">/* Dispatch Control */</comment>

                <case pos:start="597:17" pos:end="597:26">case <expr pos:start="597:22" pos:end="597:25"><literal type="number" pos:start="597:22" pos:end="597:25">0x14</literal></expr>:</case> <comment type="block" pos:start="597:28" pos:end="597:48">/* Softint set, WO */</comment>

                <case pos:start="599:17" pos:end="602:0">case <expr pos:start="599:22" pos:end="599:25"><literal type="number" pos:start="599:22" pos:end="599:25">0x15</literal></expr>:</case> <comment type="block" pos:start="599:28" pos:end="599:50">/* Softint clear, WO */</comment>

<cpp:endif pos:start="601:1" pos:end="601:6">#<cpp:directive pos:start="601:2" pos:end="601:6">endif</cpp:directive></cpp:endif>

                <default pos:start="603:17" pos:end="603:24">default:</default>

                    <goto pos:start="605:21" pos:end="605:38">goto <name pos:start="605:26" pos:end="605:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:if pos:start="609:1" pos:end="609:30">#<cpp:directive pos:start="609:2" pos:end="609:3">if</cpp:directive> <expr pos:start="609:5" pos:end="609:30"><operator pos:start="609:5" pos:end="609:5">!</operator><call pos:start="609:6" pos:end="609:30"><name pos:start="609:6" pos:end="609:12">defined</name><argument_list pos:start="609:13" pos:end="609:30">(<argument pos:start="609:14" pos:end="609:29"><expr pos:start="609:14" pos:end="609:29"><name pos:start="609:14" pos:end="609:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

            </block_content>}</block></if> <if type="elseif" pos:start="611:15" pos:end="685:13">else if <condition pos:start="611:23" pos:end="611:35">(<expr pos:start="611:24" pos:end="611:34"><name pos:start="611:24" pos:end="611:26">xop</name> <operator pos:start="611:28" pos:end="611:29">==</operator> <literal type="number" pos:start="611:31" pos:end="611:34">0x29</literal></expr>)</condition> <block pos:start="611:37" pos:end="685:13">{<block_content pos:start="615:17" pos:end="683:22"> <comment type="block" pos:start="611:39" pos:end="611:64">/* rdpsr / UA2005 rdhpr */</comment>

<cpp:ifndef pos:start="613:1" pos:end="613:22">#<cpp:directive pos:start="613:2" pos:end="613:7">ifndef</cpp:directive> <name pos:start="613:9" pos:end="613:22">TARGET_SPARC64</name></cpp:ifndef>

                <if_stmt pos:start="615:17" pos:end="619:17"><if pos:start="615:17" pos:end="619:17">if <condition pos:start="615:20" pos:end="615:36">(<expr pos:start="615:21" pos:end="615:35"><operator pos:start="615:21" pos:end="615:21">!</operator><call pos:start="615:22" pos:end="615:35"><name pos:start="615:22" pos:end="615:31">supervisor</name><argument_list pos:start="615:32" pos:end="615:35">(<argument pos:start="615:33" pos:end="615:34"><expr pos:start="615:33" pos:end="615:34"><name pos:start="615:33" pos:end="615:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="615:38" pos:end="619:17">{<block_content pos:start="617:21" pos:end="617:35">

                    <goto pos:start="617:21" pos:end="617:35">goto <name pos:start="617:26" pos:end="617:34">priv_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="621:17" pos:end="621:31"><expr pos:start="621:17" pos:end="621:30"><call pos:start="621:17" pos:end="621:30"><name pos:start="621:17" pos:end="621:26">update_psr</name><argument_list pos:start="621:27" pos:end="621:30">(<argument pos:start="621:28" pos:end="621:29"><expr pos:start="621:28" pos:end="621:29"><name pos:start="621:28" pos:end="621:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="623:17" pos:end="626:0"><expr pos:start="623:17" pos:end="623:50"><call pos:start="623:17" pos:end="623:50"><name pos:start="623:17" pos:end="623:32">gen_helper_rdpsr</name><argument_list pos:start="623:33" pos:end="623:50">(<argument pos:start="623:34" pos:end="623:40"><expr pos:start="623:34" pos:end="623:40"><name pos:start="623:34" pos:end="623:40">cpu_dst</name></expr></argument>, <argument pos:start="623:43" pos:end="623:49"><expr pos:start="623:43" pos:end="623:49"><name pos:start="623:43" pos:end="623:49">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="625:1" pos:end="625:5">#<cpp:directive pos:start="625:2" pos:end="625:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="627:17" pos:end="627:43"><expr pos:start="627:17" pos:end="627:42"><call pos:start="627:17" pos:end="627:42"><name pos:start="627:17" pos:end="627:32">CHECK_IU_FEATURE</name><argument_list pos:start="627:33" pos:end="627:42">(<argument pos:start="627:34" pos:end="627:35"><expr pos:start="627:34" pos:end="627:35"><name pos:start="627:34" pos:end="627:35">dc</name></expr></argument>, <argument pos:start="627:38" pos:end="627:41"><expr pos:start="627:38" pos:end="627:41"><name pos:start="627:38" pos:end="627:41">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="629:17" pos:end="631:35"><if pos:start="629:17" pos:end="631:35">if <condition pos:start="629:20" pos:end="629:36">(<expr pos:start="629:21" pos:end="629:35"><operator pos:start="629:21" pos:end="629:21">!</operator><call pos:start="629:22" pos:end="629:35"><name pos:start="629:22" pos:end="629:31">hypervisor</name><argument_list pos:start="629:32" pos:end="629:35">(<argument pos:start="629:33" pos:end="629:34"><expr pos:start="629:33" pos:end="629:34"><name pos:start="629:33" pos:end="629:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="631:21" pos:end="631:35"><block_content pos:start="631:21" pos:end="631:35">

                    <goto pos:start="631:21" pos:end="631:35">goto <name pos:start="631:26" pos:end="631:34">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="633:17" pos:end="633:46"><expr pos:start="633:17" pos:end="633:45"><name pos:start="633:17" pos:end="633:19">rs1</name> <operator pos:start="633:21" pos:end="633:21">=</operator> <call pos:start="633:23" pos:end="633:45"><name pos:start="633:23" pos:end="633:31">GET_FIELD</name><argument_list pos:start="633:32" pos:end="633:45">(<argument pos:start="633:33" pos:end="633:36"><expr pos:start="633:33" pos:end="633:36"><name pos:start="633:33" pos:end="633:36">insn</name></expr></argument>, <argument pos:start="633:39" pos:end="633:40"><expr pos:start="633:39" pos:end="633:40"><literal type="number" pos:start="633:39" pos:end="633:40">13</literal></expr></argument>, <argument pos:start="633:43" pos:end="633:44"><expr pos:start="633:43" pos:end="633:44"><literal type="number" pos:start="633:43" pos:end="633:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="635:17" pos:end="680:0">switch <condition pos:start="635:24" pos:end="635:28">(<expr pos:start="635:25" pos:end="635:27"><name pos:start="635:25" pos:end="635:27">rs1</name></expr>)</condition> <block pos:start="635:30" pos:end="680:0">{<block_content pos:start="637:17" pos:end="675:38">

                <case pos:start="637:17" pos:end="637:23">case <expr pos:start="637:22" pos:end="637:22"><literal type="number" pos:start="637:22" pos:end="637:22">0</literal></expr>:</case> <comment type="line" pos:start="637:25" pos:end="637:34">// hpstate</comment>

                    <comment type="line" pos:start="639:21" pos:end="639:42">// gen_op_rdhpstate();</comment>

                    <break pos:start="641:21" pos:end="641:26">break;</break>

                <case pos:start="643:17" pos:end="643:23">case <expr pos:start="643:22" pos:end="643:22"><literal type="number" pos:start="643:22" pos:end="643:22">1</literal></expr>:</case> <comment type="line" pos:start="643:25" pos:end="643:34">// htstate</comment>

                    <comment type="line" pos:start="645:21" pos:end="645:42">// gen_op_rdhtstate();</comment>

                    <break pos:start="647:21" pos:end="647:26">break;</break>

                <case pos:start="649:17" pos:end="649:23">case <expr pos:start="649:22" pos:end="649:22"><literal type="number" pos:start="649:22" pos:end="649:22">3</literal></expr>:</case> <comment type="line" pos:start="649:25" pos:end="649:32">// hintp</comment>

                    <expr_stmt pos:start="651:21" pos:end="651:55"><expr pos:start="651:21" pos:end="651:54"><call pos:start="651:21" pos:end="651:54"><name pos:start="651:21" pos:end="651:34">tcg_gen_mov_tl</name><argument_list pos:start="651:35" pos:end="651:54">(<argument pos:start="651:36" pos:end="651:42"><expr pos:start="651:36" pos:end="651:42"><name pos:start="651:36" pos:end="651:42">cpu_dst</name></expr></argument>, <argument pos:start="651:45" pos:end="651:53"><expr pos:start="651:45" pos:end="651:53"><name pos:start="651:45" pos:end="651:53">cpu_hintp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="653:21" pos:end="653:26">break;</break>

                <case pos:start="655:17" pos:end="655:23">case <expr pos:start="655:22" pos:end="655:22"><literal type="number" pos:start="655:22" pos:end="655:22">5</literal></expr>:</case> <comment type="line" pos:start="655:25" pos:end="655:31">// htba</comment>

                    <expr_stmt pos:start="657:21" pos:end="657:54"><expr pos:start="657:21" pos:end="657:53"><call pos:start="657:21" pos:end="657:53"><name pos:start="657:21" pos:end="657:34">tcg_gen_mov_tl</name><argument_list pos:start="657:35" pos:end="657:53">(<argument pos:start="657:36" pos:end="657:42"><expr pos:start="657:36" pos:end="657:42"><name pos:start="657:36" pos:end="657:42">cpu_dst</name></expr></argument>, <argument pos:start="657:45" pos:end="657:52"><expr pos:start="657:45" pos:end="657:52"><name pos:start="657:45" pos:end="657:52">cpu_htba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="659:21" pos:end="659:26">break;</break>

                <case pos:start="661:17" pos:end="661:23">case <expr pos:start="661:22" pos:end="661:22"><literal type="number" pos:start="661:22" pos:end="661:22">6</literal></expr>:</case> <comment type="line" pos:start="661:25" pos:end="661:31">// hver</comment>

                    <expr_stmt pos:start="663:21" pos:end="663:54"><expr pos:start="663:21" pos:end="663:53"><call pos:start="663:21" pos:end="663:53"><name pos:start="663:21" pos:end="663:34">tcg_gen_mov_tl</name><argument_list pos:start="663:35" pos:end="663:53">(<argument pos:start="663:36" pos:end="663:42"><expr pos:start="663:36" pos:end="663:42"><name pos:start="663:36" pos:end="663:42">cpu_dst</name></expr></argument>, <argument pos:start="663:45" pos:end="663:52"><expr pos:start="663:45" pos:end="663:52"><name pos:start="663:45" pos:end="663:52">cpu_hver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="665:21" pos:end="665:26">break;</break>

                <case pos:start="667:17" pos:end="667:24">case <expr pos:start="667:22" pos:end="667:23"><literal type="number" pos:start="667:22" pos:end="667:23">31</literal></expr>:</case> <comment type="line" pos:start="667:26" pos:end="667:39">// hstick_cmpr</comment>

                    <expr_stmt pos:start="669:21" pos:end="669:61"><expr pos:start="669:21" pos:end="669:60"><call pos:start="669:21" pos:end="669:60"><name pos:start="669:21" pos:end="669:34">tcg_gen_mov_tl</name><argument_list pos:start="669:35" pos:end="669:60">(<argument pos:start="669:36" pos:end="669:42"><expr pos:start="669:36" pos:end="669:42"><name pos:start="669:36" pos:end="669:42">cpu_dst</name></expr></argument>, <argument pos:start="669:45" pos:end="669:59"><expr pos:start="669:45" pos:end="669:59"><name pos:start="669:45" pos:end="669:59">cpu_hstick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="671:21" pos:end="671:26">break;</break>

                <default pos:start="673:17" pos:end="673:24">default:</default>

                    <goto pos:start="675:21" pos:end="675:38">goto <name pos:start="675:26" pos:end="675:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:endif pos:start="679:1" pos:end="679:6">#<cpp:directive pos:start="679:2" pos:end="679:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="681:17" pos:end="681:47"><expr pos:start="681:17" pos:end="681:46"><call pos:start="681:17" pos:end="681:46"><name pos:start="681:17" pos:end="681:29">gen_store_gpr</name><argument_list pos:start="681:30" pos:end="681:46">(<argument pos:start="681:31" pos:end="681:32"><expr pos:start="681:31" pos:end="681:32"><name pos:start="681:31" pos:end="681:32">dc</name></expr></argument>, <argument pos:start="681:35" pos:end="681:36"><expr pos:start="681:35" pos:end="681:36"><name pos:start="681:35" pos:end="681:36">rd</name></expr></argument>, <argument pos:start="681:39" pos:end="681:45"><expr pos:start="681:39" pos:end="681:45"><name pos:start="681:39" pos:end="681:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="683:17" pos:end="683:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="685:15" pos:end="949:13">else if <condition pos:start="685:23" pos:end="685:35">(<expr pos:start="685:24" pos:end="685:34"><name pos:start="685:24" pos:end="685:26">xop</name> <operator pos:start="685:28" pos:end="685:29">==</operator> <literal type="number" pos:start="685:31" pos:end="685:34">0x2a</literal></expr>)</condition> <block pos:start="685:37" pos:end="949:13">{<block_content pos:start="687:17" pos:end="947:22"> <comment type="block" pos:start="685:39" pos:end="685:59">/* rdwim / V9 rdpr */</comment>

                <if_stmt pos:start="687:17" pos:end="692:0"><if pos:start="687:17" pos:end="692:0">if <condition pos:start="687:20" pos:end="687:36">(<expr pos:start="687:21" pos:end="687:35"><operator pos:start="687:21" pos:end="687:21">!</operator><call pos:start="687:22" pos:end="687:35"><name pos:start="687:22" pos:end="687:31">supervisor</name><argument_list pos:start="687:32" pos:end="687:35">(<argument pos:start="687:33" pos:end="687:34"><expr pos:start="687:33" pos:end="687:34"><name pos:start="687:33" pos:end="687:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="689:21" pos:end="692:0"><block_content pos:start="689:21" pos:end="692:0">

                    <goto pos:start="689:21" pos:end="692:0">goto <name pos:start="689:26" pos:end="689:34">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="691:1" pos:end="691:21">#<cpp:directive pos:start="691:2" pos:end="691:6">ifdef</cpp:directive> <name pos:start="691:8" pos:end="691:21">TARGET_SPARC64</name></cpp:ifdef>

                <expr_stmt pos:start="693:17" pos:end="693:46"><expr pos:start="693:17" pos:end="693:45"><name pos:start="693:17" pos:end="693:19">rs1</name> <operator pos:start="693:21" pos:end="693:21">=</operator> <call pos:start="693:23" pos:end="693:45"><name pos:start="693:23" pos:end="693:31">GET_FIELD</name><argument_list pos:start="693:32" pos:end="693:45">(<argument pos:start="693:33" pos:end="693:36"><expr pos:start="693:33" pos:end="693:36"><name pos:start="693:33" pos:end="693:36">insn</name></expr></argument>, <argument pos:start="693:39" pos:end="693:40"><expr pos:start="693:39" pos:end="693:40"><literal type="number" pos:start="693:39" pos:end="693:40">13</literal></expr></argument>, <argument pos:start="693:43" pos:end="693:44"><expr pos:start="693:43" pos:end="693:44"><literal type="number" pos:start="693:43" pos:end="693:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="695:17" pos:end="940:0">switch <condition pos:start="695:24" pos:end="695:28">(<expr pos:start="695:25" pos:end="695:27"><name pos:start="695:25" pos:end="695:27">rs1</name></expr>)</condition> <block pos:start="695:30" pos:end="940:0">{<block_content pos:start="697:17" pos:end="935:38">

                <case pos:start="697:17" pos:end="697:23">case <expr pos:start="697:22" pos:end="697:22"><literal type="number" pos:start="697:22" pos:end="697:22">0</literal></expr>:</case> <comment type="line" pos:start="697:25" pos:end="697:30">// tpc</comment>

                    <block pos:start="699:21" pos:end="715:21">{<block_content pos:start="701:25" pos:end="713:51">

                        <decl_stmt pos:start="701:25" pos:end="701:41"><decl pos:start="701:25" pos:end="701:40"><type pos:start="701:25" pos:end="701:32"><name pos:start="701:25" pos:end="701:32">TCGv_ptr</name></type> <name pos:start="701:34" pos:end="701:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="705:25" pos:end="705:53"><expr pos:start="705:25" pos:end="705:52"><name pos:start="705:25" pos:end="705:31">r_tsptr</name> <operator pos:start="705:33" pos:end="705:33">=</operator> <call pos:start="705:35" pos:end="705:52"><name pos:start="705:35" pos:end="705:50">tcg_temp_new_ptr</name><argument_list pos:start="705:51" pos:end="705:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="707:25" pos:end="707:68"><expr pos:start="707:25" pos:end="707:67"><call pos:start="707:25" pos:end="707:67"><name pos:start="707:25" pos:end="707:49">gen_load_trap_state_at_tl</name><argument_list pos:start="707:50" pos:end="707:67">(<argument pos:start="707:51" pos:end="707:57"><expr pos:start="707:51" pos:end="707:57"><name pos:start="707:51" pos:end="707:57">r_tsptr</name></expr></argument>, <argument pos:start="707:60" pos:end="707:66"><expr pos:start="707:60" pos:end="707:66"><name pos:start="707:60" pos:end="707:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="709:25" pos:end="711:65"><expr pos:start="709:25" pos:end="711:64"><call pos:start="709:25" pos:end="711:64"><name pos:start="709:25" pos:end="709:37">tcg_gen_ld_tl</name><argument_list pos:start="709:38" pos:end="711:64">(<argument pos:start="709:39" pos:end="709:46"><expr pos:start="709:39" pos:end="709:46"><name pos:start="709:39" pos:end="709:46">cpu_tmp0</name></expr></argument>, <argument pos:start="709:49" pos:end="709:55"><expr pos:start="709:49" pos:end="709:55"><name pos:start="709:49" pos:end="709:55">r_tsptr</name></expr></argument>,

                                      <argument pos:start="711:39" pos:end="711:63"><expr pos:start="711:39" pos:end="711:63"><call pos:start="711:39" pos:end="711:63"><name pos:start="711:39" pos:end="711:46">offsetof</name><argument_list pos:start="711:47" pos:end="711:63">(<argument pos:start="711:48" pos:end="711:57"><expr pos:start="711:48" pos:end="711:57"><name pos:start="711:48" pos:end="711:57">trap_state</name></expr></argument>, <argument pos:start="711:60" pos:end="711:62"><expr pos:start="711:60" pos:end="711:62"><name pos:start="711:60" pos:end="711:62">tpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="713:25" pos:end="713:51"><expr pos:start="713:25" pos:end="713:50"><call pos:start="713:25" pos:end="713:50"><name pos:start="713:25" pos:end="713:41">tcg_temp_free_ptr</name><argument_list pos:start="713:42" pos:end="713:50">(<argument pos:start="713:43" pos:end="713:49"><expr pos:start="713:43" pos:end="713:49"><name pos:start="713:43" pos:end="713:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="717:21" pos:end="717:26">break;</break>

                <case pos:start="719:17" pos:end="719:23">case <expr pos:start="719:22" pos:end="719:22"><literal type="number" pos:start="719:22" pos:end="719:22">1</literal></expr>:</case> <comment type="line" pos:start="719:25" pos:end="719:31">// tnpc</comment>

                    <block pos:start="721:21" pos:end="737:21">{<block_content pos:start="723:25" pos:end="735:51">

                        <decl_stmt pos:start="723:25" pos:end="723:41"><decl pos:start="723:25" pos:end="723:40"><type pos:start="723:25" pos:end="723:32"><name pos:start="723:25" pos:end="723:32">TCGv_ptr</name></type> <name pos:start="723:34" pos:end="723:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="727:25" pos:end="727:53"><expr pos:start="727:25" pos:end="727:52"><name pos:start="727:25" pos:end="727:31">r_tsptr</name> <operator pos:start="727:33" pos:end="727:33">=</operator> <call pos:start="727:35" pos:end="727:52"><name pos:start="727:35" pos:end="727:50">tcg_temp_new_ptr</name><argument_list pos:start="727:51" pos:end="727:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="729:25" pos:end="729:68"><expr pos:start="729:25" pos:end="729:67"><call pos:start="729:25" pos:end="729:67"><name pos:start="729:25" pos:end="729:49">gen_load_trap_state_at_tl</name><argument_list pos:start="729:50" pos:end="729:67">(<argument pos:start="729:51" pos:end="729:57"><expr pos:start="729:51" pos:end="729:57"><name pos:start="729:51" pos:end="729:57">r_tsptr</name></expr></argument>, <argument pos:start="729:60" pos:end="729:66"><expr pos:start="729:60" pos:end="729:66"><name pos:start="729:60" pos:end="729:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="731:25" pos:end="733:66"><expr pos:start="731:25" pos:end="733:65"><call pos:start="731:25" pos:end="733:65"><name pos:start="731:25" pos:end="731:37">tcg_gen_ld_tl</name><argument_list pos:start="731:38" pos:end="733:65">(<argument pos:start="731:39" pos:end="731:46"><expr pos:start="731:39" pos:end="731:46"><name pos:start="731:39" pos:end="731:46">cpu_tmp0</name></expr></argument>, <argument pos:start="731:49" pos:end="731:55"><expr pos:start="731:49" pos:end="731:55"><name pos:start="731:49" pos:end="731:55">r_tsptr</name></expr></argument>,

                                      <argument pos:start="733:39" pos:end="733:64"><expr pos:start="733:39" pos:end="733:64"><call pos:start="733:39" pos:end="733:64"><name pos:start="733:39" pos:end="733:46">offsetof</name><argument_list pos:start="733:47" pos:end="733:64">(<argument pos:start="733:48" pos:end="733:57"><expr pos:start="733:48" pos:end="733:57"><name pos:start="733:48" pos:end="733:57">trap_state</name></expr></argument>, <argument pos:start="733:60" pos:end="733:63"><expr pos:start="733:60" pos:end="733:63"><name pos:start="733:60" pos:end="733:63">tnpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="735:25" pos:end="735:51"><expr pos:start="735:25" pos:end="735:50"><call pos:start="735:25" pos:end="735:50"><name pos:start="735:25" pos:end="735:41">tcg_temp_free_ptr</name><argument_list pos:start="735:42" pos:end="735:50">(<argument pos:start="735:43" pos:end="735:49"><expr pos:start="735:43" pos:end="735:49"><name pos:start="735:43" pos:end="735:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="739:21" pos:end="739:26">break;</break>

                <case pos:start="741:17" pos:end="741:23">case <expr pos:start="741:22" pos:end="741:22"><literal type="number" pos:start="741:22" pos:end="741:22">2</literal></expr>:</case> <comment type="line" pos:start="741:25" pos:end="741:33">// tstate</comment>

                    <block pos:start="743:21" pos:end="759:21">{<block_content pos:start="745:25" pos:end="757:51">

                        <decl_stmt pos:start="745:25" pos:end="745:41"><decl pos:start="745:25" pos:end="745:40"><type pos:start="745:25" pos:end="745:32"><name pos:start="745:25" pos:end="745:32">TCGv_ptr</name></type> <name pos:start="745:34" pos:end="745:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="749:25" pos:end="749:53"><expr pos:start="749:25" pos:end="749:52"><name pos:start="749:25" pos:end="749:31">r_tsptr</name> <operator pos:start="749:33" pos:end="749:33">=</operator> <call pos:start="749:35" pos:end="749:52"><name pos:start="749:35" pos:end="749:50">tcg_temp_new_ptr</name><argument_list pos:start="749:51" pos:end="749:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="751:25" pos:end="751:68"><expr pos:start="751:25" pos:end="751:67"><call pos:start="751:25" pos:end="751:67"><name pos:start="751:25" pos:end="751:49">gen_load_trap_state_at_tl</name><argument_list pos:start="751:50" pos:end="751:67">(<argument pos:start="751:51" pos:end="751:57"><expr pos:start="751:51" pos:end="751:57"><name pos:start="751:51" pos:end="751:57">r_tsptr</name></expr></argument>, <argument pos:start="751:60" pos:end="751:66"><expr pos:start="751:60" pos:end="751:66"><name pos:start="751:60" pos:end="751:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="753:25" pos:end="755:68"><expr pos:start="753:25" pos:end="755:67"><call pos:start="753:25" pos:end="755:67"><name pos:start="753:25" pos:end="753:37">tcg_gen_ld_tl</name><argument_list pos:start="753:38" pos:end="755:67">(<argument pos:start="753:39" pos:end="753:46"><expr pos:start="753:39" pos:end="753:46"><name pos:start="753:39" pos:end="753:46">cpu_tmp0</name></expr></argument>, <argument pos:start="753:49" pos:end="753:55"><expr pos:start="753:49" pos:end="753:55"><name pos:start="753:49" pos:end="753:55">r_tsptr</name></expr></argument>,

                                      <argument pos:start="755:39" pos:end="755:66"><expr pos:start="755:39" pos:end="755:66"><call pos:start="755:39" pos:end="755:66"><name pos:start="755:39" pos:end="755:46">offsetof</name><argument_list pos:start="755:47" pos:end="755:66">(<argument pos:start="755:48" pos:end="755:57"><expr pos:start="755:48" pos:end="755:57"><name pos:start="755:48" pos:end="755:57">trap_state</name></expr></argument>, <argument pos:start="755:60" pos:end="755:65"><expr pos:start="755:60" pos:end="755:65"><name pos:start="755:60" pos:end="755:65">tstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="757:25" pos:end="757:51"><expr pos:start="757:25" pos:end="757:50"><call pos:start="757:25" pos:end="757:50"><name pos:start="757:25" pos:end="757:41">tcg_temp_free_ptr</name><argument_list pos:start="757:42" pos:end="757:50">(<argument pos:start="757:43" pos:end="757:49"><expr pos:start="757:43" pos:end="757:49"><name pos:start="757:43" pos:end="757:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="761:21" pos:end="761:26">break;</break>

                <case pos:start="763:17" pos:end="763:23">case <expr pos:start="763:22" pos:end="763:22"><literal type="number" pos:start="763:22" pos:end="763:22">3</literal></expr>:</case> <comment type="line" pos:start="763:25" pos:end="763:29">// tt</comment>

                    <block pos:start="765:21" pos:end="783:21">{<block_content pos:start="767:25" pos:end="781:64">

                        <decl_stmt pos:start="767:25" pos:end="767:41"><decl pos:start="767:25" pos:end="767:40"><type pos:start="767:25" pos:end="767:32"><name pos:start="767:25" pos:end="767:32">TCGv_ptr</name></type> <name pos:start="767:34" pos:end="767:40">r_tsptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="771:25" pos:end="771:53"><expr pos:start="771:25" pos:end="771:52"><name pos:start="771:25" pos:end="771:31">r_tsptr</name> <operator pos:start="771:33" pos:end="771:33">=</operator> <call pos:start="771:35" pos:end="771:52"><name pos:start="771:35" pos:end="771:50">tcg_temp_new_ptr</name><argument_list pos:start="771:51" pos:end="771:52">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="773:25" pos:end="773:68"><expr pos:start="773:25" pos:end="773:67"><call pos:start="773:25" pos:end="773:67"><name pos:start="773:25" pos:end="773:49">gen_load_trap_state_at_tl</name><argument_list pos:start="773:50" pos:end="773:67">(<argument pos:start="773:51" pos:end="773:57"><expr pos:start="773:51" pos:end="773:57"><name pos:start="773:51" pos:end="773:57">r_tsptr</name></expr></argument>, <argument pos:start="773:60" pos:end="773:66"><expr pos:start="773:60" pos:end="773:66"><name pos:start="773:60" pos:end="773:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="775:25" pos:end="777:65"><expr pos:start="775:25" pos:end="777:64"><call pos:start="775:25" pos:end="777:64"><name pos:start="775:25" pos:end="775:38">tcg_gen_ld_i32</name><argument_list pos:start="775:39" pos:end="777:64">(<argument pos:start="775:40" pos:end="775:48"><expr pos:start="775:40" pos:end="775:48"><name pos:start="775:40" pos:end="775:48">cpu_tmp32</name></expr></argument>, <argument pos:start="775:51" pos:end="775:57"><expr pos:start="775:51" pos:end="775:57"><name pos:start="775:51" pos:end="775:57">r_tsptr</name></expr></argument>,

                                       <argument pos:start="777:40" pos:end="777:63"><expr pos:start="777:40" pos:end="777:63"><call pos:start="777:40" pos:end="777:63"><name pos:start="777:40" pos:end="777:47">offsetof</name><argument_list pos:start="777:48" pos:end="777:63">(<argument pos:start="777:49" pos:end="777:58"><expr pos:start="777:49" pos:end="777:58"><name pos:start="777:49" pos:end="777:58">trap_state</name></expr></argument>, <argument pos:start="777:61" pos:end="777:62"><expr pos:start="777:61" pos:end="777:62"><name pos:start="777:61" pos:end="777:62">tt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="779:25" pos:end="779:51"><expr pos:start="779:25" pos:end="779:50"><call pos:start="779:25" pos:end="779:50"><name pos:start="779:25" pos:end="779:41">tcg_temp_free_ptr</name><argument_list pos:start="779:42" pos:end="779:50">(<argument pos:start="779:43" pos:end="779:49"><expr pos:start="779:43" pos:end="779:49"><name pos:start="779:43" pos:end="779:49">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="781:25" pos:end="781:64"><expr pos:start="781:25" pos:end="781:63"><call pos:start="781:25" pos:end="781:63"><name pos:start="781:25" pos:end="781:42">tcg_gen_ext_i32_tl</name><argument_list pos:start="781:43" pos:end="781:63">(<argument pos:start="781:44" pos:end="781:51"><expr pos:start="781:44" pos:end="781:51"><name pos:start="781:44" pos:end="781:51">cpu_tmp0</name></expr></argument>, <argument pos:start="781:54" pos:end="781:62"><expr pos:start="781:54" pos:end="781:62"><name pos:start="781:54" pos:end="781:62">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="785:21" pos:end="785:26">break;</break>

                <case pos:start="787:17" pos:end="787:23">case <expr pos:start="787:22" pos:end="787:22"><literal type="number" pos:start="787:22" pos:end="787:22">4</literal></expr>:</case> <comment type="line" pos:start="787:25" pos:end="787:31">// tick</comment>

                    <block pos:start="789:21" pos:end="805:21">{<block_content pos:start="791:25" pos:end="803:53">

                        <decl_stmt pos:start="791:25" pos:end="791:43"><decl pos:start="791:25" pos:end="791:42"><type pos:start="791:25" pos:end="791:32"><name pos:start="791:25" pos:end="791:32">TCGv_ptr</name></type> <name pos:start="791:34" pos:end="791:42">r_tickptr</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="795:25" pos:end="795:55"><expr pos:start="795:25" pos:end="795:54"><name pos:start="795:25" pos:end="795:33">r_tickptr</name> <operator pos:start="795:35" pos:end="795:35">=</operator> <call pos:start="795:37" pos:end="795:54"><name pos:start="795:37" pos:end="795:52">tcg_temp_new_ptr</name><argument_list pos:start="795:53" pos:end="795:54">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="797:25" pos:end="799:70"><expr pos:start="797:25" pos:end="799:69"><call pos:start="797:25" pos:end="799:69"><name pos:start="797:25" pos:end="797:38">tcg_gen_ld_ptr</name><argument_list pos:start="797:39" pos:end="799:69">(<argument pos:start="797:40" pos:end="797:48"><expr pos:start="797:40" pos:end="797:48"><name pos:start="797:40" pos:end="797:48">r_tickptr</name></expr></argument>, <argument pos:start="797:51" pos:end="797:57"><expr pos:start="797:51" pos:end="797:57"><name pos:start="797:51" pos:end="797:57">cpu_env</name></expr></argument>,

                                       <argument pos:start="799:40" pos:end="799:68"><expr pos:start="799:40" pos:end="799:68"><call pos:start="799:40" pos:end="799:68"><name pos:start="799:40" pos:end="799:47">offsetof</name><argument_list pos:start="799:48" pos:end="799:68">(<argument pos:start="799:49" pos:end="799:61"><expr pos:start="799:49" pos:end="799:61"><name pos:start="799:49" pos:end="799:61">CPUSPARCState</name></expr></argument>, <argument pos:start="799:64" pos:end="799:67"><expr pos:start="799:64" pos:end="799:67"><name pos:start="799:64" pos:end="799:67">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="801:25" pos:end="801:71"><expr pos:start="801:25" pos:end="801:70"><call pos:start="801:25" pos:end="801:70"><name pos:start="801:25" pos:end="801:49">gen_helper_tick_get_count</name><argument_list pos:start="801:50" pos:end="801:70">(<argument pos:start="801:51" pos:end="801:58"><expr pos:start="801:51" pos:end="801:58"><name pos:start="801:51" pos:end="801:58">cpu_tmp0</name></expr></argument>, <argument pos:start="801:61" pos:end="801:69"><expr pos:start="801:61" pos:end="801:69"><name pos:start="801:61" pos:end="801:69">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="803:25" pos:end="803:53"><expr pos:start="803:25" pos:end="803:52"><call pos:start="803:25" pos:end="803:52"><name pos:start="803:25" pos:end="803:41">tcg_temp_free_ptr</name><argument_list pos:start="803:42" pos:end="803:52">(<argument pos:start="803:43" pos:end="803:51"><expr pos:start="803:43" pos:end="803:51"><name pos:start="803:43" pos:end="803:51">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="807:21" pos:end="807:26">break;</break>

                <case pos:start="809:17" pos:end="809:23">case <expr pos:start="809:22" pos:end="809:22"><literal type="number" pos:start="809:22" pos:end="809:22">5</literal></expr>:</case> <comment type="line" pos:start="809:25" pos:end="809:30">// tba</comment>

                    <expr_stmt pos:start="811:21" pos:end="811:54"><expr pos:start="811:21" pos:end="811:53"><call pos:start="811:21" pos:end="811:53"><name pos:start="811:21" pos:end="811:34">tcg_gen_mov_tl</name><argument_list pos:start="811:35" pos:end="811:53">(<argument pos:start="811:36" pos:end="811:43"><expr pos:start="811:36" pos:end="811:43"><name pos:start="811:36" pos:end="811:43">cpu_tmp0</name></expr></argument>, <argument pos:start="811:46" pos:end="811:52"><expr pos:start="811:46" pos:end="811:52"><name pos:start="811:46" pos:end="811:52">cpu_tbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="813:21" pos:end="813:26">break;</break>

                <case pos:start="815:17" pos:end="815:23">case <expr pos:start="815:22" pos:end="815:22"><literal type="number" pos:start="815:22" pos:end="815:22">6</literal></expr>:</case> <comment type="line" pos:start="815:25" pos:end="815:33">// pstate</comment>

                    <expr_stmt pos:start="817:21" pos:end="819:68"><expr pos:start="817:21" pos:end="819:67"><call pos:start="817:21" pos:end="819:67"><name pos:start="817:21" pos:end="817:34">tcg_gen_ld_i32</name><argument_list pos:start="817:35" pos:end="819:67">(<argument pos:start="817:36" pos:end="817:44"><expr pos:start="817:36" pos:end="817:44"><name pos:start="817:36" pos:end="817:44">cpu_tmp32</name></expr></argument>, <argument pos:start="817:47" pos:end="817:53"><expr pos:start="817:47" pos:end="817:53"><name pos:start="817:47" pos:end="817:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="819:36" pos:end="819:66"><expr pos:start="819:36" pos:end="819:66"><call pos:start="819:36" pos:end="819:66"><name pos:start="819:36" pos:end="819:43">offsetof</name><argument_list pos:start="819:44" pos:end="819:66">(<argument pos:start="819:45" pos:end="819:57"><expr pos:start="819:45" pos:end="819:57"><name pos:start="819:45" pos:end="819:57">CPUSPARCState</name></expr></argument>, <argument pos:start="819:60" pos:end="819:65"><expr pos:start="819:60" pos:end="819:65"><name pos:start="819:60" pos:end="819:65">pstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="821:21" pos:end="821:60"><expr pos:start="821:21" pos:end="821:59"><call pos:start="821:21" pos:end="821:59"><name pos:start="821:21" pos:end="821:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="821:39" pos:end="821:59">(<argument pos:start="821:40" pos:end="821:47"><expr pos:start="821:40" pos:end="821:47"><name pos:start="821:40" pos:end="821:47">cpu_tmp0</name></expr></argument>, <argument pos:start="821:50" pos:end="821:58"><expr pos:start="821:50" pos:end="821:58"><name pos:start="821:50" pos:end="821:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="823:21" pos:end="823:26">break;</break>

                <case pos:start="825:17" pos:end="825:23">case <expr pos:start="825:22" pos:end="825:22"><literal type="number" pos:start="825:22" pos:end="825:22">7</literal></expr>:</case> <comment type="line" pos:start="825:25" pos:end="825:29">// tl</comment>

                    <expr_stmt pos:start="827:21" pos:end="829:64"><expr pos:start="827:21" pos:end="829:63"><call pos:start="827:21" pos:end="829:63"><name pos:start="827:21" pos:end="827:34">tcg_gen_ld_i32</name><argument_list pos:start="827:35" pos:end="829:63">(<argument pos:start="827:36" pos:end="827:44"><expr pos:start="827:36" pos:end="827:44"><name pos:start="827:36" pos:end="827:44">cpu_tmp32</name></expr></argument>, <argument pos:start="827:47" pos:end="827:53"><expr pos:start="827:47" pos:end="827:53"><name pos:start="827:47" pos:end="827:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="829:36" pos:end="829:62"><expr pos:start="829:36" pos:end="829:62"><call pos:start="829:36" pos:end="829:62"><name pos:start="829:36" pos:end="829:43">offsetof</name><argument_list pos:start="829:44" pos:end="829:62">(<argument pos:start="829:45" pos:end="829:57"><expr pos:start="829:45" pos:end="829:57"><name pos:start="829:45" pos:end="829:57">CPUSPARCState</name></expr></argument>, <argument pos:start="829:60" pos:end="829:61"><expr pos:start="829:60" pos:end="829:61"><name pos:start="829:60" pos:end="829:61">tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="831:21" pos:end="831:60"><expr pos:start="831:21" pos:end="831:59"><call pos:start="831:21" pos:end="831:59"><name pos:start="831:21" pos:end="831:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="831:39" pos:end="831:59">(<argument pos:start="831:40" pos:end="831:47"><expr pos:start="831:40" pos:end="831:47"><name pos:start="831:40" pos:end="831:47">cpu_tmp0</name></expr></argument>, <argument pos:start="831:50" pos:end="831:58"><expr pos:start="831:50" pos:end="831:58"><name pos:start="831:50" pos:end="831:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="833:21" pos:end="833:26">break;</break>

                <case pos:start="835:17" pos:end="835:23">case <expr pos:start="835:22" pos:end="835:22"><literal type="number" pos:start="835:22" pos:end="835:22">8</literal></expr>:</case> <comment type="line" pos:start="835:25" pos:end="835:30">// pil</comment>

                    <expr_stmt pos:start="837:21" pos:end="839:68"><expr pos:start="837:21" pos:end="839:67"><call pos:start="837:21" pos:end="839:67"><name pos:start="837:21" pos:end="837:34">tcg_gen_ld_i32</name><argument_list pos:start="837:35" pos:end="839:67">(<argument pos:start="837:36" pos:end="837:44"><expr pos:start="837:36" pos:end="837:44"><name pos:start="837:36" pos:end="837:44">cpu_tmp32</name></expr></argument>, <argument pos:start="837:47" pos:end="837:53"><expr pos:start="837:47" pos:end="837:53"><name pos:start="837:47" pos:end="837:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="839:36" pos:end="839:66"><expr pos:start="839:36" pos:end="839:66"><call pos:start="839:36" pos:end="839:66"><name pos:start="839:36" pos:end="839:43">offsetof</name><argument_list pos:start="839:44" pos:end="839:66">(<argument pos:start="839:45" pos:end="839:57"><expr pos:start="839:45" pos:end="839:57"><name pos:start="839:45" pos:end="839:57">CPUSPARCState</name></expr></argument>, <argument pos:start="839:60" pos:end="839:65"><expr pos:start="839:60" pos:end="839:65"><name pos:start="839:60" pos:end="839:65">psrpil</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="841:21" pos:end="841:60"><expr pos:start="841:21" pos:end="841:59"><call pos:start="841:21" pos:end="841:59"><name pos:start="841:21" pos:end="841:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="841:39" pos:end="841:59">(<argument pos:start="841:40" pos:end="841:47"><expr pos:start="841:40" pos:end="841:47"><name pos:start="841:40" pos:end="841:47">cpu_tmp0</name></expr></argument>, <argument pos:start="841:50" pos:end="841:58"><expr pos:start="841:50" pos:end="841:58"><name pos:start="841:50" pos:end="841:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="843:21" pos:end="843:26">break;</break>

                <case pos:start="845:17" pos:end="845:23">case <expr pos:start="845:22" pos:end="845:22"><literal type="number" pos:start="845:22" pos:end="845:22">9</literal></expr>:</case> <comment type="line" pos:start="845:25" pos:end="845:30">// cwp</comment>

                    <expr_stmt pos:start="847:21" pos:end="847:56"><expr pos:start="847:21" pos:end="847:55"><call pos:start="847:21" pos:end="847:55"><name pos:start="847:21" pos:end="847:36">gen_helper_rdcwp</name><argument_list pos:start="847:37" pos:end="847:55">(<argument pos:start="847:38" pos:end="847:45"><expr pos:start="847:38" pos:end="847:45"><name pos:start="847:38" pos:end="847:45">cpu_tmp0</name></expr></argument>, <argument pos:start="847:48" pos:end="847:54"><expr pos:start="847:48" pos:end="847:54"><name pos:start="847:48" pos:end="847:54">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="849:21" pos:end="849:26">break;</break>

                <case pos:start="851:17" pos:end="851:24">case <expr pos:start="851:22" pos:end="851:23"><literal type="number" pos:start="851:22" pos:end="851:23">10</literal></expr>:</case> <comment type="line" pos:start="851:26" pos:end="851:35">// cansave</comment>

                    <expr_stmt pos:start="853:21" pos:end="855:69"><expr pos:start="853:21" pos:end="855:68"><call pos:start="853:21" pos:end="855:68"><name pos:start="853:21" pos:end="853:34">tcg_gen_ld_i32</name><argument_list pos:start="853:35" pos:end="855:68">(<argument pos:start="853:36" pos:end="853:44"><expr pos:start="853:36" pos:end="853:44"><name pos:start="853:36" pos:end="853:44">cpu_tmp32</name></expr></argument>, <argument pos:start="853:47" pos:end="853:53"><expr pos:start="853:47" pos:end="853:53"><name pos:start="853:47" pos:end="853:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="855:36" pos:end="855:67"><expr pos:start="855:36" pos:end="855:67"><call pos:start="855:36" pos:end="855:67"><name pos:start="855:36" pos:end="855:43">offsetof</name><argument_list pos:start="855:44" pos:end="855:67">(<argument pos:start="855:45" pos:end="855:57"><expr pos:start="855:45" pos:end="855:57"><name pos:start="855:45" pos:end="855:57">CPUSPARCState</name></expr></argument>, <argument pos:start="855:60" pos:end="855:66"><expr pos:start="855:60" pos:end="855:66"><name pos:start="855:60" pos:end="855:66">cansave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="857:21" pos:end="857:60"><expr pos:start="857:21" pos:end="857:59"><call pos:start="857:21" pos:end="857:59"><name pos:start="857:21" pos:end="857:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="857:39" pos:end="857:59">(<argument pos:start="857:40" pos:end="857:47"><expr pos:start="857:40" pos:end="857:47"><name pos:start="857:40" pos:end="857:47">cpu_tmp0</name></expr></argument>, <argument pos:start="857:50" pos:end="857:58"><expr pos:start="857:50" pos:end="857:58"><name pos:start="857:50" pos:end="857:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="859:21" pos:end="859:26">break;</break>

                <case pos:start="861:17" pos:end="861:24">case <expr pos:start="861:22" pos:end="861:23"><literal type="number" pos:start="861:22" pos:end="861:23">11</literal></expr>:</case> <comment type="line" pos:start="861:26" pos:end="861:38">// canrestore</comment>

                    <expr_stmt pos:start="863:21" pos:end="865:72"><expr pos:start="863:21" pos:end="865:71"><call pos:start="863:21" pos:end="865:71"><name pos:start="863:21" pos:end="863:34">tcg_gen_ld_i32</name><argument_list pos:start="863:35" pos:end="865:71">(<argument pos:start="863:36" pos:end="863:44"><expr pos:start="863:36" pos:end="863:44"><name pos:start="863:36" pos:end="863:44">cpu_tmp32</name></expr></argument>, <argument pos:start="863:47" pos:end="863:53"><expr pos:start="863:47" pos:end="863:53"><name pos:start="863:47" pos:end="863:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="865:36" pos:end="865:70"><expr pos:start="865:36" pos:end="865:70"><call pos:start="865:36" pos:end="865:70"><name pos:start="865:36" pos:end="865:43">offsetof</name><argument_list pos:start="865:44" pos:end="865:70">(<argument pos:start="865:45" pos:end="865:57"><expr pos:start="865:45" pos:end="865:57"><name pos:start="865:45" pos:end="865:57">CPUSPARCState</name></expr></argument>, <argument pos:start="865:60" pos:end="865:69"><expr pos:start="865:60" pos:end="865:69"><name pos:start="865:60" pos:end="865:69">canrestore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="867:21" pos:end="867:60"><expr pos:start="867:21" pos:end="867:59"><call pos:start="867:21" pos:end="867:59"><name pos:start="867:21" pos:end="867:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="867:39" pos:end="867:59">(<argument pos:start="867:40" pos:end="867:47"><expr pos:start="867:40" pos:end="867:47"><name pos:start="867:40" pos:end="867:47">cpu_tmp0</name></expr></argument>, <argument pos:start="867:50" pos:end="867:58"><expr pos:start="867:50" pos:end="867:58"><name pos:start="867:50" pos:end="867:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="869:21" pos:end="869:26">break;</break>

                <case pos:start="871:17" pos:end="871:24">case <expr pos:start="871:22" pos:end="871:23"><literal type="number" pos:start="871:22" pos:end="871:23">12</literal></expr>:</case> <comment type="line" pos:start="871:26" pos:end="871:36">// cleanwin</comment>

                    <expr_stmt pos:start="873:21" pos:end="875:70"><expr pos:start="873:21" pos:end="875:69"><call pos:start="873:21" pos:end="875:69"><name pos:start="873:21" pos:end="873:34">tcg_gen_ld_i32</name><argument_list pos:start="873:35" pos:end="875:69">(<argument pos:start="873:36" pos:end="873:44"><expr pos:start="873:36" pos:end="873:44"><name pos:start="873:36" pos:end="873:44">cpu_tmp32</name></expr></argument>, <argument pos:start="873:47" pos:end="873:53"><expr pos:start="873:47" pos:end="873:53"><name pos:start="873:47" pos:end="873:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="875:36" pos:end="875:68"><expr pos:start="875:36" pos:end="875:68"><call pos:start="875:36" pos:end="875:68"><name pos:start="875:36" pos:end="875:43">offsetof</name><argument_list pos:start="875:44" pos:end="875:68">(<argument pos:start="875:45" pos:end="875:57"><expr pos:start="875:45" pos:end="875:57"><name pos:start="875:45" pos:end="875:57">CPUSPARCState</name></expr></argument>, <argument pos:start="875:60" pos:end="875:67"><expr pos:start="875:60" pos:end="875:67"><name pos:start="875:60" pos:end="875:67">cleanwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="877:21" pos:end="877:60"><expr pos:start="877:21" pos:end="877:59"><call pos:start="877:21" pos:end="877:59"><name pos:start="877:21" pos:end="877:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="877:39" pos:end="877:59">(<argument pos:start="877:40" pos:end="877:47"><expr pos:start="877:40" pos:end="877:47"><name pos:start="877:40" pos:end="877:47">cpu_tmp0</name></expr></argument>, <argument pos:start="877:50" pos:end="877:58"><expr pos:start="877:50" pos:end="877:58"><name pos:start="877:50" pos:end="877:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="879:21" pos:end="879:26">break;</break>

                <case pos:start="881:17" pos:end="881:24">case <expr pos:start="881:22" pos:end="881:23"><literal type="number" pos:start="881:22" pos:end="881:23">13</literal></expr>:</case> <comment type="line" pos:start="881:26" pos:end="881:36">// otherwin</comment>

                    <expr_stmt pos:start="883:21" pos:end="885:70"><expr pos:start="883:21" pos:end="885:69"><call pos:start="883:21" pos:end="885:69"><name pos:start="883:21" pos:end="883:34">tcg_gen_ld_i32</name><argument_list pos:start="883:35" pos:end="885:69">(<argument pos:start="883:36" pos:end="883:44"><expr pos:start="883:36" pos:end="883:44"><name pos:start="883:36" pos:end="883:44">cpu_tmp32</name></expr></argument>, <argument pos:start="883:47" pos:end="883:53"><expr pos:start="883:47" pos:end="883:53"><name pos:start="883:47" pos:end="883:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="885:36" pos:end="885:68"><expr pos:start="885:36" pos:end="885:68"><call pos:start="885:36" pos:end="885:68"><name pos:start="885:36" pos:end="885:43">offsetof</name><argument_list pos:start="885:44" pos:end="885:68">(<argument pos:start="885:45" pos:end="885:57"><expr pos:start="885:45" pos:end="885:57"><name pos:start="885:45" pos:end="885:57">CPUSPARCState</name></expr></argument>, <argument pos:start="885:60" pos:end="885:67"><expr pos:start="885:60" pos:end="885:67"><name pos:start="885:60" pos:end="885:67">otherwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="887:21" pos:end="887:60"><expr pos:start="887:21" pos:end="887:59"><call pos:start="887:21" pos:end="887:59"><name pos:start="887:21" pos:end="887:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="887:39" pos:end="887:59">(<argument pos:start="887:40" pos:end="887:47"><expr pos:start="887:40" pos:end="887:47"><name pos:start="887:40" pos:end="887:47">cpu_tmp0</name></expr></argument>, <argument pos:start="887:50" pos:end="887:58"><expr pos:start="887:50" pos:end="887:58"><name pos:start="887:50" pos:end="887:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="889:21" pos:end="889:26">break;</break>

                <case pos:start="891:17" pos:end="891:24">case <expr pos:start="891:22" pos:end="891:23"><literal type="number" pos:start="891:22" pos:end="891:23">14</literal></expr>:</case> <comment type="line" pos:start="891:26" pos:end="891:34">// wstate</comment>

                    <expr_stmt pos:start="893:21" pos:end="895:68"><expr pos:start="893:21" pos:end="895:67"><call pos:start="893:21" pos:end="895:67"><name pos:start="893:21" pos:end="893:34">tcg_gen_ld_i32</name><argument_list pos:start="893:35" pos:end="895:67">(<argument pos:start="893:36" pos:end="893:44"><expr pos:start="893:36" pos:end="893:44"><name pos:start="893:36" pos:end="893:44">cpu_tmp32</name></expr></argument>, <argument pos:start="893:47" pos:end="893:53"><expr pos:start="893:47" pos:end="893:53"><name pos:start="893:47" pos:end="893:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="895:36" pos:end="895:66"><expr pos:start="895:36" pos:end="895:66"><call pos:start="895:36" pos:end="895:66"><name pos:start="895:36" pos:end="895:43">offsetof</name><argument_list pos:start="895:44" pos:end="895:66">(<argument pos:start="895:45" pos:end="895:57"><expr pos:start="895:45" pos:end="895:57"><name pos:start="895:45" pos:end="895:57">CPUSPARCState</name></expr></argument>, <argument pos:start="895:60" pos:end="895:65"><expr pos:start="895:60" pos:end="895:65"><name pos:start="895:60" pos:end="895:65">wstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="897:21" pos:end="897:60"><expr pos:start="897:21" pos:end="897:59"><call pos:start="897:21" pos:end="897:59"><name pos:start="897:21" pos:end="897:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="897:39" pos:end="897:59">(<argument pos:start="897:40" pos:end="897:47"><expr pos:start="897:40" pos:end="897:47"><name pos:start="897:40" pos:end="897:47">cpu_tmp0</name></expr></argument>, <argument pos:start="897:50" pos:end="897:58"><expr pos:start="897:50" pos:end="897:58"><name pos:start="897:50" pos:end="897:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="899:21" pos:end="899:26">break;</break>

                <case pos:start="901:17" pos:end="901:24">case <expr pos:start="901:22" pos:end="901:23"><literal type="number" pos:start="901:22" pos:end="901:23">16</literal></expr>:</case> <comment type="line" pos:start="901:26" pos:end="901:37">// UA2005 gl</comment>

                    <expr_stmt pos:start="903:21" pos:end="903:45"><expr pos:start="903:21" pos:end="903:44"><call pos:start="903:21" pos:end="903:44"><name pos:start="903:21" pos:end="903:36">CHECK_IU_FEATURE</name><argument_list pos:start="903:37" pos:end="903:44">(<argument pos:start="903:38" pos:end="903:39"><expr pos:start="903:38" pos:end="903:39"><name pos:start="903:38" pos:end="903:39">dc</name></expr></argument>, <argument pos:start="903:42" pos:end="903:43"><expr pos:start="903:42" pos:end="903:43"><name pos:start="903:42" pos:end="903:43">GL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="905:21" pos:end="907:64"><expr pos:start="905:21" pos:end="907:63"><call pos:start="905:21" pos:end="907:63"><name pos:start="905:21" pos:end="905:34">tcg_gen_ld_i32</name><argument_list pos:start="905:35" pos:end="907:63">(<argument pos:start="905:36" pos:end="905:44"><expr pos:start="905:36" pos:end="905:44"><name pos:start="905:36" pos:end="905:44">cpu_tmp32</name></expr></argument>, <argument pos:start="905:47" pos:end="905:53"><expr pos:start="905:47" pos:end="905:53"><name pos:start="905:47" pos:end="905:53">cpu_env</name></expr></argument>,

                                   <argument pos:start="907:36" pos:end="907:62"><expr pos:start="907:36" pos:end="907:62"><call pos:start="907:36" pos:end="907:62"><name pos:start="907:36" pos:end="907:43">offsetof</name><argument_list pos:start="907:44" pos:end="907:62">(<argument pos:start="907:45" pos:end="907:57"><expr pos:start="907:45" pos:end="907:57"><name pos:start="907:45" pos:end="907:57">CPUSPARCState</name></expr></argument>, <argument pos:start="907:60" pos:end="907:61"><expr pos:start="907:60" pos:end="907:61"><name pos:start="907:60" pos:end="907:61">gl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="909:21" pos:end="909:60"><expr pos:start="909:21" pos:end="909:59"><call pos:start="909:21" pos:end="909:59"><name pos:start="909:21" pos:end="909:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="909:39" pos:end="909:59">(<argument pos:start="909:40" pos:end="909:47"><expr pos:start="909:40" pos:end="909:47"><name pos:start="909:40" pos:end="909:47">cpu_tmp0</name></expr></argument>, <argument pos:start="909:50" pos:end="909:58"><expr pos:start="909:50" pos:end="909:58"><name pos:start="909:50" pos:end="909:58">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="911:21" pos:end="911:26">break;</break>

                <case pos:start="913:17" pos:end="913:24">case <expr pos:start="913:22" pos:end="913:23"><literal type="number" pos:start="913:22" pos:end="913:23">26</literal></expr>:</case> <comment type="line" pos:start="913:26" pos:end="913:48">// UA2005 strand status</comment>

                    <expr_stmt pos:start="915:21" pos:end="915:47"><expr pos:start="915:21" pos:end="915:46"><call pos:start="915:21" pos:end="915:46"><name pos:start="915:21" pos:end="915:36">CHECK_IU_FEATURE</name><argument_list pos:start="915:37" pos:end="915:46">(<argument pos:start="915:38" pos:end="915:39"><expr pos:start="915:38" pos:end="915:39"><name pos:start="915:38" pos:end="915:39">dc</name></expr></argument>, <argument pos:start="915:42" pos:end="915:45"><expr pos:start="915:42" pos:end="915:45"><name pos:start="915:42" pos:end="915:45">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="917:21" pos:end="919:39"><if pos:start="917:21" pos:end="919:39">if <condition pos:start="917:24" pos:end="917:40">(<expr pos:start="917:25" pos:end="917:39"><operator pos:start="917:25" pos:end="917:25">!</operator><call pos:start="917:26" pos:end="917:39"><name pos:start="917:26" pos:end="917:35">hypervisor</name><argument_list pos:start="917:36" pos:end="917:39">(<argument pos:start="917:37" pos:end="917:38"><expr pos:start="917:37" pos:end="917:38"><name pos:start="917:37" pos:end="917:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="919:25" pos:end="919:39"><block_content pos:start="919:25" pos:end="919:39">

                        <goto pos:start="919:25" pos:end="919:39">goto <name pos:start="919:30" pos:end="919:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="921:21" pos:end="921:54"><expr pos:start="921:21" pos:end="921:53"><call pos:start="921:21" pos:end="921:53"><name pos:start="921:21" pos:end="921:34">tcg_gen_mov_tl</name><argument_list pos:start="921:35" pos:end="921:53">(<argument pos:start="921:36" pos:end="921:43"><expr pos:start="921:36" pos:end="921:43"><name pos:start="921:36" pos:end="921:43">cpu_tmp0</name></expr></argument>, <argument pos:start="921:46" pos:end="921:52"><expr pos:start="921:46" pos:end="921:52"><name pos:start="921:46" pos:end="921:52">cpu_ssr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="923:21" pos:end="923:26">break;</break>

                <case pos:start="925:17" pos:end="925:24">case <expr pos:start="925:22" pos:end="925:23"><literal type="number" pos:start="925:22" pos:end="925:23">31</literal></expr>:</case> <comment type="line" pos:start="925:26" pos:end="925:31">// ver</comment>

                    <expr_stmt pos:start="927:21" pos:end="927:54"><expr pos:start="927:21" pos:end="927:53"><call pos:start="927:21" pos:end="927:53"><name pos:start="927:21" pos:end="927:34">tcg_gen_mov_tl</name><argument_list pos:start="927:35" pos:end="927:53">(<argument pos:start="927:36" pos:end="927:43"><expr pos:start="927:36" pos:end="927:43"><name pos:start="927:36" pos:end="927:43">cpu_tmp0</name></expr></argument>, <argument pos:start="927:46" pos:end="927:52"><expr pos:start="927:46" pos:end="927:52"><name pos:start="927:46" pos:end="927:52">cpu_ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="929:21" pos:end="929:26">break;</break>

                <case pos:start="931:17" pos:end="931:24">case <expr pos:start="931:22" pos:end="931:23"><literal type="number" pos:start="931:22" pos:end="931:23">15</literal></expr>:</case> <comment type="line" pos:start="931:26" pos:end="931:30">// fq</comment>

                <default pos:start="933:17" pos:end="933:24">default:</default>

                    <goto pos:start="935:21" pos:end="935:38">goto <name pos:start="935:26" pos:end="935:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:else pos:start="939:1" pos:end="939:5">#<cpp:directive pos:start="939:2" pos:end="939:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="941:17" pos:end="944:0"><expr pos:start="941:17" pos:end="941:53"><call pos:start="941:17" pos:end="941:53"><name pos:start="941:17" pos:end="941:34">tcg_gen_ext_i32_tl</name><argument_list pos:start="941:35" pos:end="941:53">(<argument pos:start="941:36" pos:end="941:43"><expr pos:start="941:36" pos:end="941:43"><name pos:start="941:36" pos:end="941:43">cpu_tmp0</name></expr></argument>, <argument pos:start="941:46" pos:end="941:52"><expr pos:start="941:46" pos:end="941:52"><name pos:start="941:46" pos:end="941:52">cpu_wim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="943:1" pos:end="943:6">#<cpp:directive pos:start="943:2" pos:end="943:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="945:17" pos:end="945:48"><expr pos:start="945:17" pos:end="945:47"><call pos:start="945:17" pos:end="945:47"><name pos:start="945:17" pos:end="945:29">gen_store_gpr</name><argument_list pos:start="945:30" pos:end="945:47">(<argument pos:start="945:31" pos:end="945:32"><expr pos:start="945:31" pos:end="945:32"><name pos:start="945:31" pos:end="945:32">dc</name></expr></argument>, <argument pos:start="945:35" pos:end="945:36"><expr pos:start="945:35" pos:end="945:36"><name pos:start="945:35" pos:end="945:36">rd</name></expr></argument>, <argument pos:start="945:39" pos:end="945:46"><expr pos:start="945:39" pos:end="945:46"><name pos:start="945:39" pos:end="945:46">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="947:17" pos:end="947:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="949:15" pos:end="971:13">else if <condition pos:start="949:23" pos:end="949:35">(<expr pos:start="949:24" pos:end="949:34"><name pos:start="949:24" pos:end="949:26">xop</name> <operator pos:start="949:28" pos:end="949:29">==</operator> <literal type="number" pos:start="949:31" pos:end="949:34">0x2b</literal></expr>)</condition> <block pos:start="949:37" pos:end="971:13">{<block_content pos:start="953:17" pos:end="970:0"> <comment type="block" pos:start="949:39" pos:end="949:61">/* rdtbr / V9 flushw */</comment>

<cpp:ifdef pos:start="951:1" pos:end="951:21">#<cpp:directive pos:start="951:2" pos:end="951:6">ifdef</cpp:directive> <name pos:start="951:8" pos:end="951:21">TARGET_SPARC64</name></cpp:ifdef>

                <expr_stmt pos:start="953:17" pos:end="953:31"><expr pos:start="953:17" pos:end="953:30"><call pos:start="953:17" pos:end="953:30"><name pos:start="953:17" pos:end="953:26">save_state</name><argument_list pos:start="953:27" pos:end="953:30">(<argument pos:start="953:28" pos:end="953:29"><expr pos:start="953:28" pos:end="953:29"><name pos:start="953:28" pos:end="953:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="955:17" pos:end="958:0"><expr pos:start="955:17" pos:end="955:42"><call pos:start="955:17" pos:end="955:42"><name pos:start="955:17" pos:end="955:33">gen_helper_flushw</name><argument_list pos:start="955:34" pos:end="955:42">(<argument pos:start="955:35" pos:end="955:41"><expr pos:start="955:35" pos:end="955:41"><name pos:start="955:35" pos:end="955:41">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="957:1" pos:end="957:5">#<cpp:directive pos:start="957:2" pos:end="957:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="959:17" pos:end="961:35"><if pos:start="959:17" pos:end="961:35">if <condition pos:start="959:20" pos:end="959:36">(<expr pos:start="959:21" pos:end="959:35"><operator pos:start="959:21" pos:end="959:21">!</operator><call pos:start="959:22" pos:end="959:35"><name pos:start="959:22" pos:end="959:31">supervisor</name><argument_list pos:start="959:32" pos:end="959:35">(<argument pos:start="959:33" pos:end="959:34"><expr pos:start="959:33" pos:end="959:34"><name pos:start="959:33" pos:end="959:34">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="961:21" pos:end="961:35"><block_content pos:start="961:21" pos:end="961:35">

                    <goto pos:start="961:21" pos:end="961:35">goto <name pos:start="961:26" pos:end="961:34">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="963:17" pos:end="966:0"><expr pos:start="963:17" pos:end="963:46"><call pos:start="963:17" pos:end="963:46"><name pos:start="963:17" pos:end="963:29">gen_store_gpr</name><argument_list pos:start="963:30" pos:end="963:46">(<argument pos:start="963:31" pos:end="963:32"><expr pos:start="963:31" pos:end="963:32"><name pos:start="963:31" pos:end="963:32">dc</name></expr></argument>, <argument pos:start="963:35" pos:end="963:36"><expr pos:start="963:35" pos:end="963:36"><name pos:start="963:35" pos:end="963:36">rd</name></expr></argument>, <argument pos:start="963:39" pos:end="963:45"><expr pos:start="963:39" pos:end="963:45"><name pos:start="963:39" pos:end="963:45">cpu_tbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="965:1" pos:end="965:6">#<cpp:directive pos:start="965:2" pos:end="965:6">endif</cpp:directive></cpp:endif>

                <break pos:start="967:17" pos:end="970:0">break;</break>

<cpp:endif pos:start="969:1" pos:end="969:6">#<cpp:directive pos:start="969:2" pos:end="969:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="971:15" pos:end="1315:13">else if <condition pos:start="971:23" pos:end="971:35">(<expr pos:start="971:24" pos:end="971:34"><name pos:start="971:24" pos:end="971:26">xop</name> <operator pos:start="971:28" pos:end="971:29">==</operator> <literal type="number" pos:start="971:31" pos:end="971:34">0x34</literal></expr>)</condition> <block pos:start="971:37" pos:end="1315:13">{<block_content pos:start="973:17" pos:end="1313:17">   <comment type="block" pos:start="971:41" pos:end="971:60">/* FPU Operations */</comment>

                <if_stmt pos:start="973:17" pos:end="977:17"><if pos:start="973:17" pos:end="977:17">if <condition pos:start="973:20" pos:end="973:41">(<expr pos:start="973:21" pos:end="973:40"><call pos:start="973:21" pos:end="973:40"><name pos:start="973:21" pos:end="973:36">gen_trap_ifnofpu</name><argument_list pos:start="973:37" pos:end="973:40">(<argument pos:start="973:38" pos:end="973:39"><expr pos:start="973:38" pos:end="973:39"><name pos:start="973:38" pos:end="973:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="973:43" pos:end="977:17">{<block_content pos:start="975:21" pos:end="975:34">

                    <goto pos:start="975:21" pos:end="975:34">goto <name pos:start="975:26" pos:end="975:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="979:17" pos:end="979:49"><expr pos:start="979:17" pos:end="979:48"><call pos:start="979:17" pos:end="979:48"><name pos:start="979:17" pos:end="979:46">gen_op_clear_ieee_excp_and_FTT</name><argument_list pos:start="979:47" pos:end="979:48">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="981:17" pos:end="981:46"><expr pos:start="981:17" pos:end="981:45"><name pos:start="981:17" pos:end="981:19">rs1</name> <operator pos:start="981:21" pos:end="981:21">=</operator> <call pos:start="981:23" pos:end="981:45"><name pos:start="981:23" pos:end="981:31">GET_FIELD</name><argument_list pos:start="981:32" pos:end="981:45">(<argument pos:start="981:33" pos:end="981:36"><expr pos:start="981:33" pos:end="981:36"><name pos:start="981:33" pos:end="981:36">insn</name></expr></argument>, <argument pos:start="981:39" pos:end="981:40"><expr pos:start="981:39" pos:end="981:40"><literal type="number" pos:start="981:39" pos:end="981:40">13</literal></expr></argument>, <argument pos:start="981:43" pos:end="981:44"><expr pos:start="981:43" pos:end="981:44"><literal type="number" pos:start="981:43" pos:end="981:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="983:17" pos:end="983:46"><expr pos:start="983:17" pos:end="983:45"><name pos:start="983:17" pos:end="983:19">rs2</name> <operator pos:start="983:21" pos:end="983:21">=</operator> <call pos:start="983:23" pos:end="983:45"><name pos:start="983:23" pos:end="983:31">GET_FIELD</name><argument_list pos:start="983:32" pos:end="983:45">(<argument pos:start="983:33" pos:end="983:36"><expr pos:start="983:33" pos:end="983:36"><name pos:start="983:33" pos:end="983:36">insn</name></expr></argument>, <argument pos:start="983:39" pos:end="983:40"><expr pos:start="983:39" pos:end="983:40"><literal type="number" pos:start="983:39" pos:end="983:40">27</literal></expr></argument>, <argument pos:start="983:43" pos:end="983:44"><expr pos:start="983:43" pos:end="983:44"><literal type="number" pos:start="983:43" pos:end="983:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="985:17" pos:end="985:46"><expr pos:start="985:17" pos:end="985:45"><name pos:start="985:17" pos:end="985:19">xop</name> <operator pos:start="985:21" pos:end="985:21">=</operator> <call pos:start="985:23" pos:end="985:45"><name pos:start="985:23" pos:end="985:31">GET_FIELD</name><argument_list pos:start="985:32" pos:end="985:45">(<argument pos:start="985:33" pos:end="985:36"><expr pos:start="985:33" pos:end="985:36"><name pos:start="985:33" pos:end="985:36">insn</name></expr></argument>, <argument pos:start="985:39" pos:end="985:40"><expr pos:start="985:39" pos:end="985:40"><literal type="number" pos:start="985:39" pos:end="985:40">18</literal></expr></argument>, <argument pos:start="985:43" pos:end="985:44"><expr pos:start="985:43" pos:end="985:44"><literal type="number" pos:start="985:43" pos:end="985:44">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="987:17" pos:end="987:31"><expr pos:start="987:17" pos:end="987:30"><call pos:start="987:17" pos:end="987:30"><name pos:start="987:17" pos:end="987:26">save_state</name><argument_list pos:start="987:27" pos:end="987:30">(<argument pos:start="987:28" pos:end="987:29"><expr pos:start="987:28" pos:end="987:29"><name pos:start="987:28" pos:end="987:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="989:17" pos:end="1313:17">switch <condition pos:start="989:24" pos:end="989:28">(<expr pos:start="989:25" pos:end="989:27"><name pos:start="989:25" pos:end="989:27">xop</name></expr>)</condition> <block pos:start="989:30" pos:end="1313:17">{<block_content pos:start="991:17" pos:end="1311:38">

                <case pos:start="991:17" pos:end="991:25">case <expr pos:start="991:22" pos:end="991:24"><literal type="number" pos:start="991:22" pos:end="991:24">0x1</literal></expr>:</case> <comment type="block" pos:start="991:27" pos:end="991:37">/* fmovs */</comment>

                    <expr_stmt pos:start="993:21" pos:end="993:58"><expr pos:start="993:21" pos:end="993:57"><name pos:start="993:21" pos:end="993:31">cpu_src1_32</name> <operator pos:start="993:33" pos:end="993:33">=</operator> <call pos:start="993:35" pos:end="993:57"><name pos:start="993:35" pos:end="993:48">gen_load_fpr_F</name><argument_list pos:start="993:49" pos:end="993:57">(<argument pos:start="993:50" pos:end="993:51"><expr pos:start="993:50" pos:end="993:51"><name pos:start="993:50" pos:end="993:51">dc</name></expr></argument>, <argument pos:start="993:54" pos:end="993:56"><expr pos:start="993:54" pos:end="993:56"><name pos:start="993:54" pos:end="993:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="995:21" pos:end="995:57"><expr pos:start="995:21" pos:end="995:56"><call pos:start="995:21" pos:end="995:56"><name pos:start="995:21" pos:end="995:35">gen_store_fpr_F</name><argument_list pos:start="995:36" pos:end="995:56">(<argument pos:start="995:37" pos:end="995:38"><expr pos:start="995:37" pos:end="995:38"><name pos:start="995:37" pos:end="995:38">dc</name></expr></argument>, <argument pos:start="995:41" pos:end="995:42"><expr pos:start="995:41" pos:end="995:42"><name pos:start="995:41" pos:end="995:42">rd</name></expr></argument>, <argument pos:start="995:45" pos:end="995:55"><expr pos:start="995:45" pos:end="995:55"><name pos:start="995:45" pos:end="995:55">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="997:21" pos:end="997:26">break;</break>

                <case pos:start="999:17" pos:end="999:25">case <expr pos:start="999:22" pos:end="999:24"><literal type="number" pos:start="999:22" pos:end="999:24">0x5</literal></expr>:</case> <comment type="block" pos:start="999:27" pos:end="999:37">/* fnegs */</comment>

                    <expr_stmt pos:start="1001:21" pos:end="1001:65"><expr pos:start="1001:21" pos:end="1001:64"><call pos:start="1001:21" pos:end="1001:64"><name pos:start="1001:21" pos:end="1001:33">gen_ne_fop_FF</name><argument_list pos:start="1001:34" pos:end="1001:64">(<argument pos:start="1001:35" pos:end="1001:36"><expr pos:start="1001:35" pos:end="1001:36"><name pos:start="1001:35" pos:end="1001:36">dc</name></expr></argument>, <argument pos:start="1001:39" pos:end="1001:40"><expr pos:start="1001:39" pos:end="1001:40"><name pos:start="1001:39" pos:end="1001:40">rd</name></expr></argument>, <argument pos:start="1001:43" pos:end="1001:45"><expr pos:start="1001:43" pos:end="1001:45"><name pos:start="1001:43" pos:end="1001:45">rs2</name></expr></argument>, <argument pos:start="1001:48" pos:end="1001:63"><expr pos:start="1001:48" pos:end="1001:63"><name pos:start="1001:48" pos:end="1001:63">gen_helper_fnegs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1003:21" pos:end="1003:26">break;</break>

                <case pos:start="1005:17" pos:end="1005:25">case <expr pos:start="1005:22" pos:end="1005:24"><literal type="number" pos:start="1005:22" pos:end="1005:24">0x9</literal></expr>:</case> <comment type="block" pos:start="1005:27" pos:end="1005:37">/* fabss */</comment>

                    <expr_stmt pos:start="1007:21" pos:end="1007:65"><expr pos:start="1007:21" pos:end="1007:64"><call pos:start="1007:21" pos:end="1007:64"><name pos:start="1007:21" pos:end="1007:33">gen_ne_fop_FF</name><argument_list pos:start="1007:34" pos:end="1007:64">(<argument pos:start="1007:35" pos:end="1007:36"><expr pos:start="1007:35" pos:end="1007:36"><name pos:start="1007:35" pos:end="1007:36">dc</name></expr></argument>, <argument pos:start="1007:39" pos:end="1007:40"><expr pos:start="1007:39" pos:end="1007:40"><name pos:start="1007:39" pos:end="1007:40">rd</name></expr></argument>, <argument pos:start="1007:43" pos:end="1007:45"><expr pos:start="1007:43" pos:end="1007:45"><name pos:start="1007:43" pos:end="1007:45">rs2</name></expr></argument>, <argument pos:start="1007:48" pos:end="1007:63"><expr pos:start="1007:48" pos:end="1007:63"><name pos:start="1007:48" pos:end="1007:63">gen_helper_fabss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1009:21" pos:end="1009:26">break;</break>

                <case pos:start="1011:17" pos:end="1011:26">case <expr pos:start="1011:22" pos:end="1011:25"><literal type="number" pos:start="1011:22" pos:end="1011:25">0x29</literal></expr>:</case> <comment type="block" pos:start="1011:28" pos:end="1011:39">/* fsqrts */</comment>

                    <expr_stmt pos:start="1013:21" pos:end="1013:49"><expr pos:start="1013:21" pos:end="1013:48"><call pos:start="1013:21" pos:end="1013:48"><name pos:start="1013:21" pos:end="1013:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1013:38" pos:end="1013:48">(<argument pos:start="1013:39" pos:end="1013:40"><expr pos:start="1013:39" pos:end="1013:40"><name pos:start="1013:39" pos:end="1013:40">dc</name></expr></argument>, <argument pos:start="1013:43" pos:end="1013:47"><expr pos:start="1013:43" pos:end="1013:47"><name pos:start="1013:43" pos:end="1013:47">FSQRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1015:21" pos:end="1015:63"><expr pos:start="1015:21" pos:end="1015:62"><call pos:start="1015:21" pos:end="1015:62"><name pos:start="1015:21" pos:end="1015:30">gen_fop_FF</name><argument_list pos:start="1015:31" pos:end="1015:62">(<argument pos:start="1015:32" pos:end="1015:33"><expr pos:start="1015:32" pos:end="1015:33"><name pos:start="1015:32" pos:end="1015:33">dc</name></expr></argument>, <argument pos:start="1015:36" pos:end="1015:37"><expr pos:start="1015:36" pos:end="1015:37"><name pos:start="1015:36" pos:end="1015:37">rd</name></expr></argument>, <argument pos:start="1015:40" pos:end="1015:42"><expr pos:start="1015:40" pos:end="1015:42"><name pos:start="1015:40" pos:end="1015:42">rs2</name></expr></argument>, <argument pos:start="1015:45" pos:end="1015:61"><expr pos:start="1015:45" pos:end="1015:61"><name pos:start="1015:45" pos:end="1015:61">gen_helper_fsqrts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1017:21" pos:end="1017:26">break;</break>

                <case pos:start="1019:17" pos:end="1019:26">case <expr pos:start="1019:22" pos:end="1019:25"><literal type="number" pos:start="1019:22" pos:end="1019:25">0x2a</literal></expr>:</case> <comment type="block" pos:start="1019:28" pos:end="1019:39">/* fsqrtd */</comment>

                    <expr_stmt pos:start="1021:21" pos:end="1021:49"><expr pos:start="1021:21" pos:end="1021:48"><call pos:start="1021:21" pos:end="1021:48"><name pos:start="1021:21" pos:end="1021:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1021:38" pos:end="1021:48">(<argument pos:start="1021:39" pos:end="1021:40"><expr pos:start="1021:39" pos:end="1021:40"><name pos:start="1021:39" pos:end="1021:40">dc</name></expr></argument>, <argument pos:start="1021:43" pos:end="1021:47"><expr pos:start="1021:43" pos:end="1021:47"><name pos:start="1021:43" pos:end="1021:47">FSQRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1023:21" pos:end="1023:63"><expr pos:start="1023:21" pos:end="1023:62"><call pos:start="1023:21" pos:end="1023:62"><name pos:start="1023:21" pos:end="1023:30">gen_fop_DD</name><argument_list pos:start="1023:31" pos:end="1023:62">(<argument pos:start="1023:32" pos:end="1023:33"><expr pos:start="1023:32" pos:end="1023:33"><name pos:start="1023:32" pos:end="1023:33">dc</name></expr></argument>, <argument pos:start="1023:36" pos:end="1023:37"><expr pos:start="1023:36" pos:end="1023:37"><name pos:start="1023:36" pos:end="1023:37">rd</name></expr></argument>, <argument pos:start="1023:40" pos:end="1023:42"><expr pos:start="1023:40" pos:end="1023:42"><name pos:start="1023:40" pos:end="1023:42">rs2</name></expr></argument>, <argument pos:start="1023:45" pos:end="1023:61"><expr pos:start="1023:45" pos:end="1023:61"><name pos:start="1023:45" pos:end="1023:61">gen_helper_fsqrtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1025:21" pos:end="1025:26">break;</break>

                <case pos:start="1027:17" pos:end="1027:26">case <expr pos:start="1027:22" pos:end="1027:25"><literal type="number" pos:start="1027:22" pos:end="1027:25">0x2b</literal></expr>:</case> <comment type="block" pos:start="1027:28" pos:end="1027:39">/* fsqrtq */</comment>

                    <expr_stmt pos:start="1029:21" pos:end="1029:52"><expr pos:start="1029:21" pos:end="1029:51"><call pos:start="1029:21" pos:end="1029:51"><name pos:start="1029:21" pos:end="1029:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1029:38" pos:end="1029:51">(<argument pos:start="1029:39" pos:end="1029:40"><expr pos:start="1029:39" pos:end="1029:40"><name pos:start="1029:39" pos:end="1029:40">dc</name></expr></argument>, <argument pos:start="1029:43" pos:end="1029:50"><expr pos:start="1029:43" pos:end="1029:50"><name pos:start="1029:43" pos:end="1029:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1031:21" pos:end="1031:63"><expr pos:start="1031:21" pos:end="1031:62"><call pos:start="1031:21" pos:end="1031:62"><name pos:start="1031:21" pos:end="1031:30">gen_fop_QQ</name><argument_list pos:start="1031:31" pos:end="1031:62">(<argument pos:start="1031:32" pos:end="1031:33"><expr pos:start="1031:32" pos:end="1031:33"><name pos:start="1031:32" pos:end="1031:33">dc</name></expr></argument>, <argument pos:start="1031:36" pos:end="1031:37"><expr pos:start="1031:36" pos:end="1031:37"><name pos:start="1031:36" pos:end="1031:37">rd</name></expr></argument>, <argument pos:start="1031:40" pos:end="1031:42"><expr pos:start="1031:40" pos:end="1031:42"><name pos:start="1031:40" pos:end="1031:42">rs2</name></expr></argument>, <argument pos:start="1031:45" pos:end="1031:61"><expr pos:start="1031:45" pos:end="1031:61"><name pos:start="1031:45" pos:end="1031:61">gen_helper_fsqrtq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1033:21" pos:end="1033:26">break;</break>

                <case pos:start="1035:17" pos:end="1035:26">case <expr pos:start="1035:22" pos:end="1035:25"><literal type="number" pos:start="1035:22" pos:end="1035:25">0x41</literal></expr>:</case> <comment type="block" pos:start="1035:28" pos:end="1035:38">/* fadds */</comment>

                    <expr_stmt pos:start="1037:21" pos:end="1037:68"><expr pos:start="1037:21" pos:end="1037:67"><call pos:start="1037:21" pos:end="1037:67"><name pos:start="1037:21" pos:end="1037:31">gen_fop_FFF</name><argument_list pos:start="1037:32" pos:end="1037:67">(<argument pos:start="1037:33" pos:end="1037:34"><expr pos:start="1037:33" pos:end="1037:34"><name pos:start="1037:33" pos:end="1037:34">dc</name></expr></argument>, <argument pos:start="1037:37" pos:end="1037:38"><expr pos:start="1037:37" pos:end="1037:38"><name pos:start="1037:37" pos:end="1037:38">rd</name></expr></argument>, <argument pos:start="1037:41" pos:end="1037:43"><expr pos:start="1037:41" pos:end="1037:43"><name pos:start="1037:41" pos:end="1037:43">rs1</name></expr></argument>, <argument pos:start="1037:46" pos:end="1037:48"><expr pos:start="1037:46" pos:end="1037:48"><name pos:start="1037:46" pos:end="1037:48">rs2</name></expr></argument>, <argument pos:start="1037:51" pos:end="1037:66"><expr pos:start="1037:51" pos:end="1037:66"><name pos:start="1037:51" pos:end="1037:66">gen_helper_fadds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1039:21" pos:end="1039:26">break;</break>

                <case pos:start="1041:17" pos:end="1041:26">case <expr pos:start="1041:22" pos:end="1041:25"><literal type="number" pos:start="1041:22" pos:end="1041:25">0x42</literal></expr>:</case> <comment type="block" pos:start="1041:28" pos:end="1041:38">/* faddd */</comment>

                    <expr_stmt pos:start="1043:21" pos:end="1043:68"><expr pos:start="1043:21" pos:end="1043:67"><call pos:start="1043:21" pos:end="1043:67"><name pos:start="1043:21" pos:end="1043:31">gen_fop_DDD</name><argument_list pos:start="1043:32" pos:end="1043:67">(<argument pos:start="1043:33" pos:end="1043:34"><expr pos:start="1043:33" pos:end="1043:34"><name pos:start="1043:33" pos:end="1043:34">dc</name></expr></argument>, <argument pos:start="1043:37" pos:end="1043:38"><expr pos:start="1043:37" pos:end="1043:38"><name pos:start="1043:37" pos:end="1043:38">rd</name></expr></argument>, <argument pos:start="1043:41" pos:end="1043:43"><expr pos:start="1043:41" pos:end="1043:43"><name pos:start="1043:41" pos:end="1043:43">rs1</name></expr></argument>, <argument pos:start="1043:46" pos:end="1043:48"><expr pos:start="1043:46" pos:end="1043:48"><name pos:start="1043:46" pos:end="1043:48">rs2</name></expr></argument>, <argument pos:start="1043:51" pos:end="1043:66"><expr pos:start="1043:51" pos:end="1043:66"><name pos:start="1043:51" pos:end="1043:66">gen_helper_faddd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1045:21" pos:end="1045:26">break;</break>

                <case pos:start="1047:17" pos:end="1047:26">case <expr pos:start="1047:22" pos:end="1047:25"><literal type="number" pos:start="1047:22" pos:end="1047:25">0x43</literal></expr>:</case> <comment type="block" pos:start="1047:28" pos:end="1047:38">/* faddq */</comment>

                    <expr_stmt pos:start="1049:21" pos:end="1049:52"><expr pos:start="1049:21" pos:end="1049:51"><call pos:start="1049:21" pos:end="1049:51"><name pos:start="1049:21" pos:end="1049:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1049:38" pos:end="1049:51">(<argument pos:start="1049:39" pos:end="1049:40"><expr pos:start="1049:39" pos:end="1049:40"><name pos:start="1049:39" pos:end="1049:40">dc</name></expr></argument>, <argument pos:start="1049:43" pos:end="1049:50"><expr pos:start="1049:43" pos:end="1049:50"><name pos:start="1049:43" pos:end="1049:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1051:21" pos:end="1051:68"><expr pos:start="1051:21" pos:end="1051:67"><call pos:start="1051:21" pos:end="1051:67"><name pos:start="1051:21" pos:end="1051:31">gen_fop_QQQ</name><argument_list pos:start="1051:32" pos:end="1051:67">(<argument pos:start="1051:33" pos:end="1051:34"><expr pos:start="1051:33" pos:end="1051:34"><name pos:start="1051:33" pos:end="1051:34">dc</name></expr></argument>, <argument pos:start="1051:37" pos:end="1051:38"><expr pos:start="1051:37" pos:end="1051:38"><name pos:start="1051:37" pos:end="1051:38">rd</name></expr></argument>, <argument pos:start="1051:41" pos:end="1051:43"><expr pos:start="1051:41" pos:end="1051:43"><name pos:start="1051:41" pos:end="1051:43">rs1</name></expr></argument>, <argument pos:start="1051:46" pos:end="1051:48"><expr pos:start="1051:46" pos:end="1051:48"><name pos:start="1051:46" pos:end="1051:48">rs2</name></expr></argument>, <argument pos:start="1051:51" pos:end="1051:66"><expr pos:start="1051:51" pos:end="1051:66"><name pos:start="1051:51" pos:end="1051:66">gen_helper_faddq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1053:21" pos:end="1053:26">break;</break>

                <case pos:start="1055:17" pos:end="1055:26">case <expr pos:start="1055:22" pos:end="1055:25"><literal type="number" pos:start="1055:22" pos:end="1055:25">0x45</literal></expr>:</case> <comment type="block" pos:start="1055:28" pos:end="1055:38">/* fsubs */</comment>

                    <expr_stmt pos:start="1057:21" pos:end="1057:68"><expr pos:start="1057:21" pos:end="1057:67"><call pos:start="1057:21" pos:end="1057:67"><name pos:start="1057:21" pos:end="1057:31">gen_fop_FFF</name><argument_list pos:start="1057:32" pos:end="1057:67">(<argument pos:start="1057:33" pos:end="1057:34"><expr pos:start="1057:33" pos:end="1057:34"><name pos:start="1057:33" pos:end="1057:34">dc</name></expr></argument>, <argument pos:start="1057:37" pos:end="1057:38"><expr pos:start="1057:37" pos:end="1057:38"><name pos:start="1057:37" pos:end="1057:38">rd</name></expr></argument>, <argument pos:start="1057:41" pos:end="1057:43"><expr pos:start="1057:41" pos:end="1057:43"><name pos:start="1057:41" pos:end="1057:43">rs1</name></expr></argument>, <argument pos:start="1057:46" pos:end="1057:48"><expr pos:start="1057:46" pos:end="1057:48"><name pos:start="1057:46" pos:end="1057:48">rs2</name></expr></argument>, <argument pos:start="1057:51" pos:end="1057:66"><expr pos:start="1057:51" pos:end="1057:66"><name pos:start="1057:51" pos:end="1057:66">gen_helper_fsubs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1059:21" pos:end="1059:26">break;</break>

                <case pos:start="1061:17" pos:end="1061:26">case <expr pos:start="1061:22" pos:end="1061:25"><literal type="number" pos:start="1061:22" pos:end="1061:25">0x46</literal></expr>:</case> <comment type="block" pos:start="1061:28" pos:end="1061:38">/* fsubd */</comment>

                    <expr_stmt pos:start="1063:21" pos:end="1063:68"><expr pos:start="1063:21" pos:end="1063:67"><call pos:start="1063:21" pos:end="1063:67"><name pos:start="1063:21" pos:end="1063:31">gen_fop_DDD</name><argument_list pos:start="1063:32" pos:end="1063:67">(<argument pos:start="1063:33" pos:end="1063:34"><expr pos:start="1063:33" pos:end="1063:34"><name pos:start="1063:33" pos:end="1063:34">dc</name></expr></argument>, <argument pos:start="1063:37" pos:end="1063:38"><expr pos:start="1063:37" pos:end="1063:38"><name pos:start="1063:37" pos:end="1063:38">rd</name></expr></argument>, <argument pos:start="1063:41" pos:end="1063:43"><expr pos:start="1063:41" pos:end="1063:43"><name pos:start="1063:41" pos:end="1063:43">rs1</name></expr></argument>, <argument pos:start="1063:46" pos:end="1063:48"><expr pos:start="1063:46" pos:end="1063:48"><name pos:start="1063:46" pos:end="1063:48">rs2</name></expr></argument>, <argument pos:start="1063:51" pos:end="1063:66"><expr pos:start="1063:51" pos:end="1063:66"><name pos:start="1063:51" pos:end="1063:66">gen_helper_fsubd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1065:21" pos:end="1065:26">break;</break>

                <case pos:start="1067:17" pos:end="1067:26">case <expr pos:start="1067:22" pos:end="1067:25"><literal type="number" pos:start="1067:22" pos:end="1067:25">0x47</literal></expr>:</case> <comment type="block" pos:start="1067:28" pos:end="1067:38">/* fsubq */</comment>

                    <expr_stmt pos:start="1069:21" pos:end="1069:52"><expr pos:start="1069:21" pos:end="1069:51"><call pos:start="1069:21" pos:end="1069:51"><name pos:start="1069:21" pos:end="1069:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1069:38" pos:end="1069:51">(<argument pos:start="1069:39" pos:end="1069:40"><expr pos:start="1069:39" pos:end="1069:40"><name pos:start="1069:39" pos:end="1069:40">dc</name></expr></argument>, <argument pos:start="1069:43" pos:end="1069:50"><expr pos:start="1069:43" pos:end="1069:50"><name pos:start="1069:43" pos:end="1069:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1071:21" pos:end="1071:68"><expr pos:start="1071:21" pos:end="1071:67"><call pos:start="1071:21" pos:end="1071:67"><name pos:start="1071:21" pos:end="1071:31">gen_fop_QQQ</name><argument_list pos:start="1071:32" pos:end="1071:67">(<argument pos:start="1071:33" pos:end="1071:34"><expr pos:start="1071:33" pos:end="1071:34"><name pos:start="1071:33" pos:end="1071:34">dc</name></expr></argument>, <argument pos:start="1071:37" pos:end="1071:38"><expr pos:start="1071:37" pos:end="1071:38"><name pos:start="1071:37" pos:end="1071:38">rd</name></expr></argument>, <argument pos:start="1071:41" pos:end="1071:43"><expr pos:start="1071:41" pos:end="1071:43"><name pos:start="1071:41" pos:end="1071:43">rs1</name></expr></argument>, <argument pos:start="1071:46" pos:end="1071:48"><expr pos:start="1071:46" pos:end="1071:48"><name pos:start="1071:46" pos:end="1071:48">rs2</name></expr></argument>, <argument pos:start="1071:51" pos:end="1071:66"><expr pos:start="1071:51" pos:end="1071:66"><name pos:start="1071:51" pos:end="1071:66">gen_helper_fsubq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1073:21" pos:end="1073:26">break;</break>

                <case pos:start="1075:17" pos:end="1075:26">case <expr pos:start="1075:22" pos:end="1075:25"><literal type="number" pos:start="1075:22" pos:end="1075:25">0x49</literal></expr>:</case> <comment type="block" pos:start="1075:28" pos:end="1075:38">/* fmuls */</comment>

                    <expr_stmt pos:start="1077:21" pos:end="1077:48"><expr pos:start="1077:21" pos:end="1077:47"><call pos:start="1077:21" pos:end="1077:47"><name pos:start="1077:21" pos:end="1077:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1077:38" pos:end="1077:47">(<argument pos:start="1077:39" pos:end="1077:40"><expr pos:start="1077:39" pos:end="1077:40"><name pos:start="1077:39" pos:end="1077:40">dc</name></expr></argument>, <argument pos:start="1077:43" pos:end="1077:46"><expr pos:start="1077:43" pos:end="1077:46"><name pos:start="1077:43" pos:end="1077:46">FMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1079:21" pos:end="1079:68"><expr pos:start="1079:21" pos:end="1079:67"><call pos:start="1079:21" pos:end="1079:67"><name pos:start="1079:21" pos:end="1079:31">gen_fop_FFF</name><argument_list pos:start="1079:32" pos:end="1079:67">(<argument pos:start="1079:33" pos:end="1079:34"><expr pos:start="1079:33" pos:end="1079:34"><name pos:start="1079:33" pos:end="1079:34">dc</name></expr></argument>, <argument pos:start="1079:37" pos:end="1079:38"><expr pos:start="1079:37" pos:end="1079:38"><name pos:start="1079:37" pos:end="1079:38">rd</name></expr></argument>, <argument pos:start="1079:41" pos:end="1079:43"><expr pos:start="1079:41" pos:end="1079:43"><name pos:start="1079:41" pos:end="1079:43">rs1</name></expr></argument>, <argument pos:start="1079:46" pos:end="1079:48"><expr pos:start="1079:46" pos:end="1079:48"><name pos:start="1079:46" pos:end="1079:48">rs2</name></expr></argument>, <argument pos:start="1079:51" pos:end="1079:66"><expr pos:start="1079:51" pos:end="1079:66"><name pos:start="1079:51" pos:end="1079:66">gen_helper_fmuls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1081:21" pos:end="1081:26">break;</break>

                <case pos:start="1083:17" pos:end="1083:26">case <expr pos:start="1083:22" pos:end="1083:25"><literal type="number" pos:start="1083:22" pos:end="1083:25">0x4a</literal></expr>:</case> <comment type="block" pos:start="1083:28" pos:end="1083:38">/* fmuld */</comment>

                    <expr_stmt pos:start="1085:21" pos:end="1085:48"><expr pos:start="1085:21" pos:end="1085:47"><call pos:start="1085:21" pos:end="1085:47"><name pos:start="1085:21" pos:end="1085:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1085:38" pos:end="1085:47">(<argument pos:start="1085:39" pos:end="1085:40"><expr pos:start="1085:39" pos:end="1085:40"><name pos:start="1085:39" pos:end="1085:40">dc</name></expr></argument>, <argument pos:start="1085:43" pos:end="1085:46"><expr pos:start="1085:43" pos:end="1085:46"><name pos:start="1085:43" pos:end="1085:46">FMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1087:21" pos:end="1087:68"><expr pos:start="1087:21" pos:end="1087:67"><call pos:start="1087:21" pos:end="1087:67"><name pos:start="1087:21" pos:end="1087:31">gen_fop_DDD</name><argument_list pos:start="1087:32" pos:end="1087:67">(<argument pos:start="1087:33" pos:end="1087:34"><expr pos:start="1087:33" pos:end="1087:34"><name pos:start="1087:33" pos:end="1087:34">dc</name></expr></argument>, <argument pos:start="1087:37" pos:end="1087:38"><expr pos:start="1087:37" pos:end="1087:38"><name pos:start="1087:37" pos:end="1087:38">rd</name></expr></argument>, <argument pos:start="1087:41" pos:end="1087:43"><expr pos:start="1087:41" pos:end="1087:43"><name pos:start="1087:41" pos:end="1087:43">rs1</name></expr></argument>, <argument pos:start="1087:46" pos:end="1087:48"><expr pos:start="1087:46" pos:end="1087:48"><name pos:start="1087:46" pos:end="1087:48">rs2</name></expr></argument>, <argument pos:start="1087:51" pos:end="1087:66"><expr pos:start="1087:51" pos:end="1087:66"><name pos:start="1087:51" pos:end="1087:66">gen_helper_fmuld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1089:21" pos:end="1089:26">break;</break>

                <case pos:start="1091:17" pos:end="1091:26">case <expr pos:start="1091:22" pos:end="1091:25"><literal type="number" pos:start="1091:22" pos:end="1091:25">0x4b</literal></expr>:</case> <comment type="block" pos:start="1091:28" pos:end="1091:38">/* fmulq */</comment>

                    <expr_stmt pos:start="1093:21" pos:end="1093:52"><expr pos:start="1093:21" pos:end="1093:51"><call pos:start="1093:21" pos:end="1093:51"><name pos:start="1093:21" pos:end="1093:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1093:38" pos:end="1093:51">(<argument pos:start="1093:39" pos:end="1093:40"><expr pos:start="1093:39" pos:end="1093:40"><name pos:start="1093:39" pos:end="1093:40">dc</name></expr></argument>, <argument pos:start="1093:43" pos:end="1093:50"><expr pos:start="1093:43" pos:end="1093:50"><name pos:start="1093:43" pos:end="1093:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1095:21" pos:end="1095:48"><expr pos:start="1095:21" pos:end="1095:47"><call pos:start="1095:21" pos:end="1095:47"><name pos:start="1095:21" pos:end="1095:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1095:38" pos:end="1095:47">(<argument pos:start="1095:39" pos:end="1095:40"><expr pos:start="1095:39" pos:end="1095:40"><name pos:start="1095:39" pos:end="1095:40">dc</name></expr></argument>, <argument pos:start="1095:43" pos:end="1095:46"><expr pos:start="1095:43" pos:end="1095:46"><name pos:start="1095:43" pos:end="1095:46">FMUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1097:21" pos:end="1097:68"><expr pos:start="1097:21" pos:end="1097:67"><call pos:start="1097:21" pos:end="1097:67"><name pos:start="1097:21" pos:end="1097:31">gen_fop_QQQ</name><argument_list pos:start="1097:32" pos:end="1097:67">(<argument pos:start="1097:33" pos:end="1097:34"><expr pos:start="1097:33" pos:end="1097:34"><name pos:start="1097:33" pos:end="1097:34">dc</name></expr></argument>, <argument pos:start="1097:37" pos:end="1097:38"><expr pos:start="1097:37" pos:end="1097:38"><name pos:start="1097:37" pos:end="1097:38">rd</name></expr></argument>, <argument pos:start="1097:41" pos:end="1097:43"><expr pos:start="1097:41" pos:end="1097:43"><name pos:start="1097:41" pos:end="1097:43">rs1</name></expr></argument>, <argument pos:start="1097:46" pos:end="1097:48"><expr pos:start="1097:46" pos:end="1097:48"><name pos:start="1097:46" pos:end="1097:48">rs2</name></expr></argument>, <argument pos:start="1097:51" pos:end="1097:66"><expr pos:start="1097:51" pos:end="1097:66"><name pos:start="1097:51" pos:end="1097:66">gen_helper_fmulq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1099:21" pos:end="1099:26">break;</break>

                <case pos:start="1101:17" pos:end="1101:26">case <expr pos:start="1101:22" pos:end="1101:25"><literal type="number" pos:start="1101:22" pos:end="1101:25">0x4d</literal></expr>:</case> <comment type="block" pos:start="1101:28" pos:end="1101:38">/* fdivs */</comment>

                    <expr_stmt pos:start="1103:21" pos:end="1103:68"><expr pos:start="1103:21" pos:end="1103:67"><call pos:start="1103:21" pos:end="1103:67"><name pos:start="1103:21" pos:end="1103:31">gen_fop_FFF</name><argument_list pos:start="1103:32" pos:end="1103:67">(<argument pos:start="1103:33" pos:end="1103:34"><expr pos:start="1103:33" pos:end="1103:34"><name pos:start="1103:33" pos:end="1103:34">dc</name></expr></argument>, <argument pos:start="1103:37" pos:end="1103:38"><expr pos:start="1103:37" pos:end="1103:38"><name pos:start="1103:37" pos:end="1103:38">rd</name></expr></argument>, <argument pos:start="1103:41" pos:end="1103:43"><expr pos:start="1103:41" pos:end="1103:43"><name pos:start="1103:41" pos:end="1103:43">rs1</name></expr></argument>, <argument pos:start="1103:46" pos:end="1103:48"><expr pos:start="1103:46" pos:end="1103:48"><name pos:start="1103:46" pos:end="1103:48">rs2</name></expr></argument>, <argument pos:start="1103:51" pos:end="1103:66"><expr pos:start="1103:51" pos:end="1103:66"><name pos:start="1103:51" pos:end="1103:66">gen_helper_fdivs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1105:21" pos:end="1105:26">break;</break>

                <case pos:start="1107:17" pos:end="1107:26">case <expr pos:start="1107:22" pos:end="1107:25"><literal type="number" pos:start="1107:22" pos:end="1107:25">0x4e</literal></expr>:</case> <comment type="block" pos:start="1107:28" pos:end="1107:38">/* fdivd */</comment>

                    <expr_stmt pos:start="1109:21" pos:end="1109:68"><expr pos:start="1109:21" pos:end="1109:67"><call pos:start="1109:21" pos:end="1109:67"><name pos:start="1109:21" pos:end="1109:31">gen_fop_DDD</name><argument_list pos:start="1109:32" pos:end="1109:67">(<argument pos:start="1109:33" pos:end="1109:34"><expr pos:start="1109:33" pos:end="1109:34"><name pos:start="1109:33" pos:end="1109:34">dc</name></expr></argument>, <argument pos:start="1109:37" pos:end="1109:38"><expr pos:start="1109:37" pos:end="1109:38"><name pos:start="1109:37" pos:end="1109:38">rd</name></expr></argument>, <argument pos:start="1109:41" pos:end="1109:43"><expr pos:start="1109:41" pos:end="1109:43"><name pos:start="1109:41" pos:end="1109:43">rs1</name></expr></argument>, <argument pos:start="1109:46" pos:end="1109:48"><expr pos:start="1109:46" pos:end="1109:48"><name pos:start="1109:46" pos:end="1109:48">rs2</name></expr></argument>, <argument pos:start="1109:51" pos:end="1109:66"><expr pos:start="1109:51" pos:end="1109:66"><name pos:start="1109:51" pos:end="1109:66">gen_helper_fdivd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1111:21" pos:end="1111:26">break;</break>

                <case pos:start="1113:17" pos:end="1113:26">case <expr pos:start="1113:22" pos:end="1113:25"><literal type="number" pos:start="1113:22" pos:end="1113:25">0x4f</literal></expr>:</case> <comment type="block" pos:start="1113:28" pos:end="1113:38">/* fdivq */</comment>

                    <expr_stmt pos:start="1115:21" pos:end="1115:52"><expr pos:start="1115:21" pos:end="1115:51"><call pos:start="1115:21" pos:end="1115:51"><name pos:start="1115:21" pos:end="1115:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1115:38" pos:end="1115:51">(<argument pos:start="1115:39" pos:end="1115:40"><expr pos:start="1115:39" pos:end="1115:40"><name pos:start="1115:39" pos:end="1115:40">dc</name></expr></argument>, <argument pos:start="1115:43" pos:end="1115:50"><expr pos:start="1115:43" pos:end="1115:50"><name pos:start="1115:43" pos:end="1115:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1117:21" pos:end="1117:68"><expr pos:start="1117:21" pos:end="1117:67"><call pos:start="1117:21" pos:end="1117:67"><name pos:start="1117:21" pos:end="1117:31">gen_fop_QQQ</name><argument_list pos:start="1117:32" pos:end="1117:67">(<argument pos:start="1117:33" pos:end="1117:34"><expr pos:start="1117:33" pos:end="1117:34"><name pos:start="1117:33" pos:end="1117:34">dc</name></expr></argument>, <argument pos:start="1117:37" pos:end="1117:38"><expr pos:start="1117:37" pos:end="1117:38"><name pos:start="1117:37" pos:end="1117:38">rd</name></expr></argument>, <argument pos:start="1117:41" pos:end="1117:43"><expr pos:start="1117:41" pos:end="1117:43"><name pos:start="1117:41" pos:end="1117:43">rs1</name></expr></argument>, <argument pos:start="1117:46" pos:end="1117:48"><expr pos:start="1117:46" pos:end="1117:48"><name pos:start="1117:46" pos:end="1117:48">rs2</name></expr></argument>, <argument pos:start="1117:51" pos:end="1117:66"><expr pos:start="1117:51" pos:end="1117:66"><name pos:start="1117:51" pos:end="1117:66">gen_helper_fdivq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1119:21" pos:end="1119:26">break;</break>

                <case pos:start="1121:17" pos:end="1121:26">case <expr pos:start="1121:22" pos:end="1121:25"><literal type="number" pos:start="1121:22" pos:end="1121:25">0x69</literal></expr>:</case> <comment type="block" pos:start="1121:28" pos:end="1121:39">/* fsmuld */</comment>

                    <expr_stmt pos:start="1123:21" pos:end="1123:50"><expr pos:start="1123:21" pos:end="1123:49"><call pos:start="1123:21" pos:end="1123:49"><name pos:start="1123:21" pos:end="1123:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1123:38" pos:end="1123:49">(<argument pos:start="1123:39" pos:end="1123:40"><expr pos:start="1123:39" pos:end="1123:40"><name pos:start="1123:39" pos:end="1123:40">dc</name></expr></argument>, <argument pos:start="1123:43" pos:end="1123:48"><expr pos:start="1123:43" pos:end="1123:48"><name pos:start="1123:43" pos:end="1123:48">FSMULD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1125:21" pos:end="1125:69"><expr pos:start="1125:21" pos:end="1125:68"><call pos:start="1125:21" pos:end="1125:68"><name pos:start="1125:21" pos:end="1125:31">gen_fop_DFF</name><argument_list pos:start="1125:32" pos:end="1125:68">(<argument pos:start="1125:33" pos:end="1125:34"><expr pos:start="1125:33" pos:end="1125:34"><name pos:start="1125:33" pos:end="1125:34">dc</name></expr></argument>, <argument pos:start="1125:37" pos:end="1125:38"><expr pos:start="1125:37" pos:end="1125:38"><name pos:start="1125:37" pos:end="1125:38">rd</name></expr></argument>, <argument pos:start="1125:41" pos:end="1125:43"><expr pos:start="1125:41" pos:end="1125:43"><name pos:start="1125:41" pos:end="1125:43">rs1</name></expr></argument>, <argument pos:start="1125:46" pos:end="1125:48"><expr pos:start="1125:46" pos:end="1125:48"><name pos:start="1125:46" pos:end="1125:48">rs2</name></expr></argument>, <argument pos:start="1125:51" pos:end="1125:67"><expr pos:start="1125:51" pos:end="1125:67"><name pos:start="1125:51" pos:end="1125:67">gen_helper_fsmuld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1127:21" pos:end="1127:26">break;</break>

                <case pos:start="1129:17" pos:end="1129:26">case <expr pos:start="1129:22" pos:end="1129:25"><literal type="number" pos:start="1129:22" pos:end="1129:25">0x6e</literal></expr>:</case> <comment type="block" pos:start="1129:28" pos:end="1129:39">/* fdmulq */</comment>

                    <expr_stmt pos:start="1131:21" pos:end="1131:52"><expr pos:start="1131:21" pos:end="1131:51"><call pos:start="1131:21" pos:end="1131:51"><name pos:start="1131:21" pos:end="1131:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1131:38" pos:end="1131:51">(<argument pos:start="1131:39" pos:end="1131:40"><expr pos:start="1131:39" pos:end="1131:40"><name pos:start="1131:39" pos:end="1131:40">dc</name></expr></argument>, <argument pos:start="1131:43" pos:end="1131:50"><expr pos:start="1131:43" pos:end="1131:50"><name pos:start="1131:43" pos:end="1131:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1133:21" pos:end="1133:69"><expr pos:start="1133:21" pos:end="1133:68"><call pos:start="1133:21" pos:end="1133:68"><name pos:start="1133:21" pos:end="1133:31">gen_fop_QDD</name><argument_list pos:start="1133:32" pos:end="1133:68">(<argument pos:start="1133:33" pos:end="1133:34"><expr pos:start="1133:33" pos:end="1133:34"><name pos:start="1133:33" pos:end="1133:34">dc</name></expr></argument>, <argument pos:start="1133:37" pos:end="1133:38"><expr pos:start="1133:37" pos:end="1133:38"><name pos:start="1133:37" pos:end="1133:38">rd</name></expr></argument>, <argument pos:start="1133:41" pos:end="1133:43"><expr pos:start="1133:41" pos:end="1133:43"><name pos:start="1133:41" pos:end="1133:43">rs1</name></expr></argument>, <argument pos:start="1133:46" pos:end="1133:48"><expr pos:start="1133:46" pos:end="1133:48"><name pos:start="1133:46" pos:end="1133:48">rs2</name></expr></argument>, <argument pos:start="1133:51" pos:end="1133:67"><expr pos:start="1133:51" pos:end="1133:67"><name pos:start="1133:51" pos:end="1133:67">gen_helper_fdmulq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1135:21" pos:end="1135:26">break;</break>

                <case pos:start="1137:17" pos:end="1137:26">case <expr pos:start="1137:22" pos:end="1137:25"><literal type="number" pos:start="1137:22" pos:end="1137:25">0xc4</literal></expr>:</case> <comment type="block" pos:start="1137:28" pos:end="1137:38">/* fitos */</comment>

                    <expr_stmt pos:start="1139:21" pos:end="1139:62"><expr pos:start="1139:21" pos:end="1139:61"><call pos:start="1139:21" pos:end="1139:61"><name pos:start="1139:21" pos:end="1139:30">gen_fop_FF</name><argument_list pos:start="1139:31" pos:end="1139:61">(<argument pos:start="1139:32" pos:end="1139:33"><expr pos:start="1139:32" pos:end="1139:33"><name pos:start="1139:32" pos:end="1139:33">dc</name></expr></argument>, <argument pos:start="1139:36" pos:end="1139:37"><expr pos:start="1139:36" pos:end="1139:37"><name pos:start="1139:36" pos:end="1139:37">rd</name></expr></argument>, <argument pos:start="1139:40" pos:end="1139:42"><expr pos:start="1139:40" pos:end="1139:42"><name pos:start="1139:40" pos:end="1139:42">rs2</name></expr></argument>, <argument pos:start="1139:45" pos:end="1139:60"><expr pos:start="1139:45" pos:end="1139:60"><name pos:start="1139:45" pos:end="1139:60">gen_helper_fitos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1141:21" pos:end="1141:26">break;</break>

                <case pos:start="1143:17" pos:end="1143:26">case <expr pos:start="1143:22" pos:end="1143:25"><literal type="number" pos:start="1143:22" pos:end="1143:25">0xc6</literal></expr>:</case> <comment type="block" pos:start="1143:28" pos:end="1143:38">/* fdtos */</comment>

                    <expr_stmt pos:start="1145:21" pos:end="1145:62"><expr pos:start="1145:21" pos:end="1145:61"><call pos:start="1145:21" pos:end="1145:61"><name pos:start="1145:21" pos:end="1145:30">gen_fop_FD</name><argument_list pos:start="1145:31" pos:end="1145:61">(<argument pos:start="1145:32" pos:end="1145:33"><expr pos:start="1145:32" pos:end="1145:33"><name pos:start="1145:32" pos:end="1145:33">dc</name></expr></argument>, <argument pos:start="1145:36" pos:end="1145:37"><expr pos:start="1145:36" pos:end="1145:37"><name pos:start="1145:36" pos:end="1145:37">rd</name></expr></argument>, <argument pos:start="1145:40" pos:end="1145:42"><expr pos:start="1145:40" pos:end="1145:42"><name pos:start="1145:40" pos:end="1145:42">rs2</name></expr></argument>, <argument pos:start="1145:45" pos:end="1145:60"><expr pos:start="1145:45" pos:end="1145:60"><name pos:start="1145:45" pos:end="1145:60">gen_helper_fdtos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1147:21" pos:end="1147:26">break;</break>

                <case pos:start="1149:17" pos:end="1149:26">case <expr pos:start="1149:22" pos:end="1149:25"><literal type="number" pos:start="1149:22" pos:end="1149:25">0xc7</literal></expr>:</case> <comment type="block" pos:start="1149:28" pos:end="1149:38">/* fqtos */</comment>

                    <expr_stmt pos:start="1151:21" pos:end="1151:52"><expr pos:start="1151:21" pos:end="1151:51"><call pos:start="1151:21" pos:end="1151:51"><name pos:start="1151:21" pos:end="1151:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1151:38" pos:end="1151:51">(<argument pos:start="1151:39" pos:end="1151:40"><expr pos:start="1151:39" pos:end="1151:40"><name pos:start="1151:39" pos:end="1151:40">dc</name></expr></argument>, <argument pos:start="1151:43" pos:end="1151:50"><expr pos:start="1151:43" pos:end="1151:50"><name pos:start="1151:43" pos:end="1151:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1153:21" pos:end="1153:62"><expr pos:start="1153:21" pos:end="1153:61"><call pos:start="1153:21" pos:end="1153:61"><name pos:start="1153:21" pos:end="1153:30">gen_fop_FQ</name><argument_list pos:start="1153:31" pos:end="1153:61">(<argument pos:start="1153:32" pos:end="1153:33"><expr pos:start="1153:32" pos:end="1153:33"><name pos:start="1153:32" pos:end="1153:33">dc</name></expr></argument>, <argument pos:start="1153:36" pos:end="1153:37"><expr pos:start="1153:36" pos:end="1153:37"><name pos:start="1153:36" pos:end="1153:37">rd</name></expr></argument>, <argument pos:start="1153:40" pos:end="1153:42"><expr pos:start="1153:40" pos:end="1153:42"><name pos:start="1153:40" pos:end="1153:42">rs2</name></expr></argument>, <argument pos:start="1153:45" pos:end="1153:60"><expr pos:start="1153:45" pos:end="1153:60"><name pos:start="1153:45" pos:end="1153:60">gen_helper_fqtos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1155:21" pos:end="1155:26">break;</break>

                <case pos:start="1157:17" pos:end="1157:26">case <expr pos:start="1157:22" pos:end="1157:25"><literal type="number" pos:start="1157:22" pos:end="1157:25">0xc8</literal></expr>:</case> <comment type="block" pos:start="1157:28" pos:end="1157:38">/* fitod */</comment>

                    <expr_stmt pos:start="1159:21" pos:end="1159:65"><expr pos:start="1159:21" pos:end="1159:64"><call pos:start="1159:21" pos:end="1159:64"><name pos:start="1159:21" pos:end="1159:33">gen_ne_fop_DF</name><argument_list pos:start="1159:34" pos:end="1159:64">(<argument pos:start="1159:35" pos:end="1159:36"><expr pos:start="1159:35" pos:end="1159:36"><name pos:start="1159:35" pos:end="1159:36">dc</name></expr></argument>, <argument pos:start="1159:39" pos:end="1159:40"><expr pos:start="1159:39" pos:end="1159:40"><name pos:start="1159:39" pos:end="1159:40">rd</name></expr></argument>, <argument pos:start="1159:43" pos:end="1159:45"><expr pos:start="1159:43" pos:end="1159:45"><name pos:start="1159:43" pos:end="1159:45">rs2</name></expr></argument>, <argument pos:start="1159:48" pos:end="1159:63"><expr pos:start="1159:48" pos:end="1159:63"><name pos:start="1159:48" pos:end="1159:63">gen_helper_fitod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1161:21" pos:end="1161:26">break;</break>

                <case pos:start="1163:17" pos:end="1163:26">case <expr pos:start="1163:22" pos:end="1163:25"><literal type="number" pos:start="1163:22" pos:end="1163:25">0xc9</literal></expr>:</case> <comment type="block" pos:start="1163:28" pos:end="1163:38">/* fstod */</comment>

                    <expr_stmt pos:start="1165:21" pos:end="1165:65"><expr pos:start="1165:21" pos:end="1165:64"><call pos:start="1165:21" pos:end="1165:64"><name pos:start="1165:21" pos:end="1165:33">gen_ne_fop_DF</name><argument_list pos:start="1165:34" pos:end="1165:64">(<argument pos:start="1165:35" pos:end="1165:36"><expr pos:start="1165:35" pos:end="1165:36"><name pos:start="1165:35" pos:end="1165:36">dc</name></expr></argument>, <argument pos:start="1165:39" pos:end="1165:40"><expr pos:start="1165:39" pos:end="1165:40"><name pos:start="1165:39" pos:end="1165:40">rd</name></expr></argument>, <argument pos:start="1165:43" pos:end="1165:45"><expr pos:start="1165:43" pos:end="1165:45"><name pos:start="1165:43" pos:end="1165:45">rs2</name></expr></argument>, <argument pos:start="1165:48" pos:end="1165:63"><expr pos:start="1165:48" pos:end="1165:63"><name pos:start="1165:48" pos:end="1165:63">gen_helper_fstod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1167:21" pos:end="1167:26">break;</break>

                <case pos:start="1169:17" pos:end="1169:26">case <expr pos:start="1169:22" pos:end="1169:25"><literal type="number" pos:start="1169:22" pos:end="1169:25">0xcb</literal></expr>:</case> <comment type="block" pos:start="1169:28" pos:end="1169:38">/* fqtod */</comment>

                    <expr_stmt pos:start="1171:21" pos:end="1171:52"><expr pos:start="1171:21" pos:end="1171:51"><call pos:start="1171:21" pos:end="1171:51"><name pos:start="1171:21" pos:end="1171:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1171:38" pos:end="1171:51">(<argument pos:start="1171:39" pos:end="1171:40"><expr pos:start="1171:39" pos:end="1171:40"><name pos:start="1171:39" pos:end="1171:40">dc</name></expr></argument>, <argument pos:start="1171:43" pos:end="1171:50"><expr pos:start="1171:43" pos:end="1171:50"><name pos:start="1171:43" pos:end="1171:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1173:21" pos:end="1173:62"><expr pos:start="1173:21" pos:end="1173:61"><call pos:start="1173:21" pos:end="1173:61"><name pos:start="1173:21" pos:end="1173:30">gen_fop_DQ</name><argument_list pos:start="1173:31" pos:end="1173:61">(<argument pos:start="1173:32" pos:end="1173:33"><expr pos:start="1173:32" pos:end="1173:33"><name pos:start="1173:32" pos:end="1173:33">dc</name></expr></argument>, <argument pos:start="1173:36" pos:end="1173:37"><expr pos:start="1173:36" pos:end="1173:37"><name pos:start="1173:36" pos:end="1173:37">rd</name></expr></argument>, <argument pos:start="1173:40" pos:end="1173:42"><expr pos:start="1173:40" pos:end="1173:42"><name pos:start="1173:40" pos:end="1173:42">rs2</name></expr></argument>, <argument pos:start="1173:45" pos:end="1173:60"><expr pos:start="1173:45" pos:end="1173:60"><name pos:start="1173:45" pos:end="1173:60">gen_helper_fqtod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1175:21" pos:end="1175:26">break;</break>

                <case pos:start="1177:17" pos:end="1177:26">case <expr pos:start="1177:22" pos:end="1177:25"><literal type="number" pos:start="1177:22" pos:end="1177:25">0xcc</literal></expr>:</case> <comment type="block" pos:start="1177:28" pos:end="1177:38">/* fitoq */</comment>

                    <expr_stmt pos:start="1179:21" pos:end="1179:52"><expr pos:start="1179:21" pos:end="1179:51"><call pos:start="1179:21" pos:end="1179:51"><name pos:start="1179:21" pos:end="1179:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1179:38" pos:end="1179:51">(<argument pos:start="1179:39" pos:end="1179:40"><expr pos:start="1179:39" pos:end="1179:40"><name pos:start="1179:39" pos:end="1179:40">dc</name></expr></argument>, <argument pos:start="1179:43" pos:end="1179:50"><expr pos:start="1179:43" pos:end="1179:50"><name pos:start="1179:43" pos:end="1179:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1181:21" pos:end="1181:65"><expr pos:start="1181:21" pos:end="1181:64"><call pos:start="1181:21" pos:end="1181:64"><name pos:start="1181:21" pos:end="1181:33">gen_ne_fop_QF</name><argument_list pos:start="1181:34" pos:end="1181:64">(<argument pos:start="1181:35" pos:end="1181:36"><expr pos:start="1181:35" pos:end="1181:36"><name pos:start="1181:35" pos:end="1181:36">dc</name></expr></argument>, <argument pos:start="1181:39" pos:end="1181:40"><expr pos:start="1181:39" pos:end="1181:40"><name pos:start="1181:39" pos:end="1181:40">rd</name></expr></argument>, <argument pos:start="1181:43" pos:end="1181:45"><expr pos:start="1181:43" pos:end="1181:45"><name pos:start="1181:43" pos:end="1181:45">rs2</name></expr></argument>, <argument pos:start="1181:48" pos:end="1181:63"><expr pos:start="1181:48" pos:end="1181:63"><name pos:start="1181:48" pos:end="1181:63">gen_helper_fitoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1183:21" pos:end="1183:26">break;</break>

                <case pos:start="1185:17" pos:end="1185:26">case <expr pos:start="1185:22" pos:end="1185:25"><literal type="number" pos:start="1185:22" pos:end="1185:25">0xcd</literal></expr>:</case> <comment type="block" pos:start="1185:28" pos:end="1185:38">/* fstoq */</comment>

                    <expr_stmt pos:start="1187:21" pos:end="1187:52"><expr pos:start="1187:21" pos:end="1187:51"><call pos:start="1187:21" pos:end="1187:51"><name pos:start="1187:21" pos:end="1187:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1187:38" pos:end="1187:51">(<argument pos:start="1187:39" pos:end="1187:40"><expr pos:start="1187:39" pos:end="1187:40"><name pos:start="1187:39" pos:end="1187:40">dc</name></expr></argument>, <argument pos:start="1187:43" pos:end="1187:50"><expr pos:start="1187:43" pos:end="1187:50"><name pos:start="1187:43" pos:end="1187:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1189:21" pos:end="1189:65"><expr pos:start="1189:21" pos:end="1189:64"><call pos:start="1189:21" pos:end="1189:64"><name pos:start="1189:21" pos:end="1189:33">gen_ne_fop_QF</name><argument_list pos:start="1189:34" pos:end="1189:64">(<argument pos:start="1189:35" pos:end="1189:36"><expr pos:start="1189:35" pos:end="1189:36"><name pos:start="1189:35" pos:end="1189:36">dc</name></expr></argument>, <argument pos:start="1189:39" pos:end="1189:40"><expr pos:start="1189:39" pos:end="1189:40"><name pos:start="1189:39" pos:end="1189:40">rd</name></expr></argument>, <argument pos:start="1189:43" pos:end="1189:45"><expr pos:start="1189:43" pos:end="1189:45"><name pos:start="1189:43" pos:end="1189:45">rs2</name></expr></argument>, <argument pos:start="1189:48" pos:end="1189:63"><expr pos:start="1189:48" pos:end="1189:63"><name pos:start="1189:48" pos:end="1189:63">gen_helper_fstoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1191:21" pos:end="1191:26">break;</break>

                <case pos:start="1193:17" pos:end="1193:26">case <expr pos:start="1193:22" pos:end="1193:25"><literal type="number" pos:start="1193:22" pos:end="1193:25">0xce</literal></expr>:</case> <comment type="block" pos:start="1193:28" pos:end="1193:38">/* fdtoq */</comment>

                    <expr_stmt pos:start="1195:21" pos:end="1195:52"><expr pos:start="1195:21" pos:end="1195:51"><call pos:start="1195:21" pos:end="1195:51"><name pos:start="1195:21" pos:end="1195:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1195:38" pos:end="1195:51">(<argument pos:start="1195:39" pos:end="1195:40"><expr pos:start="1195:39" pos:end="1195:40"><name pos:start="1195:39" pos:end="1195:40">dc</name></expr></argument>, <argument pos:start="1195:43" pos:end="1195:50"><expr pos:start="1195:43" pos:end="1195:50"><name pos:start="1195:43" pos:end="1195:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1197:21" pos:end="1197:65"><expr pos:start="1197:21" pos:end="1197:64"><call pos:start="1197:21" pos:end="1197:64"><name pos:start="1197:21" pos:end="1197:33">gen_ne_fop_QD</name><argument_list pos:start="1197:34" pos:end="1197:64">(<argument pos:start="1197:35" pos:end="1197:36"><expr pos:start="1197:35" pos:end="1197:36"><name pos:start="1197:35" pos:end="1197:36">dc</name></expr></argument>, <argument pos:start="1197:39" pos:end="1197:40"><expr pos:start="1197:39" pos:end="1197:40"><name pos:start="1197:39" pos:end="1197:40">rd</name></expr></argument>, <argument pos:start="1197:43" pos:end="1197:45"><expr pos:start="1197:43" pos:end="1197:45"><name pos:start="1197:43" pos:end="1197:45">rs2</name></expr></argument>, <argument pos:start="1197:48" pos:end="1197:63"><expr pos:start="1197:48" pos:end="1197:63"><name pos:start="1197:48" pos:end="1197:63">gen_helper_fdtoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1199:21" pos:end="1199:26">break;</break>

                <case pos:start="1201:17" pos:end="1201:26">case <expr pos:start="1201:22" pos:end="1201:25"><literal type="number" pos:start="1201:22" pos:end="1201:25">0xd1</literal></expr>:</case> <comment type="block" pos:start="1201:28" pos:end="1201:38">/* fstoi */</comment>

                    <expr_stmt pos:start="1203:21" pos:end="1203:62"><expr pos:start="1203:21" pos:end="1203:61"><call pos:start="1203:21" pos:end="1203:61"><name pos:start="1203:21" pos:end="1203:30">gen_fop_FF</name><argument_list pos:start="1203:31" pos:end="1203:61">(<argument pos:start="1203:32" pos:end="1203:33"><expr pos:start="1203:32" pos:end="1203:33"><name pos:start="1203:32" pos:end="1203:33">dc</name></expr></argument>, <argument pos:start="1203:36" pos:end="1203:37"><expr pos:start="1203:36" pos:end="1203:37"><name pos:start="1203:36" pos:end="1203:37">rd</name></expr></argument>, <argument pos:start="1203:40" pos:end="1203:42"><expr pos:start="1203:40" pos:end="1203:42"><name pos:start="1203:40" pos:end="1203:42">rs2</name></expr></argument>, <argument pos:start="1203:45" pos:end="1203:60"><expr pos:start="1203:45" pos:end="1203:60"><name pos:start="1203:45" pos:end="1203:60">gen_helper_fstoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1205:21" pos:end="1205:26">break;</break>

                <case pos:start="1207:17" pos:end="1207:26">case <expr pos:start="1207:22" pos:end="1207:25"><literal type="number" pos:start="1207:22" pos:end="1207:25">0xd2</literal></expr>:</case> <comment type="block" pos:start="1207:28" pos:end="1207:38">/* fdtoi */</comment>

                    <expr_stmt pos:start="1209:21" pos:end="1209:62"><expr pos:start="1209:21" pos:end="1209:61"><call pos:start="1209:21" pos:end="1209:61"><name pos:start="1209:21" pos:end="1209:30">gen_fop_FD</name><argument_list pos:start="1209:31" pos:end="1209:61">(<argument pos:start="1209:32" pos:end="1209:33"><expr pos:start="1209:32" pos:end="1209:33"><name pos:start="1209:32" pos:end="1209:33">dc</name></expr></argument>, <argument pos:start="1209:36" pos:end="1209:37"><expr pos:start="1209:36" pos:end="1209:37"><name pos:start="1209:36" pos:end="1209:37">rd</name></expr></argument>, <argument pos:start="1209:40" pos:end="1209:42"><expr pos:start="1209:40" pos:end="1209:42"><name pos:start="1209:40" pos:end="1209:42">rs2</name></expr></argument>, <argument pos:start="1209:45" pos:end="1209:60"><expr pos:start="1209:45" pos:end="1209:60"><name pos:start="1209:45" pos:end="1209:60">gen_helper_fdtoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1211:21" pos:end="1211:26">break;</break>

                <case pos:start="1213:17" pos:end="1213:26">case <expr pos:start="1213:22" pos:end="1213:25"><literal type="number" pos:start="1213:22" pos:end="1213:25">0xd3</literal></expr>:</case> <comment type="block" pos:start="1213:28" pos:end="1213:38">/* fqtoi */</comment>

                    <expr_stmt pos:start="1215:21" pos:end="1215:52"><expr pos:start="1215:21" pos:end="1215:51"><call pos:start="1215:21" pos:end="1215:51"><name pos:start="1215:21" pos:end="1215:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1215:38" pos:end="1215:51">(<argument pos:start="1215:39" pos:end="1215:40"><expr pos:start="1215:39" pos:end="1215:40"><name pos:start="1215:39" pos:end="1215:40">dc</name></expr></argument>, <argument pos:start="1215:43" pos:end="1215:50"><expr pos:start="1215:43" pos:end="1215:50"><name pos:start="1215:43" pos:end="1215:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1217:21" pos:end="1217:62"><expr pos:start="1217:21" pos:end="1217:61"><call pos:start="1217:21" pos:end="1217:61"><name pos:start="1217:21" pos:end="1217:30">gen_fop_FQ</name><argument_list pos:start="1217:31" pos:end="1217:61">(<argument pos:start="1217:32" pos:end="1217:33"><expr pos:start="1217:32" pos:end="1217:33"><name pos:start="1217:32" pos:end="1217:33">dc</name></expr></argument>, <argument pos:start="1217:36" pos:end="1217:37"><expr pos:start="1217:36" pos:end="1217:37"><name pos:start="1217:36" pos:end="1217:37">rd</name></expr></argument>, <argument pos:start="1217:40" pos:end="1217:42"><expr pos:start="1217:40" pos:end="1217:42"><name pos:start="1217:40" pos:end="1217:42">rs2</name></expr></argument>, <argument pos:start="1217:45" pos:end="1217:60"><expr pos:start="1217:45" pos:end="1217:60"><name pos:start="1217:45" pos:end="1217:60">gen_helper_fqtoi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1219:21" pos:end="1222:0">break;</break>

<cpp:ifdef pos:start="1221:1" pos:end="1221:21">#<cpp:directive pos:start="1221:2" pos:end="1221:6">ifdef</cpp:directive> <name pos:start="1221:8" pos:end="1221:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="1223:17" pos:end="1223:25">case <expr pos:start="1223:22" pos:end="1223:24"><literal type="number" pos:start="1223:22" pos:end="1223:24">0x2</literal></expr>:</case> <comment type="block" pos:start="1223:27" pos:end="1223:40">/* V9 fmovd */</comment>

                    <expr_stmt pos:start="1225:21" pos:end="1225:58"><expr pos:start="1225:21" pos:end="1225:57"><name pos:start="1225:21" pos:end="1225:31">cpu_src1_64</name> <operator pos:start="1225:33" pos:end="1225:33">=</operator> <call pos:start="1225:35" pos:end="1225:57"><name pos:start="1225:35" pos:end="1225:48">gen_load_fpr_D</name><argument_list pos:start="1225:49" pos:end="1225:57">(<argument pos:start="1225:50" pos:end="1225:51"><expr pos:start="1225:50" pos:end="1225:51"><name pos:start="1225:50" pos:end="1225:51">dc</name></expr></argument>, <argument pos:start="1225:54" pos:end="1225:56"><expr pos:start="1225:54" pos:end="1225:56"><name pos:start="1225:54" pos:end="1225:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1227:21" pos:end="1227:57"><expr pos:start="1227:21" pos:end="1227:56"><call pos:start="1227:21" pos:end="1227:56"><name pos:start="1227:21" pos:end="1227:35">gen_store_fpr_D</name><argument_list pos:start="1227:36" pos:end="1227:56">(<argument pos:start="1227:37" pos:end="1227:38"><expr pos:start="1227:37" pos:end="1227:38"><name pos:start="1227:37" pos:end="1227:38">dc</name></expr></argument>, <argument pos:start="1227:41" pos:end="1227:42"><expr pos:start="1227:41" pos:end="1227:42"><name pos:start="1227:41" pos:end="1227:42">rd</name></expr></argument>, <argument pos:start="1227:45" pos:end="1227:55"><expr pos:start="1227:45" pos:end="1227:55"><name pos:start="1227:45" pos:end="1227:55">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1229:21" pos:end="1229:26">break;</break>

                <case pos:start="1231:17" pos:end="1231:25">case <expr pos:start="1231:22" pos:end="1231:24"><literal type="number" pos:start="1231:22" pos:end="1231:24">0x3</literal></expr>:</case> <comment type="block" pos:start="1231:27" pos:end="1231:40">/* V9 fmovq */</comment>

                    <expr_stmt pos:start="1233:21" pos:end="1233:52"><expr pos:start="1233:21" pos:end="1233:51"><call pos:start="1233:21" pos:end="1233:51"><name pos:start="1233:21" pos:end="1233:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1233:38" pos:end="1233:51">(<argument pos:start="1233:39" pos:end="1233:40"><expr pos:start="1233:39" pos:end="1233:40"><name pos:start="1233:39" pos:end="1233:40">dc</name></expr></argument>, <argument pos:start="1233:43" pos:end="1233:50"><expr pos:start="1233:43" pos:end="1233:50"><name pos:start="1233:43" pos:end="1233:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1235:21" pos:end="1235:40"><expr pos:start="1235:21" pos:end="1235:39"><call pos:start="1235:21" pos:end="1235:39"><name pos:start="1235:21" pos:end="1235:30">gen_move_Q</name><argument_list pos:start="1235:31" pos:end="1235:39">(<argument pos:start="1235:32" pos:end="1235:33"><expr pos:start="1235:32" pos:end="1235:33"><name pos:start="1235:32" pos:end="1235:33">rd</name></expr></argument>, <argument pos:start="1235:36" pos:end="1235:38"><expr pos:start="1235:36" pos:end="1235:38"><name pos:start="1235:36" pos:end="1235:38">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1237:21" pos:end="1237:26">break;</break>

                <case pos:start="1239:17" pos:end="1239:25">case <expr pos:start="1239:22" pos:end="1239:24"><literal type="number" pos:start="1239:22" pos:end="1239:24">0x6</literal></expr>:</case> <comment type="block" pos:start="1239:27" pos:end="1239:40">/* V9 fnegd */</comment>

                    <expr_stmt pos:start="1241:21" pos:end="1241:65"><expr pos:start="1241:21" pos:end="1241:64"><call pos:start="1241:21" pos:end="1241:64"><name pos:start="1241:21" pos:end="1241:33">gen_ne_fop_DD</name><argument_list pos:start="1241:34" pos:end="1241:64">(<argument pos:start="1241:35" pos:end="1241:36"><expr pos:start="1241:35" pos:end="1241:36"><name pos:start="1241:35" pos:end="1241:36">dc</name></expr></argument>, <argument pos:start="1241:39" pos:end="1241:40"><expr pos:start="1241:39" pos:end="1241:40"><name pos:start="1241:39" pos:end="1241:40">rd</name></expr></argument>, <argument pos:start="1241:43" pos:end="1241:45"><expr pos:start="1241:43" pos:end="1241:45"><name pos:start="1241:43" pos:end="1241:45">rs2</name></expr></argument>, <argument pos:start="1241:48" pos:end="1241:63"><expr pos:start="1241:48" pos:end="1241:63"><name pos:start="1241:48" pos:end="1241:63">gen_helper_fnegd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1243:21" pos:end="1243:26">break;</break>

                <case pos:start="1245:17" pos:end="1245:25">case <expr pos:start="1245:22" pos:end="1245:24"><literal type="number" pos:start="1245:22" pos:end="1245:24">0x7</literal></expr>:</case> <comment type="block" pos:start="1245:27" pos:end="1245:40">/* V9 fnegq */</comment>

                    <expr_stmt pos:start="1247:21" pos:end="1247:52"><expr pos:start="1247:21" pos:end="1247:51"><call pos:start="1247:21" pos:end="1247:51"><name pos:start="1247:21" pos:end="1247:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1247:38" pos:end="1247:51">(<argument pos:start="1247:39" pos:end="1247:40"><expr pos:start="1247:39" pos:end="1247:40"><name pos:start="1247:39" pos:end="1247:40">dc</name></expr></argument>, <argument pos:start="1247:43" pos:end="1247:50"><expr pos:start="1247:43" pos:end="1247:50"><name pos:start="1247:43" pos:end="1247:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1249:21" pos:end="1249:65"><expr pos:start="1249:21" pos:end="1249:64"><call pos:start="1249:21" pos:end="1249:64"><name pos:start="1249:21" pos:end="1249:33">gen_ne_fop_QQ</name><argument_list pos:start="1249:34" pos:end="1249:64">(<argument pos:start="1249:35" pos:end="1249:36"><expr pos:start="1249:35" pos:end="1249:36"><name pos:start="1249:35" pos:end="1249:36">dc</name></expr></argument>, <argument pos:start="1249:39" pos:end="1249:40"><expr pos:start="1249:39" pos:end="1249:40"><name pos:start="1249:39" pos:end="1249:40">rd</name></expr></argument>, <argument pos:start="1249:43" pos:end="1249:45"><expr pos:start="1249:43" pos:end="1249:45"><name pos:start="1249:43" pos:end="1249:45">rs2</name></expr></argument>, <argument pos:start="1249:48" pos:end="1249:63"><expr pos:start="1249:48" pos:end="1249:63"><name pos:start="1249:48" pos:end="1249:63">gen_helper_fnegq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1251:21" pos:end="1251:26">break;</break>

                <case pos:start="1253:17" pos:end="1253:25">case <expr pos:start="1253:22" pos:end="1253:24"><literal type="number" pos:start="1253:22" pos:end="1253:24">0xa</literal></expr>:</case> <comment type="block" pos:start="1253:27" pos:end="1253:40">/* V9 fabsd */</comment>

                    <expr_stmt pos:start="1255:21" pos:end="1255:65"><expr pos:start="1255:21" pos:end="1255:64"><call pos:start="1255:21" pos:end="1255:64"><name pos:start="1255:21" pos:end="1255:33">gen_ne_fop_DD</name><argument_list pos:start="1255:34" pos:end="1255:64">(<argument pos:start="1255:35" pos:end="1255:36"><expr pos:start="1255:35" pos:end="1255:36"><name pos:start="1255:35" pos:end="1255:36">dc</name></expr></argument>, <argument pos:start="1255:39" pos:end="1255:40"><expr pos:start="1255:39" pos:end="1255:40"><name pos:start="1255:39" pos:end="1255:40">rd</name></expr></argument>, <argument pos:start="1255:43" pos:end="1255:45"><expr pos:start="1255:43" pos:end="1255:45"><name pos:start="1255:43" pos:end="1255:45">rs2</name></expr></argument>, <argument pos:start="1255:48" pos:end="1255:63"><expr pos:start="1255:48" pos:end="1255:63"><name pos:start="1255:48" pos:end="1255:63">gen_helper_fabsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1257:21" pos:end="1257:26">break;</break>

                <case pos:start="1259:17" pos:end="1259:25">case <expr pos:start="1259:22" pos:end="1259:24"><literal type="number" pos:start="1259:22" pos:end="1259:24">0xb</literal></expr>:</case> <comment type="block" pos:start="1259:27" pos:end="1259:40">/* V9 fabsq */</comment>

                    <expr_stmt pos:start="1261:21" pos:end="1261:52"><expr pos:start="1261:21" pos:end="1261:51"><call pos:start="1261:21" pos:end="1261:51"><name pos:start="1261:21" pos:end="1261:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1261:38" pos:end="1261:51">(<argument pos:start="1261:39" pos:end="1261:40"><expr pos:start="1261:39" pos:end="1261:40"><name pos:start="1261:39" pos:end="1261:40">dc</name></expr></argument>, <argument pos:start="1261:43" pos:end="1261:50"><expr pos:start="1261:43" pos:end="1261:50"><name pos:start="1261:43" pos:end="1261:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1263:21" pos:end="1263:65"><expr pos:start="1263:21" pos:end="1263:64"><call pos:start="1263:21" pos:end="1263:64"><name pos:start="1263:21" pos:end="1263:33">gen_ne_fop_QQ</name><argument_list pos:start="1263:34" pos:end="1263:64">(<argument pos:start="1263:35" pos:end="1263:36"><expr pos:start="1263:35" pos:end="1263:36"><name pos:start="1263:35" pos:end="1263:36">dc</name></expr></argument>, <argument pos:start="1263:39" pos:end="1263:40"><expr pos:start="1263:39" pos:end="1263:40"><name pos:start="1263:39" pos:end="1263:40">rd</name></expr></argument>, <argument pos:start="1263:43" pos:end="1263:45"><expr pos:start="1263:43" pos:end="1263:45"><name pos:start="1263:43" pos:end="1263:45">rs2</name></expr></argument>, <argument pos:start="1263:48" pos:end="1263:63"><expr pos:start="1263:48" pos:end="1263:63"><name pos:start="1263:48" pos:end="1263:63">gen_helper_fabsq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1265:21" pos:end="1265:26">break;</break>

                <case pos:start="1267:17" pos:end="1267:26">case <expr pos:start="1267:22" pos:end="1267:25"><literal type="number" pos:start="1267:22" pos:end="1267:25">0x81</literal></expr>:</case> <comment type="block" pos:start="1267:28" pos:end="1267:41">/* V9 fstox */</comment>

                    <expr_stmt pos:start="1269:21" pos:end="1269:62"><expr pos:start="1269:21" pos:end="1269:61"><call pos:start="1269:21" pos:end="1269:61"><name pos:start="1269:21" pos:end="1269:30">gen_fop_DF</name><argument_list pos:start="1269:31" pos:end="1269:61">(<argument pos:start="1269:32" pos:end="1269:33"><expr pos:start="1269:32" pos:end="1269:33"><name pos:start="1269:32" pos:end="1269:33">dc</name></expr></argument>, <argument pos:start="1269:36" pos:end="1269:37"><expr pos:start="1269:36" pos:end="1269:37"><name pos:start="1269:36" pos:end="1269:37">rd</name></expr></argument>, <argument pos:start="1269:40" pos:end="1269:42"><expr pos:start="1269:40" pos:end="1269:42"><name pos:start="1269:40" pos:end="1269:42">rs2</name></expr></argument>, <argument pos:start="1269:45" pos:end="1269:60"><expr pos:start="1269:45" pos:end="1269:60"><name pos:start="1269:45" pos:end="1269:60">gen_helper_fstox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1271:21" pos:end="1271:26">break;</break>

                <case pos:start="1273:17" pos:end="1273:26">case <expr pos:start="1273:22" pos:end="1273:25"><literal type="number" pos:start="1273:22" pos:end="1273:25">0x82</literal></expr>:</case> <comment type="block" pos:start="1273:28" pos:end="1273:41">/* V9 fdtox */</comment>

                    <expr_stmt pos:start="1275:21" pos:end="1275:62"><expr pos:start="1275:21" pos:end="1275:61"><call pos:start="1275:21" pos:end="1275:61"><name pos:start="1275:21" pos:end="1275:30">gen_fop_DD</name><argument_list pos:start="1275:31" pos:end="1275:61">(<argument pos:start="1275:32" pos:end="1275:33"><expr pos:start="1275:32" pos:end="1275:33"><name pos:start="1275:32" pos:end="1275:33">dc</name></expr></argument>, <argument pos:start="1275:36" pos:end="1275:37"><expr pos:start="1275:36" pos:end="1275:37"><name pos:start="1275:36" pos:end="1275:37">rd</name></expr></argument>, <argument pos:start="1275:40" pos:end="1275:42"><expr pos:start="1275:40" pos:end="1275:42"><name pos:start="1275:40" pos:end="1275:42">rs2</name></expr></argument>, <argument pos:start="1275:45" pos:end="1275:60"><expr pos:start="1275:45" pos:end="1275:60"><name pos:start="1275:45" pos:end="1275:60">gen_helper_fdtox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1277:21" pos:end="1277:26">break;</break>

                <case pos:start="1279:17" pos:end="1279:26">case <expr pos:start="1279:22" pos:end="1279:25"><literal type="number" pos:start="1279:22" pos:end="1279:25">0x83</literal></expr>:</case> <comment type="block" pos:start="1279:28" pos:end="1279:41">/* V9 fqtox */</comment>

                    <expr_stmt pos:start="1281:21" pos:end="1281:52"><expr pos:start="1281:21" pos:end="1281:51"><call pos:start="1281:21" pos:end="1281:51"><name pos:start="1281:21" pos:end="1281:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1281:38" pos:end="1281:51">(<argument pos:start="1281:39" pos:end="1281:40"><expr pos:start="1281:39" pos:end="1281:40"><name pos:start="1281:39" pos:end="1281:40">dc</name></expr></argument>, <argument pos:start="1281:43" pos:end="1281:50"><expr pos:start="1281:43" pos:end="1281:50"><name pos:start="1281:43" pos:end="1281:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1283:21" pos:end="1283:62"><expr pos:start="1283:21" pos:end="1283:61"><call pos:start="1283:21" pos:end="1283:61"><name pos:start="1283:21" pos:end="1283:30">gen_fop_DQ</name><argument_list pos:start="1283:31" pos:end="1283:61">(<argument pos:start="1283:32" pos:end="1283:33"><expr pos:start="1283:32" pos:end="1283:33"><name pos:start="1283:32" pos:end="1283:33">dc</name></expr></argument>, <argument pos:start="1283:36" pos:end="1283:37"><expr pos:start="1283:36" pos:end="1283:37"><name pos:start="1283:36" pos:end="1283:37">rd</name></expr></argument>, <argument pos:start="1283:40" pos:end="1283:42"><expr pos:start="1283:40" pos:end="1283:42"><name pos:start="1283:40" pos:end="1283:42">rs2</name></expr></argument>, <argument pos:start="1283:45" pos:end="1283:60"><expr pos:start="1283:45" pos:end="1283:60"><name pos:start="1283:45" pos:end="1283:60">gen_helper_fqtox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1285:21" pos:end="1285:26">break;</break>

                <case pos:start="1287:17" pos:end="1287:26">case <expr pos:start="1287:22" pos:end="1287:25"><literal type="number" pos:start="1287:22" pos:end="1287:25">0x84</literal></expr>:</case> <comment type="block" pos:start="1287:28" pos:end="1287:41">/* V9 fxtos */</comment>

                    <expr_stmt pos:start="1289:21" pos:end="1289:62"><expr pos:start="1289:21" pos:end="1289:61"><call pos:start="1289:21" pos:end="1289:61"><name pos:start="1289:21" pos:end="1289:30">gen_fop_FD</name><argument_list pos:start="1289:31" pos:end="1289:61">(<argument pos:start="1289:32" pos:end="1289:33"><expr pos:start="1289:32" pos:end="1289:33"><name pos:start="1289:32" pos:end="1289:33">dc</name></expr></argument>, <argument pos:start="1289:36" pos:end="1289:37"><expr pos:start="1289:36" pos:end="1289:37"><name pos:start="1289:36" pos:end="1289:37">rd</name></expr></argument>, <argument pos:start="1289:40" pos:end="1289:42"><expr pos:start="1289:40" pos:end="1289:42"><name pos:start="1289:40" pos:end="1289:42">rs2</name></expr></argument>, <argument pos:start="1289:45" pos:end="1289:60"><expr pos:start="1289:45" pos:end="1289:60"><name pos:start="1289:45" pos:end="1289:60">gen_helper_fxtos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1291:21" pos:end="1291:26">break;</break>

                <case pos:start="1293:17" pos:end="1293:26">case <expr pos:start="1293:22" pos:end="1293:25"><literal type="number" pos:start="1293:22" pos:end="1293:25">0x88</literal></expr>:</case> <comment type="block" pos:start="1293:28" pos:end="1293:41">/* V9 fxtod */</comment>

                    <expr_stmt pos:start="1295:21" pos:end="1295:62"><expr pos:start="1295:21" pos:end="1295:61"><call pos:start="1295:21" pos:end="1295:61"><name pos:start="1295:21" pos:end="1295:30">gen_fop_DD</name><argument_list pos:start="1295:31" pos:end="1295:61">(<argument pos:start="1295:32" pos:end="1295:33"><expr pos:start="1295:32" pos:end="1295:33"><name pos:start="1295:32" pos:end="1295:33">dc</name></expr></argument>, <argument pos:start="1295:36" pos:end="1295:37"><expr pos:start="1295:36" pos:end="1295:37"><name pos:start="1295:36" pos:end="1295:37">rd</name></expr></argument>, <argument pos:start="1295:40" pos:end="1295:42"><expr pos:start="1295:40" pos:end="1295:42"><name pos:start="1295:40" pos:end="1295:42">rs2</name></expr></argument>, <argument pos:start="1295:45" pos:end="1295:60"><expr pos:start="1295:45" pos:end="1295:60"><name pos:start="1295:45" pos:end="1295:60">gen_helper_fxtod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1297:21" pos:end="1297:26">break;</break>

                <case pos:start="1299:17" pos:end="1299:26">case <expr pos:start="1299:22" pos:end="1299:25"><literal type="number" pos:start="1299:22" pos:end="1299:25">0x8c</literal></expr>:</case> <comment type="block" pos:start="1299:28" pos:end="1299:41">/* V9 fxtoq */</comment>

                    <expr_stmt pos:start="1301:21" pos:end="1301:52"><expr pos:start="1301:21" pos:end="1301:51"><call pos:start="1301:21" pos:end="1301:51"><name pos:start="1301:21" pos:end="1301:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1301:38" pos:end="1301:51">(<argument pos:start="1301:39" pos:end="1301:40"><expr pos:start="1301:39" pos:end="1301:40"><name pos:start="1301:39" pos:end="1301:40">dc</name></expr></argument>, <argument pos:start="1301:43" pos:end="1301:50"><expr pos:start="1301:43" pos:end="1301:50"><name pos:start="1301:43" pos:end="1301:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1303:21" pos:end="1303:65"><expr pos:start="1303:21" pos:end="1303:64"><call pos:start="1303:21" pos:end="1303:64"><name pos:start="1303:21" pos:end="1303:33">gen_ne_fop_QD</name><argument_list pos:start="1303:34" pos:end="1303:64">(<argument pos:start="1303:35" pos:end="1303:36"><expr pos:start="1303:35" pos:end="1303:36"><name pos:start="1303:35" pos:end="1303:36">dc</name></expr></argument>, <argument pos:start="1303:39" pos:end="1303:40"><expr pos:start="1303:39" pos:end="1303:40"><name pos:start="1303:39" pos:end="1303:40">rd</name></expr></argument>, <argument pos:start="1303:43" pos:end="1303:45"><expr pos:start="1303:43" pos:end="1303:45"><name pos:start="1303:43" pos:end="1303:45">rs2</name></expr></argument>, <argument pos:start="1303:48" pos:end="1303:63"><expr pos:start="1303:48" pos:end="1303:63"><name pos:start="1303:48" pos:end="1303:63">gen_helper_fxtoq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1305:21" pos:end="1308:0">break;</break>

<cpp:endif pos:start="1307:1" pos:end="1307:6">#<cpp:directive pos:start="1307:2" pos:end="1307:6">endif</cpp:directive></cpp:endif>

                <default pos:start="1309:17" pos:end="1309:24">default:</default>

                    <goto pos:start="1311:21" pos:end="1311:38">goto <name pos:start="1311:26" pos:end="1311:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="1315:15" pos:end="1625:13">else if <condition pos:start="1315:23" pos:end="1315:35">(<expr pos:start="1315:24" pos:end="1315:34"><name pos:start="1315:24" pos:end="1315:26">xop</name> <operator pos:start="1315:28" pos:end="1315:29">==</operator> <literal type="number" pos:start="1315:31" pos:end="1315:34">0x35</literal></expr>)</condition> <block pos:start="1315:37" pos:end="1625:13">{<block_content pos:start="1319:17" pos:end="1623:17">   <comment type="block" pos:start="1315:41" pos:end="1315:60">/* FPU Operations */</comment>

<cpp:ifdef pos:start="1317:1" pos:end="1317:21">#<cpp:directive pos:start="1317:2" pos:end="1317:6">ifdef</cpp:directive> <name pos:start="1317:8" pos:end="1317:21">TARGET_SPARC64</name></cpp:ifdef>

                <decl_stmt pos:start="1319:17" pos:end="1322:0"><decl pos:start="1319:17" pos:end="1319:24"><type pos:start="1319:17" pos:end="1319:19"><name pos:start="1319:17" pos:end="1319:19">int</name></type> <name pos:start="1319:21" pos:end="1319:24">cond</name></decl>;</decl_stmt>

<cpp:endif pos:start="1321:1" pos:end="1321:6">#<cpp:directive pos:start="1321:2" pos:end="1321:6">endif</cpp:directive></cpp:endif>

                <if_stmt pos:start="1323:17" pos:end="1327:17"><if pos:start="1323:17" pos:end="1327:17">if <condition pos:start="1323:20" pos:end="1323:41">(<expr pos:start="1323:21" pos:end="1323:40"><call pos:start="1323:21" pos:end="1323:40"><name pos:start="1323:21" pos:end="1323:36">gen_trap_ifnofpu</name><argument_list pos:start="1323:37" pos:end="1323:40">(<argument pos:start="1323:38" pos:end="1323:39"><expr pos:start="1323:38" pos:end="1323:39"><name pos:start="1323:38" pos:end="1323:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1323:43" pos:end="1327:17">{<block_content pos:start="1325:21" pos:end="1325:34">

                    <goto pos:start="1325:21" pos:end="1325:34">goto <name pos:start="1325:26" pos:end="1325:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1329:17" pos:end="1329:49"><expr pos:start="1329:17" pos:end="1329:48"><call pos:start="1329:17" pos:end="1329:48"><name pos:start="1329:17" pos:end="1329:46">gen_op_clear_ieee_excp_and_FTT</name><argument_list pos:start="1329:47" pos:end="1329:48">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1331:17" pos:end="1331:46"><expr pos:start="1331:17" pos:end="1331:45"><name pos:start="1331:17" pos:end="1331:19">rs1</name> <operator pos:start="1331:21" pos:end="1331:21">=</operator> <call pos:start="1331:23" pos:end="1331:45"><name pos:start="1331:23" pos:end="1331:31">GET_FIELD</name><argument_list pos:start="1331:32" pos:end="1331:45">(<argument pos:start="1331:33" pos:end="1331:36"><expr pos:start="1331:33" pos:end="1331:36"><name pos:start="1331:33" pos:end="1331:36">insn</name></expr></argument>, <argument pos:start="1331:39" pos:end="1331:40"><expr pos:start="1331:39" pos:end="1331:40"><literal type="number" pos:start="1331:39" pos:end="1331:40">13</literal></expr></argument>, <argument pos:start="1331:43" pos:end="1331:44"><expr pos:start="1331:43" pos:end="1331:44"><literal type="number" pos:start="1331:43" pos:end="1331:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1333:17" pos:end="1333:46"><expr pos:start="1333:17" pos:end="1333:45"><name pos:start="1333:17" pos:end="1333:19">rs2</name> <operator pos:start="1333:21" pos:end="1333:21">=</operator> <call pos:start="1333:23" pos:end="1333:45"><name pos:start="1333:23" pos:end="1333:31">GET_FIELD</name><argument_list pos:start="1333:32" pos:end="1333:45">(<argument pos:start="1333:33" pos:end="1333:36"><expr pos:start="1333:33" pos:end="1333:36"><name pos:start="1333:33" pos:end="1333:36">insn</name></expr></argument>, <argument pos:start="1333:39" pos:end="1333:40"><expr pos:start="1333:39" pos:end="1333:40"><literal type="number" pos:start="1333:39" pos:end="1333:40">27</literal></expr></argument>, <argument pos:start="1333:43" pos:end="1333:44"><expr pos:start="1333:43" pos:end="1333:44"><literal type="number" pos:start="1333:43" pos:end="1333:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1335:17" pos:end="1335:46"><expr pos:start="1335:17" pos:end="1335:45"><name pos:start="1335:17" pos:end="1335:19">xop</name> <operator pos:start="1335:21" pos:end="1335:21">=</operator> <call pos:start="1335:23" pos:end="1335:45"><name pos:start="1335:23" pos:end="1335:31">GET_FIELD</name><argument_list pos:start="1335:32" pos:end="1335:45">(<argument pos:start="1335:33" pos:end="1335:36"><expr pos:start="1335:33" pos:end="1335:36"><name pos:start="1335:33" pos:end="1335:36">insn</name></expr></argument>, <argument pos:start="1335:39" pos:end="1335:40"><expr pos:start="1335:39" pos:end="1335:40"><literal type="number" pos:start="1335:39" pos:end="1335:40">18</literal></expr></argument>, <argument pos:start="1335:43" pos:end="1335:44"><expr pos:start="1335:43" pos:end="1335:44"><literal type="number" pos:start="1335:43" pos:end="1335:44">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1337:17" pos:end="1360:0"><expr pos:start="1337:17" pos:end="1337:30"><call pos:start="1337:17" pos:end="1337:30"><name pos:start="1337:17" pos:end="1337:26">save_state</name><argument_list pos:start="1337:27" pos:end="1337:30">(<argument pos:start="1337:28" pos:end="1337:29"><expr pos:start="1337:28" pos:end="1337:29"><name pos:start="1337:28" pos:end="1337:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="1341:1" pos:end="1341:21">#<cpp:directive pos:start="1341:2" pos:end="1341:6">ifdef</cpp:directive> <name pos:start="1341:8" pos:end="1341:21">TARGET_SPARC64</name></cpp:ifdef>

<cpp:define pos:start="1343:1" pos:end="1359:27">#<cpp:directive pos:start="1343:2" pos:end="1343:7">define</cpp:directive> <cpp:macro pos:start="1343:9" pos:end="1343:17"><name pos:start="1343:9" pos:end="1343:13">FMOVR</name><parameter_list pos:start="1343:14" pos:end="1343:17">(<parameter pos:start="1343:15" pos:end="1343:16"><type pos:start="1343:15" pos:end="1343:16"><name pos:start="1343:15" pos:end="1343:16">sz</name></type></parameter>)</parameter_list></cpp:macro>                                                  \

                <cpp:value pos:start="1345:17" pos:end="1359:27">do {                                               \

                    DisasCompare cmp;                              \

                    cond = GET_FIELD_SP(insn, 14, 17);             \

                    cpu_src1 = get_src1(dc, insn);                 \

                    gen_compare_reg(&amp;cmp, cond, cpu_src1);         \

                    gen_fmov##sz(dc, &amp;cmp, rd, rs2);               \

                    free_compare(&amp;cmp);                            \

                } while (0)</cpp:value></cpp:define>



                <if_stmt pos:start="1363:17" pos:end="1388:0"><if pos:start="1363:17" pos:end="1369:17">if <condition pos:start="1363:20" pos:end="1363:43">(<expr pos:start="1363:21" pos:end="1363:42"><operator pos:start="1363:21" pos:end="1363:21">(</operator><name pos:start="1363:22" pos:end="1363:24">xop</name> <operator pos:start="1363:26" pos:end="1363:26">&amp;</operator> <literal type="number" pos:start="1363:28" pos:end="1363:32">0x11f</literal><operator pos:start="1363:33" pos:end="1363:33">)</operator> <operator pos:start="1363:35" pos:end="1363:36">==</operator> <literal type="number" pos:start="1363:38" pos:end="1363:42">0x005</literal></expr>)</condition> <block pos:start="1363:45" pos:end="1369:17">{<block_content pos:start="1365:21" pos:end="1367:26"> <comment type="block" pos:start="1363:47" pos:end="1363:61">/* V9 fmovsr */</comment>

                    <expr_stmt pos:start="1365:21" pos:end="1365:29"><expr pos:start="1365:21" pos:end="1365:28"><call pos:start="1365:21" pos:end="1365:28"><name pos:start="1365:21" pos:end="1365:25">FMOVR</name><argument_list pos:start="1365:26" pos:end="1365:28">(<argument pos:start="1365:27" pos:end="1365:27"><expr pos:start="1365:27" pos:end="1365:27"><name pos:start="1365:27" pos:end="1365:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1367:21" pos:end="1367:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="1369:19" pos:end="1375:17">else if <condition pos:start="1369:27" pos:end="1369:50">(<expr pos:start="1369:28" pos:end="1369:49"><operator pos:start="1369:28" pos:end="1369:28">(</operator><name pos:start="1369:29" pos:end="1369:31">xop</name> <operator pos:start="1369:33" pos:end="1369:33">&amp;</operator> <literal type="number" pos:start="1369:35" pos:end="1369:39">0x11f</literal><operator pos:start="1369:40" pos:end="1369:40">)</operator> <operator pos:start="1369:42" pos:end="1369:43">==</operator> <literal type="number" pos:start="1369:45" pos:end="1369:49">0x006</literal></expr>)</condition> <block pos:start="1369:52" pos:end="1375:17">{<block_content pos:start="1371:21" pos:end="1373:26"> <comment type="line" pos:start="1369:54" pos:end="1369:65">// V9 fmovdr</comment>

                    <expr_stmt pos:start="1371:21" pos:end="1371:29"><expr pos:start="1371:21" pos:end="1371:28"><call pos:start="1371:21" pos:end="1371:28"><name pos:start="1371:21" pos:end="1371:25">FMOVR</name><argument_list pos:start="1371:26" pos:end="1371:28">(<argument pos:start="1371:27" pos:end="1371:27"><expr pos:start="1371:27" pos:end="1371:27"><name pos:start="1371:27" pos:end="1371:27">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1373:21" pos:end="1373:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="1375:19" pos:end="1388:0">else if <condition pos:start="1375:27" pos:end="1375:50">(<expr pos:start="1375:28" pos:end="1375:49"><operator pos:start="1375:28" pos:end="1375:28">(</operator><name pos:start="1375:29" pos:end="1375:31">xop</name> <operator pos:start="1375:33" pos:end="1375:33">&amp;</operator> <literal type="number" pos:start="1375:35" pos:end="1375:39">0x11f</literal><operator pos:start="1375:40" pos:end="1375:40">)</operator> <operator pos:start="1375:42" pos:end="1375:43">==</operator> <literal type="number" pos:start="1375:45" pos:end="1375:49">0x007</literal></expr>)</condition> <block pos:start="1375:52" pos:end="1388:0">{<block_content pos:start="1377:21" pos:end="1381:26"> <comment type="line" pos:start="1375:54" pos:end="1375:65">// V9 fmovqr</comment>

                    <expr_stmt pos:start="1377:21" pos:end="1377:52"><expr pos:start="1377:21" pos:end="1377:51"><call pos:start="1377:21" pos:end="1377:51"><name pos:start="1377:21" pos:end="1377:37">CHECK_FPU_FEATURE</name><argument_list pos:start="1377:38" pos:end="1377:51">(<argument pos:start="1377:39" pos:end="1377:40"><expr pos:start="1377:39" pos:end="1377:40"><name pos:start="1377:39" pos:end="1377:40">dc</name></expr></argument>, <argument pos:start="1377:43" pos:end="1377:50"><expr pos:start="1377:43" pos:end="1377:50"><name pos:start="1377:43" pos:end="1377:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1379:21" pos:end="1379:29"><expr pos:start="1379:21" pos:end="1379:28"><call pos:start="1379:21" pos:end="1379:28"><name pos:start="1379:21" pos:end="1379:25">FMOVR</name><argument_list pos:start="1379:26" pos:end="1379:28">(<argument pos:start="1379:27" pos:end="1379:27"><expr pos:start="1379:27" pos:end="1379:27"><name pos:start="1379:27" pos:end="1379:27">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1381:21" pos:end="1381:26">break;</break>

                </block_content>}</block></if></if_stmt>

<cpp:undef pos:start="1385:1" pos:end="1385:12">#<cpp:directive pos:start="1385:2" pos:end="1385:6">undef</cpp:directive> <name pos:start="1385:8" pos:end="1385:12">FMOVR</name></cpp:undef>

<cpp:endif pos:start="1387:1" pos:end="1387:6">#<cpp:directive pos:start="1387:2" pos:end="1387:6">endif</cpp:directive></cpp:endif>

                <switch pos:start="1389:17" pos:end="1623:17">switch <condition pos:start="1389:24" pos:end="1389:28">(<expr pos:start="1389:25" pos:end="1389:27"><name pos:start="1389:25" pos:end="1389:27">xop</name></expr>)</condition> <block pos:start="1389:30" pos:end="1623:17">{<block_content pos:start="1411:21" pos:end="1621:42">

<cpp:ifdef pos:start="1391:1" pos:end="1391:21">#<cpp:directive pos:start="1391:2" pos:end="1391:6">ifdef</cpp:directive> <name pos:start="1391:8" pos:end="1391:21">TARGET_SPARC64</name></cpp:ifdef>

<cpp:define pos:start="1393:1" pos:end="1407:31">#<cpp:directive pos:start="1393:2" pos:end="1393:7">define</cpp:directive> <cpp:macro pos:start="1393:9" pos:end="1393:23"><name pos:start="1393:9" pos:end="1393:14">FMOVCC</name><parameter_list pos:start="1393:15" pos:end="1393:23">(<parameter pos:start="1393:16" pos:end="1393:18"><type pos:start="1393:16" pos:end="1393:18"><name pos:start="1393:16" pos:end="1393:18">fcc</name></type></parameter>, <parameter pos:start="1393:21" pos:end="1393:22"><type pos:start="1393:21" pos:end="1393:22"><name pos:start="1393:21" pos:end="1393:22">sz</name></type></parameter>)</parameter_list></cpp:macro>                                                 \

                    <cpp:value pos:start="1395:21" pos:end="1407:31">do {                                                \

                        DisasCompare cmp;                               \

                        cond = GET_FIELD_SP(insn, 14, 17);              \

                        gen_fcompare(&amp;cmp, fcc, cond);                  \

                        gen_fmov##sz(dc, &amp;cmp, rd, rs2);                \

                        free_compare(&amp;cmp);                             \

                    } while (0)</cpp:value></cpp:define>



                    <case pos:start="1411:21" pos:end="1411:31">case <expr pos:start="1411:26" pos:end="1411:30"><literal type="number" pos:start="1411:26" pos:end="1411:30">0x001</literal></expr>:</case> <comment type="block" pos:start="1411:33" pos:end="1411:54">/* V9 fmovscc %fcc0 */</comment>

                        <expr_stmt pos:start="1413:25" pos:end="1413:37"><expr pos:start="1413:25" pos:end="1413:36"><call pos:start="1413:25" pos:end="1413:36"><name pos:start="1413:25" pos:end="1413:30">FMOVCC</name><argument_list pos:start="1413:31" pos:end="1413:36">(<argument pos:start="1413:32" pos:end="1413:32"><expr pos:start="1413:32" pos:end="1413:32"><literal type="number" pos:start="1413:32" pos:end="1413:32">0</literal></expr></argument>, <argument pos:start="1413:35" pos:end="1413:35"><expr pos:start="1413:35" pos:end="1413:35"><name pos:start="1413:35" pos:end="1413:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1415:25" pos:end="1415:30">break;</break>

                    <case pos:start="1417:21" pos:end="1417:31">case <expr pos:start="1417:26" pos:end="1417:30"><literal type="number" pos:start="1417:26" pos:end="1417:30">0x002</literal></expr>:</case> <comment type="block" pos:start="1417:33" pos:end="1417:54">/* V9 fmovdcc %fcc0 */</comment>

                        <expr_stmt pos:start="1419:25" pos:end="1419:37"><expr pos:start="1419:25" pos:end="1419:36"><call pos:start="1419:25" pos:end="1419:36"><name pos:start="1419:25" pos:end="1419:30">FMOVCC</name><argument_list pos:start="1419:31" pos:end="1419:36">(<argument pos:start="1419:32" pos:end="1419:32"><expr pos:start="1419:32" pos:end="1419:32"><literal type="number" pos:start="1419:32" pos:end="1419:32">0</literal></expr></argument>, <argument pos:start="1419:35" pos:end="1419:35"><expr pos:start="1419:35" pos:end="1419:35"><name pos:start="1419:35" pos:end="1419:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1421:25" pos:end="1421:30">break;</break>

                    <case pos:start="1423:21" pos:end="1423:31">case <expr pos:start="1423:26" pos:end="1423:30"><literal type="number" pos:start="1423:26" pos:end="1423:30">0x003</literal></expr>:</case> <comment type="block" pos:start="1423:33" pos:end="1423:54">/* V9 fmovqcc %fcc0 */</comment>

                        <expr_stmt pos:start="1425:25" pos:end="1425:56"><expr pos:start="1425:25" pos:end="1425:55"><call pos:start="1425:25" pos:end="1425:55"><name pos:start="1425:25" pos:end="1425:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1425:42" pos:end="1425:55">(<argument pos:start="1425:43" pos:end="1425:44"><expr pos:start="1425:43" pos:end="1425:44"><name pos:start="1425:43" pos:end="1425:44">dc</name></expr></argument>, <argument pos:start="1425:47" pos:end="1425:54"><expr pos:start="1425:47" pos:end="1425:54"><name pos:start="1425:47" pos:end="1425:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1427:25" pos:end="1427:37"><expr pos:start="1427:25" pos:end="1427:36"><call pos:start="1427:25" pos:end="1427:36"><name pos:start="1427:25" pos:end="1427:30">FMOVCC</name><argument_list pos:start="1427:31" pos:end="1427:36">(<argument pos:start="1427:32" pos:end="1427:32"><expr pos:start="1427:32" pos:end="1427:32"><literal type="number" pos:start="1427:32" pos:end="1427:32">0</literal></expr></argument>, <argument pos:start="1427:35" pos:end="1427:35"><expr pos:start="1427:35" pos:end="1427:35"><name pos:start="1427:35" pos:end="1427:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1429:25" pos:end="1429:30">break;</break>

                    <case pos:start="1431:21" pos:end="1431:31">case <expr pos:start="1431:26" pos:end="1431:30"><literal type="number" pos:start="1431:26" pos:end="1431:30">0x041</literal></expr>:</case> <comment type="block" pos:start="1431:33" pos:end="1431:54">/* V9 fmovscc %fcc1 */</comment>

                        <expr_stmt pos:start="1433:25" pos:end="1433:37"><expr pos:start="1433:25" pos:end="1433:36"><call pos:start="1433:25" pos:end="1433:36"><name pos:start="1433:25" pos:end="1433:30">FMOVCC</name><argument_list pos:start="1433:31" pos:end="1433:36">(<argument pos:start="1433:32" pos:end="1433:32"><expr pos:start="1433:32" pos:end="1433:32"><literal type="number" pos:start="1433:32" pos:end="1433:32">1</literal></expr></argument>, <argument pos:start="1433:35" pos:end="1433:35"><expr pos:start="1433:35" pos:end="1433:35"><name pos:start="1433:35" pos:end="1433:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1435:25" pos:end="1435:30">break;</break>

                    <case pos:start="1437:21" pos:end="1437:31">case <expr pos:start="1437:26" pos:end="1437:30"><literal type="number" pos:start="1437:26" pos:end="1437:30">0x042</literal></expr>:</case> <comment type="block" pos:start="1437:33" pos:end="1437:54">/* V9 fmovdcc %fcc1 */</comment>

                        <expr_stmt pos:start="1439:25" pos:end="1439:37"><expr pos:start="1439:25" pos:end="1439:36"><call pos:start="1439:25" pos:end="1439:36"><name pos:start="1439:25" pos:end="1439:30">FMOVCC</name><argument_list pos:start="1439:31" pos:end="1439:36">(<argument pos:start="1439:32" pos:end="1439:32"><expr pos:start="1439:32" pos:end="1439:32"><literal type="number" pos:start="1439:32" pos:end="1439:32">1</literal></expr></argument>, <argument pos:start="1439:35" pos:end="1439:35"><expr pos:start="1439:35" pos:end="1439:35"><name pos:start="1439:35" pos:end="1439:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1441:25" pos:end="1441:30">break;</break>

                    <case pos:start="1443:21" pos:end="1443:31">case <expr pos:start="1443:26" pos:end="1443:30"><literal type="number" pos:start="1443:26" pos:end="1443:30">0x043</literal></expr>:</case> <comment type="block" pos:start="1443:33" pos:end="1443:54">/* V9 fmovqcc %fcc1 */</comment>

                        <expr_stmt pos:start="1445:25" pos:end="1445:56"><expr pos:start="1445:25" pos:end="1445:55"><call pos:start="1445:25" pos:end="1445:55"><name pos:start="1445:25" pos:end="1445:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1445:42" pos:end="1445:55">(<argument pos:start="1445:43" pos:end="1445:44"><expr pos:start="1445:43" pos:end="1445:44"><name pos:start="1445:43" pos:end="1445:44">dc</name></expr></argument>, <argument pos:start="1445:47" pos:end="1445:54"><expr pos:start="1445:47" pos:end="1445:54"><name pos:start="1445:47" pos:end="1445:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1447:25" pos:end="1447:37"><expr pos:start="1447:25" pos:end="1447:36"><call pos:start="1447:25" pos:end="1447:36"><name pos:start="1447:25" pos:end="1447:30">FMOVCC</name><argument_list pos:start="1447:31" pos:end="1447:36">(<argument pos:start="1447:32" pos:end="1447:32"><expr pos:start="1447:32" pos:end="1447:32"><literal type="number" pos:start="1447:32" pos:end="1447:32">1</literal></expr></argument>, <argument pos:start="1447:35" pos:end="1447:35"><expr pos:start="1447:35" pos:end="1447:35"><name pos:start="1447:35" pos:end="1447:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1449:25" pos:end="1449:30">break;</break>

                    <case pos:start="1451:21" pos:end="1451:31">case <expr pos:start="1451:26" pos:end="1451:30"><literal type="number" pos:start="1451:26" pos:end="1451:30">0x081</literal></expr>:</case> <comment type="block" pos:start="1451:33" pos:end="1451:54">/* V9 fmovscc %fcc2 */</comment>

                        <expr_stmt pos:start="1453:25" pos:end="1453:37"><expr pos:start="1453:25" pos:end="1453:36"><call pos:start="1453:25" pos:end="1453:36"><name pos:start="1453:25" pos:end="1453:30">FMOVCC</name><argument_list pos:start="1453:31" pos:end="1453:36">(<argument pos:start="1453:32" pos:end="1453:32"><expr pos:start="1453:32" pos:end="1453:32"><literal type="number" pos:start="1453:32" pos:end="1453:32">2</literal></expr></argument>, <argument pos:start="1453:35" pos:end="1453:35"><expr pos:start="1453:35" pos:end="1453:35"><name pos:start="1453:35" pos:end="1453:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1455:25" pos:end="1455:30">break;</break>

                    <case pos:start="1457:21" pos:end="1457:31">case <expr pos:start="1457:26" pos:end="1457:30"><literal type="number" pos:start="1457:26" pos:end="1457:30">0x082</literal></expr>:</case> <comment type="block" pos:start="1457:33" pos:end="1457:54">/* V9 fmovdcc %fcc2 */</comment>

                        <expr_stmt pos:start="1459:25" pos:end="1459:37"><expr pos:start="1459:25" pos:end="1459:36"><call pos:start="1459:25" pos:end="1459:36"><name pos:start="1459:25" pos:end="1459:30">FMOVCC</name><argument_list pos:start="1459:31" pos:end="1459:36">(<argument pos:start="1459:32" pos:end="1459:32"><expr pos:start="1459:32" pos:end="1459:32"><literal type="number" pos:start="1459:32" pos:end="1459:32">2</literal></expr></argument>, <argument pos:start="1459:35" pos:end="1459:35"><expr pos:start="1459:35" pos:end="1459:35"><name pos:start="1459:35" pos:end="1459:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1461:25" pos:end="1461:30">break;</break>

                    <case pos:start="1463:21" pos:end="1463:31">case <expr pos:start="1463:26" pos:end="1463:30"><literal type="number" pos:start="1463:26" pos:end="1463:30">0x083</literal></expr>:</case> <comment type="block" pos:start="1463:33" pos:end="1463:54">/* V9 fmovqcc %fcc2 */</comment>

                        <expr_stmt pos:start="1465:25" pos:end="1465:56"><expr pos:start="1465:25" pos:end="1465:55"><call pos:start="1465:25" pos:end="1465:55"><name pos:start="1465:25" pos:end="1465:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1465:42" pos:end="1465:55">(<argument pos:start="1465:43" pos:end="1465:44"><expr pos:start="1465:43" pos:end="1465:44"><name pos:start="1465:43" pos:end="1465:44">dc</name></expr></argument>, <argument pos:start="1465:47" pos:end="1465:54"><expr pos:start="1465:47" pos:end="1465:54"><name pos:start="1465:47" pos:end="1465:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1467:25" pos:end="1467:37"><expr pos:start="1467:25" pos:end="1467:36"><call pos:start="1467:25" pos:end="1467:36"><name pos:start="1467:25" pos:end="1467:30">FMOVCC</name><argument_list pos:start="1467:31" pos:end="1467:36">(<argument pos:start="1467:32" pos:end="1467:32"><expr pos:start="1467:32" pos:end="1467:32"><literal type="number" pos:start="1467:32" pos:end="1467:32">2</literal></expr></argument>, <argument pos:start="1467:35" pos:end="1467:35"><expr pos:start="1467:35" pos:end="1467:35"><name pos:start="1467:35" pos:end="1467:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1469:25" pos:end="1469:30">break;</break>

                    <case pos:start="1471:21" pos:end="1471:31">case <expr pos:start="1471:26" pos:end="1471:30"><literal type="number" pos:start="1471:26" pos:end="1471:30">0x0c1</literal></expr>:</case> <comment type="block" pos:start="1471:33" pos:end="1471:54">/* V9 fmovscc %fcc3 */</comment>

                        <expr_stmt pos:start="1473:25" pos:end="1473:37"><expr pos:start="1473:25" pos:end="1473:36"><call pos:start="1473:25" pos:end="1473:36"><name pos:start="1473:25" pos:end="1473:30">FMOVCC</name><argument_list pos:start="1473:31" pos:end="1473:36">(<argument pos:start="1473:32" pos:end="1473:32"><expr pos:start="1473:32" pos:end="1473:32"><literal type="number" pos:start="1473:32" pos:end="1473:32">3</literal></expr></argument>, <argument pos:start="1473:35" pos:end="1473:35"><expr pos:start="1473:35" pos:end="1473:35"><name pos:start="1473:35" pos:end="1473:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1475:25" pos:end="1475:30">break;</break>

                    <case pos:start="1477:21" pos:end="1477:31">case <expr pos:start="1477:26" pos:end="1477:30"><literal type="number" pos:start="1477:26" pos:end="1477:30">0x0c2</literal></expr>:</case> <comment type="block" pos:start="1477:33" pos:end="1477:54">/* V9 fmovdcc %fcc3 */</comment>

                        <expr_stmt pos:start="1479:25" pos:end="1479:37"><expr pos:start="1479:25" pos:end="1479:36"><call pos:start="1479:25" pos:end="1479:36"><name pos:start="1479:25" pos:end="1479:30">FMOVCC</name><argument_list pos:start="1479:31" pos:end="1479:36">(<argument pos:start="1479:32" pos:end="1479:32"><expr pos:start="1479:32" pos:end="1479:32"><literal type="number" pos:start="1479:32" pos:end="1479:32">3</literal></expr></argument>, <argument pos:start="1479:35" pos:end="1479:35"><expr pos:start="1479:35" pos:end="1479:35"><name pos:start="1479:35" pos:end="1479:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1481:25" pos:end="1481:30">break;</break>

                    <case pos:start="1483:21" pos:end="1483:31">case <expr pos:start="1483:26" pos:end="1483:30"><literal type="number" pos:start="1483:26" pos:end="1483:30">0x0c3</literal></expr>:</case> <comment type="block" pos:start="1483:33" pos:end="1483:54">/* V9 fmovqcc %fcc3 */</comment>

                        <expr_stmt pos:start="1485:25" pos:end="1485:56"><expr pos:start="1485:25" pos:end="1485:55"><call pos:start="1485:25" pos:end="1485:55"><name pos:start="1485:25" pos:end="1485:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1485:42" pos:end="1485:55">(<argument pos:start="1485:43" pos:end="1485:44"><expr pos:start="1485:43" pos:end="1485:44"><name pos:start="1485:43" pos:end="1485:44">dc</name></expr></argument>, <argument pos:start="1485:47" pos:end="1485:54"><expr pos:start="1485:47" pos:end="1485:54"><name pos:start="1485:47" pos:end="1485:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1487:25" pos:end="1487:37"><expr pos:start="1487:25" pos:end="1487:36"><call pos:start="1487:25" pos:end="1487:36"><name pos:start="1487:25" pos:end="1487:30">FMOVCC</name><argument_list pos:start="1487:31" pos:end="1487:36">(<argument pos:start="1487:32" pos:end="1487:32"><expr pos:start="1487:32" pos:end="1487:32"><literal type="number" pos:start="1487:32" pos:end="1487:32">3</literal></expr></argument>, <argument pos:start="1487:35" pos:end="1487:35"><expr pos:start="1487:35" pos:end="1487:35"><name pos:start="1487:35" pos:end="1487:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1489:25" pos:end="1508:0">break;</break>

<cpp:undef pos:start="1491:1" pos:end="1491:13">#<cpp:directive pos:start="1491:2" pos:end="1491:6">undef</cpp:directive> <name pos:start="1491:8" pos:end="1491:13">FMOVCC</name></cpp:undef>

<cpp:define pos:start="1493:1" pos:end="1507:31">#<cpp:directive pos:start="1493:2" pos:end="1493:7">define</cpp:directive> <cpp:macro pos:start="1493:9" pos:end="1493:23"><name pos:start="1493:9" pos:end="1493:14">FMOVCC</name><parameter_list pos:start="1493:15" pos:end="1493:23">(<parameter pos:start="1493:16" pos:end="1493:18"><type pos:start="1493:16" pos:end="1493:18"><name pos:start="1493:16" pos:end="1493:18">xcc</name></type></parameter>, <parameter pos:start="1493:21" pos:end="1493:22"><type pos:start="1493:21" pos:end="1493:22"><name pos:start="1493:21" pos:end="1493:22">sz</name></type></parameter>)</parameter_list></cpp:macro>                                                 \

                    <cpp:value pos:start="1495:21" pos:end="1507:31">do {                                                \

                        DisasCompare cmp;                               \

                        cond = GET_FIELD_SP(insn, 14, 17);              \

                        gen_compare(&amp;cmp, xcc, cond, dc);               \

                        gen_fmov##sz(dc, &amp;cmp, rd, rs2);                \

                        free_compare(&amp;cmp);                             \

                    } while (0)</cpp:value></cpp:define>



                    <case pos:start="1511:21" pos:end="1511:31">case <expr pos:start="1511:26" pos:end="1511:30"><literal type="number" pos:start="1511:26" pos:end="1511:30">0x101</literal></expr>:</case> <comment type="block" pos:start="1511:33" pos:end="1511:53">/* V9 fmovscc %icc */</comment>

                        <expr_stmt pos:start="1513:25" pos:end="1513:37"><expr pos:start="1513:25" pos:end="1513:36"><call pos:start="1513:25" pos:end="1513:36"><name pos:start="1513:25" pos:end="1513:30">FMOVCC</name><argument_list pos:start="1513:31" pos:end="1513:36">(<argument pos:start="1513:32" pos:end="1513:32"><expr pos:start="1513:32" pos:end="1513:32"><literal type="number" pos:start="1513:32" pos:end="1513:32">0</literal></expr></argument>, <argument pos:start="1513:35" pos:end="1513:35"><expr pos:start="1513:35" pos:end="1513:35"><name pos:start="1513:35" pos:end="1513:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1515:25" pos:end="1515:30">break;</break>

                    <case pos:start="1517:21" pos:end="1517:31">case <expr pos:start="1517:26" pos:end="1517:30"><literal type="number" pos:start="1517:26" pos:end="1517:30">0x102</literal></expr>:</case> <comment type="block" pos:start="1517:33" pos:end="1517:53">/* V9 fmovdcc %icc */</comment>

                        <expr_stmt pos:start="1519:25" pos:end="1519:37"><expr pos:start="1519:25" pos:end="1519:36"><call pos:start="1519:25" pos:end="1519:36"><name pos:start="1519:25" pos:end="1519:30">FMOVCC</name><argument_list pos:start="1519:31" pos:end="1519:36">(<argument pos:start="1519:32" pos:end="1519:32"><expr pos:start="1519:32" pos:end="1519:32"><literal type="number" pos:start="1519:32" pos:end="1519:32">0</literal></expr></argument>, <argument pos:start="1519:35" pos:end="1519:35"><expr pos:start="1519:35" pos:end="1519:35"><name pos:start="1519:35" pos:end="1519:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1521:25" pos:end="1521:30">break;</break>

                    <case pos:start="1523:21" pos:end="1523:31">case <expr pos:start="1523:26" pos:end="1523:30"><literal type="number" pos:start="1523:26" pos:end="1523:30">0x103</literal></expr>:</case> <comment type="block" pos:start="1523:33" pos:end="1523:53">/* V9 fmovqcc %icc */</comment>

                        <expr_stmt pos:start="1525:25" pos:end="1525:56"><expr pos:start="1525:25" pos:end="1525:55"><call pos:start="1525:25" pos:end="1525:55"><name pos:start="1525:25" pos:end="1525:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1525:42" pos:end="1525:55">(<argument pos:start="1525:43" pos:end="1525:44"><expr pos:start="1525:43" pos:end="1525:44"><name pos:start="1525:43" pos:end="1525:44">dc</name></expr></argument>, <argument pos:start="1525:47" pos:end="1525:54"><expr pos:start="1525:47" pos:end="1525:54"><name pos:start="1525:47" pos:end="1525:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1527:25" pos:end="1527:37"><expr pos:start="1527:25" pos:end="1527:36"><call pos:start="1527:25" pos:end="1527:36"><name pos:start="1527:25" pos:end="1527:30">FMOVCC</name><argument_list pos:start="1527:31" pos:end="1527:36">(<argument pos:start="1527:32" pos:end="1527:32"><expr pos:start="1527:32" pos:end="1527:32"><literal type="number" pos:start="1527:32" pos:end="1527:32">0</literal></expr></argument>, <argument pos:start="1527:35" pos:end="1527:35"><expr pos:start="1527:35" pos:end="1527:35"><name pos:start="1527:35" pos:end="1527:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1529:25" pos:end="1529:30">break;</break>

                    <case pos:start="1531:21" pos:end="1531:31">case <expr pos:start="1531:26" pos:end="1531:30"><literal type="number" pos:start="1531:26" pos:end="1531:30">0x181</literal></expr>:</case> <comment type="block" pos:start="1531:33" pos:end="1531:53">/* V9 fmovscc %xcc */</comment>

                        <expr_stmt pos:start="1533:25" pos:end="1533:37"><expr pos:start="1533:25" pos:end="1533:36"><call pos:start="1533:25" pos:end="1533:36"><name pos:start="1533:25" pos:end="1533:30">FMOVCC</name><argument_list pos:start="1533:31" pos:end="1533:36">(<argument pos:start="1533:32" pos:end="1533:32"><expr pos:start="1533:32" pos:end="1533:32"><literal type="number" pos:start="1533:32" pos:end="1533:32">1</literal></expr></argument>, <argument pos:start="1533:35" pos:end="1533:35"><expr pos:start="1533:35" pos:end="1533:35"><name pos:start="1533:35" pos:end="1533:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1535:25" pos:end="1535:30">break;</break>

                    <case pos:start="1537:21" pos:end="1537:31">case <expr pos:start="1537:26" pos:end="1537:30"><literal type="number" pos:start="1537:26" pos:end="1537:30">0x182</literal></expr>:</case> <comment type="block" pos:start="1537:33" pos:end="1537:53">/* V9 fmovdcc %xcc */</comment>

                        <expr_stmt pos:start="1539:25" pos:end="1539:37"><expr pos:start="1539:25" pos:end="1539:36"><call pos:start="1539:25" pos:end="1539:36"><name pos:start="1539:25" pos:end="1539:30">FMOVCC</name><argument_list pos:start="1539:31" pos:end="1539:36">(<argument pos:start="1539:32" pos:end="1539:32"><expr pos:start="1539:32" pos:end="1539:32"><literal type="number" pos:start="1539:32" pos:end="1539:32">1</literal></expr></argument>, <argument pos:start="1539:35" pos:end="1539:35"><expr pos:start="1539:35" pos:end="1539:35"><name pos:start="1539:35" pos:end="1539:35">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1541:25" pos:end="1541:30">break;</break>

                    <case pos:start="1543:21" pos:end="1543:31">case <expr pos:start="1543:26" pos:end="1543:30"><literal type="number" pos:start="1543:26" pos:end="1543:30">0x183</literal></expr>:</case> <comment type="block" pos:start="1543:33" pos:end="1543:53">/* V9 fmovqcc %xcc */</comment>

                        <expr_stmt pos:start="1545:25" pos:end="1545:56"><expr pos:start="1545:25" pos:end="1545:55"><call pos:start="1545:25" pos:end="1545:55"><name pos:start="1545:25" pos:end="1545:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1545:42" pos:end="1545:55">(<argument pos:start="1545:43" pos:end="1545:44"><expr pos:start="1545:43" pos:end="1545:44"><name pos:start="1545:43" pos:end="1545:44">dc</name></expr></argument>, <argument pos:start="1545:47" pos:end="1545:54"><expr pos:start="1545:47" pos:end="1545:54"><name pos:start="1545:47" pos:end="1545:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1547:25" pos:end="1547:37"><expr pos:start="1547:25" pos:end="1547:36"><call pos:start="1547:25" pos:end="1547:36"><name pos:start="1547:25" pos:end="1547:30">FMOVCC</name><argument_list pos:start="1547:31" pos:end="1547:36">(<argument pos:start="1547:32" pos:end="1547:32"><expr pos:start="1547:32" pos:end="1547:32"><literal type="number" pos:start="1547:32" pos:end="1547:32">1</literal></expr></argument>, <argument pos:start="1547:35" pos:end="1547:35"><expr pos:start="1547:35" pos:end="1547:35"><name pos:start="1547:35" pos:end="1547:35">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1549:25" pos:end="1554:0">break;</break>

<cpp:undef pos:start="1551:1" pos:end="1551:13">#<cpp:directive pos:start="1551:2" pos:end="1551:6">undef</cpp:directive> <name pos:start="1551:8" pos:end="1551:13">FMOVCC</name></cpp:undef>

<cpp:endif pos:start="1553:1" pos:end="1553:6">#<cpp:directive pos:start="1553:2" pos:end="1553:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="1555:21" pos:end="1555:30">case <expr pos:start="1555:26" pos:end="1555:29"><literal type="number" pos:start="1555:26" pos:end="1555:29">0x51</literal></expr>:</case> <comment type="block" pos:start="1555:32" pos:end="1555:51">/* fcmps, V9 %fcc */</comment>

                        <expr_stmt pos:start="1557:25" pos:end="1557:62"><expr pos:start="1557:25" pos:end="1557:61"><name pos:start="1557:25" pos:end="1557:35">cpu_src1_32</name> <operator pos:start="1557:37" pos:end="1557:37">=</operator> <call pos:start="1557:39" pos:end="1557:61"><name pos:start="1557:39" pos:end="1557:52">gen_load_fpr_F</name><argument_list pos:start="1557:53" pos:end="1557:61">(<argument pos:start="1557:54" pos:end="1557:55"><expr pos:start="1557:54" pos:end="1557:55"><name pos:start="1557:54" pos:end="1557:55">dc</name></expr></argument>, <argument pos:start="1557:58" pos:end="1557:60"><expr pos:start="1557:58" pos:end="1557:60"><name pos:start="1557:58" pos:end="1557:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1559:25" pos:end="1559:62"><expr pos:start="1559:25" pos:end="1559:61"><name pos:start="1559:25" pos:end="1559:35">cpu_src2_32</name> <operator pos:start="1559:37" pos:end="1559:37">=</operator> <call pos:start="1559:39" pos:end="1559:61"><name pos:start="1559:39" pos:end="1559:52">gen_load_fpr_F</name><argument_list pos:start="1559:53" pos:end="1559:61">(<argument pos:start="1559:54" pos:end="1559:55"><expr pos:start="1559:54" pos:end="1559:55"><name pos:start="1559:54" pos:end="1559:55">dc</name></expr></argument>, <argument pos:start="1559:58" pos:end="1559:60"><expr pos:start="1559:58" pos:end="1559:60"><name pos:start="1559:58" pos:end="1559:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1561:25" pos:end="1561:71"><expr pos:start="1561:25" pos:end="1561:70"><call pos:start="1561:25" pos:end="1561:70"><name pos:start="1561:25" pos:end="1561:36">gen_op_fcmps</name><argument_list pos:start="1561:37" pos:end="1561:70">(<argument pos:start="1561:38" pos:end="1561:43"><expr pos:start="1561:38" pos:end="1561:43"><name pos:start="1561:38" pos:end="1561:39">rd</name> <operator pos:start="1561:41" pos:end="1561:41">&amp;</operator> <literal type="number" pos:start="1561:43" pos:end="1561:43">3</literal></expr></argument>, <argument pos:start="1561:46" pos:end="1561:56"><expr pos:start="1561:46" pos:end="1561:56"><name pos:start="1561:46" pos:end="1561:56">cpu_src1_32</name></expr></argument>, <argument pos:start="1561:59" pos:end="1561:69"><expr pos:start="1561:59" pos:end="1561:69"><name pos:start="1561:59" pos:end="1561:69">cpu_src2_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1563:25" pos:end="1563:30">break;</break>

                    <case pos:start="1565:21" pos:end="1565:30">case <expr pos:start="1565:26" pos:end="1565:29"><literal type="number" pos:start="1565:26" pos:end="1565:29">0x52</literal></expr>:</case> <comment type="block" pos:start="1565:32" pos:end="1565:51">/* fcmpd, V9 %fcc */</comment>

                        <expr_stmt pos:start="1567:25" pos:end="1567:62"><expr pos:start="1567:25" pos:end="1567:61"><name pos:start="1567:25" pos:end="1567:35">cpu_src1_64</name> <operator pos:start="1567:37" pos:end="1567:37">=</operator> <call pos:start="1567:39" pos:end="1567:61"><name pos:start="1567:39" pos:end="1567:52">gen_load_fpr_D</name><argument_list pos:start="1567:53" pos:end="1567:61">(<argument pos:start="1567:54" pos:end="1567:55"><expr pos:start="1567:54" pos:end="1567:55"><name pos:start="1567:54" pos:end="1567:55">dc</name></expr></argument>, <argument pos:start="1567:58" pos:end="1567:60"><expr pos:start="1567:58" pos:end="1567:60"><name pos:start="1567:58" pos:end="1567:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1569:25" pos:end="1569:62"><expr pos:start="1569:25" pos:end="1569:61"><name pos:start="1569:25" pos:end="1569:35">cpu_src2_64</name> <operator pos:start="1569:37" pos:end="1569:37">=</operator> <call pos:start="1569:39" pos:end="1569:61"><name pos:start="1569:39" pos:end="1569:52">gen_load_fpr_D</name><argument_list pos:start="1569:53" pos:end="1569:61">(<argument pos:start="1569:54" pos:end="1569:55"><expr pos:start="1569:54" pos:end="1569:55"><name pos:start="1569:54" pos:end="1569:55">dc</name></expr></argument>, <argument pos:start="1569:58" pos:end="1569:60"><expr pos:start="1569:58" pos:end="1569:60"><name pos:start="1569:58" pos:end="1569:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1571:25" pos:end="1571:71"><expr pos:start="1571:25" pos:end="1571:70"><call pos:start="1571:25" pos:end="1571:70"><name pos:start="1571:25" pos:end="1571:36">gen_op_fcmpd</name><argument_list pos:start="1571:37" pos:end="1571:70">(<argument pos:start="1571:38" pos:end="1571:43"><expr pos:start="1571:38" pos:end="1571:43"><name pos:start="1571:38" pos:end="1571:39">rd</name> <operator pos:start="1571:41" pos:end="1571:41">&amp;</operator> <literal type="number" pos:start="1571:43" pos:end="1571:43">3</literal></expr></argument>, <argument pos:start="1571:46" pos:end="1571:56"><expr pos:start="1571:46" pos:end="1571:56"><name pos:start="1571:46" pos:end="1571:56">cpu_src1_64</name></expr></argument>, <argument pos:start="1571:59" pos:end="1571:69"><expr pos:start="1571:59" pos:end="1571:69"><name pos:start="1571:59" pos:end="1571:69">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1573:25" pos:end="1573:30">break;</break>

                    <case pos:start="1575:21" pos:end="1575:30">case <expr pos:start="1575:26" pos:end="1575:29"><literal type="number" pos:start="1575:26" pos:end="1575:29">0x53</literal></expr>:</case> <comment type="block" pos:start="1575:32" pos:end="1575:51">/* fcmpq, V9 %fcc */</comment>

                        <expr_stmt pos:start="1577:25" pos:end="1577:56"><expr pos:start="1577:25" pos:end="1577:55"><call pos:start="1577:25" pos:end="1577:55"><name pos:start="1577:25" pos:end="1577:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1577:42" pos:end="1577:55">(<argument pos:start="1577:43" pos:end="1577:44"><expr pos:start="1577:43" pos:end="1577:44"><name pos:start="1577:43" pos:end="1577:44">dc</name></expr></argument>, <argument pos:start="1577:47" pos:end="1577:54"><expr pos:start="1577:47" pos:end="1577:54"><name pos:start="1577:47" pos:end="1577:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1579:25" pos:end="1579:57"><expr pos:start="1579:25" pos:end="1579:56"><call pos:start="1579:25" pos:end="1579:56"><name pos:start="1579:25" pos:end="1579:43">gen_op_load_fpr_QT0</name><argument_list pos:start="1579:44" pos:end="1579:56">(<argument pos:start="1579:45" pos:end="1579:55"><expr pos:start="1579:45" pos:end="1579:55"><call pos:start="1579:45" pos:end="1579:55"><name pos:start="1579:45" pos:end="1579:50">QFPREG</name><argument_list pos:start="1579:51" pos:end="1579:55">(<argument pos:start="1579:52" pos:end="1579:54"><expr pos:start="1579:52" pos:end="1579:54"><name pos:start="1579:52" pos:end="1579:54">rs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1581:25" pos:end="1581:57"><expr pos:start="1581:25" pos:end="1581:56"><call pos:start="1581:25" pos:end="1581:56"><name pos:start="1581:25" pos:end="1581:43">gen_op_load_fpr_QT1</name><argument_list pos:start="1581:44" pos:end="1581:56">(<argument pos:start="1581:45" pos:end="1581:55"><expr pos:start="1581:45" pos:end="1581:55"><call pos:start="1581:45" pos:end="1581:55"><name pos:start="1581:45" pos:end="1581:50">QFPREG</name><argument_list pos:start="1581:51" pos:end="1581:55">(<argument pos:start="1581:52" pos:end="1581:54"><expr pos:start="1581:52" pos:end="1581:54"><name pos:start="1581:52" pos:end="1581:54">rs2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1583:25" pos:end="1583:45"><expr pos:start="1583:25" pos:end="1583:44"><call pos:start="1583:25" pos:end="1583:44"><name pos:start="1583:25" pos:end="1583:36">gen_op_fcmpq</name><argument_list pos:start="1583:37" pos:end="1583:44">(<argument pos:start="1583:38" pos:end="1583:43"><expr pos:start="1583:38" pos:end="1583:43"><name pos:start="1583:38" pos:end="1583:39">rd</name> <operator pos:start="1583:41" pos:end="1583:41">&amp;</operator> <literal type="number" pos:start="1583:43" pos:end="1583:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1585:25" pos:end="1585:30">break;</break>

                    <case pos:start="1587:21" pos:end="1587:30">case <expr pos:start="1587:26" pos:end="1587:29"><literal type="number" pos:start="1587:26" pos:end="1587:29">0x55</literal></expr>:</case> <comment type="block" pos:start="1587:32" pos:end="1587:52">/* fcmpes, V9 %fcc */</comment>

                        <expr_stmt pos:start="1589:25" pos:end="1589:62"><expr pos:start="1589:25" pos:end="1589:61"><name pos:start="1589:25" pos:end="1589:35">cpu_src1_32</name> <operator pos:start="1589:37" pos:end="1589:37">=</operator> <call pos:start="1589:39" pos:end="1589:61"><name pos:start="1589:39" pos:end="1589:52">gen_load_fpr_F</name><argument_list pos:start="1589:53" pos:end="1589:61">(<argument pos:start="1589:54" pos:end="1589:55"><expr pos:start="1589:54" pos:end="1589:55"><name pos:start="1589:54" pos:end="1589:55">dc</name></expr></argument>, <argument pos:start="1589:58" pos:end="1589:60"><expr pos:start="1589:58" pos:end="1589:60"><name pos:start="1589:58" pos:end="1589:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1591:25" pos:end="1591:62"><expr pos:start="1591:25" pos:end="1591:61"><name pos:start="1591:25" pos:end="1591:35">cpu_src2_32</name> <operator pos:start="1591:37" pos:end="1591:37">=</operator> <call pos:start="1591:39" pos:end="1591:61"><name pos:start="1591:39" pos:end="1591:52">gen_load_fpr_F</name><argument_list pos:start="1591:53" pos:end="1591:61">(<argument pos:start="1591:54" pos:end="1591:55"><expr pos:start="1591:54" pos:end="1591:55"><name pos:start="1591:54" pos:end="1591:55">dc</name></expr></argument>, <argument pos:start="1591:58" pos:end="1591:60"><expr pos:start="1591:58" pos:end="1591:60"><name pos:start="1591:58" pos:end="1591:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1593:25" pos:end="1593:72"><expr pos:start="1593:25" pos:end="1593:71"><call pos:start="1593:25" pos:end="1593:71"><name pos:start="1593:25" pos:end="1593:37">gen_op_fcmpes</name><argument_list pos:start="1593:38" pos:end="1593:71">(<argument pos:start="1593:39" pos:end="1593:44"><expr pos:start="1593:39" pos:end="1593:44"><name pos:start="1593:39" pos:end="1593:40">rd</name> <operator pos:start="1593:42" pos:end="1593:42">&amp;</operator> <literal type="number" pos:start="1593:44" pos:end="1593:44">3</literal></expr></argument>, <argument pos:start="1593:47" pos:end="1593:57"><expr pos:start="1593:47" pos:end="1593:57"><name pos:start="1593:47" pos:end="1593:57">cpu_src1_32</name></expr></argument>, <argument pos:start="1593:60" pos:end="1593:70"><expr pos:start="1593:60" pos:end="1593:70"><name pos:start="1593:60" pos:end="1593:70">cpu_src2_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1595:25" pos:end="1595:30">break;</break>

                    <case pos:start="1597:21" pos:end="1597:30">case <expr pos:start="1597:26" pos:end="1597:29"><literal type="number" pos:start="1597:26" pos:end="1597:29">0x56</literal></expr>:</case> <comment type="block" pos:start="1597:32" pos:end="1597:52">/* fcmped, V9 %fcc */</comment>

                        <expr_stmt pos:start="1599:25" pos:end="1599:62"><expr pos:start="1599:25" pos:end="1599:61"><name pos:start="1599:25" pos:end="1599:35">cpu_src1_64</name> <operator pos:start="1599:37" pos:end="1599:37">=</operator> <call pos:start="1599:39" pos:end="1599:61"><name pos:start="1599:39" pos:end="1599:52">gen_load_fpr_D</name><argument_list pos:start="1599:53" pos:end="1599:61">(<argument pos:start="1599:54" pos:end="1599:55"><expr pos:start="1599:54" pos:end="1599:55"><name pos:start="1599:54" pos:end="1599:55">dc</name></expr></argument>, <argument pos:start="1599:58" pos:end="1599:60"><expr pos:start="1599:58" pos:end="1599:60"><name pos:start="1599:58" pos:end="1599:60">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1601:25" pos:end="1601:62"><expr pos:start="1601:25" pos:end="1601:61"><name pos:start="1601:25" pos:end="1601:35">cpu_src2_64</name> <operator pos:start="1601:37" pos:end="1601:37">=</operator> <call pos:start="1601:39" pos:end="1601:61"><name pos:start="1601:39" pos:end="1601:52">gen_load_fpr_D</name><argument_list pos:start="1601:53" pos:end="1601:61">(<argument pos:start="1601:54" pos:end="1601:55"><expr pos:start="1601:54" pos:end="1601:55"><name pos:start="1601:54" pos:end="1601:55">dc</name></expr></argument>, <argument pos:start="1601:58" pos:end="1601:60"><expr pos:start="1601:58" pos:end="1601:60"><name pos:start="1601:58" pos:end="1601:60">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1603:25" pos:end="1603:72"><expr pos:start="1603:25" pos:end="1603:71"><call pos:start="1603:25" pos:end="1603:71"><name pos:start="1603:25" pos:end="1603:37">gen_op_fcmped</name><argument_list pos:start="1603:38" pos:end="1603:71">(<argument pos:start="1603:39" pos:end="1603:44"><expr pos:start="1603:39" pos:end="1603:44"><name pos:start="1603:39" pos:end="1603:40">rd</name> <operator pos:start="1603:42" pos:end="1603:42">&amp;</operator> <literal type="number" pos:start="1603:44" pos:end="1603:44">3</literal></expr></argument>, <argument pos:start="1603:47" pos:end="1603:57"><expr pos:start="1603:47" pos:end="1603:57"><name pos:start="1603:47" pos:end="1603:57">cpu_src1_64</name></expr></argument>, <argument pos:start="1603:60" pos:end="1603:70"><expr pos:start="1603:60" pos:end="1603:70"><name pos:start="1603:60" pos:end="1603:70">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1605:25" pos:end="1605:30">break;</break>

                    <case pos:start="1607:21" pos:end="1607:30">case <expr pos:start="1607:26" pos:end="1607:29"><literal type="number" pos:start="1607:26" pos:end="1607:29">0x57</literal></expr>:</case> <comment type="block" pos:start="1607:32" pos:end="1607:52">/* fcmpeq, V9 %fcc */</comment>

                        <expr_stmt pos:start="1609:25" pos:end="1609:56"><expr pos:start="1609:25" pos:end="1609:55"><call pos:start="1609:25" pos:end="1609:55"><name pos:start="1609:25" pos:end="1609:41">CHECK_FPU_FEATURE</name><argument_list pos:start="1609:42" pos:end="1609:55">(<argument pos:start="1609:43" pos:end="1609:44"><expr pos:start="1609:43" pos:end="1609:44"><name pos:start="1609:43" pos:end="1609:44">dc</name></expr></argument>, <argument pos:start="1609:47" pos:end="1609:54"><expr pos:start="1609:47" pos:end="1609:54"><name pos:start="1609:47" pos:end="1609:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1611:25" pos:end="1611:57"><expr pos:start="1611:25" pos:end="1611:56"><call pos:start="1611:25" pos:end="1611:56"><name pos:start="1611:25" pos:end="1611:43">gen_op_load_fpr_QT0</name><argument_list pos:start="1611:44" pos:end="1611:56">(<argument pos:start="1611:45" pos:end="1611:55"><expr pos:start="1611:45" pos:end="1611:55"><call pos:start="1611:45" pos:end="1611:55"><name pos:start="1611:45" pos:end="1611:50">QFPREG</name><argument_list pos:start="1611:51" pos:end="1611:55">(<argument pos:start="1611:52" pos:end="1611:54"><expr pos:start="1611:52" pos:end="1611:54"><name pos:start="1611:52" pos:end="1611:54">rs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1613:25" pos:end="1613:57"><expr pos:start="1613:25" pos:end="1613:56"><call pos:start="1613:25" pos:end="1613:56"><name pos:start="1613:25" pos:end="1613:43">gen_op_load_fpr_QT1</name><argument_list pos:start="1613:44" pos:end="1613:56">(<argument pos:start="1613:45" pos:end="1613:55"><expr pos:start="1613:45" pos:end="1613:55"><call pos:start="1613:45" pos:end="1613:55"><name pos:start="1613:45" pos:end="1613:50">QFPREG</name><argument_list pos:start="1613:51" pos:end="1613:55">(<argument pos:start="1613:52" pos:end="1613:54"><expr pos:start="1613:52" pos:end="1613:54"><name pos:start="1613:52" pos:end="1613:54">rs2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1615:25" pos:end="1615:46"><expr pos:start="1615:25" pos:end="1615:45"><call pos:start="1615:25" pos:end="1615:45"><name pos:start="1615:25" pos:end="1615:37">gen_op_fcmpeq</name><argument_list pos:start="1615:38" pos:end="1615:45">(<argument pos:start="1615:39" pos:end="1615:44"><expr pos:start="1615:39" pos:end="1615:44"><name pos:start="1615:39" pos:end="1615:40">rd</name> <operator pos:start="1615:42" pos:end="1615:42">&amp;</operator> <literal type="number" pos:start="1615:44" pos:end="1615:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1617:25" pos:end="1617:30">break;</break>

                    <default pos:start="1619:21" pos:end="1619:28">default:</default>

                        <goto pos:start="1621:25" pos:end="1621:42">goto <name pos:start="1621:30" pos:end="1621:41">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="1625:15" pos:end="1701:13">else if <condition pos:start="1625:23" pos:end="1625:34">(<expr pos:start="1625:24" pos:end="1625:33"><name pos:start="1625:24" pos:end="1625:26">xop</name> <operator pos:start="1625:28" pos:end="1625:29">==</operator> <literal type="number" pos:start="1625:31" pos:end="1625:33">0x2</literal></expr>)</condition> <block pos:start="1625:36" pos:end="1701:13">{<block_content pos:start="1627:17" pos:end="1700:0">

                <decl_stmt pos:start="1627:17" pos:end="1627:48"><decl pos:start="1627:17" pos:end="1627:47"><type pos:start="1627:17" pos:end="1627:20"><name pos:start="1627:17" pos:end="1627:20">TCGv</name></type> <name pos:start="1627:22" pos:end="1627:24">dst</name> <init pos:start="1627:26" pos:end="1627:47">= <expr pos:start="1627:28" pos:end="1627:47"><call pos:start="1627:28" pos:end="1627:47"><name pos:start="1627:28" pos:end="1627:39">gen_dest_gpr</name><argument_list pos:start="1627:40" pos:end="1627:47">(<argument pos:start="1627:41" pos:end="1627:42"><expr pos:start="1627:41" pos:end="1627:42"><name pos:start="1627:41" pos:end="1627:42">dc</name></expr></argument>, <argument pos:start="1627:45" pos:end="1627:46"><expr pos:start="1627:45" pos:end="1627:46"><name pos:start="1627:45" pos:end="1627:46">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1629:17" pos:end="1629:46"><expr pos:start="1629:17" pos:end="1629:45"><name pos:start="1629:17" pos:end="1629:19">rs1</name> <operator pos:start="1629:21" pos:end="1629:21">=</operator> <call pos:start="1629:23" pos:end="1629:45"><name pos:start="1629:23" pos:end="1629:31">GET_FIELD</name><argument_list pos:start="1629:32" pos:end="1629:45">(<argument pos:start="1629:33" pos:end="1629:36"><expr pos:start="1629:33" pos:end="1629:36"><name pos:start="1629:33" pos:end="1629:36">insn</name></expr></argument>, <argument pos:start="1629:39" pos:end="1629:40"><expr pos:start="1629:39" pos:end="1629:40"><literal type="number" pos:start="1629:39" pos:end="1629:40">13</literal></expr></argument>, <argument pos:start="1629:43" pos:end="1629:44"><expr pos:start="1629:43" pos:end="1629:44"><literal type="number" pos:start="1629:43" pos:end="1629:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1631:17" pos:end="1700:0"><if pos:start="1631:17" pos:end="1663:17">if <condition pos:start="1631:20" pos:end="1631:29">(<expr pos:start="1631:21" pos:end="1631:28"><name pos:start="1631:21" pos:end="1631:23">rs1</name> <operator pos:start="1631:25" pos:end="1631:26">==</operator> <literal type="number" pos:start="1631:28" pos:end="1631:28">0</literal></expr>)</condition> <block pos:start="1631:31" pos:end="1663:17">{<block_content pos:start="1635:21" pos:end="1661:21">

                    <comment type="block" pos:start="1633:21" pos:end="1633:69">/* clr/mov shortcut : or %g0, x, y -&gt; mov x, y */</comment>

                    <if_stmt pos:start="1635:21" pos:end="1661:21"><if pos:start="1635:21" pos:end="1643:21">if <condition pos:start="1635:24" pos:end="1635:31">(<expr pos:start="1635:25" pos:end="1635:30"><name pos:start="1635:25" pos:end="1635:30">IS_IMM</name></expr>)</condition> <block pos:start="1635:33" pos:end="1643:21">{<block_content pos:start="1637:25" pos:end="1641:51">       <comment type="block" pos:start="1635:41" pos:end="1635:55">/* immediate */</comment>

                        <expr_stmt pos:start="1637:25" pos:end="1637:56"><expr pos:start="1637:25" pos:end="1637:55"><name pos:start="1637:25" pos:end="1637:28">simm</name> <operator pos:start="1637:30" pos:end="1637:30">=</operator> <call pos:start="1637:32" pos:end="1637:55"><name pos:start="1637:32" pos:end="1637:41">GET_FIELDs</name><argument_list pos:start="1637:42" pos:end="1637:55">(<argument pos:start="1637:43" pos:end="1637:46"><expr pos:start="1637:43" pos:end="1637:46"><name pos:start="1637:43" pos:end="1637:46">insn</name></expr></argument>, <argument pos:start="1637:49" pos:end="1637:50"><expr pos:start="1637:49" pos:end="1637:50"><literal type="number" pos:start="1637:49" pos:end="1637:50">19</literal></expr></argument>, <argument pos:start="1637:53" pos:end="1637:54"><expr pos:start="1637:53" pos:end="1637:54"><literal type="number" pos:start="1637:53" pos:end="1637:54">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1639:25" pos:end="1639:51"><expr pos:start="1639:25" pos:end="1639:50"><call pos:start="1639:25" pos:end="1639:50"><name pos:start="1639:25" pos:end="1639:39">tcg_gen_movi_tl</name><argument_list pos:start="1639:40" pos:end="1639:50">(<argument pos:start="1639:41" pos:end="1639:43"><expr pos:start="1639:41" pos:end="1639:43"><name pos:start="1639:41" pos:end="1639:43">dst</name></expr></argument>, <argument pos:start="1639:46" pos:end="1639:49"><expr pos:start="1639:46" pos:end="1639:49"><name pos:start="1639:46" pos:end="1639:49">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1641:25" pos:end="1641:51"><expr pos:start="1641:25" pos:end="1641:50"><call pos:start="1641:25" pos:end="1641:50"><name pos:start="1641:25" pos:end="1641:37">gen_store_gpr</name><argument_list pos:start="1641:38" pos:end="1641:50">(<argument pos:start="1641:39" pos:end="1641:40"><expr pos:start="1641:39" pos:end="1641:40"><name pos:start="1641:39" pos:end="1641:40">dc</name></expr></argument>, <argument pos:start="1641:43" pos:end="1641:44"><expr pos:start="1641:43" pos:end="1641:44"><name pos:start="1641:43" pos:end="1641:44">rd</name></expr></argument>, <argument pos:start="1641:47" pos:end="1641:49"><expr pos:start="1641:47" pos:end="1641:49"><name pos:start="1641:47" pos:end="1641:49">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1643:23" pos:end="1661:21">else <block pos:start="1643:28" pos:end="1661:21">{<block_content pos:start="1645:25" pos:end="1659:25">            <comment type="block" pos:start="1643:41" pos:end="1643:54">/* register */</comment>

                        <expr_stmt pos:start="1645:25" pos:end="1645:54"><expr pos:start="1645:25" pos:end="1645:53"><name pos:start="1645:25" pos:end="1645:27">rs2</name> <operator pos:start="1645:29" pos:end="1645:29">=</operator> <call pos:start="1645:31" pos:end="1645:53"><name pos:start="1645:31" pos:end="1645:39">GET_FIELD</name><argument_list pos:start="1645:40" pos:end="1645:53">(<argument pos:start="1645:41" pos:end="1645:44"><expr pos:start="1645:41" pos:end="1645:44"><name pos:start="1645:41" pos:end="1645:44">insn</name></expr></argument>, <argument pos:start="1645:47" pos:end="1645:48"><expr pos:start="1645:47" pos:end="1645:48"><literal type="number" pos:start="1645:47" pos:end="1645:48">27</literal></expr></argument>, <argument pos:start="1645:51" pos:end="1645:52"><expr pos:start="1645:51" pos:end="1645:52"><literal type="number" pos:start="1645:51" pos:end="1645:52">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1647:25" pos:end="1659:25"><if pos:start="1647:25" pos:end="1653:25">if <condition pos:start="1647:28" pos:end="1647:37">(<expr pos:start="1647:29" pos:end="1647:36"><name pos:start="1647:29" pos:end="1647:31">rs2</name> <operator pos:start="1647:33" pos:end="1647:34">==</operator> <literal type="number" pos:start="1647:36" pos:end="1647:36">0</literal></expr>)</condition> <block pos:start="1647:39" pos:end="1653:25">{<block_content pos:start="1649:29" pos:end="1651:55">

                            <expr_stmt pos:start="1649:29" pos:end="1649:52"><expr pos:start="1649:29" pos:end="1649:51"><call pos:start="1649:29" pos:end="1649:51"><name pos:start="1649:29" pos:end="1649:43">tcg_gen_movi_tl</name><argument_list pos:start="1649:44" pos:end="1649:51">(<argument pos:start="1649:45" pos:end="1649:47"><expr pos:start="1649:45" pos:end="1649:47"><name pos:start="1649:45" pos:end="1649:47">dst</name></expr></argument>, <argument pos:start="1649:50" pos:end="1649:50"><expr pos:start="1649:50" pos:end="1649:50"><literal type="number" pos:start="1649:50" pos:end="1649:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1651:29" pos:end="1651:55"><expr pos:start="1651:29" pos:end="1651:54"><call pos:start="1651:29" pos:end="1651:54"><name pos:start="1651:29" pos:end="1651:41">gen_store_gpr</name><argument_list pos:start="1651:42" pos:end="1651:54">(<argument pos:start="1651:43" pos:end="1651:44"><expr pos:start="1651:43" pos:end="1651:44"><name pos:start="1651:43" pos:end="1651:44">dc</name></expr></argument>, <argument pos:start="1651:47" pos:end="1651:48"><expr pos:start="1651:47" pos:end="1651:48"><name pos:start="1651:47" pos:end="1651:48">rd</name></expr></argument>, <argument pos:start="1651:51" pos:end="1651:53"><expr pos:start="1651:51" pos:end="1651:53"><name pos:start="1651:51" pos:end="1651:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1653:27" pos:end="1659:25">else <block pos:start="1653:32" pos:end="1659:25">{<block_content pos:start="1655:29" pos:end="1657:60">

                            <expr_stmt pos:start="1655:29" pos:end="1655:61"><expr pos:start="1655:29" pos:end="1655:60"><name pos:start="1655:29" pos:end="1655:36">cpu_src2</name> <operator pos:start="1655:38" pos:end="1655:38">=</operator> <call pos:start="1655:40" pos:end="1655:60"><name pos:start="1655:40" pos:end="1655:51">gen_load_gpr</name><argument_list pos:start="1655:52" pos:end="1655:60">(<argument pos:start="1655:53" pos:end="1655:54"><expr pos:start="1655:53" pos:end="1655:54"><name pos:start="1655:53" pos:end="1655:54">dc</name></expr></argument>, <argument pos:start="1655:57" pos:end="1655:59"><expr pos:start="1655:57" pos:end="1655:59"><name pos:start="1655:57" pos:end="1655:59">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1657:29" pos:end="1657:60"><expr pos:start="1657:29" pos:end="1657:59"><call pos:start="1657:29" pos:end="1657:59"><name pos:start="1657:29" pos:end="1657:41">gen_store_gpr</name><argument_list pos:start="1657:42" pos:end="1657:59">(<argument pos:start="1657:43" pos:end="1657:44"><expr pos:start="1657:43" pos:end="1657:44"><name pos:start="1657:43" pos:end="1657:44">dc</name></expr></argument>, <argument pos:start="1657:47" pos:end="1657:48"><expr pos:start="1657:47" pos:end="1657:48"><name pos:start="1657:47" pos:end="1657:48">rd</name></expr></argument>, <argument pos:start="1657:51" pos:end="1657:58"><expr pos:start="1657:51" pos:end="1657:58"><name pos:start="1657:51" pos:end="1657:58">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1663:19" pos:end="1700:0">else <block pos:start="1663:24" pos:end="1700:0">{<block_content pos:start="1665:21" pos:end="1695:21">

                    <expr_stmt pos:start="1665:21" pos:end="1665:50"><expr pos:start="1665:21" pos:end="1665:49"><name pos:start="1665:21" pos:end="1665:28">cpu_src1</name> <operator pos:start="1665:30" pos:end="1665:30">=</operator> <call pos:start="1665:32" pos:end="1665:49"><name pos:start="1665:32" pos:end="1665:39">get_src1</name><argument_list pos:start="1665:40" pos:end="1665:49">(<argument pos:start="1665:41" pos:end="1665:42"><expr pos:start="1665:41" pos:end="1665:42"><name pos:start="1665:41" pos:end="1665:42">dc</name></expr></argument>, <argument pos:start="1665:45" pos:end="1665:48"><expr pos:start="1665:45" pos:end="1665:48"><name pos:start="1665:45" pos:end="1665:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1667:21" pos:end="1695:21"><if pos:start="1667:21" pos:end="1675:21">if <condition pos:start="1667:24" pos:end="1667:31">(<expr pos:start="1667:25" pos:end="1667:30"><name pos:start="1667:25" pos:end="1667:30">IS_IMM</name></expr>)</condition> <block pos:start="1667:33" pos:end="1675:21">{<block_content pos:start="1669:25" pos:end="1673:51">       <comment type="block" pos:start="1667:41" pos:end="1667:55">/* immediate */</comment>

                        <expr_stmt pos:start="1669:25" pos:end="1669:56"><expr pos:start="1669:25" pos:end="1669:55"><name pos:start="1669:25" pos:end="1669:28">simm</name> <operator pos:start="1669:30" pos:end="1669:30">=</operator> <call pos:start="1669:32" pos:end="1669:55"><name pos:start="1669:32" pos:end="1669:41">GET_FIELDs</name><argument_list pos:start="1669:42" pos:end="1669:55">(<argument pos:start="1669:43" pos:end="1669:46"><expr pos:start="1669:43" pos:end="1669:46"><name pos:start="1669:43" pos:end="1669:46">insn</name></expr></argument>, <argument pos:start="1669:49" pos:end="1669:50"><expr pos:start="1669:49" pos:end="1669:50"><literal type="number" pos:start="1669:49" pos:end="1669:50">19</literal></expr></argument>, <argument pos:start="1669:53" pos:end="1669:54"><expr pos:start="1669:53" pos:end="1669:54"><literal type="number" pos:start="1669:53" pos:end="1669:54">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1671:25" pos:end="1671:60"><expr pos:start="1671:25" pos:end="1671:59"><call pos:start="1671:25" pos:end="1671:59"><name pos:start="1671:25" pos:end="1671:38">tcg_gen_ori_tl</name><argument_list pos:start="1671:39" pos:end="1671:59">(<argument pos:start="1671:40" pos:end="1671:42"><expr pos:start="1671:40" pos:end="1671:42"><name pos:start="1671:40" pos:end="1671:42">dst</name></expr></argument>, <argument pos:start="1671:45" pos:end="1671:52"><expr pos:start="1671:45" pos:end="1671:52"><name pos:start="1671:45" pos:end="1671:52">cpu_src1</name></expr></argument>, <argument pos:start="1671:55" pos:end="1671:58"><expr pos:start="1671:55" pos:end="1671:58"><name pos:start="1671:55" pos:end="1671:58">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1673:25" pos:end="1673:51"><expr pos:start="1673:25" pos:end="1673:50"><call pos:start="1673:25" pos:end="1673:50"><name pos:start="1673:25" pos:end="1673:37">gen_store_gpr</name><argument_list pos:start="1673:38" pos:end="1673:50">(<argument pos:start="1673:39" pos:end="1673:40"><expr pos:start="1673:39" pos:end="1673:40"><name pos:start="1673:39" pos:end="1673:40">dc</name></expr></argument>, <argument pos:start="1673:43" pos:end="1673:44"><expr pos:start="1673:43" pos:end="1673:44"><name pos:start="1673:43" pos:end="1673:44">rd</name></expr></argument>, <argument pos:start="1673:47" pos:end="1673:49"><expr pos:start="1673:47" pos:end="1673:49"><name pos:start="1673:47" pos:end="1673:49">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1675:23" pos:end="1695:21">else <block pos:start="1675:28" pos:end="1695:21">{<block_content pos:start="1677:25" pos:end="1693:25">            <comment type="block" pos:start="1675:41" pos:end="1675:54">/* register */</comment>

                        <expr_stmt pos:start="1677:25" pos:end="1677:54"><expr pos:start="1677:25" pos:end="1677:53"><name pos:start="1677:25" pos:end="1677:27">rs2</name> <operator pos:start="1677:29" pos:end="1677:29">=</operator> <call pos:start="1677:31" pos:end="1677:53"><name pos:start="1677:31" pos:end="1677:39">GET_FIELD</name><argument_list pos:start="1677:40" pos:end="1677:53">(<argument pos:start="1677:41" pos:end="1677:44"><expr pos:start="1677:41" pos:end="1677:44"><name pos:start="1677:41" pos:end="1677:44">insn</name></expr></argument>, <argument pos:start="1677:47" pos:end="1677:48"><expr pos:start="1677:47" pos:end="1677:48"><literal type="number" pos:start="1677:47" pos:end="1677:48">27</literal></expr></argument>, <argument pos:start="1677:51" pos:end="1677:52"><expr pos:start="1677:51" pos:end="1677:52"><literal type="number" pos:start="1677:51" pos:end="1677:52">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1679:25" pos:end="1693:25"><if pos:start="1679:25" pos:end="1685:25">if <condition pos:start="1679:28" pos:end="1679:37">(<expr pos:start="1679:29" pos:end="1679:36"><name pos:start="1679:29" pos:end="1679:31">rs2</name> <operator pos:start="1679:33" pos:end="1679:34">==</operator> <literal type="number" pos:start="1679:36" pos:end="1679:36">0</literal></expr>)</condition> <block pos:start="1679:39" pos:end="1685:25">{<block_content pos:start="1683:29" pos:end="1683:60">

                            <comment type="block" pos:start="1681:29" pos:end="1681:73">/* mov shortcut:  or x, %g0, y -&gt; mov x, y */</comment>

                            <expr_stmt pos:start="1683:29" pos:end="1683:60"><expr pos:start="1683:29" pos:end="1683:59"><call pos:start="1683:29" pos:end="1683:59"><name pos:start="1683:29" pos:end="1683:41">gen_store_gpr</name><argument_list pos:start="1683:42" pos:end="1683:59">(<argument pos:start="1683:43" pos:end="1683:44"><expr pos:start="1683:43" pos:end="1683:44"><name pos:start="1683:43" pos:end="1683:44">dc</name></expr></argument>, <argument pos:start="1683:47" pos:end="1683:48"><expr pos:start="1683:47" pos:end="1683:48"><name pos:start="1683:47" pos:end="1683:48">rd</name></expr></argument>, <argument pos:start="1683:51" pos:end="1683:58"><expr pos:start="1683:51" pos:end="1683:58"><name pos:start="1683:51" pos:end="1683:58">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1685:27" pos:end="1693:25">else <block pos:start="1685:32" pos:end="1693:25">{<block_content pos:start="1687:29" pos:end="1691:55">

                            <expr_stmt pos:start="1687:29" pos:end="1687:61"><expr pos:start="1687:29" pos:end="1687:60"><name pos:start="1687:29" pos:end="1687:36">cpu_src2</name> <operator pos:start="1687:38" pos:end="1687:38">=</operator> <call pos:start="1687:40" pos:end="1687:60"><name pos:start="1687:40" pos:end="1687:51">gen_load_gpr</name><argument_list pos:start="1687:52" pos:end="1687:60">(<argument pos:start="1687:53" pos:end="1687:54"><expr pos:start="1687:53" pos:end="1687:54"><name pos:start="1687:53" pos:end="1687:54">dc</name></expr></argument>, <argument pos:start="1687:57" pos:end="1687:59"><expr pos:start="1687:57" pos:end="1687:59"><name pos:start="1687:57" pos:end="1687:59">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1689:29" pos:end="1689:67"><expr pos:start="1689:29" pos:end="1689:66"><call pos:start="1689:29" pos:end="1689:66"><name pos:start="1689:29" pos:end="1689:41">tcg_gen_or_tl</name><argument_list pos:start="1689:42" pos:end="1689:66">(<argument pos:start="1689:43" pos:end="1689:45"><expr pos:start="1689:43" pos:end="1689:45"><name pos:start="1689:43" pos:end="1689:45">dst</name></expr></argument>, <argument pos:start="1689:48" pos:end="1689:55"><expr pos:start="1689:48" pos:end="1689:55"><name pos:start="1689:48" pos:end="1689:55">cpu_src1</name></expr></argument>, <argument pos:start="1689:58" pos:end="1689:65"><expr pos:start="1689:58" pos:end="1689:65"><name pos:start="1689:58" pos:end="1689:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1691:29" pos:end="1691:55"><expr pos:start="1691:29" pos:end="1691:54"><call pos:start="1691:29" pos:end="1691:54"><name pos:start="1691:29" pos:end="1691:41">gen_store_gpr</name><argument_list pos:start="1691:42" pos:end="1691:54">(<argument pos:start="1691:43" pos:end="1691:44"><expr pos:start="1691:43" pos:end="1691:44"><name pos:start="1691:43" pos:end="1691:44">dc</name></expr></argument>, <argument pos:start="1691:47" pos:end="1691:48"><expr pos:start="1691:47" pos:end="1691:48"><name pos:start="1691:47" pos:end="1691:48">rd</name></expr></argument>, <argument pos:start="1691:51" pos:end="1691:53"><expr pos:start="1691:51" pos:end="1691:53"><name pos:start="1691:51" pos:end="1691:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="1699:1" pos:end="1699:21">#<cpp:directive pos:start="1699:2" pos:end="1699:6">ifdef</cpp:directive> <name pos:start="1699:8" pos:end="1699:21">TARGET_SPARC64</name></cpp:ifdef>

            </block_content>}</block></if> <if type="elseif" pos:start="1701:15" pos:end="1741:13">else if <condition pos:start="1701:23" pos:end="1701:35">(<expr pos:start="1701:24" pos:end="1701:34"><name pos:start="1701:24" pos:end="1701:26">xop</name> <operator pos:start="1701:28" pos:end="1701:29">==</operator> <literal type="number" pos:start="1701:31" pos:end="1701:34">0x25</literal></expr>)</condition> <block pos:start="1701:37" pos:end="1741:13">{<block_content pos:start="1703:17" pos:end="1739:47"> <comment type="block" pos:start="1701:39" pos:end="1701:56">/* sll, V9 sllx */</comment>

                <expr_stmt pos:start="1703:17" pos:end="1703:46"><expr pos:start="1703:17" pos:end="1703:45"><name pos:start="1703:17" pos:end="1703:24">cpu_src1</name> <operator pos:start="1703:26" pos:end="1703:26">=</operator> <call pos:start="1703:28" pos:end="1703:45"><name pos:start="1703:28" pos:end="1703:35">get_src1</name><argument_list pos:start="1703:36" pos:end="1703:45">(<argument pos:start="1703:37" pos:end="1703:38"><expr pos:start="1703:37" pos:end="1703:38"><name pos:start="1703:37" pos:end="1703:38">dc</name></expr></argument>, <argument pos:start="1703:41" pos:end="1703:44"><expr pos:start="1703:41" pos:end="1703:44"><name pos:start="1703:41" pos:end="1703:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1705:17" pos:end="1737:17"><if pos:start="1705:17" pos:end="1719:17">if <condition pos:start="1705:20" pos:end="1705:27">(<expr pos:start="1705:21" pos:end="1705:26"><name pos:start="1705:21" pos:end="1705:26">IS_IMM</name></expr>)</condition> <block pos:start="1705:29" pos:end="1719:17">{<block_content pos:start="1707:21" pos:end="1717:21">   <comment type="block" pos:start="1705:33" pos:end="1705:47">/* immediate */</comment>

                    <expr_stmt pos:start="1707:21" pos:end="1707:52"><expr pos:start="1707:21" pos:end="1707:51"><name pos:start="1707:21" pos:end="1707:24">simm</name> <operator pos:start="1707:26" pos:end="1707:26">=</operator> <call pos:start="1707:28" pos:end="1707:51"><name pos:start="1707:28" pos:end="1707:37">GET_FIELDs</name><argument_list pos:start="1707:38" pos:end="1707:51">(<argument pos:start="1707:39" pos:end="1707:42"><expr pos:start="1707:39" pos:end="1707:42"><name pos:start="1707:39" pos:end="1707:42">insn</name></expr></argument>, <argument pos:start="1707:45" pos:end="1707:46"><expr pos:start="1707:45" pos:end="1707:46"><literal type="number" pos:start="1707:45" pos:end="1707:46">20</literal></expr></argument>, <argument pos:start="1707:49" pos:end="1707:50"><expr pos:start="1707:49" pos:end="1707:50"><literal type="number" pos:start="1707:49" pos:end="1707:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1709:21" pos:end="1717:21"><if pos:start="1709:21" pos:end="1713:21">if <condition pos:start="1709:24" pos:end="1709:41">(<expr pos:start="1709:25" pos:end="1709:40"><name pos:start="1709:25" pos:end="1709:28">insn</name> <operator pos:start="1709:30" pos:end="1709:30">&amp;</operator> <operator pos:start="1709:32" pos:end="1709:32">(</operator><literal type="number" pos:start="1709:33" pos:end="1709:33">1</literal> <operator pos:start="1709:35" pos:end="1709:36">&lt;&lt;</operator> <literal type="number" pos:start="1709:38" pos:end="1709:39">12</literal><operator pos:start="1709:40" pos:end="1709:40">)</operator></expr>)</condition> <block pos:start="1709:43" pos:end="1713:21">{<block_content pos:start="1711:25" pos:end="1711:73">

                        <expr_stmt pos:start="1711:25" pos:end="1711:73"><expr pos:start="1711:25" pos:end="1711:72"><call pos:start="1711:25" pos:end="1711:72"><name pos:start="1711:25" pos:end="1711:40">tcg_gen_shli_i64</name><argument_list pos:start="1711:41" pos:end="1711:72">(<argument pos:start="1711:42" pos:end="1711:48"><expr pos:start="1711:42" pos:end="1711:48"><name pos:start="1711:42" pos:end="1711:48">cpu_dst</name></expr></argument>, <argument pos:start="1711:51" pos:end="1711:58"><expr pos:start="1711:51" pos:end="1711:58"><name pos:start="1711:51" pos:end="1711:58">cpu_src1</name></expr></argument>, <argument pos:start="1711:61" pos:end="1711:71"><expr pos:start="1711:61" pos:end="1711:71"><name pos:start="1711:61" pos:end="1711:64">simm</name> <operator pos:start="1711:66" pos:end="1711:66">&amp;</operator> <literal type="number" pos:start="1711:68" pos:end="1711:71">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1713:23" pos:end="1717:21">else <block pos:start="1713:28" pos:end="1717:21">{<block_content pos:start="1715:25" pos:end="1715:73">

                        <expr_stmt pos:start="1715:25" pos:end="1715:73"><expr pos:start="1715:25" pos:end="1715:72"><call pos:start="1715:25" pos:end="1715:72"><name pos:start="1715:25" pos:end="1715:40">tcg_gen_shli_i64</name><argument_list pos:start="1715:41" pos:end="1715:72">(<argument pos:start="1715:42" pos:end="1715:48"><expr pos:start="1715:42" pos:end="1715:48"><name pos:start="1715:42" pos:end="1715:48">cpu_dst</name></expr></argument>, <argument pos:start="1715:51" pos:end="1715:58"><expr pos:start="1715:51" pos:end="1715:58"><name pos:start="1715:51" pos:end="1715:58">cpu_src1</name></expr></argument>, <argument pos:start="1715:61" pos:end="1715:71"><expr pos:start="1715:61" pos:end="1715:71"><name pos:start="1715:61" pos:end="1715:64">simm</name> <operator pos:start="1715:66" pos:end="1715:66">&amp;</operator> <literal type="number" pos:start="1715:68" pos:end="1715:71">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1719:19" pos:end="1737:17">else <block pos:start="1719:24" pos:end="1737:17">{<block_content pos:start="1721:21" pos:end="1735:65">                <comment type="block" pos:start="1719:41" pos:end="1719:54">/* register */</comment>

                    <expr_stmt pos:start="1721:21" pos:end="1721:50"><expr pos:start="1721:21" pos:end="1721:49"><name pos:start="1721:21" pos:end="1721:23">rs2</name> <operator pos:start="1721:25" pos:end="1721:25">=</operator> <call pos:start="1721:27" pos:end="1721:49"><name pos:start="1721:27" pos:end="1721:35">GET_FIELD</name><argument_list pos:start="1721:36" pos:end="1721:49">(<argument pos:start="1721:37" pos:end="1721:40"><expr pos:start="1721:37" pos:end="1721:40"><name pos:start="1721:37" pos:end="1721:40">insn</name></expr></argument>, <argument pos:start="1721:43" pos:end="1721:44"><expr pos:start="1721:43" pos:end="1721:44"><literal type="number" pos:start="1721:43" pos:end="1721:44">27</literal></expr></argument>, <argument pos:start="1721:47" pos:end="1721:48"><expr pos:start="1721:47" pos:end="1721:48"><literal type="number" pos:start="1721:47" pos:end="1721:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1723:21" pos:end="1723:53"><expr pos:start="1723:21" pos:end="1723:52"><name pos:start="1723:21" pos:end="1723:28">cpu_src2</name> <operator pos:start="1723:30" pos:end="1723:30">=</operator> <call pos:start="1723:32" pos:end="1723:52"><name pos:start="1723:32" pos:end="1723:43">gen_load_gpr</name><argument_list pos:start="1723:44" pos:end="1723:52">(<argument pos:start="1723:45" pos:end="1723:46"><expr pos:start="1723:45" pos:end="1723:46"><name pos:start="1723:45" pos:end="1723:46">dc</name></expr></argument>, <argument pos:start="1723:49" pos:end="1723:51"><expr pos:start="1723:49" pos:end="1723:51"><name pos:start="1723:49" pos:end="1723:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1725:21" pos:end="1733:21"><if pos:start="1725:21" pos:end="1729:21">if <condition pos:start="1725:24" pos:end="1725:41">(<expr pos:start="1725:25" pos:end="1725:40"><name pos:start="1725:25" pos:end="1725:28">insn</name> <operator pos:start="1725:30" pos:end="1725:30">&amp;</operator> <operator pos:start="1725:32" pos:end="1725:32">(</operator><literal type="number" pos:start="1725:33" pos:end="1725:33">1</literal> <operator pos:start="1725:35" pos:end="1725:36">&lt;&lt;</operator> <literal type="number" pos:start="1725:38" pos:end="1725:39">12</literal><operator pos:start="1725:40" pos:end="1725:40">)</operator></expr>)</condition> <block pos:start="1725:43" pos:end="1729:21">{<block_content pos:start="1727:25" pos:end="1727:67">

                        <expr_stmt pos:start="1727:25" pos:end="1727:67"><expr pos:start="1727:25" pos:end="1727:66"><call pos:start="1727:25" pos:end="1727:66"><name pos:start="1727:25" pos:end="1727:40">tcg_gen_andi_i64</name><argument_list pos:start="1727:41" pos:end="1727:66">(<argument pos:start="1727:42" pos:end="1727:49"><expr pos:start="1727:42" pos:end="1727:49"><name pos:start="1727:42" pos:end="1727:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1727:52" pos:end="1727:59"><expr pos:start="1727:52" pos:end="1727:59"><name pos:start="1727:52" pos:end="1727:59">cpu_src2</name></expr></argument>, <argument pos:start="1727:62" pos:end="1727:65"><expr pos:start="1727:62" pos:end="1727:65"><literal type="number" pos:start="1727:62" pos:end="1727:65">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1729:23" pos:end="1733:21">else <block pos:start="1729:28" pos:end="1733:21">{<block_content pos:start="1731:25" pos:end="1731:67">

                        <expr_stmt pos:start="1731:25" pos:end="1731:67"><expr pos:start="1731:25" pos:end="1731:66"><call pos:start="1731:25" pos:end="1731:66"><name pos:start="1731:25" pos:end="1731:40">tcg_gen_andi_i64</name><argument_list pos:start="1731:41" pos:end="1731:66">(<argument pos:start="1731:42" pos:end="1731:49"><expr pos:start="1731:42" pos:end="1731:49"><name pos:start="1731:42" pos:end="1731:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1731:52" pos:end="1731:59"><expr pos:start="1731:52" pos:end="1731:59"><name pos:start="1731:52" pos:end="1731:59">cpu_src2</name></expr></argument>, <argument pos:start="1731:62" pos:end="1731:65"><expr pos:start="1731:62" pos:end="1731:65"><literal type="number" pos:start="1731:62" pos:end="1731:65">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1735:21" pos:end="1735:65"><expr pos:start="1735:21" pos:end="1735:64"><call pos:start="1735:21" pos:end="1735:64"><name pos:start="1735:21" pos:end="1735:35">tcg_gen_shl_i64</name><argument_list pos:start="1735:36" pos:end="1735:64">(<argument pos:start="1735:37" pos:end="1735:43"><expr pos:start="1735:37" pos:end="1735:43"><name pos:start="1735:37" pos:end="1735:43">cpu_dst</name></expr></argument>, <argument pos:start="1735:46" pos:end="1735:53"><expr pos:start="1735:46" pos:end="1735:53"><name pos:start="1735:46" pos:end="1735:53">cpu_src1</name></expr></argument>, <argument pos:start="1735:56" pos:end="1735:63"><expr pos:start="1735:56" pos:end="1735:63"><name pos:start="1735:56" pos:end="1735:63">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1739:17" pos:end="1739:47"><expr pos:start="1739:17" pos:end="1739:46"><call pos:start="1739:17" pos:end="1739:46"><name pos:start="1739:17" pos:end="1739:29">gen_store_gpr</name><argument_list pos:start="1739:30" pos:end="1739:46">(<argument pos:start="1739:31" pos:end="1739:32"><expr pos:start="1739:31" pos:end="1739:32"><name pos:start="1739:31" pos:end="1739:32">dc</name></expr></argument>, <argument pos:start="1739:35" pos:end="1739:36"><expr pos:start="1739:35" pos:end="1739:36"><name pos:start="1739:35" pos:end="1739:36">rd</name></expr></argument>, <argument pos:start="1739:39" pos:end="1739:45"><expr pos:start="1739:39" pos:end="1739:45"><name pos:start="1739:39" pos:end="1739:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1741:15" pos:end="1787:13">else if <condition pos:start="1741:23" pos:end="1741:35">(<expr pos:start="1741:24" pos:end="1741:34"><name pos:start="1741:24" pos:end="1741:26">xop</name> <operator pos:start="1741:28" pos:end="1741:29">==</operator> <literal type="number" pos:start="1741:31" pos:end="1741:34">0x26</literal></expr>)</condition> <block pos:start="1741:37" pos:end="1787:13">{<block_content pos:start="1743:17" pos:end="1785:47"> <comment type="block" pos:start="1741:39" pos:end="1741:56">/* srl, V9 srlx */</comment>

                <expr_stmt pos:start="1743:17" pos:end="1743:46"><expr pos:start="1743:17" pos:end="1743:45"><name pos:start="1743:17" pos:end="1743:24">cpu_src1</name> <operator pos:start="1743:26" pos:end="1743:26">=</operator> <call pos:start="1743:28" pos:end="1743:45"><name pos:start="1743:28" pos:end="1743:35">get_src1</name><argument_list pos:start="1743:36" pos:end="1743:45">(<argument pos:start="1743:37" pos:end="1743:38"><expr pos:start="1743:37" pos:end="1743:38"><name pos:start="1743:37" pos:end="1743:38">dc</name></expr></argument>, <argument pos:start="1743:41" pos:end="1743:44"><expr pos:start="1743:41" pos:end="1743:44"><name pos:start="1743:41" pos:end="1743:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1745:17" pos:end="1783:17"><if pos:start="1745:17" pos:end="1761:17">if <condition pos:start="1745:20" pos:end="1745:27">(<expr pos:start="1745:21" pos:end="1745:26"><name pos:start="1745:21" pos:end="1745:26">IS_IMM</name></expr>)</condition> <block pos:start="1745:29" pos:end="1761:17">{<block_content pos:start="1747:21" pos:end="1759:21">   <comment type="block" pos:start="1745:33" pos:end="1745:47">/* immediate */</comment>

                    <expr_stmt pos:start="1747:21" pos:end="1747:52"><expr pos:start="1747:21" pos:end="1747:51"><name pos:start="1747:21" pos:end="1747:24">simm</name> <operator pos:start="1747:26" pos:end="1747:26">=</operator> <call pos:start="1747:28" pos:end="1747:51"><name pos:start="1747:28" pos:end="1747:37">GET_FIELDs</name><argument_list pos:start="1747:38" pos:end="1747:51">(<argument pos:start="1747:39" pos:end="1747:42"><expr pos:start="1747:39" pos:end="1747:42"><name pos:start="1747:39" pos:end="1747:42">insn</name></expr></argument>, <argument pos:start="1747:45" pos:end="1747:46"><expr pos:start="1747:45" pos:end="1747:46"><literal type="number" pos:start="1747:45" pos:end="1747:46">20</literal></expr></argument>, <argument pos:start="1747:49" pos:end="1747:50"><expr pos:start="1747:49" pos:end="1747:50"><literal type="number" pos:start="1747:49" pos:end="1747:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1749:21" pos:end="1759:21"><if pos:start="1749:21" pos:end="1753:21">if <condition pos:start="1749:24" pos:end="1749:41">(<expr pos:start="1749:25" pos:end="1749:40"><name pos:start="1749:25" pos:end="1749:28">insn</name> <operator pos:start="1749:30" pos:end="1749:30">&amp;</operator> <operator pos:start="1749:32" pos:end="1749:32">(</operator><literal type="number" pos:start="1749:33" pos:end="1749:33">1</literal> <operator pos:start="1749:35" pos:end="1749:36">&lt;&lt;</operator> <literal type="number" pos:start="1749:38" pos:end="1749:39">12</literal><operator pos:start="1749:40" pos:end="1749:40">)</operator></expr>)</condition> <block pos:start="1749:43" pos:end="1753:21">{<block_content pos:start="1751:25" pos:end="1751:73">

                        <expr_stmt pos:start="1751:25" pos:end="1751:73"><expr pos:start="1751:25" pos:end="1751:72"><call pos:start="1751:25" pos:end="1751:72"><name pos:start="1751:25" pos:end="1751:40">tcg_gen_shri_i64</name><argument_list pos:start="1751:41" pos:end="1751:72">(<argument pos:start="1751:42" pos:end="1751:48"><expr pos:start="1751:42" pos:end="1751:48"><name pos:start="1751:42" pos:end="1751:48">cpu_dst</name></expr></argument>, <argument pos:start="1751:51" pos:end="1751:58"><expr pos:start="1751:51" pos:end="1751:58"><name pos:start="1751:51" pos:end="1751:58">cpu_src1</name></expr></argument>, <argument pos:start="1751:61" pos:end="1751:71"><expr pos:start="1751:61" pos:end="1751:71"><name pos:start="1751:61" pos:end="1751:64">simm</name> <operator pos:start="1751:66" pos:end="1751:66">&amp;</operator> <literal type="number" pos:start="1751:68" pos:end="1751:71">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1753:23" pos:end="1759:21">else <block pos:start="1753:28" pos:end="1759:21">{<block_content pos:start="1755:25" pos:end="1757:72">

                        <expr_stmt pos:start="1755:25" pos:end="1755:75"><expr pos:start="1755:25" pos:end="1755:74"><call pos:start="1755:25" pos:end="1755:74"><name pos:start="1755:25" pos:end="1755:40">tcg_gen_andi_i64</name><argument_list pos:start="1755:41" pos:end="1755:74">(<argument pos:start="1755:42" pos:end="1755:48"><expr pos:start="1755:42" pos:end="1755:48"><name pos:start="1755:42" pos:end="1755:48">cpu_dst</name></expr></argument>, <argument pos:start="1755:51" pos:end="1755:58"><expr pos:start="1755:51" pos:end="1755:58"><name pos:start="1755:51" pos:end="1755:58">cpu_src1</name></expr></argument>, <argument pos:start="1755:61" pos:end="1755:73"><expr pos:start="1755:61" pos:end="1755:73"><literal type="number" pos:start="1755:61" pos:end="1755:73">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1757:25" pos:end="1757:72"><expr pos:start="1757:25" pos:end="1757:71"><call pos:start="1757:25" pos:end="1757:71"><name pos:start="1757:25" pos:end="1757:40">tcg_gen_shri_i64</name><argument_list pos:start="1757:41" pos:end="1757:71">(<argument pos:start="1757:42" pos:end="1757:48"><expr pos:start="1757:42" pos:end="1757:48"><name pos:start="1757:42" pos:end="1757:48">cpu_dst</name></expr></argument>, <argument pos:start="1757:51" pos:end="1757:57"><expr pos:start="1757:51" pos:end="1757:57"><name pos:start="1757:51" pos:end="1757:57">cpu_dst</name></expr></argument>, <argument pos:start="1757:60" pos:end="1757:70"><expr pos:start="1757:60" pos:end="1757:70"><name pos:start="1757:60" pos:end="1757:63">simm</name> <operator pos:start="1757:65" pos:end="1757:65">&amp;</operator> <literal type="number" pos:start="1757:67" pos:end="1757:70">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1761:19" pos:end="1783:17">else <block pos:start="1761:24" pos:end="1783:17">{<block_content pos:start="1763:21" pos:end="1781:21">                <comment type="block" pos:start="1761:41" pos:end="1761:54">/* register */</comment>

                    <expr_stmt pos:start="1763:21" pos:end="1763:50"><expr pos:start="1763:21" pos:end="1763:49"><name pos:start="1763:21" pos:end="1763:23">rs2</name> <operator pos:start="1763:25" pos:end="1763:25">=</operator> <call pos:start="1763:27" pos:end="1763:49"><name pos:start="1763:27" pos:end="1763:35">GET_FIELD</name><argument_list pos:start="1763:36" pos:end="1763:49">(<argument pos:start="1763:37" pos:end="1763:40"><expr pos:start="1763:37" pos:end="1763:40"><name pos:start="1763:37" pos:end="1763:40">insn</name></expr></argument>, <argument pos:start="1763:43" pos:end="1763:44"><expr pos:start="1763:43" pos:end="1763:44"><literal type="number" pos:start="1763:43" pos:end="1763:44">27</literal></expr></argument>, <argument pos:start="1763:47" pos:end="1763:48"><expr pos:start="1763:47" pos:end="1763:48"><literal type="number" pos:start="1763:47" pos:end="1763:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1765:21" pos:end="1765:53"><expr pos:start="1765:21" pos:end="1765:52"><name pos:start="1765:21" pos:end="1765:28">cpu_src2</name> <operator pos:start="1765:30" pos:end="1765:30">=</operator> <call pos:start="1765:32" pos:end="1765:52"><name pos:start="1765:32" pos:end="1765:43">gen_load_gpr</name><argument_list pos:start="1765:44" pos:end="1765:52">(<argument pos:start="1765:45" pos:end="1765:46"><expr pos:start="1765:45" pos:end="1765:46"><name pos:start="1765:45" pos:end="1765:46">dc</name></expr></argument>, <argument pos:start="1765:49" pos:end="1765:51"><expr pos:start="1765:49" pos:end="1765:51"><name pos:start="1765:49" pos:end="1765:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1767:21" pos:end="1781:21"><if pos:start="1767:21" pos:end="1773:21">if <condition pos:start="1767:24" pos:end="1767:41">(<expr pos:start="1767:25" pos:end="1767:40"><name pos:start="1767:25" pos:end="1767:28">insn</name> <operator pos:start="1767:30" pos:end="1767:30">&amp;</operator> <operator pos:start="1767:32" pos:end="1767:32">(</operator><literal type="number" pos:start="1767:33" pos:end="1767:33">1</literal> <operator pos:start="1767:35" pos:end="1767:36">&lt;&lt;</operator> <literal type="number" pos:start="1767:38" pos:end="1767:39">12</literal><operator pos:start="1767:40" pos:end="1767:40">)</operator></expr>)</condition> <block pos:start="1767:43" pos:end="1773:21">{<block_content pos:start="1769:25" pos:end="1771:69">

                        <expr_stmt pos:start="1769:25" pos:end="1769:67"><expr pos:start="1769:25" pos:end="1769:66"><call pos:start="1769:25" pos:end="1769:66"><name pos:start="1769:25" pos:end="1769:40">tcg_gen_andi_i64</name><argument_list pos:start="1769:41" pos:end="1769:66">(<argument pos:start="1769:42" pos:end="1769:49"><expr pos:start="1769:42" pos:end="1769:49"><name pos:start="1769:42" pos:end="1769:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1769:52" pos:end="1769:59"><expr pos:start="1769:52" pos:end="1769:59"><name pos:start="1769:52" pos:end="1769:59">cpu_src2</name></expr></argument>, <argument pos:start="1769:62" pos:end="1769:65"><expr pos:start="1769:62" pos:end="1769:65"><literal type="number" pos:start="1769:62" pos:end="1769:65">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1771:25" pos:end="1771:69"><expr pos:start="1771:25" pos:end="1771:68"><call pos:start="1771:25" pos:end="1771:68"><name pos:start="1771:25" pos:end="1771:39">tcg_gen_shr_i64</name><argument_list pos:start="1771:40" pos:end="1771:68">(<argument pos:start="1771:41" pos:end="1771:47"><expr pos:start="1771:41" pos:end="1771:47"><name pos:start="1771:41" pos:end="1771:47">cpu_dst</name></expr></argument>, <argument pos:start="1771:50" pos:end="1771:57"><expr pos:start="1771:50" pos:end="1771:57"><name pos:start="1771:50" pos:end="1771:57">cpu_src1</name></expr></argument>, <argument pos:start="1771:60" pos:end="1771:67"><expr pos:start="1771:60" pos:end="1771:67"><name pos:start="1771:60" pos:end="1771:67">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1773:23" pos:end="1781:21">else <block pos:start="1773:28" pos:end="1781:21">{<block_content pos:start="1775:25" pos:end="1779:68">

                        <expr_stmt pos:start="1775:25" pos:end="1775:67"><expr pos:start="1775:25" pos:end="1775:66"><call pos:start="1775:25" pos:end="1775:66"><name pos:start="1775:25" pos:end="1775:40">tcg_gen_andi_i64</name><argument_list pos:start="1775:41" pos:end="1775:66">(<argument pos:start="1775:42" pos:end="1775:49"><expr pos:start="1775:42" pos:end="1775:49"><name pos:start="1775:42" pos:end="1775:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1775:52" pos:end="1775:59"><expr pos:start="1775:52" pos:end="1775:59"><name pos:start="1775:52" pos:end="1775:59">cpu_src2</name></expr></argument>, <argument pos:start="1775:62" pos:end="1775:65"><expr pos:start="1775:62" pos:end="1775:65"><literal type="number" pos:start="1775:62" pos:end="1775:65">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1777:25" pos:end="1777:75"><expr pos:start="1777:25" pos:end="1777:74"><call pos:start="1777:25" pos:end="1777:74"><name pos:start="1777:25" pos:end="1777:40">tcg_gen_andi_i64</name><argument_list pos:start="1777:41" pos:end="1777:74">(<argument pos:start="1777:42" pos:end="1777:48"><expr pos:start="1777:42" pos:end="1777:48"><name pos:start="1777:42" pos:end="1777:48">cpu_dst</name></expr></argument>, <argument pos:start="1777:51" pos:end="1777:58"><expr pos:start="1777:51" pos:end="1777:58"><name pos:start="1777:51" pos:end="1777:58">cpu_src1</name></expr></argument>, <argument pos:start="1777:61" pos:end="1777:73"><expr pos:start="1777:61" pos:end="1777:73"><literal type="number" pos:start="1777:61" pos:end="1777:73">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1779:25" pos:end="1779:68"><expr pos:start="1779:25" pos:end="1779:67"><call pos:start="1779:25" pos:end="1779:67"><name pos:start="1779:25" pos:end="1779:39">tcg_gen_shr_i64</name><argument_list pos:start="1779:40" pos:end="1779:67">(<argument pos:start="1779:41" pos:end="1779:47"><expr pos:start="1779:41" pos:end="1779:47"><name pos:start="1779:41" pos:end="1779:47">cpu_dst</name></expr></argument>, <argument pos:start="1779:50" pos:end="1779:56"><expr pos:start="1779:50" pos:end="1779:56"><name pos:start="1779:50" pos:end="1779:56">cpu_dst</name></expr></argument>, <argument pos:start="1779:59" pos:end="1779:66"><expr pos:start="1779:59" pos:end="1779:66"><name pos:start="1779:59" pos:end="1779:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1785:17" pos:end="1785:47"><expr pos:start="1785:17" pos:end="1785:46"><call pos:start="1785:17" pos:end="1785:46"><name pos:start="1785:17" pos:end="1785:29">gen_store_gpr</name><argument_list pos:start="1785:30" pos:end="1785:46">(<argument pos:start="1785:31" pos:end="1785:32"><expr pos:start="1785:31" pos:end="1785:32"><name pos:start="1785:31" pos:end="1785:32">dc</name></expr></argument>, <argument pos:start="1785:35" pos:end="1785:36"><expr pos:start="1785:35" pos:end="1785:36"><name pos:start="1785:35" pos:end="1785:36">rd</name></expr></argument>, <argument pos:start="1785:39" pos:end="1785:45"><expr pos:start="1785:39" pos:end="1785:45"><name pos:start="1785:39" pos:end="1785:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1787:15" pos:end="1835:13">else if <condition pos:start="1787:23" pos:end="1787:35">(<expr pos:start="1787:24" pos:end="1787:34"><name pos:start="1787:24" pos:end="1787:26">xop</name> <operator pos:start="1787:28" pos:end="1787:29">==</operator> <literal type="number" pos:start="1787:31" pos:end="1787:34">0x27</literal></expr>)</condition> <block pos:start="1787:37" pos:end="1835:13">{<block_content pos:start="1789:17" pos:end="1834:0"> <comment type="block" pos:start="1787:39" pos:end="1787:56">/* sra, V9 srax */</comment>

                <expr_stmt pos:start="1789:17" pos:end="1789:46"><expr pos:start="1789:17" pos:end="1789:45"><name pos:start="1789:17" pos:end="1789:24">cpu_src1</name> <operator pos:start="1789:26" pos:end="1789:26">=</operator> <call pos:start="1789:28" pos:end="1789:45"><name pos:start="1789:28" pos:end="1789:35">get_src1</name><argument_list pos:start="1789:36" pos:end="1789:45">(<argument pos:start="1789:37" pos:end="1789:38"><expr pos:start="1789:37" pos:end="1789:38"><name pos:start="1789:37" pos:end="1789:38">dc</name></expr></argument>, <argument pos:start="1789:41" pos:end="1789:44"><expr pos:start="1789:41" pos:end="1789:44"><name pos:start="1789:41" pos:end="1789:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1791:17" pos:end="1829:17"><if pos:start="1791:17" pos:end="1807:17">if <condition pos:start="1791:20" pos:end="1791:27">(<expr pos:start="1791:21" pos:end="1791:26"><name pos:start="1791:21" pos:end="1791:26">IS_IMM</name></expr>)</condition> <block pos:start="1791:29" pos:end="1807:17">{<block_content pos:start="1793:21" pos:end="1805:21">   <comment type="block" pos:start="1791:33" pos:end="1791:47">/* immediate */</comment>

                    <expr_stmt pos:start="1793:21" pos:end="1793:52"><expr pos:start="1793:21" pos:end="1793:51"><name pos:start="1793:21" pos:end="1793:24">simm</name> <operator pos:start="1793:26" pos:end="1793:26">=</operator> <call pos:start="1793:28" pos:end="1793:51"><name pos:start="1793:28" pos:end="1793:37">GET_FIELDs</name><argument_list pos:start="1793:38" pos:end="1793:51">(<argument pos:start="1793:39" pos:end="1793:42"><expr pos:start="1793:39" pos:end="1793:42"><name pos:start="1793:39" pos:end="1793:42">insn</name></expr></argument>, <argument pos:start="1793:45" pos:end="1793:46"><expr pos:start="1793:45" pos:end="1793:46"><literal type="number" pos:start="1793:45" pos:end="1793:46">20</literal></expr></argument>, <argument pos:start="1793:49" pos:end="1793:50"><expr pos:start="1793:49" pos:end="1793:50"><literal type="number" pos:start="1793:49" pos:end="1793:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1795:21" pos:end="1805:21"><if pos:start="1795:21" pos:end="1799:21">if <condition pos:start="1795:24" pos:end="1795:41">(<expr pos:start="1795:25" pos:end="1795:40"><name pos:start="1795:25" pos:end="1795:28">insn</name> <operator pos:start="1795:30" pos:end="1795:30">&amp;</operator> <operator pos:start="1795:32" pos:end="1795:32">(</operator><literal type="number" pos:start="1795:33" pos:end="1795:33">1</literal> <operator pos:start="1795:35" pos:end="1795:36">&lt;&lt;</operator> <literal type="number" pos:start="1795:38" pos:end="1795:39">12</literal><operator pos:start="1795:40" pos:end="1795:40">)</operator></expr>)</condition> <block pos:start="1795:43" pos:end="1799:21">{<block_content pos:start="1797:25" pos:end="1797:73">

                        <expr_stmt pos:start="1797:25" pos:end="1797:73"><expr pos:start="1797:25" pos:end="1797:72"><call pos:start="1797:25" pos:end="1797:72"><name pos:start="1797:25" pos:end="1797:40">tcg_gen_sari_i64</name><argument_list pos:start="1797:41" pos:end="1797:72">(<argument pos:start="1797:42" pos:end="1797:48"><expr pos:start="1797:42" pos:end="1797:48"><name pos:start="1797:42" pos:end="1797:48">cpu_dst</name></expr></argument>, <argument pos:start="1797:51" pos:end="1797:58"><expr pos:start="1797:51" pos:end="1797:58"><name pos:start="1797:51" pos:end="1797:58">cpu_src1</name></expr></argument>, <argument pos:start="1797:61" pos:end="1797:71"><expr pos:start="1797:61" pos:end="1797:71"><name pos:start="1797:61" pos:end="1797:64">simm</name> <operator pos:start="1797:66" pos:end="1797:66">&amp;</operator> <literal type="number" pos:start="1797:68" pos:end="1797:71">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1799:23" pos:end="1805:21">else <block pos:start="1799:28" pos:end="1805:21">{<block_content pos:start="1801:25" pos:end="1803:72">

                        <expr_stmt pos:start="1801:25" pos:end="1801:62"><expr pos:start="1801:25" pos:end="1801:61"><call pos:start="1801:25" pos:end="1801:61"><name pos:start="1801:25" pos:end="1801:42">tcg_gen_ext32s_i64</name><argument_list pos:start="1801:43" pos:end="1801:61">(<argument pos:start="1801:44" pos:end="1801:50"><expr pos:start="1801:44" pos:end="1801:50"><name pos:start="1801:44" pos:end="1801:50">cpu_dst</name></expr></argument>, <argument pos:start="1801:53" pos:end="1801:60"><expr pos:start="1801:53" pos:end="1801:60"><name pos:start="1801:53" pos:end="1801:60">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1803:25" pos:end="1803:72"><expr pos:start="1803:25" pos:end="1803:71"><call pos:start="1803:25" pos:end="1803:71"><name pos:start="1803:25" pos:end="1803:40">tcg_gen_sari_i64</name><argument_list pos:start="1803:41" pos:end="1803:71">(<argument pos:start="1803:42" pos:end="1803:48"><expr pos:start="1803:42" pos:end="1803:48"><name pos:start="1803:42" pos:end="1803:48">cpu_dst</name></expr></argument>, <argument pos:start="1803:51" pos:end="1803:57"><expr pos:start="1803:51" pos:end="1803:57"><name pos:start="1803:51" pos:end="1803:57">cpu_dst</name></expr></argument>, <argument pos:start="1803:60" pos:end="1803:70"><expr pos:start="1803:60" pos:end="1803:70"><name pos:start="1803:60" pos:end="1803:63">simm</name> <operator pos:start="1803:65" pos:end="1803:65">&amp;</operator> <literal type="number" pos:start="1803:67" pos:end="1803:70">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1807:19" pos:end="1829:17">else <block pos:start="1807:24" pos:end="1829:17">{<block_content pos:start="1809:21" pos:end="1827:21">                <comment type="block" pos:start="1807:41" pos:end="1807:54">/* register */</comment>

                    <expr_stmt pos:start="1809:21" pos:end="1809:50"><expr pos:start="1809:21" pos:end="1809:49"><name pos:start="1809:21" pos:end="1809:23">rs2</name> <operator pos:start="1809:25" pos:end="1809:25">=</operator> <call pos:start="1809:27" pos:end="1809:49"><name pos:start="1809:27" pos:end="1809:35">GET_FIELD</name><argument_list pos:start="1809:36" pos:end="1809:49">(<argument pos:start="1809:37" pos:end="1809:40"><expr pos:start="1809:37" pos:end="1809:40"><name pos:start="1809:37" pos:end="1809:40">insn</name></expr></argument>, <argument pos:start="1809:43" pos:end="1809:44"><expr pos:start="1809:43" pos:end="1809:44"><literal type="number" pos:start="1809:43" pos:end="1809:44">27</literal></expr></argument>, <argument pos:start="1809:47" pos:end="1809:48"><expr pos:start="1809:47" pos:end="1809:48"><literal type="number" pos:start="1809:47" pos:end="1809:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1811:21" pos:end="1811:53"><expr pos:start="1811:21" pos:end="1811:52"><name pos:start="1811:21" pos:end="1811:28">cpu_src2</name> <operator pos:start="1811:30" pos:end="1811:30">=</operator> <call pos:start="1811:32" pos:end="1811:52"><name pos:start="1811:32" pos:end="1811:43">gen_load_gpr</name><argument_list pos:start="1811:44" pos:end="1811:52">(<argument pos:start="1811:45" pos:end="1811:46"><expr pos:start="1811:45" pos:end="1811:46"><name pos:start="1811:45" pos:end="1811:46">dc</name></expr></argument>, <argument pos:start="1811:49" pos:end="1811:51"><expr pos:start="1811:49" pos:end="1811:51"><name pos:start="1811:49" pos:end="1811:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1813:21" pos:end="1827:21"><if pos:start="1813:21" pos:end="1819:21">if <condition pos:start="1813:24" pos:end="1813:41">(<expr pos:start="1813:25" pos:end="1813:40"><name pos:start="1813:25" pos:end="1813:28">insn</name> <operator pos:start="1813:30" pos:end="1813:30">&amp;</operator> <operator pos:start="1813:32" pos:end="1813:32">(</operator><literal type="number" pos:start="1813:33" pos:end="1813:33">1</literal> <operator pos:start="1813:35" pos:end="1813:36">&lt;&lt;</operator> <literal type="number" pos:start="1813:38" pos:end="1813:39">12</literal><operator pos:start="1813:40" pos:end="1813:40">)</operator></expr>)</condition> <block pos:start="1813:43" pos:end="1819:21">{<block_content pos:start="1815:25" pos:end="1817:69">

                        <expr_stmt pos:start="1815:25" pos:end="1815:67"><expr pos:start="1815:25" pos:end="1815:66"><call pos:start="1815:25" pos:end="1815:66"><name pos:start="1815:25" pos:end="1815:40">tcg_gen_andi_i64</name><argument_list pos:start="1815:41" pos:end="1815:66">(<argument pos:start="1815:42" pos:end="1815:49"><expr pos:start="1815:42" pos:end="1815:49"><name pos:start="1815:42" pos:end="1815:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1815:52" pos:end="1815:59"><expr pos:start="1815:52" pos:end="1815:59"><name pos:start="1815:52" pos:end="1815:59">cpu_src2</name></expr></argument>, <argument pos:start="1815:62" pos:end="1815:65"><expr pos:start="1815:62" pos:end="1815:65"><literal type="number" pos:start="1815:62" pos:end="1815:65">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1817:25" pos:end="1817:69"><expr pos:start="1817:25" pos:end="1817:68"><call pos:start="1817:25" pos:end="1817:68"><name pos:start="1817:25" pos:end="1817:39">tcg_gen_sar_i64</name><argument_list pos:start="1817:40" pos:end="1817:68">(<argument pos:start="1817:41" pos:end="1817:47"><expr pos:start="1817:41" pos:end="1817:47"><name pos:start="1817:41" pos:end="1817:47">cpu_dst</name></expr></argument>, <argument pos:start="1817:50" pos:end="1817:57"><expr pos:start="1817:50" pos:end="1817:57"><name pos:start="1817:50" pos:end="1817:57">cpu_src1</name></expr></argument>, <argument pos:start="1817:60" pos:end="1817:67"><expr pos:start="1817:60" pos:end="1817:67"><name pos:start="1817:60" pos:end="1817:67">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1819:23" pos:end="1827:21">else <block pos:start="1819:28" pos:end="1827:21">{<block_content pos:start="1821:25" pos:end="1825:68">

                        <expr_stmt pos:start="1821:25" pos:end="1821:67"><expr pos:start="1821:25" pos:end="1821:66"><call pos:start="1821:25" pos:end="1821:66"><name pos:start="1821:25" pos:end="1821:40">tcg_gen_andi_i64</name><argument_list pos:start="1821:41" pos:end="1821:66">(<argument pos:start="1821:42" pos:end="1821:49"><expr pos:start="1821:42" pos:end="1821:49"><name pos:start="1821:42" pos:end="1821:49">cpu_tmp0</name></expr></argument>, <argument pos:start="1821:52" pos:end="1821:59"><expr pos:start="1821:52" pos:end="1821:59"><name pos:start="1821:52" pos:end="1821:59">cpu_src2</name></expr></argument>, <argument pos:start="1821:62" pos:end="1821:65"><expr pos:start="1821:62" pos:end="1821:65"><literal type="number" pos:start="1821:62" pos:end="1821:65">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1823:25" pos:end="1823:62"><expr pos:start="1823:25" pos:end="1823:61"><call pos:start="1823:25" pos:end="1823:61"><name pos:start="1823:25" pos:end="1823:42">tcg_gen_ext32s_i64</name><argument_list pos:start="1823:43" pos:end="1823:61">(<argument pos:start="1823:44" pos:end="1823:50"><expr pos:start="1823:44" pos:end="1823:50"><name pos:start="1823:44" pos:end="1823:50">cpu_dst</name></expr></argument>, <argument pos:start="1823:53" pos:end="1823:60"><expr pos:start="1823:53" pos:end="1823:60"><name pos:start="1823:53" pos:end="1823:60">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1825:25" pos:end="1825:68"><expr pos:start="1825:25" pos:end="1825:67"><call pos:start="1825:25" pos:end="1825:67"><name pos:start="1825:25" pos:end="1825:39">tcg_gen_sar_i64</name><argument_list pos:start="1825:40" pos:end="1825:67">(<argument pos:start="1825:41" pos:end="1825:47"><expr pos:start="1825:41" pos:end="1825:47"><name pos:start="1825:41" pos:end="1825:47">cpu_dst</name></expr></argument>, <argument pos:start="1825:50" pos:end="1825:56"><expr pos:start="1825:50" pos:end="1825:56"><name pos:start="1825:50" pos:end="1825:56">cpu_dst</name></expr></argument>, <argument pos:start="1825:59" pos:end="1825:66"><expr pos:start="1825:59" pos:end="1825:66"><name pos:start="1825:59" pos:end="1825:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1831:17" pos:end="1834:0"><expr pos:start="1831:17" pos:end="1831:46"><call pos:start="1831:17" pos:end="1831:46"><name pos:start="1831:17" pos:end="1831:29">gen_store_gpr</name><argument_list pos:start="1831:30" pos:end="1831:46">(<argument pos:start="1831:31" pos:end="1831:32"><expr pos:start="1831:31" pos:end="1831:32"><name pos:start="1831:31" pos:end="1831:32">dc</name></expr></argument>, <argument pos:start="1831:35" pos:end="1831:36"><expr pos:start="1831:35" pos:end="1831:36"><name pos:start="1831:35" pos:end="1831:36">rd</name></expr></argument>, <argument pos:start="1831:39" pos:end="1831:45"><expr pos:start="1831:39" pos:end="1831:45"><name pos:start="1831:39" pos:end="1831:45">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1833:1" pos:end="1833:6">#<cpp:directive pos:start="1833:2" pos:end="1833:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="1835:15" pos:end="3091:13">else if <condition pos:start="1835:23" pos:end="1835:34">(<expr pos:start="1835:24" pos:end="1835:33"><name pos:start="1835:24" pos:end="1835:26">xop</name> <operator pos:start="1835:28" pos:end="1835:28">&lt;</operator> <literal type="number" pos:start="1835:30" pos:end="1835:33">0x36</literal></expr>)</condition> <block pos:start="1835:36" pos:end="3091:13">{<block_content pos:start="1837:17" pos:end="3089:17">

                <if_stmt pos:start="1837:17" pos:end="3089:17"><if pos:start="1837:17" pos:end="2101:17">if <condition pos:start="1837:20" pos:end="1837:31">(<expr pos:start="1837:21" pos:end="1837:30"><name pos:start="1837:21" pos:end="1837:23">xop</name> <operator pos:start="1837:25" pos:end="1837:25">&lt;</operator> <literal type="number" pos:start="1837:27" pos:end="1837:30">0x20</literal></expr>)</condition> <block pos:start="1837:33" pos:end="2101:17">{<block_content pos:start="1839:21" pos:end="2099:51">

                    <expr_stmt pos:start="1839:21" pos:end="1839:50"><expr pos:start="1839:21" pos:end="1839:49"><name pos:start="1839:21" pos:end="1839:28">cpu_src1</name> <operator pos:start="1839:30" pos:end="1839:30">=</operator> <call pos:start="1839:32" pos:end="1839:49"><name pos:start="1839:32" pos:end="1839:39">get_src1</name><argument_list pos:start="1839:40" pos:end="1839:49">(<argument pos:start="1839:41" pos:end="1839:42"><expr pos:start="1839:41" pos:end="1839:42"><name pos:start="1839:41" pos:end="1839:42">dc</name></expr></argument>, <argument pos:start="1839:45" pos:end="1839:48"><expr pos:start="1839:45" pos:end="1839:48"><name pos:start="1839:45" pos:end="1839:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1841:21" pos:end="1841:50"><expr pos:start="1841:21" pos:end="1841:49"><name pos:start="1841:21" pos:end="1841:28">cpu_src2</name> <operator pos:start="1841:30" pos:end="1841:30">=</operator> <call pos:start="1841:32" pos:end="1841:49"><name pos:start="1841:32" pos:end="1841:39">get_src2</name><argument_list pos:start="1841:40" pos:end="1841:49">(<argument pos:start="1841:41" pos:end="1841:42"><expr pos:start="1841:41" pos:end="1841:42"><name pos:start="1841:41" pos:end="1841:42">dc</name></expr></argument>, <argument pos:start="1841:45" pos:end="1841:48"><expr pos:start="1841:45" pos:end="1841:48"><name pos:start="1841:45" pos:end="1841:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="1843:21" pos:end="2097:21">switch <condition pos:start="1843:28" pos:end="1843:40">(<expr pos:start="1843:29" pos:end="1843:39"><name pos:start="1843:29" pos:end="1843:31">xop</name> <operator pos:start="1843:33" pos:end="1843:33">&amp;</operator> <operator pos:start="1843:35" pos:end="1843:35">~</operator><literal type="number" pos:start="1843:36" pos:end="1843:39">0x10</literal></expr>)</condition> <block pos:start="1843:42" pos:end="2097:21">{<block_content pos:start="1845:21" pos:end="2095:42">

                    <case pos:start="1845:21" pos:end="1845:29">case <expr pos:start="1845:26" pos:end="1845:28"><literal type="number" pos:start="1845:26" pos:end="1845:28">0x0</literal></expr>:</case> <comment type="block" pos:start="1845:31" pos:end="1845:39">/* add */</comment>

                        <if_stmt pos:start="1847:25" pos:end="1859:25"><if pos:start="1847:25" pos:end="1855:25">if <condition pos:start="1847:28" pos:end="1847:39">(<expr pos:start="1847:29" pos:end="1847:38"><name pos:start="1847:29" pos:end="1847:31">xop</name> <operator pos:start="1847:33" pos:end="1847:33">&amp;</operator> <literal type="number" pos:start="1847:35" pos:end="1847:38">0x10</literal></expr>)</condition> <block pos:start="1847:41" pos:end="1855:25">{<block_content pos:start="1849:29" pos:end="1853:50">

                            <expr_stmt pos:start="1849:29" pos:end="1849:71"><expr pos:start="1849:29" pos:end="1849:70"><call pos:start="1849:29" pos:end="1849:70"><name pos:start="1849:29" pos:end="1849:41">gen_op_add_cc</name><argument_list pos:start="1849:42" pos:end="1849:70">(<argument pos:start="1849:43" pos:end="1849:49"><expr pos:start="1849:43" pos:end="1849:49"><name pos:start="1849:43" pos:end="1849:49">cpu_dst</name></expr></argument>, <argument pos:start="1849:52" pos:end="1849:59"><expr pos:start="1849:52" pos:end="1849:59"><name pos:start="1849:52" pos:end="1849:59">cpu_src1</name></expr></argument>, <argument pos:start="1849:62" pos:end="1849:69"><expr pos:start="1849:62" pos:end="1849:69"><name pos:start="1849:62" pos:end="1849:69">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1851:29" pos:end="1851:67"><expr pos:start="1851:29" pos:end="1851:66"><call pos:start="1851:29" pos:end="1851:66"><name pos:start="1851:29" pos:end="1851:44">tcg_gen_movi_i32</name><argument_list pos:start="1851:45" pos:end="1851:66">(<argument pos:start="1851:46" pos:end="1851:54"><expr pos:start="1851:46" pos:end="1851:54"><name pos:start="1851:46" pos:end="1851:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1851:57" pos:end="1851:65"><expr pos:start="1851:57" pos:end="1851:65"><name pos:start="1851:57" pos:end="1851:65">CC_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1853:29" pos:end="1853:50"><expr pos:start="1853:29" pos:end="1853:49"><name pos:start="1853:29" pos:end="1853:37"><name pos:start="1853:29" pos:end="1853:30">dc</name><operator pos:start="1853:31" pos:end="1853:32">-&gt;</operator><name pos:start="1853:33" pos:end="1853:37">cc_op</name></name> <operator pos:start="1853:39" pos:end="1853:39">=</operator> <name pos:start="1853:41" pos:end="1853:49">CC_OP_ADD</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1855:27" pos:end="1859:25">else <block pos:start="1855:32" pos:end="1859:25">{<block_content pos:start="1857:29" pos:end="1857:72">

                            <expr_stmt pos:start="1857:29" pos:end="1857:72"><expr pos:start="1857:29" pos:end="1857:71"><call pos:start="1857:29" pos:end="1857:71"><name pos:start="1857:29" pos:end="1857:42">tcg_gen_add_tl</name><argument_list pos:start="1857:43" pos:end="1857:71">(<argument pos:start="1857:44" pos:end="1857:50"><expr pos:start="1857:44" pos:end="1857:50"><name pos:start="1857:44" pos:end="1857:50">cpu_dst</name></expr></argument>, <argument pos:start="1857:53" pos:end="1857:60"><expr pos:start="1857:53" pos:end="1857:60"><name pos:start="1857:53" pos:end="1857:60">cpu_src1</name></expr></argument>, <argument pos:start="1857:63" pos:end="1857:70"><expr pos:start="1857:63" pos:end="1857:70"><name pos:start="1857:63" pos:end="1857:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1861:25" pos:end="1861:30">break;</break>

                    <case pos:start="1863:21" pos:end="1863:29">case <expr pos:start="1863:26" pos:end="1863:28"><literal type="number" pos:start="1863:26" pos:end="1863:28">0x1</literal></expr>:</case> <comment type="block" pos:start="1863:31" pos:end="1863:39">/* and */</comment>

                        <expr_stmt pos:start="1865:25" pos:end="1865:68"><expr pos:start="1865:25" pos:end="1865:67"><call pos:start="1865:25" pos:end="1865:67"><name pos:start="1865:25" pos:end="1865:38">tcg_gen_and_tl</name><argument_list pos:start="1865:39" pos:end="1865:67">(<argument pos:start="1865:40" pos:end="1865:46"><expr pos:start="1865:40" pos:end="1865:46"><name pos:start="1865:40" pos:end="1865:46">cpu_dst</name></expr></argument>, <argument pos:start="1865:49" pos:end="1865:56"><expr pos:start="1865:49" pos:end="1865:56"><name pos:start="1865:49" pos:end="1865:56">cpu_src1</name></expr></argument>, <argument pos:start="1865:59" pos:end="1865:66"><expr pos:start="1865:59" pos:end="1865:66"><name pos:start="1865:59" pos:end="1865:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1867:25" pos:end="1875:25"><if pos:start="1867:25" pos:end="1875:25">if <condition pos:start="1867:28" pos:end="1867:39">(<expr pos:start="1867:29" pos:end="1867:38"><name pos:start="1867:29" pos:end="1867:31">xop</name> <operator pos:start="1867:33" pos:end="1867:33">&amp;</operator> <literal type="number" pos:start="1867:35" pos:end="1867:38">0x10</literal></expr>)</condition> <block pos:start="1867:41" pos:end="1875:25">{<block_content pos:start="1869:29" pos:end="1873:52">

                            <expr_stmt pos:start="1869:29" pos:end="1869:64"><expr pos:start="1869:29" pos:end="1869:63"><call pos:start="1869:29" pos:end="1869:63"><name pos:start="1869:29" pos:end="1869:42">tcg_gen_mov_tl</name><argument_list pos:start="1869:43" pos:end="1869:63">(<argument pos:start="1869:44" pos:end="1869:53"><expr pos:start="1869:44" pos:end="1869:53"><name pos:start="1869:44" pos:end="1869:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1869:56" pos:end="1869:62"><expr pos:start="1869:56" pos:end="1869:62"><name pos:start="1869:56" pos:end="1869:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1871:29" pos:end="1871:69"><expr pos:start="1871:29" pos:end="1871:68"><call pos:start="1871:29" pos:end="1871:68"><name pos:start="1871:29" pos:end="1871:44">tcg_gen_movi_i32</name><argument_list pos:start="1871:45" pos:end="1871:68">(<argument pos:start="1871:46" pos:end="1871:54"><expr pos:start="1871:46" pos:end="1871:54"><name pos:start="1871:46" pos:end="1871:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1871:57" pos:end="1871:67"><expr pos:start="1871:57" pos:end="1871:67"><name pos:start="1871:57" pos:end="1871:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1873:29" pos:end="1873:52"><expr pos:start="1873:29" pos:end="1873:51"><name pos:start="1873:29" pos:end="1873:37"><name pos:start="1873:29" pos:end="1873:30">dc</name><operator pos:start="1873:31" pos:end="1873:32">-&gt;</operator><name pos:start="1873:33" pos:end="1873:37">cc_op</name></name> <operator pos:start="1873:39" pos:end="1873:39">=</operator> <name pos:start="1873:41" pos:end="1873:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1877:25" pos:end="1877:30">break;</break>

                    <case pos:start="1879:21" pos:end="1879:29">case <expr pos:start="1879:26" pos:end="1879:28"><literal type="number" pos:start="1879:26" pos:end="1879:28">0x2</literal></expr>:</case> <comment type="block" pos:start="1879:31" pos:end="1879:38">/* or */</comment>

                        <expr_stmt pos:start="1881:25" pos:end="1881:67"><expr pos:start="1881:25" pos:end="1881:66"><call pos:start="1881:25" pos:end="1881:66"><name pos:start="1881:25" pos:end="1881:37">tcg_gen_or_tl</name><argument_list pos:start="1881:38" pos:end="1881:66">(<argument pos:start="1881:39" pos:end="1881:45"><expr pos:start="1881:39" pos:end="1881:45"><name pos:start="1881:39" pos:end="1881:45">cpu_dst</name></expr></argument>, <argument pos:start="1881:48" pos:end="1881:55"><expr pos:start="1881:48" pos:end="1881:55"><name pos:start="1881:48" pos:end="1881:55">cpu_src1</name></expr></argument>, <argument pos:start="1881:58" pos:end="1881:65"><expr pos:start="1881:58" pos:end="1881:65"><name pos:start="1881:58" pos:end="1881:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1883:25" pos:end="1891:25"><if pos:start="1883:25" pos:end="1891:25">if <condition pos:start="1883:28" pos:end="1883:39">(<expr pos:start="1883:29" pos:end="1883:38"><name pos:start="1883:29" pos:end="1883:31">xop</name> <operator pos:start="1883:33" pos:end="1883:33">&amp;</operator> <literal type="number" pos:start="1883:35" pos:end="1883:38">0x10</literal></expr>)</condition> <block pos:start="1883:41" pos:end="1891:25">{<block_content pos:start="1885:29" pos:end="1889:52">

                            <expr_stmt pos:start="1885:29" pos:end="1885:64"><expr pos:start="1885:29" pos:end="1885:63"><call pos:start="1885:29" pos:end="1885:63"><name pos:start="1885:29" pos:end="1885:42">tcg_gen_mov_tl</name><argument_list pos:start="1885:43" pos:end="1885:63">(<argument pos:start="1885:44" pos:end="1885:53"><expr pos:start="1885:44" pos:end="1885:53"><name pos:start="1885:44" pos:end="1885:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1885:56" pos:end="1885:62"><expr pos:start="1885:56" pos:end="1885:62"><name pos:start="1885:56" pos:end="1885:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1887:29" pos:end="1887:69"><expr pos:start="1887:29" pos:end="1887:68"><call pos:start="1887:29" pos:end="1887:68"><name pos:start="1887:29" pos:end="1887:44">tcg_gen_movi_i32</name><argument_list pos:start="1887:45" pos:end="1887:68">(<argument pos:start="1887:46" pos:end="1887:54"><expr pos:start="1887:46" pos:end="1887:54"><name pos:start="1887:46" pos:end="1887:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1887:57" pos:end="1887:67"><expr pos:start="1887:57" pos:end="1887:67"><name pos:start="1887:57" pos:end="1887:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1889:29" pos:end="1889:52"><expr pos:start="1889:29" pos:end="1889:51"><name pos:start="1889:29" pos:end="1889:37"><name pos:start="1889:29" pos:end="1889:30">dc</name><operator pos:start="1889:31" pos:end="1889:32">-&gt;</operator><name pos:start="1889:33" pos:end="1889:37">cc_op</name></name> <operator pos:start="1889:39" pos:end="1889:39">=</operator> <name pos:start="1889:41" pos:end="1889:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1893:25" pos:end="1893:30">break;</break>

                    <case pos:start="1895:21" pos:end="1895:29">case <expr pos:start="1895:26" pos:end="1895:28"><literal type="number" pos:start="1895:26" pos:end="1895:28">0x3</literal></expr>:</case> <comment type="block" pos:start="1895:31" pos:end="1895:39">/* xor */</comment>

                        <expr_stmt pos:start="1897:25" pos:end="1897:68"><expr pos:start="1897:25" pos:end="1897:67"><call pos:start="1897:25" pos:end="1897:67"><name pos:start="1897:25" pos:end="1897:38">tcg_gen_xor_tl</name><argument_list pos:start="1897:39" pos:end="1897:67">(<argument pos:start="1897:40" pos:end="1897:46"><expr pos:start="1897:40" pos:end="1897:46"><name pos:start="1897:40" pos:end="1897:46">cpu_dst</name></expr></argument>, <argument pos:start="1897:49" pos:end="1897:56"><expr pos:start="1897:49" pos:end="1897:56"><name pos:start="1897:49" pos:end="1897:56">cpu_src1</name></expr></argument>, <argument pos:start="1897:59" pos:end="1897:66"><expr pos:start="1897:59" pos:end="1897:66"><name pos:start="1897:59" pos:end="1897:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1899:25" pos:end="1907:25"><if pos:start="1899:25" pos:end="1907:25">if <condition pos:start="1899:28" pos:end="1899:39">(<expr pos:start="1899:29" pos:end="1899:38"><name pos:start="1899:29" pos:end="1899:31">xop</name> <operator pos:start="1899:33" pos:end="1899:33">&amp;</operator> <literal type="number" pos:start="1899:35" pos:end="1899:38">0x10</literal></expr>)</condition> <block pos:start="1899:41" pos:end="1907:25">{<block_content pos:start="1901:29" pos:end="1905:52">

                            <expr_stmt pos:start="1901:29" pos:end="1901:64"><expr pos:start="1901:29" pos:end="1901:63"><call pos:start="1901:29" pos:end="1901:63"><name pos:start="1901:29" pos:end="1901:42">tcg_gen_mov_tl</name><argument_list pos:start="1901:43" pos:end="1901:63">(<argument pos:start="1901:44" pos:end="1901:53"><expr pos:start="1901:44" pos:end="1901:53"><name pos:start="1901:44" pos:end="1901:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1901:56" pos:end="1901:62"><expr pos:start="1901:56" pos:end="1901:62"><name pos:start="1901:56" pos:end="1901:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1903:29" pos:end="1903:69"><expr pos:start="1903:29" pos:end="1903:68"><call pos:start="1903:29" pos:end="1903:68"><name pos:start="1903:29" pos:end="1903:44">tcg_gen_movi_i32</name><argument_list pos:start="1903:45" pos:end="1903:68">(<argument pos:start="1903:46" pos:end="1903:54"><expr pos:start="1903:46" pos:end="1903:54"><name pos:start="1903:46" pos:end="1903:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1903:57" pos:end="1903:67"><expr pos:start="1903:57" pos:end="1903:67"><name pos:start="1903:57" pos:end="1903:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1905:29" pos:end="1905:52"><expr pos:start="1905:29" pos:end="1905:51"><name pos:start="1905:29" pos:end="1905:37"><name pos:start="1905:29" pos:end="1905:30">dc</name><operator pos:start="1905:31" pos:end="1905:32">-&gt;</operator><name pos:start="1905:33" pos:end="1905:37">cc_op</name></name> <operator pos:start="1905:39" pos:end="1905:39">=</operator> <name pos:start="1905:41" pos:end="1905:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1909:25" pos:end="1909:30">break;</break>

                    <case pos:start="1911:21" pos:end="1911:29">case <expr pos:start="1911:26" pos:end="1911:28"><literal type="number" pos:start="1911:26" pos:end="1911:28">0x4</literal></expr>:</case> <comment type="block" pos:start="1911:31" pos:end="1911:39">/* sub */</comment>

                        <if_stmt pos:start="1913:25" pos:end="1925:25"><if pos:start="1913:25" pos:end="1921:25">if <condition pos:start="1913:28" pos:end="1913:39">(<expr pos:start="1913:29" pos:end="1913:38"><name pos:start="1913:29" pos:end="1913:31">xop</name> <operator pos:start="1913:33" pos:end="1913:33">&amp;</operator> <literal type="number" pos:start="1913:35" pos:end="1913:38">0x10</literal></expr>)</condition> <block pos:start="1913:41" pos:end="1921:25">{<block_content pos:start="1915:29" pos:end="1919:50">

                            <expr_stmt pos:start="1915:29" pos:end="1915:71"><expr pos:start="1915:29" pos:end="1915:70"><call pos:start="1915:29" pos:end="1915:70"><name pos:start="1915:29" pos:end="1915:41">gen_op_sub_cc</name><argument_list pos:start="1915:42" pos:end="1915:70">(<argument pos:start="1915:43" pos:end="1915:49"><expr pos:start="1915:43" pos:end="1915:49"><name pos:start="1915:43" pos:end="1915:49">cpu_dst</name></expr></argument>, <argument pos:start="1915:52" pos:end="1915:59"><expr pos:start="1915:52" pos:end="1915:59"><name pos:start="1915:52" pos:end="1915:59">cpu_src1</name></expr></argument>, <argument pos:start="1915:62" pos:end="1915:69"><expr pos:start="1915:62" pos:end="1915:69"><name pos:start="1915:62" pos:end="1915:69">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1917:29" pos:end="1917:67"><expr pos:start="1917:29" pos:end="1917:66"><call pos:start="1917:29" pos:end="1917:66"><name pos:start="1917:29" pos:end="1917:44">tcg_gen_movi_i32</name><argument_list pos:start="1917:45" pos:end="1917:66">(<argument pos:start="1917:46" pos:end="1917:54"><expr pos:start="1917:46" pos:end="1917:54"><name pos:start="1917:46" pos:end="1917:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1917:57" pos:end="1917:65"><expr pos:start="1917:57" pos:end="1917:65"><name pos:start="1917:57" pos:end="1917:65">CC_OP_SUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1919:29" pos:end="1919:50"><expr pos:start="1919:29" pos:end="1919:49"><name pos:start="1919:29" pos:end="1919:37"><name pos:start="1919:29" pos:end="1919:30">dc</name><operator pos:start="1919:31" pos:end="1919:32">-&gt;</operator><name pos:start="1919:33" pos:end="1919:37">cc_op</name></name> <operator pos:start="1919:39" pos:end="1919:39">=</operator> <name pos:start="1919:41" pos:end="1919:49">CC_OP_SUB</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1921:27" pos:end="1925:25">else <block pos:start="1921:32" pos:end="1925:25">{<block_content pos:start="1923:29" pos:end="1923:72">

                            <expr_stmt pos:start="1923:29" pos:end="1923:72"><expr pos:start="1923:29" pos:end="1923:71"><call pos:start="1923:29" pos:end="1923:71"><name pos:start="1923:29" pos:end="1923:42">tcg_gen_sub_tl</name><argument_list pos:start="1923:43" pos:end="1923:71">(<argument pos:start="1923:44" pos:end="1923:50"><expr pos:start="1923:44" pos:end="1923:50"><name pos:start="1923:44" pos:end="1923:50">cpu_dst</name></expr></argument>, <argument pos:start="1923:53" pos:end="1923:60"><expr pos:start="1923:53" pos:end="1923:60"><name pos:start="1923:53" pos:end="1923:60">cpu_src1</name></expr></argument>, <argument pos:start="1923:63" pos:end="1923:70"><expr pos:start="1923:63" pos:end="1923:70"><name pos:start="1923:63" pos:end="1923:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="1927:25" pos:end="1927:30">break;</break>

                    <case pos:start="1929:21" pos:end="1929:29">case <expr pos:start="1929:26" pos:end="1929:28"><literal type="number" pos:start="1929:26" pos:end="1929:28">0x5</literal></expr>:</case> <comment type="block" pos:start="1929:31" pos:end="1929:40">/* andn */</comment>

                        <expr_stmt pos:start="1931:25" pos:end="1931:69"><expr pos:start="1931:25" pos:end="1931:68"><call pos:start="1931:25" pos:end="1931:68"><name pos:start="1931:25" pos:end="1931:39">tcg_gen_andc_tl</name><argument_list pos:start="1931:40" pos:end="1931:68">(<argument pos:start="1931:41" pos:end="1931:47"><expr pos:start="1931:41" pos:end="1931:47"><name pos:start="1931:41" pos:end="1931:47">cpu_dst</name></expr></argument>, <argument pos:start="1931:50" pos:end="1931:57"><expr pos:start="1931:50" pos:end="1931:57"><name pos:start="1931:50" pos:end="1931:57">cpu_src1</name></expr></argument>, <argument pos:start="1931:60" pos:end="1931:67"><expr pos:start="1931:60" pos:end="1931:67"><name pos:start="1931:60" pos:end="1931:67">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1933:25" pos:end="1941:25"><if pos:start="1933:25" pos:end="1941:25">if <condition pos:start="1933:28" pos:end="1933:39">(<expr pos:start="1933:29" pos:end="1933:38"><name pos:start="1933:29" pos:end="1933:31">xop</name> <operator pos:start="1933:33" pos:end="1933:33">&amp;</operator> <literal type="number" pos:start="1933:35" pos:end="1933:38">0x10</literal></expr>)</condition> <block pos:start="1933:41" pos:end="1941:25">{<block_content pos:start="1935:29" pos:end="1939:52">

                            <expr_stmt pos:start="1935:29" pos:end="1935:64"><expr pos:start="1935:29" pos:end="1935:63"><call pos:start="1935:29" pos:end="1935:63"><name pos:start="1935:29" pos:end="1935:42">tcg_gen_mov_tl</name><argument_list pos:start="1935:43" pos:end="1935:63">(<argument pos:start="1935:44" pos:end="1935:53"><expr pos:start="1935:44" pos:end="1935:53"><name pos:start="1935:44" pos:end="1935:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1935:56" pos:end="1935:62"><expr pos:start="1935:56" pos:end="1935:62"><name pos:start="1935:56" pos:end="1935:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1937:29" pos:end="1937:69"><expr pos:start="1937:29" pos:end="1937:68"><call pos:start="1937:29" pos:end="1937:68"><name pos:start="1937:29" pos:end="1937:44">tcg_gen_movi_i32</name><argument_list pos:start="1937:45" pos:end="1937:68">(<argument pos:start="1937:46" pos:end="1937:54"><expr pos:start="1937:46" pos:end="1937:54"><name pos:start="1937:46" pos:end="1937:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1937:57" pos:end="1937:67"><expr pos:start="1937:57" pos:end="1937:67"><name pos:start="1937:57" pos:end="1937:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1939:29" pos:end="1939:52"><expr pos:start="1939:29" pos:end="1939:51"><name pos:start="1939:29" pos:end="1939:37"><name pos:start="1939:29" pos:end="1939:30">dc</name><operator pos:start="1939:31" pos:end="1939:32">-&gt;</operator><name pos:start="1939:33" pos:end="1939:37">cc_op</name></name> <operator pos:start="1939:39" pos:end="1939:39">=</operator> <name pos:start="1939:41" pos:end="1939:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1943:25" pos:end="1943:30">break;</break>

                    <case pos:start="1945:21" pos:end="1945:29">case <expr pos:start="1945:26" pos:end="1945:28"><literal type="number" pos:start="1945:26" pos:end="1945:28">0x6</literal></expr>:</case> <comment type="block" pos:start="1945:31" pos:end="1945:39">/* orn */</comment>

                        <expr_stmt pos:start="1947:25" pos:end="1947:68"><expr pos:start="1947:25" pos:end="1947:67"><call pos:start="1947:25" pos:end="1947:67"><name pos:start="1947:25" pos:end="1947:38">tcg_gen_orc_tl</name><argument_list pos:start="1947:39" pos:end="1947:67">(<argument pos:start="1947:40" pos:end="1947:46"><expr pos:start="1947:40" pos:end="1947:46"><name pos:start="1947:40" pos:end="1947:46">cpu_dst</name></expr></argument>, <argument pos:start="1947:49" pos:end="1947:56"><expr pos:start="1947:49" pos:end="1947:56"><name pos:start="1947:49" pos:end="1947:56">cpu_src1</name></expr></argument>, <argument pos:start="1947:59" pos:end="1947:66"><expr pos:start="1947:59" pos:end="1947:66"><name pos:start="1947:59" pos:end="1947:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1949:25" pos:end="1957:25"><if pos:start="1949:25" pos:end="1957:25">if <condition pos:start="1949:28" pos:end="1949:39">(<expr pos:start="1949:29" pos:end="1949:38"><name pos:start="1949:29" pos:end="1949:31">xop</name> <operator pos:start="1949:33" pos:end="1949:33">&amp;</operator> <literal type="number" pos:start="1949:35" pos:end="1949:38">0x10</literal></expr>)</condition> <block pos:start="1949:41" pos:end="1957:25">{<block_content pos:start="1951:29" pos:end="1955:52">

                            <expr_stmt pos:start="1951:29" pos:end="1951:64"><expr pos:start="1951:29" pos:end="1951:63"><call pos:start="1951:29" pos:end="1951:63"><name pos:start="1951:29" pos:end="1951:42">tcg_gen_mov_tl</name><argument_list pos:start="1951:43" pos:end="1951:63">(<argument pos:start="1951:44" pos:end="1951:53"><expr pos:start="1951:44" pos:end="1951:53"><name pos:start="1951:44" pos:end="1951:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1951:56" pos:end="1951:62"><expr pos:start="1951:56" pos:end="1951:62"><name pos:start="1951:56" pos:end="1951:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1953:29" pos:end="1953:69"><expr pos:start="1953:29" pos:end="1953:68"><call pos:start="1953:29" pos:end="1953:68"><name pos:start="1953:29" pos:end="1953:44">tcg_gen_movi_i32</name><argument_list pos:start="1953:45" pos:end="1953:68">(<argument pos:start="1953:46" pos:end="1953:54"><expr pos:start="1953:46" pos:end="1953:54"><name pos:start="1953:46" pos:end="1953:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1953:57" pos:end="1953:67"><expr pos:start="1953:57" pos:end="1953:67"><name pos:start="1953:57" pos:end="1953:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1955:29" pos:end="1955:52"><expr pos:start="1955:29" pos:end="1955:51"><name pos:start="1955:29" pos:end="1955:37"><name pos:start="1955:29" pos:end="1955:30">dc</name><operator pos:start="1955:31" pos:end="1955:32">-&gt;</operator><name pos:start="1955:33" pos:end="1955:37">cc_op</name></name> <operator pos:start="1955:39" pos:end="1955:39">=</operator> <name pos:start="1955:41" pos:end="1955:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1959:25" pos:end="1959:30">break;</break>

                    <case pos:start="1961:21" pos:end="1961:29">case <expr pos:start="1961:26" pos:end="1961:28"><literal type="number" pos:start="1961:26" pos:end="1961:28">0x7</literal></expr>:</case> <comment type="block" pos:start="1961:31" pos:end="1961:40">/* xorn */</comment>

                        <expr_stmt pos:start="1963:25" pos:end="1963:68"><expr pos:start="1963:25" pos:end="1963:67"><call pos:start="1963:25" pos:end="1963:67"><name pos:start="1963:25" pos:end="1963:38">tcg_gen_eqv_tl</name><argument_list pos:start="1963:39" pos:end="1963:67">(<argument pos:start="1963:40" pos:end="1963:46"><expr pos:start="1963:40" pos:end="1963:46"><name pos:start="1963:40" pos:end="1963:46">cpu_dst</name></expr></argument>, <argument pos:start="1963:49" pos:end="1963:56"><expr pos:start="1963:49" pos:end="1963:56"><name pos:start="1963:49" pos:end="1963:56">cpu_src1</name></expr></argument>, <argument pos:start="1963:59" pos:end="1963:66"><expr pos:start="1963:59" pos:end="1963:66"><name pos:start="1963:59" pos:end="1963:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1965:25" pos:end="1973:25"><if pos:start="1965:25" pos:end="1973:25">if <condition pos:start="1965:28" pos:end="1965:39">(<expr pos:start="1965:29" pos:end="1965:38"><name pos:start="1965:29" pos:end="1965:31">xop</name> <operator pos:start="1965:33" pos:end="1965:33">&amp;</operator> <literal type="number" pos:start="1965:35" pos:end="1965:38">0x10</literal></expr>)</condition> <block pos:start="1965:41" pos:end="1973:25">{<block_content pos:start="1967:29" pos:end="1971:52">

                            <expr_stmt pos:start="1967:29" pos:end="1967:64"><expr pos:start="1967:29" pos:end="1967:63"><call pos:start="1967:29" pos:end="1967:63"><name pos:start="1967:29" pos:end="1967:42">tcg_gen_mov_tl</name><argument_list pos:start="1967:43" pos:end="1967:63">(<argument pos:start="1967:44" pos:end="1967:53"><expr pos:start="1967:44" pos:end="1967:53"><name pos:start="1967:44" pos:end="1967:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="1967:56" pos:end="1967:62"><expr pos:start="1967:56" pos:end="1967:62"><name pos:start="1967:56" pos:end="1967:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1969:29" pos:end="1969:69"><expr pos:start="1969:29" pos:end="1969:68"><call pos:start="1969:29" pos:end="1969:68"><name pos:start="1969:29" pos:end="1969:44">tcg_gen_movi_i32</name><argument_list pos:start="1969:45" pos:end="1969:68">(<argument pos:start="1969:46" pos:end="1969:54"><expr pos:start="1969:46" pos:end="1969:54"><name pos:start="1969:46" pos:end="1969:54">cpu_cc_op</name></expr></argument>, <argument pos:start="1969:57" pos:end="1969:67"><expr pos:start="1969:57" pos:end="1969:67"><name pos:start="1969:57" pos:end="1969:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1971:29" pos:end="1971:52"><expr pos:start="1971:29" pos:end="1971:51"><name pos:start="1971:29" pos:end="1971:37"><name pos:start="1971:29" pos:end="1971:30">dc</name><operator pos:start="1971:31" pos:end="1971:32">-&gt;</operator><name pos:start="1971:33" pos:end="1971:37">cc_op</name></name> <operator pos:start="1971:39" pos:end="1971:39">=</operator> <name pos:start="1971:41" pos:end="1971:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1975:25" pos:end="1975:30">break;</break>

                    <case pos:start="1977:21" pos:end="1977:29">case <expr pos:start="1977:26" pos:end="1977:28"><literal type="number" pos:start="1977:26" pos:end="1977:28">0x8</literal></expr>:</case> <comment type="block" pos:start="1977:31" pos:end="1977:49">/* addx, V9 addc */</comment>

                        <expr_stmt pos:start="1979:25" pos:end="1981:54"><expr pos:start="1979:25" pos:end="1981:53"><call pos:start="1979:25" pos:end="1981:53"><name pos:start="1979:25" pos:end="1979:39">gen_op_addx_int</name><argument_list pos:start="1979:40" pos:end="1981:53">(<argument pos:start="1979:41" pos:end="1979:42"><expr pos:start="1979:41" pos:end="1979:42"><name pos:start="1979:41" pos:end="1979:42">dc</name></expr></argument>, <argument pos:start="1979:45" pos:end="1979:51"><expr pos:start="1979:45" pos:end="1979:51"><name pos:start="1979:45" pos:end="1979:51">cpu_dst</name></expr></argument>, <argument pos:start="1979:54" pos:end="1979:61"><expr pos:start="1979:54" pos:end="1979:61"><name pos:start="1979:54" pos:end="1979:61">cpu_src1</name></expr></argument>, <argument pos:start="1979:64" pos:end="1979:71"><expr pos:start="1979:64" pos:end="1979:71"><name pos:start="1979:64" pos:end="1979:71">cpu_src2</name></expr></argument>,

                                        <argument pos:start="1981:41" pos:end="1981:52"><expr pos:start="1981:41" pos:end="1981:52"><operator pos:start="1981:41" pos:end="1981:41">(</operator><name pos:start="1981:42" pos:end="1981:44">xop</name> <operator pos:start="1981:46" pos:end="1981:46">&amp;</operator> <literal type="number" pos:start="1981:48" pos:end="1981:51">0x10</literal><operator pos:start="1981:52" pos:end="1981:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1983:25" pos:end="1986:0">break;</break>

<cpp:ifdef pos:start="1985:1" pos:end="1985:21">#<cpp:directive pos:start="1985:2" pos:end="1985:6">ifdef</cpp:directive> <name pos:start="1985:8" pos:end="1985:21">TARGET_SPARC64</name></cpp:ifdef>

                    <case pos:start="1987:21" pos:end="1987:29">case <expr pos:start="1987:26" pos:end="1987:28"><literal type="number" pos:start="1987:26" pos:end="1987:28">0x9</literal></expr>:</case> <comment type="block" pos:start="1987:31" pos:end="1987:43">/* V9 mulx */</comment>

                        <expr_stmt pos:start="1989:25" pos:end="1989:69"><expr pos:start="1989:25" pos:end="1989:68"><call pos:start="1989:25" pos:end="1989:68"><name pos:start="1989:25" pos:end="1989:39">tcg_gen_mul_i64</name><argument_list pos:start="1989:40" pos:end="1989:68">(<argument pos:start="1989:41" pos:end="1989:47"><expr pos:start="1989:41" pos:end="1989:47"><name pos:start="1989:41" pos:end="1989:47">cpu_dst</name></expr></argument>, <argument pos:start="1989:50" pos:end="1989:57"><expr pos:start="1989:50" pos:end="1989:57"><name pos:start="1989:50" pos:end="1989:57">cpu_src1</name></expr></argument>, <argument pos:start="1989:60" pos:end="1989:67"><expr pos:start="1989:60" pos:end="1989:67"><name pos:start="1989:60" pos:end="1989:67">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1991:25" pos:end="1994:0">break;</break>

<cpp:endif pos:start="1993:1" pos:end="1993:6">#<cpp:directive pos:start="1993:2" pos:end="1993:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="1995:21" pos:end="1995:29">case <expr pos:start="1995:26" pos:end="1995:28"><literal type="number" pos:start="1995:26" pos:end="1995:28">0xa</literal></expr>:</case> <comment type="block" pos:start="1995:31" pos:end="1995:40">/* umul */</comment>

                        <expr_stmt pos:start="1997:25" pos:end="1997:50"><expr pos:start="1997:25" pos:end="1997:49"><call pos:start="1997:25" pos:end="1997:49"><name pos:start="1997:25" pos:end="1997:40">CHECK_IU_FEATURE</name><argument_list pos:start="1997:41" pos:end="1997:49">(<argument pos:start="1997:42" pos:end="1997:43"><expr pos:start="1997:42" pos:end="1997:43"><name pos:start="1997:42" pos:end="1997:43">dc</name></expr></argument>, <argument pos:start="1997:46" pos:end="1997:48"><expr pos:start="1997:46" pos:end="1997:48"><name pos:start="1997:46" pos:end="1997:48">MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1999:25" pos:end="1999:65"><expr pos:start="1999:25" pos:end="1999:64"><call pos:start="1999:25" pos:end="1999:64"><name pos:start="1999:25" pos:end="1999:35">gen_op_umul</name><argument_list pos:start="1999:36" pos:end="1999:64">(<argument pos:start="1999:37" pos:end="1999:43"><expr pos:start="1999:37" pos:end="1999:43"><name pos:start="1999:37" pos:end="1999:43">cpu_dst</name></expr></argument>, <argument pos:start="1999:46" pos:end="1999:53"><expr pos:start="1999:46" pos:end="1999:53"><name pos:start="1999:46" pos:end="1999:53">cpu_src1</name></expr></argument>, <argument pos:start="1999:56" pos:end="1999:63"><expr pos:start="1999:56" pos:end="1999:63"><name pos:start="1999:56" pos:end="1999:63">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2001:25" pos:end="2009:25"><if pos:start="2001:25" pos:end="2009:25">if <condition pos:start="2001:28" pos:end="2001:39">(<expr pos:start="2001:29" pos:end="2001:38"><name pos:start="2001:29" pos:end="2001:31">xop</name> <operator pos:start="2001:33" pos:end="2001:33">&amp;</operator> <literal type="number" pos:start="2001:35" pos:end="2001:38">0x10</literal></expr>)</condition> <block pos:start="2001:41" pos:end="2009:25">{<block_content pos:start="2003:29" pos:end="2007:52">

                            <expr_stmt pos:start="2003:29" pos:end="2003:64"><expr pos:start="2003:29" pos:end="2003:63"><call pos:start="2003:29" pos:end="2003:63"><name pos:start="2003:29" pos:end="2003:42">tcg_gen_mov_tl</name><argument_list pos:start="2003:43" pos:end="2003:63">(<argument pos:start="2003:44" pos:end="2003:53"><expr pos:start="2003:44" pos:end="2003:53"><name pos:start="2003:44" pos:end="2003:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="2003:56" pos:end="2003:62"><expr pos:start="2003:56" pos:end="2003:62"><name pos:start="2003:56" pos:end="2003:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2005:29" pos:end="2005:69"><expr pos:start="2005:29" pos:end="2005:68"><call pos:start="2005:29" pos:end="2005:68"><name pos:start="2005:29" pos:end="2005:44">tcg_gen_movi_i32</name><argument_list pos:start="2005:45" pos:end="2005:68">(<argument pos:start="2005:46" pos:end="2005:54"><expr pos:start="2005:46" pos:end="2005:54"><name pos:start="2005:46" pos:end="2005:54">cpu_cc_op</name></expr></argument>, <argument pos:start="2005:57" pos:end="2005:67"><expr pos:start="2005:57" pos:end="2005:67"><name pos:start="2005:57" pos:end="2005:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2007:29" pos:end="2007:52"><expr pos:start="2007:29" pos:end="2007:51"><name pos:start="2007:29" pos:end="2007:37"><name pos:start="2007:29" pos:end="2007:30">dc</name><operator pos:start="2007:31" pos:end="2007:32">-&gt;</operator><name pos:start="2007:33" pos:end="2007:37">cc_op</name></name> <operator pos:start="2007:39" pos:end="2007:39">=</operator> <name pos:start="2007:41" pos:end="2007:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="2011:25" pos:end="2011:30">break;</break>

                    <case pos:start="2013:21" pos:end="2013:29">case <expr pos:start="2013:26" pos:end="2013:28"><literal type="number" pos:start="2013:26" pos:end="2013:28">0xb</literal></expr>:</case> <comment type="block" pos:start="2013:31" pos:end="2013:40">/* smul */</comment>

                        <expr_stmt pos:start="2015:25" pos:end="2015:50"><expr pos:start="2015:25" pos:end="2015:49"><call pos:start="2015:25" pos:end="2015:49"><name pos:start="2015:25" pos:end="2015:40">CHECK_IU_FEATURE</name><argument_list pos:start="2015:41" pos:end="2015:49">(<argument pos:start="2015:42" pos:end="2015:43"><expr pos:start="2015:42" pos:end="2015:43"><name pos:start="2015:42" pos:end="2015:43">dc</name></expr></argument>, <argument pos:start="2015:46" pos:end="2015:48"><expr pos:start="2015:46" pos:end="2015:48"><name pos:start="2015:46" pos:end="2015:48">MUL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2017:25" pos:end="2017:65"><expr pos:start="2017:25" pos:end="2017:64"><call pos:start="2017:25" pos:end="2017:64"><name pos:start="2017:25" pos:end="2017:35">gen_op_smul</name><argument_list pos:start="2017:36" pos:end="2017:64">(<argument pos:start="2017:37" pos:end="2017:43"><expr pos:start="2017:37" pos:end="2017:43"><name pos:start="2017:37" pos:end="2017:43">cpu_dst</name></expr></argument>, <argument pos:start="2017:46" pos:end="2017:53"><expr pos:start="2017:46" pos:end="2017:53"><name pos:start="2017:46" pos:end="2017:53">cpu_src1</name></expr></argument>, <argument pos:start="2017:56" pos:end="2017:63"><expr pos:start="2017:56" pos:end="2017:63"><name pos:start="2017:56" pos:end="2017:63">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2019:25" pos:end="2027:25"><if pos:start="2019:25" pos:end="2027:25">if <condition pos:start="2019:28" pos:end="2019:39">(<expr pos:start="2019:29" pos:end="2019:38"><name pos:start="2019:29" pos:end="2019:31">xop</name> <operator pos:start="2019:33" pos:end="2019:33">&amp;</operator> <literal type="number" pos:start="2019:35" pos:end="2019:38">0x10</literal></expr>)</condition> <block pos:start="2019:41" pos:end="2027:25">{<block_content pos:start="2021:29" pos:end="2025:52">

                            <expr_stmt pos:start="2021:29" pos:end="2021:64"><expr pos:start="2021:29" pos:end="2021:63"><call pos:start="2021:29" pos:end="2021:63"><name pos:start="2021:29" pos:end="2021:42">tcg_gen_mov_tl</name><argument_list pos:start="2021:43" pos:end="2021:63">(<argument pos:start="2021:44" pos:end="2021:53"><expr pos:start="2021:44" pos:end="2021:53"><name pos:start="2021:44" pos:end="2021:53">cpu_cc_dst</name></expr></argument>, <argument pos:start="2021:56" pos:end="2021:62"><expr pos:start="2021:56" pos:end="2021:62"><name pos:start="2021:56" pos:end="2021:62">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2023:29" pos:end="2023:69"><expr pos:start="2023:29" pos:end="2023:68"><call pos:start="2023:29" pos:end="2023:68"><name pos:start="2023:29" pos:end="2023:44">tcg_gen_movi_i32</name><argument_list pos:start="2023:45" pos:end="2023:68">(<argument pos:start="2023:46" pos:end="2023:54"><expr pos:start="2023:46" pos:end="2023:54"><name pos:start="2023:46" pos:end="2023:54">cpu_cc_op</name></expr></argument>, <argument pos:start="2023:57" pos:end="2023:67"><expr pos:start="2023:57" pos:end="2023:67"><name pos:start="2023:57" pos:end="2023:67">CC_OP_LOGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2025:29" pos:end="2025:52"><expr pos:start="2025:29" pos:end="2025:51"><name pos:start="2025:29" pos:end="2025:37"><name pos:start="2025:29" pos:end="2025:30">dc</name><operator pos:start="2025:31" pos:end="2025:32">-&gt;</operator><name pos:start="2025:33" pos:end="2025:37">cc_op</name></name> <operator pos:start="2025:39" pos:end="2025:39">=</operator> <name pos:start="2025:41" pos:end="2025:51">CC_OP_LOGIC</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="2029:25" pos:end="2029:30">break;</break>

                    <case pos:start="2031:21" pos:end="2031:29">case <expr pos:start="2031:26" pos:end="2031:28"><literal type="number" pos:start="2031:26" pos:end="2031:28">0xc</literal></expr>:</case> <comment type="block" pos:start="2031:31" pos:end="2031:49">/* subx, V9 subc */</comment>

                        <expr_stmt pos:start="2033:25" pos:end="2035:54"><expr pos:start="2033:25" pos:end="2035:53"><call pos:start="2033:25" pos:end="2035:53"><name pos:start="2033:25" pos:end="2033:39">gen_op_subx_int</name><argument_list pos:start="2033:40" pos:end="2035:53">(<argument pos:start="2033:41" pos:end="2033:42"><expr pos:start="2033:41" pos:end="2033:42"><name pos:start="2033:41" pos:end="2033:42">dc</name></expr></argument>, <argument pos:start="2033:45" pos:end="2033:51"><expr pos:start="2033:45" pos:end="2033:51"><name pos:start="2033:45" pos:end="2033:51">cpu_dst</name></expr></argument>, <argument pos:start="2033:54" pos:end="2033:61"><expr pos:start="2033:54" pos:end="2033:61"><name pos:start="2033:54" pos:end="2033:61">cpu_src1</name></expr></argument>, <argument pos:start="2033:64" pos:end="2033:71"><expr pos:start="2033:64" pos:end="2033:71"><name pos:start="2033:64" pos:end="2033:71">cpu_src2</name></expr></argument>,

                                        <argument pos:start="2035:41" pos:end="2035:52"><expr pos:start="2035:41" pos:end="2035:52"><operator pos:start="2035:41" pos:end="2035:41">(</operator><name pos:start="2035:42" pos:end="2035:44">xop</name> <operator pos:start="2035:46" pos:end="2035:46">&amp;</operator> <literal type="number" pos:start="2035:48" pos:end="2035:51">0x10</literal><operator pos:start="2035:52" pos:end="2035:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2037:25" pos:end="2040:0">break;</break>

<cpp:ifdef pos:start="2039:1" pos:end="2039:21">#<cpp:directive pos:start="2039:2" pos:end="2039:6">ifdef</cpp:directive> <name pos:start="2039:8" pos:end="2039:21">TARGET_SPARC64</name></cpp:ifdef>

                    <case pos:start="2041:21" pos:end="2041:29">case <expr pos:start="2041:26" pos:end="2041:28"><literal type="number" pos:start="2041:26" pos:end="2041:28">0xd</literal></expr>:</case> <comment type="block" pos:start="2041:31" pos:end="2041:44">/* V9 udivx */</comment>

                        <expr_stmt pos:start="2043:25" pos:end="2043:79"><expr pos:start="2043:25" pos:end="2043:78"><call pos:start="2043:25" pos:end="2043:78"><name pos:start="2043:25" pos:end="2043:40">gen_helper_udivx</name><argument_list pos:start="2043:41" pos:end="2043:78">(<argument pos:start="2043:42" pos:end="2043:48"><expr pos:start="2043:42" pos:end="2043:48"><name pos:start="2043:42" pos:end="2043:48">cpu_dst</name></expr></argument>, <argument pos:start="2043:51" pos:end="2043:57"><expr pos:start="2043:51" pos:end="2043:57"><name pos:start="2043:51" pos:end="2043:57">cpu_env</name></expr></argument>, <argument pos:start="2043:60" pos:end="2043:67"><expr pos:start="2043:60" pos:end="2043:67"><name pos:start="2043:60" pos:end="2043:67">cpu_src1</name></expr></argument>, <argument pos:start="2043:70" pos:end="2043:77"><expr pos:start="2043:70" pos:end="2043:77"><name pos:start="2043:70" pos:end="2043:77">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2045:25" pos:end="2048:0">break;</break>

<cpp:endif pos:start="2047:1" pos:end="2047:6">#<cpp:directive pos:start="2047:2" pos:end="2047:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="2049:21" pos:end="2049:29">case <expr pos:start="2049:26" pos:end="2049:28"><literal type="number" pos:start="2049:26" pos:end="2049:28">0xe</literal></expr>:</case> <comment type="block" pos:start="2049:31" pos:end="2049:40">/* udiv */</comment>

                        <expr_stmt pos:start="2051:25" pos:end="2051:50"><expr pos:start="2051:25" pos:end="2051:49"><call pos:start="2051:25" pos:end="2051:49"><name pos:start="2051:25" pos:end="2051:40">CHECK_IU_FEATURE</name><argument_list pos:start="2051:41" pos:end="2051:49">(<argument pos:start="2051:42" pos:end="2051:43"><expr pos:start="2051:42" pos:end="2051:43"><name pos:start="2051:42" pos:end="2051:43">dc</name></expr></argument>, <argument pos:start="2051:46" pos:end="2051:48"><expr pos:start="2051:46" pos:end="2051:48"><name pos:start="2051:46" pos:end="2051:48">DIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2053:25" pos:end="2067:25"><if pos:start="2053:25" pos:end="2061:25">if <condition pos:start="2053:28" pos:end="2053:39">(<expr pos:start="2053:29" pos:end="2053:38"><name pos:start="2053:29" pos:end="2053:31">xop</name> <operator pos:start="2053:33" pos:end="2053:33">&amp;</operator> <literal type="number" pos:start="2053:35" pos:end="2053:38">0x10</literal></expr>)</condition> <block pos:start="2053:41" pos:end="2061:25">{<block_content pos:start="2055:29" pos:end="2059:50">

                            <expr_stmt pos:start="2055:29" pos:end="2057:57"><expr pos:start="2055:29" pos:end="2057:56"><call pos:start="2055:29" pos:end="2057:56"><name pos:start="2055:29" pos:end="2055:46">gen_helper_udiv_cc</name><argument_list pos:start="2055:47" pos:end="2057:56">(<argument pos:start="2055:48" pos:end="2055:54"><expr pos:start="2055:48" pos:end="2055:54"><name pos:start="2055:48" pos:end="2055:54">cpu_dst</name></expr></argument>, <argument pos:start="2055:57" pos:end="2055:63"><expr pos:start="2055:57" pos:end="2055:63"><name pos:start="2055:57" pos:end="2055:63">cpu_env</name></expr></argument>, <argument pos:start="2055:66" pos:end="2055:73"><expr pos:start="2055:66" pos:end="2055:73"><name pos:start="2055:66" pos:end="2055:73">cpu_src1</name></expr></argument>,

                                               <argument pos:start="2057:48" pos:end="2057:55"><expr pos:start="2057:48" pos:end="2057:55"><name pos:start="2057:48" pos:end="2057:55">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2059:29" pos:end="2059:50"><expr pos:start="2059:29" pos:end="2059:49"><name pos:start="2059:29" pos:end="2059:37"><name pos:start="2059:29" pos:end="2059:30">dc</name><operator pos:start="2059:31" pos:end="2059:32">-&gt;</operator><name pos:start="2059:33" pos:end="2059:37">cc_op</name></name> <operator pos:start="2059:39" pos:end="2059:39">=</operator> <name pos:start="2059:41" pos:end="2059:49">CC_OP_DIV</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2061:27" pos:end="2067:25">else <block pos:start="2061:32" pos:end="2067:25">{<block_content pos:start="2063:29" pos:end="2065:54">

                            <expr_stmt pos:start="2063:29" pos:end="2065:54"><expr pos:start="2063:29" pos:end="2065:53"><call pos:start="2063:29" pos:end="2065:53"><name pos:start="2063:29" pos:end="2063:43">gen_helper_udiv</name><argument_list pos:start="2063:44" pos:end="2065:53">(<argument pos:start="2063:45" pos:end="2063:51"><expr pos:start="2063:45" pos:end="2063:51"><name pos:start="2063:45" pos:end="2063:51">cpu_dst</name></expr></argument>, <argument pos:start="2063:54" pos:end="2063:60"><expr pos:start="2063:54" pos:end="2063:60"><name pos:start="2063:54" pos:end="2063:60">cpu_env</name></expr></argument>, <argument pos:start="2063:63" pos:end="2063:70"><expr pos:start="2063:63" pos:end="2063:70"><name pos:start="2063:63" pos:end="2063:70">cpu_src1</name></expr></argument>,

                                            <argument pos:start="2065:45" pos:end="2065:52"><expr pos:start="2065:45" pos:end="2065:52"><name pos:start="2065:45" pos:end="2065:52">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="2069:25" pos:end="2069:30">break;</break>

                    <case pos:start="2071:21" pos:end="2071:29">case <expr pos:start="2071:26" pos:end="2071:28"><literal type="number" pos:start="2071:26" pos:end="2071:28">0xf</literal></expr>:</case> <comment type="block" pos:start="2071:31" pos:end="2071:40">/* sdiv */</comment>

                        <expr_stmt pos:start="2073:25" pos:end="2073:50"><expr pos:start="2073:25" pos:end="2073:49"><call pos:start="2073:25" pos:end="2073:49"><name pos:start="2073:25" pos:end="2073:40">CHECK_IU_FEATURE</name><argument_list pos:start="2073:41" pos:end="2073:49">(<argument pos:start="2073:42" pos:end="2073:43"><expr pos:start="2073:42" pos:end="2073:43"><name pos:start="2073:42" pos:end="2073:43">dc</name></expr></argument>, <argument pos:start="2073:46" pos:end="2073:48"><expr pos:start="2073:46" pos:end="2073:48"><name pos:start="2073:46" pos:end="2073:48">DIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2075:25" pos:end="2089:25"><if pos:start="2075:25" pos:end="2083:25">if <condition pos:start="2075:28" pos:end="2075:39">(<expr pos:start="2075:29" pos:end="2075:38"><name pos:start="2075:29" pos:end="2075:31">xop</name> <operator pos:start="2075:33" pos:end="2075:33">&amp;</operator> <literal type="number" pos:start="2075:35" pos:end="2075:38">0x10</literal></expr>)</condition> <block pos:start="2075:41" pos:end="2083:25">{<block_content pos:start="2077:29" pos:end="2081:50">

                            <expr_stmt pos:start="2077:29" pos:end="2079:57"><expr pos:start="2077:29" pos:end="2079:56"><call pos:start="2077:29" pos:end="2079:56"><name pos:start="2077:29" pos:end="2077:46">gen_helper_sdiv_cc</name><argument_list pos:start="2077:47" pos:end="2079:56">(<argument pos:start="2077:48" pos:end="2077:54"><expr pos:start="2077:48" pos:end="2077:54"><name pos:start="2077:48" pos:end="2077:54">cpu_dst</name></expr></argument>, <argument pos:start="2077:57" pos:end="2077:63"><expr pos:start="2077:57" pos:end="2077:63"><name pos:start="2077:57" pos:end="2077:63">cpu_env</name></expr></argument>, <argument pos:start="2077:66" pos:end="2077:73"><expr pos:start="2077:66" pos:end="2077:73"><name pos:start="2077:66" pos:end="2077:73">cpu_src1</name></expr></argument>,

                                               <argument pos:start="2079:48" pos:end="2079:55"><expr pos:start="2079:48" pos:end="2079:55"><name pos:start="2079:48" pos:end="2079:55">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2081:29" pos:end="2081:50"><expr pos:start="2081:29" pos:end="2081:49"><name pos:start="2081:29" pos:end="2081:37"><name pos:start="2081:29" pos:end="2081:30">dc</name><operator pos:start="2081:31" pos:end="2081:32">-&gt;</operator><name pos:start="2081:33" pos:end="2081:37">cc_op</name></name> <operator pos:start="2081:39" pos:end="2081:39">=</operator> <name pos:start="2081:41" pos:end="2081:49">CC_OP_DIV</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2083:27" pos:end="2089:25">else <block pos:start="2083:32" pos:end="2089:25">{<block_content pos:start="2085:29" pos:end="2087:54">

                            <expr_stmt pos:start="2085:29" pos:end="2087:54"><expr pos:start="2085:29" pos:end="2087:53"><call pos:start="2085:29" pos:end="2087:53"><name pos:start="2085:29" pos:end="2085:43">gen_helper_sdiv</name><argument_list pos:start="2085:44" pos:end="2087:53">(<argument pos:start="2085:45" pos:end="2085:51"><expr pos:start="2085:45" pos:end="2085:51"><name pos:start="2085:45" pos:end="2085:51">cpu_dst</name></expr></argument>, <argument pos:start="2085:54" pos:end="2085:60"><expr pos:start="2085:54" pos:end="2085:60"><name pos:start="2085:54" pos:end="2085:60">cpu_env</name></expr></argument>, <argument pos:start="2085:63" pos:end="2085:70"><expr pos:start="2085:63" pos:end="2085:70"><name pos:start="2085:63" pos:end="2085:70">cpu_src1</name></expr></argument>,

                                            <argument pos:start="2087:45" pos:end="2087:52"><expr pos:start="2087:45" pos:end="2087:52"><name pos:start="2087:45" pos:end="2087:52">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="2091:25" pos:end="2091:30">break;</break>

                    <default pos:start="2093:21" pos:end="2093:28">default:</default>

                        <goto pos:start="2095:25" pos:end="2095:42">goto <name pos:start="2095:30" pos:end="2095:41">illegal_insn</name>;</goto>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2099:21" pos:end="2099:51"><expr pos:start="2099:21" pos:end="2099:50"><call pos:start="2099:21" pos:end="2099:50"><name pos:start="2099:21" pos:end="2099:33">gen_store_gpr</name><argument_list pos:start="2099:34" pos:end="2099:50">(<argument pos:start="2099:35" pos:end="2099:36"><expr pos:start="2099:35" pos:end="2099:36"><name pos:start="2099:35" pos:end="2099:36">dc</name></expr></argument>, <argument pos:start="2099:39" pos:end="2099:40"><expr pos:start="2099:39" pos:end="2099:40"><name pos:start="2099:39" pos:end="2099:40">rd</name></expr></argument>, <argument pos:start="2099:43" pos:end="2099:49"><expr pos:start="2099:43" pos:end="2099:49"><name pos:start="2099:43" pos:end="2099:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2101:19" pos:end="3089:17">else <block pos:start="2101:24" pos:end="3089:17">{<block_content pos:start="2103:21" pos:end="3087:21">

                    <expr_stmt pos:start="2103:21" pos:end="2103:50"><expr pos:start="2103:21" pos:end="2103:49"><name pos:start="2103:21" pos:end="2103:28">cpu_src1</name> <operator pos:start="2103:30" pos:end="2103:30">=</operator> <call pos:start="2103:32" pos:end="2103:49"><name pos:start="2103:32" pos:end="2103:39">get_src1</name><argument_list pos:start="2103:40" pos:end="2103:49">(<argument pos:start="2103:41" pos:end="2103:42"><expr pos:start="2103:41" pos:end="2103:42"><name pos:start="2103:41" pos:end="2103:42">dc</name></expr></argument>, <argument pos:start="2103:45" pos:end="2103:48"><expr pos:start="2103:45" pos:end="2103:48"><name pos:start="2103:45" pos:end="2103:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2105:21" pos:end="2105:50"><expr pos:start="2105:21" pos:end="2105:49"><name pos:start="2105:21" pos:end="2105:28">cpu_src2</name> <operator pos:start="2105:30" pos:end="2105:30">=</operator> <call pos:start="2105:32" pos:end="2105:49"><name pos:start="2105:32" pos:end="2105:39">get_src2</name><argument_list pos:start="2105:40" pos:end="2105:49">(<argument pos:start="2105:41" pos:end="2105:42"><expr pos:start="2105:41" pos:end="2105:42"><name pos:start="2105:41" pos:end="2105:42">dc</name></expr></argument>, <argument pos:start="2105:45" pos:end="2105:48"><expr pos:start="2105:45" pos:end="2105:48"><name pos:start="2105:45" pos:end="2105:48">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="2107:21" pos:end="3087:21">switch <condition pos:start="2107:28" pos:end="2107:32">(<expr pos:start="2107:29" pos:end="2107:31"><name pos:start="2107:29" pos:end="2107:31">xop</name></expr>)</condition> <block pos:start="2107:34" pos:end="3087:21">{<block_content pos:start="2109:21" pos:end="3085:42">

                    <case pos:start="2109:21" pos:end="2109:30">case <expr pos:start="2109:26" pos:end="2109:29"><literal type="number" pos:start="2109:26" pos:end="2109:29">0x20</literal></expr>:</case> <comment type="block" pos:start="2109:32" pos:end="2109:43">/* taddcc */</comment>

                        <expr_stmt pos:start="2111:25" pos:end="2111:67"><expr pos:start="2111:25" pos:end="2111:66"><call pos:start="2111:25" pos:end="2111:66"><name pos:start="2111:25" pos:end="2111:37">gen_op_add_cc</name><argument_list pos:start="2111:38" pos:end="2111:66">(<argument pos:start="2111:39" pos:end="2111:45"><expr pos:start="2111:39" pos:end="2111:45"><name pos:start="2111:39" pos:end="2111:45">cpu_dst</name></expr></argument>, <argument pos:start="2111:48" pos:end="2111:55"><expr pos:start="2111:48" pos:end="2111:55"><name pos:start="2111:48" pos:end="2111:55">cpu_src1</name></expr></argument>, <argument pos:start="2111:58" pos:end="2111:65"><expr pos:start="2111:58" pos:end="2111:65"><name pos:start="2111:58" pos:end="2111:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2113:25" pos:end="2113:55"><expr pos:start="2113:25" pos:end="2113:54"><call pos:start="2113:25" pos:end="2113:54"><name pos:start="2113:25" pos:end="2113:37">gen_store_gpr</name><argument_list pos:start="2113:38" pos:end="2113:54">(<argument pos:start="2113:39" pos:end="2113:40"><expr pos:start="2113:39" pos:end="2113:40"><name pos:start="2113:39" pos:end="2113:40">dc</name></expr></argument>, <argument pos:start="2113:43" pos:end="2113:44"><expr pos:start="2113:43" pos:end="2113:44"><name pos:start="2113:43" pos:end="2113:44">rd</name></expr></argument>, <argument pos:start="2113:47" pos:end="2113:53"><expr pos:start="2113:47" pos:end="2113:53"><name pos:start="2113:47" pos:end="2113:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2115:25" pos:end="2115:64"><expr pos:start="2115:25" pos:end="2115:63"><call pos:start="2115:25" pos:end="2115:63"><name pos:start="2115:25" pos:end="2115:40">tcg_gen_movi_i32</name><argument_list pos:start="2115:41" pos:end="2115:63">(<argument pos:start="2115:42" pos:end="2115:50"><expr pos:start="2115:42" pos:end="2115:50"><name pos:start="2115:42" pos:end="2115:50">cpu_cc_op</name></expr></argument>, <argument pos:start="2115:53" pos:end="2115:62"><expr pos:start="2115:53" pos:end="2115:62"><name pos:start="2115:53" pos:end="2115:62">CC_OP_TADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2117:25" pos:end="2117:47"><expr pos:start="2117:25" pos:end="2117:46"><name pos:start="2117:25" pos:end="2117:33"><name pos:start="2117:25" pos:end="2117:26">dc</name><operator pos:start="2117:27" pos:end="2117:28">-&gt;</operator><name pos:start="2117:29" pos:end="2117:33">cc_op</name></name> <operator pos:start="2117:35" pos:end="2117:35">=</operator> <name pos:start="2117:37" pos:end="2117:46">CC_OP_TADD</name></expr>;</expr_stmt>

                        <break pos:start="2119:25" pos:end="2119:30">break;</break>

                    <case pos:start="2121:21" pos:end="2121:30">case <expr pos:start="2121:26" pos:end="2121:29"><literal type="number" pos:start="2121:26" pos:end="2121:29">0x21</literal></expr>:</case> <comment type="block" pos:start="2121:32" pos:end="2121:43">/* tsubcc */</comment>

                        <expr_stmt pos:start="2123:25" pos:end="2123:67"><expr pos:start="2123:25" pos:end="2123:66"><call pos:start="2123:25" pos:end="2123:66"><name pos:start="2123:25" pos:end="2123:37">gen_op_sub_cc</name><argument_list pos:start="2123:38" pos:end="2123:66">(<argument pos:start="2123:39" pos:end="2123:45"><expr pos:start="2123:39" pos:end="2123:45"><name pos:start="2123:39" pos:end="2123:45">cpu_dst</name></expr></argument>, <argument pos:start="2123:48" pos:end="2123:55"><expr pos:start="2123:48" pos:end="2123:55"><name pos:start="2123:48" pos:end="2123:55">cpu_src1</name></expr></argument>, <argument pos:start="2123:58" pos:end="2123:65"><expr pos:start="2123:58" pos:end="2123:65"><name pos:start="2123:58" pos:end="2123:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2125:25" pos:end="2125:55"><expr pos:start="2125:25" pos:end="2125:54"><call pos:start="2125:25" pos:end="2125:54"><name pos:start="2125:25" pos:end="2125:37">gen_store_gpr</name><argument_list pos:start="2125:38" pos:end="2125:54">(<argument pos:start="2125:39" pos:end="2125:40"><expr pos:start="2125:39" pos:end="2125:40"><name pos:start="2125:39" pos:end="2125:40">dc</name></expr></argument>, <argument pos:start="2125:43" pos:end="2125:44"><expr pos:start="2125:43" pos:end="2125:44"><name pos:start="2125:43" pos:end="2125:44">rd</name></expr></argument>, <argument pos:start="2125:47" pos:end="2125:53"><expr pos:start="2125:47" pos:end="2125:53"><name pos:start="2125:47" pos:end="2125:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2127:25" pos:end="2127:64"><expr pos:start="2127:25" pos:end="2127:63"><call pos:start="2127:25" pos:end="2127:63"><name pos:start="2127:25" pos:end="2127:40">tcg_gen_movi_i32</name><argument_list pos:start="2127:41" pos:end="2127:63">(<argument pos:start="2127:42" pos:end="2127:50"><expr pos:start="2127:42" pos:end="2127:50"><name pos:start="2127:42" pos:end="2127:50">cpu_cc_op</name></expr></argument>, <argument pos:start="2127:53" pos:end="2127:62"><expr pos:start="2127:53" pos:end="2127:62"><name pos:start="2127:53" pos:end="2127:62">CC_OP_TSUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2129:25" pos:end="2129:47"><expr pos:start="2129:25" pos:end="2129:46"><name pos:start="2129:25" pos:end="2129:33"><name pos:start="2129:25" pos:end="2129:26">dc</name><operator pos:start="2129:27" pos:end="2129:28">-&gt;</operator><name pos:start="2129:29" pos:end="2129:33">cc_op</name></name> <operator pos:start="2129:35" pos:end="2129:35">=</operator> <name pos:start="2129:37" pos:end="2129:46">CC_OP_TSUB</name></expr>;</expr_stmt>

                        <break pos:start="2131:25" pos:end="2131:30">break;</break>

                    <case pos:start="2133:21" pos:end="2133:30">case <expr pos:start="2133:26" pos:end="2133:29"><literal type="number" pos:start="2133:26" pos:end="2133:29">0x22</literal></expr>:</case> <comment type="block" pos:start="2133:32" pos:end="2133:45">/* taddcctv */</comment>

                        <expr_stmt pos:start="2135:25" pos:end="2137:64"><expr pos:start="2135:25" pos:end="2137:63"><call pos:start="2135:25" pos:end="2137:63"><name pos:start="2135:25" pos:end="2135:43">gen_helper_taddcctv</name><argument_list pos:start="2135:44" pos:end="2137:63">(<argument pos:start="2135:45" pos:end="2135:51"><expr pos:start="2135:45" pos:end="2135:51"><name pos:start="2135:45" pos:end="2135:51">cpu_dst</name></expr></argument>, <argument pos:start="2135:54" pos:end="2135:60"><expr pos:start="2135:54" pos:end="2135:60"><name pos:start="2135:54" pos:end="2135:60">cpu_env</name></expr></argument>,

                                            <argument pos:start="2137:45" pos:end="2137:52"><expr pos:start="2137:45" pos:end="2137:52"><name pos:start="2137:45" pos:end="2137:52">cpu_src1</name></expr></argument>, <argument pos:start="2137:55" pos:end="2137:62"><expr pos:start="2137:55" pos:end="2137:62"><name pos:start="2137:55" pos:end="2137:62">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2139:25" pos:end="2139:55"><expr pos:start="2139:25" pos:end="2139:54"><call pos:start="2139:25" pos:end="2139:54"><name pos:start="2139:25" pos:end="2139:37">gen_store_gpr</name><argument_list pos:start="2139:38" pos:end="2139:54">(<argument pos:start="2139:39" pos:end="2139:40"><expr pos:start="2139:39" pos:end="2139:40"><name pos:start="2139:39" pos:end="2139:40">dc</name></expr></argument>, <argument pos:start="2139:43" pos:end="2139:44"><expr pos:start="2139:43" pos:end="2139:44"><name pos:start="2139:43" pos:end="2139:44">rd</name></expr></argument>, <argument pos:start="2139:47" pos:end="2139:53"><expr pos:start="2139:47" pos:end="2139:53"><name pos:start="2139:47" pos:end="2139:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2141:25" pos:end="2141:49"><expr pos:start="2141:25" pos:end="2141:48"><name pos:start="2141:25" pos:end="2141:33"><name pos:start="2141:25" pos:end="2141:26">dc</name><operator pos:start="2141:27" pos:end="2141:28">-&gt;</operator><name pos:start="2141:29" pos:end="2141:33">cc_op</name></name> <operator pos:start="2141:35" pos:end="2141:35">=</operator> <name pos:start="2141:37" pos:end="2141:48">CC_OP_TADDTV</name></expr>;</expr_stmt>

                        <break pos:start="2143:25" pos:end="2143:30">break;</break>

                    <case pos:start="2145:21" pos:end="2145:30">case <expr pos:start="2145:26" pos:end="2145:29"><literal type="number" pos:start="2145:26" pos:end="2145:29">0x23</literal></expr>:</case> <comment type="block" pos:start="2145:32" pos:end="2145:45">/* tsubcctv */</comment>

                        <expr_stmt pos:start="2147:25" pos:end="2149:64"><expr pos:start="2147:25" pos:end="2149:63"><call pos:start="2147:25" pos:end="2149:63"><name pos:start="2147:25" pos:end="2147:43">gen_helper_tsubcctv</name><argument_list pos:start="2147:44" pos:end="2149:63">(<argument pos:start="2147:45" pos:end="2147:51"><expr pos:start="2147:45" pos:end="2147:51"><name pos:start="2147:45" pos:end="2147:51">cpu_dst</name></expr></argument>, <argument pos:start="2147:54" pos:end="2147:60"><expr pos:start="2147:54" pos:end="2147:60"><name pos:start="2147:54" pos:end="2147:60">cpu_env</name></expr></argument>,

                                            <argument pos:start="2149:45" pos:end="2149:52"><expr pos:start="2149:45" pos:end="2149:52"><name pos:start="2149:45" pos:end="2149:52">cpu_src1</name></expr></argument>, <argument pos:start="2149:55" pos:end="2149:62"><expr pos:start="2149:55" pos:end="2149:62"><name pos:start="2149:55" pos:end="2149:62">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2151:25" pos:end="2151:55"><expr pos:start="2151:25" pos:end="2151:54"><call pos:start="2151:25" pos:end="2151:54"><name pos:start="2151:25" pos:end="2151:37">gen_store_gpr</name><argument_list pos:start="2151:38" pos:end="2151:54">(<argument pos:start="2151:39" pos:end="2151:40"><expr pos:start="2151:39" pos:end="2151:40"><name pos:start="2151:39" pos:end="2151:40">dc</name></expr></argument>, <argument pos:start="2151:43" pos:end="2151:44"><expr pos:start="2151:43" pos:end="2151:44"><name pos:start="2151:43" pos:end="2151:44">rd</name></expr></argument>, <argument pos:start="2151:47" pos:end="2151:53"><expr pos:start="2151:47" pos:end="2151:53"><name pos:start="2151:47" pos:end="2151:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2153:25" pos:end="2153:49"><expr pos:start="2153:25" pos:end="2153:48"><name pos:start="2153:25" pos:end="2153:33"><name pos:start="2153:25" pos:end="2153:26">dc</name><operator pos:start="2153:27" pos:end="2153:28">-&gt;</operator><name pos:start="2153:29" pos:end="2153:33">cc_op</name></name> <operator pos:start="2153:35" pos:end="2153:35">=</operator> <name pos:start="2153:37" pos:end="2153:48">CC_OP_TSUBTV</name></expr>;</expr_stmt>

                        <break pos:start="2155:25" pos:end="2155:30">break;</break>

                    <case pos:start="2157:21" pos:end="2157:30">case <expr pos:start="2157:26" pos:end="2157:29"><literal type="number" pos:start="2157:26" pos:end="2157:29">0x24</literal></expr>:</case> <comment type="block" pos:start="2157:32" pos:end="2157:43">/* mulscc */</comment>

                        <expr_stmt pos:start="2159:25" pos:end="2159:39"><expr pos:start="2159:25" pos:end="2159:38"><call pos:start="2159:25" pos:end="2159:38"><name pos:start="2159:25" pos:end="2159:34">update_psr</name><argument_list pos:start="2159:35" pos:end="2159:38">(<argument pos:start="2159:36" pos:end="2159:37"><expr pos:start="2159:36" pos:end="2159:37"><name pos:start="2159:36" pos:end="2159:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2161:25" pos:end="2161:67"><expr pos:start="2161:25" pos:end="2161:66"><call pos:start="2161:25" pos:end="2161:66"><name pos:start="2161:25" pos:end="2161:37">gen_op_mulscc</name><argument_list pos:start="2161:38" pos:end="2161:66">(<argument pos:start="2161:39" pos:end="2161:45"><expr pos:start="2161:39" pos:end="2161:45"><name pos:start="2161:39" pos:end="2161:45">cpu_dst</name></expr></argument>, <argument pos:start="2161:48" pos:end="2161:55"><expr pos:start="2161:48" pos:end="2161:55"><name pos:start="2161:48" pos:end="2161:55">cpu_src1</name></expr></argument>, <argument pos:start="2161:58" pos:end="2161:65"><expr pos:start="2161:58" pos:end="2161:65"><name pos:start="2161:58" pos:end="2161:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2163:25" pos:end="2163:55"><expr pos:start="2163:25" pos:end="2163:54"><call pos:start="2163:25" pos:end="2163:54"><name pos:start="2163:25" pos:end="2163:37">gen_store_gpr</name><argument_list pos:start="2163:38" pos:end="2163:54">(<argument pos:start="2163:39" pos:end="2163:40"><expr pos:start="2163:39" pos:end="2163:40"><name pos:start="2163:39" pos:end="2163:40">dc</name></expr></argument>, <argument pos:start="2163:43" pos:end="2163:44"><expr pos:start="2163:43" pos:end="2163:44"><name pos:start="2163:43" pos:end="2163:44">rd</name></expr></argument>, <argument pos:start="2163:47" pos:end="2163:53"><expr pos:start="2163:47" pos:end="2163:53"><name pos:start="2163:47" pos:end="2163:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2165:25" pos:end="2165:63"><expr pos:start="2165:25" pos:end="2165:62"><call pos:start="2165:25" pos:end="2165:62"><name pos:start="2165:25" pos:end="2165:40">tcg_gen_movi_i32</name><argument_list pos:start="2165:41" pos:end="2165:62">(<argument pos:start="2165:42" pos:end="2165:50"><expr pos:start="2165:42" pos:end="2165:50"><name pos:start="2165:42" pos:end="2165:50">cpu_cc_op</name></expr></argument>, <argument pos:start="2165:53" pos:end="2165:61"><expr pos:start="2165:53" pos:end="2165:61"><name pos:start="2165:53" pos:end="2165:61">CC_OP_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2167:25" pos:end="2167:46"><expr pos:start="2167:25" pos:end="2167:45"><name pos:start="2167:25" pos:end="2167:33"><name pos:start="2167:25" pos:end="2167:26">dc</name><operator pos:start="2167:27" pos:end="2167:28">-&gt;</operator><name pos:start="2167:29" pos:end="2167:33">cc_op</name></name> <operator pos:start="2167:35" pos:end="2167:35">=</operator> <name pos:start="2167:37" pos:end="2167:45">CC_OP_ADD</name></expr>;</expr_stmt>

                        <break pos:start="2169:25" pos:end="2172:0">break;</break>

<cpp:ifndef pos:start="2171:1" pos:end="2171:22">#<cpp:directive pos:start="2171:2" pos:end="2171:7">ifndef</cpp:directive> <name pos:start="2171:9" pos:end="2171:22">TARGET_SPARC64</name></cpp:ifndef>

                    <case pos:start="2173:21" pos:end="2173:30">case <expr pos:start="2173:26" pos:end="2173:29"><literal type="number" pos:start="2173:26" pos:end="2173:29">0x25</literal></expr>:</case>  <comment type="block" pos:start="2173:33" pos:end="2173:41">/* sll */</comment>

                        <if_stmt pos:start="2175:25" pos:end="2187:25"><if pos:start="2175:25" pos:end="2181:25">if <condition pos:start="2175:28" pos:end="2175:35">(<expr pos:start="2175:29" pos:end="2175:34"><name pos:start="2175:29" pos:end="2175:34">IS_IMM</name></expr>)</condition> <block pos:start="2175:37" pos:end="2181:25">{<block_content pos:start="2177:29" pos:end="2179:76"> <comment type="block" pos:start="2175:39" pos:end="2175:53">/* immediate */</comment>

                            <expr_stmt pos:start="2177:29" pos:end="2177:60"><expr pos:start="2177:29" pos:end="2177:59"><name pos:start="2177:29" pos:end="2177:32">simm</name> <operator pos:start="2177:34" pos:end="2177:34">=</operator> <call pos:start="2177:36" pos:end="2177:59"><name pos:start="2177:36" pos:end="2177:45">GET_FIELDs</name><argument_list pos:start="2177:46" pos:end="2177:59">(<argument pos:start="2177:47" pos:end="2177:50"><expr pos:start="2177:47" pos:end="2177:50"><name pos:start="2177:47" pos:end="2177:50">insn</name></expr></argument>, <argument pos:start="2177:53" pos:end="2177:54"><expr pos:start="2177:53" pos:end="2177:54"><literal type="number" pos:start="2177:53" pos:end="2177:54">20</literal></expr></argument>, <argument pos:start="2177:57" pos:end="2177:58"><expr pos:start="2177:57" pos:end="2177:58"><literal type="number" pos:start="2177:57" pos:end="2177:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2179:29" pos:end="2179:76"><expr pos:start="2179:29" pos:end="2179:75"><call pos:start="2179:29" pos:end="2179:75"><name pos:start="2179:29" pos:end="2179:43">tcg_gen_shli_tl</name><argument_list pos:start="2179:44" pos:end="2179:75">(<argument pos:start="2179:45" pos:end="2179:51"><expr pos:start="2179:45" pos:end="2179:51"><name pos:start="2179:45" pos:end="2179:51">cpu_dst</name></expr></argument>, <argument pos:start="2179:54" pos:end="2179:61"><expr pos:start="2179:54" pos:end="2179:61"><name pos:start="2179:54" pos:end="2179:61">cpu_src1</name></expr></argument>, <argument pos:start="2179:64" pos:end="2179:74"><expr pos:start="2179:64" pos:end="2179:74"><name pos:start="2179:64" pos:end="2179:67">simm</name> <operator pos:start="2179:69" pos:end="2179:69">&amp;</operator> <literal type="number" pos:start="2179:71" pos:end="2179:74">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2181:27" pos:end="2187:25">else <block pos:start="2181:32" pos:end="2187:25">{<block_content pos:start="2183:29" pos:end="2185:72"> <comment type="block" pos:start="2181:34" pos:end="2181:47">/* register */</comment>

                            <expr_stmt pos:start="2183:29" pos:end="2183:70"><expr pos:start="2183:29" pos:end="2183:69"><call pos:start="2183:29" pos:end="2183:69"><name pos:start="2183:29" pos:end="2183:43">tcg_gen_andi_tl</name><argument_list pos:start="2183:44" pos:end="2183:69">(<argument pos:start="2183:45" pos:end="2183:52"><expr pos:start="2183:45" pos:end="2183:52"><name pos:start="2183:45" pos:end="2183:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2183:55" pos:end="2183:62"><expr pos:start="2183:55" pos:end="2183:62"><name pos:start="2183:55" pos:end="2183:62">cpu_src2</name></expr></argument>, <argument pos:start="2183:65" pos:end="2183:68"><expr pos:start="2183:65" pos:end="2183:68"><literal type="number" pos:start="2183:65" pos:end="2183:68">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2185:29" pos:end="2185:72"><expr pos:start="2185:29" pos:end="2185:71"><call pos:start="2185:29" pos:end="2185:71"><name pos:start="2185:29" pos:end="2185:42">tcg_gen_shl_tl</name><argument_list pos:start="2185:43" pos:end="2185:71">(<argument pos:start="2185:44" pos:end="2185:50"><expr pos:start="2185:44" pos:end="2185:50"><name pos:start="2185:44" pos:end="2185:50">cpu_dst</name></expr></argument>, <argument pos:start="2185:53" pos:end="2185:60"><expr pos:start="2185:53" pos:end="2185:60"><name pos:start="2185:53" pos:end="2185:60">cpu_src1</name></expr></argument>, <argument pos:start="2185:63" pos:end="2185:70"><expr pos:start="2185:63" pos:end="2185:70"><name pos:start="2185:63" pos:end="2185:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2189:25" pos:end="2189:55"><expr pos:start="2189:25" pos:end="2189:54"><call pos:start="2189:25" pos:end="2189:54"><name pos:start="2189:25" pos:end="2189:37">gen_store_gpr</name><argument_list pos:start="2189:38" pos:end="2189:54">(<argument pos:start="2189:39" pos:end="2189:40"><expr pos:start="2189:39" pos:end="2189:40"><name pos:start="2189:39" pos:end="2189:40">dc</name></expr></argument>, <argument pos:start="2189:43" pos:end="2189:44"><expr pos:start="2189:43" pos:end="2189:44"><name pos:start="2189:43" pos:end="2189:44">rd</name></expr></argument>, <argument pos:start="2189:47" pos:end="2189:53"><expr pos:start="2189:47" pos:end="2189:53"><name pos:start="2189:47" pos:end="2189:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2191:25" pos:end="2191:30">break;</break>

                    <case pos:start="2193:21" pos:end="2193:30">case <expr pos:start="2193:26" pos:end="2193:29"><literal type="number" pos:start="2193:26" pos:end="2193:29">0x26</literal></expr>:</case>  <comment type="block" pos:start="2193:33" pos:end="2193:41">/* srl */</comment>

                        <if_stmt pos:start="2195:25" pos:end="2207:25"><if pos:start="2195:25" pos:end="2201:25">if <condition pos:start="2195:28" pos:end="2195:35">(<expr pos:start="2195:29" pos:end="2195:34"><name pos:start="2195:29" pos:end="2195:34">IS_IMM</name></expr>)</condition> <block pos:start="2195:37" pos:end="2201:25">{<block_content pos:start="2197:29" pos:end="2199:76"> <comment type="block" pos:start="2195:39" pos:end="2195:53">/* immediate */</comment>

                            <expr_stmt pos:start="2197:29" pos:end="2197:60"><expr pos:start="2197:29" pos:end="2197:59"><name pos:start="2197:29" pos:end="2197:32">simm</name> <operator pos:start="2197:34" pos:end="2197:34">=</operator> <call pos:start="2197:36" pos:end="2197:59"><name pos:start="2197:36" pos:end="2197:45">GET_FIELDs</name><argument_list pos:start="2197:46" pos:end="2197:59">(<argument pos:start="2197:47" pos:end="2197:50"><expr pos:start="2197:47" pos:end="2197:50"><name pos:start="2197:47" pos:end="2197:50">insn</name></expr></argument>, <argument pos:start="2197:53" pos:end="2197:54"><expr pos:start="2197:53" pos:end="2197:54"><literal type="number" pos:start="2197:53" pos:end="2197:54">20</literal></expr></argument>, <argument pos:start="2197:57" pos:end="2197:58"><expr pos:start="2197:57" pos:end="2197:58"><literal type="number" pos:start="2197:57" pos:end="2197:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2199:29" pos:end="2199:76"><expr pos:start="2199:29" pos:end="2199:75"><call pos:start="2199:29" pos:end="2199:75"><name pos:start="2199:29" pos:end="2199:43">tcg_gen_shri_tl</name><argument_list pos:start="2199:44" pos:end="2199:75">(<argument pos:start="2199:45" pos:end="2199:51"><expr pos:start="2199:45" pos:end="2199:51"><name pos:start="2199:45" pos:end="2199:51">cpu_dst</name></expr></argument>, <argument pos:start="2199:54" pos:end="2199:61"><expr pos:start="2199:54" pos:end="2199:61"><name pos:start="2199:54" pos:end="2199:61">cpu_src1</name></expr></argument>, <argument pos:start="2199:64" pos:end="2199:74"><expr pos:start="2199:64" pos:end="2199:74"><name pos:start="2199:64" pos:end="2199:67">simm</name> <operator pos:start="2199:69" pos:end="2199:69">&amp;</operator> <literal type="number" pos:start="2199:71" pos:end="2199:74">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2201:27" pos:end="2207:25">else <block pos:start="2201:32" pos:end="2207:25">{<block_content pos:start="2203:29" pos:end="2205:72"> <comment type="block" pos:start="2201:34" pos:end="2201:47">/* register */</comment>

                            <expr_stmt pos:start="2203:29" pos:end="2203:70"><expr pos:start="2203:29" pos:end="2203:69"><call pos:start="2203:29" pos:end="2203:69"><name pos:start="2203:29" pos:end="2203:43">tcg_gen_andi_tl</name><argument_list pos:start="2203:44" pos:end="2203:69">(<argument pos:start="2203:45" pos:end="2203:52"><expr pos:start="2203:45" pos:end="2203:52"><name pos:start="2203:45" pos:end="2203:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2203:55" pos:end="2203:62"><expr pos:start="2203:55" pos:end="2203:62"><name pos:start="2203:55" pos:end="2203:62">cpu_src2</name></expr></argument>, <argument pos:start="2203:65" pos:end="2203:68"><expr pos:start="2203:65" pos:end="2203:68"><literal type="number" pos:start="2203:65" pos:end="2203:68">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2205:29" pos:end="2205:72"><expr pos:start="2205:29" pos:end="2205:71"><call pos:start="2205:29" pos:end="2205:71"><name pos:start="2205:29" pos:end="2205:42">tcg_gen_shr_tl</name><argument_list pos:start="2205:43" pos:end="2205:71">(<argument pos:start="2205:44" pos:end="2205:50"><expr pos:start="2205:44" pos:end="2205:50"><name pos:start="2205:44" pos:end="2205:50">cpu_dst</name></expr></argument>, <argument pos:start="2205:53" pos:end="2205:60"><expr pos:start="2205:53" pos:end="2205:60"><name pos:start="2205:53" pos:end="2205:60">cpu_src1</name></expr></argument>, <argument pos:start="2205:63" pos:end="2205:70"><expr pos:start="2205:63" pos:end="2205:70"><name pos:start="2205:63" pos:end="2205:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2209:25" pos:end="2209:55"><expr pos:start="2209:25" pos:end="2209:54"><call pos:start="2209:25" pos:end="2209:54"><name pos:start="2209:25" pos:end="2209:37">gen_store_gpr</name><argument_list pos:start="2209:38" pos:end="2209:54">(<argument pos:start="2209:39" pos:end="2209:40"><expr pos:start="2209:39" pos:end="2209:40"><name pos:start="2209:39" pos:end="2209:40">dc</name></expr></argument>, <argument pos:start="2209:43" pos:end="2209:44"><expr pos:start="2209:43" pos:end="2209:44"><name pos:start="2209:43" pos:end="2209:44">rd</name></expr></argument>, <argument pos:start="2209:47" pos:end="2209:53"><expr pos:start="2209:47" pos:end="2209:53"><name pos:start="2209:47" pos:end="2209:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2211:25" pos:end="2211:30">break;</break>

                    <case pos:start="2213:21" pos:end="2213:30">case <expr pos:start="2213:26" pos:end="2213:29"><literal type="number" pos:start="2213:26" pos:end="2213:29">0x27</literal></expr>:</case>  <comment type="block" pos:start="2213:33" pos:end="2213:41">/* sra */</comment>

                        <if_stmt pos:start="2215:25" pos:end="2227:25"><if pos:start="2215:25" pos:end="2221:25">if <condition pos:start="2215:28" pos:end="2215:35">(<expr pos:start="2215:29" pos:end="2215:34"><name pos:start="2215:29" pos:end="2215:34">IS_IMM</name></expr>)</condition> <block pos:start="2215:37" pos:end="2221:25">{<block_content pos:start="2217:29" pos:end="2219:76"> <comment type="block" pos:start="2215:39" pos:end="2215:53">/* immediate */</comment>

                            <expr_stmt pos:start="2217:29" pos:end="2217:60"><expr pos:start="2217:29" pos:end="2217:59"><name pos:start="2217:29" pos:end="2217:32">simm</name> <operator pos:start="2217:34" pos:end="2217:34">=</operator> <call pos:start="2217:36" pos:end="2217:59"><name pos:start="2217:36" pos:end="2217:45">GET_FIELDs</name><argument_list pos:start="2217:46" pos:end="2217:59">(<argument pos:start="2217:47" pos:end="2217:50"><expr pos:start="2217:47" pos:end="2217:50"><name pos:start="2217:47" pos:end="2217:50">insn</name></expr></argument>, <argument pos:start="2217:53" pos:end="2217:54"><expr pos:start="2217:53" pos:end="2217:54"><literal type="number" pos:start="2217:53" pos:end="2217:54">20</literal></expr></argument>, <argument pos:start="2217:57" pos:end="2217:58"><expr pos:start="2217:57" pos:end="2217:58"><literal type="number" pos:start="2217:57" pos:end="2217:58">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2219:29" pos:end="2219:76"><expr pos:start="2219:29" pos:end="2219:75"><call pos:start="2219:29" pos:end="2219:75"><name pos:start="2219:29" pos:end="2219:43">tcg_gen_sari_tl</name><argument_list pos:start="2219:44" pos:end="2219:75">(<argument pos:start="2219:45" pos:end="2219:51"><expr pos:start="2219:45" pos:end="2219:51"><name pos:start="2219:45" pos:end="2219:51">cpu_dst</name></expr></argument>, <argument pos:start="2219:54" pos:end="2219:61"><expr pos:start="2219:54" pos:end="2219:61"><name pos:start="2219:54" pos:end="2219:61">cpu_src1</name></expr></argument>, <argument pos:start="2219:64" pos:end="2219:74"><expr pos:start="2219:64" pos:end="2219:74"><name pos:start="2219:64" pos:end="2219:67">simm</name> <operator pos:start="2219:69" pos:end="2219:69">&amp;</operator> <literal type="number" pos:start="2219:71" pos:end="2219:74">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2221:27" pos:end="2227:25">else <block pos:start="2221:32" pos:end="2227:25">{<block_content pos:start="2223:29" pos:end="2225:72"> <comment type="block" pos:start="2221:34" pos:end="2221:47">/* register */</comment>

                            <expr_stmt pos:start="2223:29" pos:end="2223:70"><expr pos:start="2223:29" pos:end="2223:69"><call pos:start="2223:29" pos:end="2223:69"><name pos:start="2223:29" pos:end="2223:43">tcg_gen_andi_tl</name><argument_list pos:start="2223:44" pos:end="2223:69">(<argument pos:start="2223:45" pos:end="2223:52"><expr pos:start="2223:45" pos:end="2223:52"><name pos:start="2223:45" pos:end="2223:52">cpu_tmp0</name></expr></argument>, <argument pos:start="2223:55" pos:end="2223:62"><expr pos:start="2223:55" pos:end="2223:62"><name pos:start="2223:55" pos:end="2223:62">cpu_src2</name></expr></argument>, <argument pos:start="2223:65" pos:end="2223:68"><expr pos:start="2223:65" pos:end="2223:68"><literal type="number" pos:start="2223:65" pos:end="2223:68">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2225:29" pos:end="2225:72"><expr pos:start="2225:29" pos:end="2225:71"><call pos:start="2225:29" pos:end="2225:71"><name pos:start="2225:29" pos:end="2225:42">tcg_gen_sar_tl</name><argument_list pos:start="2225:43" pos:end="2225:71">(<argument pos:start="2225:44" pos:end="2225:50"><expr pos:start="2225:44" pos:end="2225:50"><name pos:start="2225:44" pos:end="2225:50">cpu_dst</name></expr></argument>, <argument pos:start="2225:53" pos:end="2225:60"><expr pos:start="2225:53" pos:end="2225:60"><name pos:start="2225:53" pos:end="2225:60">cpu_src1</name></expr></argument>, <argument pos:start="2225:63" pos:end="2225:70"><expr pos:start="2225:63" pos:end="2225:70"><name pos:start="2225:63" pos:end="2225:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2229:25" pos:end="2229:55"><expr pos:start="2229:25" pos:end="2229:54"><call pos:start="2229:25" pos:end="2229:54"><name pos:start="2229:25" pos:end="2229:37">gen_store_gpr</name><argument_list pos:start="2229:38" pos:end="2229:54">(<argument pos:start="2229:39" pos:end="2229:40"><expr pos:start="2229:39" pos:end="2229:40"><name pos:start="2229:39" pos:end="2229:40">dc</name></expr></argument>, <argument pos:start="2229:43" pos:end="2229:44"><expr pos:start="2229:43" pos:end="2229:44"><name pos:start="2229:43" pos:end="2229:44">rd</name></expr></argument>, <argument pos:start="2229:47" pos:end="2229:53"><expr pos:start="2229:47" pos:end="2229:53"><name pos:start="2229:47" pos:end="2229:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2231:25" pos:end="2234:0">break;</break>

<cpp:endif pos:start="2233:1" pos:end="2233:6">#<cpp:directive pos:start="2233:2" pos:end="2233:6">endif</cpp:directive></cpp:endif>

                    <case pos:start="2235:21" pos:end="2235:30">case <expr pos:start="2235:26" pos:end="2235:29"><literal type="number" pos:start="2235:26" pos:end="2235:29">0x30</literal></expr>:</case>

                        <block pos:start="2237:25" pos:end="2497:25">{<block_content pos:start="2239:29" pos:end="2495:29">

                            <switch pos:start="2239:29" pos:end="2495:29">switch<condition pos:start="2239:35" pos:end="2239:38">(<expr pos:start="2239:36" pos:end="2239:37"><name pos:start="2239:36" pos:end="2239:37">rd</name></expr>)</condition> <block pos:start="2239:40" pos:end="2495:29">{<block_content pos:start="2241:29" pos:end="2493:50">

                            <case pos:start="2241:29" pos:end="2241:35">case <expr pos:start="2241:34" pos:end="2241:34"><literal type="number" pos:start="2241:34" pos:end="2241:34">0</literal></expr>:</case> <comment type="block" pos:start="2241:37" pos:end="2241:45">/* wry */</comment>

                                <expr_stmt pos:start="2243:33" pos:end="2243:77"><expr pos:start="2243:33" pos:end="2243:76"><call pos:start="2243:33" pos:end="2243:76"><name pos:start="2243:33" pos:end="2243:46">tcg_gen_xor_tl</name><argument_list pos:start="2243:47" pos:end="2243:76">(<argument pos:start="2243:48" pos:end="2243:55"><expr pos:start="2243:48" pos:end="2243:55"><name pos:start="2243:48" pos:end="2243:55">cpu_tmp0</name></expr></argument>, <argument pos:start="2243:58" pos:end="2243:65"><expr pos:start="2243:58" pos:end="2243:65"><name pos:start="2243:58" pos:end="2243:65">cpu_src1</name></expr></argument>, <argument pos:start="2243:68" pos:end="2243:75"><expr pos:start="2243:68" pos:end="2243:75"><name pos:start="2243:68" pos:end="2243:75">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2245:33" pos:end="2245:77"><expr pos:start="2245:33" pos:end="2245:76"><call pos:start="2245:33" pos:end="2245:76"><name pos:start="2245:33" pos:end="2245:47">tcg_gen_andi_tl</name><argument_list pos:start="2245:48" pos:end="2245:76">(<argument pos:start="2245:49" pos:end="2245:53"><expr pos:start="2245:49" pos:end="2245:53"><name pos:start="2245:49" pos:end="2245:53">cpu_y</name></expr></argument>, <argument pos:start="2245:56" pos:end="2245:63"><expr pos:start="2245:56" pos:end="2245:63"><name pos:start="2245:56" pos:end="2245:63">cpu_tmp0</name></expr></argument>, <argument pos:start="2245:66" pos:end="2245:75"><expr pos:start="2245:66" pos:end="2245:75"><literal type="number" pos:start="2245:66" pos:end="2245:75">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2247:33" pos:end="2250:0">break;</break>

<cpp:ifndef pos:start="2249:1" pos:end="2249:22">#<cpp:directive pos:start="2249:2" pos:end="2249:7">ifndef</cpp:directive> <name pos:start="2249:9" pos:end="2249:22">TARGET_SPARC64</name></cpp:ifndef>

                            <case pos:start="2251:29" pos:end="2251:47">case <expr pos:start="2251:34" pos:end="2251:46"><literal type="number" pos:start="2251:34" pos:end="2251:37">0x01</literal> <operator pos:start="2251:39" pos:end="2251:41">...</operator> <literal type="number" pos:start="2251:43" pos:end="2251:46">0x0f</literal></expr>:</case> <comment type="block" pos:start="2251:49" pos:end="2257:56">/* undefined in the

                                                   SPARCv8 manual, nop

                                                   on the microSPARC

                                                   II */</comment>

                            <case pos:start="2259:29" pos:end="2259:47">case <expr pos:start="2259:34" pos:end="2259:46"><literal type="number" pos:start="2259:34" pos:end="2259:37">0x10</literal> <operator pos:start="2259:39" pos:end="2259:41">...</operator> <literal type="number" pos:start="2259:43" pos:end="2259:46">0x1f</literal></expr>:</case> <comment type="block" pos:start="2259:49" pos:end="2265:67">/* implementation-dependent

                                                   in the SPARCv8

                                                   manual, nop on the

                                                   microSPARC II */</comment>

                                <break pos:start="2267:33" pos:end="2270:0">break;</break>

<cpp:else pos:start="2269:1" pos:end="2269:5">#<cpp:directive pos:start="2269:2" pos:end="2269:5">else</cpp:directive></cpp:else>

                            <case pos:start="2271:29" pos:end="2271:37">case <expr pos:start="2271:34" pos:end="2271:36"><literal type="number" pos:start="2271:34" pos:end="2271:36">0x2</literal></expr>:</case> <comment type="block" pos:start="2271:39" pos:end="2271:52">/* V9 wrccr */</comment>

                                <expr_stmt pos:start="2273:33" pos:end="2273:76"><expr pos:start="2273:33" pos:end="2273:75"><call pos:start="2273:33" pos:end="2273:75"><name pos:start="2273:33" pos:end="2273:46">tcg_gen_xor_tl</name><argument_list pos:start="2273:47" pos:end="2273:75">(<argument pos:start="2273:48" pos:end="2273:54"><expr pos:start="2273:48" pos:end="2273:54"><name pos:start="2273:48" pos:end="2273:54">cpu_dst</name></expr></argument>, <argument pos:start="2273:57" pos:end="2273:64"><expr pos:start="2273:57" pos:end="2273:64"><name pos:start="2273:57" pos:end="2273:64">cpu_src1</name></expr></argument>, <argument pos:start="2273:67" pos:end="2273:74"><expr pos:start="2273:67" pos:end="2273:74"><name pos:start="2273:67" pos:end="2273:74">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2275:33" pos:end="2275:67"><expr pos:start="2275:33" pos:end="2275:66"><call pos:start="2275:33" pos:end="2275:66"><name pos:start="2275:33" pos:end="2275:48">gen_helper_wrccr</name><argument_list pos:start="2275:49" pos:end="2275:66">(<argument pos:start="2275:50" pos:end="2275:56"><expr pos:start="2275:50" pos:end="2275:56"><name pos:start="2275:50" pos:end="2275:56">cpu_env</name></expr></argument>, <argument pos:start="2275:59" pos:end="2275:65"><expr pos:start="2275:59" pos:end="2275:65"><name pos:start="2275:59" pos:end="2275:65">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2277:33" pos:end="2277:73"><expr pos:start="2277:33" pos:end="2277:72"><call pos:start="2277:33" pos:end="2277:72"><name pos:start="2277:33" pos:end="2277:48">tcg_gen_movi_i32</name><argument_list pos:start="2277:49" pos:end="2277:72">(<argument pos:start="2277:50" pos:end="2277:58"><expr pos:start="2277:50" pos:end="2277:58"><name pos:start="2277:50" pos:end="2277:58">cpu_cc_op</name></expr></argument>, <argument pos:start="2277:61" pos:end="2277:71"><expr pos:start="2277:61" pos:end="2277:71"><name pos:start="2277:61" pos:end="2277:71">CC_OP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2279:33" pos:end="2279:56"><expr pos:start="2279:33" pos:end="2279:55"><name pos:start="2279:33" pos:end="2279:41"><name pos:start="2279:33" pos:end="2279:34">dc</name><operator pos:start="2279:35" pos:end="2279:36">-&gt;</operator><name pos:start="2279:37" pos:end="2279:41">cc_op</name></name> <operator pos:start="2279:43" pos:end="2279:43">=</operator> <name pos:start="2279:45" pos:end="2279:55">CC_OP_FLAGS</name></expr>;</expr_stmt>

                                <break pos:start="2281:33" pos:end="2281:38">break;</break>

                            <case pos:start="2283:29" pos:end="2283:37">case <expr pos:start="2283:34" pos:end="2283:36"><literal type="number" pos:start="2283:34" pos:end="2283:36">0x3</literal></expr>:</case> <comment type="block" pos:start="2283:39" pos:end="2283:52">/* V9 wrasi */</comment>

                                <expr_stmt pos:start="2285:33" pos:end="2285:76"><expr pos:start="2285:33" pos:end="2285:75"><call pos:start="2285:33" pos:end="2285:75"><name pos:start="2285:33" pos:end="2285:46">tcg_gen_xor_tl</name><argument_list pos:start="2285:47" pos:end="2285:75">(<argument pos:start="2285:48" pos:end="2285:54"><expr pos:start="2285:48" pos:end="2285:54"><name pos:start="2285:48" pos:end="2285:54">cpu_dst</name></expr></argument>, <argument pos:start="2285:57" pos:end="2285:64"><expr pos:start="2285:57" pos:end="2285:64"><name pos:start="2285:57" pos:end="2285:64">cpu_src1</name></expr></argument>, <argument pos:start="2285:67" pos:end="2285:74"><expr pos:start="2285:67" pos:end="2285:74"><name pos:start="2285:67" pos:end="2285:74">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2287:33" pos:end="2287:72"><expr pos:start="2287:33" pos:end="2287:71"><call pos:start="2287:33" pos:end="2287:71"><name pos:start="2287:33" pos:end="2287:47">tcg_gen_andi_tl</name><argument_list pos:start="2287:48" pos:end="2287:71">(<argument pos:start="2287:49" pos:end="2287:55"><expr pos:start="2287:49" pos:end="2287:55"><name pos:start="2287:49" pos:end="2287:55">cpu_dst</name></expr></argument>, <argument pos:start="2287:58" pos:end="2287:64"><expr pos:start="2287:58" pos:end="2287:64"><name pos:start="2287:58" pos:end="2287:64">cpu_dst</name></expr></argument>, <argument pos:start="2287:67" pos:end="2287:70"><expr pos:start="2287:67" pos:end="2287:70"><literal type="number" pos:start="2287:67" pos:end="2287:70">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2289:33" pos:end="2289:71"><expr pos:start="2289:33" pos:end="2289:70"><call pos:start="2289:33" pos:end="2289:70"><name pos:start="2289:33" pos:end="2289:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2289:53" pos:end="2289:70">(<argument pos:start="2289:54" pos:end="2289:60"><expr pos:start="2289:54" pos:end="2289:60"><name pos:start="2289:54" pos:end="2289:60">cpu_asi</name></expr></argument>, <argument pos:start="2289:63" pos:end="2289:69"><expr pos:start="2289:63" pos:end="2289:69"><name pos:start="2289:63" pos:end="2289:69">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2291:33" pos:end="2291:38">break;</break>

                            <case pos:start="2293:29" pos:end="2293:37">case <expr pos:start="2293:34" pos:end="2293:36"><literal type="number" pos:start="2293:34" pos:end="2293:36">0x6</literal></expr>:</case> <comment type="block" pos:start="2293:39" pos:end="2293:53">/* V9 wrfprs */</comment>

                                <expr_stmt pos:start="2295:33" pos:end="2295:76"><expr pos:start="2295:33" pos:end="2295:75"><call pos:start="2295:33" pos:end="2295:75"><name pos:start="2295:33" pos:end="2295:46">tcg_gen_xor_tl</name><argument_list pos:start="2295:47" pos:end="2295:75">(<argument pos:start="2295:48" pos:end="2295:54"><expr pos:start="2295:48" pos:end="2295:54"><name pos:start="2295:48" pos:end="2295:54">cpu_dst</name></expr></argument>, <argument pos:start="2295:57" pos:end="2295:64"><expr pos:start="2295:57" pos:end="2295:64"><name pos:start="2295:57" pos:end="2295:64">cpu_src1</name></expr></argument>, <argument pos:start="2295:67" pos:end="2295:74"><expr pos:start="2295:67" pos:end="2295:74"><name pos:start="2295:67" pos:end="2295:74">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2297:33" pos:end="2297:72"><expr pos:start="2297:33" pos:end="2297:71"><call pos:start="2297:33" pos:end="2297:71"><name pos:start="2297:33" pos:end="2297:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2297:53" pos:end="2297:71">(<argument pos:start="2297:54" pos:end="2297:61"><expr pos:start="2297:54" pos:end="2297:61"><name pos:start="2297:54" pos:end="2297:61">cpu_fprs</name></expr></argument>, <argument pos:start="2297:64" pos:end="2297:70"><expr pos:start="2297:64" pos:end="2297:70"><name pos:start="2297:64" pos:end="2297:70">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2299:33" pos:end="2299:47"><expr pos:start="2299:33" pos:end="2299:46"><call pos:start="2299:33" pos:end="2299:46"><name pos:start="2299:33" pos:end="2299:42">save_state</name><argument_list pos:start="2299:43" pos:end="2299:46">(<argument pos:start="2299:44" pos:end="2299:45"><expr pos:start="2299:44" pos:end="2299:45"><name pos:start="2299:44" pos:end="2299:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2301:33" pos:end="2301:51"><expr pos:start="2301:33" pos:end="2301:50"><call pos:start="2301:33" pos:end="2301:50"><name pos:start="2301:33" pos:end="2301:48">gen_op_next_insn</name><argument_list pos:start="2301:49" pos:end="2301:50">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2303:33" pos:end="2303:51"><expr pos:start="2303:33" pos:end="2303:50"><call pos:start="2303:33" pos:end="2303:50"><name pos:start="2303:33" pos:end="2303:47">tcg_gen_exit_tb</name><argument_list pos:start="2303:48" pos:end="2303:50">(<argument pos:start="2303:49" pos:end="2303:49"><expr pos:start="2303:49" pos:end="2303:49"><literal type="number" pos:start="2303:49" pos:end="2303:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2305:33" pos:end="2305:46"><expr pos:start="2305:33" pos:end="2305:45"><name pos:start="2305:33" pos:end="2305:41"><name pos:start="2305:33" pos:end="2305:34">dc</name><operator pos:start="2305:35" pos:end="2305:36">-&gt;</operator><name pos:start="2305:37" pos:end="2305:41">is_br</name></name> <operator pos:start="2305:43" pos:end="2305:43">=</operator> <literal type="number" pos:start="2305:45" pos:end="2305:45">1</literal></expr>;</expr_stmt>

                                <break pos:start="2307:33" pos:end="2307:38">break;</break>

                            <case pos:start="2309:29" pos:end="2312:0">case <expr pos:start="2309:34" pos:end="2309:36"><literal type="number" pos:start="2309:34" pos:end="2309:36">0xf</literal></expr>:</case> <comment type="block" pos:start="2309:39" pos:end="2309:63">/* V9 sir, nop if user */</comment>

<cpp:if pos:start="2311:1" pos:end="2311:30">#<cpp:directive pos:start="2311:2" pos:end="2311:3">if</cpp:directive> <expr pos:start="2311:5" pos:end="2311:30"><operator pos:start="2311:5" pos:end="2311:5">!</operator><call pos:start="2311:6" pos:end="2311:30"><name pos:start="2311:6" pos:end="2311:12">defined</name><argument_list pos:start="2311:13" pos:end="2311:30">(<argument pos:start="2311:14" pos:end="2311:29"><expr pos:start="2311:14" pos:end="2311:29"><name pos:start="2311:14" pos:end="2311:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2313:33" pos:end="2320:0"><if pos:start="2313:33" pos:end="2320:0">if <condition pos:start="2313:36" pos:end="2313:51">(<expr pos:start="2313:37" pos:end="2313:50"><call pos:start="2313:37" pos:end="2313:50"><name pos:start="2313:37" pos:end="2313:46">supervisor</name><argument_list pos:start="2313:47" pos:end="2313:50">(<argument pos:start="2313:48" pos:end="2313:49"><expr pos:start="2313:48" pos:end="2313:49"><name pos:start="2313:48" pos:end="2313:49">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2313:53" pos:end="2320:0">{<block_content pos:start="2315:37" pos:end="2315:37">

                                    <empty_stmt pos:start="2315:37" pos:end="2315:37">;</empty_stmt> <comment type="line" pos:start="2315:39" pos:end="2315:44">// XXX</comment>

                                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="2319:1" pos:end="2319:6">#<cpp:directive pos:start="2319:2" pos:end="2319:6">endif</cpp:directive></cpp:endif>

                                <break pos:start="2321:33" pos:end="2321:38">break;</break>

                            <case pos:start="2323:29" pos:end="2323:38">case <expr pos:start="2323:34" pos:end="2323:37"><literal type="number" pos:start="2323:34" pos:end="2323:37">0x13</literal></expr>:</case> <comment type="block" pos:start="2323:40" pos:end="2323:60">/* Graphics Status */</comment>

                                <if_stmt pos:start="2325:33" pos:end="2329:33"><if pos:start="2325:33" pos:end="2329:33">if <condition pos:start="2325:36" pos:end="2325:57">(<expr pos:start="2325:37" pos:end="2325:56"><call pos:start="2325:37" pos:end="2325:56"><name pos:start="2325:37" pos:end="2325:52">gen_trap_ifnofpu</name><argument_list pos:start="2325:53" pos:end="2325:56">(<argument pos:start="2325:54" pos:end="2325:55"><expr pos:start="2325:54" pos:end="2325:55"><name pos:start="2325:54" pos:end="2325:55">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2325:59" pos:end="2329:33">{<block_content pos:start="2327:37" pos:end="2327:50">

                                    <goto pos:start="2327:37" pos:end="2327:50">goto <name pos:start="2327:42" pos:end="2327:49">jmp_insn</name>;</goto>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="2331:33" pos:end="2331:76"><expr pos:start="2331:33" pos:end="2331:75"><call pos:start="2331:33" pos:end="2331:75"><name pos:start="2331:33" pos:end="2331:46">tcg_gen_xor_tl</name><argument_list pos:start="2331:47" pos:end="2331:75">(<argument pos:start="2331:48" pos:end="2331:54"><expr pos:start="2331:48" pos:end="2331:54"><name pos:start="2331:48" pos:end="2331:54">cpu_gsr</name></expr></argument>, <argument pos:start="2331:57" pos:end="2331:64"><expr pos:start="2331:57" pos:end="2331:64"><name pos:start="2331:57" pos:end="2331:64">cpu_src1</name></expr></argument>, <argument pos:start="2331:67" pos:end="2331:74"><expr pos:start="2331:67" pos:end="2331:74"><name pos:start="2331:67" pos:end="2331:74">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2333:33" pos:end="2333:38">break;</break>

                            <case pos:start="2335:29" pos:end="2335:38">case <expr pos:start="2335:34" pos:end="2335:37"><literal type="number" pos:start="2335:34" pos:end="2335:37">0x14</literal></expr>:</case> <comment type="block" pos:start="2335:40" pos:end="2335:56">/* Softint set */</comment>

                                <if_stmt pos:start="2337:33" pos:end="2339:54"><if pos:start="2337:33" pos:end="2339:54">if <condition pos:start="2337:36" pos:end="2337:52">(<expr pos:start="2337:37" pos:end="2337:51"><operator pos:start="2337:37" pos:end="2337:37">!</operator><call pos:start="2337:38" pos:end="2337:51"><name pos:start="2337:38" pos:end="2337:47">supervisor</name><argument_list pos:start="2337:48" pos:end="2337:51">(<argument pos:start="2337:49" pos:end="2337:50"><expr pos:start="2337:49" pos:end="2337:50"><name pos:start="2337:49" pos:end="2337:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2339:37" pos:end="2339:54"><block_content pos:start="2339:37" pos:end="2339:54">

                                    <goto pos:start="2339:37" pos:end="2339:54">goto <name pos:start="2339:42" pos:end="2339:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2341:33" pos:end="2341:78"><expr pos:start="2341:33" pos:end="2341:77"><call pos:start="2341:33" pos:end="2341:77"><name pos:start="2341:33" pos:end="2341:46">tcg_gen_xor_tl</name><argument_list pos:start="2341:47" pos:end="2341:77">(<argument pos:start="2341:48" pos:end="2341:56"><expr pos:start="2341:48" pos:end="2341:56"><name pos:start="2341:48" pos:end="2341:56">cpu_tmp64</name></expr></argument>, <argument pos:start="2341:59" pos:end="2341:66"><expr pos:start="2341:59" pos:end="2341:66"><name pos:start="2341:59" pos:end="2341:66">cpu_src1</name></expr></argument>, <argument pos:start="2341:69" pos:end="2341:76"><expr pos:start="2341:69" pos:end="2341:76"><name pos:start="2341:69" pos:end="2341:76">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2343:33" pos:end="2343:75"><expr pos:start="2343:33" pos:end="2343:74"><call pos:start="2343:33" pos:end="2343:74"><name pos:start="2343:33" pos:end="2343:54">gen_helper_set_softint</name><argument_list pos:start="2343:55" pos:end="2343:74">(<argument pos:start="2343:56" pos:end="2343:62"><expr pos:start="2343:56" pos:end="2343:62"><name pos:start="2343:56" pos:end="2343:62">cpu_env</name></expr></argument>, <argument pos:start="2343:65" pos:end="2343:73"><expr pos:start="2343:65" pos:end="2343:73"><name pos:start="2343:65" pos:end="2343:73">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2345:33" pos:end="2345:38">break;</break>

                            <case pos:start="2347:29" pos:end="2347:38">case <expr pos:start="2347:34" pos:end="2347:37"><literal type="number" pos:start="2347:34" pos:end="2347:37">0x15</literal></expr>:</case> <comment type="block" pos:start="2347:40" pos:end="2347:58">/* Softint clear */</comment>

                                <if_stmt pos:start="2349:33" pos:end="2351:54"><if pos:start="2349:33" pos:end="2351:54">if <condition pos:start="2349:36" pos:end="2349:52">(<expr pos:start="2349:37" pos:end="2349:51"><operator pos:start="2349:37" pos:end="2349:37">!</operator><call pos:start="2349:38" pos:end="2349:51"><name pos:start="2349:38" pos:end="2349:47">supervisor</name><argument_list pos:start="2349:48" pos:end="2349:51">(<argument pos:start="2349:49" pos:end="2349:50"><expr pos:start="2349:49" pos:end="2349:50"><name pos:start="2349:49" pos:end="2349:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2351:37" pos:end="2351:54"><block_content pos:start="2351:37" pos:end="2351:54">

                                    <goto pos:start="2351:37" pos:end="2351:54">goto <name pos:start="2351:42" pos:end="2351:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2353:33" pos:end="2353:78"><expr pos:start="2353:33" pos:end="2353:77"><call pos:start="2353:33" pos:end="2353:77"><name pos:start="2353:33" pos:end="2353:46">tcg_gen_xor_tl</name><argument_list pos:start="2353:47" pos:end="2353:77">(<argument pos:start="2353:48" pos:end="2353:56"><expr pos:start="2353:48" pos:end="2353:56"><name pos:start="2353:48" pos:end="2353:56">cpu_tmp64</name></expr></argument>, <argument pos:start="2353:59" pos:end="2353:66"><expr pos:start="2353:59" pos:end="2353:66"><name pos:start="2353:59" pos:end="2353:66">cpu_src1</name></expr></argument>, <argument pos:start="2353:69" pos:end="2353:76"><expr pos:start="2353:69" pos:end="2353:76"><name pos:start="2353:69" pos:end="2353:76">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2355:33" pos:end="2355:77"><expr pos:start="2355:33" pos:end="2355:76"><call pos:start="2355:33" pos:end="2355:76"><name pos:start="2355:33" pos:end="2355:56">gen_helper_clear_softint</name><argument_list pos:start="2355:57" pos:end="2355:76">(<argument pos:start="2355:58" pos:end="2355:64"><expr pos:start="2355:58" pos:end="2355:64"><name pos:start="2355:58" pos:end="2355:64">cpu_env</name></expr></argument>, <argument pos:start="2355:67" pos:end="2355:75"><expr pos:start="2355:67" pos:end="2355:75"><name pos:start="2355:67" pos:end="2355:75">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2357:33" pos:end="2357:38">break;</break>

                            <case pos:start="2359:29" pos:end="2359:38">case <expr pos:start="2359:34" pos:end="2359:37"><literal type="number" pos:start="2359:34" pos:end="2359:37">0x16</literal></expr>:</case> <comment type="block" pos:start="2359:40" pos:end="2359:58">/* Softint write */</comment>

                                <if_stmt pos:start="2361:33" pos:end="2363:54"><if pos:start="2361:33" pos:end="2363:54">if <condition pos:start="2361:36" pos:end="2361:52">(<expr pos:start="2361:37" pos:end="2361:51"><operator pos:start="2361:37" pos:end="2361:37">!</operator><call pos:start="2361:38" pos:end="2361:51"><name pos:start="2361:38" pos:end="2361:47">supervisor</name><argument_list pos:start="2361:48" pos:end="2361:51">(<argument pos:start="2361:49" pos:end="2361:50"><expr pos:start="2361:49" pos:end="2361:50"><name pos:start="2361:49" pos:end="2361:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2363:37" pos:end="2363:54"><block_content pos:start="2363:37" pos:end="2363:54">

                                    <goto pos:start="2363:37" pos:end="2363:54">goto <name pos:start="2363:42" pos:end="2363:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2365:33" pos:end="2365:78"><expr pos:start="2365:33" pos:end="2365:77"><call pos:start="2365:33" pos:end="2365:77"><name pos:start="2365:33" pos:end="2365:46">tcg_gen_xor_tl</name><argument_list pos:start="2365:47" pos:end="2365:77">(<argument pos:start="2365:48" pos:end="2365:56"><expr pos:start="2365:48" pos:end="2365:56"><name pos:start="2365:48" pos:end="2365:56">cpu_tmp64</name></expr></argument>, <argument pos:start="2365:59" pos:end="2365:66"><expr pos:start="2365:59" pos:end="2365:66"><name pos:start="2365:59" pos:end="2365:66">cpu_src1</name></expr></argument>, <argument pos:start="2365:69" pos:end="2365:76"><expr pos:start="2365:69" pos:end="2365:76"><name pos:start="2365:69" pos:end="2365:76">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2367:33" pos:end="2367:77"><expr pos:start="2367:33" pos:end="2367:76"><call pos:start="2367:33" pos:end="2367:76"><name pos:start="2367:33" pos:end="2367:56">gen_helper_write_softint</name><argument_list pos:start="2367:57" pos:end="2367:76">(<argument pos:start="2367:58" pos:end="2367:64"><expr pos:start="2367:58" pos:end="2367:64"><name pos:start="2367:58" pos:end="2367:64">cpu_env</name></expr></argument>, <argument pos:start="2367:67" pos:end="2367:75"><expr pos:start="2367:67" pos:end="2367:75"><name pos:start="2367:67" pos:end="2367:75">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2369:33" pos:end="2369:38">break;</break>

                            <case pos:start="2371:29" pos:end="2374:0">case <expr pos:start="2371:34" pos:end="2371:37"><literal type="number" pos:start="2371:34" pos:end="2371:37">0x17</literal></expr>:</case> <comment type="block" pos:start="2371:40" pos:end="2371:57">/* Tick compare */</comment>

<cpp:if pos:start="2373:1" pos:end="2373:30">#<cpp:directive pos:start="2373:2" pos:end="2373:3">if</cpp:directive> <expr pos:start="2373:5" pos:end="2373:30"><operator pos:start="2373:5" pos:end="2373:5">!</operator><call pos:start="2373:6" pos:end="2373:30"><name pos:start="2373:6" pos:end="2373:12">defined</name><argument_list pos:start="2373:13" pos:end="2373:30">(<argument pos:start="2373:14" pos:end="2373:29"><expr pos:start="2373:14" pos:end="2373:29"><name pos:start="2373:14" pos:end="2373:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2375:33" pos:end="2380:0"><if pos:start="2375:33" pos:end="2380:0">if <condition pos:start="2375:36" pos:end="2375:52">(<expr pos:start="2375:37" pos:end="2375:51"><operator pos:start="2375:37" pos:end="2375:37">!</operator><call pos:start="2375:38" pos:end="2375:51"><name pos:start="2375:38" pos:end="2375:47">supervisor</name><argument_list pos:start="2375:48" pos:end="2375:51">(<argument pos:start="2375:49" pos:end="2375:50"><expr pos:start="2375:49" pos:end="2375:50"><name pos:start="2375:49" pos:end="2375:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2377:37" pos:end="2380:0"><block_content pos:start="2377:37" pos:end="2380:0">

                                    <goto pos:start="2377:37" pos:end="2380:0">goto <name pos:start="2377:42" pos:end="2377:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="2379:1" pos:end="2379:6">#<cpp:directive pos:start="2379:2" pos:end="2379:6">endif</cpp:directive></cpp:endif>

                                <block pos:start="2381:33" pos:end="2403:33">{<block_content pos:start="2383:37" pos:end="2401:65">

                                    <decl_stmt pos:start="2383:37" pos:end="2383:55"><decl pos:start="2383:37" pos:end="2383:54"><type pos:start="2383:37" pos:end="2383:44"><name pos:start="2383:37" pos:end="2383:44">TCGv_ptr</name></type> <name pos:start="2383:46" pos:end="2383:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2387:37" pos:end="2389:61"><expr pos:start="2387:37" pos:end="2389:60"><call pos:start="2387:37" pos:end="2389:60"><name pos:start="2387:37" pos:end="2387:50">tcg_gen_xor_tl</name><argument_list pos:start="2387:51" pos:end="2389:60">(<argument pos:start="2387:52" pos:end="2387:64"><expr pos:start="2387:52" pos:end="2387:64"><name pos:start="2387:52" pos:end="2387:64">cpu_tick_cmpr</name></expr></argument>, <argument pos:start="2387:67" pos:end="2387:74"><expr pos:start="2387:67" pos:end="2387:74"><name pos:start="2387:67" pos:end="2387:74">cpu_src1</name></expr></argument>,

                                                   <argument pos:start="2389:52" pos:end="2389:59"><expr pos:start="2389:52" pos:end="2389:59"><name pos:start="2389:52" pos:end="2389:59">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2391:37" pos:end="2391:67"><expr pos:start="2391:37" pos:end="2391:66"><name pos:start="2391:37" pos:end="2391:45">r_tickptr</name> <operator pos:start="2391:47" pos:end="2391:47">=</operator> <call pos:start="2391:49" pos:end="2391:66"><name pos:start="2391:49" pos:end="2391:64">tcg_temp_new_ptr</name><argument_list pos:start="2391:65" pos:end="2391:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2393:37" pos:end="2395:82"><expr pos:start="2393:37" pos:end="2395:81"><call pos:start="2393:37" pos:end="2395:81"><name pos:start="2393:37" pos:end="2393:50">tcg_gen_ld_ptr</name><argument_list pos:start="2393:51" pos:end="2395:81">(<argument pos:start="2393:52" pos:end="2393:60"><expr pos:start="2393:52" pos:end="2393:60"><name pos:start="2393:52" pos:end="2393:60">r_tickptr</name></expr></argument>, <argument pos:start="2393:63" pos:end="2393:69"><expr pos:start="2393:63" pos:end="2393:69"><name pos:start="2393:63" pos:end="2393:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2395:52" pos:end="2395:80"><expr pos:start="2395:52" pos:end="2395:80"><call pos:start="2395:52" pos:end="2395:80"><name pos:start="2395:52" pos:end="2395:59">offsetof</name><argument_list pos:start="2395:60" pos:end="2395:80">(<argument pos:start="2395:61" pos:end="2395:73"><expr pos:start="2395:61" pos:end="2395:73"><name pos:start="2395:61" pos:end="2395:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2395:76" pos:end="2395:79"><expr pos:start="2395:76" pos:end="2395:79"><name pos:start="2395:76" pos:end="2395:79">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2397:37" pos:end="2399:77"><expr pos:start="2397:37" pos:end="2399:76"><call pos:start="2397:37" pos:end="2399:76"><name pos:start="2397:37" pos:end="2397:61">gen_helper_tick_set_limit</name><argument_list pos:start="2397:62" pos:end="2399:76">(<argument pos:start="2397:63" pos:end="2397:71"><expr pos:start="2397:63" pos:end="2397:71"><name pos:start="2397:63" pos:end="2397:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2399:63" pos:end="2399:75"><expr pos:start="2399:63" pos:end="2399:75"><name pos:start="2399:63" pos:end="2399:75">cpu_tick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2401:37" pos:end="2401:65"><expr pos:start="2401:37" pos:end="2401:64"><call pos:start="2401:37" pos:end="2401:64"><name pos:start="2401:37" pos:end="2401:53">tcg_temp_free_ptr</name><argument_list pos:start="2401:54" pos:end="2401:64">(<argument pos:start="2401:55" pos:end="2401:63"><expr pos:start="2401:55" pos:end="2401:63"><name pos:start="2401:55" pos:end="2401:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2405:33" pos:end="2405:38">break;</break>

                            <case pos:start="2407:29" pos:end="2410:0">case <expr pos:start="2407:34" pos:end="2407:37"><literal type="number" pos:start="2407:34" pos:end="2407:37">0x18</literal></expr>:</case> <comment type="block" pos:start="2407:40" pos:end="2407:56">/* System tick */</comment>

<cpp:if pos:start="2409:1" pos:end="2409:30">#<cpp:directive pos:start="2409:2" pos:end="2409:3">if</cpp:directive> <expr pos:start="2409:5" pos:end="2409:30"><operator pos:start="2409:5" pos:end="2409:5">!</operator><call pos:start="2409:6" pos:end="2409:30"><name pos:start="2409:6" pos:end="2409:12">defined</name><argument_list pos:start="2409:13" pos:end="2409:30">(<argument pos:start="2409:14" pos:end="2409:29"><expr pos:start="2409:14" pos:end="2409:29"><name pos:start="2409:14" pos:end="2409:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2411:33" pos:end="2416:0"><if pos:start="2411:33" pos:end="2416:0">if <condition pos:start="2411:36" pos:end="2411:52">(<expr pos:start="2411:37" pos:end="2411:51"><operator pos:start="2411:37" pos:end="2411:37">!</operator><call pos:start="2411:38" pos:end="2411:51"><name pos:start="2411:38" pos:end="2411:47">supervisor</name><argument_list pos:start="2411:48" pos:end="2411:51">(<argument pos:start="2411:49" pos:end="2411:50"><expr pos:start="2411:49" pos:end="2411:50"><name pos:start="2411:49" pos:end="2411:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2413:37" pos:end="2416:0"><block_content pos:start="2413:37" pos:end="2416:0">

                                    <goto pos:start="2413:37" pos:end="2416:0">goto <name pos:start="2413:42" pos:end="2413:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="2415:1" pos:end="2415:6">#<cpp:directive pos:start="2415:2" pos:end="2415:6">endif</cpp:directive></cpp:endif>

                                <block pos:start="2417:33" pos:end="2439:33">{<block_content pos:start="2419:37" pos:end="2437:65">

                                    <decl_stmt pos:start="2419:37" pos:end="2419:55"><decl pos:start="2419:37" pos:end="2419:54"><type pos:start="2419:37" pos:end="2419:44"><name pos:start="2419:37" pos:end="2419:44">TCGv_ptr</name></type> <name pos:start="2419:46" pos:end="2419:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2423:37" pos:end="2425:61"><expr pos:start="2423:37" pos:end="2425:60"><call pos:start="2423:37" pos:end="2425:60"><name pos:start="2423:37" pos:end="2423:50">tcg_gen_xor_tl</name><argument_list pos:start="2423:51" pos:end="2425:60">(<argument pos:start="2423:52" pos:end="2423:58"><expr pos:start="2423:52" pos:end="2423:58"><name pos:start="2423:52" pos:end="2423:58">cpu_dst</name></expr></argument>, <argument pos:start="2423:61" pos:end="2423:68"><expr pos:start="2423:61" pos:end="2423:68"><name pos:start="2423:61" pos:end="2423:68">cpu_src1</name></expr></argument>,

                                                   <argument pos:start="2425:52" pos:end="2425:59"><expr pos:start="2425:52" pos:end="2425:59"><name pos:start="2425:52" pos:end="2425:59">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2427:37" pos:end="2427:67"><expr pos:start="2427:37" pos:end="2427:66"><name pos:start="2427:37" pos:end="2427:45">r_tickptr</name> <operator pos:start="2427:47" pos:end="2427:47">=</operator> <call pos:start="2427:49" pos:end="2427:66"><name pos:start="2427:49" pos:end="2427:64">tcg_temp_new_ptr</name><argument_list pos:start="2427:65" pos:end="2427:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2429:37" pos:end="2431:83"><expr pos:start="2429:37" pos:end="2431:82"><call pos:start="2429:37" pos:end="2431:82"><name pos:start="2429:37" pos:end="2429:50">tcg_gen_ld_ptr</name><argument_list pos:start="2429:51" pos:end="2431:82">(<argument pos:start="2429:52" pos:end="2429:60"><expr pos:start="2429:52" pos:end="2429:60"><name pos:start="2429:52" pos:end="2429:60">r_tickptr</name></expr></argument>, <argument pos:start="2429:63" pos:end="2429:69"><expr pos:start="2429:63" pos:end="2429:69"><name pos:start="2429:63" pos:end="2429:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2431:52" pos:end="2431:81"><expr pos:start="2431:52" pos:end="2431:81"><call pos:start="2431:52" pos:end="2431:81"><name pos:start="2431:52" pos:end="2431:59">offsetof</name><argument_list pos:start="2431:60" pos:end="2431:81">(<argument pos:start="2431:61" pos:end="2431:73"><expr pos:start="2431:61" pos:end="2431:73"><name pos:start="2431:61" pos:end="2431:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2431:76" pos:end="2431:80"><expr pos:start="2431:76" pos:end="2431:80"><name pos:start="2431:76" pos:end="2431:80">stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2433:37" pos:end="2435:71"><expr pos:start="2433:37" pos:end="2435:70"><call pos:start="2433:37" pos:end="2435:70"><name pos:start="2433:37" pos:end="2433:61">gen_helper_tick_set_count</name><argument_list pos:start="2433:62" pos:end="2435:70">(<argument pos:start="2433:63" pos:end="2433:71"><expr pos:start="2433:63" pos:end="2433:71"><name pos:start="2433:63" pos:end="2433:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2435:63" pos:end="2435:69"><expr pos:start="2435:63" pos:end="2435:69"><name pos:start="2435:63" pos:end="2435:69">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2437:37" pos:end="2437:65"><expr pos:start="2437:37" pos:end="2437:64"><call pos:start="2437:37" pos:end="2437:64"><name pos:start="2437:37" pos:end="2437:53">tcg_temp_free_ptr</name><argument_list pos:start="2437:54" pos:end="2437:64">(<argument pos:start="2437:55" pos:end="2437:63"><expr pos:start="2437:55" pos:end="2437:63"><name pos:start="2437:55" pos:end="2437:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2441:33" pos:end="2441:38">break;</break>

                            <case pos:start="2443:29" pos:end="2446:0">case <expr pos:start="2443:34" pos:end="2443:37"><literal type="number" pos:start="2443:34" pos:end="2443:37">0x19</literal></expr>:</case> <comment type="block" pos:start="2443:40" pos:end="2443:64">/* System tick compare */</comment>

<cpp:if pos:start="2445:1" pos:end="2445:30">#<cpp:directive pos:start="2445:2" pos:end="2445:3">if</cpp:directive> <expr pos:start="2445:5" pos:end="2445:30"><operator pos:start="2445:5" pos:end="2445:5">!</operator><call pos:start="2445:6" pos:end="2445:30"><name pos:start="2445:6" pos:end="2445:12">defined</name><argument_list pos:start="2445:13" pos:end="2445:30">(<argument pos:start="2445:14" pos:end="2445:29"><expr pos:start="2445:14" pos:end="2445:29"><name pos:start="2445:14" pos:end="2445:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                                <if_stmt pos:start="2447:33" pos:end="2452:0"><if pos:start="2447:33" pos:end="2452:0">if <condition pos:start="2447:36" pos:end="2447:52">(<expr pos:start="2447:37" pos:end="2447:51"><operator pos:start="2447:37" pos:end="2447:37">!</operator><call pos:start="2447:38" pos:end="2447:51"><name pos:start="2447:38" pos:end="2447:47">supervisor</name><argument_list pos:start="2447:48" pos:end="2447:51">(<argument pos:start="2447:49" pos:end="2447:50"><expr pos:start="2447:49" pos:end="2447:50"><name pos:start="2447:49" pos:end="2447:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2449:37" pos:end="2452:0"><block_content pos:start="2449:37" pos:end="2452:0">

                                    <goto pos:start="2449:37" pos:end="2452:0">goto <name pos:start="2449:42" pos:end="2449:53">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="2451:1" pos:end="2451:6">#<cpp:directive pos:start="2451:2" pos:end="2451:6">endif</cpp:directive></cpp:endif>

                                <block pos:start="2453:33" pos:end="2475:33">{<block_content pos:start="2455:37" pos:end="2473:65">

                                    <decl_stmt pos:start="2455:37" pos:end="2455:55"><decl pos:start="2455:37" pos:end="2455:54"><type pos:start="2455:37" pos:end="2455:44"><name pos:start="2455:37" pos:end="2455:44">TCGv_ptr</name></type> <name pos:start="2455:46" pos:end="2455:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2459:37" pos:end="2461:61"><expr pos:start="2459:37" pos:end="2461:60"><call pos:start="2459:37" pos:end="2461:60"><name pos:start="2459:37" pos:end="2459:50">tcg_gen_xor_tl</name><argument_list pos:start="2459:51" pos:end="2461:60">(<argument pos:start="2459:52" pos:end="2459:65"><expr pos:start="2459:52" pos:end="2459:65"><name pos:start="2459:52" pos:end="2459:65">cpu_stick_cmpr</name></expr></argument>, <argument pos:start="2459:68" pos:end="2459:75"><expr pos:start="2459:68" pos:end="2459:75"><name pos:start="2459:68" pos:end="2459:75">cpu_src1</name></expr></argument>,

                                                   <argument pos:start="2461:52" pos:end="2461:59"><expr pos:start="2461:52" pos:end="2461:59"><name pos:start="2461:52" pos:end="2461:59">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2463:37" pos:end="2463:67"><expr pos:start="2463:37" pos:end="2463:66"><name pos:start="2463:37" pos:end="2463:45">r_tickptr</name> <operator pos:start="2463:47" pos:end="2463:47">=</operator> <call pos:start="2463:49" pos:end="2463:66"><name pos:start="2463:49" pos:end="2463:64">tcg_temp_new_ptr</name><argument_list pos:start="2463:65" pos:end="2463:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2465:37" pos:end="2467:83"><expr pos:start="2465:37" pos:end="2467:82"><call pos:start="2465:37" pos:end="2467:82"><name pos:start="2465:37" pos:end="2465:50">tcg_gen_ld_ptr</name><argument_list pos:start="2465:51" pos:end="2467:82">(<argument pos:start="2465:52" pos:end="2465:60"><expr pos:start="2465:52" pos:end="2465:60"><name pos:start="2465:52" pos:end="2465:60">r_tickptr</name></expr></argument>, <argument pos:start="2465:63" pos:end="2465:69"><expr pos:start="2465:63" pos:end="2465:69"><name pos:start="2465:63" pos:end="2465:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2467:52" pos:end="2467:81"><expr pos:start="2467:52" pos:end="2467:81"><call pos:start="2467:52" pos:end="2467:81"><name pos:start="2467:52" pos:end="2467:59">offsetof</name><argument_list pos:start="2467:60" pos:end="2467:81">(<argument pos:start="2467:61" pos:end="2467:73"><expr pos:start="2467:61" pos:end="2467:73"><name pos:start="2467:61" pos:end="2467:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2467:76" pos:end="2467:80"><expr pos:start="2467:76" pos:end="2467:80"><name pos:start="2467:76" pos:end="2467:80">stick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2469:37" pos:end="2471:78"><expr pos:start="2469:37" pos:end="2471:77"><call pos:start="2469:37" pos:end="2471:77"><name pos:start="2469:37" pos:end="2469:61">gen_helper_tick_set_limit</name><argument_list pos:start="2469:62" pos:end="2471:77">(<argument pos:start="2469:63" pos:end="2469:71"><expr pos:start="2469:63" pos:end="2469:71"><name pos:start="2469:63" pos:end="2469:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2471:63" pos:end="2471:76"><expr pos:start="2471:63" pos:end="2471:76"><name pos:start="2471:63" pos:end="2471:76">cpu_stick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2473:37" pos:end="2473:65"><expr pos:start="2473:37" pos:end="2473:64"><call pos:start="2473:37" pos:end="2473:64"><name pos:start="2473:37" pos:end="2473:53">tcg_temp_free_ptr</name><argument_list pos:start="2473:54" pos:end="2473:64">(<argument pos:start="2473:55" pos:end="2473:63"><expr pos:start="2473:55" pos:end="2473:63"><name pos:start="2473:55" pos:end="2473:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2477:33" pos:end="2477:38">break;</break>



                            <case pos:start="2481:29" pos:end="2481:38">case <expr pos:start="2481:34" pos:end="2481:37"><literal type="number" pos:start="2481:34" pos:end="2481:37">0x10</literal></expr>:</case> <comment type="block" pos:start="2481:40" pos:end="2481:64">/* Performance Control */</comment>

                            <case pos:start="2483:29" pos:end="2483:38">case <expr pos:start="2483:34" pos:end="2483:37"><literal type="number" pos:start="2483:34" pos:end="2483:37">0x11</literal></expr>:</case> <comment type="block" pos:start="2483:40" pos:end="2485:52">/* Performance Instrumentation

                                          Counter */</comment>

                            <case pos:start="2487:29" pos:end="2490:0">case <expr pos:start="2487:34" pos:end="2487:37"><literal type="number" pos:start="2487:34" pos:end="2487:37">0x12</literal></expr>:</case> <comment type="block" pos:start="2487:40" pos:end="2487:61">/* Dispatch Control */</comment>

<cpp:endif pos:start="2489:1" pos:end="2489:6">#<cpp:directive pos:start="2489:2" pos:end="2489:6">endif</cpp:directive></cpp:endif>

                            <default pos:start="2491:29" pos:end="2491:36">default:</default>

                                <goto pos:start="2493:33" pos:end="2493:50">goto <name pos:start="2493:38" pos:end="2493:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

                        </block_content>}</block>

                        <break pos:start="2499:25" pos:end="2502:0">break;</break>

<cpp:if pos:start="2501:1" pos:end="2501:30">#<cpp:directive pos:start="2501:2" pos:end="2501:3">if</cpp:directive> <expr pos:start="2501:5" pos:end="2501:30"><operator pos:start="2501:5" pos:end="2501:5">!</operator><call pos:start="2501:6" pos:end="2501:30"><name pos:start="2501:6" pos:end="2501:12">defined</name><argument_list pos:start="2501:13" pos:end="2501:30">(<argument pos:start="2501:14" pos:end="2501:29"><expr pos:start="2501:14" pos:end="2501:29"><name pos:start="2501:14" pos:end="2501:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <case pos:start="2503:21" pos:end="2503:30">case <expr pos:start="2503:26" pos:end="2503:29"><literal type="number" pos:start="2503:26" pos:end="2503:29">0x31</literal></expr>:</case> <comment type="block" pos:start="2503:32" pos:end="2503:62">/* wrpsr, V9 saved, restored */</comment>

                        <block pos:start="2505:25" pos:end="2563:25">{<block_content pos:start="2507:29" pos:end="2562:0">

                            <if_stmt pos:start="2507:29" pos:end="2512:0"><if pos:start="2507:29" pos:end="2512:0">if <condition pos:start="2507:32" pos:end="2507:48">(<expr pos:start="2507:33" pos:end="2507:47"><operator pos:start="2507:33" pos:end="2507:33">!</operator><call pos:start="2507:34" pos:end="2507:47"><name pos:start="2507:34" pos:end="2507:43">supervisor</name><argument_list pos:start="2507:44" pos:end="2507:47">(<argument pos:start="2507:45" pos:end="2507:46"><expr pos:start="2507:45" pos:end="2507:46"><name pos:start="2507:45" pos:end="2507:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2509:33" pos:end="2512:0"><block_content pos:start="2509:33" pos:end="2512:0">

                                <goto pos:start="2509:33" pos:end="2512:0">goto <name pos:start="2509:38" pos:end="2509:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="2511:1" pos:end="2511:21">#<cpp:directive pos:start="2511:2" pos:end="2511:6">ifdef</cpp:directive> <name pos:start="2511:8" pos:end="2511:21">TARGET_SPARC64</name></cpp:ifdef>

                            <switch pos:start="2513:29" pos:end="2544:0">switch <condition pos:start="2513:36" pos:end="2513:39">(<expr pos:start="2513:37" pos:end="2513:38"><name pos:start="2513:37" pos:end="2513:38">rd</name></expr>)</condition> <block pos:start="2513:41" pos:end="2544:0">{<block_content pos:start="2515:29" pos:end="2539:50">

                            <case pos:start="2515:29" pos:end="2515:35">case <expr pos:start="2515:34" pos:end="2515:34"><literal type="number" pos:start="2515:34" pos:end="2515:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2517:33" pos:end="2517:58"><expr pos:start="2517:33" pos:end="2517:57"><call pos:start="2517:33" pos:end="2517:57"><name pos:start="2517:33" pos:end="2517:48">gen_helper_saved</name><argument_list pos:start="2517:49" pos:end="2517:57">(<argument pos:start="2517:50" pos:end="2517:56"><expr pos:start="2517:50" pos:end="2517:56"><name pos:start="2517:50" pos:end="2517:56">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2519:33" pos:end="2519:38">break;</break>

                            <case pos:start="2521:29" pos:end="2521:35">case <expr pos:start="2521:34" pos:end="2521:34"><literal type="number" pos:start="2521:34" pos:end="2521:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2523:33" pos:end="2523:61"><expr pos:start="2523:33" pos:end="2523:60"><call pos:start="2523:33" pos:end="2523:60"><name pos:start="2523:33" pos:end="2523:51">gen_helper_restored</name><argument_list pos:start="2523:52" pos:end="2523:60">(<argument pos:start="2523:53" pos:end="2523:59"><expr pos:start="2523:53" pos:end="2523:59"><name pos:start="2523:53" pos:end="2523:59">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2525:33" pos:end="2525:38">break;</break>

                            <case pos:start="2527:29" pos:end="2527:35">case <expr pos:start="2527:34" pos:end="2527:34"><literal type="number" pos:start="2527:34" pos:end="2527:34">2</literal></expr>:</case> <comment type="block" pos:start="2527:37" pos:end="2527:57">/* UA2005 allclean */</comment>

                            <case pos:start="2529:29" pos:end="2529:35">case <expr pos:start="2529:34" pos:end="2529:34"><literal type="number" pos:start="2529:34" pos:end="2529:34">3</literal></expr>:</case> <comment type="block" pos:start="2529:37" pos:end="2529:55">/* UA2005 otherw */</comment>

                            <case pos:start="2531:29" pos:end="2531:35">case <expr pos:start="2531:34" pos:end="2531:34"><literal type="number" pos:start="2531:34" pos:end="2531:34">4</literal></expr>:</case> <comment type="block" pos:start="2531:37" pos:end="2531:56">/* UA2005 normalw */</comment>

                            <case pos:start="2533:29" pos:end="2533:35">case <expr pos:start="2533:34" pos:end="2533:34"><literal type="number" pos:start="2533:34" pos:end="2533:34">5</literal></expr>:</case> <comment type="block" pos:start="2533:37" pos:end="2533:55">/* UA2005 invalw */</comment>

                                <comment type="line" pos:start="2535:33" pos:end="2535:38">// XXX</comment>

                            <default pos:start="2537:29" pos:end="2537:36">default:</default>

                                <goto pos:start="2539:33" pos:end="2539:50">goto <name pos:start="2539:38" pos:end="2539:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

<cpp:else pos:start="2543:1" pos:end="2543:5">#<cpp:directive pos:start="2543:2" pos:end="2543:5">else</cpp:directive></cpp:else>

                            <expr_stmt pos:start="2545:29" pos:end="2545:72"><expr pos:start="2545:29" pos:end="2545:71"><call pos:start="2545:29" pos:end="2545:71"><name pos:start="2545:29" pos:end="2545:42">tcg_gen_xor_tl</name><argument_list pos:start="2545:43" pos:end="2545:71">(<argument pos:start="2545:44" pos:end="2545:50"><expr pos:start="2545:44" pos:end="2545:50"><name pos:start="2545:44" pos:end="2545:50">cpu_dst</name></expr></argument>, <argument pos:start="2545:53" pos:end="2545:60"><expr pos:start="2545:53" pos:end="2545:60"><name pos:start="2545:53" pos:end="2545:60">cpu_src1</name></expr></argument>, <argument pos:start="2545:63" pos:end="2545:70"><expr pos:start="2545:63" pos:end="2545:70"><name pos:start="2545:63" pos:end="2545:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2547:29" pos:end="2547:63"><expr pos:start="2547:29" pos:end="2547:62"><call pos:start="2547:29" pos:end="2547:62"><name pos:start="2547:29" pos:end="2547:44">gen_helper_wrpsr</name><argument_list pos:start="2547:45" pos:end="2547:62">(<argument pos:start="2547:46" pos:end="2547:52"><expr pos:start="2547:46" pos:end="2547:52"><name pos:start="2547:46" pos:end="2547:52">cpu_env</name></expr></argument>, <argument pos:start="2547:55" pos:end="2547:61"><expr pos:start="2547:55" pos:end="2547:61"><name pos:start="2547:55" pos:end="2547:61">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2549:29" pos:end="2549:69"><expr pos:start="2549:29" pos:end="2549:68"><call pos:start="2549:29" pos:end="2549:68"><name pos:start="2549:29" pos:end="2549:44">tcg_gen_movi_i32</name><argument_list pos:start="2549:45" pos:end="2549:68">(<argument pos:start="2549:46" pos:end="2549:54"><expr pos:start="2549:46" pos:end="2549:54"><name pos:start="2549:46" pos:end="2549:54">cpu_cc_op</name></expr></argument>, <argument pos:start="2549:57" pos:end="2549:67"><expr pos:start="2549:57" pos:end="2549:67"><name pos:start="2549:57" pos:end="2549:67">CC_OP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2551:29" pos:end="2551:52"><expr pos:start="2551:29" pos:end="2551:51"><name pos:start="2551:29" pos:end="2551:37"><name pos:start="2551:29" pos:end="2551:30">dc</name><operator pos:start="2551:31" pos:end="2551:32">-&gt;</operator><name pos:start="2551:33" pos:end="2551:37">cc_op</name></name> <operator pos:start="2551:39" pos:end="2551:39">=</operator> <name pos:start="2551:41" pos:end="2551:51">CC_OP_FLAGS</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="2553:29" pos:end="2553:43"><expr pos:start="2553:29" pos:end="2553:42"><call pos:start="2553:29" pos:end="2553:42"><name pos:start="2553:29" pos:end="2553:38">save_state</name><argument_list pos:start="2553:39" pos:end="2553:42">(<argument pos:start="2553:40" pos:end="2553:41"><expr pos:start="2553:40" pos:end="2553:41"><name pos:start="2553:40" pos:end="2553:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2555:29" pos:end="2555:47"><expr pos:start="2555:29" pos:end="2555:46"><call pos:start="2555:29" pos:end="2555:46"><name pos:start="2555:29" pos:end="2555:44">gen_op_next_insn</name><argument_list pos:start="2555:45" pos:end="2555:46">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2557:29" pos:end="2557:47"><expr pos:start="2557:29" pos:end="2557:46"><call pos:start="2557:29" pos:end="2557:46"><name pos:start="2557:29" pos:end="2557:43">tcg_gen_exit_tb</name><argument_list pos:start="2557:44" pos:end="2557:46">(<argument pos:start="2557:45" pos:end="2557:45"><expr pos:start="2557:45" pos:end="2557:45"><literal type="number" pos:start="2557:45" pos:end="2557:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2559:29" pos:end="2562:0"><expr pos:start="2559:29" pos:end="2559:41"><name pos:start="2559:29" pos:end="2559:37"><name pos:start="2559:29" pos:end="2559:30">dc</name><operator pos:start="2559:31" pos:end="2559:32">-&gt;</operator><name pos:start="2559:33" pos:end="2559:37">is_br</name></name> <operator pos:start="2559:39" pos:end="2559:39">=</operator> <literal type="number" pos:start="2559:41" pos:end="2559:41">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="2561:1" pos:end="2561:6">#<cpp:directive pos:start="2561:2" pos:end="2561:6">endif</cpp:directive></cpp:endif>

                        </block_content>}</block>

                        <break pos:start="2565:25" pos:end="2565:30">break;</break>

                    <case pos:start="2567:21" pos:end="2567:30">case <expr pos:start="2567:26" pos:end="2567:29"><literal type="number" pos:start="2567:26" pos:end="2567:29">0x32</literal></expr>:</case> <comment type="block" pos:start="2567:32" pos:end="2567:51">/* wrwim, V9 wrpr */</comment>

                        <block pos:start="2569:25" pos:end="2843:25">{<block_content pos:start="2571:29" pos:end="2842:0">

                            <if_stmt pos:start="2571:29" pos:end="2573:47"><if pos:start="2571:29" pos:end="2573:47">if <condition pos:start="2571:32" pos:end="2571:48">(<expr pos:start="2571:33" pos:end="2571:47"><operator pos:start="2571:33" pos:end="2571:33">!</operator><call pos:start="2571:34" pos:end="2571:47"><name pos:start="2571:34" pos:end="2571:43">supervisor</name><argument_list pos:start="2571:44" pos:end="2571:47">(<argument pos:start="2571:45" pos:end="2571:46"><expr pos:start="2571:45" pos:end="2571:46"><name pos:start="2571:45" pos:end="2571:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2573:33" pos:end="2573:47"><block_content pos:start="2573:33" pos:end="2573:47">

                                <goto pos:start="2573:33" pos:end="2573:47">goto <name pos:start="2573:38" pos:end="2573:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2575:29" pos:end="2578:0"><expr pos:start="2575:29" pos:end="2575:72"><call pos:start="2575:29" pos:end="2575:72"><name pos:start="2575:29" pos:end="2575:42">tcg_gen_xor_tl</name><argument_list pos:start="2575:43" pos:end="2575:72">(<argument pos:start="2575:44" pos:end="2575:51"><expr pos:start="2575:44" pos:end="2575:51"><name pos:start="2575:44" pos:end="2575:51">cpu_tmp0</name></expr></argument>, <argument pos:start="2575:54" pos:end="2575:61"><expr pos:start="2575:54" pos:end="2575:61"><name pos:start="2575:54" pos:end="2575:61">cpu_src1</name></expr></argument>, <argument pos:start="2575:64" pos:end="2575:71"><expr pos:start="2575:64" pos:end="2575:71"><name pos:start="2575:64" pos:end="2575:71">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="2577:1" pos:end="2577:21">#<cpp:directive pos:start="2577:2" pos:end="2577:6">ifdef</cpp:directive> <name pos:start="2577:8" pos:end="2577:21">TARGET_SPARC64</name></cpp:ifdef>

                            <switch pos:start="2579:29" pos:end="2830:0">switch <condition pos:start="2579:36" pos:end="2579:39">(<expr pos:start="2579:37" pos:end="2579:38"><name pos:start="2579:37" pos:end="2579:38">rd</name></expr>)</condition> <block pos:start="2579:41" pos:end="2830:0">{<block_content pos:start="2581:29" pos:end="2825:50">

                            <case pos:start="2581:29" pos:end="2581:35">case <expr pos:start="2581:34" pos:end="2581:34"><literal type="number" pos:start="2581:34" pos:end="2581:34">0</literal></expr>:</case> <comment type="line" pos:start="2581:37" pos:end="2581:42">// tpc</comment>

                                <block pos:start="2583:33" pos:end="2599:33">{<block_content pos:start="2585:37" pos:end="2597:63">

                                    <decl_stmt pos:start="2585:37" pos:end="2585:53"><decl pos:start="2585:37" pos:end="2585:52"><type pos:start="2585:37" pos:end="2585:44"><name pos:start="2585:37" pos:end="2585:44">TCGv_ptr</name></type> <name pos:start="2585:46" pos:end="2585:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2589:37" pos:end="2589:65"><expr pos:start="2589:37" pos:end="2589:64"><name pos:start="2589:37" pos:end="2589:43">r_tsptr</name> <operator pos:start="2589:45" pos:end="2589:45">=</operator> <call pos:start="2589:47" pos:end="2589:64"><name pos:start="2589:47" pos:end="2589:62">tcg_temp_new_ptr</name><argument_list pos:start="2589:63" pos:end="2589:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2591:37" pos:end="2591:80"><expr pos:start="2591:37" pos:end="2591:79"><call pos:start="2591:37" pos:end="2591:79"><name pos:start="2591:37" pos:end="2591:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2591:62" pos:end="2591:79">(<argument pos:start="2591:63" pos:end="2591:69"><expr pos:start="2591:63" pos:end="2591:69"><name pos:start="2591:63" pos:end="2591:69">r_tsptr</name></expr></argument>, <argument pos:start="2591:72" pos:end="2591:78"><expr pos:start="2591:72" pos:end="2591:78"><name pos:start="2591:72" pos:end="2591:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2593:37" pos:end="2595:77"><expr pos:start="2593:37" pos:end="2595:76"><call pos:start="2593:37" pos:end="2595:76"><name pos:start="2593:37" pos:end="2593:49">tcg_gen_st_tl</name><argument_list pos:start="2593:50" pos:end="2595:76">(<argument pos:start="2593:51" pos:end="2593:58"><expr pos:start="2593:51" pos:end="2593:58"><name pos:start="2593:51" pos:end="2593:58">cpu_tmp0</name></expr></argument>, <argument pos:start="2593:61" pos:end="2593:67"><expr pos:start="2593:61" pos:end="2593:67"><name pos:start="2593:61" pos:end="2593:67">r_tsptr</name></expr></argument>,

                                                  <argument pos:start="2595:51" pos:end="2595:75"><expr pos:start="2595:51" pos:end="2595:75"><call pos:start="2595:51" pos:end="2595:75"><name pos:start="2595:51" pos:end="2595:58">offsetof</name><argument_list pos:start="2595:59" pos:end="2595:75">(<argument pos:start="2595:60" pos:end="2595:69"><expr pos:start="2595:60" pos:end="2595:69"><name pos:start="2595:60" pos:end="2595:69">trap_state</name></expr></argument>, <argument pos:start="2595:72" pos:end="2595:74"><expr pos:start="2595:72" pos:end="2595:74"><name pos:start="2595:72" pos:end="2595:74">tpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2597:37" pos:end="2597:63"><expr pos:start="2597:37" pos:end="2597:62"><call pos:start="2597:37" pos:end="2597:62"><name pos:start="2597:37" pos:end="2597:53">tcg_temp_free_ptr</name><argument_list pos:start="2597:54" pos:end="2597:62">(<argument pos:start="2597:55" pos:end="2597:61"><expr pos:start="2597:55" pos:end="2597:61"><name pos:start="2597:55" pos:end="2597:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2601:33" pos:end="2601:38">break;</break>

                            <case pos:start="2603:29" pos:end="2603:35">case <expr pos:start="2603:34" pos:end="2603:34"><literal type="number" pos:start="2603:34" pos:end="2603:34">1</literal></expr>:</case> <comment type="line" pos:start="2603:37" pos:end="2603:43">// tnpc</comment>

                                <block pos:start="2605:33" pos:end="2621:33">{<block_content pos:start="2607:37" pos:end="2619:63">

                                    <decl_stmt pos:start="2607:37" pos:end="2607:53"><decl pos:start="2607:37" pos:end="2607:52"><type pos:start="2607:37" pos:end="2607:44"><name pos:start="2607:37" pos:end="2607:44">TCGv_ptr</name></type> <name pos:start="2607:46" pos:end="2607:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2611:37" pos:end="2611:65"><expr pos:start="2611:37" pos:end="2611:64"><name pos:start="2611:37" pos:end="2611:43">r_tsptr</name> <operator pos:start="2611:45" pos:end="2611:45">=</operator> <call pos:start="2611:47" pos:end="2611:64"><name pos:start="2611:47" pos:end="2611:62">tcg_temp_new_ptr</name><argument_list pos:start="2611:63" pos:end="2611:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2613:37" pos:end="2613:80"><expr pos:start="2613:37" pos:end="2613:79"><call pos:start="2613:37" pos:end="2613:79"><name pos:start="2613:37" pos:end="2613:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2613:62" pos:end="2613:79">(<argument pos:start="2613:63" pos:end="2613:69"><expr pos:start="2613:63" pos:end="2613:69"><name pos:start="2613:63" pos:end="2613:69">r_tsptr</name></expr></argument>, <argument pos:start="2613:72" pos:end="2613:78"><expr pos:start="2613:72" pos:end="2613:78"><name pos:start="2613:72" pos:end="2613:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2615:37" pos:end="2617:78"><expr pos:start="2615:37" pos:end="2617:77"><call pos:start="2615:37" pos:end="2617:77"><name pos:start="2615:37" pos:end="2615:49">tcg_gen_st_tl</name><argument_list pos:start="2615:50" pos:end="2617:77">(<argument pos:start="2615:51" pos:end="2615:58"><expr pos:start="2615:51" pos:end="2615:58"><name pos:start="2615:51" pos:end="2615:58">cpu_tmp0</name></expr></argument>, <argument pos:start="2615:61" pos:end="2615:67"><expr pos:start="2615:61" pos:end="2615:67"><name pos:start="2615:61" pos:end="2615:67">r_tsptr</name></expr></argument>,

                                                  <argument pos:start="2617:51" pos:end="2617:76"><expr pos:start="2617:51" pos:end="2617:76"><call pos:start="2617:51" pos:end="2617:76"><name pos:start="2617:51" pos:end="2617:58">offsetof</name><argument_list pos:start="2617:59" pos:end="2617:76">(<argument pos:start="2617:60" pos:end="2617:69"><expr pos:start="2617:60" pos:end="2617:69"><name pos:start="2617:60" pos:end="2617:69">trap_state</name></expr></argument>, <argument pos:start="2617:72" pos:end="2617:75"><expr pos:start="2617:72" pos:end="2617:75"><name pos:start="2617:72" pos:end="2617:75">tnpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2619:37" pos:end="2619:63"><expr pos:start="2619:37" pos:end="2619:62"><call pos:start="2619:37" pos:end="2619:62"><name pos:start="2619:37" pos:end="2619:53">tcg_temp_free_ptr</name><argument_list pos:start="2619:54" pos:end="2619:62">(<argument pos:start="2619:55" pos:end="2619:61"><expr pos:start="2619:55" pos:end="2619:61"><name pos:start="2619:55" pos:end="2619:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2623:33" pos:end="2623:38">break;</break>

                            <case pos:start="2625:29" pos:end="2625:35">case <expr pos:start="2625:34" pos:end="2625:34"><literal type="number" pos:start="2625:34" pos:end="2625:34">2</literal></expr>:</case> <comment type="line" pos:start="2625:37" pos:end="2625:45">// tstate</comment>

                                <block pos:start="2627:33" pos:end="2645:33">{<block_content pos:start="2629:37" pos:end="2643:63">

                                    <decl_stmt pos:start="2629:37" pos:end="2629:53"><decl pos:start="2629:37" pos:end="2629:52"><type pos:start="2629:37" pos:end="2629:44"><name pos:start="2629:37" pos:end="2629:44">TCGv_ptr</name></type> <name pos:start="2629:46" pos:end="2629:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2633:37" pos:end="2633:65"><expr pos:start="2633:37" pos:end="2633:64"><name pos:start="2633:37" pos:end="2633:43">r_tsptr</name> <operator pos:start="2633:45" pos:end="2633:45">=</operator> <call pos:start="2633:47" pos:end="2633:64"><name pos:start="2633:47" pos:end="2633:62">tcg_temp_new_ptr</name><argument_list pos:start="2633:63" pos:end="2633:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2635:37" pos:end="2635:80"><expr pos:start="2635:37" pos:end="2635:79"><call pos:start="2635:37" pos:end="2635:79"><name pos:start="2635:37" pos:end="2635:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2635:62" pos:end="2635:79">(<argument pos:start="2635:63" pos:end="2635:69"><expr pos:start="2635:63" pos:end="2635:69"><name pos:start="2635:63" pos:end="2635:69">r_tsptr</name></expr></argument>, <argument pos:start="2635:72" pos:end="2635:78"><expr pos:start="2635:72" pos:end="2635:78"><name pos:start="2635:72" pos:end="2635:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2637:37" pos:end="2641:68"><expr pos:start="2637:37" pos:end="2641:67"><call pos:start="2637:37" pos:end="2641:67"><name pos:start="2637:37" pos:end="2637:49">tcg_gen_st_tl</name><argument_list pos:start="2637:50" pos:end="2641:67">(<argument pos:start="2637:51" pos:end="2637:58"><expr pos:start="2637:51" pos:end="2637:58"><name pos:start="2637:51" pos:end="2637:58">cpu_tmp0</name></expr></argument>, <argument pos:start="2637:61" pos:end="2637:67"><expr pos:start="2637:61" pos:end="2637:67"><name pos:start="2637:61" pos:end="2637:67">r_tsptr</name></expr></argument>,

                                                  <argument pos:start="2639:51" pos:end="2641:66"><expr pos:start="2639:51" pos:end="2641:66"><call pos:start="2639:51" pos:end="2641:66"><name pos:start="2639:51" pos:end="2639:58">offsetof</name><argument_list pos:start="2639:59" pos:end="2641:66">(<argument pos:start="2639:60" pos:end="2639:69"><expr pos:start="2639:60" pos:end="2639:69"><name pos:start="2639:60" pos:end="2639:69">trap_state</name></expr></argument>,

                                                           <argument pos:start="2641:60" pos:end="2641:65"><expr pos:start="2641:60" pos:end="2641:65"><name pos:start="2641:60" pos:end="2641:65">tstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2643:37" pos:end="2643:63"><expr pos:start="2643:37" pos:end="2643:62"><call pos:start="2643:37" pos:end="2643:62"><name pos:start="2643:37" pos:end="2643:53">tcg_temp_free_ptr</name><argument_list pos:start="2643:54" pos:end="2643:62">(<argument pos:start="2643:55" pos:end="2643:61"><expr pos:start="2643:55" pos:end="2643:61"><name pos:start="2643:55" pos:end="2643:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2647:33" pos:end="2647:38">break;</break>

                            <case pos:start="2649:29" pos:end="2649:35">case <expr pos:start="2649:34" pos:end="2649:34"><literal type="number" pos:start="2649:34" pos:end="2649:34">3</literal></expr>:</case> <comment type="line" pos:start="2649:37" pos:end="2649:41">// tt</comment>

                                <block pos:start="2651:33" pos:end="2669:33">{<block_content pos:start="2653:37" pos:end="2667:63">

                                    <decl_stmt pos:start="2653:37" pos:end="2653:53"><decl pos:start="2653:37" pos:end="2653:52"><type pos:start="2653:37" pos:end="2653:44"><name pos:start="2653:37" pos:end="2653:44">TCGv_ptr</name></type> <name pos:start="2653:46" pos:end="2653:52">r_tsptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2657:37" pos:end="2657:65"><expr pos:start="2657:37" pos:end="2657:64"><name pos:start="2657:37" pos:end="2657:43">r_tsptr</name> <operator pos:start="2657:45" pos:end="2657:45">=</operator> <call pos:start="2657:47" pos:end="2657:64"><name pos:start="2657:47" pos:end="2657:62">tcg_temp_new_ptr</name><argument_list pos:start="2657:63" pos:end="2657:64">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2659:37" pos:end="2659:80"><expr pos:start="2659:37" pos:end="2659:79"><call pos:start="2659:37" pos:end="2659:79"><name pos:start="2659:37" pos:end="2659:61">gen_load_trap_state_at_tl</name><argument_list pos:start="2659:62" pos:end="2659:79">(<argument pos:start="2659:63" pos:end="2659:69"><expr pos:start="2659:63" pos:end="2659:69"><name pos:start="2659:63" pos:end="2659:69">r_tsptr</name></expr></argument>, <argument pos:start="2659:72" pos:end="2659:78"><expr pos:start="2659:72" pos:end="2659:78"><name pos:start="2659:72" pos:end="2659:78">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2661:37" pos:end="2661:78"><expr pos:start="2661:37" pos:end="2661:77"><call pos:start="2661:37" pos:end="2661:77"><name pos:start="2661:37" pos:end="2661:56">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2661:57" pos:end="2661:77">(<argument pos:start="2661:58" pos:end="2661:66"><expr pos:start="2661:58" pos:end="2661:66"><name pos:start="2661:58" pos:end="2661:66">cpu_tmp32</name></expr></argument>, <argument pos:start="2661:69" pos:end="2661:76"><expr pos:start="2661:69" pos:end="2661:76"><name pos:start="2661:69" pos:end="2661:76">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2663:37" pos:end="2665:77"><expr pos:start="2663:37" pos:end="2665:76"><call pos:start="2663:37" pos:end="2665:76"><name pos:start="2663:37" pos:end="2663:50">tcg_gen_st_i32</name><argument_list pos:start="2663:51" pos:end="2665:76">(<argument pos:start="2663:52" pos:end="2663:60"><expr pos:start="2663:52" pos:end="2663:60"><name pos:start="2663:52" pos:end="2663:60">cpu_tmp32</name></expr></argument>, <argument pos:start="2663:63" pos:end="2663:69"><expr pos:start="2663:63" pos:end="2663:69"><name pos:start="2663:63" pos:end="2663:69">r_tsptr</name></expr></argument>,

                                                   <argument pos:start="2665:52" pos:end="2665:75"><expr pos:start="2665:52" pos:end="2665:75"><call pos:start="2665:52" pos:end="2665:75"><name pos:start="2665:52" pos:end="2665:59">offsetof</name><argument_list pos:start="2665:60" pos:end="2665:75">(<argument pos:start="2665:61" pos:end="2665:70"><expr pos:start="2665:61" pos:end="2665:70"><name pos:start="2665:61" pos:end="2665:70">trap_state</name></expr></argument>, <argument pos:start="2665:73" pos:end="2665:74"><expr pos:start="2665:73" pos:end="2665:74"><name pos:start="2665:73" pos:end="2665:74">tt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2667:37" pos:end="2667:63"><expr pos:start="2667:37" pos:end="2667:62"><call pos:start="2667:37" pos:end="2667:62"><name pos:start="2667:37" pos:end="2667:53">tcg_temp_free_ptr</name><argument_list pos:start="2667:54" pos:end="2667:62">(<argument pos:start="2667:55" pos:end="2667:61"><expr pos:start="2667:55" pos:end="2667:61"><name pos:start="2667:55" pos:end="2667:61">r_tsptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2671:33" pos:end="2671:38">break;</break>

                            <case pos:start="2673:29" pos:end="2673:35">case <expr pos:start="2673:34" pos:end="2673:34"><literal type="number" pos:start="2673:34" pos:end="2673:34">4</literal></expr>:</case> <comment type="line" pos:start="2673:37" pos:end="2673:43">// tick</comment>

                                <block pos:start="2675:33" pos:end="2693:33">{<block_content pos:start="2677:37" pos:end="2691:65">

                                    <decl_stmt pos:start="2677:37" pos:end="2677:55"><decl pos:start="2677:37" pos:end="2677:54"><type pos:start="2677:37" pos:end="2677:44"><name pos:start="2677:37" pos:end="2677:44">TCGv_ptr</name></type> <name pos:start="2677:46" pos:end="2677:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2681:37" pos:end="2681:67"><expr pos:start="2681:37" pos:end="2681:66"><name pos:start="2681:37" pos:end="2681:45">r_tickptr</name> <operator pos:start="2681:47" pos:end="2681:47">=</operator> <call pos:start="2681:49" pos:end="2681:66"><name pos:start="2681:49" pos:end="2681:64">tcg_temp_new_ptr</name><argument_list pos:start="2681:65" pos:end="2681:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2683:37" pos:end="2685:82"><expr pos:start="2683:37" pos:end="2685:81"><call pos:start="2683:37" pos:end="2685:81"><name pos:start="2683:37" pos:end="2683:50">tcg_gen_ld_ptr</name><argument_list pos:start="2683:51" pos:end="2685:81">(<argument pos:start="2683:52" pos:end="2683:60"><expr pos:start="2683:52" pos:end="2683:60"><name pos:start="2683:52" pos:end="2683:60">r_tickptr</name></expr></argument>, <argument pos:start="2683:63" pos:end="2683:69"><expr pos:start="2683:63" pos:end="2683:69"><name pos:start="2683:63" pos:end="2683:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2685:52" pos:end="2685:80"><expr pos:start="2685:52" pos:end="2685:80"><call pos:start="2685:52" pos:end="2685:80"><name pos:start="2685:52" pos:end="2685:59">offsetof</name><argument_list pos:start="2685:60" pos:end="2685:80">(<argument pos:start="2685:61" pos:end="2685:73"><expr pos:start="2685:61" pos:end="2685:73"><name pos:start="2685:61" pos:end="2685:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2685:76" pos:end="2685:79"><expr pos:start="2685:76" pos:end="2685:79"><name pos:start="2685:76" pos:end="2685:79">tick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2687:37" pos:end="2689:72"><expr pos:start="2687:37" pos:end="2689:71"><call pos:start="2687:37" pos:end="2689:71"><name pos:start="2687:37" pos:end="2687:61">gen_helper_tick_set_count</name><argument_list pos:start="2687:62" pos:end="2689:71">(<argument pos:start="2687:63" pos:end="2687:71"><expr pos:start="2687:63" pos:end="2687:71"><name pos:start="2687:63" pos:end="2687:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2689:63" pos:end="2689:70"><expr pos:start="2689:63" pos:end="2689:70"><name pos:start="2689:63" pos:end="2689:70">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2691:37" pos:end="2691:65"><expr pos:start="2691:37" pos:end="2691:64"><call pos:start="2691:37" pos:end="2691:64"><name pos:start="2691:37" pos:end="2691:53">tcg_temp_free_ptr</name><argument_list pos:start="2691:54" pos:end="2691:64">(<argument pos:start="2691:55" pos:end="2691:63"><expr pos:start="2691:55" pos:end="2691:63"><name pos:start="2691:55" pos:end="2691:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2695:33" pos:end="2695:38">break;</break>

                            <case pos:start="2697:29" pos:end="2697:35">case <expr pos:start="2697:34" pos:end="2697:34"><literal type="number" pos:start="2697:34" pos:end="2697:34">5</literal></expr>:</case> <comment type="line" pos:start="2697:37" pos:end="2697:42">// tba</comment>

                                <expr_stmt pos:start="2699:33" pos:end="2699:66"><expr pos:start="2699:33" pos:end="2699:65"><call pos:start="2699:33" pos:end="2699:65"><name pos:start="2699:33" pos:end="2699:46">tcg_gen_mov_tl</name><argument_list pos:start="2699:47" pos:end="2699:65">(<argument pos:start="2699:48" pos:end="2699:54"><expr pos:start="2699:48" pos:end="2699:54"><name pos:start="2699:48" pos:end="2699:54">cpu_tbr</name></expr></argument>, <argument pos:start="2699:57" pos:end="2699:64"><expr pos:start="2699:57" pos:end="2699:64"><name pos:start="2699:57" pos:end="2699:64">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2701:33" pos:end="2701:38">break;</break>

                            <case pos:start="2703:29" pos:end="2703:35">case <expr pos:start="2703:34" pos:end="2703:34"><literal type="number" pos:start="2703:34" pos:end="2703:34">6</literal></expr>:</case> <comment type="line" pos:start="2703:37" pos:end="2703:45">// pstate</comment>

                                <expr_stmt pos:start="2705:33" pos:end="2705:47"><expr pos:start="2705:33" pos:end="2705:46"><call pos:start="2705:33" pos:end="2705:46"><name pos:start="2705:33" pos:end="2705:42">save_state</name><argument_list pos:start="2705:43" pos:end="2705:46">(<argument pos:start="2705:44" pos:end="2705:45"><expr pos:start="2705:44" pos:end="2705:45"><name pos:start="2705:44" pos:end="2705:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2707:33" pos:end="2707:71"><expr pos:start="2707:33" pos:end="2707:70"><call pos:start="2707:33" pos:end="2707:70"><name pos:start="2707:33" pos:end="2707:51">gen_helper_wrpstate</name><argument_list pos:start="2707:52" pos:end="2707:70">(<argument pos:start="2707:53" pos:end="2707:59"><expr pos:start="2707:53" pos:end="2707:59"><name pos:start="2707:53" pos:end="2707:59">cpu_env</name></expr></argument>, <argument pos:start="2707:62" pos:end="2707:69"><expr pos:start="2707:62" pos:end="2707:69"><name pos:start="2707:62" pos:end="2707:69">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2709:33" pos:end="2709:53"><expr pos:start="2709:33" pos:end="2709:52"><name pos:start="2709:33" pos:end="2709:39"><name pos:start="2709:33" pos:end="2709:34">dc</name><operator pos:start="2709:35" pos:end="2709:36">-&gt;</operator><name pos:start="2709:37" pos:end="2709:39">npc</name></name> <operator pos:start="2709:41" pos:end="2709:41">=</operator> <name pos:start="2709:43" pos:end="2709:52">DYNAMIC_PC</name></expr>;</expr_stmt>

                                <break pos:start="2711:33" pos:end="2711:38">break;</break>

                            <case pos:start="2713:29" pos:end="2713:35">case <expr pos:start="2713:34" pos:end="2713:34"><literal type="number" pos:start="2713:34" pos:end="2713:34">7</literal></expr>:</case> <comment type="line" pos:start="2713:37" pos:end="2713:41">// tl</comment>

                                <expr_stmt pos:start="2715:33" pos:end="2715:47"><expr pos:start="2715:33" pos:end="2715:46"><call pos:start="2715:33" pos:end="2715:46"><name pos:start="2715:33" pos:end="2715:42">save_state</name><argument_list pos:start="2715:43" pos:end="2715:46">(<argument pos:start="2715:44" pos:end="2715:45"><expr pos:start="2715:44" pos:end="2715:45"><name pos:start="2715:44" pos:end="2715:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2717:33" pos:end="2717:74"><expr pos:start="2717:33" pos:end="2717:73"><call pos:start="2717:33" pos:end="2717:73"><name pos:start="2717:33" pos:end="2717:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2717:53" pos:end="2717:73">(<argument pos:start="2717:54" pos:end="2717:62"><expr pos:start="2717:54" pos:end="2717:62"><name pos:start="2717:54" pos:end="2717:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2717:65" pos:end="2717:72"><expr pos:start="2717:65" pos:end="2717:72"><name pos:start="2717:65" pos:end="2717:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2719:33" pos:end="2721:76"><expr pos:start="2719:33" pos:end="2721:75"><call pos:start="2719:33" pos:end="2721:75"><name pos:start="2719:33" pos:end="2719:46">tcg_gen_st_i32</name><argument_list pos:start="2719:47" pos:end="2721:75">(<argument pos:start="2719:48" pos:end="2719:56"><expr pos:start="2719:48" pos:end="2719:56"><name pos:start="2719:48" pos:end="2719:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2719:59" pos:end="2719:65"><expr pos:start="2719:59" pos:end="2719:65"><name pos:start="2719:59" pos:end="2719:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2721:48" pos:end="2721:74"><expr pos:start="2721:48" pos:end="2721:74"><call pos:start="2721:48" pos:end="2721:74"><name pos:start="2721:48" pos:end="2721:55">offsetof</name><argument_list pos:start="2721:56" pos:end="2721:74">(<argument pos:start="2721:57" pos:end="2721:69"><expr pos:start="2721:57" pos:end="2721:69"><name pos:start="2721:57" pos:end="2721:69">CPUSPARCState</name></expr></argument>, <argument pos:start="2721:72" pos:end="2721:73"><expr pos:start="2721:72" pos:end="2721:73"><name pos:start="2721:72" pos:end="2721:73">tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2723:33" pos:end="2723:53"><expr pos:start="2723:33" pos:end="2723:52"><name pos:start="2723:33" pos:end="2723:39"><name pos:start="2723:33" pos:end="2723:34">dc</name><operator pos:start="2723:35" pos:end="2723:36">-&gt;</operator><name pos:start="2723:37" pos:end="2723:39">npc</name></name> <operator pos:start="2723:41" pos:end="2723:41">=</operator> <name pos:start="2723:43" pos:end="2723:52">DYNAMIC_PC</name></expr>;</expr_stmt>

                                <break pos:start="2725:33" pos:end="2725:38">break;</break>

                            <case pos:start="2727:29" pos:end="2727:35">case <expr pos:start="2727:34" pos:end="2727:34"><literal type="number" pos:start="2727:34" pos:end="2727:34">8</literal></expr>:</case> <comment type="line" pos:start="2727:37" pos:end="2727:42">// pil</comment>

                                <expr_stmt pos:start="2729:33" pos:end="2729:68"><expr pos:start="2729:33" pos:end="2729:67"><call pos:start="2729:33" pos:end="2729:67"><name pos:start="2729:33" pos:end="2729:48">gen_helper_wrpil</name><argument_list pos:start="2729:49" pos:end="2729:67">(<argument pos:start="2729:50" pos:end="2729:56"><expr pos:start="2729:50" pos:end="2729:56"><name pos:start="2729:50" pos:end="2729:56">cpu_env</name></expr></argument>, <argument pos:start="2729:59" pos:end="2729:66"><expr pos:start="2729:59" pos:end="2729:66"><name pos:start="2729:59" pos:end="2729:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2731:33" pos:end="2731:38">break;</break>

                            <case pos:start="2733:29" pos:end="2733:35">case <expr pos:start="2733:34" pos:end="2733:34"><literal type="number" pos:start="2733:34" pos:end="2733:34">9</literal></expr>:</case> <comment type="line" pos:start="2733:37" pos:end="2733:42">// cwp</comment>

                                <expr_stmt pos:start="2735:33" pos:end="2735:68"><expr pos:start="2735:33" pos:end="2735:67"><call pos:start="2735:33" pos:end="2735:67"><name pos:start="2735:33" pos:end="2735:48">gen_helper_wrcwp</name><argument_list pos:start="2735:49" pos:end="2735:67">(<argument pos:start="2735:50" pos:end="2735:56"><expr pos:start="2735:50" pos:end="2735:56"><name pos:start="2735:50" pos:end="2735:56">cpu_env</name></expr></argument>, <argument pos:start="2735:59" pos:end="2735:66"><expr pos:start="2735:59" pos:end="2735:66"><name pos:start="2735:59" pos:end="2735:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2737:33" pos:end="2737:38">break;</break>

                            <case pos:start="2739:29" pos:end="2739:36">case <expr pos:start="2739:34" pos:end="2739:35"><literal type="number" pos:start="2739:34" pos:end="2739:35">10</literal></expr>:</case> <comment type="line" pos:start="2739:38" pos:end="2739:47">// cansave</comment>

                                <expr_stmt pos:start="2741:33" pos:end="2741:74"><expr pos:start="2741:33" pos:end="2741:73"><call pos:start="2741:33" pos:end="2741:73"><name pos:start="2741:33" pos:end="2741:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2741:53" pos:end="2741:73">(<argument pos:start="2741:54" pos:end="2741:62"><expr pos:start="2741:54" pos:end="2741:62"><name pos:start="2741:54" pos:end="2741:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2741:65" pos:end="2741:72"><expr pos:start="2741:65" pos:end="2741:72"><name pos:start="2741:65" pos:end="2741:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2743:33" pos:end="2747:66"><expr pos:start="2743:33" pos:end="2747:65"><call pos:start="2743:33" pos:end="2747:65"><name pos:start="2743:33" pos:end="2743:46">tcg_gen_st_i32</name><argument_list pos:start="2743:47" pos:end="2747:65">(<argument pos:start="2743:48" pos:end="2743:56"><expr pos:start="2743:48" pos:end="2743:56"><name pos:start="2743:48" pos:end="2743:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2743:59" pos:end="2743:65"><expr pos:start="2743:59" pos:end="2743:65"><name pos:start="2743:59" pos:end="2743:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2745:48" pos:end="2747:64"><expr pos:start="2745:48" pos:end="2747:64"><call pos:start="2745:48" pos:end="2747:64"><name pos:start="2745:48" pos:end="2745:55">offsetof</name><argument_list pos:start="2745:56" pos:end="2747:64">(<argument pos:start="2745:57" pos:end="2745:69"><expr pos:start="2745:57" pos:end="2745:69"><name pos:start="2745:57" pos:end="2745:69">CPUSPARCState</name></expr></argument>,

                                                        <argument pos:start="2747:57" pos:end="2747:63"><expr pos:start="2747:57" pos:end="2747:63"><name pos:start="2747:57" pos:end="2747:63">cansave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2749:33" pos:end="2749:38">break;</break>

                            <case pos:start="2751:29" pos:end="2751:36">case <expr pos:start="2751:34" pos:end="2751:35"><literal type="number" pos:start="2751:34" pos:end="2751:35">11</literal></expr>:</case> <comment type="line" pos:start="2751:38" pos:end="2751:50">// canrestore</comment>

                                <expr_stmt pos:start="2753:33" pos:end="2753:74"><expr pos:start="2753:33" pos:end="2753:73"><call pos:start="2753:33" pos:end="2753:73"><name pos:start="2753:33" pos:end="2753:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2753:53" pos:end="2753:73">(<argument pos:start="2753:54" pos:end="2753:62"><expr pos:start="2753:54" pos:end="2753:62"><name pos:start="2753:54" pos:end="2753:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2753:65" pos:end="2753:72"><expr pos:start="2753:65" pos:end="2753:72"><name pos:start="2753:65" pos:end="2753:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2755:33" pos:end="2759:69"><expr pos:start="2755:33" pos:end="2759:68"><call pos:start="2755:33" pos:end="2759:68"><name pos:start="2755:33" pos:end="2755:46">tcg_gen_st_i32</name><argument_list pos:start="2755:47" pos:end="2759:68">(<argument pos:start="2755:48" pos:end="2755:56"><expr pos:start="2755:48" pos:end="2755:56"><name pos:start="2755:48" pos:end="2755:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2755:59" pos:end="2755:65"><expr pos:start="2755:59" pos:end="2755:65"><name pos:start="2755:59" pos:end="2755:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2757:48" pos:end="2759:67"><expr pos:start="2757:48" pos:end="2759:67"><call pos:start="2757:48" pos:end="2759:67"><name pos:start="2757:48" pos:end="2757:55">offsetof</name><argument_list pos:start="2757:56" pos:end="2759:67">(<argument pos:start="2757:57" pos:end="2757:69"><expr pos:start="2757:57" pos:end="2757:69"><name pos:start="2757:57" pos:end="2757:69">CPUSPARCState</name></expr></argument>,

                                                        <argument pos:start="2759:57" pos:end="2759:66"><expr pos:start="2759:57" pos:end="2759:66"><name pos:start="2759:57" pos:end="2759:66">canrestore</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2761:33" pos:end="2761:38">break;</break>

                            <case pos:start="2763:29" pos:end="2763:36">case <expr pos:start="2763:34" pos:end="2763:35"><literal type="number" pos:start="2763:34" pos:end="2763:35">12</literal></expr>:</case> <comment type="line" pos:start="2763:38" pos:end="2763:48">// cleanwin</comment>

                                <expr_stmt pos:start="2765:33" pos:end="2765:74"><expr pos:start="2765:33" pos:end="2765:73"><call pos:start="2765:33" pos:end="2765:73"><name pos:start="2765:33" pos:end="2765:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2765:53" pos:end="2765:73">(<argument pos:start="2765:54" pos:end="2765:62"><expr pos:start="2765:54" pos:end="2765:62"><name pos:start="2765:54" pos:end="2765:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2765:65" pos:end="2765:72"><expr pos:start="2765:65" pos:end="2765:72"><name pos:start="2765:65" pos:end="2765:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2767:33" pos:end="2771:67"><expr pos:start="2767:33" pos:end="2771:66"><call pos:start="2767:33" pos:end="2771:66"><name pos:start="2767:33" pos:end="2767:46">tcg_gen_st_i32</name><argument_list pos:start="2767:47" pos:end="2771:66">(<argument pos:start="2767:48" pos:end="2767:56"><expr pos:start="2767:48" pos:end="2767:56"><name pos:start="2767:48" pos:end="2767:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2767:59" pos:end="2767:65"><expr pos:start="2767:59" pos:end="2767:65"><name pos:start="2767:59" pos:end="2767:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2769:48" pos:end="2771:65"><expr pos:start="2769:48" pos:end="2771:65"><call pos:start="2769:48" pos:end="2771:65"><name pos:start="2769:48" pos:end="2769:55">offsetof</name><argument_list pos:start="2769:56" pos:end="2771:65">(<argument pos:start="2769:57" pos:end="2769:69"><expr pos:start="2769:57" pos:end="2769:69"><name pos:start="2769:57" pos:end="2769:69">CPUSPARCState</name></expr></argument>,

                                                        <argument pos:start="2771:57" pos:end="2771:64"><expr pos:start="2771:57" pos:end="2771:64"><name pos:start="2771:57" pos:end="2771:64">cleanwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2773:33" pos:end="2773:38">break;</break>

                            <case pos:start="2775:29" pos:end="2775:36">case <expr pos:start="2775:34" pos:end="2775:35"><literal type="number" pos:start="2775:34" pos:end="2775:35">13</literal></expr>:</case> <comment type="line" pos:start="2775:38" pos:end="2775:48">// otherwin</comment>

                                <expr_stmt pos:start="2777:33" pos:end="2777:74"><expr pos:start="2777:33" pos:end="2777:73"><call pos:start="2777:33" pos:end="2777:73"><name pos:start="2777:33" pos:end="2777:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2777:53" pos:end="2777:73">(<argument pos:start="2777:54" pos:end="2777:62"><expr pos:start="2777:54" pos:end="2777:62"><name pos:start="2777:54" pos:end="2777:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2777:65" pos:end="2777:72"><expr pos:start="2777:65" pos:end="2777:72"><name pos:start="2777:65" pos:end="2777:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2779:33" pos:end="2783:67"><expr pos:start="2779:33" pos:end="2783:66"><call pos:start="2779:33" pos:end="2783:66"><name pos:start="2779:33" pos:end="2779:46">tcg_gen_st_i32</name><argument_list pos:start="2779:47" pos:end="2783:66">(<argument pos:start="2779:48" pos:end="2779:56"><expr pos:start="2779:48" pos:end="2779:56"><name pos:start="2779:48" pos:end="2779:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2779:59" pos:end="2779:65"><expr pos:start="2779:59" pos:end="2779:65"><name pos:start="2779:59" pos:end="2779:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2781:48" pos:end="2783:65"><expr pos:start="2781:48" pos:end="2783:65"><call pos:start="2781:48" pos:end="2783:65"><name pos:start="2781:48" pos:end="2781:55">offsetof</name><argument_list pos:start="2781:56" pos:end="2783:65">(<argument pos:start="2781:57" pos:end="2781:69"><expr pos:start="2781:57" pos:end="2781:69"><name pos:start="2781:57" pos:end="2781:69">CPUSPARCState</name></expr></argument>,

                                                        <argument pos:start="2783:57" pos:end="2783:64"><expr pos:start="2783:57" pos:end="2783:64"><name pos:start="2783:57" pos:end="2783:64">otherwin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2785:33" pos:end="2785:38">break;</break>

                            <case pos:start="2787:29" pos:end="2787:36">case <expr pos:start="2787:34" pos:end="2787:35"><literal type="number" pos:start="2787:34" pos:end="2787:35">14</literal></expr>:</case> <comment type="line" pos:start="2787:38" pos:end="2787:46">// wstate</comment>

                                <expr_stmt pos:start="2789:33" pos:end="2789:74"><expr pos:start="2789:33" pos:end="2789:73"><call pos:start="2789:33" pos:end="2789:73"><name pos:start="2789:33" pos:end="2789:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2789:53" pos:end="2789:73">(<argument pos:start="2789:54" pos:end="2789:62"><expr pos:start="2789:54" pos:end="2789:62"><name pos:start="2789:54" pos:end="2789:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2789:65" pos:end="2789:72"><expr pos:start="2789:65" pos:end="2789:72"><name pos:start="2789:65" pos:end="2789:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2791:33" pos:end="2795:65"><expr pos:start="2791:33" pos:end="2795:64"><call pos:start="2791:33" pos:end="2795:64"><name pos:start="2791:33" pos:end="2791:46">tcg_gen_st_i32</name><argument_list pos:start="2791:47" pos:end="2795:64">(<argument pos:start="2791:48" pos:end="2791:56"><expr pos:start="2791:48" pos:end="2791:56"><name pos:start="2791:48" pos:end="2791:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2791:59" pos:end="2791:65"><expr pos:start="2791:59" pos:end="2791:65"><name pos:start="2791:59" pos:end="2791:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2793:48" pos:end="2795:63"><expr pos:start="2793:48" pos:end="2795:63"><call pos:start="2793:48" pos:end="2795:63"><name pos:start="2793:48" pos:end="2793:55">offsetof</name><argument_list pos:start="2793:56" pos:end="2795:63">(<argument pos:start="2793:57" pos:end="2793:69"><expr pos:start="2793:57" pos:end="2793:69"><name pos:start="2793:57" pos:end="2793:69">CPUSPARCState</name></expr></argument>,

                                                        <argument pos:start="2795:57" pos:end="2795:62"><expr pos:start="2795:57" pos:end="2795:62"><name pos:start="2795:57" pos:end="2795:62">wstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2797:33" pos:end="2797:38">break;</break>

                            <case pos:start="2799:29" pos:end="2799:36">case <expr pos:start="2799:34" pos:end="2799:35"><literal type="number" pos:start="2799:34" pos:end="2799:35">16</literal></expr>:</case> <comment type="line" pos:start="2799:38" pos:end="2799:49">// UA2005 gl</comment>

                                <expr_stmt pos:start="2801:33" pos:end="2801:57"><expr pos:start="2801:33" pos:end="2801:56"><call pos:start="2801:33" pos:end="2801:56"><name pos:start="2801:33" pos:end="2801:48">CHECK_IU_FEATURE</name><argument_list pos:start="2801:49" pos:end="2801:56">(<argument pos:start="2801:50" pos:end="2801:51"><expr pos:start="2801:50" pos:end="2801:51"><name pos:start="2801:50" pos:end="2801:51">dc</name></expr></argument>, <argument pos:start="2801:54" pos:end="2801:55"><expr pos:start="2801:54" pos:end="2801:55"><name pos:start="2801:54" pos:end="2801:55">GL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2803:33" pos:end="2803:74"><expr pos:start="2803:33" pos:end="2803:73"><call pos:start="2803:33" pos:end="2803:73"><name pos:start="2803:33" pos:end="2803:52">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2803:53" pos:end="2803:73">(<argument pos:start="2803:54" pos:end="2803:62"><expr pos:start="2803:54" pos:end="2803:62"><name pos:start="2803:54" pos:end="2803:62">cpu_tmp32</name></expr></argument>, <argument pos:start="2803:65" pos:end="2803:72"><expr pos:start="2803:65" pos:end="2803:72"><name pos:start="2803:65" pos:end="2803:72">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2805:33" pos:end="2807:76"><expr pos:start="2805:33" pos:end="2807:75"><call pos:start="2805:33" pos:end="2807:75"><name pos:start="2805:33" pos:end="2805:46">tcg_gen_st_i32</name><argument_list pos:start="2805:47" pos:end="2807:75">(<argument pos:start="2805:48" pos:end="2805:56"><expr pos:start="2805:48" pos:end="2805:56"><name pos:start="2805:48" pos:end="2805:56">cpu_tmp32</name></expr></argument>, <argument pos:start="2805:59" pos:end="2805:65"><expr pos:start="2805:59" pos:end="2805:65"><name pos:start="2805:59" pos:end="2805:65">cpu_env</name></expr></argument>,

                                               <argument pos:start="2807:48" pos:end="2807:74"><expr pos:start="2807:48" pos:end="2807:74"><call pos:start="2807:48" pos:end="2807:74"><name pos:start="2807:48" pos:end="2807:55">offsetof</name><argument_list pos:start="2807:56" pos:end="2807:74">(<argument pos:start="2807:57" pos:end="2807:69"><expr pos:start="2807:57" pos:end="2807:69"><name pos:start="2807:57" pos:end="2807:69">CPUSPARCState</name></expr></argument>, <argument pos:start="2807:72" pos:end="2807:73"><expr pos:start="2807:72" pos:end="2807:73"><name pos:start="2807:72" pos:end="2807:73">gl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2809:33" pos:end="2809:38">break;</break>

                            <case pos:start="2811:29" pos:end="2811:36">case <expr pos:start="2811:34" pos:end="2811:35"><literal type="number" pos:start="2811:34" pos:end="2811:35">26</literal></expr>:</case> <comment type="line" pos:start="2811:38" pos:end="2811:60">// UA2005 strand status</comment>

                                <expr_stmt pos:start="2813:33" pos:end="2813:59"><expr pos:start="2813:33" pos:end="2813:58"><call pos:start="2813:33" pos:end="2813:58"><name pos:start="2813:33" pos:end="2813:48">CHECK_IU_FEATURE</name><argument_list pos:start="2813:49" pos:end="2813:58">(<argument pos:start="2813:50" pos:end="2813:51"><expr pos:start="2813:50" pos:end="2813:51"><name pos:start="2813:50" pos:end="2813:51">dc</name></expr></argument>, <argument pos:start="2813:54" pos:end="2813:57"><expr pos:start="2813:54" pos:end="2813:57"><name pos:start="2813:54" pos:end="2813:57">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="2815:33" pos:end="2817:51"><if pos:start="2815:33" pos:end="2817:51">if <condition pos:start="2815:36" pos:end="2815:52">(<expr pos:start="2815:37" pos:end="2815:51"><operator pos:start="2815:37" pos:end="2815:37">!</operator><call pos:start="2815:38" pos:end="2815:51"><name pos:start="2815:38" pos:end="2815:47">hypervisor</name><argument_list pos:start="2815:48" pos:end="2815:51">(<argument pos:start="2815:49" pos:end="2815:50"><expr pos:start="2815:49" pos:end="2815:50"><name pos:start="2815:49" pos:end="2815:50">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2817:37" pos:end="2817:51"><block_content pos:start="2817:37" pos:end="2817:51">

                                    <goto pos:start="2817:37" pos:end="2817:51">goto <name pos:start="2817:42" pos:end="2817:50">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="2819:33" pos:end="2819:66"><expr pos:start="2819:33" pos:end="2819:65"><call pos:start="2819:33" pos:end="2819:65"><name pos:start="2819:33" pos:end="2819:46">tcg_gen_mov_tl</name><argument_list pos:start="2819:47" pos:end="2819:65">(<argument pos:start="2819:48" pos:end="2819:54"><expr pos:start="2819:48" pos:end="2819:54"><name pos:start="2819:48" pos:end="2819:54">cpu_ssr</name></expr></argument>, <argument pos:start="2819:57" pos:end="2819:64"><expr pos:start="2819:57" pos:end="2819:64"><name pos:start="2819:57" pos:end="2819:64">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2821:33" pos:end="2821:38">break;</break>

                            <default pos:start="2823:29" pos:end="2823:36">default:</default>

                                <goto pos:start="2825:33" pos:end="2825:50">goto <name pos:start="2825:38" pos:end="2825:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

<cpp:else pos:start="2829:1" pos:end="2829:5">#<cpp:directive pos:start="2829:2" pos:end="2829:5">else</cpp:directive></cpp:else>

                            <expr_stmt pos:start="2831:29" pos:end="2831:70"><expr pos:start="2831:29" pos:end="2831:69"><call pos:start="2831:29" pos:end="2831:69"><name pos:start="2831:29" pos:end="2831:48">tcg_gen_trunc_tl_i32</name><argument_list pos:start="2831:49" pos:end="2831:69">(<argument pos:start="2831:50" pos:end="2831:58"><expr pos:start="2831:50" pos:end="2831:58"><name pos:start="2831:50" pos:end="2831:58">cpu_tmp32</name></expr></argument>, <argument pos:start="2831:61" pos:end="2831:68"><expr pos:start="2831:61" pos:end="2831:68"><name pos:start="2831:61" pos:end="2831:68">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2833:29" pos:end="2837:78"><if pos:start="2833:29" pos:end="2837:78">if <condition pos:start="2833:32" pos:end="2833:56">(<expr pos:start="2833:33" pos:end="2833:55"><name pos:start="2833:33" pos:end="2833:49"><name pos:start="2833:33" pos:end="2833:34">dc</name><operator pos:start="2833:35" pos:end="2833:36">-&gt;</operator><name pos:start="2833:37" pos:end="2833:39">def</name><operator pos:start="2833:40" pos:end="2833:41">-&gt;</operator><name pos:start="2833:42" pos:end="2833:49">nwindows</name></name> <operator pos:start="2833:51" pos:end="2833:52">!=</operator> <literal type="number" pos:start="2833:54" pos:end="2833:55">32</literal></expr>)</condition><block type="pseudo" pos:start="2835:33" pos:end="2837:78"><block_content pos:start="2835:33" pos:end="2837:78">

                                <expr_stmt pos:start="2835:33" pos:end="2837:78"><expr pos:start="2835:33" pos:end="2837:77"><call pos:start="2835:33" pos:end="2837:77"><name pos:start="2835:33" pos:end="2835:47">tcg_gen_andi_tl</name><argument_list pos:start="2835:48" pos:end="2837:77">(<argument pos:start="2835:49" pos:end="2835:57"><expr pos:start="2835:49" pos:end="2835:57"><name pos:start="2835:49" pos:end="2835:57">cpu_tmp32</name></expr></argument>, <argument pos:start="2835:60" pos:end="2835:68"><expr pos:start="2835:60" pos:end="2835:68"><name pos:start="2835:60" pos:end="2835:68">cpu_tmp32</name></expr></argument>,

                                                <argument pos:start="2837:49" pos:end="2837:76"><expr pos:start="2837:49" pos:end="2837:76"><operator pos:start="2837:49" pos:end="2837:49">(</operator><literal type="number" pos:start="2837:50" pos:end="2837:50">1</literal> <operator pos:start="2837:52" pos:end="2837:53">&lt;&lt;</operator> <name pos:start="2837:55" pos:end="2837:71"><name pos:start="2837:55" pos:end="2837:56">dc</name><operator pos:start="2837:57" pos:end="2837:58">-&gt;</operator><name pos:start="2837:59" pos:end="2837:61">def</name><operator pos:start="2837:62" pos:end="2837:63">-&gt;</operator><name pos:start="2837:64" pos:end="2837:71">nwindows</name></name><operator pos:start="2837:72" pos:end="2837:72">)</operator> <operator pos:start="2837:74" pos:end="2837:74">-</operator> <literal type="number" pos:start="2837:76" pos:end="2837:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2839:29" pos:end="2842:0"><expr pos:start="2839:29" pos:end="2839:63"><call pos:start="2839:29" pos:end="2839:63"><name pos:start="2839:29" pos:end="2839:43">tcg_gen_mov_i32</name><argument_list pos:start="2839:44" pos:end="2839:63">(<argument pos:start="2839:45" pos:end="2839:51"><expr pos:start="2839:45" pos:end="2839:51"><name pos:start="2839:45" pos:end="2839:51">cpu_wim</name></expr></argument>, <argument pos:start="2839:54" pos:end="2839:62"><expr pos:start="2839:54" pos:end="2839:62"><name pos:start="2839:54" pos:end="2839:62">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="2841:1" pos:end="2841:6">#<cpp:directive pos:start="2841:2" pos:end="2841:6">endif</cpp:directive></cpp:endif>

                        </block_content>}</block>

                        <break pos:start="2845:25" pos:end="2845:30">break;</break>

                    <case pos:start="2847:21" pos:end="2847:30">case <expr pos:start="2847:26" pos:end="2847:29"><literal type="number" pos:start="2847:26" pos:end="2847:29">0x33</literal></expr>:</case> <comment type="block" pos:start="2847:32" pos:end="2847:56">/* wrtbr, UA2005 wrhpr */</comment>

                        <block pos:start="2849:25" pos:end="2939:25">{<block_content pos:start="2853:29" pos:end="2938:0">

<cpp:ifndef pos:start="2851:1" pos:end="2851:22">#<cpp:directive pos:start="2851:2" pos:end="2851:7">ifndef</cpp:directive> <name pos:start="2851:9" pos:end="2851:22">TARGET_SPARC64</name></cpp:ifndef>

                            <if_stmt pos:start="2853:29" pos:end="2855:47"><if pos:start="2853:29" pos:end="2855:47">if <condition pos:start="2853:32" pos:end="2853:48">(<expr pos:start="2853:33" pos:end="2853:47"><operator pos:start="2853:33" pos:end="2853:33">!</operator><call pos:start="2853:34" pos:end="2853:47"><name pos:start="2853:34" pos:end="2853:43">supervisor</name><argument_list pos:start="2853:44" pos:end="2853:47">(<argument pos:start="2853:45" pos:end="2853:46"><expr pos:start="2853:45" pos:end="2853:46"><name pos:start="2853:45" pos:end="2853:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2855:33" pos:end="2855:47"><block_content pos:start="2855:33" pos:end="2855:47">

                                <goto pos:start="2855:33" pos:end="2855:47">goto <name pos:start="2855:38" pos:end="2855:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2857:29" pos:end="2860:0"><expr pos:start="2857:29" pos:end="2857:71"><call pos:start="2857:29" pos:end="2857:71"><name pos:start="2857:29" pos:end="2857:42">tcg_gen_xor_tl</name><argument_list pos:start="2857:43" pos:end="2857:71">(<argument pos:start="2857:44" pos:end="2857:50"><expr pos:start="2857:44" pos:end="2857:50"><name pos:start="2857:44" pos:end="2857:50">cpu_tbr</name></expr></argument>, <argument pos:start="2857:53" pos:end="2857:60"><expr pos:start="2857:53" pos:end="2857:60"><name pos:start="2857:53" pos:end="2857:60">cpu_src1</name></expr></argument>, <argument pos:start="2857:63" pos:end="2857:70"><expr pos:start="2857:63" pos:end="2857:70"><name pos:start="2857:63" pos:end="2857:70">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="2859:1" pos:end="2859:5">#<cpp:directive pos:start="2859:2" pos:end="2859:5">else</cpp:directive></cpp:else>

                            <expr_stmt pos:start="2861:29" pos:end="2861:55"><expr pos:start="2861:29" pos:end="2861:54"><call pos:start="2861:29" pos:end="2861:54"><name pos:start="2861:29" pos:end="2861:44">CHECK_IU_FEATURE</name><argument_list pos:start="2861:45" pos:end="2861:54">(<argument pos:start="2861:46" pos:end="2861:47"><expr pos:start="2861:46" pos:end="2861:47"><name pos:start="2861:46" pos:end="2861:47">dc</name></expr></argument>, <argument pos:start="2861:50" pos:end="2861:53"><expr pos:start="2861:50" pos:end="2861:53"><name pos:start="2861:50" pos:end="2861:53">HYPV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2863:29" pos:end="2865:47"><if pos:start="2863:29" pos:end="2865:47">if <condition pos:start="2863:32" pos:end="2863:48">(<expr pos:start="2863:33" pos:end="2863:47"><operator pos:start="2863:33" pos:end="2863:33">!</operator><call pos:start="2863:34" pos:end="2863:47"><name pos:start="2863:34" pos:end="2863:43">hypervisor</name><argument_list pos:start="2863:44" pos:end="2863:47">(<argument pos:start="2863:45" pos:end="2863:46"><expr pos:start="2863:45" pos:end="2863:46"><name pos:start="2863:45" pos:end="2863:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2865:33" pos:end="2865:47"><block_content pos:start="2865:33" pos:end="2865:47">

                                <goto pos:start="2865:33" pos:end="2865:47">goto <name pos:start="2865:38" pos:end="2865:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2867:29" pos:end="2867:73"><expr pos:start="2867:29" pos:end="2867:72"><call pos:start="2867:29" pos:end="2867:72"><name pos:start="2867:29" pos:end="2867:42">tcg_gen_xor_tl</name><argument_list pos:start="2867:43" pos:end="2867:72">(<argument pos:start="2867:44" pos:end="2867:51"><expr pos:start="2867:44" pos:end="2867:51"><name pos:start="2867:44" pos:end="2867:51">cpu_tmp0</name></expr></argument>, <argument pos:start="2867:54" pos:end="2867:61"><expr pos:start="2867:54" pos:end="2867:61"><name pos:start="2867:54" pos:end="2867:61">cpu_src1</name></expr></argument>, <argument pos:start="2867:64" pos:end="2867:71"><expr pos:start="2867:64" pos:end="2867:71"><name pos:start="2867:64" pos:end="2867:71">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2869:29" pos:end="2938:0">switch <condition pos:start="2869:36" pos:end="2869:39">(<expr pos:start="2869:37" pos:end="2869:38"><name pos:start="2869:37" pos:end="2869:38">rd</name></expr>)</condition> <block pos:start="2869:41" pos:end="2938:0">{<block_content pos:start="2871:29" pos:end="2933:50">

                            <case pos:start="2871:29" pos:end="2871:35">case <expr pos:start="2871:34" pos:end="2871:34"><literal type="number" pos:start="2871:34" pos:end="2871:34">0</literal></expr>:</case> <comment type="line" pos:start="2871:37" pos:end="2871:46">// hpstate</comment>

                                <comment type="line" pos:start="2873:33" pos:end="2873:58">// XXX gen_op_wrhpstate();</comment>

                                <expr_stmt pos:start="2875:33" pos:end="2875:47"><expr pos:start="2875:33" pos:end="2875:46"><call pos:start="2875:33" pos:end="2875:46"><name pos:start="2875:33" pos:end="2875:42">save_state</name><argument_list pos:start="2875:43" pos:end="2875:46">(<argument pos:start="2875:44" pos:end="2875:45"><expr pos:start="2875:44" pos:end="2875:45"><name pos:start="2875:44" pos:end="2875:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2877:33" pos:end="2877:51"><expr pos:start="2877:33" pos:end="2877:50"><call pos:start="2877:33" pos:end="2877:50"><name pos:start="2877:33" pos:end="2877:48">gen_op_next_insn</name><argument_list pos:start="2877:49" pos:end="2877:50">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2879:33" pos:end="2879:51"><expr pos:start="2879:33" pos:end="2879:50"><call pos:start="2879:33" pos:end="2879:50"><name pos:start="2879:33" pos:end="2879:47">tcg_gen_exit_tb</name><argument_list pos:start="2879:48" pos:end="2879:50">(<argument pos:start="2879:49" pos:end="2879:49"><expr pos:start="2879:49" pos:end="2879:49"><literal type="number" pos:start="2879:49" pos:end="2879:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2881:33" pos:end="2881:46"><expr pos:start="2881:33" pos:end="2881:45"><name pos:start="2881:33" pos:end="2881:41"><name pos:start="2881:33" pos:end="2881:34">dc</name><operator pos:start="2881:35" pos:end="2881:36">-&gt;</operator><name pos:start="2881:37" pos:end="2881:41">is_br</name></name> <operator pos:start="2881:43" pos:end="2881:43">=</operator> <literal type="number" pos:start="2881:45" pos:end="2881:45">1</literal></expr>;</expr_stmt>

                                <break pos:start="2883:33" pos:end="2883:38">break;</break>

                            <case pos:start="2885:29" pos:end="2885:35">case <expr pos:start="2885:34" pos:end="2885:34"><literal type="number" pos:start="2885:34" pos:end="2885:34">1</literal></expr>:</case> <comment type="line" pos:start="2885:37" pos:end="2885:46">// htstate</comment>

                                <comment type="line" pos:start="2887:33" pos:end="2887:58">// XXX gen_op_wrhtstate();</comment>

                                <break pos:start="2889:33" pos:end="2889:38">break;</break>

                            <case pos:start="2891:29" pos:end="2891:35">case <expr pos:start="2891:34" pos:end="2891:34"><literal type="number" pos:start="2891:34" pos:end="2891:34">3</literal></expr>:</case> <comment type="line" pos:start="2891:37" pos:end="2891:44">// hintp</comment>

                                <expr_stmt pos:start="2893:33" pos:end="2893:68"><expr pos:start="2893:33" pos:end="2893:67"><call pos:start="2893:33" pos:end="2893:67"><name pos:start="2893:33" pos:end="2893:46">tcg_gen_mov_tl</name><argument_list pos:start="2893:47" pos:end="2893:67">(<argument pos:start="2893:48" pos:end="2893:56"><expr pos:start="2893:48" pos:end="2893:56"><name pos:start="2893:48" pos:end="2893:56">cpu_hintp</name></expr></argument>, <argument pos:start="2893:59" pos:end="2893:66"><expr pos:start="2893:59" pos:end="2893:66"><name pos:start="2893:59" pos:end="2893:66">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2895:33" pos:end="2895:38">break;</break>

                            <case pos:start="2897:29" pos:end="2897:35">case <expr pos:start="2897:34" pos:end="2897:34"><literal type="number" pos:start="2897:34" pos:end="2897:34">5</literal></expr>:</case> <comment type="line" pos:start="2897:37" pos:end="2897:43">// htba</comment>

                                <expr_stmt pos:start="2899:33" pos:end="2899:67"><expr pos:start="2899:33" pos:end="2899:66"><call pos:start="2899:33" pos:end="2899:66"><name pos:start="2899:33" pos:end="2899:46">tcg_gen_mov_tl</name><argument_list pos:start="2899:47" pos:end="2899:66">(<argument pos:start="2899:48" pos:end="2899:55"><expr pos:start="2899:48" pos:end="2899:55"><name pos:start="2899:48" pos:end="2899:55">cpu_htba</name></expr></argument>, <argument pos:start="2899:58" pos:end="2899:65"><expr pos:start="2899:58" pos:end="2899:65"><name pos:start="2899:58" pos:end="2899:65">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2901:33" pos:end="2901:38">break;</break>

                            <case pos:start="2903:29" pos:end="2903:36">case <expr pos:start="2903:34" pos:end="2903:35"><literal type="number" pos:start="2903:34" pos:end="2903:35">31</literal></expr>:</case> <comment type="line" pos:start="2903:38" pos:end="2903:51">// hstick_cmpr</comment>

                                <block pos:start="2905:33" pos:end="2925:33">{<block_content pos:start="2907:37" pos:end="2923:65">

                                    <decl_stmt pos:start="2907:37" pos:end="2907:55"><decl pos:start="2907:37" pos:end="2907:54"><type pos:start="2907:37" pos:end="2907:44"><name pos:start="2907:37" pos:end="2907:44">TCGv_ptr</name></type> <name pos:start="2907:46" pos:end="2907:54">r_tickptr</name></decl>;</decl_stmt>



                                    <expr_stmt pos:start="2911:37" pos:end="2911:78"><expr pos:start="2911:37" pos:end="2911:77"><call pos:start="2911:37" pos:end="2911:77"><name pos:start="2911:37" pos:end="2911:50">tcg_gen_mov_tl</name><argument_list pos:start="2911:51" pos:end="2911:77">(<argument pos:start="2911:52" pos:end="2911:66"><expr pos:start="2911:52" pos:end="2911:66"><name pos:start="2911:52" pos:end="2911:66">cpu_hstick_cmpr</name></expr></argument>, <argument pos:start="2911:69" pos:end="2911:76"><expr pos:start="2911:69" pos:end="2911:76"><name pos:start="2911:69" pos:end="2911:76">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2913:37" pos:end="2913:67"><expr pos:start="2913:37" pos:end="2913:66"><name pos:start="2913:37" pos:end="2913:45">r_tickptr</name> <operator pos:start="2913:47" pos:end="2913:47">=</operator> <call pos:start="2913:49" pos:end="2913:66"><name pos:start="2913:49" pos:end="2913:64">tcg_temp_new_ptr</name><argument_list pos:start="2913:65" pos:end="2913:66">()</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2915:37" pos:end="2917:84"><expr pos:start="2915:37" pos:end="2917:83"><call pos:start="2915:37" pos:end="2917:83"><name pos:start="2915:37" pos:end="2915:50">tcg_gen_ld_ptr</name><argument_list pos:start="2915:51" pos:end="2917:83">(<argument pos:start="2915:52" pos:end="2915:60"><expr pos:start="2915:52" pos:end="2915:60"><name pos:start="2915:52" pos:end="2915:60">r_tickptr</name></expr></argument>, <argument pos:start="2915:63" pos:end="2915:69"><expr pos:start="2915:63" pos:end="2915:69"><name pos:start="2915:63" pos:end="2915:69">cpu_env</name></expr></argument>,

                                                   <argument pos:start="2917:52" pos:end="2917:82"><expr pos:start="2917:52" pos:end="2917:82"><call pos:start="2917:52" pos:end="2917:82"><name pos:start="2917:52" pos:end="2917:59">offsetof</name><argument_list pos:start="2917:60" pos:end="2917:82">(<argument pos:start="2917:61" pos:end="2917:73"><expr pos:start="2917:61" pos:end="2917:73"><name pos:start="2917:61" pos:end="2917:73">CPUSPARCState</name></expr></argument>, <argument pos:start="2917:76" pos:end="2917:81"><expr pos:start="2917:76" pos:end="2917:81"><name pos:start="2917:76" pos:end="2917:81">hstick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2919:37" pos:end="2921:79"><expr pos:start="2919:37" pos:end="2921:78"><call pos:start="2919:37" pos:end="2921:78"><name pos:start="2919:37" pos:end="2919:61">gen_helper_tick_set_limit</name><argument_list pos:start="2919:62" pos:end="2921:78">(<argument pos:start="2919:63" pos:end="2919:71"><expr pos:start="2919:63" pos:end="2919:71"><name pos:start="2919:63" pos:end="2919:71">r_tickptr</name></expr></argument>,

                                                              <argument pos:start="2921:63" pos:end="2921:77"><expr pos:start="2921:63" pos:end="2921:77"><name pos:start="2921:63" pos:end="2921:77">cpu_hstick_cmpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2923:37" pos:end="2923:65"><expr pos:start="2923:37" pos:end="2923:64"><call pos:start="2923:37" pos:end="2923:64"><name pos:start="2923:37" pos:end="2923:53">tcg_temp_free_ptr</name><argument_list pos:start="2923:54" pos:end="2923:64">(<argument pos:start="2923:55" pos:end="2923:63"><expr pos:start="2923:55" pos:end="2923:63"><name pos:start="2923:55" pos:end="2923:63">r_tickptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block>

                                <break pos:start="2927:33" pos:end="2927:38">break;</break>

                            <case pos:start="2929:29" pos:end="2929:35">case <expr pos:start="2929:34" pos:end="2929:34"><literal type="number" pos:start="2929:34" pos:end="2929:34">6</literal></expr>:</case> <comment type="line" pos:start="2929:37" pos:end="2929:52">// hver readonly</comment>

                            <default pos:start="2931:29" pos:end="2931:36">default:</default>

                                <goto pos:start="2933:33" pos:end="2933:50">goto <name pos:start="2933:38" pos:end="2933:49">illegal_insn</name>;</goto>

                            </block_content>}</block></switch>

<cpp:endif pos:start="2937:1" pos:end="2937:6">#<cpp:directive pos:start="2937:2" pos:end="2937:6">endif</cpp:directive></cpp:endif>

                        </block_content>}</block>

                        <break pos:start="2941:25" pos:end="2946:0">break;</break>

<cpp:endif pos:start="2943:1" pos:end="2943:6">#<cpp:directive pos:start="2943:2" pos:end="2943:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2945:1" pos:end="2945:21">#<cpp:directive pos:start="2945:2" pos:end="2945:6">ifdef</cpp:directive> <name pos:start="2945:8" pos:end="2945:21">TARGET_SPARC64</name></cpp:ifdef>

                    <case pos:start="2947:21" pos:end="2947:30">case <expr pos:start="2947:26" pos:end="2947:29"><literal type="number" pos:start="2947:26" pos:end="2947:29">0x2c</literal></expr>:</case> <comment type="block" pos:start="2947:32" pos:end="2947:45">/* V9 movcc */</comment>

                        <block pos:start="2949:25" pos:end="3015:25">{<block_content pos:start="2951:29" pos:end="3013:34">

                            <decl_stmt pos:start="2951:29" pos:end="2951:64"><decl pos:start="2951:29" pos:end="2951:63"><type pos:start="2951:29" pos:end="2951:31"><name pos:start="2951:29" pos:end="2951:31">int</name></type> <name pos:start="2951:33" pos:end="2951:34">cc</name> <init pos:start="2951:36" pos:end="2951:63">= <expr pos:start="2951:38" pos:end="2951:63"><call pos:start="2951:38" pos:end="2951:63"><name pos:start="2951:38" pos:end="2951:49">GET_FIELD_SP</name><argument_list pos:start="2951:50" pos:end="2951:63">(<argument pos:start="2951:51" pos:end="2951:54"><expr pos:start="2951:51" pos:end="2951:54"><name pos:start="2951:51" pos:end="2951:54">insn</name></expr></argument>, <argument pos:start="2951:57" pos:end="2951:58"><expr pos:start="2951:57" pos:end="2951:58"><literal type="number" pos:start="2951:57" pos:end="2951:58">11</literal></expr></argument>, <argument pos:start="2951:61" pos:end="2951:62"><expr pos:start="2951:61" pos:end="2951:62"><literal type="number" pos:start="2951:61" pos:end="2951:62">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="2953:29" pos:end="2953:66"><decl pos:start="2953:29" pos:end="2953:65"><type pos:start="2953:29" pos:end="2953:31"><name pos:start="2953:29" pos:end="2953:31">int</name></type> <name pos:start="2953:33" pos:end="2953:36">cond</name> <init pos:start="2953:38" pos:end="2953:65">= <expr pos:start="2953:40" pos:end="2953:65"><call pos:start="2953:40" pos:end="2953:65"><name pos:start="2953:40" pos:end="2953:51">GET_FIELD_SP</name><argument_list pos:start="2953:52" pos:end="2953:65">(<argument pos:start="2953:53" pos:end="2953:56"><expr pos:start="2953:53" pos:end="2953:56"><name pos:start="2953:53" pos:end="2953:56">insn</name></expr></argument>, <argument pos:start="2953:59" pos:end="2953:60"><expr pos:start="2953:59" pos:end="2953:60"><literal type="number" pos:start="2953:59" pos:end="2953:60">14</literal></expr></argument>, <argument pos:start="2953:63" pos:end="2953:64"><expr pos:start="2953:63" pos:end="2953:64"><literal type="number" pos:start="2953:63" pos:end="2953:64">17</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="2955:29" pos:end="2955:45"><decl pos:start="2955:29" pos:end="2955:44"><type pos:start="2955:29" pos:end="2955:40"><name pos:start="2955:29" pos:end="2955:40">DisasCompare</name></type> <name pos:start="2955:42" pos:end="2955:44">cmp</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="2957:29" pos:end="2957:37"><decl pos:start="2957:29" pos:end="2957:36"><type pos:start="2957:29" pos:end="2957:32"><name pos:start="2957:29" pos:end="2957:32">TCGv</name></type> <name pos:start="2957:34" pos:end="2957:36">dst</name></decl>;</decl_stmt>



                            <if_stmt pos:start="2961:29" pos:end="2981:29"><if pos:start="2961:29" pos:end="2977:29">if <condition pos:start="2961:32" pos:end="2961:49">(<expr pos:start="2961:33" pos:end="2961:48"><name pos:start="2961:33" pos:end="2961:36">insn</name> <operator pos:start="2961:38" pos:end="2961:38">&amp;</operator> <operator pos:start="2961:40" pos:end="2961:40">(</operator><literal type="number" pos:start="2961:41" pos:end="2961:41">1</literal> <operator pos:start="2961:43" pos:end="2961:44">&lt;&lt;</operator> <literal type="number" pos:start="2961:46" pos:end="2961:47">18</literal><operator pos:start="2961:48" pos:end="2961:48">)</operator></expr>)</condition> <block pos:start="2961:51" pos:end="2977:29">{<block_content pos:start="2963:33" pos:end="2975:33">

                                <if_stmt pos:start="2963:33" pos:end="2975:33"><if pos:start="2963:33" pos:end="2967:33">if <condition pos:start="2963:36" pos:end="2963:44">(<expr pos:start="2963:37" pos:end="2963:43"><name pos:start="2963:37" pos:end="2963:38">cc</name> <operator pos:start="2963:40" pos:end="2963:41">==</operator> <literal type="number" pos:start="2963:43" pos:end="2963:43">0</literal></expr>)</condition> <block pos:start="2963:46" pos:end="2967:33">{<block_content pos:start="2965:37" pos:end="2965:67">

                                    <expr_stmt pos:start="2965:37" pos:end="2965:67"><expr pos:start="2965:37" pos:end="2965:66"><call pos:start="2965:37" pos:end="2965:66"><name pos:start="2965:37" pos:end="2965:47">gen_compare</name><argument_list pos:start="2965:48" pos:end="2965:66">(<argument pos:start="2965:49" pos:end="2965:52"><expr pos:start="2965:49" pos:end="2965:52"><operator pos:start="2965:49" pos:end="2965:49">&amp;</operator><name pos:start="2965:50" pos:end="2965:52">cmp</name></expr></argument>, <argument pos:start="2965:55" pos:end="2965:55"><expr pos:start="2965:55" pos:end="2965:55"><literal type="number" pos:start="2965:55" pos:end="2965:55">0</literal></expr></argument>, <argument pos:start="2965:58" pos:end="2965:61"><expr pos:start="2965:58" pos:end="2965:61"><name pos:start="2965:58" pos:end="2965:61">cond</name></expr></argument>, <argument pos:start="2965:64" pos:end="2965:65"><expr pos:start="2965:64" pos:end="2965:65"><name pos:start="2965:64" pos:end="2965:65">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if> <if type="elseif" pos:start="2967:35" pos:end="2971:33">else if <condition pos:start="2967:43" pos:end="2967:51">(<expr pos:start="2967:44" pos:end="2967:50"><name pos:start="2967:44" pos:end="2967:45">cc</name> <operator pos:start="2967:47" pos:end="2967:48">==</operator> <literal type="number" pos:start="2967:50" pos:end="2967:50">2</literal></expr>)</condition> <block pos:start="2967:53" pos:end="2971:33">{<block_content pos:start="2969:37" pos:end="2969:67">

                                    <expr_stmt pos:start="2969:37" pos:end="2969:67"><expr pos:start="2969:37" pos:end="2969:66"><call pos:start="2969:37" pos:end="2969:66"><name pos:start="2969:37" pos:end="2969:47">gen_compare</name><argument_list pos:start="2969:48" pos:end="2969:66">(<argument pos:start="2969:49" pos:end="2969:52"><expr pos:start="2969:49" pos:end="2969:52"><operator pos:start="2969:49" pos:end="2969:49">&amp;</operator><name pos:start="2969:50" pos:end="2969:52">cmp</name></expr></argument>, <argument pos:start="2969:55" pos:end="2969:55"><expr pos:start="2969:55" pos:end="2969:55"><literal type="number" pos:start="2969:55" pos:end="2969:55">1</literal></expr></argument>, <argument pos:start="2969:58" pos:end="2969:61"><expr pos:start="2969:58" pos:end="2969:61"><name pos:start="2969:58" pos:end="2969:61">cond</name></expr></argument>, <argument pos:start="2969:64" pos:end="2969:65"><expr pos:start="2969:64" pos:end="2969:65"><name pos:start="2969:64" pos:end="2969:65">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="2971:35" pos:end="2975:33">else <block pos:start="2971:40" pos:end="2975:33">{<block_content pos:start="2973:37" pos:end="2973:54">

                                    <goto pos:start="2973:37" pos:end="2973:54">goto <name pos:start="2973:42" pos:end="2973:53">illegal_insn</name>;</goto>

                                </block_content>}</block></else></if_stmt>

                            </block_content>}</block></if> <else pos:start="2977:31" pos:end="2981:29">else <block pos:start="2977:36" pos:end="2981:29">{<block_content pos:start="2979:33" pos:end="2979:61">

                                <expr_stmt pos:start="2979:33" pos:end="2979:61"><expr pos:start="2979:33" pos:end="2979:60"><call pos:start="2979:33" pos:end="2979:60"><name pos:start="2979:33" pos:end="2979:44">gen_fcompare</name><argument_list pos:start="2979:45" pos:end="2979:60">(<argument pos:start="2979:46" pos:end="2979:49"><expr pos:start="2979:46" pos:end="2979:49"><operator pos:start="2979:46" pos:end="2979:46">&amp;</operator><name pos:start="2979:47" pos:end="2979:49">cmp</name></expr></argument>, <argument pos:start="2979:52" pos:end="2979:53"><expr pos:start="2979:52" pos:end="2979:53"><name pos:start="2979:52" pos:end="2979:53">cc</name></expr></argument>, <argument pos:start="2979:56" pos:end="2979:59"><expr pos:start="2979:56" pos:end="2979:59"><name pos:start="2979:56" pos:end="2979:59">cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>



                            <comment type="block" pos:start="2985:29" pos:end="2989:77">/* The get_src2 above loaded the normal 13-bit

                               immediate field, not the 11-bit field we have

                               in movcc.  But it did handle the reg case.  */</comment>

                            <if_stmt pos:start="2991:29" pos:end="2997:29"><if pos:start="2991:29" pos:end="2997:29">if <condition pos:start="2991:32" pos:end="2991:39">(<expr pos:start="2991:33" pos:end="2991:38"><name pos:start="2991:33" pos:end="2991:38">IS_IMM</name></expr>)</condition> <block pos:start="2991:41" pos:end="2997:29">{<block_content pos:start="2993:33" pos:end="2995:64">

                                <expr_stmt pos:start="2993:33" pos:end="2993:66"><expr pos:start="2993:33" pos:end="2993:65"><name pos:start="2993:33" pos:end="2993:36">simm</name> <operator pos:start="2993:38" pos:end="2993:38">=</operator> <call pos:start="2993:40" pos:end="2993:65"><name pos:start="2993:40" pos:end="2993:52">GET_FIELD_SPs</name><argument_list pos:start="2993:53" pos:end="2993:65">(<argument pos:start="2993:54" pos:end="2993:57"><expr pos:start="2993:54" pos:end="2993:57"><name pos:start="2993:54" pos:end="2993:57">insn</name></expr></argument>, <argument pos:start="2993:60" pos:end="2993:60"><expr pos:start="2993:60" pos:end="2993:60"><literal type="number" pos:start="2993:60" pos:end="2993:60">0</literal></expr></argument>, <argument pos:start="2993:63" pos:end="2993:64"><expr pos:start="2993:63" pos:end="2993:64"><literal type="number" pos:start="2993:63" pos:end="2993:64">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="2995:33" pos:end="2995:64"><expr pos:start="2995:33" pos:end="2995:63"><call pos:start="2995:33" pos:end="2995:63"><name pos:start="2995:33" pos:end="2995:47">tcg_gen_movi_tl</name><argument_list pos:start="2995:48" pos:end="2995:63">(<argument pos:start="2995:49" pos:end="2995:56"><expr pos:start="2995:49" pos:end="2995:56"><name pos:start="2995:49" pos:end="2995:56">cpu_src2</name></expr></argument>, <argument pos:start="2995:59" pos:end="2995:62"><expr pos:start="2995:59" pos:end="2995:62"><name pos:start="2995:59" pos:end="2995:62">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>



                            <expr_stmt pos:start="3001:29" pos:end="3001:55"><expr pos:start="3001:29" pos:end="3001:54"><name pos:start="3001:29" pos:end="3001:31">dst</name> <operator pos:start="3001:33" pos:end="3001:33">=</operator> <call pos:start="3001:35" pos:end="3001:54"><name pos:start="3001:35" pos:end="3001:46">gen_load_gpr</name><argument_list pos:start="3001:47" pos:end="3001:54">(<argument pos:start="3001:48" pos:end="3001:49"><expr pos:start="3001:48" pos:end="3001:49"><name pos:start="3001:48" pos:end="3001:49">dc</name></expr></argument>, <argument pos:start="3001:52" pos:end="3001:53"><expr pos:start="3001:52" pos:end="3001:53"><name pos:start="3001:52" pos:end="3001:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3003:29" pos:end="3007:62"><expr pos:start="3003:29" pos:end="3007:61"><call pos:start="3003:29" pos:end="3007:61"><name pos:start="3003:29" pos:end="3003:46">tcg_gen_movcond_tl</name><argument_list pos:start="3003:47" pos:end="3007:61">(<argument pos:start="3003:48" pos:end="3003:55"><expr pos:start="3003:48" pos:end="3003:55"><name pos:start="3003:48" pos:end="3003:55"><name pos:start="3003:48" pos:end="3003:50">cmp</name><operator pos:start="3003:51" pos:end="3003:51">.</operator><name pos:start="3003:52" pos:end="3003:55">cond</name></name></expr></argument>, <argument pos:start="3003:58" pos:end="3003:60"><expr pos:start="3003:58" pos:end="3003:60"><name pos:start="3003:58" pos:end="3003:60">dst</name></expr></argument>,

                                               <argument pos:start="3005:48" pos:end="3005:53"><expr pos:start="3005:48" pos:end="3005:53"><name pos:start="3005:48" pos:end="3005:53"><name pos:start="3005:48" pos:end="3005:50">cmp</name><operator pos:start="3005:51" pos:end="3005:51">.</operator><name pos:start="3005:52" pos:end="3005:53">c1</name></name></expr></argument>, <argument pos:start="3005:56" pos:end="3005:61"><expr pos:start="3005:56" pos:end="3005:61"><name pos:start="3005:56" pos:end="3005:61"><name pos:start="3005:56" pos:end="3005:58">cmp</name><operator pos:start="3005:59" pos:end="3005:59">.</operator><name pos:start="3005:60" pos:end="3005:61">c2</name></name></expr></argument>,

                                               <argument pos:start="3007:48" pos:end="3007:55"><expr pos:start="3007:48" pos:end="3007:55"><name pos:start="3007:48" pos:end="3007:55">cpu_src2</name></expr></argument>, <argument pos:start="3007:58" pos:end="3007:60"><expr pos:start="3007:58" pos:end="3007:60"><name pos:start="3007:58" pos:end="3007:60">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3009:29" pos:end="3009:47"><expr pos:start="3009:29" pos:end="3009:46"><call pos:start="3009:29" pos:end="3009:46"><name pos:start="3009:29" pos:end="3009:40">free_compare</name><argument_list pos:start="3009:41" pos:end="3009:46">(<argument pos:start="3009:42" pos:end="3009:45"><expr pos:start="3009:42" pos:end="3009:45"><operator pos:start="3009:42" pos:end="3009:42">&amp;</operator><name pos:start="3009:43" pos:end="3009:45">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3011:29" pos:end="3011:55"><expr pos:start="3011:29" pos:end="3011:54"><call pos:start="3011:29" pos:end="3011:54"><name pos:start="3011:29" pos:end="3011:41">gen_store_gpr</name><argument_list pos:start="3011:42" pos:end="3011:54">(<argument pos:start="3011:43" pos:end="3011:44"><expr pos:start="3011:43" pos:end="3011:44"><name pos:start="3011:43" pos:end="3011:44">dc</name></expr></argument>, <argument pos:start="3011:47" pos:end="3011:48"><expr pos:start="3011:47" pos:end="3011:48"><name pos:start="3011:47" pos:end="3011:48">rd</name></expr></argument>, <argument pos:start="3011:51" pos:end="3011:53"><expr pos:start="3011:51" pos:end="3011:53"><name pos:start="3011:51" pos:end="3011:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3013:29" pos:end="3013:34">break;</break>

                        </block_content>}</block>

                    <case pos:start="3017:21" pos:end="3017:30">case <expr pos:start="3017:26" pos:end="3017:29"><literal type="number" pos:start="3017:26" pos:end="3017:29">0x2d</literal></expr>:</case> <comment type="block" pos:start="3017:32" pos:end="3017:45">/* V9 sdivx */</comment>

                        <expr_stmt pos:start="3019:25" pos:end="3019:79"><expr pos:start="3019:25" pos:end="3019:78"><call pos:start="3019:25" pos:end="3019:78"><name pos:start="3019:25" pos:end="3019:40">gen_helper_sdivx</name><argument_list pos:start="3019:41" pos:end="3019:78">(<argument pos:start="3019:42" pos:end="3019:48"><expr pos:start="3019:42" pos:end="3019:48"><name pos:start="3019:42" pos:end="3019:48">cpu_dst</name></expr></argument>, <argument pos:start="3019:51" pos:end="3019:57"><expr pos:start="3019:51" pos:end="3019:57"><name pos:start="3019:51" pos:end="3019:57">cpu_env</name></expr></argument>, <argument pos:start="3019:60" pos:end="3019:67"><expr pos:start="3019:60" pos:end="3019:67"><name pos:start="3019:60" pos:end="3019:67">cpu_src1</name></expr></argument>, <argument pos:start="3019:70" pos:end="3019:77"><expr pos:start="3019:70" pos:end="3019:77"><name pos:start="3019:70" pos:end="3019:77">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3021:25" pos:end="3021:55"><expr pos:start="3021:25" pos:end="3021:54"><call pos:start="3021:25" pos:end="3021:54"><name pos:start="3021:25" pos:end="3021:37">gen_store_gpr</name><argument_list pos:start="3021:38" pos:end="3021:54">(<argument pos:start="3021:39" pos:end="3021:40"><expr pos:start="3021:39" pos:end="3021:40"><name pos:start="3021:39" pos:end="3021:40">dc</name></expr></argument>, <argument pos:start="3021:43" pos:end="3021:44"><expr pos:start="3021:43" pos:end="3021:44"><name pos:start="3021:43" pos:end="3021:44">rd</name></expr></argument>, <argument pos:start="3021:47" pos:end="3021:53"><expr pos:start="3021:47" pos:end="3021:53"><name pos:start="3021:47" pos:end="3021:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3023:25" pos:end="3023:30">break;</break>

                    <case pos:start="3025:21" pos:end="3025:30">case <expr pos:start="3025:26" pos:end="3025:29"><literal type="number" pos:start="3025:26" pos:end="3025:29">0x2e</literal></expr>:</case> <comment type="block" pos:start="3025:32" pos:end="3025:44">/* V9 popc */</comment>

                        <expr_stmt pos:start="3027:25" pos:end="3027:59"><expr pos:start="3027:25" pos:end="3027:58"><call pos:start="3027:25" pos:end="3027:58"><name pos:start="3027:25" pos:end="3027:39">gen_helper_popc</name><argument_list pos:start="3027:40" pos:end="3027:58">(<argument pos:start="3027:41" pos:end="3027:47"><expr pos:start="3027:41" pos:end="3027:47"><name pos:start="3027:41" pos:end="3027:47">cpu_dst</name></expr></argument>, <argument pos:start="3027:50" pos:end="3027:57"><expr pos:start="3027:50" pos:end="3027:57"><name pos:start="3027:50" pos:end="3027:57">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="3029:25" pos:end="3029:55"><expr pos:start="3029:25" pos:end="3029:54"><call pos:start="3029:25" pos:end="3029:54"><name pos:start="3029:25" pos:end="3029:37">gen_store_gpr</name><argument_list pos:start="3029:38" pos:end="3029:54">(<argument pos:start="3029:39" pos:end="3029:40"><expr pos:start="3029:39" pos:end="3029:40"><name pos:start="3029:39" pos:end="3029:40">dc</name></expr></argument>, <argument pos:start="3029:43" pos:end="3029:44"><expr pos:start="3029:43" pos:end="3029:44"><name pos:start="3029:43" pos:end="3029:44">rd</name></expr></argument>, <argument pos:start="3029:47" pos:end="3029:53"><expr pos:start="3029:47" pos:end="3029:53"><name pos:start="3029:47" pos:end="3029:53">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="3031:25" pos:end="3031:30">break;</break>

                    <case pos:start="3033:21" pos:end="3033:30">case <expr pos:start="3033:26" pos:end="3033:29"><literal type="number" pos:start="3033:26" pos:end="3033:29">0x2f</literal></expr>:</case> <comment type="block" pos:start="3033:32" pos:end="3033:44">/* V9 movr */</comment>

                        <block pos:start="3035:25" pos:end="3082:0">{<block_content pos:start="3037:29" pos:end="3077:34">

                            <decl_stmt pos:start="3037:29" pos:end="3037:66"><decl pos:start="3037:29" pos:end="3037:65"><type pos:start="3037:29" pos:end="3037:31"><name pos:start="3037:29" pos:end="3037:31">int</name></type> <name pos:start="3037:33" pos:end="3037:36">cond</name> <init pos:start="3037:38" pos:end="3037:65">= <expr pos:start="3037:40" pos:end="3037:65"><call pos:start="3037:40" pos:end="3037:65"><name pos:start="3037:40" pos:end="3037:51">GET_FIELD_SP</name><argument_list pos:start="3037:52" pos:end="3037:65">(<argument pos:start="3037:53" pos:end="3037:56"><expr pos:start="3037:53" pos:end="3037:56"><name pos:start="3037:53" pos:end="3037:56">insn</name></expr></argument>, <argument pos:start="3037:59" pos:end="3037:60"><expr pos:start="3037:59" pos:end="3037:60"><literal type="number" pos:start="3037:59" pos:end="3037:60">10</literal></expr></argument>, <argument pos:start="3037:63" pos:end="3037:64"><expr pos:start="3037:63" pos:end="3037:64"><literal type="number" pos:start="3037:63" pos:end="3037:64">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="3039:29" pos:end="3039:45"><decl pos:start="3039:29" pos:end="3039:44"><type pos:start="3039:29" pos:end="3039:40"><name pos:start="3039:29" pos:end="3039:40">DisasCompare</name></type> <name pos:start="3039:42" pos:end="3039:44">cmp</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="3041:29" pos:end="3041:37"><decl pos:start="3041:29" pos:end="3041:36"><type pos:start="3041:29" pos:end="3041:32"><name pos:start="3041:29" pos:end="3041:32">TCGv</name></type> <name pos:start="3041:34" pos:end="3041:36">dst</name></decl>;</decl_stmt>



                            <expr_stmt pos:start="3045:29" pos:end="3045:66"><expr pos:start="3045:29" pos:end="3045:65"><call pos:start="3045:29" pos:end="3045:65"><name pos:start="3045:29" pos:end="3045:43">gen_compare_reg</name><argument_list pos:start="3045:44" pos:end="3045:65">(<argument pos:start="3045:45" pos:end="3045:48"><expr pos:start="3045:45" pos:end="3045:48"><operator pos:start="3045:45" pos:end="3045:45">&amp;</operator><name pos:start="3045:46" pos:end="3045:48">cmp</name></expr></argument>, <argument pos:start="3045:51" pos:end="3045:54"><expr pos:start="3045:51" pos:end="3045:54"><name pos:start="3045:51" pos:end="3045:54">cond</name></expr></argument>, <argument pos:start="3045:57" pos:end="3045:64"><expr pos:start="3045:57" pos:end="3045:64"><name pos:start="3045:57" pos:end="3045:64">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                            <comment type="block" pos:start="3049:29" pos:end="3053:76">/* The get_src2 above loaded the normal 13-bit

                               immediate field, not the 10-bit field we have

                               in movr.  But it did handle the reg case.  */</comment>

                            <if_stmt pos:start="3055:29" pos:end="3061:29"><if pos:start="3055:29" pos:end="3061:29">if <condition pos:start="3055:32" pos:end="3055:39">(<expr pos:start="3055:33" pos:end="3055:38"><name pos:start="3055:33" pos:end="3055:38">IS_IMM</name></expr>)</condition> <block pos:start="3055:41" pos:end="3061:29">{<block_content pos:start="3057:33" pos:end="3059:64">

                                <expr_stmt pos:start="3057:33" pos:end="3057:65"><expr pos:start="3057:33" pos:end="3057:64"><name pos:start="3057:33" pos:end="3057:36">simm</name> <operator pos:start="3057:38" pos:end="3057:38">=</operator> <call pos:start="3057:40" pos:end="3057:64"><name pos:start="3057:40" pos:end="3057:52">GET_FIELD_SPs</name><argument_list pos:start="3057:53" pos:end="3057:64">(<argument pos:start="3057:54" pos:end="3057:57"><expr pos:start="3057:54" pos:end="3057:57"><name pos:start="3057:54" pos:end="3057:57">insn</name></expr></argument>, <argument pos:start="3057:60" pos:end="3057:60"><expr pos:start="3057:60" pos:end="3057:60"><literal type="number" pos:start="3057:60" pos:end="3057:60">0</literal></expr></argument>, <argument pos:start="3057:63" pos:end="3057:63"><expr pos:start="3057:63" pos:end="3057:63"><literal type="number" pos:start="3057:63" pos:end="3057:63">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="3059:33" pos:end="3059:64"><expr pos:start="3059:33" pos:end="3059:63"><call pos:start="3059:33" pos:end="3059:63"><name pos:start="3059:33" pos:end="3059:47">tcg_gen_movi_tl</name><argument_list pos:start="3059:48" pos:end="3059:63">(<argument pos:start="3059:49" pos:end="3059:56"><expr pos:start="3059:49" pos:end="3059:56"><name pos:start="3059:49" pos:end="3059:56">cpu_src2</name></expr></argument>, <argument pos:start="3059:59" pos:end="3059:62"><expr pos:start="3059:59" pos:end="3059:62"><name pos:start="3059:59" pos:end="3059:62">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>



                            <expr_stmt pos:start="3065:29" pos:end="3065:55"><expr pos:start="3065:29" pos:end="3065:54"><name pos:start="3065:29" pos:end="3065:31">dst</name> <operator pos:start="3065:33" pos:end="3065:33">=</operator> <call pos:start="3065:35" pos:end="3065:54"><name pos:start="3065:35" pos:end="3065:46">gen_load_gpr</name><argument_list pos:start="3065:47" pos:end="3065:54">(<argument pos:start="3065:48" pos:end="3065:49"><expr pos:start="3065:48" pos:end="3065:49"><name pos:start="3065:48" pos:end="3065:49">dc</name></expr></argument>, <argument pos:start="3065:52" pos:end="3065:53"><expr pos:start="3065:52" pos:end="3065:53"><name pos:start="3065:52" pos:end="3065:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3067:29" pos:end="3071:62"><expr pos:start="3067:29" pos:end="3071:61"><call pos:start="3067:29" pos:end="3071:61"><name pos:start="3067:29" pos:end="3067:46">tcg_gen_movcond_tl</name><argument_list pos:start="3067:47" pos:end="3071:61">(<argument pos:start="3067:48" pos:end="3067:55"><expr pos:start="3067:48" pos:end="3067:55"><name pos:start="3067:48" pos:end="3067:55"><name pos:start="3067:48" pos:end="3067:50">cmp</name><operator pos:start="3067:51" pos:end="3067:51">.</operator><name pos:start="3067:52" pos:end="3067:55">cond</name></name></expr></argument>, <argument pos:start="3067:58" pos:end="3067:60"><expr pos:start="3067:58" pos:end="3067:60"><name pos:start="3067:58" pos:end="3067:60">dst</name></expr></argument>,

                                               <argument pos:start="3069:48" pos:end="3069:53"><expr pos:start="3069:48" pos:end="3069:53"><name pos:start="3069:48" pos:end="3069:53"><name pos:start="3069:48" pos:end="3069:50">cmp</name><operator pos:start="3069:51" pos:end="3069:51">.</operator><name pos:start="3069:52" pos:end="3069:53">c1</name></name></expr></argument>, <argument pos:start="3069:56" pos:end="3069:61"><expr pos:start="3069:56" pos:end="3069:61"><name pos:start="3069:56" pos:end="3069:61"><name pos:start="3069:56" pos:end="3069:58">cmp</name><operator pos:start="3069:59" pos:end="3069:59">.</operator><name pos:start="3069:60" pos:end="3069:61">c2</name></name></expr></argument>,

                                               <argument pos:start="3071:48" pos:end="3071:55"><expr pos:start="3071:48" pos:end="3071:55"><name pos:start="3071:48" pos:end="3071:55">cpu_src2</name></expr></argument>, <argument pos:start="3071:58" pos:end="3071:60"><expr pos:start="3071:58" pos:end="3071:60"><name pos:start="3071:58" pos:end="3071:60">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3073:29" pos:end="3073:47"><expr pos:start="3073:29" pos:end="3073:46"><call pos:start="3073:29" pos:end="3073:46"><name pos:start="3073:29" pos:end="3073:40">free_compare</name><argument_list pos:start="3073:41" pos:end="3073:46">(<argument pos:start="3073:42" pos:end="3073:45"><expr pos:start="3073:42" pos:end="3073:45"><operator pos:start="3073:42" pos:end="3073:42">&amp;</operator><name pos:start="3073:43" pos:end="3073:45">cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="3075:29" pos:end="3075:55"><expr pos:start="3075:29" pos:end="3075:54"><call pos:start="3075:29" pos:end="3075:54"><name pos:start="3075:29" pos:end="3075:41">gen_store_gpr</name><argument_list pos:start="3075:42" pos:end="3075:54">(<argument pos:start="3075:43" pos:end="3075:44"><expr pos:start="3075:43" pos:end="3075:44"><name pos:start="3075:43" pos:end="3075:44">dc</name></expr></argument>, <argument pos:start="3075:47" pos:end="3075:48"><expr pos:start="3075:47" pos:end="3075:48"><name pos:start="3075:47" pos:end="3075:48">rd</name></expr></argument>, <argument pos:start="3075:51" pos:end="3075:53"><expr pos:start="3075:51" pos:end="3075:53"><name pos:start="3075:51" pos:end="3075:53">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3077:29" pos:end="3077:34">break;</break>

                        </block_content>}</block>

<cpp:endif pos:start="3081:1" pos:end="3081:6">#<cpp:directive pos:start="3081:2" pos:end="3081:6">endif</cpp:directive></cpp:endif>

                    <default pos:start="3083:21" pos:end="3083:28">default:</default>

                        <goto pos:start="3085:25" pos:end="3085:42">goto <name pos:start="3085:30" pos:end="3085:41">illegal_insn</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="3091:15" pos:end="3977:13">else if <condition pos:start="3091:23" pos:end="3091:35">(<expr pos:start="3091:24" pos:end="3091:34"><name pos:start="3091:24" pos:end="3091:26">xop</name> <operator pos:start="3091:28" pos:end="3091:29">==</operator> <literal type="number" pos:start="3091:31" pos:end="3091:34">0x36</literal></expr>)</condition> <block pos:start="3091:37" pos:end="3977:13">{<block_content pos:start="3095:17" pos:end="3976:0"> <comment type="block" pos:start="3091:39" pos:end="3091:78">/* UltraSparc shutdown, VIS, V8 CPop1 */</comment>

<cpp:ifdef pos:start="3093:1" pos:end="3093:21">#<cpp:directive pos:start="3093:2" pos:end="3093:6">ifdef</cpp:directive> <name pos:start="3093:8" pos:end="3093:21">TARGET_SPARC64</name></cpp:ifdef>

                <decl_stmt pos:start="3095:17" pos:end="3095:52"><decl pos:start="3095:17" pos:end="3095:51"><type pos:start="3095:17" pos:end="3095:19"><name pos:start="3095:17" pos:end="3095:19">int</name></type> <name pos:start="3095:21" pos:end="3095:23">opf</name> <init pos:start="3095:25" pos:end="3095:51">= <expr pos:start="3095:27" pos:end="3095:51"><call pos:start="3095:27" pos:end="3095:51"><name pos:start="3095:27" pos:end="3095:38">GET_FIELD_SP</name><argument_list pos:start="3095:39" pos:end="3095:51">(<argument pos:start="3095:40" pos:end="3095:43"><expr pos:start="3095:40" pos:end="3095:43"><name pos:start="3095:40" pos:end="3095:43">insn</name></expr></argument>, <argument pos:start="3095:46" pos:end="3095:46"><expr pos:start="3095:46" pos:end="3095:46"><literal type="number" pos:start="3095:46" pos:end="3095:46">5</literal></expr></argument>, <argument pos:start="3095:49" pos:end="3095:50"><expr pos:start="3095:49" pos:end="3095:50"><literal type="number" pos:start="3095:49" pos:end="3095:50">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="3097:17" pos:end="3097:46"><expr pos:start="3097:17" pos:end="3097:45"><name pos:start="3097:17" pos:end="3097:19">rs1</name> <operator pos:start="3097:21" pos:end="3097:21">=</operator> <call pos:start="3097:23" pos:end="3097:45"><name pos:start="3097:23" pos:end="3097:31">GET_FIELD</name><argument_list pos:start="3097:32" pos:end="3097:45">(<argument pos:start="3097:33" pos:end="3097:36"><expr pos:start="3097:33" pos:end="3097:36"><name pos:start="3097:33" pos:end="3097:36">insn</name></expr></argument>, <argument pos:start="3097:39" pos:end="3097:40"><expr pos:start="3097:39" pos:end="3097:40"><literal type="number" pos:start="3097:39" pos:end="3097:40">13</literal></expr></argument>, <argument pos:start="3097:43" pos:end="3097:44"><expr pos:start="3097:43" pos:end="3097:44"><literal type="number" pos:start="3097:43" pos:end="3097:44">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3099:17" pos:end="3099:46"><expr pos:start="3099:17" pos:end="3099:45"><name pos:start="3099:17" pos:end="3099:19">rs2</name> <operator pos:start="3099:21" pos:end="3099:21">=</operator> <call pos:start="3099:23" pos:end="3099:45"><name pos:start="3099:23" pos:end="3099:31">GET_FIELD</name><argument_list pos:start="3099:32" pos:end="3099:45">(<argument pos:start="3099:33" pos:end="3099:36"><expr pos:start="3099:33" pos:end="3099:36"><name pos:start="3099:33" pos:end="3099:36">insn</name></expr></argument>, <argument pos:start="3099:39" pos:end="3099:40"><expr pos:start="3099:39" pos:end="3099:40"><literal type="number" pos:start="3099:39" pos:end="3099:40">27</literal></expr></argument>, <argument pos:start="3099:43" pos:end="3099:44"><expr pos:start="3099:43" pos:end="3099:44"><literal type="number" pos:start="3099:43" pos:end="3099:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3101:17" pos:end="3105:17"><if pos:start="3101:17" pos:end="3105:17">if <condition pos:start="3101:20" pos:end="3101:41">(<expr pos:start="3101:21" pos:end="3101:40"><call pos:start="3101:21" pos:end="3101:40"><name pos:start="3101:21" pos:end="3101:36">gen_trap_ifnofpu</name><argument_list pos:start="3101:37" pos:end="3101:40">(<argument pos:start="3101:38" pos:end="3101:39"><expr pos:start="3101:38" pos:end="3101:39"><name pos:start="3101:38" pos:end="3101:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3101:43" pos:end="3105:17">{<block_content pos:start="3103:21" pos:end="3103:34">

                    <goto pos:start="3103:21" pos:end="3103:34">goto <name pos:start="3103:26" pos:end="3103:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <switch pos:start="3109:17" pos:end="3972:0">switch <condition pos:start="3109:24" pos:end="3109:28">(<expr pos:start="3109:25" pos:end="3109:27"><name pos:start="3109:25" pos:end="3109:27">opf</name></expr>)</condition> <block pos:start="3109:30" pos:end="3972:0">{<block_content pos:start="3111:17" pos:end="3967:38">

                <case pos:start="3111:17" pos:end="3111:27">case <expr pos:start="3111:22" pos:end="3111:26"><literal type="number" pos:start="3111:22" pos:end="3111:26">0x000</literal></expr>:</case> <comment type="block" pos:start="3111:29" pos:end="3111:47">/* VIS I edge8cc */</comment>

                    <expr_stmt pos:start="3113:21" pos:end="3113:48"><expr pos:start="3113:21" pos:end="3113:47"><call pos:start="3113:21" pos:end="3113:47"><name pos:start="3113:21" pos:end="3113:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3113:38" pos:end="3113:47">(<argument pos:start="3113:39" pos:end="3113:40"><expr pos:start="3113:39" pos:end="3113:40"><name pos:start="3113:39" pos:end="3113:40">dc</name></expr></argument>, <argument pos:start="3113:43" pos:end="3113:46"><expr pos:start="3113:43" pos:end="3113:46"><name pos:start="3113:43" pos:end="3113:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3115:21" pos:end="3115:53"><expr pos:start="3115:21" pos:end="3115:52"><name pos:start="3115:21" pos:end="3115:28">cpu_src1</name> <operator pos:start="3115:30" pos:end="3115:30">=</operator> <call pos:start="3115:32" pos:end="3115:52"><name pos:start="3115:32" pos:end="3115:43">gen_load_gpr</name><argument_list pos:start="3115:44" pos:end="3115:52">(<argument pos:start="3115:45" pos:end="3115:46"><expr pos:start="3115:45" pos:end="3115:46"><name pos:start="3115:45" pos:end="3115:46">dc</name></expr></argument>, <argument pos:start="3115:49" pos:end="3115:51"><expr pos:start="3115:49" pos:end="3115:51"><name pos:start="3115:49" pos:end="3115:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3117:21" pos:end="3117:53"><expr pos:start="3117:21" pos:end="3117:52"><name pos:start="3117:21" pos:end="3117:28">cpu_src2</name> <operator pos:start="3117:30" pos:end="3117:30">=</operator> <call pos:start="3117:32" pos:end="3117:52"><name pos:start="3117:32" pos:end="3117:43">gen_load_gpr</name><argument_list pos:start="3117:44" pos:end="3117:52">(<argument pos:start="3117:45" pos:end="3117:46"><expr pos:start="3117:45" pos:end="3117:46"><name pos:start="3117:45" pos:end="3117:46">dc</name></expr></argument>, <argument pos:start="3117:49" pos:end="3117:51"><expr pos:start="3117:49" pos:end="3117:51"><name pos:start="3117:49" pos:end="3117:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3119:21" pos:end="3119:71"><expr pos:start="3119:21" pos:end="3119:70"><call pos:start="3119:21" pos:end="3119:70"><name pos:start="3119:21" pos:end="3119:28">gen_edge</name><argument_list pos:start="3119:29" pos:end="3119:70">(<argument pos:start="3119:30" pos:end="3119:31"><expr pos:start="3119:30" pos:end="3119:31"><name pos:start="3119:30" pos:end="3119:31">dc</name></expr></argument>, <argument pos:start="3119:34" pos:end="3119:40"><expr pos:start="3119:34" pos:end="3119:40"><name pos:start="3119:34" pos:end="3119:40">cpu_dst</name></expr></argument>, <argument pos:start="3119:43" pos:end="3119:50"><expr pos:start="3119:43" pos:end="3119:50"><name pos:start="3119:43" pos:end="3119:50">cpu_src1</name></expr></argument>, <argument pos:start="3119:53" pos:end="3119:60"><expr pos:start="3119:53" pos:end="3119:60"><name pos:start="3119:53" pos:end="3119:60">cpu_src2</name></expr></argument>, <argument pos:start="3119:63" pos:end="3119:63"><expr pos:start="3119:63" pos:end="3119:63"><literal type="number" pos:start="3119:63" pos:end="3119:63">8</literal></expr></argument>, <argument pos:start="3119:66" pos:end="3119:66"><expr pos:start="3119:66" pos:end="3119:66"><literal type="number" pos:start="3119:66" pos:end="3119:66">1</literal></expr></argument>, <argument pos:start="3119:69" pos:end="3119:69"><expr pos:start="3119:69" pos:end="3119:69"><literal type="number" pos:start="3119:69" pos:end="3119:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3121:21" pos:end="3121:51"><expr pos:start="3121:21" pos:end="3121:50"><call pos:start="3121:21" pos:end="3121:50"><name pos:start="3121:21" pos:end="3121:33">gen_store_gpr</name><argument_list pos:start="3121:34" pos:end="3121:50">(<argument pos:start="3121:35" pos:end="3121:36"><expr pos:start="3121:35" pos:end="3121:36"><name pos:start="3121:35" pos:end="3121:36">dc</name></expr></argument>, <argument pos:start="3121:39" pos:end="3121:40"><expr pos:start="3121:39" pos:end="3121:40"><name pos:start="3121:39" pos:end="3121:40">rd</name></expr></argument>, <argument pos:start="3121:43" pos:end="3121:49"><expr pos:start="3121:43" pos:end="3121:49"><name pos:start="3121:43" pos:end="3121:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3123:21" pos:end="3123:26">break;</break>

                <case pos:start="3125:17" pos:end="3125:27">case <expr pos:start="3125:22" pos:end="3125:26"><literal type="number" pos:start="3125:22" pos:end="3125:26">0x001</literal></expr>:</case> <comment type="block" pos:start="3125:29" pos:end="3125:47">/* VIS II edge8n */</comment>

                    <expr_stmt pos:start="3127:21" pos:end="3127:48"><expr pos:start="3127:21" pos:end="3127:47"><call pos:start="3127:21" pos:end="3127:47"><name pos:start="3127:21" pos:end="3127:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3127:38" pos:end="3127:47">(<argument pos:start="3127:39" pos:end="3127:40"><expr pos:start="3127:39" pos:end="3127:40"><name pos:start="3127:39" pos:end="3127:40">dc</name></expr></argument>, <argument pos:start="3127:43" pos:end="3127:46"><expr pos:start="3127:43" pos:end="3127:46"><name pos:start="3127:43" pos:end="3127:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3129:21" pos:end="3129:53"><expr pos:start="3129:21" pos:end="3129:52"><name pos:start="3129:21" pos:end="3129:28">cpu_src1</name> <operator pos:start="3129:30" pos:end="3129:30">=</operator> <call pos:start="3129:32" pos:end="3129:52"><name pos:start="3129:32" pos:end="3129:43">gen_load_gpr</name><argument_list pos:start="3129:44" pos:end="3129:52">(<argument pos:start="3129:45" pos:end="3129:46"><expr pos:start="3129:45" pos:end="3129:46"><name pos:start="3129:45" pos:end="3129:46">dc</name></expr></argument>, <argument pos:start="3129:49" pos:end="3129:51"><expr pos:start="3129:49" pos:end="3129:51"><name pos:start="3129:49" pos:end="3129:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3131:21" pos:end="3131:53"><expr pos:start="3131:21" pos:end="3131:52"><name pos:start="3131:21" pos:end="3131:28">cpu_src2</name> <operator pos:start="3131:30" pos:end="3131:30">=</operator> <call pos:start="3131:32" pos:end="3131:52"><name pos:start="3131:32" pos:end="3131:43">gen_load_gpr</name><argument_list pos:start="3131:44" pos:end="3131:52">(<argument pos:start="3131:45" pos:end="3131:46"><expr pos:start="3131:45" pos:end="3131:46"><name pos:start="3131:45" pos:end="3131:46">dc</name></expr></argument>, <argument pos:start="3131:49" pos:end="3131:51"><expr pos:start="3131:49" pos:end="3131:51"><name pos:start="3131:49" pos:end="3131:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3133:21" pos:end="3133:71"><expr pos:start="3133:21" pos:end="3133:70"><call pos:start="3133:21" pos:end="3133:70"><name pos:start="3133:21" pos:end="3133:28">gen_edge</name><argument_list pos:start="3133:29" pos:end="3133:70">(<argument pos:start="3133:30" pos:end="3133:31"><expr pos:start="3133:30" pos:end="3133:31"><name pos:start="3133:30" pos:end="3133:31">dc</name></expr></argument>, <argument pos:start="3133:34" pos:end="3133:40"><expr pos:start="3133:34" pos:end="3133:40"><name pos:start="3133:34" pos:end="3133:40">cpu_dst</name></expr></argument>, <argument pos:start="3133:43" pos:end="3133:50"><expr pos:start="3133:43" pos:end="3133:50"><name pos:start="3133:43" pos:end="3133:50">cpu_src1</name></expr></argument>, <argument pos:start="3133:53" pos:end="3133:60"><expr pos:start="3133:53" pos:end="3133:60"><name pos:start="3133:53" pos:end="3133:60">cpu_src2</name></expr></argument>, <argument pos:start="3133:63" pos:end="3133:63"><expr pos:start="3133:63" pos:end="3133:63"><literal type="number" pos:start="3133:63" pos:end="3133:63">8</literal></expr></argument>, <argument pos:start="3133:66" pos:end="3133:66"><expr pos:start="3133:66" pos:end="3133:66"><literal type="number" pos:start="3133:66" pos:end="3133:66">0</literal></expr></argument>, <argument pos:start="3133:69" pos:end="3133:69"><expr pos:start="3133:69" pos:end="3133:69"><literal type="number" pos:start="3133:69" pos:end="3133:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3135:21" pos:end="3135:51"><expr pos:start="3135:21" pos:end="3135:50"><call pos:start="3135:21" pos:end="3135:50"><name pos:start="3135:21" pos:end="3135:33">gen_store_gpr</name><argument_list pos:start="3135:34" pos:end="3135:50">(<argument pos:start="3135:35" pos:end="3135:36"><expr pos:start="3135:35" pos:end="3135:36"><name pos:start="3135:35" pos:end="3135:36">dc</name></expr></argument>, <argument pos:start="3135:39" pos:end="3135:40"><expr pos:start="3135:39" pos:end="3135:40"><name pos:start="3135:39" pos:end="3135:40">rd</name></expr></argument>, <argument pos:start="3135:43" pos:end="3135:49"><expr pos:start="3135:43" pos:end="3135:49"><name pos:start="3135:43" pos:end="3135:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3137:21" pos:end="3137:26">break;</break>

                <case pos:start="3139:17" pos:end="3139:27">case <expr pos:start="3139:22" pos:end="3139:26"><literal type="number" pos:start="3139:22" pos:end="3139:26">0x002</literal></expr>:</case> <comment type="block" pos:start="3139:29" pos:end="3139:48">/* VIS I edge8lcc */</comment>

                    <expr_stmt pos:start="3141:21" pos:end="3141:48"><expr pos:start="3141:21" pos:end="3141:47"><call pos:start="3141:21" pos:end="3141:47"><name pos:start="3141:21" pos:end="3141:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3141:38" pos:end="3141:47">(<argument pos:start="3141:39" pos:end="3141:40"><expr pos:start="3141:39" pos:end="3141:40"><name pos:start="3141:39" pos:end="3141:40">dc</name></expr></argument>, <argument pos:start="3141:43" pos:end="3141:46"><expr pos:start="3141:43" pos:end="3141:46"><name pos:start="3141:43" pos:end="3141:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3143:21" pos:end="3143:53"><expr pos:start="3143:21" pos:end="3143:52"><name pos:start="3143:21" pos:end="3143:28">cpu_src1</name> <operator pos:start="3143:30" pos:end="3143:30">=</operator> <call pos:start="3143:32" pos:end="3143:52"><name pos:start="3143:32" pos:end="3143:43">gen_load_gpr</name><argument_list pos:start="3143:44" pos:end="3143:52">(<argument pos:start="3143:45" pos:end="3143:46"><expr pos:start="3143:45" pos:end="3143:46"><name pos:start="3143:45" pos:end="3143:46">dc</name></expr></argument>, <argument pos:start="3143:49" pos:end="3143:51"><expr pos:start="3143:49" pos:end="3143:51"><name pos:start="3143:49" pos:end="3143:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3145:21" pos:end="3145:53"><expr pos:start="3145:21" pos:end="3145:52"><name pos:start="3145:21" pos:end="3145:28">cpu_src2</name> <operator pos:start="3145:30" pos:end="3145:30">=</operator> <call pos:start="3145:32" pos:end="3145:52"><name pos:start="3145:32" pos:end="3145:43">gen_load_gpr</name><argument_list pos:start="3145:44" pos:end="3145:52">(<argument pos:start="3145:45" pos:end="3145:46"><expr pos:start="3145:45" pos:end="3145:46"><name pos:start="3145:45" pos:end="3145:46">dc</name></expr></argument>, <argument pos:start="3145:49" pos:end="3145:51"><expr pos:start="3145:49" pos:end="3145:51"><name pos:start="3145:49" pos:end="3145:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3147:21" pos:end="3147:71"><expr pos:start="3147:21" pos:end="3147:70"><call pos:start="3147:21" pos:end="3147:70"><name pos:start="3147:21" pos:end="3147:28">gen_edge</name><argument_list pos:start="3147:29" pos:end="3147:70">(<argument pos:start="3147:30" pos:end="3147:31"><expr pos:start="3147:30" pos:end="3147:31"><name pos:start="3147:30" pos:end="3147:31">dc</name></expr></argument>, <argument pos:start="3147:34" pos:end="3147:40"><expr pos:start="3147:34" pos:end="3147:40"><name pos:start="3147:34" pos:end="3147:40">cpu_dst</name></expr></argument>, <argument pos:start="3147:43" pos:end="3147:50"><expr pos:start="3147:43" pos:end="3147:50"><name pos:start="3147:43" pos:end="3147:50">cpu_src1</name></expr></argument>, <argument pos:start="3147:53" pos:end="3147:60"><expr pos:start="3147:53" pos:end="3147:60"><name pos:start="3147:53" pos:end="3147:60">cpu_src2</name></expr></argument>, <argument pos:start="3147:63" pos:end="3147:63"><expr pos:start="3147:63" pos:end="3147:63"><literal type="number" pos:start="3147:63" pos:end="3147:63">8</literal></expr></argument>, <argument pos:start="3147:66" pos:end="3147:66"><expr pos:start="3147:66" pos:end="3147:66"><literal type="number" pos:start="3147:66" pos:end="3147:66">1</literal></expr></argument>, <argument pos:start="3147:69" pos:end="3147:69"><expr pos:start="3147:69" pos:end="3147:69"><literal type="number" pos:start="3147:69" pos:end="3147:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3149:21" pos:end="3149:51"><expr pos:start="3149:21" pos:end="3149:50"><call pos:start="3149:21" pos:end="3149:50"><name pos:start="3149:21" pos:end="3149:33">gen_store_gpr</name><argument_list pos:start="3149:34" pos:end="3149:50">(<argument pos:start="3149:35" pos:end="3149:36"><expr pos:start="3149:35" pos:end="3149:36"><name pos:start="3149:35" pos:end="3149:36">dc</name></expr></argument>, <argument pos:start="3149:39" pos:end="3149:40"><expr pos:start="3149:39" pos:end="3149:40"><name pos:start="3149:39" pos:end="3149:40">rd</name></expr></argument>, <argument pos:start="3149:43" pos:end="3149:49"><expr pos:start="3149:43" pos:end="3149:49"><name pos:start="3149:43" pos:end="3149:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3151:21" pos:end="3151:26">break;</break>

                <case pos:start="3153:17" pos:end="3153:27">case <expr pos:start="3153:22" pos:end="3153:26"><literal type="number" pos:start="3153:22" pos:end="3153:26">0x003</literal></expr>:</case> <comment type="block" pos:start="3153:29" pos:end="3153:48">/* VIS II edge8ln */</comment>

                    <expr_stmt pos:start="3155:21" pos:end="3155:48"><expr pos:start="3155:21" pos:end="3155:47"><call pos:start="3155:21" pos:end="3155:47"><name pos:start="3155:21" pos:end="3155:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3155:38" pos:end="3155:47">(<argument pos:start="3155:39" pos:end="3155:40"><expr pos:start="3155:39" pos:end="3155:40"><name pos:start="3155:39" pos:end="3155:40">dc</name></expr></argument>, <argument pos:start="3155:43" pos:end="3155:46"><expr pos:start="3155:43" pos:end="3155:46"><name pos:start="3155:43" pos:end="3155:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3157:21" pos:end="3157:53"><expr pos:start="3157:21" pos:end="3157:52"><name pos:start="3157:21" pos:end="3157:28">cpu_src1</name> <operator pos:start="3157:30" pos:end="3157:30">=</operator> <call pos:start="3157:32" pos:end="3157:52"><name pos:start="3157:32" pos:end="3157:43">gen_load_gpr</name><argument_list pos:start="3157:44" pos:end="3157:52">(<argument pos:start="3157:45" pos:end="3157:46"><expr pos:start="3157:45" pos:end="3157:46"><name pos:start="3157:45" pos:end="3157:46">dc</name></expr></argument>, <argument pos:start="3157:49" pos:end="3157:51"><expr pos:start="3157:49" pos:end="3157:51"><name pos:start="3157:49" pos:end="3157:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3159:21" pos:end="3159:53"><expr pos:start="3159:21" pos:end="3159:52"><name pos:start="3159:21" pos:end="3159:28">cpu_src2</name> <operator pos:start="3159:30" pos:end="3159:30">=</operator> <call pos:start="3159:32" pos:end="3159:52"><name pos:start="3159:32" pos:end="3159:43">gen_load_gpr</name><argument_list pos:start="3159:44" pos:end="3159:52">(<argument pos:start="3159:45" pos:end="3159:46"><expr pos:start="3159:45" pos:end="3159:46"><name pos:start="3159:45" pos:end="3159:46">dc</name></expr></argument>, <argument pos:start="3159:49" pos:end="3159:51"><expr pos:start="3159:49" pos:end="3159:51"><name pos:start="3159:49" pos:end="3159:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3161:21" pos:end="3161:71"><expr pos:start="3161:21" pos:end="3161:70"><call pos:start="3161:21" pos:end="3161:70"><name pos:start="3161:21" pos:end="3161:28">gen_edge</name><argument_list pos:start="3161:29" pos:end="3161:70">(<argument pos:start="3161:30" pos:end="3161:31"><expr pos:start="3161:30" pos:end="3161:31"><name pos:start="3161:30" pos:end="3161:31">dc</name></expr></argument>, <argument pos:start="3161:34" pos:end="3161:40"><expr pos:start="3161:34" pos:end="3161:40"><name pos:start="3161:34" pos:end="3161:40">cpu_dst</name></expr></argument>, <argument pos:start="3161:43" pos:end="3161:50"><expr pos:start="3161:43" pos:end="3161:50"><name pos:start="3161:43" pos:end="3161:50">cpu_src1</name></expr></argument>, <argument pos:start="3161:53" pos:end="3161:60"><expr pos:start="3161:53" pos:end="3161:60"><name pos:start="3161:53" pos:end="3161:60">cpu_src2</name></expr></argument>, <argument pos:start="3161:63" pos:end="3161:63"><expr pos:start="3161:63" pos:end="3161:63"><literal type="number" pos:start="3161:63" pos:end="3161:63">8</literal></expr></argument>, <argument pos:start="3161:66" pos:end="3161:66"><expr pos:start="3161:66" pos:end="3161:66"><literal type="number" pos:start="3161:66" pos:end="3161:66">0</literal></expr></argument>, <argument pos:start="3161:69" pos:end="3161:69"><expr pos:start="3161:69" pos:end="3161:69"><literal type="number" pos:start="3161:69" pos:end="3161:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3163:21" pos:end="3163:51"><expr pos:start="3163:21" pos:end="3163:50"><call pos:start="3163:21" pos:end="3163:50"><name pos:start="3163:21" pos:end="3163:33">gen_store_gpr</name><argument_list pos:start="3163:34" pos:end="3163:50">(<argument pos:start="3163:35" pos:end="3163:36"><expr pos:start="3163:35" pos:end="3163:36"><name pos:start="3163:35" pos:end="3163:36">dc</name></expr></argument>, <argument pos:start="3163:39" pos:end="3163:40"><expr pos:start="3163:39" pos:end="3163:40"><name pos:start="3163:39" pos:end="3163:40">rd</name></expr></argument>, <argument pos:start="3163:43" pos:end="3163:49"><expr pos:start="3163:43" pos:end="3163:49"><name pos:start="3163:43" pos:end="3163:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3165:21" pos:end="3165:26">break;</break>

                <case pos:start="3167:17" pos:end="3167:27">case <expr pos:start="3167:22" pos:end="3167:26"><literal type="number" pos:start="3167:22" pos:end="3167:26">0x004</literal></expr>:</case> <comment type="block" pos:start="3167:29" pos:end="3167:48">/* VIS I edge16cc */</comment>

                    <expr_stmt pos:start="3169:21" pos:end="3169:48"><expr pos:start="3169:21" pos:end="3169:47"><call pos:start="3169:21" pos:end="3169:47"><name pos:start="3169:21" pos:end="3169:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3169:38" pos:end="3169:47">(<argument pos:start="3169:39" pos:end="3169:40"><expr pos:start="3169:39" pos:end="3169:40"><name pos:start="3169:39" pos:end="3169:40">dc</name></expr></argument>, <argument pos:start="3169:43" pos:end="3169:46"><expr pos:start="3169:43" pos:end="3169:46"><name pos:start="3169:43" pos:end="3169:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3171:21" pos:end="3171:53"><expr pos:start="3171:21" pos:end="3171:52"><name pos:start="3171:21" pos:end="3171:28">cpu_src1</name> <operator pos:start="3171:30" pos:end="3171:30">=</operator> <call pos:start="3171:32" pos:end="3171:52"><name pos:start="3171:32" pos:end="3171:43">gen_load_gpr</name><argument_list pos:start="3171:44" pos:end="3171:52">(<argument pos:start="3171:45" pos:end="3171:46"><expr pos:start="3171:45" pos:end="3171:46"><name pos:start="3171:45" pos:end="3171:46">dc</name></expr></argument>, <argument pos:start="3171:49" pos:end="3171:51"><expr pos:start="3171:49" pos:end="3171:51"><name pos:start="3171:49" pos:end="3171:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3173:21" pos:end="3173:53"><expr pos:start="3173:21" pos:end="3173:52"><name pos:start="3173:21" pos:end="3173:28">cpu_src2</name> <operator pos:start="3173:30" pos:end="3173:30">=</operator> <call pos:start="3173:32" pos:end="3173:52"><name pos:start="3173:32" pos:end="3173:43">gen_load_gpr</name><argument_list pos:start="3173:44" pos:end="3173:52">(<argument pos:start="3173:45" pos:end="3173:46"><expr pos:start="3173:45" pos:end="3173:46"><name pos:start="3173:45" pos:end="3173:46">dc</name></expr></argument>, <argument pos:start="3173:49" pos:end="3173:51"><expr pos:start="3173:49" pos:end="3173:51"><name pos:start="3173:49" pos:end="3173:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3175:21" pos:end="3175:72"><expr pos:start="3175:21" pos:end="3175:71"><call pos:start="3175:21" pos:end="3175:71"><name pos:start="3175:21" pos:end="3175:28">gen_edge</name><argument_list pos:start="3175:29" pos:end="3175:71">(<argument pos:start="3175:30" pos:end="3175:31"><expr pos:start="3175:30" pos:end="3175:31"><name pos:start="3175:30" pos:end="3175:31">dc</name></expr></argument>, <argument pos:start="3175:34" pos:end="3175:40"><expr pos:start="3175:34" pos:end="3175:40"><name pos:start="3175:34" pos:end="3175:40">cpu_dst</name></expr></argument>, <argument pos:start="3175:43" pos:end="3175:50"><expr pos:start="3175:43" pos:end="3175:50"><name pos:start="3175:43" pos:end="3175:50">cpu_src1</name></expr></argument>, <argument pos:start="3175:53" pos:end="3175:60"><expr pos:start="3175:53" pos:end="3175:60"><name pos:start="3175:53" pos:end="3175:60">cpu_src2</name></expr></argument>, <argument pos:start="3175:63" pos:end="3175:64"><expr pos:start="3175:63" pos:end="3175:64"><literal type="number" pos:start="3175:63" pos:end="3175:64">16</literal></expr></argument>, <argument pos:start="3175:67" pos:end="3175:67"><expr pos:start="3175:67" pos:end="3175:67"><literal type="number" pos:start="3175:67" pos:end="3175:67">1</literal></expr></argument>, <argument pos:start="3175:70" pos:end="3175:70"><expr pos:start="3175:70" pos:end="3175:70"><literal type="number" pos:start="3175:70" pos:end="3175:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3177:21" pos:end="3177:51"><expr pos:start="3177:21" pos:end="3177:50"><call pos:start="3177:21" pos:end="3177:50"><name pos:start="3177:21" pos:end="3177:33">gen_store_gpr</name><argument_list pos:start="3177:34" pos:end="3177:50">(<argument pos:start="3177:35" pos:end="3177:36"><expr pos:start="3177:35" pos:end="3177:36"><name pos:start="3177:35" pos:end="3177:36">dc</name></expr></argument>, <argument pos:start="3177:39" pos:end="3177:40"><expr pos:start="3177:39" pos:end="3177:40"><name pos:start="3177:39" pos:end="3177:40">rd</name></expr></argument>, <argument pos:start="3177:43" pos:end="3177:49"><expr pos:start="3177:43" pos:end="3177:49"><name pos:start="3177:43" pos:end="3177:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3179:21" pos:end="3179:26">break;</break>

                <case pos:start="3181:17" pos:end="3181:27">case <expr pos:start="3181:22" pos:end="3181:26"><literal type="number" pos:start="3181:22" pos:end="3181:26">0x005</literal></expr>:</case> <comment type="block" pos:start="3181:29" pos:end="3181:48">/* VIS II edge16n */</comment>

                    <expr_stmt pos:start="3183:21" pos:end="3183:48"><expr pos:start="3183:21" pos:end="3183:47"><call pos:start="3183:21" pos:end="3183:47"><name pos:start="3183:21" pos:end="3183:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3183:38" pos:end="3183:47">(<argument pos:start="3183:39" pos:end="3183:40"><expr pos:start="3183:39" pos:end="3183:40"><name pos:start="3183:39" pos:end="3183:40">dc</name></expr></argument>, <argument pos:start="3183:43" pos:end="3183:46"><expr pos:start="3183:43" pos:end="3183:46"><name pos:start="3183:43" pos:end="3183:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3185:21" pos:end="3185:53"><expr pos:start="3185:21" pos:end="3185:52"><name pos:start="3185:21" pos:end="3185:28">cpu_src1</name> <operator pos:start="3185:30" pos:end="3185:30">=</operator> <call pos:start="3185:32" pos:end="3185:52"><name pos:start="3185:32" pos:end="3185:43">gen_load_gpr</name><argument_list pos:start="3185:44" pos:end="3185:52">(<argument pos:start="3185:45" pos:end="3185:46"><expr pos:start="3185:45" pos:end="3185:46"><name pos:start="3185:45" pos:end="3185:46">dc</name></expr></argument>, <argument pos:start="3185:49" pos:end="3185:51"><expr pos:start="3185:49" pos:end="3185:51"><name pos:start="3185:49" pos:end="3185:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3187:21" pos:end="3187:53"><expr pos:start="3187:21" pos:end="3187:52"><name pos:start="3187:21" pos:end="3187:28">cpu_src2</name> <operator pos:start="3187:30" pos:end="3187:30">=</operator> <call pos:start="3187:32" pos:end="3187:52"><name pos:start="3187:32" pos:end="3187:43">gen_load_gpr</name><argument_list pos:start="3187:44" pos:end="3187:52">(<argument pos:start="3187:45" pos:end="3187:46"><expr pos:start="3187:45" pos:end="3187:46"><name pos:start="3187:45" pos:end="3187:46">dc</name></expr></argument>, <argument pos:start="3187:49" pos:end="3187:51"><expr pos:start="3187:49" pos:end="3187:51"><name pos:start="3187:49" pos:end="3187:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3189:21" pos:end="3189:72"><expr pos:start="3189:21" pos:end="3189:71"><call pos:start="3189:21" pos:end="3189:71"><name pos:start="3189:21" pos:end="3189:28">gen_edge</name><argument_list pos:start="3189:29" pos:end="3189:71">(<argument pos:start="3189:30" pos:end="3189:31"><expr pos:start="3189:30" pos:end="3189:31"><name pos:start="3189:30" pos:end="3189:31">dc</name></expr></argument>, <argument pos:start="3189:34" pos:end="3189:40"><expr pos:start="3189:34" pos:end="3189:40"><name pos:start="3189:34" pos:end="3189:40">cpu_dst</name></expr></argument>, <argument pos:start="3189:43" pos:end="3189:50"><expr pos:start="3189:43" pos:end="3189:50"><name pos:start="3189:43" pos:end="3189:50">cpu_src1</name></expr></argument>, <argument pos:start="3189:53" pos:end="3189:60"><expr pos:start="3189:53" pos:end="3189:60"><name pos:start="3189:53" pos:end="3189:60">cpu_src2</name></expr></argument>, <argument pos:start="3189:63" pos:end="3189:64"><expr pos:start="3189:63" pos:end="3189:64"><literal type="number" pos:start="3189:63" pos:end="3189:64">16</literal></expr></argument>, <argument pos:start="3189:67" pos:end="3189:67"><expr pos:start="3189:67" pos:end="3189:67"><literal type="number" pos:start="3189:67" pos:end="3189:67">0</literal></expr></argument>, <argument pos:start="3189:70" pos:end="3189:70"><expr pos:start="3189:70" pos:end="3189:70"><literal type="number" pos:start="3189:70" pos:end="3189:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3191:21" pos:end="3191:51"><expr pos:start="3191:21" pos:end="3191:50"><call pos:start="3191:21" pos:end="3191:50"><name pos:start="3191:21" pos:end="3191:33">gen_store_gpr</name><argument_list pos:start="3191:34" pos:end="3191:50">(<argument pos:start="3191:35" pos:end="3191:36"><expr pos:start="3191:35" pos:end="3191:36"><name pos:start="3191:35" pos:end="3191:36">dc</name></expr></argument>, <argument pos:start="3191:39" pos:end="3191:40"><expr pos:start="3191:39" pos:end="3191:40"><name pos:start="3191:39" pos:end="3191:40">rd</name></expr></argument>, <argument pos:start="3191:43" pos:end="3191:49"><expr pos:start="3191:43" pos:end="3191:49"><name pos:start="3191:43" pos:end="3191:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3193:21" pos:end="3193:26">break;</break>

                <case pos:start="3195:17" pos:end="3195:27">case <expr pos:start="3195:22" pos:end="3195:26"><literal type="number" pos:start="3195:22" pos:end="3195:26">0x006</literal></expr>:</case> <comment type="block" pos:start="3195:29" pos:end="3195:49">/* VIS I edge16lcc */</comment>

                    <expr_stmt pos:start="3197:21" pos:end="3197:48"><expr pos:start="3197:21" pos:end="3197:47"><call pos:start="3197:21" pos:end="3197:47"><name pos:start="3197:21" pos:end="3197:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3197:38" pos:end="3197:47">(<argument pos:start="3197:39" pos:end="3197:40"><expr pos:start="3197:39" pos:end="3197:40"><name pos:start="3197:39" pos:end="3197:40">dc</name></expr></argument>, <argument pos:start="3197:43" pos:end="3197:46"><expr pos:start="3197:43" pos:end="3197:46"><name pos:start="3197:43" pos:end="3197:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3199:21" pos:end="3199:53"><expr pos:start="3199:21" pos:end="3199:52"><name pos:start="3199:21" pos:end="3199:28">cpu_src1</name> <operator pos:start="3199:30" pos:end="3199:30">=</operator> <call pos:start="3199:32" pos:end="3199:52"><name pos:start="3199:32" pos:end="3199:43">gen_load_gpr</name><argument_list pos:start="3199:44" pos:end="3199:52">(<argument pos:start="3199:45" pos:end="3199:46"><expr pos:start="3199:45" pos:end="3199:46"><name pos:start="3199:45" pos:end="3199:46">dc</name></expr></argument>, <argument pos:start="3199:49" pos:end="3199:51"><expr pos:start="3199:49" pos:end="3199:51"><name pos:start="3199:49" pos:end="3199:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3201:21" pos:end="3201:53"><expr pos:start="3201:21" pos:end="3201:52"><name pos:start="3201:21" pos:end="3201:28">cpu_src2</name> <operator pos:start="3201:30" pos:end="3201:30">=</operator> <call pos:start="3201:32" pos:end="3201:52"><name pos:start="3201:32" pos:end="3201:43">gen_load_gpr</name><argument_list pos:start="3201:44" pos:end="3201:52">(<argument pos:start="3201:45" pos:end="3201:46"><expr pos:start="3201:45" pos:end="3201:46"><name pos:start="3201:45" pos:end="3201:46">dc</name></expr></argument>, <argument pos:start="3201:49" pos:end="3201:51"><expr pos:start="3201:49" pos:end="3201:51"><name pos:start="3201:49" pos:end="3201:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3203:21" pos:end="3203:72"><expr pos:start="3203:21" pos:end="3203:71"><call pos:start="3203:21" pos:end="3203:71"><name pos:start="3203:21" pos:end="3203:28">gen_edge</name><argument_list pos:start="3203:29" pos:end="3203:71">(<argument pos:start="3203:30" pos:end="3203:31"><expr pos:start="3203:30" pos:end="3203:31"><name pos:start="3203:30" pos:end="3203:31">dc</name></expr></argument>, <argument pos:start="3203:34" pos:end="3203:40"><expr pos:start="3203:34" pos:end="3203:40"><name pos:start="3203:34" pos:end="3203:40">cpu_dst</name></expr></argument>, <argument pos:start="3203:43" pos:end="3203:50"><expr pos:start="3203:43" pos:end="3203:50"><name pos:start="3203:43" pos:end="3203:50">cpu_src1</name></expr></argument>, <argument pos:start="3203:53" pos:end="3203:60"><expr pos:start="3203:53" pos:end="3203:60"><name pos:start="3203:53" pos:end="3203:60">cpu_src2</name></expr></argument>, <argument pos:start="3203:63" pos:end="3203:64"><expr pos:start="3203:63" pos:end="3203:64"><literal type="number" pos:start="3203:63" pos:end="3203:64">16</literal></expr></argument>, <argument pos:start="3203:67" pos:end="3203:67"><expr pos:start="3203:67" pos:end="3203:67"><literal type="number" pos:start="3203:67" pos:end="3203:67">1</literal></expr></argument>, <argument pos:start="3203:70" pos:end="3203:70"><expr pos:start="3203:70" pos:end="3203:70"><literal type="number" pos:start="3203:70" pos:end="3203:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3205:21" pos:end="3205:51"><expr pos:start="3205:21" pos:end="3205:50"><call pos:start="3205:21" pos:end="3205:50"><name pos:start="3205:21" pos:end="3205:33">gen_store_gpr</name><argument_list pos:start="3205:34" pos:end="3205:50">(<argument pos:start="3205:35" pos:end="3205:36"><expr pos:start="3205:35" pos:end="3205:36"><name pos:start="3205:35" pos:end="3205:36">dc</name></expr></argument>, <argument pos:start="3205:39" pos:end="3205:40"><expr pos:start="3205:39" pos:end="3205:40"><name pos:start="3205:39" pos:end="3205:40">rd</name></expr></argument>, <argument pos:start="3205:43" pos:end="3205:49"><expr pos:start="3205:43" pos:end="3205:49"><name pos:start="3205:43" pos:end="3205:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3207:21" pos:end="3207:26">break;</break>

                <case pos:start="3209:17" pos:end="3209:27">case <expr pos:start="3209:22" pos:end="3209:26"><literal type="number" pos:start="3209:22" pos:end="3209:26">0x007</literal></expr>:</case> <comment type="block" pos:start="3209:29" pos:end="3209:49">/* VIS II edge16ln */</comment>

                    <expr_stmt pos:start="3211:21" pos:end="3211:48"><expr pos:start="3211:21" pos:end="3211:47"><call pos:start="3211:21" pos:end="3211:47"><name pos:start="3211:21" pos:end="3211:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3211:38" pos:end="3211:47">(<argument pos:start="3211:39" pos:end="3211:40"><expr pos:start="3211:39" pos:end="3211:40"><name pos:start="3211:39" pos:end="3211:40">dc</name></expr></argument>, <argument pos:start="3211:43" pos:end="3211:46"><expr pos:start="3211:43" pos:end="3211:46"><name pos:start="3211:43" pos:end="3211:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3213:21" pos:end="3213:53"><expr pos:start="3213:21" pos:end="3213:52"><name pos:start="3213:21" pos:end="3213:28">cpu_src1</name> <operator pos:start="3213:30" pos:end="3213:30">=</operator> <call pos:start="3213:32" pos:end="3213:52"><name pos:start="3213:32" pos:end="3213:43">gen_load_gpr</name><argument_list pos:start="3213:44" pos:end="3213:52">(<argument pos:start="3213:45" pos:end="3213:46"><expr pos:start="3213:45" pos:end="3213:46"><name pos:start="3213:45" pos:end="3213:46">dc</name></expr></argument>, <argument pos:start="3213:49" pos:end="3213:51"><expr pos:start="3213:49" pos:end="3213:51"><name pos:start="3213:49" pos:end="3213:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3215:21" pos:end="3215:53"><expr pos:start="3215:21" pos:end="3215:52"><name pos:start="3215:21" pos:end="3215:28">cpu_src2</name> <operator pos:start="3215:30" pos:end="3215:30">=</operator> <call pos:start="3215:32" pos:end="3215:52"><name pos:start="3215:32" pos:end="3215:43">gen_load_gpr</name><argument_list pos:start="3215:44" pos:end="3215:52">(<argument pos:start="3215:45" pos:end="3215:46"><expr pos:start="3215:45" pos:end="3215:46"><name pos:start="3215:45" pos:end="3215:46">dc</name></expr></argument>, <argument pos:start="3215:49" pos:end="3215:51"><expr pos:start="3215:49" pos:end="3215:51"><name pos:start="3215:49" pos:end="3215:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3217:21" pos:end="3217:72"><expr pos:start="3217:21" pos:end="3217:71"><call pos:start="3217:21" pos:end="3217:71"><name pos:start="3217:21" pos:end="3217:28">gen_edge</name><argument_list pos:start="3217:29" pos:end="3217:71">(<argument pos:start="3217:30" pos:end="3217:31"><expr pos:start="3217:30" pos:end="3217:31"><name pos:start="3217:30" pos:end="3217:31">dc</name></expr></argument>, <argument pos:start="3217:34" pos:end="3217:40"><expr pos:start="3217:34" pos:end="3217:40"><name pos:start="3217:34" pos:end="3217:40">cpu_dst</name></expr></argument>, <argument pos:start="3217:43" pos:end="3217:50"><expr pos:start="3217:43" pos:end="3217:50"><name pos:start="3217:43" pos:end="3217:50">cpu_src1</name></expr></argument>, <argument pos:start="3217:53" pos:end="3217:60"><expr pos:start="3217:53" pos:end="3217:60"><name pos:start="3217:53" pos:end="3217:60">cpu_src2</name></expr></argument>, <argument pos:start="3217:63" pos:end="3217:64"><expr pos:start="3217:63" pos:end="3217:64"><literal type="number" pos:start="3217:63" pos:end="3217:64">16</literal></expr></argument>, <argument pos:start="3217:67" pos:end="3217:67"><expr pos:start="3217:67" pos:end="3217:67"><literal type="number" pos:start="3217:67" pos:end="3217:67">0</literal></expr></argument>, <argument pos:start="3217:70" pos:end="3217:70"><expr pos:start="3217:70" pos:end="3217:70"><literal type="number" pos:start="3217:70" pos:end="3217:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3219:21" pos:end="3219:51"><expr pos:start="3219:21" pos:end="3219:50"><call pos:start="3219:21" pos:end="3219:50"><name pos:start="3219:21" pos:end="3219:33">gen_store_gpr</name><argument_list pos:start="3219:34" pos:end="3219:50">(<argument pos:start="3219:35" pos:end="3219:36"><expr pos:start="3219:35" pos:end="3219:36"><name pos:start="3219:35" pos:end="3219:36">dc</name></expr></argument>, <argument pos:start="3219:39" pos:end="3219:40"><expr pos:start="3219:39" pos:end="3219:40"><name pos:start="3219:39" pos:end="3219:40">rd</name></expr></argument>, <argument pos:start="3219:43" pos:end="3219:49"><expr pos:start="3219:43" pos:end="3219:49"><name pos:start="3219:43" pos:end="3219:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3221:21" pos:end="3221:26">break;</break>

                <case pos:start="3223:17" pos:end="3223:27">case <expr pos:start="3223:22" pos:end="3223:26"><literal type="number" pos:start="3223:22" pos:end="3223:26">0x008</literal></expr>:</case> <comment type="block" pos:start="3223:29" pos:end="3223:48">/* VIS I edge32cc */</comment>

                    <expr_stmt pos:start="3225:21" pos:end="3225:48"><expr pos:start="3225:21" pos:end="3225:47"><call pos:start="3225:21" pos:end="3225:47"><name pos:start="3225:21" pos:end="3225:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3225:38" pos:end="3225:47">(<argument pos:start="3225:39" pos:end="3225:40"><expr pos:start="3225:39" pos:end="3225:40"><name pos:start="3225:39" pos:end="3225:40">dc</name></expr></argument>, <argument pos:start="3225:43" pos:end="3225:46"><expr pos:start="3225:43" pos:end="3225:46"><name pos:start="3225:43" pos:end="3225:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3227:21" pos:end="3227:53"><expr pos:start="3227:21" pos:end="3227:52"><name pos:start="3227:21" pos:end="3227:28">cpu_src1</name> <operator pos:start="3227:30" pos:end="3227:30">=</operator> <call pos:start="3227:32" pos:end="3227:52"><name pos:start="3227:32" pos:end="3227:43">gen_load_gpr</name><argument_list pos:start="3227:44" pos:end="3227:52">(<argument pos:start="3227:45" pos:end="3227:46"><expr pos:start="3227:45" pos:end="3227:46"><name pos:start="3227:45" pos:end="3227:46">dc</name></expr></argument>, <argument pos:start="3227:49" pos:end="3227:51"><expr pos:start="3227:49" pos:end="3227:51"><name pos:start="3227:49" pos:end="3227:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3229:21" pos:end="3229:53"><expr pos:start="3229:21" pos:end="3229:52"><name pos:start="3229:21" pos:end="3229:28">cpu_src2</name> <operator pos:start="3229:30" pos:end="3229:30">=</operator> <call pos:start="3229:32" pos:end="3229:52"><name pos:start="3229:32" pos:end="3229:43">gen_load_gpr</name><argument_list pos:start="3229:44" pos:end="3229:52">(<argument pos:start="3229:45" pos:end="3229:46"><expr pos:start="3229:45" pos:end="3229:46"><name pos:start="3229:45" pos:end="3229:46">dc</name></expr></argument>, <argument pos:start="3229:49" pos:end="3229:51"><expr pos:start="3229:49" pos:end="3229:51"><name pos:start="3229:49" pos:end="3229:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3231:21" pos:end="3231:72"><expr pos:start="3231:21" pos:end="3231:71"><call pos:start="3231:21" pos:end="3231:71"><name pos:start="3231:21" pos:end="3231:28">gen_edge</name><argument_list pos:start="3231:29" pos:end="3231:71">(<argument pos:start="3231:30" pos:end="3231:31"><expr pos:start="3231:30" pos:end="3231:31"><name pos:start="3231:30" pos:end="3231:31">dc</name></expr></argument>, <argument pos:start="3231:34" pos:end="3231:40"><expr pos:start="3231:34" pos:end="3231:40"><name pos:start="3231:34" pos:end="3231:40">cpu_dst</name></expr></argument>, <argument pos:start="3231:43" pos:end="3231:50"><expr pos:start="3231:43" pos:end="3231:50"><name pos:start="3231:43" pos:end="3231:50">cpu_src1</name></expr></argument>, <argument pos:start="3231:53" pos:end="3231:60"><expr pos:start="3231:53" pos:end="3231:60"><name pos:start="3231:53" pos:end="3231:60">cpu_src2</name></expr></argument>, <argument pos:start="3231:63" pos:end="3231:64"><expr pos:start="3231:63" pos:end="3231:64"><literal type="number" pos:start="3231:63" pos:end="3231:64">32</literal></expr></argument>, <argument pos:start="3231:67" pos:end="3231:67"><expr pos:start="3231:67" pos:end="3231:67"><literal type="number" pos:start="3231:67" pos:end="3231:67">1</literal></expr></argument>, <argument pos:start="3231:70" pos:end="3231:70"><expr pos:start="3231:70" pos:end="3231:70"><literal type="number" pos:start="3231:70" pos:end="3231:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3233:21" pos:end="3233:51"><expr pos:start="3233:21" pos:end="3233:50"><call pos:start="3233:21" pos:end="3233:50"><name pos:start="3233:21" pos:end="3233:33">gen_store_gpr</name><argument_list pos:start="3233:34" pos:end="3233:50">(<argument pos:start="3233:35" pos:end="3233:36"><expr pos:start="3233:35" pos:end="3233:36"><name pos:start="3233:35" pos:end="3233:36">dc</name></expr></argument>, <argument pos:start="3233:39" pos:end="3233:40"><expr pos:start="3233:39" pos:end="3233:40"><name pos:start="3233:39" pos:end="3233:40">rd</name></expr></argument>, <argument pos:start="3233:43" pos:end="3233:49"><expr pos:start="3233:43" pos:end="3233:49"><name pos:start="3233:43" pos:end="3233:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3235:21" pos:end="3235:26">break;</break>

                <case pos:start="3237:17" pos:end="3237:27">case <expr pos:start="3237:22" pos:end="3237:26"><literal type="number" pos:start="3237:22" pos:end="3237:26">0x009</literal></expr>:</case> <comment type="block" pos:start="3237:29" pos:end="3237:48">/* VIS II edge32n */</comment>

                    <expr_stmt pos:start="3239:21" pos:end="3239:48"><expr pos:start="3239:21" pos:end="3239:47"><call pos:start="3239:21" pos:end="3239:47"><name pos:start="3239:21" pos:end="3239:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3239:38" pos:end="3239:47">(<argument pos:start="3239:39" pos:end="3239:40"><expr pos:start="3239:39" pos:end="3239:40"><name pos:start="3239:39" pos:end="3239:40">dc</name></expr></argument>, <argument pos:start="3239:43" pos:end="3239:46"><expr pos:start="3239:43" pos:end="3239:46"><name pos:start="3239:43" pos:end="3239:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3241:21" pos:end="3241:53"><expr pos:start="3241:21" pos:end="3241:52"><name pos:start="3241:21" pos:end="3241:28">cpu_src1</name> <operator pos:start="3241:30" pos:end="3241:30">=</operator> <call pos:start="3241:32" pos:end="3241:52"><name pos:start="3241:32" pos:end="3241:43">gen_load_gpr</name><argument_list pos:start="3241:44" pos:end="3241:52">(<argument pos:start="3241:45" pos:end="3241:46"><expr pos:start="3241:45" pos:end="3241:46"><name pos:start="3241:45" pos:end="3241:46">dc</name></expr></argument>, <argument pos:start="3241:49" pos:end="3241:51"><expr pos:start="3241:49" pos:end="3241:51"><name pos:start="3241:49" pos:end="3241:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3243:21" pos:end="3243:53"><expr pos:start="3243:21" pos:end="3243:52"><name pos:start="3243:21" pos:end="3243:28">cpu_src2</name> <operator pos:start="3243:30" pos:end="3243:30">=</operator> <call pos:start="3243:32" pos:end="3243:52"><name pos:start="3243:32" pos:end="3243:43">gen_load_gpr</name><argument_list pos:start="3243:44" pos:end="3243:52">(<argument pos:start="3243:45" pos:end="3243:46"><expr pos:start="3243:45" pos:end="3243:46"><name pos:start="3243:45" pos:end="3243:46">dc</name></expr></argument>, <argument pos:start="3243:49" pos:end="3243:51"><expr pos:start="3243:49" pos:end="3243:51"><name pos:start="3243:49" pos:end="3243:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3245:21" pos:end="3245:72"><expr pos:start="3245:21" pos:end="3245:71"><call pos:start="3245:21" pos:end="3245:71"><name pos:start="3245:21" pos:end="3245:28">gen_edge</name><argument_list pos:start="3245:29" pos:end="3245:71">(<argument pos:start="3245:30" pos:end="3245:31"><expr pos:start="3245:30" pos:end="3245:31"><name pos:start="3245:30" pos:end="3245:31">dc</name></expr></argument>, <argument pos:start="3245:34" pos:end="3245:40"><expr pos:start="3245:34" pos:end="3245:40"><name pos:start="3245:34" pos:end="3245:40">cpu_dst</name></expr></argument>, <argument pos:start="3245:43" pos:end="3245:50"><expr pos:start="3245:43" pos:end="3245:50"><name pos:start="3245:43" pos:end="3245:50">cpu_src1</name></expr></argument>, <argument pos:start="3245:53" pos:end="3245:60"><expr pos:start="3245:53" pos:end="3245:60"><name pos:start="3245:53" pos:end="3245:60">cpu_src2</name></expr></argument>, <argument pos:start="3245:63" pos:end="3245:64"><expr pos:start="3245:63" pos:end="3245:64"><literal type="number" pos:start="3245:63" pos:end="3245:64">32</literal></expr></argument>, <argument pos:start="3245:67" pos:end="3245:67"><expr pos:start="3245:67" pos:end="3245:67"><literal type="number" pos:start="3245:67" pos:end="3245:67">0</literal></expr></argument>, <argument pos:start="3245:70" pos:end="3245:70"><expr pos:start="3245:70" pos:end="3245:70"><literal type="number" pos:start="3245:70" pos:end="3245:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3247:21" pos:end="3247:51"><expr pos:start="3247:21" pos:end="3247:50"><call pos:start="3247:21" pos:end="3247:50"><name pos:start="3247:21" pos:end="3247:33">gen_store_gpr</name><argument_list pos:start="3247:34" pos:end="3247:50">(<argument pos:start="3247:35" pos:end="3247:36"><expr pos:start="3247:35" pos:end="3247:36"><name pos:start="3247:35" pos:end="3247:36">dc</name></expr></argument>, <argument pos:start="3247:39" pos:end="3247:40"><expr pos:start="3247:39" pos:end="3247:40"><name pos:start="3247:39" pos:end="3247:40">rd</name></expr></argument>, <argument pos:start="3247:43" pos:end="3247:49"><expr pos:start="3247:43" pos:end="3247:49"><name pos:start="3247:43" pos:end="3247:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3249:21" pos:end="3249:26">break;</break>

                <case pos:start="3251:17" pos:end="3251:27">case <expr pos:start="3251:22" pos:end="3251:26"><literal type="number" pos:start="3251:22" pos:end="3251:26">0x00a</literal></expr>:</case> <comment type="block" pos:start="3251:29" pos:end="3251:49">/* VIS I edge32lcc */</comment>

                    <expr_stmt pos:start="3253:21" pos:end="3253:48"><expr pos:start="3253:21" pos:end="3253:47"><call pos:start="3253:21" pos:end="3253:47"><name pos:start="3253:21" pos:end="3253:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3253:38" pos:end="3253:47">(<argument pos:start="3253:39" pos:end="3253:40"><expr pos:start="3253:39" pos:end="3253:40"><name pos:start="3253:39" pos:end="3253:40">dc</name></expr></argument>, <argument pos:start="3253:43" pos:end="3253:46"><expr pos:start="3253:43" pos:end="3253:46"><name pos:start="3253:43" pos:end="3253:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3255:21" pos:end="3255:53"><expr pos:start="3255:21" pos:end="3255:52"><name pos:start="3255:21" pos:end="3255:28">cpu_src1</name> <operator pos:start="3255:30" pos:end="3255:30">=</operator> <call pos:start="3255:32" pos:end="3255:52"><name pos:start="3255:32" pos:end="3255:43">gen_load_gpr</name><argument_list pos:start="3255:44" pos:end="3255:52">(<argument pos:start="3255:45" pos:end="3255:46"><expr pos:start="3255:45" pos:end="3255:46"><name pos:start="3255:45" pos:end="3255:46">dc</name></expr></argument>, <argument pos:start="3255:49" pos:end="3255:51"><expr pos:start="3255:49" pos:end="3255:51"><name pos:start="3255:49" pos:end="3255:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3257:21" pos:end="3257:53"><expr pos:start="3257:21" pos:end="3257:52"><name pos:start="3257:21" pos:end="3257:28">cpu_src2</name> <operator pos:start="3257:30" pos:end="3257:30">=</operator> <call pos:start="3257:32" pos:end="3257:52"><name pos:start="3257:32" pos:end="3257:43">gen_load_gpr</name><argument_list pos:start="3257:44" pos:end="3257:52">(<argument pos:start="3257:45" pos:end="3257:46"><expr pos:start="3257:45" pos:end="3257:46"><name pos:start="3257:45" pos:end="3257:46">dc</name></expr></argument>, <argument pos:start="3257:49" pos:end="3257:51"><expr pos:start="3257:49" pos:end="3257:51"><name pos:start="3257:49" pos:end="3257:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3259:21" pos:end="3259:72"><expr pos:start="3259:21" pos:end="3259:71"><call pos:start="3259:21" pos:end="3259:71"><name pos:start="3259:21" pos:end="3259:28">gen_edge</name><argument_list pos:start="3259:29" pos:end="3259:71">(<argument pos:start="3259:30" pos:end="3259:31"><expr pos:start="3259:30" pos:end="3259:31"><name pos:start="3259:30" pos:end="3259:31">dc</name></expr></argument>, <argument pos:start="3259:34" pos:end="3259:40"><expr pos:start="3259:34" pos:end="3259:40"><name pos:start="3259:34" pos:end="3259:40">cpu_dst</name></expr></argument>, <argument pos:start="3259:43" pos:end="3259:50"><expr pos:start="3259:43" pos:end="3259:50"><name pos:start="3259:43" pos:end="3259:50">cpu_src1</name></expr></argument>, <argument pos:start="3259:53" pos:end="3259:60"><expr pos:start="3259:53" pos:end="3259:60"><name pos:start="3259:53" pos:end="3259:60">cpu_src2</name></expr></argument>, <argument pos:start="3259:63" pos:end="3259:64"><expr pos:start="3259:63" pos:end="3259:64"><literal type="number" pos:start="3259:63" pos:end="3259:64">32</literal></expr></argument>, <argument pos:start="3259:67" pos:end="3259:67"><expr pos:start="3259:67" pos:end="3259:67"><literal type="number" pos:start="3259:67" pos:end="3259:67">1</literal></expr></argument>, <argument pos:start="3259:70" pos:end="3259:70"><expr pos:start="3259:70" pos:end="3259:70"><literal type="number" pos:start="3259:70" pos:end="3259:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3261:21" pos:end="3261:51"><expr pos:start="3261:21" pos:end="3261:50"><call pos:start="3261:21" pos:end="3261:50"><name pos:start="3261:21" pos:end="3261:33">gen_store_gpr</name><argument_list pos:start="3261:34" pos:end="3261:50">(<argument pos:start="3261:35" pos:end="3261:36"><expr pos:start="3261:35" pos:end="3261:36"><name pos:start="3261:35" pos:end="3261:36">dc</name></expr></argument>, <argument pos:start="3261:39" pos:end="3261:40"><expr pos:start="3261:39" pos:end="3261:40"><name pos:start="3261:39" pos:end="3261:40">rd</name></expr></argument>, <argument pos:start="3261:43" pos:end="3261:49"><expr pos:start="3261:43" pos:end="3261:49"><name pos:start="3261:43" pos:end="3261:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3263:21" pos:end="3263:26">break;</break>

                <case pos:start="3265:17" pos:end="3265:27">case <expr pos:start="3265:22" pos:end="3265:26"><literal type="number" pos:start="3265:22" pos:end="3265:26">0x00b</literal></expr>:</case> <comment type="block" pos:start="3265:29" pos:end="3265:49">/* VIS II edge32ln */</comment>

                    <expr_stmt pos:start="3267:21" pos:end="3267:48"><expr pos:start="3267:21" pos:end="3267:47"><call pos:start="3267:21" pos:end="3267:47"><name pos:start="3267:21" pos:end="3267:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3267:38" pos:end="3267:47">(<argument pos:start="3267:39" pos:end="3267:40"><expr pos:start="3267:39" pos:end="3267:40"><name pos:start="3267:39" pos:end="3267:40">dc</name></expr></argument>, <argument pos:start="3267:43" pos:end="3267:46"><expr pos:start="3267:43" pos:end="3267:46"><name pos:start="3267:43" pos:end="3267:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3269:21" pos:end="3269:53"><expr pos:start="3269:21" pos:end="3269:52"><name pos:start="3269:21" pos:end="3269:28">cpu_src1</name> <operator pos:start="3269:30" pos:end="3269:30">=</operator> <call pos:start="3269:32" pos:end="3269:52"><name pos:start="3269:32" pos:end="3269:43">gen_load_gpr</name><argument_list pos:start="3269:44" pos:end="3269:52">(<argument pos:start="3269:45" pos:end="3269:46"><expr pos:start="3269:45" pos:end="3269:46"><name pos:start="3269:45" pos:end="3269:46">dc</name></expr></argument>, <argument pos:start="3269:49" pos:end="3269:51"><expr pos:start="3269:49" pos:end="3269:51"><name pos:start="3269:49" pos:end="3269:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3271:21" pos:end="3271:53"><expr pos:start="3271:21" pos:end="3271:52"><name pos:start="3271:21" pos:end="3271:28">cpu_src2</name> <operator pos:start="3271:30" pos:end="3271:30">=</operator> <call pos:start="3271:32" pos:end="3271:52"><name pos:start="3271:32" pos:end="3271:43">gen_load_gpr</name><argument_list pos:start="3271:44" pos:end="3271:52">(<argument pos:start="3271:45" pos:end="3271:46"><expr pos:start="3271:45" pos:end="3271:46"><name pos:start="3271:45" pos:end="3271:46">dc</name></expr></argument>, <argument pos:start="3271:49" pos:end="3271:51"><expr pos:start="3271:49" pos:end="3271:51"><name pos:start="3271:49" pos:end="3271:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3273:21" pos:end="3273:72"><expr pos:start="3273:21" pos:end="3273:71"><call pos:start="3273:21" pos:end="3273:71"><name pos:start="3273:21" pos:end="3273:28">gen_edge</name><argument_list pos:start="3273:29" pos:end="3273:71">(<argument pos:start="3273:30" pos:end="3273:31"><expr pos:start="3273:30" pos:end="3273:31"><name pos:start="3273:30" pos:end="3273:31">dc</name></expr></argument>, <argument pos:start="3273:34" pos:end="3273:40"><expr pos:start="3273:34" pos:end="3273:40"><name pos:start="3273:34" pos:end="3273:40">cpu_dst</name></expr></argument>, <argument pos:start="3273:43" pos:end="3273:50"><expr pos:start="3273:43" pos:end="3273:50"><name pos:start="3273:43" pos:end="3273:50">cpu_src1</name></expr></argument>, <argument pos:start="3273:53" pos:end="3273:60"><expr pos:start="3273:53" pos:end="3273:60"><name pos:start="3273:53" pos:end="3273:60">cpu_src2</name></expr></argument>, <argument pos:start="3273:63" pos:end="3273:64"><expr pos:start="3273:63" pos:end="3273:64"><literal type="number" pos:start="3273:63" pos:end="3273:64">32</literal></expr></argument>, <argument pos:start="3273:67" pos:end="3273:67"><expr pos:start="3273:67" pos:end="3273:67"><literal type="number" pos:start="3273:67" pos:end="3273:67">0</literal></expr></argument>, <argument pos:start="3273:70" pos:end="3273:70"><expr pos:start="3273:70" pos:end="3273:70"><literal type="number" pos:start="3273:70" pos:end="3273:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3275:21" pos:end="3275:51"><expr pos:start="3275:21" pos:end="3275:50"><call pos:start="3275:21" pos:end="3275:50"><name pos:start="3275:21" pos:end="3275:33">gen_store_gpr</name><argument_list pos:start="3275:34" pos:end="3275:50">(<argument pos:start="3275:35" pos:end="3275:36"><expr pos:start="3275:35" pos:end="3275:36"><name pos:start="3275:35" pos:end="3275:36">dc</name></expr></argument>, <argument pos:start="3275:39" pos:end="3275:40"><expr pos:start="3275:39" pos:end="3275:40"><name pos:start="3275:39" pos:end="3275:40">rd</name></expr></argument>, <argument pos:start="3275:43" pos:end="3275:49"><expr pos:start="3275:43" pos:end="3275:49"><name pos:start="3275:43" pos:end="3275:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3277:21" pos:end="3277:26">break;</break>

                <case pos:start="3279:17" pos:end="3279:27">case <expr pos:start="3279:22" pos:end="3279:26"><literal type="number" pos:start="3279:22" pos:end="3279:26">0x010</literal></expr>:</case> <comment type="block" pos:start="3279:29" pos:end="3279:46">/* VIS I array8 */</comment>

                    <expr_stmt pos:start="3281:21" pos:end="3281:48"><expr pos:start="3281:21" pos:end="3281:47"><call pos:start="3281:21" pos:end="3281:47"><name pos:start="3281:21" pos:end="3281:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3281:38" pos:end="3281:47">(<argument pos:start="3281:39" pos:end="3281:40"><expr pos:start="3281:39" pos:end="3281:40"><name pos:start="3281:39" pos:end="3281:40">dc</name></expr></argument>, <argument pos:start="3281:43" pos:end="3281:46"><expr pos:start="3281:43" pos:end="3281:46"><name pos:start="3281:43" pos:end="3281:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3283:21" pos:end="3283:53"><expr pos:start="3283:21" pos:end="3283:52"><name pos:start="3283:21" pos:end="3283:28">cpu_src1</name> <operator pos:start="3283:30" pos:end="3283:30">=</operator> <call pos:start="3283:32" pos:end="3283:52"><name pos:start="3283:32" pos:end="3283:43">gen_load_gpr</name><argument_list pos:start="3283:44" pos:end="3283:52">(<argument pos:start="3283:45" pos:end="3283:46"><expr pos:start="3283:45" pos:end="3283:46"><name pos:start="3283:45" pos:end="3283:46">dc</name></expr></argument>, <argument pos:start="3283:49" pos:end="3283:51"><expr pos:start="3283:49" pos:end="3283:51"><name pos:start="3283:49" pos:end="3283:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3285:21" pos:end="3285:53"><expr pos:start="3285:21" pos:end="3285:52"><name pos:start="3285:21" pos:end="3285:28">cpu_src2</name> <operator pos:start="3285:30" pos:end="3285:30">=</operator> <call pos:start="3285:32" pos:end="3285:52"><name pos:start="3285:32" pos:end="3285:43">gen_load_gpr</name><argument_list pos:start="3285:44" pos:end="3285:52">(<argument pos:start="3285:45" pos:end="3285:46"><expr pos:start="3285:45" pos:end="3285:46"><name pos:start="3285:45" pos:end="3285:46">dc</name></expr></argument>, <argument pos:start="3285:49" pos:end="3285:51"><expr pos:start="3285:49" pos:end="3285:51"><name pos:start="3285:49" pos:end="3285:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3287:21" pos:end="3287:67"><expr pos:start="3287:21" pos:end="3287:66"><call pos:start="3287:21" pos:end="3287:66"><name pos:start="3287:21" pos:end="3287:37">gen_helper_array8</name><argument_list pos:start="3287:38" pos:end="3287:66">(<argument pos:start="3287:39" pos:end="3287:45"><expr pos:start="3287:39" pos:end="3287:45"><name pos:start="3287:39" pos:end="3287:45">cpu_dst</name></expr></argument>, <argument pos:start="3287:48" pos:end="3287:55"><expr pos:start="3287:48" pos:end="3287:55"><name pos:start="3287:48" pos:end="3287:55">cpu_src1</name></expr></argument>, <argument pos:start="3287:58" pos:end="3287:65"><expr pos:start="3287:58" pos:end="3287:65"><name pos:start="3287:58" pos:end="3287:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3289:21" pos:end="3289:51"><expr pos:start="3289:21" pos:end="3289:50"><call pos:start="3289:21" pos:end="3289:50"><name pos:start="3289:21" pos:end="3289:33">gen_store_gpr</name><argument_list pos:start="3289:34" pos:end="3289:50">(<argument pos:start="3289:35" pos:end="3289:36"><expr pos:start="3289:35" pos:end="3289:36"><name pos:start="3289:35" pos:end="3289:36">dc</name></expr></argument>, <argument pos:start="3289:39" pos:end="3289:40"><expr pos:start="3289:39" pos:end="3289:40"><name pos:start="3289:39" pos:end="3289:40">rd</name></expr></argument>, <argument pos:start="3289:43" pos:end="3289:49"><expr pos:start="3289:43" pos:end="3289:49"><name pos:start="3289:43" pos:end="3289:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3291:21" pos:end="3291:26">break;</break>

                <case pos:start="3293:17" pos:end="3293:27">case <expr pos:start="3293:22" pos:end="3293:26"><literal type="number" pos:start="3293:22" pos:end="3293:26">0x012</literal></expr>:</case> <comment type="block" pos:start="3293:29" pos:end="3293:47">/* VIS I array16 */</comment>

                    <expr_stmt pos:start="3295:21" pos:end="3295:48"><expr pos:start="3295:21" pos:end="3295:47"><call pos:start="3295:21" pos:end="3295:47"><name pos:start="3295:21" pos:end="3295:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3295:38" pos:end="3295:47">(<argument pos:start="3295:39" pos:end="3295:40"><expr pos:start="3295:39" pos:end="3295:40"><name pos:start="3295:39" pos:end="3295:40">dc</name></expr></argument>, <argument pos:start="3295:43" pos:end="3295:46"><expr pos:start="3295:43" pos:end="3295:46"><name pos:start="3295:43" pos:end="3295:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3297:21" pos:end="3297:53"><expr pos:start="3297:21" pos:end="3297:52"><name pos:start="3297:21" pos:end="3297:28">cpu_src1</name> <operator pos:start="3297:30" pos:end="3297:30">=</operator> <call pos:start="3297:32" pos:end="3297:52"><name pos:start="3297:32" pos:end="3297:43">gen_load_gpr</name><argument_list pos:start="3297:44" pos:end="3297:52">(<argument pos:start="3297:45" pos:end="3297:46"><expr pos:start="3297:45" pos:end="3297:46"><name pos:start="3297:45" pos:end="3297:46">dc</name></expr></argument>, <argument pos:start="3297:49" pos:end="3297:51"><expr pos:start="3297:49" pos:end="3297:51"><name pos:start="3297:49" pos:end="3297:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3299:21" pos:end="3299:53"><expr pos:start="3299:21" pos:end="3299:52"><name pos:start="3299:21" pos:end="3299:28">cpu_src2</name> <operator pos:start="3299:30" pos:end="3299:30">=</operator> <call pos:start="3299:32" pos:end="3299:52"><name pos:start="3299:32" pos:end="3299:43">gen_load_gpr</name><argument_list pos:start="3299:44" pos:end="3299:52">(<argument pos:start="3299:45" pos:end="3299:46"><expr pos:start="3299:45" pos:end="3299:46"><name pos:start="3299:45" pos:end="3299:46">dc</name></expr></argument>, <argument pos:start="3299:49" pos:end="3299:51"><expr pos:start="3299:49" pos:end="3299:51"><name pos:start="3299:49" pos:end="3299:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3301:21" pos:end="3301:67"><expr pos:start="3301:21" pos:end="3301:66"><call pos:start="3301:21" pos:end="3301:66"><name pos:start="3301:21" pos:end="3301:37">gen_helper_array8</name><argument_list pos:start="3301:38" pos:end="3301:66">(<argument pos:start="3301:39" pos:end="3301:45"><expr pos:start="3301:39" pos:end="3301:45"><name pos:start="3301:39" pos:end="3301:45">cpu_dst</name></expr></argument>, <argument pos:start="3301:48" pos:end="3301:55"><expr pos:start="3301:48" pos:end="3301:55"><name pos:start="3301:48" pos:end="3301:55">cpu_src1</name></expr></argument>, <argument pos:start="3301:58" pos:end="3301:65"><expr pos:start="3301:58" pos:end="3301:65"><name pos:start="3301:58" pos:end="3301:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3303:21" pos:end="3303:58"><expr pos:start="3303:21" pos:end="3303:57"><call pos:start="3303:21" pos:end="3303:57"><name pos:start="3303:21" pos:end="3303:36">tcg_gen_shli_i64</name><argument_list pos:start="3303:37" pos:end="3303:57">(<argument pos:start="3303:38" pos:end="3303:44"><expr pos:start="3303:38" pos:end="3303:44"><name pos:start="3303:38" pos:end="3303:44">cpu_dst</name></expr></argument>, <argument pos:start="3303:47" pos:end="3303:53"><expr pos:start="3303:47" pos:end="3303:53"><name pos:start="3303:47" pos:end="3303:53">cpu_dst</name></expr></argument>, <argument pos:start="3303:56" pos:end="3303:56"><expr pos:start="3303:56" pos:end="3303:56"><literal type="number" pos:start="3303:56" pos:end="3303:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3305:21" pos:end="3305:51"><expr pos:start="3305:21" pos:end="3305:50"><call pos:start="3305:21" pos:end="3305:50"><name pos:start="3305:21" pos:end="3305:33">gen_store_gpr</name><argument_list pos:start="3305:34" pos:end="3305:50">(<argument pos:start="3305:35" pos:end="3305:36"><expr pos:start="3305:35" pos:end="3305:36"><name pos:start="3305:35" pos:end="3305:36">dc</name></expr></argument>, <argument pos:start="3305:39" pos:end="3305:40"><expr pos:start="3305:39" pos:end="3305:40"><name pos:start="3305:39" pos:end="3305:40">rd</name></expr></argument>, <argument pos:start="3305:43" pos:end="3305:49"><expr pos:start="3305:43" pos:end="3305:49"><name pos:start="3305:43" pos:end="3305:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3307:21" pos:end="3307:26">break;</break>

                <case pos:start="3309:17" pos:end="3309:27">case <expr pos:start="3309:22" pos:end="3309:26"><literal type="number" pos:start="3309:22" pos:end="3309:26">0x014</literal></expr>:</case> <comment type="block" pos:start="3309:29" pos:end="3309:47">/* VIS I array32 */</comment>

                    <expr_stmt pos:start="3311:21" pos:end="3311:48"><expr pos:start="3311:21" pos:end="3311:47"><call pos:start="3311:21" pos:end="3311:47"><name pos:start="3311:21" pos:end="3311:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3311:38" pos:end="3311:47">(<argument pos:start="3311:39" pos:end="3311:40"><expr pos:start="3311:39" pos:end="3311:40"><name pos:start="3311:39" pos:end="3311:40">dc</name></expr></argument>, <argument pos:start="3311:43" pos:end="3311:46"><expr pos:start="3311:43" pos:end="3311:46"><name pos:start="3311:43" pos:end="3311:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3313:21" pos:end="3313:53"><expr pos:start="3313:21" pos:end="3313:52"><name pos:start="3313:21" pos:end="3313:28">cpu_src1</name> <operator pos:start="3313:30" pos:end="3313:30">=</operator> <call pos:start="3313:32" pos:end="3313:52"><name pos:start="3313:32" pos:end="3313:43">gen_load_gpr</name><argument_list pos:start="3313:44" pos:end="3313:52">(<argument pos:start="3313:45" pos:end="3313:46"><expr pos:start="3313:45" pos:end="3313:46"><name pos:start="3313:45" pos:end="3313:46">dc</name></expr></argument>, <argument pos:start="3313:49" pos:end="3313:51"><expr pos:start="3313:49" pos:end="3313:51"><name pos:start="3313:49" pos:end="3313:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3315:21" pos:end="3315:53"><expr pos:start="3315:21" pos:end="3315:52"><name pos:start="3315:21" pos:end="3315:28">cpu_src2</name> <operator pos:start="3315:30" pos:end="3315:30">=</operator> <call pos:start="3315:32" pos:end="3315:52"><name pos:start="3315:32" pos:end="3315:43">gen_load_gpr</name><argument_list pos:start="3315:44" pos:end="3315:52">(<argument pos:start="3315:45" pos:end="3315:46"><expr pos:start="3315:45" pos:end="3315:46"><name pos:start="3315:45" pos:end="3315:46">dc</name></expr></argument>, <argument pos:start="3315:49" pos:end="3315:51"><expr pos:start="3315:49" pos:end="3315:51"><name pos:start="3315:49" pos:end="3315:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3317:21" pos:end="3317:67"><expr pos:start="3317:21" pos:end="3317:66"><call pos:start="3317:21" pos:end="3317:66"><name pos:start="3317:21" pos:end="3317:37">gen_helper_array8</name><argument_list pos:start="3317:38" pos:end="3317:66">(<argument pos:start="3317:39" pos:end="3317:45"><expr pos:start="3317:39" pos:end="3317:45"><name pos:start="3317:39" pos:end="3317:45">cpu_dst</name></expr></argument>, <argument pos:start="3317:48" pos:end="3317:55"><expr pos:start="3317:48" pos:end="3317:55"><name pos:start="3317:48" pos:end="3317:55">cpu_src1</name></expr></argument>, <argument pos:start="3317:58" pos:end="3317:65"><expr pos:start="3317:58" pos:end="3317:65"><name pos:start="3317:58" pos:end="3317:65">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3319:21" pos:end="3319:58"><expr pos:start="3319:21" pos:end="3319:57"><call pos:start="3319:21" pos:end="3319:57"><name pos:start="3319:21" pos:end="3319:36">tcg_gen_shli_i64</name><argument_list pos:start="3319:37" pos:end="3319:57">(<argument pos:start="3319:38" pos:end="3319:44"><expr pos:start="3319:38" pos:end="3319:44"><name pos:start="3319:38" pos:end="3319:44">cpu_dst</name></expr></argument>, <argument pos:start="3319:47" pos:end="3319:53"><expr pos:start="3319:47" pos:end="3319:53"><name pos:start="3319:47" pos:end="3319:53">cpu_dst</name></expr></argument>, <argument pos:start="3319:56" pos:end="3319:56"><expr pos:start="3319:56" pos:end="3319:56"><literal type="number" pos:start="3319:56" pos:end="3319:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3321:21" pos:end="3321:51"><expr pos:start="3321:21" pos:end="3321:50"><call pos:start="3321:21" pos:end="3321:50"><name pos:start="3321:21" pos:end="3321:33">gen_store_gpr</name><argument_list pos:start="3321:34" pos:end="3321:50">(<argument pos:start="3321:35" pos:end="3321:36"><expr pos:start="3321:35" pos:end="3321:36"><name pos:start="3321:35" pos:end="3321:36">dc</name></expr></argument>, <argument pos:start="3321:39" pos:end="3321:40"><expr pos:start="3321:39" pos:end="3321:40"><name pos:start="3321:39" pos:end="3321:40">rd</name></expr></argument>, <argument pos:start="3321:43" pos:end="3321:49"><expr pos:start="3321:43" pos:end="3321:49"><name pos:start="3321:43" pos:end="3321:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3323:21" pos:end="3323:26">break;</break>

                <case pos:start="3325:17" pos:end="3325:27">case <expr pos:start="3325:22" pos:end="3325:26"><literal type="number" pos:start="3325:22" pos:end="3325:26">0x018</literal></expr>:</case> <comment type="block" pos:start="3325:29" pos:end="3325:49">/* VIS I alignaddr */</comment>

                    <expr_stmt pos:start="3327:21" pos:end="3327:48"><expr pos:start="3327:21" pos:end="3327:47"><call pos:start="3327:21" pos:end="3327:47"><name pos:start="3327:21" pos:end="3327:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3327:38" pos:end="3327:47">(<argument pos:start="3327:39" pos:end="3327:40"><expr pos:start="3327:39" pos:end="3327:40"><name pos:start="3327:39" pos:end="3327:40">dc</name></expr></argument>, <argument pos:start="3327:43" pos:end="3327:46"><expr pos:start="3327:43" pos:end="3327:46"><name pos:start="3327:43" pos:end="3327:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3329:21" pos:end="3329:53"><expr pos:start="3329:21" pos:end="3329:52"><name pos:start="3329:21" pos:end="3329:28">cpu_src1</name> <operator pos:start="3329:30" pos:end="3329:30">=</operator> <call pos:start="3329:32" pos:end="3329:52"><name pos:start="3329:32" pos:end="3329:43">gen_load_gpr</name><argument_list pos:start="3329:44" pos:end="3329:52">(<argument pos:start="3329:45" pos:end="3329:46"><expr pos:start="3329:45" pos:end="3329:46"><name pos:start="3329:45" pos:end="3329:46">dc</name></expr></argument>, <argument pos:start="3329:49" pos:end="3329:51"><expr pos:start="3329:49" pos:end="3329:51"><name pos:start="3329:49" pos:end="3329:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3331:21" pos:end="3331:53"><expr pos:start="3331:21" pos:end="3331:52"><name pos:start="3331:21" pos:end="3331:28">cpu_src2</name> <operator pos:start="3331:30" pos:end="3331:30">=</operator> <call pos:start="3331:32" pos:end="3331:52"><name pos:start="3331:32" pos:end="3331:43">gen_load_gpr</name><argument_list pos:start="3331:44" pos:end="3331:52">(<argument pos:start="3331:45" pos:end="3331:46"><expr pos:start="3331:45" pos:end="3331:46"><name pos:start="3331:45" pos:end="3331:46">dc</name></expr></argument>, <argument pos:start="3331:49" pos:end="3331:51"><expr pos:start="3331:49" pos:end="3331:51"><name pos:start="3331:49" pos:end="3331:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3333:21" pos:end="3333:66"><expr pos:start="3333:21" pos:end="3333:65"><call pos:start="3333:21" pos:end="3333:65"><name pos:start="3333:21" pos:end="3333:33">gen_alignaddr</name><argument_list pos:start="3333:34" pos:end="3333:65">(<argument pos:start="3333:35" pos:end="3333:41"><expr pos:start="3333:35" pos:end="3333:41"><name pos:start="3333:35" pos:end="3333:41">cpu_dst</name></expr></argument>, <argument pos:start="3333:44" pos:end="3333:51"><expr pos:start="3333:44" pos:end="3333:51"><name pos:start="3333:44" pos:end="3333:51">cpu_src1</name></expr></argument>, <argument pos:start="3333:54" pos:end="3333:61"><expr pos:start="3333:54" pos:end="3333:61"><name pos:start="3333:54" pos:end="3333:61">cpu_src2</name></expr></argument>, <argument pos:start="3333:64" pos:end="3333:64"><expr pos:start="3333:64" pos:end="3333:64"><literal type="number" pos:start="3333:64" pos:end="3333:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3335:21" pos:end="3335:51"><expr pos:start="3335:21" pos:end="3335:50"><call pos:start="3335:21" pos:end="3335:50"><name pos:start="3335:21" pos:end="3335:33">gen_store_gpr</name><argument_list pos:start="3335:34" pos:end="3335:50">(<argument pos:start="3335:35" pos:end="3335:36"><expr pos:start="3335:35" pos:end="3335:36"><name pos:start="3335:35" pos:end="3335:36">dc</name></expr></argument>, <argument pos:start="3335:39" pos:end="3335:40"><expr pos:start="3335:39" pos:end="3335:40"><name pos:start="3335:39" pos:end="3335:40">rd</name></expr></argument>, <argument pos:start="3335:43" pos:end="3335:49"><expr pos:start="3335:43" pos:end="3335:49"><name pos:start="3335:43" pos:end="3335:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3337:21" pos:end="3337:26">break;</break>

                <case pos:start="3339:17" pos:end="3339:27">case <expr pos:start="3339:22" pos:end="3339:26"><literal type="number" pos:start="3339:22" pos:end="3339:26">0x01a</literal></expr>:</case> <comment type="block" pos:start="3339:29" pos:end="3339:50">/* VIS I alignaddrl */</comment>

                    <expr_stmt pos:start="3341:21" pos:end="3341:48"><expr pos:start="3341:21" pos:end="3341:47"><call pos:start="3341:21" pos:end="3341:47"><name pos:start="3341:21" pos:end="3341:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3341:38" pos:end="3341:47">(<argument pos:start="3341:39" pos:end="3341:40"><expr pos:start="3341:39" pos:end="3341:40"><name pos:start="3341:39" pos:end="3341:40">dc</name></expr></argument>, <argument pos:start="3341:43" pos:end="3341:46"><expr pos:start="3341:43" pos:end="3341:46"><name pos:start="3341:43" pos:end="3341:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3343:21" pos:end="3343:53"><expr pos:start="3343:21" pos:end="3343:52"><name pos:start="3343:21" pos:end="3343:28">cpu_src1</name> <operator pos:start="3343:30" pos:end="3343:30">=</operator> <call pos:start="3343:32" pos:end="3343:52"><name pos:start="3343:32" pos:end="3343:43">gen_load_gpr</name><argument_list pos:start="3343:44" pos:end="3343:52">(<argument pos:start="3343:45" pos:end="3343:46"><expr pos:start="3343:45" pos:end="3343:46"><name pos:start="3343:45" pos:end="3343:46">dc</name></expr></argument>, <argument pos:start="3343:49" pos:end="3343:51"><expr pos:start="3343:49" pos:end="3343:51"><name pos:start="3343:49" pos:end="3343:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3345:21" pos:end="3345:53"><expr pos:start="3345:21" pos:end="3345:52"><name pos:start="3345:21" pos:end="3345:28">cpu_src2</name> <operator pos:start="3345:30" pos:end="3345:30">=</operator> <call pos:start="3345:32" pos:end="3345:52"><name pos:start="3345:32" pos:end="3345:43">gen_load_gpr</name><argument_list pos:start="3345:44" pos:end="3345:52">(<argument pos:start="3345:45" pos:end="3345:46"><expr pos:start="3345:45" pos:end="3345:46"><name pos:start="3345:45" pos:end="3345:46">dc</name></expr></argument>, <argument pos:start="3345:49" pos:end="3345:51"><expr pos:start="3345:49" pos:end="3345:51"><name pos:start="3345:49" pos:end="3345:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3347:21" pos:end="3347:66"><expr pos:start="3347:21" pos:end="3347:65"><call pos:start="3347:21" pos:end="3347:65"><name pos:start="3347:21" pos:end="3347:33">gen_alignaddr</name><argument_list pos:start="3347:34" pos:end="3347:65">(<argument pos:start="3347:35" pos:end="3347:41"><expr pos:start="3347:35" pos:end="3347:41"><name pos:start="3347:35" pos:end="3347:41">cpu_dst</name></expr></argument>, <argument pos:start="3347:44" pos:end="3347:51"><expr pos:start="3347:44" pos:end="3347:51"><name pos:start="3347:44" pos:end="3347:51">cpu_src1</name></expr></argument>, <argument pos:start="3347:54" pos:end="3347:61"><expr pos:start="3347:54" pos:end="3347:61"><name pos:start="3347:54" pos:end="3347:61">cpu_src2</name></expr></argument>, <argument pos:start="3347:64" pos:end="3347:64"><expr pos:start="3347:64" pos:end="3347:64"><literal type="number" pos:start="3347:64" pos:end="3347:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3349:21" pos:end="3349:51"><expr pos:start="3349:21" pos:end="3349:50"><call pos:start="3349:21" pos:end="3349:50"><name pos:start="3349:21" pos:end="3349:33">gen_store_gpr</name><argument_list pos:start="3349:34" pos:end="3349:50">(<argument pos:start="3349:35" pos:end="3349:36"><expr pos:start="3349:35" pos:end="3349:36"><name pos:start="3349:35" pos:end="3349:36">dc</name></expr></argument>, <argument pos:start="3349:39" pos:end="3349:40"><expr pos:start="3349:39" pos:end="3349:40"><name pos:start="3349:39" pos:end="3349:40">rd</name></expr></argument>, <argument pos:start="3349:43" pos:end="3349:49"><expr pos:start="3349:43" pos:end="3349:49"><name pos:start="3349:43" pos:end="3349:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3351:21" pos:end="3351:26">break;</break>

                <case pos:start="3353:17" pos:end="3353:27">case <expr pos:start="3353:22" pos:end="3353:26"><literal type="number" pos:start="3353:22" pos:end="3353:26">0x019</literal></expr>:</case> <comment type="block" pos:start="3353:29" pos:end="3353:46">/* VIS II bmask */</comment>

                    <expr_stmt pos:start="3355:21" pos:end="3355:48"><expr pos:start="3355:21" pos:end="3355:47"><call pos:start="3355:21" pos:end="3355:47"><name pos:start="3355:21" pos:end="3355:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3355:38" pos:end="3355:47">(<argument pos:start="3355:39" pos:end="3355:40"><expr pos:start="3355:39" pos:end="3355:40"><name pos:start="3355:39" pos:end="3355:40">dc</name></expr></argument>, <argument pos:start="3355:43" pos:end="3355:46"><expr pos:start="3355:43" pos:end="3355:46"><name pos:start="3355:43" pos:end="3355:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3357:21" pos:end="3357:53"><expr pos:start="3357:21" pos:end="3357:52"><name pos:start="3357:21" pos:end="3357:28">cpu_src1</name> <operator pos:start="3357:30" pos:end="3357:30">=</operator> <call pos:start="3357:32" pos:end="3357:52"><name pos:start="3357:32" pos:end="3357:43">gen_load_gpr</name><argument_list pos:start="3357:44" pos:end="3357:52">(<argument pos:start="3357:45" pos:end="3357:46"><expr pos:start="3357:45" pos:end="3357:46"><name pos:start="3357:45" pos:end="3357:46">dc</name></expr></argument>, <argument pos:start="3357:49" pos:end="3357:51"><expr pos:start="3357:49" pos:end="3357:51"><name pos:start="3357:49" pos:end="3357:51">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3359:21" pos:end="3359:53"><expr pos:start="3359:21" pos:end="3359:52"><name pos:start="3359:21" pos:end="3359:28">cpu_src2</name> <operator pos:start="3359:30" pos:end="3359:30">=</operator> <call pos:start="3359:32" pos:end="3359:52"><name pos:start="3359:32" pos:end="3359:43">gen_load_gpr</name><argument_list pos:start="3359:44" pos:end="3359:52">(<argument pos:start="3359:45" pos:end="3359:46"><expr pos:start="3359:45" pos:end="3359:46"><name pos:start="3359:45" pos:end="3359:46">dc</name></expr></argument>, <argument pos:start="3359:49" pos:end="3359:51"><expr pos:start="3359:49" pos:end="3359:51"><name pos:start="3359:49" pos:end="3359:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3361:21" pos:end="3361:64"><expr pos:start="3361:21" pos:end="3361:63"><call pos:start="3361:21" pos:end="3361:63"><name pos:start="3361:21" pos:end="3361:34">tcg_gen_add_tl</name><argument_list pos:start="3361:35" pos:end="3361:63">(<argument pos:start="3361:36" pos:end="3361:42"><expr pos:start="3361:36" pos:end="3361:42"><name pos:start="3361:36" pos:end="3361:42">cpu_dst</name></expr></argument>, <argument pos:start="3361:45" pos:end="3361:52"><expr pos:start="3361:45" pos:end="3361:52"><name pos:start="3361:45" pos:end="3361:52">cpu_src1</name></expr></argument>, <argument pos:start="3361:55" pos:end="3361:62"><expr pos:start="3361:55" pos:end="3361:62"><name pos:start="3361:55" pos:end="3361:62">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3363:21" pos:end="3363:74"><expr pos:start="3363:21" pos:end="3363:73"><call pos:start="3363:21" pos:end="3363:73"><name pos:start="3363:21" pos:end="3363:38">tcg_gen_deposit_tl</name><argument_list pos:start="3363:39" pos:end="3363:73">(<argument pos:start="3363:40" pos:end="3363:46"><expr pos:start="3363:40" pos:end="3363:46"><name pos:start="3363:40" pos:end="3363:46">cpu_gsr</name></expr></argument>, <argument pos:start="3363:49" pos:end="3363:55"><expr pos:start="3363:49" pos:end="3363:55"><name pos:start="3363:49" pos:end="3363:55">cpu_gsr</name></expr></argument>, <argument pos:start="3363:58" pos:end="3363:64"><expr pos:start="3363:58" pos:end="3363:64"><name pos:start="3363:58" pos:end="3363:64">cpu_dst</name></expr></argument>, <argument pos:start="3363:67" pos:end="3363:68"><expr pos:start="3363:67" pos:end="3363:68"><literal type="number" pos:start="3363:67" pos:end="3363:68">32</literal></expr></argument>, <argument pos:start="3363:71" pos:end="3363:72"><expr pos:start="3363:71" pos:end="3363:72"><literal type="number" pos:start="3363:71" pos:end="3363:72">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3365:21" pos:end="3365:51"><expr pos:start="3365:21" pos:end="3365:50"><call pos:start="3365:21" pos:end="3365:50"><name pos:start="3365:21" pos:end="3365:33">gen_store_gpr</name><argument_list pos:start="3365:34" pos:end="3365:50">(<argument pos:start="3365:35" pos:end="3365:36"><expr pos:start="3365:35" pos:end="3365:36"><name pos:start="3365:35" pos:end="3365:36">dc</name></expr></argument>, <argument pos:start="3365:39" pos:end="3365:40"><expr pos:start="3365:39" pos:end="3365:40"><name pos:start="3365:39" pos:end="3365:40">rd</name></expr></argument>, <argument pos:start="3365:43" pos:end="3365:49"><expr pos:start="3365:43" pos:end="3365:49"><name pos:start="3365:43" pos:end="3365:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3367:21" pos:end="3367:26">break;</break>

                <case pos:start="3369:17" pos:end="3369:27">case <expr pos:start="3369:22" pos:end="3369:26"><literal type="number" pos:start="3369:22" pos:end="3369:26">0x020</literal></expr>:</case> <comment type="block" pos:start="3369:29" pos:end="3369:48">/* VIS I fcmple16 */</comment>

                    <expr_stmt pos:start="3371:21" pos:end="3371:48"><expr pos:start="3371:21" pos:end="3371:47"><call pos:start="3371:21" pos:end="3371:47"><name pos:start="3371:21" pos:end="3371:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3371:38" pos:end="3371:47">(<argument pos:start="3371:39" pos:end="3371:40"><expr pos:start="3371:39" pos:end="3371:40"><name pos:start="3371:39" pos:end="3371:40">dc</name></expr></argument>, <argument pos:start="3371:43" pos:end="3371:46"><expr pos:start="3371:43" pos:end="3371:46"><name pos:start="3371:43" pos:end="3371:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3373:21" pos:end="3373:58"><expr pos:start="3373:21" pos:end="3373:57"><name pos:start="3373:21" pos:end="3373:31">cpu_src1_64</name> <operator pos:start="3373:33" pos:end="3373:33">=</operator> <call pos:start="3373:35" pos:end="3373:57"><name pos:start="3373:35" pos:end="3373:48">gen_load_fpr_D</name><argument_list pos:start="3373:49" pos:end="3373:57">(<argument pos:start="3373:50" pos:end="3373:51"><expr pos:start="3373:50" pos:end="3373:51"><name pos:start="3373:50" pos:end="3373:51">dc</name></expr></argument>, <argument pos:start="3373:54" pos:end="3373:56"><expr pos:start="3373:54" pos:end="3373:56"><name pos:start="3373:54" pos:end="3373:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3375:21" pos:end="3375:58"><expr pos:start="3375:21" pos:end="3375:57"><name pos:start="3375:21" pos:end="3375:31">cpu_src2_64</name> <operator pos:start="3375:33" pos:end="3375:33">=</operator> <call pos:start="3375:35" pos:end="3375:57"><name pos:start="3375:35" pos:end="3375:48">gen_load_fpr_D</name><argument_list pos:start="3375:49" pos:end="3375:57">(<argument pos:start="3375:50" pos:end="3375:51"><expr pos:start="3375:50" pos:end="3375:51"><name pos:start="3375:50" pos:end="3375:51">dc</name></expr></argument>, <argument pos:start="3375:54" pos:end="3375:56"><expr pos:start="3375:54" pos:end="3375:56"><name pos:start="3375:54" pos:end="3375:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3377:21" pos:end="3377:75"><expr pos:start="3377:21" pos:end="3377:74"><call pos:start="3377:21" pos:end="3377:74"><name pos:start="3377:21" pos:end="3377:39">gen_helper_fcmple16</name><argument_list pos:start="3377:40" pos:end="3377:74">(<argument pos:start="3377:41" pos:end="3377:47"><expr pos:start="3377:41" pos:end="3377:47"><name pos:start="3377:41" pos:end="3377:47">cpu_dst</name></expr></argument>, <argument pos:start="3377:50" pos:end="3377:60"><expr pos:start="3377:50" pos:end="3377:60"><name pos:start="3377:50" pos:end="3377:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3377:63" pos:end="3377:73"><expr pos:start="3377:63" pos:end="3377:73"><name pos:start="3377:63" pos:end="3377:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3379:21" pos:end="3379:51"><expr pos:start="3379:21" pos:end="3379:50"><call pos:start="3379:21" pos:end="3379:50"><name pos:start="3379:21" pos:end="3379:33">gen_store_gpr</name><argument_list pos:start="3379:34" pos:end="3379:50">(<argument pos:start="3379:35" pos:end="3379:36"><expr pos:start="3379:35" pos:end="3379:36"><name pos:start="3379:35" pos:end="3379:36">dc</name></expr></argument>, <argument pos:start="3379:39" pos:end="3379:40"><expr pos:start="3379:39" pos:end="3379:40"><name pos:start="3379:39" pos:end="3379:40">rd</name></expr></argument>, <argument pos:start="3379:43" pos:end="3379:49"><expr pos:start="3379:43" pos:end="3379:49"><name pos:start="3379:43" pos:end="3379:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3381:21" pos:end="3381:26">break;</break>

                <case pos:start="3383:17" pos:end="3383:27">case <expr pos:start="3383:22" pos:end="3383:26"><literal type="number" pos:start="3383:22" pos:end="3383:26">0x022</literal></expr>:</case> <comment type="block" pos:start="3383:29" pos:end="3383:48">/* VIS I fcmpne16 */</comment>

                    <expr_stmt pos:start="3385:21" pos:end="3385:48"><expr pos:start="3385:21" pos:end="3385:47"><call pos:start="3385:21" pos:end="3385:47"><name pos:start="3385:21" pos:end="3385:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3385:38" pos:end="3385:47">(<argument pos:start="3385:39" pos:end="3385:40"><expr pos:start="3385:39" pos:end="3385:40"><name pos:start="3385:39" pos:end="3385:40">dc</name></expr></argument>, <argument pos:start="3385:43" pos:end="3385:46"><expr pos:start="3385:43" pos:end="3385:46"><name pos:start="3385:43" pos:end="3385:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3387:21" pos:end="3387:58"><expr pos:start="3387:21" pos:end="3387:57"><name pos:start="3387:21" pos:end="3387:31">cpu_src1_64</name> <operator pos:start="3387:33" pos:end="3387:33">=</operator> <call pos:start="3387:35" pos:end="3387:57"><name pos:start="3387:35" pos:end="3387:48">gen_load_fpr_D</name><argument_list pos:start="3387:49" pos:end="3387:57">(<argument pos:start="3387:50" pos:end="3387:51"><expr pos:start="3387:50" pos:end="3387:51"><name pos:start="3387:50" pos:end="3387:51">dc</name></expr></argument>, <argument pos:start="3387:54" pos:end="3387:56"><expr pos:start="3387:54" pos:end="3387:56"><name pos:start="3387:54" pos:end="3387:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3389:21" pos:end="3389:58"><expr pos:start="3389:21" pos:end="3389:57"><name pos:start="3389:21" pos:end="3389:31">cpu_src2_64</name> <operator pos:start="3389:33" pos:end="3389:33">=</operator> <call pos:start="3389:35" pos:end="3389:57"><name pos:start="3389:35" pos:end="3389:48">gen_load_fpr_D</name><argument_list pos:start="3389:49" pos:end="3389:57">(<argument pos:start="3389:50" pos:end="3389:51"><expr pos:start="3389:50" pos:end="3389:51"><name pos:start="3389:50" pos:end="3389:51">dc</name></expr></argument>, <argument pos:start="3389:54" pos:end="3389:56"><expr pos:start="3389:54" pos:end="3389:56"><name pos:start="3389:54" pos:end="3389:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3391:21" pos:end="3391:75"><expr pos:start="3391:21" pos:end="3391:74"><call pos:start="3391:21" pos:end="3391:74"><name pos:start="3391:21" pos:end="3391:39">gen_helper_fcmpne16</name><argument_list pos:start="3391:40" pos:end="3391:74">(<argument pos:start="3391:41" pos:end="3391:47"><expr pos:start="3391:41" pos:end="3391:47"><name pos:start="3391:41" pos:end="3391:47">cpu_dst</name></expr></argument>, <argument pos:start="3391:50" pos:end="3391:60"><expr pos:start="3391:50" pos:end="3391:60"><name pos:start="3391:50" pos:end="3391:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3391:63" pos:end="3391:73"><expr pos:start="3391:63" pos:end="3391:73"><name pos:start="3391:63" pos:end="3391:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3393:21" pos:end="3393:51"><expr pos:start="3393:21" pos:end="3393:50"><call pos:start="3393:21" pos:end="3393:50"><name pos:start="3393:21" pos:end="3393:33">gen_store_gpr</name><argument_list pos:start="3393:34" pos:end="3393:50">(<argument pos:start="3393:35" pos:end="3393:36"><expr pos:start="3393:35" pos:end="3393:36"><name pos:start="3393:35" pos:end="3393:36">dc</name></expr></argument>, <argument pos:start="3393:39" pos:end="3393:40"><expr pos:start="3393:39" pos:end="3393:40"><name pos:start="3393:39" pos:end="3393:40">rd</name></expr></argument>, <argument pos:start="3393:43" pos:end="3393:49"><expr pos:start="3393:43" pos:end="3393:49"><name pos:start="3393:43" pos:end="3393:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3395:21" pos:end="3395:26">break;</break>

                <case pos:start="3397:17" pos:end="3397:27">case <expr pos:start="3397:22" pos:end="3397:26"><literal type="number" pos:start="3397:22" pos:end="3397:26">0x024</literal></expr>:</case> <comment type="block" pos:start="3397:29" pos:end="3397:48">/* VIS I fcmple32 */</comment>

                    <expr_stmt pos:start="3399:21" pos:end="3399:48"><expr pos:start="3399:21" pos:end="3399:47"><call pos:start="3399:21" pos:end="3399:47"><name pos:start="3399:21" pos:end="3399:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3399:38" pos:end="3399:47">(<argument pos:start="3399:39" pos:end="3399:40"><expr pos:start="3399:39" pos:end="3399:40"><name pos:start="3399:39" pos:end="3399:40">dc</name></expr></argument>, <argument pos:start="3399:43" pos:end="3399:46"><expr pos:start="3399:43" pos:end="3399:46"><name pos:start="3399:43" pos:end="3399:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3401:21" pos:end="3401:58"><expr pos:start="3401:21" pos:end="3401:57"><name pos:start="3401:21" pos:end="3401:31">cpu_src1_64</name> <operator pos:start="3401:33" pos:end="3401:33">=</operator> <call pos:start="3401:35" pos:end="3401:57"><name pos:start="3401:35" pos:end="3401:48">gen_load_fpr_D</name><argument_list pos:start="3401:49" pos:end="3401:57">(<argument pos:start="3401:50" pos:end="3401:51"><expr pos:start="3401:50" pos:end="3401:51"><name pos:start="3401:50" pos:end="3401:51">dc</name></expr></argument>, <argument pos:start="3401:54" pos:end="3401:56"><expr pos:start="3401:54" pos:end="3401:56"><name pos:start="3401:54" pos:end="3401:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3403:21" pos:end="3403:58"><expr pos:start="3403:21" pos:end="3403:57"><name pos:start="3403:21" pos:end="3403:31">cpu_src2_64</name> <operator pos:start="3403:33" pos:end="3403:33">=</operator> <call pos:start="3403:35" pos:end="3403:57"><name pos:start="3403:35" pos:end="3403:48">gen_load_fpr_D</name><argument_list pos:start="3403:49" pos:end="3403:57">(<argument pos:start="3403:50" pos:end="3403:51"><expr pos:start="3403:50" pos:end="3403:51"><name pos:start="3403:50" pos:end="3403:51">dc</name></expr></argument>, <argument pos:start="3403:54" pos:end="3403:56"><expr pos:start="3403:54" pos:end="3403:56"><name pos:start="3403:54" pos:end="3403:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3405:21" pos:end="3405:75"><expr pos:start="3405:21" pos:end="3405:74"><call pos:start="3405:21" pos:end="3405:74"><name pos:start="3405:21" pos:end="3405:39">gen_helper_fcmple32</name><argument_list pos:start="3405:40" pos:end="3405:74">(<argument pos:start="3405:41" pos:end="3405:47"><expr pos:start="3405:41" pos:end="3405:47"><name pos:start="3405:41" pos:end="3405:47">cpu_dst</name></expr></argument>, <argument pos:start="3405:50" pos:end="3405:60"><expr pos:start="3405:50" pos:end="3405:60"><name pos:start="3405:50" pos:end="3405:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3405:63" pos:end="3405:73"><expr pos:start="3405:63" pos:end="3405:73"><name pos:start="3405:63" pos:end="3405:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3407:21" pos:end="3407:51"><expr pos:start="3407:21" pos:end="3407:50"><call pos:start="3407:21" pos:end="3407:50"><name pos:start="3407:21" pos:end="3407:33">gen_store_gpr</name><argument_list pos:start="3407:34" pos:end="3407:50">(<argument pos:start="3407:35" pos:end="3407:36"><expr pos:start="3407:35" pos:end="3407:36"><name pos:start="3407:35" pos:end="3407:36">dc</name></expr></argument>, <argument pos:start="3407:39" pos:end="3407:40"><expr pos:start="3407:39" pos:end="3407:40"><name pos:start="3407:39" pos:end="3407:40">rd</name></expr></argument>, <argument pos:start="3407:43" pos:end="3407:49"><expr pos:start="3407:43" pos:end="3407:49"><name pos:start="3407:43" pos:end="3407:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3409:21" pos:end="3409:26">break;</break>

                <case pos:start="3411:17" pos:end="3411:27">case <expr pos:start="3411:22" pos:end="3411:26"><literal type="number" pos:start="3411:22" pos:end="3411:26">0x026</literal></expr>:</case> <comment type="block" pos:start="3411:29" pos:end="3411:48">/* VIS I fcmpne32 */</comment>

                    <expr_stmt pos:start="3413:21" pos:end="3413:48"><expr pos:start="3413:21" pos:end="3413:47"><call pos:start="3413:21" pos:end="3413:47"><name pos:start="3413:21" pos:end="3413:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3413:38" pos:end="3413:47">(<argument pos:start="3413:39" pos:end="3413:40"><expr pos:start="3413:39" pos:end="3413:40"><name pos:start="3413:39" pos:end="3413:40">dc</name></expr></argument>, <argument pos:start="3413:43" pos:end="3413:46"><expr pos:start="3413:43" pos:end="3413:46"><name pos:start="3413:43" pos:end="3413:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3415:21" pos:end="3415:58"><expr pos:start="3415:21" pos:end="3415:57"><name pos:start="3415:21" pos:end="3415:31">cpu_src1_64</name> <operator pos:start="3415:33" pos:end="3415:33">=</operator> <call pos:start="3415:35" pos:end="3415:57"><name pos:start="3415:35" pos:end="3415:48">gen_load_fpr_D</name><argument_list pos:start="3415:49" pos:end="3415:57">(<argument pos:start="3415:50" pos:end="3415:51"><expr pos:start="3415:50" pos:end="3415:51"><name pos:start="3415:50" pos:end="3415:51">dc</name></expr></argument>, <argument pos:start="3415:54" pos:end="3415:56"><expr pos:start="3415:54" pos:end="3415:56"><name pos:start="3415:54" pos:end="3415:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3417:21" pos:end="3417:58"><expr pos:start="3417:21" pos:end="3417:57"><name pos:start="3417:21" pos:end="3417:31">cpu_src2_64</name> <operator pos:start="3417:33" pos:end="3417:33">=</operator> <call pos:start="3417:35" pos:end="3417:57"><name pos:start="3417:35" pos:end="3417:48">gen_load_fpr_D</name><argument_list pos:start="3417:49" pos:end="3417:57">(<argument pos:start="3417:50" pos:end="3417:51"><expr pos:start="3417:50" pos:end="3417:51"><name pos:start="3417:50" pos:end="3417:51">dc</name></expr></argument>, <argument pos:start="3417:54" pos:end="3417:56"><expr pos:start="3417:54" pos:end="3417:56"><name pos:start="3417:54" pos:end="3417:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3419:21" pos:end="3419:75"><expr pos:start="3419:21" pos:end="3419:74"><call pos:start="3419:21" pos:end="3419:74"><name pos:start="3419:21" pos:end="3419:39">gen_helper_fcmpne32</name><argument_list pos:start="3419:40" pos:end="3419:74">(<argument pos:start="3419:41" pos:end="3419:47"><expr pos:start="3419:41" pos:end="3419:47"><name pos:start="3419:41" pos:end="3419:47">cpu_dst</name></expr></argument>, <argument pos:start="3419:50" pos:end="3419:60"><expr pos:start="3419:50" pos:end="3419:60"><name pos:start="3419:50" pos:end="3419:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3419:63" pos:end="3419:73"><expr pos:start="3419:63" pos:end="3419:73"><name pos:start="3419:63" pos:end="3419:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3421:21" pos:end="3421:51"><expr pos:start="3421:21" pos:end="3421:50"><call pos:start="3421:21" pos:end="3421:50"><name pos:start="3421:21" pos:end="3421:33">gen_store_gpr</name><argument_list pos:start="3421:34" pos:end="3421:50">(<argument pos:start="3421:35" pos:end="3421:36"><expr pos:start="3421:35" pos:end="3421:36"><name pos:start="3421:35" pos:end="3421:36">dc</name></expr></argument>, <argument pos:start="3421:39" pos:end="3421:40"><expr pos:start="3421:39" pos:end="3421:40"><name pos:start="3421:39" pos:end="3421:40">rd</name></expr></argument>, <argument pos:start="3421:43" pos:end="3421:49"><expr pos:start="3421:43" pos:end="3421:49"><name pos:start="3421:43" pos:end="3421:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3423:21" pos:end="3423:26">break;</break>

                <case pos:start="3425:17" pos:end="3425:27">case <expr pos:start="3425:22" pos:end="3425:26"><literal type="number" pos:start="3425:22" pos:end="3425:26">0x028</literal></expr>:</case> <comment type="block" pos:start="3425:29" pos:end="3425:48">/* VIS I fcmpgt16 */</comment>

                    <expr_stmt pos:start="3427:21" pos:end="3427:48"><expr pos:start="3427:21" pos:end="3427:47"><call pos:start="3427:21" pos:end="3427:47"><name pos:start="3427:21" pos:end="3427:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3427:38" pos:end="3427:47">(<argument pos:start="3427:39" pos:end="3427:40"><expr pos:start="3427:39" pos:end="3427:40"><name pos:start="3427:39" pos:end="3427:40">dc</name></expr></argument>, <argument pos:start="3427:43" pos:end="3427:46"><expr pos:start="3427:43" pos:end="3427:46"><name pos:start="3427:43" pos:end="3427:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3429:21" pos:end="3429:58"><expr pos:start="3429:21" pos:end="3429:57"><name pos:start="3429:21" pos:end="3429:31">cpu_src1_64</name> <operator pos:start="3429:33" pos:end="3429:33">=</operator> <call pos:start="3429:35" pos:end="3429:57"><name pos:start="3429:35" pos:end="3429:48">gen_load_fpr_D</name><argument_list pos:start="3429:49" pos:end="3429:57">(<argument pos:start="3429:50" pos:end="3429:51"><expr pos:start="3429:50" pos:end="3429:51"><name pos:start="3429:50" pos:end="3429:51">dc</name></expr></argument>, <argument pos:start="3429:54" pos:end="3429:56"><expr pos:start="3429:54" pos:end="3429:56"><name pos:start="3429:54" pos:end="3429:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3431:21" pos:end="3431:58"><expr pos:start="3431:21" pos:end="3431:57"><name pos:start="3431:21" pos:end="3431:31">cpu_src2_64</name> <operator pos:start="3431:33" pos:end="3431:33">=</operator> <call pos:start="3431:35" pos:end="3431:57"><name pos:start="3431:35" pos:end="3431:48">gen_load_fpr_D</name><argument_list pos:start="3431:49" pos:end="3431:57">(<argument pos:start="3431:50" pos:end="3431:51"><expr pos:start="3431:50" pos:end="3431:51"><name pos:start="3431:50" pos:end="3431:51">dc</name></expr></argument>, <argument pos:start="3431:54" pos:end="3431:56"><expr pos:start="3431:54" pos:end="3431:56"><name pos:start="3431:54" pos:end="3431:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3433:21" pos:end="3433:75"><expr pos:start="3433:21" pos:end="3433:74"><call pos:start="3433:21" pos:end="3433:74"><name pos:start="3433:21" pos:end="3433:39">gen_helper_fcmpgt16</name><argument_list pos:start="3433:40" pos:end="3433:74">(<argument pos:start="3433:41" pos:end="3433:47"><expr pos:start="3433:41" pos:end="3433:47"><name pos:start="3433:41" pos:end="3433:47">cpu_dst</name></expr></argument>, <argument pos:start="3433:50" pos:end="3433:60"><expr pos:start="3433:50" pos:end="3433:60"><name pos:start="3433:50" pos:end="3433:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3433:63" pos:end="3433:73"><expr pos:start="3433:63" pos:end="3433:73"><name pos:start="3433:63" pos:end="3433:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3435:21" pos:end="3435:51"><expr pos:start="3435:21" pos:end="3435:50"><call pos:start="3435:21" pos:end="3435:50"><name pos:start="3435:21" pos:end="3435:33">gen_store_gpr</name><argument_list pos:start="3435:34" pos:end="3435:50">(<argument pos:start="3435:35" pos:end="3435:36"><expr pos:start="3435:35" pos:end="3435:36"><name pos:start="3435:35" pos:end="3435:36">dc</name></expr></argument>, <argument pos:start="3435:39" pos:end="3435:40"><expr pos:start="3435:39" pos:end="3435:40"><name pos:start="3435:39" pos:end="3435:40">rd</name></expr></argument>, <argument pos:start="3435:43" pos:end="3435:49"><expr pos:start="3435:43" pos:end="3435:49"><name pos:start="3435:43" pos:end="3435:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3437:21" pos:end="3437:26">break;</break>

                <case pos:start="3439:17" pos:end="3439:27">case <expr pos:start="3439:22" pos:end="3439:26"><literal type="number" pos:start="3439:22" pos:end="3439:26">0x02a</literal></expr>:</case> <comment type="block" pos:start="3439:29" pos:end="3439:48">/* VIS I fcmpeq16 */</comment>

                    <expr_stmt pos:start="3441:21" pos:end="3441:48"><expr pos:start="3441:21" pos:end="3441:47"><call pos:start="3441:21" pos:end="3441:47"><name pos:start="3441:21" pos:end="3441:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3441:38" pos:end="3441:47">(<argument pos:start="3441:39" pos:end="3441:40"><expr pos:start="3441:39" pos:end="3441:40"><name pos:start="3441:39" pos:end="3441:40">dc</name></expr></argument>, <argument pos:start="3441:43" pos:end="3441:46"><expr pos:start="3441:43" pos:end="3441:46"><name pos:start="3441:43" pos:end="3441:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3443:21" pos:end="3443:58"><expr pos:start="3443:21" pos:end="3443:57"><name pos:start="3443:21" pos:end="3443:31">cpu_src1_64</name> <operator pos:start="3443:33" pos:end="3443:33">=</operator> <call pos:start="3443:35" pos:end="3443:57"><name pos:start="3443:35" pos:end="3443:48">gen_load_fpr_D</name><argument_list pos:start="3443:49" pos:end="3443:57">(<argument pos:start="3443:50" pos:end="3443:51"><expr pos:start="3443:50" pos:end="3443:51"><name pos:start="3443:50" pos:end="3443:51">dc</name></expr></argument>, <argument pos:start="3443:54" pos:end="3443:56"><expr pos:start="3443:54" pos:end="3443:56"><name pos:start="3443:54" pos:end="3443:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3445:21" pos:end="3445:58"><expr pos:start="3445:21" pos:end="3445:57"><name pos:start="3445:21" pos:end="3445:31">cpu_src2_64</name> <operator pos:start="3445:33" pos:end="3445:33">=</operator> <call pos:start="3445:35" pos:end="3445:57"><name pos:start="3445:35" pos:end="3445:48">gen_load_fpr_D</name><argument_list pos:start="3445:49" pos:end="3445:57">(<argument pos:start="3445:50" pos:end="3445:51"><expr pos:start="3445:50" pos:end="3445:51"><name pos:start="3445:50" pos:end="3445:51">dc</name></expr></argument>, <argument pos:start="3445:54" pos:end="3445:56"><expr pos:start="3445:54" pos:end="3445:56"><name pos:start="3445:54" pos:end="3445:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3447:21" pos:end="3447:75"><expr pos:start="3447:21" pos:end="3447:74"><call pos:start="3447:21" pos:end="3447:74"><name pos:start="3447:21" pos:end="3447:39">gen_helper_fcmpeq16</name><argument_list pos:start="3447:40" pos:end="3447:74">(<argument pos:start="3447:41" pos:end="3447:47"><expr pos:start="3447:41" pos:end="3447:47"><name pos:start="3447:41" pos:end="3447:47">cpu_dst</name></expr></argument>, <argument pos:start="3447:50" pos:end="3447:60"><expr pos:start="3447:50" pos:end="3447:60"><name pos:start="3447:50" pos:end="3447:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3447:63" pos:end="3447:73"><expr pos:start="3447:63" pos:end="3447:73"><name pos:start="3447:63" pos:end="3447:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3449:21" pos:end="3449:51"><expr pos:start="3449:21" pos:end="3449:50"><call pos:start="3449:21" pos:end="3449:50"><name pos:start="3449:21" pos:end="3449:33">gen_store_gpr</name><argument_list pos:start="3449:34" pos:end="3449:50">(<argument pos:start="3449:35" pos:end="3449:36"><expr pos:start="3449:35" pos:end="3449:36"><name pos:start="3449:35" pos:end="3449:36">dc</name></expr></argument>, <argument pos:start="3449:39" pos:end="3449:40"><expr pos:start="3449:39" pos:end="3449:40"><name pos:start="3449:39" pos:end="3449:40">rd</name></expr></argument>, <argument pos:start="3449:43" pos:end="3449:49"><expr pos:start="3449:43" pos:end="3449:49"><name pos:start="3449:43" pos:end="3449:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3451:21" pos:end="3451:26">break;</break>

                <case pos:start="3453:17" pos:end="3453:27">case <expr pos:start="3453:22" pos:end="3453:26"><literal type="number" pos:start="3453:22" pos:end="3453:26">0x02c</literal></expr>:</case> <comment type="block" pos:start="3453:29" pos:end="3453:48">/* VIS I fcmpgt32 */</comment>

                    <expr_stmt pos:start="3455:21" pos:end="3455:48"><expr pos:start="3455:21" pos:end="3455:47"><call pos:start="3455:21" pos:end="3455:47"><name pos:start="3455:21" pos:end="3455:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3455:38" pos:end="3455:47">(<argument pos:start="3455:39" pos:end="3455:40"><expr pos:start="3455:39" pos:end="3455:40"><name pos:start="3455:39" pos:end="3455:40">dc</name></expr></argument>, <argument pos:start="3455:43" pos:end="3455:46"><expr pos:start="3455:43" pos:end="3455:46"><name pos:start="3455:43" pos:end="3455:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3457:21" pos:end="3457:58"><expr pos:start="3457:21" pos:end="3457:57"><name pos:start="3457:21" pos:end="3457:31">cpu_src1_64</name> <operator pos:start="3457:33" pos:end="3457:33">=</operator> <call pos:start="3457:35" pos:end="3457:57"><name pos:start="3457:35" pos:end="3457:48">gen_load_fpr_D</name><argument_list pos:start="3457:49" pos:end="3457:57">(<argument pos:start="3457:50" pos:end="3457:51"><expr pos:start="3457:50" pos:end="3457:51"><name pos:start="3457:50" pos:end="3457:51">dc</name></expr></argument>, <argument pos:start="3457:54" pos:end="3457:56"><expr pos:start="3457:54" pos:end="3457:56"><name pos:start="3457:54" pos:end="3457:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3459:21" pos:end="3459:58"><expr pos:start="3459:21" pos:end="3459:57"><name pos:start="3459:21" pos:end="3459:31">cpu_src2_64</name> <operator pos:start="3459:33" pos:end="3459:33">=</operator> <call pos:start="3459:35" pos:end="3459:57"><name pos:start="3459:35" pos:end="3459:48">gen_load_fpr_D</name><argument_list pos:start="3459:49" pos:end="3459:57">(<argument pos:start="3459:50" pos:end="3459:51"><expr pos:start="3459:50" pos:end="3459:51"><name pos:start="3459:50" pos:end="3459:51">dc</name></expr></argument>, <argument pos:start="3459:54" pos:end="3459:56"><expr pos:start="3459:54" pos:end="3459:56"><name pos:start="3459:54" pos:end="3459:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3461:21" pos:end="3461:75"><expr pos:start="3461:21" pos:end="3461:74"><call pos:start="3461:21" pos:end="3461:74"><name pos:start="3461:21" pos:end="3461:39">gen_helper_fcmpgt32</name><argument_list pos:start="3461:40" pos:end="3461:74">(<argument pos:start="3461:41" pos:end="3461:47"><expr pos:start="3461:41" pos:end="3461:47"><name pos:start="3461:41" pos:end="3461:47">cpu_dst</name></expr></argument>, <argument pos:start="3461:50" pos:end="3461:60"><expr pos:start="3461:50" pos:end="3461:60"><name pos:start="3461:50" pos:end="3461:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3461:63" pos:end="3461:73"><expr pos:start="3461:63" pos:end="3461:73"><name pos:start="3461:63" pos:end="3461:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3463:21" pos:end="3463:51"><expr pos:start="3463:21" pos:end="3463:50"><call pos:start="3463:21" pos:end="3463:50"><name pos:start="3463:21" pos:end="3463:33">gen_store_gpr</name><argument_list pos:start="3463:34" pos:end="3463:50">(<argument pos:start="3463:35" pos:end="3463:36"><expr pos:start="3463:35" pos:end="3463:36"><name pos:start="3463:35" pos:end="3463:36">dc</name></expr></argument>, <argument pos:start="3463:39" pos:end="3463:40"><expr pos:start="3463:39" pos:end="3463:40"><name pos:start="3463:39" pos:end="3463:40">rd</name></expr></argument>, <argument pos:start="3463:43" pos:end="3463:49"><expr pos:start="3463:43" pos:end="3463:49"><name pos:start="3463:43" pos:end="3463:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3465:21" pos:end="3465:26">break;</break>

                <case pos:start="3467:17" pos:end="3467:27">case <expr pos:start="3467:22" pos:end="3467:26"><literal type="number" pos:start="3467:22" pos:end="3467:26">0x02e</literal></expr>:</case> <comment type="block" pos:start="3467:29" pos:end="3467:48">/* VIS I fcmpeq32 */</comment>

                    <expr_stmt pos:start="3469:21" pos:end="3469:48"><expr pos:start="3469:21" pos:end="3469:47"><call pos:start="3469:21" pos:end="3469:47"><name pos:start="3469:21" pos:end="3469:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3469:38" pos:end="3469:47">(<argument pos:start="3469:39" pos:end="3469:40"><expr pos:start="3469:39" pos:end="3469:40"><name pos:start="3469:39" pos:end="3469:40">dc</name></expr></argument>, <argument pos:start="3469:43" pos:end="3469:46"><expr pos:start="3469:43" pos:end="3469:46"><name pos:start="3469:43" pos:end="3469:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3471:21" pos:end="3471:58"><expr pos:start="3471:21" pos:end="3471:57"><name pos:start="3471:21" pos:end="3471:31">cpu_src1_64</name> <operator pos:start="3471:33" pos:end="3471:33">=</operator> <call pos:start="3471:35" pos:end="3471:57"><name pos:start="3471:35" pos:end="3471:48">gen_load_fpr_D</name><argument_list pos:start="3471:49" pos:end="3471:57">(<argument pos:start="3471:50" pos:end="3471:51"><expr pos:start="3471:50" pos:end="3471:51"><name pos:start="3471:50" pos:end="3471:51">dc</name></expr></argument>, <argument pos:start="3471:54" pos:end="3471:56"><expr pos:start="3471:54" pos:end="3471:56"><name pos:start="3471:54" pos:end="3471:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3473:21" pos:end="3473:58"><expr pos:start="3473:21" pos:end="3473:57"><name pos:start="3473:21" pos:end="3473:31">cpu_src2_64</name> <operator pos:start="3473:33" pos:end="3473:33">=</operator> <call pos:start="3473:35" pos:end="3473:57"><name pos:start="3473:35" pos:end="3473:48">gen_load_fpr_D</name><argument_list pos:start="3473:49" pos:end="3473:57">(<argument pos:start="3473:50" pos:end="3473:51"><expr pos:start="3473:50" pos:end="3473:51"><name pos:start="3473:50" pos:end="3473:51">dc</name></expr></argument>, <argument pos:start="3473:54" pos:end="3473:56"><expr pos:start="3473:54" pos:end="3473:56"><name pos:start="3473:54" pos:end="3473:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3475:21" pos:end="3475:75"><expr pos:start="3475:21" pos:end="3475:74"><call pos:start="3475:21" pos:end="3475:74"><name pos:start="3475:21" pos:end="3475:39">gen_helper_fcmpeq32</name><argument_list pos:start="3475:40" pos:end="3475:74">(<argument pos:start="3475:41" pos:end="3475:47"><expr pos:start="3475:41" pos:end="3475:47"><name pos:start="3475:41" pos:end="3475:47">cpu_dst</name></expr></argument>, <argument pos:start="3475:50" pos:end="3475:60"><expr pos:start="3475:50" pos:end="3475:60"><name pos:start="3475:50" pos:end="3475:60">cpu_src1_64</name></expr></argument>, <argument pos:start="3475:63" pos:end="3475:73"><expr pos:start="3475:63" pos:end="3475:73"><name pos:start="3475:63" pos:end="3475:73">cpu_src2_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3477:21" pos:end="3477:51"><expr pos:start="3477:21" pos:end="3477:50"><call pos:start="3477:21" pos:end="3477:50"><name pos:start="3477:21" pos:end="3477:33">gen_store_gpr</name><argument_list pos:start="3477:34" pos:end="3477:50">(<argument pos:start="3477:35" pos:end="3477:36"><expr pos:start="3477:35" pos:end="3477:36"><name pos:start="3477:35" pos:end="3477:36">dc</name></expr></argument>, <argument pos:start="3477:39" pos:end="3477:40"><expr pos:start="3477:39" pos:end="3477:40"><name pos:start="3477:39" pos:end="3477:40">rd</name></expr></argument>, <argument pos:start="3477:43" pos:end="3477:49"><expr pos:start="3477:43" pos:end="3477:49"><name pos:start="3477:43" pos:end="3477:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3479:21" pos:end="3479:26">break;</break>

                <case pos:start="3481:17" pos:end="3481:27">case <expr pos:start="3481:22" pos:end="3481:26"><literal type="number" pos:start="3481:22" pos:end="3481:26">0x031</literal></expr>:</case> <comment type="block" pos:start="3481:29" pos:end="3481:48">/* VIS I fmul8x16 */</comment>

                    <expr_stmt pos:start="3483:21" pos:end="3483:48"><expr pos:start="3483:21" pos:end="3483:47"><call pos:start="3483:21" pos:end="3483:47"><name pos:start="3483:21" pos:end="3483:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3483:38" pos:end="3483:47">(<argument pos:start="3483:39" pos:end="3483:40"><expr pos:start="3483:39" pos:end="3483:40"><name pos:start="3483:39" pos:end="3483:40">dc</name></expr></argument>, <argument pos:start="3483:43" pos:end="3483:46"><expr pos:start="3483:43" pos:end="3483:46"><name pos:start="3483:43" pos:end="3483:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3485:21" pos:end="3485:74"><expr pos:start="3485:21" pos:end="3485:73"><call pos:start="3485:21" pos:end="3485:73"><name pos:start="3485:21" pos:end="3485:34">gen_ne_fop_DDD</name><argument_list pos:start="3485:35" pos:end="3485:73">(<argument pos:start="3485:36" pos:end="3485:37"><expr pos:start="3485:36" pos:end="3485:37"><name pos:start="3485:36" pos:end="3485:37">dc</name></expr></argument>, <argument pos:start="3485:40" pos:end="3485:41"><expr pos:start="3485:40" pos:end="3485:41"><name pos:start="3485:40" pos:end="3485:41">rd</name></expr></argument>, <argument pos:start="3485:44" pos:end="3485:46"><expr pos:start="3485:44" pos:end="3485:46"><name pos:start="3485:44" pos:end="3485:46">rs1</name></expr></argument>, <argument pos:start="3485:49" pos:end="3485:51"><expr pos:start="3485:49" pos:end="3485:51"><name pos:start="3485:49" pos:end="3485:51">rs2</name></expr></argument>, <argument pos:start="3485:54" pos:end="3485:72"><expr pos:start="3485:54" pos:end="3485:72"><name pos:start="3485:54" pos:end="3485:72">gen_helper_fmul8x16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3487:21" pos:end="3487:26">break;</break>

                <case pos:start="3489:17" pos:end="3489:27">case <expr pos:start="3489:22" pos:end="3489:26"><literal type="number" pos:start="3489:22" pos:end="3489:26">0x033</literal></expr>:</case> <comment type="block" pos:start="3489:29" pos:end="3489:50">/* VIS I fmul8x16au */</comment>

                    <expr_stmt pos:start="3491:21" pos:end="3491:48"><expr pos:start="3491:21" pos:end="3491:47"><call pos:start="3491:21" pos:end="3491:47"><name pos:start="3491:21" pos:end="3491:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3491:38" pos:end="3491:47">(<argument pos:start="3491:39" pos:end="3491:40"><expr pos:start="3491:39" pos:end="3491:40"><name pos:start="3491:39" pos:end="3491:40">dc</name></expr></argument>, <argument pos:start="3491:43" pos:end="3491:46"><expr pos:start="3491:43" pos:end="3491:46"><name pos:start="3491:43" pos:end="3491:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3493:21" pos:end="3493:76"><expr pos:start="3493:21" pos:end="3493:75"><call pos:start="3493:21" pos:end="3493:75"><name pos:start="3493:21" pos:end="3493:34">gen_ne_fop_DDD</name><argument_list pos:start="3493:35" pos:end="3493:75">(<argument pos:start="3493:36" pos:end="3493:37"><expr pos:start="3493:36" pos:end="3493:37"><name pos:start="3493:36" pos:end="3493:37">dc</name></expr></argument>, <argument pos:start="3493:40" pos:end="3493:41"><expr pos:start="3493:40" pos:end="3493:41"><name pos:start="3493:40" pos:end="3493:41">rd</name></expr></argument>, <argument pos:start="3493:44" pos:end="3493:46"><expr pos:start="3493:44" pos:end="3493:46"><name pos:start="3493:44" pos:end="3493:46">rs1</name></expr></argument>, <argument pos:start="3493:49" pos:end="3493:51"><expr pos:start="3493:49" pos:end="3493:51"><name pos:start="3493:49" pos:end="3493:51">rs2</name></expr></argument>, <argument pos:start="3493:54" pos:end="3493:74"><expr pos:start="3493:54" pos:end="3493:74"><name pos:start="3493:54" pos:end="3493:74">gen_helper_fmul8x16au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3495:21" pos:end="3495:26">break;</break>

                <case pos:start="3497:17" pos:end="3497:27">case <expr pos:start="3497:22" pos:end="3497:26"><literal type="number" pos:start="3497:22" pos:end="3497:26">0x035</literal></expr>:</case> <comment type="block" pos:start="3497:29" pos:end="3497:50">/* VIS I fmul8x16al */</comment>

                    <expr_stmt pos:start="3499:21" pos:end="3499:48"><expr pos:start="3499:21" pos:end="3499:47"><call pos:start="3499:21" pos:end="3499:47"><name pos:start="3499:21" pos:end="3499:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3499:38" pos:end="3499:47">(<argument pos:start="3499:39" pos:end="3499:40"><expr pos:start="3499:39" pos:end="3499:40"><name pos:start="3499:39" pos:end="3499:40">dc</name></expr></argument>, <argument pos:start="3499:43" pos:end="3499:46"><expr pos:start="3499:43" pos:end="3499:46"><name pos:start="3499:43" pos:end="3499:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3501:21" pos:end="3501:76"><expr pos:start="3501:21" pos:end="3501:75"><call pos:start="3501:21" pos:end="3501:75"><name pos:start="3501:21" pos:end="3501:34">gen_ne_fop_DDD</name><argument_list pos:start="3501:35" pos:end="3501:75">(<argument pos:start="3501:36" pos:end="3501:37"><expr pos:start="3501:36" pos:end="3501:37"><name pos:start="3501:36" pos:end="3501:37">dc</name></expr></argument>, <argument pos:start="3501:40" pos:end="3501:41"><expr pos:start="3501:40" pos:end="3501:41"><name pos:start="3501:40" pos:end="3501:41">rd</name></expr></argument>, <argument pos:start="3501:44" pos:end="3501:46"><expr pos:start="3501:44" pos:end="3501:46"><name pos:start="3501:44" pos:end="3501:46">rs1</name></expr></argument>, <argument pos:start="3501:49" pos:end="3501:51"><expr pos:start="3501:49" pos:end="3501:51"><name pos:start="3501:49" pos:end="3501:51">rs2</name></expr></argument>, <argument pos:start="3501:54" pos:end="3501:74"><expr pos:start="3501:54" pos:end="3501:74"><name pos:start="3501:54" pos:end="3501:74">gen_helper_fmul8x16al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3503:21" pos:end="3503:26">break;</break>

                <case pos:start="3505:17" pos:end="3505:27">case <expr pos:start="3505:22" pos:end="3505:26"><literal type="number" pos:start="3505:22" pos:end="3505:26">0x036</literal></expr>:</case> <comment type="block" pos:start="3505:29" pos:end="3505:50">/* VIS I fmul8sux16 */</comment>

                    <expr_stmt pos:start="3507:21" pos:end="3507:48"><expr pos:start="3507:21" pos:end="3507:47"><call pos:start="3507:21" pos:end="3507:47"><name pos:start="3507:21" pos:end="3507:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3507:38" pos:end="3507:47">(<argument pos:start="3507:39" pos:end="3507:40"><expr pos:start="3507:39" pos:end="3507:40"><name pos:start="3507:39" pos:end="3507:40">dc</name></expr></argument>, <argument pos:start="3507:43" pos:end="3507:46"><expr pos:start="3507:43" pos:end="3507:46"><name pos:start="3507:43" pos:end="3507:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3509:21" pos:end="3509:76"><expr pos:start="3509:21" pos:end="3509:75"><call pos:start="3509:21" pos:end="3509:75"><name pos:start="3509:21" pos:end="3509:34">gen_ne_fop_DDD</name><argument_list pos:start="3509:35" pos:end="3509:75">(<argument pos:start="3509:36" pos:end="3509:37"><expr pos:start="3509:36" pos:end="3509:37"><name pos:start="3509:36" pos:end="3509:37">dc</name></expr></argument>, <argument pos:start="3509:40" pos:end="3509:41"><expr pos:start="3509:40" pos:end="3509:41"><name pos:start="3509:40" pos:end="3509:41">rd</name></expr></argument>, <argument pos:start="3509:44" pos:end="3509:46"><expr pos:start="3509:44" pos:end="3509:46"><name pos:start="3509:44" pos:end="3509:46">rs1</name></expr></argument>, <argument pos:start="3509:49" pos:end="3509:51"><expr pos:start="3509:49" pos:end="3509:51"><name pos:start="3509:49" pos:end="3509:51">rs2</name></expr></argument>, <argument pos:start="3509:54" pos:end="3509:74"><expr pos:start="3509:54" pos:end="3509:74"><name pos:start="3509:54" pos:end="3509:74">gen_helper_fmul8sux16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3511:21" pos:end="3511:26">break;</break>

                <case pos:start="3513:17" pos:end="3513:27">case <expr pos:start="3513:22" pos:end="3513:26"><literal type="number" pos:start="3513:22" pos:end="3513:26">0x037</literal></expr>:</case> <comment type="block" pos:start="3513:29" pos:end="3513:50">/* VIS I fmul8ulx16 */</comment>

                    <expr_stmt pos:start="3515:21" pos:end="3515:48"><expr pos:start="3515:21" pos:end="3515:47"><call pos:start="3515:21" pos:end="3515:47"><name pos:start="3515:21" pos:end="3515:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3515:38" pos:end="3515:47">(<argument pos:start="3515:39" pos:end="3515:40"><expr pos:start="3515:39" pos:end="3515:40"><name pos:start="3515:39" pos:end="3515:40">dc</name></expr></argument>, <argument pos:start="3515:43" pos:end="3515:46"><expr pos:start="3515:43" pos:end="3515:46"><name pos:start="3515:43" pos:end="3515:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3517:21" pos:end="3517:76"><expr pos:start="3517:21" pos:end="3517:75"><call pos:start="3517:21" pos:end="3517:75"><name pos:start="3517:21" pos:end="3517:34">gen_ne_fop_DDD</name><argument_list pos:start="3517:35" pos:end="3517:75">(<argument pos:start="3517:36" pos:end="3517:37"><expr pos:start="3517:36" pos:end="3517:37"><name pos:start="3517:36" pos:end="3517:37">dc</name></expr></argument>, <argument pos:start="3517:40" pos:end="3517:41"><expr pos:start="3517:40" pos:end="3517:41"><name pos:start="3517:40" pos:end="3517:41">rd</name></expr></argument>, <argument pos:start="3517:44" pos:end="3517:46"><expr pos:start="3517:44" pos:end="3517:46"><name pos:start="3517:44" pos:end="3517:46">rs1</name></expr></argument>, <argument pos:start="3517:49" pos:end="3517:51"><expr pos:start="3517:49" pos:end="3517:51"><name pos:start="3517:49" pos:end="3517:51">rs2</name></expr></argument>, <argument pos:start="3517:54" pos:end="3517:74"><expr pos:start="3517:54" pos:end="3517:74"><name pos:start="3517:54" pos:end="3517:74">gen_helper_fmul8ulx16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3519:21" pos:end="3519:26">break;</break>

                <case pos:start="3521:17" pos:end="3521:27">case <expr pos:start="3521:22" pos:end="3521:26"><literal type="number" pos:start="3521:22" pos:end="3521:26">0x038</literal></expr>:</case> <comment type="block" pos:start="3521:29" pos:end="3521:51">/* VIS I fmuld8sux16 */</comment>

                    <expr_stmt pos:start="3523:21" pos:end="3523:48"><expr pos:start="3523:21" pos:end="3523:47"><call pos:start="3523:21" pos:end="3523:47"><name pos:start="3523:21" pos:end="3523:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3523:38" pos:end="3523:47">(<argument pos:start="3523:39" pos:end="3523:40"><expr pos:start="3523:39" pos:end="3523:40"><name pos:start="3523:39" pos:end="3523:40">dc</name></expr></argument>, <argument pos:start="3523:43" pos:end="3523:46"><expr pos:start="3523:43" pos:end="3523:46"><name pos:start="3523:43" pos:end="3523:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3525:21" pos:end="3525:77"><expr pos:start="3525:21" pos:end="3525:76"><call pos:start="3525:21" pos:end="3525:76"><name pos:start="3525:21" pos:end="3525:34">gen_ne_fop_DDD</name><argument_list pos:start="3525:35" pos:end="3525:76">(<argument pos:start="3525:36" pos:end="3525:37"><expr pos:start="3525:36" pos:end="3525:37"><name pos:start="3525:36" pos:end="3525:37">dc</name></expr></argument>, <argument pos:start="3525:40" pos:end="3525:41"><expr pos:start="3525:40" pos:end="3525:41"><name pos:start="3525:40" pos:end="3525:41">rd</name></expr></argument>, <argument pos:start="3525:44" pos:end="3525:46"><expr pos:start="3525:44" pos:end="3525:46"><name pos:start="3525:44" pos:end="3525:46">rs1</name></expr></argument>, <argument pos:start="3525:49" pos:end="3525:51"><expr pos:start="3525:49" pos:end="3525:51"><name pos:start="3525:49" pos:end="3525:51">rs2</name></expr></argument>, <argument pos:start="3525:54" pos:end="3525:75"><expr pos:start="3525:54" pos:end="3525:75"><name pos:start="3525:54" pos:end="3525:75">gen_helper_fmuld8sux16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3527:21" pos:end="3527:26">break;</break>

                <case pos:start="3529:17" pos:end="3529:27">case <expr pos:start="3529:22" pos:end="3529:26"><literal type="number" pos:start="3529:22" pos:end="3529:26">0x039</literal></expr>:</case> <comment type="block" pos:start="3529:29" pos:end="3529:51">/* VIS I fmuld8ulx16 */</comment>

                    <expr_stmt pos:start="3531:21" pos:end="3531:48"><expr pos:start="3531:21" pos:end="3531:47"><call pos:start="3531:21" pos:end="3531:47"><name pos:start="3531:21" pos:end="3531:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3531:38" pos:end="3531:47">(<argument pos:start="3531:39" pos:end="3531:40"><expr pos:start="3531:39" pos:end="3531:40"><name pos:start="3531:39" pos:end="3531:40">dc</name></expr></argument>, <argument pos:start="3531:43" pos:end="3531:46"><expr pos:start="3531:43" pos:end="3531:46"><name pos:start="3531:43" pos:end="3531:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3533:21" pos:end="3533:77"><expr pos:start="3533:21" pos:end="3533:76"><call pos:start="3533:21" pos:end="3533:76"><name pos:start="3533:21" pos:end="3533:34">gen_ne_fop_DDD</name><argument_list pos:start="3533:35" pos:end="3533:76">(<argument pos:start="3533:36" pos:end="3533:37"><expr pos:start="3533:36" pos:end="3533:37"><name pos:start="3533:36" pos:end="3533:37">dc</name></expr></argument>, <argument pos:start="3533:40" pos:end="3533:41"><expr pos:start="3533:40" pos:end="3533:41"><name pos:start="3533:40" pos:end="3533:41">rd</name></expr></argument>, <argument pos:start="3533:44" pos:end="3533:46"><expr pos:start="3533:44" pos:end="3533:46"><name pos:start="3533:44" pos:end="3533:46">rs1</name></expr></argument>, <argument pos:start="3533:49" pos:end="3533:51"><expr pos:start="3533:49" pos:end="3533:51"><name pos:start="3533:49" pos:end="3533:51">rs2</name></expr></argument>, <argument pos:start="3533:54" pos:end="3533:75"><expr pos:start="3533:54" pos:end="3533:75"><name pos:start="3533:54" pos:end="3533:75">gen_helper_fmuld8ulx16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3535:21" pos:end="3535:26">break;</break>

                <case pos:start="3537:17" pos:end="3537:27">case <expr pos:start="3537:22" pos:end="3537:26"><literal type="number" pos:start="3537:22" pos:end="3537:26">0x03a</literal></expr>:</case> <comment type="block" pos:start="3537:29" pos:end="3537:47">/* VIS I fpack32 */</comment>

                    <expr_stmt pos:start="3539:21" pos:end="3539:48"><expr pos:start="3539:21" pos:end="3539:47"><call pos:start="3539:21" pos:end="3539:47"><name pos:start="3539:21" pos:end="3539:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3539:38" pos:end="3539:47">(<argument pos:start="3539:39" pos:end="3539:40"><expr pos:start="3539:39" pos:end="3539:40"><name pos:start="3539:39" pos:end="3539:40">dc</name></expr></argument>, <argument pos:start="3539:43" pos:end="3539:46"><expr pos:start="3539:43" pos:end="3539:46"><name pos:start="3539:43" pos:end="3539:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3541:21" pos:end="3541:74"><expr pos:start="3541:21" pos:end="3541:73"><call pos:start="3541:21" pos:end="3541:73"><name pos:start="3541:21" pos:end="3541:35">gen_gsr_fop_DDD</name><argument_list pos:start="3541:36" pos:end="3541:73">(<argument pos:start="3541:37" pos:end="3541:38"><expr pos:start="3541:37" pos:end="3541:38"><name pos:start="3541:37" pos:end="3541:38">dc</name></expr></argument>, <argument pos:start="3541:41" pos:end="3541:42"><expr pos:start="3541:41" pos:end="3541:42"><name pos:start="3541:41" pos:end="3541:42">rd</name></expr></argument>, <argument pos:start="3541:45" pos:end="3541:47"><expr pos:start="3541:45" pos:end="3541:47"><name pos:start="3541:45" pos:end="3541:47">rs1</name></expr></argument>, <argument pos:start="3541:50" pos:end="3541:52"><expr pos:start="3541:50" pos:end="3541:52"><name pos:start="3541:50" pos:end="3541:52">rs2</name></expr></argument>, <argument pos:start="3541:55" pos:end="3541:72"><expr pos:start="3541:55" pos:end="3541:72"><name pos:start="3541:55" pos:end="3541:72">gen_helper_fpack32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3543:21" pos:end="3543:26">break;</break>

                <case pos:start="3545:17" pos:end="3545:27">case <expr pos:start="3545:22" pos:end="3545:26"><literal type="number" pos:start="3545:22" pos:end="3545:26">0x03b</literal></expr>:</case> <comment type="block" pos:start="3545:29" pos:end="3545:47">/* VIS I fpack16 */</comment>

                    <expr_stmt pos:start="3547:21" pos:end="3547:48"><expr pos:start="3547:21" pos:end="3547:47"><call pos:start="3547:21" pos:end="3547:47"><name pos:start="3547:21" pos:end="3547:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3547:38" pos:end="3547:47">(<argument pos:start="3547:39" pos:end="3547:40"><expr pos:start="3547:39" pos:end="3547:40"><name pos:start="3547:39" pos:end="3547:40">dc</name></expr></argument>, <argument pos:start="3547:43" pos:end="3547:46"><expr pos:start="3547:43" pos:end="3547:46"><name pos:start="3547:43" pos:end="3547:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3549:21" pos:end="3549:58"><expr pos:start="3549:21" pos:end="3549:57"><name pos:start="3549:21" pos:end="3549:31">cpu_src1_64</name> <operator pos:start="3549:33" pos:end="3549:33">=</operator> <call pos:start="3549:35" pos:end="3549:57"><name pos:start="3549:35" pos:end="3549:48">gen_load_fpr_D</name><argument_list pos:start="3549:49" pos:end="3549:57">(<argument pos:start="3549:50" pos:end="3549:51"><expr pos:start="3549:50" pos:end="3549:51"><name pos:start="3549:50" pos:end="3549:51">dc</name></expr></argument>, <argument pos:start="3549:54" pos:end="3549:56"><expr pos:start="3549:54" pos:end="3549:56"><name pos:start="3549:54" pos:end="3549:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3551:21" pos:end="3551:50"><expr pos:start="3551:21" pos:end="3551:49"><name pos:start="3551:21" pos:end="3551:30">cpu_dst_32</name> <operator pos:start="3551:32" pos:end="3551:32">=</operator> <call pos:start="3551:34" pos:end="3551:49"><name pos:start="3551:34" pos:end="3551:47">gen_dest_fpr_F</name><argument_list pos:start="3551:48" pos:end="3551:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3553:21" pos:end="3553:73"><expr pos:start="3553:21" pos:end="3553:72"><call pos:start="3553:21" pos:end="3553:72"><name pos:start="3553:21" pos:end="3553:38">gen_helper_fpack16</name><argument_list pos:start="3553:39" pos:end="3553:72">(<argument pos:start="3553:40" pos:end="3553:49"><expr pos:start="3553:40" pos:end="3553:49"><name pos:start="3553:40" pos:end="3553:49">cpu_dst_32</name></expr></argument>, <argument pos:start="3553:52" pos:end="3553:58"><expr pos:start="3553:52" pos:end="3553:58"><name pos:start="3553:52" pos:end="3553:58">cpu_gsr</name></expr></argument>, <argument pos:start="3553:61" pos:end="3553:71"><expr pos:start="3553:61" pos:end="3553:71"><name pos:start="3553:61" pos:end="3553:71">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3555:21" pos:end="3555:56"><expr pos:start="3555:21" pos:end="3555:55"><call pos:start="3555:21" pos:end="3555:55"><name pos:start="3555:21" pos:end="3555:35">gen_store_fpr_F</name><argument_list pos:start="3555:36" pos:end="3555:55">(<argument pos:start="3555:37" pos:end="3555:38"><expr pos:start="3555:37" pos:end="3555:38"><name pos:start="3555:37" pos:end="3555:38">dc</name></expr></argument>, <argument pos:start="3555:41" pos:end="3555:42"><expr pos:start="3555:41" pos:end="3555:42"><name pos:start="3555:41" pos:end="3555:42">rd</name></expr></argument>, <argument pos:start="3555:45" pos:end="3555:54"><expr pos:start="3555:45" pos:end="3555:54"><name pos:start="3555:45" pos:end="3555:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3557:21" pos:end="3557:26">break;</break>

                <case pos:start="3559:17" pos:end="3559:27">case <expr pos:start="3559:22" pos:end="3559:26"><literal type="number" pos:start="3559:22" pos:end="3559:26">0x03d</literal></expr>:</case> <comment type="block" pos:start="3559:29" pos:end="3559:48">/* VIS I fpackfix */</comment>

                    <expr_stmt pos:start="3561:21" pos:end="3561:48"><expr pos:start="3561:21" pos:end="3561:47"><call pos:start="3561:21" pos:end="3561:47"><name pos:start="3561:21" pos:end="3561:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3561:38" pos:end="3561:47">(<argument pos:start="3561:39" pos:end="3561:40"><expr pos:start="3561:39" pos:end="3561:40"><name pos:start="3561:39" pos:end="3561:40">dc</name></expr></argument>, <argument pos:start="3561:43" pos:end="3561:46"><expr pos:start="3561:43" pos:end="3561:46"><name pos:start="3561:43" pos:end="3561:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3563:21" pos:end="3563:58"><expr pos:start="3563:21" pos:end="3563:57"><name pos:start="3563:21" pos:end="3563:31">cpu_src1_64</name> <operator pos:start="3563:33" pos:end="3563:33">=</operator> <call pos:start="3563:35" pos:end="3563:57"><name pos:start="3563:35" pos:end="3563:48">gen_load_fpr_D</name><argument_list pos:start="3563:49" pos:end="3563:57">(<argument pos:start="3563:50" pos:end="3563:51"><expr pos:start="3563:50" pos:end="3563:51"><name pos:start="3563:50" pos:end="3563:51">dc</name></expr></argument>, <argument pos:start="3563:54" pos:end="3563:56"><expr pos:start="3563:54" pos:end="3563:56"><name pos:start="3563:54" pos:end="3563:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3565:21" pos:end="3565:50"><expr pos:start="3565:21" pos:end="3565:49"><name pos:start="3565:21" pos:end="3565:30">cpu_dst_32</name> <operator pos:start="3565:32" pos:end="3565:32">=</operator> <call pos:start="3565:34" pos:end="3565:49"><name pos:start="3565:34" pos:end="3565:47">gen_dest_fpr_F</name><argument_list pos:start="3565:48" pos:end="3565:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3567:21" pos:end="3567:74"><expr pos:start="3567:21" pos:end="3567:73"><call pos:start="3567:21" pos:end="3567:73"><name pos:start="3567:21" pos:end="3567:39">gen_helper_fpackfix</name><argument_list pos:start="3567:40" pos:end="3567:73">(<argument pos:start="3567:41" pos:end="3567:50"><expr pos:start="3567:41" pos:end="3567:50"><name pos:start="3567:41" pos:end="3567:50">cpu_dst_32</name></expr></argument>, <argument pos:start="3567:53" pos:end="3567:59"><expr pos:start="3567:53" pos:end="3567:59"><name pos:start="3567:53" pos:end="3567:59">cpu_gsr</name></expr></argument>, <argument pos:start="3567:62" pos:end="3567:72"><expr pos:start="3567:62" pos:end="3567:72"><name pos:start="3567:62" pos:end="3567:72">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3569:21" pos:end="3569:56"><expr pos:start="3569:21" pos:end="3569:55"><call pos:start="3569:21" pos:end="3569:55"><name pos:start="3569:21" pos:end="3569:35">gen_store_fpr_F</name><argument_list pos:start="3569:36" pos:end="3569:55">(<argument pos:start="3569:37" pos:end="3569:38"><expr pos:start="3569:37" pos:end="3569:38"><name pos:start="3569:37" pos:end="3569:38">dc</name></expr></argument>, <argument pos:start="3569:41" pos:end="3569:42"><expr pos:start="3569:41" pos:end="3569:42"><name pos:start="3569:41" pos:end="3569:42">rd</name></expr></argument>, <argument pos:start="3569:45" pos:end="3569:54"><expr pos:start="3569:45" pos:end="3569:54"><name pos:start="3569:45" pos:end="3569:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3571:21" pos:end="3571:26">break;</break>

                <case pos:start="3573:17" pos:end="3573:27">case <expr pos:start="3573:22" pos:end="3573:26"><literal type="number" pos:start="3573:22" pos:end="3573:26">0x03e</literal></expr>:</case> <comment type="block" pos:start="3573:29" pos:end="3573:45">/* VIS I pdist */</comment>

                    <expr_stmt pos:start="3575:21" pos:end="3575:48"><expr pos:start="3575:21" pos:end="3575:47"><call pos:start="3575:21" pos:end="3575:47"><name pos:start="3575:21" pos:end="3575:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3575:38" pos:end="3575:47">(<argument pos:start="3575:39" pos:end="3575:40"><expr pos:start="3575:39" pos:end="3575:40"><name pos:start="3575:39" pos:end="3575:40">dc</name></expr></argument>, <argument pos:start="3575:43" pos:end="3575:46"><expr pos:start="3575:43" pos:end="3575:46"><name pos:start="3575:43" pos:end="3575:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3577:21" pos:end="3577:72"><expr pos:start="3577:21" pos:end="3577:71"><call pos:start="3577:21" pos:end="3577:71"><name pos:start="3577:21" pos:end="3577:35">gen_ne_fop_DDDD</name><argument_list pos:start="3577:36" pos:end="3577:71">(<argument pos:start="3577:37" pos:end="3577:38"><expr pos:start="3577:37" pos:end="3577:38"><name pos:start="3577:37" pos:end="3577:38">dc</name></expr></argument>, <argument pos:start="3577:41" pos:end="3577:42"><expr pos:start="3577:41" pos:end="3577:42"><name pos:start="3577:41" pos:end="3577:42">rd</name></expr></argument>, <argument pos:start="3577:45" pos:end="3577:47"><expr pos:start="3577:45" pos:end="3577:47"><name pos:start="3577:45" pos:end="3577:47">rs1</name></expr></argument>, <argument pos:start="3577:50" pos:end="3577:52"><expr pos:start="3577:50" pos:end="3577:52"><name pos:start="3577:50" pos:end="3577:52">rs2</name></expr></argument>, <argument pos:start="3577:55" pos:end="3577:70"><expr pos:start="3577:55" pos:end="3577:70"><name pos:start="3577:55" pos:end="3577:70">gen_helper_pdist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3579:21" pos:end="3579:26">break;</break>

                <case pos:start="3581:17" pos:end="3581:27">case <expr pos:start="3581:22" pos:end="3581:26"><literal type="number" pos:start="3581:22" pos:end="3581:26">0x048</literal></expr>:</case> <comment type="block" pos:start="3581:29" pos:end="3581:50">/* VIS I faligndata */</comment>

                    <expr_stmt pos:start="3583:21" pos:end="3583:48"><expr pos:start="3583:21" pos:end="3583:47"><call pos:start="3583:21" pos:end="3583:47"><name pos:start="3583:21" pos:end="3583:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3583:38" pos:end="3583:47">(<argument pos:start="3583:39" pos:end="3583:40"><expr pos:start="3583:39" pos:end="3583:40"><name pos:start="3583:39" pos:end="3583:40">dc</name></expr></argument>, <argument pos:start="3583:43" pos:end="3583:46"><expr pos:start="3583:43" pos:end="3583:46"><name pos:start="3583:43" pos:end="3583:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3585:21" pos:end="3585:70"><expr pos:start="3585:21" pos:end="3585:69"><call pos:start="3585:21" pos:end="3585:69"><name pos:start="3585:21" pos:end="3585:35">gen_gsr_fop_DDD</name><argument_list pos:start="3585:36" pos:end="3585:69">(<argument pos:start="3585:37" pos:end="3585:38"><expr pos:start="3585:37" pos:end="3585:38"><name pos:start="3585:37" pos:end="3585:38">dc</name></expr></argument>, <argument pos:start="3585:41" pos:end="3585:42"><expr pos:start="3585:41" pos:end="3585:42"><name pos:start="3585:41" pos:end="3585:42">rd</name></expr></argument>, <argument pos:start="3585:45" pos:end="3585:47"><expr pos:start="3585:45" pos:end="3585:47"><name pos:start="3585:45" pos:end="3585:47">rs1</name></expr></argument>, <argument pos:start="3585:50" pos:end="3585:52"><expr pos:start="3585:50" pos:end="3585:52"><name pos:start="3585:50" pos:end="3585:52">rs2</name></expr></argument>, <argument pos:start="3585:55" pos:end="3585:68"><expr pos:start="3585:55" pos:end="3585:68"><name pos:start="3585:55" pos:end="3585:68">gen_faligndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3587:21" pos:end="3587:26">break;</break>

                <case pos:start="3589:17" pos:end="3589:27">case <expr pos:start="3589:22" pos:end="3589:26"><literal type="number" pos:start="3589:22" pos:end="3589:26">0x04b</literal></expr>:</case> <comment type="block" pos:start="3589:29" pos:end="3589:47">/* VIS I fpmerge */</comment>

                    <expr_stmt pos:start="3591:21" pos:end="3591:48"><expr pos:start="3591:21" pos:end="3591:47"><call pos:start="3591:21" pos:end="3591:47"><name pos:start="3591:21" pos:end="3591:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3591:38" pos:end="3591:47">(<argument pos:start="3591:39" pos:end="3591:40"><expr pos:start="3591:39" pos:end="3591:40"><name pos:start="3591:39" pos:end="3591:40">dc</name></expr></argument>, <argument pos:start="3591:43" pos:end="3591:46"><expr pos:start="3591:43" pos:end="3591:46"><name pos:start="3591:43" pos:end="3591:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3593:21" pos:end="3593:73"><expr pos:start="3593:21" pos:end="3593:72"><call pos:start="3593:21" pos:end="3593:72"><name pos:start="3593:21" pos:end="3593:34">gen_ne_fop_DDD</name><argument_list pos:start="3593:35" pos:end="3593:72">(<argument pos:start="3593:36" pos:end="3593:37"><expr pos:start="3593:36" pos:end="3593:37"><name pos:start="3593:36" pos:end="3593:37">dc</name></expr></argument>, <argument pos:start="3593:40" pos:end="3593:41"><expr pos:start="3593:40" pos:end="3593:41"><name pos:start="3593:40" pos:end="3593:41">rd</name></expr></argument>, <argument pos:start="3593:44" pos:end="3593:46"><expr pos:start="3593:44" pos:end="3593:46"><name pos:start="3593:44" pos:end="3593:46">rs1</name></expr></argument>, <argument pos:start="3593:49" pos:end="3593:51"><expr pos:start="3593:49" pos:end="3593:51"><name pos:start="3593:49" pos:end="3593:51">rs2</name></expr></argument>, <argument pos:start="3593:54" pos:end="3593:71"><expr pos:start="3593:54" pos:end="3593:71"><name pos:start="3593:54" pos:end="3593:71">gen_helper_fpmerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3595:21" pos:end="3595:26">break;</break>

                <case pos:start="3597:17" pos:end="3597:27">case <expr pos:start="3597:22" pos:end="3597:26"><literal type="number" pos:start="3597:22" pos:end="3597:26">0x04c</literal></expr>:</case> <comment type="block" pos:start="3597:29" pos:end="3597:49">/* VIS II bshuffle */</comment>

                    <expr_stmt pos:start="3599:21" pos:end="3599:48"><expr pos:start="3599:21" pos:end="3599:47"><call pos:start="3599:21" pos:end="3599:47"><name pos:start="3599:21" pos:end="3599:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3599:38" pos:end="3599:47">(<argument pos:start="3599:39" pos:end="3599:40"><expr pos:start="3599:39" pos:end="3599:40"><name pos:start="3599:39" pos:end="3599:40">dc</name></expr></argument>, <argument pos:start="3599:43" pos:end="3599:46"><expr pos:start="3599:43" pos:end="3599:46"><name pos:start="3599:43" pos:end="3599:46">VIS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3601:21" pos:end="3601:75"><expr pos:start="3601:21" pos:end="3601:74"><call pos:start="3601:21" pos:end="3601:74"><name pos:start="3601:21" pos:end="3601:35">gen_gsr_fop_DDD</name><argument_list pos:start="3601:36" pos:end="3601:74">(<argument pos:start="3601:37" pos:end="3601:38"><expr pos:start="3601:37" pos:end="3601:38"><name pos:start="3601:37" pos:end="3601:38">dc</name></expr></argument>, <argument pos:start="3601:41" pos:end="3601:42"><expr pos:start="3601:41" pos:end="3601:42"><name pos:start="3601:41" pos:end="3601:42">rd</name></expr></argument>, <argument pos:start="3601:45" pos:end="3601:47"><expr pos:start="3601:45" pos:end="3601:47"><name pos:start="3601:45" pos:end="3601:47">rs1</name></expr></argument>, <argument pos:start="3601:50" pos:end="3601:52"><expr pos:start="3601:50" pos:end="3601:52"><name pos:start="3601:50" pos:end="3601:52">rs2</name></expr></argument>, <argument pos:start="3601:55" pos:end="3601:73"><expr pos:start="3601:55" pos:end="3601:73"><name pos:start="3601:55" pos:end="3601:73">gen_helper_bshuffle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3603:21" pos:end="3603:26">break;</break>

                <case pos:start="3605:17" pos:end="3605:27">case <expr pos:start="3605:22" pos:end="3605:26"><literal type="number" pos:start="3605:22" pos:end="3605:26">0x04d</literal></expr>:</case> <comment type="block" pos:start="3605:29" pos:end="3605:47">/* VIS I fexpand */</comment>

                    <expr_stmt pos:start="3607:21" pos:end="3607:48"><expr pos:start="3607:21" pos:end="3607:47"><call pos:start="3607:21" pos:end="3607:47"><name pos:start="3607:21" pos:end="3607:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3607:38" pos:end="3607:47">(<argument pos:start="3607:39" pos:end="3607:40"><expr pos:start="3607:39" pos:end="3607:40"><name pos:start="3607:39" pos:end="3607:40">dc</name></expr></argument>, <argument pos:start="3607:43" pos:end="3607:46"><expr pos:start="3607:43" pos:end="3607:46"><name pos:start="3607:43" pos:end="3607:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3609:21" pos:end="3609:73"><expr pos:start="3609:21" pos:end="3609:72"><call pos:start="3609:21" pos:end="3609:72"><name pos:start="3609:21" pos:end="3609:34">gen_ne_fop_DDD</name><argument_list pos:start="3609:35" pos:end="3609:72">(<argument pos:start="3609:36" pos:end="3609:37"><expr pos:start="3609:36" pos:end="3609:37"><name pos:start="3609:36" pos:end="3609:37">dc</name></expr></argument>, <argument pos:start="3609:40" pos:end="3609:41"><expr pos:start="3609:40" pos:end="3609:41"><name pos:start="3609:40" pos:end="3609:41">rd</name></expr></argument>, <argument pos:start="3609:44" pos:end="3609:46"><expr pos:start="3609:44" pos:end="3609:46"><name pos:start="3609:44" pos:end="3609:46">rs1</name></expr></argument>, <argument pos:start="3609:49" pos:end="3609:51"><expr pos:start="3609:49" pos:end="3609:51"><name pos:start="3609:49" pos:end="3609:51">rs2</name></expr></argument>, <argument pos:start="3609:54" pos:end="3609:71"><expr pos:start="3609:54" pos:end="3609:71"><name pos:start="3609:54" pos:end="3609:71">gen_helper_fexpand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3611:21" pos:end="3611:26">break;</break>

                <case pos:start="3613:17" pos:end="3613:27">case <expr pos:start="3613:22" pos:end="3613:26"><literal type="number" pos:start="3613:22" pos:end="3613:26">0x050</literal></expr>:</case> <comment type="block" pos:start="3613:29" pos:end="3613:47">/* VIS I fpadd16 */</comment>

                    <expr_stmt pos:start="3615:21" pos:end="3615:48"><expr pos:start="3615:21" pos:end="3615:47"><call pos:start="3615:21" pos:end="3615:47"><name pos:start="3615:21" pos:end="3615:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3615:38" pos:end="3615:47">(<argument pos:start="3615:39" pos:end="3615:40"><expr pos:start="3615:39" pos:end="3615:40"><name pos:start="3615:39" pos:end="3615:40">dc</name></expr></argument>, <argument pos:start="3615:43" pos:end="3615:46"><expr pos:start="3615:43" pos:end="3615:46"><name pos:start="3615:43" pos:end="3615:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3617:21" pos:end="3617:73"><expr pos:start="3617:21" pos:end="3617:72"><call pos:start="3617:21" pos:end="3617:72"><name pos:start="3617:21" pos:end="3617:34">gen_ne_fop_DDD</name><argument_list pos:start="3617:35" pos:end="3617:72">(<argument pos:start="3617:36" pos:end="3617:37"><expr pos:start="3617:36" pos:end="3617:37"><name pos:start="3617:36" pos:end="3617:37">dc</name></expr></argument>, <argument pos:start="3617:40" pos:end="3617:41"><expr pos:start="3617:40" pos:end="3617:41"><name pos:start="3617:40" pos:end="3617:41">rd</name></expr></argument>, <argument pos:start="3617:44" pos:end="3617:46"><expr pos:start="3617:44" pos:end="3617:46"><name pos:start="3617:44" pos:end="3617:46">rs1</name></expr></argument>, <argument pos:start="3617:49" pos:end="3617:51"><expr pos:start="3617:49" pos:end="3617:51"><name pos:start="3617:49" pos:end="3617:51">rs2</name></expr></argument>, <argument pos:start="3617:54" pos:end="3617:71"><expr pos:start="3617:54" pos:end="3617:71"><name pos:start="3617:54" pos:end="3617:71">gen_helper_fpadd16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3619:21" pos:end="3619:26">break;</break>

                <case pos:start="3621:17" pos:end="3621:27">case <expr pos:start="3621:22" pos:end="3621:26"><literal type="number" pos:start="3621:22" pos:end="3621:26">0x051</literal></expr>:</case> <comment type="block" pos:start="3621:29" pos:end="3621:48">/* VIS I fpadd16s */</comment>

                    <expr_stmt pos:start="3623:21" pos:end="3623:48"><expr pos:start="3623:21" pos:end="3623:47"><call pos:start="3623:21" pos:end="3623:47"><name pos:start="3623:21" pos:end="3623:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3623:38" pos:end="3623:47">(<argument pos:start="3623:39" pos:end="3623:40"><expr pos:start="3623:39" pos:end="3623:40"><name pos:start="3623:39" pos:end="3623:40">dc</name></expr></argument>, <argument pos:start="3623:43" pos:end="3623:46"><expr pos:start="3623:43" pos:end="3623:46"><name pos:start="3623:43" pos:end="3623:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3625:21" pos:end="3625:74"><expr pos:start="3625:21" pos:end="3625:73"><call pos:start="3625:21" pos:end="3625:73"><name pos:start="3625:21" pos:end="3625:34">gen_ne_fop_FFF</name><argument_list pos:start="3625:35" pos:end="3625:73">(<argument pos:start="3625:36" pos:end="3625:37"><expr pos:start="3625:36" pos:end="3625:37"><name pos:start="3625:36" pos:end="3625:37">dc</name></expr></argument>, <argument pos:start="3625:40" pos:end="3625:41"><expr pos:start="3625:40" pos:end="3625:41"><name pos:start="3625:40" pos:end="3625:41">rd</name></expr></argument>, <argument pos:start="3625:44" pos:end="3625:46"><expr pos:start="3625:44" pos:end="3625:46"><name pos:start="3625:44" pos:end="3625:46">rs1</name></expr></argument>, <argument pos:start="3625:49" pos:end="3625:51"><expr pos:start="3625:49" pos:end="3625:51"><name pos:start="3625:49" pos:end="3625:51">rs2</name></expr></argument>, <argument pos:start="3625:54" pos:end="3625:72"><expr pos:start="3625:54" pos:end="3625:72"><name pos:start="3625:54" pos:end="3625:72">gen_helper_fpadd16s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3627:21" pos:end="3627:26">break;</break>

                <case pos:start="3629:17" pos:end="3629:27">case <expr pos:start="3629:22" pos:end="3629:26"><literal type="number" pos:start="3629:22" pos:end="3629:26">0x052</literal></expr>:</case> <comment type="block" pos:start="3629:29" pos:end="3629:47">/* VIS I fpadd32 */</comment>

                    <expr_stmt pos:start="3631:21" pos:end="3631:48"><expr pos:start="3631:21" pos:end="3631:47"><call pos:start="3631:21" pos:end="3631:47"><name pos:start="3631:21" pos:end="3631:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3631:38" pos:end="3631:47">(<argument pos:start="3631:39" pos:end="3631:40"><expr pos:start="3631:39" pos:end="3631:40"><name pos:start="3631:39" pos:end="3631:40">dc</name></expr></argument>, <argument pos:start="3631:43" pos:end="3631:46"><expr pos:start="3631:43" pos:end="3631:46"><name pos:start="3631:43" pos:end="3631:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3633:21" pos:end="3633:73"><expr pos:start="3633:21" pos:end="3633:72"><call pos:start="3633:21" pos:end="3633:72"><name pos:start="3633:21" pos:end="3633:34">gen_ne_fop_DDD</name><argument_list pos:start="3633:35" pos:end="3633:72">(<argument pos:start="3633:36" pos:end="3633:37"><expr pos:start="3633:36" pos:end="3633:37"><name pos:start="3633:36" pos:end="3633:37">dc</name></expr></argument>, <argument pos:start="3633:40" pos:end="3633:41"><expr pos:start="3633:40" pos:end="3633:41"><name pos:start="3633:40" pos:end="3633:41">rd</name></expr></argument>, <argument pos:start="3633:44" pos:end="3633:46"><expr pos:start="3633:44" pos:end="3633:46"><name pos:start="3633:44" pos:end="3633:46">rs1</name></expr></argument>, <argument pos:start="3633:49" pos:end="3633:51"><expr pos:start="3633:49" pos:end="3633:51"><name pos:start="3633:49" pos:end="3633:51">rs2</name></expr></argument>, <argument pos:start="3633:54" pos:end="3633:71"><expr pos:start="3633:54" pos:end="3633:71"><name pos:start="3633:54" pos:end="3633:71">gen_helper_fpadd32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3635:21" pos:end="3635:26">break;</break>

                <case pos:start="3637:17" pos:end="3637:27">case <expr pos:start="3637:22" pos:end="3637:26"><literal type="number" pos:start="3637:22" pos:end="3637:26">0x053</literal></expr>:</case> <comment type="block" pos:start="3637:29" pos:end="3637:48">/* VIS I fpadd32s */</comment>

                    <expr_stmt pos:start="3639:21" pos:end="3639:48"><expr pos:start="3639:21" pos:end="3639:47"><call pos:start="3639:21" pos:end="3639:47"><name pos:start="3639:21" pos:end="3639:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3639:38" pos:end="3639:47">(<argument pos:start="3639:39" pos:end="3639:40"><expr pos:start="3639:39" pos:end="3639:40"><name pos:start="3639:39" pos:end="3639:40">dc</name></expr></argument>, <argument pos:start="3639:43" pos:end="3639:46"><expr pos:start="3639:43" pos:end="3639:46"><name pos:start="3639:43" pos:end="3639:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3641:21" pos:end="3641:70"><expr pos:start="3641:21" pos:end="3641:69"><call pos:start="3641:21" pos:end="3641:69"><name pos:start="3641:21" pos:end="3641:34">gen_ne_fop_FFF</name><argument_list pos:start="3641:35" pos:end="3641:69">(<argument pos:start="3641:36" pos:end="3641:37"><expr pos:start="3641:36" pos:end="3641:37"><name pos:start="3641:36" pos:end="3641:37">dc</name></expr></argument>, <argument pos:start="3641:40" pos:end="3641:41"><expr pos:start="3641:40" pos:end="3641:41"><name pos:start="3641:40" pos:end="3641:41">rd</name></expr></argument>, <argument pos:start="3641:44" pos:end="3641:46"><expr pos:start="3641:44" pos:end="3641:46"><name pos:start="3641:44" pos:end="3641:46">rs1</name></expr></argument>, <argument pos:start="3641:49" pos:end="3641:51"><expr pos:start="3641:49" pos:end="3641:51"><name pos:start="3641:49" pos:end="3641:51">rs2</name></expr></argument>, <argument pos:start="3641:54" pos:end="3641:68"><expr pos:start="3641:54" pos:end="3641:68"><name pos:start="3641:54" pos:end="3641:68">tcg_gen_add_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3643:21" pos:end="3643:26">break;</break>

                <case pos:start="3645:17" pos:end="3645:27">case <expr pos:start="3645:22" pos:end="3645:26"><literal type="number" pos:start="3645:22" pos:end="3645:26">0x054</literal></expr>:</case> <comment type="block" pos:start="3645:29" pos:end="3645:47">/* VIS I fpsub16 */</comment>

                    <expr_stmt pos:start="3647:21" pos:end="3647:48"><expr pos:start="3647:21" pos:end="3647:47"><call pos:start="3647:21" pos:end="3647:47"><name pos:start="3647:21" pos:end="3647:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3647:38" pos:end="3647:47">(<argument pos:start="3647:39" pos:end="3647:40"><expr pos:start="3647:39" pos:end="3647:40"><name pos:start="3647:39" pos:end="3647:40">dc</name></expr></argument>, <argument pos:start="3647:43" pos:end="3647:46"><expr pos:start="3647:43" pos:end="3647:46"><name pos:start="3647:43" pos:end="3647:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3649:21" pos:end="3649:73"><expr pos:start="3649:21" pos:end="3649:72"><call pos:start="3649:21" pos:end="3649:72"><name pos:start="3649:21" pos:end="3649:34">gen_ne_fop_DDD</name><argument_list pos:start="3649:35" pos:end="3649:72">(<argument pos:start="3649:36" pos:end="3649:37"><expr pos:start="3649:36" pos:end="3649:37"><name pos:start="3649:36" pos:end="3649:37">dc</name></expr></argument>, <argument pos:start="3649:40" pos:end="3649:41"><expr pos:start="3649:40" pos:end="3649:41"><name pos:start="3649:40" pos:end="3649:41">rd</name></expr></argument>, <argument pos:start="3649:44" pos:end="3649:46"><expr pos:start="3649:44" pos:end="3649:46"><name pos:start="3649:44" pos:end="3649:46">rs1</name></expr></argument>, <argument pos:start="3649:49" pos:end="3649:51"><expr pos:start="3649:49" pos:end="3649:51"><name pos:start="3649:49" pos:end="3649:51">rs2</name></expr></argument>, <argument pos:start="3649:54" pos:end="3649:71"><expr pos:start="3649:54" pos:end="3649:71"><name pos:start="3649:54" pos:end="3649:71">gen_helper_fpsub16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3651:21" pos:end="3651:26">break;</break>

                <case pos:start="3653:17" pos:end="3653:27">case <expr pos:start="3653:22" pos:end="3653:26"><literal type="number" pos:start="3653:22" pos:end="3653:26">0x055</literal></expr>:</case> <comment type="block" pos:start="3653:29" pos:end="3653:48">/* VIS I fpsub16s */</comment>

                    <expr_stmt pos:start="3655:21" pos:end="3655:48"><expr pos:start="3655:21" pos:end="3655:47"><call pos:start="3655:21" pos:end="3655:47"><name pos:start="3655:21" pos:end="3655:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3655:38" pos:end="3655:47">(<argument pos:start="3655:39" pos:end="3655:40"><expr pos:start="3655:39" pos:end="3655:40"><name pos:start="3655:39" pos:end="3655:40">dc</name></expr></argument>, <argument pos:start="3655:43" pos:end="3655:46"><expr pos:start="3655:43" pos:end="3655:46"><name pos:start="3655:43" pos:end="3655:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3657:21" pos:end="3657:74"><expr pos:start="3657:21" pos:end="3657:73"><call pos:start="3657:21" pos:end="3657:73"><name pos:start="3657:21" pos:end="3657:34">gen_ne_fop_FFF</name><argument_list pos:start="3657:35" pos:end="3657:73">(<argument pos:start="3657:36" pos:end="3657:37"><expr pos:start="3657:36" pos:end="3657:37"><name pos:start="3657:36" pos:end="3657:37">dc</name></expr></argument>, <argument pos:start="3657:40" pos:end="3657:41"><expr pos:start="3657:40" pos:end="3657:41"><name pos:start="3657:40" pos:end="3657:41">rd</name></expr></argument>, <argument pos:start="3657:44" pos:end="3657:46"><expr pos:start="3657:44" pos:end="3657:46"><name pos:start="3657:44" pos:end="3657:46">rs1</name></expr></argument>, <argument pos:start="3657:49" pos:end="3657:51"><expr pos:start="3657:49" pos:end="3657:51"><name pos:start="3657:49" pos:end="3657:51">rs2</name></expr></argument>, <argument pos:start="3657:54" pos:end="3657:72"><expr pos:start="3657:54" pos:end="3657:72"><name pos:start="3657:54" pos:end="3657:72">gen_helper_fpsub16s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3659:21" pos:end="3659:26">break;</break>

                <case pos:start="3661:17" pos:end="3661:27">case <expr pos:start="3661:22" pos:end="3661:26"><literal type="number" pos:start="3661:22" pos:end="3661:26">0x056</literal></expr>:</case> <comment type="block" pos:start="3661:29" pos:end="3661:47">/* VIS I fpsub32 */</comment>

                    <expr_stmt pos:start="3663:21" pos:end="3663:48"><expr pos:start="3663:21" pos:end="3663:47"><call pos:start="3663:21" pos:end="3663:47"><name pos:start="3663:21" pos:end="3663:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3663:38" pos:end="3663:47">(<argument pos:start="3663:39" pos:end="3663:40"><expr pos:start="3663:39" pos:end="3663:40"><name pos:start="3663:39" pos:end="3663:40">dc</name></expr></argument>, <argument pos:start="3663:43" pos:end="3663:46"><expr pos:start="3663:43" pos:end="3663:46"><name pos:start="3663:43" pos:end="3663:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3665:21" pos:end="3665:73"><expr pos:start="3665:21" pos:end="3665:72"><call pos:start="3665:21" pos:end="3665:72"><name pos:start="3665:21" pos:end="3665:34">gen_ne_fop_DDD</name><argument_list pos:start="3665:35" pos:end="3665:72">(<argument pos:start="3665:36" pos:end="3665:37"><expr pos:start="3665:36" pos:end="3665:37"><name pos:start="3665:36" pos:end="3665:37">dc</name></expr></argument>, <argument pos:start="3665:40" pos:end="3665:41"><expr pos:start="3665:40" pos:end="3665:41"><name pos:start="3665:40" pos:end="3665:41">rd</name></expr></argument>, <argument pos:start="3665:44" pos:end="3665:46"><expr pos:start="3665:44" pos:end="3665:46"><name pos:start="3665:44" pos:end="3665:46">rs1</name></expr></argument>, <argument pos:start="3665:49" pos:end="3665:51"><expr pos:start="3665:49" pos:end="3665:51"><name pos:start="3665:49" pos:end="3665:51">rs2</name></expr></argument>, <argument pos:start="3665:54" pos:end="3665:71"><expr pos:start="3665:54" pos:end="3665:71"><name pos:start="3665:54" pos:end="3665:71">gen_helper_fpsub32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3667:21" pos:end="3667:26">break;</break>

                <case pos:start="3669:17" pos:end="3669:27">case <expr pos:start="3669:22" pos:end="3669:26"><literal type="number" pos:start="3669:22" pos:end="3669:26">0x057</literal></expr>:</case> <comment type="block" pos:start="3669:29" pos:end="3669:48">/* VIS I fpsub32s */</comment>

                    <expr_stmt pos:start="3671:21" pos:end="3671:48"><expr pos:start="3671:21" pos:end="3671:47"><call pos:start="3671:21" pos:end="3671:47"><name pos:start="3671:21" pos:end="3671:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3671:38" pos:end="3671:47">(<argument pos:start="3671:39" pos:end="3671:40"><expr pos:start="3671:39" pos:end="3671:40"><name pos:start="3671:39" pos:end="3671:40">dc</name></expr></argument>, <argument pos:start="3671:43" pos:end="3671:46"><expr pos:start="3671:43" pos:end="3671:46"><name pos:start="3671:43" pos:end="3671:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3673:21" pos:end="3673:70"><expr pos:start="3673:21" pos:end="3673:69"><call pos:start="3673:21" pos:end="3673:69"><name pos:start="3673:21" pos:end="3673:34">gen_ne_fop_FFF</name><argument_list pos:start="3673:35" pos:end="3673:69">(<argument pos:start="3673:36" pos:end="3673:37"><expr pos:start="3673:36" pos:end="3673:37"><name pos:start="3673:36" pos:end="3673:37">dc</name></expr></argument>, <argument pos:start="3673:40" pos:end="3673:41"><expr pos:start="3673:40" pos:end="3673:41"><name pos:start="3673:40" pos:end="3673:41">rd</name></expr></argument>, <argument pos:start="3673:44" pos:end="3673:46"><expr pos:start="3673:44" pos:end="3673:46"><name pos:start="3673:44" pos:end="3673:46">rs1</name></expr></argument>, <argument pos:start="3673:49" pos:end="3673:51"><expr pos:start="3673:49" pos:end="3673:51"><name pos:start="3673:49" pos:end="3673:51">rs2</name></expr></argument>, <argument pos:start="3673:54" pos:end="3673:68"><expr pos:start="3673:54" pos:end="3673:68"><name pos:start="3673:54" pos:end="3673:68">tcg_gen_sub_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3675:21" pos:end="3675:26">break;</break>

                <case pos:start="3677:17" pos:end="3677:27">case <expr pos:start="3677:22" pos:end="3677:26"><literal type="number" pos:start="3677:22" pos:end="3677:26">0x060</literal></expr>:</case> <comment type="block" pos:start="3677:29" pos:end="3677:45">/* VIS I fzero */</comment>

                    <expr_stmt pos:start="3679:21" pos:end="3679:48"><expr pos:start="3679:21" pos:end="3679:47"><call pos:start="3679:21" pos:end="3679:47"><name pos:start="3679:21" pos:end="3679:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3679:38" pos:end="3679:47">(<argument pos:start="3679:39" pos:end="3679:40"><expr pos:start="3679:39" pos:end="3679:40"><name pos:start="3679:39" pos:end="3679:40">dc</name></expr></argument>, <argument pos:start="3679:43" pos:end="3679:46"><expr pos:start="3679:43" pos:end="3679:46"><name pos:start="3679:43" pos:end="3679:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3681:21" pos:end="3681:50"><expr pos:start="3681:21" pos:end="3681:49"><name pos:start="3681:21" pos:end="3681:30">cpu_dst_64</name> <operator pos:start="3681:32" pos:end="3681:32">=</operator> <call pos:start="3681:34" pos:end="3681:49"><name pos:start="3681:34" pos:end="3681:47">gen_dest_fpr_D</name><argument_list pos:start="3681:48" pos:end="3681:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3683:21" pos:end="3683:52"><expr pos:start="3683:21" pos:end="3683:51"><call pos:start="3683:21" pos:end="3683:51"><name pos:start="3683:21" pos:end="3683:36">tcg_gen_movi_i64</name><argument_list pos:start="3683:37" pos:end="3683:51">(<argument pos:start="3683:38" pos:end="3683:47"><expr pos:start="3683:38" pos:end="3683:47"><name pos:start="3683:38" pos:end="3683:47">cpu_dst_64</name></expr></argument>, <argument pos:start="3683:50" pos:end="3683:50"><expr pos:start="3683:50" pos:end="3683:50"><literal type="number" pos:start="3683:50" pos:end="3683:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3685:21" pos:end="3685:56"><expr pos:start="3685:21" pos:end="3685:55"><call pos:start="3685:21" pos:end="3685:55"><name pos:start="3685:21" pos:end="3685:35">gen_store_fpr_D</name><argument_list pos:start="3685:36" pos:end="3685:55">(<argument pos:start="3685:37" pos:end="3685:38"><expr pos:start="3685:37" pos:end="3685:38"><name pos:start="3685:37" pos:end="3685:38">dc</name></expr></argument>, <argument pos:start="3685:41" pos:end="3685:42"><expr pos:start="3685:41" pos:end="3685:42"><name pos:start="3685:41" pos:end="3685:42">rd</name></expr></argument>, <argument pos:start="3685:45" pos:end="3685:54"><expr pos:start="3685:45" pos:end="3685:54"><name pos:start="3685:45" pos:end="3685:54">cpu_dst_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3687:21" pos:end="3687:26">break;</break>

                <case pos:start="3689:17" pos:end="3689:27">case <expr pos:start="3689:22" pos:end="3689:26"><literal type="number" pos:start="3689:22" pos:end="3689:26">0x061</literal></expr>:</case> <comment type="block" pos:start="3689:29" pos:end="3689:46">/* VIS I fzeros */</comment>

                    <expr_stmt pos:start="3691:21" pos:end="3691:48"><expr pos:start="3691:21" pos:end="3691:47"><call pos:start="3691:21" pos:end="3691:47"><name pos:start="3691:21" pos:end="3691:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3691:38" pos:end="3691:47">(<argument pos:start="3691:39" pos:end="3691:40"><expr pos:start="3691:39" pos:end="3691:40"><name pos:start="3691:39" pos:end="3691:40">dc</name></expr></argument>, <argument pos:start="3691:43" pos:end="3691:46"><expr pos:start="3691:43" pos:end="3691:46"><name pos:start="3691:43" pos:end="3691:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3693:21" pos:end="3693:50"><expr pos:start="3693:21" pos:end="3693:49"><name pos:start="3693:21" pos:end="3693:30">cpu_dst_32</name> <operator pos:start="3693:32" pos:end="3693:32">=</operator> <call pos:start="3693:34" pos:end="3693:49"><name pos:start="3693:34" pos:end="3693:47">gen_dest_fpr_F</name><argument_list pos:start="3693:48" pos:end="3693:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3695:21" pos:end="3695:52"><expr pos:start="3695:21" pos:end="3695:51"><call pos:start="3695:21" pos:end="3695:51"><name pos:start="3695:21" pos:end="3695:36">tcg_gen_movi_i32</name><argument_list pos:start="3695:37" pos:end="3695:51">(<argument pos:start="3695:38" pos:end="3695:47"><expr pos:start="3695:38" pos:end="3695:47"><name pos:start="3695:38" pos:end="3695:47">cpu_dst_32</name></expr></argument>, <argument pos:start="3695:50" pos:end="3695:50"><expr pos:start="3695:50" pos:end="3695:50"><literal type="number" pos:start="3695:50" pos:end="3695:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3697:21" pos:end="3697:56"><expr pos:start="3697:21" pos:end="3697:55"><call pos:start="3697:21" pos:end="3697:55"><name pos:start="3697:21" pos:end="3697:35">gen_store_fpr_F</name><argument_list pos:start="3697:36" pos:end="3697:55">(<argument pos:start="3697:37" pos:end="3697:38"><expr pos:start="3697:37" pos:end="3697:38"><name pos:start="3697:37" pos:end="3697:38">dc</name></expr></argument>, <argument pos:start="3697:41" pos:end="3697:42"><expr pos:start="3697:41" pos:end="3697:42"><name pos:start="3697:41" pos:end="3697:42">rd</name></expr></argument>, <argument pos:start="3697:45" pos:end="3697:54"><expr pos:start="3697:45" pos:end="3697:54"><name pos:start="3697:45" pos:end="3697:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3699:21" pos:end="3699:26">break;</break>

                <case pos:start="3701:17" pos:end="3701:27">case <expr pos:start="3701:22" pos:end="3701:26"><literal type="number" pos:start="3701:22" pos:end="3701:26">0x062</literal></expr>:</case> <comment type="block" pos:start="3701:29" pos:end="3701:44">/* VIS I fnor */</comment>

                    <expr_stmt pos:start="3703:21" pos:end="3703:48"><expr pos:start="3703:21" pos:end="3703:47"><call pos:start="3703:21" pos:end="3703:47"><name pos:start="3703:21" pos:end="3703:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3703:38" pos:end="3703:47">(<argument pos:start="3703:39" pos:end="3703:40"><expr pos:start="3703:39" pos:end="3703:40"><name pos:start="3703:39" pos:end="3703:40">dc</name></expr></argument>, <argument pos:start="3703:43" pos:end="3703:46"><expr pos:start="3703:43" pos:end="3703:46"><name pos:start="3703:43" pos:end="3703:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3705:21" pos:end="3705:70"><expr pos:start="3705:21" pos:end="3705:69"><call pos:start="3705:21" pos:end="3705:69"><name pos:start="3705:21" pos:end="3705:34">gen_ne_fop_DDD</name><argument_list pos:start="3705:35" pos:end="3705:69">(<argument pos:start="3705:36" pos:end="3705:37"><expr pos:start="3705:36" pos:end="3705:37"><name pos:start="3705:36" pos:end="3705:37">dc</name></expr></argument>, <argument pos:start="3705:40" pos:end="3705:41"><expr pos:start="3705:40" pos:end="3705:41"><name pos:start="3705:40" pos:end="3705:41">rd</name></expr></argument>, <argument pos:start="3705:44" pos:end="3705:46"><expr pos:start="3705:44" pos:end="3705:46"><name pos:start="3705:44" pos:end="3705:46">rs1</name></expr></argument>, <argument pos:start="3705:49" pos:end="3705:51"><expr pos:start="3705:49" pos:end="3705:51"><name pos:start="3705:49" pos:end="3705:51">rs2</name></expr></argument>, <argument pos:start="3705:54" pos:end="3705:68"><expr pos:start="3705:54" pos:end="3705:68"><name pos:start="3705:54" pos:end="3705:68">tcg_gen_nor_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3707:21" pos:end="3707:26">break;</break>

                <case pos:start="3709:17" pos:end="3709:27">case <expr pos:start="3709:22" pos:end="3709:26"><literal type="number" pos:start="3709:22" pos:end="3709:26">0x063</literal></expr>:</case> <comment type="block" pos:start="3709:29" pos:end="3709:45">/* VIS I fnors */</comment>

                    <expr_stmt pos:start="3711:21" pos:end="3711:48"><expr pos:start="3711:21" pos:end="3711:47"><call pos:start="3711:21" pos:end="3711:47"><name pos:start="3711:21" pos:end="3711:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3711:38" pos:end="3711:47">(<argument pos:start="3711:39" pos:end="3711:40"><expr pos:start="3711:39" pos:end="3711:40"><name pos:start="3711:39" pos:end="3711:40">dc</name></expr></argument>, <argument pos:start="3711:43" pos:end="3711:46"><expr pos:start="3711:43" pos:end="3711:46"><name pos:start="3711:43" pos:end="3711:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3713:21" pos:end="3713:70"><expr pos:start="3713:21" pos:end="3713:69"><call pos:start="3713:21" pos:end="3713:69"><name pos:start="3713:21" pos:end="3713:34">gen_ne_fop_FFF</name><argument_list pos:start="3713:35" pos:end="3713:69">(<argument pos:start="3713:36" pos:end="3713:37"><expr pos:start="3713:36" pos:end="3713:37"><name pos:start="3713:36" pos:end="3713:37">dc</name></expr></argument>, <argument pos:start="3713:40" pos:end="3713:41"><expr pos:start="3713:40" pos:end="3713:41"><name pos:start="3713:40" pos:end="3713:41">rd</name></expr></argument>, <argument pos:start="3713:44" pos:end="3713:46"><expr pos:start="3713:44" pos:end="3713:46"><name pos:start="3713:44" pos:end="3713:46">rs1</name></expr></argument>, <argument pos:start="3713:49" pos:end="3713:51"><expr pos:start="3713:49" pos:end="3713:51"><name pos:start="3713:49" pos:end="3713:51">rs2</name></expr></argument>, <argument pos:start="3713:54" pos:end="3713:68"><expr pos:start="3713:54" pos:end="3713:68"><name pos:start="3713:54" pos:end="3713:68">tcg_gen_nor_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3715:21" pos:end="3715:26">break;</break>

                <case pos:start="3717:17" pos:end="3717:27">case <expr pos:start="3717:22" pos:end="3717:26"><literal type="number" pos:start="3717:22" pos:end="3717:26">0x064</literal></expr>:</case> <comment type="block" pos:start="3717:29" pos:end="3717:48">/* VIS I fandnot2 */</comment>

                    <expr_stmt pos:start="3719:21" pos:end="3719:48"><expr pos:start="3719:21" pos:end="3719:47"><call pos:start="3719:21" pos:end="3719:47"><name pos:start="3719:21" pos:end="3719:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3719:38" pos:end="3719:47">(<argument pos:start="3719:39" pos:end="3719:40"><expr pos:start="3719:39" pos:end="3719:40"><name pos:start="3719:39" pos:end="3719:40">dc</name></expr></argument>, <argument pos:start="3719:43" pos:end="3719:46"><expr pos:start="3719:43" pos:end="3719:46"><name pos:start="3719:43" pos:end="3719:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3721:21" pos:end="3721:71"><expr pos:start="3721:21" pos:end="3721:70"><call pos:start="3721:21" pos:end="3721:70"><name pos:start="3721:21" pos:end="3721:34">gen_ne_fop_DDD</name><argument_list pos:start="3721:35" pos:end="3721:70">(<argument pos:start="3721:36" pos:end="3721:37"><expr pos:start="3721:36" pos:end="3721:37"><name pos:start="3721:36" pos:end="3721:37">dc</name></expr></argument>, <argument pos:start="3721:40" pos:end="3721:41"><expr pos:start="3721:40" pos:end="3721:41"><name pos:start="3721:40" pos:end="3721:41">rd</name></expr></argument>, <argument pos:start="3721:44" pos:end="3721:46"><expr pos:start="3721:44" pos:end="3721:46"><name pos:start="3721:44" pos:end="3721:46">rs1</name></expr></argument>, <argument pos:start="3721:49" pos:end="3721:51"><expr pos:start="3721:49" pos:end="3721:51"><name pos:start="3721:49" pos:end="3721:51">rs2</name></expr></argument>, <argument pos:start="3721:54" pos:end="3721:69"><expr pos:start="3721:54" pos:end="3721:69"><name pos:start="3721:54" pos:end="3721:69">tcg_gen_andc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3723:21" pos:end="3723:26">break;</break>

                <case pos:start="3725:17" pos:end="3725:27">case <expr pos:start="3725:22" pos:end="3725:26"><literal type="number" pos:start="3725:22" pos:end="3725:26">0x065</literal></expr>:</case> <comment type="block" pos:start="3725:29" pos:end="3725:49">/* VIS I fandnot2s */</comment>

                    <expr_stmt pos:start="3727:21" pos:end="3727:48"><expr pos:start="3727:21" pos:end="3727:47"><call pos:start="3727:21" pos:end="3727:47"><name pos:start="3727:21" pos:end="3727:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3727:38" pos:end="3727:47">(<argument pos:start="3727:39" pos:end="3727:40"><expr pos:start="3727:39" pos:end="3727:40"><name pos:start="3727:39" pos:end="3727:40">dc</name></expr></argument>, <argument pos:start="3727:43" pos:end="3727:46"><expr pos:start="3727:43" pos:end="3727:46"><name pos:start="3727:43" pos:end="3727:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3729:21" pos:end="3729:71"><expr pos:start="3729:21" pos:end="3729:70"><call pos:start="3729:21" pos:end="3729:70"><name pos:start="3729:21" pos:end="3729:34">gen_ne_fop_FFF</name><argument_list pos:start="3729:35" pos:end="3729:70">(<argument pos:start="3729:36" pos:end="3729:37"><expr pos:start="3729:36" pos:end="3729:37"><name pos:start="3729:36" pos:end="3729:37">dc</name></expr></argument>, <argument pos:start="3729:40" pos:end="3729:41"><expr pos:start="3729:40" pos:end="3729:41"><name pos:start="3729:40" pos:end="3729:41">rd</name></expr></argument>, <argument pos:start="3729:44" pos:end="3729:46"><expr pos:start="3729:44" pos:end="3729:46"><name pos:start="3729:44" pos:end="3729:46">rs1</name></expr></argument>, <argument pos:start="3729:49" pos:end="3729:51"><expr pos:start="3729:49" pos:end="3729:51"><name pos:start="3729:49" pos:end="3729:51">rs2</name></expr></argument>, <argument pos:start="3729:54" pos:end="3729:69"><expr pos:start="3729:54" pos:end="3729:69"><name pos:start="3729:54" pos:end="3729:69">tcg_gen_andc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3731:21" pos:end="3731:26">break;</break>

                <case pos:start="3733:17" pos:end="3733:27">case <expr pos:start="3733:22" pos:end="3733:26"><literal type="number" pos:start="3733:22" pos:end="3733:26">0x066</literal></expr>:</case> <comment type="block" pos:start="3733:29" pos:end="3733:45">/* VIS I fnot2 */</comment>

                    <expr_stmt pos:start="3735:21" pos:end="3735:48"><expr pos:start="3735:21" pos:end="3735:47"><call pos:start="3735:21" pos:end="3735:47"><name pos:start="3735:21" pos:end="3735:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3735:38" pos:end="3735:47">(<argument pos:start="3735:39" pos:end="3735:40"><expr pos:start="3735:39" pos:end="3735:40"><name pos:start="3735:39" pos:end="3735:40">dc</name></expr></argument>, <argument pos:start="3735:43" pos:end="3735:46"><expr pos:start="3735:43" pos:end="3735:46"><name pos:start="3735:43" pos:end="3735:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3737:21" pos:end="3737:64"><expr pos:start="3737:21" pos:end="3737:63"><call pos:start="3737:21" pos:end="3737:63"><name pos:start="3737:21" pos:end="3737:33">gen_ne_fop_DD</name><argument_list pos:start="3737:34" pos:end="3737:63">(<argument pos:start="3737:35" pos:end="3737:36"><expr pos:start="3737:35" pos:end="3737:36"><name pos:start="3737:35" pos:end="3737:36">dc</name></expr></argument>, <argument pos:start="3737:39" pos:end="3737:40"><expr pos:start="3737:39" pos:end="3737:40"><name pos:start="3737:39" pos:end="3737:40">rd</name></expr></argument>, <argument pos:start="3737:43" pos:end="3737:45"><expr pos:start="3737:43" pos:end="3737:45"><name pos:start="3737:43" pos:end="3737:45">rs2</name></expr></argument>, <argument pos:start="3737:48" pos:end="3737:62"><expr pos:start="3737:48" pos:end="3737:62"><name pos:start="3737:48" pos:end="3737:62">tcg_gen_not_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3739:21" pos:end="3739:26">break;</break>

                <case pos:start="3741:17" pos:end="3741:27">case <expr pos:start="3741:22" pos:end="3741:26"><literal type="number" pos:start="3741:22" pos:end="3741:26">0x067</literal></expr>:</case> <comment type="block" pos:start="3741:29" pos:end="3741:46">/* VIS I fnot2s */</comment>

                    <expr_stmt pos:start="3743:21" pos:end="3743:48"><expr pos:start="3743:21" pos:end="3743:47"><call pos:start="3743:21" pos:end="3743:47"><name pos:start="3743:21" pos:end="3743:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3743:38" pos:end="3743:47">(<argument pos:start="3743:39" pos:end="3743:40"><expr pos:start="3743:39" pos:end="3743:40"><name pos:start="3743:39" pos:end="3743:40">dc</name></expr></argument>, <argument pos:start="3743:43" pos:end="3743:46"><expr pos:start="3743:43" pos:end="3743:46"><name pos:start="3743:43" pos:end="3743:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3745:21" pos:end="3745:64"><expr pos:start="3745:21" pos:end="3745:63"><call pos:start="3745:21" pos:end="3745:63"><name pos:start="3745:21" pos:end="3745:33">gen_ne_fop_FF</name><argument_list pos:start="3745:34" pos:end="3745:63">(<argument pos:start="3745:35" pos:end="3745:36"><expr pos:start="3745:35" pos:end="3745:36"><name pos:start="3745:35" pos:end="3745:36">dc</name></expr></argument>, <argument pos:start="3745:39" pos:end="3745:40"><expr pos:start="3745:39" pos:end="3745:40"><name pos:start="3745:39" pos:end="3745:40">rd</name></expr></argument>, <argument pos:start="3745:43" pos:end="3745:45"><expr pos:start="3745:43" pos:end="3745:45"><name pos:start="3745:43" pos:end="3745:45">rs2</name></expr></argument>, <argument pos:start="3745:48" pos:end="3745:62"><expr pos:start="3745:48" pos:end="3745:62"><name pos:start="3745:48" pos:end="3745:62">tcg_gen_not_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3747:21" pos:end="3747:26">break;</break>

                <case pos:start="3749:17" pos:end="3749:27">case <expr pos:start="3749:22" pos:end="3749:26"><literal type="number" pos:start="3749:22" pos:end="3749:26">0x068</literal></expr>:</case> <comment type="block" pos:start="3749:29" pos:end="3749:48">/* VIS I fandnot1 */</comment>

                    <expr_stmt pos:start="3751:21" pos:end="3751:48"><expr pos:start="3751:21" pos:end="3751:47"><call pos:start="3751:21" pos:end="3751:47"><name pos:start="3751:21" pos:end="3751:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3751:38" pos:end="3751:47">(<argument pos:start="3751:39" pos:end="3751:40"><expr pos:start="3751:39" pos:end="3751:40"><name pos:start="3751:39" pos:end="3751:40">dc</name></expr></argument>, <argument pos:start="3751:43" pos:end="3751:46"><expr pos:start="3751:43" pos:end="3751:46"><name pos:start="3751:43" pos:end="3751:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3753:21" pos:end="3753:71"><expr pos:start="3753:21" pos:end="3753:70"><call pos:start="3753:21" pos:end="3753:70"><name pos:start="3753:21" pos:end="3753:34">gen_ne_fop_DDD</name><argument_list pos:start="3753:35" pos:end="3753:70">(<argument pos:start="3753:36" pos:end="3753:37"><expr pos:start="3753:36" pos:end="3753:37"><name pos:start="3753:36" pos:end="3753:37">dc</name></expr></argument>, <argument pos:start="3753:40" pos:end="3753:41"><expr pos:start="3753:40" pos:end="3753:41"><name pos:start="3753:40" pos:end="3753:41">rd</name></expr></argument>, <argument pos:start="3753:44" pos:end="3753:46"><expr pos:start="3753:44" pos:end="3753:46"><name pos:start="3753:44" pos:end="3753:46">rs2</name></expr></argument>, <argument pos:start="3753:49" pos:end="3753:51"><expr pos:start="3753:49" pos:end="3753:51"><name pos:start="3753:49" pos:end="3753:51">rs1</name></expr></argument>, <argument pos:start="3753:54" pos:end="3753:69"><expr pos:start="3753:54" pos:end="3753:69"><name pos:start="3753:54" pos:end="3753:69">tcg_gen_andc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3755:21" pos:end="3755:26">break;</break>

                <case pos:start="3757:17" pos:end="3757:27">case <expr pos:start="3757:22" pos:end="3757:26"><literal type="number" pos:start="3757:22" pos:end="3757:26">0x069</literal></expr>:</case> <comment type="block" pos:start="3757:29" pos:end="3757:49">/* VIS I fandnot1s */</comment>

                    <expr_stmt pos:start="3759:21" pos:end="3759:48"><expr pos:start="3759:21" pos:end="3759:47"><call pos:start="3759:21" pos:end="3759:47"><name pos:start="3759:21" pos:end="3759:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3759:38" pos:end="3759:47">(<argument pos:start="3759:39" pos:end="3759:40"><expr pos:start="3759:39" pos:end="3759:40"><name pos:start="3759:39" pos:end="3759:40">dc</name></expr></argument>, <argument pos:start="3759:43" pos:end="3759:46"><expr pos:start="3759:43" pos:end="3759:46"><name pos:start="3759:43" pos:end="3759:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3761:21" pos:end="3761:71"><expr pos:start="3761:21" pos:end="3761:70"><call pos:start="3761:21" pos:end="3761:70"><name pos:start="3761:21" pos:end="3761:34">gen_ne_fop_FFF</name><argument_list pos:start="3761:35" pos:end="3761:70">(<argument pos:start="3761:36" pos:end="3761:37"><expr pos:start="3761:36" pos:end="3761:37"><name pos:start="3761:36" pos:end="3761:37">dc</name></expr></argument>, <argument pos:start="3761:40" pos:end="3761:41"><expr pos:start="3761:40" pos:end="3761:41"><name pos:start="3761:40" pos:end="3761:41">rd</name></expr></argument>, <argument pos:start="3761:44" pos:end="3761:46"><expr pos:start="3761:44" pos:end="3761:46"><name pos:start="3761:44" pos:end="3761:46">rs2</name></expr></argument>, <argument pos:start="3761:49" pos:end="3761:51"><expr pos:start="3761:49" pos:end="3761:51"><name pos:start="3761:49" pos:end="3761:51">rs1</name></expr></argument>, <argument pos:start="3761:54" pos:end="3761:69"><expr pos:start="3761:54" pos:end="3761:69"><name pos:start="3761:54" pos:end="3761:69">tcg_gen_andc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3763:21" pos:end="3763:26">break;</break>

                <case pos:start="3765:17" pos:end="3765:27">case <expr pos:start="3765:22" pos:end="3765:26"><literal type="number" pos:start="3765:22" pos:end="3765:26">0x06a</literal></expr>:</case> <comment type="block" pos:start="3765:29" pos:end="3765:45">/* VIS I fnot1 */</comment>

                    <expr_stmt pos:start="3767:21" pos:end="3767:48"><expr pos:start="3767:21" pos:end="3767:47"><call pos:start="3767:21" pos:end="3767:47"><name pos:start="3767:21" pos:end="3767:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3767:38" pos:end="3767:47">(<argument pos:start="3767:39" pos:end="3767:40"><expr pos:start="3767:39" pos:end="3767:40"><name pos:start="3767:39" pos:end="3767:40">dc</name></expr></argument>, <argument pos:start="3767:43" pos:end="3767:46"><expr pos:start="3767:43" pos:end="3767:46"><name pos:start="3767:43" pos:end="3767:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3769:21" pos:end="3769:64"><expr pos:start="3769:21" pos:end="3769:63"><call pos:start="3769:21" pos:end="3769:63"><name pos:start="3769:21" pos:end="3769:33">gen_ne_fop_DD</name><argument_list pos:start="3769:34" pos:end="3769:63">(<argument pos:start="3769:35" pos:end="3769:36"><expr pos:start="3769:35" pos:end="3769:36"><name pos:start="3769:35" pos:end="3769:36">dc</name></expr></argument>, <argument pos:start="3769:39" pos:end="3769:40"><expr pos:start="3769:39" pos:end="3769:40"><name pos:start="3769:39" pos:end="3769:40">rd</name></expr></argument>, <argument pos:start="3769:43" pos:end="3769:45"><expr pos:start="3769:43" pos:end="3769:45"><name pos:start="3769:43" pos:end="3769:45">rs1</name></expr></argument>, <argument pos:start="3769:48" pos:end="3769:62"><expr pos:start="3769:48" pos:end="3769:62"><name pos:start="3769:48" pos:end="3769:62">tcg_gen_not_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3771:21" pos:end="3771:26">break;</break>

                <case pos:start="3773:17" pos:end="3773:27">case <expr pos:start="3773:22" pos:end="3773:26"><literal type="number" pos:start="3773:22" pos:end="3773:26">0x06b</literal></expr>:</case> <comment type="block" pos:start="3773:29" pos:end="3773:46">/* VIS I fnot1s */</comment>

                    <expr_stmt pos:start="3775:21" pos:end="3775:48"><expr pos:start="3775:21" pos:end="3775:47"><call pos:start="3775:21" pos:end="3775:47"><name pos:start="3775:21" pos:end="3775:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3775:38" pos:end="3775:47">(<argument pos:start="3775:39" pos:end="3775:40"><expr pos:start="3775:39" pos:end="3775:40"><name pos:start="3775:39" pos:end="3775:40">dc</name></expr></argument>, <argument pos:start="3775:43" pos:end="3775:46"><expr pos:start="3775:43" pos:end="3775:46"><name pos:start="3775:43" pos:end="3775:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3777:21" pos:end="3777:64"><expr pos:start="3777:21" pos:end="3777:63"><call pos:start="3777:21" pos:end="3777:63"><name pos:start="3777:21" pos:end="3777:33">gen_ne_fop_FF</name><argument_list pos:start="3777:34" pos:end="3777:63">(<argument pos:start="3777:35" pos:end="3777:36"><expr pos:start="3777:35" pos:end="3777:36"><name pos:start="3777:35" pos:end="3777:36">dc</name></expr></argument>, <argument pos:start="3777:39" pos:end="3777:40"><expr pos:start="3777:39" pos:end="3777:40"><name pos:start="3777:39" pos:end="3777:40">rd</name></expr></argument>, <argument pos:start="3777:43" pos:end="3777:45"><expr pos:start="3777:43" pos:end="3777:45"><name pos:start="3777:43" pos:end="3777:45">rs1</name></expr></argument>, <argument pos:start="3777:48" pos:end="3777:62"><expr pos:start="3777:48" pos:end="3777:62"><name pos:start="3777:48" pos:end="3777:62">tcg_gen_not_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3779:21" pos:end="3779:26">break;</break>

                <case pos:start="3781:17" pos:end="3781:27">case <expr pos:start="3781:22" pos:end="3781:26"><literal type="number" pos:start="3781:22" pos:end="3781:26">0x06c</literal></expr>:</case> <comment type="block" pos:start="3781:29" pos:end="3781:44">/* VIS I fxor */</comment>

                    <expr_stmt pos:start="3783:21" pos:end="3783:48"><expr pos:start="3783:21" pos:end="3783:47"><call pos:start="3783:21" pos:end="3783:47"><name pos:start="3783:21" pos:end="3783:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3783:38" pos:end="3783:47">(<argument pos:start="3783:39" pos:end="3783:40"><expr pos:start="3783:39" pos:end="3783:40"><name pos:start="3783:39" pos:end="3783:40">dc</name></expr></argument>, <argument pos:start="3783:43" pos:end="3783:46"><expr pos:start="3783:43" pos:end="3783:46"><name pos:start="3783:43" pos:end="3783:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3785:21" pos:end="3785:70"><expr pos:start="3785:21" pos:end="3785:69"><call pos:start="3785:21" pos:end="3785:69"><name pos:start="3785:21" pos:end="3785:34">gen_ne_fop_DDD</name><argument_list pos:start="3785:35" pos:end="3785:69">(<argument pos:start="3785:36" pos:end="3785:37"><expr pos:start="3785:36" pos:end="3785:37"><name pos:start="3785:36" pos:end="3785:37">dc</name></expr></argument>, <argument pos:start="3785:40" pos:end="3785:41"><expr pos:start="3785:40" pos:end="3785:41"><name pos:start="3785:40" pos:end="3785:41">rd</name></expr></argument>, <argument pos:start="3785:44" pos:end="3785:46"><expr pos:start="3785:44" pos:end="3785:46"><name pos:start="3785:44" pos:end="3785:46">rs1</name></expr></argument>, <argument pos:start="3785:49" pos:end="3785:51"><expr pos:start="3785:49" pos:end="3785:51"><name pos:start="3785:49" pos:end="3785:51">rs2</name></expr></argument>, <argument pos:start="3785:54" pos:end="3785:68"><expr pos:start="3785:54" pos:end="3785:68"><name pos:start="3785:54" pos:end="3785:68">tcg_gen_xor_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3787:21" pos:end="3787:26">break;</break>

                <case pos:start="3789:17" pos:end="3789:27">case <expr pos:start="3789:22" pos:end="3789:26"><literal type="number" pos:start="3789:22" pos:end="3789:26">0x06d</literal></expr>:</case> <comment type="block" pos:start="3789:29" pos:end="3789:45">/* VIS I fxors */</comment>

                    <expr_stmt pos:start="3791:21" pos:end="3791:48"><expr pos:start="3791:21" pos:end="3791:47"><call pos:start="3791:21" pos:end="3791:47"><name pos:start="3791:21" pos:end="3791:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3791:38" pos:end="3791:47">(<argument pos:start="3791:39" pos:end="3791:40"><expr pos:start="3791:39" pos:end="3791:40"><name pos:start="3791:39" pos:end="3791:40">dc</name></expr></argument>, <argument pos:start="3791:43" pos:end="3791:46"><expr pos:start="3791:43" pos:end="3791:46"><name pos:start="3791:43" pos:end="3791:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3793:21" pos:end="3793:70"><expr pos:start="3793:21" pos:end="3793:69"><call pos:start="3793:21" pos:end="3793:69"><name pos:start="3793:21" pos:end="3793:34">gen_ne_fop_FFF</name><argument_list pos:start="3793:35" pos:end="3793:69">(<argument pos:start="3793:36" pos:end="3793:37"><expr pos:start="3793:36" pos:end="3793:37"><name pos:start="3793:36" pos:end="3793:37">dc</name></expr></argument>, <argument pos:start="3793:40" pos:end="3793:41"><expr pos:start="3793:40" pos:end="3793:41"><name pos:start="3793:40" pos:end="3793:41">rd</name></expr></argument>, <argument pos:start="3793:44" pos:end="3793:46"><expr pos:start="3793:44" pos:end="3793:46"><name pos:start="3793:44" pos:end="3793:46">rs1</name></expr></argument>, <argument pos:start="3793:49" pos:end="3793:51"><expr pos:start="3793:49" pos:end="3793:51"><name pos:start="3793:49" pos:end="3793:51">rs2</name></expr></argument>, <argument pos:start="3793:54" pos:end="3793:68"><expr pos:start="3793:54" pos:end="3793:68"><name pos:start="3793:54" pos:end="3793:68">tcg_gen_xor_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3795:21" pos:end="3795:26">break;</break>

                <case pos:start="3797:17" pos:end="3797:27">case <expr pos:start="3797:22" pos:end="3797:26"><literal type="number" pos:start="3797:22" pos:end="3797:26">0x06e</literal></expr>:</case> <comment type="block" pos:start="3797:29" pos:end="3797:45">/* VIS I fnand */</comment>

                    <expr_stmt pos:start="3799:21" pos:end="3799:48"><expr pos:start="3799:21" pos:end="3799:47"><call pos:start="3799:21" pos:end="3799:47"><name pos:start="3799:21" pos:end="3799:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3799:38" pos:end="3799:47">(<argument pos:start="3799:39" pos:end="3799:40"><expr pos:start="3799:39" pos:end="3799:40"><name pos:start="3799:39" pos:end="3799:40">dc</name></expr></argument>, <argument pos:start="3799:43" pos:end="3799:46"><expr pos:start="3799:43" pos:end="3799:46"><name pos:start="3799:43" pos:end="3799:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3801:21" pos:end="3801:71"><expr pos:start="3801:21" pos:end="3801:70"><call pos:start="3801:21" pos:end="3801:70"><name pos:start="3801:21" pos:end="3801:34">gen_ne_fop_DDD</name><argument_list pos:start="3801:35" pos:end="3801:70">(<argument pos:start="3801:36" pos:end="3801:37"><expr pos:start="3801:36" pos:end="3801:37"><name pos:start="3801:36" pos:end="3801:37">dc</name></expr></argument>, <argument pos:start="3801:40" pos:end="3801:41"><expr pos:start="3801:40" pos:end="3801:41"><name pos:start="3801:40" pos:end="3801:41">rd</name></expr></argument>, <argument pos:start="3801:44" pos:end="3801:46"><expr pos:start="3801:44" pos:end="3801:46"><name pos:start="3801:44" pos:end="3801:46">rs1</name></expr></argument>, <argument pos:start="3801:49" pos:end="3801:51"><expr pos:start="3801:49" pos:end="3801:51"><name pos:start="3801:49" pos:end="3801:51">rs2</name></expr></argument>, <argument pos:start="3801:54" pos:end="3801:69"><expr pos:start="3801:54" pos:end="3801:69"><name pos:start="3801:54" pos:end="3801:69">tcg_gen_nand_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3803:21" pos:end="3803:26">break;</break>

                <case pos:start="3805:17" pos:end="3805:27">case <expr pos:start="3805:22" pos:end="3805:26"><literal type="number" pos:start="3805:22" pos:end="3805:26">0x06f</literal></expr>:</case> <comment type="block" pos:start="3805:29" pos:end="3805:46">/* VIS I fnands */</comment>

                    <expr_stmt pos:start="3807:21" pos:end="3807:48"><expr pos:start="3807:21" pos:end="3807:47"><call pos:start="3807:21" pos:end="3807:47"><name pos:start="3807:21" pos:end="3807:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3807:38" pos:end="3807:47">(<argument pos:start="3807:39" pos:end="3807:40"><expr pos:start="3807:39" pos:end="3807:40"><name pos:start="3807:39" pos:end="3807:40">dc</name></expr></argument>, <argument pos:start="3807:43" pos:end="3807:46"><expr pos:start="3807:43" pos:end="3807:46"><name pos:start="3807:43" pos:end="3807:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3809:21" pos:end="3809:71"><expr pos:start="3809:21" pos:end="3809:70"><call pos:start="3809:21" pos:end="3809:70"><name pos:start="3809:21" pos:end="3809:34">gen_ne_fop_FFF</name><argument_list pos:start="3809:35" pos:end="3809:70">(<argument pos:start="3809:36" pos:end="3809:37"><expr pos:start="3809:36" pos:end="3809:37"><name pos:start="3809:36" pos:end="3809:37">dc</name></expr></argument>, <argument pos:start="3809:40" pos:end="3809:41"><expr pos:start="3809:40" pos:end="3809:41"><name pos:start="3809:40" pos:end="3809:41">rd</name></expr></argument>, <argument pos:start="3809:44" pos:end="3809:46"><expr pos:start="3809:44" pos:end="3809:46"><name pos:start="3809:44" pos:end="3809:46">rs1</name></expr></argument>, <argument pos:start="3809:49" pos:end="3809:51"><expr pos:start="3809:49" pos:end="3809:51"><name pos:start="3809:49" pos:end="3809:51">rs2</name></expr></argument>, <argument pos:start="3809:54" pos:end="3809:69"><expr pos:start="3809:54" pos:end="3809:69"><name pos:start="3809:54" pos:end="3809:69">tcg_gen_nand_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3811:21" pos:end="3811:26">break;</break>

                <case pos:start="3813:17" pos:end="3813:27">case <expr pos:start="3813:22" pos:end="3813:26"><literal type="number" pos:start="3813:22" pos:end="3813:26">0x070</literal></expr>:</case> <comment type="block" pos:start="3813:29" pos:end="3813:44">/* VIS I fand */</comment>

                    <expr_stmt pos:start="3815:21" pos:end="3815:48"><expr pos:start="3815:21" pos:end="3815:47"><call pos:start="3815:21" pos:end="3815:47"><name pos:start="3815:21" pos:end="3815:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3815:38" pos:end="3815:47">(<argument pos:start="3815:39" pos:end="3815:40"><expr pos:start="3815:39" pos:end="3815:40"><name pos:start="3815:39" pos:end="3815:40">dc</name></expr></argument>, <argument pos:start="3815:43" pos:end="3815:46"><expr pos:start="3815:43" pos:end="3815:46"><name pos:start="3815:43" pos:end="3815:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3817:21" pos:end="3817:70"><expr pos:start="3817:21" pos:end="3817:69"><call pos:start="3817:21" pos:end="3817:69"><name pos:start="3817:21" pos:end="3817:34">gen_ne_fop_DDD</name><argument_list pos:start="3817:35" pos:end="3817:69">(<argument pos:start="3817:36" pos:end="3817:37"><expr pos:start="3817:36" pos:end="3817:37"><name pos:start="3817:36" pos:end="3817:37">dc</name></expr></argument>, <argument pos:start="3817:40" pos:end="3817:41"><expr pos:start="3817:40" pos:end="3817:41"><name pos:start="3817:40" pos:end="3817:41">rd</name></expr></argument>, <argument pos:start="3817:44" pos:end="3817:46"><expr pos:start="3817:44" pos:end="3817:46"><name pos:start="3817:44" pos:end="3817:46">rs1</name></expr></argument>, <argument pos:start="3817:49" pos:end="3817:51"><expr pos:start="3817:49" pos:end="3817:51"><name pos:start="3817:49" pos:end="3817:51">rs2</name></expr></argument>, <argument pos:start="3817:54" pos:end="3817:68"><expr pos:start="3817:54" pos:end="3817:68"><name pos:start="3817:54" pos:end="3817:68">tcg_gen_and_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3819:21" pos:end="3819:26">break;</break>

                <case pos:start="3821:17" pos:end="3821:27">case <expr pos:start="3821:22" pos:end="3821:26"><literal type="number" pos:start="3821:22" pos:end="3821:26">0x071</literal></expr>:</case> <comment type="block" pos:start="3821:29" pos:end="3821:45">/* VIS I fands */</comment>

                    <expr_stmt pos:start="3823:21" pos:end="3823:48"><expr pos:start="3823:21" pos:end="3823:47"><call pos:start="3823:21" pos:end="3823:47"><name pos:start="3823:21" pos:end="3823:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3823:38" pos:end="3823:47">(<argument pos:start="3823:39" pos:end="3823:40"><expr pos:start="3823:39" pos:end="3823:40"><name pos:start="3823:39" pos:end="3823:40">dc</name></expr></argument>, <argument pos:start="3823:43" pos:end="3823:46"><expr pos:start="3823:43" pos:end="3823:46"><name pos:start="3823:43" pos:end="3823:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3825:21" pos:end="3825:70"><expr pos:start="3825:21" pos:end="3825:69"><call pos:start="3825:21" pos:end="3825:69"><name pos:start="3825:21" pos:end="3825:34">gen_ne_fop_FFF</name><argument_list pos:start="3825:35" pos:end="3825:69">(<argument pos:start="3825:36" pos:end="3825:37"><expr pos:start="3825:36" pos:end="3825:37"><name pos:start="3825:36" pos:end="3825:37">dc</name></expr></argument>, <argument pos:start="3825:40" pos:end="3825:41"><expr pos:start="3825:40" pos:end="3825:41"><name pos:start="3825:40" pos:end="3825:41">rd</name></expr></argument>, <argument pos:start="3825:44" pos:end="3825:46"><expr pos:start="3825:44" pos:end="3825:46"><name pos:start="3825:44" pos:end="3825:46">rs1</name></expr></argument>, <argument pos:start="3825:49" pos:end="3825:51"><expr pos:start="3825:49" pos:end="3825:51"><name pos:start="3825:49" pos:end="3825:51">rs2</name></expr></argument>, <argument pos:start="3825:54" pos:end="3825:68"><expr pos:start="3825:54" pos:end="3825:68"><name pos:start="3825:54" pos:end="3825:68">tcg_gen_and_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3827:21" pos:end="3827:26">break;</break>

                <case pos:start="3829:17" pos:end="3829:27">case <expr pos:start="3829:22" pos:end="3829:26"><literal type="number" pos:start="3829:22" pos:end="3829:26">0x072</literal></expr>:</case> <comment type="block" pos:start="3829:29" pos:end="3829:45">/* VIS I fxnor */</comment>

                    <expr_stmt pos:start="3831:21" pos:end="3831:48"><expr pos:start="3831:21" pos:end="3831:47"><call pos:start="3831:21" pos:end="3831:47"><name pos:start="3831:21" pos:end="3831:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3831:38" pos:end="3831:47">(<argument pos:start="3831:39" pos:end="3831:40"><expr pos:start="3831:39" pos:end="3831:40"><name pos:start="3831:39" pos:end="3831:40">dc</name></expr></argument>, <argument pos:start="3831:43" pos:end="3831:46"><expr pos:start="3831:43" pos:end="3831:46"><name pos:start="3831:43" pos:end="3831:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3833:21" pos:end="3833:70"><expr pos:start="3833:21" pos:end="3833:69"><call pos:start="3833:21" pos:end="3833:69"><name pos:start="3833:21" pos:end="3833:34">gen_ne_fop_DDD</name><argument_list pos:start="3833:35" pos:end="3833:69">(<argument pos:start="3833:36" pos:end="3833:37"><expr pos:start="3833:36" pos:end="3833:37"><name pos:start="3833:36" pos:end="3833:37">dc</name></expr></argument>, <argument pos:start="3833:40" pos:end="3833:41"><expr pos:start="3833:40" pos:end="3833:41"><name pos:start="3833:40" pos:end="3833:41">rd</name></expr></argument>, <argument pos:start="3833:44" pos:end="3833:46"><expr pos:start="3833:44" pos:end="3833:46"><name pos:start="3833:44" pos:end="3833:46">rs1</name></expr></argument>, <argument pos:start="3833:49" pos:end="3833:51"><expr pos:start="3833:49" pos:end="3833:51"><name pos:start="3833:49" pos:end="3833:51">rs2</name></expr></argument>, <argument pos:start="3833:54" pos:end="3833:68"><expr pos:start="3833:54" pos:end="3833:68"><name pos:start="3833:54" pos:end="3833:68">tcg_gen_eqv_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3835:21" pos:end="3835:26">break;</break>

                <case pos:start="3837:17" pos:end="3837:27">case <expr pos:start="3837:22" pos:end="3837:26"><literal type="number" pos:start="3837:22" pos:end="3837:26">0x073</literal></expr>:</case> <comment type="block" pos:start="3837:29" pos:end="3837:46">/* VIS I fxnors */</comment>

                    <expr_stmt pos:start="3839:21" pos:end="3839:48"><expr pos:start="3839:21" pos:end="3839:47"><call pos:start="3839:21" pos:end="3839:47"><name pos:start="3839:21" pos:end="3839:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3839:38" pos:end="3839:47">(<argument pos:start="3839:39" pos:end="3839:40"><expr pos:start="3839:39" pos:end="3839:40"><name pos:start="3839:39" pos:end="3839:40">dc</name></expr></argument>, <argument pos:start="3839:43" pos:end="3839:46"><expr pos:start="3839:43" pos:end="3839:46"><name pos:start="3839:43" pos:end="3839:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3841:21" pos:end="3841:70"><expr pos:start="3841:21" pos:end="3841:69"><call pos:start="3841:21" pos:end="3841:69"><name pos:start="3841:21" pos:end="3841:34">gen_ne_fop_FFF</name><argument_list pos:start="3841:35" pos:end="3841:69">(<argument pos:start="3841:36" pos:end="3841:37"><expr pos:start="3841:36" pos:end="3841:37"><name pos:start="3841:36" pos:end="3841:37">dc</name></expr></argument>, <argument pos:start="3841:40" pos:end="3841:41"><expr pos:start="3841:40" pos:end="3841:41"><name pos:start="3841:40" pos:end="3841:41">rd</name></expr></argument>, <argument pos:start="3841:44" pos:end="3841:46"><expr pos:start="3841:44" pos:end="3841:46"><name pos:start="3841:44" pos:end="3841:46">rs1</name></expr></argument>, <argument pos:start="3841:49" pos:end="3841:51"><expr pos:start="3841:49" pos:end="3841:51"><name pos:start="3841:49" pos:end="3841:51">rs2</name></expr></argument>, <argument pos:start="3841:54" pos:end="3841:68"><expr pos:start="3841:54" pos:end="3841:68"><name pos:start="3841:54" pos:end="3841:68">tcg_gen_eqv_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3843:21" pos:end="3843:26">break;</break>

                <case pos:start="3845:17" pos:end="3845:27">case <expr pos:start="3845:22" pos:end="3845:26"><literal type="number" pos:start="3845:22" pos:end="3845:26">0x074</literal></expr>:</case> <comment type="block" pos:start="3845:29" pos:end="3845:45">/* VIS I fsrc1 */</comment>

                    <expr_stmt pos:start="3847:21" pos:end="3847:48"><expr pos:start="3847:21" pos:end="3847:47"><call pos:start="3847:21" pos:end="3847:47"><name pos:start="3847:21" pos:end="3847:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3847:38" pos:end="3847:47">(<argument pos:start="3847:39" pos:end="3847:40"><expr pos:start="3847:39" pos:end="3847:40"><name pos:start="3847:39" pos:end="3847:40">dc</name></expr></argument>, <argument pos:start="3847:43" pos:end="3847:46"><expr pos:start="3847:43" pos:end="3847:46"><name pos:start="3847:43" pos:end="3847:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3849:21" pos:end="3849:58"><expr pos:start="3849:21" pos:end="3849:57"><name pos:start="3849:21" pos:end="3849:31">cpu_src1_64</name> <operator pos:start="3849:33" pos:end="3849:33">=</operator> <call pos:start="3849:35" pos:end="3849:57"><name pos:start="3849:35" pos:end="3849:48">gen_load_fpr_D</name><argument_list pos:start="3849:49" pos:end="3849:57">(<argument pos:start="3849:50" pos:end="3849:51"><expr pos:start="3849:50" pos:end="3849:51"><name pos:start="3849:50" pos:end="3849:51">dc</name></expr></argument>, <argument pos:start="3849:54" pos:end="3849:56"><expr pos:start="3849:54" pos:end="3849:56"><name pos:start="3849:54" pos:end="3849:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3851:21" pos:end="3851:57"><expr pos:start="3851:21" pos:end="3851:56"><call pos:start="3851:21" pos:end="3851:56"><name pos:start="3851:21" pos:end="3851:35">gen_store_fpr_D</name><argument_list pos:start="3851:36" pos:end="3851:56">(<argument pos:start="3851:37" pos:end="3851:38"><expr pos:start="3851:37" pos:end="3851:38"><name pos:start="3851:37" pos:end="3851:38">dc</name></expr></argument>, <argument pos:start="3851:41" pos:end="3851:42"><expr pos:start="3851:41" pos:end="3851:42"><name pos:start="3851:41" pos:end="3851:42">rd</name></expr></argument>, <argument pos:start="3851:45" pos:end="3851:55"><expr pos:start="3851:45" pos:end="3851:55"><name pos:start="3851:45" pos:end="3851:55">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3853:21" pos:end="3853:26">break;</break>

                <case pos:start="3855:17" pos:end="3855:27">case <expr pos:start="3855:22" pos:end="3855:26"><literal type="number" pos:start="3855:22" pos:end="3855:26">0x075</literal></expr>:</case> <comment type="block" pos:start="3855:29" pos:end="3855:46">/* VIS I fsrc1s */</comment>

                    <expr_stmt pos:start="3857:21" pos:end="3857:48"><expr pos:start="3857:21" pos:end="3857:47"><call pos:start="3857:21" pos:end="3857:47"><name pos:start="3857:21" pos:end="3857:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3857:38" pos:end="3857:47">(<argument pos:start="3857:39" pos:end="3857:40"><expr pos:start="3857:39" pos:end="3857:40"><name pos:start="3857:39" pos:end="3857:40">dc</name></expr></argument>, <argument pos:start="3857:43" pos:end="3857:46"><expr pos:start="3857:43" pos:end="3857:46"><name pos:start="3857:43" pos:end="3857:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3859:21" pos:end="3859:58"><expr pos:start="3859:21" pos:end="3859:57"><name pos:start="3859:21" pos:end="3859:31">cpu_src1_32</name> <operator pos:start="3859:33" pos:end="3859:33">=</operator> <call pos:start="3859:35" pos:end="3859:57"><name pos:start="3859:35" pos:end="3859:48">gen_load_fpr_F</name><argument_list pos:start="3859:49" pos:end="3859:57">(<argument pos:start="3859:50" pos:end="3859:51"><expr pos:start="3859:50" pos:end="3859:51"><name pos:start="3859:50" pos:end="3859:51">dc</name></expr></argument>, <argument pos:start="3859:54" pos:end="3859:56"><expr pos:start="3859:54" pos:end="3859:56"><name pos:start="3859:54" pos:end="3859:56">rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3861:21" pos:end="3861:57"><expr pos:start="3861:21" pos:end="3861:56"><call pos:start="3861:21" pos:end="3861:56"><name pos:start="3861:21" pos:end="3861:35">gen_store_fpr_F</name><argument_list pos:start="3861:36" pos:end="3861:56">(<argument pos:start="3861:37" pos:end="3861:38"><expr pos:start="3861:37" pos:end="3861:38"><name pos:start="3861:37" pos:end="3861:38">dc</name></expr></argument>, <argument pos:start="3861:41" pos:end="3861:42"><expr pos:start="3861:41" pos:end="3861:42"><name pos:start="3861:41" pos:end="3861:42">rd</name></expr></argument>, <argument pos:start="3861:45" pos:end="3861:55"><expr pos:start="3861:45" pos:end="3861:55"><name pos:start="3861:45" pos:end="3861:55">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3863:21" pos:end="3863:26">break;</break>

                <case pos:start="3865:17" pos:end="3865:27">case <expr pos:start="3865:22" pos:end="3865:26"><literal type="number" pos:start="3865:22" pos:end="3865:26">0x076</literal></expr>:</case> <comment type="block" pos:start="3865:29" pos:end="3865:47">/* VIS I fornot2 */</comment>

                    <expr_stmt pos:start="3867:21" pos:end="3867:48"><expr pos:start="3867:21" pos:end="3867:47"><call pos:start="3867:21" pos:end="3867:47"><name pos:start="3867:21" pos:end="3867:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3867:38" pos:end="3867:47">(<argument pos:start="3867:39" pos:end="3867:40"><expr pos:start="3867:39" pos:end="3867:40"><name pos:start="3867:39" pos:end="3867:40">dc</name></expr></argument>, <argument pos:start="3867:43" pos:end="3867:46"><expr pos:start="3867:43" pos:end="3867:46"><name pos:start="3867:43" pos:end="3867:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3869:21" pos:end="3869:70"><expr pos:start="3869:21" pos:end="3869:69"><call pos:start="3869:21" pos:end="3869:69"><name pos:start="3869:21" pos:end="3869:34">gen_ne_fop_DDD</name><argument_list pos:start="3869:35" pos:end="3869:69">(<argument pos:start="3869:36" pos:end="3869:37"><expr pos:start="3869:36" pos:end="3869:37"><name pos:start="3869:36" pos:end="3869:37">dc</name></expr></argument>, <argument pos:start="3869:40" pos:end="3869:41"><expr pos:start="3869:40" pos:end="3869:41"><name pos:start="3869:40" pos:end="3869:41">rd</name></expr></argument>, <argument pos:start="3869:44" pos:end="3869:46"><expr pos:start="3869:44" pos:end="3869:46"><name pos:start="3869:44" pos:end="3869:46">rs1</name></expr></argument>, <argument pos:start="3869:49" pos:end="3869:51"><expr pos:start="3869:49" pos:end="3869:51"><name pos:start="3869:49" pos:end="3869:51">rs2</name></expr></argument>, <argument pos:start="3869:54" pos:end="3869:68"><expr pos:start="3869:54" pos:end="3869:68"><name pos:start="3869:54" pos:end="3869:68">tcg_gen_orc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3871:21" pos:end="3871:26">break;</break>

                <case pos:start="3873:17" pos:end="3873:27">case <expr pos:start="3873:22" pos:end="3873:26"><literal type="number" pos:start="3873:22" pos:end="3873:26">0x077</literal></expr>:</case> <comment type="block" pos:start="3873:29" pos:end="3873:48">/* VIS I fornot2s */</comment>

                    <expr_stmt pos:start="3875:21" pos:end="3875:48"><expr pos:start="3875:21" pos:end="3875:47"><call pos:start="3875:21" pos:end="3875:47"><name pos:start="3875:21" pos:end="3875:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3875:38" pos:end="3875:47">(<argument pos:start="3875:39" pos:end="3875:40"><expr pos:start="3875:39" pos:end="3875:40"><name pos:start="3875:39" pos:end="3875:40">dc</name></expr></argument>, <argument pos:start="3875:43" pos:end="3875:46"><expr pos:start="3875:43" pos:end="3875:46"><name pos:start="3875:43" pos:end="3875:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3877:21" pos:end="3877:70"><expr pos:start="3877:21" pos:end="3877:69"><call pos:start="3877:21" pos:end="3877:69"><name pos:start="3877:21" pos:end="3877:34">gen_ne_fop_FFF</name><argument_list pos:start="3877:35" pos:end="3877:69">(<argument pos:start="3877:36" pos:end="3877:37"><expr pos:start="3877:36" pos:end="3877:37"><name pos:start="3877:36" pos:end="3877:37">dc</name></expr></argument>, <argument pos:start="3877:40" pos:end="3877:41"><expr pos:start="3877:40" pos:end="3877:41"><name pos:start="3877:40" pos:end="3877:41">rd</name></expr></argument>, <argument pos:start="3877:44" pos:end="3877:46"><expr pos:start="3877:44" pos:end="3877:46"><name pos:start="3877:44" pos:end="3877:46">rs1</name></expr></argument>, <argument pos:start="3877:49" pos:end="3877:51"><expr pos:start="3877:49" pos:end="3877:51"><name pos:start="3877:49" pos:end="3877:51">rs2</name></expr></argument>, <argument pos:start="3877:54" pos:end="3877:68"><expr pos:start="3877:54" pos:end="3877:68"><name pos:start="3877:54" pos:end="3877:68">tcg_gen_orc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3879:21" pos:end="3879:26">break;</break>

                <case pos:start="3881:17" pos:end="3881:27">case <expr pos:start="3881:22" pos:end="3881:26"><literal type="number" pos:start="3881:22" pos:end="3881:26">0x078</literal></expr>:</case> <comment type="block" pos:start="3881:29" pos:end="3881:45">/* VIS I fsrc2 */</comment>

                    <expr_stmt pos:start="3883:21" pos:end="3883:48"><expr pos:start="3883:21" pos:end="3883:47"><call pos:start="3883:21" pos:end="3883:47"><name pos:start="3883:21" pos:end="3883:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3883:38" pos:end="3883:47">(<argument pos:start="3883:39" pos:end="3883:40"><expr pos:start="3883:39" pos:end="3883:40"><name pos:start="3883:39" pos:end="3883:40">dc</name></expr></argument>, <argument pos:start="3883:43" pos:end="3883:46"><expr pos:start="3883:43" pos:end="3883:46"><name pos:start="3883:43" pos:end="3883:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3885:21" pos:end="3885:58"><expr pos:start="3885:21" pos:end="3885:57"><name pos:start="3885:21" pos:end="3885:31">cpu_src1_64</name> <operator pos:start="3885:33" pos:end="3885:33">=</operator> <call pos:start="3885:35" pos:end="3885:57"><name pos:start="3885:35" pos:end="3885:48">gen_load_fpr_D</name><argument_list pos:start="3885:49" pos:end="3885:57">(<argument pos:start="3885:50" pos:end="3885:51"><expr pos:start="3885:50" pos:end="3885:51"><name pos:start="3885:50" pos:end="3885:51">dc</name></expr></argument>, <argument pos:start="3885:54" pos:end="3885:56"><expr pos:start="3885:54" pos:end="3885:56"><name pos:start="3885:54" pos:end="3885:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3887:21" pos:end="3887:57"><expr pos:start="3887:21" pos:end="3887:56"><call pos:start="3887:21" pos:end="3887:56"><name pos:start="3887:21" pos:end="3887:35">gen_store_fpr_D</name><argument_list pos:start="3887:36" pos:end="3887:56">(<argument pos:start="3887:37" pos:end="3887:38"><expr pos:start="3887:37" pos:end="3887:38"><name pos:start="3887:37" pos:end="3887:38">dc</name></expr></argument>, <argument pos:start="3887:41" pos:end="3887:42"><expr pos:start="3887:41" pos:end="3887:42"><name pos:start="3887:41" pos:end="3887:42">rd</name></expr></argument>, <argument pos:start="3887:45" pos:end="3887:55"><expr pos:start="3887:45" pos:end="3887:55"><name pos:start="3887:45" pos:end="3887:55">cpu_src1_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3889:21" pos:end="3889:26">break;</break>

                <case pos:start="3891:17" pos:end="3891:27">case <expr pos:start="3891:22" pos:end="3891:26"><literal type="number" pos:start="3891:22" pos:end="3891:26">0x079</literal></expr>:</case> <comment type="block" pos:start="3891:29" pos:end="3891:46">/* VIS I fsrc2s */</comment>

                    <expr_stmt pos:start="3893:21" pos:end="3893:48"><expr pos:start="3893:21" pos:end="3893:47"><call pos:start="3893:21" pos:end="3893:47"><name pos:start="3893:21" pos:end="3893:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3893:38" pos:end="3893:47">(<argument pos:start="3893:39" pos:end="3893:40"><expr pos:start="3893:39" pos:end="3893:40"><name pos:start="3893:39" pos:end="3893:40">dc</name></expr></argument>, <argument pos:start="3893:43" pos:end="3893:46"><expr pos:start="3893:43" pos:end="3893:46"><name pos:start="3893:43" pos:end="3893:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3895:21" pos:end="3895:58"><expr pos:start="3895:21" pos:end="3895:57"><name pos:start="3895:21" pos:end="3895:31">cpu_src1_32</name> <operator pos:start="3895:33" pos:end="3895:33">=</operator> <call pos:start="3895:35" pos:end="3895:57"><name pos:start="3895:35" pos:end="3895:48">gen_load_fpr_F</name><argument_list pos:start="3895:49" pos:end="3895:57">(<argument pos:start="3895:50" pos:end="3895:51"><expr pos:start="3895:50" pos:end="3895:51"><name pos:start="3895:50" pos:end="3895:51">dc</name></expr></argument>, <argument pos:start="3895:54" pos:end="3895:56"><expr pos:start="3895:54" pos:end="3895:56"><name pos:start="3895:54" pos:end="3895:56">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3897:21" pos:end="3897:57"><expr pos:start="3897:21" pos:end="3897:56"><call pos:start="3897:21" pos:end="3897:56"><name pos:start="3897:21" pos:end="3897:35">gen_store_fpr_F</name><argument_list pos:start="3897:36" pos:end="3897:56">(<argument pos:start="3897:37" pos:end="3897:38"><expr pos:start="3897:37" pos:end="3897:38"><name pos:start="3897:37" pos:end="3897:38">dc</name></expr></argument>, <argument pos:start="3897:41" pos:end="3897:42"><expr pos:start="3897:41" pos:end="3897:42"><name pos:start="3897:41" pos:end="3897:42">rd</name></expr></argument>, <argument pos:start="3897:45" pos:end="3897:55"><expr pos:start="3897:45" pos:end="3897:55"><name pos:start="3897:45" pos:end="3897:55">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3899:21" pos:end="3899:26">break;</break>

                <case pos:start="3901:17" pos:end="3901:27">case <expr pos:start="3901:22" pos:end="3901:26"><literal type="number" pos:start="3901:22" pos:end="3901:26">0x07a</literal></expr>:</case> <comment type="block" pos:start="3901:29" pos:end="3901:47">/* VIS I fornot1 */</comment>

                    <expr_stmt pos:start="3903:21" pos:end="3903:48"><expr pos:start="3903:21" pos:end="3903:47"><call pos:start="3903:21" pos:end="3903:47"><name pos:start="3903:21" pos:end="3903:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3903:38" pos:end="3903:47">(<argument pos:start="3903:39" pos:end="3903:40"><expr pos:start="3903:39" pos:end="3903:40"><name pos:start="3903:39" pos:end="3903:40">dc</name></expr></argument>, <argument pos:start="3903:43" pos:end="3903:46"><expr pos:start="3903:43" pos:end="3903:46"><name pos:start="3903:43" pos:end="3903:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3905:21" pos:end="3905:70"><expr pos:start="3905:21" pos:end="3905:69"><call pos:start="3905:21" pos:end="3905:69"><name pos:start="3905:21" pos:end="3905:34">gen_ne_fop_DDD</name><argument_list pos:start="3905:35" pos:end="3905:69">(<argument pos:start="3905:36" pos:end="3905:37"><expr pos:start="3905:36" pos:end="3905:37"><name pos:start="3905:36" pos:end="3905:37">dc</name></expr></argument>, <argument pos:start="3905:40" pos:end="3905:41"><expr pos:start="3905:40" pos:end="3905:41"><name pos:start="3905:40" pos:end="3905:41">rd</name></expr></argument>, <argument pos:start="3905:44" pos:end="3905:46"><expr pos:start="3905:44" pos:end="3905:46"><name pos:start="3905:44" pos:end="3905:46">rs2</name></expr></argument>, <argument pos:start="3905:49" pos:end="3905:51"><expr pos:start="3905:49" pos:end="3905:51"><name pos:start="3905:49" pos:end="3905:51">rs1</name></expr></argument>, <argument pos:start="3905:54" pos:end="3905:68"><expr pos:start="3905:54" pos:end="3905:68"><name pos:start="3905:54" pos:end="3905:68">tcg_gen_orc_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3907:21" pos:end="3907:26">break;</break>

                <case pos:start="3909:17" pos:end="3909:27">case <expr pos:start="3909:22" pos:end="3909:26"><literal type="number" pos:start="3909:22" pos:end="3909:26">0x07b</literal></expr>:</case> <comment type="block" pos:start="3909:29" pos:end="3909:48">/* VIS I fornot1s */</comment>

                    <expr_stmt pos:start="3911:21" pos:end="3911:48"><expr pos:start="3911:21" pos:end="3911:47"><call pos:start="3911:21" pos:end="3911:47"><name pos:start="3911:21" pos:end="3911:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3911:38" pos:end="3911:47">(<argument pos:start="3911:39" pos:end="3911:40"><expr pos:start="3911:39" pos:end="3911:40"><name pos:start="3911:39" pos:end="3911:40">dc</name></expr></argument>, <argument pos:start="3911:43" pos:end="3911:46"><expr pos:start="3911:43" pos:end="3911:46"><name pos:start="3911:43" pos:end="3911:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3913:21" pos:end="3913:70"><expr pos:start="3913:21" pos:end="3913:69"><call pos:start="3913:21" pos:end="3913:69"><name pos:start="3913:21" pos:end="3913:34">gen_ne_fop_FFF</name><argument_list pos:start="3913:35" pos:end="3913:69">(<argument pos:start="3913:36" pos:end="3913:37"><expr pos:start="3913:36" pos:end="3913:37"><name pos:start="3913:36" pos:end="3913:37">dc</name></expr></argument>, <argument pos:start="3913:40" pos:end="3913:41"><expr pos:start="3913:40" pos:end="3913:41"><name pos:start="3913:40" pos:end="3913:41">rd</name></expr></argument>, <argument pos:start="3913:44" pos:end="3913:46"><expr pos:start="3913:44" pos:end="3913:46"><name pos:start="3913:44" pos:end="3913:46">rs2</name></expr></argument>, <argument pos:start="3913:49" pos:end="3913:51"><expr pos:start="3913:49" pos:end="3913:51"><name pos:start="3913:49" pos:end="3913:51">rs1</name></expr></argument>, <argument pos:start="3913:54" pos:end="3913:68"><expr pos:start="3913:54" pos:end="3913:68"><name pos:start="3913:54" pos:end="3913:68">tcg_gen_orc_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3915:21" pos:end="3915:26">break;</break>

                <case pos:start="3917:17" pos:end="3917:27">case <expr pos:start="3917:22" pos:end="3917:26"><literal type="number" pos:start="3917:22" pos:end="3917:26">0x07c</literal></expr>:</case> <comment type="block" pos:start="3917:29" pos:end="3917:43">/* VIS I for */</comment>

                    <expr_stmt pos:start="3919:21" pos:end="3919:48"><expr pos:start="3919:21" pos:end="3919:47"><call pos:start="3919:21" pos:end="3919:47"><name pos:start="3919:21" pos:end="3919:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3919:38" pos:end="3919:47">(<argument pos:start="3919:39" pos:end="3919:40"><expr pos:start="3919:39" pos:end="3919:40"><name pos:start="3919:39" pos:end="3919:40">dc</name></expr></argument>, <argument pos:start="3919:43" pos:end="3919:46"><expr pos:start="3919:43" pos:end="3919:46"><name pos:start="3919:43" pos:end="3919:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3921:21" pos:end="3921:69"><expr pos:start="3921:21" pos:end="3921:68"><call pos:start="3921:21" pos:end="3921:68"><name pos:start="3921:21" pos:end="3921:34">gen_ne_fop_DDD</name><argument_list pos:start="3921:35" pos:end="3921:68">(<argument pos:start="3921:36" pos:end="3921:37"><expr pos:start="3921:36" pos:end="3921:37"><name pos:start="3921:36" pos:end="3921:37">dc</name></expr></argument>, <argument pos:start="3921:40" pos:end="3921:41"><expr pos:start="3921:40" pos:end="3921:41"><name pos:start="3921:40" pos:end="3921:41">rd</name></expr></argument>, <argument pos:start="3921:44" pos:end="3921:46"><expr pos:start="3921:44" pos:end="3921:46"><name pos:start="3921:44" pos:end="3921:46">rs1</name></expr></argument>, <argument pos:start="3921:49" pos:end="3921:51"><expr pos:start="3921:49" pos:end="3921:51"><name pos:start="3921:49" pos:end="3921:51">rs2</name></expr></argument>, <argument pos:start="3921:54" pos:end="3921:67"><expr pos:start="3921:54" pos:end="3921:67"><name pos:start="3921:54" pos:end="3921:67">tcg_gen_or_i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3923:21" pos:end="3923:26">break;</break>

                <case pos:start="3925:17" pos:end="3925:27">case <expr pos:start="3925:22" pos:end="3925:26"><literal type="number" pos:start="3925:22" pos:end="3925:26">0x07d</literal></expr>:</case> <comment type="block" pos:start="3925:29" pos:end="3925:44">/* VIS I fors */</comment>

                    <expr_stmt pos:start="3927:21" pos:end="3927:48"><expr pos:start="3927:21" pos:end="3927:47"><call pos:start="3927:21" pos:end="3927:47"><name pos:start="3927:21" pos:end="3927:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3927:38" pos:end="3927:47">(<argument pos:start="3927:39" pos:end="3927:40"><expr pos:start="3927:39" pos:end="3927:40"><name pos:start="3927:39" pos:end="3927:40">dc</name></expr></argument>, <argument pos:start="3927:43" pos:end="3927:46"><expr pos:start="3927:43" pos:end="3927:46"><name pos:start="3927:43" pos:end="3927:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3929:21" pos:end="3929:69"><expr pos:start="3929:21" pos:end="3929:68"><call pos:start="3929:21" pos:end="3929:68"><name pos:start="3929:21" pos:end="3929:34">gen_ne_fop_FFF</name><argument_list pos:start="3929:35" pos:end="3929:68">(<argument pos:start="3929:36" pos:end="3929:37"><expr pos:start="3929:36" pos:end="3929:37"><name pos:start="3929:36" pos:end="3929:37">dc</name></expr></argument>, <argument pos:start="3929:40" pos:end="3929:41"><expr pos:start="3929:40" pos:end="3929:41"><name pos:start="3929:40" pos:end="3929:41">rd</name></expr></argument>, <argument pos:start="3929:44" pos:end="3929:46"><expr pos:start="3929:44" pos:end="3929:46"><name pos:start="3929:44" pos:end="3929:46">rs1</name></expr></argument>, <argument pos:start="3929:49" pos:end="3929:51"><expr pos:start="3929:49" pos:end="3929:51"><name pos:start="3929:49" pos:end="3929:51">rs2</name></expr></argument>, <argument pos:start="3929:54" pos:end="3929:67"><expr pos:start="3929:54" pos:end="3929:67"><name pos:start="3929:54" pos:end="3929:67">tcg_gen_or_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3931:21" pos:end="3931:26">break;</break>

                <case pos:start="3933:17" pos:end="3933:27">case <expr pos:start="3933:22" pos:end="3933:26"><literal type="number" pos:start="3933:22" pos:end="3933:26">0x07e</literal></expr>:</case> <comment type="block" pos:start="3933:29" pos:end="3933:44">/* VIS I fone */</comment>

                    <expr_stmt pos:start="3935:21" pos:end="3935:48"><expr pos:start="3935:21" pos:end="3935:47"><call pos:start="3935:21" pos:end="3935:47"><name pos:start="3935:21" pos:end="3935:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3935:38" pos:end="3935:47">(<argument pos:start="3935:39" pos:end="3935:40"><expr pos:start="3935:39" pos:end="3935:40"><name pos:start="3935:39" pos:end="3935:40">dc</name></expr></argument>, <argument pos:start="3935:43" pos:end="3935:46"><expr pos:start="3935:43" pos:end="3935:46"><name pos:start="3935:43" pos:end="3935:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3937:21" pos:end="3937:50"><expr pos:start="3937:21" pos:end="3937:49"><name pos:start="3937:21" pos:end="3937:30">cpu_dst_64</name> <operator pos:start="3937:32" pos:end="3937:32">=</operator> <call pos:start="3937:34" pos:end="3937:49"><name pos:start="3937:34" pos:end="3937:47">gen_dest_fpr_D</name><argument_list pos:start="3937:48" pos:end="3937:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3939:21" pos:end="3939:53"><expr pos:start="3939:21" pos:end="3939:52"><call pos:start="3939:21" pos:end="3939:52"><name pos:start="3939:21" pos:end="3939:36">tcg_gen_movi_i64</name><argument_list pos:start="3939:37" pos:end="3939:52">(<argument pos:start="3939:38" pos:end="3939:47"><expr pos:start="3939:38" pos:end="3939:47"><name pos:start="3939:38" pos:end="3939:47">cpu_dst_64</name></expr></argument>, <argument pos:start="3939:50" pos:end="3939:51"><expr pos:start="3939:50" pos:end="3939:51"><operator pos:start="3939:50" pos:end="3939:50">-</operator><literal type="number" pos:start="3939:51" pos:end="3939:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3941:21" pos:end="3941:56"><expr pos:start="3941:21" pos:end="3941:55"><call pos:start="3941:21" pos:end="3941:55"><name pos:start="3941:21" pos:end="3941:35">gen_store_fpr_D</name><argument_list pos:start="3941:36" pos:end="3941:55">(<argument pos:start="3941:37" pos:end="3941:38"><expr pos:start="3941:37" pos:end="3941:38"><name pos:start="3941:37" pos:end="3941:38">dc</name></expr></argument>, <argument pos:start="3941:41" pos:end="3941:42"><expr pos:start="3941:41" pos:end="3941:42"><name pos:start="3941:41" pos:end="3941:42">rd</name></expr></argument>, <argument pos:start="3941:45" pos:end="3941:54"><expr pos:start="3941:45" pos:end="3941:54"><name pos:start="3941:45" pos:end="3941:54">cpu_dst_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3943:21" pos:end="3943:26">break;</break>

                <case pos:start="3945:17" pos:end="3945:27">case <expr pos:start="3945:22" pos:end="3945:26"><literal type="number" pos:start="3945:22" pos:end="3945:26">0x07f</literal></expr>:</case> <comment type="block" pos:start="3945:29" pos:end="3945:45">/* VIS I fones */</comment>

                    <expr_stmt pos:start="3947:21" pos:end="3947:48"><expr pos:start="3947:21" pos:end="3947:47"><call pos:start="3947:21" pos:end="3947:47"><name pos:start="3947:21" pos:end="3947:37">CHECK_FPU_FEATURE</name><argument_list pos:start="3947:38" pos:end="3947:47">(<argument pos:start="3947:39" pos:end="3947:40"><expr pos:start="3947:39" pos:end="3947:40"><name pos:start="3947:39" pos:end="3947:40">dc</name></expr></argument>, <argument pos:start="3947:43" pos:end="3947:46"><expr pos:start="3947:43" pos:end="3947:46"><name pos:start="3947:43" pos:end="3947:46">VIS1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3949:21" pos:end="3949:50"><expr pos:start="3949:21" pos:end="3949:49"><name pos:start="3949:21" pos:end="3949:30">cpu_dst_32</name> <operator pos:start="3949:32" pos:end="3949:32">=</operator> <call pos:start="3949:34" pos:end="3949:49"><name pos:start="3949:34" pos:end="3949:47">gen_dest_fpr_F</name><argument_list pos:start="3949:48" pos:end="3949:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3951:21" pos:end="3951:53"><expr pos:start="3951:21" pos:end="3951:52"><call pos:start="3951:21" pos:end="3951:52"><name pos:start="3951:21" pos:end="3951:36">tcg_gen_movi_i32</name><argument_list pos:start="3951:37" pos:end="3951:52">(<argument pos:start="3951:38" pos:end="3951:47"><expr pos:start="3951:38" pos:end="3951:47"><name pos:start="3951:38" pos:end="3951:47">cpu_dst_32</name></expr></argument>, <argument pos:start="3951:50" pos:end="3951:51"><expr pos:start="3951:50" pos:end="3951:51"><operator pos:start="3951:50" pos:end="3951:50">-</operator><literal type="number" pos:start="3951:51" pos:end="3951:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3953:21" pos:end="3953:56"><expr pos:start="3953:21" pos:end="3953:55"><call pos:start="3953:21" pos:end="3953:55"><name pos:start="3953:21" pos:end="3953:35">gen_store_fpr_F</name><argument_list pos:start="3953:36" pos:end="3953:55">(<argument pos:start="3953:37" pos:end="3953:38"><expr pos:start="3953:37" pos:end="3953:38"><name pos:start="3953:37" pos:end="3953:38">dc</name></expr></argument>, <argument pos:start="3953:41" pos:end="3953:42"><expr pos:start="3953:41" pos:end="3953:42"><name pos:start="3953:41" pos:end="3953:42">rd</name></expr></argument>, <argument pos:start="3953:45" pos:end="3953:54"><expr pos:start="3953:45" pos:end="3953:54"><name pos:start="3953:45" pos:end="3953:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="3955:21" pos:end="3955:26">break;</break>

                <case pos:start="3957:17" pos:end="3957:27">case <expr pos:start="3957:22" pos:end="3957:26"><literal type="number" pos:start="3957:22" pos:end="3957:26">0x080</literal></expr>:</case> <comment type="block" pos:start="3957:29" pos:end="3957:48">/* VIS I shutdown */</comment>

                <case pos:start="3959:17" pos:end="3959:27">case <expr pos:start="3959:22" pos:end="3959:26"><literal type="number" pos:start="3959:22" pos:end="3959:26">0x081</literal></expr>:</case> <comment type="block" pos:start="3959:29" pos:end="3959:45">/* VIS II siam */</comment>

                    <comment type="line" pos:start="3961:21" pos:end="3961:26">// XXX</comment>

                    <goto pos:start="3963:21" pos:end="3963:38">goto <name pos:start="3963:26" pos:end="3963:37">illegal_insn</name>;</goto>

                <default pos:start="3965:17" pos:end="3965:24">default:</default>

                    <goto pos:start="3967:21" pos:end="3967:38">goto <name pos:start="3967:26" pos:end="3967:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

<cpp:else pos:start="3971:1" pos:end="3971:5">#<cpp:directive pos:start="3971:2" pos:end="3971:5">else</cpp:directive></cpp:else>

                <goto pos:start="3973:17" pos:end="3976:0">goto <name pos:start="3973:22" pos:end="3973:29">ncp_insn</name>;</goto>

<cpp:endif pos:start="3975:1" pos:end="3975:6">#<cpp:directive pos:start="3975:2" pos:end="3975:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="3977:15" pos:end="3991:13">else if <condition pos:start="3977:23" pos:end="3977:35">(<expr pos:start="3977:24" pos:end="3977:34"><name pos:start="3977:24" pos:end="3977:26">xop</name> <operator pos:start="3977:28" pos:end="3977:29">==</operator> <literal type="number" pos:start="3977:31" pos:end="3977:34">0x37</literal></expr>)</condition> <block pos:start="3977:37" pos:end="3991:13">{<block_content pos:start="3981:17" pos:end="3990:0"> <comment type="block" pos:start="3977:39" pos:end="3977:64">/* V8 CPop2, V9 impdep2 */</comment>

<cpp:ifdef pos:start="3979:1" pos:end="3979:21">#<cpp:directive pos:start="3979:2" pos:end="3979:6">ifdef</cpp:directive> <name pos:start="3979:8" pos:end="3979:21">TARGET_SPARC64</name></cpp:ifdef>

                <goto pos:start="3981:17" pos:end="3984:0">goto <name pos:start="3981:22" pos:end="3981:33">illegal_insn</name>;</goto>

<cpp:else pos:start="3983:1" pos:end="3983:5">#<cpp:directive pos:start="3983:2" pos:end="3983:5">else</cpp:directive></cpp:else>

                <goto pos:start="3985:17" pos:end="3990:0">goto <name pos:start="3985:22" pos:end="3985:29">ncp_insn</name>;</goto>

<cpp:endif pos:start="3987:1" pos:end="3987:6">#<cpp:directive pos:start="3987:2" pos:end="3987:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="3989:1" pos:end="3989:21">#<cpp:directive pos:start="3989:2" pos:end="3989:6">ifdef</cpp:directive> <name pos:start="3989:8" pos:end="3989:21">TARGET_SPARC64</name></cpp:ifdef>

            </block_content>}</block></if> <if type="elseif" pos:start="3991:15" pos:end="4043:13">else if <condition pos:start="3991:23" pos:end="3991:35">(<expr pos:start="3991:24" pos:end="3991:34"><name pos:start="3991:24" pos:end="3991:26">xop</name> <operator pos:start="3991:28" pos:end="3991:29">==</operator> <literal type="number" pos:start="3991:31" pos:end="3991:34">0x39</literal></expr>)</condition> <block pos:start="3991:37" pos:end="4043:13">{<block_content pos:start="3993:17" pos:end="4042:0"> <comment type="block" pos:start="3991:39" pos:end="3991:53">/* V9 return */</comment>

                <decl_stmt pos:start="3993:17" pos:end="3993:33"><decl pos:start="3993:17" pos:end="3993:32"><type pos:start="3993:17" pos:end="3993:24"><name pos:start="3993:17" pos:end="3993:24">TCGv_i32</name></type> <name pos:start="3993:26" pos:end="3993:32">r_const</name></decl>;</decl_stmt>



                <expr_stmt pos:start="3997:17" pos:end="3997:31"><expr pos:start="3997:17" pos:end="3997:30"><call pos:start="3997:17" pos:end="3997:30"><name pos:start="3997:17" pos:end="3997:26">save_state</name><argument_list pos:start="3997:27" pos:end="3997:30">(<argument pos:start="3997:28" pos:end="3997:29"><expr pos:start="3997:28" pos:end="3997:29"><name pos:start="3997:28" pos:end="3997:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3999:17" pos:end="3999:46"><expr pos:start="3999:17" pos:end="3999:45"><name pos:start="3999:17" pos:end="3999:24">cpu_src1</name> <operator pos:start="3999:26" pos:end="3999:26">=</operator> <call pos:start="3999:28" pos:end="3999:45"><name pos:start="3999:28" pos:end="3999:35">get_src1</name><argument_list pos:start="3999:36" pos:end="3999:45">(<argument pos:start="3999:37" pos:end="3999:38"><expr pos:start="3999:37" pos:end="3999:38"><name pos:start="3999:37" pos:end="3999:38">dc</name></expr></argument>, <argument pos:start="3999:41" pos:end="3999:44"><expr pos:start="3999:41" pos:end="3999:44"><name pos:start="3999:41" pos:end="3999:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="4001:17" pos:end="4023:17"><if pos:start="4001:17" pos:end="4007:17">if <condition pos:start="4001:20" pos:end="4001:27">(<expr pos:start="4001:21" pos:end="4001:26"><name pos:start="4001:21" pos:end="4001:26">IS_IMM</name></expr>)</condition> <block pos:start="4001:29" pos:end="4007:17">{<block_content pos:start="4003:21" pos:end="4005:61">   <comment type="block" pos:start="4001:33" pos:end="4001:47">/* immediate */</comment>

                    <expr_stmt pos:start="4003:21" pos:end="4003:52"><expr pos:start="4003:21" pos:end="4003:51"><name pos:start="4003:21" pos:end="4003:24">simm</name> <operator pos:start="4003:26" pos:end="4003:26">=</operator> <call pos:start="4003:28" pos:end="4003:51"><name pos:start="4003:28" pos:end="4003:37">GET_FIELDs</name><argument_list pos:start="4003:38" pos:end="4003:51">(<argument pos:start="4003:39" pos:end="4003:42"><expr pos:start="4003:39" pos:end="4003:42"><name pos:start="4003:39" pos:end="4003:42">insn</name></expr></argument>, <argument pos:start="4003:45" pos:end="4003:46"><expr pos:start="4003:45" pos:end="4003:46"><literal type="number" pos:start="4003:45" pos:end="4003:46">19</literal></expr></argument>, <argument pos:start="4003:49" pos:end="4003:50"><expr pos:start="4003:49" pos:end="4003:50"><literal type="number" pos:start="4003:49" pos:end="4003:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4005:21" pos:end="4005:61"><expr pos:start="4005:21" pos:end="4005:60"><call pos:start="4005:21" pos:end="4005:60"><name pos:start="4005:21" pos:end="4005:35">tcg_gen_addi_tl</name><argument_list pos:start="4005:36" pos:end="4005:60">(<argument pos:start="4005:37" pos:end="4005:43"><expr pos:start="4005:37" pos:end="4005:43"><name pos:start="4005:37" pos:end="4005:43">cpu_dst</name></expr></argument>, <argument pos:start="4005:46" pos:end="4005:53"><expr pos:start="4005:46" pos:end="4005:53"><name pos:start="4005:46" pos:end="4005:53">cpu_src1</name></expr></argument>, <argument pos:start="4005:56" pos:end="4005:59"><expr pos:start="4005:56" pos:end="4005:59"><name pos:start="4005:56" pos:end="4005:59">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4007:19" pos:end="4023:17">else <block pos:start="4007:24" pos:end="4023:17">{<block_content pos:start="4009:21" pos:end="4021:21">                <comment type="block" pos:start="4007:41" pos:end="4007:54">/* register */</comment>

                    <expr_stmt pos:start="4009:21" pos:end="4009:50"><expr pos:start="4009:21" pos:end="4009:49"><name pos:start="4009:21" pos:end="4009:23">rs2</name> <operator pos:start="4009:25" pos:end="4009:25">=</operator> <call pos:start="4009:27" pos:end="4009:49"><name pos:start="4009:27" pos:end="4009:35">GET_FIELD</name><argument_list pos:start="4009:36" pos:end="4009:49">(<argument pos:start="4009:37" pos:end="4009:40"><expr pos:start="4009:37" pos:end="4009:40"><name pos:start="4009:37" pos:end="4009:40">insn</name></expr></argument>, <argument pos:start="4009:43" pos:end="4009:44"><expr pos:start="4009:43" pos:end="4009:44"><literal type="number" pos:start="4009:43" pos:end="4009:44">27</literal></expr></argument>, <argument pos:start="4009:47" pos:end="4009:48"><expr pos:start="4009:47" pos:end="4009:48"><literal type="number" pos:start="4009:47" pos:end="4009:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4011:21" pos:end="4021:21"><if pos:start="4011:21" pos:end="4017:21">if <condition pos:start="4011:24" pos:end="4011:28">(<expr pos:start="4011:25" pos:end="4011:27"><name pos:start="4011:25" pos:end="4011:27">rs2</name></expr>)</condition> <block pos:start="4011:30" pos:end="4017:21">{<block_content pos:start="4013:25" pos:end="4015:68">

                        <expr_stmt pos:start="4013:25" pos:end="4013:57"><expr pos:start="4013:25" pos:end="4013:56"><name pos:start="4013:25" pos:end="4013:32">cpu_src2</name> <operator pos:start="4013:34" pos:end="4013:34">=</operator> <call pos:start="4013:36" pos:end="4013:56"><name pos:start="4013:36" pos:end="4013:47">gen_load_gpr</name><argument_list pos:start="4013:48" pos:end="4013:56">(<argument pos:start="4013:49" pos:end="4013:50"><expr pos:start="4013:49" pos:end="4013:50"><name pos:start="4013:49" pos:end="4013:50">dc</name></expr></argument>, <argument pos:start="4013:53" pos:end="4013:55"><expr pos:start="4013:53" pos:end="4013:55"><name pos:start="4013:53" pos:end="4013:55">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4015:25" pos:end="4015:68"><expr pos:start="4015:25" pos:end="4015:67"><call pos:start="4015:25" pos:end="4015:67"><name pos:start="4015:25" pos:end="4015:38">tcg_gen_add_tl</name><argument_list pos:start="4015:39" pos:end="4015:67">(<argument pos:start="4015:40" pos:end="4015:46"><expr pos:start="4015:40" pos:end="4015:46"><name pos:start="4015:40" pos:end="4015:46">cpu_dst</name></expr></argument>, <argument pos:start="4015:49" pos:end="4015:56"><expr pos:start="4015:49" pos:end="4015:56"><name pos:start="4015:49" pos:end="4015:56">cpu_src1</name></expr></argument>, <argument pos:start="4015:59" pos:end="4015:66"><expr pos:start="4015:59" pos:end="4015:66"><name pos:start="4015:59" pos:end="4015:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4017:23" pos:end="4021:21">else <block pos:start="4017:28" pos:end="4021:21">{<block_content pos:start="4019:25" pos:end="4019:58">

                        <expr_stmt pos:start="4019:25" pos:end="4019:58"><expr pos:start="4019:25" pos:end="4019:57"><call pos:start="4019:25" pos:end="4019:57"><name pos:start="4019:25" pos:end="4019:38">tcg_gen_mov_tl</name><argument_list pos:start="4019:39" pos:end="4019:57">(<argument pos:start="4019:40" pos:end="4019:46"><expr pos:start="4019:40" pos:end="4019:46"><name pos:start="4019:40" pos:end="4019:46">cpu_dst</name></expr></argument>, <argument pos:start="4019:49" pos:end="4019:56"><expr pos:start="4019:49" pos:end="4019:56"><name pos:start="4019:49" pos:end="4019:56">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="4025:17" pos:end="4025:44"><expr pos:start="4025:17" pos:end="4025:43"><call pos:start="4025:17" pos:end="4025:43"><name pos:start="4025:17" pos:end="4025:34">gen_helper_restore</name><argument_list pos:start="4025:35" pos:end="4025:43">(<argument pos:start="4025:36" pos:end="4025:42"><expr pos:start="4025:36" pos:end="4025:42"><name pos:start="4025:36" pos:end="4025:42">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4027:17" pos:end="4027:35"><expr pos:start="4027:17" pos:end="4027:34"><call pos:start="4027:17" pos:end="4027:34"><name pos:start="4027:17" pos:end="4027:30">gen_mov_pc_npc</name><argument_list pos:start="4027:31" pos:end="4027:34">(<argument pos:start="4027:32" pos:end="4027:33"><expr pos:start="4027:32" pos:end="4027:33"><name pos:start="4027:32" pos:end="4027:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4029:17" pos:end="4029:43"><expr pos:start="4029:17" pos:end="4029:42"><name pos:start="4029:17" pos:end="4029:23">r_const</name> <operator pos:start="4029:25" pos:end="4029:25">=</operator> <call pos:start="4029:27" pos:end="4029:42"><name pos:start="4029:27" pos:end="4029:39">tcg_const_i32</name><argument_list pos:start="4029:40" pos:end="4029:42">(<argument pos:start="4029:41" pos:end="4029:41"><expr pos:start="4029:41" pos:end="4029:41"><literal type="number" pos:start="4029:41" pos:end="4029:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4031:17" pos:end="4031:66"><expr pos:start="4031:17" pos:end="4031:65"><call pos:start="4031:17" pos:end="4031:65"><name pos:start="4031:17" pos:end="4031:38">gen_helper_check_align</name><argument_list pos:start="4031:39" pos:end="4031:65">(<argument pos:start="4031:40" pos:end="4031:46"><expr pos:start="4031:40" pos:end="4031:46"><name pos:start="4031:40" pos:end="4031:46">cpu_env</name></expr></argument>, <argument pos:start="4031:49" pos:end="4031:55"><expr pos:start="4031:49" pos:end="4031:55"><name pos:start="4031:49" pos:end="4031:55">cpu_dst</name></expr></argument>, <argument pos:start="4031:58" pos:end="4031:64"><expr pos:start="4031:58" pos:end="4031:64"><name pos:start="4031:58" pos:end="4031:64">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4033:17" pos:end="4033:43"><expr pos:start="4033:17" pos:end="4033:42"><call pos:start="4033:17" pos:end="4033:42"><name pos:start="4033:17" pos:end="4033:33">tcg_temp_free_i32</name><argument_list pos:start="4033:34" pos:end="4033:42">(<argument pos:start="4033:35" pos:end="4033:41"><expr pos:start="4033:35" pos:end="4033:41"><name pos:start="4033:35" pos:end="4033:41">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4035:17" pos:end="4035:49"><expr pos:start="4035:17" pos:end="4035:48"><call pos:start="4035:17" pos:end="4035:48"><name pos:start="4035:17" pos:end="4035:30">tcg_gen_mov_tl</name><argument_list pos:start="4035:31" pos:end="4035:48">(<argument pos:start="4035:32" pos:end="4035:38"><expr pos:start="4035:32" pos:end="4035:38"><name pos:start="4035:32" pos:end="4035:38">cpu_npc</name></expr></argument>, <argument pos:start="4035:41" pos:end="4035:47"><expr pos:start="4035:41" pos:end="4035:47"><name pos:start="4035:41" pos:end="4035:47">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4037:17" pos:end="4037:37"><expr pos:start="4037:17" pos:end="4037:36"><name pos:start="4037:17" pos:end="4037:23"><name pos:start="4037:17" pos:end="4037:18">dc</name><operator pos:start="4037:19" pos:end="4037:20">-&gt;</operator><name pos:start="4037:21" pos:end="4037:23">npc</name></name> <operator pos:start="4037:25" pos:end="4037:25">=</operator> <name pos:start="4037:27" pos:end="4037:36">DYNAMIC_PC</name></expr>;</expr_stmt>

                <goto pos:start="4039:17" pos:end="4042:0">goto <name pos:start="4039:22" pos:end="4039:29">jmp_insn</name>;</goto>

<cpp:endif pos:start="4041:1" pos:end="4041:6">#<cpp:directive pos:start="4041:2" pos:end="4041:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="4043:15" pos:end="4225:13">else <block pos:start="4043:20" pos:end="4225:13">{<block_content pos:start="4045:17" pos:end="4223:17">

                <expr_stmt pos:start="4045:17" pos:end="4045:46"><expr pos:start="4045:17" pos:end="4045:45"><name pos:start="4045:17" pos:end="4045:24">cpu_src1</name> <operator pos:start="4045:26" pos:end="4045:26">=</operator> <call pos:start="4045:28" pos:end="4045:45"><name pos:start="4045:28" pos:end="4045:35">get_src1</name><argument_list pos:start="4045:36" pos:end="4045:45">(<argument pos:start="4045:37" pos:end="4045:38"><expr pos:start="4045:37" pos:end="4045:38"><name pos:start="4045:37" pos:end="4045:38">dc</name></expr></argument>, <argument pos:start="4045:41" pos:end="4045:44"><expr pos:start="4045:41" pos:end="4045:44"><name pos:start="4045:41" pos:end="4045:44">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="4047:17" pos:end="4069:17"><if pos:start="4047:17" pos:end="4053:17">if <condition pos:start="4047:20" pos:end="4047:27">(<expr pos:start="4047:21" pos:end="4047:26"><name pos:start="4047:21" pos:end="4047:26">IS_IMM</name></expr>)</condition> <block pos:start="4047:29" pos:end="4053:17">{<block_content pos:start="4049:21" pos:end="4051:61">   <comment type="block" pos:start="4047:33" pos:end="4047:47">/* immediate */</comment>

                    <expr_stmt pos:start="4049:21" pos:end="4049:52"><expr pos:start="4049:21" pos:end="4049:51"><name pos:start="4049:21" pos:end="4049:24">simm</name> <operator pos:start="4049:26" pos:end="4049:26">=</operator> <call pos:start="4049:28" pos:end="4049:51"><name pos:start="4049:28" pos:end="4049:37">GET_FIELDs</name><argument_list pos:start="4049:38" pos:end="4049:51">(<argument pos:start="4049:39" pos:end="4049:42"><expr pos:start="4049:39" pos:end="4049:42"><name pos:start="4049:39" pos:end="4049:42">insn</name></expr></argument>, <argument pos:start="4049:45" pos:end="4049:46"><expr pos:start="4049:45" pos:end="4049:46"><literal type="number" pos:start="4049:45" pos:end="4049:46">19</literal></expr></argument>, <argument pos:start="4049:49" pos:end="4049:50"><expr pos:start="4049:49" pos:end="4049:50"><literal type="number" pos:start="4049:49" pos:end="4049:50">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4051:21" pos:end="4051:61"><expr pos:start="4051:21" pos:end="4051:60"><call pos:start="4051:21" pos:end="4051:60"><name pos:start="4051:21" pos:end="4051:35">tcg_gen_addi_tl</name><argument_list pos:start="4051:36" pos:end="4051:60">(<argument pos:start="4051:37" pos:end="4051:43"><expr pos:start="4051:37" pos:end="4051:43"><name pos:start="4051:37" pos:end="4051:43">cpu_dst</name></expr></argument>, <argument pos:start="4051:46" pos:end="4051:53"><expr pos:start="4051:46" pos:end="4051:53"><name pos:start="4051:46" pos:end="4051:53">cpu_src1</name></expr></argument>, <argument pos:start="4051:56" pos:end="4051:59"><expr pos:start="4051:56" pos:end="4051:59"><name pos:start="4051:56" pos:end="4051:59">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4053:19" pos:end="4069:17">else <block pos:start="4053:24" pos:end="4069:17">{<block_content pos:start="4055:21" pos:end="4067:21">                <comment type="block" pos:start="4053:41" pos:end="4053:54">/* register */</comment>

                    <expr_stmt pos:start="4055:21" pos:end="4055:50"><expr pos:start="4055:21" pos:end="4055:49"><name pos:start="4055:21" pos:end="4055:23">rs2</name> <operator pos:start="4055:25" pos:end="4055:25">=</operator> <call pos:start="4055:27" pos:end="4055:49"><name pos:start="4055:27" pos:end="4055:35">GET_FIELD</name><argument_list pos:start="4055:36" pos:end="4055:49">(<argument pos:start="4055:37" pos:end="4055:40"><expr pos:start="4055:37" pos:end="4055:40"><name pos:start="4055:37" pos:end="4055:40">insn</name></expr></argument>, <argument pos:start="4055:43" pos:end="4055:44"><expr pos:start="4055:43" pos:end="4055:44"><literal type="number" pos:start="4055:43" pos:end="4055:44">27</literal></expr></argument>, <argument pos:start="4055:47" pos:end="4055:48"><expr pos:start="4055:47" pos:end="4055:48"><literal type="number" pos:start="4055:47" pos:end="4055:48">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4057:21" pos:end="4067:21"><if pos:start="4057:21" pos:end="4063:21">if <condition pos:start="4057:24" pos:end="4057:28">(<expr pos:start="4057:25" pos:end="4057:27"><name pos:start="4057:25" pos:end="4057:27">rs2</name></expr>)</condition> <block pos:start="4057:30" pos:end="4063:21">{<block_content pos:start="4059:25" pos:end="4061:68">

                        <expr_stmt pos:start="4059:25" pos:end="4059:57"><expr pos:start="4059:25" pos:end="4059:56"><name pos:start="4059:25" pos:end="4059:32">cpu_src2</name> <operator pos:start="4059:34" pos:end="4059:34">=</operator> <call pos:start="4059:36" pos:end="4059:56"><name pos:start="4059:36" pos:end="4059:47">gen_load_gpr</name><argument_list pos:start="4059:48" pos:end="4059:56">(<argument pos:start="4059:49" pos:end="4059:50"><expr pos:start="4059:49" pos:end="4059:50"><name pos:start="4059:49" pos:end="4059:50">dc</name></expr></argument>, <argument pos:start="4059:53" pos:end="4059:55"><expr pos:start="4059:53" pos:end="4059:55"><name pos:start="4059:53" pos:end="4059:55">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4061:25" pos:end="4061:68"><expr pos:start="4061:25" pos:end="4061:67"><call pos:start="4061:25" pos:end="4061:67"><name pos:start="4061:25" pos:end="4061:38">tcg_gen_add_tl</name><argument_list pos:start="4061:39" pos:end="4061:67">(<argument pos:start="4061:40" pos:end="4061:46"><expr pos:start="4061:40" pos:end="4061:46"><name pos:start="4061:40" pos:end="4061:46">cpu_dst</name></expr></argument>, <argument pos:start="4061:49" pos:end="4061:56"><expr pos:start="4061:49" pos:end="4061:56"><name pos:start="4061:49" pos:end="4061:56">cpu_src1</name></expr></argument>, <argument pos:start="4061:59" pos:end="4061:66"><expr pos:start="4061:59" pos:end="4061:66"><name pos:start="4061:59" pos:end="4061:66">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4063:23" pos:end="4067:21">else <block pos:start="4063:28" pos:end="4067:21">{<block_content pos:start="4065:25" pos:end="4065:58">

                        <expr_stmt pos:start="4065:25" pos:end="4065:58"><expr pos:start="4065:25" pos:end="4065:57"><call pos:start="4065:25" pos:end="4065:57"><name pos:start="4065:25" pos:end="4065:38">tcg_gen_mov_tl</name><argument_list pos:start="4065:39" pos:end="4065:57">(<argument pos:start="4065:40" pos:end="4065:46"><expr pos:start="4065:40" pos:end="4065:46"><name pos:start="4065:40" pos:end="4065:46">cpu_dst</name></expr></argument>, <argument pos:start="4065:49" pos:end="4065:56"><expr pos:start="4065:49" pos:end="4065:56"><name pos:start="4065:49" pos:end="4065:56">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <switch pos:start="4071:17" pos:end="4223:17">switch <condition pos:start="4071:24" pos:end="4071:28">(<expr pos:start="4071:25" pos:end="4071:27"><name pos:start="4071:25" pos:end="4071:27">xop</name></expr>)</condition> <block pos:start="4071:30" pos:end="4223:17">{<block_content pos:start="4073:17" pos:end="4221:38">

                <case pos:start="4073:17" pos:end="4073:26">case <expr pos:start="4073:22" pos:end="4073:25"><literal type="number" pos:start="4073:22" pos:end="4073:25">0x38</literal></expr>:</case>      <comment type="block" pos:start="4073:33" pos:end="4073:42">/* jmpl */</comment>

                    <block pos:start="4075:21" pos:end="4103:21">{<block_content pos:start="4077:25" pos:end="4101:45">

                        <decl_stmt pos:start="4077:25" pos:end="4077:31"><decl pos:start="4077:25" pos:end="4077:30"><type pos:start="4077:25" pos:end="4077:28"><name pos:start="4077:25" pos:end="4077:28">TCGv</name></type> <name pos:start="4077:30" pos:end="4077:30">t</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="4079:25" pos:end="4079:41"><decl pos:start="4079:25" pos:end="4079:40"><type pos:start="4079:25" pos:end="4079:32"><name pos:start="4079:25" pos:end="4079:32">TCGv_i32</name></type> <name pos:start="4079:34" pos:end="4079:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4083:25" pos:end="4083:49"><expr pos:start="4083:25" pos:end="4083:48"><name pos:start="4083:25" pos:end="4083:25">t</name> <operator pos:start="4083:27" pos:end="4083:27">=</operator> <call pos:start="4083:29" pos:end="4083:48"><name pos:start="4083:29" pos:end="4083:40">gen_dest_gpr</name><argument_list pos:start="4083:41" pos:end="4083:48">(<argument pos:start="4083:42" pos:end="4083:43"><expr pos:start="4083:42" pos:end="4083:43"><name pos:start="4083:42" pos:end="4083:43">dc</name></expr></argument>, <argument pos:start="4083:46" pos:end="4083:47"><expr pos:start="4083:46" pos:end="4083:47"><name pos:start="4083:46" pos:end="4083:47">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4085:25" pos:end="4085:51"><expr pos:start="4085:25" pos:end="4085:50"><call pos:start="4085:25" pos:end="4085:50"><name pos:start="4085:25" pos:end="4085:39">tcg_gen_movi_tl</name><argument_list pos:start="4085:40" pos:end="4085:50">(<argument pos:start="4085:41" pos:end="4085:41"><expr pos:start="4085:41" pos:end="4085:41"><name pos:start="4085:41" pos:end="4085:41">t</name></expr></argument>, <argument pos:start="4085:44" pos:end="4085:49"><expr pos:start="4085:44" pos:end="4085:49"><name pos:start="4085:44" pos:end="4085:49"><name pos:start="4085:44" pos:end="4085:45">dc</name><operator pos:start="4085:46" pos:end="4085:47">-&gt;</operator><name pos:start="4085:48" pos:end="4085:49">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4087:25" pos:end="4087:49"><expr pos:start="4087:25" pos:end="4087:48"><call pos:start="4087:25" pos:end="4087:48"><name pos:start="4087:25" pos:end="4087:37">gen_store_gpr</name><argument_list pos:start="4087:38" pos:end="4087:48">(<argument pos:start="4087:39" pos:end="4087:40"><expr pos:start="4087:39" pos:end="4087:40"><name pos:start="4087:39" pos:end="4087:40">dc</name></expr></argument>, <argument pos:start="4087:43" pos:end="4087:44"><expr pos:start="4087:43" pos:end="4087:44"><name pos:start="4087:43" pos:end="4087:44">rd</name></expr></argument>, <argument pos:start="4087:47" pos:end="4087:47"><expr pos:start="4087:47" pos:end="4087:47"><name pos:start="4087:47" pos:end="4087:47">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4089:25" pos:end="4089:43"><expr pos:start="4089:25" pos:end="4089:42"><call pos:start="4089:25" pos:end="4089:42"><name pos:start="4089:25" pos:end="4089:38">gen_mov_pc_npc</name><argument_list pos:start="4089:39" pos:end="4089:42">(<argument pos:start="4089:40" pos:end="4089:41"><expr pos:start="4089:40" pos:end="4089:41"><name pos:start="4089:40" pos:end="4089:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4091:25" pos:end="4091:51"><expr pos:start="4091:25" pos:end="4091:50"><name pos:start="4091:25" pos:end="4091:31">r_const</name> <operator pos:start="4091:33" pos:end="4091:33">=</operator> <call pos:start="4091:35" pos:end="4091:50"><name pos:start="4091:35" pos:end="4091:47">tcg_const_i32</name><argument_list pos:start="4091:48" pos:end="4091:50">(<argument pos:start="4091:49" pos:end="4091:49"><expr pos:start="4091:49" pos:end="4091:49"><literal type="number" pos:start="4091:49" pos:end="4091:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4093:25" pos:end="4093:74"><expr pos:start="4093:25" pos:end="4093:73"><call pos:start="4093:25" pos:end="4093:73"><name pos:start="4093:25" pos:end="4093:46">gen_helper_check_align</name><argument_list pos:start="4093:47" pos:end="4093:73">(<argument pos:start="4093:48" pos:end="4093:54"><expr pos:start="4093:48" pos:end="4093:54"><name pos:start="4093:48" pos:end="4093:54">cpu_env</name></expr></argument>, <argument pos:start="4093:57" pos:end="4093:63"><expr pos:start="4093:57" pos:end="4093:63"><name pos:start="4093:57" pos:end="4093:63">cpu_dst</name></expr></argument>, <argument pos:start="4093:66" pos:end="4093:72"><expr pos:start="4093:66" pos:end="4093:72"><name pos:start="4093:66" pos:end="4093:72">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4095:25" pos:end="4095:51"><expr pos:start="4095:25" pos:end="4095:50"><call pos:start="4095:25" pos:end="4095:50"><name pos:start="4095:25" pos:end="4095:41">tcg_temp_free_i32</name><argument_list pos:start="4095:42" pos:end="4095:50">(<argument pos:start="4095:43" pos:end="4095:49"><expr pos:start="4095:43" pos:end="4095:49"><name pos:start="4095:43" pos:end="4095:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4097:25" pos:end="4097:54"><expr pos:start="4097:25" pos:end="4097:53"><call pos:start="4097:25" pos:end="4097:53"><name pos:start="4097:25" pos:end="4097:40">gen_address_mask</name><argument_list pos:start="4097:41" pos:end="4097:53">(<argument pos:start="4097:42" pos:end="4097:43"><expr pos:start="4097:42" pos:end="4097:43"><name pos:start="4097:42" pos:end="4097:43">dc</name></expr></argument>, <argument pos:start="4097:46" pos:end="4097:52"><expr pos:start="4097:46" pos:end="4097:52"><name pos:start="4097:46" pos:end="4097:52">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4099:25" pos:end="4099:57"><expr pos:start="4099:25" pos:end="4099:56"><call pos:start="4099:25" pos:end="4099:56"><name pos:start="4099:25" pos:end="4099:38">tcg_gen_mov_tl</name><argument_list pos:start="4099:39" pos:end="4099:56">(<argument pos:start="4099:40" pos:end="4099:46"><expr pos:start="4099:40" pos:end="4099:46"><name pos:start="4099:40" pos:end="4099:46">cpu_npc</name></expr></argument>, <argument pos:start="4099:49" pos:end="4099:55"><expr pos:start="4099:49" pos:end="4099:55"><name pos:start="4099:49" pos:end="4099:55">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4101:25" pos:end="4101:45"><expr pos:start="4101:25" pos:end="4101:44"><name pos:start="4101:25" pos:end="4101:31"><name pos:start="4101:25" pos:end="4101:26">dc</name><operator pos:start="4101:27" pos:end="4101:28">-&gt;</operator><name pos:start="4101:29" pos:end="4101:31">npc</name></name> <operator pos:start="4101:33" pos:end="4101:33">=</operator> <name pos:start="4101:35" pos:end="4101:44">DYNAMIC_PC</name></expr>;</expr_stmt>

                    </block_content>}</block>

                    <goto pos:start="4105:21" pos:end="4108:0">goto <name pos:start="4105:26" pos:end="4105:33">jmp_insn</name>;</goto>

<cpp:if pos:start="4107:1" pos:end="4107:58">#<cpp:directive pos:start="4107:2" pos:end="4107:3">if</cpp:directive> <expr pos:start="4107:5" pos:end="4107:58"><operator pos:start="4107:5" pos:end="4107:5">!</operator><call pos:start="4107:6" pos:end="4107:30"><name pos:start="4107:6" pos:end="4107:12">defined</name><argument_list pos:start="4107:13" pos:end="4107:30">(<argument pos:start="4107:14" pos:end="4107:29"><expr pos:start="4107:14" pos:end="4107:29"><name pos:start="4107:14" pos:end="4107:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4107:32" pos:end="4107:33">&amp;&amp;</operator> <operator pos:start="4107:35" pos:end="4107:35">!</operator><call pos:start="4107:36" pos:end="4107:58"><name pos:start="4107:36" pos:end="4107:42">defined</name><argument_list pos:start="4107:43" pos:end="4107:58">(<argument pos:start="4107:44" pos:end="4107:57"><expr pos:start="4107:44" pos:end="4107:57"><name pos:start="4107:44" pos:end="4107:57">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4109:17" pos:end="4109:26">case <expr pos:start="4109:22" pos:end="4109:25"><literal type="number" pos:start="4109:22" pos:end="4109:25">0x39</literal></expr>:</case>      <comment type="block" pos:start="4109:33" pos:end="4109:53">/* rett, V9 return */</comment>

                    <block pos:start="4111:21" pos:end="4135:21">{<block_content pos:start="4113:25" pos:end="4133:49">

                        <decl_stmt pos:start="4113:25" pos:end="4113:41"><decl pos:start="4113:25" pos:end="4113:40"><type pos:start="4113:25" pos:end="4113:32"><name pos:start="4113:25" pos:end="4113:32">TCGv_i32</name></type> <name pos:start="4113:34" pos:end="4113:40">r_const</name></decl>;</decl_stmt>



                        <if_stmt pos:start="4117:25" pos:end="4119:43"><if pos:start="4117:25" pos:end="4119:43">if <condition pos:start="4117:28" pos:end="4117:44">(<expr pos:start="4117:29" pos:end="4117:43"><operator pos:start="4117:29" pos:end="4117:29">!</operator><call pos:start="4117:30" pos:end="4117:43"><name pos:start="4117:30" pos:end="4117:39">supervisor</name><argument_list pos:start="4117:40" pos:end="4117:43">(<argument pos:start="4117:41" pos:end="4117:42"><expr pos:start="4117:41" pos:end="4117:42"><name pos:start="4117:41" pos:end="4117:42">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4119:29" pos:end="4119:43"><block_content pos:start="4119:29" pos:end="4119:43">

                            <goto pos:start="4119:29" pos:end="4119:43">goto <name pos:start="4119:34" pos:end="4119:42">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="4121:25" pos:end="4121:43"><expr pos:start="4121:25" pos:end="4121:42"><call pos:start="4121:25" pos:end="4121:42"><name pos:start="4121:25" pos:end="4121:38">gen_mov_pc_npc</name><argument_list pos:start="4121:39" pos:end="4121:42">(<argument pos:start="4121:40" pos:end="4121:41"><expr pos:start="4121:40" pos:end="4121:41"><name pos:start="4121:40" pos:end="4121:41">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4123:25" pos:end="4123:51"><expr pos:start="4123:25" pos:end="4123:50"><name pos:start="4123:25" pos:end="4123:31">r_const</name> <operator pos:start="4123:33" pos:end="4123:33">=</operator> <call pos:start="4123:35" pos:end="4123:50"><name pos:start="4123:35" pos:end="4123:47">tcg_const_i32</name><argument_list pos:start="4123:48" pos:end="4123:50">(<argument pos:start="4123:49" pos:end="4123:49"><expr pos:start="4123:49" pos:end="4123:49"><literal type="number" pos:start="4123:49" pos:end="4123:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4125:25" pos:end="4125:74"><expr pos:start="4125:25" pos:end="4125:73"><call pos:start="4125:25" pos:end="4125:73"><name pos:start="4125:25" pos:end="4125:46">gen_helper_check_align</name><argument_list pos:start="4125:47" pos:end="4125:73">(<argument pos:start="4125:48" pos:end="4125:54"><expr pos:start="4125:48" pos:end="4125:54"><name pos:start="4125:48" pos:end="4125:54">cpu_env</name></expr></argument>, <argument pos:start="4125:57" pos:end="4125:63"><expr pos:start="4125:57" pos:end="4125:63"><name pos:start="4125:57" pos:end="4125:63">cpu_dst</name></expr></argument>, <argument pos:start="4125:66" pos:end="4125:72"><expr pos:start="4125:66" pos:end="4125:72"><name pos:start="4125:66" pos:end="4125:72">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4127:25" pos:end="4127:51"><expr pos:start="4127:25" pos:end="4127:50"><call pos:start="4127:25" pos:end="4127:50"><name pos:start="4127:25" pos:end="4127:41">tcg_temp_free_i32</name><argument_list pos:start="4127:42" pos:end="4127:50">(<argument pos:start="4127:43" pos:end="4127:49"><expr pos:start="4127:43" pos:end="4127:49"><name pos:start="4127:43" pos:end="4127:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4129:25" pos:end="4129:57"><expr pos:start="4129:25" pos:end="4129:56"><call pos:start="4129:25" pos:end="4129:56"><name pos:start="4129:25" pos:end="4129:38">tcg_gen_mov_tl</name><argument_list pos:start="4129:39" pos:end="4129:56">(<argument pos:start="4129:40" pos:end="4129:46"><expr pos:start="4129:40" pos:end="4129:46"><name pos:start="4129:40" pos:end="4129:46">cpu_npc</name></expr></argument>, <argument pos:start="4129:49" pos:end="4129:55"><expr pos:start="4129:49" pos:end="4129:55"><name pos:start="4129:49" pos:end="4129:55">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4131:25" pos:end="4131:45"><expr pos:start="4131:25" pos:end="4131:44"><name pos:start="4131:25" pos:end="4131:31"><name pos:start="4131:25" pos:end="4131:26">dc</name><operator pos:start="4131:27" pos:end="4131:28">-&gt;</operator><name pos:start="4131:29" pos:end="4131:31">npc</name></name> <operator pos:start="4131:33" pos:end="4131:33">=</operator> <name pos:start="4131:35" pos:end="4131:44">DYNAMIC_PC</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="4133:25" pos:end="4133:49"><expr pos:start="4133:25" pos:end="4133:48"><call pos:start="4133:25" pos:end="4133:48"><name pos:start="4133:25" pos:end="4133:39">gen_helper_rett</name><argument_list pos:start="4133:40" pos:end="4133:48">(<argument pos:start="4133:41" pos:end="4133:47"><expr pos:start="4133:41" pos:end="4133:47"><name pos:start="4133:41" pos:end="4133:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <goto pos:start="4137:21" pos:end="4140:0">goto <name pos:start="4137:26" pos:end="4137:33">jmp_insn</name>;</goto>

<cpp:endif pos:start="4139:1" pos:end="4139:6">#<cpp:directive pos:start="4139:2" pos:end="4139:6">endif</cpp:directive></cpp:endif>

                <case pos:start="4141:17" pos:end="4141:26">case <expr pos:start="4141:22" pos:end="4141:25"><literal type="number" pos:start="4141:22" pos:end="4141:25">0x3b</literal></expr>:</case> <comment type="block" pos:start="4141:28" pos:end="4141:38">/* flush */</comment>

                    <if_stmt pos:start="4143:21" pos:end="4145:41"><if pos:start="4143:21" pos:end="4145:41">if <condition pos:start="4143:24" pos:end="4143:67">(<expr pos:start="4143:25" pos:end="4143:66"><operator pos:start="4143:25" pos:end="4143:25">!</operator><operator pos:start="4143:26" pos:end="4143:26">(</operator><operator pos:start="4143:27" pos:end="4143:27">(</operator><name pos:start="4143:28" pos:end="4143:29">dc</name><operator pos:start="4143:30" pos:end="4143:30">)</operator><operator pos:start="4143:31" pos:end="4143:32">-&gt;</operator><name pos:start="4143:33" pos:end="4143:45"><name pos:start="4143:33" pos:end="4143:35">def</name><operator pos:start="4143:36" pos:end="4143:37">-&gt;</operator><name pos:start="4143:38" pos:end="4143:45">features</name></name> <operator pos:start="4143:47" pos:end="4143:47">&amp;</operator> <name pos:start="4143:49" pos:end="4143:65">CPU_FEATURE_FLUSH</name><operator pos:start="4143:66" pos:end="4143:66">)</operator></expr>)</condition><block type="pseudo" pos:start="4145:25" pos:end="4145:41"><block_content pos:start="4145:25" pos:end="4145:41">

                        <goto pos:start="4145:25" pos:end="4145:41">goto <name pos:start="4145:30" pos:end="4145:40">unimp_flush</name>;</goto></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="4147:21" pos:end="4147:29">/* nop */</comment>

                    <break pos:start="4149:21" pos:end="4149:26">break;</break>

                <case pos:start="4151:17" pos:end="4151:26">case <expr pos:start="4151:22" pos:end="4151:25"><literal type="number" pos:start="4151:22" pos:end="4151:25">0x3c</literal></expr>:</case>      <comment type="block" pos:start="4151:33" pos:end="4151:42">/* save */</comment>

                    <expr_stmt pos:start="4153:21" pos:end="4153:35"><expr pos:start="4153:21" pos:end="4153:34"><call pos:start="4153:21" pos:end="4153:34"><name pos:start="4153:21" pos:end="4153:30">save_state</name><argument_list pos:start="4153:31" pos:end="4153:34">(<argument pos:start="4153:32" pos:end="4153:33"><expr pos:start="4153:32" pos:end="4153:33"><name pos:start="4153:32" pos:end="4153:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4155:21" pos:end="4155:45"><expr pos:start="4155:21" pos:end="4155:44"><call pos:start="4155:21" pos:end="4155:44"><name pos:start="4155:21" pos:end="4155:35">gen_helper_save</name><argument_list pos:start="4155:36" pos:end="4155:44">(<argument pos:start="4155:37" pos:end="4155:43"><expr pos:start="4155:37" pos:end="4155:43"><name pos:start="4155:37" pos:end="4155:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4157:21" pos:end="4157:51"><expr pos:start="4157:21" pos:end="4157:50"><call pos:start="4157:21" pos:end="4157:50"><name pos:start="4157:21" pos:end="4157:33">gen_store_gpr</name><argument_list pos:start="4157:34" pos:end="4157:50">(<argument pos:start="4157:35" pos:end="4157:36"><expr pos:start="4157:35" pos:end="4157:36"><name pos:start="4157:35" pos:end="4157:36">dc</name></expr></argument>, <argument pos:start="4157:39" pos:end="4157:40"><expr pos:start="4157:39" pos:end="4157:40"><name pos:start="4157:39" pos:end="4157:40">rd</name></expr></argument>, <argument pos:start="4157:43" pos:end="4157:49"><expr pos:start="4157:43" pos:end="4157:49"><name pos:start="4157:43" pos:end="4157:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4159:21" pos:end="4159:26">break;</break>

                <case pos:start="4161:17" pos:end="4161:26">case <expr pos:start="4161:22" pos:end="4161:25"><literal type="number" pos:start="4161:22" pos:end="4161:25">0x3d</literal></expr>:</case>      <comment type="block" pos:start="4161:33" pos:end="4161:45">/* restore */</comment>

                    <expr_stmt pos:start="4163:21" pos:end="4163:35"><expr pos:start="4163:21" pos:end="4163:34"><call pos:start="4163:21" pos:end="4163:34"><name pos:start="4163:21" pos:end="4163:30">save_state</name><argument_list pos:start="4163:31" pos:end="4163:34">(<argument pos:start="4163:32" pos:end="4163:33"><expr pos:start="4163:32" pos:end="4163:33"><name pos:start="4163:32" pos:end="4163:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4165:21" pos:end="4165:48"><expr pos:start="4165:21" pos:end="4165:47"><call pos:start="4165:21" pos:end="4165:47"><name pos:start="4165:21" pos:end="4165:38">gen_helper_restore</name><argument_list pos:start="4165:39" pos:end="4165:47">(<argument pos:start="4165:40" pos:end="4165:46"><expr pos:start="4165:40" pos:end="4165:46"><name pos:start="4165:40" pos:end="4165:46">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4167:21" pos:end="4167:51"><expr pos:start="4167:21" pos:end="4167:50"><call pos:start="4167:21" pos:end="4167:50"><name pos:start="4167:21" pos:end="4167:33">gen_store_gpr</name><argument_list pos:start="4167:34" pos:end="4167:50">(<argument pos:start="4167:35" pos:end="4167:36"><expr pos:start="4167:35" pos:end="4167:36"><name pos:start="4167:35" pos:end="4167:36">dc</name></expr></argument>, <argument pos:start="4167:39" pos:end="4167:40"><expr pos:start="4167:39" pos:end="4167:40"><name pos:start="4167:39" pos:end="4167:40">rd</name></expr></argument>, <argument pos:start="4167:43" pos:end="4167:49"><expr pos:start="4167:43" pos:end="4167:49"><name pos:start="4167:43" pos:end="4167:49">cpu_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4169:21" pos:end="4172:0">break;</break>

<cpp:if pos:start="4171:1" pos:end="4171:57">#<cpp:directive pos:start="4171:2" pos:end="4171:3">if</cpp:directive> <expr pos:start="4171:5" pos:end="4171:57"><operator pos:start="4171:5" pos:end="4171:5">!</operator><call pos:start="4171:6" pos:end="4171:30"><name pos:start="4171:6" pos:end="4171:12">defined</name><argument_list pos:start="4171:13" pos:end="4171:30">(<argument pos:start="4171:14" pos:end="4171:29"><expr pos:start="4171:14" pos:end="4171:29"><name pos:start="4171:14" pos:end="4171:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4171:32" pos:end="4171:33">&amp;&amp;</operator> <call pos:start="4171:35" pos:end="4171:57"><name pos:start="4171:35" pos:end="4171:41">defined</name><argument_list pos:start="4171:42" pos:end="4171:57">(<argument pos:start="4171:43" pos:end="4171:56"><expr pos:start="4171:43" pos:end="4171:56"><name pos:start="4171:43" pos:end="4171:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4173:17" pos:end="4173:26">case <expr pos:start="4173:22" pos:end="4173:25"><literal type="number" pos:start="4173:22" pos:end="4173:25">0x3e</literal></expr>:</case>      <comment type="block" pos:start="4173:33" pos:end="4173:51">/* V9 done/retry */</comment>

                    <block pos:start="4175:21" pos:end="4213:21">{<block_content pos:start="4177:25" pos:end="4211:25">

                        <switch pos:start="4177:25" pos:end="4211:25">switch <condition pos:start="4177:32" pos:end="4177:35">(<expr pos:start="4177:33" pos:end="4177:34"><name pos:start="4177:33" pos:end="4177:34">rd</name></expr>)</condition> <block pos:start="4177:37" pos:end="4211:25">{<block_content pos:start="4179:25" pos:end="4209:46">

                        <case pos:start="4179:25" pos:end="4179:31">case <expr pos:start="4179:30" pos:end="4179:30"><literal type="number" pos:start="4179:30" pos:end="4179:30">0</literal></expr>:</case>

                            <if_stmt pos:start="4181:29" pos:end="4183:47"><if pos:start="4181:29" pos:end="4183:47">if <condition pos:start="4181:32" pos:end="4181:48">(<expr pos:start="4181:33" pos:end="4181:47"><operator pos:start="4181:33" pos:end="4181:33">!</operator><call pos:start="4181:34" pos:end="4181:47"><name pos:start="4181:34" pos:end="4181:43">supervisor</name><argument_list pos:start="4181:44" pos:end="4181:47">(<argument pos:start="4181:45" pos:end="4181:46"><expr pos:start="4181:45" pos:end="4181:46"><name pos:start="4181:45" pos:end="4181:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4183:33" pos:end="4183:47"><block_content pos:start="4183:33" pos:end="4183:47">

                                <goto pos:start="4183:33" pos:end="4183:47">goto <name pos:start="4183:38" pos:end="4183:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="4185:29" pos:end="4185:49"><expr pos:start="4185:29" pos:end="4185:48"><name pos:start="4185:29" pos:end="4185:35"><name pos:start="4185:29" pos:end="4185:30">dc</name><operator pos:start="4185:31" pos:end="4185:32">-&gt;</operator><name pos:start="4185:33" pos:end="4185:35">npc</name></name> <operator pos:start="4185:37" pos:end="4185:37">=</operator> <name pos:start="4185:39" pos:end="4185:48">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4187:29" pos:end="4187:48"><expr pos:start="4187:29" pos:end="4187:47"><name pos:start="4187:29" pos:end="4187:34"><name pos:start="4187:29" pos:end="4187:30">dc</name><operator pos:start="4187:31" pos:end="4187:32">-&gt;</operator><name pos:start="4187:33" pos:end="4187:34">pc</name></name> <operator pos:start="4187:36" pos:end="4187:36">=</operator> <name pos:start="4187:38" pos:end="4187:47">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4189:29" pos:end="4189:53"><expr pos:start="4189:29" pos:end="4189:52"><call pos:start="4189:29" pos:end="4189:52"><name pos:start="4189:29" pos:end="4189:43">gen_helper_done</name><argument_list pos:start="4189:44" pos:end="4189:52">(<argument pos:start="4189:45" pos:end="4189:51"><expr pos:start="4189:45" pos:end="4189:51"><name pos:start="4189:45" pos:end="4189:51">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="4191:29" pos:end="4191:42">goto <name pos:start="4191:34" pos:end="4191:41">jmp_insn</name>;</goto>

                        <case pos:start="4193:25" pos:end="4193:31">case <expr pos:start="4193:30" pos:end="4193:30"><literal type="number" pos:start="4193:30" pos:end="4193:30">1</literal></expr>:</case>

                            <if_stmt pos:start="4195:29" pos:end="4197:47"><if pos:start="4195:29" pos:end="4197:47">if <condition pos:start="4195:32" pos:end="4195:48">(<expr pos:start="4195:33" pos:end="4195:47"><operator pos:start="4195:33" pos:end="4195:33">!</operator><call pos:start="4195:34" pos:end="4195:47"><name pos:start="4195:34" pos:end="4195:43">supervisor</name><argument_list pos:start="4195:44" pos:end="4195:47">(<argument pos:start="4195:45" pos:end="4195:46"><expr pos:start="4195:45" pos:end="4195:46"><name pos:start="4195:45" pos:end="4195:46">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4197:33" pos:end="4197:47"><block_content pos:start="4197:33" pos:end="4197:47">

                                <goto pos:start="4197:33" pos:end="4197:47">goto <name pos:start="4197:38" pos:end="4197:46">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="4199:29" pos:end="4199:49"><expr pos:start="4199:29" pos:end="4199:48"><name pos:start="4199:29" pos:end="4199:35"><name pos:start="4199:29" pos:end="4199:30">dc</name><operator pos:start="4199:31" pos:end="4199:32">-&gt;</operator><name pos:start="4199:33" pos:end="4199:35">npc</name></name> <operator pos:start="4199:37" pos:end="4199:37">=</operator> <name pos:start="4199:39" pos:end="4199:48">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4201:29" pos:end="4201:48"><expr pos:start="4201:29" pos:end="4201:47"><name pos:start="4201:29" pos:end="4201:34"><name pos:start="4201:29" pos:end="4201:30">dc</name><operator pos:start="4201:31" pos:end="4201:32">-&gt;</operator><name pos:start="4201:33" pos:end="4201:34">pc</name></name> <operator pos:start="4201:36" pos:end="4201:36">=</operator> <name pos:start="4201:38" pos:end="4201:47">DYNAMIC_PC</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="4203:29" pos:end="4203:54"><expr pos:start="4203:29" pos:end="4203:53"><call pos:start="4203:29" pos:end="4203:53"><name pos:start="4203:29" pos:end="4203:44">gen_helper_retry</name><argument_list pos:start="4203:45" pos:end="4203:53">(<argument pos:start="4203:46" pos:end="4203:52"><expr pos:start="4203:46" pos:end="4203:52"><name pos:start="4203:46" pos:end="4203:52">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="4205:29" pos:end="4205:42">goto <name pos:start="4205:34" pos:end="4205:41">jmp_insn</name>;</goto>

                        <default pos:start="4207:25" pos:end="4207:32">default:</default>

                            <goto pos:start="4209:29" pos:end="4209:46">goto <name pos:start="4209:34" pos:end="4209:45">illegal_insn</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block>

                    <break pos:start="4215:21" pos:end="4218:0">break;</break>

<cpp:endif pos:start="4217:1" pos:end="4217:6">#<cpp:directive pos:start="4217:2" pos:end="4217:6">endif</cpp:directive></cpp:endif>

                <default pos:start="4219:17" pos:end="4219:24">default:</default>

                    <goto pos:start="4221:21" pos:end="4221:38">goto <name pos:start="4221:26" pos:end="4221:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="4227:13" pos:end="4227:18">break;</break>

        </block_content>}</block>

        <break pos:start="4231:9" pos:end="4231:14">break;</break>

    <case pos:start="4233:5" pos:end="4233:11">case <expr pos:start="4233:10" pos:end="4233:10"><literal type="number" pos:start="4233:10" pos:end="4233:10">3</literal></expr>:</case>                     <comment type="block" pos:start="4233:33" pos:end="4233:61">/* load/store instructions */</comment>

        <block pos:start="4235:9" pos:end="5223:9">{<block_content pos:start="4237:13" pos:end="5221:34">

            <decl_stmt pos:start="4237:13" pos:end="4237:54"><decl pos:start="4237:13" pos:end="4237:53"><type pos:start="4237:13" pos:end="4237:24"><name pos:start="4237:13" pos:end="4237:20">unsigned</name> <name pos:start="4237:22" pos:end="4237:24">int</name></type> <name pos:start="4237:26" pos:end="4237:28">xop</name> <init pos:start="4237:30" pos:end="4237:53">= <expr pos:start="4237:32" pos:end="4237:53"><call pos:start="4237:32" pos:end="4237:53"><name pos:start="4237:32" pos:end="4237:40">GET_FIELD</name><argument_list pos:start="4237:41" pos:end="4237:53">(<argument pos:start="4237:42" pos:end="4237:45"><expr pos:start="4237:42" pos:end="4237:45"><name pos:start="4237:42" pos:end="4237:45">insn</name></expr></argument>, <argument pos:start="4237:48" pos:end="4237:48"><expr pos:start="4237:48" pos:end="4237:48"><literal type="number" pos:start="4237:48" pos:end="4237:48">7</literal></expr></argument>, <argument pos:start="4237:51" pos:end="4237:52"><expr pos:start="4237:51" pos:end="4237:52"><literal type="number" pos:start="4237:51" pos:end="4237:52">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="4241:13" pos:end="4241:42"><expr pos:start="4241:13" pos:end="4241:41"><name pos:start="4241:13" pos:end="4241:20">cpu_src1</name> <operator pos:start="4241:22" pos:end="4241:22">=</operator> <call pos:start="4241:24" pos:end="4241:41"><name pos:start="4241:24" pos:end="4241:31">get_src1</name><argument_list pos:start="4241:32" pos:end="4241:41">(<argument pos:start="4241:33" pos:end="4241:34"><expr pos:start="4241:33" pos:end="4241:34"><name pos:start="4241:33" pos:end="4241:34">dc</name></expr></argument>, <argument pos:start="4241:37" pos:end="4241:40"><expr pos:start="4241:37" pos:end="4241:40"><name pos:start="4241:37" pos:end="4241:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="4243:13" pos:end="4273:13"><if pos:start="4243:13" pos:end="4251:13">if <condition pos:start="4243:16" pos:end="4243:43">(<expr pos:start="4243:17" pos:end="4243:42"><name pos:start="4243:17" pos:end="4243:19">xop</name> <operator pos:start="4243:21" pos:end="4243:22">==</operator> <literal type="number" pos:start="4243:24" pos:end="4243:27">0x3c</literal> <operator pos:start="4243:29" pos:end="4243:30">||</operator> <name pos:start="4243:32" pos:end="4243:34">xop</name> <operator pos:start="4243:36" pos:end="4243:37">==</operator> <literal type="number" pos:start="4243:39" pos:end="4243:42">0x3e</literal></expr>)</condition> <block pos:start="4243:45" pos:end="4251:13">{<block_content pos:start="4245:17" pos:end="4249:51"> <comment type="line" pos:start="4243:47" pos:end="4243:62">// V9 casa/casxa</comment>

                <expr_stmt pos:start="4245:17" pos:end="4245:46"><expr pos:start="4245:17" pos:end="4245:45"><name pos:start="4245:17" pos:end="4245:19">rs2</name> <operator pos:start="4245:21" pos:end="4245:21">=</operator> <call pos:start="4245:23" pos:end="4245:45"><name pos:start="4245:23" pos:end="4245:31">GET_FIELD</name><argument_list pos:start="4245:32" pos:end="4245:45">(<argument pos:start="4245:33" pos:end="4245:36"><expr pos:start="4245:33" pos:end="4245:36"><name pos:start="4245:33" pos:end="4245:36">insn</name></expr></argument>, <argument pos:start="4245:39" pos:end="4245:40"><expr pos:start="4245:39" pos:end="4245:40"><literal type="number" pos:start="4245:39" pos:end="4245:40">27</literal></expr></argument>, <argument pos:start="4245:43" pos:end="4245:44"><expr pos:start="4245:43" pos:end="4245:44"><literal type="number" pos:start="4245:43" pos:end="4245:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4247:17" pos:end="4247:49"><expr pos:start="4247:17" pos:end="4247:48"><name pos:start="4247:17" pos:end="4247:24">cpu_src2</name> <operator pos:start="4247:26" pos:end="4247:26">=</operator> <call pos:start="4247:28" pos:end="4247:48"><name pos:start="4247:28" pos:end="4247:39">gen_load_gpr</name><argument_list pos:start="4247:40" pos:end="4247:48">(<argument pos:start="4247:41" pos:end="4247:42"><expr pos:start="4247:41" pos:end="4247:42"><name pos:start="4247:41" pos:end="4247:42">dc</name></expr></argument>, <argument pos:start="4247:45" pos:end="4247:47"><expr pos:start="4247:45" pos:end="4247:47"><name pos:start="4247:45" pos:end="4247:47">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4249:17" pos:end="4249:51"><expr pos:start="4249:17" pos:end="4249:50"><call pos:start="4249:17" pos:end="4249:50"><name pos:start="4249:17" pos:end="4249:30">tcg_gen_mov_tl</name><argument_list pos:start="4249:31" pos:end="4249:50">(<argument pos:start="4249:32" pos:end="4249:39"><expr pos:start="4249:32" pos:end="4249:39"><name pos:start="4249:32" pos:end="4249:39">cpu_addr</name></expr></argument>, <argument pos:start="4249:42" pos:end="4249:49"><expr pos:start="4249:42" pos:end="4249:49"><name pos:start="4249:42" pos:end="4249:49">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="4251:15" pos:end="4257:13">else if <condition pos:start="4251:23" pos:end="4251:30">(<expr pos:start="4251:24" pos:end="4251:29"><name pos:start="4251:24" pos:end="4251:29">IS_IMM</name></expr>)</condition> <block pos:start="4251:32" pos:end="4257:13">{<block_content pos:start="4253:17" pos:end="4255:58">     <comment type="block" pos:start="4251:38" pos:end="4251:52">/* immediate */</comment>

                <expr_stmt pos:start="4253:17" pos:end="4253:48"><expr pos:start="4253:17" pos:end="4253:47"><name pos:start="4253:17" pos:end="4253:20">simm</name> <operator pos:start="4253:22" pos:end="4253:22">=</operator> <call pos:start="4253:24" pos:end="4253:47"><name pos:start="4253:24" pos:end="4253:33">GET_FIELDs</name><argument_list pos:start="4253:34" pos:end="4253:47">(<argument pos:start="4253:35" pos:end="4253:38"><expr pos:start="4253:35" pos:end="4253:38"><name pos:start="4253:35" pos:end="4253:38">insn</name></expr></argument>, <argument pos:start="4253:41" pos:end="4253:42"><expr pos:start="4253:41" pos:end="4253:42"><literal type="number" pos:start="4253:41" pos:end="4253:42">19</literal></expr></argument>, <argument pos:start="4253:45" pos:end="4253:46"><expr pos:start="4253:45" pos:end="4253:46"><literal type="number" pos:start="4253:45" pos:end="4253:46">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="4255:17" pos:end="4255:58"><expr pos:start="4255:17" pos:end="4255:57"><call pos:start="4255:17" pos:end="4255:57"><name pos:start="4255:17" pos:end="4255:31">tcg_gen_addi_tl</name><argument_list pos:start="4255:32" pos:end="4255:57">(<argument pos:start="4255:33" pos:end="4255:40"><expr pos:start="4255:33" pos:end="4255:40"><name pos:start="4255:33" pos:end="4255:40">cpu_addr</name></expr></argument>, <argument pos:start="4255:43" pos:end="4255:50"><expr pos:start="4255:43" pos:end="4255:50"><name pos:start="4255:43" pos:end="4255:50">cpu_src1</name></expr></argument>, <argument pos:start="4255:53" pos:end="4255:56"><expr pos:start="4255:53" pos:end="4255:56"><name pos:start="4255:53" pos:end="4255:56">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="4257:15" pos:end="4273:13">else <block pos:start="4257:20" pos:end="4273:13">{<block_content pos:start="4259:17" pos:end="4271:17">            <comment type="block" pos:start="4257:33" pos:end="4257:46">/* register */</comment>

                <expr_stmt pos:start="4259:17" pos:end="4259:46"><expr pos:start="4259:17" pos:end="4259:45"><name pos:start="4259:17" pos:end="4259:19">rs2</name> <operator pos:start="4259:21" pos:end="4259:21">=</operator> <call pos:start="4259:23" pos:end="4259:45"><name pos:start="4259:23" pos:end="4259:31">GET_FIELD</name><argument_list pos:start="4259:32" pos:end="4259:45">(<argument pos:start="4259:33" pos:end="4259:36"><expr pos:start="4259:33" pos:end="4259:36"><name pos:start="4259:33" pos:end="4259:36">insn</name></expr></argument>, <argument pos:start="4259:39" pos:end="4259:40"><expr pos:start="4259:39" pos:end="4259:40"><literal type="number" pos:start="4259:39" pos:end="4259:40">27</literal></expr></argument>, <argument pos:start="4259:43" pos:end="4259:44"><expr pos:start="4259:43" pos:end="4259:44"><literal type="number" pos:start="4259:43" pos:end="4259:44">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="4261:17" pos:end="4271:17"><if pos:start="4261:17" pos:end="4267:17">if <condition pos:start="4261:20" pos:end="4261:29">(<expr pos:start="4261:21" pos:end="4261:28"><name pos:start="4261:21" pos:end="4261:23">rs2</name> <operator pos:start="4261:25" pos:end="4261:26">!=</operator> <literal type="number" pos:start="4261:28" pos:end="4261:28">0</literal></expr>)</condition> <block pos:start="4261:31" pos:end="4267:17">{<block_content pos:start="4263:21" pos:end="4265:65">

                    <expr_stmt pos:start="4263:21" pos:end="4263:53"><expr pos:start="4263:21" pos:end="4263:52"><name pos:start="4263:21" pos:end="4263:28">cpu_src2</name> <operator pos:start="4263:30" pos:end="4263:30">=</operator> <call pos:start="4263:32" pos:end="4263:52"><name pos:start="4263:32" pos:end="4263:43">gen_load_gpr</name><argument_list pos:start="4263:44" pos:end="4263:52">(<argument pos:start="4263:45" pos:end="4263:46"><expr pos:start="4263:45" pos:end="4263:46"><name pos:start="4263:45" pos:end="4263:46">dc</name></expr></argument>, <argument pos:start="4263:49" pos:end="4263:51"><expr pos:start="4263:49" pos:end="4263:51"><name pos:start="4263:49" pos:end="4263:51">rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4265:21" pos:end="4265:65"><expr pos:start="4265:21" pos:end="4265:64"><call pos:start="4265:21" pos:end="4265:64"><name pos:start="4265:21" pos:end="4265:34">tcg_gen_add_tl</name><argument_list pos:start="4265:35" pos:end="4265:64">(<argument pos:start="4265:36" pos:end="4265:43"><expr pos:start="4265:36" pos:end="4265:43"><name pos:start="4265:36" pos:end="4265:43">cpu_addr</name></expr></argument>, <argument pos:start="4265:46" pos:end="4265:53"><expr pos:start="4265:46" pos:end="4265:53"><name pos:start="4265:46" pos:end="4265:53">cpu_src1</name></expr></argument>, <argument pos:start="4265:56" pos:end="4265:63"><expr pos:start="4265:56" pos:end="4265:63"><name pos:start="4265:56" pos:end="4265:63">cpu_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="4267:19" pos:end="4271:17">else <block pos:start="4267:24" pos:end="4271:17">{<block_content pos:start="4269:21" pos:end="4269:55">

                    <expr_stmt pos:start="4269:21" pos:end="4269:55"><expr pos:start="4269:21" pos:end="4269:54"><call pos:start="4269:21" pos:end="4269:54"><name pos:start="4269:21" pos:end="4269:34">tcg_gen_mov_tl</name><argument_list pos:start="4269:35" pos:end="4269:54">(<argument pos:start="4269:36" pos:end="4269:43"><expr pos:start="4269:36" pos:end="4269:43"><name pos:start="4269:36" pos:end="4269:43">cpu_addr</name></expr></argument>, <argument pos:start="4269:46" pos:end="4269:53"><expr pos:start="4269:46" pos:end="4269:53"><name pos:start="4269:46" pos:end="4269:53">cpu_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="4275:13" pos:end="5221:34"><if pos:start="4275:13" pos:end="4705:13">if <condition pos:start="4275:16" pos:end="4279:74">(<expr pos:start="4275:17" pos:end="4279:73"><name pos:start="4275:17" pos:end="4275:19">xop</name> <operator pos:start="4275:21" pos:end="4275:21">&lt;</operator> <literal type="number" pos:start="4275:23" pos:end="4275:23">4</literal> <operator pos:start="4275:25" pos:end="4275:26">||</operator> <operator pos:start="4275:28" pos:end="4275:28">(</operator><name pos:start="4275:29" pos:end="4275:31">xop</name> <operator pos:start="4275:33" pos:end="4275:33">&gt;</operator> <literal type="number" pos:start="4275:35" pos:end="4275:35">7</literal> <operator pos:start="4275:37" pos:end="4275:38">&amp;&amp;</operator> <name pos:start="4275:40" pos:end="4275:42">xop</name> <operator pos:start="4275:44" pos:end="4275:44">&lt;</operator> <literal type="number" pos:start="4275:46" pos:end="4275:49">0x14</literal> <operator pos:start="4275:51" pos:end="4275:52">&amp;&amp;</operator> <name pos:start="4275:54" pos:end="4275:56">xop</name> <operator pos:start="4275:58" pos:end="4275:59">!=</operator> <literal type="number" pos:start="4275:61" pos:end="4275:64">0x0e</literal><operator pos:start="4275:65" pos:end="4275:65">)</operator> <operator pos:start="4275:67" pos:end="4275:68">||</operator>

                <operator pos:start="4277:17" pos:end="4277:17">(</operator><name pos:start="4277:18" pos:end="4277:20">xop</name> <operator pos:start="4277:22" pos:end="4277:22">&gt;</operator> <literal type="number" pos:start="4277:24" pos:end="4277:27">0x17</literal> <operator pos:start="4277:29" pos:end="4277:30">&amp;&amp;</operator> <name pos:start="4277:32" pos:end="4277:34">xop</name> <operator pos:start="4277:36" pos:end="4277:37">&lt;=</operator> <literal type="number" pos:start="4277:39" pos:end="4277:42">0x1d</literal> <operator pos:start="4277:44" pos:end="4277:44">)</operator> <operator pos:start="4277:46" pos:end="4277:47">||</operator>

                <operator pos:start="4279:17" pos:end="4279:17">(</operator><name pos:start="4279:18" pos:end="4279:20">xop</name> <operator pos:start="4279:22" pos:end="4279:22">&gt;</operator> <literal type="number" pos:start="4279:24" pos:end="4279:27">0x2c</literal> <operator pos:start="4279:29" pos:end="4279:30">&amp;&amp;</operator> <name pos:start="4279:32" pos:end="4279:34">xop</name> <operator pos:start="4279:36" pos:end="4279:37">&lt;=</operator> <literal type="number" pos:start="4279:39" pos:end="4279:42">0x33</literal><operator pos:start="4279:43" pos:end="4279:43">)</operator> <operator pos:start="4279:45" pos:end="4279:46">||</operator> <name pos:start="4279:48" pos:end="4279:50">xop</name> <operator pos:start="4279:52" pos:end="4279:53">==</operator> <literal type="number" pos:start="4279:55" pos:end="4279:58">0x1f</literal> <operator pos:start="4279:60" pos:end="4279:61">||</operator> <name pos:start="4279:63" pos:end="4279:65">xop</name> <operator pos:start="4279:67" pos:end="4279:68">==</operator> <literal type="number" pos:start="4279:70" pos:end="4279:73">0x3d</literal></expr>)</condition> <block pos:start="4279:76" pos:end="4705:13">{<block_content pos:start="4281:17" pos:end="4704:0">

                <decl_stmt pos:start="4281:17" pos:end="4281:52"><decl pos:start="4281:17" pos:end="4281:51"><type pos:start="4281:17" pos:end="4281:20"><name pos:start="4281:17" pos:end="4281:20">TCGv</name></type> <name pos:start="4281:22" pos:end="4281:28">cpu_val</name> <init pos:start="4281:30" pos:end="4281:51">= <expr pos:start="4281:32" pos:end="4281:51"><call pos:start="4281:32" pos:end="4281:51"><name pos:start="4281:32" pos:end="4281:43">gen_dest_gpr</name><argument_list pos:start="4281:44" pos:end="4281:51">(<argument pos:start="4281:45" pos:end="4281:46"><expr pos:start="4281:45" pos:end="4281:46"><name pos:start="4281:45" pos:end="4281:46">dc</name></expr></argument>, <argument pos:start="4281:49" pos:end="4281:50"><expr pos:start="4281:49" pos:end="4281:50"><name pos:start="4281:49" pos:end="4281:50">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <switch pos:start="4285:17" pos:end="4695:17">switch <condition pos:start="4285:24" pos:end="4285:28">(<expr pos:start="4285:25" pos:end="4285:27"><name pos:start="4285:25" pos:end="4285:27">xop</name></expr>)</condition> <block pos:start="4285:30" pos:end="4695:17">{<block_content pos:start="4287:17" pos:end="4693:38">

                <case pos:start="4287:17" pos:end="4287:25">case <expr pos:start="4287:22" pos:end="4287:24"><literal type="number" pos:start="4287:22" pos:end="4287:24">0x0</literal></expr>:</case>       <comment type="block" pos:start="4287:33" pos:end="4287:69">/* ld, V9 lduw, load unsigned word */</comment>

                    <expr_stmt pos:start="4289:21" pos:end="4289:51"><expr pos:start="4289:21" pos:end="4289:50"><call pos:start="4289:21" pos:end="4289:50"><name pos:start="4289:21" pos:end="4289:36">gen_address_mask</name><argument_list pos:start="4289:37" pos:end="4289:50">(<argument pos:start="4289:38" pos:end="4289:39"><expr pos:start="4289:38" pos:end="4289:39"><name pos:start="4289:38" pos:end="4289:39">dc</name></expr></argument>, <argument pos:start="4289:42" pos:end="4289:49"><expr pos:start="4289:42" pos:end="4289:49"><name pos:start="4289:42" pos:end="4289:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4291:21" pos:end="4291:71"><expr pos:start="4291:21" pos:end="4291:70"><call pos:start="4291:21" pos:end="4291:70"><name pos:start="4291:21" pos:end="4291:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="4291:39" pos:end="4291:70">(<argument pos:start="4291:40" pos:end="4291:46"><expr pos:start="4291:40" pos:end="4291:46"><name pos:start="4291:40" pos:end="4291:46">cpu_val</name></expr></argument>, <argument pos:start="4291:49" pos:end="4291:56"><expr pos:start="4291:49" pos:end="4291:56"><name pos:start="4291:49" pos:end="4291:56">cpu_addr</name></expr></argument>, <argument pos:start="4291:59" pos:end="4291:69"><expr pos:start="4291:59" pos:end="4291:69"><name pos:start="4291:59" pos:end="4291:69"><name pos:start="4291:59" pos:end="4291:60">dc</name><operator pos:start="4291:61" pos:end="4291:62">-&gt;</operator><name pos:start="4291:63" pos:end="4291:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4293:21" pos:end="4293:26">break;</break>

                <case pos:start="4295:17" pos:end="4295:25">case <expr pos:start="4295:22" pos:end="4295:24"><literal type="number" pos:start="4295:22" pos:end="4295:24">0x1</literal></expr>:</case>       <comment type="block" pos:start="4295:33" pos:end="4295:62">/* ldub, load unsigned byte */</comment>

                    <expr_stmt pos:start="4297:21" pos:end="4297:51"><expr pos:start="4297:21" pos:end="4297:50"><call pos:start="4297:21" pos:end="4297:50"><name pos:start="4297:21" pos:end="4297:36">gen_address_mask</name><argument_list pos:start="4297:37" pos:end="4297:50">(<argument pos:start="4297:38" pos:end="4297:39"><expr pos:start="4297:38" pos:end="4297:39"><name pos:start="4297:38" pos:end="4297:39">dc</name></expr></argument>, <argument pos:start="4297:42" pos:end="4297:49"><expr pos:start="4297:42" pos:end="4297:49"><name pos:start="4297:42" pos:end="4297:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4299:21" pos:end="4299:70"><expr pos:start="4299:21" pos:end="4299:69"><call pos:start="4299:21" pos:end="4299:69"><name pos:start="4299:21" pos:end="4299:37">tcg_gen_qemu_ld8u</name><argument_list pos:start="4299:38" pos:end="4299:69">(<argument pos:start="4299:39" pos:end="4299:45"><expr pos:start="4299:39" pos:end="4299:45"><name pos:start="4299:39" pos:end="4299:45">cpu_val</name></expr></argument>, <argument pos:start="4299:48" pos:end="4299:55"><expr pos:start="4299:48" pos:end="4299:55"><name pos:start="4299:48" pos:end="4299:55">cpu_addr</name></expr></argument>, <argument pos:start="4299:58" pos:end="4299:68"><expr pos:start="4299:58" pos:end="4299:68"><name pos:start="4299:58" pos:end="4299:68"><name pos:start="4299:58" pos:end="4299:59">dc</name><operator pos:start="4299:60" pos:end="4299:61">-&gt;</operator><name pos:start="4299:62" pos:end="4299:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4301:21" pos:end="4301:26">break;</break>

                <case pos:start="4303:17" pos:end="4303:25">case <expr pos:start="4303:22" pos:end="4303:24"><literal type="number" pos:start="4303:22" pos:end="4303:24">0x2</literal></expr>:</case>       <comment type="block" pos:start="4303:33" pos:end="4303:66">/* lduh, load unsigned halfword */</comment>

                    <expr_stmt pos:start="4305:21" pos:end="4305:51"><expr pos:start="4305:21" pos:end="4305:50"><call pos:start="4305:21" pos:end="4305:50"><name pos:start="4305:21" pos:end="4305:36">gen_address_mask</name><argument_list pos:start="4305:37" pos:end="4305:50">(<argument pos:start="4305:38" pos:end="4305:39"><expr pos:start="4305:38" pos:end="4305:39"><name pos:start="4305:38" pos:end="4305:39">dc</name></expr></argument>, <argument pos:start="4305:42" pos:end="4305:49"><expr pos:start="4305:42" pos:end="4305:49"><name pos:start="4305:42" pos:end="4305:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4307:21" pos:end="4307:71"><expr pos:start="4307:21" pos:end="4307:70"><call pos:start="4307:21" pos:end="4307:70"><name pos:start="4307:21" pos:end="4307:38">tcg_gen_qemu_ld16u</name><argument_list pos:start="4307:39" pos:end="4307:70">(<argument pos:start="4307:40" pos:end="4307:46"><expr pos:start="4307:40" pos:end="4307:46"><name pos:start="4307:40" pos:end="4307:46">cpu_val</name></expr></argument>, <argument pos:start="4307:49" pos:end="4307:56"><expr pos:start="4307:49" pos:end="4307:56"><name pos:start="4307:49" pos:end="4307:56">cpu_addr</name></expr></argument>, <argument pos:start="4307:59" pos:end="4307:69"><expr pos:start="4307:59" pos:end="4307:69"><name pos:start="4307:59" pos:end="4307:69"><name pos:start="4307:59" pos:end="4307:60">dc</name><operator pos:start="4307:61" pos:end="4307:62">-&gt;</operator><name pos:start="4307:63" pos:end="4307:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4309:21" pos:end="4309:26">break;</break>

                <case pos:start="4311:17" pos:end="4311:25">case <expr pos:start="4311:22" pos:end="4311:24"><literal type="number" pos:start="4311:22" pos:end="4311:24">0x3</literal></expr>:</case>       <comment type="block" pos:start="4311:33" pos:end="4311:59">/* ldd, load double word */</comment>

                    <if_stmt pos:start="4313:21" pos:end="4349:21"><if pos:start="4313:21" pos:end="4315:42">if <condition pos:start="4313:24" pos:end="4313:31">(<expr pos:start="4313:25" pos:end="4313:30"><name pos:start="4313:25" pos:end="4313:26">rd</name> <operator pos:start="4313:28" pos:end="4313:28">&amp;</operator> <literal type="number" pos:start="4313:30" pos:end="4313:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4315:25" pos:end="4315:42"><block_content pos:start="4315:25" pos:end="4315:42">

                        <goto pos:start="4315:25" pos:end="4315:42">goto <name pos:start="4315:30" pos:end="4315:41">illegal_insn</name>;</goto></block_content></block></if>

                    <else pos:start="4317:21" pos:end="4349:21">else <block pos:start="4317:26" pos:end="4349:21">{<block_content pos:start="4319:25" pos:end="4347:73">

                        <decl_stmt pos:start="4319:25" pos:end="4319:41"><decl pos:start="4319:25" pos:end="4319:40"><type pos:start="4319:25" pos:end="4319:32"><name pos:start="4319:25" pos:end="4319:32">TCGv_i32</name></type> <name pos:start="4319:34" pos:end="4319:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4323:25" pos:end="4323:39"><expr pos:start="4323:25" pos:end="4323:38"><call pos:start="4323:25" pos:end="4323:38"><name pos:start="4323:25" pos:end="4323:34">save_state</name><argument_list pos:start="4323:35" pos:end="4323:38">(<argument pos:start="4323:36" pos:end="4323:37"><expr pos:start="4323:36" pos:end="4323:37"><name pos:start="4323:36" pos:end="4323:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4325:25" pos:end="4325:51"><expr pos:start="4325:25" pos:end="4325:50"><name pos:start="4325:25" pos:end="4325:31">r_const</name> <operator pos:start="4325:33" pos:end="4325:33">=</operator> <call pos:start="4325:35" pos:end="4325:50"><name pos:start="4325:35" pos:end="4325:47">tcg_const_i32</name><argument_list pos:start="4325:48" pos:end="4325:50">(<argument pos:start="4325:49" pos:end="4325:49"><expr pos:start="4325:49" pos:end="4325:49"><literal type="number" pos:start="4325:49" pos:end="4325:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="4327:25" pos:end="4327:56">/* XXX remove alignment check */</comment>

                        <expr_stmt pos:start="4329:25" pos:end="4329:75"><expr pos:start="4329:25" pos:end="4329:74"><call pos:start="4329:25" pos:end="4329:74"><name pos:start="4329:25" pos:end="4329:46">gen_helper_check_align</name><argument_list pos:start="4329:47" pos:end="4329:74">(<argument pos:start="4329:48" pos:end="4329:54"><expr pos:start="4329:48" pos:end="4329:54"><name pos:start="4329:48" pos:end="4329:54">cpu_env</name></expr></argument>, <argument pos:start="4329:57" pos:end="4329:64"><expr pos:start="4329:57" pos:end="4329:64"><name pos:start="4329:57" pos:end="4329:64">cpu_addr</name></expr></argument>, <argument pos:start="4329:67" pos:end="4329:73"><expr pos:start="4329:67" pos:end="4329:73"><name pos:start="4329:67" pos:end="4329:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4331:25" pos:end="4331:51"><expr pos:start="4331:25" pos:end="4331:50"><call pos:start="4331:25" pos:end="4331:50"><name pos:start="4331:25" pos:end="4331:41">tcg_temp_free_i32</name><argument_list pos:start="4331:42" pos:end="4331:50">(<argument pos:start="4331:43" pos:end="4331:49"><expr pos:start="4331:43" pos:end="4331:49"><name pos:start="4331:43" pos:end="4331:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4333:25" pos:end="4333:55"><expr pos:start="4333:25" pos:end="4333:54"><call pos:start="4333:25" pos:end="4333:54"><name pos:start="4333:25" pos:end="4333:40">gen_address_mask</name><argument_list pos:start="4333:41" pos:end="4333:54">(<argument pos:start="4333:42" pos:end="4333:43"><expr pos:start="4333:42" pos:end="4333:43"><name pos:start="4333:42" pos:end="4333:43">dc</name></expr></argument>, <argument pos:start="4333:46" pos:end="4333:53"><expr pos:start="4333:46" pos:end="4333:53"><name pos:start="4333:46" pos:end="4333:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4335:25" pos:end="4335:76"><expr pos:start="4335:25" pos:end="4335:75"><call pos:start="4335:25" pos:end="4335:75"><name pos:start="4335:25" pos:end="4335:41">tcg_gen_qemu_ld64</name><argument_list pos:start="4335:42" pos:end="4335:75">(<argument pos:start="4335:43" pos:end="4335:51"><expr pos:start="4335:43" pos:end="4335:51"><name pos:start="4335:43" pos:end="4335:51">cpu_tmp64</name></expr></argument>, <argument pos:start="4335:54" pos:end="4335:61"><expr pos:start="4335:54" pos:end="4335:61"><name pos:start="4335:54" pos:end="4335:61">cpu_addr</name></expr></argument>, <argument pos:start="4335:64" pos:end="4335:74"><expr pos:start="4335:64" pos:end="4335:74"><name pos:start="4335:64" pos:end="4335:74"><name pos:start="4335:64" pos:end="4335:65">dc</name><operator pos:start="4335:66" pos:end="4335:67">-&gt;</operator><name pos:start="4335:68" pos:end="4335:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4337:25" pos:end="4337:66"><expr pos:start="4337:25" pos:end="4337:65"><call pos:start="4337:25" pos:end="4337:65"><name pos:start="4337:25" pos:end="4337:44">tcg_gen_trunc_i64_tl</name><argument_list pos:start="4337:45" pos:end="4337:65">(<argument pos:start="4337:46" pos:end="4337:53"><expr pos:start="4337:46" pos:end="4337:53"><name pos:start="4337:46" pos:end="4337:53">cpu_tmp0</name></expr></argument>, <argument pos:start="4337:56" pos:end="4337:64"><expr pos:start="4337:56" pos:end="4337:64"><name pos:start="4337:56" pos:end="4337:64">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4339:25" pos:end="4339:75"><expr pos:start="4339:25" pos:end="4339:74"><call pos:start="4339:25" pos:end="4339:74"><name pos:start="4339:25" pos:end="4339:39">tcg_gen_andi_tl</name><argument_list pos:start="4339:40" pos:end="4339:74">(<argument pos:start="4339:41" pos:end="4339:48"><expr pos:start="4339:41" pos:end="4339:48"><name pos:start="4339:41" pos:end="4339:48">cpu_tmp0</name></expr></argument>, <argument pos:start="4339:51" pos:end="4339:58"><expr pos:start="4339:51" pos:end="4339:58"><name pos:start="4339:51" pos:end="4339:58">cpu_tmp0</name></expr></argument>, <argument pos:start="4339:61" pos:end="4339:73"><expr pos:start="4339:61" pos:end="4339:73"><literal type="number" pos:start="4339:61" pos:end="4339:73">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4341:25" pos:end="4341:60"><expr pos:start="4341:25" pos:end="4341:59"><call pos:start="4341:25" pos:end="4341:59"><name pos:start="4341:25" pos:end="4341:37">gen_store_gpr</name><argument_list pos:start="4341:38" pos:end="4341:59">(<argument pos:start="4341:39" pos:end="4341:40"><expr pos:start="4341:39" pos:end="4341:40"><name pos:start="4341:39" pos:end="4341:40">dc</name></expr></argument>, <argument pos:start="4341:43" pos:end="4341:48"><expr pos:start="4341:43" pos:end="4341:48"><name pos:start="4341:43" pos:end="4341:44">rd</name> <operator pos:start="4341:46" pos:end="4341:46">+</operator> <literal type="number" pos:start="4341:48" pos:end="4341:48">1</literal></expr></argument>, <argument pos:start="4341:51" pos:end="4341:58"><expr pos:start="4341:51" pos:end="4341:58"><name pos:start="4341:51" pos:end="4341:58">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4343:25" pos:end="4343:67"><expr pos:start="4343:25" pos:end="4343:66"><call pos:start="4343:25" pos:end="4343:66"><name pos:start="4343:25" pos:end="4343:40">tcg_gen_shri_i64</name><argument_list pos:start="4343:41" pos:end="4343:66">(<argument pos:start="4343:42" pos:end="4343:50"><expr pos:start="4343:42" pos:end="4343:50"><name pos:start="4343:42" pos:end="4343:50">cpu_tmp64</name></expr></argument>, <argument pos:start="4343:53" pos:end="4343:61"><expr pos:start="4343:53" pos:end="4343:61"><name pos:start="4343:53" pos:end="4343:61">cpu_tmp64</name></expr></argument>, <argument pos:start="4343:64" pos:end="4343:65"><expr pos:start="4343:64" pos:end="4343:65"><literal type="number" pos:start="4343:64" pos:end="4343:65">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4345:25" pos:end="4345:65"><expr pos:start="4345:25" pos:end="4345:64"><call pos:start="4345:25" pos:end="4345:64"><name pos:start="4345:25" pos:end="4345:44">tcg_gen_trunc_i64_tl</name><argument_list pos:start="4345:45" pos:end="4345:64">(<argument pos:start="4345:46" pos:end="4345:52"><expr pos:start="4345:46" pos:end="4345:52"><name pos:start="4345:46" pos:end="4345:52">cpu_val</name></expr></argument>, <argument pos:start="4345:55" pos:end="4345:63"><expr pos:start="4345:55" pos:end="4345:63"><name pos:start="4345:55" pos:end="4345:63">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4347:25" pos:end="4347:73"><expr pos:start="4347:25" pos:end="4347:72"><call pos:start="4347:25" pos:end="4347:72"><name pos:start="4347:25" pos:end="4347:39">tcg_gen_andi_tl</name><argument_list pos:start="4347:40" pos:end="4347:72">(<argument pos:start="4347:41" pos:end="4347:47"><expr pos:start="4347:41" pos:end="4347:47"><name pos:start="4347:41" pos:end="4347:47">cpu_val</name></expr></argument>, <argument pos:start="4347:50" pos:end="4347:56"><expr pos:start="4347:50" pos:end="4347:56"><name pos:start="4347:50" pos:end="4347:56">cpu_val</name></expr></argument>, <argument pos:start="4347:59" pos:end="4347:71"><expr pos:start="4347:59" pos:end="4347:71"><literal type="number" pos:start="4347:59" pos:end="4347:71">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="4351:21" pos:end="4351:26">break;</break>

                <case pos:start="4353:17" pos:end="4353:25">case <expr pos:start="4353:22" pos:end="4353:24"><literal type="number" pos:start="4353:22" pos:end="4353:24">0x9</literal></expr>:</case>       <comment type="block" pos:start="4353:33" pos:end="4353:60">/* ldsb, load signed byte */</comment>

                    <expr_stmt pos:start="4355:21" pos:end="4355:51"><expr pos:start="4355:21" pos:end="4355:50"><call pos:start="4355:21" pos:end="4355:50"><name pos:start="4355:21" pos:end="4355:36">gen_address_mask</name><argument_list pos:start="4355:37" pos:end="4355:50">(<argument pos:start="4355:38" pos:end="4355:39"><expr pos:start="4355:38" pos:end="4355:39"><name pos:start="4355:38" pos:end="4355:39">dc</name></expr></argument>, <argument pos:start="4355:42" pos:end="4355:49"><expr pos:start="4355:42" pos:end="4355:49"><name pos:start="4355:42" pos:end="4355:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4357:21" pos:end="4357:70"><expr pos:start="4357:21" pos:end="4357:69"><call pos:start="4357:21" pos:end="4357:69"><name pos:start="4357:21" pos:end="4357:37">tcg_gen_qemu_ld8s</name><argument_list pos:start="4357:38" pos:end="4357:69">(<argument pos:start="4357:39" pos:end="4357:45"><expr pos:start="4357:39" pos:end="4357:45"><name pos:start="4357:39" pos:end="4357:45">cpu_val</name></expr></argument>, <argument pos:start="4357:48" pos:end="4357:55"><expr pos:start="4357:48" pos:end="4357:55"><name pos:start="4357:48" pos:end="4357:55">cpu_addr</name></expr></argument>, <argument pos:start="4357:58" pos:end="4357:68"><expr pos:start="4357:58" pos:end="4357:68"><name pos:start="4357:58" pos:end="4357:68"><name pos:start="4357:58" pos:end="4357:59">dc</name><operator pos:start="4357:60" pos:end="4357:61">-&gt;</operator><name pos:start="4357:62" pos:end="4357:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4359:21" pos:end="4359:26">break;</break>

                <case pos:start="4361:17" pos:end="4361:25">case <expr pos:start="4361:22" pos:end="4361:24"><literal type="number" pos:start="4361:22" pos:end="4361:24">0xa</literal></expr>:</case>       <comment type="block" pos:start="4361:33" pos:end="4361:64">/* ldsh, load signed halfword */</comment>

                    <expr_stmt pos:start="4363:21" pos:end="4363:51"><expr pos:start="4363:21" pos:end="4363:50"><call pos:start="4363:21" pos:end="4363:50"><name pos:start="4363:21" pos:end="4363:36">gen_address_mask</name><argument_list pos:start="4363:37" pos:end="4363:50">(<argument pos:start="4363:38" pos:end="4363:39"><expr pos:start="4363:38" pos:end="4363:39"><name pos:start="4363:38" pos:end="4363:39">dc</name></expr></argument>, <argument pos:start="4363:42" pos:end="4363:49"><expr pos:start="4363:42" pos:end="4363:49"><name pos:start="4363:42" pos:end="4363:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4365:21" pos:end="4365:71"><expr pos:start="4365:21" pos:end="4365:70"><call pos:start="4365:21" pos:end="4365:70"><name pos:start="4365:21" pos:end="4365:38">tcg_gen_qemu_ld16s</name><argument_list pos:start="4365:39" pos:end="4365:70">(<argument pos:start="4365:40" pos:end="4365:46"><expr pos:start="4365:40" pos:end="4365:46"><name pos:start="4365:40" pos:end="4365:46">cpu_val</name></expr></argument>, <argument pos:start="4365:49" pos:end="4365:56"><expr pos:start="4365:49" pos:end="4365:56"><name pos:start="4365:49" pos:end="4365:56">cpu_addr</name></expr></argument>, <argument pos:start="4365:59" pos:end="4365:69"><expr pos:start="4365:59" pos:end="4365:69"><name pos:start="4365:59" pos:end="4365:69"><name pos:start="4365:59" pos:end="4365:60">dc</name><operator pos:start="4365:61" pos:end="4365:62">-&gt;</operator><name pos:start="4365:63" pos:end="4365:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4367:21" pos:end="4367:26">break;</break>

                <case pos:start="4369:17" pos:end="4369:25">case <expr pos:start="4369:22" pos:end="4369:24"><literal type="number" pos:start="4369:22" pos:end="4369:24">0xd</literal></expr>:</case>       <comment type="block" pos:start="4369:33" pos:end="4369:73">/* ldstub -- XXX: should be atomically */</comment>

                    <block pos:start="4371:21" pos:end="4387:21">{<block_content pos:start="4373:25" pos:end="4385:47">

                        <decl_stmt pos:start="4373:25" pos:end="4373:37"><decl pos:start="4373:25" pos:end="4373:36"><type pos:start="4373:25" pos:end="4373:28"><name pos:start="4373:25" pos:end="4373:28">TCGv</name></type> <name pos:start="4373:30" pos:end="4373:36">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4377:25" pos:end="4377:55"><expr pos:start="4377:25" pos:end="4377:54"><call pos:start="4377:25" pos:end="4377:54"><name pos:start="4377:25" pos:end="4377:40">gen_address_mask</name><argument_list pos:start="4377:41" pos:end="4377:54">(<argument pos:start="4377:42" pos:end="4377:43"><expr pos:start="4377:42" pos:end="4377:43"><name pos:start="4377:42" pos:end="4377:43">dc</name></expr></argument>, <argument pos:start="4377:46" pos:end="4377:53"><expr pos:start="4377:46" pos:end="4377:53"><name pos:start="4377:46" pos:end="4377:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4379:25" pos:end="4379:74"><expr pos:start="4379:25" pos:end="4379:73"><call pos:start="4379:25" pos:end="4379:73"><name pos:start="4379:25" pos:end="4379:41">tcg_gen_qemu_ld8s</name><argument_list pos:start="4379:42" pos:end="4379:73">(<argument pos:start="4379:43" pos:end="4379:49"><expr pos:start="4379:43" pos:end="4379:49"><name pos:start="4379:43" pos:end="4379:49">cpu_val</name></expr></argument>, <argument pos:start="4379:52" pos:end="4379:59"><expr pos:start="4379:52" pos:end="4379:59"><name pos:start="4379:52" pos:end="4379:59">cpu_addr</name></expr></argument>, <argument pos:start="4379:62" pos:end="4379:72"><expr pos:start="4379:62" pos:end="4379:72"><name pos:start="4379:62" pos:end="4379:72"><name pos:start="4379:62" pos:end="4379:63">dc</name><operator pos:start="4379:64" pos:end="4379:65">-&gt;</operator><name pos:start="4379:66" pos:end="4379:72">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4381:25" pos:end="4381:53"><expr pos:start="4381:25" pos:end="4381:52"><name pos:start="4381:25" pos:end="4381:31">r_const</name> <operator pos:start="4381:33" pos:end="4381:33">=</operator> <call pos:start="4381:35" pos:end="4381:52"><name pos:start="4381:35" pos:end="4381:46">tcg_const_tl</name><argument_list pos:start="4381:47" pos:end="4381:52">(<argument pos:start="4381:48" pos:end="4381:51"><expr pos:start="4381:48" pos:end="4381:51"><literal type="number" pos:start="4381:48" pos:end="4381:51">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4383:25" pos:end="4383:73"><expr pos:start="4383:25" pos:end="4383:72"><call pos:start="4383:25" pos:end="4383:72"><name pos:start="4383:25" pos:end="4383:40">tcg_gen_qemu_st8</name><argument_list pos:start="4383:41" pos:end="4383:72">(<argument pos:start="4383:42" pos:end="4383:48"><expr pos:start="4383:42" pos:end="4383:48"><name pos:start="4383:42" pos:end="4383:48">r_const</name></expr></argument>, <argument pos:start="4383:51" pos:end="4383:58"><expr pos:start="4383:51" pos:end="4383:58"><name pos:start="4383:51" pos:end="4383:58">cpu_addr</name></expr></argument>, <argument pos:start="4383:61" pos:end="4383:71"><expr pos:start="4383:61" pos:end="4383:71"><name pos:start="4383:61" pos:end="4383:71"><name pos:start="4383:61" pos:end="4383:62">dc</name><operator pos:start="4383:63" pos:end="4383:64">-&gt;</operator><name pos:start="4383:65" pos:end="4383:71">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4385:25" pos:end="4385:47"><expr pos:start="4385:25" pos:end="4385:46"><call pos:start="4385:25" pos:end="4385:46"><name pos:start="4385:25" pos:end="4385:37">tcg_temp_free</name><argument_list pos:start="4385:38" pos:end="4385:46">(<argument pos:start="4385:39" pos:end="4385:45"><expr pos:start="4385:39" pos:end="4385:45"><name pos:start="4385:39" pos:end="4385:45">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="4389:21" pos:end="4389:26">break;</break>

                <case pos:start="4391:17" pos:end="4391:26">case <expr pos:start="4391:22" pos:end="4391:25"><literal type="number" pos:start="4391:22" pos:end="4391:25">0x0f</literal></expr>:</case>      <comment type="block" pos:start="4391:33" pos:end="4393:48">/* swap, swap register with memory. Also

                                   atomically */</comment>

                    <expr_stmt pos:start="4395:21" pos:end="4395:47"><expr pos:start="4395:21" pos:end="4395:46"><call pos:start="4395:21" pos:end="4395:46"><name pos:start="4395:21" pos:end="4395:36">CHECK_IU_FEATURE</name><argument_list pos:start="4395:37" pos:end="4395:46">(<argument pos:start="4395:38" pos:end="4395:39"><expr pos:start="4395:38" pos:end="4395:39"><name pos:start="4395:38" pos:end="4395:39">dc</name></expr></argument>, <argument pos:start="4395:42" pos:end="4395:45"><expr pos:start="4395:42" pos:end="4395:45"><name pos:start="4395:42" pos:end="4395:45">SWAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4397:21" pos:end="4397:52"><expr pos:start="4397:21" pos:end="4397:51"><name pos:start="4397:21" pos:end="4397:28">cpu_src1</name> <operator pos:start="4397:30" pos:end="4397:30">=</operator> <call pos:start="4397:32" pos:end="4397:51"><name pos:start="4397:32" pos:end="4397:43">gen_load_gpr</name><argument_list pos:start="4397:44" pos:end="4397:51">(<argument pos:start="4397:45" pos:end="4397:46"><expr pos:start="4397:45" pos:end="4397:46"><name pos:start="4397:45" pos:end="4397:46">dc</name></expr></argument>, <argument pos:start="4397:49" pos:end="4397:50"><expr pos:start="4397:49" pos:end="4397:50"><name pos:start="4397:49" pos:end="4397:50">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4399:21" pos:end="4399:51"><expr pos:start="4399:21" pos:end="4399:50"><call pos:start="4399:21" pos:end="4399:50"><name pos:start="4399:21" pos:end="4399:36">gen_address_mask</name><argument_list pos:start="4399:37" pos:end="4399:50">(<argument pos:start="4399:38" pos:end="4399:39"><expr pos:start="4399:38" pos:end="4399:39"><name pos:start="4399:38" pos:end="4399:39">dc</name></expr></argument>, <argument pos:start="4399:42" pos:end="4399:49"><expr pos:start="4399:42" pos:end="4399:49"><name pos:start="4399:42" pos:end="4399:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4401:21" pos:end="4401:72"><expr pos:start="4401:21" pos:end="4401:71"><call pos:start="4401:21" pos:end="4401:71"><name pos:start="4401:21" pos:end="4401:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="4401:39" pos:end="4401:71">(<argument pos:start="4401:40" pos:end="4401:47"><expr pos:start="4401:40" pos:end="4401:47"><name pos:start="4401:40" pos:end="4401:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4401:50" pos:end="4401:57"><expr pos:start="4401:50" pos:end="4401:57"><name pos:start="4401:50" pos:end="4401:57">cpu_addr</name></expr></argument>, <argument pos:start="4401:60" pos:end="4401:70"><expr pos:start="4401:60" pos:end="4401:70"><name pos:start="4401:60" pos:end="4401:70"><name pos:start="4401:60" pos:end="4401:61">dc</name><operator pos:start="4401:62" pos:end="4401:63">-&gt;</operator><name pos:start="4401:64" pos:end="4401:70">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4403:21" pos:end="4403:71"><expr pos:start="4403:21" pos:end="4403:70"><call pos:start="4403:21" pos:end="4403:70"><name pos:start="4403:21" pos:end="4403:37">tcg_gen_qemu_st32</name><argument_list pos:start="4403:38" pos:end="4403:70">(<argument pos:start="4403:39" pos:end="4403:46"><expr pos:start="4403:39" pos:end="4403:46"><name pos:start="4403:39" pos:end="4403:46">cpu_src1</name></expr></argument>, <argument pos:start="4403:49" pos:end="4403:56"><expr pos:start="4403:49" pos:end="4403:56"><name pos:start="4403:49" pos:end="4403:56">cpu_addr</name></expr></argument>, <argument pos:start="4403:59" pos:end="4403:69"><expr pos:start="4403:59" pos:end="4403:69"><name pos:start="4403:59" pos:end="4403:69"><name pos:start="4403:59" pos:end="4403:60">dc</name><operator pos:start="4403:61" pos:end="4403:62">-&gt;</operator><name pos:start="4403:63" pos:end="4403:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4405:21" pos:end="4405:54"><expr pos:start="4405:21" pos:end="4405:53"><call pos:start="4405:21" pos:end="4405:53"><name pos:start="4405:21" pos:end="4405:34">tcg_gen_mov_tl</name><argument_list pos:start="4405:35" pos:end="4405:53">(<argument pos:start="4405:36" pos:end="4405:42"><expr pos:start="4405:36" pos:end="4405:42"><name pos:start="4405:36" pos:end="4405:42">cpu_val</name></expr></argument>, <argument pos:start="4405:45" pos:end="4405:52"><expr pos:start="4405:45" pos:end="4405:52"><name pos:start="4405:45" pos:end="4405:52">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4407:21" pos:end="4410:0">break;</break>

<cpp:if pos:start="4409:1" pos:end="4409:57">#<cpp:directive pos:start="4409:2" pos:end="4409:3">if</cpp:directive> <expr pos:start="4409:5" pos:end="4409:57"><operator pos:start="4409:5" pos:end="4409:5">!</operator><call pos:start="4409:6" pos:end="4409:30"><name pos:start="4409:6" pos:end="4409:12">defined</name><argument_list pos:start="4409:13" pos:end="4409:30">(<argument pos:start="4409:14" pos:end="4409:29"><expr pos:start="4409:14" pos:end="4409:29"><name pos:start="4409:14" pos:end="4409:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4409:32" pos:end="4409:33">||</operator> <call pos:start="4409:35" pos:end="4409:57"><name pos:start="4409:35" pos:end="4409:41">defined</name><argument_list pos:start="4409:42" pos:end="4409:57">(<argument pos:start="4409:43" pos:end="4409:56"><expr pos:start="4409:43" pos:end="4409:56"><name pos:start="4409:43" pos:end="4409:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4411:17" pos:end="4414:0">case <expr pos:start="4411:22" pos:end="4411:25"><literal type="number" pos:start="4411:22" pos:end="4411:25">0x10</literal></expr>:</case>      <comment type="block" pos:start="4411:33" pos:end="4411:72">/* lda, V9 lduwa, load word alternate */</comment>

<cpp:ifndef pos:start="4413:1" pos:end="4413:22">#<cpp:directive pos:start="4413:2" pos:end="4413:7">ifndef</cpp:directive> <name pos:start="4413:9" pos:end="4413:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4415:21" pos:end="4417:42"><if pos:start="4415:21" pos:end="4417:42">if <condition pos:start="4415:24" pos:end="4415:31">(<expr pos:start="4415:25" pos:end="4415:30"><name pos:start="4415:25" pos:end="4415:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4417:25" pos:end="4417:42"><block_content pos:start="4417:25" pos:end="4417:42">

                        <goto pos:start="4417:25" pos:end="4417:42">goto <name pos:start="4417:30" pos:end="4417:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4419:21" pos:end="4424:0"><if pos:start="4419:21" pos:end="4424:0">if <condition pos:start="4419:24" pos:end="4419:40">(<expr pos:start="4419:25" pos:end="4419:39"><operator pos:start="4419:25" pos:end="4419:25">!</operator><call pos:start="4419:26" pos:end="4419:39"><name pos:start="4419:26" pos:end="4419:35">supervisor</name><argument_list pos:start="4419:36" pos:end="4419:39">(<argument pos:start="4419:37" pos:end="4419:38"><expr pos:start="4419:37" pos:end="4419:38"><name pos:start="4419:37" pos:end="4419:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4421:25" pos:end="4424:0"><block_content pos:start="4421:25" pos:end="4424:0">

                        <goto pos:start="4421:25" pos:end="4424:0">goto <name pos:start="4421:30" pos:end="4421:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4423:1" pos:end="4423:6">#<cpp:directive pos:start="4423:2" pos:end="4423:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4425:21" pos:end="4425:35"><expr pos:start="4425:21" pos:end="4425:34"><call pos:start="4425:21" pos:end="4425:34"><name pos:start="4425:21" pos:end="4425:30">save_state</name><argument_list pos:start="4425:31" pos:end="4425:34">(<argument pos:start="4425:32" pos:end="4425:33"><expr pos:start="4425:32" pos:end="4425:33"><name pos:start="4425:32" pos:end="4425:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4427:21" pos:end="4427:62"><expr pos:start="4427:21" pos:end="4427:61"><call pos:start="4427:21" pos:end="4427:61"><name pos:start="4427:21" pos:end="4427:30">gen_ld_asi</name><argument_list pos:start="4427:31" pos:end="4427:61">(<argument pos:start="4427:32" pos:end="4427:38"><expr pos:start="4427:32" pos:end="4427:38"><name pos:start="4427:32" pos:end="4427:38">cpu_val</name></expr></argument>, <argument pos:start="4427:41" pos:end="4427:48"><expr pos:start="4427:41" pos:end="4427:48"><name pos:start="4427:41" pos:end="4427:48">cpu_addr</name></expr></argument>, <argument pos:start="4427:51" pos:end="4427:54"><expr pos:start="4427:51" pos:end="4427:54"><name pos:start="4427:51" pos:end="4427:54">insn</name></expr></argument>, <argument pos:start="4427:57" pos:end="4427:57"><expr pos:start="4427:57" pos:end="4427:57"><literal type="number" pos:start="4427:57" pos:end="4427:57">4</literal></expr></argument>, <argument pos:start="4427:60" pos:end="4427:60"><expr pos:start="4427:60" pos:end="4427:60"><literal type="number" pos:start="4427:60" pos:end="4427:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4429:21" pos:end="4429:26">break;</break>

                <case pos:start="4431:17" pos:end="4434:0">case <expr pos:start="4431:22" pos:end="4431:25"><literal type="number" pos:start="4431:22" pos:end="4431:25">0x11</literal></expr>:</case>      <comment type="block" pos:start="4431:33" pos:end="4431:73">/* lduba, load unsigned byte alternate */</comment>

<cpp:ifndef pos:start="4433:1" pos:end="4433:22">#<cpp:directive pos:start="4433:2" pos:end="4433:7">ifndef</cpp:directive> <name pos:start="4433:9" pos:end="4433:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4435:21" pos:end="4437:42"><if pos:start="4435:21" pos:end="4437:42">if <condition pos:start="4435:24" pos:end="4435:31">(<expr pos:start="4435:25" pos:end="4435:30"><name pos:start="4435:25" pos:end="4435:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4437:25" pos:end="4437:42"><block_content pos:start="4437:25" pos:end="4437:42">

                        <goto pos:start="4437:25" pos:end="4437:42">goto <name pos:start="4437:30" pos:end="4437:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4439:21" pos:end="4444:0"><if pos:start="4439:21" pos:end="4444:0">if <condition pos:start="4439:24" pos:end="4439:40">(<expr pos:start="4439:25" pos:end="4439:39"><operator pos:start="4439:25" pos:end="4439:25">!</operator><call pos:start="4439:26" pos:end="4439:39"><name pos:start="4439:26" pos:end="4439:35">supervisor</name><argument_list pos:start="4439:36" pos:end="4439:39">(<argument pos:start="4439:37" pos:end="4439:38"><expr pos:start="4439:37" pos:end="4439:38"><name pos:start="4439:37" pos:end="4439:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4441:25" pos:end="4444:0"><block_content pos:start="4441:25" pos:end="4444:0">

                        <goto pos:start="4441:25" pos:end="4444:0">goto <name pos:start="4441:30" pos:end="4441:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4443:1" pos:end="4443:6">#<cpp:directive pos:start="4443:2" pos:end="4443:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4445:21" pos:end="4445:35"><expr pos:start="4445:21" pos:end="4445:34"><call pos:start="4445:21" pos:end="4445:34"><name pos:start="4445:21" pos:end="4445:30">save_state</name><argument_list pos:start="4445:31" pos:end="4445:34">(<argument pos:start="4445:32" pos:end="4445:33"><expr pos:start="4445:32" pos:end="4445:33"><name pos:start="4445:32" pos:end="4445:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4447:21" pos:end="4447:62"><expr pos:start="4447:21" pos:end="4447:61"><call pos:start="4447:21" pos:end="4447:61"><name pos:start="4447:21" pos:end="4447:30">gen_ld_asi</name><argument_list pos:start="4447:31" pos:end="4447:61">(<argument pos:start="4447:32" pos:end="4447:38"><expr pos:start="4447:32" pos:end="4447:38"><name pos:start="4447:32" pos:end="4447:38">cpu_val</name></expr></argument>, <argument pos:start="4447:41" pos:end="4447:48"><expr pos:start="4447:41" pos:end="4447:48"><name pos:start="4447:41" pos:end="4447:48">cpu_addr</name></expr></argument>, <argument pos:start="4447:51" pos:end="4447:54"><expr pos:start="4447:51" pos:end="4447:54"><name pos:start="4447:51" pos:end="4447:54">insn</name></expr></argument>, <argument pos:start="4447:57" pos:end="4447:57"><expr pos:start="4447:57" pos:end="4447:57"><literal type="number" pos:start="4447:57" pos:end="4447:57">1</literal></expr></argument>, <argument pos:start="4447:60" pos:end="4447:60"><expr pos:start="4447:60" pos:end="4447:60"><literal type="number" pos:start="4447:60" pos:end="4447:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4449:21" pos:end="4449:26">break;</break>

                <case pos:start="4451:17" pos:end="4454:0">case <expr pos:start="4451:22" pos:end="4451:25"><literal type="number" pos:start="4451:22" pos:end="4451:25">0x12</literal></expr>:</case>      <comment type="block" pos:start="4451:33" pos:end="4451:77">/* lduha, load unsigned halfword alternate */</comment>

<cpp:ifndef pos:start="4453:1" pos:end="4453:22">#<cpp:directive pos:start="4453:2" pos:end="4453:7">ifndef</cpp:directive> <name pos:start="4453:9" pos:end="4453:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4455:21" pos:end="4457:42"><if pos:start="4455:21" pos:end="4457:42">if <condition pos:start="4455:24" pos:end="4455:31">(<expr pos:start="4455:25" pos:end="4455:30"><name pos:start="4455:25" pos:end="4455:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4457:25" pos:end="4457:42"><block_content pos:start="4457:25" pos:end="4457:42">

                        <goto pos:start="4457:25" pos:end="4457:42">goto <name pos:start="4457:30" pos:end="4457:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4459:21" pos:end="4464:0"><if pos:start="4459:21" pos:end="4464:0">if <condition pos:start="4459:24" pos:end="4459:40">(<expr pos:start="4459:25" pos:end="4459:39"><operator pos:start="4459:25" pos:end="4459:25">!</operator><call pos:start="4459:26" pos:end="4459:39"><name pos:start="4459:26" pos:end="4459:35">supervisor</name><argument_list pos:start="4459:36" pos:end="4459:39">(<argument pos:start="4459:37" pos:end="4459:38"><expr pos:start="4459:37" pos:end="4459:38"><name pos:start="4459:37" pos:end="4459:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4461:25" pos:end="4464:0"><block_content pos:start="4461:25" pos:end="4464:0">

                        <goto pos:start="4461:25" pos:end="4464:0">goto <name pos:start="4461:30" pos:end="4461:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4463:1" pos:end="4463:6">#<cpp:directive pos:start="4463:2" pos:end="4463:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4465:21" pos:end="4465:35"><expr pos:start="4465:21" pos:end="4465:34"><call pos:start="4465:21" pos:end="4465:34"><name pos:start="4465:21" pos:end="4465:30">save_state</name><argument_list pos:start="4465:31" pos:end="4465:34">(<argument pos:start="4465:32" pos:end="4465:33"><expr pos:start="4465:32" pos:end="4465:33"><name pos:start="4465:32" pos:end="4465:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4467:21" pos:end="4467:62"><expr pos:start="4467:21" pos:end="4467:61"><call pos:start="4467:21" pos:end="4467:61"><name pos:start="4467:21" pos:end="4467:30">gen_ld_asi</name><argument_list pos:start="4467:31" pos:end="4467:61">(<argument pos:start="4467:32" pos:end="4467:38"><expr pos:start="4467:32" pos:end="4467:38"><name pos:start="4467:32" pos:end="4467:38">cpu_val</name></expr></argument>, <argument pos:start="4467:41" pos:end="4467:48"><expr pos:start="4467:41" pos:end="4467:48"><name pos:start="4467:41" pos:end="4467:48">cpu_addr</name></expr></argument>, <argument pos:start="4467:51" pos:end="4467:54"><expr pos:start="4467:51" pos:end="4467:54"><name pos:start="4467:51" pos:end="4467:54">insn</name></expr></argument>, <argument pos:start="4467:57" pos:end="4467:57"><expr pos:start="4467:57" pos:end="4467:57"><literal type="number" pos:start="4467:57" pos:end="4467:57">2</literal></expr></argument>, <argument pos:start="4467:60" pos:end="4467:60"><expr pos:start="4467:60" pos:end="4467:60"><literal type="number" pos:start="4467:60" pos:end="4467:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4469:21" pos:end="4469:26">break;</break>

                <case pos:start="4471:17" pos:end="4474:0">case <expr pos:start="4471:22" pos:end="4471:25"><literal type="number" pos:start="4471:22" pos:end="4471:25">0x13</literal></expr>:</case>      <comment type="block" pos:start="4471:33" pos:end="4471:70">/* ldda, load double word alternate */</comment>

<cpp:ifndef pos:start="4473:1" pos:end="4473:22">#<cpp:directive pos:start="4473:2" pos:end="4473:7">ifndef</cpp:directive> <name pos:start="4473:9" pos:end="4473:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4475:21" pos:end="4477:42"><if pos:start="4475:21" pos:end="4477:42">if <condition pos:start="4475:24" pos:end="4475:31">(<expr pos:start="4475:25" pos:end="4475:30"><name pos:start="4475:25" pos:end="4475:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4477:25" pos:end="4477:42"><block_content pos:start="4477:25" pos:end="4477:42">

                        <goto pos:start="4477:25" pos:end="4477:42">goto <name pos:start="4477:30" pos:end="4477:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4479:21" pos:end="4484:0"><if pos:start="4479:21" pos:end="4484:0">if <condition pos:start="4479:24" pos:end="4479:40">(<expr pos:start="4479:25" pos:end="4479:39"><operator pos:start="4479:25" pos:end="4479:25">!</operator><call pos:start="4479:26" pos:end="4479:39"><name pos:start="4479:26" pos:end="4479:35">supervisor</name><argument_list pos:start="4479:36" pos:end="4479:39">(<argument pos:start="4479:37" pos:end="4479:38"><expr pos:start="4479:37" pos:end="4479:38"><name pos:start="4479:37" pos:end="4479:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4481:25" pos:end="4484:0"><block_content pos:start="4481:25" pos:end="4484:0">

                        <goto pos:start="4481:25" pos:end="4484:0">goto <name pos:start="4481:30" pos:end="4481:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4483:1" pos:end="4483:6">#<cpp:directive pos:start="4483:2" pos:end="4483:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="4485:21" pos:end="4487:42"><if pos:start="4485:21" pos:end="4487:42">if <condition pos:start="4485:24" pos:end="4485:31">(<expr pos:start="4485:25" pos:end="4485:30"><name pos:start="4485:25" pos:end="4485:26">rd</name> <operator pos:start="4485:28" pos:end="4485:28">&amp;</operator> <literal type="number" pos:start="4485:30" pos:end="4485:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4487:25" pos:end="4487:42"><block_content pos:start="4487:25" pos:end="4487:42">

                        <goto pos:start="4487:25" pos:end="4487:42">goto <name pos:start="4487:30" pos:end="4487:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="4489:21" pos:end="4489:35"><expr pos:start="4489:21" pos:end="4489:34"><call pos:start="4489:21" pos:end="4489:34"><name pos:start="4489:21" pos:end="4489:30">save_state</name><argument_list pos:start="4489:31" pos:end="4489:34">(<argument pos:start="4489:32" pos:end="4489:33"><expr pos:start="4489:32" pos:end="4489:33"><name pos:start="4489:32" pos:end="4489:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4491:21" pos:end="4491:66"><expr pos:start="4491:21" pos:end="4491:65"><call pos:start="4491:21" pos:end="4491:65"><name pos:start="4491:21" pos:end="4491:32">gen_ldda_asi</name><argument_list pos:start="4491:33" pos:end="4491:65">(<argument pos:start="4491:34" pos:end="4491:35"><expr pos:start="4491:34" pos:end="4491:35"><name pos:start="4491:34" pos:end="4491:35">dc</name></expr></argument>, <argument pos:start="4491:38" pos:end="4491:44"><expr pos:start="4491:38" pos:end="4491:44"><name pos:start="4491:38" pos:end="4491:44">cpu_val</name></expr></argument>, <argument pos:start="4491:47" pos:end="4491:54"><expr pos:start="4491:47" pos:end="4491:54"><name pos:start="4491:47" pos:end="4491:54">cpu_addr</name></expr></argument>, <argument pos:start="4491:57" pos:end="4491:60"><expr pos:start="4491:57" pos:end="4491:60"><name pos:start="4491:57" pos:end="4491:60">insn</name></expr></argument>, <argument pos:start="4491:63" pos:end="4491:64"><expr pos:start="4491:63" pos:end="4491:64"><name pos:start="4491:63" pos:end="4491:64">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4493:21" pos:end="4493:35">goto <name pos:start="4493:26" pos:end="4493:34">skip_move</name>;</goto>

                <case pos:start="4495:17" pos:end="4498:0">case <expr pos:start="4495:22" pos:end="4495:25"><literal type="number" pos:start="4495:22" pos:end="4495:25">0x19</literal></expr>:</case>      <comment type="block" pos:start="4495:33" pos:end="4495:71">/* ldsba, load signed byte alternate */</comment>

<cpp:ifndef pos:start="4497:1" pos:end="4497:22">#<cpp:directive pos:start="4497:2" pos:end="4497:7">ifndef</cpp:directive> <name pos:start="4497:9" pos:end="4497:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4499:21" pos:end="4501:42"><if pos:start="4499:21" pos:end="4501:42">if <condition pos:start="4499:24" pos:end="4499:31">(<expr pos:start="4499:25" pos:end="4499:30"><name pos:start="4499:25" pos:end="4499:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4501:25" pos:end="4501:42"><block_content pos:start="4501:25" pos:end="4501:42">

                        <goto pos:start="4501:25" pos:end="4501:42">goto <name pos:start="4501:30" pos:end="4501:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4503:21" pos:end="4508:0"><if pos:start="4503:21" pos:end="4508:0">if <condition pos:start="4503:24" pos:end="4503:40">(<expr pos:start="4503:25" pos:end="4503:39"><operator pos:start="4503:25" pos:end="4503:25">!</operator><call pos:start="4503:26" pos:end="4503:39"><name pos:start="4503:26" pos:end="4503:35">supervisor</name><argument_list pos:start="4503:36" pos:end="4503:39">(<argument pos:start="4503:37" pos:end="4503:38"><expr pos:start="4503:37" pos:end="4503:38"><name pos:start="4503:37" pos:end="4503:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4505:25" pos:end="4508:0"><block_content pos:start="4505:25" pos:end="4508:0">

                        <goto pos:start="4505:25" pos:end="4508:0">goto <name pos:start="4505:30" pos:end="4505:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4507:1" pos:end="4507:6">#<cpp:directive pos:start="4507:2" pos:end="4507:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4509:21" pos:end="4509:35"><expr pos:start="4509:21" pos:end="4509:34"><call pos:start="4509:21" pos:end="4509:34"><name pos:start="4509:21" pos:end="4509:30">save_state</name><argument_list pos:start="4509:31" pos:end="4509:34">(<argument pos:start="4509:32" pos:end="4509:33"><expr pos:start="4509:32" pos:end="4509:33"><name pos:start="4509:32" pos:end="4509:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4511:21" pos:end="4511:62"><expr pos:start="4511:21" pos:end="4511:61"><call pos:start="4511:21" pos:end="4511:61"><name pos:start="4511:21" pos:end="4511:30">gen_ld_asi</name><argument_list pos:start="4511:31" pos:end="4511:61">(<argument pos:start="4511:32" pos:end="4511:38"><expr pos:start="4511:32" pos:end="4511:38"><name pos:start="4511:32" pos:end="4511:38">cpu_val</name></expr></argument>, <argument pos:start="4511:41" pos:end="4511:48"><expr pos:start="4511:41" pos:end="4511:48"><name pos:start="4511:41" pos:end="4511:48">cpu_addr</name></expr></argument>, <argument pos:start="4511:51" pos:end="4511:54"><expr pos:start="4511:51" pos:end="4511:54"><name pos:start="4511:51" pos:end="4511:54">insn</name></expr></argument>, <argument pos:start="4511:57" pos:end="4511:57"><expr pos:start="4511:57" pos:end="4511:57"><literal type="number" pos:start="4511:57" pos:end="4511:57">1</literal></expr></argument>, <argument pos:start="4511:60" pos:end="4511:60"><expr pos:start="4511:60" pos:end="4511:60"><literal type="number" pos:start="4511:60" pos:end="4511:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4513:21" pos:end="4513:26">break;</break>

                <case pos:start="4515:17" pos:end="4518:0">case <expr pos:start="4515:22" pos:end="4515:25"><literal type="number" pos:start="4515:22" pos:end="4515:25">0x1a</literal></expr>:</case>      <comment type="block" pos:start="4515:33" pos:end="4515:75">/* ldsha, load signed halfword alternate */</comment>

<cpp:ifndef pos:start="4517:1" pos:end="4517:22">#<cpp:directive pos:start="4517:2" pos:end="4517:7">ifndef</cpp:directive> <name pos:start="4517:9" pos:end="4517:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4519:21" pos:end="4521:42"><if pos:start="4519:21" pos:end="4521:42">if <condition pos:start="4519:24" pos:end="4519:31">(<expr pos:start="4519:25" pos:end="4519:30"><name pos:start="4519:25" pos:end="4519:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4521:25" pos:end="4521:42"><block_content pos:start="4521:25" pos:end="4521:42">

                        <goto pos:start="4521:25" pos:end="4521:42">goto <name pos:start="4521:30" pos:end="4521:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4523:21" pos:end="4528:0"><if pos:start="4523:21" pos:end="4528:0">if <condition pos:start="4523:24" pos:end="4523:40">(<expr pos:start="4523:25" pos:end="4523:39"><operator pos:start="4523:25" pos:end="4523:25">!</operator><call pos:start="4523:26" pos:end="4523:39"><name pos:start="4523:26" pos:end="4523:35">supervisor</name><argument_list pos:start="4523:36" pos:end="4523:39">(<argument pos:start="4523:37" pos:end="4523:38"><expr pos:start="4523:37" pos:end="4523:38"><name pos:start="4523:37" pos:end="4523:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4525:25" pos:end="4528:0"><block_content pos:start="4525:25" pos:end="4528:0">

                        <goto pos:start="4525:25" pos:end="4528:0">goto <name pos:start="4525:30" pos:end="4525:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4527:1" pos:end="4527:6">#<cpp:directive pos:start="4527:2" pos:end="4527:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4529:21" pos:end="4529:35"><expr pos:start="4529:21" pos:end="4529:34"><call pos:start="4529:21" pos:end="4529:34"><name pos:start="4529:21" pos:end="4529:30">save_state</name><argument_list pos:start="4529:31" pos:end="4529:34">(<argument pos:start="4529:32" pos:end="4529:33"><expr pos:start="4529:32" pos:end="4529:33"><name pos:start="4529:32" pos:end="4529:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4531:21" pos:end="4531:62"><expr pos:start="4531:21" pos:end="4531:61"><call pos:start="4531:21" pos:end="4531:61"><name pos:start="4531:21" pos:end="4531:30">gen_ld_asi</name><argument_list pos:start="4531:31" pos:end="4531:61">(<argument pos:start="4531:32" pos:end="4531:38"><expr pos:start="4531:32" pos:end="4531:38"><name pos:start="4531:32" pos:end="4531:38">cpu_val</name></expr></argument>, <argument pos:start="4531:41" pos:end="4531:48"><expr pos:start="4531:41" pos:end="4531:48"><name pos:start="4531:41" pos:end="4531:48">cpu_addr</name></expr></argument>, <argument pos:start="4531:51" pos:end="4531:54"><expr pos:start="4531:51" pos:end="4531:54"><name pos:start="4531:51" pos:end="4531:54">insn</name></expr></argument>, <argument pos:start="4531:57" pos:end="4531:57"><expr pos:start="4531:57" pos:end="4531:57"><literal type="number" pos:start="4531:57" pos:end="4531:57">2</literal></expr></argument>, <argument pos:start="4531:60" pos:end="4531:60"><expr pos:start="4531:60" pos:end="4531:60"><literal type="number" pos:start="4531:60" pos:end="4531:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4533:21" pos:end="4533:26">break;</break>

                <case pos:start="4535:17" pos:end="4538:0">case <expr pos:start="4535:22" pos:end="4535:25"><literal type="number" pos:start="4535:22" pos:end="4535:25">0x1d</literal></expr>:</case>      <comment type="block" pos:start="4535:33" pos:end="4535:74">/* ldstuba -- XXX: should be atomically */</comment>

<cpp:ifndef pos:start="4537:1" pos:end="4537:22">#<cpp:directive pos:start="4537:2" pos:end="4537:7">ifndef</cpp:directive> <name pos:start="4537:9" pos:end="4537:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4539:21" pos:end="4541:42"><if pos:start="4539:21" pos:end="4541:42">if <condition pos:start="4539:24" pos:end="4539:31">(<expr pos:start="4539:25" pos:end="4539:30"><name pos:start="4539:25" pos:end="4539:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4541:25" pos:end="4541:42"><block_content pos:start="4541:25" pos:end="4541:42">

                        <goto pos:start="4541:25" pos:end="4541:42">goto <name pos:start="4541:30" pos:end="4541:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4543:21" pos:end="4548:0"><if pos:start="4543:21" pos:end="4548:0">if <condition pos:start="4543:24" pos:end="4543:40">(<expr pos:start="4543:25" pos:end="4543:39"><operator pos:start="4543:25" pos:end="4543:25">!</operator><call pos:start="4543:26" pos:end="4543:39"><name pos:start="4543:26" pos:end="4543:35">supervisor</name><argument_list pos:start="4543:36" pos:end="4543:39">(<argument pos:start="4543:37" pos:end="4543:38"><expr pos:start="4543:37" pos:end="4543:38"><name pos:start="4543:37" pos:end="4543:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4545:25" pos:end="4548:0"><block_content pos:start="4545:25" pos:end="4548:0">

                        <goto pos:start="4545:25" pos:end="4548:0">goto <name pos:start="4545:30" pos:end="4545:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4547:1" pos:end="4547:6">#<cpp:directive pos:start="4547:2" pos:end="4547:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4549:21" pos:end="4549:35"><expr pos:start="4549:21" pos:end="4549:34"><call pos:start="4549:21" pos:end="4549:34"><name pos:start="4549:21" pos:end="4549:30">save_state</name><argument_list pos:start="4549:31" pos:end="4549:34">(<argument pos:start="4549:32" pos:end="4549:33"><expr pos:start="4549:32" pos:end="4549:33"><name pos:start="4549:32" pos:end="4549:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4551:21" pos:end="4551:60"><expr pos:start="4551:21" pos:end="4551:59"><call pos:start="4551:21" pos:end="4551:59"><name pos:start="4551:21" pos:end="4551:34">gen_ldstub_asi</name><argument_list pos:start="4551:35" pos:end="4551:59">(<argument pos:start="4551:36" pos:end="4551:42"><expr pos:start="4551:36" pos:end="4551:42"><name pos:start="4551:36" pos:end="4551:42">cpu_val</name></expr></argument>, <argument pos:start="4551:45" pos:end="4551:52"><expr pos:start="4551:45" pos:end="4551:52"><name pos:start="4551:45" pos:end="4551:52">cpu_addr</name></expr></argument>, <argument pos:start="4551:55" pos:end="4551:58"><expr pos:start="4551:55" pos:end="4551:58"><name pos:start="4551:55" pos:end="4551:58">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4553:21" pos:end="4553:26">break;</break>

                <case pos:start="4555:17" pos:end="4555:26">case <expr pos:start="4555:22" pos:end="4555:25"><literal type="number" pos:start="4555:22" pos:end="4555:25">0x1f</literal></expr>:</case>      <comment type="block" pos:start="4555:33" pos:end="4557:48">/* swapa, swap reg with alt. memory. Also

                                   atomically */</comment>

                    <expr_stmt pos:start="4559:21" pos:end="4562:0"><expr pos:start="4559:21" pos:end="4559:46"><call pos:start="4559:21" pos:end="4559:46"><name pos:start="4559:21" pos:end="4559:36">CHECK_IU_FEATURE</name><argument_list pos:start="4559:37" pos:end="4559:46">(<argument pos:start="4559:38" pos:end="4559:39"><expr pos:start="4559:38" pos:end="4559:39"><name pos:start="4559:38" pos:end="4559:39">dc</name></expr></argument>, <argument pos:start="4559:42" pos:end="4559:45"><expr pos:start="4559:42" pos:end="4559:45"><name pos:start="4559:42" pos:end="4559:45">SWAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="4561:1" pos:end="4561:22">#<cpp:directive pos:start="4561:2" pos:end="4561:7">ifndef</cpp:directive> <name pos:start="4561:9" pos:end="4561:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4563:21" pos:end="4565:42"><if pos:start="4563:21" pos:end="4565:42">if <condition pos:start="4563:24" pos:end="4563:31">(<expr pos:start="4563:25" pos:end="4563:30"><name pos:start="4563:25" pos:end="4563:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4565:25" pos:end="4565:42"><block_content pos:start="4565:25" pos:end="4565:42">

                        <goto pos:start="4565:25" pos:end="4565:42">goto <name pos:start="4565:30" pos:end="4565:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4567:21" pos:end="4572:0"><if pos:start="4567:21" pos:end="4572:0">if <condition pos:start="4567:24" pos:end="4567:40">(<expr pos:start="4567:25" pos:end="4567:39"><operator pos:start="4567:25" pos:end="4567:25">!</operator><call pos:start="4567:26" pos:end="4567:39"><name pos:start="4567:26" pos:end="4567:35">supervisor</name><argument_list pos:start="4567:36" pos:end="4567:39">(<argument pos:start="4567:37" pos:end="4567:38"><expr pos:start="4567:37" pos:end="4567:38"><name pos:start="4567:37" pos:end="4567:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4569:25" pos:end="4572:0"><block_content pos:start="4569:25" pos:end="4572:0">

                        <goto pos:start="4569:25" pos:end="4572:0">goto <name pos:start="4569:30" pos:end="4569:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4571:1" pos:end="4571:6">#<cpp:directive pos:start="4571:2" pos:end="4571:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4573:21" pos:end="4573:35"><expr pos:start="4573:21" pos:end="4573:34"><call pos:start="4573:21" pos:end="4573:34"><name pos:start="4573:21" pos:end="4573:30">save_state</name><argument_list pos:start="4573:31" pos:end="4573:34">(<argument pos:start="4573:32" pos:end="4573:33"><expr pos:start="4573:32" pos:end="4573:33"><name pos:start="4573:32" pos:end="4573:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4575:21" pos:end="4575:52"><expr pos:start="4575:21" pos:end="4575:51"><name pos:start="4575:21" pos:end="4575:28">cpu_src1</name> <operator pos:start="4575:30" pos:end="4575:30">=</operator> <call pos:start="4575:32" pos:end="4575:51"><name pos:start="4575:32" pos:end="4575:43">gen_load_gpr</name><argument_list pos:start="4575:44" pos:end="4575:51">(<argument pos:start="4575:45" pos:end="4575:46"><expr pos:start="4575:45" pos:end="4575:46"><name pos:start="4575:45" pos:end="4575:46">dc</name></expr></argument>, <argument pos:start="4575:49" pos:end="4575:50"><expr pos:start="4575:49" pos:end="4575:50"><name pos:start="4575:49" pos:end="4575:50">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4577:21" pos:end="4577:68"><expr pos:start="4577:21" pos:end="4577:67"><call pos:start="4577:21" pos:end="4577:67"><name pos:start="4577:21" pos:end="4577:32">gen_swap_asi</name><argument_list pos:start="4577:33" pos:end="4577:67">(<argument pos:start="4577:34" pos:end="4577:40"><expr pos:start="4577:34" pos:end="4577:40"><name pos:start="4577:34" pos:end="4577:40">cpu_val</name></expr></argument>, <argument pos:start="4577:43" pos:end="4577:50"><expr pos:start="4577:43" pos:end="4577:50"><name pos:start="4577:43" pos:end="4577:50">cpu_src1</name></expr></argument>, <argument pos:start="4577:53" pos:end="4577:60"><expr pos:start="4577:53" pos:end="4577:60"><name pos:start="4577:53" pos:end="4577:60">cpu_addr</name></expr></argument>, <argument pos:start="4577:63" pos:end="4577:66"><expr pos:start="4577:63" pos:end="4577:66"><name pos:start="4577:63" pos:end="4577:66">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4579:21" pos:end="4584:0">break;</break>



<cpp:ifndef pos:start="4583:1" pos:end="4583:22">#<cpp:directive pos:start="4583:2" pos:end="4583:7">ifndef</cpp:directive> <name pos:start="4583:9" pos:end="4583:22">TARGET_SPARC64</name></cpp:ifndef>

                <case pos:start="4585:17" pos:end="4585:26">case <expr pos:start="4585:22" pos:end="4585:25"><literal type="number" pos:start="4585:22" pos:end="4585:25">0x30</literal></expr>:</case> <comment type="block" pos:start="4585:28" pos:end="4585:36">/* ldc */</comment>

                <case pos:start="4587:17" pos:end="4587:26">case <expr pos:start="4587:22" pos:end="4587:25"><literal type="number" pos:start="4587:22" pos:end="4587:25">0x31</literal></expr>:</case> <comment type="block" pos:start="4587:28" pos:end="4587:38">/* ldcsr */</comment>

                <case pos:start="4589:17" pos:end="4589:26">case <expr pos:start="4589:22" pos:end="4589:25"><literal type="number" pos:start="4589:22" pos:end="4589:25">0x33</literal></expr>:</case> <comment type="block" pos:start="4589:28" pos:end="4589:37">/* lddc */</comment>

                    <goto pos:start="4591:21" pos:end="4598:0">goto <name pos:start="4591:26" pos:end="4591:33">ncp_insn</name>;</goto>

<cpp:endif pos:start="4593:1" pos:end="4593:6">#<cpp:directive pos:start="4593:2" pos:end="4593:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="4595:1" pos:end="4595:6">#<cpp:directive pos:start="4595:2" pos:end="4595:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4597:1" pos:end="4597:21">#<cpp:directive pos:start="4597:2" pos:end="4597:6">ifdef</cpp:directive> <name pos:start="4597:8" pos:end="4597:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="4599:17" pos:end="4599:26">case <expr pos:start="4599:22" pos:end="4599:25"><literal type="number" pos:start="4599:22" pos:end="4599:25">0x08</literal></expr>:</case> <comment type="block" pos:start="4599:28" pos:end="4599:40">/* V9 ldsw */</comment>

                    <expr_stmt pos:start="4601:21" pos:end="4601:51"><expr pos:start="4601:21" pos:end="4601:50"><call pos:start="4601:21" pos:end="4601:50"><name pos:start="4601:21" pos:end="4601:36">gen_address_mask</name><argument_list pos:start="4601:37" pos:end="4601:50">(<argument pos:start="4601:38" pos:end="4601:39"><expr pos:start="4601:38" pos:end="4601:39"><name pos:start="4601:38" pos:end="4601:39">dc</name></expr></argument>, <argument pos:start="4601:42" pos:end="4601:49"><expr pos:start="4601:42" pos:end="4601:49"><name pos:start="4601:42" pos:end="4601:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4603:21" pos:end="4603:71"><expr pos:start="4603:21" pos:end="4603:70"><call pos:start="4603:21" pos:end="4603:70"><name pos:start="4603:21" pos:end="4603:38">tcg_gen_qemu_ld32s</name><argument_list pos:start="4603:39" pos:end="4603:70">(<argument pos:start="4603:40" pos:end="4603:46"><expr pos:start="4603:40" pos:end="4603:46"><name pos:start="4603:40" pos:end="4603:46">cpu_val</name></expr></argument>, <argument pos:start="4603:49" pos:end="4603:56"><expr pos:start="4603:49" pos:end="4603:56"><name pos:start="4603:49" pos:end="4603:56">cpu_addr</name></expr></argument>, <argument pos:start="4603:59" pos:end="4603:69"><expr pos:start="4603:59" pos:end="4603:69"><name pos:start="4603:59" pos:end="4603:69"><name pos:start="4603:59" pos:end="4603:60">dc</name><operator pos:start="4603:61" pos:end="4603:62">-&gt;</operator><name pos:start="4603:63" pos:end="4603:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4605:21" pos:end="4605:26">break;</break>

                <case pos:start="4607:17" pos:end="4607:26">case <expr pos:start="4607:22" pos:end="4607:25"><literal type="number" pos:start="4607:22" pos:end="4607:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="4607:28" pos:end="4607:39">/* V9 ldx */</comment>

                    <expr_stmt pos:start="4609:21" pos:end="4609:51"><expr pos:start="4609:21" pos:end="4609:50"><call pos:start="4609:21" pos:end="4609:50"><name pos:start="4609:21" pos:end="4609:36">gen_address_mask</name><argument_list pos:start="4609:37" pos:end="4609:50">(<argument pos:start="4609:38" pos:end="4609:39"><expr pos:start="4609:38" pos:end="4609:39"><name pos:start="4609:38" pos:end="4609:39">dc</name></expr></argument>, <argument pos:start="4609:42" pos:end="4609:49"><expr pos:start="4609:42" pos:end="4609:49"><name pos:start="4609:42" pos:end="4609:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4611:21" pos:end="4611:70"><expr pos:start="4611:21" pos:end="4611:69"><call pos:start="4611:21" pos:end="4611:69"><name pos:start="4611:21" pos:end="4611:37">tcg_gen_qemu_ld64</name><argument_list pos:start="4611:38" pos:end="4611:69">(<argument pos:start="4611:39" pos:end="4611:45"><expr pos:start="4611:39" pos:end="4611:45"><name pos:start="4611:39" pos:end="4611:45">cpu_val</name></expr></argument>, <argument pos:start="4611:48" pos:end="4611:55"><expr pos:start="4611:48" pos:end="4611:55"><name pos:start="4611:48" pos:end="4611:55">cpu_addr</name></expr></argument>, <argument pos:start="4611:58" pos:end="4611:68"><expr pos:start="4611:58" pos:end="4611:68"><name pos:start="4611:58" pos:end="4611:68"><name pos:start="4611:58" pos:end="4611:59">dc</name><operator pos:start="4611:60" pos:end="4611:61">-&gt;</operator><name pos:start="4611:62" pos:end="4611:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4613:21" pos:end="4613:26">break;</break>

                <case pos:start="4615:17" pos:end="4615:26">case <expr pos:start="4615:22" pos:end="4615:25"><literal type="number" pos:start="4615:22" pos:end="4615:25">0x18</literal></expr>:</case> <comment type="block" pos:start="4615:28" pos:end="4615:41">/* V9 ldswa */</comment>

                    <expr_stmt pos:start="4617:21" pos:end="4617:35"><expr pos:start="4617:21" pos:end="4617:34"><call pos:start="4617:21" pos:end="4617:34"><name pos:start="4617:21" pos:end="4617:30">save_state</name><argument_list pos:start="4617:31" pos:end="4617:34">(<argument pos:start="4617:32" pos:end="4617:33"><expr pos:start="4617:32" pos:end="4617:33"><name pos:start="4617:32" pos:end="4617:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4619:21" pos:end="4619:62"><expr pos:start="4619:21" pos:end="4619:61"><call pos:start="4619:21" pos:end="4619:61"><name pos:start="4619:21" pos:end="4619:30">gen_ld_asi</name><argument_list pos:start="4619:31" pos:end="4619:61">(<argument pos:start="4619:32" pos:end="4619:38"><expr pos:start="4619:32" pos:end="4619:38"><name pos:start="4619:32" pos:end="4619:38">cpu_val</name></expr></argument>, <argument pos:start="4619:41" pos:end="4619:48"><expr pos:start="4619:41" pos:end="4619:48"><name pos:start="4619:41" pos:end="4619:48">cpu_addr</name></expr></argument>, <argument pos:start="4619:51" pos:end="4619:54"><expr pos:start="4619:51" pos:end="4619:54"><name pos:start="4619:51" pos:end="4619:54">insn</name></expr></argument>, <argument pos:start="4619:57" pos:end="4619:57"><expr pos:start="4619:57" pos:end="4619:57"><literal type="number" pos:start="4619:57" pos:end="4619:57">4</literal></expr></argument>, <argument pos:start="4619:60" pos:end="4619:60"><expr pos:start="4619:60" pos:end="4619:60"><literal type="number" pos:start="4619:60" pos:end="4619:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4621:21" pos:end="4621:26">break;</break>

                <case pos:start="4623:17" pos:end="4623:26">case <expr pos:start="4623:22" pos:end="4623:25"><literal type="number" pos:start="4623:22" pos:end="4623:25">0x1b</literal></expr>:</case> <comment type="block" pos:start="4623:28" pos:end="4623:40">/* V9 ldxa */</comment>

                    <expr_stmt pos:start="4625:21" pos:end="4625:35"><expr pos:start="4625:21" pos:end="4625:34"><call pos:start="4625:21" pos:end="4625:34"><name pos:start="4625:21" pos:end="4625:30">save_state</name><argument_list pos:start="4625:31" pos:end="4625:34">(<argument pos:start="4625:32" pos:end="4625:33"><expr pos:start="4625:32" pos:end="4625:33"><name pos:start="4625:32" pos:end="4625:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4627:21" pos:end="4627:62"><expr pos:start="4627:21" pos:end="4627:61"><call pos:start="4627:21" pos:end="4627:61"><name pos:start="4627:21" pos:end="4627:30">gen_ld_asi</name><argument_list pos:start="4627:31" pos:end="4627:61">(<argument pos:start="4627:32" pos:end="4627:38"><expr pos:start="4627:32" pos:end="4627:38"><name pos:start="4627:32" pos:end="4627:38">cpu_val</name></expr></argument>, <argument pos:start="4627:41" pos:end="4627:48"><expr pos:start="4627:41" pos:end="4627:48"><name pos:start="4627:41" pos:end="4627:48">cpu_addr</name></expr></argument>, <argument pos:start="4627:51" pos:end="4627:54"><expr pos:start="4627:51" pos:end="4627:54"><name pos:start="4627:51" pos:end="4627:54">insn</name></expr></argument>, <argument pos:start="4627:57" pos:end="4627:57"><expr pos:start="4627:57" pos:end="4627:57"><literal type="number" pos:start="4627:57" pos:end="4627:57">8</literal></expr></argument>, <argument pos:start="4627:60" pos:end="4627:60"><expr pos:start="4627:60" pos:end="4627:60"><literal type="number" pos:start="4627:60" pos:end="4627:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4629:21" pos:end="4629:26">break;</break>

                <case pos:start="4631:17" pos:end="4631:26">case <expr pos:start="4631:22" pos:end="4631:25"><literal type="number" pos:start="4631:22" pos:end="4631:25">0x2d</literal></expr>:</case> <comment type="block" pos:start="4631:28" pos:end="4631:55">/* V9 prefetch, no effect */</comment>

                    <goto pos:start="4633:21" pos:end="4633:35">goto <name pos:start="4633:26" pos:end="4633:34">skip_move</name>;</goto>

                <case pos:start="4635:17" pos:end="4635:26">case <expr pos:start="4635:22" pos:end="4635:25"><literal type="number" pos:start="4635:22" pos:end="4635:25">0x30</literal></expr>:</case> <comment type="block" pos:start="4635:28" pos:end="4635:40">/* V9 ldfa */</comment>

                    <if_stmt pos:start="4637:21" pos:end="4641:21"><if pos:start="4637:21" pos:end="4641:21">if <condition pos:start="4637:24" pos:end="4637:45">(<expr pos:start="4637:25" pos:end="4637:44"><call pos:start="4637:25" pos:end="4637:44"><name pos:start="4637:25" pos:end="4637:40">gen_trap_ifnofpu</name><argument_list pos:start="4637:41" pos:end="4637:44">(<argument pos:start="4637:42" pos:end="4637:43"><expr pos:start="4637:42" pos:end="4637:43"><name pos:start="4637:42" pos:end="4637:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4637:47" pos:end="4641:21">{<block_content pos:start="4639:25" pos:end="4639:38">

                        <goto pos:start="4639:25" pos:end="4639:38">goto <name pos:start="4639:30" pos:end="4639:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4643:21" pos:end="4643:35"><expr pos:start="4643:21" pos:end="4643:34"><call pos:start="4643:21" pos:end="4643:34"><name pos:start="4643:21" pos:end="4643:30">save_state</name><argument_list pos:start="4643:31" pos:end="4643:34">(<argument pos:start="4643:32" pos:end="4643:33"><expr pos:start="4643:32" pos:end="4643:33"><name pos:start="4643:32" pos:end="4643:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4645:21" pos:end="4645:55"><expr pos:start="4645:21" pos:end="4645:54"><call pos:start="4645:21" pos:end="4645:54"><name pos:start="4645:21" pos:end="4645:31">gen_ldf_asi</name><argument_list pos:start="4645:32" pos:end="4645:54">(<argument pos:start="4645:33" pos:end="4645:40"><expr pos:start="4645:33" pos:end="4645:40"><name pos:start="4645:33" pos:end="4645:40">cpu_addr</name></expr></argument>, <argument pos:start="4645:43" pos:end="4645:46"><expr pos:start="4645:43" pos:end="4645:46"><name pos:start="4645:43" pos:end="4645:46">insn</name></expr></argument>, <argument pos:start="4645:49" pos:end="4645:49"><expr pos:start="4645:49" pos:end="4645:49"><literal type="number" pos:start="4645:49" pos:end="4645:49">4</literal></expr></argument>, <argument pos:start="4645:52" pos:end="4645:53"><expr pos:start="4645:52" pos:end="4645:53"><name pos:start="4645:52" pos:end="4645:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4647:21" pos:end="4647:46"><expr pos:start="4647:21" pos:end="4647:45"><call pos:start="4647:21" pos:end="4647:45"><name pos:start="4647:21" pos:end="4647:41">gen_update_fprs_dirty</name><argument_list pos:start="4647:42" pos:end="4647:45">(<argument pos:start="4647:43" pos:end="4647:44"><expr pos:start="4647:43" pos:end="4647:44"><name pos:start="4647:43" pos:end="4647:44">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4649:21" pos:end="4649:35">goto <name pos:start="4649:26" pos:end="4649:34">skip_move</name>;</goto>

                <case pos:start="4651:17" pos:end="4651:26">case <expr pos:start="4651:22" pos:end="4651:25"><literal type="number" pos:start="4651:22" pos:end="4651:25">0x33</literal></expr>:</case> <comment type="block" pos:start="4651:28" pos:end="4651:41">/* V9 lddfa */</comment>

                    <if_stmt pos:start="4653:21" pos:end="4657:21"><if pos:start="4653:21" pos:end="4657:21">if <condition pos:start="4653:24" pos:end="4653:45">(<expr pos:start="4653:25" pos:end="4653:44"><call pos:start="4653:25" pos:end="4653:44"><name pos:start="4653:25" pos:end="4653:40">gen_trap_ifnofpu</name><argument_list pos:start="4653:41" pos:end="4653:44">(<argument pos:start="4653:42" pos:end="4653:43"><expr pos:start="4653:42" pos:end="4653:43"><name pos:start="4653:42" pos:end="4653:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4653:47" pos:end="4657:21">{<block_content pos:start="4655:25" pos:end="4655:38">

                        <goto pos:start="4655:25" pos:end="4655:38">goto <name pos:start="4655:30" pos:end="4655:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4659:21" pos:end="4659:35"><expr pos:start="4659:21" pos:end="4659:34"><call pos:start="4659:21" pos:end="4659:34"><name pos:start="4659:21" pos:end="4659:30">save_state</name><argument_list pos:start="4659:31" pos:end="4659:34">(<argument pos:start="4659:32" pos:end="4659:33"><expr pos:start="4659:32" pos:end="4659:33"><name pos:start="4659:32" pos:end="4659:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4661:21" pos:end="4661:63"><expr pos:start="4661:21" pos:end="4661:62"><call pos:start="4661:21" pos:end="4661:62"><name pos:start="4661:21" pos:end="4661:31">gen_ldf_asi</name><argument_list pos:start="4661:32" pos:end="4661:62">(<argument pos:start="4661:33" pos:end="4661:40"><expr pos:start="4661:33" pos:end="4661:40"><name pos:start="4661:33" pos:end="4661:40">cpu_addr</name></expr></argument>, <argument pos:start="4661:43" pos:end="4661:46"><expr pos:start="4661:43" pos:end="4661:46"><name pos:start="4661:43" pos:end="4661:46">insn</name></expr></argument>, <argument pos:start="4661:49" pos:end="4661:49"><expr pos:start="4661:49" pos:end="4661:49"><literal type="number" pos:start="4661:49" pos:end="4661:49">8</literal></expr></argument>, <argument pos:start="4661:52" pos:end="4661:61"><expr pos:start="4661:52" pos:end="4661:61"><call pos:start="4661:52" pos:end="4661:61"><name pos:start="4661:52" pos:end="4661:57">DFPREG</name><argument_list pos:start="4661:58" pos:end="4661:61">(<argument pos:start="4661:59" pos:end="4661:60"><expr pos:start="4661:59" pos:end="4661:60"><name pos:start="4661:59" pos:end="4661:60">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4663:21" pos:end="4663:54"><expr pos:start="4663:21" pos:end="4663:53"><call pos:start="4663:21" pos:end="4663:53"><name pos:start="4663:21" pos:end="4663:41">gen_update_fprs_dirty</name><argument_list pos:start="4663:42" pos:end="4663:53">(<argument pos:start="4663:43" pos:end="4663:52"><expr pos:start="4663:43" pos:end="4663:52"><call pos:start="4663:43" pos:end="4663:52"><name pos:start="4663:43" pos:end="4663:48">DFPREG</name><argument_list pos:start="4663:49" pos:end="4663:52">(<argument pos:start="4663:50" pos:end="4663:51"><expr pos:start="4663:50" pos:end="4663:51"><name pos:start="4663:50" pos:end="4663:51">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4665:21" pos:end="4665:35">goto <name pos:start="4665:26" pos:end="4665:34">skip_move</name>;</goto>

                <case pos:start="4667:17" pos:end="4667:26">case <expr pos:start="4667:22" pos:end="4667:25"><literal type="number" pos:start="4667:22" pos:end="4667:25">0x3d</literal></expr>:</case> <comment type="block" pos:start="4667:28" pos:end="4667:56">/* V9 prefetcha, no effect */</comment>

                    <goto pos:start="4669:21" pos:end="4669:35">goto <name pos:start="4669:26" pos:end="4669:34">skip_move</name>;</goto>

                <case pos:start="4671:17" pos:end="4671:26">case <expr pos:start="4671:22" pos:end="4671:25"><literal type="number" pos:start="4671:22" pos:end="4671:25">0x32</literal></expr>:</case> <comment type="block" pos:start="4671:28" pos:end="4671:41">/* V9 ldqfa */</comment>

                    <expr_stmt pos:start="4673:21" pos:end="4673:52"><expr pos:start="4673:21" pos:end="4673:51"><call pos:start="4673:21" pos:end="4673:51"><name pos:start="4673:21" pos:end="4673:37">CHECK_FPU_FEATURE</name><argument_list pos:start="4673:38" pos:end="4673:51">(<argument pos:start="4673:39" pos:end="4673:40"><expr pos:start="4673:39" pos:end="4673:40"><name pos:start="4673:39" pos:end="4673:40">dc</name></expr></argument>, <argument pos:start="4673:43" pos:end="4673:50"><expr pos:start="4673:43" pos:end="4673:50"><name pos:start="4673:43" pos:end="4673:50">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4675:21" pos:end="4679:21"><if pos:start="4675:21" pos:end="4679:21">if <condition pos:start="4675:24" pos:end="4675:45">(<expr pos:start="4675:25" pos:end="4675:44"><call pos:start="4675:25" pos:end="4675:44"><name pos:start="4675:25" pos:end="4675:40">gen_trap_ifnofpu</name><argument_list pos:start="4675:41" pos:end="4675:44">(<argument pos:start="4675:42" pos:end="4675:43"><expr pos:start="4675:42" pos:end="4675:43"><name pos:start="4675:42" pos:end="4675:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4675:47" pos:end="4679:21">{<block_content pos:start="4677:25" pos:end="4677:38">

                        <goto pos:start="4677:25" pos:end="4677:38">goto <name pos:start="4677:30" pos:end="4677:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="4681:21" pos:end="4681:35"><expr pos:start="4681:21" pos:end="4681:34"><call pos:start="4681:21" pos:end="4681:34"><name pos:start="4681:21" pos:end="4681:30">save_state</name><argument_list pos:start="4681:31" pos:end="4681:34">(<argument pos:start="4681:32" pos:end="4681:33"><expr pos:start="4681:32" pos:end="4681:33"><name pos:start="4681:32" pos:end="4681:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4683:21" pos:end="4683:64"><expr pos:start="4683:21" pos:end="4683:63"><call pos:start="4683:21" pos:end="4683:63"><name pos:start="4683:21" pos:end="4683:31">gen_ldf_asi</name><argument_list pos:start="4683:32" pos:end="4683:63">(<argument pos:start="4683:33" pos:end="4683:40"><expr pos:start="4683:33" pos:end="4683:40"><name pos:start="4683:33" pos:end="4683:40">cpu_addr</name></expr></argument>, <argument pos:start="4683:43" pos:end="4683:46"><expr pos:start="4683:43" pos:end="4683:46"><name pos:start="4683:43" pos:end="4683:46">insn</name></expr></argument>, <argument pos:start="4683:49" pos:end="4683:50"><expr pos:start="4683:49" pos:end="4683:50"><literal type="number" pos:start="4683:49" pos:end="4683:50">16</literal></expr></argument>, <argument pos:start="4683:53" pos:end="4683:62"><expr pos:start="4683:53" pos:end="4683:62"><call pos:start="4683:53" pos:end="4683:62"><name pos:start="4683:53" pos:end="4683:58">QFPREG</name><argument_list pos:start="4683:59" pos:end="4683:62">(<argument pos:start="4683:60" pos:end="4683:61"><expr pos:start="4683:60" pos:end="4683:61"><name pos:start="4683:60" pos:end="4683:61">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4685:21" pos:end="4685:54"><expr pos:start="4685:21" pos:end="4685:53"><call pos:start="4685:21" pos:end="4685:53"><name pos:start="4685:21" pos:end="4685:41">gen_update_fprs_dirty</name><argument_list pos:start="4685:42" pos:end="4685:53">(<argument pos:start="4685:43" pos:end="4685:52"><expr pos:start="4685:43" pos:end="4685:52"><call pos:start="4685:43" pos:end="4685:52"><name pos:start="4685:43" pos:end="4685:48">QFPREG</name><argument_list pos:start="4685:49" pos:end="4685:52">(<argument pos:start="4685:50" pos:end="4685:51"><expr pos:start="4685:50" pos:end="4685:51"><name pos:start="4685:50" pos:end="4685:51">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="4687:21" pos:end="4690:0">goto <name pos:start="4687:26" pos:end="4687:34">skip_move</name>;</goto>

<cpp:endif pos:start="4689:1" pos:end="4689:6">#<cpp:directive pos:start="4689:2" pos:end="4689:6">endif</cpp:directive></cpp:endif>

                <default pos:start="4691:17" pos:end="4691:24">default:</default>

                    <goto pos:start="4693:21" pos:end="4693:38">goto <name pos:start="4693:26" pos:end="4693:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

                <expr_stmt pos:start="4697:17" pos:end="4700:0"><expr pos:start="4697:17" pos:end="4697:46"><call pos:start="4697:17" pos:end="4697:46"><name pos:start="4697:17" pos:end="4697:29">gen_store_gpr</name><argument_list pos:start="4697:30" pos:end="4697:46">(<argument pos:start="4697:31" pos:end="4697:32"><expr pos:start="4697:31" pos:end="4697:32"><name pos:start="4697:31" pos:end="4697:32">dc</name></expr></argument>, <argument pos:start="4697:35" pos:end="4697:36"><expr pos:start="4697:35" pos:end="4697:36"><name pos:start="4697:35" pos:end="4697:36">rd</name></expr></argument>, <argument pos:start="4697:39" pos:end="4697:45"><expr pos:start="4697:39" pos:end="4697:45"><name pos:start="4697:39" pos:end="4697:45">cpu_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="4699:1" pos:end="4699:57">#<cpp:directive pos:start="4699:2" pos:end="4699:3">if</cpp:directive> <expr pos:start="4699:5" pos:end="4699:57"><operator pos:start="4699:5" pos:end="4699:5">!</operator><call pos:start="4699:6" pos:end="4699:30"><name pos:start="4699:6" pos:end="4699:12">defined</name><argument_list pos:start="4699:13" pos:end="4699:30">(<argument pos:start="4699:14" pos:end="4699:29"><expr pos:start="4699:14" pos:end="4699:29"><name pos:start="4699:14" pos:end="4699:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4699:32" pos:end="4699:33">||</operator> <call pos:start="4699:35" pos:end="4699:57"><name pos:start="4699:35" pos:end="4699:41">defined</name><argument_list pos:start="4699:42" pos:end="4699:57">(<argument pos:start="4699:43" pos:end="4699:56"><expr pos:start="4699:43" pos:end="4699:56"><name pos:start="4699:43" pos:end="4699:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <label pos:start="4701:13" pos:end="4701:22"><name pos:start="4701:13" pos:end="4701:21">skip_move</name>:</label> <empty_stmt pos:start="4701:24" pos:end="4704:0">;</empty_stmt>

<cpp:endif pos:start="4703:1" pos:end="4703:6">#<cpp:directive pos:start="4703:2" pos:end="4703:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <if type="elseif" pos:start="4705:15" pos:end="4811:13">else if <condition pos:start="4705:23" pos:end="4705:49">(<expr pos:start="4705:24" pos:end="4705:48"><name pos:start="4705:24" pos:end="4705:26">xop</name> <operator pos:start="4705:28" pos:end="4705:29">&gt;=</operator> <literal type="number" pos:start="4705:31" pos:end="4705:34">0x20</literal> <operator pos:start="4705:36" pos:end="4705:37">&amp;&amp;</operator> <name pos:start="4705:39" pos:end="4705:41">xop</name> <operator pos:start="4705:43" pos:end="4705:43">&lt;</operator> <literal type="number" pos:start="4705:45" pos:end="4705:48">0x24</literal></expr>)</condition> <block pos:start="4705:51" pos:end="4811:13">{<block_content pos:start="4707:17" pos:end="4809:17">

                <if_stmt pos:start="4707:17" pos:end="4711:17"><if pos:start="4707:17" pos:end="4711:17">if <condition pos:start="4707:20" pos:end="4707:41">(<expr pos:start="4707:21" pos:end="4707:40"><call pos:start="4707:21" pos:end="4707:40"><name pos:start="4707:21" pos:end="4707:36">gen_trap_ifnofpu</name><argument_list pos:start="4707:37" pos:end="4707:40">(<argument pos:start="4707:38" pos:end="4707:39"><expr pos:start="4707:38" pos:end="4707:39"><name pos:start="4707:38" pos:end="4707:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="4707:43" pos:end="4711:17">{<block_content pos:start="4709:21" pos:end="4709:34">

                    <goto pos:start="4709:21" pos:end="4709:34">goto <name pos:start="4709:26" pos:end="4709:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="4713:17" pos:end="4713:31"><expr pos:start="4713:17" pos:end="4713:30"><call pos:start="4713:17" pos:end="4713:30"><name pos:start="4713:17" pos:end="4713:26">save_state</name><argument_list pos:start="4713:27" pos:end="4713:30">(<argument pos:start="4713:28" pos:end="4713:29"><expr pos:start="4713:28" pos:end="4713:29"><name pos:start="4713:28" pos:end="4713:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="4715:17" pos:end="4809:17">switch <condition pos:start="4715:24" pos:end="4715:28">(<expr pos:start="4715:25" pos:end="4715:27"><name pos:start="4715:25" pos:end="4715:27">xop</name></expr>)</condition> <block pos:start="4715:30" pos:end="4809:17">{<block_content pos:start="4717:17" pos:end="4807:38">

                <case pos:start="4717:17" pos:end="4717:26">case <expr pos:start="4717:22" pos:end="4717:25"><literal type="number" pos:start="4717:22" pos:end="4717:25">0x20</literal></expr>:</case>      <comment type="block" pos:start="4717:33" pos:end="4717:53">/* ldf, load fpreg */</comment>

                    <expr_stmt pos:start="4719:21" pos:end="4719:51"><expr pos:start="4719:21" pos:end="4719:50"><call pos:start="4719:21" pos:end="4719:50"><name pos:start="4719:21" pos:end="4719:36">gen_address_mask</name><argument_list pos:start="4719:37" pos:end="4719:50">(<argument pos:start="4719:38" pos:end="4719:39"><expr pos:start="4719:38" pos:end="4719:39"><name pos:start="4719:38" pos:end="4719:39">dc</name></expr></argument>, <argument pos:start="4719:42" pos:end="4719:49"><expr pos:start="4719:42" pos:end="4719:49"><name pos:start="4719:42" pos:end="4719:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4721:21" pos:end="4721:72"><expr pos:start="4721:21" pos:end="4721:71"><call pos:start="4721:21" pos:end="4721:71"><name pos:start="4721:21" pos:end="4721:38">tcg_gen_qemu_ld32u</name><argument_list pos:start="4721:39" pos:end="4721:71">(<argument pos:start="4721:40" pos:end="4721:47"><expr pos:start="4721:40" pos:end="4721:47"><name pos:start="4721:40" pos:end="4721:47">cpu_tmp0</name></expr></argument>, <argument pos:start="4721:50" pos:end="4721:57"><expr pos:start="4721:50" pos:end="4721:57"><name pos:start="4721:50" pos:end="4721:57">cpu_addr</name></expr></argument>, <argument pos:start="4721:60" pos:end="4721:70"><expr pos:start="4721:60" pos:end="4721:70"><name pos:start="4721:60" pos:end="4721:70"><name pos:start="4721:60" pos:end="4721:61">dc</name><operator pos:start="4721:62" pos:end="4721:63">-&gt;</operator><name pos:start="4721:64" pos:end="4721:70">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4723:21" pos:end="4723:50"><expr pos:start="4723:21" pos:end="4723:49"><name pos:start="4723:21" pos:end="4723:30">cpu_dst_32</name> <operator pos:start="4723:32" pos:end="4723:32">=</operator> <call pos:start="4723:34" pos:end="4723:49"><name pos:start="4723:34" pos:end="4723:47">gen_dest_fpr_F</name><argument_list pos:start="4723:48" pos:end="4723:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4725:21" pos:end="4725:63"><expr pos:start="4725:21" pos:end="4725:62"><call pos:start="4725:21" pos:end="4725:62"><name pos:start="4725:21" pos:end="4725:40">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4725:41" pos:end="4725:62">(<argument pos:start="4725:42" pos:end="4725:51"><expr pos:start="4725:42" pos:end="4725:51"><name pos:start="4725:42" pos:end="4725:51">cpu_dst_32</name></expr></argument>, <argument pos:start="4725:54" pos:end="4725:61"><expr pos:start="4725:54" pos:end="4725:61"><name pos:start="4725:54" pos:end="4725:61">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4727:21" pos:end="4727:56"><expr pos:start="4727:21" pos:end="4727:55"><call pos:start="4727:21" pos:end="4727:55"><name pos:start="4727:21" pos:end="4727:35">gen_store_fpr_F</name><argument_list pos:start="4727:36" pos:end="4727:55">(<argument pos:start="4727:37" pos:end="4727:38"><expr pos:start="4727:37" pos:end="4727:38"><name pos:start="4727:37" pos:end="4727:38">dc</name></expr></argument>, <argument pos:start="4727:41" pos:end="4727:42"><expr pos:start="4727:41" pos:end="4727:42"><name pos:start="4727:41" pos:end="4727:42">rd</name></expr></argument>, <argument pos:start="4727:45" pos:end="4727:54"><expr pos:start="4727:45" pos:end="4727:54"><name pos:start="4727:45" pos:end="4727:54">cpu_dst_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4729:21" pos:end="4729:26">break;</break>

                <case pos:start="4731:17" pos:end="4734:0">case <expr pos:start="4731:22" pos:end="4731:25"><literal type="number" pos:start="4731:22" pos:end="4731:25">0x21</literal></expr>:</case>      <comment type="block" pos:start="4731:33" pos:end="4731:54">/* ldfsr, V9 ldxfsr */</comment>

<cpp:ifdef pos:start="4733:1" pos:end="4733:21">#<cpp:directive pos:start="4733:2" pos:end="4733:6">ifdef</cpp:directive> <name pos:start="4733:8" pos:end="4733:21">TARGET_SPARC64</name></cpp:ifdef>

                    <expr_stmt pos:start="4735:21" pos:end="4735:51"><expr pos:start="4735:21" pos:end="4735:50"><call pos:start="4735:21" pos:end="4735:50"><name pos:start="4735:21" pos:end="4735:36">gen_address_mask</name><argument_list pos:start="4735:37" pos:end="4735:50">(<argument pos:start="4735:38" pos:end="4735:39"><expr pos:start="4735:38" pos:end="4735:39"><name pos:start="4735:38" pos:end="4735:39">dc</name></expr></argument>, <argument pos:start="4735:42" pos:end="4735:49"><expr pos:start="4735:42" pos:end="4735:49"><name pos:start="4735:42" pos:end="4735:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="4737:21" pos:end="4754:0"><if pos:start="4737:21" pos:end="4743:21">if <condition pos:start="4737:24" pos:end="4737:32">(<expr pos:start="4737:25" pos:end="4737:31"><name pos:start="4737:25" pos:end="4737:26">rd</name> <operator pos:start="4737:28" pos:end="4737:29">==</operator> <literal type="number" pos:start="4737:31" pos:end="4737:31">1</literal></expr>)</condition> <block pos:start="4737:34" pos:end="4743:21">{<block_content pos:start="4739:25" pos:end="4741:62">

                        <expr_stmt pos:start="4739:25" pos:end="4739:76"><expr pos:start="4739:25" pos:end="4739:75"><call pos:start="4739:25" pos:end="4739:75"><name pos:start="4739:25" pos:end="4739:41">tcg_gen_qemu_ld64</name><argument_list pos:start="4739:42" pos:end="4739:75">(<argument pos:start="4739:43" pos:end="4739:51"><expr pos:start="4739:43" pos:end="4739:51"><name pos:start="4739:43" pos:end="4739:51">cpu_tmp64</name></expr></argument>, <argument pos:start="4739:54" pos:end="4739:61"><expr pos:start="4739:54" pos:end="4739:61"><name pos:start="4739:54" pos:end="4739:61">cpu_addr</name></expr></argument>, <argument pos:start="4739:64" pos:end="4739:74"><expr pos:start="4739:64" pos:end="4739:74"><name pos:start="4739:64" pos:end="4739:74"><name pos:start="4739:64" pos:end="4739:65">dc</name><operator pos:start="4739:66" pos:end="4739:67">-&gt;</operator><name pos:start="4739:68" pos:end="4739:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4741:25" pos:end="4741:62"><expr pos:start="4741:25" pos:end="4741:61"><call pos:start="4741:25" pos:end="4741:61"><name pos:start="4741:25" pos:end="4741:41">gen_helper_ldxfsr</name><argument_list pos:start="4741:42" pos:end="4741:61">(<argument pos:start="4741:43" pos:end="4741:49"><expr pos:start="4741:43" pos:end="4741:49"><name pos:start="4741:43" pos:end="4741:49">cpu_env</name></expr></argument>, <argument pos:start="4741:52" pos:end="4741:60"><expr pos:start="4741:52" pos:end="4741:60"><name pos:start="4741:52" pos:end="4741:60">cpu_tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="4743:23" pos:end="4754:0">else <block pos:start="4743:28" pos:end="4754:0">{<block_content pos:start="4745:25" pos:end="4749:61">

                        <expr_stmt pos:start="4745:25" pos:end="4745:76"><expr pos:start="4745:25" pos:end="4745:75"><call pos:start="4745:25" pos:end="4745:75"><name pos:start="4745:25" pos:end="4745:42">tcg_gen_qemu_ld32u</name><argument_list pos:start="4745:43" pos:end="4745:75">(<argument pos:start="4745:44" pos:end="4745:51"><expr pos:start="4745:44" pos:end="4745:51"><name pos:start="4745:44" pos:end="4745:51">cpu_tmp0</name></expr></argument>, <argument pos:start="4745:54" pos:end="4745:61"><expr pos:start="4745:54" pos:end="4745:61"><name pos:start="4745:54" pos:end="4745:61">cpu_addr</name></expr></argument>, <argument pos:start="4745:64" pos:end="4745:74"><expr pos:start="4745:64" pos:end="4745:74"><name pos:start="4745:64" pos:end="4745:74"><name pos:start="4745:64" pos:end="4745:65">dc</name><operator pos:start="4745:66" pos:end="4745:67">-&gt;</operator><name pos:start="4745:68" pos:end="4745:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4747:25" pos:end="4747:66"><expr pos:start="4747:25" pos:end="4747:65"><call pos:start="4747:25" pos:end="4747:65"><name pos:start="4747:25" pos:end="4747:44">tcg_gen_trunc_tl_i32</name><argument_list pos:start="4747:45" pos:end="4747:65">(<argument pos:start="4747:46" pos:end="4747:54"><expr pos:start="4747:46" pos:end="4747:54"><name pos:start="4747:46" pos:end="4747:54">cpu_tmp32</name></expr></argument>, <argument pos:start="4747:57" pos:end="4747:64"><expr pos:start="4747:57" pos:end="4747:64"><name pos:start="4747:57" pos:end="4747:64">cpu_tmp0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4749:25" pos:end="4749:61"><expr pos:start="4749:25" pos:end="4749:60"><call pos:start="4749:25" pos:end="4749:60"><name pos:start="4749:25" pos:end="4749:40">gen_helper_ldfsr</name><argument_list pos:start="4749:41" pos:end="4749:60">(<argument pos:start="4749:42" pos:end="4749:48"><expr pos:start="4749:42" pos:end="4749:48"><name pos:start="4749:42" pos:end="4749:48">cpu_env</name></expr></argument>, <argument pos:start="4749:51" pos:end="4749:59"><expr pos:start="4749:51" pos:end="4749:59"><name pos:start="4749:51" pos:end="4749:59">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="4753:1" pos:end="4753:5">#<cpp:directive pos:start="4753:2" pos:end="4753:5">else</cpp:directive></cpp:else>

                    <block pos:start="4755:21" pos:end="4764:0">{<block_content pos:start="4757:25" pos:end="4759:61">

                        <expr_stmt pos:start="4757:25" pos:end="4757:77"><expr pos:start="4757:25" pos:end="4757:76"><call pos:start="4757:25" pos:end="4757:76"><name pos:start="4757:25" pos:end="4757:42">tcg_gen_qemu_ld32u</name><argument_list pos:start="4757:43" pos:end="4757:76">(<argument pos:start="4757:44" pos:end="4757:52"><expr pos:start="4757:44" pos:end="4757:52"><name pos:start="4757:44" pos:end="4757:52">cpu_tmp32</name></expr></argument>, <argument pos:start="4757:55" pos:end="4757:62"><expr pos:start="4757:55" pos:end="4757:62"><name pos:start="4757:55" pos:end="4757:62">cpu_addr</name></expr></argument>, <argument pos:start="4757:65" pos:end="4757:75"><expr pos:start="4757:65" pos:end="4757:75"><name pos:start="4757:65" pos:end="4757:75"><name pos:start="4757:65" pos:end="4757:66">dc</name><operator pos:start="4757:67" pos:end="4757:68">-&gt;</operator><name pos:start="4757:69" pos:end="4757:75">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4759:25" pos:end="4759:61"><expr pos:start="4759:25" pos:end="4759:60"><call pos:start="4759:25" pos:end="4759:60"><name pos:start="4759:25" pos:end="4759:40">gen_helper_ldfsr</name><argument_list pos:start="4759:41" pos:end="4759:60">(<argument pos:start="4759:42" pos:end="4759:48"><expr pos:start="4759:42" pos:end="4759:48"><name pos:start="4759:42" pos:end="4759:48">cpu_env</name></expr></argument>, <argument pos:start="4759:51" pos:end="4759:59"><expr pos:start="4759:51" pos:end="4759:59"><name pos:start="4759:51" pos:end="4759:59">cpu_tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

<cpp:endif pos:start="4763:1" pos:end="4763:6">#<cpp:directive pos:start="4763:2" pos:end="4763:6">endif</cpp:directive></cpp:endif>

                    <break pos:start="4765:21" pos:end="4765:26">break;</break>

                <case pos:start="4767:17" pos:end="4767:26">case <expr pos:start="4767:22" pos:end="4767:25"><literal type="number" pos:start="4767:22" pos:end="4767:25">0x22</literal></expr>:</case>      <comment type="block" pos:start="4767:33" pos:end="4767:59">/* ldqf, load quad fpreg */</comment>

                    <block pos:start="4769:21" pos:end="4789:21">{<block_content pos:start="4771:25" pos:end="4787:58">

                        <decl_stmt pos:start="4771:25" pos:end="4771:41"><decl pos:start="4771:25" pos:end="4771:40"><type pos:start="4771:25" pos:end="4771:32"><name pos:start="4771:25" pos:end="4771:32">TCGv_i32</name></type> <name pos:start="4771:34" pos:end="4771:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4775:25" pos:end="4775:56"><expr pos:start="4775:25" pos:end="4775:55"><call pos:start="4775:25" pos:end="4775:55"><name pos:start="4775:25" pos:end="4775:41">CHECK_FPU_FEATURE</name><argument_list pos:start="4775:42" pos:end="4775:55">(<argument pos:start="4775:43" pos:end="4775:44"><expr pos:start="4775:43" pos:end="4775:44"><name pos:start="4775:43" pos:end="4775:44">dc</name></expr></argument>, <argument pos:start="4775:47" pos:end="4775:54"><expr pos:start="4775:47" pos:end="4775:54"><name pos:start="4775:47" pos:end="4775:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4777:25" pos:end="4777:61"><expr pos:start="4777:25" pos:end="4777:60"><name pos:start="4777:25" pos:end="4777:31">r_const</name> <operator pos:start="4777:33" pos:end="4777:33">=</operator> <call pos:start="4777:35" pos:end="4777:60"><name pos:start="4777:35" pos:end="4777:47">tcg_const_i32</name><argument_list pos:start="4777:48" pos:end="4777:60">(<argument pos:start="4777:49" pos:end="4777:59"><expr pos:start="4777:49" pos:end="4777:59"><name pos:start="4777:49" pos:end="4777:59"><name pos:start="4777:49" pos:end="4777:50">dc</name><operator pos:start="4777:51" pos:end="4777:52">-&gt;</operator><name pos:start="4777:53" pos:end="4777:59">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4779:25" pos:end="4779:55"><expr pos:start="4779:25" pos:end="4779:54"><call pos:start="4779:25" pos:end="4779:54"><name pos:start="4779:25" pos:end="4779:40">gen_address_mask</name><argument_list pos:start="4779:41" pos:end="4779:54">(<argument pos:start="4779:42" pos:end="4779:43"><expr pos:start="4779:42" pos:end="4779:43"><name pos:start="4779:42" pos:end="4779:43">dc</name></expr></argument>, <argument pos:start="4779:46" pos:end="4779:53"><expr pos:start="4779:46" pos:end="4779:53"><name pos:start="4779:46" pos:end="4779:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4781:25" pos:end="4781:68"><expr pos:start="4781:25" pos:end="4781:67"><call pos:start="4781:25" pos:end="4781:67"><name pos:start="4781:25" pos:end="4781:39">gen_helper_ldqf</name><argument_list pos:start="4781:40" pos:end="4781:67">(<argument pos:start="4781:41" pos:end="4781:47"><expr pos:start="4781:41" pos:end="4781:47"><name pos:start="4781:41" pos:end="4781:47">cpu_env</name></expr></argument>, <argument pos:start="4781:50" pos:end="4781:57"><expr pos:start="4781:50" pos:end="4781:57"><name pos:start="4781:50" pos:end="4781:57">cpu_addr</name></expr></argument>, <argument pos:start="4781:60" pos:end="4781:66"><expr pos:start="4781:60" pos:end="4781:66"><name pos:start="4781:60" pos:end="4781:66">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4783:25" pos:end="4783:51"><expr pos:start="4783:25" pos:end="4783:50"><call pos:start="4783:25" pos:end="4783:50"><name pos:start="4783:25" pos:end="4783:41">tcg_temp_free_i32</name><argument_list pos:start="4783:42" pos:end="4783:50">(<argument pos:start="4783:43" pos:end="4783:49"><expr pos:start="4783:43" pos:end="4783:49"><name pos:start="4783:43" pos:end="4783:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4785:25" pos:end="4785:57"><expr pos:start="4785:25" pos:end="4785:56"><call pos:start="4785:25" pos:end="4785:56"><name pos:start="4785:25" pos:end="4785:44">gen_op_store_QT0_fpr</name><argument_list pos:start="4785:45" pos:end="4785:56">(<argument pos:start="4785:46" pos:end="4785:55"><expr pos:start="4785:46" pos:end="4785:55"><call pos:start="4785:46" pos:end="4785:55"><name pos:start="4785:46" pos:end="4785:51">QFPREG</name><argument_list pos:start="4785:52" pos:end="4785:55">(<argument pos:start="4785:53" pos:end="4785:54"><expr pos:start="4785:53" pos:end="4785:54"><name pos:start="4785:53" pos:end="4785:54">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4787:25" pos:end="4787:58"><expr pos:start="4787:25" pos:end="4787:57"><call pos:start="4787:25" pos:end="4787:57"><name pos:start="4787:25" pos:end="4787:45">gen_update_fprs_dirty</name><argument_list pos:start="4787:46" pos:end="4787:57">(<argument pos:start="4787:47" pos:end="4787:56"><expr pos:start="4787:47" pos:end="4787:56"><call pos:start="4787:47" pos:end="4787:56"><name pos:start="4787:47" pos:end="4787:52">QFPREG</name><argument_list pos:start="4787:53" pos:end="4787:56">(<argument pos:start="4787:54" pos:end="4787:55"><expr pos:start="4787:54" pos:end="4787:55"><name pos:start="4787:54" pos:end="4787:55">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="4791:21" pos:end="4791:26">break;</break>

                <case pos:start="4793:17" pos:end="4793:26">case <expr pos:start="4793:22" pos:end="4793:25"><literal type="number" pos:start="4793:22" pos:end="4793:25">0x23</literal></expr>:</case>      <comment type="block" pos:start="4793:33" pos:end="4793:61">/* lddf, load double fpreg */</comment>

                    <expr_stmt pos:start="4795:21" pos:end="4795:51"><expr pos:start="4795:21" pos:end="4795:50"><call pos:start="4795:21" pos:end="4795:50"><name pos:start="4795:21" pos:end="4795:36">gen_address_mask</name><argument_list pos:start="4795:37" pos:end="4795:50">(<argument pos:start="4795:38" pos:end="4795:39"><expr pos:start="4795:38" pos:end="4795:39"><name pos:start="4795:38" pos:end="4795:39">dc</name></expr></argument>, <argument pos:start="4795:42" pos:end="4795:49"><expr pos:start="4795:42" pos:end="4795:49"><name pos:start="4795:42" pos:end="4795:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4797:21" pos:end="4797:50"><expr pos:start="4797:21" pos:end="4797:49"><name pos:start="4797:21" pos:end="4797:30">cpu_dst_64</name> <operator pos:start="4797:32" pos:end="4797:32">=</operator> <call pos:start="4797:34" pos:end="4797:49"><name pos:start="4797:34" pos:end="4797:47">gen_dest_fpr_D</name><argument_list pos:start="4797:48" pos:end="4797:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4799:21" pos:end="4799:73"><expr pos:start="4799:21" pos:end="4799:72"><call pos:start="4799:21" pos:end="4799:72"><name pos:start="4799:21" pos:end="4799:37">tcg_gen_qemu_ld64</name><argument_list pos:start="4799:38" pos:end="4799:72">(<argument pos:start="4799:39" pos:end="4799:48"><expr pos:start="4799:39" pos:end="4799:48"><name pos:start="4799:39" pos:end="4799:48">cpu_dst_64</name></expr></argument>, <argument pos:start="4799:51" pos:end="4799:58"><expr pos:start="4799:51" pos:end="4799:58"><name pos:start="4799:51" pos:end="4799:58">cpu_addr</name></expr></argument>, <argument pos:start="4799:61" pos:end="4799:71"><expr pos:start="4799:61" pos:end="4799:71"><name pos:start="4799:61" pos:end="4799:71"><name pos:start="4799:61" pos:end="4799:62">dc</name><operator pos:start="4799:63" pos:end="4799:64">-&gt;</operator><name pos:start="4799:65" pos:end="4799:71">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4801:21" pos:end="4801:56"><expr pos:start="4801:21" pos:end="4801:55"><call pos:start="4801:21" pos:end="4801:55"><name pos:start="4801:21" pos:end="4801:35">gen_store_fpr_D</name><argument_list pos:start="4801:36" pos:end="4801:55">(<argument pos:start="4801:37" pos:end="4801:38"><expr pos:start="4801:37" pos:end="4801:38"><name pos:start="4801:37" pos:end="4801:38">dc</name></expr></argument>, <argument pos:start="4801:41" pos:end="4801:42"><expr pos:start="4801:41" pos:end="4801:42"><name pos:start="4801:41" pos:end="4801:42">rd</name></expr></argument>, <argument pos:start="4801:45" pos:end="4801:54"><expr pos:start="4801:45" pos:end="4801:54"><name pos:start="4801:45" pos:end="4801:54">cpu_dst_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4803:21" pos:end="4803:26">break;</break>

                <default pos:start="4805:17" pos:end="4805:24">default:</default>

                    <goto pos:start="4807:21" pos:end="4807:38">goto <name pos:start="4807:26" pos:end="4807:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="4811:15" pos:end="5007:13">else if <condition pos:start="4811:23" pos:end="4813:49">(<expr pos:start="4811:24" pos:end="4813:48"><name pos:start="4811:24" pos:end="4811:26">xop</name> <operator pos:start="4811:28" pos:end="4811:28">&lt;</operator> <literal type="number" pos:start="4811:30" pos:end="4811:30">8</literal> <operator pos:start="4811:32" pos:end="4811:33">||</operator> <operator pos:start="4811:35" pos:end="4811:35">(</operator><name pos:start="4811:36" pos:end="4811:38">xop</name> <operator pos:start="4811:40" pos:end="4811:41">&gt;=</operator> <literal type="number" pos:start="4811:43" pos:end="4811:46">0x14</literal> <operator pos:start="4811:48" pos:end="4811:49">&amp;&amp;</operator> <name pos:start="4811:51" pos:end="4811:53">xop</name> <operator pos:start="4811:55" pos:end="4811:55">&lt;</operator> <literal type="number" pos:start="4811:57" pos:end="4811:60">0x18</literal><operator pos:start="4811:61" pos:end="4811:61">)</operator> <operator pos:start="4811:63" pos:end="4811:64">||</operator>

                       <name pos:start="4813:24" pos:end="4813:26">xop</name> <operator pos:start="4813:28" pos:end="4813:29">==</operator> <literal type="number" pos:start="4813:31" pos:end="4813:33">0xe</literal> <operator pos:start="4813:35" pos:end="4813:36">||</operator> <name pos:start="4813:38" pos:end="4813:40">xop</name> <operator pos:start="4813:42" pos:end="4813:43">==</operator> <literal type="number" pos:start="4813:45" pos:end="4813:48">0x1e</literal></expr>)</condition> <block pos:start="4813:51" pos:end="5007:13">{<block_content pos:start="4815:17" pos:end="5005:17">

                <decl_stmt pos:start="4815:17" pos:end="4815:52"><decl pos:start="4815:17" pos:end="4815:51"><type pos:start="4815:17" pos:end="4815:20"><name pos:start="4815:17" pos:end="4815:20">TCGv</name></type> <name pos:start="4815:22" pos:end="4815:28">cpu_val</name> <init pos:start="4815:30" pos:end="4815:51">= <expr pos:start="4815:32" pos:end="4815:51"><call pos:start="4815:32" pos:end="4815:51"><name pos:start="4815:32" pos:end="4815:43">gen_load_gpr</name><argument_list pos:start="4815:44" pos:end="4815:51">(<argument pos:start="4815:45" pos:end="4815:46"><expr pos:start="4815:45" pos:end="4815:46"><name pos:start="4815:45" pos:end="4815:46">dc</name></expr></argument>, <argument pos:start="4815:49" pos:end="4815:50"><expr pos:start="4815:49" pos:end="4815:50"><name pos:start="4815:49" pos:end="4815:50">rd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <switch pos:start="4819:17" pos:end="5005:17">switch <condition pos:start="4819:24" pos:end="4819:28">(<expr pos:start="4819:25" pos:end="4819:27"><name pos:start="4819:25" pos:end="4819:27">xop</name></expr>)</condition> <block pos:start="4819:30" pos:end="5005:17">{<block_content pos:start="4821:17" pos:end="5003:38">

                <case pos:start="4821:17" pos:end="4821:25">case <expr pos:start="4821:22" pos:end="4821:24"><literal type="number" pos:start="4821:22" pos:end="4821:24">0x4</literal></expr>:</case> <comment type="block" pos:start="4821:27" pos:end="4821:46">/* st, store word */</comment>

                    <expr_stmt pos:start="4823:21" pos:end="4823:51"><expr pos:start="4823:21" pos:end="4823:50"><call pos:start="4823:21" pos:end="4823:50"><name pos:start="4823:21" pos:end="4823:36">gen_address_mask</name><argument_list pos:start="4823:37" pos:end="4823:50">(<argument pos:start="4823:38" pos:end="4823:39"><expr pos:start="4823:38" pos:end="4823:39"><name pos:start="4823:38" pos:end="4823:39">dc</name></expr></argument>, <argument pos:start="4823:42" pos:end="4823:49"><expr pos:start="4823:42" pos:end="4823:49"><name pos:start="4823:42" pos:end="4823:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4825:21" pos:end="4825:70"><expr pos:start="4825:21" pos:end="4825:69"><call pos:start="4825:21" pos:end="4825:69"><name pos:start="4825:21" pos:end="4825:37">tcg_gen_qemu_st32</name><argument_list pos:start="4825:38" pos:end="4825:69">(<argument pos:start="4825:39" pos:end="4825:45"><expr pos:start="4825:39" pos:end="4825:45"><name pos:start="4825:39" pos:end="4825:45">cpu_val</name></expr></argument>, <argument pos:start="4825:48" pos:end="4825:55"><expr pos:start="4825:48" pos:end="4825:55"><name pos:start="4825:48" pos:end="4825:55">cpu_addr</name></expr></argument>, <argument pos:start="4825:58" pos:end="4825:68"><expr pos:start="4825:58" pos:end="4825:68"><name pos:start="4825:58" pos:end="4825:68"><name pos:start="4825:58" pos:end="4825:59">dc</name><operator pos:start="4825:60" pos:end="4825:61">-&gt;</operator><name pos:start="4825:62" pos:end="4825:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4827:21" pos:end="4827:26">break;</break>

                <case pos:start="4829:17" pos:end="4829:25">case <expr pos:start="4829:22" pos:end="4829:24"><literal type="number" pos:start="4829:22" pos:end="4829:24">0x5</literal></expr>:</case> <comment type="block" pos:start="4829:27" pos:end="4829:47">/* stb, store byte */</comment>

                    <expr_stmt pos:start="4831:21" pos:end="4831:51"><expr pos:start="4831:21" pos:end="4831:50"><call pos:start="4831:21" pos:end="4831:50"><name pos:start="4831:21" pos:end="4831:36">gen_address_mask</name><argument_list pos:start="4831:37" pos:end="4831:50">(<argument pos:start="4831:38" pos:end="4831:39"><expr pos:start="4831:38" pos:end="4831:39"><name pos:start="4831:38" pos:end="4831:39">dc</name></expr></argument>, <argument pos:start="4831:42" pos:end="4831:49"><expr pos:start="4831:42" pos:end="4831:49"><name pos:start="4831:42" pos:end="4831:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4833:21" pos:end="4833:69"><expr pos:start="4833:21" pos:end="4833:68"><call pos:start="4833:21" pos:end="4833:68"><name pos:start="4833:21" pos:end="4833:36">tcg_gen_qemu_st8</name><argument_list pos:start="4833:37" pos:end="4833:68">(<argument pos:start="4833:38" pos:end="4833:44"><expr pos:start="4833:38" pos:end="4833:44"><name pos:start="4833:38" pos:end="4833:44">cpu_val</name></expr></argument>, <argument pos:start="4833:47" pos:end="4833:54"><expr pos:start="4833:47" pos:end="4833:54"><name pos:start="4833:47" pos:end="4833:54">cpu_addr</name></expr></argument>, <argument pos:start="4833:57" pos:end="4833:67"><expr pos:start="4833:57" pos:end="4833:67"><name pos:start="4833:57" pos:end="4833:67"><name pos:start="4833:57" pos:end="4833:58">dc</name><operator pos:start="4833:59" pos:end="4833:60">-&gt;</operator><name pos:start="4833:61" pos:end="4833:67">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4835:21" pos:end="4835:26">break;</break>

                <case pos:start="4837:17" pos:end="4837:25">case <expr pos:start="4837:22" pos:end="4837:24"><literal type="number" pos:start="4837:22" pos:end="4837:24">0x6</literal></expr>:</case> <comment type="block" pos:start="4837:27" pos:end="4837:51">/* sth, store halfword */</comment>

                    <expr_stmt pos:start="4839:21" pos:end="4839:51"><expr pos:start="4839:21" pos:end="4839:50"><call pos:start="4839:21" pos:end="4839:50"><name pos:start="4839:21" pos:end="4839:36">gen_address_mask</name><argument_list pos:start="4839:37" pos:end="4839:50">(<argument pos:start="4839:38" pos:end="4839:39"><expr pos:start="4839:38" pos:end="4839:39"><name pos:start="4839:38" pos:end="4839:39">dc</name></expr></argument>, <argument pos:start="4839:42" pos:end="4839:49"><expr pos:start="4839:42" pos:end="4839:49"><name pos:start="4839:42" pos:end="4839:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4841:21" pos:end="4841:70"><expr pos:start="4841:21" pos:end="4841:69"><call pos:start="4841:21" pos:end="4841:69"><name pos:start="4841:21" pos:end="4841:37">tcg_gen_qemu_st16</name><argument_list pos:start="4841:38" pos:end="4841:69">(<argument pos:start="4841:39" pos:end="4841:45"><expr pos:start="4841:39" pos:end="4841:45"><name pos:start="4841:39" pos:end="4841:45">cpu_val</name></expr></argument>, <argument pos:start="4841:48" pos:end="4841:55"><expr pos:start="4841:48" pos:end="4841:55"><name pos:start="4841:48" pos:end="4841:55">cpu_addr</name></expr></argument>, <argument pos:start="4841:58" pos:end="4841:68"><expr pos:start="4841:58" pos:end="4841:68"><name pos:start="4841:58" pos:end="4841:68"><name pos:start="4841:58" pos:end="4841:59">dc</name><operator pos:start="4841:60" pos:end="4841:61">-&gt;</operator><name pos:start="4841:62" pos:end="4841:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4843:21" pos:end="4843:26">break;</break>

                <case pos:start="4845:17" pos:end="4845:25">case <expr pos:start="4845:22" pos:end="4845:24"><literal type="number" pos:start="4845:22" pos:end="4845:24">0x7</literal></expr>:</case> <comment type="block" pos:start="4845:27" pos:end="4845:54">/* std, store double word */</comment>

                    <if_stmt pos:start="4847:21" pos:end="4877:21"><if pos:start="4847:21" pos:end="4849:42">if <condition pos:start="4847:24" pos:end="4847:31">(<expr pos:start="4847:25" pos:end="4847:30"><name pos:start="4847:25" pos:end="4847:26">rd</name> <operator pos:start="4847:28" pos:end="4847:28">&amp;</operator> <literal type="number" pos:start="4847:30" pos:end="4847:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4849:25" pos:end="4849:42"><block_content pos:start="4849:25" pos:end="4849:42">

                        <goto pos:start="4849:25" pos:end="4849:42">goto <name pos:start="4849:30" pos:end="4849:41">illegal_insn</name>;</goto></block_content></block></if>

                    <else pos:start="4851:21" pos:end="4877:21">else <block pos:start="4851:26" pos:end="4877:21">{<block_content pos:start="4853:25" pos:end="4875:76">

                        <decl_stmt pos:start="4853:25" pos:end="4853:41"><decl pos:start="4853:25" pos:end="4853:40"><type pos:start="4853:25" pos:end="4853:32"><name pos:start="4853:25" pos:end="4853:32">TCGv_i32</name></type> <name pos:start="4853:34" pos:end="4853:40">r_const</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="4855:25" pos:end="4855:32"><decl pos:start="4855:25" pos:end="4855:31"><type pos:start="4855:25" pos:end="4855:28"><name pos:start="4855:25" pos:end="4855:28">TCGv</name></type> <name pos:start="4855:30" pos:end="4855:31">lo</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="4859:25" pos:end="4859:39"><expr pos:start="4859:25" pos:end="4859:38"><call pos:start="4859:25" pos:end="4859:38"><name pos:start="4859:25" pos:end="4859:34">save_state</name><argument_list pos:start="4859:35" pos:end="4859:38">(<argument pos:start="4859:36" pos:end="4859:37"><expr pos:start="4859:36" pos:end="4859:37"><name pos:start="4859:36" pos:end="4859:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4861:25" pos:end="4861:55"><expr pos:start="4861:25" pos:end="4861:54"><call pos:start="4861:25" pos:end="4861:54"><name pos:start="4861:25" pos:end="4861:40">gen_address_mask</name><argument_list pos:start="4861:41" pos:end="4861:54">(<argument pos:start="4861:42" pos:end="4861:43"><expr pos:start="4861:42" pos:end="4861:43"><name pos:start="4861:42" pos:end="4861:43">dc</name></expr></argument>, <argument pos:start="4861:46" pos:end="4861:53"><expr pos:start="4861:46" pos:end="4861:53"><name pos:start="4861:46" pos:end="4861:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4863:25" pos:end="4863:51"><expr pos:start="4863:25" pos:end="4863:50"><name pos:start="4863:25" pos:end="4863:31">r_const</name> <operator pos:start="4863:33" pos:end="4863:33">=</operator> <call pos:start="4863:35" pos:end="4863:50"><name pos:start="4863:35" pos:end="4863:47">tcg_const_i32</name><argument_list pos:start="4863:48" pos:end="4863:50">(<argument pos:start="4863:49" pos:end="4863:49"><expr pos:start="4863:49" pos:end="4863:49"><literal type="number" pos:start="4863:49" pos:end="4863:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="4865:25" pos:end="4865:56">/* XXX remove alignment check */</comment>

                        <expr_stmt pos:start="4867:25" pos:end="4867:75"><expr pos:start="4867:25" pos:end="4867:74"><call pos:start="4867:25" pos:end="4867:74"><name pos:start="4867:25" pos:end="4867:46">gen_helper_check_align</name><argument_list pos:start="4867:47" pos:end="4867:74">(<argument pos:start="4867:48" pos:end="4867:54"><expr pos:start="4867:48" pos:end="4867:54"><name pos:start="4867:48" pos:end="4867:54">cpu_env</name></expr></argument>, <argument pos:start="4867:57" pos:end="4867:64"><expr pos:start="4867:57" pos:end="4867:64"><name pos:start="4867:57" pos:end="4867:64">cpu_addr</name></expr></argument>, <argument pos:start="4867:67" pos:end="4867:73"><expr pos:start="4867:67" pos:end="4867:73"><name pos:start="4867:67" pos:end="4867:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4869:25" pos:end="4869:51"><expr pos:start="4869:25" pos:end="4869:50"><call pos:start="4869:25" pos:end="4869:50"><name pos:start="4869:25" pos:end="4869:41">tcg_temp_free_i32</name><argument_list pos:start="4869:42" pos:end="4869:50">(<argument pos:start="4869:43" pos:end="4869:49"><expr pos:start="4869:43" pos:end="4869:49"><name pos:start="4869:43" pos:end="4869:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4871:25" pos:end="4871:54"><expr pos:start="4871:25" pos:end="4871:53"><name pos:start="4871:25" pos:end="4871:26">lo</name> <operator pos:start="4871:28" pos:end="4871:28">=</operator> <call pos:start="4871:30" pos:end="4871:53"><name pos:start="4871:30" pos:end="4871:41">gen_load_gpr</name><argument_list pos:start="4871:42" pos:end="4871:53">(<argument pos:start="4871:43" pos:end="4871:44"><expr pos:start="4871:43" pos:end="4871:44"><name pos:start="4871:43" pos:end="4871:44">dc</name></expr></argument>, <argument pos:start="4871:47" pos:end="4871:52"><expr pos:start="4871:47" pos:end="4871:52"><name pos:start="4871:47" pos:end="4871:48">rd</name> <operator pos:start="4871:50" pos:end="4871:50">+</operator> <literal type="number" pos:start="4871:52" pos:end="4871:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4873:25" pos:end="4873:70"><expr pos:start="4873:25" pos:end="4873:69"><call pos:start="4873:25" pos:end="4873:69"><name pos:start="4873:25" pos:end="4873:45">tcg_gen_concat_tl_i64</name><argument_list pos:start="4873:46" pos:end="4873:69">(<argument pos:start="4873:47" pos:end="4873:55"><expr pos:start="4873:47" pos:end="4873:55"><name pos:start="4873:47" pos:end="4873:55">cpu_tmp64</name></expr></argument>, <argument pos:start="4873:58" pos:end="4873:59"><expr pos:start="4873:58" pos:end="4873:59"><name pos:start="4873:58" pos:end="4873:59">lo</name></expr></argument>, <argument pos:start="4873:62" pos:end="4873:68"><expr pos:start="4873:62" pos:end="4873:68"><name pos:start="4873:62" pos:end="4873:68">cpu_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4875:25" pos:end="4875:76"><expr pos:start="4875:25" pos:end="4875:75"><call pos:start="4875:25" pos:end="4875:75"><name pos:start="4875:25" pos:end="4875:41">tcg_gen_qemu_st64</name><argument_list pos:start="4875:42" pos:end="4875:75">(<argument pos:start="4875:43" pos:end="4875:51"><expr pos:start="4875:43" pos:end="4875:51"><name pos:start="4875:43" pos:end="4875:51">cpu_tmp64</name></expr></argument>, <argument pos:start="4875:54" pos:end="4875:61"><expr pos:start="4875:54" pos:end="4875:61"><name pos:start="4875:54" pos:end="4875:61">cpu_addr</name></expr></argument>, <argument pos:start="4875:64" pos:end="4875:74"><expr pos:start="4875:64" pos:end="4875:74"><name pos:start="4875:64" pos:end="4875:74"><name pos:start="4875:64" pos:end="4875:65">dc</name><operator pos:start="4875:66" pos:end="4875:67">-&gt;</operator><name pos:start="4875:68" pos:end="4875:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="4879:21" pos:end="4882:0">break;</break>

<cpp:if pos:start="4881:1" pos:end="4881:57">#<cpp:directive pos:start="4881:2" pos:end="4881:3">if</cpp:directive> <expr pos:start="4881:5" pos:end="4881:57"><operator pos:start="4881:5" pos:end="4881:5">!</operator><call pos:start="4881:6" pos:end="4881:30"><name pos:start="4881:6" pos:end="4881:12">defined</name><argument_list pos:start="4881:13" pos:end="4881:30">(<argument pos:start="4881:14" pos:end="4881:29"><expr pos:start="4881:14" pos:end="4881:29"><name pos:start="4881:14" pos:end="4881:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="4881:32" pos:end="4881:33">||</operator> <call pos:start="4881:35" pos:end="4881:57"><name pos:start="4881:35" pos:end="4881:41">defined</name><argument_list pos:start="4881:42" pos:end="4881:57">(<argument pos:start="4881:43" pos:end="4881:56"><expr pos:start="4881:43" pos:end="4881:56"><name pos:start="4881:43" pos:end="4881:56">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <case pos:start="4883:17" pos:end="4886:0">case <expr pos:start="4883:22" pos:end="4883:25"><literal type="number" pos:start="4883:22" pos:end="4883:25">0x14</literal></expr>:</case> <comment type="block" pos:start="4883:28" pos:end="4883:67">/* sta, V9 stwa, store word alternate */</comment>

<cpp:ifndef pos:start="4885:1" pos:end="4885:22">#<cpp:directive pos:start="4885:2" pos:end="4885:7">ifndef</cpp:directive> <name pos:start="4885:9" pos:end="4885:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4887:21" pos:end="4889:42"><if pos:start="4887:21" pos:end="4889:42">if <condition pos:start="4887:24" pos:end="4887:31">(<expr pos:start="4887:25" pos:end="4887:30"><name pos:start="4887:25" pos:end="4887:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4889:25" pos:end="4889:42"><block_content pos:start="4889:25" pos:end="4889:42">

                        <goto pos:start="4889:25" pos:end="4889:42">goto <name pos:start="4889:30" pos:end="4889:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4891:21" pos:end="4896:0"><if pos:start="4891:21" pos:end="4896:0">if <condition pos:start="4891:24" pos:end="4891:40">(<expr pos:start="4891:25" pos:end="4891:39"><operator pos:start="4891:25" pos:end="4891:25">!</operator><call pos:start="4891:26" pos:end="4891:39"><name pos:start="4891:26" pos:end="4891:35">supervisor</name><argument_list pos:start="4891:36" pos:end="4891:39">(<argument pos:start="4891:37" pos:end="4891:38"><expr pos:start="4891:37" pos:end="4891:38"><name pos:start="4891:37" pos:end="4891:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4893:25" pos:end="4896:0"><block_content pos:start="4893:25" pos:end="4896:0">

                        <goto pos:start="4893:25" pos:end="4896:0">goto <name pos:start="4893:30" pos:end="4893:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4895:1" pos:end="4895:6">#<cpp:directive pos:start="4895:2" pos:end="4895:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4897:21" pos:end="4897:35"><expr pos:start="4897:21" pos:end="4897:34"><call pos:start="4897:21" pos:end="4897:34"><name pos:start="4897:21" pos:end="4897:30">save_state</name><argument_list pos:start="4897:31" pos:end="4897:34">(<argument pos:start="4897:32" pos:end="4897:33"><expr pos:start="4897:32" pos:end="4897:33"><name pos:start="4897:32" pos:end="4897:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4899:21" pos:end="4899:59"><expr pos:start="4899:21" pos:end="4899:58"><call pos:start="4899:21" pos:end="4899:58"><name pos:start="4899:21" pos:end="4899:30">gen_st_asi</name><argument_list pos:start="4899:31" pos:end="4899:58">(<argument pos:start="4899:32" pos:end="4899:38"><expr pos:start="4899:32" pos:end="4899:38"><name pos:start="4899:32" pos:end="4899:38">cpu_val</name></expr></argument>, <argument pos:start="4899:41" pos:end="4899:48"><expr pos:start="4899:41" pos:end="4899:48"><name pos:start="4899:41" pos:end="4899:48">cpu_addr</name></expr></argument>, <argument pos:start="4899:51" pos:end="4899:54"><expr pos:start="4899:51" pos:end="4899:54"><name pos:start="4899:51" pos:end="4899:54">insn</name></expr></argument>, <argument pos:start="4899:57" pos:end="4899:57"><expr pos:start="4899:57" pos:end="4899:57"><literal type="number" pos:start="4899:57" pos:end="4899:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4901:21" pos:end="4901:41"><expr pos:start="4901:21" pos:end="4901:40"><name pos:start="4901:21" pos:end="4901:27"><name pos:start="4901:21" pos:end="4901:22">dc</name><operator pos:start="4901:23" pos:end="4901:24">-&gt;</operator><name pos:start="4901:25" pos:end="4901:27">npc</name></name> <operator pos:start="4901:29" pos:end="4901:29">=</operator> <name pos:start="4901:31" pos:end="4901:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4903:21" pos:end="4903:26">break;</break>

                <case pos:start="4905:17" pos:end="4908:0">case <expr pos:start="4905:22" pos:end="4905:25"><literal type="number" pos:start="4905:22" pos:end="4905:25">0x15</literal></expr>:</case> <comment type="block" pos:start="4905:28" pos:end="4905:59">/* stba, store byte alternate */</comment>

<cpp:ifndef pos:start="4907:1" pos:end="4907:22">#<cpp:directive pos:start="4907:2" pos:end="4907:7">ifndef</cpp:directive> <name pos:start="4907:9" pos:end="4907:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4909:21" pos:end="4911:42"><if pos:start="4909:21" pos:end="4911:42">if <condition pos:start="4909:24" pos:end="4909:31">(<expr pos:start="4909:25" pos:end="4909:30"><name pos:start="4909:25" pos:end="4909:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4911:25" pos:end="4911:42"><block_content pos:start="4911:25" pos:end="4911:42">

                        <goto pos:start="4911:25" pos:end="4911:42">goto <name pos:start="4911:30" pos:end="4911:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4913:21" pos:end="4918:0"><if pos:start="4913:21" pos:end="4918:0">if <condition pos:start="4913:24" pos:end="4913:40">(<expr pos:start="4913:25" pos:end="4913:39"><operator pos:start="4913:25" pos:end="4913:25">!</operator><call pos:start="4913:26" pos:end="4913:39"><name pos:start="4913:26" pos:end="4913:35">supervisor</name><argument_list pos:start="4913:36" pos:end="4913:39">(<argument pos:start="4913:37" pos:end="4913:38"><expr pos:start="4913:37" pos:end="4913:38"><name pos:start="4913:37" pos:end="4913:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4915:25" pos:end="4918:0"><block_content pos:start="4915:25" pos:end="4918:0">

                        <goto pos:start="4915:25" pos:end="4918:0">goto <name pos:start="4915:30" pos:end="4915:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4917:1" pos:end="4917:6">#<cpp:directive pos:start="4917:2" pos:end="4917:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4919:21" pos:end="4919:35"><expr pos:start="4919:21" pos:end="4919:34"><call pos:start="4919:21" pos:end="4919:34"><name pos:start="4919:21" pos:end="4919:30">save_state</name><argument_list pos:start="4919:31" pos:end="4919:34">(<argument pos:start="4919:32" pos:end="4919:33"><expr pos:start="4919:32" pos:end="4919:33"><name pos:start="4919:32" pos:end="4919:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4921:21" pos:end="4921:59"><expr pos:start="4921:21" pos:end="4921:58"><call pos:start="4921:21" pos:end="4921:58"><name pos:start="4921:21" pos:end="4921:30">gen_st_asi</name><argument_list pos:start="4921:31" pos:end="4921:58">(<argument pos:start="4921:32" pos:end="4921:38"><expr pos:start="4921:32" pos:end="4921:38"><name pos:start="4921:32" pos:end="4921:38">cpu_val</name></expr></argument>, <argument pos:start="4921:41" pos:end="4921:48"><expr pos:start="4921:41" pos:end="4921:48"><name pos:start="4921:41" pos:end="4921:48">cpu_addr</name></expr></argument>, <argument pos:start="4921:51" pos:end="4921:54"><expr pos:start="4921:51" pos:end="4921:54"><name pos:start="4921:51" pos:end="4921:54">insn</name></expr></argument>, <argument pos:start="4921:57" pos:end="4921:57"><expr pos:start="4921:57" pos:end="4921:57"><literal type="number" pos:start="4921:57" pos:end="4921:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4923:21" pos:end="4923:41"><expr pos:start="4923:21" pos:end="4923:40"><name pos:start="4923:21" pos:end="4923:27"><name pos:start="4923:21" pos:end="4923:22">dc</name><operator pos:start="4923:23" pos:end="4923:24">-&gt;</operator><name pos:start="4923:25" pos:end="4923:27">npc</name></name> <operator pos:start="4923:29" pos:end="4923:29">=</operator> <name pos:start="4923:31" pos:end="4923:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4925:21" pos:end="4925:26">break;</break>

                <case pos:start="4927:17" pos:end="4930:0">case <expr pos:start="4927:22" pos:end="4927:25"><literal type="number" pos:start="4927:22" pos:end="4927:25">0x16</literal></expr>:</case> <comment type="block" pos:start="4927:28" pos:end="4927:63">/* stha, store halfword alternate */</comment>

<cpp:ifndef pos:start="4929:1" pos:end="4929:22">#<cpp:directive pos:start="4929:2" pos:end="4929:7">ifndef</cpp:directive> <name pos:start="4929:9" pos:end="4929:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4931:21" pos:end="4933:42"><if pos:start="4931:21" pos:end="4933:42">if <condition pos:start="4931:24" pos:end="4931:31">(<expr pos:start="4931:25" pos:end="4931:30"><name pos:start="4931:25" pos:end="4931:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4933:25" pos:end="4933:42"><block_content pos:start="4933:25" pos:end="4933:42">

                        <goto pos:start="4933:25" pos:end="4933:42">goto <name pos:start="4933:30" pos:end="4933:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4935:21" pos:end="4940:0"><if pos:start="4935:21" pos:end="4940:0">if <condition pos:start="4935:24" pos:end="4935:40">(<expr pos:start="4935:25" pos:end="4935:39"><operator pos:start="4935:25" pos:end="4935:25">!</operator><call pos:start="4935:26" pos:end="4935:39"><name pos:start="4935:26" pos:end="4935:35">supervisor</name><argument_list pos:start="4935:36" pos:end="4935:39">(<argument pos:start="4935:37" pos:end="4935:38"><expr pos:start="4935:37" pos:end="4935:38"><name pos:start="4935:37" pos:end="4935:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4937:25" pos:end="4940:0"><block_content pos:start="4937:25" pos:end="4940:0">

                        <goto pos:start="4937:25" pos:end="4940:0">goto <name pos:start="4937:30" pos:end="4937:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4939:1" pos:end="4939:6">#<cpp:directive pos:start="4939:2" pos:end="4939:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="4941:21" pos:end="4941:35"><expr pos:start="4941:21" pos:end="4941:34"><call pos:start="4941:21" pos:end="4941:34"><name pos:start="4941:21" pos:end="4941:30">save_state</name><argument_list pos:start="4941:31" pos:end="4941:34">(<argument pos:start="4941:32" pos:end="4941:33"><expr pos:start="4941:32" pos:end="4941:33"><name pos:start="4941:32" pos:end="4941:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4943:21" pos:end="4943:59"><expr pos:start="4943:21" pos:end="4943:58"><call pos:start="4943:21" pos:end="4943:58"><name pos:start="4943:21" pos:end="4943:30">gen_st_asi</name><argument_list pos:start="4943:31" pos:end="4943:58">(<argument pos:start="4943:32" pos:end="4943:38"><expr pos:start="4943:32" pos:end="4943:38"><name pos:start="4943:32" pos:end="4943:38">cpu_val</name></expr></argument>, <argument pos:start="4943:41" pos:end="4943:48"><expr pos:start="4943:41" pos:end="4943:48"><name pos:start="4943:41" pos:end="4943:48">cpu_addr</name></expr></argument>, <argument pos:start="4943:51" pos:end="4943:54"><expr pos:start="4943:51" pos:end="4943:54"><name pos:start="4943:51" pos:end="4943:54">insn</name></expr></argument>, <argument pos:start="4943:57" pos:end="4943:57"><expr pos:start="4943:57" pos:end="4943:57"><literal type="number" pos:start="4943:57" pos:end="4943:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4945:21" pos:end="4945:41"><expr pos:start="4945:21" pos:end="4945:40"><name pos:start="4945:21" pos:end="4945:27"><name pos:start="4945:21" pos:end="4945:22">dc</name><operator pos:start="4945:23" pos:end="4945:24">-&gt;</operator><name pos:start="4945:25" pos:end="4945:27">npc</name></name> <operator pos:start="4945:29" pos:end="4945:29">=</operator> <name pos:start="4945:31" pos:end="4945:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4947:21" pos:end="4947:26">break;</break>

                <case pos:start="4949:17" pos:end="4952:0">case <expr pos:start="4949:22" pos:end="4949:25"><literal type="number" pos:start="4949:22" pos:end="4949:25">0x17</literal></expr>:</case> <comment type="block" pos:start="4949:28" pos:end="4949:66">/* stda, store double word alternate */</comment>

<cpp:ifndef pos:start="4951:1" pos:end="4951:22">#<cpp:directive pos:start="4951:2" pos:end="4951:7">ifndef</cpp:directive> <name pos:start="4951:9" pos:end="4951:22">TARGET_SPARC64</name></cpp:ifndef>

                    <if_stmt pos:start="4953:21" pos:end="4955:42"><if pos:start="4953:21" pos:end="4955:42">if <condition pos:start="4953:24" pos:end="4953:31">(<expr pos:start="4953:25" pos:end="4953:30"><name pos:start="4953:25" pos:end="4953:30">IS_IMM</name></expr>)</condition><block type="pseudo" pos:start="4955:25" pos:end="4955:42"><block_content pos:start="4955:25" pos:end="4955:42">

                        <goto pos:start="4955:25" pos:end="4955:42">goto <name pos:start="4955:30" pos:end="4955:41">illegal_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="4957:21" pos:end="4962:0"><if pos:start="4957:21" pos:end="4962:0">if <condition pos:start="4957:24" pos:end="4957:40">(<expr pos:start="4957:25" pos:end="4957:39"><operator pos:start="4957:25" pos:end="4957:25">!</operator><call pos:start="4957:26" pos:end="4957:39"><name pos:start="4957:26" pos:end="4957:35">supervisor</name><argument_list pos:start="4957:36" pos:end="4957:39">(<argument pos:start="4957:37" pos:end="4957:38"><expr pos:start="4957:37" pos:end="4957:38"><name pos:start="4957:37" pos:end="4957:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="4959:25" pos:end="4962:0"><block_content pos:start="4959:25" pos:end="4962:0">

                        <goto pos:start="4959:25" pos:end="4962:0">goto <name pos:start="4959:30" pos:end="4959:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif pos:start="4961:1" pos:end="4961:6">#<cpp:directive pos:start="4961:2" pos:end="4961:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="4963:21" pos:end="4973:21"><if pos:start="4963:21" pos:end="4965:42">if <condition pos:start="4963:24" pos:end="4963:31">(<expr pos:start="4963:25" pos:end="4963:30"><name pos:start="4963:25" pos:end="4963:26">rd</name> <operator pos:start="4963:28" pos:end="4963:28">&amp;</operator> <literal type="number" pos:start="4963:30" pos:end="4963:30">1</literal></expr>)</condition><block type="pseudo" pos:start="4965:25" pos:end="4965:42"><block_content pos:start="4965:25" pos:end="4965:42">

                        <goto pos:start="4965:25" pos:end="4965:42">goto <name pos:start="4965:30" pos:end="4965:41">illegal_insn</name>;</goto></block_content></block></if>

                    <else pos:start="4967:21" pos:end="4973:21">else <block pos:start="4967:26" pos:end="4973:21">{<block_content pos:start="4969:25" pos:end="4971:70">

                        <expr_stmt pos:start="4969:25" pos:end="4969:39"><expr pos:start="4969:25" pos:end="4969:38"><call pos:start="4969:25" pos:end="4969:38"><name pos:start="4969:25" pos:end="4969:34">save_state</name><argument_list pos:start="4969:35" pos:end="4969:38">(<argument pos:start="4969:36" pos:end="4969:37"><expr pos:start="4969:36" pos:end="4969:37"><name pos:start="4969:36" pos:end="4969:37">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="4971:25" pos:end="4971:70"><expr pos:start="4971:25" pos:end="4971:69"><call pos:start="4971:25" pos:end="4971:69"><name pos:start="4971:25" pos:end="4971:36">gen_stda_asi</name><argument_list pos:start="4971:37" pos:end="4971:69">(<argument pos:start="4971:38" pos:end="4971:39"><expr pos:start="4971:38" pos:end="4971:39"><name pos:start="4971:38" pos:end="4971:39">dc</name></expr></argument>, <argument pos:start="4971:42" pos:end="4971:48"><expr pos:start="4971:42" pos:end="4971:48"><name pos:start="4971:42" pos:end="4971:48">cpu_val</name></expr></argument>, <argument pos:start="4971:51" pos:end="4971:58"><expr pos:start="4971:51" pos:end="4971:58"><name pos:start="4971:51" pos:end="4971:58">cpu_addr</name></expr></argument>, <argument pos:start="4971:61" pos:end="4971:64"><expr pos:start="4971:61" pos:end="4971:64"><name pos:start="4971:61" pos:end="4971:64">insn</name></expr></argument>, <argument pos:start="4971:67" pos:end="4971:68"><expr pos:start="4971:67" pos:end="4971:68"><name pos:start="4971:67" pos:end="4971:68">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="4975:21" pos:end="4980:0">break;</break>

<cpp:endif pos:start="4977:1" pos:end="4977:6">#<cpp:directive pos:start="4977:2" pos:end="4977:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="4979:1" pos:end="4979:21">#<cpp:directive pos:start="4979:2" pos:end="4979:6">ifdef</cpp:directive> <name pos:start="4979:8" pos:end="4979:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="4981:17" pos:end="4981:26">case <expr pos:start="4981:22" pos:end="4981:25"><literal type="number" pos:start="4981:22" pos:end="4981:25">0x0e</literal></expr>:</case> <comment type="block" pos:start="4981:28" pos:end="4981:39">/* V9 stx */</comment>

                    <expr_stmt pos:start="4983:21" pos:end="4983:51"><expr pos:start="4983:21" pos:end="4983:50"><call pos:start="4983:21" pos:end="4983:50"><name pos:start="4983:21" pos:end="4983:36">gen_address_mask</name><argument_list pos:start="4983:37" pos:end="4983:50">(<argument pos:start="4983:38" pos:end="4983:39"><expr pos:start="4983:38" pos:end="4983:39"><name pos:start="4983:38" pos:end="4983:39">dc</name></expr></argument>, <argument pos:start="4983:42" pos:end="4983:49"><expr pos:start="4983:42" pos:end="4983:49"><name pos:start="4983:42" pos:end="4983:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4985:21" pos:end="4985:70"><expr pos:start="4985:21" pos:end="4985:69"><call pos:start="4985:21" pos:end="4985:69"><name pos:start="4985:21" pos:end="4985:37">tcg_gen_qemu_st64</name><argument_list pos:start="4985:38" pos:end="4985:69">(<argument pos:start="4985:39" pos:end="4985:45"><expr pos:start="4985:39" pos:end="4985:45"><name pos:start="4985:39" pos:end="4985:45">cpu_val</name></expr></argument>, <argument pos:start="4985:48" pos:end="4985:55"><expr pos:start="4985:48" pos:end="4985:55"><name pos:start="4985:48" pos:end="4985:55">cpu_addr</name></expr></argument>, <argument pos:start="4985:58" pos:end="4985:68"><expr pos:start="4985:58" pos:end="4985:68"><name pos:start="4985:58" pos:end="4985:68"><name pos:start="4985:58" pos:end="4985:59">dc</name><operator pos:start="4985:60" pos:end="4985:61">-&gt;</operator><name pos:start="4985:62" pos:end="4985:68">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="4987:21" pos:end="4987:26">break;</break>

                <case pos:start="4989:17" pos:end="4989:26">case <expr pos:start="4989:22" pos:end="4989:25"><literal type="number" pos:start="4989:22" pos:end="4989:25">0x1e</literal></expr>:</case> <comment type="block" pos:start="4989:28" pos:end="4989:40">/* V9 stxa */</comment>

                    <expr_stmt pos:start="4991:21" pos:end="4991:35"><expr pos:start="4991:21" pos:end="4991:34"><call pos:start="4991:21" pos:end="4991:34"><name pos:start="4991:21" pos:end="4991:30">save_state</name><argument_list pos:start="4991:31" pos:end="4991:34">(<argument pos:start="4991:32" pos:end="4991:33"><expr pos:start="4991:32" pos:end="4991:33"><name pos:start="4991:32" pos:end="4991:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4993:21" pos:end="4993:59"><expr pos:start="4993:21" pos:end="4993:58"><call pos:start="4993:21" pos:end="4993:58"><name pos:start="4993:21" pos:end="4993:30">gen_st_asi</name><argument_list pos:start="4993:31" pos:end="4993:58">(<argument pos:start="4993:32" pos:end="4993:38"><expr pos:start="4993:32" pos:end="4993:38"><name pos:start="4993:32" pos:end="4993:38">cpu_val</name></expr></argument>, <argument pos:start="4993:41" pos:end="4993:48"><expr pos:start="4993:41" pos:end="4993:48"><name pos:start="4993:41" pos:end="4993:48">cpu_addr</name></expr></argument>, <argument pos:start="4993:51" pos:end="4993:54"><expr pos:start="4993:51" pos:end="4993:54"><name pos:start="4993:51" pos:end="4993:54">insn</name></expr></argument>, <argument pos:start="4993:57" pos:end="4993:57"><expr pos:start="4993:57" pos:end="4993:57"><literal type="number" pos:start="4993:57" pos:end="4993:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="4995:21" pos:end="4995:41"><expr pos:start="4995:21" pos:end="4995:40"><name pos:start="4995:21" pos:end="4995:27"><name pos:start="4995:21" pos:end="4995:22">dc</name><operator pos:start="4995:23" pos:end="4995:24">-&gt;</operator><name pos:start="4995:25" pos:end="4995:27">npc</name></name> <operator pos:start="4995:29" pos:end="4995:29">=</operator> <name pos:start="4995:31" pos:end="4995:40">DYNAMIC_PC</name></expr>;</expr_stmt>

                    <break pos:start="4997:21" pos:end="5000:0">break;</break>

<cpp:endif pos:start="4999:1" pos:end="4999:6">#<cpp:directive pos:start="4999:2" pos:end="4999:6">endif</cpp:directive></cpp:endif>

                <default pos:start="5001:17" pos:end="5001:24">default:</default>

                    <goto pos:start="5003:21" pos:end="5003:38">goto <name pos:start="5003:26" pos:end="5003:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="5007:15" pos:end="5127:13">else if <condition pos:start="5007:23" pos:end="5007:48">(<expr pos:start="5007:24" pos:end="5007:47"><name pos:start="5007:24" pos:end="5007:26">xop</name> <operator pos:start="5007:28" pos:end="5007:28">&gt;</operator> <literal type="number" pos:start="5007:30" pos:end="5007:33">0x23</literal> <operator pos:start="5007:35" pos:end="5007:36">&amp;&amp;</operator> <name pos:start="5007:38" pos:end="5007:40">xop</name> <operator pos:start="5007:42" pos:end="5007:42">&lt;</operator> <literal type="number" pos:start="5007:44" pos:end="5007:47">0x28</literal></expr>)</condition> <block pos:start="5007:50" pos:end="5127:13">{<block_content pos:start="5009:17" pos:end="5125:17">

                <if_stmt pos:start="5009:17" pos:end="5013:17"><if pos:start="5009:17" pos:end="5013:17">if <condition pos:start="5009:20" pos:end="5009:41">(<expr pos:start="5009:21" pos:end="5009:40"><call pos:start="5009:21" pos:end="5009:40"><name pos:start="5009:21" pos:end="5009:36">gen_trap_ifnofpu</name><argument_list pos:start="5009:37" pos:end="5009:40">(<argument pos:start="5009:38" pos:end="5009:39"><expr pos:start="5009:38" pos:end="5009:39"><name pos:start="5009:38" pos:end="5009:39">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5009:43" pos:end="5013:17">{<block_content pos:start="5011:21" pos:end="5011:34">

                    <goto pos:start="5011:21" pos:end="5011:34">goto <name pos:start="5011:26" pos:end="5011:33">jmp_insn</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="5015:17" pos:end="5015:31"><expr pos:start="5015:17" pos:end="5015:30"><call pos:start="5015:17" pos:end="5015:30"><name pos:start="5015:17" pos:end="5015:26">save_state</name><argument_list pos:start="5015:27" pos:end="5015:30">(<argument pos:start="5015:28" pos:end="5015:29"><expr pos:start="5015:28" pos:end="5015:29"><name pos:start="5015:28" pos:end="5015:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="5017:17" pos:end="5125:17">switch <condition pos:start="5017:24" pos:end="5017:28">(<expr pos:start="5017:25" pos:end="5017:27"><name pos:start="5017:25" pos:end="5017:27">xop</name></expr>)</condition> <block pos:start="5017:30" pos:end="5125:17">{<block_content pos:start="5019:17" pos:end="5123:38">

                <case pos:start="5019:17" pos:end="5019:26">case <expr pos:start="5019:22" pos:end="5019:25"><literal type="number" pos:start="5019:22" pos:end="5019:25">0x24</literal></expr>:</case> <comment type="block" pos:start="5019:28" pos:end="5019:49">/* stf, store fpreg */</comment>

                    <expr_stmt pos:start="5021:21" pos:end="5021:51"><expr pos:start="5021:21" pos:end="5021:50"><call pos:start="5021:21" pos:end="5021:50"><name pos:start="5021:21" pos:end="5021:36">gen_address_mask</name><argument_list pos:start="5021:37" pos:end="5021:50">(<argument pos:start="5021:38" pos:end="5021:39"><expr pos:start="5021:38" pos:end="5021:39"><name pos:start="5021:38" pos:end="5021:39">dc</name></expr></argument>, <argument pos:start="5021:42" pos:end="5021:49"><expr pos:start="5021:42" pos:end="5021:49"><name pos:start="5021:42" pos:end="5021:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5023:21" pos:end="5023:57"><expr pos:start="5023:21" pos:end="5023:56"><name pos:start="5023:21" pos:end="5023:31">cpu_src1_32</name> <operator pos:start="5023:33" pos:end="5023:33">=</operator> <call pos:start="5023:35" pos:end="5023:56"><name pos:start="5023:35" pos:end="5023:48">gen_load_fpr_F</name><argument_list pos:start="5023:49" pos:end="5023:56">(<argument pos:start="5023:50" pos:end="5023:51"><expr pos:start="5023:50" pos:end="5023:51"><name pos:start="5023:50" pos:end="5023:51">dc</name></expr></argument>, <argument pos:start="5023:54" pos:end="5023:55"><expr pos:start="5023:54" pos:end="5023:55"><name pos:start="5023:54" pos:end="5023:55">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5025:21" pos:end="5025:62"><expr pos:start="5025:21" pos:end="5025:61"><call pos:start="5025:21" pos:end="5025:61"><name pos:start="5025:21" pos:end="5025:38">tcg_gen_ext_i32_tl</name><argument_list pos:start="5025:39" pos:end="5025:61">(<argument pos:start="5025:40" pos:end="5025:47"><expr pos:start="5025:40" pos:end="5025:47"><name pos:start="5025:40" pos:end="5025:47">cpu_tmp0</name></expr></argument>, <argument pos:start="5025:50" pos:end="5025:60"><expr pos:start="5025:50" pos:end="5025:60"><name pos:start="5025:50" pos:end="5025:60">cpu_src1_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5027:21" pos:end="5027:71"><expr pos:start="5027:21" pos:end="5027:70"><call pos:start="5027:21" pos:end="5027:70"><name pos:start="5027:21" pos:end="5027:37">tcg_gen_qemu_st32</name><argument_list pos:start="5027:38" pos:end="5027:70">(<argument pos:start="5027:39" pos:end="5027:46"><expr pos:start="5027:39" pos:end="5027:46"><name pos:start="5027:39" pos:end="5027:46">cpu_tmp0</name></expr></argument>, <argument pos:start="5027:49" pos:end="5027:56"><expr pos:start="5027:49" pos:end="5027:56"><name pos:start="5027:49" pos:end="5027:56">cpu_addr</name></expr></argument>, <argument pos:start="5027:59" pos:end="5027:69"><expr pos:start="5027:59" pos:end="5027:69"><name pos:start="5027:59" pos:end="5027:69"><name pos:start="5027:59" pos:end="5027:60">dc</name><operator pos:start="5027:61" pos:end="5027:62">-&gt;</operator><name pos:start="5027:63" pos:end="5027:69">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5029:21" pos:end="5029:26">break;</break>

                <case pos:start="5031:17" pos:end="5034:0">case <expr pos:start="5031:22" pos:end="5031:25"><literal type="number" pos:start="5031:22" pos:end="5031:25">0x25</literal></expr>:</case> <comment type="block" pos:start="5031:28" pos:end="5031:49">/* stfsr, V9 stxfsr */</comment>

<cpp:ifdef pos:start="5033:1" pos:end="5033:21">#<cpp:directive pos:start="5033:2" pos:end="5033:6">ifdef</cpp:directive> <name pos:start="5033:8" pos:end="5033:21">TARGET_SPARC64</name></cpp:ifdef>

                    <expr_stmt pos:start="5035:21" pos:end="5035:51"><expr pos:start="5035:21" pos:end="5035:50"><call pos:start="5035:21" pos:end="5035:50"><name pos:start="5035:21" pos:end="5035:36">gen_address_mask</name><argument_list pos:start="5035:37" pos:end="5035:50">(<argument pos:start="5035:38" pos:end="5035:39"><expr pos:start="5035:38" pos:end="5035:39"><name pos:start="5035:38" pos:end="5035:39">dc</name></expr></argument>, <argument pos:start="5035:42" pos:end="5035:49"><expr pos:start="5035:42" pos:end="5035:49"><name pos:start="5035:42" pos:end="5035:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5037:21" pos:end="5037:85"><expr pos:start="5037:21" pos:end="5037:84"><call pos:start="5037:21" pos:end="5037:84"><name pos:start="5037:21" pos:end="5037:34">tcg_gen_ld_i64</name><argument_list pos:start="5037:35" pos:end="5037:84">(<argument pos:start="5037:36" pos:end="5037:44"><expr pos:start="5037:36" pos:end="5037:44"><name pos:start="5037:36" pos:end="5037:44">cpu_tmp64</name></expr></argument>, <argument pos:start="5037:47" pos:end="5037:53"><expr pos:start="5037:47" pos:end="5037:53"><name pos:start="5037:47" pos:end="5037:53">cpu_env</name></expr></argument>, <argument pos:start="5037:56" pos:end="5037:83"><expr pos:start="5037:56" pos:end="5037:83"><call pos:start="5037:56" pos:end="5037:83"><name pos:start="5037:56" pos:end="5037:63">offsetof</name><argument_list pos:start="5037:64" pos:end="5037:83">(<argument pos:start="5037:65" pos:end="5037:77"><expr pos:start="5037:65" pos:end="5037:77"><name pos:start="5037:65" pos:end="5037:77">CPUSPARCState</name></expr></argument>, <argument pos:start="5037:80" pos:end="5037:82"><expr pos:start="5037:80" pos:end="5037:82"><name pos:start="5037:80" pos:end="5037:82">fsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="5039:21" pos:end="5048:0"><if pos:start="5039:21" pos:end="5041:76">if <condition pos:start="5039:24" pos:end="5039:32">(<expr pos:start="5039:25" pos:end="5039:31"><name pos:start="5039:25" pos:end="5039:26">rd</name> <operator pos:start="5039:28" pos:end="5039:29">==</operator> <literal type="number" pos:start="5039:31" pos:end="5039:31">1</literal></expr>)</condition><block type="pseudo" pos:start="5041:25" pos:end="5041:76"><block_content pos:start="5041:25" pos:end="5041:76">

                        <expr_stmt pos:start="5041:25" pos:end="5041:76"><expr pos:start="5041:25" pos:end="5041:75"><call pos:start="5041:25" pos:end="5041:75"><name pos:start="5041:25" pos:end="5041:41">tcg_gen_qemu_st64</name><argument_list pos:start="5041:42" pos:end="5041:75">(<argument pos:start="5041:43" pos:end="5041:51"><expr pos:start="5041:43" pos:end="5041:51"><name pos:start="5041:43" pos:end="5041:51">cpu_tmp64</name></expr></argument>, <argument pos:start="5041:54" pos:end="5041:61"><expr pos:start="5041:54" pos:end="5041:61"><name pos:start="5041:54" pos:end="5041:61">cpu_addr</name></expr></argument>, <argument pos:start="5041:64" pos:end="5041:74"><expr pos:start="5041:64" pos:end="5041:74"><name pos:start="5041:64" pos:end="5041:74"><name pos:start="5041:64" pos:end="5041:65">dc</name><operator pos:start="5041:66" pos:end="5041:67">-&gt;</operator><name pos:start="5041:68" pos:end="5041:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="5043:21" pos:end="5048:0">else<block type="pseudo" pos:start="5045:25" pos:end="5048:0"><block_content pos:start="5045:25" pos:end="5048:0">

                        <expr_stmt pos:start="5045:25" pos:end="5048:0"><expr pos:start="5045:25" pos:end="5045:75"><call pos:start="5045:25" pos:end="5045:75"><name pos:start="5045:25" pos:end="5045:41">tcg_gen_qemu_st32</name><argument_list pos:start="5045:42" pos:end="5045:75">(<argument pos:start="5045:43" pos:end="5045:51"><expr pos:start="5045:43" pos:end="5045:51"><name pos:start="5045:43" pos:end="5045:51">cpu_tmp64</name></expr></argument>, <argument pos:start="5045:54" pos:end="5045:61"><expr pos:start="5045:54" pos:end="5045:61"><name pos:start="5045:54" pos:end="5045:61">cpu_addr</name></expr></argument>, <argument pos:start="5045:64" pos:end="5045:74"><expr pos:start="5045:64" pos:end="5045:74"><name pos:start="5045:64" pos:end="5045:74"><name pos:start="5045:64" pos:end="5045:65">dc</name><operator pos:start="5045:66" pos:end="5045:67">-&gt;</operator><name pos:start="5045:68" pos:end="5045:74">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:else pos:start="5047:1" pos:end="5047:5">#<cpp:directive pos:start="5047:2" pos:end="5047:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="5049:21" pos:end="5049:85"><expr pos:start="5049:21" pos:end="5049:84"><call pos:start="5049:21" pos:end="5049:84"><name pos:start="5049:21" pos:end="5049:34">tcg_gen_ld_i32</name><argument_list pos:start="5049:35" pos:end="5049:84">(<argument pos:start="5049:36" pos:end="5049:44"><expr pos:start="5049:36" pos:end="5049:44"><name pos:start="5049:36" pos:end="5049:44">cpu_tmp32</name></expr></argument>, <argument pos:start="5049:47" pos:end="5049:53"><expr pos:start="5049:47" pos:end="5049:53"><name pos:start="5049:47" pos:end="5049:53">cpu_env</name></expr></argument>, <argument pos:start="5049:56" pos:end="5049:83"><expr pos:start="5049:56" pos:end="5049:83"><call pos:start="5049:56" pos:end="5049:83"><name pos:start="5049:56" pos:end="5049:63">offsetof</name><argument_list pos:start="5049:64" pos:end="5049:83">(<argument pos:start="5049:65" pos:end="5049:77"><expr pos:start="5049:65" pos:end="5049:77"><name pos:start="5049:65" pos:end="5049:77">CPUSPARCState</name></expr></argument>, <argument pos:start="5049:80" pos:end="5049:82"><expr pos:start="5049:80" pos:end="5049:82"><name pos:start="5049:80" pos:end="5049:82">fsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5051:21" pos:end="5054:0"><expr pos:start="5051:21" pos:end="5051:71"><call pos:start="5051:21" pos:end="5051:71"><name pos:start="5051:21" pos:end="5051:37">tcg_gen_qemu_st32</name><argument_list pos:start="5051:38" pos:end="5051:71">(<argument pos:start="5051:39" pos:end="5051:47"><expr pos:start="5051:39" pos:end="5051:47"><name pos:start="5051:39" pos:end="5051:47">cpu_tmp32</name></expr></argument>, <argument pos:start="5051:50" pos:end="5051:57"><expr pos:start="5051:50" pos:end="5051:57"><name pos:start="5051:50" pos:end="5051:57">cpu_addr</name></expr></argument>, <argument pos:start="5051:60" pos:end="5051:70"><expr pos:start="5051:60" pos:end="5051:70"><name pos:start="5051:60" pos:end="5051:70"><name pos:start="5051:60" pos:end="5051:61">dc</name><operator pos:start="5051:62" pos:end="5051:63">-&gt;</operator><name pos:start="5051:64" pos:end="5051:70">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="5053:1" pos:end="5053:6">#<cpp:directive pos:start="5053:2" pos:end="5053:6">endif</cpp:directive></cpp:endif>

                    <break pos:start="5055:21" pos:end="5055:26">break;</break>

                <case pos:start="5057:17" pos:end="5060:0">case <expr pos:start="5057:22" pos:end="5057:25"><literal type="number" pos:start="5057:22" pos:end="5057:25">0x26</literal></expr>:</case>

<cpp:ifdef pos:start="5059:1" pos:end="5059:21">#<cpp:directive pos:start="5059:2" pos:end="5059:6">ifdef</cpp:directive> <name pos:start="5059:8" pos:end="5059:21">TARGET_SPARC64</name></cpp:ifdef>

                    <comment type="block" pos:start="5061:21" pos:end="5061:51">/* V9 stqf, store quad fpreg */</comment>

                    <block pos:start="5063:21" pos:end="5081:21">{<block_content pos:start="5065:25" pos:end="5079:51">

                        <decl_stmt pos:start="5065:25" pos:end="5065:41"><decl pos:start="5065:25" pos:end="5065:40"><type pos:start="5065:25" pos:end="5065:32"><name pos:start="5065:25" pos:end="5065:32">TCGv_i32</name></type> <name pos:start="5065:34" pos:end="5065:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="5069:25" pos:end="5069:56"><expr pos:start="5069:25" pos:end="5069:55"><call pos:start="5069:25" pos:end="5069:55"><name pos:start="5069:25" pos:end="5069:41">CHECK_FPU_FEATURE</name><argument_list pos:start="5069:42" pos:end="5069:55">(<argument pos:start="5069:43" pos:end="5069:44"><expr pos:start="5069:43" pos:end="5069:44"><name pos:start="5069:43" pos:end="5069:44">dc</name></expr></argument>, <argument pos:start="5069:47" pos:end="5069:54"><expr pos:start="5069:47" pos:end="5069:54"><name pos:start="5069:47" pos:end="5069:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5071:25" pos:end="5071:56"><expr pos:start="5071:25" pos:end="5071:55"><call pos:start="5071:25" pos:end="5071:55"><name pos:start="5071:25" pos:end="5071:43">gen_op_load_fpr_QT0</name><argument_list pos:start="5071:44" pos:end="5071:55">(<argument pos:start="5071:45" pos:end="5071:54"><expr pos:start="5071:45" pos:end="5071:54"><call pos:start="5071:45" pos:end="5071:54"><name pos:start="5071:45" pos:end="5071:50">QFPREG</name><argument_list pos:start="5071:51" pos:end="5071:54">(<argument pos:start="5071:52" pos:end="5071:53"><expr pos:start="5071:52" pos:end="5071:53"><name pos:start="5071:52" pos:end="5071:53">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5073:25" pos:end="5073:61"><expr pos:start="5073:25" pos:end="5073:60"><name pos:start="5073:25" pos:end="5073:31">r_const</name> <operator pos:start="5073:33" pos:end="5073:33">=</operator> <call pos:start="5073:35" pos:end="5073:60"><name pos:start="5073:35" pos:end="5073:47">tcg_const_i32</name><argument_list pos:start="5073:48" pos:end="5073:60">(<argument pos:start="5073:49" pos:end="5073:59"><expr pos:start="5073:49" pos:end="5073:59"><name pos:start="5073:49" pos:end="5073:59"><name pos:start="5073:49" pos:end="5073:50">dc</name><operator pos:start="5073:51" pos:end="5073:52">-&gt;</operator><name pos:start="5073:53" pos:end="5073:59">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5075:25" pos:end="5075:55"><expr pos:start="5075:25" pos:end="5075:54"><call pos:start="5075:25" pos:end="5075:54"><name pos:start="5075:25" pos:end="5075:40">gen_address_mask</name><argument_list pos:start="5075:41" pos:end="5075:54">(<argument pos:start="5075:42" pos:end="5075:43"><expr pos:start="5075:42" pos:end="5075:43"><name pos:start="5075:42" pos:end="5075:43">dc</name></expr></argument>, <argument pos:start="5075:46" pos:end="5075:53"><expr pos:start="5075:46" pos:end="5075:53"><name pos:start="5075:46" pos:end="5075:53">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5077:25" pos:end="5077:68"><expr pos:start="5077:25" pos:end="5077:67"><call pos:start="5077:25" pos:end="5077:67"><name pos:start="5077:25" pos:end="5077:39">gen_helper_stqf</name><argument_list pos:start="5077:40" pos:end="5077:67">(<argument pos:start="5077:41" pos:end="5077:47"><expr pos:start="5077:41" pos:end="5077:47"><name pos:start="5077:41" pos:end="5077:47">cpu_env</name></expr></argument>, <argument pos:start="5077:50" pos:end="5077:57"><expr pos:start="5077:50" pos:end="5077:57"><name pos:start="5077:50" pos:end="5077:57">cpu_addr</name></expr></argument>, <argument pos:start="5077:60" pos:end="5077:66"><expr pos:start="5077:60" pos:end="5077:66"><name pos:start="5077:60" pos:end="5077:66">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5079:25" pos:end="5079:51"><expr pos:start="5079:25" pos:end="5079:50"><call pos:start="5079:25" pos:end="5079:50"><name pos:start="5079:25" pos:end="5079:41">tcg_temp_free_i32</name><argument_list pos:start="5079:42" pos:end="5079:50">(<argument pos:start="5079:43" pos:end="5079:49"><expr pos:start="5079:43" pos:end="5079:49"><name pos:start="5079:43" pos:end="5079:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="5083:21" pos:end="5090:0">break;</break>

<cpp:else pos:start="5085:1" pos:end="5085:5">#<cpp:directive pos:start="5085:2" pos:end="5085:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="5085:7" pos:end="5085:27">/* !TARGET_SPARC64 */</comment>

                    <comment type="block" pos:start="5087:21" pos:end="5087:59">/* stdfq, store floating point queue */</comment>

<cpp:if pos:start="5089:1" pos:end="5089:29">#<cpp:directive pos:start="5089:2" pos:end="5089:3">if</cpp:directive> <expr pos:start="5089:5" pos:end="5089:29"><call pos:start="5089:5" pos:end="5089:29"><name pos:start="5089:5" pos:end="5089:11">defined</name><argument_list pos:start="5089:12" pos:end="5089:29">(<argument pos:start="5089:13" pos:end="5089:28"><expr pos:start="5089:13" pos:end="5089:28"><name pos:start="5089:13" pos:end="5089:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <goto pos:start="5091:21" pos:end="5094:0">goto <name pos:start="5091:26" pos:end="5091:37">illegal_insn</name>;</goto>

<cpp:else pos:start="5093:1" pos:end="5093:5">#<cpp:directive pos:start="5093:2" pos:end="5093:5">else</cpp:directive></cpp:else>

                    <if_stmt pos:start="5095:21" pos:end="5097:39"><if pos:start="5095:21" pos:end="5097:39">if <condition pos:start="5095:24" pos:end="5095:40">(<expr pos:start="5095:25" pos:end="5095:39"><operator pos:start="5095:25" pos:end="5095:25">!</operator><call pos:start="5095:26" pos:end="5095:39"><name pos:start="5095:26" pos:end="5095:35">supervisor</name><argument_list pos:start="5095:36" pos:end="5095:39">(<argument pos:start="5095:37" pos:end="5095:38"><expr pos:start="5095:37" pos:end="5095:38"><name pos:start="5095:37" pos:end="5095:38">dc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="5097:25" pos:end="5097:39"><block_content pos:start="5097:25" pos:end="5097:39">

                        <goto pos:start="5097:25" pos:end="5097:39">goto <name pos:start="5097:30" pos:end="5097:38">priv_insn</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="5099:21" pos:end="5103:21"><if pos:start="5099:21" pos:end="5103:21">if <condition pos:start="5099:24" pos:end="5099:45">(<expr pos:start="5099:25" pos:end="5099:44"><call pos:start="5099:25" pos:end="5099:44"><name pos:start="5099:25" pos:end="5099:40">gen_trap_ifnofpu</name><argument_list pos:start="5099:41" pos:end="5099:44">(<argument pos:start="5099:42" pos:end="5099:43"><expr pos:start="5099:42" pos:end="5099:43"><name pos:start="5099:42" pos:end="5099:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5099:47" pos:end="5103:21">{<block_content pos:start="5101:25" pos:end="5101:38">

                        <goto pos:start="5101:25" pos:end="5101:38">goto <name pos:start="5101:30" pos:end="5101:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <goto pos:start="5105:21" pos:end="5110:0">goto <name pos:start="5105:26" pos:end="5105:33">nfq_insn</name>;</goto>

<cpp:endif pos:start="5107:1" pos:end="5107:6">#<cpp:directive pos:start="5107:2" pos:end="5107:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="5109:1" pos:end="5109:6">#<cpp:directive pos:start="5109:2" pos:end="5109:6">endif</cpp:directive></cpp:endif>

                <case pos:start="5111:17" pos:end="5111:26">case <expr pos:start="5111:22" pos:end="5111:25"><literal type="number" pos:start="5111:22" pos:end="5111:25">0x27</literal></expr>:</case> <comment type="block" pos:start="5111:28" pos:end="5111:57">/* stdf, store double fpreg */</comment>

                    <expr_stmt pos:start="5113:21" pos:end="5113:51"><expr pos:start="5113:21" pos:end="5113:50"><call pos:start="5113:21" pos:end="5113:50"><name pos:start="5113:21" pos:end="5113:36">gen_address_mask</name><argument_list pos:start="5113:37" pos:end="5113:50">(<argument pos:start="5113:38" pos:end="5113:39"><expr pos:start="5113:38" pos:end="5113:39"><name pos:start="5113:38" pos:end="5113:39">dc</name></expr></argument>, <argument pos:start="5113:42" pos:end="5113:49"><expr pos:start="5113:42" pos:end="5113:49"><name pos:start="5113:42" pos:end="5113:49">cpu_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5115:21" pos:end="5115:57"><expr pos:start="5115:21" pos:end="5115:56"><name pos:start="5115:21" pos:end="5115:31">cpu_src1_64</name> <operator pos:start="5115:33" pos:end="5115:33">=</operator> <call pos:start="5115:35" pos:end="5115:56"><name pos:start="5115:35" pos:end="5115:48">gen_load_fpr_D</name><argument_list pos:start="5115:49" pos:end="5115:56">(<argument pos:start="5115:50" pos:end="5115:51"><expr pos:start="5115:50" pos:end="5115:51"><name pos:start="5115:50" pos:end="5115:51">dc</name></expr></argument>, <argument pos:start="5115:54" pos:end="5115:55"><expr pos:start="5115:54" pos:end="5115:55"><name pos:start="5115:54" pos:end="5115:55">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="5117:21" pos:end="5117:74"><expr pos:start="5117:21" pos:end="5117:73"><call pos:start="5117:21" pos:end="5117:73"><name pos:start="5117:21" pos:end="5117:37">tcg_gen_qemu_st64</name><argument_list pos:start="5117:38" pos:end="5117:73">(<argument pos:start="5117:39" pos:end="5117:49"><expr pos:start="5117:39" pos:end="5117:49"><name pos:start="5117:39" pos:end="5117:49">cpu_src1_64</name></expr></argument>, <argument pos:start="5117:52" pos:end="5117:59"><expr pos:start="5117:52" pos:end="5117:59"><name pos:start="5117:52" pos:end="5117:59">cpu_addr</name></expr></argument>, <argument pos:start="5117:62" pos:end="5117:72"><expr pos:start="5117:62" pos:end="5117:72"><name pos:start="5117:62" pos:end="5117:72"><name pos:start="5117:62" pos:end="5117:63">dc</name><operator pos:start="5117:64" pos:end="5117:65">-&gt;</operator><name pos:start="5117:66" pos:end="5117:72">mem_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5119:21" pos:end="5119:26">break;</break>

                <default pos:start="5121:17" pos:end="5121:24">default:</default>

                    <goto pos:start="5123:21" pos:end="5123:38">goto <name pos:start="5123:26" pos:end="5123:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="5127:15" pos:end="5219:13">else if <condition pos:start="5127:23" pos:end="5127:48">(<expr pos:start="5127:24" pos:end="5127:47"><name pos:start="5127:24" pos:end="5127:26">xop</name> <operator pos:start="5127:28" pos:end="5127:28">&gt;</operator> <literal type="number" pos:start="5127:30" pos:end="5127:33">0x33</literal> <operator pos:start="5127:35" pos:end="5127:36">&amp;&amp;</operator> <name pos:start="5127:38" pos:end="5127:40">xop</name> <operator pos:start="5127:42" pos:end="5127:42">&lt;</operator> <literal type="number" pos:start="5127:44" pos:end="5127:47">0x3f</literal></expr>)</condition> <block pos:start="5127:50" pos:end="5219:13">{<block_content pos:start="5129:17" pos:end="5217:17">

                <expr_stmt pos:start="5129:17" pos:end="5129:31"><expr pos:start="5129:17" pos:end="5129:30"><call pos:start="5129:17" pos:end="5129:30"><name pos:start="5129:17" pos:end="5129:26">save_state</name><argument_list pos:start="5129:27" pos:end="5129:30">(<argument pos:start="5129:28" pos:end="5129:29"><expr pos:start="5129:28" pos:end="5129:29"><name pos:start="5129:28" pos:end="5129:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="5131:17" pos:end="5217:17">switch <condition pos:start="5131:24" pos:end="5131:28">(<expr pos:start="5131:25" pos:end="5131:27"><name pos:start="5131:25" pos:end="5131:27">xop</name></expr>)</condition> <block pos:start="5131:30" pos:end="5217:17">{<block_content pos:start="5135:17" pos:end="5215:38">

<cpp:ifdef pos:start="5133:1" pos:end="5133:21">#<cpp:directive pos:start="5133:2" pos:end="5133:6">ifdef</cpp:directive> <name pos:start="5133:8" pos:end="5133:21">TARGET_SPARC64</name></cpp:ifdef>

                <case pos:start="5135:17" pos:end="5135:26">case <expr pos:start="5135:22" pos:end="5135:25"><literal type="number" pos:start="5135:22" pos:end="5135:25">0x34</literal></expr>:</case> <comment type="block" pos:start="5135:28" pos:end="5135:40">/* V9 stfa */</comment>

                    <if_stmt pos:start="5137:21" pos:end="5141:21"><if pos:start="5137:21" pos:end="5141:21">if <condition pos:start="5137:24" pos:end="5137:45">(<expr pos:start="5137:25" pos:end="5137:44"><call pos:start="5137:25" pos:end="5137:44"><name pos:start="5137:25" pos:end="5137:40">gen_trap_ifnofpu</name><argument_list pos:start="5137:41" pos:end="5137:44">(<argument pos:start="5137:42" pos:end="5137:43"><expr pos:start="5137:42" pos:end="5137:43"><name pos:start="5137:42" pos:end="5137:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5137:47" pos:end="5141:21">{<block_content pos:start="5139:25" pos:end="5139:38">

                        <goto pos:start="5139:25" pos:end="5139:38">goto <name pos:start="5139:30" pos:end="5139:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="5143:21" pos:end="5143:55"><expr pos:start="5143:21" pos:end="5143:54"><call pos:start="5143:21" pos:end="5143:54"><name pos:start="5143:21" pos:end="5143:31">gen_stf_asi</name><argument_list pos:start="5143:32" pos:end="5143:54">(<argument pos:start="5143:33" pos:end="5143:40"><expr pos:start="5143:33" pos:end="5143:40"><name pos:start="5143:33" pos:end="5143:40">cpu_addr</name></expr></argument>, <argument pos:start="5143:43" pos:end="5143:46"><expr pos:start="5143:43" pos:end="5143:46"><name pos:start="5143:43" pos:end="5143:46">insn</name></expr></argument>, <argument pos:start="5143:49" pos:end="5143:49"><expr pos:start="5143:49" pos:end="5143:49"><literal type="number" pos:start="5143:49" pos:end="5143:49">4</literal></expr></argument>, <argument pos:start="5143:52" pos:end="5143:53"><expr pos:start="5143:52" pos:end="5143:53"><name pos:start="5143:52" pos:end="5143:53">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5145:21" pos:end="5145:26">break;</break>

                <case pos:start="5147:17" pos:end="5147:26">case <expr pos:start="5147:22" pos:end="5147:25"><literal type="number" pos:start="5147:22" pos:end="5147:25">0x36</literal></expr>:</case> <comment type="block" pos:start="5147:28" pos:end="5147:41">/* V9 stqfa */</comment>

                    <block pos:start="5149:21" pos:end="5171:21">{<block_content pos:start="5151:25" pos:end="5169:68">

                        <decl_stmt pos:start="5151:25" pos:end="5151:41"><decl pos:start="5151:25" pos:end="5151:40"><type pos:start="5151:25" pos:end="5151:32"><name pos:start="5151:25" pos:end="5151:32">TCGv_i32</name></type> <name pos:start="5151:34" pos:end="5151:40">r_const</name></decl>;</decl_stmt>



                        <expr_stmt pos:start="5155:25" pos:end="5155:56"><expr pos:start="5155:25" pos:end="5155:55"><call pos:start="5155:25" pos:end="5155:55"><name pos:start="5155:25" pos:end="5155:41">CHECK_FPU_FEATURE</name><argument_list pos:start="5155:42" pos:end="5155:55">(<argument pos:start="5155:43" pos:end="5155:44"><expr pos:start="5155:43" pos:end="5155:44"><name pos:start="5155:43" pos:end="5155:44">dc</name></expr></argument>, <argument pos:start="5155:47" pos:end="5155:54"><expr pos:start="5155:47" pos:end="5155:54"><name pos:start="5155:47" pos:end="5155:54">FLOAT128</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="5157:25" pos:end="5161:25"><if pos:start="5157:25" pos:end="5161:25">if <condition pos:start="5157:28" pos:end="5157:49">(<expr pos:start="5157:29" pos:end="5157:48"><call pos:start="5157:29" pos:end="5157:48"><name pos:start="5157:29" pos:end="5157:44">gen_trap_ifnofpu</name><argument_list pos:start="5157:45" pos:end="5157:48">(<argument pos:start="5157:46" pos:end="5157:47"><expr pos:start="5157:46" pos:end="5157:47"><name pos:start="5157:46" pos:end="5157:47">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5157:51" pos:end="5161:25">{<block_content pos:start="5159:29" pos:end="5159:42">

                            <goto pos:start="5159:29" pos:end="5159:42">goto <name pos:start="5159:34" pos:end="5159:41">jmp_insn</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="5163:25" pos:end="5163:51"><expr pos:start="5163:25" pos:end="5163:50"><name pos:start="5163:25" pos:end="5163:31">r_const</name> <operator pos:start="5163:33" pos:end="5163:33">=</operator> <call pos:start="5163:35" pos:end="5163:50"><name pos:start="5163:35" pos:end="5163:47">tcg_const_i32</name><argument_list pos:start="5163:48" pos:end="5163:50">(<argument pos:start="5163:49" pos:end="5163:49"><expr pos:start="5163:49" pos:end="5163:49"><literal type="number" pos:start="5163:49" pos:end="5163:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5165:25" pos:end="5165:75"><expr pos:start="5165:25" pos:end="5165:74"><call pos:start="5165:25" pos:end="5165:74"><name pos:start="5165:25" pos:end="5165:46">gen_helper_check_align</name><argument_list pos:start="5165:47" pos:end="5165:74">(<argument pos:start="5165:48" pos:end="5165:54"><expr pos:start="5165:48" pos:end="5165:54"><name pos:start="5165:48" pos:end="5165:54">cpu_env</name></expr></argument>, <argument pos:start="5165:57" pos:end="5165:64"><expr pos:start="5165:57" pos:end="5165:64"><name pos:start="5165:57" pos:end="5165:64">cpu_addr</name></expr></argument>, <argument pos:start="5165:67" pos:end="5165:73"><expr pos:start="5165:67" pos:end="5165:73"><name pos:start="5165:67" pos:end="5165:73">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5167:25" pos:end="5167:51"><expr pos:start="5167:25" pos:end="5167:50"><call pos:start="5167:25" pos:end="5167:50"><name pos:start="5167:25" pos:end="5167:41">tcg_temp_free_i32</name><argument_list pos:start="5167:42" pos:end="5167:50">(<argument pos:start="5167:43" pos:end="5167:49"><expr pos:start="5167:43" pos:end="5167:49"><name pos:start="5167:43" pos:end="5167:49">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="5169:25" pos:end="5169:68"><expr pos:start="5169:25" pos:end="5169:67"><call pos:start="5169:25" pos:end="5169:67"><name pos:start="5169:25" pos:end="5169:35">gen_stf_asi</name><argument_list pos:start="5169:36" pos:end="5169:67">(<argument pos:start="5169:37" pos:end="5169:44"><expr pos:start="5169:37" pos:end="5169:44"><name pos:start="5169:37" pos:end="5169:44">cpu_addr</name></expr></argument>, <argument pos:start="5169:47" pos:end="5169:50"><expr pos:start="5169:47" pos:end="5169:50"><name pos:start="5169:47" pos:end="5169:50">insn</name></expr></argument>, <argument pos:start="5169:53" pos:end="5169:54"><expr pos:start="5169:53" pos:end="5169:54"><literal type="number" pos:start="5169:53" pos:end="5169:54">16</literal></expr></argument>, <argument pos:start="5169:57" pos:end="5169:66"><expr pos:start="5169:57" pos:end="5169:66"><call pos:start="5169:57" pos:end="5169:66"><name pos:start="5169:57" pos:end="5169:62">QFPREG</name><argument_list pos:start="5169:63" pos:end="5169:66">(<argument pos:start="5169:64" pos:end="5169:65"><expr pos:start="5169:64" pos:end="5169:65"><name pos:start="5169:64" pos:end="5169:65">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block>

                    <break pos:start="5173:21" pos:end="5173:26">break;</break>

                <case pos:start="5175:17" pos:end="5175:26">case <expr pos:start="5175:22" pos:end="5175:25"><literal type="number" pos:start="5175:22" pos:end="5175:25">0x37</literal></expr>:</case> <comment type="block" pos:start="5175:28" pos:end="5175:41">/* V9 stdfa */</comment>

                    <if_stmt pos:start="5177:21" pos:end="5181:21"><if pos:start="5177:21" pos:end="5181:21">if <condition pos:start="5177:24" pos:end="5177:45">(<expr pos:start="5177:25" pos:end="5177:44"><call pos:start="5177:25" pos:end="5177:44"><name pos:start="5177:25" pos:end="5177:40">gen_trap_ifnofpu</name><argument_list pos:start="5177:41" pos:end="5177:44">(<argument pos:start="5177:42" pos:end="5177:43"><expr pos:start="5177:42" pos:end="5177:43"><name pos:start="5177:42" pos:end="5177:43">dc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="5177:47" pos:end="5181:21">{<block_content pos:start="5179:25" pos:end="5179:38">

                        <goto pos:start="5179:25" pos:end="5179:38">goto <name pos:start="5179:30" pos:end="5179:37">jmp_insn</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="5183:21" pos:end="5183:63"><expr pos:start="5183:21" pos:end="5183:62"><call pos:start="5183:21" pos:end="5183:62"><name pos:start="5183:21" pos:end="5183:31">gen_stf_asi</name><argument_list pos:start="5183:32" pos:end="5183:62">(<argument pos:start="5183:33" pos:end="5183:40"><expr pos:start="5183:33" pos:end="5183:40"><name pos:start="5183:33" pos:end="5183:40">cpu_addr</name></expr></argument>, <argument pos:start="5183:43" pos:end="5183:46"><expr pos:start="5183:43" pos:end="5183:46"><name pos:start="5183:43" pos:end="5183:46">insn</name></expr></argument>, <argument pos:start="5183:49" pos:end="5183:49"><expr pos:start="5183:49" pos:end="5183:49"><literal type="number" pos:start="5183:49" pos:end="5183:49">8</literal></expr></argument>, <argument pos:start="5183:52" pos:end="5183:61"><expr pos:start="5183:52" pos:end="5183:61"><call pos:start="5183:52" pos:end="5183:61"><name pos:start="5183:52" pos:end="5183:57">DFPREG</name><argument_list pos:start="5183:58" pos:end="5183:61">(<argument pos:start="5183:59" pos:end="5183:60"><expr pos:start="5183:59" pos:end="5183:60"><name pos:start="5183:59" pos:end="5183:60">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5185:21" pos:end="5185:26">break;</break>

                <case pos:start="5187:17" pos:end="5187:26">case <expr pos:start="5187:22" pos:end="5187:25"><literal type="number" pos:start="5187:22" pos:end="5187:25">0x3c</literal></expr>:</case> <comment type="block" pos:start="5187:28" pos:end="5187:40">/* V9 casa */</comment>

                    <expr_stmt pos:start="5189:21" pos:end="5189:66"><expr pos:start="5189:21" pos:end="5189:65"><call pos:start="5189:21" pos:end="5189:65"><name pos:start="5189:21" pos:end="5189:31">gen_cas_asi</name><argument_list pos:start="5189:32" pos:end="5189:65">(<argument pos:start="5189:33" pos:end="5189:34"><expr pos:start="5189:33" pos:end="5189:34"><name pos:start="5189:33" pos:end="5189:34">dc</name></expr></argument>, <argument pos:start="5189:37" pos:end="5189:44"><expr pos:start="5189:37" pos:end="5189:44"><name pos:start="5189:37" pos:end="5189:44">cpu_addr</name></expr></argument>, <argument pos:start="5189:47" pos:end="5189:54"><expr pos:start="5189:47" pos:end="5189:54"><name pos:start="5189:47" pos:end="5189:54">cpu_src2</name></expr></argument>, <argument pos:start="5189:57" pos:end="5189:60"><expr pos:start="5189:57" pos:end="5189:60"><name pos:start="5189:57" pos:end="5189:60">insn</name></expr></argument>, <argument pos:start="5189:63" pos:end="5189:64"><expr pos:start="5189:63" pos:end="5189:64"><name pos:start="5189:63" pos:end="5189:64">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5191:21" pos:end="5191:26">break;</break>

                <case pos:start="5193:17" pos:end="5193:26">case <expr pos:start="5193:22" pos:end="5193:25"><literal type="number" pos:start="5193:22" pos:end="5193:25">0x3e</literal></expr>:</case> <comment type="block" pos:start="5193:28" pos:end="5193:41">/* V9 casxa */</comment>

                    <expr_stmt pos:start="5195:21" pos:end="5195:67"><expr pos:start="5195:21" pos:end="5195:66"><call pos:start="5195:21" pos:end="5195:66"><name pos:start="5195:21" pos:end="5195:32">gen_casx_asi</name><argument_list pos:start="5195:33" pos:end="5195:66">(<argument pos:start="5195:34" pos:end="5195:35"><expr pos:start="5195:34" pos:end="5195:35"><name pos:start="5195:34" pos:end="5195:35">dc</name></expr></argument>, <argument pos:start="5195:38" pos:end="5195:45"><expr pos:start="5195:38" pos:end="5195:45"><name pos:start="5195:38" pos:end="5195:45">cpu_addr</name></expr></argument>, <argument pos:start="5195:48" pos:end="5195:55"><expr pos:start="5195:48" pos:end="5195:55"><name pos:start="5195:48" pos:end="5195:55">cpu_src2</name></expr></argument>, <argument pos:start="5195:58" pos:end="5195:61"><expr pos:start="5195:58" pos:end="5195:61"><name pos:start="5195:58" pos:end="5195:61">insn</name></expr></argument>, <argument pos:start="5195:64" pos:end="5195:65"><expr pos:start="5195:64" pos:end="5195:65"><name pos:start="5195:64" pos:end="5195:65">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="5197:21" pos:end="5200:0">break;</break>

<cpp:else pos:start="5199:1" pos:end="5199:5">#<cpp:directive pos:start="5199:2" pos:end="5199:5">else</cpp:directive></cpp:else>

                <case pos:start="5201:17" pos:end="5201:26">case <expr pos:start="5201:22" pos:end="5201:25"><literal type="number" pos:start="5201:22" pos:end="5201:25">0x34</literal></expr>:</case> <comment type="block" pos:start="5201:28" pos:end="5201:36">/* stc */</comment>

                <case pos:start="5203:17" pos:end="5203:26">case <expr pos:start="5203:22" pos:end="5203:25"><literal type="number" pos:start="5203:22" pos:end="5203:25">0x35</literal></expr>:</case> <comment type="block" pos:start="5203:28" pos:end="5203:38">/* stcsr */</comment>

                <case pos:start="5205:17" pos:end="5205:26">case <expr pos:start="5205:22" pos:end="5205:25"><literal type="number" pos:start="5205:22" pos:end="5205:25">0x36</literal></expr>:</case> <comment type="block" pos:start="5205:28" pos:end="5205:38">/* stdcq */</comment>

                <case pos:start="5207:17" pos:end="5207:26">case <expr pos:start="5207:22" pos:end="5207:25"><literal type="number" pos:start="5207:22" pos:end="5207:25">0x37</literal></expr>:</case> <comment type="block" pos:start="5207:28" pos:end="5207:37">/* stdc */</comment>

                    <goto pos:start="5209:21" pos:end="5212:0">goto <name pos:start="5209:26" pos:end="5209:33">ncp_insn</name>;</goto>

<cpp:endif pos:start="5211:1" pos:end="5211:6">#<cpp:directive pos:start="5211:2" pos:end="5211:6">endif</cpp:directive></cpp:endif>

                <default pos:start="5213:17" pos:end="5213:24">default:</default>

                    <goto pos:start="5215:21" pos:end="5215:38">goto <name pos:start="5215:26" pos:end="5215:37">illegal_insn</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="5219:15" pos:end="5221:34">else<block type="pseudo" pos:start="5221:17" pos:end="5221:34"><block_content pos:start="5221:17" pos:end="5221:34">

                <goto pos:start="5221:17" pos:end="5221:34">goto <name pos:start="5221:22" pos:end="5221:33">illegal_insn</name>;</goto></block_content></block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="5225:9" pos:end="5225:14">break;</break>

    </block_content>}</block></switch>

    <comment type="block" pos:start="5229:5" pos:end="5229:48">/* default case for non jump instructions */</comment>

    <if_stmt pos:start="5231:5" pos:end="5251:5"><if pos:start="5231:5" pos:end="5237:5">if <condition pos:start="5231:8" pos:end="5231:30">(<expr pos:start="5231:9" pos:end="5231:29"><name pos:start="5231:9" pos:end="5231:15"><name pos:start="5231:9" pos:end="5231:10">dc</name><operator pos:start="5231:11" pos:end="5231:12">-&gt;</operator><name pos:start="5231:13" pos:end="5231:15">npc</name></name> <operator pos:start="5231:17" pos:end="5231:18">==</operator> <name pos:start="5231:20" pos:end="5231:29">DYNAMIC_PC</name></expr>)</condition> <block pos:start="5231:32" pos:end="5237:5">{<block_content pos:start="5233:9" pos:end="5235:27">

        <expr_stmt pos:start="5233:9" pos:end="5233:28"><expr pos:start="5233:9" pos:end="5233:27"><name pos:start="5233:9" pos:end="5233:14"><name pos:start="5233:9" pos:end="5233:10">dc</name><operator pos:start="5233:11" pos:end="5233:12">-&gt;</operator><name pos:start="5233:13" pos:end="5233:14">pc</name></name> <operator pos:start="5233:16" pos:end="5233:16">=</operator> <name pos:start="5233:18" pos:end="5233:27">DYNAMIC_PC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="5235:9" pos:end="5235:27"><expr pos:start="5235:9" pos:end="5235:26"><call pos:start="5235:9" pos:end="5235:26"><name pos:start="5235:9" pos:end="5235:24">gen_op_next_insn</name><argument_list pos:start="5235:25" pos:end="5235:26">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="5237:7" pos:end="5245:5">else if <condition pos:start="5237:15" pos:end="5237:34">(<expr pos:start="5237:16" pos:end="5237:33"><name pos:start="5237:16" pos:end="5237:22"><name pos:start="5237:16" pos:end="5237:17">dc</name><operator pos:start="5237:18" pos:end="5237:19">-&gt;</operator><name pos:start="5237:20" pos:end="5237:22">npc</name></name> <operator pos:start="5237:24" pos:end="5237:25">==</operator> <name pos:start="5237:27" pos:end="5237:33">JUMP_PC</name></expr>)</condition> <block pos:start="5237:36" pos:end="5245:5">{<block_content pos:start="5241:9" pos:end="5243:22">

        <comment type="block" pos:start="5239:9" pos:end="5239:37">/* we can do a static jump */</comment>

        <expr_stmt pos:start="5241:9" pos:end="5241:66"><expr pos:start="5241:9" pos:end="5241:65"><call pos:start="5241:9" pos:end="5241:65"><name pos:start="5241:9" pos:end="5241:19">gen_branch2</name><argument_list pos:start="5241:20" pos:end="5241:65">(<argument pos:start="5241:21" pos:end="5241:22"><expr pos:start="5241:21" pos:end="5241:22"><name pos:start="5241:21" pos:end="5241:22">dc</name></expr></argument>, <argument pos:start="5241:25" pos:end="5241:38"><expr pos:start="5241:25" pos:end="5241:38"><name pos:start="5241:25" pos:end="5241:38"><name pos:start="5241:25" pos:end="5241:26">dc</name><operator pos:start="5241:27" pos:end="5241:28">-&gt;</operator><name pos:start="5241:29" pos:end="5241:35">jump_pc</name><index pos:start="5241:36" pos:end="5241:38">[<expr pos:start="5241:37" pos:end="5241:37"><literal type="number" pos:start="5241:37" pos:end="5241:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="5241:41" pos:end="5241:54"><expr pos:start="5241:41" pos:end="5241:54"><name pos:start="5241:41" pos:end="5241:54"><name pos:start="5241:41" pos:end="5241:42">dc</name><operator pos:start="5241:43" pos:end="5241:44">-&gt;</operator><name pos:start="5241:45" pos:end="5241:51">jump_pc</name><index pos:start="5241:52" pos:end="5241:54">[<expr pos:start="5241:53" pos:end="5241:53"><literal type="number" pos:start="5241:53" pos:end="5241:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="5241:57" pos:end="5241:64"><expr pos:start="5241:57" pos:end="5241:64"><name pos:start="5241:57" pos:end="5241:64">cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5243:9" pos:end="5243:22"><expr pos:start="5243:9" pos:end="5243:21"><name pos:start="5243:9" pos:end="5243:17"><name pos:start="5243:9" pos:end="5243:10">dc</name><operator pos:start="5243:11" pos:end="5243:12">-&gt;</operator><name pos:start="5243:13" pos:end="5243:17">is_br</name></name> <operator pos:start="5243:19" pos:end="5243:19">=</operator> <literal type="number" pos:start="5243:21" pos:end="5243:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="5245:7" pos:end="5251:5">else <block pos:start="5245:12" pos:end="5251:5">{<block_content pos:start="5247:9" pos:end="5249:30">

        <expr_stmt pos:start="5247:9" pos:end="5247:25"><expr pos:start="5247:9" pos:end="5247:24"><name pos:start="5247:9" pos:end="5247:14"><name pos:start="5247:9" pos:end="5247:10">dc</name><operator pos:start="5247:11" pos:end="5247:12">-&gt;</operator><name pos:start="5247:13" pos:end="5247:14">pc</name></name> <operator pos:start="5247:16" pos:end="5247:16">=</operator> <name pos:start="5247:18" pos:end="5247:24"><name pos:start="5247:18" pos:end="5247:19">dc</name><operator pos:start="5247:20" pos:end="5247:21">-&gt;</operator><name pos:start="5247:22" pos:end="5247:24">npc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="5249:9" pos:end="5249:30"><expr pos:start="5249:9" pos:end="5249:29"><name pos:start="5249:9" pos:end="5249:15"><name pos:start="5249:9" pos:end="5249:10">dc</name><operator pos:start="5249:11" pos:end="5249:12">-&gt;</operator><name pos:start="5249:13" pos:end="5249:15">npc</name></name> <operator pos:start="5249:17" pos:end="5249:17">=</operator> <name pos:start="5249:19" pos:end="5249:25"><name pos:start="5249:19" pos:end="5249:20">dc</name><operator pos:start="5249:21" pos:end="5249:22">-&gt;</operator><name pos:start="5249:23" pos:end="5249:25">npc</name></name> <operator pos:start="5249:27" pos:end="5249:27">+</operator> <literal type="number" pos:start="5249:29" pos:end="5249:29">4</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

 <label pos:start="5253:2" pos:end="5253:10"><name pos:start="5253:2" pos:end="5253:9">jmp_insn</name>:</label>

    <goto pos:start="5255:5" pos:end="5255:16">goto <name pos:start="5255:10" pos:end="5255:15">egress</name>;</goto>

 <label pos:start="5257:2" pos:end="5257:14"><name pos:start="5257:2" pos:end="5257:13">illegal_insn</name>:</label>

    <block pos:start="5259:5" pos:end="5275:5">{<block_content pos:start="5261:9" pos:end="5273:22">

        <decl_stmt pos:start="5261:9" pos:end="5261:25"><decl pos:start="5261:9" pos:end="5261:24"><type pos:start="5261:9" pos:end="5261:16"><name pos:start="5261:9" pos:end="5261:16">TCGv_i32</name></type> <name pos:start="5261:18" pos:end="5261:24">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5265:9" pos:end="5265:23"><expr pos:start="5265:9" pos:end="5265:22"><call pos:start="5265:9" pos:end="5265:22"><name pos:start="5265:9" pos:end="5265:18">save_state</name><argument_list pos:start="5265:19" pos:end="5265:22">(<argument pos:start="5265:20" pos:end="5265:21"><expr pos:start="5265:20" pos:end="5265:21"><name pos:start="5265:20" pos:end="5265:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5267:9" pos:end="5267:45"><expr pos:start="5267:9" pos:end="5267:44"><name pos:start="5267:9" pos:end="5267:15">r_const</name> <operator pos:start="5267:17" pos:end="5267:17">=</operator> <call pos:start="5267:19" pos:end="5267:44"><name pos:start="5267:19" pos:end="5267:31">tcg_const_i32</name><argument_list pos:start="5267:32" pos:end="5267:44">(<argument pos:start="5267:33" pos:end="5267:43"><expr pos:start="5267:33" pos:end="5267:43"><name pos:start="5267:33" pos:end="5267:43">TT_ILL_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5269:9" pos:end="5269:53"><expr pos:start="5269:9" pos:end="5269:52"><call pos:start="5269:9" pos:end="5269:52"><name pos:start="5269:9" pos:end="5269:34">gen_helper_raise_exception</name><argument_list pos:start="5269:35" pos:end="5269:52">(<argument pos:start="5269:36" pos:end="5269:42"><expr pos:start="5269:36" pos:end="5269:42"><name pos:start="5269:36" pos:end="5269:42">cpu_env</name></expr></argument>, <argument pos:start="5269:45" pos:end="5269:51"><expr pos:start="5269:45" pos:end="5269:51"><name pos:start="5269:45" pos:end="5269:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5271:9" pos:end="5271:35"><expr pos:start="5271:9" pos:end="5271:34"><call pos:start="5271:9" pos:end="5271:34"><name pos:start="5271:9" pos:end="5271:25">tcg_temp_free_i32</name><argument_list pos:start="5271:26" pos:end="5271:34">(<argument pos:start="5271:27" pos:end="5271:33"><expr pos:start="5271:27" pos:end="5271:33"><name pos:start="5271:27" pos:end="5271:33">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5273:9" pos:end="5273:22"><expr pos:start="5273:9" pos:end="5273:21"><name pos:start="5273:9" pos:end="5273:17"><name pos:start="5273:9" pos:end="5273:10">dc</name><operator pos:start="5273:11" pos:end="5273:12">-&gt;</operator><name pos:start="5273:13" pos:end="5273:17">is_br</name></name> <operator pos:start="5273:19" pos:end="5273:19">=</operator> <literal type="number" pos:start="5273:21" pos:end="5273:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5277:5" pos:end="5277:16">goto <name pos:start="5277:10" pos:end="5277:15">egress</name>;</goto>

 <label pos:start="5279:2" pos:end="5279:13"><name pos:start="5279:2" pos:end="5279:12">unimp_flush</name>:</label>

    <block pos:start="5281:5" pos:end="5297:5">{<block_content pos:start="5283:9" pos:end="5295:22">

        <decl_stmt pos:start="5283:9" pos:end="5283:25"><decl pos:start="5283:9" pos:end="5283:24"><type pos:start="5283:9" pos:end="5283:16"><name pos:start="5283:9" pos:end="5283:16">TCGv_i32</name></type> <name pos:start="5283:18" pos:end="5283:24">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5287:9" pos:end="5287:23"><expr pos:start="5287:9" pos:end="5287:22"><call pos:start="5287:9" pos:end="5287:22"><name pos:start="5287:9" pos:end="5287:18">save_state</name><argument_list pos:start="5287:19" pos:end="5287:22">(<argument pos:start="5287:20" pos:end="5287:21"><expr pos:start="5287:20" pos:end="5287:21"><name pos:start="5287:20" pos:end="5287:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5289:9" pos:end="5289:48"><expr pos:start="5289:9" pos:end="5289:47"><name pos:start="5289:9" pos:end="5289:15">r_const</name> <operator pos:start="5289:17" pos:end="5289:17">=</operator> <call pos:start="5289:19" pos:end="5289:47"><name pos:start="5289:19" pos:end="5289:31">tcg_const_i32</name><argument_list pos:start="5289:32" pos:end="5289:47">(<argument pos:start="5289:33" pos:end="5289:46"><expr pos:start="5289:33" pos:end="5289:46"><name pos:start="5289:33" pos:end="5289:46">TT_UNIMP_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5291:9" pos:end="5291:53"><expr pos:start="5291:9" pos:end="5291:52"><call pos:start="5291:9" pos:end="5291:52"><name pos:start="5291:9" pos:end="5291:34">gen_helper_raise_exception</name><argument_list pos:start="5291:35" pos:end="5291:52">(<argument pos:start="5291:36" pos:end="5291:42"><expr pos:start="5291:36" pos:end="5291:42"><name pos:start="5291:36" pos:end="5291:42">cpu_env</name></expr></argument>, <argument pos:start="5291:45" pos:end="5291:51"><expr pos:start="5291:45" pos:end="5291:51"><name pos:start="5291:45" pos:end="5291:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5293:9" pos:end="5293:35"><expr pos:start="5293:9" pos:end="5293:34"><call pos:start="5293:9" pos:end="5293:34"><name pos:start="5293:9" pos:end="5293:25">tcg_temp_free_i32</name><argument_list pos:start="5293:26" pos:end="5293:34">(<argument pos:start="5293:27" pos:end="5293:33"><expr pos:start="5293:27" pos:end="5293:33"><name pos:start="5293:27" pos:end="5293:33">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5295:9" pos:end="5295:22"><expr pos:start="5295:9" pos:end="5295:21"><name pos:start="5295:9" pos:end="5295:17"><name pos:start="5295:9" pos:end="5295:10">dc</name><operator pos:start="5295:11" pos:end="5295:12">-&gt;</operator><name pos:start="5295:13" pos:end="5295:17">is_br</name></name> <operator pos:start="5295:19" pos:end="5295:19">=</operator> <literal type="number" pos:start="5295:21" pos:end="5295:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5299:5" pos:end="5302:0">goto <name pos:start="5299:10" pos:end="5299:15">egress</name>;</goto>

<cpp:if pos:start="5301:1" pos:end="5301:30">#<cpp:directive pos:start="5301:2" pos:end="5301:3">if</cpp:directive> <expr pos:start="5301:5" pos:end="5301:30"><operator pos:start="5301:5" pos:end="5301:5">!</operator><call pos:start="5301:6" pos:end="5301:30"><name pos:start="5301:6" pos:end="5301:12">defined</name><argument_list pos:start="5301:13" pos:end="5301:30">(<argument pos:start="5301:14" pos:end="5301:29"><expr pos:start="5301:14" pos:end="5301:29"><name pos:start="5301:14" pos:end="5301:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

 <label pos:start="5303:2" pos:end="5303:11"><name pos:start="5303:2" pos:end="5303:10">priv_insn</name>:</label>

    <block pos:start="5305:5" pos:end="5321:5">{<block_content pos:start="5307:9" pos:end="5319:22">

        <decl_stmt pos:start="5307:9" pos:end="5307:25"><decl pos:start="5307:9" pos:end="5307:24"><type pos:start="5307:9" pos:end="5307:16"><name pos:start="5307:9" pos:end="5307:16">TCGv_i32</name></type> <name pos:start="5307:18" pos:end="5307:24">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5311:9" pos:end="5311:23"><expr pos:start="5311:9" pos:end="5311:22"><call pos:start="5311:9" pos:end="5311:22"><name pos:start="5311:9" pos:end="5311:18">save_state</name><argument_list pos:start="5311:19" pos:end="5311:22">(<argument pos:start="5311:20" pos:end="5311:21"><expr pos:start="5311:20" pos:end="5311:21"><name pos:start="5311:20" pos:end="5311:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5313:9" pos:end="5313:46"><expr pos:start="5313:9" pos:end="5313:45"><name pos:start="5313:9" pos:end="5313:15">r_const</name> <operator pos:start="5313:17" pos:end="5313:17">=</operator> <call pos:start="5313:19" pos:end="5313:45"><name pos:start="5313:19" pos:end="5313:31">tcg_const_i32</name><argument_list pos:start="5313:32" pos:end="5313:45">(<argument pos:start="5313:33" pos:end="5313:44"><expr pos:start="5313:33" pos:end="5313:44"><name pos:start="5313:33" pos:end="5313:44">TT_PRIV_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5315:9" pos:end="5315:53"><expr pos:start="5315:9" pos:end="5315:52"><call pos:start="5315:9" pos:end="5315:52"><name pos:start="5315:9" pos:end="5315:34">gen_helper_raise_exception</name><argument_list pos:start="5315:35" pos:end="5315:52">(<argument pos:start="5315:36" pos:end="5315:42"><expr pos:start="5315:36" pos:end="5315:42"><name pos:start="5315:36" pos:end="5315:42">cpu_env</name></expr></argument>, <argument pos:start="5315:45" pos:end="5315:51"><expr pos:start="5315:45" pos:end="5315:51"><name pos:start="5315:45" pos:end="5315:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5317:9" pos:end="5317:35"><expr pos:start="5317:9" pos:end="5317:34"><call pos:start="5317:9" pos:end="5317:34"><name pos:start="5317:9" pos:end="5317:25">tcg_temp_free_i32</name><argument_list pos:start="5317:26" pos:end="5317:34">(<argument pos:start="5317:27" pos:end="5317:33"><expr pos:start="5317:27" pos:end="5317:33"><name pos:start="5317:27" pos:end="5317:33">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5319:9" pos:end="5319:22"><expr pos:start="5319:9" pos:end="5319:21"><name pos:start="5319:9" pos:end="5319:17"><name pos:start="5319:9" pos:end="5319:10">dc</name><operator pos:start="5319:11" pos:end="5319:12">-&gt;</operator><name pos:start="5319:13" pos:end="5319:17">is_br</name></name> <operator pos:start="5319:19" pos:end="5319:19">=</operator> <literal type="number" pos:start="5319:21" pos:end="5319:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5323:5" pos:end="5326:0">goto <name pos:start="5323:10" pos:end="5323:15">egress</name>;</goto>

<cpp:endif pos:start="5325:1" pos:end="5325:6">#<cpp:directive pos:start="5325:2" pos:end="5325:6">endif</cpp:directive></cpp:endif>

 <label pos:start="5327:2" pos:end="5327:11"><name pos:start="5327:2" pos:end="5327:10">nfpu_insn</name>:</label>

    <expr_stmt pos:start="5329:5" pos:end="5329:19"><expr pos:start="5329:5" pos:end="5329:18"><call pos:start="5329:5" pos:end="5329:18"><name pos:start="5329:5" pos:end="5329:14">save_state</name><argument_list pos:start="5329:15" pos:end="5329:18">(<argument pos:start="5329:16" pos:end="5329:17"><expr pos:start="5329:16" pos:end="5329:17"><name pos:start="5329:16" pos:end="5329:17">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5331:5" pos:end="5331:45"><expr pos:start="5331:5" pos:end="5331:44"><call pos:start="5331:5" pos:end="5331:44"><name pos:start="5331:5" pos:end="5331:25">gen_op_fpexception_im</name><argument_list pos:start="5331:26" pos:end="5331:44">(<argument pos:start="5331:27" pos:end="5331:43"><expr pos:start="5331:27" pos:end="5331:43"><name pos:start="5331:27" pos:end="5331:43">FSR_FTT_UNIMPFPOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5333:5" pos:end="5333:18"><expr pos:start="5333:5" pos:end="5333:17"><name pos:start="5333:5" pos:end="5333:13"><name pos:start="5333:5" pos:end="5333:6">dc</name><operator pos:start="5333:7" pos:end="5333:8">-&gt;</operator><name pos:start="5333:9" pos:end="5333:13">is_br</name></name> <operator pos:start="5333:15" pos:end="5333:15">=</operator> <literal type="number" pos:start="5333:17" pos:end="5333:17">1</literal></expr>;</expr_stmt>

    <goto pos:start="5335:5" pos:end="5338:0">goto <name pos:start="5335:10" pos:end="5335:15">egress</name>;</goto>

<cpp:if pos:start="5337:1" pos:end="5337:58">#<cpp:directive pos:start="5337:2" pos:end="5337:3">if</cpp:directive> <expr pos:start="5337:5" pos:end="5337:58"><operator pos:start="5337:5" pos:end="5337:5">!</operator><call pos:start="5337:6" pos:end="5337:30"><name pos:start="5337:6" pos:end="5337:12">defined</name><argument_list pos:start="5337:13" pos:end="5337:30">(<argument pos:start="5337:14" pos:end="5337:29"><expr pos:start="5337:14" pos:end="5337:29"><name pos:start="5337:14" pos:end="5337:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call> <operator pos:start="5337:32" pos:end="5337:33">&amp;&amp;</operator> <operator pos:start="5337:35" pos:end="5337:35">!</operator><call pos:start="5337:36" pos:end="5337:58"><name pos:start="5337:36" pos:end="5337:42">defined</name><argument_list pos:start="5337:43" pos:end="5337:58">(<argument pos:start="5337:44" pos:end="5337:57"><expr pos:start="5337:44" pos:end="5337:57"><name pos:start="5337:44" pos:end="5337:57">TARGET_SPARC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

 <label pos:start="5339:2" pos:end="5339:10"><name pos:start="5339:2" pos:end="5339:9">nfq_insn</name>:</label>

    <expr_stmt pos:start="5341:5" pos:end="5341:19"><expr pos:start="5341:5" pos:end="5341:18"><call pos:start="5341:5" pos:end="5341:18"><name pos:start="5341:5" pos:end="5341:14">save_state</name><argument_list pos:start="5341:15" pos:end="5341:18">(<argument pos:start="5341:16" pos:end="5341:17"><expr pos:start="5341:16" pos:end="5341:17"><name pos:start="5341:16" pos:end="5341:17">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5343:5" pos:end="5343:45"><expr pos:start="5343:5" pos:end="5343:44"><call pos:start="5343:5" pos:end="5343:44"><name pos:start="5343:5" pos:end="5343:25">gen_op_fpexception_im</name><argument_list pos:start="5343:26" pos:end="5343:44">(<argument pos:start="5343:27" pos:end="5343:43"><expr pos:start="5343:27" pos:end="5343:43"><name pos:start="5343:27" pos:end="5343:43">FSR_FTT_SEQ_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5345:5" pos:end="5345:18"><expr pos:start="5345:5" pos:end="5345:17"><name pos:start="5345:5" pos:end="5345:13"><name pos:start="5345:5" pos:end="5345:6">dc</name><operator pos:start="5345:7" pos:end="5345:8">-&gt;</operator><name pos:start="5345:9" pos:end="5345:13">is_br</name></name> <operator pos:start="5345:15" pos:end="5345:15">=</operator> <literal type="number" pos:start="5345:17" pos:end="5345:17">1</literal></expr>;</expr_stmt>

    <goto pos:start="5347:5" pos:end="5352:0">goto <name pos:start="5347:10" pos:end="5347:15">egress</name>;</goto>

<cpp:endif pos:start="5349:1" pos:end="5349:6">#<cpp:directive pos:start="5349:2" pos:end="5349:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="5351:1" pos:end="5351:22">#<cpp:directive pos:start="5351:2" pos:end="5351:7">ifndef</cpp:directive> <name pos:start="5351:9" pos:end="5351:22">TARGET_SPARC64</name></cpp:ifndef>

 <label pos:start="5353:2" pos:end="5353:10"><name pos:start="5353:2" pos:end="5353:9">ncp_insn</name>:</label>

    <block pos:start="5355:5" pos:end="5371:5">{<block_content pos:start="5357:9" pos:end="5369:22">

        <decl_stmt pos:start="5357:9" pos:end="5357:21"><decl pos:start="5357:9" pos:end="5357:20"><type pos:start="5357:9" pos:end="5357:12"><name pos:start="5357:9" pos:end="5357:12">TCGv</name></type> <name pos:start="5357:14" pos:end="5357:20">r_const</name></decl>;</decl_stmt>



        <expr_stmt pos:start="5361:9" pos:end="5361:23"><expr pos:start="5361:9" pos:end="5361:22"><call pos:start="5361:9" pos:end="5361:22"><name pos:start="5361:9" pos:end="5361:18">save_state</name><argument_list pos:start="5361:19" pos:end="5361:22">(<argument pos:start="5361:20" pos:end="5361:21"><expr pos:start="5361:20" pos:end="5361:21"><name pos:start="5361:20" pos:end="5361:21">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5363:9" pos:end="5363:45"><expr pos:start="5363:9" pos:end="5363:44"><name pos:start="5363:9" pos:end="5363:15">r_const</name> <operator pos:start="5363:17" pos:end="5363:17">=</operator> <call pos:start="5363:19" pos:end="5363:44"><name pos:start="5363:19" pos:end="5363:31">tcg_const_i32</name><argument_list pos:start="5363:32" pos:end="5363:44">(<argument pos:start="5363:33" pos:end="5363:43"><expr pos:start="5363:33" pos:end="5363:43"><name pos:start="5363:33" pos:end="5363:43">TT_NCP_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5365:9" pos:end="5365:53"><expr pos:start="5365:9" pos:end="5365:52"><call pos:start="5365:9" pos:end="5365:52"><name pos:start="5365:9" pos:end="5365:34">gen_helper_raise_exception</name><argument_list pos:start="5365:35" pos:end="5365:52">(<argument pos:start="5365:36" pos:end="5365:42"><expr pos:start="5365:36" pos:end="5365:42"><name pos:start="5365:36" pos:end="5365:42">cpu_env</name></expr></argument>, <argument pos:start="5365:45" pos:end="5365:51"><expr pos:start="5365:45" pos:end="5365:51"><name pos:start="5365:45" pos:end="5365:51">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5367:9" pos:end="5367:31"><expr pos:start="5367:9" pos:end="5367:30"><call pos:start="5367:9" pos:end="5367:30"><name pos:start="5367:9" pos:end="5367:21">tcg_temp_free</name><argument_list pos:start="5367:22" pos:end="5367:30">(<argument pos:start="5367:23" pos:end="5367:29"><expr pos:start="5367:23" pos:end="5367:29"><name pos:start="5367:23" pos:end="5367:29">r_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="5369:9" pos:end="5369:22"><expr pos:start="5369:9" pos:end="5369:21"><name pos:start="5369:9" pos:end="5369:17"><name pos:start="5369:9" pos:end="5369:10">dc</name><operator pos:start="5369:11" pos:end="5369:12">-&gt;</operator><name pos:start="5369:13" pos:end="5369:17">is_br</name></name> <operator pos:start="5369:19" pos:end="5369:19">=</operator> <literal type="number" pos:start="5369:21" pos:end="5369:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <goto pos:start="5373:5" pos:end="5376:0">goto <name pos:start="5373:10" pos:end="5373:15">egress</name>;</goto>

<cpp:endif pos:start="5375:1" pos:end="5375:6">#<cpp:directive pos:start="5375:2" pos:end="5375:6">endif</cpp:directive></cpp:endif>

 <label pos:start="5377:2" pos:end="5377:8"><name pos:start="5377:2" pos:end="5377:7">egress</name>:</label>

    <expr_stmt pos:start="5379:5" pos:end="5379:28"><expr pos:start="5379:5" pos:end="5379:27"><call pos:start="5379:5" pos:end="5379:27"><name pos:start="5379:5" pos:end="5379:17">tcg_temp_free</name><argument_list pos:start="5379:18" pos:end="5379:27">(<argument pos:start="5379:19" pos:end="5379:26"><expr pos:start="5379:19" pos:end="5379:26"><name pos:start="5379:19" pos:end="5379:26">cpu_tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="5381:5" pos:end="5381:28"><expr pos:start="5381:5" pos:end="5381:27"><call pos:start="5381:5" pos:end="5381:27"><name pos:start="5381:5" pos:end="5381:17">tcg_temp_free</name><argument_list pos:start="5381:18" pos:end="5381:27">(<argument pos:start="5381:19" pos:end="5381:26"><expr pos:start="5381:19" pos:end="5381:26"><name pos:start="5381:19" pos:end="5381:26">cpu_tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="5383:5" pos:end="5395:5"><if pos:start="5383:5" pos:end="5395:5">if <condition pos:start="5383:8" pos:end="5383:23">(<expr pos:start="5383:9" pos:end="5383:22"><name pos:start="5383:9" pos:end="5383:17"><name pos:start="5383:9" pos:end="5383:10">dc</name><operator pos:start="5383:11" pos:end="5383:12">-&gt;</operator><name pos:start="5383:13" pos:end="5383:17">n_t32</name></name> <operator pos:start="5383:19" pos:end="5383:20">!=</operator> <literal type="number" pos:start="5383:22" pos:end="5383:22">0</literal></expr>)</condition> <block pos:start="5383:25" pos:end="5395:5">{<block_content pos:start="5385:9" pos:end="5393:22">

        <decl_stmt pos:start="5385:9" pos:end="5385:14"><decl pos:start="5385:9" pos:end="5385:13"><type pos:start="5385:9" pos:end="5385:11"><name pos:start="5385:9" pos:end="5385:11">int</name></type> <name pos:start="5385:13" pos:end="5385:13">i</name></decl>;</decl_stmt>

        <for pos:start="5387:9" pos:end="5391:9">for <control pos:start="5387:13" pos:end="5387:44">(<init pos:start="5387:14" pos:end="5387:31"><expr pos:start="5387:14" pos:end="5387:30"><name pos:start="5387:14" pos:end="5387:14">i</name> <operator pos:start="5387:16" pos:end="5387:16">=</operator> <name pos:start="5387:18" pos:end="5387:26"><name pos:start="5387:18" pos:end="5387:19">dc</name><operator pos:start="5387:20" pos:end="5387:21">-&gt;</operator><name pos:start="5387:22" pos:end="5387:26">n_t32</name></name> <operator pos:start="5387:28" pos:end="5387:28">-</operator> <literal type="number" pos:start="5387:30" pos:end="5387:30">1</literal></expr>;</init> <condition pos:start="5387:33" pos:end="5387:39"><expr pos:start="5387:33" pos:end="5387:38"><name pos:start="5387:33" pos:end="5387:33">i</name> <operator pos:start="5387:35" pos:end="5387:36">&gt;=</operator> <literal type="number" pos:start="5387:38" pos:end="5387:38">0</literal></expr>;</condition> <incr pos:start="5387:41" pos:end="5387:43"><expr pos:start="5387:41" pos:end="5387:43"><operator pos:start="5387:41" pos:end="5387:42">--</operator><name pos:start="5387:43" pos:end="5387:43">i</name></expr></incr>)</control> <block pos:start="5387:46" pos:end="5391:9">{<block_content pos:start="5389:13" pos:end="5389:42">

            <expr_stmt pos:start="5389:13" pos:end="5389:42"><expr pos:start="5389:13" pos:end="5389:41"><call pos:start="5389:13" pos:end="5389:41"><name pos:start="5389:13" pos:end="5389:29">tcg_temp_free_i32</name><argument_list pos:start="5389:30" pos:end="5389:41">(<argument pos:start="5389:31" pos:end="5389:40"><expr pos:start="5389:31" pos:end="5389:40"><name pos:start="5389:31" pos:end="5389:40"><name pos:start="5389:31" pos:end="5389:32">dc</name><operator pos:start="5389:33" pos:end="5389:34">-&gt;</operator><name pos:start="5389:35" pos:end="5389:37">t32</name><index pos:start="5389:38" pos:end="5389:40">[<expr pos:start="5389:39" pos:end="5389:39"><name pos:start="5389:39" pos:end="5389:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="5393:9" pos:end="5393:22"><expr pos:start="5393:9" pos:end="5393:21"><name pos:start="5393:9" pos:end="5393:17"><name pos:start="5393:9" pos:end="5393:10">dc</name><operator pos:start="5393:11" pos:end="5393:12">-&gt;</operator><name pos:start="5393:13" pos:end="5393:17">n_t32</name></name> <operator pos:start="5393:19" pos:end="5393:19">=</operator> <literal type="number" pos:start="5393:21" pos:end="5393:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="5397:5" pos:end="5409:5"><if pos:start="5397:5" pos:end="5409:5">if <condition pos:start="5397:8" pos:end="5397:23">(<expr pos:start="5397:9" pos:end="5397:22"><name pos:start="5397:9" pos:end="5397:17"><name pos:start="5397:9" pos:end="5397:10">dc</name><operator pos:start="5397:11" pos:end="5397:12">-&gt;</operator><name pos:start="5397:13" pos:end="5397:17">n_ttl</name></name> <operator pos:start="5397:19" pos:end="5397:20">!=</operator> <literal type="number" pos:start="5397:22" pos:end="5397:22">0</literal></expr>)</condition> <block pos:start="5397:25" pos:end="5409:5">{<block_content pos:start="5399:9" pos:end="5407:22">

        <decl_stmt pos:start="5399:9" pos:end="5399:14"><decl pos:start="5399:9" pos:end="5399:13"><type pos:start="5399:9" pos:end="5399:11"><name pos:start="5399:9" pos:end="5399:11">int</name></type> <name pos:start="5399:13" pos:end="5399:13">i</name></decl>;</decl_stmt>

        <for pos:start="5401:9" pos:end="5405:9">for <control pos:start="5401:13" pos:end="5401:44">(<init pos:start="5401:14" pos:end="5401:31"><expr pos:start="5401:14" pos:end="5401:30"><name pos:start="5401:14" pos:end="5401:14">i</name> <operator pos:start="5401:16" pos:end="5401:16">=</operator> <name pos:start="5401:18" pos:end="5401:26"><name pos:start="5401:18" pos:end="5401:19">dc</name><operator pos:start="5401:20" pos:end="5401:21">-&gt;</operator><name pos:start="5401:22" pos:end="5401:26">n_ttl</name></name> <operator pos:start="5401:28" pos:end="5401:28">-</operator> <literal type="number" pos:start="5401:30" pos:end="5401:30">1</literal></expr>;</init> <condition pos:start="5401:33" pos:end="5401:39"><expr pos:start="5401:33" pos:end="5401:38"><name pos:start="5401:33" pos:end="5401:33">i</name> <operator pos:start="5401:35" pos:end="5401:36">&gt;=</operator> <literal type="number" pos:start="5401:38" pos:end="5401:38">0</literal></expr>;</condition> <incr pos:start="5401:41" pos:end="5401:43"><expr pos:start="5401:41" pos:end="5401:43"><operator pos:start="5401:41" pos:end="5401:42">--</operator><name pos:start="5401:43" pos:end="5401:43">i</name></expr></incr>)</control> <block pos:start="5401:46" pos:end="5405:9">{<block_content pos:start="5403:13" pos:end="5403:38">

            <expr_stmt pos:start="5403:13" pos:end="5403:38"><expr pos:start="5403:13" pos:end="5403:37"><call pos:start="5403:13" pos:end="5403:37"><name pos:start="5403:13" pos:end="5403:25">tcg_temp_free</name><argument_list pos:start="5403:26" pos:end="5403:37">(<argument pos:start="5403:27" pos:end="5403:36"><expr pos:start="5403:27" pos:end="5403:36"><name pos:start="5403:27" pos:end="5403:36"><name pos:start="5403:27" pos:end="5403:28">dc</name><operator pos:start="5403:29" pos:end="5403:30">-&gt;</operator><name pos:start="5403:31" pos:end="5403:33">ttl</name><index pos:start="5403:34" pos:end="5403:36">[<expr pos:start="5403:35" pos:end="5403:35"><name pos:start="5403:35" pos:end="5403:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="5407:9" pos:end="5407:22"><expr pos:start="5407:9" pos:end="5407:21"><name pos:start="5407:9" pos:end="5407:17"><name pos:start="5407:9" pos:end="5407:10">dc</name><operator pos:start="5407:11" pos:end="5407:12">-&gt;</operator><name pos:start="5407:13" pos:end="5407:17">n_ttl</name></name> <operator pos:start="5407:19" pos:end="5407:19">=</operator> <literal type="number" pos:start="5407:21" pos:end="5407:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
