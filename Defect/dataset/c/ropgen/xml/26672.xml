<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26672.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">sys_write</name><parameter_list pos:start="1:22" pos:end="3:52">(<parameter pos:start="1:23" pos:end="1:34"><decl pos:start="1:23" pos:end="1:34"><type pos:start="1:23" pos:end="1:34"><name pos:start="1:23" pos:end="1:26">void</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:34">opaque</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:47"><decl pos:start="1:37" pos:end="1:47"><type pos:start="1:37" pos:end="1:47"><name pos:start="1:37" pos:end="1:42">hwaddr</name></type> <name pos:start="1:44" pos:end="1:47">addr</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:36"><decl pos:start="3:23" pos:end="3:36"><type pos:start="3:23" pos:end="3:36"><name pos:start="3:23" pos:end="3:30">uint64_t</name></type> <name pos:start="3:32" pos:end="3:36">value</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:46">unsigned</name></type> <name pos:start="3:48" pos:end="3:51">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">LM32SysState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:18">testname</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><call pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:31">trace_lm32_sys_memory_write</name><argument_list pos:start="13:32" pos:end="13:44">(<argument pos:start="13:33" pos:end="13:36"><expr pos:start="13:33" pos:end="13:36"><name pos:start="13:33" pos:end="13:36">addr</name></expr></argument>, <argument pos:start="13:39" pos:end="13:43"><expr pos:start="13:39" pos:end="13:43"><name pos:start="13:39" pos:end="13:43">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:8">addr</name> <operator pos:start="17:10" pos:end="17:12">&gt;&gt;=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="19:5" pos:end="55:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition> <block pos:start="19:19" pos:end="55:5">{<block_content pos:start="21:5" pos:end="53:14">

    <case pos:start="21:5" pos:end="21:16">case <expr pos:start="21:10" pos:end="21:15"><name pos:start="21:10" pos:end="21:15">R_CTRL</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:36">qemu_system_shutdown_request</name><argument_list pos:start="23:37" pos:end="23:38">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:20">case <expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:19">R_PASSFAIL</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:15">regs</name><index pos:start="29:16" pos:end="29:21">[<expr pos:start="29:17" pos:end="29:20"><name pos:start="29:17" pos:end="29:20">addr</name></expr>]</index></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:29">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:16">testname</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">(</operator><name pos:start="31:21" pos:end="31:24">char</name> <operator pos:start="31:26" pos:end="31:26">*</operator><operator pos:start="31:27" pos:end="31:27">)</operator><name pos:start="31:28" pos:end="31:38"><name pos:start="31:28" pos:end="31:28">s</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:38">testname</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:72"><expr pos:start="33:9" pos:end="33:71"><call pos:start="33:9" pos:end="33:71"><name pos:start="33:9" pos:end="33:16">qemu_log</name><argument_list pos:start="33:17" pos:end="33:71">(<argument pos:start="33:18" pos:end="33:33"><expr pos:start="33:18" pos:end="33:33"><literal type="string" pos:start="33:18" pos:end="33:33">"TC  %-16s %s\n"</literal></expr></argument>, <argument pos:start="33:36" pos:end="33:43"><expr pos:start="33:36" pos:end="33:43"><name pos:start="33:36" pos:end="33:43">testname</name></expr></argument>, <argument pos:start="33:46" pos:end="33:70"><expr pos:start="33:46" pos:end="33:70"><ternary pos:start="33:46" pos:end="33:70"><condition pos:start="33:46" pos:end="33:54"><expr pos:start="33:46" pos:end="33:52"><operator pos:start="33:46" pos:end="33:46">(</operator><name pos:start="33:47" pos:end="33:51">value</name><operator pos:start="33:52" pos:end="33:52">)</operator></expr> ?</condition><then pos:start="33:56" pos:end="33:63"> <expr pos:start="33:56" pos:end="33:63"><literal type="string" pos:start="33:56" pos:end="33:63">"FAILED"</literal></expr> </then><else pos:start="33:65" pos:end="33:70">: <expr pos:start="33:67" pos:end="33:70"><literal type="string" pos:start="33:67" pos:end="33:70">"OK"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:20">case <expr pos:start="37:10" pos:end="37:19"><name pos:start="37:10" pos:end="37:19">R_TESTNAME</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:15">regs</name><index pos:start="39:16" pos:end="39:21">[<expr pos:start="39:17" pos:end="39:20"><name pos:start="39:17" pos:end="39:20">addr</name></expr>]</index></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:29">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:25"><expr pos:start="41:9" pos:end="41:24"><call pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:21">copy_testname</name><argument_list pos:start="41:22" pos:end="41:24">(<argument pos:start="41:23" pos:end="41:23"><expr pos:start="41:23" pos:end="41:23"><name pos:start="41:23" pos:end="41:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <default pos:start="47:5" pos:end="47:12">default:</default>

        <expr_stmt pos:start="49:9" pos:end="51:43"><expr pos:start="49:9" pos:end="51:42"><call pos:start="49:9" pos:end="51:42"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="51:42">(<argument pos:start="49:22" pos:end="51:30"><expr pos:start="49:22" pos:end="51:30"><literal type="string" pos:start="49:22" pos:end="49:68">"lm32_sys: write access to unknown register 0x"</literal>

                <name pos:start="51:17" pos:end="51:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="51:33" pos:end="51:41"><expr pos:start="51:33" pos:end="51:41"><name pos:start="51:33" pos:end="51:36">addr</name> <operator pos:start="51:38" pos:end="51:39">&lt;&lt;</operator> <literal type="number" pos:start="51:41" pos:end="51:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
