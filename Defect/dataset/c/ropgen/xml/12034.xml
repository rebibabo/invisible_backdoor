<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12034.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">update_sr</name> <parameter_list pos:start="1:23" pos:end="1:79">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:36">AC97LinkState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><name pos:start="1:42" pos:end="1:58">AC97BusMasterRegs</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">r</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:78"><decl pos:start="1:64" pos:end="1:78"><type pos:start="1:64" pos:end="1:78"><name pos:start="1:64" pos:end="1:71">uint32_t</name></type> <name pos:start="1:73" pos:end="1:78">new_sr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">event</name> <init pos:start="5:15" pos:end="5:17">= <expr pos:start="5:17" pos:end="5:17"><literal type="number" pos:start="5:17" pos:end="5:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">level</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:21">new_mask</name> <init pos:start="9:23" pos:end="9:44">= <expr pos:start="9:25" pos:end="9:44"><name pos:start="9:25" pos:end="9:30">new_sr</name> <operator pos:start="9:32" pos:end="9:32">&amp;</operator> <name pos:start="9:34" pos:end="9:44">SR_INT_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">old_mask</name> <init pos:start="11:23" pos:end="11:43">= <expr pos:start="11:25" pos:end="11:43"><name pos:start="11:25" pos:end="11:29"><name pos:start="11:25" pos:end="11:25">r</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:29">sr</name></name> <operator pos:start="11:31" pos:end="11:31">&amp;</operator> <name pos:start="11:33" pos:end="11:43">SR_INT_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20"><name pos:start="13:14" pos:end="13:18">masks</name><index pos:start="13:19" pos:end="13:20">[]</index></name> <init pos:start="13:22" pos:end="13:52">= <expr pos:start="13:24" pos:end="13:52"><block pos:start="13:24" pos:end="13:52">{<expr pos:start="13:25" pos:end="13:32"><name pos:start="13:25" pos:end="13:32">GS_PIINT</name></expr>, <expr pos:start="13:35" pos:end="13:42"><name pos:start="13:35" pos:end="13:42">GS_POINT</name></expr>, <expr pos:start="13:45" pos:end="13:51"><name pos:start="13:45" pos:end="13:51">GS_MINT</name></expr>}</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="49:5"><if pos:start="17:5" pos:end="49:5">if <condition pos:start="17:8" pos:end="17:28">(<expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:16">new_mask</name> <operator pos:start="17:18" pos:end="17:18">^</operator> <name pos:start="17:20" pos:end="17:27">old_mask</name></expr>)</condition> <block pos:start="17:30" pos:end="49:5">{<block_content pos:start="21:9" pos:end="47:9">

        <comment type="block" format="doxygen" pos:start="19:9" pos:end="19:79">/** @todo is IRQ deasserted when only one of status bits is cleared? */</comment>

        <if_stmt pos:start="21:9" pos:end="47:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><operator pos:start="21:13" pos:end="21:13">!</operator><name pos:start="21:14" pos:end="21:21">new_mask</name></expr>)</condition> <block pos:start="21:24" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:22">

            <expr_stmt pos:start="23:13" pos:end="23:22"><expr pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:17">event</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:22"><expr pos:start="25:13" pos:end="25:21"><name pos:start="25:13" pos:end="25:17">level</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="29:9" pos:end="47:9">else <block pos:start="29:14" pos:end="47:9">{<block_content pos:start="31:13" pos:end="45:13">

            <if_stmt pos:start="31:13" pos:end="37:13"><if pos:start="31:13" pos:end="37:13">if <condition pos:start="31:16" pos:end="31:60">(<expr pos:start="31:17" pos:end="31:59"><operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:25">new_mask</name> <operator pos:start="31:27" pos:end="31:27">&amp;</operator> <name pos:start="31:29" pos:end="31:36">SR_LVBCI</name><operator pos:start="31:37" pos:end="31:37">)</operator> <operator pos:start="31:39" pos:end="31:40">&amp;&amp;</operator> <operator pos:start="31:42" pos:end="31:42">(</operator><name pos:start="31:43" pos:end="31:47"><name pos:start="31:43" pos:end="31:43">r</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:47">cr</name></name> <operator pos:start="31:49" pos:end="31:49">&amp;</operator> <name pos:start="31:51" pos:end="31:58">CR_LVBIE</name><operator pos:start="31:59" pos:end="31:59">)</operator></expr>)</condition> <block pos:start="31:62" pos:end="37:13">{<block_content pos:start="33:17" pos:end="35:26">

                <expr_stmt pos:start="33:17" pos:end="33:26"><expr pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:21">event</name> <operator pos:start="33:23" pos:end="33:23">=</operator> <literal type="number" pos:start="33:25" pos:end="33:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:26"><expr pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:21">level</name> <operator pos:start="35:23" pos:end="35:23">=</operator> <literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="39:13" pos:end="45:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:58">(<expr pos:start="39:17" pos:end="39:57"><operator pos:start="39:17" pos:end="39:17">(</operator><name pos:start="39:18" pos:end="39:25">new_mask</name> <operator pos:start="39:27" pos:end="39:27">&amp;</operator> <name pos:start="39:29" pos:end="39:35">SR_BCIS</name><operator pos:start="39:36" pos:end="39:36">)</operator> <operator pos:start="39:38" pos:end="39:39">&amp;&amp;</operator> <operator pos:start="39:41" pos:end="39:41">(</operator><name pos:start="39:42" pos:end="39:46"><name pos:start="39:42" pos:end="39:42">r</name><operator pos:start="39:43" pos:end="39:44">-&gt;</operator><name pos:start="39:45" pos:end="39:46">cr</name></name> <operator pos:start="39:48" pos:end="39:48">&amp;</operator> <name pos:start="39:50" pos:end="39:56">CR_IOCE</name><operator pos:start="39:57" pos:end="39:57">)</operator></expr>)</condition> <block pos:start="39:60" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:26">

                <expr_stmt pos:start="41:17" pos:end="41:26"><expr pos:start="41:17" pos:end="41:25"><name pos:start="41:17" pos:end="41:21">event</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:26"><expr pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:21">level</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:19"><expr pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:9"><name pos:start="53:5" pos:end="53:5">r</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:9">sr</name></name> <operator pos:start="53:11" pos:end="53:11">=</operator> <name pos:start="53:13" pos:end="53:18">new_sr</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="63:25"><expr pos:start="57:5" pos:end="63:24"><call pos:start="57:5" pos:end="63:24"><name pos:start="57:5" pos:end="57:9">dolog</name> <argument_list pos:start="57:11" pos:end="63:24">(<argument pos:start="57:12" pos:end="57:51"><expr pos:start="57:12" pos:end="57:51"><literal type="string" pos:start="57:12" pos:end="57:51">"IOC%d LVB%d sr=%#x event=%d level=%d\n"</literal></expr></argument>,

           <argument pos:start="59:12" pos:end="59:26"><expr pos:start="59:12" pos:end="59:26"><name pos:start="59:12" pos:end="59:16"><name pos:start="59:12" pos:end="59:12">r</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:16">sr</name></name> <operator pos:start="59:18" pos:end="59:18">&amp;</operator> <name pos:start="59:20" pos:end="59:26">SR_BCIS</name></expr></argument>, <argument pos:start="59:29" pos:end="59:44"><expr pos:start="59:29" pos:end="59:44"><name pos:start="59:29" pos:end="59:33"><name pos:start="59:29" pos:end="59:29">r</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:33">sr</name></name> <operator pos:start="59:35" pos:end="59:35">&amp;</operator> <name pos:start="59:37" pos:end="59:44">SR_LVBCI</name></expr></argument>,

           <argument pos:start="61:12" pos:end="61:16"><expr pos:start="61:12" pos:end="61:16"><name pos:start="61:12" pos:end="61:16"><name pos:start="61:12" pos:end="61:12">r</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:16">sr</name></name></expr></argument>,

           <argument pos:start="63:12" pos:end="63:16"><expr pos:start="63:12" pos:end="63:16"><name pos:start="63:12" pos:end="63:16">event</name></expr></argument>, <argument pos:start="63:19" pos:end="63:23"><expr pos:start="63:19" pos:end="63:23"><name pos:start="63:19" pos:end="63:23">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="69:15"><if pos:start="67:5" pos:end="69:15">if <condition pos:start="67:8" pos:end="67:15">(<expr pos:start="67:9" pos:end="67:14"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:14">event</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:15"><block_content pos:start="69:9" pos:end="69:15">

        <return pos:start="69:9" pos:end="69:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="91:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:14">(<expr pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13">level</name></expr>)</condition> <block pos:start="73:16" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:45">

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:19">glob_sta</name></name> <operator pos:start="75:21" pos:end="75:22">|=</operator> <name pos:start="75:24" pos:end="75:44"><name pos:start="75:24" pos:end="75:28">masks</name><index pos:start="75:29" pos:end="75:44">[<expr pos:start="75:30" pos:end="75:43"><name pos:start="75:30" pos:end="75:30">r</name> <operator pos:start="75:32" pos:end="75:32">-</operator> <name pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:34">s</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:43">bm_regs</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:36"><expr pos:start="77:9" pos:end="77:35"><call pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:13">dolog</name> <argument_list pos:start="77:15" pos:end="77:35">(<argument pos:start="77:16" pos:end="77:34"><expr pos:start="77:16" pos:end="77:34"><literal type="string" pos:start="77:16" pos:end="77:34">"set irq level=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><call pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:20">qemu_set_irq</name> <argument_list pos:start="79:22" pos:end="79:44">(<argument pos:start="79:23" pos:end="79:40"><expr pos:start="79:23" pos:end="79:40"><name pos:start="79:23" pos:end="79:40"><name pos:start="79:23" pos:end="79:23">s</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:32">pci_dev</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:37">irq</name><index pos:start="79:38" pos:end="79:40">[<expr pos:start="79:39" pos:end="79:39"><literal type="number" pos:start="79:39" pos:end="79:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:43" pos:end="79:43"><expr pos:start="79:43" pos:end="79:43"><literal type="number" pos:start="79:43" pos:end="79:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="83:5" pos:end="91:5">else <block pos:start="83:10" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:45">

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">glob_sta</name></name> <operator pos:start="85:21" pos:end="85:22">&amp;=</operator> <operator pos:start="85:24" pos:end="85:24">~</operator><name pos:start="85:25" pos:end="85:45"><name pos:start="85:25" pos:end="85:29">masks</name><index pos:start="85:30" pos:end="85:45">[<expr pos:start="85:31" pos:end="85:44"><name pos:start="85:31" pos:end="85:31">r</name> <operator pos:start="85:33" pos:end="85:33">-</operator> <name pos:start="85:35" pos:end="85:44"><name pos:start="85:35" pos:end="85:35">s</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:44">bm_regs</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><call pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:13">dolog</name> <argument_list pos:start="87:15" pos:end="87:35">(<argument pos:start="87:16" pos:end="87:34"><expr pos:start="87:16" pos:end="87:34"><literal type="string" pos:start="87:16" pos:end="87:34">"set irq level=0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:45"><expr pos:start="89:9" pos:end="89:44"><call pos:start="89:9" pos:end="89:44"><name pos:start="89:9" pos:end="89:20">qemu_set_irq</name> <argument_list pos:start="89:22" pos:end="89:44">(<argument pos:start="89:23" pos:end="89:40"><expr pos:start="89:23" pos:end="89:40"><name pos:start="89:23" pos:end="89:40"><name pos:start="89:23" pos:end="89:23">s</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:32">pci_dev</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:37">irq</name><index pos:start="89:38" pos:end="89:40">[<expr pos:start="89:39" pos:end="89:39"><literal type="number" pos:start="89:39" pos:end="89:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><literal type="number" pos:start="89:43" pos:end="89:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
