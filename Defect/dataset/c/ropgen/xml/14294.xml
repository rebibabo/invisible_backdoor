<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14294.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">qemu_rdma_registration_stop</name><parameter_list pos:start="1:39" pos:end="3:54">(<parameter pos:start="1:40" pos:end="1:50"><decl pos:start="1:40" pos:end="1:50"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:47">QEMUFile</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">f</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">opaque</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:53"><decl pos:start="3:40" pos:end="3:53"><type pos:start="3:40" pos:end="3:53"><name pos:start="3:40" pos:end="3:47">uint64_t</name></type> <name pos:start="3:49" pos:end="3:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="219:1">{<block_content pos:start="7:5" pos:end="217:15">

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>, <decl pos:start="7:30" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:11"><modifier pos:start="7:30" pos:end="7:30">*</modifier><modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">errp</name> <init pos:start="7:37" pos:end="7:48">= <expr pos:start="7:39" pos:end="7:48"><operator pos:start="7:39" pos:end="7:39">&amp;</operator><name pos:start="7:40" pos:end="7:48">local_err</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">QEMUFileRDMA</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:23">rfile</name> <init pos:start="9:25" pos:end="9:32">= <expr pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">RDMAContext</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">rdma</name> <init pos:start="11:23" pos:end="11:35">= <expr pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:29">rfile</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:35">rdma</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:55"><decl pos:start="13:5" pos:end="13:54"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:21">RDMAControlHeader</name></type> <name pos:start="13:23" pos:end="13:26">head</name> <init pos:start="13:28" pos:end="13:54">= <expr pos:start="13:30" pos:end="13:54"><block pos:start="13:30" pos:end="13:54">{ <expr pos:start="13:32" pos:end="13:39"><operator pos:start="13:32" pos:end="13:32">.</operator><name pos:start="13:33" pos:end="13:35">len</name> <operator pos:start="13:37" pos:end="13:37">=</operator> <literal type="number" pos:start="13:39" pos:end="13:39">0</literal></expr>, <expr pos:start="13:42" pos:end="13:52"><operator pos:start="13:42" pos:end="13:42">.</operator><name pos:start="13:43" pos:end="13:48">repeat</name> <operator pos:start="13:50" pos:end="13:50">=</operator> <literal type="number" pos:start="13:52" pos:end="13:52">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><call pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">CHECK_ERROR_STATE</name><argument_list pos:start="19:22" pos:end="19:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><call pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:15">qemu_fflush</name><argument_list pos:start="23:16" pos:end="23:18">(<argument pos:start="23:17" pos:end="23:17"><expr pos:start="23:17" pos:end="23:17"><name pos:start="23:17" pos:end="23:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:37"><name pos:start="25:11" pos:end="25:28">qemu_rdma_drain_cq</name><argument_list pos:start="25:29" pos:end="25:37">(<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">f</name></expr></argument>, <argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="189:5"><if pos:start="37:5" pos:end="189:5">if <condition pos:start="37:8" pos:end="37:35">(<expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:13">flags</name> <operator pos:start="37:15" pos:end="37:16">==</operator> <name pos:start="37:18" pos:end="37:34">RAM_CONTROL_SETUP</name></expr>)</condition> <block pos:start="37:37" pos:end="189:5">{<block_content pos:start="39:9" pos:end="187:9">

        <decl_stmt pos:start="39:9" pos:end="39:75"><decl pos:start="39:9" pos:end="39:74"><type pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:25">RDMAControlHeader</name></type> <name pos:start="39:27" pos:end="39:30">resp</name> <init pos:start="39:32" pos:end="39:74">= <expr pos:start="39:34" pos:end="39:74"><block pos:start="39:34" pos:end="39:74">{<expr pos:start="39:35" pos:end="39:72"><operator pos:start="39:35" pos:end="39:35">.</operator><name pos:start="39:36" pos:end="39:39">type</name> <operator pos:start="39:41" pos:end="39:41">=</operator> <name pos:start="39:43" pos:end="39:72">RDMA_CONTROL_RAM_BLOCKS_RESULT</name></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:57"><decl pos:start="41:9" pos:end="41:56"><type pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:23">RDMALocalBlocks</name> <modifier pos:start="41:25" pos:end="41:25">*</modifier></type><name pos:start="41:26" pos:end="41:30">local</name> <init pos:start="41:32" pos:end="41:56">= <expr pos:start="41:34" pos:end="41:56"><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:56"><name pos:start="41:35" pos:end="41:38">rdma</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:56">local_ram_blocks</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:51"><decl pos:start="43:9" pos:end="43:26"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:26">reg_result_idx</name></decl>, <decl pos:start="43:29" pos:end="43:29"><type ref="prev" pos:start="43:9" pos:end="43:11"/><name pos:start="43:29" pos:end="43:29">i</name></decl>, <decl pos:start="43:32" pos:end="43:32"><type ref="prev" pos:start="43:9" pos:end="43:11"/><name pos:start="43:32" pos:end="43:32">j</name></decl>, <decl pos:start="43:35" pos:end="43:50"><type ref="prev" pos:start="43:9" pos:end="43:11"/><name pos:start="43:35" pos:end="43:50">nb_remote_blocks</name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:12">head</name><operator pos:start="47:13" pos:end="47:13">.</operator><name pos:start="47:14" pos:end="47:17">type</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:51">RDMA_CONTROL_RAM_BLOCKS_REQUEST</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:66"><expr pos:start="49:9" pos:end="49:65"><call pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:15">DPRINTF</name><argument_list pos:start="49:16" pos:end="49:65">(<argument pos:start="49:17" pos:end="49:64"><expr pos:start="49:17" pos:end="49:64"><literal type="string" pos:start="49:17" pos:end="49:64">"Sending registration setup for ram blocks...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="53:9" pos:end="67:11">/*

         * Make sure that we parallelize the pinning on both sides.

         * For very large guests, doing this serially takes a really

         * long time, so we have to 'interleave' the pinning locally

         * with the control messages by performing the pinning on this

         * side before we receive the control response from the other

         * side that the pinning has completed.

         */</comment>

        <expr_stmt pos:start="69:9" pos:end="73:59"><expr pos:start="69:9" pos:end="73:58"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="73:58"><name pos:start="69:15" pos:end="69:37">qemu_rdma_exchange_send</name><argument_list pos:start="69:38" pos:end="73:58">(<argument pos:start="69:39" pos:end="69:42"><expr pos:start="69:39" pos:end="69:42"><name pos:start="69:39" pos:end="69:42">rdma</name></expr></argument>, <argument pos:start="69:45" pos:end="69:49"><expr pos:start="69:45" pos:end="69:49"><operator pos:start="69:45" pos:end="69:45">&amp;</operator><name pos:start="69:46" pos:end="69:49">head</name></expr></argument>, <argument pos:start="69:52" pos:end="69:55"><expr pos:start="69:52" pos:end="69:55"><name pos:start="69:52" pos:end="69:55">NULL</name></expr></argument>, <argument pos:start="69:58" pos:end="69:62"><expr pos:start="69:58" pos:end="69:62"><operator pos:start="69:58" pos:end="69:58">&amp;</operator><name pos:start="69:59" pos:end="69:62">resp</name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:35"><expr pos:start="71:21" pos:end="71:35"><operator pos:start="71:21" pos:end="71:21">&amp;</operator><name pos:start="71:22" pos:end="71:35">reg_result_idx</name></expr></argument>, <argument pos:start="71:38" pos:end="73:57"><expr pos:start="71:38" pos:end="73:57"><ternary pos:start="71:38" pos:end="73:57"><condition pos:start="71:38" pos:end="71:52"><expr pos:start="71:38" pos:end="71:50"><name pos:start="71:38" pos:end="71:50"><name pos:start="71:38" pos:end="71:41">rdma</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:50">pin_all</name></name></expr> ?</condition><then pos:start="73:21" pos:end="73:50">

                    <expr pos:start="73:21" pos:end="73:50"><name pos:start="73:21" pos:end="73:50">qemu_rdma_reg_whole_ram_blocks</name></expr> </then><else pos:start="73:52" pos:end="73:57">: <expr pos:start="73:54" pos:end="73:57"><name pos:start="73:54" pos:end="73:57">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:20">(<expr pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">&lt;</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>)</condition> <block pos:start="75:22" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:23">

            <expr_stmt pos:start="77:13" pos:end="77:50"><expr pos:start="77:13" pos:end="77:49"><call pos:start="77:13" pos:end="77:49"><name pos:start="77:13" pos:end="77:17">ERROR</name><argument_list pos:start="77:18" pos:end="77:49">(<argument pos:start="77:19" pos:end="77:22"><expr pos:start="77:19" pos:end="77:22"><name pos:start="77:19" pos:end="77:22">errp</name></expr></argument>, <argument pos:start="77:25" pos:end="77:48"><expr pos:start="77:25" pos:end="77:48"><literal type="string" pos:start="77:25" pos:end="77:48">"receiving remote info!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:62"><expr pos:start="85:9" pos:end="85:61"><name pos:start="85:9" pos:end="85:24">nb_remote_blocks</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:35"><name pos:start="85:28" pos:end="85:31">resp</name><operator pos:start="85:32" pos:end="85:32">.</operator><name pos:start="85:33" pos:end="85:35">len</name></name> <operator pos:start="85:37" pos:end="85:37">/</operator> <sizeof pos:start="85:39" pos:end="85:61">sizeof<argument_list pos:start="85:45" pos:end="85:61">(<argument pos:start="85:46" pos:end="85:60"><expr pos:start="85:46" pos:end="85:60"><name pos:start="85:46" pos:end="85:60">RDMARemoteBlock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="109:11">/*

         * The protocol uses two different sets of rkeys (mutually exclusive):

         * 1. One key to represent the virtual address of the entire ram block.

         *    (dynamic chunk registration disabled - pin everything with one rkey.)

         * 2. One to represent individual chunks within a ram block.

         *    (dynamic chunk registration enabled - pin individual chunks.)

         *

         * Once the capability is successfully negotiated, the destination transmits

         * the keys to use (or sends them later) including the virtual addresses

         * and then propagates the remote ram block descriptions to his local copy.

         */</comment>



        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="113:49">(<expr pos:start="113:13" pos:end="113:48"><name pos:start="113:13" pos:end="113:28"><name pos:start="113:13" pos:end="113:17">local</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:28">nb_blocks</name></name> <operator pos:start="113:30" pos:end="113:31">!=</operator> <name pos:start="113:33" pos:end="113:48">nb_remote_blocks</name></expr>)</condition> <block pos:start="113:51" pos:end="123:9">{<block_content pos:start="115:13" pos:end="121:27">

            <expr_stmt pos:start="115:13" pos:end="119:77"><expr pos:start="115:13" pos:end="119:76"><call pos:start="115:13" pos:end="119:76"><name pos:start="115:13" pos:end="115:17">ERROR</name><argument_list pos:start="115:18" pos:end="119:76">(<argument pos:start="115:19" pos:end="115:22"><expr pos:start="115:19" pos:end="115:22"><name pos:start="115:19" pos:end="115:22">errp</name></expr></argument>, <argument pos:start="115:25" pos:end="119:75"><expr pos:start="115:25" pos:end="119:75"><literal type="string" pos:start="115:25" pos:end="115:50">"ram blocks mismatch #1! "</literal>

                        <literal type="string" pos:start="117:25" pos:end="117:73">"Your QEMU command line parameters are probably "</literal>

                        <literal type="string" pos:start="119:25" pos:end="119:75">"not identical on both the source and destination."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:27">return <expr pos:start="121:20" pos:end="121:26"><operator pos:start="121:20" pos:end="121:20">-</operator><name pos:start="121:21" pos:end="121:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:59"><expr pos:start="127:9" pos:end="127:58"><call pos:start="127:9" pos:end="127:58"><name pos:start="127:9" pos:end="127:29">qemu_rdma_move_header</name><argument_list pos:start="127:30" pos:end="127:58">(<argument pos:start="127:31" pos:end="127:34"><expr pos:start="127:31" pos:end="127:34"><name pos:start="127:31" pos:end="127:34">rdma</name></expr></argument>, <argument pos:start="127:37" pos:end="127:50"><expr pos:start="127:37" pos:end="127:50"><name pos:start="127:37" pos:end="127:50">reg_result_idx</name></expr></argument>, <argument pos:start="127:53" pos:end="127:57"><expr pos:start="127:53" pos:end="127:57"><operator pos:start="127:53" pos:end="127:53">&amp;</operator><name pos:start="127:54" pos:end="127:57">resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="131:66"><expr pos:start="129:9" pos:end="131:65"><call pos:start="129:9" pos:end="131:65"><name pos:start="129:9" pos:end="129:14">memcpy</name><argument_list pos:start="129:15" pos:end="131:65">(<argument pos:start="129:16" pos:end="129:26"><expr pos:start="129:16" pos:end="129:26"><name pos:start="129:16" pos:end="129:26"><name pos:start="129:16" pos:end="129:19">rdma</name><operator pos:start="129:20" pos:end="129:21">-&gt;</operator><name pos:start="129:22" pos:end="129:26">block</name></name></expr></argument>,

            <argument pos:start="131:13" pos:end="131:54"><expr pos:start="131:13" pos:end="131:54"><name pos:start="131:13" pos:end="131:41"><name pos:start="131:13" pos:end="131:16">rdma</name><operator pos:start="131:17" pos:end="131:18">-&gt;</operator><name pos:start="131:19" pos:end="131:25">wr_data</name><index pos:start="131:26" pos:end="131:41">[<expr pos:start="131:27" pos:end="131:40"><name pos:start="131:27" pos:end="131:40">reg_result_idx</name></expr>]</index></name><operator pos:start="131:42" pos:end="131:42">.</operator><name pos:start="131:43" pos:end="131:54">control_curr</name></expr></argument>, <argument pos:start="131:57" pos:end="131:64"><expr pos:start="131:57" pos:end="131:64"><name pos:start="131:57" pos:end="131:64"><name pos:start="131:57" pos:end="131:60">resp</name><operator pos:start="131:61" pos:end="131:61">.</operator><name pos:start="131:62" pos:end="131:64">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="133:9" pos:end="187:9">for <control pos:start="133:13" pos:end="133:46">(<init pos:start="133:14" pos:end="133:19"><expr pos:start="133:14" pos:end="133:18"><name pos:start="133:14" pos:end="133:14">i</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:18">0</literal></expr>;</init> <condition pos:start="133:21" pos:end="133:41"><expr pos:start="133:21" pos:end="133:40"><name pos:start="133:21" pos:end="133:21">i</name> <operator pos:start="133:23" pos:end="133:23">&lt;</operator> <name pos:start="133:25" pos:end="133:40">nb_remote_blocks</name></expr>;</condition> <incr pos:start="133:43" pos:end="133:45"><expr pos:start="133:43" pos:end="133:45"><name pos:start="133:43" pos:end="133:43">i</name><operator pos:start="133:44" pos:end="133:45">++</operator></expr></incr>)</control> <block pos:start="133:48" pos:end="187:9">{<block_content pos:start="135:13" pos:end="185:13">

            <expr_stmt pos:start="135:13" pos:end="135:53"><expr pos:start="135:13" pos:end="135:52"><call pos:start="135:13" pos:end="135:52"><name pos:start="135:13" pos:end="135:35">network_to_remote_block</name><argument_list pos:start="135:36" pos:end="135:52">(<argument pos:start="135:37" pos:end="135:51"><expr pos:start="135:37" pos:end="135:51"><operator pos:start="135:37" pos:end="135:37">&amp;</operator><name pos:start="135:38" pos:end="135:51"><name pos:start="135:38" pos:end="135:41">rdma</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:48">block</name><index pos:start="135:49" pos:end="135:51">[<expr pos:start="135:50" pos:end="135:50"><name pos:start="135:50" pos:end="135:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="139:13" pos:end="139:41">/* search local ram blocks */</comment>

            <for pos:start="141:13" pos:end="171:13">for <control pos:start="141:17" pos:end="141:50">(<init pos:start="141:18" pos:end="141:23"><expr pos:start="141:18" pos:end="141:22"><name pos:start="141:18" pos:end="141:18">j</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <literal type="number" pos:start="141:22" pos:end="141:22">0</literal></expr>;</init> <condition pos:start="141:25" pos:end="141:45"><expr pos:start="141:25" pos:end="141:44"><name pos:start="141:25" pos:end="141:25">j</name> <operator pos:start="141:27" pos:end="141:27">&lt;</operator> <name pos:start="141:29" pos:end="141:44"><name pos:start="141:29" pos:end="141:33">local</name><operator pos:start="141:34" pos:end="141:35">-&gt;</operator><name pos:start="141:36" pos:end="141:44">nb_blocks</name></name></expr>;</condition> <incr pos:start="141:47" pos:end="141:49"><expr pos:start="141:47" pos:end="141:49"><name pos:start="141:47" pos:end="141:47">j</name><operator pos:start="141:48" pos:end="141:49">++</operator></expr></incr>)</control> <block pos:start="141:52" pos:end="171:13">{<block_content pos:start="143:17" pos:end="169:22">

                <if_stmt pos:start="143:17" pos:end="147:17"><if pos:start="143:17" pos:end="147:17">if <condition pos:start="143:20" pos:end="143:68">(<expr pos:start="143:21" pos:end="143:67"><name pos:start="143:21" pos:end="143:34"><name pos:start="143:21" pos:end="143:24">rdma</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:31">block</name><index pos:start="143:32" pos:end="143:34">[<expr pos:start="143:33" pos:end="143:33"><name pos:start="143:33" pos:end="143:33">i</name></expr>]</index></name><operator pos:start="143:35" pos:end="143:35">.</operator><name pos:start="143:36" pos:end="143:41">offset</name> <operator pos:start="143:43" pos:end="143:44">!=</operator> <name pos:start="143:46" pos:end="143:60"><name pos:start="143:46" pos:end="143:50">local</name><operator pos:start="143:51" pos:end="143:52">-&gt;</operator><name pos:start="143:53" pos:end="143:57">block</name><index pos:start="143:58" pos:end="143:60">[<expr pos:start="143:59" pos:end="143:59"><name pos:start="143:59" pos:end="143:59">j</name></expr>]</index></name><operator pos:start="143:61" pos:end="143:61">.</operator><name pos:start="143:62" pos:end="143:67">offset</name></expr>)</condition> <block pos:start="143:70" pos:end="147:17">{<block_content pos:start="145:21" pos:end="145:29">

                    <continue pos:start="145:21" pos:end="145:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="151:17" pos:end="161:17"><if pos:start="151:17" pos:end="161:17">if <condition pos:start="151:20" pos:end="151:68">(<expr pos:start="151:21" pos:end="151:67"><name pos:start="151:21" pos:end="151:34"><name pos:start="151:21" pos:end="151:24">rdma</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:31">block</name><index pos:start="151:32" pos:end="151:34">[<expr pos:start="151:33" pos:end="151:33"><name pos:start="151:33" pos:end="151:33">i</name></expr>]</index></name><operator pos:start="151:35" pos:end="151:35">.</operator><name pos:start="151:36" pos:end="151:41">length</name> <operator pos:start="151:43" pos:end="151:44">!=</operator> <name pos:start="151:46" pos:end="151:60"><name pos:start="151:46" pos:end="151:50">local</name><operator pos:start="151:51" pos:end="151:52">-&gt;</operator><name pos:start="151:53" pos:end="151:57">block</name><index pos:start="151:58" pos:end="151:60">[<expr pos:start="151:59" pos:end="151:59"><name pos:start="151:59" pos:end="151:59">j</name></expr>]</index></name><operator pos:start="151:61" pos:end="151:61">.</operator><name pos:start="151:62" pos:end="151:67">length</name></expr>)</condition> <block pos:start="151:70" pos:end="161:17">{<block_content pos:start="153:21" pos:end="159:35">

                    <expr_stmt pos:start="153:21" pos:end="157:77"><expr pos:start="153:21" pos:end="157:76"><call pos:start="153:21" pos:end="157:76"><name pos:start="153:21" pos:end="153:25">ERROR</name><argument_list pos:start="153:26" pos:end="157:76">(<argument pos:start="153:27" pos:end="153:30"><expr pos:start="153:27" pos:end="153:30"><name pos:start="153:27" pos:end="153:30">errp</name></expr></argument>, <argument pos:start="153:33" pos:end="157:75"><expr pos:start="153:33" pos:end="157:75"><literal type="string" pos:start="153:33" pos:end="153:58">"ram blocks mismatch #2! "</literal>

                        <literal type="string" pos:start="155:25" pos:end="155:73">"Your QEMU command line parameters are probably "</literal>

                        <literal type="string" pos:start="157:25" pos:end="157:75">"not identical on both the source and destination."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="159:21" pos:end="159:35">return <expr pos:start="159:28" pos:end="159:34"><operator pos:start="159:28" pos:end="159:28">-</operator><name pos:start="159:29" pos:end="159:34">EINVAL</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="163:17" pos:end="165:56"><expr pos:start="163:17" pos:end="165:55"><name pos:start="163:17" pos:end="163:31"><name pos:start="163:17" pos:end="163:21">local</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:28">block</name><index pos:start="163:29" pos:end="163:31">[<expr pos:start="163:30" pos:end="163:30"><name pos:start="163:30" pos:end="163:30">j</name></expr>]</index></name><operator pos:start="163:32" pos:end="163:32">.</operator><name pos:start="163:33" pos:end="163:48">remote_host_addr</name> <operator pos:start="163:50" pos:end="163:50">=</operator>

                        <name pos:start="165:25" pos:end="165:38"><name pos:start="165:25" pos:end="165:28">rdma</name><operator pos:start="165:29" pos:end="165:30">-&gt;</operator><name pos:start="165:31" pos:end="165:35">block</name><index pos:start="165:36" pos:end="165:38">[<expr pos:start="165:37" pos:end="165:37"><name pos:start="165:37" pos:end="165:37">i</name></expr>]</index></name><operator pos:start="165:39" pos:end="165:39">.</operator><name pos:start="165:40" pos:end="165:55">remote_host_addr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:73"><expr pos:start="167:17" pos:end="167:72"><name pos:start="167:17" pos:end="167:31"><name pos:start="167:17" pos:end="167:21">local</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:28">block</name><index pos:start="167:29" pos:end="167:31">[<expr pos:start="167:30" pos:end="167:30"><name pos:start="167:30" pos:end="167:30">j</name></expr>]</index></name><operator pos:start="167:32" pos:end="167:32">.</operator><name pos:start="167:33" pos:end="167:43">remote_rkey</name> <operator pos:start="167:45" pos:end="167:45">=</operator> <name pos:start="167:47" pos:end="167:60"><name pos:start="167:47" pos:end="167:50">rdma</name><operator pos:start="167:51" pos:end="167:52">-&gt;</operator><name pos:start="167:53" pos:end="167:57">block</name><index pos:start="167:58" pos:end="167:60">[<expr pos:start="167:59" pos:end="167:59"><name pos:start="167:59" pos:end="167:59">i</name></expr>]</index></name><operator pos:start="167:61" pos:end="167:61">.</operator><name pos:start="167:62" pos:end="167:72">remote_rkey</name></expr>;</expr_stmt>

                <break pos:start="169:17" pos:end="169:22">break;</break>

            </block_content>}</block></for>



            <if_stmt pos:start="175:13" pos:end="185:13"><if pos:start="175:13" pos:end="185:13">if <condition pos:start="175:16" pos:end="175:38">(<expr pos:start="175:17" pos:end="175:37"><name pos:start="175:17" pos:end="175:17">j</name> <operator pos:start="175:19" pos:end="175:20">&gt;=</operator> <name pos:start="175:22" pos:end="175:37"><name pos:start="175:22" pos:end="175:26">local</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:37">nb_blocks</name></name></expr>)</condition> <block pos:start="175:40" pos:end="185:13">{<block_content pos:start="177:17" pos:end="183:31">

                <expr_stmt pos:start="177:17" pos:end="181:77"><expr pos:start="177:17" pos:end="181:76"><call pos:start="177:17" pos:end="181:76"><name pos:start="177:17" pos:end="177:21">ERROR</name><argument_list pos:start="177:22" pos:end="181:76">(<argument pos:start="177:23" pos:end="177:26"><expr pos:start="177:23" pos:end="177:26"><name pos:start="177:23" pos:end="177:26">errp</name></expr></argument>, <argument pos:start="177:29" pos:end="181:75"><expr pos:start="177:29" pos:end="181:75"><literal type="string" pos:start="177:29" pos:end="177:54">"ram blocks mismatch #3! "</literal>

                        <literal type="string" pos:start="179:25" pos:end="179:73">"Your QEMU command line parameters are probably "</literal>

                        <literal type="string" pos:start="181:25" pos:end="181:75">"not identical on both the source and destination."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="183:17" pos:end="183:31">return <expr pos:start="183:24" pos:end="183:30"><operator pos:start="183:24" pos:end="183:24">-</operator><name pos:start="183:25" pos:end="183:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:69"><expr pos:start="193:5" pos:end="193:68"><call pos:start="193:5" pos:end="193:68"><name pos:start="193:5" pos:end="193:13">DDDPRINTF</name><argument_list pos:start="193:14" pos:end="193:68">(<argument pos:start="193:15" pos:end="193:60"><expr pos:start="193:15" pos:end="193:60"><literal type="string" pos:start="193:15" pos:end="193:45">"Sending registration finish %"</literal> <name pos:start="193:47" pos:end="193:52">PRIu64</name> <literal type="string" pos:start="193:54" pos:end="193:60">"...\n"</literal></expr></argument>, <argument pos:start="193:63" pos:end="193:67"><expr pos:start="193:63" pos:end="193:67"><name pos:start="193:63" pos:end="193:67">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:47"><expr pos:start="197:5" pos:end="197:46"><name pos:start="197:5" pos:end="197:13"><name pos:start="197:5" pos:end="197:8">head</name><operator pos:start="197:9" pos:end="197:9">.</operator><name pos:start="197:10" pos:end="197:13">type</name></name> <operator pos:start="197:15" pos:end="197:15">=</operator> <name pos:start="197:17" pos:end="197:46">RDMA_CONTROL_REGISTER_FINISHED</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:71"><expr pos:start="199:5" pos:end="199:70"><name pos:start="199:5" pos:end="199:7">ret</name> <operator pos:start="199:9" pos:end="199:9">=</operator> <call pos:start="199:11" pos:end="199:70"><name pos:start="199:11" pos:end="199:33">qemu_rdma_exchange_send</name><argument_list pos:start="199:34" pos:end="199:70">(<argument pos:start="199:35" pos:end="199:38"><expr pos:start="199:35" pos:end="199:38"><name pos:start="199:35" pos:end="199:38">rdma</name></expr></argument>, <argument pos:start="199:41" pos:end="199:45"><expr pos:start="199:41" pos:end="199:45"><operator pos:start="199:41" pos:end="199:41">&amp;</operator><name pos:start="199:42" pos:end="199:45">head</name></expr></argument>, <argument pos:start="199:48" pos:end="199:51"><expr pos:start="199:48" pos:end="199:51"><name pos:start="199:48" pos:end="199:51">NULL</name></expr></argument>, <argument pos:start="199:54" pos:end="199:57"><expr pos:start="199:54" pos:end="199:57"><name pos:start="199:54" pos:end="199:57">NULL</name></expr></argument>, <argument pos:start="199:60" pos:end="199:63"><expr pos:start="199:60" pos:end="199:63"><name pos:start="199:60" pos:end="199:63">NULL</name></expr></argument>, <argument pos:start="199:66" pos:end="199:69"><expr pos:start="199:66" pos:end="199:69"><name pos:start="199:66" pos:end="199:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="203:5" pos:end="207:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:16">(<expr pos:start="203:9" pos:end="203:15"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">&lt;</operator> <literal type="number" pos:start="203:15" pos:end="203:15">0</literal></expr>)</condition> <block pos:start="203:18" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:17">

        <goto pos:start="205:9" pos:end="205:17">goto <name pos:start="205:14" pos:end="205:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="211:5" pos:end="211:13">return <expr pos:start="211:12" pos:end="211:12"><literal type="number" pos:start="211:12" pos:end="211:12">0</literal></expr>;</return>

<label pos:start="213:1" pos:end="213:4"><name pos:start="213:1" pos:end="213:3">err</name>:</label>

    <expr_stmt pos:start="215:5" pos:end="215:28"><expr pos:start="215:5" pos:end="215:27"><name pos:start="215:5" pos:end="215:21"><name pos:start="215:5" pos:end="215:8">rdma</name><operator pos:start="215:9" pos:end="215:10">-&gt;</operator><name pos:start="215:11" pos:end="215:21">error_state</name></name> <operator pos:start="215:23" pos:end="215:23">=</operator> <name pos:start="215:25" pos:end="215:27">ret</name></expr>;</expr_stmt>

    <return pos:start="217:5" pos:end="217:15">return <expr pos:start="217:12" pos:end="217:14"><name pos:start="217:12" pos:end="217:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
