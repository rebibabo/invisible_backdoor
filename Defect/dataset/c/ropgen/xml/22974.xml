<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22974.c" pos:tabs="8"><function pos:start="1:1" pos:end="144:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">copy_metadata</name><parameter_list pos:start="1:25" pos:end="1:114">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:29">char</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:38">outspec</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:44">char</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:52">inspec</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:73"><decl pos:start="1:55" pos:end="1:73"><type pos:start="1:55" pos:end="1:73"><name pos:start="1:55" pos:end="1:69">AVFormatContext</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:73">oc</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:94"><decl pos:start="1:76" pos:end="1:94"><type pos:start="1:76" pos:end="1:94"><name pos:start="1:76" pos:end="1:90">AVFormatContext</name> <modifier pos:start="1:92" pos:end="1:92">*</modifier></type><name pos:start="1:93" pos:end="1:94">ic</name></decl></parameter>, <parameter pos:start="1:97" pos:end="1:113"><decl pos:start="1:97" pos:end="1:113"><type pos:start="1:97" pos:end="1:113"><name pos:start="1:97" pos:end="1:110">OptionsContext</name> <modifier pos:start="1:112" pos:end="1:112">*</modifier></type><name pos:start="1:113" pos:end="1:113">o</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="144:1">{<block_content pos:start="5:5" pos:end="142:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:16">AVDictionary</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier><modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:26">meta_in</name> <init pos:start="5:28" pos:end="5:33">= <expr pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:16">AVDictionary</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier><modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:27">meta_out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:16">type_in</name></decl>, <decl pos:start="11:19" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:19" pos:end="11:26">type_out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:28">istream_spec</name> <init pos:start="13:30" pos:end="13:35">= <expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">NULL</name></expr></init></decl>, <decl pos:start="13:38" pos:end="13:57"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:38" pos:end="13:38">*</modifier></type><name pos:start="13:39" pos:end="13:50">ostream_spec</name> <init pos:start="13:52" pos:end="13:57">= <expr pos:start="13:54" pos:end="13:57"><name pos:start="13:54" pos:end="13:57">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">idx_in</name> <init pos:start="15:16" pos:end="15:18">= <expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></init></decl>, <decl pos:start="15:21" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:27">idx_out</name> <init pos:start="15:29" pos:end="15:31">= <expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:65"><expr pos:start="19:5" pos:end="19:64"><call pos:start="19:5" pos:end="19:64"><name pos:start="19:5" pos:end="19:19">parse_meta_type</name><argument_list pos:start="19:20" pos:end="19:64">(<argument pos:start="19:21" pos:end="19:26"><expr pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:26">inspec</name></expr></argument>,  <argument pos:start="19:30" pos:end="19:37"><expr pos:start="19:30" pos:end="19:37"><operator pos:start="19:30" pos:end="19:30">&amp;</operator><name pos:start="19:31" pos:end="19:37">type_in</name></expr></argument>,  <argument pos:start="19:41" pos:end="19:47"><expr pos:start="19:41" pos:end="19:47"><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:47">idx_in</name></expr></argument>,  <argument pos:start="19:51" pos:end="19:63"><expr pos:start="19:51" pos:end="19:63"><operator pos:start="19:51" pos:end="19:51">&amp;</operator><name pos:start="19:52" pos:end="19:63">istream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:65"><expr pos:start="21:5" pos:end="21:64"><call pos:start="21:5" pos:end="21:64"><name pos:start="21:5" pos:end="21:19">parse_meta_type</name><argument_list pos:start="21:20" pos:end="21:64">(<argument pos:start="21:21" pos:end="21:27"><expr pos:start="21:21" pos:end="21:27"><name pos:start="21:21" pos:end="21:27">outspec</name></expr></argument>, <argument pos:start="21:30" pos:end="21:38"><expr pos:start="21:30" pos:end="21:38"><operator pos:start="21:30" pos:end="21:30">&amp;</operator><name pos:start="21:31" pos:end="21:38">type_out</name></expr></argument>, <argument pos:start="21:41" pos:end="21:48"><expr pos:start="21:41" pos:end="21:48"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:48">idx_out</name></expr></argument>, <argument pos:start="21:51" pos:end="21:63"><expr pos:start="21:51" pos:end="21:63"><operator pos:start="21:51" pos:end="21:51">&amp;</operator><name pos:start="21:52" pos:end="21:63">ostream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:38"><if pos:start="25:5" pos:end="27:38">if <condition pos:start="25:8" pos:end="25:42">(<expr pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:15">type_in</name> <operator pos:start="25:17" pos:end="25:18">==</operator> <literal type="char" pos:start="25:20" pos:end="25:22">'g'</literal> <operator pos:start="25:24" pos:end="25:25">||</operator> <name pos:start="25:27" pos:end="25:34">type_out</name> <operator pos:start="25:36" pos:end="25:37">==</operator> <literal type="char" pos:start="25:39" pos:end="25:41">'g'</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:38"><block_content pos:start="27:9" pos:end="27:38">

        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:9">o</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:33">metadata_global_manual</name></name> <operator pos:start="27:35" pos:end="27:35">=</operator> <literal type="number" pos:start="27:37" pos:end="27:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:39"><if pos:start="29:5" pos:end="31:39">if <condition pos:start="29:8" pos:end="29:42">(<expr pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:15">type_in</name> <operator pos:start="29:17" pos:end="29:18">==</operator> <literal type="char" pos:start="29:20" pos:end="29:22">'s'</literal> <operator pos:start="29:24" pos:end="29:25">||</operator> <name pos:start="29:27" pos:end="29:34">type_out</name> <operator pos:start="29:36" pos:end="29:37">==</operator> <literal type="char" pos:start="29:39" pos:end="29:41">'s'</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:39"><block_content pos:start="31:9" pos:end="31:39">

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:9">o</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:34">metadata_streams_manual</name></name> <operator pos:start="31:36" pos:end="31:36">=</operator> <literal type="number" pos:start="31:38" pos:end="31:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="85:0"><if pos:start="33:5" pos:end="85:0">if <condition pos:start="33:8" pos:end="33:42">(<expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:15">type_in</name> <operator pos:start="33:17" pos:end="33:18">==</operator> <literal type="char" pos:start="33:20" pos:end="33:22">'c'</literal> <operator pos:start="33:24" pos:end="33:25">||</operator> <name pos:start="33:27" pos:end="33:34">type_out</name> <operator pos:start="33:36" pos:end="33:37">==</operator> <literal type="char" pos:start="33:39" pos:end="33:41">'c'</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="85:0"><block_content pos:start="35:9" pos:end="85:0">

        <expr_stmt pos:start="35:9" pos:end="85:0"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:9">o</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:35">metadata_chapters_manual</name></name> <operator pos:start="35:37" pos:end="35:37">=</operator> <literal type="number" pos:start="35:39" pos:end="35:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="39:1" pos:end="49:5">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:28">METADATA_CHECK_INDEX</name><parameter_list pos:start="39:29" pos:end="39:51">(<parameter pos:start="39:30" pos:end="39:34"><type pos:start="39:30" pos:end="39:34"><name pos:start="39:30" pos:end="39:34">index</name></type></parameter>, <parameter pos:start="39:37" pos:end="39:44"><type pos:start="39:37" pos:end="39:44"><name pos:start="39:37" pos:end="39:44">nb_elems</name></type></parameter>, <parameter pos:start="39:47" pos:end="39:50"><type pos:start="39:47" pos:end="39:50"><name pos:start="39:47" pos:end="39:50">desc</name></type></parameter>)</parameter_list></cpp:macro>\

    <cpp:value pos:start="41:5" pos:end="49:5">if ((index) &lt; 0 || (index) &gt;= (nb_elems)) {\

        av_log(NULL, AV_LOG_FATAL, "Invalid %s index %d while processing metadata maps.\n",\

                (desc), (index));\

        exit_program(1);\

    }</cpp:value></cpp:define>



<cpp:define pos:start="53:1" pos:end="84:43">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:16">SET_DICT</name><parameter_list pos:start="53:17" pos:end="53:44">(<parameter pos:start="53:18" pos:end="53:21"><type pos:start="53:18" pos:end="53:21"><name pos:start="53:18" pos:end="53:21">type</name></type></parameter>, <parameter pos:start="53:24" pos:end="53:27"><type pos:start="53:24" pos:end="53:27"><name pos:start="53:24" pos:end="53:27">meta</name></type></parameter>, <parameter pos:start="53:30" pos:end="53:36"><type pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:36">context</name></type></parameter>, <parameter pos:start="53:39" pos:end="53:43"><type pos:start="53:39" pos:end="53:43"><name pos:start="53:39" pos:end="53:43">index</name></type></parameter>)</parameter_list></cpp:macro>\

        <cpp:value pos:start="55:9" pos:end="84:43">switch (type) {\

        case 'g':\

            meta = &amp;context-&gt;metadata;\

            break;\

        case 'c':\

            METADATA_CHECK_INDEX(index, context-&gt;nb_chapters, "chapter")\

            meta = &amp;context-&gt;chapters[index]-&gt;metadata;\

            break;\

        case 'p':\

            METADATA_CHECK_INDEX(index, context-&gt;nb_programs, "program")\

            meta = &amp;context-&gt;programs[index]-&gt;metadata;\

            break;\


        }\



    SET_DICT(type_in, meta_in, ic, idx_in);</cpp:value></cpp:define>

    <expr_stmt pos:start="86:5" pos:end="86:46"><expr pos:start="86:5" pos:end="86:45"><call pos:start="86:5" pos:end="86:45"><name pos:start="86:5" pos:end="86:12">SET_DICT</name><argument_list pos:start="86:13" pos:end="86:45">(<argument pos:start="86:14" pos:end="86:21"><expr pos:start="86:14" pos:end="86:21"><name pos:start="86:14" pos:end="86:21">type_out</name></expr></argument>, <argument pos:start="86:24" pos:end="86:31"><expr pos:start="86:24" pos:end="86:31"><name pos:start="86:24" pos:end="86:31">meta_out</name></expr></argument>, <argument pos:start="86:34" pos:end="86:35"><expr pos:start="86:34" pos:end="86:35"><name pos:start="86:34" pos:end="86:35">oc</name></expr></argument>, <argument pos:start="86:38" pos:end="86:44"><expr pos:start="86:38" pos:end="86:44"><name pos:start="86:38" pos:end="86:44">idx_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="90:5" pos:end="90:56">/* for input streams choose first matching stream */</comment>

    <if_stmt pos:start="92:5" pos:end="116:5"><if pos:start="92:5" pos:end="116:5">if <condition pos:start="92:8" pos:end="92:23">(<expr pos:start="92:9" pos:end="92:22"><name pos:start="92:9" pos:end="92:15">type_in</name> <operator pos:start="92:17" pos:end="92:18">==</operator> <literal type="char" pos:start="92:20" pos:end="92:22">'s'</literal></expr>)</condition> <block pos:start="92:25" pos:end="116:5">{<block_content pos:start="94:9" pos:end="114:9">

        <for pos:start="94:9" pos:end="106:9">for <control pos:start="94:13" pos:end="94:44">(<init pos:start="94:14" pos:end="94:19"><expr pos:start="94:14" pos:end="94:18"><name pos:start="94:14" pos:end="94:14">i</name> <operator pos:start="94:16" pos:end="94:16">=</operator> <literal type="number" pos:start="94:18" pos:end="94:18">0</literal></expr>;</init> <condition pos:start="94:21" pos:end="94:39"><expr pos:start="94:21" pos:end="94:38"><name pos:start="94:21" pos:end="94:21">i</name> <operator pos:start="94:23" pos:end="94:23">&lt;</operator> <name pos:start="94:25" pos:end="94:38"><name pos:start="94:25" pos:end="94:26">ic</name><operator pos:start="94:27" pos:end="94:28">-&gt;</operator><name pos:start="94:29" pos:end="94:38">nb_streams</name></name></expr>;</condition> <incr pos:start="94:41" pos:end="94:43"><expr pos:start="94:41" pos:end="94:43"><name pos:start="94:41" pos:end="94:41">i</name><operator pos:start="94:42" pos:end="94:43">++</operator></expr></incr>)</control> <block pos:start="94:46" pos:end="106:9">{<block_content pos:start="96:13" pos:end="104:32">

            <if_stmt pos:start="96:13" pos:end="104:32"><if pos:start="96:13" pos:end="102:13">if <condition pos:start="96:16" pos:end="96:85">(<expr pos:start="96:17" pos:end="96:84"><operator pos:start="96:17" pos:end="96:17">(</operator><name pos:start="96:18" pos:end="96:20">ret</name> <operator pos:start="96:22" pos:end="96:22">=</operator> <call pos:start="96:24" pos:end="96:79"><name pos:start="96:24" pos:end="96:45">check_stream_specifier</name><argument_list pos:start="96:46" pos:end="96:79">(<argument pos:start="96:47" pos:end="96:48"><expr pos:start="96:47" pos:end="96:48"><name pos:start="96:47" pos:end="96:48">ic</name></expr></argument>, <argument pos:start="96:51" pos:end="96:64"><expr pos:start="96:51" pos:end="96:64"><name pos:start="96:51" pos:end="96:64"><name pos:start="96:51" pos:end="96:52">ic</name><operator pos:start="96:53" pos:end="96:54">-&gt;</operator><name pos:start="96:55" pos:end="96:61">streams</name><index pos:start="96:62" pos:end="96:64">[<expr pos:start="96:63" pos:end="96:63"><name pos:start="96:63" pos:end="96:63">i</name></expr>]</index></name></expr></argument>, <argument pos:start="96:67" pos:end="96:78"><expr pos:start="96:67" pos:end="96:78"><name pos:start="96:67" pos:end="96:78">istream_spec</name></expr></argument>)</argument_list></call><operator pos:start="96:80" pos:end="96:80">)</operator> <operator pos:start="96:82" pos:end="96:82">&gt;</operator> <literal type="number" pos:start="96:84" pos:end="96:84">0</literal></expr>)</condition> <block pos:start="96:87" pos:end="102:13">{<block_content pos:start="98:17" pos:end="100:22">

                <expr_stmt pos:start="98:17" pos:end="98:52"><expr pos:start="98:17" pos:end="98:51"><name pos:start="98:17" pos:end="98:23">meta_in</name> <operator pos:start="98:25" pos:end="98:25">=</operator> <operator pos:start="98:27" pos:end="98:27">&amp;</operator><name pos:start="98:28" pos:end="98:41"><name pos:start="98:28" pos:end="98:29">ic</name><operator pos:start="98:30" pos:end="98:31">-&gt;</operator><name pos:start="98:32" pos:end="98:38">streams</name><index pos:start="98:39" pos:end="98:41">[<expr pos:start="98:40" pos:end="98:40"><name pos:start="98:40" pos:end="98:40">i</name></expr>]</index></name><operator pos:start="98:42" pos:end="98:43">-&gt;</operator><name pos:start="98:44" pos:end="98:51">metadata</name></expr>;</expr_stmt>

                <break pos:start="100:17" pos:end="100:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="102:15" pos:end="104:32">else if <condition pos:start="102:23" pos:end="102:31">(<expr pos:start="102:24" pos:end="102:30"><name pos:start="102:24" pos:end="102:26">ret</name> <operator pos:start="102:28" pos:end="102:28">&lt;</operator> <literal type="number" pos:start="102:30" pos:end="102:30">0</literal></expr>)</condition><block type="pseudo" pos:start="104:17" pos:end="104:32"><block_content pos:start="104:17" pos:end="104:32">

                <expr_stmt pos:start="104:17" pos:end="104:32"><expr pos:start="104:17" pos:end="104:31"><call pos:start="104:17" pos:end="104:31"><name pos:start="104:17" pos:end="104:28">exit_program</name><argument_list pos:start="104:29" pos:end="104:31">(<argument pos:start="104:30" pos:end="104:30"><expr pos:start="104:30" pos:end="104:30"><literal type="number" pos:start="104:30" pos:end="104:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="108:9" pos:end="114:9"><if pos:start="108:9" pos:end="114:9">if <condition pos:start="108:12" pos:end="108:21">(<expr pos:start="108:13" pos:end="108:20"><operator pos:start="108:13" pos:end="108:13">!</operator><name pos:start="108:14" pos:end="108:20">meta_in</name></expr>)</condition> <block pos:start="108:23" pos:end="114:9">{<block_content pos:start="110:13" pos:end="112:28">

            <expr_stmt pos:start="110:13" pos:end="110:107"><expr pos:start="110:13" pos:end="110:106"><call pos:start="110:13" pos:end="110:106"><name pos:start="110:13" pos:end="110:18">av_log</name><argument_list pos:start="110:19" pos:end="110:106">(<argument pos:start="110:20" pos:end="110:23"><expr pos:start="110:20" pos:end="110:23"><name pos:start="110:20" pos:end="110:23">NULL</name></expr></argument>, <argument pos:start="110:26" pos:end="110:37"><expr pos:start="110:26" pos:end="110:37"><name pos:start="110:26" pos:end="110:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="110:40" pos:end="110:91"><expr pos:start="110:40" pos:end="110:91"><literal type="string" pos:start="110:40" pos:end="110:91">"Stream specifier %s does not match  any streams.\n"</literal></expr></argument>, <argument pos:start="110:94" pos:end="110:105"><expr pos:start="110:94" pos:end="110:105"><name pos:start="110:94" pos:end="110:105">istream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="112:13" pos:end="112:28"><expr pos:start="112:13" pos:end="112:27"><call pos:start="112:13" pos:end="112:27"><name pos:start="112:13" pos:end="112:24">exit_program</name><argument_list pos:start="112:25" pos:end="112:27">(<argument pos:start="112:26" pos:end="112:26"><expr pos:start="112:26" pos:end="112:26"><literal type="number" pos:start="112:26" pos:end="112:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="120:5" pos:end="138:65"><if pos:start="120:5" pos:end="136:5">if <condition pos:start="120:8" pos:end="120:24">(<expr pos:start="120:9" pos:end="120:23"><name pos:start="120:9" pos:end="120:16">type_out</name> <operator pos:start="120:18" pos:end="120:19">==</operator> <literal type="char" pos:start="120:21" pos:end="120:23">'s'</literal></expr>)</condition> <block pos:start="120:26" pos:end="136:5">{<block_content pos:start="122:9" pos:end="134:9">

        <for pos:start="122:9" pos:end="134:9">for <control pos:start="122:13" pos:end="122:44">(<init pos:start="122:14" pos:end="122:19"><expr pos:start="122:14" pos:end="122:18"><name pos:start="122:14" pos:end="122:14">i</name> <operator pos:start="122:16" pos:end="122:16">=</operator> <literal type="number" pos:start="122:18" pos:end="122:18">0</literal></expr>;</init> <condition pos:start="122:21" pos:end="122:39"><expr pos:start="122:21" pos:end="122:38"><name pos:start="122:21" pos:end="122:21">i</name> <operator pos:start="122:23" pos:end="122:23">&lt;</operator> <name pos:start="122:25" pos:end="122:38"><name pos:start="122:25" pos:end="122:26">oc</name><operator pos:start="122:27" pos:end="122:28">-&gt;</operator><name pos:start="122:29" pos:end="122:38">nb_streams</name></name></expr>;</condition> <incr pos:start="122:41" pos:end="122:43"><expr pos:start="122:41" pos:end="122:43"><name pos:start="122:41" pos:end="122:41">i</name><operator pos:start="122:42" pos:end="122:43">++</operator></expr></incr>)</control> <block pos:start="122:46" pos:end="134:9">{<block_content pos:start="124:13" pos:end="132:32">

            <if_stmt pos:start="124:13" pos:end="132:32"><if pos:start="124:13" pos:end="130:13">if <condition pos:start="124:16" pos:end="124:85">(<expr pos:start="124:17" pos:end="124:84"><operator pos:start="124:17" pos:end="124:17">(</operator><name pos:start="124:18" pos:end="124:20">ret</name> <operator pos:start="124:22" pos:end="124:22">=</operator> <call pos:start="124:24" pos:end="124:79"><name pos:start="124:24" pos:end="124:45">check_stream_specifier</name><argument_list pos:start="124:46" pos:end="124:79">(<argument pos:start="124:47" pos:end="124:48"><expr pos:start="124:47" pos:end="124:48"><name pos:start="124:47" pos:end="124:48">oc</name></expr></argument>, <argument pos:start="124:51" pos:end="124:64"><expr pos:start="124:51" pos:end="124:64"><name pos:start="124:51" pos:end="124:64"><name pos:start="124:51" pos:end="124:52">oc</name><operator pos:start="124:53" pos:end="124:54">-&gt;</operator><name pos:start="124:55" pos:end="124:61">streams</name><index pos:start="124:62" pos:end="124:64">[<expr pos:start="124:63" pos:end="124:63"><name pos:start="124:63" pos:end="124:63">i</name></expr>]</index></name></expr></argument>, <argument pos:start="124:67" pos:end="124:78"><expr pos:start="124:67" pos:end="124:78"><name pos:start="124:67" pos:end="124:78">ostream_spec</name></expr></argument>)</argument_list></call><operator pos:start="124:80" pos:end="124:80">)</operator> <operator pos:start="124:82" pos:end="124:82">&gt;</operator> <literal type="number" pos:start="124:84" pos:end="124:84">0</literal></expr>)</condition> <block pos:start="124:87" pos:end="130:13">{<block_content pos:start="126:17" pos:end="128:73">

                <expr_stmt pos:start="126:17" pos:end="126:53"><expr pos:start="126:17" pos:end="126:52"><name pos:start="126:17" pos:end="126:24">meta_out</name> <operator pos:start="126:26" pos:end="126:26">=</operator> <operator pos:start="126:28" pos:end="126:28">&amp;</operator><name pos:start="126:29" pos:end="126:42"><name pos:start="126:29" pos:end="126:30">oc</name><operator pos:start="126:31" pos:end="126:32">-&gt;</operator><name pos:start="126:33" pos:end="126:39">streams</name><index pos:start="126:40" pos:end="126:42">[<expr pos:start="126:41" pos:end="126:41"><name pos:start="126:41" pos:end="126:41">i</name></expr>]</index></name><operator pos:start="126:43" pos:end="126:44">-&gt;</operator><name pos:start="126:45" pos:end="126:52">metadata</name></expr>;</expr_stmt>

                <expr_stmt pos:start="128:17" pos:end="128:73"><expr pos:start="128:17" pos:end="128:72"><call pos:start="128:17" pos:end="128:72"><name pos:start="128:17" pos:end="128:28">av_dict_copy</name><argument_list pos:start="128:29" pos:end="128:72">(<argument pos:start="128:30" pos:end="128:37"><expr pos:start="128:30" pos:end="128:37"><name pos:start="128:30" pos:end="128:37">meta_out</name></expr></argument>, <argument pos:start="128:40" pos:end="128:47"><expr pos:start="128:40" pos:end="128:47"><operator pos:start="128:40" pos:end="128:40">*</operator><name pos:start="128:41" pos:end="128:47">meta_in</name></expr></argument>, <argument pos:start="128:50" pos:end="128:71"><expr pos:start="128:50" pos:end="128:71"><name pos:start="128:50" pos:end="128:71">AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="130:15" pos:end="132:32">else if <condition pos:start="130:23" pos:end="130:31">(<expr pos:start="130:24" pos:end="130:30"><name pos:start="130:24" pos:end="130:26">ret</name> <operator pos:start="130:28" pos:end="130:28">&lt;</operator> <literal type="number" pos:start="130:30" pos:end="130:30">0</literal></expr>)</condition><block type="pseudo" pos:start="132:17" pos:end="132:32"><block_content pos:start="132:17" pos:end="132:32">

                <expr_stmt pos:start="132:17" pos:end="132:32"><expr pos:start="132:17" pos:end="132:31"><call pos:start="132:17" pos:end="132:31"><name pos:start="132:17" pos:end="132:28">exit_program</name><argument_list pos:start="132:29" pos:end="132:31">(<argument pos:start="132:30" pos:end="132:30"><expr pos:start="132:30" pos:end="132:30"><literal type="number" pos:start="132:30" pos:end="132:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="136:7" pos:end="138:65">else<block type="pseudo" pos:start="138:9" pos:end="138:65"><block_content pos:start="138:9" pos:end="138:65">

        <expr_stmt pos:start="138:9" pos:end="138:65"><expr pos:start="138:9" pos:end="138:64"><call pos:start="138:9" pos:end="138:64"><name pos:start="138:9" pos:end="138:20">av_dict_copy</name><argument_list pos:start="138:21" pos:end="138:64">(<argument pos:start="138:22" pos:end="138:29"><expr pos:start="138:22" pos:end="138:29"><name pos:start="138:22" pos:end="138:29">meta_out</name></expr></argument>, <argument pos:start="138:32" pos:end="138:39"><expr pos:start="138:32" pos:end="138:39"><operator pos:start="138:32" pos:end="138:32">*</operator><name pos:start="138:33" pos:end="138:39">meta_in</name></expr></argument>, <argument pos:start="138:42" pos:end="138:63"><expr pos:start="138:42" pos:end="138:63"><name pos:start="138:42" pos:end="138:63">AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <return pos:start="142:5" pos:end="142:13">return <expr pos:start="142:12" pos:end="142:12"><literal type="number" pos:start="142:12" pos:end="142:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
