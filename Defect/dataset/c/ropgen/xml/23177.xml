<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23177.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">os_host_main_loop_wait</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:33"><name pos:start="1:29" pos:end="1:31">int</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:40">timeout</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:17">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:17">ret2</name></decl>, <decl pos:start="5:20" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:20">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PollingEntry</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">pe</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:68">/* XXX: need to suppress polling by better using win32 events */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:12"><expr pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <literal type="number" pos:start="13:11" pos:end="13:11">0</literal></expr>;</expr_stmt>

    <for pos:start="15:5" pos:end="19:5">for<control pos:start="15:8" pos:end="15:60">(<init pos:start="15:9" pos:end="15:33"><expr pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:10">pe</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:32">first_polling_entry</name></expr>;</init> <condition pos:start="15:35" pos:end="15:45"><expr pos:start="15:35" pos:end="15:44"><name pos:start="15:35" pos:end="15:36">pe</name> <operator pos:start="15:38" pos:end="15:39">!=</operator> <name pos:start="15:41" pos:end="15:44">NULL</name></expr>;</condition> <incr pos:start="15:47" pos:end="15:59"><expr pos:start="15:47" pos:end="15:59"><name pos:start="15:47" pos:end="15:48">pe</name> <operator pos:start="15:50" pos:end="15:50">=</operator> <name pos:start="15:52" pos:end="15:59"><name pos:start="15:52" pos:end="15:53">pe</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:59">next</name></name></expr></incr>)</control> <block pos:start="15:62" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:36">

        <expr_stmt pos:start="17:9" pos:end="17:36"><expr pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:14">|=</operator> <call pos:start="17:16" pos:end="17:35"><name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:17">pe</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:23">func</name></name><argument_list pos:start="17:24" pos:end="17:35">(<argument pos:start="17:25" pos:end="17:34"><expr pos:start="17:25" pos:end="17:34"><name pos:start="17:25" pos:end="17:34"><name pos:start="17:25" pos:end="17:26">pe</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:34">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="21:5" pos:end="81:5"><if pos:start="21:5" pos:end="81:5">if <condition pos:start="21:8" pos:end="21:17">(<expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:14">==</operator> <literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>)</condition> <block pos:start="21:19" pos:end="81:5">{<block_content pos:start="23:9" pos:end="79:9">

        <decl_stmt pos:start="23:9" pos:end="23:16"><decl pos:start="23:9" pos:end="23:15"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:15">err</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:39"><decl pos:start="25:9" pos:end="25:38"><type pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:19">WaitObjects</name> <modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:22">w</name> <init pos:start="25:24" pos:end="25:38">= <expr pos:start="25:26" pos:end="25:38"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:38">wait_objects</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:37"><expr pos:start="29:9" pos:end="29:36"><call pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="29:35" pos:end="29:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:73"><expr pos:start="31:9" pos:end="31:72"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:72"><name pos:start="31:15" pos:end="31:36">WaitForMultipleObjects</name><argument_list pos:start="31:37" pos:end="31:72">(<argument pos:start="31:38" pos:end="31:43"><expr pos:start="31:38" pos:end="31:43"><name pos:start="31:38" pos:end="31:43"><name pos:start="31:38" pos:end="31:38">w</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:43">num</name></name></expr></argument>, <argument pos:start="31:46" pos:end="31:54"><expr pos:start="31:46" pos:end="31:54"><name pos:start="31:46" pos:end="31:54"><name pos:start="31:46" pos:end="31:46">w</name><operator pos:start="31:47" pos:end="31:48">-&gt;</operator><name pos:start="31:49" pos:end="31:54">events</name></name></expr></argument>, <argument pos:start="31:57" pos:end="31:61"><expr pos:start="31:57" pos:end="31:61"><name pos:start="31:57" pos:end="31:61">FALSE</name></expr></argument>, <argument pos:start="31:64" pos:end="31:71"><expr pos:start="31:64" pos:end="31:71"><operator pos:start="31:64" pos:end="31:64">*</operator><name pos:start="31:65" pos:end="31:71">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:35"><expr pos:start="33:9" pos:end="33:34"><call pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:32">qemu_mutex_lock_iothread</name><argument_list pos:start="33:33" pos:end="33:34">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="79:9"><if pos:start="35:9" pos:end="71:9">if <condition pos:start="35:12" pos:end="35:74">(<expr pos:start="35:13" pos:end="35:73"><name pos:start="35:13" pos:end="35:25">WAIT_OBJECT_0</name> <operator pos:start="35:27" pos:end="35:27">+</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal> <operator pos:start="35:31" pos:end="35:32">&lt;=</operator> <name pos:start="35:34" pos:end="35:36">ret</name> <operator pos:start="35:38" pos:end="35:39">&amp;&amp;</operator> <name pos:start="35:41" pos:end="35:43">ret</name> <operator pos:start="35:45" pos:end="35:46">&lt;=</operator> <name pos:start="35:48" pos:end="35:60">WAIT_OBJECT_0</name> <operator pos:start="35:62" pos:end="35:62">+</operator> <name pos:start="35:64" pos:end="35:69"><name pos:start="35:64" pos:end="35:64">w</name><operator pos:start="35:65" pos:end="35:66">-&gt;</operator><name pos:start="35:67" pos:end="35:69">num</name></name> <operator pos:start="35:71" pos:end="35:71">-</operator> <literal type="number" pos:start="35:73" pos:end="35:73">1</literal></expr>)</condition> <block pos:start="35:76" pos:end="71:9">{<block_content pos:start="37:13" pos:end="69:13">

            <if_stmt pos:start="37:13" pos:end="39:77"><if pos:start="37:13" pos:end="39:77">if <condition pos:start="37:16" pos:end="37:45">(<expr pos:start="37:17" pos:end="37:44"><name pos:start="37:17" pos:end="37:44"><name pos:start="37:17" pos:end="37:17">w</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:23">func</name><index pos:start="37:24" pos:end="37:44">[<expr pos:start="37:25" pos:end="37:43"><name pos:start="37:25" pos:end="37:27">ret</name> <operator pos:start="37:29" pos:end="37:29">-</operator> <name pos:start="37:31" pos:end="37:43">WAIT_OBJECT_0</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:77"><block_content pos:start="39:17" pos:end="39:77">

                <expr_stmt pos:start="39:17" pos:end="39:77"><expr pos:start="39:17" pos:end="39:76"><name pos:start="39:17" pos:end="39:44"><name pos:start="39:17" pos:end="39:17">w</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:23">func</name><index pos:start="39:24" pos:end="39:44">[<expr pos:start="39:25" pos:end="39:43"><name pos:start="39:25" pos:end="39:27">ret</name> <operator pos:start="39:29" pos:end="39:29">-</operator> <name pos:start="39:31" pos:end="39:43">WAIT_OBJECT_0</name></expr>]</index></name><operator pos:start="39:45" pos:end="39:45">(</operator><name pos:start="39:46" pos:end="39:75"><name pos:start="39:46" pos:end="39:46">w</name><operator pos:start="39:47" pos:end="39:48">-&gt;</operator><name pos:start="39:49" pos:end="39:54">opaque</name><index pos:start="39:55" pos:end="39:75">[<expr pos:start="39:56" pos:end="39:74"><name pos:start="39:56" pos:end="39:58">ret</name> <operator pos:start="39:60" pos:end="39:60">-</operator> <name pos:start="39:62" pos:end="39:74">WAIT_OBJECT_0</name></expr>]</index></name><operator pos:start="39:76" pos:end="39:76">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="43:13" pos:end="43:54">/* Check for additional signaled events */</comment>

            <for pos:start="45:13" pos:end="69:13">for<control pos:start="45:16" pos:end="45:63">(<init pos:start="45:17" pos:end="45:46"><expr pos:start="45:17" pos:end="45:45"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:24">ret</name> <operator pos:start="45:26" pos:end="45:26">-</operator> <name pos:start="45:28" pos:end="45:40">WAIT_OBJECT_0</name> <operator pos:start="45:42" pos:end="45:42">+</operator> <literal type="number" pos:start="45:44" pos:end="45:44">1</literal><operator pos:start="45:45" pos:end="45:45">)</operator></expr>;</init> <condition pos:start="45:48" pos:end="45:58"><expr pos:start="45:48" pos:end="45:57"><name pos:start="45:48" pos:end="45:48">i</name> <operator pos:start="45:50" pos:end="45:50">&lt;</operator> <name pos:start="45:52" pos:end="45:57"><name pos:start="45:52" pos:end="45:52">w</name><operator pos:start="45:53" pos:end="45:54">-&gt;</operator><name pos:start="45:55" pos:end="45:57">num</name></name></expr>;</condition> <incr pos:start="45:60" pos:end="45:62"><expr pos:start="45:60" pos:end="45:62"><name pos:start="45:60" pos:end="45:60">i</name><operator pos:start="45:61" pos:end="45:62">++</operator></expr></incr>)</control> <block pos:start="45:65" pos:end="69:13">{<block_content pos:start="51:17" pos:end="67:17">



                <comment type="block" pos:start="49:17" pos:end="49:48">/* Check if event is signaled */</comment>

                <expr_stmt pos:start="51:17" pos:end="51:60"><expr pos:start="51:17" pos:end="51:59"><name pos:start="51:17" pos:end="51:20">ret2</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:59"><name pos:start="51:24" pos:end="51:42">WaitForSingleObject</name><argument_list pos:start="51:43" pos:end="51:59">(<argument pos:start="51:44" pos:end="51:55"><expr pos:start="51:44" pos:end="51:55"><name pos:start="51:44" pos:end="51:55"><name pos:start="51:44" pos:end="51:44">w</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:52">events</name><index pos:start="51:53" pos:end="51:55">[<expr pos:start="51:54" pos:end="51:54"><name pos:start="51:54" pos:end="51:54">i</name></expr>]</index></name></expr></argument>, <argument pos:start="51:58" pos:end="51:58"><expr pos:start="51:58" pos:end="51:58"><literal type="number" pos:start="51:58" pos:end="51:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="67:17"><if pos:start="53:17" pos:end="59:17">if<condition pos:start="53:19" pos:end="53:41">(<expr pos:start="53:20" pos:end="53:40"><name pos:start="53:20" pos:end="53:23">ret2</name> <operator pos:start="53:25" pos:end="53:26">==</operator> <name pos:start="53:28" pos:end="53:40">WAIT_OBJECT_0</name></expr>)</condition> <block pos:start="53:43" pos:end="59:17">{<block_content pos:start="55:21" pos:end="57:49">

                    <if_stmt pos:start="55:21" pos:end="57:49"><if pos:start="55:21" pos:end="57:49">if <condition pos:start="55:24" pos:end="55:35">(<expr pos:start="55:25" pos:end="55:34"><name pos:start="55:25" pos:end="55:34"><name pos:start="55:25" pos:end="55:25">w</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:31">func</name><index pos:start="55:32" pos:end="55:34">[<expr pos:start="55:33" pos:end="55:33"><name pos:start="55:33" pos:end="55:33">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="57:25" pos:end="57:49"><block_content pos:start="57:25" pos:end="57:49">

                        <expr_stmt pos:start="57:25" pos:end="57:49"><expr pos:start="57:25" pos:end="57:48"><name pos:start="57:25" pos:end="57:34"><name pos:start="57:25" pos:end="57:25">w</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:31">func</name><index pos:start="57:32" pos:end="57:34">[<expr pos:start="57:33" pos:end="57:33"><name pos:start="57:33" pos:end="57:33">i</name></expr>]</index></name><operator pos:start="57:35" pos:end="57:35">(</operator><name pos:start="57:36" pos:end="57:47"><name pos:start="57:36" pos:end="57:36">w</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:44">opaque</name><index pos:start="57:45" pos:end="57:47">[<expr pos:start="57:46" pos:end="57:46"><name pos:start="57:46" pos:end="57:46">i</name></expr>]</index></name><operator pos:start="57:48" pos:end="57:48">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="59:19" pos:end="61:17">else if <condition pos:start="59:27" pos:end="59:48">(<expr pos:start="59:28" pos:end="59:47"><name pos:start="59:28" pos:end="59:31">ret2</name> <operator pos:start="59:33" pos:end="59:34">==</operator> <name pos:start="59:36" pos:end="59:47">WAIT_TIMEOUT</name></expr>)</condition> <block pos:start="59:50" pos:end="61:17">{<block_content>

                </block_content>}</block></if> <else pos:start="61:19" pos:end="67:17">else <block pos:start="61:24" pos:end="67:17">{<block_content pos:start="63:21" pos:end="65:81">

                    <expr_stmt pos:start="63:21" pos:end="63:41"><expr pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:23">err</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <call pos:start="63:27" pos:end="63:40"><name pos:start="63:27" pos:end="63:38">GetLastError</name><argument_list pos:start="63:39" pos:end="63:40">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:81"><expr pos:start="65:21" pos:end="65:80"><call pos:start="65:21" pos:end="65:80"><name pos:start="65:21" pos:end="65:27">fprintf</name><argument_list pos:start="65:28" pos:end="65:80">(<argument pos:start="65:29" pos:end="65:34"><expr pos:start="65:29" pos:end="65:34"><name pos:start="65:29" pos:end="65:34">stderr</name></expr></argument>, <argument pos:start="65:37" pos:end="65:71"><expr pos:start="65:37" pos:end="65:71"><literal type="string" pos:start="65:37" pos:end="65:71">"WaitForSingleObject error %d %d\n"</literal></expr></argument>, <argument pos:start="65:74" pos:end="65:74"><expr pos:start="65:74" pos:end="65:74"><name pos:start="65:74" pos:end="65:74">i</name></expr></argument>, <argument pos:start="65:77" pos:end="65:79"><expr pos:start="65:77" pos:end="65:79"><name pos:start="65:77" pos:end="65:79">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="73:9">else if <condition pos:start="71:19" pos:end="71:39">(<expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:22">ret</name> <operator pos:start="71:24" pos:end="71:25">==</operator> <name pos:start="71:27" pos:end="71:38">WAIT_TIMEOUT</name></expr>)</condition> <block pos:start="71:41" pos:end="73:9">{<block_content>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="79:9">else <block pos:start="73:16" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:78">

            <expr_stmt pos:start="75:13" pos:end="75:33"><expr pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:15">err</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:32"><name pos:start="75:19" pos:end="75:30">GetLastError</name><argument_list pos:start="75:31" pos:end="75:32">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:78"><expr pos:start="77:13" pos:end="77:77"><call pos:start="77:13" pos:end="77:77"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:77">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:66"><expr pos:start="77:29" pos:end="77:66"><literal type="string" pos:start="77:29" pos:end="77:66">"WaitForMultipleObjects error %d %d\n"</literal></expr></argument>, <argument pos:start="77:69" pos:end="77:71"><expr pos:start="77:69" pos:end="77:71"><name pos:start="77:69" pos:end="77:71">ret</name></expr></argument>, <argument pos:start="77:74" pos:end="77:76"><expr pos:start="77:74" pos:end="77:76"><name pos:start="77:74" pos:end="77:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:17"><expr pos:start="85:5" pos:end="85:16"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:12">timeout</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <literal type="number" pos:start="85:16" pos:end="85:16">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
