<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16557.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">ehci_fill_queue</name><parameter_list pos:start="1:27" pos:end="1:41">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:37">EHCIPacket</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:25">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">EHCIQueue</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">q</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:20">p</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:27">queue</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">EHCIqtd</name></type> <name pos:start="7:13" pos:end="7:15">qtd</name> <init pos:start="7:17" pos:end="7:24">= <expr pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:19">p</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:24">qtd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:20">qtdaddr</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="59:5">for <control pos:start="13:9" pos:end="13:12">(<init pos:start="13:10" pos:end="13:10">;</init><condition pos:start="13:11" pos:end="13:11">;</condition><incr/>)</control> <block pos:start="13:14" pos:end="59:5">{<block_content pos:start="15:9" pos:end="57:39">

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:41">(<expr pos:start="15:13" pos:end="15:40"><call pos:start="15:13" pos:end="15:35"><name pos:start="15:13" pos:end="15:22">NLPTR_TBIT</name><argument_list pos:start="15:23" pos:end="15:35">(<argument pos:start="15:24" pos:end="15:34"><expr pos:start="15:24" pos:end="15:34"><name pos:start="15:24" pos:end="15:34"><name pos:start="15:24" pos:end="15:26">qtd</name><operator pos:start="15:27" pos:end="15:27">.</operator><name pos:start="15:28" pos:end="15:34">altnext</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:37" pos:end="15:38">==</operator> <literal type="number" pos:start="15:40" pos:end="15:40">0</literal></expr>)</condition> <block pos:start="15:43" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:18">

            <break pos:start="17:13" pos:end="17:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><call pos:start="21:13" pos:end="21:32"><name pos:start="21:13" pos:end="21:22">NLPTR_TBIT</name><argument_list pos:start="21:23" pos:end="21:32">(<argument pos:start="21:24" pos:end="21:31"><expr pos:start="21:24" pos:end="21:31"><name pos:start="21:24" pos:end="21:31"><name pos:start="21:24" pos:end="21:26">qtd</name><operator pos:start="21:27" pos:end="21:27">.</operator><name pos:start="21:28" pos:end="21:31">next</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:34" pos:end="21:35">!=</operator> <literal type="number" pos:start="21:37" pos:end="21:37">0</literal></expr>)</condition> <block pos:start="21:40" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:27"><expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:15">qtdaddr</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:26"><name pos:start="27:19" pos:end="27:21">qtd</name><operator pos:start="27:22" pos:end="27:22">.</operator><name pos:start="27:23" pos:end="27:26">next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="31:60"><expr pos:start="29:9" pos:end="31:59"><call pos:start="29:9" pos:end="31:59"><name pos:start="29:9" pos:end="29:18">get_dwords</name><argument_list pos:start="29:19" pos:end="31:59">(<argument pos:start="29:20" pos:end="29:26"><expr pos:start="29:20" pos:end="29:26"><name pos:start="29:20" pos:end="29:26"><name pos:start="29:20" pos:end="29:20">q</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:26">ehci</name></name></expr></argument>, <argument pos:start="29:29" pos:end="29:46"><expr pos:start="29:29" pos:end="29:46"><call pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:37">NLPTR_GET</name><argument_list pos:start="29:38" pos:end="29:46">(<argument pos:start="29:39" pos:end="29:45"><expr pos:start="29:39" pos:end="29:45"><name pos:start="29:39" pos:end="29:45">qtdaddr</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:36"><expr pos:start="31:20" pos:end="31:36"><operator pos:start="31:20" pos:end="31:20">(</operator><name pos:start="31:21" pos:end="31:28">uint32_t</name> <operator pos:start="31:30" pos:end="31:30">*</operator><operator pos:start="31:31" pos:end="31:31">)</operator> <operator pos:start="31:33" pos:end="31:33">&amp;</operator><name pos:start="31:34" pos:end="31:36">qtd</name></expr></argument>, <argument pos:start="31:39" pos:end="31:58"><expr pos:start="31:39" pos:end="31:58"><sizeof pos:start="31:39" pos:end="31:53">sizeof<argument_list pos:start="31:45" pos:end="31:53">(<argument pos:start="31:46" pos:end="31:52"><expr pos:start="31:46" pos:end="31:52"><name pos:start="31:46" pos:end="31:52">EHCIqtd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:55" pos:end="31:56">&gt;&gt;</operator> <literal type="number" pos:start="31:58" pos:end="31:58">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><call pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:22">ehci_trace_qtd</name><argument_list pos:start="33:23" pos:end="33:51">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">q</name></expr></argument>, <argument pos:start="33:27" pos:end="33:44"><expr pos:start="33:27" pos:end="33:44"><call pos:start="33:27" pos:end="33:44"><name pos:start="33:27" pos:end="33:35">NLPTR_GET</name><argument_list pos:start="33:36" pos:end="33:44">(<argument pos:start="33:37" pos:end="33:43"><expr pos:start="33:37" pos:end="33:43"><name pos:start="33:37" pos:end="33:43">qtdaddr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:47" pos:end="33:50"><expr pos:start="33:47" pos:end="33:50"><operator pos:start="33:47" pos:end="33:47">&amp;</operator><name pos:start="33:48" pos:end="33:50">qtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:44">(<expr pos:start="35:13" pos:end="35:43"><operator pos:start="35:13" pos:end="35:13">!</operator><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:23"><name pos:start="35:15" pos:end="35:17">qtd</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:23">token</name></name> <operator pos:start="35:25" pos:end="35:25">&amp;</operator> <name pos:start="35:27" pos:end="35:42">QTD_TOKEN_ACTIVE</name><operator pos:start="35:43" pos:end="35:43">)</operator></expr>)</condition> <block pos:start="35:46" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:9">p</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:29">ehci_alloc_packet</name><argument_list pos:start="41:30" pos:end="41:32">(<argument pos:start="41:31" pos:end="41:31"><expr pos:start="41:31" pos:end="41:31"><name pos:start="41:31" pos:end="41:31">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:9">p</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:18">qtdaddr</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:28">qtdaddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:21"><expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:9">p</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:14">qtd</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:20">qtd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:49"><expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:9">p</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:21">usb_status</name></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <call pos:start="47:25" pos:end="47:48"><name pos:start="47:25" pos:end="47:36">ehci_execute</name><argument_list pos:start="47:37" pos:end="47:48">(<argument pos:start="47:38" pos:end="47:38"><expr pos:start="47:38" pos:end="47:38"><name pos:start="47:38" pos:end="47:38">p</name></expr></argument>, <argument pos:start="47:41" pos:end="47:47"><expr pos:start="47:41" pos:end="47:47"><literal type="string" pos:start="47:41" pos:end="47:47">"queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:45">(<expr pos:start="49:13" pos:end="49:44"><name pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:13">p</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:25">usb_status</name></name> <operator pos:start="49:27" pos:end="49:28">==</operator> <name pos:start="49:30" pos:end="49:44">USB_RET_PROCERR</name></expr>)</condition> <block pos:start="49:47" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:18">

            <break pos:start="51:13" pos:end="51:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><call pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:46">(<argument pos:start="55:16" pos:end="55:45"><expr pos:start="55:16" pos:end="55:45"><name pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:16">p</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:28">usb_status</name></name> <operator pos:start="55:30" pos:end="55:31">==</operator> <name pos:start="55:33" pos:end="55:45">USB_RET_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:9">p</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:16">async</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:38">EHCI_ASYNC_INFLIGHT</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="61:5" pos:end="61:25">return <expr pos:start="61:12" pos:end="61:24"><name pos:start="61:12" pos:end="61:24"><name pos:start="61:12" pos:end="61:12">p</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:24">usb_status</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
