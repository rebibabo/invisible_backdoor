<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26779.c" pos:tabs="8"><function pos:start="1:1" pos:end="339:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">acpi_build</name><parameter_list pos:start="1:16" pos:end="1:63">(<parameter pos:start="1:17" pos:end="1:39"><decl pos:start="1:17" pos:end="1:39"><type pos:start="1:17" pos:end="1:39"><name pos:start="1:17" pos:end="1:31">AcpiBuildTables</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">tables</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:62"><decl pos:start="1:42" pos:end="1:62"><type pos:start="1:42" pos:end="1:62"><name pos:start="1:42" pos:end="1:53">MachineState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:62">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="339:1">{<block_content pos:start="5:5" pos:end="337:38">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">PCMachineState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:24">pcms</name> <init pos:start="5:26" pos:end="5:46">= <expr pos:start="5:28" pos:end="5:46"><call pos:start="5:28" pos:end="5:46"><name pos:start="5:28" pos:end="5:37">PC_MACHINE</name><argument_list pos:start="5:38" pos:end="5:46">(<argument pos:start="5:39" pos:end="5:45"><expr pos:start="5:39" pos:end="5:45"><name pos:start="5:39" pos:end="5:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PCMachineClass</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">pcmc</name> <init pos:start="7:26" pos:end="7:53">= <expr pos:start="7:28" pos:end="7:53"><call pos:start="7:28" pos:end="7:53"><name pos:start="7:28" pos:end="7:47">PC_MACHINE_GET_CLASS</name><argument_list pos:start="7:48" pos:end="7:53">(<argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">GArray</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:25">table_offsets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:17">facs</name></decl>, <decl pos:start="11:20" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:20" pos:end="11:23">dsdt</name></decl>, <decl pos:start="11:26" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:26" pos:end="11:29">rsdt</name></decl>, <decl pos:start="11:32" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:32" pos:end="11:35">fadt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">AcpiPmInfo</name></type> <name pos:start="13:16" pos:end="13:17">pm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">AcpiMiscInfo</name></type> <name pos:start="15:18" pos:end="15:21">misc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">AcpiMcfgInfo</name></type> <name pos:start="17:18" pos:end="17:21">mcfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">Range</name></type> <name pos:start="19:11" pos:end="19:18">pci_hole</name></decl>, <decl pos:start="19:21" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:9"/><name pos:start="19:21" pos:end="19:30">pci_hole64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:14">u</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:18">aml_len</name> <init pos:start="23:20" pos:end="23:22">= <expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:45"><decl pos:start="25:5" pos:end="25:44"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:10">GArray</name> <modifier pos:start="25:12" pos:end="25:12">*</modifier></type><name pos:start="25:13" pos:end="25:23">tables_blob</name> <init pos:start="25:25" pos:end="25:44">= <expr pos:start="25:27" pos:end="25:44"><name pos:start="25:27" pos:end="25:44"><name pos:start="25:27" pos:end="25:32">tables</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:44">table_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:60"><decl pos:start="27:5" pos:end="27:59"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:15">AcpiSlicOem</name></type> <name pos:start="27:17" pos:end="27:24">slic_oem</name> <init pos:start="27:26" pos:end="27:59">= <expr pos:start="27:28" pos:end="27:59"><block pos:start="27:28" pos:end="27:59">{ <expr pos:start="27:30" pos:end="27:39"><operator pos:start="27:30" pos:end="27:30">.</operator><name pos:start="27:31" pos:end="27:32">id</name> <operator pos:start="27:34" pos:end="27:34">=</operator> <name pos:start="27:36" pos:end="27:39">NULL</name></expr>, <expr pos:start="27:42" pos:end="27:57"><operator pos:start="27:42" pos:end="27:42">.</operator><name pos:start="27:43" pos:end="27:50">table_id</name> <operator pos:start="27:52" pos:end="27:52">=</operator> <name pos:start="27:54" pos:end="27:57">NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">Object</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:23">vmgenid_dev</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><call pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:20">acpi_get_pm_info</name><argument_list pos:start="33:21" pos:end="33:25">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><operator pos:start="33:22" pos:end="33:22">&amp;</operator><name pos:start="33:23" pos:end="33:24">pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:22">acpi_get_misc_info</name><argument_list pos:start="35:23" pos:end="35:29">(<argument pos:start="35:24" pos:end="35:28"><expr pos:start="35:24" pos:end="35:28"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:28">misc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><call pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:22">acpi_get_pci_holes</name><argument_list pos:start="37:23" pos:end="37:46">(<argument pos:start="37:24" pos:end="37:32"><expr pos:start="37:24" pos:end="37:32"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:32">pci_hole</name></expr></argument>, <argument pos:start="37:35" pos:end="37:45"><expr pos:start="37:35" pos:end="37:45"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:45">pci_hole64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><call pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:21">acpi_get_slic_oem</name><argument_list pos:start="39:22" pos:end="39:32">(<argument pos:start="39:23" pos:end="39:31"><expr pos:start="39:23" pos:end="39:31"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:31">slic_oem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="45:58"><expr pos:start="43:5" pos:end="45:57"><name pos:start="43:5" pos:end="43:17">table_offsets</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="45:57"><name pos:start="43:21" pos:end="43:31">g_array_new</name><argument_list pos:start="43:32" pos:end="45:57">(<argument pos:start="43:33" pos:end="43:37"><expr pos:start="43:33" pos:end="43:37"><name pos:start="43:33" pos:end="43:37">false</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">true</name></expr></argument> <comment type="block" pos:start="43:45" pos:end="43:55">/* clear */</comment>,

                                        <argument pos:start="45:41" pos:end="45:56"><expr pos:start="45:41" pos:end="45:56"><sizeof pos:start="45:41" pos:end="45:56">sizeof<argument_list pos:start="45:47" pos:end="45:56">(<argument pos:start="45:48" pos:end="45:55"><expr pos:start="45:48" pos:end="45:55"><name pos:start="45:48" pos:end="45:55">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><call pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:22">ACPI_BUILD_DPRINTF</name><argument_list pos:start="47:23" pos:end="47:44">(<argument pos:start="47:24" pos:end="47:43"><expr pos:start="47:24" pos:end="47:43"><literal type="string" pos:start="47:24" pos:end="47:43">"init ACPI tables\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="57:54"><expr pos:start="51:5" pos:end="57:53"><call pos:start="51:5" pos:end="57:53"><name pos:start="51:5" pos:end="51:28">bios_linker_loader_alloc</name><argument_list pos:start="51:29" pos:end="57:53">(<argument pos:start="51:30" pos:end="51:43"><expr pos:start="51:30" pos:end="51:43"><name pos:start="51:30" pos:end="51:43"><name pos:start="51:30" pos:end="51:35">tables</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:43">linker</name></name></expr></argument>,

                             <argument pos:start="53:30" pos:end="53:50"><expr pos:start="53:30" pos:end="53:50"><name pos:start="53:30" pos:end="53:50">ACPI_BUILD_TABLE_FILE</name></expr></argument>, <argument pos:start="53:53" pos:end="53:63"><expr pos:start="53:53" pos:end="53:63"><name pos:start="53:53" pos:end="53:63">tables_blob</name></expr></argument>,

                             <argument pos:start="55:30" pos:end="55:31"><expr pos:start="55:30" pos:end="55:31"><literal type="number" pos:start="55:30" pos:end="55:31">64</literal></expr></argument> <comment type="block" pos:start="55:33" pos:end="55:60">/* Ensure FACS is aligned */</comment>,

                             <argument pos:start="57:30" pos:end="57:34"><expr pos:start="57:30" pos:end="57:34"><name pos:start="57:30" pos:end="57:34">false</name></expr></argument> <comment type="block" pos:start="57:36" pos:end="57:52">/* high memory */</comment>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="69:7">/*

     * FACS is pointed to by FADT.

     * We place it first since it's the only table that has alignment

     * requirements.

     */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:8">facs</name> <operator pos:start="71:10" pos:end="71:10">=</operator> <name pos:start="71:12" pos:end="71:27"><name pos:start="71:12" pos:end="71:22">tables_blob</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:27">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><call pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:14">build_facs</name><argument_list pos:start="73:15" pos:end="73:43">(<argument pos:start="73:16" pos:end="73:26"><expr pos:start="73:16" pos:end="73:26"><name pos:start="73:16" pos:end="73:26">tables_blob</name></expr></argument>, <argument pos:start="73:29" pos:end="73:42"><expr pos:start="73:29" pos:end="73:42"><name pos:start="73:29" pos:end="73:42"><name pos:start="73:29" pos:end="73:34">tables</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:42">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:36">/* DSDT is pointed to by FADT */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:8">dsdt</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <name pos:start="79:12" pos:end="79:27"><name pos:start="79:12" pos:end="79:22">tables_blob</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:27">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:48"><expr pos:start="81:5" pos:end="83:47"><call pos:start="81:5" pos:end="83:47"><name pos:start="81:5" pos:end="81:14">build_dsdt</name><argument_list pos:start="81:15" pos:end="83:47">(<argument pos:start="81:16" pos:end="81:26"><expr pos:start="81:16" pos:end="81:26"><name pos:start="81:16" pos:end="81:26">tables_blob</name></expr></argument>, <argument pos:start="81:29" pos:end="81:42"><expr pos:start="81:29" pos:end="81:42"><name pos:start="81:29" pos:end="81:42"><name pos:start="81:29" pos:end="81:34">tables</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:42">linker</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:47"><expr pos:start="81:45" pos:end="81:47"><operator pos:start="81:45" pos:end="81:45">&amp;</operator><name pos:start="81:46" pos:end="81:47">pm</name></expr></argument>, <argument pos:start="81:50" pos:end="81:54"><expr pos:start="81:50" pos:end="81:54"><operator pos:start="81:50" pos:end="81:50">&amp;</operator><name pos:start="81:51" pos:end="81:54">misc</name></expr></argument>,

               <argument pos:start="83:16" pos:end="83:24"><expr pos:start="83:16" pos:end="83:24"><operator pos:start="83:16" pos:end="83:16">&amp;</operator><name pos:start="83:17" pos:end="83:24">pci_hole</name></expr></argument>, <argument pos:start="83:27" pos:end="83:37"><expr pos:start="83:27" pos:end="83:37"><operator pos:start="83:27" pos:end="83:27">&amp;</operator><name pos:start="83:28" pos:end="83:37">pci_hole64</name></expr></argument>, <argument pos:start="83:40" pos:end="83:46"><expr pos:start="83:40" pos:end="83:46"><name pos:start="83:40" pos:end="83:46">machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="91:7">/* Count the size of the DSDT and SSDT, we will need it for legacy

     * sizing of ACPI tables.

     */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:11">aml_len</name> <operator pos:start="93:13" pos:end="93:14">+=</operator> <name pos:start="93:16" pos:end="93:31"><name pos:start="93:16" pos:end="93:26">tables_blob</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:31">len</name></name> <operator pos:start="93:33" pos:end="93:33">-</operator> <name pos:start="93:35" pos:end="93:38">dsdt</name></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:40">/* ACPI tables pointed to by RSDT */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:8">fadt</name> <operator pos:start="99:10" pos:end="99:10">=</operator> <name pos:start="99:12" pos:end="99:27"><name pos:start="99:12" pos:end="99:22">tables_blob</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:27">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:47"><expr pos:start="101:5" pos:end="101:46"><call pos:start="101:5" pos:end="101:46"><name pos:start="101:5" pos:end="101:18">acpi_add_table</name><argument_list pos:start="101:19" pos:end="101:46">(<argument pos:start="101:20" pos:end="101:32"><expr pos:start="101:20" pos:end="101:32"><name pos:start="101:20" pos:end="101:32">table_offsets</name></expr></argument>, <argument pos:start="101:35" pos:end="101:45"><expr pos:start="101:35" pos:end="101:45"><name pos:start="101:35" pos:end="101:45">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:47"><expr pos:start="103:5" pos:end="105:46"><call pos:start="103:5" pos:end="105:46"><name pos:start="103:5" pos:end="103:14">build_fadt</name><argument_list pos:start="103:15" pos:end="105:46">(<argument pos:start="103:16" pos:end="103:26"><expr pos:start="103:16" pos:end="103:26"><name pos:start="103:16" pos:end="103:26">tables_blob</name></expr></argument>, <argument pos:start="103:29" pos:end="103:42"><expr pos:start="103:29" pos:end="103:42"><name pos:start="103:29" pos:end="103:42"><name pos:start="103:29" pos:end="103:34">tables</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:42">linker</name></name></expr></argument>, <argument pos:start="103:45" pos:end="103:47"><expr pos:start="103:45" pos:end="103:47"><operator pos:start="103:45" pos:end="103:45">&amp;</operator><name pos:start="103:46" pos:end="103:47">pm</name></expr></argument>, <argument pos:start="103:50" pos:end="103:53"><expr pos:start="103:50" pos:end="103:53"><name pos:start="103:50" pos:end="103:53">facs</name></expr></argument>, <argument pos:start="103:56" pos:end="103:59"><expr pos:start="103:56" pos:end="103:59"><name pos:start="103:56" pos:end="103:59">dsdt</name></expr></argument>,

               <argument pos:start="105:16" pos:end="105:26"><expr pos:start="105:16" pos:end="105:26"><name pos:start="105:16" pos:end="105:26"><name pos:start="105:16" pos:end="105:23">slic_oem</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:26">id</name></name></expr></argument>, <argument pos:start="105:29" pos:end="105:45"><expr pos:start="105:29" pos:end="105:45"><name pos:start="105:29" pos:end="105:45"><name pos:start="105:29" pos:end="105:36">slic_oem</name><operator pos:start="105:37" pos:end="105:37">.</operator><name pos:start="105:38" pos:end="105:45">table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:39"><expr pos:start="107:5" pos:end="107:38"><name pos:start="107:5" pos:end="107:11">aml_len</name> <operator pos:start="107:13" pos:end="107:14">+=</operator> <name pos:start="107:16" pos:end="107:31"><name pos:start="107:16" pos:end="107:26">tables_blob</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:31">len</name></name> <operator pos:start="107:33" pos:end="107:33">-</operator> <name pos:start="107:35" pos:end="107:38">fadt</name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:47"><expr pos:start="111:5" pos:end="111:46"><call pos:start="111:5" pos:end="111:46"><name pos:start="111:5" pos:end="111:18">acpi_add_table</name><argument_list pos:start="111:19" pos:end="111:46">(<argument pos:start="111:20" pos:end="111:32"><expr pos:start="111:20" pos:end="111:32"><name pos:start="111:20" pos:end="111:32">table_offsets</name></expr></argument>, <argument pos:start="111:35" pos:end="111:45"><expr pos:start="111:35" pos:end="111:45"><name pos:start="111:35" pos:end="111:45">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:50"><expr pos:start="113:5" pos:end="113:49"><call pos:start="113:5" pos:end="113:49"><name pos:start="113:5" pos:end="113:14">build_madt</name><argument_list pos:start="113:15" pos:end="113:49">(<argument pos:start="113:16" pos:end="113:26"><expr pos:start="113:16" pos:end="113:26"><name pos:start="113:16" pos:end="113:26">tables_blob</name></expr></argument>, <argument pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:42"><name pos:start="113:29" pos:end="113:42"><name pos:start="113:29" pos:end="113:34">tables</name><operator pos:start="113:35" pos:end="113:36">-&gt;</operator><name pos:start="113:37" pos:end="113:42">linker</name></name></expr></argument>, <argument pos:start="113:45" pos:end="113:48"><expr pos:start="113:45" pos:end="113:48"><name pos:start="113:45" pos:end="113:48">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:15">vmgenid_dev</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:36"><name pos:start="117:19" pos:end="117:34">find_vmgenid_dev</name><argument_list pos:start="117:35" pos:end="117:36">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="127:5"><if pos:start="119:5" pos:end="127:5">if <condition pos:start="119:8" pos:end="119:20">(<expr pos:start="119:9" pos:end="119:19"><name pos:start="119:9" pos:end="119:19">vmgenid_dev</name></expr>)</condition> <block pos:start="119:22" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:60">

        <expr_stmt pos:start="121:9" pos:end="121:51"><expr pos:start="121:9" pos:end="121:50"><call pos:start="121:9" pos:end="121:50"><name pos:start="121:9" pos:end="121:22">acpi_add_table</name><argument_list pos:start="121:23" pos:end="121:50">(<argument pos:start="121:24" pos:end="121:36"><expr pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:36">table_offsets</name></expr></argument>, <argument pos:start="121:39" pos:end="121:49"><expr pos:start="121:39" pos:end="121:49"><name pos:start="121:39" pos:end="121:49">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="125:60"><expr pos:start="123:9" pos:end="125:59"><call pos:start="123:9" pos:end="125:59"><name pos:start="123:9" pos:end="123:26">vmgenid_build_acpi</name><argument_list pos:start="123:27" pos:end="125:59">(<argument pos:start="123:28" pos:end="123:47"><expr pos:start="123:28" pos:end="123:47"><call pos:start="123:28" pos:end="123:47"><name pos:start="123:28" pos:end="123:34">VMGENID</name><argument_list pos:start="123:35" pos:end="123:47">(<argument pos:start="123:36" pos:end="123:46"><expr pos:start="123:36" pos:end="123:46"><name pos:start="123:36" pos:end="123:46">vmgenid_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:50" pos:end="123:60"><expr pos:start="123:50" pos:end="123:60"><name pos:start="123:50" pos:end="123:60">tables_blob</name></expr></argument>,

                           <argument pos:start="125:28" pos:end="125:42"><expr pos:start="125:28" pos:end="125:42"><name pos:start="125:28" pos:end="125:42"><name pos:start="125:28" pos:end="125:33">tables</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:42">vmgenid</name></name></expr></argument>, <argument pos:start="125:45" pos:end="125:58"><expr pos:start="125:45" pos:end="125:58"><name pos:start="125:45" pos:end="125:58"><name pos:start="125:45" pos:end="125:50">tables</name><operator pos:start="125:51" pos:end="125:52">-&gt;</operator><name pos:start="125:53" pos:end="125:58">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:22">(<expr pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:12">misc</name><operator pos:start="131:13" pos:end="131:13">.</operator><name pos:start="131:14" pos:end="131:21">has_hpet</name></name></expr>)</condition> <block pos:start="131:24" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:48">

        <expr_stmt pos:start="133:9" pos:end="133:51"><expr pos:start="133:9" pos:end="133:50"><call pos:start="133:9" pos:end="133:50"><name pos:start="133:9" pos:end="133:22">acpi_add_table</name><argument_list pos:start="133:23" pos:end="133:50">(<argument pos:start="133:24" pos:end="133:36"><expr pos:start="133:24" pos:end="133:36"><name pos:start="133:24" pos:end="133:36">table_offsets</name></expr></argument>, <argument pos:start="133:39" pos:end="133:49"><expr pos:start="133:39" pos:end="133:49"><name pos:start="133:39" pos:end="133:49">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:48"><expr pos:start="135:9" pos:end="135:47"><call pos:start="135:9" pos:end="135:47"><name pos:start="135:9" pos:end="135:18">build_hpet</name><argument_list pos:start="135:19" pos:end="135:47">(<argument pos:start="135:20" pos:end="135:30"><expr pos:start="135:20" pos:end="135:30"><name pos:start="135:20" pos:end="135:30">tables_blob</name></expr></argument>, <argument pos:start="135:33" pos:end="135:46"><expr pos:start="135:33" pos:end="135:46"><name pos:start="135:33" pos:end="135:46"><name pos:start="135:33" pos:end="135:38">tables</name><operator pos:start="135:39" pos:end="135:40">-&gt;</operator><name pos:start="135:41" pos:end="135:46">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="155:5"><if pos:start="139:5" pos:end="155:5">if <condition pos:start="139:8" pos:end="139:47">(<expr pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:24"><name pos:start="139:9" pos:end="139:12">misc</name><operator pos:start="139:13" pos:end="139:13">.</operator><name pos:start="139:14" pos:end="139:24">tpm_version</name></name> <operator pos:start="139:26" pos:end="139:27">!=</operator> <name pos:start="139:29" pos:end="139:46">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="139:49" pos:end="155:5">{<block_content pos:start="141:9" pos:end="153:9">

        <expr_stmt pos:start="141:9" pos:end="141:51"><expr pos:start="141:9" pos:end="141:50"><call pos:start="141:9" pos:end="141:50"><name pos:start="141:9" pos:end="141:22">acpi_add_table</name><argument_list pos:start="141:23" pos:end="141:50">(<argument pos:start="141:24" pos:end="141:36"><expr pos:start="141:24" pos:end="141:36"><name pos:start="141:24" pos:end="141:36">table_offsets</name></expr></argument>, <argument pos:start="141:39" pos:end="141:49"><expr pos:start="141:39" pos:end="141:49"><name pos:start="141:39" pos:end="141:49">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:69"><expr pos:start="143:9" pos:end="143:68"><call pos:start="143:9" pos:end="143:68"><name pos:start="143:9" pos:end="143:22">build_tpm_tcpa</name><argument_list pos:start="143:23" pos:end="143:68">(<argument pos:start="143:24" pos:end="143:34"><expr pos:start="143:24" pos:end="143:34"><name pos:start="143:24" pos:end="143:34">tables_blob</name></expr></argument>, <argument pos:start="143:37" pos:end="143:50"><expr pos:start="143:37" pos:end="143:50"><name pos:start="143:37" pos:end="143:50"><name pos:start="143:37" pos:end="143:42">tables</name><operator pos:start="143:43" pos:end="143:44">-&gt;</operator><name pos:start="143:45" pos:end="143:50">linker</name></name></expr></argument>, <argument pos:start="143:53" pos:end="143:67"><expr pos:start="143:53" pos:end="143:67"><name pos:start="143:53" pos:end="143:67"><name pos:start="143:53" pos:end="143:58">tables</name><operator pos:start="143:59" pos:end="143:60">-&gt;</operator><name pos:start="143:61" pos:end="143:67">tcpalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:48">(<expr pos:start="147:13" pos:end="147:47"><name pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:16">misc</name><operator pos:start="147:17" pos:end="147:17">.</operator><name pos:start="147:18" pos:end="147:28">tpm_version</name></name> <operator pos:start="147:30" pos:end="147:31">==</operator> <name pos:start="147:33" pos:end="147:47">TPM_VERSION_2_0</name></expr>)</condition> <block pos:start="147:50" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:52">

            <expr_stmt pos:start="149:13" pos:end="149:55"><expr pos:start="149:13" pos:end="149:54"><call pos:start="149:13" pos:end="149:54"><name pos:start="149:13" pos:end="149:26">acpi_add_table</name><argument_list pos:start="149:27" pos:end="149:54">(<argument pos:start="149:28" pos:end="149:40"><expr pos:start="149:28" pos:end="149:40"><name pos:start="149:28" pos:end="149:40">table_offsets</name></expr></argument>, <argument pos:start="149:43" pos:end="149:53"><expr pos:start="149:43" pos:end="149:53"><name pos:start="149:43" pos:end="149:53">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:52"><expr pos:start="151:13" pos:end="151:51"><call pos:start="151:13" pos:end="151:51"><name pos:start="151:13" pos:end="151:22">build_tpm2</name><argument_list pos:start="151:23" pos:end="151:51">(<argument pos:start="151:24" pos:end="151:34"><expr pos:start="151:24" pos:end="151:34"><name pos:start="151:24" pos:end="151:34">tables_blob</name></expr></argument>, <argument pos:start="151:37" pos:end="151:50"><expr pos:start="151:37" pos:end="151:50"><name pos:start="151:37" pos:end="151:50"><name pos:start="151:37" pos:end="151:42">tables</name><operator pos:start="151:43" pos:end="151:44">-&gt;</operator><name pos:start="151:45" pos:end="151:50">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="157:5" pos:end="171:5"><if pos:start="157:5" pos:end="171:5">if <condition pos:start="157:8" pos:end="157:25">(<expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:12">pcms</name><operator pos:start="157:13" pos:end="157:14">-&gt;</operator><name pos:start="157:15" pos:end="157:24">numa_nodes</name></name></expr>)</condition> <block pos:start="157:27" pos:end="171:5">{<block_content pos:start="159:9" pos:end="169:9">

        <expr_stmt pos:start="159:9" pos:end="159:51"><expr pos:start="159:9" pos:end="159:50"><call pos:start="159:9" pos:end="159:50"><name pos:start="159:9" pos:end="159:22">acpi_add_table</name><argument_list pos:start="159:23" pos:end="159:50">(<argument pos:start="159:24" pos:end="159:36"><expr pos:start="159:24" pos:end="159:36"><name pos:start="159:24" pos:end="159:36">table_offsets</name></expr></argument>, <argument pos:start="159:39" pos:end="159:49"><expr pos:start="159:39" pos:end="159:49"><name pos:start="159:39" pos:end="159:49">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:57"><expr pos:start="161:9" pos:end="161:56"><call pos:start="161:9" pos:end="161:56"><name pos:start="161:9" pos:end="161:18">build_srat</name><argument_list pos:start="161:19" pos:end="161:56">(<argument pos:start="161:20" pos:end="161:30"><expr pos:start="161:20" pos:end="161:30"><name pos:start="161:20" pos:end="161:30">tables_blob</name></expr></argument>, <argument pos:start="161:33" pos:end="161:46"><expr pos:start="161:33" pos:end="161:46"><name pos:start="161:33" pos:end="161:46"><name pos:start="161:33" pos:end="161:38">tables</name><operator pos:start="161:39" pos:end="161:40">-&gt;</operator><name pos:start="161:41" pos:end="161:46">linker</name></name></expr></argument>, <argument pos:start="161:49" pos:end="161:55"><expr pos:start="161:49" pos:end="161:55"><name pos:start="161:49" pos:end="161:55">machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:31">(<expr pos:start="163:13" pos:end="163:30"><name pos:start="163:13" pos:end="163:30">have_numa_distance</name></expr>)</condition> <block pos:start="163:33" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:52">

            <expr_stmt pos:start="165:13" pos:end="165:55"><expr pos:start="165:13" pos:end="165:54"><call pos:start="165:13" pos:end="165:54"><name pos:start="165:13" pos:end="165:26">acpi_add_table</name><argument_list pos:start="165:27" pos:end="165:54">(<argument pos:start="165:28" pos:end="165:40"><expr pos:start="165:28" pos:end="165:40"><name pos:start="165:28" pos:end="165:40">table_offsets</name></expr></argument>, <argument pos:start="165:43" pos:end="165:53"><expr pos:start="165:43" pos:end="165:53"><name pos:start="165:43" pos:end="165:53">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:52"><expr pos:start="167:13" pos:end="167:51"><call pos:start="167:13" pos:end="167:51"><name pos:start="167:13" pos:end="167:22">build_slit</name><argument_list pos:start="167:23" pos:end="167:51">(<argument pos:start="167:24" pos:end="167:34"><expr pos:start="167:24" pos:end="167:34"><name pos:start="167:24" pos:end="167:34">tables_blob</name></expr></argument>, <argument pos:start="167:37" pos:end="167:50"><expr pos:start="167:37" pos:end="167:50"><name pos:start="167:37" pos:end="167:50"><name pos:start="167:37" pos:end="167:42">tables</name><operator pos:start="167:43" pos:end="167:44">-&gt;</operator><name pos:start="167:45" pos:end="167:50">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="173:5" pos:end="179:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:29">(<expr pos:start="173:9" pos:end="173:28"><call pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:21">acpi_get_mcfg</name><argument_list pos:start="173:22" pos:end="173:28">(<argument pos:start="173:23" pos:end="173:27"><expr pos:start="173:23" pos:end="173:27"><operator pos:start="173:23" pos:end="173:23">&amp;</operator><name pos:start="173:24" pos:end="173:27">mcfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:31" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:59">

        <expr_stmt pos:start="175:9" pos:end="175:51"><expr pos:start="175:9" pos:end="175:50"><call pos:start="175:9" pos:end="175:50"><name pos:start="175:9" pos:end="175:22">acpi_add_table</name><argument_list pos:start="175:23" pos:end="175:50">(<argument pos:start="175:24" pos:end="175:36"><expr pos:start="175:24" pos:end="175:36"><name pos:start="175:24" pos:end="175:36">table_offsets</name></expr></argument>, <argument pos:start="175:39" pos:end="175:49"><expr pos:start="175:39" pos:end="175:49"><name pos:start="175:39" pos:end="175:49">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:59"><expr pos:start="177:9" pos:end="177:58"><call pos:start="177:9" pos:end="177:58"><name pos:start="177:9" pos:end="177:22">build_mcfg_q35</name><argument_list pos:start="177:23" pos:end="177:58">(<argument pos:start="177:24" pos:end="177:34"><expr pos:start="177:24" pos:end="177:34"><name pos:start="177:24" pos:end="177:34">tables_blob</name></expr></argument>, <argument pos:start="177:37" pos:end="177:50"><expr pos:start="177:37" pos:end="177:50"><name pos:start="177:37" pos:end="177:50"><name pos:start="177:37" pos:end="177:42">tables</name><operator pos:start="177:43" pos:end="177:44">-&gt;</operator><name pos:start="177:45" pos:end="177:50">linker</name></name></expr></argument>, <argument pos:start="177:53" pos:end="177:57"><expr pos:start="177:53" pos:end="177:57"><operator pos:start="177:53" pos:end="177:53">&amp;</operator><name pos:start="177:54" pos:end="177:57">mcfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="181:5" pos:end="199:5"><if pos:start="181:5" pos:end="199:5">if <condition pos:start="181:8" pos:end="181:32">(<expr pos:start="181:9" pos:end="181:31"><call pos:start="181:9" pos:end="181:31"><name pos:start="181:9" pos:end="181:29">x86_iommu_get_default</name><argument_list pos:start="181:30" pos:end="181:31">()</argument_list></call></expr>)</condition> <block pos:start="181:34" pos:end="199:5">{<block_content pos:start="183:9" pos:end="197:9">

        <decl_stmt pos:start="183:9" pos:end="183:51"><decl pos:start="183:9" pos:end="183:50"><type pos:start="183:9" pos:end="183:17"><name pos:start="183:9" pos:end="183:17">IommuType</name></type> <name pos:start="183:19" pos:end="183:27">IOMMUType</name> <init pos:start="183:29" pos:end="183:50">= <expr pos:start="183:31" pos:end="183:50"><call pos:start="183:31" pos:end="183:50"><name pos:start="183:31" pos:end="183:48">x86_iommu_get_type</name><argument_list pos:start="183:49" pos:end="183:50">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="185:9" pos:end="197:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:34">(<expr pos:start="185:13" pos:end="185:33"><name pos:start="185:13" pos:end="185:21">IOMMUType</name> <operator pos:start="185:23" pos:end="185:24">==</operator> <name pos:start="185:26" pos:end="185:33">TYPE_AMD</name></expr>)</condition> <block pos:start="185:36" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:57">

            <expr_stmt pos:start="187:13" pos:end="187:55"><expr pos:start="187:13" pos:end="187:54"><call pos:start="187:13" pos:end="187:54"><name pos:start="187:13" pos:end="187:26">acpi_add_table</name><argument_list pos:start="187:27" pos:end="187:54">(<argument pos:start="187:28" pos:end="187:40"><expr pos:start="187:28" pos:end="187:40"><name pos:start="187:28" pos:end="187:40">table_offsets</name></expr></argument>, <argument pos:start="187:43" pos:end="187:53"><expr pos:start="187:43" pos:end="187:53"><name pos:start="187:43" pos:end="187:53">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:57"><expr pos:start="189:13" pos:end="189:56"><call pos:start="189:13" pos:end="189:56"><name pos:start="189:13" pos:end="189:27">build_amd_iommu</name><argument_list pos:start="189:28" pos:end="189:56">(<argument pos:start="189:29" pos:end="189:39"><expr pos:start="189:29" pos:end="189:39"><name pos:start="189:29" pos:end="189:39">tables_blob</name></expr></argument>, <argument pos:start="189:42" pos:end="189:55"><expr pos:start="189:42" pos:end="189:55"><name pos:start="189:42" pos:end="189:55"><name pos:start="189:42" pos:end="189:47">tables</name><operator pos:start="189:48" pos:end="189:49">-&gt;</operator><name pos:start="189:50" pos:end="189:55">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="191:11" pos:end="197:9">else if <condition pos:start="191:19" pos:end="191:43">(<expr pos:start="191:20" pos:end="191:42"><name pos:start="191:20" pos:end="191:28">IOMMUType</name> <operator pos:start="191:30" pos:end="191:31">==</operator> <name pos:start="191:33" pos:end="191:42">TYPE_INTEL</name></expr>)</condition> <block pos:start="191:45" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:56">

            <expr_stmt pos:start="193:13" pos:end="193:55"><expr pos:start="193:13" pos:end="193:54"><call pos:start="193:13" pos:end="193:54"><name pos:start="193:13" pos:end="193:26">acpi_add_table</name><argument_list pos:start="193:27" pos:end="193:54">(<argument pos:start="193:28" pos:end="193:40"><expr pos:start="193:28" pos:end="193:40"><name pos:start="193:28" pos:end="193:40">table_offsets</name></expr></argument>, <argument pos:start="193:43" pos:end="193:53"><expr pos:start="193:43" pos:end="193:53"><name pos:start="193:43" pos:end="193:53">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:56"><expr pos:start="195:13" pos:end="195:55"><call pos:start="195:13" pos:end="195:55"><name pos:start="195:13" pos:end="195:26">build_dmar_q35</name><argument_list pos:start="195:27" pos:end="195:55">(<argument pos:start="195:28" pos:end="195:38"><expr pos:start="195:28" pos:end="195:38"><name pos:start="195:28" pos:end="195:38">tables_blob</name></expr></argument>, <argument pos:start="195:41" pos:end="195:54"><expr pos:start="195:41" pos:end="195:54"><name pos:start="195:41" pos:end="195:54"><name pos:start="195:41" pos:end="195:46">tables</name><operator pos:start="195:47" pos:end="195:48">-&gt;</operator><name pos:start="195:49" pos:end="195:54">linker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="201:5" pos:end="207:5"><if pos:start="201:5" pos:end="207:5">if <condition pos:start="201:8" pos:end="201:43">(<expr pos:start="201:9" pos:end="201:42"><name pos:start="201:9" pos:end="201:42"><name pos:start="201:9" pos:end="201:12">pcms</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:31">acpi_nvdimm_state</name><operator pos:start="201:32" pos:end="201:32">.</operator><name pos:start="201:33" pos:end="201:42">is_enabled</name></name></expr>)</condition> <block pos:start="201:45" pos:end="207:5">{<block_content pos:start="203:9" pos:end="205:72">

        <expr_stmt pos:start="203:9" pos:end="205:72"><expr pos:start="203:9" pos:end="205:71"><call pos:start="203:9" pos:end="205:71"><name pos:start="203:9" pos:end="203:25">nvdimm_build_acpi</name><argument_list pos:start="203:26" pos:end="205:71">(<argument pos:start="203:27" pos:end="203:39"><expr pos:start="203:27" pos:end="203:39"><name pos:start="203:27" pos:end="203:39">table_offsets</name></expr></argument>, <argument pos:start="203:42" pos:end="203:52"><expr pos:start="203:42" pos:end="203:52"><name pos:start="203:42" pos:end="203:52">tables_blob</name></expr></argument>, <argument pos:start="203:55" pos:end="203:68"><expr pos:start="203:55" pos:end="203:68"><name pos:start="203:55" pos:end="203:68"><name pos:start="203:55" pos:end="203:60">tables</name><operator pos:start="203:61" pos:end="203:62">-&gt;</operator><name pos:start="203:63" pos:end="203:68">linker</name></name></expr></argument>,

                          <argument pos:start="205:27" pos:end="205:50"><expr pos:start="205:27" pos:end="205:50"><operator pos:start="205:27" pos:end="205:27">&amp;</operator><name pos:start="205:28" pos:end="205:50"><name pos:start="205:28" pos:end="205:31">pcms</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:50">acpi_nvdimm_state</name></name></expr></argument>, <argument pos:start="205:53" pos:end="205:70"><expr pos:start="205:53" pos:end="205:70"><name pos:start="205:53" pos:end="205:70"><name pos:start="205:53" pos:end="205:59">machine</name><operator pos:start="205:60" pos:end="205:61">-&gt;</operator><name pos:start="205:62" pos:end="205:70">ram_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:46">/* Add tables supplied by user (if any) */</comment>

    <for pos:start="213:5" pos:end="223:5">for <control pos:start="213:9" pos:end="213:59">(<init pos:start="213:10" pos:end="213:32"><expr pos:start="213:10" pos:end="213:31"><name pos:start="213:10" pos:end="213:10">u</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <call pos:start="213:14" pos:end="213:31"><name pos:start="213:14" pos:end="213:29">acpi_table_first</name><argument_list pos:start="213:30" pos:end="213:31">()</argument_list></call></expr>;</init> <condition pos:start="213:34" pos:end="213:35"><expr pos:start="213:34" pos:end="213:34"><name pos:start="213:34" pos:end="213:34">u</name></expr>;</condition> <incr pos:start="213:37" pos:end="213:58"><expr pos:start="213:37" pos:end="213:58"><name pos:start="213:37" pos:end="213:37">u</name> <operator pos:start="213:39" pos:end="213:39">=</operator> <call pos:start="213:41" pos:end="213:58"><name pos:start="213:41" pos:end="213:55">acpi_table_next</name><argument_list pos:start="213:56" pos:end="213:58">(<argument pos:start="213:57" pos:end="213:57"><expr pos:start="213:57" pos:end="213:57"><name pos:start="213:57" pos:end="213:57">u</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="213:61" pos:end="223:5">{<block_content pos:start="215:9" pos:end="221:49">

        <decl_stmt pos:start="215:9" pos:end="215:41"><decl pos:start="215:9" pos:end="215:40"><type pos:start="215:9" pos:end="215:16"><name pos:start="215:9" pos:end="215:16">unsigned</name></type> <name pos:start="215:18" pos:end="215:20">len</name> <init pos:start="215:22" pos:end="215:40">= <expr pos:start="215:24" pos:end="215:40"><call pos:start="215:24" pos:end="215:40"><name pos:start="215:24" pos:end="215:37">acpi_table_len</name><argument_list pos:start="215:38" pos:end="215:40">(<argument pos:start="215:39" pos:end="215:39"><expr pos:start="215:39" pos:end="215:39"><name pos:start="215:39" pos:end="215:39">u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="219:9" pos:end="219:51"><expr pos:start="219:9" pos:end="219:50"><call pos:start="219:9" pos:end="219:50"><name pos:start="219:9" pos:end="219:22">acpi_add_table</name><argument_list pos:start="219:23" pos:end="219:50">(<argument pos:start="219:24" pos:end="219:36"><expr pos:start="219:24" pos:end="219:36"><name pos:start="219:24" pos:end="219:36">table_offsets</name></expr></argument>, <argument pos:start="219:39" pos:end="219:49"><expr pos:start="219:39" pos:end="219:49"><name pos:start="219:39" pos:end="219:49">tables_blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:49"><expr pos:start="221:9" pos:end="221:48"><call pos:start="221:9" pos:end="221:48"><name pos:start="221:9" pos:end="221:27">g_array_append_vals</name><argument_list pos:start="221:28" pos:end="221:48">(<argument pos:start="221:29" pos:end="221:39"><expr pos:start="221:29" pos:end="221:39"><name pos:start="221:29" pos:end="221:39">tables_blob</name></expr></argument>, <argument pos:start="221:42" pos:end="221:42"><expr pos:start="221:42" pos:end="221:42"><name pos:start="221:42" pos:end="221:42">u</name></expr></argument>, <argument pos:start="221:45" pos:end="221:47"><expr pos:start="221:45" pos:end="221:47"><name pos:start="221:45" pos:end="221:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="227:5" pos:end="227:36">/* RSDT is pointed to by RSDP */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:28"><expr pos:start="229:5" pos:end="229:27"><name pos:start="229:5" pos:end="229:8">rsdt</name> <operator pos:start="229:10" pos:end="229:10">=</operator> <name pos:start="229:12" pos:end="229:27"><name pos:start="229:12" pos:end="229:22">tables_blob</name><operator pos:start="229:23" pos:end="229:24">-&gt;</operator><name pos:start="229:25" pos:end="229:27">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="233:47"><expr pos:start="231:5" pos:end="233:46"><call pos:start="231:5" pos:end="233:46"><name pos:start="231:5" pos:end="231:14">build_rsdt</name><argument_list pos:start="231:15" pos:end="233:46">(<argument pos:start="231:16" pos:end="231:26"><expr pos:start="231:16" pos:end="231:26"><name pos:start="231:16" pos:end="231:26">tables_blob</name></expr></argument>, <argument pos:start="231:29" pos:end="231:42"><expr pos:start="231:29" pos:end="231:42"><name pos:start="231:29" pos:end="231:42"><name pos:start="231:29" pos:end="231:34">tables</name><operator pos:start="231:35" pos:end="231:36">-&gt;</operator><name pos:start="231:37" pos:end="231:42">linker</name></name></expr></argument>, <argument pos:start="231:45" pos:end="231:57"><expr pos:start="231:45" pos:end="231:57"><name pos:start="231:45" pos:end="231:57">table_offsets</name></expr></argument>,

               <argument pos:start="233:16" pos:end="233:26"><expr pos:start="233:16" pos:end="233:26"><name pos:start="233:16" pos:end="233:26"><name pos:start="233:16" pos:end="233:23">slic_oem</name><operator pos:start="233:24" pos:end="233:24">.</operator><name pos:start="233:25" pos:end="233:26">id</name></name></expr></argument>, <argument pos:start="233:29" pos:end="233:45"><expr pos:start="233:29" pos:end="233:45"><name pos:start="233:29" pos:end="233:45"><name pos:start="233:29" pos:end="233:36">slic_oem</name><operator pos:start="233:37" pos:end="233:37">.</operator><name pos:start="233:38" pos:end="233:45">table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:59">/* RSDP is in FSEG memory, so allocate it separately */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:51"><expr pos:start="239:5" pos:end="239:50"><call pos:start="239:5" pos:end="239:50"><name pos:start="239:5" pos:end="239:14">build_rsdp</name><argument_list pos:start="239:15" pos:end="239:50">(<argument pos:start="239:16" pos:end="239:27"><expr pos:start="239:16" pos:end="239:27"><name pos:start="239:16" pos:end="239:27"><name pos:start="239:16" pos:end="239:21">tables</name><operator pos:start="239:22" pos:end="239:23">-&gt;</operator><name pos:start="239:24" pos:end="239:27">rsdp</name></name></expr></argument>, <argument pos:start="239:30" pos:end="239:43"><expr pos:start="239:30" pos:end="239:43"><name pos:start="239:30" pos:end="239:43"><name pos:start="239:30" pos:end="239:35">tables</name><operator pos:start="239:36" pos:end="239:37">-&gt;</operator><name pos:start="239:38" pos:end="239:43">linker</name></name></expr></argument>, <argument pos:start="239:46" pos:end="239:49"><expr pos:start="239:46" pos:end="239:49"><name pos:start="239:46" pos:end="239:49">rsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="243:5" pos:end="275:7">/* We'll expose it all to Guest so we want to reduce

     * chance of size changes.

     *

     * We used to align the tables to 4k, but of course this would

     * too simple to be enough.  4k turned out to be too small an

     * alignment very soon, and in fact it is almost impossible to

     * keep the table size stable for all (max_cpus, max_memory_slots)

     * combinations.  So the table size is always 64k for pc-i440fx-2.1

     * and we give an error if the table grows beyond that limit.

     *

     * We still have the problem of migrating from "-M pc-i440fx-2.0".  For

     * that, we exploit the fact that QEMU 2.1 generates _smaller_ tables

     * than 2.0 and we can always pad the smaller tables with zeros.  We can

     * then use the exact size of the 2.0 tables.

     *

     * All this is for PIIX4, since QEMU 2.0 didn't support Q35 migration.

     */</comment>

    <if_stmt pos:start="277:5" pos:end="327:5"><if pos:start="277:5" pos:end="307:5">if <condition pos:start="277:8" pos:end="277:37">(<expr pos:start="277:9" pos:end="277:36"><name pos:start="277:9" pos:end="277:36"><name pos:start="277:9" pos:end="277:12">pcmc</name><operator pos:start="277:13" pos:end="277:14">-&gt;</operator><name pos:start="277:15" pos:end="277:36">legacy_acpi_table_size</name></name></expr>)</condition> <block pos:start="277:39" pos:end="307:5">{<block_content pos:start="285:9" pos:end="305:57">

        <comment type="block" pos:start="279:9" pos:end="283:11">/* Subtracting aml_len gives the size of fixed tables.  Then add the

         * size of the PIIX4 DSDT/SSDT in QEMU 2.0.

         */</comment>

        <decl_stmt pos:start="285:9" pos:end="289:65"><decl pos:start="285:9" pos:end="289:64"><type pos:start="285:9" pos:end="285:11"><name pos:start="285:9" pos:end="285:11">int</name></type> <name pos:start="285:13" pos:end="285:26">legacy_aml_len</name> <init pos:start="285:28" pos:end="289:64">=

            <expr pos:start="287:13" pos:end="289:64"><name pos:start="287:13" pos:end="287:40"><name pos:start="287:13" pos:end="287:16">pcmc</name><operator pos:start="287:17" pos:end="287:18">-&gt;</operator><name pos:start="287:19" pos:end="287:40">legacy_acpi_table_size</name></name> <operator pos:start="287:42" pos:end="287:42">+</operator>

            <name pos:start="289:13" pos:end="289:42">ACPI_BUILD_LEGACY_CPU_AML_SIZE</name> <operator pos:start="289:44" pos:end="289:44">*</operator> <name pos:start="289:46" pos:end="289:64"><name pos:start="289:46" pos:end="289:49">pcms</name><operator pos:start="289:50" pos:end="289:51">-&gt;</operator><name pos:start="289:52" pos:end="289:64">apic_id_limit</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="291:9" pos:end="295:44"><decl pos:start="291:9" pos:end="295:43"><type pos:start="291:9" pos:end="291:11"><name pos:start="291:9" pos:end="291:11">int</name></type> <name pos:start="291:13" pos:end="291:29">legacy_table_size</name> <init pos:start="291:31" pos:end="295:43">=

            <expr pos:start="293:13" pos:end="295:43"><call pos:start="293:13" pos:end="295:43"><name pos:start="293:13" pos:end="293:20">ROUND_UP</name><argument_list pos:start="293:21" pos:end="295:43">(<argument pos:start="293:22" pos:end="293:64"><expr pos:start="293:22" pos:end="293:64"><name pos:start="293:22" pos:end="293:37"><name pos:start="293:22" pos:end="293:32">tables_blob</name><operator pos:start="293:33" pos:end="293:34">-&gt;</operator><name pos:start="293:35" pos:end="293:37">len</name></name> <operator pos:start="293:39" pos:end="293:39">-</operator> <name pos:start="293:41" pos:end="293:47">aml_len</name> <operator pos:start="293:49" pos:end="293:49">+</operator> <name pos:start="293:51" pos:end="293:64">legacy_aml_len</name></expr></argument>,

                     <argument pos:start="295:22" pos:end="295:42"><expr pos:start="295:22" pos:end="295:42"><name pos:start="295:22" pos:end="295:42">ACPI_BUILD_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="297:9" pos:end="303:9"><if pos:start="297:9" pos:end="303:9">if <condition pos:start="297:12" pos:end="297:49">(<expr pos:start="297:13" pos:end="297:48"><name pos:start="297:13" pos:end="297:28"><name pos:start="297:13" pos:end="297:23">tables_blob</name><operator pos:start="297:24" pos:end="297:25">-&gt;</operator><name pos:start="297:26" pos:end="297:28">len</name></name> <operator pos:start="297:30" pos:end="297:30">&gt;</operator> <name pos:start="297:32" pos:end="297:48">legacy_table_size</name></expr>)</condition> <block pos:start="297:51" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:61">

            <comment type="block" pos:start="299:13" pos:end="299:76">/* Should happen only with PCI bridges and -M pc-i440fx-2.0.  */</comment>

            <expr_stmt pos:start="301:13" pos:end="301:61"><expr pos:start="301:13" pos:end="301:60"><call pos:start="301:13" pos:end="301:60"><name pos:start="301:13" pos:end="301:24">error_report</name><argument_list pos:start="301:25" pos:end="301:60">(<argument pos:start="301:26" pos:end="301:59"><expr pos:start="301:26" pos:end="301:59"><literal type="string" pos:start="301:26" pos:end="301:59">"Warning: migration may not work."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:57"><expr pos:start="305:9" pos:end="305:56"><call pos:start="305:9" pos:end="305:56"><name pos:start="305:9" pos:end="305:24">g_array_set_size</name><argument_list pos:start="305:25" pos:end="305:56">(<argument pos:start="305:26" pos:end="305:36"><expr pos:start="305:26" pos:end="305:36"><name pos:start="305:26" pos:end="305:36">tables_blob</name></expr></argument>, <argument pos:start="305:39" pos:end="305:55"><expr pos:start="305:39" pos:end="305:55"><name pos:start="305:39" pos:end="305:55">legacy_table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="307:7" pos:end="327:5">else <block pos:start="307:12" pos:end="327:5">{<block_content pos:start="311:9" pos:end="325:60">

        <comment type="block" pos:start="309:9" pos:end="309:78">/* Make sure we have a buffer in case we need to resize the tables. */</comment>

        <if_stmt pos:start="311:9" pos:end="323:9"><if pos:start="311:9" pos:end="323:9">if <condition pos:start="311:12" pos:end="311:57">(<expr pos:start="311:13" pos:end="311:56"><name pos:start="311:13" pos:end="311:28"><name pos:start="311:13" pos:end="311:23">tables_blob</name><operator pos:start="311:24" pos:end="311:25">-&gt;</operator><name pos:start="311:26" pos:end="311:28">len</name></name> <operator pos:start="311:30" pos:end="311:30">&gt;</operator> <name pos:start="311:32" pos:end="311:52">ACPI_BUILD_TABLE_SIZE</name> <operator pos:start="311:54" pos:end="311:54">/</operator> <literal type="number" pos:start="311:56" pos:end="311:56">2</literal></expr>)</condition> <block pos:start="311:59" pos:end="323:9">{<block_content pos:start="315:13" pos:end="321:57">

            <comment type="block" pos:start="313:13" pos:end="313:82">/* As of QEMU 2.1, this fires with 160 VCPUs and 255 memory slots.  */</comment>

            <expr_stmt pos:start="315:13" pos:end="315:70"><expr pos:start="315:13" pos:end="315:69"><call pos:start="315:13" pos:end="315:69"><name pos:start="315:13" pos:end="315:24">error_report</name><argument_list pos:start="315:25" pos:end="315:69">(<argument pos:start="315:26" pos:end="315:68"><expr pos:start="315:26" pos:end="315:68"><literal type="string" pos:start="315:26" pos:end="315:68">"Warning: ACPI tables are larger than 64k."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:61"><expr pos:start="317:13" pos:end="317:60"><call pos:start="317:13" pos:end="317:60"><name pos:start="317:13" pos:end="317:24">error_report</name><argument_list pos:start="317:25" pos:end="317:60">(<argument pos:start="317:26" pos:end="317:59"><expr pos:start="317:26" pos:end="317:59"><literal type="string" pos:start="317:26" pos:end="317:59">"Warning: migration may not work."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="321:57"><expr pos:start="319:13" pos:end="321:56"><call pos:start="319:13" pos:end="321:56"><name pos:start="319:13" pos:end="319:24">error_report</name><argument_list pos:start="319:25" pos:end="321:56">(<argument pos:start="319:26" pos:end="321:55"><expr pos:start="319:26" pos:end="321:55"><literal type="string" pos:start="319:26" pos:end="319:68">"Warning: please remove CPUs, NUMA nodes, "</literal>

                         <literal type="string" pos:start="321:26" pos:end="321:55">"memory slots or PCI bridges."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:60"><expr pos:start="325:9" pos:end="325:59"><call pos:start="325:9" pos:end="325:59"><name pos:start="325:9" pos:end="325:23">acpi_align_size</name><argument_list pos:start="325:24" pos:end="325:59">(<argument pos:start="325:25" pos:end="325:35"><expr pos:start="325:25" pos:end="325:35"><name pos:start="325:25" pos:end="325:35">tables_blob</name></expr></argument>, <argument pos:start="325:38" pos:end="325:58"><expr pos:start="325:38" pos:end="325:58"><name pos:start="325:38" pos:end="325:58">ACPI_BUILD_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:69"><expr pos:start="331:5" pos:end="331:68"><call pos:start="331:5" pos:end="331:68"><name pos:start="331:5" pos:end="331:19">acpi_align_size</name><argument_list pos:start="331:20" pos:end="331:68">(<argument pos:start="331:21" pos:end="331:44"><expr pos:start="331:21" pos:end="331:44"><name pos:start="331:21" pos:end="331:44"><name pos:start="331:21" pos:end="331:26">tables</name><operator pos:start="331:27" pos:end="331:28">-&gt;</operator><name pos:start="331:29" pos:end="331:34">linker</name><operator pos:start="331:35" pos:end="331:36">-&gt;</operator><name pos:start="331:37" pos:end="331:44">cmd_blob</name></name></expr></argument>, <argument pos:start="331:47" pos:end="331:67"><expr pos:start="331:47" pos:end="331:67"><name pos:start="331:47" pos:end="331:67">ACPI_BUILD_ALIGN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:47">/* Cleanup memory that's no longer used. */</comment>

    <expr_stmt pos:start="337:5" pos:end="337:38"><expr pos:start="337:5" pos:end="337:37"><call pos:start="337:5" pos:end="337:37"><name pos:start="337:5" pos:end="337:16">g_array_free</name><argument_list pos:start="337:17" pos:end="337:37">(<argument pos:start="337:18" pos:end="337:30"><expr pos:start="337:18" pos:end="337:30"><name pos:start="337:18" pos:end="337:30">table_offsets</name></expr></argument>, <argument pos:start="337:33" pos:end="337:36"><expr pos:start="337:33" pos:end="337:36"><name pos:start="337:33" pos:end="337:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
