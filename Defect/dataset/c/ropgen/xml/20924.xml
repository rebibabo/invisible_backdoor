<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20924.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:37">theora_decode_init</name><parameter_list pos:start="1:38" pos:end="1:60">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:34">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">Vp3DecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">ptype</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:34"><name pos:start="11:20" pos:end="11:31">header_start</name><index pos:start="11:32" pos:end="11:34">[<expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:18">header_len</name><index pos:start="13:19" pos:end="13:21">[<expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:9">avctx</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">pix_fmt</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:39">AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">theora</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:31">(<expr pos:start="27:9" pos:end="27:30"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:14">avctx</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:30">extradata_size</name></name></expr>)</condition> <block pos:start="27:33" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:60"><expr pos:start="29:9" pos:end="29:59"><call pos:start="29:9" pos:end="29:59"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:59">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:58"><expr pos:start="29:37" pos:end="29:58"><literal type="string" pos:start="29:37" pos:end="29:58">"Missing extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="39:68">(<expr pos:start="37:9" pos:end="39:67"><call pos:start="37:9" pos:end="39:63"><name pos:start="37:9" pos:end="37:33">avpriv_split_xiph_headers</name><argument_list pos:start="37:34" pos:end="39:63">(<argument pos:start="37:35" pos:end="37:50"><expr pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:50"><name pos:start="37:35" pos:end="37:39">avctx</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:50">extradata</name></name></expr></argument>, <argument pos:start="37:53" pos:end="37:73"><expr pos:start="37:53" pos:end="37:73"><name pos:start="37:53" pos:end="37:73"><name pos:start="37:53" pos:end="37:57">avctx</name><operator pos:start="37:58" pos:end="37:59">-&gt;</operator><name pos:start="37:60" pos:end="37:73">extradata_size</name></name></expr></argument>,

                                  <argument pos:start="39:35" pos:end="39:36"><expr pos:start="39:35" pos:end="39:36"><literal type="number" pos:start="39:35" pos:end="39:36">42</literal></expr></argument>, <argument pos:start="39:39" pos:end="39:50"><expr pos:start="39:39" pos:end="39:50"><name pos:start="39:39" pos:end="39:50">header_start</name></expr></argument>, <argument pos:start="39:53" pos:end="39:62"><expr pos:start="39:53" pos:end="39:62"><name pos:start="39:53" pos:end="39:62">header_len</name></expr></argument>)</argument_list></call> <operator pos:start="39:65" pos:end="39:65">&lt;</operator> <literal type="number" pos:start="39:67" pos:end="39:67">0</literal></expr>)</condition> <block pos:start="39:70" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><call pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:58">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:57"><expr pos:start="41:37" pos:end="41:57"><literal type="string" pos:start="41:37" pos:end="41:57">"Corrupt extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="49:5" pos:end="127:5">for <control pos:start="49:9" pos:end="49:27">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:21"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <literal type="number" pos:start="49:21" pos:end="49:21">3</literal></expr>;</condition> <incr pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:24">i</name><operator pos:start="49:25" pos:end="49:26">++</operator></expr></incr>)</control> <block pos:start="49:29" pos:end="127:5">{<block_content pos:start="51:9" pos:end="125:18">

        <if_stmt pos:start="51:9" pos:end="53:21"><if pos:start="51:9" pos:end="53:21">if <condition pos:start="51:12" pos:end="51:31">(<expr pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:22">header_len</name><index pos:start="51:23" pos:end="51:25">[<expr pos:start="51:24" pos:end="51:24"><name pos:start="51:24" pos:end="51:24">i</name></expr>]</index></name> <operator pos:start="51:27" pos:end="51:28">&lt;=</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:21"><block_content pos:start="53:13" pos:end="53:21">

            <continue pos:start="53:13" pos:end="53:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:60"><expr pos:start="55:9" pos:end="55:59"><call pos:start="55:9" pos:end="55:59"><name pos:start="55:9" pos:end="55:22">init_get_bits8</name><argument_list pos:start="55:23" pos:end="55:59">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:26">gb</name></expr></argument>, <argument pos:start="55:29" pos:end="55:43"><expr pos:start="55:29" pos:end="55:43"><name pos:start="55:29" pos:end="55:43"><name pos:start="55:29" pos:end="55:40">header_start</name><index pos:start="55:41" pos:end="55:43">[<expr pos:start="55:42" pos:end="55:42"><name pos:start="55:42" pos:end="55:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="55:46" pos:end="55:58"><expr pos:start="55:46" pos:end="55:58"><name pos:start="55:46" pos:end="55:58"><name pos:start="55:46" pos:end="55:55">header_len</name><index pos:start="55:56" pos:end="55:58">[<expr pos:start="55:57" pos:end="55:57"><name pos:start="55:57" pos:end="55:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:13">ptype</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:32"><name pos:start="59:17" pos:end="59:24">get_bits</name><argument_list pos:start="59:25" pos:end="59:32">(<argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><operator pos:start="59:26" pos:end="59:26">&amp;</operator><name pos:start="59:27" pos:end="59:28">gb</name></expr></argument>, <argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><operator pos:start="63:13" pos:end="63:13">!</operator><operator pos:start="63:14" pos:end="63:14">(</operator><name pos:start="63:15" pos:end="63:19">ptype</name> <operator pos:start="63:21" pos:end="63:21">&amp;</operator> <literal type="number" pos:start="63:23" pos:end="63:26">0x80</literal><operator pos:start="63:27" pos:end="63:27">)</operator></expr>)</condition> <block pos:start="63:30" pos:end="69:9">{<block_content pos:start="65:13" pos:end="65:64">

            <expr_stmt pos:start="65:13" pos:end="65:64"><expr pos:start="65:13" pos:end="65:63"><call pos:start="65:13" pos:end="65:63"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:63">(<argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">avctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:38"><expr pos:start="65:27" pos:end="65:38"><name pos:start="65:27" pos:end="65:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:41" pos:end="65:62"><expr pos:start="65:41" pos:end="65:62"><literal type="string" pos:start="65:41" pos:end="65:62">"Invalid extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="67:1" pos:end="67:22">//          return -1;</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="73:9" pos:end="73:41">// FIXME: Check for this as well.</comment>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><call pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:22">skip_bits_long</name><argument_list pos:start="75:23" pos:end="75:34">(<argument pos:start="75:24" pos:end="75:26"><expr pos:start="75:24" pos:end="75:26"><operator pos:start="75:24" pos:end="75:24">&amp;</operator><name pos:start="75:25" pos:end="75:26">gb</name></expr></argument>, <argument pos:start="75:29" pos:end="75:33"><expr pos:start="75:29" pos:end="75:33"><literal type="number" pos:start="75:29" pos:end="75:29">6</literal> <operator pos:start="75:31" pos:end="75:31">*</operator> <literal type="number" pos:start="75:33" pos:end="75:33">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:37" pos:end="75:50">/* "theora" */</comment>



        <switch pos:start="79:9" pos:end="113:9">switch <condition pos:start="79:16" pos:end="79:22">(<expr pos:start="79:17" pos:end="79:21"><name pos:start="79:17" pos:end="79:21">ptype</name></expr>)</condition> <block pos:start="79:24" pos:end="113:9">{<block_content pos:start="81:9" pos:end="111:18">

        <case pos:start="81:9" pos:end="81:18">case <expr pos:start="81:14" pos:end="81:17"><literal type="number" pos:start="81:14" pos:end="81:17">0x80</literal></expr>:</case>

            <if_stmt pos:start="83:13" pos:end="85:26"><if pos:start="83:13" pos:end="85:26">if <condition pos:start="83:16" pos:end="83:53">(<expr pos:start="83:17" pos:end="83:52"><call pos:start="83:17" pos:end="83:48"><name pos:start="83:17" pos:end="83:36">theora_decode_header</name><argument_list pos:start="83:37" pos:end="83:48">(<argument pos:start="83:38" pos:end="83:42"><expr pos:start="83:38" pos:end="83:42"><name pos:start="83:38" pos:end="83:42">avctx</name></expr></argument>, <argument pos:start="83:45" pos:end="83:47"><expr pos:start="83:45" pos:end="83:47"><operator pos:start="83:45" pos:end="83:45">&amp;</operator><name pos:start="83:46" pos:end="83:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="83:50" pos:end="83:50">&lt;</operator> <literal type="number" pos:start="83:52" pos:end="83:52">0</literal></expr>)</condition><block type="pseudo" pos:start="85:17" pos:end="85:26"><block_content pos:start="85:17" pos:end="85:26">

                <return pos:start="85:17" pos:end="85:26">return <expr pos:start="85:24" pos:end="85:25"><operator pos:start="85:24" pos:end="85:24">-</operator><literal type="number" pos:start="85:25" pos:end="85:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:18">case <expr pos:start="89:14" pos:end="89:17"><literal type="number" pos:start="89:14" pos:end="89:17">0x81</literal></expr>:</case>

<comment type="line" pos:start="91:1" pos:end="91:45">// FIXME: is this needed? it breaks sometimes</comment>

<comment type="line" pos:start="93:1" pos:end="93:48">//            theora_decode_comments(avctx, gb);</comment>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:18">case <expr pos:start="97:14" pos:end="97:17"><literal type="number" pos:start="97:14" pos:end="97:17">0x82</literal></expr>:</case>

            <if_stmt pos:start="99:13" pos:end="101:26"><if pos:start="99:13" pos:end="101:26">if <condition pos:start="99:16" pos:end="99:49">(<expr pos:start="99:17" pos:end="99:48"><call pos:start="99:17" pos:end="99:48"><name pos:start="99:17" pos:end="99:36">theora_decode_tables</name><argument_list pos:start="99:37" pos:end="99:48">(<argument pos:start="99:38" pos:end="99:42"><expr pos:start="99:38" pos:end="99:42"><name pos:start="99:38" pos:end="99:42">avctx</name></expr></argument>, <argument pos:start="99:45" pos:end="99:47"><expr pos:start="99:45" pos:end="99:47"><operator pos:start="99:45" pos:end="99:45">&amp;</operator><name pos:start="99:46" pos:end="99:47">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:26"><block_content pos:start="101:17" pos:end="101:26">

                <return pos:start="101:17" pos:end="101:26">return <expr pos:start="101:24" pos:end="101:25"><operator pos:start="101:24" pos:end="101:24">-</operator><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <default pos:start="105:9" pos:end="105:16">default:</default>

            <expr_stmt pos:start="107:13" pos:end="109:72"><expr pos:start="107:13" pos:end="109:71"><call pos:start="107:13" pos:end="109:71"><name pos:start="107:13" pos:end="107:18">av_log</name><argument_list pos:start="107:19" pos:end="109:71">(<argument pos:start="107:20" pos:end="107:24"><expr pos:start="107:20" pos:end="107:24"><name pos:start="107:20" pos:end="107:24">avctx</name></expr></argument>, <argument pos:start="107:27" pos:end="107:38"><expr pos:start="107:27" pos:end="107:38"><name pos:start="107:27" pos:end="107:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:55"><expr pos:start="109:20" pos:end="109:55"><literal type="string" pos:start="109:20" pos:end="109:55">"Unknown Theora config packet: %d\n"</literal></expr></argument>, <argument pos:start="109:58" pos:end="109:70"><expr pos:start="109:58" pos:end="109:70"><name pos:start="109:58" pos:end="109:62">ptype</name> <operator pos:start="109:64" pos:end="109:64">&amp;</operator> <operator pos:start="109:66" pos:end="109:66">~</operator><literal type="number" pos:start="109:67" pos:end="109:70">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="115:9" pos:end="121:67"><if pos:start="115:9" pos:end="121:67">if <condition pos:start="115:12" pos:end="115:70">(<expr pos:start="115:13" pos:end="115:69"><name pos:start="115:13" pos:end="115:17">ptype</name> <operator pos:start="115:19" pos:end="115:20">!=</operator> <literal type="number" pos:start="115:22" pos:end="115:25">0x81</literal> <operator pos:start="115:27" pos:end="115:28">&amp;&amp;</operator> <literal type="number" pos:start="115:30" pos:end="115:30">8</literal> <operator pos:start="115:32" pos:end="115:32">*</operator> <name pos:start="115:34" pos:end="115:46"><name pos:start="115:34" pos:end="115:43">header_len</name><index pos:start="115:44" pos:end="115:46">[<expr pos:start="115:45" pos:end="115:45"><name pos:start="115:45" pos:end="115:45">i</name></expr>]</index></name> <operator pos:start="115:48" pos:end="115:49">!=</operator> <call pos:start="115:51" pos:end="115:69"><name pos:start="115:51" pos:end="115:64">get_bits_count</name><argument_list pos:start="115:65" pos:end="115:69">(<argument pos:start="115:66" pos:end="115:68"><expr pos:start="115:66" pos:end="115:68"><operator pos:start="115:66" pos:end="115:66">&amp;</operator><name pos:start="115:67" pos:end="115:68">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="121:67"><block_content pos:start="117:13" pos:end="121:67">

            <expr_stmt pos:start="117:13" pos:end="121:67"><expr pos:start="117:13" pos:end="121:66"><call pos:start="117:13" pos:end="121:66"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="121:66">(<argument pos:start="117:20" pos:end="117:24"><expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:24">avctx</name></expr></argument>, <argument pos:start="117:27" pos:end="117:40"><expr pos:start="117:27" pos:end="117:40"><name pos:start="117:27" pos:end="117:40">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="119:20" pos:end="119:48"><expr pos:start="119:20" pos:end="119:48"><literal type="string" pos:start="119:20" pos:end="119:48">"%d bits left in packet %X\n"</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:58"><expr pos:start="121:20" pos:end="121:58"><literal type="number" pos:start="121:20" pos:end="121:20">8</literal> <operator pos:start="121:22" pos:end="121:22">*</operator> <name pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:33">header_len</name><index pos:start="121:34" pos:end="121:36">[<expr pos:start="121:35" pos:end="121:35"><name pos:start="121:35" pos:end="121:35">i</name></expr>]</index></name> <operator pos:start="121:38" pos:end="121:38">-</operator> <call pos:start="121:40" pos:end="121:58"><name pos:start="121:40" pos:end="121:53">get_bits_count</name><argument_list pos:start="121:54" pos:end="121:58">(<argument pos:start="121:55" pos:end="121:57"><expr pos:start="121:55" pos:end="121:57"><operator pos:start="121:55" pos:end="121:55">&amp;</operator><name pos:start="121:56" pos:end="121:57">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:61" pos:end="121:65"><expr pos:start="121:61" pos:end="121:65"><name pos:start="121:61" pos:end="121:65">ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="123:9" pos:end="125:18"><if pos:start="123:9" pos:end="125:18">if <condition pos:start="123:12" pos:end="123:33">(<expr pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:21">theora</name></name> <operator pos:start="123:23" pos:end="123:23">&lt;</operator> <literal type="number" pos:start="123:25" pos:end="123:32">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:18"><block_content pos:start="125:13" pos:end="125:18">

            <break pos:start="125:13" pos:end="125:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="131:5" pos:end="131:34">return <expr pos:start="131:12" pos:end="131:33"><call pos:start="131:12" pos:end="131:33"><name pos:start="131:12" pos:end="131:26">vp3_decode_init</name><argument_list pos:start="131:27" pos:end="131:33">(<argument pos:start="131:28" pos:end="131:32"><expr pos:start="131:28" pos:end="131:32"><name pos:start="131:28" pos:end="131:32">avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
