<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24513.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">do_migrate</name><parameter_list pos:start="1:15" pos:end="1:68">(<parameter pos:start="1:16" pos:end="1:27"><decl pos:start="1:16" pos:end="1:27"><type pos:start="1:16" pos:end="1:27"><name pos:start="1:16" pos:end="1:22">Monitor</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:27">mon</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:40">QDict</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">qdict</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><name pos:start="1:50" pos:end="1:56">QObject</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier><modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:67">ret_data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:13">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MigrationState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:45">= <expr pos:start="5:25" pos:end="5:45"><call pos:start="5:25" pos:end="5:45"><name pos:start="5:25" pos:end="5:43">migrate_get_current</name><argument_list pos:start="5:44" pos:end="5:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">detach</name> <init pos:start="9:16" pos:end="9:55">= <expr pos:start="9:18" pos:end="9:55"><call pos:start="9:18" pos:end="9:55"><name pos:start="9:18" pos:end="9:35">qdict_get_try_bool</name><argument_list pos:start="9:36" pos:end="9:55">(<argument pos:start="9:37" pos:end="9:41"><expr pos:start="9:37" pos:end="9:41"><name pos:start="9:37" pos:end="9:41">qdict</name></expr></argument>, <argument pos:start="9:44" pos:end="9:51"><expr pos:start="9:44" pos:end="9:51"><literal type="string" pos:start="9:44" pos:end="9:51">"detach"</literal></expr></argument>, <argument pos:start="9:54" pos:end="9:54"><expr pos:start="9:54" pos:end="9:54"><literal type="number" pos:start="9:54" pos:end="9:54">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">blk</name> <init pos:start="11:13" pos:end="11:49">= <expr pos:start="11:15" pos:end="11:49"><call pos:start="11:15" pos:end="11:49"><name pos:start="11:15" pos:end="11:32">qdict_get_try_bool</name><argument_list pos:start="11:33" pos:end="11:49">(<argument pos:start="11:34" pos:end="11:38"><expr pos:start="11:34" pos:end="11:38"><name pos:start="11:34" pos:end="11:38">qdict</name></expr></argument>, <argument pos:start="11:41" pos:end="11:45"><expr pos:start="11:41" pos:end="11:45"><literal type="string" pos:start="11:41" pos:end="11:45">"blk"</literal></expr></argument>, <argument pos:start="11:48" pos:end="11:48"><expr pos:start="11:48" pos:end="11:48"><literal type="number" pos:start="11:48" pos:end="11:48">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">inc</name> <init pos:start="13:13" pos:end="13:49">= <expr pos:start="13:15" pos:end="13:49"><call pos:start="13:15" pos:end="13:49"><name pos:start="13:15" pos:end="13:32">qdict_get_try_bool</name><argument_list pos:start="13:33" pos:end="13:49">(<argument pos:start="13:34" pos:end="13:38"><expr pos:start="13:34" pos:end="13:38"><name pos:start="13:34" pos:end="13:38">qdict</name></expr></argument>, <argument pos:start="13:41" pos:end="13:45"><expr pos:start="13:41" pos:end="13:45"><literal type="string" pos:start="13:41" pos:end="13:45">"inc"</literal></expr></argument>, <argument pos:start="13:48" pos:end="13:48"><expr pos:start="13:48" pos:end="13:48"><literal type="number" pos:start="13:48" pos:end="13:48">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">uri</name> <init pos:start="15:21" pos:end="15:49">= <expr pos:start="15:23" pos:end="15:49"><call pos:start="15:23" pos:end="15:49"><name pos:start="15:23" pos:end="15:35">qdict_get_str</name><argument_list pos:start="15:36" pos:end="15:49">(<argument pos:start="15:37" pos:end="15:41"><expr pos:start="15:37" pos:end="15:41"><name pos:start="15:37" pos:end="15:41">qdict</name></expr></argument>, <argument pos:start="15:44" pos:end="15:48"><expr pos:start="15:44" pos:end="15:48"><literal type="string" pos:start="15:44" pos:end="15:48">"uri"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:16">state</name></name> <operator pos:start="21:18" pos:end="21:19">==</operator> <name pos:start="21:21" pos:end="21:36">MIG_STATE_ACTIVE</name></expr>)</condition> <block pos:start="21:39" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:63"><expr pos:start="23:9" pos:end="23:62"><call pos:start="23:9" pos:end="23:62"><name pos:start="23:9" pos:end="23:22">monitor_printf</name><argument_list pos:start="23:23" pos:end="23:62">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">mon</name></expr></argument>, <argument pos:start="23:29" pos:end="23:61"><expr pos:start="23:29" pos:end="23:61"><literal type="string" pos:start="23:29" pos:end="23:61">"migration already in progress\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><call pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:33">qemu_savevm_state_blocked</name><argument_list pos:start="31:34" pos:end="31:38">(<argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:41" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:27">(<expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:26">migration_blockers</name></expr>)</condition> <block pos:start="39:29" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:18">

        <decl_stmt pos:start="41:9" pos:end="41:46"><decl pos:start="41:9" pos:end="41:45"><type pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:13">Error</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:18">err</name> <init pos:start="41:20" pos:end="41:45">= <expr pos:start="41:22" pos:end="41:45"><name pos:start="41:22" pos:end="41:45"><name pos:start="41:22" pos:end="41:39">migration_blockers</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:45">data</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><call pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:25">qerror_report_err</name><argument_list pos:start="43:26" pos:end="43:30">(<argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:44"><expr pos:start="51:5" pos:end="51:43"><name pos:start="51:5" pos:end="51:5">s</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <call pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:20">migrate_init</name><argument_list pos:start="51:21" pos:end="51:43">(<argument pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><name pos:start="51:22" pos:end="51:24">mon</name></expr></argument>, <argument pos:start="51:27" pos:end="51:32"><expr pos:start="51:27" pos:end="51:32"><name pos:start="51:27" pos:end="51:32">detach</name></expr></argument>, <argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">blk</name></expr></argument>, <argument pos:start="51:40" pos:end="51:42"><expr pos:start="51:40" pos:end="51:42"><name pos:start="51:40" pos:end="51:42">inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="81:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:34">(<expr pos:start="55:9" pos:end="55:33"><call pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:16">strstart</name><argument_list pos:start="55:17" pos:end="55:33">(<argument pos:start="55:18" pos:end="55:20"><expr pos:start="55:18" pos:end="55:20"><name pos:start="55:18" pos:end="55:20">uri</name></expr></argument>, <argument pos:start="55:23" pos:end="55:28"><expr pos:start="55:23" pos:end="55:28"><literal type="string" pos:start="55:23" pos:end="55:28">"tcp:"</literal></expr></argument>, <argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:32">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:36" pos:end="61:5">{<block_content pos:start="57:9" pos:end="60:0">

        <expr_stmt pos:start="57:9" pos:end="60:0"><expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:48"><name pos:start="57:15" pos:end="57:42">tcp_start_outgoing_migration</name><argument_list pos:start="57:43" pos:end="57:48">(<argument pos:start="57:44" pos:end="57:44"><expr pos:start="57:44" pos:end="57:44"><name pos:start="57:44" pos:end="57:44">s</name></expr></argument>, <argument pos:start="57:47" pos:end="57:47"><expr pos:start="57:47" pos:end="57:47"><name pos:start="57:47" pos:end="57:47">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:19">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:19"><operator pos:start="59:5" pos:end="59:5">!</operator><call pos:start="59:6" pos:end="59:19"><name pos:start="59:6" pos:end="59:12">defined</name><argument_list pos:start="59:13" pos:end="59:19">(<argument pos:start="59:14" pos:end="59:18"><expr pos:start="59:14" pos:end="59:18"><name pos:start="59:14" pos:end="59:18">WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:42">(<expr pos:start="61:16" pos:end="61:41"><call pos:start="61:16" pos:end="61:41"><name pos:start="61:16" pos:end="61:23">strstart</name><argument_list pos:start="61:24" pos:end="61:41">(<argument pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><name pos:start="61:25" pos:end="61:27">uri</name></expr></argument>, <argument pos:start="61:30" pos:end="61:36"><expr pos:start="61:30" pos:end="61:36"><literal type="string" pos:start="61:30" pos:end="61:36">"exec:"</literal></expr></argument>, <argument pos:start="61:39" pos:end="61:40"><expr pos:start="61:39" pos:end="61:40"><operator pos:start="61:39" pos:end="61:39">&amp;</operator><name pos:start="61:40" pos:end="61:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:44" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:50">

        <expr_stmt pos:start="63:9" pos:end="63:50"><expr pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:49"><name pos:start="63:15" pos:end="63:43">exec_start_outgoing_migration</name><argument_list pos:start="63:44" pos:end="63:49">(<argument pos:start="63:45" pos:end="63:45"><expr pos:start="63:45" pos:end="63:45"><name pos:start="63:45" pos:end="63:45">s</name></expr></argument>, <argument pos:start="63:48" pos:end="63:48"><expr pos:start="63:48" pos:end="63:48"><name pos:start="63:48" pos:end="63:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="69:5">else if <condition pos:start="65:15" pos:end="65:42">(<expr pos:start="65:16" pos:end="65:41"><call pos:start="65:16" pos:end="65:41"><name pos:start="65:16" pos:end="65:23">strstart</name><argument_list pos:start="65:24" pos:end="65:41">(<argument pos:start="65:25" pos:end="65:27"><expr pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">uri</name></expr></argument>, <argument pos:start="65:30" pos:end="65:36"><expr pos:start="65:30" pos:end="65:36"><literal type="string" pos:start="65:30" pos:end="65:36">"unix:"</literal></expr></argument>, <argument pos:start="65:39" pos:end="65:40"><expr pos:start="65:39" pos:end="65:40"><operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:44" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:50">

        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:49"><name pos:start="67:15" pos:end="67:43">unix_start_outgoing_migration</name><argument_list pos:start="67:44" pos:end="67:49">(<argument pos:start="67:45" pos:end="67:45"><expr pos:start="67:45" pos:end="67:45"><name pos:start="67:45" pos:end="67:45">s</name></expr></argument>, <argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><name pos:start="67:48" pos:end="67:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="75:5">else if <condition pos:start="69:15" pos:end="69:40">(<expr pos:start="69:16" pos:end="69:39"><call pos:start="69:16" pos:end="69:39"><name pos:start="69:16" pos:end="69:23">strstart</name><argument_list pos:start="69:24" pos:end="69:39">(<argument pos:start="69:25" pos:end="69:27"><expr pos:start="69:25" pos:end="69:27"><name pos:start="69:25" pos:end="69:27">uri</name></expr></argument>, <argument pos:start="69:30" pos:end="69:34"><expr pos:start="69:30" pos:end="69:34"><literal type="string" pos:start="69:30" pos:end="69:34">"fd:"</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:38"><expr pos:start="69:37" pos:end="69:38"><operator pos:start="69:37" pos:end="69:37">&amp;</operator><name pos:start="69:38" pos:end="69:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:42" pos:end="75:5">{<block_content pos:start="71:9" pos:end="74:0">

        <expr_stmt pos:start="71:9" pos:end="74:0"><expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:47"><name pos:start="71:15" pos:end="71:41">fd_start_outgoing_migration</name><argument_list pos:start="71:42" pos:end="71:47">(<argument pos:start="71:43" pos:end="71:43"><expr pos:start="71:43" pos:end="71:43"><name pos:start="71:43" pos:end="71:43">s</name></expr></argument>, <argument pos:start="71:46" pos:end="71:46"><expr pos:start="71:46" pos:end="71:46"><name pos:start="71:46" pos:end="71:46">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="81:5">else <block pos:start="75:12" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:23">

        <expr_stmt pos:start="77:9" pos:end="77:69"><expr pos:start="77:9" pos:end="77:68"><call pos:start="77:9" pos:end="77:68"><name pos:start="77:9" pos:end="77:22">monitor_printf</name><argument_list pos:start="77:23" pos:end="77:68">(<argument pos:start="77:24" pos:end="77:26"><expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">mon</name></expr></argument>, <argument pos:start="77:29" pos:end="77:62"><expr pos:start="77:29" pos:end="77:62"><literal type="string" pos:start="77:29" pos:end="77:62">"unknown migration protocol: %s\n"</literal></expr></argument>, <argument pos:start="77:65" pos:end="77:67"><expr pos:start="77:65" pos:end="77:67"><name pos:start="77:65" pos:end="77:67">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:11">ret</name>  <operator pos:start="79:14" pos:end="79:14">=</operator> <operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:22">EINVAL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:70"><expr pos:start="87:9" pos:end="87:69"><call pos:start="87:9" pos:end="87:69"><name pos:start="87:9" pos:end="87:22">monitor_printf</name><argument_list pos:start="87:23" pos:end="87:69">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">mon</name></expr></argument>, <argument pos:start="87:29" pos:end="87:52"><expr pos:start="87:29" pos:end="87:52"><literal type="string" pos:start="87:29" pos:end="87:52">"migration failed: %s\n"</literal></expr></argument>, <argument pos:start="87:55" pos:end="87:68"><expr pos:start="87:55" pos:end="87:68"><call pos:start="87:55" pos:end="87:68"><name pos:start="87:55" pos:end="87:62">strerror</name><argument_list pos:start="87:63" pos:end="87:68">(<argument pos:start="87:64" pos:end="87:67"><expr pos:start="87:64" pos:end="87:67"><operator pos:start="87:64" pos:end="87:64">-</operator><name pos:start="87:65" pos:end="87:67">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:15">(<expr pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:14">detach</name></expr>)</condition> <block pos:start="95:17" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:22">

        <expr_stmt pos:start="97:9" pos:end="97:22"><expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:14">mon</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:21">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:56"><expr pos:start="103:5" pos:end="103:55"><call pos:start="103:5" pos:end="103:55"><name pos:start="103:5" pos:end="103:24">notifier_list_notify</name><argument_list pos:start="103:25" pos:end="103:55">(<argument pos:start="103:26" pos:end="103:51"><expr pos:start="103:26" pos:end="103:51"><operator pos:start="103:26" pos:end="103:26">&amp;</operator><name pos:start="103:27" pos:end="103:51">migration_state_notifiers</name></expr></argument>, <argument pos:start="103:54" pos:end="103:54"><expr pos:start="103:54" pos:end="103:54"><name pos:start="103:54" pos:end="103:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
