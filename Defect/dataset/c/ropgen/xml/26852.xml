<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26852.c" pos:tabs="8"><function pos:start="1:1" pos:end="329:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vp3_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:55">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, 

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="329:1">{<block_content pos:start="9:5" pos:end="327:20">

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">Vp3DecodeContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:14"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:14">int</name></type> <name pos:start="13:16" pos:end="13:22">counter</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><call pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:17">init_get_bits</name><argument_list pos:start="17:18" pos:end="17:41">(<argument pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:21">gb</name></expr></argument>, <argument pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:26">buf</name></expr></argument>, <argument pos:start="17:29" pos:end="17:40"><expr pos:start="17:29" pos:end="17:40"><name pos:start="17:29" pos:end="17:36">buf_size</name> <operator pos:start="17:38" pos:end="17:38">*</operator> <literal type="number" pos:start="17:40" pos:end="17:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <if_stmt pos:start="21:5" pos:end="59:5"><if pos:start="21:5" pos:end="59:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">theora</name></name> <operator pos:start="21:19" pos:end="21:20">&amp;&amp;</operator> <call pos:start="21:22" pos:end="21:35"><name pos:start="21:22" pos:end="21:30">get_bits1</name><argument_list pos:start="21:31" pos:end="21:35">(<argument pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:34"><operator pos:start="21:32" pos:end="21:32">&amp;</operator><name pos:start="21:33" pos:end="21:34">gb</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="23:5" pos:end="59:5">{<block_content pos:start="25:9" pos:end="57:24">

	<decl_stmt pos:start="25:9" pos:end="25:37"><decl pos:start="25:9" pos:end="25:36"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:17">ptype</name> <init pos:start="25:19" pos:end="25:36">= <expr pos:start="25:21" pos:end="25:36"><call pos:start="25:21" pos:end="25:36"><name pos:start="25:21" pos:end="25:28">get_bits</name><argument_list pos:start="25:29" pos:end="25:36">(<argument pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><operator pos:start="25:30" pos:end="25:30">&amp;</operator><name pos:start="25:31" pos:end="25:32">gb</name></expr></argument>, <argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="29:9" pos:end="29:28"><expr pos:start="29:9" pos:end="29:27"><call pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:17">skip_bits</name><argument_list pos:start="29:18" pos:end="29:27">(<argument pos:start="29:19" pos:end="29:21"><expr pos:start="29:19" pos:end="29:21"><operator pos:start="29:19" pos:end="29:19">&amp;</operator><name pos:start="29:20" pos:end="29:21">gb</name></expr></argument>, <argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><literal type="number" pos:start="29:24" pos:end="29:24">6</literal><operator pos:start="29:25" pos:end="29:25">*</operator><literal type="number" pos:start="29:26" pos:end="29:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:30" pos:end="29:43">/* "theora" */</comment>

	

	<switch pos:start="33:9" pos:end="55:9">switch<condition pos:start="33:15" pos:end="33:21">(<expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">ptype</name></expr>)</condition>

	<block pos:start="35:9" pos:end="55:9">{<block_content pos:start="37:13" pos:end="53:89">

	    <case pos:start="37:13" pos:end="37:19">case <expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">1</literal></expr>:</case>

		<expr_stmt pos:start="39:17" pos:end="39:50"><expr pos:start="39:17" pos:end="39:49"><call pos:start="39:17" pos:end="39:49"><name pos:start="39:17" pos:end="39:38">theora_decode_comments</name><argument_list pos:start="39:39" pos:end="39:49">(<argument pos:start="39:40" pos:end="39:44"><expr pos:start="39:40" pos:end="39:44"><name pos:start="39:40" pos:end="39:44">avctx</name></expr></argument>, <argument pos:start="39:47" pos:end="39:48"><expr pos:start="39:47" pos:end="39:48"><name pos:start="39:47" pos:end="39:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="41:17" pos:end="41:22">break;</break>

	    <case pos:start="43:13" pos:end="43:19">case <expr pos:start="43:18" pos:end="43:18"><literal type="number" pos:start="43:18" pos:end="43:18">2</literal></expr>:</case>

		<expr_stmt pos:start="45:17" pos:end="45:48"><expr pos:start="45:17" pos:end="45:47"><call pos:start="45:17" pos:end="45:47"><name pos:start="45:17" pos:end="45:36">theora_decode_tables</name><argument_list pos:start="45:37" pos:end="45:47">(<argument pos:start="45:38" pos:end="45:42"><expr pos:start="45:38" pos:end="45:42"><name pos:start="45:38" pos:end="45:42">avctx</name></expr></argument>, <argument pos:start="45:45" pos:end="45:46"><expr pos:start="45:45" pos:end="45:46"><name pos:start="45:45" pos:end="45:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    		<expr_stmt pos:start="47:17" pos:end="47:36"><expr pos:start="47:17" pos:end="47:35"><call pos:start="47:17" pos:end="47:35"><name pos:start="47:17" pos:end="47:32">init_dequantizer</name><argument_list pos:start="47:33" pos:end="47:35">(<argument pos:start="47:34" pos:end="47:34"><expr pos:start="47:34" pos:end="47:34"><name pos:start="47:34" pos:end="47:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="49:17" pos:end="49:22">break;</break>

	    <default pos:start="51:13" pos:end="51:20">default:</default>

		<expr_stmt pos:start="53:17" pos:end="53:89"><expr pos:start="53:17" pos:end="53:88"><call pos:start="53:17" pos:end="53:88"><name pos:start="53:17" pos:end="53:22">av_log</name><argument_list pos:start="53:23" pos:end="53:88">(<argument pos:start="53:24" pos:end="53:28"><expr pos:start="53:24" pos:end="53:28"><name pos:start="53:24" pos:end="53:28">avctx</name></expr></argument>, <argument pos:start="53:31" pos:end="53:42"><expr pos:start="53:31" pos:end="53:42"><name pos:start="53:31" pos:end="53:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:45" pos:end="53:80"><expr pos:start="53:45" pos:end="53:80"><literal type="string" pos:start="53:45" pos:end="53:80">"Unknown Theora config packet: %d\n"</literal></expr></argument>, <argument pos:start="53:83" pos:end="53:87"><expr pos:start="53:83" pos:end="53:87"><name pos:start="53:83" pos:end="53:87">ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></switch>

	<return pos:start="57:9" pos:end="57:24">return <expr pos:start="57:16" pos:end="57:23"><name pos:start="57:16" pos:end="57:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:34"><expr pos:start="63:5" pos:end="63:33"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:15">keyframe</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">!</operator><call pos:start="63:20" pos:end="63:33"><name pos:start="63:20" pos:end="63:28">get_bits1</name><argument_list pos:start="63:29" pos:end="63:33">(<argument pos:start="63:30" pos:end="63:32"><expr pos:start="63:30" pos:end="63:32"><operator pos:start="63:30" pos:end="63:30">&amp;</operator><name pos:start="63:31" pos:end="63:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="67:26"><if pos:start="65:5" pos:end="67:26">if <condition pos:start="65:8" pos:end="65:19">(<expr pos:start="65:9" pos:end="65:18"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:18"><name pos:start="65:10" pos:end="65:10">s</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:18">theora</name></name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:26"><block_content pos:start="67:9" pos:end="67:26">

	<expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><call pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:17">skip_bits</name><argument_list pos:start="67:18" pos:end="67:25">(<argument pos:start="67:19" pos:end="67:21"><expr pos:start="67:19" pos:end="67:21"><operator pos:start="67:19" pos:end="67:19">&amp;</operator><name pos:start="67:20" pos:end="67:21">gb</name></expr></argument>, <argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:45"><expr pos:start="69:5" pos:end="69:44"><name pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:25">last_quality_index</name></name> <operator pos:start="69:27" pos:end="69:27">=</operator> <name pos:start="69:29" pos:end="69:44"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:44">quality_index</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:40"><expr pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:20">quality_index</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:39"><name pos:start="71:24" pos:end="71:31">get_bits</name><argument_list pos:start="71:32" pos:end="71:39">(<argument pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:35">gb</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="75:24"><if pos:start="73:5" pos:end="75:24">if <condition pos:start="73:8" pos:end="73:30">(<expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">theora</name></name> <operator pos:start="73:19" pos:end="73:20">&gt;=</operator> <literal type="number" pos:start="73:22" pos:end="73:29">0x030200</literal></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:24"><block_content pos:start="75:9" pos:end="75:24">

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><call pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:18">skip_bits1</name><argument_list pos:start="75:19" pos:end="75:23">(<argument pos:start="75:20" pos:end="75:22"><expr pos:start="75:20" pos:end="75:22"><operator pos:start="75:20" pos:end="75:20">&amp;</operator><name pos:start="75:21" pos:end="75:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="83:61"><if pos:start="79:5" pos:end="83:61">if <condition pos:start="79:8" pos:end="79:45">(<expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">avctx</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:23">debug</name></name> <operator pos:start="79:25" pos:end="79:25">&amp;</operator> <name pos:start="79:27" pos:end="79:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="83:61"><block_content pos:start="81:9" pos:end="83:61">

	<expr_stmt pos:start="81:9" pos:end="83:61"><expr pos:start="81:9" pos:end="83:60"><call pos:start="81:9" pos:end="83:60"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="83:60">(<argument pos:start="81:16" pos:end="81:23"><expr pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:23">avctx</name></name></expr></argument>, <argument pos:start="81:26" pos:end="81:36"><expr pos:start="81:26" pos:end="81:36"><name pos:start="81:26" pos:end="81:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="81:39" pos:end="81:72"><expr pos:start="81:39" pos:end="81:72"><literal type="string" pos:start="81:39" pos:end="81:72">" VP3 %sframe #%d: Q index = %d\n"</literal></expr></argument>,

	    <argument pos:start="83:13" pos:end="83:32"><expr pos:start="83:13" pos:end="83:32"><ternary pos:start="83:13" pos:end="83:32"><condition pos:start="83:13" pos:end="83:24"><expr pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:23">keyframe</name></name></expr>?</condition><then pos:start="83:25" pos:end="83:29"><expr pos:start="83:25" pos:end="83:29"><literal type="string" pos:start="83:25" pos:end="83:29">"key"</literal></expr></then><else pos:start="83:30" pos:end="83:32">:<expr pos:start="83:31" pos:end="83:32"><literal type="string" pos:start="83:31" pos:end="83:32">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="83:35" pos:end="83:41"><expr pos:start="83:35" pos:end="83:41"><name pos:start="83:35" pos:end="83:41">counter</name></expr></argument>, <argument pos:start="83:44" pos:end="83:59"><expr pos:start="83:44" pos:end="83:59"><name pos:start="83:44" pos:end="83:59"><name pos:start="83:44" pos:end="83:44">s</name><operator pos:start="83:45" pos:end="83:46">-&gt;</operator><name pos:start="83:47" pos:end="83:59">quality_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:14"><expr pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:11">counter</name><operator pos:start="85:12" pos:end="85:13">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="91:28"><if pos:start="89:5" pos:end="91:28">if <condition pos:start="89:8" pos:end="89:50">(<expr pos:start="89:9" pos:end="89:49"><name pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:24">quality_index</name></name> <operator pos:start="89:26" pos:end="89:27">!=</operator> <name pos:start="89:29" pos:end="89:49"><name pos:start="89:29" pos:end="89:29">s</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:49">last_quality_index</name></name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:28"><block_content pos:start="91:9" pos:end="91:28">

        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><call pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:24">init_dequantizer</name><argument_list pos:start="91:25" pos:end="91:27">(<argument pos:start="91:26" pos:end="91:26"><expr pos:start="91:26" pos:end="91:26"><name pos:start="91:26" pos:end="91:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="203:5"><if pos:start="95:5" pos:end="189:5">if <condition pos:start="95:8" pos:end="95:20">(<expr pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:19">keyframe</name></name></expr>)</condition> <block pos:start="95:22" pos:end="189:5">{<block_content pos:start="97:9" pos:end="187:9">

	<if_stmt pos:start="97:9" pos:end="117:9"><if pos:start="97:9" pos:end="117:9">if <condition pos:start="97:12" pos:end="97:23">(<expr pos:start="97:13" pos:end="97:22"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:22"><name pos:start="97:14" pos:end="97:14">s</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:22">theora</name></name></expr>)</condition>

	<block pos:start="99:9" pos:end="117:9">{<block_content pos:start="101:13" pos:end="115:13">

	    <expr_stmt pos:start="101:13" pos:end="101:30"><expr pos:start="101:13" pos:end="101:29"><call pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:21">skip_bits</name><argument_list pos:start="101:22" pos:end="101:29">(<argument pos:start="101:23" pos:end="101:25"><expr pos:start="101:23" pos:end="101:25"><operator pos:start="101:23" pos:end="101:23">&amp;</operator><name pos:start="101:24" pos:end="101:25">gb</name></expr></argument>, <argument pos:start="101:28" pos:end="101:28"><expr pos:start="101:28" pos:end="101:28"><literal type="number" pos:start="101:28" pos:end="101:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:32" pos:end="101:47">/* width code */</comment>

	    <expr_stmt pos:start="103:13" pos:end="103:30"><expr pos:start="103:13" pos:end="103:29"><call pos:start="103:13" pos:end="103:29"><name pos:start="103:13" pos:end="103:21">skip_bits</name><argument_list pos:start="103:22" pos:end="103:29">(<argument pos:start="103:23" pos:end="103:25"><expr pos:start="103:23" pos:end="103:25"><operator pos:start="103:23" pos:end="103:23">&amp;</operator><name pos:start="103:24" pos:end="103:25">gb</name></expr></argument>, <argument pos:start="103:28" pos:end="103:28"><expr pos:start="103:28" pos:end="103:28"><literal type="number" pos:start="103:28" pos:end="103:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="103:32" pos:end="103:48">/* height code */</comment>

	    <if_stmt pos:start="105:13" pos:end="115:13"><if pos:start="105:13" pos:end="115:13">if <condition pos:start="105:16" pos:end="105:27">(<expr pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:26">version</name></name></expr>)</condition>

	    <block pos:start="107:13" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:83">

		<expr_stmt pos:start="109:17" pos:end="109:46"><expr pos:start="109:17" pos:end="109:45"><name pos:start="109:17" pos:end="109:26"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:26">version</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <call pos:start="109:30" pos:end="109:45"><name pos:start="109:30" pos:end="109:37">get_bits</name><argument_list pos:start="109:38" pos:end="109:45">(<argument pos:start="109:39" pos:end="109:41"><expr pos:start="109:39" pos:end="109:41"><operator pos:start="109:39" pos:end="109:39">&amp;</operator><name pos:start="109:40" pos:end="109:41">gb</name></expr></argument>, <argument pos:start="109:44" pos:end="109:44"><expr pos:start="109:44" pos:end="109:44"><literal type="number" pos:start="109:44" pos:end="109:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="111:17" pos:end="113:83"><if pos:start="111:17" pos:end="113:83">if <condition pos:start="111:20" pos:end="111:33">(<expr pos:start="111:21" pos:end="111:32"><name pos:start="111:21" pos:end="111:27">counter</name> <operator pos:start="111:29" pos:end="111:30">==</operator> <literal type="number" pos:start="111:32" pos:end="111:32">1</literal></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="113:83"><block_content pos:start="113:21" pos:end="113:83">

		    <expr_stmt pos:start="113:21" pos:end="113:83"><expr pos:start="113:21" pos:end="113:82"><call pos:start="113:21" pos:end="113:82"><name pos:start="113:21" pos:end="113:26">av_log</name><argument_list pos:start="113:27" pos:end="113:82">(<argument pos:start="113:28" pos:end="113:35"><expr pos:start="113:28" pos:end="113:35"><name pos:start="113:28" pos:end="113:35"><name pos:start="113:28" pos:end="113:28">s</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:35">avctx</name></name></expr></argument>, <argument pos:start="113:38" pos:end="113:49"><expr pos:start="113:38" pos:end="113:49"><name pos:start="113:38" pos:end="113:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="113:52" pos:end="113:69"><expr pos:start="113:52" pos:end="113:69"><literal type="string" pos:start="113:52" pos:end="113:69">"VP version: %d\n"</literal></expr></argument>, <argument pos:start="113:72" pos:end="113:81"><expr pos:start="113:72" pos:end="113:81"><name pos:start="113:72" pos:end="113:81"><name pos:start="113:72" pos:end="113:72">s</name><operator pos:start="113:73" pos:end="113:74">-&gt;</operator><name pos:start="113:75" pos:end="113:81">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="119:9" pos:end="129:9"><if pos:start="119:9" pos:end="129:9">if <condition pos:start="119:12" pos:end="119:36">(<expr pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:22">version</name></name> <operator pos:start="119:24" pos:end="119:25">||</operator> <name pos:start="119:27" pos:end="119:35"><name pos:start="119:27" pos:end="119:27">s</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:35">theora</name></name></expr>)</condition>

	<block pos:start="121:9" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:30">

    	    <if_stmt pos:start="123:13" pos:end="125:96"><if pos:start="123:13" pos:end="125:96">if <condition pos:start="123:16" pos:end="123:31">(<expr pos:start="123:17" pos:end="123:30"><call pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:25">get_bits1</name><argument_list pos:start="123:26" pos:end="123:30">(<argument pos:start="123:27" pos:end="123:29"><expr pos:start="123:27" pos:end="123:29"><operator pos:start="123:27" pos:end="123:27">&amp;</operator><name pos:start="123:28" pos:end="123:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:96"><block_content pos:start="125:17" pos:end="125:96">

    	        <expr_stmt pos:start="125:17" pos:end="125:96"><expr pos:start="125:17" pos:end="125:95"><call pos:start="125:17" pos:end="125:95"><name pos:start="125:17" pos:end="125:22">av_log</name><argument_list pos:start="125:23" pos:end="125:95">(<argument pos:start="125:24" pos:end="125:31"><expr pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:24">s</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:31">avctx</name></name></expr></argument>, <argument pos:start="125:34" pos:end="125:45"><expr pos:start="125:34" pos:end="125:45"><name pos:start="125:34" pos:end="125:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:48" pos:end="125:94"><expr pos:start="125:48" pos:end="125:94"><literal type="string" pos:start="125:48" pos:end="125:94">"Warning, unsupported keyframe coding type?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="127:13" pos:end="127:30"><expr pos:start="127:13" pos:end="127:29"><call pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:21">skip_bits</name><argument_list pos:start="127:22" pos:end="127:29">(<argument pos:start="127:23" pos:end="127:25"><expr pos:start="127:23" pos:end="127:25"><operator pos:start="127:23" pos:end="127:23">&amp;</operator><name pos:start="127:24" pos:end="127:25">gb</name></expr></argument>, <argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><literal type="number" pos:start="127:28" pos:end="127:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="127:32" pos:end="127:46">/* reserved? */</comment>

	</block_content>}</block></if></if_stmt>



        <if_stmt pos:start="133:9" pos:end="151:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:61">(<expr pos:start="133:13" pos:end="133:60"><name pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:25">last_frame</name><operator pos:start="133:26" pos:end="133:26">.</operator><name pos:start="133:27" pos:end="133:30">data</name><index pos:start="133:31" pos:end="133:33">[<expr pos:start="133:32" pos:end="133:32"><literal type="number" pos:start="133:32" pos:end="133:32">0</literal></expr>]</index></name> <operator pos:start="133:35" pos:end="133:36">==</operator> <name pos:start="133:38" pos:end="133:60"><name pos:start="133:38" pos:end="133:38">s</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:52">golden_frame</name><operator pos:start="133:53" pos:end="133:53">.</operator><name pos:start="133:54" pos:end="133:57">data</name><index pos:start="133:58" pos:end="133:60">[<expr pos:start="133:59" pos:end="133:59"><literal type="number" pos:start="133:59" pos:end="133:59">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="133:63" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:43">

            <if_stmt pos:start="135:13" pos:end="137:63"><if pos:start="135:13" pos:end="137:63">if <condition pos:start="135:16" pos:end="135:40">(<expr pos:start="135:17" pos:end="135:39"><name pos:start="135:17" pos:end="135:39"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:31">golden_frame</name><operator pos:start="135:32" pos:end="135:32">.</operator><name pos:start="135:33" pos:end="135:36">data</name><index pos:start="135:37" pos:end="135:39">[<expr pos:start="135:38" pos:end="135:38"><literal type="number" pos:start="135:38" pos:end="135:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:63"><block_content pos:start="137:17" pos:end="137:63">

                <expr_stmt pos:start="137:17" pos:end="137:63"><expr pos:start="137:17" pos:end="137:62"><call pos:start="137:17" pos:end="137:62"><name pos:start="137:17" pos:end="137:37"><name pos:start="137:17" pos:end="137:21">avctx</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:37">release_buffer</name></name><argument_list pos:start="137:38" pos:end="137:62">(<argument pos:start="137:39" pos:end="137:43"><expr pos:start="137:39" pos:end="137:43"><name pos:start="137:39" pos:end="137:43">avctx</name></expr></argument>, <argument pos:start="137:46" pos:end="137:61"><expr pos:start="137:46" pos:end="137:61"><operator pos:start="137:46" pos:end="137:46">&amp;</operator><name pos:start="137:47" pos:end="137:61"><name pos:start="137:47" pos:end="137:47">s</name><operator pos:start="137:48" pos:end="137:49">-&gt;</operator><name pos:start="137:50" pos:end="137:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:43"><expr pos:start="139:13" pos:end="139:42"><name pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:25">last_frame</name></name><operator pos:start="139:26" pos:end="139:26">=</operator> <name pos:start="139:28" pos:end="139:42"><name pos:start="139:28" pos:end="139:28">s</name><operator pos:start="139:29" pos:end="139:30">-&gt;</operator><name pos:start="139:31" pos:end="139:42">golden_frame</name></name></expr>;</expr_stmt> <comment type="block" pos:start="139:45" pos:end="139:104">/* ensure that we catch any access to this released frame */</comment>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="151:9">else <block pos:start="141:16" pos:end="151:9">{<block_content pos:start="143:13" pos:end="149:61">

            <if_stmt pos:start="143:13" pos:end="145:63"><if pos:start="143:13" pos:end="145:63">if <condition pos:start="143:16" pos:end="143:40">(<expr pos:start="143:17" pos:end="143:39"><name pos:start="143:17" pos:end="143:39"><name pos:start="143:17" pos:end="143:17">s</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:31">golden_frame</name><operator pos:start="143:32" pos:end="143:32">.</operator><name pos:start="143:33" pos:end="143:36">data</name><index pos:start="143:37" pos:end="143:39">[<expr pos:start="143:38" pos:end="143:38"><literal type="number" pos:start="143:38" pos:end="143:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="145:17" pos:end="145:63"><block_content pos:start="145:17" pos:end="145:63">

                <expr_stmt pos:start="145:17" pos:end="145:63"><expr pos:start="145:17" pos:end="145:62"><call pos:start="145:17" pos:end="145:62"><name pos:start="145:17" pos:end="145:37"><name pos:start="145:17" pos:end="145:21">avctx</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:37">release_buffer</name></name><argument_list pos:start="145:38" pos:end="145:62">(<argument pos:start="145:39" pos:end="145:43"><expr pos:start="145:39" pos:end="145:43"><name pos:start="145:39" pos:end="145:43">avctx</name></expr></argument>, <argument pos:start="145:46" pos:end="145:61"><expr pos:start="145:46" pos:end="145:61"><operator pos:start="145:46" pos:end="145:46">&amp;</operator><name pos:start="145:47" pos:end="145:61"><name pos:start="145:47" pos:end="145:47">s</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="147:13" pos:end="149:61"><if pos:start="147:13" pos:end="149:61">if <condition pos:start="147:16" pos:end="147:38">(<expr pos:start="147:17" pos:end="147:37"><name pos:start="147:17" pos:end="147:37"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:29">last_frame</name><operator pos:start="147:30" pos:end="147:30">.</operator><name pos:start="147:31" pos:end="147:34">data</name><index pos:start="147:35" pos:end="147:37">[<expr pos:start="147:36" pos:end="147:36"><literal type="number" pos:start="147:36" pos:end="147:36">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:61"><block_content pos:start="149:17" pos:end="149:61">

                <expr_stmt pos:start="149:17" pos:end="149:61"><expr pos:start="149:17" pos:end="149:60"><call pos:start="149:17" pos:end="149:60"><name pos:start="149:17" pos:end="149:37"><name pos:start="149:17" pos:end="149:21">avctx</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:37">release_buffer</name></name><argument_list pos:start="149:38" pos:end="149:60">(<argument pos:start="149:39" pos:end="149:43"><expr pos:start="149:39" pos:end="149:43"><name pos:start="149:39" pos:end="149:43">avctx</name></expr></argument>, <argument pos:start="149:46" pos:end="149:59"><expr pos:start="149:46" pos:end="149:59"><operator pos:start="149:46" pos:end="149:46">&amp;</operator><name pos:start="149:47" pos:end="149:59"><name pos:start="149:47" pos:end="149:47">s</name><operator pos:start="149:48" pos:end="149:49">-&gt;</operator><name pos:start="149:50" pos:end="149:59">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:38"><expr pos:start="155:9" pos:end="155:37"><name pos:start="155:9" pos:end="155:33"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:23">golden_frame</name><operator pos:start="155:24" pos:end="155:24">.</operator><name pos:start="155:25" pos:end="155:33">reference</name></name> <operator pos:start="155:35" pos:end="155:35">=</operator> <literal type="number" pos:start="155:37" pos:end="155:37">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if<condition pos:start="157:11" pos:end="157:58">(<expr pos:start="157:12" pos:end="157:57"><call pos:start="157:12" pos:end="157:53"><name pos:start="157:12" pos:end="157:28"><name pos:start="157:12" pos:end="157:16">avctx</name><operator pos:start="157:17" pos:end="157:18">-&gt;</operator><name pos:start="157:19" pos:end="157:28">get_buffer</name></name><argument_list pos:start="157:29" pos:end="157:53">(<argument pos:start="157:30" pos:end="157:34"><expr pos:start="157:30" pos:end="157:34"><name pos:start="157:30" pos:end="157:34">avctx</name></expr></argument>, <argument pos:start="157:37" pos:end="157:52"><expr pos:start="157:37" pos:end="157:52"><operator pos:start="157:37" pos:end="157:37">&amp;</operator><name pos:start="157:38" pos:end="157:52"><name pos:start="157:38" pos:end="157:38">s</name><operator pos:start="157:39" pos:end="157:40">-&gt;</operator><name pos:start="157:41" pos:end="157:52">golden_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="157:55" pos:end="157:55">&lt;</operator> <literal type="number" pos:start="157:57" pos:end="157:57">0</literal></expr>)</condition> <block pos:start="157:60" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:22">

            <expr_stmt pos:start="159:13" pos:end="159:73"><expr pos:start="159:13" pos:end="159:72"><call pos:start="159:13" pos:end="159:72"><name pos:start="159:13" pos:end="159:18">av_log</name><argument_list pos:start="159:19" pos:end="159:72">(<argument pos:start="159:20" pos:end="159:27"><expr pos:start="159:20" pos:end="159:27"><name pos:start="159:20" pos:end="159:27"><name pos:start="159:20" pos:end="159:20">s</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:27">avctx</name></name></expr></argument>, <argument pos:start="159:30" pos:end="159:41"><expr pos:start="159:30" pos:end="159:41"><name pos:start="159:30" pos:end="159:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:44" pos:end="159:71"><expr pos:start="159:44" pos:end="159:71"><literal type="string" pos:start="159:44" pos:end="159:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="161:13" pos:end="161:22">return <expr pos:start="161:20" pos:end="161:21"><operator pos:start="161:20" pos:end="161:20">-</operator><literal type="number" pos:start="161:21" pos:end="161:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="167:9" pos:end="167:52">/* golden frame is also the current frame */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:69"><expr pos:start="169:9" pos:end="169:68"><call pos:start="169:9" pos:end="169:68"><name pos:start="169:9" pos:end="169:14">memcpy</name><argument_list pos:start="169:15" pos:end="169:68">(<argument pos:start="169:16" pos:end="169:32"><expr pos:start="169:16" pos:end="169:32"><operator pos:start="169:16" pos:end="169:16">&amp;</operator><name pos:start="169:17" pos:end="169:32"><name pos:start="169:17" pos:end="169:17">s</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:32">current_frame</name></name></expr></argument>, <argument pos:start="169:35" pos:end="169:50"><expr pos:start="169:35" pos:end="169:50"><operator pos:start="169:35" pos:end="169:35">&amp;</operator><name pos:start="169:36" pos:end="169:50"><name pos:start="169:36" pos:end="169:36">s</name><operator pos:start="169:37" pos:end="169:38">-&gt;</operator><name pos:start="169:39" pos:end="169:50">golden_frame</name></name></expr></argument>, <argument pos:start="169:53" pos:end="169:67"><expr pos:start="169:53" pos:end="169:67"><sizeof pos:start="169:53" pos:end="169:67">sizeof<argument_list pos:start="169:59" pos:end="169:67">(<argument pos:start="169:60" pos:end="169:66"><expr pos:start="169:60" pos:end="169:66"><name pos:start="169:60" pos:end="169:66">AVFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:49">/* time to figure out pixel addresses? */</comment>

        <if_stmt pos:start="175:9" pos:end="187:9"><if pos:start="175:9" pos:end="187:9">if <condition pos:start="175:12" pos:end="175:39">(<expr pos:start="175:13" pos:end="175:38"><operator pos:start="175:13" pos:end="175:13">!</operator><name pos:start="175:14" pos:end="175:38"><name pos:start="175:14" pos:end="175:14">s</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:38">pixel_addresses_inited</name></name></expr>)</condition>

	<block pos:start="177:9" pos:end="187:9">{<block_content pos:start="179:13" pos:end="185:52">

	    <if_stmt pos:start="179:13" pos:end="185:52"><if pos:start="179:13" pos:end="181:49">if <condition pos:start="179:16" pos:end="179:34">(<expr pos:start="179:17" pos:end="179:33"><operator pos:start="179:17" pos:end="179:17">!</operator><name pos:start="179:18" pos:end="179:33"><name pos:start="179:18" pos:end="179:18">s</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:33">flipped_image</name></name></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:49"><block_content pos:start="181:17" pos:end="181:49">

        	<expr_stmt pos:start="181:17" pos:end="181:49"><expr pos:start="181:17" pos:end="181:48"><call pos:start="181:17" pos:end="181:48"><name pos:start="181:17" pos:end="181:45">vp3_calculate_pixel_addresses</name><argument_list pos:start="181:46" pos:end="181:48">(<argument pos:start="181:47" pos:end="181:47"><expr pos:start="181:47" pos:end="181:47"><name pos:start="181:47" pos:end="181:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	    <else pos:start="183:13" pos:end="185:52">else<block type="pseudo" pos:start="185:17" pos:end="185:52"><block_content pos:start="185:17" pos:end="185:52">

		<expr_stmt pos:start="185:17" pos:end="185:52"><expr pos:start="185:17" pos:end="185:51"><call pos:start="185:17" pos:end="185:51"><name pos:start="185:17" pos:end="185:48">theora_calculate_pixel_addresses</name><argument_list pos:start="185:49" pos:end="185:51">(<argument pos:start="185:50" pos:end="185:50"><expr pos:start="185:50" pos:end="185:50"><name pos:start="185:50" pos:end="185:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="203:5">else <block pos:start="189:12" pos:end="203:5">{<block_content pos:start="193:9" pos:end="201:9">

        <comment type="block" pos:start="191:9" pos:end="191:42">/* allocate a new current frame */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:39"><expr pos:start="193:9" pos:end="193:38"><name pos:start="193:9" pos:end="193:34"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:24">current_frame</name><operator pos:start="193:25" pos:end="193:25">.</operator><name pos:start="193:26" pos:end="193:34">reference</name></name> <operator pos:start="193:36" pos:end="193:36">=</operator> <literal type="number" pos:start="193:38" pos:end="193:38">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if<condition pos:start="195:11" pos:end="195:59">(<expr pos:start="195:12" pos:end="195:58"><call pos:start="195:12" pos:end="195:54"><name pos:start="195:12" pos:end="195:28"><name pos:start="195:12" pos:end="195:16">avctx</name><operator pos:start="195:17" pos:end="195:18">-&gt;</operator><name pos:start="195:19" pos:end="195:28">get_buffer</name></name><argument_list pos:start="195:29" pos:end="195:54">(<argument pos:start="195:30" pos:end="195:34"><expr pos:start="195:30" pos:end="195:34"><name pos:start="195:30" pos:end="195:34">avctx</name></expr></argument>, <argument pos:start="195:37" pos:end="195:53"><expr pos:start="195:37" pos:end="195:53"><operator pos:start="195:37" pos:end="195:37">&amp;</operator><name pos:start="195:38" pos:end="195:53"><name pos:start="195:38" pos:end="195:38">s</name><operator pos:start="195:39" pos:end="195:40">-&gt;</operator><name pos:start="195:41" pos:end="195:53">current_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="195:56" pos:end="195:56">&lt;</operator> <literal type="number" pos:start="195:58" pos:end="195:58">0</literal></expr>)</condition> <block pos:start="195:61" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:22">

            <expr_stmt pos:start="197:13" pos:end="197:73"><expr pos:start="197:13" pos:end="197:72"><call pos:start="197:13" pos:end="197:72"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="197:72">(<argument pos:start="197:20" pos:end="197:27"><expr pos:start="197:20" pos:end="197:27"><name pos:start="197:20" pos:end="197:27"><name pos:start="197:20" pos:end="197:20">s</name><operator pos:start="197:21" pos:end="197:22">-&gt;</operator><name pos:start="197:23" pos:end="197:27">avctx</name></name></expr></argument>, <argument pos:start="197:30" pos:end="197:41"><expr pos:start="197:30" pos:end="197:41"><name pos:start="197:30" pos:end="197:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:44" pos:end="197:71"><expr pos:start="197:44" pos:end="197:71"><literal type="string" pos:start="197:44" pos:end="197:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="199:13" pos:end="199:22">return <expr pos:start="199:20" pos:end="199:21"><operator pos:start="199:20" pos:end="199:20">-</operator><literal type="number" pos:start="199:21" pos:end="199:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:51"><expr pos:start="207:5" pos:end="207:50"><name pos:start="207:5" pos:end="207:33"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:20">current_frame</name><operator pos:start="207:21" pos:end="207:21">.</operator><name pos:start="207:22" pos:end="207:33">qscale_table</name></name><operator pos:start="207:34" pos:end="207:34">=</operator> <name pos:start="207:36" pos:end="207:50"><name pos:start="207:36" pos:end="207:36">s</name><operator pos:start="207:37" pos:end="207:38">-&gt;</operator><name pos:start="207:39" pos:end="207:50">qscale_table</name></name></expr>;</expr_stmt> <comment type="line" pos:start="207:53" pos:end="207:98">//FIXME allocate individual tables per AVFrame</comment>

    <expr_stmt pos:start="209:5" pos:end="209:32"><expr pos:start="209:5" pos:end="209:31"><name pos:start="209:5" pos:end="209:28"><name pos:start="209:5" pos:end="209:5">s</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:20">current_frame</name><operator pos:start="209:21" pos:end="209:21">.</operator><name pos:start="209:22" pos:end="209:28">qstride</name></name><operator pos:start="209:29" pos:end="209:29">=</operator> <literal type="number" pos:start="209:31" pos:end="209:31">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="218:0"><expr pos:start="213:5" pos:end="213:22"><call pos:start="213:5" pos:end="213:22"><name pos:start="213:5" pos:end="213:14">init_frame</name><argument_list pos:start="213:15" pos:end="213:22">(<argument pos:start="213:16" pos:end="213:16"><expr pos:start="213:16" pos:end="213:16"><name pos:start="213:16" pos:end="213:16">s</name></expr></argument>, <argument pos:start="213:19" pos:end="213:21"><expr pos:start="213:19" pos:end="213:21"><operator pos:start="213:19" pos:end="213:19">&amp;</operator><name pos:start="213:20" pos:end="213:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="217:1" pos:end="217:18">#<cpp:directive pos:start="217:2" pos:end="217:3">if</cpp:directive> <expr pos:start="217:5" pos:end="217:18"><name pos:start="217:5" pos:end="217:18">KEYFRAMES_ONLY</name></expr></cpp:if>

<if_stmt pos:start="219:1" pos:end="298:0"><if pos:start="219:1" pos:end="237:1">if <condition pos:start="219:4" pos:end="219:17">(<expr pos:start="219:5" pos:end="219:16"><operator pos:start="219:5" pos:end="219:5">!</operator><name pos:start="219:6" pos:end="219:16"><name pos:start="219:6" pos:end="219:6">s</name><operator pos:start="219:7" pos:end="219:8">-&gt;</operator><name pos:start="219:9" pos:end="219:16">keyframe</name></name></expr>)</condition> <block pos:start="219:19" pos:end="237:1">{<block_content pos:start="223:5" pos:end="233:54">



    <expr_stmt pos:start="223:5" pos:end="225:50"><expr pos:start="223:5" pos:end="225:49"><call pos:start="223:5" pos:end="225:49"><name pos:start="223:5" pos:end="223:10">memcpy</name><argument_list pos:start="223:11" pos:end="225:49">(<argument pos:start="223:12" pos:end="223:35"><expr pos:start="223:12" pos:end="223:35"><name pos:start="223:12" pos:end="223:35"><name pos:start="223:12" pos:end="223:12">s</name><operator pos:start="223:13" pos:end="223:14">-&gt;</operator><name pos:start="223:15" pos:end="223:27">current_frame</name><operator pos:start="223:28" pos:end="223:28">.</operator><name pos:start="223:29" pos:end="223:32">data</name><index pos:start="223:33" pos:end="223:35">[<expr pos:start="223:34" pos:end="223:34"><literal type="number" pos:start="223:34" pos:end="223:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="223:38" pos:end="223:60"><expr pos:start="223:38" pos:end="223:60"><name pos:start="223:38" pos:end="223:60"><name pos:start="223:38" pos:end="223:38">s</name><operator pos:start="223:39" pos:end="223:40">-&gt;</operator><name pos:start="223:41" pos:end="223:52">golden_frame</name><operator pos:start="223:53" pos:end="223:53">.</operator><name pos:start="223:54" pos:end="223:57">data</name><index pos:start="223:58" pos:end="223:60">[<expr pos:start="223:59" pos:end="223:59"><literal type="number" pos:start="223:59" pos:end="223:59">0</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="225:9" pos:end="225:48"><expr pos:start="225:9" pos:end="225:48"><name pos:start="225:9" pos:end="225:36"><name pos:start="225:9" pos:end="225:9">s</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:24">current_frame</name><operator pos:start="225:25" pos:end="225:25">.</operator><name pos:start="225:26" pos:end="225:33">linesize</name><index pos:start="225:34" pos:end="225:36">[<expr pos:start="225:35" pos:end="225:35"><literal type="number" pos:start="225:35" pos:end="225:35">0</literal></expr>]</index></name> <operator pos:start="225:38" pos:end="225:38">*</operator> <name pos:start="225:40" pos:end="225:48"><name pos:start="225:40" pos:end="225:40">s</name><operator pos:start="225:41" pos:end="225:42">-&gt;</operator><name pos:start="225:43" pos:end="225:48">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="229:54"><expr pos:start="227:5" pos:end="229:53"><call pos:start="227:5" pos:end="229:53"><name pos:start="227:5" pos:end="227:10">memcpy</name><argument_list pos:start="227:11" pos:end="229:53">(<argument pos:start="227:12" pos:end="227:35"><expr pos:start="227:12" pos:end="227:35"><name pos:start="227:12" pos:end="227:35"><name pos:start="227:12" pos:end="227:12">s</name><operator pos:start="227:13" pos:end="227:14">-&gt;</operator><name pos:start="227:15" pos:end="227:27">current_frame</name><operator pos:start="227:28" pos:end="227:28">.</operator><name pos:start="227:29" pos:end="227:32">data</name><index pos:start="227:33" pos:end="227:35">[<expr pos:start="227:34" pos:end="227:34"><literal type="number" pos:start="227:34" pos:end="227:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="227:38" pos:end="227:60"><expr pos:start="227:38" pos:end="227:60"><name pos:start="227:38" pos:end="227:60"><name pos:start="227:38" pos:end="227:38">s</name><operator pos:start="227:39" pos:end="227:40">-&gt;</operator><name pos:start="227:41" pos:end="227:52">golden_frame</name><operator pos:start="227:53" pos:end="227:53">.</operator><name pos:start="227:54" pos:end="227:57">data</name><index pos:start="227:58" pos:end="227:60">[<expr pos:start="227:59" pos:end="227:59"><literal type="number" pos:start="227:59" pos:end="227:59">1</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="229:9" pos:end="229:52"><expr pos:start="229:9" pos:end="229:52"><name pos:start="229:9" pos:end="229:36"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:24">current_frame</name><operator pos:start="229:25" pos:end="229:25">.</operator><name pos:start="229:26" pos:end="229:33">linesize</name><index pos:start="229:34" pos:end="229:36">[<expr pos:start="229:35" pos:end="229:35"><literal type="number" pos:start="229:35" pos:end="229:35">1</literal></expr>]</index></name> <operator pos:start="229:38" pos:end="229:38">*</operator> <name pos:start="229:40" pos:end="229:48"><name pos:start="229:40" pos:end="229:40">s</name><operator pos:start="229:41" pos:end="229:42">-&gt;</operator><name pos:start="229:43" pos:end="229:48">height</name></name> <operator pos:start="229:50" pos:end="229:50">/</operator> <literal type="number" pos:start="229:52" pos:end="229:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="233:54"><expr pos:start="231:5" pos:end="233:53"><call pos:start="231:5" pos:end="233:53"><name pos:start="231:5" pos:end="231:10">memcpy</name><argument_list pos:start="231:11" pos:end="233:53">(<argument pos:start="231:12" pos:end="231:35"><expr pos:start="231:12" pos:end="231:35"><name pos:start="231:12" pos:end="231:35"><name pos:start="231:12" pos:end="231:12">s</name><operator pos:start="231:13" pos:end="231:14">-&gt;</operator><name pos:start="231:15" pos:end="231:27">current_frame</name><operator pos:start="231:28" pos:end="231:28">.</operator><name pos:start="231:29" pos:end="231:32">data</name><index pos:start="231:33" pos:end="231:35">[<expr pos:start="231:34" pos:end="231:34"><literal type="number" pos:start="231:34" pos:end="231:34">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="231:38" pos:end="231:60"><expr pos:start="231:38" pos:end="231:60"><name pos:start="231:38" pos:end="231:60"><name pos:start="231:38" pos:end="231:38">s</name><operator pos:start="231:39" pos:end="231:40">-&gt;</operator><name pos:start="231:41" pos:end="231:52">golden_frame</name><operator pos:start="231:53" pos:end="231:53">.</operator><name pos:start="231:54" pos:end="231:57">data</name><index pos:start="231:58" pos:end="231:60">[<expr pos:start="231:59" pos:end="231:59"><literal type="number" pos:start="231:59" pos:end="231:59">2</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="233:9" pos:end="233:52"><expr pos:start="233:9" pos:end="233:52"><name pos:start="233:9" pos:end="233:36"><name pos:start="233:9" pos:end="233:9">s</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:24">current_frame</name><operator pos:start="233:25" pos:end="233:25">.</operator><name pos:start="233:26" pos:end="233:33">linesize</name><index pos:start="233:34" pos:end="233:36">[<expr pos:start="233:35" pos:end="233:35"><literal type="number" pos:start="233:35" pos:end="233:35">2</literal></expr>]</index></name> <operator pos:start="233:38" pos:end="233:38">*</operator> <name pos:start="233:40" pos:end="233:48"><name pos:start="233:40" pos:end="233:40">s</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:48">height</name></name> <operator pos:start="233:50" pos:end="233:50">/</operator> <literal type="number" pos:start="233:52" pos:end="233:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <else pos:start="237:3" pos:end="298:0">else <block pos:start="237:8" pos:end="298:0">{<block_content pos:start="243:5" pos:end="294:0">

<cpp:endif pos:start="239:1" pos:end="239:6">#<cpp:directive pos:start="239:2" pos:end="239:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="243:5" pos:end="257:5"><if pos:start="243:5" pos:end="257:5">if <condition pos:start="243:8" pos:end="249:34">(<expr pos:start="243:9" pos:end="249:33"><call pos:start="243:9" pos:end="243:34"><name pos:start="243:9" pos:end="243:26">unpack_superblocks</name><argument_list pos:start="243:27" pos:end="243:34">(<argument pos:start="243:28" pos:end="243:28"><expr pos:start="243:28" pos:end="243:28"><name pos:start="243:28" pos:end="243:28">s</name></expr></argument>, <argument pos:start="243:31" pos:end="243:33"><expr pos:start="243:31" pos:end="243:33"><operator pos:start="243:31" pos:end="243:31">&amp;</operator><name pos:start="243:32" pos:end="243:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="243:36" pos:end="243:37">||</operator>

        <call pos:start="245:9" pos:end="245:28"><name pos:start="245:9" pos:end="245:20">unpack_modes</name><argument_list pos:start="245:21" pos:end="245:28">(<argument pos:start="245:22" pos:end="245:22"><expr pos:start="245:22" pos:end="245:22"><name pos:start="245:22" pos:end="245:22">s</name></expr></argument>, <argument pos:start="245:25" pos:end="245:27"><expr pos:start="245:25" pos:end="245:27"><operator pos:start="245:25" pos:end="245:25">&amp;</operator><name pos:start="245:26" pos:end="245:27">gb</name></expr></argument>)</argument_list></call> <operator pos:start="245:30" pos:end="245:31">||</operator>

        <call pos:start="247:9" pos:end="247:30"><name pos:start="247:9" pos:end="247:22">unpack_vectors</name><argument_list pos:start="247:23" pos:end="247:30">(<argument pos:start="247:24" pos:end="247:24"><expr pos:start="247:24" pos:end="247:24"><name pos:start="247:24" pos:end="247:24">s</name></expr></argument>, <argument pos:start="247:27" pos:end="247:29"><expr pos:start="247:27" pos:end="247:29"><operator pos:start="247:27" pos:end="247:27">&amp;</operator><name pos:start="247:28" pos:end="247:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="247:32" pos:end="247:33">||</operator>

        <call pos:start="249:9" pos:end="249:33"><name pos:start="249:9" pos:end="249:25">unpack_dct_coeffs</name><argument_list pos:start="249:26" pos:end="249:33">(<argument pos:start="249:27" pos:end="249:27"><expr pos:start="249:27" pos:end="249:27"><name pos:start="249:27" pos:end="249:27">s</name></expr></argument>, <argument pos:start="249:30" pos:end="249:32"><expr pos:start="249:30" pos:end="249:32"><operator pos:start="249:30" pos:end="249:30">&amp;</operator><name pos:start="249:31" pos:end="249:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:36" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:18">



        <expr_stmt pos:start="253:9" pos:end="253:74"><expr pos:start="253:9" pos:end="253:73"><call pos:start="253:9" pos:end="253:73"><name pos:start="253:9" pos:end="253:14">av_log</name><argument_list pos:start="253:15" pos:end="253:73">(<argument pos:start="253:16" pos:end="253:23"><expr pos:start="253:16" pos:end="253:23"><name pos:start="253:16" pos:end="253:23"><name pos:start="253:16" pos:end="253:16">s</name><operator pos:start="253:17" pos:end="253:18">-&gt;</operator><name pos:start="253:19" pos:end="253:23">avctx</name></name></expr></argument>, <argument pos:start="253:26" pos:end="253:37"><expr pos:start="253:26" pos:end="253:37"><name pos:start="253:26" pos:end="253:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="253:40" pos:end="253:72"><expr pos:start="253:40" pos:end="253:72"><literal type="string" pos:start="253:40" pos:end="253:72">"  vp3: could not decode frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="255:9" pos:end="255:18">return <expr pos:start="255:16" pos:end="255:17"><operator pos:start="255:16" pos:end="255:16">-</operator><literal type="number" pos:start="255:17" pos:end="255:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:71"><expr pos:start="261:5" pos:end="261:70"><call pos:start="261:5" pos:end="261:70"><name pos:start="261:5" pos:end="261:25">reverse_dc_prediction</name><argument_list pos:start="261:26" pos:end="261:70">(<argument pos:start="261:27" pos:end="261:27"><expr pos:start="261:27" pos:end="261:27"><name pos:start="261:27" pos:end="261:27">s</name></expr></argument>, <argument pos:start="261:30" pos:end="261:30"><expr pos:start="261:30" pos:end="261:30"><literal type="number" pos:start="261:30" pos:end="261:30">0</literal></expr></argument>, <argument pos:start="261:33" pos:end="261:49"><expr pos:start="261:33" pos:end="261:49"><name pos:start="261:33" pos:end="261:49"><name pos:start="261:33" pos:end="261:33">s</name><operator pos:start="261:34" pos:end="261:35">-&gt;</operator><name pos:start="261:36" pos:end="261:49">fragment_width</name></name></expr></argument>, <argument pos:start="261:52" pos:end="261:69"><expr pos:start="261:52" pos:end="261:69"><name pos:start="261:52" pos:end="261:69"><name pos:start="261:52" pos:end="261:52">s</name><operator pos:start="261:53" pos:end="261:54">-&gt;</operator><name pos:start="261:55" pos:end="261:69">fragment_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:51"><expr pos:start="263:5" pos:end="263:50"><call pos:start="263:5" pos:end="263:50"><name pos:start="263:5" pos:end="263:20">render_fragments</name><argument_list pos:start="263:21" pos:end="263:50">(<argument pos:start="263:22" pos:end="263:22"><expr pos:start="263:22" pos:end="263:22"><name pos:start="263:22" pos:end="263:22">s</name></expr></argument>, <argument pos:start="263:25" pos:end="263:25"><expr pos:start="263:25" pos:end="263:25"><literal type="number" pos:start="263:25" pos:end="263:25">0</literal></expr></argument>, <argument pos:start="263:28" pos:end="263:35"><expr pos:start="263:28" pos:end="263:35"><name pos:start="263:28" pos:end="263:35"><name pos:start="263:28" pos:end="263:28">s</name><operator pos:start="263:29" pos:end="263:30">-&gt;</operator><name pos:start="263:31" pos:end="263:35">width</name></name></expr></argument>, <argument pos:start="263:38" pos:end="263:46"><expr pos:start="263:38" pos:end="263:46"><name pos:start="263:38" pos:end="263:46"><name pos:start="263:38" pos:end="263:38">s</name><operator pos:start="263:39" pos:end="263:40">-&gt;</operator><name pos:start="263:41" pos:end="263:46">height</name></name></expr></argument>, <argument pos:start="263:49" pos:end="263:49"><expr pos:start="263:49" pos:end="263:49"><literal type="number" pos:start="263:49" pos:end="263:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="265:1" pos:end="265:27">//    apply_loop_filter(s);</comment>



    <if_stmt pos:start="269:5" pos:end="294:0"><if pos:start="269:5" pos:end="283:5">if <condition pos:start="269:8" pos:end="269:46">(<expr pos:start="269:9" pos:end="269:45"><operator pos:start="269:9" pos:end="269:9">(</operator><name pos:start="269:10" pos:end="269:21"><name pos:start="269:10" pos:end="269:14">avctx</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:21">flags</name></name> <operator pos:start="269:23" pos:end="269:23">&amp;</operator> <name pos:start="269:25" pos:end="269:39">CODEC_FLAG_GRAY</name><operator pos:start="269:40" pos:end="269:40">)</operator> <operator pos:start="269:42" pos:end="269:43">==</operator> <literal type="number" pos:start="269:45" pos:end="269:45">0</literal></expr>)</condition> <block pos:start="269:48" pos:end="283:5">{<block_content pos:start="271:9" pos:end="281:81">

        <expr_stmt pos:start="271:9" pos:end="273:59"><expr pos:start="271:9" pos:end="273:58"><call pos:start="271:9" pos:end="273:58"><name pos:start="271:9" pos:end="271:29">reverse_dc_prediction</name><argument_list pos:start="271:30" pos:end="273:58">(<argument pos:start="271:31" pos:end="271:31"><expr pos:start="271:31" pos:end="271:31"><name pos:start="271:31" pos:end="271:31">s</name></expr></argument>, <argument pos:start="271:34" pos:end="271:52"><expr pos:start="271:34" pos:end="271:52"><name pos:start="271:34" pos:end="271:52"><name pos:start="271:34" pos:end="271:34">s</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:52">u_fragment_start</name></name></expr></argument>,

            <argument pos:start="273:13" pos:end="273:33"><expr pos:start="273:13" pos:end="273:33"><name pos:start="273:13" pos:end="273:29"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:29">fragment_width</name></name> <operator pos:start="273:31" pos:end="273:31">/</operator> <literal type="number" pos:start="273:33" pos:end="273:33">2</literal></expr></argument>, <argument pos:start="273:36" pos:end="273:57"><expr pos:start="273:36" pos:end="273:57"><name pos:start="273:36" pos:end="273:53"><name pos:start="273:36" pos:end="273:36">s</name><operator pos:start="273:37" pos:end="273:38">-&gt;</operator><name pos:start="273:39" pos:end="273:53">fragment_height</name></name> <operator pos:start="273:55" pos:end="273:55">/</operator> <literal type="number" pos:start="273:57" pos:end="273:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="277:59"><expr pos:start="275:9" pos:end="277:58"><call pos:start="275:9" pos:end="277:58"><name pos:start="275:9" pos:end="275:29">reverse_dc_prediction</name><argument_list pos:start="275:30" pos:end="277:58">(<argument pos:start="275:31" pos:end="275:31"><expr pos:start="275:31" pos:end="275:31"><name pos:start="275:31" pos:end="275:31">s</name></expr></argument>, <argument pos:start="275:34" pos:end="275:52"><expr pos:start="275:34" pos:end="275:52"><name pos:start="275:34" pos:end="275:52"><name pos:start="275:34" pos:end="275:34">s</name><operator pos:start="275:35" pos:end="275:36">-&gt;</operator><name pos:start="275:37" pos:end="275:52">v_fragment_start</name></name></expr></argument>,

            <argument pos:start="277:13" pos:end="277:33"><expr pos:start="277:13" pos:end="277:33"><name pos:start="277:13" pos:end="277:29"><name pos:start="277:13" pos:end="277:13">s</name><operator pos:start="277:14" pos:end="277:15">-&gt;</operator><name pos:start="277:16" pos:end="277:29">fragment_width</name></name> <operator pos:start="277:31" pos:end="277:31">/</operator> <literal type="number" pos:start="277:33" pos:end="277:33">2</literal></expr></argument>, <argument pos:start="277:36" pos:end="277:57"><expr pos:start="277:36" pos:end="277:57"><name pos:start="277:36" pos:end="277:53"><name pos:start="277:36" pos:end="277:36">s</name><operator pos:start="277:37" pos:end="277:38">-&gt;</operator><name pos:start="277:39" pos:end="277:53">fragment_height</name></name> <operator pos:start="277:55" pos:end="277:55">/</operator> <literal type="number" pos:start="277:57" pos:end="277:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:81"><expr pos:start="279:9" pos:end="279:80"><call pos:start="279:9" pos:end="279:80"><name pos:start="279:9" pos:end="279:24">render_fragments</name><argument_list pos:start="279:25" pos:end="279:80">(<argument pos:start="279:26" pos:end="279:26"><expr pos:start="279:26" pos:end="279:26"><name pos:start="279:26" pos:end="279:26">s</name></expr></argument>, <argument pos:start="279:29" pos:end="279:47"><expr pos:start="279:29" pos:end="279:47"><name pos:start="279:29" pos:end="279:47"><name pos:start="279:29" pos:end="279:29">s</name><operator pos:start="279:30" pos:end="279:31">-&gt;</operator><name pos:start="279:32" pos:end="279:47">u_fragment_start</name></name></expr></argument>, <argument pos:start="279:50" pos:end="279:61"><expr pos:start="279:50" pos:end="279:61"><name pos:start="279:50" pos:end="279:57"><name pos:start="279:50" pos:end="279:50">s</name><operator pos:start="279:51" pos:end="279:52">-&gt;</operator><name pos:start="279:53" pos:end="279:57">width</name></name> <operator pos:start="279:59" pos:end="279:59">/</operator> <literal type="number" pos:start="279:61" pos:end="279:61">2</literal></expr></argument>, <argument pos:start="279:64" pos:end="279:76"><expr pos:start="279:64" pos:end="279:76"><name pos:start="279:64" pos:end="279:72"><name pos:start="279:64" pos:end="279:64">s</name><operator pos:start="279:65" pos:end="279:66">-&gt;</operator><name pos:start="279:67" pos:end="279:72">height</name></name> <operator pos:start="279:74" pos:end="279:74">/</operator> <literal type="number" pos:start="279:76" pos:end="279:76">2</literal></expr></argument>, <argument pos:start="279:79" pos:end="279:79"><expr pos:start="279:79" pos:end="279:79"><literal type="number" pos:start="279:79" pos:end="279:79">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:81"><expr pos:start="281:9" pos:end="281:80"><call pos:start="281:9" pos:end="281:80"><name pos:start="281:9" pos:end="281:24">render_fragments</name><argument_list pos:start="281:25" pos:end="281:80">(<argument pos:start="281:26" pos:end="281:26"><expr pos:start="281:26" pos:end="281:26"><name pos:start="281:26" pos:end="281:26">s</name></expr></argument>, <argument pos:start="281:29" pos:end="281:47"><expr pos:start="281:29" pos:end="281:47"><name pos:start="281:29" pos:end="281:47"><name pos:start="281:29" pos:end="281:29">s</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:47">v_fragment_start</name></name></expr></argument>, <argument pos:start="281:50" pos:end="281:61"><expr pos:start="281:50" pos:end="281:61"><name pos:start="281:50" pos:end="281:57"><name pos:start="281:50" pos:end="281:50">s</name><operator pos:start="281:51" pos:end="281:52">-&gt;</operator><name pos:start="281:53" pos:end="281:57">width</name></name> <operator pos:start="281:59" pos:end="281:59">/</operator> <literal type="number" pos:start="281:61" pos:end="281:61">2</literal></expr></argument>, <argument pos:start="281:64" pos:end="281:76"><expr pos:start="281:64" pos:end="281:76"><name pos:start="281:64" pos:end="281:72"><name pos:start="281:64" pos:end="281:64">s</name><operator pos:start="281:65" pos:end="281:66">-&gt;</operator><name pos:start="281:67" pos:end="281:72">height</name></name> <operator pos:start="281:74" pos:end="281:74">/</operator> <literal type="number" pos:start="281:76" pos:end="281:76">2</literal></expr></argument>, <argument pos:start="281:79" pos:end="281:79"><expr pos:start="281:79" pos:end="281:79"><literal type="number" pos:start="281:79" pos:end="281:79">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="283:7" pos:end="294:0">else <block pos:start="283:12" pos:end="294:0">{<block_content pos:start="285:9" pos:end="287:73">

        <expr_stmt pos:start="285:9" pos:end="285:73"><expr pos:start="285:9" pos:end="285:72"><call pos:start="285:9" pos:end="285:72"><name pos:start="285:9" pos:end="285:14">memset</name><argument_list pos:start="285:15" pos:end="285:72">(<argument pos:start="285:16" pos:end="285:39"><expr pos:start="285:16" pos:end="285:39"><name pos:start="285:16" pos:end="285:39"><name pos:start="285:16" pos:end="285:16">s</name><operator pos:start="285:17" pos:end="285:18">-&gt;</operator><name pos:start="285:19" pos:end="285:31">current_frame</name><operator pos:start="285:32" pos:end="285:32">.</operator><name pos:start="285:33" pos:end="285:36">data</name><index pos:start="285:37" pos:end="285:39">[<expr pos:start="285:38" pos:end="285:38"><literal type="number" pos:start="285:38" pos:end="285:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="285:42" pos:end="285:45"><expr pos:start="285:42" pos:end="285:45"><literal type="number" pos:start="285:42" pos:end="285:45">0x80</literal></expr></argument>, <argument pos:start="285:48" pos:end="285:71"><expr pos:start="285:48" pos:end="285:71"><name pos:start="285:48" pos:end="285:55"><name pos:start="285:48" pos:end="285:48">s</name><operator pos:start="285:49" pos:end="285:50">-&gt;</operator><name pos:start="285:51" pos:end="285:55">width</name></name> <operator pos:start="285:57" pos:end="285:57">*</operator> <name pos:start="285:59" pos:end="285:67"><name pos:start="285:59" pos:end="285:59">s</name><operator pos:start="285:60" pos:end="285:61">-&gt;</operator><name pos:start="285:62" pos:end="285:67">height</name></name> <operator pos:start="285:69" pos:end="285:69">/</operator> <literal type="number" pos:start="285:71" pos:end="285:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:73"><expr pos:start="287:9" pos:end="287:72"><call pos:start="287:9" pos:end="287:72"><name pos:start="287:9" pos:end="287:14">memset</name><argument_list pos:start="287:15" pos:end="287:72">(<argument pos:start="287:16" pos:end="287:39"><expr pos:start="287:16" pos:end="287:39"><name pos:start="287:16" pos:end="287:39"><name pos:start="287:16" pos:end="287:16">s</name><operator pos:start="287:17" pos:end="287:18">-&gt;</operator><name pos:start="287:19" pos:end="287:31">current_frame</name><operator pos:start="287:32" pos:end="287:32">.</operator><name pos:start="287:33" pos:end="287:36">data</name><index pos:start="287:37" pos:end="287:39">[<expr pos:start="287:38" pos:end="287:38"><literal type="number" pos:start="287:38" pos:end="287:38">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="287:42" pos:end="287:45"><expr pos:start="287:42" pos:end="287:45"><literal type="number" pos:start="287:42" pos:end="287:45">0x80</literal></expr></argument>, <argument pos:start="287:48" pos:end="287:71"><expr pos:start="287:48" pos:end="287:71"><name pos:start="287:48" pos:end="287:55"><name pos:start="287:48" pos:end="287:48">s</name><operator pos:start="287:49" pos:end="287:50">-&gt;</operator><name pos:start="287:51" pos:end="287:55">width</name></name> <operator pos:start="287:57" pos:end="287:57">*</operator> <name pos:start="287:59" pos:end="287:67"><name pos:start="287:59" pos:end="287:59">s</name><operator pos:start="287:60" pos:end="287:61">-&gt;</operator><name pos:start="287:62" pos:end="287:67">height</name></name> <operator pos:start="287:69" pos:end="287:69">/</operator> <literal type="number" pos:start="287:71" pos:end="287:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="293:1" pos:end="293:18">#<cpp:directive pos:start="293:2" pos:end="293:3">if</cpp:directive> <expr pos:start="293:5" pos:end="293:18"><name pos:start="293:5" pos:end="293:18">KEYFRAMES_ONLY</name></expr></cpp:if>

</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="301:5" pos:end="301:31"><expr pos:start="301:5" pos:end="301:30"><operator pos:start="301:5" pos:end="301:5">*</operator><name pos:start="301:6" pos:end="301:14">data_size</name><operator pos:start="301:15" pos:end="301:15">=</operator><sizeof pos:start="301:16" pos:end="301:30">sizeof<argument_list pos:start="301:22" pos:end="301:30">(<argument pos:start="301:23" pos:end="301:29"><expr pos:start="301:23" pos:end="301:29"><name pos:start="301:23" pos:end="301:29">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:38"><expr pos:start="303:5" pos:end="303:37"><operator pos:start="303:5" pos:end="303:5">*</operator><operator pos:start="303:6" pos:end="303:6">(</operator><name pos:start="303:7" pos:end="303:13">AVFrame</name><operator pos:start="303:14" pos:end="303:14">*</operator><operator pos:start="303:15" pos:end="303:15">)</operator><name pos:start="303:16" pos:end="303:19">data</name><operator pos:start="303:20" pos:end="303:20">=</operator> <name pos:start="303:22" pos:end="303:37"><name pos:start="303:22" pos:end="303:22">s</name><operator pos:start="303:23" pos:end="303:24">-&gt;</operator><name pos:start="303:25" pos:end="303:37">current_frame</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="307:5" pos:end="309:22">/* release the last frame, if it is allocated and if it is not the

     * golden frame */</comment>

    <if_stmt pos:start="311:5" pos:end="315:53"><if pos:start="311:5" pos:end="315:53">if <condition pos:start="311:8" pos:end="313:59">(<expr pos:start="311:9" pos:end="313:58"><operator pos:start="311:9" pos:end="311:9">(</operator><name pos:start="311:10" pos:end="311:30"><name pos:start="311:10" pos:end="311:10">s</name><operator pos:start="311:11" pos:end="311:12">-&gt;</operator><name pos:start="311:13" pos:end="311:22">last_frame</name><operator pos:start="311:23" pos:end="311:23">.</operator><name pos:start="311:24" pos:end="311:27">data</name><index pos:start="311:28" pos:end="311:30">[<expr pos:start="311:29" pos:end="311:29"><literal type="number" pos:start="311:29" pos:end="311:29">0</literal></expr>]</index></name><operator pos:start="311:31" pos:end="311:31">)</operator> <operator pos:start="311:33" pos:end="311:34">&amp;&amp;</operator>

        <operator pos:start="313:9" pos:end="313:9">(</operator><name pos:start="313:10" pos:end="313:30"><name pos:start="313:10" pos:end="313:10">s</name><operator pos:start="313:11" pos:end="313:12">-&gt;</operator><name pos:start="313:13" pos:end="313:22">last_frame</name><operator pos:start="313:23" pos:end="313:23">.</operator><name pos:start="313:24" pos:end="313:27">data</name><index pos:start="313:28" pos:end="313:30">[<expr pos:start="313:29" pos:end="313:29"><literal type="number" pos:start="313:29" pos:end="313:29">0</literal></expr>]</index></name> <operator pos:start="313:32" pos:end="313:33">!=</operator> <name pos:start="313:35" pos:end="313:57"><name pos:start="313:35" pos:end="313:35">s</name><operator pos:start="313:36" pos:end="313:37">-&gt;</operator><name pos:start="313:38" pos:end="313:49">golden_frame</name><operator pos:start="313:50" pos:end="313:50">.</operator><name pos:start="313:51" pos:end="313:54">data</name><index pos:start="313:55" pos:end="313:57">[<expr pos:start="313:56" pos:end="313:56"><literal type="number" pos:start="313:56" pos:end="313:56">0</literal></expr>]</index></name><operator pos:start="313:58" pos:end="313:58">)</operator></expr>)</condition><block type="pseudo" pos:start="315:9" pos:end="315:53"><block_content pos:start="315:9" pos:end="315:53">

        <expr_stmt pos:start="315:9" pos:end="315:53"><expr pos:start="315:9" pos:end="315:52"><call pos:start="315:9" pos:end="315:52"><name pos:start="315:9" pos:end="315:29"><name pos:start="315:9" pos:end="315:13">avctx</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:29">release_buffer</name></name><argument_list pos:start="315:30" pos:end="315:52">(<argument pos:start="315:31" pos:end="315:35"><expr pos:start="315:31" pos:end="315:35"><name pos:start="315:31" pos:end="315:35">avctx</name></expr></argument>, <argument pos:start="315:38" pos:end="315:51"><expr pos:start="315:38" pos:end="315:51"><operator pos:start="315:38" pos:end="315:38">&amp;</operator><name pos:start="315:39" pos:end="315:51"><name pos:start="315:39" pos:end="315:39">s</name><operator pos:start="315:40" pos:end="315:41">-&gt;</operator><name pos:start="315:42" pos:end="315:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="319:5" pos:end="319:41">/* shuffle frames (last = current) */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:63"><expr pos:start="321:5" pos:end="321:62"><call pos:start="321:5" pos:end="321:62"><name pos:start="321:5" pos:end="321:10">memcpy</name><argument_list pos:start="321:11" pos:end="321:62">(<argument pos:start="321:12" pos:end="321:25"><expr pos:start="321:12" pos:end="321:25"><operator pos:start="321:12" pos:end="321:12">&amp;</operator><name pos:start="321:13" pos:end="321:25"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:25">last_frame</name></name></expr></argument>, <argument pos:start="321:28" pos:end="321:44"><expr pos:start="321:28" pos:end="321:44"><operator pos:start="321:28" pos:end="321:28">&amp;</operator><name pos:start="321:29" pos:end="321:44"><name pos:start="321:29" pos:end="321:29">s</name><operator pos:start="321:30" pos:end="321:31">-&gt;</operator><name pos:start="321:32" pos:end="321:44">current_frame</name></name></expr></argument>, <argument pos:start="321:47" pos:end="321:61"><expr pos:start="321:47" pos:end="321:61"><sizeof pos:start="321:47" pos:end="321:61">sizeof<argument_list pos:start="321:53" pos:end="321:61">(<argument pos:start="321:54" pos:end="321:60"><expr pos:start="321:54" pos:end="321:60"><name pos:start="321:54" pos:end="321:60">AVFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:35"><expr pos:start="323:5" pos:end="323:34"><name pos:start="323:5" pos:end="323:28"><name pos:start="323:5" pos:end="323:5">s</name><operator pos:start="323:6" pos:end="323:7">-&gt;</operator><name pos:start="323:8" pos:end="323:20">current_frame</name><operator pos:start="323:21" pos:end="323:21">.</operator><name pos:start="323:22" pos:end="323:25">data</name><index pos:start="323:26" pos:end="323:28">[<expr pos:start="323:27" pos:end="323:27"><literal type="number" pos:start="323:27" pos:end="323:27">0</literal></expr>]</index></name><operator pos:start="323:29" pos:end="323:29">=</operator> <name pos:start="323:31" pos:end="323:34">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="323:37" pos:end="323:96">/* ensure that we catch any access to this released frame */</comment>



    <return pos:start="327:5" pos:end="327:20">return <expr pos:start="327:12" pos:end="327:19"><name pos:start="327:12" pos:end="327:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
