<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9720.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">nbd_co_send_reply</name><parameter_list pos:start="1:29" pos:end="3:37">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:39">NBDRequest</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">req</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:52">struct</name> <name pos:start="1:54" pos:end="1:62">nbd_reply</name></name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">reply</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:36"><decl pos:start="3:30" pos:end="3:36"><type pos:start="3:30" pos:end="3:36"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:36">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:14">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDClient</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">client</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">req</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">client</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">csock</name> <init pos:start="9:15" pos:end="9:28">= <expr pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:22">client</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:28">sock</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name></decl>, <decl pos:start="11:13" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><call pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:22">qemu_co_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:42">(<argument pos:start="15:24" pos:end="15:41"><expr pos:start="15:24" pos:end="15:41"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:30">client</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:41">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="19:52"><expr pos:start="17:5" pos:end="19:51"><call pos:start="17:5" pos:end="19:51"><name pos:start="17:5" pos:end="17:24">qemu_set_fd_handler2</name><argument_list pos:start="17:25" pos:end="19:51">(<argument pos:start="17:26" pos:end="17:30"><expr pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:30">csock</name></expr></argument>, <argument pos:start="17:33" pos:end="17:44"><expr pos:start="17:33" pos:end="17:44"><name pos:start="17:33" pos:end="17:44">nbd_can_read</name></expr></argument>, <argument pos:start="17:47" pos:end="17:54"><expr pos:start="17:47" pos:end="17:54"><name pos:start="17:47" pos:end="17:54">nbd_read</name></expr></argument>,

                         <argument pos:start="19:26" pos:end="19:42"><expr pos:start="19:26" pos:end="19:42"><name pos:start="19:26" pos:end="19:42">nbd_restart_write</name></expr></argument>, <argument pos:start="19:45" pos:end="19:50"><expr pos:start="19:45" pos:end="19:50"><name pos:start="19:45" pos:end="19:50">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:10">client</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:26">send_coroutine</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <call pos:start="21:30" pos:end="21:50"><name pos:start="21:30" pos:end="21:48">qemu_coroutine_self</name><argument_list pos:start="21:49" pos:end="21:50">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="63:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:13">(<expr pos:start="25:9" pos:end="25:12"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:12">len</name></expr>)</condition> <block pos:start="25:15" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <expr_stmt pos:start="27:9" pos:end="27:42"><expr pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:10">rc</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:41"><name pos:start="27:14" pos:end="27:27">nbd_send_reply</name><argument_list pos:start="27:28" pos:end="27:41">(<argument pos:start="27:29" pos:end="27:33"><expr pos:start="27:29" pos:end="27:33"><name pos:start="27:29" pos:end="27:33">csock</name></expr></argument>, <argument pos:start="27:36" pos:end="27:40"><expr pos:start="27:36" pos:end="27:40"><name pos:start="27:36" pos:end="27:40">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:21">(<expr pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:14">rc</name> <operator pos:start="29:16" pos:end="29:17">==</operator> <operator pos:start="29:19" pos:end="29:19">-</operator><literal type="number" pos:start="29:20" pos:end="29:20">1</literal></expr>)</condition> <block pos:start="29:23" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:24">

            <expr_stmt pos:start="31:13" pos:end="31:24"><expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:14">rc</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <operator pos:start="31:18" pos:end="31:18">-</operator><name pos:start="31:19" pos:end="31:23">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="63:5">else <block pos:start="35:12" pos:end="63:5">{<block_content pos:start="37:9" pos:end="61:34">

        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:23">socket_set_cork</name><argument_list pos:start="37:24" pos:end="37:33">(<argument pos:start="37:25" pos:end="37:29"><expr pos:start="37:25" pos:end="37:29"><name pos:start="37:25" pos:end="37:29">csock</name></expr></argument>, <argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:42"><expr pos:start="39:9" pos:end="39:41"><name pos:start="39:9" pos:end="39:10">rc</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:41"><name pos:start="39:14" pos:end="39:27">nbd_send_reply</name><argument_list pos:start="39:28" pos:end="39:41">(<argument pos:start="39:29" pos:end="39:33"><expr pos:start="39:29" pos:end="39:33"><name pos:start="39:29" pos:end="39:33">csock</name></expr></argument>, <argument pos:start="39:36" pos:end="39:40"><expr pos:start="39:36" pos:end="39:40"><name pos:start="39:36" pos:end="39:40">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="53:9">if <condition pos:start="41:12" pos:end="41:21">(<expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:14">rc</name> <operator pos:start="41:16" pos:end="41:17">!=</operator> <operator pos:start="41:19" pos:end="41:19">-</operator><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>)</condition> <block pos:start="41:23" pos:end="53:9">{<block_content pos:start="43:13" pos:end="51:13">

            <expr_stmt pos:start="43:13" pos:end="43:54"><expr pos:start="43:13" pos:end="43:53"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:53"><name pos:start="43:19" pos:end="43:30">qemu_co_send</name><argument_list pos:start="43:31" pos:end="43:53">(<argument pos:start="43:32" pos:end="43:36"><expr pos:start="43:32" pos:end="43:36"><name pos:start="43:32" pos:end="43:36">csock</name></expr></argument>, <argument pos:start="43:39" pos:end="43:47"><expr pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:41">req</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:47">data</name></name></expr></argument>, <argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><name pos:start="43:50" pos:end="43:52">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="51:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:27">(<expr pos:start="45:17" pos:end="45:26"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:22">!=</operator> <name pos:start="45:24" pos:end="45:26">len</name></expr>)</condition> <block pos:start="45:29" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:24">

                <expr_stmt pos:start="47:17" pos:end="47:28"><expr pos:start="47:17" pos:end="47:27"><name pos:start="47:17" pos:end="47:21">errno</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:27">EIO</name></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:24"><expr pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:18">rc</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <operator pos:start="49:22" pos:end="49:22">-</operator><literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:21">(<expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:14">rc</name> <operator pos:start="55:16" pos:end="55:17">==</operator> <operator pos:start="55:19" pos:end="55:19">-</operator><literal type="number" pos:start="55:20" pos:end="55:20">1</literal></expr>)</condition> <block pos:start="55:23" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:24">

            <expr_stmt pos:start="57:13" pos:end="57:24"><expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:14">rc</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">-</operator><name pos:start="57:19" pos:end="57:23">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><call pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:23">socket_set_cork</name><argument_list pos:start="61:24" pos:end="61:33">(<argument pos:start="61:25" pos:end="61:29"><expr pos:start="61:25" pos:end="61:29"><name pos:start="61:25" pos:end="61:29">csock</name></expr></argument>, <argument pos:start="61:32" pos:end="61:32"><expr pos:start="61:32" pos:end="61:32"><literal type="number" pos:start="61:32" pos:end="61:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:10">client</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:26">send_coroutine</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <name pos:start="67:30" pos:end="67:33">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:70"><expr pos:start="69:5" pos:end="69:69"><call pos:start="69:5" pos:end="69:69"><name pos:start="69:5" pos:end="69:24">qemu_set_fd_handler2</name><argument_list pos:start="69:25" pos:end="69:69">(<argument pos:start="69:26" pos:end="69:30"><expr pos:start="69:26" pos:end="69:30"><name pos:start="69:26" pos:end="69:30">csock</name></expr></argument>, <argument pos:start="69:33" pos:end="69:44"><expr pos:start="69:33" pos:end="69:44"><name pos:start="69:33" pos:end="69:44">nbd_can_read</name></expr></argument>, <argument pos:start="69:47" pos:end="69:54"><expr pos:start="69:47" pos:end="69:54"><name pos:start="69:47" pos:end="69:54">nbd_read</name></expr></argument>, <argument pos:start="69:57" pos:end="69:60"><expr pos:start="69:57" pos:end="69:60"><name pos:start="69:57" pos:end="69:60">NULL</name></expr></argument>, <argument pos:start="69:63" pos:end="69:68"><expr pos:start="69:63" pos:end="69:68"><name pos:start="69:63" pos:end="69:68">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:24">qemu_co_mutex_unlock</name><argument_list pos:start="71:25" pos:end="71:44">(<argument pos:start="71:26" pos:end="71:43"><expr pos:start="71:26" pos:end="71:43"><operator pos:start="71:26" pos:end="71:26">&amp;</operator><name pos:start="71:27" pos:end="71:43"><name pos:start="71:27" pos:end="71:32">client</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:43">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="73:5" pos:end="73:14">return <expr pos:start="73:12" pos:end="73:13"><name pos:start="73:12" pos:end="73:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
