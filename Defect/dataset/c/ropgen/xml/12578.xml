<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12578.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">pci_init_multifunction</name><parameter_list pos:start="1:34" pos:end="1:62">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:45"><name pos:start="1:35" pos:end="1:40">PCIBus</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">bus</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:56">PCIDevice</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:16">slot</name> <init pos:start="5:18" pos:end="5:39">= <expr pos:start="5:20" pos:end="5:39"><call pos:start="5:20" pos:end="5:39"><name pos:start="5:20" pos:end="5:27">PCI_SLOT</name><argument_list pos:start="5:28" pos:end="5:39">(<argument pos:start="5:29" pos:end="5:38"><expr pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:31">dev</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:38">devfn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:16">func</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:54">(<expr pos:start="11:9" pos:end="11:53"><name pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:11">dev</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:24">cap_present</name></name> <operator pos:start="11:26" pos:end="11:26">&amp;</operator> <name pos:start="11:28" pos:end="11:53">QEMU_PCI_CAP_MULTIFUNCTION</name></expr>)</condition> <block pos:start="11:56" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:71">

        <expr_stmt pos:start="13:9" pos:end="13:71"><expr pos:start="13:9" pos:end="13:70"><name pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:11">dev</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:19">config</name><index pos:start="13:20" pos:end="13:36">[<expr pos:start="13:21" pos:end="13:35"><name pos:start="13:21" pos:end="13:35">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="13:38" pos:end="13:39">|=</operator> <name pos:start="13:41" pos:end="13:70">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="43:7">/*

     * multifunction bit is interpreted in two ways as follows.

     *   - all functions must set the bit to 1.

     *     Example: Intel X53

     *   - function 0 must set the bit, but the rest function (&gt; 0)

     *     is allowed to leave the bit to 0.

     *     Example: PIIX3(also in qemu), PIIX4(also in qemu), ICH10,

     *

     * So OS (at least Linux) checks the bit of only function 0,

     * and doesn't see the bit of function &gt; 0.

     *

     * The below check allows both interpretation.

     */</comment>

    <if_stmt pos:start="45:5" pos:end="63:5"><if pos:start="45:5" pos:end="63:5">if <condition pos:start="45:8" pos:end="45:29">(<expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:16">PCI_FUNC</name><argument_list pos:start="45:17" pos:end="45:28">(<argument pos:start="45:18" pos:end="45:27"><expr pos:start="45:18" pos:end="45:27"><name pos:start="45:18" pos:end="45:27"><name pos:start="45:18" pos:end="45:20">dev</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:27">devfn</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:31" pos:end="63:5">{<block_content pos:start="47:9" pos:end="61:17">

        <decl_stmt pos:start="47:9" pos:end="47:57"><decl pos:start="47:9" pos:end="47:56"><type pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:17">PCIDevice</name> <modifier pos:start="47:19" pos:end="47:19">*</modifier></type><name pos:start="47:20" pos:end="47:21">f0</name> <init pos:start="47:23" pos:end="47:56">= <expr pos:start="47:25" pos:end="47:56"><name pos:start="47:25" pos:end="47:56"><name pos:start="47:25" pos:end="47:27">bus</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:36">devices</name><index pos:start="47:37" pos:end="47:56">[<expr pos:start="47:38" pos:end="47:55"><call pos:start="47:38" pos:end="47:55"><name pos:start="47:38" pos:end="47:46">PCI_DEVFN</name><argument_list pos:start="47:47" pos:end="47:55">(<argument pos:start="47:48" pos:end="47:51"><expr pos:start="47:48" pos:end="47:51"><name pos:start="47:48" pos:end="47:51">slot</name></expr></argument>, <argument pos:start="47:54" pos:end="47:54"><expr pos:start="47:54" pos:end="47:54"><literal type="number" pos:start="47:54" pos:end="47:54">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="59:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:66">(<expr pos:start="49:13" pos:end="49:65"><name pos:start="49:13" pos:end="49:14">f0</name> <operator pos:start="49:16" pos:end="49:17">&amp;&amp;</operator> <operator pos:start="49:19" pos:end="49:19">!</operator><operator pos:start="49:20" pos:end="49:20">(</operator><name pos:start="49:21" pos:end="49:35"><name pos:start="49:21" pos:end="49:22">f0</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:35">cap_present</name></name> <operator pos:start="49:37" pos:end="49:37">&amp;</operator> <name pos:start="49:39" pos:end="49:64">QEMU_PCI_CAP_MULTIFUNCTION</name><operator pos:start="49:65" pos:end="49:65">)</operator></expr>)</condition> <block pos:start="49:68" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:22">

            <comment type="block" pos:start="51:13" pos:end="51:57">/* function 0 should set multifunction bit */</comment>

            <expr_stmt pos:start="53:13" pos:end="55:74"><expr pos:start="53:13" pos:end="55:73"><call pos:start="53:13" pos:end="55:73"><name pos:start="53:13" pos:end="53:24">error_report</name><argument_list pos:start="53:25" pos:end="55:73">(<argument pos:start="53:26" pos:end="55:44"><expr pos:start="53:26" pos:end="55:44"><literal type="string" pos:start="53:26" pos:end="53:74">"PCI: single function device can't be populated "</literal>

                         <literal type="string" pos:start="55:26" pos:end="55:44">"in function %x.%x"</literal></expr></argument>, <argument pos:start="55:47" pos:end="55:50"><expr pos:start="55:47" pos:end="55:50"><name pos:start="55:47" pos:end="55:50">slot</name></expr></argument>, <argument pos:start="55:53" pos:end="55:72"><expr pos:start="55:53" pos:end="55:72"><call pos:start="55:53" pos:end="55:72"><name pos:start="55:53" pos:end="55:60">PCI_FUNC</name><argument_list pos:start="55:61" pos:end="55:72">(<argument pos:start="55:62" pos:end="55:71"><expr pos:start="55:62" pos:end="55:71"><name pos:start="55:62" pos:end="55:71"><name pos:start="55:62" pos:end="55:64">dev</name><operator pos:start="55:65" pos:end="55:66">-&gt;</operator><name pos:start="55:67" pos:end="55:71">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:22">return <expr pos:start="57:20" pos:end="57:21"><operator pos:start="57:20" pos:end="57:20">-</operator><literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:54">(<expr pos:start="67:9" pos:end="67:53"><name pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:11">dev</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:24">cap_present</name></name> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <name pos:start="67:28" pos:end="67:53">QEMU_PCI_CAP_MULTIFUNCTION</name></expr>)</condition> <block pos:start="67:56" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:17">

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:76">/* function 0 indicates single function, so function &gt; 0 must be NULL */</comment>

    <for pos:start="75:5" pos:end="89:5">for <control pos:start="75:9" pos:end="75:47">(<init pos:start="75:10" pos:end="75:18"><expr pos:start="75:10" pos:end="75:17"><name pos:start="75:10" pos:end="75:13">func</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</init> <condition pos:start="75:20" pos:end="75:39"><expr pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:23">func</name> <operator pos:start="75:25" pos:end="75:25">&lt;</operator> <name pos:start="75:27" pos:end="75:38">PCI_FUNC_MAX</name></expr>;</condition> <incr pos:start="75:41" pos:end="75:46"><expr pos:start="75:41" pos:end="75:46"><operator pos:start="75:41" pos:end="75:42">++</operator><name pos:start="75:43" pos:end="75:46">func</name></expr></incr>)</control> <block pos:start="75:49" pos:end="89:5">{<block_content pos:start="77:9" pos:end="87:9">

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:48">(<expr pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:15">bus</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:24">devices</name><index pos:start="77:25" pos:end="77:47">[<expr pos:start="77:26" pos:end="77:46"><call pos:start="77:26" pos:end="77:46"><name pos:start="77:26" pos:end="77:34">PCI_DEVFN</name><argument_list pos:start="77:35" pos:end="77:46">(<argument pos:start="77:36" pos:end="77:39"><expr pos:start="77:36" pos:end="77:39"><name pos:start="77:36" pos:end="77:39">slot</name></expr></argument>, <argument pos:start="77:42" pos:end="77:45"><expr pos:start="77:42" pos:end="77:45"><name pos:start="77:42" pos:end="77:45">func</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition> <block pos:start="77:50" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:22">

            <expr_stmt pos:start="79:13" pos:end="83:43"><expr pos:start="79:13" pos:end="83:42"><call pos:start="79:13" pos:end="83:42"><name pos:start="79:13" pos:end="79:24">error_report</name><argument_list pos:start="79:25" pos:end="83:42">(<argument pos:start="79:26" pos:end="81:58"><expr pos:start="79:26" pos:end="81:58"><literal type="string" pos:start="79:26" pos:end="79:64">"PCI: %x.0 indicates single function, "</literal>

                         <literal type="string" pos:start="81:26" pos:end="81:58">"but %x.%x is already populated."</literal></expr></argument>,

                         <argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">slot</name></expr></argument>, <argument pos:start="83:32" pos:end="83:35"><expr pos:start="83:32" pos:end="83:35"><name pos:start="83:32" pos:end="83:35">slot</name></expr></argument>, <argument pos:start="83:38" pos:end="83:41"><expr pos:start="83:38" pos:end="83:41"><name pos:start="83:38" pos:end="83:41">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
