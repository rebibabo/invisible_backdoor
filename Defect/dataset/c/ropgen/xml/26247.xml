<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26247.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">net_slirp_init</name><parameter_list pos:start="1:26" pos:end="13:73">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:40">NetClientState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">peer</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">model</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">name</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:58">restricted</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:46"><decl pos:start="5:27" pos:end="5:46"><type pos:start="5:27" pos:end="5:46"><specifier pos:start="5:27" pos:end="5:31">const</specifier> <name pos:start="5:33" pos:end="5:36">char</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:46">vnetwork</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:65"><decl pos:start="5:49" pos:end="5:65"><type pos:start="5:49" pos:end="5:65"><specifier pos:start="5:49" pos:end="5:53">const</specifier> <name pos:start="5:55" pos:end="5:58">char</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:65">vhost</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:47"><decl pos:start="7:27" pos:end="7:47"><type pos:start="7:27" pos:end="7:47"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:47">vhostname</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:72"><decl pos:start="7:50" pos:end="7:72"><type pos:start="7:50" pos:end="7:72"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:72">tftp_export</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:46"><decl pos:start="9:27" pos:end="9:46"><type pos:start="9:27" pos:end="9:46"><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:46">bootfile</name></decl></parameter>, <parameter pos:start="9:49" pos:end="9:71"><decl pos:start="9:49" pos:end="9:71"><type pos:start="9:49" pos:end="9:71"><specifier pos:start="9:49" pos:end="9:53">const</specifier> <name pos:start="9:55" pos:end="9:58">char</name> <modifier pos:start="9:60" pos:end="9:60">*</modifier></type><name pos:start="9:61" pos:end="9:71">vdhcp_start</name></decl></parameter>,

                          <parameter pos:start="11:27" pos:end="11:49"><decl pos:start="11:27" pos:end="11:49"><type pos:start="11:27" pos:end="11:49"><specifier pos:start="11:27" pos:end="11:31">const</specifier> <name pos:start="11:33" pos:end="11:36">char</name> <modifier pos:start="11:38" pos:end="11:38">*</modifier></type><name pos:start="11:39" pos:end="11:49">vnameserver</name></decl></parameter>, <parameter pos:start="11:52" pos:end="11:73"><decl pos:start="11:52" pos:end="11:73"><type pos:start="11:52" pos:end="11:73"><specifier pos:start="11:52" pos:end="11:56">const</specifier> <name pos:start="11:58" pos:end="11:61">char</name> <modifier pos:start="11:63" pos:end="11:63">*</modifier></type><name pos:start="11:64" pos:end="11:73">smb_export</name></decl></parameter>,

                          <parameter pos:start="13:27" pos:end="13:48"><decl pos:start="13:27" pos:end="13:48"><type pos:start="13:27" pos:end="13:48"><specifier pos:start="13:27" pos:end="13:31">const</specifier> <name pos:start="13:33" pos:end="13:36">char</name> <modifier pos:start="13:38" pos:end="13:38">*</modifier></type><name pos:start="13:39" pos:end="13:48">vsmbserver</name></decl></parameter>, <parameter pos:start="13:51" pos:end="13:72"><decl pos:start="13:51" pos:end="13:72"><type pos:start="13:51" pos:end="13:72"><specifier pos:start="13:51" pos:end="13:55">const</specifier> <name pos:start="13:57" pos:end="13:60">char</name> <modifier pos:start="13:62" pos:end="13:62">*</modifier><modifier pos:start="13:63" pos:end="13:63">*</modifier></type><name pos:start="13:64" pos:end="13:72">dnssearch</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="283:1">{<block_content pos:start="19:5" pos:end="281:14">

    <comment type="block" pos:start="17:5" pos:end="17:54">/* default settings according to historic slirp */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:18">in_addr</name></name></type> <name pos:start="19:20" pos:end="19:22">net</name>  <init pos:start="19:25" pos:end="19:57">= <expr pos:start="19:27" pos:end="19:57"><block pos:start="19:27" pos:end="19:57">{ <expr pos:start="19:29" pos:end="19:55"><operator pos:start="19:29" pos:end="19:29">.</operator><name pos:start="19:30" pos:end="19:35">s_addr</name> <operator pos:start="19:37" pos:end="19:37">=</operator> <macro pos:start="19:39" pos:end="19:55"><name pos:start="19:39" pos:end="19:43">htonl</name><argument_list pos:start="19:44" pos:end="19:55">(<argument pos:start="19:45" pos:end="19:54"><literal type="number" pos:start="19:45" pos:end="19:54">0x0a000200</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="19:60" pos:end="19:73">/* 10.0.2.0 */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:18">in_addr</name></name></type> <name pos:start="21:20" pos:end="21:23">mask</name> <init pos:start="21:25" pos:end="21:57">= <expr pos:start="21:27" pos:end="21:57"><block pos:start="21:27" pos:end="21:57">{ <expr pos:start="21:29" pos:end="21:55"><operator pos:start="21:29" pos:end="21:29">.</operator><name pos:start="21:30" pos:end="21:35">s_addr</name> <operator pos:start="21:37" pos:end="21:37">=</operator> <macro pos:start="21:39" pos:end="21:55"><name pos:start="21:39" pos:end="21:43">htonl</name><argument_list pos:start="21:44" pos:end="21:55">(<argument pos:start="21:45" pos:end="21:54"><literal type="number" pos:start="21:45" pos:end="21:54">0xffffff00</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="21:60" pos:end="21:78">/* 255.255.255.0 */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:58"><decl pos:start="23:5" pos:end="23:57"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:18">in_addr</name></name></type> <name pos:start="23:20" pos:end="23:23">host</name> <init pos:start="23:25" pos:end="23:57">= <expr pos:start="23:27" pos:end="23:57"><block pos:start="23:27" pos:end="23:57">{ <expr pos:start="23:29" pos:end="23:55"><operator pos:start="23:29" pos:end="23:29">.</operator><name pos:start="23:30" pos:end="23:35">s_addr</name> <operator pos:start="23:37" pos:end="23:37">=</operator> <macro pos:start="23:39" pos:end="23:55"><name pos:start="23:39" pos:end="23:43">htonl</name><argument_list pos:start="23:44" pos:end="23:55">(<argument pos:start="23:45" pos:end="23:54"><literal type="number" pos:start="23:45" pos:end="23:54">0x0a000202</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="23:60" pos:end="23:73">/* 10.0.2.2 */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:58"><decl pos:start="25:5" pos:end="25:57"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:18">in_addr</name></name></type> <name pos:start="25:20" pos:end="25:23">dhcp</name> <init pos:start="25:25" pos:end="25:57">= <expr pos:start="25:27" pos:end="25:57"><block pos:start="25:27" pos:end="25:57">{ <expr pos:start="25:29" pos:end="25:55"><operator pos:start="25:29" pos:end="25:29">.</operator><name pos:start="25:30" pos:end="25:35">s_addr</name> <operator pos:start="25:37" pos:end="25:37">=</operator> <macro pos:start="25:39" pos:end="25:55"><name pos:start="25:39" pos:end="25:43">htonl</name><argument_list pos:start="25:44" pos:end="25:55">(<argument pos:start="25:45" pos:end="25:54"><literal type="number" pos:start="25:45" pos:end="25:54">0x0a00020f</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="25:60" pos:end="25:74">/* 10.0.2.15 */</comment>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:57"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:18">in_addr</name></name></type> <name pos:start="27:20" pos:end="27:22">dns</name>  <init pos:start="27:25" pos:end="27:57">= <expr pos:start="27:27" pos:end="27:57"><block pos:start="27:27" pos:end="27:57">{ <expr pos:start="27:29" pos:end="27:55"><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:35">s_addr</name> <operator pos:start="27:37" pos:end="27:37">=</operator> <macro pos:start="27:39" pos:end="27:55"><name pos:start="27:39" pos:end="27:43">htonl</name><argument_list pos:start="27:44" pos:end="27:55">(<argument pos:start="27:45" pos:end="27:54"><literal type="number" pos:start="27:45" pos:end="27:54">0x0a000203</literal></argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="27:60" pos:end="27:73">/* 10.0.2.3 */</comment>

<cpp:ifndef pos:start="29:1" pos:end="29:14">#<cpp:directive pos:start="29:2" pos:end="29:7">ifndef</cpp:directive> <name pos:start="29:9" pos:end="29:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:43"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:10">struct</name> <name pos:start="31:12" pos:end="31:18">in_addr</name></name></type> <name pos:start="31:20" pos:end="31:25">smbsrv</name> <init pos:start="31:27" pos:end="31:43">= <expr pos:start="31:29" pos:end="31:43"><block pos:start="31:29" pos:end="31:43">{ <expr pos:start="31:31" pos:end="31:41"><operator pos:start="31:31" pos:end="31:31">.</operator><name pos:start="31:32" pos:end="31:37">s_addr</name> <operator pos:start="31:39" pos:end="31:39">=</operator> <literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="35:5" pos:end="35:23"><decl pos:start="35:5" pos:end="35:22"><type pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:18">NetClientState</name> <modifier pos:start="35:20" pos:end="35:20">*</modifier></type><name pos:start="35:21" pos:end="35:22">nc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:17"><type pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:14">SlirpState</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:17"><decl pos:start="39:5" pos:end="39:16"><type pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:8">char</name></type> <name pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:12">buf</name><index pos:start="39:13" pos:end="39:16">[<expr pos:start="39:14" pos:end="39:15"><literal type="number" pos:start="39:14" pos:end="39:15">20</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:18"><decl pos:start="41:5" pos:end="41:17"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:12">uint32_t</name></type> <name pos:start="41:14" pos:end="41:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:14"><decl pos:start="43:5" pos:end="43:13"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:14"><decl pos:start="45:5" pos:end="45:13"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">char</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:13">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:36"><decl pos:start="47:5" pos:end="47:35"><type pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:27"><name pos:start="47:5" pos:end="47:10">struct</name> <name pos:start="47:12" pos:end="47:27">slirp_config_str</name></name> <modifier pos:start="47:29" pos:end="47:29">*</modifier></type><name pos:start="47:30" pos:end="47:35">config</name></decl>;</decl_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:20">tftp_export</name></expr>)</condition> <block pos:start="51:23" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:41">

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:19">tftp_export</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:40">legacy_tftp_prefix</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:18">(<expr pos:start="57:9" pos:end="57:17"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:17">bootfile</name></expr>)</condition> <block pos:start="57:20" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:41">

        <expr_stmt pos:start="59:9" pos:end="59:41"><expr pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:16">bootfile</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:40">legacy_bootp_filename</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="145:5"><if pos:start="65:5" pos:end="145:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">vnetwork</name></expr>)</condition> <block pos:start="65:19" pos:end="145:5">{<block_content pos:start="67:9" pos:end="143:66">

        <if_stmt pos:start="67:9" pos:end="135:9"><if pos:start="67:9" pos:end="107:9">if <condition pos:start="67:12" pos:end="67:62">(<expr pos:start="67:13" pos:end="67:61"><call pos:start="67:13" pos:end="67:57"><name pos:start="67:13" pos:end="67:23">get_str_sep</name><argument_list pos:start="67:24" pos:end="67:57">(<argument pos:start="67:25" pos:end="67:27"><expr pos:start="67:25" pos:end="67:27"><name pos:start="67:25" pos:end="67:27">buf</name></expr></argument>, <argument pos:start="67:30" pos:end="67:40"><expr pos:start="67:30" pos:end="67:40"><sizeof pos:start="67:30" pos:end="67:40">sizeof<argument_list pos:start="67:36" pos:end="67:40">(<argument pos:start="67:37" pos:end="67:39"><expr pos:start="67:37" pos:end="67:39"><name pos:start="67:37" pos:end="67:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:43" pos:end="67:51"><expr pos:start="67:43" pos:end="67:51"><operator pos:start="67:43" pos:end="67:43">&amp;</operator><name pos:start="67:44" pos:end="67:51">vnetwork</name></expr></argument>, <argument pos:start="67:54" pos:end="67:56"><expr pos:start="67:54" pos:end="67:56"><literal type="char" pos:start="67:54" pos:end="67:56">'/'</literal></expr></argument>)</argument_list></call> <operator pos:start="67:59" pos:end="67:59">&lt;</operator> <literal type="number" pos:start="67:61" pos:end="67:61">0</literal></expr>)</condition> <block pos:start="67:64" pos:end="107:9">{<block_content pos:start="69:13" pos:end="105:13">

            <if_stmt pos:start="69:13" pos:end="73:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:43">(<expr pos:start="69:17" pos:end="69:42"><operator pos:start="69:17" pos:end="69:17">!</operator><call pos:start="69:18" pos:end="69:42"><name pos:start="69:18" pos:end="69:26">inet_aton</name><argument_list pos:start="69:27" pos:end="69:42">(<argument pos:start="69:28" pos:end="69:35"><expr pos:start="69:28" pos:end="69:35"><name pos:start="69:28" pos:end="69:35">vnetwork</name></expr></argument>, <argument pos:start="69:38" pos:end="69:41"><expr pos:start="69:38" pos:end="69:41"><operator pos:start="69:38" pos:end="69:38">&amp;</operator><name pos:start="69:39" pos:end="69:41">net</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:45" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:26">

                <return pos:start="71:17" pos:end="71:26">return <expr pos:start="71:24" pos:end="71:25"><operator pos:start="71:24" pos:end="71:24">-</operator><literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:16">addr</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:36"><name pos:start="75:20" pos:end="75:24">ntohl</name><argument_list pos:start="75:25" pos:end="75:36">(<argument pos:start="75:26" pos:end="75:35"><expr pos:start="75:26" pos:end="75:35"><name pos:start="75:26" pos:end="75:35"><name pos:start="75:26" pos:end="75:28">net</name><operator pos:start="75:29" pos:end="75:29">.</operator><name pos:start="75:30" pos:end="75:35">s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="105:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:37">(<expr pos:start="77:17" pos:end="77:36"><operator pos:start="77:17" pos:end="77:17">!</operator><operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:22">addr</name> <operator pos:start="77:24" pos:end="77:24">&amp;</operator> <literal type="number" pos:start="77:26" pos:end="77:35">0x80000000</literal><operator pos:start="77:36" pos:end="77:36">)</operator></expr>)</condition> <block pos:start="77:39" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:48">

                <expr_stmt pos:start="79:17" pos:end="79:48"><expr pos:start="79:17" pos:end="79:47"><name pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:20">mask</name><operator pos:start="79:21" pos:end="79:21">.</operator><name pos:start="79:22" pos:end="79:27">s_addr</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <call pos:start="79:31" pos:end="79:47"><name pos:start="79:31" pos:end="79:35">htonl</name><argument_list pos:start="79:36" pos:end="79:47">(<argument pos:start="79:37" pos:end="79:46"><expr pos:start="79:37" pos:end="79:46"><literal type="number" pos:start="79:37" pos:end="79:46">0xff000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:50" pos:end="79:62">/* class A */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="81:15" pos:end="85:13">else if <condition pos:start="81:23" pos:end="81:57">(<expr pos:start="81:24" pos:end="81:56"><operator pos:start="81:24" pos:end="81:24">(</operator><name pos:start="81:25" pos:end="81:28">addr</name> <operator pos:start="81:30" pos:end="81:30">&amp;</operator> <literal type="number" pos:start="81:32" pos:end="81:41">0xfff00000</literal><operator pos:start="81:42" pos:end="81:42">)</operator> <operator pos:start="81:44" pos:end="81:45">==</operator> <literal type="number" pos:start="81:47" pos:end="81:56">0xac100000</literal></expr>)</condition> <block pos:start="81:59" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:48">

                <expr_stmt pos:start="83:17" pos:end="83:48"><expr pos:start="83:17" pos:end="83:47"><name pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:20">mask</name><operator pos:start="83:21" pos:end="83:21">.</operator><name pos:start="83:22" pos:end="83:27">s_addr</name></name> <operator pos:start="83:29" pos:end="83:29">=</operator> <call pos:start="83:31" pos:end="83:47"><name pos:start="83:31" pos:end="83:35">htonl</name><argument_list pos:start="83:36" pos:end="83:47">(<argument pos:start="83:37" pos:end="83:46"><expr pos:start="83:37" pos:end="83:46"><literal type="number" pos:start="83:37" pos:end="83:46">0xfff00000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="83:50" pos:end="83:74">/* priv. 172.16.0.0/12 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="85:15" pos:end="89:13">else if <condition pos:start="85:23" pos:end="85:57">(<expr pos:start="85:24" pos:end="85:56"><operator pos:start="85:24" pos:end="85:24">(</operator><name pos:start="85:25" pos:end="85:28">addr</name> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <literal type="number" pos:start="85:32" pos:end="85:41">0xc0000000</literal><operator pos:start="85:42" pos:end="85:42">)</operator> <operator pos:start="85:44" pos:end="85:45">==</operator> <literal type="number" pos:start="85:47" pos:end="85:56">0x80000000</literal></expr>)</condition> <block pos:start="85:59" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:48">

                <expr_stmt pos:start="87:17" pos:end="87:48"><expr pos:start="87:17" pos:end="87:47"><name pos:start="87:17" pos:end="87:27"><name pos:start="87:17" pos:end="87:20">mask</name><operator pos:start="87:21" pos:end="87:21">.</operator><name pos:start="87:22" pos:end="87:27">s_addr</name></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <call pos:start="87:31" pos:end="87:47"><name pos:start="87:31" pos:end="87:35">htonl</name><argument_list pos:start="87:36" pos:end="87:47">(<argument pos:start="87:37" pos:end="87:46"><expr pos:start="87:37" pos:end="87:46"><literal type="number" pos:start="87:37" pos:end="87:46">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:50" pos:end="87:62">/* class B */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="89:15" pos:end="93:13">else if <condition pos:start="89:23" pos:end="89:57">(<expr pos:start="89:24" pos:end="89:56"><operator pos:start="89:24" pos:end="89:24">(</operator><name pos:start="89:25" pos:end="89:28">addr</name> <operator pos:start="89:30" pos:end="89:30">&amp;</operator> <literal type="number" pos:start="89:32" pos:end="89:41">0xffff0000</literal><operator pos:start="89:42" pos:end="89:42">)</operator> <operator pos:start="89:44" pos:end="89:45">==</operator> <literal type="number" pos:start="89:47" pos:end="89:56">0xc0a80000</literal></expr>)</condition> <block pos:start="89:59" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:48">

                <expr_stmt pos:start="91:17" pos:end="91:48"><expr pos:start="91:17" pos:end="91:47"><name pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:20">mask</name><operator pos:start="91:21" pos:end="91:21">.</operator><name pos:start="91:22" pos:end="91:27">s_addr</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <call pos:start="91:31" pos:end="91:47"><name pos:start="91:31" pos:end="91:35">htonl</name><argument_list pos:start="91:36" pos:end="91:47">(<argument pos:start="91:37" pos:end="91:46"><expr pos:start="91:37" pos:end="91:46"><literal type="number" pos:start="91:37" pos:end="91:46">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:50" pos:end="91:75">/* priv. 192.168.0.0/16 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="93:15" pos:end="97:13">else if <condition pos:start="93:23" pos:end="93:57">(<expr pos:start="93:24" pos:end="93:56"><operator pos:start="93:24" pos:end="93:24">(</operator><name pos:start="93:25" pos:end="93:28">addr</name> <operator pos:start="93:30" pos:end="93:30">&amp;</operator> <literal type="number" pos:start="93:32" pos:end="93:41">0xffff0000</literal><operator pos:start="93:42" pos:end="93:42">)</operator> <operator pos:start="93:44" pos:end="93:45">==</operator> <literal type="number" pos:start="93:47" pos:end="93:56">0xc6120000</literal></expr>)</condition> <block pos:start="93:59" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:48">

                <expr_stmt pos:start="95:17" pos:end="95:48"><expr pos:start="95:17" pos:end="95:47"><name pos:start="95:17" pos:end="95:27"><name pos:start="95:17" pos:end="95:20">mask</name><operator pos:start="95:21" pos:end="95:21">.</operator><name pos:start="95:22" pos:end="95:27">s_addr</name></name> <operator pos:start="95:29" pos:end="95:29">=</operator> <call pos:start="95:31" pos:end="95:47"><name pos:start="95:31" pos:end="95:35">htonl</name><argument_list pos:start="95:36" pos:end="95:47">(<argument pos:start="95:37" pos:end="95:46"><expr pos:start="95:37" pos:end="95:46"><literal type="number" pos:start="95:37" pos:end="95:46">0xfffe0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:50" pos:end="95:74">/* tests 198.18.0.0/15 */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="97:15" pos:end="101:13">else if <condition pos:start="97:23" pos:end="97:57">(<expr pos:start="97:24" pos:end="97:56"><operator pos:start="97:24" pos:end="97:24">(</operator><name pos:start="97:25" pos:end="97:28">addr</name> <operator pos:start="97:30" pos:end="97:30">&amp;</operator> <literal type="number" pos:start="97:32" pos:end="97:41">0xe0000000</literal><operator pos:start="97:42" pos:end="97:42">)</operator> <operator pos:start="97:44" pos:end="97:45">==</operator> <literal type="number" pos:start="97:47" pos:end="97:56">0xe0000000</literal></expr>)</condition> <block pos:start="97:59" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:48">

                <expr_stmt pos:start="99:17" pos:end="99:48"><expr pos:start="99:17" pos:end="99:47"><name pos:start="99:17" pos:end="99:27"><name pos:start="99:17" pos:end="99:20">mask</name><operator pos:start="99:21" pos:end="99:21">.</operator><name pos:start="99:22" pos:end="99:27">s_addr</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <call pos:start="99:31" pos:end="99:47"><name pos:start="99:31" pos:end="99:35">htonl</name><argument_list pos:start="99:36" pos:end="99:47">(<argument pos:start="99:37" pos:end="99:46"><expr pos:start="99:37" pos:end="99:46"><literal type="number" pos:start="99:37" pos:end="99:46">0xffffff00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="99:50" pos:end="99:62">/* class C */</comment>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="105:13">else <block pos:start="101:20" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:48">

                <expr_stmt pos:start="103:17" pos:end="103:48"><expr pos:start="103:17" pos:end="103:47"><name pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:20">mask</name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:27">s_addr</name></name> <operator pos:start="103:29" pos:end="103:29">=</operator> <call pos:start="103:31" pos:end="103:47"><name pos:start="103:31" pos:end="103:35">htonl</name><argument_list pos:start="103:36" pos:end="103:47">(<argument pos:start="103:37" pos:end="103:46"><expr pos:start="103:37" pos:end="103:46"><literal type="number" pos:start="103:37" pos:end="103:46">0xfffffff0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="103:50" pos:end="103:73">/* multicast/reserved */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="135:9">else <block pos:start="107:16" pos:end="135:9">{<block_content pos:start="109:13" pos:end="133:13">

            <if_stmt pos:start="109:13" pos:end="113:13"><if pos:start="109:13" pos:end="113:13">if <condition pos:start="109:16" pos:end="109:38">(<expr pos:start="109:17" pos:end="109:37"><operator pos:start="109:17" pos:end="109:17">!</operator><call pos:start="109:18" pos:end="109:37"><name pos:start="109:18" pos:end="109:26">inet_aton</name><argument_list pos:start="109:27" pos:end="109:37">(<argument pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:30">buf</name></expr></argument>, <argument pos:start="109:33" pos:end="109:36"><expr pos:start="109:33" pos:end="109:36"><operator pos:start="109:33" pos:end="109:33">&amp;</operator><name pos:start="109:34" pos:end="109:36">net</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:40" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:26">

                <return pos:start="111:17" pos:end="111:26">return <expr pos:start="111:24" pos:end="111:25"><operator pos:start="111:24" pos:end="111:24">-</operator><literal type="number" pos:start="111:25" pos:end="111:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:47"><expr pos:start="115:13" pos:end="115:46"><name pos:start="115:13" pos:end="115:17">shift</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:46"><name pos:start="115:21" pos:end="115:26">strtol</name><argument_list pos:start="115:27" pos:end="115:46">(<argument pos:start="115:28" pos:end="115:35"><expr pos:start="115:28" pos:end="115:35"><name pos:start="115:28" pos:end="115:35">vnetwork</name></expr></argument>, <argument pos:start="115:38" pos:end="115:41"><expr pos:start="115:38" pos:end="115:41"><operator pos:start="115:38" pos:end="115:38">&amp;</operator><name pos:start="115:39" pos:end="115:41">end</name></expr></argument>, <argument pos:start="115:44" pos:end="115:45"><expr pos:start="115:44" pos:end="115:45"><literal type="number" pos:start="115:44" pos:end="115:45">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="133:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:29">(<expr pos:start="117:17" pos:end="117:28"><operator pos:start="117:17" pos:end="117:17">*</operator><name pos:start="117:18" pos:end="117:20">end</name> <operator pos:start="117:22" pos:end="117:23">!=</operator> <literal type="char" pos:start="117:25" pos:end="117:28">'\0'</literal></expr>)</condition> <block pos:start="117:31" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:17">

                <if_stmt pos:start="119:17" pos:end="123:17"><if pos:start="119:17" pos:end="123:17">if <condition pos:start="119:20" pos:end="119:48">(<expr pos:start="119:21" pos:end="119:47"><operator pos:start="119:21" pos:end="119:21">!</operator><call pos:start="119:22" pos:end="119:47"><name pos:start="119:22" pos:end="119:30">inet_aton</name><argument_list pos:start="119:31" pos:end="119:47">(<argument pos:start="119:32" pos:end="119:39"><expr pos:start="119:32" pos:end="119:39"><name pos:start="119:32" pos:end="119:39">vnetwork</name></expr></argument>, <argument pos:start="119:42" pos:end="119:46"><expr pos:start="119:42" pos:end="119:46"><operator pos:start="119:42" pos:end="119:42">&amp;</operator><name pos:start="119:43" pos:end="119:46">mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:50" pos:end="123:17">{<block_content pos:start="121:21" pos:end="121:30">

                    <return pos:start="121:21" pos:end="121:30">return <expr pos:start="121:28" pos:end="121:29"><operator pos:start="121:28" pos:end="121:28">-</operator><literal type="number" pos:start="121:29" pos:end="121:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="125:15" pos:end="129:13">else if <condition pos:start="125:23" pos:end="125:47">(<expr pos:start="125:24" pos:end="125:46"><name pos:start="125:24" pos:end="125:43"><name pos:start="125:24" pos:end="125:28">shift</name> <argument_list type="generic" pos:start="125:30" pos:end="125:43">&lt; <argument pos:start="125:32" pos:end="125:41"><expr pos:start="125:32" pos:end="125:41"><literal type="number" pos:start="125:32" pos:end="125:32">4</literal> <operator pos:start="125:34" pos:end="125:35">||</operator> <name pos:start="125:37" pos:end="125:41">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="125:45" pos:end="125:46">32</literal></expr>)</condition> <block pos:start="125:49" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:26">

                <return pos:start="127:17" pos:end="127:26">return <expr pos:start="127:24" pos:end="127:25"><operator pos:start="127:24" pos:end="127:24">-</operator><literal type="number" pos:start="127:25" pos:end="127:25">1</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="129:15" pos:end="133:13">else <block pos:start="129:20" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:64">

                <expr_stmt pos:start="131:17" pos:end="131:64"><expr pos:start="131:17" pos:end="131:63"><name pos:start="131:17" pos:end="131:27"><name pos:start="131:17" pos:end="131:20">mask</name><operator pos:start="131:21" pos:end="131:21">.</operator><name pos:start="131:22" pos:end="131:27">s_addr</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <call pos:start="131:31" pos:end="131:63"><name pos:start="131:31" pos:end="131:35">htonl</name><argument_list pos:start="131:36" pos:end="131:63">(<argument pos:start="131:37" pos:end="131:62"><expr pos:start="131:37" pos:end="131:62"><literal type="number" pos:start="131:37" pos:end="131:46">0xffffffff</literal> <operator pos:start="131:48" pos:end="131:49">&lt;&lt;</operator> <operator pos:start="131:51" pos:end="131:51">(</operator><literal type="number" pos:start="131:52" pos:end="131:55">32</literal> <operator pos:start="131:55" pos:end="131:55">-</operator> <name pos:start="131:57" pos:end="131:61">shift</name><operator pos:start="131:62" pos:end="131:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:11">net</name><operator pos:start="137:12" pos:end="137:12">.</operator><name pos:start="137:13" pos:end="137:18">s_addr</name></name> <operator pos:start="137:20" pos:end="137:21">&amp;=</operator> <name pos:start="137:23" pos:end="137:33"><name pos:start="137:23" pos:end="137:26">mask</name><operator pos:start="137:27" pos:end="137:27">.</operator><name pos:start="137:28" pos:end="137:33">s_addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:66"><expr pos:start="139:9" pos:end="139:65"><name pos:start="139:9" pos:end="139:19"><name pos:start="139:9" pos:end="139:12">host</name><operator pos:start="139:13" pos:end="139:13">.</operator><name pos:start="139:14" pos:end="139:19">s_addr</name></name> <operator pos:start="139:21" pos:end="139:21">=</operator> <name pos:start="139:23" pos:end="139:32"><name pos:start="139:23" pos:end="139:25">net</name><operator pos:start="139:26" pos:end="139:26">.</operator><name pos:start="139:27" pos:end="139:32">s_addr</name></name> <operator pos:start="139:34" pos:end="139:34">|</operator> <operator pos:start="139:36" pos:end="139:36">(</operator><call pos:start="139:37" pos:end="139:49"><name pos:start="139:37" pos:end="139:41">htonl</name><argument_list pos:start="139:42" pos:end="139:49">(<argument pos:start="139:43" pos:end="139:48"><expr pos:start="139:43" pos:end="139:48"><literal type="number" pos:start="139:43" pos:end="139:48">0x0202</literal></expr></argument>)</argument_list></call> <operator pos:start="139:51" pos:end="139:51">&amp;</operator> <operator pos:start="139:53" pos:end="139:53">~</operator><name pos:start="139:54" pos:end="139:64"><name pos:start="139:54" pos:end="139:57">mask</name><operator pos:start="139:58" pos:end="139:58">.</operator><name pos:start="139:59" pos:end="139:64">s_addr</name></name><operator pos:start="139:65" pos:end="139:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:66"><expr pos:start="141:9" pos:end="141:65"><name pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:12">dhcp</name><operator pos:start="141:13" pos:end="141:13">.</operator><name pos:start="141:14" pos:end="141:19">s_addr</name></name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:32"><name pos:start="141:23" pos:end="141:25">net</name><operator pos:start="141:26" pos:end="141:26">.</operator><name pos:start="141:27" pos:end="141:32">s_addr</name></name> <operator pos:start="141:34" pos:end="141:34">|</operator> <operator pos:start="141:36" pos:end="141:36">(</operator><call pos:start="141:37" pos:end="141:49"><name pos:start="141:37" pos:end="141:41">htonl</name><argument_list pos:start="141:42" pos:end="141:49">(<argument pos:start="141:43" pos:end="141:48"><expr pos:start="141:43" pos:end="141:48"><literal type="number" pos:start="141:43" pos:end="141:48">0x020f</literal></expr></argument>)</argument_list></call> <operator pos:start="141:51" pos:end="141:51">&amp;</operator> <operator pos:start="141:53" pos:end="141:53">~</operator><name pos:start="141:54" pos:end="141:64"><name pos:start="141:54" pos:end="141:57">mask</name><operator pos:start="141:58" pos:end="141:58">.</operator><name pos:start="141:59" pos:end="141:64">s_addr</name></name><operator pos:start="141:65" pos:end="141:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:66"><expr pos:start="143:9" pos:end="143:65"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:11">dns</name><operator pos:start="143:12" pos:end="143:12">.</operator><name pos:start="143:13" pos:end="143:18">s_addr</name></name>  <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:32"><name pos:start="143:23" pos:end="143:25">net</name><operator pos:start="143:26" pos:end="143:26">.</operator><name pos:start="143:27" pos:end="143:32">s_addr</name></name> <operator pos:start="143:34" pos:end="143:34">|</operator> <operator pos:start="143:36" pos:end="143:36">(</operator><call pos:start="143:37" pos:end="143:49"><name pos:start="143:37" pos:end="143:41">htonl</name><argument_list pos:start="143:42" pos:end="143:49">(<argument pos:start="143:43" pos:end="143:48"><expr pos:start="143:43" pos:end="143:48"><literal type="number" pos:start="143:43" pos:end="143:48">0x0203</literal></expr></argument>)</argument_list></call> <operator pos:start="143:51" pos:end="143:51">&amp;</operator> <operator pos:start="143:53" pos:end="143:53">~</operator><name pos:start="143:54" pos:end="143:64"><name pos:start="143:54" pos:end="143:57">mask</name><operator pos:start="143:58" pos:end="143:58">.</operator><name pos:start="143:59" pos:end="143:64">s_addr</name></name><operator pos:start="143:65" pos:end="143:65">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:42">(<expr pos:start="149:9" pos:end="149:41"><name pos:start="149:9" pos:end="149:13">vhost</name> <operator pos:start="149:15" pos:end="149:16">&amp;&amp;</operator> <operator pos:start="149:18" pos:end="149:18">!</operator><call pos:start="149:19" pos:end="149:41"><name pos:start="149:19" pos:end="149:27">inet_aton</name><argument_list pos:start="149:28" pos:end="149:41">(<argument pos:start="149:29" pos:end="149:33"><expr pos:start="149:29" pos:end="149:33"><name pos:start="149:29" pos:end="149:33">vhost</name></expr></argument>, <argument pos:start="149:36" pos:end="149:40"><expr pos:start="149:36" pos:end="149:40"><operator pos:start="149:36" pos:end="149:36">&amp;</operator><name pos:start="149:37" pos:end="149:40">host</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:44" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:18">

        <return pos:start="151:9" pos:end="151:18">return <expr pos:start="151:16" pos:end="151:17"><operator pos:start="151:16" pos:end="151:16">-</operator><literal type="number" pos:start="151:17" pos:end="151:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:50">(<expr pos:start="155:9" pos:end="155:49"><operator pos:start="155:9" pos:end="155:9">(</operator><name pos:start="155:10" pos:end="155:20"><name pos:start="155:10" pos:end="155:13">host</name><operator pos:start="155:14" pos:end="155:14">.</operator><name pos:start="155:15" pos:end="155:20">s_addr</name></name> <operator pos:start="155:22" pos:end="155:22">&amp;</operator> <name pos:start="155:24" pos:end="155:34"><name pos:start="155:24" pos:end="155:27">mask</name><operator pos:start="155:28" pos:end="155:28">.</operator><name pos:start="155:29" pos:end="155:34">s_addr</name></name><operator pos:start="155:35" pos:end="155:35">)</operator> <operator pos:start="155:37" pos:end="155:38">!=</operator> <name pos:start="155:40" pos:end="155:49"><name pos:start="155:40" pos:end="155:42">net</name><operator pos:start="155:43" pos:end="155:43">.</operator><name pos:start="155:44" pos:end="155:49">s_addr</name></name></expr>)</condition> <block pos:start="155:52" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:18">

        <return pos:start="157:9" pos:end="157:18">return <expr pos:start="157:16" pos:end="157:17"><operator pos:start="157:16" pos:end="157:16">-</operator><literal type="number" pos:start="157:17" pos:end="157:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="167:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:54">(<expr pos:start="163:9" pos:end="163:53"><name pos:start="163:9" pos:end="163:19">vdhcp_start</name> <operator pos:start="163:21" pos:end="163:22">&amp;&amp;</operator> <operator pos:start="163:24" pos:end="163:24">!</operator><call pos:start="163:25" pos:end="163:53"><name pos:start="163:25" pos:end="163:33">inet_aton</name><argument_list pos:start="163:34" pos:end="163:53">(<argument pos:start="163:35" pos:end="163:45"><expr pos:start="163:35" pos:end="163:45"><name pos:start="163:35" pos:end="163:45">vdhcp_start</name></expr></argument>, <argument pos:start="163:48" pos:end="163:52"><expr pos:start="163:48" pos:end="163:52"><operator pos:start="163:48" pos:end="163:48">&amp;</operator><name pos:start="163:49" pos:end="163:52">dhcp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:56" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:18">

        <return pos:start="165:9" pos:end="165:18">return <expr pos:start="165:16" pos:end="165:17"><operator pos:start="165:16" pos:end="165:16">-</operator><literal type="number" pos:start="165:17" pos:end="165:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="169:5" pos:end="175:5"><if pos:start="169:5" pos:end="175:5">if <condition pos:start="169:8" pos:end="171:64">(<expr pos:start="169:9" pos:end="171:63"><operator pos:start="169:9" pos:end="169:9">(</operator><name pos:start="169:10" pos:end="169:20"><name pos:start="169:10" pos:end="169:13">dhcp</name><operator pos:start="169:14" pos:end="169:14">.</operator><name pos:start="169:15" pos:end="169:20">s_addr</name></name> <operator pos:start="169:22" pos:end="169:22">&amp;</operator> <name pos:start="169:24" pos:end="169:34"><name pos:start="169:24" pos:end="169:27">mask</name><operator pos:start="169:28" pos:end="169:28">.</operator><name pos:start="169:29" pos:end="169:34">s_addr</name></name><operator pos:start="169:35" pos:end="169:35">)</operator> <operator pos:start="169:37" pos:end="169:38">!=</operator> <name pos:start="169:40" pos:end="169:49"><name pos:start="169:40" pos:end="169:42">net</name><operator pos:start="169:43" pos:end="169:43">.</operator><name pos:start="169:44" pos:end="169:49">s_addr</name></name> <operator pos:start="169:51" pos:end="169:52">||</operator>

        <name pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:12">dhcp</name><operator pos:start="171:13" pos:end="171:13">.</operator><name pos:start="171:14" pos:end="171:19">s_addr</name></name> <operator pos:start="171:21" pos:end="171:22">==</operator> <name pos:start="171:24" pos:end="171:34"><name pos:start="171:24" pos:end="171:27">host</name><operator pos:start="171:28" pos:end="171:28">.</operator><name pos:start="171:29" pos:end="171:34">s_addr</name></name> <operator pos:start="171:36" pos:end="171:37">||</operator> <name pos:start="171:39" pos:end="171:49"><name pos:start="171:39" pos:end="171:42">dhcp</name><operator pos:start="171:43" pos:end="171:43">.</operator><name pos:start="171:44" pos:end="171:49">s_addr</name></name> <operator pos:start="171:51" pos:end="171:52">==</operator> <name pos:start="171:54" pos:end="171:63"><name pos:start="171:54" pos:end="171:56">dns</name><operator pos:start="171:57" pos:end="171:57">.</operator><name pos:start="171:58" pos:end="171:63">s_addr</name></name></expr>)</condition> <block pos:start="171:66" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:18">

        <return pos:start="173:9" pos:end="173:18">return <expr pos:start="173:16" pos:end="173:17"><operator pos:start="173:16" pos:end="173:16">-</operator><literal type="number" pos:start="173:17" pos:end="173:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:53">(<expr pos:start="179:9" pos:end="179:52"><name pos:start="179:9" pos:end="179:19">vnameserver</name> <operator pos:start="179:21" pos:end="179:22">&amp;&amp;</operator> <operator pos:start="179:24" pos:end="179:24">!</operator><call pos:start="179:25" pos:end="179:52"><name pos:start="179:25" pos:end="179:33">inet_aton</name><argument_list pos:start="179:34" pos:end="179:52">(<argument pos:start="179:35" pos:end="179:45"><expr pos:start="179:35" pos:end="179:45"><name pos:start="179:35" pos:end="179:45">vnameserver</name></expr></argument>, <argument pos:start="179:48" pos:end="179:51"><expr pos:start="179:48" pos:end="179:51"><operator pos:start="179:48" pos:end="179:48">&amp;</operator><name pos:start="179:49" pos:end="179:51">dns</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:55" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:18">

        <return pos:start="181:9" pos:end="181:18">return <expr pos:start="181:16" pos:end="181:17"><operator pos:start="181:16" pos:end="181:16">-</operator><literal type="number" pos:start="181:17" pos:end="181:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="185:5" pos:end="196:0"><if pos:start="185:5" pos:end="196:0">if <condition pos:start="185:8" pos:end="187:34">(<expr pos:start="185:9" pos:end="187:33"><operator pos:start="185:9" pos:end="185:9">(</operator><name pos:start="185:10" pos:end="185:19"><name pos:start="185:10" pos:end="185:12">dns</name><operator pos:start="185:13" pos:end="185:13">.</operator><name pos:start="185:14" pos:end="185:19">s_addr</name></name> <operator pos:start="185:21" pos:end="185:21">&amp;</operator> <name pos:start="185:23" pos:end="185:33"><name pos:start="185:23" pos:end="185:26">mask</name><operator pos:start="185:27" pos:end="185:27">.</operator><name pos:start="185:28" pos:end="185:33">s_addr</name></name><operator pos:start="185:34" pos:end="185:34">)</operator> <operator pos:start="185:36" pos:end="185:37">!=</operator> <name pos:start="185:39" pos:end="185:48"><name pos:start="185:39" pos:end="185:41">net</name><operator pos:start="185:42" pos:end="185:42">.</operator><name pos:start="185:43" pos:end="185:48">s_addr</name></name> <operator pos:start="185:50" pos:end="185:51">||</operator>

        <name pos:start="187:9" pos:end="187:18"><name pos:start="187:9" pos:end="187:11">dns</name><operator pos:start="187:12" pos:end="187:12">.</operator><name pos:start="187:13" pos:end="187:18">s_addr</name></name> <operator pos:start="187:20" pos:end="187:21">==</operator> <name pos:start="187:23" pos:end="187:33"><name pos:start="187:23" pos:end="187:26">host</name><operator pos:start="187:27" pos:end="187:27">.</operator><name pos:start="187:28" pos:end="187:33">s_addr</name></name></expr>)</condition> <block pos:start="187:36" pos:end="196:0">{<block_content pos:start="189:9" pos:end="189:18">

        <return pos:start="189:9" pos:end="189:18">return <expr pos:start="189:16" pos:end="189:17"><operator pos:start="189:16" pos:end="189:16">-</operator><literal type="number" pos:start="189:17" pos:end="189:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="195:1" pos:end="195:14">#<cpp:directive pos:start="195:2" pos:end="195:7">ifndef</cpp:directive> <name pos:start="195:9" pos:end="195:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="197:5" pos:end="204:0"><if pos:start="197:5" pos:end="204:0">if <condition pos:start="197:8" pos:end="197:54">(<expr pos:start="197:9" pos:end="197:53"><name pos:start="197:9" pos:end="197:18">vsmbserver</name> <operator pos:start="197:20" pos:end="197:21">&amp;&amp;</operator> <operator pos:start="197:23" pos:end="197:23">!</operator><call pos:start="197:24" pos:end="197:53"><name pos:start="197:24" pos:end="197:32">inet_aton</name><argument_list pos:start="197:33" pos:end="197:53">(<argument pos:start="197:34" pos:end="197:43"><expr pos:start="197:34" pos:end="197:43"><name pos:start="197:34" pos:end="197:43">vsmbserver</name></expr></argument>, <argument pos:start="197:46" pos:end="197:52"><expr pos:start="197:46" pos:end="197:52"><operator pos:start="197:46" pos:end="197:46">&amp;</operator><name pos:start="197:47" pos:end="197:52">smbsrv</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:56" pos:end="204:0">{<block_content pos:start="199:9" pos:end="199:18">

        <return pos:start="199:9" pos:end="199:18">return <expr pos:start="199:16" pos:end="199:17"><operator pos:start="199:16" pos:end="199:16">-</operator><literal type="number" pos:start="199:17" pos:end="199:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="203:1" pos:end="203:6">#<cpp:directive pos:start="203:2" pos:end="203:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="207:5" pos:end="207:65"><expr pos:start="207:5" pos:end="207:64"><name pos:start="207:5" pos:end="207:6">nc</name> <operator pos:start="207:8" pos:end="207:8">=</operator> <call pos:start="207:10" pos:end="207:64"><name pos:start="207:10" pos:end="207:28">qemu_new_net_client</name><argument_list pos:start="207:29" pos:end="207:64">(<argument pos:start="207:30" pos:end="207:44"><expr pos:start="207:30" pos:end="207:44"><operator pos:start="207:30" pos:end="207:30">&amp;</operator><name pos:start="207:31" pos:end="207:44">net_slirp_info</name></expr></argument>, <argument pos:start="207:47" pos:end="207:50"><expr pos:start="207:47" pos:end="207:50"><name pos:start="207:47" pos:end="207:50">peer</name></expr></argument>, <argument pos:start="207:53" pos:end="207:57"><expr pos:start="207:53" pos:end="207:57"><name pos:start="207:53" pos:end="207:57">model</name></expr></argument>, <argument pos:start="207:60" pos:end="207:63"><expr pos:start="207:60" pos:end="207:63"><name pos:start="207:60" pos:end="207:63">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="215:40"><expr pos:start="211:5" pos:end="215:39"><call pos:start="211:5" pos:end="215:39"><name pos:start="211:5" pos:end="211:12">snprintf</name><argument_list pos:start="211:13" pos:end="215:39">(<argument pos:start="211:14" pos:end="211:25"><expr pos:start="211:14" pos:end="211:25"><name pos:start="211:14" pos:end="211:25"><name pos:start="211:14" pos:end="211:15">nc</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:25">info_str</name></name></expr></argument>, <argument pos:start="211:28" pos:end="211:47"><expr pos:start="211:28" pos:end="211:47"><sizeof pos:start="211:28" pos:end="211:47">sizeof<argument_list pos:start="211:34" pos:end="211:47">(<argument pos:start="211:35" pos:end="211:46"><expr pos:start="211:35" pos:end="211:46"><name pos:start="211:35" pos:end="211:46"><name pos:start="211:35" pos:end="211:36">nc</name><operator pos:start="211:37" pos:end="211:38">-&gt;</operator><name pos:start="211:39" pos:end="211:46">info_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="213:14" pos:end="213:33"><expr pos:start="213:14" pos:end="213:33"><literal type="string" pos:start="213:14" pos:end="213:33">"net=%s,restrict=%s"</literal></expr></argument>, <argument pos:start="213:36" pos:end="213:49"><expr pos:start="213:36" pos:end="213:49"><call pos:start="213:36" pos:end="213:49"><name pos:start="213:36" pos:end="213:44">inet_ntoa</name><argument_list pos:start="213:45" pos:end="213:49">(<argument pos:start="213:46" pos:end="213:48"><expr pos:start="213:46" pos:end="213:48"><name pos:start="213:46" pos:end="213:48">net</name></expr></argument>)</argument_list></call></expr></argument>,

             <argument pos:start="215:14" pos:end="215:38"><expr pos:start="215:14" pos:end="215:38"><ternary pos:start="215:14" pos:end="215:38"><condition pos:start="215:14" pos:end="215:25"><expr pos:start="215:14" pos:end="215:23"><name pos:start="215:14" pos:end="215:23">restricted</name></expr> ?</condition><then pos:start="215:27" pos:end="215:30"> <expr pos:start="215:27" pos:end="215:30"><literal type="string" pos:start="215:27" pos:end="215:30">"on"</literal></expr> </then><else pos:start="215:32" pos:end="215:38">: <expr pos:start="215:34" pos:end="215:38"><literal type="string" pos:start="215:34" pos:end="215:38">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:38"><expr pos:start="219:5" pos:end="219:37"><name pos:start="219:5" pos:end="219:5">s</name> <operator pos:start="219:7" pos:end="219:7">=</operator> <call pos:start="219:9" pos:end="219:37"><name pos:start="219:9" pos:end="219:17">DO_UPCAST</name><argument_list pos:start="219:18" pos:end="219:37">(<argument pos:start="219:19" pos:end="219:28"><expr pos:start="219:19" pos:end="219:28"><name pos:start="219:19" pos:end="219:28">SlirpState</name></expr></argument>, <argument pos:start="219:31" pos:end="219:32"><expr pos:start="219:31" pos:end="219:32"><name pos:start="219:31" pos:end="219:32">nc</name></expr></argument>, <argument pos:start="219:35" pos:end="219:36"><expr pos:start="219:35" pos:end="219:36"><name pos:start="219:35" pos:end="219:36">nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="225:74"><expr pos:start="223:5" pos:end="225:73"><name pos:start="223:5" pos:end="223:12"><name pos:start="223:5" pos:end="223:5">s</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:12">slirp</name></name> <operator pos:start="223:14" pos:end="223:14">=</operator> <call pos:start="223:16" pos:end="225:73"><name pos:start="223:16" pos:end="223:25">slirp_init</name><argument_list pos:start="223:26" pos:end="225:73">(<argument pos:start="223:27" pos:end="223:36"><expr pos:start="223:27" pos:end="223:36"><name pos:start="223:27" pos:end="223:36">restricted</name></expr></argument>, <argument pos:start="223:39" pos:end="223:41"><expr pos:start="223:39" pos:end="223:41"><name pos:start="223:39" pos:end="223:41">net</name></expr></argument>, <argument pos:start="223:44" pos:end="223:47"><expr pos:start="223:44" pos:end="223:47"><name pos:start="223:44" pos:end="223:47">mask</name></expr></argument>, <argument pos:start="223:50" pos:end="223:53"><expr pos:start="223:50" pos:end="223:53"><name pos:start="223:50" pos:end="223:53">host</name></expr></argument>, <argument pos:start="223:56" pos:end="223:64"><expr pos:start="223:56" pos:end="223:64"><name pos:start="223:56" pos:end="223:64">vhostname</name></expr></argument>,

                          <argument pos:start="225:27" pos:end="225:37"><expr pos:start="225:27" pos:end="225:37"><name pos:start="225:27" pos:end="225:37">tftp_export</name></expr></argument>, <argument pos:start="225:40" pos:end="225:47"><expr pos:start="225:40" pos:end="225:47"><name pos:start="225:40" pos:end="225:47">bootfile</name></expr></argument>, <argument pos:start="225:50" pos:end="225:53"><expr pos:start="225:50" pos:end="225:53"><name pos:start="225:50" pos:end="225:53">dhcp</name></expr></argument>, <argument pos:start="225:56" pos:end="225:58"><expr pos:start="225:56" pos:end="225:58"><name pos:start="225:56" pos:end="225:58">dns</name></expr></argument>, <argument pos:start="225:61" pos:end="225:69"><expr pos:start="225:61" pos:end="225:69"><name pos:start="225:61" pos:end="225:69">dnssearch</name></expr></argument>, <argument pos:start="225:72" pos:end="225:72"><expr pos:start="225:72" pos:end="225:72"><name pos:start="225:72" pos:end="225:72">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:48"><expr pos:start="227:5" pos:end="227:47"><call pos:start="227:5" pos:end="227:47"><name pos:start="227:5" pos:end="227:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="227:23" pos:end="227:47">(<argument pos:start="227:24" pos:end="227:36"><expr pos:start="227:24" pos:end="227:36"><operator pos:start="227:24" pos:end="227:24">&amp;</operator><name pos:start="227:25" pos:end="227:36">slirp_stacks</name></expr></argument>, <argument pos:start="227:39" pos:end="227:39"><expr pos:start="227:39" pos:end="227:39"><name pos:start="227:39" pos:end="227:39">s</name></expr></argument>, <argument pos:start="227:42" pos:end="227:46"><expr pos:start="227:42" pos:end="227:46"><name pos:start="227:42" pos:end="227:46">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="231:5" pos:end="254:0">for <control pos:start="231:9" pos:end="231:63">(<init pos:start="231:10" pos:end="231:32"><expr pos:start="231:10" pos:end="231:31"><name pos:start="231:10" pos:end="231:15">config</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <name pos:start="231:19" pos:end="231:31">slirp_configs</name></expr>;</init> <condition pos:start="231:34" pos:end="231:40"><expr pos:start="231:34" pos:end="231:39"><name pos:start="231:34" pos:end="231:39">config</name></expr>;</condition> <incr pos:start="231:42" pos:end="231:62"><expr pos:start="231:42" pos:end="231:62"><name pos:start="231:42" pos:end="231:47">config</name> <operator pos:start="231:49" pos:end="231:49">=</operator> <name pos:start="231:51" pos:end="231:62"><name pos:start="231:51" pos:end="231:56">config</name><operator pos:start="231:57" pos:end="231:58">-&gt;</operator><name pos:start="231:59" pos:end="231:62">next</name></name></expr></incr>)</control> <block pos:start="231:65" pos:end="254:0">{<block_content pos:start="233:9" pos:end="249:9">

        <if_stmt pos:start="233:9" pos:end="249:9"><if pos:start="233:9" pos:end="241:9">if <condition pos:start="233:12" pos:end="233:46">(<expr pos:start="233:13" pos:end="233:45"><name pos:start="233:13" pos:end="233:25"><name pos:start="233:13" pos:end="233:18">config</name><operator pos:start="233:19" pos:end="233:20">-&gt;</operator><name pos:start="233:21" pos:end="233:25">flags</name></name> <operator pos:start="233:27" pos:end="233:27">&amp;</operator> <name pos:start="233:29" pos:end="233:45">SLIRP_CFG_HOSTFWD</name></expr>)</condition> <block pos:start="233:48" pos:end="241:9">{<block_content pos:start="235:13" pos:end="239:27">

            <if_stmt pos:start="235:13" pos:end="239:27"><if pos:start="235:13" pos:end="239:27">if <condition pos:start="235:16" pos:end="237:68">(<expr pos:start="235:17" pos:end="237:67"><call pos:start="235:17" pos:end="237:63"><name pos:start="235:17" pos:end="235:29">slirp_hostfwd</name><argument_list pos:start="235:30" pos:end="237:63">(<argument pos:start="235:31" pos:end="235:31"><expr pos:start="235:31" pos:end="235:31"><name pos:start="235:31" pos:end="235:31">s</name></expr></argument>, <argument pos:start="235:34" pos:end="235:44"><expr pos:start="235:34" pos:end="235:44"><name pos:start="235:34" pos:end="235:44"><name pos:start="235:34" pos:end="235:39">config</name><operator pos:start="235:40" pos:end="235:41">-&gt;</operator><name pos:start="235:42" pos:end="235:44">str</name></name></expr></argument>,

                              <argument pos:start="237:31" pos:end="237:62"><expr pos:start="237:31" pos:end="237:62"><name pos:start="237:31" pos:end="237:43"><name pos:start="237:31" pos:end="237:36">config</name><operator pos:start="237:37" pos:end="237:38">-&gt;</operator><name pos:start="237:39" pos:end="237:43">flags</name></name> <operator pos:start="237:45" pos:end="237:45">&amp;</operator> <name pos:start="237:47" pos:end="237:62">SLIRP_CFG_LEGACY</name></expr></argument>)</argument_list></call> <operator pos:start="237:65" pos:end="237:65">&lt;</operator> <literal type="number" pos:start="237:67" pos:end="237:67">0</literal></expr>)</condition><block type="pseudo" pos:start="239:17" pos:end="239:27"><block_content pos:start="239:17" pos:end="239:27">

                <goto pos:start="239:17" pos:end="239:27">goto <name pos:start="239:22" pos:end="239:26">error</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="241:11" pos:end="249:9">else <block pos:start="241:16" pos:end="249:9">{<block_content pos:start="243:13" pos:end="247:27">

            <if_stmt pos:start="243:13" pos:end="247:27"><if pos:start="243:13" pos:end="247:27">if <condition pos:start="243:16" pos:end="245:69">(<expr pos:start="243:17" pos:end="245:68"><call pos:start="243:17" pos:end="245:64"><name pos:start="243:17" pos:end="243:30">slirp_guestfwd</name><argument_list pos:start="243:31" pos:end="245:64">(<argument pos:start="243:32" pos:end="243:32"><expr pos:start="243:32" pos:end="243:32"><name pos:start="243:32" pos:end="243:32">s</name></expr></argument>, <argument pos:start="243:35" pos:end="243:45"><expr pos:start="243:35" pos:end="243:45"><name pos:start="243:35" pos:end="243:45"><name pos:start="243:35" pos:end="243:40">config</name><operator pos:start="243:41" pos:end="243:42">-&gt;</operator><name pos:start="243:43" pos:end="243:45">str</name></name></expr></argument>,

                               <argument pos:start="245:32" pos:end="245:63"><expr pos:start="245:32" pos:end="245:63"><name pos:start="245:32" pos:end="245:44"><name pos:start="245:32" pos:end="245:37">config</name><operator pos:start="245:38" pos:end="245:39">-&gt;</operator><name pos:start="245:40" pos:end="245:44">flags</name></name> <operator pos:start="245:46" pos:end="245:46">&amp;</operator> <name pos:start="245:48" pos:end="245:63">SLIRP_CFG_LEGACY</name></expr></argument>)</argument_list></call> <operator pos:start="245:66" pos:end="245:66">&lt;</operator> <literal type="number" pos:start="245:68" pos:end="245:68">0</literal></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="247:27"><block_content pos:start="247:17" pos:end="247:27">

                <goto pos:start="247:17" pos:end="247:27">goto <name pos:start="247:22" pos:end="247:26">error</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

<cpp:ifndef pos:start="253:1" pos:end="253:14">#<cpp:directive pos:start="253:2" pos:end="253:7">ifndef</cpp:directive> <name pos:start="253:9" pos:end="253:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="255:5" pos:end="259:5"><if pos:start="255:5" pos:end="259:5">if <condition pos:start="255:8" pos:end="255:20">(<expr pos:start="255:9" pos:end="255:19"><operator pos:start="255:9" pos:end="255:9">!</operator><name pos:start="255:10" pos:end="255:19">smb_export</name></expr>)</condition> <block pos:start="255:22" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:39">

        <expr_stmt pos:start="257:9" pos:end="257:39"><expr pos:start="257:9" pos:end="257:38"><name pos:start="257:9" pos:end="257:18">smb_export</name> <operator pos:start="257:20" pos:end="257:20">=</operator> <name pos:start="257:22" pos:end="257:38">legacy_smb_export</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="261:5" pos:end="270:0"><if pos:start="261:5" pos:end="270:0">if <condition pos:start="261:8" pos:end="261:19">(<expr pos:start="261:9" pos:end="261:18"><name pos:start="261:9" pos:end="261:18">smb_export</name></expr>)</condition> <block pos:start="261:21" pos:end="270:0">{<block_content pos:start="263:9" pos:end="265:23">

        <if_stmt pos:start="263:9" pos:end="265:23"><if pos:start="263:9" pos:end="265:23">if <condition pos:start="263:12" pos:end="263:49">(<expr pos:start="263:13" pos:end="263:48"><call pos:start="263:13" pos:end="263:44"><name pos:start="263:13" pos:end="263:21">slirp_smb</name><argument_list pos:start="263:22" pos:end="263:44">(<argument pos:start="263:23" pos:end="263:23"><expr pos:start="263:23" pos:end="263:23"><name pos:start="263:23" pos:end="263:23">s</name></expr></argument>, <argument pos:start="263:26" pos:end="263:35"><expr pos:start="263:26" pos:end="263:35"><name pos:start="263:26" pos:end="263:35">smb_export</name></expr></argument>, <argument pos:start="263:38" pos:end="263:43"><expr pos:start="263:38" pos:end="263:43"><name pos:start="263:38" pos:end="263:43">smbsrv</name></expr></argument>)</argument_list></call> <operator pos:start="263:46" pos:end="263:46">&lt;</operator> <literal type="number" pos:start="263:48" pos:end="263:48">0</literal></expr>)</condition><block type="pseudo" pos:start="265:13" pos:end="265:23"><block_content pos:start="265:13" pos:end="265:23">

            <goto pos:start="265:13" pos:end="265:23">goto <name pos:start="265:18" pos:end="265:22">error</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>



    <return pos:start="273:5" pos:end="273:13">return <expr pos:start="273:12" pos:end="273:12"><literal type="number" pos:start="273:12" pos:end="273:12">0</literal></expr>;</return>



<label pos:start="277:1" pos:end="277:6"><name pos:start="277:1" pos:end="277:5">error</name>:</label>

    <expr_stmt pos:start="279:5" pos:end="279:28"><expr pos:start="279:5" pos:end="279:27"><call pos:start="279:5" pos:end="279:27"><name pos:start="279:5" pos:end="279:23">qemu_del_net_client</name><argument_list pos:start="279:24" pos:end="279:27">(<argument pos:start="279:25" pos:end="279:26"><expr pos:start="279:25" pos:end="279:26"><name pos:start="279:25" pos:end="279:26">nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="281:5" pos:end="281:14">return <expr pos:start="281:12" pos:end="281:13"><operator pos:start="281:12" pos:end="281:12">-</operator><literal type="number" pos:start="281:13" pos:end="281:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
