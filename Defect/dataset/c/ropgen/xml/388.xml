<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/388.c" pos:tabs="8"><function pos:start="1:1" pos:end="265:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">encode_mode</name><parameter_list pos:start="1:23" pos:end="1:166">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><name pos:start="1:24" pos:end="1:40">CinepakEncContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:56">CinepakMode</name></type> <name pos:start="1:58" pos:end="1:61">mode</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:68"><decl pos:start="1:64" pos:end="1:68"><type pos:start="1:64" pos:end="1:68"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:68">h</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:81"><decl pos:start="1:71" pos:end="1:81"><type pos:start="1:71" pos:end="1:81"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:81">v1_size</name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:94"><decl pos:start="1:84" pos:end="1:94"><type pos:start="1:84" pos:end="1:94"><name pos:start="1:84" pos:end="1:86">int</name></type> <name pos:start="1:88" pos:end="1:94">v4_size</name></decl></parameter>, <parameter pos:start="1:97" pos:end="1:102"><decl pos:start="1:97" pos:end="1:102"><type pos:start="1:97" pos:end="1:102"><name pos:start="1:97" pos:end="1:99">int</name></type> <name pos:start="1:101" pos:end="1:102">v4</name></decl></parameter>, <parameter pos:start="1:105" pos:end="1:127"><decl pos:start="1:105" pos:end="1:127"><type pos:start="1:105" pos:end="1:127"><name pos:start="1:105" pos:end="1:113">AVPicture</name> <modifier pos:start="1:115" pos:end="1:115">*</modifier></type><name pos:start="1:116" pos:end="1:127">scratch_pict</name></decl></parameter>, <parameter pos:start="1:130" pos:end="1:145"><decl pos:start="1:130" pos:end="1:145"><type pos:start="1:130" pos:end="1:145"><name pos:start="1:130" pos:end="1:139">strip_info</name> <modifier pos:start="1:141" pos:end="1:141">*</modifier></type><name pos:start="1:142" pos:end="1:145">info</name></decl></parameter>, <parameter pos:start="1:148" pos:end="1:165"><decl pos:start="1:148" pos:end="1:165"><type pos:start="1:148" pos:end="1:165"><name pos:start="1:148" pos:end="1:155">unsigned</name> <name pos:start="1:157" pos:end="1:160">char</name> <modifier pos:start="1:162" pos:end="1:162">*</modifier></type><name pos:start="1:163" pos:end="1:165">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="265:1">{<block_content pos:start="5:5" pos:end="263:15">

    <decl_stmt pos:start="5:5" pos:end="5:92"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">y</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">z</name></decl>, <decl pos:start="5:18" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:22">flags</name></decl>, <decl pos:start="5:25" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:28">bits</name></decl>, <decl pos:start="5:31" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:31" pos:end="5:39">temp_size</name></decl>, <decl pos:start="5:42" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:42" pos:end="5:51">header_ofs</name></decl>, <decl pos:start="5:54" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:54" pos:end="5:56">ret</name> <init pos:start="5:58" pos:end="5:60">= <expr pos:start="5:60" pos:end="5:60"><literal type="number" pos:start="5:60" pos:end="5:60">0</literal></expr></init></decl>, <decl pos:start="5:63" pos:end="5:91"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:63" pos:end="5:70">mb_count</name> <init pos:start="5:72" pos:end="5:91">= <expr pos:start="5:74" pos:end="5:91"><name pos:start="5:74" pos:end="5:77"><name pos:start="5:74" pos:end="5:74">s</name><operator pos:start="5:75" pos:end="5:76">-&gt;</operator><name pos:start="5:77" pos:end="5:77">w</name></name> <operator pos:start="5:79" pos:end="5:79">*</operator> <name pos:start="5:81" pos:end="5:81">h</name> <operator pos:start="5:83" pos:end="5:83">/</operator> <name pos:start="5:85" pos:end="5:91">MB_AREA</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">needs_extra_bit</name></decl>, <decl pos:start="7:26" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:42">should_write_temp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:26"><name pos:start="9:19" pos:end="9:22">temp</name><index pos:start="9:23" pos:end="9:26">[<expr pos:start="9:24" pos:end="9:25"><literal type="number" pos:start="9:24" pos:end="9:25">64</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:start="9:29" pos:end="9:69">//32/2 = 16 V4 blocks at 4 B each -&gt; 64 B</comment>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">mb_info</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">mb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">AVPicture</name></type> <name pos:start="13:15" pos:end="13:25">sub_scratch</name></decl>;</decl_stmt>



    <comment type="line" pos:start="17:5" pos:end="17:22">//encode codebooks</comment>

    <if_stmt pos:start="19:5" pos:end="21:85"><if pos:start="19:5" pos:end="21:85">if<condition pos:start="19:7" pos:end="19:15">(<expr pos:start="19:8" pos:end="19:14"><name pos:start="19:8" pos:end="19:14">v1_size</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:85"><block_content pos:start="21:9" pos:end="21:85">

        <expr_stmt pos:start="21:9" pos:end="21:85"><expr pos:start="21:9" pos:end="21:84"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:14">+=</operator> <call pos:start="21:16" pos:end="21:84"><name pos:start="21:16" pos:end="21:30">encode_codebook</name><argument_list pos:start="21:31" pos:end="21:84">(<argument pos:start="21:32" pos:end="21:32"><expr pos:start="21:32" pos:end="21:32"><name pos:start="21:32" pos:end="21:32">s</name></expr></argument>, <argument pos:start="21:35" pos:end="21:51"><expr pos:start="21:35" pos:end="21:51"><name pos:start="21:35" pos:end="21:51"><name pos:start="21:35" pos:end="21:38">info</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:51">v1_codebook</name></name></expr></argument>, <argument pos:start="21:54" pos:end="21:60"><expr pos:start="21:54" pos:end="21:60"><name pos:start="21:54" pos:end="21:60">v1_size</name></expr></argument>, <argument pos:start="21:63" pos:end="21:66"><expr pos:start="21:63" pos:end="21:66"><literal type="number" pos:start="21:63" pos:end="21:66">0x22</literal></expr></argument>, <argument pos:start="21:69" pos:end="21:72"><expr pos:start="21:69" pos:end="21:72"><literal type="number" pos:start="21:69" pos:end="21:72">0x26</literal></expr></argument>, <argument pos:start="21:75" pos:end="21:83"><expr pos:start="21:75" pos:end="21:83"><name pos:start="21:75" pos:end="21:77">buf</name> <operator pos:start="21:79" pos:end="21:79">+</operator> <name pos:start="21:81" pos:end="21:83">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="27:85"><if pos:start="25:5" pos:end="27:85">if<condition pos:start="25:7" pos:end="25:15">(<expr pos:start="25:8" pos:end="25:14"><name pos:start="25:8" pos:end="25:14">v4_size</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:85"><block_content pos:start="27:9" pos:end="27:85">

        <expr_stmt pos:start="27:9" pos:end="27:85"><expr pos:start="27:9" pos:end="27:84"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:14">+=</operator> <call pos:start="27:16" pos:end="27:84"><name pos:start="27:16" pos:end="27:30">encode_codebook</name><argument_list pos:start="27:31" pos:end="27:84">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">s</name></expr></argument>, <argument pos:start="27:35" pos:end="27:51"><expr pos:start="27:35" pos:end="27:51"><name pos:start="27:35" pos:end="27:51"><name pos:start="27:35" pos:end="27:38">info</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:51">v4_codebook</name></name></expr></argument>, <argument pos:start="27:54" pos:end="27:60"><expr pos:start="27:54" pos:end="27:60"><name pos:start="27:54" pos:end="27:60">v4_size</name></expr></argument>, <argument pos:start="27:63" pos:end="27:66"><expr pos:start="27:63" pos:end="27:66"><literal type="number" pos:start="27:63" pos:end="27:66">0x20</literal></expr></argument>, <argument pos:start="27:69" pos:end="27:72"><expr pos:start="27:69" pos:end="27:72"><literal type="number" pos:start="27:69" pos:end="27:72">0x24</literal></expr></argument>, <argument pos:start="27:75" pos:end="27:83"><expr pos:start="27:75" pos:end="27:83"><name pos:start="27:75" pos:end="27:77">buf</name> <operator pos:start="27:79" pos:end="27:79">+</operator> <name pos:start="27:81" pos:end="27:83">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="31:5" pos:end="31:28">//update scratch picture</comment>

    <for pos:start="33:5" pos:end="61:5">for<control pos:start="33:8" pos:end="33:39">(<init pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">z</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:13">y</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</init> <condition pos:start="33:20" pos:end="33:25"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:20">y</name> <operator pos:start="33:22" pos:end="33:22">&lt;</operator> <name pos:start="33:24" pos:end="33:24">h</name></expr>;</condition> <incr pos:start="33:27" pos:end="33:38"><expr pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:27">y</name> <operator pos:start="33:29" pos:end="33:30">+=</operator> <name pos:start="33:32" pos:end="33:38">MB_SIZE</name></expr></incr>)</control> <block pos:start="33:41" pos:end="61:5">{<block_content pos:start="35:9" pos:end="59:9">

        <for pos:start="35:9" pos:end="59:9">for<control pos:start="35:12" pos:end="35:47">(<init pos:start="35:13" pos:end="35:18"><expr pos:start="35:13" pos:end="35:17"><name pos:start="35:13" pos:end="35:13">x</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr>;</init> <condition pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:20">x</name> <operator pos:start="35:22" pos:end="35:22">&lt;</operator> <name pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:27">w</name></name></expr>;</condition> <incr pos:start="35:30" pos:end="35:46"><expr pos:start="35:30" pos:end="35:41"><name pos:start="35:30" pos:end="35:30">x</name> <operator pos:start="35:32" pos:end="35:33">+=</operator> <name pos:start="35:35" pos:end="35:41">MB_SIZE</name></expr><operator pos:start="35:42" pos:end="35:42">,</operator> <expr pos:start="35:44" pos:end="35:46"><name pos:start="35:44" pos:end="35:44">z</name><operator pos:start="35:45" pos:end="35:46">++</operator></expr></incr>)</control> <block pos:start="35:49" pos:end="59:9">{<block_content pos:start="37:13" pos:end="57:75">

            <expr_stmt pos:start="37:13" pos:end="37:27"><expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:14">mb</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:26"><name pos:start="37:19" pos:end="37:19">s</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:23">mb</name><index pos:start="37:24" pos:end="37:26">[<expr pos:start="37:25" pos:end="37:25"><name pos:start="37:25" pos:end="37:25">z</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="41:13" pos:end="43:25"><if pos:start="41:13" pos:end="43:25">if<condition pos:start="41:15" pos:end="41:64">(<expr pos:start="41:16" pos:end="41:63"><name pos:start="41:16" pos:end="41:19">mode</name> <operator pos:start="41:21" pos:end="41:22">==</operator> <name pos:start="41:24" pos:end="41:30">MODE_MC</name> <operator pos:start="41:32" pos:end="41:33">&amp;&amp;</operator> <name pos:start="41:35" pos:end="41:51"><name pos:start="41:35" pos:end="41:36">mb</name><operator pos:start="41:37" pos:end="41:38">-&gt;</operator><name pos:start="41:39" pos:end="41:51">best_encoding</name></name> <operator pos:start="41:53" pos:end="41:54">==</operator> <name pos:start="41:56" pos:end="41:63">ENC_SKIP</name></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:25"><block_content pos:start="43:17" pos:end="43:25">

                <continue pos:start="43:17" pos:end="43:25">continue;</continue></block_content></block></if></if_stmt>



            <expr_stmt pos:start="47:13" pos:end="47:65"><expr pos:start="47:13" pos:end="47:64"><call pos:start="47:13" pos:end="47:64"><name pos:start="47:13" pos:end="47:27">get_sub_picture</name><argument_list pos:start="47:28" pos:end="47:64">(<argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><name pos:start="47:29" pos:end="47:29">s</name></expr></argument>, <argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">x</name></expr></argument>, <argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">y</name></expr></argument>, <argument pos:start="47:38" pos:end="47:49"><expr pos:start="47:38" pos:end="47:49"><name pos:start="47:38" pos:end="47:49">scratch_pict</name></expr></argument>, <argument pos:start="47:52" pos:end="47:63"><expr pos:start="47:52" pos:end="47:63"><operator pos:start="47:52" pos:end="47:52">&amp;</operator><name pos:start="47:53" pos:end="47:63">sub_scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="57:75"><if pos:start="51:13" pos:end="53:60">if<condition pos:start="51:15" pos:end="51:67">(<expr pos:start="51:16" pos:end="51:66"><name pos:start="51:16" pos:end="51:19">mode</name> <operator pos:start="51:21" pos:end="51:22">==</operator> <name pos:start="51:24" pos:end="51:35">MODE_V1_ONLY</name> <operator pos:start="51:37" pos:end="51:38">||</operator> <name pos:start="51:40" pos:end="51:56"><name pos:start="51:40" pos:end="51:41">mb</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:56">best_encoding</name></name> <operator pos:start="51:58" pos:end="51:59">==</operator> <name pos:start="51:61" pos:end="51:66">ENC_V1</name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:60"><block_content pos:start="53:17" pos:end="53:60">

                <expr_stmt pos:start="53:17" pos:end="53:60"><expr pos:start="53:17" pos:end="53:59"><call pos:start="53:17" pos:end="53:59"><name pos:start="53:17" pos:end="53:32">decode_v1_vector</name><argument_list pos:start="53:33" pos:end="53:59">(<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><name pos:start="53:34" pos:end="53:34">s</name></expr></argument>, <argument pos:start="53:37" pos:end="53:48"><expr pos:start="53:37" pos:end="53:48"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:48">sub_scratch</name></expr></argument>, <argument pos:start="53:51" pos:end="53:52"><expr pos:start="53:51" pos:end="53:52"><name pos:start="53:51" pos:end="53:52">mb</name></expr></argument>, <argument pos:start="53:55" pos:end="53:58"><expr pos:start="53:55" pos:end="53:58"><name pos:start="53:55" pos:end="53:58">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="55:13" pos:end="57:75">else if<condition pos:start="55:20" pos:end="55:72">(<expr pos:start="55:21" pos:end="55:71"><name pos:start="55:21" pos:end="55:24">mode</name> <operator pos:start="55:26" pos:end="55:27">!=</operator> <name pos:start="55:29" pos:end="55:40">MODE_V1_ONLY</name> <operator pos:start="55:42" pos:end="55:43">&amp;&amp;</operator> <name pos:start="55:45" pos:end="55:61"><name pos:start="55:45" pos:end="55:46">mb</name><operator pos:start="55:47" pos:end="55:48">-&gt;</operator><name pos:start="55:49" pos:end="55:61">best_encoding</name></name> <operator pos:start="55:63" pos:end="55:64">==</operator> <name pos:start="55:66" pos:end="55:71">ENC_V4</name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:75"><block_content pos:start="57:17" pos:end="57:75">

                <expr_stmt pos:start="57:17" pos:end="57:75"><expr pos:start="57:17" pos:end="57:74"><call pos:start="57:17" pos:end="57:74"><name pos:start="57:17" pos:end="57:32">decode_v4_vector</name><argument_list pos:start="57:33" pos:end="57:74">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">s</name></expr></argument>, <argument pos:start="57:37" pos:end="57:48"><expr pos:start="57:37" pos:end="57:48"><operator pos:start="57:37" pos:end="57:37">&amp;</operator><name pos:start="57:38" pos:end="57:48">sub_scratch</name></expr></argument>, <argument pos:start="57:51" pos:end="57:67"><expr pos:start="57:51" pos:end="57:67"><name pos:start="57:51" pos:end="57:67"><name pos:start="57:51" pos:end="57:52">mb</name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:63">v4_vector</name><index pos:start="57:64" pos:end="57:67">[<expr pos:start="57:65" pos:end="57:66"><name pos:start="57:65" pos:end="57:66">v4</name></expr>]</index></name></expr></argument>, <argument pos:start="57:70" pos:end="57:73"><expr pos:start="57:70" pos:end="57:73"><name pos:start="57:70" pos:end="57:73">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <switch pos:start="65:5" pos:end="259:5">switch<condition pos:start="65:11" pos:end="65:16">(<expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">mode</name></expr>)</condition> <block pos:start="65:18" pos:end="259:5">{<block_content pos:start="67:5" pos:end="257:14">

    <case pos:start="67:5" pos:end="67:22">case <expr pos:start="67:10" pos:end="67:21"><name pos:start="67:10" pos:end="67:21">MODE_V1_ONLY</name></expr>:</case>

        <comment type="line" pos:start="69:9" pos:end="69:69">//av_log(s-&gt;avctx, AV_LOG_INFO, "mb_count = %i\n", mb_count);</comment>

        <expr_stmt pos:start="71:9" pos:end="71:61"><expr pos:start="71:9" pos:end="71:60"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:14">+=</operator> <call pos:start="71:16" pos:end="71:60"><name pos:start="71:16" pos:end="71:33">write_chunk_header</name><argument_list pos:start="71:34" pos:end="71:60">(<argument pos:start="71:35" pos:end="71:43"><expr pos:start="71:35" pos:end="71:43"><name pos:start="71:35" pos:end="71:37">buf</name> <operator pos:start="71:39" pos:end="71:39">+</operator> <name pos:start="71:41" pos:end="71:43">ret</name></expr></argument>, <argument pos:start="71:46" pos:end="71:49"><expr pos:start="71:46" pos:end="71:49"><literal type="number" pos:start="71:46" pos:end="71:49">0x32</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:59"><expr pos:start="71:52" pos:end="71:59"><name pos:start="71:52" pos:end="71:59">mb_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="75:9" pos:end="77:44">for<control pos:start="75:12" pos:end="75:37">(<init pos:start="75:13" pos:end="75:18"><expr pos:start="75:13" pos:end="75:17"><name pos:start="75:13" pos:end="75:13">x</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>;</init> <condition pos:start="75:20" pos:end="75:32"><expr pos:start="75:20" pos:end="75:31"><name pos:start="75:20" pos:end="75:20">x</name> <operator pos:start="75:22" pos:end="75:22">&lt;</operator> <name pos:start="75:24" pos:end="75:31">mb_count</name></expr>;</condition> <incr pos:start="75:34" pos:end="75:36"><expr pos:start="75:34" pos:end="75:36"><name pos:start="75:34" pos:end="75:34">x</name><operator pos:start="75:35" pos:end="75:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:13" pos:end="77:44"><block_content pos:start="77:13" pos:end="77:44">

            <expr_stmt pos:start="77:13" pos:end="77:44"><expr pos:start="77:13" pos:end="77:43"><name pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:15">buf</name><index pos:start="77:16" pos:end="77:22">[<expr pos:start="77:17" pos:end="77:21"><name pos:start="77:17" pos:end="77:19">ret</name><operator pos:start="77:20" pos:end="77:21">++</operator></expr>]</index></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:33"><name pos:start="77:26" pos:end="77:26">s</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:30">mb</name><index pos:start="77:31" pos:end="77:33">[<expr pos:start="77:32" pos:end="77:32"><name pos:start="77:32" pos:end="77:32">x</name></expr>]</index></name><operator pos:start="77:34" pos:end="77:34">.</operator><name pos:start="77:35" pos:end="77:43">v1_vector</name></expr>;</expr_stmt></block_content></block></for>



        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:20">case <expr pos:start="83:10" pos:end="83:19"><name pos:start="83:10" pos:end="83:19">MODE_V1_V4</name></expr>:</case>

        <comment type="line" pos:start="85:9" pos:end="85:34">//remember header position</comment>

        <expr_stmt pos:start="87:9" pos:end="87:25"><expr pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:18">header_ofs</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <name pos:start="87:22" pos:end="87:24">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:33"><expr pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:14">+=</operator> <name pos:start="89:16" pos:end="89:32">CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>



        <for pos:start="93:9" pos:end="129:9">for<control pos:start="93:12" pos:end="93:41">(<init pos:start="93:13" pos:end="93:18"><expr pos:start="93:13" pos:end="93:17"><name pos:start="93:13" pos:end="93:13">x</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <literal type="number" pos:start="93:17" pos:end="93:17">0</literal></expr>;</init> <condition pos:start="93:20" pos:end="93:32"><expr pos:start="93:20" pos:end="93:31"><name pos:start="93:20" pos:end="93:20">x</name> <operator pos:start="93:22" pos:end="93:22">&lt;</operator> <name pos:start="93:24" pos:end="93:31">mb_count</name></expr>;</condition> <incr pos:start="93:34" pos:end="93:40"><expr pos:start="93:34" pos:end="93:40"><name pos:start="93:34" pos:end="93:34">x</name> <operator pos:start="93:36" pos:end="93:37">+=</operator> <literal type="number" pos:start="93:39" pos:end="93:40">32</literal></expr></incr>)</control> <block pos:start="93:43" pos:end="129:9">{<block_content pos:start="95:13" pos:end="127:13">

            <expr_stmt pos:start="95:13" pos:end="95:22"><expr pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:17">flags</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <literal type="number" pos:start="95:21" pos:end="95:21">0</literal></expr>;</expr_stmt>

            <for pos:start="97:13" pos:end="101:47">for<control pos:start="97:16" pos:end="97:54">(<init pos:start="97:17" pos:end="97:22"><expr pos:start="97:17" pos:end="97:21"><name pos:start="97:17" pos:end="97:17">y</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:21">x</name></expr>;</init> <condition pos:start="97:24" pos:end="97:49"><expr pos:start="97:24" pos:end="97:48"><name pos:start="97:24" pos:end="97:24">y</name> <operator pos:start="97:26" pos:end="97:26">&lt;</operator> <call pos:start="97:28" pos:end="97:48"><name pos:start="97:28" pos:end="97:32">FFMIN</name><argument_list pos:start="97:33" pos:end="97:48">(<argument pos:start="97:34" pos:end="97:37"><expr pos:start="97:34" pos:end="97:37"><name pos:start="97:34" pos:end="97:34">x</name><operator pos:start="97:35" pos:end="97:35">+</operator><literal type="number" pos:start="97:36" pos:end="97:37">32</literal></expr></argument>, <argument pos:start="97:40" pos:end="97:47"><expr pos:start="97:40" pos:end="97:47"><name pos:start="97:40" pos:end="97:47">mb_count</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="97:51" pos:end="97:53"><expr pos:start="97:51" pos:end="97:53"><name pos:start="97:51" pos:end="97:51">y</name><operator pos:start="97:52" pos:end="97:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="99:17" pos:end="101:47"><block_content pos:start="99:17" pos:end="101:47">

                <if_stmt pos:start="99:17" pos:end="101:47"><if pos:start="99:17" pos:end="101:47">if<condition pos:start="99:19" pos:end="99:52">(<expr pos:start="99:20" pos:end="99:51"><name pos:start="99:20" pos:end="99:27"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:24">mb</name><index pos:start="99:25" pos:end="99:27">[<expr pos:start="99:26" pos:end="99:26"><name pos:start="99:26" pos:end="99:26">y</name></expr>]</index></name><operator pos:start="99:28" pos:end="99:28">.</operator><name pos:start="99:29" pos:end="99:41">best_encoding</name> <operator pos:start="99:43" pos:end="99:44">==</operator> <name pos:start="99:46" pos:end="99:51">ENC_V4</name></expr>)</condition><block type="pseudo" pos:start="101:21" pos:end="101:47"><block_content pos:start="101:21" pos:end="101:47">

                    <expr_stmt pos:start="101:21" pos:end="101:47"><expr pos:start="101:21" pos:end="101:46"><name pos:start="101:21" pos:end="101:25">flags</name> <operator pos:start="101:27" pos:end="101:28">|=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">1</literal> <operator pos:start="101:32" pos:end="101:33">&lt;&lt;</operator> <operator pos:start="101:35" pos:end="101:35">(</operator><literal type="number" pos:start="101:36" pos:end="101:39">31</literal> <operator pos:start="101:39" pos:end="101:39">-</operator> <name pos:start="101:41" pos:end="101:41">y</name> <operator pos:start="101:43" pos:end="101:43">+</operator> <name pos:start="101:45" pos:end="101:45">x</name><operator pos:start="101:46" pos:end="101:46">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



            <expr_stmt pos:start="105:13" pos:end="105:38"><expr pos:start="105:13" pos:end="105:37"><call pos:start="105:13" pos:end="105:37"><name pos:start="105:13" pos:end="105:19">AV_WB32</name><argument_list pos:start="105:20" pos:end="105:37">(<argument pos:start="105:21" pos:end="105:29"><expr pos:start="105:21" pos:end="105:29"><operator pos:start="105:21" pos:end="105:21">&amp;</operator><name pos:start="105:22" pos:end="105:29"><name pos:start="105:22" pos:end="105:24">buf</name><index pos:start="105:25" pos:end="105:29">[<expr pos:start="105:26" pos:end="105:28"><name pos:start="105:26" pos:end="105:28">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="105:32" pos:end="105:36"><expr pos:start="105:32" pos:end="105:36"><name pos:start="105:32" pos:end="105:36">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:21"><expr pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:18">+=</operator> <literal type="number" pos:start="107:20" pos:end="107:20">4</literal></expr>;</expr_stmt>



            <for pos:start="111:13" pos:end="127:13">for<control pos:start="111:16" pos:end="111:54">(<init pos:start="111:17" pos:end="111:22"><expr pos:start="111:17" pos:end="111:21"><name pos:start="111:17" pos:end="111:17">y</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:21">x</name></expr>;</init> <condition pos:start="111:24" pos:end="111:49"><expr pos:start="111:24" pos:end="111:48"><name pos:start="111:24" pos:end="111:24">y</name> <operator pos:start="111:26" pos:end="111:26">&lt;</operator> <call pos:start="111:28" pos:end="111:48"><name pos:start="111:28" pos:end="111:32">FFMIN</name><argument_list pos:start="111:33" pos:end="111:48">(<argument pos:start="111:34" pos:end="111:37"><expr pos:start="111:34" pos:end="111:37"><name pos:start="111:34" pos:end="111:34">x</name><operator pos:start="111:35" pos:end="111:35">+</operator><literal type="number" pos:start="111:36" pos:end="111:37">32</literal></expr></argument>, <argument pos:start="111:40" pos:end="111:47"><expr pos:start="111:40" pos:end="111:47"><name pos:start="111:40" pos:end="111:47">mb_count</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="111:51" pos:end="111:53"><expr pos:start="111:51" pos:end="111:53"><name pos:start="111:51" pos:end="111:51">y</name><operator pos:start="111:52" pos:end="111:53">++</operator></expr></incr>)</control> <block pos:start="111:56" pos:end="127:13">{<block_content pos:start="113:17" pos:end="125:58">

                <expr_stmt pos:start="113:17" pos:end="113:31"><expr pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:18">mb</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <operator pos:start="113:22" pos:end="113:22">&amp;</operator><name pos:start="113:23" pos:end="113:30"><name pos:start="113:23" pos:end="113:23">s</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:27">mb</name><index pos:start="113:28" pos:end="113:30">[<expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">y</name></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="117:17" pos:end="125:58"><if pos:start="117:17" pos:end="119:47">if<condition pos:start="117:19" pos:end="117:47">(<expr pos:start="117:20" pos:end="117:46"><name pos:start="117:20" pos:end="117:36"><name pos:start="117:20" pos:end="117:21">mb</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:36">best_encoding</name></name> <operator pos:start="117:38" pos:end="117:39">==</operator> <name pos:start="117:41" pos:end="117:46">ENC_V1</name></expr>)</condition><block type="pseudo" pos:start="119:21" pos:end="119:47"><block_content pos:start="119:21" pos:end="119:47">

                    <expr_stmt pos:start="119:21" pos:end="119:47"><expr pos:start="119:21" pos:end="119:46"><name pos:start="119:21" pos:end="119:30"><name pos:start="119:21" pos:end="119:23">buf</name><index pos:start="119:24" pos:end="119:30">[<expr pos:start="119:25" pos:end="119:29"><name pos:start="119:25" pos:end="119:27">ret</name><operator pos:start="119:28" pos:end="119:29">++</operator></expr>]</index></name> <operator pos:start="119:32" pos:end="119:32">=</operator> <name pos:start="119:34" pos:end="119:46"><name pos:start="119:34" pos:end="119:35">mb</name><operator pos:start="119:36" pos:end="119:37">-&gt;</operator><name pos:start="119:38" pos:end="119:46">v1_vector</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="121:17" pos:end="125:58">else<block type="pseudo" pos:start="123:21" pos:end="125:58"><block_content pos:start="123:21" pos:end="125:58">

                    <for pos:start="123:21" pos:end="125:58">for<control pos:start="123:24" pos:end="123:42">(<init pos:start="123:25" pos:end="123:30"><expr pos:start="123:25" pos:end="123:29"><name pos:start="123:25" pos:end="123:25">z</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <literal type="number" pos:start="123:29" pos:end="123:29">0</literal></expr>;</init> <condition pos:start="123:32" pos:end="123:37"><expr pos:start="123:32" pos:end="123:36"><name pos:start="123:32" pos:end="123:32">z</name> <operator pos:start="123:34" pos:end="123:34">&lt;</operator> <literal type="number" pos:start="123:36" pos:end="123:36">4</literal></expr>;</condition> <incr pos:start="123:39" pos:end="123:41"><expr pos:start="123:39" pos:end="123:41"><name pos:start="123:39" pos:end="123:39">z</name><operator pos:start="123:40" pos:end="123:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="125:25" pos:end="125:58"><block_content pos:start="125:25" pos:end="125:58">

                        <expr_stmt pos:start="125:25" pos:end="125:58"><expr pos:start="125:25" pos:end="125:57"><name pos:start="125:25" pos:end="125:34"><name pos:start="125:25" pos:end="125:27">buf</name><index pos:start="125:28" pos:end="125:34">[<expr pos:start="125:29" pos:end="125:33"><name pos:start="125:29" pos:end="125:31">ret</name><operator pos:start="125:32" pos:end="125:33">++</operator></expr>]</index></name> <operator pos:start="125:36" pos:end="125:36">=</operator> <name pos:start="125:38" pos:end="125:57"><name pos:start="125:38" pos:end="125:39">mb</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:50">v4_vector</name><index pos:start="125:51" pos:end="125:54">[<expr pos:start="125:52" pos:end="125:53"><name pos:start="125:52" pos:end="125:53">v4</name></expr>]</index><index pos:start="125:55" pos:end="125:57">[<expr pos:start="125:56" pos:end="125:56"><name pos:start="125:56" pos:end="125:56">z</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="133:9" pos:end="133:89"><expr pos:start="133:9" pos:end="133:88"><call pos:start="133:9" pos:end="133:88"><name pos:start="133:9" pos:end="133:26">write_chunk_header</name><argument_list pos:start="133:27" pos:end="133:88">(<argument pos:start="133:28" pos:end="133:43"><expr pos:start="133:28" pos:end="133:43"><name pos:start="133:28" pos:end="133:30">buf</name> <operator pos:start="133:32" pos:end="133:32">+</operator> <name pos:start="133:34" pos:end="133:43">header_ofs</name></expr></argument>, <argument pos:start="133:46" pos:end="133:49"><expr pos:start="133:46" pos:end="133:49"><literal type="number" pos:start="133:46" pos:end="133:49">0x30</literal></expr></argument>, <argument pos:start="133:52" pos:end="133:87"><expr pos:start="133:52" pos:end="133:87"><name pos:start="133:52" pos:end="133:54">ret</name> <operator pos:start="133:56" pos:end="133:56">-</operator> <name pos:start="133:58" pos:end="133:67">header_ofs</name> <operator pos:start="133:69" pos:end="133:69">-</operator> <name pos:start="133:71" pos:end="133:87">CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:17">case <expr pos:start="139:10" pos:end="139:16"><name pos:start="139:10" pos:end="139:16">MODE_MC</name></expr>:</case>

        <comment type="line" pos:start="141:9" pos:end="141:34">//remember header position</comment>

        <expr_stmt pos:start="143:9" pos:end="143:25"><expr pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:18">header_ofs</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:24">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:33"><expr pos:start="145:9" pos:end="145:32"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:14">+=</operator> <name pos:start="145:16" pos:end="145:32">CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:37"><expr pos:start="147:9" pos:end="147:36"><name pos:start="147:9" pos:end="147:13">flags</name> <operator pos:start="147:15" pos:end="147:15">=</operator> <name pos:start="147:17" pos:end="147:20">bits</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:32">temp_size</name> <operator pos:start="147:34" pos:end="147:34">=</operator> <literal type="number" pos:start="147:36" pos:end="147:36">0</literal></expr>;</expr_stmt>



        <for pos:start="151:9" pos:end="235:9">for<control pos:start="151:12" pos:end="151:37">(<init pos:start="151:13" pos:end="151:18"><expr pos:start="151:13" pos:end="151:17"><name pos:start="151:13" pos:end="151:13">x</name> <operator pos:start="151:15" pos:end="151:15">=</operator> <literal type="number" pos:start="151:17" pos:end="151:17">0</literal></expr>;</init> <condition pos:start="151:20" pos:end="151:32"><expr pos:start="151:20" pos:end="151:31"><name pos:start="151:20" pos:end="151:20">x</name> <operator pos:start="151:22" pos:end="151:22">&lt;</operator> <name pos:start="151:24" pos:end="151:31">mb_count</name></expr>;</condition> <incr pos:start="151:34" pos:end="151:36"><expr pos:start="151:34" pos:end="151:36"><name pos:start="151:34" pos:end="151:34">x</name><operator pos:start="151:35" pos:end="151:36">++</operator></expr></incr>)</control> <block pos:start="151:39" pos:end="235:9">{<block_content pos:start="153:13" pos:end="233:13">

            <expr_stmt pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:14">mb</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <operator pos:start="153:18" pos:end="153:18">&amp;</operator><name pos:start="153:19" pos:end="153:26"><name pos:start="153:19" pos:end="153:19">s</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:23">mb</name><index pos:start="153:24" pos:end="153:26">[<expr pos:start="153:25" pos:end="153:25"><name pos:start="153:25" pos:end="153:25">x</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:70"><expr pos:start="155:13" pos:end="155:69"><name pos:start="155:13" pos:end="155:17">flags</name> <operator pos:start="155:19" pos:end="155:20">|=</operator> <operator pos:start="155:22" pos:end="155:22">(</operator><name pos:start="155:23" pos:end="155:39"><name pos:start="155:23" pos:end="155:24">mb</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:39">best_encoding</name></name> <operator pos:start="155:41" pos:end="155:42">!=</operator> <name pos:start="155:44" pos:end="155:51">ENC_SKIP</name><operator pos:start="155:52" pos:end="155:52">)</operator> <operator pos:start="155:54" pos:end="155:55">&lt;&lt;</operator> <operator pos:start="155:57" pos:end="155:57">(</operator><literal type="number" pos:start="155:58" pos:end="155:61">31</literal> <operator pos:start="155:61" pos:end="155:61">-</operator> <name pos:start="155:63" pos:end="155:66">bits</name><operator pos:start="155:67" pos:end="155:68">++</operator><operator pos:start="155:69" pos:end="155:69">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:32"><expr pos:start="157:13" pos:end="157:31"><name pos:start="157:13" pos:end="157:27">needs_extra_bit</name> <operator pos:start="157:29" pos:end="157:29">=</operator> <literal type="number" pos:start="157:31" pos:end="157:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:34"><expr pos:start="159:13" pos:end="159:33"><name pos:start="159:13" pos:end="159:29">should_write_temp</name> <operator pos:start="159:31" pos:end="159:31">=</operator> <literal type="number" pos:start="159:33" pos:end="159:33">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="163:13" pos:end="173:13"><if pos:start="163:13" pos:end="173:13">if<condition pos:start="163:15" pos:end="163:45">(<expr pos:start="163:16" pos:end="163:44"><name pos:start="163:16" pos:end="163:32"><name pos:start="163:16" pos:end="163:17">mb</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:32">best_encoding</name></name> <operator pos:start="163:34" pos:end="163:35">!=</operator> <name pos:start="163:37" pos:end="163:44">ENC_SKIP</name></expr>)</condition> <block pos:start="163:47" pos:end="173:13">{<block_content pos:start="165:17" pos:end="171:40">

                <if_stmt pos:start="165:17" pos:end="171:40"><if pos:start="165:17" pos:end="167:76">if<condition pos:start="165:19" pos:end="165:29">(<expr pos:start="165:20" pos:end="165:28"><name pos:start="165:20" pos:end="165:23">bits</name> <operator pos:start="165:25" pos:end="165:25">&lt;</operator> <literal type="number" pos:start="165:27" pos:end="165:28">32</literal></expr>)</condition><block type="pseudo" pos:start="167:21" pos:end="167:76"><block_content pos:start="167:21" pos:end="167:76">

                    <expr_stmt pos:start="167:21" pos:end="167:76"><expr pos:start="167:21" pos:end="167:75"><name pos:start="167:21" pos:end="167:25">flags</name> <operator pos:start="167:27" pos:end="167:28">|=</operator> <operator pos:start="167:30" pos:end="167:30">(</operator><name pos:start="167:31" pos:end="167:47"><name pos:start="167:31" pos:end="167:32">mb</name><operator pos:start="167:33" pos:end="167:34">-&gt;</operator><name pos:start="167:35" pos:end="167:47">best_encoding</name></name> <operator pos:start="167:49" pos:end="167:50">==</operator> <name pos:start="167:52" pos:end="167:57">ENC_V4</name><operator pos:start="167:58" pos:end="167:58">)</operator> <operator pos:start="167:60" pos:end="167:61">&lt;&lt;</operator> <operator pos:start="167:63" pos:end="167:63">(</operator><literal type="number" pos:start="167:64" pos:end="167:67">31</literal> <operator pos:start="167:67" pos:end="167:67">-</operator> <name pos:start="167:69" pos:end="167:72">bits</name><operator pos:start="167:73" pos:end="167:74">++</operator><operator pos:start="167:75" pos:end="167:75">)</operator></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="169:17" pos:end="171:40">else<block type="pseudo" pos:start="171:21" pos:end="171:40"><block_content pos:start="171:21" pos:end="171:40">

                    <expr_stmt pos:start="171:21" pos:end="171:40"><expr pos:start="171:21" pos:end="171:39"><name pos:start="171:21" pos:end="171:35">needs_extra_bit</name> <operator pos:start="171:37" pos:end="171:37">=</operator> <literal type="number" pos:start="171:39" pos:end="171:39">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="177:13" pos:end="199:13"><if pos:start="177:13" pos:end="199:13">if<condition pos:start="177:15" pos:end="177:26">(<expr pos:start="177:16" pos:end="177:25"><name pos:start="177:16" pos:end="177:19">bits</name> <operator pos:start="177:21" pos:end="177:22">==</operator> <literal type="number" pos:start="177:24" pos:end="177:25">32</literal></expr>)</condition> <block pos:start="177:28" pos:end="199:13">{<block_content pos:start="179:17" pos:end="197:42">

                <expr_stmt pos:start="179:17" pos:end="179:42"><expr pos:start="179:17" pos:end="179:41"><call pos:start="179:17" pos:end="179:41"><name pos:start="179:17" pos:end="179:23">AV_WB32</name><argument_list pos:start="179:24" pos:end="179:41">(<argument pos:start="179:25" pos:end="179:33"><expr pos:start="179:25" pos:end="179:33"><operator pos:start="179:25" pos:end="179:25">&amp;</operator><name pos:start="179:26" pos:end="179:33"><name pos:start="179:26" pos:end="179:28">buf</name><index pos:start="179:29" pos:end="179:33">[<expr pos:start="179:30" pos:end="179:32"><name pos:start="179:30" pos:end="179:32">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="179:36" pos:end="179:40"><expr pos:start="179:36" pos:end="179:40"><name pos:start="179:36" pos:end="179:40">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:25"><expr pos:start="181:17" pos:end="181:24"><name pos:start="181:17" pos:end="181:19">ret</name> <operator pos:start="181:21" pos:end="181:22">+=</operator> <literal type="number" pos:start="181:24" pos:end="181:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:33"><expr pos:start="183:17" pos:end="183:32"><name pos:start="183:17" pos:end="183:21">flags</name> <operator pos:start="183:23" pos:end="183:23">=</operator> <name pos:start="183:25" pos:end="183:28">bits</name> <operator pos:start="183:30" pos:end="183:30">=</operator> <literal type="number" pos:start="183:32" pos:end="183:32">0</literal></expr>;</expr_stmt>



                <if_stmt pos:start="187:17" pos:end="197:42"><if pos:start="187:17" pos:end="195:17">if<condition pos:start="187:19" pos:end="187:68">(<expr pos:start="187:20" pos:end="187:67"><name pos:start="187:20" pos:end="187:36"><name pos:start="187:20" pos:end="187:21">mb</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:36">best_encoding</name></name> <operator pos:start="187:38" pos:end="187:39">==</operator> <name pos:start="187:41" pos:end="187:48">ENC_SKIP</name> <operator pos:start="187:50" pos:end="187:51">||</operator> <name pos:start="187:53" pos:end="187:67">needs_extra_bit</name></expr>)</condition> <block pos:start="187:70" pos:end="195:17">{<block_content pos:start="189:21" pos:end="193:34">

                    <expr_stmt pos:start="189:21" pos:end="189:55"><expr pos:start="189:21" pos:end="189:54"><call pos:start="189:21" pos:end="189:54"><name pos:start="189:21" pos:end="189:26">memcpy</name><argument_list pos:start="189:27" pos:end="189:54">(<argument pos:start="189:28" pos:end="189:36"><expr pos:start="189:28" pos:end="189:36"><operator pos:start="189:28" pos:end="189:28">&amp;</operator><name pos:start="189:29" pos:end="189:36"><name pos:start="189:29" pos:end="189:31">buf</name><index pos:start="189:32" pos:end="189:36">[<expr pos:start="189:33" pos:end="189:35"><name pos:start="189:33" pos:end="189:35">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="189:39" pos:end="189:42"><expr pos:start="189:39" pos:end="189:42"><name pos:start="189:39" pos:end="189:42">temp</name></expr></argument>, <argument pos:start="189:45" pos:end="189:53"><expr pos:start="189:45" pos:end="189:53"><name pos:start="189:45" pos:end="189:53">temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:37"><expr pos:start="191:21" pos:end="191:36"><name pos:start="191:21" pos:end="191:23">ret</name> <operator pos:start="191:25" pos:end="191:26">+=</operator> <name pos:start="191:28" pos:end="191:36">temp_size</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:34"><expr pos:start="193:21" pos:end="193:33"><name pos:start="193:21" pos:end="193:29">temp_size</name> <operator pos:start="193:31" pos:end="193:31">=</operator> <literal type="number" pos:start="193:33" pos:end="193:33">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="195:19" pos:end="197:42">else<block type="pseudo" pos:start="197:21" pos:end="197:42"><block_content pos:start="197:21" pos:end="197:42">

                    <expr_stmt pos:start="197:21" pos:end="197:42"><expr pos:start="197:21" pos:end="197:41"><name pos:start="197:21" pos:end="197:37">should_write_temp</name> <operator pos:start="197:39" pos:end="197:39">=</operator> <literal type="number" pos:start="197:41" pos:end="197:41">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="203:13" pos:end="209:13"><if pos:start="203:13" pos:end="209:13">if<condition pos:start="203:15" pos:end="203:31">(<expr pos:start="203:16" pos:end="203:30"><name pos:start="203:16" pos:end="203:30">needs_extra_bit</name></expr>)</condition> <block pos:start="203:33" pos:end="209:13">{<block_content pos:start="205:17" pos:end="207:25">

                <expr_stmt pos:start="205:17" pos:end="205:60"><expr pos:start="205:17" pos:end="205:59"><name pos:start="205:17" pos:end="205:21">flags</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <operator pos:start="205:25" pos:end="205:25">(</operator><name pos:start="205:26" pos:end="205:42"><name pos:start="205:26" pos:end="205:27">mb</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:42">best_encoding</name></name> <operator pos:start="205:44" pos:end="205:45">==</operator> <name pos:start="205:47" pos:end="205:52">ENC_V4</name><operator pos:start="205:53" pos:end="205:53">)</operator> <operator pos:start="205:55" pos:end="205:56">&lt;&lt;</operator> <literal type="number" pos:start="205:58" pos:end="205:59">31</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:25"><expr pos:start="207:17" pos:end="207:24"><name pos:start="207:17" pos:end="207:20">bits</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <literal type="number" pos:start="207:24" pos:end="207:24">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="213:13" pos:end="221:61"><if pos:start="213:13" pos:end="215:50">if<condition pos:start="213:15" pos:end="213:43">(<expr pos:start="213:16" pos:end="213:42"><name pos:start="213:16" pos:end="213:32"><name pos:start="213:16" pos:end="213:17">mb</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:32">best_encoding</name></name> <operator pos:start="213:34" pos:end="213:35">==</operator> <name pos:start="213:37" pos:end="213:42">ENC_V1</name></expr>)</condition><block type="pseudo" pos:start="215:17" pos:end="215:50"><block_content pos:start="215:17" pos:end="215:50">

                <expr_stmt pos:start="215:17" pos:end="215:50"><expr pos:start="215:17" pos:end="215:49"><name pos:start="215:17" pos:end="215:33"><name pos:start="215:17" pos:end="215:20">temp</name><index pos:start="215:21" pos:end="215:33">[<expr pos:start="215:22" pos:end="215:32"><name pos:start="215:22" pos:end="215:30">temp_size</name><operator pos:start="215:31" pos:end="215:32">++</operator></expr>]</index></name> <operator pos:start="215:35" pos:end="215:35">=</operator> <name pos:start="215:37" pos:end="215:49"><name pos:start="215:37" pos:end="215:38">mb</name><operator pos:start="215:39" pos:end="215:40">-&gt;</operator><name pos:start="215:41" pos:end="215:49">v1_vector</name></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="217:13" pos:end="221:61">else if<condition pos:start="217:20" pos:end="217:48">(<expr pos:start="217:21" pos:end="217:47"><name pos:start="217:21" pos:end="217:37"><name pos:start="217:21" pos:end="217:22">mb</name><operator pos:start="217:23" pos:end="217:24">-&gt;</operator><name pos:start="217:25" pos:end="217:37">best_encoding</name></name> <operator pos:start="217:39" pos:end="217:40">==</operator> <name pos:start="217:42" pos:end="217:47">ENC_V4</name></expr>)</condition><block type="pseudo" pos:start="219:17" pos:end="221:61"><block_content pos:start="219:17" pos:end="221:61">

                <for pos:start="219:17" pos:end="221:61">for<control pos:start="219:20" pos:end="219:38">(<init pos:start="219:21" pos:end="219:26"><expr pos:start="219:21" pos:end="219:25"><name pos:start="219:21" pos:end="219:21">z</name> <operator pos:start="219:23" pos:end="219:23">=</operator> <literal type="number" pos:start="219:25" pos:end="219:25">0</literal></expr>;</init> <condition pos:start="219:28" pos:end="219:33"><expr pos:start="219:28" pos:end="219:32"><name pos:start="219:28" pos:end="219:28">z</name> <operator pos:start="219:30" pos:end="219:30">&lt;</operator> <literal type="number" pos:start="219:32" pos:end="219:32">4</literal></expr>;</condition> <incr pos:start="219:35" pos:end="219:37"><expr pos:start="219:35" pos:end="219:37"><name pos:start="219:35" pos:end="219:35">z</name><operator pos:start="219:36" pos:end="219:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="221:21" pos:end="221:61"><block_content pos:start="221:21" pos:end="221:61">

                    <expr_stmt pos:start="221:21" pos:end="221:61"><expr pos:start="221:21" pos:end="221:60"><name pos:start="221:21" pos:end="221:37"><name pos:start="221:21" pos:end="221:24">temp</name><index pos:start="221:25" pos:end="221:37">[<expr pos:start="221:26" pos:end="221:36"><name pos:start="221:26" pos:end="221:34">temp_size</name><operator pos:start="221:35" pos:end="221:36">++</operator></expr>]</index></name> <operator pos:start="221:39" pos:end="221:39">=</operator> <name pos:start="221:41" pos:end="221:60"><name pos:start="221:41" pos:end="221:42">mb</name><operator pos:start="221:43" pos:end="221:44">-&gt;</operator><name pos:start="221:45" pos:end="221:53">v4_vector</name><index pos:start="221:54" pos:end="221:57">[<expr pos:start="221:55" pos:end="221:56"><name pos:start="221:55" pos:end="221:56">v4</name></expr>]</index><index pos:start="221:58" pos:end="221:60">[<expr pos:start="221:59" pos:end="221:59"><name pos:start="221:59" pos:end="221:59">z</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



            <if_stmt pos:start="225:13" pos:end="233:13"><if pos:start="225:13" pos:end="233:13">if<condition pos:start="225:15" pos:end="225:33">(<expr pos:start="225:16" pos:end="225:32"><name pos:start="225:16" pos:end="225:32">should_write_temp</name></expr>)</condition> <block pos:start="225:35" pos:end="233:13">{<block_content pos:start="227:17" pos:end="231:30">

                <expr_stmt pos:start="227:17" pos:end="227:51"><expr pos:start="227:17" pos:end="227:50"><call pos:start="227:17" pos:end="227:50"><name pos:start="227:17" pos:end="227:22">memcpy</name><argument_list pos:start="227:23" pos:end="227:50">(<argument pos:start="227:24" pos:end="227:32"><expr pos:start="227:24" pos:end="227:32"><operator pos:start="227:24" pos:end="227:24">&amp;</operator><name pos:start="227:25" pos:end="227:32"><name pos:start="227:25" pos:end="227:27">buf</name><index pos:start="227:28" pos:end="227:32">[<expr pos:start="227:29" pos:end="227:31"><name pos:start="227:29" pos:end="227:31">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="227:35" pos:end="227:38"><expr pos:start="227:35" pos:end="227:38"><name pos:start="227:35" pos:end="227:38">temp</name></expr></argument>, <argument pos:start="227:41" pos:end="227:49"><expr pos:start="227:41" pos:end="227:49"><name pos:start="227:41" pos:end="227:49">temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:33"><expr pos:start="229:17" pos:end="229:32"><name pos:start="229:17" pos:end="229:19">ret</name> <operator pos:start="229:21" pos:end="229:22">+=</operator> <name pos:start="229:24" pos:end="229:32">temp_size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:30"><expr pos:start="231:17" pos:end="231:29"><name pos:start="231:17" pos:end="231:25">temp_size</name> <operator pos:start="231:27" pos:end="231:27">=</operator> <literal type="number" pos:start="231:29" pos:end="231:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="239:9" pos:end="249:9"><if pos:start="239:9" pos:end="249:9">if<condition pos:start="239:11" pos:end="239:20">(<expr pos:start="239:12" pos:end="239:19"><name pos:start="239:12" pos:end="239:15">bits</name> <operator pos:start="239:17" pos:end="239:17">&gt;</operator> <literal type="number" pos:start="239:19" pos:end="239:19">0</literal></expr>)</condition> <block pos:start="239:22" pos:end="249:9">{<block_content pos:start="241:13" pos:end="247:29">

            <expr_stmt pos:start="241:13" pos:end="241:38"><expr pos:start="241:13" pos:end="241:37"><call pos:start="241:13" pos:end="241:37"><name pos:start="241:13" pos:end="241:19">AV_WB32</name><argument_list pos:start="241:20" pos:end="241:37">(<argument pos:start="241:21" pos:end="241:29"><expr pos:start="241:21" pos:end="241:29"><operator pos:start="241:21" pos:end="241:21">&amp;</operator><name pos:start="241:22" pos:end="241:29"><name pos:start="241:22" pos:end="241:24">buf</name><index pos:start="241:25" pos:end="241:29">[<expr pos:start="241:26" pos:end="241:28"><name pos:start="241:26" pos:end="241:28">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="241:32" pos:end="241:36"><expr pos:start="241:32" pos:end="241:36"><name pos:start="241:32" pos:end="241:36">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:21"><expr pos:start="243:13" pos:end="243:20"><name pos:start="243:13" pos:end="243:15">ret</name> <operator pos:start="243:17" pos:end="243:18">+=</operator> <literal type="number" pos:start="243:20" pos:end="243:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:47"><expr pos:start="245:13" pos:end="245:46"><call pos:start="245:13" pos:end="245:46"><name pos:start="245:13" pos:end="245:18">memcpy</name><argument_list pos:start="245:19" pos:end="245:46">(<argument pos:start="245:20" pos:end="245:28"><expr pos:start="245:20" pos:end="245:28"><operator pos:start="245:20" pos:end="245:20">&amp;</operator><name pos:start="245:21" pos:end="245:28"><name pos:start="245:21" pos:end="245:23">buf</name><index pos:start="245:24" pos:end="245:28">[<expr pos:start="245:25" pos:end="245:27"><name pos:start="245:25" pos:end="245:27">ret</name></expr>]</index></name></expr></argument>, <argument pos:start="245:31" pos:end="245:34"><expr pos:start="245:31" pos:end="245:34"><name pos:start="245:31" pos:end="245:34">temp</name></expr></argument>, <argument pos:start="245:37" pos:end="245:45"><expr pos:start="245:37" pos:end="245:45"><name pos:start="245:37" pos:end="245:45">temp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:29"><expr pos:start="247:13" pos:end="247:28"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:18">+=</operator> <name pos:start="247:20" pos:end="247:28">temp_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="253:9" pos:end="253:89"><expr pos:start="253:9" pos:end="253:88"><call pos:start="253:9" pos:end="253:88"><name pos:start="253:9" pos:end="253:26">write_chunk_header</name><argument_list pos:start="253:27" pos:end="253:88">(<argument pos:start="253:28" pos:end="253:43"><expr pos:start="253:28" pos:end="253:43"><name pos:start="253:28" pos:end="253:30">buf</name> <operator pos:start="253:32" pos:end="253:32">+</operator> <name pos:start="253:34" pos:end="253:43">header_ofs</name></expr></argument>, <argument pos:start="253:46" pos:end="253:49"><expr pos:start="253:46" pos:end="253:49"><literal type="number" pos:start="253:46" pos:end="253:49">0x31</literal></expr></argument>, <argument pos:start="253:52" pos:end="253:87"><expr pos:start="253:52" pos:end="253:87"><name pos:start="253:52" pos:end="253:54">ret</name> <operator pos:start="253:56" pos:end="253:56">-</operator> <name pos:start="253:58" pos:end="253:67">header_ofs</name> <operator pos:start="253:69" pos:end="253:69">-</operator> <name pos:start="253:71" pos:end="253:87">CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <break pos:start="257:9" pos:end="257:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="263:5" pos:end="263:15">return <expr pos:start="263:12" pos:end="263:14"><name pos:start="263:12" pos:end="263:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
