<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19515.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">add_boot_device_path</name><parameter_list pos:start="1:26" pos:end="3:45">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:33">int32_t</name></type> <name pos:start="1:35" pos:end="1:43">bootindex</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:56">DeviceState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">dev</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:44"><decl pos:start="3:27" pos:end="3:44"><type pos:start="3:27" pos:end="3:44"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:44">suffix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:51">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">FWBootEntry</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">node</name></decl>, <decl pos:start="7:24" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:17"><modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:17">bootindex</name> <operator pos:start="11:19" pos:end="11:19">&lt;</operator> <literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr>)</condition> <block pos:start="11:24" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:41">(<argument pos:start="19:12" pos:end="19:40"><expr pos:start="19:12" pos:end="19:40"><name pos:start="19:12" pos:end="19:14">dev</name> <operator pos:start="19:16" pos:end="19:17">!=</operator> <name pos:start="19:19" pos:end="19:22">NULL</name> <operator pos:start="19:24" pos:end="19:25">||</operator> <name pos:start="19:27" pos:end="19:32">suffix</name> <operator pos:start="19:34" pos:end="19:35">!=</operator> <name pos:start="19:37" pos:end="19:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:8">node</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:41"><name pos:start="23:12" pos:end="23:20">g_malloc0</name><argument_list pos:start="23:21" pos:end="23:41">(<argument pos:start="23:22" pos:end="23:40"><expr pos:start="23:22" pos:end="23:40"><sizeof pos:start="23:22" pos:end="23:40">sizeof<argument_list pos:start="23:28" pos:end="23:40">(<argument pos:start="23:29" pos:end="23:39"><expr pos:start="23:29" pos:end="23:39"><name pos:start="23:29" pos:end="23:39">FWBootEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:8">node</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:19">bootindex</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:31">bootindex</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:52"><expr pos:start="27:5" pos:end="27:51"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:8">node</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:16">suffix</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <ternary pos:start="27:20" pos:end="27:51"><condition pos:start="27:20" pos:end="27:27"><expr pos:start="27:20" pos:end="27:25"><name pos:start="27:20" pos:end="27:25">suffix</name></expr> ?</condition><then pos:start="27:29" pos:end="27:44"> <expr pos:start="27:29" pos:end="27:44"><call pos:start="27:29" pos:end="27:44"><name pos:start="27:29" pos:end="27:36">g_strdup</name><argument_list pos:start="27:37" pos:end="27:44">(<argument pos:start="27:38" pos:end="27:43"><expr pos:start="27:38" pos:end="27:43"><name pos:start="27:38" pos:end="27:43">suffix</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="27:46" pos:end="27:51">: <expr pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:8">node</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:13">dev</name></name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:19">dev</name></expr>;</expr_stmt>



    <macro pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:18">QTAILQ_FOREACH</name><argument_list pos:start="33:19" pos:end="33:43">(<argument pos:start="33:20" pos:end="33:20">i</argument>, <argument pos:start="33:23" pos:end="33:36">&amp;fw_boot_order</argument>, <argument pos:start="33:39" pos:end="33:42">link</argument>)</argument_list></macro> <block pos:start="33:45" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:15">

        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:38">(<expr pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:13">i</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:24">bootindex</name></name> <operator pos:start="35:26" pos:end="35:27">==</operator> <name pos:start="35:29" pos:end="35:37">bootindex</name></expr>)</condition> <block pos:start="35:40" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:20">

            <expr_stmt pos:start="37:13" pos:end="37:80"><expr pos:start="37:13" pos:end="37:79"><call pos:start="37:13" pos:end="37:79"><name pos:start="37:13" pos:end="37:19">fprintf</name><argument_list pos:start="37:20" pos:end="37:79">(<argument pos:start="37:21" pos:end="37:26"><expr pos:start="37:21" pos:end="37:26"><name pos:start="37:21" pos:end="37:26">stderr</name></expr></argument>, <argument pos:start="37:29" pos:end="37:67"><expr pos:start="37:29" pos:end="37:67"><literal type="string" pos:start="37:29" pos:end="37:67">"Two devices with same boot index %d\n"</literal></expr></argument>, <argument pos:start="37:70" pos:end="37:78"><expr pos:start="37:70" pos:end="37:78"><name pos:start="37:70" pos:end="37:78">bootindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:20"><expr pos:start="39:13" pos:end="39:19"><call pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:16">exit</name><argument_list pos:start="39:17" pos:end="39:19">(<argument pos:start="39:18" pos:end="39:18"><expr pos:start="39:18" pos:end="39:18"><literal type="number" pos:start="39:18" pos:end="39:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="45:9">else if <condition pos:start="41:19" pos:end="41:44">(<expr pos:start="41:20" pos:end="41:43"><name pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:20">i</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:31">bootindex</name></name> <operator pos:start="41:33" pos:end="41:33">&lt;</operator> <name pos:start="41:35" pos:end="41:43">bootindex</name></expr>)</condition> <block pos:start="41:46" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:21">

            <continue pos:start="43:13" pos:end="43:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><call pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:28">QTAILQ_INSERT_BEFORE</name><argument_list pos:start="47:29" pos:end="47:43">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">i</name></expr></argument>, <argument pos:start="47:33" pos:end="47:36"><expr pos:start="47:33" pos:end="47:36"><name pos:start="47:33" pos:end="47:36">node</name></expr></argument>, <argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><name pos:start="47:39" pos:end="47:42">link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block>

    <expr_stmt pos:start="53:5" pos:end="53:51"><expr pos:start="53:5" pos:end="53:50"><call pos:start="53:5" pos:end="53:50"><name pos:start="53:5" pos:end="53:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="53:23" pos:end="53:50">(<argument pos:start="53:24" pos:end="53:37"><expr pos:start="53:24" pos:end="53:37"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:37">fw_boot_order</name></expr></argument>, <argument pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:43">node</name></expr></argument>, <argument pos:start="53:46" pos:end="53:49"><expr pos:start="53:46" pos:end="53:49"><name pos:start="53:46" pos:end="53:49">link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
