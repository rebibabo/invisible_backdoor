<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10645.c" pos:tabs="8"><function pos:start="1:1" pos:end="668:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">flic_decode_frame_8BPP</name><parameter_list pos:start="1:34" pos:end="5:67">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:38">void</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">data</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:60"><decl pos:start="3:47" pos:end="3:60"><type pos:start="3:47" pos:end="3:60"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:60">got_frame</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:52"><decl pos:start="5:35" pos:end="5:52"><type pos:start="5:35" pos:end="5:52"><specifier pos:start="5:35" pos:end="5:39">const</specifier> <name pos:start="5:41" pos:end="5:47">uint8_t</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:52">buf</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:66"><decl pos:start="5:55" pos:end="5:66"><type pos:start="5:55" pos:end="5:66"><name pos:start="5:55" pos:end="5:57">int</name></type> <name pos:start="5:59" pos:end="5:66">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="668:1">{<block_content pos:start="9:5" pos:end="666:20">

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">FlicDecodeContext</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">s</name> <init pos:start="9:26" pos:end="9:43">= <expr pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:32">avctx</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:43">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">GetByteContext</name></type> <name pos:start="13:20" pos:end="13:21">g2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">palette_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">char</name></type> <name pos:start="19:19" pos:end="19:30">palette_idx1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:30">palette_idx2</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:16">int</name></type> <name pos:start="25:18" pos:end="25:27">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">num_chunks</name></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:16">int</name></type> <name pos:start="31:18" pos:end="31:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:18">chunk_type</name></decl>;</decl_stmt>



    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>, <decl pos:start="37:12" pos:end="37:12"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:12">j</name></decl>, <decl pos:start="37:15" pos:end="37:17"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:15" pos:end="37:17">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:21">color_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:21">color_changes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:19">color_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:26"><decl pos:start="47:5" pos:end="47:19"><type pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:12">unsigned</name> <name pos:start="47:14" pos:end="47:17">char</name></type> <name pos:start="47:19" pos:end="47:19">r</name></decl>, <decl pos:start="47:22" pos:end="47:22"><type ref="prev" pos:start="47:5" pos:end="47:17"/><name pos:start="47:22" pos:end="47:22">g</name></decl>, <decl pos:start="47:25" pos:end="47:25"><type ref="prev" pos:start="47:5" pos:end="47:17"/><name pos:start="47:25" pos:end="47:25">b</name></decl>;</decl_stmt>



    <decl_stmt pos:start="51:5" pos:end="51:14"><decl pos:start="51:5" pos:end="51:13"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:13">lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:25"><decl pos:start="53:5" pos:end="53:24"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:24">compressed_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:22"><decl pos:start="55:5" pos:end="55:21"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:21">starting_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:30"><decl pos:start="57:5" pos:end="57:29"><type pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:10">signed</name> <name pos:start="57:12" pos:end="57:16">short</name></type> <name pos:start="57:18" pos:end="57:29">line_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:14"><decl pos:start="59:5" pos:end="59:13"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:13">y_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:17"><decl pos:start="61:5" pos:end="61:16"><type pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:7">int</name></type> <name pos:start="61:9" pos:end="61:16">byte_run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:19"><decl pos:start="63:5" pos:end="63:18"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:18">pixel_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:24"><decl pos:start="65:5" pos:end="65:23"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:23">pixel_countdown</name></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:26"><decl pos:start="67:5" pos:end="67:25"><type pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:12">unsigned</name> <name pos:start="67:14" pos:end="67:17">char</name> <modifier pos:start="67:19" pos:end="67:19">*</modifier></type><name pos:start="67:20" pos:end="67:25">pixels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="69:5" pos:end="69:29"><decl pos:start="69:5" pos:end="69:28"><type pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:12">unsigned</name> <name pos:start="69:14" pos:end="69:16">int</name></type> <name pos:start="69:18" pos:end="69:28">pixel_limit</name></decl>;</decl_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:41"><expr pos:start="73:5" pos:end="73:40"><call pos:start="73:5" pos:end="73:40"><name pos:start="73:5" pos:end="73:20">bytestream2_init</name><argument_list pos:start="73:21" pos:end="73:40">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><operator pos:start="73:22" pos:end="73:22">&amp;</operator><name pos:start="73:23" pos:end="73:24">g2</name></expr></argument>, <argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">buf</name></expr></argument>, <argument pos:start="73:32" pos:end="73:39"><expr pos:start="73:32" pos:end="73:39"><name pos:start="73:32" pos:end="73:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="79:19"><if pos:start="77:5" pos:end="79:19">if <condition pos:start="77:8" pos:end="77:53">(<expr pos:start="77:9" pos:end="77:52"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:12">ret</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:47"><name pos:start="77:16" pos:end="77:30">ff_reget_buffer</name><argument_list pos:start="77:31" pos:end="77:47">(<argument pos:start="77:32" pos:end="77:36"><expr pos:start="77:32" pos:end="77:36"><name pos:start="77:32" pos:end="77:36">avctx</name></expr></argument>, <argument pos:start="77:39" pos:end="77:46"><expr pos:start="77:39" pos:end="77:46"><name pos:start="77:39" pos:end="77:46"><name pos:start="77:39" pos:end="77:39">s</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="77:48" pos:end="77:48">)</operator> <operator pos:start="77:50" pos:end="77:50">&lt;</operator> <literal type="number" pos:start="77:52" pos:end="77:52">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:19"><block_content pos:start="79:9" pos:end="79:19">

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:31"><expr pos:start="83:5" pos:end="83:30"><name pos:start="83:5" pos:end="83:10">pixels</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:30"><name pos:start="83:14" pos:end="83:14">s</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:21">frame</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:27">data</name><index pos:start="83:28" pos:end="83:30">[<expr pos:start="83:29" pos:end="83:29"><literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:59"><expr pos:start="85:5" pos:end="85:58"><name pos:start="85:5" pos:end="85:15">pixel_limit</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:34"><name pos:start="85:19" pos:end="85:19">s</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:26">avctx</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:34">height</name></name> <operator pos:start="85:36" pos:end="85:36">*</operator> <name pos:start="85:38" pos:end="85:58"><name pos:start="85:38" pos:end="85:38">s</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:45">frame</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:55">linesize</name><index pos:start="85:56" pos:end="85:58">[<expr pos:start="85:57" pos:end="85:57"><literal type="number" pos:start="85:57" pos:end="85:57">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="90:43"><if pos:start="87:5" pos:end="90:43">if <condition pos:start="87:8" pos:end="87:87">(<expr pos:start="87:9" pos:end="87:86"><name pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:16">buf_size</name> <argument_list type="generic" pos:start="87:18" pos:end="87:35">&lt; <argument pos:start="87:20" pos:end="87:33"><expr pos:start="87:20" pos:end="87:33"><literal type="number" pos:start="87:20" pos:end="87:21">16</literal> <operator pos:start="87:23" pos:end="87:24">||</operator> <name pos:start="87:26" pos:end="87:33">buf_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="87:37" pos:end="87:43">INT_MAX</name> <operator pos:start="87:45" pos:end="87:45">-</operator> <operator pos:start="87:47" pos:end="87:47">(</operator><literal type="number" pos:start="87:48" pos:end="87:48">3</literal> <operator pos:start="87:50" pos:end="87:50">*</operator> <literal type="number" pos:start="87:52" pos:end="87:56">256</literal> <operator pos:start="87:56" pos:end="87:56">+</operator> <name pos:start="87:58" pos:end="87:85">AV_INPUT_BUFFER_PADDING_SIZE</name><operator pos:start="87:86" pos:end="87:86">)</operator></expr>)</condition><block type="pseudo" pos:start="90:5" pos:end="90:43"><block_content pos:start="90:5" pos:end="90:43">


    <expr_stmt pos:start="90:5" pos:end="90:43"><expr pos:start="90:5" pos:end="90:42"><name pos:start="90:5" pos:end="90:14">frame_size</name> <operator pos:start="90:16" pos:end="90:16">=</operator> <call pos:start="90:18" pos:end="90:42"><name pos:start="90:18" pos:end="90:37">bytestream2_get_le32</name><argument_list pos:start="90:38" pos:end="90:42">(<argument pos:start="90:39" pos:end="90:41"><expr pos:start="90:39" pos:end="90:41"><operator pos:start="90:39" pos:end="90:39">&amp;</operator><name pos:start="90:40" pos:end="90:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="92:5" pos:end="94:30"><if pos:start="92:5" pos:end="94:30">if <condition pos:start="92:8" pos:end="92:30">(<expr pos:start="92:9" pos:end="92:29"><name pos:start="92:9" pos:end="92:18">frame_size</name> <operator pos:start="92:20" pos:end="92:20">&gt;</operator> <name pos:start="92:22" pos:end="92:29">buf_size</name></expr>)</condition><block type="pseudo" pos:start="94:9" pos:end="94:30"><block_content pos:start="94:9" pos:end="94:30">

        <expr_stmt pos:start="94:9" pos:end="94:30"><expr pos:start="94:9" pos:end="94:29"><name pos:start="94:9" pos:end="94:18">frame_size</name> <operator pos:start="94:20" pos:end="94:20">=</operator> <name pos:start="94:22" pos:end="94:29">buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="96:5" pos:end="96:29"><expr pos:start="96:5" pos:end="96:28"><call pos:start="96:5" pos:end="96:28"><name pos:start="96:5" pos:end="96:20">bytestream2_skip</name><argument_list pos:start="96:21" pos:end="96:28">(<argument pos:start="96:22" pos:end="96:24"><expr pos:start="96:22" pos:end="96:24"><operator pos:start="96:22" pos:end="96:22">&amp;</operator><name pos:start="96:23" pos:end="96:24">g2</name></expr></argument>, <argument pos:start="96:27" pos:end="96:27"><expr pos:start="96:27" pos:end="96:27"><literal type="number" pos:start="96:27" pos:end="96:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="96:31" pos:end="96:57">/* skip the magic number */</comment>

    <expr_stmt pos:start="98:5" pos:end="98:43"><expr pos:start="98:5" pos:end="98:42"><name pos:start="98:5" pos:end="98:14">num_chunks</name> <operator pos:start="98:16" pos:end="98:16">=</operator> <call pos:start="98:18" pos:end="98:42"><name pos:start="98:18" pos:end="98:37">bytestream2_get_le16</name><argument_list pos:start="98:38" pos:end="98:42">(<argument pos:start="98:39" pos:end="98:41"><expr pos:start="98:39" pos:end="98:41"><operator pos:start="98:39" pos:end="98:39">&amp;</operator><name pos:start="98:40" pos:end="98:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="100:5" pos:end="100:29"><expr pos:start="100:5" pos:end="100:28"><call pos:start="100:5" pos:end="100:28"><name pos:start="100:5" pos:end="100:20">bytestream2_skip</name><argument_list pos:start="100:21" pos:end="100:28">(<argument pos:start="100:22" pos:end="100:24"><expr pos:start="100:22" pos:end="100:24"><operator pos:start="100:22" pos:end="100:22">&amp;</operator><name pos:start="100:23" pos:end="100:24">g2</name></expr></argument>, <argument pos:start="100:27" pos:end="100:27"><expr pos:start="100:27" pos:end="100:27"><literal type="number" pos:start="100:27" pos:end="100:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="100:32" pos:end="100:49">/* skip padding */</comment>



    <if_stmt pos:start="104:5" pos:end="109:21"><if pos:start="104:5" pos:end="109:21">if <condition pos:start="104:8" pos:end="104:24">(<expr pos:start="104:9" pos:end="104:23"><name pos:start="104:9" pos:end="104:18">frame_size</name> <operator pos:start="104:20" pos:end="104:20">&lt;</operator> <literal type="number" pos:start="104:22" pos:end="104:23">16</literal></expr>)</condition><block type="pseudo" pos:start="109:5" pos:end="109:21"><block_content pos:start="109:5" pos:end="109:21">




    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:14">frame_size</name> <operator pos:start="109:16" pos:end="109:17">-=</operator> <literal type="number" pos:start="109:19" pos:end="109:20">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:36">/* iterate through the chunks */</comment>

    <while pos:start="115:5" pos:end="624:5">while <condition pos:start="115:11" pos:end="117:49">(<expr pos:start="115:12" pos:end="117:48"><operator pos:start="115:12" pos:end="115:12">(</operator><name pos:start="115:13" pos:end="115:22">frame_size</name> <operator pos:start="115:24" pos:end="115:25">&gt;=</operator> <literal type="number" pos:start="115:27" pos:end="115:27">6</literal><operator pos:start="115:28" pos:end="115:28">)</operator> <operator pos:start="115:30" pos:end="115:31">&amp;&amp;</operator> <operator pos:start="115:33" pos:end="115:33">(</operator><name pos:start="115:34" pos:end="115:43">num_chunks</name> <operator pos:start="115:45" pos:end="115:45">&gt;</operator> <literal type="number" pos:start="115:47" pos:end="115:47">0</literal><operator pos:start="115:48" pos:end="115:48">)</operator> <operator pos:start="115:50" pos:end="115:51">&amp;&amp;</operator>

            <call pos:start="117:13" pos:end="117:43"><name pos:start="117:13" pos:end="117:38">bytestream2_get_bytes_left</name><argument_list pos:start="117:39" pos:end="117:43">(<argument pos:start="117:40" pos:end="117:42"><expr pos:start="117:40" pos:end="117:42"><operator pos:start="117:40" pos:end="117:40">&amp;</operator><name pos:start="117:41" pos:end="117:42">g2</name></expr></argument>)</argument_list></call> <operator pos:start="117:45" pos:end="117:46">&gt;=</operator> <literal type="number" pos:start="117:48" pos:end="117:48">4</literal></expr>)</condition> <block pos:start="117:51" pos:end="624:5">{<block_content pos:start="119:9" pos:end="622:21">

        <decl_stmt pos:start="119:9" pos:end="119:35"><decl pos:start="119:9" pos:end="119:34"><type pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">int</name></type> <name pos:start="119:13" pos:end="119:34">stream_ptr_after_chunk</name></decl>;</decl_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:47"><expr pos:start="121:9" pos:end="121:46"><name pos:start="121:9" pos:end="121:18">chunk_size</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <call pos:start="121:22" pos:end="121:46"><name pos:start="121:22" pos:end="121:41">bytestream2_get_le32</name><argument_list pos:start="121:42" pos:end="121:46">(<argument pos:start="121:43" pos:end="121:45"><expr pos:start="121:43" pos:end="121:45"><operator pos:start="121:43" pos:end="121:43">&amp;</operator><name pos:start="121:44" pos:end="121:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:36">(<expr pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:22">chunk_size</name> <operator pos:start="123:24" pos:end="123:24">&gt;</operator> <name pos:start="123:26" pos:end="123:35">frame_size</name></expr>)</condition> <block pos:start="123:38" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:36">

            <expr_stmt pos:start="125:13" pos:end="127:90"><expr pos:start="125:13" pos:end="127:89"><call pos:start="125:13" pos:end="127:89"><name pos:start="125:13" pos:end="125:18">av_log</name><argument_list pos:start="125:19" pos:end="127:89">(<argument pos:start="125:20" pos:end="125:24"><expr pos:start="125:20" pos:end="125:24"><name pos:start="125:20" pos:end="125:24">avctx</name></expr></argument>, <argument pos:start="125:27" pos:end="125:40"><expr pos:start="125:27" pos:end="125:40"><name pos:start="125:27" pos:end="125:40">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="127:20" pos:end="127:64"><expr pos:start="127:20" pos:end="127:64"><literal type="string" pos:start="127:20" pos:end="127:64">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument pos:start="127:67" pos:end="127:76"><expr pos:start="127:67" pos:end="127:76"><name pos:start="127:67" pos:end="127:76">chunk_size</name></expr></argument>, <argument pos:start="127:79" pos:end="127:88"><expr pos:start="127:79" pos:end="127:88"><name pos:start="127:79" pos:end="127:88">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:36"><expr pos:start="129:13" pos:end="129:35"><name pos:start="129:13" pos:end="129:22">chunk_size</name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:35">frame_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:72"><expr pos:start="133:9" pos:end="133:71"><name pos:start="133:9" pos:end="133:30">stream_ptr_after_chunk</name> <operator pos:start="133:32" pos:end="133:32">=</operator> <call pos:start="133:34" pos:end="133:54"><name pos:start="133:34" pos:end="133:49">bytestream2_tell</name><argument_list pos:start="133:50" pos:end="133:54">(<argument pos:start="133:51" pos:end="133:53"><expr pos:start="133:51" pos:end="133:53"><operator pos:start="133:51" pos:end="133:51">&amp;</operator><name pos:start="133:52" pos:end="133:53">g2</name></expr></argument>)</argument_list></call> <operator pos:start="133:56" pos:end="133:56">-</operator> <literal type="number" pos:start="133:58" pos:end="133:60">4</literal> <operator pos:start="133:60" pos:end="133:60">+</operator> <name pos:start="133:62" pos:end="133:71">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:47"><expr pos:start="137:9" pos:end="137:46"><name pos:start="137:9" pos:end="137:18">chunk_type</name> <operator pos:start="137:20" pos:end="137:20">=</operator> <call pos:start="137:22" pos:end="137:46"><name pos:start="137:22" pos:end="137:41">bytestream2_get_le16</name><argument_list pos:start="137:42" pos:end="137:46">(<argument pos:start="137:43" pos:end="137:45"><expr pos:start="137:43" pos:end="137:45"><operator pos:start="137:43" pos:end="137:43">&amp;</operator><name pos:start="137:44" pos:end="137:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="141:9" pos:end="602:9">switch <condition pos:start="141:16" pos:end="141:27">(<expr pos:start="141:17" pos:end="141:26"><name pos:start="141:17" pos:end="141:26">chunk_type</name></expr>)</condition> <block pos:start="141:29" pos:end="602:9">{<block_content pos:start="143:9" pos:end="600:18">

        <case pos:start="143:9" pos:end="143:27">case <expr pos:start="143:14" pos:end="143:26"><name pos:start="143:14" pos:end="143:26">FLI_256_COLOR</name></expr>:</case>

        <case pos:start="145:9" pos:end="145:23">case <expr pos:start="145:14" pos:end="145:22"><name pos:start="145:14" pos:end="145:22">FLI_COLOR</name></expr>:</case>

            <comment type="block" pos:start="147:13" pos:end="153:33">/* check special case: If this file is from the Magic Carpet

             * game and uses 6-bit colors even though it reports 256-color

             * chunks in a 0xAF12-type file (fli_type is set to 0xAF13 during

             * initialization) */</comment>

            <if_stmt pos:start="155:13" pos:end="161:32"><if pos:start="155:13" pos:end="157:32">if <condition pos:start="155:16" pos:end="155:103">(<expr pos:start="155:17" pos:end="155:102"><operator pos:start="155:17" pos:end="155:17">(</operator><name pos:start="155:18" pos:end="155:27">chunk_type</name> <operator pos:start="155:29" pos:end="155:30">==</operator> <name pos:start="155:32" pos:end="155:44">FLI_256_COLOR</name><operator pos:start="155:45" pos:end="155:45">)</operator> <operator pos:start="155:47" pos:end="155:48">&amp;&amp;</operator> <operator pos:start="155:50" pos:end="155:50">(</operator><name pos:start="155:51" pos:end="155:61"><name pos:start="155:51" pos:end="155:51">s</name><operator pos:start="155:52" pos:end="155:53">-&gt;</operator><name pos:start="155:54" pos:end="155:61">fli_type</name></name> <operator pos:start="155:63" pos:end="155:64">!=</operator> <name pos:start="155:66" pos:end="155:101">FLC_MAGIC_CARPET_SYNTHETIC_TYPE_CODE</name><operator pos:start="155:102" pos:end="155:102">)</operator></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:32"><block_content pos:start="157:17" pos:end="157:32">

                <expr_stmt pos:start="157:17" pos:end="157:32"><expr pos:start="157:17" pos:end="157:31"><name pos:start="157:17" pos:end="157:27">color_shift</name> <operator pos:start="157:29" pos:end="157:29">=</operator> <literal type="number" pos:start="157:31" pos:end="157:31">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="159:13" pos:end="161:32">else<block type="pseudo" pos:start="161:17" pos:end="161:32"><block_content pos:start="161:17" pos:end="161:32">

                <expr_stmt pos:start="161:17" pos:end="161:32"><expr pos:start="161:17" pos:end="161:31"><name pos:start="161:17" pos:end="161:27">color_shift</name> <operator pos:start="161:29" pos:end="161:29">=</operator> <literal type="number" pos:start="161:31" pos:end="161:31">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="163:13" pos:end="163:36">/* set up the palette */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:54"><expr pos:start="165:13" pos:end="165:53"><name pos:start="165:13" pos:end="165:25">color_packets</name> <operator pos:start="165:27" pos:end="165:27">=</operator> <call pos:start="165:29" pos:end="165:53"><name pos:start="165:29" pos:end="165:48">bytestream2_get_le16</name><argument_list pos:start="165:49" pos:end="165:53">(<argument pos:start="165:50" pos:end="165:52"><expr pos:start="165:50" pos:end="165:52"><operator pos:start="165:50" pos:end="165:50">&amp;</operator><name pos:start="165:51" pos:end="165:52">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:28"><expr pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:23">palette_ptr</name> <operator pos:start="167:25" pos:end="167:25">=</operator> <literal type="number" pos:start="167:27" pos:end="167:27">0</literal></expr>;</expr_stmt>

            <for pos:start="169:13" pos:end="231:13">for <control pos:start="169:17" pos:end="169:47">(<init pos:start="169:18" pos:end="169:23"><expr pos:start="169:18" pos:end="169:22"><name pos:start="169:18" pos:end="169:18">i</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>;</init> <condition pos:start="169:25" pos:end="169:42"><expr pos:start="169:25" pos:end="169:41"><name pos:start="169:25" pos:end="169:25">i</name> <operator pos:start="169:27" pos:end="169:27">&lt;</operator> <name pos:start="169:29" pos:end="169:41">color_packets</name></expr>;</condition> <incr pos:start="169:44" pos:end="169:46"><expr pos:start="169:44" pos:end="169:46"><name pos:start="169:44" pos:end="169:44">i</name><operator pos:start="169:45" pos:end="169:46">++</operator></expr></incr>)</control> <block pos:start="169:49" pos:end="231:13">{<block_content pos:start="173:17" pos:end="229:17">

                <comment type="block" pos:start="171:17" pos:end="171:59">/* first byte is how many colors to skip */</comment>

                <expr_stmt pos:start="173:17" pos:end="173:57"><expr pos:start="173:17" pos:end="173:56"><name pos:start="173:17" pos:end="173:27">palette_ptr</name> <operator pos:start="173:29" pos:end="173:30">+=</operator> <call pos:start="173:32" pos:end="173:56"><name pos:start="173:32" pos:end="173:51">bytestream2_get_byte</name><argument_list pos:start="173:52" pos:end="173:56">(<argument pos:start="173:53" pos:end="173:55"><expr pos:start="173:53" pos:end="173:55"><operator pos:start="173:53" pos:end="173:53">&amp;</operator><name pos:start="173:54" pos:end="173:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="177:17" pos:end="177:68">/* next byte indicates how many entries to change */</comment>

                <expr_stmt pos:start="179:17" pos:end="179:58"><expr pos:start="179:17" pos:end="179:57"><name pos:start="179:17" pos:end="179:29">color_changes</name> <operator pos:start="179:31" pos:end="179:31">=</operator> <call pos:start="179:33" pos:end="179:57"><name pos:start="179:33" pos:end="179:52">bytestream2_get_byte</name><argument_list pos:start="179:53" pos:end="179:57">(<argument pos:start="179:54" pos:end="179:56"><expr pos:start="179:54" pos:end="179:56"><operator pos:start="179:54" pos:end="179:54">&amp;</operator><name pos:start="179:55" pos:end="179:56">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="183:17" pos:end="183:74">/* if there are 0 color changes, there are actually 256 */</comment>

                <if_stmt pos:start="185:17" pos:end="187:40"><if pos:start="185:17" pos:end="187:40">if <condition pos:start="185:20" pos:end="185:39">(<expr pos:start="185:21" pos:end="185:38"><name pos:start="185:21" pos:end="185:33">color_changes</name> <operator pos:start="185:35" pos:end="185:36">==</operator> <literal type="number" pos:start="185:38" pos:end="185:38">0</literal></expr>)</condition><block type="pseudo" pos:start="187:21" pos:end="187:40"><block_content pos:start="187:21" pos:end="187:40">

                    <expr_stmt pos:start="187:21" pos:end="187:40"><expr pos:start="187:21" pos:end="187:39"><name pos:start="187:21" pos:end="187:33">color_changes</name> <operator pos:start="187:35" pos:end="187:35">=</operator> <literal type="number" pos:start="187:37" pos:end="187:39">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="191:17" pos:end="193:26"><if pos:start="191:17" pos:end="193:26">if <condition pos:start="191:20" pos:end="191:87">(<expr pos:start="191:21" pos:end="191:86"><call pos:start="191:21" pos:end="191:41"><name pos:start="191:21" pos:end="191:36">bytestream2_tell</name><argument_list pos:start="191:37" pos:end="191:41">(<argument pos:start="191:38" pos:end="191:40"><expr pos:start="191:38" pos:end="191:40"><operator pos:start="191:38" pos:end="191:38">&amp;</operator><name pos:start="191:39" pos:end="191:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="191:43" pos:end="191:43">+</operator> <name pos:start="191:45" pos:end="191:57">color_changes</name> <operator pos:start="191:59" pos:end="191:59">*</operator> <literal type="number" pos:start="191:61" pos:end="191:61">3</literal> <operator pos:start="191:63" pos:end="191:63">&gt;</operator> <name pos:start="191:65" pos:end="191:86">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="193:21" pos:end="193:26"><block_content pos:start="193:21" pos:end="193:26">

                    <break pos:start="193:21" pos:end="193:26">break;</break></block_content></block></if></if_stmt>



                <for pos:start="197:17" pos:end="229:17">for <control pos:start="197:21" pos:end="197:51">(<init pos:start="197:22" pos:end="197:27"><expr pos:start="197:22" pos:end="197:26"><name pos:start="197:22" pos:end="197:22">j</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <literal type="number" pos:start="197:26" pos:end="197:26">0</literal></expr>;</init> <condition pos:start="197:29" pos:end="197:46"><expr pos:start="197:29" pos:end="197:45"><name pos:start="197:29" pos:end="197:29">j</name> <operator pos:start="197:31" pos:end="197:31">&lt;</operator> <name pos:start="197:33" pos:end="197:45">color_changes</name></expr>;</condition> <incr pos:start="197:48" pos:end="197:50"><expr pos:start="197:48" pos:end="197:50"><name pos:start="197:48" pos:end="197:48">j</name><operator pos:start="197:49" pos:end="197:50">++</operator></expr></incr>)</control> <block pos:start="197:53" pos:end="229:17">{<block_content pos:start="199:21" pos:end="227:54">

                    <decl_stmt pos:start="199:21" pos:end="199:39"><decl pos:start="199:21" pos:end="199:38"><type pos:start="199:21" pos:end="199:32"><name pos:start="199:21" pos:end="199:28">unsigned</name> <name pos:start="199:30" pos:end="199:32">int</name></type> <name pos:start="199:34" pos:end="199:38">entry</name></decl>;</decl_stmt>



                    <comment type="block" pos:start="203:21" pos:end="203:55">/* wrap around, for good measure */</comment>

                    <if_stmt pos:start="205:21" pos:end="207:40"><if pos:start="205:21" pos:end="207:40">if <condition pos:start="205:24" pos:end="205:53">(<expr pos:start="205:25" pos:end="205:52"><operator pos:start="205:25" pos:end="205:25">(</operator><name pos:start="205:26" pos:end="205:33">unsigned</name><operator pos:start="205:34" pos:end="205:34">)</operator><name pos:start="205:35" pos:end="205:45">palette_ptr</name> <operator pos:start="205:47" pos:end="205:48">&gt;=</operator> <literal type="number" pos:start="205:50" pos:end="205:52">256</literal></expr>)</condition><block type="pseudo" pos:start="207:25" pos:end="207:40"><block_content pos:start="207:25" pos:end="207:40">

                        <expr_stmt pos:start="207:25" pos:end="207:40"><expr pos:start="207:25" pos:end="207:39"><name pos:start="207:25" pos:end="207:35">palette_ptr</name> <operator pos:start="207:37" pos:end="207:37">=</operator> <literal type="number" pos:start="207:39" pos:end="207:39">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="211:21" pos:end="211:65"><expr pos:start="211:21" pos:end="211:64"><name pos:start="211:21" pos:end="211:21">r</name> <operator pos:start="211:23" pos:end="211:23">=</operator> <call pos:start="211:25" pos:end="211:49"><name pos:start="211:25" pos:end="211:44">bytestream2_get_byte</name><argument_list pos:start="211:45" pos:end="211:49">(<argument pos:start="211:46" pos:end="211:48"><expr pos:start="211:46" pos:end="211:48"><operator pos:start="211:46" pos:end="211:46">&amp;</operator><name pos:start="211:47" pos:end="211:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="211:51" pos:end="211:52">&lt;&lt;</operator> <name pos:start="211:54" pos:end="211:64">color_shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:65"><expr pos:start="213:21" pos:end="213:64"><name pos:start="213:21" pos:end="213:21">g</name> <operator pos:start="213:23" pos:end="213:23">=</operator> <call pos:start="213:25" pos:end="213:49"><name pos:start="213:25" pos:end="213:44">bytestream2_get_byte</name><argument_list pos:start="213:45" pos:end="213:49">(<argument pos:start="213:46" pos:end="213:48"><expr pos:start="213:46" pos:end="213:48"><operator pos:start="213:46" pos:end="213:46">&amp;</operator><name pos:start="213:47" pos:end="213:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="213:51" pos:end="213:52">&lt;&lt;</operator> <name pos:start="213:54" pos:end="213:64">color_shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="215:65"><expr pos:start="215:21" pos:end="215:64"><name pos:start="215:21" pos:end="215:21">b</name> <operator pos:start="215:23" pos:end="215:23">=</operator> <call pos:start="215:25" pos:end="215:49"><name pos:start="215:25" pos:end="215:44">bytestream2_get_byte</name><argument_list pos:start="215:45" pos:end="215:49">(<argument pos:start="215:46" pos:end="215:48"><expr pos:start="215:46" pos:end="215:48"><operator pos:start="215:46" pos:end="215:46">&amp;</operator><name pos:start="215:47" pos:end="215:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="215:51" pos:end="215:52">&lt;&lt;</operator> <name pos:start="215:54" pos:end="215:64">color_shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:63"><expr pos:start="217:21" pos:end="217:62"><name pos:start="217:21" pos:end="217:25">entry</name> <operator pos:start="217:27" pos:end="217:27">=</operator> <literal type="number" pos:start="217:29" pos:end="217:33">0xFFU</literal> <operator pos:start="217:35" pos:end="217:36">&lt;&lt;</operator> <literal type="number" pos:start="217:38" pos:end="217:39">24</literal> <operator pos:start="217:41" pos:end="217:41">|</operator> <name pos:start="217:43" pos:end="217:43">r</name> <operator pos:start="217:45" pos:end="217:46">&lt;&lt;</operator> <literal type="number" pos:start="217:48" pos:end="217:49">16</literal> <operator pos:start="217:51" pos:end="217:51">|</operator> <name pos:start="217:53" pos:end="217:53">g</name> <operator pos:start="217:55" pos:end="217:56">&lt;&lt;</operator> <literal type="number" pos:start="217:58" pos:end="217:58">8</literal> <operator pos:start="217:60" pos:end="217:60">|</operator> <name pos:start="217:62" pos:end="217:62">b</name></expr>;</expr_stmt>

                    <if_stmt pos:start="219:21" pos:end="221:54"><if pos:start="219:21" pos:end="221:54">if <condition pos:start="219:24" pos:end="219:41">(<expr pos:start="219:25" pos:end="219:40"><name pos:start="219:25" pos:end="219:35">color_shift</name> <operator pos:start="219:37" pos:end="219:38">==</operator> <literal type="number" pos:start="219:40" pos:end="219:40">2</literal></expr>)</condition><block type="pseudo" pos:start="221:25" pos:end="221:54"><block_content pos:start="221:25" pos:end="221:54">

                        <expr_stmt pos:start="221:25" pos:end="221:54"><expr pos:start="221:25" pos:end="221:53"><name pos:start="221:25" pos:end="221:29">entry</name> <operator pos:start="221:31" pos:end="221:32">|=</operator> <name pos:start="221:34" pos:end="221:38">entry</name> <operator pos:start="221:40" pos:end="221:41">&gt;&gt;</operator> <literal type="number" pos:start="221:43" pos:end="221:43">6</literal> <operator pos:start="221:45" pos:end="221:45">&amp;</operator> <literal type="number" pos:start="221:47" pos:end="221:53">0x30303</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="223:21" pos:end="225:43"><if pos:start="223:21" pos:end="225:43">if <condition pos:start="223:24" pos:end="223:57">(<expr pos:start="223:25" pos:end="223:56"><name pos:start="223:25" pos:end="223:47"><name pos:start="223:25" pos:end="223:25">s</name><operator pos:start="223:26" pos:end="223:27">-&gt;</operator><name pos:start="223:28" pos:end="223:34">palette</name><index pos:start="223:35" pos:end="223:47">[<expr pos:start="223:36" pos:end="223:46"><name pos:start="223:36" pos:end="223:46">palette_ptr</name></expr>]</index></name> <operator pos:start="223:49" pos:end="223:50">!=</operator> <name pos:start="223:52" pos:end="223:56">entry</name></expr>)</condition><block type="pseudo" pos:start="225:25" pos:end="225:43"><block_content pos:start="225:25" pos:end="225:43">

                        <expr_stmt pos:start="225:25" pos:end="225:43"><expr pos:start="225:25" pos:end="225:42"><name pos:start="225:25" pos:end="225:38"><name pos:start="225:25" pos:end="225:25">s</name><operator pos:start="225:26" pos:end="225:27">-&gt;</operator><name pos:start="225:28" pos:end="225:38">new_palette</name></name> <operator pos:start="225:40" pos:end="225:40">=</operator> <literal type="number" pos:start="225:42" pos:end="225:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:54"><expr pos:start="227:21" pos:end="227:53"><name pos:start="227:21" pos:end="227:45"><name pos:start="227:21" pos:end="227:21">s</name><operator pos:start="227:22" pos:end="227:23">-&gt;</operator><name pos:start="227:24" pos:end="227:30">palette</name><index pos:start="227:31" pos:end="227:45">[<expr pos:start="227:32" pos:end="227:44"><name pos:start="227:32" pos:end="227:42">palette_ptr</name><operator pos:start="227:43" pos:end="227:44">++</operator></expr>]</index></name> <operator pos:start="227:47" pos:end="227:47">=</operator> <name pos:start="227:49" pos:end="227:53">entry</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <break pos:start="233:13" pos:end="233:18">break;</break>



        <case pos:start="237:9" pos:end="237:23">case <expr pos:start="237:14" pos:end="237:22"><name pos:start="237:14" pos:end="237:22">FLI_DELTA</name></expr>:</case>

            <expr_stmt pos:start="239:13" pos:end="239:22"><expr pos:start="239:13" pos:end="239:21"><name pos:start="239:13" pos:end="239:17">y_ptr</name> <operator pos:start="239:19" pos:end="239:19">=</operator> <literal type="number" pos:start="239:21" pos:end="239:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:57"><expr pos:start="241:13" pos:end="241:56"><name pos:start="241:13" pos:end="241:28">compressed_lines</name> <operator pos:start="241:30" pos:end="241:30">=</operator> <call pos:start="241:32" pos:end="241:56"><name pos:start="241:32" pos:end="241:51">bytestream2_get_le16</name><argument_list pos:start="241:52" pos:end="241:56">(<argument pos:start="241:53" pos:end="241:55"><expr pos:start="241:53" pos:end="241:55"><operator pos:start="241:53" pos:end="241:53">&amp;</operator><name pos:start="241:54" pos:end="241:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="243:13" pos:end="347:13">while <condition pos:start="243:19" pos:end="243:40">(<expr pos:start="243:20" pos:end="243:39"><name pos:start="243:20" pos:end="243:35">compressed_lines</name> <operator pos:start="243:37" pos:end="243:37">&gt;</operator> <literal type="number" pos:start="243:39" pos:end="243:39">0</literal></expr>)</condition> <block pos:start="243:42" pos:end="347:13">{<block_content pos:start="245:17" pos:end="345:17">

                <if_stmt pos:start="245:17" pos:end="247:26"><if pos:start="245:17" pos:end="247:26">if <condition pos:start="245:20" pos:end="245:71">(<expr pos:start="245:21" pos:end="245:70"><call pos:start="245:21" pos:end="245:41"><name pos:start="245:21" pos:end="245:36">bytestream2_tell</name><argument_list pos:start="245:37" pos:end="245:41">(<argument pos:start="245:38" pos:end="245:40"><expr pos:start="245:38" pos:end="245:40"><operator pos:start="245:38" pos:end="245:38">&amp;</operator><name pos:start="245:39" pos:end="245:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="245:43" pos:end="245:43">+</operator> <literal type="number" pos:start="245:45" pos:end="245:45">2</literal> <operator pos:start="245:47" pos:end="245:47">&gt;</operator> <name pos:start="245:49" pos:end="245:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="247:21" pos:end="247:26"><block_content pos:start="247:21" pos:end="247:26">

                    <break pos:start="247:21" pos:end="247:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="249:17" pos:end="252:57"><if pos:start="249:17" pos:end="252:57">if <condition pos:start="249:20" pos:end="249:40">(<expr pos:start="249:21" pos:end="249:39"><name pos:start="249:21" pos:end="249:25">y_ptr</name> <operator pos:start="249:27" pos:end="249:27">&gt;</operator> <name pos:start="249:29" pos:end="249:39">pixel_limit</name></expr>)</condition><block type="pseudo" pos:start="252:17" pos:end="252:57"><block_content pos:start="252:17" pos:end="252:57">


                <expr_stmt pos:start="252:17" pos:end="252:57"><expr pos:start="252:17" pos:end="252:56"><name pos:start="252:17" pos:end="252:28">line_packets</name> <operator pos:start="252:30" pos:end="252:30">=</operator> <call pos:start="252:32" pos:end="252:56"><name pos:start="252:32" pos:end="252:51">bytestream2_get_le16</name><argument_list pos:start="252:52" pos:end="252:56">(<argument pos:start="252:53" pos:end="252:55"><expr pos:start="252:53" pos:end="252:55"><operator pos:start="252:53" pos:end="252:53">&amp;</operator><name pos:start="252:54" pos:end="252:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="254:17" pos:end="345:17"><if pos:start="254:17" pos:end="265:17">if <condition pos:start="254:20" pos:end="254:54">(<expr pos:start="254:21" pos:end="254:53"><operator pos:start="254:21" pos:end="254:21">(</operator><name pos:start="254:22" pos:end="254:33">line_packets</name> <operator pos:start="254:35" pos:end="254:35">&amp;</operator> <literal type="number" pos:start="254:37" pos:end="254:42">0xC000</literal><operator pos:start="254:43" pos:end="254:43">)</operator> <operator pos:start="254:45" pos:end="254:46">==</operator> <literal type="number" pos:start="254:48" pos:end="254:53">0xC000</literal></expr>)</condition> <block pos:start="254:56" pos:end="265:17">{<block_content pos:start="258:21" pos:end="263:66">

                    <comment type="line" pos:start="256:21" pos:end="256:39">// line skip opcode</comment>

                    <expr_stmt pos:start="258:21" pos:end="258:49"><expr pos:start="258:21" pos:end="258:48"><name pos:start="258:21" pos:end="258:32">line_packets</name> <operator pos:start="258:34" pos:end="258:34">=</operator> <operator pos:start="258:36" pos:end="258:36">-</operator><name pos:start="258:37" pos:end="258:48">line_packets</name></expr>;</expr_stmt>

                    <if_stmt pos:start="260:21" pos:end="263:66"><if pos:start="260:21" pos:end="263:66">if <condition pos:start="260:24" pos:end="260:56">(<expr pos:start="260:25" pos:end="260:55"><name pos:start="260:25" pos:end="260:36">line_packets</name> <operator pos:start="260:38" pos:end="260:38">&gt;</operator> <name pos:start="260:40" pos:end="260:55"><name pos:start="260:40" pos:end="260:40">s</name><operator pos:start="260:41" pos:end="260:42">-&gt;</operator><name pos:start="260:43" pos:end="260:47">avctx</name><operator pos:start="260:48" pos:end="260:49">-&gt;</operator><name pos:start="260:50" pos:end="260:55">height</name></name></expr>)</condition><block type="pseudo" pos:start="263:21" pos:end="263:66"><block_content pos:start="263:21" pos:end="263:66">


                    <expr_stmt pos:start="263:21" pos:end="263:66"><expr pos:start="263:21" pos:end="263:65"><name pos:start="263:21" pos:end="263:25">y_ptr</name> <operator pos:start="263:27" pos:end="263:28">+=</operator> <name pos:start="263:30" pos:end="263:41">line_packets</name> <operator pos:start="263:43" pos:end="263:43">*</operator> <name pos:start="263:45" pos:end="263:65"><name pos:start="263:45" pos:end="263:45">s</name><operator pos:start="263:46" pos:end="263:47">-&gt;</operator><name pos:start="263:48" pos:end="263:52">frame</name><operator pos:start="263:53" pos:end="263:54">-&gt;</operator><name pos:start="263:55" pos:end="263:62">linesize</name><index pos:start="263:63" pos:end="263:65">[<expr pos:start="263:64" pos:end="263:64"><literal type="number" pos:start="263:64" pos:end="263:64">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="265:19" pos:end="269:17">else if <condition pos:start="265:27" pos:end="265:61">(<expr pos:start="265:28" pos:end="265:60"><operator pos:start="265:28" pos:end="265:28">(</operator><name pos:start="265:29" pos:end="265:40">line_packets</name> <operator pos:start="265:42" pos:end="265:42">&amp;</operator> <literal type="number" pos:start="265:44" pos:end="265:49">0xC000</literal><operator pos:start="265:50" pos:end="265:50">)</operator> <operator pos:start="265:52" pos:end="265:53">==</operator> <literal type="number" pos:start="265:55" pos:end="265:60">0x4000</literal></expr>)</condition> <block pos:start="265:63" pos:end="269:17">{<block_content pos:start="267:21" pos:end="267:102">

                    <expr_stmt pos:start="267:21" pos:end="267:102"><expr pos:start="267:21" pos:end="267:101"><call pos:start="267:21" pos:end="267:101"><name pos:start="267:21" pos:end="267:26">av_log</name><argument_list pos:start="267:27" pos:end="267:101">(<argument pos:start="267:28" pos:end="267:32"><expr pos:start="267:28" pos:end="267:32"><name pos:start="267:28" pos:end="267:32">avctx</name></expr></argument>, <argument pos:start="267:35" pos:end="267:46"><expr pos:start="267:35" pos:end="267:46"><name pos:start="267:35" pos:end="267:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:49" pos:end="267:86"><expr pos:start="267:49" pos:end="267:86"><literal type="string" pos:start="267:49" pos:end="267:86">"Undefined opcode (%x) in DELTA_FLI\n"</literal></expr></argument>, <argument pos:start="267:89" pos:end="267:100"><expr pos:start="267:89" pos:end="267:100"><name pos:start="267:89" pos:end="267:100">line_packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="269:19" pos:end="279:17">else if <condition pos:start="269:27" pos:end="269:61">(<expr pos:start="269:28" pos:end="269:60"><operator pos:start="269:28" pos:end="269:28">(</operator><name pos:start="269:29" pos:end="269:40">line_packets</name> <operator pos:start="269:42" pos:end="269:42">&amp;</operator> <literal type="number" pos:start="269:44" pos:end="269:49">0xC000</literal><operator pos:start="269:50" pos:end="269:50">)</operator> <operator pos:start="269:52" pos:end="269:53">==</operator> <literal type="number" pos:start="269:55" pos:end="269:60">0x8000</literal></expr>)</condition> <block pos:start="269:63" pos:end="279:17">{<block_content pos:start="273:21" pos:end="277:60">

                    <comment type="line" pos:start="271:21" pos:end="271:41">// "last byte" opcode</comment>

                    <expr_stmt pos:start="273:21" pos:end="273:65"><expr pos:start="273:21" pos:end="273:64"><name pos:start="273:21" pos:end="273:29">pixel_ptr</name><operator pos:start="273:30" pos:end="273:30">=</operator> <name pos:start="273:32" pos:end="273:36">y_ptr</name> <operator pos:start="273:38" pos:end="273:38">+</operator> <name pos:start="273:40" pos:end="273:60"><name pos:start="273:40" pos:end="273:40">s</name><operator pos:start="273:41" pos:end="273:42">-&gt;</operator><name pos:start="273:43" pos:end="273:47">frame</name><operator pos:start="273:48" pos:end="273:49">-&gt;</operator><name pos:start="273:50" pos:end="273:57">linesize</name><index pos:start="273:58" pos:end="273:60">[<expr pos:start="273:59" pos:end="273:59"><literal type="number" pos:start="273:59" pos:end="273:59">0</literal></expr>]</index></name> <operator pos:start="273:62" pos:end="273:62">-</operator> <literal type="number" pos:start="273:64" pos:end="273:64">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:39"><expr pos:start="275:21" pos:end="275:38"><call pos:start="275:21" pos:end="275:38"><name pos:start="275:21" pos:end="275:35">CHECK_PIXEL_PTR</name><argument_list pos:start="275:36" pos:end="275:38">(<argument pos:start="275:37" pos:end="275:37"><expr pos:start="275:37" pos:end="275:37"><literal type="number" pos:start="275:37" pos:end="275:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="277:21" pos:end="277:60"><expr pos:start="277:21" pos:end="277:59"><name pos:start="277:21" pos:end="277:37"><name pos:start="277:21" pos:end="277:26">pixels</name><index pos:start="277:27" pos:end="277:37">[<expr pos:start="277:28" pos:end="277:36"><name pos:start="277:28" pos:end="277:36">pixel_ptr</name></expr>]</index></name> <operator pos:start="277:39" pos:end="277:39">=</operator> <name pos:start="277:41" pos:end="277:52">line_packets</name> <operator pos:start="277:54" pos:end="277:54">&amp;</operator> <literal type="number" pos:start="277:56" pos:end="277:59">0xff</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="279:19" pos:end="345:17">else <block pos:start="279:24" pos:end="345:17">{<block_content pos:start="281:21" pos:end="343:51">

                    <expr_stmt pos:start="281:21" pos:end="281:39"><expr pos:start="281:21" pos:end="281:38"><name pos:start="281:21" pos:end="281:36">compressed_lines</name><operator pos:start="281:37" pos:end="281:38">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:38"><expr pos:start="283:21" pos:end="283:37"><name pos:start="283:21" pos:end="283:29">pixel_ptr</name> <operator pos:start="283:31" pos:end="283:31">=</operator> <name pos:start="283:33" pos:end="283:37">y_ptr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="285:21" pos:end="285:39"><expr pos:start="285:21" pos:end="285:38"><call pos:start="285:21" pos:end="285:38"><name pos:start="285:21" pos:end="285:35">CHECK_PIXEL_PTR</name><argument_list pos:start="285:36" pos:end="285:38">(<argument pos:start="285:37" pos:end="285:37"><expr pos:start="285:37" pos:end="285:37"><literal type="number" pos:start="285:37" pos:end="285:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:54"><expr pos:start="287:21" pos:end="287:53"><name pos:start="287:21" pos:end="287:35">pixel_countdown</name> <operator pos:start="287:37" pos:end="287:37">=</operator> <name pos:start="287:39" pos:end="287:53"><name pos:start="287:39" pos:end="287:39">s</name><operator pos:start="287:40" pos:end="287:41">-&gt;</operator><name pos:start="287:42" pos:end="287:46">avctx</name><operator pos:start="287:47" pos:end="287:48">-&gt;</operator><name pos:start="287:49" pos:end="287:53">width</name></name></expr>;</expr_stmt>

                    <for pos:start="289:21" pos:end="339:21">for <control pos:start="289:25" pos:end="289:54">(<init pos:start="289:26" pos:end="289:31"><expr pos:start="289:26" pos:end="289:30"><name pos:start="289:26" pos:end="289:26">i</name> <operator pos:start="289:28" pos:end="289:28">=</operator> <literal type="number" pos:start="289:30" pos:end="289:30">0</literal></expr>;</init> <condition pos:start="289:33" pos:end="289:49"><expr pos:start="289:33" pos:end="289:48"><name pos:start="289:33" pos:end="289:33">i</name> <operator pos:start="289:35" pos:end="289:35">&lt;</operator> <name pos:start="289:37" pos:end="289:48">line_packets</name></expr>;</condition> <incr pos:start="289:51" pos:end="289:53"><expr pos:start="289:51" pos:end="289:53"><name pos:start="289:51" pos:end="289:51">i</name><operator pos:start="289:52" pos:end="289:53">++</operator></expr></incr>)</control> <block pos:start="289:56" pos:end="339:21">{<block_content pos:start="291:25" pos:end="337:25">

                        <if_stmt pos:start="291:25" pos:end="293:34"><if pos:start="291:25" pos:end="293:34">if <condition pos:start="291:28" pos:end="291:79">(<expr pos:start="291:29" pos:end="291:78"><call pos:start="291:29" pos:end="291:49"><name pos:start="291:29" pos:end="291:44">bytestream2_tell</name><argument_list pos:start="291:45" pos:end="291:49">(<argument pos:start="291:46" pos:end="291:48"><expr pos:start="291:46" pos:end="291:48"><operator pos:start="291:46" pos:end="291:46">&amp;</operator><name pos:start="291:47" pos:end="291:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="291:51" pos:end="291:51">+</operator> <literal type="number" pos:start="291:53" pos:end="291:53">2</literal> <operator pos:start="291:55" pos:end="291:55">&gt;</operator> <name pos:start="291:57" pos:end="291:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="293:29" pos:end="293:34"><block_content pos:start="293:29" pos:end="293:34">

                            <break pos:start="293:29" pos:end="293:34">break;</break></block_content></block></if></if_stmt>

                        <comment type="block" pos:start="295:25" pos:end="295:56">/* account for the skip bytes */</comment>

                        <expr_stmt pos:start="297:25" pos:end="297:63"><expr pos:start="297:25" pos:end="297:62"><name pos:start="297:25" pos:end="297:34">pixel_skip</name> <operator pos:start="297:36" pos:end="297:36">=</operator> <call pos:start="297:38" pos:end="297:62"><name pos:start="297:38" pos:end="297:57">bytestream2_get_byte</name><argument_list pos:start="297:58" pos:end="297:62">(<argument pos:start="297:59" pos:end="297:61"><expr pos:start="297:59" pos:end="297:61"><operator pos:start="297:59" pos:end="297:59">&amp;</operator><name pos:start="297:60" pos:end="297:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="299:25" pos:end="299:48"><expr pos:start="299:25" pos:end="299:47"><name pos:start="299:25" pos:end="299:33">pixel_ptr</name> <operator pos:start="299:35" pos:end="299:36">+=</operator> <name pos:start="299:38" pos:end="299:47">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="301:25" pos:end="301:54"><expr pos:start="301:25" pos:end="301:53"><name pos:start="301:25" pos:end="301:39">pixel_countdown</name> <operator pos:start="301:41" pos:end="301:42">-=</operator> <name pos:start="301:44" pos:end="301:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="303:25" pos:end="303:77"><expr pos:start="303:25" pos:end="303:76"><name pos:start="303:25" pos:end="303:32">byte_run</name> <operator pos:start="303:34" pos:end="303:34">=</operator> <call pos:start="303:36" pos:end="303:76"><name pos:start="303:36" pos:end="303:46">sign_extend</name><argument_list pos:start="303:47" pos:end="303:76">(<argument pos:start="303:48" pos:end="303:72"><expr pos:start="303:48" pos:end="303:72"><call pos:start="303:48" pos:end="303:72"><name pos:start="303:48" pos:end="303:67">bytestream2_get_byte</name><argument_list pos:start="303:68" pos:end="303:72">(<argument pos:start="303:69" pos:end="303:71"><expr pos:start="303:69" pos:end="303:71"><operator pos:start="303:69" pos:end="303:69">&amp;</operator><name pos:start="303:70" pos:end="303:71">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="303:75" pos:end="303:75"><expr pos:start="303:75" pos:end="303:75"><literal type="number" pos:start="303:75" pos:end="303:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="305:25" pos:end="337:25"><if pos:start="305:25" pos:end="323:25">if <condition pos:start="305:28" pos:end="305:41">(<expr pos:start="305:29" pos:end="305:40"><name pos:start="305:29" pos:end="305:36">byte_run</name> <operator pos:start="305:38" pos:end="305:38">&lt;</operator> <literal type="number" pos:start="305:40" pos:end="305:40">0</literal></expr>)</condition> <block pos:start="305:43" pos:end="323:25">{<block_content pos:start="307:29" pos:end="321:29">

                            <expr_stmt pos:start="307:29" pos:end="307:49"><expr pos:start="307:29" pos:end="307:48"><name pos:start="307:29" pos:end="307:36">byte_run</name> <operator pos:start="307:38" pos:end="307:38">=</operator> <operator pos:start="307:40" pos:end="307:40">-</operator><name pos:start="307:41" pos:end="307:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="309:29" pos:end="309:69"><expr pos:start="309:29" pos:end="309:68"><name pos:start="309:29" pos:end="309:40">palette_idx1</name> <operator pos:start="309:42" pos:end="309:42">=</operator> <call pos:start="309:44" pos:end="309:68"><name pos:start="309:44" pos:end="309:63">bytestream2_get_byte</name><argument_list pos:start="309:64" pos:end="309:68">(<argument pos:start="309:65" pos:end="309:67"><expr pos:start="309:65" pos:end="309:67"><operator pos:start="309:65" pos:end="309:65">&amp;</operator><name pos:start="309:66" pos:end="309:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="311:29" pos:end="311:69"><expr pos:start="311:29" pos:end="311:68"><name pos:start="311:29" pos:end="311:40">palette_idx2</name> <operator pos:start="311:42" pos:end="311:42">=</operator> <call pos:start="311:44" pos:end="311:68"><name pos:start="311:44" pos:end="311:63">bytestream2_get_byte</name><argument_list pos:start="311:64" pos:end="311:68">(<argument pos:start="311:65" pos:end="311:67"><expr pos:start="311:65" pos:end="311:67"><operator pos:start="311:65" pos:end="311:65">&amp;</operator><name pos:start="311:66" pos:end="311:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="313:29" pos:end="313:58"><expr pos:start="313:29" pos:end="313:57"><call pos:start="313:29" pos:end="313:57"><name pos:start="313:29" pos:end="313:43">CHECK_PIXEL_PTR</name><argument_list pos:start="313:44" pos:end="313:57">(<argument pos:start="313:45" pos:end="313:56"><expr pos:start="313:45" pos:end="313:56"><name pos:start="313:45" pos:end="313:52">byte_run</name> <operator pos:start="313:54" pos:end="313:54">*</operator> <literal type="number" pos:start="313:56" pos:end="313:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="315:29" pos:end="321:29">for <control pos:start="315:33" pos:end="315:80">(<init pos:start="315:34" pos:end="315:39"><expr pos:start="315:34" pos:end="315:38"><name pos:start="315:34" pos:end="315:34">j</name> <operator pos:start="315:36" pos:end="315:36">=</operator> <literal type="number" pos:start="315:38" pos:end="315:38">0</literal></expr>;</init> <condition pos:start="315:41" pos:end="315:53"><expr pos:start="315:41" pos:end="315:52"><name pos:start="315:41" pos:end="315:41">j</name> <operator pos:start="315:43" pos:end="315:43">&lt;</operator> <name pos:start="315:45" pos:end="315:52">byte_run</name></expr>;</condition> <incr pos:start="315:55" pos:end="315:79"><expr pos:start="315:55" pos:end="315:57"><name pos:start="315:55" pos:end="315:55">j</name><operator pos:start="315:56" pos:end="315:57">++</operator></expr><operator pos:start="315:58" pos:end="315:58">,</operator> <expr pos:start="315:60" pos:end="315:79"><name pos:start="315:60" pos:end="315:74">pixel_countdown</name> <operator pos:start="315:76" pos:end="315:77">-=</operator> <literal type="number" pos:start="315:79" pos:end="315:79">2</literal></expr></incr>)</control> <block pos:start="315:82" pos:end="321:29">{<block_content pos:start="317:33" pos:end="319:67">

                                <expr_stmt pos:start="317:33" pos:end="317:67"><expr pos:start="317:33" pos:end="317:66"><name pos:start="317:33" pos:end="317:51"><name pos:start="317:33" pos:end="317:38">pixels</name><index pos:start="317:39" pos:end="317:51">[<expr pos:start="317:40" pos:end="317:50"><name pos:start="317:40" pos:end="317:48">pixel_ptr</name><operator pos:start="317:49" pos:end="317:50">++</operator></expr>]</index></name> <operator pos:start="317:53" pos:end="317:53">=</operator> <name pos:start="317:55" pos:end="317:66">palette_idx1</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="319:33" pos:end="319:67"><expr pos:start="319:33" pos:end="319:66"><name pos:start="319:33" pos:end="319:51"><name pos:start="319:33" pos:end="319:38">pixels</name><index pos:start="319:39" pos:end="319:51">[<expr pos:start="319:40" pos:end="319:50"><name pos:start="319:40" pos:end="319:48">pixel_ptr</name><operator pos:start="319:49" pos:end="319:50">++</operator></expr>]</index></name> <operator pos:start="319:53" pos:end="319:53">=</operator> <name pos:start="319:55" pos:end="319:66">palette_idx2</name></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <else pos:start="323:27" pos:end="337:25">else <block pos:start="323:32" pos:end="337:25">{<block_content pos:start="325:29" pos:end="335:29">

                            <expr_stmt pos:start="325:29" pos:end="325:58"><expr pos:start="325:29" pos:end="325:57"><call pos:start="325:29" pos:end="325:57"><name pos:start="325:29" pos:end="325:43">CHECK_PIXEL_PTR</name><argument_list pos:start="325:44" pos:end="325:57">(<argument pos:start="325:45" pos:end="325:56"><expr pos:start="325:45" pos:end="325:56"><name pos:start="325:45" pos:end="325:52">byte_run</name> <operator pos:start="325:54" pos:end="325:54">*</operator> <literal type="number" pos:start="325:56" pos:end="325:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="327:29" pos:end="329:38"><if pos:start="327:29" pos:end="329:38">if <condition pos:start="327:32" pos:end="327:94">(<expr pos:start="327:33" pos:end="327:93"><call pos:start="327:33" pos:end="327:53"><name pos:start="327:33" pos:end="327:48">bytestream2_tell</name><argument_list pos:start="327:49" pos:end="327:53">(<argument pos:start="327:50" pos:end="327:52"><expr pos:start="327:50" pos:end="327:52"><operator pos:start="327:50" pos:end="327:50">&amp;</operator><name pos:start="327:51" pos:end="327:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="327:55" pos:end="327:55">+</operator> <name pos:start="327:57" pos:end="327:64">byte_run</name> <operator pos:start="327:66" pos:end="327:66">*</operator> <literal type="number" pos:start="327:68" pos:end="327:68">2</literal> <operator pos:start="327:70" pos:end="327:70">&gt;</operator> <name pos:start="327:72" pos:end="327:93">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="329:33" pos:end="329:38"><block_content pos:start="329:33" pos:end="329:38">

                                <break pos:start="329:33" pos:end="329:38">break;</break></block_content></block></if></if_stmt>

                            <for pos:start="331:29" pos:end="335:29">for <control pos:start="331:33" pos:end="331:81">(<init pos:start="331:34" pos:end="331:39"><expr pos:start="331:34" pos:end="331:38"><name pos:start="331:34" pos:end="331:34">j</name> <operator pos:start="331:36" pos:end="331:36">=</operator> <literal type="number" pos:start="331:38" pos:end="331:38">0</literal></expr>;</init> <condition pos:start="331:41" pos:end="331:57"><expr pos:start="331:41" pos:end="331:56"><name pos:start="331:41" pos:end="331:41">j</name> <operator pos:start="331:43" pos:end="331:43">&lt;</operator> <name pos:start="331:45" pos:end="331:52">byte_run</name> <operator pos:start="331:54" pos:end="331:54">*</operator> <literal type="number" pos:start="331:56" pos:end="331:56">2</literal></expr>;</condition> <incr pos:start="331:59" pos:end="331:80"><expr pos:start="331:59" pos:end="331:61"><name pos:start="331:59" pos:end="331:59">j</name><operator pos:start="331:60" pos:end="331:61">++</operator></expr><operator pos:start="331:62" pos:end="331:62">,</operator> <expr pos:start="331:64" pos:end="331:80"><name pos:start="331:64" pos:end="331:78">pixel_countdown</name><operator pos:start="331:79" pos:end="331:80">--</operator></expr></incr>)</control> <block pos:start="331:83" pos:end="335:29">{<block_content pos:start="333:33" pos:end="333:80">

                                <expr_stmt pos:start="333:33" pos:end="333:80"><expr pos:start="333:33" pos:end="333:79"><name pos:start="333:33" pos:end="333:51"><name pos:start="333:33" pos:end="333:38">pixels</name><index pos:start="333:39" pos:end="333:51">[<expr pos:start="333:40" pos:end="333:50"><name pos:start="333:40" pos:end="333:48">pixel_ptr</name><operator pos:start="333:49" pos:end="333:50">++</operator></expr>]</index></name> <operator pos:start="333:53" pos:end="333:53">=</operator> <call pos:start="333:55" pos:end="333:79"><name pos:start="333:55" pos:end="333:74">bytestream2_get_byte</name><argument_list pos:start="333:75" pos:end="333:79">(<argument pos:start="333:76" pos:end="333:78"><expr pos:start="333:76" pos:end="333:78"><operator pos:start="333:76" pos:end="333:76">&amp;</operator><name pos:start="333:77" pos:end="333:78">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>



                    <expr_stmt pos:start="343:21" pos:end="343:51"><expr pos:start="343:21" pos:end="343:50"><name pos:start="343:21" pos:end="343:25">y_ptr</name> <operator pos:start="343:27" pos:end="343:28">+=</operator> <name pos:start="343:30" pos:end="343:50"><name pos:start="343:30" pos:end="343:30">s</name><operator pos:start="343:31" pos:end="343:32">-&gt;</operator><name pos:start="343:33" pos:end="343:37">frame</name><operator pos:start="343:38" pos:end="343:39">-&gt;</operator><name pos:start="343:40" pos:end="343:47">linesize</name><index pos:start="343:48" pos:end="343:50">[<expr pos:start="343:49" pos:end="343:49"><literal type="number" pos:start="343:49" pos:end="343:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

            <break pos:start="349:13" pos:end="349:18">break;</break>



        <case pos:start="353:9" pos:end="353:20">case <expr pos:start="353:14" pos:end="353:19"><name pos:start="353:14" pos:end="353:19">FLI_LC</name></expr>:</case>

            <comment type="block" pos:start="355:13" pos:end="355:33">/* line compressed */</comment>

            <expr_stmt pos:start="357:13" pos:end="357:54"><expr pos:start="357:13" pos:end="357:53"><name pos:start="357:13" pos:end="357:25">starting_line</name> <operator pos:start="357:27" pos:end="357:27">=</operator> <call pos:start="357:29" pos:end="357:53"><name pos:start="357:29" pos:end="357:48">bytestream2_get_le16</name><argument_list pos:start="357:49" pos:end="357:53">(<argument pos:start="357:50" pos:end="357:52"><expr pos:start="357:50" pos:end="357:52"><operator pos:start="357:50" pos:end="357:50">&amp;</operator><name pos:start="357:51" pos:end="357:52">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="361:13" pos:end="361:22"><expr pos:start="361:13" pos:end="361:21"><name pos:start="361:13" pos:end="361:17">y_ptr</name> <operator pos:start="361:19" pos:end="361:19">=</operator> <literal type="number" pos:start="361:21" pos:end="361:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="363:13" pos:end="363:59"><expr pos:start="363:13" pos:end="363:58"><name pos:start="363:13" pos:end="363:17">y_ptr</name> <operator pos:start="363:19" pos:end="363:20">+=</operator> <name pos:start="363:22" pos:end="363:34">starting_line</name> <operator pos:start="363:36" pos:end="363:36">*</operator> <name pos:start="363:38" pos:end="363:58"><name pos:start="363:38" pos:end="363:38">s</name><operator pos:start="363:39" pos:end="363:40">-&gt;</operator><name pos:start="363:41" pos:end="363:45">frame</name><operator pos:start="363:46" pos:end="363:47">-&gt;</operator><name pos:start="363:48" pos:end="363:55">linesize</name><index pos:start="363:56" pos:end="363:58">[<expr pos:start="363:57" pos:end="363:57"><literal type="number" pos:start="363:57" pos:end="363:57">0</literal></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="367:13" pos:end="367:57"><expr pos:start="367:13" pos:end="367:56"><name pos:start="367:13" pos:end="367:28">compressed_lines</name> <operator pos:start="367:30" pos:end="367:30">=</operator> <call pos:start="367:32" pos:end="367:56"><name pos:start="367:32" pos:end="367:51">bytestream2_get_le16</name><argument_list pos:start="367:52" pos:end="367:56">(<argument pos:start="367:53" pos:end="367:55"><expr pos:start="367:53" pos:end="367:55"><operator pos:start="367:53" pos:end="367:53">&amp;</operator><name pos:start="367:54" pos:end="367:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="369:13" pos:end="441:13">while <condition pos:start="369:19" pos:end="369:40">(<expr pos:start="369:20" pos:end="369:39"><name pos:start="369:20" pos:end="369:35">compressed_lines</name> <operator pos:start="369:37" pos:end="369:37">&gt;</operator> <literal type="number" pos:start="369:39" pos:end="369:39">0</literal></expr>)</condition> <block pos:start="369:42" pos:end="441:13">{<block_content pos:start="371:17" pos:end="439:35">

                <expr_stmt pos:start="371:17" pos:end="371:34"><expr pos:start="371:17" pos:end="371:33"><name pos:start="371:17" pos:end="371:25">pixel_ptr</name> <operator pos:start="371:27" pos:end="371:27">=</operator> <name pos:start="371:29" pos:end="371:33">y_ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:35"><expr pos:start="373:17" pos:end="373:34"><call pos:start="373:17" pos:end="373:34"><name pos:start="373:17" pos:end="373:31">CHECK_PIXEL_PTR</name><argument_list pos:start="373:32" pos:end="373:34">(<argument pos:start="373:33" pos:end="373:33"><expr pos:start="373:33" pos:end="373:33"><literal type="number" pos:start="373:33" pos:end="373:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:50"><expr pos:start="375:17" pos:end="375:49"><name pos:start="375:17" pos:end="375:31">pixel_countdown</name> <operator pos:start="375:33" pos:end="375:33">=</operator> <name pos:start="375:35" pos:end="375:49"><name pos:start="375:35" pos:end="375:35">s</name><operator pos:start="375:36" pos:end="375:37">-&gt;</operator><name pos:start="375:38" pos:end="375:42">avctx</name><operator pos:start="375:43" pos:end="375:44">-&gt;</operator><name pos:start="375:45" pos:end="375:49">width</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="377:17" pos:end="379:26"><if pos:start="377:17" pos:end="379:26">if <condition pos:start="377:20" pos:end="377:71">(<expr pos:start="377:21" pos:end="377:70"><call pos:start="377:21" pos:end="377:41"><name pos:start="377:21" pos:end="377:36">bytestream2_tell</name><argument_list pos:start="377:37" pos:end="377:41">(<argument pos:start="377:38" pos:end="377:40"><expr pos:start="377:38" pos:end="377:40"><operator pos:start="377:38" pos:end="377:38">&amp;</operator><name pos:start="377:39" pos:end="377:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="377:43" pos:end="377:43">+</operator> <literal type="number" pos:start="377:45" pos:end="377:45">1</literal> <operator pos:start="377:47" pos:end="377:47">&gt;</operator> <name pos:start="377:49" pos:end="377:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="379:21" pos:end="379:26"><block_content pos:start="379:21" pos:end="379:26">

                    <break pos:start="379:21" pos:end="379:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:57"><expr pos:start="381:17" pos:end="381:56"><name pos:start="381:17" pos:end="381:28">line_packets</name> <operator pos:start="381:30" pos:end="381:30">=</operator> <call pos:start="381:32" pos:end="381:56"><name pos:start="381:32" pos:end="381:51">bytestream2_get_byte</name><argument_list pos:start="381:52" pos:end="381:56">(<argument pos:start="381:53" pos:end="381:55"><expr pos:start="381:53" pos:end="381:55"><operator pos:start="381:53" pos:end="381:53">&amp;</operator><name pos:start="381:54" pos:end="381:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="383:17" pos:end="433:17"><if pos:start="383:17" pos:end="433:17">if <condition pos:start="383:20" pos:end="383:37">(<expr pos:start="383:21" pos:end="383:36"><name pos:start="383:21" pos:end="383:32">line_packets</name> <operator pos:start="383:34" pos:end="383:34">&gt;</operator> <literal type="number" pos:start="383:36" pos:end="383:36">0</literal></expr>)</condition> <block pos:start="383:39" pos:end="433:17">{<block_content pos:start="385:21" pos:end="431:21">

                    <for pos:start="385:21" pos:end="431:21">for <control pos:start="385:25" pos:end="385:54">(<init pos:start="385:26" pos:end="385:31"><expr pos:start="385:26" pos:end="385:30"><name pos:start="385:26" pos:end="385:26">i</name> <operator pos:start="385:28" pos:end="385:28">=</operator> <literal type="number" pos:start="385:30" pos:end="385:30">0</literal></expr>;</init> <condition pos:start="385:33" pos:end="385:49"><expr pos:start="385:33" pos:end="385:48"><name pos:start="385:33" pos:end="385:33">i</name> <operator pos:start="385:35" pos:end="385:35">&lt;</operator> <name pos:start="385:37" pos:end="385:48">line_packets</name></expr>;</condition> <incr pos:start="385:51" pos:end="385:53"><expr pos:start="385:51" pos:end="385:53"><name pos:start="385:51" pos:end="385:51">i</name><operator pos:start="385:52" pos:end="385:53">++</operator></expr></incr>)</control> <block pos:start="385:56" pos:end="431:21">{<block_content pos:start="389:25" pos:end="429:25">

                        <comment type="block" pos:start="387:25" pos:end="387:56">/* account for the skip bytes */</comment>

                        <if_stmt pos:start="389:25" pos:end="391:34"><if pos:start="389:25" pos:end="391:34">if <condition pos:start="389:28" pos:end="389:79">(<expr pos:start="389:29" pos:end="389:78"><call pos:start="389:29" pos:end="389:49"><name pos:start="389:29" pos:end="389:44">bytestream2_tell</name><argument_list pos:start="389:45" pos:end="389:49">(<argument pos:start="389:46" pos:end="389:48"><expr pos:start="389:46" pos:end="389:48"><operator pos:start="389:46" pos:end="389:46">&amp;</operator><name pos:start="389:47" pos:end="389:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="389:51" pos:end="389:51">+</operator> <literal type="number" pos:start="389:53" pos:end="389:53">1</literal> <operator pos:start="389:55" pos:end="389:55">&gt;</operator> <name pos:start="389:57" pos:end="389:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="391:29" pos:end="391:34"><block_content pos:start="391:29" pos:end="391:34">

                            <break pos:start="391:29" pos:end="391:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="393:25" pos:end="393:63"><expr pos:start="393:25" pos:end="393:62"><name pos:start="393:25" pos:end="393:34">pixel_skip</name> <operator pos:start="393:36" pos:end="393:36">=</operator> <call pos:start="393:38" pos:end="393:62"><name pos:start="393:38" pos:end="393:57">bytestream2_get_byte</name><argument_list pos:start="393:58" pos:end="393:62">(<argument pos:start="393:59" pos:end="393:61"><expr pos:start="393:59" pos:end="393:61"><operator pos:start="393:59" pos:end="393:59">&amp;</operator><name pos:start="393:60" pos:end="393:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="395:25" pos:end="395:48"><expr pos:start="395:25" pos:end="395:47"><name pos:start="395:25" pos:end="395:33">pixel_ptr</name> <operator pos:start="395:35" pos:end="395:36">+=</operator> <name pos:start="395:38" pos:end="395:47">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="397:25" pos:end="397:54"><expr pos:start="397:25" pos:end="397:53"><name pos:start="397:25" pos:end="397:39">pixel_countdown</name> <operator pos:start="397:41" pos:end="397:42">-=</operator> <name pos:start="397:44" pos:end="397:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="399:25" pos:end="399:76"><expr pos:start="399:25" pos:end="399:75"><name pos:start="399:25" pos:end="399:32">byte_run</name> <operator pos:start="399:34" pos:end="399:34">=</operator> <call pos:start="399:36" pos:end="399:75"><name pos:start="399:36" pos:end="399:46">sign_extend</name><argument_list pos:start="399:47" pos:end="399:75">(<argument pos:start="399:48" pos:end="399:72"><expr pos:start="399:48" pos:end="399:72"><call pos:start="399:48" pos:end="399:72"><name pos:start="399:48" pos:end="399:67">bytestream2_get_byte</name><argument_list pos:start="399:68" pos:end="399:72">(<argument pos:start="399:69" pos:end="399:71"><expr pos:start="399:69" pos:end="399:71"><operator pos:start="399:69" pos:end="399:69">&amp;</operator><name pos:start="399:70" pos:end="399:71">g2</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="399:74" pos:end="399:74"><expr pos:start="399:74" pos:end="399:74"><literal type="number" pos:start="399:74" pos:end="399:74">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="401:25" pos:end="429:25"><if pos:start="401:25" pos:end="415:25">if <condition pos:start="401:28" pos:end="401:41">(<expr pos:start="401:29" pos:end="401:40"><name pos:start="401:29" pos:end="401:36">byte_run</name> <operator pos:start="401:38" pos:end="401:38">&gt;</operator> <literal type="number" pos:start="401:40" pos:end="401:40">0</literal></expr>)</condition> <block pos:start="401:43" pos:end="415:25">{<block_content pos:start="403:29" pos:end="413:29">

                            <expr_stmt pos:start="403:29" pos:end="403:54"><expr pos:start="403:29" pos:end="403:53"><call pos:start="403:29" pos:end="403:53"><name pos:start="403:29" pos:end="403:43">CHECK_PIXEL_PTR</name><argument_list pos:start="403:44" pos:end="403:53">(<argument pos:start="403:45" pos:end="403:52"><expr pos:start="403:45" pos:end="403:52"><name pos:start="403:45" pos:end="403:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="405:29" pos:end="407:38"><if pos:start="405:29" pos:end="407:38">if <condition pos:start="405:32" pos:end="405:90">(<expr pos:start="405:33" pos:end="405:89"><call pos:start="405:33" pos:end="405:53"><name pos:start="405:33" pos:end="405:48">bytestream2_tell</name><argument_list pos:start="405:49" pos:end="405:53">(<argument pos:start="405:50" pos:end="405:52"><expr pos:start="405:50" pos:end="405:52"><operator pos:start="405:50" pos:end="405:50">&amp;</operator><name pos:start="405:51" pos:end="405:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="405:55" pos:end="405:55">+</operator> <name pos:start="405:57" pos:end="405:64">byte_run</name> <operator pos:start="405:66" pos:end="405:66">&gt;</operator> <name pos:start="405:68" pos:end="405:89">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="407:33" pos:end="407:38"><block_content pos:start="407:33" pos:end="407:38">

                                <break pos:start="407:33" pos:end="407:38">break;</break></block_content></block></if></if_stmt>

                            <for pos:start="409:29" pos:end="413:29">for <control pos:start="409:33" pos:end="409:77">(<init pos:start="409:34" pos:end="409:39"><expr pos:start="409:34" pos:end="409:38"><name pos:start="409:34" pos:end="409:34">j</name> <operator pos:start="409:36" pos:end="409:36">=</operator> <literal type="number" pos:start="409:38" pos:end="409:38">0</literal></expr>;</init> <condition pos:start="409:41" pos:end="409:53"><expr pos:start="409:41" pos:end="409:52"><name pos:start="409:41" pos:end="409:41">j</name> <operator pos:start="409:43" pos:end="409:43">&lt;</operator> <name pos:start="409:45" pos:end="409:52">byte_run</name></expr>;</condition> <incr pos:start="409:55" pos:end="409:76"><expr pos:start="409:55" pos:end="409:57"><name pos:start="409:55" pos:end="409:55">j</name><operator pos:start="409:56" pos:end="409:57">++</operator></expr><operator pos:start="409:58" pos:end="409:58">,</operator> <expr pos:start="409:60" pos:end="409:76"><name pos:start="409:60" pos:end="409:74">pixel_countdown</name><operator pos:start="409:75" pos:end="409:76">--</operator></expr></incr>)</control> <block pos:start="409:79" pos:end="413:29">{<block_content pos:start="411:33" pos:end="411:80">

                                <expr_stmt pos:start="411:33" pos:end="411:80"><expr pos:start="411:33" pos:end="411:79"><name pos:start="411:33" pos:end="411:51"><name pos:start="411:33" pos:end="411:38">pixels</name><index pos:start="411:39" pos:end="411:51">[<expr pos:start="411:40" pos:end="411:50"><name pos:start="411:40" pos:end="411:48">pixel_ptr</name><operator pos:start="411:49" pos:end="411:50">++</operator></expr>]</index></name> <operator pos:start="411:53" pos:end="411:53">=</operator> <call pos:start="411:55" pos:end="411:79"><name pos:start="411:55" pos:end="411:74">bytestream2_get_byte</name><argument_list pos:start="411:75" pos:end="411:79">(<argument pos:start="411:76" pos:end="411:78"><expr pos:start="411:76" pos:end="411:78"><operator pos:start="411:76" pos:end="411:76">&amp;</operator><name pos:start="411:77" pos:end="411:78">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <if type="elseif" pos:start="415:27" pos:end="429:25">else if <condition pos:start="415:35" pos:end="415:48">(<expr pos:start="415:36" pos:end="415:47"><name pos:start="415:36" pos:end="415:43">byte_run</name> <operator pos:start="415:45" pos:end="415:45">&lt;</operator> <literal type="number" pos:start="415:47" pos:end="415:47">0</literal></expr>)</condition> <block pos:start="415:50" pos:end="429:25">{<block_content pos:start="417:29" pos:end="427:29">

                            <expr_stmt pos:start="417:29" pos:end="417:49"><expr pos:start="417:29" pos:end="417:48"><name pos:start="417:29" pos:end="417:36">byte_run</name> <operator pos:start="417:38" pos:end="417:38">=</operator> <operator pos:start="417:40" pos:end="417:40">-</operator><name pos:start="417:41" pos:end="417:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="419:29" pos:end="419:69"><expr pos:start="419:29" pos:end="419:68"><name pos:start="419:29" pos:end="419:40">palette_idx1</name> <operator pos:start="419:42" pos:end="419:42">=</operator> <call pos:start="419:44" pos:end="419:68"><name pos:start="419:44" pos:end="419:63">bytestream2_get_byte</name><argument_list pos:start="419:64" pos:end="419:68">(<argument pos:start="419:65" pos:end="419:67"><expr pos:start="419:65" pos:end="419:67"><operator pos:start="419:65" pos:end="419:65">&amp;</operator><name pos:start="419:66" pos:end="419:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="421:29" pos:end="421:54"><expr pos:start="421:29" pos:end="421:53"><call pos:start="421:29" pos:end="421:53"><name pos:start="421:29" pos:end="421:43">CHECK_PIXEL_PTR</name><argument_list pos:start="421:44" pos:end="421:53">(<argument pos:start="421:45" pos:end="421:52"><expr pos:start="421:45" pos:end="421:52"><name pos:start="421:45" pos:end="421:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="423:29" pos:end="427:29">for <control pos:start="423:33" pos:end="423:77">(<init pos:start="423:34" pos:end="423:39"><expr pos:start="423:34" pos:end="423:38"><name pos:start="423:34" pos:end="423:34">j</name> <operator pos:start="423:36" pos:end="423:36">=</operator> <literal type="number" pos:start="423:38" pos:end="423:38">0</literal></expr>;</init> <condition pos:start="423:41" pos:end="423:53"><expr pos:start="423:41" pos:end="423:52"><name pos:start="423:41" pos:end="423:41">j</name> <operator pos:start="423:43" pos:end="423:43">&lt;</operator> <name pos:start="423:45" pos:end="423:52">byte_run</name></expr>;</condition> <incr pos:start="423:55" pos:end="423:76"><expr pos:start="423:55" pos:end="423:57"><name pos:start="423:55" pos:end="423:55">j</name><operator pos:start="423:56" pos:end="423:57">++</operator></expr><operator pos:start="423:58" pos:end="423:58">,</operator> <expr pos:start="423:60" pos:end="423:76"><name pos:start="423:60" pos:end="423:74">pixel_countdown</name><operator pos:start="423:75" pos:end="423:76">--</operator></expr></incr>)</control> <block pos:start="423:79" pos:end="427:29">{<block_content pos:start="425:33" pos:end="425:67">

                                <expr_stmt pos:start="425:33" pos:end="425:67"><expr pos:start="425:33" pos:end="425:66"><name pos:start="425:33" pos:end="425:51"><name pos:start="425:33" pos:end="425:38">pixels</name><index pos:start="425:39" pos:end="425:51">[<expr pos:start="425:40" pos:end="425:50"><name pos:start="425:40" pos:end="425:48">pixel_ptr</name><operator pos:start="425:49" pos:end="425:50">++</operator></expr>]</index></name> <operator pos:start="425:53" pos:end="425:53">=</operator> <name pos:start="425:55" pos:end="425:66">palette_idx1</name></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="437:17" pos:end="437:47"><expr pos:start="437:17" pos:end="437:46"><name pos:start="437:17" pos:end="437:21">y_ptr</name> <operator pos:start="437:23" pos:end="437:24">+=</operator> <name pos:start="437:26" pos:end="437:46"><name pos:start="437:26" pos:end="437:26">s</name><operator pos:start="437:27" pos:end="437:28">-&gt;</operator><name pos:start="437:29" pos:end="437:33">frame</name><operator pos:start="437:34" pos:end="437:35">-&gt;</operator><name pos:start="437:36" pos:end="437:43">linesize</name><index pos:start="437:44" pos:end="437:46">[<expr pos:start="437:45" pos:end="437:45"><literal type="number" pos:start="437:45" pos:end="437:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="439:17" pos:end="439:35"><expr pos:start="439:17" pos:end="439:34"><name pos:start="439:17" pos:end="439:32">compressed_lines</name><operator pos:start="439:33" pos:end="439:34">--</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="443:13" pos:end="443:18">break;</break>



        <case pos:start="447:9" pos:end="447:23">case <expr pos:start="447:14" pos:end="447:22"><name pos:start="447:14" pos:end="447:22">FLI_BLACK</name></expr>:</case>

            <comment type="block" pos:start="449:13" pos:end="449:73">/* set the whole frame to color 0 (which is usually black) */</comment>

            <expr_stmt pos:start="451:13" pos:end="453:58"><expr pos:start="451:13" pos:end="453:57"><call pos:start="451:13" pos:end="453:57"><name pos:start="451:13" pos:end="451:18">memset</name><argument_list pos:start="451:19" pos:end="453:57">(<argument pos:start="451:20" pos:end="451:25"><expr pos:start="451:20" pos:end="451:25"><name pos:start="451:20" pos:end="451:25">pixels</name></expr></argument>, <argument pos:start="451:28" pos:end="451:28"><expr pos:start="451:28" pos:end="451:28"><literal type="number" pos:start="451:28" pos:end="451:28">0</literal></expr></argument>,

                <argument pos:start="453:17" pos:end="453:56"><expr pos:start="453:17" pos:end="453:56"><name pos:start="453:17" pos:end="453:37"><name pos:start="453:17" pos:end="453:17">s</name><operator pos:start="453:18" pos:end="453:19">-&gt;</operator><name pos:start="453:20" pos:end="453:24">frame</name><operator pos:start="453:25" pos:end="453:26">-&gt;</operator><name pos:start="453:27" pos:end="453:34">linesize</name><index pos:start="453:35" pos:end="453:37">[<expr pos:start="453:36" pos:end="453:36"><literal type="number" pos:start="453:36" pos:end="453:36">0</literal></expr>]</index></name> <operator pos:start="453:39" pos:end="453:39">*</operator> <name pos:start="453:41" pos:end="453:56"><name pos:start="453:41" pos:end="453:41">s</name><operator pos:start="453:42" pos:end="453:43">-&gt;</operator><name pos:start="453:44" pos:end="453:48">avctx</name><operator pos:start="453:49" pos:end="453:50">-&gt;</operator><name pos:start="453:51" pos:end="453:56">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="455:13" pos:end="455:18">break;</break>



        <case pos:start="459:9" pos:end="459:22">case <expr pos:start="459:14" pos:end="459:21"><name pos:start="459:14" pos:end="459:21">FLI_BRUN</name></expr>:</case>

            <comment type="block" pos:start="461:13" pos:end="463:64">/* Byte run compression: This chunk type only occurs in the first

             * FLI frame and it will update the entire frame. */</comment>

            <expr_stmt pos:start="465:13" pos:end="465:22"><expr pos:start="465:13" pos:end="465:21"><name pos:start="465:13" pos:end="465:17">y_ptr</name> <operator pos:start="465:19" pos:end="465:19">=</operator> <literal type="number" pos:start="465:21" pos:end="465:21">0</literal></expr>;</expr_stmt>

            <for pos:start="467:13" pos:end="548:13">for <control pos:start="467:17" pos:end="467:62">(<init pos:start="467:18" pos:end="467:27"><expr pos:start="467:18" pos:end="467:26"><name pos:start="467:18" pos:end="467:22">lines</name> <operator pos:start="467:24" pos:end="467:24">=</operator> <literal type="number" pos:start="467:26" pos:end="467:26">0</literal></expr>;</init> <condition pos:start="467:29" pos:end="467:53"><expr pos:start="467:29" pos:end="467:52"><name pos:start="467:29" pos:end="467:33">lines</name> <operator pos:start="467:35" pos:end="467:35">&lt;</operator> <name pos:start="467:37" pos:end="467:52"><name pos:start="467:37" pos:end="467:37">s</name><operator pos:start="467:38" pos:end="467:39">-&gt;</operator><name pos:start="467:40" pos:end="467:44">avctx</name><operator pos:start="467:45" pos:end="467:46">-&gt;</operator><name pos:start="467:47" pos:end="467:52">height</name></name></expr>;</condition> <incr pos:start="467:55" pos:end="467:61"><expr pos:start="467:55" pos:end="467:61"><name pos:start="467:55" pos:end="467:59">lines</name><operator pos:start="467:60" pos:end="467:61">++</operator></expr></incr>)</control> <block pos:start="467:64" pos:end="548:13">{<block_content pos:start="469:17" pos:end="546:47">

                <expr_stmt pos:start="469:17" pos:end="469:34"><expr pos:start="469:17" pos:end="469:33"><name pos:start="469:17" pos:end="469:25">pixel_ptr</name> <operator pos:start="469:27" pos:end="469:27">=</operator> <name pos:start="469:29" pos:end="469:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="471:17" pos:end="473:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                 <expr_stmt pos:start="475:18" pos:end="475:42"><expr pos:start="475:18" pos:end="475:41"><call pos:start="475:18" pos:end="475:41"><name pos:start="475:18" pos:end="475:33">bytestream2_skip</name><argument_list pos:start="475:34" pos:end="475:41">(<argument pos:start="475:35" pos:end="475:37"><expr pos:start="475:35" pos:end="475:37"><operator pos:start="475:35" pos:end="475:35">&amp;</operator><name pos:start="475:36" pos:end="475:37">g2</name></expr></argument>, <argument pos:start="475:40" pos:end="475:40"><expr pos:start="475:40" pos:end="475:40"><literal type="number" pos:start="475:40" pos:end="475:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="477:17" pos:end="477:50"><expr pos:start="477:17" pos:end="477:49"><name pos:start="477:17" pos:end="477:31">pixel_countdown</name> <operator pos:start="477:33" pos:end="477:33">=</operator> <name pos:start="477:35" pos:end="477:49"><name pos:start="477:35" pos:end="477:35">s</name><operator pos:start="477:36" pos:end="477:37">-&gt;</operator><name pos:start="477:38" pos:end="477:42">avctx</name><operator pos:start="477:43" pos:end="477:44">-&gt;</operator><name pos:start="477:45" pos:end="477:49">width</name></name></expr>;</expr_stmt>

                <while pos:start="479:17" pos:end="542:17">while <condition pos:start="479:23" pos:end="479:43">(<expr pos:start="479:24" pos:end="479:42"><name pos:start="479:24" pos:end="479:38">pixel_countdown</name> <operator pos:start="479:40" pos:end="479:40">&gt;</operator> <literal type="number" pos:start="479:42" pos:end="479:42">0</literal></expr>)</condition> <block pos:start="479:45" pos:end="542:17">{<block_content pos:start="481:21" pos:end="540:21">

                    <if_stmt pos:start="481:21" pos:end="483:30"><if pos:start="481:21" pos:end="483:30">if <condition pos:start="481:24" pos:end="481:75">(<expr pos:start="481:25" pos:end="481:74"><call pos:start="481:25" pos:end="481:45"><name pos:start="481:25" pos:end="481:40">bytestream2_tell</name><argument_list pos:start="481:41" pos:end="481:45">(<argument pos:start="481:42" pos:end="481:44"><expr pos:start="481:42" pos:end="481:44"><operator pos:start="481:42" pos:end="481:42">&amp;</operator><name pos:start="481:43" pos:end="481:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="481:47" pos:end="481:47">+</operator> <literal type="number" pos:start="481:49" pos:end="481:49">1</literal> <operator pos:start="481:51" pos:end="481:51">&gt;</operator> <name pos:start="481:53" pos:end="481:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="483:25" pos:end="483:30"><block_content pos:start="483:25" pos:end="483:30">

                        <break pos:start="483:25" pos:end="483:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="485:21" pos:end="485:73"><expr pos:start="485:21" pos:end="485:72"><name pos:start="485:21" pos:end="485:28">byte_run</name> <operator pos:start="485:30" pos:end="485:30">=</operator> <call pos:start="485:32" pos:end="485:72"><name pos:start="485:32" pos:end="485:42">sign_extend</name><argument_list pos:start="485:43" pos:end="485:72">(<argument pos:start="485:44" pos:end="485:68"><expr pos:start="485:44" pos:end="485:68"><call pos:start="485:44" pos:end="485:68"><name pos:start="485:44" pos:end="485:63">bytestream2_get_byte</name><argument_list pos:start="485:64" pos:end="485:68">(<argument pos:start="485:65" pos:end="485:67"><expr pos:start="485:65" pos:end="485:67"><operator pos:start="485:65" pos:end="485:65">&amp;</operator><name pos:start="485:66" pos:end="485:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="485:71" pos:end="485:71"><expr pos:start="485:71" pos:end="485:71"><literal type="number" pos:start="485:71" pos:end="485:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="487:21" pos:end="492:21"><if pos:start="487:21" pos:end="492:21">if <condition pos:start="487:24" pos:end="487:34">(<expr pos:start="487:25" pos:end="487:33"><operator pos:start="487:25" pos:end="487:25">!</operator><name pos:start="487:26" pos:end="487:33">byte_run</name></expr>)</condition> <block pos:start="487:36" pos:end="492:21">{<block_content pos:start="489:25" pos:end="489:81">

                        <expr_stmt pos:start="489:25" pos:end="489:81"><expr pos:start="489:25" pos:end="489:80"><call pos:start="489:25" pos:end="489:80"><name pos:start="489:25" pos:end="489:30">av_log</name><argument_list pos:start="489:31" pos:end="489:80">(<argument pos:start="489:32" pos:end="489:36"><expr pos:start="489:32" pos:end="489:36"><name pos:start="489:32" pos:end="489:36">avctx</name></expr></argument>, <argument pos:start="489:39" pos:end="489:50"><expr pos:start="489:39" pos:end="489:50"><name pos:start="489:39" pos:end="489:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="489:53" pos:end="489:79"><expr pos:start="489:53" pos:end="489:79"><literal type="string" pos:start="489:53" pos:end="489:79">"Invalid byte run value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="496:21" pos:end="540:21"><if pos:start="496:21" pos:end="516:21">if <condition pos:start="496:24" pos:end="496:37">(<expr pos:start="496:25" pos:end="496:36"><name pos:start="496:25" pos:end="496:32">byte_run</name> <operator pos:start="496:34" pos:end="496:34">&gt;</operator> <literal type="number" pos:start="496:36" pos:end="496:36">0</literal></expr>)</condition> <block pos:start="496:39" pos:end="516:21">{<block_content pos:start="498:25" pos:end="514:25">

                        <expr_stmt pos:start="498:25" pos:end="498:65"><expr pos:start="498:25" pos:end="498:64"><name pos:start="498:25" pos:end="498:36">palette_idx1</name> <operator pos:start="498:38" pos:end="498:38">=</operator> <call pos:start="498:40" pos:end="498:64"><name pos:start="498:40" pos:end="498:59">bytestream2_get_byte</name><argument_list pos:start="498:60" pos:end="498:64">(<argument pos:start="498:61" pos:end="498:63"><expr pos:start="498:61" pos:end="498:63"><operator pos:start="498:61" pos:end="498:61">&amp;</operator><name pos:start="498:62" pos:end="498:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="500:25" pos:end="500:50"><expr pos:start="500:25" pos:end="500:49"><call pos:start="500:25" pos:end="500:49"><name pos:start="500:25" pos:end="500:39">CHECK_PIXEL_PTR</name><argument_list pos:start="500:40" pos:end="500:49">(<argument pos:start="500:41" pos:end="500:48"><expr pos:start="500:41" pos:end="500:48"><name pos:start="500:41" pos:end="500:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="502:25" pos:end="514:25">for <control pos:start="502:29" pos:end="502:54">(<init pos:start="502:30" pos:end="502:35"><expr pos:start="502:30" pos:end="502:34"><name pos:start="502:30" pos:end="502:30">j</name> <operator pos:start="502:32" pos:end="502:32">=</operator> <literal type="number" pos:start="502:34" pos:end="502:34">0</literal></expr>;</init> <condition pos:start="502:37" pos:end="502:49"><expr pos:start="502:37" pos:end="502:48"><name pos:start="502:37" pos:end="502:37">j</name> <operator pos:start="502:39" pos:end="502:39">&lt;</operator> <name pos:start="502:41" pos:end="502:48">byte_run</name></expr>;</condition> <incr pos:start="502:51" pos:end="502:53"><expr pos:start="502:51" pos:end="502:53"><name pos:start="502:51" pos:end="502:51">j</name><operator pos:start="502:52" pos:end="502:53">++</operator></expr></incr>)</control> <block pos:start="502:56" pos:end="514:25">{<block_content pos:start="504:29" pos:end="512:63">

                            <expr_stmt pos:start="504:29" pos:end="504:63"><expr pos:start="504:29" pos:end="504:62"><name pos:start="504:29" pos:end="504:47"><name pos:start="504:29" pos:end="504:34">pixels</name><index pos:start="504:35" pos:end="504:47">[<expr pos:start="504:36" pos:end="504:46"><name pos:start="504:36" pos:end="504:44">pixel_ptr</name><operator pos:start="504:45" pos:end="504:46">++</operator></expr>]</index></name> <operator pos:start="504:49" pos:end="504:49">=</operator> <name pos:start="504:51" pos:end="504:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="506:29" pos:end="506:46"><expr pos:start="506:29" pos:end="506:45"><name pos:start="506:29" pos:end="506:43">pixel_countdown</name><operator pos:start="506:44" pos:end="506:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="508:29" pos:end="512:63"><if pos:start="508:29" pos:end="512:63">if <condition pos:start="508:32" pos:end="508:52">(<expr pos:start="508:33" pos:end="508:51"><name pos:start="508:33" pos:end="508:47">pixel_countdown</name> <operator pos:start="508:49" pos:end="508:49">&lt;</operator> <literal type="number" pos:start="508:51" pos:end="508:51">0</literal></expr>)</condition><block type="pseudo" pos:start="510:33" pos:end="512:63"><block_content pos:start="510:33" pos:end="512:63">

                                <expr_stmt pos:start="510:33" pos:end="512:63"><expr pos:start="510:33" pos:end="512:62"><call pos:start="510:33" pos:end="512:62"><name pos:start="510:33" pos:end="510:38">av_log</name><argument_list pos:start="510:39" pos:end="512:62">(<argument pos:start="510:40" pos:end="510:44"><expr pos:start="510:40" pos:end="510:44"><name pos:start="510:40" pos:end="510:44">avctx</name></expr></argument>, <argument pos:start="510:47" pos:end="510:58"><expr pos:start="510:47" pos:end="510:58"><name pos:start="510:47" pos:end="510:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="510:61" pos:end="510:99"><expr pos:start="510:61" pos:end="510:99"><literal type="string" pos:start="510:61" pos:end="510:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

                                       <argument pos:start="512:40" pos:end="512:54"><expr pos:start="512:40" pos:end="512:54"><name pos:start="512:40" pos:end="512:54">pixel_countdown</name></expr></argument>, <argument pos:start="512:57" pos:end="512:61"><expr pos:start="512:57" pos:end="512:61"><name pos:start="512:57" pos:end="512:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="516:23" pos:end="540:21">else <block pos:start="516:28" pos:end="540:21">{<block_content pos:start="518:25" pos:end="538:25">  <comment type="block" pos:start="516:31" pos:end="516:62">/* copy bytes if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="518:25" pos:end="518:45"><expr pos:start="518:25" pos:end="518:44"><name pos:start="518:25" pos:end="518:32">byte_run</name> <operator pos:start="518:34" pos:end="518:34">=</operator> <operator pos:start="518:36" pos:end="518:36">-</operator><name pos:start="518:37" pos:end="518:44">byte_run</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="520:25" pos:end="520:50"><expr pos:start="520:25" pos:end="520:49"><call pos:start="520:25" pos:end="520:49"><name pos:start="520:25" pos:end="520:39">CHECK_PIXEL_PTR</name><argument_list pos:start="520:40" pos:end="520:49">(<argument pos:start="520:41" pos:end="520:48"><expr pos:start="520:41" pos:end="520:48"><name pos:start="520:41" pos:end="520:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="522:25" pos:end="524:34"><if pos:start="522:25" pos:end="524:34">if <condition pos:start="522:28" pos:end="522:86">(<expr pos:start="522:29" pos:end="522:85"><call pos:start="522:29" pos:end="522:49"><name pos:start="522:29" pos:end="522:44">bytestream2_tell</name><argument_list pos:start="522:45" pos:end="522:49">(<argument pos:start="522:46" pos:end="522:48"><expr pos:start="522:46" pos:end="522:48"><operator pos:start="522:46" pos:end="522:46">&amp;</operator><name pos:start="522:47" pos:end="522:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="522:51" pos:end="522:51">+</operator> <name pos:start="522:53" pos:end="522:60">byte_run</name> <operator pos:start="522:62" pos:end="522:62">&gt;</operator> <name pos:start="522:64" pos:end="522:85">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="524:29" pos:end="524:34"><block_content pos:start="524:29" pos:end="524:34">

                            <break pos:start="524:29" pos:end="524:34">break;</break></block_content></block></if></if_stmt>

                        <for pos:start="526:25" pos:end="538:25">for <control pos:start="526:29" pos:end="526:54">(<init pos:start="526:30" pos:end="526:35"><expr pos:start="526:30" pos:end="526:34"><name pos:start="526:30" pos:end="526:30">j</name> <operator pos:start="526:32" pos:end="526:32">=</operator> <literal type="number" pos:start="526:34" pos:end="526:34">0</literal></expr>;</init> <condition pos:start="526:37" pos:end="526:49"><expr pos:start="526:37" pos:end="526:48"><name pos:start="526:37" pos:end="526:37">j</name> <operator pos:start="526:39" pos:end="526:39">&lt;</operator> <name pos:start="526:41" pos:end="526:48">byte_run</name></expr>;</condition> <incr pos:start="526:51" pos:end="526:53"><expr pos:start="526:51" pos:end="526:53"><name pos:start="526:51" pos:end="526:51">j</name><operator pos:start="526:52" pos:end="526:53">++</operator></expr></incr>)</control> <block pos:start="526:56" pos:end="538:25">{<block_content pos:start="528:29" pos:end="536:63">

                            <expr_stmt pos:start="528:29" pos:end="528:76"><expr pos:start="528:29" pos:end="528:75"><name pos:start="528:29" pos:end="528:47"><name pos:start="528:29" pos:end="528:34">pixels</name><index pos:start="528:35" pos:end="528:47">[<expr pos:start="528:36" pos:end="528:46"><name pos:start="528:36" pos:end="528:44">pixel_ptr</name><operator pos:start="528:45" pos:end="528:46">++</operator></expr>]</index></name> <operator pos:start="528:49" pos:end="528:49">=</operator> <call pos:start="528:51" pos:end="528:75"><name pos:start="528:51" pos:end="528:70">bytestream2_get_byte</name><argument_list pos:start="528:71" pos:end="528:75">(<argument pos:start="528:72" pos:end="528:74"><expr pos:start="528:72" pos:end="528:74"><operator pos:start="528:72" pos:end="528:72">&amp;</operator><name pos:start="528:73" pos:end="528:74">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="530:29" pos:end="530:46"><expr pos:start="530:29" pos:end="530:45"><name pos:start="530:29" pos:end="530:43">pixel_countdown</name><operator pos:start="530:44" pos:end="530:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="532:29" pos:end="536:63"><if pos:start="532:29" pos:end="536:63">if <condition pos:start="532:32" pos:end="532:52">(<expr pos:start="532:33" pos:end="532:51"><name pos:start="532:33" pos:end="532:47">pixel_countdown</name> <operator pos:start="532:49" pos:end="532:49">&lt;</operator> <literal type="number" pos:start="532:51" pos:end="532:51">0</literal></expr>)</condition><block type="pseudo" pos:start="534:33" pos:end="536:63"><block_content pos:start="534:33" pos:end="536:63">

                                <expr_stmt pos:start="534:33" pos:end="536:63"><expr pos:start="534:33" pos:end="536:62"><call pos:start="534:33" pos:end="536:62"><name pos:start="534:33" pos:end="534:38">av_log</name><argument_list pos:start="534:39" pos:end="536:62">(<argument pos:start="534:40" pos:end="534:44"><expr pos:start="534:40" pos:end="534:44"><name pos:start="534:40" pos:end="534:44">avctx</name></expr></argument>, <argument pos:start="534:47" pos:end="534:58"><expr pos:start="534:47" pos:end="534:58"><name pos:start="534:47" pos:end="534:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="534:61" pos:end="534:99"><expr pos:start="534:61" pos:end="534:99"><literal type="string" pos:start="534:61" pos:end="534:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

                                       <argument pos:start="536:40" pos:end="536:54"><expr pos:start="536:40" pos:end="536:54"><name pos:start="536:40" pos:end="536:54">pixel_countdown</name></expr></argument>, <argument pos:start="536:57" pos:end="536:61"><expr pos:start="536:57" pos:end="536:61"><name pos:start="536:57" pos:end="536:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <expr_stmt pos:start="546:17" pos:end="546:47"><expr pos:start="546:17" pos:end="546:46"><name pos:start="546:17" pos:end="546:21">y_ptr</name> <operator pos:start="546:23" pos:end="546:24">+=</operator> <name pos:start="546:26" pos:end="546:46"><name pos:start="546:26" pos:end="546:26">s</name><operator pos:start="546:27" pos:end="546:28">-&gt;</operator><name pos:start="546:29" pos:end="546:33">frame</name><operator pos:start="546:34" pos:end="546:35">-&gt;</operator><name pos:start="546:36" pos:end="546:43">linesize</name><index pos:start="546:44" pos:end="546:46">[<expr pos:start="546:45" pos:end="546:45"><literal type="number" pos:start="546:45" pos:end="546:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="550:13" pos:end="550:18">break;</break>



        <case pos:start="554:9" pos:end="554:22">case <expr pos:start="554:14" pos:end="554:21"><name pos:start="554:14" pos:end="554:21">FLI_COPY</name></expr>:</case>

            <comment type="block" pos:start="556:13" pos:end="556:53">/* copy the chunk (uncompressed frame) */</comment>

            <if_stmt pos:start="558:13" pos:end="582:13"><if pos:start="558:13" pos:end="566:13">if <condition pos:start="558:16" pos:end="558:81">(<expr pos:start="558:17" pos:end="558:80"><name pos:start="558:17" pos:end="558:26">chunk_size</name> <operator pos:start="558:28" pos:end="558:28">-</operator> <literal type="number" pos:start="558:30" pos:end="558:30">6</literal> <operator pos:start="558:32" pos:end="558:33">!=</operator> <call pos:start="558:35" pos:end="558:61"><name pos:start="558:35" pos:end="558:41">FFALIGN</name><argument_list pos:start="558:42" pos:end="558:61">(<argument pos:start="558:43" pos:end="558:57"><expr pos:start="558:43" pos:end="558:57"><name pos:start="558:43" pos:end="558:57"><name pos:start="558:43" pos:end="558:43">s</name><operator pos:start="558:44" pos:end="558:45">-&gt;</operator><name pos:start="558:46" pos:end="558:50">avctx</name><operator pos:start="558:51" pos:end="558:52">-&gt;</operator><name pos:start="558:53" pos:end="558:57">width</name></name></expr></argument>, <argument pos:start="558:60" pos:end="558:60"><expr pos:start="558:60" pos:end="558:60"><literal type="number" pos:start="558:60" pos:end="558:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="558:63" pos:end="558:63">*</operator> <name pos:start="558:65" pos:end="558:80"><name pos:start="558:65" pos:end="558:65">s</name><operator pos:start="558:66" pos:end="558:67">-&gt;</operator><name pos:start="558:68" pos:end="558:72">avctx</name><operator pos:start="558:73" pos:end="558:74">-&gt;</operator><name pos:start="558:75" pos:end="558:80">height</name></name></expr>)</condition> <block pos:start="558:83" pos:end="566:13">{<block_content pos:start="560:17" pos:end="564:54">

                <expr_stmt pos:start="560:17" pos:end="562:79"><expr pos:start="560:17" pos:end="562:78"><call pos:start="560:17" pos:end="562:78"><name pos:start="560:17" pos:end="560:22">av_log</name><argument_list pos:start="560:23" pos:end="562:78">(<argument pos:start="560:24" pos:end="560:28"><expr pos:start="560:24" pos:end="560:28"><name pos:start="560:24" pos:end="560:28">avctx</name></expr></argument>, <argument pos:start="560:31" pos:end="560:42"><expr pos:start="560:31" pos:end="560:42"><name pos:start="560:31" pos:end="560:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="560:45" pos:end="562:61"><expr pos:start="560:45" pos:end="562:61"><literal type="string" pos:start="560:45" pos:end="560:89">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

                       <literal type="string" pos:start="562:24" pos:end="562:61">"has incorrect size, skipping chunk\n"</literal></expr></argument>, <argument pos:start="562:64" pos:end="562:77"><expr pos:start="562:64" pos:end="562:77"><name pos:start="562:64" pos:end="562:73">chunk_size</name> <operator pos:start="562:75" pos:end="562:75">-</operator> <literal type="number" pos:start="562:77" pos:end="562:77">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="564:17" pos:end="564:54"><expr pos:start="564:17" pos:end="564:53"><call pos:start="564:17" pos:end="564:53"><name pos:start="564:17" pos:end="564:32">bytestream2_skip</name><argument_list pos:start="564:33" pos:end="564:53">(<argument pos:start="564:34" pos:end="564:36"><expr pos:start="564:34" pos:end="564:36"><operator pos:start="564:34" pos:end="564:34">&amp;</operator><name pos:start="564:35" pos:end="564:36">g2</name></expr></argument>, <argument pos:start="564:39" pos:end="564:52"><expr pos:start="564:39" pos:end="564:52"><name pos:start="564:39" pos:end="564:48">chunk_size</name> <operator pos:start="564:50" pos:end="564:50">-</operator> <literal type="number" pos:start="564:52" pos:end="564:52">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="566:15" pos:end="582:13">else <block pos:start="566:20" pos:end="582:13">{<block_content pos:start="568:17" pos:end="580:17">

                <for pos:start="568:17" pos:end="580:17">for <control pos:start="568:21" pos:end="570:52">(<init pos:start="568:22" pos:end="568:31"><expr pos:start="568:22" pos:end="568:30"><name pos:start="568:22" pos:end="568:26">y_ptr</name> <operator pos:start="568:28" pos:end="568:28">=</operator> <literal type="number" pos:start="568:30" pos:end="568:30">0</literal></expr>;</init> <condition pos:start="568:33" pos:end="568:81"><expr pos:start="568:33" pos:end="568:80"><name pos:start="568:33" pos:end="568:37">y_ptr</name> <operator pos:start="568:39" pos:end="568:39">&lt;</operator> <name pos:start="568:41" pos:end="568:61"><name pos:start="568:41" pos:end="568:41">s</name><operator pos:start="568:42" pos:end="568:43">-&gt;</operator><name pos:start="568:44" pos:end="568:48">frame</name><operator pos:start="568:49" pos:end="568:50">-&gt;</operator><name pos:start="568:51" pos:end="568:58">linesize</name><index pos:start="568:59" pos:end="568:61">[<expr pos:start="568:60" pos:end="568:60"><literal type="number" pos:start="568:60" pos:end="568:60">0</literal></expr>]</index></name> <operator pos:start="568:63" pos:end="568:63">*</operator> <name pos:start="568:65" pos:end="568:80"><name pos:start="568:65" pos:end="568:65">s</name><operator pos:start="568:66" pos:end="568:67">-&gt;</operator><name pos:start="568:68" pos:end="568:72">avctx</name><operator pos:start="568:73" pos:end="568:74">-&gt;</operator><name pos:start="568:75" pos:end="568:80">height</name></name></expr>;</condition>

                     <incr pos:start="570:22" pos:end="570:51"><expr pos:start="570:22" pos:end="570:51"><name pos:start="570:22" pos:end="570:26">y_ptr</name> <operator pos:start="570:28" pos:end="570:29">+=</operator> <name pos:start="570:31" pos:end="570:51"><name pos:start="570:31" pos:end="570:31">s</name><operator pos:start="570:32" pos:end="570:33">-&gt;</operator><name pos:start="570:34" pos:end="570:38">frame</name><operator pos:start="570:39" pos:end="570:40">-&gt;</operator><name pos:start="570:41" pos:end="570:48">linesize</name><index pos:start="570:49" pos:end="570:51">[<expr pos:start="570:50" pos:end="570:50"><literal type="number" pos:start="570:50" pos:end="570:50">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="570:54" pos:end="580:17">{<block_content pos:start="572:21" pos:end="578:73">

                    <expr_stmt pos:start="572:21" pos:end="574:60"><expr pos:start="572:21" pos:end="574:59"><call pos:start="572:21" pos:end="574:59"><name pos:start="572:21" pos:end="572:42">bytestream2_get_buffer</name><argument_list pos:start="572:43" pos:end="574:59">(<argument pos:start="572:44" pos:end="572:46"><expr pos:start="572:44" pos:end="572:46"><operator pos:start="572:44" pos:end="572:44">&amp;</operator><name pos:start="572:45" pos:end="572:46">g2</name></expr></argument>, <argument pos:start="572:49" pos:end="572:62"><expr pos:start="572:49" pos:end="572:62"><operator pos:start="572:49" pos:end="572:49">&amp;</operator><name pos:start="572:50" pos:end="572:62"><name pos:start="572:50" pos:end="572:55">pixels</name><index pos:start="572:56" pos:end="572:62">[<expr pos:start="572:57" pos:end="572:61"><name pos:start="572:57" pos:end="572:61">y_ptr</name></expr>]</index></name></expr></argument>,

                                           <argument pos:start="574:44" pos:end="574:58"><expr pos:start="574:44" pos:end="574:58"><name pos:start="574:44" pos:end="574:58"><name pos:start="574:44" pos:end="574:44">s</name><operator pos:start="574:45" pos:end="574:46">-&gt;</operator><name pos:start="574:47" pos:end="574:51">avctx</name><operator pos:start="574:52" pos:end="574:53">-&gt;</operator><name pos:start="574:54" pos:end="574:58">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="576:21" pos:end="578:73"><if pos:start="576:21" pos:end="578:73">if <condition pos:start="576:24" pos:end="576:44">(<expr pos:start="576:25" pos:end="576:43"><name pos:start="576:25" pos:end="576:39"><name pos:start="576:25" pos:end="576:25">s</name><operator pos:start="576:26" pos:end="576:27">-&gt;</operator><name pos:start="576:28" pos:end="576:32">avctx</name><operator pos:start="576:33" pos:end="576:34">-&gt;</operator><name pos:start="576:35" pos:end="576:39">width</name></name> <operator pos:start="576:41" pos:end="576:41">&amp;</operator> <literal type="number" pos:start="576:43" pos:end="576:43">3</literal></expr>)</condition><block type="pseudo" pos:start="578:25" pos:end="578:73"><block_content pos:start="578:25" pos:end="578:73">

                        <expr_stmt pos:start="578:25" pos:end="578:73"><expr pos:start="578:25" pos:end="578:72"><call pos:start="578:25" pos:end="578:72"><name pos:start="578:25" pos:end="578:40">bytestream2_skip</name><argument_list pos:start="578:41" pos:end="578:72">(<argument pos:start="578:42" pos:end="578:44"><expr pos:start="578:42" pos:end="578:44"><operator pos:start="578:42" pos:end="578:42">&amp;</operator><name pos:start="578:43" pos:end="578:44">g2</name></expr></argument>, <argument pos:start="578:47" pos:end="578:71"><expr pos:start="578:47" pos:end="578:71"><literal type="number" pos:start="578:47" pos:end="578:49">4</literal> <operator pos:start="578:49" pos:end="578:49">-</operator> <operator pos:start="578:51" pos:end="578:51">(</operator><name pos:start="578:52" pos:end="578:66"><name pos:start="578:52" pos:end="578:52">s</name><operator pos:start="578:53" pos:end="578:54">-&gt;</operator><name pos:start="578:55" pos:end="578:59">avctx</name><operator pos:start="578:60" pos:end="578:61">-&gt;</operator><name pos:start="578:62" pos:end="578:66">width</name></name> <operator pos:start="578:68" pos:end="578:68">&amp;</operator> <literal type="number" pos:start="578:70" pos:end="578:70">3</literal><operator pos:start="578:71" pos:end="578:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="584:13" pos:end="584:18">break;</break>



        <case pos:start="588:9" pos:end="588:22">case <expr pos:start="588:14" pos:end="588:21"><name pos:start="588:14" pos:end="588:21">FLI_MINI</name></expr>:</case>

            <comment type="block" pos:start="590:13" pos:end="590:67">/* some sort of a thumbnail? disregard this chunk... */</comment>

            <break pos:start="592:13" pos:end="592:18">break;</break>



        <default pos:start="596:9" pos:end="596:16">default:</default>

            <expr_stmt pos:start="598:13" pos:end="598:85"><expr pos:start="598:13" pos:end="598:84"><call pos:start="598:13" pos:end="598:84"><name pos:start="598:13" pos:end="598:18">av_log</name><argument_list pos:start="598:19" pos:end="598:84">(<argument pos:start="598:20" pos:end="598:24"><expr pos:start="598:20" pos:end="598:24"><name pos:start="598:20" pos:end="598:24">avctx</name></expr></argument>, <argument pos:start="598:27" pos:end="598:38"><expr pos:start="598:27" pos:end="598:38"><name pos:start="598:27" pos:end="598:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="598:41" pos:end="598:71"><expr pos:start="598:41" pos:end="598:71"><literal type="string" pos:start="598:41" pos:end="598:71">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument pos:start="598:74" pos:end="598:83"><expr pos:start="598:74" pos:end="598:83"><name pos:start="598:74" pos:end="598:83">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="600:13" pos:end="600:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="606:9" pos:end="616:9"><if pos:start="606:9" pos:end="610:9">if <condition pos:start="606:12" pos:end="606:64">(<expr pos:start="606:13" pos:end="606:63"><name pos:start="606:13" pos:end="606:34">stream_ptr_after_chunk</name> <operator pos:start="606:36" pos:end="606:36">-</operator> <call pos:start="606:38" pos:end="606:58"><name pos:start="606:38" pos:end="606:53">bytestream2_tell</name><argument_list pos:start="606:54" pos:end="606:58">(<argument pos:start="606:55" pos:end="606:57"><expr pos:start="606:55" pos:end="606:57"><operator pos:start="606:55" pos:end="606:55">&amp;</operator><name pos:start="606:56" pos:end="606:57">g2</name></expr></argument>)</argument_list></call> <operator pos:start="606:60" pos:end="606:61">&gt;=</operator> <literal type="number" pos:start="606:63" pos:end="606:63">0</literal></expr>)</condition> <block pos:start="606:66" pos:end="610:9">{<block_content pos:start="608:13" pos:end="608:82">

            <expr_stmt pos:start="608:13" pos:end="608:82"><expr pos:start="608:13" pos:end="608:81"><call pos:start="608:13" pos:end="608:81"><name pos:start="608:13" pos:end="608:28">bytestream2_skip</name><argument_list pos:start="608:29" pos:end="608:81">(<argument pos:start="608:30" pos:end="608:32"><expr pos:start="608:30" pos:end="608:32"><operator pos:start="608:30" pos:end="608:30">&amp;</operator><name pos:start="608:31" pos:end="608:32">g2</name></expr></argument>, <argument pos:start="608:35" pos:end="608:80"><expr pos:start="608:35" pos:end="608:80"><name pos:start="608:35" pos:end="608:56">stream_ptr_after_chunk</name> <operator pos:start="608:58" pos:end="608:58">-</operator> <call pos:start="608:60" pos:end="608:80"><name pos:start="608:60" pos:end="608:75">bytestream2_tell</name><argument_list pos:start="608:76" pos:end="608:80">(<argument pos:start="608:77" pos:end="608:79"><expr pos:start="608:77" pos:end="608:79"><operator pos:start="608:77" pos:end="608:77">&amp;</operator><name pos:start="608:78" pos:end="608:79">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="610:11" pos:end="616:9">else <block pos:start="610:16" pos:end="616:9">{<block_content pos:start="612:13" pos:end="614:18">

            <expr_stmt pos:start="612:13" pos:end="612:60"><expr pos:start="612:13" pos:end="612:59"><call pos:start="612:13" pos:end="612:59"><name pos:start="612:13" pos:end="612:18">av_log</name><argument_list pos:start="612:19" pos:end="612:59">(<argument pos:start="612:20" pos:end="612:24"><expr pos:start="612:20" pos:end="612:24"><name pos:start="612:20" pos:end="612:24">avctx</name></expr></argument>, <argument pos:start="612:27" pos:end="612:38"><expr pos:start="612:27" pos:end="612:38"><name pos:start="612:27" pos:end="612:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="612:41" pos:end="612:58"><expr pos:start="612:41" pos:end="612:58"><literal type="string" pos:start="612:41" pos:end="612:58">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="614:13" pos:end="614:18">break;</break>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="620:9" pos:end="620:33"><expr pos:start="620:9" pos:end="620:32"><name pos:start="620:9" pos:end="620:18">frame_size</name> <operator pos:start="620:20" pos:end="620:21">-=</operator> <name pos:start="620:23" pos:end="620:32">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="622:9" pos:end="622:21"><expr pos:start="622:9" pos:end="622:20"><name pos:start="622:9" pos:end="622:18">num_chunks</name><operator pos:start="622:19" pos:end="622:20">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="628:5" pos:end="630:71">/* by the end of the chunk, the stream ptr should equal the frame

     * size (minus 1 or 2, possibly); if it doesn't, issue a warning */</comment>

    <if_stmt pos:start="632:5" pos:end="638:59"><if pos:start="632:5" pos:end="638:59">if <condition pos:start="632:8" pos:end="632:44">(<expr pos:start="632:9" pos:end="632:43"><call pos:start="632:9" pos:end="632:39"><name pos:start="632:9" pos:end="632:34">bytestream2_get_bytes_left</name><argument_list pos:start="632:35" pos:end="632:39">(<argument pos:start="632:36" pos:end="632:38"><expr pos:start="632:36" pos:end="632:38"><operator pos:start="632:36" pos:end="632:36">&amp;</operator><name pos:start="632:37" pos:end="632:38">g2</name></expr></argument>)</argument_list></call> <operator pos:start="632:41" pos:end="632:41">&gt;</operator> <literal type="number" pos:start="632:43" pos:end="632:43">2</literal></expr>)</condition><block type="pseudo" pos:start="634:9" pos:end="638:59"><block_content pos:start="634:9" pos:end="638:59">

        <expr_stmt pos:start="634:9" pos:end="638:59"><expr pos:start="634:9" pos:end="638:58"><call pos:start="634:9" pos:end="638:58"><name pos:start="634:9" pos:end="634:14">av_log</name><argument_list pos:start="634:15" pos:end="638:58">(<argument pos:start="634:16" pos:end="634:20"><expr pos:start="634:16" pos:end="634:20"><name pos:start="634:16" pos:end="634:20">avctx</name></expr></argument>, <argument pos:start="634:23" pos:end="634:34"><expr pos:start="634:23" pos:end="634:34"><name pos:start="634:23" pos:end="634:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="634:37" pos:end="636:43"><expr pos:start="634:37" pos:end="636:43"><literal type="string" pos:start="634:37" pos:end="634:80">"Processed FLI chunk where chunk size = %d "</literal> \

               <literal type="string" pos:start="636:16" pos:end="636:43">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument pos:start="636:46" pos:end="636:53"><expr pos:start="636:46" pos:end="636:53"><name pos:start="636:46" pos:end="636:53">buf_size</name></expr></argument>,

               <argument pos:start="638:16" pos:end="638:57"><expr pos:start="638:16" pos:end="638:57"><name pos:start="638:16" pos:end="638:23">buf_size</name> <operator pos:start="638:25" pos:end="638:25">-</operator> <call pos:start="638:27" pos:end="638:57"><name pos:start="638:27" pos:end="638:52">bytestream2_get_bytes_left</name><argument_list pos:start="638:53" pos:end="638:57">(<argument pos:start="638:54" pos:end="638:56"><expr pos:start="638:54" pos:end="638:56"><operator pos:start="638:54" pos:end="638:54">&amp;</operator><name pos:start="638:55" pos:end="638:56">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="642:5" pos:end="642:51">/* make the palette available on the way out */</comment>

    <expr_stmt pos:start="644:5" pos:end="644:58"><expr pos:start="644:5" pos:end="644:57"><call pos:start="644:5" pos:end="644:57"><name pos:start="644:5" pos:end="644:10">memcpy</name><argument_list pos:start="644:11" pos:end="644:57">(<argument pos:start="644:12" pos:end="644:28"><expr pos:start="644:12" pos:end="644:28"><name pos:start="644:12" pos:end="644:28"><name pos:start="644:12" pos:end="644:12">s</name><operator pos:start="644:13" pos:end="644:14">-&gt;</operator><name pos:start="644:15" pos:end="644:19">frame</name><operator pos:start="644:20" pos:end="644:21">-&gt;</operator><name pos:start="644:22" pos:end="644:25">data</name><index pos:start="644:26" pos:end="644:28">[<expr pos:start="644:27" pos:end="644:27"><literal type="number" pos:start="644:27" pos:end="644:27">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="644:31" pos:end="644:40"><expr pos:start="644:31" pos:end="644:40"><name pos:start="644:31" pos:end="644:40"><name pos:start="644:31" pos:end="644:31">s</name><operator pos:start="644:32" pos:end="644:33">-&gt;</operator><name pos:start="644:34" pos:end="644:40">palette</name></name></expr></argument>, <argument pos:start="644:43" pos:end="644:56"><expr pos:start="644:43" pos:end="644:56"><name pos:start="644:43" pos:end="644:56">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="646:5" pos:end="652:5"><if pos:start="646:5" pos:end="652:5">if <condition pos:start="646:8" pos:end="646:23">(<expr pos:start="646:9" pos:end="646:22"><name pos:start="646:9" pos:end="646:22"><name pos:start="646:9" pos:end="646:9">s</name><operator pos:start="646:10" pos:end="646:11">-&gt;</operator><name pos:start="646:12" pos:end="646:22">new_palette</name></name></expr>)</condition> <block pos:start="646:25" pos:end="652:5">{<block_content pos:start="648:9" pos:end="650:27">

        <expr_stmt pos:start="648:9" pos:end="648:42"><expr pos:start="648:9" pos:end="648:41"><name pos:start="648:9" pos:end="648:37"><name pos:start="648:9" pos:end="648:9">s</name><operator pos:start="648:10" pos:end="648:11">-&gt;</operator><name pos:start="648:12" pos:end="648:16">frame</name><operator pos:start="648:17" pos:end="648:18">-&gt;</operator><name pos:start="648:19" pos:end="648:37">palette_has_changed</name></name> <operator pos:start="648:39" pos:end="648:39">=</operator> <literal type="number" pos:start="648:41" pos:end="648:41">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="650:9" pos:end="650:27"><expr pos:start="650:9" pos:end="650:26"><name pos:start="650:9" pos:end="650:22"><name pos:start="650:9" pos:end="650:9">s</name><operator pos:start="650:10" pos:end="650:11">-&gt;</operator><name pos:start="650:12" pos:end="650:22">new_palette</name></name> <operator pos:start="650:24" pos:end="650:24">=</operator> <literal type="number" pos:start="650:26" pos:end="650:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="656:5" pos:end="658:19"><if pos:start="656:5" pos:end="658:19">if <condition pos:start="656:8" pos:end="656:49">(<expr pos:start="656:9" pos:end="656:48"><operator pos:start="656:9" pos:end="656:9">(</operator><name pos:start="656:10" pos:end="656:12">ret</name> <operator pos:start="656:14" pos:end="656:14">=</operator> <call pos:start="656:16" pos:end="656:43"><name pos:start="656:16" pos:end="656:27">av_frame_ref</name><argument_list pos:start="656:28" pos:end="656:43">(<argument pos:start="656:29" pos:end="656:32"><expr pos:start="656:29" pos:end="656:32"><name pos:start="656:29" pos:end="656:32">data</name></expr></argument>, <argument pos:start="656:35" pos:end="656:42"><expr pos:start="656:35" pos:end="656:42"><name pos:start="656:35" pos:end="656:42"><name pos:start="656:35" pos:end="656:35">s</name><operator pos:start="656:36" pos:end="656:37">-&gt;</operator><name pos:start="656:38" pos:end="656:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="656:44" pos:end="656:44">)</operator> <operator pos:start="656:46" pos:end="656:46">&lt;</operator> <literal type="number" pos:start="656:48" pos:end="656:48">0</literal></expr>)</condition><block type="pseudo" pos:start="658:9" pos:end="658:19"><block_content pos:start="658:9" pos:end="658:19">

        <return pos:start="658:9" pos:end="658:19">return <expr pos:start="658:16" pos:end="658:18"><name pos:start="658:16" pos:end="658:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="662:5" pos:end="662:19"><expr pos:start="662:5" pos:end="662:18"><operator pos:start="662:5" pos:end="662:5">*</operator><name pos:start="662:6" pos:end="662:14">got_frame</name> <operator pos:start="662:16" pos:end="662:16">=</operator> <literal type="number" pos:start="662:18" pos:end="662:18">1</literal></expr>;</expr_stmt>



    <return pos:start="666:5" pos:end="666:20">return <expr pos:start="666:12" pos:end="666:19"><name pos:start="666:12" pos:end="666:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
