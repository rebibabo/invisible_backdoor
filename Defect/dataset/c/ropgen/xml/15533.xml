<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15533.c" pos:tabs="8"><function pos:start="1:1" pos:end="371:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">do_interrupt_protected</name><parameter_list pos:start="1:35" pos:end="3:68">(<parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:44">intno</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:56">is_int</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:72">error_code</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:56"><decl pos:start="3:36" pos:end="3:56"><type pos:start="3:36" pos:end="3:56"><name pos:start="3:36" pos:end="3:43">unsigned</name> <name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:56">next_eip</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:67"><decl pos:start="3:59" pos:end="3:67"><type pos:start="3:59" pos:end="3:67"><name pos:start="3:59" pos:end="3:61">int</name></type> <name pos:start="3:63" pos:end="3:67">is_hw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="371:1">{<block_content pos:start="7:5" pos:end="369:60">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SegmentCache</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">dt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">ptr</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">ssp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">type</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">dpl</name></decl>, <decl pos:start="11:20" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:27">selector</name></decl>, <decl pos:start="11:30" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:30" pos:end="11:35">ss_dpl</name></decl>, <decl pos:start="11:38" pos:end="11:40"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:38" pos:end="11:40">cpl</name></decl>, <decl pos:start="11:43" pos:end="11:49"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:43" pos:end="11:49">sp_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">has_error_code</name></decl>, <decl pos:start="13:25" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:33">new_stack</name></decl>, <decl pos:start="13:36" pos:end="13:40"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:36" pos:end="13:40">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:51"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">e1</name></decl>, <decl pos:start="15:18" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:18" pos:end="15:19">e2</name></decl>, <decl pos:start="15:22" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:22" pos:end="15:27">offset</name></decl>, <decl pos:start="15:30" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:30" pos:end="15:31">ss</name></decl>, <decl pos:start="15:34" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:34" pos:end="15:36">esp</name></decl>, <decl pos:start="15:39" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:39" pos:end="15:43">ss_e1</name></decl>, <decl pos:start="15:46" pos:end="15:50"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:46" pos:end="15:50">ss_e2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:20">old_eip</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:18">has_error_code</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="47:5"><if pos:start="23:5" pos:end="47:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:15">is_int</name> <operator pos:start="23:17" pos:end="23:18">&amp;&amp;</operator> <operator pos:start="23:20" pos:end="23:20">!</operator><name pos:start="23:21" pos:end="23:25">is_hw</name></expr>)</condition> <block pos:start="23:28" pos:end="47:5">{<block_content pos:start="25:9" pos:end="45:9">

        <switch pos:start="25:9" pos:end="45:9">switch<condition pos:start="25:15" pos:end="25:21">(<expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">intno</name></expr>)</condition> <block pos:start="25:23" pos:end="45:9">{<block_content pos:start="27:9" pos:end="43:18">

        <case pos:start="27:9" pos:end="27:15">case <expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">8</literal></expr>:</case>

        <case pos:start="29:9" pos:end="29:16">case <expr pos:start="29:14" pos:end="29:15"><literal type="number" pos:start="29:14" pos:end="29:15">10</literal></expr>:</case>

        <case pos:start="31:9" pos:end="31:16">case <expr pos:start="31:14" pos:end="31:15"><literal type="number" pos:start="31:14" pos:end="31:15">11</literal></expr>:</case>

        <case pos:start="33:9" pos:end="33:16">case <expr pos:start="33:14" pos:end="33:15"><literal type="number" pos:start="33:14" pos:end="33:15">12</literal></expr>:</case>

        <case pos:start="35:9" pos:end="35:16">case <expr pos:start="35:14" pos:end="35:15"><literal type="number" pos:start="35:14" pos:end="35:15">13</literal></expr>:</case>

        <case pos:start="37:9" pos:end="37:16">case <expr pos:start="37:14" pos:end="37:15"><literal type="number" pos:start="37:14" pos:end="37:15">14</literal></expr>:</case>

        <case pos:start="39:9" pos:end="39:16">case <expr pos:start="39:14" pos:end="39:15"><literal type="number" pos:start="39:14" pos:end="39:15">17</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:26">has_error_code</name> <operator pos:start="41:28" pos:end="41:28">=</operator> <literal type="number" pos:start="41:30" pos:end="41:30">1</literal></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:6">dt</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <operator pos:start="51:10" pos:end="51:10">&amp;</operator><name pos:start="51:11" pos:end="51:18"><name pos:start="51:11" pos:end="51:13">env</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:18">idt</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:55"><if pos:start="53:5" pos:end="55:55">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:13">intno</name> <operator pos:start="53:15" pos:end="53:15">*</operator> <literal type="number" pos:start="53:17" pos:end="53:19">8</literal> <operator pos:start="53:19" pos:end="53:19">+</operator> <literal type="number" pos:start="53:21" pos:end="53:21">7</literal> <operator pos:start="53:23" pos:end="53:23">&gt;</operator> <name pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:26">dt</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:33">limit</name></name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:55"><block_content pos:start="55:9" pos:end="55:55">

        <expr_stmt pos:start="55:9" pos:end="55:55"><expr pos:start="55:9" pos:end="55:54"><call pos:start="55:9" pos:end="55:54"><name pos:start="55:9" pos:end="55:27">raise_exception_err</name><argument_list pos:start="55:28" pos:end="55:54">(<argument pos:start="55:29" pos:end="55:38"><expr pos:start="55:29" pos:end="55:38"><name pos:start="55:29" pos:end="55:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="55:41" pos:end="55:53"><expr pos:start="55:41" pos:end="55:53"><name pos:start="55:41" pos:end="55:45">intno</name> <operator pos:start="55:47" pos:end="55:47">*</operator> <literal type="number" pos:start="55:49" pos:end="55:51">8</literal> <operator pos:start="55:51" pos:end="55:51">+</operator> <literal type="number" pos:start="55:53" pos:end="55:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:7">ptr</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:18"><name pos:start="57:11" pos:end="57:12">dt</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:18">base</name></name> <operator pos:start="57:20" pos:end="57:20">+</operator> <name pos:start="57:22" pos:end="57:26">intno</name> <operator pos:start="57:28" pos:end="57:28">*</operator> <literal type="number" pos:start="57:30" pos:end="57:30">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:6">e1</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="59:24"><name pos:start="59:10" pos:end="59:19">ldl_kernel</name><argument_list pos:start="59:20" pos:end="59:24">(<argument pos:start="59:21" pos:end="59:23"><expr pos:start="59:21" pos:end="59:23"><name pos:start="59:21" pos:end="59:23">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:29"><expr pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:6">e2</name> <operator pos:start="61:8" pos:end="61:8">=</operator> <call pos:start="61:10" pos:end="61:28"><name pos:start="61:10" pos:end="61:19">ldl_kernel</name><argument_list pos:start="61:20" pos:end="61:28">(<argument pos:start="61:21" pos:end="61:27"><expr pos:start="61:21" pos:end="61:27"><name pos:start="61:21" pos:end="61:23">ptr</name> <operator pos:start="61:25" pos:end="61:25">+</operator> <literal type="number" pos:start="61:27" pos:end="61:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="63:5" pos:end="63:25">/* check gate type */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:42"><expr pos:start="65:5" pos:end="65:41"><name pos:start="65:5" pos:end="65:8">type</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <operator pos:start="65:12" pos:end="65:12">(</operator><name pos:start="65:13" pos:end="65:14">e2</name> <operator pos:start="65:16" pos:end="65:17">&gt;&gt;</operator> <name pos:start="65:19" pos:end="65:33">DESC_TYPE_SHIFT</name><operator pos:start="65:34" pos:end="65:34">)</operator> <operator pos:start="65:36" pos:end="65:36">&amp;</operator> <literal type="number" pos:start="65:38" pos:end="65:41">0x1f</literal></expr>;</expr_stmt>

    <switch pos:start="67:5" pos:end="129:5">switch<condition pos:start="67:11" pos:end="67:16">(<expr pos:start="67:12" pos:end="67:15"><name pos:start="67:12" pos:end="67:15">type</name></expr>)</condition> <block pos:start="67:18" pos:end="129:5">{<block_content pos:start="69:5" pos:end="127:14">

    <case pos:start="69:5" pos:end="69:11">case <expr pos:start="69:10" pos:end="69:10"><literal type="number" pos:start="69:10" pos:end="69:10">5</literal></expr>:</case> <comment type="block" pos:start="69:13" pos:end="69:27">/* task gate */</comment>

        <comment type="block" pos:start="71:9" pos:end="71:70">/* must do that check here to return the correct error code */</comment>

        <if_stmt pos:start="73:9" pos:end="75:61"><if pos:start="73:9" pos:end="75:61">if <condition pos:start="73:12" pos:end="73:32">(<expr pos:start="73:13" pos:end="73:31"><operator pos:start="73:13" pos:end="73:13">!</operator><operator pos:start="73:14" pos:end="73:14">(</operator><name pos:start="73:15" pos:end="73:16">e2</name> <operator pos:start="73:18" pos:end="73:18">&amp;</operator> <name pos:start="73:20" pos:end="73:30">DESC_P_MASK</name><operator pos:start="73:31" pos:end="73:31">)</operator></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:61"><block_content pos:start="75:13" pos:end="75:61">

            <expr_stmt pos:start="75:13" pos:end="75:61"><expr pos:start="75:13" pos:end="75:60"><call pos:start="75:13" pos:end="75:60"><name pos:start="75:13" pos:end="75:31">raise_exception_err</name><argument_list pos:start="75:32" pos:end="75:60">(<argument pos:start="75:33" pos:end="75:44"><expr pos:start="75:33" pos:end="75:44"><name pos:start="75:33" pos:end="75:44">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="75:47" pos:end="75:59"><expr pos:start="75:47" pos:end="75:59"><name pos:start="75:47" pos:end="75:51">intno</name> <operator pos:start="75:53" pos:end="75:53">*</operator> <literal type="number" pos:start="75:55" pos:end="75:57">8</literal> <operator pos:start="75:57" pos:end="75:57">+</operator> <literal type="number" pos:start="75:59" pos:end="75:59">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:55"><expr pos:start="77:9" pos:end="77:54"><call pos:start="77:9" pos:end="77:54"><name pos:start="77:9" pos:end="77:18">switch_tss</name><argument_list pos:start="77:19" pos:end="77:54">(<argument pos:start="77:20" pos:end="77:28"><expr pos:start="77:20" pos:end="77:28"><name pos:start="77:20" pos:end="77:24">intno</name> <operator pos:start="77:26" pos:end="77:26">*</operator> <literal type="number" pos:start="77:28" pos:end="77:28">8</literal></expr></argument>, <argument pos:start="77:31" pos:end="77:32"><expr pos:start="77:31" pos:end="77:32"><name pos:start="77:31" pos:end="77:32">e1</name></expr></argument>, <argument pos:start="77:35" pos:end="77:36"><expr pos:start="77:35" pos:end="77:36"><name pos:start="77:35" pos:end="77:36">e2</name></expr></argument>, <argument pos:start="77:39" pos:end="77:53"><expr pos:start="77:39" pos:end="77:53"><name pos:start="77:39" pos:end="77:53">SWITCH_TSS_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="109:9"><if pos:start="79:9" pos:end="109:9">if <condition pos:start="79:12" pos:end="79:27">(<expr pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:26">has_error_code</name></expr>)</condition> <block pos:start="79:29" pos:end="109:9">{<block_content pos:start="81:13" pos:end="107:73">

            <decl_stmt pos:start="81:13" pos:end="81:21"><decl pos:start="81:13" pos:end="81:20"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:20">mask</name></decl>;</decl_stmt>

            <comment type="block" pos:start="83:13" pos:end="83:37">/* push the error code */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:64"><expr pos:start="85:13" pos:end="85:63"><name pos:start="85:13" pos:end="85:17">shift</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:36"><name pos:start="85:22" pos:end="85:24">env</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:30">segs</name><index pos:start="85:31" pos:end="85:36">[<expr pos:start="85:32" pos:end="85:35"><name pos:start="85:32" pos:end="85:35">R_CS</name></expr>]</index></name><operator pos:start="85:37" pos:end="85:37">.</operator><name pos:start="85:38" pos:end="85:42">flags</name> <operator pos:start="85:44" pos:end="85:45">&gt;&gt;</operator> <name pos:start="85:47" pos:end="85:58">DESC_B_SHIFT</name><operator pos:start="85:59" pos:end="85:59">)</operator> <operator pos:start="85:61" pos:end="85:61">&amp;</operator> <literal type="number" pos:start="85:63" pos:end="85:63">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="93:30"><if pos:start="87:13" pos:end="89:34">if <condition pos:start="87:16" pos:end="87:52">(<expr pos:start="87:17" pos:end="87:51"><name pos:start="87:17" pos:end="87:31"><name pos:start="87:17" pos:end="87:19">env</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:25">segs</name><index pos:start="87:26" pos:end="87:31">[<expr pos:start="87:27" pos:end="87:30"><name pos:start="87:27" pos:end="87:30">R_SS</name></expr>]</index></name><operator pos:start="87:32" pos:end="87:32">.</operator><name pos:start="87:33" pos:end="87:37">flags</name> <operator pos:start="87:39" pos:end="87:39">&amp;</operator> <name pos:start="87:41" pos:end="87:51">DESC_B_MASK</name></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:34"><block_content pos:start="89:17" pos:end="89:34">

                <expr_stmt pos:start="89:17" pos:end="89:34"><expr pos:start="89:17" pos:end="89:33"><name pos:start="89:17" pos:end="89:20">mask</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <literal type="number" pos:start="89:24" pos:end="89:33">0xffffffff</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="91:13" pos:end="93:30">else<block type="pseudo" pos:start="93:17" pos:end="93:30"><block_content pos:start="93:17" pos:end="93:30">

                <expr_stmt pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:20">mask</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <literal type="number" pos:start="93:24" pos:end="93:29">0xffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:59"><expr pos:start="95:13" pos:end="95:58"><name pos:start="95:13" pos:end="95:15">esp</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <operator pos:start="95:19" pos:end="95:19">(</operator><name pos:start="95:20" pos:end="95:35"><name pos:start="95:20" pos:end="95:22">env</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:28">regs</name><index pos:start="95:29" pos:end="95:35">[<expr pos:start="95:30" pos:end="95:34"><name pos:start="95:30" pos:end="95:34">R_ESP</name></expr>]</index></name> <operator pos:start="95:37" pos:end="95:37">-</operator> <operator pos:start="95:39" pos:end="95:39">(</operator><literal type="number" pos:start="95:40" pos:end="95:40">2</literal> <operator pos:start="95:42" pos:end="95:43">&lt;&lt;</operator> <name pos:start="95:45" pos:end="95:49">shift</name><operator pos:start="95:50" pos:end="95:50">)</operator><operator pos:start="95:51" pos:end="95:51">)</operator> <operator pos:start="95:53" pos:end="95:53">&amp;</operator> <name pos:start="95:55" pos:end="95:58">mask</name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:45"><expr pos:start="97:13" pos:end="97:44"><name pos:start="97:13" pos:end="97:15">ssp</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:33"><name pos:start="97:19" pos:end="97:21">env</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:27">segs</name><index pos:start="97:28" pos:end="97:33">[<expr pos:start="97:29" pos:end="97:32"><name pos:start="97:29" pos:end="97:32">R_SS</name></expr>]</index></name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:38">base</name> <operator pos:start="97:40" pos:end="97:40">+</operator> <name pos:start="97:42" pos:end="97:44">esp</name></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="105:44"><if pos:start="99:13" pos:end="101:44">if <condition pos:start="99:16" pos:end="99:22">(<expr pos:start="99:17" pos:end="99:21"><name pos:start="99:17" pos:end="99:21">shift</name></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:44"><block_content pos:start="101:17" pos:end="101:44">

                <expr_stmt pos:start="101:17" pos:end="101:44"><expr pos:start="101:17" pos:end="101:43"><call pos:start="101:17" pos:end="101:43"><name pos:start="101:17" pos:end="101:26">stl_kernel</name><argument_list pos:start="101:27" pos:end="101:43">(<argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">ssp</name></expr></argument>, <argument pos:start="101:33" pos:end="101:42"><expr pos:start="101:33" pos:end="101:42"><name pos:start="101:33" pos:end="101:42">error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="103:13" pos:end="105:44">else<block type="pseudo" pos:start="105:17" pos:end="105:44"><block_content pos:start="105:17" pos:end="105:44">

                <expr_stmt pos:start="105:17" pos:end="105:44"><expr pos:start="105:17" pos:end="105:43"><call pos:start="105:17" pos:end="105:43"><name pos:start="105:17" pos:end="105:26">stw_kernel</name><argument_list pos:start="105:27" pos:end="105:43">(<argument pos:start="105:28" pos:end="105:30"><expr pos:start="105:28" pos:end="105:30"><name pos:start="105:28" pos:end="105:30">ssp</name></expr></argument>, <argument pos:start="105:33" pos:end="105:42"><expr pos:start="105:33" pos:end="105:42"><name pos:start="105:33" pos:end="105:42">error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:73"><expr pos:start="107:13" pos:end="107:72"><name pos:start="107:13" pos:end="107:28"><name pos:start="107:13" pos:end="107:15">env</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:21">regs</name><index pos:start="107:22" pos:end="107:28">[<expr pos:start="107:23" pos:end="107:27"><name pos:start="107:23" pos:end="107:27">R_ESP</name></expr>]</index></name> <operator pos:start="107:30" pos:end="107:30">=</operator> <operator pos:start="107:32" pos:end="107:32">(</operator><name pos:start="107:33" pos:end="107:35">esp</name> <operator pos:start="107:37" pos:end="107:37">&amp;</operator> <name pos:start="107:39" pos:end="107:42">mask</name><operator pos:start="107:43" pos:end="107:43">)</operator> <operator pos:start="107:45" pos:end="107:45">|</operator> <operator pos:start="107:47" pos:end="107:47">(</operator><name pos:start="107:48" pos:end="107:63"><name pos:start="107:48" pos:end="107:50">env</name><operator pos:start="107:51" pos:end="107:52">-&gt;</operator><name pos:start="107:53" pos:end="107:56">regs</name><index pos:start="107:57" pos:end="107:63">[<expr pos:start="107:58" pos:end="107:62"><name pos:start="107:58" pos:end="107:62">R_ESP</name></expr>]</index></name> <operator pos:start="107:65" pos:end="107:65">&amp;</operator> <operator pos:start="107:67" pos:end="107:67">~</operator><name pos:start="107:68" pos:end="107:71">mask</name><operator pos:start="107:72" pos:end="107:72">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="111:9" pos:end="111:15">return;</return>

    <case pos:start="113:5" pos:end="113:11">case <expr pos:start="113:10" pos:end="113:10"><literal type="number" pos:start="113:10" pos:end="113:10">6</literal></expr>:</case> <comment type="block" pos:start="113:13" pos:end="113:36">/* 286 interrupt gate */</comment>

    <case pos:start="115:5" pos:end="115:11">case <expr pos:start="115:10" pos:end="115:10"><literal type="number" pos:start="115:10" pos:end="115:10">7</literal></expr>:</case> <comment type="block" pos:start="115:13" pos:end="115:31">/* 286 trap gate */</comment>

    <case pos:start="117:5" pos:end="117:12">case <expr pos:start="117:10" pos:end="117:11"><literal type="number" pos:start="117:10" pos:end="117:11">14</literal></expr>:</case> <comment type="block" pos:start="117:14" pos:end="117:37">/* 386 interrupt gate */</comment>

    <case pos:start="119:5" pos:end="119:12">case <expr pos:start="119:10" pos:end="119:11"><literal type="number" pos:start="119:10" pos:end="119:11">15</literal></expr>:</case> <comment type="block" pos:start="119:14" pos:end="119:32">/* 386 trap gate */</comment>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <default pos:start="123:5" pos:end="123:12">default:</default>

        <expr_stmt pos:start="125:9" pos:end="125:55"><expr pos:start="125:9" pos:end="125:54"><call pos:start="125:9" pos:end="125:54"><name pos:start="125:9" pos:end="125:27">raise_exception_err</name><argument_list pos:start="125:28" pos:end="125:54">(<argument pos:start="125:29" pos:end="125:38"><expr pos:start="125:29" pos:end="125:38"><name pos:start="125:29" pos:end="125:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="125:41" pos:end="125:53"><expr pos:start="125:41" pos:end="125:53"><name pos:start="125:41" pos:end="125:45">intno</name> <operator pos:start="125:47" pos:end="125:47">*</operator> <literal type="number" pos:start="125:49" pos:end="125:51">8</literal> <operator pos:start="125:51" pos:end="125:51">+</operator> <literal type="number" pos:start="125:53" pos:end="125:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="131:5" pos:end="131:37"><expr pos:start="131:5" pos:end="131:36"><name pos:start="131:5" pos:end="131:7">dpl</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <operator pos:start="131:11" pos:end="131:11">(</operator><name pos:start="131:12" pos:end="131:13">e2</name> <operator pos:start="131:15" pos:end="131:16">&gt;&gt;</operator> <name pos:start="131:18" pos:end="131:31">DESC_DPL_SHIFT</name><operator pos:start="131:32" pos:end="131:32">)</operator> <operator pos:start="131:34" pos:end="131:34">&amp;</operator> <literal type="number" pos:start="131:36" pos:end="131:36">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:36"><expr pos:start="133:5" pos:end="133:35"><name pos:start="133:5" pos:end="133:7">cpl</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <name pos:start="133:11" pos:end="133:21"><name pos:start="133:11" pos:end="133:13">env</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:21">hflags</name></name> <operator pos:start="133:23" pos:end="133:23">&amp;</operator> <name pos:start="133:25" pos:end="133:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <comment type="block" pos:start="135:5" pos:end="135:41">/* check privledge if software int */</comment>

    <if_stmt pos:start="137:5" pos:end="139:55"><if pos:start="137:5" pos:end="139:55">if <condition pos:start="137:8" pos:end="137:28">(<expr pos:start="137:9" pos:end="137:27"><name pos:start="137:9" pos:end="137:14">is_int</name> <operator pos:start="137:16" pos:end="137:17">&amp;&amp;</operator> <name pos:start="137:19" pos:end="137:21">dpl</name> <operator pos:start="137:23" pos:end="137:23">&lt;</operator> <name pos:start="137:25" pos:end="137:27">cpl</name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:55"><block_content pos:start="139:9" pos:end="139:55">

        <expr_stmt pos:start="139:9" pos:end="139:55"><expr pos:start="139:9" pos:end="139:54"><call pos:start="139:9" pos:end="139:54"><name pos:start="139:9" pos:end="139:27">raise_exception_err</name><argument_list pos:start="139:28" pos:end="139:54">(<argument pos:start="139:29" pos:end="139:38"><expr pos:start="139:29" pos:end="139:38"><name pos:start="139:29" pos:end="139:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="139:41" pos:end="139:53"><expr pos:start="139:41" pos:end="139:53"><name pos:start="139:41" pos:end="139:45">intno</name> <operator pos:start="139:47" pos:end="139:47">*</operator> <literal type="number" pos:start="139:49" pos:end="139:51">8</literal> <operator pos:start="139:51" pos:end="139:51">+</operator> <literal type="number" pos:start="139:53" pos:end="139:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="141:5" pos:end="141:25">/* check valid bit */</comment>

    <if_stmt pos:start="143:5" pos:end="145:57"><if pos:start="143:5" pos:end="145:57">if <condition pos:start="143:8" pos:end="143:28">(<expr pos:start="143:9" pos:end="143:27"><operator pos:start="143:9" pos:end="143:9">!</operator><operator pos:start="143:10" pos:end="143:10">(</operator><name pos:start="143:11" pos:end="143:12">e2</name> <operator pos:start="143:14" pos:end="143:14">&amp;</operator> <name pos:start="143:16" pos:end="143:26">DESC_P_MASK</name><operator pos:start="143:27" pos:end="143:27">)</operator></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:57"><block_content pos:start="145:9" pos:end="145:57">

        <expr_stmt pos:start="145:9" pos:end="145:57"><expr pos:start="145:9" pos:end="145:56"><call pos:start="145:9" pos:end="145:56"><name pos:start="145:9" pos:end="145:27">raise_exception_err</name><argument_list pos:start="145:28" pos:end="145:56">(<argument pos:start="145:29" pos:end="145:40"><expr pos:start="145:29" pos:end="145:40"><name pos:start="145:29" pos:end="145:40">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="145:43" pos:end="145:55"><expr pos:start="145:43" pos:end="145:55"><name pos:start="145:43" pos:end="145:47">intno</name> <operator pos:start="145:49" pos:end="145:49">*</operator> <literal type="number" pos:start="145:51" pos:end="145:53">8</literal> <operator pos:start="145:53" pos:end="145:53">+</operator> <literal type="number" pos:start="145:55" pos:end="145:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:24"><expr pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:12">selector</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <name pos:start="147:16" pos:end="147:17">e1</name> <operator pos:start="147:19" pos:end="147:20">&gt;&gt;</operator> <literal type="number" pos:start="147:22" pos:end="147:23">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:51"><expr pos:start="149:5" pos:end="149:50"><name pos:start="149:5" pos:end="149:10">offset</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <operator pos:start="149:14" pos:end="149:14">(</operator><name pos:start="149:15" pos:end="149:16">e2</name> <operator pos:start="149:18" pos:end="149:18">&amp;</operator> <literal type="number" pos:start="149:20" pos:end="149:29">0xffff0000</literal><operator pos:start="149:30" pos:end="149:30">)</operator> <operator pos:start="149:32" pos:end="149:32">|</operator> <operator pos:start="149:34" pos:end="149:34">(</operator><name pos:start="149:35" pos:end="149:36">e1</name> <operator pos:start="149:38" pos:end="149:38">&amp;</operator> <literal type="number" pos:start="149:40" pos:end="149:49">0x0000ffff</literal><operator pos:start="149:50" pos:end="149:50">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="153:43"><if pos:start="151:5" pos:end="153:43">if <condition pos:start="151:8" pos:end="151:33">(<expr pos:start="151:9" pos:end="151:32"><operator pos:start="151:9" pos:end="151:9">(</operator><name pos:start="151:10" pos:end="151:17">selector</name> <operator pos:start="151:19" pos:end="151:19">&amp;</operator> <literal type="number" pos:start="151:21" pos:end="151:26">0xfffc</literal><operator pos:start="151:27" pos:end="151:27">)</operator> <operator pos:start="151:29" pos:end="151:30">==</operator> <literal type="number" pos:start="151:32" pos:end="151:32">0</literal></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:43"><block_content pos:start="153:9" pos:end="153:43">

        <expr_stmt pos:start="153:9" pos:end="153:43"><expr pos:start="153:9" pos:end="153:42"><call pos:start="153:9" pos:end="153:42"><name pos:start="153:9" pos:end="153:27">raise_exception_err</name><argument_list pos:start="153:28" pos:end="153:42">(<argument pos:start="153:29" pos:end="153:38"><expr pos:start="153:29" pos:end="153:38"><name pos:start="153:29" pos:end="153:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="153:41" pos:end="153:41"><expr pos:start="153:41" pos:end="153:41"><literal type="number" pos:start="153:41" pos:end="153:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="159:59"><if pos:start="157:5" pos:end="159:59">if <condition pos:start="157:8" pos:end="157:46">(<expr pos:start="157:9" pos:end="157:45"><call pos:start="157:9" pos:end="157:40"><name pos:start="157:9" pos:end="157:20">load_segment</name><argument_list pos:start="157:21" pos:end="157:40">(<argument pos:start="157:22" pos:end="157:24"><expr pos:start="157:22" pos:end="157:24"><operator pos:start="157:22" pos:end="157:22">&amp;</operator><name pos:start="157:23" pos:end="157:24">e1</name></expr></argument>, <argument pos:start="157:27" pos:end="157:29"><expr pos:start="157:27" pos:end="157:29"><operator pos:start="157:27" pos:end="157:27">&amp;</operator><name pos:start="157:28" pos:end="157:29">e2</name></expr></argument>, <argument pos:start="157:32" pos:end="157:39"><expr pos:start="157:32" pos:end="157:39"><name pos:start="157:32" pos:end="157:39">selector</name></expr></argument>)</argument_list></call> <operator pos:start="157:42" pos:end="157:43">!=</operator> <literal type="number" pos:start="157:45" pos:end="157:45">0</literal></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:59"><block_content pos:start="159:9" pos:end="159:59">

        <expr_stmt pos:start="159:9" pos:end="159:59"><expr pos:start="159:9" pos:end="159:58"><call pos:start="159:9" pos:end="159:58"><name pos:start="159:9" pos:end="159:27">raise_exception_err</name><argument_list pos:start="159:28" pos:end="159:58">(<argument pos:start="159:29" pos:end="159:38"><expr pos:start="159:29" pos:end="159:38"><name pos:start="159:29" pos:end="159:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="159:41" pos:end="159:57"><expr pos:start="159:41" pos:end="159:57"><name pos:start="159:41" pos:end="159:48">selector</name> <operator pos:start="159:50" pos:end="159:50">&amp;</operator> <literal type="number" pos:start="159:52" pos:end="159:57">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="161:5" pos:end="163:59"><if pos:start="161:5" pos:end="163:59">if <condition pos:start="161:8" pos:end="161:54">(<expr pos:start="161:9" pos:end="161:53"><operator pos:start="161:9" pos:end="161:9">!</operator><operator pos:start="161:10" pos:end="161:10">(</operator><name pos:start="161:11" pos:end="161:12">e2</name> <operator pos:start="161:14" pos:end="161:14">&amp;</operator> <name pos:start="161:16" pos:end="161:26">DESC_S_MASK</name><operator pos:start="161:27" pos:end="161:27">)</operator> <operator pos:start="161:29" pos:end="161:30">||</operator> <operator pos:start="161:32" pos:end="161:32">!</operator><operator pos:start="161:33" pos:end="161:33">(</operator><name pos:start="161:34" pos:end="161:35">e2</name> <operator pos:start="161:37" pos:end="161:37">&amp;</operator> <operator pos:start="161:39" pos:end="161:39">(</operator><name pos:start="161:40" pos:end="161:51">DESC_CS_MASK</name><operator pos:start="161:52" pos:end="161:52">)</operator><operator pos:start="161:53" pos:end="161:53">)</operator></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:59"><block_content pos:start="163:9" pos:end="163:59">

        <expr_stmt pos:start="163:9" pos:end="163:59"><expr pos:start="163:9" pos:end="163:58"><call pos:start="163:9" pos:end="163:58"><name pos:start="163:9" pos:end="163:27">raise_exception_err</name><argument_list pos:start="163:28" pos:end="163:58">(<argument pos:start="163:29" pos:end="163:38"><expr pos:start="163:29" pos:end="163:38"><name pos:start="163:29" pos:end="163:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="163:41" pos:end="163:57"><expr pos:start="163:41" pos:end="163:57"><name pos:start="163:41" pos:end="163:48">selector</name> <operator pos:start="163:50" pos:end="163:50">&amp;</operator> <literal type="number" pos:start="163:52" pos:end="163:57">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:37"><expr pos:start="165:5" pos:end="165:36"><name pos:start="165:5" pos:end="165:7">dpl</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <operator pos:start="165:11" pos:end="165:11">(</operator><name pos:start="165:12" pos:end="165:13">e2</name> <operator pos:start="165:15" pos:end="165:16">&gt;&gt;</operator> <name pos:start="165:18" pos:end="165:31">DESC_DPL_SHIFT</name><operator pos:start="165:32" pos:end="165:32">)</operator> <operator pos:start="165:34" pos:end="165:34">&amp;</operator> <literal type="number" pos:start="165:36" pos:end="165:36">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="169:59"><if pos:start="167:5" pos:end="169:59">if <condition pos:start="167:8" pos:end="167:18">(<expr pos:start="167:9" pos:end="167:17"><name pos:start="167:9" pos:end="167:11">dpl</name> <operator pos:start="167:13" pos:end="167:13">&gt;</operator> <name pos:start="167:15" pos:end="167:17">cpl</name></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:59"><block_content pos:start="169:9" pos:end="169:59">

        <expr_stmt pos:start="169:9" pos:end="169:59"><expr pos:start="169:9" pos:end="169:58"><call pos:start="169:9" pos:end="169:58"><name pos:start="169:9" pos:end="169:27">raise_exception_err</name><argument_list pos:start="169:28" pos:end="169:58">(<argument pos:start="169:29" pos:end="169:38"><expr pos:start="169:29" pos:end="169:38"><name pos:start="169:29" pos:end="169:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="169:41" pos:end="169:57"><expr pos:start="169:41" pos:end="169:57"><name pos:start="169:41" pos:end="169:48">selector</name> <operator pos:start="169:50" pos:end="169:50">&amp;</operator> <literal type="number" pos:start="169:52" pos:end="169:57">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="171:5" pos:end="173:61"><if pos:start="171:5" pos:end="173:61">if <condition pos:start="171:8" pos:end="171:28">(<expr pos:start="171:9" pos:end="171:27"><operator pos:start="171:9" pos:end="171:9">!</operator><operator pos:start="171:10" pos:end="171:10">(</operator><name pos:start="171:11" pos:end="171:12">e2</name> <operator pos:start="171:14" pos:end="171:14">&amp;</operator> <name pos:start="171:16" pos:end="171:26">DESC_P_MASK</name><operator pos:start="171:27" pos:end="171:27">)</operator></expr>)</condition><block type="pseudo" pos:start="173:9" pos:end="173:61"><block_content pos:start="173:9" pos:end="173:61">

        <expr_stmt pos:start="173:9" pos:end="173:61"><expr pos:start="173:9" pos:end="173:60"><call pos:start="173:9" pos:end="173:60"><name pos:start="173:9" pos:end="173:27">raise_exception_err</name><argument_list pos:start="173:28" pos:end="173:60">(<argument pos:start="173:29" pos:end="173:40"><expr pos:start="173:29" pos:end="173:40"><name pos:start="173:29" pos:end="173:40">EXCP0B_NOSEG</name></expr></argument>, <argument pos:start="173:43" pos:end="173:59"><expr pos:start="173:43" pos:end="173:59"><name pos:start="173:43" pos:end="173:50">selector</name> <operator pos:start="173:52" pos:end="173:52">&amp;</operator> <literal type="number" pos:start="173:54" pos:end="173:59">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="175:5" pos:end="241:5"><if pos:start="175:5" pos:end="217:5">if <condition pos:start="175:8" pos:end="175:41">(<expr pos:start="175:9" pos:end="175:40"><operator pos:start="175:9" pos:end="175:9">!</operator><operator pos:start="175:10" pos:end="175:10">(</operator><name pos:start="175:11" pos:end="175:12">e2</name> <operator pos:start="175:14" pos:end="175:14">&amp;</operator> <name pos:start="175:16" pos:end="175:26">DESC_C_MASK</name><operator pos:start="175:27" pos:end="175:27">)</operator> <operator pos:start="175:29" pos:end="175:30">&amp;&amp;</operator> <name pos:start="175:32" pos:end="175:34">dpl</name> <operator pos:start="175:36" pos:end="175:36">&lt;</operator> <name pos:start="175:38" pos:end="175:40">cpl</name></expr>)</condition> <block pos:start="175:43" pos:end="217:5">{<block_content pos:start="179:9" pos:end="215:41">

        <comment type="block" pos:start="177:9" pos:end="177:33">/* to inner priviledge */</comment>

        <expr_stmt pos:start="179:9" pos:end="179:44"><expr pos:start="179:9" pos:end="179:43"><call pos:start="179:9" pos:end="179:43"><name pos:start="179:9" pos:end="179:27">get_ss_esp_from_tss</name><argument_list pos:start="179:28" pos:end="179:43">(<argument pos:start="179:29" pos:end="179:31"><expr pos:start="179:29" pos:end="179:31"><operator pos:start="179:29" pos:end="179:29">&amp;</operator><name pos:start="179:30" pos:end="179:31">ss</name></expr></argument>, <argument pos:start="179:34" pos:end="179:37"><expr pos:start="179:34" pos:end="179:37"><operator pos:start="179:34" pos:end="179:34">&amp;</operator><name pos:start="179:35" pos:end="179:37">esp</name></expr></argument>, <argument pos:start="179:40" pos:end="179:42"><expr pos:start="179:40" pos:end="179:42"><name pos:start="179:40" pos:end="179:42">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="183:57"><if pos:start="181:9" pos:end="183:57">if <condition pos:start="181:12" pos:end="181:31">(<expr pos:start="181:13" pos:end="181:30"><operator pos:start="181:13" pos:end="181:13">(</operator><name pos:start="181:14" pos:end="181:15">ss</name> <operator pos:start="181:17" pos:end="181:17">&amp;</operator> <literal type="number" pos:start="181:19" pos:end="181:24">0xfffc</literal><operator pos:start="181:25" pos:end="181:25">)</operator> <operator pos:start="181:27" pos:end="181:28">==</operator> <literal type="number" pos:start="181:30" pos:end="181:30">0</literal></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:57"><block_content pos:start="183:13" pos:end="183:57">

            <expr_stmt pos:start="183:13" pos:end="183:57"><expr pos:start="183:13" pos:end="183:56"><call pos:start="183:13" pos:end="183:56"><name pos:start="183:13" pos:end="183:31">raise_exception_err</name><argument_list pos:start="183:32" pos:end="183:56">(<argument pos:start="183:33" pos:end="183:42"><expr pos:start="183:33" pos:end="183:42"><name pos:start="183:33" pos:end="183:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="183:45" pos:end="183:55"><expr pos:start="183:45" pos:end="183:55"><name pos:start="183:45" pos:end="183:46">ss</name> <operator pos:start="183:48" pos:end="183:48">&amp;</operator> <literal type="number" pos:start="183:50" pos:end="183:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="185:9" pos:end="187:57"><if pos:start="185:9" pos:end="187:57">if <condition pos:start="185:12" pos:end="185:28">(<expr pos:start="185:13" pos:end="185:27"><operator pos:start="185:13" pos:end="185:13">(</operator><name pos:start="185:14" pos:end="185:15">ss</name> <operator pos:start="185:17" pos:end="185:17">&amp;</operator> <literal type="number" pos:start="185:19" pos:end="185:19">3</literal><operator pos:start="185:20" pos:end="185:20">)</operator> <operator pos:start="185:22" pos:end="185:23">!=</operator> <name pos:start="185:25" pos:end="185:27">dpl</name></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:57"><block_content pos:start="187:13" pos:end="187:57">

            <expr_stmt pos:start="187:13" pos:end="187:57"><expr pos:start="187:13" pos:end="187:56"><call pos:start="187:13" pos:end="187:56"><name pos:start="187:13" pos:end="187:31">raise_exception_err</name><argument_list pos:start="187:32" pos:end="187:56">(<argument pos:start="187:33" pos:end="187:42"><expr pos:start="187:33" pos:end="187:42"><name pos:start="187:33" pos:end="187:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="187:45" pos:end="187:55"><expr pos:start="187:45" pos:end="187:55"><name pos:start="187:45" pos:end="187:46">ss</name> <operator pos:start="187:48" pos:end="187:48">&amp;</operator> <literal type="number" pos:start="187:50" pos:end="187:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="189:9" pos:end="191:57"><if pos:start="189:9" pos:end="191:57">if <condition pos:start="189:12" pos:end="189:50">(<expr pos:start="189:13" pos:end="189:49"><call pos:start="189:13" pos:end="189:44"><name pos:start="189:13" pos:end="189:24">load_segment</name><argument_list pos:start="189:25" pos:end="189:44">(<argument pos:start="189:26" pos:end="189:31"><expr pos:start="189:26" pos:end="189:31"><operator pos:start="189:26" pos:end="189:26">&amp;</operator><name pos:start="189:27" pos:end="189:31">ss_e1</name></expr></argument>, <argument pos:start="189:34" pos:end="189:39"><expr pos:start="189:34" pos:end="189:39"><operator pos:start="189:34" pos:end="189:34">&amp;</operator><name pos:start="189:35" pos:end="189:39">ss_e2</name></expr></argument>, <argument pos:start="189:42" pos:end="189:43"><expr pos:start="189:42" pos:end="189:43"><name pos:start="189:42" pos:end="189:43">ss</name></expr></argument>)</argument_list></call> <operator pos:start="189:46" pos:end="189:47">!=</operator> <literal type="number" pos:start="189:49" pos:end="189:49">0</literal></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:57"><block_content pos:start="191:13" pos:end="191:57">

            <expr_stmt pos:start="191:13" pos:end="191:57"><expr pos:start="191:13" pos:end="191:56"><call pos:start="191:13" pos:end="191:56"><name pos:start="191:13" pos:end="191:31">raise_exception_err</name><argument_list pos:start="191:32" pos:end="191:56">(<argument pos:start="191:33" pos:end="191:42"><expr pos:start="191:33" pos:end="191:42"><name pos:start="191:33" pos:end="191:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="191:45" pos:end="191:55"><expr pos:start="191:45" pos:end="191:55"><name pos:start="191:45" pos:end="191:46">ss</name> <operator pos:start="191:48" pos:end="191:48">&amp;</operator> <literal type="number" pos:start="191:50" pos:end="191:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:47"><expr pos:start="193:9" pos:end="193:46"><name pos:start="193:9" pos:end="193:14">ss_dpl</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <operator pos:start="193:18" pos:end="193:18">(</operator><name pos:start="193:19" pos:end="193:23">ss_e2</name> <operator pos:start="193:25" pos:end="193:26">&gt;&gt;</operator> <name pos:start="193:28" pos:end="193:41">DESC_DPL_SHIFT</name><operator pos:start="193:42" pos:end="193:42">)</operator> <operator pos:start="193:44" pos:end="193:44">&amp;</operator> <literal type="number" pos:start="193:46" pos:end="193:46">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="197:57"><if pos:start="195:9" pos:end="197:57">if <condition pos:start="195:12" pos:end="195:26">(<expr pos:start="195:13" pos:end="195:25"><name pos:start="195:13" pos:end="195:18">ss_dpl</name> <operator pos:start="195:20" pos:end="195:21">!=</operator> <name pos:start="195:23" pos:end="195:25">dpl</name></expr>)</condition><block type="pseudo" pos:start="197:13" pos:end="197:57"><block_content pos:start="197:13" pos:end="197:57">

            <expr_stmt pos:start="197:13" pos:end="197:57"><expr pos:start="197:13" pos:end="197:56"><call pos:start="197:13" pos:end="197:56"><name pos:start="197:13" pos:end="197:31">raise_exception_err</name><argument_list pos:start="197:32" pos:end="197:56">(<argument pos:start="197:33" pos:end="197:42"><expr pos:start="197:33" pos:end="197:42"><name pos:start="197:33" pos:end="197:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="197:45" pos:end="197:55"><expr pos:start="197:45" pos:end="197:55"><name pos:start="197:45" pos:end="197:46">ss</name> <operator pos:start="197:48" pos:end="197:48">&amp;</operator> <literal type="number" pos:start="197:50" pos:end="197:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="205:57"><if pos:start="199:9" pos:end="205:57">if <condition pos:start="199:12" pos:end="203:35">(<expr pos:start="199:13" pos:end="203:34"><operator pos:start="199:13" pos:end="199:13">!</operator><operator pos:start="199:14" pos:end="199:14">(</operator><name pos:start="199:15" pos:end="199:19">ss_e2</name> <operator pos:start="199:21" pos:end="199:21">&amp;</operator> <name pos:start="199:23" pos:end="199:33">DESC_S_MASK</name><operator pos:start="199:34" pos:end="199:34">)</operator> <operator pos:start="199:36" pos:end="199:37">||</operator>

            <operator pos:start="201:13" pos:end="201:13">(</operator><name pos:start="201:14" pos:end="201:18">ss_e2</name> <operator pos:start="201:20" pos:end="201:20">&amp;</operator> <name pos:start="201:22" pos:end="201:33">DESC_CS_MASK</name><operator pos:start="201:34" pos:end="201:34">)</operator> <operator pos:start="201:36" pos:end="201:37">||</operator>

            <operator pos:start="203:13" pos:end="203:13">!</operator><operator pos:start="203:14" pos:end="203:14">(</operator><name pos:start="203:15" pos:end="203:19">ss_e2</name> <operator pos:start="203:21" pos:end="203:21">&amp;</operator> <name pos:start="203:23" pos:end="203:33">DESC_W_MASK</name><operator pos:start="203:34" pos:end="203:34">)</operator></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:57"><block_content pos:start="205:13" pos:end="205:57">

            <expr_stmt pos:start="205:13" pos:end="205:57"><expr pos:start="205:13" pos:end="205:56"><call pos:start="205:13" pos:end="205:56"><name pos:start="205:13" pos:end="205:31">raise_exception_err</name><argument_list pos:start="205:32" pos:end="205:56">(<argument pos:start="205:33" pos:end="205:42"><expr pos:start="205:33" pos:end="205:42"><name pos:start="205:33" pos:end="205:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="205:45" pos:end="205:55"><expr pos:start="205:45" pos:end="205:55"><name pos:start="205:45" pos:end="205:46">ss</name> <operator pos:start="205:48" pos:end="205:48">&amp;</operator> <literal type="number" pos:start="205:50" pos:end="205:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="207:9" pos:end="209:57"><if pos:start="207:9" pos:end="209:57">if <condition pos:start="207:12" pos:end="207:35">(<expr pos:start="207:13" pos:end="207:34"><operator pos:start="207:13" pos:end="207:13">!</operator><operator pos:start="207:14" pos:end="207:14">(</operator><name pos:start="207:15" pos:end="207:19">ss_e2</name> <operator pos:start="207:21" pos:end="207:21">&amp;</operator> <name pos:start="207:23" pos:end="207:33">DESC_P_MASK</name><operator pos:start="207:34" pos:end="207:34">)</operator></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="209:57"><block_content pos:start="209:13" pos:end="209:57">

            <expr_stmt pos:start="209:13" pos:end="209:57"><expr pos:start="209:13" pos:end="209:56"><call pos:start="209:13" pos:end="209:56"><name pos:start="209:13" pos:end="209:31">raise_exception_err</name><argument_list pos:start="209:32" pos:end="209:56">(<argument pos:start="209:33" pos:end="209:42"><expr pos:start="209:33" pos:end="209:42"><name pos:start="209:33" pos:end="209:42">EXCP0A_TSS</name></expr></argument>, <argument pos:start="209:45" pos:end="209:55"><expr pos:start="209:45" pos:end="209:55"><name pos:start="209:45" pos:end="209:46">ss</name> <operator pos:start="209:48" pos:end="209:48">&amp;</operator> <literal type="number" pos:start="209:50" pos:end="209:55">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:22"><expr pos:start="211:9" pos:end="211:21"><name pos:start="211:9" pos:end="211:17">new_stack</name> <operator pos:start="211:19" pos:end="211:19">=</operator> <literal type="number" pos:start="211:21" pos:end="211:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:37"><expr pos:start="213:9" pos:end="213:36"><name pos:start="213:9" pos:end="213:15">sp_mask</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <call pos:start="213:19" pos:end="213:36"><name pos:start="213:19" pos:end="213:29">get_sp_mask</name><argument_list pos:start="213:30" pos:end="213:36">(<argument pos:start="213:31" pos:end="213:35"><expr pos:start="213:31" pos:end="213:35"><name pos:start="213:31" pos:end="213:35">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:41"><expr pos:start="215:9" pos:end="215:40"><name pos:start="215:9" pos:end="215:11">ssp</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <call pos:start="215:15" pos:end="215:40"><name pos:start="215:15" pos:end="215:26">get_seg_base</name><argument_list pos:start="215:27" pos:end="215:40">(<argument pos:start="215:28" pos:end="215:32"><expr pos:start="215:28" pos:end="215:32"><name pos:start="215:28" pos:end="215:32">ss_e1</name></expr></argument>, <argument pos:start="215:35" pos:end="215:39"><expr pos:start="215:35" pos:end="215:39"><name pos:start="215:35" pos:end="215:39">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="217:7" pos:end="229:5">else if <condition pos:start="217:15" pos:end="217:48">(<expr pos:start="217:16" pos:end="217:47"><operator pos:start="217:16" pos:end="217:16">(</operator><name pos:start="217:17" pos:end="217:18">e2</name> <operator pos:start="217:20" pos:end="217:20">&amp;</operator> <name pos:start="217:22" pos:end="217:32">DESC_C_MASK</name><operator pos:start="217:33" pos:end="217:33">)</operator> <operator pos:start="217:35" pos:end="217:36">||</operator> <name pos:start="217:38" pos:end="217:40">dpl</name> <operator pos:start="217:42" pos:end="217:43">==</operator> <name pos:start="217:45" pos:end="217:47">cpl</name></expr>)</condition> <block pos:start="217:50" pos:end="229:5">{<block_content pos:start="221:9" pos:end="227:18">

        <comment type="block" pos:start="219:9" pos:end="219:32">/* to same priviledge */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:22"><expr pos:start="221:9" pos:end="221:21"><name pos:start="221:9" pos:end="221:17">new_stack</name> <operator pos:start="221:19" pos:end="221:19">=</operator> <literal type="number" pos:start="221:21" pos:end="221:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:53"><expr pos:start="223:9" pos:end="223:52"><name pos:start="223:9" pos:end="223:15">sp_mask</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="223:52"><name pos:start="223:19" pos:end="223:29">get_sp_mask</name><argument_list pos:start="223:30" pos:end="223:52">(<argument pos:start="223:31" pos:end="223:51"><expr pos:start="223:31" pos:end="223:51"><name pos:start="223:31" pos:end="223:45"><name pos:start="223:31" pos:end="223:33">env</name><operator pos:start="223:34" pos:end="223:35">-&gt;</operator><name pos:start="223:36" pos:end="223:39">segs</name><index pos:start="223:40" pos:end="223:45">[<expr pos:start="223:41" pos:end="223:44"><name pos:start="223:41" pos:end="223:44">R_SS</name></expr>]</index></name><operator pos:start="223:46" pos:end="223:46">.</operator><name pos:start="223:47" pos:end="223:51">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:35"><expr pos:start="225:9" pos:end="225:34"><name pos:start="225:9" pos:end="225:11">ssp</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <name pos:start="225:15" pos:end="225:29"><name pos:start="225:15" pos:end="225:17">env</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:23">segs</name><index pos:start="225:24" pos:end="225:29">[<expr pos:start="225:25" pos:end="225:28"><name pos:start="225:25" pos:end="225:28">R_SS</name></expr>]</index></name><operator pos:start="225:30" pos:end="225:30">.</operator><name pos:start="225:31" pos:end="225:34">base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:18"><expr pos:start="227:9" pos:end="227:17"><name pos:start="227:9" pos:end="227:11">esp</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <name pos:start="227:15" pos:end="227:17">ESP</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="229:7" pos:end="241:5">else <block pos:start="229:12" pos:end="241:5">{<block_content pos:start="231:9" pos:end="239:16">

        <expr_stmt pos:start="231:9" pos:end="231:59"><expr pos:start="231:9" pos:end="231:58"><call pos:start="231:9" pos:end="231:58"><name pos:start="231:9" pos:end="231:27">raise_exception_err</name><argument_list pos:start="231:28" pos:end="231:58">(<argument pos:start="231:29" pos:end="231:38"><expr pos:start="231:29" pos:end="231:38"><name pos:start="231:29" pos:end="231:38">EXCP0D_GPF</name></expr></argument>, <argument pos:start="231:41" pos:end="231:57"><expr pos:start="231:41" pos:end="231:57"><name pos:start="231:41" pos:end="231:48">selector</name> <operator pos:start="231:50" pos:end="231:50">&amp;</operator> <literal type="number" pos:start="231:52" pos:end="231:57">0xfffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:22"><expr pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:17">new_stack</name> <operator pos:start="233:19" pos:end="233:19">=</operator> <literal type="number" pos:start="233:21" pos:end="233:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="233:24" pos:end="233:42">/* avoid warning */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:20"><expr pos:start="235:9" pos:end="235:19"><name pos:start="235:9" pos:end="235:15">sp_mask</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <literal type="number" pos:start="235:19" pos:end="235:19">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="235:22" pos:end="235:40">/* avoid warning */</comment>

        <expr_stmt pos:start="237:9" pos:end="237:19"><expr pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:11">ssp</name> <operator pos:start="237:13" pos:end="237:13">=</operator> <name pos:start="237:15" pos:end="237:18">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="237:21" pos:end="237:39">/* avoid warning */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:16"><expr pos:start="239:9" pos:end="239:15"><name pos:start="239:9" pos:end="239:11">esp</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <literal type="number" pos:start="239:15" pos:end="239:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="239:18" pos:end="239:36">/* avoid warning */</comment>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="262:0"><expr pos:start="245:5" pos:end="245:21"><name pos:start="245:5" pos:end="245:9">shift</name> <operator pos:start="245:11" pos:end="245:11">=</operator> <name pos:start="245:13" pos:end="245:16">type</name> <operator pos:start="245:18" pos:end="245:19">&gt;&gt;</operator> <literal type="number" pos:start="245:21" pos:end="245:21">3</literal></expr>;</expr_stmt>



<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="251:5" pos:end="251:50">/* XXX: check that enough room is available */</comment>

    push_size = 6 + (new_stack &lt;&lt; 2) + (has_error_code &lt;&lt; 1);

    if (env-&gt;eflags &amp; VM_MASK)

        push_size += 8;

    push_size &lt;&lt;= shift;

<cpp:endif pos:start="261:1" pos:end="261:6">#<cpp:directive pos:start="261:2" pos:end="261:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="263:5" pos:end="269:27"><if pos:start="263:5" pos:end="265:27">if <condition pos:start="263:8" pos:end="263:15">(<expr pos:start="263:9" pos:end="263:14"><name pos:start="263:9" pos:end="263:14">is_int</name></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:27"><block_content pos:start="265:9" pos:end="265:27">

        <expr_stmt pos:start="265:9" pos:end="265:27"><expr pos:start="265:9" pos:end="265:26"><name pos:start="265:9" pos:end="265:15">old_eip</name> <operator pos:start="265:17" pos:end="265:17">=</operator> <name pos:start="265:19" pos:end="265:26">next_eip</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="267:5" pos:end="269:27">else<block type="pseudo" pos:start="269:9" pos:end="269:27"><block_content pos:start="269:9" pos:end="269:27">

        <expr_stmt pos:start="269:9" pos:end="269:27"><expr pos:start="269:9" pos:end="269:26"><name pos:start="269:9" pos:end="269:15">old_eip</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <name pos:start="269:19" pos:end="269:26"><name pos:start="269:19" pos:end="269:21">env</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:26">eip</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="271:5" pos:end="327:5"><if pos:start="271:5" pos:end="305:5">if <condition pos:start="271:8" pos:end="271:19">(<expr pos:start="271:9" pos:end="271:18"><name pos:start="271:9" pos:end="271:13">shift</name> <operator pos:start="271:15" pos:end="271:16">==</operator> <literal type="number" pos:start="271:18" pos:end="271:18">1</literal></expr>)</condition> <block pos:start="271:21" pos:end="305:5">{<block_content pos:start="273:9" pos:end="303:9">

        <if_stmt pos:start="273:9" pos:end="283:9"><if pos:start="273:9" pos:end="283:9">if <condition pos:start="273:12" pos:end="273:34">(<expr pos:start="273:13" pos:end="273:33"><name pos:start="273:13" pos:end="273:23"><name pos:start="273:13" pos:end="273:15">env</name><operator pos:start="273:16" pos:end="273:17">-&gt;</operator><name pos:start="273:18" pos:end="273:23">eflags</name></name> <operator pos:start="273:25" pos:end="273:25">&amp;</operator> <name pos:start="273:27" pos:end="273:33">VM_MASK</name></expr>)</condition> <block pos:start="273:36" pos:end="283:9">{<block_content pos:start="275:13" pos:end="281:63">

            <expr_stmt pos:start="275:13" pos:end="275:63"><expr pos:start="275:13" pos:end="275:62"><call pos:start="275:13" pos:end="275:62"><name pos:start="275:13" pos:end="275:17">PUSHL</name><argument_list pos:start="275:18" pos:end="275:62">(<argument pos:start="275:19" pos:end="275:21"><expr pos:start="275:19" pos:end="275:21"><name pos:start="275:19" pos:end="275:21">ssp</name></expr></argument>, <argument pos:start="275:24" pos:end="275:26"><expr pos:start="275:24" pos:end="275:26"><name pos:start="275:24" pos:end="275:26">esp</name></expr></argument>, <argument pos:start="275:29" pos:end="275:35"><expr pos:start="275:29" pos:end="275:35"><name pos:start="275:29" pos:end="275:35">sp_mask</name></expr></argument>, <argument pos:start="275:38" pos:end="275:61"><expr pos:start="275:38" pos:end="275:61"><name pos:start="275:38" pos:end="275:52"><name pos:start="275:38" pos:end="275:40">env</name><operator pos:start="275:41" pos:end="275:42">-&gt;</operator><name pos:start="275:43" pos:end="275:46">segs</name><index pos:start="275:47" pos:end="275:52">[<expr pos:start="275:48" pos:end="275:51"><name pos:start="275:48" pos:end="275:51">R_GS</name></expr>]</index></name><operator pos:start="275:53" pos:end="275:53">.</operator><name pos:start="275:54" pos:end="275:61">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:63"><expr pos:start="277:13" pos:end="277:62"><call pos:start="277:13" pos:end="277:62"><name pos:start="277:13" pos:end="277:17">PUSHL</name><argument_list pos:start="277:18" pos:end="277:62">(<argument pos:start="277:19" pos:end="277:21"><expr pos:start="277:19" pos:end="277:21"><name pos:start="277:19" pos:end="277:21">ssp</name></expr></argument>, <argument pos:start="277:24" pos:end="277:26"><expr pos:start="277:24" pos:end="277:26"><name pos:start="277:24" pos:end="277:26">esp</name></expr></argument>, <argument pos:start="277:29" pos:end="277:35"><expr pos:start="277:29" pos:end="277:35"><name pos:start="277:29" pos:end="277:35">sp_mask</name></expr></argument>, <argument pos:start="277:38" pos:end="277:61"><expr pos:start="277:38" pos:end="277:61"><name pos:start="277:38" pos:end="277:52"><name pos:start="277:38" pos:end="277:40">env</name><operator pos:start="277:41" pos:end="277:42">-&gt;</operator><name pos:start="277:43" pos:end="277:46">segs</name><index pos:start="277:47" pos:end="277:52">[<expr pos:start="277:48" pos:end="277:51"><name pos:start="277:48" pos:end="277:51">R_FS</name></expr>]</index></name><operator pos:start="277:53" pos:end="277:53">.</operator><name pos:start="277:54" pos:end="277:61">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:63"><expr pos:start="279:13" pos:end="279:62"><call pos:start="279:13" pos:end="279:62"><name pos:start="279:13" pos:end="279:17">PUSHL</name><argument_list pos:start="279:18" pos:end="279:62">(<argument pos:start="279:19" pos:end="279:21"><expr pos:start="279:19" pos:end="279:21"><name pos:start="279:19" pos:end="279:21">ssp</name></expr></argument>, <argument pos:start="279:24" pos:end="279:26"><expr pos:start="279:24" pos:end="279:26"><name pos:start="279:24" pos:end="279:26">esp</name></expr></argument>, <argument pos:start="279:29" pos:end="279:35"><expr pos:start="279:29" pos:end="279:35"><name pos:start="279:29" pos:end="279:35">sp_mask</name></expr></argument>, <argument pos:start="279:38" pos:end="279:61"><expr pos:start="279:38" pos:end="279:61"><name pos:start="279:38" pos:end="279:52"><name pos:start="279:38" pos:end="279:40">env</name><operator pos:start="279:41" pos:end="279:42">-&gt;</operator><name pos:start="279:43" pos:end="279:46">segs</name><index pos:start="279:47" pos:end="279:52">[<expr pos:start="279:48" pos:end="279:51"><name pos:start="279:48" pos:end="279:51">R_DS</name></expr>]</index></name><operator pos:start="279:53" pos:end="279:53">.</operator><name pos:start="279:54" pos:end="279:61">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:63"><expr pos:start="281:13" pos:end="281:62"><call pos:start="281:13" pos:end="281:62"><name pos:start="281:13" pos:end="281:17">PUSHL</name><argument_list pos:start="281:18" pos:end="281:62">(<argument pos:start="281:19" pos:end="281:21"><expr pos:start="281:19" pos:end="281:21"><name pos:start="281:19" pos:end="281:21">ssp</name></expr></argument>, <argument pos:start="281:24" pos:end="281:26"><expr pos:start="281:24" pos:end="281:26"><name pos:start="281:24" pos:end="281:26">esp</name></expr></argument>, <argument pos:start="281:29" pos:end="281:35"><expr pos:start="281:29" pos:end="281:35"><name pos:start="281:29" pos:end="281:35">sp_mask</name></expr></argument>, <argument pos:start="281:38" pos:end="281:61"><expr pos:start="281:38" pos:end="281:61"><name pos:start="281:38" pos:end="281:52"><name pos:start="281:38" pos:end="281:40">env</name><operator pos:start="281:41" pos:end="281:42">-&gt;</operator><name pos:start="281:43" pos:end="281:46">segs</name><index pos:start="281:47" pos:end="281:52">[<expr pos:start="281:48" pos:end="281:51"><name pos:start="281:48" pos:end="281:51">R_ES</name></expr>]</index></name><operator pos:start="281:53" pos:end="281:53">.</operator><name pos:start="281:54" pos:end="281:61">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="285:9" pos:end="291:9"><if pos:start="285:9" pos:end="291:9">if <condition pos:start="285:12" pos:end="285:22">(<expr pos:start="285:13" pos:end="285:21"><name pos:start="285:13" pos:end="285:21">new_stack</name></expr>)</condition> <block pos:start="285:24" pos:end="291:9">{<block_content pos:start="287:13" pos:end="289:42">

            <expr_stmt pos:start="287:13" pos:end="287:63"><expr pos:start="287:13" pos:end="287:62"><call pos:start="287:13" pos:end="287:62"><name pos:start="287:13" pos:end="287:17">PUSHL</name><argument_list pos:start="287:18" pos:end="287:62">(<argument pos:start="287:19" pos:end="287:21"><expr pos:start="287:19" pos:end="287:21"><name pos:start="287:19" pos:end="287:21">ssp</name></expr></argument>, <argument pos:start="287:24" pos:end="287:26"><expr pos:start="287:24" pos:end="287:26"><name pos:start="287:24" pos:end="287:26">esp</name></expr></argument>, <argument pos:start="287:29" pos:end="287:35"><expr pos:start="287:29" pos:end="287:35"><name pos:start="287:29" pos:end="287:35">sp_mask</name></expr></argument>, <argument pos:start="287:38" pos:end="287:61"><expr pos:start="287:38" pos:end="287:61"><name pos:start="287:38" pos:end="287:52"><name pos:start="287:38" pos:end="287:40">env</name><operator pos:start="287:41" pos:end="287:42">-&gt;</operator><name pos:start="287:43" pos:end="287:46">segs</name><index pos:start="287:47" pos:end="287:52">[<expr pos:start="287:48" pos:end="287:51"><name pos:start="287:48" pos:end="287:51">R_SS</name></expr>]</index></name><operator pos:start="287:53" pos:end="287:53">.</operator><name pos:start="287:54" pos:end="287:61">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:42"><expr pos:start="289:13" pos:end="289:41"><call pos:start="289:13" pos:end="289:41"><name pos:start="289:13" pos:end="289:17">PUSHL</name><argument_list pos:start="289:18" pos:end="289:41">(<argument pos:start="289:19" pos:end="289:21"><expr pos:start="289:19" pos:end="289:21"><name pos:start="289:19" pos:end="289:21">ssp</name></expr></argument>, <argument pos:start="289:24" pos:end="289:26"><expr pos:start="289:24" pos:end="289:26"><name pos:start="289:24" pos:end="289:26">esp</name></expr></argument>, <argument pos:start="289:29" pos:end="289:35"><expr pos:start="289:29" pos:end="289:35"><name pos:start="289:29" pos:end="289:35">sp_mask</name></expr></argument>, <argument pos:start="289:38" pos:end="289:40"><expr pos:start="289:38" pos:end="289:40"><name pos:start="289:38" pos:end="289:40">ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:51"><expr pos:start="293:9" pos:end="293:50"><call pos:start="293:9" pos:end="293:50"><name pos:start="293:9" pos:end="293:13">PUSHL</name><argument_list pos:start="293:14" pos:end="293:50">(<argument pos:start="293:15" pos:end="293:17"><expr pos:start="293:15" pos:end="293:17"><name pos:start="293:15" pos:end="293:17">ssp</name></expr></argument>, <argument pos:start="293:20" pos:end="293:22"><expr pos:start="293:20" pos:end="293:22"><name pos:start="293:20" pos:end="293:22">esp</name></expr></argument>, <argument pos:start="293:25" pos:end="293:31"><expr pos:start="293:25" pos:end="293:31"><name pos:start="293:25" pos:end="293:31">sp_mask</name></expr></argument>, <argument pos:start="293:34" pos:end="293:49"><expr pos:start="293:34" pos:end="293:49"><call pos:start="293:34" pos:end="293:49"><name pos:start="293:34" pos:end="293:47">compute_eflags</name><argument_list pos:start="293:48" pos:end="293:49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:59"><expr pos:start="295:9" pos:end="295:58"><call pos:start="295:9" pos:end="295:58"><name pos:start="295:9" pos:end="295:13">PUSHL</name><argument_list pos:start="295:14" pos:end="295:58">(<argument pos:start="295:15" pos:end="295:17"><expr pos:start="295:15" pos:end="295:17"><name pos:start="295:15" pos:end="295:17">ssp</name></expr></argument>, <argument pos:start="295:20" pos:end="295:22"><expr pos:start="295:20" pos:end="295:22"><name pos:start="295:20" pos:end="295:22">esp</name></expr></argument>, <argument pos:start="295:25" pos:end="295:31"><expr pos:start="295:25" pos:end="295:31"><name pos:start="295:25" pos:end="295:31">sp_mask</name></expr></argument>, <argument pos:start="295:34" pos:end="295:57"><expr pos:start="295:34" pos:end="295:57"><name pos:start="295:34" pos:end="295:48"><name pos:start="295:34" pos:end="295:36">env</name><operator pos:start="295:37" pos:end="295:38">-&gt;</operator><name pos:start="295:39" pos:end="295:42">segs</name><index pos:start="295:43" pos:end="295:48">[<expr pos:start="295:44" pos:end="295:47"><name pos:start="295:44" pos:end="295:47">R_CS</name></expr>]</index></name><operator pos:start="295:49" pos:end="295:49">.</operator><name pos:start="295:50" pos:end="295:57">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:42"><expr pos:start="297:9" pos:end="297:41"><call pos:start="297:9" pos:end="297:41"><name pos:start="297:9" pos:end="297:13">PUSHL</name><argument_list pos:start="297:14" pos:end="297:41">(<argument pos:start="297:15" pos:end="297:17"><expr pos:start="297:15" pos:end="297:17"><name pos:start="297:15" pos:end="297:17">ssp</name></expr></argument>, <argument pos:start="297:20" pos:end="297:22"><expr pos:start="297:20" pos:end="297:22"><name pos:start="297:20" pos:end="297:22">esp</name></expr></argument>, <argument pos:start="297:25" pos:end="297:31"><expr pos:start="297:25" pos:end="297:31"><name pos:start="297:25" pos:end="297:31">sp_mask</name></expr></argument>, <argument pos:start="297:34" pos:end="297:40"><expr pos:start="297:34" pos:end="297:40"><name pos:start="297:34" pos:end="297:40">old_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:27">(<expr pos:start="299:13" pos:end="299:26"><name pos:start="299:13" pos:end="299:26">has_error_code</name></expr>)</condition> <block pos:start="299:29" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:49">

            <expr_stmt pos:start="301:13" pos:end="301:49"><expr pos:start="301:13" pos:end="301:48"><call pos:start="301:13" pos:end="301:48"><name pos:start="301:13" pos:end="301:17">PUSHL</name><argument_list pos:start="301:18" pos:end="301:48">(<argument pos:start="301:19" pos:end="301:21"><expr pos:start="301:19" pos:end="301:21"><name pos:start="301:19" pos:end="301:21">ssp</name></expr></argument>, <argument pos:start="301:24" pos:end="301:26"><expr pos:start="301:24" pos:end="301:26"><name pos:start="301:24" pos:end="301:26">esp</name></expr></argument>, <argument pos:start="301:29" pos:end="301:35"><expr pos:start="301:29" pos:end="301:35"><name pos:start="301:29" pos:end="301:35">sp_mask</name></expr></argument>, <argument pos:start="301:38" pos:end="301:47"><expr pos:start="301:38" pos:end="301:47"><name pos:start="301:38" pos:end="301:47">error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="305:7" pos:end="327:5">else <block pos:start="305:12" pos:end="327:5">{<block_content pos:start="307:9" pos:end="325:9">

        <if_stmt pos:start="307:9" pos:end="313:9"><if pos:start="307:9" pos:end="313:9">if <condition pos:start="307:12" pos:end="307:22">(<expr pos:start="307:13" pos:end="307:21"><name pos:start="307:13" pos:end="307:21">new_stack</name></expr>)</condition> <block pos:start="307:24" pos:end="313:9">{<block_content pos:start="309:13" pos:end="311:42">

            <expr_stmt pos:start="309:13" pos:end="309:63"><expr pos:start="309:13" pos:end="309:62"><call pos:start="309:13" pos:end="309:62"><name pos:start="309:13" pos:end="309:17">PUSHW</name><argument_list pos:start="309:18" pos:end="309:62">(<argument pos:start="309:19" pos:end="309:21"><expr pos:start="309:19" pos:end="309:21"><name pos:start="309:19" pos:end="309:21">ssp</name></expr></argument>, <argument pos:start="309:24" pos:end="309:26"><expr pos:start="309:24" pos:end="309:26"><name pos:start="309:24" pos:end="309:26">esp</name></expr></argument>, <argument pos:start="309:29" pos:end="309:35"><expr pos:start="309:29" pos:end="309:35"><name pos:start="309:29" pos:end="309:35">sp_mask</name></expr></argument>, <argument pos:start="309:38" pos:end="309:61"><expr pos:start="309:38" pos:end="309:61"><name pos:start="309:38" pos:end="309:52"><name pos:start="309:38" pos:end="309:40">env</name><operator pos:start="309:41" pos:end="309:42">-&gt;</operator><name pos:start="309:43" pos:end="309:46">segs</name><index pos:start="309:47" pos:end="309:52">[<expr pos:start="309:48" pos:end="309:51"><name pos:start="309:48" pos:end="309:51">R_SS</name></expr>]</index></name><operator pos:start="309:53" pos:end="309:53">.</operator><name pos:start="309:54" pos:end="309:61">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:42"><expr pos:start="311:13" pos:end="311:41"><call pos:start="311:13" pos:end="311:41"><name pos:start="311:13" pos:end="311:17">PUSHW</name><argument_list pos:start="311:18" pos:end="311:41">(<argument pos:start="311:19" pos:end="311:21"><expr pos:start="311:19" pos:end="311:21"><name pos:start="311:19" pos:end="311:21">ssp</name></expr></argument>, <argument pos:start="311:24" pos:end="311:26"><expr pos:start="311:24" pos:end="311:26"><name pos:start="311:24" pos:end="311:26">esp</name></expr></argument>, <argument pos:start="311:29" pos:end="311:35"><expr pos:start="311:29" pos:end="311:35"><name pos:start="311:29" pos:end="311:35">sp_mask</name></expr></argument>, <argument pos:start="311:38" pos:end="311:40"><expr pos:start="311:38" pos:end="311:40"><name pos:start="311:38" pos:end="311:40">ESP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:51"><expr pos:start="315:9" pos:end="315:50"><call pos:start="315:9" pos:end="315:50"><name pos:start="315:9" pos:end="315:13">PUSHW</name><argument_list pos:start="315:14" pos:end="315:50">(<argument pos:start="315:15" pos:end="315:17"><expr pos:start="315:15" pos:end="315:17"><name pos:start="315:15" pos:end="315:17">ssp</name></expr></argument>, <argument pos:start="315:20" pos:end="315:22"><expr pos:start="315:20" pos:end="315:22"><name pos:start="315:20" pos:end="315:22">esp</name></expr></argument>, <argument pos:start="315:25" pos:end="315:31"><expr pos:start="315:25" pos:end="315:31"><name pos:start="315:25" pos:end="315:31">sp_mask</name></expr></argument>, <argument pos:start="315:34" pos:end="315:49"><expr pos:start="315:34" pos:end="315:49"><call pos:start="315:34" pos:end="315:49"><name pos:start="315:34" pos:end="315:47">compute_eflags</name><argument_list pos:start="315:48" pos:end="315:49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:59"><expr pos:start="317:9" pos:end="317:58"><call pos:start="317:9" pos:end="317:58"><name pos:start="317:9" pos:end="317:13">PUSHW</name><argument_list pos:start="317:14" pos:end="317:58">(<argument pos:start="317:15" pos:end="317:17"><expr pos:start="317:15" pos:end="317:17"><name pos:start="317:15" pos:end="317:17">ssp</name></expr></argument>, <argument pos:start="317:20" pos:end="317:22"><expr pos:start="317:20" pos:end="317:22"><name pos:start="317:20" pos:end="317:22">esp</name></expr></argument>, <argument pos:start="317:25" pos:end="317:31"><expr pos:start="317:25" pos:end="317:31"><name pos:start="317:25" pos:end="317:31">sp_mask</name></expr></argument>, <argument pos:start="317:34" pos:end="317:57"><expr pos:start="317:34" pos:end="317:57"><name pos:start="317:34" pos:end="317:48"><name pos:start="317:34" pos:end="317:36">env</name><operator pos:start="317:37" pos:end="317:38">-&gt;</operator><name pos:start="317:39" pos:end="317:42">segs</name><index pos:start="317:43" pos:end="317:48">[<expr pos:start="317:44" pos:end="317:47"><name pos:start="317:44" pos:end="317:47">R_CS</name></expr>]</index></name><operator pos:start="317:49" pos:end="317:49">.</operator><name pos:start="317:50" pos:end="317:57">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:42"><expr pos:start="319:9" pos:end="319:41"><call pos:start="319:9" pos:end="319:41"><name pos:start="319:9" pos:end="319:13">PUSHW</name><argument_list pos:start="319:14" pos:end="319:41">(<argument pos:start="319:15" pos:end="319:17"><expr pos:start="319:15" pos:end="319:17"><name pos:start="319:15" pos:end="319:17">ssp</name></expr></argument>, <argument pos:start="319:20" pos:end="319:22"><expr pos:start="319:20" pos:end="319:22"><name pos:start="319:20" pos:end="319:22">esp</name></expr></argument>, <argument pos:start="319:25" pos:end="319:31"><expr pos:start="319:25" pos:end="319:31"><name pos:start="319:25" pos:end="319:31">sp_mask</name></expr></argument>, <argument pos:start="319:34" pos:end="319:40"><expr pos:start="319:34" pos:end="319:40"><name pos:start="319:34" pos:end="319:40">old_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="325:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:27">(<expr pos:start="321:13" pos:end="321:26"><name pos:start="321:13" pos:end="321:26">has_error_code</name></expr>)</condition> <block pos:start="321:29" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:49">

            <expr_stmt pos:start="323:13" pos:end="323:49"><expr pos:start="323:13" pos:end="323:48"><call pos:start="323:13" pos:end="323:48"><name pos:start="323:13" pos:end="323:17">PUSHW</name><argument_list pos:start="323:18" pos:end="323:48">(<argument pos:start="323:19" pos:end="323:21"><expr pos:start="323:19" pos:end="323:21"><name pos:start="323:19" pos:end="323:21">ssp</name></expr></argument>, <argument pos:start="323:24" pos:end="323:26"><expr pos:start="323:24" pos:end="323:26"><name pos:start="323:24" pos:end="323:26">esp</name></expr></argument>, <argument pos:start="323:29" pos:end="323:35"><expr pos:start="323:29" pos:end="323:35"><name pos:start="323:29" pos:end="323:35">sp_mask</name></expr></argument>, <argument pos:start="323:38" pos:end="323:47"><expr pos:start="323:38" pos:end="323:47"><name pos:start="323:38" pos:end="323:47">error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    

    <if_stmt pos:start="331:5" pos:end="339:5"><if pos:start="331:5" pos:end="339:5">if <condition pos:start="331:8" pos:end="331:18">(<expr pos:start="331:9" pos:end="331:17"><name pos:start="331:9" pos:end="331:17">new_stack</name></expr>)</condition> <block pos:start="331:20" pos:end="339:5">{<block_content pos:start="333:9" pos:end="337:72">

        <expr_stmt pos:start="333:9" pos:end="333:29"><expr pos:start="333:9" pos:end="333:28"><name pos:start="333:9" pos:end="333:10">ss</name> <operator pos:start="333:12" pos:end="333:12">=</operator> <operator pos:start="333:14" pos:end="333:14">(</operator><name pos:start="333:15" pos:end="333:16">ss</name> <operator pos:start="333:18" pos:end="333:18">&amp;</operator> <operator pos:start="333:20" pos:end="333:20">~</operator><literal type="number" pos:start="333:21" pos:end="333:21">3</literal><operator pos:start="333:22" pos:end="333:22">)</operator> <operator pos:start="333:24" pos:end="333:24">|</operator> <name pos:start="333:26" pos:end="333:28">dpl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="337:72"><expr pos:start="335:9" pos:end="337:71"><call pos:start="335:9" pos:end="337:71"><name pos:start="335:9" pos:end="335:30">cpu_x86_load_seg_cache</name><argument_list pos:start="335:31" pos:end="337:71">(<argument pos:start="335:32" pos:end="335:34"><expr pos:start="335:32" pos:end="335:34"><name pos:start="335:32" pos:end="335:34">env</name></expr></argument>, <argument pos:start="335:37" pos:end="335:40"><expr pos:start="335:37" pos:end="335:40"><name pos:start="335:37" pos:end="335:40">R_SS</name></expr></argument>, <argument pos:start="335:43" pos:end="335:44"><expr pos:start="335:43" pos:end="335:44"><name pos:start="335:43" pos:end="335:44">ss</name></expr></argument>, 

                               <argument pos:start="337:32" pos:end="337:34"><expr pos:start="337:32" pos:end="337:34"><name pos:start="337:32" pos:end="337:34">ssp</name></expr></argument>, <argument pos:start="337:37" pos:end="337:63"><expr pos:start="337:37" pos:end="337:63"><call pos:start="337:37" pos:end="337:63"><name pos:start="337:37" pos:end="337:49">get_seg_limit</name><argument_list pos:start="337:50" pos:end="337:63">(<argument pos:start="337:51" pos:end="337:55"><expr pos:start="337:51" pos:end="337:55"><name pos:start="337:51" pos:end="337:55">ss_e1</name></expr></argument>, <argument pos:start="337:58" pos:end="337:62"><expr pos:start="337:58" pos:end="337:62"><name pos:start="337:58" pos:end="337:62">ss_e2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:66" pos:end="337:70"><expr pos:start="337:66" pos:end="337:70"><name pos:start="337:66" pos:end="337:70">ss_e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:45"><expr pos:start="341:5" pos:end="341:44"><name pos:start="341:5" pos:end="341:7">ESP</name> <operator pos:start="341:9" pos:end="341:9">=</operator> <operator pos:start="341:11" pos:end="341:11">(</operator><name pos:start="341:12" pos:end="341:14">ESP</name> <operator pos:start="341:16" pos:end="341:16">&amp;</operator> <operator pos:start="341:18" pos:end="341:18">~</operator><name pos:start="341:19" pos:end="341:25">sp_mask</name><operator pos:start="341:26" pos:end="341:26">)</operator> <operator pos:start="341:28" pos:end="341:28">|</operator> <operator pos:start="341:30" pos:end="341:30">(</operator><name pos:start="341:31" pos:end="341:33">esp</name> <operator pos:start="341:35" pos:end="341:35">&amp;</operator> <name pos:start="341:37" pos:end="341:43">sp_mask</name><operator pos:start="341:44" pos:end="341:44">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:37"><expr pos:start="345:5" pos:end="345:36"><name pos:start="345:5" pos:end="345:12">selector</name> <operator pos:start="345:14" pos:end="345:14">=</operator> <operator pos:start="345:16" pos:end="345:16">(</operator><name pos:start="345:17" pos:end="345:24">selector</name> <operator pos:start="345:26" pos:end="345:26">&amp;</operator> <operator pos:start="345:28" pos:end="345:28">~</operator><literal type="number" pos:start="345:29" pos:end="345:29">3</literal><operator pos:start="345:30" pos:end="345:30">)</operator> <operator pos:start="345:32" pos:end="345:32">|</operator> <name pos:start="345:34" pos:end="345:36">dpl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="353:23"><expr pos:start="347:5" pos:end="353:22"><call pos:start="347:5" pos:end="353:22"><name pos:start="347:5" pos:end="347:26">cpu_x86_load_seg_cache</name><argument_list pos:start="347:27" pos:end="353:22">(<argument pos:start="347:28" pos:end="347:30"><expr pos:start="347:28" pos:end="347:30"><name pos:start="347:28" pos:end="347:30">env</name></expr></argument>, <argument pos:start="347:33" pos:end="347:36"><expr pos:start="347:33" pos:end="347:36"><name pos:start="347:33" pos:end="347:36">R_CS</name></expr></argument>, <argument pos:start="347:39" pos:end="347:46"><expr pos:start="347:39" pos:end="347:46"><name pos:start="347:39" pos:end="347:46">selector</name></expr></argument>, 

                   <argument pos:start="349:20" pos:end="349:39"><expr pos:start="349:20" pos:end="349:39"><call pos:start="349:20" pos:end="349:39"><name pos:start="349:20" pos:end="349:31">get_seg_base</name><argument_list pos:start="349:32" pos:end="349:39">(<argument pos:start="349:33" pos:end="349:34"><expr pos:start="349:33" pos:end="349:34"><name pos:start="349:33" pos:end="349:34">e1</name></expr></argument>, <argument pos:start="349:37" pos:end="349:38"><expr pos:start="349:37" pos:end="349:38"><name pos:start="349:37" pos:end="349:38">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="351:20" pos:end="351:40"><expr pos:start="351:20" pos:end="351:40"><call pos:start="351:20" pos:end="351:40"><name pos:start="351:20" pos:end="351:32">get_seg_limit</name><argument_list pos:start="351:33" pos:end="351:40">(<argument pos:start="351:34" pos:end="351:35"><expr pos:start="351:34" pos:end="351:35"><name pos:start="351:34" pos:end="351:35">e1</name></expr></argument>, <argument pos:start="351:38" pos:end="351:39"><expr pos:start="351:38" pos:end="351:39"><name pos:start="351:38" pos:end="351:39">e2</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="353:20" pos:end="353:21"><expr pos:start="353:20" pos:end="353:21"><name pos:start="353:20" pos:end="353:21">e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:30"><expr pos:start="355:5" pos:end="355:29"><call pos:start="355:5" pos:end="355:29"><name pos:start="355:5" pos:end="355:19">cpu_x86_set_cpl</name><argument_list pos:start="355:20" pos:end="355:29">(<argument pos:start="355:21" pos:end="355:23"><expr pos:start="355:21" pos:end="355:23"><name pos:start="355:21" pos:end="355:23">env</name></expr></argument>, <argument pos:start="355:26" pos:end="355:28"><expr pos:start="355:26" pos:end="355:28"><name pos:start="355:26" pos:end="355:28">dpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:22"><expr pos:start="357:5" pos:end="357:21"><name pos:start="357:5" pos:end="357:12"><name pos:start="357:5" pos:end="357:7">env</name><operator pos:start="357:8" pos:end="357:9">-&gt;</operator><name pos:start="357:10" pos:end="357:12">eip</name></name> <operator pos:start="357:14" pos:end="357:14">=</operator> <name pos:start="357:16" pos:end="357:21">offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="361:5" pos:end="361:38">/* interrupt gate clear IF mask */</comment>

    <if_stmt pos:start="363:5" pos:end="367:5"><if pos:start="363:5" pos:end="367:5">if <condition pos:start="363:8" pos:end="363:24">(<expr pos:start="363:9" pos:end="363:23"><operator pos:start="363:9" pos:end="363:9">(</operator><name pos:start="363:10" pos:end="363:13">type</name> <operator pos:start="363:15" pos:end="363:15">&amp;</operator> <literal type="number" pos:start="363:17" pos:end="363:17">1</literal><operator pos:start="363:18" pos:end="363:18">)</operator> <operator pos:start="363:20" pos:end="363:21">==</operator> <literal type="number" pos:start="363:23" pos:end="363:23">0</literal></expr>)</condition> <block pos:start="363:26" pos:end="367:5">{<block_content pos:start="365:9" pos:end="365:32">

        <expr_stmt pos:start="365:9" pos:end="365:32"><expr pos:start="365:9" pos:end="365:31"><name pos:start="365:9" pos:end="365:19"><name pos:start="365:9" pos:end="365:11">env</name><operator pos:start="365:12" pos:end="365:13">-&gt;</operator><name pos:start="365:14" pos:end="365:19">eflags</name></name> <operator pos:start="365:21" pos:end="365:22">&amp;=</operator> <operator pos:start="365:24" pos:end="365:24">~</operator><name pos:start="365:25" pos:end="365:31">IF_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:60"><expr pos:start="369:5" pos:end="369:59"><name pos:start="369:5" pos:end="369:15"><name pos:start="369:5" pos:end="369:7">env</name><operator pos:start="369:8" pos:end="369:9">-&gt;</operator><name pos:start="369:10" pos:end="369:15">eflags</name></name> <operator pos:start="369:17" pos:end="369:18">&amp;=</operator> <operator pos:start="369:20" pos:end="369:20">~</operator><operator pos:start="369:21" pos:end="369:21">(</operator><name pos:start="369:22" pos:end="369:28">TF_MASK</name> <operator pos:start="369:30" pos:end="369:30">|</operator> <name pos:start="369:32" pos:end="369:38">VM_MASK</name> <operator pos:start="369:40" pos:end="369:40">|</operator> <name pos:start="369:42" pos:end="369:48">RF_MASK</name> <operator pos:start="369:50" pos:end="369:50">|</operator> <name pos:start="369:52" pos:end="369:58">NT_MASK</name><operator pos:start="369:59" pos:end="369:59">)</operator></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
