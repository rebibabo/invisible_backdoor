<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/242.c" pos:tabs="8"><function pos:start="1:1" pos:end="459:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adpcm_encode_frame</name><parameter_list pos:start="1:30" pos:end="3:72">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">AVPacket</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">avpkt</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:50"><decl pos:start="3:31" pos:end="3:50"><type pos:start="3:31" pos:end="3:50"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:43">AVFrame</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:50">frame</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:71"><decl pos:start="3:53" pos:end="3:71"><type pos:start="3:53" pos:end="3:71"><name pos:start="3:53" pos:end="3:55">int</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:71">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="459:1">{<block_content pos:start="7:5" pos:end="457:27">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">i</name></decl>, <decl pos:start="7:15" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:16">ch</name></decl>, <decl pos:start="7:19" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:20">st</name></decl>, <decl pos:start="7:23" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:30">pkt_size</name></decl>, <decl pos:start="7:33" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:33" pos:end="7:35">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">int16_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:11">int16_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier><modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:23">samples_p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">ADPCMEncodeContext</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:25">c</name> <init pos:start="15:27" pos:end="15:44">= <expr pos:start="15:29" pos:end="15:44"><name pos:start="15:29" pos:end="15:44"><name pos:start="15:29" pos:end="15:33">avctx</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:11">samples</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <operator pos:start="21:15" pos:end="21:15">(</operator><specifier pos:start="21:16" pos:end="21:20">const</specifier> <name pos:start="21:22" pos:end="21:28">int16_t</name> <operator pos:start="21:30" pos:end="21:30">*</operator><operator pos:start="21:31" pos:end="21:31">)</operator><name pos:start="21:32" pos:end="21:45"><name pos:start="21:32" pos:end="21:36">frame</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:42">data</name><index pos:start="21:43" pos:end="21:45">[<expr pos:start="21:44" pos:end="21:44"><literal type="number" pos:start="21:44" pos:end="21:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:49"><expr pos:start="23:5" pos:end="23:48"><name pos:start="23:5" pos:end="23:13">samples_p</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <operator pos:start="23:17" pos:end="23:17">(</operator><name pos:start="23:18" pos:end="23:24">int16_t</name> <operator pos:start="23:26" pos:end="23:26">*</operator><operator pos:start="23:27" pos:end="23:27">*</operator><operator pos:start="23:28" pos:end="23:28">)</operator><name pos:start="23:29" pos:end="23:48"><name pos:start="23:29" pos:end="23:33">frame</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:48">extended_data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:6">st</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:24"><name pos:start="25:10" pos:end="25:14">avctx</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:24">channels</name></name> <operator pos:start="25:26" pos:end="25:27">==</operator> <literal type="number" pos:start="25:29" pos:end="25:29">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:38"><if pos:start="29:5" pos:end="31:86">if <condition pos:start="29:8" pos:end="29:49">(<expr pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:13">avctx</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:23">codec_id</name></name> <operator pos:start="29:25" pos:end="29:26">==</operator> <name pos:start="29:28" pos:end="29:48">AV_CODEC_ID_ADPCM_SWF</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:86"><block_content pos:start="31:9" pos:end="31:86">

        <expr_stmt pos:start="31:9" pos:end="31:86"><expr pos:start="31:9" pos:end="31:85"><name pos:start="31:9" pos:end="31:16">pkt_size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">(</operator><literal type="number" pos:start="31:21" pos:end="31:23">2</literal> <operator pos:start="31:23" pos:end="31:23">+</operator> <name pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:29">avctx</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:39">channels</name></name> <operator pos:start="31:41" pos:end="31:41">*</operator> <operator pos:start="31:43" pos:end="31:43">(</operator><literal type="number" pos:start="31:44" pos:end="31:47">22</literal> <operator pos:start="31:47" pos:end="31:47">+</operator> <literal type="number" pos:start="31:49" pos:end="31:49">4</literal> <operator pos:start="31:51" pos:end="31:51">*</operator> <operator pos:start="31:53" pos:end="31:53">(</operator><name pos:start="31:54" pos:end="31:70"><name pos:start="31:54" pos:end="31:58">frame</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:70">nb_samples</name></name> <operator pos:start="31:72" pos:end="31:72">-</operator> <literal type="number" pos:start="31:74" pos:end="31:74">1</literal><operator pos:start="31:75" pos:end="31:75">)</operator><operator pos:start="31:76" pos:end="31:76">)</operator> <operator pos:start="31:78" pos:end="31:78">+</operator> <literal type="number" pos:start="31:80" pos:end="31:80">7</literal><operator pos:start="31:81" pos:end="31:81">)</operator> <operator pos:start="31:83" pos:end="31:83">/</operator> <literal type="number" pos:start="31:85" pos:end="31:85">8</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="33:5" pos:end="35:38">else<block type="pseudo" pos:start="35:9" pos:end="35:38"><block_content pos:start="35:9" pos:end="35:38">

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:16">pkt_size</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:37"><name pos:start="35:20" pos:end="35:24">avctx</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:37">block_align</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:49">(<expr pos:start="37:9" pos:end="37:48"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:12">ret</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:47"><name pos:start="37:16" pos:end="37:30">ff_alloc_packet</name><argument_list pos:start="37:31" pos:end="37:47">(<argument pos:start="37:32" pos:end="37:36"><expr pos:start="37:32" pos:end="37:36"><name pos:start="37:32" pos:end="37:36">avpkt</name></expr></argument>, <argument pos:start="37:39" pos:end="37:46"><expr pos:start="37:39" pos:end="37:46"><name pos:start="37:39" pos:end="37:46">pkt_size</name></expr></argument>)</argument_list></call><operator pos:start="37:48" pos:end="37:48">)</operator></expr>)</condition> <block pos:start="37:51" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:19">

        <expr_stmt pos:start="39:9" pos:end="39:69"><expr pos:start="39:9" pos:end="39:68"><call pos:start="39:9" pos:end="39:68"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:68">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:67"><expr pos:start="39:37" pos:end="39:67"><literal type="string" pos:start="39:37" pos:end="39:67">"Error getting output packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:7">dst</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <name pos:start="45:11" pos:end="45:21"><name pos:start="45:11" pos:end="45:15">avpkt</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:21">data</name></name></expr>;</expr_stmt>



    <switch pos:start="49:5" pos:end="445:5">switch<condition pos:start="49:11" pos:end="49:28">(<expr pos:start="49:12" pos:end="49:27"><name pos:start="49:12" pos:end="49:27"><name pos:start="49:12" pos:end="49:16">avctx</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">codec</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:27">id</name></name></expr>)</condition> <block pos:start="49:30" pos:end="445:5">{<block_content pos:start="51:5" pos:end="443:31">

    <case pos:start="51:5" pos:end="51:35">case <expr pos:start="51:10" pos:end="51:34"><name pos:start="51:10" pos:end="51:34">AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

    <block pos:start="53:5" pos:end="143:5">{<block_content pos:start="55:9" pos:end="141:14">

        <decl_stmt pos:start="55:9" pos:end="55:22"><decl pos:start="55:9" pos:end="55:18"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:18">blocks</name></decl>, <decl pos:start="55:21" pos:end="55:21"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:21" pos:end="55:21">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:14">blocks</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:35"><name pos:start="59:19" pos:end="59:23">frame</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:35">nb_samples</name></name> <operator pos:start="59:37" pos:end="59:37">-</operator> <literal type="number" pos:start="59:39" pos:end="59:39">1</literal><operator pos:start="59:40" pos:end="59:40">)</operator> <operator pos:start="59:42" pos:end="59:42">/</operator> <literal type="number" pos:start="59:44" pos:end="59:44">8</literal></expr>;</expr_stmt>



        <for pos:start="63:9" pos:end="79:9">for <control pos:start="63:13" pos:end="63:48">(<init pos:start="63:14" pos:end="63:20"><expr pos:start="63:14" pos:end="63:19"><name pos:start="63:14" pos:end="63:15">ch</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>;</init> <condition pos:start="63:22" pos:end="63:42"><expr pos:start="63:22" pos:end="63:41"><name pos:start="63:22" pos:end="63:23">ch</name> <operator pos:start="63:25" pos:end="63:25">&lt;</operator> <name pos:start="63:27" pos:end="63:41"><name pos:start="63:27" pos:end="63:31">avctx</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:41">channels</name></name></expr>;</condition> <incr pos:start="63:44" pos:end="63:47"><expr pos:start="63:44" pos:end="63:47"><name pos:start="63:44" pos:end="63:45">ch</name><operator pos:start="63:46" pos:end="63:47">++</operator></expr></incr>)</control> <block pos:start="63:50" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:23">

            <decl_stmt pos:start="65:13" pos:end="65:56"><decl pos:start="65:13" pos:end="65:55"><type pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:30">ADPCMChannelStatus</name> <modifier pos:start="65:32" pos:end="65:32">*</modifier></type><name pos:start="65:33" pos:end="65:38">status</name> <init pos:start="65:40" pos:end="65:55">= <expr pos:start="65:42" pos:end="65:55"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:55"><name pos:start="65:43" pos:end="65:43">c</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:51">status</name><index pos:start="65:52" pos:end="65:55">[<expr pos:start="65:53" pos:end="65:54"><name pos:start="65:53" pos:end="65:54">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:51"><expr pos:start="67:13" pos:end="67:50"><name pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:18">status</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:31">prev_sample</name></name> <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:50"><name pos:start="67:35" pos:end="67:43">samples_p</name><index pos:start="67:44" pos:end="67:47">[<expr pos:start="67:45" pos:end="67:46"><name pos:start="67:45" pos:end="67:46">ch</name></expr>]</index><index pos:start="67:48" pos:end="67:50">[<expr pos:start="67:49" pos:end="67:49"><literal type="number" pos:start="67:49" pos:end="67:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <comment type="block" pos:start="69:13" pos:end="71:61">/* status-&gt;step_index = 0;

               XXX: not sure how to init the state machine */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:59"><expr pos:start="73:13" pos:end="73:58"><call pos:start="73:13" pos:end="73:58"><name pos:start="73:13" pos:end="73:31">bytestream_put_le16</name><argument_list pos:start="73:32" pos:end="73:58">(<argument pos:start="73:33" pos:end="73:36"><expr pos:start="73:33" pos:end="73:36"><operator pos:start="73:33" pos:end="73:33">&amp;</operator><name pos:start="73:34" pos:end="73:36">dst</name></expr></argument>, <argument pos:start="73:39" pos:end="73:57"><expr pos:start="73:39" pos:end="73:57"><name pos:start="73:39" pos:end="73:57"><name pos:start="73:39" pos:end="73:44">status</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:57">prev_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:16">dst</name><operator pos:start="75:17" pos:end="75:18">++</operator> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:39"><name pos:start="75:22" pos:end="75:27">status</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:39">step_index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><operator pos:start="77:13" pos:end="77:13">*</operator><name pos:start="77:14" pos:end="77:16">dst</name><operator pos:start="77:17" pos:end="77:18">++</operator> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="77:25" pos:end="77:37">/* unknown */</comment>

        </block_content>}</block></for>



        <comment type="block" pos:start="83:9" pos:end="83:69">/* stereo: 4 bytes (8 samples) for left, 4 bytes for right */</comment>

        <if_stmt pos:start="85:9" pos:end="139:9"><if pos:start="85:9" pos:end="115:9">if <condition pos:start="85:12" pos:end="85:31">(<expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:17">avctx</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:26">trellis</name></name> <operator pos:start="85:28" pos:end="85:28">&gt;</operator> <literal type="number" pos:start="85:30" pos:end="85:30">0</literal></expr>)</condition> <block pos:start="85:33" pos:end="115:9">{<block_content pos:start="87:13" pos:end="113:25">

            <expr_stmt pos:start="87:13" pos:end="87:78"><expr pos:start="87:13" pos:end="87:77"><call pos:start="87:13" pos:end="87:77"><name pos:start="87:13" pos:end="87:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="87:29" pos:end="87:77">(<argument pos:start="87:30" pos:end="87:34"><expr pos:start="87:30" pos:end="87:34"><name pos:start="87:30" pos:end="87:34">avctx</name></expr></argument>, <argument pos:start="87:37" pos:end="87:39"><expr pos:start="87:37" pos:end="87:39"><name pos:start="87:37" pos:end="87:39">buf</name></expr></argument>, <argument pos:start="87:42" pos:end="87:69"><expr pos:start="87:42" pos:end="87:69"><name pos:start="87:42" pos:end="87:56"><name pos:start="87:42" pos:end="87:46">avctx</name><operator pos:start="87:47" pos:end="87:48">-&gt;</operator><name pos:start="87:49" pos:end="87:56">channels</name></name> <operator pos:start="87:58" pos:end="87:58">*</operator> <name pos:start="87:60" pos:end="87:65">blocks</name> <operator pos:start="87:67" pos:end="87:67">*</operator> <literal type="number" pos:start="87:69" pos:end="87:69">8</literal></expr></argument>, <argument pos:start="87:72" pos:end="87:76"><expr pos:start="87:72" pos:end="87:76"><name pos:start="87:72" pos:end="87:76">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="89:13" pos:end="97:13">for <control pos:start="89:17" pos:end="89:52">(<init pos:start="89:18" pos:end="89:24"><expr pos:start="89:18" pos:end="89:23"><name pos:start="89:18" pos:end="89:19">ch</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <literal type="number" pos:start="89:23" pos:end="89:23">0</literal></expr>;</init> <condition pos:start="89:26" pos:end="89:46"><expr pos:start="89:26" pos:end="89:45"><name pos:start="89:26" pos:end="89:27">ch</name> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <name pos:start="89:31" pos:end="89:45"><name pos:start="89:31" pos:end="89:35">avctx</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:45">channels</name></name></expr>;</condition> <incr pos:start="89:48" pos:end="89:51"><expr pos:start="89:48" pos:end="89:51"><name pos:start="89:48" pos:end="89:49">ch</name><operator pos:start="89:50" pos:end="89:51">++</operator></expr></incr>)</control> <block pos:start="89:54" pos:end="97:13">{<block_content pos:start="91:17" pos:end="95:54">

                <expr_stmt pos:start="91:17" pos:end="95:54"><expr pos:start="91:17" pos:end="95:53"><call pos:start="91:17" pos:end="95:53"><name pos:start="91:17" pos:end="91:38">adpcm_compress_trellis</name><argument_list pos:start="91:39" pos:end="95:53">(<argument pos:start="91:40" pos:end="91:44"><expr pos:start="91:40" pos:end="91:44"><name pos:start="91:40" pos:end="91:44">avctx</name></expr></argument>, <argument pos:start="91:47" pos:end="91:63"><expr pos:start="91:47" pos:end="91:63"><operator pos:start="91:47" pos:end="91:47">&amp;</operator><name pos:start="91:48" pos:end="91:63"><name pos:start="91:48" pos:end="91:56">samples_p</name><index pos:start="91:57" pos:end="91:60">[<expr pos:start="91:58" pos:end="91:59"><name pos:start="91:58" pos:end="91:59">ch</name></expr>]</index><index pos:start="91:61" pos:end="91:63">[<expr pos:start="91:62" pos:end="91:62"><literal type="number" pos:start="91:62" pos:end="91:62">1</literal></expr>]</index></name></expr></argument>,

                                       <argument pos:start="93:40" pos:end="93:60"><expr pos:start="93:40" pos:end="93:60"><name pos:start="93:40" pos:end="93:42">buf</name> <operator pos:start="93:44" pos:end="93:44">+</operator> <name pos:start="93:46" pos:end="93:47">ch</name> <operator pos:start="93:49" pos:end="93:49">*</operator> <name pos:start="93:51" pos:end="93:56">blocks</name> <operator pos:start="93:58" pos:end="93:58">*</operator> <literal type="number" pos:start="93:60" pos:end="93:60">8</literal></expr></argument>, <argument pos:start="93:63" pos:end="93:76"><expr pos:start="93:63" pos:end="93:76"><operator pos:start="93:63" pos:end="93:63">&amp;</operator><name pos:start="93:64" pos:end="93:76"><name pos:start="93:64" pos:end="93:64">c</name><operator pos:start="93:65" pos:end="93:66">-&gt;</operator><name pos:start="93:67" pos:end="93:72">status</name><index pos:start="93:73" pos:end="93:76">[<expr pos:start="93:74" pos:end="93:75"><name pos:start="93:74" pos:end="93:75">ch</name></expr>]</index></name></expr></argument>,

                                       <argument pos:start="95:40" pos:end="95:49"><expr pos:start="95:40" pos:end="95:49"><name pos:start="95:40" pos:end="95:45">blocks</name> <operator pos:start="95:47" pos:end="95:47">*</operator> <literal type="number" pos:start="95:49" pos:end="95:49">8</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:52"><expr pos:start="95:52" pos:end="95:52"><literal type="number" pos:start="95:52" pos:end="95:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="99:13" pos:end="111:13">for <control pos:start="99:17" pos:end="99:40">(<init pos:start="99:18" pos:end="99:23"><expr pos:start="99:18" pos:end="99:22"><name pos:start="99:18" pos:end="99:18">i</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>;</init> <condition pos:start="99:25" pos:end="99:35"><expr pos:start="99:25" pos:end="99:34"><name pos:start="99:25" pos:end="99:25">i</name> <operator pos:start="99:27" pos:end="99:27">&lt;</operator> <name pos:start="99:29" pos:end="99:34">blocks</name></expr>;</condition> <incr pos:start="99:37" pos:end="99:39"><expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:37">i</name><operator pos:start="99:38" pos:end="99:39">++</operator></expr></incr>)</control> <block pos:start="99:42" pos:end="111:13">{<block_content pos:start="101:17" pos:end="109:17">

                <for pos:start="101:17" pos:end="109:17">for <control pos:start="101:21" pos:end="101:56">(<init pos:start="101:22" pos:end="101:28"><expr pos:start="101:22" pos:end="101:27"><name pos:start="101:22" pos:end="101:23">ch</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <literal type="number" pos:start="101:27" pos:end="101:27">0</literal></expr>;</init> <condition pos:start="101:30" pos:end="101:50"><expr pos:start="101:30" pos:end="101:49"><name pos:start="101:30" pos:end="101:31">ch</name> <operator pos:start="101:33" pos:end="101:33">&lt;</operator> <name pos:start="101:35" pos:end="101:49"><name pos:start="101:35" pos:end="101:39">avctx</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:49">channels</name></name></expr>;</condition> <incr pos:start="101:52" pos:end="101:55"><expr pos:start="101:52" pos:end="101:55"><name pos:start="101:52" pos:end="101:53">ch</name><operator pos:start="101:54" pos:end="101:55">++</operator></expr></incr>)</control> <block pos:start="101:58" pos:end="109:17">{<block_content pos:start="103:21" pos:end="107:62">

                    <decl_stmt pos:start="103:21" pos:end="103:66"><decl pos:start="103:21" pos:end="103:65"><type pos:start="103:21" pos:end="103:29"><name pos:start="103:21" pos:end="103:27">uint8_t</name> <modifier pos:start="103:29" pos:end="103:29">*</modifier></type><name pos:start="103:30" pos:end="103:33">buf1</name> <init pos:start="103:35" pos:end="103:65">= <expr pos:start="103:37" pos:end="103:65"><name pos:start="103:37" pos:end="103:39">buf</name> <operator pos:start="103:41" pos:end="103:41">+</operator> <name pos:start="103:43" pos:end="103:44">ch</name> <operator pos:start="103:46" pos:end="103:46">*</operator> <name pos:start="103:48" pos:end="103:53">blocks</name> <operator pos:start="103:55" pos:end="103:55">*</operator> <literal type="number" pos:start="103:57" pos:end="103:59">8</literal> <operator pos:start="103:59" pos:end="103:59">+</operator> <name pos:start="103:61" pos:end="103:61">i</name> <operator pos:start="103:63" pos:end="103:63">*</operator> <literal type="number" pos:start="103:65" pos:end="103:65">8</literal></expr></init></decl>;</decl_stmt>

                    <for pos:start="105:21" pos:end="107:62">for <control pos:start="105:25" pos:end="105:46">(<init pos:start="105:26" pos:end="105:31"><expr pos:start="105:26" pos:end="105:30"><name pos:start="105:26" pos:end="105:26">j</name> <operator pos:start="105:28" pos:end="105:28">=</operator> <literal type="number" pos:start="105:30" pos:end="105:30">0</literal></expr>;</init> <condition pos:start="105:33" pos:end="105:38"><expr pos:start="105:33" pos:end="105:37"><name pos:start="105:33" pos:end="105:33">j</name> <operator pos:start="105:35" pos:end="105:35">&lt;</operator> <literal type="number" pos:start="105:37" pos:end="105:37">8</literal></expr>;</condition> <incr pos:start="105:40" pos:end="105:45"><expr pos:start="105:40" pos:end="105:45"><name pos:start="105:40" pos:end="105:40">j</name> <operator pos:start="105:42" pos:end="105:43">+=</operator> <literal type="number" pos:start="105:45" pos:end="105:45">2</literal></expr></incr>)</control><block type="pseudo" pos:start="107:25" pos:end="107:62"><block_content pos:start="107:25" pos:end="107:62">

                        <expr_stmt pos:start="107:25" pos:end="107:62"><expr pos:start="107:25" pos:end="107:61"><operator pos:start="107:25" pos:end="107:25">*</operator><name pos:start="107:26" pos:end="107:28">dst</name><operator pos:start="107:29" pos:end="107:30">++</operator> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:40"><name pos:start="107:34" pos:end="107:37">buf1</name><index pos:start="107:38" pos:end="107:40">[<expr pos:start="107:39" pos:end="107:39"><name pos:start="107:39" pos:end="107:39">j</name></expr>]</index></name> <operator pos:start="107:42" pos:end="107:42">|</operator> <operator pos:start="107:44" pos:end="107:44">(</operator><name pos:start="107:45" pos:end="107:55"><name pos:start="107:45" pos:end="107:48">buf1</name><index pos:start="107:49" pos:end="107:55">[<expr pos:start="107:50" pos:end="107:54"><name pos:start="107:50" pos:end="107:50">j</name> <operator pos:start="107:52" pos:end="107:52">+</operator> <literal type="number" pos:start="107:54" pos:end="107:54">1</literal></expr>]</index></name> <operator pos:start="107:57" pos:end="107:58">&lt;&lt;</operator> <literal type="number" pos:start="107:60" pos:end="107:60">4</literal><operator pos:start="107:61" pos:end="107:61">)</operator></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="113:13" pos:end="113:25"><expr pos:start="113:13" pos:end="113:24"><call pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:19">av_free</name><argument_list pos:start="113:20" pos:end="113:24">(<argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="139:9">else <block pos:start="115:16" pos:end="139:9">{<block_content pos:start="117:13" pos:end="137:13">

            <for pos:start="117:13" pos:end="137:13">for <control pos:start="117:17" pos:end="117:40">(<init pos:start="117:18" pos:end="117:23"><expr pos:start="117:18" pos:end="117:22"><name pos:start="117:18" pos:end="117:18">i</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr>;</init> <condition pos:start="117:25" pos:end="117:35"><expr pos:start="117:25" pos:end="117:34"><name pos:start="117:25" pos:end="117:25">i</name> <operator pos:start="117:27" pos:end="117:27">&lt;</operator> <name pos:start="117:29" pos:end="117:34">blocks</name></expr>;</condition> <incr pos:start="117:37" pos:end="117:39"><expr pos:start="117:37" pos:end="117:39"><name pos:start="117:37" pos:end="117:37">i</name><operator pos:start="117:38" pos:end="117:39">++</operator></expr></incr>)</control> <block pos:start="117:42" pos:end="137:13">{<block_content pos:start="119:17" pos:end="135:17">

                <for pos:start="119:17" pos:end="135:17">for <control pos:start="119:21" pos:end="119:56">(<init pos:start="119:22" pos:end="119:28"><expr pos:start="119:22" pos:end="119:27"><name pos:start="119:22" pos:end="119:23">ch</name> <operator pos:start="119:25" pos:end="119:25">=</operator> <literal type="number" pos:start="119:27" pos:end="119:27">0</literal></expr>;</init> <condition pos:start="119:30" pos:end="119:50"><expr pos:start="119:30" pos:end="119:49"><name pos:start="119:30" pos:end="119:31">ch</name> <operator pos:start="119:33" pos:end="119:33">&lt;</operator> <name pos:start="119:35" pos:end="119:49"><name pos:start="119:35" pos:end="119:39">avctx</name><operator pos:start="119:40" pos:end="119:41">-&gt;</operator><name pos:start="119:42" pos:end="119:49">channels</name></name></expr>;</condition> <incr pos:start="119:52" pos:end="119:55"><expr pos:start="119:52" pos:end="119:55"><name pos:start="119:52" pos:end="119:53">ch</name><operator pos:start="119:54" pos:end="119:55">++</operator></expr></incr>)</control> <block pos:start="119:58" pos:end="135:17">{<block_content pos:start="121:21" pos:end="133:21">

                    <decl_stmt pos:start="121:21" pos:end="121:64"><decl pos:start="121:21" pos:end="121:63"><type pos:start="121:21" pos:end="121:40"><name pos:start="121:21" pos:end="121:38">ADPCMChannelStatus</name> <modifier pos:start="121:40" pos:end="121:40">*</modifier></type><name pos:start="121:41" pos:end="121:46">status</name> <init pos:start="121:48" pos:end="121:63">= <expr pos:start="121:50" pos:end="121:63"><operator pos:start="121:50" pos:end="121:50">&amp;</operator><name pos:start="121:51" pos:end="121:63"><name pos:start="121:51" pos:end="121:51">c</name><operator pos:start="121:52" pos:end="121:53">-&gt;</operator><name pos:start="121:54" pos:end="121:59">status</name><index pos:start="121:60" pos:end="121:63">[<expr pos:start="121:61" pos:end="121:62"><name pos:start="121:61" pos:end="121:62">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="123:21" pos:end="123:67"><decl pos:start="123:21" pos:end="123:66"><type pos:start="123:21" pos:end="123:35"><specifier pos:start="123:21" pos:end="123:25">const</specifier> <name pos:start="123:27" pos:end="123:33">int16_t</name> <modifier pos:start="123:35" pos:end="123:35">*</modifier></type><name pos:start="123:36" pos:end="123:38">smp</name> <init pos:start="123:40" pos:end="123:66">= <expr pos:start="123:42" pos:end="123:66"><operator pos:start="123:42" pos:end="123:42">&amp;</operator><name pos:start="123:43" pos:end="123:66"><name pos:start="123:43" pos:end="123:51">samples_p</name><index pos:start="123:52" pos:end="123:55">[<expr pos:start="123:53" pos:end="123:54"><name pos:start="123:53" pos:end="123:54">ch</name></expr>]</index><index pos:start="123:56" pos:end="123:66">[<expr pos:start="123:57" pos:end="123:65"><literal type="number" pos:start="123:57" pos:end="123:59">1</literal> <operator pos:start="123:59" pos:end="123:59">+</operator> <name pos:start="123:61" pos:end="123:61">i</name> <operator pos:start="123:63" pos:end="123:63">*</operator> <literal type="number" pos:start="123:65" pos:end="123:65">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <for pos:start="125:21" pos:end="133:21">for <control pos:start="125:25" pos:end="125:46">(<init pos:start="125:26" pos:end="125:31"><expr pos:start="125:26" pos:end="125:30"><name pos:start="125:26" pos:end="125:26">j</name> <operator pos:start="125:28" pos:end="125:28">=</operator> <literal type="number" pos:start="125:30" pos:end="125:30">0</literal></expr>;</init> <condition pos:start="125:33" pos:end="125:38"><expr pos:start="125:33" pos:end="125:37"><name pos:start="125:33" pos:end="125:33">j</name> <operator pos:start="125:35" pos:end="125:35">&lt;</operator> <literal type="number" pos:start="125:37" pos:end="125:37">8</literal></expr>;</condition> <incr pos:start="125:40" pos:end="125:45"><expr pos:start="125:40" pos:end="125:45"><name pos:start="125:40" pos:end="125:40">j</name> <operator pos:start="125:42" pos:end="125:43">+=</operator> <literal type="number" pos:start="125:45" pos:end="125:45">2</literal></expr></incr>)</control> <block pos:start="125:48" pos:end="133:21">{<block_content pos:start="127:25" pos:end="131:35">

                        <decl_stmt pos:start="127:25" pos:end="127:82"><decl pos:start="127:25" pos:end="127:81"><type pos:start="127:25" pos:end="127:31"><name pos:start="127:25" pos:end="127:31">uint8_t</name></type> <name pos:start="127:33" pos:end="127:33">v</name> <init pos:start="127:35" pos:end="127:81">= <expr pos:start="127:37" pos:end="127:81"><call pos:start="127:37" pos:end="127:81"><name pos:start="127:37" pos:end="127:61">adpcm_ima_compress_sample</name><argument_list pos:start="127:62" pos:end="127:81">(<argument pos:start="127:63" pos:end="127:68"><expr pos:start="127:63" pos:end="127:68"><name pos:start="127:63" pos:end="127:68">status</name></expr></argument>, <argument pos:start="127:71" pos:end="127:80"><expr pos:start="127:71" pos:end="127:80"><name pos:start="127:71" pos:end="127:80"><name pos:start="127:71" pos:end="127:73">smp</name><index pos:start="127:74" pos:end="127:80">[<expr pos:start="127:75" pos:end="127:75"><name pos:start="127:75" pos:end="127:75">j</name></expr>    ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="129:25" pos:end="129:87"><expr pos:start="129:25" pos:end="129:86"><name pos:start="129:25" pos:end="129:25">v</name>        <operator pos:start="129:34" pos:end="129:35">|=</operator> <call pos:start="129:37" pos:end="129:81"><name pos:start="129:37" pos:end="129:61">adpcm_ima_compress_sample</name><argument_list pos:start="129:62" pos:end="129:81">(<argument pos:start="129:63" pos:end="129:68"><expr pos:start="129:63" pos:end="129:68"><name pos:start="129:63" pos:end="129:68">status</name></expr></argument>, <argument pos:start="129:71" pos:end="129:80"><expr pos:start="129:71" pos:end="129:80"><name pos:start="129:71" pos:end="129:80"><name pos:start="129:71" pos:end="129:73">smp</name><index pos:start="129:74" pos:end="129:80">[<expr pos:start="129:75" pos:end="129:79"><name pos:start="129:75" pos:end="129:75">j</name> <operator pos:start="129:77" pos:end="129:77">+</operator> <literal type="number" pos:start="129:79" pos:end="129:79">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="129:83" pos:end="129:84">&lt;&lt;</operator> <literal type="number" pos:start="129:86" pos:end="129:86">4</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="131:25" pos:end="131:35"><expr pos:start="131:25" pos:end="131:34"><operator pos:start="131:25" pos:end="131:25">*</operator><name pos:start="131:26" pos:end="131:28">dst</name><operator pos:start="131:29" pos:end="131:30">++</operator> <operator pos:start="131:32" pos:end="131:32">=</operator> <name pos:start="131:34" pos:end="131:34">v</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    </block_content>}</block>

    <case pos:start="145:5" pos:end="145:34">case <expr pos:start="145:10" pos:end="145:33"><name pos:start="145:10" pos:end="145:33">AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

    <block pos:start="147:5" pos:end="201:5">{<block_content pos:start="149:9" pos:end="199:14">

        <decl_stmt pos:start="149:9" pos:end="149:25"><decl pos:start="149:9" pos:end="149:24"><type pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:21">PutBitContext</name></type> <name pos:start="149:23" pos:end="149:24">pb</name></decl>;</decl_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:46"><expr pos:start="151:9" pos:end="151:45"><call pos:start="151:9" pos:end="151:45"><name pos:start="151:9" pos:end="151:21">init_put_bits</name><argument_list pos:start="151:22" pos:end="151:45">(<argument pos:start="151:23" pos:end="151:25"><expr pos:start="151:23" pos:end="151:25"><operator pos:start="151:23" pos:end="151:23">&amp;</operator><name pos:start="151:24" pos:end="151:25">pb</name></expr></argument>, <argument pos:start="151:28" pos:end="151:30"><expr pos:start="151:28" pos:end="151:30"><name pos:start="151:28" pos:end="151:30">dst</name></expr></argument>, <argument pos:start="151:33" pos:end="151:44"><expr pos:start="151:33" pos:end="151:44"><name pos:start="151:33" pos:end="151:40">pkt_size</name> <operator pos:start="151:42" pos:end="151:42">*</operator> <literal type="number" pos:start="151:44" pos:end="151:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="155:9" pos:end="193:9">for <control pos:start="155:13" pos:end="155:48">(<init pos:start="155:14" pos:end="155:20"><expr pos:start="155:14" pos:end="155:19"><name pos:start="155:14" pos:end="155:15">ch</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>;</init> <condition pos:start="155:22" pos:end="155:42"><expr pos:start="155:22" pos:end="155:41"><name pos:start="155:22" pos:end="155:23">ch</name> <operator pos:start="155:25" pos:end="155:25">&lt;</operator> <name pos:start="155:27" pos:end="155:41"><name pos:start="155:27" pos:end="155:31">avctx</name><operator pos:start="155:32" pos:end="155:33">-&gt;</operator><name pos:start="155:34" pos:end="155:41">channels</name></name></expr>;</condition> <incr pos:start="155:44" pos:end="155:47"><expr pos:start="155:44" pos:end="155:47"><name pos:start="155:44" pos:end="155:45">ch</name><operator pos:start="155:46" pos:end="155:47">++</operator></expr></incr>)</control> <block pos:start="155:50" pos:end="193:9">{<block_content pos:start="157:13" pos:end="191:13">

            <decl_stmt pos:start="157:13" pos:end="157:56"><decl pos:start="157:13" pos:end="157:55"><type pos:start="157:13" pos:end="157:32"><name pos:start="157:13" pos:end="157:30">ADPCMChannelStatus</name> <modifier pos:start="157:32" pos:end="157:32">*</modifier></type><name pos:start="157:33" pos:end="157:38">status</name> <init pos:start="157:40" pos:end="157:55">= <expr pos:start="157:42" pos:end="157:55"><operator pos:start="157:42" pos:end="157:42">&amp;</operator><name pos:start="157:43" pos:end="157:55"><name pos:start="157:43" pos:end="157:43">c</name><operator pos:start="157:44" pos:end="157:45">-&gt;</operator><name pos:start="157:46" pos:end="157:51">status</name><index pos:start="157:52" pos:end="157:55">[<expr pos:start="157:53" pos:end="157:54"><name pos:start="157:53" pos:end="157:54">ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:66"><expr pos:start="159:13" pos:end="159:65"><call pos:start="159:13" pos:end="159:65"><name pos:start="159:13" pos:end="159:20">put_bits</name><argument_list pos:start="159:21" pos:end="159:65">(<argument pos:start="159:22" pos:end="159:24"><expr pos:start="159:22" pos:end="159:24"><operator pos:start="159:22" pos:end="159:22">&amp;</operator><name pos:start="159:23" pos:end="159:24">pb</name></expr></argument>, <argument pos:start="159:27" pos:end="159:27"><expr pos:start="159:27" pos:end="159:27"><literal type="number" pos:start="159:27" pos:end="159:27">9</literal></expr></argument>, <argument pos:start="159:30" pos:end="159:64"><expr pos:start="159:30" pos:end="159:64"><operator pos:start="159:30" pos:end="159:30">(</operator><name pos:start="159:31" pos:end="159:49"><name pos:start="159:31" pos:end="159:36">status</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:49">prev_sample</name></name> <operator pos:start="159:51" pos:end="159:51">&amp;</operator> <literal type="number" pos:start="159:53" pos:end="159:58">0xFFFF</literal><operator pos:start="159:59" pos:end="159:59">)</operator> <operator pos:start="159:61" pos:end="159:62">&gt;&gt;</operator> <literal type="number" pos:start="159:64" pos:end="159:64">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:50"><expr pos:start="161:13" pos:end="161:49"><call pos:start="161:13" pos:end="161:49"><name pos:start="161:13" pos:end="161:20">put_bits</name><argument_list pos:start="161:21" pos:end="161:49">(<argument pos:start="161:22" pos:end="161:24"><expr pos:start="161:22" pos:end="161:24"><operator pos:start="161:22" pos:end="161:22">&amp;</operator><name pos:start="161:23" pos:end="161:24">pb</name></expr></argument>, <argument pos:start="161:27" pos:end="161:27"><expr pos:start="161:27" pos:end="161:27"><literal type="number" pos:start="161:27" pos:end="161:27">7</literal></expr></argument>,  <argument pos:start="161:31" pos:end="161:48"><expr pos:start="161:31" pos:end="161:48"><name pos:start="161:31" pos:end="161:48"><name pos:start="161:31" pos:end="161:36">status</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:48">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="191:13"><if pos:start="163:13" pos:end="175:13">if <condition pos:start="163:16" pos:end="163:35">(<expr pos:start="163:17" pos:end="163:34"><name pos:start="163:17" pos:end="163:30"><name pos:start="163:17" pos:end="163:21">avctx</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:30">trellis</name></name> <operator pos:start="163:32" pos:end="163:32">&gt;</operator> <literal type="number" pos:start="163:34" pos:end="163:34">0</literal></expr>)</condition> <block pos:start="163:37" pos:end="175:13">{<block_content pos:start="165:17" pos:end="173:49">

                <decl_stmt pos:start="165:17" pos:end="165:32"><decl pos:start="165:17" pos:end="165:31"><type pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:23">uint8_t</name></type> <name pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:27">buf</name><index pos:start="165:28" pos:end="165:31">[<expr pos:start="165:29" pos:end="165:30"><literal type="number" pos:start="165:29" pos:end="165:30">64</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="167:17" pos:end="169:46"><expr pos:start="167:17" pos:end="169:45"><call pos:start="167:17" pos:end="169:45"><name pos:start="167:17" pos:end="167:38">adpcm_compress_trellis</name><argument_list pos:start="167:39" pos:end="169:45">(<argument pos:start="167:40" pos:end="167:44"><expr pos:start="167:40" pos:end="167:44"><name pos:start="167:40" pos:end="167:44">avctx</name></expr></argument>, <argument pos:start="167:47" pos:end="167:63"><expr pos:start="167:47" pos:end="167:63"><operator pos:start="167:47" pos:end="167:47">&amp;</operator><name pos:start="167:48" pos:end="167:63"><name pos:start="167:48" pos:end="167:56">samples_p</name><index pos:start="167:57" pos:end="167:60">[<expr pos:start="167:58" pos:end="167:59"><name pos:start="167:58" pos:end="167:59">ch</name></expr>]</index><index pos:start="167:61" pos:end="167:63">[<expr pos:start="167:62" pos:end="167:62"><literal type="number" pos:start="167:62" pos:end="167:62">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="167:66" pos:end="167:68"><expr pos:start="167:66" pos:end="167:68"><name pos:start="167:66" pos:end="167:68">buf</name></expr></argument>, <argument pos:start="167:71" pos:end="167:76"><expr pos:start="167:71" pos:end="167:76"><name pos:start="167:71" pos:end="167:76">status</name></expr></argument>,

                                       <argument pos:start="169:40" pos:end="169:41"><expr pos:start="169:40" pos:end="169:41"><literal type="number" pos:start="169:40" pos:end="169:41">64</literal></expr></argument>, <argument pos:start="169:44" pos:end="169:44"><expr pos:start="169:44" pos:end="169:44"><literal type="number" pos:start="169:44" pos:end="169:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="171:17" pos:end="173:49">for <control pos:start="171:21" pos:end="171:40">(<init pos:start="171:22" pos:end="171:27"><expr pos:start="171:22" pos:end="171:26"><name pos:start="171:22" pos:end="171:22">i</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <literal type="number" pos:start="171:26" pos:end="171:26">0</literal></expr>;</init> <condition pos:start="171:29" pos:end="171:35"><expr pos:start="171:29" pos:end="171:34"><name pos:start="171:29" pos:end="171:29">i</name> <operator pos:start="171:31" pos:end="171:31">&lt;</operator> <literal type="number" pos:start="171:33" pos:end="171:34">64</literal></expr>;</condition> <incr pos:start="171:37" pos:end="171:39"><expr pos:start="171:37" pos:end="171:39"><name pos:start="171:37" pos:end="171:37">i</name><operator pos:start="171:38" pos:end="171:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="173:21" pos:end="173:49"><block_content pos:start="173:21" pos:end="173:49">

                    <expr_stmt pos:start="173:21" pos:end="173:49"><expr pos:start="173:21" pos:end="173:48"><call pos:start="173:21" pos:end="173:48"><name pos:start="173:21" pos:end="173:28">put_bits</name><argument_list pos:start="173:29" pos:end="173:48">(<argument pos:start="173:30" pos:end="173:32"><expr pos:start="173:30" pos:end="173:32"><operator pos:start="173:30" pos:end="173:30">&amp;</operator><name pos:start="173:31" pos:end="173:32">pb</name></expr></argument>, <argument pos:start="173:35" pos:end="173:35"><expr pos:start="173:35" pos:end="173:35"><literal type="number" pos:start="173:35" pos:end="173:35">4</literal></expr></argument>, <argument pos:start="173:38" pos:end="173:47"><expr pos:start="173:38" pos:end="173:47"><name pos:start="173:38" pos:end="173:47"><name pos:start="173:38" pos:end="173:40">buf</name><index pos:start="173:41" pos:end="173:47">[<expr pos:start="173:42" pos:end="173:46"><name pos:start="173:42" pos:end="173:42">i</name> <operator pos:start="173:44" pos:end="173:44">^</operator> <literal type="number" pos:start="173:46" pos:end="173:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="175:15" pos:end="191:13">else <block pos:start="175:20" pos:end="191:13">{<block_content pos:start="177:17" pos:end="189:17">

                <for pos:start="177:17" pos:end="189:17">for <control pos:start="177:21" pos:end="177:43">(<init pos:start="177:22" pos:end="177:27"><expr pos:start="177:22" pos:end="177:26"><name pos:start="177:22" pos:end="177:22">i</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <literal type="number" pos:start="177:26" pos:end="177:26">0</literal></expr>;</init> <condition pos:start="177:29" pos:end="177:35"><expr pos:start="177:29" pos:end="177:34"><name pos:start="177:29" pos:end="177:29">i</name> <operator pos:start="177:31" pos:end="177:31">&lt;</operator> <literal type="number" pos:start="177:33" pos:end="177:34">64</literal></expr>;</condition> <incr pos:start="177:37" pos:end="177:42"><expr pos:start="177:37" pos:end="177:42"><name pos:start="177:37" pos:end="177:37">i</name> <operator pos:start="177:39" pos:end="177:40">+=</operator> <literal type="number" pos:start="177:42" pos:end="177:42">2</literal></expr></incr>)</control> <block pos:start="177:45" pos:end="189:17">{<block_content pos:start="179:21" pos:end="187:41">

                    <decl_stmt pos:start="179:21" pos:end="179:31"><decl pos:start="179:21" pos:end="179:26"><type pos:start="179:21" pos:end="179:23"><name pos:start="179:21" pos:end="179:23">int</name></type> <name pos:start="179:25" pos:end="179:26">t1</name></decl>, <decl pos:start="179:29" pos:end="179:30"><type ref="prev" pos:start="179:21" pos:end="179:23"/><name pos:start="179:29" pos:end="179:30">t2</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:84"><expr pos:start="181:21" pos:end="181:83"><name pos:start="181:21" pos:end="181:22">t1</name> <operator pos:start="181:24" pos:end="181:24">=</operator> <call pos:start="181:26" pos:end="181:83"><name pos:start="181:26" pos:end="181:53">adpcm_ima_qt_compress_sample</name><argument_list pos:start="181:54" pos:end="181:83">(<argument pos:start="181:55" pos:end="181:60"><expr pos:start="181:55" pos:end="181:60"><name pos:start="181:55" pos:end="181:60">status</name></expr></argument>, <argument pos:start="181:63" pos:end="181:82"><expr pos:start="181:63" pos:end="181:82"><name pos:start="181:63" pos:end="181:82"><name pos:start="181:63" pos:end="181:71">samples_p</name><index pos:start="181:72" pos:end="181:75">[<expr pos:start="181:73" pos:end="181:74"><name pos:start="181:73" pos:end="181:74">ch</name></expr>]</index><index pos:start="181:76" pos:end="181:82">[<expr pos:start="181:77" pos:end="181:77"><name pos:start="181:77" pos:end="181:77">i</name></expr>    ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:84"><expr pos:start="183:21" pos:end="183:83"><name pos:start="183:21" pos:end="183:22">t2</name> <operator pos:start="183:24" pos:end="183:24">=</operator> <call pos:start="183:26" pos:end="183:83"><name pos:start="183:26" pos:end="183:53">adpcm_ima_qt_compress_sample</name><argument_list pos:start="183:54" pos:end="183:83">(<argument pos:start="183:55" pos:end="183:60"><expr pos:start="183:55" pos:end="183:60"><name pos:start="183:55" pos:end="183:60">status</name></expr></argument>, <argument pos:start="183:63" pos:end="183:82"><expr pos:start="183:63" pos:end="183:82"><name pos:start="183:63" pos:end="183:82"><name pos:start="183:63" pos:end="183:71">samples_p</name><index pos:start="183:72" pos:end="183:75">[<expr pos:start="183:73" pos:end="183:74"><name pos:start="183:73" pos:end="183:74">ch</name></expr>]</index><index pos:start="183:76" pos:end="183:82">[<expr pos:start="183:77" pos:end="183:81"><name pos:start="183:77" pos:end="183:77">i</name> <operator pos:start="183:79" pos:end="183:79">+</operator> <literal type="number" pos:start="183:81" pos:end="183:81">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:41"><expr pos:start="185:21" pos:end="185:40"><call pos:start="185:21" pos:end="185:40"><name pos:start="185:21" pos:end="185:28">put_bits</name><argument_list pos:start="185:29" pos:end="185:40">(<argument pos:start="185:30" pos:end="185:32"><expr pos:start="185:30" pos:end="185:32"><operator pos:start="185:30" pos:end="185:30">&amp;</operator><name pos:start="185:31" pos:end="185:32">pb</name></expr></argument>, <argument pos:start="185:35" pos:end="185:35"><expr pos:start="185:35" pos:end="185:35"><literal type="number" pos:start="185:35" pos:end="185:35">4</literal></expr></argument>, <argument pos:start="185:38" pos:end="185:39"><expr pos:start="185:38" pos:end="185:39"><name pos:start="185:38" pos:end="185:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:41"><expr pos:start="187:21" pos:end="187:40"><call pos:start="187:21" pos:end="187:40"><name pos:start="187:21" pos:end="187:28">put_bits</name><argument_list pos:start="187:29" pos:end="187:40">(<argument pos:start="187:30" pos:end="187:32"><expr pos:start="187:30" pos:end="187:32"><operator pos:start="187:30" pos:end="187:30">&amp;</operator><name pos:start="187:31" pos:end="187:32">pb</name></expr></argument>, <argument pos:start="187:35" pos:end="187:35"><expr pos:start="187:35" pos:end="187:35"><literal type="number" pos:start="187:35" pos:end="187:35">4</literal></expr></argument>, <argument pos:start="187:38" pos:end="187:39"><expr pos:start="187:38" pos:end="187:39"><name pos:start="187:38" pos:end="187:39">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="197:9" pos:end="197:28"><expr pos:start="197:9" pos:end="197:27"><call pos:start="197:9" pos:end="197:27"><name pos:start="197:9" pos:end="197:22">flush_put_bits</name><argument_list pos:start="197:23" pos:end="197:27">(<argument pos:start="197:24" pos:end="197:26"><expr pos:start="197:24" pos:end="197:26"><operator pos:start="197:24" pos:end="197:24">&amp;</operator><name pos:start="197:25" pos:end="197:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    </block_content>}</block>

    <case pos:start="203:5" pos:end="203:31">case <expr pos:start="203:10" pos:end="203:30"><name pos:start="203:10" pos:end="203:30">AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>

    <block pos:start="205:5" pos:end="291:5">{<block_content pos:start="207:9" pos:end="289:14">

        <decl_stmt pos:start="207:9" pos:end="207:25"><decl pos:start="207:9" pos:end="207:24"><type pos:start="207:9" pos:end="207:21"><name pos:start="207:9" pos:end="207:21">PutBitContext</name></type> <name pos:start="207:23" pos:end="207:24">pb</name></decl>;</decl_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:46"><expr pos:start="209:9" pos:end="209:45"><call pos:start="209:9" pos:end="209:45"><name pos:start="209:9" pos:end="209:21">init_put_bits</name><argument_list pos:start="209:22" pos:end="209:45">(<argument pos:start="209:23" pos:end="209:25"><expr pos:start="209:23" pos:end="209:25"><operator pos:start="209:23" pos:end="209:23">&amp;</operator><name pos:start="209:24" pos:end="209:25">pb</name></expr></argument>, <argument pos:start="209:28" pos:end="209:30"><expr pos:start="209:28" pos:end="209:30"><name pos:start="209:28" pos:end="209:30">dst</name></expr></argument>, <argument pos:start="209:33" pos:end="209:44"><expr pos:start="209:33" pos:end="209:44"><name pos:start="209:33" pos:end="209:40">pkt_size</name> <operator pos:start="209:42" pos:end="209:42">*</operator> <literal type="number" pos:start="209:44" pos:end="209:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:34"><expr pos:start="213:9" pos:end="213:33"><name pos:start="213:9" pos:end="213:9">n</name> <operator pos:start="213:11" pos:end="213:11">=</operator> <name pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:17">frame</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:29">nb_samples</name></name> <operator pos:start="213:31" pos:end="213:31">-</operator> <literal type="number" pos:start="213:33" pos:end="213:33">1</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="217:9" pos:end="217:30">// store AdpcmCodeSize</comment>

        <expr_stmt pos:start="219:9" pos:end="219:28"><expr pos:start="219:9" pos:end="219:27"><call pos:start="219:9" pos:end="219:27"><name pos:start="219:9" pos:end="219:16">put_bits</name><argument_list pos:start="219:17" pos:end="219:27">(<argument pos:start="219:18" pos:end="219:20"><expr pos:start="219:18" pos:end="219:20"><operator pos:start="219:18" pos:end="219:18">&amp;</operator><name pos:start="219:19" pos:end="219:20">pb</name></expr></argument>, <argument pos:start="219:23" pos:end="219:23"><expr pos:start="219:23" pos:end="219:23"><literal type="number" pos:start="219:23" pos:end="219:23">2</literal></expr></argument>, <argument pos:start="219:26" pos:end="219:26"><expr pos:start="219:26" pos:end="219:26"><literal type="number" pos:start="219:26" pos:end="219:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="219:33" pos:end="219:63">// set 4-bit flash adpcm format</comment>



        <comment type="line" pos:start="223:9" pos:end="223:33">// init the encoder state</comment>

        <for pos:start="225:9" pos:end="237:9">for <control pos:start="225:13" pos:end="225:45">(<init pos:start="225:14" pos:end="225:19"><expr pos:start="225:14" pos:end="225:18"><name pos:start="225:14" pos:end="225:14">i</name> <operator pos:start="225:16" pos:end="225:16">=</operator> <literal type="number" pos:start="225:18" pos:end="225:18">0</literal></expr>;</init> <condition pos:start="225:21" pos:end="225:40"><expr pos:start="225:21" pos:end="225:39"><name pos:start="225:21" pos:end="225:21">i</name> <operator pos:start="225:23" pos:end="225:23">&lt;</operator> <name pos:start="225:25" pos:end="225:39"><name pos:start="225:25" pos:end="225:29">avctx</name><operator pos:start="225:30" pos:end="225:31">-&gt;</operator><name pos:start="225:32" pos:end="225:39">channels</name></name></expr>;</condition> <incr pos:start="225:42" pos:end="225:44"><expr pos:start="225:42" pos:end="225:44"><name pos:start="225:42" pos:end="225:42">i</name><operator pos:start="225:43" pos:end="225:44">++</operator></expr></incr>)</control> <block pos:start="225:47" pos:end="237:9">{<block_content pos:start="229:13" pos:end="235:50">

            <comment type="line" pos:start="227:13" pos:end="227:42">// clip step so it fits 6 bits</comment>

            <expr_stmt pos:start="229:13" pos:end="229:78"><expr pos:start="229:13" pos:end="229:77"><name pos:start="229:13" pos:end="229:24"><name pos:start="229:13" pos:end="229:13">c</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:21">status</name><index pos:start="229:22" pos:end="229:24">[<expr pos:start="229:23" pos:end="229:23"><name pos:start="229:23" pos:end="229:23">i</name></expr>]</index></name><operator pos:start="229:25" pos:end="229:25">.</operator><name pos:start="229:26" pos:end="229:35">step_index</name> <operator pos:start="229:37" pos:end="229:37">=</operator> <call pos:start="229:39" pos:end="229:77"><name pos:start="229:39" pos:end="229:45">av_clip</name><argument_list pos:start="229:46" pos:end="229:77">(<argument pos:start="229:47" pos:end="229:69"><expr pos:start="229:47" pos:end="229:69"><name pos:start="229:47" pos:end="229:58"><name pos:start="229:47" pos:end="229:47">c</name><operator pos:start="229:48" pos:end="229:49">-&gt;</operator><name pos:start="229:50" pos:end="229:55">status</name><index pos:start="229:56" pos:end="229:58">[<expr pos:start="229:57" pos:end="229:57"><name pos:start="229:57" pos:end="229:57">i</name></expr>]</index></name><operator pos:start="229:59" pos:end="229:59">.</operator><name pos:start="229:60" pos:end="229:69">step_index</name></expr></argument>, <argument pos:start="229:72" pos:end="229:72"><expr pos:start="229:72" pos:end="229:72"><literal type="number" pos:start="229:72" pos:end="229:72">0</literal></expr></argument>, <argument pos:start="229:75" pos:end="229:76"><expr pos:start="229:75" pos:end="229:76"><literal type="number" pos:start="229:75" pos:end="229:76">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:43"><expr pos:start="231:13" pos:end="231:42"><call pos:start="231:13" pos:end="231:42"><name pos:start="231:13" pos:end="231:21">put_sbits</name><argument_list pos:start="231:22" pos:end="231:42">(<argument pos:start="231:23" pos:end="231:25"><expr pos:start="231:23" pos:end="231:25"><operator pos:start="231:23" pos:end="231:23">&amp;</operator><name pos:start="231:24" pos:end="231:25">pb</name></expr></argument>, <argument pos:start="231:28" pos:end="231:29"><expr pos:start="231:28" pos:end="231:29"><literal type="number" pos:start="231:28" pos:end="231:29">16</literal></expr></argument>, <argument pos:start="231:32" pos:end="231:41"><expr pos:start="231:32" pos:end="231:41"><name pos:start="231:32" pos:end="231:41"><name pos:start="231:32" pos:end="231:38">samples</name><index pos:start="231:39" pos:end="231:41">[<expr pos:start="231:40" pos:end="231:40"><name pos:start="231:40" pos:end="231:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:54"><expr pos:start="233:13" pos:end="233:53"><call pos:start="233:13" pos:end="233:53"><name pos:start="233:13" pos:end="233:20">put_bits</name><argument_list pos:start="233:21" pos:end="233:53">(<argument pos:start="233:22" pos:end="233:24"><expr pos:start="233:22" pos:end="233:24"><operator pos:start="233:22" pos:end="233:22">&amp;</operator><name pos:start="233:23" pos:end="233:24">pb</name></expr></argument>, <argument pos:start="233:27" pos:end="233:27"><expr pos:start="233:27" pos:end="233:27"><literal type="number" pos:start="233:27" pos:end="233:27">6</literal></expr></argument>, <argument pos:start="233:30" pos:end="233:52"><expr pos:start="233:30" pos:end="233:52"><name pos:start="233:30" pos:end="233:41"><name pos:start="233:30" pos:end="233:30">c</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:38">status</name><index pos:start="233:39" pos:end="233:41">[<expr pos:start="233:40" pos:end="233:40"><name pos:start="233:40" pos:end="233:40">i</name></expr>]</index></name><operator pos:start="233:42" pos:end="233:42">.</operator><name pos:start="233:43" pos:end="233:52">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:50"><expr pos:start="235:13" pos:end="235:49"><name pos:start="235:13" pos:end="235:24"><name pos:start="235:13" pos:end="235:13">c</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:21">status</name><index pos:start="235:22" pos:end="235:24">[<expr pos:start="235:23" pos:end="235:23"><name pos:start="235:23" pos:end="235:23">i</name></expr>]</index></name><operator pos:start="235:25" pos:end="235:25">.</operator><name pos:start="235:26" pos:end="235:36">prev_sample</name> <operator pos:start="235:38" pos:end="235:38">=</operator> <name pos:start="235:40" pos:end="235:49"><name pos:start="235:40" pos:end="235:46">samples</name><index pos:start="235:47" pos:end="235:49">[<expr pos:start="235:48" pos:end="235:48"><name pos:start="235:48" pos:end="235:48">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="241:9" pos:end="285:9"><if pos:start="241:9" pos:end="269:9">if <condition pos:start="241:12" pos:end="241:31">(<expr pos:start="241:13" pos:end="241:30"><name pos:start="241:13" pos:end="241:26"><name pos:start="241:13" pos:end="241:17">avctx</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:26">trellis</name></name> <operator pos:start="241:28" pos:end="241:28">&gt;</operator> <literal type="number" pos:start="241:30" pos:end="241:30">0</literal></expr>)</condition> <block pos:start="241:33" pos:end="269:9">{<block_content pos:start="243:13" pos:end="267:25">

            <expr_stmt pos:start="243:13" pos:end="243:55"><expr pos:start="243:13" pos:end="243:54"><call pos:start="243:13" pos:end="243:54"><name pos:start="243:13" pos:end="243:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="243:29" pos:end="243:54">(<argument pos:start="243:30" pos:end="243:34"><expr pos:start="243:30" pos:end="243:34"><name pos:start="243:30" pos:end="243:34">avctx</name></expr></argument>, <argument pos:start="243:37" pos:end="243:39"><expr pos:start="243:37" pos:end="243:39"><name pos:start="243:37" pos:end="243:39">buf</name></expr></argument>, <argument pos:start="243:42" pos:end="243:46"><expr pos:start="243:42" pos:end="243:46"><literal type="number" pos:start="243:42" pos:end="243:42">2</literal> <operator pos:start="243:44" pos:end="243:44">*</operator> <name pos:start="243:46" pos:end="243:46">n</name></expr></argument>, <argument pos:start="243:49" pos:end="243:53"><expr pos:start="243:49" pos:end="243:53"><name pos:start="243:49" pos:end="243:53">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="247:70"><expr pos:start="245:13" pos:end="247:69"><call pos:start="245:13" pos:end="247:69"><name pos:start="245:13" pos:end="245:34">adpcm_compress_trellis</name><argument_list pos:start="245:35" pos:end="247:69">(<argument pos:start="245:36" pos:end="245:40"><expr pos:start="245:36" pos:end="245:40"><name pos:start="245:36" pos:end="245:40">avctx</name></expr></argument>, <argument pos:start="245:43" pos:end="245:67"><expr pos:start="245:43" pos:end="245:67"><name pos:start="245:43" pos:end="245:49">samples</name> <operator pos:start="245:51" pos:end="245:51">+</operator> <name pos:start="245:53" pos:end="245:67"><name pos:start="245:53" pos:end="245:57">avctx</name><operator pos:start="245:58" pos:end="245:59">-&gt;</operator><name pos:start="245:60" pos:end="245:67">channels</name></name></expr></argument>, <argument pos:start="245:70" pos:end="245:72"><expr pos:start="245:70" pos:end="245:72"><name pos:start="245:70" pos:end="245:72">buf</name></expr></argument>,

                                   <argument pos:start="247:36" pos:end="247:48"><expr pos:start="247:36" pos:end="247:48"><operator pos:start="247:36" pos:end="247:36">&amp;</operator><name pos:start="247:37" pos:end="247:48"><name pos:start="247:37" pos:end="247:37">c</name><operator pos:start="247:38" pos:end="247:39">-&gt;</operator><name pos:start="247:40" pos:end="247:45">status</name><index pos:start="247:46" pos:end="247:48">[<expr pos:start="247:47" pos:end="247:47"><literal type="number" pos:start="247:47" pos:end="247:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:51" pos:end="247:51"><expr pos:start="247:51" pos:end="247:51"><name pos:start="247:51" pos:end="247:51">n</name></expr></argument>, <argument pos:start="247:54" pos:end="247:68"><expr pos:start="247:54" pos:end="247:68"><name pos:start="247:54" pos:end="247:68"><name pos:start="247:54" pos:end="247:58">avctx</name><operator pos:start="247:59" pos:end="247:60">-&gt;</operator><name pos:start="247:61" pos:end="247:68">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="255:56"><if pos:start="249:13" pos:end="255:56">if <condition pos:start="249:16" pos:end="249:37">(<expr pos:start="249:17" pos:end="249:36"><name pos:start="249:17" pos:end="249:31"><name pos:start="249:17" pos:end="249:21">avctx</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:31">channels</name></name> <operator pos:start="249:33" pos:end="249:34">==</operator> <literal type="number" pos:start="249:36" pos:end="249:36">2</literal></expr>)</condition><block type="pseudo" pos:start="251:17" pos:end="255:56"><block_content pos:start="251:17" pos:end="255:56">

                <expr_stmt pos:start="251:17" pos:end="255:56"><expr pos:start="251:17" pos:end="255:55"><call pos:start="251:17" pos:end="255:55"><name pos:start="251:17" pos:end="251:38">adpcm_compress_trellis</name><argument_list pos:start="251:39" pos:end="255:55">(<argument pos:start="251:40" pos:end="251:44"><expr pos:start="251:40" pos:end="251:44"><name pos:start="251:40" pos:end="251:44">avctx</name></expr></argument>, <argument pos:start="251:47" pos:end="251:75"><expr pos:start="251:47" pos:end="251:75"><name pos:start="251:47" pos:end="251:53">samples</name> <operator pos:start="251:55" pos:end="251:55">+</operator> <name pos:start="251:57" pos:end="251:71"><name pos:start="251:57" pos:end="251:61">avctx</name><operator pos:start="251:62" pos:end="251:63">-&gt;</operator><name pos:start="251:64" pos:end="251:71">channels</name></name> <operator pos:start="251:73" pos:end="251:73">+</operator> <literal type="number" pos:start="251:75" pos:end="251:75">1</literal></expr></argument>,

                                       <argument pos:start="253:40" pos:end="253:46"><expr pos:start="253:40" pos:end="253:46"><name pos:start="253:40" pos:end="253:42">buf</name> <operator pos:start="253:44" pos:end="253:44">+</operator> <name pos:start="253:46" pos:end="253:46">n</name></expr></argument>, <argument pos:start="253:49" pos:end="253:61"><expr pos:start="253:49" pos:end="253:61"><operator pos:start="253:49" pos:end="253:49">&amp;</operator><name pos:start="253:50" pos:end="253:61"><name pos:start="253:50" pos:end="253:50">c</name><operator pos:start="253:51" pos:end="253:52">-&gt;</operator><name pos:start="253:53" pos:end="253:58">status</name><index pos:start="253:59" pos:end="253:61">[<expr pos:start="253:60" pos:end="253:60"><literal type="number" pos:start="253:60" pos:end="253:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="253:64" pos:end="253:64"><expr pos:start="253:64" pos:end="253:64"><name pos:start="253:64" pos:end="253:64">n</name></expr></argument>,

                                       <argument pos:start="255:40" pos:end="255:54"><expr pos:start="255:40" pos:end="255:54"><name pos:start="255:40" pos:end="255:54"><name pos:start="255:40" pos:end="255:44">avctx</name><operator pos:start="255:45" pos:end="255:46">-&gt;</operator><name pos:start="255:47" pos:end="255:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for pos:start="257:13" pos:end="265:13">for <control pos:start="257:17" pos:end="257:35">(<init pos:start="257:18" pos:end="257:23"><expr pos:start="257:18" pos:end="257:22"><name pos:start="257:18" pos:end="257:18">i</name> <operator pos:start="257:20" pos:end="257:20">=</operator> <literal type="number" pos:start="257:22" pos:end="257:22">0</literal></expr>;</init> <condition pos:start="257:25" pos:end="257:30"><expr pos:start="257:25" pos:end="257:29"><name pos:start="257:25" pos:end="257:25">i</name> <operator pos:start="257:27" pos:end="257:27">&lt;</operator> <name pos:start="257:29" pos:end="257:29">n</name></expr>;</condition> <incr pos:start="257:32" pos:end="257:34"><expr pos:start="257:32" pos:end="257:34"><name pos:start="257:32" pos:end="257:32">i</name><operator pos:start="257:33" pos:end="257:34">++</operator></expr></incr>)</control> <block pos:start="257:37" pos:end="265:13">{<block_content pos:start="259:17" pos:end="263:49">

                <expr_stmt pos:start="259:17" pos:end="259:41"><expr pos:start="259:17" pos:end="259:40"><call pos:start="259:17" pos:end="259:40"><name pos:start="259:17" pos:end="259:24">put_bits</name><argument_list pos:start="259:25" pos:end="259:40">(<argument pos:start="259:26" pos:end="259:28"><expr pos:start="259:26" pos:end="259:28"><operator pos:start="259:26" pos:end="259:26">&amp;</operator><name pos:start="259:27" pos:end="259:28">pb</name></expr></argument>, <argument pos:start="259:31" pos:end="259:31"><expr pos:start="259:31" pos:end="259:31"><literal type="number" pos:start="259:31" pos:end="259:31">4</literal></expr></argument>, <argument pos:start="259:34" pos:end="259:39"><expr pos:start="259:34" pos:end="259:39"><name pos:start="259:34" pos:end="259:39"><name pos:start="259:34" pos:end="259:36">buf</name><index pos:start="259:37" pos:end="259:39">[<expr pos:start="259:38" pos:end="259:38"><name pos:start="259:38" pos:end="259:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="261:17" pos:end="263:49"><if pos:start="261:17" pos:end="263:49">if <condition pos:start="261:20" pos:end="261:41">(<expr pos:start="261:21" pos:end="261:40"><name pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:25">avctx</name><operator pos:start="261:26" pos:end="261:27">-&gt;</operator><name pos:start="261:28" pos:end="261:35">channels</name></name> <operator pos:start="261:37" pos:end="261:38">==</operator> <literal type="number" pos:start="261:40" pos:end="261:40">2</literal></expr>)</condition><block type="pseudo" pos:start="263:21" pos:end="263:49"><block_content pos:start="263:21" pos:end="263:49">

                    <expr_stmt pos:start="263:21" pos:end="263:49"><expr pos:start="263:21" pos:end="263:48"><call pos:start="263:21" pos:end="263:48"><name pos:start="263:21" pos:end="263:28">put_bits</name><argument_list pos:start="263:29" pos:end="263:48">(<argument pos:start="263:30" pos:end="263:32"><expr pos:start="263:30" pos:end="263:32"><operator pos:start="263:30" pos:end="263:30">&amp;</operator><name pos:start="263:31" pos:end="263:32">pb</name></expr></argument>, <argument pos:start="263:35" pos:end="263:35"><expr pos:start="263:35" pos:end="263:35"><literal type="number" pos:start="263:35" pos:end="263:35">4</literal></expr></argument>, <argument pos:start="263:38" pos:end="263:47"><expr pos:start="263:38" pos:end="263:47"><name pos:start="263:38" pos:end="263:47"><name pos:start="263:38" pos:end="263:40">buf</name><index pos:start="263:41" pos:end="263:47">[<expr pos:start="263:42" pos:end="263:46"><name pos:start="263:42" pos:end="263:42">n</name> <operator pos:start="263:44" pos:end="263:44">+</operator> <name pos:start="263:46" pos:end="263:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="267:13" pos:end="267:25"><expr pos:start="267:13" pos:end="267:24"><call pos:start="267:13" pos:end="267:24"><name pos:start="267:13" pos:end="267:19">av_free</name><argument_list pos:start="267:20" pos:end="267:24">(<argument pos:start="267:21" pos:end="267:23"><expr pos:start="267:21" pos:end="267:23"><name pos:start="267:21" pos:end="267:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="269:11" pos:end="285:9">else <block pos:start="269:16" pos:end="285:9">{<block_content pos:start="271:13" pos:end="283:13">

            <for pos:start="271:13" pos:end="283:13">for <control pos:start="271:17" pos:end="271:51">(<init pos:start="271:18" pos:end="271:23"><expr pos:start="271:18" pos:end="271:22"><name pos:start="271:18" pos:end="271:18">i</name> <operator pos:start="271:20" pos:end="271:20">=</operator> <literal type="number" pos:start="271:22" pos:end="271:22">1</literal></expr>;</init> <condition pos:start="271:25" pos:end="271:46"><expr pos:start="271:25" pos:end="271:45"><name pos:start="271:25" pos:end="271:25">i</name> <operator pos:start="271:27" pos:end="271:27">&lt;</operator> <name pos:start="271:29" pos:end="271:45"><name pos:start="271:29" pos:end="271:33">frame</name><operator pos:start="271:34" pos:end="271:35">-&gt;</operator><name pos:start="271:36" pos:end="271:45">nb_samples</name></name></expr>;</condition> <incr pos:start="271:48" pos:end="271:50"><expr pos:start="271:48" pos:end="271:50"><name pos:start="271:48" pos:end="271:48">i</name><operator pos:start="271:49" pos:end="271:50">++</operator></expr></incr>)</control> <block pos:start="271:53" pos:end="283:13">{<block_content pos:start="273:17" pos:end="281:50">

                <expr_stmt pos:start="273:17" pos:end="275:56"><expr pos:start="273:17" pos:end="275:55"><call pos:start="273:17" pos:end="275:55"><name pos:start="273:17" pos:end="273:24">put_bits</name><argument_list pos:start="273:25" pos:end="275:55">(<argument pos:start="273:26" pos:end="273:28"><expr pos:start="273:26" pos:end="273:28"><operator pos:start="273:26" pos:end="273:26">&amp;</operator><name pos:start="273:27" pos:end="273:28">pb</name></expr></argument>, <argument pos:start="273:31" pos:end="273:31"><expr pos:start="273:31" pos:end="273:31"><literal type="number" pos:start="273:31" pos:end="273:31">4</literal></expr></argument>, <argument pos:start="273:34" pos:end="275:54"><expr pos:start="273:34" pos:end="275:54"><call pos:start="273:34" pos:end="275:54"><name pos:start="273:34" pos:end="273:58">adpcm_ima_compress_sample</name><argument_list pos:start="273:59" pos:end="275:54">(<argument pos:start="273:60" pos:end="273:72"><expr pos:start="273:60" pos:end="273:72"><operator pos:start="273:60" pos:end="273:60">&amp;</operator><name pos:start="273:61" pos:end="273:72"><name pos:start="273:61" pos:end="273:61">c</name><operator pos:start="273:62" pos:end="273:63">-&gt;</operator><name pos:start="273:64" pos:end="273:69">status</name><index pos:start="273:70" pos:end="273:72">[<expr pos:start="273:71" pos:end="273:71"><literal type="number" pos:start="273:71" pos:end="273:71">0</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="275:26" pos:end="275:53"><expr pos:start="275:26" pos:end="275:53"><name pos:start="275:26" pos:end="275:53"><name pos:start="275:26" pos:end="275:32">samples</name><index pos:start="275:33" pos:end="275:53">[<expr pos:start="275:34" pos:end="275:52"><name pos:start="275:34" pos:end="275:48"><name pos:start="275:34" pos:end="275:38">avctx</name><operator pos:start="275:39" pos:end="275:40">-&gt;</operator><name pos:start="275:41" pos:end="275:48">channels</name></name> <operator pos:start="275:50" pos:end="275:50">*</operator> <name pos:start="275:52" pos:end="275:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="277:17" pos:end="281:50"><if pos:start="277:17" pos:end="281:50">if <condition pos:start="277:20" pos:end="277:41">(<expr pos:start="277:21" pos:end="277:40"><name pos:start="277:21" pos:end="277:35"><name pos:start="277:21" pos:end="277:25">avctx</name><operator pos:start="277:26" pos:end="277:27">-&gt;</operator><name pos:start="277:28" pos:end="277:35">channels</name></name> <operator pos:start="277:37" pos:end="277:38">==</operator> <literal type="number" pos:start="277:40" pos:end="277:40">2</literal></expr>)</condition><block type="pseudo" pos:start="279:21" pos:end="281:50"><block_content pos:start="279:21" pos:end="281:50">

                    <expr_stmt pos:start="279:21" pos:end="281:50"><expr pos:start="279:21" pos:end="281:49"><call pos:start="279:21" pos:end="281:49"><name pos:start="279:21" pos:end="279:28">put_bits</name><argument_list pos:start="279:29" pos:end="281:49">(<argument pos:start="279:30" pos:end="279:32"><expr pos:start="279:30" pos:end="279:32"><operator pos:start="279:30" pos:end="279:30">&amp;</operator><name pos:start="279:31" pos:end="279:32">pb</name></expr></argument>, <argument pos:start="279:35" pos:end="279:35"><expr pos:start="279:35" pos:end="279:35"><literal type="number" pos:start="279:35" pos:end="279:35">4</literal></expr></argument>, <argument pos:start="279:38" pos:end="281:48"><expr pos:start="279:38" pos:end="281:48"><call pos:start="279:38" pos:end="281:48"><name pos:start="279:38" pos:end="279:62">adpcm_ima_compress_sample</name><argument_list pos:start="279:63" pos:end="281:48">(<argument pos:start="279:64" pos:end="279:76"><expr pos:start="279:64" pos:end="279:76"><operator pos:start="279:64" pos:end="279:64">&amp;</operator><name pos:start="279:65" pos:end="279:76"><name pos:start="279:65" pos:end="279:65">c</name><operator pos:start="279:66" pos:end="279:67">-&gt;</operator><name pos:start="279:68" pos:end="279:73">status</name><index pos:start="279:74" pos:end="279:76">[<expr pos:start="279:75" pos:end="279:75"><literal type="number" pos:start="279:75" pos:end="279:75">1</literal></expr>]</index></name></expr></argument>,

                             <argument pos:start="281:30" pos:end="281:47"><expr pos:start="281:30" pos:end="281:47"><name pos:start="281:30" pos:end="281:47"><name pos:start="281:30" pos:end="281:36">samples</name><index pos:start="281:37" pos:end="281:47">[<expr pos:start="281:38" pos:end="281:46"><literal type="number" pos:start="281:38" pos:end="281:38">2</literal> <operator pos:start="281:40" pos:end="281:40">*</operator> <name pos:start="281:42" pos:end="281:42">i</name> <operator pos:start="281:44" pos:end="281:44">+</operator> <literal type="number" pos:start="281:46" pos:end="281:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:28"><expr pos:start="287:9" pos:end="287:27"><call pos:start="287:9" pos:end="287:27"><name pos:start="287:9" pos:end="287:22">flush_put_bits</name><argument_list pos:start="287:23" pos:end="287:27">(<argument pos:start="287:24" pos:end="287:26"><expr pos:start="287:24" pos:end="287:26"><operator pos:start="287:24" pos:end="287:24">&amp;</operator><name pos:start="287:25" pos:end="287:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    </block_content>}</block>

    <case pos:start="293:5" pos:end="293:30">case <expr pos:start="293:10" pos:end="293:29"><name pos:start="293:10" pos:end="293:29">AV_CODEC_ID_ADPCM_MS</name></expr>:</case>

        <for pos:start="295:9" pos:end="305:9">for <control pos:start="295:13" pos:end="295:45">(<init pos:start="295:14" pos:end="295:19"><expr pos:start="295:14" pos:end="295:18"><name pos:start="295:14" pos:end="295:14">i</name> <operator pos:start="295:16" pos:end="295:16">=</operator> <literal type="number" pos:start="295:18" pos:end="295:18">0</literal></expr>;</init> <condition pos:start="295:21" pos:end="295:40"><expr pos:start="295:21" pos:end="295:39"><name pos:start="295:21" pos:end="295:21">i</name> <operator pos:start="295:23" pos:end="295:23">&lt;</operator> <name pos:start="295:25" pos:end="295:39"><name pos:start="295:25" pos:end="295:29">avctx</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:39">channels</name></name></expr>;</condition> <incr pos:start="295:42" pos:end="295:44"><expr pos:start="295:42" pos:end="295:44"><name pos:start="295:42" pos:end="295:42">i</name><operator pos:start="295:43" pos:end="295:44">++</operator></expr></incr>)</control> <block pos:start="295:47" pos:end="305:9">{<block_content pos:start="297:13" pos:end="303:66">

            <decl_stmt pos:start="297:13" pos:end="297:30"><decl pos:start="297:13" pos:end="297:29"><type pos:start="297:13" pos:end="297:15"><name pos:start="297:13" pos:end="297:15">int</name></type> <name pos:start="297:17" pos:end="297:25">predictor</name> <init pos:start="297:27" pos:end="297:29">= <expr pos:start="297:29" pos:end="297:29"><literal type="number" pos:start="297:29" pos:end="297:29">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:31"><expr pos:start="299:13" pos:end="299:30"><operator pos:start="299:13" pos:end="299:13">*</operator><name pos:start="299:14" pos:end="299:16">dst</name><operator pos:start="299:17" pos:end="299:18">++</operator> <operator pos:start="299:20" pos:end="299:20">=</operator> <name pos:start="299:22" pos:end="299:30">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:66"><expr pos:start="301:13" pos:end="301:65"><name pos:start="301:13" pos:end="301:24"><name pos:start="301:13" pos:end="301:13">c</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:21">status</name><index pos:start="301:22" pos:end="301:24">[<expr pos:start="301:23" pos:end="301:23"><name pos:start="301:23" pos:end="301:23">i</name></expr>]</index></name><operator pos:start="301:25" pos:end="301:25">.</operator><name pos:start="301:26" pos:end="301:31">coeff1</name> <operator pos:start="301:33" pos:end="301:33">=</operator> <name pos:start="301:35" pos:end="301:65"><name pos:start="301:35" pos:end="301:54">ff_adpcm_AdaptCoeff1</name><index pos:start="301:55" pos:end="301:65">[<expr pos:start="301:56" pos:end="301:64"><name pos:start="301:56" pos:end="301:64">predictor</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:66"><expr pos:start="303:13" pos:end="303:65"><name pos:start="303:13" pos:end="303:24"><name pos:start="303:13" pos:end="303:13">c</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:21">status</name><index pos:start="303:22" pos:end="303:24">[<expr pos:start="303:23" pos:end="303:23"><name pos:start="303:23" pos:end="303:23">i</name></expr>]</index></name><operator pos:start="303:25" pos:end="303:25">.</operator><name pos:start="303:26" pos:end="303:31">coeff2</name> <operator pos:start="303:33" pos:end="303:33">=</operator> <name pos:start="303:35" pos:end="303:65"><name pos:start="303:35" pos:end="303:54">ff_adpcm_AdaptCoeff2</name><index pos:start="303:55" pos:end="303:65">[<expr pos:start="303:56" pos:end="303:64"><name pos:start="303:56" pos:end="303:64">predictor</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="307:9" pos:end="315:9">for <control pos:start="307:13" pos:end="307:45">(<init pos:start="307:14" pos:end="307:19"><expr pos:start="307:14" pos:end="307:18"><name pos:start="307:14" pos:end="307:14">i</name> <operator pos:start="307:16" pos:end="307:16">=</operator> <literal type="number" pos:start="307:18" pos:end="307:18">0</literal></expr>;</init> <condition pos:start="307:21" pos:end="307:40"><expr pos:start="307:21" pos:end="307:39"><name pos:start="307:21" pos:end="307:21">i</name> <operator pos:start="307:23" pos:end="307:23">&lt;</operator> <name pos:start="307:25" pos:end="307:39"><name pos:start="307:25" pos:end="307:29">avctx</name><operator pos:start="307:30" pos:end="307:31">-&gt;</operator><name pos:start="307:32" pos:end="307:39">channels</name></name></expr>;</condition> <incr pos:start="307:42" pos:end="307:44"><expr pos:start="307:42" pos:end="307:44"><name pos:start="307:42" pos:end="307:42">i</name><operator pos:start="307:43" pos:end="307:44">++</operator></expr></incr>)</control> <block pos:start="307:47" pos:end="315:9">{<block_content pos:start="309:13" pos:end="313:59">

            <if_stmt pos:start="309:13" pos:end="311:41"><if pos:start="309:13" pos:end="311:41">if <condition pos:start="309:16" pos:end="309:41">(<expr pos:start="309:17" pos:end="309:40"><name pos:start="309:17" pos:end="309:28"><name pos:start="309:17" pos:end="309:17">c</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:25">status</name><index pos:start="309:26" pos:end="309:28">[<expr pos:start="309:27" pos:end="309:27"><name pos:start="309:27" pos:end="309:27">i</name></expr>]</index></name><operator pos:start="309:29" pos:end="309:29">.</operator><name pos:start="309:30" pos:end="309:35">idelta</name> <operator pos:start="309:37" pos:end="309:37">&lt;</operator> <literal type="number" pos:start="309:39" pos:end="309:40">16</literal></expr>)</condition><block type="pseudo" pos:start="311:17" pos:end="311:41"><block_content pos:start="311:17" pos:end="311:41">

                <expr_stmt pos:start="311:17" pos:end="311:41"><expr pos:start="311:17" pos:end="311:40"><name pos:start="311:17" pos:end="311:28"><name pos:start="311:17" pos:end="311:17">c</name><operator pos:start="311:18" pos:end="311:19">-&gt;</operator><name pos:start="311:20" pos:end="311:25">status</name><index pos:start="311:26" pos:end="311:28">[<expr pos:start="311:27" pos:end="311:27"><name pos:start="311:27" pos:end="311:27">i</name></expr>]</index></name><operator pos:start="311:29" pos:end="311:29">.</operator><name pos:start="311:30" pos:end="311:35">idelta</name> <operator pos:start="311:37" pos:end="311:37">=</operator> <literal type="number" pos:start="311:39" pos:end="311:40">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:59"><expr pos:start="313:13" pos:end="313:58"><call pos:start="313:13" pos:end="313:58"><name pos:start="313:13" pos:end="313:31">bytestream_put_le16</name><argument_list pos:start="313:32" pos:end="313:58">(<argument pos:start="313:33" pos:end="313:36"><expr pos:start="313:33" pos:end="313:36"><operator pos:start="313:33" pos:end="313:33">&amp;</operator><name pos:start="313:34" pos:end="313:36">dst</name></expr></argument>, <argument pos:start="313:39" pos:end="313:57"><expr pos:start="313:39" pos:end="313:57"><name pos:start="313:39" pos:end="313:50"><name pos:start="313:39" pos:end="313:39">c</name><operator pos:start="313:40" pos:end="313:41">-&gt;</operator><name pos:start="313:42" pos:end="313:47">status</name><index pos:start="313:48" pos:end="313:50">[<expr pos:start="313:49" pos:end="313:49"><name pos:start="313:49" pos:end="313:49">i</name></expr>]</index></name><operator pos:start="313:51" pos:end="313:51">.</operator><name pos:start="313:52" pos:end="313:57">idelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="317:9" pos:end="319:45">for <control pos:start="317:13" pos:end="317:45">(<init pos:start="317:14" pos:end="317:19"><expr pos:start="317:14" pos:end="317:18"><name pos:start="317:14" pos:end="317:14">i</name> <operator pos:start="317:16" pos:end="317:16">=</operator> <literal type="number" pos:start="317:18" pos:end="317:18">0</literal></expr>;</init> <condition pos:start="317:21" pos:end="317:40"><expr pos:start="317:21" pos:end="317:39"><name pos:start="317:21" pos:end="317:21">i</name> <operator pos:start="317:23" pos:end="317:23">&lt;</operator> <name pos:start="317:25" pos:end="317:39"><name pos:start="317:25" pos:end="317:29">avctx</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:39">channels</name></name></expr>;</condition> <incr pos:start="317:42" pos:end="317:44"><expr pos:start="317:42" pos:end="317:44"><name pos:start="317:42" pos:end="317:42">i</name><operator pos:start="317:43" pos:end="317:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="319:13" pos:end="319:45"><block_content pos:start="319:13" pos:end="319:45">

            <expr_stmt pos:start="319:13" pos:end="319:45"><expr pos:start="319:13" pos:end="319:44"><name pos:start="319:13" pos:end="319:24"><name pos:start="319:13" pos:end="319:13">c</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:21">status</name><index pos:start="319:22" pos:end="319:24">[<expr pos:start="319:23" pos:end="319:23"><name pos:start="319:23" pos:end="319:23">i</name></expr>]</index></name><operator pos:start="319:25" pos:end="319:25">.</operator><name pos:start="319:26" pos:end="319:32">sample2</name><operator pos:start="319:33" pos:end="319:33">=</operator> <operator pos:start="319:35" pos:end="319:35">*</operator><name pos:start="319:36" pos:end="319:42">samples</name><operator pos:start="319:43" pos:end="319:44">++</operator></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="321:9" pos:end="327:9">for <control pos:start="321:13" pos:end="321:45">(<init pos:start="321:14" pos:end="321:19"><expr pos:start="321:14" pos:end="321:18"><name pos:start="321:14" pos:end="321:14">i</name> <operator pos:start="321:16" pos:end="321:16">=</operator> <literal type="number" pos:start="321:18" pos:end="321:18">0</literal></expr>;</init> <condition pos:start="321:21" pos:end="321:40"><expr pos:start="321:21" pos:end="321:39"><name pos:start="321:21" pos:end="321:21">i</name> <operator pos:start="321:23" pos:end="321:23">&lt;</operator> <name pos:start="321:25" pos:end="321:39"><name pos:start="321:25" pos:end="321:29">avctx</name><operator pos:start="321:30" pos:end="321:31">-&gt;</operator><name pos:start="321:32" pos:end="321:39">channels</name></name></expr>;</condition> <incr pos:start="321:42" pos:end="321:44"><expr pos:start="321:42" pos:end="321:44"><name pos:start="321:42" pos:end="321:42">i</name><operator pos:start="321:43" pos:end="321:44">++</operator></expr></incr>)</control> <block pos:start="321:47" pos:end="327:9">{<block_content pos:start="323:13" pos:end="325:60">

            <expr_stmt pos:start="323:13" pos:end="323:46"><expr pos:start="323:13" pos:end="323:45"><name pos:start="323:13" pos:end="323:24"><name pos:start="323:13" pos:end="323:13">c</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:21">status</name><index pos:start="323:22" pos:end="323:24">[<expr pos:start="323:23" pos:end="323:23"><name pos:start="323:23" pos:end="323:23">i</name></expr>]</index></name><operator pos:start="323:25" pos:end="323:25">.</operator><name pos:start="323:26" pos:end="323:32">sample1</name> <operator pos:start="323:34" pos:end="323:34">=</operator> <operator pos:start="323:36" pos:end="323:36">*</operator><name pos:start="323:37" pos:end="323:43">samples</name><operator pos:start="323:44" pos:end="323:45">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:60"><expr pos:start="325:13" pos:end="325:59"><call pos:start="325:13" pos:end="325:59"><name pos:start="325:13" pos:end="325:31">bytestream_put_le16</name><argument_list pos:start="325:32" pos:end="325:59">(<argument pos:start="325:33" pos:end="325:36"><expr pos:start="325:33" pos:end="325:36"><operator pos:start="325:33" pos:end="325:33">&amp;</operator><name pos:start="325:34" pos:end="325:36">dst</name></expr></argument>, <argument pos:start="325:39" pos:end="325:58"><expr pos:start="325:39" pos:end="325:58"><name pos:start="325:39" pos:end="325:50"><name pos:start="325:39" pos:end="325:39">c</name><operator pos:start="325:40" pos:end="325:41">-&gt;</operator><name pos:start="325:42" pos:end="325:47">status</name><index pos:start="325:48" pos:end="325:50">[<expr pos:start="325:49" pos:end="325:49"><name pos:start="325:49" pos:end="325:49">i</name></expr>]</index></name><operator pos:start="325:51" pos:end="325:51">.</operator><name pos:start="325:52" pos:end="325:58">sample1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="329:9" pos:end="331:60">for <control pos:start="329:13" pos:end="329:45">(<init pos:start="329:14" pos:end="329:19"><expr pos:start="329:14" pos:end="329:18"><name pos:start="329:14" pos:end="329:14">i</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <literal type="number" pos:start="329:18" pos:end="329:18">0</literal></expr>;</init> <condition pos:start="329:21" pos:end="329:40"><expr pos:start="329:21" pos:end="329:39"><name pos:start="329:21" pos:end="329:21">i</name> <operator pos:start="329:23" pos:end="329:23">&lt;</operator> <name pos:start="329:25" pos:end="329:39"><name pos:start="329:25" pos:end="329:29">avctx</name><operator pos:start="329:30" pos:end="329:31">-&gt;</operator><name pos:start="329:32" pos:end="329:39">channels</name></name></expr>;</condition> <incr pos:start="329:42" pos:end="329:44"><expr pos:start="329:42" pos:end="329:44"><name pos:start="329:42" pos:end="329:42">i</name><operator pos:start="329:43" pos:end="329:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="331:13" pos:end="331:60"><block_content pos:start="331:13" pos:end="331:60">

            <expr_stmt pos:start="331:13" pos:end="331:60"><expr pos:start="331:13" pos:end="331:59"><call pos:start="331:13" pos:end="331:59"><name pos:start="331:13" pos:end="331:31">bytestream_put_le16</name><argument_list pos:start="331:32" pos:end="331:59">(<argument pos:start="331:33" pos:end="331:36"><expr pos:start="331:33" pos:end="331:36"><operator pos:start="331:33" pos:end="331:33">&amp;</operator><name pos:start="331:34" pos:end="331:36">dst</name></expr></argument>, <argument pos:start="331:39" pos:end="331:58"><expr pos:start="331:39" pos:end="331:58"><name pos:start="331:39" pos:end="331:50"><name pos:start="331:39" pos:end="331:39">c</name><operator pos:start="331:40" pos:end="331:41">-&gt;</operator><name pos:start="331:42" pos:end="331:47">status</name><index pos:start="331:48" pos:end="331:50">[<expr pos:start="331:49" pos:end="331:49"><name pos:start="331:49" pos:end="331:49">i</name></expr>]</index></name><operator pos:start="331:51" pos:end="331:51">.</operator><name pos:start="331:52" pos:end="331:58">sample2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="335:9" pos:end="383:9"><if pos:start="335:9" pos:end="369:9">if <condition pos:start="335:12" pos:end="335:31">(<expr pos:start="335:13" pos:end="335:30"><name pos:start="335:13" pos:end="335:26"><name pos:start="335:13" pos:end="335:17">avctx</name><operator pos:start="335:18" pos:end="335:19">-&gt;</operator><name pos:start="335:20" pos:end="335:26">trellis</name></name> <operator pos:start="335:28" pos:end="335:28">&gt;</operator> <literal type="number" pos:start="335:30" pos:end="335:30">0</literal></expr>)</condition> <block pos:start="335:33" pos:end="369:9">{<block_content pos:start="337:13" pos:end="367:25">

            <expr_stmt pos:start="337:13" pos:end="337:57"><expr pos:start="337:13" pos:end="337:56"><name pos:start="337:13" pos:end="337:13">n</name> <operator pos:start="337:15" pos:end="337:15">=</operator> <name pos:start="337:17" pos:end="337:34"><name pos:start="337:17" pos:end="337:21">avctx</name><operator pos:start="337:22" pos:end="337:23">-&gt;</operator><name pos:start="337:24" pos:end="337:34">block_align</name></name> <operator pos:start="337:36" pos:end="337:36">-</operator> <literal type="number" pos:start="337:38" pos:end="337:38">7</literal> <operator pos:start="337:40" pos:end="337:40">*</operator> <name pos:start="337:42" pos:end="337:56"><name pos:start="337:42" pos:end="337:46">avctx</name><operator pos:start="337:47" pos:end="337:48">-&gt;</operator><name pos:start="337:49" pos:end="337:56">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:55"><expr pos:start="339:13" pos:end="339:54"><call pos:start="339:13" pos:end="339:54"><name pos:start="339:13" pos:end="339:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="339:29" pos:end="339:54">(<argument pos:start="339:30" pos:end="339:34"><expr pos:start="339:30" pos:end="339:34"><name pos:start="339:30" pos:end="339:34">avctx</name></expr></argument>, <argument pos:start="339:37" pos:end="339:39"><expr pos:start="339:37" pos:end="339:39"><name pos:start="339:37" pos:end="339:39">buf</name></expr></argument>, <argument pos:start="339:42" pos:end="339:46"><expr pos:start="339:42" pos:end="339:46"><literal type="number" pos:start="339:42" pos:end="339:42">2</literal> <operator pos:start="339:44" pos:end="339:44">*</operator> <name pos:start="339:46" pos:end="339:46">n</name></expr></argument>, <argument pos:start="339:49" pos:end="339:53"><expr pos:start="339:49" pos:end="339:53"><name pos:start="339:49" pos:end="339:53">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="341:13" pos:end="365:13"><if pos:start="341:13" pos:end="351:13">if <condition pos:start="341:16" pos:end="341:37">(<expr pos:start="341:17" pos:end="341:36"><name pos:start="341:17" pos:end="341:31"><name pos:start="341:17" pos:end="341:21">avctx</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:31">channels</name></name> <operator pos:start="341:33" pos:end="341:34">==</operator> <literal type="number" pos:start="341:36" pos:end="341:36">1</literal></expr>)</condition> <block pos:start="341:39" pos:end="351:13">{<block_content pos:start="343:17" pos:end="349:56">

                <expr_stmt pos:start="343:17" pos:end="345:56"><expr pos:start="343:17" pos:end="345:55"><call pos:start="343:17" pos:end="345:55"><name pos:start="343:17" pos:end="343:38">adpcm_compress_trellis</name><argument_list pos:start="343:39" pos:end="345:55">(<argument pos:start="343:40" pos:end="343:44"><expr pos:start="343:40" pos:end="343:44"><name pos:start="343:40" pos:end="343:44">avctx</name></expr></argument>, <argument pos:start="343:47" pos:end="343:53"><expr pos:start="343:47" pos:end="343:53"><name pos:start="343:47" pos:end="343:53">samples</name></expr></argument>, <argument pos:start="343:56" pos:end="343:58"><expr pos:start="343:56" pos:end="343:58"><name pos:start="343:56" pos:end="343:58">buf</name></expr></argument>, <argument pos:start="343:61" pos:end="343:73"><expr pos:start="343:61" pos:end="343:73"><operator pos:start="343:61" pos:end="343:61">&amp;</operator><name pos:start="343:62" pos:end="343:73"><name pos:start="343:62" pos:end="343:62">c</name><operator pos:start="343:63" pos:end="343:64">-&gt;</operator><name pos:start="343:65" pos:end="343:70">status</name><index pos:start="343:71" pos:end="343:73">[<expr pos:start="343:72" pos:end="343:72"><literal type="number" pos:start="343:72" pos:end="343:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="343:76" pos:end="343:76"><expr pos:start="343:76" pos:end="343:76"><name pos:start="343:76" pos:end="343:76">n</name></expr></argument>,

                                       <argument pos:start="345:40" pos:end="345:54"><expr pos:start="345:40" pos:end="345:54"><name pos:start="345:40" pos:end="345:54"><name pos:start="345:40" pos:end="345:44">avctx</name><operator pos:start="345:45" pos:end="345:46">-&gt;</operator><name pos:start="345:47" pos:end="345:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="347:17" pos:end="349:56">for <control pos:start="347:21" pos:end="347:42">(<init pos:start="347:22" pos:end="347:27"><expr pos:start="347:22" pos:end="347:26"><name pos:start="347:22" pos:end="347:22">i</name> <operator pos:start="347:24" pos:end="347:24">=</operator> <literal type="number" pos:start="347:26" pos:end="347:26">0</literal></expr>;</init> <condition pos:start="347:29" pos:end="347:34"><expr pos:start="347:29" pos:end="347:33"><name pos:start="347:29" pos:end="347:29">i</name> <operator pos:start="347:31" pos:end="347:31">&lt;</operator> <name pos:start="347:33" pos:end="347:33">n</name></expr>;</condition> <incr pos:start="347:36" pos:end="347:41"><expr pos:start="347:36" pos:end="347:41"><name pos:start="347:36" pos:end="347:36">i</name> <operator pos:start="347:38" pos:end="347:39">+=</operator> <literal type="number" pos:start="347:41" pos:end="347:41">2</literal></expr></incr>)</control><block type="pseudo" pos:start="349:21" pos:end="349:56"><block_content pos:start="349:21" pos:end="349:56">

                    <expr_stmt pos:start="349:21" pos:end="349:56"><expr pos:start="349:21" pos:end="349:55"><operator pos:start="349:21" pos:end="349:21">*</operator><name pos:start="349:22" pos:end="349:24">dst</name><operator pos:start="349:25" pos:end="349:26">++</operator> <operator pos:start="349:28" pos:end="349:28">=</operator> <operator pos:start="349:30" pos:end="349:30">(</operator><name pos:start="349:31" pos:end="349:36"><name pos:start="349:31" pos:end="349:33">buf</name><index pos:start="349:34" pos:end="349:36">[<expr pos:start="349:35" pos:end="349:35"><name pos:start="349:35" pos:end="349:35">i</name></expr>]</index></name> <operator pos:start="349:38" pos:end="349:39">&lt;&lt;</operator> <literal type="number" pos:start="349:41" pos:end="349:41">4</literal><operator pos:start="349:42" pos:end="349:42">)</operator> <operator pos:start="349:44" pos:end="349:44">|</operator> <name pos:start="349:46" pos:end="349:55"><name pos:start="349:46" pos:end="349:48">buf</name><index pos:start="349:49" pos:end="349:55">[<expr pos:start="349:50" pos:end="349:54"><name pos:start="349:50" pos:end="349:50">i</name> <operator pos:start="349:52" pos:end="349:52">+</operator> <literal type="number" pos:start="349:54" pos:end="349:54">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="351:15" pos:end="365:13">else <block pos:start="351:20" pos:end="365:13">{<block_content pos:start="353:17" pos:end="363:56">

                <expr_stmt pos:start="353:17" pos:end="355:74"><expr pos:start="353:17" pos:end="355:73"><call pos:start="353:17" pos:end="355:73"><name pos:start="353:17" pos:end="353:38">adpcm_compress_trellis</name><argument_list pos:start="353:39" pos:end="355:73">(<argument pos:start="353:40" pos:end="353:44"><expr pos:start="353:40" pos:end="353:44"><name pos:start="353:40" pos:end="353:44">avctx</name></expr></argument>, <argument pos:start="353:47" pos:end="353:53"><expr pos:start="353:47" pos:end="353:53"><name pos:start="353:47" pos:end="353:53">samples</name></expr></argument>,     <argument pos:start="353:60" pos:end="353:62"><expr pos:start="353:60" pos:end="353:62"><name pos:start="353:60" pos:end="353:62">buf</name></expr></argument>,

                                       <argument pos:start="355:40" pos:end="355:52"><expr pos:start="355:40" pos:end="355:52"><operator pos:start="355:40" pos:end="355:40">&amp;</operator><name pos:start="355:41" pos:end="355:52"><name pos:start="355:41" pos:end="355:41">c</name><operator pos:start="355:42" pos:end="355:43">-&gt;</operator><name pos:start="355:44" pos:end="355:49">status</name><index pos:start="355:50" pos:end="355:52">[<expr pos:start="355:51" pos:end="355:51"><literal type="number" pos:start="355:51" pos:end="355:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="355:55" pos:end="355:55"><expr pos:start="355:55" pos:end="355:55"><name pos:start="355:55" pos:end="355:55">n</name></expr></argument>, <argument pos:start="355:58" pos:end="355:72"><expr pos:start="355:58" pos:end="355:72"><name pos:start="355:58" pos:end="355:72"><name pos:start="355:58" pos:end="355:62">avctx</name><operator pos:start="355:63" pos:end="355:64">-&gt;</operator><name pos:start="355:65" pos:end="355:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="359:74"><expr pos:start="357:17" pos:end="359:73"><call pos:start="357:17" pos:end="359:73"><name pos:start="357:17" pos:end="357:38">adpcm_compress_trellis</name><argument_list pos:start="357:39" pos:end="359:73">(<argument pos:start="357:40" pos:end="357:44"><expr pos:start="357:40" pos:end="357:44"><name pos:start="357:40" pos:end="357:44">avctx</name></expr></argument>, <argument pos:start="357:47" pos:end="357:57"><expr pos:start="357:47" pos:end="357:57"><name pos:start="357:47" pos:end="357:53">samples</name> <operator pos:start="357:55" pos:end="357:55">+</operator> <literal type="number" pos:start="357:57" pos:end="357:57">1</literal></expr></argument>, <argument pos:start="357:60" pos:end="357:66"><expr pos:start="357:60" pos:end="357:66"><name pos:start="357:60" pos:end="357:62">buf</name> <operator pos:start="357:64" pos:end="357:64">+</operator> <name pos:start="357:66" pos:end="357:66">n</name></expr></argument>,

                                       <argument pos:start="359:40" pos:end="359:52"><expr pos:start="359:40" pos:end="359:52"><operator pos:start="359:40" pos:end="359:40">&amp;</operator><name pos:start="359:41" pos:end="359:52"><name pos:start="359:41" pos:end="359:41">c</name><operator pos:start="359:42" pos:end="359:43">-&gt;</operator><name pos:start="359:44" pos:end="359:49">status</name><index pos:start="359:50" pos:end="359:52">[<expr pos:start="359:51" pos:end="359:51"><literal type="number" pos:start="359:51" pos:end="359:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="359:55" pos:end="359:55"><expr pos:start="359:55" pos:end="359:55"><name pos:start="359:55" pos:end="359:55">n</name></expr></argument>, <argument pos:start="359:58" pos:end="359:72"><expr pos:start="359:58" pos:end="359:72"><name pos:start="359:58" pos:end="359:72"><name pos:start="359:58" pos:end="359:62">avctx</name><operator pos:start="359:63" pos:end="359:64">-&gt;</operator><name pos:start="359:65" pos:end="359:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="361:17" pos:end="363:56">for <control pos:start="361:21" pos:end="361:39">(<init pos:start="361:22" pos:end="361:27"><expr pos:start="361:22" pos:end="361:26"><name pos:start="361:22" pos:end="361:22">i</name> <operator pos:start="361:24" pos:end="361:24">=</operator> <literal type="number" pos:start="361:26" pos:end="361:26">0</literal></expr>;</init> <condition pos:start="361:29" pos:end="361:34"><expr pos:start="361:29" pos:end="361:33"><name pos:start="361:29" pos:end="361:29">i</name> <operator pos:start="361:31" pos:end="361:31">&lt;</operator> <name pos:start="361:33" pos:end="361:33">n</name></expr>;</condition> <incr pos:start="361:36" pos:end="361:38"><expr pos:start="361:36" pos:end="361:38"><name pos:start="361:36" pos:end="361:36">i</name><operator pos:start="361:37" pos:end="361:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="363:21" pos:end="363:56"><block_content pos:start="363:21" pos:end="363:56">

                    <expr_stmt pos:start="363:21" pos:end="363:56"><expr pos:start="363:21" pos:end="363:55"><operator pos:start="363:21" pos:end="363:21">*</operator><name pos:start="363:22" pos:end="363:24">dst</name><operator pos:start="363:25" pos:end="363:26">++</operator> <operator pos:start="363:28" pos:end="363:28">=</operator> <operator pos:start="363:30" pos:end="363:30">(</operator><name pos:start="363:31" pos:end="363:36"><name pos:start="363:31" pos:end="363:33">buf</name><index pos:start="363:34" pos:end="363:36">[<expr pos:start="363:35" pos:end="363:35"><name pos:start="363:35" pos:end="363:35">i</name></expr>]</index></name> <operator pos:start="363:38" pos:end="363:39">&lt;&lt;</operator> <literal type="number" pos:start="363:41" pos:end="363:41">4</literal><operator pos:start="363:42" pos:end="363:42">)</operator> <operator pos:start="363:44" pos:end="363:44">|</operator> <name pos:start="363:46" pos:end="363:55"><name pos:start="363:46" pos:end="363:48">buf</name><index pos:start="363:49" pos:end="363:55">[<expr pos:start="363:50" pos:end="363:54"><name pos:start="363:50" pos:end="363:50">n</name> <operator pos:start="363:52" pos:end="363:52">+</operator> <name pos:start="363:54" pos:end="363:54">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:25"><expr pos:start="367:13" pos:end="367:24"><call pos:start="367:13" pos:end="367:24"><name pos:start="367:13" pos:end="367:19">av_free</name><argument_list pos:start="367:20" pos:end="367:24">(<argument pos:start="367:21" pos:end="367:23"><expr pos:start="367:21" pos:end="367:23"><name pos:start="367:21" pos:end="367:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="369:11" pos:end="383:9">else <block pos:start="369:16" pos:end="383:9">{<block_content pos:start="371:13" pos:end="381:13">

            <for pos:start="371:13" pos:end="381:13">for <control pos:start="371:17" pos:end="371:70">(<init pos:start="371:18" pos:end="371:41"><expr pos:start="371:18" pos:end="371:40"><name pos:start="371:18" pos:end="371:18">i</name> <operator pos:start="371:20" pos:end="371:20">=</operator> <literal type="number" pos:start="371:22" pos:end="371:22">7</literal> <operator pos:start="371:24" pos:end="371:24">*</operator> <name pos:start="371:26" pos:end="371:40"><name pos:start="371:26" pos:end="371:30">avctx</name><operator pos:start="371:31" pos:end="371:32">-&gt;</operator><name pos:start="371:33" pos:end="371:40">channels</name></name></expr>;</init> <condition pos:start="371:43" pos:end="371:65"><expr pos:start="371:43" pos:end="371:64"><name pos:start="371:43" pos:end="371:43">i</name> <operator pos:start="371:45" pos:end="371:45">&lt;</operator> <name pos:start="371:47" pos:end="371:64"><name pos:start="371:47" pos:end="371:51">avctx</name><operator pos:start="371:52" pos:end="371:53">-&gt;</operator><name pos:start="371:54" pos:end="371:64">block_align</name></name></expr>;</condition> <incr pos:start="371:67" pos:end="371:69"><expr pos:start="371:67" pos:end="371:69"><name pos:start="371:67" pos:end="371:67">i</name><operator pos:start="371:68" pos:end="371:69">++</operator></expr></incr>)</control> <block pos:start="371:72" pos:end="381:13">{<block_content pos:start="373:17" pos:end="379:33">

                <decl_stmt pos:start="373:17" pos:end="373:27"><decl pos:start="373:17" pos:end="373:26"><type pos:start="373:17" pos:end="373:19"><name pos:start="373:17" pos:end="373:19">int</name></type> <name pos:start="373:21" pos:end="373:26">nibble</name></decl>;</decl_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:84"><expr pos:start="375:17" pos:end="375:83"><name pos:start="375:17" pos:end="375:22">nibble</name>  <operator pos:start="375:25" pos:end="375:25">=</operator> <call pos:start="375:27" pos:end="375:78"><name pos:start="375:27" pos:end="375:50">adpcm_ms_compress_sample</name><argument_list pos:start="375:51" pos:end="375:78">(<argument pos:start="375:52" pos:end="375:65"><expr pos:start="375:52" pos:end="375:65"><operator pos:start="375:52" pos:end="375:52">&amp;</operator><name pos:start="375:53" pos:end="375:65"><name pos:start="375:53" pos:end="375:53">c</name><operator pos:start="375:54" pos:end="375:55">-&gt;</operator><name pos:start="375:56" pos:end="375:61">status</name><index pos:start="375:62" pos:end="375:65">[ <expr pos:start="375:64" pos:end="375:64"><literal type="number" pos:start="375:64" pos:end="375:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:68" pos:end="375:77"><expr pos:start="375:68" pos:end="375:77"><operator pos:start="375:68" pos:end="375:68">*</operator><name pos:start="375:69" pos:end="375:75">samples</name><operator pos:start="375:76" pos:end="375:77">++</operator></expr></argument>)</argument_list></call> <operator pos:start="375:80" pos:end="375:81">&lt;&lt;</operator> <literal type="number" pos:start="375:83" pos:end="375:83">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:79"><expr pos:start="377:17" pos:end="377:78"><name pos:start="377:17" pos:end="377:22">nibble</name> <operator pos:start="377:24" pos:end="377:25">|=</operator> <call pos:start="377:27" pos:end="377:78"><name pos:start="377:27" pos:end="377:50">adpcm_ms_compress_sample</name><argument_list pos:start="377:51" pos:end="377:78">(<argument pos:start="377:52" pos:end="377:65"><expr pos:start="377:52" pos:end="377:65"><operator pos:start="377:52" pos:end="377:52">&amp;</operator><name pos:start="377:53" pos:end="377:65"><name pos:start="377:53" pos:end="377:53">c</name><operator pos:start="377:54" pos:end="377:55">-&gt;</operator><name pos:start="377:56" pos:end="377:61">status</name><index pos:start="377:62" pos:end="377:65">[<expr pos:start="377:63" pos:end="377:64"><name pos:start="377:63" pos:end="377:64">st</name></expr>]</index></name></expr></argument>, <argument pos:start="377:68" pos:end="377:77"><expr pos:start="377:68" pos:end="377:77"><operator pos:start="377:68" pos:end="377:68">*</operator><name pos:start="377:69" pos:end="377:75">samples</name><operator pos:start="377:76" pos:end="377:77">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:33"><expr pos:start="379:17" pos:end="379:32"><operator pos:start="379:17" pos:end="379:17">*</operator><name pos:start="379:18" pos:end="379:20">dst</name><operator pos:start="379:21" pos:end="379:22">++</operator>  <operator pos:start="379:25" pos:end="379:25">=</operator> <name pos:start="379:27" pos:end="379:32">nibble</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="385:9" pos:end="385:14">break;</break>

    <case pos:start="387:5" pos:end="387:34">case <expr pos:start="387:10" pos:end="387:33"><name pos:start="387:10" pos:end="387:33">AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <expr_stmt pos:start="389:9" pos:end="389:34"><expr pos:start="389:9" pos:end="389:33"><name pos:start="389:9" pos:end="389:9">n</name> <operator pos:start="389:11" pos:end="389:11">=</operator> <name pos:start="389:13" pos:end="389:29"><name pos:start="389:13" pos:end="389:17">frame</name><operator pos:start="389:18" pos:end="389:19">-&gt;</operator><name pos:start="389:20" pos:end="389:29">nb_samples</name></name> <operator pos:start="389:31" pos:end="389:31">/</operator> <literal type="number" pos:start="389:33" pos:end="389:33">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="391:9" pos:end="437:13"><if pos:start="391:9" pos:end="425:9">if <condition pos:start="391:12" pos:end="391:31">(<expr pos:start="391:13" pos:end="391:30"><name pos:start="391:13" pos:end="391:26"><name pos:start="391:13" pos:end="391:17">avctx</name><operator pos:start="391:18" pos:end="391:19">-&gt;</operator><name pos:start="391:20" pos:end="391:26">trellis</name></name> <operator pos:start="391:28" pos:end="391:28">&gt;</operator> <literal type="number" pos:start="391:30" pos:end="391:30">0</literal></expr>)</condition> <block pos:start="391:33" pos:end="425:9">{<block_content pos:start="393:13" pos:end="423:25">

            <expr_stmt pos:start="393:13" pos:end="393:59"><expr pos:start="393:13" pos:end="393:58"><call pos:start="393:13" pos:end="393:58"><name pos:start="393:13" pos:end="393:28">FF_ALLOC_OR_GOTO</name><argument_list pos:start="393:29" pos:end="393:58">(<argument pos:start="393:30" pos:end="393:34"><expr pos:start="393:30" pos:end="393:34"><name pos:start="393:30" pos:end="393:34">avctx</name></expr></argument>, <argument pos:start="393:37" pos:end="393:39"><expr pos:start="393:37" pos:end="393:39"><name pos:start="393:37" pos:end="393:39">buf</name></expr></argument>, <argument pos:start="393:42" pos:end="393:50"><expr pos:start="393:42" pos:end="393:50"><literal type="number" pos:start="393:42" pos:end="393:42">2</literal> <operator pos:start="393:44" pos:end="393:44">*</operator> <name pos:start="393:46" pos:end="393:46">n</name> <operator pos:start="393:48" pos:end="393:48">*</operator> <literal type="number" pos:start="393:50" pos:end="393:50">2</literal></expr></argument>, <argument pos:start="393:53" pos:end="393:57"><expr pos:start="393:53" pos:end="393:57"><name pos:start="393:53" pos:end="393:57">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:19"><expr pos:start="395:13" pos:end="395:18"><name pos:start="395:13" pos:end="395:13">n</name> <operator pos:start="395:15" pos:end="395:16">*=</operator> <literal type="number" pos:start="395:18" pos:end="395:18">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="397:13" pos:end="421:13"><if pos:start="397:13" pos:end="407:13">if <condition pos:start="397:16" pos:end="397:37">(<expr pos:start="397:17" pos:end="397:36"><name pos:start="397:17" pos:end="397:31"><name pos:start="397:17" pos:end="397:21">avctx</name><operator pos:start="397:22" pos:end="397:23">-&gt;</operator><name pos:start="397:24" pos:end="397:31">channels</name></name> <operator pos:start="397:33" pos:end="397:34">==</operator> <literal type="number" pos:start="397:36" pos:end="397:36">1</literal></expr>)</condition> <block pos:start="397:39" pos:end="407:13">{<block_content pos:start="399:17" pos:end="405:56">

                <expr_stmt pos:start="399:17" pos:end="401:56"><expr pos:start="399:17" pos:end="401:55"><call pos:start="399:17" pos:end="401:55"><name pos:start="399:17" pos:end="399:38">adpcm_compress_trellis</name><argument_list pos:start="399:39" pos:end="401:55">(<argument pos:start="399:40" pos:end="399:44"><expr pos:start="399:40" pos:end="399:44"><name pos:start="399:40" pos:end="399:44">avctx</name></expr></argument>, <argument pos:start="399:47" pos:end="399:53"><expr pos:start="399:47" pos:end="399:53"><name pos:start="399:47" pos:end="399:53">samples</name></expr></argument>, <argument pos:start="399:56" pos:end="399:58"><expr pos:start="399:56" pos:end="399:58"><name pos:start="399:56" pos:end="399:58">buf</name></expr></argument>, <argument pos:start="399:61" pos:end="399:73"><expr pos:start="399:61" pos:end="399:73"><operator pos:start="399:61" pos:end="399:61">&amp;</operator><name pos:start="399:62" pos:end="399:73"><name pos:start="399:62" pos:end="399:62">c</name><operator pos:start="399:63" pos:end="399:64">-&gt;</operator><name pos:start="399:65" pos:end="399:70">status</name><index pos:start="399:71" pos:end="399:73">[<expr pos:start="399:72" pos:end="399:72"><literal type="number" pos:start="399:72" pos:end="399:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:76" pos:end="399:76"><expr pos:start="399:76" pos:end="399:76"><name pos:start="399:76" pos:end="399:76">n</name></expr></argument>,

                                       <argument pos:start="401:40" pos:end="401:54"><expr pos:start="401:40" pos:end="401:54"><name pos:start="401:40" pos:end="401:54"><name pos:start="401:40" pos:end="401:44">avctx</name><operator pos:start="401:45" pos:end="401:46">-&gt;</operator><name pos:start="401:47" pos:end="401:54">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="403:17" pos:end="405:56">for <control pos:start="403:21" pos:end="403:42">(<init pos:start="403:22" pos:end="403:27"><expr pos:start="403:22" pos:end="403:26"><name pos:start="403:22" pos:end="403:22">i</name> <operator pos:start="403:24" pos:end="403:24">=</operator> <literal type="number" pos:start="403:26" pos:end="403:26">0</literal></expr>;</init> <condition pos:start="403:29" pos:end="403:34"><expr pos:start="403:29" pos:end="403:33"><name pos:start="403:29" pos:end="403:29">i</name> <operator pos:start="403:31" pos:end="403:31">&lt;</operator> <name pos:start="403:33" pos:end="403:33">n</name></expr>;</condition> <incr pos:start="403:36" pos:end="403:41"><expr pos:start="403:36" pos:end="403:41"><name pos:start="403:36" pos:end="403:36">i</name> <operator pos:start="403:38" pos:end="403:39">+=</operator> <literal type="number" pos:start="403:41" pos:end="403:41">2</literal></expr></incr>)</control><block type="pseudo" pos:start="405:21" pos:end="405:56"><block_content pos:start="405:21" pos:end="405:56">

                    <expr_stmt pos:start="405:21" pos:end="405:56"><expr pos:start="405:21" pos:end="405:55"><operator pos:start="405:21" pos:end="405:21">*</operator><name pos:start="405:22" pos:end="405:24">dst</name><operator pos:start="405:25" pos:end="405:26">++</operator> <operator pos:start="405:28" pos:end="405:28">=</operator> <name pos:start="405:30" pos:end="405:35"><name pos:start="405:30" pos:end="405:32">buf</name><index pos:start="405:33" pos:end="405:35">[<expr pos:start="405:34" pos:end="405:34"><name pos:start="405:34" pos:end="405:34">i</name></expr>]</index></name> <operator pos:start="405:37" pos:end="405:37">|</operator> <operator pos:start="405:39" pos:end="405:39">(</operator><name pos:start="405:40" pos:end="405:49"><name pos:start="405:40" pos:end="405:42">buf</name><index pos:start="405:43" pos:end="405:49">[<expr pos:start="405:44" pos:end="405:48"><name pos:start="405:44" pos:end="405:44">i</name> <operator pos:start="405:46" pos:end="405:46">+</operator> <literal type="number" pos:start="405:48" pos:end="405:48">1</literal></expr>]</index></name> <operator pos:start="405:51" pos:end="405:52">&lt;&lt;</operator> <literal type="number" pos:start="405:54" pos:end="405:54">4</literal><operator pos:start="405:55" pos:end="405:55">)</operator></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="407:15" pos:end="421:13">else <block pos:start="407:20" pos:end="421:13">{<block_content pos:start="409:17" pos:end="419:56">

                <expr_stmt pos:start="409:17" pos:end="411:74"><expr pos:start="409:17" pos:end="411:73"><call pos:start="409:17" pos:end="411:73"><name pos:start="409:17" pos:end="409:38">adpcm_compress_trellis</name><argument_list pos:start="409:39" pos:end="411:73">(<argument pos:start="409:40" pos:end="409:44"><expr pos:start="409:40" pos:end="409:44"><name pos:start="409:40" pos:end="409:44">avctx</name></expr></argument>, <argument pos:start="409:47" pos:end="409:53"><expr pos:start="409:47" pos:end="409:53"><name pos:start="409:47" pos:end="409:53">samples</name></expr></argument>,     <argument pos:start="409:60" pos:end="409:62"><expr pos:start="409:60" pos:end="409:62"><name pos:start="409:60" pos:end="409:62">buf</name></expr></argument>,

                                       <argument pos:start="411:40" pos:end="411:52"><expr pos:start="411:40" pos:end="411:52"><operator pos:start="411:40" pos:end="411:40">&amp;</operator><name pos:start="411:41" pos:end="411:52"><name pos:start="411:41" pos:end="411:41">c</name><operator pos:start="411:42" pos:end="411:43">-&gt;</operator><name pos:start="411:44" pos:end="411:49">status</name><index pos:start="411:50" pos:end="411:52">[<expr pos:start="411:51" pos:end="411:51"><literal type="number" pos:start="411:51" pos:end="411:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="411:55" pos:end="411:55"><expr pos:start="411:55" pos:end="411:55"><name pos:start="411:55" pos:end="411:55">n</name></expr></argument>, <argument pos:start="411:58" pos:end="411:72"><expr pos:start="411:58" pos:end="411:72"><name pos:start="411:58" pos:end="411:72"><name pos:start="411:58" pos:end="411:62">avctx</name><operator pos:start="411:63" pos:end="411:64">-&gt;</operator><name pos:start="411:65" pos:end="411:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="413:17" pos:end="415:74"><expr pos:start="413:17" pos:end="415:73"><call pos:start="413:17" pos:end="415:73"><name pos:start="413:17" pos:end="413:38">adpcm_compress_trellis</name><argument_list pos:start="413:39" pos:end="415:73">(<argument pos:start="413:40" pos:end="413:44"><expr pos:start="413:40" pos:end="413:44"><name pos:start="413:40" pos:end="413:44">avctx</name></expr></argument>, <argument pos:start="413:47" pos:end="413:57"><expr pos:start="413:47" pos:end="413:57"><name pos:start="413:47" pos:end="413:53">samples</name> <operator pos:start="413:55" pos:end="413:55">+</operator> <literal type="number" pos:start="413:57" pos:end="413:57">1</literal></expr></argument>, <argument pos:start="413:60" pos:end="413:66"><expr pos:start="413:60" pos:end="413:66"><name pos:start="413:60" pos:end="413:62">buf</name> <operator pos:start="413:64" pos:end="413:64">+</operator> <name pos:start="413:66" pos:end="413:66">n</name></expr></argument>,

                                       <argument pos:start="415:40" pos:end="415:52"><expr pos:start="415:40" pos:end="415:52"><operator pos:start="415:40" pos:end="415:40">&amp;</operator><name pos:start="415:41" pos:end="415:52"><name pos:start="415:41" pos:end="415:41">c</name><operator pos:start="415:42" pos:end="415:43">-&gt;</operator><name pos:start="415:44" pos:end="415:49">status</name><index pos:start="415:50" pos:end="415:52">[<expr pos:start="415:51" pos:end="415:51"><literal type="number" pos:start="415:51" pos:end="415:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="415:55" pos:end="415:55"><expr pos:start="415:55" pos:end="415:55"><name pos:start="415:55" pos:end="415:55">n</name></expr></argument>, <argument pos:start="415:58" pos:end="415:72"><expr pos:start="415:58" pos:end="415:72"><name pos:start="415:58" pos:end="415:72"><name pos:start="415:58" pos:end="415:62">avctx</name><operator pos:start="415:63" pos:end="415:64">-&gt;</operator><name pos:start="415:65" pos:end="415:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="417:17" pos:end="419:56">for <control pos:start="417:21" pos:end="417:39">(<init pos:start="417:22" pos:end="417:27"><expr pos:start="417:22" pos:end="417:26"><name pos:start="417:22" pos:end="417:22">i</name> <operator pos:start="417:24" pos:end="417:24">=</operator> <literal type="number" pos:start="417:26" pos:end="417:26">0</literal></expr>;</init> <condition pos:start="417:29" pos:end="417:34"><expr pos:start="417:29" pos:end="417:33"><name pos:start="417:29" pos:end="417:29">i</name> <operator pos:start="417:31" pos:end="417:31">&lt;</operator> <name pos:start="417:33" pos:end="417:33">n</name></expr>;</condition> <incr pos:start="417:36" pos:end="417:38"><expr pos:start="417:36" pos:end="417:38"><name pos:start="417:36" pos:end="417:36">i</name><operator pos:start="417:37" pos:end="417:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="419:21" pos:end="419:56"><block_content pos:start="419:21" pos:end="419:56">

                    <expr_stmt pos:start="419:21" pos:end="419:56"><expr pos:start="419:21" pos:end="419:55"><operator pos:start="419:21" pos:end="419:21">*</operator><name pos:start="419:22" pos:end="419:24">dst</name><operator pos:start="419:25" pos:end="419:26">++</operator> <operator pos:start="419:28" pos:end="419:28">=</operator> <name pos:start="419:30" pos:end="419:35"><name pos:start="419:30" pos:end="419:32">buf</name><index pos:start="419:33" pos:end="419:35">[<expr pos:start="419:34" pos:end="419:34"><name pos:start="419:34" pos:end="419:34">i</name></expr>]</index></name> <operator pos:start="419:37" pos:end="419:37">|</operator> <operator pos:start="419:39" pos:end="419:39">(</operator><name pos:start="419:40" pos:end="419:49"><name pos:start="419:40" pos:end="419:42">buf</name><index pos:start="419:43" pos:end="419:49">[<expr pos:start="419:44" pos:end="419:48"><name pos:start="419:44" pos:end="419:44">n</name> <operator pos:start="419:46" pos:end="419:46">+</operator> <name pos:start="419:48" pos:end="419:48">i</name></expr>]</index></name> <operator pos:start="419:51" pos:end="419:52">&lt;&lt;</operator> <literal type="number" pos:start="419:54" pos:end="419:54">4</literal><operator pos:start="419:55" pos:end="419:55">)</operator></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:25"><expr pos:start="423:13" pos:end="423:24"><call pos:start="423:13" pos:end="423:24"><name pos:start="423:13" pos:end="423:19">av_free</name><argument_list pos:start="423:20" pos:end="423:24">(<argument pos:start="423:21" pos:end="423:23"><expr pos:start="423:21" pos:end="423:23"><name pos:start="423:21" pos:end="423:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="425:11" pos:end="437:13">else<block type="pseudo" pos:start="427:13" pos:end="437:13"><block_content pos:start="427:13" pos:end="437:13">

            <for pos:start="427:13" pos:end="437:13">for <control pos:start="427:17" pos:end="427:50">(<init pos:start="427:18" pos:end="427:38"><expr pos:start="427:18" pos:end="427:37"><name pos:start="427:18" pos:end="427:18">n</name> <operator pos:start="427:20" pos:end="427:21">*=</operator> <name pos:start="427:23" pos:end="427:37"><name pos:start="427:23" pos:end="427:27">avctx</name><operator pos:start="427:28" pos:end="427:29">-&gt;</operator><name pos:start="427:30" pos:end="427:37">channels</name></name></expr>;</init> <condition pos:start="427:40" pos:end="427:45"><expr pos:start="427:40" pos:end="427:44"><name pos:start="427:40" pos:end="427:40">n</name> <operator pos:start="427:42" pos:end="427:42">&gt;</operator> <literal type="number" pos:start="427:44" pos:end="427:44">0</literal></expr>;</condition> <incr pos:start="427:47" pos:end="427:49"><expr pos:start="427:47" pos:end="427:49"><name pos:start="427:47" pos:end="427:47">n</name><operator pos:start="427:48" pos:end="427:49">--</operator></expr></incr>)</control> <block pos:start="427:52" pos:end="437:13">{<block_content pos:start="429:17" pos:end="435:33">

                <decl_stmt pos:start="429:17" pos:end="429:27"><decl pos:start="429:17" pos:end="429:26"><type pos:start="429:17" pos:end="429:19"><name pos:start="429:17" pos:end="429:19">int</name></type> <name pos:start="429:21" pos:end="429:26">nibble</name></decl>;</decl_stmt>

                <expr_stmt pos:start="431:17" pos:end="431:83"><expr pos:start="431:17" pos:end="431:82"><name pos:start="431:17" pos:end="431:22">nibble</name>  <operator pos:start="431:25" pos:end="431:25">=</operator> <call pos:start="431:27" pos:end="431:82"><name pos:start="431:27" pos:end="431:54">adpcm_yamaha_compress_sample</name><argument_list pos:start="431:55" pos:end="431:82">(<argument pos:start="431:56" pos:end="431:69"><expr pos:start="431:56" pos:end="431:69"><operator pos:start="431:56" pos:end="431:56">&amp;</operator><name pos:start="431:57" pos:end="431:69"><name pos:start="431:57" pos:end="431:57">c</name><operator pos:start="431:58" pos:end="431:59">-&gt;</operator><name pos:start="431:60" pos:end="431:65">status</name><index pos:start="431:66" pos:end="431:69">[ <expr pos:start="431:68" pos:end="431:68"><literal type="number" pos:start="431:68" pos:end="431:68">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="431:72" pos:end="431:81"><expr pos:start="431:72" pos:end="431:81"><operator pos:start="431:72" pos:end="431:72">*</operator><name pos:start="431:73" pos:end="431:79">samples</name><operator pos:start="431:80" pos:end="431:81">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:88"><expr pos:start="433:17" pos:end="433:87"><name pos:start="433:17" pos:end="433:22">nibble</name> <operator pos:start="433:24" pos:end="433:25">|=</operator> <call pos:start="433:27" pos:end="433:82"><name pos:start="433:27" pos:end="433:54">adpcm_yamaha_compress_sample</name><argument_list pos:start="433:55" pos:end="433:82">(<argument pos:start="433:56" pos:end="433:69"><expr pos:start="433:56" pos:end="433:69"><operator pos:start="433:56" pos:end="433:56">&amp;</operator><name pos:start="433:57" pos:end="433:69"><name pos:start="433:57" pos:end="433:57">c</name><operator pos:start="433:58" pos:end="433:59">-&gt;</operator><name pos:start="433:60" pos:end="433:65">status</name><index pos:start="433:66" pos:end="433:69">[<expr pos:start="433:67" pos:end="433:68"><name pos:start="433:67" pos:end="433:68">st</name></expr>]</index></name></expr></argument>, <argument pos:start="433:72" pos:end="433:81"><expr pos:start="433:72" pos:end="433:81"><operator pos:start="433:72" pos:end="433:72">*</operator><name pos:start="433:73" pos:end="433:79">samples</name><operator pos:start="433:80" pos:end="433:81">++</operator></expr></argument>)</argument_list></call> <operator pos:start="433:84" pos:end="433:85">&lt;&lt;</operator> <literal type="number" pos:start="433:87" pos:end="433:87">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="435:17" pos:end="435:33"><expr pos:start="435:17" pos:end="435:32"><operator pos:start="435:17" pos:end="435:17">*</operator><name pos:start="435:18" pos:end="435:20">dst</name><operator pos:start="435:21" pos:end="435:22">++</operator>  <operator pos:start="435:25" pos:end="435:25">=</operator> <name pos:start="435:27" pos:end="435:32">nibble</name></expr>;</expr_stmt>

            </block_content>}</block></for></block_content></block></else></if_stmt>

        <break pos:start="439:9" pos:end="439:14">break;</break>

    <default pos:start="441:5" pos:end="441:12">default:</default>

        <return pos:start="443:9" pos:end="443:31">return <expr pos:start="443:16" pos:end="443:30"><call pos:start="443:16" pos:end="443:30"><name pos:start="443:16" pos:end="443:22">AVERROR</name><argument_list pos:start="443:23" pos:end="443:30">(<argument pos:start="443:24" pos:end="443:29"><expr pos:start="443:24" pos:end="443:29"><name pos:start="443:24" pos:end="443:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="449:5" pos:end="449:27"><expr pos:start="449:5" pos:end="449:26"><name pos:start="449:5" pos:end="449:15"><name pos:start="449:5" pos:end="449:9">avpkt</name><operator pos:start="449:10" pos:end="449:11">-&gt;</operator><name pos:start="449:12" pos:end="449:15">size</name></name> <operator pos:start="449:17" pos:end="449:17">=</operator> <name pos:start="449:19" pos:end="449:26">pkt_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="451:5" pos:end="451:24"><expr pos:start="451:5" pos:end="451:23"><operator pos:start="451:5" pos:end="451:5">*</operator><name pos:start="451:6" pos:end="451:19">got_packet_ptr</name> <operator pos:start="451:21" pos:end="451:21">=</operator> <literal type="number" pos:start="451:23" pos:end="451:23">1</literal></expr>;</expr_stmt>

    <return pos:start="453:5" pos:end="453:13">return <expr pos:start="453:12" pos:end="453:12"><literal type="number" pos:start="453:12" pos:end="453:12">0</literal></expr>;</return>

<label pos:start="455:1" pos:end="455:6"><name pos:start="455:1" pos:end="455:5">error</name>:</label>

    <return pos:start="457:5" pos:end="457:27">return <expr pos:start="457:12" pos:end="457:26"><call pos:start="457:12" pos:end="457:26"><name pos:start="457:12" pos:end="457:18">AVERROR</name><argument_list pos:start="457:19" pos:end="457:26">(<argument pos:start="457:20" pos:end="457:25"><expr pos:start="457:20" pos:end="457:25"><name pos:start="457:20" pos:end="457:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
