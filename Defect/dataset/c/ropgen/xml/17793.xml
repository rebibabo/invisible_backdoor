<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17793.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_get_cpu_flags_ppc</name><parameter_list pos:start="1:25" pos:end="1:30">(<parameter pos:start="1:26" pos:end="1:29"><decl pos:start="1:26" pos:end="1:29"><type pos:start="1:26" pos:end="1:29"><name pos:start="1:26" pos:end="1:29">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="9:5" pos:end="141:13">

<cpp:if pos:start="5:1" pos:end="5:16">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">HAVE_ALTIVEC</name></expr></cpp:if>

<cpp:ifdef pos:start="7:1" pos:end="7:19">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:19">__AMIGAOS4__</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">ULONG</name></type> <name pos:start="9:11" pos:end="9:16">result</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:29"><specifier pos:start="11:5" pos:end="11:10">extern</specifier> <name pos:start="11:12" pos:end="11:27"><name pos:start="11:12" pos:end="11:17">struct</name> <name pos:start="11:19" pos:end="11:27">ExecIFace</name></name> <modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:34">IExec</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:62"><expr pos:start="15:5" pos:end="15:61"><call pos:start="15:5" pos:end="15:61"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:9">IExec</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:25">GetCPUInfoTags</name></name><argument_list pos:start="15:26" pos:end="15:61">(<argument pos:start="15:27" pos:end="15:41"><expr pos:start="15:27" pos:end="15:41"><name pos:start="15:27" pos:end="15:41">GCIT_VectorUnit</name></expr></argument>, <argument pos:start="15:44" pos:end="15:50"><expr pos:start="15:44" pos:end="15:50"><operator pos:start="15:44" pos:end="15:44">&amp;</operator><name pos:start="15:45" pos:end="15:50">result</name></expr></argument>, <argument pos:start="15:53" pos:end="15:60"><expr pos:start="15:53" pos:end="15:60"><name pos:start="15:53" pos:end="15:60">TAG_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:35"><if pos:start="17:5" pos:end="19:35">if <condition pos:start="17:8" pos:end="17:37">(<expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:14">result</name> <operator pos:start="17:16" pos:end="17:17">==</operator> <name pos:start="17:19" pos:end="17:36">VECTORTYPE_ALTIVEC</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:35"><block_content pos:start="19:9" pos:end="19:35">

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AV_CPU_FLAG_ALTIVEC</name></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="21:5" pos:end="26:0">return <expr pos:start="21:12" pos:end="21:12"><literal type="number" pos:start="21:12" pos:end="21:12">0</literal></expr>;</return>

<cpp:elif pos:start="23:1" pos:end="23:48">#<cpp:directive pos:start="23:2" pos:end="23:5">elif</cpp:directive> <expr pos:start="23:7" pos:end="23:48"><call pos:start="23:7" pos:end="23:24"><name pos:start="23:7" pos:end="23:13">defined</name><argument_list pos:start="23:14" pos:end="23:24">(<argument pos:start="23:15" pos:end="23:23"><expr pos:start="23:15" pos:end="23:23"><name pos:start="23:15" pos:end="23:23">__APPLE__</name></expr></argument>)</argument_list></call> <operator pos:start="23:26" pos:end="23:27">||</operator> <call pos:start="23:29" pos:end="23:48"><name pos:start="23:29" pos:end="23:35">defined</name><argument_list pos:start="23:36" pos:end="23:48">(<argument pos:start="23:37" pos:end="23:47"><expr pos:start="23:37" pos:end="23:47"><name pos:start="23:37" pos:end="23:47">__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:ifdef pos:start="25:1" pos:end="25:18">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:18">__OpenBSD__</name></cpp:ifdef>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:44"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">sels</name><index pos:start="27:13" pos:end="27:15">[<expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">2</literal></expr>]</index></name> <init pos:start="27:17" pos:end="27:44">= <expr pos:start="27:19" pos:end="27:44"><block pos:start="27:19" pos:end="27:44">{<expr pos:start="27:20" pos:end="27:30"><name pos:start="27:20" pos:end="27:30">CTL_MACHDEP</name></expr>, <expr pos:start="27:33" pos:end="27:43"><name pos:start="27:33" pos:end="27:43">CPU_ALTIVEC</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="31:5" pos:end="34:0"><decl pos:start="31:5" pos:end="31:41"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">sels</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">2</literal></expr>]</index></name> <init pos:start="31:17" pos:end="31:41">= <expr pos:start="31:19" pos:end="31:41"><block pos:start="31:19" pos:end="31:41">{<expr pos:start="31:20" pos:end="31:25"><name pos:start="31:20" pos:end="31:25">CTL_HW</name></expr>, <expr pos:start="31:28" pos:end="31:40"><name pos:start="31:28" pos:end="31:40">HW_VECTORUNIT</name></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="35:5" pos:end="35:19"><decl pos:start="35:5" pos:end="35:18"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:14">has_vu</name> <init pos:start="35:16" pos:end="35:18">= <expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:32"><decl pos:start="37:5" pos:end="37:31"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:10">size_t</name></type> <name pos:start="37:12" pos:end="37:14">len</name> <init pos:start="37:16" pos:end="37:31">= <expr pos:start="37:18" pos:end="37:31"><sizeof pos:start="37:18" pos:end="37:31">sizeof<argument_list pos:start="37:24" pos:end="37:31">(<argument pos:start="37:25" pos:end="37:30"><expr pos:start="37:25" pos:end="37:30"><name pos:start="37:25" pos:end="37:30">has_vu</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:12"><decl pos:start="39:5" pos:end="39:11"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:7">err</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:49"><name pos:start="43:11" pos:end="43:16">sysctl</name><argument_list pos:start="43:17" pos:end="43:49">(<argument pos:start="43:18" pos:end="43:21"><expr pos:start="43:18" pos:end="43:21"><name pos:start="43:18" pos:end="43:21">sels</name></expr></argument>, <argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">2</literal></expr></argument>, <argument pos:start="43:27" pos:end="43:33"><expr pos:start="43:27" pos:end="43:33"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:33">has_vu</name></expr></argument>, <argument pos:start="43:36" pos:end="43:39"><expr pos:start="43:36" pos:end="43:39"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:39">len</name></expr></argument>, <argument pos:start="43:42" pos:end="43:45"><expr pos:start="43:42" pos:end="43:45"><name pos:start="43:42" pos:end="43:45">NULL</name></expr></argument>, <argument pos:start="43:48" pos:end="43:48"><expr pos:start="43:48" pos:end="43:48"><literal type="number" pos:start="43:48" pos:end="43:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="49:48"><if pos:start="47:5" pos:end="49:48">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">err</name> <operator pos:start="47:13" pos:end="47:14">==</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:48"><block_content pos:start="49:9" pos:end="49:48">

        <return pos:start="49:9" pos:end="49:48">return <expr pos:start="49:16" pos:end="49:47"><ternary pos:start="49:16" pos:end="49:47"><condition pos:start="49:16" pos:end="49:23"><expr pos:start="49:16" pos:end="49:21"><name pos:start="49:16" pos:end="49:21">has_vu</name></expr> ?</condition><then pos:start="49:25" pos:end="49:43"> <expr pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:43">AV_CPU_FLAG_ALTIVEC</name></expr> </then><else pos:start="49:45" pos:end="49:47">: <expr pos:start="49:47" pos:end="49:47"><literal type="number" pos:start="49:47" pos:end="49:47">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="51:5" pos:end="54:0">return <expr pos:start="51:12" pos:end="51:12"><literal type="number" pos:start="51:12" pos:end="51:12">0</literal></expr>;</return>

<cpp:elif pos:start="53:1" pos:end="53:24">#<cpp:directive pos:start="53:2" pos:end="53:5">elif</cpp:directive> <expr pos:start="53:7" pos:end="53:24"><call pos:start="53:7" pos:end="53:24"><name pos:start="53:7" pos:end="53:13">defined</name><argument_list pos:start="53:14" pos:end="53:24">(<argument pos:start="53:15" pos:end="53:23"><expr pos:start="53:15" pos:end="53:23"><name pos:start="53:15" pos:end="53:23">__linux__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="line" pos:start="55:5" pos:end="55:63">// The linux kernel could have the altivec support disabled</comment>

    <comment type="line" pos:start="57:5" pos:end="57:30">// even if the cpu has it.</comment>

    <decl_stmt pos:start="59:5" pos:end="59:19"><decl pos:start="59:5" pos:end="59:9"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:9">i</name></decl>, <decl pos:start="59:12" pos:end="59:18"><type ref="prev" pos:start="59:5" pos:end="59:7"/><name pos:start="59:12" pos:end="59:14">ret</name> <init pos:start="59:16" pos:end="59:18">= <expr pos:start="59:18" pos:end="59:18"><literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:47"><decl pos:start="61:5" pos:end="61:46"><type pos:start="61:5" pos:end="61:7"><name pos:start="61:5" pos:end="61:7">int</name></type> <name pos:start="61:9" pos:end="61:10">fd</name> <init pos:start="61:12" pos:end="61:46">= <expr pos:start="61:14" pos:end="61:46"><call pos:start="61:14" pos:end="61:46"><name pos:start="61:14" pos:end="61:17">open</name><argument_list pos:start="61:18" pos:end="61:46">(<argument pos:start="61:19" pos:end="61:35"><expr pos:start="61:19" pos:end="61:35"><literal type="string" pos:start="61:19" pos:end="61:35">"/proc/self/auxv"</literal></expr></argument>, <argument pos:start="61:38" pos:end="61:45"><expr pos:start="61:38" pos:end="61:45"><name pos:start="61:38" pos:end="61:45">O_RDONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:34"><decl pos:start="63:5" pos:end="63:33"><type pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:12">unsigned</name> <name pos:start="63:14" pos:end="63:17">long</name></type> <name pos:start="63:19" pos:end="63:25"><name pos:start="63:19" pos:end="63:21">buf</name><index pos:start="63:22" pos:end="63:25">[<expr pos:start="63:23" pos:end="63:24"><literal type="number" pos:start="63:23" pos:end="63:24">64</literal></expr>]</index></name> <init pos:start="63:27" pos:end="63:33">= <expr pos:start="63:29" pos:end="63:33"><block pos:start="63:29" pos:end="63:33">{ <expr pos:start="63:31" pos:end="63:31"><literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:18"><decl pos:start="65:5" pos:end="65:17"><type pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:11">ssize_t</name></type> <name pos:start="65:13" pos:end="65:17">count</name></decl>;</decl_stmt>



    <if_stmt pos:start="69:5" pos:end="71:17"><if pos:start="69:5" pos:end="71:17">if <condition pos:start="69:8" pos:end="69:15">(<expr pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:10">fd</name> <operator pos:start="69:12" pos:end="69:12">&lt;</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:17"><block_content pos:start="71:9" pos:end="71:17">

        <return pos:start="71:9" pos:end="71:17">return <expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="75:5" pos:end="95:5">while <condition pos:start="75:11" pos:end="75:52">(<expr pos:start="75:12" pos:end="75:51"><operator pos:start="75:12" pos:end="75:12">(</operator><name pos:start="75:13" pos:end="75:17">count</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:46"><name pos:start="75:21" pos:end="75:24">read</name><argument_list pos:start="75:25" pos:end="75:46">(<argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">fd</name></expr></argument>, <argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:32">buf</name></expr></argument>, <argument pos:start="75:35" pos:end="75:45"><expr pos:start="75:35" pos:end="75:45"><sizeof pos:start="75:35" pos:end="75:45">sizeof<argument_list pos:start="75:41" pos:end="75:45">(<argument pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="75:47" pos:end="75:47">)</operator> <operator pos:start="75:49" pos:end="75:49">&gt;</operator> <literal type="number" pos:start="75:51" pos:end="75:51">0</literal></expr>)</condition> <block pos:start="75:54" pos:end="95:5">{<block_content pos:start="77:9" pos:end="93:9">

        <for pos:start="77:9" pos:end="93:9">for <control pos:start="77:13" pos:end="77:53">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">i</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:45"><expr pos:start="77:21" pos:end="77:44"><name pos:start="77:21" pos:end="77:21">i</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <name pos:start="77:25" pos:end="77:29">count</name> <operator pos:start="77:31" pos:end="77:31">/</operator> <sizeof pos:start="77:33" pos:end="77:44">sizeof<argument_list pos:start="77:39" pos:end="77:44">(<argument pos:start="77:40" pos:end="77:43"><expr pos:start="77:40" pos:end="77:43"><operator pos:start="77:40" pos:end="77:40">*</operator><name pos:start="77:41" pos:end="77:43">buf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="77:47" pos:end="77:52"><expr pos:start="77:47" pos:end="77:52"><name pos:start="77:47" pos:end="77:47">i</name> <operator pos:start="77:49" pos:end="77:50">+=</operator> <literal type="number" pos:start="77:52" pos:end="77:52">2</literal></expr></incr>)</control> <block pos:start="77:55" pos:end="93:9">{<block_content pos:start="79:13" pos:end="91:13">

            <if_stmt pos:start="79:13" pos:end="81:25"><if pos:start="79:13" pos:end="81:25">if <condition pos:start="79:16" pos:end="79:34">(<expr pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:19">buf</name><index pos:start="79:20" pos:end="79:22">[<expr pos:start="79:21" pos:end="79:21"><name pos:start="79:21" pos:end="79:21">i</name></expr>]</index></name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:33">AT_NULL</name></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:25"><block_content pos:start="81:17" pos:end="81:25">

                <goto pos:start="81:17" pos:end="81:25">goto <name pos:start="81:22" pos:end="81:24">out</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="83:13" pos:end="91:13"><if pos:start="83:13" pos:end="91:13">if <condition pos:start="83:16" pos:end="83:35">(<expr pos:start="83:17" pos:end="83:34"><name pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:19">buf</name><index pos:start="83:20" pos:end="83:22">[<expr pos:start="83:21" pos:end="83:21"><name pos:start="83:21" pos:end="83:21">i</name></expr>]</index></name> <operator pos:start="83:24" pos:end="83:25">==</operator> <name pos:start="83:27" pos:end="83:34">AT_HWCAP</name></expr>)</condition> <block pos:start="83:37" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:25">

                <if_stmt pos:start="85:17" pos:end="87:46"><if pos:start="85:17" pos:end="87:46">if <condition pos:start="85:20" pos:end="85:57">(<expr pos:start="85:21" pos:end="85:56"><name pos:start="85:21" pos:end="85:30"><name pos:start="85:21" pos:end="85:23">buf</name><index pos:start="85:24" pos:end="85:30">[<expr pos:start="85:25" pos:end="85:29"><name pos:start="85:25" pos:end="85:25">i</name> <operator pos:start="85:27" pos:end="85:27">+</operator> <literal type="number" pos:start="85:29" pos:end="85:29">1</literal></expr>]</index></name> <operator pos:start="85:32" pos:end="85:32">&amp;</operator> <name pos:start="85:34" pos:end="85:56">PPC_FEATURE_HAS_ALTIVEC</name></expr>)</condition><block type="pseudo" pos:start="87:21" pos:end="87:46"><block_content pos:start="87:21" pos:end="87:46">

                    <expr_stmt pos:start="87:21" pos:end="87:46"><expr pos:start="87:21" pos:end="87:45"><name pos:start="87:21" pos:end="87:23">ret</name> <operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:45">AV_CPU_FLAG_ALTIVEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <goto pos:start="89:17" pos:end="89:25">goto <name pos:start="89:22" pos:end="89:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></while>



<label pos:start="99:1" pos:end="99:4"><name pos:start="99:1" pos:end="99:3">out</name>:</label>

    <expr_stmt pos:start="101:5" pos:end="101:14"><expr pos:start="101:5" pos:end="101:13"><call pos:start="101:5" pos:end="101:13"><name pos:start="101:5" pos:end="101:9">close</name><argument_list pos:start="101:10" pos:end="101:13">(<argument pos:start="101:11" pos:end="101:12"><expr pos:start="101:11" pos:end="101:12"><name pos:start="101:11" pos:end="101:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="103:5" pos:end="106:0">return <expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">ret</name></expr>;</return>

<cpp:elif pos:start="105:1" pos:end="105:30">#<cpp:directive pos:start="105:2" pos:end="105:5">elif</cpp:directive> <expr pos:start="105:7" pos:end="105:30"><name pos:start="105:7" pos:end="105:30">CONFIG_RUNTIME_CPUDETECT</name></expr></cpp:elif>

    <decl_stmt pos:start="107:5" pos:end="107:17"><decl pos:start="107:5" pos:end="107:16"><type pos:start="107:5" pos:end="107:7"><name pos:start="107:5" pos:end="107:7">int</name></type> <name pos:start="107:9" pos:end="107:16">proc_ver</name></decl>;</decl_stmt>

    <comment type="line" pos:start="109:5" pos:end="109:60">// Support of mfspr PVR emulation added in Linux 2.6.17.</comment>

    <asm pos:start="111:5" pos:end="111:56">__asm__ <specifier pos:start="111:13" pos:end="111:20">volatile</specifier>("mfspr %0, 287" : "=r" (proc_ver));</asm>

    <expr_stmt pos:start="113:5" pos:end="113:20"><expr pos:start="113:5" pos:end="113:19"><name pos:start="113:5" pos:end="113:12">proc_ver</name> <operator pos:start="113:14" pos:end="113:16">&gt;&gt;=</operator> <literal type="number" pos:start="113:18" pos:end="113:19">16</literal></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="125:35"><if pos:start="115:5" pos:end="125:35">if <condition pos:start="115:8" pos:end="123:27">(<expr pos:start="115:9" pos:end="123:26"><name pos:start="115:9" pos:end="115:16">proc_ver</name>  <operator pos:start="115:19" pos:end="115:19">&amp;</operator> <literal type="number" pos:start="115:21" pos:end="115:26">0x8000</literal> <operator pos:start="115:28" pos:end="115:29">||</operator>

        <name pos:start="117:9" pos:end="117:16">proc_ver</name> <operator pos:start="117:18" pos:end="117:19">==</operator> <literal type="number" pos:start="117:21" pos:end="117:26">0x000c</literal> <operator pos:start="117:28" pos:end="117:29">||</operator>

        <name pos:start="119:9" pos:end="119:16">proc_ver</name> <operator pos:start="119:18" pos:end="119:19">==</operator> <literal type="number" pos:start="119:21" pos:end="119:26">0x0039</literal> <operator pos:start="119:28" pos:end="119:29">||</operator> <name pos:start="119:31" pos:end="119:38">proc_ver</name> <operator pos:start="119:40" pos:end="119:41">==</operator> <literal type="number" pos:start="119:43" pos:end="119:48">0x003c</literal> <operator pos:start="119:50" pos:end="119:51">||</operator>

        <name pos:start="121:9" pos:end="121:16">proc_ver</name> <operator pos:start="121:18" pos:end="121:19">==</operator> <literal type="number" pos:start="121:21" pos:end="121:26">0x0044</literal> <operator pos:start="121:28" pos:end="121:29">||</operator> <name pos:start="121:31" pos:end="121:38">proc_ver</name> <operator pos:start="121:40" pos:end="121:41">==</operator> <literal type="number" pos:start="121:43" pos:end="121:48">0x0045</literal> <operator pos:start="121:50" pos:end="121:51">||</operator>

        <name pos:start="123:9" pos:end="123:16">proc_ver</name> <operator pos:start="123:18" pos:end="123:19">==</operator> <literal type="number" pos:start="123:21" pos:end="123:26">0x0070</literal></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:35"><block_content pos:start="125:9" pos:end="125:35">

        <return pos:start="125:9" pos:end="125:35">return <expr pos:start="125:16" pos:end="125:34"><name pos:start="125:16" pos:end="125:34">AV_CPU_FLAG_ALTIVEC</name></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="127:5" pos:end="130:0">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr>;</return>

<cpp:else pos:start="129:1" pos:end="129:5">#<cpp:directive pos:start="129:2" pos:end="129:5">else</cpp:directive></cpp:else>

    <comment type="line" pos:start="131:5" pos:end="131:65">// Since we were compiled for AltiVec, just assume we have it</comment>

    <comment type="line" pos:start="133:5" pos:end="133:77">// until someone comes up with a proper way (not involving signal hacks).</comment>

    <return pos:start="135:5" pos:end="140:0">return <expr pos:start="135:12" pos:end="135:30"><name pos:start="135:12" pos:end="135:30">AV_CPU_FLAG_ALTIVEC</name></expr>;</return>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="137:8" pos:end="137:25">/* __AMIGAOS4__ */</comment>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="139:8" pos:end="139:25">/* HAVE_ALTIVEC */</comment>

    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
