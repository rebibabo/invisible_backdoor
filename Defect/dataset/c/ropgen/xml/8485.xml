<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8485.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mm_decode_intra</name><parameter_list pos:start="1:27" pos:end="1:72">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:36">MmContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type> <name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:56">half_horiz</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:71"><decl pos:start="1:59" pos:end="1:71"><type pos:start="1:59" pos:end="1:71"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:71">half_vert</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name> <init pos:start="5:11" pos:end="5:13">= <expr pos:start="5:13" pos:end="5:13"><literal type="number" pos:start="5:13" pos:end="5:13">0</literal></expr></init></decl>, <decl pos:start="5:16" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:16">y</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="9:5" pos:end="71:5">while <condition pos:start="9:11" pos:end="9:50">(<expr pos:start="9:12" pos:end="9:49"><call pos:start="9:12" pos:end="9:45"><name pos:start="9:12" pos:end="9:37">bytestream2_get_bytes_left</name><argument_list pos:start="9:38" pos:end="9:45">(<argument pos:start="9:39" pos:end="9:44"><expr pos:start="9:39" pos:end="9:44"><operator pos:start="9:39" pos:end="9:39">&amp;</operator><name pos:start="9:40" pos:end="9:44"><name pos:start="9:40" pos:end="9:40">s</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:47" pos:end="9:47">&gt;</operator> <literal type="number" pos:start="9:49" pos:end="9:49">0</literal></expr>)</condition> <block pos:start="9:52" pos:end="71:5">{<block_content pos:start="11:9" pos:end="69:9">

        <decl_stmt pos:start="11:9" pos:end="11:30"><decl pos:start="11:9" pos:end="11:22"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:22">run_length</name></decl>, <decl pos:start="11:25" pos:end="11:29"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:25" pos:end="11:29">color</name></decl>;</decl_stmt>



        <if_stmt pos:start="15:9" pos:end="17:21"><if pos:start="15:9" pos:end="17:21">if <condition pos:start="15:12" pos:end="15:34">(<expr pos:start="15:13" pos:end="15:33"><name pos:start="15:13" pos:end="15:13">y</name> <operator pos:start="15:15" pos:end="15:16">&gt;=</operator> <name pos:start="15:18" pos:end="15:33"><name pos:start="15:18" pos:end="15:18">s</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:25">avctx</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:33">height</name></name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:21"><block_content pos:start="17:13" pos:end="17:21">

            <return pos:start="17:13" pos:end="17:21">return <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:45"><expr pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:13">color</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:44"><name pos:start="21:17" pos:end="21:36">bytestream2_get_byte</name><argument_list pos:start="21:37" pos:end="21:44">(<argument pos:start="21:38" pos:end="21:43"><expr pos:start="21:38" pos:end="21:43"><operator pos:start="21:38" pos:end="21:38">&amp;</operator><name pos:start="21:39" pos:end="21:43"><name pos:start="21:39" pos:end="21:39">s</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:17">color</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <literal type="number" pos:start="23:21" pos:end="23:24">0x80</literal></expr>)</condition> <block pos:start="23:27" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:27">

            <expr_stmt pos:start="25:13" pos:end="25:27"><expr pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:22">run_length</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="27:10" pos:end="33:9">else<block pos:start="27:14" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:49">

            <expr_stmt pos:start="29:13" pos:end="29:44"><expr pos:start="29:13" pos:end="29:43"><name pos:start="29:13" pos:end="29:22">run_length</name> <operator pos:start="29:24" pos:end="29:24">=</operator> <operator pos:start="29:26" pos:end="29:26">(</operator><name pos:start="29:27" pos:end="29:31">color</name> <operator pos:start="29:33" pos:end="29:33">&amp;</operator> <literal type="number" pos:start="29:35" pos:end="29:38">0x7f</literal><operator pos:start="29:39" pos:end="29:39">)</operator> <operator pos:start="29:41" pos:end="29:41">+</operator> <literal type="number" pos:start="29:43" pos:end="29:43">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:49"><expr pos:start="31:13" pos:end="31:48"><name pos:start="31:13" pos:end="31:17">color</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:48"><name pos:start="31:21" pos:end="31:40">bytestream2_get_byte</name><argument_list pos:start="31:41" pos:end="31:48">(<argument pos:start="31:42" pos:end="31:47"><expr pos:start="31:42" pos:end="31:47"><operator pos:start="31:42" pos:end="31:42">&amp;</operator><name pos:start="31:43" pos:end="31:47"><name pos:start="31:43" pos:end="31:43">s</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="37:9" pos:end="39:27"><if pos:start="37:9" pos:end="39:27">if <condition pos:start="37:12" pos:end="37:23">(<expr pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:22">half_horiz</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:27"><block_content pos:start="39:13" pos:end="39:27">

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:22">run_length</name> <operator pos:start="39:24" pos:end="39:25">*=</operator><literal type="number" pos:start="39:26" pos:end="39:26">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="43:9" pos:end="45:39"><if pos:start="43:9" pos:end="45:39">if <condition pos:start="43:12" pos:end="43:45">(<expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:22">run_length</name> <operator pos:start="43:24" pos:end="43:24">&gt;</operator> <name pos:start="43:26" pos:end="43:40"><name pos:start="43:26" pos:end="43:26">s</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:33">avctx</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:40">width</name></name> <operator pos:start="43:42" pos:end="43:42">-</operator> <name pos:start="43:44" pos:end="43:44">x</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:39"><block_content pos:start="45:13" pos:end="45:39">

            <return pos:start="45:13" pos:end="45:39">return <expr pos:start="45:20" pos:end="45:38"><name pos:start="45:20" pos:end="45:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:18">(<expr pos:start="49:13" pos:end="49:17"><name pos:start="49:13" pos:end="49:17">color</name></expr>)</condition> <block pos:start="49:20" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:95">

            <expr_stmt pos:start="51:13" pos:end="51:87"><expr pos:start="51:13" pos:end="51:86"><call pos:start="51:13" pos:end="51:86"><name pos:start="51:13" pos:end="51:18">memset</name><argument_list pos:start="51:19" pos:end="51:86">(<argument pos:start="51:20" pos:end="51:66"><expr pos:start="51:20" pos:end="51:66"><name pos:start="51:20" pos:end="51:36"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:27">frame</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:33">data</name><index pos:start="51:34" pos:end="51:36">[<expr pos:start="51:35" pos:end="51:35"><literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>]</index></name> <operator pos:start="51:38" pos:end="51:38">+</operator> <name pos:start="51:40" pos:end="51:40">y</name><operator pos:start="51:41" pos:end="51:41">*</operator><name pos:start="51:42" pos:end="51:62"><name pos:start="51:42" pos:end="51:42">s</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:49">frame</name><operator pos:start="51:50" pos:end="51:51">-&gt;</operator><name pos:start="51:52" pos:end="51:59">linesize</name><index pos:start="51:60" pos:end="51:62">[<expr pos:start="51:61" pos:end="51:61"><literal type="number" pos:start="51:61" pos:end="51:61">0</literal></expr>]</index></name> <operator pos:start="51:64" pos:end="51:64">+</operator> <name pos:start="51:66" pos:end="51:66">x</name></expr></argument>, <argument pos:start="51:69" pos:end="51:73"><expr pos:start="51:69" pos:end="51:73"><name pos:start="51:69" pos:end="51:73">color</name></expr></argument>, <argument pos:start="51:76" pos:end="51:85"><expr pos:start="51:76" pos:end="51:85"><name pos:start="51:76" pos:end="51:85">run_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:95"><if pos:start="53:13" pos:end="55:95">if <condition pos:start="53:16" pos:end="53:26">(<expr pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:25">half_vert</name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:95"><block_content pos:start="55:17" pos:end="55:95">

                <expr_stmt pos:start="55:17" pos:end="55:95"><expr pos:start="55:17" pos:end="55:94"><call pos:start="55:17" pos:end="55:94"><name pos:start="55:17" pos:end="55:22">memset</name><argument_list pos:start="55:23" pos:end="55:94">(<argument pos:start="55:24" pos:end="55:74"><expr pos:start="55:24" pos:end="55:74"><name pos:start="55:24" pos:end="55:40"><name pos:start="55:24" pos:end="55:24">s</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:31">frame</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:37">data</name><index pos:start="55:38" pos:end="55:40">[<expr pos:start="55:39" pos:end="55:39"><literal type="number" pos:start="55:39" pos:end="55:39">0</literal></expr>]</index></name> <operator pos:start="55:42" pos:end="55:42">+</operator> <operator pos:start="55:44" pos:end="55:44">(</operator><name pos:start="55:45" pos:end="55:45">y</name><operator pos:start="55:46" pos:end="55:46">+</operator><literal type="number" pos:start="55:47" pos:end="55:47">1</literal><operator pos:start="55:48" pos:end="55:48">)</operator><operator pos:start="55:49" pos:end="55:49">*</operator><name pos:start="55:50" pos:end="55:70"><name pos:start="55:50" pos:end="55:50">s</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:57">frame</name><operator pos:start="55:58" pos:end="55:59">-&gt;</operator><name pos:start="55:60" pos:end="55:67">linesize</name><index pos:start="55:68" pos:end="55:70">[<expr pos:start="55:69" pos:end="55:69"><literal type="number" pos:start="55:69" pos:end="55:69">0</literal></expr>]</index></name> <operator pos:start="55:72" pos:end="55:72">+</operator> <name pos:start="55:74" pos:end="55:74">x</name></expr></argument>, <argument pos:start="55:77" pos:end="55:81"><expr pos:start="55:77" pos:end="55:81"><name pos:start="55:77" pos:end="55:81">color</name></expr></argument>, <argument pos:start="55:84" pos:end="55:93"><expr pos:start="55:84" pos:end="55:93"><name pos:start="55:84" pos:end="55:93">run_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:9">x</name><operator pos:start="59:10" pos:end="59:11">+=</operator> <name pos:start="59:13" pos:end="59:22">run_length</name></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:33">(<expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:13">x</name> <operator pos:start="63:15" pos:end="63:16">&gt;=</operator> <name pos:start="63:18" pos:end="63:32"><name pos:start="63:18" pos:end="63:18">s</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:25">avctx</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:32">width</name></name></expr>)</condition> <block pos:start="63:35" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:31">

            <expr_stmt pos:start="65:13" pos:end="65:16"><expr pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:13">x</name><operator pos:start="65:14" pos:end="65:14">=</operator><literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:31"><expr pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:13">y</name> <operator pos:start="67:15" pos:end="67:16">+=</operator> <literal type="number" pos:start="67:18" pos:end="67:20">1</literal> <operator pos:start="67:20" pos:end="67:20">+</operator> <name pos:start="67:22" pos:end="67:30">half_vert</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
