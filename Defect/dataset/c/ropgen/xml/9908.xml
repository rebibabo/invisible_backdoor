<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9908.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:28"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:26"><name pos:start="1:8" pos:end="1:13">struct</name> <name pos:start="1:15" pos:end="1:26">scoop_info_s</name></name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:44">spitz_scoop_init</name><parameter_list pos:start="1:45" pos:end="3:26">(<parameter pos:start="1:46" pos:end="1:71"><decl pos:start="1:46" pos:end="1:71"><type pos:start="1:46" pos:end="1:71"><name pos:start="1:46" pos:end="1:66"><name pos:start="1:46" pos:end="1:51">struct</name> <name pos:start="1:53" pos:end="1:66">pxa2xx_state_s</name></name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">cpu</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:25"><decl pos:start="3:17" pos:end="3:25"><type pos:start="3:17" pos:end="3:25"><name pos:start="3:17" pos:end="3:19">int</name></type> <name pos:start="3:21" pos:end="3:25">count</name></decl></parameter>)</parameter_list> <block pos:start="3:28" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">iomemtype</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:23">scoop_info_s</name></name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:26">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="13:58"><expr pos:start="11:5" pos:end="13:57"><name pos:start="11:5" pos:end="11:5">s</name> <operator pos:start="11:7" pos:end="11:7">=</operator> <operator pos:start="11:9" pos:end="11:9">(</operator>struct <name pos:start="11:17" pos:end="11:28">scoop_info_s</name> <operator pos:start="11:30" pos:end="11:30">*</operator><operator pos:start="11:31" pos:end="11:31">)</operator>

            <call pos:start="13:13" pos:end="13:57"><name pos:start="13:13" pos:end="13:24">qemu_mallocz</name><argument_list pos:start="13:25" pos:end="13:57">(<argument pos:start="13:26" pos:end="13:56"><expr pos:start="13:26" pos:end="13:56"><sizeof pos:start="13:26" pos:end="13:52">sizeof<argument_list pos:start="13:32" pos:end="13:52">(<argument pos:start="13:33" pos:end="13:51"><expr pos:start="13:33" pos:end="13:51">struct <name pos:start="13:40" pos:end="13:51">scoop_info_s</name></expr></argument>)</argument_list></sizeof> <operator pos:start="13:54" pos:end="13:54">*</operator> <literal type="number" pos:start="13:56" pos:end="13:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:54"><expr pos:start="15:5" pos:end="15:53"><call pos:start="15:5" pos:end="15:53"><name pos:start="15:5" pos:end="15:10">memset</name><argument_list pos:start="15:11" pos:end="15:53">(<argument pos:start="15:12" pos:end="15:12"><expr pos:start="15:12" pos:end="15:12"><name pos:start="15:12" pos:end="15:12">s</name></expr></argument>, <argument pos:start="15:15" pos:end="15:15"><expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></argument>, <argument pos:start="15:18" pos:end="15:52"><expr pos:start="15:18" pos:end="15:52"><sizeof pos:start="15:18" pos:end="15:44">sizeof<argument_list pos:start="15:24" pos:end="15:44">(<argument pos:start="15:25" pos:end="15:43"><expr pos:start="15:25" pos:end="15:43">struct <name pos:start="15:32" pos:end="15:43">scoop_info_s</name></expr></argument>)</argument_list></sizeof> <operator pos:start="15:46" pos:end="15:46">*</operator> <name pos:start="15:48" pos:end="15:52">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:5">s</name><index pos:start="17:6" pos:end="17:8">[<expr pos:start="17:7" pos:end="17:7"><literal type="number" pos:start="17:7" pos:end="17:7">0</literal></expr>]</index></name><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:20">target_base</name> <operator pos:start="17:22" pos:end="17:22">=</operator> <literal type="number" pos:start="17:24" pos:end="17:33">0x10800000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><name pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:5">s</name><index pos:start="19:6" pos:end="19:8">[<expr pos:start="19:7" pos:end="19:7"><literal type="number" pos:start="19:7" pos:end="19:7">1</literal></expr>]</index></name><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:20">target_base</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <literal type="number" pos:start="19:24" pos:end="19:33">0x08800040</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:15">/* Ready */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:5">s</name><index pos:start="25:6" pos:end="25:8">[<expr pos:start="25:7" pos:end="25:7"><literal type="number" pos:start="25:7" pos:end="25:7">0</literal></expr>]</index></name><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:15">status</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:22">0x02</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:5">s</name><index pos:start="27:6" pos:end="27:8">[<expr pos:start="27:7" pos:end="27:7"><literal type="number" pos:start="27:7" pos:end="27:7">1</literal></expr>]</index></name><operator pos:start="27:9" pos:end="27:9">.</operator><name pos:start="27:10" pos:end="27:15">status</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <literal type="number" pos:start="27:19" pos:end="27:22">0x02</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:42"><expr pos:start="31:5" pos:end="33:41"><name pos:start="31:5" pos:end="31:13">iomemtype</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="33:41"><name pos:start="31:17" pos:end="31:38">cpu_register_io_memory</name><argument_list pos:start="31:39" pos:end="33:41">(<argument pos:start="31:40" pos:end="31:40"><expr pos:start="31:40" pos:end="31:40"><literal type="number" pos:start="31:40" pos:end="31:40">0</literal></expr></argument>, <argument pos:start="31:43" pos:end="31:54"><expr pos:start="31:43" pos:end="31:54"><name pos:start="31:43" pos:end="31:54">scoop_readfn</name></expr></argument>,

                    <argument pos:start="33:21" pos:end="33:33"><expr pos:start="33:21" pos:end="33:33"><name pos:start="33:21" pos:end="33:33">scoop_writefn</name></expr></argument>, <argument pos:start="33:36" pos:end="33:40"><expr pos:start="33:36" pos:end="33:40"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:40"><name pos:start="33:37" pos:end="33:37">s</name><index pos:start="33:38" pos:end="33:40">[<expr pos:start="33:39" pos:end="33:39"><literal type="number" pos:start="33:39" pos:end="33:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:69"><expr pos:start="35:5" pos:end="35:68"><call pos:start="35:5" pos:end="35:68"><name pos:start="35:5" pos:end="35:32">cpu_register_physical_memory</name><argument_list pos:start="35:33" pos:end="35:68">(<argument pos:start="35:34" pos:end="35:49"><expr pos:start="35:34" pos:end="35:49"><name pos:start="35:34" pos:end="35:37"><name pos:start="35:34" pos:end="35:34">s</name><index pos:start="35:35" pos:end="35:37">[<expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">0</literal></expr>]</index></name><operator pos:start="35:38" pos:end="35:38">.</operator><name pos:start="35:39" pos:end="35:49">target_base</name></expr></argument>, <argument pos:start="35:52" pos:end="35:56"><expr pos:start="35:52" pos:end="35:56"><literal type="number" pos:start="35:52" pos:end="35:56">0xfff</literal></expr></argument>, <argument pos:start="35:59" pos:end="35:67"><expr pos:start="35:59" pos:end="35:67"><name pos:start="35:59" pos:end="35:67">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:66"><expr pos:start="37:5" pos:end="37:65"><call pos:start="37:5" pos:end="37:65"><name pos:start="37:5" pos:end="37:19">register_savevm</name><argument_list pos:start="37:20" pos:end="37:65">(<argument pos:start="37:21" pos:end="37:27"><expr pos:start="37:21" pos:end="37:27"><literal type="string" pos:start="37:21" pos:end="37:27">"scoop"</literal></expr></argument>, <argument pos:start="37:30" pos:end="37:30"><expr pos:start="37:30" pos:end="37:30"><literal type="number" pos:start="37:30" pos:end="37:30">0</literal></expr></argument>, <argument pos:start="37:33" pos:end="37:33"><expr pos:start="37:33" pos:end="37:33"><literal type="number" pos:start="37:33" pos:end="37:33">0</literal></expr></argument>, <argument pos:start="37:36" pos:end="37:45"><expr pos:start="37:36" pos:end="37:45"><name pos:start="37:36" pos:end="37:45">scoop_save</name></expr></argument>, <argument pos:start="37:48" pos:end="37:57"><expr pos:start="37:48" pos:end="37:57"><name pos:start="37:48" pos:end="37:57">scoop_load</name></expr></argument>, <argument pos:start="37:60" pos:end="37:64"><expr pos:start="37:60" pos:end="37:64"><operator pos:start="37:60" pos:end="37:60">&amp;</operator><name pos:start="37:61" pos:end="37:64"><name pos:start="37:61" pos:end="37:61">s</name><index pos:start="37:62" pos:end="37:64">[<expr pos:start="37:63" pos:end="37:63"><literal type="number" pos:start="37:63" pos:end="37:63">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="43:17"><if pos:start="41:5" pos:end="43:17">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:13">count</name> <operator pos:start="41:15" pos:end="41:15">&lt;</operator> <literal type="number" pos:start="41:17" pos:end="41:17">2</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:17"><block_content pos:start="43:9" pos:end="43:17">

        <return pos:start="43:9" pos:end="43:17">return <expr pos:start="43:16" pos:end="43:16"><name pos:start="43:16" pos:end="43:16">s</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:42"><expr pos:start="47:5" pos:end="49:41"><name pos:start="47:5" pos:end="47:13">iomemtype</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="49:41"><name pos:start="47:17" pos:end="47:38">cpu_register_io_memory</name><argument_list pos:start="47:39" pos:end="49:41">(<argument pos:start="47:40" pos:end="47:40"><expr pos:start="47:40" pos:end="47:40"><literal type="number" pos:start="47:40" pos:end="47:40">0</literal></expr></argument>, <argument pos:start="47:43" pos:end="47:54"><expr pos:start="47:43" pos:end="47:54"><name pos:start="47:43" pos:end="47:54">scoop_readfn</name></expr></argument>,

                    <argument pos:start="49:21" pos:end="49:33"><expr pos:start="49:21" pos:end="49:33"><name pos:start="49:21" pos:end="49:33">scoop_writefn</name></expr></argument>, <argument pos:start="49:36" pos:end="49:40"><expr pos:start="49:36" pos:end="49:40"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:40"><name pos:start="49:37" pos:end="49:37">s</name><index pos:start="49:38" pos:end="49:40">[<expr pos:start="49:39" pos:end="49:39"><literal type="number" pos:start="49:39" pos:end="49:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:69"><expr pos:start="51:5" pos:end="51:68"><call pos:start="51:5" pos:end="51:68"><name pos:start="51:5" pos:end="51:32">cpu_register_physical_memory</name><argument_list pos:start="51:33" pos:end="51:68">(<argument pos:start="51:34" pos:end="51:49"><expr pos:start="51:34" pos:end="51:49"><name pos:start="51:34" pos:end="51:37"><name pos:start="51:34" pos:end="51:34">s</name><index pos:start="51:35" pos:end="51:37">[<expr pos:start="51:36" pos:end="51:36"><literal type="number" pos:start="51:36" pos:end="51:36">1</literal></expr>]</index></name><operator pos:start="51:38" pos:end="51:38">.</operator><name pos:start="51:39" pos:end="51:49">target_base</name></expr></argument>, <argument pos:start="51:52" pos:end="51:56"><expr pos:start="51:52" pos:end="51:56"><literal type="number" pos:start="51:52" pos:end="51:56">0xfff</literal></expr></argument>, <argument pos:start="51:59" pos:end="51:67"><expr pos:start="51:59" pos:end="51:67"><name pos:start="51:59" pos:end="51:67">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:66"><expr pos:start="53:5" pos:end="53:65"><call pos:start="53:5" pos:end="53:65"><name pos:start="53:5" pos:end="53:19">register_savevm</name><argument_list pos:start="53:20" pos:end="53:65">(<argument pos:start="53:21" pos:end="53:27"><expr pos:start="53:21" pos:end="53:27"><literal type="string" pos:start="53:21" pos:end="53:27">"scoop"</literal></expr></argument>, <argument pos:start="53:30" pos:end="53:30"><expr pos:start="53:30" pos:end="53:30"><literal type="number" pos:start="53:30" pos:end="53:30">1</literal></expr></argument>, <argument pos:start="53:33" pos:end="53:33"><expr pos:start="53:33" pos:end="53:33"><literal type="number" pos:start="53:33" pos:end="53:33">0</literal></expr></argument>, <argument pos:start="53:36" pos:end="53:45"><expr pos:start="53:36" pos:end="53:45"><name pos:start="53:36" pos:end="53:45">scoop_save</name></expr></argument>, <argument pos:start="53:48" pos:end="53:57"><expr pos:start="53:48" pos:end="53:57"><name pos:start="53:48" pos:end="53:57">scoop_load</name></expr></argument>, <argument pos:start="53:60" pos:end="53:64"><expr pos:start="53:60" pos:end="53:64"><operator pos:start="53:60" pos:end="53:60">&amp;</operator><name pos:start="53:61" pos:end="53:64"><name pos:start="53:61" pos:end="53:61">s</name><index pos:start="53:62" pos:end="53:64">[<expr pos:start="53:63" pos:end="53:63"><literal type="number" pos:start="53:63" pos:end="53:63">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><name pos:start="57:12" pos:end="57:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
