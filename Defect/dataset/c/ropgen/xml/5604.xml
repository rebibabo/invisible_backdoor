<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5604.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">synthfilt_build_sb_samples</name><parameter_list pos:start="1:38" pos:end="3:74">(<parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:52"><name pos:start="1:39" pos:end="1:49">QDM2Context</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">q</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><name pos:start="1:55" pos:end="1:67">GetBitContext</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">gb</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:49"><decl pos:start="3:40" pos:end="3:49"><type pos:start="3:40" pos:end="3:49"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:49">length</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:61"><decl pos:start="3:52" pos:end="3:61"><type pos:start="3:52" pos:end="3:61"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:61">sb_min</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:73"><decl pos:start="3:64" pos:end="3:73"><type pos:start="3:64" pos:end="3:73"><name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:73">sb_max</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="409:1">{<block_content pos:start="7:5" pos:end="407:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">sb</name></decl>, <decl pos:start="7:13" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:13">j</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">k</name></decl>, <decl pos:start="7:19" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:19">n</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:23">ch</name></decl>, <decl pos:start="7:26" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:28">run</name></decl>, <decl pos:start="7:31" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:38">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">joined_stereo</name></decl>, <decl pos:start="9:24" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:36">zero_encoding</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">type34_first</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">float</name></type> <name pos:start="13:11" pos:end="13:20">type34_div</name> <init pos:start="13:22" pos:end="13:24">= <expr pos:start="13:24" pos:end="13:24"><literal type="number" pos:start="13:24" pos:end="13:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:26">type34_predictor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">float</name></type> <name pos:start="17:11" pos:end="17:21"><name pos:start="17:11" pos:end="17:17">samples</name><index pos:start="17:18" pos:end="17:21">[<expr pos:start="17:19" pos:end="17:20"><literal type="number" pos:start="17:19" pos:end="17:20">10</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:17">sign_bits</name><index pos:start="19:18" pos:end="19:21">[<expr pos:start="19:19" pos:end="19:20"><literal type="number" pos:start="19:19" pos:end="19:20">16</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:20">(<expr pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:14">length</name> <operator pos:start="23:16" pos:end="23:17">==</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>)</condition> <block pos:start="23:22" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:17">

        <comment type="line" pos:start="25:9" pos:end="25:31">// If no data use noise</comment>

        <for pos:start="27:9" pos:end="29:48">for <control pos:start="27:13" pos:end="27:42">(<init pos:start="27:14" pos:end="27:23"><expr pos:start="27:14" pos:end="27:22"><name pos:start="27:14" pos:end="27:15">sb</name><operator pos:start="27:16" pos:end="27:16">=</operator><name pos:start="27:17" pos:end="27:22">sb_min</name></expr>;</init> <condition pos:start="27:25" pos:end="27:36"><expr pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:26">sb</name> <operator pos:start="27:28" pos:end="27:28">&lt;</operator> <name pos:start="27:30" pos:end="27:35">sb_max</name></expr>;</condition> <incr pos:start="27:38" pos:end="27:41"><expr pos:start="27:38" pos:end="27:41"><name pos:start="27:38" pos:end="27:39">sb</name><operator pos:start="27:40" pos:end="27:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="29:13" pos:end="29:48"><block_content pos:start="29:13" pos:end="29:48">

            <expr_stmt pos:start="29:13" pos:end="29:48"><expr pos:start="29:13" pos:end="29:47"><call pos:start="29:13" pos:end="29:47"><name pos:start="29:13" pos:end="29:39">build_sb_samples_from_noise</name> <argument_list pos:start="29:41" pos:end="29:47">(<argument pos:start="29:42" pos:end="29:42"><expr pos:start="29:42" pos:end="29:42"><name pos:start="29:42" pos:end="29:42">q</name></expr></argument>, <argument pos:start="29:45" pos:end="29:46"><expr pos:start="29:45" pos:end="29:46"><name pos:start="29:45" pos:end="29:46">sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="39:5" pos:end="405:5">for <control pos:start="39:9" pos:end="39:40">(<init pos:start="39:10" pos:end="39:21"><expr pos:start="39:10" pos:end="39:20"><name pos:start="39:10" pos:end="39:11">sb</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:20">sb_min</name></expr>;</init> <condition pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:33"><name pos:start="39:23" pos:end="39:24">sb</name> <operator pos:start="39:26" pos:end="39:26">&lt;</operator> <name pos:start="39:28" pos:end="39:33">sb_max</name></expr>;</condition> <incr pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:37">sb</name><operator pos:start="39:38" pos:end="39:39">++</operator></expr></incr>)</control> <block pos:start="39:42" pos:end="405:5">{<block_content pos:start="41:9" pos:end="403:9">

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:16">channels</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:20">q</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">nb_channels</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="55:74"><if pos:start="45:9" pos:end="47:30">if <condition pos:start="45:12" pos:end="45:43">(<expr pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:13">q</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:26">nb_channels</name></name> <operator pos:start="45:28" pos:end="45:29">&lt;=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">1</literal> <operator pos:start="45:33" pos:end="45:34">||</operator> <name pos:start="45:36" pos:end="45:37">sb</name> <operator pos:start="45:39" pos:end="45:39">&lt;</operator> <literal type="number" pos:start="45:41" pos:end="45:42">12</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:30"><block_content pos:start="47:13" pos:end="47:30">

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:25">joined_stereo</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:29">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="49:9" pos:end="51:30">else if <condition pos:start="49:17" pos:end="49:26">(<expr pos:start="49:18" pos:end="49:25"><name pos:start="49:18" pos:end="49:19">sb</name> <operator pos:start="49:21" pos:end="49:22">&gt;=</operator> <literal type="number" pos:start="49:24" pos:end="49:25">24</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:30"><block_content pos:start="51:13" pos:end="51:30">

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:25">joined_stereo</name> <operator pos:start="51:27" pos:end="51:27">=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="53:9" pos:end="55:74">else<block type="pseudo" pos:start="55:13" pos:end="55:74"><block_content pos:start="55:13" pos:end="55:74">

            <expr_stmt pos:start="55:13" pos:end="55:74"><expr pos:start="55:13" pos:end="55:73"><name pos:start="55:13" pos:end="55:25">joined_stereo</name> <operator pos:start="55:27" pos:end="55:27">=</operator> <ternary pos:start="55:29" pos:end="55:73"><condition pos:start="55:29" pos:end="55:54"><expr pos:start="55:29" pos:end="55:52"><operator pos:start="55:29" pos:end="55:29">(</operator><call pos:start="55:30" pos:end="55:46"><name pos:start="55:30" pos:end="55:42">get_bits_left</name><argument_list pos:start="55:43" pos:end="55:46">(<argument pos:start="55:44" pos:end="55:45"><expr pos:start="55:44" pos:end="55:45"><name pos:start="55:44" pos:end="55:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="55:48" pos:end="55:49">&gt;=</operator> <literal type="number" pos:start="55:51" pos:end="55:51">1</literal><operator pos:start="55:52" pos:end="55:52">)</operator></expr> ?</condition><then pos:start="55:56" pos:end="55:69"> <expr pos:start="55:56" pos:end="55:69"><call pos:start="55:56" pos:end="55:69"><name pos:start="55:56" pos:end="55:64">get_bits1</name> <argument_list pos:start="55:66" pos:end="55:69">(<argument pos:start="55:67" pos:end="55:68"><expr pos:start="55:67" pos:end="55:68"><name pos:start="55:67" pos:end="55:68">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="55:71" pos:end="55:73">: <expr pos:start="55:73" pos:end="55:73"><literal type="number" pos:start="55:73" pos:end="55:73">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="59:9" pos:end="91:9"><if pos:start="59:9" pos:end="91:9">if <condition pos:start="59:12" pos:end="59:26">(<expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:25">joined_stereo</name></expr>)</condition> <block pos:start="59:28" pos:end="91:9">{<block_content pos:start="61:13" pos:end="89:25">

            <if_stmt pos:start="61:13" pos:end="65:50"><if pos:start="61:13" pos:end="65:50">if <condition pos:start="61:16" pos:end="61:40">(<expr pos:start="61:17" pos:end="61:39"><call pos:start="61:17" pos:end="61:33"><name pos:start="61:17" pos:end="61:29">get_bits_left</name><argument_list pos:start="61:30" pos:end="61:33">(<argument pos:start="61:31" pos:end="61:32"><expr pos:start="61:31" pos:end="61:32"><name pos:start="61:31" pos:end="61:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="61:35" pos:end="61:36">&gt;=</operator> <literal type="number" pos:start="61:38" pos:end="61:39">16</literal></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="65:50"><block_content pos:start="63:17" pos:end="65:50">

                <for pos:start="63:17" pos:end="65:50">for <control pos:start="63:21" pos:end="63:40">(<init pos:start="63:22" pos:end="63:27"><expr pos:start="63:22" pos:end="63:26"><name pos:start="63:22" pos:end="63:22">j</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <literal type="number" pos:start="63:26" pos:end="63:26">0</literal></expr>;</init> <condition pos:start="63:29" pos:end="63:35"><expr pos:start="63:29" pos:end="63:34"><name pos:start="63:29" pos:end="63:29">j</name> <operator pos:start="63:31" pos:end="63:31">&lt;</operator> <literal type="number" pos:start="63:33" pos:end="63:34">16</literal></expr>;</condition> <incr pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:37">j</name><operator pos:start="63:38" pos:end="63:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:21" pos:end="65:50"><block_content pos:start="65:21" pos:end="65:50">

                    <expr_stmt pos:start="65:21" pos:end="65:50"><expr pos:start="65:21" pos:end="65:49"><name pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:29">sign_bits</name><index pos:start="65:30" pos:end="65:32">[<expr pos:start="65:31" pos:end="65:31"><name pos:start="65:31" pos:end="65:31">j</name></expr>]</index></name> <operator pos:start="65:34" pos:end="65:34">=</operator> <call pos:start="65:36" pos:end="65:49"><name pos:start="65:36" pos:end="65:44">get_bits1</name> <argument_list pos:start="65:46" pos:end="65:49">(<argument pos:start="65:47" pos:end="65:48"><expr pos:start="65:47" pos:end="65:48"><name pos:start="65:47" pos:end="65:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



            <for pos:start="69:13" pos:end="73:76">for <control pos:start="69:17" pos:end="69:36">(<init pos:start="69:18" pos:end="69:23"><expr pos:start="69:18" pos:end="69:22"><name pos:start="69:18" pos:end="69:18">j</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>;</init> <condition pos:start="69:25" pos:end="69:31"><expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:25">j</name> <operator pos:start="69:27" pos:end="69:27">&lt;</operator> <literal type="number" pos:start="69:29" pos:end="69:30">64</literal></expr>;</condition> <incr pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:33">j</name><operator pos:start="69:34" pos:end="69:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:17" pos:end="73:76"><block_content pos:start="71:17" pos:end="73:76">

                <if_stmt pos:start="71:17" pos:end="73:76"><if pos:start="71:17" pos:end="73:76">if <condition pos:start="71:20" pos:end="71:76">(<expr pos:start="71:21" pos:end="71:75"><name pos:start="71:21" pos:end="71:46"><name pos:start="71:21" pos:end="71:21">q</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:36">coding_method</name><index pos:start="71:37" pos:end="71:39">[<expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr>]</index><index pos:start="71:40" pos:end="71:43">[<expr pos:start="71:41" pos:end="71:42"><name pos:start="71:41" pos:end="71:42">sb</name></expr>]</index><index pos:start="71:44" pos:end="71:46">[<expr pos:start="71:45" pos:end="71:45"><name pos:start="71:45" pos:end="71:45">j</name></expr>]</index></name> <operator pos:start="71:48" pos:end="71:48">&gt;</operator> <name pos:start="71:50" pos:end="71:75"><name pos:start="71:50" pos:end="71:50">q</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:65">coding_method</name><index pos:start="71:66" pos:end="71:68">[<expr pos:start="71:67" pos:end="71:67"><literal type="number" pos:start="71:67" pos:end="71:67">0</literal></expr>]</index><index pos:start="71:69" pos:end="71:72">[<expr pos:start="71:70" pos:end="71:71"><name pos:start="71:70" pos:end="71:71">sb</name></expr>]</index><index pos:start="71:73" pos:end="71:75">[<expr pos:start="71:74" pos:end="71:74"><name pos:start="71:74" pos:end="71:74">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:76"><block_content pos:start="73:21" pos:end="73:76">

                    <expr_stmt pos:start="73:21" pos:end="73:76"><expr pos:start="73:21" pos:end="73:75"><name pos:start="73:21" pos:end="73:46"><name pos:start="73:21" pos:end="73:21">q</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:36">coding_method</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">0</literal></expr>]</index><index pos:start="73:40" pos:end="73:43">[<expr pos:start="73:41" pos:end="73:42"><name pos:start="73:41" pos:end="73:42">sb</name></expr>]</index><index pos:start="73:44" pos:end="73:46">[<expr pos:start="73:45" pos:end="73:45"><name pos:start="73:45" pos:end="73:45">j</name></expr>]</index></name> <operator pos:start="73:48" pos:end="73:48">=</operator> <name pos:start="73:50" pos:end="73:75"><name pos:start="73:50" pos:end="73:50">q</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:65">coding_method</name><index pos:start="73:66" pos:end="73:68">[<expr pos:start="73:67" pos:end="73:67"><literal type="number" pos:start="73:67" pos:end="73:67">1</literal></expr>]</index><index pos:start="73:69" pos:end="73:72">[<expr pos:start="73:70" pos:end="73:71"><name pos:start="73:70" pos:end="73:71">sb</name></expr>]</index><index pos:start="73:73" pos:end="73:75">[<expr pos:start="73:74" pos:end="73:74"><name pos:start="73:74" pos:end="73:74">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



            <if_stmt pos:start="77:13" pos:end="87:13"><if pos:start="77:13" pos:end="87:13">if <condition pos:start="77:16" pos:end="79:62">(<expr pos:start="77:17" pos:end="79:61"><call pos:start="77:17" pos:end="79:61"><name pos:start="77:17" pos:end="77:39">fix_coding_method_array</name><argument_list pos:start="77:40" pos:end="79:61">(<argument pos:start="77:41" pos:end="77:42"><expr pos:start="77:41" pos:end="77:42"><name pos:start="77:41" pos:end="77:42">sb</name></expr></argument>, <argument pos:start="77:45" pos:end="77:58"><expr pos:start="77:45" pos:end="77:58"><name pos:start="77:45" pos:end="77:58"><name pos:start="77:45" pos:end="77:45">q</name><operator pos:start="77:46" pos:end="77:47">-&gt;</operator><name pos:start="77:48" pos:end="77:58">nb_channels</name></name></expr></argument>,

                                            <argument pos:start="79:45" pos:end="79:60"><expr pos:start="79:45" pos:end="79:60"><name pos:start="79:45" pos:end="79:60"><name pos:start="79:45" pos:end="79:45">q</name><operator pos:start="79:46" pos:end="79:47">-&gt;</operator><name pos:start="79:48" pos:end="79:60">coding_method</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:64" pos:end="87:13">{<block_content pos:start="81:17" pos:end="85:25">

                <expr_stmt pos:start="81:17" pos:end="81:70"><expr pos:start="81:17" pos:end="81:69"><call pos:start="81:17" pos:end="81:69"><name pos:start="81:17" pos:end="81:22">av_log</name><argument_list pos:start="81:23" pos:end="81:69">(<argument pos:start="81:24" pos:end="81:27"><expr pos:start="81:24" pos:end="81:27"><name pos:start="81:24" pos:end="81:27">NULL</name></expr></argument>, <argument pos:start="81:30" pos:end="81:41"><expr pos:start="81:30" pos:end="81:41"><name pos:start="81:30" pos:end="81:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:44" pos:end="81:68"><expr pos:start="81:44" pos:end="81:68"><literal type="string" pos:start="81:44" pos:end="81:68">"coding method invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:51"><expr pos:start="83:17" pos:end="83:50"><call pos:start="83:17" pos:end="83:50"><name pos:start="83:17" pos:end="83:43">build_sb_samples_from_noise</name><argument_list pos:start="83:44" pos:end="83:50">(<argument pos:start="83:45" pos:end="83:45"><expr pos:start="83:45" pos:end="83:45"><name pos:start="83:45" pos:end="83:45">q</name></expr></argument>, <argument pos:start="83:48" pos:end="83:49"><expr pos:start="83:48" pos:end="83:49"><name pos:start="83:48" pos:end="83:49">sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="85:17" pos:end="85:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:20">channels</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <literal type="number" pos:start="89:24" pos:end="89:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="95:9" pos:end="403:9">for <control pos:start="95:13" pos:end="95:41">(<init pos:start="95:14" pos:end="95:20"><expr pos:start="95:14" pos:end="95:19"><name pos:start="95:14" pos:end="95:15">ch</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>;</init> <condition pos:start="95:22" pos:end="95:35"><expr pos:start="95:22" pos:end="95:34"><name pos:start="95:22" pos:end="95:23">ch</name> <operator pos:start="95:25" pos:end="95:25">&lt;</operator> <name pos:start="95:27" pos:end="95:34">channels</name></expr>;</condition> <incr pos:start="95:37" pos:end="95:40"><expr pos:start="95:37" pos:end="95:40"><name pos:start="95:37" pos:end="95:38">ch</name><operator pos:start="95:39" pos:end="95:40">++</operator></expr></incr>)</control> <block pos:start="95:43" pos:end="403:9">{<block_content pos:start="97:13" pos:end="401:13">

            <expr_stmt pos:start="97:13" pos:end="97:40"><expr pos:start="97:13" pos:end="97:39"><call pos:start="97:13" pos:end="97:39"><name pos:start="97:13" pos:end="97:25">FIX_NOISE_IDX</name><argument_list pos:start="97:26" pos:end="97:39">(<argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:27">q</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:38">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:73"><expr pos:start="99:13" pos:end="99:72"><name pos:start="99:13" pos:end="99:25">zero_encoding</name> <operator pos:start="99:27" pos:end="99:27">=</operator> <ternary pos:start="99:29" pos:end="99:72"><condition pos:start="99:29" pos:end="99:54"><expr pos:start="99:29" pos:end="99:52"><operator pos:start="99:29" pos:end="99:29">(</operator><call pos:start="99:30" pos:end="99:46"><name pos:start="99:30" pos:end="99:42">get_bits_left</name><argument_list pos:start="99:43" pos:end="99:46">(<argument pos:start="99:44" pos:end="99:45"><expr pos:start="99:44" pos:end="99:45"><name pos:start="99:44" pos:end="99:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="99:48" pos:end="99:49">&gt;=</operator> <literal type="number" pos:start="99:51" pos:end="99:51">1</literal><operator pos:start="99:52" pos:end="99:52">)</operator></expr> ?</condition><then pos:start="99:56" pos:end="99:68"> <expr pos:start="99:56" pos:end="99:68"><call pos:start="99:56" pos:end="99:68"><name pos:start="99:56" pos:end="99:64">get_bits1</name><argument_list pos:start="99:65" pos:end="99:68">(<argument pos:start="99:66" pos:end="99:67"><expr pos:start="99:66" pos:end="99:67"><name pos:start="99:66" pos:end="99:67">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="99:70" pos:end="99:72">: <expr pos:start="99:72" pos:end="99:72"><literal type="number" pos:start="99:72" pos:end="99:72">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:35"><expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:28">type34_predictor</name> <operator pos:start="101:30" pos:end="101:30">=</operator> <literal type="number" pos:start="101:32" pos:end="101:34">0.0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:29"><expr pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:24">type34_first</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <literal type="number" pos:start="103:28" pos:end="103:28">1</literal></expr>;</expr_stmt>



            <for pos:start="107:13" pos:end="401:13">for <control pos:start="107:17" pos:end="107:34">(<init pos:start="107:18" pos:end="107:23"><expr pos:start="107:18" pos:end="107:22"><name pos:start="107:18" pos:end="107:18">j</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <literal type="number" pos:start="107:22" pos:end="107:22">0</literal></expr>;</init> <condition pos:start="107:25" pos:end="107:32"><expr pos:start="107:25" pos:end="107:31"><name pos:start="107:25" pos:end="107:25">j</name> <operator pos:start="107:27" pos:end="107:27">&lt;</operator> <literal type="number" pos:start="107:29" pos:end="107:31">128</literal></expr>;</condition> <incr/>)</control> <block pos:start="107:36" pos:end="401:13">{<block_content pos:start="109:17" pos:end="399:25">

                <switch pos:start="109:17" pos:end="357:17">switch <condition pos:start="109:24" pos:end="109:56">(<expr pos:start="109:25" pos:end="109:55"><name pos:start="109:25" pos:end="109:55"><name pos:start="109:25" pos:end="109:25">q</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:40">coding_method</name><index pos:start="109:41" pos:end="109:44">[<expr pos:start="109:42" pos:end="109:43"><name pos:start="109:42" pos:end="109:43">ch</name></expr>]</index><index pos:start="109:45" pos:end="109:48">[<expr pos:start="109:46" pos:end="109:47"><name pos:start="109:46" pos:end="109:47">sb</name></expr>]</index><index pos:start="109:49" pos:end="109:55">[<expr pos:start="109:50" pos:end="109:54"><name pos:start="109:50" pos:end="109:50">j</name> <operator pos:start="109:52" pos:end="109:52">/</operator> <literal type="number" pos:start="109:54" pos:end="109:54">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="109:58" pos:end="357:17">{<block_content pos:start="111:21" pos:end="355:30">

                    <case pos:start="111:21" pos:end="111:27">case <expr pos:start="111:26" pos:end="111:26"><literal type="number" pos:start="111:26" pos:end="111:26">8</literal></expr>:</case>

                        <if_stmt pos:start="113:25" pos:end="157:25"><if pos:start="113:25" pos:end="151:25">if <condition pos:start="113:28" pos:end="113:52">(<expr pos:start="113:29" pos:end="113:51"><call pos:start="113:29" pos:end="113:45"><name pos:start="113:29" pos:end="113:41">get_bits_left</name><argument_list pos:start="113:42" pos:end="113:45">(<argument pos:start="113:43" pos:end="113:44"><expr pos:start="113:43" pos:end="113:44"><name pos:start="113:43" pos:end="113:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="113:47" pos:end="113:48">&gt;=</operator> <literal type="number" pos:start="113:50" pos:end="113:51">10</literal></expr>)</condition> <block pos:start="113:54" pos:end="151:25">{<block_content pos:start="115:29" pos:end="149:89">

                            <if_stmt pos:start="115:29" pos:end="145:29"><if pos:start="115:29" pos:end="127:29">if <condition pos:start="115:32" pos:end="115:46">(<expr pos:start="115:33" pos:end="115:45"><name pos:start="115:33" pos:end="115:45">zero_encoding</name></expr>)</condition> <block pos:start="115:48" pos:end="127:29">{<block_content pos:start="117:33" pos:end="125:33">

                                <for pos:start="117:33" pos:end="125:33">for <control pos:start="117:37" pos:end="117:55">(<init pos:start="117:38" pos:end="117:43"><expr pos:start="117:38" pos:end="117:42"><name pos:start="117:38" pos:end="117:38">k</name> <operator pos:start="117:40" pos:end="117:40">=</operator> <literal type="number" pos:start="117:42" pos:end="117:42">0</literal></expr>;</init> <condition pos:start="117:45" pos:end="117:50"><expr pos:start="117:45" pos:end="117:49"><name pos:start="117:45" pos:end="117:45">k</name> <operator pos:start="117:47" pos:end="117:47">&lt;</operator> <literal type="number" pos:start="117:49" pos:end="117:49">5</literal></expr>;</condition> <incr pos:start="117:52" pos:end="117:54"><expr pos:start="117:52" pos:end="117:54"><name pos:start="117:52" pos:end="117:52">k</name><operator pos:start="117:53" pos:end="117:54">++</operator></expr></incr>)</control> <block pos:start="117:57" pos:end="125:33">{<block_content pos:start="119:37" pos:end="123:120">

                                    <if_stmt pos:start="119:37" pos:end="121:46"><if pos:start="119:37" pos:end="121:46">if <condition pos:start="119:40" pos:end="119:59">(<expr pos:start="119:41" pos:end="119:58"><operator pos:start="119:41" pos:end="119:41">(</operator><name pos:start="119:42" pos:end="119:42">j</name> <operator pos:start="119:44" pos:end="119:44">+</operator> <literal type="number" pos:start="119:46" pos:end="119:46">2</literal> <operator pos:start="119:48" pos:end="119:48">*</operator> <name pos:start="119:50" pos:end="119:50">k</name><operator pos:start="119:51" pos:end="119:51">)</operator> <operator pos:start="119:53" pos:end="119:54">&gt;=</operator> <literal type="number" pos:start="119:56" pos:end="119:58">128</literal></expr>)</condition><block type="pseudo" pos:start="121:41" pos:end="121:46"><block_content pos:start="121:41" pos:end="121:46">

                                        <break pos:start="121:41" pos:end="121:46">break;</break></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="123:37" pos:end="123:120"><expr pos:start="123:37" pos:end="123:119"><name pos:start="123:37" pos:end="123:50"><name pos:start="123:37" pos:end="123:43">samples</name><index pos:start="123:44" pos:end="123:50">[<expr pos:start="123:45" pos:end="123:49"><literal type="number" pos:start="123:45" pos:end="123:45">2</literal> <operator pos:start="123:47" pos:end="123:47">*</operator> <name pos:start="123:49" pos:end="123:49">k</name></expr>]</index></name> <operator pos:start="123:52" pos:end="123:52">=</operator> <ternary pos:start="123:54" pos:end="123:119"><condition pos:start="123:54" pos:end="123:68"><expr pos:start="123:54" pos:end="123:66"><call pos:start="123:54" pos:end="123:66"><name pos:start="123:54" pos:end="123:62">get_bits1</name><argument_list pos:start="123:63" pos:end="123:66">(<argument pos:start="123:64" pos:end="123:65"><expr pos:start="123:64" pos:end="123:65"><name pos:start="123:64" pos:end="123:65">gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="123:70" pos:end="123:115"> <expr pos:start="123:70" pos:end="123:115"><name pos:start="123:70" pos:end="123:115"><name pos:start="123:70" pos:end="123:81">dequant_1bit</name><index pos:start="123:82" pos:end="123:96">[<expr pos:start="123:83" pos:end="123:95"><name pos:start="123:83" pos:end="123:95">joined_stereo</name></expr>]</index><index pos:start="123:97" pos:end="123:115">[<expr pos:start="123:98" pos:end="123:114"><literal type="number" pos:start="123:98" pos:end="123:98">2</literal> <operator pos:start="123:100" pos:end="123:100">*</operator> <call pos:start="123:102" pos:end="123:114"><name pos:start="123:102" pos:end="123:110">get_bits1</name><argument_list pos:start="123:111" pos:end="123:114">(<argument pos:start="123:112" pos:end="123:113"><expr pos:start="123:112" pos:end="123:113"><name pos:start="123:112" pos:end="123:113">gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else pos:start="123:117" pos:end="123:119">: <expr pos:start="123:119" pos:end="123:119"><literal type="number" pos:start="123:119" pos:end="123:119">0</literal></expr></else></ternary></expr>;</expr_stmt>

                                </block_content>}</block></for>

                            </block_content>}</block></if> <else pos:start="127:31" pos:end="145:29">else <block pos:start="127:36" pos:end="145:29">{<block_content pos:start="129:33" pos:end="143:109">

                                <expr_stmt pos:start="129:33" pos:end="129:52"><expr pos:start="129:33" pos:end="129:51"><name pos:start="129:33" pos:end="129:33">n</name> <operator pos:start="129:35" pos:end="129:35">=</operator> <call pos:start="129:37" pos:end="129:51"><name pos:start="129:37" pos:end="129:44">get_bits</name><argument_list pos:start="129:45" pos:end="129:51">(<argument pos:start="129:46" pos:end="129:47"><expr pos:start="129:46" pos:end="129:47"><name pos:start="129:46" pos:end="129:47">gb</name></expr></argument>, <argument pos:start="129:50" pos:end="129:50"><expr pos:start="129:50" pos:end="129:50"><literal type="number" pos:start="129:50" pos:end="129:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="131:33" pos:end="137:33"><if pos:start="131:33" pos:end="137:33">if <condition pos:start="131:36" pos:end="131:45">(<expr pos:start="131:37" pos:end="131:44"><name pos:start="131:37" pos:end="131:37">n</name> <operator pos:start="131:39" pos:end="131:40">&gt;=</operator> <literal type="number" pos:start="131:42" pos:end="131:44">243</literal></expr>)</condition> <block pos:start="131:47" pos:end="137:33">{<block_content pos:start="133:37" pos:end="135:63">

                                    <expr_stmt pos:start="133:37" pos:end="133:90"><expr pos:start="133:37" pos:end="133:89"><call pos:start="133:37" pos:end="133:89"><name pos:start="133:37" pos:end="133:42">av_log</name><argument_list pos:start="133:43" pos:end="133:89">(<argument pos:start="133:44" pos:end="133:47"><expr pos:start="133:44" pos:end="133:47"><name pos:start="133:44" pos:end="133:47">NULL</name></expr></argument>, <argument pos:start="133:50" pos:end="133:61"><expr pos:start="133:50" pos:end="133:61"><name pos:start="133:50" pos:end="133:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:64" pos:end="133:88"><expr pos:start="133:64" pos:end="133:88"><literal type="string" pos:start="133:64" pos:end="133:88">"Invalid 8bit codeword\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="135:37" pos:end="135:63">return <expr pos:start="135:44" pos:end="135:62"><name pos:start="135:44" pos:end="135:62">AVERROR_INVALIDDATA</name></expr>;</return>

                                </block_content>}</block></if></if_stmt>



                                <for pos:start="141:33" pos:end="143:109">for <control pos:start="141:37" pos:end="141:55">(<init pos:start="141:38" pos:end="141:43"><expr pos:start="141:38" pos:end="141:42"><name pos:start="141:38" pos:end="141:38">k</name> <operator pos:start="141:40" pos:end="141:40">=</operator> <literal type="number" pos:start="141:42" pos:end="141:42">0</literal></expr>;</init> <condition pos:start="141:45" pos:end="141:50"><expr pos:start="141:45" pos:end="141:49"><name pos:start="141:45" pos:end="141:45">k</name> <operator pos:start="141:47" pos:end="141:47">&lt;</operator> <literal type="number" pos:start="141:49" pos:end="141:49">5</literal></expr>;</condition> <incr pos:start="141:52" pos:end="141:54"><expr pos:start="141:52" pos:end="141:54"><name pos:start="141:52" pos:end="141:52">k</name><operator pos:start="141:53" pos:end="141:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="143:37" pos:end="143:109"><block_content pos:start="143:37" pos:end="143:109">

                                    <expr_stmt pos:start="143:37" pos:end="143:109"><expr pos:start="143:37" pos:end="143:108"><name pos:start="143:37" pos:end="143:50"><name pos:start="143:37" pos:end="143:43">samples</name><index pos:start="143:44" pos:end="143:50">[<expr pos:start="143:45" pos:end="143:49"><literal type="number" pos:start="143:45" pos:end="143:45">2</literal> <operator pos:start="143:47" pos:end="143:47">*</operator> <name pos:start="143:49" pos:end="143:49">k</name></expr>]</index></name> <operator pos:start="143:52" pos:end="143:52">=</operator> <name pos:start="143:54" pos:end="143:108"><name pos:start="143:54" pos:end="143:65">dequant_1bit</name><index pos:start="143:66" pos:end="143:80">[<expr pos:start="143:67" pos:end="143:79"><name pos:start="143:67" pos:end="143:79">joined_stereo</name></expr>]</index><index pos:start="143:81" pos:end="143:108">[<expr pos:start="143:82" pos:end="143:107"><name pos:start="143:82" pos:end="143:107"><name pos:start="143:82" pos:end="143:101">random_dequant_index</name><index pos:start="143:102" pos:end="143:104">[<expr pos:start="143:103" pos:end="143:103"><name pos:start="143:103" pos:end="143:103">n</name></expr>]</index><index pos:start="143:105" pos:end="143:107">[<expr pos:start="143:106" pos:end="143:106"><name pos:start="143:106" pos:end="143:106">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                            <for pos:start="147:29" pos:end="149:89">for <control pos:start="147:33" pos:end="147:51">(<init pos:start="147:34" pos:end="147:39"><expr pos:start="147:34" pos:end="147:38"><name pos:start="147:34" pos:end="147:34">k</name> <operator pos:start="147:36" pos:end="147:36">=</operator> <literal type="number" pos:start="147:38" pos:end="147:38">0</literal></expr>;</init> <condition pos:start="147:41" pos:end="147:46"><expr pos:start="147:41" pos:end="147:45"><name pos:start="147:41" pos:end="147:41">k</name> <operator pos:start="147:43" pos:end="147:43">&lt;</operator> <literal type="number" pos:start="147:45" pos:end="147:45">5</literal></expr>;</condition> <incr pos:start="147:48" pos:end="147:50"><expr pos:start="147:48" pos:end="147:50"><name pos:start="147:48" pos:end="147:48">k</name><operator pos:start="147:49" pos:end="147:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="149:33" pos:end="149:89"><block_content pos:start="149:33" pos:end="149:89">

                                <expr_stmt pos:start="149:33" pos:end="149:89"><expr pos:start="149:33" pos:end="149:88"><name pos:start="149:33" pos:end="149:50"><name pos:start="149:33" pos:end="149:39">samples</name><index pos:start="149:40" pos:end="149:50">[<expr pos:start="149:41" pos:end="149:49"><literal type="number" pos:start="149:41" pos:end="149:41">2</literal> <operator pos:start="149:43" pos:end="149:43">*</operator> <name pos:start="149:45" pos:end="149:45">k</name> <operator pos:start="149:47" pos:end="149:47">+</operator> <literal type="number" pos:start="149:49" pos:end="149:49">1</literal></expr>]</index></name> <operator pos:start="149:52" pos:end="149:52">=</operator> <call pos:start="149:54" pos:end="149:88"><name pos:start="149:54" pos:end="149:71">SB_DITHERING_NOISE</name><argument_list pos:start="149:72" pos:end="149:88">(<argument pos:start="149:73" pos:end="149:74"><expr pos:start="149:73" pos:end="149:74"><name pos:start="149:73" pos:end="149:74">sb</name></expr></argument>,<argument pos:start="149:76" pos:end="149:87"><expr pos:start="149:76" pos:end="149:87"><name pos:start="149:76" pos:end="149:87"><name pos:start="149:76" pos:end="149:76">q</name><operator pos:start="149:77" pos:end="149:78">-&gt;</operator><name pos:start="149:79" pos:end="149:87">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="151:27" pos:end="157:25">else <block pos:start="151:32" pos:end="157:25">{<block_content pos:start="153:29" pos:end="155:81">

                            <for pos:start="153:29" pos:end="155:81">for <control pos:start="153:33" pos:end="153:52">(<init pos:start="153:34" pos:end="153:39"><expr pos:start="153:34" pos:end="153:38"><name pos:start="153:34" pos:end="153:34">k</name> <operator pos:start="153:36" pos:end="153:36">=</operator> <literal type="number" pos:start="153:38" pos:end="153:38">0</literal></expr>;</init> <condition pos:start="153:41" pos:end="153:47"><expr pos:start="153:41" pos:end="153:46"><name pos:start="153:41" pos:end="153:41">k</name> <operator pos:start="153:43" pos:end="153:43">&lt;</operator> <literal type="number" pos:start="153:45" pos:end="153:46">10</literal></expr>;</condition> <incr pos:start="153:49" pos:end="153:51"><expr pos:start="153:49" pos:end="153:51"><name pos:start="153:49" pos:end="153:49">k</name><operator pos:start="153:50" pos:end="153:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="155:33" pos:end="155:81"><block_content pos:start="155:33" pos:end="155:81">

                                <expr_stmt pos:start="155:33" pos:end="155:81"><expr pos:start="155:33" pos:end="155:80"><name pos:start="155:33" pos:end="155:42"><name pos:start="155:33" pos:end="155:39">samples</name><index pos:start="155:40" pos:end="155:42">[<expr pos:start="155:41" pos:end="155:41"><name pos:start="155:41" pos:end="155:41">k</name></expr>]</index></name> <operator pos:start="155:44" pos:end="155:44">=</operator> <call pos:start="155:46" pos:end="155:80"><name pos:start="155:46" pos:end="155:63">SB_DITHERING_NOISE</name><argument_list pos:start="155:64" pos:end="155:80">(<argument pos:start="155:65" pos:end="155:66"><expr pos:start="155:65" pos:end="155:66"><name pos:start="155:65" pos:end="155:66">sb</name></expr></argument>,<argument pos:start="155:68" pos:end="155:79"><expr pos:start="155:68" pos:end="155:79"><name pos:start="155:68" pos:end="155:79"><name pos:start="155:68" pos:end="155:68">q</name><operator pos:start="155:69" pos:end="155:70">-&gt;</operator><name pos:start="155:71" pos:end="155:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="159:25" pos:end="159:33"><expr pos:start="159:25" pos:end="159:32"><name pos:start="159:25" pos:end="159:27">run</name> <operator pos:start="159:29" pos:end="159:29">=</operator> <literal type="number" pos:start="159:31" pos:end="159:32">10</literal></expr>;</expr_stmt>

                        <break pos:start="161:25" pos:end="161:30">break;</break>



                    <case pos:start="165:21" pos:end="165:28">case <expr pos:start="165:26" pos:end="165:27"><literal type="number" pos:start="165:26" pos:end="165:27">10</literal></expr>:</case>

                        <if_stmt pos:start="167:25" pos:end="185:25"><if pos:start="167:25" pos:end="181:25">if <condition pos:start="167:28" pos:end="167:51">(<expr pos:start="167:29" pos:end="167:50"><call pos:start="167:29" pos:end="167:45"><name pos:start="167:29" pos:end="167:41">get_bits_left</name><argument_list pos:start="167:42" pos:end="167:45">(<argument pos:start="167:43" pos:end="167:44"><expr pos:start="167:43" pos:end="167:44"><name pos:start="167:43" pos:end="167:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="167:47" pos:end="167:48">&gt;=</operator> <literal type="number" pos:start="167:50" pos:end="167:50">1</literal></expr>)</condition> <block pos:start="167:53" pos:end="181:25">{<block_content pos:start="169:29" pos:end="179:43">

                            <decl_stmt pos:start="169:29" pos:end="169:43"><decl pos:start="169:29" pos:end="169:42"><type pos:start="169:29" pos:end="169:33"><name pos:start="169:29" pos:end="169:33">float</name></type> <name pos:start="169:35" pos:end="169:35">f</name> <init pos:start="169:37" pos:end="169:42">= <expr pos:start="169:39" pos:end="169:42"><literal type="number" pos:start="169:39" pos:end="169:42">0.81</literal></expr></init></decl>;</decl_stmt>



                            <if_stmt pos:start="173:29" pos:end="175:39"><if pos:start="173:29" pos:end="175:39">if <condition pos:start="173:32" pos:end="173:46">(<expr pos:start="173:33" pos:end="173:45"><call pos:start="173:33" pos:end="173:45"><name pos:start="173:33" pos:end="173:41">get_bits1</name><argument_list pos:start="173:42" pos:end="173:45">(<argument pos:start="173:43" pos:end="173:44"><expr pos:start="173:43" pos:end="173:44"><name pos:start="173:43" pos:end="173:44">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="175:33" pos:end="175:39"><block_content pos:start="175:33" pos:end="175:39">

                                <expr_stmt pos:start="175:33" pos:end="175:39"><expr pos:start="175:33" pos:end="175:38"><name pos:start="175:33" pos:end="175:33">f</name> <operator pos:start="175:35" pos:end="175:35">=</operator> <operator pos:start="175:37" pos:end="175:37">-</operator><name pos:start="175:38" pos:end="175:38">f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="177:29" pos:end="177:96"><expr pos:start="177:29" pos:end="177:95"><name pos:start="177:29" pos:end="177:29">f</name> <operator pos:start="177:31" pos:end="177:32">-=</operator> <name pos:start="177:34" pos:end="177:82"><name pos:start="177:34" pos:end="177:46">noise_samples</name><index pos:start="177:47" pos:end="177:82">[<expr pos:start="177:48" pos:end="177:81"><operator pos:start="177:48" pos:end="177:48">(</operator><operator pos:start="177:49" pos:end="177:49">(</operator><name pos:start="177:50" pos:end="177:51">sb</name> <operator pos:start="177:53" pos:end="177:53">+</operator> <literal type="number" pos:start="177:55" pos:end="177:55">1</literal><operator pos:start="177:56" pos:end="177:56">)</operator> <operator pos:start="177:58" pos:end="177:58">*</operator> <operator pos:start="177:60" pos:end="177:60">(</operator><name pos:start="177:61" pos:end="177:61">j</name> <operator pos:start="177:63" pos:end="177:63">+</operator><literal type="number" pos:start="177:64" pos:end="177:64">5</literal> <operator pos:start="177:66" pos:end="177:66">*</operator> <name pos:start="177:68" pos:end="177:69">ch</name> <operator pos:start="177:71" pos:end="177:71">+</operator> <literal type="number" pos:start="177:73" pos:end="177:73">1</literal><operator pos:start="177:74" pos:end="177:74">)</operator><operator pos:start="177:75" pos:end="177:75">)</operator> <operator pos:start="177:77" pos:end="177:77">&amp;</operator> <literal type="number" pos:start="177:79" pos:end="177:81">127</literal></expr>]</index></name> <operator pos:start="177:84" pos:end="177:84">*</operator> <literal type="number" pos:start="177:86" pos:end="177:88">9.0</literal> <operator pos:start="177:90" pos:end="177:90">/</operator> <literal type="number" pos:start="177:92" pos:end="177:95">40.0</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="179:29" pos:end="179:43"><expr pos:start="179:29" pos:end="179:42"><name pos:start="179:29" pos:end="179:38"><name pos:start="179:29" pos:end="179:35">samples</name><index pos:start="179:36" pos:end="179:38">[<expr pos:start="179:37" pos:end="179:37"><literal type="number" pos:start="179:37" pos:end="179:37">0</literal></expr>]</index></name> <operator pos:start="179:40" pos:end="179:40">=</operator> <name pos:start="179:42" pos:end="179:42">f</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="181:27" pos:end="185:25">else <block pos:start="181:32" pos:end="185:25">{<block_content pos:start="183:29" pos:end="183:77">

                            <expr_stmt pos:start="183:29" pos:end="183:77"><expr pos:start="183:29" pos:end="183:76"><name pos:start="183:29" pos:end="183:38"><name pos:start="183:29" pos:end="183:35">samples</name><index pos:start="183:36" pos:end="183:38">[<expr pos:start="183:37" pos:end="183:37"><literal type="number" pos:start="183:37" pos:end="183:37">0</literal></expr>]</index></name> <operator pos:start="183:40" pos:end="183:40">=</operator> <call pos:start="183:42" pos:end="183:76"><name pos:start="183:42" pos:end="183:59">SB_DITHERING_NOISE</name><argument_list pos:start="183:60" pos:end="183:76">(<argument pos:start="183:61" pos:end="183:62"><expr pos:start="183:61" pos:end="183:62"><name pos:start="183:61" pos:end="183:62">sb</name></expr></argument>,<argument pos:start="183:64" pos:end="183:75"><expr pos:start="183:64" pos:end="183:75"><name pos:start="183:64" pos:end="183:75"><name pos:start="183:64" pos:end="183:64">q</name><operator pos:start="183:65" pos:end="183:66">-&gt;</operator><name pos:start="183:67" pos:end="183:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="187:25" pos:end="187:32"><expr pos:start="187:25" pos:end="187:31"><name pos:start="187:25" pos:end="187:27">run</name> <operator pos:start="187:29" pos:end="187:29">=</operator> <literal type="number" pos:start="187:31" pos:end="187:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="189:25" pos:end="189:30">break;</break>



                    <case pos:start="193:21" pos:end="193:28">case <expr pos:start="193:26" pos:end="193:27"><literal type="number" pos:start="193:26" pos:end="193:27">16</literal></expr>:</case>

                        <if_stmt pos:start="195:25" pos:end="235:25"><if pos:start="195:25" pos:end="229:25">if <condition pos:start="195:28" pos:end="195:52">(<expr pos:start="195:29" pos:end="195:51"><call pos:start="195:29" pos:end="195:45"><name pos:start="195:29" pos:end="195:41">get_bits_left</name><argument_list pos:start="195:42" pos:end="195:45">(<argument pos:start="195:43" pos:end="195:44"><expr pos:start="195:43" pos:end="195:44"><name pos:start="195:43" pos:end="195:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="195:47" pos:end="195:48">&gt;=</operator> <literal type="number" pos:start="195:50" pos:end="195:51">10</literal></expr>)</condition> <block pos:start="195:54" pos:end="229:25">{<block_content pos:start="197:29" pos:end="227:29">

                            <if_stmt pos:start="197:29" pos:end="227:29"><if pos:start="197:29" pos:end="209:29">if <condition pos:start="197:32" pos:end="197:46">(<expr pos:start="197:33" pos:end="197:45"><name pos:start="197:33" pos:end="197:45">zero_encoding</name></expr>)</condition> <block pos:start="197:48" pos:end="209:29">{<block_content pos:start="199:33" pos:end="207:33">

                                <for pos:start="199:33" pos:end="207:33">for <control pos:start="199:37" pos:end="199:55">(<init pos:start="199:38" pos:end="199:43"><expr pos:start="199:38" pos:end="199:42"><name pos:start="199:38" pos:end="199:38">k</name> <operator pos:start="199:40" pos:end="199:40">=</operator> <literal type="number" pos:start="199:42" pos:end="199:42">0</literal></expr>;</init> <condition pos:start="199:45" pos:end="199:50"><expr pos:start="199:45" pos:end="199:49"><name pos:start="199:45" pos:end="199:45">k</name> <operator pos:start="199:47" pos:end="199:47">&lt;</operator> <literal type="number" pos:start="199:49" pos:end="199:49">5</literal></expr>;</condition> <incr pos:start="199:52" pos:end="199:54"><expr pos:start="199:52" pos:end="199:54"><name pos:start="199:52" pos:end="199:52">k</name><operator pos:start="199:53" pos:end="199:54">++</operator></expr></incr>)</control> <block pos:start="199:57" pos:end="207:33">{<block_content pos:start="201:37" pos:end="205:123">

                                    <if_stmt pos:start="201:37" pos:end="203:46"><if pos:start="201:37" pos:end="203:46">if <condition pos:start="201:40" pos:end="201:55">(<expr pos:start="201:41" pos:end="201:54"><operator pos:start="201:41" pos:end="201:41">(</operator><name pos:start="201:42" pos:end="201:42">j</name> <operator pos:start="201:44" pos:end="201:44">+</operator> <name pos:start="201:46" pos:end="201:46">k</name><operator pos:start="201:47" pos:end="201:47">)</operator> <operator pos:start="201:49" pos:end="201:50">&gt;=</operator> <literal type="number" pos:start="201:52" pos:end="201:54">128</literal></expr>)</condition><block type="pseudo" pos:start="203:41" pos:end="203:46"><block_content pos:start="203:41" pos:end="203:46">

                                        <break pos:start="203:41" pos:end="203:46">break;</break></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="205:37" pos:end="205:123"><expr pos:start="205:37" pos:end="205:122"><name pos:start="205:37" pos:end="205:46"><name pos:start="205:37" pos:end="205:43">samples</name><index pos:start="205:44" pos:end="205:46">[<expr pos:start="205:45" pos:end="205:45"><name pos:start="205:45" pos:end="205:45">k</name></expr>]</index></name> <operator pos:start="205:48" pos:end="205:48">=</operator> <ternary pos:start="205:50" pos:end="205:122"><condition pos:start="205:50" pos:end="205:71"><expr pos:start="205:50" pos:end="205:69"><operator pos:start="205:50" pos:end="205:50">(</operator><call pos:start="205:51" pos:end="205:63"><name pos:start="205:51" pos:end="205:59">get_bits1</name><argument_list pos:start="205:60" pos:end="205:63">(<argument pos:start="205:61" pos:end="205:62"><expr pos:start="205:61" pos:end="205:62"><name pos:start="205:61" pos:end="205:62">gb</name></expr></argument>)</argument_list></call> <operator pos:start="205:65" pos:end="205:66">==</operator> <literal type="number" pos:start="205:68" pos:end="205:68">0</literal><operator pos:start="205:69" pos:end="205:69">)</operator></expr> ?</condition><then pos:start="205:73" pos:end="205:73"> <expr pos:start="205:73" pos:end="205:73"><literal type="number" pos:start="205:73" pos:end="205:73">0</literal></expr> </then><else pos:start="205:75" pos:end="205:122">: <expr pos:start="205:77" pos:end="205:122"><name pos:start="205:77" pos:end="205:122"><name pos:start="205:77" pos:end="205:88">dequant_1bit</name><index pos:start="205:89" pos:end="205:103">[<expr pos:start="205:90" pos:end="205:102"><name pos:start="205:90" pos:end="205:102">joined_stereo</name></expr>]</index><index pos:start="205:104" pos:end="205:122">[<expr pos:start="205:105" pos:end="205:121"><literal type="number" pos:start="205:105" pos:end="205:105">2</literal> <operator pos:start="205:107" pos:end="205:107">*</operator> <call pos:start="205:109" pos:end="205:121"><name pos:start="205:109" pos:end="205:117">get_bits1</name><argument_list pos:start="205:118" pos:end="205:121">(<argument pos:start="205:119" pos:end="205:120"><expr pos:start="205:119" pos:end="205:120"><name pos:start="205:119" pos:end="205:120">gb</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

                                </block_content>}</block></for>

                            </block_content>}</block></if> <else pos:start="209:31" pos:end="227:29">else <block pos:start="209:36" pos:end="227:29">{<block_content pos:start="211:33" pos:end="225:105">

                                <expr_stmt pos:start="211:33" pos:end="211:53"><expr pos:start="211:33" pos:end="211:52"><name pos:start="211:33" pos:end="211:33">n</name> <operator pos:start="211:35" pos:end="211:35">=</operator> <call pos:start="211:37" pos:end="211:52"><name pos:start="211:37" pos:end="211:44">get_bits</name> <argument_list pos:start="211:46" pos:end="211:52">(<argument pos:start="211:47" pos:end="211:48"><expr pos:start="211:47" pos:end="211:48"><name pos:start="211:47" pos:end="211:48">gb</name></expr></argument>, <argument pos:start="211:51" pos:end="211:51"><expr pos:start="211:51" pos:end="211:51"><literal type="number" pos:start="211:51" pos:end="211:51">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="213:33" pos:end="219:33"><if pos:start="213:33" pos:end="219:33">if <condition pos:start="213:36" pos:end="213:45">(<expr pos:start="213:37" pos:end="213:44"><name pos:start="213:37" pos:end="213:37">n</name> <operator pos:start="213:39" pos:end="213:40">&gt;=</operator> <literal type="number" pos:start="213:42" pos:end="213:44">243</literal></expr>)</condition> <block pos:start="213:47" pos:end="219:33">{<block_content pos:start="215:37" pos:end="217:63">

                                    <expr_stmt pos:start="215:37" pos:end="215:90"><expr pos:start="215:37" pos:end="215:89"><call pos:start="215:37" pos:end="215:89"><name pos:start="215:37" pos:end="215:42">av_log</name><argument_list pos:start="215:43" pos:end="215:89">(<argument pos:start="215:44" pos:end="215:47"><expr pos:start="215:44" pos:end="215:47"><name pos:start="215:44" pos:end="215:47">NULL</name></expr></argument>, <argument pos:start="215:50" pos:end="215:61"><expr pos:start="215:50" pos:end="215:61"><name pos:start="215:50" pos:end="215:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:64" pos:end="215:88"><expr pos:start="215:64" pos:end="215:88"><literal type="string" pos:start="215:64" pos:end="215:88">"Invalid 8bit codeword\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="217:37" pos:end="217:63">return <expr pos:start="217:44" pos:end="217:62"><name pos:start="217:44" pos:end="217:62">AVERROR_INVALIDDATA</name></expr>;</return>

                                </block_content>}</block></if></if_stmt>



                                <for pos:start="223:33" pos:end="225:105">for <control pos:start="223:37" pos:end="223:55">(<init pos:start="223:38" pos:end="223:43"><expr pos:start="223:38" pos:end="223:42"><name pos:start="223:38" pos:end="223:38">k</name> <operator pos:start="223:40" pos:end="223:40">=</operator> <literal type="number" pos:start="223:42" pos:end="223:42">0</literal></expr>;</init> <condition pos:start="223:45" pos:end="223:50"><expr pos:start="223:45" pos:end="223:49"><name pos:start="223:45" pos:end="223:45">k</name> <operator pos:start="223:47" pos:end="223:47">&lt;</operator> <literal type="number" pos:start="223:49" pos:end="223:49">5</literal></expr>;</condition> <incr pos:start="223:52" pos:end="223:54"><expr pos:start="223:52" pos:end="223:54"><name pos:start="223:52" pos:end="223:52">k</name><operator pos:start="223:53" pos:end="223:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="225:37" pos:end="225:105"><block_content pos:start="225:37" pos:end="225:105">

                                    <expr_stmt pos:start="225:37" pos:end="225:105"><expr pos:start="225:37" pos:end="225:104"><name pos:start="225:37" pos:end="225:46"><name pos:start="225:37" pos:end="225:43">samples</name><index pos:start="225:44" pos:end="225:46">[<expr pos:start="225:45" pos:end="225:45"><name pos:start="225:45" pos:end="225:45">k</name></expr>]</index></name> <operator pos:start="225:48" pos:end="225:48">=</operator> <name pos:start="225:50" pos:end="225:104"><name pos:start="225:50" pos:end="225:61">dequant_1bit</name><index pos:start="225:62" pos:end="225:76">[<expr pos:start="225:63" pos:end="225:75"><name pos:start="225:63" pos:end="225:75">joined_stereo</name></expr>]</index><index pos:start="225:77" pos:end="225:104">[<expr pos:start="225:78" pos:end="225:103"><name pos:start="225:78" pos:end="225:103"><name pos:start="225:78" pos:end="225:97">random_dequant_index</name><index pos:start="225:98" pos:end="225:100">[<expr pos:start="225:99" pos:end="225:99"><name pos:start="225:99" pos:end="225:99">n</name></expr>]</index><index pos:start="225:101" pos:end="225:103">[<expr pos:start="225:102" pos:end="225:102"><name pos:start="225:102" pos:end="225:102">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="229:27" pos:end="235:25">else <block pos:start="229:32" pos:end="235:25">{<block_content pos:start="231:29" pos:end="233:81">

                            <for pos:start="231:29" pos:end="233:81">for <control pos:start="231:33" pos:end="231:51">(<init pos:start="231:34" pos:end="231:39"><expr pos:start="231:34" pos:end="231:38"><name pos:start="231:34" pos:end="231:34">k</name> <operator pos:start="231:36" pos:end="231:36">=</operator> <literal type="number" pos:start="231:38" pos:end="231:38">0</literal></expr>;</init> <condition pos:start="231:41" pos:end="231:46"><expr pos:start="231:41" pos:end="231:45"><name pos:start="231:41" pos:end="231:41">k</name> <operator pos:start="231:43" pos:end="231:43">&lt;</operator> <literal type="number" pos:start="231:45" pos:end="231:45">5</literal></expr>;</condition> <incr pos:start="231:48" pos:end="231:50"><expr pos:start="231:48" pos:end="231:50"><name pos:start="231:48" pos:end="231:48">k</name><operator pos:start="231:49" pos:end="231:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="233:33" pos:end="233:81"><block_content pos:start="233:33" pos:end="233:81">

                                <expr_stmt pos:start="233:33" pos:end="233:81"><expr pos:start="233:33" pos:end="233:80"><name pos:start="233:33" pos:end="233:42"><name pos:start="233:33" pos:end="233:39">samples</name><index pos:start="233:40" pos:end="233:42">[<expr pos:start="233:41" pos:end="233:41"><name pos:start="233:41" pos:end="233:41">k</name></expr>]</index></name> <operator pos:start="233:44" pos:end="233:44">=</operator> <call pos:start="233:46" pos:end="233:80"><name pos:start="233:46" pos:end="233:63">SB_DITHERING_NOISE</name><argument_list pos:start="233:64" pos:end="233:80">(<argument pos:start="233:65" pos:end="233:66"><expr pos:start="233:65" pos:end="233:66"><name pos:start="233:65" pos:end="233:66">sb</name></expr></argument>,<argument pos:start="233:68" pos:end="233:79"><expr pos:start="233:68" pos:end="233:79"><name pos:start="233:68" pos:end="233:79"><name pos:start="233:68" pos:end="233:68">q</name><operator pos:start="233:69" pos:end="233:70">-&gt;</operator><name pos:start="233:71" pos:end="233:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="237:25" pos:end="237:32"><expr pos:start="237:25" pos:end="237:31"><name pos:start="237:25" pos:end="237:27">run</name> <operator pos:start="237:29" pos:end="237:29">=</operator> <literal type="number" pos:start="237:31" pos:end="237:31">5</literal></expr>;</expr_stmt>

                        <break pos:start="239:25" pos:end="239:30">break;</break>



                    <case pos:start="243:21" pos:end="243:28">case <expr pos:start="243:26" pos:end="243:27"><literal type="number" pos:start="243:26" pos:end="243:27">24</literal></expr>:</case>

                        <if_stmt pos:start="245:25" pos:end="269:25"><if pos:start="245:25" pos:end="263:25">if <condition pos:start="245:28" pos:end="245:51">(<expr pos:start="245:29" pos:end="245:50"><call pos:start="245:29" pos:end="245:45"><name pos:start="245:29" pos:end="245:41">get_bits_left</name><argument_list pos:start="245:42" pos:end="245:45">(<argument pos:start="245:43" pos:end="245:44"><expr pos:start="245:43" pos:end="245:44"><name pos:start="245:43" pos:end="245:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="245:47" pos:end="245:48">&gt;=</operator> <literal type="number" pos:start="245:50" pos:end="245:50">7</literal></expr>)</condition> <block pos:start="245:53" pos:end="263:25">{<block_content pos:start="247:29" pos:end="261:87">

                            <expr_stmt pos:start="247:29" pos:end="247:48"><expr pos:start="247:29" pos:end="247:47"><name pos:start="247:29" pos:end="247:29">n</name> <operator pos:start="247:31" pos:end="247:31">=</operator> <call pos:start="247:33" pos:end="247:47"><name pos:start="247:33" pos:end="247:40">get_bits</name><argument_list pos:start="247:41" pos:end="247:47">(<argument pos:start="247:42" pos:end="247:43"><expr pos:start="247:42" pos:end="247:43"><name pos:start="247:42" pos:end="247:43">gb</name></expr></argument>, <argument pos:start="247:46" pos:end="247:46"><expr pos:start="247:46" pos:end="247:46"><literal type="number" pos:start="247:46" pos:end="247:46">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="249:29" pos:end="255:29"><if pos:start="249:29" pos:end="255:29">if <condition pos:start="249:32" pos:end="249:41">(<expr pos:start="249:33" pos:end="249:40"><name pos:start="249:33" pos:end="249:33">n</name> <operator pos:start="249:35" pos:end="249:36">&gt;=</operator> <literal type="number" pos:start="249:38" pos:end="249:40">125</literal></expr>)</condition> <block pos:start="249:43" pos:end="255:29">{<block_content pos:start="251:33" pos:end="253:59">

                                <expr_stmt pos:start="251:33" pos:end="251:86"><expr pos:start="251:33" pos:end="251:85"><call pos:start="251:33" pos:end="251:85"><name pos:start="251:33" pos:end="251:38">av_log</name><argument_list pos:start="251:39" pos:end="251:85">(<argument pos:start="251:40" pos:end="251:43"><expr pos:start="251:40" pos:end="251:43"><name pos:start="251:40" pos:end="251:43">NULL</name></expr></argument>, <argument pos:start="251:46" pos:end="251:57"><expr pos:start="251:46" pos:end="251:57"><name pos:start="251:46" pos:end="251:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="251:60" pos:end="251:84"><expr pos:start="251:60" pos:end="251:84"><literal type="string" pos:start="251:60" pos:end="251:84">"Invalid 7bit codeword\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="253:33" pos:end="253:59">return <expr pos:start="253:40" pos:end="253:58"><name pos:start="253:40" pos:end="253:58">AVERROR_INVALIDDATA</name></expr>;</return>

                            </block_content>}</block></if></if_stmt>



                            <for pos:start="259:29" pos:end="261:87">for <control pos:start="259:33" pos:end="259:51">(<init pos:start="259:34" pos:end="259:39"><expr pos:start="259:34" pos:end="259:38"><name pos:start="259:34" pos:end="259:34">k</name> <operator pos:start="259:36" pos:end="259:36">=</operator> <literal type="number" pos:start="259:38" pos:end="259:38">0</literal></expr>;</init> <condition pos:start="259:41" pos:end="259:46"><expr pos:start="259:41" pos:end="259:45"><name pos:start="259:41" pos:end="259:41">k</name> <operator pos:start="259:43" pos:end="259:43">&lt;</operator> <literal type="number" pos:start="259:45" pos:end="259:45">3</literal></expr>;</condition> <incr pos:start="259:48" pos:end="259:50"><expr pos:start="259:48" pos:end="259:50"><name pos:start="259:48" pos:end="259:48">k</name><operator pos:start="259:49" pos:end="259:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="261:33" pos:end="261:87"><block_content pos:start="261:33" pos:end="261:87">

                                <expr_stmt pos:start="261:33" pos:end="261:87"><expr pos:start="261:33" pos:end="261:86"><name pos:start="261:33" pos:end="261:42"><name pos:start="261:33" pos:end="261:39">samples</name><index pos:start="261:40" pos:end="261:42">[<expr pos:start="261:41" pos:end="261:41"><name pos:start="261:41" pos:end="261:41">k</name></expr>]</index></name> <operator pos:start="261:44" pos:end="261:44">=</operator> <operator pos:start="261:46" pos:end="261:46">(</operator><name pos:start="261:47" pos:end="261:73"><name pos:start="261:47" pos:end="261:67">random_dequant_type24</name><index pos:start="261:68" pos:end="261:70">[<expr pos:start="261:69" pos:end="261:69"><name pos:start="261:69" pos:end="261:69">n</name></expr>]</index><index pos:start="261:71" pos:end="261:73">[<expr pos:start="261:72" pos:end="261:72"><name pos:start="261:72" pos:end="261:72">k</name></expr>]</index></name> <operator pos:start="261:75" pos:end="261:75">-</operator> <literal type="number" pos:start="261:77" pos:end="261:79">2.0</literal><operator pos:start="261:80" pos:end="261:80">)</operator> <operator pos:start="261:82" pos:end="261:82">*</operator> <literal type="number" pos:start="261:84" pos:end="261:86">0.5</literal></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="263:27" pos:end="269:25">else <block pos:start="263:32" pos:end="269:25">{<block_content pos:start="265:29" pos:end="267:81">

                            <for pos:start="265:29" pos:end="267:81">for <control pos:start="265:33" pos:end="265:51">(<init pos:start="265:34" pos:end="265:39"><expr pos:start="265:34" pos:end="265:38"><name pos:start="265:34" pos:end="265:34">k</name> <operator pos:start="265:36" pos:end="265:36">=</operator> <literal type="number" pos:start="265:38" pos:end="265:38">0</literal></expr>;</init> <condition pos:start="265:41" pos:end="265:46"><expr pos:start="265:41" pos:end="265:45"><name pos:start="265:41" pos:end="265:41">k</name> <operator pos:start="265:43" pos:end="265:43">&lt;</operator> <literal type="number" pos:start="265:45" pos:end="265:45">3</literal></expr>;</condition> <incr pos:start="265:48" pos:end="265:50"><expr pos:start="265:48" pos:end="265:50"><name pos:start="265:48" pos:end="265:48">k</name><operator pos:start="265:49" pos:end="265:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="267:33" pos:end="267:81"><block_content pos:start="267:33" pos:end="267:81">

                                <expr_stmt pos:start="267:33" pos:end="267:81"><expr pos:start="267:33" pos:end="267:80"><name pos:start="267:33" pos:end="267:42"><name pos:start="267:33" pos:end="267:39">samples</name><index pos:start="267:40" pos:end="267:42">[<expr pos:start="267:41" pos:end="267:41"><name pos:start="267:41" pos:end="267:41">k</name></expr>]</index></name> <operator pos:start="267:44" pos:end="267:44">=</operator> <call pos:start="267:46" pos:end="267:80"><name pos:start="267:46" pos:end="267:63">SB_DITHERING_NOISE</name><argument_list pos:start="267:64" pos:end="267:80">(<argument pos:start="267:65" pos:end="267:66"><expr pos:start="267:65" pos:end="267:66"><name pos:start="267:65" pos:end="267:66">sb</name></expr></argument>,<argument pos:start="267:68" pos:end="267:79"><expr pos:start="267:68" pos:end="267:79"><name pos:start="267:68" pos:end="267:79"><name pos:start="267:68" pos:end="267:68">q</name><operator pos:start="267:69" pos:end="267:70">-&gt;</operator><name pos:start="267:71" pos:end="267:79">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="271:25" pos:end="271:32"><expr pos:start="271:25" pos:end="271:31"><name pos:start="271:25" pos:end="271:27">run</name> <operator pos:start="271:29" pos:end="271:29">=</operator> <literal type="number" pos:start="271:31" pos:end="271:31">3</literal></expr>;</expr_stmt>

                        <break pos:start="273:25" pos:end="273:30">break;</break>



                    <case pos:start="277:21" pos:end="277:28">case <expr pos:start="277:26" pos:end="277:27"><literal type="number" pos:start="277:26" pos:end="277:27">30</literal></expr>:</case>

                        <if_stmt pos:start="279:25" pos:end="295:77"><if pos:start="279:25" pos:end="293:25">if <condition pos:start="279:28" pos:end="279:51">(<expr pos:start="279:29" pos:end="279:50"><call pos:start="279:29" pos:end="279:45"><name pos:start="279:29" pos:end="279:41">get_bits_left</name><argument_list pos:start="279:42" pos:end="279:45">(<argument pos:start="279:43" pos:end="279:44"><expr pos:start="279:43" pos:end="279:44"><name pos:start="279:43" pos:end="279:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="279:47" pos:end="279:48">&gt;=</operator> <literal type="number" pos:start="279:50" pos:end="279:50">4</literal></expr>)</condition> <block pos:start="279:53" pos:end="293:25">{<block_content pos:start="281:29" pos:end="291:63">

                            <decl_stmt pos:start="281:29" pos:end="281:85"><decl pos:start="281:29" pos:end="281:84"><type pos:start="281:29" pos:end="281:36"><name pos:start="281:29" pos:end="281:36">unsigned</name></type> <name pos:start="281:38" pos:end="281:42">index</name> <init pos:start="281:44" pos:end="281:84">= <expr pos:start="281:46" pos:end="281:84"><call pos:start="281:46" pos:end="281:84"><name pos:start="281:46" pos:end="281:57">qdm2_get_vlc</name><argument_list pos:start="281:58" pos:end="281:84">(<argument pos:start="281:59" pos:end="281:60"><expr pos:start="281:59" pos:end="281:60"><name pos:start="281:59" pos:end="281:60">gb</name></expr></argument>, <argument pos:start="281:63" pos:end="281:77"><expr pos:start="281:63" pos:end="281:77"><operator pos:start="281:63" pos:end="281:63">&amp;</operator><name pos:start="281:64" pos:end="281:77">vlc_tab_type30</name></expr></argument>, <argument pos:start="281:80" pos:end="281:80"><expr pos:start="281:80" pos:end="281:80"><literal type="number" pos:start="281:80" pos:end="281:80">0</literal></expr></argument>, <argument pos:start="281:83" pos:end="281:83"><expr pos:start="281:83" pos:end="281:83"><literal type="number" pos:start="281:83" pos:end="281:83">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="283:29" pos:end="289:29"><if pos:start="283:29" pos:end="289:29">if <condition pos:start="283:32" pos:end="283:72">(<expr pos:start="283:33" pos:end="283:71"><name pos:start="283:33" pos:end="283:37">index</name> <operator pos:start="283:39" pos:end="283:40">&gt;=</operator> <call pos:start="283:42" pos:end="283:71"><name pos:start="283:42" pos:end="283:55">FF_ARRAY_ELEMS</name><argument_list pos:start="283:56" pos:end="283:71">(<argument pos:start="283:57" pos:end="283:70"><expr pos:start="283:57" pos:end="283:70"><name pos:start="283:57" pos:end="283:70">type30_dequant</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:74" pos:end="289:29">{<block_content pos:start="285:33" pos:end="287:59">

                                <expr_stmt pos:start="285:33" pos:end="285:108"><expr pos:start="285:33" pos:end="285:107"><call pos:start="285:33" pos:end="285:107"><name pos:start="285:33" pos:end="285:38">av_log</name><argument_list pos:start="285:39" pos:end="285:107">(<argument pos:start="285:40" pos:end="285:43"><expr pos:start="285:40" pos:end="285:43"><name pos:start="285:40" pos:end="285:43">NULL</name></expr></argument>, <argument pos:start="285:46" pos:end="285:57"><expr pos:start="285:46" pos:end="285:57"><name pos:start="285:46" pos:end="285:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="285:60" pos:end="285:99"><expr pos:start="285:60" pos:end="285:99"><literal type="string" pos:start="285:60" pos:end="285:99">"index %d out of type30_dequant array\n"</literal></expr></argument>, <argument pos:start="285:102" pos:end="285:106"><expr pos:start="285:102" pos:end="285:106"><name pos:start="285:102" pos:end="285:106">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="287:33" pos:end="287:59">return <expr pos:start="287:40" pos:end="287:58"><name pos:start="287:40" pos:end="287:58">AVERROR_INVALIDDATA</name></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="291:29" pos:end="291:63"><expr pos:start="291:29" pos:end="291:62"><name pos:start="291:29" pos:end="291:38"><name pos:start="291:29" pos:end="291:35">samples</name><index pos:start="291:36" pos:end="291:38">[<expr pos:start="291:37" pos:end="291:37"><literal type="number" pos:start="291:37" pos:end="291:37">0</literal></expr>]</index></name> <operator pos:start="291:40" pos:end="291:40">=</operator> <name pos:start="291:42" pos:end="291:62"><name pos:start="291:42" pos:end="291:55">type30_dequant</name><index pos:start="291:56" pos:end="291:62">[<expr pos:start="291:57" pos:end="291:61"><name pos:start="291:57" pos:end="291:61">index</name></expr>]</index></name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="293:27" pos:end="295:77">else<block type="pseudo" pos:start="295:29" pos:end="295:77"><block_content pos:start="295:29" pos:end="295:77">

                            <expr_stmt pos:start="295:29" pos:end="295:77"><expr pos:start="295:29" pos:end="295:76"><name pos:start="295:29" pos:end="295:38"><name pos:start="295:29" pos:end="295:35">samples</name><index pos:start="295:36" pos:end="295:38">[<expr pos:start="295:37" pos:end="295:37"><literal type="number" pos:start="295:37" pos:end="295:37">0</literal></expr>]</index></name> <operator pos:start="295:40" pos:end="295:40">=</operator> <call pos:start="295:42" pos:end="295:76"><name pos:start="295:42" pos:end="295:59">SB_DITHERING_NOISE</name><argument_list pos:start="295:60" pos:end="295:76">(<argument pos:start="295:61" pos:end="295:62"><expr pos:start="295:61" pos:end="295:62"><name pos:start="295:61" pos:end="295:62">sb</name></expr></argument>,<argument pos:start="295:64" pos:end="295:75"><expr pos:start="295:64" pos:end="295:75"><name pos:start="295:64" pos:end="295:75"><name pos:start="295:64" pos:end="295:64">q</name><operator pos:start="295:65" pos:end="295:66">-&gt;</operator><name pos:start="295:67" pos:end="295:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                        <expr_stmt pos:start="299:25" pos:end="299:32"><expr pos:start="299:25" pos:end="299:31"><name pos:start="299:25" pos:end="299:27">run</name> <operator pos:start="299:29" pos:end="299:29">=</operator> <literal type="number" pos:start="299:31" pos:end="299:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="301:25" pos:end="301:30">break;</break>



                    <case pos:start="305:21" pos:end="305:28">case <expr pos:start="305:26" pos:end="305:27"><literal type="number" pos:start="305:26" pos:end="305:27">34</literal></expr>:</case>

                        <if_stmt pos:start="307:25" pos:end="341:25"><if pos:start="307:25" pos:end="337:25">if <condition pos:start="307:28" pos:end="307:51">(<expr pos:start="307:29" pos:end="307:50"><call pos:start="307:29" pos:end="307:45"><name pos:start="307:29" pos:end="307:41">get_bits_left</name><argument_list pos:start="307:42" pos:end="307:45">(<argument pos:start="307:43" pos:end="307:44"><expr pos:start="307:43" pos:end="307:44"><name pos:start="307:43" pos:end="307:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="307:47" pos:end="307:48">&gt;=</operator> <literal type="number" pos:start="307:50" pos:end="307:50">7</literal></expr>)</condition> <block pos:start="307:53" pos:end="337:25">{<block_content pos:start="309:29" pos:end="335:29">

                            <if_stmt pos:start="309:29" pos:end="335:29"><if pos:start="309:29" pos:end="319:29">if <condition pos:start="309:32" pos:end="309:45">(<expr pos:start="309:33" pos:end="309:44"><name pos:start="309:33" pos:end="309:44">type34_first</name></expr>)</condition> <block pos:start="309:47" pos:end="319:29">{<block_content pos:start="311:33" pos:end="317:49">

                                <expr_stmt pos:start="311:33" pos:end="311:75"><expr pos:start="311:33" pos:end="311:74"><name pos:start="311:33" pos:end="311:42">type34_div</name> <operator pos:start="311:44" pos:end="311:44">=</operator> <operator pos:start="311:46" pos:end="311:46">(</operator><name pos:start="311:47" pos:end="311:51">float</name><operator pos:start="311:52" pos:end="311:52">)</operator><operator pos:start="311:53" pos:end="311:53">(</operator><literal type="number" pos:start="311:54" pos:end="311:54">1</literal> <operator pos:start="311:56" pos:end="311:57">&lt;&lt;</operator> <call pos:start="311:59" pos:end="311:73"><name pos:start="311:59" pos:end="311:66">get_bits</name><argument_list pos:start="311:67" pos:end="311:73">(<argument pos:start="311:68" pos:end="311:69"><expr pos:start="311:68" pos:end="311:69"><name pos:start="311:68" pos:end="311:69">gb</name></expr></argument>, <argument pos:start="311:72" pos:end="311:72"><expr pos:start="311:72" pos:end="311:72"><literal type="number" pos:start="311:72" pos:end="311:72">2</literal></expr></argument>)</argument_list></call><operator pos:start="311:74" pos:end="311:74">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="313:33" pos:end="313:84"><expr pos:start="313:33" pos:end="313:83"><name pos:start="313:33" pos:end="313:42"><name pos:start="313:33" pos:end="313:39">samples</name><index pos:start="313:40" pos:end="313:42">[<expr pos:start="313:41" pos:end="313:41"><literal type="number" pos:start="313:41" pos:end="313:41">0</literal></expr>]</index></name> <operator pos:start="313:44" pos:end="313:44">=</operator> <operator pos:start="313:46" pos:end="313:46">(</operator><operator pos:start="313:47" pos:end="313:47">(</operator><name pos:start="313:48" pos:end="313:52">float</name><operator pos:start="313:53" pos:end="313:53">)</operator><call pos:start="313:54" pos:end="313:68"><name pos:start="313:54" pos:end="313:61">get_bits</name><argument_list pos:start="313:62" pos:end="313:68">(<argument pos:start="313:63" pos:end="313:64"><expr pos:start="313:63" pos:end="313:64"><name pos:start="313:63" pos:end="313:64">gb</name></expr></argument>, <argument pos:start="313:67" pos:end="313:67"><expr pos:start="313:67" pos:end="313:67"><literal type="number" pos:start="313:67" pos:end="313:67">5</literal></expr></argument>)</argument_list></call> <operator pos:start="313:70" pos:end="313:70">-</operator> <literal type="number" pos:start="313:72" pos:end="313:75">16.0</literal><operator pos:start="313:76" pos:end="313:76">)</operator> <operator pos:start="313:78" pos:end="313:78">/</operator> <literal type="number" pos:start="313:80" pos:end="313:83">15.0</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="315:33" pos:end="315:62"><expr pos:start="315:33" pos:end="315:61"><name pos:start="315:33" pos:end="315:48">type34_predictor</name> <operator pos:start="315:50" pos:end="315:50">=</operator> <name pos:start="315:52" pos:end="315:61"><name pos:start="315:52" pos:end="315:58">samples</name><index pos:start="315:59" pos:end="315:61">[<expr pos:start="315:60" pos:end="315:60"><literal type="number" pos:start="315:60" pos:end="315:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="317:33" pos:end="317:49"><expr pos:start="317:33" pos:end="317:48"><name pos:start="317:33" pos:end="317:44">type34_first</name> <operator pos:start="317:46" pos:end="317:46">=</operator> <literal type="number" pos:start="317:48" pos:end="317:48">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="319:31" pos:end="335:29">else <block pos:start="319:36" pos:end="335:29">{<block_content pos:start="321:33" pos:end="333:62">

                                <decl_stmt pos:start="321:33" pos:end="321:89"><decl pos:start="321:33" pos:end="321:88"><type pos:start="321:33" pos:end="321:40"><name pos:start="321:33" pos:end="321:40">unsigned</name></type> <name pos:start="321:42" pos:end="321:46">index</name> <init pos:start="321:48" pos:end="321:88">= <expr pos:start="321:50" pos:end="321:88"><call pos:start="321:50" pos:end="321:88"><name pos:start="321:50" pos:end="321:61">qdm2_get_vlc</name><argument_list pos:start="321:62" pos:end="321:88">(<argument pos:start="321:63" pos:end="321:64"><expr pos:start="321:63" pos:end="321:64"><name pos:start="321:63" pos:end="321:64">gb</name></expr></argument>, <argument pos:start="321:67" pos:end="321:81"><expr pos:start="321:67" pos:end="321:81"><operator pos:start="321:67" pos:end="321:67">&amp;</operator><name pos:start="321:68" pos:end="321:81">vlc_tab_type34</name></expr></argument>, <argument pos:start="321:84" pos:end="321:84"><expr pos:start="321:84" pos:end="321:84"><literal type="number" pos:start="321:84" pos:end="321:84">0</literal></expr></argument>, <argument pos:start="321:87" pos:end="321:87"><expr pos:start="321:87" pos:end="321:87"><literal type="number" pos:start="321:87" pos:end="321:87">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <if_stmt pos:start="323:33" pos:end="329:33"><if pos:start="323:33" pos:end="329:33">if <condition pos:start="323:36" pos:end="323:74">(<expr pos:start="323:37" pos:end="323:73"><name pos:start="323:37" pos:end="323:41">index</name> <operator pos:start="323:43" pos:end="323:44">&gt;=</operator> <call pos:start="323:46" pos:end="323:73"><name pos:start="323:46" pos:end="323:59">FF_ARRAY_ELEMS</name><argument_list pos:start="323:60" pos:end="323:73">(<argument pos:start="323:61" pos:end="323:72"><expr pos:start="323:61" pos:end="323:72"><name pos:start="323:61" pos:end="323:72">type34_delta</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="323:76" pos:end="329:33">{<block_content pos:start="325:37" pos:end="327:63">

                                    <expr_stmt pos:start="325:37" pos:end="325:110"><expr pos:start="325:37" pos:end="325:109"><call pos:start="325:37" pos:end="325:109"><name pos:start="325:37" pos:end="325:42">av_log</name><argument_list pos:start="325:43" pos:end="325:109">(<argument pos:start="325:44" pos:end="325:47"><expr pos:start="325:44" pos:end="325:47"><name pos:start="325:44" pos:end="325:47">NULL</name></expr></argument>, <argument pos:start="325:50" pos:end="325:61"><expr pos:start="325:50" pos:end="325:61"><name pos:start="325:50" pos:end="325:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="325:64" pos:end="325:101"><expr pos:start="325:64" pos:end="325:101"><literal type="string" pos:start="325:64" pos:end="325:101">"index %d out of type34_delta array\n"</literal></expr></argument>, <argument pos:start="325:104" pos:end="325:108"><expr pos:start="325:104" pos:end="325:108"><name pos:start="325:104" pos:end="325:108">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="327:37" pos:end="327:63">return <expr pos:start="327:44" pos:end="327:62"><name pos:start="327:44" pos:end="327:62">AVERROR_INVALIDDATA</name></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="331:33" pos:end="331:97"><expr pos:start="331:33" pos:end="331:96"><name pos:start="331:33" pos:end="331:42"><name pos:start="331:33" pos:end="331:39">samples</name><index pos:start="331:40" pos:end="331:42">[<expr pos:start="331:41" pos:end="331:41"><literal type="number" pos:start="331:41" pos:end="331:41">0</literal></expr>]</index></name> <operator pos:start="331:44" pos:end="331:44">=</operator> <name pos:start="331:46" pos:end="331:64"><name pos:start="331:46" pos:end="331:57">type34_delta</name><index pos:start="331:58" pos:end="331:64">[<expr pos:start="331:59" pos:end="331:63"><name pos:start="331:59" pos:end="331:63">index</name></expr>]</index></name> <operator pos:start="331:66" pos:end="331:66">/</operator> <name pos:start="331:68" pos:end="331:77">type34_div</name> <operator pos:start="331:79" pos:end="331:79">+</operator> <name pos:start="331:81" pos:end="331:96">type34_predictor</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="333:33" pos:end="333:62"><expr pos:start="333:33" pos:end="333:61"><name pos:start="333:33" pos:end="333:48">type34_predictor</name> <operator pos:start="333:50" pos:end="333:50">=</operator> <name pos:start="333:52" pos:end="333:61"><name pos:start="333:52" pos:end="333:58">samples</name><index pos:start="333:59" pos:end="333:61">[<expr pos:start="333:60" pos:end="333:60"><literal type="number" pos:start="333:60" pos:end="333:60">0</literal></expr>]</index></name></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="337:27" pos:end="341:25">else <block pos:start="337:32" pos:end="341:25">{<block_content pos:start="339:29" pos:end="339:77">

                            <expr_stmt pos:start="339:29" pos:end="339:77"><expr pos:start="339:29" pos:end="339:76"><name pos:start="339:29" pos:end="339:38"><name pos:start="339:29" pos:end="339:35">samples</name><index pos:start="339:36" pos:end="339:38">[<expr pos:start="339:37" pos:end="339:37"><literal type="number" pos:start="339:37" pos:end="339:37">0</literal></expr>]</index></name> <operator pos:start="339:40" pos:end="339:40">=</operator> <call pos:start="339:42" pos:end="339:76"><name pos:start="339:42" pos:end="339:59">SB_DITHERING_NOISE</name><argument_list pos:start="339:60" pos:end="339:76">(<argument pos:start="339:61" pos:end="339:62"><expr pos:start="339:61" pos:end="339:62"><name pos:start="339:61" pos:end="339:62">sb</name></expr></argument>,<argument pos:start="339:64" pos:end="339:75"><expr pos:start="339:64" pos:end="339:75"><name pos:start="339:64" pos:end="339:75"><name pos:start="339:64" pos:end="339:64">q</name><operator pos:start="339:65" pos:end="339:66">-&gt;</operator><name pos:start="339:67" pos:end="339:75">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="343:25" pos:end="343:32"><expr pos:start="343:25" pos:end="343:31"><name pos:start="343:25" pos:end="343:27">run</name> <operator pos:start="343:29" pos:end="343:29">=</operator> <literal type="number" pos:start="343:31" pos:end="343:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="345:25" pos:end="345:30">break;</break>



                    <default pos:start="349:21" pos:end="349:28">default:</default>

                        <expr_stmt pos:start="351:25" pos:end="351:73"><expr pos:start="351:25" pos:end="351:72"><name pos:start="351:25" pos:end="351:34"><name pos:start="351:25" pos:end="351:31">samples</name><index pos:start="351:32" pos:end="351:34">[<expr pos:start="351:33" pos:end="351:33"><literal type="number" pos:start="351:33" pos:end="351:33">0</literal></expr>]</index></name> <operator pos:start="351:36" pos:end="351:36">=</operator> <call pos:start="351:38" pos:end="351:72"><name pos:start="351:38" pos:end="351:55">SB_DITHERING_NOISE</name><argument_list pos:start="351:56" pos:end="351:72">(<argument pos:start="351:57" pos:end="351:58"><expr pos:start="351:57" pos:end="351:58"><name pos:start="351:57" pos:end="351:58">sb</name></expr></argument>,<argument pos:start="351:60" pos:end="351:71"><expr pos:start="351:60" pos:end="351:71"><name pos:start="351:60" pos:end="351:71"><name pos:start="351:60" pos:end="351:60">q</name><operator pos:start="351:61" pos:end="351:62">-&gt;</operator><name pos:start="351:63" pos:end="351:71">noise_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="353:25" pos:end="353:32"><expr pos:start="353:25" pos:end="353:31"><name pos:start="353:25" pos:end="353:27">run</name> <operator pos:start="353:29" pos:end="353:29">=</operator> <literal type="number" pos:start="353:31" pos:end="353:31">1</literal></expr>;</expr_stmt>

                        <break pos:start="355:25" pos:end="355:30">break;</break>

                </block_content>}</block></switch>



                <if_stmt pos:start="361:17" pos:end="395:17"><if pos:start="361:17" pos:end="387:17">if <condition pos:start="361:20" pos:end="361:34">(<expr pos:start="361:21" pos:end="361:33"><name pos:start="361:21" pos:end="361:33">joined_stereo</name></expr>)</condition> <block pos:start="361:36" pos:end="387:17">{<block_content pos:start="363:21" pos:end="385:21">

                    <for pos:start="363:21" pos:end="385:21">for <control pos:start="363:25" pos:end="363:60">(<init pos:start="363:26" pos:end="363:31"><expr pos:start="363:26" pos:end="363:30"><name pos:start="363:26" pos:end="363:26">k</name> <operator pos:start="363:28" pos:end="363:28">=</operator> <literal type="number" pos:start="363:30" pos:end="363:30">0</literal></expr>;</init> <condition pos:start="363:33" pos:end="363:55"><expr pos:start="363:33" pos:end="363:54"><name pos:start="363:33" pos:end="363:33">k</name> <operator pos:start="363:35" pos:end="363:35">&lt;</operator> <name pos:start="363:37" pos:end="363:39">run</name> <operator pos:start="363:41" pos:end="363:42">&amp;&amp;</operator> <name pos:start="363:44" pos:end="363:44">j</name> <operator pos:start="363:46" pos:end="363:46">+</operator> <name pos:start="363:48" pos:end="363:48">k</name> <operator pos:start="363:50" pos:end="363:50">&lt;</operator> <literal type="number" pos:start="363:52" pos:end="363:54">128</literal></expr>;</condition> <incr pos:start="363:57" pos:end="363:59"><expr pos:start="363:57" pos:end="363:59"><name pos:start="363:57" pos:end="363:57">k</name><operator pos:start="363:58" pos:end="363:59">++</operator></expr></incr>)</control> <block pos:start="363:62" pos:end="385:21">{<block_content pos:start="365:25" pos:end="383:25">

                        <expr_stmt pos:start="365:25" pos:end="367:75"><expr pos:start="365:25" pos:end="367:74"><name pos:start="365:25" pos:end="365:51"><name pos:start="365:25" pos:end="365:25">q</name><operator pos:start="365:26" pos:end="365:27">-&gt;</operator><name pos:start="365:28" pos:end="365:37">sb_samples</name><index pos:start="365:38" pos:end="365:40">[<expr pos:start="365:39" pos:end="365:39"><literal type="number" pos:start="365:39" pos:end="365:39">0</literal></expr>]</index><index pos:start="365:41" pos:end="365:47">[<expr pos:start="365:42" pos:end="365:46"><name pos:start="365:42" pos:end="365:42">j</name> <operator pos:start="365:44" pos:end="365:44">+</operator> <name pos:start="365:46" pos:end="365:46">k</name></expr>]</index><index pos:start="365:48" pos:end="365:51">[<expr pos:start="365:49" pos:end="365:50"><name pos:start="365:49" pos:end="365:50">sb</name></expr>]</index></name> <operator pos:start="365:53" pos:end="365:53">=</operator>

                            <name pos:start="367:29" pos:end="367:61"><name pos:start="367:29" pos:end="367:29">q</name><operator pos:start="367:30" pos:end="367:31">-&gt;</operator><name pos:start="367:32" pos:end="367:41">tone_level</name><index pos:start="367:42" pos:end="367:44">[<expr pos:start="367:43" pos:end="367:43"><literal type="number" pos:start="367:43" pos:end="367:43">0</literal></expr>]</index><index pos:start="367:45" pos:end="367:48">[<expr pos:start="367:46" pos:end="367:47"><name pos:start="367:46" pos:end="367:47">sb</name></expr>]</index><index pos:start="367:49" pos:end="367:61">[<expr pos:start="367:50" pos:end="367:60"><operator pos:start="367:50" pos:end="367:50">(</operator><name pos:start="367:51" pos:end="367:51">j</name> <operator pos:start="367:53" pos:end="367:53">+</operator> <name pos:start="367:55" pos:end="367:55">k</name><operator pos:start="367:56" pos:end="367:56">)</operator> <operator pos:start="367:58" pos:end="367:58">/</operator> <literal type="number" pos:start="367:60" pos:end="367:60">2</literal></expr>]</index></name> <operator pos:start="367:63" pos:end="367:63">*</operator> <name pos:start="367:65" pos:end="367:74"><name pos:start="367:65" pos:end="367:71">samples</name><index pos:start="367:72" pos:end="367:74">[<expr pos:start="367:73" pos:end="367:73"><name pos:start="367:73" pos:end="367:73">k</name></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="369:25" pos:end="383:25"><if pos:start="369:25" pos:end="383:25">if <condition pos:start="369:28" pos:end="369:48">(<expr pos:start="369:29" pos:end="369:47"><name pos:start="369:29" pos:end="369:42"><name pos:start="369:29" pos:end="369:29">q</name><operator pos:start="369:30" pos:end="369:31">-&gt;</operator><name pos:start="369:32" pos:end="369:42">nb_channels</name></name> <operator pos:start="369:44" pos:end="369:45">==</operator> <literal type="number" pos:start="369:47" pos:end="369:47">2</literal></expr>)</condition> <block pos:start="369:50" pos:end="383:25">{<block_content pos:start="371:29" pos:end="381:83">

                            <if_stmt pos:start="371:29" pos:end="381:83"><if pos:start="371:29" pos:end="375:84">if <condition pos:start="371:32" pos:end="371:55">(<expr pos:start="371:33" pos:end="371:54"><name pos:start="371:33" pos:end="371:54"><name pos:start="371:33" pos:end="371:41">sign_bits</name><index pos:start="371:42" pos:end="371:54">[<expr pos:start="371:43" pos:end="371:53"><operator pos:start="371:43" pos:end="371:43">(</operator><name pos:start="371:44" pos:end="371:44">j</name> <operator pos:start="371:46" pos:end="371:46">+</operator> <name pos:start="371:48" pos:end="371:48">k</name><operator pos:start="371:49" pos:end="371:49">)</operator> <operator pos:start="371:51" pos:end="371:51">/</operator> <literal type="number" pos:start="371:53" pos:end="371:53">8</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="373:33" pos:end="375:84"><block_content pos:start="373:33" pos:end="375:84">

                                <expr_stmt pos:start="373:33" pos:end="375:84"><expr pos:start="373:33" pos:end="375:83"><name pos:start="373:33" pos:end="373:59"><name pos:start="373:33" pos:end="373:33">q</name><operator pos:start="373:34" pos:end="373:35">-&gt;</operator><name pos:start="373:36" pos:end="373:45">sb_samples</name><index pos:start="373:46" pos:end="373:48">[<expr pos:start="373:47" pos:end="373:47"><literal type="number" pos:start="373:47" pos:end="373:47">1</literal></expr>]</index><index pos:start="373:49" pos:end="373:55">[<expr pos:start="373:50" pos:end="373:54"><name pos:start="373:50" pos:end="373:50">j</name> <operator pos:start="373:52" pos:end="373:52">+</operator> <name pos:start="373:54" pos:end="373:54">k</name></expr>]</index><index pos:start="373:56" pos:end="373:59">[<expr pos:start="373:57" pos:end="373:58"><name pos:start="373:57" pos:end="373:58">sb</name></expr>]</index></name> <operator pos:start="373:61" pos:end="373:61">=</operator>

                                    <name pos:start="375:37" pos:end="375:69"><name pos:start="375:37" pos:end="375:37">q</name><operator pos:start="375:38" pos:end="375:39">-&gt;</operator><name pos:start="375:40" pos:end="375:49">tone_level</name><index pos:start="375:50" pos:end="375:52">[<expr pos:start="375:51" pos:end="375:51"><literal type="number" pos:start="375:51" pos:end="375:51">1</literal></expr>]</index><index pos:start="375:53" pos:end="375:56">[<expr pos:start="375:54" pos:end="375:55"><name pos:start="375:54" pos:end="375:55">sb</name></expr>]</index><index pos:start="375:57" pos:end="375:69">[<expr pos:start="375:58" pos:end="375:68"><operator pos:start="375:58" pos:end="375:58">(</operator><name pos:start="375:59" pos:end="375:59">j</name> <operator pos:start="375:61" pos:end="375:61">+</operator> <name pos:start="375:63" pos:end="375:63">k</name><operator pos:start="375:64" pos:end="375:64">)</operator> <operator pos:start="375:66" pos:end="375:66">/</operator> <literal type="number" pos:start="375:68" pos:end="375:68">2</literal></expr>]</index></name> <operator pos:start="375:71" pos:end="375:71">*</operator> <operator pos:start="375:73" pos:end="375:73">-</operator><name pos:start="375:74" pos:end="375:83"><name pos:start="375:74" pos:end="375:80">samples</name><index pos:start="375:81" pos:end="375:83">[<expr pos:start="375:82" pos:end="375:82"><name pos:start="375:82" pos:end="375:82">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="377:29" pos:end="381:83">else<block type="pseudo" pos:start="379:33" pos:end="381:83"><block_content pos:start="379:33" pos:end="381:83">

                                <expr_stmt pos:start="379:33" pos:end="381:83"><expr pos:start="379:33" pos:end="381:82"><name pos:start="379:33" pos:end="379:59"><name pos:start="379:33" pos:end="379:33">q</name><operator pos:start="379:34" pos:end="379:35">-&gt;</operator><name pos:start="379:36" pos:end="379:45">sb_samples</name><index pos:start="379:46" pos:end="379:48">[<expr pos:start="379:47" pos:end="379:47"><literal type="number" pos:start="379:47" pos:end="379:47">1</literal></expr>]</index><index pos:start="379:49" pos:end="379:55">[<expr pos:start="379:50" pos:end="379:54"><name pos:start="379:50" pos:end="379:50">j</name> <operator pos:start="379:52" pos:end="379:52">+</operator> <name pos:start="379:54" pos:end="379:54">k</name></expr>]</index><index pos:start="379:56" pos:end="379:59">[<expr pos:start="379:57" pos:end="379:58"><name pos:start="379:57" pos:end="379:58">sb</name></expr>]</index></name> <operator pos:start="379:61" pos:end="379:61">=</operator>

                                    <name pos:start="381:37" pos:end="381:69"><name pos:start="381:37" pos:end="381:37">q</name><operator pos:start="381:38" pos:end="381:39">-&gt;</operator><name pos:start="381:40" pos:end="381:49">tone_level</name><index pos:start="381:50" pos:end="381:52">[<expr pos:start="381:51" pos:end="381:51"><literal type="number" pos:start="381:51" pos:end="381:51">1</literal></expr>]</index><index pos:start="381:53" pos:end="381:56">[<expr pos:start="381:54" pos:end="381:55"><name pos:start="381:54" pos:end="381:55">sb</name></expr>]</index><index pos:start="381:57" pos:end="381:69">[<expr pos:start="381:58" pos:end="381:68"><operator pos:start="381:58" pos:end="381:58">(</operator><name pos:start="381:59" pos:end="381:59">j</name> <operator pos:start="381:61" pos:end="381:61">+</operator> <name pos:start="381:63" pos:end="381:63">k</name><operator pos:start="381:64" pos:end="381:64">)</operator> <operator pos:start="381:66" pos:end="381:66">/</operator> <literal type="number" pos:start="381:68" pos:end="381:68">2</literal></expr>]</index></name> <operator pos:start="381:71" pos:end="381:71">*</operator> <name pos:start="381:73" pos:end="381:82"><name pos:start="381:73" pos:end="381:79">samples</name><index pos:start="381:80" pos:end="381:82">[<expr pos:start="381:81" pos:end="381:81"><name pos:start="381:81" pos:end="381:81">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="387:19" pos:end="395:17">else <block pos:start="387:24" pos:end="395:17">{<block_content pos:start="389:21" pos:end="393:105">

                    <for pos:start="389:21" pos:end="393:105">for <control pos:start="389:25" pos:end="389:45">(<init pos:start="389:26" pos:end="389:31"><expr pos:start="389:26" pos:end="389:30"><name pos:start="389:26" pos:end="389:26">k</name> <operator pos:start="389:28" pos:end="389:28">=</operator> <literal type="number" pos:start="389:30" pos:end="389:30">0</literal></expr>;</init> <condition pos:start="389:33" pos:end="389:40"><expr pos:start="389:33" pos:end="389:39"><name pos:start="389:33" pos:end="389:33">k</name> <operator pos:start="389:35" pos:end="389:35">&lt;</operator> <name pos:start="389:37" pos:end="389:39">run</name></expr>;</condition> <incr pos:start="389:42" pos:end="389:44"><expr pos:start="389:42" pos:end="389:44"><name pos:start="389:42" pos:end="389:42">k</name><operator pos:start="389:43" pos:end="389:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="391:25" pos:end="393:105"><block_content pos:start="391:25" pos:end="393:105">

                        <if_stmt pos:start="391:25" pos:end="393:105"><if pos:start="391:25" pos:end="393:105">if <condition pos:start="391:28" pos:end="391:42">(<expr pos:start="391:29" pos:end="391:41"><operator pos:start="391:29" pos:end="391:29">(</operator><name pos:start="391:30" pos:end="391:30">j</name> <operator pos:start="391:32" pos:end="391:32">+</operator> <name pos:start="391:34" pos:end="391:34">k</name><operator pos:start="391:35" pos:end="391:35">)</operator> <operator pos:start="391:37" pos:end="391:37">&lt;</operator> <literal type="number" pos:start="391:39" pos:end="391:41">128</literal></expr>)</condition><block type="pseudo" pos:start="393:29" pos:end="393:105"><block_content pos:start="393:29" pos:end="393:105">

                            <expr_stmt pos:start="393:29" pos:end="393:105"><expr pos:start="393:29" pos:end="393:104"><name pos:start="393:29" pos:end="393:56"><name pos:start="393:29" pos:end="393:29">q</name><operator pos:start="393:30" pos:end="393:31">-&gt;</operator><name pos:start="393:32" pos:end="393:41">sb_samples</name><index pos:start="393:42" pos:end="393:45">[<expr pos:start="393:43" pos:end="393:44"><name pos:start="393:43" pos:end="393:44">ch</name></expr>]</index><index pos:start="393:46" pos:end="393:52">[<expr pos:start="393:47" pos:end="393:51"><name pos:start="393:47" pos:end="393:47">j</name> <operator pos:start="393:49" pos:end="393:49">+</operator> <name pos:start="393:51" pos:end="393:51">k</name></expr>]</index><index pos:start="393:53" pos:end="393:56">[<expr pos:start="393:54" pos:end="393:55"><name pos:start="393:54" pos:end="393:55">sb</name></expr>]</index></name> <operator pos:start="393:58" pos:end="393:58">=</operator> <name pos:start="393:60" pos:end="393:91"><name pos:start="393:60" pos:end="393:60">q</name><operator pos:start="393:61" pos:end="393:62">-&gt;</operator><name pos:start="393:63" pos:end="393:72">tone_level</name><index pos:start="393:73" pos:end="393:76">[<expr pos:start="393:74" pos:end="393:75"><name pos:start="393:74" pos:end="393:75">ch</name></expr>]</index><index pos:start="393:77" pos:end="393:80">[<expr pos:start="393:78" pos:end="393:79"><name pos:start="393:78" pos:end="393:79">sb</name></expr>]</index><index pos:start="393:81" pos:end="393:91">[<expr pos:start="393:82" pos:end="393:90"><operator pos:start="393:82" pos:end="393:82">(</operator><name pos:start="393:83" pos:end="393:83">j</name> <operator pos:start="393:85" pos:end="393:85">+</operator> <name pos:start="393:87" pos:end="393:87">k</name><operator pos:start="393:88" pos:end="393:88">)</operator><operator pos:start="393:89" pos:end="393:89">/</operator><literal type="number" pos:start="393:90" pos:end="393:90">2</literal></expr>]</index></name> <operator pos:start="393:93" pos:end="393:93">*</operator> <name pos:start="393:95" pos:end="393:104"><name pos:start="393:95" pos:end="393:101">samples</name><index pos:start="393:102" pos:end="393:104">[<expr pos:start="393:103" pos:end="393:103"><name pos:start="393:103" pos:end="393:103">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="399:17" pos:end="399:25"><expr pos:start="399:17" pos:end="399:24"><name pos:start="399:17" pos:end="399:17">j</name> <operator pos:start="399:19" pos:end="399:20">+=</operator> <name pos:start="399:22" pos:end="399:24">run</name></expr>;</expr_stmt>

            </block_content>}</block></for> <comment type="line" pos:start="401:15" pos:end="401:23">// j loop</comment>

        </block_content>}</block></for> <comment type="line" pos:start="403:11" pos:end="403:25">// channel loop</comment>

    </block_content>}</block></for> <comment type="line" pos:start="405:7" pos:end="405:21">// subband loop</comment>

    <return pos:start="407:5" pos:end="407:13">return <expr pos:start="407:12" pos:end="407:12"><literal type="number" pos:start="407:12" pos:end="407:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
