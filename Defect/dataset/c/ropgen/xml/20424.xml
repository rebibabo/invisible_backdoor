<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20424.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">cpu_openrisc_load_kernel</name><parameter_list pos:start="1:37" pos:end="5:54">(<parameter pos:start="1:38" pos:end="1:56"><decl pos:start="1:38" pos:end="1:56"><type pos:start="1:38" pos:end="1:56"><name pos:start="1:38" pos:end="1:47">ram_addr_t</name></type> <name pos:start="1:49" pos:end="1:56">ram_size</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:64"><decl pos:start="3:38" pos:end="3:64"><type pos:start="3:38" pos:end="3:64"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:47">char</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:64">kernel_filename</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:53"><decl pos:start="5:38" pos:end="5:53"><type pos:start="5:38" pos:end="5:53"><name pos:start="5:38" pos:end="5:48">OpenRISCCPU</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:53">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="63:1">{<block_content pos:start="9:5" pos:end="61:24">

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:20">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:16">entry</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="57:5"><if pos:start="17:5" pos:end="57:5">if <condition pos:start="17:8" pos:end="17:44">(<expr pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:23">kernel_filename</name> <operator pos:start="17:25" pos:end="17:26">&amp;&amp;</operator> <operator pos:start="17:28" pos:end="17:28">!</operator><call pos:start="17:29" pos:end="17:43"><name pos:start="17:29" pos:end="17:41">qtest_enabled</name><argument_list pos:start="17:42" pos:end="17:43">()</argument_list></call></expr>)</condition> <block pos:start="17:46" pos:end="57:5">{<block_content pos:start="19:9" pos:end="55:9">

        <expr_stmt pos:start="19:9" pos:end="21:74"><expr pos:start="19:9" pos:end="21:73"><name pos:start="19:9" pos:end="19:19">kernel_size</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <call pos:start="19:23" pos:end="21:73"><name pos:start="19:23" pos:end="19:30">load_elf</name><argument_list pos:start="19:31" pos:end="21:73">(<argument pos:start="19:32" pos:end="19:46"><expr pos:start="19:32" pos:end="19:46"><name pos:start="19:32" pos:end="19:46">kernel_filename</name></expr></argument>, <argument pos:start="19:49" pos:end="19:52"><expr pos:start="19:49" pos:end="19:52"><name pos:start="19:49" pos:end="19:52">NULL</name></expr></argument>, <argument pos:start="19:55" pos:end="19:58"><expr pos:start="19:55" pos:end="19:58"><name pos:start="19:55" pos:end="19:58">NULL</name></expr></argument>,

                               <argument pos:start="21:32" pos:end="21:41"><expr pos:start="21:32" pos:end="21:41"><operator pos:start="21:32" pos:end="21:32">&amp;</operator><name pos:start="21:33" pos:end="21:41">elf_entry</name></expr></argument>, <argument pos:start="21:44" pos:end="21:47"><expr pos:start="21:44" pos:end="21:47"><name pos:start="21:44" pos:end="21:47">NULL</name></expr></argument>, <argument pos:start="21:50" pos:end="21:53"><expr pos:start="21:50" pos:end="21:53"><name pos:start="21:50" pos:end="21:53">NULL</name></expr></argument>, <argument pos:start="21:56" pos:end="21:56"><expr pos:start="21:56" pos:end="21:56"><literal type="number" pos:start="21:56" pos:end="21:56">1</literal></expr></argument>, <argument pos:start="21:59" pos:end="21:69"><expr pos:start="21:59" pos:end="21:69"><name pos:start="21:59" pos:end="21:69">ELF_MACHINE</name></expr></argument>, <argument pos:start="21:72" pos:end="21:72"><expr pos:start="21:72" pos:end="21:72"><literal type="number" pos:start="21:72" pos:end="21:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:26"><expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:13">entry</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:25">elf_entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:23">kernel_size</name> <operator pos:start="25:25" pos:end="25:25">&lt;</operator> <literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr>)</condition> <block pos:start="25:30" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:58">

            <expr_stmt pos:start="27:13" pos:end="29:58"><expr pos:start="27:13" pos:end="29:57"><name pos:start="27:13" pos:end="27:23">kernel_size</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="29:57"><name pos:start="27:27" pos:end="27:37">load_uimage</name><argument_list pos:start="27:38" pos:end="29:57">(<argument pos:start="27:39" pos:end="27:53"><expr pos:start="27:39" pos:end="27:53"><name pos:start="27:39" pos:end="27:53">kernel_filename</name></expr></argument>,

                                      <argument pos:start="29:39" pos:end="29:44"><expr pos:start="29:39" pos:end="29:44"><operator pos:start="29:39" pos:end="29:39">&amp;</operator><name pos:start="29:40" pos:end="29:44">entry</name></expr></argument>, <argument pos:start="29:47" pos:end="29:50"><expr pos:start="29:47" pos:end="29:50"><name pos:start="29:47" pos:end="29:50">NULL</name></expr></argument>, <argument pos:start="29:53" pos:end="29:56"><expr pos:start="29:53" pos:end="29:56"><name pos:start="29:53" pos:end="29:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="33:28">(<expr pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:23">kernel_size</name> <operator pos:start="33:25" pos:end="33:25">&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr>)</condition> <block pos:start="33:30" pos:end="43:9">{<block_content pos:start="35:13" pos:end="41:37">

            <expr_stmt pos:start="35:13" pos:end="39:75"><expr pos:start="35:13" pos:end="39:74"><name pos:start="35:13" pos:end="35:23">kernel_size</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <call pos:start="35:27" pos:end="39:74"><name pos:start="35:27" pos:end="35:45">load_image_targphys</name><argument_list pos:start="35:46" pos:end="39:74">(<argument pos:start="35:47" pos:end="35:61"><expr pos:start="35:47" pos:end="35:61"><name pos:start="35:47" pos:end="35:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="37:47" pos:end="37:62"><expr pos:start="37:47" pos:end="37:62"><name pos:start="37:47" pos:end="37:62">KERNEL_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="39:47" pos:end="39:73"><expr pos:start="39:47" pos:end="39:73"><name pos:start="39:47" pos:end="39:54">ram_size</name> <operator pos:start="39:56" pos:end="39:56">-</operator> <name pos:start="39:58" pos:end="39:73">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:37"><expr pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:17">entry</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:36">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:28">(<expr pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:23">kernel_size</name> <operator pos:start="47:25" pos:end="47:25">&lt;</operator> <literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr>)</condition> <block pos:start="47:30" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:20">

            <expr_stmt pos:start="49:13" pos:end="51:37"><expr pos:start="49:13" pos:end="51:36"><call pos:start="49:13" pos:end="51:36"><name pos:start="49:13" pos:end="49:19">fprintf</name><argument_list pos:start="49:20" pos:end="51:36">(<argument pos:start="49:21" pos:end="49:26"><expr pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:26">stderr</name></expr></argument>, <argument pos:start="49:29" pos:end="49:67"><expr pos:start="49:29" pos:end="49:67"><literal type="string" pos:start="49:29" pos:end="49:67">"QEMU: couldn't load the kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="51:21" pos:end="51:35"><expr pos:start="51:21" pos:end="51:35"><name pos:start="51:21" pos:end="51:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:20"><expr pos:start="53:13" pos:end="53:19"><call pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:16">exit</name><argument_list pos:start="53:17" pos:end="53:19">(<argument pos:start="53:18" pos:end="53:18"><expr pos:start="53:18" pos:end="53:18"><literal type="number" pos:start="53:18" pos:end="53:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:24"><expr pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:7">cpu</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:12">env</name><operator pos:start="61:13" pos:end="61:13">.</operator><name pos:start="61:14" pos:end="61:15">pc</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:23">entry</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
