<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2510.c" pos:tabs="8"><function pos:start="1:1" pos:end="395:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">ppce500_init</name><parameter_list pos:start="1:18" pos:end="1:40">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:33"><name pos:start="1:19" pos:end="1:31">PPCE500Params</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">params</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="395:1">{<block_content pos:start="5:5" pos:end="393:5">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:35">address_space_mem</name> <init pos:start="5:37" pos:end="5:57">= <expr pos:start="5:39" pos:end="5:57"><call pos:start="5:39" pos:end="5:57"><name pos:start="5:39" pos:end="5:55">get_system_memory</name><argument_list pos:start="5:56" pos:end="5:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">ram</name> <init pos:start="7:23" pos:end="7:46">= <expr pos:start="7:25" pos:end="7:46"><call pos:start="7:25" pos:end="7:46"><name pos:start="7:25" pos:end="7:29">g_new</name><argument_list pos:start="7:30" pos:end="7:46">(<argument pos:start="7:31" pos:end="7:42"><expr pos:start="7:31" pos:end="7:42"><name pos:start="7:31" pos:end="7:42">MemoryRegion</name></expr></argument>, <argument pos:start="7:45" pos:end="7:45"><expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">PCIBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUPPCState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:24">elf_lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:16">entry</name><init pos:start="17:17" pos:end="17:18">=<expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:19">loadaddr</name><init pos:start="19:20" pos:end="19:36">=<expr pos:start="19:21" pos:end="19:36"><name pos:start="19:21" pos:end="19:36">UIMAGE_LOAD_BASE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:15">target_long</name></type> <name pos:start="21:17" pos:end="21:27">kernel_size</name><init pos:start="21:28" pos:end="21:29">=<expr pos:start="21:29" pos:end="21:29"><literal type="number" pos:start="21:29" pos:end="21:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">target_ulong</name></type> <name pos:start="23:18" pos:end="23:24">dt_base</name> <init pos:start="23:26" pos:end="23:28">= <expr pos:start="23:28" pos:end="23:28"><literal type="number" pos:start="23:28" pos:end="23:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:28">initrd_base</name> <init pos:start="25:30" pos:end="25:32">= <expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:15">target_long</name></type> <name pos:start="27:17" pos:end="27:27">initrd_size</name><init pos:start="27:28" pos:end="27:29">=<expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name><init pos:start="29:10" pos:end="29:11">=<expr pos:start="29:11" pos:end="29:11"><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:47"><decl pos:start="31:5" pos:end="31:46"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:16">int</name></type> <name pos:start="31:18" pos:end="31:31"><name pos:start="31:18" pos:end="31:28">pci_irq_nrs</name><index pos:start="31:29" pos:end="31:31">[<expr pos:start="31:30" pos:end="31:30"><literal type="number" pos:start="31:30" pos:end="31:30">4</literal></expr>]</index></name> <init pos:start="31:33" pos:end="31:46">= <expr pos:start="31:35" pos:end="31:46"><block pos:start="31:35" pos:end="31:46">{<expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">1</literal></expr>, <expr pos:start="31:39" pos:end="31:39"><literal type="number" pos:start="31:39" pos:end="31:39">2</literal></expr>, <expr pos:start="31:42" pos:end="31:42"><literal type="number" pos:start="31:42" pos:end="31:42">3</literal></expr>, <expr pos:start="31:45" pos:end="31:45"><literal type="number" pos:start="31:45" pos:end="31:45">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:27"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier><modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:19">irqs</name></decl>, <decl pos:start="33:22" pos:end="33:26"><type ref="prev" pos:start="33:5" pos:end="33:15"><modifier pos:start="33:22" pos:end="33:22">*</modifier></type><name pos:start="33:23" pos:end="33:26">mpic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:15">DeviceState</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:33"><decl pos:start="37:5" pos:end="37:32"><type pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:15">CPUPPCState</name> <modifier pos:start="37:17" pos:end="37:17">*</modifier></type><name pos:start="37:18" pos:end="37:25">firstenv</name> <init pos:start="37:27" pos:end="37:32">= <expr pos:start="37:29" pos:end="37:32"><name pos:start="37:29" pos:end="37:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:34"><decl pos:start="39:5" pos:end="39:33"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:33">ccsr_addr_space</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">SysBusDevice</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:27"><decl pos:start="43:5" pos:end="43:26"><type pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:20">PPCE500CCSRState</name> <modifier pos:start="43:22" pos:end="43:22">*</modifier></type><name pos:start="43:23" pos:end="43:26">ccsr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:20">/* Setup CPUs */</comment>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:14">params</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:25">cpu_model</name></name> <operator pos:start="49:27" pos:end="49:28">==</operator> <name pos:start="49:30" pos:end="49:33">NULL</name></expr>)</condition> <block pos:start="49:36" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:41">

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:14">params</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:25">cpu_model</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <literal type="string" pos:start="51:29" pos:end="51:40">"e500v2_v30"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:8">irqs</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <call pos:start="57:12" pos:end="57:51"><name pos:start="57:12" pos:end="57:20">g_malloc0</name><argument_list pos:start="57:21" pos:end="57:51">(<argument pos:start="57:22" pos:end="57:50"><expr pos:start="57:22" pos:end="57:50"><name pos:start="57:22" pos:end="57:29">smp_cpus</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <sizeof pos:start="57:33" pos:end="57:50">sizeof<argument_list pos:start="57:39" pos:end="57:50">(<argument pos:start="57:40" pos:end="57:49"><expr pos:start="57:40" pos:end="57:49"><name pos:start="57:40" pos:end="57:47">qemu_irq</name> <operator pos:start="57:49" pos:end="57:49">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:73"><expr pos:start="59:5" pos:end="59:72"><name pos:start="59:5" pos:end="59:11"><name pos:start="59:5" pos:end="59:8">irqs</name><index pos:start="59:9" pos:end="59:11">[<expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">0</literal></expr>]</index></name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:72"><name pos:start="59:15" pos:end="59:23">g_malloc0</name><argument_list pos:start="59:24" pos:end="59:72">(<argument pos:start="59:25" pos:end="59:71"><expr pos:start="59:25" pos:end="59:71"><name pos:start="59:25" pos:end="59:32">smp_cpus</name> <operator pos:start="59:34" pos:end="59:34">*</operator> <sizeof pos:start="59:36" pos:end="59:51">sizeof<argument_list pos:start="59:42" pos:end="59:51">(<argument pos:start="59:43" pos:end="59:50"><expr pos:start="59:43" pos:end="59:50"><name pos:start="59:43" pos:end="59:50">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="59:53" pos:end="59:53">*</operator> <name pos:start="59:55" pos:end="59:71">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="61:5" pos:end="133:5">for <control pos:start="61:9" pos:end="61:34">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">i</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:17">i</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:28">smp_cpus</name></expr>;</condition> <incr pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:31">i</name><operator pos:start="61:32" pos:end="61:33">++</operator></expr></incr>)</control> <block pos:start="61:36" pos:end="133:5">{<block_content pos:start="63:9" pos:end="131:9">

        <decl_stmt pos:start="63:9" pos:end="63:24"><decl pos:start="63:9" pos:end="63:23"><type pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:18">PowerPCCPU</name> <modifier pos:start="63:20" pos:end="63:20">*</modifier></type><name pos:start="63:21" pos:end="63:23">cpu</name></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:24"><decl pos:start="65:9" pos:end="65:23"><type pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:16">qemu_irq</name> <modifier pos:start="65:18" pos:end="65:18">*</modifier></type><name pos:start="65:19" pos:end="65:23">input</name></decl>;</decl_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:11">cpu</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:45"><name pos:start="69:15" pos:end="69:26">cpu_ppc_init</name><argument_list pos:start="69:27" pos:end="69:45">(<argument pos:start="69:28" pos:end="69:44"><expr pos:start="69:28" pos:end="69:44"><name pos:start="69:28" pos:end="69:44"><name pos:start="69:28" pos:end="69:33">params</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:44">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:24">(<expr pos:start="71:13" pos:end="71:23"><name pos:start="71:13" pos:end="71:15">cpu</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <name pos:start="71:20" pos:end="71:23">NULL</name></expr>)</condition> <block pos:start="71:26" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:20">

            <expr_stmt pos:start="73:13" pos:end="73:59"><expr pos:start="73:13" pos:end="73:58"><call pos:start="73:13" pos:end="73:58"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:58">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:57"><expr pos:start="73:29" pos:end="73:57"><literal type="string" pos:start="73:29" pos:end="73:57">"Unable to initialize CPU!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><call pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">exit</name><argument_list pos:start="75:17" pos:end="75:19">(<argument pos:start="75:18" pos:end="75:18"><expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:11">env</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">&amp;</operator><name pos:start="79:16" pos:end="79:23"><name pos:start="79:16" pos:end="79:18">cpu</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:23">env</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:22">(<expr pos:start="83:13" pos:end="83:21"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:21">firstenv</name></expr>)</condition> <block pos:start="83:24" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:27">

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:20">firstenv</name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:26">env</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:52"><expr pos:start="91:9" pos:end="91:51"><name pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">irqs</name><index pos:start="91:13" pos:end="91:15">[<expr pos:start="91:14" pos:end="91:14"><name pos:start="91:14" pos:end="91:14">i</name></expr>]</index></name> <operator pos:start="91:17" pos:end="91:17">=</operator> <name pos:start="91:19" pos:end="91:25"><name pos:start="91:19" pos:end="91:22">irqs</name><index pos:start="91:23" pos:end="91:25">[<expr pos:start="91:24" pos:end="91:24"><literal type="number" pos:start="91:24" pos:end="91:24">0</literal></expr>]</index></name> <operator pos:start="91:27" pos:end="91:27">+</operator> <operator pos:start="91:29" pos:end="91:29">(</operator><name pos:start="91:30" pos:end="91:30">i</name> <operator pos:start="91:32" pos:end="91:32">*</operator> <name pos:start="91:34" pos:end="91:50">OPENPIC_OUTPUT_NB</name><operator pos:start="91:51" pos:end="91:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:44"><expr pos:start="93:9" pos:end="93:43"><name pos:start="93:9" pos:end="93:13">input</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:25">qemu_irq</name> <operator pos:start="93:27" pos:end="93:27">*</operator><operator pos:start="93:28" pos:end="93:28">)</operator><name pos:start="93:29" pos:end="93:43"><name pos:start="93:29" pos:end="93:31">env</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:43">irq_inputs</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:63"><expr pos:start="95:9" pos:end="95:62"><name pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:12">irqs</name><index pos:start="95:13" pos:end="95:15">[<expr pos:start="95:14" pos:end="95:14"><name pos:start="95:14" pos:end="95:14">i</name></expr>]</index><index pos:start="95:16" pos:end="95:35">[<expr pos:start="95:17" pos:end="95:34"><name pos:start="95:17" pos:end="95:34">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="95:37" pos:end="95:37">=</operator> <name pos:start="95:39" pos:end="95:62"><name pos:start="95:39" pos:end="95:43">input</name><index pos:start="95:44" pos:end="95:62">[<expr pos:start="95:45" pos:end="95:61"><name pos:start="95:45" pos:end="95:61">PPCE500_INPUT_INT</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:65"><expr pos:start="97:9" pos:end="97:64"><name pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:12">irqs</name><index pos:start="97:13" pos:end="97:15">[<expr pos:start="97:14" pos:end="97:14"><name pos:start="97:14" pos:end="97:14">i</name></expr>]</index><index pos:start="97:16" pos:end="97:36">[<expr pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:35">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="97:38" pos:end="97:38">=</operator> <name pos:start="97:40" pos:end="97:64"><name pos:start="97:40" pos:end="97:44">input</name><index pos:start="97:45" pos:end="97:64">[<expr pos:start="97:46" pos:end="97:63"><name pos:start="97:46" pos:end="97:63">PPCE500_INPUT_CINT</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:53"><expr pos:start="99:9" pos:end="99:52"><name pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:11">env</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:16">spr</name><index pos:start="99:17" pos:end="99:31">[<expr pos:start="99:18" pos:end="99:30"><name pos:start="99:18" pos:end="99:30">SPR_BOOKE_PIR</name></expr>]</index></name> <operator pos:start="99:33" pos:end="99:33">=</operator> <name pos:start="99:35" pos:end="99:48"><name pos:start="99:35" pos:end="99:37">env</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:48">cpu_index</name></name> <operator pos:start="99:50" pos:end="99:50">=</operator> <name pos:start="99:52" pos:end="99:52">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="103:65"><expr pos:start="101:9" pos:end="103:64"><name pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:11">env</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:26">mpic_cpu_base</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <name pos:start="101:30" pos:end="101:49">MPC8544_CCSRBAR_BASE</name> <operator pos:start="101:51" pos:end="101:51">+</operator>

                              <name pos:start="103:31" pos:end="103:54">MPC8544_MPIC_REGS_OFFSET</name> <operator pos:start="103:56" pos:end="103:56">+</operator> <literal type="number" pos:start="103:58" pos:end="103:64">0x20000</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:62"><expr pos:start="107:9" pos:end="107:61"><call pos:start="107:9" pos:end="107:61"><name pos:start="107:9" pos:end="107:29">ppc_booke_timers_init</name><argument_list pos:start="107:30" pos:end="107:61">(<argument pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:33">env</name></expr></argument>, <argument pos:start="107:36" pos:end="107:44"><expr pos:start="107:36" pos:end="107:44"><literal type="number" pos:start="107:36" pos:end="107:44">400000000</literal></expr></argument>, <argument pos:start="107:47" pos:end="107:60"><expr pos:start="107:47" pos:end="107:60"><name pos:start="107:47" pos:end="107:60">PPC_TIMER_E500</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:36">/* Register reset handler */</comment>

        <if_stmt pos:start="113:9" pos:end="131:9"><if pos:start="113:9" pos:end="125:9">if <condition pos:start="113:12" pos:end="113:15">(<expr pos:start="113:13" pos:end="113:14"><operator pos:start="113:13" pos:end="113:13">!</operator><name pos:start="113:14" pos:end="113:14">i</name></expr>)</condition> <block pos:start="113:17" pos:end="125:9">{<block_content pos:start="117:13" pos:end="123:39">

            <comment type="block" pos:start="115:13" pos:end="115:29">/* Primary CPU */</comment>

            <decl_stmt pos:start="117:13" pos:end="117:40"><decl pos:start="117:13" pos:end="117:39"><type pos:start="117:13" pos:end="117:30"><name pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:18">struct</name> <name pos:start="117:20" pos:end="117:28">boot_info</name></name> <modifier pos:start="117:30" pos:end="117:30">*</modifier></type><name pos:start="117:31" pos:end="117:39">boot_info</name></decl>;</decl_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:60"><expr pos:start="119:13" pos:end="119:59"><name pos:start="119:13" pos:end="119:21">boot_info</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:59"><name pos:start="119:25" pos:end="119:33">g_malloc0</name><argument_list pos:start="119:34" pos:end="119:59">(<argument pos:start="119:35" pos:end="119:58"><expr pos:start="119:35" pos:end="119:58"><sizeof pos:start="119:35" pos:end="119:58">sizeof<argument_list pos:start="119:41" pos:end="119:58">(<argument pos:start="119:42" pos:end="119:57"><expr pos:start="119:42" pos:end="119:57">struct <name pos:start="119:49" pos:end="119:57">boot_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:56"><expr pos:start="121:13" pos:end="121:55"><call pos:start="121:13" pos:end="121:55"><name pos:start="121:13" pos:end="121:31">qemu_register_reset</name><argument_list pos:start="121:32" pos:end="121:55">(<argument pos:start="121:33" pos:end="121:49"><expr pos:start="121:33" pos:end="121:49"><name pos:start="121:33" pos:end="121:49">ppce500_cpu_reset</name></expr></argument>, <argument pos:start="121:52" pos:end="121:54"><expr pos:start="121:52" pos:end="121:54"><name pos:start="121:52" pos:end="121:54">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:39"><expr pos:start="123:13" pos:end="123:38"><name pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:15">env</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:26">load_info</name></name> <operator pos:start="123:28" pos:end="123:28">=</operator> <name pos:start="123:30" pos:end="123:38">boot_info</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="131:9">else <block pos:start="125:16" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:60">

            <comment type="block" pos:start="127:13" pos:end="127:32">/* Secondary CPUs */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:60"><expr pos:start="129:13" pos:end="129:59"><call pos:start="129:13" pos:end="129:59"><name pos:start="129:13" pos:end="129:31">qemu_register_reset</name><argument_list pos:start="129:32" pos:end="129:59">(<argument pos:start="129:33" pos:end="129:53"><expr pos:start="129:33" pos:end="129:53"><name pos:start="129:33" pos:end="129:53">ppce500_cpu_reset_sec</name></expr></argument>, <argument pos:start="129:56" pos:end="129:58"><expr pos:start="129:56" pos:end="129:58"><name pos:start="129:56" pos:end="129:58">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:7">env</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <name pos:start="137:11" pos:end="137:18">firstenv</name></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:51">/* Fixup Memory size on a alignment boundary */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:39"><expr pos:start="143:5" pos:end="143:38"><name pos:start="143:5" pos:end="143:12">ram_size</name> <operator pos:start="143:14" pos:end="143:15">&amp;=</operator> <operator pos:start="143:17" pos:end="143:17">~</operator><operator pos:start="143:18" pos:end="143:18">(</operator><name pos:start="143:19" pos:end="143:33">RAM_SIZES_ALIGN</name> <operator pos:start="143:35" pos:end="143:35">-</operator> <literal type="number" pos:start="143:37" pos:end="143:37">1</literal><operator pos:start="143:38" pos:end="143:38">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:25">/* Register Memory */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:59"><expr pos:start="149:5" pos:end="149:58"><call pos:start="149:5" pos:end="149:58"><name pos:start="149:5" pos:end="149:26">memory_region_init_ram</name><argument_list pos:start="149:27" pos:end="149:58">(<argument pos:start="149:28" pos:end="149:30"><expr pos:start="149:28" pos:end="149:30"><name pos:start="149:28" pos:end="149:30">ram</name></expr></argument>, <argument pos:start="149:33" pos:end="149:47"><expr pos:start="149:33" pos:end="149:47"><literal type="string" pos:start="149:33" pos:end="149:47">"mpc8544ds.ram"</literal></expr></argument>, <argument pos:start="149:50" pos:end="149:57"><expr pos:start="149:50" pos:end="149:57"><name pos:start="149:50" pos:end="149:57">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:37"><expr pos:start="151:5" pos:end="151:36"><call pos:start="151:5" pos:end="151:36"><name pos:start="151:5" pos:end="151:31">vmstate_register_ram_global</name><argument_list pos:start="151:32" pos:end="151:36">(<argument pos:start="151:33" pos:end="151:35"><expr pos:start="151:33" pos:end="151:35"><name pos:start="151:33" pos:end="151:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:59"><expr pos:start="153:5" pos:end="153:58"><call pos:start="153:5" pos:end="153:58"><name pos:start="153:5" pos:end="153:31">memory_region_add_subregion</name><argument_list pos:start="153:32" pos:end="153:58">(<argument pos:start="153:33" pos:end="153:49"><expr pos:start="153:33" pos:end="153:49"><name pos:start="153:33" pos:end="153:49">address_space_mem</name></expr></argument>, <argument pos:start="153:52" pos:end="153:52"><expr pos:start="153:52" pos:end="153:52"><literal type="number" pos:start="153:52" pos:end="153:52">0</literal></expr></argument>, <argument pos:start="153:55" pos:end="153:57"><expr pos:start="153:55" pos:end="153:57"><name pos:start="153:55" pos:end="153:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:41"><expr pos:start="157:5" pos:end="157:40"><name pos:start="157:5" pos:end="157:7">dev</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <call pos:start="157:11" pos:end="157:40"><name pos:start="157:11" pos:end="157:21">qdev_create</name><argument_list pos:start="157:22" pos:end="157:40">(<argument pos:start="157:23" pos:end="157:26"><expr pos:start="157:23" pos:end="157:26"><name pos:start="157:23" pos:end="157:26">NULL</name></expr></argument>, <argument pos:start="157:29" pos:end="157:39"><expr pos:start="157:29" pos:end="157:39"><literal type="string" pos:start="157:29" pos:end="157:39">"e500-ccsr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="161:49"><expr pos:start="159:5" pos:end="161:48"><call pos:start="159:5" pos:end="161:48"><name pos:start="159:5" pos:end="159:29">object_property_add_child</name><argument_list pos:start="159:30" pos:end="161:48">(<argument pos:start="159:31" pos:end="159:48"><expr pos:start="159:31" pos:end="159:48"><call pos:start="159:31" pos:end="159:48"><name pos:start="159:31" pos:end="159:46">qdev_get_machine</name><argument_list pos:start="159:47" pos:end="159:48">()</argument_list></call></expr></argument>, <argument pos:start="159:51" pos:end="159:61"><expr pos:start="159:51" pos:end="159:61"><literal type="string" pos:start="159:51" pos:end="159:61">"e500-ccsr"</literal></expr></argument>,

                              <argument pos:start="161:31" pos:end="161:41"><expr pos:start="161:31" pos:end="161:41"><call pos:start="161:31" pos:end="161:41"><name pos:start="161:31" pos:end="161:36">OBJECT</name><argument_list pos:start="161:37" pos:end="161:41">(<argument pos:start="161:38" pos:end="161:40"><expr pos:start="161:38" pos:end="161:40"><name pos:start="161:38" pos:end="161:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:44" pos:end="161:47"><expr pos:start="161:44" pos:end="161:47"><name pos:start="161:44" pos:end="161:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:26"><expr pos:start="163:5" pos:end="163:25"><call pos:start="163:5" pos:end="163:25"><name pos:start="163:5" pos:end="163:20">qdev_init_nofail</name><argument_list pos:start="163:21" pos:end="163:25">(<argument pos:start="163:22" pos:end="163:24"><expr pos:start="163:22" pos:end="163:24"><name pos:start="163:22" pos:end="163:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:21"><expr pos:start="165:5" pos:end="165:20"><name pos:start="165:5" pos:end="165:8">ccsr</name> <operator pos:start="165:10" pos:end="165:10">=</operator> <call pos:start="165:12" pos:end="165:20"><name pos:start="165:12" pos:end="165:15">CCSR</name><argument_list pos:start="165:16" pos:end="165:20">(<argument pos:start="165:17" pos:end="165:19"><expr pos:start="165:17" pos:end="165:19"><name pos:start="165:17" pos:end="165:19">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:40"><expr pos:start="167:5" pos:end="167:39"><name pos:start="167:5" pos:end="167:19">ccsr_addr_space</name> <operator pos:start="167:21" pos:end="167:21">=</operator> <operator pos:start="167:23" pos:end="167:23">&amp;</operator><name pos:start="167:24" pos:end="167:39"><name pos:start="167:24" pos:end="167:27">ccsr</name><operator pos:start="167:28" pos:end="167:29">-&gt;</operator><name pos:start="167:30" pos:end="167:39">ccsr_space</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="171:49"><expr pos:start="169:5" pos:end="171:48"><call pos:start="169:5" pos:end="171:48"><name pos:start="169:5" pos:end="169:31">memory_region_add_subregion</name><argument_list pos:start="169:32" pos:end="171:48">(<argument pos:start="169:33" pos:end="169:49"><expr pos:start="169:33" pos:end="169:49"><name pos:start="169:33" pos:end="169:49">address_space_mem</name></expr></argument>, <argument pos:start="169:52" pos:end="169:71"><expr pos:start="169:52" pos:end="169:71"><name pos:start="169:52" pos:end="169:71">MPC8544_CCSRBAR_BASE</name></expr></argument>,

                                <argument pos:start="171:33" pos:end="171:47"><expr pos:start="171:33" pos:end="171:47"><name pos:start="171:33" pos:end="171:47">ccsr_addr_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:14">/* MPIC */</comment>

    <expr_stmt pos:start="177:5" pos:end="179:43"><expr pos:start="177:5" pos:end="179:42"><name pos:start="177:5" pos:end="177:8">mpic</name> <operator pos:start="177:10" pos:end="177:10">=</operator> <call pos:start="177:12" pos:end="179:42"><name pos:start="177:12" pos:end="177:20">mpic_init</name><argument_list pos:start="177:21" pos:end="179:42">(<argument pos:start="177:22" pos:end="177:36"><expr pos:start="177:22" pos:end="177:36"><name pos:start="177:22" pos:end="177:36">ccsr_addr_space</name></expr></argument>, <argument pos:start="177:39" pos:end="177:62"><expr pos:start="177:39" pos:end="177:62"><name pos:start="177:39" pos:end="177:62">MPC8544_MPIC_REGS_OFFSET</name></expr></argument>,

                     <argument pos:start="179:22" pos:end="179:29"><expr pos:start="179:22" pos:end="179:29"><name pos:start="179:22" pos:end="179:29">smp_cpus</name></expr></argument>, <argument pos:start="179:32" pos:end="179:35"><expr pos:start="179:32" pos:end="179:35"><name pos:start="179:32" pos:end="179:35">irqs</name></expr></argument>, <argument pos:start="179:38" pos:end="179:41"><expr pos:start="179:38" pos:end="179:41"><name pos:start="179:38" pos:end="179:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="183:5" pos:end="187:5"><if pos:start="183:5" pos:end="187:5">if <condition pos:start="183:8" pos:end="183:14">(<expr pos:start="183:9" pos:end="183:13"><operator pos:start="183:9" pos:end="183:9">!</operator><name pos:start="183:10" pos:end="183:13">mpic</name></expr>)</condition> <block pos:start="183:16" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:54">

        <expr_stmt pos:start="185:9" pos:end="185:54"><expr pos:start="185:9" pos:end="185:53"><call pos:start="185:9" pos:end="185:53"><name pos:start="185:9" pos:end="185:17">cpu_abort</name><argument_list pos:start="185:18" pos:end="185:53">(<argument pos:start="185:19" pos:end="185:21"><expr pos:start="185:19" pos:end="185:21"><name pos:start="185:19" pos:end="185:21">env</name></expr></argument>, <argument pos:start="185:24" pos:end="185:52"><expr pos:start="185:24" pos:end="185:52"><literal type="string" pos:start="185:24" pos:end="185:52">"MPIC failed to initialize\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:16">/* Serial */</comment>

    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="193:22">(<expr pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:21"><name pos:start="193:9" pos:end="193:18">serial_hds</name><index pos:start="193:19" pos:end="193:21">[<expr pos:start="193:20" pos:end="193:20"><literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="193:24" pos:end="201:5">{<block_content pos:start="195:9" pos:end="199:57">

        <expr_stmt pos:start="195:9" pos:end="199:57"><expr pos:start="195:9" pos:end="199:56"><call pos:start="195:9" pos:end="199:56"><name pos:start="195:9" pos:end="195:22">serial_mm_init</name><argument_list pos:start="195:23" pos:end="199:56">(<argument pos:start="195:24" pos:end="195:38"><expr pos:start="195:24" pos:end="195:38"><name pos:start="195:24" pos:end="195:38">ccsr_addr_space</name></expr></argument>, <argument pos:start="195:41" pos:end="195:67"><expr pos:start="195:41" pos:end="195:67"><name pos:start="195:41" pos:end="195:67">MPC8544_SERIAL0_REGS_OFFSET</name></expr></argument>,

                       <argument pos:start="197:24" pos:end="197:24"><expr pos:start="197:24" pos:end="197:24"><literal type="number" pos:start="197:24" pos:end="197:24">0</literal></expr></argument>, <argument pos:start="197:27" pos:end="197:34"><expr pos:start="197:27" pos:end="197:34"><name pos:start="197:27" pos:end="197:34"><name pos:start="197:27" pos:end="197:30">mpic</name><index pos:start="197:31" pos:end="197:34">[<expr pos:start="197:32" pos:end="197:33"><literal type="number" pos:start="197:32" pos:end="197:33">42</literal></expr>]</index></name></expr></argument>, <argument pos:start="197:37" pos:end="197:42"><expr pos:start="197:37" pos:end="197:42"><literal type="number" pos:start="197:37" pos:end="197:42">399193</literal></expr></argument>,

                       <argument pos:start="199:24" pos:end="199:36"><expr pos:start="199:24" pos:end="199:36"><name pos:start="199:24" pos:end="199:36"><name pos:start="199:24" pos:end="199:33">serial_hds</name><index pos:start="199:34" pos:end="199:36">[<expr pos:start="199:35" pos:end="199:35"><literal type="number" pos:start="199:35" pos:end="199:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:39" pos:end="199:55"><expr pos:start="199:39" pos:end="199:55"><name pos:start="199:39" pos:end="199:55">DEVICE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="205:5" pos:end="213:5"><if pos:start="205:5" pos:end="213:5">if <condition pos:start="205:8" pos:end="205:22">(<expr pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:18">serial_hds</name><index pos:start="205:19" pos:end="205:21">[<expr pos:start="205:20" pos:end="205:20"><literal type="number" pos:start="205:20" pos:end="205:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="205:24" pos:end="213:5">{<block_content pos:start="207:9" pos:end="211:57">

        <expr_stmt pos:start="207:9" pos:end="211:57"><expr pos:start="207:9" pos:end="211:56"><call pos:start="207:9" pos:end="211:56"><name pos:start="207:9" pos:end="207:22">serial_mm_init</name><argument_list pos:start="207:23" pos:end="211:56">(<argument pos:start="207:24" pos:end="207:38"><expr pos:start="207:24" pos:end="207:38"><name pos:start="207:24" pos:end="207:38">ccsr_addr_space</name></expr></argument>, <argument pos:start="207:41" pos:end="207:67"><expr pos:start="207:41" pos:end="207:67"><name pos:start="207:41" pos:end="207:67">MPC8544_SERIAL1_REGS_OFFSET</name></expr></argument>,

                       <argument pos:start="209:24" pos:end="209:24"><expr pos:start="209:24" pos:end="209:24"><literal type="number" pos:start="209:24" pos:end="209:24">0</literal></expr></argument>, <argument pos:start="209:27" pos:end="209:34"><expr pos:start="209:27" pos:end="209:34"><name pos:start="209:27" pos:end="209:34"><name pos:start="209:27" pos:end="209:30">mpic</name><index pos:start="209:31" pos:end="209:34">[<expr pos:start="209:32" pos:end="209:33"><literal type="number" pos:start="209:32" pos:end="209:33">42</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:37" pos:end="209:42"><expr pos:start="209:37" pos:end="209:42"><literal type="number" pos:start="209:37" pos:end="209:42">399193</literal></expr></argument>,

                       <argument pos:start="211:24" pos:end="211:36"><expr pos:start="211:24" pos:end="211:36"><name pos:start="211:24" pos:end="211:36"><name pos:start="211:24" pos:end="211:33">serial_hds</name><index pos:start="211:34" pos:end="211:36">[<expr pos:start="211:35" pos:end="211:35"><literal type="number" pos:start="211:35" pos:end="211:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="211:39" pos:end="211:55"><expr pos:start="211:39" pos:end="211:55"><name pos:start="211:39" pos:end="211:55">DEVICE_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="217:5" pos:end="217:32">/* General Utility device */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:44"><expr pos:start="219:5" pos:end="219:43"><name pos:start="219:5" pos:end="219:7">dev</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <call pos:start="219:11" pos:end="219:43"><name pos:start="219:11" pos:end="219:21">qdev_create</name><argument_list pos:start="219:22" pos:end="219:43">(<argument pos:start="219:23" pos:end="219:26"><expr pos:start="219:23" pos:end="219:26"><name pos:start="219:23" pos:end="219:26">NULL</name></expr></argument>, <argument pos:start="219:29" pos:end="219:42"><expr pos:start="219:29" pos:end="219:42"><literal type="string" pos:start="219:29" pos:end="219:42">"mpc8544-guts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:26"><expr pos:start="221:5" pos:end="221:25"><call pos:start="221:5" pos:end="221:25"><name pos:start="221:5" pos:end="221:20">qdev_init_nofail</name><argument_list pos:start="221:21" pos:end="221:25">(<argument pos:start="221:22" pos:end="221:24"><expr pos:start="221:22" pos:end="221:24"><name pos:start="221:22" pos:end="221:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:28"><expr pos:start="223:5" pos:end="223:27"><name pos:start="223:5" pos:end="223:5">s</name> <operator pos:start="223:7" pos:end="223:7">=</operator> <call pos:start="223:9" pos:end="223:27"><name pos:start="223:9" pos:end="223:22">SYS_BUS_DEVICE</name><argument_list pos:start="223:23" pos:end="223:27">(<argument pos:start="223:24" pos:end="223:26"><expr pos:start="223:24" pos:end="223:26"><name pos:start="223:24" pos:end="223:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:62"><expr pos:start="225:5" pos:end="227:61"><call pos:start="225:5" pos:end="227:61"><name pos:start="225:5" pos:end="225:31">memory_region_add_subregion</name><argument_list pos:start="225:32" pos:end="227:61">(<argument pos:start="225:33" pos:end="225:47"><expr pos:start="225:33" pos:end="225:47"><name pos:start="225:33" pos:end="225:47">ccsr_addr_space</name></expr></argument>, <argument pos:start="225:50" pos:end="225:68"><expr pos:start="225:50" pos:end="225:68"><name pos:start="225:50" pos:end="225:68">MPC8544_UTIL_OFFSET</name></expr></argument>,

                                <argument pos:start="227:33" pos:end="227:60"><expr pos:start="227:33" pos:end="227:60"><call pos:start="227:33" pos:end="227:60"><name pos:start="227:33" pos:end="227:54">sysbus_mmio_get_region</name><argument_list pos:start="227:55" pos:end="227:60">(<argument pos:start="227:56" pos:end="227:56"><expr pos:start="227:56" pos:end="227:56"><name pos:start="227:56" pos:end="227:56">s</name></expr></argument>, <argument pos:start="227:59" pos:end="227:59"><expr pos:start="227:59" pos:end="227:59"><literal type="number" pos:start="227:59" pos:end="227:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:13">/* PCI */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:44"><expr pos:start="233:5" pos:end="233:43"><name pos:start="233:5" pos:end="233:7">dev</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:43"><name pos:start="233:11" pos:end="233:21">qdev_create</name><argument_list pos:start="233:22" pos:end="233:43">(<argument pos:start="233:23" pos:end="233:26"><expr pos:start="233:23" pos:end="233:26"><name pos:start="233:23" pos:end="233:26">NULL</name></expr></argument>, <argument pos:start="233:29" pos:end="233:42"><expr pos:start="233:29" pos:end="233:42"><literal type="string" pos:start="233:29" pos:end="233:42">"e500-pcihost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:26"><expr pos:start="235:5" pos:end="235:25"><call pos:start="235:5" pos:end="235:25"><name pos:start="235:5" pos:end="235:20">qdev_init_nofail</name><argument_list pos:start="235:21" pos:end="235:25">(<argument pos:start="235:22" pos:end="235:24"><expr pos:start="235:22" pos:end="235:24"><name pos:start="235:22" pos:end="235:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:28"><expr pos:start="237:5" pos:end="237:27"><name pos:start="237:5" pos:end="237:5">s</name> <operator pos:start="237:7" pos:end="237:7">=</operator> <call pos:start="237:9" pos:end="237:27"><name pos:start="237:9" pos:end="237:22">SYS_BUS_DEVICE</name><argument_list pos:start="237:23" pos:end="237:27">(<argument pos:start="237:24" pos:end="237:26"><expr pos:start="237:24" pos:end="237:26"><name pos:start="237:24" pos:end="237:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:51"><expr pos:start="239:5" pos:end="239:50"><call pos:start="239:5" pos:end="239:50"><name pos:start="239:5" pos:end="239:22">sysbus_connect_irq</name><argument_list pos:start="239:23" pos:end="239:50">(<argument pos:start="239:24" pos:end="239:24"><expr pos:start="239:24" pos:end="239:24"><name pos:start="239:24" pos:end="239:24">s</name></expr></argument>, <argument pos:start="239:27" pos:end="239:27"><expr pos:start="239:27" pos:end="239:27"><literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr></argument>, <argument pos:start="239:30" pos:end="239:49"><expr pos:start="239:30" pos:end="239:49"><name pos:start="239:30" pos:end="239:49"><name pos:start="239:30" pos:end="239:33">mpic</name><index pos:start="239:34" pos:end="239:49">[<expr pos:start="239:35" pos:end="239:48"><name pos:start="239:35" pos:end="239:48"><name pos:start="239:35" pos:end="239:45">pci_irq_nrs</name><index pos:start="239:46" pos:end="239:48">[<expr pos:start="239:47" pos:end="239:47"><literal type="number" pos:start="239:47" pos:end="239:47">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:51"><expr pos:start="241:5" pos:end="241:50"><call pos:start="241:5" pos:end="241:50"><name pos:start="241:5" pos:end="241:22">sysbus_connect_irq</name><argument_list pos:start="241:23" pos:end="241:50">(<argument pos:start="241:24" pos:end="241:24"><expr pos:start="241:24" pos:end="241:24"><name pos:start="241:24" pos:end="241:24">s</name></expr></argument>, <argument pos:start="241:27" pos:end="241:27"><expr pos:start="241:27" pos:end="241:27"><literal type="number" pos:start="241:27" pos:end="241:27">1</literal></expr></argument>, <argument pos:start="241:30" pos:end="241:49"><expr pos:start="241:30" pos:end="241:49"><name pos:start="241:30" pos:end="241:49"><name pos:start="241:30" pos:end="241:33">mpic</name><index pos:start="241:34" pos:end="241:49">[<expr pos:start="241:35" pos:end="241:48"><name pos:start="241:35" pos:end="241:48"><name pos:start="241:35" pos:end="241:45">pci_irq_nrs</name><index pos:start="241:46" pos:end="241:48">[<expr pos:start="241:47" pos:end="241:47"><literal type="number" pos:start="241:47" pos:end="241:47">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:51"><expr pos:start="243:5" pos:end="243:50"><call pos:start="243:5" pos:end="243:50"><name pos:start="243:5" pos:end="243:22">sysbus_connect_irq</name><argument_list pos:start="243:23" pos:end="243:50">(<argument pos:start="243:24" pos:end="243:24"><expr pos:start="243:24" pos:end="243:24"><name pos:start="243:24" pos:end="243:24">s</name></expr></argument>, <argument pos:start="243:27" pos:end="243:27"><expr pos:start="243:27" pos:end="243:27"><literal type="number" pos:start="243:27" pos:end="243:27">2</literal></expr></argument>, <argument pos:start="243:30" pos:end="243:49"><expr pos:start="243:30" pos:end="243:49"><name pos:start="243:30" pos:end="243:49"><name pos:start="243:30" pos:end="243:33">mpic</name><index pos:start="243:34" pos:end="243:49">[<expr pos:start="243:35" pos:end="243:48"><name pos:start="243:35" pos:end="243:48"><name pos:start="243:35" pos:end="243:45">pci_irq_nrs</name><index pos:start="243:46" pos:end="243:48">[<expr pos:start="243:47" pos:end="243:47"><literal type="number" pos:start="243:47" pos:end="243:47">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:51"><expr pos:start="245:5" pos:end="245:50"><call pos:start="245:5" pos:end="245:50"><name pos:start="245:5" pos:end="245:22">sysbus_connect_irq</name><argument_list pos:start="245:23" pos:end="245:50">(<argument pos:start="245:24" pos:end="245:24"><expr pos:start="245:24" pos:end="245:24"><name pos:start="245:24" pos:end="245:24">s</name></expr></argument>, <argument pos:start="245:27" pos:end="245:27"><expr pos:start="245:27" pos:end="245:27"><literal type="number" pos:start="245:27" pos:end="245:27">3</literal></expr></argument>, <argument pos:start="245:30" pos:end="245:49"><expr pos:start="245:30" pos:end="245:49"><name pos:start="245:30" pos:end="245:49"><name pos:start="245:30" pos:end="245:33">mpic</name><index pos:start="245:34" pos:end="245:49">[<expr pos:start="245:35" pos:end="245:48"><name pos:start="245:35" pos:end="245:48"><name pos:start="245:35" pos:end="245:45">pci_irq_nrs</name><index pos:start="245:46" pos:end="245:48">[<expr pos:start="245:47" pos:end="245:47"><literal type="number" pos:start="245:47" pos:end="245:47">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="249:62"><expr pos:start="247:5" pos:end="249:61"><call pos:start="247:5" pos:end="249:61"><name pos:start="247:5" pos:end="247:31">memory_region_add_subregion</name><argument_list pos:start="247:32" pos:end="249:61">(<argument pos:start="247:33" pos:end="247:47"><expr pos:start="247:33" pos:end="247:47"><name pos:start="247:33" pos:end="247:47">ccsr_addr_space</name></expr></argument>, <argument pos:start="247:50" pos:end="247:72"><expr pos:start="247:50" pos:end="247:72"><name pos:start="247:50" pos:end="247:72">MPC8544_PCI_REGS_OFFSET</name></expr></argument>,

                                <argument pos:start="249:33" pos:end="249:60"><expr pos:start="249:33" pos:end="249:60"><call pos:start="249:33" pos:end="249:60"><name pos:start="249:33" pos:end="249:54">sysbus_mmio_get_region</name><argument_list pos:start="249:55" pos:end="249:60">(<argument pos:start="249:56" pos:end="249:56"><expr pos:start="249:56" pos:end="249:56"><name pos:start="249:56" pos:end="249:56">s</name></expr></argument>, <argument pos:start="249:59" pos:end="249:59"><expr pos:start="249:59" pos:end="249:59"><literal type="number" pos:start="249:59" pos:end="249:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:57"><expr pos:start="253:5" pos:end="253:56"><name pos:start="253:5" pos:end="253:11">pci_bus</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <operator pos:start="253:15" pos:end="253:15">(</operator><name pos:start="253:16" pos:end="253:21">PCIBus</name> <operator pos:start="253:23" pos:end="253:23">*</operator><operator pos:start="253:24" pos:end="253:24">)</operator><call pos:start="253:25" pos:end="253:56"><name pos:start="253:25" pos:end="253:42">qdev_get_child_bus</name><argument_list pos:start="253:43" pos:end="253:56">(<argument pos:start="253:44" pos:end="253:46"><expr pos:start="253:44" pos:end="253:46"><name pos:start="253:44" pos:end="253:46">dev</name></expr></argument>, <argument pos:start="253:49" pos:end="253:55"><expr pos:start="253:49" pos:end="253:55"><literal type="string" pos:start="253:49" pos:end="253:55">"pci.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="255:5" pos:end="257:52"><if pos:start="255:5" pos:end="257:52">if <condition pos:start="255:8" pos:end="255:17">(<expr pos:start="255:9" pos:end="255:16"><operator pos:start="255:9" pos:end="255:9">!</operator><name pos:start="255:10" pos:end="255:16">pci_bus</name></expr>)</condition><block type="pseudo" pos:start="257:9" pos:end="257:52"><block_content pos:start="257:9" pos:end="257:52">

        <expr_stmt pos:start="257:9" pos:end="257:52"><expr pos:start="257:9" pos:end="257:51"><call pos:start="257:9" pos:end="257:51"><name pos:start="257:9" pos:end="257:14">printf</name><argument_list pos:start="257:15" pos:end="257:51">(<argument pos:start="257:16" pos:end="257:50"><expr pos:start="257:16" pos:end="257:50"><literal type="string" pos:start="257:16" pos:end="257:50">"couldn't create PCI controller!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:62"><expr pos:start="261:5" pos:end="261:61"><call pos:start="261:5" pos:end="261:61"><name pos:start="261:5" pos:end="261:19">sysbus_mmio_map</name><argument_list pos:start="261:20" pos:end="261:61">(<argument pos:start="261:21" pos:end="261:41"><expr pos:start="261:21" pos:end="261:41"><call pos:start="261:21" pos:end="261:41"><name pos:start="261:21" pos:end="261:36">sysbus_from_qdev</name><argument_list pos:start="261:37" pos:end="261:41">(<argument pos:start="261:38" pos:end="261:40"><expr pos:start="261:38" pos:end="261:40"><name pos:start="261:38" pos:end="261:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="261:44" pos:end="261:44"><expr pos:start="261:44" pos:end="261:44"><literal type="number" pos:start="261:44" pos:end="261:44">1</literal></expr></argument>, <argument pos:start="261:47" pos:end="261:60"><expr pos:start="261:47" pos:end="261:60"><name pos:start="261:47" pos:end="261:60">MPC8544_PCI_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="265:5" pos:end="275:5"><if pos:start="265:5" pos:end="275:5">if <condition pos:start="265:8" pos:end="265:16">(<expr pos:start="265:9" pos:end="265:15"><name pos:start="265:9" pos:end="265:15">pci_bus</name></expr>)</condition> <block pos:start="265:18" pos:end="275:5">{<block_content pos:start="269:9" pos:end="273:9">

        <comment type="block" pos:start="267:9" pos:end="267:42">/* Register network interfaces. */</comment>

        <for pos:start="269:9" pos:end="273:9">for <control pos:start="269:13" pos:end="269:37">(<init pos:start="269:14" pos:end="269:19"><expr pos:start="269:14" pos:end="269:18"><name pos:start="269:14" pos:end="269:14">i</name> <operator pos:start="269:16" pos:end="269:16">=</operator> <literal type="number" pos:start="269:18" pos:end="269:18">0</literal></expr>;</init> <condition pos:start="269:21" pos:end="269:32"><expr pos:start="269:21" pos:end="269:31"><name pos:start="269:21" pos:end="269:21">i</name> <operator pos:start="269:23" pos:end="269:23">&lt;</operator> <name pos:start="269:25" pos:end="269:31">nb_nics</name></expr>;</condition> <incr pos:start="269:34" pos:end="269:36"><expr pos:start="269:34" pos:end="269:36"><name pos:start="269:34" pos:end="269:34">i</name><operator pos:start="269:35" pos:end="269:36">++</operator></expr></incr>)</control> <block pos:start="269:39" pos:end="273:9">{<block_content pos:start="271:13" pos:end="271:62">

            <expr_stmt pos:start="271:13" pos:end="271:62"><expr pos:start="271:13" pos:end="271:61"><call pos:start="271:13" pos:end="271:61"><name pos:start="271:13" pos:end="271:31">pci_nic_init_nofail</name><argument_list pos:start="271:32" pos:end="271:61">(<argument pos:start="271:33" pos:end="271:44"><expr pos:start="271:33" pos:end="271:44"><operator pos:start="271:33" pos:end="271:33">&amp;</operator><name pos:start="271:34" pos:end="271:44"><name pos:start="271:34" pos:end="271:41">nd_table</name><index pos:start="271:42" pos:end="271:44">[<expr pos:start="271:43" pos:end="271:43"><name pos:start="271:43" pos:end="271:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="271:47" pos:end="271:54"><expr pos:start="271:47" pos:end="271:54"><literal type="string" pos:start="271:47" pos:end="271:54">"virtio"</literal></expr></argument>, <argument pos:start="271:57" pos:end="271:60"><expr pos:start="271:57" pos:end="271:60"><name pos:start="271:57" pos:end="271:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="279:5" pos:end="279:34">/* Register spinning region */</comment>

    <expr_stmt pos:start="281:5" pos:end="281:63"><expr pos:start="281:5" pos:end="281:62"><call pos:start="281:5" pos:end="281:62"><name pos:start="281:5" pos:end="281:24">sysbus_create_simple</name><argument_list pos:start="281:25" pos:end="281:62">(<argument pos:start="281:26" pos:end="281:36"><expr pos:start="281:26" pos:end="281:36"><literal type="string" pos:start="281:26" pos:end="281:36">"e500-spin"</literal></expr></argument>, <argument pos:start="281:39" pos:end="281:55"><expr pos:start="281:39" pos:end="281:55"><name pos:start="281:39" pos:end="281:55">MPC8544_SPIN_BASE</name></expr></argument>, <argument pos:start="281:58" pos:end="281:61"><expr pos:start="281:58" pos:end="281:61"><name pos:start="281:58" pos:end="281:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="285:5" pos:end="285:22">/* Load kernel. */</comment>

    <if_stmt pos:start="287:5" pos:end="319:5"><if pos:start="287:5" pos:end="319:5">if <condition pos:start="287:8" pos:end="287:32">(<expr pos:start="287:9" pos:end="287:31"><name pos:start="287:9" pos:end="287:31"><name pos:start="287:9" pos:end="287:14">params</name><operator pos:start="287:15" pos:end="287:16">-&gt;</operator><name pos:start="287:17" pos:end="287:31">kernel_filename</name></name></expr>)</condition> <block pos:start="287:34" pos:end="319:5">{<block_content pos:start="289:9" pos:end="317:9">

        <expr_stmt pos:start="289:9" pos:end="291:51"><expr pos:start="289:9" pos:end="291:50"><name pos:start="289:9" pos:end="289:19">kernel_size</name> <operator pos:start="289:21" pos:end="289:21">=</operator> <call pos:start="289:23" pos:end="291:50"><name pos:start="289:23" pos:end="289:33">load_uimage</name><argument_list pos:start="289:34" pos:end="291:50">(<argument pos:start="289:35" pos:end="289:57"><expr pos:start="289:35" pos:end="289:57"><name pos:start="289:35" pos:end="289:57"><name pos:start="289:35" pos:end="289:40">params</name><operator pos:start="289:41" pos:end="289:42">-&gt;</operator><name pos:start="289:43" pos:end="289:57">kernel_filename</name></name></expr></argument>, <argument pos:start="289:60" pos:end="289:65"><expr pos:start="289:60" pos:end="289:65"><operator pos:start="289:60" pos:end="289:60">&amp;</operator><name pos:start="289:61" pos:end="289:65">entry</name></expr></argument>,

                                  <argument pos:start="291:35" pos:end="291:43"><expr pos:start="291:35" pos:end="291:43"><operator pos:start="291:35" pos:end="291:35">&amp;</operator><name pos:start="291:36" pos:end="291:43">loadaddr</name></expr></argument>, <argument pos:start="291:46" pos:end="291:49"><expr pos:start="291:46" pos:end="291:49"><name pos:start="291:46" pos:end="291:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="293:9" pos:end="305:9"><if pos:start="293:9" pos:end="305:9">if <condition pos:start="293:12" pos:end="293:28">(<expr pos:start="293:13" pos:end="293:27"><name pos:start="293:13" pos:end="293:23">kernel_size</name> <operator pos:start="293:25" pos:end="293:25">&lt;</operator> <literal type="number" pos:start="293:27" pos:end="293:27">0</literal></expr>)</condition> <block pos:start="293:30" pos:end="305:9">{<block_content pos:start="295:13" pos:end="303:35">

            <expr_stmt pos:start="295:13" pos:end="299:51"><expr pos:start="295:13" pos:end="299:50"><name pos:start="295:13" pos:end="295:23">kernel_size</name> <operator pos:start="295:25" pos:end="295:25">=</operator> <call pos:start="295:27" pos:end="299:50"><name pos:start="295:27" pos:end="295:34">load_elf</name><argument_list pos:start="295:35" pos:end="299:50">(<argument pos:start="295:36" pos:end="295:58"><expr pos:start="295:36" pos:end="295:58"><name pos:start="295:36" pos:end="295:58"><name pos:start="295:36" pos:end="295:41">params</name><operator pos:start="295:42" pos:end="295:43">-&gt;</operator><name pos:start="295:44" pos:end="295:58">kernel_filename</name></name></expr></argument>, <argument pos:start="295:61" pos:end="295:64"><expr pos:start="295:61" pos:end="295:64"><name pos:start="295:61" pos:end="295:64">NULL</name></expr></argument>, <argument pos:start="295:67" pos:end="295:70"><expr pos:start="295:67" pos:end="295:70"><name pos:start="295:67" pos:end="295:70">NULL</name></expr></argument>,

                                   <argument pos:start="297:36" pos:end="297:45"><expr pos:start="297:36" pos:end="297:45"><operator pos:start="297:36" pos:end="297:36">&amp;</operator><name pos:start="297:37" pos:end="297:45">elf_entry</name></expr></argument>, <argument pos:start="297:48" pos:end="297:59"><expr pos:start="297:48" pos:end="297:59"><operator pos:start="297:48" pos:end="297:48">&amp;</operator><name pos:start="297:49" pos:end="297:59">elf_lowaddr</name></expr></argument>, <argument pos:start="297:62" pos:end="297:65"><expr pos:start="297:62" pos:end="297:65"><name pos:start="297:62" pos:end="297:65">NULL</name></expr></argument>, <argument pos:start="297:68" pos:end="297:68"><expr pos:start="297:68" pos:end="297:68"><literal type="number" pos:start="297:68" pos:end="297:68">1</literal></expr></argument>,

                                   <argument pos:start="299:36" pos:end="299:46"><expr pos:start="299:36" pos:end="299:46"><name pos:start="299:36" pos:end="299:46">ELF_MACHINE</name></expr></argument>, <argument pos:start="299:49" pos:end="299:49"><expr pos:start="299:49" pos:end="299:49"><literal type="number" pos:start="299:49" pos:end="299:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:30"><expr pos:start="301:13" pos:end="301:29"><name pos:start="301:13" pos:end="301:17">entry</name> <operator pos:start="301:19" pos:end="301:19">=</operator> <name pos:start="301:21" pos:end="301:29">elf_entry</name></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:35"><expr pos:start="303:13" pos:end="303:34"><name pos:start="303:13" pos:end="303:20">loadaddr</name> <operator pos:start="303:22" pos:end="303:22">=</operator> <name pos:start="303:24" pos:end="303:34">elf_lowaddr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="307:9" pos:end="307:37">/* XXX try again as binary */</comment>

        <if_stmt pos:start="309:9" pos:end="317:9"><if pos:start="309:9" pos:end="317:9">if <condition pos:start="309:12" pos:end="309:28">(<expr pos:start="309:13" pos:end="309:27"><name pos:start="309:13" pos:end="309:23">kernel_size</name> <operator pos:start="309:25" pos:end="309:25">&lt;</operator> <literal type="number" pos:start="309:27" pos:end="309:27">0</literal></expr>)</condition> <block pos:start="309:30" pos:end="317:9">{<block_content pos:start="311:13" pos:end="315:20">

            <expr_stmt pos:start="311:13" pos:end="313:45"><expr pos:start="311:13" pos:end="313:44"><call pos:start="311:13" pos:end="313:44"><name pos:start="311:13" pos:end="311:19">fprintf</name><argument_list pos:start="311:20" pos:end="313:44">(<argument pos:start="311:21" pos:end="311:26"><expr pos:start="311:21" pos:end="311:26"><name pos:start="311:21" pos:end="311:26">stderr</name></expr></argument>, <argument pos:start="311:29" pos:end="311:64"><expr pos:start="311:29" pos:end="311:64"><literal type="string" pos:start="311:29" pos:end="311:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="313:21" pos:end="313:43"><expr pos:start="313:21" pos:end="313:43"><name pos:start="313:21" pos:end="313:43"><name pos:start="313:21" pos:end="313:26">params</name><operator pos:start="313:27" pos:end="313:28">-&gt;</operator><name pos:start="313:29" pos:end="313:43">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:20"><expr pos:start="315:13" pos:end="315:19"><call pos:start="315:13" pos:end="315:19"><name pos:start="315:13" pos:end="315:16">exit</name><argument_list pos:start="315:17" pos:end="315:19">(<argument pos:start="315:18" pos:end="315:18"><expr pos:start="315:18" pos:end="315:18"><literal type="number" pos:start="315:18" pos:end="315:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="323:5" pos:end="323:22">/* Load initrd. */</comment>

    <if_stmt pos:start="325:5" pos:end="347:5"><if pos:start="325:5" pos:end="347:5">if <condition pos:start="325:8" pos:end="325:32">(<expr pos:start="325:9" pos:end="325:31"><name pos:start="325:9" pos:end="325:31"><name pos:start="325:9" pos:end="325:14">params</name><operator pos:start="325:15" pos:end="325:16">-&gt;</operator><name pos:start="325:17" pos:end="325:31">initrd_filename</name></name></expr>)</condition> <block pos:start="325:34" pos:end="347:5">{<block_content pos:start="327:9" pos:end="345:9">

        <expr_stmt pos:start="327:9" pos:end="329:29"><expr pos:start="327:9" pos:end="329:28"><name pos:start="327:9" pos:end="327:19">initrd_base</name> <operator pos:start="327:21" pos:end="327:21">=</operator> <operator pos:start="327:23" pos:end="327:23">(</operator><name pos:start="327:24" pos:end="327:31">loadaddr</name> <operator pos:start="327:33" pos:end="327:33">+</operator> <name pos:start="327:35" pos:end="327:45">kernel_size</name> <operator pos:start="327:47" pos:end="327:47">+</operator> <name pos:start="327:49" pos:end="327:63">INITRD_LOAD_PAD</name><operator pos:start="327:64" pos:end="327:64">)</operator> <operator pos:start="327:66" pos:end="327:66">&amp;</operator>

            <operator pos:start="329:13" pos:end="329:13">~</operator><name pos:start="329:14" pos:end="329:28">INITRD_PAD_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="333:66"><expr pos:start="331:9" pos:end="333:65"><name pos:start="331:9" pos:end="331:19">initrd_size</name> <operator pos:start="331:21" pos:end="331:21">=</operator> <call pos:start="331:23" pos:end="333:65"><name pos:start="331:23" pos:end="331:41">load_image_targphys</name><argument_list pos:start="331:42" pos:end="333:65">(<argument pos:start="331:43" pos:end="331:65"><expr pos:start="331:43" pos:end="331:65"><name pos:start="331:43" pos:end="331:65"><name pos:start="331:43" pos:end="331:48">params</name><operator pos:start="331:49" pos:end="331:50">-&gt;</operator><name pos:start="331:51" pos:end="331:65">initrd_filename</name></name></expr></argument>, <argument pos:start="331:68" pos:end="331:78"><expr pos:start="331:68" pos:end="331:78"><name pos:start="331:68" pos:end="331:78">initrd_base</name></expr></argument>,

                                          <argument pos:start="333:43" pos:end="333:64"><expr pos:start="333:43" pos:end="333:64"><name pos:start="333:43" pos:end="333:50">ram_size</name> <operator pos:start="333:52" pos:end="333:52">-</operator> <name pos:start="333:54" pos:end="333:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="337:9" pos:end="345:9"><if pos:start="337:9" pos:end="345:9">if <condition pos:start="337:12" pos:end="337:28">(<expr pos:start="337:13" pos:end="337:27"><name pos:start="337:13" pos:end="337:23">initrd_size</name> <operator pos:start="337:25" pos:end="337:25">&lt;</operator> <literal type="number" pos:start="337:27" pos:end="337:27">0</literal></expr>)</condition> <block pos:start="337:30" pos:end="345:9">{<block_content pos:start="339:13" pos:end="343:20">

            <expr_stmt pos:start="339:13" pos:end="341:45"><expr pos:start="339:13" pos:end="341:44"><call pos:start="339:13" pos:end="341:44"><name pos:start="339:13" pos:end="339:19">fprintf</name><argument_list pos:start="339:20" pos:end="341:44">(<argument pos:start="339:21" pos:end="339:26"><expr pos:start="339:21" pos:end="339:26"><name pos:start="339:21" pos:end="339:26">stderr</name></expr></argument>, <argument pos:start="339:29" pos:end="339:74"><expr pos:start="339:29" pos:end="339:74"><literal type="string" pos:start="339:29" pos:end="339:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="341:21" pos:end="341:43"><expr pos:start="341:21" pos:end="341:43"><name pos:start="341:21" pos:end="341:43"><name pos:start="341:21" pos:end="341:26">params</name><operator pos:start="341:27" pos:end="341:28">-&gt;</operator><name pos:start="341:29" pos:end="341:43">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:20"><expr pos:start="343:13" pos:end="343:19"><call pos:start="343:13" pos:end="343:19"><name pos:start="343:13" pos:end="343:16">exit</name><argument_list pos:start="343:17" pos:end="343:19">(<argument pos:start="343:18" pos:end="343:18"><expr pos:start="343:18" pos:end="343:18"><literal type="number" pos:start="343:18" pos:end="343:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="351:5" pos:end="351:79">/* If we're loading a kernel directly, we must load the device tree too. */</comment>

    <if_stmt pos:start="353:5" pos:end="385:5"><if pos:start="353:5" pos:end="385:5">if <condition pos:start="353:8" pos:end="353:32">(<expr pos:start="353:9" pos:end="353:31"><name pos:start="353:9" pos:end="353:31"><name pos:start="353:9" pos:end="353:14">params</name><operator pos:start="353:15" pos:end="353:16">-&gt;</operator><name pos:start="353:17" pos:end="353:31">kernel_filename</name></name></expr>)</condition> <block pos:start="353:34" pos:end="385:5">{<block_content pos:start="355:9" pos:end="383:37">

        <decl_stmt pos:start="355:9" pos:end="355:36"><decl pos:start="355:9" pos:end="355:35"><type pos:start="355:9" pos:end="355:26"><name pos:start="355:9" pos:end="355:24"><name pos:start="355:9" pos:end="355:14">struct</name> <name pos:start="355:16" pos:end="355:24">boot_info</name></name> <modifier pos:start="355:26" pos:end="355:26">*</modifier></type><name pos:start="355:27" pos:end="355:35">boot_info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="357:9" pos:end="357:20"><decl pos:start="357:9" pos:end="357:19"><type pos:start="357:9" pos:end="357:11"><name pos:start="357:9" pos:end="357:11">int</name></type> <name pos:start="357:13" pos:end="357:19">dt_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="361:9" pos:end="361:74"><expr pos:start="361:9" pos:end="361:73"><name pos:start="361:9" pos:end="361:15">dt_base</name> <operator pos:start="361:17" pos:end="361:17">=</operator> <operator pos:start="361:19" pos:end="361:19">(</operator><name pos:start="361:20" pos:end="361:27">loadaddr</name> <operator pos:start="361:29" pos:end="361:29">+</operator> <name pos:start="361:31" pos:end="361:41">kernel_size</name> <operator pos:start="361:43" pos:end="361:43">+</operator> <name pos:start="361:45" pos:end="361:56">DTC_LOAD_PAD</name><operator pos:start="361:57" pos:end="361:57">)</operator> <operator pos:start="361:59" pos:end="361:59">&amp;</operator> <operator pos:start="361:61" pos:end="361:61">~</operator><name pos:start="361:62" pos:end="361:73">DTC_PAD_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="365:56"><expr pos:start="363:9" pos:end="365:55"><name pos:start="363:9" pos:end="363:15">dt_size</name> <operator pos:start="363:17" pos:end="363:17">=</operator> <call pos:start="363:19" pos:end="365:55"><name pos:start="363:19" pos:end="363:42">ppce500_load_device_tree</name><argument_list pos:start="363:43" pos:end="365:55">(<argument pos:start="363:44" pos:end="363:46"><expr pos:start="363:44" pos:end="363:46"><name pos:start="363:44" pos:end="363:46">env</name></expr></argument>, <argument pos:start="363:49" pos:end="363:54"><expr pos:start="363:49" pos:end="363:54"><name pos:start="363:49" pos:end="363:54">params</name></expr></argument>, <argument pos:start="363:57" pos:end="363:63"><expr pos:start="363:57" pos:end="363:63"><name pos:start="363:57" pos:end="363:63">dt_base</name></expr></argument>, <argument pos:start="363:66" pos:end="363:76"><expr pos:start="363:66" pos:end="363:76"><name pos:start="363:66" pos:end="363:76">initrd_base</name></expr></argument>,

                                           <argument pos:start="365:44" pos:end="365:54"><expr pos:start="365:44" pos:end="365:54"><name pos:start="365:44" pos:end="365:54">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="367:9" pos:end="373:9"><if pos:start="367:9" pos:end="373:9">if <condition pos:start="367:12" pos:end="367:24">(<expr pos:start="367:13" pos:end="367:23"><name pos:start="367:13" pos:end="367:19">dt_size</name> <operator pos:start="367:21" pos:end="367:21">&lt;</operator> <literal type="number" pos:start="367:23" pos:end="367:23">0</literal></expr>)</condition> <block pos:start="367:26" pos:end="373:9">{<block_content pos:start="369:13" pos:end="371:20">

            <expr_stmt pos:start="369:13" pos:end="369:59"><expr pos:start="369:13" pos:end="369:58"><call pos:start="369:13" pos:end="369:58"><name pos:start="369:13" pos:end="369:19">fprintf</name><argument_list pos:start="369:20" pos:end="369:58">(<argument pos:start="369:21" pos:end="369:26"><expr pos:start="369:21" pos:end="369:26"><name pos:start="369:21" pos:end="369:26">stderr</name></expr></argument>, <argument pos:start="369:29" pos:end="369:57"><expr pos:start="369:29" pos:end="369:57"><literal type="string" pos:start="369:29" pos:end="369:57">"couldn't load device tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:20"><expr pos:start="371:13" pos:end="371:19"><call pos:start="371:13" pos:end="371:19"><name pos:start="371:13" pos:end="371:16">exit</name><argument_list pos:start="371:17" pos:end="371:19">(<argument pos:start="371:18" pos:end="371:18"><expr pos:start="371:18" pos:end="371:18"><literal type="number" pos:start="371:18" pos:end="371:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="377:9" pos:end="377:35"><expr pos:start="377:9" pos:end="377:34"><name pos:start="377:9" pos:end="377:17">boot_info</name> <operator pos:start="377:19" pos:end="377:19">=</operator> <name pos:start="377:21" pos:end="377:34"><name pos:start="377:21" pos:end="377:23">env</name><operator pos:start="377:24" pos:end="377:25">-&gt;</operator><name pos:start="377:26" pos:end="377:34">load_info</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:33"><expr pos:start="379:9" pos:end="379:32"><name pos:start="379:9" pos:end="379:24"><name pos:start="379:9" pos:end="379:17">boot_info</name><operator pos:start="379:18" pos:end="379:19">-&gt;</operator><name pos:start="379:20" pos:end="379:24">entry</name></name> <operator pos:start="379:26" pos:end="379:26">=</operator> <name pos:start="379:28" pos:end="379:32">entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:37"><expr pos:start="381:9" pos:end="381:36"><name pos:start="381:9" pos:end="381:26"><name pos:start="381:9" pos:end="381:17">boot_info</name><operator pos:start="381:18" pos:end="381:19">-&gt;</operator><name pos:start="381:20" pos:end="381:26">dt_base</name></name> <operator pos:start="381:28" pos:end="381:28">=</operator> <name pos:start="381:30" pos:end="381:36">dt_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:37"><expr pos:start="383:9" pos:end="383:36"><name pos:start="383:9" pos:end="383:26"><name pos:start="383:9" pos:end="383:17">boot_info</name><operator pos:start="383:18" pos:end="383:19">-&gt;</operator><name pos:start="383:20" pos:end="383:26">dt_size</name></name> <operator pos:start="383:28" pos:end="383:28">=</operator> <name pos:start="383:30" pos:end="383:36">dt_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="389:5" pos:end="393:5"><if pos:start="389:5" pos:end="393:5">if <condition pos:start="389:8" pos:end="389:22">(<expr pos:start="389:9" pos:end="389:21"><call pos:start="389:9" pos:end="389:21"><name pos:start="389:9" pos:end="389:19">kvm_enabled</name><argument_list pos:start="389:20" pos:end="389:21">()</argument_list></call></expr>)</condition> <block pos:start="389:24" pos:end="393:5">{<block_content pos:start="391:9" pos:end="391:22">

        <expr_stmt pos:start="391:9" pos:end="391:22"><expr pos:start="391:9" pos:end="391:21"><call pos:start="391:9" pos:end="391:21"><name pos:start="391:9" pos:end="391:19">kvmppc_init</name><argument_list pos:start="391:20" pos:end="391:21">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
