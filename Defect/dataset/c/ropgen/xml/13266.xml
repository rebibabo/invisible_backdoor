<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13266.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:41">kvm_ppc_register_host_cpu_type</name><parameter_list pos:start="1:42" pos:end="1:47">(<parameter pos:start="1:43" pos:end="1:46"><decl pos:start="1:43" pos:end="1:46"><type pos:start="1:43" pos:end="1:46"><name pos:start="1:43" pos:end="1:46">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:13">

    <decl_stmt pos:start="5:5" pos:end="11:6"><decl pos:start="5:5" pos:end="11:5"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">TypeInfo</name></type> <name pos:start="5:14" pos:end="5:22">type_info</name> <init pos:start="5:24" pos:end="11:5">= <expr pos:start="5:26" pos:end="11:5"><block pos:start="5:26" pos:end="11:5">{

        <expr pos:start="7:9" pos:end="7:37"><operator pos:start="7:9" pos:end="7:9">.</operator><name pos:start="7:10" pos:end="7:13">name</name> <operator pos:start="7:15" pos:end="7:15">=</operator> <name pos:start="7:17" pos:end="7:37">TYPE_HOST_POWERPC_CPU</name></expr>,

        <expr pos:start="9:9" pos:end="9:48"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:19">class_init</name> <operator pos:start="9:21" pos:end="9:21">=</operator> <name pos:start="9:23" pos:end="9:48">kvmppc_host_cpu_class_init</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">PowerPCCPUClass</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:28">pvr_pcc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">DeviceClass</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:19">dc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:11">pvr_pcc</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:42"><name pos:start="21:15" pos:end="21:40">kvm_ppc_get_host_cpu_class</name><argument_list pos:start="21:41" pos:end="21:42">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:15">pvr_pcc</name> <operator pos:start="23:17" pos:end="23:18">==</operator> <name pos:start="23:20" pos:end="23:23">NULL</name></expr>)</condition> <block pos:start="23:26" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:13">type_info</name><operator pos:start="29:14" pos:end="29:14">.</operator><name pos:start="29:15" pos:end="29:20">parent</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <call pos:start="29:24" pos:end="29:67"><name pos:start="29:24" pos:end="29:44">object_class_get_name</name><argument_list pos:start="29:45" pos:end="29:67">(<argument pos:start="29:46" pos:end="29:66"><expr pos:start="29:46" pos:end="29:66"><call pos:start="29:46" pos:end="29:66"><name pos:start="29:46" pos:end="29:57">OBJECT_CLASS</name><argument_list pos:start="29:58" pos:end="29:66">(<argument pos:start="29:59" pos:end="29:65"><expr pos:start="29:59" pos:end="29:65"><name pos:start="29:59" pos:end="29:65">pvr_pcc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="31:29"><call pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:17">type_register</name><argument_list pos:start="31:18" pos:end="31:29">(<argument pos:start="31:19" pos:end="31:28"><expr pos:start="31:19" pos:end="31:28"><operator pos:start="31:19" pos:end="31:19">&amp;</operator><name pos:start="31:20" pos:end="31:28">type_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="35:1" pos:end="35:25">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:25"><call pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:25">(<argument pos:start="35:13" pos:end="35:24"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="37:5" pos:end="37:71"><expr pos:start="37:5" pos:end="37:70"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:13">type_info</name><operator pos:start="37:14" pos:end="37:14">.</operator><name pos:start="37:15" pos:end="37:18">name</name></name> <operator pos:start="37:20" pos:end="37:20">=</operator> <call pos:start="37:22" pos:end="37:70"><name pos:start="37:22" pos:end="37:36">g_strdup_printf</name><argument_list pos:start="37:37" pos:end="37:70">(<argument pos:start="37:38" pos:end="37:61"><expr pos:start="37:38" pos:end="37:61"><literal type="string" pos:start="37:38" pos:end="37:42">"%s-"</literal><name pos:start="37:43" pos:end="37:61">TYPE_SPAPR_CPU_CORE</name></expr></argument>, <argument pos:start="37:64" pos:end="37:69"><expr pos:start="37:64" pos:end="37:69"><literal type="string" pos:start="37:64" pos:end="37:69">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:51"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:13">type_info</name><operator pos:start="39:14" pos:end="39:14">.</operator><name pos:start="39:15" pos:end="39:20">parent</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:42">TYPE_SPAPR_CPU_CORE</name></expr><operator pos:start="39:43" pos:end="39:43">,</operator>

    <expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:13">type_info</name><operator pos:start="41:14" pos:end="41:14">.</operator><name pos:start="41:15" pos:end="41:27">instance_size</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <sizeof pos:start="41:31" pos:end="41:50">sizeof<argument_list pos:start="41:37" pos:end="41:50">(<argument pos:start="41:38" pos:end="41:49"><expr pos:start="41:38" pos:end="41:49"><name pos:start="41:38" pos:end="41:49">sPAPRCPUCore</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:13">type_info</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:27">instance_init</name></name> <operator pos:start="43:29" pos:end="43:29">=</operator> <name pos:start="43:31" pos:end="43:34">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:53"><expr pos:start="45:5" pos:end="45:52"><name pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:13">type_info</name><operator pos:start="45:14" pos:end="45:14">.</operator><name pos:start="45:15" pos:end="45:24">class_init</name></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <name pos:start="45:28" pos:end="45:52">spapr_cpu_core_class_init</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:13">type_info</name><operator pos:start="47:14" pos:end="47:14">.</operator><name pos:start="47:15" pos:end="47:24">class_data</name></name> <operator pos:start="47:26" pos:end="47:26">=</operator> <operator pos:start="47:28" pos:end="47:28">(</operator><name pos:start="47:29" pos:end="47:32">void</name> <operator pos:start="47:34" pos:end="47:34">*</operator><operator pos:start="47:35" pos:end="47:35">)</operator> <literal type="string" pos:start="47:37" pos:end="47:42">"host"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><call pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:17">type_register</name><argument_list pos:start="49:18" pos:end="49:29">(<argument pos:start="49:19" pos:end="49:28"><expr pos:start="49:19" pos:end="49:28"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:28">type_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:34"><call pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:10">g_free</name><argument_list pos:start="51:11" pos:end="51:34">(<argument pos:start="51:12" pos:end="51:33"><expr pos:start="51:12" pos:end="51:33"><operator pos:start="51:12" pos:end="51:12">(</operator><name pos:start="51:13" pos:end="51:16">void</name> <operator pos:start="51:18" pos:end="51:18">*</operator><operator pos:start="51:19" pos:end="51:19">)</operator><name pos:start="51:20" pos:end="51:33"><name pos:start="51:20" pos:end="51:28">type_info</name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:33">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="57:5" pos:end="65:7">/*

     * Update generic CPU family class alias (e.g. on a POWER8NVL host,

     * we want "POWER8" to be a "family" alias that points to the current

     * host CPU type, too)

     */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:57"><expr pos:start="67:5" pos:end="67:56"><name pos:start="67:5" pos:end="67:6">dc</name> <operator pos:start="67:8" pos:end="67:8">=</operator> <call pos:start="67:10" pos:end="67:56"><name pos:start="67:10" pos:end="67:21">DEVICE_CLASS</name><argument_list pos:start="67:22" pos:end="67:56">(<argument pos:start="67:23" pos:end="67:55"><expr pos:start="67:23" pos:end="67:55"><call pos:start="67:23" pos:end="67:55"><name pos:start="67:23" pos:end="67:46">ppc_cpu_get_family_class</name><argument_list pos:start="67:47" pos:end="67:55">(<argument pos:start="67:48" pos:end="67:54"><expr pos:start="67:48" pos:end="67:54"><name pos:start="67:48" pos:end="67:54">pvr_pcc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="69:5" pos:end="95:5">for <control pos:start="69:9" pos:end="69:54">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:49"><expr pos:start="69:17" pos:end="69:48"><name pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:31">ppc_cpu_aliases</name><index pos:start="69:32" pos:end="69:34">[<expr pos:start="69:33" pos:end="69:33"><name pos:start="69:33" pos:end="69:33">i</name></expr>]</index></name><operator pos:start="69:35" pos:end="69:35">.</operator><name pos:start="69:36" pos:end="69:40">alias</name> <operator pos:start="69:42" pos:end="69:43">!=</operator> <name pos:start="69:45" pos:end="69:48">NULL</name></expr>;</condition> <incr pos:start="69:51" pos:end="69:53"><expr pos:start="69:51" pos:end="69:53"><name pos:start="69:51" pos:end="69:51">i</name><operator pos:start="69:52" pos:end="69:53">++</operator></expr></incr>)</control> <block pos:start="69:56" pos:end="95:5">{<block_content pos:start="71:9" pos:end="93:9">

        <if_stmt pos:start="71:9" pos:end="93:9"><if pos:start="71:9" pos:end="93:9">if <condition pos:start="71:12" pos:end="71:60">(<expr pos:start="71:13" pos:end="71:59"><call pos:start="71:13" pos:end="71:54"><name pos:start="71:13" pos:end="71:18">strcmp</name><argument_list pos:start="71:19" pos:end="71:54">(<argument pos:start="71:20" pos:end="71:43"><expr pos:start="71:20" pos:end="71:43"><name pos:start="71:20" pos:end="71:37"><name pos:start="71:20" pos:end="71:34">ppc_cpu_aliases</name><index pos:start="71:35" pos:end="71:37">[<expr pos:start="71:36" pos:end="71:36"><name pos:start="71:36" pos:end="71:36">i</name></expr>]</index></name><operator pos:start="71:38" pos:end="71:38">.</operator><name pos:start="71:39" pos:end="71:43">alias</name></expr></argument>, <argument pos:start="71:46" pos:end="71:53"><expr pos:start="71:46" pos:end="71:53"><name pos:start="71:46" pos:end="71:53"><name pos:start="71:46" pos:end="71:47">dc</name><operator pos:start="71:48" pos:end="71:49">-&gt;</operator><name pos:start="71:50" pos:end="71:53">desc</name></name></expr></argument>)</argument_list></call> <operator pos:start="71:56" pos:end="71:57">==</operator> <literal type="number" pos:start="71:59" pos:end="71:59">0</literal></expr>)</condition> <block pos:start="71:62" pos:end="93:9">{<block_content pos:start="73:13" pos:end="91:18">

            <decl_stmt pos:start="73:13" pos:end="73:52"><decl pos:start="73:13" pos:end="73:51"><type pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:23">ObjectClass</name> <modifier pos:start="73:25" pos:end="73:25">*</modifier></type><name pos:start="73:26" pos:end="73:27">oc</name> <init pos:start="73:29" pos:end="73:51">= <expr pos:start="73:31" pos:end="73:51"><call pos:start="73:31" pos:end="73:51"><name pos:start="73:31" pos:end="73:42">OBJECT_CLASS</name><argument_list pos:start="73:43" pos:end="73:51">(<argument pos:start="73:44" pos:end="73:50"><expr pos:start="73:44" pos:end="73:50"><name pos:start="73:44" pos:end="73:50">pvr_pcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="75:13" pos:end="75:25"><decl pos:start="75:13" pos:end="75:24"><type pos:start="75:13" pos:end="75:18"><name pos:start="75:13" pos:end="75:16">char</name> <modifier pos:start="75:18" pos:end="75:18">*</modifier></type><name pos:start="75:19" pos:end="75:24">suffix</name></decl>;</decl_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:75"><expr pos:start="79:13" pos:end="79:74"><name pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:27">ppc_cpu_aliases</name><index pos:start="79:28" pos:end="79:30">[<expr pos:start="79:29" pos:end="79:29"><name pos:start="79:29" pos:end="79:29">i</name></expr>]</index></name><operator pos:start="79:31" pos:end="79:31">.</operator><name pos:start="79:32" pos:end="79:36">model</name> <operator pos:start="79:38" pos:end="79:38">=</operator> <call pos:start="79:40" pos:end="79:74"><name pos:start="79:40" pos:end="79:47">g_strdup</name><argument_list pos:start="79:48" pos:end="79:74">(<argument pos:start="79:49" pos:end="79:73"><expr pos:start="79:49" pos:end="79:73"><call pos:start="79:49" pos:end="79:73"><name pos:start="79:49" pos:end="79:69">object_class_get_name</name><argument_list pos:start="79:70" pos:end="79:73">(<argument pos:start="79:71" pos:end="79:72"><expr pos:start="79:71" pos:end="79:72"><name pos:start="79:71" pos:end="79:72">oc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:75"><expr pos:start="81:13" pos:end="81:74"><name pos:start="81:13" pos:end="81:18">suffix</name> <operator pos:start="81:20" pos:end="81:20">=</operator> <call pos:start="81:22" pos:end="81:74"><name pos:start="81:22" pos:end="81:27">strstr</name><argument_list pos:start="81:28" pos:end="81:74">(<argument pos:start="81:29" pos:end="81:52"><expr pos:start="81:29" pos:end="81:52"><name pos:start="81:29" pos:end="81:46"><name pos:start="81:29" pos:end="81:43">ppc_cpu_aliases</name><index pos:start="81:44" pos:end="81:46">[<expr pos:start="81:45" pos:end="81:45"><name pos:start="81:45" pos:end="81:45">i</name></expr>]</index></name><operator pos:start="81:47" pos:end="81:47">.</operator><name pos:start="81:48" pos:end="81:52">model</name></expr></argument>, <argument pos:start="81:55" pos:end="81:73"><expr pos:start="81:55" pos:end="81:73"><literal type="string" pos:start="81:55" pos:end="81:57">"-"</literal><name pos:start="81:58" pos:end="81:73">TYPE_POWERPC_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:23">(<expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">suffix</name></expr>)</condition> <block pos:start="83:25" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:28">

                <expr_stmt pos:start="85:17" pos:end="85:28"><expr pos:start="85:17" pos:end="85:27"><operator pos:start="85:17" pos:end="85:17">*</operator><name pos:start="85:18" pos:end="85:23">suffix</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <literal type="number" pos:start="85:27" pos:end="85:27">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:39"><expr pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:27">ppc_cpu_aliases</name><index pos:start="89:28" pos:end="89:30">[<expr pos:start="89:29" pos:end="89:29"><name pos:start="89:29" pos:end="89:29">i</name></expr>]</index></name><operator pos:start="89:31" pos:end="89:31">.</operator><name pos:start="89:32" pos:end="89:33">oc</name> <operator pos:start="89:35" pos:end="89:35">=</operator> <name pos:start="89:37" pos:end="89:38">oc</name></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
