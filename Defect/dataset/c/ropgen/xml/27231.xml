<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27231.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:15">has_altivec</name><parameter_list pos:start="1:16" pos:end="1:21">(<parameter pos:start="1:17" pos:end="1:20"><decl pos:start="1:17" pos:end="1:20"><type pos:start="1:17" pos:end="1:20"><name pos:start="1:17" pos:end="1:20">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="84:0">

<cpp:ifdef pos:start="5:1" pos:end="5:19">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:19">__AMIGAOS4__</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">ULONG</name></type> <name pos:start="7:11" pos:end="7:16">result</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:29"><specifier pos:start="9:5" pos:end="9:10">extern</specifier> <name pos:start="9:12" pos:end="9:27"><name pos:start="9:12" pos:end="9:17">struct</name> <name pos:start="9:19" pos:end="9:27">ExecIFace</name></name> <modifier pos:start="9:29" pos:end="9:29">*</modifier></type><name pos:start="9:30" pos:end="9:34">IExec</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><call pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:9">IExec</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:25">GetCPUInfoTags</name></name><argument_list pos:start="13:26" pos:end="13:61">(<argument pos:start="13:27" pos:end="13:41"><expr pos:start="13:27" pos:end="13:41"><name pos:start="13:27" pos:end="13:41">GCIT_VectorUnit</name></expr></argument>, <argument pos:start="13:44" pos:end="13:50"><expr pos:start="13:44" pos:end="13:50"><operator pos:start="13:44" pos:end="13:44">&amp;</operator><name pos:start="13:45" pos:end="13:50">result</name></expr></argument>, <argument pos:start="13:53" pos:end="13:60"><expr pos:start="13:53" pos:end="13:60"><name pos:start="13:53" pos:end="13:60">TAG_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="15:47"><if pos:start="15:5" pos:end="15:47">if <condition pos:start="15:8" pos:end="15:37">(<expr pos:start="15:9" pos:end="15:36"><name pos:start="15:9" pos:end="15:14">result</name> <operator pos:start="15:16" pos:end="15:17">==</operator> <name pos:start="15:19" pos:end="15:36">VECTORTYPE_ALTIVEC</name></expr>)</condition><block type="pseudo" pos:start="15:39" pos:end="15:47"><block_content pos:start="15:39" pos:end="15:47"> <return pos:start="15:39" pos:end="15:47">return <expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="17:5" pos:end="24:0">return <expr pos:start="17:12" pos:end="17:12"><literal type="number" pos:start="17:12" pos:end="17:12">0</literal></expr>;</return>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="19:7" pos:end="19:24">/* __AMIGAOS4__ */</comment>



<cpp:ifdef pos:start="23:1" pos:end="23:17">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:17">SYS_DARWIN</name></cpp:ifdef>

    <decl_stmt pos:start="25:5" pos:end="25:42"><decl pos:start="25:5" pos:end="25:41"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:12">sels</name><index pos:start="25:13" pos:end="25:15">[<expr pos:start="25:14" pos:end="25:14"><literal type="number" pos:start="25:14" pos:end="25:14">2</literal></expr>]</index></name> <init pos:start="25:17" pos:end="25:41">= <expr pos:start="25:19" pos:end="25:41"><block pos:start="25:19" pos:end="25:41">{<expr pos:start="25:20" pos:end="25:25"><name pos:start="25:20" pos:end="25:25">CTL_HW</name></expr>, <expr pos:start="25:28" pos:end="25:40"><name pos:start="25:28" pos:end="25:40">HW_VECTORUNIT</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:14">has_vu</name> <init pos:start="27:16" pos:end="27:18">= <expr pos:start="27:18" pos:end="27:18"><literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">size_t</name></type> <name pos:start="29:12" pos:end="29:14">len</name> <init pos:start="29:16" pos:end="29:31">= <expr pos:start="29:18" pos:end="29:31"><sizeof pos:start="29:18" pos:end="29:31">sizeof<argument_list pos:start="29:24" pos:end="29:31">(<argument pos:start="29:25" pos:end="29:30"><expr pos:start="29:25" pos:end="29:30"><name pos:start="29:25" pos:end="29:30">has_vu</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:12"><decl pos:start="31:5" pos:end="31:11"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:50"><expr pos:start="35:5" pos:end="35:49"><name pos:start="35:5" pos:end="35:7">err</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:49"><name pos:start="35:11" pos:end="35:16">sysctl</name><argument_list pos:start="35:17" pos:end="35:49">(<argument pos:start="35:18" pos:end="35:21"><expr pos:start="35:18" pos:end="35:21"><name pos:start="35:18" pos:end="35:21">sels</name></expr></argument>, <argument pos:start="35:24" pos:end="35:24"><expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">2</literal></expr></argument>, <argument pos:start="35:27" pos:end="35:33"><expr pos:start="35:27" pos:end="35:33"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:33">has_vu</name></expr></argument>, <argument pos:start="35:36" pos:end="35:39"><expr pos:start="35:36" pos:end="35:39"><operator pos:start="35:36" pos:end="35:36">&amp;</operator><name pos:start="35:37" pos:end="35:39">len</name></expr></argument>, <argument pos:start="35:42" pos:end="35:45"><expr pos:start="35:42" pos:end="35:45"><name pos:start="35:42" pos:end="35:45">NULL</name></expr></argument>, <argument pos:start="35:48" pos:end="35:48"><expr pos:start="35:48" pos:end="35:48"><literal type="number" pos:start="35:48" pos:end="35:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="42:0"><if pos:start="39:5" pos:end="42:0">if <condition pos:start="39:8" pos:end="39:17">(<expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:11">err</name> <operator pos:start="39:13" pos:end="39:14">==</operator> <literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>)</condition><block type="pseudo" pos:start="39:19" pos:end="42:0"><block_content pos:start="39:19" pos:end="42:0"> <return pos:start="39:19" pos:end="42:0">return <expr pos:start="39:26" pos:end="39:38"><operator pos:start="39:26" pos:end="39:26">(</operator><name pos:start="39:27" pos:end="39:32">has_vu</name> <operator pos:start="39:34" pos:end="39:35">!=</operator> <literal type="number" pos:start="39:37" pos:end="39:37">0</literal><operator pos:start="39:38" pos:end="39:38">)</operator></expr>;</return></block_content></block></if></if_stmt>

<cpp:else pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="41:7" pos:end="41:22">/* SYS_DARWIN */</comment>

<comment type="block" pos:start="43:1" pos:end="43:42">/* no Darwin, do it the brute-force way */</comment>

<comment type="block" pos:start="45:1" pos:end="45:48">/* this is borrowed from the libmpeg2 library */</comment>

    <block pos:start="47:5" pos:end="80:0">{<block_content pos:start="49:7" pos:end="75:7">

      <expr_stmt pos:start="49:7" pos:end="49:38"><expr pos:start="49:7" pos:end="49:37"><call pos:start="49:7" pos:end="49:37"><name pos:start="49:7" pos:end="49:12">signal</name> <argument_list pos:start="49:14" pos:end="49:37">(<argument pos:start="49:15" pos:end="49:20"><expr pos:start="49:15" pos:end="49:20"><name pos:start="49:15" pos:end="49:20">SIGILL</name></expr></argument>, <argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:36">sigill_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="51:7" pos:end="75:7"><if pos:start="51:7" pos:end="55:7">if <condition pos:start="51:10" pos:end="51:32">(<expr pos:start="51:11" pos:end="51:31"><call pos:start="51:11" pos:end="51:31"><name pos:start="51:11" pos:end="51:19">sigsetjmp</name> <argument_list pos:start="51:21" pos:end="51:31">(<argument pos:start="51:22" pos:end="51:27"><expr pos:start="51:22" pos:end="51:27"><name pos:start="51:22" pos:end="51:27">jmpbuf</name></expr></argument>, <argument pos:start="51:30" pos:end="51:30"><expr pos:start="51:30" pos:end="51:30"><literal type="number" pos:start="51:30" pos:end="51:30">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:34" pos:end="55:7">{<block_content pos:start="53:9" pos:end="53:33">

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:14">signal</name> <argument_list pos:start="53:16" pos:end="53:32">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">SIGILL</name></expr></argument>, <argument pos:start="53:25" pos:end="53:31"><expr pos:start="53:25" pos:end="53:31"><name pos:start="53:25" pos:end="53:31">SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if> <else pos:start="55:9" pos:end="75:7">else <block pos:start="55:14" pos:end="75:7">{<block_content pos:start="57:9" pos:end="73:17">

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:15">canjump</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:19">1</literal></expr>;</expr_stmt>



        <asm pos:start="61:9" pos:end="67:34">asm <specifier pos:start="61:13" pos:end="61:20">volatile</specifier> ("mtspr 256, %0\n\t"

                      "vand %%v0, %%v0, %%v0"

                      :

                      : "r" (-1));</asm>



        <expr_stmt pos:start="71:9" pos:end="71:33"><expr pos:start="71:9" pos:end="71:32"><call pos:start="71:9" pos:end="71:32"><name pos:start="71:9" pos:end="71:14">signal</name> <argument_list pos:start="71:16" pos:end="71:32">(<argument pos:start="71:17" pos:end="71:22"><expr pos:start="71:17" pos:end="71:22"><name pos:start="71:17" pos:end="71:22">SIGILL</name></expr></argument>, <argument pos:start="71:25" pos:end="71:31"><expr pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:31">SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">1</literal></expr>;</return>

      </block_content>}</block></else></if_stmt>

    </block_content>}</block>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="79:8" pos:end="79:23">/* SYS_DARWIN */</comment>

    <return pos:start="81:5" pos:end="84:0">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="83:8" pos:end="83:25">/* __AMIGAOS4__ */</comment>

</block_content>}</block></function>
</unit>
