<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26278.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">mips_r4k_init</name> <parameter_list pos:start="1:20" pos:end="7:71">(<parameter pos:start="1:21" pos:end="1:39"><decl pos:start="1:21" pos:end="1:39"><type pos:start="1:21" pos:end="1:39"><name pos:start="1:21" pos:end="1:30">ram_addr_t</name></type> <name pos:start="1:32" pos:end="1:39">ram_size</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:57">vga_ram_size</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:43"><decl pos:start="3:21" pos:end="3:43"><type pos:start="3:21" pos:end="3:43"><specifier pos:start="3:21" pos:end="3:25">const</specifier> <name pos:start="3:27" pos:end="3:30">char</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:43">boot_device</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:61"><decl pos:start="3:46" pos:end="3:61"><type pos:start="3:46" pos:end="3:61"><name pos:start="3:46" pos:end="3:57">DisplayState</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:61">ds</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:47"><decl pos:start="5:21" pos:end="5:47"><type pos:start="5:21" pos:end="5:47"><specifier pos:start="5:21" pos:end="5:25">const</specifier> <name pos:start="5:27" pos:end="5:30">char</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:47">kernel_filename</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:75"><decl pos:start="5:50" pos:end="5:75"><type pos:start="5:50" pos:end="5:75"><specifier pos:start="5:50" pos:end="5:54">const</specifier> <name pos:start="5:56" pos:end="5:59">char</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:75">kernel_cmdline</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:47"><decl pos:start="7:21" pos:end="7:47"><type pos:start="7:21" pos:end="7:47"><specifier pos:start="7:21" pos:end="7:25">const</specifier> <name pos:start="7:27" pos:end="7:30">char</name> <modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:47">initrd_filename</name></decl></parameter>, <parameter pos:start="7:50" pos:end="7:70"><decl pos:start="7:50" pos:end="7:70"><type pos:start="7:50" pos:end="7:70"><specifier pos:start="7:50" pos:end="7:54">const</specifier> <name pos:start="7:56" pos:end="7:59">char</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:70">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="269:1">{<block_content pos:start="11:5" pos:end="267:42">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:29">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">RTCState</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:23">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:53"><decl pos:start="27:5" pos:end="27:52"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">BlockDriverState</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:52"><name pos:start="27:23" pos:end="27:24">hd</name><index pos:start="27:25" pos:end="27:52">[<expr pos:start="27:26" pos:end="27:51"><name pos:start="27:26" pos:end="27:36">MAX_IDE_BUS</name> <operator pos:start="27:38" pos:end="27:38">*</operator> <name pos:start="27:40" pos:end="27:51">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:19">/* init CPUs */</comment>

    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="45:5">{<block_content pos:start="37:9" pos:end="44:0">

<cpp:ifdef pos:start="35:1" pos:end="35:20">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="37:9" pos:end="40:0"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:27">"R4000"</literal></expr>;</expr_stmt>

<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="41:9" pos:end="44:0"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:7">env</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:29"><name pos:start="47:11" pos:end="47:18">cpu_init</name><argument_list pos:start="47:19" pos:end="47:29">(<argument pos:start="47:20" pos:end="47:28"><expr pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:13">(<expr pos:start="49:9" pos:end="49:12"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:12">env</name></expr>)</condition> <block pos:start="49:15" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:58">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><literal type="string" pos:start="51:25" pos:end="51:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><call pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:23">qemu_register_reset</name><argument_list pos:start="57:24" pos:end="57:44">(<argument pos:start="57:25" pos:end="57:38"><expr pos:start="57:25" pos:end="57:38"><name pos:start="57:25" pos:end="57:38">main_cpu_reset</name></expr></argument>, <argument pos:start="57:41" pos:end="57:43"><expr pos:start="57:41" pos:end="57:43"><name pos:start="57:41" pos:end="57:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:58"><expr pos:start="63:5" pos:end="63:57"><call pos:start="63:5" pos:end="63:57"><name pos:start="63:5" pos:end="63:32">cpu_register_physical_memory</name><argument_list pos:start="63:33" pos:end="63:57">(<argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><literal type="number" pos:start="63:34" pos:end="63:34">0</literal></expr></argument>, <argument pos:start="63:37" pos:end="63:44"><expr pos:start="63:37" pos:end="63:44"><name pos:start="63:37" pos:end="63:44">ram_size</name></expr></argument>, <argument pos:start="63:47" pos:end="63:56"><expr pos:start="63:47" pos:end="63:56"><name pos:start="63:47" pos:end="63:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:28">mips_qemu_iomemtype</name></expr>)</condition> <block pos:start="67:31" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:76">

        <expr_stmt pos:start="69:9" pos:end="71:76"><expr pos:start="69:9" pos:end="71:75"><name pos:start="69:9" pos:end="69:27">mips_qemu_iomemtype</name> <operator pos:start="69:29" pos:end="69:29">=</operator> <call pos:start="69:31" pos:end="71:75"><name pos:start="69:31" pos:end="69:52">cpu_register_io_memory</name><argument_list pos:start="69:53" pos:end="71:75">(<argument pos:start="69:54" pos:end="69:54"><expr pos:start="69:54" pos:end="69:54"><literal type="number" pos:start="69:54" pos:end="69:54">0</literal></expr></argument>, <argument pos:start="69:57" pos:end="69:70"><expr pos:start="69:57" pos:end="69:70"><name pos:start="69:57" pos:end="69:70">mips_qemu_read</name></expr></argument>,

                                                     <argument pos:start="71:54" pos:end="71:68"><expr pos:start="71:54" pos:end="71:68"><name pos:start="71:54" pos:end="71:68">mips_qemu_write</name></expr></argument>, <argument pos:start="71:71" pos:end="71:74"><expr pos:start="71:71" pos:end="71:74"><name pos:start="71:71" pos:end="71:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:75"><expr pos:start="75:5" pos:end="75:74"><call pos:start="75:5" pos:end="75:74"><name pos:start="75:5" pos:end="75:32">cpu_register_physical_memory</name><argument_list pos:start="75:33" pos:end="75:74">(<argument pos:start="75:34" pos:end="75:43"><expr pos:start="75:34" pos:end="75:43"><literal type="number" pos:start="75:34" pos:end="75:43">0x1fbf0000</literal></expr></argument>, <argument pos:start="75:46" pos:end="75:52"><expr pos:start="75:46" pos:end="75:52"><literal type="number" pos:start="75:46" pos:end="75:52">0x10000</literal></expr></argument>, <argument pos:start="75:55" pos:end="75:73"><expr pos:start="75:55" pos:end="75:73"><name pos:start="75:55" pos:end="75:73">mips_qemu_iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="85:14">/* Try to load a BIOS image. If this fails, we continue regardless,

       but initialize the hardware ourselves. When a kernel gets

       preloaded we also initialize the hardware, since the BIOS wasn't

       run. */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:42"><expr pos:start="87:5" pos:end="87:41"><name pos:start="87:5" pos:end="87:15">bios_offset</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:26">ram_size</name> <operator pos:start="87:28" pos:end="87:28">+</operator> <name pos:start="87:30" pos:end="87:41">vga_ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="91:34"><if pos:start="89:5" pos:end="91:34">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:17">bios_name</name> <operator pos:start="89:19" pos:end="89:20">==</operator> <name pos:start="89:22" pos:end="89:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:34"><block_content pos:start="91:9" pos:end="91:34">

        <expr_stmt pos:start="91:9" pos:end="91:34"><expr pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:17">bios_name</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:61"><expr pos:start="93:5" pos:end="93:60"><call pos:start="93:5" pos:end="93:60"><name pos:start="93:5" pos:end="93:12">snprintf</name><argument_list pos:start="93:13" pos:end="93:60">(<argument pos:start="93:14" pos:end="93:16"><expr pos:start="93:14" pos:end="93:16"><name pos:start="93:14" pos:end="93:16">buf</name></expr></argument>, <argument pos:start="93:19" pos:end="93:29"><expr pos:start="93:19" pos:end="93:29"><sizeof pos:start="93:19" pos:end="93:29">sizeof<argument_list pos:start="93:25" pos:end="93:29">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><name pos:start="93:26" pos:end="93:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:32" pos:end="93:38"><expr pos:start="93:32" pos:end="93:38"><literal type="string" pos:start="93:32" pos:end="93:38">"%s/%s"</literal></expr></argument>, <argument pos:start="93:41" pos:end="93:48"><expr pos:start="93:41" pos:end="93:48"><name pos:start="93:41" pos:end="93:48">bios_dir</name></expr></argument>, <argument pos:start="93:51" pos:end="93:59"><expr pos:start="93:51" pos:end="93:59"><name pos:start="93:51" pos:end="93:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:61"><expr pos:start="95:5" pos:end="95:60"><name pos:start="95:5" pos:end="95:13">bios_size</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:60"><name pos:start="95:17" pos:end="95:26">load_image</name><argument_list pos:start="95:27" pos:end="95:60">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">buf</name></expr></argument>, <argument pos:start="95:33" pos:end="95:59"><expr pos:start="95:33" pos:end="95:59"><name pos:start="95:33" pos:end="95:45">phys_ram_base</name> <operator pos:start="95:47" pos:end="95:47">+</operator> <name pos:start="95:49" pos:end="95:59">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="131:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:52">(<expr pos:start="97:9" pos:end="97:51"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:18">bios_size</name> <operator pos:start="97:20" pos:end="97:20">&gt;</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal><operator pos:start="97:23" pos:end="97:23">)</operator> <operator pos:start="97:25" pos:end="97:26">&amp;&amp;</operator> <operator pos:start="97:28" pos:end="97:28">(</operator><name pos:start="97:29" pos:end="97:37">bios_size</name> <operator pos:start="97:39" pos:end="97:40">&lt;=</operator> <name pos:start="97:42" pos:end="97:50">BIOS_SIZE</name><operator pos:start="97:51" pos:end="97:51">)</operator></expr>)</condition> <block pos:start="97:54" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:74">

	<expr_stmt pos:start="99:9" pos:end="101:74"><expr pos:start="99:9" pos:end="101:73"><call pos:start="99:9" pos:end="101:73"><name pos:start="99:9" pos:end="99:36">cpu_register_physical_memory</name><argument_list pos:start="99:37" pos:end="101:73">(<argument pos:start="99:38" pos:end="99:47"><expr pos:start="99:38" pos:end="99:47"><literal type="number" pos:start="99:38" pos:end="99:47">0x1fc00000</literal></expr></argument>,

				     <argument pos:start="101:38" pos:end="101:46"><expr pos:start="101:38" pos:end="101:46"><name pos:start="101:38" pos:end="101:46">BIOS_SIZE</name></expr></argument>, <argument pos:start="101:49" pos:end="101:72"><expr pos:start="101:49" pos:end="101:72"><name pos:start="101:49" pos:end="101:59">bios_offset</name> <operator pos:start="101:61" pos:end="101:61">|</operator> <name pos:start="101:63" pos:end="101:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="103:7" pos:end="121:5">else if <condition pos:start="103:15" pos:end="103:63">(<expr pos:start="103:16" pos:end="103:62"><operator pos:start="103:16" pos:end="103:16">(</operator><name pos:start="103:17" pos:end="103:21">index</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <call pos:start="103:25" pos:end="103:56"><name pos:start="103:25" pos:end="103:39">drive_get_index</name><argument_list pos:start="103:40" pos:end="103:56">(<argument pos:start="103:41" pos:end="103:49"><expr pos:start="103:41" pos:end="103:49"><name pos:start="103:41" pos:end="103:49">IF_PFLASH</name></expr></argument>, <argument pos:start="103:52" pos:end="103:52"><expr pos:start="103:52" pos:end="103:52"><literal type="number" pos:start="103:52" pos:end="103:52">0</literal></expr></argument>, <argument pos:start="103:55" pos:end="103:55"><expr pos:start="103:55" pos:end="103:55"><literal type="number" pos:start="103:55" pos:end="103:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="103:57" pos:end="103:57">)</operator> <operator pos:start="103:59" pos:end="103:59">&gt;</operator> <operator pos:start="103:61" pos:end="103:61">-</operator><literal type="number" pos:start="103:62" pos:end="103:62">1</literal></expr>)</condition> <block pos:start="103:65" pos:end="121:5">{<block_content pos:start="105:9" pos:end="119:9">

        <decl_stmt pos:start="105:9" pos:end="105:39"><decl pos:start="105:9" pos:end="105:38"><type pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:16">uint32_t</name></type> <name pos:start="105:18" pos:end="105:25">mips_rom</name> <init pos:start="105:27" pos:end="105:38">= <expr pos:start="105:29" pos:end="105:38"><literal type="number" pos:start="105:29" pos:end="105:38">0x00400000</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:68"><expr pos:start="107:9" pos:end="109:67"><call pos:start="107:9" pos:end="109:67"><name pos:start="107:9" pos:end="107:36">cpu_register_physical_memory</name><argument_list pos:start="107:37" pos:end="109:67">(<argument pos:start="107:38" pos:end="107:47"><expr pos:start="107:38" pos:end="107:47"><literal type="number" pos:start="107:38" pos:end="107:47">0x1fc00000</literal></expr></argument>, <argument pos:start="107:50" pos:end="107:57"><expr pos:start="107:50" pos:end="107:57"><name pos:start="107:50" pos:end="107:57">mips_rom</name></expr></argument>,

	                     <argument pos:start="109:30" pos:end="109:66"><expr pos:start="109:30" pos:end="109:66"><call pos:start="109:30" pos:end="109:53"><name pos:start="109:30" pos:end="109:43">qemu_ram_alloc</name><argument_list pos:start="109:44" pos:end="109:53">(<argument pos:start="109:45" pos:end="109:52"><expr pos:start="109:45" pos:end="109:52"><name pos:start="109:45" pos:end="109:52">mips_rom</name></expr></argument>)</argument_list></call> <operator pos:start="109:55" pos:end="109:55">|</operator> <name pos:start="109:57" pos:end="109:66">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="119:9"><if pos:start="111:9" pos:end="119:9">if <condition pos:start="111:12" pos:end="115:27">(<expr pos:start="111:13" pos:end="115:26"><operator pos:start="111:13" pos:end="111:13">!</operator><call pos:start="111:14" pos:end="115:26"><name pos:start="111:14" pos:end="111:34">pflash_cfi01_register</name><argument_list pos:start="111:35" pos:end="115:26">(<argument pos:start="111:36" pos:end="111:45"><expr pos:start="111:36" pos:end="111:45"><literal type="number" pos:start="111:36" pos:end="111:45">0x1fc00000</literal></expr></argument>, <argument pos:start="111:48" pos:end="111:71"><expr pos:start="111:48" pos:end="111:71"><call pos:start="111:48" pos:end="111:71"><name pos:start="111:48" pos:end="111:61">qemu_ram_alloc</name><argument_list pos:start="111:62" pos:end="111:71">(<argument pos:start="111:63" pos:end="111:70"><expr pos:start="111:63" pos:end="111:70"><name pos:start="111:63" pos:end="111:70">mips_rom</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="113:13" pos:end="113:36"><expr pos:start="113:13" pos:end="113:36"><name pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:24">drives_table</name><index pos:start="113:25" pos:end="113:31">[<expr pos:start="113:26" pos:end="113:30"><name pos:start="113:26" pos:end="113:30">index</name></expr>]</index></name><operator pos:start="113:32" pos:end="113:32">.</operator><name pos:start="113:33" pos:end="113:36">bdrv</name></expr></argument>, <argument pos:start="113:39" pos:end="113:48"><expr pos:start="113:39" pos:end="113:48"><name pos:start="113:39" pos:end="113:48">sector_len</name></expr></argument>, <argument pos:start="113:51" pos:end="113:71"><expr pos:start="113:51" pos:end="113:71"><name pos:start="113:51" pos:end="113:58">mips_rom</name> <operator pos:start="113:60" pos:end="113:60">/</operator> <name pos:start="113:62" pos:end="113:71">sector_len</name></expr></argument>,

            <argument pos:start="115:13" pos:end="115:13"><expr pos:start="115:13" pos:end="115:13"><literal type="number" pos:start="115:13" pos:end="115:13">4</literal></expr></argument>, <argument pos:start="115:16" pos:end="115:16"><expr pos:start="115:16" pos:end="115:16"><literal type="number" pos:start="115:16" pos:end="115:16">0</literal></expr></argument>, <argument pos:start="115:19" pos:end="115:19"><expr pos:start="115:19" pos:end="115:19"><literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr></argument>, <argument pos:start="115:22" pos:end="115:22"><expr pos:start="115:22" pos:end="115:22"><literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr></argument>, <argument pos:start="115:25" pos:end="115:25"><expr pos:start="115:25" pos:end="115:25"><literal type="number" pos:start="115:25" pos:end="115:25">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:29" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:71">

            <expr_stmt pos:start="117:13" pos:end="117:71"><expr pos:start="117:13" pos:end="117:70"><call pos:start="117:13" pos:end="117:70"><name pos:start="117:13" pos:end="117:19">fprintf</name><argument_list pos:start="117:20" pos:end="117:70">(<argument pos:start="117:21" pos:end="117:26"><expr pos:start="117:21" pos:end="117:26"><name pos:start="117:21" pos:end="117:26">stderr</name></expr></argument>, <argument pos:start="117:29" pos:end="117:69"><expr pos:start="117:29" pos:end="117:69"><literal type="string" pos:start="117:29" pos:end="117:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if>

    <else pos:start="123:5" pos:end="131:5">else <block pos:start="123:10" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:21">

	<comment type="block" pos:start="125:9" pos:end="125:23">/* not fatal */</comment>

        <expr_stmt pos:start="127:9" pos:end="129:21"><expr pos:start="127:9" pos:end="129:20"><call pos:start="127:9" pos:end="129:20"><name pos:start="127:9" pos:end="127:15">fprintf</name><argument_list pos:start="127:16" pos:end="129:20">(<argument pos:start="127:17" pos:end="127:22"><expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:22">stderr</name></expr></argument>, <argument pos:start="127:25" pos:end="127:72"><expr pos:start="127:25" pos:end="127:72"><literal type="string" pos:start="127:25" pos:end="127:72">"qemu: Warning, could not load MIPS bios '%s'\n"</literal></expr></argument>,

		<argument pos:start="129:17" pos:end="129:19"><expr pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="135:5" pos:end="147:5"><if pos:start="135:5" pos:end="147:5">if <condition pos:start="135:8" pos:end="135:24">(<expr pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:23">kernel_filename</name></expr>)</condition> <block pos:start="135:26" pos:end="147:5">{<block_content pos:start="137:9" pos:end="145:26">

        <expr_stmt pos:start="137:9" pos:end="137:41"><expr pos:start="137:9" pos:end="137:40"><name pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:20">loaderparams</name><operator pos:start="137:21" pos:end="137:21">.</operator><name pos:start="137:22" pos:end="137:29">ram_size</name></name> <operator pos:start="137:31" pos:end="137:31">=</operator> <name pos:start="137:33" pos:end="137:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:55"><expr pos:start="139:9" pos:end="139:54"><name pos:start="139:9" pos:end="139:36"><name pos:start="139:9" pos:end="139:20">loaderparams</name><operator pos:start="139:21" pos:end="139:21">.</operator><name pos:start="139:22" pos:end="139:36">kernel_filename</name></name> <operator pos:start="139:38" pos:end="139:38">=</operator> <name pos:start="139:40" pos:end="139:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:53"><expr pos:start="141:9" pos:end="141:52"><name pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:20">loaderparams</name><operator pos:start="141:21" pos:end="141:21">.</operator><name pos:start="141:22" pos:end="141:35">kernel_cmdline</name></name> <operator pos:start="141:37" pos:end="141:37">=</operator> <name pos:start="141:39" pos:end="141:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:55"><expr pos:start="143:9" pos:end="143:54"><name pos:start="143:9" pos:end="143:36"><name pos:start="143:9" pos:end="143:20">loaderparams</name><operator pos:start="143:21" pos:end="143:21">.</operator><name pos:start="143:22" pos:end="143:36">initrd_filename</name></name> <operator pos:start="143:38" pos:end="143:38">=</operator> <name pos:start="143:40" pos:end="143:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:26"><expr pos:start="145:9" pos:end="145:25"><call pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:19">load_kernel</name> <argument_list pos:start="145:21" pos:end="145:25">(<argument pos:start="145:22" pos:end="145:24"><expr pos:start="145:22" pos:end="145:24"><name pos:start="145:22" pos:end="145:24">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:35">/* Init CPU internal devices */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:31"><expr pos:start="153:5" pos:end="153:30"><call pos:start="153:5" pos:end="153:30"><name pos:start="153:5" pos:end="153:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="153:26" pos:end="153:30">(<argument pos:start="153:27" pos:end="153:29"><expr pos:start="153:27" pos:end="153:29"><name pos:start="153:27" pos:end="153:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:29"><expr pos:start="155:5" pos:end="155:28"><call pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:23">cpu_mips_clock_init</name><argument_list pos:start="155:24" pos:end="155:28">(<argument pos:start="155:25" pos:end="155:27"><expr pos:start="155:25" pos:end="155:27"><name pos:start="155:25" pos:end="155:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:54">/* The PIC is attached to the MIPS CPU INT0 pin */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:36"><expr pos:start="161:5" pos:end="161:35"><name pos:start="161:5" pos:end="161:9">i8259</name> <operator pos:start="161:11" pos:end="161:11">=</operator> <call pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:22">i8259_init</name><argument_list pos:start="161:23" pos:end="161:35">(<argument pos:start="161:24" pos:end="161:34"><expr pos:start="161:24" pos:end="161:34"><name pos:start="161:24" pos:end="161:34"><name pos:start="161:24" pos:end="161:26">env</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:31">irq</name><index pos:start="161:32" pos:end="161:34">[<expr pos:start="161:33" pos:end="161:33"><literal type="number" pos:start="161:33" pos:end="161:33">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:41"><expr pos:start="165:5" pos:end="165:40"><name pos:start="165:5" pos:end="165:13">rtc_state</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <call pos:start="165:17" pos:end="165:40"><name pos:start="165:17" pos:end="165:24">rtc_init</name><argument_list pos:start="165:25" pos:end="165:40">(<argument pos:start="165:26" pos:end="165:29"><expr pos:start="165:26" pos:end="165:29"><literal type="number" pos:start="165:26" pos:end="165:29">0x70</literal></expr></argument>, <argument pos:start="165:32" pos:end="165:39"><expr pos:start="165:32" pos:end="165:39"><name pos:start="165:32" pos:end="165:39"><name pos:start="165:32" pos:end="165:36">i8259</name><index pos:start="165:37" pos:end="165:39">[<expr pos:start="165:38" pos:end="165:38"><literal type="number" pos:start="165:38" pos:end="165:38">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:54">/* Register 64 KB of ISA IO space at 0x14000000 */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:42"><expr pos:start="171:5" pos:end="171:41"><call pos:start="171:5" pos:end="171:41"><name pos:start="171:5" pos:end="171:17">isa_mmio_init</name><argument_list pos:start="171:18" pos:end="171:41">(<argument pos:start="171:19" pos:end="171:28"><expr pos:start="171:19" pos:end="171:28"><literal type="number" pos:start="171:19" pos:end="171:28">0x14000000</literal></expr></argument>, <argument pos:start="171:31" pos:end="171:40"><expr pos:start="171:31" pos:end="171:40"><literal type="number" pos:start="171:31" pos:end="171:40">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:30"><expr pos:start="173:5" pos:end="173:29"><name pos:start="173:5" pos:end="173:16">isa_mem_base</name> <operator pos:start="173:18" pos:end="173:18">=</operator> <literal type="number" pos:start="173:20" pos:end="173:29">0x10000000</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:35"><expr pos:start="177:5" pos:end="177:34"><name pos:start="177:5" pos:end="177:7">pit</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="177:34"><name pos:start="177:11" pos:end="177:18">pit_init</name><argument_list pos:start="177:19" pos:end="177:34">(<argument pos:start="177:20" pos:end="177:23"><expr pos:start="177:20" pos:end="177:23"><literal type="number" pos:start="177:20" pos:end="177:23">0x40</literal></expr></argument>, <argument pos:start="177:26" pos:end="177:33"><expr pos:start="177:26" pos:end="177:33"><name pos:start="177:26" pos:end="177:33"><name pos:start="177:26" pos:end="177:30">i8259</name><index pos:start="177:31" pos:end="177:33">[<expr pos:start="177:32" pos:end="177:32"><literal type="number" pos:start="177:32" pos:end="177:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="181:5" pos:end="191:5">for<control pos:start="181:8" pos:end="181:41">(<init pos:start="181:9" pos:end="181:14"><expr pos:start="181:9" pos:end="181:13"><name pos:start="181:9" pos:end="181:9">i</name> <operator pos:start="181:11" pos:end="181:11">=</operator> <literal type="number" pos:start="181:13" pos:end="181:13">0</literal></expr>;</init> <condition pos:start="181:16" pos:end="181:36"><expr pos:start="181:16" pos:end="181:35"><name pos:start="181:16" pos:end="181:16">i</name> <operator pos:start="181:18" pos:end="181:18">&lt;</operator> <name pos:start="181:20" pos:end="181:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="181:38" pos:end="181:40"><expr pos:start="181:38" pos:end="181:40"><name pos:start="181:38" pos:end="181:38">i</name><operator pos:start="181:39" pos:end="181:40">++</operator></expr></incr>)</control> <block pos:start="181:43" pos:end="191:5">{<block_content pos:start="183:9" pos:end="189:9">

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:26">(<expr pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:22">serial_hds</name><index pos:start="183:23" pos:end="183:25">[<expr pos:start="183:24" pos:end="183:24"><name pos:start="183:24" pos:end="183:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="183:28" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:39">

            <expr_stmt pos:start="185:13" pos:end="187:39"><expr pos:start="185:13" pos:end="187:38"><call pos:start="185:13" pos:end="187:38"><name pos:start="185:13" pos:end="185:23">serial_init</name><argument_list pos:start="185:24" pos:end="187:38">(<argument pos:start="185:25" pos:end="185:36"><expr pos:start="185:25" pos:end="185:36"><name pos:start="185:25" pos:end="185:36"><name pos:start="185:25" pos:end="185:33">serial_io</name><index pos:start="185:34" pos:end="185:36">[<expr pos:start="185:35" pos:end="185:35"><name pos:start="185:35" pos:end="185:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="185:39" pos:end="185:58"><expr pos:start="185:39" pos:end="185:58"><name pos:start="185:39" pos:end="185:58"><name pos:start="185:39" pos:end="185:43">i8259</name><index pos:start="185:44" pos:end="185:58">[<expr pos:start="185:45" pos:end="185:57"><name pos:start="185:45" pos:end="185:57"><name pos:start="185:45" pos:end="185:54">serial_irq</name><index pos:start="185:55" pos:end="185:57">[<expr pos:start="185:56" pos:end="185:56"><name pos:start="185:56" pos:end="185:56">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="185:61" pos:end="185:66"><expr pos:start="185:61" pos:end="185:66"><literal type="number" pos:start="185:61" pos:end="185:66">115200</literal></expr></argument>,

                        <argument pos:start="187:25" pos:end="187:37"><expr pos:start="187:25" pos:end="187:37"><name pos:start="187:25" pos:end="187:37"><name pos:start="187:25" pos:end="187:34">serial_hds</name><index pos:start="187:35" pos:end="187:37">[<expr pos:start="187:36" pos:end="187:36"><name pos:start="187:36" pos:end="187:36">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="195:5" pos:end="197:31"><expr pos:start="195:5" pos:end="197:30"><call pos:start="195:5" pos:end="197:30"><name pos:start="195:5" pos:end="195:16">isa_vga_init</name><argument_list pos:start="195:17" pos:end="197:30">(<argument pos:start="195:18" pos:end="195:19"><expr pos:start="195:18" pos:end="195:19"><name pos:start="195:18" pos:end="195:19">ds</name></expr></argument>, <argument pos:start="195:22" pos:end="195:45"><expr pos:start="195:22" pos:end="195:45"><name pos:start="195:22" pos:end="195:34">phys_ram_base</name> <operator pos:start="195:36" pos:end="195:36">+</operator> <name pos:start="195:38" pos:end="195:45">ram_size</name></expr></argument>, <argument pos:start="195:48" pos:end="195:55"><expr pos:start="195:48" pos:end="195:55"><name pos:start="195:48" pos:end="195:55">ram_size</name></expr></argument>,

                 <argument pos:start="197:18" pos:end="197:29"><expr pos:start="197:18" pos:end="197:29"><name pos:start="197:18" pos:end="197:29">vga_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="227:5"><if pos:start="201:5" pos:end="227:5">if <condition pos:start="201:8" pos:end="201:25">(<expr pos:start="201:9" pos:end="201:24"><name pos:start="201:9" pos:end="201:19"><name pos:start="201:9" pos:end="201:16">nd_table</name><index pos:start="201:17" pos:end="201:19">[<expr pos:start="201:18" pos:end="201:18"><literal type="number" pos:start="201:18" pos:end="201:18">0</literal></expr>]</index></name><operator pos:start="201:20" pos:end="201:20">.</operator><name pos:start="201:21" pos:end="201:24">vlan</name></expr>)</condition> <block pos:start="201:27" pos:end="227:5">{<block_content pos:start="203:9" pos:end="225:9">

        <if_stmt pos:start="203:9" pos:end="207:9"><if pos:start="203:9" pos:end="207:9">if <condition pos:start="203:12" pos:end="203:38">(<expr pos:start="203:13" pos:end="203:37"><name pos:start="203:13" pos:end="203:23"><name pos:start="203:13" pos:end="203:20">nd_table</name><index pos:start="203:21" pos:end="203:23">[<expr pos:start="203:22" pos:end="203:22"><name pos:start="203:22" pos:end="203:22">i</name></expr>]</index></name><operator pos:start="203:24" pos:end="203:24">.</operator><name pos:start="203:25" pos:end="203:29">model</name> <operator pos:start="203:31" pos:end="203:32">==</operator> <name pos:start="203:34" pos:end="203:37">NULL</name></expr>)</condition> <block pos:start="203:40" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:43">

	    <expr_stmt pos:start="205:13" pos:end="205:43"><expr pos:start="205:13" pos:end="205:42"><name pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:20">nd_table</name><index pos:start="205:21" pos:end="205:23">[<expr pos:start="205:22" pos:end="205:22"><name pos:start="205:22" pos:end="205:22">i</name></expr>]</index></name><operator pos:start="205:24" pos:end="205:24">.</operator><name pos:start="205:25" pos:end="205:29">model</name> <operator pos:start="205:31" pos:end="205:31">=</operator> <literal type="string" pos:start="205:33" pos:end="205:42">"ne2k_isa"</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="209:9" pos:end="225:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:55">(<expr pos:start="209:13" pos:end="209:54"><call pos:start="209:13" pos:end="209:49"><name pos:start="209:13" pos:end="209:18">strcmp</name><argument_list pos:start="209:19" pos:end="209:49">(<argument pos:start="209:20" pos:end="209:36"><expr pos:start="209:20" pos:end="209:36"><name pos:start="209:20" pos:end="209:30"><name pos:start="209:20" pos:end="209:27">nd_table</name><index pos:start="209:28" pos:end="209:30">[<expr pos:start="209:29" pos:end="209:29"><literal type="number" pos:start="209:29" pos:end="209:29">0</literal></expr>]</index></name><operator pos:start="209:31" pos:end="209:31">.</operator><name pos:start="209:32" pos:end="209:36">model</name></expr></argument>, <argument pos:start="209:39" pos:end="209:48"><expr pos:start="209:39" pos:end="209:48"><literal type="string" pos:start="209:39" pos:end="209:48">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="209:51" pos:end="209:52">==</operator> <literal type="number" pos:start="209:54" pos:end="209:54">0</literal></expr>)</condition> <block pos:start="209:57" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:59">

            <expr_stmt pos:start="211:13" pos:end="211:59"><expr pos:start="211:13" pos:end="211:58"><call pos:start="211:13" pos:end="211:58"><name pos:start="211:13" pos:end="211:27">isa_ne2000_init</name><argument_list pos:start="211:28" pos:end="211:58">(<argument pos:start="211:29" pos:end="211:33"><expr pos:start="211:29" pos:end="211:33"><literal type="number" pos:start="211:29" pos:end="211:33">0x300</literal></expr></argument>, <argument pos:start="211:36" pos:end="211:43"><expr pos:start="211:36" pos:end="211:43"><name pos:start="211:36" pos:end="211:43"><name pos:start="211:36" pos:end="211:40">i8259</name><index pos:start="211:41" pos:end="211:43">[<expr pos:start="211:42" pos:end="211:42"><literal type="number" pos:start="211:42" pos:end="211:42">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="211:46" pos:end="211:57"><expr pos:start="211:46" pos:end="211:57"><operator pos:start="211:46" pos:end="211:46">&amp;</operator><name pos:start="211:47" pos:end="211:57"><name pos:start="211:47" pos:end="211:54">nd_table</name><index pos:start="211:55" pos:end="211:57">[<expr pos:start="211:56" pos:end="211:56"><literal type="number" pos:start="211:56" pos:end="211:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="213:11" pos:end="219:9">else if <condition pos:start="213:19" pos:end="213:55">(<expr pos:start="213:20" pos:end="213:54"><call pos:start="213:20" pos:end="213:49"><name pos:start="213:20" pos:end="213:25">strcmp</name><argument_list pos:start="213:26" pos:end="213:49">(<argument pos:start="213:27" pos:end="213:43"><expr pos:start="213:27" pos:end="213:43"><name pos:start="213:27" pos:end="213:37"><name pos:start="213:27" pos:end="213:34">nd_table</name><index pos:start="213:35" pos:end="213:37">[<expr pos:start="213:36" pos:end="213:36"><literal type="number" pos:start="213:36" pos:end="213:36">0</literal></expr>]</index></name><operator pos:start="213:38" pos:end="213:38">.</operator><name pos:start="213:39" pos:end="213:43">model</name></expr></argument>, <argument pos:start="213:46" pos:end="213:48"><expr pos:start="213:46" pos:end="213:48"><literal type="string" pos:start="213:46" pos:end="213:48">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="213:51" pos:end="213:52">==</operator> <literal type="number" pos:start="213:54" pos:end="213:54">0</literal></expr>)</condition> <block pos:start="213:57" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:21">

            <expr_stmt pos:start="215:13" pos:end="215:64"><expr pos:start="215:13" pos:end="215:63"><call pos:start="215:13" pos:end="215:63"><name pos:start="215:13" pos:end="215:19">fprintf</name><argument_list pos:start="215:20" pos:end="215:63">(<argument pos:start="215:21" pos:end="215:26"><expr pos:start="215:21" pos:end="215:26"><name pos:start="215:21" pos:end="215:26">stderr</name></expr></argument>, <argument pos:start="215:29" pos:end="215:62"><expr pos:start="215:29" pos:end="215:62"><literal type="string" pos:start="215:29" pos:end="215:62">"qemu: Supported NICs: ne2k_isa\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:21"><expr pos:start="217:13" pos:end="217:20"><call pos:start="217:13" pos:end="217:20"><name pos:start="217:13" pos:end="217:16">exit</name> <argument_list pos:start="217:18" pos:end="217:20">(<argument pos:start="217:19" pos:end="217:19"><expr pos:start="217:19" pos:end="217:19"><literal type="number" pos:start="217:19" pos:end="217:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="219:11" pos:end="225:9">else <block pos:start="219:16" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:21">

            <expr_stmt pos:start="221:13" pos:end="221:78"><expr pos:start="221:13" pos:end="221:77"><call pos:start="221:13" pos:end="221:77"><name pos:start="221:13" pos:end="221:19">fprintf</name><argument_list pos:start="221:20" pos:end="221:77">(<argument pos:start="221:21" pos:end="221:26"><expr pos:start="221:21" pos:end="221:26"><name pos:start="221:21" pos:end="221:26">stderr</name></expr></argument>, <argument pos:start="221:29" pos:end="221:57"><expr pos:start="221:29" pos:end="221:57"><literal type="string" pos:start="221:29" pos:end="221:57">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="221:60" pos:end="221:76"><expr pos:start="221:60" pos:end="221:76"><name pos:start="221:60" pos:end="221:70"><name pos:start="221:60" pos:end="221:67">nd_table</name><index pos:start="221:68" pos:end="221:70">[<expr pos:start="221:69" pos:end="221:69"><literal type="number" pos:start="221:69" pos:end="221:69">0</literal></expr>]</index></name><operator pos:start="221:71" pos:end="221:71">.</operator><name pos:start="221:72" pos:end="221:76">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:21"><expr pos:start="223:13" pos:end="223:20"><call pos:start="223:13" pos:end="223:20"><name pos:start="223:13" pos:end="223:16">exit</name> <argument_list pos:start="223:18" pos:end="223:20">(<argument pos:start="223:19" pos:end="223:19"><expr pos:start="223:19" pos:end="223:19"><literal type="number" pos:start="223:19" pos:end="223:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:49">(<expr pos:start="231:9" pos:end="231:48"><call pos:start="231:9" pos:end="231:33"><name pos:start="231:9" pos:end="231:25">drive_get_max_bus</name><argument_list pos:start="231:26" pos:end="231:33">(<argument pos:start="231:27" pos:end="231:32"><expr pos:start="231:27" pos:end="231:32"><name pos:start="231:27" pos:end="231:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="231:35" pos:end="231:36">&gt;=</operator> <name pos:start="231:38" pos:end="231:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="231:51" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:16">

        <expr_stmt pos:start="233:9" pos:end="233:52"><expr pos:start="233:9" pos:end="233:51"><call pos:start="233:9" pos:end="233:51"><name pos:start="233:9" pos:end="233:15">fprintf</name><argument_list pos:start="233:16" pos:end="233:51">(<argument pos:start="233:17" pos:end="233:22"><expr pos:start="233:17" pos:end="233:22"><name pos:start="233:17" pos:end="233:22">stderr</name></expr></argument>, <argument pos:start="233:25" pos:end="233:50"><expr pos:start="233:25" pos:end="233:50"><literal type="string" pos:start="233:25" pos:end="233:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:16"><expr pos:start="235:9" pos:end="235:15"><call pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:12">exit</name><argument_list pos:start="235:13" pos:end="235:15">(<argument pos:start="235:14" pos:end="235:14"><expr pos:start="235:14" pos:end="235:14"><literal type="number" pos:start="235:14" pos:end="235:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="241:5" pos:end="253:5">for<control pos:start="241:8" pos:end="241:51">(<init pos:start="241:9" pos:end="241:14"><expr pos:start="241:9" pos:end="241:13"><name pos:start="241:9" pos:end="241:9">i</name> <operator pos:start="241:11" pos:end="241:11">=</operator> <literal type="number" pos:start="241:13" pos:end="241:13">0</literal></expr>;</init> <condition pos:start="241:16" pos:end="241:46"><expr pos:start="241:16" pos:end="241:45"><name pos:start="241:16" pos:end="241:16">i</name> <operator pos:start="241:18" pos:end="241:18">&lt;</operator> <name pos:start="241:20" pos:end="241:30">MAX_IDE_BUS</name> <operator pos:start="241:32" pos:end="241:32">*</operator> <name pos:start="241:34" pos:end="241:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="241:48" pos:end="241:50"><expr pos:start="241:48" pos:end="241:50"><name pos:start="241:48" pos:end="241:48">i</name><operator pos:start="241:49" pos:end="241:50">++</operator></expr></incr>)</control> <block pos:start="241:53" pos:end="253:5">{<block_content pos:start="243:9" pos:end="251:25">

        <expr_stmt pos:start="243:9" pos:end="243:76"><expr pos:start="243:9" pos:end="243:75"><name pos:start="243:9" pos:end="243:13">index</name> <operator pos:start="243:15" pos:end="243:15">=</operator> <call pos:start="243:17" pos:end="243:75"><name pos:start="243:17" pos:end="243:31">drive_get_index</name><argument_list pos:start="243:32" pos:end="243:75">(<argument pos:start="243:33" pos:end="243:38"><expr pos:start="243:33" pos:end="243:38"><name pos:start="243:33" pos:end="243:38">IF_IDE</name></expr></argument>, <argument pos:start="243:41" pos:end="243:56"><expr pos:start="243:41" pos:end="243:56"><name pos:start="243:41" pos:end="243:41">i</name> <operator pos:start="243:43" pos:end="243:43">/</operator> <name pos:start="243:45" pos:end="243:56">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="243:59" pos:end="243:74"><expr pos:start="243:59" pos:end="243:74"><name pos:start="243:59" pos:end="243:59">i</name> <operator pos:start="243:61" pos:end="243:61">%</operator> <name pos:start="243:63" pos:end="243:74">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="245:9" pos:end="251:25"><if pos:start="245:9" pos:end="247:45">if <condition pos:start="245:12" pos:end="245:24">(<expr pos:start="245:13" pos:end="245:23"><name pos:start="245:13" pos:end="245:17">index</name> <operator pos:start="245:19" pos:end="245:20">!=</operator> <operator pos:start="245:22" pos:end="245:22">-</operator><literal type="number" pos:start="245:23" pos:end="245:23">1</literal></expr>)</condition><block type="pseudo" pos:start="247:13" pos:end="247:45"><block_content pos:start="247:13" pos:end="247:45">

            <expr_stmt pos:start="247:13" pos:end="247:45"><expr pos:start="247:13" pos:end="247:44"><name pos:start="247:13" pos:end="247:17"><name pos:start="247:13" pos:end="247:14">hd</name><index pos:start="247:15" pos:end="247:17">[<expr pos:start="247:16" pos:end="247:16"><name pos:start="247:16" pos:end="247:16">i</name></expr>]</index></name> <operator pos:start="247:19" pos:end="247:19">=</operator> <name pos:start="247:21" pos:end="247:39"><name pos:start="247:21" pos:end="247:32">drives_table</name><index pos:start="247:33" pos:end="247:39">[<expr pos:start="247:34" pos:end="247:38"><name pos:start="247:34" pos:end="247:38">index</name></expr>]</index></name><operator pos:start="247:40" pos:end="247:40">.</operator><name pos:start="247:41" pos:end="247:44">bdrv</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="249:9" pos:end="251:25">else<block type="pseudo" pos:start="251:13" pos:end="251:25"><block_content pos:start="251:13" pos:end="251:25">

            <expr_stmt pos:start="251:13" pos:end="251:25"><expr pos:start="251:13" pos:end="251:24"><name pos:start="251:13" pos:end="251:17"><name pos:start="251:13" pos:end="251:14">hd</name><index pos:start="251:15" pos:end="251:17">[<expr pos:start="251:16" pos:end="251:16"><name pos:start="251:16" pos:end="251:16">i</name></expr>]</index></name> <operator pos:start="251:19" pos:end="251:19">=</operator> <name pos:start="251:21" pos:end="251:24">NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <for pos:start="257:5" pos:end="263:47">for<control pos:start="257:8" pos:end="257:36">(<init pos:start="257:9" pos:end="257:14"><expr pos:start="257:9" pos:end="257:13"><name pos:start="257:9" pos:end="257:9">i</name> <operator pos:start="257:11" pos:end="257:11">=</operator> <literal type="number" pos:start="257:13" pos:end="257:13">0</literal></expr>;</init> <condition pos:start="257:16" pos:end="257:31"><expr pos:start="257:16" pos:end="257:30"><name pos:start="257:16" pos:end="257:16">i</name> <operator pos:start="257:18" pos:end="257:18">&lt;</operator> <name pos:start="257:20" pos:end="257:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="257:33" pos:end="257:35"><expr pos:start="257:33" pos:end="257:35"><name pos:start="257:33" pos:end="257:33">i</name><operator pos:start="257:34" pos:end="257:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="259:9" pos:end="263:47"><block_content pos:start="259:9" pos:end="263:47">

        <expr_stmt pos:start="259:9" pos:end="263:47"><expr pos:start="259:9" pos:end="263:46"><call pos:start="259:9" pos:end="263:46"><name pos:start="259:9" pos:end="259:20">isa_ide_init</name><argument_list pos:start="259:21" pos:end="263:46">(<argument pos:start="259:22" pos:end="259:34"><expr pos:start="259:22" pos:end="259:34"><name pos:start="259:22" pos:end="259:34"><name pos:start="259:22" pos:end="259:31">ide_iobase</name><index pos:start="259:32" pos:end="259:34">[<expr pos:start="259:33" pos:end="259:33"><name pos:start="259:33" pos:end="259:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="259:37" pos:end="259:50"><expr pos:start="259:37" pos:end="259:50"><name pos:start="259:37" pos:end="259:50"><name pos:start="259:37" pos:end="259:47">ide_iobase2</name><index pos:start="259:48" pos:end="259:50">[<expr pos:start="259:49" pos:end="259:49"><name pos:start="259:49" pos:end="259:49">i</name></expr>]</index></name></expr></argument>, <argument pos:start="259:53" pos:end="259:69"><expr pos:start="259:53" pos:end="259:69"><name pos:start="259:53" pos:end="259:69"><name pos:start="259:53" pos:end="259:57">i8259</name><index pos:start="259:58" pos:end="259:69">[<expr pos:start="259:59" pos:end="259:68"><name pos:start="259:59" pos:end="259:68"><name pos:start="259:59" pos:end="259:65">ide_irq</name><index pos:start="259:66" pos:end="259:68">[<expr pos:start="259:67" pos:end="259:67"><name pos:start="259:67" pos:end="259:67">i</name></expr>]</index></name></expr>]</index></name></expr></argument>,

                     <argument pos:start="261:22" pos:end="261:41"><expr pos:start="261:22" pos:end="261:41"><name pos:start="261:22" pos:end="261:41"><name pos:start="261:22" pos:end="261:23">hd</name><index pos:start="261:24" pos:end="261:41">[<expr pos:start="261:25" pos:end="261:40"><name pos:start="261:25" pos:end="261:36">MAX_IDE_DEVS</name> <operator pos:start="261:38" pos:end="261:38">*</operator> <name pos:start="261:40" pos:end="261:40">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="263:22" pos:end="263:45"><expr pos:start="263:22" pos:end="263:45"><name pos:start="263:22" pos:end="263:45"><name pos:start="263:22" pos:end="263:23">hd</name><index pos:start="263:24" pos:end="263:45">[<expr pos:start="263:25" pos:end="263:44"><name pos:start="263:25" pos:end="263:36">MAX_IDE_DEVS</name> <operator pos:start="263:38" pos:end="263:38">*</operator> <name pos:start="263:40" pos:end="263:40">i</name> <operator pos:start="263:42" pos:end="263:42">+</operator> <literal type="number" pos:start="263:44" pos:end="263:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="267:5" pos:end="267:42"><expr pos:start="267:5" pos:end="267:41"><call pos:start="267:5" pos:end="267:41"><name pos:start="267:5" pos:end="267:14">i8042_init</name><argument_list pos:start="267:15" pos:end="267:41">(<argument pos:start="267:16" pos:end="267:23"><expr pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:20">i8259</name><index pos:start="267:21" pos:end="267:23">[<expr pos:start="267:22" pos:end="267:22"><literal type="number" pos:start="267:22" pos:end="267:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="267:26" pos:end="267:34"><expr pos:start="267:26" pos:end="267:34"><name pos:start="267:26" pos:end="267:34"><name pos:start="267:26" pos:end="267:30">i8259</name><index pos:start="267:31" pos:end="267:34">[<expr pos:start="267:32" pos:end="267:33"><literal type="number" pos:start="267:32" pos:end="267:33">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="267:37" pos:end="267:40"><expr pos:start="267:37" pos:end="267:40"><literal type="number" pos:start="267:37" pos:end="267:40">0x60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
