<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3635.c" pos:tabs="8"><function pos:start="1:1" pos:end="357:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">get_nb_samples</name><parameter_list pos:start="1:26" pos:end="3:83">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><name pos:start="1:50" pos:end="1:63">GetByteContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">gb</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:38">buf_size</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:58">coded_samples</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:82"><decl pos:start="3:61" pos:end="3:82"><type pos:start="3:61" pos:end="3:82"><name pos:start="3:61" pos:end="3:63">int</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:82">approx_nb_samples</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="357:1">{<block_content pos:start="7:5" pos:end="355:22">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">ADPCMDecodeContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">nb_samples</name>        <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">ch</name>                <init pos:start="11:27" pos:end="11:43">= <expr pos:start="11:29" pos:end="11:43"><name pos:start="11:29" pos:end="11:43"><name pos:start="11:29" pos:end="11:33">avctx</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:43">channels</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:25">has_coded_samples</name> <init pos:start="13:27" pos:end="13:29">= <expr pos:start="13:29" pos:end="13:29"><literal type="number" pos:start="13:29" pos:end="13:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">header_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:18">coded_samples</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><operator pos:start="21:5" pos:end="21:5">*</operator><name pos:start="21:6" pos:end="21:22">approx_nb_samples</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:17"><if pos:start="25:5" pos:end="27:17">if<condition pos:start="25:7" pos:end="25:15">(<expr pos:start="25:8" pos:end="25:14"><name pos:start="25:8" pos:end="25:9">ch</name> <operator pos:start="25:11" pos:end="25:12">&lt;=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <switch pos:start="31:5" pos:end="73:5">switch <condition pos:start="31:12" pos:end="31:29">(<expr pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:17">avctx</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:24">codec</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:28">id</name></name></expr>)</condition> <block pos:start="31:31" pos:end="73:5">{<block_content pos:start="35:5" pos:end="71:14">

    <comment type="block" pos:start="33:5" pos:end="33:39">/* constant, only check buf_size */</comment>

    <case pos:start="35:5" pos:end="35:34">case <expr pos:start="35:10" pos:end="35:33"><name pos:start="35:10" pos:end="35:33">AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>

        <if_stmt pos:start="37:9" pos:end="39:21"><if pos:start="37:9" pos:end="39:21">if <condition pos:start="37:12" pos:end="37:31">(<expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:20">buf_size</name> <operator pos:start="37:22" pos:end="37:22">&lt;</operator> <literal type="number" pos:start="37:24" pos:end="37:25">76</literal> <operator pos:start="37:27" pos:end="37:27">*</operator> <name pos:start="37:29" pos:end="37:30">ch</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:21"><block_content pos:start="39:13" pos:end="39:21">

            <return pos:start="39:13" pos:end="39:21">return <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:25"><expr pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:18">nb_samples</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:24">128</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:34">case <expr pos:start="45:10" pos:end="45:33"><name pos:start="45:10" pos:end="45:33">AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

        <if_stmt pos:start="47:9" pos:end="49:21"><if pos:start="47:9" pos:end="49:21">if <condition pos:start="47:12" pos:end="47:31">(<expr pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:20">buf_size</name> <operator pos:start="47:22" pos:end="47:22">&lt;</operator> <literal type="number" pos:start="47:24" pos:end="47:25">34</literal> <operator pos:start="47:27" pos:end="47:27">*</operator> <name pos:start="47:29" pos:end="47:30">ch</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:21"><block_content pos:start="49:13" pos:end="49:21">

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:18">nb_samples</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:23">64</literal></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <comment type="block" pos:start="55:5" pos:end="55:28">/* simple 4-bit adpcm */</comment>

    <case pos:start="57:5" pos:end="57:30">case <expr pos:start="57:10" pos:end="57:29"><name pos:start="57:10" pos:end="57:29">AV_CODEC_ID_ADPCM_CT</name></expr>:</case>

    <case pos:start="59:5" pos:end="59:35">case <expr pos:start="59:10" pos:end="59:34"><name pos:start="59:10" pos:end="59:34">AV_CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>

    <case pos:start="61:5" pos:end="61:39">case <expr pos:start="61:10" pos:end="61:38"><name pos:start="61:10" pos:end="61:38">AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>

    <case pos:start="63:5" pos:end="63:35">case <expr pos:start="63:10" pos:end="63:34"><name pos:start="63:10" pos:end="63:34">AV_CODEC_ID_ADPCM_IMA_OKI</name></expr>:</case>

    <case pos:start="65:5" pos:end="65:34">case <expr pos:start="65:10" pos:end="65:33"><name pos:start="65:10" pos:end="65:33">AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:34">case <expr pos:start="67:10" pos:end="67:33"><name pos:start="67:10" pos:end="67:33">AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:18">nb_samples</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:29">buf_size</name> <operator pos:start="69:31" pos:end="69:31">*</operator> <literal type="number" pos:start="69:33" pos:end="69:33">2</literal> <operator pos:start="69:35" pos:end="69:35">/</operator> <name pos:start="69:37" pos:end="69:38">ch</name></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="75:5" pos:end="77:26"><if pos:start="75:5" pos:end="77:26">if <condition pos:start="75:8" pos:end="75:19">(<expr pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:18">nb_samples</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:26"><block_content pos:start="77:9" pos:end="77:26">

        <return pos:start="77:9" pos:end="77:26">return <expr pos:start="77:16" pos:end="77:25"><name pos:start="77:16" pos:end="77:25">nb_samples</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:41">/* simple 4-bit adpcm, with header */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:20"><expr pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:15">header_size</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>;</expr_stmt>

    <switch pos:start="85:5" pos:end="95:5">switch <condition pos:start="85:12" pos:end="85:29">(<expr pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:17">avctx</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:24">codec</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:28">id</name></name></expr>)</condition> <block pos:start="85:31" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:77">

        <case pos:start="87:9" pos:end="87:35">case <expr pos:start="87:14" pos:end="87:34"><name pos:start="87:14" pos:end="87:34">AV_CODEC_ID_ADPCM_4XM</name></expr>:</case>

        <case pos:start="89:9" pos:end="89:39">case <expr pos:start="89:14" pos:end="89:38"><name pos:start="89:14" pos:end="89:38">AV_CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>     <expr_stmt pos:start="89:45" pos:end="89:65"><expr pos:start="89:45" pos:end="89:64"><name pos:start="89:45" pos:end="89:55">header_size</name> <operator pos:start="89:57" pos:end="89:57">=</operator> <literal type="number" pos:start="89:59" pos:end="89:59">4</literal> <operator pos:start="89:61" pos:end="89:61">*</operator> <name pos:start="89:63" pos:end="89:64">ch</name></expr>;</expr_stmt>      <break pos:start="89:72" pos:end="89:77">break;</break>

        <case pos:start="91:9" pos:end="91:39">case <expr pos:start="91:14" pos:end="91:38"><name pos:start="91:14" pos:end="91:38">AV_CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>     <expr_stmt pos:start="91:45" pos:end="91:60"><expr pos:start="91:45" pos:end="91:59"><name pos:start="91:45" pos:end="91:55">header_size</name> <operator pos:start="91:57" pos:end="91:57">=</operator> <literal type="number" pos:start="91:59" pos:end="91:59">8</literal></expr>;</expr_stmt>           <break pos:start="91:72" pos:end="91:77">break;</break>

        <case pos:start="93:9" pos:end="93:42">case <expr pos:start="93:14" pos:end="93:41"><name pos:start="93:14" pos:end="93:41">AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>  <expr_stmt pos:start="93:45" pos:end="93:65"><expr pos:start="93:45" pos:end="93:64"><name pos:start="93:45" pos:end="93:55">header_size</name> <operator pos:start="93:57" pos:end="93:57">=</operator> <literal type="number" pos:start="93:59" pos:end="93:59">4</literal> <operator pos:start="93:61" pos:end="93:61">*</operator> <name pos:start="93:63" pos:end="93:64">ch</name></expr>;</expr_stmt>      <break pos:start="93:72" pos:end="93:77">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="97:5" pos:end="99:49"><if pos:start="97:5" pos:end="99:49">if <condition pos:start="97:8" pos:end="97:24">(<expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:19">header_size</name> <operator pos:start="97:21" pos:end="97:21">&gt;</operator> <literal type="number" pos:start="97:23" pos:end="97:23">0</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:49"><block_content pos:start="99:9" pos:end="99:49">

        <return pos:start="99:9" pos:end="99:49">return <expr pos:start="99:16" pos:end="99:48"><operator pos:start="99:16" pos:end="99:16">(</operator><name pos:start="99:17" pos:end="99:24">buf_size</name> <operator pos:start="99:26" pos:end="99:26">-</operator> <name pos:start="99:28" pos:end="99:38">header_size</name><operator pos:start="99:39" pos:end="99:39">)</operator> <operator pos:start="99:41" pos:end="99:41">*</operator> <literal type="number" pos:start="99:43" pos:end="99:43">2</literal> <operator pos:start="99:45" pos:end="99:45">/</operator> <name pos:start="99:47" pos:end="99:48">ch</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:30">/* more complex formats */</comment>

    <switch pos:start="105:5" pos:end="343:5">switch <condition pos:start="105:12" pos:end="105:29">(<expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:17">avctx</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:24">codec</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:28">id</name></name></expr>)</condition> <block pos:start="105:31" pos:end="343:5">{<block_content pos:start="107:5" pos:end="341:14">

    <case pos:start="107:5" pos:end="107:30">case <expr pos:start="107:10" pos:end="107:29"><name pos:start="107:10" pos:end="107:29">AV_CODEC_ID_ADPCM_EA</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:25">has_coded_samples</name> <operator pos:start="109:27" pos:end="109:27">=</operator> <literal type="number" pos:start="109:29" pos:end="109:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:51"><expr pos:start="111:9" pos:end="111:50"><operator pos:start="111:9" pos:end="111:9">*</operator><name pos:start="111:10" pos:end="111:22">coded_samples</name>  <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:50"><name pos:start="111:27" pos:end="111:46">bytestream2_get_le32</name><argument_list pos:start="111:47" pos:end="111:50">(<argument pos:start="111:48" pos:end="111:49"><expr pos:start="111:48" pos:end="111:49"><name pos:start="111:48" pos:end="111:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:46"><expr pos:start="113:9" pos:end="113:45"><operator pos:start="113:9" pos:end="113:9">*</operator><name pos:start="113:10" pos:end="113:22">coded_samples</name> <operator pos:start="113:24" pos:end="113:25">-=</operator> <operator pos:start="113:27" pos:end="113:27">*</operator><name pos:start="113:28" pos:end="113:40">coded_samples</name> <operator pos:start="113:42" pos:end="113:42">%</operator> <literal type="number" pos:start="113:44" pos:end="113:45">28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:52"><expr pos:start="115:9" pos:end="115:51"><name pos:start="115:9" pos:end="115:18">nb_samples</name>      <operator pos:start="115:25" pos:end="115:25">=</operator> <operator pos:start="115:27" pos:end="115:27">(</operator><name pos:start="115:28" pos:end="115:35">buf_size</name> <operator pos:start="115:37" pos:end="115:37">-</operator> <literal type="number" pos:start="115:39" pos:end="115:40">12</literal><operator pos:start="115:41" pos:end="115:41">)</operator> <operator pos:start="115:43" pos:end="115:43">/</operator> <literal type="number" pos:start="115:45" pos:end="115:46">30</literal> <operator pos:start="115:48" pos:end="115:48">*</operator> <literal type="number" pos:start="115:50" pos:end="115:51">28</literal></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:39">case <expr pos:start="119:10" pos:end="119:38"><name pos:start="119:10" pos:end="119:38">AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:25">has_coded_samples</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <literal type="number" pos:start="121:29" pos:end="121:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><operator pos:start="123:9" pos:end="123:9">*</operator><name pos:start="123:10" pos:end="123:22">coded_samples</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:49"><name pos:start="123:26" pos:end="123:45">bytestream2_get_le32</name><argument_list pos:start="123:46" pos:end="123:49">(<argument pos:start="123:47" pos:end="123:48"><expr pos:start="123:47" pos:end="123:48"><name pos:start="123:47" pos:end="123:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:60"><expr pos:start="125:9" pos:end="125:59"><name pos:start="125:9" pos:end="125:18">nb_samples</name>     <operator pos:start="125:24" pos:end="125:24">=</operator> <operator pos:start="125:26" pos:end="125:26">(</operator><name pos:start="125:27" pos:end="125:34">buf_size</name> <operator pos:start="125:36" pos:end="125:36">-</operator> <operator pos:start="125:38" pos:end="125:38">(</operator><literal type="number" pos:start="125:39" pos:end="125:41">4</literal> <operator pos:start="125:41" pos:end="125:41">+</operator> <literal type="number" pos:start="125:43" pos:end="125:43">8</literal> <operator pos:start="125:45" pos:end="125:45">*</operator> <name pos:start="125:47" pos:end="125:48">ch</name><operator pos:start="125:49" pos:end="125:49">)</operator><operator pos:start="125:50" pos:end="125:50">)</operator> <operator pos:start="125:52" pos:end="125:52">*</operator> <literal type="number" pos:start="125:54" pos:end="125:54">2</literal> <operator pos:start="125:56" pos:end="125:56">/</operator> <name pos:start="125:58" pos:end="125:59">ch</name></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:39">case <expr pos:start="129:10" pos:end="129:38"><name pos:start="129:10" pos:end="129:38">AV_CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:46"><expr pos:start="131:9" pos:end="131:45"><name pos:start="131:9" pos:end="131:18">nb_samples</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <operator pos:start="131:22" pos:end="131:22">(</operator><name pos:start="131:23" pos:end="131:30">buf_size</name> <operator pos:start="131:32" pos:end="131:32">-</operator> <name pos:start="131:34" pos:end="131:35">ch</name><operator pos:start="131:36" pos:end="131:36">)</operator> <operator pos:start="131:38" pos:end="131:38">/</operator> <name pos:start="131:40" pos:end="131:41">ch</name> <operator pos:start="131:43" pos:end="131:43">*</operator> <literal type="number" pos:start="131:45" pos:end="131:45">2</literal></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:33">case <expr pos:start="135:10" pos:end="135:32"><name pos:start="135:10" pos:end="135:32">AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>

    <case pos:start="137:5" pos:end="137:33">case <expr pos:start="137:10" pos:end="137:32"><name pos:start="137:10" pos:end="137:32">AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>

    <case pos:start="139:5" pos:end="139:33">case <expr pos:start="139:10" pos:end="139:32"><name pos:start="139:10" pos:end="139:32">AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>

        <comment type="block" pos:start="141:9" pos:end="141:39">/* maximum number of samples */</comment>

        <comment type="block" pos:start="143:9" pos:end="143:78">/* has internal offsets and a per-frame switch to signal raw 16-bit */</comment>

        <expr_stmt pos:start="145:9" pos:end="145:30"><expr pos:start="145:9" pos:end="145:29"><name pos:start="145:9" pos:end="145:25">has_coded_samples</name> <operator pos:start="145:27" pos:end="145:27">=</operator> <literal type="number" pos:start="145:29" pos:end="145:29">1</literal></expr>;</expr_stmt>

        <switch pos:start="147:9" pos:end="173:9">switch <condition pos:start="147:16" pos:end="147:33">(<expr pos:start="147:17" pos:end="147:32"><name pos:start="147:17" pos:end="147:32"><name pos:start="147:17" pos:end="147:21">avctx</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:28">codec</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:32">id</name></name></expr>)</condition> <block pos:start="147:35" pos:end="173:9">{<block_content pos:start="149:9" pos:end="171:18">

        <case pos:start="149:9" pos:end="149:37">case <expr pos:start="149:14" pos:end="149:36"><name pos:start="149:14" pos:end="149:36">AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:40"><expr pos:start="151:13" pos:end="151:39"><name pos:start="151:13" pos:end="151:23">header_size</name>    <operator pos:start="151:28" pos:end="151:28">=</operator> <literal type="number" pos:start="151:30" pos:end="151:32">4</literal> <operator pos:start="151:32" pos:end="151:32">+</operator> <literal type="number" pos:start="151:34" pos:end="151:34">9</literal> <operator pos:start="151:36" pos:end="151:36">*</operator> <name pos:start="151:38" pos:end="151:39">ch</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:54"><expr pos:start="153:13" pos:end="153:53"><operator pos:start="153:13" pos:end="153:13">*</operator><name pos:start="153:14" pos:end="153:26">coded_samples</name> <operator pos:start="153:28" pos:end="153:28">=</operator> <call pos:start="153:30" pos:end="153:53"><name pos:start="153:30" pos:end="153:49">bytestream2_get_le32</name><argument_list pos:start="153:50" pos:end="153:53">(<argument pos:start="153:51" pos:end="153:52"><expr pos:start="153:51" pos:end="153:52"><name pos:start="153:51" pos:end="153:52">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <case pos:start="157:9" pos:end="157:37">case <expr pos:start="157:14" pos:end="157:36"><name pos:start="157:14" pos:end="157:36">AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>

            <expr_stmt pos:start="159:13" pos:end="159:40"><expr pos:start="159:13" pos:end="159:39"><name pos:start="159:13" pos:end="159:23">header_size</name>    <operator pos:start="159:28" pos:end="159:28">=</operator> <literal type="number" pos:start="159:30" pos:end="159:32">4</literal> <operator pos:start="159:32" pos:end="159:32">+</operator> <literal type="number" pos:start="159:34" pos:end="159:34">5</literal> <operator pos:start="159:36" pos:end="159:36">*</operator> <name pos:start="159:38" pos:end="159:39">ch</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:54"><expr pos:start="161:13" pos:end="161:53"><operator pos:start="161:13" pos:end="161:13">*</operator><name pos:start="161:14" pos:end="161:26">coded_samples</name> <operator pos:start="161:28" pos:end="161:28">=</operator> <call pos:start="161:30" pos:end="161:53"><name pos:start="161:30" pos:end="161:49">bytestream2_get_le32</name><argument_list pos:start="161:50" pos:end="161:53">(<argument pos:start="161:51" pos:end="161:52"><expr pos:start="161:51" pos:end="161:52"><name pos:start="161:51" pos:end="161:52">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <case pos:start="165:9" pos:end="165:37">case <expr pos:start="165:14" pos:end="165:36"><name pos:start="165:14" pos:end="165:36">AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case>

            <expr_stmt pos:start="167:13" pos:end="167:40"><expr pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:23">header_size</name>    <operator pos:start="167:28" pos:end="167:28">=</operator> <literal type="number" pos:start="167:30" pos:end="167:32">4</literal> <operator pos:start="167:32" pos:end="167:32">+</operator> <literal type="number" pos:start="167:34" pos:end="167:34">5</literal> <operator pos:start="167:36" pos:end="167:36">*</operator> <name pos:start="167:38" pos:end="167:39">ch</name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:54"><expr pos:start="169:13" pos:end="169:53"><operator pos:start="169:13" pos:end="169:13">*</operator><name pos:start="169:14" pos:end="169:26">coded_samples</name> <operator pos:start="169:28" pos:end="169:28">=</operator> <call pos:start="169:30" pos:end="169:53"><name pos:start="169:30" pos:end="169:49">bytestream2_get_be32</name><argument_list pos:start="169:50" pos:end="169:53">(<argument pos:start="169:51" pos:end="169:52"><expr pos:start="169:51" pos:end="169:52"><name pos:start="169:51" pos:end="169:52">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="171:13" pos:end="171:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="175:9" pos:end="175:46"><expr pos:start="175:9" pos:end="175:45"><operator pos:start="175:9" pos:end="175:9">*</operator><name pos:start="175:10" pos:end="175:22">coded_samples</name> <operator pos:start="175:24" pos:end="175:25">-=</operator> <operator pos:start="175:27" pos:end="175:27">*</operator><name pos:start="175:28" pos:end="175:40">coded_samples</name> <operator pos:start="175:42" pos:end="175:42">%</operator> <literal type="number" pos:start="175:44" pos:end="175:45">28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:60"><expr pos:start="177:9" pos:end="177:59"><name pos:start="177:9" pos:end="177:18">nb_samples</name>      <operator pos:start="177:25" pos:end="177:25">=</operator> <operator pos:start="177:27" pos:end="177:27">(</operator><name pos:start="177:28" pos:end="177:35">buf_size</name> <operator pos:start="177:37" pos:end="177:37">-</operator> <name pos:start="177:39" pos:end="177:49">header_size</name><operator pos:start="177:50" pos:end="177:50">)</operator> <operator pos:start="177:52" pos:end="177:52">*</operator> <literal type="number" pos:start="177:54" pos:end="177:54">2</literal> <operator pos:start="177:56" pos:end="177:56">/</operator> <name pos:start="177:58" pos:end="177:59">ch</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:42"><expr pos:start="179:9" pos:end="179:41"><name pos:start="179:9" pos:end="179:18">nb_samples</name>     <operator pos:start="179:24" pos:end="179:25">-=</operator> <name pos:start="179:27" pos:end="179:36">nb_samples</name> <operator pos:start="179:38" pos:end="179:38">%</operator> <literal type="number" pos:start="179:40" pos:end="179:41">28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><operator pos:start="181:9" pos:end="181:9">*</operator><name pos:start="181:10" pos:end="181:26">approx_nb_samples</name> <operator pos:start="181:28" pos:end="181:28">=</operator> <literal type="number" pos:start="181:30" pos:end="181:30">1</literal></expr>;</expr_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>

    <case pos:start="185:5" pos:end="185:35">case <expr pos:start="185:10" pos:end="185:34"><name pos:start="185:10" pos:end="185:34">AV_CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>

        <if_stmt pos:start="187:9" pos:end="189:59"><if pos:start="187:9" pos:end="189:59">if <condition pos:start="187:12" pos:end="187:35">(<expr pos:start="187:13" pos:end="187:34"><name pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:17">avctx</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:30">block_align</name></name> <operator pos:start="187:32" pos:end="187:32">&gt;</operator> <literal type="number" pos:start="187:34" pos:end="187:34">0</literal></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:59"><block_content pos:start="189:13" pos:end="189:59">

            <expr_stmt pos:start="189:13" pos:end="189:59"><expr pos:start="189:13" pos:end="189:58"><name pos:start="189:13" pos:end="189:20">buf_size</name> <operator pos:start="189:22" pos:end="189:22">=</operator> <call pos:start="189:24" pos:end="189:58"><name pos:start="189:24" pos:end="189:28">FFMIN</name><argument_list pos:start="189:29" pos:end="189:58">(<argument pos:start="189:30" pos:end="189:37"><expr pos:start="189:30" pos:end="189:37"><name pos:start="189:30" pos:end="189:37">buf_size</name></expr></argument>, <argument pos:start="189:40" pos:end="189:57"><expr pos:start="189:40" pos:end="189:57"><name pos:start="189:40" pos:end="189:57"><name pos:start="189:40" pos:end="189:44">avctx</name><operator pos:start="189:45" pos:end="189:46">-&gt;</operator><name pos:start="189:47" pos:end="189:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:56"><expr pos:start="191:9" pos:end="191:55"><name pos:start="191:9" pos:end="191:18">nb_samples</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <operator pos:start="191:22" pos:end="191:22">(</operator><operator pos:start="191:23" pos:end="191:23">(</operator><name pos:start="191:24" pos:end="191:31">buf_size</name> <operator pos:start="191:33" pos:end="191:33">-</operator> <literal type="number" pos:start="191:35" pos:end="191:36">16</literal><operator pos:start="191:37" pos:end="191:37">)</operator> <operator pos:start="191:39" pos:end="191:39">*</operator> <literal type="number" pos:start="191:41" pos:end="191:41">2</literal> <operator pos:start="191:43" pos:end="191:43">/</operator> <literal type="number" pos:start="191:45" pos:end="191:45">3</literal> <operator pos:start="191:47" pos:end="191:47">*</operator> <literal type="number" pos:start="191:49" pos:end="191:49">4</literal><operator pos:start="191:50" pos:end="191:50">)</operator> <operator pos:start="191:52" pos:end="191:52">/</operator> <name pos:start="191:54" pos:end="191:55">ch</name></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:35">case <expr pos:start="195:10" pos:end="195:34"><name pos:start="195:10" pos:end="195:34">AV_CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>

        <if_stmt pos:start="197:9" pos:end="199:59"><if pos:start="197:9" pos:end="199:59">if <condition pos:start="197:12" pos:end="197:35">(<expr pos:start="197:13" pos:end="197:34"><name pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:17">avctx</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:30">block_align</name></name> <operator pos:start="197:32" pos:end="197:32">&gt;</operator> <literal type="number" pos:start="197:34" pos:end="197:34">0</literal></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:59"><block_content pos:start="199:13" pos:end="199:59">

            <expr_stmt pos:start="199:13" pos:end="199:59"><expr pos:start="199:13" pos:end="199:58"><name pos:start="199:13" pos:end="199:20">buf_size</name> <operator pos:start="199:22" pos:end="199:22">=</operator> <call pos:start="199:24" pos:end="199:58"><name pos:start="199:24" pos:end="199:28">FFMIN</name><argument_list pos:start="199:29" pos:end="199:58">(<argument pos:start="199:30" pos:end="199:37"><expr pos:start="199:30" pos:end="199:37"><name pos:start="199:30" pos:end="199:37">buf_size</name></expr></argument>, <argument pos:start="199:40" pos:end="199:57"><expr pos:start="199:40" pos:end="199:57"><name pos:start="199:40" pos:end="199:57"><name pos:start="199:40" pos:end="199:44">avctx</name><operator pos:start="199:45" pos:end="199:46">-&gt;</operator><name pos:start="199:47" pos:end="199:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:54"><expr pos:start="201:9" pos:end="201:53"><name pos:start="201:9" pos:end="201:18">nb_samples</name> <operator pos:start="201:20" pos:end="201:20">=</operator> <literal type="number" pos:start="201:22" pos:end="201:24">1</literal> <operator pos:start="201:24" pos:end="201:24">+</operator> <operator pos:start="201:26" pos:end="201:26">(</operator><name pos:start="201:27" pos:end="201:34">buf_size</name> <operator pos:start="201:36" pos:end="201:36">-</operator> <literal type="number" pos:start="201:38" pos:end="201:38">4</literal> <operator pos:start="201:40" pos:end="201:40">*</operator> <name pos:start="201:42" pos:end="201:43">ch</name><operator pos:start="201:44" pos:end="201:44">)</operator> <operator pos:start="201:46" pos:end="201:46">*</operator> <literal type="number" pos:start="201:48" pos:end="201:48">2</literal> <operator pos:start="201:50" pos:end="201:50">/</operator> <name pos:start="201:52" pos:end="201:53">ch</name></expr>;</expr_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:35">case <expr pos:start="205:10" pos:end="205:34"><name pos:start="205:10" pos:end="205:34">AV_CODEC_ID_ADPCM_IMA_RAD</name></expr>:</case>

        <if_stmt pos:start="207:9" pos:end="209:59"><if pos:start="207:9" pos:end="209:59">if <condition pos:start="207:12" pos:end="207:35">(<expr pos:start="207:13" pos:end="207:34"><name pos:start="207:13" pos:end="207:30"><name pos:start="207:13" pos:end="207:17">avctx</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:30">block_align</name></name> <operator pos:start="207:32" pos:end="207:32">&gt;</operator> <literal type="number" pos:start="207:34" pos:end="207:34">0</literal></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="209:59"><block_content pos:start="209:13" pos:end="209:59">

            <expr_stmt pos:start="209:13" pos:end="209:59"><expr pos:start="209:13" pos:end="209:58"><name pos:start="209:13" pos:end="209:20">buf_size</name> <operator pos:start="209:22" pos:end="209:22">=</operator> <call pos:start="209:24" pos:end="209:58"><name pos:start="209:24" pos:end="209:28">FFMIN</name><argument_list pos:start="209:29" pos:end="209:58">(<argument pos:start="209:30" pos:end="209:37"><expr pos:start="209:30" pos:end="209:37"><name pos:start="209:30" pos:end="209:37">buf_size</name></expr></argument>, <argument pos:start="209:40" pos:end="209:57"><expr pos:start="209:40" pos:end="209:57"><name pos:start="209:40" pos:end="209:57"><name pos:start="209:40" pos:end="209:44">avctx</name><operator pos:start="209:45" pos:end="209:46">-&gt;</operator><name pos:start="209:47" pos:end="209:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:50"><expr pos:start="211:9" pos:end="211:49"><name pos:start="211:9" pos:end="211:18">nb_samples</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <operator pos:start="211:22" pos:end="211:22">(</operator><name pos:start="211:23" pos:end="211:30">buf_size</name> <operator pos:start="211:32" pos:end="211:32">-</operator> <literal type="number" pos:start="211:34" pos:end="211:34">4</literal> <operator pos:start="211:36" pos:end="211:36">*</operator> <name pos:start="211:38" pos:end="211:39">ch</name><operator pos:start="211:40" pos:end="211:40">)</operator> <operator pos:start="211:42" pos:end="211:42">*</operator> <literal type="number" pos:start="211:44" pos:end="211:44">2</literal> <operator pos:start="211:46" pos:end="211:46">/</operator> <name pos:start="211:48" pos:end="211:49">ch</name></expr>;</expr_stmt>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:35">case <expr pos:start="215:10" pos:end="215:34"><name pos:start="215:10" pos:end="215:34">AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

    <block pos:start="217:5" pos:end="231:5">{<block_content pos:start="219:9" pos:end="229:14">

        <decl_stmt pos:start="219:9" pos:end="219:79"><decl pos:start="219:9" pos:end="219:78"><type pos:start="219:9" pos:end="219:11"><name pos:start="219:9" pos:end="219:11">int</name></type> <name pos:start="219:13" pos:end="219:17">bsize</name> <init pos:start="219:19" pos:end="219:78">= <expr pos:start="219:21" pos:end="219:78"><name pos:start="219:21" pos:end="219:78"><name pos:start="219:21" pos:end="219:44">ff_adpcm_ima_block_sizes</name><index pos:start="219:45" pos:end="219:78">[<expr pos:start="219:46" pos:end="219:77"><name pos:start="219:46" pos:end="219:73"><name pos:start="219:46" pos:end="219:50">avctx</name><operator pos:start="219:51" pos:end="219:52">-&gt;</operator><name pos:start="219:53" pos:end="219:73">bits_per_coded_sample</name></name> <operator pos:start="219:75" pos:end="219:75">-</operator> <literal type="number" pos:start="219:77" pos:end="219:77">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="221:9" pos:end="221:84"><decl pos:start="221:9" pos:end="221:83"><type pos:start="221:9" pos:end="221:11"><name pos:start="221:9" pos:end="221:11">int</name></type> <name pos:start="221:13" pos:end="221:20">bsamples</name> <init pos:start="221:22" pos:end="221:83">= <expr pos:start="221:24" pos:end="221:83"><name pos:start="221:24" pos:end="221:83"><name pos:start="221:24" pos:end="221:49">ff_adpcm_ima_block_samples</name><index pos:start="221:50" pos:end="221:83">[<expr pos:start="221:51" pos:end="221:82"><name pos:start="221:51" pos:end="221:78"><name pos:start="221:51" pos:end="221:55">avctx</name><operator pos:start="221:56" pos:end="221:57">-&gt;</operator><name pos:start="221:58" pos:end="221:78">bits_per_coded_sample</name></name> <operator pos:start="221:80" pos:end="221:80">-</operator> <literal type="number" pos:start="221:82" pos:end="221:82">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="223:9" pos:end="225:59"><if pos:start="223:9" pos:end="225:59">if <condition pos:start="223:12" pos:end="223:35">(<expr pos:start="223:13" pos:end="223:34"><name pos:start="223:13" pos:end="223:30"><name pos:start="223:13" pos:end="223:17">avctx</name><operator pos:start="223:18" pos:end="223:19">-&gt;</operator><name pos:start="223:20" pos:end="223:30">block_align</name></name> <operator pos:start="223:32" pos:end="223:32">&gt;</operator> <literal type="number" pos:start="223:34" pos:end="223:34">0</literal></expr>)</condition><block type="pseudo" pos:start="225:13" pos:end="225:59"><block_content pos:start="225:13" pos:end="225:59">

            <expr_stmt pos:start="225:13" pos:end="225:59"><expr pos:start="225:13" pos:end="225:58"><name pos:start="225:13" pos:end="225:20">buf_size</name> <operator pos:start="225:22" pos:end="225:22">=</operator> <call pos:start="225:24" pos:end="225:58"><name pos:start="225:24" pos:end="225:28">FFMIN</name><argument_list pos:start="225:29" pos:end="225:58">(<argument pos:start="225:30" pos:end="225:37"><expr pos:start="225:30" pos:end="225:37"><name pos:start="225:30" pos:end="225:37">buf_size</name></expr></argument>, <argument pos:start="225:40" pos:end="225:57"><expr pos:start="225:40" pos:end="225:57"><name pos:start="225:40" pos:end="225:57"><name pos:start="225:40" pos:end="225:44">avctx</name><operator pos:start="225:45" pos:end="225:46">-&gt;</operator><name pos:start="225:47" pos:end="225:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:71"><expr pos:start="227:9" pos:end="227:70"><name pos:start="227:9" pos:end="227:18">nb_samples</name> <operator pos:start="227:20" pos:end="227:20">=</operator> <literal type="number" pos:start="227:22" pos:end="227:24">1</literal> <operator pos:start="227:24" pos:end="227:24">+</operator> <operator pos:start="227:26" pos:end="227:26">(</operator><name pos:start="227:27" pos:end="227:34">buf_size</name> <operator pos:start="227:36" pos:end="227:36">-</operator> <literal type="number" pos:start="227:38" pos:end="227:38">4</literal> <operator pos:start="227:40" pos:end="227:40">*</operator> <name pos:start="227:42" pos:end="227:43">ch</name><operator pos:start="227:44" pos:end="227:44">)</operator> <operator pos:start="227:46" pos:end="227:46">/</operator> <operator pos:start="227:48" pos:end="227:48">(</operator><name pos:start="227:49" pos:end="227:53">bsize</name> <operator pos:start="227:55" pos:end="227:55">*</operator> <name pos:start="227:57" pos:end="227:58">ch</name><operator pos:start="227:59" pos:end="227:59">)</operator> <operator pos:start="227:61" pos:end="227:61">*</operator> <name pos:start="227:63" pos:end="227:70">bsamples</name></expr>;</expr_stmt>

        <break pos:start="229:9" pos:end="229:14">break;</break>

    </block_content>}</block>

    <case pos:start="233:5" pos:end="233:30">case <expr pos:start="233:10" pos:end="233:29"><name pos:start="233:10" pos:end="233:29">AV_CODEC_ID_ADPCM_MS</name></expr>:</case>

        <if_stmt pos:start="235:9" pos:end="237:59"><if pos:start="235:9" pos:end="237:59">if <condition pos:start="235:12" pos:end="235:35">(<expr pos:start="235:13" pos:end="235:34"><name pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:17">avctx</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:30">block_align</name></name> <operator pos:start="235:32" pos:end="235:32">&gt;</operator> <literal type="number" pos:start="235:34" pos:end="235:34">0</literal></expr>)</condition><block type="pseudo" pos:start="237:13" pos:end="237:59"><block_content pos:start="237:13" pos:end="237:59">

            <expr_stmt pos:start="237:13" pos:end="237:59"><expr pos:start="237:13" pos:end="237:58"><name pos:start="237:13" pos:end="237:20">buf_size</name> <operator pos:start="237:22" pos:end="237:22">=</operator> <call pos:start="237:24" pos:end="237:58"><name pos:start="237:24" pos:end="237:28">FFMIN</name><argument_list pos:start="237:29" pos:end="237:58">(<argument pos:start="237:30" pos:end="237:37"><expr pos:start="237:30" pos:end="237:37"><name pos:start="237:30" pos:end="237:37">buf_size</name></expr></argument>, <argument pos:start="237:40" pos:end="237:57"><expr pos:start="237:40" pos:end="237:57"><name pos:start="237:40" pos:end="237:57"><name pos:start="237:40" pos:end="237:44">avctx</name><operator pos:start="237:45" pos:end="237:46">-&gt;</operator><name pos:start="237:47" pos:end="237:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:54"><expr pos:start="239:9" pos:end="239:53"><name pos:start="239:9" pos:end="239:18">nb_samples</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <literal type="number" pos:start="239:22" pos:end="239:24">2</literal> <operator pos:start="239:24" pos:end="239:24">+</operator> <operator pos:start="239:26" pos:end="239:26">(</operator><name pos:start="239:27" pos:end="239:34">buf_size</name> <operator pos:start="239:36" pos:end="239:36">-</operator> <literal type="number" pos:start="239:38" pos:end="239:38">7</literal> <operator pos:start="239:40" pos:end="239:40">*</operator> <name pos:start="239:42" pos:end="239:43">ch</name><operator pos:start="239:44" pos:end="239:44">)</operator> <operator pos:start="239:46" pos:end="239:46">*</operator> <literal type="number" pos:start="239:48" pos:end="239:48">2</literal> <operator pos:start="239:50" pos:end="239:50">/</operator> <name pos:start="239:52" pos:end="239:53">ch</name></expr>;</expr_stmt>

        <break pos:start="241:9" pos:end="241:14">break;</break>

    <case pos:start="243:5" pos:end="243:35">case <expr pos:start="243:10" pos:end="243:34"><name pos:start="243:10" pos:end="243:34">AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>

    <case pos:start="245:5" pos:end="245:35">case <expr pos:start="245:10" pos:end="245:34"><name pos:start="245:10" pos:end="245:34">AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>

    <case pos:start="247:5" pos:end="247:35">case <expr pos:start="247:10" pos:end="247:34"><name pos:start="247:10" pos:end="247:34">AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>

    <block pos:start="249:5" pos:end="275:5">{<block_content pos:start="251:9" pos:end="273:14">

        <decl_stmt pos:start="251:9" pos:end="251:29"><decl pos:start="251:9" pos:end="251:28"><type pos:start="251:9" pos:end="251:11"><name pos:start="251:9" pos:end="251:11">int</name></type> <name pos:start="251:13" pos:end="251:28">samples_per_byte</name></decl>;</decl_stmt>

        <switch pos:start="253:9" pos:end="261:9">switch <condition pos:start="253:16" pos:end="253:33">(<expr pos:start="253:17" pos:end="253:32"><name pos:start="253:17" pos:end="253:32"><name pos:start="253:17" pos:end="253:21">avctx</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:28">codec</name><operator pos:start="253:29" pos:end="253:30">-&gt;</operator><name pos:start="253:31" pos:end="253:32">id</name></name></expr>)</condition> <block pos:start="253:35" pos:end="261:9">{<block_content pos:start="255:9" pos:end="259:68">

        <case pos:start="255:9" pos:end="255:39">case <expr pos:start="255:14" pos:end="255:38"><name pos:start="255:14" pos:end="255:38">AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case> <expr_stmt pos:start="255:41" pos:end="255:61"><expr pos:start="255:41" pos:end="255:60"><name pos:start="255:41" pos:end="255:56">samples_per_byte</name> <operator pos:start="255:58" pos:end="255:58">=</operator> <literal type="number" pos:start="255:60" pos:end="255:60">4</literal></expr>;</expr_stmt> <break pos:start="255:63" pos:end="255:68">break;</break>

        <case pos:start="257:9" pos:end="257:39">case <expr pos:start="257:14" pos:end="257:38"><name pos:start="257:14" pos:end="257:38">AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case> <expr_stmt pos:start="257:41" pos:end="257:61"><expr pos:start="257:41" pos:end="257:60"><name pos:start="257:41" pos:end="257:56">samples_per_byte</name> <operator pos:start="257:58" pos:end="257:58">=</operator> <literal type="number" pos:start="257:60" pos:end="257:60">3</literal></expr>;</expr_stmt> <break pos:start="257:63" pos:end="257:68">break;</break>

        <case pos:start="259:9" pos:end="259:39">case <expr pos:start="259:14" pos:end="259:38"><name pos:start="259:14" pos:end="259:38">AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case> <expr_stmt pos:start="259:41" pos:end="259:61"><expr pos:start="259:41" pos:end="259:60"><name pos:start="259:41" pos:end="259:56">samples_per_byte</name> <operator pos:start="259:58" pos:end="259:58">=</operator> <literal type="number" pos:start="259:60" pos:end="259:60">2</literal></expr>;</expr_stmt> <break pos:start="259:63" pos:end="259:68">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="263:9" pos:end="269:9"><if pos:start="263:9" pos:end="269:9">if <condition pos:start="263:12" pos:end="263:37">(<expr pos:start="263:13" pos:end="263:36"><operator pos:start="263:13" pos:end="263:13">!</operator><name pos:start="263:14" pos:end="263:25"><name pos:start="263:14" pos:end="263:14">s</name><operator pos:start="263:15" pos:end="263:16">-&gt;</operator><name pos:start="263:17" pos:end="263:22">status</name><index pos:start="263:23" pos:end="263:25">[<expr pos:start="263:24" pos:end="263:24"><literal type="number" pos:start="263:24" pos:end="263:24">0</literal></expr>]</index></name><operator pos:start="263:26" pos:end="263:26">.</operator><name pos:start="263:27" pos:end="263:36">step_index</name></expr>)</condition> <block pos:start="263:39" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:27">

            <expr_stmt pos:start="265:13" pos:end="265:25"><expr pos:start="265:13" pos:end="265:24"><name pos:start="265:13" pos:end="265:22">nb_samples</name><operator pos:start="265:23" pos:end="265:24">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:27"><expr pos:start="267:13" pos:end="267:26"><name pos:start="267:13" pos:end="267:20">buf_size</name> <operator pos:start="267:22" pos:end="267:23">-=</operator> <name pos:start="267:25" pos:end="267:26">ch</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:55"><expr pos:start="271:9" pos:end="271:54"><name pos:start="271:9" pos:end="271:18">nb_samples</name> <operator pos:start="271:20" pos:end="271:21">+=</operator> <name pos:start="271:23" pos:end="271:30">buf_size</name> <operator pos:start="271:32" pos:end="271:32">*</operator> <name pos:start="271:34" pos:end="271:49">samples_per_byte</name> <operator pos:start="271:51" pos:end="271:51">/</operator> <name pos:start="271:53" pos:end="271:54">ch</name></expr>;</expr_stmt>

        <break pos:start="273:9" pos:end="273:14">break;</break>

    </block_content>}</block>

    <case pos:start="277:5" pos:end="277:31">case <expr pos:start="277:10" pos:end="277:30"><name pos:start="277:10" pos:end="277:30">AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>

    <block pos:start="279:5" pos:end="301:5">{<block_content pos:start="281:9" pos:end="299:14">

        <decl_stmt pos:start="281:9" pos:end="281:46"><decl pos:start="281:9" pos:end="281:45"><type pos:start="281:9" pos:end="281:11"><name pos:start="281:9" pos:end="281:11">int</name></type> <name pos:start="281:13" pos:end="281:20">buf_bits</name>       <init pos:start="281:28" pos:end="281:45">= <expr pos:start="281:30" pos:end="281:45"><name pos:start="281:30" pos:end="281:37">buf_size</name> <operator pos:start="281:39" pos:end="281:39">*</operator> <literal type="number" pos:start="281:41" pos:end="281:43">8</literal> <operator pos:start="281:43" pos:end="281:43">-</operator> <literal type="number" pos:start="281:45" pos:end="281:45">2</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="283:9" pos:end="283:65"><decl pos:start="283:9" pos:end="283:64"><type pos:start="283:9" pos:end="283:11"><name pos:start="283:9" pos:end="283:11">int</name></type> <name pos:start="283:13" pos:end="283:17">nbits</name>          <init pos:start="283:28" pos:end="283:64">= <expr pos:start="283:30" pos:end="283:64"><operator pos:start="283:30" pos:end="283:30">(</operator><call pos:start="283:31" pos:end="283:54"><name pos:start="283:31" pos:end="283:50">bytestream2_get_byte</name><argument_list pos:start="283:51" pos:end="283:54">(<argument pos:start="283:52" pos:end="283:53"><expr pos:start="283:52" pos:end="283:53"><name pos:start="283:52" pos:end="283:53">gb</name></expr></argument>)</argument_list></call> <operator pos:start="283:56" pos:end="283:57">&gt;&gt;</operator> <literal type="number" pos:start="283:59" pos:end="283:59">6</literal><operator pos:start="283:60" pos:end="283:60">)</operator> <operator pos:start="283:62" pos:end="283:62">+</operator> <literal type="number" pos:start="283:64" pos:end="283:64">2</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="285:9" pos:end="285:37"><decl pos:start="285:9" pos:end="285:36"><type pos:start="285:9" pos:end="285:11"><name pos:start="285:9" pos:end="285:11">int</name></type> <name pos:start="285:13" pos:end="285:26">block_hdr_size</name> <init pos:start="285:28" pos:end="285:36">= <expr pos:start="285:30" pos:end="285:36"><literal type="number" pos:start="285:30" pos:end="285:31">22</literal> <operator pos:start="285:33" pos:end="285:33">*</operator> <name pos:start="285:35" pos:end="285:36">ch</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="287:9" pos:end="287:64"><decl pos:start="287:9" pos:end="287:63"><type pos:start="287:9" pos:end="287:11"><name pos:start="287:9" pos:end="287:11">int</name></type> <name pos:start="287:13" pos:end="287:22">block_size</name>     <init pos:start="287:28" pos:end="287:63">= <expr pos:start="287:30" pos:end="287:63"><name pos:start="287:30" pos:end="287:43">block_hdr_size</name> <operator pos:start="287:45" pos:end="287:45">+</operator> <name pos:start="287:47" pos:end="287:51">nbits</name> <operator pos:start="287:53" pos:end="287:53">*</operator> <name pos:start="287:55" pos:end="287:56">ch</name> <operator pos:start="287:58" pos:end="287:58">*</operator> <literal type="number" pos:start="287:60" pos:end="287:63">4095</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="289:9" pos:end="289:51"><decl pos:start="289:9" pos:end="289:50"><type pos:start="289:9" pos:end="289:11"><name pos:start="289:9" pos:end="289:11">int</name></type> <name pos:start="289:13" pos:end="289:19">nblocks</name>        <init pos:start="289:28" pos:end="289:50">= <expr pos:start="289:30" pos:end="289:50"><name pos:start="289:30" pos:end="289:37">buf_bits</name> <operator pos:start="289:39" pos:end="289:39">/</operator> <name pos:start="289:41" pos:end="289:50">block_size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="291:9" pos:end="291:61"><decl pos:start="291:9" pos:end="291:60"><type pos:start="291:9" pos:end="291:11"><name pos:start="291:9" pos:end="291:11">int</name></type> <name pos:start="291:13" pos:end="291:21">bits_left</name>      <init pos:start="291:28" pos:end="291:60">= <expr pos:start="291:30" pos:end="291:60"><name pos:start="291:30" pos:end="291:37">buf_bits</name> <operator pos:start="291:39" pos:end="291:39">-</operator> <name pos:start="291:41" pos:end="291:47">nblocks</name> <operator pos:start="291:49" pos:end="291:49">*</operator> <name pos:start="291:51" pos:end="291:60">block_size</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:44"><expr pos:start="293:9" pos:end="293:43"><name pos:start="293:9" pos:end="293:18">nb_samples</name>         <operator pos:start="293:28" pos:end="293:28">=</operator> <name pos:start="293:30" pos:end="293:36">nblocks</name> <operator pos:start="293:38" pos:end="293:38">*</operator> <literal type="number" pos:start="293:40" pos:end="293:43">4096</literal></expr>;</expr_stmt>

        <if_stmt pos:start="295:9" pos:end="297:74"><if pos:start="295:9" pos:end="297:74">if <condition pos:start="295:12" pos:end="295:40">(<expr pos:start="295:13" pos:end="295:39"><name pos:start="295:13" pos:end="295:21">bits_left</name> <operator pos:start="295:23" pos:end="295:24">&gt;=</operator> <name pos:start="295:26" pos:end="295:39">block_hdr_size</name></expr>)</condition><block type="pseudo" pos:start="297:13" pos:end="297:74"><block_content pos:start="297:13" pos:end="297:74">

            <expr_stmt pos:start="297:13" pos:end="297:74"><expr pos:start="297:13" pos:end="297:73"><name pos:start="297:13" pos:end="297:22">nb_samples</name> <operator pos:start="297:24" pos:end="297:25">+=</operator> <literal type="number" pos:start="297:27" pos:end="297:29">1</literal> <operator pos:start="297:29" pos:end="297:29">+</operator> <operator pos:start="297:31" pos:end="297:31">(</operator><name pos:start="297:32" pos:end="297:40">bits_left</name> <operator pos:start="297:42" pos:end="297:42">-</operator> <name pos:start="297:44" pos:end="297:57">block_hdr_size</name><operator pos:start="297:58" pos:end="297:58">)</operator> <operator pos:start="297:60" pos:end="297:60">/</operator> <operator pos:start="297:62" pos:end="297:62">(</operator><name pos:start="297:63" pos:end="297:67">nbits</name> <operator pos:start="297:69" pos:end="297:69">*</operator> <name pos:start="297:71" pos:end="297:72">ch</name><operator pos:start="297:73" pos:end="297:73">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="299:9" pos:end="299:14">break;</break>

    </block_content>}</block>

    <case pos:start="303:5" pos:end="303:31">case <expr pos:start="303:10" pos:end="303:30"><name pos:start="303:10" pos:end="303:30">AV_CODEC_ID_ADPCM_THP</name></expr>:</case>

        <if_stmt pos:start="305:9" pos:end="311:9"><if pos:start="305:9" pos:end="311:9">if <condition pos:start="305:12" pos:end="305:29">(<expr pos:start="305:13" pos:end="305:28"><name pos:start="305:13" pos:end="305:28"><name pos:start="305:13" pos:end="305:17">avctx</name><operator pos:start="305:18" pos:end="305:19">-&gt;</operator><name pos:start="305:20" pos:end="305:28">extradata</name></name></expr>)</condition> <block pos:start="305:31" pos:end="311:9">{<block_content pos:start="307:13" pos:end="309:18">

            <expr_stmt pos:start="307:13" pos:end="307:50"><expr pos:start="307:13" pos:end="307:49"><name pos:start="307:13" pos:end="307:22">nb_samples</name> <operator pos:start="307:24" pos:end="307:24">=</operator> <name pos:start="307:26" pos:end="307:33">buf_size</name> <operator pos:start="307:35" pos:end="307:35">/</operator> <operator pos:start="307:37" pos:end="307:37">(</operator><literal type="number" pos:start="307:38" pos:end="307:38">8</literal> <operator pos:start="307:40" pos:end="307:40">*</operator> <name pos:start="307:42" pos:end="307:43">ch</name><operator pos:start="307:44" pos:end="307:44">)</operator> <operator pos:start="307:46" pos:end="307:46">*</operator> <literal type="number" pos:start="307:48" pos:end="307:49">14</literal></expr>;</expr_stmt>

            <break pos:start="309:13" pos:end="309:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:30"><expr pos:start="313:9" pos:end="313:29"><name pos:start="313:9" pos:end="313:25">has_coded_samples</name> <operator pos:start="313:27" pos:end="313:27">=</operator> <literal type="number" pos:start="313:29" pos:end="313:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:32"><expr pos:start="315:9" pos:end="315:31"><call pos:start="315:9" pos:end="315:31"><name pos:start="315:9" pos:end="315:24">bytestream2_skip</name><argument_list pos:start="315:25" pos:end="315:31">(<argument pos:start="315:26" pos:end="315:27"><expr pos:start="315:26" pos:end="315:27"><name pos:start="315:26" pos:end="315:27">gb</name></expr></argument>, <argument pos:start="315:30" pos:end="315:30"><expr pos:start="315:30" pos:end="315:30"><literal type="number" pos:start="315:30" pos:end="315:30">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="315:34" pos:end="315:48">// channel size</comment>

        <expr_stmt pos:start="317:9" pos:end="317:51"><expr pos:start="317:9" pos:end="317:50"><operator pos:start="317:9" pos:end="317:9">*</operator><name pos:start="317:10" pos:end="317:22">coded_samples</name>  <operator pos:start="317:25" pos:end="317:25">=</operator> <call pos:start="317:27" pos:end="317:50"><name pos:start="317:27" pos:end="317:46">bytestream2_get_be32</name><argument_list pos:start="317:47" pos:end="317:50">(<argument pos:start="317:48" pos:end="317:49"><expr pos:start="317:48" pos:end="317:49"><name pos:start="317:48" pos:end="317:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:46"><expr pos:start="319:9" pos:end="319:45"><operator pos:start="319:9" pos:end="319:9">*</operator><name pos:start="319:10" pos:end="319:22">coded_samples</name> <operator pos:start="319:24" pos:end="319:25">-=</operator> <operator pos:start="319:27" pos:end="319:27">*</operator><name pos:start="319:28" pos:end="319:40">coded_samples</name> <operator pos:start="319:42" pos:end="319:42">%</operator> <literal type="number" pos:start="319:44" pos:end="319:45">14</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:69"><expr pos:start="321:9" pos:end="321:68"><name pos:start="321:9" pos:end="321:18">nb_samples</name>      <operator pos:start="321:25" pos:end="321:25">=</operator> <operator pos:start="321:27" pos:end="321:27">(</operator><name pos:start="321:28" pos:end="321:35">buf_size</name> <operator pos:start="321:37" pos:end="321:37">-</operator> <operator pos:start="321:39" pos:end="321:39">(</operator><literal type="number" pos:start="321:40" pos:end="321:42">8</literal> <operator pos:start="321:42" pos:end="321:42">+</operator> <literal type="number" pos:start="321:44" pos:end="321:45">36</literal> <operator pos:start="321:47" pos:end="321:47">*</operator> <name pos:start="321:49" pos:end="321:50">ch</name><operator pos:start="321:51" pos:end="321:51">)</operator><operator pos:start="321:52" pos:end="321:52">)</operator> <operator pos:start="321:54" pos:end="321:54">/</operator> <operator pos:start="321:56" pos:end="321:56">(</operator><literal type="number" pos:start="321:57" pos:end="321:57">8</literal> <operator pos:start="321:59" pos:end="321:59">*</operator> <name pos:start="321:61" pos:end="321:62">ch</name><operator pos:start="321:63" pos:end="321:63">)</operator> <operator pos:start="321:65" pos:end="321:65">*</operator> <literal type="number" pos:start="321:67" pos:end="321:68">14</literal></expr>;</expr_stmt>

        <break pos:start="323:9" pos:end="323:14">break;</break>

    <case pos:start="325:5" pos:end="325:31">case <expr pos:start="325:10" pos:end="325:30"><name pos:start="325:10" pos:end="325:30">AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>

        <expr_stmt pos:start="327:9" pos:end="327:46"><expr pos:start="327:9" pos:end="327:45"><name pos:start="327:9" pos:end="327:18">nb_samples</name> <operator pos:start="327:20" pos:end="327:20">=</operator> <name pos:start="327:22" pos:end="327:29">buf_size</name> <operator pos:start="327:31" pos:end="327:31">/</operator> <operator pos:start="327:33" pos:end="327:33">(</operator><literal type="number" pos:start="327:34" pos:end="327:34">9</literal> <operator pos:start="327:36" pos:end="327:36">*</operator> <name pos:start="327:38" pos:end="327:39">ch</name><operator pos:start="327:40" pos:end="327:40">)</operator> <operator pos:start="327:42" pos:end="327:42">*</operator> <literal type="number" pos:start="327:44" pos:end="327:45">16</literal></expr>;</expr_stmt>

        <break pos:start="329:9" pos:end="329:14">break;</break>

    <case pos:start="331:5" pos:end="331:30">case <expr pos:start="331:10" pos:end="331:29"><name pos:start="331:10" pos:end="331:29">AV_CODEC_ID_ADPCM_XA</name></expr>:</case>

        <expr_stmt pos:start="333:9" pos:end="333:49"><expr pos:start="333:9" pos:end="333:48"><name pos:start="333:9" pos:end="333:18">nb_samples</name> <operator pos:start="333:20" pos:end="333:20">=</operator> <operator pos:start="333:22" pos:end="333:22">(</operator><name pos:start="333:23" pos:end="333:30">buf_size</name> <operator pos:start="333:32" pos:end="333:32">/</operator> <literal type="number" pos:start="333:34" pos:end="333:36">128</literal><operator pos:start="333:37" pos:end="333:37">)</operator> <operator pos:start="333:39" pos:end="333:39">*</operator> <literal type="number" pos:start="333:41" pos:end="333:43">224</literal> <operator pos:start="333:45" pos:end="333:45">/</operator> <name pos:start="333:47" pos:end="333:48">ch</name></expr>;</expr_stmt>

        <break pos:start="335:9" pos:end="335:14">break;</break>

    <case pos:start="337:5" pos:end="337:31">case <expr pos:start="337:10" pos:end="337:30"><name pos:start="337:10" pos:end="337:30">AV_CODEC_ID_ADPCM_DTK</name></expr>:</case>

        <expr_stmt pos:start="339:9" pos:end="339:47"><expr pos:start="339:9" pos:end="339:46"><name pos:start="339:9" pos:end="339:18">nb_samples</name> <operator pos:start="339:20" pos:end="339:20">=</operator> <name pos:start="339:22" pos:end="339:29">buf_size</name> <operator pos:start="339:31" pos:end="339:31">/</operator> <operator pos:start="339:33" pos:end="339:33">(</operator><literal type="number" pos:start="339:34" pos:end="339:35">16</literal> <operator pos:start="339:37" pos:end="339:37">*</operator> <name pos:start="339:39" pos:end="339:40">ch</name><operator pos:start="339:41" pos:end="339:41">)</operator> <operator pos:start="339:43" pos:end="339:43">*</operator> <literal type="number" pos:start="339:45" pos:end="339:46">28</literal></expr>;</expr_stmt>

        <break pos:start="341:9" pos:end="341:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="347:5" pos:end="347:37">/* validate coded sample count */</comment>

    <if_stmt pos:start="349:5" pos:end="351:35"><if pos:start="349:5" pos:end="351:35">if <condition pos:start="349:8" pos:end="349:82">(<expr pos:start="349:9" pos:end="349:81"><name pos:start="349:9" pos:end="349:25">has_coded_samples</name> <operator pos:start="349:27" pos:end="349:28">&amp;&amp;</operator> <operator pos:start="349:30" pos:end="349:30">(</operator><operator pos:start="349:31" pos:end="349:31">*</operator><name pos:start="349:32" pos:end="349:44">coded_samples</name> <operator pos:start="349:46" pos:end="349:47">&lt;=</operator> <literal type="number" pos:start="349:49" pos:end="349:49">0</literal> <operator pos:start="349:51" pos:end="349:52">||</operator> <operator pos:start="349:54" pos:end="349:54">*</operator><name pos:start="349:55" pos:end="349:67">coded_samples</name> <operator pos:start="349:69" pos:end="349:69">&gt;</operator> <name pos:start="349:71" pos:end="349:80">nb_samples</name><operator pos:start="349:81" pos:end="349:81">)</operator></expr>)</condition><block type="pseudo" pos:start="351:9" pos:end="351:35"><block_content pos:start="351:9" pos:end="351:35">

        <return pos:start="351:9" pos:end="351:35">return <expr pos:start="351:16" pos:end="351:34"><name pos:start="351:16" pos:end="351:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="355:5" pos:end="355:22">return <expr pos:start="355:12" pos:end="355:21"><name pos:start="355:12" pos:end="355:21">nb_samples</name></expr>;</return>

</block_content>}</block></function>
</unit>
