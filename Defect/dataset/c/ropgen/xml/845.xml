<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/845.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">do_interrupt_user</name><parameter_list pos:start="1:30" pos:end="3:68">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:41">CPUX86State</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">env</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:57"><decl pos:start="1:49" pos:end="1:57"><type pos:start="1:49" pos:end="1:57"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:57">intno</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:69"><decl pos:start="1:60" pos:end="1:69"><type pos:start="1:60" pos:end="1:69"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:69">is_int</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:44">error_code</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:67"><decl pos:start="3:47" pos:end="3:67"><type pos:start="3:47" pos:end="3:67"><name pos:start="3:47" pos:end="3:58">target_ulong</name></type> <name pos:start="3:60" pos:end="3:67">next_eip</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:5">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SegmentCache</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">dt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:20">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">dpl</name></decl>, <decl pos:start="11:14" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:16">cpl</name></decl>, <decl pos:start="11:19" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:23">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:15">e2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:6">dt</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <operator pos:start="17:10" pos:end="17:10">&amp;</operator><name pos:start="17:11" pos:end="17:18"><name pos:start="17:11" pos:end="17:13">env</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">idt</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:34">(<expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:11">env</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:19">hflags</name></name> <operator pos:start="19:21" pos:end="19:21">&amp;</operator> <name pos:start="19:23" pos:end="19:33">HF_LMA_MASK</name></expr>)</condition> <block pos:start="19:36" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <expr_stmt pos:start="21:9" pos:end="21:18"><expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:13">shift</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <expr_stmt pos:start="25:9" pos:end="25:18"><expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:13">shift</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <literal type="number" pos:start="25:17" pos:end="25:17">3</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:7">ptr</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:18"><name pos:start="29:11" pos:end="29:12">dt</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:18">base</name></name> <operator pos:start="29:20" pos:end="29:20">+</operator> <operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:27">intno</name> <operator pos:start="29:29" pos:end="29:30">&lt;&lt;</operator> <name pos:start="29:32" pos:end="29:36">shift</name><operator pos:start="29:37" pos:end="29:37">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:6">e2</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:37"><name pos:start="31:10" pos:end="31:23">cpu_ldl_kernel</name><argument_list pos:start="31:24" pos:end="31:37">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">env</name></expr></argument>, <argument pos:start="31:30" pos:end="31:36"><expr pos:start="31:30" pos:end="31:36"><name pos:start="31:30" pos:end="31:32">ptr</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <literal type="number" pos:start="31:36" pos:end="31:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:7">dpl</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <operator pos:start="35:11" pos:end="35:11">(</operator><name pos:start="35:12" pos:end="35:13">e2</name> <operator pos:start="35:15" pos:end="35:16">&gt;&gt;</operator> <name pos:start="35:18" pos:end="35:31">DESC_DPL_SHIFT</name><operator pos:start="35:32" pos:end="35:32">)</operator> <operator pos:start="35:34" pos:end="35:34">&amp;</operator> <literal type="number" pos:start="35:36" pos:end="35:36">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:36"><expr pos:start="37:5" pos:end="37:35"><name pos:start="37:5" pos:end="37:7">cpl</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:21"><name pos:start="37:11" pos:end="37:13">env</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">hflags</name></name> <operator pos:start="37:23" pos:end="37:23">&amp;</operator> <name pos:start="37:25" pos:end="37:35">HF_CPL_MASK</name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:41">/* check privilege if software int */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:14">is_int</name> <operator pos:start="41:16" pos:end="41:17">&amp;&amp;</operator> <name pos:start="41:19" pos:end="41:21">dpl</name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <name pos:start="41:25" pos:end="41:27">cpl</name></expr>)</condition> <block pos:start="41:30" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:67">

        <expr_stmt pos:start="43:9" pos:end="43:67"><expr pos:start="43:9" pos:end="43:66"><call pos:start="43:9" pos:end="43:66"><name pos:start="43:9" pos:end="43:27">raise_exception_err</name><argument_list pos:start="43:28" pos:end="43:66">(<argument pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><name pos:start="43:29" pos:end="43:31">env</name></expr></argument>, <argument pos:start="43:34" pos:end="43:43"><expr pos:start="43:34" pos:end="43:43"><name pos:start="43:34" pos:end="43:43">EXCP0D_GPF</name></expr></argument>, <argument pos:start="43:46" pos:end="43:65"><expr pos:start="43:46" pos:end="43:65"><operator pos:start="43:46" pos:end="43:46">(</operator><name pos:start="43:47" pos:end="43:51">intno</name> <operator pos:start="43:53" pos:end="43:54">&lt;&lt;</operator> <name pos:start="43:56" pos:end="43:60">shift</name><operator pos:start="43:61" pos:end="43:61">)</operator> <operator pos:start="43:63" pos:end="43:63">+</operator> <literal type="number" pos:start="43:65" pos:end="43:65">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="53:60">/* Since we emulate only user space, we cannot do more than

       exiting the emulation with the suitable exception and error

       code. So update EIP for INT 0x80 and EXCP_SYSCALL. */</comment>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:40">(<expr pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:14">is_int</name> <operator pos:start="55:16" pos:end="55:17">||</operator> <name pos:start="55:19" pos:end="55:23">intno</name> <operator pos:start="55:25" pos:end="55:26">==</operator> <name pos:start="55:28" pos:end="55:39">EXCP_SYSCALL</name></expr>)</condition> <block pos:start="55:42" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:28">

        <expr_stmt pos:start="57:9" pos:end="57:28"><expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:11">env</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:16">eip</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:27">next_eip</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
