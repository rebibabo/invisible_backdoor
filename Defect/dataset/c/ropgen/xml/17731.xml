<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17731.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:36"><name pos:start="1:1" pos:end="1:16">iscsi_set_events</name><argument_list pos:start="1:17" pos:end="1:36">(<argument pos:start="1:18" pos:end="1:35">IscsiLun *iscsilun</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:5">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:24">iscsi_context</name></name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:31">iscsi</name> <init pos:start="5:33" pos:end="5:49">= <expr pos:start="5:35" pos:end="5:49"><name pos:start="5:35" pos:end="5:49"><name pos:start="5:35" pos:end="5:42">iscsilun</name><operator pos:start="5:43" pos:end="5:44">-&gt;</operator><name pos:start="5:45" pos:end="5:49">iscsi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">ev</name> <init pos:start="7:12" pos:end="7:38">= <expr pos:start="7:14" pos:end="7:38"><call pos:start="7:14" pos:end="7:38"><name pos:start="7:14" pos:end="7:31">iscsi_which_events</name><argument_list pos:start="7:32" pos:end="7:38">(<argument pos:start="7:33" pos:end="7:37"><expr pos:start="7:33" pos:end="7:37"><name pos:start="7:33" pos:end="7:37">iscsi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="25:5"><if pos:start="11:5" pos:end="25:5">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:10">ev</name> <operator pos:start="11:12" pos:end="11:13">!=</operator> <name pos:start="11:15" pos:end="11:30"><name pos:start="11:15" pos:end="11:22">iscsilun</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:30">events</name></name></expr>)</condition> <block pos:start="11:33" pos:end="25:5">{<block_content pos:start="13:9" pos:end="23:30">

        <expr_stmt pos:start="13:9" pos:end="21:37"><expr pos:start="13:9" pos:end="21:36"><call pos:start="13:9" pos:end="21:36"><name pos:start="13:9" pos:end="13:26">aio_set_fd_handler</name><argument_list pos:start="13:27" pos:end="21:36">(<argument pos:start="13:28" pos:end="13:48"><expr pos:start="13:28" pos:end="13:48"><name pos:start="13:28" pos:end="13:48"><name pos:start="13:28" pos:end="13:35">iscsilun</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:48">aio_context</name></name></expr></argument>,

                           <argument pos:start="15:28" pos:end="15:46"><expr pos:start="15:28" pos:end="15:46"><call pos:start="15:28" pos:end="15:46"><name pos:start="15:28" pos:end="15:39">iscsi_get_fd</name><argument_list pos:start="15:40" pos:end="15:46">(<argument pos:start="15:41" pos:end="15:45"><expr pos:start="15:41" pos:end="15:45"><name pos:start="15:41" pos:end="15:45">iscsi</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="17:28" pos:end="17:68"><expr pos:start="17:28" pos:end="17:68"><ternary pos:start="17:28" pos:end="17:68"><condition pos:start="17:28" pos:end="17:42"><expr pos:start="17:28" pos:end="17:40"><operator pos:start="17:28" pos:end="17:28">(</operator><name pos:start="17:29" pos:end="17:30">ev</name> <operator pos:start="17:32" pos:end="17:32">&amp;</operator> <name pos:start="17:34" pos:end="17:39">POLLIN</name><operator pos:start="17:40" pos:end="17:40">)</operator></expr> ?</condition><then pos:start="17:44" pos:end="17:61"> <expr pos:start="17:44" pos:end="17:61"><name pos:start="17:44" pos:end="17:61">iscsi_process_read</name></expr> </then><else pos:start="17:63" pos:end="17:68">: <expr pos:start="17:65" pos:end="17:68"><name pos:start="17:65" pos:end="17:68">NULL</name></expr></else></ternary></expr></argument>,

                           <argument pos:start="19:28" pos:end="19:70"><expr pos:start="19:28" pos:end="19:70"><ternary pos:start="19:28" pos:end="19:70"><condition pos:start="19:28" pos:end="19:43"><expr pos:start="19:28" pos:end="19:41"><operator pos:start="19:28" pos:end="19:28">(</operator><name pos:start="19:29" pos:end="19:30">ev</name> <operator pos:start="19:32" pos:end="19:32">&amp;</operator> <name pos:start="19:34" pos:end="19:40">POLLOUT</name><operator pos:start="19:41" pos:end="19:41">)</operator></expr> ?</condition><then pos:start="19:45" pos:end="19:63"> <expr pos:start="19:45" pos:end="19:63"><name pos:start="19:45" pos:end="19:63">iscsi_process_write</name></expr> </then><else pos:start="19:65" pos:end="19:70">: <expr pos:start="19:67" pos:end="19:70"><name pos:start="19:67" pos:end="19:70">NULL</name></expr></else></ternary></expr></argument>,

                           <argument pos:start="21:28" pos:end="21:35"><expr pos:start="21:28" pos:end="21:35"><name pos:start="21:28" pos:end="21:35">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:16">iscsilun</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:24">events</name></name> <operator pos:start="23:26" pos:end="23:26">=</operator> <name pos:start="23:28" pos:end="23:29">ev</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="33:38">/* newer versions of libiscsi may return zero events. In this

     * case start a timer to ensure we are able to return to service

     * once this situation changes. */</comment>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:11">ev</name></expr>)</condition> <block pos:start="35:14" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:75">

        <expr_stmt pos:start="37:9" pos:end="39:75"><expr pos:start="37:9" pos:end="39:74"><call pos:start="37:9" pos:end="39:74"><name pos:start="37:9" pos:end="37:17">timer_mod</name><argument_list pos:start="37:18" pos:end="39:74">(<argument pos:start="37:19" pos:end="37:39"><expr pos:start="37:19" pos:end="37:39"><name pos:start="37:19" pos:end="37:39"><name pos:start="37:19" pos:end="37:26">iscsilun</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:39">event_timer</name></name></expr></argument>,

                  <argument pos:start="39:19" pos:end="39:73"><expr pos:start="39:19" pos:end="39:73"><call pos:start="39:19" pos:end="39:56"><name pos:start="39:19" pos:end="39:35">qemu_clock_get_ms</name><argument_list pos:start="39:36" pos:end="39:56">(<argument pos:start="39:37" pos:end="39:55"><expr pos:start="39:37" pos:end="39:55"><name pos:start="39:37" pos:end="39:55">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call> <operator pos:start="39:58" pos:end="39:58">+</operator> <name pos:start="39:60" pos:end="39:73">EVENT_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block>
</unit>
