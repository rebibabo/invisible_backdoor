<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17827.c" pos:tabs="8"><function pos:start="1:1" pos:end="88:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">bdrv_qed_open</name><parameter_list pos:start="1:25" pos:end="2:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:52">QDict</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:61">options</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:37"><decl pos:start="2:26" pos:end="2:37"><type pos:start="2:26" pos:end="2:37"><name pos:start="2:26" pos:end="2:30">Error</name> <modifier pos:start="2:32" pos:end="2:32">*</modifier><modifier pos:start="2:33" pos:end="2:33">*</modifier></type><name pos:start="2:34" pos:end="2:37">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="88:15">{<block_content pos:start="4:5" pos:end="88:15">
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">BDRVQEDState</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:19">s</name> <init pos:start="4:21" pos:end="4:32">= <expr pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:24">bs</name><operator pos:start="4:25" pos:end="4:26">-&gt;</operator><name pos:start="4:27" pos:end="4:32">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">QEDHeader</name></type> <name pos:start="5:15" pos:end="5:23">le_header</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:22"><decl pos:start="6:5" pos:end="6:21"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:11">int64_t</name></type> <name pos:start="6:13" pos:end="6:21">file_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:15"><expr pos:start="8:5" pos:end="8:14"><name pos:start="8:5" pos:end="8:9"><name pos:start="8:5" pos:end="8:5">s</name><operator pos:start="8:6" pos:end="8:7">-&gt;</operator><name pos:start="8:8" pos:end="8:9">bs</name></name> <operator pos:start="8:11" pos:end="8:11">=</operator> <name pos:start="8:13" pos:end="8:14">bs</name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:45"><expr pos:start="9:5" pos:end="9:44"><call pos:start="9:5" pos:end="9:44"><name pos:start="9:5" pos:end="9:17">QSIMPLEQ_INIT</name><argument_list pos:start="9:18" pos:end="9:44">(<argument pos:start="9:19" pos:end="9:43"><expr pos:start="9:19" pos:end="9:43"><operator pos:start="9:19" pos:end="9:19">&amp;</operator><name pos:start="9:20" pos:end="9:43"><name pos:start="9:20" pos:end="9:20">s</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:43">allocating_write_reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:65"><expr pos:start="10:5" pos:end="10:64"><name pos:start="10:5" pos:end="10:7">ret</name> <operator pos:start="10:9" pos:end="10:9">=</operator> <call pos:start="10:11" pos:end="10:64"><name pos:start="10:11" pos:end="10:20">bdrv_pread</name><argument_list pos:start="10:21" pos:end="10:64">(<argument pos:start="10:22" pos:end="10:29"><expr pos:start="10:22" pos:end="10:29"><name pos:start="10:22" pos:end="10:29"><name pos:start="10:22" pos:end="10:23">bs</name><operator pos:start="10:24" pos:end="10:25">-&gt;</operator><name pos:start="10:26" pos:end="10:29">file</name></name></expr></argument>, <argument pos:start="10:32" pos:end="10:32"><expr pos:start="10:32" pos:end="10:32"><literal type="number" pos:start="10:32" pos:end="10:32">0</literal></expr></argument>, <argument pos:start="10:35" pos:end="10:44"><expr pos:start="10:35" pos:end="10:44"><operator pos:start="10:35" pos:end="10:35">&amp;</operator><name pos:start="10:36" pos:end="10:44">le_header</name></expr></argument>, <argument pos:start="10:47" pos:end="10:63"><expr pos:start="10:47" pos:end="10:63"><sizeof pos:start="10:47" pos:end="10:63">sizeof<argument_list pos:start="10:53" pos:end="10:63">(<argument pos:start="10:54" pos:end="10:62"><expr pos:start="10:54" pos:end="10:62"><name pos:start="10:54" pos:end="10:62">le_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="11:5" pos:end="88:15"><if pos:start="11:5" pos:end="88:15">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:11">ret</name> <operator pos:start="11:13" pos:end="11:13">&lt;</operator> <literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr>)</condition> <block pos:start="11:18" pos:end="88:15">{<block_content pos:start="12:9" pos:end="88:15">
        <return pos:start="12:9" pos:end="12:19">return <expr pos:start="12:16" pos:end="12:18"><name pos:start="12:16" pos:end="12:18">ret</name></expr>;</return>
    <expr_stmt pos:start="13:5" pos:end="13:49"><expr pos:start="13:5" pos:end="13:48"><call pos:start="13:5" pos:end="13:48"><name pos:start="13:5" pos:end="13:24">qed_header_le_to_cpu</name><argument_list pos:start="13:25" pos:end="13:48">(<argument pos:start="13:26" pos:end="13:35"><expr pos:start="13:26" pos:end="13:35"><operator pos:start="13:26" pos:end="13:26">&amp;</operator><name pos:start="13:27" pos:end="13:35">le_header</name></expr></argument>, <argument pos:start="13:38" pos:end="13:47"><expr pos:start="13:38" pos:end="13:47"><operator pos:start="13:38" pos:end="13:38">&amp;</operator><name pos:start="13:39" pos:end="13:47"><name pos:start="13:39" pos:end="13:39">s</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:47">header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="88:15"><if pos:start="14:5" pos:end="88:15">if <condition pos:start="14:8" pos:end="14:37">(<expr pos:start="14:9" pos:end="14:36"><name pos:start="14:9" pos:end="14:23"><name pos:start="14:9" pos:end="14:9">s</name><operator pos:start="14:10" pos:end="14:11">-&gt;</operator><name pos:start="14:12" pos:end="14:17">header</name><operator pos:start="14:18" pos:end="14:18">.</operator><name pos:start="14:19" pos:end="14:23">magic</name></name> <operator pos:start="14:25" pos:end="14:26">!=</operator> <name pos:start="14:28" pos:end="14:36">QED_MAGIC</name></expr>)</condition> <block pos:start="14:39" pos:end="88:15">{<block_content pos:start="15:9" pos:end="88:15">
        <expr_stmt pos:start="15:9" pos:end="15:52"><expr pos:start="15:9" pos:end="15:51"><call pos:start="15:9" pos:end="15:51"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:51">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">errp</name></expr></argument>, <argument pos:start="15:26" pos:end="15:50"><expr pos:start="15:26" pos:end="15:50"><literal type="string" pos:start="15:26" pos:end="15:50">"Image not in QED format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="88:15"><if pos:start="16:5" pos:end="88:15">if <condition pos:start="16:8" pos:end="16:47">(<expr pos:start="16:9" pos:end="16:46"><name pos:start="16:9" pos:end="16:26"><name pos:start="16:9" pos:end="16:9">s</name><operator pos:start="16:10" pos:end="16:11">-&gt;</operator><name pos:start="16:12" pos:end="16:17">header</name><operator pos:start="16:18" pos:end="16:18">.</operator><name pos:start="16:19" pos:end="16:26">features</name></name> <operator pos:start="16:28" pos:end="16:28">&amp;</operator> <operator pos:start="16:30" pos:end="16:30">~</operator><name pos:start="16:31" pos:end="16:46">QED_FEATURE_MASK</name></expr>)</condition> <block pos:start="16:49" pos:end="88:15">{<block_content pos:start="18:9" pos:end="88:15">
        <comment type="block" pos:start="17:9" pos:end="17:49">/* image uses unsupported feature bits */</comment>
        <decl_stmt pos:start="18:9" pos:end="18:21"><decl pos:start="18:9" pos:end="18:20"><type pos:start="18:9" pos:end="18:12"><name pos:start="18:9" pos:end="18:12">char</name></type> <name pos:start="18:14" pos:end="18:20"><name pos:start="18:14" pos:end="18:16">buf</name><index pos:start="18:17" pos:end="18:20">[<expr pos:start="18:18" pos:end="18:19"><literal type="number" pos:start="18:18" pos:end="18:19">64</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt pos:start="19:9" pos:end="20:52"><expr pos:start="19:9" pos:end="20:51"><call pos:start="19:9" pos:end="20:51"><name pos:start="19:9" pos:end="19:16">snprintf</name><argument_list pos:start="19:17" pos:end="20:51">(<argument pos:start="19:18" pos:end="19:20"><expr pos:start="19:18" pos:end="19:20"><name pos:start="19:18" pos:end="19:20">buf</name></expr></argument>, <argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><sizeof pos:start="19:23" pos:end="19:33">sizeof<argument_list pos:start="19:29" pos:end="19:33">(<argument pos:start="19:30" pos:end="19:32"><expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:36" pos:end="19:45"><expr pos:start="19:36" pos:end="19:45"><literal type="string" pos:start="19:36" pos:end="19:38">"%"</literal> <name pos:start="19:40" pos:end="19:45">PRIx64</name></expr></argument>,
            <argument pos:start="20:13" pos:end="20:50"><expr pos:start="20:13" pos:end="20:50"><name pos:start="20:13" pos:end="20:30"><name pos:start="20:13" pos:end="20:13">s</name><operator pos:start="20:14" pos:end="20:15">-&gt;</operator><name pos:start="20:16" pos:end="20:21">header</name><operator pos:start="20:22" pos:end="20:22">.</operator><name pos:start="20:23" pos:end="20:30">features</name></name> <operator pos:start="20:32" pos:end="20:32">&amp;</operator> <operator pos:start="20:34" pos:end="20:34">~</operator><name pos:start="20:35" pos:end="20:50">QED_FEATURE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="22:50"><expr pos:start="21:9" pos:end="22:49"><call pos:start="21:9" pos:end="22:49"><name pos:start="21:9" pos:end="21:17">error_set</name><argument_list pos:start="21:18" pos:end="22:49">(<argument pos:start="21:19" pos:end="21:22"><expr pos:start="21:19" pos:end="21:22"><name pos:start="21:19" pos:end="21:22">errp</name></expr></argument>, <argument pos:start="21:25" pos:end="21:57"><expr pos:start="21:25" pos:end="21:57"><name pos:start="21:25" pos:end="21:57">QERR_UNKNOWN_BLOCK_FORMAT_FEATURE</name></expr></argument>,
            <argument pos:start="22:13" pos:end="22:36"><expr pos:start="22:13" pos:end="22:36"><call pos:start="22:13" pos:end="22:36"><name pos:start="22:13" pos:end="22:32">bdrv_get_device_name</name><argument_list pos:start="22:33" pos:end="22:36">(<argument pos:start="22:34" pos:end="22:35"><expr pos:start="22:34" pos:end="22:35"><name pos:start="22:34" pos:end="22:35">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="22:39" pos:end="22:43"><expr pos:start="22:39" pos:end="22:43"><literal type="string" pos:start="22:39" pos:end="22:43">"QED"</literal></expr></argument>, <argument pos:start="22:46" pos:end="22:48"><expr pos:start="22:46" pos:end="22:48"><name pos:start="22:46" pos:end="22:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="23:9" pos:end="23:24">return <expr pos:start="23:16" pos:end="23:23"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:23">ENOTSUP</name></expr>;</return>
    <if_stmt pos:start="24:5" pos:end="88:15"><if pos:start="24:5" pos:end="88:15">if <condition pos:start="24:8" pos:end="24:59">(<expr pos:start="24:9" pos:end="24:58"><operator pos:start="24:9" pos:end="24:9">!</operator><call pos:start="24:10" pos:end="24:58"><name pos:start="24:10" pos:end="24:34">qed_is_cluster_size_valid</name><argument_list pos:start="24:35" pos:end="24:58">(<argument pos:start="24:36" pos:end="24:57"><expr pos:start="24:36" pos:end="24:57"><name pos:start="24:36" pos:end="24:57"><name pos:start="24:36" pos:end="24:36">s</name><operator pos:start="24:37" pos:end="24:38">-&gt;</operator><name pos:start="24:39" pos:end="24:44">header</name><operator pos:start="24:45" pos:end="24:45">.</operator><name pos:start="24:46" pos:end="24:57">cluster_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="24:61" pos:end="88:15">{<block_content pos:start="26:5" pos:end="88:15">
    <comment type="block" pos:start="25:5" pos:end="25:50">/* Round down file size to the last cluster */</comment>
    <expr_stmt pos:start="26:5" pos:end="26:41"><expr pos:start="26:5" pos:end="26:40"><name pos:start="26:5" pos:end="26:13">file_size</name> <operator pos:start="26:15" pos:end="26:15">=</operator> <call pos:start="26:17" pos:end="26:40"><name pos:start="26:17" pos:end="26:30">bdrv_getlength</name><argument_list pos:start="26:31" pos:end="26:40">(<argument pos:start="26:32" pos:end="26:39"><expr pos:start="26:32" pos:end="26:39"><name pos:start="26:32" pos:end="26:39"><name pos:start="26:32" pos:end="26:33">bs</name><operator pos:start="26:34" pos:end="26:35">-&gt;</operator><name pos:start="26:36" pos:end="26:39">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="88:15"><if pos:start="27:5" pos:end="88:15">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:17">file_size</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>)</condition> <block pos:start="27:24" pos:end="88:15">{<block_content pos:start="28:9" pos:end="88:15">
        <return pos:start="28:9" pos:end="28:25">return <expr pos:start="28:16" pos:end="28:24"><name pos:start="28:16" pos:end="28:24">file_size</name></expr>;</return>
    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:16">file_size</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:53"><name pos:start="29:20" pos:end="29:39">qed_start_of_cluster</name><argument_list pos:start="29:40" pos:end="29:53">(<argument pos:start="29:41" pos:end="29:41"><expr pos:start="29:41" pos:end="29:41"><name pos:start="29:41" pos:end="29:41">s</name></expr></argument>, <argument pos:start="29:44" pos:end="29:52"><expr pos:start="29:44" pos:end="29:52"><name pos:start="29:44" pos:end="29:52">file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="88:15"><if pos:start="30:5" pos:end="88:15">if <condition pos:start="30:8" pos:end="30:55">(<expr pos:start="30:9" pos:end="30:54"><operator pos:start="30:9" pos:end="30:9">!</operator><call pos:start="30:10" pos:end="30:54"><name pos:start="30:10" pos:end="30:32">qed_is_table_size_valid</name><argument_list pos:start="30:33" pos:end="30:54">(<argument pos:start="30:34" pos:end="30:53"><expr pos:start="30:34" pos:end="30:53"><name pos:start="30:34" pos:end="30:53"><name pos:start="30:34" pos:end="30:34">s</name><operator pos:start="30:35" pos:end="30:36">-&gt;</operator><name pos:start="30:37" pos:end="30:42">header</name><operator pos:start="30:43" pos:end="30:43">.</operator><name pos:start="30:44" pos:end="30:53">table_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="30:57" pos:end="88:15">{<block_content pos:start="31:5" pos:end="88:15">
    <if_stmt pos:start="31:5" pos:end="88:15"><if pos:start="31:5" pos:end="88:15">if <condition pos:start="31:8" pos:end="33:55">(<expr pos:start="31:9" pos:end="33:54"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="33:54"><name pos:start="31:10" pos:end="31:32">qed_is_image_size_valid</name><argument_list pos:start="31:33" pos:end="33:54">(<argument pos:start="31:34" pos:end="31:53"><expr pos:start="31:34" pos:end="31:53"><name pos:start="31:34" pos:end="31:53"><name pos:start="31:34" pos:end="31:34">s</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:42">header</name><operator pos:start="31:43" pos:end="31:43">.</operator><name pos:start="31:44" pos:end="31:53">image_size</name></name></expr></argument>,
                                 <argument pos:start="32:34" pos:end="32:55"><expr pos:start="32:34" pos:end="32:55"><name pos:start="32:34" pos:end="32:55"><name pos:start="32:34" pos:end="32:34">s</name><operator pos:start="32:35" pos:end="32:36">-&gt;</operator><name pos:start="32:37" pos:end="32:42">header</name><operator pos:start="32:43" pos:end="32:43">.</operator><name pos:start="32:44" pos:end="32:55">cluster_size</name></name></expr></argument>,
                                 <argument pos:start="33:34" pos:end="33:53"><expr pos:start="33:34" pos:end="33:53"><name pos:start="33:34" pos:end="33:53"><name pos:start="33:34" pos:end="33:34">s</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:42">header</name><operator pos:start="33:43" pos:end="33:43">.</operator><name pos:start="33:44" pos:end="33:53">table_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:57" pos:end="88:15">{<block_content pos:start="34:5" pos:end="88:15">
    <if_stmt pos:start="34:5" pos:end="88:15"><if pos:start="34:5" pos:end="88:15">if <condition pos:start="34:8" pos:end="34:62">(<expr pos:start="34:9" pos:end="34:61"><operator pos:start="34:9" pos:end="34:9">!</operator><call pos:start="34:10" pos:end="34:61"><name pos:start="34:10" pos:end="34:31">qed_check_table_offset</name><argument_list pos:start="34:32" pos:end="34:61">(<argument pos:start="34:33" pos:end="34:33"><expr pos:start="34:33" pos:end="34:33"><name pos:start="34:33" pos:end="34:33">s</name></expr></argument>, <argument pos:start="34:36" pos:end="34:60"><expr pos:start="34:36" pos:end="34:60"><name pos:start="34:36" pos:end="34:60"><name pos:start="34:36" pos:end="34:36">s</name><operator pos:start="34:37" pos:end="34:38">-&gt;</operator><name pos:start="34:39" pos:end="34:44">header</name><operator pos:start="34:45" pos:end="34:45">.</operator><name pos:start="34:46" pos:end="34:60">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="34:64" pos:end="88:15">{<block_content pos:start="35:5" pos:end="88:15">
    <expr_stmt pos:start="35:5" pos:end="36:39"><expr pos:start="35:5" pos:end="36:38"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:19">table_nelems</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <operator pos:start="35:23" pos:end="35:23">(</operator><name pos:start="35:24" pos:end="35:45"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:32">header</name><operator pos:start="35:33" pos:end="35:33">.</operator><name pos:start="35:34" pos:end="35:45">cluster_size</name></name> <operator pos:start="35:47" pos:end="35:47">*</operator> <name pos:start="35:49" pos:end="35:68"><name pos:start="35:49" pos:end="35:49">s</name><operator pos:start="35:50" pos:end="35:51">-&gt;</operator><name pos:start="35:52" pos:end="35:57">header</name><operator pos:start="35:58" pos:end="35:58">.</operator><name pos:start="35:59" pos:end="35:68">table_size</name></name><operator pos:start="35:69" pos:end="35:69">)</operator> <operator pos:start="35:71" pos:end="35:71">/</operator>
                      <sizeof pos:start="36:23" pos:end="36:38">sizeof<argument_list pos:start="36:29" pos:end="36:38">(<argument pos:start="36:30" pos:end="36:37"><expr pos:start="36:30" pos:end="36:37"><name pos:start="36:30" pos:end="36:37">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:15">l2_shift</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:45"><name pos:start="37:19" pos:end="37:21">ffs</name><argument_list pos:start="37:22" pos:end="37:45">(<argument pos:start="37:23" pos:end="37:44"><expr pos:start="37:23" pos:end="37:44"><name pos:start="37:23" pos:end="37:44"><name pos:start="37:23" pos:end="37:23">s</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:31">header</name><operator pos:start="37:32" pos:end="37:32">.</operator><name pos:start="37:33" pos:end="37:44">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:47" pos:end="37:47">-</operator> <literal type="number" pos:start="37:49" pos:end="37:49">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:37"><expr pos:start="38:5" pos:end="38:36"><name pos:start="38:5" pos:end="38:14"><name pos:start="38:5" pos:end="38:5">s</name><operator pos:start="38:6" pos:end="38:7">-&gt;</operator><name pos:start="38:8" pos:end="38:14">l2_mask</name></name> <operator pos:start="38:16" pos:end="38:16">=</operator> <name pos:start="38:18" pos:end="38:32"><name pos:start="38:18" pos:end="38:18">s</name><operator pos:start="38:19" pos:end="38:20">-&gt;</operator><name pos:start="38:21" pos:end="38:32">table_nelems</name></name> <operator pos:start="38:34" pos:end="38:34">-</operator> <literal type="number" pos:start="38:36" pos:end="38:36">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:15">l1_shift</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:29"><name pos:start="39:19" pos:end="39:19">s</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:29">l2_shift</name></name> <operator pos:start="39:31" pos:end="39:31">+</operator> <call pos:start="39:33" pos:end="39:52"><name pos:start="39:33" pos:end="39:35">ffs</name><argument_list pos:start="39:36" pos:end="39:52">(<argument pos:start="39:37" pos:end="39:51"><expr pos:start="39:37" pos:end="39:51"><name pos:start="39:37" pos:end="39:51"><name pos:start="39:37" pos:end="39:37">s</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:51">table_nelems</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:54" pos:end="39:54">-</operator> <literal type="number" pos:start="39:56" pos:end="39:56">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="88:15"><if pos:start="40:5" pos:end="88:15">if <condition pos:start="40:8" pos:end="40:50">(<expr pos:start="40:9" pos:end="40:49"><operator pos:start="40:9" pos:end="40:9">(</operator><name pos:start="40:10" pos:end="40:27"><name pos:start="40:10" pos:end="40:10">s</name><operator pos:start="40:11" pos:end="40:12">-&gt;</operator><name pos:start="40:13" pos:end="40:18">header</name><operator pos:start="40:19" pos:end="40:19">.</operator><name pos:start="40:20" pos:end="40:27">features</name></name> <operator pos:start="40:29" pos:end="40:29">&amp;</operator> <name pos:start="40:31" pos:end="40:48">QED_F_BACKING_FILE</name><operator pos:start="40:49" pos:end="40:49">)</operator></expr>)</condition> <block pos:start="40:52" pos:end="88:15">{<block_content pos:start="41:9" pos:end="88:15">
        <if_stmt pos:start="41:9" pos:end="88:15"><if pos:start="41:9" pos:end="88:15">if <condition pos:start="41:12" pos:end="43:59">(<expr pos:start="41:13" pos:end="43:58"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:21">uint64_t</name><operator pos:start="41:22" pos:end="41:22">)</operator><name pos:start="41:23" pos:end="41:55"><name pos:start="41:23" pos:end="41:23">s</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:31">header</name><operator pos:start="41:32" pos:end="41:32">.</operator><name pos:start="41:33" pos:end="41:55">backing_filename_offset</name></name> <operator pos:start="41:57" pos:end="41:57">+</operator>
            <name pos:start="42:13" pos:end="42:43"><name pos:start="42:13" pos:end="42:13">s</name><operator pos:start="42:14" pos:end="42:15">-&gt;</operator><name pos:start="42:16" pos:end="42:21">header</name><operator pos:start="42:22" pos:end="42:22">.</operator><name pos:start="42:23" pos:end="42:43">backing_filename_size</name></name> <operator pos:start="42:45" pos:end="42:45">&gt;</operator>
            <name pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:21">header</name><operator pos:start="43:22" pos:end="43:22">.</operator><name pos:start="43:23" pos:end="43:34">cluster_size</name></name> <operator pos:start="43:36" pos:end="43:36">*</operator> <name pos:start="43:38" pos:end="43:58"><name pos:start="43:38" pos:end="43:38">s</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:46">header</name><operator pos:start="43:47" pos:end="43:47">.</operator><name pos:start="43:48" pos:end="43:58">header_size</name></name></expr>)</condition> <block pos:start="43:61" pos:end="88:15">{<block_content pos:start="44:9" pos:end="88:15">
        <expr_stmt pos:start="44:9" pos:end="46:56"><expr pos:start="44:9" pos:end="46:55"><name pos:start="44:9" pos:end="44:11">ret</name> <operator pos:start="44:13" pos:end="44:13">=</operator> <call pos:start="44:15" pos:end="46:55"><name pos:start="44:15" pos:end="44:29">qed_read_string</name><argument_list pos:start="44:30" pos:end="46:55">(<argument pos:start="44:31" pos:end="44:38"><expr pos:start="44:31" pos:end="44:38"><name pos:start="44:31" pos:end="44:38"><name pos:start="44:31" pos:end="44:32">bs</name><operator pos:start="44:33" pos:end="44:34">-&gt;</operator><name pos:start="44:35" pos:end="44:38">file</name></name></expr></argument>, <argument pos:start="44:41" pos:end="44:73"><expr pos:start="44:41" pos:end="44:73"><name pos:start="44:41" pos:end="44:73"><name pos:start="44:41" pos:end="44:41">s</name><operator pos:start="44:42" pos:end="44:43">-&gt;</operator><name pos:start="44:44" pos:end="44:49">header</name><operator pos:start="44:50" pos:end="44:50">.</operator><name pos:start="44:51" pos:end="44:73">backing_filename_offset</name></name></expr></argument>,
                              <argument pos:start="45:31" pos:end="45:61"><expr pos:start="45:31" pos:end="45:61"><name pos:start="45:31" pos:end="45:61"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:39">header</name><operator pos:start="45:40" pos:end="45:40">.</operator><name pos:start="45:41" pos:end="45:61">backing_filename_size</name></name></expr></argument>, <argument pos:start="45:64" pos:end="45:79"><expr pos:start="45:64" pos:end="45:79"><name pos:start="45:64" pos:end="45:79"><name pos:start="45:64" pos:end="45:65">bs</name><operator pos:start="45:66" pos:end="45:67">-&gt;</operator><name pos:start="45:68" pos:end="45:79">backing_file</name></name></expr></argument>,
                              <argument pos:start="46:31" pos:end="46:54"><expr pos:start="46:31" pos:end="46:54"><sizeof pos:start="46:31" pos:end="46:54">sizeof<argument_list pos:start="46:37" pos:end="46:54">(<argument pos:start="46:38" pos:end="46:53"><expr pos:start="46:38" pos:end="46:53"><name pos:start="46:38" pos:end="46:53"><name pos:start="46:38" pos:end="46:39">bs</name><operator pos:start="46:40" pos:end="46:41">-&gt;</operator><name pos:start="46:42" pos:end="46:53">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="47:9" pos:end="88:15"><if pos:start="47:9" pos:end="88:15">if <condition pos:start="47:12" pos:end="47:20">(<expr pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">&lt;</operator> <literal type="number" pos:start="47:19" pos:end="47:19">0</literal></expr>)</condition> <block pos:start="47:22" pos:end="88:15">{<block_content pos:start="48:13" pos:end="88:15">
            <return pos:start="48:13" pos:end="48:23">return <expr pos:start="48:20" pos:end="48:22"><name pos:start="48:20" pos:end="48:22">ret</name></expr>;</return>
        <if_stmt pos:start="49:9" pos:end="88:15"><if pos:start="49:9" pos:end="88:15">if <condition pos:start="49:12" pos:end="49:63">(<expr pos:start="49:13" pos:end="49:62"><name pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:21">header</name><operator pos:start="49:22" pos:end="49:22">.</operator><name pos:start="49:23" pos:end="49:30">features</name></name> <operator pos:start="49:32" pos:end="49:32">&amp;</operator> <name pos:start="49:34" pos:end="49:62">QED_F_BACKING_FORMAT_NO_PROBE</name></expr>)</condition> <block pos:start="49:65" pos:end="88:15">{<block_content pos:start="50:13" pos:end="88:15">
            <expr_stmt pos:start="50:13" pos:end="50:75"><expr pos:start="50:13" pos:end="50:74"><call pos:start="50:13" pos:end="50:74"><name pos:start="50:13" pos:end="50:19">pstrcpy</name><argument_list pos:start="50:20" pos:end="50:74">(<argument pos:start="50:21" pos:end="50:38"><expr pos:start="50:21" pos:end="50:38"><name pos:start="50:21" pos:end="50:38"><name pos:start="50:21" pos:end="50:22">bs</name><operator pos:start="50:23" pos:end="50:24">-&gt;</operator><name pos:start="50:25" pos:end="50:38">backing_format</name></name></expr></argument>, <argument pos:start="50:41" pos:end="50:66"><expr pos:start="50:41" pos:end="50:66"><sizeof pos:start="50:41" pos:end="50:66">sizeof<argument_list pos:start="50:47" pos:end="50:66">(<argument pos:start="50:48" pos:end="50:65"><expr pos:start="50:48" pos:end="50:65"><name pos:start="50:48" pos:end="50:65"><name pos:start="50:48" pos:end="50:49">bs</name><operator pos:start="50:50" pos:end="50:51">-&gt;</operator><name pos:start="50:52" pos:end="50:65">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="50:69" pos:end="50:73"><expr pos:start="50:69" pos:end="50:73"><literal type="string" pos:start="50:69" pos:end="50:73">"raw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="51:5" pos:end="56:7">/* Reset unknown autoclear feature bits.  This is a backwards
     * compatibility mechanism that allows images to be opened by older
     * programs, which "knock out" unknown feature bits.  When an image is
     * opened by a newer program again it can detect that the autoclear
     * feature is no longer valid.
     */</comment>
    <if_stmt pos:start="57:5" pos:end="88:15"><if pos:start="57:5" pos:end="88:15">if <condition pos:start="57:8" pos:end="58:67">(<expr pos:start="57:9" pos:end="58:66"><operator pos:start="57:9" pos:end="57:9">(</operator><name pos:start="57:10" pos:end="57:37"><name pos:start="57:10" pos:end="57:10">s</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:18">header</name><operator pos:start="57:19" pos:end="57:19">.</operator><name pos:start="57:20" pos:end="57:37">autoclear_features</name></name> <operator pos:start="57:39" pos:end="57:39">&amp;</operator> <operator pos:start="57:41" pos:end="57:41">~</operator><name pos:start="57:42" pos:end="57:67">QED_AUTOCLEAR_FEATURE_MASK</name><operator pos:start="57:68" pos:end="57:68">)</operator> <operator pos:start="57:70" pos:end="57:71">!=</operator> <literal type="number" pos:start="57:73" pos:end="57:73">0</literal> <operator pos:start="57:75" pos:end="57:76">&amp;&amp;</operator>
        <operator pos:start="58:9" pos:end="58:9">!</operator><call pos:start="58:10" pos:end="58:36"><name pos:start="58:10" pos:end="58:26">bdrv_is_read_only</name><argument_list pos:start="58:27" pos:end="58:36">(<argument pos:start="58:28" pos:end="58:35"><expr pos:start="58:28" pos:end="58:35"><name pos:start="58:28" pos:end="58:35"><name pos:start="58:28" pos:end="58:29">bs</name><operator pos:start="58:30" pos:end="58:31">-&gt;</operator><name pos:start="58:32" pos:end="58:35">file</name></name></expr></argument>)</argument_list></call> <operator pos:start="58:38" pos:end="58:39">&amp;&amp;</operator> <operator pos:start="58:41" pos:end="58:41">!</operator><operator pos:start="58:42" pos:end="58:42">(</operator><name pos:start="58:43" pos:end="58:47">flags</name> <operator pos:start="58:49" pos:end="58:49">&amp;</operator> <name pos:start="58:51" pos:end="58:65">BDRV_O_INCOMING</name><operator pos:start="58:66" pos:end="58:66">)</operator></expr>)</condition> <block pos:start="58:69" pos:end="88:15">{<block_content pos:start="59:9" pos:end="88:15">
        <expr_stmt pos:start="59:9" pos:end="59:67"><expr pos:start="59:9" pos:end="59:66"><name pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:17">header</name><operator pos:start="59:18" pos:end="59:18">.</operator><name pos:start="59:19" pos:end="59:36">autoclear_features</name></name> <operator pos:start="59:38" pos:end="59:39">&amp;=</operator> <name pos:start="59:41" pos:end="59:66">QED_AUTOCLEAR_FEATURE_MASK</name></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:39"><expr pos:start="60:9" pos:end="60:38"><name pos:start="60:9" pos:end="60:11">ret</name> <operator pos:start="60:13" pos:end="60:13">=</operator> <call pos:start="60:15" pos:end="60:38"><name pos:start="60:15" pos:end="60:35">qed_write_header_sync</name><argument_list pos:start="60:36" pos:end="60:38">(<argument pos:start="60:37" pos:end="60:37"><expr pos:start="60:37" pos:end="60:37"><name pos:start="60:37" pos:end="60:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="61:9" pos:end="88:15"><if pos:start="61:9" pos:end="88:15">if <condition pos:start="61:12" pos:end="61:16">(<expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">ret</name></expr>)</condition> <block pos:start="61:18" pos:end="88:15">{<block_content pos:start="62:13" pos:end="88:15">
            <return pos:start="62:13" pos:end="62:23">return <expr pos:start="62:20" pos:end="62:22"><name pos:start="62:20" pos:end="62:22">ret</name></expr>;</return>
        <comment type="block" pos:start="63:9" pos:end="63:70">/* From here on only known autoclear feature bits are valid */</comment>
        <expr_stmt pos:start="64:9" pos:end="64:29"><expr pos:start="64:9" pos:end="64:28"><call pos:start="64:9" pos:end="64:28"><name pos:start="64:9" pos:end="64:18">bdrv_flush</name><argument_list pos:start="64:19" pos:end="64:28">(<argument pos:start="64:20" pos:end="64:27"><expr pos:start="64:20" pos:end="64:27"><name pos:start="64:20" pos:end="64:27"><name pos:start="64:20" pos:end="64:21">bs</name><operator pos:start="64:22" pos:end="64:23">-&gt;</operator><name pos:start="64:24" pos:end="64:27">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:15">l1_table</name></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:36"><name pos:start="65:19" pos:end="65:33">qed_alloc_table</name><argument_list pos:start="65:34" pos:end="65:36">(<argument pos:start="65:35" pos:end="65:35"><expr pos:start="65:35" pos:end="65:35"><name pos:start="65:35" pos:end="65:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:36"><expr pos:start="66:5" pos:end="66:35"><call pos:start="66:5" pos:end="66:35"><name pos:start="66:5" pos:end="66:21">qed_init_l2_cache</name><argument_list pos:start="66:22" pos:end="66:35">(<argument pos:start="66:23" pos:end="66:34"><expr pos:start="66:23" pos:end="66:34"><operator pos:start="66:23" pos:end="66:23">&amp;</operator><name pos:start="66:24" pos:end="66:34"><name pos:start="66:24" pos:end="66:24">s</name><operator pos:start="66:25" pos:end="66:26">-&gt;</operator><name pos:start="66:27" pos:end="66:34">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:36"><expr pos:start="67:5" pos:end="67:35"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:35"><name pos:start="67:11" pos:end="67:32">qed_read_l1_table_sync</name><argument_list pos:start="67:33" pos:end="67:35">(<argument pos:start="67:34" pos:end="67:34"><expr pos:start="67:34" pos:end="67:34"><name pos:start="67:34" pos:end="67:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="68:5" pos:end="88:15"><if pos:start="68:5" pos:end="88:15">if <condition pos:start="68:8" pos:end="68:12">(<expr pos:start="68:9" pos:end="68:11"><name pos:start="68:9" pos:end="68:11">ret</name></expr>)</condition> <block pos:start="68:14" pos:end="88:15">{<block_content pos:start="69:9" pos:end="88:15">
        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">out</name>;</goto>
    <comment type="block" pos:start="70:5" pos:end="70:60">/* If image was not closed cleanly, check consistency */</comment>
    <if_stmt pos:start="71:5" pos:end="88:15"><if pos:start="71:5" pos:end="88:15">if <condition pos:start="71:8" pos:end="71:75">(<expr pos:start="71:9" pos:end="71:74"><operator pos:start="71:9" pos:end="71:9">!</operator><operator pos:start="71:10" pos:end="71:10">(</operator><name pos:start="71:11" pos:end="71:15">flags</name> <operator pos:start="71:17" pos:end="71:17">&amp;</operator> <name pos:start="71:19" pos:end="71:30">BDRV_O_CHECK</name><operator pos:start="71:31" pos:end="71:31">)</operator> <operator pos:start="71:33" pos:end="71:34">&amp;&amp;</operator> <operator pos:start="71:36" pos:end="71:36">(</operator><name pos:start="71:37" pos:end="71:54"><name pos:start="71:37" pos:end="71:37">s</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:45">header</name><operator pos:start="71:46" pos:end="71:46">.</operator><name pos:start="71:47" pos:end="71:54">features</name></name> <operator pos:start="71:56" pos:end="71:56">&amp;</operator> <name pos:start="71:58" pos:end="71:73">QED_F_NEED_CHECK</name><operator pos:start="71:74" pos:end="71:74">)</operator></expr>)</condition> <block pos:start="71:77" pos:end="88:15">{<block_content pos:start="77:9" pos:end="88:15">
        <comment type="block" pos:start="72:9" pos:end="76:11">/* Read-only images cannot be fixed.  There is no risk of corruption
         * since write operations are not possible.  Therefore, allow
         * potentially inconsistent images to be opened read-only.  This can
         * aid data recovery from an otherwise inconsistent image.
         */</comment>
        <if_stmt pos:start="77:9" pos:end="88:15"><if pos:start="77:9" pos:end="88:15">if <condition pos:start="77:12" pos:end="78:39">(<expr pos:start="77:13" pos:end="78:38"><operator pos:start="77:13" pos:end="77:13">!</operator><call pos:start="77:14" pos:end="77:40"><name pos:start="77:14" pos:end="77:30">bdrv_is_read_only</name><argument_list pos:start="77:31" pos:end="77:40">(<argument pos:start="77:32" pos:end="77:39"><expr pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:33">bs</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:39">file</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:42" pos:end="77:43">&amp;&amp;</operator>
            <operator pos:start="78:13" pos:end="78:13">!</operator><operator pos:start="78:14" pos:end="78:14">(</operator><name pos:start="78:15" pos:end="78:19">flags</name> <operator pos:start="78:21" pos:end="78:21">&amp;</operator> <name pos:start="78:23" pos:end="78:37">BDRV_O_INCOMING</name><operator pos:start="78:38" pos:end="78:38">)</operator></expr>)</condition> <block pos:start="78:41" pos:end="88:15">{<block_content pos:start="79:13" pos:end="88:15">
            <decl_stmt pos:start="79:13" pos:end="79:41"><decl pos:start="79:13" pos:end="79:40"><type pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:27">BdrvCheckResult</name></type> <name pos:start="79:29" pos:end="79:34">result</name> <init pos:start="79:36" pos:end="79:40">= <expr pos:start="79:38" pos:end="79:40"><block pos:start="79:38" pos:end="79:40">{<expr pos:start="79:39" pos:end="79:39"><literal type="number" pos:start="79:39" pos:end="79:39">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="80:13" pos:end="80:46"><expr pos:start="80:13" pos:end="80:45"><name pos:start="80:13" pos:end="80:15">ret</name> <operator pos:start="80:17" pos:end="80:17">=</operator> <call pos:start="80:19" pos:end="80:45"><name pos:start="80:19" pos:end="80:27">qed_check</name><argument_list pos:start="80:28" pos:end="80:45">(<argument pos:start="80:29" pos:end="80:29"><expr pos:start="80:29" pos:end="80:29"><name pos:start="80:29" pos:end="80:29">s</name></expr></argument>, <argument pos:start="80:32" pos:end="80:38"><expr pos:start="80:32" pos:end="80:38"><operator pos:start="80:32" pos:end="80:32">&amp;</operator><name pos:start="80:33" pos:end="80:38">result</name></expr></argument>, <argument pos:start="80:41" pos:end="80:44"><expr pos:start="80:41" pos:end="80:44"><name pos:start="80:41" pos:end="80:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="81:13" pos:end="88:15"><if pos:start="81:13" pos:end="88:15">if <condition pos:start="81:16" pos:end="81:20">(<expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">ret</name></expr>)</condition> <block pos:start="81:22" pos:end="88:15">{<block_content pos:start="82:17" pos:end="88:15">
                <goto pos:start="82:17" pos:end="82:25">goto <name pos:start="82:22" pos:end="82:24">out</name>;</goto>
    <expr_stmt pos:start="83:5" pos:end="83:62"><expr pos:start="83:5" pos:end="83:61"><call pos:start="83:5" pos:end="83:61"><name pos:start="83:5" pos:end="83:31">bdrv_qed_attach_aio_context</name><argument_list pos:start="83:32" pos:end="83:61">(<argument pos:start="83:33" pos:end="83:34"><expr pos:start="83:33" pos:end="83:34"><name pos:start="83:33" pos:end="83:34">bs</name></expr></argument>, <argument pos:start="83:37" pos:end="83:60"><expr pos:start="83:37" pos:end="83:60"><call pos:start="83:37" pos:end="83:60"><name pos:start="83:37" pos:end="83:56">bdrv_get_aio_context</name><argument_list pos:start="83:57" pos:end="83:60">(<argument pos:start="83:58" pos:end="83:59"><expr pos:start="83:58" pos:end="83:59"><name pos:start="83:58" pos:end="83:59">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label pos:start="84:1" pos:end="84:4"><name pos:start="84:1" pos:end="84:3">out</name>:</label>
    <if_stmt pos:start="85:5" pos:end="88:15"><if pos:start="85:5" pos:end="88:15">if <condition pos:start="85:8" pos:end="85:12">(<expr pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">ret</name></expr>)</condition> <block pos:start="85:14" pos:end="88:15">{<block_content pos:start="86:9" pos:end="88:15">
        <expr_stmt pos:start="86:9" pos:end="86:40"><expr pos:start="86:9" pos:end="86:39"><call pos:start="86:9" pos:end="86:39"><name pos:start="86:9" pos:end="86:25">qed_free_l2_cache</name><argument_list pos:start="86:26" pos:end="86:39">(<argument pos:start="86:27" pos:end="86:38"><expr pos:start="86:27" pos:end="86:38"><operator pos:start="86:27" pos:end="86:27">&amp;</operator><name pos:start="86:28" pos:end="86:38"><name pos:start="86:28" pos:end="86:28">s</name><operator pos:start="86:29" pos:end="86:30">-&gt;</operator><name pos:start="86:31" pos:end="86:38">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="87:9" pos:end="87:32"><expr pos:start="87:9" pos:end="87:31"><call pos:start="87:9" pos:end="87:31"><name pos:start="87:9" pos:end="87:18">qemu_vfree</name><argument_list pos:start="87:19" pos:end="87:31">(<argument pos:start="87:20" pos:end="87:30"><expr pos:start="87:20" pos:end="87:30"><name pos:start="87:20" pos:end="87:30"><name pos:start="87:20" pos:end="87:20">s</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:30">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="88:5" pos:end="88:15">return <expr pos:start="88:12" pos:end="88:14"><name pos:start="88:12" pos:end="88:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
