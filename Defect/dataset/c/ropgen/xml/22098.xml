<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22098.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">bcm2835_peripherals_realize</name><parameter_list pos:start="1:40" pos:end="1:71">(<parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:51">DeviceState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">dev</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:63">Error</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier><modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="375:1">{<block_content pos:start="5:5" pos:end="373:5">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26">BCM2835PeripheralState</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:29">s</name> <init pos:start="5:31" pos:end="5:56">= <expr pos:start="5:33" pos:end="5:56"><call pos:start="5:33" pos:end="5:56"><name pos:start="5:33" pos:end="5:51">BCM2835_PERIPHERALS</name><argument_list pos:start="5:52" pos:end="5:56">(<argument pos:start="5:53" pos:end="5:55"><expr pos:start="5:53" pos:end="5:55"><name pos:start="5:53" pos:end="5:55">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">Object</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">obj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:21">ram_size</name></decl>, <decl pos:start="13:24" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:24" pos:end="13:33">vcram_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:61"><expr pos:start="19:5" pos:end="19:60"><name pos:start="19:5" pos:end="19:7">obj</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:60"><name pos:start="19:11" pos:end="19:34">object_property_get_link</name><argument_list pos:start="19:35" pos:end="19:60">(<argument pos:start="19:36" pos:end="19:46"><expr pos:start="19:36" pos:end="19:46"><call pos:start="19:36" pos:end="19:46"><name pos:start="19:36" pos:end="19:41">OBJECT</name><argument_list pos:start="19:42" pos:end="19:46">(<argument pos:start="19:43" pos:end="19:45"><expr pos:start="19:43" pos:end="19:45"><name pos:start="19:43" pos:end="19:45">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:49" pos:end="19:53"><expr pos:start="19:49" pos:end="19:53"><literal type="string" pos:start="19:49" pos:end="19:53">"ram"</literal></expr></argument>, <argument pos:start="19:56" pos:end="19:59"><expr pos:start="19:56" pos:end="19:59"><operator pos:start="19:56" pos:end="19:56">&amp;</operator><name pos:start="19:57" pos:end="19:59">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:20">(<expr pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:11">obj</name> <operator pos:start="21:13" pos:end="21:14">==</operator> <name pos:start="21:16" pos:end="21:19">NULL</name></expr>)</condition> <block pos:start="21:22" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="25:52"><expr pos:start="23:9" pos:end="25:51"><call pos:start="23:9" pos:end="25:51"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="25:51">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:62"><expr pos:start="23:26" pos:end="23:62"><literal type="string" pos:start="23:26" pos:end="23:62">"%s: required ram link not found: %s"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27">__func__</name></expr></argument>, <argument pos:start="25:30" pos:end="25:50"><expr pos:start="25:30" pos:end="25:50"><call pos:start="25:30" pos:end="25:50"><name pos:start="25:30" pos:end="25:45">error_get_pretty</name><argument_list pos:start="25:46" pos:end="25:50">(<argument pos:start="25:47" pos:end="25:49"><expr pos:start="25:47" pos:end="25:49"><name pos:start="25:47" pos:end="25:49">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:7">ram</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:28"><name pos:start="33:11" pos:end="33:23">MEMORY_REGION</name><argument_list pos:start="33:24" pos:end="33:28">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:12">ram_size</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:38"><name pos:start="35:16" pos:end="35:33">memory_region_size</name><argument_list pos:start="35:34" pos:end="35:38">(<argument pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:37">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:61">/* Map peripherals and RAM into the GPU address space. */</comment>

    <expr_stmt pos:start="41:5" pos:end="45:62"><expr pos:start="41:5" pos:end="45:61"><call pos:start="41:5" pos:end="45:61"><name pos:start="41:5" pos:end="41:28">memory_region_init_alias</name><argument_list pos:start="41:29" pos:end="45:61">(<argument pos:start="41:30" pos:end="41:46"><expr pos:start="41:30" pos:end="41:46"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:46"><name pos:start="41:31" pos:end="41:31">s</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:46">peri_mr_alias</name></name></expr></argument>, <argument pos:start="41:49" pos:end="41:57"><expr pos:start="41:49" pos:end="41:57"><call pos:start="41:49" pos:end="41:57"><name pos:start="41:49" pos:end="41:54">OBJECT</name><argument_list pos:start="41:55" pos:end="41:57">(<argument pos:start="41:56" pos:end="41:56"><expr pos:start="41:56" pos:end="41:56"><name pos:start="41:56" pos:end="41:56">s</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="43:30" pos:end="43:50"><expr pos:start="43:30" pos:end="43:50"><literal type="string" pos:start="43:30" pos:end="43:50">"bcm2835-peripherals"</literal></expr></argument>, <argument pos:start="43:53" pos:end="43:63"><expr pos:start="43:53" pos:end="43:63"><operator pos:start="43:53" pos:end="43:53">&amp;</operator><name pos:start="43:54" pos:end="43:63"><name pos:start="43:54" pos:end="43:54">s</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:63">peri_mr</name></name></expr></argument>, <argument pos:start="43:66" pos:end="43:66"><expr pos:start="43:66" pos:end="43:66"><literal type="number" pos:start="43:66" pos:end="43:66">0</literal></expr></argument>,

                             <argument pos:start="45:30" pos:end="45:60"><expr pos:start="45:30" pos:end="45:60"><call pos:start="45:30" pos:end="45:60"><name pos:start="45:30" pos:end="45:47">memory_region_size</name><argument_list pos:start="45:48" pos:end="45:60">(<argument pos:start="45:49" pos:end="45:59"><expr pos:start="45:49" pos:end="45:59"><operator pos:start="45:49" pos:end="45:49">&amp;</operator><name pos:start="45:50" pos:end="45:59"><name pos:start="45:50" pos:end="45:50">s</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:59">peri_mr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:62"><expr pos:start="49:5" pos:end="51:61"><call pos:start="49:5" pos:end="51:61"><name pos:start="49:5" pos:end="49:39">memory_region_add_subregion_overlap</name><argument_list pos:start="49:40" pos:end="51:61">(<argument pos:start="49:41" pos:end="49:54"><expr pos:start="49:41" pos:end="49:54"><operator pos:start="49:41" pos:end="49:41">&amp;</operator><name pos:start="49:42" pos:end="49:54"><name pos:start="49:42" pos:end="49:42">s</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:54">gpu_bus_mr</name></name></expr></argument>, <argument pos:start="49:57" pos:end="49:76"><expr pos:start="49:57" pos:end="49:76"><name pos:start="49:57" pos:end="49:76">BCM2835_VC_PERI_BASE</name></expr></argument>,

                                        <argument pos:start="51:41" pos:end="51:57"><expr pos:start="51:41" pos:end="51:57"><operator pos:start="51:41" pos:end="51:41">&amp;</operator><name pos:start="51:42" pos:end="51:57"><name pos:start="51:42" pos:end="51:42">s</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:57">peri_mr_alias</name></name></expr></argument>, <argument pos:start="51:60" pos:end="51:60"><expr pos:start="51:60" pos:end="51:60"><literal type="number" pos:start="51:60" pos:end="51:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:79">/* RAM is aliased four times (different cache configurations) on the GPU */</comment>

    <for pos:start="57:5" pos:end="67:5">for <control pos:start="57:9" pos:end="57:27">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">n</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:17">n</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <literal type="number" pos:start="57:21" pos:end="57:21">4</literal></expr>;</condition> <incr pos:start="57:24" pos:end="57:26"><expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:24">n</name><operator pos:start="57:25" pos:end="57:26">++</operator></expr></incr>)</control> <block pos:start="57:29" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:65">

        <expr_stmt pos:start="59:9" pos:end="61:79"><expr pos:start="59:9" pos:end="61:78"><call pos:start="59:9" pos:end="61:78"><name pos:start="59:9" pos:end="59:32">memory_region_init_alias</name><argument_list pos:start="59:33" pos:end="61:78">(<argument pos:start="59:34" pos:end="59:49"><expr pos:start="59:34" pos:end="59:49"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:49"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:46">ram_alias</name><index pos:start="59:47" pos:end="59:49">[<expr pos:start="59:48" pos:end="59:48"><name pos:start="59:48" pos:end="59:48">n</name></expr>]</index></name></expr></argument>, <argument pos:start="59:52" pos:end="59:60"><expr pos:start="59:52" pos:end="59:60"><call pos:start="59:52" pos:end="59:60"><name pos:start="59:52" pos:end="59:57">OBJECT</name><argument_list pos:start="59:58" pos:end="59:60">(<argument pos:start="59:59" pos:end="59:59"><expr pos:start="59:59" pos:end="59:59"><name pos:start="59:59" pos:end="59:59">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="61:34" pos:end="61:59"><expr pos:start="61:34" pos:end="61:59"><literal type="string" pos:start="61:34" pos:end="61:59">"bcm2835-gpu-ram-alias[*]"</literal></expr></argument>, <argument pos:start="61:62" pos:end="61:64"><expr pos:start="61:62" pos:end="61:64"><name pos:start="61:62" pos:end="61:64">ram</name></expr></argument>, <argument pos:start="61:67" pos:end="61:67"><expr pos:start="61:67" pos:end="61:67"><literal type="number" pos:start="61:67" pos:end="61:67">0</literal></expr></argument>, <argument pos:start="61:70" pos:end="61:77"><expr pos:start="61:70" pos:end="61:77"><name pos:start="61:70" pos:end="61:77">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="65:65"><expr pos:start="63:9" pos:end="65:64"><call pos:start="63:9" pos:end="65:64"><name pos:start="63:9" pos:end="63:43">memory_region_add_subregion_overlap</name><argument_list pos:start="63:44" pos:end="65:64">(<argument pos:start="63:45" pos:end="63:58"><expr pos:start="63:45" pos:end="63:58"><operator pos:start="63:45" pos:end="63:45">&amp;</operator><name pos:start="63:46" pos:end="63:58"><name pos:start="63:46" pos:end="63:46">s</name><operator pos:start="63:47" pos:end="63:48">-&gt;</operator><name pos:start="63:49" pos:end="63:58">gpu_bus_mr</name></name></expr></argument>, <argument pos:start="63:61" pos:end="63:75"><expr pos:start="63:61" pos:end="63:75"><operator pos:start="63:61" pos:end="63:61">(</operator><name pos:start="63:62" pos:end="63:67">hwaddr</name><operator pos:start="63:68" pos:end="63:68">)</operator><name pos:start="63:69" pos:end="63:69">n</name> <operator pos:start="63:71" pos:end="63:72">&lt;&lt;</operator> <literal type="number" pos:start="63:74" pos:end="63:75">30</literal></expr></argument>,

                                            <argument pos:start="65:45" pos:end="65:60"><expr pos:start="65:45" pos:end="65:60"><operator pos:start="65:45" pos:end="65:45">&amp;</operator><name pos:start="65:46" pos:end="65:60"><name pos:start="65:46" pos:end="65:46">s</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:57">ram_alias</name><index pos:start="65:58" pos:end="65:60">[<expr pos:start="65:59" pos:end="65:59"><name pos:start="65:59" pos:end="65:59">n</name></expr>]</index></name></expr></argument>, <argument pos:start="65:63" pos:end="65:63"><expr pos:start="65:63" pos:end="65:63"><literal type="number" pos:start="65:63" pos:end="65:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="71:5" pos:end="71:30">/* Interrupt Controller */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:69"><expr pos:start="73:5" pos:end="73:68"><call pos:start="73:5" pos:end="73:68"><name pos:start="73:5" pos:end="73:28">object_property_set_bool</name><argument_list pos:start="73:29" pos:end="73:68">(<argument pos:start="73:30" pos:end="73:43"><expr pos:start="73:30" pos:end="73:43"><call pos:start="73:30" pos:end="73:43"><name pos:start="73:30" pos:end="73:35">OBJECT</name><argument_list pos:start="73:36" pos:end="73:43">(<argument pos:start="73:37" pos:end="73:42"><expr pos:start="73:37" pos:end="73:42"><operator pos:start="73:37" pos:end="73:37">&amp;</operator><name pos:start="73:38" pos:end="73:42"><name pos:start="73:38" pos:end="73:38">s</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:42">ic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:46" pos:end="73:49"><expr pos:start="73:46" pos:end="73:49"><name pos:start="73:46" pos:end="73:49">true</name></expr></argument>, <argument pos:start="73:52" pos:end="73:61"><expr pos:start="73:52" pos:end="73:61"><literal type="string" pos:start="73:52" pos:end="73:61">"realized"</literal></expr></argument>, <argument pos:start="73:64" pos:end="73:67"><expr pos:start="73:64" pos:end="73:67"><operator pos:start="73:64" pos:end="73:64">&amp;</operator><name pos:start="73:65" pos:end="73:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:12">(<expr pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">err</name></expr>)</condition> <block pos:start="75:14" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:15">

        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><call pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:23">error_propagate</name><argument_list pos:start="77:24" pos:end="77:34">(<argument pos:start="77:25" pos:end="77:28"><expr pos:start="77:25" pos:end="77:28"><name pos:start="77:25" pos:end="77:28">errp</name></expr></argument>, <argument pos:start="77:31" pos:end="77:33"><expr pos:start="77:31" pos:end="77:33"><name pos:start="77:31" pos:end="77:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="87:67"><expr pos:start="85:5" pos:end="87:66"><call pos:start="85:5" pos:end="87:66"><name pos:start="85:5" pos:end="85:31">memory_region_add_subregion</name><argument_list pos:start="85:32" pos:end="87:66">(<argument pos:start="85:33" pos:end="85:43"><expr pos:start="85:33" pos:end="85:43"><operator pos:start="85:33" pos:end="85:33">&amp;</operator><name pos:start="85:34" pos:end="85:43"><name pos:start="85:34" pos:end="85:34">s</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:43">peri_mr</name></name></expr></argument>, <argument pos:start="85:46" pos:end="85:62"><expr pos:start="85:46" pos:end="85:62"><name pos:start="85:46" pos:end="85:62">ARMCTRL_IC_OFFSET</name></expr></argument>,

                <argument pos:start="87:17" pos:end="87:65"><expr pos:start="87:17" pos:end="87:65"><call pos:start="87:17" pos:end="87:65"><name pos:start="87:17" pos:end="87:38">sysbus_mmio_get_region</name><argument_list pos:start="87:39" pos:end="87:65">(<argument pos:start="87:40" pos:end="87:61"><expr pos:start="87:40" pos:end="87:61"><call pos:start="87:40" pos:end="87:61"><name pos:start="87:40" pos:end="87:53">SYS_BUS_DEVICE</name><argument_list pos:start="87:54" pos:end="87:61">(<argument pos:start="87:55" pos:end="87:60"><expr pos:start="87:55" pos:end="87:60"><operator pos:start="87:55" pos:end="87:55">&amp;</operator><name pos:start="87:56" pos:end="87:60"><name pos:start="87:56" pos:end="87:56">s</name><operator pos:start="87:57" pos:end="87:58">-&gt;</operator><name pos:start="87:59" pos:end="87:60">ic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:64" pos:end="87:64"><expr pos:start="87:64" pos:end="87:64"><literal type="number" pos:start="87:64" pos:end="87:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:63"><expr pos:start="89:5" pos:end="89:62"><call pos:start="89:5" pos:end="89:62"><name pos:start="89:5" pos:end="89:19">sysbus_pass_irq</name><argument_list pos:start="89:20" pos:end="89:62">(<argument pos:start="89:21" pos:end="89:37"><expr pos:start="89:21" pos:end="89:37"><call pos:start="89:21" pos:end="89:37"><name pos:start="89:21" pos:end="89:34">SYS_BUS_DEVICE</name><argument_list pos:start="89:35" pos:end="89:37">(<argument pos:start="89:36" pos:end="89:36"><expr pos:start="89:36" pos:end="89:36"><name pos:start="89:36" pos:end="89:36">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:40" pos:end="89:61"><expr pos:start="89:40" pos:end="89:61"><call pos:start="89:40" pos:end="89:61"><name pos:start="89:40" pos:end="89:53">SYS_BUS_DEVICE</name><argument_list pos:start="89:54" pos:end="89:61">(<argument pos:start="89:55" pos:end="89:60"><expr pos:start="89:55" pos:end="89:60"><operator pos:start="89:55" pos:end="89:55">&amp;</operator><name pos:start="89:56" pos:end="89:60"><name pos:start="89:56" pos:end="89:56">s</name><operator pos:start="89:57" pos:end="89:58">-&gt;</operator><name pos:start="89:59" pos:end="89:60">ic</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:15">/* UART0 */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:66"><expr pos:start="95:5" pos:end="95:65"><call pos:start="95:5" pos:end="95:65"><name pos:start="95:5" pos:end="95:21">qdev_prop_set_chr</name><argument_list pos:start="95:22" pos:end="95:65">(<argument pos:start="95:23" pos:end="95:38"><expr pos:start="95:23" pos:end="95:38"><call pos:start="95:23" pos:end="95:38"><name pos:start="95:23" pos:end="95:28">DEVICE</name><argument_list pos:start="95:29" pos:end="95:38">(<argument pos:start="95:30" pos:end="95:37"><expr pos:start="95:30" pos:end="95:37"><name pos:start="95:30" pos:end="95:37"><name pos:start="95:30" pos:end="95:30">s</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:37">uart0</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:41" pos:end="95:49"><expr pos:start="95:41" pos:end="95:49"><literal type="string" pos:start="95:41" pos:end="95:49">"chardev"</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:64"><expr pos:start="95:52" pos:end="95:64"><name pos:start="95:52" pos:end="95:64"><name pos:start="95:52" pos:end="95:61">serial_hds</name><index pos:start="95:62" pos:end="95:64">[<expr pos:start="95:63" pos:end="95:63"><literal type="number" pos:start="95:63" pos:end="95:63">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:71"><expr pos:start="97:5" pos:end="97:70"><call pos:start="97:5" pos:end="97:70"><name pos:start="97:5" pos:end="97:28">object_property_set_bool</name><argument_list pos:start="97:29" pos:end="97:70">(<argument pos:start="97:30" pos:end="97:45"><expr pos:start="97:30" pos:end="97:45"><call pos:start="97:30" pos:end="97:45"><name pos:start="97:30" pos:end="97:35">OBJECT</name><argument_list pos:start="97:36" pos:end="97:45">(<argument pos:start="97:37" pos:end="97:44"><expr pos:start="97:37" pos:end="97:44"><name pos:start="97:37" pos:end="97:44"><name pos:start="97:37" pos:end="97:37">s</name><operator pos:start="97:38" pos:end="97:39">-&gt;</operator><name pos:start="97:40" pos:end="97:44">uart0</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:48" pos:end="97:51"><expr pos:start="97:48" pos:end="97:51"><name pos:start="97:48" pos:end="97:51">true</name></expr></argument>, <argument pos:start="97:54" pos:end="97:63"><expr pos:start="97:54" pos:end="97:63"><literal type="string" pos:start="97:54" pos:end="97:63">"realized"</literal></expr></argument>, <argument pos:start="97:66" pos:end="97:69"><expr pos:start="97:66" pos:end="97:69"><operator pos:start="97:66" pos:end="97:66">&amp;</operator><name pos:start="97:67" pos:end="97:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:12">(<expr pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">err</name></expr>)</condition> <block pos:start="99:14" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <expr_stmt pos:start="101:9" pos:end="101:35"><expr pos:start="101:9" pos:end="101:34"><call pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:23">error_propagate</name><argument_list pos:start="101:24" pos:end="101:34">(<argument pos:start="101:25" pos:end="101:28"><expr pos:start="101:25" pos:end="101:28"><name pos:start="101:25" pos:end="101:28">errp</name></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:69"><expr pos:start="109:5" pos:end="111:68"><call pos:start="109:5" pos:end="111:68"><name pos:start="109:5" pos:end="109:31">memory_region_add_subregion</name><argument_list pos:start="109:32" pos:end="111:68">(<argument pos:start="109:33" pos:end="109:43"><expr pos:start="109:33" pos:end="109:43"><operator pos:start="109:33" pos:end="109:33">&amp;</operator><name pos:start="109:34" pos:end="109:43"><name pos:start="109:34" pos:end="109:34">s</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:43">peri_mr</name></name></expr></argument>, <argument pos:start="109:46" pos:end="109:57"><expr pos:start="109:46" pos:end="109:57"><name pos:start="109:46" pos:end="109:57">UART0_OFFSET</name></expr></argument>,

                                <argument pos:start="111:33" pos:end="111:67"><expr pos:start="111:33" pos:end="111:67"><call pos:start="111:33" pos:end="111:67"><name pos:start="111:33" pos:end="111:54">sysbus_mmio_get_region</name><argument_list pos:start="111:55" pos:end="111:67">(<argument pos:start="111:56" pos:end="111:63"><expr pos:start="111:56" pos:end="111:63"><name pos:start="111:56" pos:end="111:63"><name pos:start="111:56" pos:end="111:56">s</name><operator pos:start="111:57" pos:end="111:58">-&gt;</operator><name pos:start="111:59" pos:end="111:63">uart0</name></name></expr></argument>, <argument pos:start="111:66" pos:end="111:66"><expr pos:start="111:66" pos:end="111:66"><literal type="number" pos:start="111:66" pos:end="111:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="117:48"><expr pos:start="113:5" pos:end="117:47"><call pos:start="113:5" pos:end="117:47"><name pos:start="113:5" pos:end="113:22">sysbus_connect_irq</name><argument_list pos:start="113:23" pos:end="117:47">(<argument pos:start="113:24" pos:end="113:31"><expr pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:24">s</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:31">uart0</name></name></expr></argument>, <argument pos:start="113:34" pos:end="113:34"><expr pos:start="113:34" pos:end="113:34"><literal type="number" pos:start="113:34" pos:end="113:34">0</literal></expr></argument>,

        <argument pos:start="115:9" pos:end="117:46"><expr pos:start="115:9" pos:end="117:46"><call pos:start="115:9" pos:end="117:46"><name pos:start="115:9" pos:end="115:30">qdev_get_gpio_in_named</name><argument_list pos:start="115:31" pos:end="117:46">(<argument pos:start="115:32" pos:end="115:45"><expr pos:start="115:32" pos:end="115:45"><call pos:start="115:32" pos:end="115:45"><name pos:start="115:32" pos:end="115:37">DEVICE</name><argument_list pos:start="115:38" pos:end="115:45">(<argument pos:start="115:39" pos:end="115:44"><expr pos:start="115:39" pos:end="115:44"><operator pos:start="115:39" pos:end="115:39">&amp;</operator><name pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:40">s</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:44">ic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:48" pos:end="115:65"><expr pos:start="115:48" pos:end="115:65"><name pos:start="115:48" pos:end="115:65">BCM2835_IC_GPU_IRQ</name></expr></argument>,

                               <argument pos:start="117:32" pos:end="117:45"><expr pos:start="117:32" pos:end="117:45"><name pos:start="117:32" pos:end="117:45">INTERRUPT_UART</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="119:5" pos:end="119:21">/* AUX / UART1 */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:65"><expr pos:start="121:5" pos:end="121:64"><call pos:start="121:5" pos:end="121:64"><name pos:start="121:5" pos:end="121:21">qdev_prop_set_chr</name><argument_list pos:start="121:22" pos:end="121:64">(<argument pos:start="121:23" pos:end="121:37"><expr pos:start="121:23" pos:end="121:37"><call pos:start="121:23" pos:end="121:37"><name pos:start="121:23" pos:end="121:28">DEVICE</name><argument_list pos:start="121:29" pos:end="121:37">(<argument pos:start="121:30" pos:end="121:36"><expr pos:start="121:30" pos:end="121:36"><operator pos:start="121:30" pos:end="121:30">&amp;</operator><name pos:start="121:31" pos:end="121:36"><name pos:start="121:31" pos:end="121:31">s</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:36">aux</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:40" pos:end="121:48"><expr pos:start="121:40" pos:end="121:48"><literal type="string" pos:start="121:40" pos:end="121:48">"chardev"</literal></expr></argument>, <argument pos:start="121:51" pos:end="121:63"><expr pos:start="121:51" pos:end="121:63"><name pos:start="121:51" pos:end="121:63"><name pos:start="121:51" pos:end="121:60">serial_hds</name><index pos:start="121:61" pos:end="121:63">[<expr pos:start="121:62" pos:end="121:62"><literal type="number" pos:start="121:62" pos:end="121:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:70"><expr pos:start="125:5" pos:end="125:69"><call pos:start="125:5" pos:end="125:69"><name pos:start="125:5" pos:end="125:28">object_property_set_bool</name><argument_list pos:start="125:29" pos:end="125:69">(<argument pos:start="125:30" pos:end="125:44"><expr pos:start="125:30" pos:end="125:44"><call pos:start="125:30" pos:end="125:44"><name pos:start="125:30" pos:end="125:35">OBJECT</name><argument_list pos:start="125:36" pos:end="125:44">(<argument pos:start="125:37" pos:end="125:43"><expr pos:start="125:37" pos:end="125:43"><operator pos:start="125:37" pos:end="125:37">&amp;</operator><name pos:start="125:38" pos:end="125:43"><name pos:start="125:38" pos:end="125:38">s</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:43">aux</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="125:47" pos:end="125:50"><expr pos:start="125:47" pos:end="125:50"><name pos:start="125:47" pos:end="125:50">true</name></expr></argument>, <argument pos:start="125:53" pos:end="125:62"><expr pos:start="125:53" pos:end="125:62"><literal type="string" pos:start="125:53" pos:end="125:62">"realized"</literal></expr></argument>, <argument pos:start="125:65" pos:end="125:68"><expr pos:start="125:65" pos:end="125:68"><operator pos:start="125:65" pos:end="125:65">&amp;</operator><name pos:start="125:66" pos:end="125:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:12">(<expr pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">err</name></expr>)</condition> <block pos:start="127:14" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:15">

        <expr_stmt pos:start="129:9" pos:end="129:35"><expr pos:start="129:9" pos:end="129:34"><call pos:start="129:9" pos:end="129:34"><name pos:start="129:9" pos:end="129:23">error_propagate</name><argument_list pos:start="129:24" pos:end="129:34">(<argument pos:start="129:25" pos:end="129:28"><expr pos:start="129:25" pos:end="129:28"><name pos:start="129:25" pos:end="129:28">errp</name></expr></argument>, <argument pos:start="129:31" pos:end="129:33"><expr pos:start="129:31" pos:end="129:33"><name pos:start="129:31" pos:end="129:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="139:68"><expr pos:start="137:5" pos:end="139:67"><call pos:start="137:5" pos:end="139:67"><name pos:start="137:5" pos:end="137:31">memory_region_add_subregion</name><argument_list pos:start="137:32" pos:end="139:67">(<argument pos:start="137:33" pos:end="137:43"><expr pos:start="137:33" pos:end="137:43"><operator pos:start="137:33" pos:end="137:33">&amp;</operator><name pos:start="137:34" pos:end="137:43"><name pos:start="137:34" pos:end="137:34">s</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:43">peri_mr</name></name></expr></argument>, <argument pos:start="137:46" pos:end="137:57"><expr pos:start="137:46" pos:end="137:57"><name pos:start="137:46" pos:end="137:57">UART1_OFFSET</name></expr></argument>,

                <argument pos:start="139:17" pos:end="139:66"><expr pos:start="139:17" pos:end="139:66"><call pos:start="139:17" pos:end="139:66"><name pos:start="139:17" pos:end="139:38">sysbus_mmio_get_region</name><argument_list pos:start="139:39" pos:end="139:66">(<argument pos:start="139:40" pos:end="139:62"><expr pos:start="139:40" pos:end="139:62"><call pos:start="139:40" pos:end="139:62"><name pos:start="139:40" pos:end="139:53">SYS_BUS_DEVICE</name><argument_list pos:start="139:54" pos:end="139:62">(<argument pos:start="139:55" pos:end="139:61"><expr pos:start="139:55" pos:end="139:61"><operator pos:start="139:55" pos:end="139:55">&amp;</operator><name pos:start="139:56" pos:end="139:61"><name pos:start="139:56" pos:end="139:56">s</name><operator pos:start="139:57" pos:end="139:58">-&gt;</operator><name pos:start="139:59" pos:end="139:61">aux</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="139:65" pos:end="139:65"><expr pos:start="139:65" pos:end="139:65"><literal type="number" pos:start="139:65" pos:end="139:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="145:47"><expr pos:start="141:5" pos:end="145:46"><call pos:start="141:5" pos:end="145:46"><name pos:start="141:5" pos:end="141:22">sysbus_connect_irq</name><argument_list pos:start="141:23" pos:end="145:46">(<argument pos:start="141:24" pos:end="141:46"><expr pos:start="141:24" pos:end="141:46"><call pos:start="141:24" pos:end="141:46"><name pos:start="141:24" pos:end="141:37">SYS_BUS_DEVICE</name><argument_list pos:start="141:38" pos:end="141:46">(<argument pos:start="141:39" pos:end="141:45"><expr pos:start="141:39" pos:end="141:45"><operator pos:start="141:39" pos:end="141:39">&amp;</operator><name pos:start="141:40" pos:end="141:45"><name pos:start="141:40" pos:end="141:40">s</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:45">aux</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="141:49" pos:end="141:49"><expr pos:start="141:49" pos:end="141:49"><literal type="number" pos:start="141:49" pos:end="141:49">0</literal></expr></argument>,

        <argument pos:start="143:9" pos:end="145:45"><expr pos:start="143:9" pos:end="145:45"><call pos:start="143:9" pos:end="145:45"><name pos:start="143:9" pos:end="143:30">qdev_get_gpio_in_named</name><argument_list pos:start="143:31" pos:end="145:45">(<argument pos:start="143:32" pos:end="143:45"><expr pos:start="143:32" pos:end="143:45"><call pos:start="143:32" pos:end="143:45"><name pos:start="143:32" pos:end="143:37">DEVICE</name><argument_list pos:start="143:38" pos:end="143:45">(<argument pos:start="143:39" pos:end="143:44"><expr pos:start="143:39" pos:end="143:44"><operator pos:start="143:39" pos:end="143:39">&amp;</operator><name pos:start="143:40" pos:end="143:44"><name pos:start="143:40" pos:end="143:40">s</name><operator pos:start="143:41" pos:end="143:42">-&gt;</operator><name pos:start="143:43" pos:end="143:44">ic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:48" pos:end="143:65"><expr pos:start="143:48" pos:end="143:65"><name pos:start="143:48" pos:end="143:65">BCM2835_IC_GPU_IRQ</name></expr></argument>,

                               <argument pos:start="145:32" pos:end="145:44"><expr pos:start="145:32" pos:end="145:44"><name pos:start="145:32" pos:end="145:44">INTERRUPT_AUX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:19">/* Mailboxes */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:73"><expr pos:start="151:5" pos:end="151:72"><call pos:start="151:5" pos:end="151:72"><name pos:start="151:5" pos:end="151:28">object_property_set_bool</name><argument_list pos:start="151:29" pos:end="151:72">(<argument pos:start="151:30" pos:end="151:47"><expr pos:start="151:30" pos:end="151:47"><call pos:start="151:30" pos:end="151:47"><name pos:start="151:30" pos:end="151:35">OBJECT</name><argument_list pos:start="151:36" pos:end="151:47">(<argument pos:start="151:37" pos:end="151:46"><expr pos:start="151:37" pos:end="151:46"><operator pos:start="151:37" pos:end="151:37">&amp;</operator><name pos:start="151:38" pos:end="151:46"><name pos:start="151:38" pos:end="151:38">s</name><operator pos:start="151:39" pos:end="151:40">-&gt;</operator><name pos:start="151:41" pos:end="151:46">mboxes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:50" pos:end="151:53"><expr pos:start="151:50" pos:end="151:53"><name pos:start="151:50" pos:end="151:53">true</name></expr></argument>, <argument pos:start="151:56" pos:end="151:65"><expr pos:start="151:56" pos:end="151:65"><literal type="string" pos:start="151:56" pos:end="151:65">"realized"</literal></expr></argument>, <argument pos:start="151:68" pos:end="151:71"><expr pos:start="151:68" pos:end="151:71"><operator pos:start="151:68" pos:end="151:68">&amp;</operator><name pos:start="151:69" pos:end="151:71">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="159:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:12">(<expr pos:start="153:9" pos:end="153:11"><name pos:start="153:9" pos:end="153:11">err</name></expr>)</condition> <block pos:start="153:14" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:15">

        <expr_stmt pos:start="155:9" pos:end="155:35"><expr pos:start="155:9" pos:end="155:34"><call pos:start="155:9" pos:end="155:34"><name pos:start="155:9" pos:end="155:23">error_propagate</name><argument_list pos:start="155:24" pos:end="155:34">(<argument pos:start="155:25" pos:end="155:28"><expr pos:start="155:25" pos:end="155:28"><name pos:start="155:25" pos:end="155:28">errp</name></expr></argument>, <argument pos:start="155:31" pos:end="155:33"><expr pos:start="155:31" pos:end="155:33"><name pos:start="155:31" pos:end="155:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="165:71"><expr pos:start="163:5" pos:end="165:70"><call pos:start="163:5" pos:end="165:70"><name pos:start="163:5" pos:end="163:31">memory_region_add_subregion</name><argument_list pos:start="163:32" pos:end="165:70">(<argument pos:start="163:33" pos:end="163:43"><expr pos:start="163:33" pos:end="163:43"><operator pos:start="163:33" pos:end="163:33">&amp;</operator><name pos:start="163:34" pos:end="163:43"><name pos:start="163:34" pos:end="163:34">s</name><operator pos:start="163:35" pos:end="163:36">-&gt;</operator><name pos:start="163:37" pos:end="163:43">peri_mr</name></name></expr></argument>, <argument pos:start="163:46" pos:end="163:65"><expr pos:start="163:46" pos:end="163:65"><name pos:start="163:46" pos:end="163:65">ARMCTRL_0_SBM_OFFSET</name></expr></argument>,

                <argument pos:start="165:17" pos:end="165:69"><expr pos:start="165:17" pos:end="165:69"><call pos:start="165:17" pos:end="165:69"><name pos:start="165:17" pos:end="165:38">sysbus_mmio_get_region</name><argument_list pos:start="165:39" pos:end="165:69">(<argument pos:start="165:40" pos:end="165:65"><expr pos:start="165:40" pos:end="165:65"><call pos:start="165:40" pos:end="165:65"><name pos:start="165:40" pos:end="165:53">SYS_BUS_DEVICE</name><argument_list pos:start="165:54" pos:end="165:65">(<argument pos:start="165:55" pos:end="165:64"><expr pos:start="165:55" pos:end="165:64"><operator pos:start="165:55" pos:end="165:55">&amp;</operator><name pos:start="165:56" pos:end="165:64"><name pos:start="165:56" pos:end="165:56">s</name><operator pos:start="165:57" pos:end="165:58">-&gt;</operator><name pos:start="165:59" pos:end="165:64">mboxes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:68" pos:end="165:68"><expr pos:start="165:68" pos:end="165:68"><literal type="number" pos:start="165:68" pos:end="165:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="171:55"><expr pos:start="167:5" pos:end="171:54"><call pos:start="167:5" pos:end="171:54"><name pos:start="167:5" pos:end="167:22">sysbus_connect_irq</name><argument_list pos:start="167:23" pos:end="171:54">(<argument pos:start="167:24" pos:end="167:49"><expr pos:start="167:24" pos:end="167:49"><call pos:start="167:24" pos:end="167:49"><name pos:start="167:24" pos:end="167:37">SYS_BUS_DEVICE</name><argument_list pos:start="167:38" pos:end="167:49">(<argument pos:start="167:39" pos:end="167:48"><expr pos:start="167:39" pos:end="167:48"><operator pos:start="167:39" pos:end="167:39">&amp;</operator><name pos:start="167:40" pos:end="167:48"><name pos:start="167:40" pos:end="167:40">s</name><operator pos:start="167:41" pos:end="167:42">-&gt;</operator><name pos:start="167:43" pos:end="167:48">mboxes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:52" pos:end="167:52"><expr pos:start="167:52" pos:end="167:52"><literal type="number" pos:start="167:52" pos:end="167:52">0</literal></expr></argument>,

        <argument pos:start="169:9" pos:end="171:53"><expr pos:start="169:9" pos:end="171:53"><call pos:start="169:9" pos:end="171:53"><name pos:start="169:9" pos:end="169:30">qdev_get_gpio_in_named</name><argument_list pos:start="169:31" pos:end="171:53">(<argument pos:start="169:32" pos:end="169:45"><expr pos:start="169:32" pos:end="169:45"><call pos:start="169:32" pos:end="169:45"><name pos:start="169:32" pos:end="169:37">DEVICE</name><argument_list pos:start="169:38" pos:end="169:45">(<argument pos:start="169:39" pos:end="169:44"><expr pos:start="169:39" pos:end="169:44"><operator pos:start="169:39" pos:end="169:39">&amp;</operator><name pos:start="169:40" pos:end="169:44"><name pos:start="169:40" pos:end="169:40">s</name><operator pos:start="169:41" pos:end="169:42">-&gt;</operator><name pos:start="169:43" pos:end="169:44">ic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="169:48" pos:end="169:65"><expr pos:start="169:48" pos:end="169:65"><name pos:start="169:48" pos:end="169:65">BCM2835_IC_ARM_IRQ</name></expr></argument>,

                               <argument pos:start="171:32" pos:end="171:52"><expr pos:start="171:32" pos:end="171:52"><name pos:start="171:32" pos:end="171:52">INTERRUPT_ARM_MAILBOX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:21">/* Framebuffer */</comment>

    <expr_stmt pos:start="177:5" pos:end="179:57"><expr pos:start="177:5" pos:end="179:56"><name pos:start="177:5" pos:end="177:14">vcram_size</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <operator pos:start="177:18" pos:end="177:18">(</operator><name pos:start="177:19" pos:end="177:26">uint32_t</name><operator pos:start="177:27" pos:end="177:27">)</operator><call pos:start="177:28" pos:end="179:56"><name pos:start="177:28" pos:end="177:50">object_property_get_int</name><argument_list pos:start="177:51" pos:end="179:56">(<argument pos:start="177:52" pos:end="177:60"><expr pos:start="177:52" pos:end="177:60"><call pos:start="177:52" pos:end="177:60"><name pos:start="177:52" pos:end="177:57">OBJECT</name><argument_list pos:start="177:58" pos:end="177:60">(<argument pos:start="177:59" pos:end="177:59"><expr pos:start="177:59" pos:end="177:59"><name pos:start="177:59" pos:end="177:59">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:63" pos:end="177:74"><expr pos:start="177:63" pos:end="177:74"><literal type="string" pos:start="177:63" pos:end="177:74">"vcram-size"</literal></expr></argument>,

                                                   <argument pos:start="179:52" pos:end="179:55"><expr pos:start="179:52" pos:end="179:55"><operator pos:start="179:52" pos:end="179:52">&amp;</operator><name pos:start="179:53" pos:end="179:55">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:12">(<expr pos:start="181:9" pos:end="181:11"><name pos:start="181:9" pos:end="181:11">err</name></expr>)</condition> <block pos:start="181:14" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:15">

        <expr_stmt pos:start="183:9" pos:end="183:35"><expr pos:start="183:9" pos:end="183:34"><call pos:start="183:9" pos:end="183:34"><name pos:start="183:9" pos:end="183:23">error_propagate</name><argument_list pos:start="183:24" pos:end="183:34">(<argument pos:start="183:25" pos:end="183:28"><expr pos:start="183:25" pos:end="183:28"><name pos:start="183:25" pos:end="183:28">errp</name></expr></argument>, <argument pos:start="183:31" pos:end="183:33"><expr pos:start="183:31" pos:end="183:33"><name pos:start="183:31" pos:end="183:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="185:9" pos:end="185:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="193:48"><expr pos:start="191:5" pos:end="193:47"><call pos:start="191:5" pos:end="193:47"><name pos:start="191:5" pos:end="191:27">object_property_set_int</name><argument_list pos:start="191:28" pos:end="193:47">(<argument pos:start="191:29" pos:end="191:42"><expr pos:start="191:29" pos:end="191:42"><call pos:start="191:29" pos:end="191:42"><name pos:start="191:29" pos:end="191:34">OBJECT</name><argument_list pos:start="191:35" pos:end="191:42">(<argument pos:start="191:36" pos:end="191:41"><expr pos:start="191:36" pos:end="191:41"><operator pos:start="191:36" pos:end="191:36">&amp;</operator><name pos:start="191:37" pos:end="191:41"><name pos:start="191:37" pos:end="191:37">s</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:41">fb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="191:45" pos:end="191:65"><expr pos:start="191:45" pos:end="191:65"><name pos:start="191:45" pos:end="191:52">ram_size</name> <operator pos:start="191:54" pos:end="191:54">-</operator> <name pos:start="191:56" pos:end="191:65">vcram_size</name></expr></argument>,

                            <argument pos:start="193:29" pos:end="193:40"><expr pos:start="193:29" pos:end="193:40"><literal type="string" pos:start="193:29" pos:end="193:40">"vcram-base"</literal></expr></argument>, <argument pos:start="193:43" pos:end="193:46"><expr pos:start="193:43" pos:end="193:46"><operator pos:start="193:43" pos:end="193:43">&amp;</operator><name pos:start="193:44" pos:end="193:46">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="195:5" pos:end="201:5"><if pos:start="195:5" pos:end="201:5">if <condition pos:start="195:8" pos:end="195:12">(<expr pos:start="195:9" pos:end="195:11"><name pos:start="195:9" pos:end="195:11">err</name></expr>)</condition> <block pos:start="195:14" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:15">

        <expr_stmt pos:start="197:9" pos:end="197:35"><expr pos:start="197:9" pos:end="197:34"><call pos:start="197:9" pos:end="197:34"><name pos:start="197:9" pos:end="197:23">error_propagate</name><argument_list pos:start="197:24" pos:end="197:34">(<argument pos:start="197:25" pos:end="197:28"><expr pos:start="197:25" pos:end="197:28"><name pos:start="197:25" pos:end="197:28">errp</name></expr></argument>, <argument pos:start="197:31" pos:end="197:33"><expr pos:start="197:31" pos:end="197:33"><name pos:start="197:31" pos:end="197:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:69"><expr pos:start="205:5" pos:end="205:68"><call pos:start="205:5" pos:end="205:68"><name pos:start="205:5" pos:end="205:28">object_property_set_bool</name><argument_list pos:start="205:29" pos:end="205:68">(<argument pos:start="205:30" pos:end="205:43"><expr pos:start="205:30" pos:end="205:43"><call pos:start="205:30" pos:end="205:43"><name pos:start="205:30" pos:end="205:35">OBJECT</name><argument_list pos:start="205:36" pos:end="205:43">(<argument pos:start="205:37" pos:end="205:42"><expr pos:start="205:37" pos:end="205:42"><operator pos:start="205:37" pos:end="205:37">&amp;</operator><name pos:start="205:38" pos:end="205:42"><name pos:start="205:38" pos:end="205:38">s</name><operator pos:start="205:39" pos:end="205:40">-&gt;</operator><name pos:start="205:41" pos:end="205:42">fb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:46" pos:end="205:49"><expr pos:start="205:46" pos:end="205:49"><name pos:start="205:46" pos:end="205:49">true</name></expr></argument>, <argument pos:start="205:52" pos:end="205:61"><expr pos:start="205:52" pos:end="205:61"><literal type="string" pos:start="205:52" pos:end="205:61">"realized"</literal></expr></argument>, <argument pos:start="205:64" pos:end="205:67"><expr pos:start="205:64" pos:end="205:67"><operator pos:start="205:64" pos:end="205:64">&amp;</operator><name pos:start="205:65" pos:end="205:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="213:5"><if pos:start="207:5" pos:end="213:5">if <condition pos:start="207:8" pos:end="207:12">(<expr pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">err</name></expr>)</condition> <block pos:start="207:14" pos:end="213:5">{<block_content pos:start="209:9" pos:end="211:15">

        <expr_stmt pos:start="209:9" pos:end="209:35"><expr pos:start="209:9" pos:end="209:34"><call pos:start="209:9" pos:end="209:34"><name pos:start="209:9" pos:end="209:23">error_propagate</name><argument_list pos:start="209:24" pos:end="209:34">(<argument pos:start="209:25" pos:end="209:28"><expr pos:start="209:25" pos:end="209:28"><name pos:start="209:25" pos:end="209:28">errp</name></expr></argument>, <argument pos:start="209:31" pos:end="209:33"><expr pos:start="209:31" pos:end="209:33"><name pos:start="209:31" pos:end="209:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="211:9" pos:end="211:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="217:5" pos:end="219:67"><expr pos:start="217:5" pos:end="219:66"><call pos:start="217:5" pos:end="219:66"><name pos:start="217:5" pos:end="217:31">memory_region_add_subregion</name><argument_list pos:start="217:32" pos:end="219:66">(<argument pos:start="217:33" pos:end="217:43"><expr pos:start="217:33" pos:end="217:43"><operator pos:start="217:33" pos:end="217:33">&amp;</operator><name pos:start="217:34" pos:end="217:43"><name pos:start="217:34" pos:end="217:34">s</name><operator pos:start="217:35" pos:end="217:36">-&gt;</operator><name pos:start="217:37" pos:end="217:43">mbox_mr</name></name></expr></argument>, <argument pos:start="217:46" pos:end="217:79"><expr pos:start="217:46" pos:end="217:79"><name pos:start="217:46" pos:end="217:57">MBOX_CHAN_FB</name> <operator pos:start="217:59" pos:end="217:60">&lt;&lt;</operator> <name pos:start="217:62" pos:end="217:79">MBOX_AS_CHAN_SHIFT</name></expr></argument>,

                <argument pos:start="219:17" pos:end="219:65"><expr pos:start="219:17" pos:end="219:65"><call pos:start="219:17" pos:end="219:65"><name pos:start="219:17" pos:end="219:38">sysbus_mmio_get_region</name><argument_list pos:start="219:39" pos:end="219:65">(<argument pos:start="219:40" pos:end="219:61"><expr pos:start="219:40" pos:end="219:61"><call pos:start="219:40" pos:end="219:61"><name pos:start="219:40" pos:end="219:53">SYS_BUS_DEVICE</name><argument_list pos:start="219:54" pos:end="219:61">(<argument pos:start="219:55" pos:end="219:60"><expr pos:start="219:55" pos:end="219:60"><operator pos:start="219:55" pos:end="219:55">&amp;</operator><name pos:start="219:56" pos:end="219:60"><name pos:start="219:56" pos:end="219:56">s</name><operator pos:start="219:57" pos:end="219:58">-&gt;</operator><name pos:start="219:59" pos:end="219:60">fb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="219:64" pos:end="219:64"><expr pos:start="219:64" pos:end="219:64"><literal type="number" pos:start="219:64" pos:end="219:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="223:75"><expr pos:start="221:5" pos:end="223:74"><call pos:start="221:5" pos:end="223:74"><name pos:start="221:5" pos:end="221:22">sysbus_connect_irq</name><argument_list pos:start="221:23" pos:end="223:74">(<argument pos:start="221:24" pos:end="221:45"><expr pos:start="221:24" pos:end="221:45"><call pos:start="221:24" pos:end="221:45"><name pos:start="221:24" pos:end="221:37">SYS_BUS_DEVICE</name><argument_list pos:start="221:38" pos:end="221:45">(<argument pos:start="221:39" pos:end="221:44"><expr pos:start="221:39" pos:end="221:44"><operator pos:start="221:39" pos:end="221:39">&amp;</operator><name pos:start="221:40" pos:end="221:44"><name pos:start="221:40" pos:end="221:40">s</name><operator pos:start="221:41" pos:end="221:42">-&gt;</operator><name pos:start="221:43" pos:end="221:44">fb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:48" pos:end="221:48"><expr pos:start="221:48" pos:end="221:48"><literal type="number" pos:start="221:48" pos:end="221:48">0</literal></expr></argument>,

                       <argument pos:start="223:24" pos:end="223:73"><expr pos:start="223:24" pos:end="223:73"><call pos:start="223:24" pos:end="223:73"><name pos:start="223:24" pos:end="223:39">qdev_get_gpio_in</name><argument_list pos:start="223:40" pos:end="223:73">(<argument pos:start="223:41" pos:end="223:58"><expr pos:start="223:41" pos:end="223:58"><call pos:start="223:41" pos:end="223:58"><name pos:start="223:41" pos:end="223:46">DEVICE</name><argument_list pos:start="223:47" pos:end="223:58">(<argument pos:start="223:48" pos:end="223:57"><expr pos:start="223:48" pos:end="223:57"><operator pos:start="223:48" pos:end="223:48">&amp;</operator><name pos:start="223:49" pos:end="223:57"><name pos:start="223:49" pos:end="223:49">s</name><operator pos:start="223:50" pos:end="223:51">-&gt;</operator><name pos:start="223:52" pos:end="223:57">mboxes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="223:61" pos:end="223:72"><expr pos:start="223:61" pos:end="223:72"><name pos:start="223:61" pos:end="223:72">MBOX_CHAN_FB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:26">/* Property channel */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:75"><expr pos:start="229:5" pos:end="229:74"><call pos:start="229:5" pos:end="229:74"><name pos:start="229:5" pos:end="229:28">object_property_set_bool</name><argument_list pos:start="229:29" pos:end="229:74">(<argument pos:start="229:30" pos:end="229:49"><expr pos:start="229:30" pos:end="229:49"><call pos:start="229:30" pos:end="229:49"><name pos:start="229:30" pos:end="229:35">OBJECT</name><argument_list pos:start="229:36" pos:end="229:49">(<argument pos:start="229:37" pos:end="229:48"><expr pos:start="229:37" pos:end="229:48"><operator pos:start="229:37" pos:end="229:37">&amp;</operator><name pos:start="229:38" pos:end="229:48"><name pos:start="229:38" pos:end="229:38">s</name><operator pos:start="229:39" pos:end="229:40">-&gt;</operator><name pos:start="229:41" pos:end="229:48">property</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="229:52" pos:end="229:55"><expr pos:start="229:52" pos:end="229:55"><name pos:start="229:52" pos:end="229:55">true</name></expr></argument>, <argument pos:start="229:58" pos:end="229:67"><expr pos:start="229:58" pos:end="229:67"><literal type="string" pos:start="229:58" pos:end="229:67">"realized"</literal></expr></argument>, <argument pos:start="229:70" pos:end="229:73"><expr pos:start="229:70" pos:end="229:73"><operator pos:start="229:70" pos:end="229:70">&amp;</operator><name pos:start="229:71" pos:end="229:73">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:12">(<expr pos:start="231:9" pos:end="231:11"><name pos:start="231:9" pos:end="231:11">err</name></expr>)</condition> <block pos:start="231:14" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:15">

        <expr_stmt pos:start="233:9" pos:end="233:35"><expr pos:start="233:9" pos:end="233:34"><call pos:start="233:9" pos:end="233:34"><name pos:start="233:9" pos:end="233:23">error_propagate</name><argument_list pos:start="233:24" pos:end="233:34">(<argument pos:start="233:25" pos:end="233:28"><expr pos:start="233:25" pos:end="233:28"><name pos:start="233:25" pos:end="233:28">errp</name></expr></argument>, <argument pos:start="233:31" pos:end="233:33"><expr pos:start="233:31" pos:end="233:33"><name pos:start="233:31" pos:end="233:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="235:9" pos:end="235:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="241:5" pos:end="245:73"><expr pos:start="241:5" pos:end="245:72"><call pos:start="241:5" pos:end="245:72"><name pos:start="241:5" pos:end="241:31">memory_region_add_subregion</name><argument_list pos:start="241:32" pos:end="245:72">(<argument pos:start="241:33" pos:end="241:43"><expr pos:start="241:33" pos:end="241:43"><operator pos:start="241:33" pos:end="241:33">&amp;</operator><name pos:start="241:34" pos:end="241:43"><name pos:start="241:34" pos:end="241:34">s</name><operator pos:start="241:35" pos:end="241:36">-&gt;</operator><name pos:start="241:37" pos:end="241:43">mbox_mr</name></name></expr></argument>,

                <argument pos:start="243:17" pos:end="243:56"><expr pos:start="243:17" pos:end="243:56"><name pos:start="243:17" pos:end="243:34">MBOX_CHAN_PROPERTY</name> <operator pos:start="243:36" pos:end="243:37">&lt;&lt;</operator> <name pos:start="243:39" pos:end="243:56">MBOX_AS_CHAN_SHIFT</name></expr></argument>,

                <argument pos:start="245:17" pos:end="245:71"><expr pos:start="245:17" pos:end="245:71"><call pos:start="245:17" pos:end="245:71"><name pos:start="245:17" pos:end="245:38">sysbus_mmio_get_region</name><argument_list pos:start="245:39" pos:end="245:71">(<argument pos:start="245:40" pos:end="245:67"><expr pos:start="245:40" pos:end="245:67"><call pos:start="245:40" pos:end="245:67"><name pos:start="245:40" pos:end="245:53">SYS_BUS_DEVICE</name><argument_list pos:start="245:54" pos:end="245:67">(<argument pos:start="245:55" pos:end="245:66"><expr pos:start="245:55" pos:end="245:66"><operator pos:start="245:55" pos:end="245:55">&amp;</operator><name pos:start="245:56" pos:end="245:66"><name pos:start="245:56" pos:end="245:56">s</name><operator pos:start="245:57" pos:end="245:58">-&gt;</operator><name pos:start="245:59" pos:end="245:66">property</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:70" pos:end="245:70"><expr pos:start="245:70" pos:end="245:70"><literal type="number" pos:start="245:70" pos:end="245:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="249:80"><expr pos:start="247:5" pos:end="249:79"><call pos:start="247:5" pos:end="249:79"><name pos:start="247:5" pos:end="247:22">sysbus_connect_irq</name><argument_list pos:start="247:23" pos:end="249:79">(<argument pos:start="247:24" pos:end="247:51"><expr pos:start="247:24" pos:end="247:51"><call pos:start="247:24" pos:end="247:51"><name pos:start="247:24" pos:end="247:37">SYS_BUS_DEVICE</name><argument_list pos:start="247:38" pos:end="247:51">(<argument pos:start="247:39" pos:end="247:50"><expr pos:start="247:39" pos:end="247:50"><operator pos:start="247:39" pos:end="247:39">&amp;</operator><name pos:start="247:40" pos:end="247:50"><name pos:start="247:40" pos:end="247:40">s</name><operator pos:start="247:41" pos:end="247:42">-&gt;</operator><name pos:start="247:43" pos:end="247:50">property</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="247:54" pos:end="247:54"><expr pos:start="247:54" pos:end="247:54"><literal type="number" pos:start="247:54" pos:end="247:54">0</literal></expr></argument>,

                      <argument pos:start="249:23" pos:end="249:78"><expr pos:start="249:23" pos:end="249:78"><call pos:start="249:23" pos:end="249:78"><name pos:start="249:23" pos:end="249:38">qdev_get_gpio_in</name><argument_list pos:start="249:39" pos:end="249:78">(<argument pos:start="249:40" pos:end="249:57"><expr pos:start="249:40" pos:end="249:57"><call pos:start="249:40" pos:end="249:57"><name pos:start="249:40" pos:end="249:45">DEVICE</name><argument_list pos:start="249:46" pos:end="249:57">(<argument pos:start="249:47" pos:end="249:56"><expr pos:start="249:47" pos:end="249:56"><operator pos:start="249:47" pos:end="249:47">&amp;</operator><name pos:start="249:48" pos:end="249:56"><name pos:start="249:48" pos:end="249:48">s</name><operator pos:start="249:49" pos:end="249:50">-&gt;</operator><name pos:start="249:51" pos:end="249:56">mboxes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="249:60" pos:end="249:77"><expr pos:start="249:60" pos:end="249:77"><name pos:start="249:60" pos:end="249:77">MBOX_CHAN_PROPERTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:33">/* Random Number Generator */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:70"><expr pos:start="255:5" pos:end="255:69"><call pos:start="255:5" pos:end="255:69"><name pos:start="255:5" pos:end="255:28">object_property_set_bool</name><argument_list pos:start="255:29" pos:end="255:69">(<argument pos:start="255:30" pos:end="255:44"><expr pos:start="255:30" pos:end="255:44"><call pos:start="255:30" pos:end="255:44"><name pos:start="255:30" pos:end="255:35">OBJECT</name><argument_list pos:start="255:36" pos:end="255:44">(<argument pos:start="255:37" pos:end="255:43"><expr pos:start="255:37" pos:end="255:43"><operator pos:start="255:37" pos:end="255:37">&amp;</operator><name pos:start="255:38" pos:end="255:43"><name pos:start="255:38" pos:end="255:38">s</name><operator pos:start="255:39" pos:end="255:40">-&gt;</operator><name pos:start="255:41" pos:end="255:43">rng</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="255:47" pos:end="255:50"><expr pos:start="255:47" pos:end="255:50"><name pos:start="255:47" pos:end="255:50">true</name></expr></argument>, <argument pos:start="255:53" pos:end="255:62"><expr pos:start="255:53" pos:end="255:62"><literal type="string" pos:start="255:53" pos:end="255:62">"realized"</literal></expr></argument>, <argument pos:start="255:65" pos:end="255:68"><expr pos:start="255:65" pos:end="255:68"><operator pos:start="255:65" pos:end="255:65">&amp;</operator><name pos:start="255:66" pos:end="255:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="257:5" pos:end="263:5"><if pos:start="257:5" pos:end="263:5">if <condition pos:start="257:8" pos:end="257:12">(<expr pos:start="257:9" pos:end="257:11"><name pos:start="257:9" pos:end="257:11">err</name></expr>)</condition> <block pos:start="257:14" pos:end="263:5">{<block_content pos:start="259:9" pos:end="261:15">

        <expr_stmt pos:start="259:9" pos:end="259:35"><expr pos:start="259:9" pos:end="259:34"><call pos:start="259:9" pos:end="259:34"><name pos:start="259:9" pos:end="259:23">error_propagate</name><argument_list pos:start="259:24" pos:end="259:34">(<argument pos:start="259:25" pos:end="259:28"><expr pos:start="259:25" pos:end="259:28"><name pos:start="259:25" pos:end="259:28">errp</name></expr></argument>, <argument pos:start="259:31" pos:end="259:33"><expr pos:start="259:31" pos:end="259:33"><name pos:start="259:31" pos:end="259:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="261:9" pos:end="261:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="269:68"><expr pos:start="267:5" pos:end="269:67"><call pos:start="267:5" pos:end="269:67"><name pos:start="267:5" pos:end="267:31">memory_region_add_subregion</name><argument_list pos:start="267:32" pos:end="269:67">(<argument pos:start="267:33" pos:end="267:43"><expr pos:start="267:33" pos:end="267:43"><operator pos:start="267:33" pos:end="267:33">&amp;</operator><name pos:start="267:34" pos:end="267:43"><name pos:start="267:34" pos:end="267:34">s</name><operator pos:start="267:35" pos:end="267:36">-&gt;</operator><name pos:start="267:37" pos:end="267:43">peri_mr</name></name></expr></argument>, <argument pos:start="267:46" pos:end="267:55"><expr pos:start="267:46" pos:end="267:55"><name pos:start="267:46" pos:end="267:55">RNG_OFFSET</name></expr></argument>,

                <argument pos:start="269:17" pos:end="269:66"><expr pos:start="269:17" pos:end="269:66"><call pos:start="269:17" pos:end="269:66"><name pos:start="269:17" pos:end="269:38">sysbus_mmio_get_region</name><argument_list pos:start="269:39" pos:end="269:66">(<argument pos:start="269:40" pos:end="269:62"><expr pos:start="269:40" pos:end="269:62"><call pos:start="269:40" pos:end="269:62"><name pos:start="269:40" pos:end="269:53">SYS_BUS_DEVICE</name><argument_list pos:start="269:54" pos:end="269:62">(<argument pos:start="269:55" pos:end="269:61"><expr pos:start="269:55" pos:end="269:61"><operator pos:start="269:55" pos:end="269:55">&amp;</operator><name pos:start="269:56" pos:end="269:61"><name pos:start="269:56" pos:end="269:56">s</name><operator pos:start="269:57" pos:end="269:58">-&gt;</operator><name pos:start="269:59" pos:end="269:61">rng</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="269:65" pos:end="269:65"><expr pos:start="269:65" pos:end="269:65"><literal type="number" pos:start="269:65" pos:end="269:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="273:5" pos:end="273:40">/* Extended Mass Media Controller */</comment>

    <expr_stmt pos:start="275:5" pos:end="277:34"><expr pos:start="275:5" pos:end="277:33"><call pos:start="275:5" pos:end="277:33"><name pos:start="275:5" pos:end="275:27">object_property_set_int</name><argument_list pos:start="275:28" pos:end="277:33">(<argument pos:start="275:29" pos:end="275:45"><expr pos:start="275:29" pos:end="275:45"><call pos:start="275:29" pos:end="275:45"><name pos:start="275:29" pos:end="275:34">OBJECT</name><argument_list pos:start="275:35" pos:end="275:45">(<argument pos:start="275:36" pos:end="275:44"><expr pos:start="275:36" pos:end="275:44"><operator pos:start="275:36" pos:end="275:36">&amp;</operator><name pos:start="275:37" pos:end="275:44"><name pos:start="275:37" pos:end="275:37">s</name><operator pos:start="275:38" pos:end="275:39">-&gt;</operator><name pos:start="275:40" pos:end="275:44">sdhci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="275:48" pos:end="275:67"><expr pos:start="275:48" pos:end="275:67"><name pos:start="275:48" pos:end="275:67">BCM2835_SDHC_CAPAREG</name></expr></argument>, <argument pos:start="275:70" pos:end="275:78"><expr pos:start="275:70" pos:end="275:78"><literal type="string" pos:start="275:70" pos:end="275:78">"capareg"</literal></expr></argument>,

                            <argument pos:start="277:29" pos:end="277:32"><expr pos:start="277:29" pos:end="277:32"><operator pos:start="277:29" pos:end="277:29">&amp;</operator><name pos:start="277:30" pos:end="277:32">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="279:5" pos:end="285:5"><if pos:start="279:5" pos:end="285:5">if <condition pos:start="279:8" pos:end="279:12">(<expr pos:start="279:9" pos:end="279:11"><name pos:start="279:9" pos:end="279:11">err</name></expr>)</condition> <block pos:start="279:14" pos:end="285:5">{<block_content pos:start="281:9" pos:end="283:15">

        <expr_stmt pos:start="281:9" pos:end="281:35"><expr pos:start="281:9" pos:end="281:34"><call pos:start="281:9" pos:end="281:34"><name pos:start="281:9" pos:end="281:23">error_propagate</name><argument_list pos:start="281:24" pos:end="281:34">(<argument pos:start="281:25" pos:end="281:28"><expr pos:start="281:25" pos:end="281:28"><name pos:start="281:25" pos:end="281:28">errp</name></expr></argument>, <argument pos:start="281:31" pos:end="281:33"><expr pos:start="281:31" pos:end="281:33"><name pos:start="281:31" pos:end="281:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="283:9" pos:end="283:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="289:5" pos:end="291:35"><expr pos:start="289:5" pos:end="291:34"><call pos:start="289:5" pos:end="291:34"><name pos:start="289:5" pos:end="289:28">object_property_set_bool</name><argument_list pos:start="289:29" pos:end="291:34">(<argument pos:start="289:30" pos:end="289:46"><expr pos:start="289:30" pos:end="289:46"><call pos:start="289:30" pos:end="289:46"><name pos:start="289:30" pos:end="289:35">OBJECT</name><argument_list pos:start="289:36" pos:end="289:46">(<argument pos:start="289:37" pos:end="289:45"><expr pos:start="289:37" pos:end="289:45"><operator pos:start="289:37" pos:end="289:37">&amp;</operator><name pos:start="289:38" pos:end="289:45"><name pos:start="289:38" pos:end="289:38">s</name><operator pos:start="289:39" pos:end="289:40">-&gt;</operator><name pos:start="289:41" pos:end="289:45">sdhci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="289:49" pos:end="289:52"><expr pos:start="289:49" pos:end="289:52"><name pos:start="289:49" pos:end="289:52">true</name></expr></argument>, <argument pos:start="289:55" pos:end="289:76"><expr pos:start="289:55" pos:end="289:76"><literal type="string" pos:start="289:55" pos:end="289:76">"pending-insert-quirk"</literal></expr></argument>,

                             <argument pos:start="291:30" pos:end="291:33"><expr pos:start="291:30" pos:end="291:33"><operator pos:start="291:30" pos:end="291:30">&amp;</operator><name pos:start="291:31" pos:end="291:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:12">(<expr pos:start="293:9" pos:end="293:11"><name pos:start="293:9" pos:end="293:11">err</name></expr>)</condition> <block pos:start="293:14" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:15">

        <expr_stmt pos:start="295:9" pos:end="295:35"><expr pos:start="295:9" pos:end="295:34"><call pos:start="295:9" pos:end="295:34"><name pos:start="295:9" pos:end="295:23">error_propagate</name><argument_list pos:start="295:24" pos:end="295:34">(<argument pos:start="295:25" pos:end="295:28"><expr pos:start="295:25" pos:end="295:28"><name pos:start="295:25" pos:end="295:28">errp</name></expr></argument>, <argument pos:start="295:31" pos:end="295:33"><expr pos:start="295:31" pos:end="295:33"><name pos:start="295:31" pos:end="295:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="297:9" pos:end="297:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:72"><expr pos:start="303:5" pos:end="303:71"><call pos:start="303:5" pos:end="303:71"><name pos:start="303:5" pos:end="303:28">object_property_set_bool</name><argument_list pos:start="303:29" pos:end="303:71">(<argument pos:start="303:30" pos:end="303:46"><expr pos:start="303:30" pos:end="303:46"><call pos:start="303:30" pos:end="303:46"><name pos:start="303:30" pos:end="303:35">OBJECT</name><argument_list pos:start="303:36" pos:end="303:46">(<argument pos:start="303:37" pos:end="303:45"><expr pos:start="303:37" pos:end="303:45"><operator pos:start="303:37" pos:end="303:37">&amp;</operator><name pos:start="303:38" pos:end="303:45"><name pos:start="303:38" pos:end="303:38">s</name><operator pos:start="303:39" pos:end="303:40">-&gt;</operator><name pos:start="303:41" pos:end="303:45">sdhci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="303:49" pos:end="303:52"><expr pos:start="303:49" pos:end="303:52"><name pos:start="303:49" pos:end="303:52">true</name></expr></argument>, <argument pos:start="303:55" pos:end="303:64"><expr pos:start="303:55" pos:end="303:64"><literal type="string" pos:start="303:55" pos:end="303:64">"realized"</literal></expr></argument>, <argument pos:start="303:67" pos:end="303:70"><expr pos:start="303:67" pos:end="303:70"><operator pos:start="303:67" pos:end="303:67">&amp;</operator><name pos:start="303:68" pos:end="303:70">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="305:5" pos:end="311:5"><if pos:start="305:5" pos:end="311:5">if <condition pos:start="305:8" pos:end="305:12">(<expr pos:start="305:9" pos:end="305:11"><name pos:start="305:9" pos:end="305:11">err</name></expr>)</condition> <block pos:start="305:14" pos:end="311:5">{<block_content pos:start="307:9" pos:end="309:15">

        <expr_stmt pos:start="307:9" pos:end="307:35"><expr pos:start="307:9" pos:end="307:34"><call pos:start="307:9" pos:end="307:34"><name pos:start="307:9" pos:end="307:23">error_propagate</name><argument_list pos:start="307:24" pos:end="307:34">(<argument pos:start="307:25" pos:end="307:28"><expr pos:start="307:25" pos:end="307:28"><name pos:start="307:25" pos:end="307:28">errp</name></expr></argument>, <argument pos:start="307:31" pos:end="307:33"><expr pos:start="307:31" pos:end="307:33"><name pos:start="307:31" pos:end="307:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="309:9" pos:end="309:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="315:5" pos:end="317:70"><expr pos:start="315:5" pos:end="317:69"><call pos:start="315:5" pos:end="317:69"><name pos:start="315:5" pos:end="315:31">memory_region_add_subregion</name><argument_list pos:start="315:32" pos:end="317:69">(<argument pos:start="315:33" pos:end="315:43"><expr pos:start="315:33" pos:end="315:43"><operator pos:start="315:33" pos:end="315:33">&amp;</operator><name pos:start="315:34" pos:end="315:43"><name pos:start="315:34" pos:end="315:34">s</name><operator pos:start="315:35" pos:end="315:36">-&gt;</operator><name pos:start="315:37" pos:end="315:43">peri_mr</name></name></expr></argument>, <argument pos:start="315:46" pos:end="315:56"><expr pos:start="315:46" pos:end="315:56"><name pos:start="315:46" pos:end="315:56">EMMC_OFFSET</name></expr></argument>,

                <argument pos:start="317:17" pos:end="317:68"><expr pos:start="317:17" pos:end="317:68"><call pos:start="317:17" pos:end="317:68"><name pos:start="317:17" pos:end="317:38">sysbus_mmio_get_region</name><argument_list pos:start="317:39" pos:end="317:68">(<argument pos:start="317:40" pos:end="317:64"><expr pos:start="317:40" pos:end="317:64"><call pos:start="317:40" pos:end="317:64"><name pos:start="317:40" pos:end="317:53">SYS_BUS_DEVICE</name><argument_list pos:start="317:54" pos:end="317:64">(<argument pos:start="317:55" pos:end="317:63"><expr pos:start="317:55" pos:end="317:63"><operator pos:start="317:55" pos:end="317:55">&amp;</operator><name pos:start="317:56" pos:end="317:63"><name pos:start="317:56" pos:end="317:56">s</name><operator pos:start="317:57" pos:end="317:58">-&gt;</operator><name pos:start="317:59" pos:end="317:63">sdhci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="317:67" pos:end="317:67"><expr pos:start="317:67" pos:end="317:67"><literal type="number" pos:start="317:67" pos:end="317:67">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="323:54"><expr pos:start="319:5" pos:end="323:53"><call pos:start="319:5" pos:end="323:53"><name pos:start="319:5" pos:end="319:22">sysbus_connect_irq</name><argument_list pos:start="319:23" pos:end="323:53">(<argument pos:start="319:24" pos:end="319:48"><expr pos:start="319:24" pos:end="319:48"><call pos:start="319:24" pos:end="319:48"><name pos:start="319:24" pos:end="319:37">SYS_BUS_DEVICE</name><argument_list pos:start="319:38" pos:end="319:48">(<argument pos:start="319:39" pos:end="319:47"><expr pos:start="319:39" pos:end="319:47"><operator pos:start="319:39" pos:end="319:39">&amp;</operator><name pos:start="319:40" pos:end="319:47"><name pos:start="319:40" pos:end="319:40">s</name><operator pos:start="319:41" pos:end="319:42">-&gt;</operator><name pos:start="319:43" pos:end="319:47">sdhci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="319:51" pos:end="319:51"><expr pos:start="319:51" pos:end="319:51"><literal type="number" pos:start="319:51" pos:end="319:51">0</literal></expr></argument>,

        <argument pos:start="321:9" pos:end="323:52"><expr pos:start="321:9" pos:end="323:52"><call pos:start="321:9" pos:end="323:52"><name pos:start="321:9" pos:end="321:30">qdev_get_gpio_in_named</name><argument_list pos:start="321:31" pos:end="323:52">(<argument pos:start="321:32" pos:end="321:45"><expr pos:start="321:32" pos:end="321:45"><call pos:start="321:32" pos:end="321:45"><name pos:start="321:32" pos:end="321:37">DEVICE</name><argument_list pos:start="321:38" pos:end="321:45">(<argument pos:start="321:39" pos:end="321:44"><expr pos:start="321:39" pos:end="321:44"><operator pos:start="321:39" pos:end="321:39">&amp;</operator><name pos:start="321:40" pos:end="321:44"><name pos:start="321:40" pos:end="321:40">s</name><operator pos:start="321:41" pos:end="321:42">-&gt;</operator><name pos:start="321:43" pos:end="321:44">ic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="321:48" pos:end="321:65"><expr pos:start="321:48" pos:end="321:65"><name pos:start="321:48" pos:end="321:65">BCM2835_IC_GPU_IRQ</name></expr></argument>,

                               <argument pos:start="323:32" pos:end="323:51"><expr pos:start="323:32" pos:end="323:51"><name pos:start="323:32" pos:end="323:51">INTERRUPT_ARASANSDIO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="327:36"><expr pos:start="325:5" pos:end="327:35"><call pos:start="325:5" pos:end="327:35"><name pos:start="325:5" pos:end="325:29">object_property_add_alias</name><argument_list pos:start="325:30" pos:end="327:35">(<argument pos:start="325:31" pos:end="325:39"><expr pos:start="325:31" pos:end="325:39"><call pos:start="325:31" pos:end="325:39"><name pos:start="325:31" pos:end="325:36">OBJECT</name><argument_list pos:start="325:37" pos:end="325:39">(<argument pos:start="325:38" pos:end="325:38"><expr pos:start="325:38" pos:end="325:38"><name pos:start="325:38" pos:end="325:38">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="325:42" pos:end="325:49"><expr pos:start="325:42" pos:end="325:49"><literal type="string" pos:start="325:42" pos:end="325:49">"sd-bus"</literal></expr></argument>, <argument pos:start="325:52" pos:end="325:68"><expr pos:start="325:52" pos:end="325:68"><call pos:start="325:52" pos:end="325:68"><name pos:start="325:52" pos:end="325:57">OBJECT</name><argument_list pos:start="325:58" pos:end="325:68">(<argument pos:start="325:59" pos:end="325:67"><expr pos:start="325:59" pos:end="325:67"><operator pos:start="325:59" pos:end="325:59">&amp;</operator><name pos:start="325:60" pos:end="325:67"><name pos:start="325:60" pos:end="325:60">s</name><operator pos:start="325:61" pos:end="325:62">-&gt;</operator><name pos:start="325:63" pos:end="325:67">sdhci</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="325:71" pos:end="325:78"><expr pos:start="325:71" pos:end="325:78"><literal type="string" pos:start="325:71" pos:end="325:78">"sd-bus"</literal></expr></argument>,

                              <argument pos:start="327:31" pos:end="327:34"><expr pos:start="327:31" pos:end="327:34"><operator pos:start="327:31" pos:end="327:31">&amp;</operator><name pos:start="327:32" pos:end="327:34">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="329:5" pos:end="335:5"><if pos:start="329:5" pos:end="335:5">if <condition pos:start="329:8" pos:end="329:12">(<expr pos:start="329:9" pos:end="329:11"><name pos:start="329:9" pos:end="329:11">err</name></expr>)</condition> <block pos:start="329:14" pos:end="335:5">{<block_content pos:start="331:9" pos:end="333:15">

        <expr_stmt pos:start="331:9" pos:end="331:35"><expr pos:start="331:9" pos:end="331:34"><call pos:start="331:9" pos:end="331:34"><name pos:start="331:9" pos:end="331:23">error_propagate</name><argument_list pos:start="331:24" pos:end="331:34">(<argument pos:start="331:25" pos:end="331:28"><expr pos:start="331:25" pos:end="331:28"><name pos:start="331:25" pos:end="331:28">errp</name></expr></argument>, <argument pos:start="331:31" pos:end="331:33"><expr pos:start="331:31" pos:end="331:33"><name pos:start="331:31" pos:end="331:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="333:9" pos:end="333:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="339:5" pos:end="339:22">/* DMA Channels */</comment>

    <expr_stmt pos:start="341:5" pos:end="341:70"><expr pos:start="341:5" pos:end="341:69"><call pos:start="341:5" pos:end="341:69"><name pos:start="341:5" pos:end="341:28">object_property_set_bool</name><argument_list pos:start="341:29" pos:end="341:69">(<argument pos:start="341:30" pos:end="341:44"><expr pos:start="341:30" pos:end="341:44"><call pos:start="341:30" pos:end="341:44"><name pos:start="341:30" pos:end="341:35">OBJECT</name><argument_list pos:start="341:36" pos:end="341:44">(<argument pos:start="341:37" pos:end="341:43"><expr pos:start="341:37" pos:end="341:43"><operator pos:start="341:37" pos:end="341:37">&amp;</operator><name pos:start="341:38" pos:end="341:43"><name pos:start="341:38" pos:end="341:38">s</name><operator pos:start="341:39" pos:end="341:40">-&gt;</operator><name pos:start="341:41" pos:end="341:43">dma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="341:47" pos:end="341:50"><expr pos:start="341:47" pos:end="341:50"><name pos:start="341:47" pos:end="341:50">true</name></expr></argument>, <argument pos:start="341:53" pos:end="341:62"><expr pos:start="341:53" pos:end="341:62"><literal type="string" pos:start="341:53" pos:end="341:62">"realized"</literal></expr></argument>, <argument pos:start="341:65" pos:end="341:68"><expr pos:start="341:65" pos:end="341:68"><operator pos:start="341:65" pos:end="341:65">&amp;</operator><name pos:start="341:66" pos:end="341:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="343:5" pos:end="349:5"><if pos:start="343:5" pos:end="349:5">if <condition pos:start="343:8" pos:end="343:12">(<expr pos:start="343:9" pos:end="343:11"><name pos:start="343:9" pos:end="343:11">err</name></expr>)</condition> <block pos:start="343:14" pos:end="349:5">{<block_content pos:start="345:9" pos:end="347:15">

        <expr_stmt pos:start="345:9" pos:end="345:35"><expr pos:start="345:9" pos:end="345:34"><call pos:start="345:9" pos:end="345:34"><name pos:start="345:9" pos:end="345:23">error_propagate</name><argument_list pos:start="345:24" pos:end="345:34">(<argument pos:start="345:25" pos:end="345:28"><expr pos:start="345:25" pos:end="345:28"><name pos:start="345:25" pos:end="345:28">errp</name></expr></argument>, <argument pos:start="345:31" pos:end="345:33"><expr pos:start="345:31" pos:end="345:33"><name pos:start="345:31" pos:end="345:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="347:9" pos:end="347:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="355:68"><expr pos:start="353:5" pos:end="355:67"><call pos:start="353:5" pos:end="355:67"><name pos:start="353:5" pos:end="353:31">memory_region_add_subregion</name><argument_list pos:start="353:32" pos:end="355:67">(<argument pos:start="353:33" pos:end="353:43"><expr pos:start="353:33" pos:end="353:43"><operator pos:start="353:33" pos:end="353:33">&amp;</operator><name pos:start="353:34" pos:end="353:43"><name pos:start="353:34" pos:end="353:34">s</name><operator pos:start="353:35" pos:end="353:36">-&gt;</operator><name pos:start="353:37" pos:end="353:43">peri_mr</name></name></expr></argument>, <argument pos:start="353:46" pos:end="353:55"><expr pos:start="353:46" pos:end="353:55"><name pos:start="353:46" pos:end="353:55">DMA_OFFSET</name></expr></argument>,

                <argument pos:start="355:17" pos:end="355:66"><expr pos:start="355:17" pos:end="355:66"><call pos:start="355:17" pos:end="355:66"><name pos:start="355:17" pos:end="355:38">sysbus_mmio_get_region</name><argument_list pos:start="355:39" pos:end="355:66">(<argument pos:start="355:40" pos:end="355:62"><expr pos:start="355:40" pos:end="355:62"><call pos:start="355:40" pos:end="355:62"><name pos:start="355:40" pos:end="355:53">SYS_BUS_DEVICE</name><argument_list pos:start="355:54" pos:end="355:62">(<argument pos:start="355:55" pos:end="355:61"><expr pos:start="355:55" pos:end="355:61"><operator pos:start="355:55" pos:end="355:55">&amp;</operator><name pos:start="355:56" pos:end="355:61"><name pos:start="355:56" pos:end="355:56">s</name><operator pos:start="355:57" pos:end="355:58">-&gt;</operator><name pos:start="355:59" pos:end="355:61">dma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="355:65" pos:end="355:65"><expr pos:start="355:65" pos:end="355:65"><literal type="number" pos:start="355:65" pos:end="355:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="359:68"><expr pos:start="357:5" pos:end="359:67"><call pos:start="357:5" pos:end="359:67"><name pos:start="357:5" pos:end="357:31">memory_region_add_subregion</name><argument_list pos:start="357:32" pos:end="359:67">(<argument pos:start="357:33" pos:end="357:43"><expr pos:start="357:33" pos:end="357:43"><operator pos:start="357:33" pos:end="357:33">&amp;</operator><name pos:start="357:34" pos:end="357:43"><name pos:start="357:34" pos:end="357:34">s</name><operator pos:start="357:35" pos:end="357:36">-&gt;</operator><name pos:start="357:37" pos:end="357:43">peri_mr</name></name></expr></argument>, <argument pos:start="357:46" pos:end="357:57"><expr pos:start="357:46" pos:end="357:57"><name pos:start="357:46" pos:end="357:57">DMA15_OFFSET</name></expr></argument>,

                <argument pos:start="359:17" pos:end="359:66"><expr pos:start="359:17" pos:end="359:66"><call pos:start="359:17" pos:end="359:66"><name pos:start="359:17" pos:end="359:38">sysbus_mmio_get_region</name><argument_list pos:start="359:39" pos:end="359:66">(<argument pos:start="359:40" pos:end="359:62"><expr pos:start="359:40" pos:end="359:62"><call pos:start="359:40" pos:end="359:62"><name pos:start="359:40" pos:end="359:53">SYS_BUS_DEVICE</name><argument_list pos:start="359:54" pos:end="359:62">(<argument pos:start="359:55" pos:end="359:61"><expr pos:start="359:55" pos:end="359:61"><operator pos:start="359:55" pos:end="359:55">&amp;</operator><name pos:start="359:56" pos:end="359:61"><name pos:start="359:56" pos:end="359:56">s</name><operator pos:start="359:57" pos:end="359:58">-&gt;</operator><name pos:start="359:59" pos:end="359:61">dma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="359:65" pos:end="359:65"><expr pos:start="359:65" pos:end="359:65"><literal type="number" pos:start="359:65" pos:end="359:65">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="363:5" pos:end="373:5">for <control pos:start="363:9" pos:end="363:29">(<init pos:start="363:10" pos:end="363:15"><expr pos:start="363:10" pos:end="363:14"><name pos:start="363:10" pos:end="363:10">n</name> <operator pos:start="363:12" pos:end="363:12">=</operator> <literal type="number" pos:start="363:14" pos:end="363:14">0</literal></expr>;</init> <condition pos:start="363:17" pos:end="363:24"><expr pos:start="363:17" pos:end="363:23"><name pos:start="363:17" pos:end="363:17">n</name> <operator pos:start="363:19" pos:end="363:20">&lt;=</operator> <literal type="number" pos:start="363:22" pos:end="363:23">12</literal></expr>;</condition> <incr pos:start="363:26" pos:end="363:28"><expr pos:start="363:26" pos:end="363:28"><name pos:start="363:26" pos:end="363:26">n</name><operator pos:start="363:27" pos:end="363:28">++</operator></expr></incr>)</control> <block pos:start="363:31" pos:end="373:5">{<block_content pos:start="365:9" pos:end="371:71">

        <expr_stmt pos:start="365:9" pos:end="371:71"><expr pos:start="365:9" pos:end="371:70"><call pos:start="365:9" pos:end="371:70"><name pos:start="365:9" pos:end="365:26">sysbus_connect_irq</name><argument_list pos:start="365:27" pos:end="371:70">(<argument pos:start="365:28" pos:end="365:50"><expr pos:start="365:28" pos:end="365:50"><call pos:start="365:28" pos:end="365:50"><name pos:start="365:28" pos:end="365:41">SYS_BUS_DEVICE</name><argument_list pos:start="365:42" pos:end="365:50">(<argument pos:start="365:43" pos:end="365:49"><expr pos:start="365:43" pos:end="365:49"><operator pos:start="365:43" pos:end="365:43">&amp;</operator><name pos:start="365:44" pos:end="365:49"><name pos:start="365:44" pos:end="365:44">s</name><operator pos:start="365:45" pos:end="365:46">-&gt;</operator><name pos:start="365:47" pos:end="365:49">dma</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="365:53" pos:end="365:53"><expr pos:start="365:53" pos:end="365:53"><name pos:start="365:53" pos:end="365:53">n</name></expr></argument>,

                           <argument pos:start="367:28" pos:end="371:69"><expr pos:start="367:28" pos:end="371:69"><call pos:start="367:28" pos:end="371:69"><name pos:start="367:28" pos:end="367:49">qdev_get_gpio_in_named</name><argument_list pos:start="367:50" pos:end="371:69">(<argument pos:start="367:51" pos:end="367:64"><expr pos:start="367:51" pos:end="367:64"><call pos:start="367:51" pos:end="367:64"><name pos:start="367:51" pos:end="367:56">DEVICE</name><argument_list pos:start="367:57" pos:end="367:64">(<argument pos:start="367:58" pos:end="367:63"><expr pos:start="367:58" pos:end="367:63"><operator pos:start="367:58" pos:end="367:58">&amp;</operator><name pos:start="367:59" pos:end="367:63"><name pos:start="367:59" pos:end="367:59">s</name><operator pos:start="367:60" pos:end="367:61">-&gt;</operator><name pos:start="367:62" pos:end="367:63">ic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                  <argument pos:start="369:51" pos:end="369:68"><expr pos:start="369:51" pos:end="369:68"><name pos:start="369:51" pos:end="369:68">BCM2835_IC_GPU_IRQ</name></expr></argument>,

                                                  <argument pos:start="371:51" pos:end="371:68"><expr pos:start="371:51" pos:end="371:68"><name pos:start="371:51" pos:end="371:64">INTERRUPT_DMA0</name> <operator pos:start="371:66" pos:end="371:66">+</operator> <name pos:start="371:68" pos:end="371:68">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
