<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1648.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">page_set_flags</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:38"><name pos:start="1:21" pos:end="1:32">target_ulong</name></type> <name pos:start="1:34" pos:end="1:38">start</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:52">target_ulong</name></type> <name pos:start="1:54" pos:end="1:56">end</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:5">

    <decl_stmt pos:start="5:5" pos:end="16:0"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:21">addr</name></decl>, <decl pos:start="5:24" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:24" pos:end="5:26">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="13:39">/* This function should never be called with addresses outside the

       guest address space.  If this assert fires, it probably indicates

       a missing call to h2g_valid.  */</comment>

<cpp:if pos:start="15:1" pos:end="15:44">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:44"><name pos:start="15:5" pos:end="15:19">TARGET_ABI_BITS</name> <operator pos:start="15:21" pos:end="15:21">&gt;</operator> <name pos:start="15:23" pos:end="15:44">L1_MAP_ADDR_SPACE_BITS</name></expr></cpp:if>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:61"><call pos:start="17:5" pos:end="17:61"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:61">(<argument pos:start="17:12" pos:end="17:60"><expr pos:start="17:12" pos:end="17:60"><name pos:start="17:12" pos:end="17:14">end</name> <operator pos:start="17:16" pos:end="17:16">&lt;</operator> <operator pos:start="17:18" pos:end="17:18">(</operator><operator pos:start="17:19" pos:end="17:19">(</operator><name pos:start="17:20" pos:end="17:31">target_ulong</name><operator pos:start="17:32" pos:end="17:32">)</operator><literal type="number" pos:start="17:33" pos:end="17:33">1</literal> <operator pos:start="17:35" pos:end="17:36">&lt;&lt;</operator> <name pos:start="17:38" pos:end="17:59">L1_MAP_ADDR_SPACE_BITS</name><operator pos:start="17:60" pos:end="17:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><call pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:23">(<argument pos:start="21:12" pos:end="21:22"><expr pos:start="21:12" pos:end="21:22"><name pos:start="21:12" pos:end="21:16">start</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <name pos:start="21:20" pos:end="21:22">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:22">assert_memory_lock</name><argument_list pos:start="23:23" pos:end="23:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:9">start</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:17">start</name> <operator pos:start="27:19" pos:end="27:19">&amp;</operator> <name pos:start="27:21" pos:end="27:36">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:7">end</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:32"><name pos:start="29:11" pos:end="29:27">TARGET_PAGE_ALIGN</name><argument_list pos:start="29:28" pos:end="29:32">(<argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:13">flags</name> <operator pos:start="33:15" pos:end="33:15">&amp;</operator> <name pos:start="33:17" pos:end="33:26">PAGE_WRITE</name></expr>)</condition> <block pos:start="33:29" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:32">

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:13">flags</name> <operator pos:start="35:15" pos:end="35:16">|=</operator> <name pos:start="35:18" pos:end="35:31">PAGE_WRITE_ORG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="41:5" pos:end="67:5">for <control pos:start="41:9" pos:end="45:59">(<init pos:start="41:10" pos:end="41:41"><expr pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:13">addr</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:21">start</name></expr><operator pos:start="41:22" pos:end="41:22">,</operator> <expr pos:start="41:24" pos:end="41:40"><name pos:start="41:24" pos:end="41:26">len</name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:32">end</name> <operator pos:start="41:34" pos:end="41:34">-</operator> <name pos:start="41:36" pos:end="41:40">start</name></expr>;</init>

         <condition pos:start="43:10" pos:end="43:18"><expr pos:start="43:10" pos:end="43:17"><name pos:start="43:10" pos:end="43:12">len</name> <operator pos:start="43:14" pos:end="43:15">!=</operator> <literal type="number" pos:start="43:17" pos:end="43:17">0</literal></expr>;</condition>

         <incr pos:start="45:10" pos:end="45:58"><expr pos:start="45:10" pos:end="45:32"><name pos:start="45:10" pos:end="45:12">len</name> <operator pos:start="45:14" pos:end="45:15">-=</operator> <name pos:start="45:17" pos:end="45:32">TARGET_PAGE_SIZE</name></expr><operator pos:start="45:33" pos:end="45:33">,</operator> <expr pos:start="45:35" pos:end="45:58"><name pos:start="45:35" pos:end="45:38">addr</name> <operator pos:start="45:40" pos:end="45:41">+=</operator> <name pos:start="45:43" pos:end="45:58">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="45:61" pos:end="67:5">{<block_content pos:start="47:9" pos:end="65:25">

        <decl_stmt pos:start="47:9" pos:end="47:67"><decl pos:start="47:9" pos:end="47:66"><type pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:16">PageDesc</name> <modifier pos:start="47:18" pos:end="47:18">*</modifier></type><name pos:start="47:19" pos:end="47:19">p</name> <init pos:start="47:21" pos:end="47:66">= <expr pos:start="47:23" pos:end="47:66"><call pos:start="47:23" pos:end="47:66"><name pos:start="47:23" pos:end="47:37">page_find_alloc</name><argument_list pos:start="47:38" pos:end="47:66">(<argument pos:start="47:39" pos:end="47:62"><expr pos:start="47:39" pos:end="47:62"><name pos:start="47:39" pos:end="47:42">addr</name> <operator pos:start="47:44" pos:end="47:45">&gt;&gt;</operator> <name pos:start="47:47" pos:end="47:62">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="47:65" pos:end="47:65"><expr pos:start="47:65" pos:end="47:65"><literal type="number" pos:start="47:65" pos:end="47:65">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="51:9" pos:end="53:31">/* If the write protection bit is set, then we invalidate

           the code inside.  */</comment>

        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="59:24">(<expr pos:start="55:13" pos:end="59:23"><operator pos:start="55:13" pos:end="55:13">!</operator><operator pos:start="55:14" pos:end="55:14">(</operator><name pos:start="55:15" pos:end="55:22"><name pos:start="55:15" pos:end="55:15">p</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:22">flags</name></name> <operator pos:start="55:24" pos:end="55:24">&amp;</operator> <name pos:start="55:26" pos:end="55:35">PAGE_WRITE</name><operator pos:start="55:36" pos:end="55:36">)</operator> <operator pos:start="55:38" pos:end="55:39">&amp;&amp;</operator>

            <operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:18">flags</name> <operator pos:start="57:20" pos:end="57:20">&amp;</operator> <name pos:start="57:22" pos:end="57:31">PAGE_WRITE</name><operator pos:start="57:32" pos:end="57:32">)</operator> <operator pos:start="57:34" pos:end="57:35">&amp;&amp;</operator>

            <name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:13">p</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:23">first_tb</name></name></expr>)</condition> <block pos:start="59:26" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:45">

            <expr_stmt pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:44"><call pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:35">tb_invalidate_phys_page</name><argument_list pos:start="61:36" pos:end="61:44">(<argument pos:start="61:37" pos:end="61:40"><expr pos:start="61:37" pos:end="61:40"><name pos:start="61:37" pos:end="61:40">addr</name></expr></argument>, <argument pos:start="61:43" pos:end="61:43"><expr pos:start="61:43" pos:end="61:43"><literal type="number" pos:start="61:43" pos:end="61:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:9">p</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:16">flags</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:24">flags</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
