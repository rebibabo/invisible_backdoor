<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26357.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">check_bind</name><parameter_list pos:start="1:22" pos:end="1:76">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:28">struct</name> <name pos:start="1:30" pos:end="1:37">sockaddr</name></name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">sa</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:52">socklen_t</name></type> <name pos:start="1:54" pos:end="1:58">salen</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:75"><decl pos:start="1:61" pos:end="1:75"><type pos:start="1:61" pos:end="1:75"><name pos:start="1:61" pos:end="1:64">bool</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:75">has_proto</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:13">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:47"><expr pos:start="9:5" pos:end="9:46"><name pos:start="9:5" pos:end="9:6">fd</name> <operator pos:start="9:8" pos:end="9:8">=</operator> <call pos:start="9:10" pos:end="9:46"><name pos:start="9:10" pos:end="9:15">socket</name><argument_list pos:start="9:16" pos:end="9:46">(<argument pos:start="9:17" pos:end="9:29"><expr pos:start="9:17" pos:end="9:29"><name pos:start="9:17" pos:end="9:29"><name pos:start="9:17" pos:end="9:18">sa</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:29">sa_family</name></name></expr></argument>, <argument pos:start="9:32" pos:end="9:42"><expr pos:start="9:32" pos:end="9:42"><name pos:start="9:32" pos:end="9:42">SOCK_STREAM</name></expr></argument>, <argument pos:start="9:45" pos:end="9:45"><expr pos:start="9:45" pos:end="9:45"><literal type="number" pos:start="9:45" pos:end="9:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:15">(<expr pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:10">fd</name> <operator pos:start="11:12" pos:end="11:12">&lt;</operator> <literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>)</condition> <block pos:start="11:17" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:18">

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:32">(<expr pos:start="19:9" pos:end="19:31"><call pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:12">bind</name><argument_list pos:start="19:13" pos:end="19:27">(<argument pos:start="19:14" pos:end="19:15"><expr pos:start="19:14" pos:end="19:15"><name pos:start="19:14" pos:end="19:15">fd</name></expr></argument>, <argument pos:start="19:18" pos:end="19:19"><expr pos:start="19:18" pos:end="19:19"><name pos:start="19:18" pos:end="19:19">sa</name></expr></argument>, <argument pos:start="19:22" pos:end="19:26"><expr pos:start="19:22" pos:end="19:26"><name pos:start="19:22" pos:end="19:26">salen</name></expr></argument>)</argument_list></call> <operator pos:start="19:29" pos:end="19:29">&lt;</operator> <literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr>)</condition> <block pos:start="19:34" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:18">

        <expr_stmt pos:start="21:9" pos:end="21:18"><expr pos:start="21:9" pos:end="21:17"><call pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:13">close</name><argument_list pos:start="21:14" pos:end="21:17">(<argument pos:start="21:15" pos:end="21:16"><expr pos:start="21:15" pos:end="21:16"><name pos:start="21:15" pos:end="21:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:35">(<expr pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:17">errno</name> <operator pos:start="23:19" pos:end="23:20">==</operator> <name pos:start="23:22" pos:end="23:34">EADDRNOTAVAIL</name></expr>)</condition> <block pos:start="23:37" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:31"><expr pos:start="25:13" pos:end="25:30"><operator pos:start="25:13" pos:end="25:13">*</operator><name pos:start="25:14" pos:end="25:22">has_proto</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:30">false</name></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:21">return <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><call pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:9">close</name><argument_list pos:start="37:10" pos:end="37:13">(<argument pos:start="37:11" pos:end="37:12"><expr pos:start="37:11" pos:end="37:12"><name pos:start="37:11" pos:end="37:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:22"><expr pos:start="39:5" pos:end="39:21"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:14">has_proto</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:21">true</name></expr>;</expr_stmt>

    <return pos:start="41:5" pos:end="41:13">return <expr pos:start="41:12" pos:end="41:12"><literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
