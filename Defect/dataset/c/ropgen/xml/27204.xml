<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27204.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:17">decode</name><parameter_list pos:start="1:18" pos:end="3:34">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:51"><decl pos:start="1:42" pos:end="1:51"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">data</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:56">int</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:67">data_size</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:33"><decl pos:start="3:19" pos:end="3:33"><type pos:start="3:19" pos:end="3:33"><name pos:start="3:19" pos:end="3:26">AVPacket</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:33">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type>       <name pos:start="15:19" pos:end="15:30">segment_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type>           <name pos:start="17:19" pos:end="17:32">segment_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:14"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:14">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><call pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:11">av_dlog</name><argument_list pos:start="23:12" pos:end="23:39">(<argument pos:start="23:13" pos:end="23:17"><expr pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:17">avctx</name></expr></argument>, <argument pos:start="23:20" pos:end="23:38"><expr pos:start="23:20" pos:end="23:38"><literal type="string" pos:start="23:20" pos:end="23:38">"PGS sub packet:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="27:5" pos:end="35:5">for <control pos:start="27:9" pos:end="27:34">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:29"><expr pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:28">buf_size</name></expr>;</condition> <incr pos:start="27:31" pos:end="27:33"><expr pos:start="27:31" pos:end="27:33"><name pos:start="27:31" pos:end="27:31">i</name><operator pos:start="27:32" pos:end="27:33">++</operator></expr></incr>)</control> <block pos:start="27:36" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:33">

        <expr_stmt pos:start="29:9" pos:end="29:40"><expr pos:start="29:9" pos:end="29:39"><call pos:start="29:9" pos:end="29:39"><name pos:start="29:9" pos:end="29:15">av_dlog</name><argument_list pos:start="29:16" pos:end="29:39">(<argument pos:start="29:17" pos:end="29:21"><expr pos:start="29:17" pos:end="29:21"><name pos:start="29:17" pos:end="29:21">avctx</name></expr></argument>, <argument pos:start="29:24" pos:end="29:30"><expr pos:start="29:24" pos:end="29:30"><literal type="string" pos:start="29:24" pos:end="29:30">"%02x "</literal></expr></argument>, <argument pos:start="29:33" pos:end="29:38"><expr pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:35">buf</name><index pos:start="29:36" pos:end="29:38">[<expr pos:start="29:37" pos:end="29:37"><name pos:start="29:37" pos:end="29:37">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:33"><if pos:start="31:9" pos:end="33:33">if <condition pos:start="31:12" pos:end="31:25">(<expr pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:13">i</name> <operator pos:start="31:15" pos:end="31:15">%</operator> <literal type="number" pos:start="31:17" pos:end="31:18">16</literal> <operator pos:start="31:20" pos:end="31:21">==</operator> <literal type="number" pos:start="31:23" pos:end="31:24">15</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:33"><block_content pos:start="33:13" pos:end="33:33">

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><call pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:19">av_dlog</name><argument_list pos:start="33:20" pos:end="33:32">(<argument pos:start="33:21" pos:end="33:25"><expr pos:start="33:21" pos:end="33:25"><name pos:start="33:21" pos:end="33:25">avctx</name></expr></argument>, <argument pos:start="33:28" pos:end="33:31"><expr pos:start="33:28" pos:end="33:31"><literal type="string" pos:start="33:28" pos:end="33:31">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="39:5" pos:end="41:29"><if pos:start="39:5" pos:end="41:29">if <condition pos:start="39:8" pos:end="39:15">(<expr pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:9">i</name> <operator pos:start="39:11" pos:end="39:11">&amp;</operator> <literal type="number" pos:start="39:13" pos:end="39:14">15</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:29"><block_content pos:start="41:9" pos:end="41:29">

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><call pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:15">av_dlog</name><argument_list pos:start="41:16" pos:end="41:28">(<argument pos:start="41:17" pos:end="41:21"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:21">avctx</name></expr></argument>, <argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><literal type="string" pos:start="41:24" pos:end="41:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:19"><expr pos:start="45:5" pos:end="45:18"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:14">data_size</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:83">/* Ensure that we have received at a least a segment code and segment length */</comment>

    <if_stmt pos:start="51:5" pos:end="53:18"><if pos:start="51:5" pos:end="53:18">if <condition pos:start="51:8" pos:end="51:21">(<expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:16">buf_size</name> <operator pos:start="51:18" pos:end="51:18">&lt;</operator> <literal type="number" pos:start="51:20" pos:end="51:20">3</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:18"><block_content pos:start="53:9" pos:end="53:18">

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:11">buf_end</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:17">buf</name> <operator pos:start="57:19" pos:end="57:19">+</operator> <name pos:start="57:21" pos:end="57:28">buf_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:50">/* Step through buffer to identify segments */</comment>

    <while pos:start="63:5" pos:end="145:5">while <condition pos:start="63:11" pos:end="63:25">(<expr pos:start="63:12" pos:end="63:24"><name pos:start="63:12" pos:end="63:14">buf</name> <operator pos:start="63:16" pos:end="63:16">&lt;</operator> <name pos:start="63:18" pos:end="63:24">buf_end</name></expr>)</condition> <block pos:start="63:27" pos:end="145:5">{<block_content pos:start="65:9" pos:end="143:30">

        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:20">segment_type</name>   <operator pos:start="65:24" pos:end="65:24">=</operator> <call pos:start="65:26" pos:end="65:50"><name pos:start="65:26" pos:end="65:44">bytestream_get_byte</name><argument_list pos:start="65:45" pos:end="65:50">(<argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><operator pos:start="65:46" pos:end="65:46">&amp;</operator><name pos:start="65:47" pos:end="65:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:22">segment_length</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:50"><name pos:start="67:26" pos:end="67:44">bytestream_get_be16</name><argument_list pos:start="67:45" pos:end="67:50">(<argument pos:start="67:46" pos:end="67:49"><expr pos:start="67:46" pos:end="67:49"><operator pos:start="67:46" pos:end="67:46">&amp;</operator><name pos:start="67:47" pos:end="67:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:93"><expr pos:start="71:9" pos:end="71:92"><call pos:start="71:9" pos:end="71:92"><name pos:start="71:9" pos:end="71:15">av_dlog</name><argument_list pos:start="71:16" pos:end="71:92">(<argument pos:start="71:17" pos:end="71:21"><expr pos:start="71:17" pos:end="71:21"><name pos:start="71:17" pos:end="71:21">avctx</name></expr></argument>, <argument pos:start="71:24" pos:end="71:61"><expr pos:start="71:24" pos:end="71:61"><literal type="string" pos:start="71:24" pos:end="71:61">"Segment Length %d, Segment Type %x\n"</literal></expr></argument>, <argument pos:start="71:64" pos:end="71:77"><expr pos:start="71:64" pos:end="71:77"><name pos:start="71:64" pos:end="71:77">segment_length</name></expr></argument>, <argument pos:start="71:80" pos:end="71:91"><expr pos:start="71:80" pos:end="71:91"><name pos:start="71:80" pos:end="71:91">segment_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="75:9" pos:end="77:18"><if pos:start="75:9" pos:end="77:18">if <condition pos:start="75:12" pos:end="75:78">(<expr pos:start="75:13" pos:end="75:77"><name pos:start="75:13" pos:end="75:24">segment_type</name> <operator pos:start="75:26" pos:end="75:27">!=</operator> <name pos:start="75:29" pos:end="75:43">DISPLAY_SEGMENT</name> <operator pos:start="75:45" pos:end="75:46">&amp;&amp;</operator> <name pos:start="75:48" pos:end="75:61">segment_length</name> <operator pos:start="75:63" pos:end="75:63">&gt;</operator> <name pos:start="75:65" pos:end="75:71">buf_end</name> <operator pos:start="75:73" pos:end="75:73">-</operator> <name pos:start="75:75" pos:end="75:77">buf</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:18"><block_content pos:start="77:13" pos:end="77:18">

            <break pos:start="77:13" pos:end="77:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="81:9" pos:end="139:9">switch <condition pos:start="81:16" pos:end="81:29">(<expr pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:28">segment_type</name></expr>)</condition> <block pos:start="81:31" pos:end="139:9">{<block_content pos:start="83:9" pos:end="137:18">

        <case pos:start="83:9" pos:end="83:29">case <expr pos:start="83:14" pos:end="83:28"><name pos:start="83:14" pos:end="83:28">PALETTE_SEGMENT</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:62"><expr pos:start="85:13" pos:end="85:61"><call pos:start="85:13" pos:end="85:61"><name pos:start="85:13" pos:end="85:33">parse_palette_segment</name><argument_list pos:start="85:34" pos:end="85:61">(<argument pos:start="85:35" pos:end="85:39"><expr pos:start="85:35" pos:end="85:39"><name pos:start="85:35" pos:end="85:39">avctx</name></expr></argument>, <argument pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:44">buf</name></expr></argument>, <argument pos:start="85:47" pos:end="85:60"><expr pos:start="85:47" pos:end="85:60"><name pos:start="85:47" pos:end="85:60">segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:29">case <expr pos:start="89:14" pos:end="89:28"><name pos:start="89:14" pos:end="89:28">PICTURE_SEGMENT</name></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:62"><expr pos:start="91:13" pos:end="91:61"><call pos:start="91:13" pos:end="91:61"><name pos:start="91:13" pos:end="91:33">parse_picture_segment</name><argument_list pos:start="91:34" pos:end="91:61">(<argument pos:start="91:35" pos:end="91:39"><expr pos:start="91:35" pos:end="91:39"><name pos:start="91:35" pos:end="91:39">avctx</name></expr></argument>, <argument pos:start="91:42" pos:end="91:44"><expr pos:start="91:42" pos:end="91:44"><name pos:start="91:42" pos:end="91:44">buf</name></expr></argument>, <argument pos:start="91:47" pos:end="91:60"><expr pos:start="91:47" pos:end="91:60"><name pos:start="91:47" pos:end="91:60">segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:34">case <expr pos:start="95:14" pos:end="95:33"><name pos:start="95:14" pos:end="95:33">PRESENTATION_SEGMENT</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:85"><expr pos:start="97:13" pos:end="97:84"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:84"><name pos:start="97:19" pos:end="97:44">parse_presentation_segment</name><argument_list pos:start="97:45" pos:end="97:84">(<argument pos:start="97:46" pos:end="97:50"><expr pos:start="97:46" pos:end="97:50"><name pos:start="97:46" pos:end="97:50">avctx</name></expr></argument>, <argument pos:start="97:53" pos:end="97:55"><expr pos:start="97:53" pos:end="97:55"><name pos:start="97:53" pos:end="97:55">buf</name></expr></argument>, <argument pos:start="97:58" pos:end="97:71"><expr pos:start="97:58" pos:end="97:71"><name pos:start="97:58" pos:end="97:71">segment_length</name></expr></argument>, <argument pos:start="97:74" pos:end="97:83"><expr pos:start="97:74" pos:end="97:83"><name pos:start="97:74" pos:end="97:83"><name pos:start="97:74" pos:end="97:78">avpkt</name><operator pos:start="97:79" pos:end="97:80">-&gt;</operator><name pos:start="97:81" pos:end="97:83">pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="101:27"><if pos:start="99:13" pos:end="101:27">if <condition pos:start="99:16" pos:end="99:24">(<expr pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">&lt;</operator> <literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:27"><block_content pos:start="101:17" pos:end="101:27">

                <return pos:start="101:17" pos:end="101:27">return <expr pos:start="101:24" pos:end="101:26"><name pos:start="101:24" pos:end="101:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:28">case <expr pos:start="105:14" pos:end="105:27"><name pos:start="105:14" pos:end="105:27">WINDOW_SEGMENT</name></expr>:</case>

            <comment type="block" pos:start="107:13" pos:end="121:15">/*

             * Window Segment Structure (No new information provided):

             *     2 bytes: Unknown,

             *     2 bytes: X position of subtitle,

             *     2 bytes: Y position of subtitle,

             *     2 bytes: Width of subtitle,

             *     2 bytes: Height of subtitle.

             */</comment>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:29">case <expr pos:start="125:14" pos:end="125:28"><name pos:start="125:14" pos:end="125:28">DISPLAY_SEGMENT</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:79"><expr pos:start="127:13" pos:end="127:78"><operator pos:start="127:13" pos:end="127:13">*</operator><name pos:start="127:14" pos:end="127:22">data_size</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <call pos:start="127:26" pos:end="127:78"><name pos:start="127:26" pos:end="127:44">display_end_segment</name><argument_list pos:start="127:45" pos:end="127:78">(<argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><name pos:start="127:46" pos:end="127:50">avctx</name></expr></argument>, <argument pos:start="127:53" pos:end="127:56"><expr pos:start="127:53" pos:end="127:56"><name pos:start="127:53" pos:end="127:56">data</name></expr></argument>, <argument pos:start="127:59" pos:end="127:61"><expr pos:start="127:59" pos:end="127:61"><name pos:start="127:59" pos:end="127:61">buf</name></expr></argument>, <argument pos:start="127:64" pos:end="127:77"><expr pos:start="127:64" pos:end="127:77"><name pos:start="127:64" pos:end="127:77">segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <default pos:start="131:9" pos:end="131:16">default:</default>

            <expr_stmt pos:start="133:13" pos:end="135:49"><expr pos:start="133:13" pos:end="135:48"><call pos:start="133:13" pos:end="135:48"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="135:48">(<argument pos:start="133:20" pos:end="133:24"><expr pos:start="133:20" pos:end="133:24"><name pos:start="133:20" pos:end="133:24">avctx</name></expr></argument>, <argument pos:start="133:27" pos:end="133:38"><expr pos:start="133:27" pos:end="133:38"><name pos:start="133:27" pos:end="133:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:41" pos:end="133:89"><expr pos:start="133:41" pos:end="133:89"><literal type="string" pos:start="133:41" pos:end="133:89">"Unknown subtitle segment type 0x%x, length %d\n"</literal></expr></argument>,

                   <argument pos:start="135:20" pos:end="135:31"><expr pos:start="135:20" pos:end="135:31"><name pos:start="135:20" pos:end="135:31">segment_type</name></expr></argument>, <argument pos:start="135:34" pos:end="135:47"><expr pos:start="135:34" pos:end="135:47"><name pos:start="135:34" pos:end="135:47">segment_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="143:9" pos:end="143:30"><expr pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:11">buf</name> <operator pos:start="143:13" pos:end="143:14">+=</operator> <name pos:start="143:16" pos:end="143:29">segment_length</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="149:5" pos:end="149:20">return <expr pos:start="149:12" pos:end="149:19"><name pos:start="149:12" pos:end="149:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
