<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20134.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">alloc_buffer</name><parameter_list pos:start="1:24" pos:end="1:61">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:35">InputStream</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">ist</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><name pos:start="1:43" pos:end="1:53">FrameBuffer</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">pbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:38">= <expr pos:start="5:25" pos:end="5:38"><name pos:start="5:25" pos:end="5:38"><name pos:start="5:25" pos:end="5:27">ist</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:31">st</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:38">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:15">FrameBuffer</name>  <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">buf</name> <init pos:start="7:23" pos:end="7:48">= <expr pos:start="7:25" pos:end="7:48"><call pos:start="7:25" pos:end="7:48"><name pos:start="7:25" pos:end="7:34">av_mallocz</name><argument_list pos:start="7:35" pos:end="7:48">(<argument pos:start="7:36" pos:end="7:47"><expr pos:start="7:36" pos:end="7:47"><sizeof pos:start="7:36" pos:end="7:47">sizeof<argument_list pos:start="7:42" pos:end="7:47">(<argument pos:start="7:43" pos:end="7:46"><expr pos:start="7:43" pos:end="7:46"><operator pos:start="7:43" pos:end="7:43">*</operator><name pos:start="7:44" pos:end="7:46">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:84"><decl pos:start="11:5" pos:end="11:83"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:24">pixel_size</name> <init pos:start="11:26" pos:end="11:83">= <expr pos:start="11:28" pos:end="11:83"><name pos:start="11:28" pos:end="11:61"><name pos:start="11:28" pos:end="11:49">av_pix_fmt_descriptors</name><index pos:start="11:50" pos:end="11:61">[<expr pos:start="11:51" pos:end="11:60"><name pos:start="11:51" pos:end="11:60"><name pos:start="11:51" pos:end="11:51">s</name><operator pos:start="11:52" pos:end="11:53">-&gt;</operator><name pos:start="11:54" pos:end="11:60">pix_fmt</name></name></expr>]</index></name><operator pos:start="11:62" pos:end="11:62">.</operator><name pos:start="11:63" pos:end="11:69"><name pos:start="11:63" pos:end="11:66">comp</name><index pos:start="11:67" pos:end="11:69">[<expr pos:start="11:68" pos:end="11:68"><literal type="number" pos:start="11:68" pos:end="11:68">0</literal></expr>]</index></name><operator pos:start="11:70" pos:end="11:70">.</operator><name pos:start="11:71" pos:end="11:81">step_minus1</name><operator pos:start="11:82" pos:end="11:82">+</operator><literal type="number" pos:start="11:83" pos:end="11:83">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">h_chroma_shift</name></decl>, <decl pos:start="13:25" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:25" pos:end="13:38">v_chroma_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">edge</name> <init pos:start="15:14" pos:end="15:17">= <expr pos:start="15:16" pos:end="15:17"><literal type="number" pos:start="15:16" pos:end="15:17">32</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="15:20" pos:end="15:84">// XXX should be avcodec_get_edge_width(), but that fails on svq1</comment>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">w</name> <init pos:start="17:11" pos:end="17:20">= <expr pos:start="17:13" pos:end="17:20"><name pos:start="17:13" pos:end="17:20"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:20">width</name></name></expr></init></decl>, <decl pos:start="17:23" pos:end="17:35"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:23" pos:end="17:23">h</name> <init pos:start="17:25" pos:end="17:35">= <expr pos:start="17:27" pos:end="17:35"><name pos:start="17:27" pos:end="17:35"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:35">height</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">buf</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:42">(<expr pos:start="27:9" pos:end="27:41"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">(</operator><name pos:start="27:11" pos:end="27:18"><name pos:start="27:11" pos:end="27:11">s</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:18">flags</name></name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <name pos:start="27:22" pos:end="27:40">CODEC_FLAG_EMU_EDGE</name><operator pos:start="27:41" pos:end="27:41">)</operator></expr>)</condition> <block pos:start="27:44" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <expr_stmt pos:start="29:9" pos:end="29:20"><expr pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:9">w</name> <operator pos:start="29:11" pos:end="29:12">+=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">2</literal><operator pos:start="29:15" pos:end="29:15">*</operator><name pos:start="29:16" pos:end="29:19">edge</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:20"><expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:9">h</name> <operator pos:start="31:11" pos:end="31:12">+=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">2</literal><operator pos:start="31:15" pos:end="31:15">*</operator><name pos:start="31:16" pos:end="31:19">edge</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><call pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:28">avcodec_align_dimensions</name><argument_list pos:start="37:29" pos:end="37:39">(<argument pos:start="37:30" pos:end="37:30"><expr pos:start="37:30" pos:end="37:30"><name pos:start="37:30" pos:end="37:30">s</name></expr></argument>, <argument pos:start="37:33" pos:end="37:34"><expr pos:start="37:33" pos:end="37:34"><operator pos:start="37:33" pos:end="37:33">&amp;</operator><name pos:start="37:34" pos:end="37:34">w</name></expr></argument>, <argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:38">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="41:51">(<expr pos:start="39:9" pos:end="41:50"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:12">ret</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="41:45"><name pos:start="39:16" pos:end="39:29">av_image_alloc</name><argument_list pos:start="39:30" pos:end="41:45">(<argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><name pos:start="39:31" pos:end="39:39"><name pos:start="39:31" pos:end="39:33">buf</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:39">base</name></name></expr></argument>, <argument pos:start="39:42" pos:end="39:54"><expr pos:start="39:42" pos:end="39:54"><name pos:start="39:42" pos:end="39:54"><name pos:start="39:42" pos:end="39:44">buf</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:54">linesize</name></name></expr></argument>, <argument pos:start="39:57" pos:end="39:57"><expr pos:start="39:57" pos:end="39:57"><name pos:start="39:57" pos:end="39:57">w</name></expr></argument>, <argument pos:start="39:60" pos:end="39:60"><expr pos:start="39:60" pos:end="39:60"><name pos:start="39:60" pos:end="39:60">h</name></expr></argument>,

                              <argument pos:start="41:31" pos:end="41:40"><expr pos:start="41:31" pos:end="41:40"><name pos:start="41:31" pos:end="41:40"><name pos:start="41:31" pos:end="41:31">s</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:40">pix_fmt</name></name></expr></argument>, <argument pos:start="41:43" pos:end="41:44"><expr pos:start="41:43" pos:end="41:44"><literal type="number" pos:start="41:43" pos:end="41:44">32</literal></expr></argument>)</argument_list></call><operator pos:start="41:46" pos:end="41:46">)</operator> <operator pos:start="41:48" pos:end="41:48">&lt;</operator> <literal type="number" pos:start="41:50" pos:end="41:50">0</literal></expr>)</condition> <block pos:start="41:53" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:19">

        <expr_stmt pos:start="43:9" pos:end="43:23"><expr pos:start="43:9" pos:end="43:22"><call pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:16">av_freep</name><argument_list pos:start="43:17" pos:end="43:22">(<argument pos:start="43:18" pos:end="43:21"><expr pos:start="43:18" pos:end="43:21"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="49:5" pos:end="57:7">/* XXX this shouldn't be needed, but some tests break without this line

     * those decoders are buggy and need to be fixed.

     * the following tests fail:

     * bethsoft-vid, cdgraphics, ansi, aasc, fraps-v1, qtrle-1bit

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:35"><expr pos:start="59:5" pos:end="59:34"><call pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:10">memset</name><argument_list pos:start="59:11" pos:end="59:34">(<argument pos:start="59:12" pos:end="59:23"><expr pos:start="59:12" pos:end="59:23"><name pos:start="59:12" pos:end="59:23"><name pos:start="59:12" pos:end="59:14">buf</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:20">base</name><index pos:start="59:21" pos:end="59:23">[<expr pos:start="59:22" pos:end="59:22"><literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><literal type="number" pos:start="59:26" pos:end="59:28">128</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:80"><expr pos:start="63:5" pos:end="63:79"><call pos:start="63:5" pos:end="63:79"><name pos:start="63:5" pos:end="63:33">avcodec_get_chroma_sub_sample</name><argument_list pos:start="63:34" pos:end="63:79">(<argument pos:start="63:35" pos:end="63:44"><expr pos:start="63:35" pos:end="63:44"><name pos:start="63:35" pos:end="63:44"><name pos:start="63:35" pos:end="63:35">s</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:44">pix_fmt</name></name></expr></argument>, <argument pos:start="63:47" pos:end="63:61"><expr pos:start="63:47" pos:end="63:61"><operator pos:start="63:47" pos:end="63:47">&amp;</operator><name pos:start="63:48" pos:end="63:61">h_chroma_shift</name></expr></argument>, <argument pos:start="63:64" pos:end="63:78"><expr pos:start="63:64" pos:end="63:78"><operator pos:start="63:64" pos:end="63:64">&amp;</operator><name pos:start="63:65" pos:end="63:78">v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="65:5" pos:end="83:5">for <control pos:start="65:9" pos:end="65:55">(<init pos:start="65:10" pos:end="65:19"><decl pos:start="65:10" pos:end="65:18"><type pos:start="65:10" pos:end="65:12"><name pos:start="65:10" pos:end="65:12">int</name></type> <name pos:start="65:14" pos:end="65:14">i</name> <init pos:start="65:16" pos:end="65:18">= <expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr></init></decl>;</init> <condition pos:start="65:21" pos:end="65:50"><expr pos:start="65:21" pos:end="65:49"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <call pos:start="65:25" pos:end="65:49"><name pos:start="65:25" pos:end="65:38">FF_ARRAY_ELEMS</name><argument_list pos:start="65:39" pos:end="65:49">(<argument pos:start="65:40" pos:end="65:48"><expr pos:start="65:40" pos:end="65:48"><name pos:start="65:40" pos:end="65:48"><name pos:start="65:40" pos:end="65:42">buf</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:48">data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="65:52" pos:end="65:54"><expr pos:start="65:52" pos:end="65:54"><name pos:start="65:52" pos:end="65:52">i</name><operator pos:start="65:53" pos:end="65:54">++</operator></expr></incr>)</control> <block pos:start="65:57" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:69">

        <decl_stmt pos:start="67:9" pos:end="67:54"><decl pos:start="67:9" pos:end="67:53"><type pos:start="67:9" pos:end="67:17"><specifier pos:start="67:9" pos:end="67:13">const</specifier> <name pos:start="67:15" pos:end="67:17">int</name></type> <name pos:start="67:19" pos:end="67:25">h_shift</name> <init pos:start="67:27" pos:end="67:53">= <expr pos:start="67:29" pos:end="67:53"><ternary pos:start="67:29" pos:end="67:53"><condition pos:start="67:29" pos:end="67:34"><expr pos:start="67:29" pos:end="67:32"><name pos:start="67:29" pos:end="67:29">i</name><operator pos:start="67:30" pos:end="67:31">==</operator><literal type="number" pos:start="67:32" pos:end="67:32">0</literal></expr> ?</condition><then pos:start="67:36" pos:end="67:36"> <expr pos:start="67:36" pos:end="67:36"><literal type="number" pos:start="67:36" pos:end="67:36">0</literal></expr> </then><else pos:start="67:38" pos:end="67:53">: <expr pos:start="67:40" pos:end="67:53"><name pos:start="67:40" pos:end="67:53">h_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:54"><decl pos:start="69:9" pos:end="69:53"><type pos:start="69:9" pos:end="69:17"><specifier pos:start="69:9" pos:end="69:13">const</specifier> <name pos:start="69:15" pos:end="69:17">int</name></type> <name pos:start="69:19" pos:end="69:25">v_shift</name> <init pos:start="69:27" pos:end="69:53">= <expr pos:start="69:29" pos:end="69:53"><ternary pos:start="69:29" pos:end="69:53"><condition pos:start="69:29" pos:end="69:34"><expr pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:29">i</name><operator pos:start="69:30" pos:end="69:31">==</operator><literal type="number" pos:start="69:32" pos:end="69:32">0</literal></expr> ?</condition><then pos:start="69:36" pos:end="69:36"> <expr pos:start="69:36" pos:end="69:36"><literal type="number" pos:start="69:36" pos:end="69:36">0</literal></expr> </then><else pos:start="69:38" pos:end="69:53">: <expr pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:53">v_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="71:9" pos:end="81:69"><if pos:start="71:9" pos:end="73:40">if <condition pos:start="71:12" pos:end="71:43">(<expr pos:start="71:13" pos:end="71:42"><name pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:20">flags</name></name> <operator pos:start="71:22" pos:end="71:22">&amp;</operator> <name pos:start="71:24" pos:end="71:42">CODEC_FLAG_EMU_EDGE</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:40"><block_content pos:start="73:13" pos:end="73:40">

            <expr_stmt pos:start="73:13" pos:end="73:40"><expr pos:start="73:13" pos:end="73:39"><name pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:15">buf</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:21">data</name><index pos:start="73:22" pos:end="73:24">[<expr pos:start="73:23" pos:end="73:23"><name pos:start="73:23" pos:end="73:23">i</name></expr>]</index></name> <operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:39"><name pos:start="73:28" pos:end="73:30">buf</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:36">base</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><name pos:start="73:38" pos:end="73:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="75:9" pos:end="81:69">else<block type="pseudo" pos:start="77:13" pos:end="81:69"><block_content pos:start="77:13" pos:end="81:69">

            <expr_stmt pos:start="77:13" pos:end="81:69"><expr pos:start="77:13" pos:end="81:68"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:15">buf</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:21">data</name><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">i</name></expr>]</index></name> <operator pos:start="77:26" pos:end="77:26">=</operator> <name pos:start="77:28" pos:end="77:39"><name pos:start="77:28" pos:end="77:30">buf</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:36">base</name><index pos:start="77:37" pos:end="77:39">[<expr pos:start="77:38" pos:end="77:38"><name pos:start="77:38" pos:end="77:38">i</name></expr>]</index></name> <operator pos:start="77:41" pos:end="77:41">+</operator>

                           <call pos:start="79:28" pos:end="81:68"><name pos:start="79:28" pos:end="79:34">FFALIGN</name><argument_list pos:start="79:35" pos:end="81:68">(<argument pos:start="79:36" pos:end="81:63"><expr pos:start="79:36" pos:end="81:63"><operator pos:start="79:36" pos:end="79:36">(</operator><name pos:start="79:37" pos:end="79:52"><name pos:start="79:37" pos:end="79:39">buf</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:49">linesize</name><index pos:start="79:50" pos:end="79:52">[<expr pos:start="79:51" pos:end="79:51"><name pos:start="79:51" pos:end="79:51">i</name></expr>]</index></name><operator pos:start="79:53" pos:end="79:53">*</operator><name pos:start="79:54" pos:end="79:57">edge</name> <operator pos:start="79:59" pos:end="79:60">&gt;&gt;</operator> <name pos:start="79:62" pos:end="79:68">v_shift</name><operator pos:start="79:69" pos:end="79:69">)</operator> <operator pos:start="79:71" pos:end="79:71">+</operator>

                                   <operator pos:start="81:36" pos:end="81:36">(</operator><name pos:start="81:37" pos:end="81:46">pixel_size</name><operator pos:start="81:47" pos:end="81:47">*</operator><name pos:start="81:48" pos:end="81:51">edge</name> <operator pos:start="81:53" pos:end="81:54">&gt;&gt;</operator> <name pos:start="81:56" pos:end="81:62">h_shift</name><operator pos:start="81:63" pos:end="81:63">)</operator></expr></argument>, <argument pos:start="81:66" pos:end="81:67"><expr pos:start="81:66" pos:end="81:67"><literal type="number" pos:start="81:66" pos:end="81:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="85:5" pos:end="85:28"><expr pos:start="85:5" pos:end="85:27"><name pos:start="85:5" pos:end="85:10"><name pos:start="85:5" pos:end="85:7">buf</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:10">w</name></name>       <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:27">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:29"><expr pos:start="87:5" pos:end="87:28"><name pos:start="87:5" pos:end="87:10"><name pos:start="87:5" pos:end="87:7">buf</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:10">h</name></name>       <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:28"><name pos:start="87:20" pos:end="87:20">s</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:28">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:30"><expr pos:start="89:5" pos:end="89:29"><name pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:7">buf</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:16">pix_fmt</name></name> <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:29"><name pos:start="89:20" pos:end="89:20">s</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:29">pix_fmt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:23"><expr pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:7">buf</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:12">ist</name></name>     <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:22">ist</name></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:16"><expr pos:start="95:5" pos:end="95:15"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:9">pbuf</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <name pos:start="95:13" pos:end="95:15">buf</name></expr>;</expr_stmt>

    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
