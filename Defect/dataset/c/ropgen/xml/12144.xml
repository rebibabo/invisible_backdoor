<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12144.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sun4c_hw_init</name><parameter_list pos:start="1:26" pos:end="9:77">(<parameter pos:start="1:27" pos:end="1:57"><decl pos:start="1:27" pos:end="1:57"><type pos:start="1:27" pos:end="1:57"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:50">sun4c_hwdef</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">hwdef</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:78"><decl pos:start="1:60" pos:end="1:78"><type pos:start="1:60" pos:end="1:78"><name pos:start="1:60" pos:end="1:69">ram_addr_t</name></type> <name pos:start="1:71" pos:end="1:78">RAM_size</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:49"><decl pos:start="3:27" pos:end="3:49"><type pos:start="3:27" pos:end="3:49"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:49">boot_device</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:42"><decl pos:start="5:27" pos:end="5:42"><type pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:38">DisplayState</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:42">ds</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:71"><decl pos:start="5:45" pos:end="5:71"><type pos:start="5:45" pos:end="5:71"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:71">kernel_filename</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:52"><decl pos:start="7:27" pos:end="7:52"><type pos:start="7:27" pos:end="7:52"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:52">kernel_cmdline</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:53"><decl pos:start="9:27" pos:end="9:53"><type pos:start="9:27" pos:end="9:53"><specifier pos:start="9:27" pos:end="9:31">const</specifier> <name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:53">initrd_filename</name></decl></parameter>, <parameter pos:start="9:56" pos:end="9:76"><decl pos:start="9:56" pos:end="9:76"><type pos:start="9:56" pos:end="9:76"><specifier pos:start="9:56" pos:end="9:60">const</specifier> <name pos:start="9:62" pos:end="9:65">char</name> <modifier pos:start="9:67" pos:end="9:67">*</modifier></type><name pos:start="9:68" pos:end="9:76">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="305:1">{<block_content pos:start="13:5" pos:end="303:65">

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:15">iommu</name></decl>, <decl pos:start="17:18" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">espdma</name></decl>, <decl pos:start="17:27" pos:end="17:32"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:32">ledma</name></decl>, <decl pos:start="17:35" pos:end="17:43"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:35" pos:end="17:35">*</modifier></type><name pos:start="17:36" pos:end="17:43">main_esp</name></decl>, <decl pos:start="17:46" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:10"><modifier pos:start="17:46" pos:end="17:46">*</modifier></type><name pos:start="17:47" pos:end="17:51">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:61"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:22">cpu_irqs</name></decl>, <decl pos:start="19:25" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:35">slavio_irq</name></decl>, <decl pos:start="19:38" pos:end="19:48"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:38" pos:end="19:38">*</modifier></type><name pos:start="19:39" pos:end="19:48">espdma_irq</name></decl>, <decl pos:start="19:51" pos:end="19:60"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:51" pos:end="19:51">*</modifier></type><name pos:start="19:52" pos:end="19:60">ledma_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:23">esp_reset</name></decl>, <decl pos:start="21:26" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:26" pos:end="21:26">*</modifier></type><name pos:start="21:27" pos:end="21:34">le_reset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:20">fdc_tc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:51"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:25">ram_offset</name></decl>, <decl pos:start="25:28" pos:end="25:38"><type ref="prev" pos:start="25:5" pos:end="25:14"/><name pos:start="25:28" pos:end="25:38">prom_offset</name></decl>, <decl pos:start="25:41" pos:end="25:50"><type ref="prev" pos:start="25:5" pos:end="25:14"/><name pos:start="25:41" pos:end="25:50">tcx_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:12">unsigned</name> <name pos:start="27:14" pos:end="27:17">long</name></type> <name pos:start="27:19" pos:end="27:29">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:19"><decl pos:start="31:5" pos:end="31:18"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">char</name></type> <name pos:start="31:10" pos:end="31:18"><name pos:start="31:10" pos:end="31:12">buf</name><index pos:start="31:13" pos:end="31:18">[<expr pos:start="31:14" pos:end="31:17"><literal type="number" pos:start="31:14" pos:end="31:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:33"><decl pos:start="33:5" pos:end="33:32"><type pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:20">BlockDriverState</name> <modifier pos:start="33:22" pos:end="33:22">*</modifier></type><name pos:start="33:23" pos:end="33:32"><name pos:start="33:23" pos:end="33:24">fd</name><index pos:start="33:25" pos:end="33:32">[<expr pos:start="33:26" pos:end="33:31"><name pos:start="33:26" pos:end="33:31">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:20"><decl pos:start="35:5" pos:end="35:19"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:19">drive_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:17"><decl pos:start="37:5" pos:end="37:16"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:8">void</name> <modifier pos:start="37:10" pos:end="37:10">*</modifier></type><name pos:start="37:11" pos:end="37:16">fw_cfg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:18">/* init CPU */</comment>

    <if_stmt pos:start="43:5" pos:end="45:45"><if pos:start="43:5" pos:end="45:45">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:45"><block_content pos:start="45:9" pos:end="45:45">

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:17">cpu_model</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:44"><name pos:start="45:21" pos:end="45:25">hwdef</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:44">default_cpu_model</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:7">env</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:29"><name pos:start="49:11" pos:end="49:18">cpu_init</name><argument_list pos:start="49:19" pos:end="49:29">(<argument pos:start="49:20" pos:end="49:28"><expr pos:start="49:20" pos:end="49:28"><name pos:start="49:20" pos:end="49:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:13">(<expr pos:start="51:9" pos:end="51:12"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:12">env</name></expr>)</condition> <block pos:start="51:15" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:16">

        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:70">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:69"><expr pos:start="53:25" pos:end="53:69"><literal type="string" pos:start="53:25" pos:end="53:69">"qemu: Unable to find Sparc CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><call pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:12">exit</name><argument_list pos:start="55:13" pos:end="55:15">(<argument pos:start="55:14" pos:end="55:14"><expr pos:start="55:14" pos:end="55:14"><literal type="number" pos:start="55:14" pos:end="55:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:29"><expr pos:start="61:5" pos:end="61:28"><call pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:20">cpu_sparc_set_id</name><argument_list pos:start="61:21" pos:end="61:28">(<argument pos:start="61:22" pos:end="61:24"><expr pos:start="61:22" pos:end="61:24"><name pos:start="61:22" pos:end="61:24">env</name></expr></argument>, <argument pos:start="61:27" pos:end="61:27"><expr pos:start="61:27" pos:end="61:27"><literal type="number" pos:start="61:27" pos:end="61:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><call pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:23">qemu_register_reset</name><argument_list pos:start="65:24" pos:end="65:44">(<argument pos:start="65:25" pos:end="65:38"><expr pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:38">main_cpu_reset</name></expr></argument>, <argument pos:start="65:41" pos:end="65:43"><expr pos:start="65:41" pos:end="65:43"><name pos:start="65:41" pos:end="65:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:62"><expr pos:start="67:5" pos:end="67:61"><name pos:start="67:5" pos:end="67:12">cpu_irqs</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <call pos:start="67:16" pos:end="67:61"><name pos:start="67:16" pos:end="67:33">qemu_allocate_irqs</name><argument_list pos:start="67:34" pos:end="67:61">(<argument pos:start="67:35" pos:end="67:45"><expr pos:start="67:35" pos:end="67:45"><name pos:start="67:35" pos:end="67:45">cpu_set_irq</name></expr></argument>, <argument pos:start="67:48" pos:end="67:50"><expr pos:start="67:48" pos:end="67:50"><name pos:start="67:48" pos:end="67:50">env</name></expr></argument>, <argument pos:start="67:53" pos:end="67:60"><expr pos:start="67:53" pos:end="67:60"><name pos:start="67:53" pos:end="67:60">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:7">env</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:18">prom_addr</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:39"><name pos:start="69:22" pos:end="69:26">hwdef</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:39">slavio_base</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:22">/* allocate RAM */</comment>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="87:5">if <condition pos:start="75:8" pos:end="75:44">(<expr pos:start="75:9" pos:end="75:43"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:17">uint64_t</name><operator pos:start="75:18" pos:end="75:18">)</operator><name pos:start="75:19" pos:end="75:26">RAM_size</name> <operator pos:start="75:28" pos:end="75:28">&gt;</operator> <name pos:start="75:30" pos:end="75:43"><name pos:start="75:30" pos:end="75:34">hwdef</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:43">max_mem</name></name></expr>)</condition> <block pos:start="75:46" pos:end="87:5">{<block_content pos:start="77:9" pos:end="85:16">

        <expr_stmt pos:start="77:9" pos:end="83:64"><expr pos:start="77:9" pos:end="83:63"><call pos:start="77:9" pos:end="83:63"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="83:63">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>,

                <argument pos:start="79:17" pos:end="79:74"><expr pos:start="79:17" pos:end="79:74"><literal type="string" pos:start="79:17" pos:end="79:74">"qemu: Too much memory for this machine: %d, maximum %d\n"</literal></expr></argument>,

                <argument pos:start="81:17" pos:end="81:56"><expr pos:start="81:17" pos:end="81:56"><operator pos:start="81:17" pos:end="81:17">(</operator><name pos:start="81:18" pos:end="81:25">unsigned</name> <name pos:start="81:27" pos:end="81:29">int</name><operator pos:start="81:30" pos:end="81:30">)</operator><operator pos:start="81:31" pos:end="81:31">(</operator><name pos:start="81:32" pos:end="81:39">RAM_size</name> <operator pos:start="81:41" pos:end="81:41">/</operator> <operator pos:start="81:43" pos:end="81:43">(</operator><literal type="number" pos:start="81:44" pos:end="81:47">1024</literal> <operator pos:start="81:49" pos:end="81:49">*</operator> <literal type="number" pos:start="81:51" pos:end="81:54">1024</literal><operator pos:start="81:55" pos:end="81:55">)</operator><operator pos:start="81:56" pos:end="81:56">)</operator></expr></argument>,

                <argument pos:start="83:17" pos:end="83:62"><expr pos:start="83:17" pos:end="83:62"><operator pos:start="83:17" pos:end="83:17">(</operator><name pos:start="83:18" pos:end="83:25">unsigned</name> <name pos:start="83:27" pos:end="83:29">int</name><operator pos:start="83:30" pos:end="83:30">)</operator><operator pos:start="83:31" pos:end="83:31">(</operator><name pos:start="83:32" pos:end="83:45"><name pos:start="83:32" pos:end="83:36">hwdef</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:45">max_mem</name></name> <operator pos:start="83:47" pos:end="83:47">/</operator> <operator pos:start="83:49" pos:end="83:49">(</operator><literal type="number" pos:start="83:50" pos:end="83:53">1024</literal> <operator pos:start="83:55" pos:end="83:55">*</operator> <literal type="number" pos:start="83:57" pos:end="83:60">1024</literal><operator pos:start="83:61" pos:end="83:61">)</operator><operator pos:start="83:62" pos:end="83:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:16"><expr pos:start="85:9" pos:end="85:15"><call pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:12">exit</name><argument_list pos:start="85:13" pos:end="85:15">(<argument pos:start="85:14" pos:end="85:14"><expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:42"><expr pos:start="89:5" pos:end="89:41"><name pos:start="89:5" pos:end="89:14">ram_offset</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:41"><name pos:start="89:18" pos:end="89:31">qemu_ram_alloc</name><argument_list pos:start="89:32" pos:end="89:41">(<argument pos:start="89:33" pos:end="89:40"><expr pos:start="89:33" pos:end="89:40"><name pos:start="89:33" pos:end="89:40">RAM_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:58"><expr pos:start="91:5" pos:end="91:57"><call pos:start="91:5" pos:end="91:57"><name pos:start="91:5" pos:end="91:32">cpu_register_physical_memory</name><argument_list pos:start="91:33" pos:end="91:57">(<argument pos:start="91:34" pos:end="91:34"><expr pos:start="91:34" pos:end="91:34"><literal type="number" pos:start="91:34" pos:end="91:34">0</literal></expr></argument>, <argument pos:start="91:37" pos:end="91:44"><expr pos:start="91:37" pos:end="91:44"><name pos:start="91:37" pos:end="91:44">RAM_size</name></expr></argument>, <argument pos:start="91:47" pos:end="91:56"><expr pos:start="91:47" pos:end="91:56"><name pos:start="91:47" pos:end="91:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:24">/* load boot prom */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:48"><expr pos:start="97:5" pos:end="97:47"><name pos:start="97:5" pos:end="97:15">prom_offset</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:47"><name pos:start="97:19" pos:end="97:32">qemu_ram_alloc</name><argument_list pos:start="97:33" pos:end="97:47">(<argument pos:start="97:34" pos:end="97:46"><expr pos:start="97:34" pos:end="97:46"><name pos:start="97:34" pos:end="97:46">PROM_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="105:59"><expr pos:start="99:5" pos:end="105:58"><call pos:start="99:5" pos:end="105:58"><name pos:start="99:5" pos:end="99:32">cpu_register_physical_memory</name><argument_list pos:start="99:33" pos:end="105:58">(<argument pos:start="99:34" pos:end="99:51"><expr pos:start="99:34" pos:end="99:51"><name pos:start="99:34" pos:end="99:51"><name pos:start="99:34" pos:end="99:38">hwdef</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:51">slavio_base</name></name></expr></argument>,

                                 <argument pos:start="101:34" pos:end="103:49"><expr pos:start="101:34" pos:end="103:49"><operator pos:start="101:34" pos:end="101:34">(</operator><name pos:start="101:35" pos:end="101:47">PROM_SIZE_MAX</name> <operator pos:start="101:49" pos:end="101:49">+</operator> <name pos:start="101:51" pos:end="101:66">TARGET_PAGE_SIZE</name> <operator pos:start="101:68" pos:end="101:68">-</operator> <literal type="number" pos:start="101:70" pos:end="101:70">1</literal><operator pos:start="101:71" pos:end="101:71">)</operator> <operator pos:start="101:73" pos:end="101:73">&amp;</operator>

                                 <name pos:start="103:34" pos:end="103:49">TARGET_PAGE_MASK</name></expr></argument>,

                                 <argument pos:start="105:34" pos:end="105:57"><expr pos:start="105:34" pos:end="105:57"><name pos:start="105:34" pos:end="105:44">prom_offset</name> <operator pos:start="105:46" pos:end="105:46">|</operator> <name pos:start="105:48" pos:end="105:57">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="111:34"><if pos:start="109:5" pos:end="111:34">if <condition pos:start="109:8" pos:end="109:26">(<expr pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:17">bios_name</name> <operator pos:start="109:19" pos:end="109:20">==</operator> <name pos:start="109:22" pos:end="109:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:34"><block_content pos:start="111:9" pos:end="111:34">

        <expr_stmt pos:start="111:9" pos:end="111:34"><expr pos:start="111:9" pos:end="111:33"><name pos:start="111:9" pos:end="111:17">bios_name</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:61"><expr pos:start="113:5" pos:end="113:60"><call pos:start="113:5" pos:end="113:60"><name pos:start="113:5" pos:end="113:12">snprintf</name><argument_list pos:start="113:13" pos:end="113:60">(<argument pos:start="113:14" pos:end="113:16"><expr pos:start="113:14" pos:end="113:16"><name pos:start="113:14" pos:end="113:16">buf</name></expr></argument>, <argument pos:start="113:19" pos:end="113:29"><expr pos:start="113:19" pos:end="113:29"><sizeof pos:start="113:19" pos:end="113:29">sizeof<argument_list pos:start="113:25" pos:end="113:29">(<argument pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:32" pos:end="113:38"><expr pos:start="113:32" pos:end="113:38"><literal type="string" pos:start="113:32" pos:end="113:38">"%s/%s"</literal></expr></argument>, <argument pos:start="113:41" pos:end="113:48"><expr pos:start="113:41" pos:end="113:48"><name pos:start="113:41" pos:end="113:48">bios_dir</name></expr></argument>, <argument pos:start="113:51" pos:end="113:59"><expr pos:start="113:51" pos:end="113:59"><name pos:start="113:51" pos:end="113:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:75"><expr pos:start="115:5" pos:end="115:74"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:74"><name pos:start="115:11" pos:end="115:18">load_elf</name><argument_list pos:start="115:19" pos:end="115:74">(<argument pos:start="115:20" pos:end="115:22"><expr pos:start="115:20" pos:end="115:22"><name pos:start="115:20" pos:end="115:22">buf</name></expr></argument>, <argument pos:start="115:25" pos:end="115:55"><expr pos:start="115:25" pos:end="115:55"><name pos:start="115:25" pos:end="115:42"><name pos:start="115:25" pos:end="115:29">hwdef</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:42">slavio_base</name></name> <operator pos:start="115:44" pos:end="115:44">-</operator> <name pos:start="115:46" pos:end="115:55">PROM_VADDR</name></expr></argument>, <argument pos:start="115:58" pos:end="115:61"><expr pos:start="115:58" pos:end="115:61"><name pos:start="115:58" pos:end="115:61">NULL</name></expr></argument>, <argument pos:start="115:64" pos:end="115:67"><expr pos:start="115:64" pos:end="115:67"><name pos:start="115:64" pos:end="115:67">NULL</name></expr></argument>, <argument pos:start="115:70" pos:end="115:73"><expr pos:start="115:70" pos:end="115:73"><name pos:start="115:70" pos:end="115:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="119:74"><if pos:start="117:5" pos:end="119:74">if <condition pos:start="117:8" pos:end="117:39">(<expr pos:start="117:9" pos:end="117:38"><name pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:11">ret</name> <argument_list type="generic" pos:start="117:13" pos:end="117:24">&lt; <argument pos:start="117:15" pos:end="117:22"><expr pos:start="117:15" pos:end="117:22"><literal type="number" pos:start="117:15" pos:end="117:15">0</literal> <operator pos:start="117:17" pos:end="117:18">||</operator> <name pos:start="117:20" pos:end="117:22">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="117:26" pos:end="117:38">PROM_SIZE_MAX</name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:74"><block_content pos:start="119:9" pos:end="119:74">

        <expr_stmt pos:start="119:9" pos:end="119:74"><expr pos:start="119:9" pos:end="119:73"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:73"><name pos:start="119:15" pos:end="119:33">load_image_targphys</name><argument_list pos:start="119:34" pos:end="119:73">(<argument pos:start="119:35" pos:end="119:37"><expr pos:start="119:35" pos:end="119:37"><name pos:start="119:35" pos:end="119:37">buf</name></expr></argument>, <argument pos:start="119:40" pos:end="119:57"><expr pos:start="119:40" pos:end="119:57"><name pos:start="119:40" pos:end="119:57"><name pos:start="119:40" pos:end="119:44">hwdef</name><operator pos:start="119:45" pos:end="119:46">-&gt;</operator><name pos:start="119:47" pos:end="119:57">slavio_base</name></name></expr></argument>, <argument pos:start="119:60" pos:end="119:72"><expr pos:start="119:60" pos:end="119:72"><name pos:start="119:60" pos:end="119:72">PROM_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="129:5"><if pos:start="121:5" pos:end="129:5">if <condition pos:start="121:8" pos:end="121:39">(<expr pos:start="121:9" pos:end="121:38"><name pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:11">ret</name> <argument_list type="generic" pos:start="121:13" pos:end="121:24">&lt; <argument pos:start="121:15" pos:end="121:22"><expr pos:start="121:15" pos:end="121:22"><literal type="number" pos:start="121:15" pos:end="121:15">0</literal> <operator pos:start="121:17" pos:end="121:18">||</operator> <name pos:start="121:20" pos:end="121:22">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="121:26" pos:end="121:38">PROM_SIZE_MAX</name></expr>)</condition> <block pos:start="121:41" pos:end="129:5">{<block_content pos:start="123:9" pos:end="127:16">

        <expr_stmt pos:start="123:9" pos:end="125:21"><expr pos:start="123:9" pos:end="125:20"><call pos:start="123:9" pos:end="125:20"><name pos:start="123:9" pos:end="123:15">fprintf</name><argument_list pos:start="123:16" pos:end="125:20">(<argument pos:start="123:17" pos:end="123:22"><expr pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">stderr</name></expr></argument>, <argument pos:start="123:25" pos:end="123:58"><expr pos:start="123:25" pos:end="123:58"><literal type="string" pos:start="123:25" pos:end="123:58">"qemu: could not load prom '%s'\n"</literal></expr></argument>,

                <argument pos:start="125:17" pos:end="125:19"><expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:16"><expr pos:start="127:9" pos:end="127:15"><call pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:12">exit</name><argument_list pos:start="127:13" pos:end="127:15">(<argument pos:start="127:14" pos:end="127:14"><expr pos:start="127:14" pos:end="127:14"><literal type="number" pos:start="127:14" pos:end="127:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:24">/* set up devices */</comment>

    <expr_stmt pos:start="135:5" pos:end="137:61"><expr pos:start="135:5" pos:end="137:60"><name pos:start="135:5" pos:end="135:17">slavio_intctl</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="137:60"><name pos:start="135:21" pos:end="135:37">sun4c_intctl_init</name><argument_list pos:start="135:38" pos:end="137:60">(<argument pos:start="135:39" pos:end="135:56"><expr pos:start="135:39" pos:end="135:56"><name pos:start="135:39" pos:end="135:56"><name pos:start="135:39" pos:end="135:43">hwdef</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:56">intctl_base</name></name></expr></argument>,

                                      <argument pos:start="137:39" pos:end="137:49"><expr pos:start="137:39" pos:end="137:49"><operator pos:start="137:39" pos:end="137:39">&amp;</operator><name pos:start="137:40" pos:end="137:49">slavio_irq</name></expr></argument>, <argument pos:start="137:52" pos:end="137:59"><expr pos:start="137:52" pos:end="137:59"><name pos:start="137:52" pos:end="137:59">cpu_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="143:50"><expr pos:start="141:5" pos:end="143:49"><name pos:start="141:5" pos:end="141:9">iommu</name> <operator pos:start="141:11" pos:end="141:11">=</operator> <call pos:start="141:13" pos:end="143:49"><name pos:start="141:13" pos:end="141:22">iommu_init</name><argument_list pos:start="141:23" pos:end="143:49">(<argument pos:start="141:24" pos:end="141:40"><expr pos:start="141:24" pos:end="141:40"><name pos:start="141:24" pos:end="141:40"><name pos:start="141:24" pos:end="141:28">hwdef</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:40">iommu_base</name></name></expr></argument>, <argument pos:start="141:43" pos:end="141:62"><expr pos:start="141:43" pos:end="141:62"><name pos:start="141:43" pos:end="141:62"><name pos:start="141:43" pos:end="141:47">hwdef</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:62">iommu_version</name></name></expr></argument>,

                       <argument pos:start="143:24" pos:end="143:48"><expr pos:start="143:24" pos:end="143:48"><name pos:start="143:24" pos:end="143:48"><name pos:start="143:24" pos:end="143:33">slavio_irq</name><index pos:start="143:34" pos:end="143:48">[<expr pos:start="143:35" pos:end="143:47"><name pos:start="143:35" pos:end="143:47"><name pos:start="143:35" pos:end="143:39">hwdef</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:47">me_irq</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="149:62"><expr pos:start="147:5" pos:end="149:61"><name pos:start="147:5" pos:end="147:10">espdma</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <call pos:start="147:14" pos:end="149:61"><name pos:start="147:14" pos:end="147:29">sparc32_dma_init</name><argument_list pos:start="147:30" pos:end="149:61">(<argument pos:start="147:31" pos:end="147:45"><expr pos:start="147:31" pos:end="147:45"><name pos:start="147:31" pos:end="147:45"><name pos:start="147:31" pos:end="147:35">hwdef</name><operator pos:start="147:36" pos:end="147:37">-&gt;</operator><name pos:start="147:38" pos:end="147:45">dma_base</name></name></expr></argument>, <argument pos:start="147:48" pos:end="147:73"><expr pos:start="147:48" pos:end="147:73"><name pos:start="147:48" pos:end="147:73"><name pos:start="147:48" pos:end="147:57">slavio_irq</name><index pos:start="147:58" pos:end="147:73">[<expr pos:start="147:59" pos:end="147:72"><name pos:start="147:59" pos:end="147:72"><name pos:start="147:59" pos:end="147:63">hwdef</name><operator pos:start="147:64" pos:end="147:65">-&gt;</operator><name pos:start="147:66" pos:end="147:72">esp_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="149:31" pos:end="149:35"><expr pos:start="149:31" pos:end="149:35"><name pos:start="149:31" pos:end="149:35">iommu</name></expr></argument>, <argument pos:start="149:38" pos:end="149:48"><expr pos:start="149:38" pos:end="149:48"><operator pos:start="149:38" pos:end="149:38">&amp;</operator><name pos:start="149:39" pos:end="149:48">espdma_irq</name></expr></argument>, <argument pos:start="149:51" pos:end="149:60"><expr pos:start="149:51" pos:end="149:60"><operator pos:start="149:51" pos:end="149:51">&amp;</operator><name pos:start="149:52" pos:end="149:60">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="157:40"><expr pos:start="153:5" pos:end="157:39"><name pos:start="153:5" pos:end="153:9">ledma</name> <operator pos:start="153:11" pos:end="153:11">=</operator> <call pos:start="153:13" pos:end="157:39"><name pos:start="153:13" pos:end="153:28">sparc32_dma_init</name><argument_list pos:start="153:29" pos:end="157:39">(<argument pos:start="153:30" pos:end="153:52"><expr pos:start="153:30" pos:end="153:52"><name pos:start="153:30" pos:end="153:44"><name pos:start="153:30" pos:end="153:34">hwdef</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:44">dma_base</name></name> <operator pos:start="153:46" pos:end="153:46">+</operator> <literal type="number" pos:start="153:48" pos:end="153:52">16ULL</literal></expr></argument>,

                             <argument pos:start="155:30" pos:end="155:54"><expr pos:start="155:30" pos:end="155:54"><name pos:start="155:30" pos:end="155:54"><name pos:start="155:30" pos:end="155:39">slavio_irq</name><index pos:start="155:40" pos:end="155:54">[<expr pos:start="155:41" pos:end="155:53"><name pos:start="155:41" pos:end="155:53"><name pos:start="155:41" pos:end="155:45">hwdef</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:53">le_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="155:57" pos:end="155:61"><expr pos:start="155:57" pos:end="155:61"><name pos:start="155:57" pos:end="155:61">iommu</name></expr></argument>, <argument pos:start="155:64" pos:end="155:73"><expr pos:start="155:64" pos:end="155:73"><operator pos:start="155:64" pos:end="155:64">&amp;</operator><name pos:start="155:65" pos:end="155:73">ledma_irq</name></expr></argument>,

                             <argument pos:start="157:30" pos:end="157:38"><expr pos:start="157:30" pos:end="157:38"><operator pos:start="157:30" pos:end="157:30">&amp;</operator><name pos:start="157:31" pos:end="157:38">le_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:50">(<expr pos:start="161:9" pos:end="161:49"><name pos:start="161:9" pos:end="161:21">graphic_depth</name> <operator pos:start="161:23" pos:end="161:24">!=</operator> <literal type="number" pos:start="161:26" pos:end="161:26">8</literal> <operator pos:start="161:28" pos:end="161:29">&amp;&amp;</operator> <name pos:start="161:31" pos:end="161:43">graphic_depth</name> <operator pos:start="161:45" pos:end="161:46">!=</operator> <literal type="number" pos:start="161:48" pos:end="161:49">24</literal></expr>)</condition> <block pos:start="161:52" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:17">

        <expr_stmt pos:start="163:9" pos:end="163:72"><expr pos:start="163:9" pos:end="163:71"><call pos:start="163:9" pos:end="163:71"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:71">(<argument pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">stderr</name></expr></argument>, <argument pos:start="163:25" pos:end="163:55"><expr pos:start="163:25" pos:end="163:55"><literal type="string" pos:start="163:25" pos:end="163:55">"qemu: Unsupported depth: %d\n"</literal></expr></argument>, <argument pos:start="163:58" pos:end="163:70"><expr pos:start="163:58" pos:end="163:70"><name pos:start="163:58" pos:end="163:70">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:17"><expr pos:start="165:9" pos:end="165:16"><call pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:12">exit</name> <argument_list pos:start="165:14" pos:end="165:16">(<argument pos:start="165:15" pos:end="165:15"><expr pos:start="165:15" pos:end="165:15"><literal type="number" pos:start="165:15" pos:end="165:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:50"><expr pos:start="169:5" pos:end="169:49"><name pos:start="169:5" pos:end="169:14">tcx_offset</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <call pos:start="169:18" pos:end="169:49"><name pos:start="169:18" pos:end="169:31">qemu_ram_alloc</name><argument_list pos:start="169:32" pos:end="169:49">(<argument pos:start="169:33" pos:end="169:48"><expr pos:start="169:33" pos:end="169:48"><name pos:start="169:33" pos:end="169:48"><name pos:start="169:33" pos:end="169:37">hwdef</name><operator pos:start="169:38" pos:end="169:39">-&gt;</operator><name pos:start="169:40" pos:end="169:48">vram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="173:77"><expr pos:start="171:5" pos:end="173:76"><call pos:start="171:5" pos:end="173:76"><name pos:start="171:5" pos:end="171:12">tcx_init</name><argument_list pos:start="171:13" pos:end="173:76">(<argument pos:start="171:14" pos:end="171:15"><expr pos:start="171:14" pos:end="171:15"><name pos:start="171:14" pos:end="171:15">ds</name></expr></argument>, <argument pos:start="171:18" pos:end="171:32"><expr pos:start="171:18" pos:end="171:32"><name pos:start="171:18" pos:end="171:32"><name pos:start="171:18" pos:end="171:22">hwdef</name><operator pos:start="171:23" pos:end="171:24">-&gt;</operator><name pos:start="171:25" pos:end="171:32">tcx_base</name></name></expr></argument>, <argument pos:start="171:35" pos:end="171:60"><expr pos:start="171:35" pos:end="171:60"><name pos:start="171:35" pos:end="171:47">phys_ram_base</name> <operator pos:start="171:49" pos:end="171:49">+</operator> <name pos:start="171:51" pos:end="171:60">tcx_offset</name></expr></argument>, <argument pos:start="171:63" pos:end="171:72"><expr pos:start="171:63" pos:end="171:72"><name pos:start="171:63" pos:end="171:72">tcx_offset</name></expr></argument>,

             <argument pos:start="173:14" pos:end="173:29"><expr pos:start="173:14" pos:end="173:29"><name pos:start="173:14" pos:end="173:29"><name pos:start="173:14" pos:end="173:18">hwdef</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:29">vram_size</name></name></expr></argument>, <argument pos:start="173:32" pos:end="173:44"><expr pos:start="173:32" pos:end="173:44"><name pos:start="173:32" pos:end="173:44">graphic_width</name></expr></argument>, <argument pos:start="173:47" pos:end="173:60"><expr pos:start="173:47" pos:end="173:60"><name pos:start="173:47" pos:end="173:60">graphic_height</name></expr></argument>, <argument pos:start="173:63" pos:end="173:75"><expr pos:start="173:63" pos:end="173:75"><name pos:start="173:63" pos:end="173:75">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="177:5" pos:end="179:36"><if pos:start="177:5" pos:end="179:36">if <condition pos:start="177:8" pos:end="177:34">(<expr pos:start="177:9" pos:end="177:33"><name pos:start="177:9" pos:end="177:19"><name pos:start="177:9" pos:end="177:16">nd_table</name><index pos:start="177:17" pos:end="177:19">[<expr pos:start="177:18" pos:end="177:18"><literal type="number" pos:start="177:18" pos:end="177:18">0</literal></expr>]</index></name><operator pos:start="177:20" pos:end="177:20">.</operator><name pos:start="177:21" pos:end="177:25">model</name> <operator pos:start="177:27" pos:end="177:28">==</operator> <name pos:start="177:30" pos:end="177:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="179:36"><block_content pos:start="179:9" pos:end="179:36">

        <expr_stmt pos:start="179:9" pos:end="179:36"><expr pos:start="179:9" pos:end="179:35"><name pos:start="179:9" pos:end="179:19"><name pos:start="179:9" pos:end="179:16">nd_table</name><index pos:start="179:17" pos:end="179:19">[<expr pos:start="179:18" pos:end="179:18"><literal type="number" pos:start="179:18" pos:end="179:18">0</literal></expr>]</index></name><operator pos:start="179:20" pos:end="179:20">.</operator><name pos:start="179:21" pos:end="179:25">model</name> <operator pos:start="179:27" pos:end="179:27">=</operator> <literal type="string" pos:start="179:29" pos:end="179:35">"lance"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="181:5" pos:end="197:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:48">(<expr pos:start="181:9" pos:end="181:47"><call pos:start="181:9" pos:end="181:42"><name pos:start="181:9" pos:end="181:14">strcmp</name><argument_list pos:start="181:15" pos:end="181:42">(<argument pos:start="181:16" pos:end="181:32"><expr pos:start="181:16" pos:end="181:32"><name pos:start="181:16" pos:end="181:26"><name pos:start="181:16" pos:end="181:23">nd_table</name><index pos:start="181:24" pos:end="181:26">[<expr pos:start="181:25" pos:end="181:25"><literal type="number" pos:start="181:25" pos:end="181:25">0</literal></expr>]</index></name><operator pos:start="181:27" pos:end="181:27">.</operator><name pos:start="181:28" pos:end="181:32">model</name></expr></argument>, <argument pos:start="181:35" pos:end="181:41"><expr pos:start="181:35" pos:end="181:41"><literal type="string" pos:start="181:35" pos:end="181:41">"lance"</literal></expr></argument>)</argument_list></call> <operator pos:start="181:44" pos:end="181:45">==</operator> <literal type="number" pos:start="181:47" pos:end="181:47">0</literal></expr>)</condition> <block pos:start="181:50" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:78">

        <expr_stmt pos:start="183:9" pos:end="183:78"><expr pos:start="183:9" pos:end="183:77"><call pos:start="183:9" pos:end="183:77"><name pos:start="183:9" pos:end="183:18">lance_init</name><argument_list pos:start="183:19" pos:end="183:77">(<argument pos:start="183:20" pos:end="183:31"><expr pos:start="183:20" pos:end="183:31"><operator pos:start="183:20" pos:end="183:20">&amp;</operator><name pos:start="183:21" pos:end="183:31"><name pos:start="183:21" pos:end="183:28">nd_table</name><index pos:start="183:29" pos:end="183:31">[<expr pos:start="183:30" pos:end="183:30"><literal type="number" pos:start="183:30" pos:end="183:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:34" pos:end="183:47"><expr pos:start="183:34" pos:end="183:47"><name pos:start="183:34" pos:end="183:47"><name pos:start="183:34" pos:end="183:38">hwdef</name><operator pos:start="183:39" pos:end="183:40">-&gt;</operator><name pos:start="183:41" pos:end="183:47">le_base</name></name></expr></argument>, <argument pos:start="183:50" pos:end="183:54"><expr pos:start="183:50" pos:end="183:54"><name pos:start="183:50" pos:end="183:54">ledma</name></expr></argument>, <argument pos:start="183:57" pos:end="183:66"><expr pos:start="183:57" pos:end="183:66"><operator pos:start="183:57" pos:end="183:57">*</operator><name pos:start="183:58" pos:end="183:66">ledma_irq</name></expr></argument>, <argument pos:start="183:69" pos:end="183:76"><expr pos:start="183:69" pos:end="183:76"><name pos:start="183:69" pos:end="183:76">le_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="185:7" pos:end="191:5">else if <condition pos:start="185:15" pos:end="185:51">(<expr pos:start="185:16" pos:end="185:50"><call pos:start="185:16" pos:end="185:45"><name pos:start="185:16" pos:end="185:21">strcmp</name><argument_list pos:start="185:22" pos:end="185:45">(<argument pos:start="185:23" pos:end="185:39"><expr pos:start="185:23" pos:end="185:39"><name pos:start="185:23" pos:end="185:33"><name pos:start="185:23" pos:end="185:30">nd_table</name><index pos:start="185:31" pos:end="185:33">[<expr pos:start="185:32" pos:end="185:32"><literal type="number" pos:start="185:32" pos:end="185:32">0</literal></expr>]</index></name><operator pos:start="185:34" pos:end="185:34">.</operator><name pos:start="185:35" pos:end="185:39">model</name></expr></argument>, <argument pos:start="185:42" pos:end="185:44"><expr pos:start="185:42" pos:end="185:44"><literal type="string" pos:start="185:42" pos:end="185:44">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="185:47" pos:end="185:48">==</operator> <literal type="number" pos:start="185:50" pos:end="185:50">0</literal></expr>)</condition> <block pos:start="185:53" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:17">

        <expr_stmt pos:start="187:9" pos:end="187:57"><expr pos:start="187:9" pos:end="187:56"><call pos:start="187:9" pos:end="187:56"><name pos:start="187:9" pos:end="187:15">fprintf</name><argument_list pos:start="187:16" pos:end="187:56">(<argument pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">stderr</name></expr></argument>, <argument pos:start="187:25" pos:end="187:55"><expr pos:start="187:25" pos:end="187:55"><literal type="string" pos:start="187:25" pos:end="187:55">"qemu: Supported NICs: lance\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:17"><expr pos:start="189:9" pos:end="189:16"><call pos:start="189:9" pos:end="189:16"><name pos:start="189:9" pos:end="189:12">exit</name> <argument_list pos:start="189:14" pos:end="189:16">(<argument pos:start="189:15" pos:end="189:15"><expr pos:start="189:15" pos:end="189:15"><literal type="number" pos:start="189:15" pos:end="189:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="191:7" pos:end="197:5">else <block pos:start="191:12" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:17">

        <expr_stmt pos:start="193:9" pos:end="193:74"><expr pos:start="193:9" pos:end="193:73"><call pos:start="193:9" pos:end="193:73"><name pos:start="193:9" pos:end="193:15">fprintf</name><argument_list pos:start="193:16" pos:end="193:73">(<argument pos:start="193:17" pos:end="193:22"><expr pos:start="193:17" pos:end="193:22"><name pos:start="193:17" pos:end="193:22">stderr</name></expr></argument>, <argument pos:start="193:25" pos:end="193:53"><expr pos:start="193:25" pos:end="193:53"><literal type="string" pos:start="193:25" pos:end="193:53">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="193:56" pos:end="193:72"><expr pos:start="193:56" pos:end="193:72"><name pos:start="193:56" pos:end="193:66"><name pos:start="193:56" pos:end="193:63">nd_table</name><index pos:start="193:64" pos:end="193:66">[<expr pos:start="193:65" pos:end="193:65"><literal type="number" pos:start="193:65" pos:end="193:65">0</literal></expr>]</index></name><operator pos:start="193:67" pos:end="193:67">.</operator><name pos:start="193:68" pos:end="193:72">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:17"><expr pos:start="195:9" pos:end="195:16"><call pos:start="195:9" pos:end="195:16"><name pos:start="195:9" pos:end="195:12">exit</name> <argument_list pos:start="195:14" pos:end="195:16">(<argument pos:start="195:15" pos:end="195:15"><expr pos:start="195:15" pos:end="195:15"><literal type="number" pos:start="195:15" pos:end="195:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="203:46"><expr pos:start="201:5" pos:end="203:45"><name pos:start="201:5" pos:end="201:9">nvram</name> <operator pos:start="201:11" pos:end="201:11">=</operator> <call pos:start="201:13" pos:end="203:45"><name pos:start="201:13" pos:end="201:23">m48t59_init</name><argument_list pos:start="201:24" pos:end="203:45">(<argument pos:start="201:25" pos:end="201:37"><expr pos:start="201:25" pos:end="201:37"><name pos:start="201:25" pos:end="201:37"><name pos:start="201:25" pos:end="201:34">slavio_irq</name><index pos:start="201:35" pos:end="201:37">[<expr pos:start="201:36" pos:end="201:36"><literal type="number" pos:start="201:36" pos:end="201:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="201:40" pos:end="201:56"><expr pos:start="201:40" pos:end="201:56"><name pos:start="201:40" pos:end="201:56"><name pos:start="201:40" pos:end="201:44">hwdef</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:56">nvram_base</name></name></expr></argument>, <argument pos:start="201:59" pos:end="201:59"><expr pos:start="201:59" pos:end="201:59"><literal type="number" pos:start="201:59" pos:end="201:59">0</literal></expr></argument>,

                        <argument pos:start="203:25" pos:end="203:41"><expr pos:start="203:25" pos:end="203:41"><name pos:start="203:25" pos:end="203:41"><name pos:start="203:25" pos:end="203:29">hwdef</name><operator pos:start="203:30" pos:end="203:31">-&gt;</operator><name pos:start="203:32" pos:end="203:41">nvram_size</name></name></expr></argument>, <argument pos:start="203:44" pos:end="203:44"><expr pos:start="203:44" pos:end="203:44"><literal type="number" pos:start="203:44" pos:end="203:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="209:56"><expr pos:start="207:5" pos:end="209:55"><call pos:start="207:5" pos:end="209:55"><name pos:start="207:5" pos:end="207:29">slavio_serial_ms_kbd_init</name><argument_list pos:start="207:30" pos:end="209:55">(<argument pos:start="207:31" pos:end="207:47"><expr pos:start="207:31" pos:end="207:47"><name pos:start="207:31" pos:end="207:47"><name pos:start="207:31" pos:end="207:35">hwdef</name><operator pos:start="207:36" pos:end="207:37">-&gt;</operator><name pos:start="207:38" pos:end="207:47">ms_kb_base</name></name></expr></argument>, <argument pos:start="207:50" pos:end="207:77"><expr pos:start="207:50" pos:end="207:77"><name pos:start="207:50" pos:end="207:77"><name pos:start="207:50" pos:end="207:59">slavio_irq</name><index pos:start="207:60" pos:end="207:77">[<expr pos:start="207:61" pos:end="207:76"><name pos:start="207:61" pos:end="207:76"><name pos:start="207:61" pos:end="207:65">hwdef</name><operator pos:start="207:66" pos:end="207:67">-&gt;</operator><name pos:start="207:68" pos:end="207:76">ms_kb_irq</name></name></expr>]</index></name></expr></argument>,

                              <argument pos:start="209:31" pos:end="209:39"><expr pos:start="209:31" pos:end="209:39"><name pos:start="209:31" pos:end="209:39">nographic</name></expr></argument>, <argument pos:start="209:42" pos:end="209:51"><expr pos:start="209:42" pos:end="209:51"><name pos:start="209:42" pos:end="209:51">ESCC_CLOCK</name></expr></argument>, <argument pos:start="209:54" pos:end="209:54"><expr pos:start="209:54" pos:end="209:54"><literal type="number" pos:start="209:54" pos:end="209:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="211:5" pos:end="211:72">// Slavio TTYA (base+4, Linux ttyS0) is the first Qemu serial device</comment>

    <comment type="line" pos:start="213:5" pos:end="213:73">// Slavio TTYB (base+0, Linux ttyS1) is the second Qemu serial device</comment>

    <expr_stmt pos:start="215:5" pos:end="217:44"><expr pos:start="215:5" pos:end="217:43"><call pos:start="215:5" pos:end="217:43"><name pos:start="215:5" pos:end="215:13">escc_init</name><argument_list pos:start="215:14" pos:end="217:43">(<argument pos:start="215:15" pos:end="215:32"><expr pos:start="215:15" pos:end="215:32"><name pos:start="215:15" pos:end="215:32"><name pos:start="215:15" pos:end="215:19">hwdef</name><operator pos:start="215:20" pos:end="215:21">-&gt;</operator><name pos:start="215:22" pos:end="215:32">serial_base</name></name></expr></argument>, <argument pos:start="215:35" pos:end="215:60"><expr pos:start="215:35" pos:end="215:60"><name pos:start="215:35" pos:end="215:60"><name pos:start="215:35" pos:end="215:44">slavio_irq</name><index pos:start="215:45" pos:end="215:60">[<expr pos:start="215:46" pos:end="215:59"><name pos:start="215:46" pos:end="215:59"><name pos:start="215:46" pos:end="215:50">hwdef</name><operator pos:start="215:51" pos:end="215:52">-&gt;</operator><name pos:start="215:53" pos:end="215:59">ser_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="215:63" pos:end="215:75"><expr pos:start="215:63" pos:end="215:75"><name pos:start="215:63" pos:end="215:75"><name pos:start="215:63" pos:end="215:72">serial_hds</name><index pos:start="215:73" pos:end="215:75">[<expr pos:start="215:74" pos:end="215:74"><literal type="number" pos:start="215:74" pos:end="215:74">0</literal></expr>]</index></name></expr></argument>,

              <argument pos:start="217:15" pos:end="217:27"><expr pos:start="217:15" pos:end="217:27"><name pos:start="217:15" pos:end="217:27"><name pos:start="217:15" pos:end="217:24">serial_hds</name><index pos:start="217:25" pos:end="217:27">[<expr pos:start="217:26" pos:end="217:26"><literal type="number" pos:start="217:26" pos:end="217:26">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="217:30" pos:end="217:39"><expr pos:start="217:30" pos:end="217:39"><name pos:start="217:30" pos:end="217:39">ESCC_CLOCK</name></expr></argument>, <argument pos:start="217:42" pos:end="217:42"><expr pos:start="217:42" pos:end="217:42"><literal type="number" pos:start="217:42" pos:end="217:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="223:77"><expr pos:start="221:5" pos:end="223:76"><name pos:start="221:5" pos:end="221:15">slavio_misc</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="223:76"><name pos:start="221:19" pos:end="221:34">slavio_misc_init</name><argument_list pos:start="221:35" pos:end="223:76">(<argument pos:start="221:36" pos:end="221:36"><expr pos:start="221:36" pos:end="221:36"><literal type="number" pos:start="221:36" pos:end="221:36">0</literal></expr></argument>, <argument pos:start="221:39" pos:end="221:39"><expr pos:start="221:39" pos:end="221:39"><literal type="number" pos:start="221:39" pos:end="221:39">0</literal></expr></argument>, <argument pos:start="221:42" pos:end="221:57"><expr pos:start="221:42" pos:end="221:57"><name pos:start="221:42" pos:end="221:57"><name pos:start="221:42" pos:end="221:46">hwdef</name><operator pos:start="221:47" pos:end="221:48">-&gt;</operator><name pos:start="221:49" pos:end="221:57">aux1_base</name></name></expr></argument>, <argument pos:start="221:60" pos:end="221:60"><expr pos:start="221:60" pos:end="221:60"><literal type="number" pos:start="221:60" pos:end="221:60">0</literal></expr></argument>,

                                   <argument pos:start="223:36" pos:end="223:60"><expr pos:start="223:36" pos:end="223:60"><name pos:start="223:36" pos:end="223:60"><name pos:start="223:36" pos:end="223:45">slavio_irq</name><index pos:start="223:46" pos:end="223:60">[<expr pos:start="223:47" pos:end="223:59"><name pos:start="223:47" pos:end="223:59"><name pos:start="223:47" pos:end="223:51">hwdef</name><operator pos:start="223:52" pos:end="223:53">-&gt;</operator><name pos:start="223:54" pos:end="223:59">me_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="223:63" pos:end="223:66"><expr pos:start="223:63" pos:end="223:66"><name pos:start="223:63" pos:end="223:66">NULL</name></expr></argument>, <argument pos:start="223:69" pos:end="223:75"><expr pos:start="223:69" pos:end="223:75"><operator pos:start="223:69" pos:end="223:69">&amp;</operator><name pos:start="223:70" pos:end="223:75">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="245:5"><if pos:start="227:5" pos:end="245:5">if <condition pos:start="227:8" pos:end="227:49">(<expr pos:start="227:9" pos:end="227:48"><name pos:start="227:9" pos:end="227:22"><name pos:start="227:9" pos:end="227:13">hwdef</name><operator pos:start="227:14" pos:end="227:15">-&gt;</operator><name pos:start="227:16" pos:end="227:22">fd_base</name></name> <operator pos:start="227:24" pos:end="227:25">!=</operator> <operator pos:start="227:27" pos:end="227:27">(</operator><name pos:start="227:28" pos:end="227:45">target_phys_addr_t</name><operator pos:start="227:46" pos:end="227:46">)</operator><operator pos:start="227:47" pos:end="227:47">-</operator><literal type="number" pos:start="227:48" pos:end="227:48">1</literal></expr>)</condition> <block pos:start="227:51" pos:end="245:5">{<block_content pos:start="231:9" pos:end="243:34">

        <comment type="block" pos:start="229:9" pos:end="229:47">/* there is zero or one floppy drive */</comment>

        <expr_stmt pos:start="231:9" pos:end="231:34"><expr pos:start="231:9" pos:end="231:33"><call pos:start="231:9" pos:end="231:33"><name pos:start="231:9" pos:end="231:14">memset</name><argument_list pos:start="231:15" pos:end="231:33">(<argument pos:start="231:16" pos:end="231:17"><expr pos:start="231:16" pos:end="231:17"><name pos:start="231:16" pos:end="231:17">fd</name></expr></argument>, <argument pos:start="231:20" pos:end="231:20"><expr pos:start="231:20" pos:end="231:20"><literal type="number" pos:start="231:20" pos:end="231:20">0</literal></expr></argument>, <argument pos:start="231:23" pos:end="231:32"><expr pos:start="231:23" pos:end="231:32"><sizeof pos:start="231:23" pos:end="231:32">sizeof<argument_list pos:start="231:29" pos:end="231:32">(<argument pos:start="231:30" pos:end="231:31"><expr pos:start="231:30" pos:end="231:31"><name pos:start="231:30" pos:end="231:31">fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:55"><expr pos:start="233:9" pos:end="233:54"><name pos:start="233:9" pos:end="233:19">drive_index</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <call pos:start="233:23" pos:end="233:54"><name pos:start="233:23" pos:end="233:37">drive_get_index</name><argument_list pos:start="233:38" pos:end="233:54">(<argument pos:start="233:39" pos:end="233:47"><expr pos:start="233:39" pos:end="233:47"><name pos:start="233:39" pos:end="233:47">IF_FLOPPY</name></expr></argument>, <argument pos:start="233:50" pos:end="233:50"><expr pos:start="233:50" pos:end="233:50"><literal type="number" pos:start="233:50" pos:end="233:50">0</literal></expr></argument>, <argument pos:start="233:53" pos:end="233:53"><expr pos:start="233:53" pos:end="233:53"><literal type="number" pos:start="233:53" pos:end="233:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="237:51"><if pos:start="235:9" pos:end="237:51">if <condition pos:start="235:12" pos:end="235:30">(<expr pos:start="235:13" pos:end="235:29"><name pos:start="235:13" pos:end="235:23">drive_index</name> <operator pos:start="235:25" pos:end="235:26">!=</operator> <operator pos:start="235:28" pos:end="235:28">-</operator><literal type="number" pos:start="235:29" pos:end="235:29">1</literal></expr>)</condition><block type="pseudo" pos:start="237:13" pos:end="237:51"><block_content pos:start="237:13" pos:end="237:51">

            <expr_stmt pos:start="237:13" pos:end="237:51"><expr pos:start="237:13" pos:end="237:50"><name pos:start="237:13" pos:end="237:17"><name pos:start="237:13" pos:end="237:14">fd</name><index pos:start="237:15" pos:end="237:17">[<expr pos:start="237:16" pos:end="237:16"><literal type="number" pos:start="237:16" pos:end="237:16">0</literal></expr>]</index></name> <operator pos:start="237:19" pos:end="237:19">=</operator> <name pos:start="237:21" pos:end="237:45"><name pos:start="237:21" pos:end="237:32">drives_table</name><index pos:start="237:33" pos:end="237:45">[<expr pos:start="237:34" pos:end="237:44"><name pos:start="237:34" pos:end="237:44">drive_index</name></expr>]</index></name><operator pos:start="237:46" pos:end="237:46">.</operator><name pos:start="237:47" pos:end="237:50">bdrv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="241:9" pos:end="243:34"><expr pos:start="241:9" pos:end="243:33"><call pos:start="241:9" pos:end="243:33"><name pos:start="241:9" pos:end="241:25">sun4m_fdctrl_init</name><argument_list pos:start="241:26" pos:end="243:33">(<argument pos:start="241:27" pos:end="241:51"><expr pos:start="241:27" pos:end="241:51"><name pos:start="241:27" pos:end="241:51"><name pos:start="241:27" pos:end="241:36">slavio_irq</name><index pos:start="241:37" pos:end="241:51">[<expr pos:start="241:38" pos:end="241:50"><name pos:start="241:38" pos:end="241:50"><name pos:start="241:38" pos:end="241:42">hwdef</name><operator pos:start="241:43" pos:end="241:44">-&gt;</operator><name pos:start="241:45" pos:end="241:50">fd_irq</name></name></expr>]</index></name></expr></argument>, <argument pos:start="241:54" pos:end="241:67"><expr pos:start="241:54" pos:end="241:67"><name pos:start="241:54" pos:end="241:67"><name pos:start="241:54" pos:end="241:58">hwdef</name><operator pos:start="241:59" pos:end="241:60">-&gt;</operator><name pos:start="241:61" pos:end="241:67">fd_base</name></name></expr></argument>, <argument pos:start="241:70" pos:end="241:71"><expr pos:start="241:70" pos:end="241:71"><name pos:start="241:70" pos:end="241:71">fd</name></expr></argument>,

                          <argument pos:start="243:27" pos:end="243:32"><expr pos:start="243:27" pos:end="243:32"><name pos:start="243:27" pos:end="243:32">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="249:5" pos:end="255:5"><if pos:start="249:5" pos:end="255:5">if <condition pos:start="249:8" pos:end="249:39">(<expr pos:start="249:9" pos:end="249:38"><call pos:start="249:9" pos:end="249:34"><name pos:start="249:9" pos:end="249:25">drive_get_max_bus</name><argument_list pos:start="249:26" pos:end="249:34">(<argument pos:start="249:27" pos:end="249:33"><expr pos:start="249:27" pos:end="249:33"><name pos:start="249:27" pos:end="249:33">IF_SCSI</name></expr></argument>)</argument_list></call> <operator pos:start="249:36" pos:end="249:36">&gt;</operator> <literal type="number" pos:start="249:38" pos:end="249:38">0</literal></expr>)</condition> <block pos:start="249:41" pos:end="255:5">{<block_content pos:start="251:9" pos:end="253:16">

        <expr_stmt pos:start="251:9" pos:end="251:53"><expr pos:start="251:9" pos:end="251:52"><call pos:start="251:9" pos:end="251:52"><name pos:start="251:9" pos:end="251:15">fprintf</name><argument_list pos:start="251:16" pos:end="251:52">(<argument pos:start="251:17" pos:end="251:22"><expr pos:start="251:17" pos:end="251:22"><name pos:start="251:17" pos:end="251:22">stderr</name></expr></argument>, <argument pos:start="251:25" pos:end="251:51"><expr pos:start="251:25" pos:end="251:51"><literal type="string" pos:start="251:25" pos:end="251:51">"qemu: too many SCSI bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:16"><expr pos:start="253:9" pos:end="253:15"><call pos:start="253:9" pos:end="253:15"><name pos:start="253:9" pos:end="253:12">exit</name><argument_list pos:start="253:13" pos:end="253:15">(<argument pos:start="253:14" pos:end="253:14"><expr pos:start="253:14" pos:end="253:14"><literal type="number" pos:start="253:14" pos:end="253:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="259:5" pos:end="263:56"><expr pos:start="259:5" pos:end="263:55"><name pos:start="259:5" pos:end="259:12">main_esp</name> <operator pos:start="259:14" pos:end="259:14">=</operator> <call pos:start="259:16" pos:end="263:55"><name pos:start="259:16" pos:end="259:23">esp_init</name><argument_list pos:start="259:24" pos:end="263:55">(<argument pos:start="259:25" pos:end="259:39"><expr pos:start="259:25" pos:end="259:39"><name pos:start="259:25" pos:end="259:39"><name pos:start="259:25" pos:end="259:29">hwdef</name><operator pos:start="259:30" pos:end="259:31">-&gt;</operator><name pos:start="259:32" pos:end="259:39">esp_base</name></name></expr></argument>, <argument pos:start="259:42" pos:end="259:42"><expr pos:start="259:42" pos:end="259:42"><literal type="number" pos:start="259:42" pos:end="259:42">2</literal></expr></argument>,

                        <argument pos:start="261:25" pos:end="261:42"><expr pos:start="261:25" pos:end="261:42"><name pos:start="261:25" pos:end="261:42">espdma_memory_read</name></expr></argument>, <argument pos:start="261:45" pos:end="261:63"><expr pos:start="261:45" pos:end="261:63"><name pos:start="261:45" pos:end="261:63">espdma_memory_write</name></expr></argument>,

                        <argument pos:start="263:25" pos:end="263:30"><expr pos:start="263:25" pos:end="263:30"><name pos:start="263:25" pos:end="263:30">espdma</name></expr></argument>, <argument pos:start="263:33" pos:end="263:43"><expr pos:start="263:33" pos:end="263:43"><operator pos:start="263:33" pos:end="263:33">*</operator><name pos:start="263:34" pos:end="263:43">espdma_irq</name></expr></argument>, <argument pos:start="263:46" pos:end="263:54"><expr pos:start="263:46" pos:end="263:54"><name pos:start="263:46" pos:end="263:54">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="267:5" pos:end="277:5">for <control pos:start="267:9" pos:end="267:38">(<init pos:start="267:10" pos:end="267:15"><expr pos:start="267:10" pos:end="267:14"><name pos:start="267:10" pos:end="267:10">i</name> <operator pos:start="267:12" pos:end="267:12">=</operator> <literal type="number" pos:start="267:14" pos:end="267:14">0</literal></expr>;</init> <condition pos:start="267:17" pos:end="267:33"><expr pos:start="267:17" pos:end="267:32"><name pos:start="267:17" pos:end="267:17">i</name> <operator pos:start="267:19" pos:end="267:19">&lt;</operator> <name pos:start="267:21" pos:end="267:32">ESP_MAX_DEVS</name></expr>;</condition> <incr pos:start="267:35" pos:end="267:37"><expr pos:start="267:35" pos:end="267:37"><name pos:start="267:35" pos:end="267:35">i</name><operator pos:start="267:36" pos:end="267:37">++</operator></expr></incr>)</control> <block pos:start="267:40" pos:end="277:5">{<block_content pos:start="269:9" pos:end="275:69">

        <expr_stmt pos:start="269:9" pos:end="269:53"><expr pos:start="269:9" pos:end="269:52"><name pos:start="269:9" pos:end="269:19">drive_index</name> <operator pos:start="269:21" pos:end="269:21">=</operator> <call pos:start="269:23" pos:end="269:52"><name pos:start="269:23" pos:end="269:37">drive_get_index</name><argument_list pos:start="269:38" pos:end="269:52">(<argument pos:start="269:39" pos:end="269:45"><expr pos:start="269:39" pos:end="269:45"><name pos:start="269:39" pos:end="269:45">IF_SCSI</name></expr></argument>, <argument pos:start="269:48" pos:end="269:48"><expr pos:start="269:48" pos:end="269:48"><literal type="number" pos:start="269:48" pos:end="269:48">0</literal></expr></argument>, <argument pos:start="269:51" pos:end="269:51"><expr pos:start="269:51" pos:end="269:51"><name pos:start="269:51" pos:end="269:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="271:9" pos:end="273:21"><if pos:start="271:9" pos:end="273:21">if <condition pos:start="271:12" pos:end="271:30">(<expr pos:start="271:13" pos:end="271:29"><name pos:start="271:13" pos:end="271:23">drive_index</name> <operator pos:start="271:25" pos:end="271:26">==</operator> <operator pos:start="271:28" pos:end="271:28">-</operator><literal type="number" pos:start="271:29" pos:end="271:29">1</literal></expr>)</condition><block type="pseudo" pos:start="273:13" pos:end="273:21"><block_content pos:start="273:13" pos:end="273:21">

            <continue pos:start="273:13" pos:end="273:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:69"><expr pos:start="275:9" pos:end="275:68"><call pos:start="275:9" pos:end="275:68"><name pos:start="275:9" pos:end="275:23">esp_scsi_attach</name><argument_list pos:start="275:24" pos:end="275:68">(<argument pos:start="275:25" pos:end="275:32"><expr pos:start="275:25" pos:end="275:32"><name pos:start="275:25" pos:end="275:32">main_esp</name></expr></argument>, <argument pos:start="275:35" pos:end="275:64"><expr pos:start="275:35" pos:end="275:64"><name pos:start="275:35" pos:end="275:59"><name pos:start="275:35" pos:end="275:46">drives_table</name><index pos:start="275:47" pos:end="275:59">[<expr pos:start="275:48" pos:end="275:58"><name pos:start="275:48" pos:end="275:58">drive_index</name></expr>]</index></name><operator pos:start="275:60" pos:end="275:60">.</operator><name pos:start="275:61" pos:end="275:64">bdrv</name></expr></argument>, <argument pos:start="275:67" pos:end="275:67"><expr pos:start="275:67" pos:end="275:67"><name pos:start="275:67" pos:end="275:67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="281:5" pos:end="283:46"><expr pos:start="281:5" pos:end="283:45"><name pos:start="281:5" pos:end="281:15">kernel_size</name> <operator pos:start="281:17" pos:end="281:17">=</operator> <call pos:start="281:19" pos:end="283:45"><name pos:start="281:19" pos:end="281:35">sun4m_load_kernel</name><argument_list pos:start="281:36" pos:end="283:45">(<argument pos:start="281:37" pos:end="281:51"><expr pos:start="281:37" pos:end="281:51"><name pos:start="281:37" pos:end="281:51">kernel_filename</name></expr></argument>, <argument pos:start="281:54" pos:end="281:68"><expr pos:start="281:54" pos:end="281:68"><name pos:start="281:54" pos:end="281:68">initrd_filename</name></expr></argument>,

                                    <argument pos:start="283:37" pos:end="283:44"><expr pos:start="283:37" pos:end="283:44"><name pos:start="283:37" pos:end="283:44">RAM_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="287:5" pos:end="293:24"><expr pos:start="287:5" pos:end="293:23"><call pos:start="287:5" pos:end="293:23"><name pos:start="287:5" pos:end="287:14">nvram_init</name><argument_list pos:start="287:15" pos:end="293:23">(<argument pos:start="287:16" pos:end="287:20"><expr pos:start="287:16" pos:end="287:20"><name pos:start="287:16" pos:end="287:20">nvram</name></expr></argument>, <argument pos:start="287:23" pos:end="287:53"><expr pos:start="287:23" pos:end="287:53"><operator pos:start="287:23" pos:end="287:23">(</operator><name pos:start="287:24" pos:end="287:30">uint8_t</name> <operator pos:start="287:32" pos:end="287:32">*</operator><operator pos:start="287:33" pos:end="287:33">)</operator><operator pos:start="287:34" pos:end="287:34">&amp;</operator><name pos:start="287:35" pos:end="287:45"><name pos:start="287:35" pos:end="287:42">nd_table</name><index pos:start="287:43" pos:end="287:45">[<expr pos:start="287:44" pos:end="287:44"><literal type="number" pos:start="287:44" pos:end="287:44">0</literal></expr>]</index></name><operator pos:start="287:46" pos:end="287:46">.</operator><name pos:start="287:47" pos:end="287:53">macaddr</name></expr></argument>, <argument pos:start="287:56" pos:end="287:69"><expr pos:start="287:56" pos:end="287:69"><name pos:start="287:56" pos:end="287:69">kernel_cmdline</name></expr></argument>,

               <argument pos:start="289:16" pos:end="289:26"><expr pos:start="289:16" pos:end="289:26"><name pos:start="289:16" pos:end="289:26">boot_device</name></expr></argument>, <argument pos:start="289:29" pos:end="289:36"><expr pos:start="289:29" pos:end="289:36"><name pos:start="289:29" pos:end="289:36">RAM_size</name></expr></argument>, <argument pos:start="289:39" pos:end="289:49"><expr pos:start="289:39" pos:end="289:49"><name pos:start="289:39" pos:end="289:49">kernel_size</name></expr></argument>, <argument pos:start="289:52" pos:end="289:64"><expr pos:start="289:52" pos:end="289:64"><name pos:start="289:52" pos:end="289:64">graphic_width</name></expr></argument>,

               <argument pos:start="291:16" pos:end="291:29"><expr pos:start="291:16" pos:end="291:29"><name pos:start="291:16" pos:end="291:29">graphic_height</name></expr></argument>, <argument pos:start="291:32" pos:end="291:44"><expr pos:start="291:32" pos:end="291:44"><name pos:start="291:32" pos:end="291:44">graphic_depth</name></expr></argument>, <argument pos:start="291:47" pos:end="291:69"><expr pos:start="291:47" pos:end="291:69"><name pos:start="291:47" pos:end="291:69"><name pos:start="291:47" pos:end="291:51">hwdef</name><operator pos:start="291:52" pos:end="291:53">-&gt;</operator><name pos:start="291:54" pos:end="291:69">nvram_machine_id</name></name></expr></argument>,

               <argument pos:start="293:16" pos:end="293:22"><expr pos:start="293:16" pos:end="293:22"><literal type="string" pos:start="293:16" pos:end="293:22">"Sun4c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="297:5" pos:end="297:55"><expr pos:start="297:5" pos:end="297:54"><name pos:start="297:5" pos:end="297:10">fw_cfg</name> <operator pos:start="297:12" pos:end="297:12">=</operator> <call pos:start="297:14" pos:end="297:54"><name pos:start="297:14" pos:end="297:24">fw_cfg_init</name><argument_list pos:start="297:25" pos:end="297:54">(<argument pos:start="297:26" pos:end="297:26"><expr pos:start="297:26" pos:end="297:26"><literal type="number" pos:start="297:26" pos:end="297:26">0</literal></expr></argument>, <argument pos:start="297:29" pos:end="297:29"><expr pos:start="297:29" pos:end="297:29"><literal type="number" pos:start="297:29" pos:end="297:29">0</literal></expr></argument>, <argument pos:start="297:32" pos:end="297:39"><expr pos:start="297:32" pos:end="297:39"><name pos:start="297:32" pos:end="297:39">CFG_ADDR</name></expr></argument>, <argument pos:start="297:42" pos:end="297:53"><expr pos:start="297:42" pos:end="297:53"><name pos:start="297:42" pos:end="297:49">CFG_ADDR</name> <operator pos:start="297:51" pos:end="297:51">+</operator> <literal type="number" pos:start="297:53" pos:end="297:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:41"><expr pos:start="299:5" pos:end="299:40"><call pos:start="299:5" pos:end="299:40"><name pos:start="299:5" pos:end="299:18">fw_cfg_add_i32</name><argument_list pos:start="299:19" pos:end="299:40">(<argument pos:start="299:20" pos:end="299:25"><expr pos:start="299:20" pos:end="299:25"><name pos:start="299:20" pos:end="299:25">fw_cfg</name></expr></argument>, <argument pos:start="299:28" pos:end="299:36"><expr pos:start="299:28" pos:end="299:36"><name pos:start="299:28" pos:end="299:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="299:39" pos:end="299:39"><expr pos:start="299:39" pos:end="299:39"><literal type="number" pos:start="299:39" pos:end="299:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:64"><expr pos:start="301:5" pos:end="301:63"><call pos:start="301:5" pos:end="301:63"><name pos:start="301:5" pos:end="301:18">fw_cfg_add_i64</name><argument_list pos:start="301:19" pos:end="301:63">(<argument pos:start="301:20" pos:end="301:25"><expr pos:start="301:20" pos:end="301:25"><name pos:start="301:20" pos:end="301:25">fw_cfg</name></expr></argument>, <argument pos:start="301:28" pos:end="301:42"><expr pos:start="301:28" pos:end="301:42"><name pos:start="301:28" pos:end="301:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="301:45" pos:end="301:62"><expr pos:start="301:45" pos:end="301:62"><operator pos:start="301:45" pos:end="301:45">(</operator><name pos:start="301:46" pos:end="301:53">uint64_t</name><operator pos:start="301:54" pos:end="301:54">)</operator><name pos:start="301:55" pos:end="301:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:65"><expr pos:start="303:5" pos:end="303:64"><call pos:start="303:5" pos:end="303:64"><name pos:start="303:5" pos:end="303:18">fw_cfg_add_i16</name><argument_list pos:start="303:19" pos:end="303:64">(<argument pos:start="303:20" pos:end="303:25"><expr pos:start="303:20" pos:end="303:25"><name pos:start="303:20" pos:end="303:25">fw_cfg</name></expr></argument>, <argument pos:start="303:28" pos:end="303:44"><expr pos:start="303:28" pos:end="303:44"><name pos:start="303:28" pos:end="303:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="303:47" pos:end="303:63"><expr pos:start="303:47" pos:end="303:63"><name pos:start="303:47" pos:end="303:63"><name pos:start="303:47" pos:end="303:51">hwdef</name><operator pos:start="303:52" pos:end="303:53">-&gt;</operator><name pos:start="303:54" pos:end="303:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
