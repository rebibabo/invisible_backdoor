<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22040.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:33">circular_buffer_task</name><parameter_list pos:start="1:34" pos:end="1:53">( <parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">_URLContext</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">URLContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">h</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">_URLContext</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">UDPContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:32">= <expr pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:32"><name pos:start="7:21" pos:end="7:21">h</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">fd_set</name></type> <name pos:start="9:12" pos:end="9:15">rfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:18">timeval</name></name></type> <name pos:start="11:20" pos:end="11:21">tv</name></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="111:5">while<condition pos:start="15:10" pos:end="15:26">(<expr pos:start="15:11" pos:end="15:25"><operator pos:start="15:11" pos:end="15:11">!</operator><name pos:start="15:12" pos:end="15:25"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:25">exit_thread</name></name></expr>)</condition> <block pos:start="15:28" pos:end="111:5">{<block_content pos:start="17:9" pos:end="109:40">

        <decl_stmt pos:start="17:9" pos:end="17:17"><decl pos:start="17:9" pos:end="17:16"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:16">left</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:16"><decl pos:start="21:9" pos:end="21:15"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">len</name></decl>;</decl_stmt>



        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:55">(<expr pos:start="25:13" pos:end="25:54"><call pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:30">ff_check_interrupt</name><argument_list pos:start="25:31" pos:end="25:54">(<argument pos:start="25:32" pos:end="25:53"><expr pos:start="25:32" pos:end="25:53"><operator pos:start="25:32" pos:end="25:32">&amp;</operator><name pos:start="25:33" pos:end="25:53"><name pos:start="25:33" pos:end="25:33">h</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:53">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:57" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:21">

            <expr_stmt pos:start="27:13" pos:end="27:54"><expr pos:start="27:13" pos:end="27:53"><name pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:36">circular_buffer_error</name></name> <operator pos:start="27:38" pos:end="27:38">=</operator> <call pos:start="27:40" pos:end="27:53"><name pos:start="27:40" pos:end="27:46">AVERROR</name><argument_list pos:start="27:47" pos:end="27:53">(<argument pos:start="27:48" pos:end="27:52"><expr pos:start="27:48" pos:end="27:52"><name pos:start="27:48" pos:end="27:52">EINTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="29:13" pos:end="29:21">goto <name pos:start="29:18" pos:end="29:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><call pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:15">FD_ZERO</name><argument_list pos:start="35:16" pos:end="35:22">(<argument pos:start="35:17" pos:end="35:21"><expr pos:start="35:17" pos:end="35:21"><operator pos:start="35:17" pos:end="35:17">&amp;</operator><name pos:start="35:18" pos:end="35:21">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:33"><expr pos:start="37:9" pos:end="37:32"><call pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:14">FD_SET</name><argument_list pos:start="37:15" pos:end="37:32">(<argument pos:start="37:16" pos:end="37:24"><expr pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:24">udp_fd</name></name></expr></argument>, <argument pos:start="37:27" pos:end="37:31"><expr pos:start="37:27" pos:end="37:31"><operator pos:start="37:27" pos:end="37:27">&amp;</operator><name pos:start="37:28" pos:end="37:31">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:22"><expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:10">tv</name><operator pos:start="39:11" pos:end="39:11">.</operator><name pos:start="39:12" pos:end="39:17">tv_sec</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:10">tv</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:18">tv_usec</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:60"><expr pos:start="43:9" pos:end="43:59"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:59"><name pos:start="43:15" pos:end="43:20">select</name><argument_list pos:start="43:21" pos:end="43:59">(<argument pos:start="43:22" pos:end="43:34"><expr pos:start="43:22" pos:end="43:34"><name pos:start="43:22" pos:end="43:30"><name pos:start="43:22" pos:end="43:22">s</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:30">udp_fd</name></name> <operator pos:start="43:32" pos:end="43:32">+</operator> <literal type="number" pos:start="43:34" pos:end="43:34">1</literal></expr></argument>, <argument pos:start="43:37" pos:end="43:41"><expr pos:start="43:37" pos:end="43:41"><operator pos:start="43:37" pos:end="43:37">&amp;</operator><name pos:start="43:38" pos:end="43:41">rfds</name></expr></argument>, <argument pos:start="43:44" pos:end="43:47"><expr pos:start="43:44" pos:end="43:47"><name pos:start="43:44" pos:end="43:47">NULL</name></expr></argument>, <argument pos:start="43:50" pos:end="43:53"><expr pos:start="43:50" pos:end="43:53"><name pos:start="43:50" pos:end="43:53">NULL</name></expr></argument>, <argument pos:start="43:56" pos:end="43:58"><expr pos:start="43:56" pos:end="43:58"><operator pos:start="43:56" pos:end="43:56">&amp;</operator><name pos:start="43:57" pos:end="43:58">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:21">

            <if_stmt pos:start="47:13" pos:end="49:25"><if pos:start="47:13" pos:end="49:25">if <condition pos:start="47:16" pos:end="47:48">(<expr pos:start="47:17" pos:end="47:47"><call pos:start="47:17" pos:end="47:29"><name pos:start="47:17" pos:end="47:27">ff_neterrno</name><argument_list pos:start="47:28" pos:end="47:29">()</argument_list></call> <operator pos:start="47:31" pos:end="47:32">==</operator> <call pos:start="47:34" pos:end="47:47"><name pos:start="47:34" pos:end="47:40">AVERROR</name><argument_list pos:start="47:41" pos:end="47:47">(<argument pos:start="47:42" pos:end="47:46"><expr pos:start="47:42" pos:end="47:46"><name pos:start="47:42" pos:end="47:46">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:25"><block_content pos:start="49:17" pos:end="49:25">

                <continue pos:start="49:17" pos:end="49:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:52"><expr pos:start="51:13" pos:end="51:51"><name pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:36">circular_buffer_error</name></name> <operator pos:start="51:38" pos:end="51:38">=</operator> <call pos:start="51:40" pos:end="51:51"><name pos:start="51:40" pos:end="51:46">AVERROR</name><argument_list pos:start="51:47" pos:end="51:51">(<argument pos:start="51:48" pos:end="51:50"><expr pos:start="51:48" pos:end="51:50"><name pos:start="51:48" pos:end="51:50">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="53:13" pos:end="53:21">goto <name pos:start="53:18" pos:end="53:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="61:21"><if pos:start="59:9" pos:end="61:21">if <condition pos:start="59:12" pos:end="59:53">(<expr pos:start="59:13" pos:end="59:52"><operator pos:start="59:13" pos:end="59:13">!</operator><operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:17">ret</name> <operator pos:start="59:19" pos:end="59:19">&gt;</operator> <literal type="number" pos:start="59:21" pos:end="59:21">0</literal> <operator pos:start="59:23" pos:end="59:24">&amp;&amp;</operator> <call pos:start="59:26" pos:end="59:51"><name pos:start="59:26" pos:end="59:33">FD_ISSET</name><argument_list pos:start="59:34" pos:end="59:51">(<argument pos:start="59:35" pos:end="59:43"><expr pos:start="59:35" pos:end="59:43"><name pos:start="59:35" pos:end="59:43"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:43">udp_fd</name></name></expr></argument>, <argument pos:start="59:46" pos:end="59:50"><expr pos:start="59:46" pos:end="59:50"><operator pos:start="59:46" pos:end="59:46">&amp;</operator><name pos:start="59:47" pos:end="59:50">rfds</name></expr></argument>)</argument_list></call><operator pos:start="59:52" pos:end="59:52">)</operator></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:21"><block_content pos:start="61:13" pos:end="61:21">

            <continue pos:start="61:13" pos:end="61:21">continue;</continue></block_content></block></if></if_stmt>



        <comment type="block" pos:start="65:9" pos:end="65:63">/* How much do we have left to the end of the buffer */</comment>

        <comment type="block" pos:start="67:9" pos:end="67:85">/* Whats the minimum we can read so that we dont comletely fill the buffer */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:12">left</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <call pos:start="69:16" pos:end="69:37"><name pos:start="69:16" pos:end="69:28">av_fifo_space</name><argument_list pos:start="69:29" pos:end="69:37">(<argument pos:start="69:30" pos:end="69:36"><expr pos:start="69:30" pos:end="69:36"><name pos:start="69:30" pos:end="69:36"><name pos:start="69:30" pos:end="69:30">s</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:36">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:53">/* No Space left, error, what do we do now */</comment>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if<condition pos:start="75:11" pos:end="75:39">(<expr pos:start="75:12" pos:end="75:38"><name pos:start="75:12" pos:end="75:15">left</name> <operator pos:start="75:17" pos:end="75:17">&lt;</operator> <name pos:start="75:19" pos:end="75:34">UDP_MAX_PKT_SIZE</name> <operator pos:start="75:36" pos:end="75:36">+</operator> <literal type="number" pos:start="75:38" pos:end="75:38">4</literal></expr>)</condition> <block pos:start="75:41" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:21">

            <expr_stmt pos:start="77:13" pos:end="77:66"><expr pos:start="77:13" pos:end="77:65"><call pos:start="77:13" pos:end="77:65"><name pos:start="77:13" pos:end="77:18">av_log</name><argument_list pos:start="77:19" pos:end="77:65">(<argument pos:start="77:20" pos:end="77:20"><expr pos:start="77:20" pos:end="77:20"><name pos:start="77:20" pos:end="77:20">h</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:64"><expr pos:start="77:37" pos:end="77:64"><literal type="string" pos:start="77:37" pos:end="77:64">"circular_buffer: OVERRUN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:52"><expr pos:start="79:13" pos:end="79:51"><name pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:36">circular_buffer_error</name></name> <operator pos:start="79:38" pos:end="79:38">=</operator> <call pos:start="79:40" pos:end="79:51"><name pos:start="79:40" pos:end="79:46">AVERROR</name><argument_list pos:start="79:47" pos:end="79:51">(<argument pos:start="79:48" pos:end="79:50"><expr pos:start="79:48" pos:end="79:50"><name pos:start="79:48" pos:end="79:50">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="81:13" pos:end="81:21">goto <name pos:start="81:18" pos:end="81:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:61"><expr pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:11">len</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:60"><name pos:start="85:15" pos:end="85:18">recv</name><argument_list pos:start="85:19" pos:end="85:60">(<argument pos:start="85:20" pos:end="85:28"><expr pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:28">udp_fd</name></name></expr></argument>, <argument pos:start="85:31" pos:end="85:38"><expr pos:start="85:31" pos:end="85:38"><name pos:start="85:31" pos:end="85:36"><name pos:start="85:31" pos:end="85:31">s</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:36">tmp</name></name><operator pos:start="85:37" pos:end="85:37">+</operator><literal type="number" pos:start="85:38" pos:end="85:38">4</literal></expr></argument>, <argument pos:start="85:41" pos:end="85:56"><expr pos:start="85:41" pos:end="85:56"><sizeof pos:start="85:41" pos:end="85:54">sizeof<argument_list pos:start="85:47" pos:end="85:54">(<argument pos:start="85:48" pos:end="85:53"><expr pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:53"><name pos:start="85:48" pos:end="85:48">s</name><operator pos:start="85:49" pos:end="85:50">-&gt;</operator><name pos:start="85:51" pos:end="85:53">tmp</name></name></expr></argument>)</argument_list></sizeof><operator pos:start="85:55" pos:end="85:55">-</operator><literal type="number" pos:start="85:56" pos:end="85:56">4</literal></expr></argument>, <argument pos:start="85:59" pos:end="85:59"><expr pos:start="85:59" pos:end="85:59"><literal type="number" pos:start="85:59" pos:end="85:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="99:9">if <condition pos:start="87:12" pos:end="87:20">(<expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:15">len</name> <operator pos:start="87:17" pos:end="87:17">&lt;</operator> <literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr>)</condition> <block pos:start="87:22" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:21">

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:84">(<expr pos:start="89:17" pos:end="89:83"><call pos:start="89:17" pos:end="89:29"><name pos:start="89:17" pos:end="89:27">ff_neterrno</name><argument_list pos:start="89:28" pos:end="89:29">()</argument_list></call> <operator pos:start="89:31" pos:end="89:32">!=</operator> <call pos:start="89:34" pos:end="89:48"><name pos:start="89:34" pos:end="89:40">AVERROR</name><argument_list pos:start="89:41" pos:end="89:48">(<argument pos:start="89:42" pos:end="89:47"><expr pos:start="89:42" pos:end="89:47"><name pos:start="89:42" pos:end="89:47">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="89:50" pos:end="89:51">&amp;&amp;</operator> <call pos:start="89:53" pos:end="89:65"><name pos:start="89:53" pos:end="89:63">ff_neterrno</name><argument_list pos:start="89:64" pos:end="89:65">()</argument_list></call> <operator pos:start="89:67" pos:end="89:68">!=</operator> <call pos:start="89:70" pos:end="89:83"><name pos:start="89:70" pos:end="89:76">AVERROR</name><argument_list pos:start="89:77" pos:end="89:83">(<argument pos:start="89:78" pos:end="89:82"><expr pos:start="89:78" pos:end="89:82"><name pos:start="89:78" pos:end="89:82">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:86" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:25">

                <expr_stmt pos:start="91:17" pos:end="91:56"><expr pos:start="91:17" pos:end="91:55"><name pos:start="91:17" pos:end="91:40"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:40">circular_buffer_error</name></name> <operator pos:start="91:42" pos:end="91:42">=</operator> <call pos:start="91:44" pos:end="91:55"><name pos:start="91:44" pos:end="91:50">AVERROR</name><argument_list pos:start="91:51" pos:end="91:55">(<argument pos:start="91:52" pos:end="91:54"><expr pos:start="91:52" pos:end="91:54"><name pos:start="91:52" pos:end="91:54">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="93:17" pos:end="93:25">goto <name pos:start="93:22" pos:end="93:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <continue pos:start="97:13" pos:end="97:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><call pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:15">AV_WL32</name><argument_list pos:start="101:16" pos:end="101:28">(<argument pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:22">tmp</name></name></expr></argument>, <argument pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><name pos:start="101:25" pos:end="101:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><call pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:26">pthread_mutex_lock</name><argument_list pos:start="103:27" pos:end="103:37">(<argument pos:start="103:28" pos:end="103:36"><expr pos:start="103:28" pos:end="103:36"><operator pos:start="103:28" pos:end="103:28">&amp;</operator><name pos:start="103:29" pos:end="103:36"><name pos:start="103:29" pos:end="103:29">s</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:60"><expr pos:start="105:9" pos:end="105:59"><call pos:start="105:9" pos:end="105:59"><name pos:start="105:9" pos:end="105:29">av_fifo_generic_write</name><argument_list pos:start="105:30" pos:end="105:59">(<argument pos:start="105:31" pos:end="105:37"><expr pos:start="105:31" pos:end="105:37"><name pos:start="105:31" pos:end="105:37"><name pos:start="105:31" pos:end="105:31">s</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:37">fifo</name></name></expr></argument>, <argument pos:start="105:40" pos:end="105:45"><expr pos:start="105:40" pos:end="105:45"><name pos:start="105:40" pos:end="105:45"><name pos:start="105:40" pos:end="105:40">s</name><operator pos:start="105:41" pos:end="105:42">-&gt;</operator><name pos:start="105:43" pos:end="105:45">tmp</name></name></expr></argument>, <argument pos:start="105:48" pos:end="105:52"><expr pos:start="105:48" pos:end="105:52"><name pos:start="105:48" pos:end="105:50">len</name><operator pos:start="105:51" pos:end="105:51">+</operator><literal type="number" pos:start="105:52" pos:end="105:52">4</literal></expr></argument>, <argument pos:start="105:55" pos:end="105:58"><expr pos:start="105:55" pos:end="105:58"><name pos:start="105:55" pos:end="105:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:38"><expr pos:start="107:9" pos:end="107:37"><call pos:start="107:9" pos:end="107:37"><name pos:start="107:9" pos:end="107:27">pthread_cond_signal</name><argument_list pos:start="107:28" pos:end="107:37">(<argument pos:start="107:29" pos:end="107:36"><expr pos:start="107:29" pos:end="107:36"><operator pos:start="107:29" pos:end="107:29">&amp;</operator><name pos:start="107:30" pos:end="107:36"><name pos:start="107:30" pos:end="107:30">s</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:36">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:40"><expr pos:start="109:9" pos:end="109:39"><call pos:start="109:9" pos:end="109:39"><name pos:start="109:9" pos:end="109:28">pthread_mutex_unlock</name><argument_list pos:start="109:29" pos:end="109:39">(<argument pos:start="109:30" pos:end="109:38"><expr pos:start="109:30" pos:end="109:38"><operator pos:start="109:30" pos:end="109:30">&amp;</operator><name pos:start="109:31" pos:end="109:38"><name pos:start="109:31" pos:end="109:31">s</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



<label pos:start="115:1" pos:end="115:4"><name pos:start="115:1" pos:end="115:3">end</name>:</label>

    <expr_stmt pos:start="117:5" pos:end="117:34"><expr pos:start="117:5" pos:end="117:33"><call pos:start="117:5" pos:end="117:33"><name pos:start="117:5" pos:end="117:22">pthread_mutex_lock</name><argument_list pos:start="117:23" pos:end="117:33">(<argument pos:start="117:24" pos:end="117:32"><expr pos:start="117:24" pos:end="117:32"><operator pos:start="117:24" pos:end="117:24">&amp;</operator><name pos:start="117:25" pos:end="117:32"><name pos:start="117:25" pos:end="117:25">s</name><operator pos:start="117:26" pos:end="117:27">-&gt;</operator><name pos:start="117:28" pos:end="117:32">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:34"><expr pos:start="119:5" pos:end="119:33"><call pos:start="119:5" pos:end="119:33"><name pos:start="119:5" pos:end="119:23">pthread_cond_signal</name><argument_list pos:start="119:24" pos:end="119:33">(<argument pos:start="119:25" pos:end="119:32"><expr pos:start="119:25" pos:end="119:32"><operator pos:start="119:25" pos:end="119:25">&amp;</operator><name pos:start="119:26" pos:end="119:32"><name pos:start="119:26" pos:end="119:26">s</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:32">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:36"><expr pos:start="121:5" pos:end="121:35"><call pos:start="121:5" pos:end="121:35"><name pos:start="121:5" pos:end="121:24">pthread_mutex_unlock</name><argument_list pos:start="121:25" pos:end="121:35">(<argument pos:start="121:26" pos:end="121:34"><expr pos:start="121:26" pos:end="121:34"><operator pos:start="121:26" pos:end="121:26">&amp;</operator><name pos:start="121:27" pos:end="121:34"><name pos:start="121:27" pos:end="121:27">s</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:34">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:16">return <expr pos:start="123:12" pos:end="123:15"><name pos:start="123:12" pos:end="123:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
