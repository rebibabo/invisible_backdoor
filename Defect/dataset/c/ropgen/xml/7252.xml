<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7252.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">kvmppc_host_cpu_class_init</name><parameter_list pos:start="1:39" pos:end="1:67">(<parameter pos:start="1:40" pos:end="1:54"><decl pos:start="1:40" pos:end="1:54"><type pos:start="1:40" pos:end="1:54"><name pos:start="1:40" pos:end="1:50">ObjectClass</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">oc</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:66"><decl pos:start="1:57" pos:end="1:66"><type pos:start="1:57" pos:end="1:66"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:5">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">PowerPCCPUClass</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">pcc</name> <init pos:start="5:26" pos:end="5:48">= <expr pos:start="5:28" pos:end="5:48"><call pos:start="5:28" pos:end="5:48"><name pos:start="5:28" pos:end="5:44">POWERPC_CPU_CLASS</name><argument_list pos:start="5:45" pos:end="5:48">(<argument pos:start="5:46" pos:end="5:47"><expr pos:start="5:46" pos:end="5:47"><name pos:start="5:46" pos:end="5:47">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">vmx</name> <init pos:start="7:18" pos:end="7:35">= <expr pos:start="7:20" pos:end="7:35"><call pos:start="7:20" pos:end="7:35"><name pos:start="7:20" pos:end="7:33">kvmppc_get_vmx</name><argument_list pos:start="7:34" pos:end="7:35">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">dfp</name> <init pos:start="9:18" pos:end="9:35">= <expr pos:start="9:20" pos:end="9:35"><call pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:33">kvmppc_get_dfp</name><argument_list pos:start="9:34" pos:end="9:35">()</argument_list></call></expr></init></decl>;</decl_stmt>





    <comment type="block" pos:start="15:5" pos:end="15:74">/* Now fix up the class with information we can query from the host */</comment>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">vmx</name> <operator pos:start="19:13" pos:end="19:14">!=</operator> <operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>)</condition> <block pos:start="19:20" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:59">

        <comment type="block" pos:start="21:9" pos:end="21:63">/* Only override when we know what the host supports */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:61"><expr pos:start="23:9" pos:end="23:60"><call pos:start="23:9" pos:end="23:60"><name pos:start="23:9" pos:end="23:19">alter_insns</name><argument_list pos:start="23:20" pos:end="23:60">(<argument pos:start="23:21" pos:end="23:37"><expr pos:start="23:21" pos:end="23:37"><operator pos:start="23:21" pos:end="23:21">&amp;</operator><name pos:start="23:22" pos:end="23:37"><name pos:start="23:22" pos:end="23:24">pcc</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:37">insns_flags</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:50"><expr pos:start="23:40" pos:end="23:50"><name pos:start="23:40" pos:end="23:50">PPC_ALTIVEC</name></expr></argument>, <argument pos:start="23:53" pos:end="23:59"><expr pos:start="23:53" pos:end="23:59"><name pos:start="23:53" pos:end="23:55">vmx</name> <operator pos:start="23:57" pos:end="23:57">&gt;</operator> <literal type="number" pos:start="23:59" pos:end="23:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:59"><expr pos:start="25:9" pos:end="25:58"><call pos:start="25:9" pos:end="25:58"><name pos:start="25:9" pos:end="25:19">alter_insns</name><argument_list pos:start="25:20" pos:end="25:58">(<argument pos:start="25:21" pos:end="25:38"><expr pos:start="25:21" pos:end="25:38"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:38"><name pos:start="25:22" pos:end="25:24">pcc</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:38">insns_flags2</name></name></expr></argument>, <argument pos:start="25:41" pos:end="25:48"><expr pos:start="25:41" pos:end="25:48"><name pos:start="25:41" pos:end="25:48">PPC2_VSX</name></expr></argument>, <argument pos:start="25:51" pos:end="25:57"><expr pos:start="25:51" pos:end="25:57"><name pos:start="25:51" pos:end="25:53">vmx</name> <operator pos:start="25:55" pos:end="25:55">&gt;</operator> <literal type="number" pos:start="25:57" pos:end="25:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:11">dfp</name> <operator pos:start="29:13" pos:end="29:14">!=</operator> <operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>)</condition> <block pos:start="29:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:55">

        <comment type="block" pos:start="31:9" pos:end="31:63">/* Only override when we know what the host supports */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:55"><expr pos:start="33:9" pos:end="33:54"><call pos:start="33:9" pos:end="33:54"><name pos:start="33:9" pos:end="33:19">alter_insns</name><argument_list pos:start="33:20" pos:end="33:54">(<argument pos:start="33:21" pos:end="33:38"><expr pos:start="33:21" pos:end="33:38"><operator pos:start="33:21" pos:end="33:21">&amp;</operator><name pos:start="33:22" pos:end="33:38"><name pos:start="33:22" pos:end="33:24">pcc</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:38">insns_flags2</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:48"><expr pos:start="33:41" pos:end="33:48"><name pos:start="33:41" pos:end="33:48">PPC2_DFP</name></expr></argument>, <argument pos:start="33:51" pos:end="33:53"><expr pos:start="33:51" pos:end="33:53"><name pos:start="33:51" pos:end="33:53">dfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:26">(<expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:19">dcache_size</name> <operator pos:start="39:21" pos:end="39:22">!=</operator> <operator pos:start="39:24" pos:end="39:24">-</operator><literal type="number" pos:start="39:25" pos:end="39:25">1</literal></expr>)</condition> <block pos:start="39:28" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:42">

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:11">pcc</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:27">l1_dcache_size</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <name pos:start="41:31" pos:end="41:41">dcache_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:26">(<expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:19">icache_size</name> <operator pos:start="47:21" pos:end="47:22">!=</operator> <operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>)</condition> <block pos:start="47:28" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:42">

        <expr_stmt pos:start="49:9" pos:end="49:42"><expr pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:11">pcc</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:27">l1_icache_size</name></name> <operator pos:start="49:29" pos:end="49:29">=</operator> <name pos:start="49:31" pos:end="49:41">icache_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
