<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22795.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">return_frame</name><parameter_list pos:start="1:25" pos:end="1:61">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:40">AVFilterContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:60">is_second</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:57">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">YADIFContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">yadif</name> <init pos:start="5:25" pos:end="5:35">= <expr pos:start="5:27" pos:end="5:35"><name pos:start="5:27" pos:end="5:35"><name pos:start="5:27" pos:end="5:29">ctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:35">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVFilterLink</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">link</name><init pos:start="7:23" pos:end="7:39">= <expr pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:36">outputs</name><index pos:start="7:37" pos:end="7:39">[<expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">tff</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:28">(<expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:13">yadif</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:21">parity</name></name> <operator pos:start="13:23" pos:end="13:24">==</operator> <operator pos:start="13:26" pos:end="13:26">-</operator><literal type="number" pos:start="13:27" pos:end="13:27">1</literal></expr>)</condition> <block pos:start="13:30" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:51">

        <expr_stmt pos:start="15:9" pos:end="17:51"><expr pos:start="15:9" pos:end="17:50"><name pos:start="15:9" pos:end="15:11">tff</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <ternary pos:start="15:15" pos:end="17:50"><condition pos:start="15:15" pos:end="15:45"><expr pos:start="15:15" pos:end="15:43"><name pos:start="15:15" pos:end="15:43"><name pos:start="15:15" pos:end="15:19">yadif</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:24">cur</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:31">video</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:43">interlaced</name></name></expr> ?</condition><then pos:start="17:13" pos:end="17:46">

            <expr pos:start="17:13" pos:end="17:46"><name pos:start="17:13" pos:end="17:46"><name pos:start="17:13" pos:end="17:17">yadif</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:22">cur</name><operator pos:start="17:23" pos:end="17:24">-&gt;</operator><name pos:start="17:25" pos:end="17:29">video</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:46">top_field_first</name></name></expr> </then><else pos:start="17:48" pos:end="17:50">: <expr pos:start="17:50" pos:end="17:50"><literal type="number" pos:start="17:50" pos:end="17:50">1</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:30">

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:11">tff</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:27"><name pos:start="21:15" pos:end="21:19">yadif</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:27">parity</name></name><operator pos:start="21:28" pos:end="21:28">^</operator><literal type="number" pos:start="21:29" pos:end="21:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:17">is_second</name></expr>)</condition> <block pos:start="27:20" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:42">

        <expr_stmt pos:start="29:9" pos:end="31:74"><expr pos:start="29:9" pos:end="31:73"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:13">yadif</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">out</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <call pos:start="29:22" pos:end="31:73"><name pos:start="29:22" pos:end="29:40">ff_get_video_buffer</name><argument_list pos:start="29:41" pos:end="31:73">(<argument pos:start="29:42" pos:end="29:45"><expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">link</name></expr></argument>, <argument pos:start="29:48" pos:end="31:54"><expr pos:start="29:48" pos:end="31:54"><name pos:start="29:48" pos:end="29:60">AV_PERM_WRITE</name> <operator pos:start="29:62" pos:end="29:62">|</operator> <name pos:start="29:64" pos:end="29:79">AV_PERM_PRESERVE</name> <operator pos:start="29:81" pos:end="29:81">|</operator>

                                         <name pos:start="31:42" pos:end="31:54">AV_PERM_REUSE</name></expr></argument>, <argument pos:start="31:57" pos:end="31:63"><expr pos:start="31:57" pos:end="31:63"><name pos:start="31:57" pos:end="31:63"><name pos:start="31:57" pos:end="31:60">link</name><operator pos:start="31:61" pos:end="31:62">-&gt;</operator><name pos:start="31:63" pos:end="31:63">w</name></name></expr></argument>, <argument pos:start="31:66" pos:end="31:72"><expr pos:start="31:66" pos:end="31:72"><name pos:start="31:66" pos:end="31:72"><name pos:start="31:66" pos:end="31:69">link</name><operator pos:start="31:70" pos:end="31:71">-&gt;</operator><name pos:start="31:72" pos:end="31:72">h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><call pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:38">avfilter_copy_buffer_ref_props</name><argument_list pos:start="33:39" pos:end="33:62">(<argument pos:start="33:40" pos:end="33:49"><expr pos:start="33:40" pos:end="33:49"><name pos:start="33:40" pos:end="33:49"><name pos:start="33:40" pos:end="33:44">yadif</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:49">out</name></name></expr></argument>, <argument pos:start="33:52" pos:end="33:61"><expr pos:start="33:52" pos:end="33:61"><name pos:start="33:52" pos:end="33:61"><name pos:start="33:52" pos:end="33:56">yadif</name><operator pos:start="33:57" pos:end="33:58">-&gt;</operator><name pos:start="33:59" pos:end="33:61">cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:13">yadif</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">out</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:25">video</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:37">interlaced</name></name> <operator pos:start="35:39" pos:end="35:39">=</operator> <literal type="number" pos:start="35:41" pos:end="35:41">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="43:59"><if pos:start="41:5" pos:end="43:59">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:19"><name pos:start="41:10" pos:end="41:14">yadif</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:19">csp</name></name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:59"><block_content pos:start="43:9" pos:end="43:59">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:13">yadif</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:18">csp</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <operator pos:start="43:22" pos:end="43:22">&amp;</operator><name pos:start="43:23" pos:end="43:58"><name pos:start="43:23" pos:end="43:44">av_pix_fmt_descriptors</name><index pos:start="43:45" pos:end="43:58">[<expr pos:start="43:46" pos:end="43:57"><name pos:start="43:46" pos:end="43:57"><name pos:start="43:46" pos:end="43:49">link</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:57">format</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="47:49"><if pos:start="45:5" pos:end="47:49">if <condition pos:start="45:8" pos:end="45:50">(<expr pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:13">yadif</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:18">csp</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:24">comp</name><index pos:start="45:25" pos:end="45:27">[<expr pos:start="45:26" pos:end="45:26"><literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr>]</index></name><operator pos:start="45:28" pos:end="45:28">.</operator><name pos:start="45:29" pos:end="45:40">depth_minus1</name> <operator pos:start="45:42" pos:end="45:42">/</operator> <literal type="number" pos:start="45:44" pos:end="45:44">8</literal> <operator pos:start="45:46" pos:end="45:47">==</operator> <literal type="number" pos:start="45:49" pos:end="45:49">1</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:49"><block_content pos:start="47:9" pos:end="47:49">

        <expr_stmt pos:start="47:9" pos:end="47:49"><expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:13">yadif</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">filter_line</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <name pos:start="47:30" pos:end="47:48">filter_line_c_16bit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:51"><expr pos:start="51:5" pos:end="51:50"><call pos:start="51:5" pos:end="51:50"><name pos:start="51:5" pos:end="51:10">filter</name><argument_list pos:start="51:11" pos:end="51:50">(<argument pos:start="51:12" pos:end="51:14"><expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">ctx</name></expr></argument>, <argument pos:start="51:17" pos:end="51:26"><expr pos:start="51:17" pos:end="51:26"><name pos:start="51:17" pos:end="51:26"><name pos:start="51:17" pos:end="51:21">yadif</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:26">out</name></name></expr></argument>, <argument pos:start="51:29" pos:end="51:44"><expr pos:start="51:29" pos:end="51:44"><name pos:start="51:29" pos:end="51:31">tff</name> <operator pos:start="51:33" pos:end="51:33">^</operator> <operator pos:start="51:35" pos:end="51:35">!</operator><name pos:start="51:36" pos:end="51:44">is_second</name></expr></argument>, <argument pos:start="51:47" pos:end="51:49"><expr pos:start="51:47" pos:end="51:49"><name pos:start="51:47" pos:end="51:49">tff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="75:5"><if pos:start="55:5" pos:end="75:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:17">is_second</name></expr>)</condition> <block pos:start="55:20" pos:end="75:5">{<block_content pos:start="57:9" pos:end="73:52">

        <decl_stmt pos:start="57:9" pos:end="57:43"><decl pos:start="57:9" pos:end="57:42"><type pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:15">int64_t</name></type> <name pos:start="57:17" pos:end="57:23">cur_pts</name>  <init pos:start="57:26" pos:end="57:42">= <expr pos:start="57:28" pos:end="57:42"><name pos:start="57:28" pos:end="57:42"><name pos:start="57:28" pos:end="57:32">yadif</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:37">cur</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:42">pts</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:44"><decl pos:start="59:9" pos:end="59:43"><type pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:15">int64_t</name></type> <name pos:start="59:17" pos:end="59:24">next_pts</name> <init pos:start="59:26" pos:end="59:43">= <expr pos:start="59:28" pos:end="59:43"><name pos:start="59:28" pos:end="59:43"><name pos:start="59:28" pos:end="59:32">yadif</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:38">next</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:43">pts</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:68">(<expr pos:start="63:13" pos:end="63:67"><name pos:start="63:13" pos:end="63:20">next_pts</name> <operator pos:start="63:22" pos:end="63:23">!=</operator> <name pos:start="63:25" pos:end="63:38">AV_NOPTS_VALUE</name> <operator pos:start="63:40" pos:end="63:41">&amp;&amp;</operator> <name pos:start="63:43" pos:end="63:49">cur_pts</name> <operator pos:start="63:51" pos:end="63:52">!=</operator> <name pos:start="63:54" pos:end="63:67">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="63:70" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:49">

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:17">yadif</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:22">out</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:27">pts</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <name pos:start="65:31" pos:end="65:37">cur_pts</name> <operator pos:start="65:39" pos:end="65:39">+</operator> <name pos:start="65:41" pos:end="65:48">next_pts</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:45">

            <expr_stmt pos:start="69:13" pos:end="69:45"><expr pos:start="69:13" pos:end="69:44"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:17">yadif</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:22">out</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:27">pts</name></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:44">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><call pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:22">ff_start_frame</name><argument_list pos:start="73:23" pos:end="73:51">(<argument pos:start="73:24" pos:end="73:38"><expr pos:start="73:24" pos:end="73:38"><name pos:start="73:24" pos:end="73:38"><name pos:start="73:24" pos:end="73:26">ctx</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:35">outputs</name><index pos:start="73:36" pos:end="73:38">[<expr pos:start="73:37" pos:end="73:37"><literal type="number" pos:start="73:37" pos:end="73:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:41" pos:end="73:50"><expr pos:start="73:41" pos:end="73:50"><name pos:start="73:41" pos:end="73:50"><name pos:start="73:41" pos:end="73:45">yadif</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:50">out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><call pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:17">ff_draw_slice</name><argument_list pos:start="77:18" pos:end="77:49">(<argument pos:start="77:19" pos:end="77:33"><expr pos:start="77:19" pos:end="77:33"><name pos:start="77:19" pos:end="77:33"><name pos:start="77:19" pos:end="77:21">ctx</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:30">outputs</name><index pos:start="77:31" pos:end="77:33">[<expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:36" pos:end="77:36"><expr pos:start="77:36" pos:end="77:36"><literal type="number" pos:start="77:36" pos:end="77:36">0</literal></expr></argument>, <argument pos:start="77:39" pos:end="77:45"><expr pos:start="77:39" pos:end="77:45"><name pos:start="77:39" pos:end="77:45"><name pos:start="77:39" pos:end="77:42">link</name><operator pos:start="77:43" pos:end="77:44">-&gt;</operator><name pos:start="77:45" pos:end="77:45">h</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:48"><expr pos:start="77:48" pos:end="77:48"><literal type="number" pos:start="77:48" pos:end="77:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:34"><expr pos:start="79:5" pos:end="79:33"><call pos:start="79:5" pos:end="79:33"><name pos:start="79:5" pos:end="79:16">ff_end_frame</name><argument_list pos:start="79:17" pos:end="79:33">(<argument pos:start="79:18" pos:end="79:32"><expr pos:start="79:18" pos:end="79:32"><name pos:start="79:18" pos:end="79:32"><name pos:start="79:18" pos:end="79:20">ctx</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:29">outputs</name><index pos:start="79:30" pos:end="79:32">[<expr pos:start="79:31" pos:end="79:31"><literal type="number" pos:start="79:31" pos:end="79:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:57"><expr pos:start="83:5" pos:end="83:56"><name pos:start="83:5" pos:end="83:24"><name pos:start="83:5" pos:end="83:9">yadif</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:24">frame_pending</name></name> <operator pos:start="83:26" pos:end="83:26">=</operator> <operator pos:start="83:28" pos:end="83:28">(</operator><name pos:start="83:29" pos:end="83:39"><name pos:start="83:29" pos:end="83:33">yadif</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:39">mode</name></name><operator pos:start="83:40" pos:end="83:40">&amp;</operator><literal type="number" pos:start="83:41" pos:end="83:41">1</literal><operator pos:start="83:42" pos:end="83:42">)</operator> <operator pos:start="83:44" pos:end="83:45">&amp;&amp;</operator> <operator pos:start="83:47" pos:end="83:47">!</operator><name pos:start="83:48" pos:end="83:56">is_second</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
