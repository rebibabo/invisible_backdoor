<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26918.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:37">qcow_co_readv</name><parameter_list pos:start="1:38" pos:end="3:60">(<parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:67">int64_t</name></type> <name pos:start="1:69" pos:end="1:78">sector_num</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:39"><decl pos:start="3:26" pos:end="3:39"><type pos:start="3:26" pos:end="3:39"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:39">nb_sectors</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:59"><decl pos:start="3:42" pos:end="3:59"><type pos:start="3:42" pos:end="3:59"><name pos:start="3:42" pos:end="3:53">QEMUIOVector</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:59">qiov</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="201:1">{<block_content pos:start="7:5" pos:end="199:14">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:24">index_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:18">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:16">iovec</name></name></type> <name pos:start="15:18" pos:end="15:23">hd_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">QEMUIOVector</name></type> <name pos:start="17:18" pos:end="17:24">hd_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:18">orig_buf</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="41:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:12">qiov</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:18">niov</name></name> <operator pos:start="25:20" pos:end="25:20">&gt;</operator> <literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr>)</condition> <block pos:start="25:25" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <expr_stmt pos:start="27:9" pos:end="27:61"><expr pos:start="27:9" pos:end="27:60"><name pos:start="27:9" pos:end="27:11">buf</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:22">orig_buf</name> <operator pos:start="27:24" pos:end="27:24">=</operator> <call pos:start="27:26" pos:end="27:60"><name pos:start="27:26" pos:end="27:44">qemu_try_blockalign</name><argument_list pos:start="27:45" pos:end="27:60">(<argument pos:start="27:46" pos:end="27:47"><expr pos:start="27:46" pos:end="27:47"><name pos:start="27:46" pos:end="27:47">bs</name></expr></argument>, <argument pos:start="27:50" pos:end="27:59"><expr pos:start="27:50" pos:end="27:59"><name pos:start="27:50" pos:end="27:59"><name pos:start="27:50" pos:end="27:53">qiov</name><operator pos:start="27:54" pos:end="27:55">-&gt;</operator><name pos:start="27:56" pos:end="27:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:15">buf</name> <operator pos:start="29:17" pos:end="29:18">==</operator> <name pos:start="29:20" pos:end="29:23">NULL</name></expr>)</condition> <block pos:start="29:26" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:27">

            <return pos:start="31:13" pos:end="31:27">return <expr pos:start="31:20" pos:end="31:26"><operator pos:start="31:20" pos:end="31:20">-</operator><name pos:start="31:21" pos:end="31:26">ENOMEM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="41:5">else <block pos:start="35:12" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:45">

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:16">orig_buf</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <name pos:start="37:20" pos:end="37:23">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:11">buf</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">(</operator><name pos:start="39:16" pos:end="39:22">uint8_t</name> <operator pos:start="39:24" pos:end="39:24">*</operator><operator pos:start="39:25" pos:end="39:25">)</operator><name pos:start="39:26" pos:end="39:44"><name pos:start="39:26" pos:end="39:29">qiov</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:34">iov</name><operator pos:start="39:35" pos:end="39:36">-&gt;</operator><name pos:start="39:37" pos:end="39:44">iov_base</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><call pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:22">qemu_co_mutex_lock</name><argument_list pos:start="45:23" pos:end="45:32">(<argument pos:start="45:24" pos:end="45:31"><expr pos:start="45:24" pos:end="45:31"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:25">s</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="49:5" pos:end="171:5">while <condition pos:start="49:11" pos:end="49:27">(<expr pos:start="49:12" pos:end="49:26"><name pos:start="49:12" pos:end="49:21">nb_sectors</name> <operator pos:start="49:23" pos:end="49:24">!=</operator> <literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr>)</condition> <block pos:start="49:29" pos:end="171:5">{<block_content pos:start="53:9" pos:end="169:23">

        <comment type="block" pos:start="51:9" pos:end="51:34">/* prepare next request */</comment>

        <expr_stmt pos:start="53:9" pos:end="55:61"><expr pos:start="53:9" pos:end="55:60"><name pos:start="53:9" pos:end="53:22">cluster_offset</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="55:60"><name pos:start="53:26" pos:end="53:43">get_cluster_offset</name><argument_list pos:start="53:44" pos:end="55:60">(<argument pos:start="53:45" pos:end="53:46"><expr pos:start="53:45" pos:end="53:46"><name pos:start="53:45" pos:end="53:46">bs</name></expr></argument>, <argument pos:start="53:49" pos:end="53:63"><expr pos:start="53:49" pos:end="53:63"><name pos:start="53:49" pos:end="53:58">sector_num</name> <operator pos:start="53:60" pos:end="53:61">&lt;&lt;</operator> <literal type="number" pos:start="53:63" pos:end="53:63">9</literal></expr></argument>,

                                                 <argument pos:start="55:50" pos:end="55:50"><expr pos:start="55:50" pos:end="55:50"><literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr></argument>, <argument pos:start="55:53" pos:end="55:53"><expr pos:start="55:53" pos:end="55:53"><literal type="number" pos:start="55:53" pos:end="55:53">0</literal></expr></argument>, <argument pos:start="55:56" pos:end="55:56"><expr pos:start="55:56" pos:end="55:56"><literal type="number" pos:start="55:56" pos:end="55:56">0</literal></expr></argument>, <argument pos:start="55:59" pos:end="55:59"><expr pos:start="55:59" pos:end="55:59"><literal type="number" pos:start="55:59" pos:end="55:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:65"><expr pos:start="57:9" pos:end="57:64"><name pos:start="57:9" pos:end="57:24">index_in_cluster</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:37">sector_num</name> <operator pos:start="57:39" pos:end="57:39">&amp;</operator> <operator pos:start="57:41" pos:end="57:41">(</operator><name pos:start="57:42" pos:end="57:59"><name pos:start="57:42" pos:end="57:42">s</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:59">cluster_sectors</name></name> <operator pos:start="57:61" pos:end="57:61">-</operator> <literal type="number" pos:start="57:63" pos:end="57:63">1</literal><operator pos:start="57:64" pos:end="57:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:9">n</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <name pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:30">cluster_sectors</name></name> <operator pos:start="59:32" pos:end="59:32">-</operator> <name pos:start="59:34" pos:end="59:49">index_in_cluster</name></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:27">(<expr pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:13">n</name> <operator pos:start="61:15" pos:end="61:15">&gt;</operator> <name pos:start="61:17" pos:end="61:26">nb_sectors</name></expr>)</condition> <block pos:start="61:29" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:27">

            <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:13">n</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:26">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="69:9" pos:end="159:9"><if pos:start="69:9" pos:end="101:9">if <condition pos:start="69:12" pos:end="69:28">(<expr pos:start="69:13" pos:end="69:27"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:27">cluster_offset</name></expr>)</condition> <block pos:start="69:30" pos:end="101:9">{<block_content pos:start="71:13" pos:end="99:13">

            <if_stmt pos:start="71:13" pos:end="99:13"><if pos:start="71:13" pos:end="93:13">if <condition pos:start="71:16" pos:end="71:28">(<expr pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:18">bs</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:27">backing</name></name></expr>)</condition> <block pos:start="71:30" pos:end="93:13">{<block_content pos:start="75:17" pos:end="91:17">

                <comment type="block" pos:start="73:17" pos:end="73:46">/* read from the base image */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:46"><expr pos:start="75:17" pos:end="75:45"><name pos:start="75:17" pos:end="75:31"><name pos:start="75:17" pos:end="75:22">hd_iov</name><operator pos:start="75:23" pos:end="75:23">.</operator><name pos:start="75:24" pos:end="75:31">iov_base</name></name> <operator pos:start="75:33" pos:end="75:33">=</operator> <operator pos:start="75:35" pos:end="75:35">(</operator><name pos:start="75:36" pos:end="75:39">void</name> <operator pos:start="75:41" pos:end="75:41">*</operator><operator pos:start="75:42" pos:end="75:42">)</operator><name pos:start="75:43" pos:end="75:45">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:41"><expr pos:start="77:17" pos:end="77:40"><name pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:22">hd_iov</name><operator pos:start="77:23" pos:end="77:23">.</operator><name pos:start="77:24" pos:end="77:30">iov_len</name></name> <operator pos:start="77:32" pos:end="77:32">=</operator> <name pos:start="77:34" pos:end="77:34">n</name> <operator pos:start="77:36" pos:end="77:36">*</operator> <literal type="number" pos:start="77:38" pos:end="77:40">512</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:63"><expr pos:start="79:17" pos:end="79:62"><call pos:start="79:17" pos:end="79:62"><name pos:start="79:17" pos:end="79:40">qemu_iovec_init_external</name><argument_list pos:start="79:41" pos:end="79:62">(<argument pos:start="79:42" pos:end="79:49"><expr pos:start="79:42" pos:end="79:49"><operator pos:start="79:42" pos:end="79:42">&amp;</operator><name pos:start="79:43" pos:end="79:49">hd_qiov</name></expr></argument>, <argument pos:start="79:52" pos:end="79:58"><expr pos:start="79:52" pos:end="79:58"><operator pos:start="79:52" pos:end="79:52">&amp;</operator><name pos:start="79:53" pos:end="79:58">hd_iov</name></expr></argument>, <argument pos:start="79:61" pos:end="79:61"><expr pos:start="79:61" pos:end="79:61"><literal type="number" pos:start="79:61" pos:end="79:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:47"><expr pos:start="81:17" pos:end="81:46"><call pos:start="81:17" pos:end="81:46"><name pos:start="81:17" pos:end="81:36">qemu_co_mutex_unlock</name><argument_list pos:start="81:37" pos:end="81:46">(<argument pos:start="81:38" pos:end="81:45"><expr pos:start="81:38" pos:end="81:45"><operator pos:start="81:38" pos:end="81:38">&amp;</operator><name pos:start="81:39" pos:end="81:45"><name pos:start="81:39" pos:end="81:39">s</name><operator pos:start="81:40" pos:end="81:41">-&gt;</operator><name pos:start="81:42" pos:end="81:45">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:74"><expr pos:start="83:17" pos:end="83:73"><name pos:start="83:17" pos:end="83:19">ret</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:73"><name pos:start="83:23" pos:end="83:35">bdrv_co_readv</name><argument_list pos:start="83:36" pos:end="83:73">(<argument pos:start="83:37" pos:end="83:47"><expr pos:start="83:37" pos:end="83:47"><name pos:start="83:37" pos:end="83:47"><name pos:start="83:37" pos:end="83:38">bs</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:47">backing</name></name></expr></argument>, <argument pos:start="83:50" pos:end="83:59"><expr pos:start="83:50" pos:end="83:59"><name pos:start="83:50" pos:end="83:59">sector_num</name></expr></argument>, <argument pos:start="83:62" pos:end="83:62"><expr pos:start="83:62" pos:end="83:62"><name pos:start="83:62" pos:end="83:62">n</name></expr></argument>, <argument pos:start="83:65" pos:end="83:72"><expr pos:start="83:65" pos:end="83:72"><operator pos:start="83:65" pos:end="83:65">&amp;</operator><name pos:start="83:66" pos:end="83:72">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:45"><expr pos:start="85:17" pos:end="85:44"><call pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:34">qemu_co_mutex_lock</name><argument_list pos:start="85:35" pos:end="85:44">(<argument pos:start="85:36" pos:end="85:43"><expr pos:start="85:36" pos:end="85:43"><operator pos:start="85:36" pos:end="85:36">&amp;</operator><name pos:start="85:37" pos:end="85:43"><name pos:start="85:37" pos:end="85:37">s</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:43">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="87:17" pos:end="91:17"><if pos:start="87:17" pos:end="91:17">if <condition pos:start="87:20" pos:end="87:28">(<expr pos:start="87:21" pos:end="87:27"><name pos:start="87:21" pos:end="87:23">ret</name> <operator pos:start="87:25" pos:end="87:25">&lt;</operator> <literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr>)</condition> <block pos:start="87:30" pos:end="91:17">{<block_content pos:start="89:21" pos:end="89:30">

                    <goto pos:start="89:21" pos:end="89:30">goto <name pos:start="89:26" pos:end="89:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="93:15" pos:end="99:13">else <block pos:start="93:20" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:40">

                <comment type="block" pos:start="95:17" pos:end="95:57">/* Note: in this case, no need to wait */</comment>

                <expr_stmt pos:start="97:17" pos:end="97:40"><expr pos:start="97:17" pos:end="97:39"><call pos:start="97:17" pos:end="97:39"><name pos:start="97:17" pos:end="97:22">memset</name><argument_list pos:start="97:23" pos:end="97:39">(<argument pos:start="97:24" pos:end="97:26"><expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">buf</name></expr></argument>, <argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><literal type="number" pos:start="97:29" pos:end="97:29">0</literal></expr></argument>, <argument pos:start="97:32" pos:end="97:38"><expr pos:start="97:32" pos:end="97:38"><literal type="number" pos:start="97:32" pos:end="97:34">512</literal> <operator pos:start="97:36" pos:end="97:36">*</operator> <name pos:start="97:38" pos:end="97:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="101:11" pos:end="115:9">else if <condition pos:start="101:19" pos:end="101:58">(<expr pos:start="101:20" pos:end="101:57"><name pos:start="101:20" pos:end="101:33">cluster_offset</name> <operator pos:start="101:35" pos:end="101:35">&amp;</operator> <name pos:start="101:37" pos:end="101:57">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="101:60" pos:end="115:9">{<block_content pos:start="105:13" pos:end="113:71">

            <comment type="block" pos:start="103:13" pos:end="103:57">/* add AIO support for compressed blocks ? */</comment>

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:59">(<expr pos:start="105:17" pos:end="105:58"><call pos:start="105:17" pos:end="105:54"><name pos:start="105:17" pos:end="105:34">decompress_cluster</name><argument_list pos:start="105:35" pos:end="105:54">(<argument pos:start="105:36" pos:end="105:37"><expr pos:start="105:36" pos:end="105:37"><name pos:start="105:36" pos:end="105:37">bs</name></expr></argument>, <argument pos:start="105:40" pos:end="105:53"><expr pos:start="105:40" pos:end="105:53"><name pos:start="105:40" pos:end="105:53">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="105:56" pos:end="105:56">&lt;</operator> <literal type="number" pos:start="105:58" pos:end="105:58">0</literal></expr>)</condition> <block pos:start="105:61" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:26">

                <goto pos:start="107:17" pos:end="107:26">goto <name pos:start="107:22" pos:end="107:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="113:71"><expr pos:start="111:13" pos:end="113:70"><call pos:start="111:13" pos:end="113:70"><name pos:start="111:13" pos:end="111:18">memcpy</name><argument_list pos:start="111:19" pos:end="113:70">(<argument pos:start="111:20" pos:end="111:22"><expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">buf</name></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:60"><expr pos:start="113:20" pos:end="113:60"><name pos:start="113:20" pos:end="113:35"><name pos:start="113:20" pos:end="113:20">s</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:35">cluster_cache</name></name> <operator pos:start="113:37" pos:end="113:37">+</operator> <name pos:start="113:39" pos:end="113:54">index_in_cluster</name> <operator pos:start="113:56" pos:end="113:56">*</operator> <literal type="number" pos:start="113:58" pos:end="113:60">512</literal></expr></argument>, <argument pos:start="113:63" pos:end="113:69"><expr pos:start="113:63" pos:end="113:69"><literal type="number" pos:start="113:63" pos:end="113:65">512</literal> <operator pos:start="113:67" pos:end="113:67">*</operator> <name pos:start="113:69" pos:end="113:69">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="159:9">else <block pos:start="115:16" pos:end="159:9">{<block_content pos:start="117:13" pos:end="157:13">

            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:44">(<expr pos:start="117:17" pos:end="117:43"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:31">cluster_offset</name> <operator pos:start="117:33" pos:end="117:33">&amp;</operator> <literal type="number" pos:start="117:35" pos:end="117:37">511</literal><operator pos:start="117:38" pos:end="117:38">)</operator> <operator pos:start="117:40" pos:end="117:41">!=</operator> <literal type="number" pos:start="117:43" pos:end="117:43">0</literal></expr>)</condition> <block pos:start="117:46" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:26">

                <goto pos:start="119:17" pos:end="119:26">goto <name pos:start="119:22" pos:end="119:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:27"><name pos:start="123:13" pos:end="123:18">hd_iov</name><operator pos:start="123:19" pos:end="123:19">.</operator><name pos:start="123:20" pos:end="123:27">iov_base</name></name> <operator pos:start="123:29" pos:end="123:29">=</operator> <operator pos:start="123:31" pos:end="123:31">(</operator><name pos:start="123:32" pos:end="123:35">void</name> <operator pos:start="123:37" pos:end="123:37">*</operator><operator pos:start="123:38" pos:end="123:38">)</operator><name pos:start="123:39" pos:end="123:41">buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:37"><expr pos:start="125:13" pos:end="125:36"><name pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:18">hd_iov</name><operator pos:start="125:19" pos:end="125:19">.</operator><name pos:start="125:20" pos:end="125:26">iov_len</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:30">n</name> <operator pos:start="125:32" pos:end="125:32">*</operator> <literal type="number" pos:start="125:34" pos:end="125:36">512</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:59"><expr pos:start="127:13" pos:end="127:58"><call pos:start="127:13" pos:end="127:58"><name pos:start="127:13" pos:end="127:36">qemu_iovec_init_external</name><argument_list pos:start="127:37" pos:end="127:58">(<argument pos:start="127:38" pos:end="127:45"><expr pos:start="127:38" pos:end="127:45"><operator pos:start="127:38" pos:end="127:38">&amp;</operator><name pos:start="127:39" pos:end="127:45">hd_qiov</name></expr></argument>, <argument pos:start="127:48" pos:end="127:54"><expr pos:start="127:48" pos:end="127:54"><operator pos:start="127:48" pos:end="127:48">&amp;</operator><name pos:start="127:49" pos:end="127:54">hd_iov</name></expr></argument>, <argument pos:start="127:57" pos:end="127:57"><expr pos:start="127:57" pos:end="127:57"><literal type="number" pos:start="127:57" pos:end="127:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:43"><expr pos:start="129:13" pos:end="129:42"><call pos:start="129:13" pos:end="129:42"><name pos:start="129:13" pos:end="129:32">qemu_co_mutex_unlock</name><argument_list pos:start="129:33" pos:end="129:42">(<argument pos:start="129:34" pos:end="129:41"><expr pos:start="129:34" pos:end="129:41"><operator pos:start="129:34" pos:end="129:34">&amp;</operator><name pos:start="129:35" pos:end="129:41"><name pos:start="129:35" pos:end="129:35">s</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:41">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="135:45"><expr pos:start="131:13" pos:end="135:44"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="135:44"><name pos:start="131:19" pos:end="131:31">bdrv_co_readv</name><argument_list pos:start="131:32" pos:end="135:44">(<argument pos:start="131:33" pos:end="131:40"><expr pos:start="131:33" pos:end="131:40"><name pos:start="131:33" pos:end="131:40"><name pos:start="131:33" pos:end="131:34">bs</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:40">file</name></name></expr></argument>,

                                <argument pos:start="133:33" pos:end="133:72"><expr pos:start="133:33" pos:end="133:72"><operator pos:start="133:33" pos:end="133:33">(</operator><name pos:start="133:34" pos:end="133:47">cluster_offset</name> <operator pos:start="133:49" pos:end="133:50">&gt;&gt;</operator> <literal type="number" pos:start="133:52" pos:end="133:52">9</literal><operator pos:start="133:53" pos:end="133:53">)</operator> <operator pos:start="133:55" pos:end="133:55">+</operator> <name pos:start="133:57" pos:end="133:72">index_in_cluster</name></expr></argument>,

                                <argument pos:start="135:33" pos:end="135:33"><expr pos:start="135:33" pos:end="135:33"><name pos:start="135:33" pos:end="135:33">n</name></expr></argument>, <argument pos:start="135:36" pos:end="135:43"><expr pos:start="135:36" pos:end="135:43"><operator pos:start="135:36" pos:end="135:36">&amp;</operator><name pos:start="135:37" pos:end="135:43">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:41"><expr pos:start="137:13" pos:end="137:40"><call pos:start="137:13" pos:end="137:40"><name pos:start="137:13" pos:end="137:30">qemu_co_mutex_lock</name><argument_list pos:start="137:31" pos:end="137:40">(<argument pos:start="137:32" pos:end="137:39"><expr pos:start="137:32" pos:end="137:39"><operator pos:start="137:32" pos:end="137:32">&amp;</operator><name pos:start="137:33" pos:end="137:39"><name pos:start="137:33" pos:end="137:33">s</name><operator pos:start="137:34" pos:end="137:35">-&gt;</operator><name pos:start="137:36" pos:end="137:39">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:24">(<expr pos:start="139:17" pos:end="139:23"><name pos:start="139:17" pos:end="139:19">ret</name> <operator pos:start="139:21" pos:end="139:21">&lt;</operator> <literal type="number" pos:start="139:23" pos:end="139:23">0</literal></expr>)</condition> <block pos:start="139:26" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:22">

                <break pos:start="141:17" pos:end="141:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="145:13" pos:end="157:13"><if pos:start="145:13" pos:end="157:13">if <condition pos:start="145:16" pos:end="145:30">(<expr pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:18">bs</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:29">encrypted</name></name></expr>)</condition> <block pos:start="145:32" pos:end="157:13">{<block_content pos:start="147:17" pos:end="155:17">

                <expr_stmt pos:start="147:17" pos:end="147:34"><expr pos:start="147:17" pos:end="147:33"><call pos:start="147:17" pos:end="147:33"><name pos:start="147:17" pos:end="147:22">assert</name><argument_list pos:start="147:23" pos:end="147:33">(<argument pos:start="147:24" pos:end="147:32"><expr pos:start="147:24" pos:end="147:32"><name pos:start="147:24" pos:end="147:32"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:32">crypto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="149:17" pos:end="155:17"><if pos:start="149:17" pos:end="155:17">if <condition pos:start="149:20" pos:end="151:74">(<expr pos:start="149:21" pos:end="151:73"><call pos:start="149:21" pos:end="151:69"><name pos:start="149:21" pos:end="149:41">qcrypto_block_decrypt</name><argument_list pos:start="149:42" pos:end="151:69">(<argument pos:start="149:43" pos:end="149:51"><expr pos:start="149:43" pos:end="149:51"><name pos:start="149:43" pos:end="149:51"><name pos:start="149:43" pos:end="149:43">s</name><operator pos:start="149:44" pos:end="149:45">-&gt;</operator><name pos:start="149:46" pos:end="149:51">crypto</name></name></expr></argument>, <argument pos:start="149:54" pos:end="149:63"><expr pos:start="149:54" pos:end="149:63"><name pos:start="149:54" pos:end="149:63">sector_num</name></expr></argument>, <argument pos:start="149:66" pos:end="149:68"><expr pos:start="149:66" pos:end="149:68"><name pos:start="149:66" pos:end="149:68">buf</name></expr></argument>,

                                          <argument pos:start="151:43" pos:end="151:62"><expr pos:start="151:43" pos:end="151:62"><name pos:start="151:43" pos:end="151:43">n</name> <operator pos:start="151:45" pos:end="151:45">*</operator> <name pos:start="151:47" pos:end="151:62">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="151:65" pos:end="151:68"><expr pos:start="151:65" pos:end="151:68"><name pos:start="151:65" pos:end="151:68">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="151:71" pos:end="151:71">&lt;</operator> <literal type="number" pos:start="151:73" pos:end="151:73">0</literal></expr>)</condition> <block pos:start="151:76" pos:end="155:17">{<block_content pos:start="153:21" pos:end="153:30">

                    <goto pos:start="153:21" pos:end="153:30">goto <name pos:start="153:26" pos:end="153:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:16"><expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:24"><expr pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:18">nb_sectors</name> <operator pos:start="165:20" pos:end="165:21">-=</operator> <name pos:start="165:23" pos:end="165:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:24"><expr pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:18">sector_num</name> <operator pos:start="167:20" pos:end="167:21">+=</operator> <name pos:start="167:23" pos:end="167:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:23"><expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:11">buf</name> <operator pos:start="169:13" pos:end="169:14">+=</operator> <name pos:start="169:16" pos:end="169:16">n</name> <operator pos:start="169:18" pos:end="169:18">*</operator> <literal type="number" pos:start="169:20" pos:end="169:22">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



<label pos:start="175:1" pos:end="175:5"><name pos:start="175:1" pos:end="175:4">done</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="177:35"><expr pos:start="177:5" pos:end="177:34"><call pos:start="177:5" pos:end="177:34"><name pos:start="177:5" pos:end="177:24">qemu_co_mutex_unlock</name><argument_list pos:start="177:25" pos:end="177:34">(<argument pos:start="177:26" pos:end="177:33"><expr pos:start="177:26" pos:end="177:33"><operator pos:start="177:26" pos:end="177:26">&amp;</operator><name pos:start="177:27" pos:end="177:33"><name pos:start="177:27" pos:end="177:27">s</name><operator pos:start="177:28" pos:end="177:29">-&gt;</operator><name pos:start="177:30" pos:end="177:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="181:5" pos:end="187:5"><if pos:start="181:5" pos:end="187:5">if <condition pos:start="181:8" pos:end="181:23">(<expr pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:18"><name pos:start="181:9" pos:end="181:12">qiov</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:18">niov</name></name> <operator pos:start="181:20" pos:end="181:20">&gt;</operator> <literal type="number" pos:start="181:22" pos:end="181:22">1</literal></expr>)</condition> <block pos:start="181:25" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:29">

        <expr_stmt pos:start="183:9" pos:end="183:59"><expr pos:start="183:9" pos:end="183:58"><call pos:start="183:9" pos:end="183:58"><name pos:start="183:9" pos:end="183:27">qemu_iovec_from_buf</name><argument_list pos:start="183:28" pos:end="183:58">(<argument pos:start="183:29" pos:end="183:32"><expr pos:start="183:29" pos:end="183:32"><name pos:start="183:29" pos:end="183:32">qiov</name></expr></argument>, <argument pos:start="183:35" pos:end="183:35"><expr pos:start="183:35" pos:end="183:35"><literal type="number" pos:start="183:35" pos:end="183:35">0</literal></expr></argument>, <argument pos:start="183:38" pos:end="183:45"><expr pos:start="183:38" pos:end="183:45"><name pos:start="183:38" pos:end="183:45">orig_buf</name></expr></argument>, <argument pos:start="183:48" pos:end="183:57"><expr pos:start="183:48" pos:end="183:57"><name pos:start="183:48" pos:end="183:57"><name pos:start="183:48" pos:end="183:51">qiov</name><operator pos:start="183:52" pos:end="183:53">-&gt;</operator><name pos:start="183:54" pos:end="183:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:29"><expr pos:start="185:9" pos:end="185:28"><call pos:start="185:9" pos:end="185:28"><name pos:start="185:9" pos:end="185:18">qemu_vfree</name><argument_list pos:start="185:19" pos:end="185:28">(<argument pos:start="185:20" pos:end="185:27"><expr pos:start="185:20" pos:end="185:27"><name pos:start="185:20" pos:end="185:27">orig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="191:5" pos:end="191:15">return <expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">ret</name></expr>;</return>



<label pos:start="195:1" pos:end="195:5"><name pos:start="195:1" pos:end="195:4">fail</name>:</label>

    <expr_stmt pos:start="197:5" pos:end="197:15"><expr pos:start="197:5" pos:end="197:14"><name pos:start="197:5" pos:end="197:7">ret</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <operator pos:start="197:11" pos:end="197:11">-</operator><name pos:start="197:12" pos:end="197:14">EIO</name></expr>;</expr_stmt>

    <goto pos:start="199:5" pos:end="199:14">goto <name pos:start="199:10" pos:end="199:13">done</name>;</goto>

</block_content>}</block></function>
</unit>
