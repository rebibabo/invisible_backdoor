<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17281.c" pos:tabs="8"><function pos:start="1:1" pos:end="319:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">xlnx_zynqmp_realize</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:43">DeviceState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="319:1">{<block_content pos:start="5:5" pos:end="317:72">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">XlnxZynqMPState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><call pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:36">XLNX_ZYNQMP</name><argument_list pos:start="5:37" pos:end="5:41">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:31">system_memory</name> <init pos:start="7:33" pos:end="7:53">= <expr pos:start="7:35" pos:end="7:53"><call pos:start="7:35" pos:end="7:53"><name pos:start="7:35" pos:end="7:51">get_system_memory</name><argument_list pos:start="7:52" pos:end="7:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:67"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">boot_cpu</name> <init pos:start="11:26" pos:end="11:67">= <expr pos:start="11:28" pos:end="11:67"><ternary pos:start="11:28" pos:end="11:67"><condition pos:start="11:28" pos:end="11:40"><expr pos:start="11:28" pos:end="11:38"><name pos:start="11:28" pos:end="11:38"><name pos:start="11:28" pos:end="11:28">s</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:38">boot_cpu</name></name></expr> ?</condition><then pos:start="11:42" pos:end="11:52"> <expr pos:start="11:42" pos:end="11:52"><name pos:start="11:42" pos:end="11:52"><name pos:start="11:42" pos:end="11:42">s</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:52">boot_cpu</name></name></expr> </then><else pos:start="11:54" pos:end="11:67">: <expr pos:start="11:56" pos:end="11:67"><literal type="string" pos:start="11:56" pos:end="11:67">"apu-cpu[0]"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">qemu_irq</name></type> <name pos:start="13:14" pos:end="13:38"><name pos:start="13:14" pos:end="13:20">gic_spi</name><index pos:start="13:21" pos:end="13:38">[<expr pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:37">GIC_NUM_SPI_INTR</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">err</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:35">/* Create the four OCM banks */</comment>

    <for pos:start="21:5" pos:end="45:5">for <control pos:start="21:9" pos:end="21:51">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:46"><expr pos:start="21:17" pos:end="21:45"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <name pos:start="21:21" pos:end="21:45">XLNX_ZYNQMP_NUM_OCM_BANKS</name></expr>;</condition> <incr pos:start="21:48" pos:end="21:50"><expr pos:start="21:48" pos:end="21:50"><name pos:start="21:48" pos:end="21:48">i</name><operator pos:start="21:49" pos:end="21:50">++</operator></expr></incr>)</control> <block pos:start="21:53" pos:end="45:5">{<block_content pos:start="23:9" pos:end="43:25">

        <decl_stmt pos:start="23:9" pos:end="23:70"><decl pos:start="23:9" pos:end="23:69"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">char</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:22">ocm_name</name> <init pos:start="23:24" pos:end="23:69">= <expr pos:start="23:26" pos:end="23:69"><call pos:start="23:26" pos:end="23:69"><name pos:start="23:26" pos:end="23:40">g_strdup_printf</name><argument_list pos:start="23:41" pos:end="23:69">(<argument pos:start="23:42" pos:end="23:65"><expr pos:start="23:42" pos:end="23:65"><literal type="string" pos:start="23:42" pos:end="23:65">"zynqmp.ocm_ram_bank_%d"</literal></expr></argument>, <argument pos:start="23:68" pos:end="23:68"><expr pos:start="23:68" pos:end="23:68"><name pos:start="23:68" pos:end="23:68">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="29:71"><expr pos:start="27:9" pos:end="29:70"><call pos:start="27:9" pos:end="29:70"><name pos:start="27:9" pos:end="27:30">memory_region_init_ram</name><argument_list pos:start="27:31" pos:end="29:70">(<argument pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><operator pos:start="27:32" pos:end="27:32">&amp;</operator><name pos:start="27:33" pos:end="27:45"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:42">ocm_ram</name><index pos:start="27:43" pos:end="27:45">[<expr pos:start="27:44" pos:end="27:44"><name pos:start="27:44" pos:end="27:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="27:48" pos:end="27:51"><expr pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">NULL</name></expr></argument>, <argument pos:start="27:54" pos:end="27:61"><expr pos:start="27:54" pos:end="27:61"><name pos:start="27:54" pos:end="27:61">ocm_name</name></expr></argument>,

                               <argument pos:start="29:32" pos:end="29:55"><expr pos:start="29:32" pos:end="29:55"><name pos:start="29:32" pos:end="29:55">XLNX_ZYNQMP_OCM_RAM_SIZE</name></expr></argument>, <argument pos:start="29:58" pos:end="29:69"><expr pos:start="29:58" pos:end="29:69"><operator pos:start="29:58" pos:end="29:58">&amp;</operator><name pos:start="29:59" pos:end="29:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:52"><expr pos:start="31:9" pos:end="31:51"><call pos:start="31:9" pos:end="31:51"><name pos:start="31:9" pos:end="31:35">vmstate_register_ram_global</name><argument_list pos:start="31:36" pos:end="31:51">(<argument pos:start="31:37" pos:end="31:50"><expr pos:start="31:37" pos:end="31:50"><operator pos:start="31:37" pos:end="31:37">&amp;</operator><name pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:38">s</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:47">ocm_ram</name><index pos:start="31:48" pos:end="31:50">[<expr pos:start="31:49" pos:end="31:49"><name pos:start="31:49" pos:end="31:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="39:52"><expr pos:start="33:9" pos:end="39:51"><call pos:start="33:9" pos:end="39:51"><name pos:start="33:9" pos:end="33:35">memory_region_add_subregion</name><argument_list pos:start="33:36" pos:end="39:51">(<argument pos:start="33:37" pos:end="33:55"><expr pos:start="33:37" pos:end="33:55"><call pos:start="33:37" pos:end="33:55"><name pos:start="33:37" pos:end="33:53">get_system_memory</name><argument_list pos:start="33:54" pos:end="33:55">()</argument_list></call></expr></argument>,

                                    <argument pos:start="35:37" pos:end="37:68"><expr pos:start="35:37" pos:end="37:68"><name pos:start="35:37" pos:end="35:65">XLNX_ZYNQMP_OCM_RAM_0_ADDRESS</name> <operator pos:start="35:67" pos:end="35:67">+</operator>

                                        <name pos:start="37:41" pos:end="37:41">i</name> <operator pos:start="37:43" pos:end="37:43">*</operator> <name pos:start="37:45" pos:end="37:68">XLNX_ZYNQMP_OCM_RAM_SIZE</name></expr></argument>,

                                    <argument pos:start="39:37" pos:end="39:50"><expr pos:start="39:37" pos:end="39:50"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:50"><name pos:start="39:38" pos:end="39:38">s</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:47">ocm_ram</name><index pos:start="39:48" pos:end="39:50">[<expr pos:start="39:49" pos:end="39:49"><name pos:start="39:49" pos:end="39:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:14">g_free</name><argument_list pos:start="43:15" pos:end="43:24">(<argument pos:start="43:16" pos:end="43:23"><expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:23">ocm_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="49:5" pos:end="49:76"><expr pos:start="49:5" pos:end="49:75"><call pos:start="49:5" pos:end="49:75"><name pos:start="49:5" pos:end="49:24">qdev_prop_set_uint32</name><argument_list pos:start="49:25" pos:end="49:75">(<argument pos:start="49:26" pos:end="49:40"><expr pos:start="49:26" pos:end="49:40"><call pos:start="49:26" pos:end="49:40"><name pos:start="49:26" pos:end="49:31">DEVICE</name><argument_list pos:start="49:32" pos:end="49:40">(<argument pos:start="49:33" pos:end="49:39"><expr pos:start="49:33" pos:end="49:39"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:39"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:39">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:43" pos:end="49:51"><expr pos:start="49:43" pos:end="49:51"><literal type="string" pos:start="49:43" pos:end="49:51">"num-irq"</literal></expr></argument>, <argument pos:start="49:54" pos:end="49:74"><expr pos:start="49:54" pos:end="49:74"><name pos:start="49:54" pos:end="49:69">GIC_NUM_SPI_INTR</name> <operator pos:start="49:71" pos:end="49:71">+</operator> <literal type="number" pos:start="49:73" pos:end="49:74">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:57"><expr pos:start="51:5" pos:end="51:56"><call pos:start="51:5" pos:end="51:56"><name pos:start="51:5" pos:end="51:24">qdev_prop_set_uint32</name><argument_list pos:start="51:25" pos:end="51:56">(<argument pos:start="51:26" pos:end="51:40"><expr pos:start="51:26" pos:end="51:40"><call pos:start="51:26" pos:end="51:40"><name pos:start="51:26" pos:end="51:31">DEVICE</name><argument_list pos:start="51:32" pos:end="51:40">(<argument pos:start="51:33" pos:end="51:39"><expr pos:start="51:33" pos:end="51:39"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:39"><name pos:start="51:34" pos:end="51:34">s</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:39">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:43" pos:end="51:52"><expr pos:start="51:43" pos:end="51:52"><literal type="string" pos:start="51:43" pos:end="51:52">"revision"</literal></expr></argument>, <argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:79"><expr pos:start="53:5" pos:end="53:78"><call pos:start="53:5" pos:end="53:78"><name pos:start="53:5" pos:end="53:24">qdev_prop_set_uint32</name><argument_list pos:start="53:25" pos:end="53:78">(<argument pos:start="53:26" pos:end="53:40"><expr pos:start="53:26" pos:end="53:40"><call pos:start="53:26" pos:end="53:40"><name pos:start="53:26" pos:end="53:31">DEVICE</name><argument_list pos:start="53:32" pos:end="53:40">(<argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><operator pos:start="53:33" pos:end="53:33">&amp;</operator><name pos:start="53:34" pos:end="53:39"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:39">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:43" pos:end="53:51"><expr pos:start="53:43" pos:end="53:51"><literal type="string" pos:start="53:43" pos:end="53:51">"num-cpu"</literal></expr></argument>, <argument pos:start="53:54" pos:end="53:77"><expr pos:start="53:54" pos:end="53:77"><name pos:start="53:54" pos:end="53:77">XLNX_ZYNQMP_NUM_APU_CPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:70"><expr pos:start="55:5" pos:end="55:69"><call pos:start="55:5" pos:end="55:69"><name pos:start="55:5" pos:end="55:28">object_property_set_bool</name><argument_list pos:start="55:29" pos:end="55:69">(<argument pos:start="55:30" pos:end="55:44"><expr pos:start="55:30" pos:end="55:44"><call pos:start="55:30" pos:end="55:44"><name pos:start="55:30" pos:end="55:35">OBJECT</name><argument_list pos:start="55:36" pos:end="55:44">(<argument pos:start="55:37" pos:end="55:43"><expr pos:start="55:37" pos:end="55:43"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:43"><name pos:start="55:38" pos:end="55:38">s</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:43">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:47" pos:end="55:50"><expr pos:start="55:47" pos:end="55:50"><name pos:start="55:47" pos:end="55:50">true</name></expr></argument>, <argument pos:start="55:53" pos:end="55:62"><expr pos:start="55:53" pos:end="55:62"><literal type="string" pos:start="55:53" pos:end="55:62">"realized"</literal></expr></argument>, <argument pos:start="55:65" pos:end="55:68"><expr pos:start="55:65" pos:end="55:68"><operator pos:start="55:65" pos:end="55:65">&amp;</operator><name pos:start="55:66" pos:end="55:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">err</name></expr>)</condition> <block pos:start="57:14" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:15">

        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:23">error_propagate</name><argument_list pos:start="59:24" pos:end="59:34">(<argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><name pos:start="59:25" pos:end="59:28">errp</name></expr></argument>, <argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:75"><expr pos:start="65:5" pos:end="65:74"><call pos:start="65:5" pos:end="65:74"><name pos:start="65:5" pos:end="65:10">assert</name><argument_list pos:start="65:11" pos:end="65:74">(<argument pos:start="65:12" pos:end="65:73"><expr pos:start="65:12" pos:end="65:73"><call pos:start="65:12" pos:end="65:46"><name pos:start="65:12" pos:end="65:21">ARRAY_SIZE</name><argument_list pos:start="65:22" pos:end="65:46">(<argument pos:start="65:23" pos:end="65:45"><expr pos:start="65:23" pos:end="65:45"><name pos:start="65:23" pos:end="65:45">xlnx_zynqmp_gic_regions</name></expr></argument>)</argument_list></call> <operator pos:start="65:48" pos:end="65:49">==</operator> <name pos:start="65:51" pos:end="65:73">XLNX_ZYNQMP_GIC_REGIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="101:5">for <control pos:start="67:9" pos:end="67:49">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:44"><expr pos:start="67:17" pos:end="67:43"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:43">XLNX_ZYNQMP_GIC_REGIONS</name></expr>;</condition> <incr pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><name pos:start="67:46" pos:end="67:46">i</name><operator pos:start="67:47" pos:end="67:48">++</operator></expr></incr>)</control> <block pos:start="67:51" pos:end="101:5">{<block_content pos:start="69:9" pos:end="99:9">

        <decl_stmt pos:start="69:9" pos:end="69:52"><decl pos:start="69:9" pos:end="69:51"><type pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:20">SysBusDevice</name> <modifier pos:start="69:22" pos:end="69:22">*</modifier></type><name pos:start="69:23" pos:end="69:25">gic</name> <init pos:start="69:27" pos:end="69:51">= <expr pos:start="69:29" pos:end="69:51"><call pos:start="69:29" pos:end="69:51"><name pos:start="69:29" pos:end="69:42">SYS_BUS_DEVICE</name><argument_list pos:start="69:43" pos:end="69:51">(<argument pos:start="69:44" pos:end="69:50"><expr pos:start="69:44" pos:end="69:50"><operator pos:start="69:44" pos:end="69:44">&amp;</operator><name pos:start="69:45" pos:end="69:50"><name pos:start="69:45" pos:end="69:45">s</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:50">gic</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:67"><decl pos:start="71:9" pos:end="71:66"><type pos:start="71:9" pos:end="71:35"><specifier pos:start="71:9" pos:end="71:13">const</specifier> <name pos:start="71:15" pos:end="71:33">XlnxZynqMPGICRegion</name> <modifier pos:start="71:35" pos:end="71:35">*</modifier></type><name pos:start="71:36" pos:end="71:36">r</name> <init pos:start="71:38" pos:end="71:66">= <expr pos:start="71:40" pos:end="71:66"><operator pos:start="71:40" pos:end="71:40">&amp;</operator><name pos:start="71:41" pos:end="71:66"><name pos:start="71:41" pos:end="71:63">xlnx_zynqmp_gic_regions</name><index pos:start="71:64" pos:end="71:66">[<expr pos:start="71:65" pos:end="71:65"><name pos:start="71:65" pos:end="71:65">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:72"><decl pos:start="73:9" pos:end="73:71"><type pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:20">MemoryRegion</name> <modifier pos:start="73:22" pos:end="73:22">*</modifier></type><name pos:start="73:23" pos:end="73:24">mr</name> <init pos:start="73:26" pos:end="73:71">= <expr pos:start="73:28" pos:end="73:71"><call pos:start="73:28" pos:end="73:71"><name pos:start="73:28" pos:end="73:49">sysbus_mmio_get_region</name><argument_list pos:start="73:50" pos:end="73:71">(<argument pos:start="73:51" pos:end="73:53"><expr pos:start="73:51" pos:end="73:53"><name pos:start="73:51" pos:end="73:53">gic</name></expr></argument>, <argument pos:start="73:56" pos:end="73:70"><expr pos:start="73:56" pos:end="73:70"><name pos:start="73:56" pos:end="73:70"><name pos:start="73:56" pos:end="73:56">r</name><operator pos:start="73:57" pos:end="73:58">-&gt;</operator><name pos:start="73:59" pos:end="73:70">region_index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:35"><decl pos:start="75:9" pos:end="75:34"><type pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:16">uint32_t</name></type> <name pos:start="75:18" pos:end="75:21">addr</name> <init pos:start="75:23" pos:end="75:34">= <expr pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:25">r</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:34">address</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:14"><decl pos:start="77:9" pos:end="77:13"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:52"><expr pos:start="81:9" pos:end="81:51"><call pos:start="81:9" pos:end="81:51"><name pos:start="81:9" pos:end="81:23">sysbus_mmio_map</name><argument_list pos:start="81:24" pos:end="81:51">(<argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:27">gic</name></expr></argument>, <argument pos:start="81:30" pos:end="81:44"><expr pos:start="81:30" pos:end="81:44"><name pos:start="81:30" pos:end="81:44"><name pos:start="81:30" pos:end="81:30">r</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:44">region_index</name></name></expr></argument>, <argument pos:start="81:47" pos:end="81:50"><expr pos:start="81:47" pos:end="81:50"><name pos:start="81:47" pos:end="81:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="85:9" pos:end="99:9">for <control pos:start="85:13" pos:end="85:53">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">j</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:48"><expr pos:start="85:21" pos:end="85:47"><name pos:start="85:21" pos:end="85:21">j</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:47">XLNX_ZYNQMP_GIC_ALIASES</name></expr>;</condition> <incr pos:start="85:50" pos:end="85:52"><expr pos:start="85:50" pos:end="85:52"><name pos:start="85:50" pos:end="85:50">j</name><operator pos:start="85:51" pos:end="85:52">++</operator></expr></incr>)</control> <block pos:start="85:55" pos:end="99:9">{<block_content pos:start="87:13" pos:end="97:68">

            <decl_stmt pos:start="87:13" pos:end="87:51"><decl pos:start="87:13" pos:end="87:50"><type pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:24">MemoryRegion</name> <modifier pos:start="87:26" pos:end="87:26">*</modifier></type><name pos:start="87:27" pos:end="87:31">alias</name> <init pos:start="87:33" pos:end="87:50">= <expr pos:start="87:35" pos:end="87:50"><operator pos:start="87:35" pos:end="87:35">&amp;</operator><name pos:start="87:36" pos:end="87:50"><name pos:start="87:36" pos:end="87:36">s</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:44">gic_mr</name><index pos:start="87:45" pos:end="87:47">[<expr pos:start="87:46" pos:end="87:46"><name pos:start="87:46" pos:end="87:46">i</name></expr>]</index><index pos:start="87:48" pos:end="87:50">[<expr pos:start="87:49" pos:end="87:49"><name pos:start="87:49" pos:end="87:49">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:48"><expr pos:start="91:13" pos:end="91:47"><name pos:start="91:13" pos:end="91:16">addr</name> <operator pos:start="91:18" pos:end="91:19">+=</operator> <name pos:start="91:21" pos:end="91:47">XLNX_ZYNQMP_GIC_REGION_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="95:69"><expr pos:start="93:13" pos:end="95:68"><call pos:start="93:13" pos:end="95:68"><name pos:start="93:13" pos:end="93:36">memory_region_init_alias</name><argument_list pos:start="93:37" pos:end="95:68">(<argument pos:start="93:38" pos:end="93:42"><expr pos:start="93:38" pos:end="93:42"><name pos:start="93:38" pos:end="93:42">alias</name></expr></argument>, <argument pos:start="93:45" pos:end="93:53"><expr pos:start="93:45" pos:end="93:53"><call pos:start="93:45" pos:end="93:53"><name pos:start="93:45" pos:end="93:50">OBJECT</name><argument_list pos:start="93:51" pos:end="93:53">(<argument pos:start="93:52" pos:end="93:52"><expr pos:start="93:52" pos:end="93:52"><name pos:start="93:52" pos:end="93:52">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:56" pos:end="93:73"><expr pos:start="93:56" pos:end="93:73"><literal type="string" pos:start="93:56" pos:end="93:73">"zynqmp-gic-alias"</literal></expr></argument>, <argument pos:start="93:76" pos:end="93:77"><expr pos:start="93:76" pos:end="93:77"><name pos:start="93:76" pos:end="93:77">mr</name></expr></argument>,

                                     <argument pos:start="95:38" pos:end="95:38"><expr pos:start="95:38" pos:end="95:38"><literal type="number" pos:start="95:38" pos:end="95:38">0</literal></expr></argument>, <argument pos:start="95:41" pos:end="95:67"><expr pos:start="95:41" pos:end="95:67"><name pos:start="95:41" pos:end="95:67">XLNX_ZYNQMP_GIC_REGION_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:68"><expr pos:start="97:13" pos:end="97:67"><call pos:start="97:13" pos:end="97:67"><name pos:start="97:13" pos:end="97:39">memory_region_add_subregion</name><argument_list pos:start="97:40" pos:end="97:67">(<argument pos:start="97:41" pos:end="97:53"><expr pos:start="97:41" pos:end="97:53"><name pos:start="97:41" pos:end="97:53">system_memory</name></expr></argument>, <argument pos:start="97:56" pos:end="97:59"><expr pos:start="97:56" pos:end="97:59"><name pos:start="97:56" pos:end="97:59">addr</name></expr></argument>, <argument pos:start="97:62" pos:end="97:66"><expr pos:start="97:62" pos:end="97:66"><name pos:start="97:62" pos:end="97:66">alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <for pos:start="105:5" pos:end="175:5">for <control pos:start="105:9" pos:end="105:50">(<init pos:start="105:10" pos:end="105:15"><expr pos:start="105:10" pos:end="105:14"><name pos:start="105:10" pos:end="105:10">i</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>;</init> <condition pos:start="105:17" pos:end="105:45"><expr pos:start="105:17" pos:end="105:44"><name pos:start="105:17" pos:end="105:17">i</name> <operator pos:start="105:19" pos:end="105:19">&lt;</operator> <name pos:start="105:21" pos:end="105:44">XLNX_ZYNQMP_NUM_APU_CPUS</name></expr>;</condition> <incr pos:start="105:47" pos:end="105:49"><expr pos:start="105:47" pos:end="105:49"><name pos:start="105:47" pos:end="105:47">i</name><operator pos:start="105:48" pos:end="105:49">++</operator></expr></incr>)</control> <block pos:start="105:52" pos:end="175:5">{<block_content pos:start="107:9" pos:end="173:62">

        <decl_stmt pos:start="107:9" pos:end="107:21"><decl pos:start="107:9" pos:end="107:20"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">qemu_irq</name></type> <name pos:start="107:18" pos:end="107:20">irq</name></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:19"><decl pos:start="109:9" pos:end="109:18"><type pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:12">char</name> <modifier pos:start="109:14" pos:end="109:14">*</modifier></type><name pos:start="109:15" pos:end="109:18">name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="113:9" pos:end="115:62"><expr pos:start="113:9" pos:end="115:61"><call pos:start="113:9" pos:end="115:61"><name pos:start="113:9" pos:end="113:31">object_property_set_int</name><argument_list pos:start="113:32" pos:end="115:61">(<argument pos:start="113:33" pos:end="113:54"><expr pos:start="113:33" pos:end="113:54"><call pos:start="113:33" pos:end="113:54"><name pos:start="113:33" pos:end="113:38">OBJECT</name><argument_list pos:start="113:39" pos:end="113:54">(<argument pos:start="113:40" pos:end="113:53"><expr pos:start="113:40" pos:end="113:53"><operator pos:start="113:40" pos:end="113:40">&amp;</operator><name pos:start="113:41" pos:end="113:53"><name pos:start="113:41" pos:end="113:41">s</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:50">apu_cpu</name><index pos:start="113:51" pos:end="113:53">[<expr pos:start="113:52" pos:end="113:52"><name pos:start="113:52" pos:end="113:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:57" pos:end="113:77"><expr pos:start="113:57" pos:end="113:77"><name pos:start="113:57" pos:end="113:77">QEMU_PSCI_CONDUIT_SMC</name></expr></argument>,

                                <argument pos:start="115:33" pos:end="115:46"><expr pos:start="115:33" pos:end="115:46"><literal type="string" pos:start="115:33" pos:end="115:46">"psci-conduit"</literal></expr></argument>, <argument pos:start="115:49" pos:end="115:60"><expr pos:start="115:49" pos:end="115:60"><operator pos:start="115:49" pos:end="115:49">&amp;</operator><name pos:start="115:50" pos:end="115:60">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:75"><expr pos:start="119:9" pos:end="119:74"><name pos:start="119:9" pos:end="119:12">name</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:74"><name pos:start="119:16" pos:end="119:50">object_get_canonical_path_component</name><argument_list pos:start="119:51" pos:end="119:74">(<argument pos:start="119:52" pos:end="119:73"><expr pos:start="119:52" pos:end="119:73"><call pos:start="119:52" pos:end="119:73"><name pos:start="119:52" pos:end="119:57">OBJECT</name><argument_list pos:start="119:58" pos:end="119:73">(<argument pos:start="119:59" pos:end="119:72"><expr pos:start="119:59" pos:end="119:72"><operator pos:start="119:59" pos:end="119:59">&amp;</operator><name pos:start="119:60" pos:end="119:72"><name pos:start="119:60" pos:end="119:60">s</name><operator pos:start="119:61" pos:end="119:62">-&gt;</operator><name pos:start="119:63" pos:end="119:69">apu_cpu</name><index pos:start="119:70" pos:end="119:72">[<expr pos:start="119:71" pos:end="119:71"><name pos:start="119:71" pos:end="119:71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="133:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:35">(<expr pos:start="121:13" pos:end="121:34"><call pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:18">strcmp</name><argument_list pos:start="121:19" pos:end="121:34">(<argument pos:start="121:20" pos:end="121:23"><expr pos:start="121:20" pos:end="121:23"><name pos:start="121:20" pos:end="121:23">name</name></expr></argument>, <argument pos:start="121:26" pos:end="121:33"><expr pos:start="121:26" pos:end="121:33"><name pos:start="121:26" pos:end="121:33">boot_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:37" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:72">

            <comment type="block" pos:start="123:13" pos:end="123:65">/* Secondary CPUs start in PSCI powered-down state */</comment>

            <expr_stmt pos:start="125:13" pos:end="127:72"><expr pos:start="125:13" pos:end="127:71"><call pos:start="125:13" pos:end="127:71"><name pos:start="125:13" pos:end="125:36">object_property_set_bool</name><argument_list pos:start="125:37" pos:end="127:71">(<argument pos:start="125:38" pos:end="125:59"><expr pos:start="125:38" pos:end="125:59"><call pos:start="125:38" pos:end="125:59"><name pos:start="125:38" pos:end="125:43">OBJECT</name><argument_list pos:start="125:44" pos:end="125:59">(<argument pos:start="125:45" pos:end="125:58"><expr pos:start="125:45" pos:end="125:58"><operator pos:start="125:45" pos:end="125:45">&amp;</operator><name pos:start="125:46" pos:end="125:58"><name pos:start="125:46" pos:end="125:46">s</name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:55">apu_cpu</name><index pos:start="125:56" pos:end="125:58">[<expr pos:start="125:57" pos:end="125:57"><name pos:start="125:57" pos:end="125:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="125:62" pos:end="125:65"><expr pos:start="125:62" pos:end="125:65"><name pos:start="125:62" pos:end="125:65">true</name></expr></argument>,

                                     <argument pos:start="127:38" pos:end="127:56"><expr pos:start="127:38" pos:end="127:56"><literal type="string" pos:start="127:38" pos:end="127:56">"start-powered-off"</literal></expr></argument>, <argument pos:start="127:59" pos:end="127:70"><expr pos:start="127:59" pos:end="127:70"><operator pos:start="127:59" pos:end="127:59">&amp;</operator><name pos:start="127:60" pos:end="127:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="133:9">else <block pos:start="129:16" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:45">

            <expr_stmt pos:start="131:13" pos:end="131:45"><expr pos:start="131:13" pos:end="131:44"><name pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:27">boot_cpu_ptr</name></name> <operator pos:start="131:29" pos:end="131:29">=</operator> <operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:44"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:41">apu_cpu</name><index pos:start="131:42" pos:end="131:44">[<expr pos:start="131:43" pos:end="131:43"><name pos:start="131:43" pos:end="131:43">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:21"><expr pos:start="135:9" pos:end="135:20"><call pos:start="135:9" pos:end="135:20"><name pos:start="135:9" pos:end="135:14">g_free</name><argument_list pos:start="135:15" pos:end="135:20">(<argument pos:start="135:16" pos:end="135:19"><expr pos:start="135:16" pos:end="135:19"><name pos:start="135:16" pos:end="135:19">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="139:9" pos:end="141:60"><expr pos:start="139:9" pos:end="141:59"><call pos:start="139:9" pos:end="141:59"><name pos:start="139:9" pos:end="139:31">object_property_set_int</name><argument_list pos:start="139:32" pos:end="141:59">(<argument pos:start="139:33" pos:end="139:54"><expr pos:start="139:33" pos:end="139:54"><call pos:start="139:33" pos:end="139:54"><name pos:start="139:33" pos:end="139:38">OBJECT</name><argument_list pos:start="139:39" pos:end="139:54">(<argument pos:start="139:40" pos:end="139:53"><expr pos:start="139:40" pos:end="139:53"><operator pos:start="139:40" pos:end="139:40">&amp;</operator><name pos:start="139:41" pos:end="139:53"><name pos:start="139:41" pos:end="139:41">s</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:50">apu_cpu</name><index pos:start="139:51" pos:end="139:53">[<expr pos:start="139:52" pos:end="139:52"><name pos:start="139:52" pos:end="139:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="139:57" pos:end="139:69"><expr pos:start="139:57" pos:end="139:69"><name pos:start="139:57" pos:end="139:69">GIC_BASE_ADDR</name></expr></argument>,

                                <argument pos:start="141:33" pos:end="141:44"><expr pos:start="141:33" pos:end="141:44"><literal type="string" pos:start="141:33" pos:end="141:44">"reset-cbar"</literal></expr></argument>, <argument pos:start="141:47" pos:end="141:58"><expr pos:start="141:47" pos:end="141:58"><operator pos:start="141:47" pos:end="141:47">&amp;</operator><name pos:start="141:48" pos:end="141:58">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="145:39"><expr pos:start="143:9" pos:end="145:38"><call pos:start="143:9" pos:end="145:38"><name pos:start="143:9" pos:end="143:32">object_property_set_bool</name><argument_list pos:start="143:33" pos:end="145:38">(<argument pos:start="143:34" pos:end="143:55"><expr pos:start="143:34" pos:end="143:55"><call pos:start="143:34" pos:end="143:55"><name pos:start="143:34" pos:end="143:39">OBJECT</name><argument_list pos:start="143:40" pos:end="143:55">(<argument pos:start="143:41" pos:end="143:54"><expr pos:start="143:41" pos:end="143:54"><operator pos:start="143:41" pos:end="143:41">&amp;</operator><name pos:start="143:42" pos:end="143:54"><name pos:start="143:42" pos:end="143:42">s</name><operator pos:start="143:43" pos:end="143:44">-&gt;</operator><name pos:start="143:45" pos:end="143:51">apu_cpu</name><index pos:start="143:52" pos:end="143:54">[<expr pos:start="143:53" pos:end="143:53"><name pos:start="143:53" pos:end="143:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:58" pos:end="143:61"><expr pos:start="143:58" pos:end="143:61"><name pos:start="143:58" pos:end="143:61">true</name></expr></argument>, <argument pos:start="143:64" pos:end="143:73"><expr pos:start="143:64" pos:end="143:73"><literal type="string" pos:start="143:64" pos:end="143:73">"realized"</literal></expr></argument>,

                                 <argument pos:start="145:34" pos:end="145:37"><expr pos:start="145:34" pos:end="145:37"><operator pos:start="145:34" pos:end="145:34">&amp;</operator><name pos:start="145:35" pos:end="145:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:16">(<expr pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">err</name></expr>)</condition> <block pos:start="147:18" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:19">

            <expr_stmt pos:start="149:13" pos:end="149:39"><expr pos:start="149:13" pos:end="149:38"><call pos:start="149:13" pos:end="149:38"><name pos:start="149:13" pos:end="149:27">error_propagate</name><argument_list pos:start="149:28" pos:end="149:38">(<argument pos:start="149:29" pos:end="149:32"><expr pos:start="149:29" pos:end="149:32"><name pos:start="149:29" pos:end="149:32">errp</name></expr></argument>, <argument pos:start="149:35" pos:end="149:37"><expr pos:start="149:35" pos:end="149:37"><name pos:start="149:35" pos:end="149:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="161:58"><expr pos:start="157:9" pos:end="161:57"><call pos:start="157:9" pos:end="161:57"><name pos:start="157:9" pos:end="157:26">sysbus_connect_irq</name><argument_list pos:start="157:27" pos:end="161:57">(<argument pos:start="157:28" pos:end="157:50"><expr pos:start="157:28" pos:end="157:50"><call pos:start="157:28" pos:end="157:50"><name pos:start="157:28" pos:end="157:41">SYS_BUS_DEVICE</name><argument_list pos:start="157:42" pos:end="157:50">(<argument pos:start="157:43" pos:end="157:49"><expr pos:start="157:43" pos:end="157:49"><operator pos:start="157:43" pos:end="157:43">&amp;</operator><name pos:start="157:44" pos:end="157:49"><name pos:start="157:44" pos:end="157:44">s</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:49">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:53" pos:end="157:53"><expr pos:start="157:53" pos:end="157:53"><name pos:start="157:53" pos:end="157:53">i</name></expr></argument>,

                           <argument pos:start="159:28" pos:end="161:56"><expr pos:start="159:28" pos:end="161:56"><call pos:start="159:28" pos:end="161:56"><name pos:start="159:28" pos:end="159:43">qdev_get_gpio_in</name><argument_list pos:start="159:44" pos:end="161:56">(<argument pos:start="159:45" pos:end="159:66"><expr pos:start="159:45" pos:end="159:66"><call pos:start="159:45" pos:end="159:66"><name pos:start="159:45" pos:end="159:50">DEVICE</name><argument_list pos:start="159:51" pos:end="159:66">(<argument pos:start="159:52" pos:end="159:65"><expr pos:start="159:52" pos:end="159:65"><operator pos:start="159:52" pos:end="159:52">&amp;</operator><name pos:start="159:53" pos:end="159:65"><name pos:start="159:53" pos:end="159:53">s</name><operator pos:start="159:54" pos:end="159:55">-&gt;</operator><name pos:start="159:56" pos:end="159:62">apu_cpu</name><index pos:start="159:63" pos:end="159:65">[<expr pos:start="159:64" pos:end="159:64"><name pos:start="159:64" pos:end="159:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="161:45" pos:end="161:55"><expr pos:start="161:45" pos:end="161:55"><name pos:start="161:45" pos:end="161:55">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="165:73"><expr pos:start="163:9" pos:end="165:72"><name pos:start="163:9" pos:end="163:11">irq</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="165:72"><name pos:start="163:15" pos:end="163:30">qdev_get_gpio_in</name><argument_list pos:start="163:31" pos:end="165:72">(<argument pos:start="163:32" pos:end="163:46"><expr pos:start="163:32" pos:end="163:46"><call pos:start="163:32" pos:end="163:46"><name pos:start="163:32" pos:end="163:37">DEVICE</name><argument_list pos:start="163:38" pos:end="163:46">(<argument pos:start="163:39" pos:end="163:45"><expr pos:start="163:39" pos:end="163:45"><operator pos:start="163:39" pos:end="163:39">&amp;</operator><name pos:start="163:40" pos:end="163:45"><name pos:start="163:40" pos:end="163:40">s</name><operator pos:start="163:41" pos:end="163:42">-&gt;</operator><name pos:start="163:43" pos:end="163:45">gic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="165:32" pos:end="165:71"><expr pos:start="165:32" pos:end="165:71"><call pos:start="165:32" pos:end="165:71"><name pos:start="165:32" pos:end="165:48">arm_gic_ppi_index</name><argument_list pos:start="165:49" pos:end="165:71">(<argument pos:start="165:50" pos:end="165:50"><expr pos:start="165:50" pos:end="165:50"><name pos:start="165:50" pos:end="165:50">i</name></expr></argument>, <argument pos:start="165:53" pos:end="165:70"><expr pos:start="165:53" pos:end="165:70"><name pos:start="165:53" pos:end="165:70">ARM_PHYS_TIMER_PPI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:62"><expr pos:start="167:9" pos:end="167:61"><call pos:start="167:9" pos:end="167:61"><name pos:start="167:9" pos:end="167:29">qdev_connect_gpio_out</name><argument_list pos:start="167:30" pos:end="167:61">(<argument pos:start="167:31" pos:end="167:52"><expr pos:start="167:31" pos:end="167:52"><call pos:start="167:31" pos:end="167:52"><name pos:start="167:31" pos:end="167:36">DEVICE</name><argument_list pos:start="167:37" pos:end="167:52">(<argument pos:start="167:38" pos:end="167:51"><expr pos:start="167:38" pos:end="167:51"><operator pos:start="167:38" pos:end="167:38">&amp;</operator><name pos:start="167:39" pos:end="167:51"><name pos:start="167:39" pos:end="167:39">s</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:48">apu_cpu</name><index pos:start="167:49" pos:end="167:51">[<expr pos:start="167:50" pos:end="167:50"><name pos:start="167:50" pos:end="167:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:55" pos:end="167:55"><expr pos:start="167:55" pos:end="167:55"><literal type="number" pos:start="167:55" pos:end="167:55">0</literal></expr></argument>, <argument pos:start="167:58" pos:end="167:60"><expr pos:start="167:58" pos:end="167:60"><name pos:start="167:58" pos:end="167:60">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="171:73"><expr pos:start="169:9" pos:end="171:72"><name pos:start="169:9" pos:end="169:11">irq</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="171:72"><name pos:start="169:15" pos:end="169:30">qdev_get_gpio_in</name><argument_list pos:start="169:31" pos:end="171:72">(<argument pos:start="169:32" pos:end="169:46"><expr pos:start="169:32" pos:end="169:46"><call pos:start="169:32" pos:end="169:46"><name pos:start="169:32" pos:end="169:37">DEVICE</name><argument_list pos:start="169:38" pos:end="169:46">(<argument pos:start="169:39" pos:end="169:45"><expr pos:start="169:39" pos:end="169:45"><operator pos:start="169:39" pos:end="169:39">&amp;</operator><name pos:start="169:40" pos:end="169:45"><name pos:start="169:40" pos:end="169:40">s</name><operator pos:start="169:41" pos:end="169:42">-&gt;</operator><name pos:start="169:43" pos:end="169:45">gic</name></name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="171:32" pos:end="171:71"><expr pos:start="171:32" pos:end="171:71"><call pos:start="171:32" pos:end="171:71"><name pos:start="171:32" pos:end="171:48">arm_gic_ppi_index</name><argument_list pos:start="171:49" pos:end="171:71">(<argument pos:start="171:50" pos:end="171:50"><expr pos:start="171:50" pos:end="171:50"><name pos:start="171:50" pos:end="171:50">i</name></expr></argument>, <argument pos:start="171:53" pos:end="171:70"><expr pos:start="171:53" pos:end="171:70"><name pos:start="171:53" pos:end="171:70">ARM_VIRT_TIMER_PPI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:62"><expr pos:start="173:9" pos:end="173:61"><call pos:start="173:9" pos:end="173:61"><name pos:start="173:9" pos:end="173:29">qdev_connect_gpio_out</name><argument_list pos:start="173:30" pos:end="173:61">(<argument pos:start="173:31" pos:end="173:52"><expr pos:start="173:31" pos:end="173:52"><call pos:start="173:31" pos:end="173:52"><name pos:start="173:31" pos:end="173:36">DEVICE</name><argument_list pos:start="173:37" pos:end="173:52">(<argument pos:start="173:38" pos:end="173:51"><expr pos:start="173:38" pos:end="173:51"><operator pos:start="173:38" pos:end="173:38">&amp;</operator><name pos:start="173:39" pos:end="173:51"><name pos:start="173:39" pos:end="173:39">s</name><operator pos:start="173:40" pos:end="173:41">-&gt;</operator><name pos:start="173:42" pos:end="173:48">apu_cpu</name><index pos:start="173:49" pos:end="173:51">[<expr pos:start="173:50" pos:end="173:50"><name pos:start="173:50" pos:end="173:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="173:55" pos:end="173:55"><expr pos:start="173:55" pos:end="173:55"><literal type="number" pos:start="173:55" pos:end="173:55">1</literal></expr></argument>, <argument pos:start="173:58" pos:end="173:60"><expr pos:start="173:58" pos:end="173:60"><name pos:start="173:58" pos:end="173:60">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="179:5" pos:end="221:5">for <control pos:start="179:9" pos:end="179:50">(<init pos:start="179:10" pos:end="179:15"><expr pos:start="179:10" pos:end="179:14"><name pos:start="179:10" pos:end="179:10">i</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <literal type="number" pos:start="179:14" pos:end="179:14">0</literal></expr>;</init> <condition pos:start="179:17" pos:end="179:45"><expr pos:start="179:17" pos:end="179:44"><name pos:start="179:17" pos:end="179:17">i</name> <operator pos:start="179:19" pos:end="179:19">&lt;</operator> <name pos:start="179:21" pos:end="179:44">XLNX_ZYNQMP_NUM_RPU_CPUS</name></expr>;</condition> <incr pos:start="179:47" pos:end="179:49"><expr pos:start="179:47" pos:end="179:49"><name pos:start="179:47" pos:end="179:47">i</name><operator pos:start="179:48" pos:end="179:49">++</operator></expr></incr>)</control> <block pos:start="179:52" pos:end="221:5">{<block_content pos:start="181:9" pos:end="219:9">

        <decl_stmt pos:start="181:9" pos:end="181:19"><decl pos:start="181:9" pos:end="181:18"><type pos:start="181:9" pos:end="181:14"><name pos:start="181:9" pos:end="181:12">char</name> <modifier pos:start="181:14" pos:end="181:14">*</modifier></type><name pos:start="181:15" pos:end="181:18">name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:75"><expr pos:start="185:9" pos:end="185:74"><name pos:start="185:9" pos:end="185:12">name</name> <operator pos:start="185:14" pos:end="185:14">=</operator> <call pos:start="185:16" pos:end="185:74"><name pos:start="185:16" pos:end="185:50">object_get_canonical_path_component</name><argument_list pos:start="185:51" pos:end="185:74">(<argument pos:start="185:52" pos:end="185:73"><expr pos:start="185:52" pos:end="185:73"><call pos:start="185:52" pos:end="185:73"><name pos:start="185:52" pos:end="185:57">OBJECT</name><argument_list pos:start="185:58" pos:end="185:73">(<argument pos:start="185:59" pos:end="185:72"><expr pos:start="185:59" pos:end="185:72"><operator pos:start="185:59" pos:end="185:59">&amp;</operator><name pos:start="185:60" pos:end="185:72"><name pos:start="185:60" pos:end="185:60">s</name><operator pos:start="185:61" pos:end="185:62">-&gt;</operator><name pos:start="185:63" pos:end="185:69">rpu_cpu</name><index pos:start="185:70" pos:end="185:72">[<expr pos:start="185:71" pos:end="185:71"><name pos:start="185:71" pos:end="185:71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="199:9"><if pos:start="187:9" pos:end="195:9">if <condition pos:start="187:12" pos:end="187:35">(<expr pos:start="187:13" pos:end="187:34"><call pos:start="187:13" pos:end="187:34"><name pos:start="187:13" pos:end="187:18">strcmp</name><argument_list pos:start="187:19" pos:end="187:34">(<argument pos:start="187:20" pos:end="187:23"><expr pos:start="187:20" pos:end="187:23"><name pos:start="187:20" pos:end="187:23">name</name></expr></argument>, <argument pos:start="187:26" pos:end="187:33"><expr pos:start="187:26" pos:end="187:33"><name pos:start="187:26" pos:end="187:33">boot_cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:37" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:72">

            <comment type="block" pos:start="189:13" pos:end="189:65">/* Secondary CPUs start in PSCI powered-down state */</comment>

            <expr_stmt pos:start="191:13" pos:end="193:72"><expr pos:start="191:13" pos:end="193:71"><call pos:start="191:13" pos:end="193:71"><name pos:start="191:13" pos:end="191:36">object_property_set_bool</name><argument_list pos:start="191:37" pos:end="193:71">(<argument pos:start="191:38" pos:end="191:59"><expr pos:start="191:38" pos:end="191:59"><call pos:start="191:38" pos:end="191:59"><name pos:start="191:38" pos:end="191:43">OBJECT</name><argument_list pos:start="191:44" pos:end="191:59">(<argument pos:start="191:45" pos:end="191:58"><expr pos:start="191:45" pos:end="191:58"><operator pos:start="191:45" pos:end="191:45">&amp;</operator><name pos:start="191:46" pos:end="191:58"><name pos:start="191:46" pos:end="191:46">s</name><operator pos:start="191:47" pos:end="191:48">-&gt;</operator><name pos:start="191:49" pos:end="191:55">rpu_cpu</name><index pos:start="191:56" pos:end="191:58">[<expr pos:start="191:57" pos:end="191:57"><name pos:start="191:57" pos:end="191:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="191:62" pos:end="191:65"><expr pos:start="191:62" pos:end="191:65"><name pos:start="191:62" pos:end="191:65">true</name></expr></argument>,

                                     <argument pos:start="193:38" pos:end="193:56"><expr pos:start="193:38" pos:end="193:56"><literal type="string" pos:start="193:38" pos:end="193:56">"start-powered-off"</literal></expr></argument>, <argument pos:start="193:59" pos:end="193:70"><expr pos:start="193:59" pos:end="193:70"><operator pos:start="193:59" pos:end="193:59">&amp;</operator><name pos:start="193:60" pos:end="193:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="199:9">else <block pos:start="195:16" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:45">

            <expr_stmt pos:start="197:13" pos:end="197:45"><expr pos:start="197:13" pos:end="197:44"><name pos:start="197:13" pos:end="197:27"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:27">boot_cpu_ptr</name></name> <operator pos:start="197:29" pos:end="197:29">=</operator> <operator pos:start="197:31" pos:end="197:31">&amp;</operator><name pos:start="197:32" pos:end="197:44"><name pos:start="197:32" pos:end="197:32">s</name><operator pos:start="197:33" pos:end="197:34">-&gt;</operator><name pos:start="197:35" pos:end="197:41">rpu_cpu</name><index pos:start="197:42" pos:end="197:44">[<expr pos:start="197:43" pos:end="197:43"><name pos:start="197:43" pos:end="197:43">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:21"><expr pos:start="201:9" pos:end="201:20"><call pos:start="201:9" pos:end="201:20"><name pos:start="201:9" pos:end="201:14">g_free</name><argument_list pos:start="201:15" pos:end="201:20">(<argument pos:start="201:16" pos:end="201:19"><expr pos:start="201:16" pos:end="201:19"><name pos:start="201:16" pos:end="201:19">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="207:47"><expr pos:start="205:9" pos:end="207:46"><call pos:start="205:9" pos:end="207:46"><name pos:start="205:9" pos:end="205:32">object_property_set_bool</name><argument_list pos:start="205:33" pos:end="207:46">(<argument pos:start="205:34" pos:end="205:55"><expr pos:start="205:34" pos:end="205:55"><call pos:start="205:34" pos:end="205:55"><name pos:start="205:34" pos:end="205:39">OBJECT</name><argument_list pos:start="205:40" pos:end="205:55">(<argument pos:start="205:41" pos:end="205:54"><expr pos:start="205:41" pos:end="205:54"><operator pos:start="205:41" pos:end="205:41">&amp;</operator><name pos:start="205:42" pos:end="205:54"><name pos:start="205:42" pos:end="205:42">s</name><operator pos:start="205:43" pos:end="205:44">-&gt;</operator><name pos:start="205:45" pos:end="205:51">rpu_cpu</name><index pos:start="205:52" pos:end="205:54">[<expr pos:start="205:53" pos:end="205:53"><name pos:start="205:53" pos:end="205:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:58" pos:end="205:61"><expr pos:start="205:58" pos:end="205:61"><name pos:start="205:58" pos:end="205:61">true</name></expr></argument>, <argument pos:start="205:64" pos:end="205:77"><expr pos:start="205:64" pos:end="205:77"><literal type="string" pos:start="205:64" pos:end="205:77">"reset-hivecs"</literal></expr></argument>,

                                 <argument pos:start="207:34" pos:end="207:45"><expr pos:start="207:34" pos:end="207:45"><operator pos:start="207:34" pos:end="207:34">&amp;</operator><name pos:start="207:35" pos:end="207:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="211:39"><expr pos:start="209:9" pos:end="211:38"><call pos:start="209:9" pos:end="211:38"><name pos:start="209:9" pos:end="209:32">object_property_set_bool</name><argument_list pos:start="209:33" pos:end="211:38">(<argument pos:start="209:34" pos:end="209:55"><expr pos:start="209:34" pos:end="209:55"><call pos:start="209:34" pos:end="209:55"><name pos:start="209:34" pos:end="209:39">OBJECT</name><argument_list pos:start="209:40" pos:end="209:55">(<argument pos:start="209:41" pos:end="209:54"><expr pos:start="209:41" pos:end="209:54"><operator pos:start="209:41" pos:end="209:41">&amp;</operator><name pos:start="209:42" pos:end="209:54"><name pos:start="209:42" pos:end="209:42">s</name><operator pos:start="209:43" pos:end="209:44">-&gt;</operator><name pos:start="209:45" pos:end="209:51">rpu_cpu</name><index pos:start="209:52" pos:end="209:54">[<expr pos:start="209:53" pos:end="209:53"><name pos:start="209:53" pos:end="209:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="209:58" pos:end="209:61"><expr pos:start="209:58" pos:end="209:61"><name pos:start="209:58" pos:end="209:61">true</name></expr></argument>, <argument pos:start="209:64" pos:end="209:73"><expr pos:start="209:64" pos:end="209:73"><literal type="string" pos:start="209:64" pos:end="209:73">"realized"</literal></expr></argument>,

                                 <argument pos:start="211:34" pos:end="211:37"><expr pos:start="211:34" pos:end="211:37"><operator pos:start="211:34" pos:end="211:34">&amp;</operator><name pos:start="211:35" pos:end="211:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:16">(<expr pos:start="213:13" pos:end="213:15"><name pos:start="213:13" pos:end="213:15">err</name></expr>)</condition> <block pos:start="213:18" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:19">

            <expr_stmt pos:start="215:13" pos:end="215:39"><expr pos:start="215:13" pos:end="215:38"><call pos:start="215:13" pos:end="215:38"><name pos:start="215:13" pos:end="215:27">error_propagate</name><argument_list pos:start="215:28" pos:end="215:38">(<argument pos:start="215:29" pos:end="215:32"><expr pos:start="215:29" pos:end="215:32"><name pos:start="215:29" pos:end="215:32">errp</name></expr></argument>, <argument pos:start="215:35" pos:end="215:37"><expr pos:start="215:35" pos:end="215:37"><name pos:start="215:35" pos:end="215:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:25">(<expr pos:start="225:9" pos:end="225:24"><operator pos:start="225:9" pos:end="225:9">!</operator><name pos:start="225:10" pos:end="225:24"><name pos:start="225:10" pos:end="225:10">s</name><operator pos:start="225:11" pos:end="225:12">-&gt;</operator><name pos:start="225:13" pos:end="225:24">boot_cpu_ptr</name></name></expr>)</condition> <block pos:start="225:27" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:15">

        <expr_stmt pos:start="227:9" pos:end="227:69"><expr pos:start="227:9" pos:end="227:68"><call pos:start="227:9" pos:end="227:68"><name pos:start="227:9" pos:end="227:18">error_setg</name><argument_list pos:start="227:19" pos:end="227:68">(<argument pos:start="227:20" pos:end="227:23"><expr pos:start="227:20" pos:end="227:23"><name pos:start="227:20" pos:end="227:23">errp</name></expr></argument>, <argument pos:start="227:26" pos:end="227:57"><expr pos:start="227:26" pos:end="227:57"><literal type="string" pos:start="227:26" pos:end="227:57">"ZynqMP Boot cpu %s not found\n"</literal></expr></argument>, <argument pos:start="227:60" pos:end="227:67"><expr pos:start="227:60" pos:end="227:67"><name pos:start="227:60" pos:end="227:67">boot_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="229:9" pos:end="229:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="235:5" pos:end="239:5">for <control pos:start="235:9" pos:end="235:42">(<init pos:start="235:10" pos:end="235:15"><expr pos:start="235:10" pos:end="235:14"><name pos:start="235:10" pos:end="235:10">i</name> <operator pos:start="235:12" pos:end="235:12">=</operator> <literal type="number" pos:start="235:14" pos:end="235:14">0</literal></expr>;</init> <condition pos:start="235:17" pos:end="235:37"><expr pos:start="235:17" pos:end="235:36"><name pos:start="235:17" pos:end="235:17">i</name> <operator pos:start="235:19" pos:end="235:19">&lt;</operator> <name pos:start="235:21" pos:end="235:36">GIC_NUM_SPI_INTR</name></expr>;</condition> <incr pos:start="235:39" pos:end="235:41"><expr pos:start="235:39" pos:end="235:41"><name pos:start="235:39" pos:end="235:39">i</name><operator pos:start="235:40" pos:end="235:41">++</operator></expr></incr>)</control> <block pos:start="235:44" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:58">

        <expr_stmt pos:start="237:9" pos:end="237:58"><expr pos:start="237:9" pos:end="237:57"><name pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:15">gic_spi</name><index pos:start="237:16" pos:end="237:18">[<expr pos:start="237:17" pos:end="237:17"><name pos:start="237:17" pos:end="237:17">i</name></expr>]</index></name> <operator pos:start="237:20" pos:end="237:20">=</operator> <call pos:start="237:22" pos:end="237:57"><name pos:start="237:22" pos:end="237:37">qdev_get_gpio_in</name><argument_list pos:start="237:38" pos:end="237:57">(<argument pos:start="237:39" pos:end="237:53"><expr pos:start="237:39" pos:end="237:53"><call pos:start="237:39" pos:end="237:53"><name pos:start="237:39" pos:end="237:44">DEVICE</name><argument_list pos:start="237:45" pos:end="237:53">(<argument pos:start="237:46" pos:end="237:52"><expr pos:start="237:46" pos:end="237:52"><operator pos:start="237:46" pos:end="237:46">&amp;</operator><name pos:start="237:47" pos:end="237:52"><name pos:start="237:47" pos:end="237:47">s</name><operator pos:start="237:48" pos:end="237:49">-&gt;</operator><name pos:start="237:50" pos:end="237:52">gic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="237:56" pos:end="237:56"><expr pos:start="237:56" pos:end="237:56"><name pos:start="237:56" pos:end="237:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="243:5" pos:end="273:5">for <control pos:start="243:9" pos:end="243:46">(<init pos:start="243:10" pos:end="243:15"><expr pos:start="243:10" pos:end="243:14"><name pos:start="243:10" pos:end="243:10">i</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <literal type="number" pos:start="243:14" pos:end="243:14">0</literal></expr>;</init> <condition pos:start="243:17" pos:end="243:41"><expr pos:start="243:17" pos:end="243:40"><name pos:start="243:17" pos:end="243:17">i</name> <operator pos:start="243:19" pos:end="243:19">&lt;</operator> <name pos:start="243:21" pos:end="243:40">XLNX_ZYNQMP_NUM_GEMS</name></expr>;</condition> <incr pos:start="243:43" pos:end="243:45"><expr pos:start="243:43" pos:end="243:45"><name pos:start="243:43" pos:end="243:43">i</name><operator pos:start="243:44" pos:end="243:45">++</operator></expr></incr>)</control> <block pos:start="243:48" pos:end="273:5">{<block_content pos:start="245:9" pos:end="271:49">

        <decl_stmt pos:start="245:9" pos:end="245:35"><decl pos:start="245:9" pos:end="245:34"><type pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:15">NICInfo</name> <modifier pos:start="245:17" pos:end="245:17">*</modifier></type><name pos:start="245:18" pos:end="245:19">nd</name> <init pos:start="245:21" pos:end="245:34">= <expr pos:start="245:23" pos:end="245:34"><operator pos:start="245:23" pos:end="245:23">&amp;</operator><name pos:start="245:24" pos:end="245:34"><name pos:start="245:24" pos:end="245:31">nd_table</name><index pos:start="245:32" pos:end="245:34">[<expr pos:start="245:33" pos:end="245:33"><name pos:start="245:33" pos:end="245:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="249:9" pos:end="255:9"><if pos:start="249:9" pos:end="255:9">if <condition pos:start="249:12" pos:end="249:21">(<expr pos:start="249:13" pos:end="249:20"><name pos:start="249:13" pos:end="249:20"><name pos:start="249:13" pos:end="249:14">nd</name><operator pos:start="249:15" pos:end="249:16">-&gt;</operator><name pos:start="249:17" pos:end="249:20">used</name></name></expr>)</condition> <block pos:start="249:23" pos:end="255:9">{<block_content pos:start="251:13" pos:end="253:60">

            <expr_stmt pos:start="251:13" pos:end="251:55"><expr pos:start="251:13" pos:end="251:54"><call pos:start="251:13" pos:end="251:54"><name pos:start="251:13" pos:end="251:32">qemu_check_nic_model</name><argument_list pos:start="251:33" pos:end="251:54">(<argument pos:start="251:34" pos:end="251:35"><expr pos:start="251:34" pos:end="251:35"><name pos:start="251:34" pos:end="251:35">nd</name></expr></argument>, <argument pos:start="251:38" pos:end="251:53"><expr pos:start="251:38" pos:end="251:53"><name pos:start="251:38" pos:end="251:53">TYPE_CADENCE_GEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:60"><expr pos:start="253:13" pos:end="253:59"><call pos:start="253:13" pos:end="253:59"><name pos:start="253:13" pos:end="253:35">qdev_set_nic_properties</name><argument_list pos:start="253:36" pos:end="253:59">(<argument pos:start="253:37" pos:end="253:54"><expr pos:start="253:37" pos:end="253:54"><call pos:start="253:37" pos:end="253:54"><name pos:start="253:37" pos:end="253:42">DEVICE</name><argument_list pos:start="253:43" pos:end="253:54">(<argument pos:start="253:44" pos:end="253:53"><expr pos:start="253:44" pos:end="253:53"><operator pos:start="253:44" pos:end="253:44">&amp;</operator><name pos:start="253:45" pos:end="253:53"><name pos:start="253:45" pos:end="253:45">s</name><operator pos:start="253:46" pos:end="253:47">-&gt;</operator><name pos:start="253:48" pos:end="253:50">gem</name><index pos:start="253:51" pos:end="253:53">[<expr pos:start="253:52" pos:end="253:52"><name pos:start="253:52" pos:end="253:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="253:57" pos:end="253:58"><expr pos:start="253:57" pos:end="253:58"><name pos:start="253:57" pos:end="253:58">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:77"><expr pos:start="257:9" pos:end="257:76"><call pos:start="257:9" pos:end="257:76"><name pos:start="257:9" pos:end="257:32">object_property_set_bool</name><argument_list pos:start="257:33" pos:end="257:76">(<argument pos:start="257:34" pos:end="257:51"><expr pos:start="257:34" pos:end="257:51"><call pos:start="257:34" pos:end="257:51"><name pos:start="257:34" pos:end="257:39">OBJECT</name><argument_list pos:start="257:40" pos:end="257:51">(<argument pos:start="257:41" pos:end="257:50"><expr pos:start="257:41" pos:end="257:50"><operator pos:start="257:41" pos:end="257:41">&amp;</operator><name pos:start="257:42" pos:end="257:50"><name pos:start="257:42" pos:end="257:42">s</name><operator pos:start="257:43" pos:end="257:44">-&gt;</operator><name pos:start="257:45" pos:end="257:47">gem</name><index pos:start="257:48" pos:end="257:50">[<expr pos:start="257:49" pos:end="257:49"><name pos:start="257:49" pos:end="257:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="257:54" pos:end="257:57"><expr pos:start="257:54" pos:end="257:57"><name pos:start="257:54" pos:end="257:57">true</name></expr></argument>, <argument pos:start="257:60" pos:end="257:69"><expr pos:start="257:60" pos:end="257:69"><literal type="string" pos:start="257:60" pos:end="257:69">"realized"</literal></expr></argument>, <argument pos:start="257:72" pos:end="257:75"><expr pos:start="257:72" pos:end="257:75"><operator pos:start="257:72" pos:end="257:72">&amp;</operator><name pos:start="257:73" pos:end="257:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="259:9" pos:end="265:9"><if pos:start="259:9" pos:end="265:9">if <condition pos:start="259:12" pos:end="259:16">(<expr pos:start="259:13" pos:end="259:15"><name pos:start="259:13" pos:end="259:15">err</name></expr>)</condition> <block pos:start="259:18" pos:end="265:9">{<block_content pos:start="261:13" pos:end="263:19">

            <expr_stmt pos:start="261:13" pos:end="261:39"><expr pos:start="261:13" pos:end="261:38"><call pos:start="261:13" pos:end="261:38"><name pos:start="261:13" pos:end="261:27">error_propagate</name><argument_list pos:start="261:28" pos:end="261:38">(<argument pos:start="261:29" pos:end="261:32"><expr pos:start="261:29" pos:end="261:32"><name pos:start="261:29" pos:end="261:32">errp</name></expr></argument>, <argument pos:start="261:35" pos:end="261:37"><expr pos:start="261:35" pos:end="261:37"><name pos:start="261:35" pos:end="261:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="263:13" pos:end="263:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:68"><expr pos:start="267:9" pos:end="267:67"><call pos:start="267:9" pos:end="267:67"><name pos:start="267:9" pos:end="267:23">sysbus_mmio_map</name><argument_list pos:start="267:24" pos:end="267:67">(<argument pos:start="267:25" pos:end="267:50"><expr pos:start="267:25" pos:end="267:50"><call pos:start="267:25" pos:end="267:50"><name pos:start="267:25" pos:end="267:38">SYS_BUS_DEVICE</name><argument_list pos:start="267:39" pos:end="267:50">(<argument pos:start="267:40" pos:end="267:49"><expr pos:start="267:40" pos:end="267:49"><operator pos:start="267:40" pos:end="267:40">&amp;</operator><name pos:start="267:41" pos:end="267:49"><name pos:start="267:41" pos:end="267:41">s</name><operator pos:start="267:42" pos:end="267:43">-&gt;</operator><name pos:start="267:44" pos:end="267:46">gem</name><index pos:start="267:47" pos:end="267:49">[<expr pos:start="267:48" pos:end="267:48"><name pos:start="267:48" pos:end="267:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:53" pos:end="267:53"><expr pos:start="267:53" pos:end="267:53"><literal type="number" pos:start="267:53" pos:end="267:53">0</literal></expr></argument>, <argument pos:start="267:56" pos:end="267:66"><expr pos:start="267:56" pos:end="267:66"><name pos:start="267:56" pos:end="267:66"><name pos:start="267:56" pos:end="267:63">gem_addr</name><index pos:start="267:64" pos:end="267:66">[<expr pos:start="267:65" pos:end="267:65"><name pos:start="267:65" pos:end="267:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="271:49"><expr pos:start="269:9" pos:end="271:48"><call pos:start="269:9" pos:end="271:48"><name pos:start="269:9" pos:end="269:26">sysbus_connect_irq</name><argument_list pos:start="269:27" pos:end="271:48">(<argument pos:start="269:28" pos:end="269:53"><expr pos:start="269:28" pos:end="269:53"><call pos:start="269:28" pos:end="269:53"><name pos:start="269:28" pos:end="269:41">SYS_BUS_DEVICE</name><argument_list pos:start="269:42" pos:end="269:53">(<argument pos:start="269:43" pos:end="269:52"><expr pos:start="269:43" pos:end="269:52"><operator pos:start="269:43" pos:end="269:43">&amp;</operator><name pos:start="269:44" pos:end="269:52"><name pos:start="269:44" pos:end="269:44">s</name><operator pos:start="269:45" pos:end="269:46">-&gt;</operator><name pos:start="269:47" pos:end="269:49">gem</name><index pos:start="269:50" pos:end="269:52">[<expr pos:start="269:51" pos:end="269:51"><name pos:start="269:51" pos:end="269:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="269:56" pos:end="269:56"><expr pos:start="269:56" pos:end="269:56"><literal type="number" pos:start="269:56" pos:end="269:56">0</literal></expr></argument>,

                           <argument pos:start="271:28" pos:end="271:47"><expr pos:start="271:28" pos:end="271:47"><name pos:start="271:28" pos:end="271:47"><name pos:start="271:28" pos:end="271:34">gic_spi</name><index pos:start="271:35" pos:end="271:47">[<expr pos:start="271:36" pos:end="271:46"><name pos:start="271:36" pos:end="271:46"><name pos:start="271:36" pos:end="271:43">gem_intr</name><index pos:start="271:44" pos:end="271:46">[<expr pos:start="271:45" pos:end="271:45"><name pos:start="271:45" pos:end="271:45">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="277:5" pos:end="295:5">for <control pos:start="277:9" pos:end="277:47">(<init pos:start="277:10" pos:end="277:15"><expr pos:start="277:10" pos:end="277:14"><name pos:start="277:10" pos:end="277:10">i</name> <operator pos:start="277:12" pos:end="277:12">=</operator> <literal type="number" pos:start="277:14" pos:end="277:14">0</literal></expr>;</init> <condition pos:start="277:17" pos:end="277:42"><expr pos:start="277:17" pos:end="277:41"><name pos:start="277:17" pos:end="277:17">i</name> <operator pos:start="277:19" pos:end="277:19">&lt;</operator> <name pos:start="277:21" pos:end="277:41">XLNX_ZYNQMP_NUM_UARTS</name></expr>;</condition> <incr pos:start="277:44" pos:end="277:46"><expr pos:start="277:44" pos:end="277:46"><name pos:start="277:44" pos:end="277:44">i</name><operator pos:start="277:45" pos:end="277:46">++</operator></expr></incr>)</control> <block pos:start="277:49" pos:end="295:5">{<block_content pos:start="279:9" pos:end="293:50">

        <expr_stmt pos:start="279:9" pos:end="279:78"><expr pos:start="279:9" pos:end="279:77"><call pos:start="279:9" pos:end="279:77"><name pos:start="279:9" pos:end="279:32">object_property_set_bool</name><argument_list pos:start="279:33" pos:end="279:77">(<argument pos:start="279:34" pos:end="279:52"><expr pos:start="279:34" pos:end="279:52"><call pos:start="279:34" pos:end="279:52"><name pos:start="279:34" pos:end="279:39">OBJECT</name><argument_list pos:start="279:40" pos:end="279:52">(<argument pos:start="279:41" pos:end="279:51"><expr pos:start="279:41" pos:end="279:51"><operator pos:start="279:41" pos:end="279:41">&amp;</operator><name pos:start="279:42" pos:end="279:51"><name pos:start="279:42" pos:end="279:42">s</name><operator pos:start="279:43" pos:end="279:44">-&gt;</operator><name pos:start="279:45" pos:end="279:48">uart</name><index pos:start="279:49" pos:end="279:51">[<expr pos:start="279:50" pos:end="279:50"><name pos:start="279:50" pos:end="279:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="279:55" pos:end="279:58"><expr pos:start="279:55" pos:end="279:58"><name pos:start="279:55" pos:end="279:58">true</name></expr></argument>, <argument pos:start="279:61" pos:end="279:70"><expr pos:start="279:61" pos:end="279:70"><literal type="string" pos:start="279:61" pos:end="279:70">"realized"</literal></expr></argument>, <argument pos:start="279:73" pos:end="279:76"><expr pos:start="279:73" pos:end="279:76"><operator pos:start="279:73" pos:end="279:73">&amp;</operator><name pos:start="279:74" pos:end="279:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:16">(<expr pos:start="281:13" pos:end="281:15"><name pos:start="281:13" pos:end="281:15">err</name></expr>)</condition> <block pos:start="281:18" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:19">

            <expr_stmt pos:start="283:13" pos:end="283:39"><expr pos:start="283:13" pos:end="283:38"><call pos:start="283:13" pos:end="283:38"><name pos:start="283:13" pos:end="283:27">error_propagate</name><argument_list pos:start="283:28" pos:end="283:38">(<argument pos:start="283:29" pos:end="283:32"><expr pos:start="283:29" pos:end="283:32"><name pos:start="283:29" pos:end="283:32">errp</name></expr></argument>, <argument pos:start="283:35" pos:end="283:37"><expr pos:start="283:35" pos:end="283:37"><name pos:start="283:35" pos:end="283:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="285:13" pos:end="285:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:70"><expr pos:start="289:9" pos:end="289:69"><call pos:start="289:9" pos:end="289:69"><name pos:start="289:9" pos:end="289:23">sysbus_mmio_map</name><argument_list pos:start="289:24" pos:end="289:69">(<argument pos:start="289:25" pos:end="289:51"><expr pos:start="289:25" pos:end="289:51"><call pos:start="289:25" pos:end="289:51"><name pos:start="289:25" pos:end="289:38">SYS_BUS_DEVICE</name><argument_list pos:start="289:39" pos:end="289:51">(<argument pos:start="289:40" pos:end="289:50"><expr pos:start="289:40" pos:end="289:50"><operator pos:start="289:40" pos:end="289:40">&amp;</operator><name pos:start="289:41" pos:end="289:50"><name pos:start="289:41" pos:end="289:41">s</name><operator pos:start="289:42" pos:end="289:43">-&gt;</operator><name pos:start="289:44" pos:end="289:47">uart</name><index pos:start="289:48" pos:end="289:50">[<expr pos:start="289:49" pos:end="289:49"><name pos:start="289:49" pos:end="289:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="289:54" pos:end="289:54"><expr pos:start="289:54" pos:end="289:54"><literal type="number" pos:start="289:54" pos:end="289:54">0</literal></expr></argument>, <argument pos:start="289:57" pos:end="289:68"><expr pos:start="289:57" pos:end="289:68"><name pos:start="289:57" pos:end="289:68"><name pos:start="289:57" pos:end="289:65">uart_addr</name><index pos:start="289:66" pos:end="289:68">[<expr pos:start="289:67" pos:end="289:67"><name pos:start="289:67" pos:end="289:67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="293:50"><expr pos:start="291:9" pos:end="293:49"><call pos:start="291:9" pos:end="293:49"><name pos:start="291:9" pos:end="291:26">sysbus_connect_irq</name><argument_list pos:start="291:27" pos:end="293:49">(<argument pos:start="291:28" pos:end="291:54"><expr pos:start="291:28" pos:end="291:54"><call pos:start="291:28" pos:end="291:54"><name pos:start="291:28" pos:end="291:41">SYS_BUS_DEVICE</name><argument_list pos:start="291:42" pos:end="291:54">(<argument pos:start="291:43" pos:end="291:53"><expr pos:start="291:43" pos:end="291:53"><operator pos:start="291:43" pos:end="291:43">&amp;</operator><name pos:start="291:44" pos:end="291:53"><name pos:start="291:44" pos:end="291:44">s</name><operator pos:start="291:45" pos:end="291:46">-&gt;</operator><name pos:start="291:47" pos:end="291:50">uart</name><index pos:start="291:51" pos:end="291:53">[<expr pos:start="291:52" pos:end="291:52"><name pos:start="291:52" pos:end="291:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="291:57" pos:end="291:57"><expr pos:start="291:57" pos:end="291:57"><literal type="number" pos:start="291:57" pos:end="291:57">0</literal></expr></argument>,

                           <argument pos:start="293:28" pos:end="293:48"><expr pos:start="293:28" pos:end="293:48"><name pos:start="293:28" pos:end="293:48"><name pos:start="293:28" pos:end="293:34">gic_spi</name><index pos:start="293:35" pos:end="293:48">[<expr pos:start="293:36" pos:end="293:47"><name pos:start="293:36" pos:end="293:47"><name pos:start="293:36" pos:end="293:44">uart_intr</name><index pos:start="293:45" pos:end="293:47">[<expr pos:start="293:46" pos:end="293:46"><name pos:start="293:46" pos:end="293:46">i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="299:5" pos:end="301:42"><expr pos:start="299:5" pos:end="301:41"><call pos:start="299:5" pos:end="301:41"><name pos:start="299:5" pos:end="299:27">object_property_set_int</name><argument_list pos:start="299:28" pos:end="301:41">(<argument pos:start="299:29" pos:end="299:44"><expr pos:start="299:29" pos:end="299:44"><call pos:start="299:29" pos:end="299:44"><name pos:start="299:29" pos:end="299:34">OBJECT</name><argument_list pos:start="299:35" pos:end="299:44">(<argument pos:start="299:36" pos:end="299:43"><expr pos:start="299:36" pos:end="299:43"><operator pos:start="299:36" pos:end="299:36">&amp;</operator><name pos:start="299:37" pos:end="299:43"><name pos:start="299:37" pos:end="299:37">s</name><operator pos:start="299:38" pos:end="299:39">-&gt;</operator><name pos:start="299:40" pos:end="299:43">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="299:47" pos:end="299:60"><expr pos:start="299:47" pos:end="299:60"><name pos:start="299:47" pos:end="299:60">SATA_NUM_PORTS</name></expr></argument>, <argument pos:start="299:63" pos:end="299:73"><expr pos:start="299:63" pos:end="299:73"><literal type="string" pos:start="299:63" pos:end="299:73">"num-ports"</literal></expr></argument>,

                            <argument pos:start="301:29" pos:end="301:40"><expr pos:start="301:29" pos:end="301:40"><operator pos:start="301:29" pos:end="301:29">&amp;</operator><name pos:start="301:30" pos:end="301:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:71"><expr pos:start="303:5" pos:end="303:70"><call pos:start="303:5" pos:end="303:70"><name pos:start="303:5" pos:end="303:28">object_property_set_bool</name><argument_list pos:start="303:29" pos:end="303:70">(<argument pos:start="303:30" pos:end="303:45"><expr pos:start="303:30" pos:end="303:45"><call pos:start="303:30" pos:end="303:45"><name pos:start="303:30" pos:end="303:35">OBJECT</name><argument_list pos:start="303:36" pos:end="303:45">(<argument pos:start="303:37" pos:end="303:44"><expr pos:start="303:37" pos:end="303:44"><operator pos:start="303:37" pos:end="303:37">&amp;</operator><name pos:start="303:38" pos:end="303:44"><name pos:start="303:38" pos:end="303:38">s</name><operator pos:start="303:39" pos:end="303:40">-&gt;</operator><name pos:start="303:41" pos:end="303:44">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="303:48" pos:end="303:51"><expr pos:start="303:48" pos:end="303:51"><name pos:start="303:48" pos:end="303:51">true</name></expr></argument>, <argument pos:start="303:54" pos:end="303:63"><expr pos:start="303:54" pos:end="303:63"><literal type="string" pos:start="303:54" pos:end="303:63">"realized"</literal></expr></argument>, <argument pos:start="303:66" pos:end="303:69"><expr pos:start="303:66" pos:end="303:69"><operator pos:start="303:66" pos:end="303:66">&amp;</operator><name pos:start="303:67" pos:end="303:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="305:5" pos:end="311:5"><if pos:start="305:5" pos:end="311:5">if <condition pos:start="305:8" pos:end="305:12">(<expr pos:start="305:9" pos:end="305:11"><name pos:start="305:9" pos:end="305:11">err</name></expr>)</condition> <block pos:start="305:14" pos:end="311:5">{<block_content pos:start="307:9" pos:end="309:15">

        <expr_stmt pos:start="307:9" pos:end="307:35"><expr pos:start="307:9" pos:end="307:34"><call pos:start="307:9" pos:end="307:34"><name pos:start="307:9" pos:end="307:23">error_propagate</name><argument_list pos:start="307:24" pos:end="307:34">(<argument pos:start="307:25" pos:end="307:28"><expr pos:start="307:25" pos:end="307:28"><name pos:start="307:25" pos:end="307:28">errp</name></expr></argument>, <argument pos:start="307:31" pos:end="307:33"><expr pos:start="307:31" pos:end="307:33"><name pos:start="307:31" pos:end="307:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="309:9" pos:end="309:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="315:5" pos:end="315:60"><expr pos:start="315:5" pos:end="315:59"><call pos:start="315:5" pos:end="315:59"><name pos:start="315:5" pos:end="315:19">sysbus_mmio_map</name><argument_list pos:start="315:20" pos:end="315:59">(<argument pos:start="315:21" pos:end="315:44"><expr pos:start="315:21" pos:end="315:44"><call pos:start="315:21" pos:end="315:44"><name pos:start="315:21" pos:end="315:34">SYS_BUS_DEVICE</name><argument_list pos:start="315:35" pos:end="315:44">(<argument pos:start="315:36" pos:end="315:43"><expr pos:start="315:36" pos:end="315:43"><operator pos:start="315:36" pos:end="315:36">&amp;</operator><name pos:start="315:37" pos:end="315:43"><name pos:start="315:37" pos:end="315:37">s</name><operator pos:start="315:38" pos:end="315:39">-&gt;</operator><name pos:start="315:40" pos:end="315:43">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="315:47" pos:end="315:47"><expr pos:start="315:47" pos:end="315:47"><literal type="number" pos:start="315:47" pos:end="315:47">0</literal></expr></argument>, <argument pos:start="315:50" pos:end="315:58"><expr pos:start="315:50" pos:end="315:58"><name pos:start="315:50" pos:end="315:58">SATA_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:72"><expr pos:start="317:5" pos:end="317:71"><call pos:start="317:5" pos:end="317:71"><name pos:start="317:5" pos:end="317:22">sysbus_connect_irq</name><argument_list pos:start="317:23" pos:end="317:71">(<argument pos:start="317:24" pos:end="317:47"><expr pos:start="317:24" pos:end="317:47"><call pos:start="317:24" pos:end="317:47"><name pos:start="317:24" pos:end="317:37">SYS_BUS_DEVICE</name><argument_list pos:start="317:38" pos:end="317:47">(<argument pos:start="317:39" pos:end="317:46"><expr pos:start="317:39" pos:end="317:46"><operator pos:start="317:39" pos:end="317:39">&amp;</operator><name pos:start="317:40" pos:end="317:46"><name pos:start="317:40" pos:end="317:40">s</name><operator pos:start="317:41" pos:end="317:42">-&gt;</operator><name pos:start="317:43" pos:end="317:46">sata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="317:50" pos:end="317:50"><expr pos:start="317:50" pos:end="317:50"><literal type="number" pos:start="317:50" pos:end="317:50">0</literal></expr></argument>, <argument pos:start="317:53" pos:end="317:70"><expr pos:start="317:53" pos:end="317:70"><name pos:start="317:53" pos:end="317:70"><name pos:start="317:53" pos:end="317:59">gic_spi</name><index pos:start="317:60" pos:end="317:70">[<expr pos:start="317:61" pos:end="317:69"><name pos:start="317:61" pos:end="317:69">SATA_INTR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
