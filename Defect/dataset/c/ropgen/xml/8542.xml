<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8542.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_vol_header</name><parameter_list pos:start="1:29" pos:end="1:69">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:44">Mpeg4DecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="267:13">{<block_content pos:start="3:5" pos:end="267:13">
    <decl_stmt pos:start="3:5" pos:end="3:32"><decl pos:start="3:5" pos:end="3:31"><type pos:start="3:5" pos:end="3:20"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:21">s</name> <init pos:start="3:23" pos:end="3:31">= <expr pos:start="3:25" pos:end="3:31"><operator pos:start="3:25" pos:end="3:25">&amp;</operator><name pos:start="3:26" pos:end="3:31"><name pos:start="3:26" pos:end="3:28">ctx</name><operator pos:start="3:29" pos:end="3:30">-&gt;</operator><name pos:start="3:31" pos:end="3:31">m</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:13"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:13">width</name></decl>, <decl pos:start="4:16" pos:end="4:21"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:16" pos:end="4:21">height</name></decl>, <decl pos:start="4:24" pos:end="4:32"><type ref="prev" pos:start="4:5" pos:end="4:7"/><name pos:start="4:24" pos:end="4:32">vo_ver_id</name></decl>;</decl_stmt>
    <comment type="block" pos:start="5:5" pos:end="5:20">/* vol header */</comment>
    <expr_stmt pos:start="6:5" pos:end="6:21"><expr pos:start="6:5" pos:end="6:20"><call pos:start="6:5" pos:end="6:20"><name pos:start="6:5" pos:end="6:13">skip_bits</name><argument_list pos:start="6:14" pos:end="6:20">(<argument pos:start="6:15" pos:end="6:16"><expr pos:start="6:15" pos:end="6:16"><name pos:start="6:15" pos:end="6:16">gb</name></expr></argument>, <argument pos:start="6:19" pos:end="6:19"><expr pos:start="6:19" pos:end="6:19"><literal type="number" pos:start="6:19" pos:end="6:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="block" pos:start="6:41" pos:end="6:59">/* random access */</comment>
    <expr_stmt pos:start="7:5" pos:end="7:33"><expr pos:start="7:5" pos:end="7:32"><name pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:5">s</name><operator pos:start="7:6" pos:end="7:7">-&gt;</operator><name pos:start="7:8" pos:end="7:14">vo_type</name></name> <operator pos:start="7:16" pos:end="7:16">=</operator> <call pos:start="7:18" pos:end="7:32"><name pos:start="7:18" pos:end="7:25">get_bits</name><argument_list pos:start="7:26" pos:end="7:32">(<argument pos:start="7:27" pos:end="7:28"><expr pos:start="7:27" pos:end="7:28"><name pos:start="7:27" pos:end="7:28">gb</name></expr></argument>, <argument pos:start="7:31" pos:end="7:31"><expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="8:5" pos:end="267:13"><if pos:start="8:5" pos:end="11:5">if <condition pos:start="8:8" pos:end="8:27">(<expr pos:start="8:9" pos:end="8:26"><call pos:start="8:9" pos:end="8:21"><name pos:start="8:9" pos:end="8:17">get_bits1</name><argument_list pos:start="8:18" pos:end="8:21">(<argument pos:start="8:19" pos:end="8:20"><expr pos:start="8:19" pos:end="8:20"><name pos:start="8:19" pos:end="8:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="8:23" pos:end="8:24">!=</operator> <literal type="number" pos:start="8:26" pos:end="8:26">0</literal></expr>)</condition> <block pos:start="8:29" pos:end="11:5">{<block_content pos:start="9:9" pos:end="10:25">           <comment type="block" pos:start="8:41" pos:end="8:54">/* is_ol_id */</comment>
        <expr_stmt pos:start="9:9" pos:end="9:36"><expr pos:start="9:9" pos:end="9:35"><name pos:start="9:9" pos:end="9:17">vo_ver_id</name> <operator pos:start="9:19" pos:end="9:19">=</operator> <call pos:start="9:21" pos:end="9:35"><name pos:start="9:21" pos:end="9:28">get_bits</name><argument_list pos:start="9:29" pos:end="9:35">(<argument pos:start="9:30" pos:end="9:31"><expr pos:start="9:30" pos:end="9:31"><name pos:start="9:30" pos:end="9:31">gb</name></expr></argument>, <argument pos:start="9:34" pos:end="9:34"><expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="9:41" pos:end="9:55">/* vo_ver_id */</comment>
        <expr_stmt pos:start="10:9" pos:end="10:25"><expr pos:start="10:9" pos:end="10:24"><call pos:start="10:9" pos:end="10:24"><name pos:start="10:9" pos:end="10:17">skip_bits</name><argument_list pos:start="10:18" pos:end="10:24">(<argument pos:start="10:19" pos:end="10:20"><expr pos:start="10:19" pos:end="10:20"><name pos:start="10:19" pos:end="10:20">gb</name></expr></argument>, <argument pos:start="10:23" pos:end="10:23"><expr pos:start="10:23" pos:end="10:23"><literal type="number" pos:start="10:23" pos:end="10:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block" pos:start="10:41" pos:end="10:57">/* vo_priority */</comment>
    </block_content>}</block></if> <else pos:start="11:7" pos:end="267:13">else <block pos:start="11:12" pos:end="267:13">{<block_content pos:start="12:9" pos:end="267:13">
        <expr_stmt pos:start="12:9" pos:end="12:22"><expr pos:start="12:9" pos:end="12:21"><name pos:start="12:9" pos:end="12:17">vo_ver_id</name> <operator pos:start="12:19" pos:end="12:19">=</operator> <literal type="number" pos:start="12:21" pos:end="12:21">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:43"><expr pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:24">aspect_ratio_info</name></name> <operator pos:start="13:26" pos:end="13:26">=</operator> <call pos:start="13:28" pos:end="13:42"><name pos:start="13:28" pos:end="13:35">get_bits</name><argument_list pos:start="13:36" pos:end="13:42">(<argument pos:start="13:37" pos:end="13:38"><expr pos:start="13:37" pos:end="13:38"><name pos:start="13:37" pos:end="13:38">gb</name></expr></argument>, <argument pos:start="13:41" pos:end="13:41"><expr pos:start="13:41" pos:end="13:41"><literal type="number" pos:start="13:41" pos:end="13:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="267:13"><if pos:start="14:5" pos:end="17:5">if <condition pos:start="14:8" pos:end="14:51">(<expr pos:start="14:9" pos:end="14:50"><name pos:start="14:9" pos:end="14:28"><name pos:start="14:9" pos:end="14:9">s</name><operator pos:start="14:10" pos:end="14:11">-&gt;</operator><name pos:start="14:12" pos:end="14:28">aspect_ratio_info</name></name> <operator pos:start="14:30" pos:end="14:31">==</operator> <name pos:start="14:33" pos:end="14:50">FF_ASPECT_EXTENDED</name></expr>)</condition> <block pos:start="14:53" pos:end="17:5">{<block_content pos:start="15:9" pos:end="16:60">
        <expr_stmt pos:start="15:9" pos:end="15:60"><expr pos:start="15:9" pos:end="15:59"><name pos:start="15:9" pos:end="15:41"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:16">avctx</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:37">sample_aspect_ratio</name><operator pos:start="15:38" pos:end="15:38">.</operator><name pos:start="15:39" pos:end="15:41">num</name></name> <operator pos:start="15:43" pos:end="15:43">=</operator> <call pos:start="15:45" pos:end="15:59"><name pos:start="15:45" pos:end="15:52">get_bits</name><argument_list pos:start="15:53" pos:end="15:59">(<argument pos:start="15:54" pos:end="15:55"><expr pos:start="15:54" pos:end="15:55"><name pos:start="15:54" pos:end="15:55">gb</name></expr></argument>, <argument pos:start="15:58" pos:end="15:58"><expr pos:start="15:58" pos:end="15:58"><literal type="number" pos:start="15:58" pos:end="15:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="15:63" pos:end="15:74">// par_width</comment>
        <expr_stmt pos:start="16:9" pos:end="16:60"><expr pos:start="16:9" pos:end="16:59"><name pos:start="16:9" pos:end="16:41"><name pos:start="16:9" pos:end="16:9">s</name><operator pos:start="16:10" pos:end="16:11">-&gt;</operator><name pos:start="16:12" pos:end="16:16">avctx</name><operator pos:start="16:17" pos:end="16:18">-&gt;</operator><name pos:start="16:19" pos:end="16:37">sample_aspect_ratio</name><operator pos:start="16:38" pos:end="16:38">.</operator><name pos:start="16:39" pos:end="16:41">den</name></name> <operator pos:start="16:43" pos:end="16:43">=</operator> <call pos:start="16:45" pos:end="16:59"><name pos:start="16:45" pos:end="16:52">get_bits</name><argument_list pos:start="16:53" pos:end="16:59">(<argument pos:start="16:54" pos:end="16:55"><expr pos:start="16:54" pos:end="16:55"><name pos:start="16:54" pos:end="16:55">gb</name></expr></argument>, <argument pos:start="16:58" pos:end="16:58"><expr pos:start="16:58" pos:end="16:58"><literal type="number" pos:start="16:58" pos:end="16:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="16:63" pos:end="16:75">// par_height</comment>
    </block_content>}</block></if> <else pos:start="17:7" pos:end="267:13">else <block pos:start="17:12" pos:end="267:13">{<block_content pos:start="18:9" pos:end="267:13">
        <expr_stmt pos:start="18:9" pos:end="18:83"><expr pos:start="18:9" pos:end="18:82"><name pos:start="18:9" pos:end="18:37"><name pos:start="18:9" pos:end="18:9">s</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:16">avctx</name><operator pos:start="18:17" pos:end="18:18">-&gt;</operator><name pos:start="18:19" pos:end="18:37">sample_aspect_ratio</name></name> <operator pos:start="18:39" pos:end="18:39">=</operator> <name pos:start="18:41" pos:end="18:82"><name pos:start="18:41" pos:end="18:60">ff_h263_pixel_aspect</name><index pos:start="18:61" pos:end="18:82">[<expr pos:start="18:62" pos:end="18:81"><name pos:start="18:62" pos:end="18:81"><name pos:start="18:62" pos:end="18:62">s</name><operator pos:start="18:63" pos:end="18:64">-&gt;</operator><name pos:start="18:65" pos:end="18:81">aspect_ratio_info</name></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="267:13"><if pos:start="19:5" pos:end="267:13">if <condition pos:start="19:8" pos:end="19:52">(<expr pos:start="19:9" pos:end="19:51"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:34"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:34">vol_control_parameters</name></name> <operator pos:start="19:36" pos:end="19:36">=</operator> <call pos:start="19:38" pos:end="19:50"><name pos:start="19:38" pos:end="19:46">get_bits1</name><argument_list pos:start="19:47" pos:end="19:50">(<argument pos:start="19:48" pos:end="19:49"><expr pos:start="19:48" pos:end="19:49"><name pos:start="19:48" pos:end="19:49">gb</name></expr></argument>)</argument_list></call><operator pos:start="19:51" pos:end="19:51">)</operator></expr>)</condition> <block pos:start="19:54" pos:end="267:13">{<block_content pos:start="20:9" pos:end="267:13"> <comment type="block" pos:start="19:56" pos:end="19:82">/* vol control parameter */</comment>
        <decl_stmt pos:start="20:9" pos:end="20:44"><decl pos:start="20:9" pos:end="20:43"><type pos:start="20:9" pos:end="20:11"><name pos:start="20:9" pos:end="20:11">int</name></type> <name pos:start="20:13" pos:end="20:25">chroma_format</name> <init pos:start="20:27" pos:end="20:43">= <expr pos:start="20:29" pos:end="20:43"><call pos:start="20:29" pos:end="20:43"><name pos:start="20:29" pos:end="20:36">get_bits</name><argument_list pos:start="20:37" pos:end="20:43">(<argument pos:start="20:38" pos:end="20:39"><expr pos:start="20:38" pos:end="20:39"><name pos:start="20:38" pos:end="20:39">gb</name></expr></argument>, <argument pos:start="20:42" pos:end="20:42"><expr pos:start="20:42" pos:end="20:42"><literal type="number" pos:start="20:42" pos:end="20:42">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="21:9" pos:end="22:70"><if pos:start="21:9" pos:end="22:70">if <condition pos:start="21:12" pos:end="21:40">(<expr pos:start="21:13" pos:end="21:39"><name pos:start="21:13" pos:end="21:25">chroma_format</name> <operator pos:start="21:27" pos:end="21:28">!=</operator> <name pos:start="21:30" pos:end="21:39">CHROMA_420</name></expr>)</condition><block type="pseudo" pos:start="22:13" pos:end="22:70"><block_content pos:start="22:13" pos:end="22:70">
            <expr_stmt pos:start="22:13" pos:end="22:70"><expr pos:start="22:13" pos:end="22:69"><call pos:start="22:13" pos:end="22:69"><name pos:start="22:13" pos:end="22:18">av_log</name><argument_list pos:start="22:19" pos:end="22:69">(<argument pos:start="22:20" pos:end="22:27"><expr pos:start="22:20" pos:end="22:27"><name pos:start="22:20" pos:end="22:27"><name pos:start="22:20" pos:end="22:20">s</name><operator pos:start="22:21" pos:end="22:22">-&gt;</operator><name pos:start="22:23" pos:end="22:27">avctx</name></name></expr></argument>, <argument pos:start="22:30" pos:end="22:41"><expr pos:start="22:30" pos:end="22:41"><name pos:start="22:30" pos:end="22:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="22:44" pos:end="22:68"><expr pos:start="22:44" pos:end="22:68"><literal type="string" pos:start="22:44" pos:end="22:68">"illegal chroma format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:20">low_delay</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <call pos:start="23:24" pos:end="23:36"><name pos:start="23:24" pos:end="23:32">get_bits1</name><argument_list pos:start="23:33" pos:end="23:36">(<argument pos:start="23:34" pos:end="23:35"><expr pos:start="23:34" pos:end="23:35"><name pos:start="23:34" pos:end="23:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="24:9" pos:end="267:13"><if pos:start="24:9" pos:end="36:5">if <condition pos:start="24:12" pos:end="24:26">(<expr pos:start="24:13" pos:end="24:25"><call pos:start="24:13" pos:end="24:25"><name pos:start="24:13" pos:end="24:21">get_bits1</name><argument_list pos:start="24:22" pos:end="24:25">(<argument pos:start="24:23" pos:end="24:24"><expr pos:start="24:23" pos:end="24:24"><name pos:start="24:23" pos:end="24:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="24:28" pos:end="36:5">{<block_content pos:start="25:13" pos:end="35:27">    <comment type="block" pos:start="24:33" pos:end="24:52">/* vbv parameters */</comment>
            <expr_stmt pos:start="25:13" pos:end="25:29"><expr pos:start="25:13" pos:end="25:28"><call pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:20">get_bits</name><argument_list pos:start="25:21" pos:end="25:28">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">gb</name></expr></argument>, <argument pos:start="25:26" pos:end="25:27"><expr pos:start="25:26" pos:end="25:27"><literal type="number" pos:start="25:26" pos:end="25:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="25:33" pos:end="25:56">/* first_half_bitrate */</comment>
            <expr_stmt pos:start="26:13" pos:end="26:27"><expr pos:start="26:13" pos:end="26:26"><call pos:start="26:13" pos:end="26:26"><name pos:start="26:13" pos:end="26:22">skip_bits1</name><argument_list pos:start="26:23" pos:end="26:26">(<argument pos:start="26:24" pos:end="26:25"><expr pos:start="26:24" pos:end="26:25"><name pos:start="26:24" pos:end="26:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="26:33" pos:end="26:44">/* marker */</comment>
            <expr_stmt pos:start="27:13" pos:end="27:29"><expr pos:start="27:13" pos:end="27:28"><call pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:20">get_bits</name><argument_list pos:start="27:21" pos:end="27:28">(<argument pos:start="27:22" pos:end="27:23"><expr pos:start="27:22" pos:end="27:23"><name pos:start="27:22" pos:end="27:23">gb</name></expr></argument>, <argument pos:start="27:26" pos:end="27:27"><expr pos:start="27:26" pos:end="27:27"><literal type="number" pos:start="27:26" pos:end="27:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="27:33" pos:end="27:57">/* latter_half_bitrate */</comment>
            <expr_stmt pos:start="28:13" pos:end="28:27"><expr pos:start="28:13" pos:end="28:26"><call pos:start="28:13" pos:end="28:26"><name pos:start="28:13" pos:end="28:22">skip_bits1</name><argument_list pos:start="28:23" pos:end="28:26">(<argument pos:start="28:24" pos:end="28:25"><expr pos:start="28:24" pos:end="28:25"><name pos:start="28:24" pos:end="28:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="28:33" pos:end="28:44">/* marker */</comment>
            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><call pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:20">get_bits</name><argument_list pos:start="29:21" pos:end="29:28">(<argument pos:start="29:22" pos:end="29:23"><expr pos:start="29:22" pos:end="29:23"><name pos:start="29:22" pos:end="29:23">gb</name></expr></argument>, <argument pos:start="29:26" pos:end="29:27"><expr pos:start="29:26" pos:end="29:27"><literal type="number" pos:start="29:26" pos:end="29:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="29:33" pos:end="29:64">/* first_half_vbv_buffer_size */</comment>
            <expr_stmt pos:start="30:13" pos:end="30:27"><expr pos:start="30:13" pos:end="30:26"><call pos:start="30:13" pos:end="30:26"><name pos:start="30:13" pos:end="30:22">skip_bits1</name><argument_list pos:start="30:23" pos:end="30:26">(<argument pos:start="30:24" pos:end="30:25"><expr pos:start="30:24" pos:end="30:25"><name pos:start="30:24" pos:end="30:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="30:33" pos:end="30:44">/* marker */</comment>
            <expr_stmt pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:27"><call pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:20">get_bits</name><argument_list pos:start="31:21" pos:end="31:27">(<argument pos:start="31:22" pos:end="31:23"><expr pos:start="31:22" pos:end="31:23"><name pos:start="31:22" pos:end="31:23">gb</name></expr></argument>, <argument pos:start="31:26" pos:end="31:26"><expr pos:start="31:26" pos:end="31:26"><literal type="number" pos:start="31:26" pos:end="31:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="31:33" pos:end="31:65">/* latter_half_vbv_buffer_size */</comment>
            <expr_stmt pos:start="32:13" pos:end="32:29"><expr pos:start="32:13" pos:end="32:28"><call pos:start="32:13" pos:end="32:28"><name pos:start="32:13" pos:end="32:20">get_bits</name><argument_list pos:start="32:21" pos:end="32:28">(<argument pos:start="32:22" pos:end="32:23"><expr pos:start="32:22" pos:end="32:23"><name pos:start="32:22" pos:end="32:23">gb</name></expr></argument>, <argument pos:start="32:26" pos:end="32:27"><expr pos:start="32:26" pos:end="32:27"><literal type="number" pos:start="32:26" pos:end="32:27">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="32:33" pos:end="32:62">/* first_half_vbv_occupancy */</comment>
            <expr_stmt pos:start="33:13" pos:end="33:27"><expr pos:start="33:13" pos:end="33:26"><call pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:22">skip_bits1</name><argument_list pos:start="33:23" pos:end="33:26">(<argument pos:start="33:24" pos:end="33:25"><expr pos:start="33:24" pos:end="33:25"><name pos:start="33:24" pos:end="33:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="33:33" pos:end="33:44">/* marker */</comment>
            <expr_stmt pos:start="34:13" pos:end="34:29"><expr pos:start="34:13" pos:end="34:28"><call pos:start="34:13" pos:end="34:28"><name pos:start="34:13" pos:end="34:20">get_bits</name><argument_list pos:start="34:21" pos:end="34:28">(<argument pos:start="34:22" pos:end="34:23"><expr pos:start="34:22" pos:end="34:23"><name pos:start="34:22" pos:end="34:23">gb</name></expr></argument>, <argument pos:start="34:26" pos:end="34:27"><expr pos:start="34:26" pos:end="34:27"><literal type="number" pos:start="34:26" pos:end="34:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="34:33" pos:end="34:63">/* latter_half_vbv_occupancy */</comment>
            <expr_stmt pos:start="35:13" pos:end="35:27"><expr pos:start="35:13" pos:end="35:26"><call pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:22">skip_bits1</name><argument_list pos:start="35:23" pos:end="35:26">(<argument pos:start="35:24" pos:end="35:25"><expr pos:start="35:24" pos:end="35:25"><name pos:start="35:24" pos:end="35:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="35:33" pos:end="35:44">/* marker */</comment>
    </block_content>}</block></if> <else pos:start="36:7" pos:end="267:13">else <block pos:start="36:12" pos:end="267:13">{<block_content pos:start="39:9" pos:end="267:13">
        <comment type="block" pos:start="37:9" pos:end="38:53">/* is setting low delay flag only once the smartest thing to do?
         * low delay detection won't be overriden. */</comment>
        <if_stmt pos:start="39:9" pos:end="40:29"><if pos:start="39:9" pos:end="40:29">if <condition pos:start="39:12" pos:end="39:35">(<expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:29">picture_number</name></name> <operator pos:start="39:31" pos:end="39:32">==</operator> <literal type="number" pos:start="39:34" pos:end="39:34">0</literal></expr>)</condition><block type="pseudo" pos:start="40:13" pos:end="40:29"><block_content pos:start="40:13" pos:end="40:29">
            <expr_stmt pos:start="40:13" pos:end="40:29"><expr pos:start="40:13" pos:end="40:28"><name pos:start="40:13" pos:end="40:24"><name pos:start="40:13" pos:end="40:13">s</name><operator pos:start="40:14" pos:end="40:15">-&gt;</operator><name pos:start="40:16" pos:end="40:24">low_delay</name></name> <operator pos:start="40:26" pos:end="40:26">=</operator> <literal type="number" pos:start="40:28" pos:end="40:28">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:33"><expr pos:start="41:5" pos:end="41:32"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:14">shape</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:32"><name pos:start="41:18" pos:end="41:25">get_bits</name><argument_list pos:start="41:26" pos:end="41:32">(<argument pos:start="41:27" pos:end="41:28"><expr pos:start="41:27" pos:end="41:28"><name pos:start="41:27" pos:end="41:28">gb</name></expr></argument>, <argument pos:start="41:31" pos:end="41:31"><expr pos:start="41:31" pos:end="41:31"><literal type="number" pos:start="41:31" pos:end="41:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="41:35" pos:end="41:49">/* vol shape */</comment>
    <if_stmt pos:start="42:5" pos:end="43:75"><if pos:start="42:5" pos:end="43:75">if <condition pos:start="42:8" pos:end="42:33">(<expr pos:start="42:9" pos:end="42:32"><name pos:start="42:9" pos:end="42:18"><name pos:start="42:9" pos:end="42:11">ctx</name><operator pos:start="42:12" pos:end="42:13">-&gt;</operator><name pos:start="42:14" pos:end="42:18">shape</name></name> <operator pos:start="42:20" pos:end="42:21">!=</operator> <name pos:start="42:23" pos:end="42:32">RECT_SHAPE</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:75"><block_content pos:start="43:9" pos:end="43:75">
        <expr_stmt pos:start="43:9" pos:end="43:75"><expr pos:start="43:9" pos:end="43:74"><call pos:start="43:9" pos:end="43:74"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:74">(<argument pos:start="43:16" pos:end="43:23"><expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:23">avctx</name></name></expr></argument>, <argument pos:start="43:26" pos:end="43:37"><expr pos:start="43:26" pos:end="43:37"><name pos:start="43:26" pos:end="43:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:40" pos:end="43:73"><expr pos:start="43:40" pos:end="43:73"><literal type="string" pos:start="43:40" pos:end="43:73">"only rectangular vol supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="44:5" pos:end="267:13"><if pos:start="44:5" pos:end="267:13">if <condition pos:start="44:8" pos:end="44:51">(<expr pos:start="44:9" pos:end="44:50"><name pos:start="44:9" pos:end="44:18"><name pos:start="44:9" pos:end="44:11">ctx</name><operator pos:start="44:12" pos:end="44:13">-&gt;</operator><name pos:start="44:14" pos:end="44:18">shape</name></name> <operator pos:start="44:20" pos:end="44:21">==</operator> <name pos:start="44:23" pos:end="44:32">GRAY_SHAPE</name> <operator pos:start="44:34" pos:end="44:35">&amp;&amp;</operator> <name pos:start="44:37" pos:end="44:45">vo_ver_id</name> <operator pos:start="44:47" pos:end="44:48">!=</operator> <literal type="number" pos:start="44:50" pos:end="44:50">1</literal></expr>)</condition> <block pos:start="44:53" pos:end="267:13">{<block_content pos:start="45:9" pos:end="267:13">
        <expr_stmt pos:start="45:9" pos:end="45:69"><expr pos:start="45:9" pos:end="45:68"><call pos:start="45:9" pos:end="45:68"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:68">(<argument pos:start="45:16" pos:end="45:23"><expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:16">s</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:23">avctx</name></name></expr></argument>, <argument pos:start="45:26" pos:end="45:37"><expr pos:start="45:26" pos:end="45:37"><name pos:start="45:26" pos:end="45:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:40" pos:end="45:67"><expr pos:start="45:40" pos:end="45:67"><literal type="string" pos:start="45:40" pos:end="45:67">"Gray shape not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:25"><expr pos:start="46:9" pos:end="46:24"><call pos:start="46:9" pos:end="46:24"><name pos:start="46:9" pos:end="46:17">skip_bits</name><argument_list pos:start="46:18" pos:end="46:24">(<argument pos:start="46:19" pos:end="46:20"><expr pos:start="46:19" pos:end="46:20"><name pos:start="46:19" pos:end="46:20">gb</name></expr></argument>, <argument pos:start="46:23" pos:end="46:23"><expr pos:start="46:23" pos:end="46:23"><literal type="number" pos:start="46:23" pos:end="46:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="46:28" pos:end="46:67">/* video_object_layer_shape_extension */</comment>
    <expr_stmt pos:start="47:5" pos:end="47:57"><expr pos:start="47:5" pos:end="47:56"><call pos:start="47:5" pos:end="47:56"><name pos:start="47:5" pos:end="47:16">check_marker</name><argument_list pos:start="47:17" pos:end="47:56">(<argument pos:start="47:18" pos:end="47:19"><expr pos:start="47:18" pos:end="47:19"><name pos:start="47:18" pos:end="47:19">gb</name></expr></argument>, <argument pos:start="47:22" pos:end="47:55"><expr pos:start="47:22" pos:end="47:55"><literal type="string" pos:start="47:22" pos:end="47:55">"before time_increment_resolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:47"><expr pos:start="48:5" pos:end="48:46"><name pos:start="48:5" pos:end="48:27"><name pos:start="48:5" pos:end="48:5">s</name><operator pos:start="48:6" pos:end="48:7">-&gt;</operator><name pos:start="48:8" pos:end="48:12">avctx</name><operator pos:start="48:13" pos:end="48:14">-&gt;</operator><name pos:start="48:15" pos:end="48:23">time_base</name><operator pos:start="48:24" pos:end="48:24">.</operator><name pos:start="48:25" pos:end="48:27">den</name></name> <operator pos:start="48:29" pos:end="48:29">=</operator> <call pos:start="48:31" pos:end="48:46"><name pos:start="48:31" pos:end="48:38">get_bits</name><argument_list pos:start="48:39" pos:end="48:46">(<argument pos:start="48:40" pos:end="48:41"><expr pos:start="48:40" pos:end="48:41"><name pos:start="48:40" pos:end="48:41">gb</name></expr></argument>, <argument pos:start="48:44" pos:end="48:45"><expr pos:start="48:44" pos:end="48:45"><literal type="number" pos:start="48:44" pos:end="48:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="49:5" pos:end="267:13"><if pos:start="49:5" pos:end="267:13">if <condition pos:start="49:8" pos:end="49:33">(<expr pos:start="49:9" pos:end="49:32"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:32"><name pos:start="49:10" pos:end="49:10">s</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:17">avctx</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:28">time_base</name><operator pos:start="49:29" pos:end="49:29">.</operator><name pos:start="49:30" pos:end="49:32">den</name></name></expr>)</condition> <block pos:start="49:35" pos:end="267:13">{<block_content pos:start="50:9" pos:end="267:13">
        <expr_stmt pos:start="50:9" pos:end="50:61"><expr pos:start="50:9" pos:end="50:60"><call pos:start="50:9" pos:end="50:60"><name pos:start="50:9" pos:end="50:14">av_log</name><argument_list pos:start="50:15" pos:end="50:60">(<argument pos:start="50:16" pos:end="50:23"><expr pos:start="50:16" pos:end="50:23"><name pos:start="50:16" pos:end="50:23"><name pos:start="50:16" pos:end="50:16">s</name><operator pos:start="50:17" pos:end="50:18">-&gt;</operator><name pos:start="50:19" pos:end="50:23">avctx</name></name></expr></argument>, <argument pos:start="50:26" pos:end="50:37"><expr pos:start="50:26" pos:end="50:37"><name pos:start="50:26" pos:end="50:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="50:40" pos:end="50:59"><expr pos:start="50:40" pos:end="50:59"><literal type="string" pos:start="50:40" pos:end="50:59">"time_base.den==0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:16">avctx</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:27">time_base</name><operator pos:start="51:28" pos:end="51:28">.</operator><name pos:start="51:29" pos:end="51:31">num</name></name> <operator pos:start="51:33" pos:end="51:33">=</operator> <literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>;</expr_stmt>
        <return pos:start="52:9" pos:end="52:18">return <expr pos:start="52:16" pos:end="52:17"><operator pos:start="52:16" pos:end="52:16">-</operator><literal type="number" pos:start="52:17" pos:end="52:17">1</literal></expr>;</return>
    <expr_stmt pos:start="53:5" pos:end="53:72"><expr pos:start="53:5" pos:end="53:71"><name pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:28">time_increment_bits</name></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <call pos:start="53:32" pos:end="53:67"><name pos:start="53:32" pos:end="53:38">av_log2</name><argument_list pos:start="53:39" pos:end="53:67">(<argument pos:start="53:40" pos:end="53:66"><expr pos:start="53:40" pos:end="53:66"><name pos:start="53:40" pos:end="53:62"><name pos:start="53:40" pos:end="53:40">s</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:47">avctx</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:58">time_base</name><operator pos:start="53:59" pos:end="53:59">.</operator><name pos:start="53:60" pos:end="53:62">den</name></name> <operator pos:start="53:64" pos:end="53:64">-</operator> <literal type="number" pos:start="53:66" pos:end="53:66">1</literal></expr></argument>)</argument_list></call> <operator pos:start="53:69" pos:end="53:69">+</operator> <literal type="number" pos:start="53:71" pos:end="53:71">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="54:5" pos:end="55:37"><if pos:start="54:5" pos:end="55:37">if <condition pos:start="54:8" pos:end="54:37">(<expr pos:start="54:9" pos:end="54:36"><name pos:start="54:9" pos:end="54:32"><name pos:start="54:9" pos:end="54:11">ctx</name><operator pos:start="54:12" pos:end="54:13">-&gt;</operator><name pos:start="54:14" pos:end="54:32">time_increment_bits</name></name> <operator pos:start="54:34" pos:end="54:34">&lt;</operator> <literal type="number" pos:start="54:36" pos:end="54:36">1</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:37"><block_content pos:start="55:9" pos:end="55:37">
        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:11">ctx</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:32">time_increment_bits</name></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <literal type="number" pos:start="55:36" pos:end="55:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:46"><expr pos:start="56:5" pos:end="56:45"><call pos:start="56:5" pos:end="56:45"><name pos:start="56:5" pos:end="56:16">check_marker</name><argument_list pos:start="56:17" pos:end="56:45">(<argument pos:start="56:18" pos:end="56:19"><expr pos:start="56:18" pos:end="56:19"><name pos:start="56:18" pos:end="56:19">gb</name></expr></argument>, <argument pos:start="56:22" pos:end="56:44"><expr pos:start="56:22" pos:end="56:44"><literal type="string" pos:start="56:22" pos:end="56:44">"before fixed_vop_rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="57:5" pos:end="60:36"><if pos:start="57:5" pos:end="58:73">if <condition pos:start="57:8" pos:end="57:27">(<expr pos:start="57:9" pos:end="57:26"><call pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:17">get_bits1</name><argument_list pos:start="57:18" pos:end="57:21">(<argument pos:start="57:19" pos:end="57:20"><expr pos:start="57:19" pos:end="57:20"><name pos:start="57:19" pos:end="57:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="57:23" pos:end="57:24">!=</operator> <literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>)</condition><block type="pseudo" pos:start="58:9" pos:end="58:73"><block_content pos:start="58:9" pos:end="58:73">     <comment type="block" pos:start="57:33" pos:end="57:53">/* fixed_vop_rate  */</comment>
        <expr_stmt pos:start="58:9" pos:end="58:73"><expr pos:start="58:9" pos:end="58:72"><name pos:start="58:9" pos:end="58:31"><name pos:start="58:9" pos:end="58:9">s</name><operator pos:start="58:10" pos:end="58:11">-&gt;</operator><name pos:start="58:12" pos:end="58:16">avctx</name><operator pos:start="58:17" pos:end="58:18">-&gt;</operator><name pos:start="58:19" pos:end="58:27">time_base</name><operator pos:start="58:28" pos:end="58:28">.</operator><name pos:start="58:29" pos:end="58:31">num</name></name> <operator pos:start="58:33" pos:end="58:33">=</operator> <call pos:start="58:35" pos:end="58:72"><name pos:start="58:35" pos:end="58:42">get_bits</name><argument_list pos:start="58:43" pos:end="58:72">(<argument pos:start="58:44" pos:end="58:45"><expr pos:start="58:44" pos:end="58:45"><name pos:start="58:44" pos:end="58:45">gb</name></expr></argument>, <argument pos:start="58:48" pos:end="58:71"><expr pos:start="58:48" pos:end="58:71"><name pos:start="58:48" pos:end="58:71"><name pos:start="58:48" pos:end="58:50">ctx</name><operator pos:start="58:51" pos:end="58:52">-&gt;</operator><name pos:start="58:53" pos:end="58:71">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="59:5" pos:end="60:36">else<block type="pseudo" pos:start="60:9" pos:end="60:36"><block_content pos:start="60:9" pos:end="60:36">
        <expr_stmt pos:start="60:9" pos:end="60:36"><expr pos:start="60:9" pos:end="60:35"><name pos:start="60:9" pos:end="60:31"><name pos:start="60:9" pos:end="60:9">s</name><operator pos:start="60:10" pos:end="60:11">-&gt;</operator><name pos:start="60:12" pos:end="60:16">avctx</name><operator pos:start="60:17" pos:end="60:18">-&gt;</operator><name pos:start="60:19" pos:end="60:27">time_base</name><operator pos:start="60:28" pos:end="60:28">.</operator><name pos:start="60:29" pos:end="60:31">num</name></name> <operator pos:start="60:33" pos:end="60:33">=</operator> <literal type="number" pos:start="60:35" pos:end="60:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:21"><expr pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:7">ctx</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:16">t_frame</name></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="62:5" pos:end="267:13"><if pos:start="62:5" pos:end="267:13">if <condition pos:start="62:8" pos:end="62:37">(<expr pos:start="62:9" pos:end="62:36"><name pos:start="62:9" pos:end="62:18"><name pos:start="62:9" pos:end="62:11">ctx</name><operator pos:start="62:12" pos:end="62:13">-&gt;</operator><name pos:start="62:14" pos:end="62:18">shape</name></name> <operator pos:start="62:20" pos:end="62:21">!=</operator> <name pos:start="62:23" pos:end="62:36">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="62:39" pos:end="267:13">{<block_content pos:start="63:9" pos:end="267:13">
        <if_stmt pos:start="63:9" pos:end="267:13"><if pos:start="63:9" pos:end="267:13">if <condition pos:start="63:12" pos:end="63:37">(<expr pos:start="63:13" pos:end="63:36"><name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:15">ctx</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:22">shape</name></name> <operator pos:start="63:24" pos:end="63:25">==</operator> <name pos:start="63:27" pos:end="63:36">RECT_SHAPE</name></expr>)</condition> <block pos:start="63:39" pos:end="267:13">{<block_content pos:start="64:13" pos:end="267:13">
            <expr_stmt pos:start="64:13" pos:end="64:45"><expr pos:start="64:13" pos:end="64:44"><call pos:start="64:13" pos:end="64:44"><name pos:start="64:13" pos:end="64:24">check_marker</name><argument_list pos:start="64:25" pos:end="64:44">(<argument pos:start="64:26" pos:end="64:27"><expr pos:start="64:26" pos:end="64:27"><name pos:start="64:26" pos:end="64:27">gb</name></expr></argument>, <argument pos:start="64:30" pos:end="64:43"><expr pos:start="64:30" pos:end="64:43"><literal type="string" pos:start="64:30" pos:end="64:43">"before width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="65:13" pos:end="65:37"><expr pos:start="65:13" pos:end="65:36"><name pos:start="65:13" pos:end="65:17">width</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:36"><name pos:start="65:21" pos:end="65:28">get_bits</name><argument_list pos:start="65:29" pos:end="65:36">(<argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">gb</name></expr></argument>, <argument pos:start="65:34" pos:end="65:35"><expr pos:start="65:34" pos:end="65:35"><literal type="number" pos:start="65:34" pos:end="65:35">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:46"><expr pos:start="66:13" pos:end="66:45"><call pos:start="66:13" pos:end="66:45"><name pos:start="66:13" pos:end="66:24">check_marker</name><argument_list pos:start="66:25" pos:end="66:45">(<argument pos:start="66:26" pos:end="66:27"><expr pos:start="66:26" pos:end="66:27"><name pos:start="66:26" pos:end="66:27">gb</name></expr></argument>, <argument pos:start="66:30" pos:end="66:44"><expr pos:start="66:30" pos:end="66:44"><literal type="string" pos:start="66:30" pos:end="66:44">"before height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:18">height</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:37"><name pos:start="67:22" pos:end="67:29">get_bits</name><argument_list pos:start="67:30" pos:end="67:37">(<argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><name pos:start="67:31" pos:end="67:32">gb</name></expr></argument>, <argument pos:start="67:35" pos:end="67:36"><expr pos:start="67:35" pos:end="67:36"><literal type="number" pos:start="67:35" pos:end="67:36">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:45"><expr pos:start="68:13" pos:end="68:44"><call pos:start="68:13" pos:end="68:44"><name pos:start="68:13" pos:end="68:24">check_marker</name><argument_list pos:start="68:25" pos:end="68:44">(<argument pos:start="68:26" pos:end="68:27"><expr pos:start="68:26" pos:end="68:27"><name pos:start="68:26" pos:end="68:27">gb</name></expr></argument>, <argument pos:start="68:30" pos:end="68:43"><expr pos:start="68:30" pos:end="68:43"><literal type="string" pos:start="68:30" pos:end="68:43">"after height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="69:13" pos:end="267:13"><if pos:start="69:13" pos:end="267:13">if <condition pos:start="69:16" pos:end="70:63">(<expr pos:start="69:17" pos:end="70:62"><name pos:start="69:17" pos:end="69:21">width</name> <operator pos:start="69:23" pos:end="69:24">&amp;&amp;</operator> <name pos:start="69:26" pos:end="69:31">height</name> <operator pos:start="69:33" pos:end="69:34">&amp;&amp;</operator>  <comment type="block" pos:start="69:37" pos:end="69:79">/* they should be non zero but who knows */</comment>
                <operator pos:start="70:17" pos:end="70:17">!</operator><operator pos:start="70:18" pos:end="70:18">(</operator><name pos:start="70:19" pos:end="70:26"><name pos:start="70:19" pos:end="70:19">s</name><operator pos:start="70:20" pos:end="70:21">-&gt;</operator><name pos:start="70:22" pos:end="70:26">width</name></name> <operator pos:start="70:28" pos:end="70:29">&amp;&amp;</operator> <name pos:start="70:31" pos:end="70:42"><name pos:start="70:31" pos:end="70:31">s</name><operator pos:start="70:32" pos:end="70:33">-&gt;</operator><name pos:start="70:34" pos:end="70:42">codec_tag</name></name> <operator pos:start="70:44" pos:end="70:45">==</operator> <call pos:start="70:47" pos:end="70:61"><name pos:start="70:47" pos:end="70:53">AV_RL32</name><argument_list pos:start="70:54" pos:end="70:61">(<argument pos:start="70:55" pos:end="70:60"><expr pos:start="70:55" pos:end="70:60"><literal type="string" pos:start="70:55" pos:end="70:60">"MP4S"</literal></expr></argument>)</argument_list></call><operator pos:start="70:62" pos:end="70:62">)</operator></expr>)</condition> <block pos:start="70:65" pos:end="267:13">{<block_content pos:start="71:17" pos:end="267:13">
                <if_stmt pos:start="71:17" pos:end="73:42"><if pos:start="71:17" pos:end="73:42">if <condition pos:start="71:20" pos:end="72:63">(<expr pos:start="71:21" pos:end="72:62"><name pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:28">width</name></name> <operator pos:start="71:30" pos:end="71:31">&amp;&amp;</operator> <name pos:start="71:33" pos:end="71:41"><name pos:start="71:33" pos:end="71:33">s</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:41">height</name></name> <operator pos:start="71:43" pos:end="71:44">&amp;&amp;</operator>
                    <operator pos:start="72:21" pos:end="72:21">(</operator><name pos:start="72:22" pos:end="72:29"><name pos:start="72:22" pos:end="72:22">s</name><operator pos:start="72:23" pos:end="72:24">-&gt;</operator><name pos:start="72:25" pos:end="72:29">width</name></name> <operator pos:start="72:31" pos:end="72:32">!=</operator> <name pos:start="72:34" pos:end="72:38">width</name> <operator pos:start="72:40" pos:end="72:41">||</operator> <name pos:start="72:43" pos:end="72:51"><name pos:start="72:43" pos:end="72:43">s</name><operator pos:start="72:44" pos:end="72:45">-&gt;</operator><name pos:start="72:46" pos:end="72:51">height</name></name> <operator pos:start="72:53" pos:end="72:54">!=</operator> <name pos:start="72:56" pos:end="72:61">height</name><operator pos:start="72:62" pos:end="72:62">)</operator></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:42"><block_content pos:start="73:21" pos:end="73:42">
                    <expr_stmt pos:start="73:21" pos:end="73:42"><expr pos:start="73:21" pos:end="73:41"><name pos:start="73:21" pos:end="73:37"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:37">context_reinit</name></name> <operator pos:start="73:39" pos:end="73:39">=</operator> <literal type="number" pos:start="73:41" pos:end="73:41">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="74:17" pos:end="74:34"><expr pos:start="74:17" pos:end="74:33"><name pos:start="74:17" pos:end="74:24"><name pos:start="74:17" pos:end="74:17">s</name><operator pos:start="74:18" pos:end="74:19">-&gt;</operator><name pos:start="74:20" pos:end="74:24">width</name></name>  <operator pos:start="74:27" pos:end="74:27">=</operator> <name pos:start="74:29" pos:end="74:33">width</name></expr>;</expr_stmt>
                <expr_stmt pos:start="75:17" pos:end="75:35"><expr pos:start="75:17" pos:end="75:34"><name pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:25">height</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <name pos:start="75:29" pos:end="75:34">height</name></expr>;</expr_stmt>
        <expr_stmt pos:start="76:9" pos:end="77:53"><expr pos:start="76:9" pos:end="77:52"><name pos:start="76:9" pos:end="76:31"><name pos:start="76:9" pos:end="76:9">s</name><operator pos:start="76:10" pos:end="76:11">-&gt;</operator><name pos:start="76:12" pos:end="76:31">progressive_sequence</name></name>  <operator pos:start="76:34" pos:end="76:34">=</operator>
        <name pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:28">progressive_frame</name></name>     <operator pos:start="77:34" pos:end="77:34">=</operator> <call pos:start="77:36" pos:end="77:48"><name pos:start="77:36" pos:end="77:44">get_bits1</name><argument_list pos:start="77:45" pos:end="77:48">(<argument pos:start="77:46" pos:end="77:47"><expr pos:start="77:46" pos:end="77:47"><name pos:start="77:46" pos:end="77:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="77:50" pos:end="77:50">^</operator> <literal type="number" pos:start="77:52" pos:end="77:52">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:37"><expr pos:start="78:9" pos:end="78:36"><name pos:start="78:9" pos:end="78:25"><name pos:start="78:9" pos:end="78:9">s</name><operator pos:start="78:10" pos:end="78:11">-&gt;</operator><name pos:start="78:12" pos:end="78:25">interlaced_dct</name></name>        <operator pos:start="78:34" pos:end="78:34">=</operator> <literal type="number" pos:start="78:36" pos:end="78:36">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="79:9" pos:end="81:77"><if pos:start="79:9" pos:end="81:77">if <condition pos:start="79:12" pos:end="79:69">(<expr pos:start="79:13" pos:end="79:68"><operator pos:start="79:13" pos:end="79:13">!</operator><call pos:start="79:14" pos:end="79:26"><name pos:start="79:14" pos:end="79:22">get_bits1</name><argument_list pos:start="79:23" pos:end="79:26">(<argument pos:start="79:24" pos:end="79:25"><expr pos:start="79:24" pos:end="79:25"><name pos:start="79:24" pos:end="79:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="79:28" pos:end="79:29">&amp;&amp;</operator> <operator pos:start="79:31" pos:end="79:31">(</operator><name pos:start="79:32" pos:end="79:46"><name pos:start="79:32" pos:end="79:32">s</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:39">avctx</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:46">debug</name></name> <operator pos:start="79:48" pos:end="79:48">&amp;</operator> <name pos:start="79:50" pos:end="79:67">FF_DEBUG_PICT_INFO</name><operator pos:start="79:68" pos:end="79:68">)</operator></expr>)</condition><block type="pseudo" pos:start="80:13" pos:end="81:77"><block_content pos:start="80:13" pos:end="81:77">
            <expr_stmt pos:start="80:13" pos:end="81:77"><expr pos:start="80:13" pos:end="81:76"><call pos:start="80:13" pos:end="81:76"><name pos:start="80:13" pos:end="80:18">av_log</name><argument_list pos:start="80:19" pos:end="81:76">(<argument pos:start="80:20" pos:end="80:27"><expr pos:start="80:20" pos:end="80:27"><name pos:start="80:20" pos:end="80:27"><name pos:start="80:20" pos:end="80:20">s</name><operator pos:start="80:21" pos:end="80:22">-&gt;</operator><name pos:start="80:23" pos:end="80:27">avctx</name></name></expr></argument>, <argument pos:start="80:30" pos:end="80:40"><expr pos:start="80:30" pos:end="80:40"><name pos:start="80:30" pos:end="80:40">AV_LOG_INFO</name></expr></argument>,           <comment type="block" pos:start="80:53" pos:end="80:70">/* OBMC Disable */</comment>
                   <argument pos:start="81:20" pos:end="81:75"><expr pos:start="81:20" pos:end="81:75"><literal type="string" pos:start="81:20" pos:end="81:75">"MPEG4 OBMC not supported (very likely buggy encoder)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="82:9" pos:end="85:52"><if pos:start="82:9" pos:end="83:50">if <condition pos:start="82:12" pos:end="82:27">(<expr pos:start="82:13" pos:end="82:26"><name pos:start="82:13" pos:end="82:21">vo_ver_id</name> <operator pos:start="82:23" pos:end="82:24">==</operator> <literal type="number" pos:start="82:26" pos:end="82:26">1</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:50"><block_content pos:start="83:13" pos:end="83:50">
            <expr_stmt pos:start="83:13" pos:end="83:50"><expr pos:start="83:13" pos:end="83:49"><name pos:start="83:13" pos:end="83:33"><name pos:start="83:13" pos:end="83:15">ctx</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:33">vol_sprite_usage</name></name> <operator pos:start="83:35" pos:end="83:35">=</operator> <call pos:start="83:37" pos:end="83:49"><name pos:start="83:37" pos:end="83:45">get_bits1</name><argument_list pos:start="83:46" pos:end="83:49">(<argument pos:start="83:47" pos:end="83:48"><expr pos:start="83:47" pos:end="83:48"><name pos:start="83:47" pos:end="83:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>    <comment type="block" pos:start="83:55" pos:end="83:76">/* vol_sprite_usage */</comment>
        <else pos:start="84:9" pos:end="85:52">else<block type="pseudo" pos:start="85:13" pos:end="85:52"><block_content pos:start="85:13" pos:end="85:52">
            <expr_stmt pos:start="85:13" pos:end="85:52"><expr pos:start="85:13" pos:end="85:51"><name pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:15">ctx</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:33">vol_sprite_usage</name></name> <operator pos:start="85:35" pos:end="85:35">=</operator> <call pos:start="85:37" pos:end="85:51"><name pos:start="85:37" pos:end="85:44">get_bits</name><argument_list pos:start="85:45" pos:end="85:51">(<argument pos:start="85:46" pos:end="85:47"><expr pos:start="85:46" pos:end="85:47"><name pos:start="85:46" pos:end="85:47">gb</name></expr></argument>, <argument pos:start="85:50" pos:end="85:50"><expr pos:start="85:50" pos:end="85:50"><literal type="number" pos:start="85:50" pos:end="85:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block" pos:start="85:55" pos:end="85:76">/* vol_sprite_usage */</comment>
        <if_stmt pos:start="86:9" pos:end="87:77"><if pos:start="86:9" pos:end="87:77">if <condition pos:start="86:12" pos:end="86:51">(<expr pos:start="86:13" pos:end="86:50"><name pos:start="86:13" pos:end="86:33"><name pos:start="86:13" pos:end="86:15">ctx</name><operator pos:start="86:16" pos:end="86:17">-&gt;</operator><name pos:start="86:18" pos:end="86:33">vol_sprite_usage</name></name> <operator pos:start="86:35" pos:end="86:36">==</operator> <name pos:start="86:38" pos:end="86:50">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:77"><block_content pos:start="87:13" pos:end="87:77">
            <expr_stmt pos:start="87:13" pos:end="87:77"><expr pos:start="87:13" pos:end="87:76"><call pos:start="87:13" pos:end="87:76"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:76">(<argument pos:start="87:20" pos:end="87:27"><expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:20">s</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:27">avctx</name></name></expr></argument>, <argument pos:start="87:30" pos:end="87:41"><expr pos:start="87:30" pos:end="87:41"><name pos:start="87:30" pos:end="87:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:44" pos:end="87:75"><expr pos:start="87:44" pos:end="87:75"><literal type="string" pos:start="87:44" pos:end="87:75">"Static Sprites not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="88:9" pos:end="267:13"><if pos:start="88:9" pos:end="267:13">if <condition pos:start="88:12" pos:end="89:48">(<expr pos:start="88:13" pos:end="89:47"><name pos:start="88:13" pos:end="88:33"><name pos:start="88:13" pos:end="88:15">ctx</name><operator pos:start="88:16" pos:end="88:17">-&gt;</operator><name pos:start="88:18" pos:end="88:33">vol_sprite_usage</name></name> <operator pos:start="88:35" pos:end="88:36">==</operator> <name pos:start="88:38" pos:end="88:50">STATIC_SPRITE</name> <operator pos:start="88:52" pos:end="88:53">||</operator>
            <name pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:15">ctx</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:33">vol_sprite_usage</name></name> <operator pos:start="89:35" pos:end="89:36">==</operator> <name pos:start="89:38" pos:end="89:47">GMC_SPRITE</name></expr>)</condition> <block pos:start="89:50" pos:end="267:13">{<block_content pos:start="90:13" pos:end="267:13">
            <if_stmt pos:start="90:13" pos:end="267:13"><if pos:start="90:13" pos:end="267:13">if <condition pos:start="90:16" pos:end="90:55">(<expr pos:start="90:17" pos:end="90:54"><name pos:start="90:17" pos:end="90:37"><name pos:start="90:17" pos:end="90:19">ctx</name><operator pos:start="90:20" pos:end="90:21">-&gt;</operator><name pos:start="90:22" pos:end="90:37">vol_sprite_usage</name></name> <operator pos:start="90:39" pos:end="90:40">==</operator> <name pos:start="90:42" pos:end="90:54">STATIC_SPRITE</name></expr>)</condition> <block pos:start="90:57" pos:end="267:13">{<block_content pos:start="91:17" pos:end="267:13">
                <expr_stmt pos:start="91:17" pos:end="91:34"><expr pos:start="91:17" pos:end="91:33"><call pos:start="91:17" pos:end="91:33"><name pos:start="91:17" pos:end="91:25">skip_bits</name><argument_list pos:start="91:26" pos:end="91:33">(<argument pos:start="91:27" pos:end="91:28"><expr pos:start="91:27" pos:end="91:28"><name pos:start="91:27" pos:end="91:28">gb</name></expr></argument>, <argument pos:start="91:31" pos:end="91:32"><expr pos:start="91:31" pos:end="91:32"><literal type="number" pos:start="91:31" pos:end="91:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="91:36" pos:end="91:50">// sprite_width</comment>
                <expr_stmt pos:start="92:17" pos:end="92:31"><expr pos:start="92:17" pos:end="92:30"><call pos:start="92:17" pos:end="92:30"><name pos:start="92:17" pos:end="92:26">skip_bits1</name><argument_list pos:start="92:27" pos:end="92:30">(<argument pos:start="92:28" pos:end="92:29"><expr pos:start="92:28" pos:end="92:29"><name pos:start="92:28" pos:end="92:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="92:33" pos:end="92:44">/* marker */</comment>
                <expr_stmt pos:start="93:17" pos:end="93:34"><expr pos:start="93:17" pos:end="93:33"><call pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:25">skip_bits</name><argument_list pos:start="93:26" pos:end="93:33">(<argument pos:start="93:27" pos:end="93:28"><expr pos:start="93:27" pos:end="93:28"><name pos:start="93:27" pos:end="93:28">gb</name></expr></argument>, <argument pos:start="93:31" pos:end="93:32"><expr pos:start="93:31" pos:end="93:32"><literal type="number" pos:start="93:31" pos:end="93:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="93:36" pos:end="93:51">// sprite_height</comment>
                <expr_stmt pos:start="94:17" pos:end="94:31"><expr pos:start="94:17" pos:end="94:30"><call pos:start="94:17" pos:end="94:30"><name pos:start="94:17" pos:end="94:26">skip_bits1</name><argument_list pos:start="94:27" pos:end="94:30">(<argument pos:start="94:28" pos:end="94:29"><expr pos:start="94:28" pos:end="94:29"><name pos:start="94:28" pos:end="94:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="94:33" pos:end="94:44">/* marker */</comment>
                <expr_stmt pos:start="95:17" pos:end="95:34"><expr pos:start="95:17" pos:end="95:33"><call pos:start="95:17" pos:end="95:33"><name pos:start="95:17" pos:end="95:25">skip_bits</name><argument_list pos:start="95:26" pos:end="95:33">(<argument pos:start="95:27" pos:end="95:28"><expr pos:start="95:27" pos:end="95:28"><name pos:start="95:27" pos:end="95:28">gb</name></expr></argument>, <argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><literal type="number" pos:start="95:31" pos:end="95:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="95:36" pos:end="95:49">// sprite_left</comment>
                <expr_stmt pos:start="96:17" pos:end="96:31"><expr pos:start="96:17" pos:end="96:30"><call pos:start="96:17" pos:end="96:30"><name pos:start="96:17" pos:end="96:26">skip_bits1</name><argument_list pos:start="96:27" pos:end="96:30">(<argument pos:start="96:28" pos:end="96:29"><expr pos:start="96:28" pos:end="96:29"><name pos:start="96:28" pos:end="96:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="96:33" pos:end="96:44">/* marker */</comment>
                <expr_stmt pos:start="97:17" pos:end="97:34"><expr pos:start="97:17" pos:end="97:33"><call pos:start="97:17" pos:end="97:33"><name pos:start="97:17" pos:end="97:25">skip_bits</name><argument_list pos:start="97:26" pos:end="97:33">(<argument pos:start="97:27" pos:end="97:28"><expr pos:start="97:27" pos:end="97:28"><name pos:start="97:27" pos:end="97:28">gb</name></expr></argument>, <argument pos:start="97:31" pos:end="97:32"><expr pos:start="97:31" pos:end="97:32"><literal type="number" pos:start="97:31" pos:end="97:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="97:36" pos:end="97:48">// sprite_top</comment>
                <expr_stmt pos:start="98:17" pos:end="98:31"><expr pos:start="98:17" pos:end="98:30"><call pos:start="98:17" pos:end="98:30"><name pos:start="98:17" pos:end="98:26">skip_bits1</name><argument_list pos:start="98:27" pos:end="98:30">(<argument pos:start="98:28" pos:end="98:29"><expr pos:start="98:28" pos:end="98:29"><name pos:start="98:28" pos:end="98:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="98:33" pos:end="98:44">/* marker */</comment>
            <expr_stmt pos:start="99:13" pos:end="99:61"><expr pos:start="99:13" pos:end="99:60"><name pos:start="99:13" pos:end="99:42"><name pos:start="99:13" pos:end="99:15">ctx</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:42">num_sprite_warping_points</name></name> <operator pos:start="99:44" pos:end="99:44">=</operator> <call pos:start="99:46" pos:end="99:60"><name pos:start="99:46" pos:end="99:53">get_bits</name><argument_list pos:start="99:54" pos:end="99:60">(<argument pos:start="99:55" pos:end="99:56"><expr pos:start="99:55" pos:end="99:56"><name pos:start="99:55" pos:end="99:56">gb</name></expr></argument>, <argument pos:start="99:59" pos:end="99:59"><expr pos:start="99:59" pos:end="99:59"><literal type="number" pos:start="99:59" pos:end="99:59">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="100:13" pos:end="267:13"><if pos:start="100:13" pos:end="267:13">if <condition pos:start="100:16" pos:end="100:51">(<expr pos:start="100:17" pos:end="100:50"><name pos:start="100:17" pos:end="100:46"><name pos:start="100:17" pos:end="100:19">ctx</name><operator pos:start="100:20" pos:end="100:21">-&gt;</operator><name pos:start="100:22" pos:end="100:46">num_sprite_warping_points</name></name> <operator pos:start="100:48" pos:end="100:48">&gt;</operator> <literal type="number" pos:start="100:50" pos:end="100:50">3</literal></expr>)</condition> <block pos:start="100:53" pos:end="267:13">{<block_content pos:start="101:17" pos:end="267:13">
                <expr_stmt pos:start="101:17" pos:end="103:55"><expr pos:start="101:17" pos:end="103:54"><call pos:start="101:17" pos:end="103:54"><name pos:start="101:17" pos:end="101:22">av_log</name><argument_list pos:start="101:23" pos:end="103:54">(<argument pos:start="101:24" pos:end="101:31"><expr pos:start="101:24" pos:end="101:31"><name pos:start="101:24" pos:end="101:31"><name pos:start="101:24" pos:end="101:24">s</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:31">avctx</name></name></expr></argument>, <argument pos:start="101:34" pos:end="101:45"><expr pos:start="101:34" pos:end="101:45"><name pos:start="101:34" pos:end="101:45">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="102:24" pos:end="102:51"><expr pos:start="102:24" pos:end="102:51"><literal type="string" pos:start="102:24" pos:end="102:51">"%d sprite_warping_points\n"</literal></expr></argument>,
                       <argument pos:start="103:24" pos:end="103:53"><expr pos:start="103:24" pos:end="103:53"><name pos:start="103:24" pos:end="103:53"><name pos:start="103:24" pos:end="103:26">ctx</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:53">num_sprite_warping_points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="104:17" pos:end="104:51"><expr pos:start="104:17" pos:end="104:50"><name pos:start="104:17" pos:end="104:46"><name pos:start="104:17" pos:end="104:19">ctx</name><operator pos:start="104:20" pos:end="104:21">-&gt;</operator><name pos:start="104:22" pos:end="104:46">num_sprite_warping_points</name></name> <operator pos:start="104:48" pos:end="104:48">=</operator> <literal type="number" pos:start="104:50" pos:end="104:50">0</literal></expr>;</expr_stmt>
                <return pos:start="105:17" pos:end="105:26">return <expr pos:start="105:24" pos:end="105:25"><operator pos:start="105:24" pos:end="105:24">-</operator><literal type="number" pos:start="105:25" pos:end="105:25">1</literal></expr>;</return>
            <expr_stmt pos:start="106:13" pos:end="106:58"><expr pos:start="106:13" pos:end="106:57"><name pos:start="106:13" pos:end="106:38"><name pos:start="106:13" pos:end="106:13">s</name><operator pos:start="106:14" pos:end="106:15">-&gt;</operator><name pos:start="106:16" pos:end="106:38">sprite_warping_accuracy</name></name>  <operator pos:start="106:41" pos:end="106:41">=</operator> <call pos:start="106:43" pos:end="106:57"><name pos:start="106:43" pos:end="106:50">get_bits</name><argument_list pos:start="106:51" pos:end="106:57">(<argument pos:start="106:52" pos:end="106:53"><expr pos:start="106:52" pos:end="106:53"><name pos:start="106:52" pos:end="106:53">gb</name></expr></argument>, <argument pos:start="106:56" pos:end="106:56"><expr pos:start="106:56" pos:end="106:56"><literal type="number" pos:start="106:56" pos:end="106:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="107:13" pos:end="107:58"><expr pos:start="107:13" pos:end="107:57"><name pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:15">ctx</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:41">sprite_brightness_change</name></name> <operator pos:start="107:43" pos:end="107:43">=</operator> <call pos:start="107:45" pos:end="107:57"><name pos:start="107:45" pos:end="107:53">get_bits1</name><argument_list pos:start="107:54" pos:end="107:57">(<argument pos:start="107:55" pos:end="107:56"><expr pos:start="107:55" pos:end="107:56"><name pos:start="107:55" pos:end="107:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="108:13" pos:end="109:31"><if pos:start="108:13" pos:end="109:31">if <condition pos:start="108:16" pos:end="108:55">(<expr pos:start="108:17" pos:end="108:54"><name pos:start="108:17" pos:end="108:37"><name pos:start="108:17" pos:end="108:19">ctx</name><operator pos:start="108:20" pos:end="108:21">-&gt;</operator><name pos:start="108:22" pos:end="108:37">vol_sprite_usage</name></name> <operator pos:start="108:39" pos:end="108:40">==</operator> <name pos:start="108:42" pos:end="108:54">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:31"><block_content pos:start="109:17" pos:end="109:31">
                <expr_stmt pos:start="109:17" pos:end="109:31"><expr pos:start="109:17" pos:end="109:30"><call pos:start="109:17" pos:end="109:30"><name pos:start="109:17" pos:end="109:26">skip_bits1</name><argument_list pos:start="109:27" pos:end="109:30">(<argument pos:start="109:28" pos:end="109:29"><expr pos:start="109:28" pos:end="109:29"><name pos:start="109:28" pos:end="109:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="109:33" pos:end="109:53">// low_latency_sprite</comment>
        <comment type="line" pos:start="110:9" pos:end="110:64">// FIXME sadct disable bit if verid!=1 &amp;&amp; shape not rect</comment>
        <if_stmt pos:start="111:9" pos:end="267:13"><if pos:start="111:9" pos:end="267:13">if <condition pos:start="111:12" pos:end="111:31">(<expr pos:start="111:13" pos:end="111:30"><call pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:21">get_bits1</name><argument_list pos:start="111:22" pos:end="111:25">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="111:27" pos:end="111:28">==</operator> <literal type="number" pos:start="111:30" pos:end="111:30">1</literal></expr>)</condition> <block pos:start="111:33" pos:end="267:13">{<block_content pos:start="112:13" pos:end="267:13">                   <comment type="block" pos:start="111:53" pos:end="111:67">/* not_8_bit */</comment>
            <expr_stmt pos:start="112:13" pos:end="112:49"><expr pos:start="112:13" pos:end="112:48"><name pos:start="112:13" pos:end="112:30"><name pos:start="112:13" pos:end="112:13">s</name><operator pos:start="112:14" pos:end="112:15">-&gt;</operator><name pos:start="112:16" pos:end="112:30">quant_precision</name></name> <operator pos:start="112:32" pos:end="112:32">=</operator> <call pos:start="112:34" pos:end="112:48"><name pos:start="112:34" pos:end="112:41">get_bits</name><argument_list pos:start="112:42" pos:end="112:48">(<argument pos:start="112:43" pos:end="112:44"><expr pos:start="112:43" pos:end="112:44"><name pos:start="112:43" pos:end="112:44">gb</name></expr></argument>, <argument pos:start="112:47" pos:end="112:47"><expr pos:start="112:47" pos:end="112:47"><literal type="number" pos:start="112:47" pos:end="112:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="112:53" pos:end="112:73">/* quant_precision */</comment>
            <if_stmt pos:start="113:13" pos:end="114:72"><if pos:start="113:13" pos:end="114:72">if <condition pos:start="113:16" pos:end="113:37">(<expr pos:start="113:17" pos:end="113:36"><call pos:start="113:17" pos:end="113:31"><name pos:start="113:17" pos:end="113:24">get_bits</name><argument_list pos:start="113:25" pos:end="113:31">(<argument pos:start="113:26" pos:end="113:27"><expr pos:start="113:26" pos:end="113:27"><name pos:start="113:26" pos:end="113:27">gb</name></expr></argument>, <argument pos:start="113:30" pos:end="113:30"><expr pos:start="113:30" pos:end="113:30"><literal type="number" pos:start="113:30" pos:end="113:30">4</literal></expr></argument>)</argument_list></call> <operator pos:start="113:33" pos:end="113:34">!=</operator> <literal type="number" pos:start="113:36" pos:end="113:36">8</literal></expr>)</condition><block type="pseudo" pos:start="114:17" pos:end="114:72"><block_content pos:start="114:17" pos:end="114:72">               <comment type="block" pos:start="113:53" pos:end="113:72">/* bits_per_pixel */</comment>
                <expr_stmt pos:start="114:17" pos:end="114:72"><expr pos:start="114:17" pos:end="114:71"><call pos:start="114:17" pos:end="114:71"><name pos:start="114:17" pos:end="114:22">av_log</name><argument_list pos:start="114:23" pos:end="114:71">(<argument pos:start="114:24" pos:end="114:31"><expr pos:start="114:24" pos:end="114:31"><name pos:start="114:24" pos:end="114:31"><name pos:start="114:24" pos:end="114:24">s</name><operator pos:start="114:25" pos:end="114:26">-&gt;</operator><name pos:start="114:27" pos:end="114:31">avctx</name></name></expr></argument>, <argument pos:start="114:34" pos:end="114:45"><expr pos:start="114:34" pos:end="114:45"><name pos:start="114:34" pos:end="114:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="114:48" pos:end="114:70"><expr pos:start="114:48" pos:end="114:70"><literal type="string" pos:start="114:48" pos:end="114:70">"N-bit not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="115:13" pos:end="117:67"><if pos:start="115:13" pos:end="117:67">if <condition pos:start="115:16" pos:end="115:40">(<expr pos:start="115:17" pos:end="115:39"><name pos:start="115:17" pos:end="115:34"><name pos:start="115:17" pos:end="115:17">s</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:34">quant_precision</name></name> <operator pos:start="115:36" pos:end="115:37">!=</operator> <literal type="number" pos:start="115:39" pos:end="115:39">5</literal></expr>)</condition><block type="pseudo" pos:start="116:17" pos:end="117:67"><block_content pos:start="116:17" pos:end="117:67">
                <expr_stmt pos:start="116:17" pos:end="117:67"><expr pos:start="116:17" pos:end="117:66"><call pos:start="116:17" pos:end="117:66"><name pos:start="116:17" pos:end="116:22">av_log</name><argument_list pos:start="116:23" pos:end="117:66">(<argument pos:start="116:24" pos:end="116:31"><expr pos:start="116:24" pos:end="116:31"><name pos:start="116:24" pos:end="116:31"><name pos:start="116:24" pos:end="116:24">s</name><operator pos:start="116:25" pos:end="116:26">-&gt;</operator><name pos:start="116:27" pos:end="116:31">avctx</name></name></expr></argument>, <argument pos:start="116:34" pos:end="116:45"><expr pos:start="116:34" pos:end="116:45"><name pos:start="116:34" pos:end="116:45">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="117:24" pos:end="117:45"><expr pos:start="117:24" pos:end="117:45"><literal type="string" pos:start="117:24" pos:end="117:45">"quant precision %d\n"</literal></expr></argument>, <argument pos:start="117:48" pos:end="117:65"><expr pos:start="117:48" pos:end="117:65"><name pos:start="117:48" pos:end="117:65"><name pos:start="117:48" pos:end="117:48">s</name><operator pos:start="117:49" pos:end="117:50">-&gt;</operator><name pos:start="117:51" pos:end="117:65">quant_precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="118:13" pos:end="267:13"><if pos:start="118:13" pos:end="120:9">if <condition pos:start="118:16" pos:end="118:61">(<expr pos:start="118:17" pos:end="118:60"><name pos:start="118:17" pos:end="118:34"><name pos:start="118:17" pos:end="118:17">s</name><operator pos:start="118:18" pos:end="118:19">-&gt;</operator><name pos:start="118:20" pos:end="118:34">quant_precision</name></name><operator pos:start="118:35" pos:end="118:35">&lt;</operator><literal type="number" pos:start="118:36" pos:end="118:36">3</literal> <operator pos:start="118:38" pos:end="118:39">||</operator> <name pos:start="118:41" pos:end="118:58"><name pos:start="118:41" pos:end="118:41">s</name><operator pos:start="118:42" pos:end="118:43">-&gt;</operator><name pos:start="118:44" pos:end="118:58">quant_precision</name></name><operator pos:start="118:59" pos:end="118:59">&gt;</operator><literal type="number" pos:start="118:60" pos:end="118:60">9</literal></expr>)</condition> <block pos:start="118:63" pos:end="120:9">{<block_content pos:start="119:17" pos:end="119:39">
                <expr_stmt pos:start="119:17" pos:end="119:39"><expr pos:start="119:17" pos:end="119:38"><name pos:start="119:17" pos:end="119:34"><name pos:start="119:17" pos:end="119:17">s</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:34">quant_precision</name></name> <operator pos:start="119:36" pos:end="119:36">=</operator> <literal type="number" pos:start="119:38" pos:end="119:38">5</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="120:11" pos:end="267:13">else <block pos:start="120:16" pos:end="267:13">{<block_content pos:start="121:13" pos:end="267:13">
            <expr_stmt pos:start="121:13" pos:end="121:35"><expr pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:30"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:30">quant_precision</name></name> <operator pos:start="121:32" pos:end="121:32">=</operator> <literal type="number" pos:start="121:34" pos:end="121:34">5</literal></expr>;</expr_stmt>
        <comment type="line" pos:start="122:9" pos:end="122:50">// FIXME a bunch of grayscale shape things</comment>
        <if_stmt pos:start="123:9" pos:end="267:13"><if pos:start="123:9" pos:end="267:13">if <condition pos:start="123:12" pos:end="123:44">(<expr pos:start="123:13" pos:end="123:43"><operator pos:start="123:13" pos:end="123:13">(</operator><name pos:start="123:14" pos:end="123:26"><name pos:start="123:14" pos:end="123:14">s</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:26">mpeg_quant</name></name> <operator pos:start="123:28" pos:end="123:28">=</operator> <call pos:start="123:30" pos:end="123:42"><name pos:start="123:30" pos:end="123:38">get_bits1</name><argument_list pos:start="123:39" pos:end="123:42">(<argument pos:start="123:40" pos:end="123:41"><expr pos:start="123:40" pos:end="123:41"><name pos:start="123:40" pos:end="123:41">gb</name></expr></argument>)</argument_list></call><operator pos:start="123:43" pos:end="123:43">)</operator></expr>)</condition> <block pos:start="123:46" pos:end="267:13">{<block_content pos:start="124:13" pos:end="267:13"> <comment type="block" pos:start="123:48" pos:end="123:67">/* vol_quant_type */</comment>
            <decl_stmt pos:start="124:13" pos:end="124:21"><decl pos:start="124:13" pos:end="124:17"><type pos:start="124:13" pos:end="124:15"><name pos:start="124:13" pos:end="124:15">int</name></type> <name pos:start="124:17" pos:end="124:17">i</name></decl>, <decl pos:start="124:20" pos:end="124:20"><type ref="prev" pos:start="124:13" pos:end="124:15"/><name pos:start="124:20" pos:end="124:20">v</name></decl>;</decl_stmt>
            <comment type="block" pos:start="125:13" pos:end="125:39">/* load default matrixes */</comment>
            <for pos:start="126:13" pos:end="267:13">for <control pos:start="126:17" pos:end="126:36">(<init pos:start="126:18" pos:end="126:23"><expr pos:start="126:18" pos:end="126:22"><name pos:start="126:18" pos:end="126:18">i</name> <operator pos:start="126:20" pos:end="126:20">=</operator> <literal type="number" pos:start="126:22" pos:end="126:22">0</literal></expr>;</init> <condition pos:start="126:25" pos:end="126:31"><expr pos:start="126:25" pos:end="126:30"><name pos:start="126:25" pos:end="126:25">i</name> <operator pos:start="126:27" pos:end="126:27">&lt;</operator> <literal type="number" pos:start="126:29" pos:end="126:30">64</literal></expr>;</condition> <incr pos:start="126:33" pos:end="126:35"><expr pos:start="126:33" pos:end="126:35"><name pos:start="126:33" pos:end="126:33">i</name><operator pos:start="126:34" pos:end="126:35">++</operator></expr></incr>)</control> <block pos:start="126:38" pos:end="267:13">{<block_content pos:start="127:17" pos:end="267:13">
                <decl_stmt pos:start="127:17" pos:end="127:51"><decl pos:start="127:17" pos:end="127:50"><type pos:start="127:17" pos:end="127:19"><name pos:start="127:17" pos:end="127:19">int</name></type> <name pos:start="127:21" pos:end="127:21">j</name> <init pos:start="127:23" pos:end="127:50">= <expr pos:start="127:25" pos:end="127:50"><name pos:start="127:25" pos:end="127:50"><name pos:start="127:25" pos:end="127:25">s</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:30">dsp</name><operator pos:start="127:31" pos:end="127:31">.</operator><name pos:start="127:32" pos:end="127:47">idct_permutation</name><index pos:start="127:48" pos:end="127:50">[<expr pos:start="127:49" pos:end="127:49"><name pos:start="127:49" pos:end="127:49">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="128:17" pos:end="128:53"><expr pos:start="128:17" pos:end="128:52"><name pos:start="128:17" pos:end="128:17">v</name> <operator pos:start="128:19" pos:end="128:19">=</operator> <name pos:start="128:21" pos:end="128:52"><name pos:start="128:21" pos:end="128:49">ff_mpeg4_default_intra_matrix</name><index pos:start="128:50" pos:end="128:52">[<expr pos:start="128:51" pos:end="128:51"><name pos:start="128:51" pos:end="128:51">i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="129:17" pos:end="129:46"><expr pos:start="129:17" pos:end="129:45"><name pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:31">intra_matrix</name><index pos:start="129:32" pos:end="129:34">[<expr pos:start="129:33" pos:end="129:33"><name pos:start="129:33" pos:end="129:33">j</name></expr>]</index></name>        <operator pos:start="129:43" pos:end="129:43">=</operator> <name pos:start="129:45" pos:end="129:45">v</name></expr>;</expr_stmt>
                <expr_stmt pos:start="130:17" pos:end="130:46"><expr pos:start="130:17" pos:end="130:45"><name pos:start="130:17" pos:end="130:41"><name pos:start="130:17" pos:end="130:17">s</name><operator pos:start="130:18" pos:end="130:19">-&gt;</operator><name pos:start="130:20" pos:end="130:38">chroma_intra_matrix</name><index pos:start="130:39" pos:end="130:41">[<expr pos:start="130:40" pos:end="130:40"><name pos:start="130:40" pos:end="130:40">j</name></expr>]</index></name> <operator pos:start="130:43" pos:end="130:43">=</operator> <name pos:start="130:45" pos:end="130:45">v</name></expr>;</expr_stmt>
                <expr_stmt pos:start="131:17" pos:end="131:57"><expr pos:start="131:17" pos:end="131:56"><name pos:start="131:17" pos:end="131:17">v</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:56"><name pos:start="131:21" pos:end="131:53">ff_mpeg4_default_non_intra_matrix</name><index pos:start="131:54" pos:end="131:56">[<expr pos:start="131:55" pos:end="131:55"><name pos:start="131:55" pos:end="131:55">i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="132:17" pos:end="132:46"><expr pos:start="132:17" pos:end="132:45"><name pos:start="132:17" pos:end="132:34"><name pos:start="132:17" pos:end="132:17">s</name><operator pos:start="132:18" pos:end="132:19">-&gt;</operator><name pos:start="132:20" pos:end="132:31">inter_matrix</name><index pos:start="132:32" pos:end="132:34">[<expr pos:start="132:33" pos:end="132:33"><name pos:start="132:33" pos:end="132:33">j</name></expr>]</index></name>        <operator pos:start="132:43" pos:end="132:43">=</operator> <name pos:start="132:45" pos:end="132:45">v</name></expr>;</expr_stmt>
                <expr_stmt pos:start="133:17" pos:end="133:46"><expr pos:start="133:17" pos:end="133:45"><name pos:start="133:17" pos:end="133:41"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:38">chroma_inter_matrix</name><index pos:start="133:39" pos:end="133:41">[<expr pos:start="133:40" pos:end="133:40"><name pos:start="133:40" pos:end="133:40">j</name></expr>]</index></name> <operator pos:start="133:43" pos:end="133:43">=</operator> <name pos:start="133:45" pos:end="133:45">v</name></expr>;</expr_stmt>
            <comment type="block" pos:start="134:13" pos:end="134:42">/* load custom intra matrix */</comment>
            <if_stmt pos:start="135:13" pos:end="267:13"><if pos:start="135:13" pos:end="267:13">if <condition pos:start="135:16" pos:end="135:30">(<expr pos:start="135:17" pos:end="135:29"><call pos:start="135:17" pos:end="135:29"><name pos:start="135:17" pos:end="135:25">get_bits1</name><argument_list pos:start="135:26" pos:end="135:29">(<argument pos:start="135:27" pos:end="135:28"><expr pos:start="135:27" pos:end="135:28"><name pos:start="135:27" pos:end="135:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:32" pos:end="267:13">{<block_content pos:start="136:17" pos:end="267:13">
                <decl_stmt pos:start="136:17" pos:end="136:29"><decl pos:start="136:17" pos:end="136:28"><type pos:start="136:17" pos:end="136:19"><name pos:start="136:17" pos:end="136:19">int</name></type> <name pos:start="136:21" pos:end="136:24">last</name> <init pos:start="136:26" pos:end="136:28">= <expr pos:start="136:28" pos:end="136:28"><literal type="number" pos:start="136:28" pos:end="136:28">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="137:17" pos:end="267:13">for <control pos:start="137:21" pos:end="137:40">(<init pos:start="137:22" pos:end="137:27"><expr pos:start="137:22" pos:end="137:26"><name pos:start="137:22" pos:end="137:22">i</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <literal type="number" pos:start="137:26" pos:end="137:26">0</literal></expr>;</init> <condition pos:start="137:29" pos:end="137:35"><expr pos:start="137:29" pos:end="137:34"><name pos:start="137:29" pos:end="137:29">i</name> <operator pos:start="137:31" pos:end="137:31">&lt;</operator> <literal type="number" pos:start="137:33" pos:end="137:34">64</literal></expr>;</condition> <incr pos:start="137:37" pos:end="137:39"><expr pos:start="137:37" pos:end="137:39"><name pos:start="137:37" pos:end="137:37">i</name><operator pos:start="137:38" pos:end="137:39">++</operator></expr></incr>)</control> <block pos:start="137:42" pos:end="267:13">{<block_content pos:start="138:21" pos:end="267:13">
                    <decl_stmt pos:start="138:21" pos:end="138:26"><decl pos:start="138:21" pos:end="138:25"><type pos:start="138:21" pos:end="138:23"><name pos:start="138:21" pos:end="138:23">int</name></type> <name pos:start="138:25" pos:end="138:25">j</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="139:21" pos:end="139:40"><expr pos:start="139:21" pos:end="139:39"><name pos:start="139:21" pos:end="139:21">v</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <call pos:start="139:25" pos:end="139:39"><name pos:start="139:25" pos:end="139:32">get_bits</name><argument_list pos:start="139:33" pos:end="139:39">(<argument pos:start="139:34" pos:end="139:35"><expr pos:start="139:34" pos:end="139:35"><name pos:start="139:34" pos:end="139:35">gb</name></expr></argument>, <argument pos:start="139:38" pos:end="139:38"><expr pos:start="139:38" pos:end="139:38"><literal type="number" pos:start="139:38" pos:end="139:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="140:21" pos:end="141:30"><if pos:start="140:21" pos:end="141:30">if <condition pos:start="140:24" pos:end="140:31">(<expr pos:start="140:25" pos:end="140:30"><name pos:start="140:25" pos:end="140:25">v</name> <operator pos:start="140:27" pos:end="140:28">==</operator> <literal type="number" pos:start="140:30" pos:end="140:30">0</literal></expr>)</condition><block type="pseudo" pos:start="141:25" pos:end="141:30"><block_content pos:start="141:25" pos:end="141:30">
                        <break pos:start="141:25" pos:end="141:30">break;</break></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="142:21" pos:end="142:29"><expr pos:start="142:21" pos:end="142:28"><name pos:start="142:21" pos:end="142:24">last</name> <operator pos:start="142:26" pos:end="142:26">=</operator> <name pos:start="142:28" pos:end="142:28">v</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="143:21" pos:end="143:69"><expr pos:start="143:21" pos:end="143:68"><name pos:start="143:21" pos:end="143:21">j</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <name pos:start="143:25" pos:end="143:68"><name pos:start="143:25" pos:end="143:25">s</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:30">dsp</name><operator pos:start="143:31" pos:end="143:31">.</operator><name pos:start="143:32" pos:end="143:47">idct_permutation</name><index pos:start="143:48" pos:end="143:68">[<expr pos:start="143:49" pos:end="143:67"><name pos:start="143:49" pos:end="143:67"><name pos:start="143:49" pos:end="143:64">ff_zigzag_direct</name><index pos:start="143:65" pos:end="143:67">[<expr pos:start="143:66" pos:end="143:66"><name pos:start="143:66" pos:end="143:66">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="144:21" pos:end="144:53"><expr pos:start="144:21" pos:end="144:52"><name pos:start="144:21" pos:end="144:38"><name pos:start="144:21" pos:end="144:21">s</name><operator pos:start="144:22" pos:end="144:23">-&gt;</operator><name pos:start="144:24" pos:end="144:35">intra_matrix</name><index pos:start="144:36" pos:end="144:38">[<expr pos:start="144:37" pos:end="144:37"><name pos:start="144:37" pos:end="144:37">j</name></expr>]</index></name>        <operator pos:start="144:47" pos:end="144:47">=</operator> <name pos:start="144:49" pos:end="144:52">last</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="145:21" pos:end="145:53"><expr pos:start="145:21" pos:end="145:52"><name pos:start="145:21" pos:end="145:45"><name pos:start="145:21" pos:end="145:21">s</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:42">chroma_intra_matrix</name><index pos:start="145:43" pos:end="145:45">[<expr pos:start="145:44" pos:end="145:44"><name pos:start="145:44" pos:end="145:44">j</name></expr>]</index></name> <operator pos:start="145:47" pos:end="145:47">=</operator> <name pos:start="145:49" pos:end="145:52">last</name></expr>;</expr_stmt>
                <comment type="block" pos:start="146:17" pos:end="146:42">/* replicate last value */</comment>
                <for pos:start="147:17" pos:end="267:13">for <control pos:start="147:21" pos:end="147:35">(<init pos:start="147:22" pos:end="147:22">;</init> <condition pos:start="147:24" pos:end="147:30"><expr pos:start="147:24" pos:end="147:29"><name pos:start="147:24" pos:end="147:24">i</name> <operator pos:start="147:26" pos:end="147:26">&lt;</operator> <literal type="number" pos:start="147:28" pos:end="147:29">64</literal></expr>;</condition> <incr pos:start="147:32" pos:end="147:34"><expr pos:start="147:32" pos:end="147:34"><name pos:start="147:32" pos:end="147:32">i</name><operator pos:start="147:33" pos:end="147:34">++</operator></expr></incr>)</control> <block pos:start="147:37" pos:end="267:13">{<block_content pos:start="148:21" pos:end="267:13">
                    <decl_stmt pos:start="148:21" pos:end="148:73"><decl pos:start="148:21" pos:end="148:72"><type pos:start="148:21" pos:end="148:23"><name pos:start="148:21" pos:end="148:23">int</name></type> <name pos:start="148:25" pos:end="148:25">j</name> <init pos:start="148:27" pos:end="148:72">= <expr pos:start="148:29" pos:end="148:72"><name pos:start="148:29" pos:end="148:72"><name pos:start="148:29" pos:end="148:29">s</name><operator pos:start="148:30" pos:end="148:31">-&gt;</operator><name pos:start="148:32" pos:end="148:34">dsp</name><operator pos:start="148:35" pos:end="148:35">.</operator><name pos:start="148:36" pos:end="148:51">idct_permutation</name><index pos:start="148:52" pos:end="148:72">[<expr pos:start="148:53" pos:end="148:71"><name pos:start="148:53" pos:end="148:71"><name pos:start="148:53" pos:end="148:68">ff_zigzag_direct</name><index pos:start="148:69" pos:end="148:71">[<expr pos:start="148:70" pos:end="148:70"><name pos:start="148:70" pos:end="148:70">i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="149:21" pos:end="149:53"><expr pos:start="149:21" pos:end="149:52"><name pos:start="149:21" pos:end="149:38"><name pos:start="149:21" pos:end="149:21">s</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:35">intra_matrix</name><index pos:start="149:36" pos:end="149:38">[<expr pos:start="149:37" pos:end="149:37"><name pos:start="149:37" pos:end="149:37">j</name></expr>]</index></name>        <operator pos:start="149:47" pos:end="149:47">=</operator> <name pos:start="149:49" pos:end="149:52">last</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="150:21" pos:end="150:53"><expr pos:start="150:21" pos:end="150:52"><name pos:start="150:21" pos:end="150:45"><name pos:start="150:21" pos:end="150:21">s</name><operator pos:start="150:22" pos:end="150:23">-&gt;</operator><name pos:start="150:24" pos:end="150:42">chroma_intra_matrix</name><index pos:start="150:43" pos:end="150:45">[<expr pos:start="150:44" pos:end="150:44"><name pos:start="150:44" pos:end="150:44">j</name></expr>]</index></name> <operator pos:start="150:47" pos:end="150:47">=</operator> <name pos:start="150:49" pos:end="150:52">last</name></expr>;</expr_stmt>
            <comment type="block" pos:start="151:13" pos:end="151:46">/* load custom non intra matrix */</comment>
            <if_stmt pos:start="152:13" pos:end="267:13"><if pos:start="152:13" pos:end="267:13">if <condition pos:start="152:16" pos:end="152:30">(<expr pos:start="152:17" pos:end="152:29"><call pos:start="152:17" pos:end="152:29"><name pos:start="152:17" pos:end="152:25">get_bits1</name><argument_list pos:start="152:26" pos:end="152:29">(<argument pos:start="152:27" pos:end="152:28"><expr pos:start="152:27" pos:end="152:28"><name pos:start="152:27" pos:end="152:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="152:32" pos:end="267:13">{<block_content pos:start="153:17" pos:end="267:13">
                <decl_stmt pos:start="153:17" pos:end="153:29"><decl pos:start="153:17" pos:end="153:28"><type pos:start="153:17" pos:end="153:19"><name pos:start="153:17" pos:end="153:19">int</name></type> <name pos:start="153:21" pos:end="153:24">last</name> <init pos:start="153:26" pos:end="153:28">= <expr pos:start="153:28" pos:end="153:28"><literal type="number" pos:start="153:28" pos:end="153:28">0</literal></expr></init></decl>;</decl_stmt>
                <for pos:start="154:17" pos:end="267:13">for <control pos:start="154:21" pos:end="154:40">(<init pos:start="154:22" pos:end="154:27"><expr pos:start="154:22" pos:end="154:26"><name pos:start="154:22" pos:end="154:22">i</name> <operator pos:start="154:24" pos:end="154:24">=</operator> <literal type="number" pos:start="154:26" pos:end="154:26">0</literal></expr>;</init> <condition pos:start="154:29" pos:end="154:35"><expr pos:start="154:29" pos:end="154:34"><name pos:start="154:29" pos:end="154:29">i</name> <operator pos:start="154:31" pos:end="154:31">&lt;</operator> <literal type="number" pos:start="154:33" pos:end="154:34">64</literal></expr>;</condition> <incr pos:start="154:37" pos:end="154:39"><expr pos:start="154:37" pos:end="154:39"><name pos:start="154:37" pos:end="154:37">i</name><operator pos:start="154:38" pos:end="154:39">++</operator></expr></incr>)</control> <block pos:start="154:42" pos:end="267:13">{<block_content pos:start="155:21" pos:end="267:13">
                    <decl_stmt pos:start="155:21" pos:end="155:26"><decl pos:start="155:21" pos:end="155:25"><type pos:start="155:21" pos:end="155:23"><name pos:start="155:21" pos:end="155:23">int</name></type> <name pos:start="155:25" pos:end="155:25">j</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="156:21" pos:end="156:40"><expr pos:start="156:21" pos:end="156:39"><name pos:start="156:21" pos:end="156:21">v</name> <operator pos:start="156:23" pos:end="156:23">=</operator> <call pos:start="156:25" pos:end="156:39"><name pos:start="156:25" pos:end="156:32">get_bits</name><argument_list pos:start="156:33" pos:end="156:39">(<argument pos:start="156:34" pos:end="156:35"><expr pos:start="156:34" pos:end="156:35"><name pos:start="156:34" pos:end="156:35">gb</name></expr></argument>, <argument pos:start="156:38" pos:end="156:38"><expr pos:start="156:38" pos:end="156:38"><literal type="number" pos:start="156:38" pos:end="156:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="157:21" pos:end="158:30"><if pos:start="157:21" pos:end="158:30">if <condition pos:start="157:24" pos:end="157:31">(<expr pos:start="157:25" pos:end="157:30"><name pos:start="157:25" pos:end="157:25">v</name> <operator pos:start="157:27" pos:end="157:28">==</operator> <literal type="number" pos:start="157:30" pos:end="157:30">0</literal></expr>)</condition><block type="pseudo" pos:start="158:25" pos:end="158:30"><block_content pos:start="158:25" pos:end="158:30">
                        <break pos:start="158:25" pos:end="158:30">break;</break></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="159:21" pos:end="159:29"><expr pos:start="159:21" pos:end="159:28"><name pos:start="159:21" pos:end="159:24">last</name> <operator pos:start="159:26" pos:end="159:26">=</operator> <name pos:start="159:28" pos:end="159:28">v</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="160:21" pos:end="160:69"><expr pos:start="160:21" pos:end="160:68"><name pos:start="160:21" pos:end="160:21">j</name> <operator pos:start="160:23" pos:end="160:23">=</operator> <name pos:start="160:25" pos:end="160:68"><name pos:start="160:25" pos:end="160:25">s</name><operator pos:start="160:26" pos:end="160:27">-&gt;</operator><name pos:start="160:28" pos:end="160:30">dsp</name><operator pos:start="160:31" pos:end="160:31">.</operator><name pos:start="160:32" pos:end="160:47">idct_permutation</name><index pos:start="160:48" pos:end="160:68">[<expr pos:start="160:49" pos:end="160:67"><name pos:start="160:49" pos:end="160:67"><name pos:start="160:49" pos:end="160:64">ff_zigzag_direct</name><index pos:start="160:65" pos:end="160:67">[<expr pos:start="160:66" pos:end="160:66"><name pos:start="160:66" pos:end="160:66">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="161:21" pos:end="161:50"><expr pos:start="161:21" pos:end="161:49"><name pos:start="161:21" pos:end="161:38"><name pos:start="161:21" pos:end="161:21">s</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:35">inter_matrix</name><index pos:start="161:36" pos:end="161:38">[<expr pos:start="161:37" pos:end="161:37"><name pos:start="161:37" pos:end="161:37">j</name></expr>]</index></name>        <operator pos:start="161:47" pos:end="161:47">=</operator> <name pos:start="161:49" pos:end="161:49">v</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="162:21" pos:end="162:50"><expr pos:start="162:21" pos:end="162:49"><name pos:start="162:21" pos:end="162:45"><name pos:start="162:21" pos:end="162:21">s</name><operator pos:start="162:22" pos:end="162:23">-&gt;</operator><name pos:start="162:24" pos:end="162:42">chroma_inter_matrix</name><index pos:start="162:43" pos:end="162:45">[<expr pos:start="162:44" pos:end="162:44"><name pos:start="162:44" pos:end="162:44">j</name></expr>]</index></name> <operator pos:start="162:47" pos:end="162:47">=</operator> <name pos:start="162:49" pos:end="162:49">v</name></expr>;</expr_stmt>
                <comment type="block" pos:start="163:17" pos:end="163:42">/* replicate last value */</comment>
                <for pos:start="164:17" pos:end="267:13">for <control pos:start="164:21" pos:end="164:35">(<init pos:start="164:22" pos:end="164:22">;</init> <condition pos:start="164:24" pos:end="164:30"><expr pos:start="164:24" pos:end="164:29"><name pos:start="164:24" pos:end="164:24">i</name> <operator pos:start="164:26" pos:end="164:26">&lt;</operator> <literal type="number" pos:start="164:28" pos:end="164:29">64</literal></expr>;</condition> <incr pos:start="164:32" pos:end="164:34"><expr pos:start="164:32" pos:end="164:34"><name pos:start="164:32" pos:end="164:32">i</name><operator pos:start="164:33" pos:end="164:34">++</operator></expr></incr>)</control> <block pos:start="164:37" pos:end="267:13">{<block_content pos:start="165:21" pos:end="267:13">
                    <decl_stmt pos:start="165:21" pos:end="165:73"><decl pos:start="165:21" pos:end="165:72"><type pos:start="165:21" pos:end="165:23"><name pos:start="165:21" pos:end="165:23">int</name></type> <name pos:start="165:25" pos:end="165:25">j</name> <init pos:start="165:27" pos:end="165:72">= <expr pos:start="165:29" pos:end="165:72"><name pos:start="165:29" pos:end="165:72"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:34">dsp</name><operator pos:start="165:35" pos:end="165:35">.</operator><name pos:start="165:36" pos:end="165:51">idct_permutation</name><index pos:start="165:52" pos:end="165:72">[<expr pos:start="165:53" pos:end="165:71"><name pos:start="165:53" pos:end="165:71"><name pos:start="165:53" pos:end="165:68">ff_zigzag_direct</name><index pos:start="165:69" pos:end="165:71">[<expr pos:start="165:70" pos:end="165:70"><name pos:start="165:70" pos:end="165:70">i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="166:21" pos:end="166:53"><expr pos:start="166:21" pos:end="166:52"><name pos:start="166:21" pos:end="166:38"><name pos:start="166:21" pos:end="166:21">s</name><operator pos:start="166:22" pos:end="166:23">-&gt;</operator><name pos:start="166:24" pos:end="166:35">inter_matrix</name><index pos:start="166:36" pos:end="166:38">[<expr pos:start="166:37" pos:end="166:37"><name pos:start="166:37" pos:end="166:37">j</name></expr>]</index></name>        <operator pos:start="166:47" pos:end="166:47">=</operator> <name pos:start="166:49" pos:end="166:52">last</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="167:21" pos:end="167:53"><expr pos:start="167:21" pos:end="167:52"><name pos:start="167:21" pos:end="167:45"><name pos:start="167:21" pos:end="167:21">s</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:42">chroma_inter_matrix</name><index pos:start="167:43" pos:end="167:45">[<expr pos:start="167:44" pos:end="167:44"><name pos:start="167:44" pos:end="167:44">j</name></expr>]</index></name> <operator pos:start="167:47" pos:end="167:47">=</operator> <name pos:start="167:49" pos:end="167:52">last</name></expr>;</expr_stmt>
            <comment type="line" pos:start="168:13" pos:end="168:54">// FIXME a bunch of grayscale shape things</comment>
        <if_stmt pos:start="169:9" pos:end="172:34"><if pos:start="169:9" pos:end="170:46">if <condition pos:start="169:12" pos:end="169:27">(<expr pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:21">vo_ver_id</name> <operator pos:start="169:23" pos:end="169:24">!=</operator> <literal type="number" pos:start="169:26" pos:end="169:26">1</literal></expr>)</condition><block type="pseudo" pos:start="170:13" pos:end="170:46"><block_content pos:start="170:13" pos:end="170:46">
            <expr_stmt pos:start="170:13" pos:end="170:46"><expr pos:start="170:13" pos:end="170:45"><name pos:start="170:13" pos:end="170:29"><name pos:start="170:13" pos:end="170:13">s</name><operator pos:start="170:14" pos:end="170:15">-&gt;</operator><name pos:start="170:16" pos:end="170:29">quarter_sample</name></name> <operator pos:start="170:31" pos:end="170:31">=</operator> <call pos:start="170:33" pos:end="170:45"><name pos:start="170:33" pos:end="170:41">get_bits1</name><argument_list pos:start="170:42" pos:end="170:45">(<argument pos:start="170:43" pos:end="170:44"><expr pos:start="170:43" pos:end="170:44"><name pos:start="170:43" pos:end="170:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="171:9" pos:end="172:34">else<block type="pseudo" pos:start="172:13" pos:end="172:34"><block_content pos:start="172:13" pos:end="172:34">
            <expr_stmt pos:start="172:13" pos:end="172:34"><expr pos:start="172:13" pos:end="172:33"><name pos:start="172:13" pos:end="172:29"><name pos:start="172:13" pos:end="172:13">s</name><operator pos:start="172:14" pos:end="172:15">-&gt;</operator><name pos:start="172:16" pos:end="172:29">quarter_sample</name></name> <operator pos:start="172:31" pos:end="172:31">=</operator> <literal type="number" pos:start="172:33" pos:end="172:33">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt pos:start="173:9" pos:end="267:13"><if pos:start="173:9" pos:end="267:13">if <condition pos:start="173:12" pos:end="173:27">(<expr pos:start="173:13" pos:end="173:26"><operator pos:start="173:13" pos:end="173:13">!</operator><call pos:start="173:14" pos:end="173:26"><name pos:start="173:14" pos:end="173:22">get_bits1</name><argument_list pos:start="173:23" pos:end="173:26">(<argument pos:start="173:24" pos:end="173:25"><expr pos:start="173:24" pos:end="173:25"><name pos:start="173:24" pos:end="173:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:29" pos:end="267:13">{<block_content pos:start="174:13" pos:end="267:13">
            <decl_stmt pos:start="174:13" pos:end="174:55"><decl pos:start="174:13" pos:end="174:54"><type pos:start="174:13" pos:end="174:15"><name pos:start="174:13" pos:end="174:15">int</name></type> <name pos:start="174:17" pos:end="174:19">pos</name>               <init pos:start="174:35" pos:end="174:54">= <expr pos:start="174:37" pos:end="174:54"><call pos:start="174:37" pos:end="174:54"><name pos:start="174:37" pos:end="174:50">get_bits_count</name><argument_list pos:start="174:51" pos:end="174:54">(<argument pos:start="174:52" pos:end="174:53"><expr pos:start="174:52" pos:end="174:53"><name pos:start="174:52" pos:end="174:53">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="175:13" pos:end="175:52"><decl pos:start="175:13" pos:end="175:51"><type pos:start="175:13" pos:end="175:15"><name pos:start="175:13" pos:end="175:15">int</name></type> <name pos:start="175:17" pos:end="175:33">estimation_method</name> <init pos:start="175:35" pos:end="175:51">= <expr pos:start="175:37" pos:end="175:51"><call pos:start="175:37" pos:end="175:51"><name pos:start="175:37" pos:end="175:44">get_bits</name><argument_list pos:start="175:45" pos:end="175:51">(<argument pos:start="175:46" pos:end="175:47"><expr pos:start="175:46" pos:end="175:47"><name pos:start="175:46" pos:end="175:47">gb</name></expr></argument>, <argument pos:start="175:50" pos:end="175:50"><expr pos:start="175:50" pos:end="175:50"><literal type="number" pos:start="175:50" pos:end="175:50">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="176:13" pos:end="267:13"><if pos:start="176:13" pos:end="267:13">if <condition pos:start="176:16" pos:end="176:38">(<expr pos:start="176:17" pos:end="176:37"><name pos:start="176:17" pos:end="176:33">estimation_method</name> <operator pos:start="176:35" pos:end="176:35">&lt;</operator> <literal type="number" pos:start="176:37" pos:end="176:37">2</literal></expr>)</condition> <block pos:start="176:40" pos:end="267:13">{<block_content pos:start="177:17" pos:end="267:13">
                <if_stmt pos:start="177:17" pos:end="267:13"><if pos:start="177:17" pos:end="267:13">if <condition pos:start="177:20" pos:end="177:35">(<expr pos:start="177:21" pos:end="177:34"><operator pos:start="177:21" pos:end="177:21">!</operator><call pos:start="177:22" pos:end="177:34"><name pos:start="177:22" pos:end="177:30">get_bits1</name><argument_list pos:start="177:31" pos:end="177:34">(<argument pos:start="177:32" pos:end="177:33"><expr pos:start="177:32" pos:end="177:33"><name pos:start="177:32" pos:end="177:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:37" pos:end="267:13">{<block_content pos:start="178:21" pos:end="267:13">
                    <expr_stmt pos:start="178:21" pos:end="178:70"><expr pos:start="178:21" pos:end="178:69"><name pos:start="178:21" pos:end="178:48"><name pos:start="178:21" pos:end="178:23">ctx</name><operator pos:start="178:24" pos:end="178:25">-&gt;</operator><name pos:start="178:26" pos:end="178:48">cplx_estimation_trash_i</name></name> <operator pos:start="178:50" pos:end="178:51">+=</operator> <literal type="number" pos:start="178:53" pos:end="178:53">8</literal> <operator pos:start="178:55" pos:end="178:55">*</operator> <call pos:start="178:57" pos:end="178:69"><name pos:start="178:57" pos:end="178:65">get_bits1</name><argument_list pos:start="178:66" pos:end="178:69">(<argument pos:start="178:67" pos:end="178:68"><expr pos:start="178:67" pos:end="178:68"><name pos:start="178:67" pos:end="178:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="178:73" pos:end="178:84">/* opaque */</comment>
                    <expr_stmt pos:start="179:21" pos:end="179:70"><expr pos:start="179:21" pos:end="179:69"><name pos:start="179:21" pos:end="179:48"><name pos:start="179:21" pos:end="179:23">ctx</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:48">cplx_estimation_trash_i</name></name> <operator pos:start="179:50" pos:end="179:51">+=</operator> <literal type="number" pos:start="179:53" pos:end="179:53">8</literal> <operator pos:start="179:55" pos:end="179:55">*</operator> <call pos:start="179:57" pos:end="179:69"><name pos:start="179:57" pos:end="179:65">get_bits1</name><argument_list pos:start="179:66" pos:end="179:69">(<argument pos:start="179:67" pos:end="179:68"><expr pos:start="179:67" pos:end="179:68"><name pos:start="179:67" pos:end="179:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="179:73" pos:end="179:89">/* transparent */</comment>
                    <expr_stmt pos:start="180:21" pos:end="180:70"><expr pos:start="180:21" pos:end="180:69"><name pos:start="180:21" pos:end="180:48"><name pos:start="180:21" pos:end="180:23">ctx</name><operator pos:start="180:24" pos:end="180:25">-&gt;</operator><name pos:start="180:26" pos:end="180:48">cplx_estimation_trash_i</name></name> <operator pos:start="180:50" pos:end="180:51">+=</operator> <literal type="number" pos:start="180:53" pos:end="180:53">8</literal> <operator pos:start="180:55" pos:end="180:55">*</operator> <call pos:start="180:57" pos:end="180:69"><name pos:start="180:57" pos:end="180:65">get_bits1</name><argument_list pos:start="180:66" pos:end="180:69">(<argument pos:start="180:67" pos:end="180:68"><expr pos:start="180:67" pos:end="180:68"><name pos:start="180:67" pos:end="180:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="180:73" pos:end="180:87">/* intra_cae */</comment>
                    <expr_stmt pos:start="181:21" pos:end="181:70"><expr pos:start="181:21" pos:end="181:69"><name pos:start="181:21" pos:end="181:48"><name pos:start="181:21" pos:end="181:23">ctx</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:48">cplx_estimation_trash_i</name></name> <operator pos:start="181:50" pos:end="181:51">+=</operator> <literal type="number" pos:start="181:53" pos:end="181:53">8</literal> <operator pos:start="181:55" pos:end="181:55">*</operator> <call pos:start="181:57" pos:end="181:69"><name pos:start="181:57" pos:end="181:65">get_bits1</name><argument_list pos:start="181:66" pos:end="181:69">(<argument pos:start="181:67" pos:end="181:68"><expr pos:start="181:67" pos:end="181:68"><name pos:start="181:67" pos:end="181:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="181:73" pos:end="181:87">/* inter_cae */</comment>
                    <expr_stmt pos:start="182:21" pos:end="182:70"><expr pos:start="182:21" pos:end="182:69"><name pos:start="182:21" pos:end="182:48"><name pos:start="182:21" pos:end="182:23">ctx</name><operator pos:start="182:24" pos:end="182:25">-&gt;</operator><name pos:start="182:26" pos:end="182:48">cplx_estimation_trash_i</name></name> <operator pos:start="182:50" pos:end="182:51">+=</operator> <literal type="number" pos:start="182:53" pos:end="182:53">8</literal> <operator pos:start="182:55" pos:end="182:55">*</operator> <call pos:start="182:57" pos:end="182:69"><name pos:start="182:57" pos:end="182:65">get_bits1</name><argument_list pos:start="182:66" pos:end="182:69">(<argument pos:start="182:67" pos:end="182:68"><expr pos:start="182:67" pos:end="182:68"><name pos:start="182:67" pos:end="182:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="182:73" pos:end="182:87">/* no_update */</comment>
                    <expr_stmt pos:start="183:21" pos:end="183:70"><expr pos:start="183:21" pos:end="183:69"><name pos:start="183:21" pos:end="183:48"><name pos:start="183:21" pos:end="183:23">ctx</name><operator pos:start="183:24" pos:end="183:25">-&gt;</operator><name pos:start="183:26" pos:end="183:48">cplx_estimation_trash_i</name></name> <operator pos:start="183:50" pos:end="183:51">+=</operator> <literal type="number" pos:start="183:53" pos:end="183:53">8</literal> <operator pos:start="183:55" pos:end="183:55">*</operator> <call pos:start="183:57" pos:end="183:69"><name pos:start="183:57" pos:end="183:65">get_bits1</name><argument_list pos:start="183:66" pos:end="183:69">(<argument pos:start="183:67" pos:end="183:68"><expr pos:start="183:67" pos:end="183:68"><name pos:start="183:67" pos:end="183:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="183:73" pos:end="183:87">/* upampling */</comment>
                <if_stmt pos:start="184:17" pos:end="267:13"><if pos:start="184:17" pos:end="267:13">if <condition pos:start="184:20" pos:end="184:35">(<expr pos:start="184:21" pos:end="184:34"><operator pos:start="184:21" pos:end="184:21">!</operator><call pos:start="184:22" pos:end="184:34"><name pos:start="184:22" pos:end="184:30">get_bits1</name><argument_list pos:start="184:31" pos:end="184:34">(<argument pos:start="184:32" pos:end="184:33"><expr pos:start="184:32" pos:end="184:33"><name pos:start="184:32" pos:end="184:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="184:37" pos:end="267:13">{<block_content pos:start="185:21" pos:end="267:13">
                    <expr_stmt pos:start="185:21" pos:end="185:70"><expr pos:start="185:21" pos:end="185:69"><name pos:start="185:21" pos:end="185:48"><name pos:start="185:21" pos:end="185:23">ctx</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:48">cplx_estimation_trash_i</name></name> <operator pos:start="185:50" pos:end="185:51">+=</operator> <literal type="number" pos:start="185:53" pos:end="185:53">8</literal> <operator pos:start="185:55" pos:end="185:55">*</operator> <call pos:start="185:57" pos:end="185:69"><name pos:start="185:57" pos:end="185:65">get_bits1</name><argument_list pos:start="185:66" pos:end="185:69">(<argument pos:start="185:67" pos:end="185:68"><expr pos:start="185:67" pos:end="185:68"><name pos:start="185:67" pos:end="185:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="185:73" pos:end="185:90">/* intra_blocks */</comment>
                    <expr_stmt pos:start="186:21" pos:end="186:70"><expr pos:start="186:21" pos:end="186:69"><name pos:start="186:21" pos:end="186:48"><name pos:start="186:21" pos:end="186:23">ctx</name><operator pos:start="186:24" pos:end="186:25">-&gt;</operator><name pos:start="186:26" pos:end="186:48">cplx_estimation_trash_p</name></name> <operator pos:start="186:50" pos:end="186:51">+=</operator> <literal type="number" pos:start="186:53" pos:end="186:53">8</literal> <operator pos:start="186:55" pos:end="186:55">*</operator> <call pos:start="186:57" pos:end="186:69"><name pos:start="186:57" pos:end="186:65">get_bits1</name><argument_list pos:start="186:66" pos:end="186:69">(<argument pos:start="186:67" pos:end="186:68"><expr pos:start="186:67" pos:end="186:68"><name pos:start="186:67" pos:end="186:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="186:73" pos:end="186:90">/* inter_blocks */</comment>
                    <expr_stmt pos:start="187:21" pos:end="187:70"><expr pos:start="187:21" pos:end="187:69"><name pos:start="187:21" pos:end="187:48"><name pos:start="187:21" pos:end="187:23">ctx</name><operator pos:start="187:24" pos:end="187:25">-&gt;</operator><name pos:start="187:26" pos:end="187:48">cplx_estimation_trash_p</name></name> <operator pos:start="187:50" pos:end="187:51">+=</operator> <literal type="number" pos:start="187:53" pos:end="187:53">8</literal> <operator pos:start="187:55" pos:end="187:55">*</operator> <call pos:start="187:57" pos:end="187:69"><name pos:start="187:57" pos:end="187:65">get_bits1</name><argument_list pos:start="187:66" pos:end="187:69">(<argument pos:start="187:67" pos:end="187:68"><expr pos:start="187:67" pos:end="187:68"><name pos:start="187:67" pos:end="187:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="187:73" pos:end="187:92">/* inter4v_blocks */</comment>
                    <expr_stmt pos:start="188:21" pos:end="188:70"><expr pos:start="188:21" pos:end="188:69"><name pos:start="188:21" pos:end="188:48"><name pos:start="188:21" pos:end="188:23">ctx</name><operator pos:start="188:24" pos:end="188:25">-&gt;</operator><name pos:start="188:26" pos:end="188:48">cplx_estimation_trash_i</name></name> <operator pos:start="188:50" pos:end="188:51">+=</operator> <literal type="number" pos:start="188:53" pos:end="188:53">8</literal> <operator pos:start="188:55" pos:end="188:55">*</operator> <call pos:start="188:57" pos:end="188:69"><name pos:start="188:57" pos:end="188:65">get_bits1</name><argument_list pos:start="188:66" pos:end="188:69">(<argument pos:start="188:67" pos:end="188:68"><expr pos:start="188:67" pos:end="188:68"><name pos:start="188:67" pos:end="188:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="188:73" pos:end="188:94">/* not coded blocks */</comment>
                <if_stmt pos:start="189:17" pos:end="267:13"><if pos:start="189:17" pos:end="267:13">if <condition pos:start="189:20" pos:end="189:73">(<expr pos:start="189:21" pos:end="189:72"><operator pos:start="189:21" pos:end="189:21">!</operator><call pos:start="189:22" pos:end="189:72"><name pos:start="189:22" pos:end="189:33">check_marker</name><argument_list pos:start="189:34" pos:end="189:72">(<argument pos:start="189:35" pos:end="189:36"><expr pos:start="189:35" pos:end="189:36"><name pos:start="189:35" pos:end="189:36">gb</name></expr></argument>, <argument pos:start="189:39" pos:end="189:71"><expr pos:start="189:39" pos:end="189:71"><literal type="string" pos:start="189:39" pos:end="189:71">"in complexity estimation part 1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:75" pos:end="267:13">{<block_content pos:start="190:21" pos:end="267:13">
                    <expr_stmt pos:start="190:21" pos:end="190:65"><expr pos:start="190:21" pos:end="190:64"><call pos:start="190:21" pos:end="190:64"><name pos:start="190:21" pos:end="190:34">skip_bits_long</name><argument_list pos:start="190:35" pos:end="190:64">(<argument pos:start="190:36" pos:end="190:37"><expr pos:start="190:36" pos:end="190:37"><name pos:start="190:36" pos:end="190:37">gb</name></expr></argument>, <argument pos:start="190:40" pos:end="190:63"><expr pos:start="190:40" pos:end="190:63"><name pos:start="190:40" pos:end="190:42">pos</name> <operator pos:start="190:44" pos:end="190:44">-</operator> <call pos:start="190:46" pos:end="190:63"><name pos:start="190:46" pos:end="190:59">get_bits_count</name><argument_list pos:start="190:60" pos:end="190:63">(<argument pos:start="190:61" pos:end="190:62"><expr pos:start="190:61" pos:end="190:62"><name pos:start="190:61" pos:end="190:62">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="191:21" pos:end="191:37">goto <name pos:start="191:26" pos:end="191:36">no_cplx_est</name>;</goto>
                <if_stmt pos:start="192:17" pos:end="267:13"><if pos:start="192:17" pos:end="267:13">if <condition pos:start="192:20" pos:end="192:35">(<expr pos:start="192:21" pos:end="192:34"><operator pos:start="192:21" pos:end="192:21">!</operator><call pos:start="192:22" pos:end="192:34"><name pos:start="192:22" pos:end="192:30">get_bits1</name><argument_list pos:start="192:31" pos:end="192:34">(<argument pos:start="192:32" pos:end="192:33"><expr pos:start="192:32" pos:end="192:33"><name pos:start="192:32" pos:end="192:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="192:37" pos:end="267:13">{<block_content pos:start="193:21" pos:end="267:13">
                    <expr_stmt pos:start="193:21" pos:end="193:70"><expr pos:start="193:21" pos:end="193:69"><name pos:start="193:21" pos:end="193:48"><name pos:start="193:21" pos:end="193:23">ctx</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:48">cplx_estimation_trash_i</name></name> <operator pos:start="193:50" pos:end="193:51">+=</operator> <literal type="number" pos:start="193:53" pos:end="193:53">8</literal> <operator pos:start="193:55" pos:end="193:55">*</operator> <call pos:start="193:57" pos:end="193:69"><name pos:start="193:57" pos:end="193:65">get_bits1</name><argument_list pos:start="193:66" pos:end="193:69">(<argument pos:start="193:67" pos:end="193:68"><expr pos:start="193:67" pos:end="193:68"><name pos:start="193:67" pos:end="193:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="193:73" pos:end="193:88">/* dct_coeffs */</comment>
                    <expr_stmt pos:start="194:21" pos:end="194:70"><expr pos:start="194:21" pos:end="194:69"><name pos:start="194:21" pos:end="194:48"><name pos:start="194:21" pos:end="194:23">ctx</name><operator pos:start="194:24" pos:end="194:25">-&gt;</operator><name pos:start="194:26" pos:end="194:48">cplx_estimation_trash_i</name></name> <operator pos:start="194:50" pos:end="194:51">+=</operator> <literal type="number" pos:start="194:53" pos:end="194:53">8</literal> <operator pos:start="194:55" pos:end="194:55">*</operator> <call pos:start="194:57" pos:end="194:69"><name pos:start="194:57" pos:end="194:65">get_bits1</name><argument_list pos:start="194:66" pos:end="194:69">(<argument pos:start="194:67" pos:end="194:68"><expr pos:start="194:67" pos:end="194:68"><name pos:start="194:67" pos:end="194:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="194:73" pos:end="194:87">/* dct_lines */</comment>
                    <expr_stmt pos:start="195:21" pos:end="195:70"><expr pos:start="195:21" pos:end="195:69"><name pos:start="195:21" pos:end="195:48"><name pos:start="195:21" pos:end="195:23">ctx</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:48">cplx_estimation_trash_i</name></name> <operator pos:start="195:50" pos:end="195:51">+=</operator> <literal type="number" pos:start="195:53" pos:end="195:53">8</literal> <operator pos:start="195:55" pos:end="195:55">*</operator> <call pos:start="195:57" pos:end="195:69"><name pos:start="195:57" pos:end="195:65">get_bits1</name><argument_list pos:start="195:66" pos:end="195:69">(<argument pos:start="195:67" pos:end="195:68"><expr pos:start="195:67" pos:end="195:68"><name pos:start="195:67" pos:end="195:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="195:73" pos:end="195:86">/* vlc_syms */</comment>
                    <expr_stmt pos:start="196:21" pos:end="196:70"><expr pos:start="196:21" pos:end="196:69"><name pos:start="196:21" pos:end="196:48"><name pos:start="196:21" pos:end="196:23">ctx</name><operator pos:start="196:24" pos:end="196:25">-&gt;</operator><name pos:start="196:26" pos:end="196:48">cplx_estimation_trash_i</name></name> <operator pos:start="196:50" pos:end="196:51">+=</operator> <literal type="number" pos:start="196:53" pos:end="196:53">4</literal> <operator pos:start="196:55" pos:end="196:55">*</operator> <call pos:start="196:57" pos:end="196:69"><name pos:start="196:57" pos:end="196:65">get_bits1</name><argument_list pos:start="196:66" pos:end="196:69">(<argument pos:start="196:67" pos:end="196:68"><expr pos:start="196:67" pos:end="196:68"><name pos:start="196:67" pos:end="196:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="196:73" pos:end="196:86">/* vlc_bits */</comment>
                <if_stmt pos:start="197:17" pos:end="267:13"><if pos:start="197:17" pos:end="267:13">if <condition pos:start="197:20" pos:end="197:35">(<expr pos:start="197:21" pos:end="197:34"><operator pos:start="197:21" pos:end="197:21">!</operator><call pos:start="197:22" pos:end="197:34"><name pos:start="197:22" pos:end="197:30">get_bits1</name><argument_list pos:start="197:31" pos:end="197:34">(<argument pos:start="197:32" pos:end="197:33"><expr pos:start="197:32" pos:end="197:33"><name pos:start="197:32" pos:end="197:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:37" pos:end="267:13">{<block_content pos:start="198:21" pos:end="267:13">
                    <expr_stmt pos:start="198:21" pos:end="198:70"><expr pos:start="198:21" pos:end="198:69"><name pos:start="198:21" pos:end="198:48"><name pos:start="198:21" pos:end="198:23">ctx</name><operator pos:start="198:24" pos:end="198:25">-&gt;</operator><name pos:start="198:26" pos:end="198:48">cplx_estimation_trash_p</name></name> <operator pos:start="198:50" pos:end="198:51">+=</operator> <literal type="number" pos:start="198:53" pos:end="198:53">8</literal> <operator pos:start="198:55" pos:end="198:55">*</operator> <call pos:start="198:57" pos:end="198:69"><name pos:start="198:57" pos:end="198:65">get_bits1</name><argument_list pos:start="198:66" pos:end="198:69">(<argument pos:start="198:67" pos:end="198:68"><expr pos:start="198:67" pos:end="198:68"><name pos:start="198:67" pos:end="198:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="198:73" pos:end="198:81">/* apm */</comment>
                    <expr_stmt pos:start="199:21" pos:end="199:70"><expr pos:start="199:21" pos:end="199:69"><name pos:start="199:21" pos:end="199:48"><name pos:start="199:21" pos:end="199:23">ctx</name><operator pos:start="199:24" pos:end="199:25">-&gt;</operator><name pos:start="199:26" pos:end="199:48">cplx_estimation_trash_p</name></name> <operator pos:start="199:50" pos:end="199:51">+=</operator> <literal type="number" pos:start="199:53" pos:end="199:53">8</literal> <operator pos:start="199:55" pos:end="199:55">*</operator> <call pos:start="199:57" pos:end="199:69"><name pos:start="199:57" pos:end="199:65">get_bits1</name><argument_list pos:start="199:66" pos:end="199:69">(<argument pos:start="199:67" pos:end="199:68"><expr pos:start="199:67" pos:end="199:68"><name pos:start="199:67" pos:end="199:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="199:73" pos:end="199:81">/* npm */</comment>
                    <expr_stmt pos:start="200:21" pos:end="200:70"><expr pos:start="200:21" pos:end="200:69"><name pos:start="200:21" pos:end="200:48"><name pos:start="200:21" pos:end="200:23">ctx</name><operator pos:start="200:24" pos:end="200:25">-&gt;</operator><name pos:start="200:26" pos:end="200:48">cplx_estimation_trash_b</name></name> <operator pos:start="200:50" pos:end="200:51">+=</operator> <literal type="number" pos:start="200:53" pos:end="200:53">8</literal> <operator pos:start="200:55" pos:end="200:55">*</operator> <call pos:start="200:57" pos:end="200:69"><name pos:start="200:57" pos:end="200:65">get_bits1</name><argument_list pos:start="200:66" pos:end="200:69">(<argument pos:start="200:67" pos:end="200:68"><expr pos:start="200:67" pos:end="200:68"><name pos:start="200:67" pos:end="200:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="200:73" pos:end="200:94">/* interpolate_mc_q */</comment>
                    <expr_stmt pos:start="201:21" pos:end="201:70"><expr pos:start="201:21" pos:end="201:69"><name pos:start="201:21" pos:end="201:48"><name pos:start="201:21" pos:end="201:23">ctx</name><operator pos:start="201:24" pos:end="201:25">-&gt;</operator><name pos:start="201:26" pos:end="201:48">cplx_estimation_trash_p</name></name> <operator pos:start="201:50" pos:end="201:51">+=</operator> <literal type="number" pos:start="201:53" pos:end="201:53">8</literal> <operator pos:start="201:55" pos:end="201:55">*</operator> <call pos:start="201:57" pos:end="201:69"><name pos:start="201:57" pos:end="201:65">get_bits1</name><argument_list pos:start="201:66" pos:end="201:69">(<argument pos:start="201:67" pos:end="201:68"><expr pos:start="201:67" pos:end="201:68"><name pos:start="201:67" pos:end="201:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="201:73" pos:end="201:91">/* forwback_mc_q */</comment>
                    <expr_stmt pos:start="202:21" pos:end="202:70"><expr pos:start="202:21" pos:end="202:69"><name pos:start="202:21" pos:end="202:48"><name pos:start="202:21" pos:end="202:23">ctx</name><operator pos:start="202:24" pos:end="202:25">-&gt;</operator><name pos:start="202:26" pos:end="202:48">cplx_estimation_trash_p</name></name> <operator pos:start="202:50" pos:end="202:51">+=</operator> <literal type="number" pos:start="202:53" pos:end="202:53">8</literal> <operator pos:start="202:55" pos:end="202:55">*</operator> <call pos:start="202:57" pos:end="202:69"><name pos:start="202:57" pos:end="202:65">get_bits1</name><argument_list pos:start="202:66" pos:end="202:69">(<argument pos:start="202:67" pos:end="202:68"><expr pos:start="202:67" pos:end="202:68"><name pos:start="202:67" pos:end="202:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="202:73" pos:end="202:86">/* halfpel2 */</comment>
                    <expr_stmt pos:start="203:21" pos:end="203:70"><expr pos:start="203:21" pos:end="203:69"><name pos:start="203:21" pos:end="203:48"><name pos:start="203:21" pos:end="203:23">ctx</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:48">cplx_estimation_trash_p</name></name> <operator pos:start="203:50" pos:end="203:51">+=</operator> <literal type="number" pos:start="203:53" pos:end="203:53">8</literal> <operator pos:start="203:55" pos:end="203:55">*</operator> <call pos:start="203:57" pos:end="203:69"><name pos:start="203:57" pos:end="203:65">get_bits1</name><argument_list pos:start="203:66" pos:end="203:69">(<argument pos:start="203:67" pos:end="203:68"><expr pos:start="203:67" pos:end="203:68"><name pos:start="203:67" pos:end="203:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="203:73" pos:end="203:86">/* halfpel4 */</comment>
                <if_stmt pos:start="204:17" pos:end="267:13"><if pos:start="204:17" pos:end="214:9">if <condition pos:start="204:20" pos:end="204:73">(<expr pos:start="204:21" pos:end="204:72"><operator pos:start="204:21" pos:end="204:21">!</operator><call pos:start="204:22" pos:end="204:72"><name pos:start="204:22" pos:end="204:33">check_marker</name><argument_list pos:start="204:34" pos:end="204:72">(<argument pos:start="204:35" pos:end="204:36"><expr pos:start="204:35" pos:end="204:36"><name pos:start="204:35" pos:end="204:36">gb</name></expr></argument>, <argument pos:start="204:39" pos:end="204:71"><expr pos:start="204:39" pos:end="204:71"><literal type="string" pos:start="204:39" pos:end="204:71">"in complexity estimation part 2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="204:75" pos:end="214:9">{<block_content pos:start="205:21" pos:end="213:42">
                    <expr_stmt pos:start="205:21" pos:end="205:65"><expr pos:start="205:21" pos:end="205:64"><call pos:start="205:21" pos:end="205:64"><name pos:start="205:21" pos:end="205:34">skip_bits_long</name><argument_list pos:start="205:35" pos:end="205:64">(<argument pos:start="205:36" pos:end="205:37"><expr pos:start="205:36" pos:end="205:37"><name pos:start="205:36" pos:end="205:37">gb</name></expr></argument>, <argument pos:start="205:40" pos:end="205:63"><expr pos:start="205:40" pos:end="205:63"><name pos:start="205:40" pos:end="205:42">pos</name> <operator pos:start="205:44" pos:end="205:44">-</operator> <call pos:start="205:46" pos:end="205:63"><name pos:start="205:46" pos:end="205:59">get_bits_count</name><argument_list pos:start="205:60" pos:end="205:63">(<argument pos:start="205:61" pos:end="205:62"><expr pos:start="205:61" pos:end="205:62"><name pos:start="205:61" pos:end="205:62">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <goto pos:start="206:21" pos:end="206:37">goto <name pos:start="206:26" pos:end="206:36">no_cplx_est</name>;</goto>
                <if_stmt pos:start="207:17" pos:end="213:42"><if pos:start="207:17" pos:end="210:13">if <condition pos:start="207:20" pos:end="207:43">(<expr pos:start="207:21" pos:end="207:42"><name pos:start="207:21" pos:end="207:37">estimation_method</name> <operator pos:start="207:39" pos:end="207:40">==</operator> <literal type="number" pos:start="207:42" pos:end="207:42">1</literal></expr>)</condition> <block pos:start="207:45" pos:end="210:13">{<block_content pos:start="208:21" pos:end="209:70">
                    <expr_stmt pos:start="208:21" pos:end="208:70"><expr pos:start="208:21" pos:end="208:69"><name pos:start="208:21" pos:end="208:48"><name pos:start="208:21" pos:end="208:23">ctx</name><operator pos:start="208:24" pos:end="208:25">-&gt;</operator><name pos:start="208:26" pos:end="208:48">cplx_estimation_trash_i</name></name> <operator pos:start="208:50" pos:end="208:51">+=</operator> <literal type="number" pos:start="208:53" pos:end="208:53">8</literal> <operator pos:start="208:55" pos:end="208:55">*</operator> <call pos:start="208:57" pos:end="208:69"><name pos:start="208:57" pos:end="208:65">get_bits1</name><argument_list pos:start="208:66" pos:end="208:69">(<argument pos:start="208:67" pos:end="208:68"><expr pos:start="208:67" pos:end="208:68"><name pos:start="208:67" pos:end="208:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="208:73" pos:end="208:83">/* sadct */</comment>
                    <expr_stmt pos:start="209:21" pos:end="209:70"><expr pos:start="209:21" pos:end="209:69"><name pos:start="209:21" pos:end="209:48"><name pos:start="209:21" pos:end="209:23">ctx</name><operator pos:start="209:24" pos:end="209:25">-&gt;</operator><name pos:start="209:26" pos:end="209:48">cplx_estimation_trash_p</name></name> <operator pos:start="209:50" pos:end="209:51">+=</operator> <literal type="number" pos:start="209:53" pos:end="209:53">8</literal> <operator pos:start="209:55" pos:end="209:55">*</operator> <call pos:start="209:57" pos:end="209:69"><name pos:start="209:57" pos:end="209:65">get_bits1</name><argument_list pos:start="209:66" pos:end="209:69">(<argument pos:start="209:67" pos:end="209:68"><expr pos:start="209:67" pos:end="209:68"><name pos:start="209:67" pos:end="209:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="209:73" pos:end="209:82">/* qpel */</comment>
            </block_content>}</block></if> <else pos:start="210:15" pos:end="213:42">else<block type="pseudo" pos:start="211:17" pos:end="213:42"><block_content pos:start="211:17" pos:end="213:42">
                <expr_stmt pos:start="211:17" pos:end="213:42"><expr pos:start="211:17" pos:end="213:41"><call pos:start="211:17" pos:end="213:41"><name pos:start="211:17" pos:end="211:22">av_log</name><argument_list pos:start="211:23" pos:end="213:41">(<argument pos:start="211:24" pos:end="211:31"><expr pos:start="211:24" pos:end="211:31"><name pos:start="211:24" pos:end="211:31"><name pos:start="211:24" pos:end="211:24">s</name><operator pos:start="211:25" pos:end="211:26">-&gt;</operator><name pos:start="211:27" pos:end="211:31">avctx</name></name></expr></argument>, <argument pos:start="211:34" pos:end="211:45"><expr pos:start="211:34" pos:end="211:45"><name pos:start="211:34" pos:end="211:45">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="212:24" pos:end="212:66"><expr pos:start="212:24" pos:end="212:66"><literal type="string" pos:start="212:24" pos:end="212:66">"Invalid Complexity estimation method %d\n"</literal></expr></argument>,
                       <argument pos:start="213:24" pos:end="213:40"><expr pos:start="213:24" pos:end="213:40"><name pos:start="213:24" pos:end="213:40">estimation_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="214:11" pos:end="267:13">else <block pos:start="214:16" pos:end="267:13">{<block_content pos:start="215:1" pos:end="267:13">
<label pos:start="215:1" pos:end="215:12"><name pos:start="215:1" pos:end="215:11">no_cplx_est</name>:</label>
            <expr_stmt pos:start="216:13" pos:end="218:45"><expr pos:start="216:13" pos:end="218:44"><name pos:start="216:13" pos:end="216:40"><name pos:start="216:13" pos:end="216:15">ctx</name><operator pos:start="216:16" pos:end="216:17">-&gt;</operator><name pos:start="216:18" pos:end="216:40">cplx_estimation_trash_i</name></name> <operator pos:start="216:42" pos:end="216:42">=</operator>
            <name pos:start="217:13" pos:end="217:40"><name pos:start="217:13" pos:end="217:15">ctx</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:40">cplx_estimation_trash_p</name></name> <operator pos:start="217:42" pos:end="217:42">=</operator>
            <name pos:start="218:13" pos:end="218:40"><name pos:start="218:13" pos:end="218:15">ctx</name><operator pos:start="218:16" pos:end="218:17">-&gt;</operator><name pos:start="218:18" pos:end="218:40">cplx_estimation_trash_b</name></name> <operator pos:start="218:42" pos:end="218:42">=</operator> <literal type="number" pos:start="218:44" pos:end="218:44">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:44"><expr pos:start="219:9" pos:end="219:43"><name pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:11">ctx</name><operator pos:start="219:12" pos:end="219:13">-&gt;</operator><name pos:start="219:14" pos:end="219:26">resync_marker</name></name> <operator pos:start="219:28" pos:end="219:28">=</operator> <operator pos:start="219:30" pos:end="219:30">!</operator><call pos:start="219:31" pos:end="219:43"><name pos:start="219:31" pos:end="219:39">get_bits1</name><argument_list pos:start="219:40" pos:end="219:43">(<argument pos:start="219:41" pos:end="219:42"><expr pos:start="219:41" pos:end="219:42"><name pos:start="219:41" pos:end="219:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="219:46" pos:end="219:73">/* resync_marker_disabled */</comment>
        <expr_stmt pos:start="220:9" pos:end="220:45"><expr pos:start="220:9" pos:end="220:44"><name pos:start="220:9" pos:end="220:28"><name pos:start="220:9" pos:end="220:9">s</name><operator pos:start="220:10" pos:end="220:11">-&gt;</operator><name pos:start="220:12" pos:end="220:28">data_partitioning</name></name> <operator pos:start="220:30" pos:end="220:30">=</operator> <call pos:start="220:32" pos:end="220:44"><name pos:start="220:32" pos:end="220:40">get_bits1</name><argument_list pos:start="220:41" pos:end="220:44">(<argument pos:start="220:42" pos:end="220:43"><expr pos:start="220:42" pos:end="220:43"><name pos:start="220:42" pos:end="220:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="221:9" pos:end="222:38"><if pos:start="221:9" pos:end="222:38">if <condition pos:start="221:12" pos:end="221:33">(<expr pos:start="221:13" pos:end="221:32"><name pos:start="221:13" pos:end="221:32"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:32">data_partitioning</name></name></expr>)</condition><block type="pseudo" pos:start="222:13" pos:end="222:38"><block_content pos:start="222:13" pos:end="222:38">
            <expr_stmt pos:start="222:13" pos:end="222:38"><expr pos:start="222:13" pos:end="222:37"><name pos:start="222:13" pos:end="222:21"><name pos:start="222:13" pos:end="222:15">ctx</name><operator pos:start="222:16" pos:end="222:17">-&gt;</operator><name pos:start="222:18" pos:end="222:21">rvlc</name></name> <operator pos:start="222:23" pos:end="222:23">=</operator> <call pos:start="222:25" pos:end="222:37"><name pos:start="222:25" pos:end="222:33">get_bits1</name><argument_list pos:start="222:34" pos:end="222:37">(<argument pos:start="222:35" pos:end="222:36"><expr pos:start="222:35" pos:end="222:36"><name pos:start="222:35" pos:end="222:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="223:9" pos:end="267:13"><if pos:start="223:9" pos:end="267:13">if <condition pos:start="223:12" pos:end="223:27">(<expr pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:21">vo_ver_id</name> <operator pos:start="223:23" pos:end="223:24">!=</operator> <literal type="number" pos:start="223:26" pos:end="223:26">1</literal></expr>)</condition> <block pos:start="223:29" pos:end="267:13">{<block_content pos:start="224:13" pos:end="267:13">
            <expr_stmt pos:start="224:13" pos:end="224:42"><expr pos:start="224:13" pos:end="224:41"><name pos:start="224:13" pos:end="224:25"><name pos:start="224:13" pos:end="224:15">ctx</name><operator pos:start="224:16" pos:end="224:17">-&gt;</operator><name pos:start="224:18" pos:end="224:25">new_pred</name></name> <operator pos:start="224:27" pos:end="224:27">=</operator> <call pos:start="224:29" pos:end="224:41"><name pos:start="224:29" pos:end="224:37">get_bits1</name><argument_list pos:start="224:38" pos:end="224:41">(<argument pos:start="224:39" pos:end="224:40"><expr pos:start="224:39" pos:end="224:40"><name pos:start="224:39" pos:end="224:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="225:13" pos:end="267:13"><if pos:start="225:13" pos:end="232:9">if <condition pos:start="225:16" pos:end="225:30">(<expr pos:start="225:17" pos:end="225:29"><name pos:start="225:17" pos:end="225:29"><name pos:start="225:17" pos:end="225:19">ctx</name><operator pos:start="225:20" pos:end="225:21">-&gt;</operator><name pos:start="225:22" pos:end="225:29">new_pred</name></name></expr>)</condition> <block pos:start="225:32" pos:end="232:9">{<block_content pos:start="226:17" pos:end="231:65">
                <expr_stmt pos:start="226:17" pos:end="226:75"><expr pos:start="226:17" pos:end="226:74"><call pos:start="226:17" pos:end="226:74"><name pos:start="226:17" pos:end="226:22">av_log</name><argument_list pos:start="226:23" pos:end="226:74">(<argument pos:start="226:24" pos:end="226:31"><expr pos:start="226:24" pos:end="226:31"><name pos:start="226:24" pos:end="226:31"><name pos:start="226:24" pos:end="226:24">s</name><operator pos:start="226:25" pos:end="226:26">-&gt;</operator><name pos:start="226:27" pos:end="226:31">avctx</name></name></expr></argument>, <argument pos:start="226:34" pos:end="226:45"><expr pos:start="226:34" pos:end="226:45"><name pos:start="226:34" pos:end="226:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="226:48" pos:end="226:73"><expr pos:start="226:48" pos:end="226:73"><literal type="string" pos:start="226:48" pos:end="226:73">"new pred not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="227:17" pos:end="227:33"><expr pos:start="227:17" pos:end="227:32"><call pos:start="227:17" pos:end="227:32"><name pos:start="227:17" pos:end="227:25">skip_bits</name><argument_list pos:start="227:26" pos:end="227:32">(<argument pos:start="227:27" pos:end="227:28"><expr pos:start="227:27" pos:end="227:28"><name pos:start="227:27" pos:end="227:28">gb</name></expr></argument>, <argument pos:start="227:31" pos:end="227:31"><expr pos:start="227:31" pos:end="227:31"><literal type="number" pos:start="227:31" pos:end="227:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="227:35" pos:end="227:71">/* requested upstream message type */</comment>
                <expr_stmt pos:start="228:17" pos:end="228:31"><expr pos:start="228:17" pos:end="228:30"><call pos:start="228:17" pos:end="228:30"><name pos:start="228:17" pos:end="228:26">skip_bits1</name><argument_list pos:start="228:27" pos:end="228:30">(<argument pos:start="228:28" pos:end="228:29"><expr pos:start="228:28" pos:end="228:29"><name pos:start="228:28" pos:end="228:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="228:35" pos:end="228:60">/* newpred segment type */</comment>
            <if_stmt pos:start="229:13" pos:end="231:65"><if pos:start="229:13" pos:end="231:65">if <condition pos:start="229:16" pos:end="229:30">(<expr pos:start="229:17" pos:end="229:29"><call pos:start="229:17" pos:end="229:29"><name pos:start="229:17" pos:end="229:25">get_bits1</name><argument_list pos:start="229:26" pos:end="229:29">(<argument pos:start="229:27" pos:end="229:28"><expr pos:start="229:27" pos:end="229:28"><name pos:start="229:27" pos:end="229:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="230:17" pos:end="231:65"><block_content pos:start="230:17" pos:end="231:65"> <comment type="line" pos:start="229:32" pos:end="229:49">// reduced_res_vop</comment>
                <expr_stmt pos:start="230:17" pos:end="231:65"><expr pos:start="230:17" pos:end="231:64"><call pos:start="230:17" pos:end="231:64"><name pos:start="230:17" pos:end="230:22">av_log</name><argument_list pos:start="230:23" pos:end="231:64">(<argument pos:start="230:24" pos:end="230:31"><expr pos:start="230:24" pos:end="230:31"><name pos:start="230:24" pos:end="230:31"><name pos:start="230:24" pos:end="230:24">s</name><operator pos:start="230:25" pos:end="230:26">-&gt;</operator><name pos:start="230:27" pos:end="230:31">avctx</name></name></expr></argument>, <argument pos:start="230:34" pos:end="230:45"><expr pos:start="230:34" pos:end="230:45"><name pos:start="230:34" pos:end="230:45">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="231:24" pos:end="231:63"><expr pos:start="231:24" pos:end="231:63"><literal type="string" pos:start="231:24" pos:end="231:63">"reduced resolution VOP not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="232:11" pos:end="267:13">else <block pos:start="232:16" pos:end="267:13">{<block_content pos:start="233:13" pos:end="267:13">
            <expr_stmt pos:start="233:13" pos:end="233:30"><expr pos:start="233:13" pos:end="233:29"><name pos:start="233:13" pos:end="233:25"><name pos:start="233:13" pos:end="233:15">ctx</name><operator pos:start="233:16" pos:end="233:17">-&gt;</operator><name pos:start="233:18" pos:end="233:25">new_pred</name></name> <operator pos:start="233:27" pos:end="233:27">=</operator> <literal type="number" pos:start="233:29" pos:end="233:29">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="234:9" pos:end="234:41"><expr pos:start="234:9" pos:end="234:40"><name pos:start="234:9" pos:end="234:24"><name pos:start="234:9" pos:end="234:11">ctx</name><operator pos:start="234:12" pos:end="234:13">-&gt;</operator><name pos:start="234:14" pos:end="234:24">scalability</name></name> <operator pos:start="234:26" pos:end="234:26">=</operator> <call pos:start="234:28" pos:end="234:40"><name pos:start="234:28" pos:end="234:36">get_bits1</name><argument_list pos:start="234:37" pos:end="234:40">(<argument pos:start="234:38" pos:end="234:39"><expr pos:start="234:38" pos:end="234:39"><name pos:start="234:38" pos:end="234:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="235:9" pos:end="267:13"><if pos:start="235:9" pos:end="267:13">if <condition pos:start="235:12" pos:end="235:29">(<expr pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:15">ctx</name><operator pos:start="235:16" pos:end="235:17">-&gt;</operator><name pos:start="235:18" pos:end="235:28">scalability</name></name></expr>)</condition> <block pos:start="235:31" pos:end="267:13">{<block_content pos:start="236:13" pos:end="267:13">
            <decl_stmt pos:start="236:13" pos:end="236:36"><decl pos:start="236:13" pos:end="236:35"><type pos:start="236:13" pos:end="236:25"><name pos:start="236:13" pos:end="236:25">GetBitContext</name></type> <name pos:start="236:27" pos:end="236:29">bak</name> <init pos:start="236:31" pos:end="236:35">= <expr pos:start="236:33" pos:end="236:35"><operator pos:start="236:33" pos:end="236:33">*</operator><name pos:start="236:34" pos:end="236:35">gb</name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="237:13" pos:end="237:36"><decl pos:start="237:13" pos:end="237:35"><type pos:start="237:13" pos:end="237:15"><name pos:start="237:13" pos:end="237:15">int</name></type> <name pos:start="237:17" pos:end="237:35">h_sampling_factor_n</name></decl>;</decl_stmt>
            <decl_stmt pos:start="238:13" pos:end="238:36"><decl pos:start="238:13" pos:end="238:35"><type pos:start="238:13" pos:end="238:15"><name pos:start="238:13" pos:end="238:15">int</name></type> <name pos:start="238:17" pos:end="238:35">h_sampling_factor_m</name></decl>;</decl_stmt>
            <decl_stmt pos:start="239:13" pos:end="239:36"><decl pos:start="239:13" pos:end="239:35"><type pos:start="239:13" pos:end="239:15"><name pos:start="239:13" pos:end="239:15">int</name></type> <name pos:start="239:17" pos:end="239:35">v_sampling_factor_n</name></decl>;</decl_stmt>
            <decl_stmt pos:start="240:13" pos:end="240:36"><decl pos:start="240:13" pos:end="240:35"><type pos:start="240:13" pos:end="240:15"><name pos:start="240:13" pos:end="240:15">int</name></type> <name pos:start="240:17" pos:end="240:35">v_sampling_factor_m</name></decl>;</decl_stmt>
            <expr_stmt pos:start="241:13" pos:end="241:27"><expr pos:start="241:13" pos:end="241:26"><call pos:start="241:13" pos:end="241:26"><name pos:start="241:13" pos:end="241:22">skip_bits1</name><argument_list pos:start="241:23" pos:end="241:26">(<argument pos:start="241:24" pos:end="241:25"><expr pos:start="241:24" pos:end="241:25"><name pos:start="241:24" pos:end="241:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="241:32" pos:end="241:48">// hierarchy_type</comment>
            <expr_stmt pos:start="242:13" pos:end="242:29"><expr pos:start="242:13" pos:end="242:28"><call pos:start="242:13" pos:end="242:28"><name pos:start="242:13" pos:end="242:21">skip_bits</name><argument_list pos:start="242:22" pos:end="242:28">(<argument pos:start="242:23" pos:end="242:24"><expr pos:start="242:23" pos:end="242:24"><name pos:start="242:23" pos:end="242:24">gb</name></expr></argument>, <argument pos:start="242:27" pos:end="242:27"><expr pos:start="242:27" pos:end="242:27"><literal type="number" pos:start="242:27" pos:end="242:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="242:32" pos:end="242:49">/* ref_layer_id */</comment>
            <expr_stmt pos:start="243:13" pos:end="243:27"><expr pos:start="243:13" pos:end="243:26"><call pos:start="243:13" pos:end="243:26"><name pos:start="243:13" pos:end="243:22">skip_bits1</name><argument_list pos:start="243:23" pos:end="243:26">(<argument pos:start="243:24" pos:end="243:25"><expr pos:start="243:24" pos:end="243:25"><name pos:start="243:24" pos:end="243:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="243:32" pos:end="243:59">/* ref_layer_sampling_dir */</comment>
            <expr_stmt pos:start="244:13" pos:end="244:50"><expr pos:start="244:13" pos:end="244:49"><name pos:start="244:13" pos:end="244:31">h_sampling_factor_n</name> <operator pos:start="244:33" pos:end="244:33">=</operator> <call pos:start="244:35" pos:end="244:49"><name pos:start="244:35" pos:end="244:42">get_bits</name><argument_list pos:start="244:43" pos:end="244:49">(<argument pos:start="244:44" pos:end="244:45"><expr pos:start="244:44" pos:end="244:45"><name pos:start="244:44" pos:end="244:45">gb</name></expr></argument>, <argument pos:start="244:48" pos:end="244:48"><expr pos:start="244:48" pos:end="244:48"><literal type="number" pos:start="244:48" pos:end="244:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="245:13" pos:end="245:50"><expr pos:start="245:13" pos:end="245:49"><name pos:start="245:13" pos:end="245:31">h_sampling_factor_m</name> <operator pos:start="245:33" pos:end="245:33">=</operator> <call pos:start="245:35" pos:end="245:49"><name pos:start="245:35" pos:end="245:42">get_bits</name><argument_list pos:start="245:43" pos:end="245:49">(<argument pos:start="245:44" pos:end="245:45"><expr pos:start="245:44" pos:end="245:45"><name pos:start="245:44" pos:end="245:45">gb</name></expr></argument>, <argument pos:start="245:48" pos:end="245:48"><expr pos:start="245:48" pos:end="245:48"><literal type="number" pos:start="245:48" pos:end="245:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="246:13" pos:end="246:50"><expr pos:start="246:13" pos:end="246:49"><name pos:start="246:13" pos:end="246:31">v_sampling_factor_n</name> <operator pos:start="246:33" pos:end="246:33">=</operator> <call pos:start="246:35" pos:end="246:49"><name pos:start="246:35" pos:end="246:42">get_bits</name><argument_list pos:start="246:43" pos:end="246:49">(<argument pos:start="246:44" pos:end="246:45"><expr pos:start="246:44" pos:end="246:45"><name pos:start="246:44" pos:end="246:45">gb</name></expr></argument>, <argument pos:start="246:48" pos:end="246:48"><expr pos:start="246:48" pos:end="246:48"><literal type="number" pos:start="246:48" pos:end="246:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="247:13" pos:end="247:50"><expr pos:start="247:13" pos:end="247:49"><name pos:start="247:13" pos:end="247:31">v_sampling_factor_m</name> <operator pos:start="247:33" pos:end="247:33">=</operator> <call pos:start="247:35" pos:end="247:49"><name pos:start="247:35" pos:end="247:42">get_bits</name><argument_list pos:start="247:43" pos:end="247:49">(<argument pos:start="247:44" pos:end="247:45"><expr pos:start="247:44" pos:end="247:45"><name pos:start="247:44" pos:end="247:45">gb</name></expr></argument>, <argument pos:start="247:48" pos:end="247:48"><expr pos:start="247:48" pos:end="247:48"><literal type="number" pos:start="247:48" pos:end="247:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="248:13" pos:end="248:50"><expr pos:start="248:13" pos:end="248:49"><name pos:start="248:13" pos:end="248:33"><name pos:start="248:13" pos:end="248:15">ctx</name><operator pos:start="248:16" pos:end="248:17">-&gt;</operator><name pos:start="248:18" pos:end="248:33">enhancement_type</name></name> <operator pos:start="248:35" pos:end="248:35">=</operator> <call pos:start="248:37" pos:end="248:49"><name pos:start="248:37" pos:end="248:45">get_bits1</name><argument_list pos:start="248:46" pos:end="248:49">(<argument pos:start="248:47" pos:end="248:48"><expr pos:start="248:47" pos:end="248:48"><name pos:start="248:47" pos:end="248:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="249:13" pos:end="256:78"><if pos:start="249:13" pos:end="255:13">if <condition pos:start="249:16" pos:end="250:69">(<expr pos:start="249:17" pos:end="250:68"><name pos:start="249:17" pos:end="249:35">h_sampling_factor_n</name> <operator pos:start="249:37" pos:end="249:38">==</operator> <literal type="number" pos:start="249:40" pos:end="249:40">0</literal> <operator pos:start="249:42" pos:end="249:43">||</operator> <name pos:start="249:45" pos:end="249:63">h_sampling_factor_m</name> <operator pos:start="249:65" pos:end="249:66">==</operator> <literal type="number" pos:start="249:68" pos:end="249:68">0</literal> <operator pos:start="249:70" pos:end="249:71">||</operator>
                <name pos:start="250:17" pos:end="250:35">v_sampling_factor_n</name> <operator pos:start="250:37" pos:end="250:38">==</operator> <literal type="number" pos:start="250:40" pos:end="250:40">0</literal> <operator pos:start="250:42" pos:end="250:43">||</operator> <name pos:start="250:45" pos:end="250:63">v_sampling_factor_m</name> <operator pos:start="250:65" pos:end="250:66">==</operator> <literal type="number" pos:start="250:68" pos:end="250:68">0</literal></expr>)</condition> <block pos:start="250:71" pos:end="255:13">{<block_content pos:start="253:17" pos:end="254:37">
                <comment type="block" pos:start="251:17" pos:end="252:42">/* illegal scalability header (VERY broken encoder),
                 * trying to workaround */</comment>
                <expr_stmt pos:start="253:17" pos:end="253:37"><expr pos:start="253:17" pos:end="253:36"><name pos:start="253:17" pos:end="253:32"><name pos:start="253:17" pos:end="253:19">ctx</name><operator pos:start="253:20" pos:end="253:21">-&gt;</operator><name pos:start="253:22" pos:end="253:32">scalability</name></name> <operator pos:start="253:34" pos:end="253:34">=</operator> <literal type="number" pos:start="253:36" pos:end="253:36">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="254:17" pos:end="254:37"><expr pos:start="254:17" pos:end="254:36"><operator pos:start="254:17" pos:end="254:17">*</operator><name pos:start="254:18" pos:end="254:19">gb</name>            <operator pos:start="254:32" pos:end="254:32">=</operator> <name pos:start="254:34" pos:end="254:36">bak</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="255:15" pos:end="256:78">else<block type="pseudo" pos:start="256:17" pos:end="256:78"><block_content pos:start="256:17" pos:end="256:78">
                <expr_stmt pos:start="256:17" pos:end="256:78"><expr pos:start="256:17" pos:end="256:77"><call pos:start="256:17" pos:end="256:77"><name pos:start="256:17" pos:end="256:22">av_log</name><argument_list pos:start="256:23" pos:end="256:77">(<argument pos:start="256:24" pos:end="256:31"><expr pos:start="256:24" pos:end="256:31"><name pos:start="256:24" pos:end="256:31"><name pos:start="256:24" pos:end="256:24">s</name><operator pos:start="256:25" pos:end="256:26">-&gt;</operator><name pos:start="256:27" pos:end="256:31">avctx</name></name></expr></argument>, <argument pos:start="256:34" pos:end="256:45"><expr pos:start="256:34" pos:end="256:45"><name pos:start="256:34" pos:end="256:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="256:48" pos:end="256:76"><expr pos:start="256:48" pos:end="256:76"><literal type="string" pos:start="256:48" pos:end="256:76">"scalability not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="line" pos:start="257:13" pos:end="257:36">// bin shape stuff FIXME</comment>
    <if_stmt pos:start="258:5" pos:end="267:13"><if pos:start="258:5" pos:end="267:13">if <condition pos:start="258:8" pos:end="258:43">(<expr pos:start="258:9" pos:end="258:42"><name pos:start="258:9" pos:end="258:23"><name pos:start="258:9" pos:end="258:9">s</name><operator pos:start="258:10" pos:end="258:11">-&gt;</operator><name pos:start="258:12" pos:end="258:16">avctx</name><operator pos:start="258:17" pos:end="258:18">-&gt;</operator><name pos:start="258:19" pos:end="258:23">debug</name></name><operator pos:start="258:24" pos:end="258:24">&amp;</operator><name pos:start="258:25" pos:end="258:42">FF_DEBUG_PICT_INFO</name></expr>)</condition> <block pos:start="258:45" pos:end="267:13">{<block_content pos:start="259:9" pos:end="267:13">
        <expr_stmt pos:start="259:9" pos:end="266:10"><expr pos:start="259:9" pos:end="266:9"><call pos:start="259:9" pos:end="266:9"><name pos:start="259:9" pos:end="259:14">av_log</name><argument_list pos:start="259:15" pos:end="266:9">(<argument pos:start="259:16" pos:end="259:23"><expr pos:start="259:16" pos:end="259:23"><name pos:start="259:16" pos:end="259:23"><name pos:start="259:16" pos:end="259:16">s</name><operator pos:start="259:17" pos:end="259:18">-&gt;</operator><name pos:start="259:19" pos:end="259:23">avctx</name></name></expr></argument>, <argument pos:start="259:26" pos:end="259:37"><expr pos:start="259:26" pos:end="259:37"><name pos:start="259:26" pos:end="259:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="259:40" pos:end="259:95"><expr pos:start="259:40" pos:end="259:95"><literal type="string" pos:start="259:40" pos:end="259:95">"tb %d/%d, tincrbits:%d, qp_prec:%d, ps:%d,  %s%s%s%s\n"</literal></expr></argument>,
               <argument pos:start="260:16" pos:end="260:38"><expr pos:start="260:16" pos:end="260:38"><name pos:start="260:16" pos:end="260:38"><name pos:start="260:16" pos:end="260:16">s</name><operator pos:start="260:17" pos:end="260:18">-&gt;</operator><name pos:start="260:19" pos:end="260:23">avctx</name><operator pos:start="260:24" pos:end="260:25">-&gt;</operator><name pos:start="260:26" pos:end="260:34">time_base</name><operator pos:start="260:35" pos:end="260:35">.</operator><name pos:start="260:36" pos:end="260:38">num</name></name></expr></argument>, <argument pos:start="260:41" pos:end="260:63"><expr pos:start="260:41" pos:end="260:63"><name pos:start="260:41" pos:end="260:63"><name pos:start="260:41" pos:end="260:41">s</name><operator pos:start="260:42" pos:end="260:43">-&gt;</operator><name pos:start="260:44" pos:end="260:48">avctx</name><operator pos:start="260:49" pos:end="260:50">-&gt;</operator><name pos:start="260:51" pos:end="260:59">time_base</name><operator pos:start="260:60" pos:end="260:60">.</operator><name pos:start="260:61" pos:end="260:63">den</name></name></expr></argument>,
               <argument pos:start="261:16" pos:end="261:39"><expr pos:start="261:16" pos:end="261:39"><name pos:start="261:16" pos:end="261:39"><name pos:start="261:16" pos:end="261:18">ctx</name><operator pos:start="261:19" pos:end="261:20">-&gt;</operator><name pos:start="261:21" pos:end="261:39">time_increment_bits</name></name></expr></argument>,
               <argument pos:start="262:16" pos:end="262:33"><expr pos:start="262:16" pos:end="262:33"><name pos:start="262:16" pos:end="262:33"><name pos:start="262:16" pos:end="262:16">s</name><operator pos:start="262:17" pos:end="262:18">-&gt;</operator><name pos:start="262:19" pos:end="262:33">quant_precision</name></name></expr></argument>,
               <argument pos:start="263:16" pos:end="263:38"><expr pos:start="263:16" pos:end="263:38"><name pos:start="263:16" pos:end="263:38"><name pos:start="263:16" pos:end="263:16">s</name><operator pos:start="263:17" pos:end="263:18">-&gt;</operator><name pos:start="263:19" pos:end="263:38">progressive_sequence</name></name></expr></argument>,
               <argument pos:start="264:16" pos:end="264:52"><expr pos:start="264:16" pos:end="264:52"><ternary pos:start="264:16" pos:end="264:52"><condition pos:start="264:16" pos:end="264:33"><expr pos:start="264:16" pos:end="264:31"><name pos:start="264:16" pos:end="264:31"><name pos:start="264:16" pos:end="264:18">ctx</name><operator pos:start="264:19" pos:end="264:20">-&gt;</operator><name pos:start="264:21" pos:end="264:31">scalability</name></name></expr> ?</condition><then pos:start="264:35" pos:end="264:48"> <expr pos:start="264:35" pos:end="264:48"><literal type="string" pos:start="264:35" pos:end="264:48">"scalability "</literal></expr> </then><else pos:start="264:50" pos:end="264:52">:<expr pos:start="264:51" pos:end="264:52"><literal type="string" pos:start="264:51" pos:end="264:52">""</literal></expr></else></ternary></expr></argument> , <argument pos:start="264:56" pos:end="264:87"><expr pos:start="264:56" pos:end="264:87"><ternary pos:start="264:56" pos:end="264:87"><condition pos:start="264:56" pos:end="264:74"><expr pos:start="264:56" pos:end="264:72"><name pos:start="264:56" pos:end="264:72"><name pos:start="264:56" pos:end="264:56">s</name><operator pos:start="264:57" pos:end="264:58">-&gt;</operator><name pos:start="264:59" pos:end="264:72">quarter_sample</name></name></expr> ?</condition><then pos:start="264:76" pos:end="264:82"> <expr pos:start="264:76" pos:end="264:82"><literal type="string" pos:start="264:76" pos:end="264:82">"qpel "</literal></expr> </then><else pos:start="264:84" pos:end="264:87">: <expr pos:start="264:86" pos:end="264:87"><literal type="string" pos:start="264:86" pos:end="264:87">""</literal></expr></else></ternary></expr></argument>,
               <argument pos:start="265:16" pos:end="265:55"><expr pos:start="265:16" pos:end="265:55"><ternary pos:start="265:16" pos:end="265:55"><condition pos:start="265:16" pos:end="265:37"><expr pos:start="265:16" pos:end="265:35"><name pos:start="265:16" pos:end="265:35"><name pos:start="265:16" pos:end="265:16">s</name><operator pos:start="265:17" pos:end="265:18">-&gt;</operator><name pos:start="265:19" pos:end="265:35">data_partitioning</name></name></expr> ?</condition><then pos:start="265:39" pos:end="265:50"> <expr pos:start="265:39" pos:end="265:50"><literal type="string" pos:start="265:39" pos:end="265:50">"partition "</literal></expr> </then><else pos:start="265:52" pos:end="265:55">: <expr pos:start="265:54" pos:end="265:55"><literal type="string" pos:start="265:54" pos:end="265:55">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="265:58" pos:end="265:81"><expr pos:start="265:58" pos:end="265:81"><ternary pos:start="265:58" pos:end="265:81"><condition pos:start="265:58" pos:end="265:68"><expr pos:start="265:58" pos:end="265:66"><name pos:start="265:58" pos:end="265:66"><name pos:start="265:58" pos:end="265:60">ctx</name><operator pos:start="265:61" pos:end="265:62">-&gt;</operator><name pos:start="265:63" pos:end="265:66">rvlc</name></name></expr> ?</condition><then pos:start="265:70" pos:end="265:76"> <expr pos:start="265:70" pos:end="265:76"><literal type="string" pos:start="265:70" pos:end="265:76">"rvlc "</literal></expr> </then><else pos:start="265:78" pos:end="265:81">: <expr pos:start="265:80" pos:end="265:81"><literal type="string" pos:start="265:80" pos:end="265:81">""</literal></expr></else></ternary></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    <return pos:start="267:5" pos:end="267:13">return <expr pos:start="267:12" pos:end="267:12"><literal type="number" pos:start="267:12" pos:end="267:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></function></unit>
