<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16200.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bfi_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">data_size</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="233:1">{<block_content pos:start="7:5" pos:end="231:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">BFIContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">bfi</name> <init pos:start="11:21" pos:end="11:38">= <expr pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:27">avctx</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">dst</name> <init pos:start="13:18" pos:end="13:27">= <expr pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:22">bfi</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:27">dst</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">src</name></decl>, <decl pos:start="15:19" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:29">dst_offset</name></decl>, <decl pos:start="15:32" pos:end="15:38"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:32" pos:end="15:38">colour1</name></decl>, <decl pos:start="15:41" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:41" pos:end="15:47">colour2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:65"><decl pos:start="17:5" pos:end="17:64"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:22">frame_end</name> <init pos:start="17:24" pos:end="17:64">= <expr pos:start="17:26" pos:end="17:64"><name pos:start="17:26" pos:end="17:33"><name pos:start="17:26" pos:end="17:28">bfi</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:33">dst</name></name> <operator pos:start="17:35" pos:end="17:35">+</operator> <name pos:start="17:37" pos:end="17:48"><name pos:start="17:37" pos:end="17:41">avctx</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:48">width</name></name> <operator pos:start="17:50" pos:end="17:50">*</operator> <name pos:start="17:52" pos:end="17:64"><name pos:start="17:52" pos:end="17:56">avctx</name><operator pos:start="17:57" pos:end="17:58">-&gt;</operator><name pos:start="17:59" pos:end="17:64">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint32_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pal</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:12"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:12">j</name></decl>, <decl pos:start="21:15" pos:end="21:36"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:20">height</name> <init pos:start="21:22" pos:end="21:36">= <expr pos:start="21:24" pos:end="21:36"><name pos:start="21:24" pos:end="21:36"><name pos:start="21:24" pos:end="21:28">avctx</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:36">height</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:50"><if pos:start="25:5" pos:end="27:50">if <condition pos:start="25:8" pos:end="25:27">(<expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:11">bfi</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:18">frame</name><operator pos:start="25:19" pos:end="25:19">.</operator><name pos:start="25:20" pos:end="25:23">data</name><index pos:start="25:24" pos:end="25:26">[<expr pos:start="25:25" pos:end="25:25"><literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:50"><block_content pos:start="27:9" pos:end="27:50">

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:29">release_buffer</name></name><argument_list pos:start="27:30" pos:end="27:49">(<argument pos:start="27:31" pos:end="27:35"><expr pos:start="27:31" pos:end="27:35"><name pos:start="27:31" pos:end="27:35">avctx</name></expr></argument>, <argument pos:start="27:38" pos:end="27:48"><expr pos:start="27:38" pos:end="27:48"><operator pos:start="27:38" pos:end="27:38">&amp;</operator><name pos:start="27:39" pos:end="27:48"><name pos:start="27:39" pos:end="27:41">bfi</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:48">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:7">bfi</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:14">frame</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:24">reference</name></name> <operator pos:start="31:26" pos:end="31:26">=</operator> <literal type="number" pos:start="31:28" pos:end="31:28">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:50">(<expr pos:start="35:9" pos:end="35:49"><call pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:13">avctx</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:25">get_buffer</name></name><argument_list pos:start="35:26" pos:end="35:45">(<argument pos:start="35:27" pos:end="35:31"><expr pos:start="35:27" pos:end="35:31"><name pos:start="35:27" pos:end="35:31">avctx</name></expr></argument>, <argument pos:start="35:34" pos:end="35:44"><expr pos:start="35:34" pos:end="35:44"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:44"><name pos:start="35:35" pos:end="35:37">bfi</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:44">frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:47" pos:end="35:47">&lt;</operator> <literal type="number" pos:start="35:49" pos:end="35:49">0</literal></expr>)</condition> <block pos:start="35:52" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><literal type="string" pos:start="37:37" pos:end="37:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:56">/* Set frame parameters and palette, if necessary */</comment>

    <if_stmt pos:start="47:5" pos:end="91:5"><if pos:start="47:5" pos:end="85:5">if <condition pos:start="47:8" pos:end="47:29">(<expr pos:start="47:9" pos:end="47:28"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:28"><name pos:start="47:10" pos:end="47:14">avctx</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:28">frame_number</name></name></expr>)</condition> <block pos:start="47:31" pos:end="85:5">{<block_content pos:start="49:9" pos:end="83:43">

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:11">bfi</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:18">frame</name><operator pos:start="49:19" pos:end="49:19">.</operator><name pos:start="49:20" pos:end="49:28">pict_type</name></name> <operator pos:start="49:30" pos:end="49:30">=</operator> <name pos:start="49:32" pos:end="49:40">FF_I_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:11">bfi</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:18">frame</name><operator pos:start="51:19" pos:end="51:19">.</operator><name pos:start="51:20" pos:end="51:28">key_frame</name></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <literal type="number" pos:start="51:32" pos:end="51:32">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="53:9" pos:end="53:33">/* Setting the palette */</comment>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if<condition pos:start="55:11" pos:end="55:37">(<expr pos:start="55:12" pos:end="55:36"><name pos:start="55:12" pos:end="55:32"><name pos:start="55:12" pos:end="55:16">avctx</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:32">extradata_size</name></name><operator pos:start="55:33" pos:end="55:33">&gt;</operator><literal type="number" pos:start="55:34" pos:end="55:36">768</literal></expr>)</condition> <block pos:start="55:39" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:22">

            <expr_stmt pos:start="57:13" pos:end="57:66"><expr pos:start="57:13" pos:end="57:65"><call pos:start="57:13" pos:end="57:65"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="57:65">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">NULL</name></expr></argument>, <argument pos:start="57:26" pos:end="57:37"><expr pos:start="57:26" pos:end="57:37"><name pos:start="57:26" pos:end="57:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:40" pos:end="57:64"><expr pos:start="57:40" pos:end="57:64"><literal type="string" pos:start="57:40" pos:end="57:64">"Palette is too large.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:46"><expr pos:start="63:9" pos:end="63:45"><name pos:start="63:9" pos:end="63:11">pal</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">(</operator><name pos:start="63:16" pos:end="63:23">uint32_t</name> <operator pos:start="63:25" pos:end="63:25">*</operator><operator pos:start="63:26" pos:end="63:26">)</operator> <name pos:start="63:28" pos:end="63:45"><name pos:start="63:28" pos:end="63:30">bfi</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:37">frame</name><operator pos:start="63:38" pos:end="63:38">.</operator><name pos:start="63:39" pos:end="63:42">data</name><index pos:start="63:43" pos:end="63:45">[<expr pos:start="63:44" pos:end="63:44"><literal type="number" pos:start="63:44" pos:end="63:44">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="65:9" pos:end="81:9">for <control pos:start="65:13" pos:end="65:55">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">i</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:50"><expr pos:start="65:21" pos:end="65:49"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <name pos:start="65:25" pos:end="65:45"><name pos:start="65:25" pos:end="65:29">avctx</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:45">extradata_size</name></name> <operator pos:start="65:47" pos:end="65:47">/</operator> <literal type="number" pos:start="65:49" pos:end="65:49">3</literal></expr>;</condition> <incr pos:start="65:52" pos:end="65:54"><expr pos:start="65:52" pos:end="65:54"><name pos:start="65:52" pos:end="65:52">i</name><operator pos:start="65:53" pos:end="65:54">++</operator></expr></incr>)</control> <block pos:start="65:57" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:18">

            <decl_stmt pos:start="67:13" pos:end="67:27"><decl pos:start="67:13" pos:end="67:26"><type pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">int</name></type> <name pos:start="67:17" pos:end="67:21">shift</name> <init pos:start="67:23" pos:end="67:26">= <expr pos:start="67:25" pos:end="67:26"><literal type="number" pos:start="67:25" pos:end="67:26">16</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:21"><expr pos:start="69:13" pos:end="69:20"><operator pos:start="69:13" pos:end="69:13">*</operator><name pos:start="69:14" pos:end="69:16">pal</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <literal type="number" pos:start="69:20" pos:end="69:20">0</literal></expr>;</expr_stmt>

            <for pos:start="71:13" pos:end="77:65">for <control pos:start="71:17" pos:end="71:47">(<init pos:start="71:18" pos:end="71:23"><expr pos:start="71:18" pos:end="71:22"><name pos:start="71:18" pos:end="71:18">j</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>;</init> <condition pos:start="71:25" pos:end="71:30"><expr pos:start="71:25" pos:end="71:29"><name pos:start="71:25" pos:end="71:25">j</name> <operator pos:start="71:27" pos:end="71:27">&lt;</operator> <literal type="number" pos:start="71:29" pos:end="71:29">3</literal></expr>;</condition> <incr pos:start="71:32" pos:end="71:46"><expr pos:start="71:32" pos:end="71:34"><name pos:start="71:32" pos:end="71:32">j</name><operator pos:start="71:33" pos:end="71:34">++</operator></expr><operator pos:start="71:35" pos:end="71:35">,</operator> <expr pos:start="71:37" pos:end="71:46"><name pos:start="71:37" pos:end="71:41">shift</name> <operator pos:start="71:43" pos:end="71:44">-=</operator> <literal type="number" pos:start="71:46" pos:end="71:46">8</literal></expr></incr>)</control><block type="pseudo" pos:start="73:17" pos:end="77:65"><block_content pos:start="73:17" pos:end="77:65">

                <expr_stmt pos:start="73:17" pos:end="77:65"><expr pos:start="73:17" pos:end="77:64"><operator pos:start="73:17" pos:end="73:17">*</operator><name pos:start="73:18" pos:end="73:20">pal</name> <operator pos:start="73:22" pos:end="73:23">+=</operator>

                    <operator pos:start="75:21" pos:end="75:21">(</operator><operator pos:start="75:22" pos:end="75:22">(</operator><name pos:start="75:23" pos:end="75:49"><name pos:start="75:23" pos:end="75:27">avctx</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:38">extradata</name><index pos:start="75:39" pos:end="75:49">[<expr pos:start="75:40" pos:end="75:48"><name pos:start="75:40" pos:end="75:40">i</name> <operator pos:start="75:42" pos:end="75:42">*</operator> <literal type="number" pos:start="75:44" pos:end="75:46">3</literal> <operator pos:start="75:46" pos:end="75:46">+</operator> <name pos:start="75:48" pos:end="75:48">j</name></expr>]</index></name> <operator pos:start="75:51" pos:end="75:52">&lt;&lt;</operator> <literal type="number" pos:start="75:54" pos:end="75:54">2</literal><operator pos:start="75:55" pos:end="75:55">)</operator> <operator pos:start="75:57" pos:end="75:57">|</operator>

                    <operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:48"><name pos:start="77:22" pos:end="77:26">avctx</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:37">extradata</name><index pos:start="77:38" pos:end="77:48">[<expr pos:start="77:39" pos:end="77:47"><name pos:start="77:39" pos:end="77:39">i</name> <operator pos:start="77:41" pos:end="77:41">*</operator> <literal type="number" pos:start="77:43" pos:end="77:45">3</literal> <operator pos:start="77:45" pos:end="77:45">+</operator> <name pos:start="77:47" pos:end="77:47">j</name></expr>]</index></name> <operator pos:start="77:50" pos:end="77:51">&gt;&gt;</operator> <literal type="number" pos:start="77:53" pos:end="77:53">4</literal><operator pos:start="77:54" pos:end="77:54">)</operator><operator pos:start="77:55" pos:end="77:55">)</operator> <operator pos:start="77:57" pos:end="77:58">&lt;&lt;</operator> <name pos:start="77:60" pos:end="77:64">shift</name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="79:13" pos:end="79:18"><expr pos:start="79:13" pos:end="79:17"><name pos:start="79:13" pos:end="79:15">pal</name><operator pos:start="79:16" pos:end="79:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="83:9" pos:end="83:43"><expr pos:start="83:9" pos:end="83:42"><name pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:11">bfi</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:18">frame</name><operator pos:start="83:19" pos:end="83:19">.</operator><name pos:start="83:20" pos:end="83:38">palette_has_changed</name></name> <operator pos:start="83:40" pos:end="83:40">=</operator> <literal type="number" pos:start="83:42" pos:end="83:42">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="91:5">else <block pos:start="85:12" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:33">

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><name pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:11">bfi</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:18">frame</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:28">pict_type</name></name> <operator pos:start="87:30" pos:end="87:30">=</operator> <name pos:start="87:32" pos:end="87:40">FF_P_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:33"><expr pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:11">bfi</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:18">frame</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:28">key_frame</name></name> <operator pos:start="89:30" pos:end="89:30">=</operator> <literal type="number" pos:start="89:32" pos:end="89:32">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:13"><expr pos:start="95:5" pos:end="95:12"><name pos:start="95:5" pos:end="95:7">buf</name> <operator pos:start="95:9" pos:end="95:10">+=</operator> <literal type="number" pos:start="95:12" pos:end="95:12">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="95:15" pos:end="95:44">//Unpacked size, not required.</comment>



    <while pos:start="99:5" pos:end="209:5">while <condition pos:start="99:11" pos:end="99:28">(<expr pos:start="99:12" pos:end="99:27"><name pos:start="99:12" pos:end="99:14">dst</name> <operator pos:start="99:16" pos:end="99:17">!=</operator> <name pos:start="99:19" pos:end="99:27">frame_end</name></expr>)</condition> <block pos:start="99:30" pos:end="209:5">{<block_content pos:start="101:9" pos:end="207:9">

        <decl_stmt pos:start="101:9" pos:end="101:49"><decl pos:start="101:9" pos:end="101:48"><type pos:start="101:9" pos:end="101:28"><specifier pos:start="101:9" pos:end="101:14">static</specifier> <specifier pos:start="101:16" pos:end="101:20">const</specifier> <name pos:start="101:22" pos:end="101:28">uint8_t</name></type> <name pos:start="101:30" pos:end="101:38"><name pos:start="101:30" pos:end="101:35">lentab</name><index pos:start="101:36" pos:end="101:38">[<expr pos:start="101:37" pos:end="101:37"><literal type="number" pos:start="101:37" pos:end="101:37">4</literal></expr>]</index></name><init pos:start="101:39" pos:end="101:48">=<expr pos:start="101:40" pos:end="101:48"><block pos:start="101:40" pos:end="101:48">{<expr pos:start="101:41" pos:end="101:41"><literal type="number" pos:start="101:41" pos:end="101:41">0</literal></expr>,<expr pos:start="101:43" pos:end="101:43"><literal type="number" pos:start="101:43" pos:end="101:43">2</literal></expr>,<expr pos:start="101:45" pos:end="101:45"><literal type="number" pos:start="101:45" pos:end="101:45">0</literal></expr>,<expr pos:start="101:47" pos:end="101:47"><literal type="number" pos:start="101:47" pos:end="101:47">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:54"><decl pos:start="103:9" pos:end="103:34"><type pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:16">unsigned</name> <name pos:start="103:18" pos:end="103:20">int</name></type> <name pos:start="103:22" pos:end="103:25">byte</name> <init pos:start="103:27" pos:end="103:34">= <expr pos:start="103:29" pos:end="103:34"><operator pos:start="103:29" pos:end="103:29">*</operator><name pos:start="103:30" pos:end="103:32">buf</name><operator pos:start="103:33" pos:end="103:34">++</operator></expr></init></decl>, <decl pos:start="103:37" pos:end="103:53"><type ref="prev" pos:start="103:9" pos:end="103:20"/><name pos:start="103:37" pos:end="103:45">av_uninit</name><argument_list pos:start="103:46" pos:end="103:53">(<argument pos:start="103:47" pos:end="103:52"><expr pos:start="103:47" pos:end="103:52"><name pos:start="103:47" pos:end="103:52">offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:38"><decl pos:start="105:9" pos:end="105:37"><type pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:16">unsigned</name> <name pos:start="105:18" pos:end="105:20">int</name></type> <name pos:start="105:22" pos:end="105:25">code</name> <init pos:start="105:27" pos:end="105:37">= <expr pos:start="105:29" pos:end="105:37"><name pos:start="105:29" pos:end="105:32">byte</name> <operator pos:start="105:34" pos:end="105:35">&gt;&gt;</operator> <literal type="number" pos:start="105:37" pos:end="105:37">6</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:43"><decl pos:start="107:9" pos:end="107:42"><type pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:16">unsigned</name> <name pos:start="107:18" pos:end="107:20">int</name></type> <name pos:start="107:22" pos:end="107:27">length</name> <init pos:start="107:29" pos:end="107:42">= <expr pos:start="107:31" pos:end="107:42"><name pos:start="107:31" pos:end="107:34">byte</name> <operator pos:start="107:36" pos:end="107:36">&amp;</operator> <operator pos:start="107:38" pos:end="107:38">~</operator><literal type="number" pos:start="107:39" pos:end="107:42">0xC0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:48">/* Get length and offset(if required) */</comment>

        <if_stmt pos:start="113:9" pos:end="137:9"><if pos:start="113:9" pos:end="131:9">if <condition pos:start="113:12" pos:end="113:24">(<expr pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:18">length</name> <operator pos:start="113:20" pos:end="113:21">==</operator> <literal type="number" pos:start="113:23" pos:end="113:23">0</literal></expr>)</condition> <block pos:start="113:26" pos:end="131:9">{<block_content pos:start="115:13" pos:end="129:13">

            <if_stmt pos:start="115:13" pos:end="129:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:26">(<expr pos:start="115:17" pos:end="115:25"><name pos:start="115:17" pos:end="115:20">code</name> <operator pos:start="115:22" pos:end="115:23">==</operator> <literal type="number" pos:start="115:25" pos:end="115:25">1</literal></expr>)</condition> <block pos:start="115:28" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:51">

                <expr_stmt pos:start="117:17" pos:end="117:51"><expr pos:start="117:17" pos:end="117:50"><name pos:start="117:17" pos:end="117:22">length</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <call pos:start="117:26" pos:end="117:50"><name pos:start="117:26" pos:end="117:44">bytestream_get_byte</name><argument_list pos:start="117:45" pos:end="117:50">(<argument pos:start="117:46" pos:end="117:49"><expr pos:start="117:46" pos:end="117:49"><operator pos:start="117:46" pos:end="117:46">&amp;</operator><name pos:start="117:47" pos:end="117:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:51"><expr pos:start="119:17" pos:end="119:50"><name pos:start="119:17" pos:end="119:22">offset</name> <operator pos:start="119:24" pos:end="119:24">=</operator> <call pos:start="119:26" pos:end="119:50"><name pos:start="119:26" pos:end="119:44">bytestream_get_le16</name><argument_list pos:start="119:45" pos:end="119:50">(<argument pos:start="119:46" pos:end="119:49"><expr pos:start="119:46" pos:end="119:49"><operator pos:start="119:46" pos:end="119:46">&amp;</operator><name pos:start="119:47" pos:end="119:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="121:15" pos:end="129:13">else <block pos:start="121:20" pos:end="129:13">{<block_content pos:start="123:17" pos:end="127:26">

                <expr_stmt pos:start="123:17" pos:end="123:51"><expr pos:start="123:17" pos:end="123:50"><name pos:start="123:17" pos:end="123:22">length</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:50"><name pos:start="123:26" pos:end="123:44">bytestream_get_le16</name><argument_list pos:start="123:45" pos:end="123:50">(<argument pos:start="123:46" pos:end="123:49"><expr pos:start="123:46" pos:end="123:49"><operator pos:start="123:46" pos:end="123:46">&amp;</operator><name pos:start="123:47" pos:end="123:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="127:26"><if pos:start="125:17" pos:end="127:26">if <condition pos:start="125:20" pos:end="125:45">(<expr pos:start="125:21" pos:end="125:44"><name pos:start="125:21" pos:end="125:24">code</name> <operator pos:start="125:26" pos:end="125:27">==</operator> <literal type="number" pos:start="125:29" pos:end="125:29">2</literal> <operator pos:start="125:31" pos:end="125:32">&amp;&amp;</operator> <name pos:start="125:34" pos:end="125:39">length</name> <operator pos:start="125:41" pos:end="125:42">==</operator> <literal type="number" pos:start="125:44" pos:end="125:44">0</literal></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:26"><block_content pos:start="127:21" pos:end="127:26">

                    <break pos:start="127:21" pos:end="127:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="131:11" pos:end="137:9">else <block pos:start="131:16" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:51">

            <if_stmt pos:start="133:13" pos:end="135:51"><if pos:start="133:13" pos:end="135:51">if <condition pos:start="133:16" pos:end="133:26">(<expr pos:start="133:17" pos:end="133:25"><name pos:start="133:17" pos:end="133:20">code</name> <operator pos:start="133:22" pos:end="133:23">==</operator> <literal type="number" pos:start="133:25" pos:end="133:25">1</literal></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:51"><block_content pos:start="135:17" pos:end="135:51">

                <expr_stmt pos:start="135:17" pos:end="135:51"><expr pos:start="135:17" pos:end="135:50"><name pos:start="135:17" pos:end="135:22">offset</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <call pos:start="135:26" pos:end="135:50"><name pos:start="135:26" pos:end="135:44">bytestream_get_byte</name><argument_list pos:start="135:45" pos:end="135:50">(<argument pos:start="135:46" pos:end="135:49"><expr pos:start="135:46" pos:end="135:49"><operator pos:start="135:46" pos:end="135:46">&amp;</operator><name pos:start="135:47" pos:end="135:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="141:9" pos:end="141:31">/* Do boundary check */</comment>

        <if_stmt pos:start="143:9" pos:end="145:18"><if pos:start="143:9" pos:end="145:18">if <condition pos:start="143:12" pos:end="143:53">(<expr pos:start="143:13" pos:end="143:52"><name pos:start="143:13" pos:end="143:15">dst</name> <operator pos:start="143:17" pos:end="143:17">+</operator> <operator pos:start="143:19" pos:end="143:19">(</operator><name pos:start="143:20" pos:end="143:25">length</name><operator pos:start="143:26" pos:end="143:27">&lt;&lt;</operator><name pos:start="143:28" pos:end="143:39"><name pos:start="143:28" pos:end="143:33">lentab</name><index pos:start="143:34" pos:end="143:39">[<expr pos:start="143:35" pos:end="143:38"><name pos:start="143:35" pos:end="143:38">code</name></expr>]</index></name><operator pos:start="143:40" pos:end="143:40">)</operator> <operator pos:start="143:42" pos:end="143:42">&gt;</operator> <name pos:start="143:44" pos:end="143:52">frame_end</name></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:18"><block_content pos:start="145:13" pos:end="145:18">

            <break pos:start="145:13" pos:end="145:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="149:9" pos:end="207:9">switch <condition pos:start="149:16" pos:end="149:21">(<expr pos:start="149:17" pos:end="149:20"><name pos:start="149:17" pos:end="149:20">code</name></expr>)</condition> <block pos:start="149:23" pos:end="207:9">{<block_content pos:start="153:9" pos:end="203:18">



        <case pos:start="153:9" pos:end="153:15">case <expr pos:start="153:14" pos:end="153:14"><literal type="number" pos:start="153:14" pos:end="153:14">0</literal></expr>:</case>                <comment type="line" pos:start="153:32" pos:end="153:45">//Normal Chain</comment>

            <expr_stmt pos:start="155:13" pos:end="155:53"><expr pos:start="155:13" pos:end="155:52"><call pos:start="155:13" pos:end="155:52"><name pos:start="155:13" pos:end="155:33">bytestream_get_buffer</name><argument_list pos:start="155:34" pos:end="155:52">(<argument pos:start="155:35" pos:end="155:38"><expr pos:start="155:35" pos:end="155:38"><operator pos:start="155:35" pos:end="155:35">&amp;</operator><name pos:start="155:36" pos:end="155:38">buf</name></expr></argument>, <argument pos:start="155:41" pos:end="155:43"><expr pos:start="155:41" pos:end="155:43"><name pos:start="155:41" pos:end="155:43">dst</name></expr></argument>, <argument pos:start="155:46" pos:end="155:51"><expr pos:start="155:46" pos:end="155:51"><name pos:start="155:46" pos:end="155:51">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:26"><expr pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:15">dst</name> <operator pos:start="157:17" pos:end="157:18">+=</operator> <name pos:start="157:20" pos:end="157:25">length</name></expr>;</expr_stmt>

            <break pos:start="159:13" pos:end="159:18">break;</break>



        <case pos:start="163:9" pos:end="163:15">case <expr pos:start="163:14" pos:end="163:14"><literal type="number" pos:start="163:14" pos:end="163:14">1</literal></expr>:</case>                <comment type="line" pos:start="163:32" pos:end="163:43">//Back Chain</comment>

            <expr_stmt pos:start="165:13" pos:end="165:38"><expr pos:start="165:13" pos:end="165:37"><name pos:start="165:13" pos:end="165:22">dst_offset</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <name pos:start="165:26" pos:end="165:28">dst</name> <operator pos:start="165:30" pos:end="165:30">-</operator> <name pos:start="165:32" pos:end="165:37">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:24"><expr pos:start="167:13" pos:end="167:23"><name pos:start="167:13" pos:end="167:18">length</name> <operator pos:start="167:20" pos:end="167:21">*=</operator> <literal type="number" pos:start="167:23" pos:end="167:23">4</literal></expr>;</expr_stmt>        <comment type="line" pos:start="167:33" pos:end="167:58">//Convert dwords to bytes.</comment>

            <if_stmt pos:start="169:13" pos:end="171:22"><if pos:start="169:13" pos:end="171:22">if <condition pos:start="169:16" pos:end="169:38">(<expr pos:start="169:17" pos:end="169:37"><name pos:start="169:17" pos:end="169:26">dst_offset</name> <operator pos:start="169:28" pos:end="169:28">&lt;</operator> <name pos:start="169:30" pos:end="169:37"><name pos:start="169:30" pos:end="169:32">bfi</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:37">dst</name></name></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:22"><block_content pos:start="171:17" pos:end="171:22">

                <break pos:start="171:17" pos:end="171:22">break;</break></block_content></block></if></if_stmt>

            <while pos:start="173:13" pos:end="175:39">while <condition pos:start="173:19" pos:end="173:28">(<expr pos:start="173:20" pos:end="173:27"><name pos:start="173:20" pos:end="173:25">length</name><operator pos:start="173:26" pos:end="173:27">--</operator></expr>)</condition><block type="pseudo" pos:start="175:17" pos:end="175:39"><block_content pos:start="175:17" pos:end="175:39">

                <expr_stmt pos:start="175:17" pos:end="175:39"><expr pos:start="175:17" pos:end="175:38"><operator pos:start="175:17" pos:end="175:17">*</operator><name pos:start="175:18" pos:end="175:20">dst</name><operator pos:start="175:21" pos:end="175:22">++</operator> <operator pos:start="175:24" pos:end="175:24">=</operator> <operator pos:start="175:26" pos:end="175:26">*</operator><name pos:start="175:27" pos:end="175:36">dst_offset</name><operator pos:start="175:37" pos:end="175:38">++</operator></expr>;</expr_stmt></block_content></block></while>

            <break pos:start="177:13" pos:end="177:18">break;</break>



        <case pos:start="181:9" pos:end="181:15">case <expr pos:start="181:14" pos:end="181:14"><literal type="number" pos:start="181:14" pos:end="181:14">2</literal></expr>:</case>                <comment type="line" pos:start="181:32" pos:end="181:43">//Skip Chain</comment>

            <expr_stmt pos:start="183:13" pos:end="183:26"><expr pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:15">dst</name> <operator pos:start="183:17" pos:end="183:18">+=</operator> <name pos:start="183:20" pos:end="183:25">length</name></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>



        <case pos:start="189:9" pos:end="189:15">case <expr pos:start="189:14" pos:end="189:14"><literal type="number" pos:start="189:14" pos:end="189:14">3</literal></expr>:</case>                <comment type="line" pos:start="189:32" pos:end="189:43">//Fill Chain</comment>

            <expr_stmt pos:start="191:13" pos:end="191:48"><expr pos:start="191:13" pos:end="191:47"><name pos:start="191:13" pos:end="191:19">colour1</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="191:47"><name pos:start="191:23" pos:end="191:41">bytestream_get_byte</name><argument_list pos:start="191:42" pos:end="191:47">(<argument pos:start="191:43" pos:end="191:46"><expr pos:start="191:43" pos:end="191:46"><operator pos:start="191:43" pos:end="191:43">&amp;</operator><name pos:start="191:44" pos:end="191:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:48"><expr pos:start="193:13" pos:end="193:47"><name pos:start="193:13" pos:end="193:19">colour2</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <call pos:start="193:23" pos:end="193:47"><name pos:start="193:23" pos:end="193:41">bytestream_get_byte</name><argument_list pos:start="193:42" pos:end="193:47">(<argument pos:start="193:43" pos:end="193:46"><expr pos:start="193:43" pos:end="193:46"><operator pos:start="193:43" pos:end="193:43">&amp;</operator><name pos:start="193:44" pos:end="193:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="195:13" pos:end="201:13">while <condition pos:start="195:19" pos:end="195:28">(<expr pos:start="195:20" pos:end="195:27"><name pos:start="195:20" pos:end="195:25">length</name><operator pos:start="195:26" pos:end="195:27">--</operator></expr>)</condition> <block pos:start="195:30" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:33">

                <expr_stmt pos:start="197:17" pos:end="197:33"><expr pos:start="197:17" pos:end="197:32"><operator pos:start="197:17" pos:end="197:17">*</operator><name pos:start="197:18" pos:end="197:20">dst</name><operator pos:start="197:21" pos:end="197:22">++</operator> <operator pos:start="197:24" pos:end="197:24">=</operator> <name pos:start="197:26" pos:end="197:32">colour1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:33"><expr pos:start="199:17" pos:end="199:32"><operator pos:start="199:17" pos:end="199:17">*</operator><name pos:start="199:18" pos:end="199:20">dst</name><operator pos:start="199:21" pos:end="199:22">++</operator> <operator pos:start="199:24" pos:end="199:24">=</operator> <name pos:start="199:26" pos:end="199:32">colour2</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <break pos:start="203:13" pos:end="203:18">break;</break>



        </block_content>}</block></switch>

    </block_content>}</block></while>



    <expr_stmt pos:start="213:5" pos:end="213:19"><expr pos:start="213:5" pos:end="213:18"><name pos:start="213:5" pos:end="213:7">src</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <name pos:start="213:11" pos:end="213:18"><name pos:start="213:11" pos:end="213:13">bfi</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:18">dst</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:29"><expr pos:start="215:5" pos:end="215:28"><name pos:start="215:5" pos:end="215:7">dst</name> <operator pos:start="215:9" pos:end="215:9">=</operator> <name pos:start="215:11" pos:end="215:28"><name pos:start="215:11" pos:end="215:13">bfi</name><operator pos:start="215:14" pos:end="215:15">-&gt;</operator><name pos:start="215:16" pos:end="215:20">frame</name><operator pos:start="215:21" pos:end="215:21">.</operator><name pos:start="215:22" pos:end="215:25">data</name><index pos:start="215:26" pos:end="215:28">[<expr pos:start="215:27" pos:end="215:27"><literal type="number" pos:start="215:27" pos:end="215:27">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <while pos:start="217:5" pos:end="225:5">while <condition pos:start="217:11" pos:end="217:20">(<expr pos:start="217:12" pos:end="217:19"><name pos:start="217:12" pos:end="217:17">height</name><operator pos:start="217:18" pos:end="217:19">--</operator></expr>)</condition> <block pos:start="217:22" pos:end="225:5">{<block_content pos:start="219:9" pos:end="223:38">

        <expr_stmt pos:start="219:9" pos:end="219:39"><expr pos:start="219:9" pos:end="219:38"><call pos:start="219:9" pos:end="219:38"><name pos:start="219:9" pos:end="219:14">memcpy</name><argument_list pos:start="219:15" pos:end="219:38">(<argument pos:start="219:16" pos:end="219:18"><expr pos:start="219:16" pos:end="219:18"><name pos:start="219:16" pos:end="219:18">dst</name></expr></argument>, <argument pos:start="219:21" pos:end="219:23"><expr pos:start="219:21" pos:end="219:23"><name pos:start="219:21" pos:end="219:23">src</name></expr></argument>, <argument pos:start="219:26" pos:end="219:37"><expr pos:start="219:26" pos:end="219:37"><name pos:start="219:26" pos:end="219:37"><name pos:start="219:26" pos:end="219:30">avctx</name><operator pos:start="219:31" pos:end="219:32">-&gt;</operator><name pos:start="219:33" pos:end="219:37">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:28"><expr pos:start="221:9" pos:end="221:27"><name pos:start="221:9" pos:end="221:11">src</name> <operator pos:start="221:13" pos:end="221:14">+=</operator> <name pos:start="221:16" pos:end="221:27"><name pos:start="221:16" pos:end="221:20">avctx</name><operator pos:start="221:21" pos:end="221:22">-&gt;</operator><name pos:start="221:23" pos:end="221:27">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:38"><expr pos:start="223:9" pos:end="223:37"><name pos:start="223:9" pos:end="223:11">dst</name> <operator pos:start="223:13" pos:end="223:14">+=</operator> <name pos:start="223:16" pos:end="223:37"><name pos:start="223:16" pos:end="223:18">bfi</name><operator pos:start="223:19" pos:end="223:20">-&gt;</operator><name pos:start="223:21" pos:end="223:25">frame</name><operator pos:start="223:26" pos:end="223:26">.</operator><name pos:start="223:27" pos:end="223:34">linesize</name><index pos:start="223:35" pos:end="223:37">[<expr pos:start="223:36" pos:end="223:36"><literal type="number" pos:start="223:36" pos:end="223:36">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="227:5" pos:end="227:33"><expr pos:start="227:5" pos:end="227:32"><operator pos:start="227:5" pos:end="227:5">*</operator><name pos:start="227:6" pos:end="227:14">data_size</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <sizeof pos:start="227:18" pos:end="227:32">sizeof<argument_list pos:start="227:24" pos:end="227:32">(<argument pos:start="227:25" pos:end="227:31"><expr pos:start="227:25" pos:end="227:31"><name pos:start="227:25" pos:end="227:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:35"><expr pos:start="229:5" pos:end="229:34"><operator pos:start="229:5" pos:end="229:5">*</operator><operator pos:start="229:6" pos:end="229:6">(</operator><name pos:start="229:7" pos:end="229:13">AVFrame</name> <operator pos:start="229:15" pos:end="229:15">*</operator><operator pos:start="229:16" pos:end="229:16">)</operator> <name pos:start="229:18" pos:end="229:21">data</name> <operator pos:start="229:23" pos:end="229:23">=</operator> <name pos:start="229:25" pos:end="229:34"><name pos:start="229:25" pos:end="229:27">bfi</name><operator pos:start="229:28" pos:end="229:29">-&gt;</operator><name pos:start="229:30" pos:end="229:34">frame</name></name></expr>;</expr_stmt>

    <return pos:start="231:5" pos:end="231:20">return <expr pos:start="231:12" pos:end="231:19"><name pos:start="231:12" pos:end="231:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
