<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26420.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">ioinst_handle_ssch</name><parameter_list pos:start="1:24" pos:end="1:66">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint64_t</name></type> <name pos:start="1:48" pos:end="1:51">reg1</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:65">ipb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:19">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">cssid</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">ssid</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">schid</name></decl>, <decl pos:start="5:29" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:29">m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SubchDev</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">sch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">ORB</name></type> <name pos:start="9:9" pos:end="9:16">orig_orb</name></decl>, <decl pos:start="9:19" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:21">orb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:21">= <expr pos:start="13:15" pos:end="13:21"><operator pos:start="13:15" pos:end="13:15">-</operator><name pos:start="13:16" pos:end="13:21">ENODEV</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">CPUS390XState</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:22">env</name> <init pos:start="17:24" pos:end="17:34">= <expr pos:start="17:26" pos:end="17:34"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:34"><name pos:start="17:27" pos:end="17:29">cpu</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:14">ar</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:8">addr</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:43"><name pos:start="23:12" pos:end="23:28">decode_basedisp_s</name><argument_list pos:start="23:29" pos:end="23:43">(<argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:32">env</name></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">ipb</name></expr></argument>, <argument pos:start="23:40" pos:end="23:42"><expr pos:start="23:40" pos:end="23:42"><operator pos:start="23:40" pos:end="23:40">&amp;</operator><name pos:start="23:41" pos:end="23:42">ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:12">addr</name> <operator pos:start="25:14" pos:end="25:14">&amp;</operator> <literal type="number" pos:start="25:16" pos:end="25:16">3</literal></expr>)</condition> <block pos:start="25:19" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:53"><expr pos:start="27:9" pos:end="27:52"><call pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:25">program_interrupt</name><argument_list pos:start="27:26" pos:end="27:52">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">env</name></expr></argument>, <argument pos:start="27:32" pos:end="27:48"><expr pos:start="27:32" pos:end="27:48"><name pos:start="27:32" pos:end="27:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="27:51" pos:end="27:51"><expr pos:start="27:51" pos:end="27:51"><literal type="number" pos:start="27:51" pos:end="27:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:70">(<expr pos:start="33:9" pos:end="33:69"><call pos:start="33:9" pos:end="33:69"><name pos:start="33:9" pos:end="33:30">s390_cpu_virt_mem_read</name><argument_list pos:start="33:31" pos:end="33:69">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">cpu</name></expr></argument>, <argument pos:start="33:37" pos:end="33:40"><expr pos:start="33:37" pos:end="33:40"><name pos:start="33:37" pos:end="33:40">addr</name></expr></argument>, <argument pos:start="33:43" pos:end="33:44"><expr pos:start="33:43" pos:end="33:44"><name pos:start="33:43" pos:end="33:44">ar</name></expr></argument>, <argument pos:start="33:47" pos:end="33:55"><expr pos:start="33:47" pos:end="33:55"><operator pos:start="33:47" pos:end="33:47">&amp;</operator><name pos:start="33:48" pos:end="33:55">orig_orb</name></expr></argument>, <argument pos:start="33:58" pos:end="33:68"><expr pos:start="33:58" pos:end="33:68"><sizeof pos:start="33:58" pos:end="33:68">sizeof<argument_list pos:start="33:64" pos:end="33:68">(<argument pos:start="33:65" pos:end="33:67"><expr pos:start="33:65" pos:end="33:67"><name pos:start="33:65" pos:end="33:67">orb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:72" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><call pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:23">copy_orb_from_guest</name><argument_list pos:start="39:24" pos:end="39:40">(<argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:28">orb</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><operator pos:start="39:31" pos:end="39:31">&amp;</operator><name pos:start="39:32" pos:end="39:39">orig_orb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="43:32">(<expr pos:start="41:9" pos:end="43:31"><call pos:start="41:9" pos:end="41:69"><name pos:start="41:9" pos:end="41:36">ioinst_disassemble_sch_ident</name><argument_list pos:start="41:37" pos:end="41:69">(<argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><name pos:start="41:38" pos:end="41:41">reg1</name></expr></argument>, <argument pos:start="41:44" pos:end="41:45"><expr pos:start="41:44" pos:end="41:45"><operator pos:start="41:44" pos:end="41:44">&amp;</operator><name pos:start="41:45" pos:end="41:45">m</name></expr></argument>, <argument pos:start="41:48" pos:end="41:53"><expr pos:start="41:48" pos:end="41:53"><operator pos:start="41:48" pos:end="41:48">&amp;</operator><name pos:start="41:49" pos:end="41:53">cssid</name></expr></argument>, <argument pos:start="41:56" pos:end="41:60"><expr pos:start="41:56" pos:end="41:60"><operator pos:start="41:56" pos:end="41:56">&amp;</operator><name pos:start="41:57" pos:end="41:60">ssid</name></expr></argument>, <argument pos:start="41:63" pos:end="41:68"><expr pos:start="41:63" pos:end="41:68"><operator pos:start="41:63" pos:end="41:63">&amp;</operator><name pos:start="41:64" pos:end="41:68">schid</name></expr></argument>)</argument_list></call> <operator pos:start="41:71" pos:end="41:72">||</operator>

        <operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:31"><name pos:start="43:10" pos:end="43:25">ioinst_orb_valid</name><argument_list pos:start="43:26" pos:end="43:31">(<argument pos:start="43:27" pos:end="43:30"><expr pos:start="43:27" pos:end="43:30"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:30">orb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:34" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:47"><expr pos:start="45:9" pos:end="45:46"><call pos:start="45:9" pos:end="45:46"><name pos:start="45:9" pos:end="45:25">program_interrupt</name><argument_list pos:start="45:26" pos:end="45:46">(<argument pos:start="45:27" pos:end="45:29"><expr pos:start="45:27" pos:end="45:29"><name pos:start="45:27" pos:end="45:29">env</name></expr></argument>, <argument pos:start="45:32" pos:end="45:42"><expr pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:42">PGM_OPERAND</name></expr></argument>, <argument pos:start="45:45" pos:end="45:45"><expr pos:start="45:45" pos:end="45:45"><literal type="number" pos:start="45:45" pos:end="45:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:23">trace_ioinst_sch_id</name><argument_list pos:start="51:24" pos:end="51:51">(<argument pos:start="51:25" pos:end="51:30"><expr pos:start="51:25" pos:end="51:30"><literal type="string" pos:start="51:25" pos:end="51:30">"ssch"</literal></expr></argument>, <argument pos:start="51:33" pos:end="51:37"><expr pos:start="51:33" pos:end="51:37"><name pos:start="51:33" pos:end="51:37">cssid</name></expr></argument>, <argument pos:start="51:40" pos:end="51:43"><expr pos:start="51:40" pos:end="51:43"><name pos:start="51:40" pos:end="51:43">ssid</name></expr></argument>, <argument pos:start="51:46" pos:end="51:50"><expr pos:start="51:46" pos:end="51:50"><name pos:start="51:46" pos:end="51:50">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:7">sch</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:47"><name pos:start="53:11" pos:end="53:24">css_find_subch</name><argument_list pos:start="53:25" pos:end="53:47">(<argument pos:start="53:26" pos:end="53:26"><expr pos:start="53:26" pos:end="53:26"><name pos:start="53:26" pos:end="53:26">m</name></expr></argument>, <argument pos:start="53:29" pos:end="53:33"><expr pos:start="53:29" pos:end="53:33"><name pos:start="53:29" pos:end="53:33">cssid</name></expr></argument>, <argument pos:start="53:36" pos:end="53:39"><expr pos:start="53:36" pos:end="53:39"><name pos:start="53:36" pos:end="53:39">ssid</name></expr></argument>, <argument pos:start="53:42" pos:end="53:46"><expr pos:start="53:42" pos:end="53:46"><name pos:start="53:42" pos:end="53:46">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:38">(<expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:11">sch</name> <operator pos:start="55:13" pos:end="55:14">&amp;&amp;</operator> <call pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:32">css_subch_visible</name><argument_list pos:start="55:33" pos:end="55:37">(<argument pos:start="55:34" pos:end="55:36"><expr pos:start="55:34" pos:end="55:36"><name pos:start="55:34" pos:end="55:36">sch</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:40" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:37">

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:36"><name pos:start="57:15" pos:end="57:25">css_do_ssch</name><argument_list pos:start="57:26" pos:end="57:36">(<argument pos:start="57:27" pos:end="57:29"><expr pos:start="57:27" pos:end="57:29"><name pos:start="57:27" pos:end="57:29">sch</name></expr></argument>, <argument pos:start="57:32" pos:end="57:35"><expr pos:start="57:32" pos:end="57:35"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:35">orb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="61:5" pos:end="105:5">switch <condition pos:start="61:12" pos:end="61:16">(<expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">ret</name></expr>)</condition> <block pos:start="61:18" pos:end="105:5">{<block_content pos:start="63:5" pos:end="103:14">

    <case pos:start="63:5" pos:end="63:17">case <expr pos:start="63:10" pos:end="63:16"><operator pos:start="63:10" pos:end="63:10">-</operator><name pos:start="63:11" pos:end="63:16">ENODEV</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:15"><expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:10">cc</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">3</literal></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:16">case <expr pos:start="69:10" pos:end="69:15"><operator pos:start="69:10" pos:end="69:10">-</operator><name pos:start="69:11" pos:end="69:15">EBUSY</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:15"><expr pos:start="71:9" pos:end="71:14"><name pos:start="71:9" pos:end="71:10">cc</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <literal type="number" pos:start="71:14" pos:end="71:14">2</literal></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:17">case <expr pos:start="75:10" pos:end="75:16"><operator pos:start="75:10" pos:end="75:10">-</operator><name pos:start="75:11" pos:end="75:16">EFAULT</name></expr>:</case>

        <comment type="block" pos:start="77:9" pos:end="87:11">/*

         * TODO:

         * I'm wondering whether there is something better

         * to do for us here (like setting some device or

         * subchannel status).

         */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:50"><expr pos:start="89:9" pos:end="89:49"><call pos:start="89:9" pos:end="89:49"><name pos:start="89:9" pos:end="89:25">program_interrupt</name><argument_list pos:start="89:26" pos:end="89:49">(<argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><name pos:start="89:27" pos:end="89:29">env</name></expr></argument>, <argument pos:start="89:32" pos:end="89:45"><expr pos:start="89:32" pos:end="89:45"><name pos:start="89:32" pos:end="89:45">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="89:48" pos:end="89:48"><expr pos:start="89:48" pos:end="89:48"><literal type="number" pos:start="89:48" pos:end="89:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:15">return;</return>

    <case pos:start="93:5" pos:end="93:11">case <expr pos:start="93:10" pos:end="93:10"><literal type="number" pos:start="93:10" pos:end="93:10">0</literal></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:15"><expr pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:10">cc</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <default pos:start="99:5" pos:end="99:12">default:</default>

        <expr_stmt pos:start="101:9" pos:end="101:15"><expr pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:10">cc</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <literal type="number" pos:start="101:14" pos:end="101:14">1</literal></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="107:5" pos:end="107:19"><expr pos:start="107:5" pos:end="107:18"><call pos:start="107:5" pos:end="107:18"><name pos:start="107:5" pos:end="107:9">setcc</name><argument_list pos:start="107:10" pos:end="107:18">(<argument pos:start="107:11" pos:end="107:13"><expr pos:start="107:11" pos:end="107:13"><name pos:start="107:11" pos:end="107:13">cpu</name></expr></argument>, <argument pos:start="107:16" pos:end="107:17"><expr pos:start="107:16" pos:end="107:17"><name pos:start="107:16" pos:end="107:17">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
