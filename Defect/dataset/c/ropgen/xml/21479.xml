<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21479.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">xen_set_memory</name><parameter_list pos:start="1:27" pos:end="5:36">(<parameter pos:start="1:28" pos:end="1:58"><decl pos:start="1:28" pos:end="1:58"><type pos:start="1:28" pos:end="1:58"><name pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:48">MemoryListener</name></name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:58">listener</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:55"><decl pos:start="3:28" pos:end="3:55"><type pos:start="3:28" pos:end="3:55"><name pos:start="3:28" pos:end="3:46">MemoryRegionSection</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:55">section</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:35"><decl pos:start="5:28" pos:end="5:35"><type pos:start="5:28" pos:end="5:35"><name pos:start="5:28" pos:end="5:31">bool</name></type> <name pos:start="5:33" pos:end="5:35">add</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="107:1">{<block_content pos:start="9:5" pos:end="105:5">

    <decl_stmt pos:start="9:5" pos:end="9:76"><decl pos:start="9:5" pos:end="9:75"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">XenIOState</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:21">state</name> <init pos:start="9:23" pos:end="9:75">= <expr pos:start="9:25" pos:end="9:75"><call pos:start="9:25" pos:end="9:75"><name pos:start="9:25" pos:end="9:36">container_of</name><argument_list pos:start="9:37" pos:end="9:75">(<argument pos:start="9:38" pos:end="9:45"><expr pos:start="9:38" pos:end="9:45"><name pos:start="9:38" pos:end="9:45">listener</name></expr></argument>, <argument pos:start="9:48" pos:end="9:57"><expr pos:start="9:48" pos:end="9:57"><name pos:start="9:48" pos:end="9:57">XenIOState</name></expr></argument>, <argument pos:start="9:60" pos:end="9:74"><expr pos:start="9:60" pos:end="9:74"><name pos:start="9:60" pos:end="9:74">memory_listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:61"><decl pos:start="11:5" pos:end="11:60"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:21">start_addr</name> <init pos:start="11:23" pos:end="11:60">= <expr pos:start="11:25" pos:end="11:60"><name pos:start="11:25" pos:end="11:60"><name pos:start="11:25" pos:end="11:31">section</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:60">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:19">size</name> <init pos:start="13:21" pos:end="13:49">= <expr pos:start="13:23" pos:end="13:49"><call pos:start="13:23" pos:end="13:49"><name pos:start="13:23" pos:end="13:34">int128_get64</name><argument_list pos:start="13:35" pos:end="13:49">(<argument pos:start="13:36" pos:end="13:48"><expr pos:start="13:36" pos:end="13:48"><name pos:start="13:36" pos:end="13:48"><name pos:start="13:36" pos:end="13:42">section</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:18">log_dirty</name> <init pos:start="15:20" pos:end="15:58">= <expr pos:start="15:22" pos:end="15:58"><call pos:start="15:22" pos:end="15:58"><name pos:start="15:22" pos:end="15:45">memory_region_is_logging</name><argument_list pos:start="15:46" pos:end="15:58">(<argument pos:start="15:47" pos:end="15:57"><expr pos:start="15:47" pos:end="15:57"><name pos:start="15:47" pos:end="15:57"><name pos:start="15:47" pos:end="15:53">section</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:57">mr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">hvmmem_type_t</name></type> <name pos:start="17:19" pos:end="17:26">mem_type</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="41:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:35">(<expr pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:15">section</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:19">mr</name></name> <operator pos:start="21:21" pos:end="21:22">==</operator> <operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:34">ram_memory</name></expr>)</condition> <block pos:start="21:37" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="41:5">else <block pos:start="25:12" pos:end="41:5">{<block_content pos:start="27:9" pos:end="39:9">

        <if_stmt pos:start="27:9" pos:end="39:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:16">(<expr pos:start="27:13" pos:end="27:15"><name pos:start="27:13" pos:end="27:15">add</name></expr>)</condition> <block pos:start="27:18" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:44">

            <expr_stmt pos:start="29:13" pos:end="31:44"><expr pos:start="29:13" pos:end="31:43"><call pos:start="29:13" pos:end="31:43"><name pos:start="29:13" pos:end="29:34">xen_map_memory_section</name><argument_list pos:start="29:35" pos:end="31:43">(<argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><name pos:start="29:36" pos:end="29:41">xen_xc</name></expr></argument>, <argument pos:start="29:44" pos:end="29:52"><expr pos:start="29:44" pos:end="29:52"><name pos:start="29:44" pos:end="29:52">xen_domid</name></expr></argument>, <argument pos:start="29:55" pos:end="29:69"><expr pos:start="29:55" pos:end="29:69"><name pos:start="29:55" pos:end="29:69"><name pos:start="29:55" pos:end="29:59">state</name><operator pos:start="29:60" pos:end="29:61">-&gt;</operator><name pos:start="29:62" pos:end="29:69">ioservid</name></name></expr></argument>,

                                   <argument pos:start="31:36" pos:end="31:42"><expr pos:start="31:36" pos:end="31:42"><name pos:start="31:36" pos:end="31:42">section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="39:9">else <block pos:start="33:16" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:46">

            <expr_stmt pos:start="35:13" pos:end="37:46"><expr pos:start="35:13" pos:end="37:45"><call pos:start="35:13" pos:end="37:45"><name pos:start="35:13" pos:end="35:36">xen_unmap_memory_section</name><argument_list pos:start="35:37" pos:end="37:45">(<argument pos:start="35:38" pos:end="35:43"><expr pos:start="35:38" pos:end="35:43"><name pos:start="35:38" pos:end="35:43">xen_xc</name></expr></argument>, <argument pos:start="35:46" pos:end="35:54"><expr pos:start="35:46" pos:end="35:54"><name pos:start="35:46" pos:end="35:54">xen_domid</name></expr></argument>, <argument pos:start="35:57" pos:end="35:71"><expr pos:start="35:57" pos:end="35:71"><name pos:start="35:57" pos:end="35:71"><name pos:start="35:57" pos:end="35:61">state</name><operator pos:start="35:62" pos:end="35:63">-&gt;</operator><name pos:start="35:64" pos:end="35:71">ioservid</name></name></expr></argument>,

                                     <argument pos:start="37:38" pos:end="37:44"><expr pos:start="37:38" pos:end="37:44"><name pos:start="37:38" pos:end="37:44">section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:43">(<expr pos:start="45:9" pos:end="45:42"><operator pos:start="45:9" pos:end="45:9">!</operator><call pos:start="45:10" pos:end="45:42"><name pos:start="45:10" pos:end="45:29">memory_region_is_ram</name><argument_list pos:start="45:30" pos:end="45:42">(<argument pos:start="45:31" pos:end="45:41"><expr pos:start="45:31" pos:end="45:41"><name pos:start="45:31" pos:end="45:41"><name pos:start="45:31" pos:end="45:37">section</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:41">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:45" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:15">

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:17">log_dirty</name> <operator pos:start="53:19" pos:end="53:20">!=</operator> <name pos:start="53:22" pos:end="53:24">add</name></expr>)</condition> <block pos:start="53:27" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:15">

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:61"><expr pos:start="61:5" pos:end="61:60"><call pos:start="61:5" pos:end="61:60"><name pos:start="61:5" pos:end="61:31">trace_xen_client_set_memory</name><argument_list pos:start="61:32" pos:end="61:60">(<argument pos:start="61:33" pos:end="61:42"><expr pos:start="61:33" pos:end="61:42"><name pos:start="61:33" pos:end="61:42">start_addr</name></expr></argument>, <argument pos:start="61:45" pos:end="61:48"><expr pos:start="61:45" pos:end="61:48"><name pos:start="61:45" pos:end="61:48">size</name></expr></argument>, <argument pos:start="61:51" pos:end="61:59"><expr pos:start="61:51" pos:end="61:59"><name pos:start="61:51" pos:end="61:59">log_dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:14">start_addr</name> <operator pos:start="65:16" pos:end="65:17">&amp;=</operator> <name pos:start="65:19" pos:end="65:34">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:8">size</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <call pos:start="67:12" pos:end="67:34"><name pos:start="67:12" pos:end="67:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="67:29" pos:end="67:34">(<argument pos:start="67:30" pos:end="67:33"><expr pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="105:5"><if pos:start="71:5" pos:end="97:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">add</name></expr>)</condition> <block pos:start="71:14" pos:end="97:5">{<block_content pos:start="73:9" pos:end="95:9">

        <if_stmt pos:start="73:9" pos:end="95:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:47">(<expr pos:start="73:13" pos:end="73:46"><operator pos:start="73:13" pos:end="73:13">!</operator><call pos:start="73:14" pos:end="73:46"><name pos:start="73:14" pos:end="73:33">memory_region_is_rom</name><argument_list pos:start="73:34" pos:end="73:46">(<argument pos:start="73:35" pos:end="73:45"><expr pos:start="73:35" pos:end="73:45"><name pos:start="73:35" pos:end="73:45"><name pos:start="73:35" pos:end="73:41">section</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:45">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:49" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:75">

            <expr_stmt pos:start="75:13" pos:end="77:75"><expr pos:start="75:13" pos:end="77:74"><call pos:start="75:13" pos:end="77:74"><name pos:start="75:13" pos:end="75:30">xen_add_to_physmap</name><argument_list pos:start="75:31" pos:end="77:74">(<argument pos:start="75:32" pos:end="75:36"><expr pos:start="75:32" pos:end="75:36"><name pos:start="75:32" pos:end="75:36">state</name></expr></argument>, <argument pos:start="75:39" pos:end="75:48"><expr pos:start="75:39" pos:end="75:48"><name pos:start="75:39" pos:end="75:48">start_addr</name></expr></argument>, <argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">size</name></expr></argument>,

                               <argument pos:start="77:32" pos:end="77:42"><expr pos:start="77:32" pos:end="77:42"><name pos:start="77:32" pos:end="77:42"><name pos:start="77:32" pos:end="77:38">section</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:42">mr</name></name></expr></argument>, <argument pos:start="77:45" pos:end="77:73"><expr pos:start="77:45" pos:end="77:73"><name pos:start="77:45" pos:end="77:73"><name pos:start="77:45" pos:end="77:51">section</name><operator pos:start="77:52" pos:end="77:53">-&gt;</operator><name pos:start="77:54" pos:end="77:73">offset_within_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="95:9">else <block pos:start="79:16" pos:end="95:9">{<block_content pos:start="81:13" pos:end="93:13">

            <expr_stmt pos:start="81:13" pos:end="81:37"><expr pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:20">mem_type</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:36">HVMMEM_ram_ro</name></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="93:13"><if pos:start="83:13" pos:end="93:13">if <condition pos:start="83:16" pos:end="87:62">(<expr pos:start="83:17" pos:end="87:61"><call pos:start="83:17" pos:end="87:61"><name pos:start="83:17" pos:end="83:35">xc_hvm_set_mem_type</name><argument_list pos:start="83:36" pos:end="87:61">(<argument pos:start="83:37" pos:end="83:42"><expr pos:start="83:37" pos:end="83:42"><name pos:start="83:37" pos:end="83:42">xen_xc</name></expr></argument>, <argument pos:start="83:45" pos:end="83:53"><expr pos:start="83:45" pos:end="83:53"><name pos:start="83:45" pos:end="83:53">xen_domid</name></expr></argument>, <argument pos:start="83:56" pos:end="83:63"><expr pos:start="83:56" pos:end="83:63"><name pos:start="83:56" pos:end="83:63">mem_type</name></expr></argument>,

                                    <argument pos:start="85:37" pos:end="85:66"><expr pos:start="85:37" pos:end="85:66"><name pos:start="85:37" pos:end="85:46">start_addr</name> <operator pos:start="85:48" pos:end="85:49">&gt;&gt;</operator> <name pos:start="85:51" pos:end="85:66">TARGET_PAGE_BITS</name></expr></argument>,

                                    <argument pos:start="87:37" pos:end="87:60"><expr pos:start="87:37" pos:end="87:60"><name pos:start="87:37" pos:end="87:40">size</name> <operator pos:start="87:42" pos:end="87:43">&gt;&gt;</operator> <name pos:start="87:45" pos:end="87:60">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:64" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:36">

                <expr_stmt pos:start="89:17" pos:end="91:36"><expr pos:start="89:17" pos:end="91:35"><call pos:start="89:17" pos:end="91:35"><name pos:start="89:17" pos:end="89:23">DPRINTF</name><argument_list pos:start="89:24" pos:end="91:35">(<argument pos:start="89:25" pos:end="89:77"><expr pos:start="89:25" pos:end="89:77"><literal type="string" pos:start="89:25" pos:end="89:59">"xc_hvm_set_mem_type error, addr: "</literal><name pos:start="89:60" pos:end="89:73">TARGET_FMT_plx</name><literal type="string" pos:start="89:74" pos:end="89:77">"\n"</literal></expr></argument>,

                        <argument pos:start="91:25" pos:end="91:34"><expr pos:start="91:25" pos:end="91:34"><name pos:start="91:25" pos:end="91:34">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="105:5">else <block pos:start="97:12" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:9">

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:65">(<expr pos:start="99:13" pos:end="99:64"><call pos:start="99:13" pos:end="99:60"><name pos:start="99:13" pos:end="99:35">xen_remove_from_physmap</name><argument_list pos:start="99:36" pos:end="99:60">(<argument pos:start="99:37" pos:end="99:41"><expr pos:start="99:37" pos:end="99:41"><name pos:start="99:37" pos:end="99:41">state</name></expr></argument>, <argument pos:start="99:44" pos:end="99:53"><expr pos:start="99:44" pos:end="99:53"><name pos:start="99:44" pos:end="99:53">start_addr</name></expr></argument>, <argument pos:start="99:56" pos:end="99:59"><expr pos:start="99:56" pos:end="99:59"><name pos:start="99:56" pos:end="99:59">size</name></expr></argument>)</argument_list></call> <operator pos:start="99:62" pos:end="99:62">&lt;</operator> <literal type="number" pos:start="99:64" pos:end="99:64">0</literal></expr>)</condition> <block pos:start="99:67" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:84">

            <expr_stmt pos:start="101:13" pos:end="101:84"><expr pos:start="101:13" pos:end="101:83"><call pos:start="101:13" pos:end="101:83"><name pos:start="101:13" pos:end="101:19">DPRINTF</name><argument_list pos:start="101:20" pos:end="101:83">(<argument pos:start="101:21" pos:end="101:70"><expr pos:start="101:21" pos:end="101:70"><literal type="string" pos:start="101:21" pos:end="101:52">"physmapping does not exist at "</literal><name pos:start="101:53" pos:end="101:66">TARGET_FMT_plx</name><literal type="string" pos:start="101:67" pos:end="101:70">"\n"</literal></expr></argument>, <argument pos:start="101:73" pos:end="101:82"><expr pos:start="101:73" pos:end="101:82"><name pos:start="101:73" pos:end="101:82">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
