<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8305.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:29">ufd_version_check</name><parameter_list pos:start="1:30" pos:end="1:38">(<parameter pos:start="1:31" pos:end="1:37"><decl pos:start="1:31" pos:end="1:37"><type pos:start="1:31" pos:end="1:33"><name pos:start="1:31" pos:end="1:33">int</name></type> <name pos:start="1:35" pos:end="1:37">ufd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:16">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:21">uffdio_api</name></name></type> <name pos:start="5:23" pos:end="5:32">api_struct</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:23">ioctl_mask</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:30"><expr pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:14">api_struct</name><operator pos:start="11:15" pos:end="11:15">.</operator><name pos:start="11:16" pos:end="11:18">api</name></name> <operator pos:start="11:20" pos:end="11:20">=</operator> <name pos:start="11:22" pos:end="11:29">UFFD_API</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:14">api_struct</name><operator pos:start="13:15" pos:end="13:15">.</operator><name pos:start="13:16" pos:end="13:23">features</name></name> <operator pos:start="13:25" pos:end="13:25">=</operator> <literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:44">(<expr pos:start="15:9" pos:end="15:43"><call pos:start="15:9" pos:end="15:43"><name pos:start="15:9" pos:end="15:13">ioctl</name><argument_list pos:start="15:14" pos:end="15:43">(<argument pos:start="15:15" pos:end="15:17"><expr pos:start="15:15" pos:end="15:17"><name pos:start="15:15" pos:end="15:17">ufd</name></expr></argument>, <argument pos:start="15:20" pos:end="15:29"><expr pos:start="15:20" pos:end="15:29"><name pos:start="15:20" pos:end="15:29">UFFDIO_API</name></expr></argument>, <argument pos:start="15:32" pos:end="15:42"><expr pos:start="15:32" pos:end="15:42"><operator pos:start="15:32" pos:end="15:32">&amp;</operator><name pos:start="15:33" pos:end="15:42">api_struct</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:46" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:21">

        <expr_stmt pos:start="17:9" pos:end="19:38"><expr pos:start="17:9" pos:end="19:37"><call pos:start="17:9" pos:end="19:37"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="19:37">(<argument pos:start="17:22" pos:end="17:76"><expr pos:start="17:22" pos:end="17:76"><literal type="string" pos:start="17:22" pos:end="17:76">"postcopy_ram_supported_by_host: UFFDIO_API failed: %s"</literal></expr></argument>,

                     <argument pos:start="19:22" pos:end="19:36"><expr pos:start="19:22" pos:end="19:36"><call pos:start="19:22" pos:end="19:36"><name pos:start="19:22" pos:end="19:29">strerror</name><argument_list pos:start="19:30" pos:end="19:36">(<argument pos:start="19:31" pos:end="19:35"><expr pos:start="19:31" pos:end="19:35"><name pos:start="19:31" pos:end="19:35">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:21">return <expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:48"><expr pos:start="27:5" pos:end="29:47"><name pos:start="27:5" pos:end="27:14">ioctl_mask</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <operator pos:start="27:18" pos:end="27:18">(</operator><name pos:start="27:19" pos:end="27:23">__u64</name><operator pos:start="27:24" pos:end="27:24">)</operator><literal type="number" pos:start="27:25" pos:end="27:25">1</literal> <operator pos:start="27:27" pos:end="27:28">&lt;&lt;</operator> <name pos:start="27:30" pos:end="27:45">_UFFDIO_REGISTER</name> <operator pos:start="27:47" pos:end="27:47">|</operator>

                 <operator pos:start="29:18" pos:end="29:18">(</operator><name pos:start="29:19" pos:end="29:23">__u64</name><operator pos:start="29:24" pos:end="29:24">)</operator><literal type="number" pos:start="29:25" pos:end="29:25">1</literal> <operator pos:start="29:27" pos:end="29:28">&lt;&lt;</operator> <name pos:start="29:30" pos:end="29:47">_UFFDIO_UNREGISTER</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:55">(<expr pos:start="31:9" pos:end="31:54"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:19">api_struct</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:26">ioctls</name></name> <operator pos:start="31:28" pos:end="31:28">&amp;</operator> <name pos:start="31:30" pos:end="31:39">ioctl_mask</name><operator pos:start="31:40" pos:end="31:40">)</operator> <operator pos:start="31:42" pos:end="31:43">!=</operator> <name pos:start="31:45" pos:end="31:54">ioctl_mask</name></expr>)</condition> <block pos:start="31:57" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:21">

        <expr_stmt pos:start="33:9" pos:end="35:66"><expr pos:start="33:9" pos:end="35:65"><call pos:start="33:9" pos:end="35:65"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="35:65">(<argument pos:start="33:22" pos:end="33:59"><expr pos:start="33:22" pos:end="33:59"><literal type="string" pos:start="33:22" pos:end="33:52">"Missing userfault features: %"</literal> <name pos:start="33:54" pos:end="33:59">PRIx64</name></expr></argument>,

                     <argument pos:start="35:22" pos:end="35:64"><expr pos:start="35:22" pos:end="35:64"><operator pos:start="35:22" pos:end="35:22">(</operator><name pos:start="35:23" pos:end="35:30">uint64_t</name><operator pos:start="35:31" pos:end="35:31">)</operator><operator pos:start="35:32" pos:end="35:32">(</operator><operator pos:start="35:33" pos:end="35:33">~</operator><name pos:start="35:34" pos:end="35:50"><name pos:start="35:34" pos:end="35:43">api_struct</name><operator pos:start="35:44" pos:end="35:44">.</operator><name pos:start="35:45" pos:end="35:50">ioctls</name></name> <operator pos:start="35:52" pos:end="35:52">&amp;</operator> <name pos:start="35:54" pos:end="35:63">ioctl_mask</name><operator pos:start="35:64" pos:end="35:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:21">return <expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="63:5"><if pos:start="43:5" pos:end="63:5">if <condition pos:start="43:8" pos:end="43:48">(<expr pos:start="43:9" pos:end="43:47"><call pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:19">getpagesize</name><argument_list pos:start="43:20" pos:end="43:21">()</argument_list></call> <operator pos:start="43:23" pos:end="43:24">!=</operator> <call pos:start="43:26" pos:end="43:47"><name pos:start="43:26" pos:end="43:45">ram_pagesize_summary</name><argument_list pos:start="43:46" pos:end="43:47">()</argument_list></call></expr>)</condition> <block pos:start="43:50" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:9">

        <decl_stmt pos:start="45:9" pos:end="50:0"><decl pos:start="45:9" pos:end="45:28"><type pos:start="45:9" pos:end="45:12"><name pos:start="45:9" pos:end="45:12">bool</name></type> <name pos:start="45:14" pos:end="45:20">have_hp</name> <init pos:start="45:22" pos:end="45:28">= <expr pos:start="45:24" pos:end="45:28"><name pos:start="45:24" pos:end="45:28">false</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:35">/* We've got a huge page */</comment>

<cpp:ifdef pos:start="49:1" pos:end="49:37">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:37">UFFD_FEATURE_MISSING_HUGETLBFS</name></cpp:ifdef>

        <expr_stmt pos:start="51:9" pos:end="54:0"><expr pos:start="51:9" pos:end="51:70"><name pos:start="51:9" pos:end="51:15">have_hp</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:37"><name pos:start="51:19" pos:end="51:28">api_struct</name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:37">features</name></name> <operator pos:start="51:39" pos:end="51:39">&amp;</operator> <name pos:start="51:41" pos:end="51:70">UFFD_FEATURE_MISSING_HUGETLBFS</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:21">(<expr pos:start="55:13" pos:end="55:20"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:20">have_hp</name></expr>)</condition> <block pos:start="55:23" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:25">

            <expr_stmt pos:start="57:13" pos:end="57:79"><expr pos:start="57:13" pos:end="57:78"><call pos:start="57:13" pos:end="57:78"><name pos:start="57:13" pos:end="57:24">error_report</name><argument_list pos:start="57:25" pos:end="57:78">(<argument pos:start="57:26" pos:end="57:77"><expr pos:start="57:26" pos:end="57:77"><literal type="string" pos:start="57:26" pos:end="57:77">"Userfault on this host does not support huge pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:25">return <expr pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:16">return <expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
