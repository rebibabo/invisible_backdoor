<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5148.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:62"><name pos:start="1:1" pos:end="1:26">qcow_co_pwritev_compressed</name><argument_list pos:start="1:27" pos:end="3:62">(<argument pos:start="1:28" pos:end="1:47">BlockDriverState *bs</argument>, <argument pos:start="1:50" pos:end="1:64">uint64_t offset</argument>,

                           <argument pos:start="3:28" pos:end="3:41">uint64_t bytes</argument>, <argument pos:start="3:44" pos:end="3:61">QEMUIOVector *qiov</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="169:1">{<block_content pos:start="7:5" pos:end="167:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">QEMUIOVector</name></type> <name pos:start="9:18" pos:end="9:24">hd_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:16">iovec</name></name></type> <name pos:start="11:18" pos:end="11:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">z_stream</name></type> <name pos:start="13:14" pos:end="13:17">strm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:20">out_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">buf</name></decl>, <decl pos:start="17:19" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:13"><modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:26">out_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:27">cluster_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:7">buf</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:46"><name pos:start="23:11" pos:end="23:25">qemu_blockalign</name><argument_list pos:start="23:26" pos:end="23:46">(<argument pos:start="23:27" pos:end="23:28"><expr pos:start="23:27" pos:end="23:28"><name pos:start="23:27" pos:end="23:28">bs</name></expr></argument>, <argument pos:start="23:31" pos:end="23:45"><expr pos:start="23:31" pos:end="23:45"><name pos:start="23:31" pos:end="23:45"><name pos:start="23:31" pos:end="23:31">s</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:45">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="43:5"><if pos:start="25:5" pos:end="43:5">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:13">bytes</name> <operator pos:start="25:15" pos:end="25:16">!=</operator> <name pos:start="25:18" pos:end="25:32"><name pos:start="25:18" pos:end="25:18">s</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:32">cluster_size</name></name></expr>)</condition> <block pos:start="25:35" pos:end="43:5">{<block_content pos:start="27:9" pos:end="41:56">

        <if_stmt pos:start="27:9" pos:end="37:9"><if pos:start="27:9" pos:end="37:9">if <condition pos:start="27:12" pos:end="29:68">(<expr pos:start="27:13" pos:end="29:67"><name pos:start="27:13" pos:end="27:17">bytes</name> <operator pos:start="27:19" pos:end="27:19">&gt;</operator> <name pos:start="27:21" pos:end="27:35"><name pos:start="27:21" pos:end="27:21">s</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:35">cluster_size</name></name> <operator pos:start="27:37" pos:end="27:38">||</operator>

            <name pos:start="29:13" pos:end="29:18">offset</name> <operator pos:start="29:20" pos:end="29:20">+</operator> <name pos:start="29:22" pos:end="29:26">bytes</name> <operator pos:start="29:28" pos:end="29:29">!=</operator> <name pos:start="29:31" pos:end="29:47"><name pos:start="29:31" pos:end="29:32">bs</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:47">total_sectors</name></name> <operator pos:start="29:49" pos:end="29:50">&lt;&lt;</operator> <name pos:start="29:52" pos:end="29:67">BDRV_SECTOR_BITS</name></expr>)</condition>

        <block pos:start="31:9" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:27">

            <expr_stmt pos:start="33:13" pos:end="33:28"><expr pos:start="33:13" pos:end="33:27"><call pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:22">qemu_vfree</name><argument_list pos:start="33:23" pos:end="33:27">(<argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:27">return <expr pos:start="35:20" pos:end="35:26"><operator pos:start="35:20" pos:end="35:20">-</operator><name pos:start="35:21" pos:end="35:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="39:9" pos:end="39:70">/* Zero-pad last write if image size is not cluster aligned */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:56"><expr pos:start="41:9" pos:end="41:55"><call pos:start="41:9" pos:end="41:55"><name pos:start="41:9" pos:end="41:14">memset</name><argument_list pos:start="41:15" pos:end="41:55">(<argument pos:start="41:16" pos:end="41:26"><expr pos:start="41:16" pos:end="41:26"><name pos:start="41:16" pos:end="41:18">buf</name> <operator pos:start="41:20" pos:end="41:20">+</operator> <name pos:start="41:22" pos:end="41:26">bytes</name></expr></argument>, <argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:54"><expr pos:start="41:32" pos:end="41:54"><name pos:start="41:32" pos:end="41:46"><name pos:start="41:32" pos:end="41:32">s</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:46">cluster_size</name></name> <operator pos:start="41:48" pos:end="41:48">-</operator> <name pos:start="41:50" pos:end="41:54">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><call pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:21">qemu_iovec_to_buf</name><argument_list pos:start="45:22" pos:end="45:47">(<argument pos:start="45:23" pos:end="45:26"><expr pos:start="45:23" pos:end="45:26"><name pos:start="45:23" pos:end="45:26">qiov</name></expr></argument>, <argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr></argument>, <argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">buf</name></expr></argument>, <argument pos:start="45:37" pos:end="45:46"><expr pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:46"><name pos:start="45:37" pos:end="45:40">qiov</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:46">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:40"><expr pos:start="49:5" pos:end="49:39"><name pos:start="49:5" pos:end="49:11">out_buf</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:39"><name pos:start="49:15" pos:end="49:22">g_malloc</name><argument_list pos:start="49:23" pos:end="49:39">(<argument pos:start="49:24" pos:end="49:38"><expr pos:start="49:24" pos:end="49:38"><name pos:start="49:24" pos:end="49:38"><name pos:start="49:24" pos:end="49:24">s</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:38">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:56">/* best compression, small window, no zlib header */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:35"><expr pos:start="55:5" pos:end="55:34"><call pos:start="55:5" pos:end="55:34"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:34">(<argument pos:start="55:12" pos:end="55:16"><expr pos:start="55:12" pos:end="55:16"><operator pos:start="55:12" pos:end="55:12">&amp;</operator><name pos:start="55:13" pos:end="55:16">strm</name></expr></argument>, <argument pos:start="55:19" pos:end="55:19"><expr pos:start="55:19" pos:end="55:19"><literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr></argument>, <argument pos:start="55:22" pos:end="55:33"><expr pos:start="55:22" pos:end="55:33"><sizeof pos:start="55:22" pos:end="55:33">sizeof<argument_list pos:start="55:28" pos:end="55:33">(<argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">strm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="61:46"><expr pos:start="57:5" pos:end="61:45"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="61:45"><name pos:start="57:11" pos:end="57:22">deflateInit2</name><argument_list pos:start="57:23" pos:end="61:45">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:28">strm</name></expr></argument>, <argument pos:start="57:31" pos:end="57:51"><expr pos:start="57:31" pos:end="57:51"><name pos:start="57:31" pos:end="57:51">Z_DEFAULT_COMPRESSION</name></expr></argument>,

                       <argument pos:start="59:24" pos:end="59:33"><expr pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:33">Z_DEFLATED</name></expr></argument>, <argument pos:start="59:36" pos:end="59:38"><expr pos:start="59:36" pos:end="59:38"><operator pos:start="59:36" pos:end="59:36">-</operator><literal type="number" pos:start="59:37" pos:end="59:38">12</literal></expr></argument>,

                       <argument pos:start="61:24" pos:end="61:24"><expr pos:start="61:24" pos:end="61:24"><literal type="number" pos:start="61:24" pos:end="61:24">9</literal></expr></argument>, <argument pos:start="61:27" pos:end="61:44"><expr pos:start="61:27" pos:end="61:44"><name pos:start="61:27" pos:end="61:44">Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:14">!=</operator> <literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>)</condition> <block pos:start="63:19" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:36"><expr pos:start="73:5" pos:end="73:35"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:8">strm</name><operator pos:start="73:9" pos:end="73:9">.</operator><name pos:start="73:10" pos:end="73:17">avail_in</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:35"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:35">cluster_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:34"><expr pos:start="75:5" pos:end="75:33"><name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:8">strm</name><operator pos:start="75:9" pos:end="75:9">.</operator><name pos:start="75:10" pos:end="75:16">next_in</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <operator pos:start="75:20" pos:end="75:20">(</operator><name pos:start="75:21" pos:end="75:27">uint8_t</name> <operator pos:start="75:29" pos:end="75:29">*</operator><operator pos:start="75:30" pos:end="75:30">)</operator><name pos:start="75:31" pos:end="75:33">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:8">strm</name><operator pos:start="77:9" pos:end="77:9">.</operator><name pos:start="77:10" pos:end="77:18">avail_out</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:36"><name pos:start="77:22" pos:end="77:22">s</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:36">cluster_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:8">strm</name><operator pos:start="79:9" pos:end="79:9">.</operator><name pos:start="79:10" pos:end="79:17">next_out</name></name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:27">out_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:34"><name pos:start="83:11" pos:end="83:17">deflate</name><argument_list pos:start="83:18" pos:end="83:34">(<argument pos:start="83:19" pos:end="83:23"><expr pos:start="83:19" pos:end="83:23"><operator pos:start="83:19" pos:end="83:19">&amp;</operator><name pos:start="83:20" pos:end="83:23">strm</name></expr></argument>, <argument pos:start="83:26" pos:end="83:33"><expr pos:start="83:26" pos:end="83:33"><name pos:start="83:26" pos:end="83:33">Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:43">(<expr pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:14">!=</operator> <name pos:start="85:16" pos:end="85:27">Z_STREAM_END</name> <operator pos:start="85:29" pos:end="85:30">&amp;&amp;</operator> <name pos:start="85:32" pos:end="85:34">ret</name> <operator pos:start="85:36" pos:end="85:37">!=</operator> <name pos:start="85:39" pos:end="85:42">Z_OK</name></expr>)</condition> <block pos:start="85:45" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:18">

        <expr_stmt pos:start="87:9" pos:end="87:26"><expr pos:start="87:9" pos:end="87:25"><call pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:18">deflateEnd</name><argument_list pos:start="87:19" pos:end="87:25">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><operator pos:start="87:20" pos:end="87:20">&amp;</operator><name pos:start="87:21" pos:end="87:24">strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:22"><expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">-</operator><name pos:start="89:16" pos:end="89:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:38"><expr pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:11">out_len</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <name pos:start="95:15" pos:end="95:27"><name pos:start="95:15" pos:end="95:18">strm</name><operator pos:start="95:19" pos:end="95:19">.</operator><name pos:start="95:20" pos:end="95:27">next_out</name></name> <operator pos:start="95:29" pos:end="95:29">-</operator> <name pos:start="95:31" pos:end="95:37">out_buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:22"><expr pos:start="99:5" pos:end="99:21"><call pos:start="99:5" pos:end="99:21"><name pos:start="99:5" pos:end="99:14">deflateEnd</name><argument_list pos:start="99:15" pos:end="99:21">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><operator pos:start="99:16" pos:end="99:16">&amp;</operator><name pos:start="99:17" pos:end="99:20">strm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="119:5"><if pos:start="103:5" pos:end="119:5">if <condition pos:start="103:8" pos:end="103:58">(<expr pos:start="103:9" pos:end="103:57"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:14">!=</operator> <name pos:start="103:16" pos:end="103:27">Z_STREAM_END</name> <operator pos:start="103:29" pos:end="103:30">||</operator> <name pos:start="103:32" pos:end="103:38">out_len</name> <operator pos:start="103:40" pos:end="103:41">&gt;=</operator> <name pos:start="103:43" pos:end="103:57"><name pos:start="103:43" pos:end="103:43">s</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:57">cluster_size</name></name></expr>)</condition> <block pos:start="103:60" pos:end="119:5">{<block_content pos:start="107:9" pos:end="117:21">

        <comment type="block" pos:start="105:9" pos:end="105:54">/* could not compress: write normal cluster */</comment>

        <expr_stmt pos:start="107:9" pos:end="109:62"><expr pos:start="107:9" pos:end="109:61"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="109:61"><name pos:start="107:15" pos:end="107:28">qcow_co_writev</name><argument_list pos:start="107:29" pos:end="109:61">(<argument pos:start="107:30" pos:end="107:31"><expr pos:start="107:30" pos:end="107:31"><name pos:start="107:30" pos:end="107:31">bs</name></expr></argument>, <argument pos:start="107:34" pos:end="107:59"><expr pos:start="107:34" pos:end="107:59"><name pos:start="107:34" pos:end="107:39">offset</name> <operator pos:start="107:41" pos:end="107:42">&gt;&gt;</operator> <name pos:start="107:44" pos:end="107:59">BDRV_SECTOR_BITS</name></expr></argument>,

                             <argument pos:start="109:30" pos:end="109:54"><expr pos:start="109:30" pos:end="109:54"><name pos:start="109:30" pos:end="109:34">bytes</name> <operator pos:start="109:36" pos:end="109:37">&gt;&gt;</operator> <name pos:start="109:39" pos:end="109:54">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="109:57" pos:end="109:60"><expr pos:start="109:57" pos:end="109:60"><name pos:start="109:57" pos:end="109:60">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:20">(<expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">&lt;</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>)</condition> <block pos:start="111:22" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:22">

            <goto pos:start="113:13" pos:end="113:22">goto <name pos:start="113:18" pos:end="113:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="117:9" pos:end="117:21">goto <name pos:start="117:14" pos:end="117:20">success</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:33"><expr pos:start="121:5" pos:end="121:32"><call pos:start="121:5" pos:end="121:32"><name pos:start="121:5" pos:end="121:22">qemu_co_mutex_lock</name><argument_list pos:start="121:23" pos:end="121:32">(<argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><operator pos:start="121:24" pos:end="121:24">&amp;</operator><name pos:start="121:25" pos:end="121:31"><name pos:start="121:25" pos:end="121:25">s</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:70"><expr pos:start="123:5" pos:end="123:69"><name pos:start="123:5" pos:end="123:18">cluster_offset</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="123:69"><name pos:start="123:22" pos:end="123:39">get_cluster_offset</name><argument_list pos:start="123:40" pos:end="123:69">(<argument pos:start="123:41" pos:end="123:42"><expr pos:start="123:41" pos:end="123:42"><name pos:start="123:41" pos:end="123:42">bs</name></expr></argument>, <argument pos:start="123:45" pos:end="123:50"><expr pos:start="123:45" pos:end="123:50"><name pos:start="123:45" pos:end="123:50">offset</name></expr></argument>, <argument pos:start="123:53" pos:end="123:53"><expr pos:start="123:53" pos:end="123:53"><literal type="number" pos:start="123:53" pos:end="123:53">2</literal></expr></argument>, <argument pos:start="123:56" pos:end="123:62"><expr pos:start="123:56" pos:end="123:62"><name pos:start="123:56" pos:end="123:62">out_len</name></expr></argument>, <argument pos:start="123:65" pos:end="123:65"><expr pos:start="123:65" pos:end="123:65"><literal type="number" pos:start="123:65" pos:end="123:65">0</literal></expr></argument>, <argument pos:start="123:68" pos:end="123:68"><expr pos:start="123:68" pos:end="123:68"><literal type="number" pos:start="123:68" pos:end="123:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:35"><expr pos:start="125:5" pos:end="125:34"><call pos:start="125:5" pos:end="125:34"><name pos:start="125:5" pos:end="125:24">qemu_co_mutex_unlock</name><argument_list pos:start="125:25" pos:end="125:34">(<argument pos:start="125:26" pos:end="125:33"><expr pos:start="125:26" pos:end="125:33"><operator pos:start="125:26" pos:end="125:26">&amp;</operator><name pos:start="125:27" pos:end="125:33"><name pos:start="125:27" pos:end="125:27">s</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:28">(<expr pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:22">cluster_offset</name> <operator pos:start="127:24" pos:end="127:25">==</operator> <literal type="number" pos:start="127:27" pos:end="127:27">0</literal></expr>)</condition> <block pos:start="127:30" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:18">

        <expr_stmt pos:start="129:9" pos:end="129:19"><expr pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <operator pos:start="129:15" pos:end="129:15">-</operator><name pos:start="129:16" pos:end="129:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:18">goto <name pos:start="131:14" pos:end="131:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:45"><expr pos:start="135:5" pos:end="135:44"><name pos:start="135:5" pos:end="135:18">cluster_offset</name> <operator pos:start="135:20" pos:end="135:21">&amp;=</operator> <name pos:start="135:23" pos:end="135:44"><name pos:start="135:23" pos:end="135:23">s</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:44">cluster_offset_mask</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="145:6"><expr pos:start="139:5" pos:end="145:5"><name pos:start="139:5" pos:end="139:7">iov</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <operator pos:start="139:11" pos:end="139:11">(</operator>struct <name pos:start="139:19" pos:end="139:23">iovec</name><operator pos:start="139:24" pos:end="139:24">)</operator> <block pos:start="139:26" pos:end="145:5">{

        <expr pos:start="141:9" pos:end="141:29"><operator pos:start="141:9" pos:end="141:9">.</operator><name pos:start="141:10" pos:end="141:17">iov_base</name>   <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:29">out_buf</name></expr>,

        <expr pos:start="143:9" pos:end="143:29"><operator pos:start="143:9" pos:end="143:9">.</operator><name pos:start="143:10" pos:end="143:16">iov_len</name>    <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:29">out_len</name></expr>,

    }</block></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:48"><expr pos:start="147:5" pos:end="147:47"><call pos:start="147:5" pos:end="147:47"><name pos:start="147:5" pos:end="147:28">qemu_iovec_init_external</name><argument_list pos:start="147:29" pos:end="147:47">(<argument pos:start="147:30" pos:end="147:37"><expr pos:start="147:30" pos:end="147:37"><operator pos:start="147:30" pos:end="147:30">&amp;</operator><name pos:start="147:31" pos:end="147:37">hd_qiov</name></expr></argument>, <argument pos:start="147:40" pos:end="147:43"><expr pos:start="147:40" pos:end="147:43"><operator pos:start="147:40" pos:end="147:40">&amp;</operator><name pos:start="147:41" pos:end="147:43">iov</name></expr></argument>, <argument pos:start="147:46" pos:end="147:46"><expr pos:start="147:46" pos:end="147:46"><literal type="number" pos:start="147:46" pos:end="147:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:74"><expr pos:start="149:5" pos:end="149:73"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:73"><name pos:start="149:11" pos:end="149:25">bdrv_co_pwritev</name><argument_list pos:start="149:26" pos:end="149:73">(<argument pos:start="149:27" pos:end="149:34"><expr pos:start="149:27" pos:end="149:34"><name pos:start="149:27" pos:end="149:34"><name pos:start="149:27" pos:end="149:28">bs</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:34">file</name></name></expr></argument>, <argument pos:start="149:37" pos:end="149:50"><expr pos:start="149:37" pos:end="149:50"><name pos:start="149:37" pos:end="149:50">cluster_offset</name></expr></argument>, <argument pos:start="149:53" pos:end="149:59"><expr pos:start="149:53" pos:end="149:59"><name pos:start="149:53" pos:end="149:59">out_len</name></expr></argument>, <argument pos:start="149:62" pos:end="149:69"><expr pos:start="149:62" pos:end="149:69"><operator pos:start="149:62" pos:end="149:62">&amp;</operator><name pos:start="149:63" pos:end="149:69">hd_qiov</name></expr></argument>, <argument pos:start="149:72" pos:end="149:72"><expr pos:start="149:72" pos:end="149:72"><literal type="number" pos:start="149:72" pos:end="149:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">&lt;</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>)</condition> <block pos:start="151:18" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:18">

        <goto pos:start="153:9" pos:end="153:18">goto <name pos:start="153:14" pos:end="153:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<label pos:start="157:1" pos:end="157:8"><name pos:start="157:1" pos:end="157:7">success</name>:</label>

    <expr_stmt pos:start="159:5" pos:end="159:12"><expr pos:start="159:5" pos:end="159:11"><name pos:start="159:5" pos:end="159:7">ret</name> <operator pos:start="159:9" pos:end="159:9">=</operator> <literal type="number" pos:start="159:11" pos:end="159:11">0</literal></expr>;</expr_stmt>

<label pos:start="161:1" pos:end="161:5"><name pos:start="161:1" pos:end="161:4">fail</name>:</label>

    <expr_stmt pos:start="163:5" pos:end="163:20"><expr pos:start="163:5" pos:end="163:19"><call pos:start="163:5" pos:end="163:19"><name pos:start="163:5" pos:end="163:14">qemu_vfree</name><argument_list pos:start="163:15" pos:end="163:19">(<argument pos:start="163:16" pos:end="163:18"><expr pos:start="163:16" pos:end="163:18"><name pos:start="163:16" pos:end="163:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:20"><expr pos:start="165:5" pos:end="165:19"><call pos:start="165:5" pos:end="165:19"><name pos:start="165:5" pos:end="165:10">g_free</name><argument_list pos:start="165:11" pos:end="165:19">(<argument pos:start="165:12" pos:end="165:18"><expr pos:start="165:12" pos:end="165:18"><name pos:start="165:12" pos:end="165:18">out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:15">return <expr pos:start="167:12" pos:end="167:14"><name pos:start="167:12" pos:end="167:14">ret</name></expr>;</return>

</block_content>}</block>
</unit>
