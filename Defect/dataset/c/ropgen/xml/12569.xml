<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12569.c" pos:tabs="8"><function pos:start="1:1" pos:end="633:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">transcode</name><parameter_list pos:start="1:21" pos:end="1:26">(<parameter pos:start="1:22" pos:end="1:25"><decl pos:start="1:22" pos:end="1:25"><type pos:start="1:22" pos:end="1:25"><name pos:start="1:22" pos:end="1:25">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="633:1">{<block_content pos:start="5:5" pos:end="631:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVFormatContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">is</name></decl>, <decl pos:start="7:26" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:21"><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:28">os</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">OutputStream</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">InputStream</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">no_packet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:23">no_packet_count</name> <init pos:start="15:25" pos:end="15:27">= <expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:23">timer_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">key</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:24"><if pos:start="23:5" pos:end="25:24">if <condition pos:start="23:8" pos:end="23:50">(<expr pos:start="23:9" pos:end="23:49"><operator pos:start="23:9" pos:end="23:9">!</operator><operator pos:start="23:10" pos:end="23:10">(</operator><name pos:start="23:11" pos:end="23:19">no_packet</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:48"><name pos:start="23:23" pos:end="23:32">av_mallocz</name><argument_list pos:start="23:33" pos:end="23:48">(<argument pos:start="23:34" pos:end="23:47"><expr pos:start="23:34" pos:end="23:47"><name pos:start="23:34" pos:end="23:47">nb_input_files</name></expr></argument>)</argument_list></call><operator pos:start="23:49" pos:end="23:49">)</operator></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:24"><block_content pos:start="25:9" pos:end="25:24">

        <expr_stmt pos:start="25:9" pos:end="25:24"><expr pos:start="25:9" pos:end="25:23"><call pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:20">exit_program</name><argument_list pos:start="25:21" pos:end="25:23">(<argument pos:start="25:22" pos:end="25:22"><expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:27"><expr pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:26"><name pos:start="29:11" pos:end="29:24">transcode_init</name><argument_list pos:start="29:25" pos:end="29:26">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:18"><if pos:start="31:5" pos:end="33:18">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:18"><block_content pos:start="33:9" pos:end="33:18">

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:20">using_stdin</name></expr>)</condition> <block pos:start="37:23" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:71">

        <expr_stmt pos:start="39:9" pos:end="39:71"><expr pos:start="39:9" pos:end="39:70"><call pos:start="39:9" pos:end="39:70"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:70">(<argument pos:start="39:16" pos:end="39:19"><expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">NULL</name></expr></argument>, <argument pos:start="39:22" pos:end="39:32"><expr pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:32">AV_LOG_INFO</name></expr></argument>, <argument pos:start="39:35" pos:end="39:69"><expr pos:start="39:35" pos:end="39:69"><literal type="string" pos:start="39:35" pos:end="39:69">"Press [q] to stop, [?] for help\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:15">timer_start</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:30"><name pos:start="45:19" pos:end="45:28">av_gettime</name><argument_list pos:start="45:29" pos:end="45:30">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="49:5" pos:end="507:5">for <control pos:start="49:9" pos:end="49:34">(<init pos:start="49:10" pos:end="49:10">;</init> <condition pos:start="49:12" pos:end="49:33"><expr pos:start="49:12" pos:end="49:32"><name pos:start="49:12" pos:end="49:27">received_sigterm</name> <operator pos:start="49:29" pos:end="49:30">==</operator> <literal type="number" pos:start="49:32" pos:end="49:32">0</literal></expr>;</condition><incr/>)</control> <block pos:start="49:36" pos:end="507:5">{<block_content pos:start="51:9" pos:end="505:47">

        <decl_stmt pos:start="51:9" pos:end="51:34"><decl pos:start="51:9" pos:end="51:22"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:22">file_index</name></decl>, <decl pos:start="51:25" pos:end="51:33"><type ref="prev" pos:start="51:9" pos:end="51:11"/><name pos:start="51:25" pos:end="51:33">ist_index</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:21"><decl pos:start="53:9" pos:end="53:20"><type pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">AVPacket</name></type> <name pos:start="53:18" pos:end="53:20">pkt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:39"><decl pos:start="55:9" pos:end="55:38"><type pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:15">int64_t</name></type> <name pos:start="55:17" pos:end="55:24">cur_time</name><init pos:start="55:25" pos:end="55:38">= <expr pos:start="55:27" pos:end="55:38"><call pos:start="55:27" pos:end="55:38"><name pos:start="55:27" pos:end="55:36">av_gettime</name><argument_list pos:start="55:37" pos:end="55:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:35">/* if 'q' pressed, exits */</comment>

        <if_stmt pos:start="61:9" pos:end="237:9"><if pos:start="61:9" pos:end="237:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:24">using_stdin</name></expr>)</condition> <block pos:start="61:27" pos:end="237:9">{<block_content pos:start="63:13" pos:end="235:13">

            <decl_stmt pos:start="63:13" pos:end="63:37"><decl pos:start="63:13" pos:end="63:36"><type pos:start="63:13" pos:end="63:26"><specifier pos:start="63:13" pos:end="63:18">static</specifier> <name pos:start="63:20" pos:end="63:26">int64_t</name></type> <name pos:start="63:28" pos:end="63:36">last_time</name></decl>;</decl_stmt>

            <if_stmt pos:start="65:13" pos:end="67:22"><if pos:start="65:13" pos:end="67:22">if <condition pos:start="65:16" pos:end="65:36">(<expr pos:start="65:17" pos:end="65:35"><name pos:start="65:17" pos:end="65:35">received_nb_signals</name></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:22"><block_content pos:start="67:17" pos:end="67:22">

                <break pos:start="67:17" pos:end="67:22">break;</break></block_content></block></if></if_stmt>

            <comment type="block" pos:start="69:13" pos:end="69:45">/* read_key() returns 0 on EOF */</comment>

            <if_stmt pos:start="71:13" pos:end="79:25"><if pos:start="71:13" pos:end="77:13">if<condition pos:start="71:15" pos:end="71:64">(<expr pos:start="71:16" pos:end="71:63"><name pos:start="71:16" pos:end="71:23">cur_time</name> <operator pos:start="71:25" pos:end="71:25">-</operator> <name pos:start="71:27" pos:end="71:35">last_time</name> <operator pos:start="71:37" pos:end="71:38">&gt;=</operator> <literal type="number" pos:start="71:40" pos:end="71:45">100000</literal> <operator pos:start="71:47" pos:end="71:48">&amp;&amp;</operator> <operator pos:start="71:50" pos:end="71:50">!</operator><name pos:start="71:51" pos:end="71:63">run_as_daemon</name></expr>)</condition><block pos:start="71:65" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:37">

                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:19">key</name> <operator pos:start="73:21" pos:end="73:21">=</operator>  <call pos:start="73:24" pos:end="73:33"><name pos:start="73:24" pos:end="73:31">read_key</name><argument_list pos:start="73:32" pos:end="73:33">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:37"><expr pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:25">last_time</name> <operator pos:start="75:27" pos:end="75:27">=</operator> <name pos:start="75:29" pos:end="75:36">cur_time</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="77:14" pos:end="79:25">else<block type="pseudo" pos:start="79:17" pos:end="79:25"><block_content pos:start="79:17" pos:end="79:25">

                <expr_stmt pos:start="79:17" pos:end="79:25"><expr pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:19">key</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <operator pos:start="79:23" pos:end="79:23">-</operator><literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="81:13" pos:end="83:22"><if pos:start="81:13" pos:end="83:22">if <condition pos:start="81:16" pos:end="81:27">(<expr pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:19">key</name> <operator pos:start="81:21" pos:end="81:22">==</operator> <literal type="char" pos:start="81:24" pos:end="81:26">'q'</literal></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:22"><block_content pos:start="83:17" pos:end="83:22">

                <break pos:start="83:17" pos:end="83:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="85:13" pos:end="85:68"><if pos:start="85:13" pos:end="85:68">if <condition pos:start="85:16" pos:end="85:27">(<expr pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:19">key</name> <operator pos:start="85:21" pos:end="85:22">==</operator> <literal type="char" pos:start="85:24" pos:end="85:26">'+'</literal></expr>)</condition><block type="pseudo" pos:start="85:29" pos:end="85:68"><block_content pos:start="85:29" pos:end="85:68"> <expr_stmt pos:start="85:29" pos:end="85:68"><expr pos:start="85:29" pos:end="85:67"><call pos:start="85:29" pos:end="85:67"><name pos:start="85:29" pos:end="85:44">av_log_set_level</name><argument_list pos:start="85:45" pos:end="85:67">(<argument pos:start="85:46" pos:end="85:66"><expr pos:start="85:46" pos:end="85:66"><call pos:start="85:46" pos:end="85:63"><name pos:start="85:46" pos:end="85:61">av_log_get_level</name><argument_list pos:start="85:62" pos:end="85:63">()</argument_list></call><operator pos:start="85:64" pos:end="85:64">+</operator><literal type="number" pos:start="85:65" pos:end="85:66">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="87:13" pos:end="87:68"><if pos:start="87:13" pos:end="87:68">if <condition pos:start="87:16" pos:end="87:27">(<expr pos:start="87:17" pos:end="87:26"><name pos:start="87:17" pos:end="87:19">key</name> <operator pos:start="87:21" pos:end="87:22">==</operator> <literal type="char" pos:start="87:24" pos:end="87:26">'-'</literal></expr>)</condition><block type="pseudo" pos:start="87:29" pos:end="87:68"><block_content pos:start="87:29" pos:end="87:68"> <expr_stmt pos:start="87:29" pos:end="87:68"><expr pos:start="87:29" pos:end="87:67"><call pos:start="87:29" pos:end="87:67"><name pos:start="87:29" pos:end="87:44">av_log_set_level</name><argument_list pos:start="87:45" pos:end="87:67">(<argument pos:start="87:46" pos:end="87:66"><expr pos:start="87:46" pos:end="87:66"><call pos:start="87:46" pos:end="87:63"><name pos:start="87:46" pos:end="87:61">av_log_get_level</name><argument_list pos:start="87:62" pos:end="87:63">()</argument_list></call><operator pos:start="87:64" pos:end="87:64">-</operator><literal type="number" pos:start="87:65" pos:end="87:66">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="89:13" pos:end="89:45"><if pos:start="89:13" pos:end="89:45">if <condition pos:start="89:16" pos:end="89:27">(<expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:19">key</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <literal type="char" pos:start="89:24" pos:end="89:26">'s'</literal></expr>)</condition><block type="pseudo" pos:start="89:29" pos:end="89:45"><block_content pos:start="89:29" pos:end="89:45"> <expr_stmt pos:start="89:29" pos:end="89:45"><expr pos:start="89:29" pos:end="89:44"><name pos:start="89:29" pos:end="89:35">qp_hist</name>     <operator pos:start="89:41" pos:end="89:42">^=</operator> <literal type="number" pos:start="89:44" pos:end="89:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="91:13" pos:end="107:13"><if pos:start="91:13" pos:end="107:13">if <condition pos:start="91:16" pos:end="91:27">(<expr pos:start="91:17" pos:end="91:26"><name pos:start="91:17" pos:end="91:19">key</name> <operator pos:start="91:21" pos:end="91:22">==</operator> <literal type="char" pos:start="91:24" pos:end="91:26">'h'</literal></expr>)</condition><block pos:start="91:28" pos:end="107:13">{<block_content pos:start="93:17" pos:end="105:47">

                <if_stmt pos:start="93:17" pos:end="103:36"><if pos:start="93:17" pos:end="97:17">if <condition pos:start="93:20" pos:end="93:32">(<expr pos:start="93:21" pos:end="93:31"><name pos:start="93:21" pos:end="93:31">do_hex_dump</name></expr>)</condition><block pos:start="93:33" pos:end="97:17">{<block_content pos:start="95:21" pos:end="95:50">

                    <expr_stmt pos:start="95:21" pos:end="95:50"><expr pos:start="95:21" pos:end="95:49"><name pos:start="95:21" pos:end="95:31">do_hex_dump</name> <operator pos:start="95:33" pos:end="95:33">=</operator> <name pos:start="95:35" pos:end="95:45">do_pkt_dump</name> <operator pos:start="95:47" pos:end="95:47">=</operator> <literal type="number" pos:start="95:49" pos:end="95:49">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="97:19" pos:end="101:17">else if<condition pos:start="97:26" pos:end="97:38">(<expr pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:37">do_pkt_dump</name></expr>)</condition><block pos:start="97:39" pos:end="101:17">{<block_content pos:start="99:21" pos:end="99:36">

                    <expr_stmt pos:start="99:21" pos:end="99:36"><expr pos:start="99:21" pos:end="99:35"><name pos:start="99:21" pos:end="99:31">do_hex_dump</name> <operator pos:start="99:33" pos:end="99:33">=</operator> <literal type="number" pos:start="99:35" pos:end="99:35">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="101:19" pos:end="103:36">else<block type="pseudo" pos:start="103:21" pos:end="103:36"><block_content pos:start="103:21" pos:end="103:36">

                    <expr_stmt pos:start="103:21" pos:end="103:36"><expr pos:start="103:21" pos:end="103:35"><name pos:start="103:21" pos:end="103:31">do_pkt_dump</name> <operator pos:start="103:33" pos:end="103:33">=</operator> <literal type="number" pos:start="103:35" pos:end="103:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:47"><expr pos:start="105:17" pos:end="105:46"><call pos:start="105:17" pos:end="105:46"><name pos:start="105:17" pos:end="105:32">av_log_set_level</name><argument_list pos:start="105:33" pos:end="105:46">(<argument pos:start="105:34" pos:end="105:45"><expr pos:start="105:34" pos:end="105:45"><name pos:start="105:34" pos:end="105:45">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="109:13" pos:end="171:13"><if pos:start="109:13" pos:end="171:13">if <condition pos:start="109:16" pos:end="109:41">(<expr pos:start="109:17" pos:end="109:40"><name pos:start="109:17" pos:end="109:19">key</name> <operator pos:start="109:21" pos:end="109:22">==</operator> <literal type="char" pos:start="109:24" pos:end="109:26">'c'</literal> <operator pos:start="109:28" pos:end="109:29">||</operator> <name pos:start="109:31" pos:end="109:33">key</name> <operator pos:start="109:35" pos:end="109:36">==</operator> <literal type="char" pos:start="109:38" pos:end="109:40">'C'</literal></expr>)</condition><block pos:start="109:42" pos:end="171:13">{<block_content pos:start="111:17" pos:end="169:17">

                <decl_stmt pos:start="111:17" pos:end="111:73"><decl pos:start="111:17" pos:end="111:30"><type pos:start="111:17" pos:end="111:20"><name pos:start="111:17" pos:end="111:20">char</name></type> <name pos:start="111:22" pos:end="111:30"><name pos:start="111:22" pos:end="111:24">buf</name><index pos:start="111:25" pos:end="111:30">[<expr pos:start="111:26" pos:end="111:29"><literal type="number" pos:start="111:26" pos:end="111:29">4096</literal></expr>]</index></name></decl>, <decl pos:start="111:33" pos:end="111:42"><type ref="prev" pos:start="111:17" pos:end="111:20"/><name pos:start="111:33" pos:end="111:42"><name pos:start="111:33" pos:end="111:38">target</name><index pos:start="111:39" pos:end="111:42">[<expr pos:start="111:40" pos:end="111:41"><literal type="number" pos:start="111:40" pos:end="111:41">64</literal></expr>]</index></name></decl>, <decl pos:start="111:45" pos:end="111:56"><type ref="prev" pos:start="111:17" pos:end="111:20"/><name pos:start="111:45" pos:end="111:56"><name pos:start="111:45" pos:end="111:51">command</name><index pos:start="111:52" pos:end="111:56">[<expr pos:start="111:53" pos:end="111:55"><literal type="number" pos:start="111:53" pos:end="111:55">256</literal></expr>]</index></name></decl>, <decl pos:start="111:59" pos:end="111:72"><type ref="prev" pos:start="111:17" pos:end="111:20"/><name pos:start="111:59" pos:end="111:66"><name pos:start="111:59" pos:end="111:61">arg</name><index pos:start="111:62" pos:end="111:66">[<expr pos:start="111:63" pos:end="111:65"><literal type="number" pos:start="111:63" pos:end="111:65">256</literal></expr>]</index></name> <init pos:start="111:68" pos:end="111:72">= <expr pos:start="111:70" pos:end="111:72"><block pos:start="111:70" pos:end="111:72">{<expr pos:start="111:71" pos:end="111:71"><literal type="number" pos:start="111:71" pos:end="111:71">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="113:17" pos:end="113:28"><decl pos:start="113:17" pos:end="113:27"><type pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:22">double</name></type> <name pos:start="113:24" pos:end="113:27">time</name></decl>;</decl_stmt>

                <decl_stmt pos:start="115:17" pos:end="115:29"><decl pos:start="115:17" pos:end="115:21"><type pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">int</name></type> <name pos:start="115:21" pos:end="115:21">k</name></decl>, <decl pos:start="115:24" pos:end="115:28"><type ref="prev" pos:start="115:17" pos:end="115:19"/><name pos:start="115:24" pos:end="115:24">n</name> <init pos:start="115:26" pos:end="115:28">= <expr pos:start="115:28" pos:end="115:28"><literal type="number" pos:start="115:28" pos:end="115:28">0</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:93"><expr pos:start="117:17" pos:end="117:92"><call pos:start="117:17" pos:end="117:92"><name pos:start="117:17" pos:end="117:23">fprintf</name><argument_list pos:start="117:24" pos:end="117:92">(<argument pos:start="117:25" pos:end="117:30"><expr pos:start="117:25" pos:end="117:30"><name pos:start="117:25" pos:end="117:30">stderr</name></expr></argument>, <argument pos:start="117:33" pos:end="117:91"><expr pos:start="117:33" pos:end="117:91"><literal type="string" pos:start="117:33" pos:end="117:91">"\nEnter command: &lt;target&gt; &lt;time&gt; &lt;command&gt;[ &lt;argument&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:22"><expr pos:start="119:17" pos:end="119:21"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <literal type="number" pos:start="119:21" pos:end="119:21">0</literal></expr>;</expr_stmt>

                <while pos:start="121:17" pos:end="125:37">while <condition pos:start="121:23" pos:end="121:82">(<expr pos:start="121:24" pos:end="121:81"><operator pos:start="121:24" pos:end="121:24">(</operator><name pos:start="121:25" pos:end="121:25">k</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <call pos:start="121:29" pos:end="121:38"><name pos:start="121:29" pos:end="121:36">read_key</name><argument_list pos:start="121:37" pos:end="121:38">()</argument_list></call><operator pos:start="121:39" pos:end="121:39">)</operator> <operator pos:start="121:41" pos:end="121:42">!=</operator> <literal type="char" pos:start="121:44" pos:end="121:47">'\n'</literal> <operator pos:start="121:49" pos:end="121:50">&amp;&amp;</operator> <name pos:start="121:52" pos:end="121:52">k</name> <operator pos:start="121:54" pos:end="121:55">!=</operator> <literal type="char" pos:start="121:57" pos:end="121:60">'\r'</literal> <operator pos:start="121:62" pos:end="121:63">&amp;&amp;</operator> <name pos:start="121:65" pos:end="121:65">i</name> <operator pos:start="121:67" pos:end="121:67">&lt;</operator> <sizeof pos:start="121:69" pos:end="121:79">sizeof<argument_list pos:start="121:75" pos:end="121:79">(<argument pos:start="121:76" pos:end="121:78"><expr pos:start="121:76" pos:end="121:78"><name pos:start="121:76" pos:end="121:78">buf</name></expr></argument>)</argument_list></sizeof><operator pos:start="121:80" pos:end="121:80">-</operator><literal type="number" pos:start="121:81" pos:end="121:81">1</literal></expr>)</condition><block type="pseudo" pos:start="123:21" pos:end="125:37"><block_content pos:start="123:21" pos:end="125:37">

                    <if_stmt pos:start="123:21" pos:end="125:37"><if pos:start="123:21" pos:end="125:37">if <condition pos:start="123:24" pos:end="123:30">(<expr pos:start="123:25" pos:end="123:29"><name pos:start="123:25" pos:end="123:25">k</name> <operator pos:start="123:27" pos:end="123:27">&gt;</operator> <literal type="number" pos:start="123:29" pos:end="123:29">0</literal></expr>)</condition><block type="pseudo" pos:start="125:25" pos:end="125:37"><block_content pos:start="125:25" pos:end="125:37">

                        <expr_stmt pos:start="125:25" pos:end="125:37"><expr pos:start="125:25" pos:end="125:36"><name pos:start="125:25" pos:end="125:32"><name pos:start="125:25" pos:end="125:27">buf</name><index pos:start="125:28" pos:end="125:32">[<expr pos:start="125:29" pos:end="125:31"><name pos:start="125:29" pos:end="125:29">i</name><operator pos:start="125:30" pos:end="125:31">++</operator></expr>]</index></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <name pos:start="125:36" pos:end="125:36">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

                <expr_stmt pos:start="127:17" pos:end="127:27"><expr pos:start="127:17" pos:end="127:26"><name pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:19">buf</name><index pos:start="127:20" pos:end="127:22">[<expr pos:start="127:21" pos:end="127:21"><name pos:start="127:21" pos:end="127:21">i</name></expr>]</index></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="129:17" pos:end="169:17"><if pos:start="129:17" pos:end="161:17">if <condition pos:start="129:20" pos:end="131:106">(<expr pos:start="129:21" pos:end="131:105"><name pos:start="129:21" pos:end="129:21">k</name> <operator pos:start="129:23" pos:end="129:23">&gt;</operator> <literal type="number" pos:start="129:25" pos:end="129:25">0</literal> <operator pos:start="129:27" pos:end="129:28">&amp;&amp;</operator>

                    <operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:22">n</name> <operator pos:start="131:24" pos:end="131:24">=</operator> <call pos:start="131:26" pos:end="131:99"><name pos:start="131:26" pos:end="131:31">sscanf</name><argument_list pos:start="131:32" pos:end="131:99">(<argument pos:start="131:33" pos:end="131:35"><expr pos:start="131:33" pos:end="131:35"><name pos:start="131:33" pos:end="131:35">buf</name></expr></argument>, <argument pos:start="131:38" pos:end="131:69"><expr pos:start="131:38" pos:end="131:69"><literal type="string" pos:start="131:38" pos:end="131:69">"%63[^ ] %lf %255[^ ] %255[^\n]"</literal></expr></argument>, <argument pos:start="131:72" pos:end="131:77"><expr pos:start="131:72" pos:end="131:77"><name pos:start="131:72" pos:end="131:77">target</name></expr></argument>, <argument pos:start="131:80" pos:end="131:84"><expr pos:start="131:80" pos:end="131:84"><operator pos:start="131:80" pos:end="131:80">&amp;</operator><name pos:start="131:81" pos:end="131:84">time</name></expr></argument>, <argument pos:start="131:87" pos:end="131:93"><expr pos:start="131:87" pos:end="131:93"><name pos:start="131:87" pos:end="131:93">command</name></expr></argument>, <argument pos:start="131:96" pos:end="131:98"><expr pos:start="131:96" pos:end="131:98"><name pos:start="131:96" pos:end="131:98">arg</name></expr></argument>)</argument_list></call><operator pos:start="131:100" pos:end="131:100">)</operator> <operator pos:start="131:102" pos:end="131:103">&gt;=</operator> <literal type="number" pos:start="131:105" pos:end="131:105">3</literal></expr>)</condition> <block pos:start="131:108" pos:end="161:17">{<block_content pos:start="133:21" pos:end="159:21">

                    <expr_stmt pos:start="133:21" pos:end="135:55"><expr pos:start="133:21" pos:end="135:54"><call pos:start="133:21" pos:end="135:54"><name pos:start="133:21" pos:end="133:26">av_log</name><argument_list pos:start="133:27" pos:end="135:54">(<argument pos:start="133:28" pos:end="133:31"><expr pos:start="133:28" pos:end="133:31"><name pos:start="133:28" pos:end="133:31">NULL</name></expr></argument>, <argument pos:start="133:34" pos:end="133:45"><expr pos:start="133:34" pos:end="133:45"><name pos:start="133:34" pos:end="133:45">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="133:48" pos:end="133:103"><expr pos:start="133:48" pos:end="133:103"><literal type="string" pos:start="133:48" pos:end="133:103">"Processing command target:%s time:%f command:%s arg:%s"</literal></expr></argument>,

                           <argument pos:start="135:28" pos:end="135:33"><expr pos:start="135:28" pos:end="135:33"><name pos:start="135:28" pos:end="135:33">target</name></expr></argument>, <argument pos:start="135:36" pos:end="135:39"><expr pos:start="135:36" pos:end="135:39"><name pos:start="135:36" pos:end="135:39">time</name></expr></argument>, <argument pos:start="135:42" pos:end="135:48"><expr pos:start="135:42" pos:end="135:48"><name pos:start="135:42" pos:end="135:48">command</name></expr></argument>, <argument pos:start="135:51" pos:end="135:53"><expr pos:start="135:51" pos:end="135:53"><name pos:start="135:51" pos:end="135:53">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="137:21" pos:end="159:21">for <control pos:start="137:25" pos:end="137:57">(<init pos:start="137:26" pos:end="137:31"><expr pos:start="137:26" pos:end="137:30"><name pos:start="137:26" pos:end="137:26">i</name> <operator pos:start="137:28" pos:end="137:28">=</operator> <literal type="number" pos:start="137:30" pos:end="137:30">0</literal></expr>;</init> <condition pos:start="137:33" pos:end="137:52"><expr pos:start="137:33" pos:end="137:51"><name pos:start="137:33" pos:end="137:33">i</name> <operator pos:start="137:35" pos:end="137:35">&lt;</operator> <name pos:start="137:37" pos:end="137:51">nb_filtergraphs</name></expr>;</condition> <incr pos:start="137:54" pos:end="137:56"><expr pos:start="137:54" pos:end="137:56"><name pos:start="137:54" pos:end="137:54">i</name><operator pos:start="137:55" pos:end="137:56">++</operator></expr></incr>)</control> <block pos:start="137:59" pos:end="159:21">{<block_content pos:start="139:25" pos:end="157:25">

                        <decl_stmt pos:start="139:25" pos:end="139:58"><decl pos:start="139:25" pos:end="139:57"><type pos:start="139:25" pos:end="139:37"><name pos:start="139:25" pos:end="139:35">FilterGraph</name> <modifier pos:start="139:37" pos:end="139:37">*</modifier></type><name pos:start="139:38" pos:end="139:39">fg</name> <init pos:start="139:41" pos:end="139:57">= <expr pos:start="139:43" pos:end="139:57"><name pos:start="139:43" pos:end="139:57"><name pos:start="139:43" pos:end="139:54">filtergraphs</name><index pos:start="139:55" pos:end="139:57">[<expr pos:start="139:56" pos:end="139:56"><name pos:start="139:56" pos:end="139:56">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="141:25" pos:end="157:25"><if pos:start="141:25" pos:end="157:25">if <condition pos:start="141:28" pos:end="141:38">(<expr pos:start="141:29" pos:end="141:37"><name pos:start="141:29" pos:end="141:37"><name pos:start="141:29" pos:end="141:30">fg</name><operator pos:start="141:31" pos:end="141:32">-&gt;</operator><name pos:start="141:33" pos:end="141:37">graph</name></name></expr>)</condition> <block pos:start="141:40" pos:end="157:25">{<block_content pos:start="143:29" pos:end="155:29">

                            <if_stmt pos:start="143:29" pos:end="155:29"><if pos:start="143:29" pos:end="151:29">if <condition pos:start="143:32" pos:end="143:41">(<expr pos:start="143:33" pos:end="143:40"><name pos:start="143:33" pos:end="143:36">time</name> <operator pos:start="143:38" pos:end="143:38">&lt;</operator> <literal type="number" pos:start="143:40" pos:end="143:40">0</literal></expr>)</condition> <block pos:start="143:43" pos:end="151:29">{<block_content pos:start="145:33" pos:end="149:109">

                                <expr_stmt pos:start="145:33" pos:end="147:106"><expr pos:start="145:33" pos:end="147:105"><name pos:start="145:33" pos:end="145:35">ret</name> <operator pos:start="145:37" pos:end="145:37">=</operator> <call pos:start="145:39" pos:end="147:105"><name pos:start="145:39" pos:end="145:65">avfilter_graph_send_command</name><argument_list pos:start="145:66" pos:end="147:105">(<argument pos:start="145:67" pos:end="145:75"><expr pos:start="145:67" pos:end="145:75"><name pos:start="145:67" pos:end="145:75"><name pos:start="145:67" pos:end="145:68">fg</name><operator pos:start="145:69" pos:end="145:70">-&gt;</operator><name pos:start="145:71" pos:end="145:75">graph</name></name></expr></argument>, <argument pos:start="145:78" pos:end="145:83"><expr pos:start="145:78" pos:end="145:83"><name pos:start="145:78" pos:end="145:83">target</name></expr></argument>, <argument pos:start="145:86" pos:end="145:92"><expr pos:start="145:86" pos:end="145:92"><name pos:start="145:86" pos:end="145:92">command</name></expr></argument>, <argument pos:start="145:95" pos:end="145:97"><expr pos:start="145:95" pos:end="145:97"><name pos:start="145:95" pos:end="145:97">arg</name></expr></argument>, <argument pos:start="145:100" pos:end="145:102"><expr pos:start="145:100" pos:end="145:102"><name pos:start="145:100" pos:end="145:102">buf</name></expr></argument>, <argument pos:start="145:105" pos:end="145:115"><expr pos:start="145:105" pos:end="145:115"><sizeof pos:start="145:105" pos:end="145:115">sizeof<argument_list pos:start="145:111" pos:end="145:115">(<argument pos:start="145:112" pos:end="145:114"><expr pos:start="145:112" pos:end="145:114"><name pos:start="145:112" pos:end="145:114">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                                                  <argument pos:start="147:67" pos:end="147:104"><expr pos:start="147:67" pos:end="147:104"><ternary pos:start="147:67" pos:end="147:104"><condition pos:start="147:67" pos:end="147:78"><expr pos:start="147:67" pos:end="147:76"><name pos:start="147:67" pos:end="147:69">key</name> <operator pos:start="147:71" pos:end="147:72">==</operator> <literal type="char" pos:start="147:74" pos:end="147:76">'c'</literal></expr> ?</condition><then pos:start="147:80" pos:end="147:100"> <expr pos:start="147:80" pos:end="147:100"><name pos:start="147:80" pos:end="147:100">AVFILTER_CMD_FLAG_ONE</name></expr> </then><else pos:start="147:102" pos:end="147:104">: <expr pos:start="147:104" pos:end="147:104"><literal type="number" pos:start="147:104" pos:end="147:104">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="149:33" pos:end="149:109"><expr pos:start="149:33" pos:end="149:108"><call pos:start="149:33" pos:end="149:108"><name pos:start="149:33" pos:end="149:39">fprintf</name><argument_list pos:start="149:40" pos:end="149:108">(<argument pos:start="149:41" pos:end="149:46"><expr pos:start="149:41" pos:end="149:46"><name pos:start="149:41" pos:end="149:46">stderr</name></expr></argument>, <argument pos:start="149:49" pos:end="149:94"><expr pos:start="149:49" pos:end="149:94"><literal type="string" pos:start="149:49" pos:end="149:94">"Command reply for stream %d: ret:%d res:%s\n"</literal></expr></argument>, <argument pos:start="149:97" pos:end="149:97"><expr pos:start="149:97" pos:end="149:97"><name pos:start="149:97" pos:end="149:97">i</name></expr></argument>, <argument pos:start="149:100" pos:end="149:102"><expr pos:start="149:100" pos:end="149:102"><name pos:start="149:100" pos:end="149:102">ret</name></expr></argument>, <argument pos:start="149:105" pos:end="149:107"><expr pos:start="149:105" pos:end="149:107"><name pos:start="149:105" pos:end="149:107">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="151:31" pos:end="155:29">else <block pos:start="151:36" pos:end="155:29">{<block_content pos:start="153:33" pos:end="153:109">

                                <expr_stmt pos:start="153:33" pos:end="153:109"><expr pos:start="153:33" pos:end="153:108"><name pos:start="153:33" pos:end="153:35">ret</name> <operator pos:start="153:37" pos:end="153:37">=</operator> <call pos:start="153:39" pos:end="153:108"><name pos:start="153:39" pos:end="153:66">avfilter_graph_queue_command</name><argument_list pos:start="153:67" pos:end="153:108">(<argument pos:start="153:68" pos:end="153:76"><expr pos:start="153:68" pos:end="153:76"><name pos:start="153:68" pos:end="153:76"><name pos:start="153:68" pos:end="153:69">fg</name><operator pos:start="153:70" pos:end="153:71">-&gt;</operator><name pos:start="153:72" pos:end="153:76">graph</name></name></expr></argument>, <argument pos:start="153:79" pos:end="153:84"><expr pos:start="153:79" pos:end="153:84"><name pos:start="153:79" pos:end="153:84">target</name></expr></argument>, <argument pos:start="153:87" pos:end="153:93"><expr pos:start="153:87" pos:end="153:93"><name pos:start="153:87" pos:end="153:93">command</name></expr></argument>, <argument pos:start="153:96" pos:end="153:98"><expr pos:start="153:96" pos:end="153:98"><name pos:start="153:96" pos:end="153:98">arg</name></expr></argument>, <argument pos:start="153:101" pos:end="153:101"><expr pos:start="153:101" pos:end="153:101"><literal type="number" pos:start="153:101" pos:end="153:101">0</literal></expr></argument>, <argument pos:start="153:104" pos:end="153:107"><expr pos:start="153:104" pos:end="153:107"><name pos:start="153:104" pos:end="153:107">time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="161:19" pos:end="169:17">else <block pos:start="161:24" pos:end="169:17">{<block_content pos:start="163:21" pos:end="167:69">

                    <expr_stmt pos:start="163:21" pos:end="167:69"><expr pos:start="163:21" pos:end="167:68"><call pos:start="163:21" pos:end="167:68"><name pos:start="163:21" pos:end="163:26">av_log</name><argument_list pos:start="163:27" pos:end="167:68">(<argument pos:start="163:28" pos:end="163:31"><expr pos:start="163:28" pos:end="163:31"><name pos:start="163:28" pos:end="163:31">NULL</name></expr></argument>, <argument pos:start="163:34" pos:end="163:45"><expr pos:start="163:34" pos:end="163:45"><name pos:start="163:34" pos:end="163:45">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="165:28" pos:end="167:59"><expr pos:start="165:28" pos:end="167:59"><literal type="string" pos:start="165:28" pos:end="165:78">"Parse error, at least 3 arguments were expected, "</literal>

                           <literal type="string" pos:start="167:28" pos:end="167:59">"only %d given in string '%s'\n"</literal></expr></argument>, <argument pos:start="167:62" pos:end="167:62"><expr pos:start="167:62" pos:end="167:62"><name pos:start="167:62" pos:end="167:62">n</name></expr></argument>, <argument pos:start="167:65" pos:end="167:67"><expr pos:start="167:65" pos:end="167:67"><name pos:start="167:65" pos:end="167:67">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="173:13" pos:end="211:13"><if pos:start="173:13" pos:end="211:13">if <condition pos:start="173:16" pos:end="173:41">(<expr pos:start="173:17" pos:end="173:40"><name pos:start="173:17" pos:end="173:19">key</name> <operator pos:start="173:21" pos:end="173:22">==</operator> <literal type="char" pos:start="173:24" pos:end="173:26">'d'</literal> <operator pos:start="173:28" pos:end="173:29">||</operator> <name pos:start="173:31" pos:end="173:33">key</name> <operator pos:start="173:35" pos:end="173:36">==</operator> <literal type="char" pos:start="173:38" pos:end="173:40">'D'</literal></expr>)</condition><block pos:start="173:42" pos:end="211:13">{<block_content pos:start="175:17" pos:end="209:52">

                <decl_stmt pos:start="175:17" pos:end="175:28"><decl pos:start="175:17" pos:end="175:27"><type pos:start="175:17" pos:end="175:19"><name pos:start="175:17" pos:end="175:19">int</name></type> <name pos:start="175:21" pos:end="175:25">debug</name><init pos:start="175:26" pos:end="175:27">=<expr pos:start="175:27" pos:end="175:27"><literal type="number" pos:start="175:27" pos:end="175:27">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="177:17" pos:end="191:70"><if pos:start="177:17" pos:end="187:17">if<condition pos:start="177:19" pos:end="177:30">(<expr pos:start="177:20" pos:end="177:29"><name pos:start="177:20" pos:end="177:22">key</name> <operator pos:start="177:24" pos:end="177:25">==</operator> <literal type="char" pos:start="177:27" pos:end="177:29">'D'</literal></expr>)</condition> <block pos:start="177:32" pos:end="187:17">{<block_content pos:start="179:21" pos:end="185:39">

                    <expr_stmt pos:start="179:21" pos:end="179:66"><expr pos:start="179:21" pos:end="179:65"><name pos:start="179:21" pos:end="179:25">debug</name> <operator pos:start="179:27" pos:end="179:27">=</operator> <name pos:start="179:29" pos:end="179:44"><name pos:start="179:29" pos:end="179:41">input_streams</name><index pos:start="179:42" pos:end="179:44">[<expr pos:start="179:43" pos:end="179:43"><literal type="number" pos:start="179:43" pos:end="179:43">0</literal></expr>]</index></name><operator pos:start="179:45" pos:end="179:46">-&gt;</operator><name pos:start="179:47" pos:end="179:62"><name pos:start="179:47" pos:end="179:48">st</name><operator pos:start="179:49" pos:end="179:50">-&gt;</operator><name pos:start="179:51" pos:end="179:55">codec</name><operator pos:start="179:56" pos:end="179:57">-&gt;</operator><name pos:start="179:58" pos:end="179:62">debug</name></name><operator pos:start="179:63" pos:end="179:64">&lt;&lt;</operator><literal type="number" pos:start="179:65" pos:end="179:65">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="181:21" pos:end="181:41"><if pos:start="181:21" pos:end="181:41">if<condition pos:start="181:23" pos:end="181:30">(<expr pos:start="181:24" pos:end="181:29"><operator pos:start="181:24" pos:end="181:24">!</operator><name pos:start="181:25" pos:end="181:29">debug</name></expr>)</condition><block type="pseudo" pos:start="181:32" pos:end="181:41"><block_content pos:start="181:32" pos:end="181:41"> <expr_stmt pos:start="181:32" pos:end="181:41"><expr pos:start="181:32" pos:end="181:40"><name pos:start="181:32" pos:end="181:36">debug</name> <operator pos:start="181:38" pos:end="181:38">=</operator> <literal type="number" pos:start="181:40" pos:end="181:40">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <while pos:start="183:21" pos:end="185:39">while<condition pos:start="183:26" pos:end="183:92">(<expr pos:start="183:27" pos:end="183:91"><name pos:start="183:27" pos:end="183:31">debug</name> <operator pos:start="183:33" pos:end="183:33">&amp;</operator> <operator pos:start="183:35" pos:end="183:35">(</operator><name pos:start="183:36" pos:end="183:53">FF_DEBUG_DCT_COEFF</name><operator pos:start="183:54" pos:end="183:54">|</operator><name pos:start="183:55" pos:end="183:69">FF_DEBUG_VIS_QP</name><operator pos:start="183:70" pos:end="183:70">|</operator><name pos:start="183:71" pos:end="183:90">FF_DEBUG_VIS_MB_TYPE</name><operator pos:start="183:91" pos:end="183:91">)</operator></expr>)</condition><block type="pseudo" pos:start="185:25" pos:end="185:39"><block_content pos:start="185:25" pos:end="185:39"> <comment type="line" pos:start="183:94" pos:end="183:124">//unsupported, would just crash</comment>

                        <expr_stmt pos:start="185:25" pos:end="185:39"><expr pos:start="185:25" pos:end="185:38"><name pos:start="185:25" pos:end="185:29">debug</name> <operator pos:start="185:31" pos:end="185:32">+=</operator> <name pos:start="185:34" pos:end="185:38">debug</name></expr>;</expr_stmt></block_content></block></while>

                </block_content>}</block></if><if type="elseif" pos:start="187:18" pos:end="191:70">else

                    if<condition pos:start="189:23" pos:end="189:46">(<expr pos:start="189:24" pos:end="189:45"><call pos:start="189:24" pos:end="189:42"><name pos:start="189:24" pos:end="189:28">scanf</name><argument_list pos:start="189:29" pos:end="189:42">(<argument pos:start="189:30" pos:end="189:33"><expr pos:start="189:30" pos:end="189:33"><literal type="string" pos:start="189:30" pos:end="189:33">"%d"</literal></expr></argument>, <argument pos:start="189:36" pos:end="189:41"><expr pos:start="189:36" pos:end="189:41"><operator pos:start="189:36" pos:end="189:36">&amp;</operator><name pos:start="189:37" pos:end="189:41">debug</name></expr></argument>)</argument_list></call><operator pos:start="189:43" pos:end="189:44">!=</operator><literal type="number" pos:start="189:45" pos:end="189:45">1</literal></expr>)</condition><block type="pseudo" pos:start="191:25" pos:end="191:70"><block_content pos:start="191:25" pos:end="191:70">

                        <expr_stmt pos:start="191:25" pos:end="191:70"><expr pos:start="191:25" pos:end="191:69"><call pos:start="191:25" pos:end="191:69"><name pos:start="191:25" pos:end="191:31">fprintf</name><argument_list pos:start="191:32" pos:end="191:69">(<argument pos:start="191:33" pos:end="191:38"><expr pos:start="191:33" pos:end="191:38"><name pos:start="191:33" pos:end="191:38">stderr</name></expr></argument>,<argument pos:start="191:40" pos:end="191:68"><expr pos:start="191:40" pos:end="191:68"><literal type="string" pos:start="191:40" pos:end="191:68">"error parsing debug value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <for pos:start="193:17" pos:end="197:17">for<control pos:start="193:20" pos:end="193:47">(<init pos:start="193:21" pos:end="193:24"><expr pos:start="193:21" pos:end="193:23"><name pos:start="193:21" pos:end="193:21">i</name><operator pos:start="193:22" pos:end="193:22">=</operator><literal type="number" pos:start="193:23" pos:end="193:23">0</literal></expr>;</init><condition pos:start="193:25" pos:end="193:43"><expr pos:start="193:25" pos:end="193:42"><name pos:start="193:25" pos:end="193:25">i</name><operator pos:start="193:26" pos:end="193:26">&lt;</operator><name pos:start="193:27" pos:end="193:42">nb_input_streams</name></expr>;</condition><incr pos:start="193:44" pos:end="193:46"><expr pos:start="193:44" pos:end="193:46"><name pos:start="193:44" pos:end="193:44">i</name><operator pos:start="193:45" pos:end="193:46">++</operator></expr></incr>)</control> <block pos:start="193:49" pos:end="197:17">{<block_content pos:start="195:21" pos:end="195:63">

                    <expr_stmt pos:start="195:21" pos:end="195:63"><expr pos:start="195:21" pos:end="195:62"><name pos:start="195:21" pos:end="195:36"><name pos:start="195:21" pos:end="195:33">input_streams</name><index pos:start="195:34" pos:end="195:36">[<expr pos:start="195:35" pos:end="195:35"><name pos:start="195:35" pos:end="195:35">i</name></expr>]</index></name><operator pos:start="195:37" pos:end="195:38">-&gt;</operator><name pos:start="195:39" pos:end="195:54"><name pos:start="195:39" pos:end="195:40">st</name><operator pos:start="195:41" pos:end="195:42">-&gt;</operator><name pos:start="195:43" pos:end="195:47">codec</name><operator pos:start="195:48" pos:end="195:49">-&gt;</operator><name pos:start="195:50" pos:end="195:54">debug</name></name> <operator pos:start="195:56" pos:end="195:56">=</operator> <name pos:start="195:58" pos:end="195:62">debug</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <for pos:start="199:17" pos:end="205:17">for<control pos:start="199:20" pos:end="199:48">(<init pos:start="199:21" pos:end="199:24"><expr pos:start="199:21" pos:end="199:23"><name pos:start="199:21" pos:end="199:21">i</name><operator pos:start="199:22" pos:end="199:22">=</operator><literal type="number" pos:start="199:23" pos:end="199:23">0</literal></expr>;</init><condition pos:start="199:25" pos:end="199:44"><expr pos:start="199:25" pos:end="199:43"><name pos:start="199:25" pos:end="199:25">i</name><operator pos:start="199:26" pos:end="199:26">&lt;</operator><name pos:start="199:27" pos:end="199:43">nb_output_streams</name></expr>;</condition><incr pos:start="199:45" pos:end="199:47"><expr pos:start="199:45" pos:end="199:47"><name pos:start="199:45" pos:end="199:45">i</name><operator pos:start="199:46" pos:end="199:47">++</operator></expr></incr>)</control> <block pos:start="199:50" pos:end="205:17">{<block_content pos:start="201:21" pos:end="203:50">

                    <expr_stmt pos:start="201:21" pos:end="201:44"><expr pos:start="201:21" pos:end="201:43"><name pos:start="201:21" pos:end="201:23">ost</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:43"><name pos:start="201:27" pos:end="201:40">output_streams</name><index pos:start="201:41" pos:end="201:43">[<expr pos:start="201:42" pos:end="201:42"><name pos:start="201:42" pos:end="201:42">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:50"><expr pos:start="203:21" pos:end="203:49"><name pos:start="203:21" pos:end="203:41"><name pos:start="203:21" pos:end="203:23">ost</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:27">st</name><operator pos:start="203:28" pos:end="203:29">-&gt;</operator><name pos:start="203:30" pos:end="203:34">codec</name><operator pos:start="203:35" pos:end="203:36">-&gt;</operator><name pos:start="203:37" pos:end="203:41">debug</name></name> <operator pos:start="203:43" pos:end="203:43">=</operator> <name pos:start="203:45" pos:end="203:49">debug</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="207:17" pos:end="207:57"><if pos:start="207:17" pos:end="207:57">if<condition pos:start="207:19" pos:end="207:25">(<expr pos:start="207:20" pos:end="207:24"><name pos:start="207:20" pos:end="207:24">debug</name></expr>)</condition><block type="pseudo" pos:start="207:27" pos:end="207:57"><block_content pos:start="207:27" pos:end="207:57"> <expr_stmt pos:start="207:27" pos:end="207:57"><expr pos:start="207:27" pos:end="207:56"><call pos:start="207:27" pos:end="207:56"><name pos:start="207:27" pos:end="207:42">av_log_set_level</name><argument_list pos:start="207:43" pos:end="207:56">(<argument pos:start="207:44" pos:end="207:55"><expr pos:start="207:44" pos:end="207:55"><name pos:start="207:44" pos:end="207:55">AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:52"><expr pos:start="209:17" pos:end="209:51"><call pos:start="209:17" pos:end="209:51"><name pos:start="209:17" pos:end="209:23">fprintf</name><argument_list pos:start="209:24" pos:end="209:51">(<argument pos:start="209:25" pos:end="209:30"><expr pos:start="209:25" pos:end="209:30"><name pos:start="209:25" pos:end="209:30">stderr</name></expr></argument>,<argument pos:start="209:32" pos:end="209:43"><expr pos:start="209:32" pos:end="209:43"><literal type="string" pos:start="209:32" pos:end="209:43">"debug=%d\n"</literal></expr></argument>, <argument pos:start="209:46" pos:end="209:50"><expr pos:start="209:46" pos:end="209:50"><name pos:start="209:46" pos:end="209:50">debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="213:13" pos:end="235:13"><if pos:start="213:13" pos:end="235:13">if <condition pos:start="213:16" pos:end="213:27">(<expr pos:start="213:17" pos:end="213:26"><name pos:start="213:17" pos:end="213:19">key</name> <operator pos:start="213:21" pos:end="213:22">==</operator> <literal type="char" pos:start="213:24" pos:end="213:26">'?'</literal></expr>)</condition><block pos:start="213:28" pos:end="235:13">{<block_content pos:start="215:17" pos:end="233:18">

                <expr_stmt pos:start="215:17" pos:end="233:18"><expr pos:start="215:17" pos:end="233:17"><call pos:start="215:17" pos:end="233:17"><name pos:start="215:17" pos:end="215:23">fprintf</name><argument_list pos:start="215:24" pos:end="233:17">(<argument pos:start="215:25" pos:end="215:30"><expr pos:start="215:25" pos:end="215:30"><name pos:start="215:25" pos:end="215:30">stderr</name></expr></argument>, <argument pos:start="215:33" pos:end="231:60"><expr pos:start="215:33" pos:end="231:60"><literal type="string" pos:start="215:33" pos:end="215:51">"key    function\n"</literal>

                                <literal type="string" pos:start="217:33" pos:end="217:57">"?      show this help\n"</literal>

                                <literal type="string" pos:start="219:33" pos:end="219:61">"+      increase verbosity\n"</literal>

                                <literal type="string" pos:start="221:33" pos:end="221:61">"-      decrease verbosity\n"</literal>

                                <literal type="string" pos:start="223:33" pos:end="223:70">"c      Send command to filtergraph\n"</literal>

                                <literal type="string" pos:start="225:33" pos:end="225:78">"D      cycle through available debug modes\n"</literal>

                                <literal type="string" pos:start="227:33" pos:end="227:95">"h      dump packets/hex press to cycle through the 3 states\n"</literal>

                                <literal type="string" pos:start="229:33" pos:end="229:47">"q      quit\n"</literal>

                                <literal type="string" pos:start="231:33" pos:end="231:60">"s      Show QP histogram\n"</literal></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="241:9" pos:end="241:70">/* check if there's any stream where output is still needed */</comment>

        <if_stmt pos:start="243:9" pos:end="249:9"><if pos:start="243:9" pos:end="249:9">if <condition pos:start="243:12" pos:end="243:27">(<expr pos:start="243:13" pos:end="243:26"><operator pos:start="243:13" pos:end="243:13">!</operator><call pos:start="243:14" pos:end="243:26"><name pos:start="243:14" pos:end="243:24">need_output</name><argument_list pos:start="243:25" pos:end="243:26">()</argument_list></call></expr>)</condition> <block pos:start="243:29" pos:end="249:9">{<block_content pos:start="245:13" pos:end="247:18">

            <expr_stmt pos:start="245:13" pos:end="245:93"><expr pos:start="245:13" pos:end="245:92"><call pos:start="245:13" pos:end="245:92"><name pos:start="245:13" pos:end="245:18">av_log</name><argument_list pos:start="245:19" pos:end="245:92">(<argument pos:start="245:20" pos:end="245:23"><expr pos:start="245:20" pos:end="245:23"><name pos:start="245:20" pos:end="245:23">NULL</name></expr></argument>, <argument pos:start="245:26" pos:end="245:39"><expr pos:start="245:26" pos:end="245:39"><name pos:start="245:26" pos:end="245:39">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="245:42" pos:end="245:91"><expr pos:start="245:42" pos:end="245:91"><literal type="string" pos:start="245:42" pos:end="245:91">"No more output streams to write to, finishing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="247:13" pos:end="247:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="253:9" pos:end="253:53">/* select the stream that we must read now */</comment>

        <expr_stmt pos:start="255:9" pos:end="255:50"><expr pos:start="255:9" pos:end="255:49"><name pos:start="255:9" pos:end="255:18">file_index</name> <operator pos:start="255:20" pos:end="255:20">=</operator> <call pos:start="255:22" pos:end="255:49"><name pos:start="255:22" pos:end="255:38">select_input_file</name><argument_list pos:start="255:39" pos:end="255:49">(<argument pos:start="255:40" pos:end="255:48"><expr pos:start="255:40" pos:end="255:48"><name pos:start="255:40" pos:end="255:48">no_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="257:9" pos:end="257:37">/* if none, if is finished */</comment>

        <if_stmt pos:start="259:9" pos:end="275:9"><if pos:start="259:9" pos:end="275:9">if <condition pos:start="259:12" pos:end="259:27">(<expr pos:start="259:13" pos:end="259:26"><name pos:start="259:13" pos:end="259:22">file_index</name> <operator pos:start="259:24" pos:end="259:24">&lt;</operator> <literal type="number" pos:start="259:26" pos:end="259:26">0</literal></expr>)</condition> <block pos:start="259:29" pos:end="275:9">{<block_content pos:start="261:13" pos:end="273:18">

            <if_stmt pos:start="261:13" pos:end="271:13"><if pos:start="261:13" pos:end="271:13">if <condition pos:start="261:16" pos:end="261:32">(<expr pos:start="261:17" pos:end="261:31"><name pos:start="261:17" pos:end="261:31">no_packet_count</name></expr>)</condition> <block pos:start="261:34" pos:end="271:13">{<block_content pos:start="263:17" pos:end="269:25">

                <expr_stmt pos:start="263:17" pos:end="263:36"><expr pos:start="263:17" pos:end="263:35"><name pos:start="263:17" pos:end="263:31">no_packet_count</name> <operator pos:start="263:33" pos:end="263:33">=</operator> <literal type="number" pos:start="263:35" pos:end="263:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:53"><expr pos:start="265:17" pos:end="265:52"><call pos:start="265:17" pos:end="265:52"><name pos:start="265:17" pos:end="265:22">memset</name><argument_list pos:start="265:23" pos:end="265:52">(<argument pos:start="265:24" pos:end="265:32"><expr pos:start="265:24" pos:end="265:32"><name pos:start="265:24" pos:end="265:32">no_packet</name></expr></argument>, <argument pos:start="265:35" pos:end="265:35"><expr pos:start="265:35" pos:end="265:35"><literal type="number" pos:start="265:35" pos:end="265:35">0</literal></expr></argument>, <argument pos:start="265:38" pos:end="265:51"><expr pos:start="265:38" pos:end="265:51"><name pos:start="265:38" pos:end="265:51">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:30"><expr pos:start="267:17" pos:end="267:29"><call pos:start="267:17" pos:end="267:29"><name pos:start="267:17" pos:end="267:22">usleep</name><argument_list pos:start="267:23" pos:end="267:29">(<argument pos:start="267:24" pos:end="267:28"><expr pos:start="267:24" pos:end="267:28"><literal type="number" pos:start="267:24" pos:end="267:28">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="269:17" pos:end="269:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="273:13" pos:end="273:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="279:9" pos:end="279:60">/* read a frame from it and output it in the fifo */</comment>

        <expr_stmt pos:start="281:9" pos:end="281:43"><expr pos:start="281:9" pos:end="281:42"><name pos:start="281:9" pos:end="281:10">is</name>  <operator pos:start="281:13" pos:end="281:13">=</operator> <name pos:start="281:15" pos:end="281:37"><name pos:start="281:15" pos:end="281:25">input_files</name><index pos:start="281:26" pos:end="281:37">[<expr pos:start="281:27" pos:end="281:36"><name pos:start="281:27" pos:end="281:36">file_index</name></expr>]</index></name><operator pos:start="281:38" pos:end="281:39">-&gt;</operator><name pos:start="281:40" pos:end="281:42">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:38"><expr pos:start="283:9" pos:end="283:37"><name pos:start="283:9" pos:end="283:11">ret</name> <operator pos:start="283:13" pos:end="283:13">=</operator> <call pos:start="283:15" pos:end="283:37"><name pos:start="283:15" pos:end="283:27">av_read_frame</name><argument_list pos:start="283:28" pos:end="283:37">(<argument pos:start="283:29" pos:end="283:30"><expr pos:start="283:29" pos:end="283:30"><name pos:start="283:29" pos:end="283:30">is</name></expr></argument>, <argument pos:start="283:33" pos:end="283:36"><expr pos:start="283:33" pos:end="283:36"><operator pos:start="283:33" pos:end="283:33">&amp;</operator><name pos:start="283:34" pos:end="283:36">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="285:9" pos:end="293:9"><if pos:start="285:9" pos:end="293:9">if <condition pos:start="285:12" pos:end="285:35">(<expr pos:start="285:13" pos:end="285:34"><name pos:start="285:13" pos:end="285:15">ret</name> <operator pos:start="285:17" pos:end="285:18">==</operator> <call pos:start="285:20" pos:end="285:34"><name pos:start="285:20" pos:end="285:26">AVERROR</name><argument_list pos:start="285:27" pos:end="285:34">(<argument pos:start="285:28" pos:end="285:33"><expr pos:start="285:28" pos:end="285:33"><name pos:start="285:28" pos:end="285:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="285:37" pos:end="293:9">{<block_content pos:start="287:13" pos:end="291:21">

            <expr_stmt pos:start="287:13" pos:end="287:38"><expr pos:start="287:13" pos:end="287:37"><name pos:start="287:13" pos:end="287:33"><name pos:start="287:13" pos:end="287:21">no_packet</name><index pos:start="287:22" pos:end="287:33">[<expr pos:start="287:23" pos:end="287:32"><name pos:start="287:23" pos:end="287:32">file_index</name></expr>]</index></name> <operator pos:start="287:35" pos:end="287:35">=</operator> <literal type="number" pos:start="287:37" pos:end="287:37">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:30"><expr pos:start="289:13" pos:end="289:29"><name pos:start="289:13" pos:end="289:27">no_packet_count</name><operator pos:start="289:28" pos:end="289:29">++</operator></expr>;</expr_stmt>

            <continue pos:start="291:13" pos:end="291:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="295:9" pos:end="321:9"><if pos:start="295:9" pos:end="321:9">if <condition pos:start="295:12" pos:end="295:20">(<expr pos:start="295:13" pos:end="295:19"><name pos:start="295:13" pos:end="295:15">ret</name> <operator pos:start="295:17" pos:end="295:17">&lt;</operator> <literal type="number" pos:start="295:19" pos:end="295:19">0</literal></expr>)</condition> <block pos:start="295:22" pos:end="321:9">{<block_content pos:start="297:13" pos:end="319:25">

            <expr_stmt pos:start="297:13" pos:end="297:53"><expr pos:start="297:13" pos:end="297:52"><name pos:start="297:13" pos:end="297:35"><name pos:start="297:13" pos:end="297:23">input_files</name><index pos:start="297:24" pos:end="297:35">[<expr pos:start="297:25" pos:end="297:34"><name pos:start="297:25" pos:end="297:34">file_index</name></expr>]</index></name><operator pos:start="297:36" pos:end="297:37">-&gt;</operator><name pos:start="297:38" pos:end="297:48">eof_reached</name> <operator pos:start="297:50" pos:end="297:50">=</operator> <literal type="number" pos:start="297:52" pos:end="297:52">1</literal></expr>;</expr_stmt>



            <for pos:start="301:13" pos:end="309:13">for <control pos:start="301:17" pos:end="301:69">(<init pos:start="301:18" pos:end="301:23"><expr pos:start="301:18" pos:end="301:22"><name pos:start="301:18" pos:end="301:18">i</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <literal type="number" pos:start="301:22" pos:end="301:22">0</literal></expr>;</init> <condition pos:start="301:25" pos:end="301:64"><expr pos:start="301:25" pos:end="301:63"><name pos:start="301:25" pos:end="301:25">i</name> <operator pos:start="301:27" pos:end="301:27">&lt;</operator> <name pos:start="301:29" pos:end="301:51"><name pos:start="301:29" pos:end="301:39">input_files</name><index pos:start="301:40" pos:end="301:51">[<expr pos:start="301:41" pos:end="301:50"><name pos:start="301:41" pos:end="301:50">file_index</name></expr>]</index></name><operator pos:start="301:52" pos:end="301:53">-&gt;</operator><name pos:start="301:54" pos:end="301:63">nb_streams</name></expr>;</condition> <incr pos:start="301:66" pos:end="301:68"><expr pos:start="301:66" pos:end="301:68"><name pos:start="301:66" pos:end="301:66">i</name><operator pos:start="301:67" pos:end="301:68">++</operator></expr></incr>)</control> <block pos:start="301:71" pos:end="309:13">{<block_content pos:start="303:17" pos:end="307:45">

                <expr_stmt pos:start="303:17" pos:end="303:76"><expr pos:start="303:17" pos:end="303:75"><name pos:start="303:17" pos:end="303:19">ist</name> <operator pos:start="303:21" pos:end="303:21">=</operator> <name pos:start="303:23" pos:end="303:75"><name pos:start="303:23" pos:end="303:35">input_streams</name><index pos:start="303:36" pos:end="303:75">[<expr pos:start="303:37" pos:end="303:74"><name pos:start="303:37" pos:end="303:59"><name pos:start="303:37" pos:end="303:47">input_files</name><index pos:start="303:48" pos:end="303:59">[<expr pos:start="303:49" pos:end="303:58"><name pos:start="303:49" pos:end="303:58">file_index</name></expr>]</index></name><operator pos:start="303:60" pos:end="303:61">-&gt;</operator><name pos:start="303:62" pos:end="303:70">ist_index</name> <operator pos:start="303:72" pos:end="303:72">+</operator> <name pos:start="303:74" pos:end="303:74">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="305:17" pos:end="307:45"><if pos:start="305:17" pos:end="307:45">if <condition pos:start="305:20" pos:end="305:41">(<expr pos:start="305:21" pos:end="305:40"><name pos:start="305:21" pos:end="305:40"><name pos:start="305:21" pos:end="305:23">ist</name><operator pos:start="305:24" pos:end="305:25">-&gt;</operator><name pos:start="305:26" pos:end="305:40">decoding_needed</name></name></expr>)</condition><block type="pseudo" pos:start="307:21" pos:end="307:45"><block_content pos:start="307:21" pos:end="307:45">

                    <expr_stmt pos:start="307:21" pos:end="307:45"><expr pos:start="307:21" pos:end="307:44"><call pos:start="307:21" pos:end="307:44"><name pos:start="307:21" pos:end="307:33">output_packet</name><argument_list pos:start="307:34" pos:end="307:44">(<argument pos:start="307:35" pos:end="307:37"><expr pos:start="307:35" pos:end="307:37"><name pos:start="307:35" pos:end="307:37">ist</name></expr></argument>, <argument pos:start="307:40" pos:end="307:43"><expr pos:start="307:40" pos:end="307:43"><name pos:start="307:40" pos:end="307:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="313:13" pos:end="319:25"><if pos:start="313:13" pos:end="315:22">if <condition pos:start="313:16" pos:end="313:29">(<expr pos:start="313:17" pos:end="313:28"><name pos:start="313:17" pos:end="313:28">opt_shortest</name></expr>)</condition><block type="pseudo" pos:start="315:17" pos:end="315:22"><block_content pos:start="315:17" pos:end="315:22">

                <break pos:start="315:17" pos:end="315:22">break;</break></block_content></block></if>

            <else pos:start="317:13" pos:end="319:25">else<block type="pseudo" pos:start="319:17" pos:end="319:25"><block_content pos:start="319:17" pos:end="319:25">

                <continue pos:start="319:17" pos:end="319:25">continue;</continue></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:28"><expr pos:start="325:9" pos:end="325:27"><name pos:start="325:9" pos:end="325:23">no_packet_count</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <literal type="number" pos:start="325:27" pos:end="325:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:45"><expr pos:start="327:9" pos:end="327:44"><call pos:start="327:9" pos:end="327:44"><name pos:start="327:9" pos:end="327:14">memset</name><argument_list pos:start="327:15" pos:end="327:44">(<argument pos:start="327:16" pos:end="327:24"><expr pos:start="327:16" pos:end="327:24"><name pos:start="327:16" pos:end="327:24">no_packet</name></expr></argument>, <argument pos:start="327:27" pos:end="327:27"><expr pos:start="327:27" pos:end="327:27"><literal type="number" pos:start="327:27" pos:end="327:27">0</literal></expr></argument>, <argument pos:start="327:30" pos:end="327:43"><expr pos:start="327:30" pos:end="327:43"><name pos:start="327:30" pos:end="327:43">nb_input_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="331:9" pos:end="337:9"><if pos:start="331:9" pos:end="337:9">if <condition pos:start="331:12" pos:end="331:24">(<expr pos:start="331:13" pos:end="331:23"><name pos:start="331:13" pos:end="331:23">do_pkt_dump</name></expr>)</condition> <block pos:start="331:26" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:60">

            <expr_stmt pos:start="333:13" pos:end="335:60"><expr pos:start="333:13" pos:end="335:59"><call pos:start="333:13" pos:end="335:59"><name pos:start="333:13" pos:end="333:28">av_pkt_dump_log2</name><argument_list pos:start="333:29" pos:end="335:59">(<argument pos:start="333:30" pos:end="333:33"><expr pos:start="333:30" pos:end="333:33"><name pos:start="333:30" pos:end="333:33">NULL</name></expr></argument>, <argument pos:start="333:36" pos:end="333:47"><expr pos:start="333:36" pos:end="333:47"><name pos:start="333:36" pos:end="333:47">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="333:50" pos:end="333:53"><expr pos:start="333:50" pos:end="333:53"><operator pos:start="333:50" pos:end="333:50">&amp;</operator><name pos:start="333:51" pos:end="333:53">pkt</name></expr></argument>, <argument pos:start="333:56" pos:end="333:66"><expr pos:start="333:56" pos:end="333:66"><name pos:start="333:56" pos:end="333:66">do_hex_dump</name></expr></argument>,

                             <argument pos:start="335:30" pos:end="335:58"><expr pos:start="335:30" pos:end="335:58"><name pos:start="335:30" pos:end="335:58"><name pos:start="335:30" pos:end="335:31">is</name><operator pos:start="335:32" pos:end="335:33">-&gt;</operator><name pos:start="335:34" pos:end="335:40">streams</name><index pos:start="335:41" pos:end="335:58">[<expr pos:start="335:42" pos:end="335:57"><name pos:start="335:42" pos:end="335:57"><name pos:start="335:42" pos:end="335:44">pkt</name><operator pos:start="335:45" pos:end="335:45">.</operator><name pos:start="335:46" pos:end="335:57">stream_index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="339:9" pos:end="341:52">/* the following test is needed in case new streams appear

           dynamically in stream : we ignore them */</comment>

        <if_stmt pos:start="343:9" pos:end="345:32"><if pos:start="343:9" pos:end="345:32">if <condition pos:start="343:12" pos:end="343:68">(<expr pos:start="343:13" pos:end="343:67"><name pos:start="343:13" pos:end="343:28"><name pos:start="343:13" pos:end="343:15">pkt</name><operator pos:start="343:16" pos:end="343:16">.</operator><name pos:start="343:17" pos:end="343:28">stream_index</name></name> <operator pos:start="343:30" pos:end="343:31">&gt;=</operator> <name pos:start="343:33" pos:end="343:55"><name pos:start="343:33" pos:end="343:43">input_files</name><index pos:start="343:44" pos:end="343:55">[<expr pos:start="343:45" pos:end="343:54"><name pos:start="343:45" pos:end="343:54">file_index</name></expr>]</index></name><operator pos:start="343:56" pos:end="343:57">-&gt;</operator><name pos:start="343:58" pos:end="343:67">nb_streams</name></expr>)</condition><block type="pseudo" pos:start="345:13" pos:end="345:32"><block_content pos:start="345:13" pos:end="345:32">

            <goto pos:start="345:13" pos:end="345:32">goto <name pos:start="345:18" pos:end="345:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:74"><expr pos:start="347:9" pos:end="347:73"><name pos:start="347:9" pos:end="347:17">ist_index</name> <operator pos:start="347:19" pos:end="347:19">=</operator> <name pos:start="347:21" pos:end="347:43"><name pos:start="347:21" pos:end="347:31">input_files</name><index pos:start="347:32" pos:end="347:43">[<expr pos:start="347:33" pos:end="347:42"><name pos:start="347:33" pos:end="347:42">file_index</name></expr>]</index></name><operator pos:start="347:44" pos:end="347:45">-&gt;</operator><name pos:start="347:46" pos:end="347:54">ist_index</name> <operator pos:start="347:56" pos:end="347:56">+</operator> <name pos:start="347:58" pos:end="347:73"><name pos:start="347:58" pos:end="347:60">pkt</name><operator pos:start="347:61" pos:end="347:61">.</operator><name pos:start="347:62" pos:end="347:73">stream_index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:39"><expr pos:start="349:9" pos:end="349:38"><name pos:start="349:9" pos:end="349:11">ist</name> <operator pos:start="349:13" pos:end="349:13">=</operator> <name pos:start="349:15" pos:end="349:38"><name pos:start="349:15" pos:end="349:27">input_streams</name><index pos:start="349:28" pos:end="349:38">[<expr pos:start="349:29" pos:end="349:37"><name pos:start="349:29" pos:end="349:37">ist_index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="351:9" pos:end="353:32"><if pos:start="351:9" pos:end="353:32">if <condition pos:start="351:12" pos:end="351:25">(<expr pos:start="351:13" pos:end="351:24"><name pos:start="351:13" pos:end="351:24"><name pos:start="351:13" pos:end="351:15">ist</name><operator pos:start="351:16" pos:end="351:17">-&gt;</operator><name pos:start="351:18" pos:end="351:24">discard</name></name></expr>)</condition><block type="pseudo" pos:start="353:13" pos:end="353:32"><block_content pos:start="353:13" pos:end="353:32">

            <goto pos:start="353:13" pos:end="353:32">goto <name pos:start="353:18" pos:end="353:31">discard_packet</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="357:9" pos:end="359:113"><if pos:start="357:9" pos:end="359:113">if <condition pos:start="357:12" pos:end="357:38">(<expr pos:start="357:13" pos:end="357:37"><name pos:start="357:13" pos:end="357:19"><name pos:start="357:13" pos:end="357:15">pkt</name><operator pos:start="357:16" pos:end="357:16">.</operator><name pos:start="357:17" pos:end="357:19">dts</name></name> <operator pos:start="357:21" pos:end="357:22">!=</operator> <name pos:start="357:24" pos:end="357:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="359:13" pos:end="359:113"><block_content pos:start="359:13" pos:end="359:113">

            <expr_stmt pos:start="359:13" pos:end="359:113"><expr pos:start="359:13" pos:end="359:112"><name pos:start="359:13" pos:end="359:19"><name pos:start="359:13" pos:end="359:15">pkt</name><operator pos:start="359:16" pos:end="359:16">.</operator><name pos:start="359:17" pos:end="359:19">dts</name></name> <operator pos:start="359:21" pos:end="359:22">+=</operator> <call pos:start="359:24" pos:end="359:112"><name pos:start="359:24" pos:end="359:35">av_rescale_q</name><argument_list pos:start="359:36" pos:end="359:112">(<argument pos:start="359:37" pos:end="359:75"><expr pos:start="359:37" pos:end="359:75"><name pos:start="359:37" pos:end="359:64"><name pos:start="359:37" pos:end="359:47">input_files</name><index pos:start="359:48" pos:end="359:64">[<expr pos:start="359:49" pos:end="359:63"><name pos:start="359:49" pos:end="359:63"><name pos:start="359:49" pos:end="359:51">ist</name><operator pos:start="359:52" pos:end="359:53">-&gt;</operator><name pos:start="359:54" pos:end="359:63">file_index</name></name></expr>]</index></name><operator pos:start="359:65" pos:end="359:66">-&gt;</operator><name pos:start="359:67" pos:end="359:75">ts_offset</name></expr></argument>, <argument pos:start="359:78" pos:end="359:91"><expr pos:start="359:78" pos:end="359:91"><name pos:start="359:78" pos:end="359:91">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="359:94" pos:end="359:111"><expr pos:start="359:94" pos:end="359:111"><name pos:start="359:94" pos:end="359:111"><name pos:start="359:94" pos:end="359:96">ist</name><operator pos:start="359:97" pos:end="359:98">-&gt;</operator><name pos:start="359:99" pos:end="359:100">st</name><operator pos:start="359:101" pos:end="359:102">-&gt;</operator><name pos:start="359:103" pos:end="359:111">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="361:9" pos:end="363:113"><if pos:start="361:9" pos:end="363:113">if <condition pos:start="361:12" pos:end="361:38">(<expr pos:start="361:13" pos:end="361:37"><name pos:start="361:13" pos:end="361:19"><name pos:start="361:13" pos:end="361:15">pkt</name><operator pos:start="361:16" pos:end="361:16">.</operator><name pos:start="361:17" pos:end="361:19">pts</name></name> <operator pos:start="361:21" pos:end="361:22">!=</operator> <name pos:start="361:24" pos:end="361:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="363:113"><block_content pos:start="363:13" pos:end="363:113">

            <expr_stmt pos:start="363:13" pos:end="363:113"><expr pos:start="363:13" pos:end="363:112"><name pos:start="363:13" pos:end="363:19"><name pos:start="363:13" pos:end="363:15">pkt</name><operator pos:start="363:16" pos:end="363:16">.</operator><name pos:start="363:17" pos:end="363:19">pts</name></name> <operator pos:start="363:21" pos:end="363:22">+=</operator> <call pos:start="363:24" pos:end="363:112"><name pos:start="363:24" pos:end="363:35">av_rescale_q</name><argument_list pos:start="363:36" pos:end="363:112">(<argument pos:start="363:37" pos:end="363:75"><expr pos:start="363:37" pos:end="363:75"><name pos:start="363:37" pos:end="363:64"><name pos:start="363:37" pos:end="363:47">input_files</name><index pos:start="363:48" pos:end="363:64">[<expr pos:start="363:49" pos:end="363:63"><name pos:start="363:49" pos:end="363:63"><name pos:start="363:49" pos:end="363:51">ist</name><operator pos:start="363:52" pos:end="363:53">-&gt;</operator><name pos:start="363:54" pos:end="363:63">file_index</name></name></expr>]</index></name><operator pos:start="363:65" pos:end="363:66">-&gt;</operator><name pos:start="363:67" pos:end="363:75">ts_offset</name></expr></argument>, <argument pos:start="363:78" pos:end="363:91"><expr pos:start="363:78" pos:end="363:91"><name pos:start="363:78" pos:end="363:91">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="363:94" pos:end="363:111"><expr pos:start="363:94" pos:end="363:111"><name pos:start="363:94" pos:end="363:111"><name pos:start="363:94" pos:end="363:96">ist</name><operator pos:start="363:97" pos:end="363:98">-&gt;</operator><name pos:start="363:99" pos:end="363:100">st</name><operator pos:start="363:101" pos:end="363:102">-&gt;</operator><name pos:start="363:103" pos:end="363:111">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="367:9" pos:end="369:37"><if pos:start="367:9" pos:end="369:37">if <condition pos:start="367:12" pos:end="367:38">(<expr pos:start="367:13" pos:end="367:37"><name pos:start="367:13" pos:end="367:19"><name pos:start="367:13" pos:end="367:15">pkt</name><operator pos:start="367:16" pos:end="367:16">.</operator><name pos:start="367:17" pos:end="367:19">pts</name></name> <operator pos:start="367:21" pos:end="367:22">!=</operator> <name pos:start="367:24" pos:end="367:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:37"><block_content pos:start="369:13" pos:end="369:37">

            <expr_stmt pos:start="369:13" pos:end="369:37"><expr pos:start="369:13" pos:end="369:36"><name pos:start="369:13" pos:end="369:19"><name pos:start="369:13" pos:end="369:15">pkt</name><operator pos:start="369:16" pos:end="369:16">.</operator><name pos:start="369:17" pos:end="369:19">pts</name></name> <operator pos:start="369:21" pos:end="369:22">*=</operator> <name pos:start="369:24" pos:end="369:36"><name pos:start="369:24" pos:end="369:26">ist</name><operator pos:start="369:27" pos:end="369:28">-&gt;</operator><name pos:start="369:29" pos:end="369:36">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="371:9" pos:end="373:37"><if pos:start="371:9" pos:end="373:37">if <condition pos:start="371:12" pos:end="371:38">(<expr pos:start="371:13" pos:end="371:37"><name pos:start="371:13" pos:end="371:19"><name pos:start="371:13" pos:end="371:15">pkt</name><operator pos:start="371:16" pos:end="371:16">.</operator><name pos:start="371:17" pos:end="371:19">dts</name></name> <operator pos:start="371:21" pos:end="371:22">!=</operator> <name pos:start="371:24" pos:end="371:37">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="373:13" pos:end="373:37"><block_content pos:start="373:13" pos:end="373:37">

            <expr_stmt pos:start="373:13" pos:end="373:37"><expr pos:start="373:13" pos:end="373:36"><name pos:start="373:13" pos:end="373:19"><name pos:start="373:13" pos:end="373:15">pkt</name><operator pos:start="373:16" pos:end="373:16">.</operator><name pos:start="373:17" pos:end="373:19">dts</name></name> <operator pos:start="373:21" pos:end="373:22">*=</operator> <name pos:start="373:24" pos:end="373:36"><name pos:start="373:24" pos:end="373:26">ist</name><operator pos:start="373:27" pos:end="373:28">-&gt;</operator><name pos:start="373:29" pos:end="373:36">ts_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="377:9" pos:end="395:9"><if pos:start="377:9" pos:end="395:9">if <condition pos:start="377:12" pos:end="377:21">(<expr pos:start="377:13" pos:end="377:20"><name pos:start="377:13" pos:end="377:20">debug_ts</name></expr>)</condition> <block pos:start="377:23" pos:end="395:9">{<block_content pos:start="379:13" pos:end="393:61">

            <expr_stmt pos:start="379:13" pos:end="393:61"><expr pos:start="379:13" pos:end="393:60"><call pos:start="379:13" pos:end="393:60"><name pos:start="379:13" pos:end="379:18">av_log</name><argument_list pos:start="379:19" pos:end="393:60">(<argument pos:start="379:20" pos:end="379:23"><expr pos:start="379:20" pos:end="379:23"><name pos:start="379:20" pos:end="379:23">NULL</name></expr></argument>, <argument pos:start="379:26" pos:end="379:36"><expr pos:start="379:26" pos:end="379:36"><name pos:start="379:26" pos:end="379:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="379:39" pos:end="381:150"><expr pos:start="379:39" pos:end="381:150"><literal type="string" pos:start="379:39" pos:end="379:72">"demuxer -&gt; ist_index:%d type:%s "</literal>

                    <literal type="string" pos:start="381:21" pos:end="381:140">"next_dts:%s next_dts_time:%s next_pts:%s next_pts_time:%s  pkt_pts:%s pkt_pts_time:%s pkt_dts:%s pkt_dts_time:%s off:%"</literal><name pos:start="381:141" pos:end="381:146">PRId64</name><literal type="string" pos:start="381:147" pos:end="381:150">"\n"</literal></expr></argument>,

                    <argument pos:start="383:21" pos:end="383:29"><expr pos:start="383:21" pos:end="383:29"><name pos:start="383:21" pos:end="383:29">ist_index</name></expr></argument>, <argument pos:start="383:32" pos:end="383:83"><expr pos:start="383:32" pos:end="383:83"><call pos:start="383:32" pos:end="383:83"><name pos:start="383:32" pos:end="383:55">av_get_media_type_string</name><argument_list pos:start="383:56" pos:end="383:83">(<argument pos:start="383:57" pos:end="383:82"><expr pos:start="383:57" pos:end="383:82"><name pos:start="383:57" pos:end="383:82"><name pos:start="383:57" pos:end="383:59">ist</name><operator pos:start="383:60" pos:end="383:61">-&gt;</operator><name pos:start="383:62" pos:end="383:63">st</name><operator pos:start="383:64" pos:end="383:65">-&gt;</operator><name pos:start="383:66" pos:end="383:70">codec</name><operator pos:start="383:71" pos:end="383:72">-&gt;</operator><name pos:start="383:73" pos:end="383:82">codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="385:21" pos:end="385:44"><expr pos:start="385:21" pos:end="385:44"><call pos:start="385:21" pos:end="385:44"><name pos:start="385:21" pos:end="385:29">av_ts2str</name><argument_list pos:start="385:30" pos:end="385:44">(<argument pos:start="385:31" pos:end="385:43"><expr pos:start="385:31" pos:end="385:43"><name pos:start="385:31" pos:end="385:43"><name pos:start="385:31" pos:end="385:33">ist</name><operator pos:start="385:34" pos:end="385:35">-&gt;</operator><name pos:start="385:36" pos:end="385:43">next_dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="385:47" pos:end="385:95"><expr pos:start="385:47" pos:end="385:95"><call pos:start="385:47" pos:end="385:95"><name pos:start="385:47" pos:end="385:59">av_ts2timestr</name><argument_list pos:start="385:60" pos:end="385:95">(<argument pos:start="385:61" pos:end="385:73"><expr pos:start="385:61" pos:end="385:73"><name pos:start="385:61" pos:end="385:73"><name pos:start="385:61" pos:end="385:63">ist</name><operator pos:start="385:64" pos:end="385:65">-&gt;</operator><name pos:start="385:66" pos:end="385:73">next_dts</name></name></expr></argument>, <argument pos:start="385:76" pos:end="385:94"><expr pos:start="385:76" pos:end="385:94"><operator pos:start="385:76" pos:end="385:76">&amp;</operator><name pos:start="385:77" pos:end="385:94"><name pos:start="385:77" pos:end="385:79">ist</name><operator pos:start="385:80" pos:end="385:81">-&gt;</operator><name pos:start="385:82" pos:end="385:83">st</name><operator pos:start="385:84" pos:end="385:85">-&gt;</operator><name pos:start="385:86" pos:end="385:94">time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="387:21" pos:end="387:44"><expr pos:start="387:21" pos:end="387:44"><call pos:start="387:21" pos:end="387:44"><name pos:start="387:21" pos:end="387:29">av_ts2str</name><argument_list pos:start="387:30" pos:end="387:44">(<argument pos:start="387:31" pos:end="387:43"><expr pos:start="387:31" pos:end="387:43"><name pos:start="387:31" pos:end="387:43"><name pos:start="387:31" pos:end="387:33">ist</name><operator pos:start="387:34" pos:end="387:35">-&gt;</operator><name pos:start="387:36" pos:end="387:43">next_pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="387:47" pos:end="387:95"><expr pos:start="387:47" pos:end="387:95"><call pos:start="387:47" pos:end="387:95"><name pos:start="387:47" pos:end="387:59">av_ts2timestr</name><argument_list pos:start="387:60" pos:end="387:95">(<argument pos:start="387:61" pos:end="387:73"><expr pos:start="387:61" pos:end="387:73"><name pos:start="387:61" pos:end="387:73"><name pos:start="387:61" pos:end="387:63">ist</name><operator pos:start="387:64" pos:end="387:65">-&gt;</operator><name pos:start="387:66" pos:end="387:73">next_pts</name></name></expr></argument>, <argument pos:start="387:76" pos:end="387:94"><expr pos:start="387:76" pos:end="387:94"><operator pos:start="387:76" pos:end="387:76">&amp;</operator><name pos:start="387:77" pos:end="387:94"><name pos:start="387:77" pos:end="387:79">ist</name><operator pos:start="387:80" pos:end="387:81">-&gt;</operator><name pos:start="387:82" pos:end="387:83">st</name><operator pos:start="387:84" pos:end="387:85">-&gt;</operator><name pos:start="387:86" pos:end="387:94">time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="389:21" pos:end="389:38"><expr pos:start="389:21" pos:end="389:38"><call pos:start="389:21" pos:end="389:38"><name pos:start="389:21" pos:end="389:29">av_ts2str</name><argument_list pos:start="389:30" pos:end="389:38">(<argument pos:start="389:31" pos:end="389:37"><expr pos:start="389:31" pos:end="389:37"><name pos:start="389:31" pos:end="389:37"><name pos:start="389:31" pos:end="389:33">pkt</name><operator pos:start="389:34" pos:end="389:34">.</operator><name pos:start="389:35" pos:end="389:37">pts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="389:41" pos:end="389:83"><expr pos:start="389:41" pos:end="389:83"><call pos:start="389:41" pos:end="389:83"><name pos:start="389:41" pos:end="389:53">av_ts2timestr</name><argument_list pos:start="389:54" pos:end="389:83">(<argument pos:start="389:55" pos:end="389:61"><expr pos:start="389:55" pos:end="389:61"><name pos:start="389:55" pos:end="389:61"><name pos:start="389:55" pos:end="389:57">pkt</name><operator pos:start="389:58" pos:end="389:58">.</operator><name pos:start="389:59" pos:end="389:61">pts</name></name></expr></argument>, <argument pos:start="389:64" pos:end="389:82"><expr pos:start="389:64" pos:end="389:82"><operator pos:start="389:64" pos:end="389:64">&amp;</operator><name pos:start="389:65" pos:end="389:82"><name pos:start="389:65" pos:end="389:67">ist</name><operator pos:start="389:68" pos:end="389:69">-&gt;</operator><name pos:start="389:70" pos:end="389:71">st</name><operator pos:start="389:72" pos:end="389:73">-&gt;</operator><name pos:start="389:74" pos:end="389:82">time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="391:21" pos:end="391:38"><expr pos:start="391:21" pos:end="391:38"><call pos:start="391:21" pos:end="391:38"><name pos:start="391:21" pos:end="391:29">av_ts2str</name><argument_list pos:start="391:30" pos:end="391:38">(<argument pos:start="391:31" pos:end="391:37"><expr pos:start="391:31" pos:end="391:37"><name pos:start="391:31" pos:end="391:37"><name pos:start="391:31" pos:end="391:33">pkt</name><operator pos:start="391:34" pos:end="391:34">.</operator><name pos:start="391:35" pos:end="391:37">dts</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="391:41" pos:end="391:83"><expr pos:start="391:41" pos:end="391:83"><call pos:start="391:41" pos:end="391:83"><name pos:start="391:41" pos:end="391:53">av_ts2timestr</name><argument_list pos:start="391:54" pos:end="391:83">(<argument pos:start="391:55" pos:end="391:61"><expr pos:start="391:55" pos:end="391:61"><name pos:start="391:55" pos:end="391:61"><name pos:start="391:55" pos:end="391:57">pkt</name><operator pos:start="391:58" pos:end="391:58">.</operator><name pos:start="391:59" pos:end="391:61">dts</name></name></expr></argument>, <argument pos:start="391:64" pos:end="391:82"><expr pos:start="391:64" pos:end="391:82"><operator pos:start="391:64" pos:end="391:64">&amp;</operator><name pos:start="391:65" pos:end="391:82"><name pos:start="391:65" pos:end="391:67">ist</name><operator pos:start="391:68" pos:end="391:69">-&gt;</operator><name pos:start="391:70" pos:end="391:71">st</name><operator pos:start="391:72" pos:end="391:73">-&gt;</operator><name pos:start="391:74" pos:end="391:82">time_base</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="393:21" pos:end="393:59"><expr pos:start="393:21" pos:end="393:59"><name pos:start="393:21" pos:end="393:48"><name pos:start="393:21" pos:end="393:31">input_files</name><index pos:start="393:32" pos:end="393:48">[<expr pos:start="393:33" pos:end="393:47"><name pos:start="393:33" pos:end="393:47"><name pos:start="393:33" pos:end="393:35">ist</name><operator pos:start="393:36" pos:end="393:37">-&gt;</operator><name pos:start="393:38" pos:end="393:47">file_index</name></name></expr>]</index></name><operator pos:start="393:49" pos:end="393:50">-&gt;</operator><name pos:start="393:51" pos:end="393:59">ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="399:9" pos:end="467:9"><if pos:start="399:9" pos:end="467:9">if <condition pos:start="399:12" pos:end="399:85">(<expr pos:start="399:13" pos:end="399:84"><name pos:start="399:13" pos:end="399:19"><name pos:start="399:13" pos:end="399:15">pkt</name><operator pos:start="399:16" pos:end="399:16">.</operator><name pos:start="399:17" pos:end="399:19">dts</name></name> <operator pos:start="399:21" pos:end="399:22">!=</operator> <name pos:start="399:24" pos:end="399:37">AV_NOPTS_VALUE</name> <operator pos:start="399:39" pos:end="399:40">&amp;&amp;</operator> <name pos:start="399:42" pos:end="399:54"><name pos:start="399:42" pos:end="399:44">ist</name><operator pos:start="399:45" pos:end="399:46">-&gt;</operator><name pos:start="399:47" pos:end="399:54">next_dts</name></name> <operator pos:start="399:56" pos:end="399:57">!=</operator> <name pos:start="399:59" pos:end="399:72">AV_NOPTS_VALUE</name> <operator pos:start="399:74" pos:end="399:75">&amp;&amp;</operator> <operator pos:start="399:77" pos:end="399:77">!</operator><name pos:start="399:78" pos:end="399:84">copy_ts</name></expr>)</condition> <block pos:start="399:87" pos:end="467:9">{<block_content pos:start="401:13" pos:end="465:13">

            <decl_stmt pos:start="401:13" pos:end="401:88"><decl pos:start="401:13" pos:end="401:87"><type pos:start="401:13" pos:end="401:19"><name pos:start="401:13" pos:end="401:19">int64_t</name></type> <name pos:start="401:21" pos:end="401:27">pkt_dts</name> <init pos:start="401:29" pos:end="401:87">= <expr pos:start="401:31" pos:end="401:87"><call pos:start="401:31" pos:end="401:87"><name pos:start="401:31" pos:end="401:42">av_rescale_q</name><argument_list pos:start="401:43" pos:end="401:87">(<argument pos:start="401:44" pos:end="401:50"><expr pos:start="401:44" pos:end="401:50"><name pos:start="401:44" pos:end="401:50"><name pos:start="401:44" pos:end="401:46">pkt</name><operator pos:start="401:47" pos:end="401:47">.</operator><name pos:start="401:48" pos:end="401:50">dts</name></name></expr></argument>, <argument pos:start="401:53" pos:end="401:70"><expr pos:start="401:53" pos:end="401:70"><name pos:start="401:53" pos:end="401:70"><name pos:start="401:53" pos:end="401:55">ist</name><operator pos:start="401:56" pos:end="401:57">-&gt;</operator><name pos:start="401:58" pos:end="401:59">st</name><operator pos:start="401:60" pos:end="401:61">-&gt;</operator><name pos:start="401:62" pos:end="401:70">time_base</name></name></expr></argument>, <argument pos:start="401:73" pos:end="401:86"><expr pos:start="401:73" pos:end="401:86"><name pos:start="401:73" pos:end="401:86">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="403:13" pos:end="403:54"><decl pos:start="403:13" pos:end="403:53"><type pos:start="403:13" pos:end="403:19"><name pos:start="403:13" pos:end="403:19">int64_t</name></type> <name pos:start="403:21" pos:end="403:25">delta</name>   <init pos:start="403:29" pos:end="403:53">= <expr pos:start="403:31" pos:end="403:53"><name pos:start="403:31" pos:end="403:37">pkt_dts</name> <operator pos:start="403:39" pos:end="403:39">-</operator> <name pos:start="403:41" pos:end="403:53"><name pos:start="403:41" pos:end="403:43">ist</name><operator pos:start="403:44" pos:end="403:45">-&gt;</operator><name pos:start="403:46" pos:end="403:53">next_dts</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="405:13" pos:end="465:13"><if pos:start="405:13" pos:end="431:13">if <condition pos:start="405:16" pos:end="405:54">(<expr pos:start="405:17" pos:end="405:53"><name pos:start="405:17" pos:end="405:34"><name pos:start="405:17" pos:end="405:18">is</name><operator pos:start="405:19" pos:end="405:20">-&gt;</operator><name pos:start="405:21" pos:end="405:27">iformat</name><operator pos:start="405:28" pos:end="405:29">-&gt;</operator><name pos:start="405:30" pos:end="405:34">flags</name></name> <operator pos:start="405:36" pos:end="405:36">&amp;</operator> <name pos:start="405:38" pos:end="405:53">AVFMT_TS_DISCONT</name></expr>)</condition> <block pos:start="405:56" pos:end="431:13">{<block_content pos:start="407:13" pos:end="429:13">

            <if_stmt pos:start="407:13" pos:end="429:13"><if pos:start="407:13" pos:end="429:13">if<condition pos:start="407:15" pos:end="413:35">(<expr pos:start="407:16" pos:end="413:34"><name pos:start="407:16" pos:end="407:20">delta</name> <operator pos:start="407:22" pos:end="407:22">&lt;</operator> <operator pos:start="407:24" pos:end="407:24">-</operator><literal type="number" pos:start="407:25" pos:end="407:27">1LL</literal><operator pos:start="407:28" pos:end="407:28">*</operator><name pos:start="407:29" pos:end="407:47">dts_delta_threshold</name><operator pos:start="407:48" pos:end="407:48">*</operator><name pos:start="407:49" pos:end="407:60">AV_TIME_BASE</name> <operator pos:start="407:62" pos:end="407:63">||</operator>

                <operator pos:start="409:17" pos:end="409:17">(</operator><name pos:start="409:18" pos:end="409:22">delta</name> <operator pos:start="409:24" pos:end="409:24">&gt;</operator> <literal type="number" pos:start="409:26" pos:end="409:28">1LL</literal><operator pos:start="409:29" pos:end="409:29">*</operator><name pos:start="409:30" pos:end="409:48">dts_delta_threshold</name><operator pos:start="409:49" pos:end="409:49">*</operator><name pos:start="409:50" pos:end="409:61">AV_TIME_BASE</name> <operator pos:start="409:63" pos:end="409:64">&amp;&amp;</operator>

                 <name pos:start="411:18" pos:end="411:43"><name pos:start="411:18" pos:end="411:20">ist</name><operator pos:start="411:21" pos:end="411:22">-&gt;</operator><name pos:start="411:23" pos:end="411:24">st</name><operator pos:start="411:25" pos:end="411:26">-&gt;</operator><name pos:start="411:27" pos:end="411:31">codec</name><operator pos:start="411:32" pos:end="411:33">-&gt;</operator><name pos:start="411:34" pos:end="411:43">codec_type</name></name> <operator pos:start="411:45" pos:end="411:46">!=</operator> <name pos:start="411:48" pos:end="411:68">AVMEDIA_TYPE_SUBTITLE</name><operator pos:start="411:69" pos:end="411:69">)</operator> <operator pos:start="411:71" pos:end="411:72">||</operator>

                <name pos:start="413:17" pos:end="413:23">pkt_dts</name><operator pos:start="413:24" pos:end="413:24">+</operator><literal type="number" pos:start="413:25" pos:end="413:25">1</literal><operator pos:start="413:26" pos:end="413:26">&lt;</operator><name pos:start="413:27" pos:end="413:34"><name pos:start="413:27" pos:end="413:29">ist</name><operator pos:start="413:30" pos:end="413:31">-&gt;</operator><name pos:start="413:32" pos:end="413:34">pts</name></name></expr>)</condition><block pos:start="413:36" pos:end="429:13">{<block_content pos:start="415:17" pos:end="427:86">

                <expr_stmt pos:start="415:17" pos:end="415:65"><expr pos:start="415:17" pos:end="415:64"><name pos:start="415:17" pos:end="415:44"><name pos:start="415:17" pos:end="415:27">input_files</name><index pos:start="415:28" pos:end="415:44">[<expr pos:start="415:29" pos:end="415:43"><name pos:start="415:29" pos:end="415:43"><name pos:start="415:29" pos:end="415:31">ist</name><operator pos:start="415:32" pos:end="415:33">-&gt;</operator><name pos:start="415:34" pos:end="415:43">file_index</name></name></expr>]</index></name><operator pos:start="415:45" pos:end="415:46">-&gt;</operator><name pos:start="415:47" pos:end="415:55">ts_offset</name> <operator pos:start="415:57" pos:end="415:58">-=</operator> <name pos:start="415:60" pos:end="415:64">delta</name></expr>;</expr_stmt>

                <expr_stmt pos:start="417:17" pos:end="421:71"><expr pos:start="417:17" pos:end="421:70"><call pos:start="417:17" pos:end="421:70"><name pos:start="417:17" pos:end="417:22">av_log</name><argument_list pos:start="417:23" pos:end="421:70">(<argument pos:start="417:24" pos:end="417:27"><expr pos:start="417:24" pos:end="417:27"><name pos:start="417:24" pos:end="417:27">NULL</name></expr></argument>, <argument pos:start="417:30" pos:end="417:41"><expr pos:start="417:30" pos:end="417:41"><name pos:start="417:30" pos:end="417:41">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="419:24" pos:end="419:83"><expr pos:start="419:24" pos:end="419:83"><literal type="string" pos:start="419:24" pos:end="419:50">"timestamp discontinuity %"</literal><name pos:start="419:51" pos:end="419:56">PRId64</name><literal type="string" pos:start="419:57" pos:end="419:73">", new offset= %"</literal><name pos:start="419:74" pos:end="419:79">PRId64</name><literal type="string" pos:start="419:80" pos:end="419:83">"\n"</literal></expr></argument>,

                       <argument pos:start="421:24" pos:end="421:28"><expr pos:start="421:24" pos:end="421:28"><name pos:start="421:24" pos:end="421:28">delta</name></expr></argument>, <argument pos:start="421:31" pos:end="421:69"><expr pos:start="421:31" pos:end="421:69"><name pos:start="421:31" pos:end="421:58"><name pos:start="421:31" pos:end="421:41">input_files</name><index pos:start="421:42" pos:end="421:58">[<expr pos:start="421:43" pos:end="421:57"><name pos:start="421:43" pos:end="421:57"><name pos:start="421:43" pos:end="421:45">ist</name><operator pos:start="421:46" pos:end="421:47">-&gt;</operator><name pos:start="421:48" pos:end="421:57">file_index</name></name></expr>]</index></name><operator pos:start="421:59" pos:end="421:60">-&gt;</operator><name pos:start="421:61" pos:end="421:69">ts_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:82"><expr pos:start="423:17" pos:end="423:81"><name pos:start="423:17" pos:end="423:23"><name pos:start="423:17" pos:end="423:19">pkt</name><operator pos:start="423:20" pos:end="423:20">.</operator><name pos:start="423:21" pos:end="423:23">dts</name></name><operator pos:start="423:24" pos:end="423:25">-=</operator> <call pos:start="423:27" pos:end="423:81"><name pos:start="423:27" pos:end="423:38">av_rescale_q</name><argument_list pos:start="423:39" pos:end="423:81">(<argument pos:start="423:40" pos:end="423:44"><expr pos:start="423:40" pos:end="423:44"><name pos:start="423:40" pos:end="423:44">delta</name></expr></argument>, <argument pos:start="423:47" pos:end="423:60"><expr pos:start="423:47" pos:end="423:60"><name pos:start="423:47" pos:end="423:60">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="423:63" pos:end="423:80"><expr pos:start="423:63" pos:end="423:80"><name pos:start="423:63" pos:end="423:80"><name pos:start="423:63" pos:end="423:65">ist</name><operator pos:start="423:66" pos:end="423:67">-&gt;</operator><name pos:start="423:68" pos:end="423:69">st</name><operator pos:start="423:70" pos:end="423:71">-&gt;</operator><name pos:start="423:72" pos:end="423:80">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="425:17" pos:end="427:86"><if pos:start="425:17" pos:end="427:86">if <condition pos:start="425:20" pos:end="425:46">(<expr pos:start="425:21" pos:end="425:45"><name pos:start="425:21" pos:end="425:27"><name pos:start="425:21" pos:end="425:23">pkt</name><operator pos:start="425:24" pos:end="425:24">.</operator><name pos:start="425:25" pos:end="425:27">pts</name></name> <operator pos:start="425:29" pos:end="425:30">!=</operator> <name pos:start="425:32" pos:end="425:45">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="427:21" pos:end="427:86"><block_content pos:start="427:21" pos:end="427:86">

                    <expr_stmt pos:start="427:21" pos:end="427:86"><expr pos:start="427:21" pos:end="427:85"><name pos:start="427:21" pos:end="427:27"><name pos:start="427:21" pos:end="427:23">pkt</name><operator pos:start="427:24" pos:end="427:24">.</operator><name pos:start="427:25" pos:end="427:27">pts</name></name><operator pos:start="427:28" pos:end="427:29">-=</operator> <call pos:start="427:31" pos:end="427:85"><name pos:start="427:31" pos:end="427:42">av_rescale_q</name><argument_list pos:start="427:43" pos:end="427:85">(<argument pos:start="427:44" pos:end="427:48"><expr pos:start="427:44" pos:end="427:48"><name pos:start="427:44" pos:end="427:48">delta</name></expr></argument>, <argument pos:start="427:51" pos:end="427:64"><expr pos:start="427:51" pos:end="427:64"><name pos:start="427:51" pos:end="427:64">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="427:67" pos:end="427:84"><expr pos:start="427:67" pos:end="427:84"><name pos:start="427:67" pos:end="427:84"><name pos:start="427:67" pos:end="427:69">ist</name><operator pos:start="427:70" pos:end="427:71">-&gt;</operator><name pos:start="427:72" pos:end="427:73">st</name><operator pos:start="427:74" pos:end="427:75">-&gt;</operator><name pos:start="427:76" pos:end="427:84">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="431:15" pos:end="465:13">else <block pos:start="431:20" pos:end="465:13">{<block_content pos:start="433:17" pos:end="463:17">

                <if_stmt pos:start="433:17" pos:end="443:17"><if pos:start="433:17" pos:end="443:17">if <condition pos:start="433:20" pos:end="437:40">( <expr pos:start="433:22" pos:end="437:39"><name pos:start="433:22" pos:end="433:26">delta</name> <operator pos:start="433:28" pos:end="433:28">&lt;</operator> <operator pos:start="433:30" pos:end="433:30">-</operator><literal type="number" pos:start="433:31" pos:end="433:33">1LL</literal><operator pos:start="433:34" pos:end="433:34">*</operator><name pos:start="433:35" pos:end="433:53">dts_error_threshold</name><operator pos:start="433:54" pos:end="433:54">*</operator><name pos:start="433:55" pos:end="433:66">AV_TIME_BASE</name> <operator pos:start="433:68" pos:end="433:69">||</operator>

                    <operator pos:start="435:21" pos:end="435:21">(</operator><name pos:start="435:22" pos:end="435:26">delta</name> <operator pos:start="435:28" pos:end="435:28">&gt;</operator> <literal type="number" pos:start="435:30" pos:end="435:32">1LL</literal><operator pos:start="435:33" pos:end="435:33">*</operator><name pos:start="435:34" pos:end="435:52">dts_error_threshold</name><operator pos:start="435:53" pos:end="435:53">*</operator><name pos:start="435:54" pos:end="435:65">AV_TIME_BASE</name> <operator pos:start="435:67" pos:end="435:68">&amp;&amp;</operator> <name pos:start="435:70" pos:end="435:95"><name pos:start="435:70" pos:end="435:72">ist</name><operator pos:start="435:73" pos:end="435:74">-&gt;</operator><name pos:start="435:75" pos:end="435:76">st</name><operator pos:start="435:77" pos:end="435:78">-&gt;</operator><name pos:start="435:79" pos:end="435:83">codec</name><operator pos:start="435:84" pos:end="435:85">-&gt;</operator><name pos:start="435:86" pos:end="435:95">codec_type</name></name> <operator pos:start="435:97" pos:end="435:98">!=</operator> <name pos:start="435:100" pos:end="435:120">AVMEDIA_TYPE_SUBTITLE</name><operator pos:start="435:121" pos:end="435:121">)</operator> <operator pos:start="435:123" pos:end="435:124">||</operator>

                     <name pos:start="437:22" pos:end="437:28">pkt_dts</name><operator pos:start="437:29" pos:end="437:29">+</operator><literal type="number" pos:start="437:30" pos:end="437:30">1</literal><operator pos:start="437:31" pos:end="437:31">&lt;</operator><name pos:start="437:32" pos:end="437:39"><name pos:start="437:32" pos:end="437:34">ist</name><operator pos:start="437:35" pos:end="437:36">-&gt;</operator><name pos:start="437:37" pos:end="437:39">pts</name></name></expr>)</condition><block pos:start="437:41" pos:end="443:17">{<block_content pos:start="439:21" pos:end="441:45">

                    <expr_stmt pos:start="439:21" pos:end="439:149"><expr pos:start="439:21" pos:end="439:148"><call pos:start="439:21" pos:end="439:148"><name pos:start="439:21" pos:end="439:26">av_log</name><argument_list pos:start="439:27" pos:end="439:148">(<argument pos:start="439:28" pos:end="439:31"><expr pos:start="439:28" pos:end="439:31"><name pos:start="439:28" pos:end="439:31">NULL</name></expr></argument>, <argument pos:start="439:34" pos:end="439:47"><expr pos:start="439:34" pos:end="439:47"><name pos:start="439:34" pos:end="439:47">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="439:50" pos:end="439:105"><expr pos:start="439:50" pos:end="439:105"><literal type="string" pos:start="439:50" pos:end="439:56">"DTS %"</literal><name pos:start="439:57" pos:end="439:62">PRId64</name><literal type="string" pos:start="439:63" pos:end="439:72">", next:%"</literal><name pos:start="439:73" pos:end="439:78">PRId64</name><literal type="string" pos:start="439:79" pos:end="439:105">" st:%d invalid dropping\n"</literal></expr></argument>, <argument pos:start="439:108" pos:end="439:114"><expr pos:start="439:108" pos:end="439:114"><name pos:start="439:108" pos:end="439:114"><name pos:start="439:108" pos:end="439:110">pkt</name><operator pos:start="439:111" pos:end="439:111">.</operator><name pos:start="439:112" pos:end="439:114">dts</name></name></expr></argument>, <argument pos:start="439:117" pos:end="439:129"><expr pos:start="439:117" pos:end="439:129"><name pos:start="439:117" pos:end="439:129"><name pos:start="439:117" pos:end="439:119">ist</name><operator pos:start="439:120" pos:end="439:121">-&gt;</operator><name pos:start="439:122" pos:end="439:129">next_dts</name></name></expr></argument>, <argument pos:start="439:132" pos:end="439:147"><expr pos:start="439:132" pos:end="439:147"><name pos:start="439:132" pos:end="439:147"><name pos:start="439:132" pos:end="439:134">pkt</name><operator pos:start="439:135" pos:end="439:135">.</operator><name pos:start="439:136" pos:end="439:147">stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="441:21" pos:end="441:45"><expr pos:start="441:21" pos:end="441:44"><name pos:start="441:21" pos:end="441:27"><name pos:start="441:21" pos:end="441:23">pkt</name><operator pos:start="441:24" pos:end="441:24">.</operator><name pos:start="441:25" pos:end="441:27">dts</name></name> <operator pos:start="441:29" pos:end="441:29">=</operator> <name pos:start="441:31" pos:end="441:44">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="445:17" pos:end="463:17"><if pos:start="445:17" pos:end="463:17">if <condition pos:start="445:20" pos:end="445:46">(<expr pos:start="445:21" pos:end="445:45"><name pos:start="445:21" pos:end="445:27"><name pos:start="445:21" pos:end="445:23">pkt</name><operator pos:start="445:24" pos:end="445:24">.</operator><name pos:start="445:25" pos:end="445:27">pts</name></name> <operator pos:start="445:29" pos:end="445:30">!=</operator> <name pos:start="445:32" pos:end="445:45">AV_NOPTS_VALUE</name></expr>)</condition><block pos:start="445:47" pos:end="463:17">{<block_content pos:start="447:21" pos:end="461:21">

                    <decl_stmt pos:start="447:21" pos:end="447:96"><decl pos:start="447:21" pos:end="447:95"><type pos:start="447:21" pos:end="447:27"><name pos:start="447:21" pos:end="447:27">int64_t</name></type> <name pos:start="447:29" pos:end="447:35">pkt_pts</name> <init pos:start="447:37" pos:end="447:95">= <expr pos:start="447:39" pos:end="447:95"><call pos:start="447:39" pos:end="447:95"><name pos:start="447:39" pos:end="447:50">av_rescale_q</name><argument_list pos:start="447:51" pos:end="447:95">(<argument pos:start="447:52" pos:end="447:58"><expr pos:start="447:52" pos:end="447:58"><name pos:start="447:52" pos:end="447:58"><name pos:start="447:52" pos:end="447:54">pkt</name><operator pos:start="447:55" pos:end="447:55">.</operator><name pos:start="447:56" pos:end="447:58">pts</name></name></expr></argument>, <argument pos:start="447:61" pos:end="447:78"><expr pos:start="447:61" pos:end="447:78"><name pos:start="447:61" pos:end="447:78"><name pos:start="447:61" pos:end="447:63">ist</name><operator pos:start="447:64" pos:end="447:65">-&gt;</operator><name pos:start="447:66" pos:end="447:67">st</name><operator pos:start="447:68" pos:end="447:69">-&gt;</operator><name pos:start="447:70" pos:end="447:78">time_base</name></name></expr></argument>, <argument pos:start="447:81" pos:end="447:94"><expr pos:start="447:81" pos:end="447:94"><name pos:start="447:81" pos:end="447:94">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="449:21" pos:end="449:54"><expr pos:start="449:21" pos:end="449:53"><name pos:start="449:21" pos:end="449:25">delta</name>   <operator pos:start="449:29" pos:end="449:29">=</operator> <name pos:start="449:31" pos:end="449:37">pkt_pts</name> <operator pos:start="449:39" pos:end="449:39">-</operator> <name pos:start="449:41" pos:end="449:53"><name pos:start="449:41" pos:end="449:43">ist</name><operator pos:start="449:44" pos:end="449:45">-&gt;</operator><name pos:start="449:46" pos:end="449:53">next_dts</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="451:21" pos:end="461:21"><if pos:start="451:21" pos:end="461:21">if <condition pos:start="451:24" pos:end="455:43">( <expr pos:start="451:26" pos:end="455:42"><name pos:start="451:26" pos:end="451:30">delta</name> <operator pos:start="451:32" pos:end="451:32">&lt;</operator> <operator pos:start="451:34" pos:end="451:34">-</operator><literal type="number" pos:start="451:35" pos:end="451:37">1LL</literal><operator pos:start="451:38" pos:end="451:38">*</operator><name pos:start="451:39" pos:end="451:57">dts_error_threshold</name><operator pos:start="451:58" pos:end="451:58">*</operator><name pos:start="451:59" pos:end="451:70">AV_TIME_BASE</name> <operator pos:start="451:72" pos:end="451:73">||</operator>

                        <operator pos:start="453:25" pos:end="453:25">(</operator><name pos:start="453:26" pos:end="453:30">delta</name> <operator pos:start="453:32" pos:end="453:32">&gt;</operator> <literal type="number" pos:start="453:34" pos:end="453:36">1LL</literal><operator pos:start="453:37" pos:end="453:37">*</operator><name pos:start="453:38" pos:end="453:56">dts_error_threshold</name><operator pos:start="453:57" pos:end="453:57">*</operator><name pos:start="453:58" pos:end="453:69">AV_TIME_BASE</name> <operator pos:start="453:71" pos:end="453:72">&amp;&amp;</operator> <name pos:start="453:74" pos:end="453:99"><name pos:start="453:74" pos:end="453:76">ist</name><operator pos:start="453:77" pos:end="453:78">-&gt;</operator><name pos:start="453:79" pos:end="453:80">st</name><operator pos:start="453:81" pos:end="453:82">-&gt;</operator><name pos:start="453:83" pos:end="453:87">codec</name><operator pos:start="453:88" pos:end="453:89">-&gt;</operator><name pos:start="453:90" pos:end="453:99">codec_type</name></name> <operator pos:start="453:101" pos:end="453:102">!=</operator> <name pos:start="453:104" pos:end="453:124">AVMEDIA_TYPE_SUBTITLE</name><operator pos:start="453:125" pos:end="453:125">)</operator> <operator pos:start="453:127" pos:end="453:128">||</operator>

                        <name pos:start="455:25" pos:end="455:31">pkt_pts</name><operator pos:start="455:32" pos:end="455:32">+</operator><literal type="number" pos:start="455:33" pos:end="455:33">1</literal><operator pos:start="455:34" pos:end="455:34">&lt;</operator><name pos:start="455:35" pos:end="455:42"><name pos:start="455:35" pos:end="455:37">ist</name><operator pos:start="455:38" pos:end="455:39">-&gt;</operator><name pos:start="455:40" pos:end="455:42">pts</name></name></expr>)</condition> <block pos:start="455:45" pos:end="461:21">{<block_content pos:start="457:25" pos:end="459:49">

                        <expr_stmt pos:start="457:25" pos:end="457:153"><expr pos:start="457:25" pos:end="457:152"><call pos:start="457:25" pos:end="457:152"><name pos:start="457:25" pos:end="457:30">av_log</name><argument_list pos:start="457:31" pos:end="457:152">(<argument pos:start="457:32" pos:end="457:35"><expr pos:start="457:32" pos:end="457:35"><name pos:start="457:32" pos:end="457:35">NULL</name></expr></argument>, <argument pos:start="457:38" pos:end="457:51"><expr pos:start="457:38" pos:end="457:51"><name pos:start="457:38" pos:end="457:51">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="457:54" pos:end="457:109"><expr pos:start="457:54" pos:end="457:109"><literal type="string" pos:start="457:54" pos:end="457:60">"PTS %"</literal><name pos:start="457:61" pos:end="457:66">PRId64</name><literal type="string" pos:start="457:67" pos:end="457:76">", next:%"</literal><name pos:start="457:77" pos:end="457:82">PRId64</name><literal type="string" pos:start="457:83" pos:end="457:109">" invalid dropping st:%d\n"</literal></expr></argument>, <argument pos:start="457:112" pos:end="457:118"><expr pos:start="457:112" pos:end="457:118"><name pos:start="457:112" pos:end="457:118"><name pos:start="457:112" pos:end="457:114">pkt</name><operator pos:start="457:115" pos:end="457:115">.</operator><name pos:start="457:116" pos:end="457:118">pts</name></name></expr></argument>, <argument pos:start="457:121" pos:end="457:133"><expr pos:start="457:121" pos:end="457:133"><name pos:start="457:121" pos:end="457:133"><name pos:start="457:121" pos:end="457:123">ist</name><operator pos:start="457:124" pos:end="457:125">-&gt;</operator><name pos:start="457:126" pos:end="457:133">next_dts</name></name></expr></argument>, <argument pos:start="457:136" pos:end="457:151"><expr pos:start="457:136" pos:end="457:151"><name pos:start="457:136" pos:end="457:151"><name pos:start="457:136" pos:end="457:138">pkt</name><operator pos:start="457:139" pos:end="457:139">.</operator><name pos:start="457:140" pos:end="457:151">stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="459:25" pos:end="459:49"><expr pos:start="459:25" pos:end="459:48"><name pos:start="459:25" pos:end="459:31"><name pos:start="459:25" pos:end="459:27">pkt</name><operator pos:start="459:28" pos:end="459:28">.</operator><name pos:start="459:29" pos:end="459:31">pts</name></name> <operator pos:start="459:33" pos:end="459:33">=</operator> <name pos:start="459:35" pos:end="459:48">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="471:9" pos:end="471:94">// fprintf(stderr,"read #%d.%d size=%d\n", ist-&gt;file_index, ist-&gt;st-&gt;index, pkt.size);</comment>

        <if_stmt pos:start="473:9" pos:end="493:9"><if pos:start="473:9" pos:end="493:9">if <condition pos:start="473:12" pos:end="475:63">(<expr pos:start="473:13" pos:end="475:62"><operator pos:start="473:13" pos:end="473:13">(</operator><name pos:start="473:14" pos:end="473:16">ret</name> <operator pos:start="473:18" pos:end="473:18">=</operator> <call pos:start="473:20" pos:end="473:43"><name pos:start="473:20" pos:end="473:32">output_packet</name><argument_list pos:start="473:33" pos:end="473:43">(<argument pos:start="473:34" pos:end="473:36"><expr pos:start="473:34" pos:end="473:36"><name pos:start="473:34" pos:end="473:36">ist</name></expr></argument>, <argument pos:start="473:39" pos:end="473:42"><expr pos:start="473:39" pos:end="473:42"><operator pos:start="473:39" pos:end="473:39">&amp;</operator><name pos:start="473:40" pos:end="473:42">pkt</name></expr></argument>)</argument_list></call><operator pos:start="473:44" pos:end="473:44">)</operator> <operator pos:start="473:46" pos:end="473:46">&lt;</operator> <literal type="number" pos:start="473:48" pos:end="473:48">0</literal> <operator pos:start="473:50" pos:end="473:51">||</operator>

            <operator pos:start="475:13" pos:end="475:13">(</operator><operator pos:start="475:14" pos:end="475:14">(</operator><name pos:start="475:15" pos:end="475:17">ret</name> <operator pos:start="475:19" pos:end="475:19">=</operator> <call pos:start="475:21" pos:end="475:34"><name pos:start="475:21" pos:end="475:32">poll_filters</name><argument_list pos:start="475:33" pos:end="475:34">()</argument_list></call><operator pos:start="475:35" pos:end="475:35">)</operator> <operator pos:start="475:37" pos:end="475:37">&lt;</operator> <literal type="number" pos:start="475:39" pos:end="475:39">0</literal> <operator pos:start="475:41" pos:end="475:42">&amp;&amp;</operator> <name pos:start="475:44" pos:end="475:46">ret</name> <operator pos:start="475:48" pos:end="475:49">!=</operator> <name pos:start="475:51" pos:end="475:61">AVERROR_EOF</name><operator pos:start="475:62" pos:end="475:62">)</operator></expr>)</condition> <block pos:start="475:65" pos:end="493:9">{<block_content pos:start="477:13" pos:end="491:21">

            <decl_stmt pos:start="477:13" pos:end="477:26"><decl pos:start="477:13" pos:end="477:25"><type pos:start="477:13" pos:end="477:16"><name pos:start="477:13" pos:end="477:16">char</name></type> <name pos:start="477:18" pos:end="477:25"><name pos:start="477:18" pos:end="477:20">buf</name><index pos:start="477:21" pos:end="477:25">[<expr pos:start="477:22" pos:end="477:24"><literal type="number" pos:start="477:22" pos:end="477:24">128</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:47"><expr pos:start="479:13" pos:end="479:46"><call pos:start="479:13" pos:end="479:46"><name pos:start="479:13" pos:end="479:23">av_strerror</name><argument_list pos:start="479:24" pos:end="479:46">(<argument pos:start="479:25" pos:end="479:27"><expr pos:start="479:25" pos:end="479:27"><name pos:start="479:25" pos:end="479:27">ret</name></expr></argument>, <argument pos:start="479:30" pos:end="479:32"><expr pos:start="479:30" pos:end="479:32"><name pos:start="479:30" pos:end="479:32">buf</name></expr></argument>, <argument pos:start="479:35" pos:end="479:45"><expr pos:start="479:35" pos:end="479:45"><sizeof pos:start="479:35" pos:end="479:45">sizeof<argument_list pos:start="479:41" pos:end="479:45">(<argument pos:start="479:42" pos:end="479:44"><expr pos:start="479:42" pos:end="479:44"><name pos:start="479:42" pos:end="479:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="483:57"><expr pos:start="481:13" pos:end="483:56"><call pos:start="481:13" pos:end="483:56"><name pos:start="481:13" pos:end="481:18">av_log</name><argument_list pos:start="481:19" pos:end="483:56">(<argument pos:start="481:20" pos:end="481:23"><expr pos:start="481:20" pos:end="481:23"><name pos:start="481:20" pos:end="481:23">NULL</name></expr></argument>, <argument pos:start="481:26" pos:end="481:37"><expr pos:start="481:26" pos:end="481:37"><name pos:start="481:26" pos:end="481:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="481:40" pos:end="481:81"><expr pos:start="481:40" pos:end="481:81"><literal type="string" pos:start="481:40" pos:end="481:81">"Error while decoding stream #%d:%d: %s\n"</literal></expr></argument>,

                   <argument pos:start="483:20" pos:end="483:34"><expr pos:start="483:20" pos:end="483:34"><name pos:start="483:20" pos:end="483:34"><name pos:start="483:20" pos:end="483:22">ist</name><operator pos:start="483:23" pos:end="483:24">-&gt;</operator><name pos:start="483:25" pos:end="483:34">file_index</name></name></expr></argument>, <argument pos:start="483:37" pos:end="483:50"><expr pos:start="483:37" pos:end="483:50"><name pos:start="483:37" pos:end="483:50"><name pos:start="483:37" pos:end="483:39">ist</name><operator pos:start="483:40" pos:end="483:41">-&gt;</operator><name pos:start="483:42" pos:end="483:43">st</name><operator pos:start="483:44" pos:end="483:45">-&gt;</operator><name pos:start="483:46" pos:end="483:50">index</name></name></expr></argument>, <argument pos:start="483:53" pos:end="483:55"><expr pos:start="483:53" pos:end="483:55"><name pos:start="483:53" pos:end="483:55">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="485:13" pos:end="487:32"><if pos:start="485:13" pos:end="487:32">if <condition pos:start="485:16" pos:end="485:30">(<expr pos:start="485:17" pos:end="485:29"><name pos:start="485:17" pos:end="485:29">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="487:17" pos:end="487:32"><block_content pos:start="487:17" pos:end="487:32">

                <expr_stmt pos:start="487:17" pos:end="487:32"><expr pos:start="487:17" pos:end="487:31"><call pos:start="487:17" pos:end="487:31"><name pos:start="487:17" pos:end="487:28">exit_program</name><argument_list pos:start="487:29" pos:end="487:31">(<argument pos:start="487:30" pos:end="487:30"><expr pos:start="487:30" pos:end="487:30"><literal type="number" pos:start="487:30" pos:end="487:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:33"><expr pos:start="489:13" pos:end="489:32"><call pos:start="489:13" pos:end="489:32"><name pos:start="489:13" pos:end="489:26">av_free_packet</name><argument_list pos:start="489:27" pos:end="489:32">(<argument pos:start="489:28" pos:end="489:31"><expr pos:start="489:28" pos:end="489:31"><operator pos:start="489:28" pos:end="489:28">&amp;</operator><name pos:start="489:29" pos:end="489:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="491:13" pos:end="491:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



    <label pos:start="497:5" pos:end="497:19"><name pos:start="497:5" pos:end="497:18">discard_packet</name>:</label>

        <expr_stmt pos:start="499:9" pos:end="499:29"><expr pos:start="499:9" pos:end="499:28"><call pos:start="499:9" pos:end="499:28"><name pos:start="499:9" pos:end="499:22">av_free_packet</name><argument_list pos:start="499:23" pos:end="499:28">(<argument pos:start="499:24" pos:end="499:27"><expr pos:start="499:24" pos:end="499:27"><operator pos:start="499:24" pos:end="499:24">&amp;</operator><name pos:start="499:25" pos:end="499:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="503:9" pos:end="503:75">/* dump report by using the output first video and audio streams */</comment>

        <expr_stmt pos:start="505:9" pos:end="505:47"><expr pos:start="505:9" pos:end="505:46"><call pos:start="505:9" pos:end="505:46"><name pos:start="505:9" pos:end="505:20">print_report</name><argument_list pos:start="505:21" pos:end="505:46">(<argument pos:start="505:22" pos:end="505:22"><expr pos:start="505:22" pos:end="505:22"><literal type="number" pos:start="505:22" pos:end="505:22">0</literal></expr></argument>, <argument pos:start="505:25" pos:end="505:35"><expr pos:start="505:25" pos:end="505:35"><name pos:start="505:25" pos:end="505:35">timer_start</name></expr></argument>, <argument pos:start="505:38" pos:end="505:45"><expr pos:start="505:38" pos:end="505:45"><name pos:start="505:38" pos:end="505:45">cur_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="511:5" pos:end="511:65">/* at the end of stream, we must flush the decoder buffers */</comment>

    <for pos:start="513:5" pos:end="523:5">for <control pos:start="513:9" pos:end="513:42">(<init pos:start="513:10" pos:end="513:15"><expr pos:start="513:10" pos:end="513:14"><name pos:start="513:10" pos:end="513:10">i</name> <operator pos:start="513:12" pos:end="513:12">=</operator> <literal type="number" pos:start="513:14" pos:end="513:14">0</literal></expr>;</init> <condition pos:start="513:17" pos:end="513:37"><expr pos:start="513:17" pos:end="513:36"><name pos:start="513:17" pos:end="513:17">i</name> <operator pos:start="513:19" pos:end="513:19">&lt;</operator> <name pos:start="513:21" pos:end="513:36">nb_input_streams</name></expr>;</condition> <incr pos:start="513:39" pos:end="513:41"><expr pos:start="513:39" pos:end="513:41"><name pos:start="513:39" pos:end="513:39">i</name><operator pos:start="513:40" pos:end="513:41">++</operator></expr></incr>)</control> <block pos:start="513:44" pos:end="523:5">{<block_content pos:start="515:9" pos:end="521:9">

        <expr_stmt pos:start="515:9" pos:end="515:31"><expr pos:start="515:9" pos:end="515:30"><name pos:start="515:9" pos:end="515:11">ist</name> <operator pos:start="515:13" pos:end="515:13">=</operator> <name pos:start="515:15" pos:end="515:30"><name pos:start="515:15" pos:end="515:27">input_streams</name><index pos:start="515:28" pos:end="515:30">[<expr pos:start="515:29" pos:end="515:29"><name pos:start="515:29" pos:end="515:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="517:9" pos:end="521:9"><if pos:start="517:9" pos:end="521:9">if <condition pos:start="517:12" pos:end="517:79">(<expr pos:start="517:13" pos:end="517:78"><operator pos:start="517:13" pos:end="517:13">!</operator><name pos:start="517:14" pos:end="517:41"><name pos:start="517:14" pos:end="517:24">input_files</name><index pos:start="517:25" pos:end="517:41">[<expr pos:start="517:26" pos:end="517:40"><name pos:start="517:26" pos:end="517:40"><name pos:start="517:26" pos:end="517:28">ist</name><operator pos:start="517:29" pos:end="517:30">-&gt;</operator><name pos:start="517:31" pos:end="517:40">file_index</name></name></expr>]</index></name><operator pos:start="517:42" pos:end="517:43">-&gt;</operator><name pos:start="517:44" pos:end="517:54">eof_reached</name> <operator pos:start="517:56" pos:end="517:57">&amp;&amp;</operator> <name pos:start="517:59" pos:end="517:78"><name pos:start="517:59" pos:end="517:61">ist</name><operator pos:start="517:62" pos:end="517:63">-&gt;</operator><name pos:start="517:64" pos:end="517:78">decoding_needed</name></name></expr>)</condition> <block pos:start="517:81" pos:end="521:9">{<block_content pos:start="519:13" pos:end="519:37">

            <expr_stmt pos:start="519:13" pos:end="519:37"><expr pos:start="519:13" pos:end="519:36"><call pos:start="519:13" pos:end="519:36"><name pos:start="519:13" pos:end="519:25">output_packet</name><argument_list pos:start="519:26" pos:end="519:36">(<argument pos:start="519:27" pos:end="519:29"><expr pos:start="519:27" pos:end="519:29"><name pos:start="519:27" pos:end="519:29">ist</name></expr></argument>, <argument pos:start="519:32" pos:end="519:35"><expr pos:start="519:32" pos:end="519:35"><name pos:start="519:32" pos:end="519:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="525:5" pos:end="525:19"><expr pos:start="525:5" pos:end="525:18"><call pos:start="525:5" pos:end="525:18"><name pos:start="525:5" pos:end="525:16">poll_filters</name><argument_list pos:start="525:17" pos:end="525:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="527:5" pos:end="527:21"><expr pos:start="527:5" pos:end="527:20"><call pos:start="527:5" pos:end="527:20"><name pos:start="527:5" pos:end="527:18">flush_encoders</name><argument_list pos:start="527:19" pos:end="527:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="531:5" pos:end="531:16"><expr pos:start="531:5" pos:end="531:15"><call pos:start="531:5" pos:end="531:15"><name pos:start="531:5" pos:end="531:13">term_exit</name><argument_list pos:start="531:14" pos:end="531:15">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="535:5" pos:end="535:52">/* write the trailer if needed and close file */</comment>

    <for pos:start="537:5" pos:end="543:5">for <control pos:start="537:9" pos:end="537:41">(<init pos:start="537:10" pos:end="537:15"><expr pos:start="537:10" pos:end="537:14"><name pos:start="537:10" pos:end="537:10">i</name> <operator pos:start="537:12" pos:end="537:12">=</operator> <literal type="number" pos:start="537:14" pos:end="537:14">0</literal></expr>;</init> <condition pos:start="537:17" pos:end="537:36"><expr pos:start="537:17" pos:end="537:35"><name pos:start="537:17" pos:end="537:17">i</name> <operator pos:start="537:19" pos:end="537:19">&lt;</operator> <name pos:start="537:21" pos:end="537:35">nb_output_files</name></expr>;</condition> <incr pos:start="537:38" pos:end="537:40"><expr pos:start="537:38" pos:end="537:40"><name pos:start="537:38" pos:end="537:38">i</name><operator pos:start="537:39" pos:end="537:40">++</operator></expr></incr>)</control> <block pos:start="537:43" pos:end="543:5">{<block_content pos:start="539:9" pos:end="541:29">

        <expr_stmt pos:start="539:9" pos:end="539:34"><expr pos:start="539:9" pos:end="539:33"><name pos:start="539:9" pos:end="539:10">os</name> <operator pos:start="539:12" pos:end="539:12">=</operator> <name pos:start="539:14" pos:end="539:28"><name pos:start="539:14" pos:end="539:25">output_files</name><index pos:start="539:26" pos:end="539:28">[<expr pos:start="539:27" pos:end="539:27"><name pos:start="539:27" pos:end="539:27">i</name></expr>]</index></name><operator pos:start="539:29" pos:end="539:30">-&gt;</operator><name pos:start="539:31" pos:end="539:33">ctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="541:9" pos:end="541:29"><expr pos:start="541:9" pos:end="541:28"><call pos:start="541:9" pos:end="541:28"><name pos:start="541:9" pos:end="541:24">av_write_trailer</name><argument_list pos:start="541:25" pos:end="541:28">(<argument pos:start="541:26" pos:end="541:27"><expr pos:start="541:26" pos:end="541:27"><name pos:start="541:26" pos:end="541:27">os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="547:5" pos:end="547:64">/* dump report by using the first video and audio streams */</comment>

    <expr_stmt pos:start="549:5" pos:end="549:47"><expr pos:start="549:5" pos:end="549:46"><call pos:start="549:5" pos:end="549:46"><name pos:start="549:5" pos:end="549:16">print_report</name><argument_list pos:start="549:17" pos:end="549:46">(<argument pos:start="549:18" pos:end="549:18"><expr pos:start="549:18" pos:end="549:18"><literal type="number" pos:start="549:18" pos:end="549:18">1</literal></expr></argument>, <argument pos:start="549:21" pos:end="549:31"><expr pos:start="549:21" pos:end="549:31"><name pos:start="549:21" pos:end="549:31">timer_start</name></expr></argument>, <argument pos:start="549:34" pos:end="549:45"><expr pos:start="549:34" pos:end="549:45"><call pos:start="549:34" pos:end="549:45"><name pos:start="549:34" pos:end="549:43">av_gettime</name><argument_list pos:start="549:44" pos:end="549:45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="553:5" pos:end="553:28">/* close each encoder */</comment>

    <for pos:start="555:5" pos:end="567:5">for <control pos:start="555:9" pos:end="555:43">(<init pos:start="555:10" pos:end="555:15"><expr pos:start="555:10" pos:end="555:14"><name pos:start="555:10" pos:end="555:10">i</name> <operator pos:start="555:12" pos:end="555:12">=</operator> <literal type="number" pos:start="555:14" pos:end="555:14">0</literal></expr>;</init> <condition pos:start="555:17" pos:end="555:38"><expr pos:start="555:17" pos:end="555:37"><name pos:start="555:17" pos:end="555:17">i</name> <operator pos:start="555:19" pos:end="555:19">&lt;</operator> <name pos:start="555:21" pos:end="555:37">nb_output_streams</name></expr>;</condition> <incr pos:start="555:40" pos:end="555:42"><expr pos:start="555:40" pos:end="555:42"><name pos:start="555:40" pos:end="555:40">i</name><operator pos:start="555:41" pos:end="555:42">++</operator></expr></incr>)</control> <block pos:start="555:45" pos:end="567:5">{<block_content pos:start="557:9" pos:end="565:9">

        <expr_stmt pos:start="557:9" pos:end="557:32"><expr pos:start="557:9" pos:end="557:31"><name pos:start="557:9" pos:end="557:11">ost</name> <operator pos:start="557:13" pos:end="557:13">=</operator> <name pos:start="557:15" pos:end="557:31"><name pos:start="557:15" pos:end="557:28">output_streams</name><index pos:start="557:29" pos:end="557:31">[<expr pos:start="557:30" pos:end="557:30"><name pos:start="557:30" pos:end="557:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="559:9" pos:end="565:9"><if pos:start="559:9" pos:end="565:9">if <condition pos:start="559:12" pos:end="559:33">(<expr pos:start="559:13" pos:end="559:32"><name pos:start="559:13" pos:end="559:32"><name pos:start="559:13" pos:end="559:15">ost</name><operator pos:start="559:16" pos:end="559:17">-&gt;</operator><name pos:start="559:18" pos:end="559:32">encoding_needed</name></name></expr>)</condition> <block pos:start="559:35" pos:end="565:9">{<block_content pos:start="561:13" pos:end="563:42">

            <expr_stmt pos:start="561:13" pos:end="561:48"><expr pos:start="561:13" pos:end="561:47"><call pos:start="561:13" pos:end="561:47"><name pos:start="561:13" pos:end="561:20">av_freep</name><argument_list pos:start="561:21" pos:end="561:47">(<argument pos:start="561:22" pos:end="561:46"><expr pos:start="561:22" pos:end="561:46"><operator pos:start="561:22" pos:end="561:22">&amp;</operator><name pos:start="561:23" pos:end="561:46"><name pos:start="561:23" pos:end="561:25">ost</name><operator pos:start="561:26" pos:end="561:27">-&gt;</operator><name pos:start="561:28" pos:end="561:29">st</name><operator pos:start="561:30" pos:end="561:31">-&gt;</operator><name pos:start="561:32" pos:end="561:36">codec</name><operator pos:start="561:37" pos:end="561:38">-&gt;</operator><name pos:start="561:39" pos:end="561:46">stats_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="563:13" pos:end="563:42"><expr pos:start="563:13" pos:end="563:41"><call pos:start="563:13" pos:end="563:41"><name pos:start="563:13" pos:end="563:25">avcodec_close</name><argument_list pos:start="563:26" pos:end="563:41">(<argument pos:start="563:27" pos:end="563:40"><expr pos:start="563:27" pos:end="563:40"><name pos:start="563:27" pos:end="563:40"><name pos:start="563:27" pos:end="563:29">ost</name><operator pos:start="563:30" pos:end="563:31">-&gt;</operator><name pos:start="563:32" pos:end="563:33">st</name><operator pos:start="563:34" pos:end="563:35">-&gt;</operator><name pos:start="563:36" pos:end="563:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="571:5" pos:end="571:28">/* close each decoder */</comment>

    <for pos:start="573:5" pos:end="583:5">for <control pos:start="573:9" pos:end="573:42">(<init pos:start="573:10" pos:end="573:15"><expr pos:start="573:10" pos:end="573:14"><name pos:start="573:10" pos:end="573:10">i</name> <operator pos:start="573:12" pos:end="573:12">=</operator> <literal type="number" pos:start="573:14" pos:end="573:14">0</literal></expr>;</init> <condition pos:start="573:17" pos:end="573:37"><expr pos:start="573:17" pos:end="573:36"><name pos:start="573:17" pos:end="573:17">i</name> <operator pos:start="573:19" pos:end="573:19">&lt;</operator> <name pos:start="573:21" pos:end="573:36">nb_input_streams</name></expr>;</condition> <incr pos:start="573:39" pos:end="573:41"><expr pos:start="573:39" pos:end="573:41"><name pos:start="573:39" pos:end="573:39">i</name><operator pos:start="573:40" pos:end="573:41">++</operator></expr></incr>)</control> <block pos:start="573:44" pos:end="583:5">{<block_content pos:start="575:9" pos:end="581:9">

        <expr_stmt pos:start="575:9" pos:end="575:31"><expr pos:start="575:9" pos:end="575:30"><name pos:start="575:9" pos:end="575:11">ist</name> <operator pos:start="575:13" pos:end="575:13">=</operator> <name pos:start="575:15" pos:end="575:30"><name pos:start="575:15" pos:end="575:27">input_streams</name><index pos:start="575:28" pos:end="575:30">[<expr pos:start="575:29" pos:end="575:29"><name pos:start="575:29" pos:end="575:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="577:9" pos:end="581:9"><if pos:start="577:9" pos:end="581:9">if <condition pos:start="577:12" pos:end="577:33">(<expr pos:start="577:13" pos:end="577:32"><name pos:start="577:13" pos:end="577:32"><name pos:start="577:13" pos:end="577:15">ist</name><operator pos:start="577:16" pos:end="577:17">-&gt;</operator><name pos:start="577:18" pos:end="577:32">decoding_needed</name></name></expr>)</condition> <block pos:start="577:35" pos:end="581:9">{<block_content pos:start="579:13" pos:end="579:42">

            <expr_stmt pos:start="579:13" pos:end="579:42"><expr pos:start="579:13" pos:end="579:41"><call pos:start="579:13" pos:end="579:41"><name pos:start="579:13" pos:end="579:25">avcodec_close</name><argument_list pos:start="579:26" pos:end="579:41">(<argument pos:start="579:27" pos:end="579:40"><expr pos:start="579:27" pos:end="579:40"><name pos:start="579:27" pos:end="579:40"><name pos:start="579:27" pos:end="579:29">ist</name><operator pos:start="579:30" pos:end="579:31">-&gt;</operator><name pos:start="579:32" pos:end="579:33">st</name><operator pos:start="579:34" pos:end="579:35">-&gt;</operator><name pos:start="579:36" pos:end="579:40">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="587:5" pos:end="587:20">/* finished ! */</comment>

    <expr_stmt pos:start="589:5" pos:end="589:12"><expr pos:start="589:5" pos:end="589:11"><name pos:start="589:5" pos:end="589:7">ret</name> <operator pos:start="589:9" pos:end="589:9">=</operator> <literal type="number" pos:start="589:11" pos:end="589:11">0</literal></expr>;</expr_stmt>



 <label pos:start="593:2" pos:end="593:6"><name pos:start="593:2" pos:end="593:5">fail</name>:</label>

    <expr_stmt pos:start="595:5" pos:end="595:25"><expr pos:start="595:5" pos:end="595:24"><call pos:start="595:5" pos:end="595:24"><name pos:start="595:5" pos:end="595:12">av_freep</name><argument_list pos:start="595:13" pos:end="595:24">(<argument pos:start="595:14" pos:end="595:23"><expr pos:start="595:14" pos:end="595:23"><operator pos:start="595:14" pos:end="595:14">&amp;</operator><name pos:start="595:15" pos:end="595:23">no_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="599:5" pos:end="629:5"><if pos:start="599:5" pos:end="629:5">if <condition pos:start="599:8" pos:end="599:23">(<expr pos:start="599:9" pos:end="599:22"><name pos:start="599:9" pos:end="599:22">output_streams</name></expr>)</condition> <block pos:start="599:25" pos:end="629:5">{<block_content pos:start="601:9" pos:end="627:9">

        <for pos:start="601:9" pos:end="627:9">for <control pos:start="601:13" pos:end="601:47">(<init pos:start="601:14" pos:end="601:19"><expr pos:start="601:14" pos:end="601:18"><name pos:start="601:14" pos:end="601:14">i</name> <operator pos:start="601:16" pos:end="601:16">=</operator> <literal type="number" pos:start="601:18" pos:end="601:18">0</literal></expr>;</init> <condition pos:start="601:21" pos:end="601:42"><expr pos:start="601:21" pos:end="601:41"><name pos:start="601:21" pos:end="601:21">i</name> <operator pos:start="601:23" pos:end="601:23">&lt;</operator> <name pos:start="601:25" pos:end="601:41">nb_output_streams</name></expr>;</condition> <incr pos:start="601:44" pos:end="601:46"><expr pos:start="601:44" pos:end="601:46"><name pos:start="601:44" pos:end="601:44">i</name><operator pos:start="601:45" pos:end="601:46">++</operator></expr></incr>)</control> <block pos:start="601:49" pos:end="627:9">{<block_content pos:start="603:13" pos:end="625:13">

            <expr_stmt pos:start="603:13" pos:end="603:36"><expr pos:start="603:13" pos:end="603:35"><name pos:start="603:13" pos:end="603:15">ost</name> <operator pos:start="603:17" pos:end="603:17">=</operator> <name pos:start="603:19" pos:end="603:35"><name pos:start="603:19" pos:end="603:32">output_streams</name><index pos:start="603:33" pos:end="603:35">[<expr pos:start="603:34" pos:end="603:34"><name pos:start="603:34" pos:end="603:34">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="605:13" pos:end="625:13"><if pos:start="605:13" pos:end="625:13">if <condition pos:start="605:16" pos:end="605:20">(<expr pos:start="605:17" pos:end="605:19"><name pos:start="605:17" pos:end="605:19">ost</name></expr>)</condition> <block pos:start="605:22" pos:end="625:13">{<block_content pos:start="607:17" pos:end="623:41">

                <if_stmt pos:start="607:17" pos:end="609:57"><if pos:start="607:17" pos:end="609:57">if <condition pos:start="607:20" pos:end="607:37">(<expr pos:start="607:21" pos:end="607:36"><name pos:start="607:21" pos:end="607:36"><name pos:start="607:21" pos:end="607:23">ost</name><operator pos:start="607:24" pos:end="607:25">-&gt;</operator><name pos:start="607:26" pos:end="607:36">stream_copy</name></name></expr>)</condition><block type="pseudo" pos:start="609:21" pos:end="609:57"><block_content pos:start="609:21" pos:end="609:57">

                    <expr_stmt pos:start="609:21" pos:end="609:57"><expr pos:start="609:21" pos:end="609:56"><call pos:start="609:21" pos:end="609:56"><name pos:start="609:21" pos:end="609:28">av_freep</name><argument_list pos:start="609:29" pos:end="609:56">(<argument pos:start="609:30" pos:end="609:55"><expr pos:start="609:30" pos:end="609:55"><operator pos:start="609:30" pos:end="609:30">&amp;</operator><name pos:start="609:31" pos:end="609:55"><name pos:start="609:31" pos:end="609:33">ost</name><operator pos:start="609:34" pos:end="609:35">-&gt;</operator><name pos:start="609:36" pos:end="609:37">st</name><operator pos:start="609:38" pos:end="609:39">-&gt;</operator><name pos:start="609:40" pos:end="609:44">codec</name><operator pos:start="609:45" pos:end="609:46">-&gt;</operator><name pos:start="609:47" pos:end="609:55">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="611:17" pos:end="617:17"><if pos:start="611:17" pos:end="617:17">if <condition pos:start="611:20" pos:end="611:33">(<expr pos:start="611:21" pos:end="611:32"><name pos:start="611:21" pos:end="611:32"><name pos:start="611:21" pos:end="611:23">ost</name><operator pos:start="611:24" pos:end="611:25">-&gt;</operator><name pos:start="611:26" pos:end="611:32">logfile</name></name></expr>)</condition> <block pos:start="611:35" pos:end="617:17">{<block_content pos:start="613:21" pos:end="615:40">

                    <expr_stmt pos:start="613:21" pos:end="613:41"><expr pos:start="613:21" pos:end="613:40"><call pos:start="613:21" pos:end="613:40"><name pos:start="613:21" pos:end="613:26">fclose</name><argument_list pos:start="613:27" pos:end="613:40">(<argument pos:start="613:28" pos:end="613:39"><expr pos:start="613:28" pos:end="613:39"><name pos:start="613:28" pos:end="613:39"><name pos:start="613:28" pos:end="613:30">ost</name><operator pos:start="613:31" pos:end="613:32">-&gt;</operator><name pos:start="613:33" pos:end="613:39">logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="615:21" pos:end="615:40"><expr pos:start="615:21" pos:end="615:39"><name pos:start="615:21" pos:end="615:32"><name pos:start="615:21" pos:end="615:23">ost</name><operator pos:start="615:24" pos:end="615:25">-&gt;</operator><name pos:start="615:26" pos:end="615:32">logfile</name></name> <operator pos:start="615:34" pos:end="615:34">=</operator> <name pos:start="615:36" pos:end="615:39">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="619:17" pos:end="619:59"><expr pos:start="619:17" pos:end="619:58"><call pos:start="619:17" pos:end="619:58"><name pos:start="619:17" pos:end="619:24">av_freep</name><argument_list pos:start="619:25" pos:end="619:58">(<argument pos:start="619:26" pos:end="619:57"><expr pos:start="619:26" pos:end="619:57"><operator pos:start="619:26" pos:end="619:26">&amp;</operator><name pos:start="619:27" pos:end="619:57"><name pos:start="619:27" pos:end="619:29">ost</name><operator pos:start="619:30" pos:end="619:31">-&gt;</operator><name pos:start="619:32" pos:end="619:33">st</name><operator pos:start="619:34" pos:end="619:35">-&gt;</operator><name pos:start="619:36" pos:end="619:40">codec</name><operator pos:start="619:41" pos:end="619:42">-&gt;</operator><name pos:start="619:43" pos:end="619:57">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="621:17" pos:end="621:44"><expr pos:start="621:17" pos:end="621:43"><call pos:start="621:17" pos:end="621:43"><name pos:start="621:17" pos:end="621:23">av_free</name><argument_list pos:start="621:24" pos:end="621:43">(<argument pos:start="621:25" pos:end="621:42"><expr pos:start="621:25" pos:end="621:42"><name pos:start="621:25" pos:end="621:42"><name pos:start="621:25" pos:end="621:27">ost</name><operator pos:start="621:28" pos:end="621:29">-&gt;</operator><name pos:start="621:30" pos:end="621:42">forced_kf_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="623:17" pos:end="623:41"><expr pos:start="623:17" pos:end="623:40"><call pos:start="623:17" pos:end="623:40"><name pos:start="623:17" pos:end="623:28">av_dict_free</name><argument_list pos:start="623:29" pos:end="623:40">(<argument pos:start="623:30" pos:end="623:39"><expr pos:start="623:30" pos:end="623:39"><operator pos:start="623:30" pos:end="623:30">&amp;</operator><name pos:start="623:31" pos:end="623:39"><name pos:start="623:31" pos:end="623:33">ost</name><operator pos:start="623:34" pos:end="623:35">-&gt;</operator><name pos:start="623:36" pos:end="623:39">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <return pos:start="631:5" pos:end="631:15">return <expr pos:start="631:12" pos:end="631:14"><name pos:start="631:12" pos:end="631:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
