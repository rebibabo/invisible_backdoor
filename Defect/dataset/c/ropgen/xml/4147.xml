<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4147.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">sigwait_compat</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:34"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:16">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:30"><name pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:28">sigfd_compat_info</name></name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:34">info</name> <init pos:start="5:36" pos:end="5:43">= <expr pos:start="5:38" pos:end="5:43"><name pos:start="5:38" pos:end="5:43">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:16">all</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><call pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:14">sigfillset</name><argument_list pos:start="13:15" pos:end="13:20">(<argument pos:start="13:16" pos:end="13:19"><expr pos:start="13:16" pos:end="13:19"><operator pos:start="13:16" pos:end="13:16">&amp;</operator><name pos:start="13:17" pos:end="13:19">all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><call pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:15">sigprocmask</name><argument_list pos:start="15:16" pos:end="15:38">(<argument pos:start="15:17" pos:end="15:25"><expr pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:25">SIG_BLOCK</name></expr></argument>, <argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><operator pos:start="15:28" pos:end="15:28">&amp;</operator><name pos:start="15:29" pos:end="15:31">all</name></expr></argument>, <argument pos:start="15:34" pos:end="15:37"><expr pos:start="15:34" pos:end="15:37"><name pos:start="15:34" pos:end="15:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="19:5" pos:end="79:23">do <block pos:start="19:8" pos:end="79:5">{<block_content pos:start="21:9" pos:end="77:9">

        <decl_stmt pos:start="21:9" pos:end="21:26"><decl pos:start="21:9" pos:end="21:25"><type pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:17">siginfo_t</name></type> <name pos:start="21:19" pos:end="21:25">siginfo</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:49"><expr pos:start="25:9" pos:end="25:48"><name pos:start="25:9" pos:end="25:11">err</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:48"><name pos:start="25:15" pos:end="25:25">sigwaitinfo</name><argument_list pos:start="25:26" pos:end="25:48">(<argument pos:start="25:27" pos:end="25:37"><expr pos:start="25:27" pos:end="25:37"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:37"><name pos:start="25:28" pos:end="25:31">info</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:37">mask</name></name></expr></argument>, <argument pos:start="25:40" pos:end="25:47"><expr pos:start="25:40" pos:end="25:47"><operator pos:start="25:40" pos:end="25:40">&amp;</operator><name pos:start="25:41" pos:end="25:47">siginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:40">(<expr pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:15">err</name> <operator pos:start="27:17" pos:end="27:18">==</operator> <operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal> <operator pos:start="27:23" pos:end="27:24">&amp;&amp;</operator> <name pos:start="27:26" pos:end="27:30">errno</name> <operator pos:start="27:32" pos:end="27:33">==</operator> <name pos:start="27:35" pos:end="27:39">EINTR</name></expr>)</condition> <block pos:start="27:42" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:21">

            <expr_stmt pos:start="29:13" pos:end="29:20"><expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:15">err</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>;</expr_stmt>

            <continue pos:start="31:13" pos:end="31:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="77:9"><if pos:start="37:9" pos:end="77:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:15">err</name> <operator pos:start="37:17" pos:end="37:17">&gt;</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="77:9">{<block_content pos:start="39:13" pos:end="75:13">

            <decl_stmt pos:start="39:13" pos:end="39:29"><decl pos:start="39:13" pos:end="39:28"><type pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">char</name></type> <name pos:start="39:18" pos:end="39:28"><name pos:start="39:18" pos:end="39:23">buffer</name><index pos:start="39:24" pos:end="39:28">[<expr pos:start="39:25" pos:end="39:27"><literal type="number" pos:start="39:25" pos:end="39:27">128</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="41:30"><decl pos:start="41:13" pos:end="41:29"><type pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:18">size_t</name></type> <name pos:start="41:20" pos:end="41:25">offset</name> <init pos:start="41:27" pos:end="41:29">= <expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="45:13" pos:end="45:46"><expr pos:start="45:13" pos:end="45:45"><call pos:start="45:13" pos:end="45:45"><name pos:start="45:13" pos:end="45:18">memcpy</name><argument_list pos:start="45:19" pos:end="45:45">(<argument pos:start="45:20" pos:end="45:25"><expr pos:start="45:20" pos:end="45:25"><name pos:start="45:20" pos:end="45:25">buffer</name></expr></argument>, <argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:31">err</name></expr></argument>, <argument pos:start="45:34" pos:end="45:44"><expr pos:start="45:34" pos:end="45:44"><sizeof pos:start="45:34" pos:end="45:44">sizeof<argument_list pos:start="45:40" pos:end="45:44">(<argument pos:start="45:41" pos:end="45:43"><expr pos:start="45:41" pos:end="45:43"><name pos:start="45:41" pos:end="45:43">err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="47:13" pos:end="75:13">while <condition pos:start="47:19" pos:end="47:43">(<expr pos:start="47:20" pos:end="47:42"><name pos:start="47:20" pos:end="47:25">offset</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <sizeof pos:start="47:29" pos:end="47:42">sizeof<argument_list pos:start="47:35" pos:end="47:42">(<argument pos:start="47:36" pos:end="47:41"><expr pos:start="47:36" pos:end="47:41"><name pos:start="47:36" pos:end="47:41">buffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="47:45" pos:end="75:13">{<block_content pos:start="49:17" pos:end="73:30">

                <decl_stmt pos:start="49:17" pos:end="49:28"><decl pos:start="49:17" pos:end="49:27"><type pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:23">ssize_t</name></type> <name pos:start="49:25" pos:end="49:27">len</name></decl>;</decl_stmt>



                <expr_stmt pos:start="53:17" pos:end="55:53"><expr pos:start="53:17" pos:end="55:52"><name pos:start="53:17" pos:end="53:19">len</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="55:52"><name pos:start="53:23" pos:end="53:27">write</name><argument_list pos:start="53:28" pos:end="55:52">(<argument pos:start="53:29" pos:end="53:36"><expr pos:start="53:29" pos:end="53:36"><name pos:start="53:29" pos:end="53:36"><name pos:start="53:29" pos:end="53:32">info</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:36">fd</name></name></expr></argument>, <argument pos:start="53:39" pos:end="53:53"><expr pos:start="53:39" pos:end="53:53"><name pos:start="53:39" pos:end="53:44">buffer</name> <operator pos:start="53:46" pos:end="53:46">+</operator> <name pos:start="53:48" pos:end="53:53">offset</name></expr></argument>,

                            <argument pos:start="55:29" pos:end="55:51"><expr pos:start="55:29" pos:end="55:51"><sizeof pos:start="55:29" pos:end="55:42">sizeof<argument_list pos:start="55:35" pos:end="55:42">(<argument pos:start="55:36" pos:end="55:41"><expr pos:start="55:36" pos:end="55:41"><name pos:start="55:36" pos:end="55:41">buffer</name></expr></argument>)</argument_list></sizeof> <operator pos:start="55:44" pos:end="55:44">-</operator> <name pos:start="55:46" pos:end="55:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="57:17" pos:end="59:29"><if pos:start="57:17" pos:end="59:29">if <condition pos:start="57:20" pos:end="57:48">(<expr pos:start="57:21" pos:end="57:47"><name pos:start="57:21" pos:end="57:23">len</name> <operator pos:start="57:25" pos:end="57:26">==</operator> <operator pos:start="57:28" pos:end="57:28">-</operator><literal type="number" pos:start="57:29" pos:end="57:29">1</literal> <operator pos:start="57:31" pos:end="57:32">&amp;&amp;</operator> <name pos:start="57:34" pos:end="57:38">errno</name> <operator pos:start="57:40" pos:end="57:41">==</operator> <name pos:start="57:43" pos:end="57:47">EINTR</name></expr>)</condition><block type="pseudo" pos:start="59:21" pos:end="59:29"><block_content pos:start="59:21" pos:end="59:29">

                    <continue pos:start="59:21" pos:end="59:29">continue;</continue></block_content></block></if></if_stmt>



                <if_stmt pos:start="63:17" pos:end="69:17"><if pos:start="63:17" pos:end="69:17">if <condition pos:start="63:20" pos:end="63:29">(<expr pos:start="63:21" pos:end="63:28"><name pos:start="63:21" pos:end="63:23">len</name> <operator pos:start="63:25" pos:end="63:26">&lt;=</operator> <literal type="number" pos:start="63:28" pos:end="63:28">0</literal></expr>)</condition> <block pos:start="63:31" pos:end="69:17">{<block_content pos:start="65:21" pos:end="67:26">

                    <expr_stmt pos:start="65:21" pos:end="65:29"><expr pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:23">err</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <operator pos:start="65:27" pos:end="65:27">-</operator><literal type="number" pos:start="65:28" pos:end="65:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="67:21" pos:end="67:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="73:17" pos:end="73:30"><expr pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:22">offset</name> <operator pos:start="73:24" pos:end="73:25">+=</operator> <name pos:start="73:27" pos:end="73:29">len</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="79:13" pos:end="79:22">(<expr pos:start="79:14" pos:end="79:21"><name pos:start="79:14" pos:end="79:16">err</name> <operator pos:start="79:18" pos:end="79:19">&gt;=</operator> <literal type="number" pos:start="79:21" pos:end="79:21">0</literal></expr>)</condition>;</do>



    <return pos:start="83:5" pos:end="83:16">return <expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
