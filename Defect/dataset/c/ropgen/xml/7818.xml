<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7818.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">vnc_refresh_server_surface</name><parameter_list pos:start="1:38" pos:end="1:53">(<parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:48">VncDisplay</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">vd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:21">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">width</name> <init pos:start="5:15" pos:end="5:52">= <expr pos:start="5:17" pos:end="5:52"><call pos:start="5:17" pos:end="5:52"><name pos:start="5:17" pos:end="5:38">pixman_image_get_width</name><argument_list pos:start="5:39" pos:end="5:52">(<argument pos:start="5:40" pos:end="5:51"><expr pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:41">vd</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:48">guest</name><operator pos:start="5:49" pos:end="5:49">.</operator><name pos:start="5:50" pos:end="5:51">fb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">height</name> <init pos:start="7:16" pos:end="7:54">= <expr pos:start="7:18" pos:end="7:54"><call pos:start="7:18" pos:end="7:54"><name pos:start="7:18" pos:end="7:40">pixman_image_get_height</name><argument_list pos:start="7:41" pos:end="7:54">(<argument pos:start="7:42" pos:end="7:53"><expr pos:start="7:42" pos:end="7:53"><name pos:start="7:42" pos:end="7:53"><name pos:start="7:42" pos:end="7:43">vd</name><operator pos:start="7:44" pos:end="7:45">-&gt;</operator><name pos:start="7:46" pos:end="7:50">guest</name><operator pos:start="7:51" pos:end="7:51">.</operator><name pos:start="7:52" pos:end="7:53">fb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:22">guest_row</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:23">server_row</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">cmp_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">VncState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">vs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">has_dirty</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">pixman_image_t</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:26">tmpbuf</name> <init pos:start="21:28" pos:end="21:33">= <expr pos:start="21:30" pos:end="21:33"><name pos:start="21:30" pos:end="21:33">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:18">timeval</name></name></type> <name pos:start="25:20" pos:end="25:21">tv</name> <init pos:start="25:23" pos:end="25:32">= <expr pos:start="25:25" pos:end="25:32"><block pos:start="25:25" pos:end="25:32">{ <expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr>, <expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:11">vd</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:25">non_adaptive</name></name></expr>)</condition> <block pos:start="29:28" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:46">

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:20">gettimeofday</name><argument_list pos:start="31:21" pos:end="31:31">(<argument pos:start="31:22" pos:end="31:24"><expr pos:start="31:22" pos:end="31:24"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:24">tv</name></expr></argument>, <argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><name pos:start="31:27" pos:end="31:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:17">has_dirty</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="33:45"><name pos:start="33:21" pos:end="33:36">vnc_update_stats</name><argument_list pos:start="33:37" pos:end="33:45">(<argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">vd</name></expr></argument>, <argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><operator pos:start="33:42" pos:end="33:42">&amp;</operator><name pos:start="33:43" pos:end="33:44">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="47:7">/*

     * Walk through the guest dirty map.

     * Check and copy modified bits from guest to server surface.

     * Update server dirty map.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:13">cmp_bytes</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <literal type="number" pos:start="49:17" pos:end="49:18">64</literal></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:45">(<expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:17">cmp_bytes</name> <operator pos:start="51:19" pos:end="51:19">&gt;</operator> <call pos:start="51:21" pos:end="51:44"><name pos:start="51:21" pos:end="51:40">vnc_server_fb_stride</name><argument_list pos:start="51:41" pos:end="51:44">(<argument pos:start="51:42" pos:end="51:43"><expr pos:start="51:42" pos:end="51:43"><name pos:start="51:42" pos:end="51:43">vd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:47" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:45">

        <expr_stmt pos:start="53:9" pos:end="53:45"><expr pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:17">cmp_bytes</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:44"><name pos:start="53:21" pos:end="53:40">vnc_server_fb_stride</name><argument_list pos:start="53:41" pos:end="53:44">(<argument pos:start="53:42" pos:end="53:43"><expr pos:start="53:42" pos:end="53:43"><name pos:start="53:42" pos:end="53:43">vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:49">(<expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:10">vd</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:17">guest</name><operator pos:start="57:18" pos:end="57:18">.</operator><name pos:start="57:19" pos:end="57:24">format</name></name> <operator pos:start="57:26" pos:end="57:27">!=</operator> <name pos:start="57:29" pos:end="57:48">VNC_SERVER_FB_FORMAT</name></expr>)</condition> <block pos:start="57:51" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:73">

        <decl_stmt pos:start="59:9" pos:end="59:55"><decl pos:start="59:9" pos:end="59:54"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:17">width</name> <init pos:start="59:19" pos:end="59:54">= <expr pos:start="59:21" pos:end="59:54"><call pos:start="59:21" pos:end="59:54"><name pos:start="59:21" pos:end="59:42">pixman_image_get_width</name><argument_list pos:start="59:43" pos:end="59:54">(<argument pos:start="59:44" pos:end="59:53"><expr pos:start="59:44" pos:end="59:53"><name pos:start="59:44" pos:end="59:53"><name pos:start="59:44" pos:end="59:45">vd</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:53">server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:14">tmpbuf</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:72"><name pos:start="61:18" pos:end="61:43">qemu_pixman_linebuf_create</name><argument_list pos:start="61:44" pos:end="61:72">(<argument pos:start="61:45" pos:end="61:64"><expr pos:start="61:45" pos:end="61:64"><name pos:start="61:45" pos:end="61:64">VNC_SERVER_FB_FORMAT</name></expr></argument>, <argument pos:start="61:67" pos:end="61:71"><expr pos:start="61:67" pos:end="61:71"><name pos:start="61:67" pos:end="61:71">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:63"><expr pos:start="65:5" pos:end="65:62"><name pos:start="65:5" pos:end="65:13">guest_row</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <operator pos:start="65:17" pos:end="65:17">(</operator><name pos:start="65:18" pos:end="65:24">uint8_t</name> <operator pos:start="65:26" pos:end="65:26">*</operator><operator pos:start="65:27" pos:end="65:27">)</operator><call pos:start="65:28" pos:end="65:62"><name pos:start="65:28" pos:end="65:48">pixman_image_get_data</name><argument_list pos:start="65:49" pos:end="65:62">(<argument pos:start="65:50" pos:end="65:61"><expr pos:start="65:50" pos:end="65:61"><name pos:start="65:50" pos:end="65:61"><name pos:start="65:50" pos:end="65:51">vd</name><operator pos:start="65:52" pos:end="65:53">-&gt;</operator><name pos:start="65:54" pos:end="65:58">guest</name><operator pos:start="65:59" pos:end="65:59">.</operator><name pos:start="65:60" pos:end="65:61">fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:62"><expr pos:start="67:5" pos:end="67:61"><name pos:start="67:5" pos:end="67:14">server_row</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:25">uint8_t</name> <operator pos:start="67:27" pos:end="67:27">*</operator><operator pos:start="67:28" pos:end="67:28">)</operator><call pos:start="67:29" pos:end="67:61"><name pos:start="67:29" pos:end="67:49">pixman_image_get_data</name><argument_list pos:start="67:50" pos:end="67:61">(<argument pos:start="67:51" pos:end="67:60"><expr pos:start="67:51" pos:end="67:60"><name pos:start="67:51" pos:end="67:60"><name pos:start="67:51" pos:end="67:52">vd</name><operator pos:start="67:53" pos:end="67:54">-&gt;</operator><name pos:start="67:55" pos:end="67:60">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="69:5" pos:end="131:5">for <control pos:start="69:9" pos:end="69:32">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">y</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:27"><expr pos:start="69:17" pos:end="69:26"><name pos:start="69:17" pos:end="69:17">y</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:26">height</name></expr>;</condition> <incr pos:start="69:29" pos:end="69:31"><expr pos:start="69:29" pos:end="69:31"><name pos:start="69:29" pos:end="69:29">y</name><operator pos:start="69:30" pos:end="69:31">++</operator></expr></incr>)</control> <block pos:start="69:34" pos:end="131:5">{<block_content pos:start="71:9" pos:end="129:58">

        <if_stmt pos:start="71:9" pos:end="125:9"><if pos:start="71:9" pos:end="125:9">if <condition pos:start="71:12" pos:end="71:62">(<expr pos:start="71:13" pos:end="71:61"><operator pos:start="71:13" pos:end="71:13">!</operator><call pos:start="71:14" pos:end="71:61"><name pos:start="71:14" pos:end="71:25">bitmap_empty</name><argument_list pos:start="71:26" pos:end="71:61">(<argument pos:start="71:27" pos:end="71:44"><expr pos:start="71:27" pos:end="71:44"><name pos:start="71:27" pos:end="71:44"><name pos:start="71:27" pos:end="71:28">vd</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:35">guest</name><operator pos:start="71:36" pos:end="71:36">.</operator><name pos:start="71:37" pos:end="71:41">dirty</name><index pos:start="71:42" pos:end="71:44">[<expr pos:start="71:43" pos:end="71:43"><name pos:start="71:43" pos:end="71:43">y</name></expr>]</index></name></expr></argument>, <argument pos:start="71:47" pos:end="71:60"><expr pos:start="71:47" pos:end="71:60"><name pos:start="71:47" pos:end="71:60">VNC_DIRTY_BITS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:64" pos:end="125:9">{<block_content pos:start="73:13" pos:end="123:13">

            <decl_stmt pos:start="73:13" pos:end="73:18"><decl pos:start="73:13" pos:end="73:17"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="75:13" pos:end="75:31"><decl pos:start="75:13" pos:end="75:30"><type pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:19">uint8_t</name> <modifier pos:start="75:21" pos:end="75:21">*</modifier></type><name pos:start="75:22" pos:end="75:30">guest_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:32"><decl pos:start="77:13" pos:end="77:31"><type pos:start="77:13" pos:end="77:21"><name pos:start="77:13" pos:end="77:19">uint8_t</name> <modifier pos:start="77:21" pos:end="77:21">*</modifier></type><name pos:start="77:22" pos:end="77:31">server_ptr</name></decl>;</decl_stmt>



            <if_stmt pos:start="81:13" pos:end="91:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:57">(<expr pos:start="81:17" pos:end="81:56"><name pos:start="81:17" pos:end="81:32"><name pos:start="81:17" pos:end="81:18">vd</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:25">guest</name><operator pos:start="81:26" pos:end="81:26">.</operator><name pos:start="81:27" pos:end="81:32">format</name></name> <operator pos:start="81:34" pos:end="81:35">!=</operator> <name pos:start="81:37" pos:end="81:56">VNC_SERVER_FB_FORMAT</name></expr>)</condition> <block pos:start="81:59" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:69">

                <expr_stmt pos:start="83:17" pos:end="83:73"><expr pos:start="83:17" pos:end="83:72"><call pos:start="83:17" pos:end="83:72"><name pos:start="83:17" pos:end="83:40">qemu_pixman_linebuf_fill</name><argument_list pos:start="83:41" pos:end="83:72">(<argument pos:start="83:42" pos:end="83:47"><expr pos:start="83:42" pos:end="83:47"><name pos:start="83:42" pos:end="83:47">tmpbuf</name></expr></argument>, <argument pos:start="83:50" pos:end="83:61"><expr pos:start="83:50" pos:end="83:61"><name pos:start="83:50" pos:end="83:61"><name pos:start="83:50" pos:end="83:51">vd</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:58">guest</name><operator pos:start="83:59" pos:end="83:59">.</operator><name pos:start="83:60" pos:end="83:61">fb</name></name></expr></argument>, <argument pos:start="83:64" pos:end="83:68"><expr pos:start="83:64" pos:end="83:68"><name pos:start="83:64" pos:end="83:68">width</name></expr></argument>, <argument pos:start="83:71" pos:end="83:71"><expr pos:start="83:71" pos:end="83:71"><name pos:start="83:71" pos:end="83:71">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:69"><expr pos:start="85:17" pos:end="85:68"><name pos:start="85:17" pos:end="85:25">guest_ptr</name> <operator pos:start="85:27" pos:end="85:27">=</operator> <operator pos:start="85:29" pos:end="85:29">(</operator><name pos:start="85:30" pos:end="85:36">uint8_t</name> <operator pos:start="85:38" pos:end="85:38">*</operator><operator pos:start="85:39" pos:end="85:39">)</operator><call pos:start="85:40" pos:end="85:68"><name pos:start="85:40" pos:end="85:60">pixman_image_get_data</name><argument_list pos:start="85:61" pos:end="85:68">(<argument pos:start="85:62" pos:end="85:67"><expr pos:start="85:62" pos:end="85:67"><name pos:start="85:62" pos:end="85:67">tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="91:13">else <block pos:start="87:20" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:38">

                <expr_stmt pos:start="89:17" pos:end="89:38"><expr pos:start="89:17" pos:end="89:37"><name pos:start="89:17" pos:end="89:25">guest_ptr</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:37">guest_row</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:22">server_ptr</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:35">server_row</name></expr>;</expr_stmt>



            <for pos:start="97:13" pos:end="123:13">for <control pos:start="97:17" pos:end="99:77">(<init pos:start="97:18" pos:end="97:23"><expr pos:start="97:18" pos:end="97:22"><name pos:start="97:18" pos:end="97:18">x</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>;</init> <condition pos:start="97:25" pos:end="97:39"><expr pos:start="97:25" pos:end="97:38"><name pos:start="97:25" pos:end="97:25">x</name> <operator pos:start="97:27" pos:end="97:27">+</operator> <literal type="number" pos:start="97:29" pos:end="97:30">15</literal> <operator pos:start="97:32" pos:end="97:32">&lt;</operator> <name pos:start="97:34" pos:end="97:38">width</name></expr>;</condition>

                    <incr pos:start="99:21" pos:end="99:76"><expr pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:21">x</name> <operator pos:start="99:23" pos:end="99:24">+=</operator> <literal type="number" pos:start="99:26" pos:end="99:27">16</literal></expr><operator pos:start="99:28" pos:end="99:28">,</operator> <expr pos:start="99:30" pos:end="99:51"><name pos:start="99:30" pos:end="99:38">guest_ptr</name> <operator pos:start="99:40" pos:end="99:41">+=</operator> <name pos:start="99:43" pos:end="99:51">cmp_bytes</name></expr><operator pos:start="99:52" pos:end="99:52">,</operator> <expr pos:start="99:54" pos:end="99:76"><name pos:start="99:54" pos:end="99:63">server_ptr</name> <operator pos:start="99:65" pos:end="99:66">+=</operator> <name pos:start="99:68" pos:end="99:76">cmp_bytes</name></expr></incr>)</control> <block pos:start="99:79" pos:end="123:13">{<block_content pos:start="101:17" pos:end="121:28">

                <if_stmt pos:start="101:17" pos:end="103:29"><if pos:start="101:17" pos:end="103:29">if <condition pos:start="101:20" pos:end="101:70">(<expr pos:start="101:21" pos:end="101:69"><operator pos:start="101:21" pos:end="101:21">!</operator><call pos:start="101:22" pos:end="101:69"><name pos:start="101:22" pos:end="101:39">test_and_clear_bit</name><argument_list pos:start="101:40" pos:end="101:69">(<argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><operator pos:start="101:41" pos:end="101:41">(</operator><name pos:start="101:42" pos:end="101:42">x</name> <operator pos:start="101:44" pos:end="101:44">/</operator> <literal type="number" pos:start="101:46" pos:end="101:47">16</literal><operator pos:start="101:48" pos:end="101:48">)</operator></expr></argument>, <argument pos:start="101:51" pos:end="101:68"><expr pos:start="101:51" pos:end="101:68"><name pos:start="101:51" pos:end="101:68"><name pos:start="101:51" pos:end="101:52">vd</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:59">guest</name><operator pos:start="101:60" pos:end="101:60">.</operator><name pos:start="101:61" pos:end="101:65">dirty</name><index pos:start="101:66" pos:end="101:68">[<expr pos:start="101:67" pos:end="101:67"><name pos:start="101:67" pos:end="101:67">y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:21" pos:end="103:29"><block_content pos:start="103:21" pos:end="103:29">

                    <continue pos:start="103:21" pos:end="103:29">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="105:17" pos:end="107:29"><if pos:start="105:17" pos:end="107:29">if <condition pos:start="105:20" pos:end="105:66">(<expr pos:start="105:21" pos:end="105:65"><call pos:start="105:21" pos:end="105:60"><name pos:start="105:21" pos:end="105:26">memcmp</name><argument_list pos:start="105:27" pos:end="105:60">(<argument pos:start="105:28" pos:end="105:37"><expr pos:start="105:28" pos:end="105:37"><name pos:start="105:28" pos:end="105:37">server_ptr</name></expr></argument>, <argument pos:start="105:40" pos:end="105:48"><expr pos:start="105:40" pos:end="105:48"><name pos:start="105:40" pos:end="105:48">guest_ptr</name></expr></argument>, <argument pos:start="105:51" pos:end="105:59"><expr pos:start="105:51" pos:end="105:59"><name pos:start="105:51" pos:end="105:59">cmp_bytes</name></expr></argument>)</argument_list></call> <operator pos:start="105:62" pos:end="105:63">==</operator> <literal type="number" pos:start="105:65" pos:end="105:65">0</literal></expr>)</condition><block type="pseudo" pos:start="107:21" pos:end="107:29"><block_content pos:start="107:21" pos:end="107:29">

                    <continue pos:start="107:21" pos:end="107:29">continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:57"><expr pos:start="109:17" pos:end="109:56"><call pos:start="109:17" pos:end="109:56"><name pos:start="109:17" pos:end="109:22">memcpy</name><argument_list pos:start="109:23" pos:end="109:56">(<argument pos:start="109:24" pos:end="109:33"><expr pos:start="109:24" pos:end="109:33"><name pos:start="109:24" pos:end="109:33">server_ptr</name></expr></argument>, <argument pos:start="109:36" pos:end="109:44"><expr pos:start="109:36" pos:end="109:44"><name pos:start="109:36" pos:end="109:44">guest_ptr</name></expr></argument>, <argument pos:start="109:47" pos:end="109:55"><expr pos:start="109:47" pos:end="109:55"><name pos:start="109:47" pos:end="109:55">cmp_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="111:17" pos:end="113:52"><if pos:start="111:17" pos:end="113:52">if <condition pos:start="111:20" pos:end="111:38">(<expr pos:start="111:21" pos:end="111:37"><operator pos:start="111:21" pos:end="111:21">!</operator><name pos:start="111:22" pos:end="111:37"><name pos:start="111:22" pos:end="111:23">vd</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:37">non_adaptive</name></name></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="113:52"><block_content pos:start="113:21" pos:end="113:52">

                    <expr_stmt pos:start="113:21" pos:end="113:52"><expr pos:start="113:21" pos:end="113:51"><call pos:start="113:21" pos:end="113:51"><name pos:start="113:21" pos:end="113:36">vnc_rect_updated</name><argument_list pos:start="113:37" pos:end="113:51">(<argument pos:start="113:38" pos:end="113:39"><expr pos:start="113:38" pos:end="113:39"><name pos:start="113:38" pos:end="113:39">vd</name></expr></argument>, <argument pos:start="113:42" pos:end="113:42"><expr pos:start="113:42" pos:end="113:42"><name pos:start="113:42" pos:end="113:42">x</name></expr></argument>, <argument pos:start="113:45" pos:end="113:45"><expr pos:start="113:45" pos:end="113:45"><name pos:start="113:45" pos:end="113:45">y</name></expr></argument>, <argument pos:start="113:48" pos:end="113:50"><expr pos:start="113:48" pos:end="113:50"><operator pos:start="113:48" pos:end="113:48">&amp;</operator><name pos:start="113:49" pos:end="113:50">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <macro pos:start="115:17" pos:end="115:54"><name pos:start="115:17" pos:end="115:30">QTAILQ_FOREACH</name><argument_list pos:start="115:31" pos:end="115:54">(<argument pos:start="115:32" pos:end="115:33">vs</argument>, <argument pos:start="115:36" pos:end="115:47">&amp;vd-&gt;clients</argument>, <argument pos:start="115:50" pos:end="115:53">next</argument>)</argument_list></macro> <block pos:start="115:56" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:52">

                    <expr_stmt pos:start="117:21" pos:end="117:52"><expr pos:start="117:21" pos:end="117:51"><call pos:start="117:21" pos:end="117:51"><name pos:start="117:21" pos:end="117:27">set_bit</name><argument_list pos:start="117:28" pos:end="117:51">(<argument pos:start="117:29" pos:end="117:36"><expr pos:start="117:29" pos:end="117:36"><operator pos:start="117:29" pos:end="117:29">(</operator><name pos:start="117:30" pos:end="117:30">x</name> <operator pos:start="117:32" pos:end="117:32">/</operator> <literal type="number" pos:start="117:34" pos:end="117:35">16</literal><operator pos:start="117:36" pos:end="117:36">)</operator></expr></argument>, <argument pos:start="117:39" pos:end="117:50"><expr pos:start="117:39" pos:end="117:50"><name pos:start="117:39" pos:end="117:50"><name pos:start="117:39" pos:end="117:40">vs</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:47">dirty</name><index pos:start="117:48" pos:end="117:50">[<expr pos:start="117:49" pos:end="117:49"><name pos:start="117:49" pos:end="117:49">y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <expr_stmt pos:start="121:17" pos:end="121:28"><expr pos:start="121:17" pos:end="121:27"><name pos:start="121:17" pos:end="121:25">has_dirty</name><operator pos:start="121:26" pos:end="121:27">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:60"><expr pos:start="127:9" pos:end="127:59"><name pos:start="127:9" pos:end="127:17">guest_row</name>  <operator pos:start="127:20" pos:end="127:21">+=</operator> <call pos:start="127:23" pos:end="127:59"><name pos:start="127:23" pos:end="127:45">pixman_image_get_stride</name><argument_list pos:start="127:46" pos:end="127:59">(<argument pos:start="127:47" pos:end="127:58"><expr pos:start="127:47" pos:end="127:58"><name pos:start="127:47" pos:end="127:58"><name pos:start="127:47" pos:end="127:48">vd</name><operator pos:start="127:49" pos:end="127:50">-&gt;</operator><name pos:start="127:51" pos:end="127:55">guest</name><operator pos:start="127:56" pos:end="127:56">.</operator><name pos:start="127:57" pos:end="127:58">fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:58"><expr pos:start="129:9" pos:end="129:57"><name pos:start="129:9" pos:end="129:18">server_row</name> <operator pos:start="129:20" pos:end="129:21">+=</operator> <call pos:start="129:23" pos:end="129:57"><name pos:start="129:23" pos:end="129:45">pixman_image_get_stride</name><argument_list pos:start="129:46" pos:end="129:57">(<argument pos:start="129:47" pos:end="129:56"><expr pos:start="129:47" pos:end="129:56"><name pos:start="129:47" pos:end="129:56"><name pos:start="129:47" pos:end="129:48">vd</name><operator pos:start="129:49" pos:end="129:50">-&gt;</operator><name pos:start="129:51" pos:end="129:56">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="133:5" pos:end="133:36"><expr pos:start="133:5" pos:end="133:35"><call pos:start="133:5" pos:end="133:35"><name pos:start="133:5" pos:end="133:27">qemu_pixman_image_unref</name><argument_list pos:start="133:28" pos:end="133:35">(<argument pos:start="133:29" pos:end="133:34"><expr pos:start="133:29" pos:end="133:34"><name pos:start="133:29" pos:end="133:34">tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:21">return <expr pos:start="135:12" pos:end="135:20"><name pos:start="135:12" pos:end="135:20">has_dirty</name></expr>;</return>

</block_content>}</block></function>
</unit>
