<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5389.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:47">virtio_scsi_migration_state_changed</name><parameter_list pos:start="1:48" pos:end="1:79">(<parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:56">Notifier</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:66">notifier</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:78"><decl pos:start="1:69" pos:end="1:78"><type pos:start="1:69" pos:end="1:78"><name pos:start="1:69" pos:end="1:72">void</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:78">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:5">

    <decl_stmt pos:start="5:5" pos:end="7:59"><decl pos:start="5:5" pos:end="7:58"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VirtIOSCSI</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="7:58">= <expr pos:start="5:21" pos:end="7:58"><call pos:start="5:21" pos:end="7:58"><name pos:start="5:21" pos:end="5:32">container_of</name><argument_list pos:start="5:33" pos:end="7:58">(<argument pos:start="5:34" pos:end="5:41"><expr pos:start="5:34" pos:end="5:41"><name pos:start="5:34" pos:end="5:41">notifier</name></expr></argument>, <argument pos:start="5:44" pos:end="5:53"><expr pos:start="5:44" pos:end="5:53"><name pos:start="5:44" pos:end="5:53">VirtIOSCSI</name></expr></argument>,

                                 <argument pos:start="7:34" pos:end="7:57"><expr pos:start="7:34" pos:end="7:57"><name pos:start="7:34" pos:end="7:57">migration_state_notifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MigrationState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">mig</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">data</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="39:5"><if pos:start="13:5" pos:end="25:5">if <condition pos:start="13:8" pos:end="13:32">(<expr pos:start="13:9" pos:end="13:31"><call pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:26">migration_in_setup</name><argument_list pos:start="13:27" pos:end="13:31">(<argument pos:start="13:28" pos:end="13:30"><expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">mig</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:34" pos:end="25:5">{<block_content pos:start="15:9" pos:end="23:37">

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:34">(<expr pos:start="15:13" pos:end="15:33"><operator pos:start="15:13" pos:end="15:13">!</operator><name pos:start="15:14" pos:end="15:33"><name pos:start="15:14" pos:end="15:14">s</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:33">dataplane_started</name></name></expr>)</condition> <block pos:start="15:36" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:19">

            <return pos:start="17:13" pos:end="17:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><call pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:34">virtio_scsi_dataplane_stop</name><argument_list pos:start="21:35" pos:end="21:37">(<argument pos:start="21:36" pos:end="21:36"><expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:29">dataplane_disabled</name></name> <operator pos:start="23:31" pos:end="23:31">=</operator> <name pos:start="23:33" pos:end="23:36">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="39:5">else if <condition pos:start="25:15" pos:end="27:41">(<expr pos:start="25:16" pos:end="27:40"><call pos:start="25:16" pos:end="25:42"><name pos:start="25:16" pos:end="25:37">migration_has_finished</name><argument_list pos:start="25:38" pos:end="25:42">(<argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><name pos:start="25:39" pos:end="25:41">mig</name></expr></argument>)</argument_list></call> <operator pos:start="25:44" pos:end="25:45">||</operator>

               <call pos:start="27:16" pos:end="27:40"><name pos:start="27:16" pos:end="27:35">migration_has_failed</name><argument_list pos:start="27:36" pos:end="27:40">(<argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">mig</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:43" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:38">

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:33">(<expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:32">dataplane_started</name></name></expr>)</condition> <block pos:start="29:35" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:19">

            <return pos:start="31:13" pos:end="31:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:25"><expr pos:start="35:9" pos:end="35:24"><call pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:22">bdrv_drain_all</name><argument_list pos:start="35:23" pos:end="35:24">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:27" pos:end="35:73">/* complete in-flight non-dataplane requests */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:29">dataplane_disabled</name></name> <operator pos:start="37:31" pos:end="37:31">=</operator> <name pos:start="37:33" pos:end="37:37">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
