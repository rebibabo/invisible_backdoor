<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23541.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">virtqueue_map_iovec</name><parameter_list pos:start="1:32" pos:end="5:68">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:44">VirtIODevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">vdev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:58">struct</name> <name pos:start="1:60" pos:end="1:64">iovec</name></name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">sg</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:38">hwaddr</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">addr</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:66"><decl pos:start="3:47" pos:end="3:66"><type pos:start="3:47" pos:end="3:66"><name pos:start="3:47" pos:end="3:54">unsigned</name> <name pos:start="3:56" pos:end="3:58">int</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:66">num_sg</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:53"><decl pos:start="5:33" pos:end="5:53"><type pos:start="5:33" pos:end="5:53"><name pos:start="5:33" pos:end="5:40">unsigned</name> <name pos:start="5:42" pos:end="5:44">int</name></type> <name pos:start="5:46" pos:end="5:53">max_size</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:67"><decl pos:start="5:56" pos:end="5:67"><type pos:start="5:56" pos:end="5:67"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:67">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="69:1">{<block_content pos:start="9:5" pos:end="67:5">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="34:0"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:14">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="19:7">/* Note: this function MUST validate input, some callers

     * are passing in num_sg values received over the network.

     */</comment>

    <comment type="block" pos:start="21:5" pos:end="27:7">/* TODO: teach all callers that this can fail, and return failure instead

     * of asserting here.

     * When we do, we might be able to re-enable NDEBUG below.

     */</comment>

<cpp:ifdef pos:start="29:1" pos:end="29:13">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:13">NDEBUG</name></cpp:ifdef>

<cpp:error pos:start="31:1" pos:end="31:44">#<cpp:directive pos:start="31:2" pos:end="31:6">error</cpp:directive> building with NDEBUG is not supported</cpp:error>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:31">(<argument pos:start="35:12" pos:end="35:30"><expr pos:start="35:12" pos:end="35:30"><operator pos:start="35:12" pos:end="35:12">*</operator><name pos:start="35:13" pos:end="35:18">num_sg</name> <operator pos:start="35:20" pos:end="35:21">&lt;=</operator> <name pos:start="35:23" pos:end="35:30">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="39:5" pos:end="67:5">for <control pos:start="39:9" pos:end="39:33">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:28"><expr pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <operator pos:start="39:21" pos:end="39:21">*</operator><name pos:start="39:22" pos:end="39:27">num_sg</name></expr>;</condition> <incr pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:30">i</name><operator pos:start="39:31" pos:end="39:32">++</operator></expr></incr>)</control> <block pos:start="39:35" pos:end="67:5">{<block_content pos:start="41:9" pos:end="65:9">

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:11">len</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:19"><name pos:start="41:15" pos:end="41:16">sg</name><index pos:start="41:17" pos:end="41:19">[<expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">i</name></expr>]</index></name><operator pos:start="41:20" pos:end="41:20">.</operator><name pos:start="41:21" pos:end="41:27">iov_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="49:65"><expr pos:start="43:9" pos:end="49:64"><name pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:10">sg</name><index pos:start="43:11" pos:end="43:13">[<expr pos:start="43:12" pos:end="43:12"><name pos:start="43:12" pos:end="43:12">i</name></expr>]</index></name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:22">iov_base</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="49:64"><name pos:start="43:26" pos:end="43:39">dma_memory_map</name><argument_list pos:start="43:40" pos:end="49:64">(<argument pos:start="43:41" pos:end="43:52"><expr pos:start="43:41" pos:end="43:52"><name pos:start="43:41" pos:end="43:52"><name pos:start="43:41" pos:end="43:44">vdev</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:52">dma_as</name></name></expr></argument>,

                                        <argument pos:start="45:41" pos:end="45:47"><expr pos:start="45:41" pos:end="45:47"><name pos:start="45:41" pos:end="45:47"><name pos:start="45:41" pos:end="45:44">addr</name><index pos:start="45:45" pos:end="45:47">[<expr pos:start="45:46" pos:end="45:46"><name pos:start="45:46" pos:end="45:46">i</name></expr>]</index></name></expr></argument>, <argument pos:start="45:50" pos:end="45:53"><expr pos:start="45:50" pos:end="45:53"><operator pos:start="45:50" pos:end="45:50">&amp;</operator><name pos:start="45:51" pos:end="45:53">len</name></expr></argument>, <argument pos:start="45:56" pos:end="49:63"><expr pos:start="45:56" pos:end="49:63"><ternary pos:start="45:56" pos:end="49:63"><condition pos:start="45:56" pos:end="45:65"><expr pos:start="45:56" pos:end="45:63"><name pos:start="45:56" pos:end="45:63">is_write</name></expr> ?</condition><then pos:start="47:41" pos:end="47:65">

                                        <expr pos:start="47:41" pos:end="47:65"><name pos:start="47:41" pos:end="47:65">DMA_DIRECTION_FROM_DEVICE</name></expr> </then><else pos:start="47:67" pos:end="49:63">:

                                        <expr pos:start="49:41" pos:end="49:63"><name pos:start="49:41" pos:end="49:63">DMA_DIRECTION_TO_DEVICE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:28">(<expr pos:start="51:13" pos:end="51:27"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:15">sg</name><index pos:start="51:16" pos:end="51:18">[<expr pos:start="51:17" pos:end="51:17"><name pos:start="51:17" pos:end="51:17">i</name></expr>]</index></name><operator pos:start="51:19" pos:end="51:19">.</operator><name pos:start="51:20" pos:end="51:27">iov_base</name></expr>)</condition> <block pos:start="51:30" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:20">

            <expr_stmt pos:start="53:13" pos:end="53:68"><expr pos:start="53:13" pos:end="53:67"><call pos:start="53:13" pos:end="53:67"><name pos:start="53:13" pos:end="53:24">error_report</name><argument_list pos:start="53:25" pos:end="53:67">(<argument pos:start="53:26" pos:end="53:66"><expr pos:start="53:26" pos:end="53:66"><literal type="string" pos:start="53:26" pos:end="53:66">"virtio: error trying to map MMIO memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:19">(<argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:33">(<expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:15">len</name> <operator pos:start="59:17" pos:end="59:18">!=</operator> <name pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:21">sg</name><index pos:start="59:22" pos:end="59:24">[<expr pos:start="59:23" pos:end="59:23"><name pos:start="59:23" pos:end="59:23">i</name></expr>]</index></name><operator pos:start="59:25" pos:end="59:25">.</operator><name pos:start="59:26" pos:end="59:32">iov_len</name></expr>)</condition> <block pos:start="59:35" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:20">

            <expr_stmt pos:start="61:13" pos:end="61:60"><expr pos:start="61:13" pos:end="61:59"><call pos:start="61:13" pos:end="61:59"><name pos:start="61:13" pos:end="61:24">error_report</name><argument_list pos:start="61:25" pos:end="61:59">(<argument pos:start="61:26" pos:end="61:58"><expr pos:start="61:26" pos:end="61:58"><literal type="string" pos:start="61:26" pos:end="61:58">"virtio: unexpected memory split"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:20"><expr pos:start="63:13" pos:end="63:19"><call pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:16">exit</name><argument_list pos:start="63:17" pos:end="63:19">(<argument pos:start="63:18" pos:end="63:18"><expr pos:start="63:18" pos:end="63:18"><literal type="number" pos:start="63:18" pos:end="63:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
