<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19526.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">musicpal_init</name><parameter_list pos:start="1:26" pos:end="7:66">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:36">ram_addr_t</name></type> <name pos:start="1:38" pos:end="1:45">ram_size</name></decl></parameter>,

               <parameter pos:start="3:16" pos:end="3:38"><decl pos:start="3:16" pos:end="3:38"><type pos:start="3:16" pos:end="3:38"><specifier pos:start="3:16" pos:end="3:20">const</specifier> <name pos:start="3:22" pos:end="3:25">char</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:38">boot_device</name></decl></parameter>,

               <parameter pos:start="5:16" pos:end="5:42"><decl pos:start="5:16" pos:end="5:42"><type pos:start="5:16" pos:end="5:42"><specifier pos:start="5:16" pos:end="5:20">const</specifier> <name pos:start="5:22" pos:end="5:25">char</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:42">kernel_filename</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:70"><decl pos:start="5:45" pos:end="5:70"><type pos:start="5:45" pos:end="5:70"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:70">kernel_cmdline</name></decl></parameter>,

               <parameter pos:start="7:16" pos:end="7:42"><decl pos:start="7:16" pos:end="7:42"><type pos:start="7:16" pos:end="7:42"><specifier pos:start="7:16" pos:end="7:20">const</specifier> <name pos:start="7:22" pos:end="7:25">char</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:42">initrd_filename</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:65"><decl pos:start="7:45" pos:end="7:65"><type pos:start="7:45" pos:end="7:65"><specifier pos:start="7:45" pos:end="7:49">const</specifier> <name pos:start="7:51" pos:end="7:54">char</name> <modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:65">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="305:1">{<block_content pos:start="11:5" pos:end="303:42">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:16">pic</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:24">i2c_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">DeviceState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:24">lcd_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">DeviceState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:24">key_dev</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="25:1" pos:end="25:16">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:16">HAS_AUDIO</name></cpp:ifdef>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">DeviceState</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:27">wm8750_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">SysBusDevice</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:19">s</name></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="33:5" pos:end="33:17"><decl pos:start="33:5" pos:end="33:16"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">i2c_bus</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:16">i2c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:10"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:29"><decl pos:start="37:5" pos:end="37:28"><type pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:12">unsigned</name> <name pos:start="37:14" pos:end="37:17">long</name></type> <name pos:start="37:19" pos:end="37:28">flash_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">DriveInfo</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:24"><decl pos:start="41:5" pos:end="41:23"><type pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:14">ram_addr_t</name></type> <name pos:start="41:16" pos:end="41:23">sram_off</name></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:18">cpu_model</name></expr>)</condition> <block pos:start="45:21" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:29">

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:17">cpu_model</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="string" pos:start="47:21" pos:end="47:28">"arm926"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:7">env</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:29"><name pos:start="51:11" pos:end="51:18">cpu_init</name><argument_list pos:start="51:19" pos:end="51:29">(<argument pos:start="51:20" pos:end="51:28"><expr pos:start="51:20" pos:end="51:28"><name pos:start="51:20" pos:end="51:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">env</name></expr>)</condition> <block pos:start="53:15" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:59"><expr pos:start="55:9" pos:end="55:58"><call pos:start="55:9" pos:end="55:58"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:58">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:57"><expr pos:start="55:25" pos:end="55:57"><literal type="string" pos:start="55:25" pos:end="55:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:11">cpu_pic</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:35"><name pos:start="61:15" pos:end="61:30">arm_pic_init_cpu</name><argument_list pos:start="61:31" pos:end="61:35">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:58">/* For now we use a fixed - the original - RAM size */</comment>

    <expr_stmt pos:start="67:5" pos:end="69:70"><expr pos:start="67:5" pos:end="69:69"><call pos:start="67:5" pos:end="69:69"><name pos:start="67:5" pos:end="67:32">cpu_register_physical_memory</name><argument_list pos:start="67:33" pos:end="69:69">(<argument pos:start="67:34" pos:end="67:34"><expr pos:start="67:34" pos:end="67:34"><literal type="number" pos:start="67:34" pos:end="67:34">0</literal></expr></argument>, <argument pos:start="67:37" pos:end="67:55"><expr pos:start="67:37" pos:end="67:55"><name pos:start="67:37" pos:end="67:55">MP_RAM_DEFAULT_SIZE</name></expr></argument>,

                                 <argument pos:start="69:34" pos:end="69:68"><expr pos:start="69:34" pos:end="69:68"><call pos:start="69:34" pos:end="69:68"><name pos:start="69:34" pos:end="69:47">qemu_ram_alloc</name><argument_list pos:start="69:48" pos:end="69:68">(<argument pos:start="69:49" pos:end="69:67"><expr pos:start="69:49" pos:end="69:67"><name pos:start="69:49" pos:end="69:67">MP_RAM_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:12">sram_off</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:43"><name pos:start="73:16" pos:end="73:29">qemu_ram_alloc</name><argument_list pos:start="73:30" pos:end="73:43">(<argument pos:start="73:31" pos:end="73:42"><expr pos:start="73:31" pos:end="73:42"><name pos:start="73:31" pos:end="73:42">MP_SRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:71"><expr pos:start="75:5" pos:end="75:70"><call pos:start="75:5" pos:end="75:70"><name pos:start="75:5" pos:end="75:32">cpu_register_physical_memory</name><argument_list pos:start="75:33" pos:end="75:70">(<argument pos:start="75:34" pos:end="75:45"><expr pos:start="75:34" pos:end="75:45"><name pos:start="75:34" pos:end="75:45">MP_SRAM_BASE</name></expr></argument>, <argument pos:start="75:48" pos:end="75:59"><expr pos:start="75:48" pos:end="75:59"><name pos:start="75:48" pos:end="75:59">MP_SRAM_SIZE</name></expr></argument>, <argument pos:start="75:62" pos:end="75:69"><expr pos:start="75:62" pos:end="75:69"><name pos:start="75:62" pos:end="75:69">sram_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="81:57"><expr pos:start="79:5" pos:end="81:56"><name pos:start="79:5" pos:end="79:7">dev</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="81:56"><name pos:start="79:11" pos:end="79:30">sysbus_create_simple</name><argument_list pos:start="79:31" pos:end="81:56">(<argument pos:start="79:32" pos:end="79:46"><expr pos:start="79:32" pos:end="79:46"><literal type="string" pos:start="79:32" pos:end="79:46">"mv88w8618_pic"</literal></expr></argument>, <argument pos:start="79:49" pos:end="79:59"><expr pos:start="79:49" pos:end="79:59"><name pos:start="79:49" pos:end="79:59">MP_PIC_BASE</name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:55"><expr pos:start="81:32" pos:end="81:55"><name pos:start="81:32" pos:end="81:55"><name pos:start="81:32" pos:end="81:38">cpu_pic</name><index pos:start="81:39" pos:end="81:55">[<expr pos:start="81:40" pos:end="81:54"><name pos:start="81:40" pos:end="81:54">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="83:5" pos:end="87:5">for <control pos:start="83:9" pos:end="83:28">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:22">32</literal></expr>;</condition> <incr pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:25">i</name><operator pos:start="83:26" pos:end="83:27">++</operator></expr></incr>)</control> <block pos:start="83:30" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:42">

        <expr_stmt pos:start="85:9" pos:end="85:42"><expr pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:11">pic</name><index pos:start="85:12" pos:end="85:14">[<expr pos:start="85:13" pos:end="85:13"><name pos:start="85:13" pos:end="85:13">i</name></expr>]</index></name> <operator pos:start="85:16" pos:end="85:16">=</operator> <call pos:start="85:18" pos:end="85:41"><name pos:start="85:18" pos:end="85:33">qdev_get_gpio_in</name><argument_list pos:start="85:34" pos:end="85:41">(<argument pos:start="85:35" pos:end="85:37"><expr pos:start="85:35" pos:end="85:37"><name pos:start="85:35" pos:end="85:37">dev</name></expr></argument>, <argument pos:start="85:40" pos:end="85:40"><expr pos:start="85:40" pos:end="85:40"><name pos:start="85:40" pos:end="85:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="89:5" pos:end="93:52"><expr pos:start="89:5" pos:end="93:51"><call pos:start="89:5" pos:end="93:51"><name pos:start="89:5" pos:end="89:25">sysbus_create_varargs</name><argument_list pos:start="89:26" pos:end="93:51">(<argument pos:start="89:27" pos:end="89:41"><expr pos:start="89:27" pos:end="89:41"><literal type="string" pos:start="89:27" pos:end="89:41">"mv88w8618_pit"</literal></expr></argument>, <argument pos:start="89:44" pos:end="89:54"><expr pos:start="89:44" pos:end="89:54"><name pos:start="89:44" pos:end="89:54">MP_PIT_BASE</name></expr></argument>, <argument pos:start="89:57" pos:end="89:74"><expr pos:start="89:57" pos:end="89:74"><name pos:start="89:57" pos:end="89:74"><name pos:start="89:57" pos:end="89:59">pic</name><index pos:start="89:60" pos:end="89:74">[<expr pos:start="89:61" pos:end="89:73"><name pos:start="89:61" pos:end="89:73">MP_TIMER1_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="91:27" pos:end="91:44"><expr pos:start="91:27" pos:end="91:44"><name pos:start="91:27" pos:end="91:44"><name pos:start="91:27" pos:end="91:29">pic</name><index pos:start="91:30" pos:end="91:44">[<expr pos:start="91:31" pos:end="91:43"><name pos:start="91:31" pos:end="91:43">MP_TIMER2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="91:47" pos:end="91:64"><expr pos:start="91:47" pos:end="91:64"><name pos:start="91:47" pos:end="91:64"><name pos:start="91:47" pos:end="91:49">pic</name><index pos:start="91:50" pos:end="91:64">[<expr pos:start="91:51" pos:end="91:63"><name pos:start="91:51" pos:end="91:63">MP_TIMER3_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="93:27" pos:end="93:44"><expr pos:start="93:27" pos:end="93:44"><name pos:start="93:27" pos:end="93:44"><name pos:start="93:27" pos:end="93:29">pic</name><index pos:start="93:30" pos:end="93:44">[<expr pos:start="93:31" pos:end="93:43"><name pos:start="93:31" pos:end="93:43">MP_TIMER4_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="93:47" pos:end="93:50"><expr pos:start="93:47" pos:end="93:50"><name pos:start="93:47" pos:end="93:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="113:5"><if pos:start="97:5" pos:end="113:5">if <condition pos:start="97:8" pos:end="97:22">(<expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:18">serial_hds</name><index pos:start="97:19" pos:end="97:21">[<expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="97:24" pos:end="113:5">{<block_content pos:start="101:9" pos:end="112:0">

<cpp:ifdef pos:start="99:1" pos:end="99:29">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="101:9" pos:end="106:0"><expr pos:start="101:9" pos:end="103:43"><call pos:start="101:9" pos:end="103:43"><name pos:start="101:9" pos:end="101:22">serial_mm_init</name><argument_list pos:start="101:23" pos:end="103:43">(<argument pos:start="101:24" pos:end="101:36"><expr pos:start="101:24" pos:end="101:36"><name pos:start="101:24" pos:end="101:36">MP_UART1_BASE</name></expr></argument>, <argument pos:start="101:39" pos:end="101:39"><expr pos:start="101:39" pos:end="101:39"><literal type="number" pos:start="101:39" pos:end="101:39">2</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:58"><expr pos:start="101:42" pos:end="101:58"><name pos:start="101:42" pos:end="101:58"><name pos:start="101:42" pos:end="101:44">pic</name><index pos:start="101:45" pos:end="101:58">[<expr pos:start="101:46" pos:end="101:57"><name pos:start="101:46" pos:end="101:57">MP_UART1_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="101:61" pos:end="101:67"><expr pos:start="101:61" pos:end="101:67"><literal type="number" pos:start="101:61" pos:end="101:67">1825000</literal></expr></argument>,

                       <argument pos:start="103:24" pos:end="103:36"><expr pos:start="103:24" pos:end="103:36"><name pos:start="103:24" pos:end="103:36"><name pos:start="103:24" pos:end="103:33">serial_hds</name><index pos:start="103:34" pos:end="103:36">[<expr pos:start="103:35" pos:end="103:35"><literal type="number" pos:start="103:35" pos:end="103:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:39" pos:end="103:39"><expr pos:start="103:39" pos:end="103:39"><literal type="number" pos:start="103:39" pos:end="103:39">1</literal></expr></argument>, <argument pos:start="103:42" pos:end="103:42"><expr pos:start="103:42" pos:end="103:42"><literal type="number" pos:start="103:42" pos:end="103:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="105:1" pos:end="105:5">#<cpp:directive pos:start="105:2" pos:end="105:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="107:9" pos:end="112:0"><expr pos:start="107:9" pos:end="109:43"><call pos:start="107:9" pos:end="109:43"><name pos:start="107:9" pos:end="107:22">serial_mm_init</name><argument_list pos:start="107:23" pos:end="109:43">(<argument pos:start="107:24" pos:end="107:36"><expr pos:start="107:24" pos:end="107:36"><name pos:start="107:24" pos:end="107:36">MP_UART1_BASE</name></expr></argument>, <argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><literal type="number" pos:start="107:39" pos:end="107:39">2</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:58"><expr pos:start="107:42" pos:end="107:58"><name pos:start="107:42" pos:end="107:58"><name pos:start="107:42" pos:end="107:44">pic</name><index pos:start="107:45" pos:end="107:58">[<expr pos:start="107:46" pos:end="107:57"><name pos:start="107:46" pos:end="107:57">MP_UART1_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="107:61" pos:end="107:67"><expr pos:start="107:61" pos:end="107:67"><literal type="number" pos:start="107:61" pos:end="107:67">1825000</literal></expr></argument>,

                       <argument pos:start="109:24" pos:end="109:36"><expr pos:start="109:24" pos:end="109:36"><name pos:start="109:24" pos:end="109:36"><name pos:start="109:24" pos:end="109:33">serial_hds</name><index pos:start="109:34" pos:end="109:36">[<expr pos:start="109:35" pos:end="109:35"><literal type="number" pos:start="109:35" pos:end="109:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:39" pos:end="109:39"><expr pos:start="109:39" pos:end="109:39"><literal type="number" pos:start="109:39" pos:end="109:39">1</literal></expr></argument>, <argument pos:start="109:42" pos:end="109:42"><expr pos:start="109:42" pos:end="109:42"><literal type="number" pos:start="109:42" pos:end="109:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="131:5"><if pos:start="115:5" pos:end="131:5">if <condition pos:start="115:8" pos:end="115:22">(<expr pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:18">serial_hds</name><index pos:start="115:19" pos:end="115:21">[<expr pos:start="115:20" pos:end="115:20"><literal type="number" pos:start="115:20" pos:end="115:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="115:24" pos:end="131:5">{<block_content pos:start="119:9" pos:end="130:0">

<cpp:ifdef pos:start="117:1" pos:end="117:29">#<cpp:directive pos:start="117:2" pos:end="117:6">ifdef</cpp:directive> <name pos:start="117:8" pos:end="117:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="119:9" pos:end="124:0"><expr pos:start="119:9" pos:end="121:43"><call pos:start="119:9" pos:end="121:43"><name pos:start="119:9" pos:end="119:22">serial_mm_init</name><argument_list pos:start="119:23" pos:end="121:43">(<argument pos:start="119:24" pos:end="119:36"><expr pos:start="119:24" pos:end="119:36"><name pos:start="119:24" pos:end="119:36">MP_UART2_BASE</name></expr></argument>, <argument pos:start="119:39" pos:end="119:39"><expr pos:start="119:39" pos:end="119:39"><literal type="number" pos:start="119:39" pos:end="119:39">2</literal></expr></argument>, <argument pos:start="119:42" pos:end="119:58"><expr pos:start="119:42" pos:end="119:58"><name pos:start="119:42" pos:end="119:58"><name pos:start="119:42" pos:end="119:44">pic</name><index pos:start="119:45" pos:end="119:58">[<expr pos:start="119:46" pos:end="119:57"><name pos:start="119:46" pos:end="119:57">MP_UART2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="119:61" pos:end="119:67"><expr pos:start="119:61" pos:end="119:67"><literal type="number" pos:start="119:61" pos:end="119:67">1825000</literal></expr></argument>,

                       <argument pos:start="121:24" pos:end="121:36"><expr pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:33">serial_hds</name><index pos:start="121:34" pos:end="121:36">[<expr pos:start="121:35" pos:end="121:35"><literal type="number" pos:start="121:35" pos:end="121:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:39" pos:end="121:39"><expr pos:start="121:39" pos:end="121:39"><literal type="number" pos:start="121:39" pos:end="121:39">1</literal></expr></argument>, <argument pos:start="121:42" pos:end="121:42"><expr pos:start="121:42" pos:end="121:42"><literal type="number" pos:start="121:42" pos:end="121:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="123:1" pos:end="123:5">#<cpp:directive pos:start="123:2" pos:end="123:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="125:9" pos:end="130:0"><expr pos:start="125:9" pos:end="127:43"><call pos:start="125:9" pos:end="127:43"><name pos:start="125:9" pos:end="125:22">serial_mm_init</name><argument_list pos:start="125:23" pos:end="127:43">(<argument pos:start="125:24" pos:end="125:36"><expr pos:start="125:24" pos:end="125:36"><name pos:start="125:24" pos:end="125:36">MP_UART2_BASE</name></expr></argument>, <argument pos:start="125:39" pos:end="125:39"><expr pos:start="125:39" pos:end="125:39"><literal type="number" pos:start="125:39" pos:end="125:39">2</literal></expr></argument>, <argument pos:start="125:42" pos:end="125:58"><expr pos:start="125:42" pos:end="125:58"><name pos:start="125:42" pos:end="125:58"><name pos:start="125:42" pos:end="125:44">pic</name><index pos:start="125:45" pos:end="125:58">[<expr pos:start="125:46" pos:end="125:57"><name pos:start="125:46" pos:end="125:57">MP_UART2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="125:61" pos:end="125:67"><expr pos:start="125:61" pos:end="125:67"><literal type="number" pos:start="125:61" pos:end="125:67">1825000</literal></expr></argument>,

                       <argument pos:start="127:24" pos:end="127:36"><expr pos:start="127:24" pos:end="127:36"><name pos:start="127:24" pos:end="127:36"><name pos:start="127:24" pos:end="127:33">serial_hds</name><index pos:start="127:34" pos:end="127:36">[<expr pos:start="127:35" pos:end="127:35"><literal type="number" pos:start="127:35" pos:end="127:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="127:39" pos:end="127:39"><expr pos:start="127:39" pos:end="127:39"><literal type="number" pos:start="127:39" pos:end="127:39">1</literal></expr></argument>, <argument pos:start="127:42" pos:end="127:42"><expr pos:start="127:42" pos:end="127:42"><literal type="number" pos:start="127:42" pos:end="127:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="129:1" pos:end="129:6">#<cpp:directive pos:start="129:2" pos:end="129:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:24">/* Register flash */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:39"><expr pos:start="137:5" pos:end="137:38"><name pos:start="137:5" pos:end="137:9">dinfo</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <call pos:start="137:13" pos:end="137:38"><name pos:start="137:13" pos:end="137:21">drive_get</name><argument_list pos:start="137:22" pos:end="137:38">(<argument pos:start="137:23" pos:end="137:31"><expr pos:start="137:23" pos:end="137:31"><name pos:start="137:23" pos:end="137:31">IF_PFLASH</name></expr></argument>, <argument pos:start="137:34" pos:end="137:34"><expr pos:start="137:34" pos:end="137:34"><literal type="number" pos:start="137:34" pos:end="137:34">0</literal></expr></argument>, <argument pos:start="137:37" pos:end="137:37"><expr pos:start="137:37" pos:end="137:37"><literal type="number" pos:start="137:37" pos:end="137:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="197:5"><if pos:start="139:5" pos:end="197:5">if <condition pos:start="139:8" pos:end="139:14">(<expr pos:start="139:9" pos:end="139:13"><name pos:start="139:9" pos:end="139:13">dinfo</name></expr>)</condition> <block pos:start="139:16" pos:end="197:5">{<block_content pos:start="141:9" pos:end="194:0">

        <expr_stmt pos:start="141:9" pos:end="141:49"><expr pos:start="141:9" pos:end="141:48"><name pos:start="141:9" pos:end="141:18">flash_size</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <call pos:start="141:22" pos:end="141:48"><name pos:start="141:22" pos:end="141:35">bdrv_getlength</name><argument_list pos:start="141:36" pos:end="141:48">(<argument pos:start="141:37" pos:end="141:47"><expr pos:start="141:37" pos:end="141:47"><name pos:start="141:37" pos:end="141:47"><name pos:start="141:37" pos:end="141:41">dinfo</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:47">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="166:0"><if pos:start="143:9" pos:end="166:0">if <condition pos:start="143:12" pos:end="145:39">(<expr pos:start="143:13" pos:end="145:38"><name pos:start="143:13" pos:end="143:22">flash_size</name> <operator pos:start="143:24" pos:end="143:25">!=</operator> <literal type="number" pos:start="143:27" pos:end="143:27">8</literal><operator pos:start="143:28" pos:end="143:28">*</operator><literal type="number" pos:start="143:29" pos:end="143:32">1024</literal><operator pos:start="143:33" pos:end="143:33">*</operator><literal type="number" pos:start="143:34" pos:end="143:37">1024</literal> <operator pos:start="143:39" pos:end="143:40">&amp;&amp;</operator> <name pos:start="143:42" pos:end="143:51">flash_size</name> <operator pos:start="143:53" pos:end="143:54">!=</operator> <literal type="number" pos:start="143:56" pos:end="143:57">16</literal><operator pos:start="143:58" pos:end="143:58">*</operator><literal type="number" pos:start="143:59" pos:end="143:62">1024</literal><operator pos:start="143:63" pos:end="143:63">*</operator><literal type="number" pos:start="143:64" pos:end="143:67">1024</literal> <operator pos:start="143:69" pos:end="143:70">&amp;&amp;</operator>

            <name pos:start="145:13" pos:end="145:22">flash_size</name> <operator pos:start="145:24" pos:end="145:25">!=</operator> <literal type="number" pos:start="145:27" pos:end="145:28">32</literal><operator pos:start="145:29" pos:end="145:29">*</operator><literal type="number" pos:start="145:30" pos:end="145:33">1024</literal><operator pos:start="145:34" pos:end="145:34">*</operator><literal type="number" pos:start="145:35" pos:end="145:38">1024</literal></expr>)</condition> <block pos:start="145:41" pos:end="166:0">{<block_content pos:start="147:13" pos:end="149:20">

            <expr_stmt pos:start="147:13" pos:end="147:58"><expr pos:start="147:13" pos:end="147:57"><call pos:start="147:13" pos:end="147:57"><name pos:start="147:13" pos:end="147:19">fprintf</name><argument_list pos:start="147:20" pos:end="147:57">(<argument pos:start="147:21" pos:end="147:26"><expr pos:start="147:21" pos:end="147:26"><name pos:start="147:21" pos:end="147:26">stderr</name></expr></argument>, <argument pos:start="147:29" pos:end="147:56"><expr pos:start="147:29" pos:end="147:56"><literal type="string" pos:start="147:29" pos:end="147:56">"Invalid flash image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:20"><expr pos:start="149:13" pos:end="149:19"><call pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:16">exit</name><argument_list pos:start="149:17" pos:end="149:19">(<argument pos:start="149:18" pos:end="149:18"><expr pos:start="149:18" pos:end="149:18"><literal type="number" pos:start="149:18" pos:end="149:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="155:9" pos:end="163:11">/*

         * The original U-Boot accesses the flash at 0xFE000000 instead of

         * 0xFF800000 (if there is 8 MB flash). So remap flash access if the

         * image is smaller than 32 MB.

         */</comment>

<cpp:ifdef pos:start="165:1" pos:end="165:29">#<cpp:directive pos:start="165:2" pos:end="165:6">ifdef</cpp:directive> <name pos:start="165:8" pos:end="165:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="167:9" pos:end="180:0"><expr pos:start="167:9" pos:end="177:48"><call pos:start="167:9" pos:end="177:48"><name pos:start="167:9" pos:end="167:29">pflash_cfi02_register</name><argument_list pos:start="167:30" pos:end="177:48">(<argument pos:start="167:31" pos:end="167:49"><expr pos:start="167:31" pos:end="167:49"><literal type="number" pos:start="167:31" pos:end="167:32">0</literal><operator pos:start="167:32" pos:end="167:32">-</operator><name pos:start="167:33" pos:end="167:49">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="167:52" pos:end="167:77"><expr pos:start="167:52" pos:end="167:77"><call pos:start="167:52" pos:end="167:77"><name pos:start="167:52" pos:end="167:65">qemu_ram_alloc</name><argument_list pos:start="167:66" pos:end="167:77">(<argument pos:start="167:67" pos:end="167:76"><expr pos:start="167:67" pos:end="167:76"><name pos:start="167:67" pos:end="167:76">flash_size</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="169:31" pos:end="169:41"><expr pos:start="169:31" pos:end="169:41"><name pos:start="169:31" pos:end="169:41"><name pos:start="169:31" pos:end="169:35">dinfo</name><operator pos:start="169:36" pos:end="169:37">-&gt;</operator><name pos:start="169:38" pos:end="169:41">bdrv</name></name></expr></argument>, <argument pos:start="169:44" pos:end="169:50"><expr pos:start="169:44" pos:end="169:50"><literal type="number" pos:start="169:44" pos:end="169:50">0x10000</literal></expr></argument>,

                              <argument pos:start="171:31" pos:end="171:57"><expr pos:start="171:31" pos:end="171:57"><operator pos:start="171:31" pos:end="171:31">(</operator><name pos:start="171:32" pos:end="171:41">flash_size</name> <operator pos:start="171:43" pos:end="171:43">+</operator> <literal type="number" pos:start="171:45" pos:end="171:50">0xffff</literal><operator pos:start="171:51" pos:end="171:51">)</operator> <operator pos:start="171:53" pos:end="171:54">&gt;&gt;</operator> <literal type="number" pos:start="171:56" pos:end="171:57">16</literal></expr></argument>,

                              <argument pos:start="173:31" pos:end="173:60"><expr pos:start="173:31" pos:end="173:60"><name pos:start="173:31" pos:end="173:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="173:49" pos:end="173:49">/</operator> <name pos:start="173:51" pos:end="173:60">flash_size</name></expr></argument>,

                              <argument pos:start="175:31" pos:end="175:31"><expr pos:start="175:31" pos:end="175:31"><literal type="number" pos:start="175:31" pos:end="175:31">2</literal></expr></argument>, <argument pos:start="175:34" pos:end="175:39"><expr pos:start="175:34" pos:end="175:39"><literal type="number" pos:start="175:34" pos:end="175:39">0x00BF</literal></expr></argument>, <argument pos:start="175:42" pos:end="175:47"><expr pos:start="175:42" pos:end="175:47"><literal type="number" pos:start="175:42" pos:end="175:47">0x236D</literal></expr></argument>, <argument pos:start="175:50" pos:end="175:55"><expr pos:start="175:50" pos:end="175:55"><literal type="number" pos:start="175:50" pos:end="175:55">0x0000</literal></expr></argument>, <argument pos:start="175:58" pos:end="175:63"><expr pos:start="175:58" pos:end="175:63"><literal type="number" pos:start="175:58" pos:end="175:63">0x0000</literal></expr></argument>,

                              <argument pos:start="177:31" pos:end="177:36"><expr pos:start="177:31" pos:end="177:36"><literal type="number" pos:start="177:31" pos:end="177:36">0x5555</literal></expr></argument>, <argument pos:start="177:39" pos:end="177:44"><expr pos:start="177:39" pos:end="177:44"><literal type="number" pos:start="177:39" pos:end="177:44">0x2AAA</literal></expr></argument>, <argument pos:start="177:47" pos:end="177:47"><expr pos:start="177:47" pos:end="177:47"><literal type="number" pos:start="177:47" pos:end="177:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="179:1" pos:end="179:5">#<cpp:directive pos:start="179:2" pos:end="179:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="181:9" pos:end="194:0"><expr pos:start="181:9" pos:end="191:48"><call pos:start="181:9" pos:end="191:48"><name pos:start="181:9" pos:end="181:29">pflash_cfi02_register</name><argument_list pos:start="181:30" pos:end="191:48">(<argument pos:start="181:31" pos:end="181:49"><expr pos:start="181:31" pos:end="181:49"><literal type="number" pos:start="181:31" pos:end="181:32">0</literal><operator pos:start="181:32" pos:end="181:32">-</operator><name pos:start="181:33" pos:end="181:49">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="181:52" pos:end="181:77"><expr pos:start="181:52" pos:end="181:77"><call pos:start="181:52" pos:end="181:77"><name pos:start="181:52" pos:end="181:65">qemu_ram_alloc</name><argument_list pos:start="181:66" pos:end="181:77">(<argument pos:start="181:67" pos:end="181:76"><expr pos:start="181:67" pos:end="181:76"><name pos:start="181:67" pos:end="181:76">flash_size</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="183:31" pos:end="183:41"><expr pos:start="183:31" pos:end="183:41"><name pos:start="183:31" pos:end="183:41"><name pos:start="183:31" pos:end="183:35">dinfo</name><operator pos:start="183:36" pos:end="183:37">-&gt;</operator><name pos:start="183:38" pos:end="183:41">bdrv</name></name></expr></argument>, <argument pos:start="183:44" pos:end="183:50"><expr pos:start="183:44" pos:end="183:50"><literal type="number" pos:start="183:44" pos:end="183:50">0x10000</literal></expr></argument>,

                              <argument pos:start="185:31" pos:end="185:57"><expr pos:start="185:31" pos:end="185:57"><operator pos:start="185:31" pos:end="185:31">(</operator><name pos:start="185:32" pos:end="185:41">flash_size</name> <operator pos:start="185:43" pos:end="185:43">+</operator> <literal type="number" pos:start="185:45" pos:end="185:50">0xffff</literal><operator pos:start="185:51" pos:end="185:51">)</operator> <operator pos:start="185:53" pos:end="185:54">&gt;&gt;</operator> <literal type="number" pos:start="185:56" pos:end="185:57">16</literal></expr></argument>,

                              <argument pos:start="187:31" pos:end="187:60"><expr pos:start="187:31" pos:end="187:60"><name pos:start="187:31" pos:end="187:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="187:49" pos:end="187:49">/</operator> <name pos:start="187:51" pos:end="187:60">flash_size</name></expr></argument>,

                              <argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">2</literal></expr></argument>, <argument pos:start="189:34" pos:end="189:39"><expr pos:start="189:34" pos:end="189:39"><literal type="number" pos:start="189:34" pos:end="189:39">0x00BF</literal></expr></argument>, <argument pos:start="189:42" pos:end="189:47"><expr pos:start="189:42" pos:end="189:47"><literal type="number" pos:start="189:42" pos:end="189:47">0x236D</literal></expr></argument>, <argument pos:start="189:50" pos:end="189:55"><expr pos:start="189:50" pos:end="189:55"><literal type="number" pos:start="189:50" pos:end="189:55">0x0000</literal></expr></argument>, <argument pos:start="189:58" pos:end="189:63"><expr pos:start="189:58" pos:end="189:63"><literal type="number" pos:start="189:58" pos:end="189:63">0x0000</literal></expr></argument>,

                              <argument pos:start="191:31" pos:end="191:36"><expr pos:start="191:31" pos:end="191:36"><literal type="number" pos:start="191:31" pos:end="191:36">0x5555</literal></expr></argument>, <argument pos:start="191:39" pos:end="191:44"><expr pos:start="191:39" pos:end="191:44"><literal type="number" pos:start="191:39" pos:end="191:44">0x2AAA</literal></expr></argument>, <argument pos:start="191:47" pos:end="191:47"><expr pos:start="191:47" pos:end="191:47"><literal type="number" pos:start="191:47" pos:end="191:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>



    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:71"><expr pos:start="199:5" pos:end="199:70"><call pos:start="199:5" pos:end="199:70"><name pos:start="199:5" pos:end="199:24">sysbus_create_simple</name><argument_list pos:start="199:25" pos:end="199:70">(<argument pos:start="199:26" pos:end="199:45"><expr pos:start="199:26" pos:end="199:45"><literal type="string" pos:start="199:26" pos:end="199:45">"mv88w8618_flashcfg"</literal></expr></argument>, <argument pos:start="199:48" pos:end="199:63"><expr pos:start="199:48" pos:end="199:63"><name pos:start="199:48" pos:end="199:63">MP_FLASHCFG_BASE</name></expr></argument>, <argument pos:start="199:66" pos:end="199:69"><expr pos:start="199:66" pos:end="199:69"><name pos:start="199:66" pos:end="199:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:52"><expr pos:start="203:5" pos:end="203:51"><call pos:start="203:5" pos:end="203:51"><name pos:start="203:5" pos:end="203:24">qemu_check_nic_model</name><argument_list pos:start="203:25" pos:end="203:51">(<argument pos:start="203:26" pos:end="203:37"><expr pos:start="203:26" pos:end="203:37"><operator pos:start="203:26" pos:end="203:26">&amp;</operator><name pos:start="203:27" pos:end="203:37"><name pos:start="203:27" pos:end="203:34">nd_table</name><index pos:start="203:35" pos:end="203:37">[<expr pos:start="203:36" pos:end="203:36"><literal type="number" pos:start="203:36" pos:end="203:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:40" pos:end="203:50"><expr pos:start="203:40" pos:end="203:50"><literal type="string" pos:start="203:40" pos:end="203:50">"mv88w8618"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:45"><expr pos:start="205:5" pos:end="205:44"><name pos:start="205:5" pos:end="205:7">dev</name> <operator pos:start="205:9" pos:end="205:9">=</operator> <call pos:start="205:11" pos:end="205:44"><name pos:start="205:11" pos:end="205:21">qdev_create</name><argument_list pos:start="205:22" pos:end="205:44">(<argument pos:start="205:23" pos:end="205:26"><expr pos:start="205:23" pos:end="205:26"><name pos:start="205:23" pos:end="205:26">NULL</name></expr></argument>, <argument pos:start="205:29" pos:end="205:43"><expr pos:start="205:29" pos:end="205:43"><literal type="string" pos:start="205:29" pos:end="205:43">"mv88w8618_eth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:47"><expr pos:start="207:5" pos:end="207:46"><call pos:start="207:5" pos:end="207:46"><name pos:start="207:5" pos:end="207:27">qdev_set_nic_properties</name><argument_list pos:start="207:28" pos:end="207:46">(<argument pos:start="207:29" pos:end="207:31"><expr pos:start="207:29" pos:end="207:31"><name pos:start="207:29" pos:end="207:31">dev</name></expr></argument>, <argument pos:start="207:34" pos:end="207:45"><expr pos:start="207:34" pos:end="207:45"><operator pos:start="207:34" pos:end="207:34">&amp;</operator><name pos:start="207:35" pos:end="207:45"><name pos:start="207:35" pos:end="207:42">nd_table</name><index pos:start="207:43" pos:end="207:45">[<expr pos:start="207:44" pos:end="207:44"><literal type="number" pos:start="207:44" pos:end="207:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:26"><expr pos:start="209:5" pos:end="209:25"><call pos:start="209:5" pos:end="209:25"><name pos:start="209:5" pos:end="209:20">qdev_init_nofail</name><argument_list pos:start="209:21" pos:end="209:25">(<argument pos:start="209:22" pos:end="209:24"><expr pos:start="209:22" pos:end="209:24"><name pos:start="209:22" pos:end="209:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:59"><expr pos:start="211:5" pos:end="211:58"><call pos:start="211:5" pos:end="211:58"><name pos:start="211:5" pos:end="211:19">sysbus_mmio_map</name><argument_list pos:start="211:20" pos:end="211:58">(<argument pos:start="211:21" pos:end="211:41"><expr pos:start="211:21" pos:end="211:41"><call pos:start="211:21" pos:end="211:41"><name pos:start="211:21" pos:end="211:36">sysbus_from_qdev</name><argument_list pos:start="211:37" pos:end="211:41">(<argument pos:start="211:38" pos:end="211:40"><expr pos:start="211:38" pos:end="211:40"><name pos:start="211:38" pos:end="211:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="211:44" pos:end="211:44"><expr pos:start="211:44" pos:end="211:44"><literal type="number" pos:start="211:44" pos:end="211:44">0</literal></expr></argument>, <argument pos:start="211:47" pos:end="211:57"><expr pos:start="211:47" pos:end="211:57"><name pos:start="211:47" pos:end="211:57">MP_ETH_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:66"><expr pos:start="213:5" pos:end="213:65"><call pos:start="213:5" pos:end="213:65"><name pos:start="213:5" pos:end="213:22">sysbus_connect_irq</name><argument_list pos:start="213:23" pos:end="213:65">(<argument pos:start="213:24" pos:end="213:44"><expr pos:start="213:24" pos:end="213:44"><call pos:start="213:24" pos:end="213:44"><name pos:start="213:24" pos:end="213:39">sysbus_from_qdev</name><argument_list pos:start="213:40" pos:end="213:44">(<argument pos:start="213:41" pos:end="213:43"><expr pos:start="213:41" pos:end="213:43"><name pos:start="213:41" pos:end="213:43">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="213:47" pos:end="213:47"><expr pos:start="213:47" pos:end="213:47"><literal type="number" pos:start="213:47" pos:end="213:47">0</literal></expr></argument>, <argument pos:start="213:50" pos:end="213:64"><expr pos:start="213:50" pos:end="213:64"><name pos:start="213:50" pos:end="213:64"><name pos:start="213:50" pos:end="213:52">pic</name><index pos:start="213:53" pos:end="213:64">[<expr pos:start="213:54" pos:end="213:63"><name pos:start="213:54" pos:end="213:63">MP_ETH_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:63"><expr pos:start="217:5" pos:end="217:62"><call pos:start="217:5" pos:end="217:62"><name pos:start="217:5" pos:end="217:24">sysbus_create_simple</name><argument_list pos:start="217:25" pos:end="217:62">(<argument pos:start="217:26" pos:end="217:41"><expr pos:start="217:26" pos:end="217:41"><literal type="string" pos:start="217:26" pos:end="217:41">"mv88w8618_wlan"</literal></expr></argument>, <argument pos:start="217:44" pos:end="217:55"><expr pos:start="217:44" pos:end="217:55"><name pos:start="217:44" pos:end="217:55">MP_WLAN_BASE</name></expr></argument>, <argument pos:start="217:58" pos:end="217:61"><expr pos:start="217:58" pos:end="217:61"><name pos:start="217:58" pos:end="217:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:25"><expr pos:start="221:5" pos:end="221:24"><call pos:start="221:5" pos:end="221:24"><name pos:start="221:5" pos:end="221:22">musicpal_misc_init</name><argument_list pos:start="221:23" pos:end="221:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:80"><expr pos:start="225:5" pos:end="225:79"><name pos:start="225:5" pos:end="225:7">dev</name> <operator pos:start="225:9" pos:end="225:9">=</operator> <call pos:start="225:11" pos:end="225:79"><name pos:start="225:11" pos:end="225:30">sysbus_create_simple</name><argument_list pos:start="225:31" pos:end="225:79">(<argument pos:start="225:32" pos:end="225:46"><expr pos:start="225:32" pos:end="225:46"><literal type="string" pos:start="225:32" pos:end="225:46">"musicpal_gpio"</literal></expr></argument>, <argument pos:start="225:49" pos:end="225:60"><expr pos:start="225:49" pos:end="225:60"><name pos:start="225:49" pos:end="225:60">MP_GPIO_BASE</name></expr></argument>, <argument pos:start="225:63" pos:end="225:78"><expr pos:start="225:63" pos:end="225:78"><name pos:start="225:63" pos:end="225:78"><name pos:start="225:63" pos:end="225:65">pic</name><index pos:start="225:66" pos:end="225:78">[<expr pos:start="225:67" pos:end="225:77"><name pos:start="225:67" pos:end="225:77">MP_GPIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:56"><expr pos:start="227:5" pos:end="227:55"><name pos:start="227:5" pos:end="227:11">i2c_dev</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:55"><name pos:start="227:15" pos:end="227:34">sysbus_create_simple</name><argument_list pos:start="227:35" pos:end="227:55">(<argument pos:start="227:36" pos:end="227:45"><expr pos:start="227:36" pos:end="227:45"><literal type="string" pos:start="227:36" pos:end="227:45">"gpio_i2c"</literal></expr></argument>, <argument pos:start="227:48" pos:end="227:48"><expr pos:start="227:48" pos:end="227:48"><literal type="number" pos:start="227:48" pos:end="227:48">0</literal></expr></argument>, <argument pos:start="227:51" pos:end="227:54"><expr pos:start="227:51" pos:end="227:54"><name pos:start="227:51" pos:end="227:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:56"><expr pos:start="229:5" pos:end="229:55"><name pos:start="229:5" pos:end="229:7">i2c</name> <operator pos:start="229:9" pos:end="229:9">=</operator> <operator pos:start="229:11" pos:end="229:11">(</operator><name pos:start="229:12" pos:end="229:18">i2c_bus</name> <operator pos:start="229:20" pos:end="229:20">*</operator><operator pos:start="229:21" pos:end="229:21">)</operator><call pos:start="229:22" pos:end="229:55"><name pos:start="229:22" pos:end="229:39">qdev_get_child_bus</name><argument_list pos:start="229:40" pos:end="229:55">(<argument pos:start="229:41" pos:end="229:47"><expr pos:start="229:41" pos:end="229:47"><name pos:start="229:41" pos:end="229:47">i2c_dev</name></expr></argument>, <argument pos:start="229:50" pos:end="229:54"><expr pos:start="229:50" pos:end="229:54"><literal type="string" pos:start="229:50" pos:end="229:54">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:70"><expr pos:start="233:5" pos:end="233:69"><name pos:start="233:5" pos:end="233:11">lcd_dev</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <call pos:start="233:15" pos:end="233:69"><name pos:start="233:15" pos:end="233:34">sysbus_create_simple</name><argument_list pos:start="233:35" pos:end="233:69">(<argument pos:start="233:36" pos:end="233:49"><expr pos:start="233:36" pos:end="233:49"><literal type="string" pos:start="233:36" pos:end="233:49">"musicpal_lcd"</literal></expr></argument>, <argument pos:start="233:52" pos:end="233:62"><expr pos:start="233:52" pos:end="233:62"><name pos:start="233:52" pos:end="233:62">MP_LCD_BASE</name></expr></argument>, <argument pos:start="233:65" pos:end="233:68"><expr pos:start="233:65" pos:end="233:68"><name pos:start="233:65" pos:end="233:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:60"><expr pos:start="235:5" pos:end="235:59"><name pos:start="235:5" pos:end="235:11">key_dev</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <call pos:start="235:15" pos:end="235:59"><name pos:start="235:15" pos:end="235:34">sysbus_create_simple</name><argument_list pos:start="235:35" pos:end="235:59">(<argument pos:start="235:36" pos:end="235:49"><expr pos:start="235:36" pos:end="235:49"><literal type="string" pos:start="235:36" pos:end="235:49">"musicpal_key"</literal></expr></argument>, <argument pos:start="235:52" pos:end="235:52"><expr pos:start="235:52" pos:end="235:52"><literal type="number" pos:start="235:52" pos:end="235:52">0</literal></expr></argument>, <argument pos:start="235:55" pos:end="235:58"><expr pos:start="235:55" pos:end="235:58"><name pos:start="235:55" pos:end="235:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:23">/* I2C read data */</comment>

    <expr_stmt pos:start="241:5" pos:end="243:71"><expr pos:start="241:5" pos:end="243:70"><call pos:start="241:5" pos:end="243:70"><name pos:start="241:5" pos:end="241:25">qdev_connect_gpio_out</name><argument_list pos:start="241:26" pos:end="243:70">(<argument pos:start="241:27" pos:end="241:33"><expr pos:start="241:27" pos:end="241:33"><name pos:start="241:27" pos:end="241:33">i2c_dev</name></expr></argument>, <argument pos:start="241:36" pos:end="241:36"><expr pos:start="241:36" pos:end="241:36"><literal type="number" pos:start="241:36" pos:end="241:36">0</literal></expr></argument>,

                          <argument pos:start="243:27" pos:end="243:69"><expr pos:start="243:27" pos:end="243:69"><call pos:start="243:27" pos:end="243:69"><name pos:start="243:27" pos:end="243:42">qdev_get_gpio_in</name><argument_list pos:start="243:43" pos:end="243:69">(<argument pos:start="243:44" pos:end="243:46"><expr pos:start="243:44" pos:end="243:46"><name pos:start="243:44" pos:end="243:46">dev</name></expr></argument>, <argument pos:start="243:49" pos:end="243:68"><expr pos:start="243:49" pos:end="243:68"><name pos:start="243:49" pos:end="243:68">MP_GPIO_I2C_DATA_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="245:5" pos:end="245:18">/* I2C data */</comment>

    <expr_stmt pos:start="247:5" pos:end="247:64"><expr pos:start="247:5" pos:end="247:63"><call pos:start="247:5" pos:end="247:63"><name pos:start="247:5" pos:end="247:25">qdev_connect_gpio_out</name><argument_list pos:start="247:26" pos:end="247:63">(<argument pos:start="247:27" pos:end="247:29"><expr pos:start="247:27" pos:end="247:29"><name pos:start="247:27" pos:end="247:29">dev</name></expr></argument>, <argument pos:start="247:32" pos:end="247:32"><expr pos:start="247:32" pos:end="247:32"><literal type="number" pos:start="247:32" pos:end="247:32">3</literal></expr></argument>, <argument pos:start="247:35" pos:end="247:62"><expr pos:start="247:35" pos:end="247:62"><call pos:start="247:35" pos:end="247:62"><name pos:start="247:35" pos:end="247:50">qdev_get_gpio_in</name><argument_list pos:start="247:51" pos:end="247:62">(<argument pos:start="247:52" pos:end="247:58"><expr pos:start="247:52" pos:end="247:58"><name pos:start="247:52" pos:end="247:58">i2c_dev</name></expr></argument>, <argument pos:start="247:61" pos:end="247:61"><expr pos:start="247:61" pos:end="247:61"><literal type="number" pos:start="247:61" pos:end="247:61">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="249:5" pos:end="249:19">/* I2C clock */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:64"><expr pos:start="251:5" pos:end="251:63"><call pos:start="251:5" pos:end="251:63"><name pos:start="251:5" pos:end="251:25">qdev_connect_gpio_out</name><argument_list pos:start="251:26" pos:end="251:63">(<argument pos:start="251:27" pos:end="251:29"><expr pos:start="251:27" pos:end="251:29"><name pos:start="251:27" pos:end="251:29">dev</name></expr></argument>, <argument pos:start="251:32" pos:end="251:32"><expr pos:start="251:32" pos:end="251:32"><literal type="number" pos:start="251:32" pos:end="251:32">4</literal></expr></argument>, <argument pos:start="251:35" pos:end="251:62"><expr pos:start="251:35" pos:end="251:62"><call pos:start="251:35" pos:end="251:62"><name pos:start="251:35" pos:end="251:50">qdev_get_gpio_in</name><argument_list pos:start="251:51" pos:end="251:62">(<argument pos:start="251:52" pos:end="251:58"><expr pos:start="251:52" pos:end="251:58"><name pos:start="251:52" pos:end="251:58">i2c_dev</name></expr></argument>, <argument pos:start="251:61" pos:end="251:61"><expr pos:start="251:61" pos:end="251:61"><literal type="number" pos:start="251:61" pos:end="251:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="255:5" pos:end="259:5">for <control pos:start="255:9" pos:end="255:27">(<init pos:start="255:10" pos:end="255:15"><expr pos:start="255:10" pos:end="255:14"><name pos:start="255:10" pos:end="255:10">i</name> <operator pos:start="255:12" pos:end="255:12">=</operator> <literal type="number" pos:start="255:14" pos:end="255:14">0</literal></expr>;</init> <condition pos:start="255:17" pos:end="255:22"><expr pos:start="255:17" pos:end="255:21"><name pos:start="255:17" pos:end="255:17">i</name> <operator pos:start="255:19" pos:end="255:19">&lt;</operator> <literal type="number" pos:start="255:21" pos:end="255:21">3</literal></expr>;</condition> <incr pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:24">i</name><operator pos:start="255:25" pos:end="255:26">++</operator></expr></incr>)</control> <block pos:start="255:29" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:68">

        <expr_stmt pos:start="257:9" pos:end="257:68"><expr pos:start="257:9" pos:end="257:67"><call pos:start="257:9" pos:end="257:67"><name pos:start="257:9" pos:end="257:29">qdev_connect_gpio_out</name><argument_list pos:start="257:30" pos:end="257:67">(<argument pos:start="257:31" pos:end="257:33"><expr pos:start="257:31" pos:end="257:33"><name pos:start="257:31" pos:end="257:33">dev</name></expr></argument>, <argument pos:start="257:36" pos:end="257:36"><expr pos:start="257:36" pos:end="257:36"><name pos:start="257:36" pos:end="257:36">i</name></expr></argument>, <argument pos:start="257:39" pos:end="257:66"><expr pos:start="257:39" pos:end="257:66"><call pos:start="257:39" pos:end="257:66"><name pos:start="257:39" pos:end="257:54">qdev_get_gpio_in</name><argument_list pos:start="257:55" pos:end="257:66">(<argument pos:start="257:56" pos:end="257:62"><expr pos:start="257:56" pos:end="257:62"><name pos:start="257:56" pos:end="257:62">lcd_dev</name></expr></argument>, <argument pos:start="257:65" pos:end="257:65"><expr pos:start="257:65" pos:end="257:65"><name pos:start="257:65" pos:end="257:65">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="261:5" pos:end="265:5">for <control pos:start="261:9" pos:end="261:27">(<init pos:start="261:10" pos:end="261:15"><expr pos:start="261:10" pos:end="261:14"><name pos:start="261:10" pos:end="261:10">i</name> <operator pos:start="261:12" pos:end="261:12">=</operator> <literal type="number" pos:start="261:14" pos:end="261:14">0</literal></expr>;</init> <condition pos:start="261:17" pos:end="261:22"><expr pos:start="261:17" pos:end="261:21"><name pos:start="261:17" pos:end="261:17">i</name> <operator pos:start="261:19" pos:end="261:19">&lt;</operator> <literal type="number" pos:start="261:21" pos:end="261:21">4</literal></expr>;</condition> <incr pos:start="261:24" pos:end="261:26"><expr pos:start="261:24" pos:end="261:26"><name pos:start="261:24" pos:end="261:24">i</name><operator pos:start="261:25" pos:end="261:26">++</operator></expr></incr>)</control> <block pos:start="261:29" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:72">

        <expr_stmt pos:start="263:9" pos:end="263:72"><expr pos:start="263:9" pos:end="263:71"><call pos:start="263:9" pos:end="263:71"><name pos:start="263:9" pos:end="263:29">qdev_connect_gpio_out</name><argument_list pos:start="263:30" pos:end="263:71">(<argument pos:start="263:31" pos:end="263:37"><expr pos:start="263:31" pos:end="263:37"><name pos:start="263:31" pos:end="263:37">key_dev</name></expr></argument>, <argument pos:start="263:40" pos:end="263:40"><expr pos:start="263:40" pos:end="263:40"><name pos:start="263:40" pos:end="263:40">i</name></expr></argument>, <argument pos:start="263:43" pos:end="263:70"><expr pos:start="263:43" pos:end="263:70"><call pos:start="263:43" pos:end="263:70"><name pos:start="263:43" pos:end="263:58">qdev_get_gpio_in</name><argument_list pos:start="263:59" pos:end="263:70">(<argument pos:start="263:60" pos:end="263:62"><expr pos:start="263:60" pos:end="263:62"><name pos:start="263:60" pos:end="263:62">dev</name></expr></argument>, <argument pos:start="263:65" pos:end="263:69"><expr pos:start="263:65" pos:end="263:69"><name pos:start="263:65" pos:end="263:65">i</name> <operator pos:start="263:67" pos:end="263:67">+</operator> <literal type="number" pos:start="263:69" pos:end="263:69">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="267:5" pos:end="276:0">for <control pos:start="267:9" pos:end="267:27">(<init pos:start="267:10" pos:end="267:15"><expr pos:start="267:10" pos:end="267:14"><name pos:start="267:10" pos:end="267:10">i</name> <operator pos:start="267:12" pos:end="267:12">=</operator> <literal type="number" pos:start="267:14" pos:end="267:14">4</literal></expr>;</init> <condition pos:start="267:17" pos:end="267:22"><expr pos:start="267:17" pos:end="267:21"><name pos:start="267:17" pos:end="267:17">i</name> <operator pos:start="267:19" pos:end="267:19">&lt;</operator> <literal type="number" pos:start="267:21" pos:end="267:21">8</literal></expr>;</condition> <incr pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:24">i</name><operator pos:start="267:25" pos:end="267:26">++</operator></expr></incr>)</control> <block pos:start="267:29" pos:end="276:0">{<block_content pos:start="269:9" pos:end="269:73">

        <expr_stmt pos:start="269:9" pos:end="269:73"><expr pos:start="269:9" pos:end="269:72"><call pos:start="269:9" pos:end="269:72"><name pos:start="269:9" pos:end="269:29">qdev_connect_gpio_out</name><argument_list pos:start="269:30" pos:end="269:72">(<argument pos:start="269:31" pos:end="269:37"><expr pos:start="269:31" pos:end="269:37"><name pos:start="269:31" pos:end="269:37">key_dev</name></expr></argument>, <argument pos:start="269:40" pos:end="269:40"><expr pos:start="269:40" pos:end="269:40"><name pos:start="269:40" pos:end="269:40">i</name></expr></argument>, <argument pos:start="269:43" pos:end="269:71"><expr pos:start="269:43" pos:end="269:71"><call pos:start="269:43" pos:end="269:71"><name pos:start="269:43" pos:end="269:58">qdev_get_gpio_in</name><argument_list pos:start="269:59" pos:end="269:71">(<argument pos:start="269:60" pos:end="269:62"><expr pos:start="269:60" pos:end="269:62"><name pos:start="269:60" pos:end="269:62">dev</name></expr></argument>, <argument pos:start="269:65" pos:end="269:70"><expr pos:start="269:65" pos:end="269:70"><name pos:start="269:65" pos:end="269:65">i</name> <operator pos:start="269:67" pos:end="269:67">+</operator> <literal type="number" pos:start="269:69" pos:end="269:70">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:ifdef pos:start="275:1" pos:end="275:16">#<cpp:directive pos:start="275:2" pos:end="275:6">ifdef</cpp:directive> <name pos:start="275:8" pos:end="275:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="277:5" pos:end="277:61"><expr pos:start="277:5" pos:end="277:60"><name pos:start="277:5" pos:end="277:14">wm8750_dev</name> <operator pos:start="277:16" pos:end="277:16">=</operator> <call pos:start="277:18" pos:end="277:60"><name pos:start="277:18" pos:end="277:33">i2c_create_slave</name><argument_list pos:start="277:34" pos:end="277:60">(<argument pos:start="277:35" pos:end="277:37"><expr pos:start="277:35" pos:end="277:37"><name pos:start="277:35" pos:end="277:37">i2c</name></expr></argument>, <argument pos:start="277:40" pos:end="277:47"><expr pos:start="277:40" pos:end="277:47"><literal type="string" pos:start="277:40" pos:end="277:47">"wm8750"</literal></expr></argument>, <argument pos:start="277:50" pos:end="277:59"><expr pos:start="277:50" pos:end="277:59"><name pos:start="277:50" pos:end="277:59">MP_WM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:47"><expr pos:start="279:5" pos:end="279:46"><name pos:start="279:5" pos:end="279:7">dev</name> <operator pos:start="279:9" pos:end="279:9">=</operator> <call pos:start="279:11" pos:end="279:46"><name pos:start="279:11" pos:end="279:21">qdev_create</name><argument_list pos:start="279:22" pos:end="279:46">(<argument pos:start="279:23" pos:end="279:26"><expr pos:start="279:23" pos:end="279:26"><name pos:start="279:23" pos:end="279:26">NULL</name></expr></argument>, <argument pos:start="279:29" pos:end="279:45"><expr pos:start="279:29" pos:end="279:45"><literal type="string" pos:start="279:29" pos:end="279:45">"mv88w8618_audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:30"><expr pos:start="281:5" pos:end="281:29"><name pos:start="281:5" pos:end="281:5">s</name> <operator pos:start="281:7" pos:end="281:7">=</operator> <call pos:start="281:9" pos:end="281:29"><name pos:start="281:9" pos:end="281:24">sysbus_from_qdev</name><argument_list pos:start="281:25" pos:end="281:29">(<argument pos:start="281:26" pos:end="281:28"><expr pos:start="281:26" pos:end="281:28"><name pos:start="281:26" pos:end="281:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:49"><expr pos:start="283:5" pos:end="283:48"><call pos:start="283:5" pos:end="283:48"><name pos:start="283:5" pos:end="283:21">qdev_prop_set_ptr</name><argument_list pos:start="283:22" pos:end="283:48">(<argument pos:start="283:23" pos:end="283:25"><expr pos:start="283:23" pos:end="283:25"><name pos:start="283:23" pos:end="283:25">dev</name></expr></argument>, <argument pos:start="283:28" pos:end="283:35"><expr pos:start="283:28" pos:end="283:35"><literal type="string" pos:start="283:28" pos:end="283:35">"wm8750"</literal></expr></argument>, <argument pos:start="283:38" pos:end="283:47"><expr pos:start="283:38" pos:end="283:47"><name pos:start="283:38" pos:end="283:47">wm8750_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:26"><expr pos:start="285:5" pos:end="285:25"><call pos:start="285:5" pos:end="285:25"><name pos:start="285:5" pos:end="285:20">qdev_init_nofail</name><argument_list pos:start="285:21" pos:end="285:25">(<argument pos:start="285:22" pos:end="285:24"><expr pos:start="285:22" pos:end="285:24"><name pos:start="285:22" pos:end="285:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:41"><expr pos:start="287:5" pos:end="287:40"><call pos:start="287:5" pos:end="287:40"><name pos:start="287:5" pos:end="287:19">sysbus_mmio_map</name><argument_list pos:start="287:20" pos:end="287:40">(<argument pos:start="287:21" pos:end="287:21"><expr pos:start="287:21" pos:end="287:21"><name pos:start="287:21" pos:end="287:21">s</name></expr></argument>, <argument pos:start="287:24" pos:end="287:24"><expr pos:start="287:24" pos:end="287:24"><literal type="number" pos:start="287:24" pos:end="287:24">0</literal></expr></argument>, <argument pos:start="287:27" pos:end="287:39"><expr pos:start="287:27" pos:end="287:39"><name pos:start="287:27" pos:end="287:39">MP_AUDIO_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="292:0"><expr pos:start="289:5" pos:end="289:47"><call pos:start="289:5" pos:end="289:47"><name pos:start="289:5" pos:end="289:22">sysbus_connect_irq</name><argument_list pos:start="289:23" pos:end="289:47">(<argument pos:start="289:24" pos:end="289:24"><expr pos:start="289:24" pos:end="289:24"><name pos:start="289:24" pos:end="289:24">s</name></expr></argument>, <argument pos:start="289:27" pos:end="289:27"><expr pos:start="289:27" pos:end="289:27"><literal type="number" pos:start="289:27" pos:end="289:27">0</literal></expr></argument>, <argument pos:start="289:30" pos:end="289:46"><expr pos:start="289:30" pos:end="289:46"><name pos:start="289:30" pos:end="289:46"><name pos:start="289:30" pos:end="289:32">pic</name><index pos:start="289:33" pos:end="289:46">[<expr pos:start="289:34" pos:end="289:45"><name pos:start="289:34" pos:end="289:45">MP_AUDIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="295:5" pos:end="295:50"><expr pos:start="295:5" pos:end="295:49"><name pos:start="295:5" pos:end="295:27"><name pos:start="295:5" pos:end="295:18">musicpal_binfo</name><operator pos:start="295:19" pos:end="295:19">.</operator><name pos:start="295:20" pos:end="295:27">ram_size</name></name> <operator pos:start="295:29" pos:end="295:29">=</operator> <name pos:start="295:31" pos:end="295:49">MP_RAM_DEFAULT_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:53"><expr pos:start="297:5" pos:end="297:52"><name pos:start="297:5" pos:end="297:34"><name pos:start="297:5" pos:end="297:18">musicpal_binfo</name><operator pos:start="297:19" pos:end="297:19">.</operator><name pos:start="297:20" pos:end="297:34">kernel_filename</name></name> <operator pos:start="297:36" pos:end="297:36">=</operator> <name pos:start="297:38" pos:end="297:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:51"><expr pos:start="299:5" pos:end="299:50"><name pos:start="299:5" pos:end="299:33"><name pos:start="299:5" pos:end="299:18">musicpal_binfo</name><operator pos:start="299:19" pos:end="299:19">.</operator><name pos:start="299:20" pos:end="299:33">kernel_cmdline</name></name> <operator pos:start="299:35" pos:end="299:35">=</operator> <name pos:start="299:37" pos:end="299:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:53"><expr pos:start="301:5" pos:end="301:52"><name pos:start="301:5" pos:end="301:34"><name pos:start="301:5" pos:end="301:18">musicpal_binfo</name><operator pos:start="301:19" pos:end="301:19">.</operator><name pos:start="301:20" pos:end="301:34">initrd_filename</name></name> <operator pos:start="301:36" pos:end="301:36">=</operator> <name pos:start="301:38" pos:end="301:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:42"><expr pos:start="303:5" pos:end="303:41"><call pos:start="303:5" pos:end="303:41"><name pos:start="303:5" pos:end="303:19">arm_load_kernel</name><argument_list pos:start="303:20" pos:end="303:41">(<argument pos:start="303:21" pos:end="303:23"><expr pos:start="303:21" pos:end="303:23"><name pos:start="303:21" pos:end="303:23">env</name></expr></argument>, <argument pos:start="303:26" pos:end="303:40"><expr pos:start="303:26" pos:end="303:40"><operator pos:start="303:26" pos:end="303:26">&amp;</operator><name pos:start="303:27" pos:end="303:40">musicpal_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
