<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1054.c" pos:tabs="8"><function pos:start="1:1" pos:end="697:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="3:43">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:28">struct</name> <name pos:start="1:30" pos:end="1:38">drive_opt</name></name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">arg</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:57">snapshot</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:42"><decl pos:start="3:23" pos:end="3:42"><type pos:start="3:23" pos:end="3:42"><name pos:start="3:23" pos:end="3:33">QEMUMachine</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:42">machine</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="697:1">{<block_content pos:start="7:5" pos:end="695:13">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:13">file</name><index pos:start="9:14" pos:end="9:19">[<expr pos:start="9:15" pos:end="9:18"><literal type="number" pos:start="9:15" pos:end="9:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:21"><name pos:start="11:10" pos:end="11:16">devname</name><index pos:start="11:17" pos:end="11:21">[<expr pos:start="11:18" pos:end="11:20"><literal type="number" pos:start="11:18" pos:end="11:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:15">serial</name><index pos:start="13:16" pos:end="13:19">[<expr pos:start="13:17" pos:end="13:18"><literal type="number" pos:start="13:17" pos:end="13:18">21</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:24">mediastr</name> <init pos:start="15:26" pos:end="15:29">= <expr pos:start="15:28" pos:end="15:29"><literal type="string" pos:start="15:28" pos:end="15:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">BlockInterfaceType</name></type> <name pos:start="17:24" pos:end="17:27">type</name></decl>;</decl_stmt>

    <enum pos:start="19:5" pos:end="19:43">enum <block pos:start="19:10" pos:end="19:36">{ <decl pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:21">MEDIA_DISK</name></decl>, <decl pos:start="19:24" pos:end="19:34"><name pos:start="19:24" pos:end="19:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="19:38" pos:end="19:42"><name pos:start="19:38" pos:end="19:42">media</name></decl>;</enum>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:14">bus_id</name></decl>, <decl pos:start="21:17" pos:end="21:23"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:17" pos:end="21:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">cyls</name></decl>, <decl pos:start="23:15" pos:end="23:19"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:19">heads</name></decl>, <decl pos:start="23:22" pos:end="23:25"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:22" pos:end="23:25">secs</name></decl>, <decl pos:start="23:28" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:28" pos:end="23:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:20">BlockDriverState</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:26">bdrv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">BlockDriver</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:20">drv</name> <init pos:start="27:22" pos:end="27:27">= <expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:17"><decl pos:start="29:5" pos:end="29:16"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:13"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:14"><decl pos:start="33:5" pos:end="33:13"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:28"><decl pos:start="35:5" pos:end="35:18"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">bdrv_flags</name></decl>, <decl pos:start="35:21" pos:end="35:27"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:21" pos:end="35:27">onerror</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:25"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:24">drives_table_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:25"><decl pos:start="39:5" pos:end="39:24"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:8">char</name> <modifier pos:start="39:10" pos:end="39:10">*</modifier></type><name pos:start="39:11" pos:end="39:13">str</name> <init pos:start="39:15" pos:end="39:24">= <expr pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:19">arg</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:24">opt</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="49:50"><decl pos:start="41:5" pos:end="49:49"><type pos:start="41:5" pos:end="41:29"><specifier pos:start="41:5" pos:end="41:10">static</specifier> <specifier pos:start="41:12" pos:end="41:16">const</specifier> <name pos:start="41:18" pos:end="41:21">char</name> <modifier pos:start="41:23" pos:end="41:23">*</modifier> <specifier pos:start="41:25" pos:end="41:29">const</specifier></type> <name pos:start="41:31" pos:end="41:38"><name pos:start="41:31" pos:end="41:36">params</name><index pos:start="41:37" pos:end="41:38">[]</index></name> <init pos:start="41:40" pos:end="49:49">= <expr pos:start="41:42" pos:end="49:49"><block pos:start="41:42" pos:end="49:49">{ <expr pos:start="41:44" pos:end="41:48"><literal type="string" pos:start="41:44" pos:end="41:48">"bus"</literal></expr>, <expr pos:start="41:51" pos:end="41:56"><literal type="string" pos:start="41:51" pos:end="41:56">"unit"</literal></expr>, <expr pos:start="41:59" pos:end="41:62"><literal type="string" pos:start="41:59" pos:end="41:62">"if"</literal></expr>, <expr pos:start="41:65" pos:end="41:71"><literal type="string" pos:start="41:65" pos:end="41:71">"index"</literal></expr>,

                                           <expr pos:start="43:44" pos:end="43:49"><literal type="string" pos:start="43:44" pos:end="43:49">"cyls"</literal></expr>, <expr pos:start="43:52" pos:end="43:58"><literal type="string" pos:start="43:52" pos:end="43:58">"heads"</literal></expr>, <expr pos:start="43:61" pos:end="43:66"><literal type="string" pos:start="43:61" pos:end="43:66">"secs"</literal></expr>, <expr pos:start="43:69" pos:end="43:75"><literal type="string" pos:start="43:69" pos:end="43:75">"trans"</literal></expr>,

                                           <expr pos:start="45:44" pos:end="45:50"><literal type="string" pos:start="45:44" pos:end="45:50">"media"</literal></expr>, <expr pos:start="45:53" pos:end="45:62"><literal type="string" pos:start="45:53" pos:end="45:62">"snapshot"</literal></expr>, <expr pos:start="45:65" pos:end="45:70"><literal type="string" pos:start="45:65" pos:end="45:70">"file"</literal></expr>,

                                           <expr pos:start="47:44" pos:end="47:50"><literal type="string" pos:start="47:44" pos:end="47:50">"cache"</literal></expr>, <expr pos:start="47:53" pos:end="47:60"><literal type="string" pos:start="47:53" pos:end="47:60">"format"</literal></expr>, <expr pos:start="47:63" pos:end="47:70"><literal type="string" pos:start="47:63" pos:end="47:70">"serial"</literal></expr>, <expr pos:start="47:73" pos:end="47:80"><literal type="string" pos:start="47:73" pos:end="47:80">"werror"</literal></expr>,

                                           <expr pos:start="49:44" pos:end="49:47"><name pos:start="49:44" pos:end="49:47">NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:56">(<expr pos:start="53:9" pos:end="53:55"><call pos:start="53:9" pos:end="53:51"><name pos:start="53:9" pos:end="53:20">check_params</name><argument_list pos:start="53:21" pos:end="53:51">(<argument pos:start="53:22" pos:end="53:24"><expr pos:start="53:22" pos:end="53:24"><name pos:start="53:22" pos:end="53:24">buf</name></expr></argument>, <argument pos:start="53:27" pos:end="53:37"><expr pos:start="53:27" pos:end="53:37"><sizeof pos:start="53:27" pos:end="53:37">sizeof<argument_list pos:start="53:33" pos:end="53:37">(<argument pos:start="53:34" pos:end="53:36"><expr pos:start="53:34" pos:end="53:36"><name pos:start="53:34" pos:end="53:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="53:40" pos:end="53:45"><expr pos:start="53:40" pos:end="53:45"><name pos:start="53:40" pos:end="53:45">params</name></expr></argument>, <argument pos:start="53:48" pos:end="53:50"><expr pos:start="53:48" pos:end="53:50"><name pos:start="53:48" pos:end="53:50">str</name></expr></argument>)</argument_list></call> <operator pos:start="53:53" pos:end="53:53">&lt;</operator> <literal type="number" pos:start="53:55" pos:end="53:55">0</literal></expr>)</condition> <block pos:start="53:58" pos:end="61:5">{<block_content pos:start="55:10" pos:end="59:19">

         <expr_stmt pos:start="55:10" pos:end="57:35"><expr pos:start="55:10" pos:end="57:34"><call pos:start="55:10" pos:end="57:34"><name pos:start="55:10" pos:end="55:16">fprintf</name><argument_list pos:start="55:17" pos:end="57:34">(<argument pos:start="55:18" pos:end="55:23"><expr pos:start="55:18" pos:end="55:23"><name pos:start="55:18" pos:end="55:23">stderr</name></expr></argument>, <argument pos:start="55:26" pos:end="55:65"><expr pos:start="55:26" pos:end="55:65"><literal type="string" pos:start="55:26" pos:end="55:65">"qemu: unknown parameter '%s' in '%s'\n"</literal></expr></argument>,

                         <argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:28">buf</name></expr></argument>, <argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <return pos:start="59:10" pos:end="59:19">return <expr pos:start="59:17" pos:end="59:18"><operator pos:start="59:17" pos:end="59:17">-</operator><literal type="number" pos:start="59:18" pos:end="59:18">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:16"><expr pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:8">file</name><index pos:start="65:9" pos:end="65:11">[<expr pos:start="65:10" pos:end="65:10"><literal type="number" pos:start="65:10" pos:end="65:10">0</literal></expr>]</index></name> <operator pos:start="65:13" pos:end="65:13">=</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:8">cyls</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <name pos:start="67:12" pos:end="67:16">heads</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:23">secs</name> <operator pos:start="67:25" pos:end="67:25">=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:15"><expr pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:10">bus_id</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:17"><expr pos:start="71:5" pos:end="71:16"><name pos:start="71:5" pos:end="71:11">unit_id</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><literal type="number" pos:start="71:16" pos:end="71:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:15">translation</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:15"><expr pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:9">index</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <operator pos:start="75:13" pos:end="75:13">-</operator><literal type="number" pos:start="75:14" pos:end="75:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:14"><expr pos:start="77:5" pos:end="77:13"><name pos:start="77:5" pos:end="77:9">cache</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <literal type="number" pos:start="77:13" pos:end="77:13">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="97:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:26">(<expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:15">machine</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:25">use_scsi</name></name></expr>)</condition> <block pos:start="81:28" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:50">

        <expr_stmt pos:start="83:9" pos:end="83:23"><expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:12">type</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <name pos:start="83:16" pos:end="83:22">IF_SCSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:33"><expr pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:16">max_devs</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:32">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:50"><expr pos:start="87:9" pos:end="87:49"><call pos:start="87:9" pos:end="87:49"><name pos:start="87:9" pos:end="87:15">pstrcpy</name><argument_list pos:start="87:16" pos:end="87:49">(<argument pos:start="87:17" pos:end="87:23"><expr pos:start="87:17" pos:end="87:23"><name pos:start="87:17" pos:end="87:23">devname</name></expr></argument>, <argument pos:start="87:26" pos:end="87:40"><expr pos:start="87:26" pos:end="87:40"><sizeof pos:start="87:26" pos:end="87:40">sizeof<argument_list pos:start="87:32" pos:end="87:40">(<argument pos:start="87:33" pos:end="87:39"><expr pos:start="87:33" pos:end="87:39"><name pos:start="87:33" pos:end="87:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><literal type="string" pos:start="87:43" pos:end="87:48">"scsi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="97:5">else <block pos:start="89:12" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:49">

        <expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:12">type</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <name pos:start="91:16" pos:end="91:21">IF_IDE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:32"><expr pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:16">max_devs</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:31">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:49"><expr pos:start="95:9" pos:end="95:48"><call pos:start="95:9" pos:end="95:48"><name pos:start="95:9" pos:end="95:15">pstrcpy</name><argument_list pos:start="95:16" pos:end="95:48">(<argument pos:start="95:17" pos:end="95:23"><expr pos:start="95:17" pos:end="95:23"><name pos:start="95:17" pos:end="95:23">devname</name></expr></argument>, <argument pos:start="95:26" pos:end="95:40"><expr pos:start="95:26" pos:end="95:40"><sizeof pos:start="95:26" pos:end="95:40">sizeof<argument_list pos:start="95:32" pos:end="95:40">(<argument pos:start="95:33" pos:end="95:39"><expr pos:start="95:33" pos:end="95:39"><name pos:start="95:33" pos:end="95:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:43" pos:end="95:47"><expr pos:start="95:43" pos:end="95:47"><literal type="string" pos:start="95:43" pos:end="95:47">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:23"><expr pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:9">media</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:28">/* extract parameters */</comment>



    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="107:54">(<expr pos:start="107:9" pos:end="107:53"><call pos:start="107:9" pos:end="107:53"><name pos:start="107:9" pos:end="107:23">get_param_value</name><argument_list pos:start="107:24" pos:end="107:53">(<argument pos:start="107:25" pos:end="107:27"><expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:27">buf</name></expr></argument>, <argument pos:start="107:30" pos:end="107:40"><expr pos:start="107:30" pos:end="107:40"><sizeof pos:start="107:30" pos:end="107:40">sizeof<argument_list pos:start="107:36" pos:end="107:40">(<argument pos:start="107:37" pos:end="107:39"><expr pos:start="107:37" pos:end="107:39"><name pos:start="107:37" pos:end="107:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:43" pos:end="107:47"><expr pos:start="107:43" pos:end="107:47"><literal type="string" pos:start="107:43" pos:end="107:47">"bus"</literal></expr></argument>, <argument pos:start="107:50" pos:end="107:52"><expr pos:start="107:50" pos:end="107:52"><name pos:start="107:50" pos:end="107:52">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:56" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:9">

        <expr_stmt pos:start="109:9" pos:end="109:38"><expr pos:start="109:9" pos:end="109:37"><name pos:start="109:9" pos:end="109:14">bus_id</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="109:37"><name pos:start="109:18" pos:end="109:23">strtol</name><argument_list pos:start="109:24" pos:end="109:37">(<argument pos:start="109:25" pos:end="109:27"><expr pos:start="109:25" pos:end="109:27"><name pos:start="109:25" pos:end="109:27">buf</name></expr></argument>, <argument pos:start="109:30" pos:end="109:33"><expr pos:start="109:30" pos:end="109:33"><name pos:start="109:30" pos:end="109:33">NULL</name></expr></argument>, <argument pos:start="109:36" pos:end="109:36"><expr pos:start="109:36" pos:end="109:36"><literal type="number" pos:start="109:36" pos:end="109:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:23">(<expr pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:18">bus_id</name> <operator pos:start="111:20" pos:end="111:20">&lt;</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>)</condition> <block pos:start="111:25" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:22">

	    <expr_stmt pos:start="113:13" pos:end="113:64"><expr pos:start="113:13" pos:end="113:63"><call pos:start="113:13" pos:end="113:63"><name pos:start="113:13" pos:end="113:19">fprintf</name><argument_list pos:start="113:20" pos:end="113:63">(<argument pos:start="113:21" pos:end="113:26"><expr pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:26">stderr</name></expr></argument>, <argument pos:start="113:29" pos:end="113:57"><expr pos:start="113:29" pos:end="113:57"><literal type="string" pos:start="113:29" pos:end="113:57">"qemu: '%s' invalid bus id\n"</literal></expr></argument>, <argument pos:start="113:60" pos:end="113:62"><expr pos:start="113:60" pos:end="113:62"><name pos:start="113:60" pos:end="113:62">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="115:13" pos:end="115:22">return <expr pos:start="115:20" pos:end="115:21"><operator pos:start="115:20" pos:end="115:20">-</operator><literal type="number" pos:start="115:21" pos:end="115:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="135:5"><if pos:start="123:5" pos:end="135:5">if <condition pos:start="123:8" pos:end="123:55">(<expr pos:start="123:9" pos:end="123:54"><call pos:start="123:9" pos:end="123:54"><name pos:start="123:9" pos:end="123:23">get_param_value</name><argument_list pos:start="123:24" pos:end="123:54">(<argument pos:start="123:25" pos:end="123:27"><expr pos:start="123:25" pos:end="123:27"><name pos:start="123:25" pos:end="123:27">buf</name></expr></argument>, <argument pos:start="123:30" pos:end="123:40"><expr pos:start="123:30" pos:end="123:40"><sizeof pos:start="123:30" pos:end="123:40">sizeof<argument_list pos:start="123:36" pos:end="123:40">(<argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="123:43" pos:end="123:48"><expr pos:start="123:43" pos:end="123:48"><literal type="string" pos:start="123:43" pos:end="123:48">"unit"</literal></expr></argument>, <argument pos:start="123:51" pos:end="123:53"><expr pos:start="123:51" pos:end="123:53"><name pos:start="123:51" pos:end="123:53">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:57" pos:end="135:5">{<block_content pos:start="125:9" pos:end="133:9">

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:15">unit_id</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:38"><name pos:start="125:19" pos:end="125:24">strtol</name><argument_list pos:start="125:25" pos:end="125:38">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><name pos:start="125:26" pos:end="125:28">buf</name></expr></argument>, <argument pos:start="125:31" pos:end="125:34"><expr pos:start="125:31" pos:end="125:34"><name pos:start="125:31" pos:end="125:34">NULL</name></expr></argument>, <argument pos:start="125:37" pos:end="125:37"><expr pos:start="125:37" pos:end="125:37"><literal type="number" pos:start="125:37" pos:end="125:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:24">(<expr pos:start="127:13" pos:end="127:23"><name pos:start="127:13" pos:end="127:19">unit_id</name> <operator pos:start="127:21" pos:end="127:21">&lt;</operator> <literal type="number" pos:start="127:23" pos:end="127:23">0</literal></expr>)</condition> <block pos:start="127:26" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:22">

	    <expr_stmt pos:start="129:13" pos:end="129:65"><expr pos:start="129:13" pos:end="129:64"><call pos:start="129:13" pos:end="129:64"><name pos:start="129:13" pos:end="129:19">fprintf</name><argument_list pos:start="129:20" pos:end="129:64">(<argument pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:26">stderr</name></expr></argument>, <argument pos:start="129:29" pos:end="129:58"><expr pos:start="129:29" pos:end="129:58"><literal type="string" pos:start="129:29" pos:end="129:58">"qemu: '%s' invalid unit id\n"</literal></expr></argument>, <argument pos:start="129:61" pos:end="129:63"><expr pos:start="129:61" pos:end="129:63"><name pos:start="129:61" pos:end="129:63">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="131:13" pos:end="131:22">return <expr pos:start="131:20" pos:end="131:21"><operator pos:start="131:20" pos:end="131:20">-</operator><literal type="number" pos:start="131:21" pos:end="131:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="193:5"><if pos:start="139:5" pos:end="193:5">if <condition pos:start="139:8" pos:end="139:53">(<expr pos:start="139:9" pos:end="139:52"><call pos:start="139:9" pos:end="139:52"><name pos:start="139:9" pos:end="139:23">get_param_value</name><argument_list pos:start="139:24" pos:end="139:52">(<argument pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:27">buf</name></expr></argument>, <argument pos:start="139:30" pos:end="139:40"><expr pos:start="139:30" pos:end="139:40"><sizeof pos:start="139:30" pos:end="139:40">sizeof<argument_list pos:start="139:36" pos:end="139:40">(<argument pos:start="139:37" pos:end="139:39"><expr pos:start="139:37" pos:end="139:39"><name pos:start="139:37" pos:end="139:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:43" pos:end="139:46"><expr pos:start="139:43" pos:end="139:46"><literal type="string" pos:start="139:43" pos:end="139:46">"if"</literal></expr></argument>, <argument pos:start="139:49" pos:end="139:51"><expr pos:start="139:49" pos:end="139:51"><name pos:start="139:49" pos:end="139:51">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:55" pos:end="193:5">{<block_content pos:start="141:9" pos:end="191:9">

        <expr_stmt pos:start="141:9" pos:end="141:47"><expr pos:start="141:9" pos:end="141:46"><call pos:start="141:9" pos:end="141:46"><name pos:start="141:9" pos:end="141:15">pstrcpy</name><argument_list pos:start="141:16" pos:end="141:46">(<argument pos:start="141:17" pos:end="141:23"><expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:23">devname</name></expr></argument>, <argument pos:start="141:26" pos:end="141:40"><expr pos:start="141:26" pos:end="141:40"><sizeof pos:start="141:26" pos:end="141:40">sizeof<argument_list pos:start="141:32" pos:end="141:40">(<argument pos:start="141:33" pos:end="141:39"><expr pos:start="141:33" pos:end="141:39"><name pos:start="141:33" pos:end="141:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:43" pos:end="141:45"><expr pos:start="141:43" pos:end="141:45"><name pos:start="141:43" pos:end="141:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="191:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:32">(<expr pos:start="143:13" pos:end="143:31"><operator pos:start="143:13" pos:end="143:13">!</operator><call pos:start="143:14" pos:end="143:31"><name pos:start="143:14" pos:end="143:19">strcmp</name><argument_list pos:start="143:20" pos:end="143:31">(<argument pos:start="143:21" pos:end="143:23"><expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:23">buf</name></expr></argument>, <argument pos:start="143:26" pos:end="143:30"><expr pos:start="143:26" pos:end="143:30"><literal type="string" pos:start="143:26" pos:end="143:30">"ide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:34" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:36">

	    <expr_stmt pos:start="145:13" pos:end="145:26"><expr pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:16">type</name> <operator pos:start="145:18" pos:end="145:18">=</operator> <name pos:start="145:20" pos:end="145:25">IF_IDE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:36"><expr pos:start="147:13" pos:end="147:35"><name pos:start="147:13" pos:end="147:20">max_devs</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:35">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="149:11" pos:end="155:9">else if <condition pos:start="149:19" pos:end="149:40">(<expr pos:start="149:20" pos:end="149:39"><operator pos:start="149:20" pos:end="149:20">!</operator><call pos:start="149:21" pos:end="149:39"><name pos:start="149:21" pos:end="149:26">strcmp</name><argument_list pos:start="149:27" pos:end="149:39">(<argument pos:start="149:28" pos:end="149:30"><expr pos:start="149:28" pos:end="149:30"><name pos:start="149:28" pos:end="149:30">buf</name></expr></argument>, <argument pos:start="149:33" pos:end="149:38"><expr pos:start="149:33" pos:end="149:38"><literal type="string" pos:start="149:33" pos:end="149:38">"scsi"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:42" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:37">

	    <expr_stmt pos:start="151:13" pos:end="151:27"><expr pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:16">type</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <name pos:start="151:20" pos:end="151:26">IF_SCSI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:37"><expr pos:start="153:13" pos:end="153:36"><name pos:start="153:13" pos:end="153:20">max_devs</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <name pos:start="153:24" pos:end="153:36">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="155:11" pos:end="161:9">else if <condition pos:start="155:19" pos:end="155:42">(<expr pos:start="155:20" pos:end="155:41"><operator pos:start="155:20" pos:end="155:20">!</operator><call pos:start="155:21" pos:end="155:41"><name pos:start="155:21" pos:end="155:26">strcmp</name><argument_list pos:start="155:27" pos:end="155:41">(<argument pos:start="155:28" pos:end="155:30"><expr pos:start="155:28" pos:end="155:30"><name pos:start="155:28" pos:end="155:30">buf</name></expr></argument>, <argument pos:start="155:33" pos:end="155:40"><expr pos:start="155:33" pos:end="155:40"><literal type="string" pos:start="155:33" pos:end="155:40">"floppy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:44" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:25">

	    <expr_stmt pos:start="157:13" pos:end="157:29"><expr pos:start="157:13" pos:end="157:28"><name pos:start="157:13" pos:end="157:16">type</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <name pos:start="157:20" pos:end="157:28">IF_FLOPPY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:25"><expr pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:20">max_devs</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <literal type="number" pos:start="159:24" pos:end="159:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="161:11" pos:end="167:9">else if <condition pos:start="161:19" pos:end="161:42">(<expr pos:start="161:20" pos:end="161:41"><operator pos:start="161:20" pos:end="161:20">!</operator><call pos:start="161:21" pos:end="161:41"><name pos:start="161:21" pos:end="161:26">strcmp</name><argument_list pos:start="161:27" pos:end="161:41">(<argument pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><name pos:start="161:28" pos:end="161:30">buf</name></expr></argument>, <argument pos:start="161:33" pos:end="161:40"><expr pos:start="161:33" pos:end="161:40"><literal type="string" pos:start="161:33" pos:end="161:40">"pflash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:44" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:25">

	    <expr_stmt pos:start="163:13" pos:end="163:29"><expr pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:16">type</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <name pos:start="163:20" pos:end="163:28">IF_PFLASH</name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:25"><expr pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:20">max_devs</name> <operator pos:start="165:22" pos:end="165:22">=</operator> <literal type="number" pos:start="165:24" pos:end="165:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="173:9">else if <condition pos:start="167:19" pos:end="167:39">(<expr pos:start="167:20" pos:end="167:38"><operator pos:start="167:20" pos:end="167:20">!</operator><call pos:start="167:21" pos:end="167:38"><name pos:start="167:21" pos:end="167:26">strcmp</name><argument_list pos:start="167:27" pos:end="167:38">(<argument pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:30">buf</name></expr></argument>, <argument pos:start="167:33" pos:end="167:37"><expr pos:start="167:33" pos:end="167:37"><literal type="string" pos:start="167:33" pos:end="167:37">"mtd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:41" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:25">

	    <expr_stmt pos:start="169:13" pos:end="169:26"><expr pos:start="169:13" pos:end="169:25"><name pos:start="169:13" pos:end="169:16">type</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <name pos:start="169:20" pos:end="169:25">IF_MTD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:25"><expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:20">max_devs</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <literal type="number" pos:start="171:24" pos:end="171:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="173:11" pos:end="179:9">else if <condition pos:start="173:19" pos:end="173:38">(<expr pos:start="173:20" pos:end="173:37"><operator pos:start="173:20" pos:end="173:20">!</operator><call pos:start="173:21" pos:end="173:37"><name pos:start="173:21" pos:end="173:26">strcmp</name><argument_list pos:start="173:27" pos:end="173:37">(<argument pos:start="173:28" pos:end="173:30"><expr pos:start="173:28" pos:end="173:30"><name pos:start="173:28" pos:end="173:30">buf</name></expr></argument>, <argument pos:start="173:33" pos:end="173:36"><expr pos:start="173:33" pos:end="173:36"><literal type="string" pos:start="173:33" pos:end="173:36">"sd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:40" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:25">

	    <expr_stmt pos:start="175:13" pos:end="175:25"><expr pos:start="175:13" pos:end="175:24"><name pos:start="175:13" pos:end="175:16">type</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <name pos:start="175:20" pos:end="175:24">IF_SD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:25"><expr pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:20">max_devs</name> <operator pos:start="177:22" pos:end="177:22">=</operator> <literal type="number" pos:start="177:24" pos:end="177:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="179:11" pos:end="185:9">else if <condition pos:start="179:19" pos:end="179:42">(<expr pos:start="179:20" pos:end="179:41"><operator pos:start="179:20" pos:end="179:20">!</operator><call pos:start="179:21" pos:end="179:41"><name pos:start="179:21" pos:end="179:26">strcmp</name><argument_list pos:start="179:27" pos:end="179:41">(<argument pos:start="179:28" pos:end="179:30"><expr pos:start="179:28" pos:end="179:30"><name pos:start="179:28" pos:end="179:30">buf</name></expr></argument>, <argument pos:start="179:33" pos:end="179:40"><expr pos:start="179:33" pos:end="179:40"><literal type="string" pos:start="179:33" pos:end="179:40">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:44" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:25">

            <expr_stmt pos:start="181:13" pos:end="181:29"><expr pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:16">type</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <name pos:start="181:20" pos:end="181:28">IF_VIRTIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:25"><expr pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:20">max_devs</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <literal type="number" pos:start="183:24" pos:end="183:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="191:9">else <block pos:start="185:16" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:22">

            <expr_stmt pos:start="187:13" pos:end="187:80"><expr pos:start="187:13" pos:end="187:79"><call pos:start="187:13" pos:end="187:79"><name pos:start="187:13" pos:end="187:19">fprintf</name><argument_list pos:start="187:20" pos:end="187:79">(<argument pos:start="187:21" pos:end="187:26"><expr pos:start="187:21" pos:end="187:26"><name pos:start="187:21" pos:end="187:26">stderr</name></expr></argument>, <argument pos:start="187:29" pos:end="187:68"><expr pos:start="187:29" pos:end="187:68"><literal type="string" pos:start="187:29" pos:end="187:68">"qemu: '%s' unsupported bus type '%s'\n"</literal></expr></argument>, <argument pos:start="187:71" pos:end="187:73"><expr pos:start="187:71" pos:end="187:73"><name pos:start="187:71" pos:end="187:73">str</name></expr></argument>, <argument pos:start="187:76" pos:end="187:78"><expr pos:start="187:76" pos:end="187:78"><name pos:start="187:76" pos:end="187:78">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="189:13" pos:end="189:22">return <expr pos:start="189:20" pos:end="189:21"><operator pos:start="189:20" pos:end="189:20">-</operator><literal type="number" pos:start="189:21" pos:end="189:21">1</literal></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="197:5" pos:end="209:5"><if pos:start="197:5" pos:end="209:5">if <condition pos:start="197:8" pos:end="197:56">(<expr pos:start="197:9" pos:end="197:55"><call pos:start="197:9" pos:end="197:55"><name pos:start="197:9" pos:end="197:23">get_param_value</name><argument_list pos:start="197:24" pos:end="197:55">(<argument pos:start="197:25" pos:end="197:27"><expr pos:start="197:25" pos:end="197:27"><name pos:start="197:25" pos:end="197:27">buf</name></expr></argument>, <argument pos:start="197:30" pos:end="197:40"><expr pos:start="197:30" pos:end="197:40"><sizeof pos:start="197:30" pos:end="197:40">sizeof<argument_list pos:start="197:36" pos:end="197:40">(<argument pos:start="197:37" pos:end="197:39"><expr pos:start="197:37" pos:end="197:39"><name pos:start="197:37" pos:end="197:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="197:43" pos:end="197:49"><expr pos:start="197:43" pos:end="197:49"><literal type="string" pos:start="197:43" pos:end="197:49">"index"</literal></expr></argument>, <argument pos:start="197:52" pos:end="197:54"><expr pos:start="197:52" pos:end="197:54"><name pos:start="197:52" pos:end="197:54">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:58" pos:end="209:5">{<block_content pos:start="199:9" pos:end="207:9">

        <expr_stmt pos:start="199:9" pos:end="199:37"><expr pos:start="199:9" pos:end="199:36"><name pos:start="199:9" pos:end="199:13">index</name> <operator pos:start="199:15" pos:end="199:15">=</operator> <call pos:start="199:17" pos:end="199:36"><name pos:start="199:17" pos:end="199:22">strtol</name><argument_list pos:start="199:23" pos:end="199:36">(<argument pos:start="199:24" pos:end="199:26"><expr pos:start="199:24" pos:end="199:26"><name pos:start="199:24" pos:end="199:26">buf</name></expr></argument>, <argument pos:start="199:29" pos:end="199:32"><expr pos:start="199:29" pos:end="199:32"><name pos:start="199:29" pos:end="199:32">NULL</name></expr></argument>, <argument pos:start="199:35" pos:end="199:35"><expr pos:start="199:35" pos:end="199:35"><literal type="number" pos:start="199:35" pos:end="199:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="201:9" pos:end="207:9"><if pos:start="201:9" pos:end="207:9">if <condition pos:start="201:12" pos:end="201:22">(<expr pos:start="201:13" pos:end="201:21"><name pos:start="201:13" pos:end="201:17">index</name> <operator pos:start="201:19" pos:end="201:19">&lt;</operator> <literal type="number" pos:start="201:21" pos:end="201:21">0</literal></expr>)</condition> <block pos:start="201:24" pos:end="207:9">{<block_content pos:start="203:13" pos:end="205:22">

	    <expr_stmt pos:start="203:13" pos:end="203:63"><expr pos:start="203:13" pos:end="203:62"><call pos:start="203:13" pos:end="203:62"><name pos:start="203:13" pos:end="203:19">fprintf</name><argument_list pos:start="203:20" pos:end="203:62">(<argument pos:start="203:21" pos:end="203:26"><expr pos:start="203:21" pos:end="203:26"><name pos:start="203:21" pos:end="203:26">stderr</name></expr></argument>, <argument pos:start="203:29" pos:end="203:56"><expr pos:start="203:29" pos:end="203:56"><literal type="string" pos:start="203:29" pos:end="203:56">"qemu: '%s' invalid index\n"</literal></expr></argument>, <argument pos:start="203:59" pos:end="203:61"><expr pos:start="203:59" pos:end="203:61"><name pos:start="203:59" pos:end="203:61">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="205:13" pos:end="205:22">return <expr pos:start="205:20" pos:end="205:21"><operator pos:start="205:20" pos:end="205:20">-</operator><literal type="number" pos:start="205:21" pos:end="205:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="213:5" pos:end="217:5"><if pos:start="213:5" pos:end="217:5">if <condition pos:start="213:8" pos:end="213:55">(<expr pos:start="213:9" pos:end="213:54"><call pos:start="213:9" pos:end="213:54"><name pos:start="213:9" pos:end="213:23">get_param_value</name><argument_list pos:start="213:24" pos:end="213:54">(<argument pos:start="213:25" pos:end="213:27"><expr pos:start="213:25" pos:end="213:27"><name pos:start="213:25" pos:end="213:27">buf</name></expr></argument>, <argument pos:start="213:30" pos:end="213:40"><expr pos:start="213:30" pos:end="213:40"><sizeof pos:start="213:30" pos:end="213:40">sizeof<argument_list pos:start="213:36" pos:end="213:40">(<argument pos:start="213:37" pos:end="213:39"><expr pos:start="213:37" pos:end="213:39"><name pos:start="213:37" pos:end="213:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="213:43" pos:end="213:48"><expr pos:start="213:43" pos:end="213:48"><literal type="string" pos:start="213:43" pos:end="213:48">"cyls"</literal></expr></argument>, <argument pos:start="213:51" pos:end="213:53"><expr pos:start="213:51" pos:end="213:53"><name pos:start="213:51" pos:end="213:53">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="213:57" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:36">

        <expr_stmt pos:start="215:9" pos:end="215:36"><expr pos:start="215:9" pos:end="215:35"><name pos:start="215:9" pos:end="215:12">cyls</name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:35"><name pos:start="215:16" pos:end="215:21">strtol</name><argument_list pos:start="215:22" pos:end="215:35">(<argument pos:start="215:23" pos:end="215:25"><expr pos:start="215:23" pos:end="215:25"><name pos:start="215:23" pos:end="215:25">buf</name></expr></argument>, <argument pos:start="215:28" pos:end="215:31"><expr pos:start="215:28" pos:end="215:31"><name pos:start="215:28" pos:end="215:31">NULL</name></expr></argument>, <argument pos:start="215:34" pos:end="215:34"><expr pos:start="215:34" pos:end="215:34"><literal type="number" pos:start="215:34" pos:end="215:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="221:5" pos:end="225:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:56">(<expr pos:start="221:9" pos:end="221:55"><call pos:start="221:9" pos:end="221:55"><name pos:start="221:9" pos:end="221:23">get_param_value</name><argument_list pos:start="221:24" pos:end="221:55">(<argument pos:start="221:25" pos:end="221:27"><expr pos:start="221:25" pos:end="221:27"><name pos:start="221:25" pos:end="221:27">buf</name></expr></argument>, <argument pos:start="221:30" pos:end="221:40"><expr pos:start="221:30" pos:end="221:40"><sizeof pos:start="221:30" pos:end="221:40">sizeof<argument_list pos:start="221:36" pos:end="221:40">(<argument pos:start="221:37" pos:end="221:39"><expr pos:start="221:37" pos:end="221:39"><name pos:start="221:37" pos:end="221:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="221:43" pos:end="221:49"><expr pos:start="221:43" pos:end="221:49"><literal type="string" pos:start="221:43" pos:end="221:49">"heads"</literal></expr></argument>, <argument pos:start="221:52" pos:end="221:54"><expr pos:start="221:52" pos:end="221:54"><name pos:start="221:52" pos:end="221:54">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:58" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:37">

        <expr_stmt pos:start="223:9" pos:end="223:37"><expr pos:start="223:9" pos:end="223:36"><name pos:start="223:9" pos:end="223:13">heads</name> <operator pos:start="223:15" pos:end="223:15">=</operator> <call pos:start="223:17" pos:end="223:36"><name pos:start="223:17" pos:end="223:22">strtol</name><argument_list pos:start="223:23" pos:end="223:36">(<argument pos:start="223:24" pos:end="223:26"><expr pos:start="223:24" pos:end="223:26"><name pos:start="223:24" pos:end="223:26">buf</name></expr></argument>, <argument pos:start="223:29" pos:end="223:32"><expr pos:start="223:29" pos:end="223:32"><name pos:start="223:29" pos:end="223:32">NULL</name></expr></argument>, <argument pos:start="223:35" pos:end="223:35"><expr pos:start="223:35" pos:end="223:35"><literal type="number" pos:start="223:35" pos:end="223:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:55">(<expr pos:start="229:9" pos:end="229:54"><call pos:start="229:9" pos:end="229:54"><name pos:start="229:9" pos:end="229:23">get_param_value</name><argument_list pos:start="229:24" pos:end="229:54">(<argument pos:start="229:25" pos:end="229:27"><expr pos:start="229:25" pos:end="229:27"><name pos:start="229:25" pos:end="229:27">buf</name></expr></argument>, <argument pos:start="229:30" pos:end="229:40"><expr pos:start="229:30" pos:end="229:40"><sizeof pos:start="229:30" pos:end="229:40">sizeof<argument_list pos:start="229:36" pos:end="229:40">(<argument pos:start="229:37" pos:end="229:39"><expr pos:start="229:37" pos:end="229:39"><name pos:start="229:37" pos:end="229:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="229:43" pos:end="229:48"><expr pos:start="229:43" pos:end="229:48"><literal type="string" pos:start="229:43" pos:end="229:48">"secs"</literal></expr></argument>, <argument pos:start="229:51" pos:end="229:53"><expr pos:start="229:51" pos:end="229:53"><name pos:start="229:51" pos:end="229:53">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:57" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:36">

        <expr_stmt pos:start="231:9" pos:end="231:36"><expr pos:start="231:9" pos:end="231:35"><name pos:start="231:9" pos:end="231:12">secs</name> <operator pos:start="231:14" pos:end="231:14">=</operator> <call pos:start="231:16" pos:end="231:35"><name pos:start="231:16" pos:end="231:21">strtol</name><argument_list pos:start="231:22" pos:end="231:35">(<argument pos:start="231:23" pos:end="231:25"><expr pos:start="231:23" pos:end="231:25"><name pos:start="231:23" pos:end="231:25">buf</name></expr></argument>, <argument pos:start="231:28" pos:end="231:31"><expr pos:start="231:28" pos:end="231:31"><name pos:start="231:28" pos:end="231:31">NULL</name></expr></argument>, <argument pos:start="231:34" pos:end="231:34"><expr pos:start="231:34" pos:end="231:34"><literal type="number" pos:start="231:34" pos:end="231:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="263:5"><if pos:start="237:5" pos:end="263:5">if <condition pos:start="237:8" pos:end="237:30">(<expr pos:start="237:9" pos:end="237:29"><name pos:start="237:9" pos:end="237:12">cyls</name> <operator pos:start="237:14" pos:end="237:15">||</operator> <name pos:start="237:17" pos:end="237:21">heads</name> <operator pos:start="237:23" pos:end="237:24">||</operator> <name pos:start="237:26" pos:end="237:29">secs</name></expr>)</condition> <block pos:start="237:32" pos:end="263:5">{<block_content pos:start="239:9" pos:end="261:9">

        <if_stmt pos:start="239:9" pos:end="245:9"><if pos:start="239:9" pos:end="245:9">if <condition pos:start="239:12" pos:end="239:37">(<expr pos:start="239:13" pos:end="239:36"><name pos:start="239:13" pos:end="239:30"><name pos:start="239:13" pos:end="239:16">cyls</name> <argument_list type="generic" pos:start="239:18" pos:end="239:30">&lt; <argument pos:start="239:20" pos:end="239:28"><expr pos:start="239:20" pos:end="239:28"><literal type="number" pos:start="239:20" pos:end="239:20">1</literal> <operator pos:start="239:22" pos:end="239:23">||</operator> <name pos:start="239:25" pos:end="239:28">cyls</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="239:32" pos:end="239:36">16383</literal></expr>)</condition> <block pos:start="239:39" pos:end="245:9">{<block_content pos:start="241:13" pos:end="243:22">

            <expr_stmt pos:start="241:13" pos:end="241:78"><expr pos:start="241:13" pos:end="241:77"><call pos:start="241:13" pos:end="241:77"><name pos:start="241:13" pos:end="241:19">fprintf</name><argument_list pos:start="241:20" pos:end="241:77">(<argument pos:start="241:21" pos:end="241:26"><expr pos:start="241:21" pos:end="241:26"><name pos:start="241:21" pos:end="241:26">stderr</name></expr></argument>, <argument pos:start="241:29" pos:end="241:71"><expr pos:start="241:29" pos:end="241:71"><literal type="string" pos:start="241:29" pos:end="241:71">"qemu: '%s' invalid physical cyls number\n"</literal></expr></argument>, <argument pos:start="241:74" pos:end="241:76"><expr pos:start="241:74" pos:end="241:76"><name pos:start="241:74" pos:end="241:76">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="243:13" pos:end="243:22">return <expr pos:start="243:20" pos:end="243:21"><operator pos:start="243:20" pos:end="243:20">-</operator><literal type="number" pos:start="243:21" pos:end="243:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:36">(<expr pos:start="247:13" pos:end="247:35"><name pos:start="247:13" pos:end="247:32"><name pos:start="247:13" pos:end="247:17">heads</name> <argument_list type="generic" pos:start="247:19" pos:end="247:32">&lt; <argument pos:start="247:21" pos:end="247:30"><expr pos:start="247:21" pos:end="247:30"><literal type="number" pos:start="247:21" pos:end="247:21">1</literal> <operator pos:start="247:23" pos:end="247:24">||</operator> <name pos:start="247:26" pos:end="247:30">heads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="247:34" pos:end="247:35">16</literal></expr>)</condition> <block pos:start="247:38" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:22">

            <expr_stmt pos:start="249:13" pos:end="249:79"><expr pos:start="249:13" pos:end="249:78"><call pos:start="249:13" pos:end="249:78"><name pos:start="249:13" pos:end="249:19">fprintf</name><argument_list pos:start="249:20" pos:end="249:78">(<argument pos:start="249:21" pos:end="249:26"><expr pos:start="249:21" pos:end="249:26"><name pos:start="249:21" pos:end="249:26">stderr</name></expr></argument>, <argument pos:start="249:29" pos:end="249:72"><expr pos:start="249:29" pos:end="249:72"><literal type="string" pos:start="249:29" pos:end="249:72">"qemu: '%s' invalid physical heads number\n"</literal></expr></argument>, <argument pos:start="249:75" pos:end="249:77"><expr pos:start="249:75" pos:end="249:77"><name pos:start="249:75" pos:end="249:77">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="251:13" pos:end="251:22">return <expr pos:start="251:20" pos:end="251:21"><operator pos:start="251:20" pos:end="251:20">-</operator><literal type="number" pos:start="251:21" pos:end="251:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="255:9" pos:end="261:9"><if pos:start="255:9" pos:end="261:9">if <condition pos:start="255:12" pos:end="255:34">(<expr pos:start="255:13" pos:end="255:33"><name pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:16">secs</name> <argument_list type="generic" pos:start="255:18" pos:end="255:30">&lt; <argument pos:start="255:20" pos:end="255:28"><expr pos:start="255:20" pos:end="255:28"><literal type="number" pos:start="255:20" pos:end="255:20">1</literal> <operator pos:start="255:22" pos:end="255:23">||</operator> <name pos:start="255:25" pos:end="255:28">secs</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="255:32" pos:end="255:33">63</literal></expr>)</condition> <block pos:start="255:36" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:22">

            <expr_stmt pos:start="257:13" pos:end="257:78"><expr pos:start="257:13" pos:end="257:77"><call pos:start="257:13" pos:end="257:77"><name pos:start="257:13" pos:end="257:19">fprintf</name><argument_list pos:start="257:20" pos:end="257:77">(<argument pos:start="257:21" pos:end="257:26"><expr pos:start="257:21" pos:end="257:26"><name pos:start="257:21" pos:end="257:26">stderr</name></expr></argument>, <argument pos:start="257:29" pos:end="257:71"><expr pos:start="257:29" pos:end="257:71"><literal type="string" pos:start="257:29" pos:end="257:71">"qemu: '%s' invalid physical secs number\n"</literal></expr></argument>, <argument pos:start="257:74" pos:end="257:76"><expr pos:start="257:74" pos:end="257:76"><name pos:start="257:74" pos:end="257:76">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="259:13" pos:end="259:22">return <expr pos:start="259:20" pos:end="259:21"><operator pos:start="259:20" pos:end="259:20">-</operator><literal type="number" pos:start="259:21" pos:end="259:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="301:5"><if pos:start="267:5" pos:end="301:5">if <condition pos:start="267:8" pos:end="267:56">(<expr pos:start="267:9" pos:end="267:55"><call pos:start="267:9" pos:end="267:55"><name pos:start="267:9" pos:end="267:23">get_param_value</name><argument_list pos:start="267:24" pos:end="267:55">(<argument pos:start="267:25" pos:end="267:27"><expr pos:start="267:25" pos:end="267:27"><name pos:start="267:25" pos:end="267:27">buf</name></expr></argument>, <argument pos:start="267:30" pos:end="267:40"><expr pos:start="267:30" pos:end="267:40"><sizeof pos:start="267:30" pos:end="267:40">sizeof<argument_list pos:start="267:36" pos:end="267:40">(<argument pos:start="267:37" pos:end="267:39"><expr pos:start="267:37" pos:end="267:39"><name pos:start="267:37" pos:end="267:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="267:43" pos:end="267:49"><expr pos:start="267:43" pos:end="267:49"><literal type="string" pos:start="267:43" pos:end="267:49">"trans"</literal></expr></argument>, <argument pos:start="267:52" pos:end="267:54"><expr pos:start="267:52" pos:end="267:54"><name pos:start="267:52" pos:end="267:54">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="267:58" pos:end="301:5">{<block_content pos:start="269:9" pos:end="299:9">

        <if_stmt pos:start="269:9" pos:end="279:9"><if pos:start="269:9" pos:end="279:9">if <condition pos:start="269:12" pos:end="269:18">(<expr pos:start="269:13" pos:end="269:17"><operator pos:start="269:13" pos:end="269:13">!</operator><name pos:start="269:14" pos:end="269:17">cyls</name></expr>)</condition> <block pos:start="269:20" pos:end="279:9">{<block_content pos:start="271:13" pos:end="277:22">

            <expr_stmt pos:start="271:13" pos:end="275:25"><expr pos:start="271:13" pos:end="275:24"><call pos:start="271:13" pos:end="275:24"><name pos:start="271:13" pos:end="271:19">fprintf</name><argument_list pos:start="271:20" pos:end="275:24">(<argument pos:start="271:21" pos:end="271:26"><expr pos:start="271:21" pos:end="271:26"><name pos:start="271:21" pos:end="271:26">stderr</name></expr></argument>,

                    <argument pos:start="273:21" pos:end="273:78"><expr pos:start="273:21" pos:end="273:78"><literal type="string" pos:start="273:21" pos:end="273:78">"qemu: '%s' trans must be used with cyls,heads and secs\n"</literal></expr></argument>,

                    <argument pos:start="275:21" pos:end="275:23"><expr pos:start="275:21" pos:end="275:23"><name pos:start="275:21" pos:end="275:23">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="277:13" pos:end="277:22">return <expr pos:start="277:20" pos:end="277:21"><operator pos:start="277:20" pos:end="277:20">-</operator><literal type="number" pos:start="277:21" pos:end="277:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="281:9" pos:end="299:9"><if pos:start="281:9" pos:end="283:52">if <condition pos:start="281:12" pos:end="281:33">(<expr pos:start="281:13" pos:end="281:32"><operator pos:start="281:13" pos:end="281:13">!</operator><call pos:start="281:14" pos:end="281:32"><name pos:start="281:14" pos:end="281:19">strcmp</name><argument_list pos:start="281:20" pos:end="281:32">(<argument pos:start="281:21" pos:end="281:23"><expr pos:start="281:21" pos:end="281:23"><name pos:start="281:21" pos:end="281:23">buf</name></expr></argument>, <argument pos:start="281:26" pos:end="281:31"><expr pos:start="281:26" pos:end="281:31"><literal type="string" pos:start="281:26" pos:end="281:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="283:13" pos:end="283:52"><block_content pos:start="283:13" pos:end="283:52">

            <expr_stmt pos:start="283:13" pos:end="283:52"><expr pos:start="283:13" pos:end="283:51"><name pos:start="283:13" pos:end="283:23">translation</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <name pos:start="283:27" pos:end="283:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="285:9" pos:end="287:51">else if <condition pos:start="285:17" pos:end="285:37">(<expr pos:start="285:18" pos:end="285:36"><operator pos:start="285:18" pos:end="285:18">!</operator><call pos:start="285:19" pos:end="285:36"><name pos:start="285:19" pos:end="285:24">strcmp</name><argument_list pos:start="285:25" pos:end="285:36">(<argument pos:start="285:26" pos:end="285:28"><expr pos:start="285:26" pos:end="285:28"><name pos:start="285:26" pos:end="285:28">buf</name></expr></argument>, <argument pos:start="285:31" pos:end="285:35"><expr pos:start="285:31" pos:end="285:35"><literal type="string" pos:start="285:31" pos:end="285:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="287:13" pos:end="287:51"><block_content pos:start="287:13" pos:end="287:51">

            <expr_stmt pos:start="287:13" pos:end="287:51"><expr pos:start="287:13" pos:end="287:50"><name pos:start="287:13" pos:end="287:23">translation</name> <operator pos:start="287:25" pos:end="287:25">=</operator> <name pos:start="287:27" pos:end="287:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="289:9" pos:end="291:52">else if <condition pos:start="289:17" pos:end="289:38">(<expr pos:start="289:18" pos:end="289:37"><operator pos:start="289:18" pos:end="289:18">!</operator><call pos:start="289:19" pos:end="289:37"><name pos:start="289:19" pos:end="289:24">strcmp</name><argument_list pos:start="289:25" pos:end="289:37">(<argument pos:start="289:26" pos:end="289:28"><expr pos:start="289:26" pos:end="289:28"><name pos:start="289:26" pos:end="289:28">buf</name></expr></argument>, <argument pos:start="289:31" pos:end="289:36"><expr pos:start="289:31" pos:end="289:36"><literal type="string" pos:start="289:31" pos:end="289:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="291:52"><block_content pos:start="291:13" pos:end="291:52">

            <expr_stmt pos:start="291:13" pos:end="291:52"><expr pos:start="291:13" pos:end="291:51"><name pos:start="291:13" pos:end="291:23">translation</name> <operator pos:start="291:25" pos:end="291:25">=</operator> <name pos:start="291:27" pos:end="291:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="293:9" pos:end="299:9">else <block pos:start="293:14" pos:end="299:9">{<block_content pos:start="295:13" pos:end="297:22">

            <expr_stmt pos:start="295:13" pos:end="295:74"><expr pos:start="295:13" pos:end="295:73"><call pos:start="295:13" pos:end="295:73"><name pos:start="295:13" pos:end="295:19">fprintf</name><argument_list pos:start="295:20" pos:end="295:73">(<argument pos:start="295:21" pos:end="295:26"><expr pos:start="295:21" pos:end="295:26"><name pos:start="295:21" pos:end="295:26">stderr</name></expr></argument>, <argument pos:start="295:29" pos:end="295:67"><expr pos:start="295:29" pos:end="295:67"><literal type="string" pos:start="295:29" pos:end="295:67">"qemu: '%s' invalid translation type\n"</literal></expr></argument>, <argument pos:start="295:70" pos:end="295:72"><expr pos:start="295:70" pos:end="295:72"><name pos:start="295:70" pos:end="295:72">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="297:13" pos:end="297:22">return <expr pos:start="297:20" pos:end="297:21"><operator pos:start="297:20" pos:end="297:20">-</operator><literal type="number" pos:start="297:21" pos:end="297:21">1</literal></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="305:5" pos:end="333:5"><if pos:start="305:5" pos:end="333:5">if <condition pos:start="305:8" pos:end="305:56">(<expr pos:start="305:9" pos:end="305:55"><call pos:start="305:9" pos:end="305:55"><name pos:start="305:9" pos:end="305:23">get_param_value</name><argument_list pos:start="305:24" pos:end="305:55">(<argument pos:start="305:25" pos:end="305:27"><expr pos:start="305:25" pos:end="305:27"><name pos:start="305:25" pos:end="305:27">buf</name></expr></argument>, <argument pos:start="305:30" pos:end="305:40"><expr pos:start="305:30" pos:end="305:40"><sizeof pos:start="305:30" pos:end="305:40">sizeof<argument_list pos:start="305:36" pos:end="305:40">(<argument pos:start="305:37" pos:end="305:39"><expr pos:start="305:37" pos:end="305:39"><name pos:start="305:37" pos:end="305:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="305:43" pos:end="305:49"><expr pos:start="305:43" pos:end="305:49"><literal type="string" pos:start="305:43" pos:end="305:49">"media"</literal></expr></argument>, <argument pos:start="305:52" pos:end="305:54"><expr pos:start="305:52" pos:end="305:54"><name pos:start="305:52" pos:end="305:54">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:58" pos:end="333:5">{<block_content pos:start="307:9" pos:end="331:9">

        <if_stmt pos:start="307:9" pos:end="331:9"><if pos:start="307:9" pos:end="311:9">if <condition pos:start="307:12" pos:end="307:33">(<expr pos:start="307:13" pos:end="307:32"><operator pos:start="307:13" pos:end="307:13">!</operator><call pos:start="307:14" pos:end="307:32"><name pos:start="307:14" pos:end="307:19">strcmp</name><argument_list pos:start="307:20" pos:end="307:32">(<argument pos:start="307:21" pos:end="307:23"><expr pos:start="307:21" pos:end="307:23"><name pos:start="307:21" pos:end="307:23">buf</name></expr></argument>, <argument pos:start="307:26" pos:end="307:31"><expr pos:start="307:26" pos:end="307:31"><literal type="string" pos:start="307:26" pos:end="307:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:35" pos:end="311:9">{<block_content pos:start="309:13" pos:end="309:31">

	    <expr_stmt pos:start="309:13" pos:end="309:31"><expr pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:17">media</name> <operator pos:start="309:19" pos:end="309:19">=</operator> <name pos:start="309:21" pos:end="309:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="311:11" pos:end="325:9">else if <condition pos:start="311:19" pos:end="311:41">(<expr pos:start="311:20" pos:end="311:40"><operator pos:start="311:20" pos:end="311:20">!</operator><call pos:start="311:21" pos:end="311:40"><name pos:start="311:21" pos:end="311:26">strcmp</name><argument_list pos:start="311:27" pos:end="311:40">(<argument pos:start="311:28" pos:end="311:30"><expr pos:start="311:28" pos:end="311:30"><name pos:start="311:28" pos:end="311:30">buf</name></expr></argument>, <argument pos:start="311:33" pos:end="311:39"><expr pos:start="311:33" pos:end="311:39"><literal type="string" pos:start="311:33" pos:end="311:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:43" pos:end="325:9">{<block_content pos:start="313:13" pos:end="323:32">

            <if_stmt pos:start="313:13" pos:end="321:13"><if pos:start="313:13" pos:end="321:13">if <condition pos:start="313:16" pos:end="313:38">(<expr pos:start="313:17" pos:end="313:37"><name pos:start="313:17" pos:end="313:20">cyls</name> <operator pos:start="313:22" pos:end="313:23">||</operator> <name pos:start="313:25" pos:end="313:28">secs</name> <operator pos:start="313:30" pos:end="313:31">||</operator> <name pos:start="313:33" pos:end="313:37">heads</name></expr>)</condition> <block pos:start="313:40" pos:end="321:13">{<block_content pos:start="315:17" pos:end="319:26">

                <expr_stmt pos:start="315:17" pos:end="317:73"><expr pos:start="315:17" pos:end="317:72"><call pos:start="315:17" pos:end="317:72"><name pos:start="315:17" pos:end="315:23">fprintf</name><argument_list pos:start="315:24" pos:end="317:72">(<argument pos:start="315:25" pos:end="315:30"><expr pos:start="315:25" pos:end="315:30"><name pos:start="315:25" pos:end="315:30">stderr</name></expr></argument>,

                        <argument pos:start="317:25" pos:end="317:66"><expr pos:start="317:25" pos:end="317:66"><literal type="string" pos:start="317:25" pos:end="317:66">"qemu: '%s' invalid physical CHS format\n"</literal></expr></argument>, <argument pos:start="317:69" pos:end="317:71"><expr pos:start="317:69" pos:end="317:71"><name pos:start="317:69" pos:end="317:71">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="319:17" pos:end="319:26">return <expr pos:start="319:24" pos:end="319:25"><operator pos:start="319:24" pos:end="319:24">-</operator><literal type="number" pos:start="319:25" pos:end="319:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="323:13" pos:end="323:32"><expr pos:start="323:13" pos:end="323:31"><name pos:start="323:13" pos:end="323:17">media</name> <operator pos:start="323:19" pos:end="323:19">=</operator> <name pos:start="323:21" pos:end="323:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="325:11" pos:end="331:9">else <block pos:start="325:16" pos:end="331:9">{<block_content pos:start="327:13" pos:end="329:22">

	    <expr_stmt pos:start="327:13" pos:end="327:63"><expr pos:start="327:13" pos:end="327:62"><call pos:start="327:13" pos:end="327:62"><name pos:start="327:13" pos:end="327:19">fprintf</name><argument_list pos:start="327:20" pos:end="327:62">(<argument pos:start="327:21" pos:end="327:26"><expr pos:start="327:21" pos:end="327:26"><name pos:start="327:21" pos:end="327:26">stderr</name></expr></argument>, <argument pos:start="327:29" pos:end="327:56"><expr pos:start="327:29" pos:end="327:56"><literal type="string" pos:start="327:29" pos:end="327:56">"qemu: '%s' invalid media\n"</literal></expr></argument>, <argument pos:start="327:59" pos:end="327:61"><expr pos:start="327:59" pos:end="327:61"><name pos:start="327:59" pos:end="327:61">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="329:13" pos:end="329:22">return <expr pos:start="329:20" pos:end="329:21"><operator pos:start="329:20" pos:end="329:20">-</operator><literal type="number" pos:start="329:21" pos:end="329:21">1</literal></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="337:5" pos:end="355:5"><if pos:start="337:5" pos:end="355:5">if <condition pos:start="337:8" pos:end="337:59">(<expr pos:start="337:9" pos:end="337:58"><call pos:start="337:9" pos:end="337:58"><name pos:start="337:9" pos:end="337:23">get_param_value</name><argument_list pos:start="337:24" pos:end="337:58">(<argument pos:start="337:25" pos:end="337:27"><expr pos:start="337:25" pos:end="337:27"><name pos:start="337:25" pos:end="337:27">buf</name></expr></argument>, <argument pos:start="337:30" pos:end="337:40"><expr pos:start="337:30" pos:end="337:40"><sizeof pos:start="337:30" pos:end="337:40">sizeof<argument_list pos:start="337:36" pos:end="337:40">(<argument pos:start="337:37" pos:end="337:39"><expr pos:start="337:37" pos:end="337:39"><name pos:start="337:37" pos:end="337:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="337:43" pos:end="337:52"><expr pos:start="337:43" pos:end="337:52"><literal type="string" pos:start="337:43" pos:end="337:52">"snapshot"</literal></expr></argument>, <argument pos:start="337:55" pos:end="337:57"><expr pos:start="337:55" pos:end="337:57"><name pos:start="337:55" pos:end="337:57">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="337:61" pos:end="355:5">{<block_content pos:start="339:9" pos:end="353:9">

        <if_stmt pos:start="339:9" pos:end="353:9"><if pos:start="339:9" pos:end="341:25">if <condition pos:start="339:12" pos:end="339:31">(<expr pos:start="339:13" pos:end="339:30"><operator pos:start="339:13" pos:end="339:13">!</operator><call pos:start="339:14" pos:end="339:30"><name pos:start="339:14" pos:end="339:19">strcmp</name><argument_list pos:start="339:20" pos:end="339:30">(<argument pos:start="339:21" pos:end="339:23"><expr pos:start="339:21" pos:end="339:23"><name pos:start="339:21" pos:end="339:23">buf</name></expr></argument>, <argument pos:start="339:26" pos:end="339:29"><expr pos:start="339:26" pos:end="339:29"><literal type="string" pos:start="339:26" pos:end="339:29">"on"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="341:13" pos:end="341:25"><block_content pos:start="341:13" pos:end="341:25">

	    <expr_stmt pos:start="341:13" pos:end="341:25"><expr pos:start="341:13" pos:end="341:24"><name pos:start="341:13" pos:end="341:20">snapshot</name> <operator pos:start="341:22" pos:end="341:22">=</operator> <literal type="number" pos:start="341:24" pos:end="341:24">1</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="343:9" pos:end="345:25">else if <condition pos:start="343:17" pos:end="343:37">(<expr pos:start="343:18" pos:end="343:36"><operator pos:start="343:18" pos:end="343:18">!</operator><call pos:start="343:19" pos:end="343:36"><name pos:start="343:19" pos:end="343:24">strcmp</name><argument_list pos:start="343:25" pos:end="343:36">(<argument pos:start="343:26" pos:end="343:28"><expr pos:start="343:26" pos:end="343:28"><name pos:start="343:26" pos:end="343:28">buf</name></expr></argument>, <argument pos:start="343:31" pos:end="343:35"><expr pos:start="343:31" pos:end="343:35"><literal type="string" pos:start="343:31" pos:end="343:35">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="345:13" pos:end="345:25"><block_content pos:start="345:13" pos:end="345:25">

	    <expr_stmt pos:start="345:13" pos:end="345:25"><expr pos:start="345:13" pos:end="345:24"><name pos:start="345:13" pos:end="345:20">snapshot</name> <operator pos:start="345:22" pos:end="345:22">=</operator> <literal type="number" pos:start="345:24" pos:end="345:24">0</literal></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="347:9" pos:end="353:9">else <block pos:start="347:14" pos:end="353:9">{<block_content pos:start="349:13" pos:end="351:22">

	    <expr_stmt pos:start="349:13" pos:end="349:73"><expr pos:start="349:13" pos:end="349:72"><call pos:start="349:13" pos:end="349:72"><name pos:start="349:13" pos:end="349:19">fprintf</name><argument_list pos:start="349:20" pos:end="349:72">(<argument pos:start="349:21" pos:end="349:26"><expr pos:start="349:21" pos:end="349:26"><name pos:start="349:21" pos:end="349:26">stderr</name></expr></argument>, <argument pos:start="349:29" pos:end="349:66"><expr pos:start="349:29" pos:end="349:66"><literal type="string" pos:start="349:29" pos:end="349:66">"qemu: '%s' invalid snapshot option\n"</literal></expr></argument>, <argument pos:start="349:69" pos:end="349:71"><expr pos:start="349:69" pos:end="349:71"><name pos:start="349:69" pos:end="349:71">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="351:13" pos:end="351:22">return <expr pos:start="351:20" pos:end="351:21"><operator pos:start="351:20" pos:end="351:20">-</operator><literal type="number" pos:start="351:21" pos:end="351:21">1</literal></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="359:5" pos:end="381:5"><if pos:start="359:5" pos:end="381:5">if <condition pos:start="359:8" pos:end="359:56">(<expr pos:start="359:9" pos:end="359:55"><call pos:start="359:9" pos:end="359:55"><name pos:start="359:9" pos:end="359:23">get_param_value</name><argument_list pos:start="359:24" pos:end="359:55">(<argument pos:start="359:25" pos:end="359:27"><expr pos:start="359:25" pos:end="359:27"><name pos:start="359:25" pos:end="359:27">buf</name></expr></argument>, <argument pos:start="359:30" pos:end="359:40"><expr pos:start="359:30" pos:end="359:40"><sizeof pos:start="359:30" pos:end="359:40">sizeof<argument_list pos:start="359:36" pos:end="359:40">(<argument pos:start="359:37" pos:end="359:39"><expr pos:start="359:37" pos:end="359:39"><name pos:start="359:37" pos:end="359:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="359:43" pos:end="359:49"><expr pos:start="359:43" pos:end="359:49"><literal type="string" pos:start="359:43" pos:end="359:49">"cache"</literal></expr></argument>, <argument pos:start="359:52" pos:end="359:54"><expr pos:start="359:52" pos:end="359:54"><name pos:start="359:52" pos:end="359:54">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="359:58" pos:end="381:5">{<block_content pos:start="361:9" pos:end="379:9">

        <if_stmt pos:start="361:9" pos:end="379:9"><if pos:start="361:9" pos:end="363:22">if <condition pos:start="361:12" pos:end="361:56">(<expr pos:start="361:13" pos:end="361:55"><operator pos:start="361:13" pos:end="361:13">!</operator><call pos:start="361:14" pos:end="361:31"><name pos:start="361:14" pos:end="361:19">strcmp</name><argument_list pos:start="361:20" pos:end="361:31">(<argument pos:start="361:21" pos:end="361:23"><expr pos:start="361:21" pos:end="361:23"><name pos:start="361:21" pos:end="361:23">buf</name></expr></argument>, <argument pos:start="361:26" pos:end="361:30"><expr pos:start="361:26" pos:end="361:30"><literal type="string" pos:start="361:26" pos:end="361:30">"off"</literal></expr></argument>)</argument_list></call> <operator pos:start="361:33" pos:end="361:34">||</operator> <operator pos:start="361:36" pos:end="361:36">!</operator><call pos:start="361:37" pos:end="361:55"><name pos:start="361:37" pos:end="361:42">strcmp</name><argument_list pos:start="361:43" pos:end="361:55">(<argument pos:start="361:44" pos:end="361:46"><expr pos:start="361:44" pos:end="361:46"><name pos:start="361:44" pos:end="361:46">buf</name></expr></argument>, <argument pos:start="361:49" pos:end="361:54"><expr pos:start="361:49" pos:end="361:54"><literal type="string" pos:start="361:49" pos:end="361:54">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="363:22"><block_content pos:start="363:13" pos:end="363:22">

            <expr_stmt pos:start="363:13" pos:end="363:22"><expr pos:start="363:13" pos:end="363:21"><name pos:start="363:13" pos:end="363:17">cache</name> <operator pos:start="363:19" pos:end="363:19">=</operator> <literal type="number" pos:start="363:21" pos:end="363:21">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="365:9" pos:end="367:22">else if <condition pos:start="365:17" pos:end="365:46">(<expr pos:start="365:18" pos:end="365:45"><operator pos:start="365:18" pos:end="365:18">!</operator><call pos:start="365:19" pos:end="365:45"><name pos:start="365:19" pos:end="365:24">strcmp</name><argument_list pos:start="365:25" pos:end="365:45">(<argument pos:start="365:26" pos:end="365:28"><expr pos:start="365:26" pos:end="365:28"><name pos:start="365:26" pos:end="365:28">buf</name></expr></argument>, <argument pos:start="365:31" pos:end="365:44"><expr pos:start="365:31" pos:end="365:44"><literal type="string" pos:start="365:31" pos:end="365:44">"writethrough"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="367:13" pos:end="367:22"><block_content pos:start="367:13" pos:end="367:22">

            <expr_stmt pos:start="367:13" pos:end="367:22"><expr pos:start="367:13" pos:end="367:21"><name pos:start="367:13" pos:end="367:17">cache</name> <operator pos:start="367:19" pos:end="367:19">=</operator> <literal type="number" pos:start="367:21" pos:end="367:21">1</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="369:9" pos:end="371:22">else if <condition pos:start="369:17" pos:end="369:43">(<expr pos:start="369:18" pos:end="369:42"><operator pos:start="369:18" pos:end="369:18">!</operator><call pos:start="369:19" pos:end="369:42"><name pos:start="369:19" pos:end="369:24">strcmp</name><argument_list pos:start="369:25" pos:end="369:42">(<argument pos:start="369:26" pos:end="369:28"><expr pos:start="369:26" pos:end="369:28"><name pos:start="369:26" pos:end="369:28">buf</name></expr></argument>, <argument pos:start="369:31" pos:end="369:41"><expr pos:start="369:31" pos:end="369:41"><literal type="string" pos:start="369:31" pos:end="369:41">"writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="371:13" pos:end="371:22"><block_content pos:start="371:13" pos:end="371:22">

            <expr_stmt pos:start="371:13" pos:end="371:22"><expr pos:start="371:13" pos:end="371:21"><name pos:start="371:13" pos:end="371:17">cache</name> <operator pos:start="371:19" pos:end="371:19">=</operator> <literal type="number" pos:start="371:21" pos:end="371:21">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="373:9" pos:end="379:9">else <block pos:start="373:14" pos:end="379:9">{<block_content pos:start="375:12" pos:end="377:21">

           <expr_stmt pos:start="375:12" pos:end="375:59"><expr pos:start="375:12" pos:end="375:58"><call pos:start="375:12" pos:end="375:58"><name pos:start="375:12" pos:end="375:18">fprintf</name><argument_list pos:start="375:19" pos:end="375:58">(<argument pos:start="375:20" pos:end="375:25"><expr pos:start="375:20" pos:end="375:25"><name pos:start="375:20" pos:end="375:25">stderr</name></expr></argument>, <argument pos:start="375:28" pos:end="375:57"><expr pos:start="375:28" pos:end="375:57"><literal type="string" pos:start="375:28" pos:end="375:57">"qemu: invalid cache option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="377:12" pos:end="377:21">return <expr pos:start="377:19" pos:end="377:20"><operator pos:start="377:19" pos:end="377:19">-</operator><literal type="number" pos:start="377:20" pos:end="377:20">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="385:5" pos:end="409:5"><if pos:start="385:5" pos:end="409:5">if <condition pos:start="385:8" pos:end="385:57">(<expr pos:start="385:9" pos:end="385:56"><call pos:start="385:9" pos:end="385:56"><name pos:start="385:9" pos:end="385:23">get_param_value</name><argument_list pos:start="385:24" pos:end="385:56">(<argument pos:start="385:25" pos:end="385:27"><expr pos:start="385:25" pos:end="385:27"><name pos:start="385:25" pos:end="385:27">buf</name></expr></argument>, <argument pos:start="385:30" pos:end="385:40"><expr pos:start="385:30" pos:end="385:40"><sizeof pos:start="385:30" pos:end="385:40">sizeof<argument_list pos:start="385:36" pos:end="385:40">(<argument pos:start="385:37" pos:end="385:39"><expr pos:start="385:37" pos:end="385:39"><name pos:start="385:37" pos:end="385:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="385:43" pos:end="385:50"><expr pos:start="385:43" pos:end="385:50"><literal type="string" pos:start="385:43" pos:end="385:50">"format"</literal></expr></argument>, <argument pos:start="385:53" pos:end="385:55"><expr pos:start="385:53" pos:end="385:55"><name pos:start="385:53" pos:end="385:55">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="385:59" pos:end="409:5">{<block_content pos:start="387:8" pos:end="407:9">

       <if_stmt pos:start="387:8" pos:end="397:9"><if pos:start="387:8" pos:end="397:9">if <condition pos:start="387:11" pos:end="387:33">(<expr pos:start="387:12" pos:end="387:32"><call pos:start="387:12" pos:end="387:27"><name pos:start="387:12" pos:end="387:17">strcmp</name><argument_list pos:start="387:18" pos:end="387:27">(<argument pos:start="387:19" pos:end="387:21"><expr pos:start="387:19" pos:end="387:21"><name pos:start="387:19" pos:end="387:21">buf</name></expr></argument>, <argument pos:start="387:24" pos:end="387:26"><expr pos:start="387:24" pos:end="387:26"><literal type="string" pos:start="387:24" pos:end="387:26">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="387:29" pos:end="387:30">==</operator> <literal type="number" pos:start="387:32" pos:end="387:32">0</literal></expr>)</condition> <block pos:start="387:35" pos:end="397:9">{<block_content pos:start="389:13" pos:end="395:22">

            <expr_stmt pos:start="389:13" pos:end="389:56"><expr pos:start="389:13" pos:end="389:55"><call pos:start="389:13" pos:end="389:55"><name pos:start="389:13" pos:end="389:19">fprintf</name><argument_list pos:start="389:20" pos:end="389:55">(<argument pos:start="389:21" pos:end="389:26"><expr pos:start="389:21" pos:end="389:26"><name pos:start="389:21" pos:end="389:26">stderr</name></expr></argument>, <argument pos:start="389:29" pos:end="389:54"><expr pos:start="389:29" pos:end="389:54"><literal type="string" pos:start="389:29" pos:end="389:54">"qemu: Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:57"><expr pos:start="391:13" pos:end="391:56"><call pos:start="391:13" pos:end="391:56"><name pos:start="391:13" pos:end="391:31">bdrv_iterate_format</name><argument_list pos:start="391:32" pos:end="391:56">(<argument pos:start="391:33" pos:end="391:49"><expr pos:start="391:33" pos:end="391:49"><name pos:start="391:33" pos:end="391:49">bdrv_format_print</name></expr></argument>, <argument pos:start="391:52" pos:end="391:55"><expr pos:start="391:52" pos:end="391:55"><name pos:start="391:52" pos:end="391:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:34"><expr pos:start="393:13" pos:end="393:33"><call pos:start="393:13" pos:end="393:33"><name pos:start="393:13" pos:end="393:19">fprintf</name><argument_list pos:start="393:20" pos:end="393:33">(<argument pos:start="393:21" pos:end="393:26"><expr pos:start="393:21" pos:end="393:26"><name pos:start="393:21" pos:end="393:26">stderr</name></expr></argument>, <argument pos:start="393:29" pos:end="393:32"><expr pos:start="393:29" pos:end="393:32"><literal type="string" pos:start="393:29" pos:end="393:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="395:13" pos:end="395:22">return <expr pos:start="395:20" pos:end="395:21"><operator pos:start="395:20" pos:end="395:20">-</operator><literal type="number" pos:start="395:21" pos:end="395:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:36"><expr pos:start="399:9" pos:end="399:35"><name pos:start="399:9" pos:end="399:11">drv</name> <operator pos:start="399:13" pos:end="399:13">=</operator> <call pos:start="399:15" pos:end="399:35"><name pos:start="399:15" pos:end="399:30">bdrv_find_format</name><argument_list pos:start="399:31" pos:end="399:35">(<argument pos:start="399:32" pos:end="399:34"><expr pos:start="399:32" pos:end="399:34"><name pos:start="399:32" pos:end="399:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="401:9" pos:end="407:9"><if pos:start="401:9" pos:end="407:9">if <condition pos:start="401:12" pos:end="401:17">(<expr pos:start="401:13" pos:end="401:16"><operator pos:start="401:13" pos:end="401:13">!</operator><name pos:start="401:14" pos:end="401:16">drv</name></expr>)</condition> <block pos:start="401:19" pos:end="407:9">{<block_content pos:start="403:13" pos:end="405:22">

            <expr_stmt pos:start="403:13" pos:end="403:64"><expr pos:start="403:13" pos:end="403:63"><call pos:start="403:13" pos:end="403:63"><name pos:start="403:13" pos:end="403:19">fprintf</name><argument_list pos:start="403:20" pos:end="403:63">(<argument pos:start="403:21" pos:end="403:26"><expr pos:start="403:21" pos:end="403:26"><name pos:start="403:21" pos:end="403:26">stderr</name></expr></argument>, <argument pos:start="403:29" pos:end="403:57"><expr pos:start="403:29" pos:end="403:57"><literal type="string" pos:start="403:29" pos:end="403:57">"qemu: '%s' invalid format\n"</literal></expr></argument>, <argument pos:start="403:60" pos:end="403:62"><expr pos:start="403:60" pos:end="403:62"><name pos:start="403:60" pos:end="403:62">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="405:13" pos:end="405:22">return <expr pos:start="405:20" pos:end="405:21"><operator pos:start="405:20" pos:end="405:20">-</operator><literal type="number" pos:start="405:21" pos:end="405:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="413:5" pos:end="419:47"><if pos:start="413:5" pos:end="415:57">if <condition pos:start="413:8" pos:end="413:26">(<expr pos:start="413:9" pos:end="413:25"><name pos:start="413:9" pos:end="413:17"><name pos:start="413:9" pos:end="413:11">arg</name><operator pos:start="413:12" pos:end="413:13">-&gt;</operator><name pos:start="413:14" pos:end="413:17">file</name></name> <operator pos:start="413:19" pos:end="413:20">==</operator> <name pos:start="413:22" pos:end="413:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="415:9" pos:end="415:57"><block_content pos:start="415:9" pos:end="415:57">

        <expr_stmt pos:start="415:9" pos:end="415:57"><expr pos:start="415:9" pos:end="415:56"><call pos:start="415:9" pos:end="415:56"><name pos:start="415:9" pos:end="415:23">get_param_value</name><argument_list pos:start="415:24" pos:end="415:56">(<argument pos:start="415:25" pos:end="415:28"><expr pos:start="415:25" pos:end="415:28"><name pos:start="415:25" pos:end="415:28">file</name></expr></argument>, <argument pos:start="415:31" pos:end="415:42"><expr pos:start="415:31" pos:end="415:42"><sizeof pos:start="415:31" pos:end="415:42">sizeof<argument_list pos:start="415:37" pos:end="415:42">(<argument pos:start="415:38" pos:end="415:41"><expr pos:start="415:38" pos:end="415:41"><name pos:start="415:38" pos:end="415:41">file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="415:45" pos:end="415:50"><expr pos:start="415:45" pos:end="415:50"><literal type="string" pos:start="415:45" pos:end="415:50">"file"</literal></expr></argument>, <argument pos:start="415:53" pos:end="415:55"><expr pos:start="415:53" pos:end="415:55"><name pos:start="415:53" pos:end="415:55">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="417:5" pos:end="419:47">else<block type="pseudo" pos:start="419:9" pos:end="419:47"><block_content pos:start="419:9" pos:end="419:47">

        <expr_stmt pos:start="419:9" pos:end="419:47"><expr pos:start="419:9" pos:end="419:46"><call pos:start="419:9" pos:end="419:46"><name pos:start="419:9" pos:end="419:15">pstrcpy</name><argument_list pos:start="419:16" pos:end="419:46">(<argument pos:start="419:17" pos:end="419:20"><expr pos:start="419:17" pos:end="419:20"><name pos:start="419:17" pos:end="419:20">file</name></expr></argument>, <argument pos:start="419:23" pos:end="419:34"><expr pos:start="419:23" pos:end="419:34"><sizeof pos:start="419:23" pos:end="419:34">sizeof<argument_list pos:start="419:29" pos:end="419:34">(<argument pos:start="419:30" pos:end="419:33"><expr pos:start="419:30" pos:end="419:33"><name pos:start="419:30" pos:end="419:33">file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="419:37" pos:end="419:45"><expr pos:start="419:37" pos:end="419:45"><name pos:start="419:37" pos:end="419:45"><name pos:start="419:37" pos:end="419:39">arg</name><operator pos:start="419:40" pos:end="419:41">-&gt;</operator><name pos:start="419:42" pos:end="419:45">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="423:5" pos:end="425:47"><if pos:start="423:5" pos:end="425:47">if <condition pos:start="423:8" pos:end="423:64">(<expr pos:start="423:9" pos:end="423:63"><operator pos:start="423:9" pos:end="423:9">!</operator><call pos:start="423:10" pos:end="423:63"><name pos:start="423:10" pos:end="423:24">get_param_value</name><argument_list pos:start="423:25" pos:end="423:63">(<argument pos:start="423:26" pos:end="423:31"><expr pos:start="423:26" pos:end="423:31"><name pos:start="423:26" pos:end="423:31">serial</name></expr></argument>, <argument pos:start="423:34" pos:end="423:47"><expr pos:start="423:34" pos:end="423:47"><sizeof pos:start="423:34" pos:end="423:47">sizeof<argument_list pos:start="423:40" pos:end="423:47">(<argument pos:start="423:41" pos:end="423:46"><expr pos:start="423:41" pos:end="423:46"><name pos:start="423:41" pos:end="423:46">serial</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="423:50" pos:end="423:57"><expr pos:start="423:50" pos:end="423:57"><literal type="string" pos:start="423:50" pos:end="423:57">"serial"</literal></expr></argument>, <argument pos:start="423:60" pos:end="423:62"><expr pos:start="423:60" pos:end="423:62"><name pos:start="423:60" pos:end="423:62">str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="425:13" pos:end="425:47"><block_content pos:start="425:13" pos:end="425:47">

	    <expr_stmt pos:start="425:13" pos:end="425:47"><expr pos:start="425:13" pos:end="425:46"><call pos:start="425:13" pos:end="425:46"><name pos:start="425:13" pos:end="425:18">memset</name><argument_list pos:start="425:19" pos:end="425:46">(<argument pos:start="425:20" pos:end="425:25"><expr pos:start="425:20" pos:end="425:25"><name pos:start="425:20" pos:end="425:25">serial</name></expr></argument>, <argument pos:start="425:28" pos:end="425:28"><expr pos:start="425:28" pos:end="425:28"><literal type="number" pos:start="425:28" pos:end="425:28">0</literal></expr></argument>,  <argument pos:start="425:32" pos:end="425:45"><expr pos:start="425:32" pos:end="425:45"><sizeof pos:start="425:32" pos:end="425:45">sizeof<argument_list pos:start="425:38" pos:end="425:45">(<argument pos:start="425:39" pos:end="425:44"><expr pos:start="425:39" pos:end="425:44"><name pos:start="425:39" pos:end="425:44">serial</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="429:5" pos:end="429:31"><expr pos:start="429:5" pos:end="429:30"><name pos:start="429:5" pos:end="429:11">onerror</name> <operator pos:start="429:13" pos:end="429:13">=</operator> <name pos:start="429:15" pos:end="429:30">BLOCK_ERR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="431:5" pos:end="465:5"><if pos:start="431:5" pos:end="465:5">if <condition pos:start="431:8" pos:end="431:60">(<expr pos:start="431:9" pos:end="431:59"><call pos:start="431:9" pos:end="431:59"><name pos:start="431:9" pos:end="431:23">get_param_value</name><argument_list pos:start="431:24" pos:end="431:59">(<argument pos:start="431:25" pos:end="431:27"><expr pos:start="431:25" pos:end="431:27"><name pos:start="431:25" pos:end="431:27">buf</name></expr></argument>, <argument pos:start="431:30" pos:end="431:43"><expr pos:start="431:30" pos:end="431:43"><sizeof pos:start="431:30" pos:end="431:43">sizeof<argument_list pos:start="431:36" pos:end="431:43">(<argument pos:start="431:37" pos:end="431:42"><expr pos:start="431:37" pos:end="431:42"><name pos:start="431:37" pos:end="431:42">serial</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="431:46" pos:end="431:53"><expr pos:start="431:46" pos:end="431:53"><literal type="string" pos:start="431:46" pos:end="431:53">"werror"</literal></expr></argument>, <argument pos:start="431:56" pos:end="431:58"><expr pos:start="431:56" pos:end="431:58"><name pos:start="431:56" pos:end="431:58">str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="431:62" pos:end="465:5">{<block_content pos:start="433:9" pos:end="463:9">

        <if_stmt pos:start="433:9" pos:end="439:9"><if pos:start="433:9" pos:end="439:9">if <condition pos:start="433:12" pos:end="433:67">(<expr pos:start="433:13" pos:end="433:66"><name pos:start="433:13" pos:end="433:16">type</name> <operator pos:start="433:18" pos:end="433:19">!=</operator> <name pos:start="433:21" pos:end="433:26">IF_IDE</name> <operator pos:start="433:28" pos:end="433:29">&amp;&amp;</operator> <name pos:start="433:31" pos:end="433:34">type</name> <operator pos:start="433:36" pos:end="433:37">!=</operator> <name pos:start="433:39" pos:end="433:45">IF_SCSI</name> <operator pos:start="433:47" pos:end="433:48">&amp;&amp;</operator> <name pos:start="433:50" pos:end="433:53">type</name> <operator pos:start="433:55" pos:end="433:56">!=</operator> <name pos:start="433:58" pos:end="433:66">IF_VIRTIO</name></expr>)</condition> <block pos:start="433:69" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:22">

            <expr_stmt pos:start="435:13" pos:end="435:71"><expr pos:start="435:13" pos:end="435:70"><call pos:start="435:13" pos:end="435:70"><name pos:start="435:13" pos:end="435:19">fprintf</name><argument_list pos:start="435:20" pos:end="435:70">(<argument pos:start="435:21" pos:end="435:26"><expr pos:start="435:21" pos:end="435:26"><name pos:start="435:21" pos:end="435:26">stderr</name></expr></argument>, <argument pos:start="435:29" pos:end="435:69"><expr pos:start="435:29" pos:end="435:69"><literal type="string" pos:start="435:29" pos:end="435:69">"werror is no supported by this format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="437:13" pos:end="437:22">return <expr pos:start="437:20" pos:end="437:21"><operator pos:start="437:20" pos:end="437:20">-</operator><literal type="number" pos:start="437:21" pos:end="437:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="441:9" pos:end="463:9"><if pos:start="441:9" pos:end="443:39">if <condition pos:start="441:12" pos:end="441:35">(<expr pos:start="441:13" pos:end="441:34"><operator pos:start="441:13" pos:end="441:13">!</operator><call pos:start="441:14" pos:end="441:34"><name pos:start="441:14" pos:end="441:19">strcmp</name><argument_list pos:start="441:20" pos:end="441:34">(<argument pos:start="441:21" pos:end="441:23"><expr pos:start="441:21" pos:end="441:23"><name pos:start="441:21" pos:end="441:23">buf</name></expr></argument>, <argument pos:start="441:26" pos:end="441:33"><expr pos:start="441:26" pos:end="441:33"><literal type="string" pos:start="441:26" pos:end="441:33">"ignore"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="443:13" pos:end="443:39"><block_content pos:start="443:13" pos:end="443:39">

            <expr_stmt pos:start="443:13" pos:end="443:39"><expr pos:start="443:13" pos:end="443:38"><name pos:start="443:13" pos:end="443:19">onerror</name> <operator pos:start="443:21" pos:end="443:21">=</operator> <name pos:start="443:23" pos:end="443:38">BLOCK_ERR_IGNORE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="445:9" pos:end="447:44">else if <condition pos:start="445:17" pos:end="445:40">(<expr pos:start="445:18" pos:end="445:39"><operator pos:start="445:18" pos:end="445:18">!</operator><call pos:start="445:19" pos:end="445:39"><name pos:start="445:19" pos:end="445:24">strcmp</name><argument_list pos:start="445:25" pos:end="445:39">(<argument pos:start="445:26" pos:end="445:28"><expr pos:start="445:26" pos:end="445:28"><name pos:start="445:26" pos:end="445:28">buf</name></expr></argument>, <argument pos:start="445:31" pos:end="445:38"><expr pos:start="445:31" pos:end="445:38"><literal type="string" pos:start="445:31" pos:end="445:38">"enospc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="447:13" pos:end="447:44"><block_content pos:start="447:13" pos:end="447:44">

            <expr_stmt pos:start="447:13" pos:end="447:44"><expr pos:start="447:13" pos:end="447:43"><name pos:start="447:13" pos:end="447:19">onerror</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <name pos:start="447:23" pos:end="447:43">BLOCK_ERR_STOP_ENOSPC</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="449:9" pos:end="451:41">else if <condition pos:start="449:17" pos:end="449:38">(<expr pos:start="449:18" pos:end="449:37"><operator pos:start="449:18" pos:end="449:18">!</operator><call pos:start="449:19" pos:end="449:37"><name pos:start="449:19" pos:end="449:24">strcmp</name><argument_list pos:start="449:25" pos:end="449:37">(<argument pos:start="449:26" pos:end="449:28"><expr pos:start="449:26" pos:end="449:28"><name pos:start="449:26" pos:end="449:28">buf</name></expr></argument>, <argument pos:start="449:31" pos:end="449:36"><expr pos:start="449:31" pos:end="449:36"><literal type="string" pos:start="449:31" pos:end="449:36">"stop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="451:13" pos:end="451:41"><block_content pos:start="451:13" pos:end="451:41">

            <expr_stmt pos:start="451:13" pos:end="451:41"><expr pos:start="451:13" pos:end="451:40"><name pos:start="451:13" pos:end="451:19">onerror</name> <operator pos:start="451:21" pos:end="451:21">=</operator> <name pos:start="451:23" pos:end="451:40">BLOCK_ERR_STOP_ANY</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="453:9" pos:end="455:39">else if <condition pos:start="453:17" pos:end="453:40">(<expr pos:start="453:18" pos:end="453:39"><operator pos:start="453:18" pos:end="453:18">!</operator><call pos:start="453:19" pos:end="453:39"><name pos:start="453:19" pos:end="453:24">strcmp</name><argument_list pos:start="453:25" pos:end="453:39">(<argument pos:start="453:26" pos:end="453:28"><expr pos:start="453:26" pos:end="453:28"><name pos:start="453:26" pos:end="453:28">buf</name></expr></argument>, <argument pos:start="453:31" pos:end="453:38"><expr pos:start="453:31" pos:end="453:38"><literal type="string" pos:start="453:31" pos:end="453:38">"report"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="455:13" pos:end="455:39"><block_content pos:start="455:13" pos:end="455:39">

            <expr_stmt pos:start="455:13" pos:end="455:39"><expr pos:start="455:13" pos:end="455:38"><name pos:start="455:13" pos:end="455:19">onerror</name> <operator pos:start="455:21" pos:end="455:21">=</operator> <name pos:start="455:23" pos:end="455:38">BLOCK_ERR_REPORT</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="457:9" pos:end="463:9">else <block pos:start="457:14" pos:end="463:9">{<block_content pos:start="459:13" pos:end="461:22">

            <expr_stmt pos:start="459:13" pos:end="459:76"><expr pos:start="459:13" pos:end="459:75"><call pos:start="459:13" pos:end="459:75"><name pos:start="459:13" pos:end="459:19">fprintf</name><argument_list pos:start="459:20" pos:end="459:75">(<argument pos:start="459:21" pos:end="459:26"><expr pos:start="459:21" pos:end="459:26"><name pos:start="459:21" pos:end="459:26">stderr</name></expr></argument>, <argument pos:start="459:29" pos:end="459:69"><expr pos:start="459:29" pos:end="459:69"><literal type="string" pos:start="459:29" pos:end="459:69">"qemu: '%s' invalid write error action\n"</literal></expr></argument>, <argument pos:start="459:72" pos:end="459:74"><expr pos:start="459:72" pos:end="459:74"><name pos:start="459:72" pos:end="459:74">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="461:13" pos:end="461:22">return <expr pos:start="461:20" pos:end="461:21"><operator pos:start="461:20" pos:end="461:20">-</operator><literal type="number" pos:start="461:21" pos:end="461:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="469:5" pos:end="469:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="473:5" pos:end="501:5"><if pos:start="473:5" pos:end="501:5">if <condition pos:start="473:8" pos:end="473:20">(<expr pos:start="473:9" pos:end="473:19"><name pos:start="473:9" pos:end="473:13">index</name> <operator pos:start="473:15" pos:end="473:16">!=</operator> <operator pos:start="473:18" pos:end="473:18">-</operator><literal type="number" pos:start="473:19" pos:end="473:19">1</literal></expr>)</condition> <block pos:start="473:22" pos:end="501:5">{<block_content pos:start="475:9" pos:end="499:9">

        <if_stmt pos:start="475:9" pos:end="483:9"><if pos:start="475:9" pos:end="483:9">if <condition pos:start="475:12" pos:end="475:41">(<expr pos:start="475:13" pos:end="475:40"><name pos:start="475:13" pos:end="475:18">bus_id</name> <operator pos:start="475:20" pos:end="475:21">!=</operator> <literal type="number" pos:start="475:23" pos:end="475:23">0</literal> <operator pos:start="475:25" pos:end="475:26">||</operator> <name pos:start="475:28" pos:end="475:34">unit_id</name> <operator pos:start="475:36" pos:end="475:37">!=</operator> <operator pos:start="475:39" pos:end="475:39">-</operator><literal type="number" pos:start="475:40" pos:end="475:40">1</literal></expr>)</condition> <block pos:start="475:43" pos:end="483:9">{<block_content pos:start="477:13" pos:end="481:22">

            <expr_stmt pos:start="477:13" pos:end="479:80"><expr pos:start="477:13" pos:end="479:79"><call pos:start="477:13" pos:end="479:79"><name pos:start="477:13" pos:end="477:19">fprintf</name><argument_list pos:start="477:20" pos:end="479:79">(<argument pos:start="477:21" pos:end="477:26"><expr pos:start="477:21" pos:end="477:26"><name pos:start="477:21" pos:end="477:26">stderr</name></expr></argument>,

                    <argument pos:start="479:21" pos:end="479:73"><expr pos:start="479:21" pos:end="479:73"><literal type="string" pos:start="479:21" pos:end="479:73">"qemu: '%s' index cannot be used with bus and unit\n"</literal></expr></argument>, <argument pos:start="479:76" pos:end="479:78"><expr pos:start="479:76" pos:end="479:78"><name pos:start="479:76" pos:end="479:78">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="481:13" pos:end="481:22">return <expr pos:start="481:20" pos:end="481:21"><operator pos:start="481:20" pos:end="481:20">-</operator><literal type="number" pos:start="481:21" pos:end="481:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="485:9" pos:end="499:9"><if pos:start="485:9" pos:end="493:9">if <condition pos:start="485:12" pos:end="485:26">(<expr pos:start="485:13" pos:end="485:25"><name pos:start="485:13" pos:end="485:20">max_devs</name> <operator pos:start="485:22" pos:end="485:23">==</operator> <literal type="number" pos:start="485:25" pos:end="485:25">0</literal></expr>)</condition>

        <block pos:start="487:9" pos:end="493:9">{<block_content pos:start="489:13" pos:end="491:23">

            <expr_stmt pos:start="489:13" pos:end="489:28"><expr pos:start="489:13" pos:end="489:27"><name pos:start="489:13" pos:end="489:19">unit_id</name> <operator pos:start="489:21" pos:end="489:21">=</operator> <name pos:start="489:23" pos:end="489:27">index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:23"><expr pos:start="491:13" pos:end="491:22"><name pos:start="491:13" pos:end="491:18">bus_id</name> <operator pos:start="491:20" pos:end="491:20">=</operator> <literal type="number" pos:start="491:22" pos:end="491:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="493:11" pos:end="499:9">else <block pos:start="493:16" pos:end="499:9">{<block_content pos:start="495:13" pos:end="497:38">

            <expr_stmt pos:start="495:13" pos:end="495:39"><expr pos:start="495:13" pos:end="495:38"><name pos:start="495:13" pos:end="495:19">unit_id</name> <operator pos:start="495:21" pos:end="495:21">=</operator> <name pos:start="495:23" pos:end="495:27">index</name> <operator pos:start="495:29" pos:end="495:29">%</operator> <name pos:start="495:31" pos:end="495:38">max_devs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:38"><expr pos:start="497:13" pos:end="497:37"><name pos:start="497:13" pos:end="497:18">bus_id</name> <operator pos:start="497:20" pos:end="497:20">=</operator> <name pos:start="497:22" pos:end="497:26">index</name> <operator pos:start="497:28" pos:end="497:28">/</operator> <name pos:start="497:30" pos:end="497:37">max_devs</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="505:5" pos:end="509:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="513:5" pos:end="531:5"><if pos:start="513:5" pos:end="531:5">if <condition pos:start="513:8" pos:end="513:22">(<expr pos:start="513:9" pos:end="513:21"><name pos:start="513:9" pos:end="513:15">unit_id</name> <operator pos:start="513:17" pos:end="513:18">==</operator> <operator pos:start="513:20" pos:end="513:20">-</operator><literal type="number" pos:start="513:21" pos:end="513:21">1</literal></expr>)</condition> <block pos:start="513:24" pos:end="531:5">{<block_content pos:start="515:8" pos:end="529:8">

       <expr_stmt pos:start="515:8" pos:end="515:19"><expr pos:start="515:8" pos:end="515:18"><name pos:start="515:8" pos:end="515:14">unit_id</name> <operator pos:start="515:16" pos:end="515:16">=</operator> <literal type="number" pos:start="515:18" pos:end="515:18">0</literal></expr>;</expr_stmt>

       <while pos:start="517:8" pos:end="529:8">while <condition pos:start="517:14" pos:end="517:59">(<expr pos:start="517:15" pos:end="517:58"><call pos:start="517:15" pos:end="517:52"><name pos:start="517:15" pos:end="517:29">drive_get_index</name><argument_list pos:start="517:30" pos:end="517:52">(<argument pos:start="517:31" pos:end="517:34"><expr pos:start="517:31" pos:end="517:34"><name pos:start="517:31" pos:end="517:34">type</name></expr></argument>, <argument pos:start="517:37" pos:end="517:42"><expr pos:start="517:37" pos:end="517:42"><name pos:start="517:37" pos:end="517:42">bus_id</name></expr></argument>, <argument pos:start="517:45" pos:end="517:51"><expr pos:start="517:45" pos:end="517:51"><name pos:start="517:45" pos:end="517:51">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="517:54" pos:end="517:55">!=</operator> <operator pos:start="517:57" pos:end="517:57">-</operator><literal type="number" pos:start="517:58" pos:end="517:58">1</literal></expr>)</condition> <block pos:start="517:61" pos:end="529:8">{<block_content pos:start="519:12" pos:end="527:12">

           <expr_stmt pos:start="519:12" pos:end="519:21"><expr pos:start="519:12" pos:end="519:20"><name pos:start="519:12" pos:end="519:18">unit_id</name><operator pos:start="519:19" pos:end="519:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="521:12" pos:end="527:12"><if pos:start="521:12" pos:end="527:12">if <condition pos:start="521:15" pos:end="521:47">(<expr pos:start="521:16" pos:end="521:46"><name pos:start="521:16" pos:end="521:23">max_devs</name> <operator pos:start="521:25" pos:end="521:26">&amp;&amp;</operator> <name pos:start="521:28" pos:end="521:34">unit_id</name> <operator pos:start="521:36" pos:end="521:37">&gt;=</operator> <name pos:start="521:39" pos:end="521:46">max_devs</name></expr>)</condition> <block pos:start="521:49" pos:end="527:12">{<block_content pos:start="523:16" pos:end="525:24">

               <expr_stmt pos:start="523:16" pos:end="523:35"><expr pos:start="523:16" pos:end="523:34"><name pos:start="523:16" pos:end="523:22">unit_id</name> <operator pos:start="523:24" pos:end="523:25">-=</operator> <name pos:start="523:27" pos:end="523:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="525:16" pos:end="525:24"><expr pos:start="525:16" pos:end="525:23"><name pos:start="525:16" pos:end="525:21">bus_id</name><operator pos:start="525:22" pos:end="525:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="535:5" pos:end="535:23">/* check unit id */</comment>



    <if_stmt pos:start="539:5" pos:end="547:5"><if pos:start="539:5" pos:end="547:5">if <condition pos:start="539:8" pos:end="539:40">(<expr pos:start="539:9" pos:end="539:39"><name pos:start="539:9" pos:end="539:16">max_devs</name> <operator pos:start="539:18" pos:end="539:19">&amp;&amp;</operator> <name pos:start="539:21" pos:end="539:27">unit_id</name> <operator pos:start="539:29" pos:end="539:30">&gt;=</operator> <name pos:start="539:32" pos:end="539:39">max_devs</name></expr>)</condition> <block pos:start="539:42" pos:end="547:5">{<block_content pos:start="541:9" pos:end="545:18">

        <expr_stmt pos:start="541:9" pos:end="543:52"><expr pos:start="541:9" pos:end="543:51"><call pos:start="541:9" pos:end="543:51"><name pos:start="541:9" pos:end="541:15">fprintf</name><argument_list pos:start="541:16" pos:end="543:51">(<argument pos:start="541:17" pos:end="541:22"><expr pos:start="541:17" pos:end="541:22"><name pos:start="541:17" pos:end="541:22">stderr</name></expr></argument>, <argument pos:start="541:25" pos:end="541:66"><expr pos:start="541:25" pos:end="541:66"><literal type="string" pos:start="541:25" pos:end="541:66">"qemu: '%s' unit %d too big (max is %d)\n"</literal></expr></argument>,

                        <argument pos:start="543:25" pos:end="543:27"><expr pos:start="543:25" pos:end="543:27"><name pos:start="543:25" pos:end="543:27">str</name></expr></argument>, <argument pos:start="543:30" pos:end="543:36"><expr pos:start="543:30" pos:end="543:36"><name pos:start="543:30" pos:end="543:36">unit_id</name></expr></argument>, <argument pos:start="543:39" pos:end="543:50"><expr pos:start="543:39" pos:end="543:50"><name pos:start="543:39" pos:end="543:46">max_devs</name> <operator pos:start="543:48" pos:end="543:48">-</operator> <literal type="number" pos:start="543:50" pos:end="543:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="545:9" pos:end="545:18">return <expr pos:start="545:16" pos:end="545:17"><operator pos:start="545:16" pos:end="545:16">-</operator><literal type="number" pos:start="545:17" pos:end="545:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="551:5" pos:end="555:7">/*

     * ignore multiple definitions

     */</comment>



    <if_stmt pos:start="559:5" pos:end="561:17"><if pos:start="559:5" pos:end="561:17">if <condition pos:start="559:8" pos:end="559:53">(<expr pos:start="559:9" pos:end="559:52"><call pos:start="559:9" pos:end="559:46"><name pos:start="559:9" pos:end="559:23">drive_get_index</name><argument_list pos:start="559:24" pos:end="559:46">(<argument pos:start="559:25" pos:end="559:28"><expr pos:start="559:25" pos:end="559:28"><name pos:start="559:25" pos:end="559:28">type</name></expr></argument>, <argument pos:start="559:31" pos:end="559:36"><expr pos:start="559:31" pos:end="559:36"><name pos:start="559:31" pos:end="559:36">bus_id</name></expr></argument>, <argument pos:start="559:39" pos:end="559:45"><expr pos:start="559:39" pos:end="559:45"><name pos:start="559:39" pos:end="559:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="559:48" pos:end="559:49">!=</operator> <operator pos:start="559:51" pos:end="559:51">-</operator><literal type="number" pos:start="559:52" pos:end="559:52">1</literal></expr>)</condition><block type="pseudo" pos:start="561:9" pos:end="561:17"><block_content pos:start="561:9" pos:end="561:17">

        <return pos:start="561:9" pos:end="561:17">return <expr pos:start="561:16" pos:end="561:16"><literal type="number" pos:start="561:16" pos:end="561:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="565:5" pos:end="565:14">/* init */</comment>



    <if_stmt pos:start="569:5" pos:end="571:58"><if pos:start="569:5" pos:end="571:58">if <condition pos:start="569:8" pos:end="569:42">(<expr pos:start="569:9" pos:end="569:41"><name pos:start="569:9" pos:end="569:12">type</name> <operator pos:start="569:14" pos:end="569:15">==</operator> <name pos:start="569:17" pos:end="569:22">IF_IDE</name> <operator pos:start="569:24" pos:end="569:25">||</operator> <name pos:start="569:27" pos:end="569:30">type</name> <operator pos:start="569:32" pos:end="569:33">==</operator> <name pos:start="569:35" pos:end="569:41">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="571:9" pos:end="571:58"><block_content pos:start="571:9" pos:end="571:58">

        <expr_stmt pos:start="571:9" pos:end="571:58"><expr pos:start="571:9" pos:end="571:57"><name pos:start="571:9" pos:end="571:16">mediastr</name> <operator pos:start="571:18" pos:end="571:18">=</operator> <ternary pos:start="571:20" pos:end="571:57"><condition pos:start="571:20" pos:end="571:43"><expr pos:start="571:20" pos:end="571:41"><operator pos:start="571:20" pos:end="571:20">(</operator><name pos:start="571:21" pos:end="571:25">media</name> <operator pos:start="571:27" pos:end="571:28">==</operator> <name pos:start="571:30" pos:end="571:40">MEDIA_CDROM</name><operator pos:start="571:41" pos:end="571:41">)</operator></expr> ?</condition><then pos:start="571:45" pos:end="571:49"> <expr pos:start="571:45" pos:end="571:49"><literal type="string" pos:start="571:45" pos:end="571:49">"-cd"</literal></expr> </then><else pos:start="571:51" pos:end="571:57">: <expr pos:start="571:53" pos:end="571:57"><literal type="string" pos:start="571:53" pos:end="571:57">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="573:5" pos:end="583:45"><if pos:start="573:5" pos:end="577:53">if <condition pos:start="573:8" pos:end="573:17">(<expr pos:start="573:9" pos:end="573:16"><name pos:start="573:9" pos:end="573:16">max_devs</name></expr>)</condition><block type="pseudo" pos:start="575:9" pos:end="577:53"><block_content pos:start="575:9" pos:end="577:53">

        <expr_stmt pos:start="575:9" pos:end="577:53"><expr pos:start="575:9" pos:end="577:52"><call pos:start="575:9" pos:end="577:52"><name pos:start="575:9" pos:end="575:16">snprintf</name><argument_list pos:start="575:17" pos:end="577:52">(<argument pos:start="575:18" pos:end="575:20"><expr pos:start="575:18" pos:end="575:20"><name pos:start="575:18" pos:end="575:20">buf</name></expr></argument>, <argument pos:start="575:23" pos:end="575:33"><expr pos:start="575:23" pos:end="575:33"><sizeof pos:start="575:23" pos:end="575:33">sizeof<argument_list pos:start="575:29" pos:end="575:33">(<argument pos:start="575:30" pos:end="575:32"><expr pos:start="575:30" pos:end="575:32"><name pos:start="575:30" pos:end="575:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="575:36" pos:end="575:45"><expr pos:start="575:36" pos:end="575:45"><literal type="string" pos:start="575:36" pos:end="575:45">"%s%i%s%i"</literal></expr></argument>,

                 <argument pos:start="577:18" pos:end="577:24"><expr pos:start="577:18" pos:end="577:24"><name pos:start="577:18" pos:end="577:24">devname</name></expr></argument>, <argument pos:start="577:27" pos:end="577:32"><expr pos:start="577:27" pos:end="577:32"><name pos:start="577:27" pos:end="577:32">bus_id</name></expr></argument>, <argument pos:start="577:35" pos:end="577:42"><expr pos:start="577:35" pos:end="577:42"><name pos:start="577:35" pos:end="577:42">mediastr</name></expr></argument>, <argument pos:start="577:45" pos:end="577:51"><expr pos:start="577:45" pos:end="577:51"><name pos:start="577:45" pos:end="577:51">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="579:5" pos:end="583:45">else<block type="pseudo" pos:start="581:9" pos:end="583:45"><block_content pos:start="581:9" pos:end="583:45">

        <expr_stmt pos:start="581:9" pos:end="583:45"><expr pos:start="581:9" pos:end="583:44"><call pos:start="581:9" pos:end="583:44"><name pos:start="581:9" pos:end="581:16">snprintf</name><argument_list pos:start="581:17" pos:end="583:44">(<argument pos:start="581:18" pos:end="581:20"><expr pos:start="581:18" pos:end="581:20"><name pos:start="581:18" pos:end="581:20">buf</name></expr></argument>, <argument pos:start="581:23" pos:end="581:33"><expr pos:start="581:23" pos:end="581:33"><sizeof pos:start="581:23" pos:end="581:33">sizeof<argument_list pos:start="581:29" pos:end="581:33">(<argument pos:start="581:30" pos:end="581:32"><expr pos:start="581:30" pos:end="581:32"><name pos:start="581:30" pos:end="581:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="581:36" pos:end="581:43"><expr pos:start="581:36" pos:end="581:43"><literal type="string" pos:start="581:36" pos:end="581:43">"%s%s%i"</literal></expr></argument>,

                 <argument pos:start="583:18" pos:end="583:24"><expr pos:start="583:18" pos:end="583:24"><name pos:start="583:18" pos:end="583:24">devname</name></expr></argument>, <argument pos:start="583:27" pos:end="583:34"><expr pos:start="583:27" pos:end="583:34"><name pos:start="583:27" pos:end="583:34">mediastr</name></expr></argument>, <argument pos:start="583:37" pos:end="583:43"><expr pos:start="583:37" pos:end="583:43"><name pos:start="583:37" pos:end="583:43">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="585:5" pos:end="585:25"><expr pos:start="585:5" pos:end="585:24"><name pos:start="585:5" pos:end="585:8">bdrv</name> <operator pos:start="585:10" pos:end="585:10">=</operator> <call pos:start="585:12" pos:end="585:24"><name pos:start="585:12" pos:end="585:19">bdrv_new</name><argument_list pos:start="585:20" pos:end="585:24">(<argument pos:start="585:21" pos:end="585:23"><expr pos:start="585:21" pos:end="585:23"><name pos:start="585:21" pos:end="585:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="587:5" pos:end="587:44"><expr pos:start="587:5" pos:end="587:43"><name pos:start="587:5" pos:end="587:20">drives_table_idx</name> <operator pos:start="587:22" pos:end="587:22">=</operator> <call pos:start="587:24" pos:end="587:43"><name pos:start="587:24" pos:end="587:41">drive_get_free_idx</name><argument_list pos:start="587:42" pos:end="587:43">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="589:5" pos:end="589:47"><expr pos:start="589:5" pos:end="589:46"><name pos:start="589:5" pos:end="589:34"><name pos:start="589:5" pos:end="589:16">drives_table</name><index pos:start="589:17" pos:end="589:34">[<expr pos:start="589:18" pos:end="589:33"><name pos:start="589:18" pos:end="589:33">drives_table_idx</name></expr>]</index></name><operator pos:start="589:35" pos:end="589:35">.</operator><name pos:start="589:36" pos:end="589:39">bdrv</name> <operator pos:start="589:41" pos:end="589:41">=</operator> <name pos:start="589:43" pos:end="589:46">bdrv</name></expr>;</expr_stmt>

    <expr_stmt pos:start="591:5" pos:end="591:47"><expr pos:start="591:5" pos:end="591:46"><name pos:start="591:5" pos:end="591:34"><name pos:start="591:5" pos:end="591:16">drives_table</name><index pos:start="591:17" pos:end="591:34">[<expr pos:start="591:18" pos:end="591:33"><name pos:start="591:18" pos:end="591:33">drives_table_idx</name></expr>]</index></name><operator pos:start="591:35" pos:end="591:35">.</operator><name pos:start="591:36" pos:end="591:39">type</name> <operator pos:start="591:41" pos:end="591:41">=</operator> <name pos:start="591:43" pos:end="591:46">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="593:5" pos:end="593:48"><expr pos:start="593:5" pos:end="593:47"><name pos:start="593:5" pos:end="593:34"><name pos:start="593:5" pos:end="593:16">drives_table</name><index pos:start="593:17" pos:end="593:34">[<expr pos:start="593:18" pos:end="593:33"><name pos:start="593:18" pos:end="593:33">drives_table_idx</name></expr>]</index></name><operator pos:start="593:35" pos:end="593:35">.</operator><name pos:start="593:36" pos:end="593:38">bus</name> <operator pos:start="593:40" pos:end="593:40">=</operator> <name pos:start="593:42" pos:end="593:47">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="595:5" pos:end="595:50"><expr pos:start="595:5" pos:end="595:49"><name pos:start="595:5" pos:end="595:34"><name pos:start="595:5" pos:end="595:16">drives_table</name><index pos:start="595:17" pos:end="595:34">[<expr pos:start="595:18" pos:end="595:33"><name pos:start="595:18" pos:end="595:33">drives_table_idx</name></expr>]</index></name><operator pos:start="595:35" pos:end="595:35">.</operator><name pos:start="595:36" pos:end="595:39">unit</name> <operator pos:start="595:41" pos:end="595:41">=</operator> <name pos:start="595:43" pos:end="595:49">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="597:5" pos:end="597:53"><expr pos:start="597:5" pos:end="597:52"><name pos:start="597:5" pos:end="597:34"><name pos:start="597:5" pos:end="597:16">drives_table</name><index pos:start="597:17" pos:end="597:34">[<expr pos:start="597:18" pos:end="597:33"><name pos:start="597:18" pos:end="597:33">drives_table_idx</name></expr>]</index></name><operator pos:start="597:35" pos:end="597:35">.</operator><name pos:start="597:36" pos:end="597:42">onerror</name> <operator pos:start="597:44" pos:end="597:44">=</operator> <name pos:start="597:46" pos:end="597:52">onerror</name></expr>;</expr_stmt>

    <expr_stmt pos:start="599:5" pos:end="599:68"><expr pos:start="599:5" pos:end="599:67"><name pos:start="599:5" pos:end="599:34"><name pos:start="599:5" pos:end="599:16">drives_table</name><index pos:start="599:17" pos:end="599:34">[<expr pos:start="599:18" pos:end="599:33"><name pos:start="599:18" pos:end="599:33">drives_table_idx</name></expr>]</index></name><operator pos:start="599:35" pos:end="599:35">.</operator><name pos:start="599:36" pos:end="599:48">drive_opt_idx</name> <operator pos:start="599:50" pos:end="599:50">=</operator> <name pos:start="599:52" pos:end="599:54">arg</name> <operator pos:start="599:56" pos:end="599:56">-</operator> <name pos:start="599:58" pos:end="599:67">drives_opt</name></expr>;</expr_stmt>

    <expr_stmt pos:start="601:5" pos:end="601:68"><expr pos:start="601:5" pos:end="601:67"><call pos:start="601:5" pos:end="601:67"><name pos:start="601:5" pos:end="601:11">strncpy</name><argument_list pos:start="601:12" pos:end="601:67">(<argument pos:start="601:13" pos:end="601:42"><expr pos:start="601:13" pos:end="601:42"><name pos:start="601:13" pos:end="601:35"><name pos:start="601:13" pos:end="601:24">drives_table</name><index pos:start="601:25" pos:end="601:35">[<expr pos:start="601:26" pos:end="601:34"><name pos:start="601:26" pos:end="601:34">nb_drives</name></expr>]</index></name><operator pos:start="601:36" pos:end="601:36">.</operator><name pos:start="601:37" pos:end="601:42">serial</name></expr></argument>, <argument pos:start="601:45" pos:end="601:50"><expr pos:start="601:45" pos:end="601:50"><name pos:start="601:45" pos:end="601:50">serial</name></expr></argument>, <argument pos:start="601:53" pos:end="601:66"><expr pos:start="601:53" pos:end="601:66"><sizeof pos:start="601:53" pos:end="601:66">sizeof<argument_list pos:start="601:59" pos:end="601:66">(<argument pos:start="601:60" pos:end="601:65"><expr pos:start="601:60" pos:end="601:65"><name pos:start="601:60" pos:end="601:65">serial</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="603:5" pos:end="603:16"><expr pos:start="603:5" pos:end="603:15"><name pos:start="603:5" pos:end="603:13">nb_drives</name><operator pos:start="603:14" pos:end="603:15">++</operator></expr>;</expr_stmt>



    <switch pos:start="607:5" pos:end="657:5">switch<condition pos:start="607:11" pos:end="607:16">(<expr pos:start="607:12" pos:end="607:15"><name pos:start="607:12" pos:end="607:15">type</name></expr>)</condition> <block pos:start="607:18" pos:end="657:5">{<block_content pos:start="609:5" pos:end="655:14">

    <case pos:start="609:5" pos:end="609:16">case <expr pos:start="609:10" pos:end="609:15"><name pos:start="609:10" pos:end="609:15">IF_IDE</name></expr>:</case>

    <case pos:start="611:5" pos:end="611:17">case <expr pos:start="611:10" pos:end="611:16"><name pos:start="611:10" pos:end="611:16">IF_SCSI</name></expr>:</case>

        <switch pos:start="613:9" pos:end="633:9">switch<condition pos:start="613:15" pos:end="613:21">(<expr pos:start="613:16" pos:end="613:20"><name pos:start="613:16" pos:end="613:20">media</name></expr>)</condition> <block pos:start="613:23" pos:end="633:9">{<block_content pos:start="615:9" pos:end="631:18">

	<case pos:start="615:9" pos:end="615:24">case <expr pos:start="615:14" pos:end="615:23"><name pos:start="615:14" pos:end="615:23">MEDIA_DISK</name></expr>:</case>

            <if_stmt pos:start="617:13" pos:end="623:13"><if pos:start="617:13" pos:end="623:13">if <condition pos:start="617:16" pos:end="617:26">(<expr pos:start="617:17" pos:end="617:25"><name pos:start="617:17" pos:end="617:20">cyls</name> <operator pos:start="617:22" pos:end="617:23">!=</operator> <literal type="number" pos:start="617:25" pos:end="617:25">0</literal></expr>)</condition> <block pos:start="617:28" pos:end="623:13">{<block_content pos:start="619:17" pos:end="621:61">

                <expr_stmt pos:start="619:17" pos:end="619:64"><expr pos:start="619:17" pos:end="619:63"><call pos:start="619:17" pos:end="619:63"><name pos:start="619:17" pos:end="619:38">bdrv_set_geometry_hint</name><argument_list pos:start="619:39" pos:end="619:63">(<argument pos:start="619:40" pos:end="619:43"><expr pos:start="619:40" pos:end="619:43"><name pos:start="619:40" pos:end="619:43">bdrv</name></expr></argument>, <argument pos:start="619:46" pos:end="619:49"><expr pos:start="619:46" pos:end="619:49"><name pos:start="619:46" pos:end="619:49">cyls</name></expr></argument>, <argument pos:start="619:52" pos:end="619:56"><expr pos:start="619:52" pos:end="619:56"><name pos:start="619:52" pos:end="619:56">heads</name></expr></argument>, <argument pos:start="619:59" pos:end="619:62"><expr pos:start="619:59" pos:end="619:62"><name pos:start="619:59" pos:end="619:62">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="621:17" pos:end="621:61"><expr pos:start="621:17" pos:end="621:60"><call pos:start="621:17" pos:end="621:60"><name pos:start="621:17" pos:end="621:41">bdrv_set_translation_hint</name><argument_list pos:start="621:42" pos:end="621:60">(<argument pos:start="621:43" pos:end="621:46"><expr pos:start="621:43" pos:end="621:46"><name pos:start="621:43" pos:end="621:46">bdrv</name></expr></argument>, <argument pos:start="621:49" pos:end="621:59"><expr pos:start="621:49" pos:end="621:59"><name pos:start="621:49" pos:end="621:59">translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <break pos:start="625:13" pos:end="625:18">break;</break>

	<case pos:start="627:9" pos:end="627:25">case <expr pos:start="627:14" pos:end="627:24"><name pos:start="627:14" pos:end="627:24">MEDIA_CDROM</name></expr>:</case>

            <expr_stmt pos:start="629:13" pos:end="629:54"><expr pos:start="629:13" pos:end="629:53"><call pos:start="629:13" pos:end="629:53"><name pos:start="629:13" pos:end="629:30">bdrv_set_type_hint</name><argument_list pos:start="629:31" pos:end="629:53">(<argument pos:start="629:32" pos:end="629:35"><expr pos:start="629:32" pos:end="629:35"><name pos:start="629:32" pos:end="629:35">bdrv</name></expr></argument>, <argument pos:start="629:38" pos:end="629:52"><expr pos:start="629:38" pos:end="629:52"><name pos:start="629:38" pos:end="629:52">BDRV_TYPE_CDROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="631:13" pos:end="631:18">break;</break>

	</block_content>}</block></switch>

        <break pos:start="635:9" pos:end="635:14">break;</break>

    <case pos:start="637:5" pos:end="637:15">case <expr pos:start="637:10" pos:end="637:14"><name pos:start="637:10" pos:end="637:14">IF_SD</name></expr>:</case>

        <comment type="block" pos:start="639:9" pos:end="641:29">/* FIXME: This isn't really a floppy, but it's a reasonable

           approximation.  */</comment>

    <case pos:start="643:5" pos:end="643:19">case <expr pos:start="643:10" pos:end="643:18"><name pos:start="643:10" pos:end="643:18">IF_FLOPPY</name></expr>:</case>

        <expr_stmt pos:start="645:9" pos:end="645:51"><expr pos:start="645:9" pos:end="645:50"><call pos:start="645:9" pos:end="645:50"><name pos:start="645:9" pos:end="645:26">bdrv_set_type_hint</name><argument_list pos:start="645:27" pos:end="645:50">(<argument pos:start="645:28" pos:end="645:31"><expr pos:start="645:28" pos:end="645:31"><name pos:start="645:28" pos:end="645:31">bdrv</name></expr></argument>, <argument pos:start="645:34" pos:end="645:49"><expr pos:start="645:34" pos:end="645:49"><name pos:start="645:34" pos:end="645:49">BDRV_TYPE_FLOPPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="647:9" pos:end="647:14">break;</break>

    <case pos:start="649:5" pos:end="649:19">case <expr pos:start="649:10" pos:end="649:18"><name pos:start="649:10" pos:end="649:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="651:5" pos:end="651:16">case <expr pos:start="651:10" pos:end="651:15"><name pos:start="651:10" pos:end="651:15">IF_MTD</name></expr>:</case>

    <case pos:start="653:5" pos:end="653:19">case <expr pos:start="653:10" pos:end="653:18"><name pos:start="653:10" pos:end="653:18">IF_VIRTIO</name></expr>:</case>

        <break pos:start="655:9" pos:end="655:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="659:5" pos:end="661:17"><if pos:start="659:5" pos:end="661:17">if <condition pos:start="659:8" pos:end="659:17">(<expr pos:start="659:9" pos:end="659:16"><operator pos:start="659:9" pos:end="659:9">!</operator><name pos:start="659:10" pos:end="659:16"><name pos:start="659:10" pos:end="659:13">file</name><index pos:start="659:14" pos:end="659:16">[<expr pos:start="659:15" pos:end="659:15"><literal type="number" pos:start="659:15" pos:end="659:15">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="661:9" pos:end="661:17"><block_content pos:start="661:9" pos:end="661:17">

        <return pos:start="661:9" pos:end="661:17">return <expr pos:start="661:16" pos:end="661:16"><literal type="number" pos:start="661:16" pos:end="661:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="663:5" pos:end="663:19"><expr pos:start="663:5" pos:end="663:18"><name pos:start="663:5" pos:end="663:14">bdrv_flags</name> <operator pos:start="663:16" pos:end="663:16">=</operator> <literal type="number" pos:start="663:18" pos:end="663:18">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="665:5" pos:end="671:5"><if pos:start="665:5" pos:end="671:5">if <condition pos:start="665:8" pos:end="665:17">(<expr pos:start="665:9" pos:end="665:16"><name pos:start="665:9" pos:end="665:16">snapshot</name></expr>)</condition> <block pos:start="665:19" pos:end="671:5">{<block_content pos:start="667:9" pos:end="669:18">

        <expr_stmt pos:start="667:9" pos:end="667:38"><expr pos:start="667:9" pos:end="667:37"><name pos:start="667:9" pos:end="667:18">bdrv_flags</name> <operator pos:start="667:20" pos:end="667:21">|=</operator> <name pos:start="667:23" pos:end="667:37">BDRV_O_SNAPSHOT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="669:9" pos:end="669:18"><expr pos:start="669:9" pos:end="669:17"><name pos:start="669:9" pos:end="669:13">cache</name> <operator pos:start="669:15" pos:end="669:15">=</operator> <literal type="number" pos:start="669:17" pos:end="669:17">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="669:20" pos:end="669:60">/* always use write-back with snapshot */</comment>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="673:5" pos:end="683:39"><if pos:start="673:5" pos:end="675:37">if <condition pos:start="673:8" pos:end="673:19">(<expr pos:start="673:9" pos:end="673:18"><name pos:start="673:9" pos:end="673:13">cache</name> <operator pos:start="673:15" pos:end="673:16">==</operator> <literal type="number" pos:start="673:18" pos:end="673:18">0</literal></expr>)</condition><block type="pseudo" pos:start="675:9" pos:end="675:37"><block_content pos:start="675:9" pos:end="675:37"> <comment type="block" pos:start="673:21" pos:end="673:36">/* no caching */</comment>

        <expr_stmt pos:start="675:9" pos:end="675:37"><expr pos:start="675:9" pos:end="675:36"><name pos:start="675:9" pos:end="675:18">bdrv_flags</name> <operator pos:start="675:20" pos:end="675:21">|=</operator> <name pos:start="675:23" pos:end="675:36">BDRV_O_NOCACHE</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="677:5" pos:end="679:38">else if <condition pos:start="677:13" pos:end="677:24">(<expr pos:start="677:14" pos:end="677:23"><name pos:start="677:14" pos:end="677:18">cache</name> <operator pos:start="677:20" pos:end="677:21">==</operator> <literal type="number" pos:start="677:23" pos:end="677:23">2</literal></expr>)</condition><block type="pseudo" pos:start="679:9" pos:end="679:38"><block_content pos:start="679:9" pos:end="679:38"> <comment type="block" pos:start="677:26" pos:end="677:41">/* write-back */</comment>

        <expr_stmt pos:start="679:9" pos:end="679:38"><expr pos:start="679:9" pos:end="679:37"><name pos:start="679:9" pos:end="679:18">bdrv_flags</name> <operator pos:start="679:20" pos:end="679:21">|=</operator> <name pos:start="679:23" pos:end="679:37">BDRV_O_CACHE_WB</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="681:5" pos:end="683:39">else if <condition pos:start="681:13" pos:end="681:24">(<expr pos:start="681:14" pos:end="681:23"><name pos:start="681:14" pos:end="681:18">cache</name> <operator pos:start="681:20" pos:end="681:21">==</operator> <literal type="number" pos:start="681:23" pos:end="681:23">3</literal></expr>)</condition><block type="pseudo" pos:start="683:9" pos:end="683:39"><block_content pos:start="683:9" pos:end="683:39"> <comment type="block" pos:start="681:26" pos:end="681:44">/* not specified */</comment>

        <expr_stmt pos:start="683:9" pos:end="683:39"><expr pos:start="683:9" pos:end="683:38"><name pos:start="683:9" pos:end="683:18">bdrv_flags</name> <operator pos:start="683:20" pos:end="683:21">|=</operator> <name pos:start="683:23" pos:end="683:38">BDRV_O_CACHE_DEF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="685:5" pos:end="693:5"><if pos:start="685:5" pos:end="693:5">if <condition pos:start="685:8" pos:end="685:82">(<expr pos:start="685:9" pos:end="685:81"><call pos:start="685:9" pos:end="685:47"><name pos:start="685:9" pos:end="685:18">bdrv_open2</name><argument_list pos:start="685:19" pos:end="685:47">(<argument pos:start="685:20" pos:end="685:23"><expr pos:start="685:20" pos:end="685:23"><name pos:start="685:20" pos:end="685:23">bdrv</name></expr></argument>, <argument pos:start="685:26" pos:end="685:29"><expr pos:start="685:26" pos:end="685:29"><name pos:start="685:26" pos:end="685:29">file</name></expr></argument>, <argument pos:start="685:32" pos:end="685:41"><expr pos:start="685:32" pos:end="685:41"><name pos:start="685:32" pos:end="685:41">bdrv_flags</name></expr></argument>, <argument pos:start="685:44" pos:end="685:46"><expr pos:start="685:44" pos:end="685:46"><name pos:start="685:44" pos:end="685:46">drv</name></expr></argument>)</argument_list></call> <operator pos:start="685:49" pos:end="685:49">&lt;</operator> <literal type="number" pos:start="685:51" pos:end="685:51">0</literal> <operator pos:start="685:53" pos:end="685:54">||</operator> <call pos:start="685:56" pos:end="685:81"><name pos:start="685:56" pos:end="685:69">qemu_key_check</name><argument_list pos:start="685:70" pos:end="685:81">(<argument pos:start="685:71" pos:end="685:74"><expr pos:start="685:71" pos:end="685:74"><name pos:start="685:71" pos:end="685:74">bdrv</name></expr></argument>, <argument pos:start="685:77" pos:end="685:80"><expr pos:start="685:77" pos:end="685:80"><name pos:start="685:77" pos:end="685:80">file</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="685:84" pos:end="693:5">{<block_content pos:start="687:9" pos:end="691:18">

        <expr_stmt pos:start="687:9" pos:end="689:30"><expr pos:start="687:9" pos:end="689:29"><call pos:start="687:9" pos:end="689:29"><name pos:start="687:9" pos:end="687:15">fprintf</name><argument_list pos:start="687:16" pos:end="689:29">(<argument pos:start="687:17" pos:end="687:22"><expr pos:start="687:17" pos:end="687:22"><name pos:start="687:17" pos:end="687:22">stderr</name></expr></argument>, <argument pos:start="687:25" pos:end="687:62"><expr pos:start="687:25" pos:end="687:62"><literal type="string" pos:start="687:25" pos:end="687:62">"qemu: could not open disk image %s\n"</literal></expr></argument>,

                        <argument pos:start="689:25" pos:end="689:28"><expr pos:start="689:25" pos:end="689:28"><name pos:start="689:25" pos:end="689:28">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="691:9" pos:end="691:18">return <expr pos:start="691:16" pos:end="691:17"><operator pos:start="691:16" pos:end="691:16">-</operator><literal type="number" pos:start="691:17" pos:end="691:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="695:5" pos:end="695:13">return <expr pos:start="695:12" pos:end="695:12"><literal type="number" pos:start="695:12" pos:end="695:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
