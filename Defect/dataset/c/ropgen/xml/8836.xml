<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8836.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">run_postproc</name><parameter_list pos:start="1:25" pos:end="1:63">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:55">AVFrame</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:62">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="249:1">{<block_content pos:start="5:5" pos:end="247:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">DDSContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ctx</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:16">x_off</name></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="247:5">switch <condition pos:start="11:12" pos:end="11:26">(<expr pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:15">ctx</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:25">postproc</name></name></expr>)</condition> <block pos:start="11:28" pos:end="247:5">{<block_content pos:start="13:5" pos:end="245:14">

    <case pos:start="13:5" pos:end="13:23">case <expr pos:start="13:10" pos:end="13:22"><name pos:start="13:10" pos:end="13:22">DDS_ALPHA_EXP</name></expr>:</case>

        <comment type="block" pos:start="15:9" pos:end="19:28">/* Alpha-exponential mode divides each channel by the maximum

         * R, G or B value, and stores the multiplying factor in the

         * alpha channel. */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:73"><expr pos:start="21:9" pos:end="21:72"><call pos:start="21:9" pos:end="21:72"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:72">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="21:37" pos:end="21:71"><expr pos:start="21:37" pos:end="21:71"><literal type="string" pos:start="21:37" pos:end="21:71">"Post-processing alpha exponent.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="25:9" pos:end="47:9">for <control pos:start="25:13" pos:end="25:67">(<init pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:18"><name pos:start="25:14" pos:end="25:14">i</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</init> <condition pos:start="25:21" pos:end="25:59"><expr pos:start="25:21" pos:end="25:58"><name pos:start="25:21" pos:end="25:21">i</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <name pos:start="25:25" pos:end="25:42"><name pos:start="25:25" pos:end="25:29">frame</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:39">linesize</name><index pos:start="25:40" pos:end="25:42">[<expr pos:start="25:41" pos:end="25:41"><literal type="number" pos:start="25:41" pos:end="25:41">0</literal></expr>]</index></name> <operator pos:start="25:44" pos:end="25:44">*</operator> <name pos:start="25:46" pos:end="25:58"><name pos:start="25:46" pos:end="25:50">frame</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:58">height</name></name></expr>;</condition> <incr pos:start="25:61" pos:end="25:66"><expr pos:start="25:61" pos:end="25:66"><name pos:start="25:61" pos:end="25:61">i</name> <operator pos:start="25:63" pos:end="25:64">+=</operator> <literal type="number" pos:start="25:66" pos:end="25:66">4</literal></expr></incr>)</control> <block pos:start="25:69" pos:end="47:9">{<block_content pos:start="27:13" pos:end="45:25">

            <decl_stmt pos:start="27:13" pos:end="27:46"><decl pos:start="27:13" pos:end="27:45"><type pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:19">uint8_t</name> <modifier pos:start="27:21" pos:end="27:21">*</modifier></type><name pos:start="27:22" pos:end="27:24">src</name> <init pos:start="27:26" pos:end="27:45">= <expr pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:32">frame</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:38">data</name><index pos:start="27:39" pos:end="27:41">[<expr pos:start="27:40" pos:end="27:40"><literal type="number" pos:start="27:40" pos:end="27:40">0</literal></expr>]</index></name> <operator pos:start="27:43" pos:end="27:43">+</operator> <name pos:start="27:45" pos:end="27:45">i</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="29:13" pos:end="29:27"><decl pos:start="29:13" pos:end="29:26"><type pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">int</name></type> <name pos:start="29:17" pos:end="29:17">r</name> <init pos:start="29:19" pos:end="29:26">= <expr pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:23">src</name><index pos:start="29:24" pos:end="29:26">[<expr pos:start="29:25" pos:end="29:25"><literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:27"><decl pos:start="31:13" pos:end="31:26"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:17">g</name> <init pos:start="31:19" pos:end="31:26">= <expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:23">src</name><index pos:start="31:24" pos:end="31:26">[<expr pos:start="31:25" pos:end="31:25"><literal type="number" pos:start="31:25" pos:end="31:25">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="33:13" pos:end="33:27"><decl pos:start="33:13" pos:end="33:26"><type pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">int</name></type> <name pos:start="33:17" pos:end="33:17">b</name> <init pos:start="33:19" pos:end="33:26">= <expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:23">src</name><index pos:start="33:24" pos:end="33:26">[<expr pos:start="33:25" pos:end="33:25"><literal type="number" pos:start="33:25" pos:end="33:25">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="35:13" pos:end="35:27"><decl pos:start="35:13" pos:end="35:26"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:17">a</name> <init pos:start="35:19" pos:end="35:26">= <expr pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:23">src</name><index pos:start="35:24" pos:end="35:26">[<expr pos:start="35:25" pos:end="35:25"><literal type="number" pos:start="35:25" pos:end="35:25">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:15">src</name><index pos:start="39:16" pos:end="39:18">[<expr pos:start="39:17" pos:end="39:17"><literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>]</index></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:22">r</name> <operator pos:start="39:24" pos:end="39:24">*</operator> <name pos:start="39:26" pos:end="39:26">a</name> <operator pos:start="39:28" pos:end="39:28">/</operator> <literal type="number" pos:start="39:30" pos:end="39:32">255</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:15">src</name><index pos:start="41:16" pos:end="41:18">[<expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>]</index></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:22">g</name> <operator pos:start="41:24" pos:end="41:24">*</operator> <name pos:start="41:26" pos:end="41:26">a</name> <operator pos:start="41:28" pos:end="41:28">/</operator> <literal type="number" pos:start="41:30" pos:end="41:32">255</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:33"><expr pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:18"><name pos:start="43:13" pos:end="43:15">src</name><index pos:start="43:16" pos:end="43:18">[<expr pos:start="43:17" pos:end="43:17"><literal type="number" pos:start="43:17" pos:end="43:17">2</literal></expr>]</index></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:22">b</name> <operator pos:start="43:24" pos:end="43:24">*</operator> <name pos:start="43:26" pos:end="43:26">a</name> <operator pos:start="43:28" pos:end="43:28">/</operator> <literal type="number" pos:start="43:30" pos:end="43:32">255</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:25"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:15">src</name><index pos:start="45:16" pos:end="45:18">[<expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">3</literal></expr>]</index></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:24">255</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:24">case <expr pos:start="51:10" pos:end="51:23"><name pos:start="51:10" pos:end="51:23">DDS_NORMAL_MAP</name></expr>:</case>

        <comment type="block" pos:start="53:9" pos:end="61:66">/* Normal maps work in the XYZ color space and they encode

         * X in R or in A, depending on the texture type, Y in G and

         * derive Z with a square root of the distance.

         *

         * http://www.realtimecollisiondetection.net/blog/?p=28 */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:69"><expr pos:start="63:9" pos:end="63:68"><call pos:start="63:9" pos:end="63:68"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:68">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="63:37" pos:end="63:67"><expr pos:start="63:37" pos:end="63:67"><literal type="string" pos:start="63:37" pos:end="63:67">"Post-processing normal map.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:13">x_off</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <ternary pos:start="67:17" pos:end="67:43"><condition pos:start="67:17" pos:end="67:37"><expr pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:30"><name pos:start="67:17" pos:end="67:19">ctx</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:30">tex_ratio</name></name> <operator pos:start="67:32" pos:end="67:33">==</operator> <literal type="number" pos:start="67:35" pos:end="67:35">8</literal></expr> ?</condition><then pos:start="67:39" pos:end="67:39"> <expr pos:start="67:39" pos:end="67:39"><literal type="number" pos:start="67:39" pos:end="67:39">0</literal></expr> </then><else pos:start="67:41" pos:end="67:43">: <expr pos:start="67:43" pos:end="67:43"><literal type="number" pos:start="67:43" pos:end="67:43">3</literal></expr></else></ternary></expr>;</expr_stmt>

        <for pos:start="69:9" pos:end="97:9">for <control pos:start="69:13" pos:end="69:67">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:59"><expr pos:start="69:21" pos:end="69:58"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <name pos:start="69:25" pos:end="69:42"><name pos:start="69:25" pos:end="69:29">frame</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:39">linesize</name><index pos:start="69:40" pos:end="69:42">[<expr pos:start="69:41" pos:end="69:41"><literal type="number" pos:start="69:41" pos:end="69:41">0</literal></expr>]</index></name> <operator pos:start="69:44" pos:end="69:44">*</operator> <name pos:start="69:46" pos:end="69:58"><name pos:start="69:46" pos:end="69:50">frame</name><operator pos:start="69:51" pos:end="69:52">-&gt;</operator><name pos:start="69:53" pos:end="69:58">height</name></name></expr>;</condition> <incr pos:start="69:61" pos:end="69:66"><expr pos:start="69:61" pos:end="69:66"><name pos:start="69:61" pos:end="69:61">i</name> <operator pos:start="69:63" pos:end="69:64">+=</operator> <literal type="number" pos:start="69:66" pos:end="69:66">4</literal></expr></incr>)</control> <block pos:start="69:69" pos:end="97:9">{<block_content pos:start="71:13" pos:end="95:25">

            <decl_stmt pos:start="71:13" pos:end="71:46"><decl pos:start="71:13" pos:end="71:45"><type pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:19">uint8_t</name> <modifier pos:start="71:21" pos:end="71:21">*</modifier></type><name pos:start="71:22" pos:end="71:24">src</name> <init pos:start="71:26" pos:end="71:45">= <expr pos:start="71:28" pos:end="71:45"><name pos:start="71:28" pos:end="71:41"><name pos:start="71:28" pos:end="71:32">frame</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:38">data</name><index pos:start="71:39" pos:end="71:41">[<expr pos:start="71:40" pos:end="71:40"><literal type="number" pos:start="71:40" pos:end="71:40">0</literal></expr>]</index></name> <operator pos:start="71:43" pos:end="71:43">+</operator> <name pos:start="71:45" pos:end="71:45">i</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:31"><decl pos:start="73:13" pos:end="73:30"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:17">x</name> <init pos:start="73:19" pos:end="73:30">= <expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:23">src</name><index pos:start="73:24" pos:end="73:30">[<expr pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:29">x_off</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="75:13" pos:end="75:27"><decl pos:start="75:13" pos:end="75:26"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:17">y</name> <init pos:start="75:19" pos:end="75:26">= <expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:23">src</name><index pos:start="75:24" pos:end="75:26">[<expr pos:start="75:25" pos:end="75:25"><literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:24"><decl pos:start="77:13" pos:end="77:23"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:17">z</name> <init pos:start="77:19" pos:end="77:23">= <expr pos:start="77:21" pos:end="77:23"><literal type="number" pos:start="77:21" pos:end="77:23">127</literal></expr></init></decl>;</decl_stmt>



            <decl_stmt pos:start="81:13" pos:end="81:52"><decl pos:start="81:13" pos:end="81:51"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:17">d</name> <init pos:start="81:19" pos:end="81:51">= <expr pos:start="81:21" pos:end="81:51"><operator pos:start="81:21" pos:end="81:21">(</operator><literal type="number" pos:start="81:22" pos:end="81:24">255</literal> <operator pos:start="81:26" pos:end="81:26">*</operator> <literal type="number" pos:start="81:28" pos:end="81:32">255</literal> <operator pos:start="81:32" pos:end="81:32">-</operator> <name pos:start="81:34" pos:end="81:34">x</name> <operator pos:start="81:36" pos:end="81:36">*</operator> <name pos:start="81:38" pos:end="81:38">x</name> <operator pos:start="81:40" pos:end="81:40">-</operator> <name pos:start="81:42" pos:end="81:42">y</name> <operator pos:start="81:44" pos:end="81:44">*</operator> <name pos:start="81:46" pos:end="81:46">y</name><operator pos:start="81:47" pos:end="81:47">)</operator> <operator pos:start="81:49" pos:end="81:49">/</operator> <literal type="number" pos:start="81:51" pos:end="81:51">2</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="83:13" pos:end="85:35"><if pos:start="83:13" pos:end="85:35">if <condition pos:start="83:16" pos:end="83:22">(<expr pos:start="83:17" pos:end="83:21"><name pos:start="83:17" pos:end="83:17">d</name> <operator pos:start="83:19" pos:end="83:19">&gt;</operator> <literal type="number" pos:start="83:21" pos:end="83:21">0</literal></expr>)</condition><block type="pseudo" pos:start="85:17" pos:end="85:35"><block_content pos:start="85:17" pos:end="85:35">

                <expr_stmt pos:start="85:17" pos:end="85:35"><expr pos:start="85:17" pos:end="85:34"><name pos:start="85:17" pos:end="85:17">z</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:34"><name pos:start="85:21" pos:end="85:24">rint</name><argument_list pos:start="85:25" pos:end="85:34">(<argument pos:start="85:26" pos:end="85:33"><expr pos:start="85:26" pos:end="85:33"><call pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:30">sqrtf</name><argument_list pos:start="85:31" pos:end="85:33">(<argument pos:start="85:32" pos:end="85:32"><expr pos:start="85:32" pos:end="85:32"><name pos:start="85:32" pos:end="85:32">d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:23"><expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:18"><name pos:start="89:13" pos:end="89:15">src</name><index pos:start="89:16" pos:end="89:18">[<expr pos:start="89:17" pos:end="89:17"><literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr>]</index></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:22">x</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:23"><expr pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:15">src</name><index pos:start="91:16" pos:end="91:18">[<expr pos:start="91:17" pos:end="91:17"><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>]</index></name> <operator pos:start="91:20" pos:end="91:20">=</operator> <name pos:start="91:22" pos:end="91:22">y</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:23"><expr pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:15">src</name><index pos:start="93:16" pos:end="93:18">[<expr pos:start="93:17" pos:end="93:17"><literal type="number" pos:start="93:17" pos:end="93:17">2</literal></expr>]</index></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:22">z</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:25"><expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:18"><name pos:start="95:13" pos:end="95:15">src</name><index pos:start="95:16" pos:end="95:18">[<expr pos:start="95:17" pos:end="95:17"><literal type="number" pos:start="95:17" pos:end="95:17">3</literal></expr>]</index></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <literal type="number" pos:start="95:22" pos:end="95:24">255</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:23">case <expr pos:start="101:10" pos:end="101:22"><name pos:start="101:10" pos:end="101:22">DDS_RAW_YCOCG</name></expr>:</case>

        <comment type="block" pos:start="103:9" pos:end="105:53">/* Data is Y-Co-Cg-A and not RGBA, but they are represented

         * with the same masks in the DDPF header. */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:68"><expr pos:start="107:9" pos:end="107:67"><call pos:start="107:9" pos:end="107:67"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="107:67">(<argument pos:start="107:16" pos:end="107:20"><expr pos:start="107:16" pos:end="107:20"><name pos:start="107:16" pos:end="107:20">avctx</name></expr></argument>, <argument pos:start="107:23" pos:end="107:34"><expr pos:start="107:23" pos:end="107:34"><name pos:start="107:23" pos:end="107:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="107:37" pos:end="107:66"><expr pos:start="107:37" pos:end="107:66"><literal type="string" pos:start="107:37" pos:end="107:66">"Post-processing raw YCoCg.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="111:9" pos:end="133:9">for <control pos:start="111:13" pos:end="111:67">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:59"><expr pos:start="111:21" pos:end="111:58"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <name pos:start="111:25" pos:end="111:42"><name pos:start="111:25" pos:end="111:29">frame</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:39">linesize</name><index pos:start="111:40" pos:end="111:42">[<expr pos:start="111:41" pos:end="111:41"><literal type="number" pos:start="111:41" pos:end="111:41">0</literal></expr>]</index></name> <operator pos:start="111:44" pos:end="111:44">*</operator> <name pos:start="111:46" pos:end="111:58"><name pos:start="111:46" pos:end="111:50">frame</name><operator pos:start="111:51" pos:end="111:52">-&gt;</operator><name pos:start="111:53" pos:end="111:58">height</name></name></expr>;</condition> <incr pos:start="111:61" pos:end="111:66"><expr pos:start="111:61" pos:end="111:66"><name pos:start="111:61" pos:end="111:61">i</name> <operator pos:start="111:63" pos:end="111:64">+=</operator> <literal type="number" pos:start="111:66" pos:end="111:66">4</literal></expr></incr>)</control> <block pos:start="111:69" pos:end="133:9">{<block_content pos:start="113:13" pos:end="131:23">

            <decl_stmt pos:start="113:13" pos:end="113:46"><decl pos:start="113:13" pos:end="113:45"><type pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:19">uint8_t</name> <modifier pos:start="113:21" pos:end="113:21">*</modifier></type><name pos:start="113:22" pos:end="113:24">src</name> <init pos:start="113:26" pos:end="113:45">= <expr pos:start="113:28" pos:end="113:45"><name pos:start="113:28" pos:end="113:41"><name pos:start="113:28" pos:end="113:32">frame</name><operator pos:start="113:33" pos:end="113:34">-&gt;</operator><name pos:start="113:35" pos:end="113:38">data</name><index pos:start="113:39" pos:end="113:41">[<expr pos:start="113:40" pos:end="113:40"><literal type="number" pos:start="113:40" pos:end="113:40">0</literal></expr>]</index></name> <operator pos:start="113:43" pos:end="113:43">+</operator> <name pos:start="113:45" pos:end="113:45">i</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="115:13" pos:end="115:28"><decl pos:start="115:13" pos:end="115:27"><type pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:15">int</name></type> <name pos:start="115:17" pos:end="115:17">a</name>  <init pos:start="115:20" pos:end="115:27">= <expr pos:start="115:22" pos:end="115:27"><name pos:start="115:22" pos:end="115:27"><name pos:start="115:22" pos:end="115:24">src</name><index pos:start="115:25" pos:end="115:27">[<expr pos:start="115:26" pos:end="115:26"><literal type="number" pos:start="115:26" pos:end="115:26">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:34"><decl pos:start="117:13" pos:end="117:33"><type pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:15">int</name></type> <name pos:start="117:17" pos:end="117:18">cg</name> <init pos:start="117:20" pos:end="117:33">= <expr pos:start="117:22" pos:end="117:33"><name pos:start="117:22" pos:end="117:27"><name pos:start="117:22" pos:end="117:24">src</name><index pos:start="117:25" pos:end="117:27">[<expr pos:start="117:26" pos:end="117:26"><literal type="number" pos:start="117:26" pos:end="117:26">1</literal></expr>]</index></name> <operator pos:start="117:29" pos:end="117:29">-</operator> <literal type="number" pos:start="117:31" pos:end="117:33">128</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:34"><decl pos:start="119:13" pos:end="119:33"><type pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">int</name></type> <name pos:start="119:17" pos:end="119:18">co</name> <init pos:start="119:20" pos:end="119:33">= <expr pos:start="119:22" pos:end="119:33"><name pos:start="119:22" pos:end="119:27"><name pos:start="119:22" pos:end="119:24">src</name><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><literal type="number" pos:start="119:26" pos:end="119:26">2</literal></expr>]</index></name> <operator pos:start="119:29" pos:end="119:29">-</operator> <literal type="number" pos:start="119:31" pos:end="119:33">128</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="121:13" pos:end="121:28"><decl pos:start="121:13" pos:end="121:27"><type pos:start="121:13" pos:end="121:15"><name pos:start="121:13" pos:end="121:15">int</name></type> <name pos:start="121:17" pos:end="121:17">y</name>  <init pos:start="121:20" pos:end="121:27">= <expr pos:start="121:22" pos:end="121:27"><name pos:start="121:22" pos:end="121:27"><name pos:start="121:22" pos:end="121:24">src</name><index pos:start="121:25" pos:end="121:27">[<expr pos:start="121:26" pos:end="121:26"><literal type="number" pos:start="121:26" pos:end="121:26">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:48"><expr pos:start="125:13" pos:end="125:47"><name pos:start="125:13" pos:end="125:18"><name pos:start="125:13" pos:end="125:15">src</name><index pos:start="125:16" pos:end="125:18">[<expr pos:start="125:17" pos:end="125:17"><literal type="number" pos:start="125:17" pos:end="125:17">0</literal></expr>]</index></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:47"><name pos:start="125:22" pos:end="125:34">av_clip_uint8</name><argument_list pos:start="125:35" pos:end="125:47">(<argument pos:start="125:36" pos:end="125:46"><expr pos:start="125:36" pos:end="125:46"><name pos:start="125:36" pos:end="125:36">y</name> <operator pos:start="125:38" pos:end="125:38">+</operator> <name pos:start="125:40" pos:end="125:41">co</name> <operator pos:start="125:43" pos:end="125:43">-</operator> <name pos:start="125:45" pos:end="125:46">cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:43"><expr pos:start="127:13" pos:end="127:42"><name pos:start="127:13" pos:end="127:18"><name pos:start="127:13" pos:end="127:15">src</name><index pos:start="127:16" pos:end="127:18">[<expr pos:start="127:17" pos:end="127:17"><literal type="number" pos:start="127:17" pos:end="127:17">1</literal></expr>]</index></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:42"><name pos:start="127:22" pos:end="127:34">av_clip_uint8</name><argument_list pos:start="127:35" pos:end="127:42">(<argument pos:start="127:36" pos:end="127:41"><expr pos:start="127:36" pos:end="127:41"><name pos:start="127:36" pos:end="127:36">y</name> <operator pos:start="127:38" pos:end="127:38">+</operator> <name pos:start="127:40" pos:end="127:41">cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:48"><expr pos:start="129:13" pos:end="129:47"><name pos:start="129:13" pos:end="129:18"><name pos:start="129:13" pos:end="129:15">src</name><index pos:start="129:16" pos:end="129:18">[<expr pos:start="129:17" pos:end="129:17"><literal type="number" pos:start="129:17" pos:end="129:17">2</literal></expr>]</index></name> <operator pos:start="129:20" pos:end="129:20">=</operator> <call pos:start="129:22" pos:end="129:47"><name pos:start="129:22" pos:end="129:34">av_clip_uint8</name><argument_list pos:start="129:35" pos:end="129:47">(<argument pos:start="129:36" pos:end="129:46"><expr pos:start="129:36" pos:end="129:46"><name pos:start="129:36" pos:end="129:36">y</name> <operator pos:start="129:38" pos:end="129:38">-</operator> <name pos:start="129:40" pos:end="129:41">co</name> <operator pos:start="129:43" pos:end="129:43">-</operator> <name pos:start="129:45" pos:end="129:46">cg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:23"><expr pos:start="131:13" pos:end="131:22"><name pos:start="131:13" pos:end="131:18"><name pos:start="131:13" pos:end="131:15">src</name><index pos:start="131:16" pos:end="131:18">[<expr pos:start="131:17" pos:end="131:17"><literal type="number" pos:start="131:17" pos:end="131:17">3</literal></expr>]</index></name> <operator pos:start="131:20" pos:end="131:20">=</operator> <name pos:start="131:22" pos:end="131:22">a</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:24">case <expr pos:start="137:10" pos:end="137:23"><name pos:start="137:10" pos:end="137:23">DDS_SWAP_ALPHA</name></expr>:</case>

        <comment type="block" pos:start="139:9" pos:end="139:48">/* Alpha and Luma are stored swapped. */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:77"><expr pos:start="141:9" pos:end="141:76"><call pos:start="141:9" pos:end="141:76"><name pos:start="141:9" pos:end="141:14">av_log</name><argument_list pos:start="141:15" pos:end="141:76">(<argument pos:start="141:16" pos:end="141:20"><expr pos:start="141:16" pos:end="141:20"><name pos:start="141:16" pos:end="141:20">avctx</name></expr></argument>, <argument pos:start="141:23" pos:end="141:34"><expr pos:start="141:23" pos:end="141:34"><name pos:start="141:23" pos:end="141:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="141:37" pos:end="141:75"><expr pos:start="141:37" pos:end="141:75"><literal type="string" pos:start="141:37" pos:end="141:75">"Post-processing swapped Luma/Alpha.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="145:9" pos:end="151:9">for <control pos:start="145:13" pos:end="145:67">(<init pos:start="145:14" pos:end="145:19"><expr pos:start="145:14" pos:end="145:18"><name pos:start="145:14" pos:end="145:14">i</name> <operator pos:start="145:16" pos:end="145:16">=</operator> <literal type="number" pos:start="145:18" pos:end="145:18">0</literal></expr>;</init> <condition pos:start="145:21" pos:end="145:59"><expr pos:start="145:21" pos:end="145:58"><name pos:start="145:21" pos:end="145:21">i</name> <operator pos:start="145:23" pos:end="145:23">&lt;</operator> <name pos:start="145:25" pos:end="145:42"><name pos:start="145:25" pos:end="145:29">frame</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:39">linesize</name><index pos:start="145:40" pos:end="145:42">[<expr pos:start="145:41" pos:end="145:41"><literal type="number" pos:start="145:41" pos:end="145:41">0</literal></expr>]</index></name> <operator pos:start="145:44" pos:end="145:44">*</operator> <name pos:start="145:46" pos:end="145:58"><name pos:start="145:46" pos:end="145:50">frame</name><operator pos:start="145:51" pos:end="145:52">-&gt;</operator><name pos:start="145:53" pos:end="145:58">height</name></name></expr>;</condition> <incr pos:start="145:61" pos:end="145:66"><expr pos:start="145:61" pos:end="145:66"><name pos:start="145:61" pos:end="145:61">i</name> <operator pos:start="145:63" pos:end="145:64">+=</operator> <literal type="number" pos:start="145:66" pos:end="145:66">2</literal></expr></incr>)</control> <block pos:start="145:69" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:44">

            <decl_stmt pos:start="147:13" pos:end="147:46"><decl pos:start="147:13" pos:end="147:45"><type pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:19">uint8_t</name> <modifier pos:start="147:21" pos:end="147:21">*</modifier></type><name pos:start="147:22" pos:end="147:24">src</name> <init pos:start="147:26" pos:end="147:45">= <expr pos:start="147:28" pos:end="147:45"><name pos:start="147:28" pos:end="147:41"><name pos:start="147:28" pos:end="147:32">frame</name><operator pos:start="147:33" pos:end="147:34">-&gt;</operator><name pos:start="147:35" pos:end="147:38">data</name><index pos:start="147:39" pos:end="147:41">[<expr pos:start="147:40" pos:end="147:40"><literal type="number" pos:start="147:40" pos:end="147:40">0</literal></expr>]</index></name> <operator pos:start="147:43" pos:end="147:43">+</operator> <name pos:start="147:45" pos:end="147:45">i</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:44"><expr pos:start="149:13" pos:end="149:43"><call pos:start="149:13" pos:end="149:43"><name pos:start="149:13" pos:end="149:18">FFSWAP</name><argument_list pos:start="149:19" pos:end="149:43">(<argument pos:start="149:20" pos:end="149:26"><expr pos:start="149:20" pos:end="149:26"><name pos:start="149:20" pos:end="149:26">uint8_t</name></expr></argument>, <argument pos:start="149:29" pos:end="149:34"><expr pos:start="149:29" pos:end="149:34"><name pos:start="149:29" pos:end="149:34"><name pos:start="149:29" pos:end="149:31">src</name><index pos:start="149:32" pos:end="149:34">[<expr pos:start="149:33" pos:end="149:33"><literal type="number" pos:start="149:33" pos:end="149:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:37" pos:end="149:42"><expr pos:start="149:37" pos:end="149:42"><name pos:start="149:37" pos:end="149:42"><name pos:start="149:37" pos:end="149:39">src</name><index pos:start="149:40" pos:end="149:42">[<expr pos:start="149:41" pos:end="149:41"><literal type="number" pos:start="149:41" pos:end="149:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:26">case <expr pos:start="155:10" pos:end="155:25"><name pos:start="155:10" pos:end="155:25">DDS_SWIZZLE_A2XY</name></expr>:</case>

        <comment type="block" pos:start="157:9" pos:end="157:67">/* Swap R and G, often used to restore a standard RGTC2. */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:71"><expr pos:start="159:9" pos:end="159:70"><call pos:start="159:9" pos:end="159:70"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="159:70">(<argument pos:start="159:16" pos:end="159:20"><expr pos:start="159:16" pos:end="159:20"><name pos:start="159:16" pos:end="159:20">avctx</name></expr></argument>, <argument pos:start="159:23" pos:end="159:34"><expr pos:start="159:23" pos:end="159:34"><name pos:start="159:23" pos:end="159:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="159:37" pos:end="159:69"><expr pos:start="159:37" pos:end="159:69"><literal type="string" pos:start="159:37" pos:end="159:69">"Post-processing A2XY swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><call pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:18">do_swizzle</name><argument_list pos:start="161:19" pos:end="161:31">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">frame</name></expr></argument>, <argument pos:start="161:27" pos:end="161:27"><expr pos:start="161:27" pos:end="161:27"><literal type="number" pos:start="161:27" pos:end="161:27">0</literal></expr></argument>, <argument pos:start="161:30" pos:end="161:30"><expr pos:start="161:30" pos:end="161:30"><literal type="number" pos:start="161:30" pos:end="161:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:26">case <expr pos:start="165:10" pos:end="165:25"><name pos:start="165:10" pos:end="165:25">DDS_SWIZZLE_RBXG</name></expr>:</case>

        <comment type="block" pos:start="167:9" pos:end="167:49">/* Swap G and A, then B and new A (G). */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:71"><expr pos:start="169:9" pos:end="169:70"><call pos:start="169:9" pos:end="169:70"><name pos:start="169:9" pos:end="169:14">av_log</name><argument_list pos:start="169:15" pos:end="169:70">(<argument pos:start="169:16" pos:end="169:20"><expr pos:start="169:16" pos:end="169:20"><name pos:start="169:16" pos:end="169:20">avctx</name></expr></argument>, <argument pos:start="169:23" pos:end="169:34"><expr pos:start="169:23" pos:end="169:34"><name pos:start="169:23" pos:end="169:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="169:37" pos:end="169:69"><expr pos:start="169:37" pos:end="169:69"><literal type="string" pos:start="169:37" pos:end="169:69">"Post-processing RBXG swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:32"><expr pos:start="171:9" pos:end="171:31"><call pos:start="171:9" pos:end="171:31"><name pos:start="171:9" pos:end="171:18">do_swizzle</name><argument_list pos:start="171:19" pos:end="171:31">(<argument pos:start="171:20" pos:end="171:24"><expr pos:start="171:20" pos:end="171:24"><name pos:start="171:20" pos:end="171:24">frame</name></expr></argument>, <argument pos:start="171:27" pos:end="171:27"><expr pos:start="171:27" pos:end="171:27"><literal type="number" pos:start="171:27" pos:end="171:27">1</literal></expr></argument>, <argument pos:start="171:30" pos:end="171:30"><expr pos:start="171:30" pos:end="171:30"><literal type="number" pos:start="171:30" pos:end="171:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:32"><expr pos:start="173:9" pos:end="173:31"><call pos:start="173:9" pos:end="173:31"><name pos:start="173:9" pos:end="173:18">do_swizzle</name><argument_list pos:start="173:19" pos:end="173:31">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">frame</name></expr></argument>, <argument pos:start="173:27" pos:end="173:27"><expr pos:start="173:27" pos:end="173:27"><literal type="number" pos:start="173:27" pos:end="173:27">2</literal></expr></argument>, <argument pos:start="173:30" pos:end="173:30"><expr pos:start="173:30" pos:end="173:30"><literal type="number" pos:start="173:30" pos:end="173:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:26">case <expr pos:start="177:10" pos:end="177:25"><name pos:start="177:10" pos:end="177:25">DDS_SWIZZLE_RGXB</name></expr>:</case>

        <comment type="block" pos:start="179:9" pos:end="179:27">/* Swap B and A. */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:71"><expr pos:start="181:9" pos:end="181:70"><call pos:start="181:9" pos:end="181:70"><name pos:start="181:9" pos:end="181:14">av_log</name><argument_list pos:start="181:15" pos:end="181:70">(<argument pos:start="181:16" pos:end="181:20"><expr pos:start="181:16" pos:end="181:20"><name pos:start="181:16" pos:end="181:20">avctx</name></expr></argument>, <argument pos:start="181:23" pos:end="181:34"><expr pos:start="181:23" pos:end="181:34"><name pos:start="181:23" pos:end="181:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="181:37" pos:end="181:69"><expr pos:start="181:37" pos:end="181:69"><literal type="string" pos:start="181:37" pos:end="181:69">"Post-processing RGXB swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:32"><expr pos:start="183:9" pos:end="183:31"><call pos:start="183:9" pos:end="183:31"><name pos:start="183:9" pos:end="183:18">do_swizzle</name><argument_list pos:start="183:19" pos:end="183:31">(<argument pos:start="183:20" pos:end="183:24"><expr pos:start="183:20" pos:end="183:24"><name pos:start="183:20" pos:end="183:24">frame</name></expr></argument>, <argument pos:start="183:27" pos:end="183:27"><expr pos:start="183:27" pos:end="183:27"><literal type="number" pos:start="183:27" pos:end="183:27">2</literal></expr></argument>, <argument pos:start="183:30" pos:end="183:30"><expr pos:start="183:30" pos:end="183:30"><literal type="number" pos:start="183:30" pos:end="183:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    <case pos:start="187:5" pos:end="187:26">case <expr pos:start="187:10" pos:end="187:25"><name pos:start="187:10" pos:end="187:25">DDS_SWIZZLE_RXBG</name></expr>:</case>

        <comment type="block" pos:start="189:9" pos:end="189:27">/* Swap G and A. */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:71"><expr pos:start="191:9" pos:end="191:70"><call pos:start="191:9" pos:end="191:70"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:70">(<argument pos:start="191:16" pos:end="191:20"><expr pos:start="191:16" pos:end="191:20"><name pos:start="191:16" pos:end="191:20">avctx</name></expr></argument>, <argument pos:start="191:23" pos:end="191:34"><expr pos:start="191:23" pos:end="191:34"><name pos:start="191:23" pos:end="191:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="191:37" pos:end="191:69"><expr pos:start="191:37" pos:end="191:69"><literal type="string" pos:start="191:37" pos:end="191:69">"Post-processing RXBG swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:32"><expr pos:start="193:9" pos:end="193:31"><call pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:18">do_swizzle</name><argument_list pos:start="193:19" pos:end="193:31">(<argument pos:start="193:20" pos:end="193:24"><expr pos:start="193:20" pos:end="193:24"><name pos:start="193:20" pos:end="193:24">frame</name></expr></argument>, <argument pos:start="193:27" pos:end="193:27"><expr pos:start="193:27" pos:end="193:27"><literal type="number" pos:start="193:27" pos:end="193:27">1</literal></expr></argument>, <argument pos:start="193:30" pos:end="193:30"><expr pos:start="193:30" pos:end="193:30"><literal type="number" pos:start="193:30" pos:end="193:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    <case pos:start="197:5" pos:end="197:26">case <expr pos:start="197:10" pos:end="197:25"><name pos:start="197:10" pos:end="197:25">DDS_SWIZZLE_RXGB</name></expr>:</case>

        <comment type="block" pos:start="199:9" pos:end="199:45">/* Swap R and A (misleading name). */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:71"><expr pos:start="201:9" pos:end="201:70"><call pos:start="201:9" pos:end="201:70"><name pos:start="201:9" pos:end="201:14">av_log</name><argument_list pos:start="201:15" pos:end="201:70">(<argument pos:start="201:16" pos:end="201:20"><expr pos:start="201:16" pos:end="201:20"><name pos:start="201:16" pos:end="201:20">avctx</name></expr></argument>, <argument pos:start="201:23" pos:end="201:34"><expr pos:start="201:23" pos:end="201:34"><name pos:start="201:23" pos:end="201:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="201:37" pos:end="201:69"><expr pos:start="201:37" pos:end="201:69"><literal type="string" pos:start="201:37" pos:end="201:69">"Post-processing RXGB swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:32"><expr pos:start="203:9" pos:end="203:31"><call pos:start="203:9" pos:end="203:31"><name pos:start="203:9" pos:end="203:18">do_swizzle</name><argument_list pos:start="203:19" pos:end="203:31">(<argument pos:start="203:20" pos:end="203:24"><expr pos:start="203:20" pos:end="203:24"><name pos:start="203:20" pos:end="203:24">frame</name></expr></argument>, <argument pos:start="203:27" pos:end="203:27"><expr pos:start="203:27" pos:end="203:27"><literal type="number" pos:start="203:27" pos:end="203:27">0</literal></expr></argument>, <argument pos:start="203:30" pos:end="203:30"><expr pos:start="203:30" pos:end="203:30"><literal type="number" pos:start="203:30" pos:end="203:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="205:9" pos:end="205:14">break;</break>

    <case pos:start="207:5" pos:end="207:26">case <expr pos:start="207:10" pos:end="207:25"><name pos:start="207:10" pos:end="207:25">DDS_SWIZZLE_XGBR</name></expr>:</case>

        <comment type="block" pos:start="209:9" pos:end="209:49">/* Swap B and A, then R and new A (B). */</comment>

        <expr_stmt pos:start="211:9" pos:end="211:71"><expr pos:start="211:9" pos:end="211:70"><call pos:start="211:9" pos:end="211:70"><name pos:start="211:9" pos:end="211:14">av_log</name><argument_list pos:start="211:15" pos:end="211:70">(<argument pos:start="211:16" pos:end="211:20"><expr pos:start="211:16" pos:end="211:20"><name pos:start="211:16" pos:end="211:20">avctx</name></expr></argument>, <argument pos:start="211:23" pos:end="211:34"><expr pos:start="211:23" pos:end="211:34"><name pos:start="211:23" pos:end="211:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="211:37" pos:end="211:69"><expr pos:start="211:37" pos:end="211:69"><literal type="string" pos:start="211:37" pos:end="211:69">"Post-processing XGBR swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:32"><expr pos:start="213:9" pos:end="213:31"><call pos:start="213:9" pos:end="213:31"><name pos:start="213:9" pos:end="213:18">do_swizzle</name><argument_list pos:start="213:19" pos:end="213:31">(<argument pos:start="213:20" pos:end="213:24"><expr pos:start="213:20" pos:end="213:24"><name pos:start="213:20" pos:end="213:24">frame</name></expr></argument>, <argument pos:start="213:27" pos:end="213:27"><expr pos:start="213:27" pos:end="213:27"><literal type="number" pos:start="213:27" pos:end="213:27">2</literal></expr></argument>, <argument pos:start="213:30" pos:end="213:30"><expr pos:start="213:30" pos:end="213:30"><literal type="number" pos:start="213:30" pos:end="213:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:32"><expr pos:start="215:9" pos:end="215:31"><call pos:start="215:9" pos:end="215:31"><name pos:start="215:9" pos:end="215:18">do_swizzle</name><argument_list pos:start="215:19" pos:end="215:31">(<argument pos:start="215:20" pos:end="215:24"><expr pos:start="215:20" pos:end="215:24"><name pos:start="215:20" pos:end="215:24">frame</name></expr></argument>, <argument pos:start="215:27" pos:end="215:27"><expr pos:start="215:27" pos:end="215:27"><literal type="number" pos:start="215:27" pos:end="215:27">0</literal></expr></argument>, <argument pos:start="215:30" pos:end="215:30"><expr pos:start="215:30" pos:end="215:30"><literal type="number" pos:start="215:30" pos:end="215:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="217:9" pos:end="217:14">break;</break>

    <case pos:start="219:5" pos:end="219:26">case <expr pos:start="219:10" pos:end="219:25"><name pos:start="219:10" pos:end="219:25">DDS_SWIZZLE_XGXR</name></expr>:</case>

        <comment type="block" pos:start="221:9" pos:end="223:58">/* Swap G and A, then R and new A (G), then new R (G) and new G (A).

         * This variant does not store any B component. */</comment>

        <expr_stmt pos:start="225:9" pos:end="225:71"><expr pos:start="225:9" pos:end="225:70"><call pos:start="225:9" pos:end="225:70"><name pos:start="225:9" pos:end="225:14">av_log</name><argument_list pos:start="225:15" pos:end="225:70">(<argument pos:start="225:16" pos:end="225:20"><expr pos:start="225:16" pos:end="225:20"><name pos:start="225:16" pos:end="225:20">avctx</name></expr></argument>, <argument pos:start="225:23" pos:end="225:34"><expr pos:start="225:23" pos:end="225:34"><name pos:start="225:23" pos:end="225:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="225:37" pos:end="225:69"><expr pos:start="225:37" pos:end="225:69"><literal type="string" pos:start="225:37" pos:end="225:69">"Post-processing XGXR swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:32"><expr pos:start="227:9" pos:end="227:31"><call pos:start="227:9" pos:end="227:31"><name pos:start="227:9" pos:end="227:18">do_swizzle</name><argument_list pos:start="227:19" pos:end="227:31">(<argument pos:start="227:20" pos:end="227:24"><expr pos:start="227:20" pos:end="227:24"><name pos:start="227:20" pos:end="227:24">frame</name></expr></argument>, <argument pos:start="227:27" pos:end="227:27"><expr pos:start="227:27" pos:end="227:27"><literal type="number" pos:start="227:27" pos:end="227:27">1</literal></expr></argument>, <argument pos:start="227:30" pos:end="227:30"><expr pos:start="227:30" pos:end="227:30"><literal type="number" pos:start="227:30" pos:end="227:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:32"><expr pos:start="229:9" pos:end="229:31"><call pos:start="229:9" pos:end="229:31"><name pos:start="229:9" pos:end="229:18">do_swizzle</name><argument_list pos:start="229:19" pos:end="229:31">(<argument pos:start="229:20" pos:end="229:24"><expr pos:start="229:20" pos:end="229:24"><name pos:start="229:20" pos:end="229:24">frame</name></expr></argument>, <argument pos:start="229:27" pos:end="229:27"><expr pos:start="229:27" pos:end="229:27"><literal type="number" pos:start="229:27" pos:end="229:27">0</literal></expr></argument>, <argument pos:start="229:30" pos:end="229:30"><expr pos:start="229:30" pos:end="229:30"><literal type="number" pos:start="229:30" pos:end="229:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:32"><expr pos:start="231:9" pos:end="231:31"><call pos:start="231:9" pos:end="231:31"><name pos:start="231:9" pos:end="231:18">do_swizzle</name><argument_list pos:start="231:19" pos:end="231:31">(<argument pos:start="231:20" pos:end="231:24"><expr pos:start="231:20" pos:end="231:24"><name pos:start="231:20" pos:end="231:24">frame</name></expr></argument>, <argument pos:start="231:27" pos:end="231:27"><expr pos:start="231:27" pos:end="231:27"><literal type="number" pos:start="231:27" pos:end="231:27">0</literal></expr></argument>, <argument pos:start="231:30" pos:end="231:30"><expr pos:start="231:30" pos:end="231:30"><literal type="number" pos:start="231:30" pos:end="231:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:26">case <expr pos:start="235:10" pos:end="235:25"><name pos:start="235:10" pos:end="235:25">DDS_SWIZZLE_XRBG</name></expr>:</case>

        <comment type="block" pos:start="237:9" pos:end="237:49">/* Swap G and A, then R and new A (G). */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:71"><expr pos:start="239:9" pos:end="239:70"><call pos:start="239:9" pos:end="239:70"><name pos:start="239:9" pos:end="239:14">av_log</name><argument_list pos:start="239:15" pos:end="239:70">(<argument pos:start="239:16" pos:end="239:20"><expr pos:start="239:16" pos:end="239:20"><name pos:start="239:16" pos:end="239:20">avctx</name></expr></argument>, <argument pos:start="239:23" pos:end="239:34"><expr pos:start="239:23" pos:end="239:34"><name pos:start="239:23" pos:end="239:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="239:37" pos:end="239:69"><expr pos:start="239:37" pos:end="239:69"><literal type="string" pos:start="239:37" pos:end="239:69">"Post-processing XRBG swizzle.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:32"><expr pos:start="241:9" pos:end="241:31"><call pos:start="241:9" pos:end="241:31"><name pos:start="241:9" pos:end="241:18">do_swizzle</name><argument_list pos:start="241:19" pos:end="241:31">(<argument pos:start="241:20" pos:end="241:24"><expr pos:start="241:20" pos:end="241:24"><name pos:start="241:20" pos:end="241:24">frame</name></expr></argument>, <argument pos:start="241:27" pos:end="241:27"><expr pos:start="241:27" pos:end="241:27"><literal type="number" pos:start="241:27" pos:end="241:27">1</literal></expr></argument>, <argument pos:start="241:30" pos:end="241:30"><expr pos:start="241:30" pos:end="241:30"><literal type="number" pos:start="241:30" pos:end="241:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:32"><expr pos:start="243:9" pos:end="243:31"><call pos:start="243:9" pos:end="243:31"><name pos:start="243:9" pos:end="243:18">do_swizzle</name><argument_list pos:start="243:19" pos:end="243:31">(<argument pos:start="243:20" pos:end="243:24"><expr pos:start="243:20" pos:end="243:24"><name pos:start="243:20" pos:end="243:24">frame</name></expr></argument>, <argument pos:start="243:27" pos:end="243:27"><expr pos:start="243:27" pos:end="243:27"><literal type="number" pos:start="243:27" pos:end="243:27">0</literal></expr></argument>, <argument pos:start="243:30" pos:end="243:30"><expr pos:start="243:30" pos:end="243:30"><literal type="number" pos:start="243:30" pos:end="243:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="245:9" pos:end="245:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
