<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21798.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:14">zipl_load</name><parameter_list pos:start="1:15" pos:end="1:20">(<parameter pos:start="1:16" pos:end="1:19"><decl pos:start="1:16" pos:end="1:19"><type pos:start="1:16" pos:end="1:19"><name pos:start="1:16" pos:end="1:19">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:50">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">ScsiMbr</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">mbr</name> <init pos:start="5:18" pos:end="5:30">= <expr pos:start="5:20" pos:end="5:30"><operator pos:start="5:20" pos:end="5:20">(</operator><name pos:start="5:21" pos:end="5:24">void</name> <operator pos:start="5:26" pos:end="5:26">*</operator><operator pos:start="5:27" pos:end="5:27">)</operator><name pos:start="5:28" pos:end="5:30">sec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">LDL_VTOC</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">vlbl</name> <init pos:start="7:20" pos:end="7:32">= <expr pos:start="7:22" pos:end="7:32"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:26">void</name> <operator pos:start="7:28" pos:end="7:28">*</operator><operator pos:start="7:29" pos:end="7:29">)</operator><name pos:start="7:30" pos:end="7:32">sec</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:22">/* Grab the MBR */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><call pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:10">memset</name><argument_list pos:start="13:11" pos:end="13:47">(<argument pos:start="13:12" pos:end="13:14"><expr pos:start="13:12" pos:end="13:14"><name pos:start="13:12" pos:end="13:14">sec</name></expr></argument>, <argument pos:start="13:17" pos:end="13:33"><expr pos:start="13:17" pos:end="13:33"><name pos:start="13:17" pos:end="13:33">FREE_SPACE_FILLER</name></expr></argument>, <argument pos:start="13:36" pos:end="13:46"><expr pos:start="13:36" pos:end="13:46"><sizeof pos:start="13:36" pos:end="13:46">sizeof<argument_list pos:start="13:42" pos:end="13:46">(<argument pos:start="13:43" pos:end="13:45"><expr pos:start="13:43" pos:end="13:45"><name pos:start="13:43" pos:end="13:45">sec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:46"><expr pos:start="15:5" pos:end="15:45"><call pos:start="15:5" pos:end="15:45"><name pos:start="15:5" pos:end="15:14">read_block</name><argument_list pos:start="15:15" pos:end="15:45">(<argument pos:start="15:16" pos:end="15:16"><expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr></argument>, <argument pos:start="15:19" pos:end="15:21"><expr pos:start="15:19" pos:end="15:21"><name pos:start="15:19" pos:end="15:21">mbr</name></expr></argument>, <argument pos:start="15:24" pos:end="15:44"><expr pos:start="15:24" pos:end="15:44"><literal type="string" pos:start="15:24" pos:end="15:44">"Cannot read block 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:9">dputs</name><argument_list pos:start="19:10" pos:end="19:29">(<argument pos:start="19:11" pos:end="19:28"><expr pos:start="19:11" pos:end="19:28"><literal type="string" pos:start="19:11" pos:end="19:28">"checking magic\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:44">(<expr pos:start="23:9" pos:end="23:43"><call pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:19">magic_match</name><argument_list pos:start="23:20" pos:end="23:43">(<argument pos:start="23:21" pos:end="23:30"><expr pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:23">mbr</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:30">magic</name></name></expr></argument>, <argument pos:start="23:33" pos:end="23:42"><expr pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:42">ZIPL_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:46" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:19">

        <expr_stmt pos:start="25:9" pos:end="25:19"><expr pos:start="25:9" pos:end="25:18"><call pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:16">ipl_scsi</name><argument_list pos:start="25:17" pos:end="25:18">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:21" pos:end="25:35">/* no return */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:43">/* Check if we can boot as ISO media */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:37">(<expr pos:start="33:9" pos:end="33:36"><call pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:34">virtio_guessed_disk_nature</name><argument_list pos:start="33:35" pos:end="33:36">()</argument_list></call></expr>)</condition> <block pos:start="33:39" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:32">

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><call pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:29">virtio_assume_iso9660</name><argument_list pos:start="35:30" pos:end="35:31">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><call pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:21">ipl_iso_el_torito</name><argument_list pos:start="39:22" pos:end="39:23">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:54">/* We have failed to follow the SCSI scheme, so */</comment>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:37">(<expr pos:start="45:9" pos:end="45:36"><call pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:34">virtio_guessed_disk_nature</name><argument_list pos:start="45:35" pos:end="45:36">()</argument_list></call></expr>)</condition> <block pos:start="45:39" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:29">

        <expr_stmt pos:start="47:9" pos:end="47:53"><expr pos:start="47:9" pos:end="47:52"><call pos:start="47:9" pos:end="47:52"><name pos:start="47:9" pos:end="47:18">sclp_print</name><argument_list pos:start="47:19" pos:end="47:52">(<argument pos:start="47:20" pos:end="47:51"><expr pos:start="47:20" pos:end="47:51"><literal type="string" pos:start="47:20" pos:end="47:51">"Using guessed DASD geometry.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:29"><expr pos:start="49:9" pos:end="49:28"><call pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:26">virtio_assume_eckd</name><argument_list pos:start="49:27" pos:end="49:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><call pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:18">print_eckd_msg</name><argument_list pos:start="53:19" pos:end="53:20">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:44">(<expr pos:start="55:9" pos:end="55:43"><call pos:start="55:9" pos:end="55:43"><name pos:start="55:9" pos:end="55:19">magic_match</name><argument_list pos:start="55:20" pos:end="55:43">(<argument pos:start="55:21" pos:end="55:30"><expr pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:23">mbr</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:30">magic</name></name></expr></argument>, <argument pos:start="55:33" pos:end="55:42"><expr pos:start="55:33" pos:end="55:42"><name pos:start="55:33" pos:end="55:42">IPL1_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:46" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:23">

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><call pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:20">ipl_eckd_cdl</name><argument_list pos:start="57:21" pos:end="57:22">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="57:25" pos:end="57:39">/* no return */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:18">/* LDL/CMS? */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:48"><expr pos:start="65:5" pos:end="65:47"><call pos:start="65:5" pos:end="65:47"><name pos:start="65:5" pos:end="65:10">memset</name><argument_list pos:start="65:11" pos:end="65:47">(<argument pos:start="65:12" pos:end="65:14"><expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">sec</name></expr></argument>, <argument pos:start="65:17" pos:end="65:33"><expr pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:33">FREE_SPACE_FILLER</name></expr></argument>, <argument pos:start="65:36" pos:end="65:46"><expr pos:start="65:36" pos:end="65:46"><sizeof pos:start="65:36" pos:end="65:46">sizeof<argument_list pos:start="65:42" pos:end="65:46">(<argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><name pos:start="65:43" pos:end="65:45">sec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><call pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:14">read_block</name><argument_list pos:start="67:15" pos:end="67:46">(<argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">2</literal></expr></argument>, <argument pos:start="67:19" pos:end="67:22"><expr pos:start="67:19" pos:end="67:22"><name pos:start="67:19" pos:end="67:22">vlbl</name></expr></argument>, <argument pos:start="67:25" pos:end="67:45"><expr pos:start="67:25" pos:end="67:45"><literal type="string" pos:start="67:25" pos:end="67:45">"Cannot read block 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:45">(<expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:19">magic_match</name><argument_list pos:start="71:20" pos:end="71:44">(<argument pos:start="71:21" pos:end="71:31"><expr pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:24">vlbl</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:31">magic</name></name></expr></argument>, <argument pos:start="71:34" pos:end="71:43"><expr pos:start="71:34" pos:end="71:43"><name pos:start="71:34" pos:end="71:43">CMS1_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:47" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:31">

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><call pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:20">ipl_eckd_ldl</name><argument_list pos:start="73:21" pos:end="73:30">(<argument pos:start="73:22" pos:end="73:29"><expr pos:start="73:22" pos:end="73:29"><name pos:start="73:22" pos:end="73:29">ECKD_CMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:33" pos:end="73:47">/* no return */</comment>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:45">(<expr pos:start="77:9" pos:end="77:44"><call pos:start="77:9" pos:end="77:44"><name pos:start="77:9" pos:end="77:19">magic_match</name><argument_list pos:start="77:20" pos:end="77:44">(<argument pos:start="77:21" pos:end="77:31"><expr pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:24">vlbl</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:31">magic</name></name></expr></argument>, <argument pos:start="77:34" pos:end="77:43"><expr pos:start="77:34" pos:end="77:43"><name pos:start="77:34" pos:end="77:43">LNX1_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:47" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:31">

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><call pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:20">ipl_eckd_ldl</name><argument_list pos:start="79:21" pos:end="79:30">(<argument pos:start="79:22" pos:end="79:29"><expr pos:start="79:22" pos:end="79:29"><name pos:start="79:22" pos:end="79:29">ECKD_LDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:33" pos:end="79:47">/* no return */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:37"><expr pos:start="85:5" pos:end="85:36"><call pos:start="85:5" pos:end="85:36"><name pos:start="85:5" pos:end="85:16">ipl_eckd_ldl</name><argument_list pos:start="85:17" pos:end="85:36">(<argument pos:start="85:18" pos:end="85:35"><expr pos:start="85:18" pos:end="85:35"><name pos:start="85:18" pos:end="85:35">ECKD_LDL_UNLABELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="85:39" pos:end="85:63">/* it still may return */</comment>

    <comment type="block" pos:start="87:5" pos:end="93:7">/*

     * Ok, it is not a LDL by any means.

     * It still might be a CDL with zero record keys for IPL1 and IPL2

     */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><call pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:16">ipl_eckd_cdl</name><argument_list pos:start="95:17" pos:end="95:18">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:50"><expr pos:start="99:5" pos:end="99:49"><call pos:start="99:5" pos:end="99:49"><name pos:start="99:5" pos:end="99:16">virtio_panic</name><argument_list pos:start="99:17" pos:end="99:49">(<argument pos:start="99:18" pos:end="99:48"><expr pos:start="99:18" pos:end="99:48"><literal type="string" pos:start="99:18" pos:end="99:48">"\n* this can never happen *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
