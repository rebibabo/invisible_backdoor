<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10440.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">verify_md5</name><parameter_list pos:start="1:22" pos:end="1:53">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:33">HEVCContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:52"><name pos:start="1:39" pos:end="1:45">AVFrame</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:13">

    <decl_stmt pos:start="5:5" pos:end="5:72"><decl pos:start="5:5" pos:end="5:71"><type pos:start="5:5" pos:end="5:30"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:28">AVPixFmtDescriptor</name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:34">desc</name> <init pos:start="5:36" pos:end="5:71">= <expr pos:start="5:38" pos:end="5:71"><call pos:start="5:38" pos:end="5:71"><name pos:start="5:38" pos:end="5:56">av_pix_fmt_desc_get</name><argument_list pos:start="5:57" pos:end="5:71">(<argument pos:start="5:58" pos:end="5:70"><expr pos:start="5:58" pos:end="5:70"><name pos:start="5:58" pos:end="5:70"><name pos:start="5:58" pos:end="5:62">frame</name><operator pos:start="5:63" pos:end="5:64">-&gt;</operator><name pos:start="5:65" pos:end="5:70">format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">pixel_shift</name> <init pos:start="7:21" pos:end="7:52">= <expr pos:start="7:23" pos:end="7:52"><name pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:26">desc</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:32">comp</name><index pos:start="7:33" pos:end="7:35">[<expr pos:start="7:34" pos:end="7:34"><literal type="number" pos:start="7:34" pos:end="7:34">0</literal></expr>]</index></name><operator pos:start="7:36" pos:end="7:36">.</operator><name pos:start="7:37" pos:end="7:48">depth_minus1</name> <operator pos:start="7:50" pos:end="7:50">&gt;</operator> <literal type="number" pos:start="7:52" pos:end="7:52">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:31"><if pos:start="13:5" pos:end="15:31">if <condition pos:start="13:8" pos:end="13:14">(<expr pos:start="13:9" pos:end="13:13"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:13">desc</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:31"><block_content pos:start="15:9" pos:end="15:31">

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="30:0"><expr pos:start="19:5" pos:end="21:18"><call pos:start="19:5" pos:end="21:18"><name pos:start="19:5" pos:end="19:10">av_log</name><argument_list pos:start="19:11" pos:end="21:18">(<argument pos:start="19:12" pos:end="19:19"><expr pos:start="19:12" pos:end="19:19"><name pos:start="19:12" pos:end="19:19"><name pos:start="19:12" pos:end="19:12">s</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:19">avctx</name></name></expr></argument>, <argument pos:start="19:22" pos:end="19:33"><expr pos:start="19:22" pos:end="19:33"><name pos:start="19:22" pos:end="19:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="19:36" pos:end="19:79"><expr pos:start="19:36" pos:end="19:79"><literal type="string" pos:start="19:36" pos:end="19:79">"Verifying checksum for frame with POC %d: "</literal></expr></argument>,

           <argument pos:start="21:12" pos:end="21:17"><expr pos:start="21:12" pos:end="21:17"><name pos:start="21:12" pos:end="21:17"><name pos:start="21:12" pos:end="21:12">s</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:17">poc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:22">/* the checksums are LE, so we have to byteswap for &gt;8bpp formats

     * on BE arches */</comment>

<cpp:if pos:start="29:1" pos:end="29:18">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:18">HAVE_BIGENDIAN</name></expr></cpp:if>

    <if_stmt pos:start="31:5" pos:end="46:0"><if pos:start="31:5" pos:end="46:0">if <condition pos:start="31:8" pos:end="31:40">(<expr pos:start="31:9" pos:end="31:39"><name pos:start="31:9" pos:end="31:19">pixel_shift</name> <operator pos:start="31:21" pos:end="31:22">&amp;&amp;</operator> <operator pos:start="31:24" pos:end="31:24">!</operator><name pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:39">checksum_buf</name></name></expr>)</condition> <block pos:start="31:42" pos:end="46:0">{<block_content pos:start="33:9" pos:end="41:35">

        <expr_stmt pos:start="33:9" pos:end="37:51"><expr pos:start="33:9" pos:end="37:50"><call pos:start="33:9" pos:end="37:50"><name pos:start="33:9" pos:end="33:22">av_fast_malloc</name><argument_list pos:start="33:23" pos:end="37:50">(<argument pos:start="33:24" pos:end="33:39"><expr pos:start="33:24" pos:end="33:39"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:39"><name pos:start="33:25" pos:end="33:25">s</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:39">checksum_buf</name></name></expr></argument>, <argument pos:start="33:42" pos:end="33:62"><expr pos:start="33:42" pos:end="33:62"><operator pos:start="33:42" pos:end="33:42">&amp;</operator><name pos:start="33:43" pos:end="33:62"><name pos:start="33:43" pos:end="33:43">s</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:62">checksum_buf_size</name></name></expr></argument>,

                       <argument pos:start="35:24" pos:end="37:49"><expr pos:start="35:24" pos:end="37:49"><call pos:start="35:24" pos:end="37:49"><name pos:start="35:24" pos:end="35:29">FFMAX3</name><argument_list pos:start="35:30" pos:end="37:49">(<argument pos:start="35:31" pos:end="35:48"><expr pos:start="35:31" pos:end="35:48"><name pos:start="35:31" pos:end="35:48"><name pos:start="35:31" pos:end="35:35">frame</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:45">linesize</name><index pos:start="35:46" pos:end="35:48">[<expr pos:start="35:47" pos:end="35:47"><literal type="number" pos:start="35:47" pos:end="35:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="35:51" pos:end="35:68"><expr pos:start="35:51" pos:end="35:68"><name pos:start="35:51" pos:end="35:68"><name pos:start="35:51" pos:end="35:55">frame</name><operator pos:start="35:56" pos:end="35:57">-&gt;</operator><name pos:start="35:58" pos:end="35:65">linesize</name><index pos:start="35:66" pos:end="35:68">[<expr pos:start="35:67" pos:end="35:67"><literal type="number" pos:start="35:67" pos:end="35:67">1</literal></expr>]</index></name></expr></argument>,

                              <argument pos:start="37:31" pos:end="37:48"><expr pos:start="37:31" pos:end="37:48"><name pos:start="37:31" pos:end="37:48"><name pos:start="37:31" pos:end="37:35">frame</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:45">linesize</name><index pos:start="37:46" pos:end="37:48">[<expr pos:start="37:47" pos:end="37:47"><literal type="number" pos:start="37:47" pos:end="37:47">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="41:35"><if pos:start="39:9" pos:end="41:35">if <condition pos:start="39:12" pos:end="39:29">(<expr pos:start="39:13" pos:end="39:28"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:28"><name pos:start="39:14" pos:end="39:14">s</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:28">checksum_buf</name></name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:35"><block_content pos:start="41:13" pos:end="41:35">

            <return pos:start="41:13" pos:end="41:35">return <expr pos:start="41:20" pos:end="41:34"><call pos:start="41:20" pos:end="41:34"><name pos:start="41:20" pos:end="41:26">AVERROR</name><argument_list pos:start="41:27" pos:end="41:34">(<argument pos:start="41:28" pos:end="41:33"><expr pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>



    <for pos:start="49:5" pos:end="115:5">for <control pos:start="49:9" pos:end="49:36">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:31"><expr pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:21">frame</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:27">data</name><index pos:start="49:28" pos:end="49:30">[<expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="49:33" pos:end="49:35"><expr pos:start="49:33" pos:end="49:35"><name pos:start="49:33" pos:end="49:33">i</name><operator pos:start="49:34" pos:end="49:35">++</operator></expr></incr>)</control> <block pos:start="49:38" pos:end="115:5">{<block_content pos:start="51:9" pos:end="113:9">

        <decl_stmt pos:start="51:9" pos:end="51:43"><decl pos:start="51:9" pos:end="51:42"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:17">width</name>  <init pos:start="51:20" pos:end="51:42">= <expr pos:start="51:22" pos:end="51:42"><name pos:start="51:22" pos:end="51:42"><name pos:start="51:22" pos:end="51:22">s</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:29">avctx</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:42">coded_width</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:44"><decl pos:start="53:9" pos:end="53:43"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:18">height</name> <init pos:start="53:20" pos:end="53:43">= <expr pos:start="53:22" pos:end="53:43"><name pos:start="53:22" pos:end="53:43"><name pos:start="53:22" pos:end="53:22">s</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:29">avctx</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:43">coded_height</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:77"><decl pos:start="55:9" pos:end="55:76"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:13">w</name> <init pos:start="55:15" pos:end="55:76">= <expr pos:start="55:17" pos:end="55:76"><ternary pos:start="55:17" pos:end="55:76"><condition pos:start="55:17" pos:end="55:36"><expr pos:start="55:17" pos:end="55:34"><operator pos:start="55:17" pos:end="55:17">(</operator><name pos:start="55:18" pos:end="55:18">i</name> <operator pos:start="55:20" pos:end="55:21">==</operator> <literal type="number" pos:start="55:23" pos:end="55:23">1</literal> <operator pos:start="55:25" pos:end="55:26">||</operator> <name pos:start="55:28" pos:end="55:28">i</name> <operator pos:start="55:30" pos:end="55:31">==</operator> <literal type="number" pos:start="55:33" pos:end="55:33">2</literal><operator pos:start="55:34" pos:end="55:34">)</operator></expr> ?</condition><then pos:start="55:38" pos:end="55:68"> <expr pos:start="55:38" pos:end="55:68"><operator pos:start="55:38" pos:end="55:38">(</operator><name pos:start="55:39" pos:end="55:43">width</name>  <operator pos:start="55:46" pos:end="55:47">&gt;&gt;</operator> <name pos:start="55:49" pos:end="55:67"><name pos:start="55:49" pos:end="55:52">desc</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:67">log2_chroma_w</name></name><operator pos:start="55:68" pos:end="55:68">)</operator></expr> </then><else pos:start="55:70" pos:end="55:76">: <expr pos:start="55:72" pos:end="55:76"><name pos:start="55:72" pos:end="55:76">width</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:78"><decl pos:start="57:9" pos:end="57:77"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:13">h</name> <init pos:start="57:15" pos:end="57:77">= <expr pos:start="57:17" pos:end="57:77"><ternary pos:start="57:17" pos:end="57:77"><condition pos:start="57:17" pos:end="57:36"><expr pos:start="57:17" pos:end="57:34"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:18">i</name> <operator pos:start="57:20" pos:end="57:21">==</operator> <literal type="number" pos:start="57:23" pos:end="57:23">1</literal> <operator pos:start="57:25" pos:end="57:26">||</operator> <name pos:start="57:28" pos:end="57:28">i</name> <operator pos:start="57:30" pos:end="57:31">==</operator> <literal type="number" pos:start="57:33" pos:end="57:33">2</literal><operator pos:start="57:34" pos:end="57:34">)</operator></expr> ?</condition><then pos:start="57:38" pos:end="57:68"> <expr pos:start="57:38" pos:end="57:68"><operator pos:start="57:38" pos:end="57:38">(</operator><name pos:start="57:39" pos:end="57:44">height</name> <operator pos:start="57:46" pos:end="57:47">&gt;&gt;</operator> <name pos:start="57:49" pos:end="57:67"><name pos:start="57:49" pos:end="57:52">desc</name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:67">log2_chroma_h</name></name><operator pos:start="57:68" pos:end="57:68">)</operator></expr> </then><else pos:start="57:70" pos:end="57:77">: <expr pos:start="57:72" pos:end="57:77"><name pos:start="57:72" pos:end="57:77">height</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:24"><decl pos:start="59:9" pos:end="59:23"><type pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:15">uint8_t</name></type> <name pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:19">md5</name><index pos:start="59:20" pos:end="59:23">[<expr pos:start="59:21" pos:end="59:22"><literal type="number" pos:start="59:21" pos:end="59:22">16</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><call pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:19">av_md5_init</name><argument_list pos:start="63:20" pos:end="63:31">(<argument pos:start="63:21" pos:end="63:30"><expr pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:30">md5_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="65:9" pos:end="85:9">for <control pos:start="65:13" pos:end="65:31">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">j</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:25"><name pos:start="65:21" pos:end="65:21">j</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <name pos:start="65:25" pos:end="65:25">h</name></expr>;</condition> <incr pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:28">j</name><operator pos:start="65:29" pos:end="65:30">++</operator></expr></incr>)</control> <block pos:start="65:33" pos:end="85:9">{<block_content pos:start="67:13" pos:end="83:61">

            <decl_stmt pos:start="67:13" pos:end="70:0"><decl pos:start="67:13" pos:end="67:72"><type pos:start="67:13" pos:end="67:27"><specifier pos:start="67:13" pos:end="67:17">const</specifier> <name pos:start="67:19" pos:end="67:25">uint8_t</name> <modifier pos:start="67:27" pos:end="67:27">*</modifier></type><name pos:start="67:28" pos:end="67:30">src</name> <init pos:start="67:32" pos:end="67:72">= <expr pos:start="67:34" pos:end="67:72"><name pos:start="67:34" pos:end="67:47"><name pos:start="67:34" pos:end="67:38">frame</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:44">data</name><index pos:start="67:45" pos:end="67:47">[<expr pos:start="67:46" pos:end="67:46"><name pos:start="67:46" pos:end="67:46">i</name></expr>]</index></name> <operator pos:start="67:49" pos:end="67:49">+</operator> <name pos:start="67:51" pos:end="67:51">j</name> <operator pos:start="67:53" pos:end="67:53">*</operator> <name pos:start="67:55" pos:end="67:72"><name pos:start="67:55" pos:end="67:59">frame</name><operator pos:start="67:60" pos:end="67:61">-&gt;</operator><name pos:start="67:62" pos:end="67:69">linesize</name><index pos:start="67:70" pos:end="67:72">[<expr pos:start="67:71" pos:end="67:71"><name pos:start="67:71" pos:end="67:71">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="69:1" pos:end="69:18">#<cpp:directive pos:start="69:2" pos:end="69:3">if</cpp:directive> <expr pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:18">HAVE_BIGENDIAN</name></expr></cpp:if>

            <if_stmt pos:start="71:13" pos:end="82:0"><if pos:start="71:13" pos:end="82:0">if <condition pos:start="71:16" pos:end="71:28">(<expr pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:27">pixel_shift</name></expr>)</condition> <block pos:start="71:30" pos:end="82:0">{<block_content pos:start="73:17" pos:end="77:38">

                <expr_stmt pos:start="73:17" pos:end="75:60"><expr pos:start="73:17" pos:end="75:59"><call pos:start="73:17" pos:end="75:59"><name pos:start="73:17" pos:end="73:34"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:22">dsp</name><operator pos:start="73:23" pos:end="73:23">.</operator><name pos:start="73:24" pos:end="73:34">bswap16_buf</name></name><argument_list pos:start="73:35" pos:end="75:59">(<argument pos:start="73:36" pos:end="73:61"><expr pos:start="73:36" pos:end="73:61"><operator pos:start="73:36" pos:end="73:36">(</operator><name pos:start="73:37" pos:end="73:44">uint16_t</name><operator pos:start="73:45" pos:end="73:45">*</operator><operator pos:start="73:46" pos:end="73:46">)</operator><name pos:start="73:47" pos:end="73:61"><name pos:start="73:47" pos:end="73:47">s</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:61">checksum_buf</name></name></expr></argument>,

                                   <argument pos:start="75:36" pos:end="75:55"><expr pos:start="75:36" pos:end="75:55"><operator pos:start="75:36" pos:end="75:36">(</operator><specifier pos:start="75:37" pos:end="75:41">const</specifier> <name pos:start="75:43" pos:end="75:50">uint16_t</name><operator pos:start="75:51" pos:end="75:51">*</operator><operator pos:start="75:52" pos:end="75:52">)</operator><name pos:start="75:53" pos:end="75:55">src</name></expr></argument>, <argument pos:start="75:58" pos:end="75:58"><expr pos:start="75:58" pos:end="75:58"><name pos:start="75:58" pos:end="75:58">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:38"><expr pos:start="77:17" pos:end="77:37"><name pos:start="77:17" pos:end="77:19">src</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:37"><name pos:start="77:23" pos:end="77:23">s</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:37">checksum_buf</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="83:13" pos:end="83:61"><expr pos:start="83:13" pos:end="83:60"><call pos:start="83:13" pos:end="83:60"><name pos:start="83:13" pos:end="83:25">av_md5_update</name><argument_list pos:start="83:26" pos:end="83:60">(<argument pos:start="83:27" pos:end="83:36"><expr pos:start="83:27" pos:end="83:36"><name pos:start="83:27" pos:end="83:36"><name pos:start="83:27" pos:end="83:27">s</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:36">md5_ctx</name></name></expr></argument>, <argument pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><name pos:start="83:39" pos:end="83:41">src</name></expr></argument>, <argument pos:start="83:44" pos:end="83:59"><expr pos:start="83:44" pos:end="83:59"><name pos:start="83:44" pos:end="83:44">w</name> <operator pos:start="83:46" pos:end="83:47">&lt;&lt;</operator> <name pos:start="83:49" pos:end="83:59">pixel_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="87:9" pos:end="87:38"><expr pos:start="87:9" pos:end="87:37"><call pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:20">av_md5_final</name><argument_list pos:start="87:21" pos:end="87:37">(<argument pos:start="87:22" pos:end="87:31"><expr pos:start="87:22" pos:end="87:31"><name pos:start="87:22" pos:end="87:31"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:31">md5_ctx</name></name></expr></argument>, <argument pos:start="87:34" pos:end="87:36"><expr pos:start="87:34" pos:end="87:36"><name pos:start="87:34" pos:end="87:36">md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="113:9"><if pos:start="91:9" pos:end="99:9">if <condition pos:start="91:12" pos:end="91:40">(<expr pos:start="91:13" pos:end="91:39"><operator pos:start="91:13" pos:end="91:13">!</operator><call pos:start="91:14" pos:end="91:39"><name pos:start="91:14" pos:end="91:19">memcmp</name><argument_list pos:start="91:20" pos:end="91:39">(<argument pos:start="91:21" pos:end="91:23"><expr pos:start="91:21" pos:end="91:23"><name pos:start="91:21" pos:end="91:23">md5</name></expr></argument>, <argument pos:start="91:26" pos:end="91:34"><expr pos:start="91:26" pos:end="91:34"><name pos:start="91:26" pos:end="91:34"><name pos:start="91:26" pos:end="91:26">s</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:31">md5</name><index pos:start="91:32" pos:end="91:34">[<expr pos:start="91:33" pos:end="91:33"><name pos:start="91:33" pos:end="91:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="91:37" pos:end="91:38"><expr pos:start="91:37" pos:end="91:38"><literal type="number" pos:start="91:37" pos:end="91:38">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:42" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:52">

            <expr_stmt pos:start="93:13" pos:end="93:72"><expr pos:start="93:13" pos:end="93:71"><call pos:start="93:13" pos:end="93:71"><name pos:start="93:13" pos:end="93:18">av_log</name>   <argument_list pos:start="93:22" pos:end="93:71">(<argument pos:start="93:23" pos:end="93:30"><expr pos:start="93:23" pos:end="93:30"><name pos:start="93:23" pos:end="93:30"><name pos:start="93:23" pos:end="93:23">s</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:30">avctx</name></name></expr></argument>, <argument pos:start="93:33" pos:end="93:44"><expr pos:start="93:33" pos:end="93:44"><name pos:start="93:33" pos:end="93:44">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="93:47" pos:end="93:67"><expr pos:start="93:47" pos:end="93:67"><literal type="string" pos:start="93:47" pos:end="93:67">"plane %d - correct "</literal></expr></argument>, <argument pos:start="93:70" pos:end="93:70"><expr pos:start="93:70" pos:end="93:70"><name pos:start="93:70" pos:end="93:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:51"><expr pos:start="95:13" pos:end="95:50"><call pos:start="95:13" pos:end="95:50"><name pos:start="95:13" pos:end="95:21">print_md5</name><argument_list pos:start="95:22" pos:end="95:50">(<argument pos:start="95:23" pos:end="95:30"><expr pos:start="95:23" pos:end="95:30"><name pos:start="95:23" pos:end="95:30"><name pos:start="95:23" pos:end="95:23">s</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:30">avctx</name></name></expr></argument>, <argument pos:start="95:33" pos:end="95:44"><expr pos:start="95:33" pos:end="95:44"><name pos:start="95:33" pos:end="95:44">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="95:47" pos:end="95:49"><expr pos:start="95:47" pos:end="95:49"><name pos:start="95:47" pos:end="95:49">md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:52"><expr pos:start="97:13" pos:end="97:51"><call pos:start="97:13" pos:end="97:51"><name pos:start="97:13" pos:end="97:18">av_log</name>   <argument_list pos:start="97:22" pos:end="97:51">(<argument pos:start="97:23" pos:end="97:30"><expr pos:start="97:23" pos:end="97:30"><name pos:start="97:23" pos:end="97:30"><name pos:start="97:23" pos:end="97:23">s</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:30">avctx</name></name></expr></argument>, <argument pos:start="97:33" pos:end="97:44"><expr pos:start="97:33" pos:end="97:44"><name pos:start="97:33" pos:end="97:44">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="97:47" pos:end="97:50"><expr pos:start="97:47" pos:end="97:50"><literal type="string" pos:start="97:47" pos:end="97:50">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="113:9">else <block pos:start="99:16" pos:end="113:9">{<block_content pos:start="101:13" pos:end="111:39">

            <expr_stmt pos:start="101:13" pos:end="101:88"><expr pos:start="101:13" pos:end="101:87"><call pos:start="101:13" pos:end="101:87"><name pos:start="101:13" pos:end="101:18">av_log</name>   <argument_list pos:start="101:22" pos:end="101:87">(<argument pos:start="101:23" pos:end="101:30"><expr pos:start="101:23" pos:end="101:30"><name pos:start="101:23" pos:end="101:30"><name pos:start="101:23" pos:end="101:23">s</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:30">avctx</name></name></expr></argument>, <argument pos:start="101:33" pos:end="101:44"><expr pos:start="101:33" pos:end="101:44"><name pos:start="101:33" pos:end="101:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:47" pos:end="101:83"><expr pos:start="101:47" pos:end="101:83"><literal type="string" pos:start="101:47" pos:end="101:83">"mismatching checksum of plane %d - "</literal></expr></argument>, <argument pos:start="101:86" pos:end="101:86"><expr pos:start="101:86" pos:end="101:86"><name pos:start="101:86" pos:end="101:86">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:51"><expr pos:start="103:13" pos:end="103:50"><call pos:start="103:13" pos:end="103:50"><name pos:start="103:13" pos:end="103:21">print_md5</name><argument_list pos:start="103:22" pos:end="103:50">(<argument pos:start="103:23" pos:end="103:30"><expr pos:start="103:23" pos:end="103:30"><name pos:start="103:23" pos:end="103:30"><name pos:start="103:23" pos:end="103:23">s</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:30">avctx</name></name></expr></argument>, <argument pos:start="103:33" pos:end="103:44"><expr pos:start="103:33" pos:end="103:44"><name pos:start="103:33" pos:end="103:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:47" pos:end="103:49"><expr pos:start="103:47" pos:end="103:49"><name pos:start="103:47" pos:end="103:49">md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:54"><expr pos:start="105:13" pos:end="105:53"><call pos:start="105:13" pos:end="105:53"><name pos:start="105:13" pos:end="105:18">av_log</name>   <argument_list pos:start="105:22" pos:end="105:53">(<argument pos:start="105:23" pos:end="105:30"><expr pos:start="105:23" pos:end="105:30"><name pos:start="105:23" pos:end="105:30"><name pos:start="105:23" pos:end="105:23">s</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:30">avctx</name></name></expr></argument>, <argument pos:start="105:33" pos:end="105:44"><expr pos:start="105:33" pos:end="105:44"><name pos:start="105:33" pos:end="105:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:47" pos:end="105:52"><expr pos:start="105:47" pos:end="105:52"><literal type="string" pos:start="105:47" pos:end="105:52">" != "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:57"><expr pos:start="107:13" pos:end="107:56"><call pos:start="107:13" pos:end="107:56"><name pos:start="107:13" pos:end="107:21">print_md5</name><argument_list pos:start="107:22" pos:end="107:56">(<argument pos:start="107:23" pos:end="107:30"><expr pos:start="107:23" pos:end="107:30"><name pos:start="107:23" pos:end="107:30"><name pos:start="107:23" pos:end="107:23">s</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:30">avctx</name></name></expr></argument>, <argument pos:start="107:33" pos:end="107:44"><expr pos:start="107:33" pos:end="107:44"><name pos:start="107:33" pos:end="107:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:47" pos:end="107:55"><expr pos:start="107:47" pos:end="107:55"><name pos:start="107:47" pos:end="107:55"><name pos:start="107:47" pos:end="107:47">s</name><operator pos:start="107:48" pos:end="107:49">-&gt;</operator><name pos:start="107:50" pos:end="107:52">md5</name><index pos:start="107:53" pos:end="107:55">[<expr pos:start="107:54" pos:end="107:54"><name pos:start="107:54" pos:end="107:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:52"><expr pos:start="109:13" pos:end="109:51"><call pos:start="109:13" pos:end="109:51"><name pos:start="109:13" pos:end="109:18">av_log</name>   <argument_list pos:start="109:22" pos:end="109:51">(<argument pos:start="109:23" pos:end="109:30"><expr pos:start="109:23" pos:end="109:30"><name pos:start="109:23" pos:end="109:30"><name pos:start="109:23" pos:end="109:23">s</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:30">avctx</name></name></expr></argument>, <argument pos:start="109:33" pos:end="109:44"><expr pos:start="109:33" pos:end="109:44"><name pos:start="109:33" pos:end="109:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:47" pos:end="109:50"><expr pos:start="109:47" pos:end="109:50"><literal type="string" pos:start="109:47" pos:end="109:50">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:39">return <expr pos:start="111:20" pos:end="111:38"><name pos:start="111:20" pos:end="111:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="119:5" pos:end="119:41"><expr pos:start="119:5" pos:end="119:40"><call pos:start="119:5" pos:end="119:40"><name pos:start="119:5" pos:end="119:10">av_log</name><argument_list pos:start="119:11" pos:end="119:40">(<argument pos:start="119:12" pos:end="119:19"><expr pos:start="119:12" pos:end="119:19"><name pos:start="119:12" pos:end="119:19"><name pos:start="119:12" pos:end="119:12">s</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:19">avctx</name></name></expr></argument>, <argument pos:start="119:22" pos:end="119:33"><expr pos:start="119:22" pos:end="119:33"><name pos:start="119:22" pos:end="119:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="119:36" pos:end="119:39"><expr pos:start="119:36" pos:end="119:39"><literal type="string" pos:start="119:36" pos:end="119:39">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
