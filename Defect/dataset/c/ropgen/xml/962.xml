<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/962.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dxv_decompress_dxt1</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">DXVContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ctx</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">GetByteContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">gbc</name> <init pos:start="7:25" pos:end="7:35">= <expr pos:start="7:27" pos:end="7:35"><operator pos:start="7:27" pos:end="7:27">&amp;</operator><name pos:start="7:28" pos:end="7:35"><name pos:start="7:28" pos:end="7:30">ctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:35">gbc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name></decl>, <decl pos:start="9:21" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:21" pos:end="9:24">prev</name></decl>, <decl pos:start="9:27" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:28">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">idx</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>, <decl pos:start="11:18" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:22">state</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">pos</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">2</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:37">/* Copy the first two elements */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:54"><expr pos:start="19:5" pos:end="19:53"><call pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:11">AV_WL32</name><argument_list pos:start="19:12" pos:end="19:53">(<argument pos:start="19:13" pos:end="19:25"><expr pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:15">ctx</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:25">tex_data</name></name></expr></argument>, <argument pos:start="19:28" pos:end="19:52"><expr pos:start="19:28" pos:end="19:52"><call pos:start="19:28" pos:end="19:52"><name pos:start="19:28" pos:end="19:47">bytestream2_get_le32</name><argument_list pos:start="19:48" pos:end="19:52">(<argument pos:start="19:49" pos:end="19:51"><expr pos:start="19:49" pos:end="19:51"><name pos:start="19:49" pos:end="19:51">gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:58"><expr pos:start="21:5" pos:end="21:57"><call pos:start="21:5" pos:end="21:57"><name pos:start="21:5" pos:end="21:11">AV_WL32</name><argument_list pos:start="21:12" pos:end="21:57">(<argument pos:start="21:13" pos:end="21:29"><expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:15">ctx</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:25">tex_data</name></name> <operator pos:start="21:27" pos:end="21:27">+</operator> <literal type="number" pos:start="21:29" pos:end="21:29">4</literal></expr></argument>, <argument pos:start="21:32" pos:end="21:56"><expr pos:start="21:32" pos:end="21:56"><call pos:start="21:32" pos:end="21:56"><name pos:start="21:32" pos:end="21:51">bytestream2_get_le32</name><argument_list pos:start="21:52" pos:end="21:56">(<argument pos:start="21:53" pos:end="21:55"><expr pos:start="21:53" pos:end="21:55"><name pos:start="21:53" pos:end="21:55">gbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:63">/* Process input until the whole texture has been filled */</comment>

    <while pos:start="27:5" pos:end="89:5">while <condition pos:start="27:11" pos:end="27:35">(<expr pos:start="27:12" pos:end="27:34"><name pos:start="27:12" pos:end="27:14">pos</name> <operator pos:start="27:16" pos:end="27:16">&lt;</operator> <name pos:start="27:18" pos:end="27:30"><name pos:start="27:18" pos:end="27:20">ctx</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:30">tex_size</name></name> <operator pos:start="27:32" pos:end="27:32">/</operator> <literal type="number" pos:start="27:34" pos:end="27:34">4</literal></expr>)</condition> <block pos:start="27:37" pos:end="89:5">{<block_content pos:start="29:9" pos:end="87:9">

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><call pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:18">CHECKPOINT</name><argument_list pos:start="29:19" pos:end="29:21">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:79">/* Copy two elements from a previous offset or from the input buffer */</comment>

        <if_stmt pos:start="35:9" pos:end="87:9"><if pos:start="35:9" pos:end="51:9">if <condition pos:start="35:12" pos:end="35:15">(<expr pos:start="35:13" pos:end="35:14"><name pos:start="35:13" pos:end="35:14">op</name></expr>)</condition> <block pos:start="35:17" pos:end="51:9">{<block_content pos:start="37:13" pos:end="49:18">

            <expr_stmt pos:start="37:13" pos:end="37:60"><expr pos:start="37:13" pos:end="37:59"><name pos:start="37:13" pos:end="37:16">prev</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:59"><name pos:start="37:20" pos:end="37:26">AV_RL32</name><argument_list pos:start="37:27" pos:end="37:59">(<argument pos:start="37:28" pos:end="37:58"><expr pos:start="37:28" pos:end="37:58"><name pos:start="37:28" pos:end="37:40"><name pos:start="37:28" pos:end="37:30">ctx</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:40">tex_data</name></name> <operator pos:start="37:42" pos:end="37:42">+</operator> <literal type="number" pos:start="37:44" pos:end="37:44">4</literal> <operator pos:start="37:46" pos:end="37:46">*</operator> <operator pos:start="37:48" pos:end="37:48">(</operator><name pos:start="37:49" pos:end="37:51">pos</name> <operator pos:start="37:53" pos:end="37:53">-</operator> <name pos:start="37:55" pos:end="37:57">idx</name><operator pos:start="37:58" pos:end="37:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:51"><expr pos:start="39:13" pos:end="39:50"><call pos:start="39:13" pos:end="39:50"><name pos:start="39:13" pos:end="39:19">AV_WL32</name><argument_list pos:start="39:20" pos:end="39:50">(<argument pos:start="39:21" pos:end="39:43"><expr pos:start="39:21" pos:end="39:43"><name pos:start="39:21" pos:end="39:33"><name pos:start="39:21" pos:end="39:23">ctx</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:33">tex_data</name></name> <operator pos:start="39:35" pos:end="39:35">+</operator> <literal type="number" pos:start="39:37" pos:end="39:37">4</literal> <operator pos:start="39:39" pos:end="39:39">*</operator> <name pos:start="39:41" pos:end="39:43">pos</name></expr></argument>, <argument pos:start="39:46" pos:end="39:49"><expr pos:start="39:46" pos:end="39:49"><name pos:start="39:46" pos:end="39:49">prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:18"><expr pos:start="41:13" pos:end="41:17"><name pos:start="41:13" pos:end="41:15">pos</name><operator pos:start="41:16" pos:end="41:17">++</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="45:13" pos:end="45:60"><expr pos:start="45:13" pos:end="45:59"><name pos:start="45:13" pos:end="45:16">prev</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:59"><name pos:start="45:20" pos:end="45:26">AV_RL32</name><argument_list pos:start="45:27" pos:end="45:59">(<argument pos:start="45:28" pos:end="45:58"><expr pos:start="45:28" pos:end="45:58"><name pos:start="45:28" pos:end="45:40"><name pos:start="45:28" pos:end="45:30">ctx</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:40">tex_data</name></name> <operator pos:start="45:42" pos:end="45:42">+</operator> <literal type="number" pos:start="45:44" pos:end="45:44">4</literal> <operator pos:start="45:46" pos:end="45:46">*</operator> <operator pos:start="45:48" pos:end="45:48">(</operator><name pos:start="45:49" pos:end="45:51">pos</name> <operator pos:start="45:53" pos:end="45:53">-</operator> <name pos:start="45:55" pos:end="45:57">idx</name><operator pos:start="45:58" pos:end="45:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:51"><expr pos:start="47:13" pos:end="47:50"><call pos:start="47:13" pos:end="47:50"><name pos:start="47:13" pos:end="47:19">AV_WL32</name><argument_list pos:start="47:20" pos:end="47:50">(<argument pos:start="47:21" pos:end="47:43"><expr pos:start="47:21" pos:end="47:43"><name pos:start="47:21" pos:end="47:33"><name pos:start="47:21" pos:end="47:23">ctx</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:33">tex_data</name></name> <operator pos:start="47:35" pos:end="47:35">+</operator> <literal type="number" pos:start="47:37" pos:end="47:37">4</literal> <operator pos:start="47:39" pos:end="47:39">*</operator> <name pos:start="47:41" pos:end="47:43">pos</name></expr></argument>, <argument pos:start="47:46" pos:end="47:49"><expr pos:start="47:46" pos:end="47:49"><name pos:start="47:46" pos:end="47:49">prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:18"><expr pos:start="49:13" pos:end="49:17"><name pos:start="49:13" pos:end="49:15">pos</name><operator pos:start="49:16" pos:end="49:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="87:9">else <block pos:start="51:16" pos:end="87:9">{<block_content pos:start="53:13" pos:end="85:18">

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><call pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:22">CHECKPOINT</name><argument_list pos:start="53:23" pos:end="53:25">(<argument pos:start="53:24" pos:end="53:24"><expr pos:start="53:24" pos:end="53:24"><literal type="number" pos:start="53:24" pos:end="53:24">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="57:13" pos:end="63:49"><if pos:start="57:13" pos:end="59:64">if <condition pos:start="57:16" pos:end="57:19">(<expr pos:start="57:17" pos:end="57:18"><name pos:start="57:17" pos:end="57:18">op</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:64"><block_content pos:start="59:17" pos:end="59:64">

                <expr_stmt pos:start="59:17" pos:end="59:64"><expr pos:start="59:17" pos:end="59:63"><name pos:start="59:17" pos:end="59:20">prev</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:63"><name pos:start="59:24" pos:end="59:30">AV_RL32</name><argument_list pos:start="59:31" pos:end="59:63">(<argument pos:start="59:32" pos:end="59:62"><expr pos:start="59:32" pos:end="59:62"><name pos:start="59:32" pos:end="59:44"><name pos:start="59:32" pos:end="59:34">ctx</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:44">tex_data</name></name> <operator pos:start="59:46" pos:end="59:46">+</operator> <literal type="number" pos:start="59:48" pos:end="59:48">4</literal> <operator pos:start="59:50" pos:end="59:50">*</operator> <operator pos:start="59:52" pos:end="59:52">(</operator><name pos:start="59:53" pos:end="59:55">pos</name> <operator pos:start="59:57" pos:end="59:57">-</operator> <name pos:start="59:59" pos:end="59:61">idx</name><operator pos:start="59:62" pos:end="59:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="61:13" pos:end="63:49">else<block type="pseudo" pos:start="63:17" pos:end="63:49"><block_content pos:start="63:17" pos:end="63:49">

                <expr_stmt pos:start="63:17" pos:end="63:49"><expr pos:start="63:17" pos:end="63:48"><name pos:start="63:17" pos:end="63:20">prev</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <call pos:start="63:24" pos:end="63:48"><name pos:start="63:24" pos:end="63:43">bytestream2_get_le32</name><argument_list pos:start="63:44" pos:end="63:48">(<argument pos:start="63:45" pos:end="63:47"><expr pos:start="63:45" pos:end="63:47"><name pos:start="63:45" pos:end="63:47">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><call pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:19">AV_WL32</name><argument_list pos:start="65:20" pos:end="65:50">(<argument pos:start="65:21" pos:end="65:43"><expr pos:start="65:21" pos:end="65:43"><name pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:23">ctx</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:33">tex_data</name></name> <operator pos:start="65:35" pos:end="65:35">+</operator> <literal type="number" pos:start="65:37" pos:end="65:37">4</literal> <operator pos:start="65:39" pos:end="65:39">*</operator> <name pos:start="65:41" pos:end="65:43">pos</name></expr></argument>, <argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><name pos:start="65:46" pos:end="65:49">prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:18"><expr pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:15">pos</name><operator pos:start="67:16" pos:end="67:17">++</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="71:13" pos:end="71:26"><expr pos:start="71:13" pos:end="71:25"><call pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:22">CHECKPOINT</name><argument_list pos:start="71:23" pos:end="71:25">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><literal type="number" pos:start="71:24" pos:end="71:24">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="75:13" pos:end="81:49"><if pos:start="75:13" pos:end="77:64">if <condition pos:start="75:16" pos:end="75:19">(<expr pos:start="75:17" pos:end="75:18"><name pos:start="75:17" pos:end="75:18">op</name></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:64"><block_content pos:start="77:17" pos:end="77:64">

                <expr_stmt pos:start="77:17" pos:end="77:64"><expr pos:start="77:17" pos:end="77:63"><name pos:start="77:17" pos:end="77:20">prev</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <call pos:start="77:24" pos:end="77:63"><name pos:start="77:24" pos:end="77:30">AV_RL32</name><argument_list pos:start="77:31" pos:end="77:63">(<argument pos:start="77:32" pos:end="77:62"><expr pos:start="77:32" pos:end="77:62"><name pos:start="77:32" pos:end="77:44"><name pos:start="77:32" pos:end="77:34">ctx</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:44">tex_data</name></name> <operator pos:start="77:46" pos:end="77:46">+</operator> <literal type="number" pos:start="77:48" pos:end="77:48">4</literal> <operator pos:start="77:50" pos:end="77:50">*</operator> <operator pos:start="77:52" pos:end="77:52">(</operator><name pos:start="77:53" pos:end="77:55">pos</name> <operator pos:start="77:57" pos:end="77:57">-</operator> <name pos:start="77:59" pos:end="77:61">idx</name><operator pos:start="77:62" pos:end="77:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="79:13" pos:end="81:49">else<block type="pseudo" pos:start="81:17" pos:end="81:49"><block_content pos:start="81:17" pos:end="81:49">

                <expr_stmt pos:start="81:17" pos:end="81:49"><expr pos:start="81:17" pos:end="81:48"><name pos:start="81:17" pos:end="81:20">prev</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <call pos:start="81:24" pos:end="81:48"><name pos:start="81:24" pos:end="81:43">bytestream2_get_le32</name><argument_list pos:start="81:44" pos:end="81:48">(<argument pos:start="81:45" pos:end="81:47"><expr pos:start="81:45" pos:end="81:47"><name pos:start="81:45" pos:end="81:47">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:51"><expr pos:start="83:13" pos:end="83:50"><call pos:start="83:13" pos:end="83:50"><name pos:start="83:13" pos:end="83:19">AV_WL32</name><argument_list pos:start="83:20" pos:end="83:50">(<argument pos:start="83:21" pos:end="83:43"><expr pos:start="83:21" pos:end="83:43"><name pos:start="83:21" pos:end="83:33"><name pos:start="83:21" pos:end="83:23">ctx</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:33">tex_data</name></name> <operator pos:start="83:35" pos:end="83:35">+</operator> <literal type="number" pos:start="83:37" pos:end="83:37">4</literal> <operator pos:start="83:39" pos:end="83:39">*</operator> <name pos:start="83:41" pos:end="83:43">pos</name></expr></argument>, <argument pos:start="83:46" pos:end="83:49"><expr pos:start="83:46" pos:end="83:49"><name pos:start="83:46" pos:end="83:49">prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:18"><expr pos:start="85:13" pos:end="85:17"><name pos:start="85:13" pos:end="85:15">pos</name><operator pos:start="85:16" pos:end="85:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
