<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9459.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:69">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">cs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:68"><decl pos:start="1:42" pos:end="1:68"><type pos:start="1:42" pos:end="1:68"><name pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:47">struct</name> <name pos:start="1:49" pos:end="1:64">TranslationBlock</name></name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="245:1">{<block_content pos:start="5:5" pos:end="244:0">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUSH4State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:34">= <expr pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:25">cs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:34">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">DisasContext</name></type> <name pos:start="7:18" pos:end="7:20">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:12">pc_start</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:21"><name pos:start="17:16" pos:end="17:17">tb</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:7">ctx</name><operator pos:start="19:8" pos:end="19:8">.</operator><name pos:start="19:9" pos:end="19:10">pc</name></name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:7">ctx</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:15">tbflags</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <operator pos:start="21:19" pos:end="21:19">(</operator><name pos:start="21:20" pos:end="21:27">uint32_t</name><operator pos:start="21:28" pos:end="21:28">)</operator><name pos:start="21:29" pos:end="21:37"><name pos:start="21:29" pos:end="21:30">tb</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:37">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:53"><expr pos:start="23:5" pos:end="23:52"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:7">ctx</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:16">envflags</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:21">tb</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:28">flags</name></name> <operator pos:start="23:30" pos:end="23:30">&amp;</operator> <name pos:start="23:32" pos:end="23:52">TB_FLAG_ENVFLAGS_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:7">ctx</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:14">bstate</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:24">BS_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:7">ctx</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:14">memidx</name></name> <operator pos:start="27:16" pos:end="27:16">=</operator> <ternary pos:start="27:18" pos:end="27:59"><condition pos:start="27:18" pos:end="27:53"><expr pos:start="27:18" pos:end="27:51"><operator pos:start="27:18" pos:end="27:18">(</operator><name pos:start="27:19" pos:end="27:29"><name pos:start="27:19" pos:end="27:21">ctx</name><operator pos:start="27:22" pos:end="27:22">.</operator><name pos:start="27:23" pos:end="27:29">tbflags</name></name> <operator pos:start="27:31" pos:end="27:31">&amp;</operator> <operator pos:start="27:33" pos:end="27:33">(</operator><literal type="number" pos:start="27:34" pos:end="27:35">1u</literal> <operator pos:start="27:37" pos:end="27:38">&lt;&lt;</operator> <name pos:start="27:40" pos:end="27:44">SR_MD</name><operator pos:start="27:45" pos:end="27:45">)</operator><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:49">==</operator> <literal type="number" pos:start="27:51" pos:end="27:51">0</literal></expr> ?</condition><then pos:start="27:55" pos:end="27:55"> <expr pos:start="27:55" pos:end="27:55"><literal type="number" pos:start="27:55" pos:end="27:55">1</literal></expr> </then><else pos:start="27:57" pos:end="27:59">: <expr pos:start="27:59" pos:end="27:59"><literal type="number" pos:start="27:59" pos:end="27:59">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="31:44">/* We don't know if the delayed pc came from a dynamic or static branch,

       so assume it is a dynamic branch.  */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:7">ctx</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:18">delayed_pc</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">-</operator><literal type="number" pos:start="33:23" pos:end="33:23">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="33:26" pos:end="33:62">/* use delayed pc from env pointer */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:10">tb</name></name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:52"><expr pos:start="37:5" pos:end="37:51"><name pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:26">singlestep_enabled</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <name pos:start="37:30" pos:end="37:51"><name pos:start="37:30" pos:end="37:31">cs</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:16">features</name></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:32"><name pos:start="39:20" pos:end="39:22">env</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:32">features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:59"><expr pos:start="41:5" pos:end="41:58"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:18">has_movcal</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <operator pos:start="41:22" pos:end="41:22">(</operator><name pos:start="41:23" pos:end="41:33"><name pos:start="41:23" pos:end="41:25">ctx</name><operator pos:start="41:26" pos:end="41:26">.</operator><name pos:start="41:27" pos:end="41:33">tbflags</name></name> <operator pos:start="41:35" pos:end="41:35">&amp;</operator> <name pos:start="41:37" pos:end="41:57">TB_FLAG_PENDING_MOVCA</name><operator pos:start="41:58" pos:end="41:58">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="45:54"><expr pos:start="43:5" pos:end="45:53"><name pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:13">gbank</name></name> <operator pos:start="43:15" pos:end="43:15">=</operator> <operator pos:start="43:17" pos:end="43:17">(</operator><operator pos:start="43:18" pos:end="43:18">(</operator><name pos:start="43:19" pos:end="43:29"><name pos:start="43:19" pos:end="43:21">ctx</name><operator pos:start="43:22" pos:end="43:22">.</operator><name pos:start="43:23" pos:end="43:29">tbflags</name></name> <operator pos:start="43:31" pos:end="43:31">&amp;</operator> <operator pos:start="43:33" pos:end="43:33">(</operator><literal type="number" pos:start="43:34" pos:end="43:34">1</literal> <operator pos:start="43:36" pos:end="43:37">&lt;&lt;</operator> <name pos:start="43:39" pos:end="43:43">SR_MD</name><operator pos:start="43:44" pos:end="43:44">)</operator><operator pos:start="43:45" pos:end="43:45">)</operator> <operator pos:start="43:47" pos:end="43:48">&amp;&amp;</operator>

                 <operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:29"><name pos:start="45:19" pos:end="45:21">ctx</name><operator pos:start="45:22" pos:end="45:22">.</operator><name pos:start="45:23" pos:end="45:29">tbflags</name></name> <operator pos:start="45:31" pos:end="45:31">&amp;</operator> <operator pos:start="45:33" pos:end="45:33">(</operator><literal type="number" pos:start="45:34" pos:end="45:34">1</literal> <operator pos:start="45:36" pos:end="45:37">&lt;&lt;</operator> <name pos:start="45:39" pos:end="45:43">SR_RB</name><operator pos:start="45:44" pos:end="45:44">)</operator><operator pos:start="45:45" pos:end="45:45">)</operator><operator pos:start="45:46" pos:end="45:46">)</operator> <operator pos:start="45:48" pos:end="45:48">*</operator> <literal type="number" pos:start="45:50" pos:end="45:53">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:50"><expr pos:start="47:5" pos:end="47:49"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:13">fbank</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <ternary pos:start="47:17" pos:end="47:49"><condition pos:start="47:17" pos:end="47:40"><expr pos:start="47:17" pos:end="47:38"><name pos:start="47:17" pos:end="47:27"><name pos:start="47:17" pos:end="47:19">ctx</name><operator pos:start="47:20" pos:end="47:20">.</operator><name pos:start="47:21" pos:end="47:27">tbflags</name></name> <operator pos:start="47:29" pos:end="47:29">&amp;</operator> <name pos:start="47:31" pos:end="47:38">FPSCR_FR</name></expr> ?</condition><then pos:start="47:42" pos:end="47:45"> <expr pos:start="47:42" pos:end="47:45"><literal type="number" pos:start="47:42" pos:end="47:45">0x10</literal></expr> </then><else pos:start="47:47" pos:end="47:49">: <expr pos:start="47:49" pos:end="47:49"><literal type="number" pos:start="47:49" pos:end="47:49">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:13">max_insns</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:26"><name pos:start="51:17" pos:end="51:18">tb</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:26">cflags</name></name> <operator pos:start="51:28" pos:end="51:28">&amp;</operator> <name pos:start="51:30" pos:end="51:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:23">(<expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:17">max_insns</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>)</condition> <block pos:start="53:25" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:34">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:17">max_insns</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:13">max_insns</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:45"><name pos:start="59:17" pos:end="59:19">MIN</name><argument_list pos:start="59:20" pos:end="59:45">(<argument pos:start="59:21" pos:end="59:29"><expr pos:start="59:21" pos:end="59:29"><name pos:start="59:21" pos:end="59:29">max_insns</name></expr></argument>, <argument pos:start="59:32" pos:end="59:44"><expr pos:start="59:32" pos:end="59:44"><name pos:start="59:32" pos:end="59:44">TCG_MAX_INSNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="65:49">/* Since the ISA is fixed-width, we can bound by the number

       of instructions remaining on the page.  */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:49"><expr pos:start="67:5" pos:end="67:48"><name pos:start="67:5" pos:end="67:13">num_insns</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <operator pos:start="67:17" pos:end="67:17">-</operator><operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:24"><name pos:start="67:19" pos:end="67:21">ctx</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:24">pc</name></name> <operator pos:start="67:26" pos:end="67:26">|</operator> <name pos:start="67:28" pos:end="67:43">TARGET_PAGE_MASK</name><operator pos:start="67:44" pos:end="67:44">)</operator> <operator pos:start="67:46" pos:end="67:46">/</operator> <literal type="number" pos:start="67:48" pos:end="67:48">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:42"><expr pos:start="69:5" pos:end="69:41"><name pos:start="69:5" pos:end="69:13">max_insns</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <call pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:19">MIN</name><argument_list pos:start="69:20" pos:end="69:41">(<argument pos:start="69:21" pos:end="69:29"><expr pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:29">max_insns</name></expr></argument>, <argument pos:start="69:32" pos:end="69:40"><expr pos:start="69:32" pos:end="69:40"><name pos:start="69:32" pos:end="69:40">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:43">/* Single stepping means just that.  */</comment>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:45">(<expr pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:30">singlestep_enabled</name></name> <operator pos:start="75:32" pos:end="75:33">||</operator> <name pos:start="75:35" pos:end="75:44">singlestep</name></expr>)</condition> <block pos:start="75:47" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:22">

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:17">max_insns</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><call pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:16">gen_tb_start</name><argument_list pos:start="83:17" pos:end="83:20">(<argument pos:start="83:18" pos:end="83:19"><expr pos:start="83:18" pos:end="83:19"><name pos:start="83:18" pos:end="83:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="90:0"><expr pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:13">num_insns</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <literal type="number" pos:start="85:17" pos:end="85:17">0</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="89:1" pos:end="89:23">#<cpp:directive pos:start="89:2" pos:end="89:6">ifdef</cpp:directive> <name pos:start="89:8" pos:end="89:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <if_stmt pos:start="91:5" pos:end="98:0"><if pos:start="91:5" pos:end="98:0">if <condition pos:start="91:8" pos:end="91:32">(<expr pos:start="91:9" pos:end="91:31"><name pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:11">ctx</name><operator pos:start="91:12" pos:end="91:12">.</operator><name pos:start="91:13" pos:end="91:19">tbflags</name></name> <operator pos:start="91:21" pos:end="91:21">&amp;</operator> <name pos:start="91:23" pos:end="91:31">GUSA_MASK</name></expr>)</condition> <block pos:start="91:34" pos:end="98:0">{<block_content pos:start="93:9" pos:end="93:55">

        <expr_stmt pos:start="93:9" pos:end="93:55"><expr pos:start="93:9" pos:end="93:54"><name pos:start="93:9" pos:end="93:17">num_insns</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <call pos:start="93:21" pos:end="93:54"><name pos:start="93:21" pos:end="93:31">decode_gusa</name><argument_list pos:start="93:32" pos:end="93:54">(<argument pos:start="93:33" pos:end="93:36"><expr pos:start="93:33" pos:end="93:36"><operator pos:start="93:33" pos:end="93:33">&amp;</operator><name pos:start="93:34" pos:end="93:36">ctx</name></expr></argument>, <argument pos:start="93:39" pos:end="93:41"><expr pos:start="93:39" pos:end="93:41"><name pos:start="93:39" pos:end="93:41">env</name></expr></argument>, <argument pos:start="93:44" pos:end="93:53"><expr pos:start="93:44" pos:end="93:53"><operator pos:start="93:44" pos:end="93:44">&amp;</operator><name pos:start="93:45" pos:end="93:53">max_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>



    <while pos:start="101:5" pos:end="153:5">while <condition pos:start="101:11" pos:end="105:33">(<expr pos:start="101:12" pos:end="105:32"><name pos:start="101:12" pos:end="101:21"><name pos:start="101:12" pos:end="101:14">ctx</name><operator pos:start="101:15" pos:end="101:15">.</operator><name pos:start="101:16" pos:end="101:21">bstate</name></name> <operator pos:start="101:23" pos:end="101:24">==</operator> <name pos:start="101:26" pos:end="101:32">BS_NONE</name>

           <operator pos:start="103:12" pos:end="103:13">&amp;&amp;</operator> <name pos:start="103:15" pos:end="103:23">num_insns</name> <operator pos:start="103:25" pos:end="103:25">&lt;</operator> <name pos:start="103:27" pos:end="103:35">max_insns</name>

           <operator pos:start="105:12" pos:end="105:13">&amp;&amp;</operator> <operator pos:start="105:15" pos:end="105:15">!</operator><call pos:start="105:16" pos:end="105:32"><name pos:start="105:16" pos:end="105:30">tcg_op_buf_full</name><argument_list pos:start="105:31" pos:end="105:32">()</argument_list></call></expr>)</condition> <block pos:start="105:35" pos:end="153:5">{<block_content pos:start="107:9" pos:end="151:20">

        <expr_stmt pos:start="107:9" pos:end="107:49"><expr pos:start="107:9" pos:end="107:48"><call pos:start="107:9" pos:end="107:48"><name pos:start="107:9" pos:end="107:26">tcg_gen_insn_start</name><argument_list pos:start="107:27" pos:end="107:48">(<argument pos:start="107:28" pos:end="107:33"><expr pos:start="107:28" pos:end="107:33"><name pos:start="107:28" pos:end="107:33"><name pos:start="107:28" pos:end="107:30">ctx</name><operator pos:start="107:31" pos:end="107:31">.</operator><name pos:start="107:32" pos:end="107:33">pc</name></name></expr></argument>, <argument pos:start="107:36" pos:end="107:47"><expr pos:start="107:36" pos:end="107:47"><name pos:start="107:36" pos:end="107:47"><name pos:start="107:36" pos:end="107:38">ctx</name><operator pos:start="107:39" pos:end="107:39">.</operator><name pos:start="107:40" pos:end="107:47">envflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:20"><expr pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:17">num_insns</name><operator pos:start="109:18" pos:end="109:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="135:9"><if pos:start="113:9" pos:end="135:9">if <condition pos:start="113:12" pos:end="113:62">(<expr pos:start="113:13" pos:end="113:61"><call pos:start="113:13" pos:end="113:61"><name pos:start="113:13" pos:end="113:20">unlikely</name><argument_list pos:start="113:21" pos:end="113:61">(<argument pos:start="113:22" pos:end="113:60"><expr pos:start="113:22" pos:end="113:60"><call pos:start="113:22" pos:end="113:60"><name pos:start="113:22" pos:end="113:40">cpu_breakpoint_test</name><argument_list pos:start="113:41" pos:end="113:60">(<argument pos:start="113:42" pos:end="113:43"><expr pos:start="113:42" pos:end="113:43"><name pos:start="113:42" pos:end="113:43">cs</name></expr></argument>, <argument pos:start="113:46" pos:end="113:51"><expr pos:start="113:46" pos:end="113:51"><name pos:start="113:46" pos:end="113:51"><name pos:start="113:46" pos:end="113:48">ctx</name><operator pos:start="113:49" pos:end="113:49">.</operator><name pos:start="113:50" pos:end="113:51">pc</name></name></expr></argument>, <argument pos:start="113:54" pos:end="113:59"><expr pos:start="113:54" pos:end="113:59"><name pos:start="113:54" pos:end="113:59">BP_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:64" pos:end="135:9">{<block_content pos:start="117:13" pos:end="133:18">

            <comment type="block" pos:start="115:13" pos:end="115:71">/* We have hit a breakpoint - make sure PC is up-to-date */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:43"><expr pos:start="117:13" pos:end="117:42"><call pos:start="117:13" pos:end="117:42"><name pos:start="117:13" pos:end="117:30">gen_save_cpu_state</name><argument_list pos:start="117:31" pos:end="117:42">(<argument pos:start="117:32" pos:end="117:35"><expr pos:start="117:32" pos:end="117:35"><operator pos:start="117:32" pos:end="117:32">&amp;</operator><name pos:start="117:33" pos:end="117:35">ctx</name></expr></argument>, <argument pos:start="117:38" pos:end="117:41"><expr pos:start="117:38" pos:end="117:41"><name pos:start="117:38" pos:end="117:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:38"><expr pos:start="119:13" pos:end="119:37"><call pos:start="119:13" pos:end="119:37"><name pos:start="119:13" pos:end="119:28">gen_helper_debug</name><argument_list pos:start="119:29" pos:end="119:37">(<argument pos:start="119:30" pos:end="119:36"><expr pos:start="119:30" pos:end="119:36"><name pos:start="119:30" pos:end="119:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:33"><expr pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:15">ctx</name><operator pos:start="121:16" pos:end="121:16">.</operator><name pos:start="121:17" pos:end="121:22">bstate</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:32">BS_EXCP</name></expr>;</expr_stmt>

            <comment type="block" pos:start="123:13" pos:end="129:73">/* The address covered by the breakpoint must be included in

               [tb-&gt;pc, tb-&gt;pc + tb-&gt;size) in order to for it to be

               properly cleared -- thus we increment the PC here so that

               the logic setting tb-&gt;size below does the right thing.  */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:24"><expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:18"><name pos:start="131:13" pos:end="131:15">ctx</name><operator pos:start="131:16" pos:end="131:16">.</operator><name pos:start="131:17" pos:end="131:18">pc</name></name> <operator pos:start="131:20" pos:end="131:21">+=</operator> <literal type="number" pos:start="131:23" pos:end="131:23">2</literal></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:64">(<expr pos:start="139:13" pos:end="139:63"><name pos:start="139:13" pos:end="139:21">num_insns</name> <operator pos:start="139:23" pos:end="139:24">==</operator> <name pos:start="139:26" pos:end="139:34">max_insns</name> <operator pos:start="139:36" pos:end="139:37">&amp;&amp;</operator> <operator pos:start="139:39" pos:end="139:39">(</operator><name pos:start="139:40" pos:end="139:49"><name pos:start="139:40" pos:end="139:41">tb</name><operator pos:start="139:42" pos:end="139:43">-&gt;</operator><name pos:start="139:44" pos:end="139:49">cflags</name></name> <operator pos:start="139:51" pos:end="139:51">&amp;</operator> <name pos:start="139:53" pos:end="139:62">CF_LAST_IO</name><operator pos:start="139:63" pos:end="139:63">)</operator></expr>)</condition> <block pos:start="139:66" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:27">

            <expr_stmt pos:start="141:13" pos:end="141:27"><expr pos:start="141:13" pos:end="141:26"><call pos:start="141:13" pos:end="141:26"><name pos:start="141:13" pos:end="141:24">gen_io_start</name><argument_list pos:start="141:25" pos:end="141:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:48"><expr pos:start="147:9" pos:end="147:47"><name pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:11">ctx</name><operator pos:start="147:12" pos:end="147:12">.</operator><name pos:start="147:13" pos:end="147:18">opcode</name></name> <operator pos:start="147:20" pos:end="147:20">=</operator> <call pos:start="147:22" pos:end="147:47"><name pos:start="147:22" pos:end="147:34">cpu_lduw_code</name><argument_list pos:start="147:35" pos:end="147:47">(<argument pos:start="147:36" pos:end="147:38"><expr pos:start="147:36" pos:end="147:38"><name pos:start="147:36" pos:end="147:38">env</name></expr></argument>, <argument pos:start="147:41" pos:end="147:46"><expr pos:start="147:41" pos:end="147:46"><name pos:start="147:41" pos:end="147:46"><name pos:start="147:41" pos:end="147:43">ctx</name><operator pos:start="147:44" pos:end="147:44">.</operator><name pos:start="147:45" pos:end="147:46">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><call pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:18">decode_opc</name><argument_list pos:start="149:19" pos:end="149:24">(<argument pos:start="149:20" pos:end="149:23"><expr pos:start="149:20" pos:end="149:23"><operator pos:start="149:20" pos:end="149:20">&amp;</operator><name pos:start="149:21" pos:end="149:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="151:9" pos:end="151:20"><expr pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:14"><name pos:start="151:9" pos:end="151:11">ctx</name><operator pos:start="151:12" pos:end="151:12">.</operator><name pos:start="151:13" pos:end="151:14">pc</name></name> <operator pos:start="151:16" pos:end="151:17">+=</operator> <literal type="number" pos:start="151:19" pos:end="151:19">2</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:32">(<expr pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:10">tb</name><operator pos:start="155:11" pos:end="155:12">-&gt;</operator><name pos:start="155:13" pos:end="155:18">cflags</name></name> <operator pos:start="155:20" pos:end="155:20">&amp;</operator> <name pos:start="155:22" pos:end="155:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="155:34" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:21">

        <expr_stmt pos:start="157:9" pos:end="157:21"><expr pos:start="157:9" pos:end="157:20"><call pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:18">gen_io_end</name><argument_list pos:start="157:19" pos:end="157:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:37">(<expr pos:start="163:9" pos:end="163:36"><name pos:start="163:9" pos:end="163:19"><name pos:start="163:9" pos:end="163:11">ctx</name><operator pos:start="163:12" pos:end="163:12">.</operator><name pos:start="163:13" pos:end="163:19">tbflags</name></name> <operator pos:start="163:21" pos:end="163:21">&amp;</operator> <name pos:start="163:23" pos:end="163:36">GUSA_EXCLUSIVE</name></expr>)</condition> <block pos:start="163:39" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:35">

        <comment type="block" pos:start="165:9" pos:end="165:65">/* Ending the region of exclusivity.  Clear the bits.  */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:35"><expr pos:start="167:9" pos:end="167:34"><name pos:start="167:9" pos:end="167:20"><name pos:start="167:9" pos:end="167:11">ctx</name><operator pos:start="167:12" pos:end="167:12">.</operator><name pos:start="167:13" pos:end="167:20">envflags</name></name> <operator pos:start="167:22" pos:end="167:23">&amp;=</operator> <operator pos:start="167:25" pos:end="167:25">~</operator><name pos:start="167:26" pos:end="167:34">GUSA_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="211:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:31">(<expr pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:10">cs</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:30">singlestep_enabled</name></name></expr>)</condition> <block pos:start="173:33" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:34">

        <expr_stmt pos:start="175:9" pos:end="175:39"><expr pos:start="175:9" pos:end="175:38"><call pos:start="175:9" pos:end="175:38"><name pos:start="175:9" pos:end="175:26">gen_save_cpu_state</name><argument_list pos:start="175:27" pos:end="175:38">(<argument pos:start="175:28" pos:end="175:31"><expr pos:start="175:28" pos:end="175:31"><operator pos:start="175:28" pos:end="175:28">&amp;</operator><name pos:start="175:29" pos:end="175:31">ctx</name></expr></argument>, <argument pos:start="175:34" pos:end="175:37"><expr pos:start="175:34" pos:end="175:37"><name pos:start="175:34" pos:end="175:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:34"><expr pos:start="177:9" pos:end="177:33"><call pos:start="177:9" pos:end="177:33"><name pos:start="177:9" pos:end="177:24">gen_helper_debug</name><argument_list pos:start="177:25" pos:end="177:33">(<argument pos:start="177:26" pos:end="177:32"><expr pos:start="177:26" pos:end="177:32"><name pos:start="177:26" pos:end="177:32">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="211:5">else <block pos:start="179:12" pos:end="211:5">{<block_content pos:start="181:9" pos:end="209:9">

	<switch pos:start="181:9" pos:end="209:9">switch <condition pos:start="181:16" pos:end="181:27">(<expr pos:start="181:17" pos:end="181:26"><name pos:start="181:17" pos:end="181:26"><name pos:start="181:17" pos:end="181:19">ctx</name><operator pos:start="181:20" pos:end="181:20">.</operator><name pos:start="181:21" pos:end="181:26">bstate</name></name></expr>)</condition> <block pos:start="181:29" pos:end="209:9">{<block_content pos:start="183:9" pos:end="207:18">

        <case pos:start="183:9" pos:end="183:21">case <expr pos:start="183:14" pos:end="183:20"><name pos:start="183:14" pos:end="183:20">BS_STOP</name></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:43"><expr pos:start="185:13" pos:end="185:42"><call pos:start="185:13" pos:end="185:42"><name pos:start="185:13" pos:end="185:30">gen_save_cpu_state</name><argument_list pos:start="185:31" pos:end="185:42">(<argument pos:start="185:32" pos:end="185:35"><expr pos:start="185:32" pos:end="185:35"><operator pos:start="185:32" pos:end="185:32">&amp;</operator><name pos:start="185:33" pos:end="185:35">ctx</name></expr></argument>, <argument pos:start="185:38" pos:end="185:41"><expr pos:start="185:38" pos:end="185:41"><name pos:start="185:38" pos:end="185:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><call pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:27">tcg_gen_exit_tb</name><argument_list pos:start="187:28" pos:end="187:30">(<argument pos:start="187:29" pos:end="187:29"><expr pos:start="187:29" pos:end="187:29"><literal type="number" pos:start="187:29" pos:end="187:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        <case pos:start="191:9" pos:end="191:21">case <expr pos:start="191:14" pos:end="191:20"><name pos:start="191:14" pos:end="191:20">BS_NONE</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:44"><expr pos:start="193:13" pos:end="193:43"><call pos:start="193:13" pos:end="193:43"><name pos:start="193:13" pos:end="193:30">gen_save_cpu_state</name><argument_list pos:start="193:31" pos:end="193:43">(<argument pos:start="193:32" pos:end="193:35"><expr pos:start="193:32" pos:end="193:35"><operator pos:start="193:32" pos:end="193:32">&amp;</operator><name pos:start="193:33" pos:end="193:35">ctx</name></expr></argument>, <argument pos:start="193:38" pos:end="193:42"><expr pos:start="193:38" pos:end="193:42"><name pos:start="193:38" pos:end="193:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:41"><expr pos:start="195:13" pos:end="195:40"><call pos:start="195:13" pos:end="195:40"><name pos:start="195:13" pos:end="195:23">gen_goto_tb</name><argument_list pos:start="195:24" pos:end="195:40">(<argument pos:start="195:25" pos:end="195:28"><expr pos:start="195:25" pos:end="195:28"><operator pos:start="195:25" pos:end="195:25">&amp;</operator><name pos:start="195:26" pos:end="195:28">ctx</name></expr></argument>, <argument pos:start="195:31" pos:end="195:31"><expr pos:start="195:31" pos:end="195:31"><literal type="number" pos:start="195:31" pos:end="195:31">0</literal></expr></argument>, <argument pos:start="195:34" pos:end="195:39"><expr pos:start="195:34" pos:end="195:39"><name pos:start="195:34" pos:end="195:39"><name pos:start="195:34" pos:end="195:36">ctx</name><operator pos:start="195:37" pos:end="195:37">.</operator><name pos:start="195:38" pos:end="195:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <case pos:start="199:9" pos:end="199:21">case <expr pos:start="199:14" pos:end="199:20"><name pos:start="199:14" pos:end="199:20">BS_EXCP</name></expr>:</case>

            <comment type="block" pos:start="201:13" pos:end="201:30">/* fall through */</comment>

        <case pos:start="203:9" pos:end="203:23">case <expr pos:start="203:14" pos:end="203:22"><name pos:start="203:14" pos:end="203:22">BS_BRANCH</name></expr>:</case>

        <default pos:start="205:9" pos:end="205:16">default:</default>

            <break pos:start="207:13" pos:end="207:18">break;</break>

	</block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:30"><expr pos:start="215:5" pos:end="215:29"><call pos:start="215:5" pos:end="215:29"><name pos:start="215:5" pos:end="215:14">gen_tb_end</name><argument_list pos:start="215:15" pos:end="215:29">(<argument pos:start="215:16" pos:end="215:17"><expr pos:start="215:16" pos:end="215:17"><name pos:start="215:16" pos:end="215:17">tb</name></expr></argument>, <argument pos:start="215:20" pos:end="215:28"><expr pos:start="215:20" pos:end="215:28"><name pos:start="215:20" pos:end="215:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:33"><expr pos:start="219:5" pos:end="219:32"><name pos:start="219:5" pos:end="219:12"><name pos:start="219:5" pos:end="219:6">tb</name><operator pos:start="219:7" pos:end="219:8">-&gt;</operator><name pos:start="219:9" pos:end="219:12">size</name></name> <operator pos:start="219:14" pos:end="219:14">=</operator> <name pos:start="219:16" pos:end="219:21"><name pos:start="219:16" pos:end="219:18">ctx</name><operator pos:start="219:19" pos:end="219:19">.</operator><name pos:start="219:20" pos:end="219:21">pc</name></name> <operator pos:start="219:23" pos:end="219:23">-</operator> <name pos:start="219:25" pos:end="219:32">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="226:0"><expr pos:start="221:5" pos:end="221:26"><name pos:start="221:5" pos:end="221:14"><name pos:start="221:5" pos:end="221:6">tb</name><operator pos:start="221:7" pos:end="221:8">-&gt;</operator><name pos:start="221:9" pos:end="221:14">icount</name></name> <operator pos:start="221:16" pos:end="221:16">=</operator> <name pos:start="221:18" pos:end="221:26">num_insns</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="225:1" pos:end="225:18">#<cpp:directive pos:start="225:2" pos:end="225:6">ifdef</cpp:directive> <name pos:start="225:8" pos:end="225:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="227:5" pos:end="244:0"><if pos:start="227:5" pos:end="244:0">if <condition pos:start="227:8" pos:end="229:44">(<expr pos:start="227:9" pos:end="229:43"><call pos:start="227:9" pos:end="227:45"><name pos:start="227:9" pos:end="227:26">qemu_loglevel_mask</name><argument_list pos:start="227:27" pos:end="227:45">(<argument pos:start="227:28" pos:end="227:44"><expr pos:start="227:28" pos:end="227:44"><name pos:start="227:28" pos:end="227:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="229:9" pos:end="229:10">&amp;&amp;</operator> <call pos:start="229:12" pos:end="229:43"><name pos:start="229:12" pos:end="229:33">qemu_log_in_addr_range</name><argument_list pos:start="229:34" pos:end="229:43">(<argument pos:start="229:35" pos:end="229:42"><expr pos:start="229:35" pos:end="229:42"><name pos:start="229:35" pos:end="229:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:46" pos:end="244:0">{<block_content pos:start="231:9" pos:end="239:26">

        <expr_stmt pos:start="231:9" pos:end="231:24"><expr pos:start="231:9" pos:end="231:23"><call pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:21">qemu_log_lock</name><argument_list pos:start="231:22" pos:end="231:23">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="233:9" pos:end="233:26"><expr pos:start="233:9" pos:end="233:25"><call pos:start="233:9" pos:end="233:25"><name pos:start="233:9" pos:end="233:16">qemu_log</name><argument_list pos:start="233:17" pos:end="233:25">(<argument pos:start="233:18" pos:end="233:24"><expr pos:start="233:18" pos:end="233:24"><literal type="string" pos:start="233:18" pos:end="233:24">"IN:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="233:33" pos:end="233:65">/* , lookup_symbol(pc_start)); */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:61"><expr pos:start="235:9" pos:end="235:60"><call pos:start="235:9" pos:end="235:60"><name pos:start="235:9" pos:end="235:24">log_target_disas</name><argument_list pos:start="235:25" pos:end="235:60">(<argument pos:start="235:26" pos:end="235:27"><expr pos:start="235:26" pos:end="235:27"><name pos:start="235:26" pos:end="235:27">cs</name></expr></argument>, <argument pos:start="235:30" pos:end="235:37"><expr pos:start="235:30" pos:end="235:37"><name pos:start="235:30" pos:end="235:37">pc_start</name></expr></argument>, <argument pos:start="235:40" pos:end="235:56"><expr pos:start="235:40" pos:end="235:56"><name pos:start="235:40" pos:end="235:45"><name pos:start="235:40" pos:end="235:42">ctx</name><operator pos:start="235:43" pos:end="235:43">.</operator><name pos:start="235:44" pos:end="235:45">pc</name></name> <operator pos:start="235:47" pos:end="235:47">-</operator> <name pos:start="235:49" pos:end="235:56">pc_start</name></expr></argument>, <argument pos:start="235:59" pos:end="235:59"><expr pos:start="235:59" pos:end="235:59"><literal type="number" pos:start="235:59" pos:end="235:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="237:9" pos:end="237:23"><expr pos:start="237:9" pos:end="237:22"><call pos:start="237:9" pos:end="237:22"><name pos:start="237:9" pos:end="237:16">qemu_log</name><argument_list pos:start="237:17" pos:end="237:22">(<argument pos:start="237:18" pos:end="237:21"><expr pos:start="237:18" pos:end="237:21"><literal type="string" pos:start="237:18" pos:end="237:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:26"><expr pos:start="239:9" pos:end="239:25"><call pos:start="239:9" pos:end="239:25"><name pos:start="239:9" pos:end="239:23">qemu_log_unlock</name><argument_list pos:start="239:24" pos:end="239:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="243:1" pos:end="243:6">#<cpp:directive pos:start="243:2" pos:end="243:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
