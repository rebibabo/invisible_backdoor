<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4078.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:25"><name pos:start="1:1" pos:end="1:12">create_iovec</name><argument_list pos:start="1:13" pos:end="3:25">(<argument pos:start="1:14" pos:end="1:30">BlockBackend *blk</argument>, <argument pos:start="1:33" pos:end="1:50">QEMUIOVector *qiov</argument>, <argument pos:start="1:53" pos:end="1:63">char **argv</argument>, <argument pos:start="1:66" pos:end="1:75">int nr_iov</argument>,

             <argument pos:start="3:14" pos:end="3:24">int pattern</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:15">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">size_t</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:17">sizes</name> <init pos:start="7:19" pos:end="7:42">= <expr pos:start="7:21" pos:end="7:42"><call pos:start="7:21" pos:end="7:42"><name pos:start="7:21" pos:end="7:26">g_new0</name><argument_list pos:start="7:27" pos:end="7:42">(<argument pos:start="7:28" pos:end="7:33"><expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">size_t</name></expr></argument>, <argument pos:start="7:36" pos:end="7:41"><expr pos:start="7:36" pos:end="7:41"><name pos:start="7:36" pos:end="7:41">nr_iov</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:16">count</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">buf</name> <init pos:start="11:15" pos:end="11:20">= <expr pos:start="11:17" pos:end="11:20"><name pos:start="11:17" pos:end="11:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="55:5">for <control pos:start="19:9" pos:end="19:32">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:27"><expr pos:start="19:17" pos:end="19:26"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:26">nr_iov</name></expr>;</condition> <incr pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:29">i</name><operator pos:start="19:30" pos:end="19:31">++</operator></expr></incr>)</control> <block pos:start="19:34" pos:end="55:5">{<block_content pos:start="21:9" pos:end="53:21">

        <decl_stmt pos:start="21:9" pos:end="21:28"><decl pos:start="21:9" pos:end="21:27"><type pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">char</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:17">arg</name> <init pos:start="21:19" pos:end="21:27">= <expr pos:start="21:21" pos:end="21:27"><name pos:start="21:21" pos:end="21:27"><name pos:start="21:21" pos:end="21:24">argv</name><index pos:start="21:25" pos:end="21:27">[<expr pos:start="21:26" pos:end="21:26"><name pos:start="21:26" pos:end="21:26">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:20"><decl pos:start="23:9" pos:end="23:19"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">int64_t</name></type> <name pos:start="23:17" pos:end="23:19">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:11">len</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:25"><name pos:start="27:15" pos:end="27:20">cvtnum</name><argument_list pos:start="27:21" pos:end="27:25">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:15">len</name> <operator pos:start="29:17" pos:end="29:17">&lt;</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>)</condition> <block pos:start="29:22" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:22">

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><call pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:28">print_cvtnum_err</name><argument_list pos:start="31:29" pos:end="31:38">(<argument pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:32">len</name></expr></argument>, <argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="33:13" pos:end="33:22">goto <name pos:start="33:18" pos:end="33:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:15">len</name> <operator pos:start="39:17" pos:end="39:17">&gt;</operator> <name pos:start="39:19" pos:end="39:26">SIZE_MAX</name></expr>)</condition> <block pos:start="39:29" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:22">

            <expr_stmt pos:start="41:13" pos:end="43:49"><expr pos:start="41:13" pos:end="43:48"><call pos:start="41:13" pos:end="43:48"><name pos:start="41:13" pos:end="41:18">printf</name><argument_list pos:start="41:19" pos:end="43:48">(<argument pos:start="41:20" pos:end="41:62"><expr pos:start="41:20" pos:end="41:62"><literal type="string" pos:start="41:20" pos:end="41:62">"Argument '%s' exceeds maximum size %llu\n"</literal></expr></argument>, <argument pos:start="41:65" pos:end="41:67"><expr pos:start="41:65" pos:end="41:67"><name pos:start="41:65" pos:end="41:67">arg</name></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:47"><expr pos:start="43:20" pos:end="43:47"><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:28">unsigned</name> <name pos:start="43:30" pos:end="43:33">long</name> <name pos:start="43:35" pos:end="43:38">long</name><operator pos:start="43:39" pos:end="43:39">)</operator><name pos:start="43:40" pos:end="43:47">SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:22">goto <name pos:start="45:18" pos:end="45:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:23"><expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:13">sizes</name><index pos:start="51:14" pos:end="51:16">[<expr pos:start="51:15" pos:end="51:15"><name pos:start="51:15" pos:end="51:15">i</name></expr>]</index></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:22">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:21"><expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:13">count</name> <operator pos:start="53:15" pos:end="53:16">+=</operator> <name pos:start="53:18" pos:end="53:20">len</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><call pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:19">qemu_iovec_init</name><argument_list pos:start="59:20" pos:end="59:33">(<argument pos:start="59:21" pos:end="59:24"><expr pos:start="59:21" pos:end="59:24"><name pos:start="59:21" pos:end="59:24">qiov</name></expr></argument>, <argument pos:start="59:27" pos:end="59:32"><expr pos:start="59:27" pos:end="59:32"><name pos:start="59:27" pos:end="59:32">nr_iov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:7">buf</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:11">p</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:48"><name pos:start="63:15" pos:end="63:27">qemu_io_alloc</name><argument_list pos:start="63:28" pos:end="63:48">(<argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">blk</name></expr></argument>, <argument pos:start="63:34" pos:end="63:38"><expr pos:start="63:34" pos:end="63:38"><name pos:start="63:34" pos:end="63:38">count</name></expr></argument>, <argument pos:start="63:41" pos:end="63:47"><expr pos:start="63:41" pos:end="63:47"><name pos:start="63:41" pos:end="63:47">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="67:5" pos:end="73:5">for <control pos:start="67:9" pos:end="67:32">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:26">nr_iov</name></expr>;</condition> <incr pos:start="67:29" pos:end="67:31"><expr pos:start="67:29" pos:end="67:31"><name pos:start="67:29" pos:end="67:29">i</name><operator pos:start="67:30" pos:end="67:31">++</operator></expr></incr>)</control> <block pos:start="67:34" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:22">

        <expr_stmt pos:start="69:9" pos:end="69:42"><expr pos:start="69:9" pos:end="69:41"><call pos:start="69:9" pos:end="69:41"><name pos:start="69:9" pos:end="69:22">qemu_iovec_add</name><argument_list pos:start="69:23" pos:end="69:41">(<argument pos:start="69:24" pos:end="69:27"><expr pos:start="69:24" pos:end="69:27"><name pos:start="69:24" pos:end="69:27">qiov</name></expr></argument>, <argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><name pos:start="69:30" pos:end="69:30">p</name></expr></argument>, <argument pos:start="69:33" pos:end="69:40"><expr pos:start="69:33" pos:end="69:40"><name pos:start="69:33" pos:end="69:40"><name pos:start="69:33" pos:end="69:37">sizes</name><index pos:start="69:38" pos:end="69:40">[<expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:9">p</name> <operator pos:start="71:11" pos:end="71:12">+=</operator> <name pos:start="71:14" pos:end="71:21"><name pos:start="71:14" pos:end="71:18">sizes</name><index pos:start="71:19" pos:end="71:21">[<expr pos:start="71:20" pos:end="71:20"><name pos:start="71:20" pos:end="71:20">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="77:1" pos:end="77:5"><name pos:start="77:1" pos:end="77:4">fail</name>:</label>

    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><call pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:10">g_free</name><argument_list pos:start="79:11" pos:end="79:17">(<argument pos:start="79:12" pos:end="79:16"><expr pos:start="79:12" pos:end="79:16"><name pos:start="79:12" pos:end="79:16">sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">buf</name></expr>;</return>

</block_content>}</block>
</unit>
