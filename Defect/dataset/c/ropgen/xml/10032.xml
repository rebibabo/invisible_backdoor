<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10032.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">vtd_address_space_unmap</name><parameter_list pos:start="1:36" pos:end="1:74">(<parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><name pos:start="1:37" pos:end="1:51">VTDAddressSpace</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">as</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:73"><decl pos:start="1:58" pos:end="1:73"><type pos:start="1:58" pos:end="1:73"><name pos:start="1:58" pos:end="1:70">IOMMUNotifier</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:73">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:40">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">IOMMUTLBEntry</name></type> <name pos:start="5:19" pos:end="5:23">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:15">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:16">start</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:20">n</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:27">start</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:14">end</name> <init pos:start="11:16" pos:end="11:23">= <expr pos:start="11:18" pos:end="11:23"><name pos:start="11:18" pos:end="11:23"><name pos:start="11:18" pos:end="11:18">n</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:23">end</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="23:7">/*

     * Note: all the codes in this function has a assumption that IOVA

     * bits are no more than VTD_MGAW bits (which is restricted by

     * VT-d spec), otherwise we need to consider overflow of 64 bits.

     */</comment>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:55">(<expr pos:start="27:9" pos:end="27:54"><name pos:start="27:9" pos:end="27:11">end</name> <operator pos:start="27:13" pos:end="27:13">&gt;</operator> <call pos:start="27:15" pos:end="27:54"><name pos:start="27:15" pos:end="27:30">VTD_ADDRESS_SIZE</name><argument_list pos:start="27:31" pos:end="27:54">(<argument pos:start="27:32" pos:end="27:53"><expr pos:start="27:32" pos:end="27:53"><name pos:start="27:32" pos:end="27:53">VTD_HOST_ADDRESS_WIDTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:57" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:55">

        <comment type="block" pos:start="29:9" pos:end="35:11">/*

         * Don't need to unmap regions that is bigger than the whole

         * VT-d supported address space size

         */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:11">end</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:54"><name pos:start="37:15" pos:end="37:30">VTD_ADDRESS_SIZE</name><argument_list pos:start="37:31" pos:end="37:54">(<argument pos:start="37:32" pos:end="37:53"><expr pos:start="37:32" pos:end="37:53"><name pos:start="37:32" pos:end="37:53">VTD_HOST_ADDRESS_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:24">(<argument pos:start="43:12" pos:end="43:23"><expr pos:start="43:12" pos:end="43:23"><name pos:start="43:12" pos:end="43:16">start</name> <operator pos:start="43:18" pos:end="43:19">&lt;=</operator> <name pos:start="43:21" pos:end="43:23">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:23"><expr pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:8">size</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <name pos:start="45:12" pos:end="45:14">end</name> <operator pos:start="45:16" pos:end="45:16">-</operator> <name pos:start="45:18" pos:end="45:22">start</name></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="71:5"><if pos:start="49:5" pos:end="71:5">if <condition pos:start="49:8" pos:end="49:27">(<expr pos:start="49:9" pos:end="49:26"><call pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:15">ctpop64</name><argument_list pos:start="49:16" pos:end="49:21">(<argument pos:start="49:17" pos:end="49:20"><expr pos:start="49:17" pos:end="49:20"><name pos:start="49:17" pos:end="49:20">size</name></expr></argument>)</argument_list></call> <operator pos:start="49:23" pos:end="49:24">!=</operator> <literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr>)</condition> <block pos:start="49:29" pos:end="71:5">{<block_content pos:start="59:9" pos:end="69:25">

        <comment type="block" pos:start="51:9" pos:end="57:11">/*

         * This size cannot format a correct mask. Let's enlarge it to

         * suite the minimum available mask.

         */</comment>

        <decl_stmt pos:start="59:9" pos:end="59:33"><decl pos:start="59:9" pos:end="59:32"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">n</name> <init pos:start="59:15" pos:end="59:32">= <expr pos:start="59:17" pos:end="59:32"><literal type="number" pos:start="59:17" pos:end="59:20">64</literal> <operator pos:start="59:20" pos:end="59:20">-</operator> <call pos:start="59:22" pos:end="59:32"><name pos:start="59:22" pos:end="59:26">clz64</name><argument_list pos:start="59:27" pos:end="59:32">(<argument pos:start="59:28" pos:end="59:31"><expr pos:start="59:28" pos:end="59:31"><name pos:start="59:28" pos:end="59:31">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:13">n</name> <operator pos:start="61:15" pos:end="61:15">&gt;</operator> <name pos:start="61:17" pos:end="61:24">VTD_MGAW</name></expr>)</condition> <block pos:start="61:27" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:25">

            <comment type="block" pos:start="63:13" pos:end="63:69">/* should not happen, but in case it happens, limit it */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:13">n</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:24">VTD_MGAW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:25"><expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:12">size</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <literal type="number" pos:start="69:16" pos:end="69:19">1ULL</literal> <operator pos:start="69:21" pos:end="69:22">&lt;&lt;</operator> <name pos:start="69:24" pos:end="69:24">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:44"><expr pos:start="75:5" pos:end="75:43"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:9">entry</name><operator pos:start="75:10" pos:end="75:10">.</operator><name pos:start="75:11" pos:end="75:19">target_as</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <operator pos:start="75:23" pos:end="75:23">&amp;</operator><name pos:start="75:24" pos:end="75:43">address_space_memory</name></expr>;</expr_stmt>

    <comment type="block" pos:start="77:5" pos:end="77:34">/* Adjust iova for the size */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:40"><expr pos:start="79:5" pos:end="79:39"><name pos:start="79:5" pos:end="79:14"><name pos:start="79:5" pos:end="79:9">entry</name><operator pos:start="79:10" pos:end="79:10">.</operator><name pos:start="79:11" pos:end="79:14">iova</name></name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:25"><name pos:start="79:18" pos:end="79:18">n</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:25">start</name></name> <operator pos:start="79:27" pos:end="79:27">&amp;</operator> <operator pos:start="79:29" pos:end="79:29">~</operator><operator pos:start="79:30" pos:end="79:30">(</operator><name pos:start="79:31" pos:end="79:34">size</name> <operator pos:start="79:36" pos:end="79:36">-</operator> <literal type="number" pos:start="79:38" pos:end="79:38">1</literal><operator pos:start="79:39" pos:end="79:39">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="81:45">/* This field is meaningless for unmap */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:30"><expr pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:9">entry</name><operator pos:start="83:10" pos:end="83:10">.</operator><name pos:start="83:11" pos:end="83:25">translated_addr</name></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:28"><expr pos:start="85:5" pos:end="85:27"><name pos:start="85:5" pos:end="85:14"><name pos:start="85:5" pos:end="85:9">entry</name><operator pos:start="85:10" pos:end="85:10">.</operator><name pos:start="85:11" pos:end="85:14">perm</name></name> <operator pos:start="85:16" pos:end="85:16">=</operator> <name pos:start="85:18" pos:end="85:27">IOMMU_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:31"><expr pos:start="87:5" pos:end="87:30"><name pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:9">entry</name><operator pos:start="87:10" pos:end="87:10">.</operator><name pos:start="87:11" pos:end="87:19">addr_mask</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:26">size</name> <operator pos:start="87:28" pos:end="87:28">-</operator> <literal type="number" pos:start="87:30" pos:end="87:30">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="97:47"><expr pos:start="91:5" pos:end="97:46"><call pos:start="91:5" pos:end="97:46"><name pos:start="91:5" pos:end="91:28">trace_vtd_as_unmap_whole</name><argument_list pos:start="91:29" pos:end="97:46">(<argument pos:start="91:30" pos:end="91:49"><expr pos:start="91:30" pos:end="91:49"><call pos:start="91:30" pos:end="91:49"><name pos:start="91:30" pos:end="91:40">pci_bus_num</name><argument_list pos:start="91:41" pos:end="91:49">(<argument pos:start="91:42" pos:end="91:48"><expr pos:start="91:42" pos:end="91:48"><name pos:start="91:42" pos:end="91:48"><name pos:start="91:42" pos:end="91:43">as</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:48">bus</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="93:30" pos:end="93:52"><expr pos:start="93:30" pos:end="93:52"><call pos:start="93:30" pos:end="93:52"><name pos:start="93:30" pos:end="93:41">VTD_PCI_SLOT</name><argument_list pos:start="93:42" pos:end="93:52">(<argument pos:start="93:43" pos:end="93:51"><expr pos:start="93:43" pos:end="93:51"><name pos:start="93:43" pos:end="93:51"><name pos:start="93:43" pos:end="93:44">as</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:51">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="95:30" pos:end="95:52"><expr pos:start="95:30" pos:end="95:52"><call pos:start="95:30" pos:end="95:52"><name pos:start="95:30" pos:end="95:41">VTD_PCI_FUNC</name><argument_list pos:start="95:42" pos:end="95:52">(<argument pos:start="95:43" pos:end="95:51"><expr pos:start="95:43" pos:end="95:51"><name pos:start="95:43" pos:end="95:51"><name pos:start="95:43" pos:end="95:44">as</name><operator pos:start="95:45" pos:end="95:46">-&gt;</operator><name pos:start="95:47" pos:end="95:51">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="97:30" pos:end="97:39"><expr pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:34">entry</name><operator pos:start="97:35" pos:end="97:35">.</operator><name pos:start="97:36" pos:end="97:39">iova</name></name></expr></argument>, <argument pos:start="97:42" pos:end="97:45"><expr pos:start="97:42" pos:end="97:45"><name pos:start="97:42" pos:end="97:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:40"><expr pos:start="101:5" pos:end="101:39"><call pos:start="101:5" pos:end="101:39"><name pos:start="101:5" pos:end="101:28">memory_region_notify_one</name><argument_list pos:start="101:29" pos:end="101:39">(<argument pos:start="101:30" pos:end="101:30"><expr pos:start="101:30" pos:end="101:30"><name pos:start="101:30" pos:end="101:30">n</name></expr></argument>, <argument pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:38"><operator pos:start="101:33" pos:end="101:33">&amp;</operator><name pos:start="101:34" pos:end="101:38">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
