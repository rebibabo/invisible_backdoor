<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4658.c" pos:tabs="8"><function pos:start="1:1" pos:end="246:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">backup_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="246:1">{<block_content pos:start="5:5" pos:end="244:70">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BackupBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">job</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BackupCompleteData</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:41">= <expr pos:start="9:28" pos:end="9:41"><name pos:start="9:28" pos:end="9:41"><name pos:start="9:28" pos:end="9:30">job</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:38">common</name><operator pos:start="9:39" pos:end="9:39">.</operator><name pos:start="9:40" pos:end="9:41">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:28">target</name> <init pos:start="11:30" pos:end="11:42">= <expr pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:42"><name pos:start="11:32" pos:end="11:34">job</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:42">target</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">BlockdevOnError</name></type> <name pos:start="13:21" pos:end="13:35">on_target_error</name> <init pos:start="13:37" pos:end="13:58">= <expr pos:start="13:39" pos:end="13:58"><name pos:start="13:39" pos:end="13:58"><name pos:start="13:39" pos:end="13:41">job</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">on_target_error</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="19:6"><decl pos:start="15:5" pos:end="19:5"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">NotifierWithReturn</name></type> <name pos:start="15:24" pos:end="15:35">before_write</name> <init pos:start="15:37" pos:end="19:5">= <expr pos:start="15:39" pos:end="19:5"><block pos:start="15:39" pos:end="19:5">{

        <expr pos:start="17:9" pos:end="17:44"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:15">notify</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:44">backup_before_write_notify</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:17">start</name></decl>, <decl pos:start="21:20" pos:end="21:22"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:20" pos:end="21:22">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><call pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:14">QLIST_INIT</name><argument_list pos:start="27:15" pos:end="27:35">(<argument pos:start="27:16" pos:end="27:34"><expr pos:start="27:16" pos:end="27:34"><operator pos:start="27:16" pos:end="27:16">&amp;</operator><name pos:start="27:17" pos:end="27:34"><name pos:start="27:17" pos:end="27:19">job</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:34">inflight_reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><call pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:23">qemu_co_rwlock_init</name><argument_list pos:start="29:24" pos:end="29:43">(<argument pos:start="29:25" pos:end="29:42"><expr pos:start="29:25" pos:end="29:42"><operator pos:start="29:25" pos:end="29:25">&amp;</operator><name pos:start="29:26" pos:end="29:42"><name pos:start="29:26" pos:end="29:28">job</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:42">flush_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:14"><expr pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:9">start</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="37:51"><expr pos:start="35:5" pos:end="37:50"><name pos:start="35:5" pos:end="35:7">end</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="37:50"><name pos:start="35:11" pos:end="35:22">DIV_ROUND_UP</name><argument_list pos:start="35:23" pos:end="37:50">(<argument pos:start="35:24" pos:end="35:57"><expr pos:start="35:24" pos:end="35:57"><name pos:start="35:24" pos:end="35:38"><name pos:start="35:24" pos:end="35:26">job</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:34">common</name><operator pos:start="35:35" pos:end="35:35">.</operator><name pos:start="35:36" pos:end="35:38">len</name></name> <operator pos:start="35:40" pos:end="35:40">/</operator> <name pos:start="35:42" pos:end="35:57">BDRV_SECTOR_SIZE</name></expr></argument>,

                       <argument pos:start="37:24" pos:end="37:49"><expr pos:start="37:24" pos:end="37:49"><name pos:start="37:24" pos:end="37:49">BACKUP_SECTORS_PER_CLUSTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:7">job</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:15">bitmap</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:39"><name pos:start="41:19" pos:end="41:31">hbitmap_alloc</name><argument_list pos:start="41:32" pos:end="41:39">(<argument pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:35">end</name></expr></argument>, <argument pos:start="41:38" pos:end="41:38"><expr pos:start="41:38" pos:end="41:38"><literal type="number" pos:start="41:38" pos:end="41:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><call pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:31">bdrv_set_enable_write_cache</name><argument_list pos:start="45:32" pos:end="45:45">(<argument pos:start="45:33" pos:end="45:38"><expr pos:start="45:33" pos:end="45:38"><name pos:start="45:33" pos:end="45:38">target</name></expr></argument>, <argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:64"><expr pos:start="47:5" pos:end="47:63"><call pos:start="47:5" pos:end="47:63"><name pos:start="47:5" pos:end="47:21">bdrv_set_on_error</name><argument_list pos:start="47:22" pos:end="47:63">(<argument pos:start="47:23" pos:end="47:28"><expr pos:start="47:23" pos:end="47:28"><name pos:start="47:23" pos:end="47:28">target</name></expr></argument>, <argument pos:start="47:31" pos:end="47:45"><expr pos:start="47:31" pos:end="47:45"><name pos:start="47:31" pos:end="47:45">on_target_error</name></expr></argument>, <argument pos:start="47:48" pos:end="47:62"><expr pos:start="47:48" pos:end="47:62"><name pos:start="47:48" pos:end="47:62">on_target_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><call pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:24">bdrv_iostatus_enable</name><argument_list pos:start="49:25" pos:end="49:32">(<argument pos:start="49:26" pos:end="49:31"><expr pos:start="49:26" pos:end="49:31"><name pos:start="49:26" pos:end="49:31">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:54"><expr pos:start="53:5" pos:end="53:53"><call pos:start="53:5" pos:end="53:53"><name pos:start="53:5" pos:end="53:34">bdrv_add_before_write_notifier</name><argument_list pos:start="53:35" pos:end="53:53">(<argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><name pos:start="53:36" pos:end="53:37">bs</name></expr></argument>, <argument pos:start="53:40" pos:end="53:52"><expr pos:start="53:40" pos:end="53:52"><operator pos:start="53:40" pos:end="53:40">&amp;</operator><name pos:start="53:41" pos:end="53:52">before_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="215:5"><if pos:start="57:5" pos:end="73:5">if <condition pos:start="57:8" pos:end="57:48">(<expr pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:11">job</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:22">sync_mode</name></name> <operator pos:start="57:24" pos:end="57:25">==</operator> <name pos:start="57:27" pos:end="57:47">MIRROR_SYNC_MODE_NONE</name></expr>)</condition> <block pos:start="57:50" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:9">

        <while pos:start="59:9" pos:end="71:9">while <condition pos:start="59:15" pos:end="59:53">(<expr pos:start="59:16" pos:end="59:52"><operator pos:start="59:16" pos:end="59:16">!</operator><call pos:start="59:17" pos:end="59:52"><name pos:start="59:17" pos:end="59:38">block_job_is_cancelled</name><argument_list pos:start="59:39" pos:end="59:52">(<argument pos:start="59:40" pos:end="59:51"><expr pos:start="59:40" pos:end="59:51"><operator pos:start="59:40" pos:end="59:40">&amp;</operator><name pos:start="59:41" pos:end="59:51"><name pos:start="59:41" pos:end="59:43">job</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:51">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:55" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:36">

            <comment type="block" pos:start="61:13" pos:end="63:55">/* Yield until the job is cancelled.  We just let our before_write

             * notify callback service CoW requests. */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:37"><expr pos:start="65:13" pos:end="65:36"><name pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:15">job</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:23">common</name><operator pos:start="65:24" pos:end="65:24">.</operator><name pos:start="65:25" pos:end="65:28">busy</name></name> <operator pos:start="65:30" pos:end="65:30">=</operator> <name pos:start="65:32" pos:end="65:36">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><call pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:32">qemu_coroutine_yield</name><argument_list pos:start="67:33" pos:end="67:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:15">job</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:23">common</name><operator pos:start="69:24" pos:end="69:24">.</operator><name pos:start="69:25" pos:end="69:28">busy</name></name> <operator pos:start="69:30" pos:end="69:30">=</operator> <name pos:start="69:32" pos:end="69:35">true</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="215:5">else <block pos:start="73:12" pos:end="215:5">{<block_content pos:start="77:9" pos:end="213:9">

        <comment type="block" pos:start="75:9" pos:end="75:61">/* Both FULL and TOP SYNC_MODE's require copying.. */</comment>

        <for pos:start="77:9" pos:end="213:9">for <control pos:start="77:13" pos:end="77:36">(<init pos:start="77:14" pos:end="77:14">;</init> <condition pos:start="77:16" pos:end="77:27"><expr pos:start="77:16" pos:end="77:26"><name pos:start="77:16" pos:end="77:20">start</name> <operator pos:start="77:22" pos:end="77:22">&lt;</operator> <name pos:start="77:24" pos:end="77:26">end</name></expr>;</condition> <incr pos:start="77:29" pos:end="77:35"><expr pos:start="77:29" pos:end="77:35"><name pos:start="77:29" pos:end="77:33">start</name><operator pos:start="77:34" pos:end="77:35">++</operator></expr></incr>)</control> <block pos:start="77:38" pos:end="213:9">{<block_content pos:start="79:13" pos:end="211:13">

            <decl_stmt pos:start="79:13" pos:end="79:31"><decl pos:start="79:13" pos:end="79:30"><type pos:start="79:13" pos:end="79:16"><name pos:start="79:13" pos:end="79:16">bool</name></type> <name pos:start="79:18" pos:end="79:30">error_is_read</name></decl>;</decl_stmt>



            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:53">(<expr pos:start="83:17" pos:end="83:52"><call pos:start="83:17" pos:end="83:52"><name pos:start="83:17" pos:end="83:38">block_job_is_cancelled</name><argument_list pos:start="83:39" pos:end="83:52">(<argument pos:start="83:40" pos:end="83:51"><expr pos:start="83:40" pos:end="83:51"><operator pos:start="83:40" pos:end="83:40">&amp;</operator><name pos:start="83:41" pos:end="83:51"><name pos:start="83:41" pos:end="83:43">job</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:51">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:55" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:22">

                <break pos:start="85:17" pos:end="85:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="91:13" pos:end="95:15">/* we need to yield so that qemu_aio_flush() returns.

             * (without, VM does not reboot)

             */</comment>

            <if_stmt pos:start="97:13" pos:end="111:13"><if pos:start="97:13" pos:end="107:13">if <condition pos:start="97:16" pos:end="97:34">(<expr pos:start="97:17" pos:end="97:33"><name pos:start="97:17" pos:end="97:33"><name pos:start="97:17" pos:end="97:19">job</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:27">common</name><operator pos:start="97:28" pos:end="97:28">.</operator><name pos:start="97:29" pos:end="97:33">speed</name></name></expr>)</condition> <block pos:start="97:36" pos:end="107:13">{<block_content pos:start="99:17" pos:end="105:80">

                <decl_stmt pos:start="99:17" pos:end="101:56"><decl pos:start="99:17" pos:end="101:55"><type pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:24">uint64_t</name></type> <name pos:start="99:26" pos:end="99:33">delay_ns</name> <init pos:start="99:35" pos:end="101:55">= <expr pos:start="99:37" pos:end="101:55"><call pos:start="99:37" pos:end="101:55"><name pos:start="99:37" pos:end="99:61">ratelimit_calculate_delay</name><argument_list pos:start="99:62" pos:end="101:55">(

                        <argument pos:start="101:25" pos:end="101:35"><expr pos:start="101:25" pos:end="101:35"><operator pos:start="101:25" pos:end="101:25">&amp;</operator><name pos:start="101:26" pos:end="101:35"><name pos:start="101:26" pos:end="101:28">job</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:35">limit</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:54"><expr pos:start="101:38" pos:end="101:54"><name pos:start="101:38" pos:end="101:54"><name pos:start="101:38" pos:end="101:40">job</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:54">sectors_read</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:38"><expr pos:start="103:17" pos:end="103:37"><name pos:start="103:17" pos:end="103:33"><name pos:start="103:17" pos:end="103:19">job</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:33">sectors_read</name></name> <operator pos:start="103:35" pos:end="103:35">=</operator> <literal type="number" pos:start="103:37" pos:end="103:37">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:80"><expr pos:start="105:17" pos:end="105:79"><call pos:start="105:17" pos:end="105:79"><name pos:start="105:17" pos:end="105:34">block_job_sleep_ns</name><argument_list pos:start="105:35" pos:end="105:79">(<argument pos:start="105:36" pos:end="105:47"><expr pos:start="105:36" pos:end="105:47"><operator pos:start="105:36" pos:end="105:36">&amp;</operator><name pos:start="105:37" pos:end="105:47"><name pos:start="105:37" pos:end="105:39">job</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:47">common</name></name></expr></argument>, <argument pos:start="105:50" pos:end="105:68"><expr pos:start="105:50" pos:end="105:68"><name pos:start="105:50" pos:end="105:68">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="105:71" pos:end="105:78"><expr pos:start="105:71" pos:end="105:78"><name pos:start="105:71" pos:end="105:78">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="107:15" pos:end="111:13">else <block pos:start="107:20" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:73">

                <expr_stmt pos:start="109:17" pos:end="109:73"><expr pos:start="109:17" pos:end="109:72"><call pos:start="109:17" pos:end="109:72"><name pos:start="109:17" pos:end="109:34">block_job_sleep_ns</name><argument_list pos:start="109:35" pos:end="109:72">(<argument pos:start="109:36" pos:end="109:47"><expr pos:start="109:36" pos:end="109:47"><operator pos:start="109:36" pos:end="109:36">&amp;</operator><name pos:start="109:37" pos:end="109:47"><name pos:start="109:37" pos:end="109:39">job</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:47">common</name></name></expr></argument>, <argument pos:start="109:50" pos:end="109:68"><expr pos:start="109:50" pos:end="109:68"><name pos:start="109:50" pos:end="109:68">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="109:71" pos:end="109:71"><expr pos:start="109:71" pos:end="109:71"><literal type="number" pos:start="109:71" pos:end="109:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="115:13" pos:end="119:13"><if pos:start="115:13" pos:end="119:13">if <condition pos:start="115:16" pos:end="115:53">(<expr pos:start="115:17" pos:end="115:52"><call pos:start="115:17" pos:end="115:52"><name pos:start="115:17" pos:end="115:38">block_job_is_cancelled</name><argument_list pos:start="115:39" pos:end="115:52">(<argument pos:start="115:40" pos:end="115:51"><expr pos:start="115:40" pos:end="115:51"><operator pos:start="115:40" pos:end="115:40">&amp;</operator><name pos:start="115:41" pos:end="115:51"><name pos:start="115:41" pos:end="115:43">job</name><operator pos:start="115:44" pos:end="115:45">-&gt;</operator><name pos:start="115:46" pos:end="115:51">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:55" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:22">

                <break pos:start="117:17" pos:end="117:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="123:13" pos:end="183:13"><if pos:start="123:13" pos:end="183:13">if <condition pos:start="123:16" pos:end="123:55">(<expr pos:start="123:17" pos:end="123:54"><name pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:19">job</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:30">sync_mode</name></name> <operator pos:start="123:32" pos:end="123:33">==</operator> <name pos:start="123:35" pos:end="123:54">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="123:57" pos:end="183:13">{<block_content pos:start="125:17" pos:end="181:17">

                <decl_stmt pos:start="125:17" pos:end="125:25"><decl pos:start="125:17" pos:end="125:21"><type pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">int</name></type> <name pos:start="125:21" pos:end="125:21">i</name></decl>, <decl pos:start="125:24" pos:end="125:24"><type ref="prev" pos:start="125:17" pos:end="125:19"/><name pos:start="125:24" pos:end="125:24">n</name></decl>;</decl_stmt>

                <decl_stmt pos:start="127:17" pos:end="127:32"><decl pos:start="127:17" pos:end="127:31"><type pos:start="127:17" pos:end="127:19"><name pos:start="127:17" pos:end="127:19">int</name></type> <name pos:start="127:21" pos:end="127:27">alloced</name> <init pos:start="127:29" pos:end="127:31">= <expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">0</literal></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="131:17" pos:end="133:35">/* Check to see if these blocks are already in the

                 * backing file. */</comment>



                <for pos:start="137:17" pos:end="169:17">for <control pos:start="137:21" pos:end="137:60">(<init pos:start="137:22" pos:end="137:27"><expr pos:start="137:22" pos:end="137:26"><name pos:start="137:22" pos:end="137:22">i</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <literal type="number" pos:start="137:26" pos:end="137:26">0</literal></expr>;</init> <condition pos:start="137:29" pos:end="137:59"><expr pos:start="137:29" pos:end="137:58"><name pos:start="137:29" pos:end="137:29">i</name> <operator pos:start="137:31" pos:end="137:31">&lt;</operator> <name pos:start="137:33" pos:end="137:58">BACKUP_SECTORS_PER_CLUSTER</name></expr>;</condition><incr/>)</control> <block pos:start="137:62" pos:end="169:17">{<block_content pos:start="151:21" pos:end="167:21">

                    <comment type="block" pos:start="139:21" pos:end="149:75">/* bdrv_is_allocated() only returns true/false based

                     * on the first set of sectors it comes across that

                     * are are all in the same state.

                     * For that reason we must verify each sector in the

                     * backup cluster length.  We end up copying more than

                     * needed but at some point that is always the case. */</comment>

                    <expr_stmt pos:start="151:21" pos:end="157:68"><expr pos:start="151:21" pos:end="157:67"><name pos:start="151:21" pos:end="151:27">alloced</name> <operator pos:start="151:29" pos:end="151:29">=</operator>

                        <call pos:start="153:25" pos:end="157:67"><name pos:start="153:25" pos:end="153:41">bdrv_is_allocated</name><argument_list pos:start="153:42" pos:end="157:67">(<argument pos:start="153:43" pos:end="153:44"><expr pos:start="153:43" pos:end="153:44"><name pos:start="153:43" pos:end="153:44">bs</name></expr></argument>,

                                <argument pos:start="155:33" pos:end="155:70"><expr pos:start="155:33" pos:end="155:70"><name pos:start="155:33" pos:end="155:37">start</name> <operator pos:start="155:39" pos:end="155:39">*</operator> <name pos:start="155:41" pos:end="155:66">BACKUP_SECTORS_PER_CLUSTER</name> <operator pos:start="155:68" pos:end="155:68">+</operator> <name pos:start="155:70" pos:end="155:70">i</name></expr></argument>,

                                <argument pos:start="157:33" pos:end="157:62"><expr pos:start="157:33" pos:end="157:62"><name pos:start="157:33" pos:end="157:58">BACKUP_SECTORS_PER_CLUSTER</name> <operator pos:start="157:60" pos:end="157:60">-</operator> <name pos:start="157:62" pos:end="157:62">i</name></expr></argument>, <argument pos:start="157:65" pos:end="157:66"><expr pos:start="157:65" pos:end="157:66"><operator pos:start="157:65" pos:end="157:65">&amp;</operator><name pos:start="157:66" pos:end="157:66">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:27"><expr pos:start="159:21" pos:end="159:26"><name pos:start="159:21" pos:end="159:21">i</name> <operator pos:start="159:23" pos:end="159:24">+=</operator> <name pos:start="159:26" pos:end="159:26">n</name></expr>;</expr_stmt>



                    <if_stmt pos:start="163:21" pos:end="167:21"><if pos:start="163:21" pos:end="167:21">if <condition pos:start="163:24" pos:end="163:47">(<expr pos:start="163:25" pos:end="163:46"><name pos:start="163:25" pos:end="163:31">alloced</name> <operator pos:start="163:33" pos:end="163:34">==</operator> <literal type="number" pos:start="163:36" pos:end="163:36">1</literal> <operator pos:start="163:38" pos:end="163:39">||</operator> <name pos:start="163:41" pos:end="163:41">n</name> <operator pos:start="163:43" pos:end="163:44">==</operator> <literal type="number" pos:start="163:46" pos:end="163:46">0</literal></expr>)</condition> <block pos:start="163:49" pos:end="167:21">{<block_content pos:start="165:25" pos:end="165:30">

                        <break pos:start="165:25" pos:end="165:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="173:17" pos:end="175:58">/* If the above loop never found any sectors that are in

                 * the topmost image, skip this backup. */</comment>

                <if_stmt pos:start="177:17" pos:end="181:17"><if pos:start="177:17" pos:end="181:17">if <condition pos:start="177:20" pos:end="177:33">(<expr pos:start="177:21" pos:end="177:32"><name pos:start="177:21" pos:end="177:27">alloced</name> <operator pos:start="177:29" pos:end="177:30">==</operator> <literal type="number" pos:start="177:32" pos:end="177:32">0</literal></expr>)</condition> <block pos:start="177:35" pos:end="181:17">{<block_content pos:start="179:21" pos:end="179:29">

                    <continue pos:start="179:21" pos:end="179:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="185:13" pos:end="185:57">/* FULL sync mode we copy the whole drive. */</comment>

            <expr_stmt pos:start="187:13" pos:end="189:64"><expr pos:start="187:13" pos:end="189:63"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="189:63"><name pos:start="187:19" pos:end="187:31">backup_do_cow</name><argument_list pos:start="187:32" pos:end="189:63">(<argument pos:start="187:33" pos:end="187:34"><expr pos:start="187:33" pos:end="187:34"><name pos:start="187:33" pos:end="187:34">bs</name></expr></argument>, <argument pos:start="187:37" pos:end="187:70"><expr pos:start="187:37" pos:end="187:70"><name pos:start="187:37" pos:end="187:41">start</name> <operator pos:start="187:43" pos:end="187:43">*</operator> <name pos:start="187:45" pos:end="187:70">BACKUP_SECTORS_PER_CLUSTER</name></expr></argument>,

                    <argument pos:start="189:21" pos:end="189:46"><expr pos:start="189:21" pos:end="189:46"><name pos:start="189:21" pos:end="189:46">BACKUP_SECTORS_PER_CLUSTER</name></expr></argument>, <argument pos:start="189:49" pos:end="189:62"><expr pos:start="189:49" pos:end="189:62"><operator pos:start="189:49" pos:end="189:49">&amp;</operator><name pos:start="189:50" pos:end="189:62">error_is_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="191:13" pos:end="211:13"><if pos:start="191:13" pos:end="211:13">if <condition pos:start="191:16" pos:end="191:24">(<expr pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:19">ret</name> <operator pos:start="191:21" pos:end="191:21">&lt;</operator> <literal type="number" pos:start="191:23" pos:end="191:23">0</literal></expr>)</condition> <block pos:start="191:26" pos:end="211:13">{<block_content pos:start="195:17" pos:end="209:17">

                <comment type="block" pos:start="193:17" pos:end="193:74">/* Depending on error action, fail now or retry cluster */</comment>

                <decl_stmt pos:start="195:17" pos:end="197:66"><decl pos:start="195:17" pos:end="197:65"><type pos:start="195:17" pos:end="195:32"><name pos:start="195:17" pos:end="195:32">BlockErrorAction</name></type> <name pos:start="195:34" pos:end="195:39">action</name> <init pos:start="195:41" pos:end="197:65">=

                    <expr pos:start="197:21" pos:end="197:65"><call pos:start="197:21" pos:end="197:65"><name pos:start="197:21" pos:end="197:39">backup_error_action</name><argument_list pos:start="197:40" pos:end="197:65">(<argument pos:start="197:41" pos:end="197:43"><expr pos:start="197:41" pos:end="197:43"><name pos:start="197:41" pos:end="197:43">job</name></expr></argument>, <argument pos:start="197:46" pos:end="197:58"><expr pos:start="197:46" pos:end="197:58"><name pos:start="197:46" pos:end="197:58">error_is_read</name></expr></argument>, <argument pos:start="197:61" pos:end="197:64"><expr pos:start="197:61" pos:end="197:64"><operator pos:start="197:61" pos:end="197:61">-</operator><name pos:start="197:62" pos:end="197:64">ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="199:17" pos:end="209:17"><if pos:start="199:17" pos:end="203:17">if <condition pos:start="199:20" pos:end="199:56">(<expr pos:start="199:21" pos:end="199:55"><name pos:start="199:21" pos:end="199:26">action</name> <operator pos:start="199:28" pos:end="199:29">==</operator> <name pos:start="199:31" pos:end="199:55">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="199:58" pos:end="203:17">{<block_content pos:start="201:21" pos:end="201:26">

                    <break pos:start="201:21" pos:end="201:26">break;</break>

                </block_content>}</block></if> <else pos:start="203:19" pos:end="209:17">else <block pos:start="203:24" pos:end="209:17">{<block_content pos:start="205:21" pos:end="207:29">

                    <expr_stmt pos:start="205:21" pos:end="205:28"><expr pos:start="205:21" pos:end="205:27"><name pos:start="205:21" pos:end="205:25">start</name><operator pos:start="205:26" pos:end="205:27">--</operator></expr>;</expr_stmt>

                    <continue pos:start="207:21" pos:end="207:29">continue;</continue>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:47"><expr pos:start="219:5" pos:end="219:46"><call pos:start="219:5" pos:end="219:46"><name pos:start="219:5" pos:end="219:31">notifier_with_return_remove</name><argument_list pos:start="219:32" pos:end="219:46">(<argument pos:start="219:33" pos:end="219:45"><expr pos:start="219:33" pos:end="219:45"><operator pos:start="219:33" pos:end="219:33">&amp;</operator><name pos:start="219:34" pos:end="219:45">before_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:65">/* wait until pending backup_do_cow() calls have completed */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:46"><expr pos:start="225:5" pos:end="225:45"><call pos:start="225:5" pos:end="225:45"><name pos:start="225:5" pos:end="225:25">qemu_co_rwlock_wrlock</name><argument_list pos:start="225:26" pos:end="225:45">(<argument pos:start="225:27" pos:end="225:44"><expr pos:start="225:27" pos:end="225:44"><operator pos:start="225:27" pos:end="225:27">&amp;</operator><name pos:start="225:28" pos:end="225:44"><name pos:start="225:28" pos:end="225:30">job</name><operator pos:start="225:31" pos:end="225:32">-&gt;</operator><name pos:start="225:33" pos:end="225:44">flush_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:46"><expr pos:start="227:5" pos:end="227:45"><call pos:start="227:5" pos:end="227:45"><name pos:start="227:5" pos:end="227:25">qemu_co_rwlock_unlock</name><argument_list pos:start="227:26" pos:end="227:45">(<argument pos:start="227:27" pos:end="227:44"><expr pos:start="227:27" pos:end="227:44"><operator pos:start="227:27" pos:end="227:27">&amp;</operator><name pos:start="227:28" pos:end="227:44"><name pos:start="227:28" pos:end="227:30">job</name><operator pos:start="227:31" pos:end="227:32">-&gt;</operator><name pos:start="227:33" pos:end="227:44">flush_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="231:5" pos:end="231:30"><expr pos:start="231:5" pos:end="231:29"><call pos:start="231:5" pos:end="231:29"><name pos:start="231:5" pos:end="231:16">hbitmap_free</name><argument_list pos:start="231:17" pos:end="231:29">(<argument pos:start="231:18" pos:end="231:28"><expr pos:start="231:18" pos:end="231:28"><name pos:start="231:18" pos:end="231:28"><name pos:start="231:18" pos:end="231:20">job</name><operator pos:start="231:21" pos:end="231:22">-&gt;</operator><name pos:start="231:23" pos:end="231:28">bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:34"><expr pos:start="235:5" pos:end="235:33"><call pos:start="235:5" pos:end="235:33"><name pos:start="235:5" pos:end="235:25">bdrv_iostatus_disable</name><argument_list pos:start="235:26" pos:end="235:33">(<argument pos:start="235:27" pos:end="235:32"><expr pos:start="235:27" pos:end="235:32"><name pos:start="235:27" pos:end="235:32">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="240:5" pos:end="240:35"><expr pos:start="240:5" pos:end="240:34"><name pos:start="240:5" pos:end="240:8">data</name> <operator pos:start="240:10" pos:end="240:10">=</operator> <call pos:start="240:12" pos:end="240:34"><name pos:start="240:12" pos:end="240:19">g_malloc</name><argument_list pos:start="240:20" pos:end="240:34">(<argument pos:start="240:21" pos:end="240:33"><expr pos:start="240:21" pos:end="240:33"><sizeof pos:start="240:21" pos:end="240:33">sizeof<argument_list pos:start="240:27" pos:end="240:33">(<argument pos:start="240:28" pos:end="240:32"><expr pos:start="240:28" pos:end="240:32"><operator pos:start="240:28" pos:end="240:28">*</operator><name pos:start="240:29" pos:end="240:32">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="242:5" pos:end="242:20"><expr pos:start="242:5" pos:end="242:19"><name pos:start="242:5" pos:end="242:13"><name pos:start="242:5" pos:end="242:8">data</name><operator pos:start="242:9" pos:end="242:10">-&gt;</operator><name pos:start="242:11" pos:end="242:13">ret</name></name> <operator pos:start="242:15" pos:end="242:15">=</operator> <name pos:start="242:17" pos:end="242:19">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="244:5" pos:end="244:70"><expr pos:start="244:5" pos:end="244:69"><call pos:start="244:5" pos:end="244:69"><name pos:start="244:5" pos:end="244:32">block_job_defer_to_main_loop</name><argument_list pos:start="244:33" pos:end="244:69">(<argument pos:start="244:34" pos:end="244:45"><expr pos:start="244:34" pos:end="244:45"><operator pos:start="244:34" pos:end="244:34">&amp;</operator><name pos:start="244:35" pos:end="244:45"><name pos:start="244:35" pos:end="244:37">job</name><operator pos:start="244:38" pos:end="244:39">-&gt;</operator><name pos:start="244:40" pos:end="244:45">common</name></name></expr></argument>, <argument pos:start="244:48" pos:end="244:62"><expr pos:start="244:48" pos:end="244:62"><name pos:start="244:48" pos:end="244:62">backup_complete</name></expr></argument>, <argument pos:start="244:65" pos:end="244:68"><expr pos:start="244:65" pos:end="244:68"><name pos:start="244:65" pos:end="244:68">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
