<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16904.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_grow_l1_table</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:63">min_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:28">bool</name></type> <name pos:start="3:30" pos:end="3:39">exact_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">new_l1_size2</name></decl>, <decl pos:start="9:23" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:25">ret</name></decl>, <decl pos:start="9:28" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:28">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:26">new_l1_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:31">new_l1_table_offset</name></decl>, <decl pos:start="13:34" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:34" pos:end="13:44">new_l1_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:16">data</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">12</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:17"><if pos:start="19:5" pos:end="21:17">if <condition pos:start="19:8" pos:end="19:31">(<expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:16">min_size</name> <operator pos:start="19:18" pos:end="19:19">&lt;=</operator> <name pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:21">s</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:30">l1_size</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="47:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:18">exact_size</name></expr>)</condition> <block pos:start="25:21" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:31">

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:19">new_l1_size</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <name pos:start="27:23" pos:end="27:30">min_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="47:5">else <block pos:start="29:12" pos:end="47:5">{<block_content pos:start="33:9" pos:end="45:9">

        <comment type="block" pos:start="31:9" pos:end="31:72">/* Bump size up to reduce the number of times we have to grow */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:19">new_l1_size</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:32"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:32">l1_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:29">(<expr pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:23">new_l1_size</name> <operator pos:start="35:25" pos:end="35:26">==</operator> <literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr>)</condition> <block pos:start="35:31" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:28">

            <expr_stmt pos:start="37:13" pos:end="37:28"><expr pos:start="37:13" pos:end="37:27"><name pos:start="37:13" pos:end="37:23">new_l1_size</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <while pos:start="41:9" pos:end="45:9">while <condition pos:start="41:15" pos:end="41:38">(<expr pos:start="41:16" pos:end="41:37"><name pos:start="41:16" pos:end="41:23">min_size</name> <operator pos:start="41:25" pos:end="41:25">&gt;</operator> <name pos:start="41:27" pos:end="41:37">new_l1_size</name></expr>)</condition> <block pos:start="41:40" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:52">

            <expr_stmt pos:start="43:13" pos:end="43:52"><expr pos:start="43:13" pos:end="43:51"><name pos:start="43:13" pos:end="43:23">new_l1_size</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <operator pos:start="43:27" pos:end="43:27">(</operator><name pos:start="43:28" pos:end="43:38">new_l1_size</name> <operator pos:start="43:40" pos:end="43:40">*</operator> <literal type="number" pos:start="43:42" pos:end="43:44">3</literal> <operator pos:start="43:44" pos:end="43:44">+</operator> <literal type="number" pos:start="43:46" pos:end="43:46">1</literal><operator pos:start="43:47" pos:end="43:47">)</operator> <operator pos:start="43:49" pos:end="43:49">/</operator> <literal type="number" pos:start="43:51" pos:end="43:51">2</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="51:5" pos:end="60:0"><if pos:start="51:5" pos:end="60:0">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:19">new_l1_size</name> <operator pos:start="51:21" pos:end="51:21">&gt;</operator> <name pos:start="51:23" pos:end="51:29">INT_MAX</name></expr>)</condition> <block pos:start="51:32" pos:end="60:0">{<block_content pos:start="53:9" pos:end="53:22">

        <return pos:start="53:9" pos:end="53:22">return <expr pos:start="53:16" pos:end="53:21"><operator pos:start="53:16" pos:end="53:16">-</operator><name pos:start="53:17" pos:end="53:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="59:1" pos:end="59:19">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="61:5" pos:end="66:0"><expr pos:start="61:5" pos:end="63:36"><call pos:start="61:5" pos:end="63:36"><name pos:start="61:5" pos:end="61:11">fprintf</name><argument_list pos:start="61:12" pos:end="63:36">(<argument pos:start="61:13" pos:end="61:18"><expr pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:18">stderr</name></expr></argument>, <argument pos:start="61:21" pos:end="61:60"><expr pos:start="61:21" pos:end="61:60"><literal type="string" pos:start="61:21" pos:end="61:48">"grow l1_table from %d to %"</literal> <name pos:start="61:50" pos:end="61:55">PRId64</name> <literal type="string" pos:start="61:57" pos:end="61:60">"\n"</literal></expr></argument>,

            <argument pos:start="63:13" pos:end="63:22"><expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">l1_size</name></name></expr></argument>, <argument pos:start="63:25" pos:end="63:35"><expr pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:35">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="69:5" pos:end="69:50"><expr pos:start="69:5" pos:end="69:49"><name pos:start="69:5" pos:end="69:16">new_l1_size2</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <sizeof pos:start="69:20" pos:end="69:35">sizeof<argument_list pos:start="69:26" pos:end="69:35">(<argument pos:start="69:27" pos:end="69:34"><expr pos:start="69:27" pos:end="69:34"><name pos:start="69:27" pos:end="69:34">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="69:37" pos:end="69:37">*</operator> <name pos:start="69:39" pos:end="69:49">new_l1_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:62"><expr pos:start="71:5" pos:end="71:61"><name pos:start="71:5" pos:end="71:16">new_l1_table</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <call pos:start="71:20" pos:end="71:61"><name pos:start="71:20" pos:end="71:28">g_malloc0</name><argument_list pos:start="71:29" pos:end="71:61">(<argument pos:start="71:30" pos:end="71:60"><expr pos:start="71:30" pos:end="71:60"><call pos:start="71:30" pos:end="71:60"><name pos:start="71:30" pos:end="71:41">align_offset</name><argument_list pos:start="71:42" pos:end="71:60">(<argument pos:start="71:43" pos:end="71:54"><expr pos:start="71:43" pos:end="71:54"><name pos:start="71:43" pos:end="71:54">new_l1_size2</name></expr></argument>, <argument pos:start="71:57" pos:end="71:59"><expr pos:start="71:57" pos:end="71:59"><literal type="number" pos:start="71:57" pos:end="71:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:69"><expr pos:start="73:5" pos:end="73:68"><call pos:start="73:5" pos:end="73:68"><name pos:start="73:5" pos:end="73:10">memcpy</name><argument_list pos:start="73:11" pos:end="73:68">(<argument pos:start="73:12" pos:end="73:23"><expr pos:start="73:12" pos:end="73:23"><name pos:start="73:12" pos:end="73:23">new_l1_table</name></expr></argument>, <argument pos:start="73:26" pos:end="73:36"><expr pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:26">s</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:36">l1_table</name></name></expr></argument>, <argument pos:start="73:39" pos:end="73:67"><expr pos:start="73:39" pos:end="73:67"><name pos:start="73:39" pos:end="73:48"><name pos:start="73:39" pos:end="73:39">s</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:48">l1_size</name></name> <operator pos:start="73:50" pos:end="73:50">*</operator> <sizeof pos:start="73:52" pos:end="73:67">sizeof<argument_list pos:start="73:58" pos:end="73:67">(<argument pos:start="73:59" pos:end="73:66"><expr pos:start="73:59" pos:end="73:66"><name pos:start="73:59" pos:end="73:66">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:44">/* write new table (align to cluster) */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><call pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:16">BLKDBG_EVENT</name><argument_list pos:start="79:17" pos:end="79:54">(<argument pos:start="79:18" pos:end="79:25"><expr pos:start="79:18" pos:end="79:25"><name pos:start="79:18" pos:end="79:25"><name pos:start="79:18" pos:end="79:19">bs</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:25">file</name></name></expr></argument>, <argument pos:start="79:28" pos:end="79:53"><expr pos:start="79:28" pos:end="79:53"><name pos:start="79:28" pos:end="79:53">BLKDBG_L1_GROW_ALLOC_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:65"><expr pos:start="81:5" pos:end="81:64"><name pos:start="81:5" pos:end="81:23">new_l1_table_offset</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <call pos:start="81:27" pos:end="81:64"><name pos:start="81:27" pos:end="81:46">qcow2_alloc_clusters</name><argument_list pos:start="81:47" pos:end="81:64">(<argument pos:start="81:48" pos:end="81:49"><expr pos:start="81:48" pos:end="81:49"><name pos:start="81:48" pos:end="81:49">bs</name></expr></argument>, <argument pos:start="81:52" pos:end="81:63"><expr pos:start="81:52" pos:end="81:63"><name pos:start="81:52" pos:end="81:63">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:32">(<expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:27">new_l1_table_offset</name> <operator pos:start="83:29" pos:end="83:29">&lt;</operator> <literal type="number" pos:start="83:31" pos:end="83:31">0</literal></expr>)</condition> <block pos:start="83:34" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:35">

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><call pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:14">g_free</name><argument_list pos:start="85:15" pos:end="85:28">(<argument pos:start="85:16" pos:end="85:27"><expr pos:start="85:16" pos:end="85:27"><name pos:start="85:16" pos:end="85:27">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:35">return <expr pos:start="87:16" pos:end="87:34"><name pos:start="87:16" pos:end="87:34">new_l1_table_offset</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:57"><expr pos:start="93:5" pos:end="93:56"><name pos:start="93:5" pos:end="93:7">ret</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:56"><name pos:start="93:11" pos:end="93:27">qcow2_cache_flush</name><argument_list pos:start="93:28" pos:end="93:56">(<argument pos:start="93:29" pos:end="93:30"><expr pos:start="93:29" pos:end="93:30"><name pos:start="93:29" pos:end="93:30">bs</name></expr></argument>, <argument pos:start="93:33" pos:end="93:55"><expr pos:start="93:33" pos:end="93:55"><name pos:start="93:33" pos:end="93:55"><name pos:start="93:33" pos:end="93:33">s</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:16">(<expr pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">&lt;</operator> <literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr>)</condition> <block pos:start="95:18" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:18">

        <goto pos:start="97:9" pos:end="97:18">goto <name pos:start="97:14" pos:end="97:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="105:35">/* the L1 position has not yet been updated, so these clusters must

     * indeed be completely free */</comment>

    <expr_stmt pos:start="107:5" pos:end="109:75"><expr pos:start="107:5" pos:end="109:74"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="109:74"><name pos:start="107:11" pos:end="107:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="107:40" pos:end="109:74">(<argument pos:start="107:41" pos:end="107:42"><expr pos:start="107:41" pos:end="107:42"><name pos:start="107:41" pos:end="107:42">bs</name></expr></argument>, <argument pos:start="107:45" pos:end="107:60"><expr pos:start="107:45" pos:end="107:60"><name pos:start="107:45" pos:end="107:60">QCOW2_OL_DEFAULT</name></expr></argument>,

                                        <argument pos:start="109:41" pos:end="109:59"><expr pos:start="109:41" pos:end="109:59"><name pos:start="109:41" pos:end="109:59">new_l1_table_offset</name></expr></argument>, <argument pos:start="109:62" pos:end="109:73"><expr pos:start="109:62" pos:end="109:73"><name pos:start="109:62" pos:end="109:73">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition> <block pos:start="111:18" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:18">

        <goto pos:start="113:9" pos:end="113:18">goto <name pos:start="113:14" pos:end="113:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:55"><expr pos:start="119:5" pos:end="119:54"><call pos:start="119:5" pos:end="119:54"><name pos:start="119:5" pos:end="119:16">BLKDBG_EVENT</name><argument_list pos:start="119:17" pos:end="119:54">(<argument pos:start="119:18" pos:end="119:25"><expr pos:start="119:18" pos:end="119:25"><name pos:start="119:18" pos:end="119:25"><name pos:start="119:18" pos:end="119:19">bs</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:25">file</name></name></expr></argument>, <argument pos:start="119:28" pos:end="119:53"><expr pos:start="119:28" pos:end="119:53"><name pos:start="119:28" pos:end="119:53">BLKDBG_L1_GROW_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="121:5" pos:end="123:55">for<control pos:start="121:8" pos:end="121:35">(<init pos:start="121:9" pos:end="121:14"><expr pos:start="121:9" pos:end="121:13"><name pos:start="121:9" pos:end="121:9">i</name> <operator pos:start="121:11" pos:end="121:11">=</operator> <literal type="number" pos:start="121:13" pos:end="121:13">0</literal></expr>;</init> <condition pos:start="121:16" pos:end="121:30"><expr pos:start="121:16" pos:end="121:29"><name pos:start="121:16" pos:end="121:16">i</name> <operator pos:start="121:18" pos:end="121:18">&lt;</operator> <name pos:start="121:20" pos:end="121:29"><name pos:start="121:20" pos:end="121:20">s</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:29">l1_size</name></name></expr>;</condition> <incr pos:start="121:32" pos:end="121:34"><expr pos:start="121:32" pos:end="121:34"><name pos:start="121:32" pos:end="121:32">i</name><operator pos:start="121:33" pos:end="121:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:9" pos:end="123:55"><block_content pos:start="123:9" pos:end="123:55">

        <expr_stmt pos:start="123:9" pos:end="123:55"><expr pos:start="123:9" pos:end="123:54"><name pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:20">new_l1_table</name><index pos:start="123:21" pos:end="123:23">[<expr pos:start="123:22" pos:end="123:22"><name pos:start="123:22" pos:end="123:22">i</name></expr>]</index></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="123:54"><name pos:start="123:27" pos:end="123:37">cpu_to_be64</name><argument_list pos:start="123:38" pos:end="123:54">(<argument pos:start="123:39" pos:end="123:53"><expr pos:start="123:39" pos:end="123:53"><name pos:start="123:39" pos:end="123:53"><name pos:start="123:39" pos:end="123:50">new_l1_table</name><index pos:start="123:51" pos:end="123:53">[<expr pos:start="123:52" pos:end="123:52"><name pos:start="123:52" pos:end="123:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="125:5" pos:end="125:86"><expr pos:start="125:5" pos:end="125:85"><name pos:start="125:5" pos:end="125:7">ret</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:85"><name pos:start="125:11" pos:end="125:26">bdrv_pwrite_sync</name><argument_list pos:start="125:27" pos:end="125:85">(<argument pos:start="125:28" pos:end="125:35"><expr pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:35"><name pos:start="125:28" pos:end="125:29">bs</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:35">file</name></name></expr></argument>, <argument pos:start="125:38" pos:end="125:56"><expr pos:start="125:38" pos:end="125:56"><name pos:start="125:38" pos:end="125:56">new_l1_table_offset</name></expr></argument>, <argument pos:start="125:59" pos:end="125:70"><expr pos:start="125:59" pos:end="125:70"><name pos:start="125:59" pos:end="125:70">new_l1_table</name></expr></argument>, <argument pos:start="125:73" pos:end="125:84"><expr pos:start="125:73" pos:end="125:84"><name pos:start="125:73" pos:end="125:84">new_l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="129:18"><if pos:start="127:5" pos:end="129:18">if <condition pos:start="127:8" pos:end="127:16">(<expr pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">&lt;</operator> <literal type="number" pos:start="127:15" pos:end="127:15">0</literal></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:18"><block_content pos:start="129:9" pos:end="129:18">

        <goto pos:start="129:9" pos:end="129:18">goto <name pos:start="129:14" pos:end="129:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="131:5" pos:end="133:55">for<control pos:start="131:8" pos:end="131:35">(<init pos:start="131:9" pos:end="131:14"><expr pos:start="131:9" pos:end="131:13"><name pos:start="131:9" pos:end="131:9">i</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <literal type="number" pos:start="131:13" pos:end="131:13">0</literal></expr>;</init> <condition pos:start="131:16" pos:end="131:30"><expr pos:start="131:16" pos:end="131:29"><name pos:start="131:16" pos:end="131:16">i</name> <operator pos:start="131:18" pos:end="131:18">&lt;</operator> <name pos:start="131:20" pos:end="131:29"><name pos:start="131:20" pos:end="131:20">s</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:29">l1_size</name></name></expr>;</condition> <incr pos:start="131:32" pos:end="131:34"><expr pos:start="131:32" pos:end="131:34"><name pos:start="131:32" pos:end="131:32">i</name><operator pos:start="131:33" pos:end="131:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="133:9" pos:end="133:55"><block_content pos:start="133:9" pos:end="133:55">

        <expr_stmt pos:start="133:9" pos:end="133:55"><expr pos:start="133:9" pos:end="133:54"><name pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:20">new_l1_table</name><index pos:start="133:21" pos:end="133:23">[<expr pos:start="133:22" pos:end="133:22"><name pos:start="133:22" pos:end="133:22">i</name></expr>]</index></name> <operator pos:start="133:25" pos:end="133:25">=</operator> <call pos:start="133:27" pos:end="133:54"><name pos:start="133:27" pos:end="133:37">be64_to_cpu</name><argument_list pos:start="133:38" pos:end="133:54">(<argument pos:start="133:39" pos:end="133:53"><expr pos:start="133:39" pos:end="133:53"><name pos:start="133:39" pos:end="133:53"><name pos:start="133:39" pos:end="133:50">new_l1_table</name><index pos:start="133:51" pos:end="133:53">[<expr pos:start="133:52" pos:end="133:52"><name pos:start="133:52" pos:end="133:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="137:5" pos:end="137:23">/* set new table */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:58"><expr pos:start="139:5" pos:end="139:57"><call pos:start="139:5" pos:end="139:57"><name pos:start="139:5" pos:end="139:16">BLKDBG_EVENT</name><argument_list pos:start="139:17" pos:end="139:57">(<argument pos:start="139:18" pos:end="139:25"><expr pos:start="139:18" pos:end="139:25"><name pos:start="139:18" pos:end="139:25"><name pos:start="139:18" pos:end="139:19">bs</name><operator pos:start="139:20" pos:end="139:21">-&gt;</operator><name pos:start="139:22" pos:end="139:25">file</name></name></expr></argument>, <argument pos:start="139:28" pos:end="139:56"><expr pos:start="139:28" pos:end="139:56"><name pos:start="139:28" pos:end="139:56">BLKDBG_L1_GROW_ACTIVATE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:47"><expr pos:start="141:5" pos:end="141:46"><call pos:start="141:5" pos:end="141:46"><name pos:start="141:5" pos:end="141:16">cpu_to_be32w</name><argument_list pos:start="141:17" pos:end="141:46">(<argument pos:start="141:18" pos:end="141:32"><expr pos:start="141:18" pos:end="141:32"><operator pos:start="141:18" pos:end="141:18">(</operator><name pos:start="141:19" pos:end="141:26">uint32_t</name><operator pos:start="141:27" pos:end="141:27">*</operator><operator pos:start="141:28" pos:end="141:28">)</operator><name pos:start="141:29" pos:end="141:32">data</name></expr></argument>, <argument pos:start="141:35" pos:end="141:45"><expr pos:start="141:35" pos:end="141:45"><name pos:start="141:35" pos:end="141:45">new_l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:62"><expr pos:start="143:5" pos:end="143:61"><call pos:start="143:5" pos:end="143:61"><name pos:start="143:5" pos:end="143:17">cpu_to_be64wu</name><argument_list pos:start="143:18" pos:end="143:61">(<argument pos:start="143:19" pos:end="143:39"><expr pos:start="143:19" pos:end="143:39"><operator pos:start="143:19" pos:end="143:19">(</operator><name pos:start="143:20" pos:end="143:27">uint64_t</name><operator pos:start="143:28" pos:end="143:28">*</operator><operator pos:start="143:29" pos:end="143:29">)</operator><operator pos:start="143:30" pos:end="143:30">(</operator><name pos:start="143:31" pos:end="143:34">data</name> <operator pos:start="143:36" pos:end="143:36">+</operator> <literal type="number" pos:start="143:38" pos:end="143:38">4</literal><operator pos:start="143:39" pos:end="143:39">)</operator></expr></argument>, <argument pos:start="143:42" pos:end="143:60"><expr pos:start="143:42" pos:end="143:60"><name pos:start="143:42" pos:end="143:60">new_l1_table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:87"><expr pos:start="145:5" pos:end="145:86"><name pos:start="145:5" pos:end="145:7">ret</name> <operator pos:start="145:9" pos:end="145:9">=</operator> <call pos:start="145:11" pos:end="145:86"><name pos:start="145:11" pos:end="145:26">bdrv_pwrite_sync</name><argument_list pos:start="145:27" pos:end="145:86">(<argument pos:start="145:28" pos:end="145:35"><expr pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:29">bs</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:35">file</name></name></expr></argument>, <argument pos:start="145:38" pos:end="145:66"><expr pos:start="145:38" pos:end="145:66"><call pos:start="145:38" pos:end="145:66"><name pos:start="145:38" pos:end="145:45">offsetof</name><argument_list pos:start="145:46" pos:end="145:66">(<argument pos:start="145:47" pos:end="145:56"><expr pos:start="145:47" pos:end="145:56"><name pos:start="145:47" pos:end="145:56">QCowHeader</name></expr></argument>, <argument pos:start="145:59" pos:end="145:65"><expr pos:start="145:59" pos:end="145:65"><name pos:start="145:59" pos:end="145:65">l1_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:69" pos:end="145:72"><expr pos:start="145:69" pos:end="145:72"><name pos:start="145:69" pos:end="145:72">data</name></expr></argument>,<argument pos:start="145:74" pos:end="145:85"><expr pos:start="145:74" pos:end="145:85"><sizeof pos:start="145:74" pos:end="145:85">sizeof<argument_list pos:start="145:80" pos:end="145:85">(<argument pos:start="145:81" pos:end="145:84"><expr pos:start="145:81" pos:end="145:84"><name pos:start="145:81" pos:end="145:84">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:16">(<expr pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">&lt;</operator> <literal type="number" pos:start="147:15" pos:end="147:15">0</literal></expr>)</condition> <block pos:start="147:18" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:18">

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:24"><expr pos:start="153:5" pos:end="153:23"><call pos:start="153:5" pos:end="153:23"><name pos:start="153:5" pos:end="153:10">g_free</name><argument_list pos:start="153:11" pos:end="153:23">(<argument pos:start="153:12" pos:end="153:22"><expr pos:start="153:12" pos:end="153:22"><name pos:start="153:12" pos:end="153:22"><name pos:start="153:12" pos:end="153:12">s</name><operator pos:start="153:13" pos:end="153:14">-&gt;</operator><name pos:start="153:15" pos:end="153:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="157:45"><expr pos:start="155:5" pos:end="157:44"><call pos:start="155:5" pos:end="157:44"><name pos:start="155:5" pos:end="155:23">qcow2_free_clusters</name><argument_list pos:start="155:24" pos:end="157:44">(<argument pos:start="155:25" pos:end="155:26"><expr pos:start="155:25" pos:end="155:26"><name pos:start="155:25" pos:end="155:26">bs</name></expr></argument>, <argument pos:start="155:29" pos:end="155:46"><expr pos:start="155:29" pos:end="155:46"><name pos:start="155:29" pos:end="155:46"><name pos:start="155:29" pos:end="155:29">s</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:46">l1_table_offset</name></name></expr></argument>, <argument pos:start="155:49" pos:end="155:77"><expr pos:start="155:49" pos:end="155:77"><name pos:start="155:49" pos:end="155:58"><name pos:start="155:49" pos:end="155:49">s</name><operator pos:start="155:50" pos:end="155:51">-&gt;</operator><name pos:start="155:52" pos:end="155:58">l1_size</name></name> <operator pos:start="155:60" pos:end="155:60">*</operator> <sizeof pos:start="155:62" pos:end="155:77">sizeof<argument_list pos:start="155:68" pos:end="155:77">(<argument pos:start="155:69" pos:end="155:76"><expr pos:start="155:69" pos:end="155:76"><name pos:start="155:69" pos:end="155:76">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="157:25" pos:end="157:43"><expr pos:start="157:25" pos:end="157:43"><name pos:start="157:25" pos:end="157:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:45"><expr pos:start="159:5" pos:end="159:44"><name pos:start="159:5" pos:end="159:22"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:22">l1_table_offset</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <name pos:start="159:26" pos:end="159:44">new_l1_table_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:31"><expr pos:start="161:5" pos:end="161:30"><name pos:start="161:5" pos:end="161:15"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:15">l1_table</name></name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:30">new_l1_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:29"><expr pos:start="163:5" pos:end="163:28"><name pos:start="163:5" pos:end="163:14"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:14">l1_size</name></name> <operator pos:start="163:16" pos:end="163:16">=</operator> <name pos:start="163:18" pos:end="163:28">new_l1_size</name></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

 <label pos:start="167:2" pos:end="167:6"><name pos:start="167:2" pos:end="167:5">fail</name>:</label>

    <expr_stmt pos:start="169:5" pos:end="169:25"><expr pos:start="169:5" pos:end="169:24"><call pos:start="169:5" pos:end="169:24"><name pos:start="169:5" pos:end="169:10">g_free</name><argument_list pos:start="169:11" pos:end="169:24">(<argument pos:start="169:12" pos:end="169:23"><expr pos:start="169:12" pos:end="169:23"><name pos:start="169:12" pos:end="169:23">new_l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="173:45"><expr pos:start="171:5" pos:end="173:44"><call pos:start="171:5" pos:end="173:44"><name pos:start="171:5" pos:end="171:23">qcow2_free_clusters</name><argument_list pos:start="171:24" pos:end="173:44">(<argument pos:start="171:25" pos:end="171:26"><expr pos:start="171:25" pos:end="171:26"><name pos:start="171:25" pos:end="171:26">bs</name></expr></argument>, <argument pos:start="171:29" pos:end="171:47"><expr pos:start="171:29" pos:end="171:47"><name pos:start="171:29" pos:end="171:47">new_l1_table_offset</name></expr></argument>, <argument pos:start="171:50" pos:end="171:61"><expr pos:start="171:50" pos:end="171:61"><name pos:start="171:50" pos:end="171:61">new_l1_size2</name></expr></argument>,

                        <argument pos:start="173:25" pos:end="173:43"><expr pos:start="173:25" pos:end="173:43"><name pos:start="173:25" pos:end="173:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:15">return <expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
