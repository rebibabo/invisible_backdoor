<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12779.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">ppc_prep_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="389:1">{<block_content pos:start="5:5" pos:end="387:71">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:27">boot_device</name> <init pos:start="13:29" pos:end="13:49">= <expr pos:start="13:31" pos:end="13:49"><name pos:start="13:31" pos:end="13:49"><name pos:start="13:31" pos:end="13:37">machine</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:24">sysmem</name> <init pos:start="15:26" pos:end="15:46">= <expr pos:start="15:28" pos:end="15:46"><call pos:start="15:28" pos:end="15:46"><name pos:start="15:28" pos:end="15:44">get_system_memory</name><argument_list pos:start="15:45" pos:end="15:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">PowerPCCPU</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:19">cpu</name> <init pos:start="17:21" pos:end="17:26">= <expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUPPCState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="28:0"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Nvram</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:17">m48t59</name></decl>;</decl_stmt>

<cpp:if pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:5"><literal type="number" pos:start="23:5" pos:end="23:5">0</literal></expr></cpp:if>

    MemoryRegion *xcsr = g_new(MemoryRegion, 1);

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">linux_boot</name></decl>, <decl pos:start="29:21" pos:end="29:21"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:21" pos:end="29:21">i</name></decl>, <decl pos:start="29:24" pos:end="29:31"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:24" pos:end="29:31">nb_nics1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:47"><decl pos:start="31:5" pos:end="31:46"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:21">ram</name> <init pos:start="31:23" pos:end="31:46">= <expr pos:start="31:25" pos:end="31:46"><call pos:start="31:25" pos:end="31:46"><name pos:start="31:25" pos:end="31:29">g_new</name><argument_list pos:start="31:30" pos:end="31:46">(<argument pos:start="31:31" pos:end="31:42"><expr pos:start="31:31" pos:end="31:42"><name pos:start="31:31" pos:end="31:42">MemoryRegion</name></expr></argument>, <argument pos:start="31:45" pos:end="31:45"><expr pos:start="31:45" pos:end="31:45"><literal type="number" pos:start="31:45" pos:end="31:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:38"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:12">uint32_t</name></type> <name pos:start="33:14" pos:end="33:24">kernel_base</name></decl>, <decl pos:start="33:27" pos:end="33:37"><type ref="prev" pos:start="33:5" pos:end="33:12"/><name pos:start="33:27" pos:end="33:37">initrd_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:34"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">long</name></type> <name pos:start="35:10" pos:end="35:20">kernel_size</name></decl>, <decl pos:start="35:23" pos:end="35:33"><type ref="prev" pos:start="35:5" pos:end="35:8"/><name pos:start="35:23" pos:end="35:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:15">DeviceState</name> <modifier pos:start="37:17" pos:end="37:17">*</modifier></type><name pos:start="37:18" pos:end="37:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:26"><decl pos:start="39:5" pos:end="39:25"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">PCIHostState</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:25">pcihost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:10">PCIBus</name> <modifier pos:start="41:12" pos:end="41:12">*</modifier></type><name pos:start="41:13" pos:end="41:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:19"><decl pos:start="43:5" pos:end="43:18"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">PCIDevice</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:18">pci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:10">ISABus</name> <modifier pos:start="45:12" pos:end="45:12">*</modifier></type><name pos:start="45:13" pos:end="45:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:19"><decl pos:start="47:5" pos:end="47:18"><type pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13">ISADevice</name> <modifier pos:start="47:15" pos:end="47:15">*</modifier></type><name pos:start="47:16" pos:end="47:18">isa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:24"><decl pos:start="49:5" pos:end="49:23"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:46"><decl pos:start="51:5" pos:end="51:45"><type pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:13">DriveInfo</name> <modifier pos:start="51:15" pos:end="51:15">*</modifier></type><name pos:start="51:16" pos:end="51:45"><name pos:start="51:16" pos:end="51:17">hd</name><index pos:start="51:18" pos:end="51:45">[<expr pos:start="51:19" pos:end="51:44"><name pos:start="51:19" pos:end="51:29">MAX_IDE_BUS</name> <operator pos:start="51:31" pos:end="51:31">*</operator> <name pos:start="51:33" pos:end="51:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:11">sysctrl</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:42"><name pos:start="55:15" pos:end="55:23">g_malloc0</name><argument_list pos:start="55:24" pos:end="55:42">(<argument pos:start="55:25" pos:end="55:41"><expr pos:start="55:25" pos:end="55:41"><sizeof pos:start="55:25" pos:end="55:41">sizeof<argument_list pos:start="55:31" pos:end="55:41">(<argument pos:start="55:32" pos:end="55:40"><expr pos:start="55:32" pos:end="55:40"><name pos:start="55:32" pos:end="55:40">sysctrl_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:14">linux_boot</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:33">kernel_filename</name> <operator pos:start="59:35" pos:end="59:36">!=</operator> <name pos:start="59:38" pos:end="59:41">NULL</name><operator pos:start="59:42" pos:end="59:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:19">/* init CPUs */</comment>

    <if_stmt pos:start="65:5" pos:end="67:35"><if pos:start="65:5" pos:end="67:35">if <condition pos:start="65:8" pos:end="65:35">(<expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:15">machine</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:26">cpu_model</name></name> <operator pos:start="65:28" pos:end="65:29">==</operator> <name pos:start="65:31" pos:end="65:34">NULL</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:35"><block_content pos:start="67:9" pos:end="67:35">

        <expr_stmt pos:start="67:9" pos:end="67:35"><expr pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:15">machine</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:26">cpu_model</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <literal type="string" pos:start="67:30" pos:end="67:34">"602"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="69:5" pos:end="103:5">for <control pos:start="69:9" pos:end="69:34">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:29"><expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:28">smp_cpus</name></expr>;</condition> <incr pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:31">i</name><operator pos:start="69:32" pos:end="69:33">++</operator></expr></incr>)</control> <block pos:start="69:36" pos:end="103:5">{<block_content pos:start="71:9" pos:end="101:49">

        <expr_stmt pos:start="71:9" pos:end="73:64"><expr pos:start="71:9" pos:end="73:63"><name pos:start="71:9" pos:end="71:11">cpu</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="73:63"><name pos:start="71:15" pos:end="71:25">POWERPC_CPU</name><argument_list pos:start="71:26" pos:end="73:63">(<argument pos:start="71:27" pos:end="73:62"><expr pos:start="71:27" pos:end="73:62"><call pos:start="71:27" pos:end="73:62"><name pos:start="71:27" pos:end="71:42">cpu_generic_init</name><argument_list pos:start="71:43" pos:end="73:62">(<argument pos:start="71:44" pos:end="71:59"><expr pos:start="71:44" pos:end="71:59"><name pos:start="71:44" pos:end="71:59">TYPE_POWERPC_CPU</name></expr></argument>,

                                           <argument pos:start="73:44" pos:end="73:61"><expr pos:start="73:44" pos:end="73:61"><name pos:start="73:44" pos:end="73:61"><name pos:start="73:44" pos:end="73:50">machine</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:61">cpu_model</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:24">(<expr pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:15">cpu</name> <operator pos:start="75:17" pos:end="75:18">==</operator> <name pos:start="75:20" pos:end="75:23">NULL</name></expr>)</condition> <block pos:start="75:26" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:20">

            <expr_stmt pos:start="77:13" pos:end="77:71"><expr pos:start="77:13" pos:end="77:70"><call pos:start="77:13" pos:end="77:70"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:70">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:69"><expr pos:start="77:29" pos:end="77:69"><literal type="string" pos:start="77:29" pos:end="77:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><call pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:16">exit</name><argument_list pos:start="79:17" pos:end="79:19">(<argument pos:start="79:18" pos:end="79:18"><expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:24"><expr pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:11">env</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">&amp;</operator><name pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:18">cpu</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:23">env</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:46">(<expr pos:start="87:13" pos:end="87:45"><name pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:15">env</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:22">flags</name></name> <operator pos:start="87:24" pos:end="87:24">&amp;</operator> <name pos:start="87:26" pos:end="87:45">POWERPC_FLAG_RTC_CLK</name></expr>)</condition> <block pos:start="87:48" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:44">

            <comment type="block" pos:start="89:13" pos:end="89:71">/* POWER / PowerPC 601 RTC clock frequency is 7.8125 MHz */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:43"><call pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:27">cpu_ppc_tb_init</name><argument_list pos:start="91:28" pos:end="91:43">(<argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:31">env</name></expr></argument>, <argument pos:start="91:34" pos:end="91:42"><expr pos:start="91:34" pos:end="91:42"><literal type="number" pos:start="91:34" pos:end="91:42">7812500UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="99:9">else <block pos:start="93:16" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:58">

            <comment type="block" pos:start="95:13" pos:end="95:52">/* Set time-base frequency to 100 Mhz */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:58"><expr pos:start="97:13" pos:end="97:57"><call pos:start="97:13" pos:end="97:57"><name pos:start="97:13" pos:end="97:27">cpu_ppc_tb_init</name><argument_list pos:start="97:28" pos:end="97:57">(<argument pos:start="97:29" pos:end="97:31"><expr pos:start="97:29" pos:end="97:31"><name pos:start="97:29" pos:end="97:31">env</name></expr></argument>, <argument pos:start="97:34" pos:end="97:56"><expr pos:start="97:34" pos:end="97:56"><literal type="number" pos:start="97:34" pos:end="97:38">100UL</literal> <operator pos:start="97:40" pos:end="97:40">*</operator> <literal type="number" pos:start="97:42" pos:end="97:47">1000UL</literal> <operator pos:start="97:49" pos:end="97:49">*</operator> <literal type="number" pos:start="97:51" pos:end="97:56">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:49"><expr pos:start="101:9" pos:end="101:48"><call pos:start="101:9" pos:end="101:48"><name pos:start="101:9" pos:end="101:27">qemu_register_reset</name><argument_list pos:start="101:28" pos:end="101:48">(<argument pos:start="101:29" pos:end="101:42"><expr pos:start="101:29" pos:end="101:42"><name pos:start="101:29" pos:end="101:42">ppc_prep_reset</name></expr></argument>, <argument pos:start="101:45" pos:end="101:47"><expr pos:start="101:45" pos:end="101:47"><name pos:start="101:45" pos:end="101:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="107:5" pos:end="107:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:78"><expr pos:start="109:5" pos:end="109:77"><call pos:start="109:5" pos:end="109:77"><name pos:start="109:5" pos:end="109:40">memory_region_allocate_system_memory</name><argument_list pos:start="109:41" pos:end="109:77">(<argument pos:start="109:42" pos:end="109:44"><expr pos:start="109:42" pos:end="109:44"><name pos:start="109:42" pos:end="109:44">ram</name></expr></argument>, <argument pos:start="109:47" pos:end="109:50"><expr pos:start="109:47" pos:end="109:50"><name pos:start="109:47" pos:end="109:50">NULL</name></expr></argument>, <argument pos:start="109:53" pos:end="109:66"><expr pos:start="109:53" pos:end="109:66"><literal type="string" pos:start="109:53" pos:end="109:66">"ppc_prep.ram"</literal></expr></argument>, <argument pos:start="109:69" pos:end="109:76"><expr pos:start="109:69" pos:end="109:76"><name pos:start="109:69" pos:end="109:76">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:48"><expr pos:start="111:5" pos:end="111:47"><call pos:start="111:5" pos:end="111:47"><name pos:start="111:5" pos:end="111:31">memory_region_add_subregion</name><argument_list pos:start="111:32" pos:end="111:47">(<argument pos:start="111:33" pos:end="111:38"><expr pos:start="111:33" pos:end="111:38"><name pos:start="111:33" pos:end="111:38">sysmem</name></expr></argument>, <argument pos:start="111:41" pos:end="111:41"><expr pos:start="111:41" pos:end="111:41"><literal type="number" pos:start="111:41" pos:end="111:41">0</literal></expr></argument>, <argument pos:start="111:44" pos:end="111:46"><expr pos:start="111:44" pos:end="111:46"><name pos:start="111:44" pos:end="111:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="197:5"><if pos:start="115:5" pos:end="163:5">if <condition pos:start="115:8" pos:end="115:19">(<expr pos:start="115:9" pos:end="115:18"><name pos:start="115:9" pos:end="115:18">linux_boot</name></expr>)</condition> <block pos:start="115:21" pos:end="163:5">{<block_content pos:start="117:9" pos:end="161:30">

        <expr_stmt pos:start="117:9" pos:end="117:39"><expr pos:start="117:9" pos:end="117:38"><name pos:start="117:9" pos:end="117:19">kernel_base</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="119:9" pos:end="119:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:66"><expr pos:start="121:9" pos:end="123:65"><name pos:start="121:9" pos:end="121:19">kernel_size</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <call pos:start="121:23" pos:end="123:65"><name pos:start="121:23" pos:end="121:41">load_image_targphys</name><argument_list pos:start="121:42" pos:end="123:65">(<argument pos:start="121:43" pos:end="121:57"><expr pos:start="121:43" pos:end="121:57"><name pos:start="121:43" pos:end="121:57">kernel_filename</name></expr></argument>, <argument pos:start="121:60" pos:end="121:70"><expr pos:start="121:60" pos:end="121:70"><name pos:start="121:60" pos:end="121:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="123:43" pos:end="123:64"><expr pos:start="123:43" pos:end="123:64"><name pos:start="123:43" pos:end="123:50">ram_size</name> <operator pos:start="123:52" pos:end="123:52">-</operator> <name pos:start="123:54" pos:end="123:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:28">(<expr pos:start="125:13" pos:end="125:27"><name pos:start="125:13" pos:end="125:23">kernel_size</name> <operator pos:start="125:25" pos:end="125:25">&lt;</operator> <literal type="number" pos:start="125:27" pos:end="125:27">0</literal></expr>)</condition> <block pos:start="125:30" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:20">

            <expr_stmt pos:start="127:13" pos:end="127:72"><expr pos:start="127:13" pos:end="127:71"><call pos:start="127:13" pos:end="127:71"><name pos:start="127:13" pos:end="127:24">error_report</name><argument_list pos:start="127:25" pos:end="127:71">(<argument pos:start="127:26" pos:end="127:53"><expr pos:start="127:26" pos:end="127:53"><literal type="string" pos:start="127:26" pos:end="127:53">"could not load kernel '%s'"</literal></expr></argument>, <argument pos:start="127:56" pos:end="127:70"><expr pos:start="127:56" pos:end="127:70"><name pos:start="127:56" pos:end="127:70">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:20"><expr pos:start="129:13" pos:end="129:19"><call pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:16">exit</name><argument_list pos:start="129:17" pos:end="129:19">(<argument pos:start="129:18" pos:end="129:18"><expr pos:start="129:18" pos:end="129:18"><literal type="number" pos:start="129:18" pos:end="129:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="133:9" pos:end="133:25">/* load initrd */</comment>

        <if_stmt pos:start="135:9" pos:end="159:9"><if pos:start="135:9" pos:end="153:9">if <condition pos:start="135:12" pos:end="135:28">(<expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:27">initrd_filename</name></expr>)</condition> <block pos:start="135:30" pos:end="153:9">{<block_content pos:start="137:13" pos:end="151:13">

            <expr_stmt pos:start="137:13" pos:end="137:43"><expr pos:start="137:13" pos:end="137:42"><name pos:start="137:13" pos:end="137:23">initrd_base</name> <operator pos:start="137:25" pos:end="137:25">=</operator> <name pos:start="137:27" pos:end="137:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="141:70"><expr pos:start="139:13" pos:end="141:69"><name pos:start="139:13" pos:end="139:23">initrd_size</name> <operator pos:start="139:25" pos:end="139:25">=</operator> <call pos:start="139:27" pos:end="141:69"><name pos:start="139:27" pos:end="139:45">load_image_targphys</name><argument_list pos:start="139:46" pos:end="141:69">(<argument pos:start="139:47" pos:end="139:61"><expr pos:start="139:47" pos:end="139:61"><name pos:start="139:47" pos:end="139:61">initrd_filename</name></expr></argument>, <argument pos:start="139:64" pos:end="139:74"><expr pos:start="139:64" pos:end="139:74"><name pos:start="139:64" pos:end="139:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="141:47" pos:end="141:68"><expr pos:start="141:47" pos:end="141:68"><name pos:start="141:47" pos:end="141:54">ram_size</name> <operator pos:start="141:56" pos:end="141:56">-</operator> <name pos:start="141:58" pos:end="141:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="151:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:32">(<expr pos:start="143:17" pos:end="143:31"><name pos:start="143:17" pos:end="143:27">initrd_size</name> <operator pos:start="143:29" pos:end="143:29">&lt;</operator> <literal type="number" pos:start="143:31" pos:end="143:31">0</literal></expr>)</condition> <block pos:start="143:34" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:24">

                <expr_stmt pos:start="145:17" pos:end="147:46"><expr pos:start="145:17" pos:end="147:45"><call pos:start="145:17" pos:end="147:45"><name pos:start="145:17" pos:end="145:28">error_report</name><argument_list pos:start="145:29" pos:end="147:45">(<argument pos:start="145:30" pos:end="145:67"><expr pos:start="145:30" pos:end="145:67"><literal type="string" pos:start="145:30" pos:end="145:67">"could not load initial ram disk '%s'"</literal></expr></argument>,

                             <argument pos:start="147:30" pos:end="147:44"><expr pos:start="147:30" pos:end="147:44"><name pos:start="147:30" pos:end="147:44">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:24"><expr pos:start="149:17" pos:end="149:23"><call pos:start="149:17" pos:end="149:23"><name pos:start="149:17" pos:end="149:20">exit</name><argument_list pos:start="149:21" pos:end="149:23">(<argument pos:start="149:22" pos:end="149:22"><expr pos:start="149:22" pos:end="149:22"><literal type="number" pos:start="149:22" pos:end="149:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="159:9">else <block pos:start="153:16" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:28">

            <expr_stmt pos:start="155:13" pos:end="155:28"><expr pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:23">initrd_base</name> <operator pos:start="155:25" pos:end="155:25">=</operator> <literal type="number" pos:start="155:27" pos:end="155:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:28"><expr pos:start="157:13" pos:end="157:27"><name pos:start="157:13" pos:end="157:23">initrd_size</name> <operator pos:start="157:25" pos:end="157:25">=</operator> <literal type="number" pos:start="157:27" pos:end="157:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:30"><expr pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:23">ppc_boot_device</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <literal type="char" pos:start="161:27" pos:end="161:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="197:5">else <block pos:start="163:12" pos:end="197:5">{<block_content pos:start="165:9" pos:end="195:9">

        <expr_stmt pos:start="165:9" pos:end="165:24"><expr pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:19">kernel_base</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <literal type="number" pos:start="165:23" pos:end="165:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:24"><expr pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:19">kernel_size</name> <operator pos:start="167:21" pos:end="167:21">=</operator> <literal type="number" pos:start="167:23" pos:end="167:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:19">initrd_base</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:24"><expr pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:19">initrd_size</name> <operator pos:start="171:21" pos:end="171:21">=</operator> <literal type="number" pos:start="171:23" pos:end="171:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:31"><expr pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:23">ppc_boot_device</name> <operator pos:start="173:25" pos:end="173:25">=</operator> <literal type="char" pos:start="173:27" pos:end="173:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="175:9" pos:end="175:56">/* For now, OHW cannot boot from the network. */</comment>

        <for pos:start="177:9" pos:end="187:9">for <control pos:start="177:13" pos:end="177:48">(<init pos:start="177:14" pos:end="177:19"><expr pos:start="177:14" pos:end="177:18"><name pos:start="177:14" pos:end="177:14">i</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <literal type="number" pos:start="177:18" pos:end="177:18">0</literal></expr>;</init> <condition pos:start="177:21" pos:end="177:43"><expr pos:start="177:21" pos:end="177:42"><name pos:start="177:21" pos:end="177:34"><name pos:start="177:21" pos:end="177:31">boot_device</name><index pos:start="177:32" pos:end="177:34">[<expr pos:start="177:33" pos:end="177:33"><name pos:start="177:33" pos:end="177:33">i</name></expr>]</index></name> <operator pos:start="177:36" pos:end="177:37">!=</operator> <literal type="char" pos:start="177:39" pos:end="177:42">'\0'</literal></expr>;</condition> <incr pos:start="177:45" pos:end="177:47"><expr pos:start="177:45" pos:end="177:47"><name pos:start="177:45" pos:end="177:45">i</name><operator pos:start="177:46" pos:end="177:47">++</operator></expr></incr>)</control> <block pos:start="177:50" pos:end="187:9">{<block_content pos:start="179:13" pos:end="185:13">

            <if_stmt pos:start="179:13" pos:end="185:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:63">(<expr pos:start="179:17" pos:end="179:62"><name pos:start="179:17" pos:end="179:30"><name pos:start="179:17" pos:end="179:27">boot_device</name><index pos:start="179:28" pos:end="179:30">[<expr pos:start="179:29" pos:end="179:29"><name pos:start="179:29" pos:end="179:29">i</name></expr>]</index></name> <operator pos:start="179:32" pos:end="179:33">&gt;=</operator> <literal type="char" pos:start="179:35" pos:end="179:37">'a'</literal> <operator pos:start="179:39" pos:end="179:40">&amp;&amp;</operator> <name pos:start="179:42" pos:end="179:55"><name pos:start="179:42" pos:end="179:52">boot_device</name><index pos:start="179:53" pos:end="179:55">[<expr pos:start="179:54" pos:end="179:54"><name pos:start="179:54" pos:end="179:54">i</name></expr>]</index></name> <operator pos:start="179:57" pos:end="179:58">&lt;=</operator> <literal type="char" pos:start="179:60" pos:end="179:62">'f'</literal></expr>)</condition> <block pos:start="179:65" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:22">

                <expr_stmt pos:start="181:17" pos:end="181:49"><expr pos:start="181:17" pos:end="181:48"><name pos:start="181:17" pos:end="181:31">ppc_boot_device</name> <operator pos:start="181:33" pos:end="181:33">=</operator> <name pos:start="181:35" pos:end="181:48"><name pos:start="181:35" pos:end="181:45">boot_device</name><index pos:start="181:46" pos:end="181:48">[<expr pos:start="181:47" pos:end="181:47"><name pos:start="181:47" pos:end="181:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:36">(<expr pos:start="189:13" pos:end="189:35"><name pos:start="189:13" pos:end="189:27">ppc_boot_device</name> <operator pos:start="189:29" pos:end="189:30">==</operator> <literal type="char" pos:start="189:32" pos:end="189:35">'\0'</literal></expr>)</condition> <block pos:start="189:38" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:20">

            <expr_stmt pos:start="191:13" pos:end="191:72"><expr pos:start="191:13" pos:end="191:71"><call pos:start="191:13" pos:end="191:71"><name pos:start="191:13" pos:end="191:19">fprintf</name><argument_list pos:start="191:20" pos:end="191:71">(<argument pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">stderr</name></expr></argument>, <argument pos:start="191:29" pos:end="191:70"><expr pos:start="191:29" pos:end="191:70"><literal type="string" pos:start="191:29" pos:end="191:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:20"><expr pos:start="193:13" pos:end="193:19"><call pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:16">exit</name><argument_list pos:start="193:17" pos:end="193:19">(<argument pos:start="193:18" pos:end="193:18"><expr pos:start="193:18" pos:end="193:18"><literal type="number" pos:start="193:18" pos:end="193:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="201:5" pos:end="207:5"><if pos:start="201:5" pos:end="207:5">if <condition pos:start="201:8" pos:end="201:46">(<expr pos:start="201:9" pos:end="201:45"><call pos:start="201:9" pos:end="201:22"><name pos:start="201:9" pos:end="201:17">PPC_INPUT</name><argument_list pos:start="201:18" pos:end="201:22">(<argument pos:start="201:19" pos:end="201:21"><expr pos:start="201:19" pos:end="201:21"><name pos:start="201:19" pos:end="201:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="201:24" pos:end="201:25">!=</operator> <name pos:start="201:27" pos:end="201:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="201:48" pos:end="207:5">{<block_content pos:start="203:9" pos:end="205:16">

        <expr_stmt pos:start="203:9" pos:end="203:66"><expr pos:start="203:9" pos:end="203:65"><call pos:start="203:9" pos:end="203:65"><name pos:start="203:9" pos:end="203:20">error_report</name><argument_list pos:start="203:21" pos:end="203:65">(<argument pos:start="203:22" pos:end="203:64"><expr pos:start="203:22" pos:end="203:64"><literal type="string" pos:start="203:22" pos:end="203:64">"Only 6xx bus is supported on PREP machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:16"><expr pos:start="205:9" pos:end="205:15"><call pos:start="205:9" pos:end="205:15"><name pos:start="205:9" pos:end="205:12">exit</name><argument_list pos:start="205:13" pos:end="205:15">(<argument pos:start="205:14" pos:end="205:14"><expr pos:start="205:14" pos:end="205:14"><literal type="number" pos:start="205:14" pos:end="205:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:45"><expr pos:start="211:5" pos:end="211:44"><name pos:start="211:5" pos:end="211:7">dev</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <call pos:start="211:11" pos:end="211:44"><name pos:start="211:11" pos:end="211:21">qdev_create</name><argument_list pos:start="211:22" pos:end="211:44">(<argument pos:start="211:23" pos:end="211:26"><expr pos:start="211:23" pos:end="211:26"><name pos:start="211:23" pos:end="211:26">NULL</name></expr></argument>, <argument pos:start="211:29" pos:end="211:43"><expr pos:start="211:29" pos:end="211:43"><literal type="string" pos:start="211:29" pos:end="211:43">"raven-pcihost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="213:5" pos:end="217:5"><if pos:start="213:5" pos:end="217:5">if <condition pos:start="213:8" pos:end="213:26">(<expr pos:start="213:9" pos:end="213:25"><name pos:start="213:9" pos:end="213:17">bios_name</name> <operator pos:start="213:19" pos:end="213:20">==</operator> <name pos:start="213:22" pos:end="213:25">NULL</name></expr>)</condition> <block pos:start="213:28" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:34">

        <expr_stmt pos:start="215:9" pos:end="215:34"><expr pos:start="215:9" pos:end="215:33"><name pos:start="215:9" pos:end="215:17">bios_name</name> <operator pos:start="215:19" pos:end="215:19">=</operator> <name pos:start="215:21" pos:end="215:33">BIOS_FILENAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:54"><expr pos:start="219:5" pos:end="219:53"><call pos:start="219:5" pos:end="219:53"><name pos:start="219:5" pos:end="219:24">qdev_prop_set_string</name><argument_list pos:start="219:25" pos:end="219:53">(<argument pos:start="219:26" pos:end="219:28"><expr pos:start="219:26" pos:end="219:28"><name pos:start="219:26" pos:end="219:28">dev</name></expr></argument>, <argument pos:start="219:31" pos:end="219:41"><expr pos:start="219:31" pos:end="219:41"><literal type="string" pos:start="219:31" pos:end="219:41">"bios-name"</literal></expr></argument>, <argument pos:start="219:44" pos:end="219:52"><expr pos:start="219:44" pos:end="219:52"><name pos:start="219:44" pos:end="219:52">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:62"><expr pos:start="221:5" pos:end="221:61"><call pos:start="221:5" pos:end="221:61"><name pos:start="221:5" pos:end="221:24">qdev_prop_set_uint32</name><argument_list pos:start="221:25" pos:end="221:61">(<argument pos:start="221:26" pos:end="221:28"><expr pos:start="221:26" pos:end="221:28"><name pos:start="221:26" pos:end="221:28">dev</name></expr></argument>, <argument pos:start="221:31" pos:end="221:43"><expr pos:start="221:31" pos:end="221:43"><literal type="string" pos:start="221:31" pos:end="221:43">"elf-machine"</literal></expr></argument>, <argument pos:start="221:46" pos:end="221:60"><expr pos:start="221:46" pos:end="221:60"><name pos:start="221:46" pos:end="221:60">PPC_ELF_MACHINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:35"><expr pos:start="223:5" pos:end="223:34"><name pos:start="223:5" pos:end="223:11">pcihost</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:34"><name pos:start="223:15" pos:end="223:29">PCI_HOST_BRIDGE</name><argument_list pos:start="223:30" pos:end="223:34">(<argument pos:start="223:31" pos:end="223:33"><expr pos:start="223:31" pos:end="223:33"><name pos:start="223:31" pos:end="223:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:78"><expr pos:start="225:5" pos:end="225:77"><call pos:start="225:5" pos:end="225:77"><name pos:start="225:5" pos:end="225:29">object_property_add_child</name><argument_list pos:start="225:30" pos:end="225:77">(<argument pos:start="225:31" pos:end="225:48"><expr pos:start="225:31" pos:end="225:48"><call pos:start="225:31" pos:end="225:48"><name pos:start="225:31" pos:end="225:46">qdev_get_machine</name><argument_list pos:start="225:47" pos:end="225:48">()</argument_list></call></expr></argument>, <argument pos:start="225:51" pos:end="225:57"><expr pos:start="225:51" pos:end="225:57"><literal type="string" pos:start="225:51" pos:end="225:57">"raven"</literal></expr></argument>, <argument pos:start="225:60" pos:end="225:70"><expr pos:start="225:60" pos:end="225:70"><call pos:start="225:60" pos:end="225:70"><name pos:start="225:60" pos:end="225:65">OBJECT</name><argument_list pos:start="225:66" pos:end="225:70">(<argument pos:start="225:67" pos:end="225:69"><expr pos:start="225:67" pos:end="225:69"><name pos:start="225:67" pos:end="225:69">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="225:73" pos:end="225:76"><expr pos:start="225:73" pos:end="225:76"><name pos:start="225:73" pos:end="225:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:26"><expr pos:start="227:5" pos:end="227:25"><call pos:start="227:5" pos:end="227:25"><name pos:start="227:5" pos:end="227:20">qdev_init_nofail</name><argument_list pos:start="227:21" pos:end="227:25">(<argument pos:start="227:22" pos:end="227:24"><expr pos:start="227:22" pos:end="227:24"><name pos:start="227:22" pos:end="227:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:57"><expr pos:start="229:5" pos:end="229:56"><name pos:start="229:5" pos:end="229:11">pci_bus</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <operator pos:start="229:15" pos:end="229:15">(</operator><name pos:start="229:16" pos:end="229:21">PCIBus</name> <operator pos:start="229:23" pos:end="229:23">*</operator><operator pos:start="229:24" pos:end="229:24">)</operator><call pos:start="229:25" pos:end="229:56"><name pos:start="229:25" pos:end="229:42">qdev_get_child_bus</name><argument_list pos:start="229:43" pos:end="229:56">(<argument pos:start="229:44" pos:end="229:46"><expr pos:start="229:44" pos:end="229:46"><name pos:start="229:44" pos:end="229:46">dev</name></expr></argument>, <argument pos:start="229:49" pos:end="229:55"><expr pos:start="229:49" pos:end="229:55"><literal type="string" pos:start="229:49" pos:end="229:55">"pci.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:24">(<expr pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:15">pci_bus</name> <operator pos:start="231:17" pos:end="231:18">==</operator> <name pos:start="231:20" pos:end="231:23">NULL</name></expr>)</condition> <block pos:start="231:26" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:16">

        <expr_stmt pos:start="233:9" pos:end="233:66"><expr pos:start="233:9" pos:end="233:65"><call pos:start="233:9" pos:end="233:65"><name pos:start="233:9" pos:end="233:15">fprintf</name><argument_list pos:start="233:16" pos:end="233:65">(<argument pos:start="233:17" pos:end="233:22"><expr pos:start="233:17" pos:end="233:22"><name pos:start="233:17" pos:end="233:22">stderr</name></expr></argument>, <argument pos:start="233:25" pos:end="233:64"><expr pos:start="233:25" pos:end="233:64"><literal type="string" pos:start="233:25" pos:end="233:64">"Couldn't create PCI host controller.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:16"><expr pos:start="235:9" pos:end="235:15"><call pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:12">exit</name><argument_list pos:start="235:13" pos:end="235:15">(<argument pos:start="235:14" pos:end="235:14"><expr pos:start="235:14" pos:end="235:14"><literal type="number" pos:start="235:14" pos:end="235:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:59"><expr pos:start="239:5" pos:end="239:58"><name pos:start="239:5" pos:end="239:31"><name pos:start="239:5" pos:end="239:11">sysctrl</name><operator pos:start="239:12" pos:end="239:13">-&gt;</operator><name pos:start="239:14" pos:end="239:31">contiguous_map_irq</name></name> <operator pos:start="239:33" pos:end="239:33">=</operator> <call pos:start="239:35" pos:end="239:58"><name pos:start="239:35" pos:end="239:50">qdev_get_gpio_in</name><argument_list pos:start="239:51" pos:end="239:58">(<argument pos:start="239:52" pos:end="239:54"><expr pos:start="239:52" pos:end="239:54"><name pos:start="239:52" pos:end="239:54">dev</name></expr></argument>, <argument pos:start="239:57" pos:end="239:57"><expr pos:start="239:57" pos:end="239:57"><literal type="number" pos:start="239:57" pos:end="239:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:27">/* PCI -&gt; ISA bridge */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:64"><expr pos:start="245:5" pos:end="245:63"><name pos:start="245:5" pos:end="245:7">pci</name> <operator pos:start="245:9" pos:end="245:9">=</operator> <call pos:start="245:11" pos:end="245:63"><name pos:start="245:11" pos:end="245:27">pci_create_simple</name><argument_list pos:start="245:28" pos:end="245:63">(<argument pos:start="245:29" pos:end="245:35"><expr pos:start="245:29" pos:end="245:35"><name pos:start="245:29" pos:end="245:35">pci_bus</name></expr></argument>, <argument pos:start="245:38" pos:end="245:52"><expr pos:start="245:38" pos:end="245:52"><call pos:start="245:38" pos:end="245:52"><name pos:start="245:38" pos:end="245:46">PCI_DEVFN</name><argument_list pos:start="245:47" pos:end="245:52">(<argument pos:start="245:48" pos:end="245:48"><expr pos:start="245:48" pos:end="245:48"><literal type="number" pos:start="245:48" pos:end="245:48">1</literal></expr></argument>, <argument pos:start="245:51" pos:end="245:51"><expr pos:start="245:51" pos:end="245:51"><literal type="number" pos:start="245:51" pos:end="245:51">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:55" pos:end="245:62"><expr pos:start="245:55" pos:end="245:62"><literal type="string" pos:start="245:55" pos:end="245:62">"i82378"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:33"><expr pos:start="247:5" pos:end="247:32"><name pos:start="247:5" pos:end="247:7">cpu</name> <operator pos:start="247:9" pos:end="247:9">=</operator> <call pos:start="247:11" pos:end="247:32"><name pos:start="247:11" pos:end="247:21">POWERPC_CPU</name><argument_list pos:start="247:22" pos:end="247:32">(<argument pos:start="247:23" pos:end="247:31"><expr pos:start="247:23" pos:end="247:31"><name pos:start="247:23" pos:end="247:31">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="251:65"><expr pos:start="249:5" pos:end="251:64"><call pos:start="249:5" pos:end="251:64"><name pos:start="249:5" pos:end="249:25">qdev_connect_gpio_out</name><argument_list pos:start="249:26" pos:end="251:64">(<argument pos:start="249:27" pos:end="249:36"><expr pos:start="249:27" pos:end="249:36"><operator pos:start="249:27" pos:end="249:27">&amp;</operator><name pos:start="249:28" pos:end="249:36"><name pos:start="249:28" pos:end="249:30">pci</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:36">qdev</name></name></expr></argument>, <argument pos:start="249:39" pos:end="249:39"><expr pos:start="249:39" pos:end="249:39"><literal type="number" pos:start="249:39" pos:end="249:39">0</literal></expr></argument>,

                          <argument pos:start="251:27" pos:end="251:63"><expr pos:start="251:27" pos:end="251:63"><name pos:start="251:27" pos:end="251:63"><name pos:start="251:27" pos:end="251:29">cpu</name><operator pos:start="251:30" pos:end="251:31">-&gt;</operator><name pos:start="251:32" pos:end="251:34">env</name><operator pos:start="251:35" pos:end="251:35">.</operator><name pos:start="251:36" pos:end="251:45">irq_inputs</name><index pos:start="251:46" pos:end="251:63">[<expr pos:start="251:47" pos:end="251:62"><name pos:start="251:47" pos:end="251:62">PPC6xx_INPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:77"><expr pos:start="253:5" pos:end="253:76"><call pos:start="253:5" pos:end="253:76"><name pos:start="253:5" pos:end="253:22">sysbus_connect_irq</name><argument_list pos:start="253:23" pos:end="253:76">(<argument pos:start="253:24" pos:end="253:39"><expr pos:start="253:24" pos:end="253:39"><operator pos:start="253:24" pos:end="253:24">&amp;</operator><name pos:start="253:25" pos:end="253:39"><name pos:start="253:25" pos:end="253:31">pcihost</name><operator pos:start="253:32" pos:end="253:33">-&gt;</operator><name pos:start="253:34" pos:end="253:39">busdev</name></name></expr></argument>, <argument pos:start="253:42" pos:end="253:42"><expr pos:start="253:42" pos:end="253:42"><literal type="number" pos:start="253:42" pos:end="253:42">0</literal></expr></argument>, <argument pos:start="253:45" pos:end="253:75"><expr pos:start="253:45" pos:end="253:75"><call pos:start="253:45" pos:end="253:75"><name pos:start="253:45" pos:end="253:60">qdev_get_gpio_in</name><argument_list pos:start="253:61" pos:end="253:75">(<argument pos:start="253:62" pos:end="253:71"><expr pos:start="253:62" pos:end="253:71"><operator pos:start="253:62" pos:end="253:62">&amp;</operator><name pos:start="253:63" pos:end="253:71"><name pos:start="253:63" pos:end="253:65">pci</name><operator pos:start="253:66" pos:end="253:67">-&gt;</operator><name pos:start="253:68" pos:end="253:71">qdev</name></name></expr></argument>, <argument pos:start="253:74" pos:end="253:74"><expr pos:start="253:74" pos:end="253:74"><literal type="number" pos:start="253:74" pos:end="253:74">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:78"><expr pos:start="255:5" pos:end="255:77"><call pos:start="255:5" pos:end="255:77"><name pos:start="255:5" pos:end="255:22">sysbus_connect_irq</name><argument_list pos:start="255:23" pos:end="255:77">(<argument pos:start="255:24" pos:end="255:39"><expr pos:start="255:24" pos:end="255:39"><operator pos:start="255:24" pos:end="255:24">&amp;</operator><name pos:start="255:25" pos:end="255:39"><name pos:start="255:25" pos:end="255:31">pcihost</name><operator pos:start="255:32" pos:end="255:33">-&gt;</operator><name pos:start="255:34" pos:end="255:39">busdev</name></name></expr></argument>, <argument pos:start="255:42" pos:end="255:42"><expr pos:start="255:42" pos:end="255:42"><literal type="number" pos:start="255:42" pos:end="255:42">1</literal></expr></argument>, <argument pos:start="255:45" pos:end="255:76"><expr pos:start="255:45" pos:end="255:76"><call pos:start="255:45" pos:end="255:76"><name pos:start="255:45" pos:end="255:60">qdev_get_gpio_in</name><argument_list pos:start="255:61" pos:end="255:76">(<argument pos:start="255:62" pos:end="255:71"><expr pos:start="255:62" pos:end="255:71"><operator pos:start="255:62" pos:end="255:62">&amp;</operator><name pos:start="255:63" pos:end="255:71"><name pos:start="255:63" pos:end="255:65">pci</name><operator pos:start="255:66" pos:end="255:67">-&gt;</operator><name pos:start="255:68" pos:end="255:71">qdev</name></name></expr></argument>, <argument pos:start="255:74" pos:end="255:75"><expr pos:start="255:74" pos:end="255:75"><literal type="number" pos:start="255:74" pos:end="255:75">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:77"><expr pos:start="257:5" pos:end="257:76"><call pos:start="257:5" pos:end="257:76"><name pos:start="257:5" pos:end="257:22">sysbus_connect_irq</name><argument_list pos:start="257:23" pos:end="257:76">(<argument pos:start="257:24" pos:end="257:39"><expr pos:start="257:24" pos:end="257:39"><operator pos:start="257:24" pos:end="257:24">&amp;</operator><name pos:start="257:25" pos:end="257:39"><name pos:start="257:25" pos:end="257:31">pcihost</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:39">busdev</name></name></expr></argument>, <argument pos:start="257:42" pos:end="257:42"><expr pos:start="257:42" pos:end="257:42"><literal type="number" pos:start="257:42" pos:end="257:42">2</literal></expr></argument>, <argument pos:start="257:45" pos:end="257:75"><expr pos:start="257:45" pos:end="257:75"><call pos:start="257:45" pos:end="257:75"><name pos:start="257:45" pos:end="257:60">qdev_get_gpio_in</name><argument_list pos:start="257:61" pos:end="257:75">(<argument pos:start="257:62" pos:end="257:71"><expr pos:start="257:62" pos:end="257:71"><operator pos:start="257:62" pos:end="257:62">&amp;</operator><name pos:start="257:63" pos:end="257:71"><name pos:start="257:63" pos:end="257:65">pci</name><operator pos:start="257:66" pos:end="257:67">-&gt;</operator><name pos:start="257:68" pos:end="257:71">qdev</name></name></expr></argument>, <argument pos:start="257:74" pos:end="257:74"><expr pos:start="257:74" pos:end="257:74"><literal type="number" pos:start="257:74" pos:end="257:74">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:78"><expr pos:start="259:5" pos:end="259:77"><call pos:start="259:5" pos:end="259:77"><name pos:start="259:5" pos:end="259:22">sysbus_connect_irq</name><argument_list pos:start="259:23" pos:end="259:77">(<argument pos:start="259:24" pos:end="259:39"><expr pos:start="259:24" pos:end="259:39"><operator pos:start="259:24" pos:end="259:24">&amp;</operator><name pos:start="259:25" pos:end="259:39"><name pos:start="259:25" pos:end="259:31">pcihost</name><operator pos:start="259:32" pos:end="259:33">-&gt;</operator><name pos:start="259:34" pos:end="259:39">busdev</name></name></expr></argument>, <argument pos:start="259:42" pos:end="259:42"><expr pos:start="259:42" pos:end="259:42"><literal type="number" pos:start="259:42" pos:end="259:42">3</literal></expr></argument>, <argument pos:start="259:45" pos:end="259:76"><expr pos:start="259:45" pos:end="259:76"><call pos:start="259:45" pos:end="259:76"><name pos:start="259:45" pos:end="259:60">qdev_get_gpio_in</name><argument_list pos:start="259:61" pos:end="259:76">(<argument pos:start="259:62" pos:end="259:71"><expr pos:start="259:62" pos:end="259:71"><operator pos:start="259:62" pos:end="259:62">&amp;</operator><name pos:start="259:63" pos:end="259:71"><name pos:start="259:63" pos:end="259:65">pci</name><operator pos:start="259:66" pos:end="259:67">-&gt;</operator><name pos:start="259:68" pos:end="259:71">qdev</name></name></expr></argument>, <argument pos:start="259:74" pos:end="259:75"><expr pos:start="259:74" pos:end="259:75"><literal type="number" pos:start="259:74" pos:end="259:75">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:64"><expr pos:start="261:5" pos:end="261:63"><name pos:start="261:5" pos:end="261:11">isa_bus</name> <operator pos:start="261:13" pos:end="261:13">=</operator> <call pos:start="261:15" pos:end="261:63"><name pos:start="261:15" pos:end="261:21">ISA_BUS</name><argument_list pos:start="261:22" pos:end="261:63">(<argument pos:start="261:23" pos:end="261:62"><expr pos:start="261:23" pos:end="261:62"><call pos:start="261:23" pos:end="261:62"><name pos:start="261:23" pos:end="261:40">qdev_get_child_bus</name><argument_list pos:start="261:41" pos:end="261:62">(<argument pos:start="261:42" pos:end="261:52"><expr pos:start="261:42" pos:end="261:52"><call pos:start="261:42" pos:end="261:52"><name pos:start="261:42" pos:end="261:47">DEVICE</name><argument_list pos:start="261:48" pos:end="261:52">(<argument pos:start="261:49" pos:end="261:51"><expr pos:start="261:49" pos:end="261:51"><name pos:start="261:49" pos:end="261:51">pci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="261:55" pos:end="261:61"><expr pos:start="261:55" pos:end="261:61"><literal type="string" pos:start="261:55" pos:end="261:61">"isa.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="265:5" pos:end="265:45">/* Super I/O (parallel + serial ports) */</comment>

    <expr_stmt pos:start="267:5" pos:end="267:44"><expr pos:start="267:5" pos:end="267:43"><name pos:start="267:5" pos:end="267:7">isa</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <call pos:start="267:11" pos:end="267:43"><name pos:start="267:11" pos:end="267:20">isa_create</name><argument_list pos:start="267:21" pos:end="267:43">(<argument pos:start="267:22" pos:end="267:28"><expr pos:start="267:22" pos:end="267:28"><name pos:start="267:22" pos:end="267:28">isa_bus</name></expr></argument>, <argument pos:start="267:31" pos:end="267:42"><expr pos:start="267:31" pos:end="267:42"><name pos:start="267:31" pos:end="267:42">TYPE_PC87312</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:22"><expr pos:start="269:5" pos:end="269:21"><name pos:start="269:5" pos:end="269:7">dev</name> <operator pos:start="269:9" pos:end="269:9">=</operator> <call pos:start="269:11" pos:end="269:21"><name pos:start="269:11" pos:end="269:16">DEVICE</name><argument_list pos:start="269:17" pos:end="269:21">(<argument pos:start="269:18" pos:end="269:20"><expr pos:start="269:18" pos:end="269:20"><name pos:start="269:18" pos:end="269:20">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:43"><expr pos:start="271:5" pos:end="271:42"><call pos:start="271:5" pos:end="271:42"><name pos:start="271:5" pos:end="271:23">qdev_prop_set_uint8</name><argument_list pos:start="271:24" pos:end="271:42">(<argument pos:start="271:25" pos:end="271:27"><expr pos:start="271:25" pos:end="271:27"><name pos:start="271:25" pos:end="271:27">dev</name></expr></argument>, <argument pos:start="271:30" pos:end="271:37"><expr pos:start="271:30" pos:end="271:37"><literal type="string" pos:start="271:30" pos:end="271:37">"config"</literal></expr></argument>, <argument pos:start="271:40" pos:end="271:41"><expr pos:start="271:40" pos:end="271:41"><literal type="number" pos:start="271:40" pos:end="271:41">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="271:45" pos:end="271:71">/* fdc, ser0, ser1, par0 */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:26"><expr pos:start="273:5" pos:end="273:25"><call pos:start="273:5" pos:end="273:25"><name pos:start="273:5" pos:end="273:20">qdev_init_nofail</name><argument_list pos:start="273:21" pos:end="273:25">(<argument pos:start="273:22" pos:end="273:24"><expr pos:start="273:22" pos:end="273:24"><name pos:start="273:22" pos:end="273:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="277:5" pos:end="277:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="279:5" pos:end="279:26"><expr pos:start="279:5" pos:end="279:25"><call pos:start="279:5" pos:end="279:25"><name pos:start="279:5" pos:end="279:16">pci_vga_init</name><argument_list pos:start="279:17" pos:end="279:25">(<argument pos:start="279:18" pos:end="279:24"><expr pos:start="279:18" pos:end="279:24"><name pos:start="279:18" pos:end="279:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:23"><expr pos:start="283:5" pos:end="283:22"><name pos:start="283:5" pos:end="283:12">nb_nics1</name> <operator pos:start="283:14" pos:end="283:14">=</operator> <name pos:start="283:16" pos:end="283:22">nb_nics</name></expr>;</expr_stmt>

    <if_stmt pos:start="285:5" pos:end="287:33"><if pos:start="285:5" pos:end="287:33">if <condition pos:start="285:8" pos:end="285:33">(<expr pos:start="285:9" pos:end="285:32"><name pos:start="285:9" pos:end="285:16">nb_nics1</name> <operator pos:start="285:18" pos:end="285:18">&gt;</operator> <name pos:start="285:20" pos:end="285:32">NE2000_NB_MAX</name></expr>)</condition><block type="pseudo" pos:start="287:9" pos:end="287:33"><block_content pos:start="287:9" pos:end="287:33">

        <expr_stmt pos:start="287:9" pos:end="287:33"><expr pos:start="287:9" pos:end="287:32"><name pos:start="287:9" pos:end="287:16">nb_nics1</name> <operator pos:start="287:18" pos:end="287:18">=</operator> <name pos:start="287:20" pos:end="287:32">NE2000_NB_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="289:5" pos:end="309:5">for<control pos:start="289:8" pos:end="289:33">(<init pos:start="289:9" pos:end="289:14"><expr pos:start="289:9" pos:end="289:13"><name pos:start="289:9" pos:end="289:9">i</name> <operator pos:start="289:11" pos:end="289:11">=</operator> <literal type="number" pos:start="289:13" pos:end="289:13">0</literal></expr>;</init> <condition pos:start="289:16" pos:end="289:28"><expr pos:start="289:16" pos:end="289:27"><name pos:start="289:16" pos:end="289:16">i</name> <operator pos:start="289:18" pos:end="289:18">&lt;</operator> <name pos:start="289:20" pos:end="289:27">nb_nics1</name></expr>;</condition> <incr pos:start="289:30" pos:end="289:32"><expr pos:start="289:30" pos:end="289:32"><name pos:start="289:30" pos:end="289:30">i</name><operator pos:start="289:31" pos:end="289:32">++</operator></expr></incr>)</control> <block pos:start="289:35" pos:end="309:5">{<block_content pos:start="291:9" pos:end="307:9">

        <if_stmt pos:start="291:9" pos:end="295:9"><if pos:start="291:9" pos:end="295:9">if <condition pos:start="291:12" pos:end="291:38">(<expr pos:start="291:13" pos:end="291:37"><name pos:start="291:13" pos:end="291:23"><name pos:start="291:13" pos:end="291:20">nd_table</name><index pos:start="291:21" pos:end="291:23">[<expr pos:start="291:22" pos:end="291:22"><name pos:start="291:22" pos:end="291:22">i</name></expr>]</index></name><operator pos:start="291:24" pos:end="291:24">.</operator><name pos:start="291:25" pos:end="291:29">model</name> <operator pos:start="291:31" pos:end="291:32">==</operator> <name pos:start="291:34" pos:end="291:37">NULL</name></expr>)</condition> <block pos:start="291:40" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:53">

	    <expr_stmt pos:start="293:13" pos:end="293:53"><expr pos:start="293:13" pos:end="293:52"><name pos:start="293:13" pos:end="293:23"><name pos:start="293:13" pos:end="293:20">nd_table</name><index pos:start="293:21" pos:end="293:23">[<expr pos:start="293:22" pos:end="293:22"><name pos:start="293:22" pos:end="293:22">i</name></expr>]</index></name><operator pos:start="293:24" pos:end="293:24">.</operator><name pos:start="293:25" pos:end="293:29">model</name> <operator pos:start="293:31" pos:end="293:31">=</operator> <call pos:start="293:33" pos:end="293:52"><name pos:start="293:33" pos:end="293:40">g_strdup</name><argument_list pos:start="293:41" pos:end="293:52">(<argument pos:start="293:42" pos:end="293:51"><expr pos:start="293:42" pos:end="293:51"><literal type="string" pos:start="293:42" pos:end="293:51">"ne2k_isa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="297:9" pos:end="307:9"><if pos:start="297:9" pos:end="303:9">if <condition pos:start="297:12" pos:end="297:55">(<expr pos:start="297:13" pos:end="297:54"><call pos:start="297:13" pos:end="297:49"><name pos:start="297:13" pos:end="297:18">strcmp</name><argument_list pos:start="297:19" pos:end="297:49">(<argument pos:start="297:20" pos:end="297:36"><expr pos:start="297:20" pos:end="297:36"><name pos:start="297:20" pos:end="297:30"><name pos:start="297:20" pos:end="297:27">nd_table</name><index pos:start="297:28" pos:end="297:30">[<expr pos:start="297:29" pos:end="297:29"><name pos:start="297:29" pos:end="297:29">i</name></expr>]</index></name><operator pos:start="297:31" pos:end="297:31">.</operator><name pos:start="297:32" pos:end="297:36">model</name></expr></argument>, <argument pos:start="297:39" pos:end="297:48"><expr pos:start="297:39" pos:end="297:48"><literal type="string" pos:start="297:39" pos:end="297:48">"ne2k_isa"</literal></expr></argument>)</argument_list></call> <operator pos:start="297:51" pos:end="297:52">==</operator> <literal type="number" pos:start="297:54" pos:end="297:54">0</literal></expr>)</condition> <block pos:start="297:57" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:42">

            <expr_stmt pos:start="299:13" pos:end="301:42"><expr pos:start="299:13" pos:end="301:41"><call pos:start="299:13" pos:end="301:41"><name pos:start="299:13" pos:end="299:27">isa_ne2000_init</name><argument_list pos:start="299:28" pos:end="301:41">(<argument pos:start="299:29" pos:end="299:35"><expr pos:start="299:29" pos:end="299:35"><name pos:start="299:29" pos:end="299:35">isa_bus</name></expr></argument>, <argument pos:start="299:38" pos:end="299:49"><expr pos:start="299:38" pos:end="299:49"><name pos:start="299:38" pos:end="299:49"><name pos:start="299:38" pos:end="299:46">ne2000_io</name><index pos:start="299:47" pos:end="299:49">[<expr pos:start="299:48" pos:end="299:48"><name pos:start="299:48" pos:end="299:48">i</name></expr>]</index></name></expr></argument>, <argument pos:start="299:52" pos:end="299:64"><expr pos:start="299:52" pos:end="299:64"><name pos:start="299:52" pos:end="299:64"><name pos:start="299:52" pos:end="299:61">ne2000_irq</name><index pos:start="299:62" pos:end="299:64">[<expr pos:start="299:63" pos:end="299:63"><name pos:start="299:63" pos:end="299:63">i</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="301:29" pos:end="301:40"><expr pos:start="301:29" pos:end="301:40"><operator pos:start="301:29" pos:end="301:29">&amp;</operator><name pos:start="301:30" pos:end="301:40"><name pos:start="301:30" pos:end="301:37">nd_table</name><index pos:start="301:38" pos:end="301:40">[<expr pos:start="301:39" pos:end="301:39"><name pos:start="301:39" pos:end="301:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="303:11" pos:end="307:9">else <block pos:start="303:16" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:73">

            <expr_stmt pos:start="305:13" pos:end="305:73"><expr pos:start="305:13" pos:end="305:72"><call pos:start="305:13" pos:end="305:72"><name pos:start="305:13" pos:end="305:31">pci_nic_init_nofail</name><argument_list pos:start="305:32" pos:end="305:72">(<argument pos:start="305:33" pos:end="305:44"><expr pos:start="305:33" pos:end="305:44"><operator pos:start="305:33" pos:end="305:33">&amp;</operator><name pos:start="305:34" pos:end="305:44"><name pos:start="305:34" pos:end="305:41">nd_table</name><index pos:start="305:42" pos:end="305:44">[<expr pos:start="305:43" pos:end="305:43"><name pos:start="305:43" pos:end="305:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="305:47" pos:end="305:53"><expr pos:start="305:47" pos:end="305:53"><name pos:start="305:47" pos:end="305:53">pci_bus</name></expr></argument>, <argument pos:start="305:56" pos:end="305:65"><expr pos:start="305:56" pos:end="305:65"><literal type="string" pos:start="305:56" pos:end="305:65">"ne2k_pci"</literal></expr></argument>, <argument pos:start="305:68" pos:end="305:71"><expr pos:start="305:68" pos:end="305:71"><name pos:start="305:68" pos:end="305:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="313:5" pos:end="313:38"><expr pos:start="313:5" pos:end="313:37"><call pos:start="313:5" pos:end="313:37"><name pos:start="313:5" pos:end="313:17">ide_drive_get</name><argument_list pos:start="313:18" pos:end="313:37">(<argument pos:start="313:19" pos:end="313:20"><expr pos:start="313:19" pos:end="313:20"><name pos:start="313:19" pos:end="313:20">hd</name></expr></argument>, <argument pos:start="313:23" pos:end="313:36"><expr pos:start="313:23" pos:end="313:36"><call pos:start="313:23" pos:end="313:36"><name pos:start="313:23" pos:end="313:32">ARRAY_SIZE</name><argument_list pos:start="313:33" pos:end="313:36">(<argument pos:start="313:34" pos:end="313:35"><expr pos:start="313:34" pos:end="313:35"><name pos:start="313:34" pos:end="313:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="315:5" pos:end="323:5">for<control pos:start="315:8" pos:end="315:36">(<init pos:start="315:9" pos:end="315:14"><expr pos:start="315:9" pos:end="315:13"><name pos:start="315:9" pos:end="315:9">i</name> <operator pos:start="315:11" pos:end="315:11">=</operator> <literal type="number" pos:start="315:13" pos:end="315:13">0</literal></expr>;</init> <condition pos:start="315:16" pos:end="315:31"><expr pos:start="315:16" pos:end="315:30"><name pos:start="315:16" pos:end="315:16">i</name> <operator pos:start="315:18" pos:end="315:18">&lt;</operator> <name pos:start="315:20" pos:end="315:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="315:33" pos:end="315:35"><expr pos:start="315:33" pos:end="315:35"><name pos:start="315:33" pos:end="315:33">i</name><operator pos:start="315:34" pos:end="315:35">++</operator></expr></incr>)</control> <block pos:start="315:38" pos:end="323:5">{<block_content pos:start="317:9" pos:end="321:36">

        <expr_stmt pos:start="317:9" pos:end="321:36"><expr pos:start="317:9" pos:end="321:35"><call pos:start="317:9" pos:end="321:35"><name pos:start="317:9" pos:end="317:20">isa_ide_init</name><argument_list pos:start="317:21" pos:end="321:35">(<argument pos:start="317:22" pos:end="317:28"><expr pos:start="317:22" pos:end="317:28"><name pos:start="317:22" pos:end="317:28">isa_bus</name></expr></argument>, <argument pos:start="317:31" pos:end="317:43"><expr pos:start="317:31" pos:end="317:43"><name pos:start="317:31" pos:end="317:43"><name pos:start="317:31" pos:end="317:40">ide_iobase</name><index pos:start="317:41" pos:end="317:43">[<expr pos:start="317:42" pos:end="317:42"><name pos:start="317:42" pos:end="317:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="317:46" pos:end="317:59"><expr pos:start="317:46" pos:end="317:59"><name pos:start="317:46" pos:end="317:59"><name pos:start="317:46" pos:end="317:56">ide_iobase2</name><index pos:start="317:57" pos:end="317:59">[<expr pos:start="317:58" pos:end="317:58"><name pos:start="317:58" pos:end="317:58">i</name></expr>]</index></name></expr></argument>, <argument pos:start="317:62" pos:end="317:71"><expr pos:start="317:62" pos:end="317:71"><name pos:start="317:62" pos:end="317:71"><name pos:start="317:62" pos:end="317:68">ide_irq</name><index pos:start="317:69" pos:end="317:71">[<expr pos:start="317:70" pos:end="317:70"><name pos:start="317:70" pos:end="317:70">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="319:22" pos:end="319:30"><expr pos:start="319:22" pos:end="319:30"><name pos:start="319:22" pos:end="319:30"><name pos:start="319:22" pos:end="319:23">hd</name><index pos:start="319:24" pos:end="319:30">[<expr pos:start="319:25" pos:end="319:29"><literal type="number" pos:start="319:25" pos:end="319:25">2</literal> <operator pos:start="319:27" pos:end="319:27">*</operator> <name pos:start="319:29" pos:end="319:29">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="321:22" pos:end="321:34"><expr pos:start="321:22" pos:end="321:34"><name pos:start="321:22" pos:end="321:34"><name pos:start="321:22" pos:end="321:23">hd</name><index pos:start="321:24" pos:end="321:34">[<expr pos:start="321:25" pos:end="321:33"><literal type="number" pos:start="321:25" pos:end="321:25">2</literal> <operator pos:start="321:27" pos:end="321:27">*</operator> <name pos:start="321:29" pos:end="321:29">i</name> <operator pos:start="321:31" pos:end="321:31">+</operator> <literal type="number" pos:start="321:33" pos:end="321:33">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="325:5" pos:end="325:40"><expr pos:start="325:5" pos:end="325:39"><call pos:start="325:5" pos:end="325:39"><name pos:start="325:5" pos:end="325:21">isa_create_simple</name><argument_list pos:start="325:22" pos:end="325:39">(<argument pos:start="325:23" pos:end="325:29"><expr pos:start="325:23" pos:end="325:29"><name pos:start="325:23" pos:end="325:29">isa_bus</name></expr></argument>, <argument pos:start="325:32" pos:end="325:38"><expr pos:start="325:32" pos:end="325:38"><literal type="string" pos:start="325:32" pos:end="325:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:33"><expr pos:start="329:5" pos:end="329:32"><name pos:start="329:5" pos:end="329:7">cpu</name> <operator pos:start="329:9" pos:end="329:9">=</operator> <call pos:start="329:11" pos:end="329:32"><name pos:start="329:11" pos:end="329:21">POWERPC_CPU</name><argument_list pos:start="329:22" pos:end="329:32">(<argument pos:start="329:23" pos:end="329:31"><expr pos:start="329:23" pos:end="329:31"><name pos:start="329:23" pos:end="329:31">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:66"><expr pos:start="331:5" pos:end="331:65"><name pos:start="331:5" pos:end="331:22"><name pos:start="331:5" pos:end="331:11">sysctrl</name><operator pos:start="331:12" pos:end="331:13">-&gt;</operator><name pos:start="331:14" pos:end="331:22">reset_irq</name></name> <operator pos:start="331:24" pos:end="331:24">=</operator> <name pos:start="331:26" pos:end="331:65"><name pos:start="331:26" pos:end="331:28">cpu</name><operator pos:start="331:29" pos:end="331:30">-&gt;</operator><name pos:start="331:31" pos:end="331:33">env</name><operator pos:start="331:34" pos:end="331:34">.</operator><name pos:start="331:35" pos:end="331:44">irq_inputs</name><index pos:start="331:45" pos:end="331:65">[<expr pos:start="331:46" pos:end="331:64"><name pos:start="331:46" pos:end="331:64">PPC6xx_INPUT_HRESET</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:79"><expr pos:start="335:5" pos:end="335:78"><call pos:start="335:5" pos:end="335:78"><name pos:start="335:5" pos:end="335:20">portio_list_init</name><argument_list pos:start="335:21" pos:end="335:78">(<argument pos:start="335:22" pos:end="335:36"><expr pos:start="335:22" pos:end="335:36"><operator pos:start="335:22" pos:end="335:22">&amp;</operator><name pos:start="335:23" pos:end="335:36">prep_port_list</name></expr></argument>, <argument pos:start="335:39" pos:end="335:42"><expr pos:start="335:39" pos:end="335:42"><name pos:start="335:39" pos:end="335:42">NULL</name></expr></argument>, <argument pos:start="335:45" pos:end="335:60"><expr pos:start="335:45" pos:end="335:60"><name pos:start="335:45" pos:end="335:60">prep_portio_list</name></expr></argument>, <argument pos:start="335:63" pos:end="335:69"><expr pos:start="335:63" pos:end="335:69"><name pos:start="335:63" pos:end="335:69">sysctrl</name></expr></argument>, <argument pos:start="335:72" pos:end="335:77"><expr pos:start="335:72" pos:end="335:77"><literal type="string" pos:start="335:72" pos:end="335:77">"prep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="350:0"><expr pos:start="337:5" pos:end="337:68"><call pos:start="337:5" pos:end="337:68"><name pos:start="337:5" pos:end="337:19">portio_list_add</name><argument_list pos:start="337:20" pos:end="337:68">(<argument pos:start="337:21" pos:end="337:35"><expr pos:start="337:21" pos:end="337:35"><operator pos:start="337:21" pos:end="337:21">&amp;</operator><name pos:start="337:22" pos:end="337:35">prep_port_list</name></expr></argument>, <argument pos:start="337:38" pos:end="337:62"><expr pos:start="337:38" pos:end="337:62"><call pos:start="337:38" pos:end="337:62"><name pos:start="337:38" pos:end="337:57">isa_address_space_io</name><argument_list pos:start="337:58" pos:end="337:62">(<argument pos:start="337:59" pos:end="337:61"><expr pos:start="337:59" pos:end="337:61"><name pos:start="337:59" pos:end="337:61">isa</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="337:65" pos:end="337:67"><expr pos:start="337:65" pos:end="337:67"><literal type="number" pos:start="337:65" pos:end="337:67">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="341:5" pos:end="341:51">/* PowerPC control and status register group */</comment>

<cpp:if pos:start="343:1" pos:end="343:5">#<cpp:directive pos:start="343:2" pos:end="343:3">if</cpp:directive> <expr pos:start="343:5" pos:end="343:5"><literal type="number" pos:start="343:5" pos:end="343:5">0</literal></expr></cpp:if>

    memory_region_init_io(xcsr, NULL, &amp;PPC_XCSR_ops, NULL, "ppc-xcsr", 0x1000);

    memory_region_add_subregion(sysmem, 0xFEFF0000, xcsr);

<cpp:endif pos:start="349:1" pos:end="349:6">#<cpp:directive pos:start="349:2" pos:end="349:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="353:5" pos:end="357:5"><if pos:start="353:5" pos:end="357:5">if <condition pos:start="353:8" pos:end="353:29">(<expr pos:start="353:9" pos:end="353:28"><call pos:start="353:9" pos:end="353:28"><name pos:start="353:9" pos:end="353:19">machine_usb</name><argument_list pos:start="353:20" pos:end="353:28">(<argument pos:start="353:21" pos:end="353:27"><expr pos:start="353:21" pos:end="353:27"><name pos:start="353:21" pos:end="353:27">machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="353:31" pos:end="357:5">{<block_content pos:start="355:9" pos:end="355:51">

        <expr_stmt pos:start="355:9" pos:end="355:51"><expr pos:start="355:9" pos:end="355:50"><call pos:start="355:9" pos:end="355:50"><name pos:start="355:9" pos:end="355:25">pci_create_simple</name><argument_list pos:start="355:26" pos:end="355:50">(<argument pos:start="355:27" pos:end="355:33"><expr pos:start="355:27" pos:end="355:33"><name pos:start="355:27" pos:end="355:33">pci_bus</name></expr></argument>, <argument pos:start="355:36" pos:end="355:37"><expr pos:start="355:36" pos:end="355:37"><operator pos:start="355:36" pos:end="355:36">-</operator><literal type="number" pos:start="355:37" pos:end="355:37">1</literal></expr></argument>, <argument pos:start="355:40" pos:end="355:49"><expr pos:start="355:40" pos:end="355:49"><literal type="string" pos:start="355:40" pos:end="355:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:68"><expr pos:start="361:5" pos:end="361:67"><name pos:start="361:5" pos:end="361:10">m48t59</name> <operator pos:start="361:12" pos:end="361:12">=</operator> <call pos:start="361:14" pos:end="361:67"><name pos:start="361:14" pos:end="361:28">m48t59_init_isa</name><argument_list pos:start="361:29" pos:end="361:67">(<argument pos:start="361:30" pos:end="361:36"><expr pos:start="361:30" pos:end="361:36"><name pos:start="361:30" pos:end="361:36">isa_bus</name></expr></argument>, <argument pos:start="361:39" pos:end="361:44"><expr pos:start="361:39" pos:end="361:44"><literal type="number" pos:start="361:39" pos:end="361:44">0x0074</literal></expr></argument>, <argument pos:start="361:47" pos:end="361:56"><expr pos:start="361:47" pos:end="361:56"><name pos:start="361:47" pos:end="361:56">NVRAM_SIZE</name></expr></argument>, <argument pos:start="361:59" pos:end="361:62"><expr pos:start="361:59" pos:end="361:62"><literal type="number" pos:start="361:59" pos:end="361:62">2000</literal></expr></argument>, <argument pos:start="361:65" pos:end="361:66"><expr pos:start="361:65" pos:end="361:66"><literal type="number" pos:start="361:65" pos:end="361:66">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="363:5" pos:end="365:15"><if pos:start="363:5" pos:end="365:15">if <condition pos:start="363:8" pos:end="363:23">(<expr pos:start="363:9" pos:end="363:22"><name pos:start="363:9" pos:end="363:14">m48t59</name> <operator pos:start="363:16" pos:end="363:17">==</operator> <name pos:start="363:19" pos:end="363:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="365:9" pos:end="365:15"><block_content pos:start="365:9" pos:end="365:15">

        <return pos:start="365:9" pos:end="365:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:28"><expr pos:start="367:5" pos:end="367:27"><name pos:start="367:5" pos:end="367:18"><name pos:start="367:5" pos:end="367:11">sysctrl</name><operator pos:start="367:12" pos:end="367:13">-&gt;</operator><name pos:start="367:14" pos:end="367:18">nvram</name></name> <operator pos:start="367:20" pos:end="367:20">=</operator> <name pos:start="367:22" pos:end="367:27">m48t59</name></expr>;</expr_stmt>



    <comment type="block" pos:start="371:5" pos:end="371:26">/* Initialise NVRAM */</comment>

    <expr_stmt pos:start="373:5" pos:end="387:71"><expr pos:start="373:5" pos:end="387:70"><call pos:start="373:5" pos:end="387:70"><name pos:start="373:5" pos:end="373:24">PPC_NVRAM_set_params</name><argument_list pos:start="373:25" pos:end="387:70">(<argument pos:start="373:26" pos:end="373:31"><expr pos:start="373:26" pos:end="373:31"><name pos:start="373:26" pos:end="373:31">m48t59</name></expr></argument>, <argument pos:start="373:34" pos:end="373:43"><expr pos:start="373:34" pos:end="373:43"><name pos:start="373:34" pos:end="373:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="373:46" pos:end="373:51"><expr pos:start="373:46" pos:end="373:51"><literal type="string" pos:start="373:46" pos:end="373:51">"PREP"</literal></expr></argument>, <argument pos:start="373:54" pos:end="373:61"><expr pos:start="373:54" pos:end="373:61"><name pos:start="373:54" pos:end="373:61">ram_size</name></expr></argument>,

                         <argument pos:start="375:26" pos:end="375:40"><expr pos:start="375:26" pos:end="375:40"><name pos:start="375:26" pos:end="375:40">ppc_boot_device</name></expr></argument>,

                         <argument pos:start="377:26" pos:end="377:36"><expr pos:start="377:26" pos:end="377:36"><name pos:start="377:26" pos:end="377:36">kernel_base</name></expr></argument>, <argument pos:start="377:39" pos:end="377:49"><expr pos:start="377:39" pos:end="377:49"><name pos:start="377:39" pos:end="377:49">kernel_size</name></expr></argument>,

                         <argument pos:start="379:26" pos:end="379:39"><expr pos:start="379:26" pos:end="379:39"><name pos:start="379:26" pos:end="379:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="381:26" pos:end="381:36"><expr pos:start="381:26" pos:end="381:36"><name pos:start="381:26" pos:end="381:36">initrd_base</name></expr></argument>, <argument pos:start="381:39" pos:end="381:49"><expr pos:start="381:39" pos:end="381:49"><name pos:start="381:39" pos:end="381:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="383:26" pos:end="383:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="385:26" pos:end="385:26"><expr pos:start="385:26" pos:end="385:26"><literal type="number" pos:start="385:26" pos:end="385:26">0</literal></expr></argument>,

                         <argument pos:start="387:26" pos:end="387:38"><expr pos:start="387:26" pos:end="387:38"><name pos:start="387:26" pos:end="387:38">graphic_width</name></expr></argument>, <argument pos:start="387:41" pos:end="387:54"><expr pos:start="387:41" pos:end="387:54"><name pos:start="387:41" pos:end="387:54">graphic_height</name></expr></argument>, <argument pos:start="387:57" pos:end="387:69"><expr pos:start="387:57" pos:end="387:69"><name pos:start="387:57" pos:end="387:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
