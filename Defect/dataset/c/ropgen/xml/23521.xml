<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23521.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">arm_cpu_do_interrupt_aarch32</name><parameter_list pos:start="1:41" pos:end="1:54">(<parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:51"><name pos:start="1:42" pos:end="1:49">CPUState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="305:1">{<block_content pos:start="5:5" pos:end="303:25">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:29">= <expr pos:start="5:19" pos:end="5:29"><call pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:25">ARM_CPU</name><argument_list pos:start="5:26" pos:end="5:29">(<argument pos:start="5:27" pos:end="5:28"><expr pos:start="5:27" pos:end="5:28"><name pos:start="5:27" pos:end="5:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUARMState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">new_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:16">moe</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:74">/* If this is a debug exception we must update the DBGDSCR.MOE bits */</comment>

    <switch pos:start="23:5" pos:end="59:5">switch <condition pos:start="23:12" pos:end="23:55">(<expr pos:start="23:13" pos:end="23:54"><name pos:start="23:13" pos:end="23:35"><name pos:start="23:13" pos:end="23:15">env</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:26">exception</name><operator pos:start="23:27" pos:end="23:27">.</operator><name pos:start="23:28" pos:end="23:35">syndrome</name></name> <operator pos:start="23:37" pos:end="23:38">&gt;&gt;</operator> <name pos:start="23:40" pos:end="23:54">ARM_EL_EC_SHIFT</name></expr>)</condition> <block pos:start="23:57" pos:end="59:5">{<block_content pos:start="25:5" pos:end="57:14">

    <case pos:start="25:5" pos:end="25:23">case <expr pos:start="25:10" pos:end="25:22"><name pos:start="25:10" pos:end="25:22">EC_BREAKPOINT</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:31">case <expr pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:30">EC_BREAKPOINT_SAME_EL</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:16"><expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">moe</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">1</literal></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:23">case <expr pos:start="33:10" pos:end="33:22"><name pos:start="33:10" pos:end="33:22">EC_WATCHPOINT</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:31">case <expr pos:start="35:10" pos:end="35:30"><name pos:start="35:10" pos:end="35:30">EC_WATCHPOINT_SAME_EL</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:17"><expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">moe</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <literal type="number" pos:start="37:15" pos:end="37:16">10</literal></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:22">case <expr pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:21">EC_AA32_BKPT</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">moe</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <literal type="number" pos:start="43:15" pos:end="43:15">3</literal></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:24">case <expr pos:start="47:10" pos:end="47:23"><name pos:start="47:10" pos:end="47:23">EC_VECTORCATCH</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">moe</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <literal type="number" pos:start="49:15" pos:end="49:15">5</literal></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <default pos:start="53:5" pos:end="53:12">default:</default>

        <expr_stmt pos:start="55:9" pos:end="55:16"><expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">moe</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">moe</name></expr>)</condition> <block pos:start="63:14" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:72">

        <expr_stmt pos:start="65:9" pos:end="65:72"><expr pos:start="65:9" pos:end="65:71"><name pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:11">env</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:17">cp15</name><operator pos:start="65:18" pos:end="65:18">.</operator><name pos:start="65:19" pos:end="65:27">mdscr_el1</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <call pos:start="65:31" pos:end="65:71"><name pos:start="65:31" pos:end="65:39">deposit64</name><argument_list pos:start="65:40" pos:end="65:71">(<argument pos:start="65:41" pos:end="65:59"><expr pos:start="65:41" pos:end="65:59"><name pos:start="65:41" pos:end="65:59"><name pos:start="65:41" pos:end="65:43">env</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:49">cp15</name><operator pos:start="65:50" pos:end="65:50">.</operator><name pos:start="65:51" pos:end="65:59">mdscr_el1</name></name></expr></argument>, <argument pos:start="65:62" pos:end="65:62"><expr pos:start="65:62" pos:end="65:62"><literal type="number" pos:start="65:62" pos:end="65:62">2</literal></expr></argument>, <argument pos:start="65:65" pos:end="65:65"><expr pos:start="65:65" pos:end="65:65"><literal type="number" pos:start="65:65" pos:end="65:65">4</literal></expr></argument>, <argument pos:start="65:68" pos:end="65:70"><expr pos:start="65:68" pos:end="65:70"><name pos:start="65:68" pos:end="65:70">moe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:47">/* TODO: Vectored interrupt controller.  */</comment>

    <switch pos:start="73:5" pos:end="219:5">switch <condition pos:start="73:12" pos:end="73:32">(<expr pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:14">cs</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:31">exception_index</name></name></expr>)</condition> <block pos:start="73:34" pos:end="219:5">{<block_content pos:start="75:5" pos:end="217:15">

    <case pos:start="75:5" pos:end="75:19">case <expr pos:start="75:10" pos:end="75:18"><name pos:start="75:10" pos:end="75:18">EXCP_UDEF</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:36"><expr pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:16">new_mode</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:35">ARM_CPU_MODE_UND</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:20"><expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:12">addr</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <literal type="number" pos:start="79:16" pos:end="79:19">0x04</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:12">mask</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <name pos:start="81:16" pos:end="81:21">CPSR_I</name></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:23"><if pos:start="83:9" pos:end="85:23">if <condition pos:start="83:12" pos:end="83:23">(<expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:15">env</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:22">thumb</name></name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:23"><block_content pos:start="85:13" pos:end="85:23">

            <expr_stmt pos:start="85:13" pos:end="85:23"><expr pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:18">offset</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="87:9" pos:end="89:23">else<block type="pseudo" pos:start="89:13" pos:end="89:23"><block_content pos:start="89:13" pos:end="89:23">

            <expr_stmt pos:start="89:13" pos:end="89:23"><expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:18">offset</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:22">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:18">case <expr pos:start="93:10" pos:end="93:17"><name pos:start="93:10" pos:end="93:17">EXCP_SWI</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:36"><expr pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:16">new_mode</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:35">ARM_CPU_MODE_SVC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:20"><expr pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:12">addr</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <literal type="number" pos:start="97:16" pos:end="97:19">0x08</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:22"><expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:12">mask</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <name pos:start="99:16" pos:end="99:21">CPSR_I</name></expr>;</expr_stmt>

        <comment type="block" pos:start="101:9" pos:end="101:61">/* The PC already points to the next instruction.  */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:19"><expr pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:14">offset</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <literal type="number" pos:start="103:18" pos:end="103:18">0</literal></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:19">case <expr pos:start="107:10" pos:end="107:18"><name pos:start="107:10" pos:end="107:18">EXCP_BKPT</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:31"><expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:11">env</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:22">exception</name><operator pos:start="109:23" pos:end="109:23">.</operator><name pos:start="109:24" pos:end="109:26">fsr</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <literal type="number" pos:start="109:30" pos:end="109:30">2</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="111:9" pos:end="111:46">/* Fall through to prefetch abort.  */</comment>

    <case pos:start="113:5" pos:end="113:29">case <expr pos:start="113:10" pos:end="113:28"><name pos:start="113:10" pos:end="113:28">EXCP_PREFETCH_ABORT</name></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:66"><expr pos:start="115:9" pos:end="115:65"><call pos:start="115:9" pos:end="115:65"><name pos:start="115:9" pos:end="115:34">A32_BANKED_CURRENT_REG_SET</name><argument_list pos:start="115:35" pos:end="115:65">(<argument pos:start="115:36" pos:end="115:38"><expr pos:start="115:36" pos:end="115:38"><name pos:start="115:36" pos:end="115:38">env</name></expr></argument>, <argument pos:start="115:41" pos:end="115:44"><expr pos:start="115:41" pos:end="115:44"><name pos:start="115:41" pos:end="115:44">ifsr</name></expr></argument>, <argument pos:start="115:47" pos:end="115:64"><expr pos:start="115:47" pos:end="115:64"><name pos:start="115:47" pos:end="115:64"><name pos:start="115:47" pos:end="115:49">env</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:60">exception</name><operator pos:start="115:61" pos:end="115:61">.</operator><name pos:start="115:62" pos:end="115:64">fsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:71"><expr pos:start="117:9" pos:end="117:70"><call pos:start="117:9" pos:end="117:70"><name pos:start="117:9" pos:end="117:34">A32_BANKED_CURRENT_REG_SET</name><argument_list pos:start="117:35" pos:end="117:70">(<argument pos:start="117:36" pos:end="117:38"><expr pos:start="117:36" pos:end="117:38"><name pos:start="117:36" pos:end="117:38">env</name></expr></argument>, <argument pos:start="117:41" pos:end="117:44"><expr pos:start="117:41" pos:end="117:44"><name pos:start="117:41" pos:end="117:44">ifar</name></expr></argument>, <argument pos:start="117:47" pos:end="117:69"><expr pos:start="117:47" pos:end="117:69"><name pos:start="117:47" pos:end="117:69"><name pos:start="117:47" pos:end="117:49">env</name><operator pos:start="117:50" pos:end="117:51">-&gt;</operator><name pos:start="117:52" pos:end="117:60">exception</name><operator pos:start="117:61" pos:end="117:61">.</operator><name pos:start="117:62" pos:end="117:69">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="121:77"><expr pos:start="119:9" pos:end="121:76"><call pos:start="119:9" pos:end="121:76"><name pos:start="119:9" pos:end="119:21">qemu_log_mask</name><argument_list pos:start="119:22" pos:end="121:76">(<argument pos:start="119:23" pos:end="119:33"><expr pos:start="119:23" pos:end="119:33"><name pos:start="119:23" pos:end="119:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="119:36" pos:end="119:66"><expr pos:start="119:36" pos:end="119:66"><literal type="string" pos:start="119:36" pos:end="119:66">"...with IFSR 0x%x IFAR 0x%x\n"</literal></expr></argument>,

                      <argument pos:start="121:23" pos:end="121:40"><expr pos:start="121:23" pos:end="121:40"><name pos:start="121:23" pos:end="121:40"><name pos:start="121:23" pos:end="121:25">env</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:36">exception</name><operator pos:start="121:37" pos:end="121:37">.</operator><name pos:start="121:38" pos:end="121:40">fsr</name></name></expr></argument>, <argument pos:start="121:43" pos:end="121:75"><expr pos:start="121:43" pos:end="121:75"><operator pos:start="121:43" pos:end="121:43">(</operator><name pos:start="121:44" pos:end="121:51">uint32_t</name><operator pos:start="121:52" pos:end="121:52">)</operator><name pos:start="121:53" pos:end="121:75"><name pos:start="121:53" pos:end="121:55">env</name><operator pos:start="121:56" pos:end="121:57">-&gt;</operator><name pos:start="121:58" pos:end="121:66">exception</name><operator pos:start="121:67" pos:end="121:67">.</operator><name pos:start="121:68" pos:end="121:75">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:36"><expr pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:16">new_mode</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:35">ARM_CPU_MODE_ABT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:20"><expr pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:12">addr</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <literal type="number" pos:start="125:16" pos:end="125:19">0x0c</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:31"><expr pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:12">mask</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <name pos:start="127:16" pos:end="127:21">CPSR_A</name> <operator pos:start="127:23" pos:end="127:23">|</operator> <name pos:start="127:25" pos:end="127:30">CPSR_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:19"><expr pos:start="129:9" pos:end="129:18"><name pos:start="129:9" pos:end="129:14">offset</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">4</literal></expr>;</expr_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <case pos:start="133:5" pos:end="133:25">case <expr pos:start="133:10" pos:end="133:24"><name pos:start="133:10" pos:end="133:24">EXCP_DATA_ABORT</name></expr>:</case>

        <expr_stmt pos:start="135:9" pos:end="135:66"><expr pos:start="135:9" pos:end="135:65"><call pos:start="135:9" pos:end="135:65"><name pos:start="135:9" pos:end="135:34">A32_BANKED_CURRENT_REG_SET</name><argument_list pos:start="135:35" pos:end="135:65">(<argument pos:start="135:36" pos:end="135:38"><expr pos:start="135:36" pos:end="135:38"><name pos:start="135:36" pos:end="135:38">env</name></expr></argument>, <argument pos:start="135:41" pos:end="135:44"><expr pos:start="135:41" pos:end="135:44"><name pos:start="135:41" pos:end="135:44">dfsr</name></expr></argument>, <argument pos:start="135:47" pos:end="135:64"><expr pos:start="135:47" pos:end="135:64"><name pos:start="135:47" pos:end="135:64"><name pos:start="135:47" pos:end="135:49">env</name><operator pos:start="135:50" pos:end="135:51">-&gt;</operator><name pos:start="135:52" pos:end="135:60">exception</name><operator pos:start="135:61" pos:end="135:61">.</operator><name pos:start="135:62" pos:end="135:64">fsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:71"><expr pos:start="137:9" pos:end="137:70"><call pos:start="137:9" pos:end="137:70"><name pos:start="137:9" pos:end="137:34">A32_BANKED_CURRENT_REG_SET</name><argument_list pos:start="137:35" pos:end="137:70">(<argument pos:start="137:36" pos:end="137:38"><expr pos:start="137:36" pos:end="137:38"><name pos:start="137:36" pos:end="137:38">env</name></expr></argument>, <argument pos:start="137:41" pos:end="137:44"><expr pos:start="137:41" pos:end="137:44"><name pos:start="137:41" pos:end="137:44">dfar</name></expr></argument>, <argument pos:start="137:47" pos:end="137:69"><expr pos:start="137:47" pos:end="137:69"><name pos:start="137:47" pos:end="137:69"><name pos:start="137:47" pos:end="137:49">env</name><operator pos:start="137:50" pos:end="137:51">-&gt;</operator><name pos:start="137:52" pos:end="137:60">exception</name><operator pos:start="137:61" pos:end="137:61">.</operator><name pos:start="137:62" pos:end="137:69">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="143:57"><expr pos:start="139:9" pos:end="143:56"><call pos:start="139:9" pos:end="143:56"><name pos:start="139:9" pos:end="139:21">qemu_log_mask</name><argument_list pos:start="139:22" pos:end="143:56">(<argument pos:start="139:23" pos:end="139:33"><expr pos:start="139:23" pos:end="139:33"><name pos:start="139:23" pos:end="139:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="139:36" pos:end="139:66"><expr pos:start="139:36" pos:end="139:66"><literal type="string" pos:start="139:36" pos:end="139:66">"...with DFSR 0x%x DFAR 0x%x\n"</literal></expr></argument>,

                      <argument pos:start="141:23" pos:end="141:40"><expr pos:start="141:23" pos:end="141:40"><name pos:start="141:23" pos:end="141:40"><name pos:start="141:23" pos:end="141:25">env</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:36">exception</name><operator pos:start="141:37" pos:end="141:37">.</operator><name pos:start="141:38" pos:end="141:40">fsr</name></name></expr></argument>,

                      <argument pos:start="143:23" pos:end="143:55"><expr pos:start="143:23" pos:end="143:55"><operator pos:start="143:23" pos:end="143:23">(</operator><name pos:start="143:24" pos:end="143:31">uint32_t</name><operator pos:start="143:32" pos:end="143:32">)</operator><name pos:start="143:33" pos:end="143:55"><name pos:start="143:33" pos:end="143:35">env</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:46">exception</name><operator pos:start="143:47" pos:end="143:47">.</operator><name pos:start="143:48" pos:end="143:55">vaddress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:36"><expr pos:start="145:9" pos:end="145:35"><name pos:start="145:9" pos:end="145:16">new_mode</name> <operator pos:start="145:18" pos:end="145:18">=</operator> <name pos:start="145:20" pos:end="145:35">ARM_CPU_MODE_ABT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:20"><expr pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:12">addr</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <literal type="number" pos:start="147:16" pos:end="147:19">0x10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:12">mask</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <name pos:start="149:16" pos:end="149:21">CPSR_A</name> <operator pos:start="149:23" pos:end="149:23">|</operator> <name pos:start="149:25" pos:end="149:30">CPSR_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:19"><expr pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:14">offset</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <literal type="number" pos:start="151:18" pos:end="151:18">8</literal></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:18">case <expr pos:start="155:10" pos:end="155:17"><name pos:start="155:10" pos:end="155:17">EXCP_IRQ</name></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:36"><expr pos:start="157:9" pos:end="157:35"><name pos:start="157:9" pos:end="157:16">new_mode</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <name pos:start="157:20" pos:end="157:35">ARM_CPU_MODE_IRQ</name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:20"><expr pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:12">addr</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <literal type="number" pos:start="159:16" pos:end="159:19">0x18</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="161:9" pos:end="161:53">/* Disable IRQ and imprecise data aborts.  */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:31"><expr pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:12">mask</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <name pos:start="163:16" pos:end="163:21">CPSR_A</name> <operator pos:start="163:23" pos:end="163:23">|</operator> <name pos:start="163:25" pos:end="163:30">CPSR_I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:19"><expr pos:start="165:9" pos:end="165:18"><name pos:start="165:9" pos:end="165:14">offset</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <literal type="number" pos:start="165:18" pos:end="165:18">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="175:9"><if pos:start="167:9" pos:end="175:9">if <condition pos:start="167:12" pos:end="167:40">(<expr pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:29"><name pos:start="167:13" pos:end="167:15">env</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:21">cp15</name><operator pos:start="167:22" pos:end="167:22">.</operator><name pos:start="167:23" pos:end="167:29">scr_el3</name></name> <operator pos:start="167:31" pos:end="167:31">&amp;</operator> <name pos:start="167:33" pos:end="167:39">SCR_IRQ</name></expr>)</condition> <block pos:start="167:42" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:27">

            <comment type="block" pos:start="169:13" pos:end="169:44">/* IRQ routed to monitor mode */</comment>

            <expr_stmt pos:start="171:13" pos:end="171:40"><expr pos:start="171:13" pos:end="171:39"><name pos:start="171:13" pos:end="171:20">new_mode</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <name pos:start="171:24" pos:end="171:39">ARM_CPU_MODE_MON</name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:27"><expr pos:start="173:13" pos:end="173:26"><name pos:start="173:13" pos:end="173:16">mask</name> <operator pos:start="173:18" pos:end="173:19">|=</operator> <name pos:start="173:21" pos:end="173:26">CPSR_F</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="177:9" pos:end="177:14">break;</break>

    <case pos:start="179:5" pos:end="179:18">case <expr pos:start="179:10" pos:end="179:17"><name pos:start="179:10" pos:end="179:17">EXCP_FIQ</name></expr>:</case>

        <expr_stmt pos:start="181:9" pos:end="181:36"><expr pos:start="181:9" pos:end="181:35"><name pos:start="181:9" pos:end="181:16">new_mode</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <name pos:start="181:20" pos:end="181:35">ARM_CPU_MODE_FIQ</name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:20"><expr pos:start="183:9" pos:end="183:19"><name pos:start="183:9" pos:end="183:12">addr</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <literal type="number" pos:start="183:16" pos:end="183:19">0x1c</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="185:9" pos:end="185:58">/* Disable FIQ, IRQ and imprecise data aborts.  */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:40"><expr pos:start="187:9" pos:end="187:39"><name pos:start="187:9" pos:end="187:12">mask</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <name pos:start="187:16" pos:end="187:21">CPSR_A</name> <operator pos:start="187:23" pos:end="187:23">|</operator> <name pos:start="187:25" pos:end="187:30">CPSR_I</name> <operator pos:start="187:32" pos:end="187:32">|</operator> <name pos:start="187:34" pos:end="187:39">CPSR_F</name></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="195:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:40">(<expr pos:start="189:13" pos:end="189:39"><name pos:start="189:13" pos:end="189:29"><name pos:start="189:13" pos:end="189:15">env</name><operator pos:start="189:16" pos:end="189:17">-&gt;</operator><name pos:start="189:18" pos:end="189:21">cp15</name><operator pos:start="189:22" pos:end="189:22">.</operator><name pos:start="189:23" pos:end="189:29">scr_el3</name></name> <operator pos:start="189:31" pos:end="189:31">&amp;</operator> <name pos:start="189:33" pos:end="189:39">SCR_FIQ</name></expr>)</condition> <block pos:start="189:42" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:40">

            <comment type="block" pos:start="191:13" pos:end="191:44">/* FIQ routed to monitor mode */</comment>

            <expr_stmt pos:start="193:13" pos:end="193:40"><expr pos:start="193:13" pos:end="193:39"><name pos:start="193:13" pos:end="193:20">new_mode</name> <operator pos:start="193:22" pos:end="193:22">=</operator> <name pos:start="193:24" pos:end="193:39">ARM_CPU_MODE_MON</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:19"><expr pos:start="197:9" pos:end="197:18"><name pos:start="197:9" pos:end="197:14">offset</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <literal type="number" pos:start="197:18" pos:end="197:18">4</literal></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:18">case <expr pos:start="201:10" pos:end="201:17"><name pos:start="201:10" pos:end="201:17">EXCP_SMC</name></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:36"><expr pos:start="203:9" pos:end="203:35"><name pos:start="203:9" pos:end="203:16">new_mode</name> <operator pos:start="203:18" pos:end="203:18">=</operator> <name pos:start="203:20" pos:end="203:35">ARM_CPU_MODE_MON</name></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:20"><expr pos:start="205:9" pos:end="205:19"><name pos:start="205:9" pos:end="205:12">addr</name> <operator pos:start="205:14" pos:end="205:14">=</operator> <literal type="number" pos:start="205:16" pos:end="205:19">0x08</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:40"><expr pos:start="207:9" pos:end="207:39"><name pos:start="207:9" pos:end="207:12">mask</name> <operator pos:start="207:14" pos:end="207:14">=</operator> <name pos:start="207:16" pos:end="207:21">CPSR_A</name> <operator pos:start="207:23" pos:end="207:23">|</operator> <name pos:start="207:25" pos:end="207:30">CPSR_I</name> <operator pos:start="207:32" pos:end="207:32">|</operator> <name pos:start="207:34" pos:end="207:39">CPSR_F</name></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:19"><expr pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:14">offset</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <literal type="number" pos:start="209:18" pos:end="209:18">0</literal></expr>;</expr_stmt>

        <break pos:start="211:9" pos:end="211:14">break;</break>

    <default pos:start="213:5" pos:end="213:12">default:</default>

        <expr_stmt pos:start="215:9" pos:end="215:73"><expr pos:start="215:9" pos:end="215:72"><call pos:start="215:9" pos:end="215:72"><name pos:start="215:9" pos:end="215:17">cpu_abort</name><argument_list pos:start="215:18" pos:end="215:72">(<argument pos:start="215:19" pos:end="215:20"><expr pos:start="215:19" pos:end="215:20"><name pos:start="215:19" pos:end="215:20">cs</name></expr></argument>, <argument pos:start="215:23" pos:end="215:50"><expr pos:start="215:23" pos:end="215:50"><literal type="string" pos:start="215:23" pos:end="215:50">"Unhandled exception 0x%x\n"</literal></expr></argument>, <argument pos:start="215:53" pos:end="215:71"><expr pos:start="215:53" pos:end="215:71"><name pos:start="215:53" pos:end="215:71"><name pos:start="215:53" pos:end="215:54">cs</name><operator pos:start="215:55" pos:end="215:56">-&gt;</operator><name pos:start="215:57" pos:end="215:71">exception_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="217:9" pos:end="217:15">return;</return> <comment type="block" pos:start="217:17" pos:end="217:59">/* Never happens.  Keep compiler happy.  */</comment>

    </block_content>}</block></switch>



    <if_stmt pos:start="223:5" pos:end="247:5"><if pos:start="223:5" pos:end="227:5">if <condition pos:start="223:8" pos:end="223:37">(<expr pos:start="223:9" pos:end="223:36"><name pos:start="223:9" pos:end="223:16">new_mode</name> <operator pos:start="223:18" pos:end="223:19">==</operator> <name pos:start="223:21" pos:end="223:36">ARM_CPU_MODE_MON</name></expr>)</condition> <block pos:start="223:39" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:32">

        <expr_stmt pos:start="225:9" pos:end="225:32"><expr pos:start="225:9" pos:end="225:31"><name pos:start="225:9" pos:end="225:12">addr</name> <operator pos:start="225:14" pos:end="225:15">+=</operator> <name pos:start="225:17" pos:end="225:31"><name pos:start="225:17" pos:end="225:19">env</name><operator pos:start="225:20" pos:end="225:21">-&gt;</operator><name pos:start="225:22" pos:end="225:25">cp15</name><operator pos:start="225:26" pos:end="225:26">.</operator><name pos:start="225:27" pos:end="225:31">mvbar</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="227:7" pos:end="233:5">else if <condition pos:start="227:15" pos:end="227:64">(<expr pos:start="227:16" pos:end="227:63"><call pos:start="227:16" pos:end="227:53"><name pos:start="227:16" pos:end="227:41">A32_BANKED_CURRENT_REG_GET</name><argument_list pos:start="227:42" pos:end="227:53">(<argument pos:start="227:43" pos:end="227:45"><expr pos:start="227:43" pos:end="227:45"><name pos:start="227:43" pos:end="227:45">env</name></expr></argument>, <argument pos:start="227:48" pos:end="227:52"><expr pos:start="227:48" pos:end="227:52"><name pos:start="227:48" pos:end="227:52">sctlr</name></expr></argument>)</argument_list></call> <operator pos:start="227:55" pos:end="227:55">&amp;</operator> <name pos:start="227:57" pos:end="227:63">SCTLR_V</name></expr>)</condition> <block pos:start="227:66" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:27">

        <comment type="block" pos:start="229:9" pos:end="229:74">/* High vectors. When enabled, base address cannot be remapped. */</comment>

        <expr_stmt pos:start="231:9" pos:end="231:27"><expr pos:start="231:9" pos:end="231:26"><name pos:start="231:9" pos:end="231:12">addr</name> <operator pos:start="231:14" pos:end="231:15">+=</operator> <literal type="number" pos:start="231:17" pos:end="231:26">0xffff0000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="233:7" pos:end="247:5">else <block pos:start="233:12" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:54">

        <comment type="block" pos:start="235:9" pos:end="243:11">/* ARM v7 architectures provide a vector base address register to remap

         * the interrupt vector table.

         * This register is only followed in non-monitor mode, and is banked.

         * Note: only bits 31:5 are valid.

         */</comment>

        <expr_stmt pos:start="245:9" pos:end="245:54"><expr pos:start="245:9" pos:end="245:53"><name pos:start="245:9" pos:end="245:12">addr</name> <operator pos:start="245:14" pos:end="245:15">+=</operator> <call pos:start="245:17" pos:end="245:53"><name pos:start="245:17" pos:end="245:42">A32_BANKED_CURRENT_REG_GET</name><argument_list pos:start="245:43" pos:end="245:53">(<argument pos:start="245:44" pos:end="245:46"><expr pos:start="245:44" pos:end="245:46"><name pos:start="245:44" pos:end="245:46">env</name></expr></argument>, <argument pos:start="245:49" pos:end="245:52"><expr pos:start="245:49" pos:end="245:52"><name pos:start="245:49" pos:end="245:52">vbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="251:5" pos:end="255:5"><if pos:start="251:5" pos:end="255:5">if <condition pos:start="251:8" pos:end="251:58">(<expr pos:start="251:9" pos:end="251:57"><operator pos:start="251:9" pos:end="251:9">(</operator><name pos:start="251:10" pos:end="251:27"><name pos:start="251:10" pos:end="251:12">env</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:27">uncached_cpsr</name></name> <operator pos:start="251:29" pos:end="251:29">&amp;</operator> <name pos:start="251:31" pos:end="251:36">CPSR_M</name><operator pos:start="251:37" pos:end="251:37">)</operator> <operator pos:start="251:39" pos:end="251:40">==</operator> <name pos:start="251:42" pos:end="251:57">ARM_CPU_MODE_MON</name></expr>)</condition> <block pos:start="251:60" pos:end="255:5">{<block_content pos:start="253:9" pos:end="253:37">

        <expr_stmt pos:start="253:9" pos:end="253:37"><expr pos:start="253:9" pos:end="253:36"><name pos:start="253:9" pos:end="253:25"><name pos:start="253:9" pos:end="253:11">env</name><operator pos:start="253:12" pos:end="253:13">-&gt;</operator><name pos:start="253:14" pos:end="253:17">cp15</name><operator pos:start="253:18" pos:end="253:18">.</operator><name pos:start="253:19" pos:end="253:25">scr_el3</name></name> <operator pos:start="253:27" pos:end="253:28">&amp;=</operator> <operator pos:start="253:30" pos:end="253:30">~</operator><name pos:start="253:31" pos:end="253:36">SCR_NS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:32"><expr pos:start="259:5" pos:end="259:31"><call pos:start="259:5" pos:end="259:31"><name pos:start="259:5" pos:end="259:15">switch_mode</name> <argument_list pos:start="259:17" pos:end="259:31">(<argument pos:start="259:18" pos:end="259:20"><expr pos:start="259:18" pos:end="259:20"><name pos:start="259:18" pos:end="259:20">env</name></expr></argument>, <argument pos:start="259:23" pos:end="259:30"><expr pos:start="259:23" pos:end="259:30"><name pos:start="259:23" pos:end="259:30">new_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="261:5" pos:end="265:7">/* For exceptions taken to AArch32 we must clear the SS bit in both

     * PSTATE and in the old-state value we save to SPSR_&lt;mode&gt;, so zero it now.

     */</comment>

    <expr_stmt pos:start="267:5" pos:end="267:37"><expr pos:start="267:5" pos:end="267:36"><name pos:start="267:5" pos:end="267:22"><name pos:start="267:5" pos:end="267:7">env</name><operator pos:start="267:8" pos:end="267:9">-&gt;</operator><name pos:start="267:10" pos:end="267:22">uncached_cpsr</name></name> <operator pos:start="267:24" pos:end="267:25">&amp;=</operator> <operator pos:start="267:27" pos:end="267:27">~</operator><name pos:start="267:28" pos:end="267:36">PSTATE_SS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:31"><expr pos:start="269:5" pos:end="269:30"><name pos:start="269:5" pos:end="269:13"><name pos:start="269:5" pos:end="269:7">env</name><operator pos:start="269:8" pos:end="269:9">-&gt;</operator><name pos:start="269:10" pos:end="269:13">spsr</name></name> <operator pos:start="269:15" pos:end="269:15">=</operator> <call pos:start="269:17" pos:end="269:30"><name pos:start="269:17" pos:end="269:25">cpsr_read</name><argument_list pos:start="269:26" pos:end="269:30">(<argument pos:start="269:27" pos:end="269:29"><expr pos:start="269:27" pos:end="269:29"><name pos:start="269:27" pos:end="269:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="271:5" pos:end="271:25">/* Clear IT bits.  */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:27"><expr pos:start="273:5" pos:end="273:26"><name pos:start="273:5" pos:end="273:22"><name pos:start="273:5" pos:end="273:7">env</name><operator pos:start="273:8" pos:end="273:9">-&gt;</operator><name pos:start="273:10" pos:end="273:22">condexec_bits</name></name> <operator pos:start="273:24" pos:end="273:24">=</operator> <literal type="number" pos:start="273:26" pos:end="273:26">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="275:5" pos:end="275:70">/* Switch to the new mode, and to the correct instruction set.  */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:67"><expr pos:start="277:5" pos:end="277:66"><name pos:start="277:5" pos:end="277:22"><name pos:start="277:5" pos:end="277:7">env</name><operator pos:start="277:8" pos:end="277:9">-&gt;</operator><name pos:start="277:10" pos:end="277:22">uncached_cpsr</name></name> <operator pos:start="277:24" pos:end="277:24">=</operator> <operator pos:start="277:26" pos:end="277:26">(</operator><name pos:start="277:27" pos:end="277:44"><name pos:start="277:27" pos:end="277:29">env</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:44">uncached_cpsr</name></name> <operator pos:start="277:46" pos:end="277:46">&amp;</operator> <operator pos:start="277:48" pos:end="277:48">~</operator><name pos:start="277:49" pos:end="277:54">CPSR_M</name><operator pos:start="277:55" pos:end="277:55">)</operator> <operator pos:start="277:57" pos:end="277:57">|</operator> <name pos:start="277:59" pos:end="277:66">new_mode</name></expr>;</expr_stmt>

    <comment type="block" pos:start="279:5" pos:end="279:33">/* Set new mode endianness */</comment>

    <expr_stmt pos:start="281:5" pos:end="281:34"><expr pos:start="281:5" pos:end="281:33"><name pos:start="281:5" pos:end="281:22"><name pos:start="281:5" pos:end="281:7">env</name><operator pos:start="281:8" pos:end="281:9">-&gt;</operator><name pos:start="281:10" pos:end="281:22">uncached_cpsr</name></name> <operator pos:start="281:24" pos:end="281:25">&amp;=</operator> <operator pos:start="281:27" pos:end="281:27">~</operator><name pos:start="281:28" pos:end="281:33">CPSR_E</name></expr>;</expr_stmt>

    <if_stmt pos:start="283:5" pos:end="287:5"><if pos:start="283:5" pos:end="287:5">if <condition pos:start="283:8" pos:end="283:59">(<expr pos:start="283:9" pos:end="283:58"><name pos:start="283:9" pos:end="283:47"><name pos:start="283:9" pos:end="283:11">env</name><operator pos:start="283:12" pos:end="283:13">-&gt;</operator><name pos:start="283:14" pos:end="283:17">cp15</name><operator pos:start="283:18" pos:end="283:18">.</operator><name pos:start="283:19" pos:end="283:26">sctlr_el</name><index pos:start="283:27" pos:end="283:47">[<expr pos:start="283:28" pos:end="283:46"><call pos:start="283:28" pos:end="283:46"><name pos:start="283:28" pos:end="283:41">arm_current_el</name><argument_list pos:start="283:42" pos:end="283:46">(<argument pos:start="283:43" pos:end="283:45"><expr pos:start="283:43" pos:end="283:45"><name pos:start="283:43" pos:end="283:45">env</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator pos:start="283:49" pos:end="283:49">&amp;</operator> <name pos:start="283:51" pos:end="283:58">SCTLR_EE</name></expr>)</condition> <block pos:start="283:61" pos:end="287:5">{<block_content pos:start="285:9" pos:end="285:38">

        <expr_stmt pos:start="285:9" pos:end="285:38"><expr pos:start="285:9" pos:end="285:37"><name pos:start="285:9" pos:end="285:26"><name pos:start="285:9" pos:end="285:11">env</name><operator pos:start="285:12" pos:end="285:13">-&gt;</operator><name pos:start="285:14" pos:end="285:26">uncached_cpsr</name></name> <operator pos:start="285:28" pos:end="285:29">|=</operator> <operator pos:start="285:31" pos:end="285:31">~</operator><name pos:start="285:32" pos:end="285:37">CPSR_E</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:22"><expr pos:start="289:5" pos:end="289:21"><name pos:start="289:5" pos:end="289:13"><name pos:start="289:5" pos:end="289:7">env</name><operator pos:start="289:8" pos:end="289:9">-&gt;</operator><name pos:start="289:10" pos:end="289:13">daif</name></name> <operator pos:start="289:15" pos:end="289:16">|=</operator> <name pos:start="289:18" pos:end="289:21">mask</name></expr>;</expr_stmt>

    <comment type="block" pos:start="291:5" pos:end="293:55">/* this is a lie, as the was no c1_sys on V4T/V5, but who cares

     * and we should just guard the thumb mode on V4 */</comment>

    <if_stmt pos:start="295:5" pos:end="299:5"><if pos:start="295:5" pos:end="299:5">if <condition pos:start="295:8" pos:end="295:42">(<expr pos:start="295:9" pos:end="295:41"><call pos:start="295:9" pos:end="295:41"><name pos:start="295:9" pos:end="295:19">arm_feature</name><argument_list pos:start="295:20" pos:end="295:41">(<argument pos:start="295:21" pos:end="295:23"><expr pos:start="295:21" pos:end="295:23"><name pos:start="295:21" pos:end="295:23">env</name></expr></argument>, <argument pos:start="295:26" pos:end="295:40"><expr pos:start="295:26" pos:end="295:40"><name pos:start="295:26" pos:end="295:40">ARM_FEATURE_V4T</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="295:44" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:78">

        <expr_stmt pos:start="297:9" pos:end="297:78"><expr pos:start="297:9" pos:end="297:77"><name pos:start="297:9" pos:end="297:18"><name pos:start="297:9" pos:end="297:11">env</name><operator pos:start="297:12" pos:end="297:13">-&gt;</operator><name pos:start="297:14" pos:end="297:18">thumb</name></name> <operator pos:start="297:20" pos:end="297:20">=</operator> <operator pos:start="297:22" pos:end="297:22">(</operator><call pos:start="297:23" pos:end="297:60"><name pos:start="297:23" pos:end="297:48">A32_BANKED_CURRENT_REG_GET</name><argument_list pos:start="297:49" pos:end="297:60">(<argument pos:start="297:50" pos:end="297:52"><expr pos:start="297:50" pos:end="297:52"><name pos:start="297:50" pos:end="297:52">env</name></expr></argument>, <argument pos:start="297:55" pos:end="297:59"><expr pos:start="297:55" pos:end="297:59"><name pos:start="297:55" pos:end="297:59">sctlr</name></expr></argument>)</argument_list></call> <operator pos:start="297:62" pos:end="297:62">&amp;</operator> <name pos:start="297:64" pos:end="297:71">SCTLR_TE</name><operator pos:start="297:72" pos:end="297:72">)</operator> <operator pos:start="297:74" pos:end="297:75">!=</operator> <literal type="number" pos:start="297:77" pos:end="297:77">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:43"><expr pos:start="301:5" pos:end="301:42"><name pos:start="301:5" pos:end="301:17"><name pos:start="301:5" pos:end="301:7">env</name><operator pos:start="301:8" pos:end="301:9">-&gt;</operator><name pos:start="301:10" pos:end="301:13">regs</name><index pos:start="301:14" pos:end="301:17">[<expr pos:start="301:15" pos:end="301:16"><literal type="number" pos:start="301:15" pos:end="301:16">14</literal></expr>]</index></name> <operator pos:start="301:19" pos:end="301:19">=</operator> <name pos:start="301:21" pos:end="301:33"><name pos:start="301:21" pos:end="301:23">env</name><operator pos:start="301:24" pos:end="301:25">-&gt;</operator><name pos:start="301:26" pos:end="301:29">regs</name><index pos:start="301:30" pos:end="301:33">[<expr pos:start="301:31" pos:end="301:32"><literal type="number" pos:start="301:31" pos:end="301:32">15</literal></expr>]</index></name> <operator pos:start="301:35" pos:end="301:35">+</operator> <name pos:start="301:37" pos:end="301:42">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:25"><expr pos:start="303:5" pos:end="303:24"><name pos:start="303:5" pos:end="303:17"><name pos:start="303:5" pos:end="303:7">env</name><operator pos:start="303:8" pos:end="303:9">-&gt;</operator><name pos:start="303:10" pos:end="303:13">regs</name><index pos:start="303:14" pos:end="303:17">[<expr pos:start="303:15" pos:end="303:16"><literal type="number" pos:start="303:15" pos:end="303:16">15</literal></expr>]</index></name> <operator pos:start="303:19" pos:end="303:19">=</operator> <name pos:start="303:21" pos:end="303:24">addr</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
