<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22558.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:21">armv7m_init</name><parameter_list pos:start="1:22" pos:end="3:73">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:36">flash_size</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:51">sram_size</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:49"><decl pos:start="3:23" pos:end="3:49"><type pos:start="3:23" pos:end="3:49"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:49">kernel_filename</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:72"><decl pos:start="3:52" pos:end="3:72"><type pos:start="3:52" pos:end="3:72"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:72">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="167:1">{<block_content pos:start="7:5" pos:end="165:15">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DeviceState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:21">nvic</name></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:40">/* FIXME: make this local state.  */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:19">qemu_irq</name></type> <name pos:start="13:21" pos:end="13:27"><name pos:start="13:21" pos:end="13:23">pic</name><index pos:start="13:24" pos:end="13:27">[<expr pos:start="13:25" pos:end="13:26"><literal type="number" pos:start="13:25" pos:end="13:26">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">qemu_irq</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">image_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:20">lowaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:14">flash_size</name> <operator pos:start="29:16" pos:end="29:17">*=</operator> <literal type="number" pos:start="29:19" pos:end="29:22">1024</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:13">sram_size</name> <operator pos:start="31:15" pos:end="31:16">*=</operator> <literal type="number" pos:start="31:18" pos:end="31:21">1024</literal></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="37:32"><if pos:start="35:5" pos:end="37:32">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:32"><block_content pos:start="37:9" pos:end="37:32">

	<expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:31">"cortex-m3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:7">env</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:29"><name pos:start="39:11" pos:end="39:18">cpu_init</name><argument_list pos:start="39:19" pos:end="39:29">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="72:0"><if pos:start="41:5" pos:end="72:0">if <condition pos:start="41:8" pos:end="41:13">(<expr pos:start="41:9" pos:end="41:12"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:12">env</name></expr>)</condition> <block pos:start="41:15" pos:end="72:0">{<block_content pos:start="43:9" pos:end="45:16">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:58">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:57"><expr pos:start="43:25" pos:end="43:57"><literal type="string" pos:start="43:25" pos:end="43:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><call pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:12">exit</name><argument_list pos:start="45:13" pos:end="45:15">(<argument pos:start="45:14" pos:end="45:14"><expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="51:1" pos:end="51:5">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:5"><literal type="number" pos:start="51:5" pos:end="51:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="53:5" pos:end="57:66">/* &gt; 32Mb SRAM gets complicated because it overlaps the bitband area.

       We don't have proper commandline options, so allocate half of memory

       as SRAM, up to a maximum of 32Mb, and the rest as code.  */</comment>

    if (ram_size &gt; (512 + 32) * 1024 * 1024)

        ram_size = (512 + 32) * 1024 * 1024;

    sram_size = (ram_size / 2) &amp; TARGET_PAGE_MASK;

    if (sram_size &gt; 32 * 1024 * 1024)

        sram_size = 32 * 1024 * 1024;

    code_size = ram_size - sram_size;

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="75:5" pos:end="75:71">/* Flash programming is done via the SCU, so pretend it is ROM.  */</comment>

    <expr_stmt pos:start="77:5" pos:end="79:74"><expr pos:start="77:5" pos:end="79:73"><call pos:start="77:5" pos:end="79:73"><name pos:start="77:5" pos:end="77:32">cpu_register_physical_memory</name><argument_list pos:start="77:33" pos:end="79:73">(<argument pos:start="77:34" pos:end="77:34"><expr pos:start="77:34" pos:end="77:34"><literal type="number" pos:start="77:34" pos:end="77:34">0</literal></expr></argument>, <argument pos:start="77:37" pos:end="77:46"><expr pos:start="77:37" pos:end="77:46"><name pos:start="77:37" pos:end="77:46">flash_size</name></expr></argument>,

                                 <argument pos:start="79:34" pos:end="79:72"><expr pos:start="79:34" pos:end="79:72"><call pos:start="79:34" pos:end="79:59"><name pos:start="79:34" pos:end="79:47">qemu_ram_alloc</name><argument_list pos:start="79:48" pos:end="79:59">(<argument pos:start="79:49" pos:end="79:58"><expr pos:start="79:49" pos:end="79:58"><name pos:start="79:49" pos:end="79:58">flash_size</name></expr></argument>)</argument_list></call> <operator pos:start="79:61" pos:end="79:61">|</operator> <name pos:start="79:63" pos:end="79:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:73"><expr pos:start="81:5" pos:end="83:72"><call pos:start="81:5" pos:end="83:72"><name pos:start="81:5" pos:end="81:32">cpu_register_physical_memory</name><argument_list pos:start="81:33" pos:end="83:72">(<argument pos:start="81:34" pos:end="81:43"><expr pos:start="81:34" pos:end="81:43"><literal type="number" pos:start="81:34" pos:end="81:43">0x20000000</literal></expr></argument>, <argument pos:start="81:46" pos:end="81:54"><expr pos:start="81:46" pos:end="81:54"><name pos:start="81:46" pos:end="81:54">sram_size</name></expr></argument>,

                                 <argument pos:start="83:34" pos:end="83:71"><expr pos:start="83:34" pos:end="83:71"><call pos:start="83:34" pos:end="83:58"><name pos:start="83:34" pos:end="83:47">qemu_ram_alloc</name><argument_list pos:start="83:48" pos:end="83:58">(<argument pos:start="83:49" pos:end="83:57"><expr pos:start="83:49" pos:end="83:57"><name pos:start="83:49" pos:end="83:57">sram_size</name></expr></argument>)</argument_list></call> <operator pos:start="83:60" pos:end="83:60">|</operator> <name pos:start="83:62" pos:end="83:71">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:23">armv7m_bitband_init</name><argument_list pos:start="85:24" pos:end="85:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:44"><expr pos:start="89:5" pos:end="89:43"><name pos:start="89:5" pos:end="89:8">nvic</name> <operator pos:start="89:10" pos:end="89:10">=</operator> <call pos:start="89:12" pos:end="89:43"><name pos:start="89:12" pos:end="89:22">qdev_create</name><argument_list pos:start="89:23" pos:end="89:43">(<argument pos:start="89:24" pos:end="89:27"><expr pos:start="89:24" pos:end="89:27"><name pos:start="89:24" pos:end="89:27">NULL</name></expr></argument>, <argument pos:start="89:30" pos:end="89:42"><expr pos:start="89:30" pos:end="89:42"><literal type="string" pos:start="89:30" pos:end="89:42">"armv7m_nvic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:40"><expr pos:start="91:5" pos:end="91:39"><call pos:start="91:5" pos:end="91:39"><name pos:start="91:5" pos:end="91:21">qdev_set_prop_ptr</name><argument_list pos:start="91:22" pos:end="91:39">(<argument pos:start="91:23" pos:end="91:26"><expr pos:start="91:23" pos:end="91:26"><name pos:start="91:23" pos:end="91:26">nvic</name></expr></argument>, <argument pos:start="91:29" pos:end="91:33"><expr pos:start="91:29" pos:end="91:33"><literal type="string" pos:start="91:29" pos:end="91:33">"cpu"</literal></expr></argument>, <argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><name pos:start="91:36" pos:end="91:38">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:20"><expr pos:start="93:5" pos:end="93:19"><call pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:13">qdev_init</name><argument_list pos:start="93:14" pos:end="93:19">(<argument pos:start="93:15" pos:end="93:18"><expr pos:start="93:15" pos:end="93:18"><name pos:start="93:15" pos:end="93:18">nvic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:36"><expr pos:start="95:5" pos:end="95:35"><name pos:start="95:5" pos:end="95:11">cpu_pic</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:35"><name pos:start="95:15" pos:end="95:30">arm_pic_init_cpu</name><argument_list pos:start="95:31" pos:end="95:35">(<argument pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:76"><expr pos:start="97:5" pos:end="97:75"><call pos:start="97:5" pos:end="97:75"><name pos:start="97:5" pos:end="97:22">sysbus_connect_irq</name><argument_list pos:start="97:23" pos:end="97:75">(<argument pos:start="97:24" pos:end="97:45"><expr pos:start="97:24" pos:end="97:45"><call pos:start="97:24" pos:end="97:45"><name pos:start="97:24" pos:end="97:39">sysbus_from_qdev</name><argument_list pos:start="97:40" pos:end="97:45">(<argument pos:start="97:41" pos:end="97:44"><expr pos:start="97:41" pos:end="97:44"><name pos:start="97:41" pos:end="97:44">nvic</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:48" pos:end="97:48"><expr pos:start="97:48" pos:end="97:48"><literal type="number" pos:start="97:48" pos:end="97:48">0</literal></expr></argument>, <argument pos:start="97:51" pos:end="97:74"><expr pos:start="97:51" pos:end="97:74"><name pos:start="97:51" pos:end="97:74"><name pos:start="97:51" pos:end="97:57">cpu_pic</name><index pos:start="97:58" pos:end="97:74">[<expr pos:start="97:59" pos:end="97:73"><name pos:start="97:59" pos:end="97:73">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="99:5" pos:end="103:5">for <control pos:start="99:9" pos:end="99:28">(<init pos:start="99:10" pos:end="99:15"><expr pos:start="99:10" pos:end="99:14"><name pos:start="99:10" pos:end="99:10">i</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</init> <condition pos:start="99:17" pos:end="99:23"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:17">i</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <literal type="number" pos:start="99:21" pos:end="99:22">64</literal></expr>;</condition> <incr pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:25">i</name><operator pos:start="99:26" pos:end="99:27">++</operator></expr></incr>)</control> <block pos:start="99:30" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:43">

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:11">pic</name><index pos:start="101:12" pos:end="101:14">[<expr pos:start="101:13" pos:end="101:13"><name pos:start="101:13" pos:end="101:13">i</name></expr>]</index></name> <operator pos:start="101:16" pos:end="101:16">=</operator> <call pos:start="101:18" pos:end="101:42"><name pos:start="101:18" pos:end="101:33">qdev_get_gpio_in</name><argument_list pos:start="101:34" pos:end="101:42">(<argument pos:start="101:35" pos:end="101:38"><expr pos:start="101:35" pos:end="101:38"><name pos:start="101:35" pos:end="101:38">nvic</name></expr></argument>, <argument pos:start="101:41" pos:end="101:41"><expr pos:start="101:41" pos:end="101:41"><name pos:start="101:41" pos:end="101:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="107:5" pos:end="107:70"><expr pos:start="107:5" pos:end="107:69"><name pos:start="107:5" pos:end="107:14">image_size</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <call pos:start="107:18" pos:end="107:69"><name pos:start="107:18" pos:end="107:25">load_elf</name><argument_list pos:start="107:26" pos:end="107:69">(<argument pos:start="107:27" pos:end="107:41"><expr pos:start="107:27" pos:end="107:41"><name pos:start="107:27" pos:end="107:41">kernel_filename</name></expr></argument>, <argument pos:start="107:44" pos:end="107:44"><expr pos:start="107:44" pos:end="107:44"><literal type="number" pos:start="107:44" pos:end="107:44">0</literal></expr></argument>, <argument pos:start="107:47" pos:end="107:52"><expr pos:start="107:47" pos:end="107:52"><operator pos:start="107:47" pos:end="107:47">&amp;</operator><name pos:start="107:48" pos:end="107:52">entry</name></expr></argument>, <argument pos:start="107:55" pos:end="107:62"><expr pos:start="107:55" pos:end="107:62"><operator pos:start="107:55" pos:end="107:55">&amp;</operator><name pos:start="107:56" pos:end="107:62">lowaddr</name></expr></argument>, <argument pos:start="107:65" pos:end="107:68"><expr pos:start="107:65" pos:end="107:68"><name pos:start="107:65" pos:end="107:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:23">(<expr pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:18">image_size</name> <operator pos:start="109:20" pos:end="109:20">&lt;</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>)</condition> <block pos:start="109:25" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:20">

        <expr_stmt pos:start="111:9" pos:end="111:73"><expr pos:start="111:9" pos:end="111:72"><name pos:start="111:9" pos:end="111:18">image_size</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <call pos:start="111:22" pos:end="111:72"><name pos:start="111:22" pos:end="111:40">load_image_targphys</name><argument_list pos:start="111:41" pos:end="111:72">(<argument pos:start="111:42" pos:end="111:56"><expr pos:start="111:42" pos:end="111:56"><name pos:start="111:42" pos:end="111:56">kernel_filename</name></expr></argument>, <argument pos:start="111:59" pos:end="111:59"><expr pos:start="111:59" pos:end="111:59"><literal type="number" pos:start="111:59" pos:end="111:59">0</literal></expr></argument>, <argument pos:start="111:62" pos:end="111:71"><expr pos:start="111:62" pos:end="111:71"><name pos:start="111:62" pos:end="111:71">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="113:9" pos:end="113:20"><expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:15">lowaddr</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:23">(<expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:18">image_size</name> <operator pos:start="117:20" pos:end="117:20">&lt;</operator> <literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr>)</condition> <block pos:start="117:25" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:16">

        <expr_stmt pos:start="119:9" pos:end="121:33"><expr pos:start="119:9" pos:end="121:32"><call pos:start="119:9" pos:end="121:32"><name pos:start="119:9" pos:end="119:15">fprintf</name><argument_list pos:start="119:16" pos:end="121:32">(<argument pos:start="119:17" pos:end="119:22"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">stderr</name></expr></argument>, <argument pos:start="119:25" pos:end="119:60"><expr pos:start="119:25" pos:end="119:60"><literal type="string" pos:start="119:25" pos:end="119:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="121:17" pos:end="121:31"><expr pos:start="121:17" pos:end="121:31"><name pos:start="121:17" pos:end="121:31">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:16"><expr pos:start="123:9" pos:end="123:15"><call pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:12">exit</name><argument_list pos:start="123:13" pos:end="123:15">(<argument pos:start="123:14" pos:end="123:14"><expr pos:start="123:14" pos:end="123:14"><literal type="number" pos:start="123:14" pos:end="123:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="133:54">/* If the image was loaded at address zero then assume it is a

       regular ROM image and perform the normal CPU reset sequence.

       Otherwise jump directly to the entry point.  */</comment>

    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:21">(<expr pos:start="135:9" pos:end="135:20"><name pos:start="135:9" pos:end="135:15">lowaddr</name> <operator pos:start="135:17" pos:end="135:18">==</operator> <literal type="number" pos:start="135:20" pos:end="135:20">0</literal></expr>)</condition> <block pos:start="135:23" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:25">

	<expr_stmt pos:start="137:9" pos:end="137:36"><expr pos:start="137:9" pos:end="137:35"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:11">env</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:17">regs</name><index pos:start="137:18" pos:end="137:21">[<expr pos:start="137:19" pos:end="137:20"><literal type="number" pos:start="137:19" pos:end="137:20">13</literal></expr>]</index></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:35"><name pos:start="137:25" pos:end="137:32">ldl_phys</name><argument_list pos:start="137:33" pos:end="137:35">(<argument pos:start="137:34" pos:end="137:34"><expr pos:start="137:34" pos:end="137:34"><literal type="number" pos:start="137:34" pos:end="137:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="139:9" pos:end="139:25"><expr pos:start="139:9" pos:end="139:24"><name pos:start="139:9" pos:end="139:10">pc</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <call pos:start="139:14" pos:end="139:24"><name pos:start="139:14" pos:end="139:21">ldl_phys</name><argument_list pos:start="139:22" pos:end="139:24">(<argument pos:start="139:23" pos:end="139:23"><expr pos:start="139:23" pos:end="139:23"><literal type="number" pos:start="139:23" pos:end="139:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="145:5">else <block pos:start="141:12" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:19">

	<expr_stmt pos:start="143:9" pos:end="143:19"><expr pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:10">pc</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <name pos:start="143:14" pos:end="143:18">entry</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:24"><expr pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:7">env</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:14">thumb</name></name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:19">pc</name> <operator pos:start="147:21" pos:end="147:21">&amp;</operator> <literal type="number" pos:start="147:23" pos:end="147:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:28"><expr pos:start="149:5" pos:end="149:27"><name pos:start="149:5" pos:end="149:17"><name pos:start="149:5" pos:end="149:7">env</name><operator pos:start="149:8" pos:end="149:9">-&gt;</operator><name pos:start="149:10" pos:end="149:13">regs</name><index pos:start="149:14" pos:end="149:17">[<expr pos:start="149:15" pos:end="149:16"><literal type="number" pos:start="149:15" pos:end="149:16">15</literal></expr>]</index></name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:22">pc</name> <operator pos:start="149:24" pos:end="149:24">&amp;</operator> <operator pos:start="149:26" pos:end="149:26">~</operator><literal type="number" pos:start="149:27" pos:end="149:27">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="157:44">/* Hack to map an additional page of ram at the top of the address

       space.  This stops qemu complaining about executing code outside RAM

       when returning from an exception.  */</comment>

    <expr_stmt pos:start="159:5" pos:end="161:70"><expr pos:start="159:5" pos:end="161:69"><call pos:start="159:5" pos:end="161:69"><name pos:start="159:5" pos:end="159:32">cpu_register_physical_memory</name><argument_list pos:start="159:33" pos:end="161:69">(<argument pos:start="159:34" pos:end="159:43"><expr pos:start="159:34" pos:end="159:43"><literal type="number" pos:start="159:34" pos:end="159:43">0xfffff000</literal></expr></argument>, <argument pos:start="159:46" pos:end="159:51"><expr pos:start="159:46" pos:end="159:51"><literal type="number" pos:start="159:46" pos:end="159:51">0x1000</literal></expr></argument>,

                                 <argument pos:start="161:34" pos:end="161:68"><expr pos:start="161:34" pos:end="161:68"><call pos:start="161:34" pos:end="161:55"><name pos:start="161:34" pos:end="161:47">qemu_ram_alloc</name><argument_list pos:start="161:48" pos:end="161:55">(<argument pos:start="161:49" pos:end="161:54"><expr pos:start="161:49" pos:end="161:54"><literal type="number" pos:start="161:49" pos:end="161:54">0x1000</literal></expr></argument>)</argument_list></call> <operator pos:start="161:57" pos:end="161:57">|</operator> <name pos:start="161:59" pos:end="161:68">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="165:5" pos:end="165:15">return <expr pos:start="165:12" pos:end="165:14"><name pos:start="165:12" pos:end="165:14">pic</name></expr>;</return>

</block_content>}</block></function>
</unit>
