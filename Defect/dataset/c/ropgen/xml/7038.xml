<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7038.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:8">uint64_t</name> <name pos:start="1:10" pos:end="1:15">HELPER</name></type>(<name pos:start="1:17" pos:end="1:19">lpq</name>)<parameter_list pos:start="1:21" pos:end="1:55">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:34">CPUS390XState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:49">uint64_t</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:14">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">uintptr_t</name></type> <name pos:start="5:15" pos:end="5:16">ra</name> <init pos:start="5:18" pos:end="5:26">= <expr pos:start="5:20" pos:end="5:26"><call pos:start="5:20" pos:end="5:26"><name pos:start="5:20" pos:end="5:24">GETPC</name><argument_list pos:start="5:25" pos:end="5:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:15">hi</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">lo</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="41:5"><if pos:start="11:5" pos:end="31:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21">parallel_cpus</name></expr>)</condition> <block pos:start="11:24" pos:end="31:5">{<block_content pos:start="15:9" pos:end="30:0">

<cpp:ifndef pos:start="13:1" pos:end="13:24">#<cpp:directive pos:start="13:2" pos:end="13:7">ifndef</cpp:directive> <name pos:start="13:9" pos:end="13:24">CONFIG_ATOMIC128</name></cpp:ifndef>

        <expr_stmt pos:start="15:9" pos:end="18:0"><expr pos:start="15:9" pos:end="15:50"><call pos:start="15:9" pos:end="15:50"><name pos:start="15:9" pos:end="15:28">cpu_loop_exit_atomic</name><argument_list pos:start="15:29" pos:end="15:50">(<argument pos:start="15:30" pos:end="15:45"><expr pos:start="15:30" pos:end="15:45"><call pos:start="15:30" pos:end="15:45"><name pos:start="15:30" pos:end="15:40">ENV_GET_CPU</name><argument_list pos:start="15:41" pos:end="15:45">(<argument pos:start="15:42" pos:end="15:44"><expr pos:start="15:42" pos:end="15:44"><name pos:start="15:42" pos:end="15:44">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:48" pos:end="15:49"><expr pos:start="15:48" pos:end="15:49"><name pos:start="15:48" pos:end="15:49">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="19:9" pos:end="19:48"><decl pos:start="19:9" pos:end="19:47"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:19">mem_idx</name> <init pos:start="19:21" pos:end="19:47">= <expr pos:start="19:23" pos:end="19:47"><call pos:start="19:23" pos:end="19:47"><name pos:start="19:23" pos:end="19:35">cpu_mmu_index</name><argument_list pos:start="19:36" pos:end="19:47">(<argument pos:start="19:37" pos:end="19:39"><expr pos:start="19:37" pos:end="19:39"><name pos:start="19:37" pos:end="19:39">env</name></expr></argument>, <argument pos:start="19:42" pos:end="19:46"><expr pos:start="19:42" pos:end="19:46"><name pos:start="19:42" pos:end="19:46">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:71"><decl pos:start="21:9" pos:end="21:70"><type pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:19">TCGMemOpIdx</name></type> <name pos:start="21:21" pos:end="21:22">oi</name> <init pos:start="21:24" pos:end="21:70">= <expr pos:start="21:26" pos:end="21:70"><call pos:start="21:26" pos:end="21:70"><name pos:start="21:26" pos:end="21:39">make_memop_idx</name><argument_list pos:start="21:40" pos:end="21:70">(<argument pos:start="21:41" pos:end="21:60"><expr pos:start="21:41" pos:end="21:60"><name pos:start="21:41" pos:end="21:46">MO_TEQ</name> <operator pos:start="21:48" pos:end="21:48">|</operator> <name pos:start="21:50" pos:end="21:60">MO_ALIGN_16</name></expr></argument>, <argument pos:start="21:63" pos:end="21:69"><expr pos:start="21:63" pos:end="21:69"><name pos:start="21:63" pos:end="21:69">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:63"><decl pos:start="23:9" pos:end="23:62"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">Int128</name></type> <name pos:start="23:16" pos:end="23:16">v</name> <init pos:start="23:18" pos:end="23:62">= <expr pos:start="23:20" pos:end="23:62"><call pos:start="23:20" pos:end="23:62"><name pos:start="23:20" pos:end="23:43">helper_atomic_ldo_be_mmu</name><argument_list pos:start="23:44" pos:end="23:62">(<argument pos:start="23:45" pos:end="23:47"><expr pos:start="23:45" pos:end="23:47"><name pos:start="23:45" pos:end="23:47">env</name></expr></argument>, <argument pos:start="23:50" pos:end="23:53"><expr pos:start="23:50" pos:end="23:53"><name pos:start="23:50" pos:end="23:53">addr</name></expr></argument>, <argument pos:start="23:56" pos:end="23:57"><expr pos:start="23:56" pos:end="23:57"><name pos:start="23:56" pos:end="23:57">oi</name></expr></argument>, <argument pos:start="23:60" pos:end="23:61"><expr pos:start="23:60" pos:end="23:61"><name pos:start="23:60" pos:end="23:61">ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:10">hi</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:28"><name pos:start="25:14" pos:end="25:25">int128_gethi</name><argument_list pos:start="25:26" pos:end="25:28">(<argument pos:start="25:27" pos:end="25:27"><expr pos:start="25:27" pos:end="25:27"><name pos:start="25:27" pos:end="25:27">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:10">lo</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:28"><name pos:start="27:14" pos:end="27:25">int128_getlo</name><argument_list pos:start="27:26" pos:end="27:28">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><name pos:start="27:27" pos:end="27:27">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="41:5">else <block pos:start="31:12" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:48">

        <expr_stmt pos:start="33:9" pos:end="33:43"><expr pos:start="33:9" pos:end="33:42"><call pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:23">check_alignment</name><argument_list pos:start="33:24" pos:end="33:42">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">env</name></expr></argument>, <argument pos:start="33:30" pos:end="33:33"><expr pos:start="33:30" pos:end="33:33"><name pos:start="33:30" pos:end="33:33">addr</name></expr></argument>, <argument pos:start="33:36" pos:end="33:37"><expr pos:start="33:36" pos:end="33:37"><literal type="number" pos:start="33:36" pos:end="33:37">16</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:41"><expr pos:start="33:40" pos:end="33:41"><name pos:start="33:40" pos:end="33:41">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:48"><expr pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:10">hi</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:47"><name pos:start="37:14" pos:end="37:28">cpu_ldq_data_ra</name><argument_list pos:start="37:29" pos:end="37:47">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">env</name></expr></argument>, <argument pos:start="37:35" pos:end="37:42"><expr pos:start="37:35" pos:end="37:42"><name pos:start="37:35" pos:end="37:38">addr</name> <operator pos:start="37:40" pos:end="37:40">+</operator> <literal type="number" pos:start="37:42" pos:end="37:42">0</literal></expr></argument>, <argument pos:start="37:45" pos:end="37:46"><expr pos:start="37:45" pos:end="37:46"><name pos:start="37:45" pos:end="37:46">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:48"><expr pos:start="39:9" pos:end="39:47"><name pos:start="39:9" pos:end="39:10">lo</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:47"><name pos:start="39:14" pos:end="39:28">cpu_ldq_data_ra</name><argument_list pos:start="39:29" pos:end="39:47">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><name pos:start="39:30" pos:end="39:32">env</name></expr></argument>, <argument pos:start="39:35" pos:end="39:42"><expr pos:start="39:35" pos:end="39:42"><name pos:start="39:35" pos:end="39:38">addr</name> <operator pos:start="39:40" pos:end="39:40">+</operator> <literal type="number" pos:start="39:42" pos:end="39:42">8</literal></expr></argument>, <argument pos:start="39:45" pos:end="39:46"><expr pos:start="39:45" pos:end="39:46"><name pos:start="39:45" pos:end="39:46">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:14">retxl</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:19">lo</name></expr>;</expr_stmt>

    <return pos:start="47:5" pos:end="47:14">return <expr pos:start="47:12" pos:end="47:13"><name pos:start="47:12" pos:end="47:13">hi</name></expr>;</return>

</block_content>}</block></function>
</unit>
