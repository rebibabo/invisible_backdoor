<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14357.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:42">decode_b_picture_primary_header</name><parameter_list pos:start="1:43" pos:end="1:57">(<parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:53">VC9Context</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:32">= <expr pos:start="5:25" pos:end="5:32"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:32"><name pos:start="5:26" pos:end="5:26">v</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:29">s</name><operator pos:start="5:30" pos:end="5:30">.</operator><name pos:start="5:31" pos:end="5:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">pqindex</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:66">/* Prolog common to all frametypes should be done in caller */</comment>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:37">(<expr pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:9">v</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:18">profile</name></name> <operator pos:start="13:20" pos:end="13:21">==</operator> <name pos:start="13:23" pos:end="13:36">PROFILE_SIMPLE</name></expr>)</condition>

    <block pos:start="15:5" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:28">

        <expr_stmt pos:start="17:9" pos:end="17:87"><expr pos:start="17:9" pos:end="17:86"><call pos:start="17:9" pos:end="17:86"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:86">(<argument pos:start="17:16" pos:end="17:25"><expr pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:16">v</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:20">.</operator><name pos:start="17:21" pos:end="17:25">avctx</name></name></expr></argument>, <argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:42" pos:end="17:85"><expr pos:start="17:42" pos:end="17:85"><literal type="string" pos:start="17:42" pos:end="17:85">"Found a B frame while in Simple Profile!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:28">return <expr pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:27">FRAME_SKIPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="25:74"><expr pos:start="23:5" pos:end="25:73"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:5">v</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:16">bfraction</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="25:73"><name pos:start="23:20" pos:end="23:36">vc9_bfraction_lut</name><index pos:start="23:37" pos:end="25:73">[<expr pos:start="23:38" pos:end="25:72"><call pos:start="23:38" pos:end="25:72"><name pos:start="23:38" pos:end="23:45">get_vlc2</name><argument_list pos:start="23:46" pos:end="25:72">(<argument pos:start="23:47" pos:end="23:48"><expr pos:start="23:47" pos:end="23:48"><name pos:start="23:47" pos:end="23:48">gb</name></expr></argument>, <argument pos:start="23:51" pos:end="23:73"><expr pos:start="23:51" pos:end="23:73"><name pos:start="23:51" pos:end="23:73"><name pos:start="23:51" pos:end="23:67">vc9_bfraction_vlc</name><operator pos:start="23:68" pos:end="23:68">.</operator><name pos:start="23:69" pos:end="23:73">table</name></name></expr></argument>,

                                              <argument pos:start="25:47" pos:end="25:68"><expr pos:start="25:47" pos:end="25:68"><name pos:start="25:47" pos:end="25:68">VC9_BFRACTION_VLC_BITS</name></expr></argument>, <argument pos:start="25:71" pos:end="25:71"><expr pos:start="25:71" pos:end="25:71"><literal type="number" pos:start="25:71" pos:end="25:71">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:26">(<expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:9">v</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:20">bfraction</name></name> <operator pos:start="27:22" pos:end="27:22">&lt;</operator> <operator pos:start="27:24" pos:end="27:24">-</operator><literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>)</condition>

    <block pos:start="29:5" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:28">

        <expr_stmt pos:start="31:9" pos:end="31:64"><expr pos:start="31:9" pos:end="31:63"><call pos:start="31:9" pos:end="31:63"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:63">(<argument pos:start="31:16" pos:end="31:25"><expr pos:start="31:16" pos:end="31:25"><name pos:start="31:16" pos:end="31:25"><name pos:start="31:16" pos:end="31:16">v</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:25">avctx</name></name></expr></argument>, <argument pos:start="31:28" pos:end="31:39"><expr pos:start="31:28" pos:end="31:39"><name pos:start="31:28" pos:end="31:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:42" pos:end="31:62"><expr pos:start="31:42" pos:end="31:62"><literal type="string" pos:start="31:42" pos:end="31:62">"Invalid BFRaction\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:28">return <expr pos:start="33:16" pos:end="33:27"><name pos:start="33:16" pos:end="33:27">FRAME_SKIPED</name></expr>;</return>

    </block_content>}</block></if>

    <if type="elseif" pos:start="37:5" pos:end="47:5">else if <condition pos:start="37:13" pos:end="37:27">(<expr pos:start="37:14" pos:end="37:26"><operator pos:start="37:14" pos:end="37:14">!</operator><name pos:start="37:15" pos:end="37:26"><name pos:start="37:15" pos:end="37:15">v</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:26">bfraction</name></name></expr>)</condition>

    <block pos:start="39:5" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:45">

        <comment type="block" pos:start="41:9" pos:end="41:41">/* We actually have a BI frame */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:9">v</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:12">s</name><operator pos:start="43:13" pos:end="43:13">.</operator><name pos:start="43:14" pos:end="43:22">pict_type</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:32">BI_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:9">v</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:26">buffer_fullness</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <call pos:start="45:30" pos:end="45:44"><name pos:start="45:30" pos:end="45:37">get_bits</name><argument_list pos:start="45:38" pos:end="45:44">(<argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><name pos:start="45:39" pos:end="45:40">gb</name></expr></argument>, <argument pos:start="45:43" pos:end="45:43"><expr pos:start="45:43" pos:end="45:43"><literal type="number" pos:start="45:43" pos:end="45:43">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:37">/* Read the quantization stuff */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:30"><expr pos:start="53:5" pos:end="53:29"><name pos:start="53:5" pos:end="53:11">pqindex</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:29"><name pos:start="53:15" pos:end="53:22">get_bits</name><argument_list pos:start="53:23" pos:end="53:29">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">gb</name></expr></argument>, <argument pos:start="53:28" pos:end="53:28"><expr pos:start="53:28" pos:end="53:28"><literal type="number" pos:start="53:28" pos:end="53:28">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="57:41">if <condition pos:start="55:8" pos:end="55:50">(<expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:9">v</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:25">quantizer_mode</name></name> <operator pos:start="55:27" pos:end="55:28">==</operator> <name pos:start="55:30" pos:end="55:49">QUANT_FRAME_IMPLICIT</name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:41"><block_content pos:start="57:9" pos:end="57:41">

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">v</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:13">pq</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:40"><name pos:start="57:17" pos:end="57:28">pquant_table</name><index pos:start="57:29" pos:end="57:31">[<expr pos:start="57:30" pos:end="57:30"><literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr>]</index><index pos:start="57:32" pos:end="57:40">[<expr pos:start="57:33" pos:end="57:39"><name pos:start="57:33" pos:end="57:39">pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="59:5" pos:end="65:5">else

    <block pos:start="61:5" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:59">

        <expr_stmt pos:start="63:9" pos:end="63:59"><expr pos:start="63:9" pos:end="63:58"><name pos:start="63:9" pos:end="63:13"><name pos:start="63:9" pos:end="63:9">v</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:13">pq</name></name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:58"><name pos:start="63:17" pos:end="63:28">pquant_table</name><index pos:start="63:29" pos:end="63:49">[<expr pos:start="63:30" pos:end="63:48"><name pos:start="63:30" pos:end="63:46"><name pos:start="63:30" pos:end="63:30">v</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:46">quantizer_mode</name></name><operator pos:start="63:47" pos:end="63:47">-</operator><literal type="number" pos:start="63:48" pos:end="63:48">1</literal></expr>]</index><index pos:start="63:50" pos:end="63:58">[<expr pos:start="63:51" pos:end="63:57"><name pos:start="63:51" pos:end="63:57">pqindex</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="67:5" pos:end="67:49"><if pos:start="67:5" pos:end="67:49">if <condition pos:start="67:8" pos:end="67:20">(<expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:15">pqindex</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:19">9</literal></expr>)</condition><block type="pseudo" pos:start="67:22" pos:end="67:49"><block_content pos:start="67:22" pos:end="67:49"> <expr_stmt pos:start="67:22" pos:end="67:49"><expr pos:start="67:22" pos:end="67:48"><name pos:start="67:22" pos:end="67:30"><name pos:start="67:22" pos:end="67:22">v</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:30">halfpq</name></name> <operator pos:start="67:32" pos:end="67:32">=</operator> <call pos:start="67:34" pos:end="67:48"><name pos:start="67:34" pos:end="67:41">get_bits</name><argument_list pos:start="67:42" pos:end="67:48">(<argument pos:start="67:43" pos:end="67:44"><expr pos:start="67:43" pos:end="67:44"><name pos:start="67:43" pos:end="67:44">gb</name></expr></argument>, <argument pos:start="67:47" pos:end="67:47"><expr pos:start="67:47" pos:end="67:47"><literal type="number" pos:start="67:47" pos:end="67:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="71:40"><if pos:start="69:5" pos:end="71:40">if <condition pos:start="69:8" pos:end="69:50">(<expr pos:start="69:9" pos:end="69:49"><name pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:9">v</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:25">quantizer_mode</name></name> <operator pos:start="69:27" pos:end="69:28">==</operator> <name pos:start="69:30" pos:end="69:49">QUANT_FRAME_EXPLICIT</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:40"><block_content pos:start="71:9" pos:end="71:40">

        <expr_stmt pos:start="71:9" pos:end="71:40"><expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:9">v</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:21">pquantizer</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:39"><name pos:start="71:25" pos:end="71:32">get_bits</name><argument_list pos:start="71:33" pos:end="71:39">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">gb</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="95:5"><if pos:start="75:5" pos:end="85:5">if <condition pos:start="75:8" pos:end="75:34">(<expr pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:9">v</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:18">profile</name></name> <operator pos:start="75:20" pos:end="75:20">&gt;</operator> <name pos:start="75:22" pos:end="75:33">PROFILE_MAIN</name></expr>)</condition>

    <block pos:start="77:5" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:46">

        <if_stmt pos:start="79:9" pos:end="79:59"><if pos:start="79:9" pos:end="79:59">if <condition pos:start="79:12" pos:end="79:28">(<expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:13">v</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:27">postprocflag</name></name></expr>)</condition><block type="pseudo" pos:start="79:30" pos:end="79:59"><block_content pos:start="79:30" pos:end="79:59"> <expr_stmt pos:start="79:30" pos:end="79:59"><expr pos:start="79:30" pos:end="79:58"><name pos:start="79:30" pos:end="79:40"><name pos:start="79:30" pos:end="79:30">v</name><operator pos:start="79:31" pos:end="79:32">-&gt;</operator><name pos:start="79:33" pos:end="79:40">postproc</name></name> <operator pos:start="79:42" pos:end="79:42">=</operator> <call pos:start="79:44" pos:end="79:58"><name pos:start="79:44" pos:end="79:51">get_bits</name><argument_list pos:start="79:52" pos:end="79:58">(<argument pos:start="79:53" pos:end="79:54"><expr pos:start="79:53" pos:end="79:54"><name pos:start="79:53" pos:end="79:54">gb</name></expr></argument>, <argument pos:start="79:57" pos:end="79:57"><expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="83:46"><if pos:start="81:9" pos:end="83:46">if <condition pos:start="81:12" pos:end="81:61">(<expr pos:start="81:13" pos:end="81:60"><name pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:13">v</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:26">extended_mv</name></name> <operator pos:start="81:28" pos:end="81:29">==</operator> <literal type="number" pos:start="81:31" pos:end="81:31">1</literal> <operator pos:start="81:33" pos:end="81:34">&amp;&amp;</operator> <name pos:start="81:36" pos:end="81:49"><name pos:start="81:36" pos:end="81:36">v</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:39">s</name><operator pos:start="81:40" pos:end="81:40">.</operator><name pos:start="81:41" pos:end="81:49">pict_type</name></name> <operator pos:start="81:51" pos:end="81:52">!=</operator> <name pos:start="81:54" pos:end="81:60">BI_TYPE</name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:46"><block_content pos:start="83:13" pos:end="83:46">

            <expr_stmt pos:start="83:13" pos:end="83:46"><expr pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">v</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">mvrange</name></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <call pos:start="83:26" pos:end="83:45"><name pos:start="83:26" pos:end="83:35">get_prefix</name><argument_list pos:start="83:36" pos:end="83:45">(<argument pos:start="83:37" pos:end="83:38"><expr pos:start="83:37" pos:end="83:38"><name pos:start="83:37" pos:end="83:38">gb</name></expr></argument>, <argument pos:start="83:41" pos:end="83:41"><expr pos:start="83:41" pos:end="83:41"><literal type="number" pos:start="83:41" pos:end="83:41">0</literal></expr></argument>, <argument pos:start="83:44" pos:end="83:44"><expr pos:start="83:44" pos:end="83:44"><literal type="number" pos:start="83:44" pos:end="83:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if>

    <else pos:start="87:5" pos:end="95:5">else

    <block pos:start="89:5" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:46">

        <if_stmt pos:start="91:9" pos:end="93:46"><if pos:start="91:9" pos:end="93:46">if <condition pos:start="91:12" pos:end="91:32">(<expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:13">v</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:26">extended_mv</name></name> <operator pos:start="91:28" pos:end="91:29">==</operator> <literal type="number" pos:start="91:31" pos:end="91:31">1</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:46"><block_content pos:start="93:13" pos:end="93:46">

            <expr_stmt pos:start="93:13" pos:end="93:46"><expr pos:start="93:13" pos:end="93:45"><name pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:13">v</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:22">mvrange</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <call pos:start="93:26" pos:end="93:45"><name pos:start="93:26" pos:end="93:35">get_prefix</name><argument_list pos:start="93:36" pos:end="93:45">(<argument pos:start="93:37" pos:end="93:38"><expr pos:start="93:37" pos:end="93:38"><name pos:start="93:37" pos:end="93:38">gb</name></expr></argument>, <argument pos:start="93:41" pos:end="93:41"><expr pos:start="93:41" pos:end="93:41"><literal type="number" pos:start="93:41" pos:end="93:41">0</literal></expr></argument>, <argument pos:start="93:44" pos:end="93:44"><expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="97:5" pos:end="97:26">/* Read the MV mode */</comment>

    <if_stmt pos:start="99:5" pos:end="145:5"><if pos:start="99:5" pos:end="145:5">if <condition pos:start="99:8" pos:end="99:34">(<expr pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:9">v</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:12">s</name><operator pos:start="99:13" pos:end="99:13">.</operator><name pos:start="99:14" pos:end="99:22">pict_type</name></name> <operator pos:start="99:24" pos:end="99:25">!=</operator> <name pos:start="99:27" pos:end="99:33">BI_TYPE</name></expr>)</condition>

    <block pos:start="101:5" pos:end="145:5">{<block_content pos:start="103:9" pos:end="143:9">

        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:9">v</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:18">mv_mode</name></name> <operator pos:start="103:20" pos:end="103:20">=</operator> <call pos:start="103:22" pos:end="103:36"><name pos:start="103:22" pos:end="103:29">get_bits</name><argument_list pos:start="103:30" pos:end="103:36">(<argument pos:start="103:31" pos:end="103:32"><expr pos:start="103:31" pos:end="103:32"><name pos:start="103:31" pos:end="103:32">gb</name></expr></argument>, <argument pos:start="103:35" pos:end="103:35"><expr pos:start="103:35" pos:end="103:35"><literal type="number" pos:start="103:35" pos:end="103:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="143:9"><if pos:start="105:9" pos:end="123:9">if <condition pos:start="105:12" pos:end="105:23">(<expr pos:start="105:13" pos:end="105:22"><name pos:start="105:13" pos:end="105:17"><name pos:start="105:13" pos:end="105:13">v</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:17">pq</name></name> <operator pos:start="105:19" pos:end="105:19">&lt;</operator> <literal type="number" pos:start="105:21" pos:end="105:22">13</literal></expr>)</condition>

        <block pos:start="107:9" pos:end="123:9">{<block_content pos:start="109:13" pos:end="121:13">

            <if_stmt pos:start="109:13" pos:end="121:13"><if pos:start="109:13" pos:end="121:13">if <condition pos:start="109:16" pos:end="109:28">(<expr pos:start="109:17" pos:end="109:27"><operator pos:start="109:17" pos:end="109:17">!</operator><name pos:start="109:18" pos:end="109:27"><name pos:start="109:18" pos:end="109:18">v</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:27">mv_mode</name></name></expr>)</condition>

            <block pos:start="111:13" pos:end="121:13">{<block_content pos:start="113:17" pos:end="119:76">

                <expr_stmt pos:start="113:17" pos:end="113:45"><expr pos:start="113:17" pos:end="113:44"><name pos:start="113:17" pos:end="113:26"><name pos:start="113:17" pos:end="113:17">v</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:26">mv_mode</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <call pos:start="113:30" pos:end="113:44"><name pos:start="113:30" pos:end="113:37">get_bits</name><argument_list pos:start="113:38" pos:end="113:44">(<argument pos:start="113:39" pos:end="113:40"><expr pos:start="113:39" pos:end="113:40"><name pos:start="113:39" pos:end="113:40">gb</name></expr></argument>, <argument pos:start="113:43" pos:end="113:43"><expr pos:start="113:43" pos:end="113:43"><literal type="number" pos:start="113:43" pos:end="113:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="119:76"><if pos:start="115:17" pos:end="119:76">if <condition pos:start="115:20" pos:end="115:31">(<expr pos:start="115:21" pos:end="115:30"><name pos:start="115:21" pos:end="115:30"><name pos:start="115:21" pos:end="115:21">v</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:30">mv_mode</name></name></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="119:76"><block_content pos:start="117:17" pos:end="119:76">

                <expr_stmt pos:start="117:17" pos:end="119:76"><expr pos:start="117:17" pos:end="119:75"><call pos:start="117:17" pos:end="119:75"><name pos:start="117:17" pos:end="117:22">av_log</name><argument_list pos:start="117:23" pos:end="119:75">(<argument pos:start="117:24" pos:end="117:33"><expr pos:start="117:24" pos:end="117:33"><name pos:start="117:24" pos:end="117:33"><name pos:start="117:24" pos:end="117:24">v</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:27">s</name><operator pos:start="117:28" pos:end="117:28">.</operator><name pos:start="117:29" pos:end="117:33">avctx</name></name></expr></argument>, <argument pos:start="117:36" pos:end="117:47"><expr pos:start="117:36" pos:end="117:47"><name pos:start="117:36" pos:end="117:47">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:62"><expr pos:start="119:24" pos:end="119:62"><literal type="string" pos:start="119:24" pos:end="119:62">"mv_mode for lowquant B frame was %i\n"</literal></expr></argument>, <argument pos:start="119:65" pos:end="119:74"><expr pos:start="119:65" pos:end="119:74"><name pos:start="119:65" pos:end="119:74"><name pos:start="119:65" pos:end="119:65">v</name><operator pos:start="119:66" pos:end="119:67">-&gt;</operator><name pos:start="119:68" pos:end="119:74">mv_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>

        <else pos:start="125:9" pos:end="143:9">else

        <block pos:start="127:9" pos:end="143:9">{<block_content pos:start="129:13" pos:end="141:38">

            <if_stmt pos:start="129:13" pos:end="139:13"><if pos:start="129:13" pos:end="139:13">if <condition pos:start="129:16" pos:end="129:28">(<expr pos:start="129:17" pos:end="129:27"><operator pos:start="129:17" pos:end="129:17">!</operator><name pos:start="129:18" pos:end="129:27"><name pos:start="129:18" pos:end="129:18">v</name><operator pos:start="129:19" pos:end="129:20">-&gt;</operator><name pos:start="129:21" pos:end="129:27">mv_mode</name></name></expr>)</condition>

            <block pos:start="131:13" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:82">

                <if_stmt pos:start="133:17" pos:end="137:82"><if pos:start="133:17" pos:end="137:82">if <condition pos:start="133:20" pos:end="133:36">(<expr pos:start="133:21" pos:end="133:35"><call pos:start="133:21" pos:end="133:35"><name pos:start="133:21" pos:end="133:28">get_bits</name><argument_list pos:start="133:29" pos:end="133:35">(<argument pos:start="133:30" pos:end="133:31"><expr pos:start="133:30" pos:end="133:31"><name pos:start="133:30" pos:end="133:31">gb</name></expr></argument>, <argument pos:start="133:34" pos:end="133:34"><expr pos:start="133:34" pos:end="133:34"><literal type="number" pos:start="133:34" pos:end="133:34">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="135:22" pos:end="137:82"><block_content pos:start="135:22" pos:end="137:82">

                     <expr_stmt pos:start="135:22" pos:end="137:82"><expr pos:start="135:22" pos:end="137:81"><call pos:start="135:22" pos:end="137:81"><name pos:start="135:22" pos:end="135:27">av_log</name><argument_list pos:start="135:28" pos:end="137:81">(<argument pos:start="135:29" pos:end="135:38"><expr pos:start="135:29" pos:end="135:38"><name pos:start="135:29" pos:end="135:38"><name pos:start="135:29" pos:end="135:29">v</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:32">s</name><operator pos:start="135:33" pos:end="135:33">.</operator><name pos:start="135:34" pos:end="135:38">avctx</name></name></expr></argument>, <argument pos:start="135:41" pos:end="135:52"><expr pos:start="135:41" pos:end="135:52"><name pos:start="135:41" pos:end="135:52">AV_LOG_ERROR</name></expr></argument>,

                            <argument pos:start="137:29" pos:end="137:68"><expr pos:start="137:29" pos:end="137:68"><literal type="string" pos:start="137:29" pos:end="137:68">"mv_mode for highquant B frame was %i\n"</literal></expr></argument>, <argument pos:start="137:71" pos:end="137:80"><expr pos:start="137:71" pos:end="137:80"><name pos:start="137:71" pos:end="137:80"><name pos:start="137:71" pos:end="137:71">v</name><operator pos:start="137:72" pos:end="137:73">-&gt;</operator><name pos:start="137:74" pos:end="137:80">mv_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:38"><expr pos:start="141:13" pos:end="141:37"><name pos:start="141:13" pos:end="141:22"><name pos:start="141:13" pos:end="141:13">v</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:22">mv_mode</name></name> <operator pos:start="141:24" pos:end="141:24">=</operator> <literal type="number" pos:start="141:26" pos:end="141:27">1</literal><operator pos:start="141:27" pos:end="141:27">-</operator><name pos:start="141:28" pos:end="141:37"><name pos:start="141:28" pos:end="141:28">v</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:37">mv_mode</name></name></expr>;</expr_stmt> <comment type="line" pos:start="141:40" pos:end="141:67">//To match (pq &lt; 13) mapping</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="149:5" pos:end="149:13">return <expr pos:start="149:12" pos:end="149:12"><literal type="number" pos:start="149:12" pos:end="149:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
