<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/875.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">vfio_setup_pcie_cap</name><parameter_list pos:start="1:31" pos:end="1:74">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:44">VFIOPCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">vdev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:59">pos</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:68">uint8_t</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:16">type</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:66"><expr pos:start="11:5" pos:end="11:65"><name pos:start="11:5" pos:end="11:9">flags</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:65"><name pos:start="11:13" pos:end="11:24">pci_get_word</name><argument_list pos:start="11:25" pos:end="11:65">(<argument pos:start="11:26" pos:end="11:64"><expr pos:start="11:26" pos:end="11:64"><name pos:start="11:26" pos:end="11:42"><name pos:start="11:26" pos:end="11:29">vdev</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:35">pdev</name><operator pos:start="11:36" pos:end="11:36">.</operator><name pos:start="11:37" pos:end="11:42">config</name></name> <operator pos:start="11:44" pos:end="11:44">+</operator> <name pos:start="11:46" pos:end="11:48">pos</name> <operator pos:start="11:50" pos:end="11:50">+</operator> <name pos:start="11:52" pos:end="11:64">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:8">type</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:17">flags</name> <operator pos:start="13:19" pos:end="13:19">&amp;</operator> <name pos:start="13:21" pos:end="13:38">PCI_EXP_FLAGS_TYPE</name><operator pos:start="13:39" pos:end="13:39">)</operator> <operator pos:start="13:41" pos:end="13:42">&gt;&gt;</operator> <literal type="number" pos:start="13:44" pos:end="13:44">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="21:36">(<expr pos:start="17:9" pos:end="21:35"><name pos:start="17:9" pos:end="17:12">type</name> <operator pos:start="17:14" pos:end="17:15">!=</operator> <name pos:start="17:17" pos:end="17:37">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="17:39" pos:end="17:40">&amp;&amp;</operator>

        <name pos:start="19:9" pos:end="19:12">type</name> <operator pos:start="19:14" pos:end="19:15">!=</operator> <name pos:start="19:17" pos:end="19:36">PCI_EXP_TYPE_LEG_END</name> <operator pos:start="19:38" pos:end="19:39">&amp;&amp;</operator>

        <name pos:start="21:9" pos:end="21:12">type</name> <operator pos:start="21:14" pos:end="21:15">!=</operator> <name pos:start="21:17" pos:end="21:35">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="21:38" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:23">



        <expr_stmt pos:start="25:9" pos:end="27:65"><expr pos:start="25:9" pos:end="27:64"><call pos:start="25:9" pos:end="27:64"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="27:64">(<argument pos:start="25:22" pos:end="27:57"><expr pos:start="25:22" pos:end="27:57"><literal type="string" pos:start="25:22" pos:end="25:58">"vfio: Assignment of PCIe type 0x%x "</literal>

                     <literal type="string" pos:start="27:22" pos:end="27:57">"devices is not currently supported"</literal></expr></argument>, <argument pos:start="27:60" pos:end="27:63"><expr pos:start="27:60" pos:end="27:63"><name pos:start="27:60" pos:end="27:63">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="165:5"><if pos:start="35:5" pos:end="51:5">if <condition pos:start="35:8" pos:end="35:44">(<expr pos:start="35:9" pos:end="35:43"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:43"><name pos:start="35:10" pos:end="35:27">pci_bus_is_express</name><argument_list pos:start="35:28" pos:end="35:43">(<argument pos:start="35:29" pos:end="35:42"><expr pos:start="35:29" pos:end="35:42"><name pos:start="35:29" pos:end="35:42"><name pos:start="35:29" pos:end="35:32">vdev</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:38">pdev</name><operator pos:start="35:39" pos:end="35:39">.</operator><name pos:start="35:40" pos:end="35:42">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:46" pos:end="51:5">{<block_content>

        <comment type="block" pos:start="37:9" pos:end="49:11">/*

         * Use express capability as-is on PCI bus.  It doesn't make much

         * sense to even expose, but some drivers (ex. tg3) depend on it

         * and guests don't seem to be particular about it.  We'll need

         * to revist this or force express devices to express buses if we

         * ever expose an IOMMU to the guest.

         */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="51:7" pos:end="127:5">else if <condition pos:start="51:15" pos:end="51:47">(<expr pos:start="51:16" pos:end="51:46"><call pos:start="51:16" pos:end="51:46"><name pos:start="51:16" pos:end="51:30">pci_bus_is_root</name><argument_list pos:start="51:31" pos:end="51:46">(<argument pos:start="51:32" pos:end="51:45"><expr pos:start="51:32" pos:end="51:45"><name pos:start="51:32" pos:end="51:45"><name pos:start="51:32" pos:end="51:35">vdev</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:41">pdev</name><operator pos:start="51:42" pos:end="51:42">.</operator><name pos:start="51:43" pos:end="51:45">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:49" pos:end="127:5">{<block_content pos:start="61:9" pos:end="123:9">

        <comment type="block" pos:start="53:9" pos:end="59:11">/*

         * On a Root Complex bus Endpoints become Root Complex Integrated

         * Endpoints, which changes the type and clears the LNK &amp; LNK2 fields.

         */</comment>

        <if_stmt pos:start="61:9" pos:end="123:9"><if pos:start="61:9" pos:end="111:9">if <condition pos:start="61:12" pos:end="61:42">(<expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:16">type</name> <operator pos:start="61:18" pos:end="61:19">==</operator> <name pos:start="61:21" pos:end="61:41">PCI_EXP_TYPE_ENDPOINT</name></expr>)</condition> <block pos:start="61:44" pos:end="111:9">{<block_content pos:start="63:13" pos:end="107:13">

            <expr_stmt pos:start="63:13" pos:end="67:55"><expr pos:start="63:13" pos:end="67:54"><call pos:start="63:13" pos:end="67:54"><name pos:start="63:13" pos:end="63:34">vfio_add_emulated_word</name><argument_list pos:start="63:35" pos:end="67:54">(<argument pos:start="63:36" pos:end="63:39"><expr pos:start="63:36" pos:end="63:39"><name pos:start="63:36" pos:end="63:39">vdev</name></expr></argument>, <argument pos:start="63:42" pos:end="63:60"><expr pos:start="63:42" pos:end="63:60"><name pos:start="63:42" pos:end="63:44">pos</name> <operator pos:start="63:46" pos:end="63:46">+</operator> <name pos:start="63:48" pos:end="63:60">PCI_CAP_FLAGS</name></expr></argument>,

                                   <argument pos:start="65:36" pos:end="65:59"><expr pos:start="65:36" pos:end="65:59"><name pos:start="65:36" pos:end="65:54">PCI_EXP_TYPE_RC_END</name> <operator pos:start="65:56" pos:end="65:57">&lt;&lt;</operator> <literal type="number" pos:start="65:59" pos:end="65:59">4</literal></expr></argument>,

                                   <argument pos:start="67:36" pos:end="67:53"><expr pos:start="67:36" pos:end="67:53"><name pos:start="67:36" pos:end="67:53">PCI_EXP_FLAGS_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="71:13" pos:end="71:66">/* Link Capabilities, Status, and Control goes away */</comment>

            <if_stmt pos:start="73:13" pos:end="107:13"><if pos:start="73:13" pos:end="107:13">if <condition pos:start="73:16" pos:end="73:38">(<expr pos:start="73:17" pos:end="73:37"><name pos:start="73:17" pos:end="73:20">size</name> <operator pos:start="73:22" pos:end="73:22">&gt;</operator> <name pos:start="73:24" pos:end="73:37">PCI_EXP_LNKCTL</name></expr>)</condition> <block pos:start="73:40" pos:end="107:13">{<block_content pos:start="75:17" pos:end="105:17">

                <expr_stmt pos:start="75:17" pos:end="75:74"><expr pos:start="75:17" pos:end="75:73"><call pos:start="75:17" pos:end="75:73"><name pos:start="75:17" pos:end="75:38">vfio_add_emulated_long</name><argument_list pos:start="75:39" pos:end="75:73">(<argument pos:start="75:40" pos:end="75:43"><expr pos:start="75:40" pos:end="75:43"><name pos:start="75:40" pos:end="75:43">vdev</name></expr></argument>, <argument pos:start="75:46" pos:end="75:65"><expr pos:start="75:46" pos:end="75:65"><name pos:start="75:46" pos:end="75:48">pos</name> <operator pos:start="75:50" pos:end="75:50">+</operator> <name pos:start="75:52" pos:end="75:65">PCI_EXP_LNKCAP</name></expr></argument>, <argument pos:start="75:68" pos:end="75:68"><expr pos:start="75:68" pos:end="75:68"><literal type="number" pos:start="75:68" pos:end="75:68">0</literal></expr></argument>, <argument pos:start="75:71" pos:end="75:72"><expr pos:start="75:71" pos:end="75:72"><operator pos:start="75:71" pos:end="75:71">~</operator><literal type="number" pos:start="75:72" pos:end="75:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:74"><expr pos:start="77:17" pos:end="77:73"><call pos:start="77:17" pos:end="77:73"><name pos:start="77:17" pos:end="77:38">vfio_add_emulated_word</name><argument_list pos:start="77:39" pos:end="77:73">(<argument pos:start="77:40" pos:end="77:43"><expr pos:start="77:40" pos:end="77:43"><name pos:start="77:40" pos:end="77:43">vdev</name></expr></argument>, <argument pos:start="77:46" pos:end="77:65"><expr pos:start="77:46" pos:end="77:65"><name pos:start="77:46" pos:end="77:48">pos</name> <operator pos:start="77:50" pos:end="77:50">+</operator> <name pos:start="77:52" pos:end="77:65">PCI_EXP_LNKCTL</name></expr></argument>, <argument pos:start="77:68" pos:end="77:68"><expr pos:start="77:68" pos:end="77:68"><literal type="number" pos:start="77:68" pos:end="77:68">0</literal></expr></argument>, <argument pos:start="77:71" pos:end="77:72"><expr pos:start="77:71" pos:end="77:72"><operator pos:start="77:71" pos:end="77:71">~</operator><literal type="number" pos:start="77:72" pos:end="77:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="94:0"><expr pos:start="79:17" pos:end="79:73"><call pos:start="79:17" pos:end="79:73"><name pos:start="79:17" pos:end="79:38">vfio_add_emulated_word</name><argument_list pos:start="79:39" pos:end="79:73">(<argument pos:start="79:40" pos:end="79:43"><expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:43">vdev</name></expr></argument>, <argument pos:start="79:46" pos:end="79:65"><expr pos:start="79:46" pos:end="79:65"><name pos:start="79:46" pos:end="79:48">pos</name> <operator pos:start="79:50" pos:end="79:50">+</operator> <name pos:start="79:52" pos:end="79:65">PCI_EXP_LNKSTA</name></expr></argument>, <argument pos:start="79:68" pos:end="79:68"><expr pos:start="79:68" pos:end="79:68"><literal type="number" pos:start="79:68" pos:end="79:68">0</literal></expr></argument>, <argument pos:start="79:71" pos:end="79:72"><expr pos:start="79:71" pos:end="79:72"><operator pos:start="79:71" pos:end="79:71">~</operator><literal type="number" pos:start="79:72" pos:end="79:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="83:1" pos:end="83:23">#<cpp:directive pos:start="83:2" pos:end="83:7">ifndef</cpp:directive> <name pos:start="83:9" pos:end="83:23">PCI_EXP_LNKCAP2</name></cpp:ifndef>

<cpp:define pos:start="85:1" pos:end="85:26">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:23">PCI_EXP_LNKCAP2</name></cpp:macro> <cpp:value pos:start="85:25" pos:end="85:26">44</cpp:value></cpp:define>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="89:1" pos:end="89:23">#<cpp:directive pos:start="89:2" pos:end="89:7">ifndef</cpp:directive> <name pos:start="89:9" pos:end="89:23">PCI_EXP_LNKSTA2</name></cpp:ifndef>

<cpp:define pos:start="91:1" pos:end="91:26">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:23">PCI_EXP_LNKSTA2</name></cpp:macro> <cpp:value pos:start="91:25" pos:end="91:26">50</cpp:value></cpp:define>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

                <comment type="block" pos:start="95:17" pos:end="95:72">/* Link 2 Capabilities, Status, and Control goes away */</comment>

                <if_stmt pos:start="97:17" pos:end="105:17"><if pos:start="97:17" pos:end="105:17">if <condition pos:start="97:20" pos:end="97:43">(<expr pos:start="97:21" pos:end="97:42"><name pos:start="97:21" pos:end="97:24">size</name> <operator pos:start="97:26" pos:end="97:26">&gt;</operator> <name pos:start="97:28" pos:end="97:42">PCI_EXP_LNKCAP2</name></expr>)</condition> <block pos:start="97:45" pos:end="105:17">{<block_content pos:start="99:21" pos:end="103:79">

                    <expr_stmt pos:start="99:21" pos:end="99:79"><expr pos:start="99:21" pos:end="99:78"><call pos:start="99:21" pos:end="99:78"><name pos:start="99:21" pos:end="99:42">vfio_add_emulated_long</name><argument_list pos:start="99:43" pos:end="99:78">(<argument pos:start="99:44" pos:end="99:47"><expr pos:start="99:44" pos:end="99:47"><name pos:start="99:44" pos:end="99:47">vdev</name></expr></argument>, <argument pos:start="99:50" pos:end="99:70"><expr pos:start="99:50" pos:end="99:70"><name pos:start="99:50" pos:end="99:52">pos</name> <operator pos:start="99:54" pos:end="99:54">+</operator> <name pos:start="99:56" pos:end="99:70">PCI_EXP_LNKCAP2</name></expr></argument>, <argument pos:start="99:73" pos:end="99:73"><expr pos:start="99:73" pos:end="99:73"><literal type="number" pos:start="99:73" pos:end="99:73">0</literal></expr></argument>, <argument pos:start="99:76" pos:end="99:77"><expr pos:start="99:76" pos:end="99:77"><operator pos:start="99:76" pos:end="99:76">~</operator><literal type="number" pos:start="99:77" pos:end="99:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:79"><expr pos:start="101:21" pos:end="101:78"><call pos:start="101:21" pos:end="101:78"><name pos:start="101:21" pos:end="101:42">vfio_add_emulated_word</name><argument_list pos:start="101:43" pos:end="101:78">(<argument pos:start="101:44" pos:end="101:47"><expr pos:start="101:44" pos:end="101:47"><name pos:start="101:44" pos:end="101:47">vdev</name></expr></argument>, <argument pos:start="101:50" pos:end="101:70"><expr pos:start="101:50" pos:end="101:70"><name pos:start="101:50" pos:end="101:52">pos</name> <operator pos:start="101:54" pos:end="101:54">+</operator> <name pos:start="101:56" pos:end="101:70">PCI_EXP_LNKCTL2</name></expr></argument>, <argument pos:start="101:73" pos:end="101:73"><expr pos:start="101:73" pos:end="101:73"><literal type="number" pos:start="101:73" pos:end="101:73">0</literal></expr></argument>, <argument pos:start="101:76" pos:end="101:77"><expr pos:start="101:76" pos:end="101:77"><operator pos:start="101:76" pos:end="101:76">~</operator><literal type="number" pos:start="101:77" pos:end="101:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:79"><expr pos:start="103:21" pos:end="103:78"><call pos:start="103:21" pos:end="103:78"><name pos:start="103:21" pos:end="103:42">vfio_add_emulated_word</name><argument_list pos:start="103:43" pos:end="103:78">(<argument pos:start="103:44" pos:end="103:47"><expr pos:start="103:44" pos:end="103:47"><name pos:start="103:44" pos:end="103:47">vdev</name></expr></argument>, <argument pos:start="103:50" pos:end="103:70"><expr pos:start="103:50" pos:end="103:70"><name pos:start="103:50" pos:end="103:52">pos</name> <operator pos:start="103:54" pos:end="103:54">+</operator> <name pos:start="103:56" pos:end="103:70">PCI_EXP_LNKSTA2</name></expr></argument>, <argument pos:start="103:73" pos:end="103:73"><expr pos:start="103:73" pos:end="103:73"><literal type="number" pos:start="103:73" pos:end="103:73">0</literal></expr></argument>, <argument pos:start="103:76" pos:end="103:77"><expr pos:start="103:76" pos:end="103:77"><operator pos:start="103:76" pos:end="103:76">~</operator><literal type="number" pos:start="103:77" pos:end="103:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="123:9">else if <condition pos:start="111:19" pos:end="111:48">(<expr pos:start="111:20" pos:end="111:47"><name pos:start="111:20" pos:end="111:23">type</name> <operator pos:start="111:25" pos:end="111:26">==</operator> <name pos:start="111:28" pos:end="111:47">PCI_EXP_TYPE_LEG_END</name></expr>)</condition> <block pos:start="111:50" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:21">

            <comment type="block" pos:start="113:13" pos:end="119:15">/*

             * Legacy endpoints don't belong on the root complex.  Windows

             * seems to be happier with devices if we skip the capability.

             */</comment>

            <return pos:start="121:13" pos:end="121:21">return <expr pos:start="121:20" pos:end="121:20"><literal type="number" pos:start="121:20" pos:end="121:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <else pos:start="127:7" pos:end="165:5">else <block pos:start="127:12" pos:end="165:5">{<block_content pos:start="137:9" pos:end="163:72">

        <comment type="block" pos:start="129:9" pos:end="135:11">/*

         * Convert Root Complex Integrated Endpoints to regular endpoints.

         * These devices don't support LNK/LNK2 capabilities, so make them up.

         */</comment>

        <if_stmt pos:start="137:9" pos:end="151:9"><if pos:start="137:9" pos:end="151:9">if <condition pos:start="137:12" pos:end="137:40">(<expr pos:start="137:13" pos:end="137:39"><name pos:start="137:13" pos:end="137:16">type</name> <operator pos:start="137:18" pos:end="137:19">==</operator> <name pos:start="137:21" pos:end="137:39">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="137:42" pos:end="151:9">{<block_content pos:start="139:13" pos:end="149:70">

            <expr_stmt pos:start="139:13" pos:end="143:55"><expr pos:start="139:13" pos:end="143:54"><call pos:start="139:13" pos:end="143:54"><name pos:start="139:13" pos:end="139:34">vfio_add_emulated_word</name><argument_list pos:start="139:35" pos:end="143:54">(<argument pos:start="139:36" pos:end="139:39"><expr pos:start="139:36" pos:end="139:39"><name pos:start="139:36" pos:end="139:39">vdev</name></expr></argument>, <argument pos:start="139:42" pos:end="139:60"><expr pos:start="139:42" pos:end="139:60"><name pos:start="139:42" pos:end="139:44">pos</name> <operator pos:start="139:46" pos:end="139:46">+</operator> <name pos:start="139:48" pos:end="139:60">PCI_CAP_FLAGS</name></expr></argument>,

                                   <argument pos:start="141:36" pos:end="141:61"><expr pos:start="141:36" pos:end="141:61"><name pos:start="141:36" pos:end="141:56">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="141:58" pos:end="141:59">&lt;&lt;</operator> <literal type="number" pos:start="141:61" pos:end="141:61">4</literal></expr></argument>,

                                   <argument pos:start="143:36" pos:end="143:53"><expr pos:start="143:36" pos:end="143:53"><name pos:start="143:36" pos:end="143:53">PCI_EXP_FLAGS_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="147:78"><expr pos:start="145:13" pos:end="147:77"><call pos:start="145:13" pos:end="147:77"><name pos:start="145:13" pos:end="145:34">vfio_add_emulated_long</name><argument_list pos:start="145:35" pos:end="147:77">(<argument pos:start="145:36" pos:end="145:39"><expr pos:start="145:36" pos:end="145:39"><name pos:start="145:36" pos:end="145:39">vdev</name></expr></argument>, <argument pos:start="145:42" pos:end="145:61"><expr pos:start="145:42" pos:end="145:61"><name pos:start="145:42" pos:end="145:44">pos</name> <operator pos:start="145:46" pos:end="145:46">+</operator> <name pos:start="145:48" pos:end="145:61">PCI_EXP_LNKCAP</name></expr></argument>,

                                   <argument pos:start="147:36" pos:end="147:72"><expr pos:start="147:36" pos:end="147:72"><name pos:start="147:36" pos:end="147:52">PCI_EXP_LNK_MLW_1</name> <operator pos:start="147:54" pos:end="147:54">|</operator> <name pos:start="147:56" pos:end="147:72">PCI_EXP_LNK_LS_25</name></expr></argument>, <argument pos:start="147:75" pos:end="147:76"><expr pos:start="147:75" pos:end="147:76"><operator pos:start="147:75" pos:end="147:75">~</operator><literal type="number" pos:start="147:76" pos:end="147:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:70"><expr pos:start="149:13" pos:end="149:69"><call pos:start="149:13" pos:end="149:69"><name pos:start="149:13" pos:end="149:34">vfio_add_emulated_word</name><argument_list pos:start="149:35" pos:end="149:69">(<argument pos:start="149:36" pos:end="149:39"><expr pos:start="149:36" pos:end="149:39"><name pos:start="149:36" pos:end="149:39">vdev</name></expr></argument>, <argument pos:start="149:42" pos:end="149:61"><expr pos:start="149:42" pos:end="149:61"><name pos:start="149:42" pos:end="149:44">pos</name> <operator pos:start="149:46" pos:end="149:46">+</operator> <name pos:start="149:48" pos:end="149:61">PCI_EXP_LNKCTL</name></expr></argument>, <argument pos:start="149:64" pos:end="149:64"><expr pos:start="149:64" pos:end="149:64"><literal type="number" pos:start="149:64" pos:end="149:64">0</literal></expr></argument>, <argument pos:start="149:67" pos:end="149:68"><expr pos:start="149:67" pos:end="149:68"><operator pos:start="149:67" pos:end="149:67">~</operator><literal type="number" pos:start="149:68" pos:end="149:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="155:9" pos:end="155:80">/* Mark the Link Status bits as emulated to allow virtual negotiation */</comment>

        <expr_stmt pos:start="157:9" pos:end="163:72"><expr pos:start="157:9" pos:end="163:71"><call pos:start="157:9" pos:end="163:71"><name pos:start="157:9" pos:end="157:30">vfio_add_emulated_word</name><argument_list pos:start="157:31" pos:end="163:71">(<argument pos:start="157:32" pos:end="157:35"><expr pos:start="157:32" pos:end="157:35"><name pos:start="157:32" pos:end="157:35">vdev</name></expr></argument>, <argument pos:start="157:38" pos:end="157:57"><expr pos:start="157:38" pos:end="157:57"><name pos:start="157:38" pos:end="157:40">pos</name> <operator pos:start="157:42" pos:end="157:42">+</operator> <name pos:start="157:44" pos:end="157:57">PCI_EXP_LNKSTA</name></expr></argument>,

                               <argument pos:start="159:32" pos:end="161:59"><expr pos:start="159:32" pos:end="161:59"><call pos:start="159:32" pos:end="161:59"><name pos:start="159:32" pos:end="159:43">pci_get_word</name><argument_list pos:start="159:44" pos:end="161:59">(<argument pos:start="159:45" pos:end="161:58"><expr pos:start="159:45" pos:end="161:58"><name pos:start="159:45" pos:end="159:61"><name pos:start="159:45" pos:end="159:48">vdev</name><operator pos:start="159:49" pos:end="159:50">-&gt;</operator><name pos:start="159:51" pos:end="159:54">pdev</name><operator pos:start="159:55" pos:end="159:55">.</operator><name pos:start="159:56" pos:end="159:61">config</name></name> <operator pos:start="159:63" pos:end="159:63">+</operator> <name pos:start="159:65" pos:end="159:67">pos</name> <operator pos:start="159:69" pos:end="159:69">+</operator>

                                            <name pos:start="161:45" pos:end="161:58">PCI_EXP_LNKSTA</name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="163:32" pos:end="163:70"><expr pos:start="163:32" pos:end="163:70"><name pos:start="163:32" pos:end="163:49">PCI_EXP_LNKCAP_MLW</name> <operator pos:start="163:51" pos:end="163:51">|</operator> <name pos:start="163:53" pos:end="163:70">PCI_EXP_LNKCAP_SLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:69"><expr pos:start="169:5" pos:end="169:68"><name pos:start="169:5" pos:end="169:7">pos</name> <operator pos:start="169:9" pos:end="169:9">=</operator> <call pos:start="169:11" pos:end="169:68"><name pos:start="169:11" pos:end="169:28">pci_add_capability</name><argument_list pos:start="169:29" pos:end="169:68">(<argument pos:start="169:30" pos:end="169:40"><expr pos:start="169:30" pos:end="169:40"><operator pos:start="169:30" pos:end="169:30">&amp;</operator><name pos:start="169:31" pos:end="169:40"><name pos:start="169:31" pos:end="169:34">vdev</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:40">pdev</name></name></expr></argument>, <argument pos:start="169:43" pos:end="169:56"><expr pos:start="169:43" pos:end="169:56"><name pos:start="169:43" pos:end="169:56">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="169:59" pos:end="169:61"><expr pos:start="169:59" pos:end="169:61"><name pos:start="169:59" pos:end="169:61">pos</name></expr></argument>, <argument pos:start="169:64" pos:end="169:67"><expr pos:start="169:64" pos:end="169:67"><name pos:start="169:64" pos:end="169:67">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="175:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:17">(<expr pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:11">pos</name> <operator pos:start="171:13" pos:end="171:14">&gt;=</operator> <literal type="number" pos:start="171:16" pos:end="171:16">0</literal></expr>)</condition> <block pos:start="171:19" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:37">

        <expr_stmt pos:start="173:9" pos:end="173:37"><expr pos:start="173:9" pos:end="173:36"><name pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:12">vdev</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:18">pdev</name><operator pos:start="173:19" pos:end="173:19">.</operator><name pos:start="173:20" pos:end="173:22">exp</name><operator pos:start="173:23" pos:end="173:23">.</operator><name pos:start="173:24" pos:end="173:30">exp_cap</name></name> <operator pos:start="173:32" pos:end="173:32">=</operator> <name pos:start="173:34" pos:end="173:36">pos</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="179:5" pos:end="179:15">return <expr pos:start="179:12" pos:end="179:14"><name pos:start="179:12" pos:end="179:14">pos</name></expr>;</return>

</block_content>}</block></function>
</unit>
