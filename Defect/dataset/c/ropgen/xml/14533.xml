<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14533.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:13">SocketAddress</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:27">socket_parse</name><parameter_list pos:start="1:28" pos:end="1:58">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:38">char</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">str</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:50">Error</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SocketAddress</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">addr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:36"><expr pos:start="9:5" pos:end="9:35"><name pos:start="9:5" pos:end="9:8">addr</name> <operator pos:start="9:10" pos:end="9:10">=</operator> <call pos:start="9:12" pos:end="9:35"><name pos:start="9:12" pos:end="9:17">g_new0</name><argument_list pos:start="9:18" pos:end="9:35">(<argument pos:start="9:19" pos:end="9:31"><expr pos:start="9:19" pos:end="9:31"><name pos:start="9:19" pos:end="9:31">SocketAddress</name></expr></argument>, <argument pos:start="9:34" pos:end="9:34"><expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="71:5"><if pos:start="11:5" pos:end="29:5">if <condition pos:start="11:8" pos:end="11:37">(<expr pos:start="11:9" pos:end="11:36"><call pos:start="11:9" pos:end="11:36"><name pos:start="11:9" pos:end="11:16">strstart</name><argument_list pos:start="11:17" pos:end="11:36">(<argument pos:start="11:18" pos:end="11:20"><expr pos:start="11:18" pos:end="11:20"><name pos:start="11:18" pos:end="11:20">str</name></expr></argument>, <argument pos:start="11:23" pos:end="11:29"><expr pos:start="11:23" pos:end="11:29"><literal type="string" pos:start="11:23" pos:end="11:29">"unix:"</literal></expr></argument>, <argument pos:start="11:32" pos:end="11:35"><expr pos:start="11:32" pos:end="11:35"><name pos:start="11:32" pos:end="11:35">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:39" pos:end="29:5">{<block_content pos:start="13:9" pos:end="27:9">

        <if_stmt pos:start="13:9" pos:end="27:9"><if pos:start="13:9" pos:end="19:9">if <condition pos:start="13:12" pos:end="13:27">(<expr pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:15">str</name><index pos:start="13:16" pos:end="13:18">[<expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">5</literal></expr>]</index></name> <operator pos:start="13:20" pos:end="13:21">==</operator> <literal type="char" pos:start="13:23" pos:end="13:26">'\0'</literal></expr>)</condition> <block pos:start="13:29" pos:end="19:9">{<block_content pos:start="15:13" pos:end="17:22">

            <expr_stmt pos:start="15:13" pos:end="15:60"><expr pos:start="15:13" pos:end="15:59"><call pos:start="15:13" pos:end="15:59"><name pos:start="15:13" pos:end="15:22">error_setg</name><argument_list pos:start="15:23" pos:end="15:59">(<argument pos:start="15:24" pos:end="15:27"><expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">errp</name></expr></argument>, <argument pos:start="15:30" pos:end="15:58"><expr pos:start="15:30" pos:end="15:58"><literal type="string" pos:start="15:30" pos:end="15:58">"invalid Unix socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="17:13" pos:end="17:22">goto <name pos:start="17:18" pos:end="17:21">fail</name>;</goto>

        </block_content>}</block></if> <else pos:start="19:11" pos:end="27:9">else <block pos:start="19:16" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:58">

            <expr_stmt pos:start="21:13" pos:end="21:50"><expr pos:start="21:13" pos:end="21:49"><name pos:start="21:13" pos:end="21:22"><name pos:start="21:13" pos:end="21:16">addr</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:22">type</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <name pos:start="21:26" pos:end="21:49">SOCKET_ADDRESS_KIND_UNIX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:62"><expr pos:start="23:13" pos:end="23:61"><name pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:16">addr</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:19">u</name><operator pos:start="23:20" pos:end="23:20">.</operator><name pos:start="23:21" pos:end="23:26">q_unix</name><operator pos:start="23:27" pos:end="23:27">.</operator><name pos:start="23:28" pos:end="23:31">data</name></name> <operator pos:start="23:33" pos:end="23:33">=</operator> <call pos:start="23:35" pos:end="23:61"><name pos:start="23:35" pos:end="23:39">g_new</name><argument_list pos:start="23:40" pos:end="23:61">(<argument pos:start="23:41" pos:end="23:57"><expr pos:start="23:41" pos:end="23:57"><name pos:start="23:41" pos:end="23:57">UnixSocketAddress</name></expr></argument>, <argument pos:start="23:60" pos:end="23:60"><expr pos:start="23:60" pos:end="23:60"><literal type="number" pos:start="23:60" pos:end="23:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:58"><expr pos:start="25:13" pos:end="25:57"><name pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:16">addr</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:19">u</name><operator pos:start="25:20" pos:end="25:20">.</operator><name pos:start="25:21" pos:end="25:26">q_unix</name><operator pos:start="25:27" pos:end="25:27">.</operator><name pos:start="25:28" pos:end="25:31">data</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:37">path</name></name> <operator pos:start="25:39" pos:end="25:39">=</operator> <call pos:start="25:41" pos:end="25:57"><name pos:start="25:41" pos:end="25:48">g_strdup</name><argument_list pos:start="25:49" pos:end="25:57">(<argument pos:start="25:50" pos:end="25:56"><expr pos:start="25:50" pos:end="25:56"><name pos:start="25:50" pos:end="25:52">str</name> <operator pos:start="25:54" pos:end="25:54">+</operator> <literal type="number" pos:start="25:56" pos:end="25:56">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="47:5">else if <condition pos:start="29:15" pos:end="29:42">(<expr pos:start="29:16" pos:end="29:41"><call pos:start="29:16" pos:end="29:41"><name pos:start="29:16" pos:end="29:23">strstart</name><argument_list pos:start="29:24" pos:end="29:41">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">str</name></expr></argument>, <argument pos:start="29:30" pos:end="29:34"><expr pos:start="29:30" pos:end="29:34"><literal type="string" pos:start="29:30" pos:end="29:34">"fd:"</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:40"><expr pos:start="29:37" pos:end="29:40"><name pos:start="29:37" pos:end="29:40">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:44" pos:end="47:5">{<block_content pos:start="31:9" pos:end="45:9">

        <if_stmt pos:start="31:9" pos:end="45:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:27">(<expr pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:18"><name pos:start="31:13" pos:end="31:15">str</name><index pos:start="31:16" pos:end="31:18">[<expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">3</literal></expr>]</index></name> <operator pos:start="31:20" pos:end="31:21">==</operator> <literal type="char" pos:start="31:23" pos:end="31:26">'\0'</literal></expr>)</condition> <block pos:start="31:29" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:22">

            <expr_stmt pos:start="33:13" pos:end="33:64"><expr pos:start="33:13" pos:end="33:63"><call pos:start="33:13" pos:end="33:63"><name pos:start="33:13" pos:end="33:22">error_setg</name><argument_list pos:start="33:23" pos:end="33:63">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">errp</name></expr></argument>, <argument pos:start="33:30" pos:end="33:62"><expr pos:start="33:30" pos:end="33:62"><literal type="string" pos:start="33:30" pos:end="33:62">"invalid file descriptor address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="35:13" pos:end="35:22">goto <name pos:start="35:18" pos:end="35:21">fail</name>;</goto>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="45:9">else <block pos:start="37:16" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:53">

            <expr_stmt pos:start="39:13" pos:end="39:48"><expr pos:start="39:13" pos:end="39:47"><name pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:16">addr</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:22">type</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:47">SOCKET_ADDRESS_KIND_FD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:47"><expr pos:start="41:13" pos:end="41:46"><name pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:16">addr</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:19">u</name><operator pos:start="41:20" pos:end="41:20">.</operator><name pos:start="41:21" pos:end="41:22">fd</name><operator pos:start="41:23" pos:end="41:23">.</operator><name pos:start="41:24" pos:end="41:27">data</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <call pos:start="41:31" pos:end="41:46"><name pos:start="41:31" pos:end="41:35">g_new</name><argument_list pos:start="41:36" pos:end="41:46">(<argument pos:start="41:37" pos:end="41:42"><expr pos:start="41:37" pos:end="41:42"><name pos:start="41:37" pos:end="41:42">String</name></expr></argument>, <argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><literal type="number" pos:start="41:45" pos:end="41:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:53"><expr pos:start="43:13" pos:end="43:52"><name pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:16">addr</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:19">u</name><operator pos:start="43:20" pos:end="43:20">.</operator><name pos:start="43:21" pos:end="43:22">fd</name><operator pos:start="43:23" pos:end="43:23">.</operator><name pos:start="43:24" pos:end="43:27">data</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:32">str</name></name> <operator pos:start="43:34" pos:end="43:34">=</operator> <call pos:start="43:36" pos:end="43:52"><name pos:start="43:36" pos:end="43:43">g_strdup</name><argument_list pos:start="43:44" pos:end="43:52">(<argument pos:start="43:45" pos:end="43:51"><expr pos:start="43:45" pos:end="43:51"><name pos:start="43:45" pos:end="43:47">str</name> <operator pos:start="43:49" pos:end="43:49">+</operator> <literal type="number" pos:start="43:51" pos:end="43:51">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="59:5">else if <condition pos:start="47:15" pos:end="47:45">(<expr pos:start="47:16" pos:end="47:44"><call pos:start="47:16" pos:end="47:44"><name pos:start="47:16" pos:end="47:23">strstart</name><argument_list pos:start="47:24" pos:end="47:44">(<argument pos:start="47:25" pos:end="47:27"><expr pos:start="47:25" pos:end="47:27"><name pos:start="47:25" pos:end="47:27">str</name></expr></argument>, <argument pos:start="47:30" pos:end="47:37"><expr pos:start="47:30" pos:end="47:37"><literal type="string" pos:start="47:30" pos:end="47:37">"vsock:"</literal></expr></argument>, <argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><name pos:start="47:40" pos:end="47:43">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:47" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <expr_stmt pos:start="49:9" pos:end="49:47"><expr pos:start="49:9" pos:end="49:46"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:12">addr</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:18">type</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:46">SOCKET_ADDRESS_KIND_VSOCK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:58"><expr pos:start="51:9" pos:end="51:57"><name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:12">addr</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:15">u</name><operator pos:start="51:16" pos:end="51:16">.</operator><name pos:start="51:17" pos:end="51:21">vsock</name><operator pos:start="51:22" pos:end="51:22">.</operator><name pos:start="51:23" pos:end="51:26">data</name></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <call pos:start="51:30" pos:end="51:57"><name pos:start="51:30" pos:end="51:34">g_new</name><argument_list pos:start="51:35" pos:end="51:57">(<argument pos:start="51:36" pos:end="51:53"><expr pos:start="51:36" pos:end="51:53"><name pos:start="51:36" pos:end="51:53">VsockSocketAddress</name></expr></argument>, <argument pos:start="51:56" pos:end="51:56"><expr pos:start="51:56" pos:end="51:56"><literal type="number" pos:start="51:56" pos:end="51:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:74">(<expr pos:start="53:13" pos:end="53:73"><call pos:start="53:13" pos:end="53:73"><name pos:start="53:13" pos:end="53:23">vsock_parse</name><argument_list pos:start="53:24" pos:end="53:73">(<argument pos:start="53:25" pos:end="53:42"><expr pos:start="53:25" pos:end="53:42"><name pos:start="53:25" pos:end="53:42"><name pos:start="53:25" pos:end="53:28">addr</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:31">u</name><operator pos:start="53:32" pos:end="53:32">.</operator><name pos:start="53:33" pos:end="53:37">vsock</name><operator pos:start="53:38" pos:end="53:38">.</operator><name pos:start="53:39" pos:end="53:42">data</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:66"><expr pos:start="53:45" pos:end="53:66"><name pos:start="53:45" pos:end="53:47">str</name> <operator pos:start="53:49" pos:end="53:49">+</operator> <call pos:start="53:51" pos:end="53:66"><name pos:start="53:51" pos:end="53:56">strlen</name><argument_list pos:start="53:57" pos:end="53:66">(<argument pos:start="53:58" pos:end="53:65"><expr pos:start="53:58" pos:end="53:65"><literal type="string" pos:start="53:58" pos:end="53:65">"vsock:"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:69" pos:end="53:72"><expr pos:start="53:69" pos:end="53:72"><name pos:start="53:69" pos:end="53:72">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:76" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:22">

            <goto pos:start="55:13" pos:end="55:22">goto <name pos:start="55:18" pos:end="55:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="71:5">else <block pos:start="59:12" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:9">

        <expr_stmt pos:start="61:9" pos:end="61:46"><expr pos:start="61:9" pos:end="61:45"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:12">addr</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:18">type</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:45">SOCKET_ADDRESS_KIND_INET</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:56"><expr pos:start="63:9" pos:end="63:55"><name pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:12">addr</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:15">u</name><operator pos:start="63:16" pos:end="63:16">.</operator><name pos:start="63:17" pos:end="63:20">inet</name><operator pos:start="63:21" pos:end="63:21">.</operator><name pos:start="63:22" pos:end="63:25">data</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <call pos:start="63:29" pos:end="63:55"><name pos:start="63:29" pos:end="63:33">g_new</name><argument_list pos:start="63:34" pos:end="63:55">(<argument pos:start="63:35" pos:end="63:51"><expr pos:start="63:35" pos:end="63:51"><name pos:start="63:35" pos:end="63:51">InetSocketAddress</name></expr></argument>, <argument pos:start="63:54" pos:end="63:54"><expr pos:start="63:54" pos:end="63:54"><literal type="number" pos:start="63:54" pos:end="63:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:53">(<expr pos:start="65:13" pos:end="65:52"><call pos:start="65:13" pos:end="65:52"><name pos:start="65:13" pos:end="65:22">inet_parse</name><argument_list pos:start="65:23" pos:end="65:52">(<argument pos:start="65:24" pos:end="65:40"><expr pos:start="65:24" pos:end="65:40"><name pos:start="65:24" pos:end="65:40"><name pos:start="65:24" pos:end="65:27">addr</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:30">u</name><operator pos:start="65:31" pos:end="65:31">.</operator><name pos:start="65:32" pos:end="65:35">inet</name><operator pos:start="65:36" pos:end="65:36">.</operator><name pos:start="65:37" pos:end="65:40">data</name></name></expr></argument>, <argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><name pos:start="65:43" pos:end="65:45">str</name></expr></argument>, <argument pos:start="65:48" pos:end="65:51"><expr pos:start="65:48" pos:end="65:51"><name pos:start="65:48" pos:end="65:51">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:55" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:22">

            <goto pos:start="67:13" pos:end="67:22">goto <name pos:start="67:18" pos:end="67:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="73:5" pos:end="73:16">return <expr pos:start="73:12" pos:end="73:15"><name pos:start="73:12" pos:end="73:15">addr</name></expr>;</return>



<label pos:start="77:1" pos:end="77:5"><name pos:start="77:1" pos:end="77:4">fail</name>:</label>

    <expr_stmt pos:start="79:5" pos:end="79:34"><expr pos:start="79:5" pos:end="79:33"><call pos:start="79:5" pos:end="79:33"><name pos:start="79:5" pos:end="79:27">qapi_free_SocketAddress</name><argument_list pos:start="79:28" pos:end="79:33">(<argument pos:start="79:29" pos:end="79:32"><expr pos:start="79:29" pos:end="79:32"><name pos:start="79:29" pos:end="79:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="81:5" pos:end="81:16">return <expr pos:start="81:12" pos:end="81:15"><name pos:start="81:12" pos:end="81:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
