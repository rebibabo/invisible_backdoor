<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26698.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">hmp_savevm</name><parameter_list pos:start="1:16" pos:end="1:49">(<parameter pos:start="1:17" pos:end="1:28"><decl pos:start="1:17" pos:end="1:28"><type pos:start="1:17" pos:end="1:28"><name pos:start="1:17" pos:end="1:23">Monitor</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:28">mon</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:41">QDict</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="5:5" pos:end="185:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:30">bs1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">QEMUSnapshotInfo</name></type> <name pos:start="7:22" pos:end="7:24">sn1</name></decl>, <decl pos:start="7:27" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:20"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:29">sn</name> <init pos:start="7:31" pos:end="7:36">= <expr pos:start="7:33" pos:end="7:36"><operator pos:start="7:33" pos:end="7:33">&amp;</operator><name pos:start="7:34" pos:end="7:36">sn1</name></expr></init></decl>, <decl pos:start="7:39" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:20"/><name pos:start="7:39" pos:end="7:45">old_sn1</name></decl>, <decl pos:start="7:48" pos:end="7:65"><type ref="prev" pos:start="7:5" pos:end="7:20"><modifier pos:start="7:48" pos:end="7:48">*</modifier></type><name pos:start="7:49" pos:end="7:54">old_sn</name> <init pos:start="7:56" pos:end="7:65">= <expr pos:start="7:58" pos:end="7:65"><operator pos:start="7:58" pos:end="7:58">&amp;</operator><name pos:start="7:59" pos:end="7:65">old_sn1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QEMUFile</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:24">saved_vm_running</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:26">vm_state_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">qemu_timeval</name></type> <name pos:start="17:18" pos:end="17:19">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:13">tm</name></name></type> <name pos:start="19:15" pos:end="19:16">tm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:56"><decl pos:start="21:5" pos:end="21:55"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:20">name</name> <init pos:start="21:22" pos:end="21:55">= <expr pos:start="21:24" pos:end="21:55"><call pos:start="21:24" pos:end="21:55"><name pos:start="21:24" pos:end="21:40">qdict_get_try_str</name><argument_list pos:start="21:41" pos:end="21:55">(<argument pos:start="21:42" pos:end="21:46"><expr pos:start="21:42" pos:end="21:46"><name pos:start="21:42" pos:end="21:46">qdict</name></expr></argument>, <argument pos:start="21:49" pos:end="21:54"><expr pos:start="21:49" pos:end="21:54"><literal type="string" pos:start="21:49" pos:end="21:54">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:14">AioContext</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:27">aio_context</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:36">(<expr pos:start="29:9" pos:end="29:35"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:35"><name pos:start="29:10" pos:end="29:30">bdrv_all_can_snapshot</name><argument_list pos:start="29:31" pos:end="29:35">(<argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><operator pos:start="29:32" pos:end="29:32">&amp;</operator><name pos:start="29:33" pos:end="29:34">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:38" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="33:73"><expr pos:start="31:9" pos:end="33:72"><call pos:start="31:9" pos:end="33:72"><name pos:start="31:9" pos:end="31:22">monitor_printf</name><argument_list pos:start="31:23" pos:end="33:72">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">mon</name></expr></argument>, <argument pos:start="31:29" pos:end="33:45"><expr pos:start="31:29" pos:end="33:45"><literal type="string" pos:start="31:29" pos:end="31:67">"Device '%s' is writable but does not "</literal>

                       <literal type="string" pos:start="33:24" pos:end="33:45">"support snapshots.\n"</literal></expr></argument>, <argument pos:start="33:48" pos:end="33:71"><expr pos:start="33:48" pos:end="33:71"><call pos:start="33:48" pos:end="33:71"><name pos:start="33:48" pos:end="33:67">bdrv_get_device_name</name><argument_list pos:start="33:68" pos:end="33:71">(<argument pos:start="33:69" pos:end="33:70"><expr pos:start="33:69" pos:end="33:70"><name pos:start="33:69" pos:end="33:70">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:47">/* Delete old snapshots of the same name */</comment>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:69">(<expr pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:12">name</name> <operator pos:start="43:14" pos:end="43:15">&amp;&amp;</operator> <call pos:start="43:17" pos:end="43:64"><name pos:start="43:17" pos:end="43:40">bdrv_all_delete_snapshot</name><argument_list pos:start="43:41" pos:end="43:64">(<argument pos:start="43:42" pos:end="43:45"><expr pos:start="43:42" pos:end="43:45"><name pos:start="43:42" pos:end="43:45">name</name></expr></argument>, <argument pos:start="43:48" pos:end="43:51"><expr pos:start="43:48" pos:end="43:51"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:51">bs1</name></expr></argument>, <argument pos:start="43:54" pos:end="43:63"><expr pos:start="43:54" pos:end="43:63"><operator pos:start="43:54" pos:end="43:54">&amp;</operator><name pos:start="43:55" pos:end="43:63">local_err</name></expr></argument>)</argument_list></call> <operator pos:start="43:66" pos:end="43:66">&lt;</operator> <literal type="number" pos:start="43:68" pos:end="43:68">0</literal></expr>)</condition> <block pos:start="43:71" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:15">

        <expr_stmt pos:start="45:9" pos:end="49:53"><expr pos:start="45:9" pos:end="49:52"><call pos:start="45:9" pos:end="49:52"><name pos:start="45:9" pos:end="45:25">error_reportf_err</name><argument_list pos:start="45:26" pos:end="49:52">(<argument pos:start="45:27" pos:end="45:35"><expr pos:start="45:27" pos:end="45:35"><name pos:start="45:27" pos:end="45:35">local_err</name></expr></argument>,

                          <argument pos:start="47:27" pos:end="47:74"><expr pos:start="47:27" pos:end="47:74"><literal type="string" pos:start="47:27" pos:end="47:74">"Error while deleting snapshot on device '%s': "</literal></expr></argument>,

                          <argument pos:start="49:27" pos:end="49:51"><expr pos:start="49:27" pos:end="49:51"><call pos:start="49:27" pos:end="49:51"><name pos:start="49:27" pos:end="49:46">bdrv_get_device_name</name><argument_list pos:start="49:47" pos:end="49:51">(<argument pos:start="49:48" pos:end="49:50"><expr pos:start="49:48" pos:end="49:50"><name pos:start="49:48" pos:end="49:50">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:36"><expr pos:start="57:5" pos:end="57:35"><name pos:start="57:5" pos:end="57:6">bs</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:35"><name pos:start="57:10" pos:end="57:33">bdrv_all_find_vmstate_bs</name><argument_list pos:start="57:34" pos:end="57:35">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:19">(<expr pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:10">bs</name> <operator pos:start="59:12" pos:end="59:13">==</operator> <name pos:start="59:15" pos:end="59:18">NULL</name></expr>)</condition> <block pos:start="59:21" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:15">

        <expr_stmt pos:start="61:9" pos:end="61:70"><expr pos:start="61:9" pos:end="61:69"><call pos:start="61:9" pos:end="61:69"><name pos:start="61:9" pos:end="61:22">monitor_printf</name><argument_list pos:start="61:23" pos:end="61:69">(<argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">mon</name></expr></argument>, <argument pos:start="61:29" pos:end="61:68"><expr pos:start="61:29" pos:end="61:68"><literal type="string" pos:start="61:29" pos:end="61:68">"No block device can accept snapshots\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:15">aio_context</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:42"><name pos:start="67:19" pos:end="67:38">bdrv_get_aio_context</name><argument_list pos:start="67:39" pos:end="67:42">(<argument pos:start="67:40" pos:end="67:41"><expr pos:start="67:40" pos:end="67:41"><name pos:start="67:40" pos:end="67:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:20">saved_vm_running</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:44"><name pos:start="71:24" pos:end="71:42">runstate_is_running</name><argument_list pos:start="71:43" pos:end="71:44">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:30"><name pos:start="75:11" pos:end="75:28">global_state_store</name><argument_list pos:start="75:29" pos:end="75:30">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:12">(<expr pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">ret</name></expr>)</condition> <block pos:start="77:14" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:15">

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:22">monitor_printf</name><argument_list pos:start="79:23" pos:end="79:58">(<argument pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:26">mon</name></expr></argument>, <argument pos:start="79:29" pos:end="79:57"><expr pos:start="79:29" pos:end="79:57"><literal type="string" pos:start="79:29" pos:end="79:57">"Error saving global state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:31"><expr pos:start="85:5" pos:end="85:30"><call pos:start="85:5" pos:end="85:30"><name pos:start="85:5" pos:end="85:11">vm_stop</name><argument_list pos:start="85:12" pos:end="85:30">(<argument pos:start="85:13" pos:end="85:29"><expr pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:29">RUN_STATE_SAVE_VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><call pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:23">aio_context_acquire</name><argument_list pos:start="89:24" pos:end="89:36">(<argument pos:start="89:25" pos:end="89:35"><expr pos:start="89:25" pos:end="89:35"><name pos:start="89:25" pos:end="89:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:31"><expr pos:start="93:5" pos:end="93:30"><call pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:10">memset</name><argument_list pos:start="93:11" pos:end="93:30">(<argument pos:start="93:12" pos:end="93:13"><expr pos:start="93:12" pos:end="93:13"><name pos:start="93:12" pos:end="93:13">sn</name></expr></argument>, <argument pos:start="93:16" pos:end="93:16"><expr pos:start="93:16" pos:end="93:16"><literal type="number" pos:start="93:16" pos:end="93:16">0</literal></expr></argument>, <argument pos:start="93:19" pos:end="93:29"><expr pos:start="93:19" pos:end="93:29"><sizeof pos:start="93:19" pos:end="93:29">sizeof<argument_list pos:start="93:25" pos:end="93:29">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><operator pos:start="93:26" pos:end="93:26">*</operator><name pos:start="93:27" pos:end="93:28">sn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:31">/* fill auxiliary fields */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><call pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:21">qemu_gettimeofday</name><argument_list pos:start="99:22" pos:end="99:26">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><operator pos:start="99:23" pos:end="99:23">&amp;</operator><name pos:start="99:24" pos:end="99:25">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:16"><name pos:start="101:5" pos:end="101:6">sn</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:16">date_sec</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:28"><name pos:start="101:20" pos:end="101:21">tv</name><operator pos:start="101:22" pos:end="101:22">.</operator><name pos:start="101:23" pos:end="101:28">tv_sec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:38"><expr pos:start="103:5" pos:end="103:37"><name pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:6">sn</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:17">date_nsec</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:30"><name pos:start="103:21" pos:end="103:22">tv</name><operator pos:start="103:23" pos:end="103:23">.</operator><name pos:start="103:24" pos:end="103:30">tv_usec</name></name> <operator pos:start="103:32" pos:end="103:32">*</operator> <literal type="number" pos:start="103:34" pos:end="103:37">1000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:62"><expr pos:start="105:5" pos:end="105:61"><name pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:6">sn</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:21">vm_clock_nsec</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:61"><name pos:start="105:25" pos:end="105:41">qemu_clock_get_ns</name><argument_list pos:start="105:42" pos:end="105:61">(<argument pos:start="105:43" pos:end="105:60"><expr pos:start="105:43" pos:end="105:60"><name pos:start="105:43" pos:end="105:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="133:5"><if pos:start="109:5" pos:end="125:5">if <condition pos:start="109:8" pos:end="109:13">(<expr pos:start="109:9" pos:end="109:12"><name pos:start="109:9" pos:end="109:12">name</name></expr>)</condition> <block pos:start="109:15" pos:end="125:5">{<block_content pos:start="111:9" pos:end="123:9">

        <expr_stmt pos:start="111:9" pos:end="111:51"><expr pos:start="111:9" pos:end="111:50"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:50"><name pos:start="111:15" pos:end="111:32">bdrv_snapshot_find</name><argument_list pos:start="111:33" pos:end="111:50">(<argument pos:start="111:34" pos:end="111:35"><expr pos:start="111:34" pos:end="111:35"><name pos:start="111:34" pos:end="111:35">bs</name></expr></argument>, <argument pos:start="111:38" pos:end="111:43"><expr pos:start="111:38" pos:end="111:43"><name pos:start="111:38" pos:end="111:43">old_sn</name></expr></argument>, <argument pos:start="111:46" pos:end="111:49"><expr pos:start="111:46" pos:end="111:49"><name pos:start="111:46" pos:end="111:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:21">(<expr pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:18">&gt;=</operator> <literal type="number" pos:start="113:20" pos:end="113:20">0</literal></expr>)</condition> <block pos:start="113:23" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:68">

            <expr_stmt pos:start="115:13" pos:end="115:62"><expr pos:start="115:13" pos:end="115:61"><call pos:start="115:13" pos:end="115:61"><name pos:start="115:13" pos:end="115:19">pstrcpy</name><argument_list pos:start="115:20" pos:end="115:61">(<argument pos:start="115:21" pos:end="115:28"><expr pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:22">sn</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:28">name</name></name></expr></argument>, <argument pos:start="115:31" pos:end="115:46"><expr pos:start="115:31" pos:end="115:46"><sizeof pos:start="115:31" pos:end="115:46">sizeof<argument_list pos:start="115:37" pos:end="115:46">(<argument pos:start="115:38" pos:end="115:45"><expr pos:start="115:38" pos:end="115:45"><name pos:start="115:38" pos:end="115:45"><name pos:start="115:38" pos:end="115:39">sn</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="115:49" pos:end="115:60"><expr pos:start="115:49" pos:end="115:60"><name pos:start="115:49" pos:end="115:60"><name pos:start="115:49" pos:end="115:54">old_sn</name><operator pos:start="115:55" pos:end="115:56">-&gt;</operator><name pos:start="115:57" pos:end="115:60">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:68"><expr pos:start="117:13" pos:end="117:67"><call pos:start="117:13" pos:end="117:67"><name pos:start="117:13" pos:end="117:19">pstrcpy</name><argument_list pos:start="117:20" pos:end="117:67">(<argument pos:start="117:21" pos:end="117:30"><expr pos:start="117:21" pos:end="117:30"><name pos:start="117:21" pos:end="117:30"><name pos:start="117:21" pos:end="117:22">sn</name><operator pos:start="117:23" pos:end="117:24">-&gt;</operator><name pos:start="117:25" pos:end="117:30">id_str</name></name></expr></argument>, <argument pos:start="117:33" pos:end="117:50"><expr pos:start="117:33" pos:end="117:50"><sizeof pos:start="117:33" pos:end="117:50">sizeof<argument_list pos:start="117:39" pos:end="117:50">(<argument pos:start="117:40" pos:end="117:49"><expr pos:start="117:40" pos:end="117:49"><name pos:start="117:40" pos:end="117:49"><name pos:start="117:40" pos:end="117:41">sn</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:49">id_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="117:53" pos:end="117:66"><expr pos:start="117:53" pos:end="117:66"><name pos:start="117:53" pos:end="117:66"><name pos:start="117:53" pos:end="117:58">old_sn</name><operator pos:start="117:59" pos:end="117:60">-&gt;</operator><name pos:start="117:61" pos:end="117:66">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="123:9">else <block pos:start="119:16" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:54">

            <expr_stmt pos:start="121:13" pos:end="121:54"><expr pos:start="121:13" pos:end="121:53"><call pos:start="121:13" pos:end="121:53"><name pos:start="121:13" pos:end="121:19">pstrcpy</name><argument_list pos:start="121:20" pos:end="121:53">(<argument pos:start="121:21" pos:end="121:28"><expr pos:start="121:21" pos:end="121:28"><name pos:start="121:21" pos:end="121:28"><name pos:start="121:21" pos:end="121:22">sn</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:28">name</name></name></expr></argument>, <argument pos:start="121:31" pos:end="121:46"><expr pos:start="121:31" pos:end="121:46"><sizeof pos:start="121:31" pos:end="121:46">sizeof<argument_list pos:start="121:37" pos:end="121:46">(<argument pos:start="121:38" pos:end="121:45"><expr pos:start="121:38" pos:end="121:45"><name pos:start="121:38" pos:end="121:45"><name pos:start="121:38" pos:end="121:39">sn</name><operator pos:start="121:40" pos:end="121:41">-&gt;</operator><name pos:start="121:42" pos:end="121:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="121:49" pos:end="121:52"><expr pos:start="121:49" pos:end="121:52"><name pos:start="121:49" pos:end="121:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="125:7" pos:end="133:5">else <block pos:start="125:12" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:69">

        <comment type="block" pos:start="127:9" pos:end="127:72">/* cast below needed for OpenBSD where tv_sec is still 'long' */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:53"><expr pos:start="129:9" pos:end="129:52"><call pos:start="129:9" pos:end="129:52"><name pos:start="129:9" pos:end="129:19">localtime_r</name><argument_list pos:start="129:20" pos:end="129:52">(<argument pos:start="129:21" pos:end="129:46"><expr pos:start="129:21" pos:end="129:46"><operator pos:start="129:21" pos:end="129:21">(</operator><specifier pos:start="129:22" pos:end="129:26">const</specifier> <name pos:start="129:28" pos:end="129:33">time_t</name> <operator pos:start="129:35" pos:end="129:35">*</operator><operator pos:start="129:36" pos:end="129:36">)</operator><operator pos:start="129:37" pos:end="129:37">&amp;</operator><name pos:start="129:38" pos:end="129:46"><name pos:start="129:38" pos:end="129:39">tv</name><operator pos:start="129:40" pos:end="129:40">.</operator><name pos:start="129:41" pos:end="129:46">tv_sec</name></name></expr></argument>, <argument pos:start="129:49" pos:end="129:51"><expr pos:start="129:49" pos:end="129:51"><operator pos:start="129:49" pos:end="129:49">&amp;</operator><name pos:start="129:50" pos:end="129:51">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:69"><expr pos:start="131:9" pos:end="131:68"><call pos:start="131:9" pos:end="131:68"><name pos:start="131:9" pos:end="131:16">strftime</name><argument_list pos:start="131:17" pos:end="131:68">(<argument pos:start="131:18" pos:end="131:25"><expr pos:start="131:18" pos:end="131:25"><name pos:start="131:18" pos:end="131:25"><name pos:start="131:18" pos:end="131:19">sn</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:25">name</name></name></expr></argument>, <argument pos:start="131:28" pos:end="131:43"><expr pos:start="131:28" pos:end="131:43"><sizeof pos:start="131:28" pos:end="131:43">sizeof<argument_list pos:start="131:34" pos:end="131:43">(<argument pos:start="131:35" pos:end="131:42"><expr pos:start="131:35" pos:end="131:42"><name pos:start="131:35" pos:end="131:42"><name pos:start="131:35" pos:end="131:36">sn</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:42">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="131:46" pos:end="131:62"><expr pos:start="131:46" pos:end="131:62"><literal type="string" pos:start="131:46" pos:end="131:62">"vm-%Y%m%d%H%M%S"</literal></expr></argument>, <argument pos:start="131:65" pos:end="131:67"><expr pos:start="131:65" pos:end="131:67"><operator pos:start="131:65" pos:end="131:65">&amp;</operator><name pos:start="131:66" pos:end="131:67">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:27">/* save the VM state */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:31"><expr pos:start="139:5" pos:end="139:30"><name pos:start="139:5" pos:end="139:5">f</name> <operator pos:start="139:7" pos:end="139:7">=</operator> <call pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:23">qemu_fopen_bdrv</name><argument_list pos:start="139:24" pos:end="139:30">(<argument pos:start="139:25" pos:end="139:26"><expr pos:start="139:25" pos:end="139:26"><name pos:start="139:25" pos:end="139:26">bs</name></expr></argument>, <argument pos:start="139:29" pos:end="139:29"><expr pos:start="139:29" pos:end="139:29"><literal type="number" pos:start="139:29" pos:end="139:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:11">(<expr pos:start="141:9" pos:end="141:10"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:10">f</name></expr>)</condition> <block pos:start="141:13" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:21">

        <expr_stmt pos:start="143:9" pos:end="143:62"><expr pos:start="143:9" pos:end="143:61"><call pos:start="143:9" pos:end="143:61"><name pos:start="143:9" pos:end="143:22">monitor_printf</name><argument_list pos:start="143:23" pos:end="143:61">(<argument pos:start="143:24" pos:end="143:26"><expr pos:start="143:24" pos:end="143:26"><name pos:start="143:24" pos:end="143:26">mon</name></expr></argument>, <argument pos:start="143:29" pos:end="143:60"><expr pos:start="143:29" pos:end="143:60"><literal type="string" pos:start="143:29" pos:end="143:60">"Could not open VM state file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:21">goto <name pos:start="145:14" pos:end="145:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:43"><expr pos:start="149:5" pos:end="149:42"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:42"><name pos:start="149:11" pos:end="149:27">qemu_savevm_state</name><argument_list pos:start="149:28" pos:end="149:42">(<argument pos:start="149:29" pos:end="149:29"><expr pos:start="149:29" pos:end="149:29"><name pos:start="149:29" pos:end="149:29">f</name></expr></argument>, <argument pos:start="149:32" pos:end="149:41"><expr pos:start="149:32" pos:end="149:41"><operator pos:start="149:32" pos:end="149:32">&amp;</operator><name pos:start="149:33" pos:end="149:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:34"><expr pos:start="151:5" pos:end="151:33"><name pos:start="151:5" pos:end="151:17">vm_state_size</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <call pos:start="151:21" pos:end="151:33"><name pos:start="151:21" pos:end="151:30">qemu_ftell</name><argument_list pos:start="151:31" pos:end="151:33">(<argument pos:start="151:32" pos:end="151:32"><expr pos:start="151:32" pos:end="151:32"><name pos:start="151:32" pos:end="151:32">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:19"><expr pos:start="153:5" pos:end="153:18"><call pos:start="153:5" pos:end="153:18"><name pos:start="153:5" pos:end="153:15">qemu_fclose</name><argument_list pos:start="153:16" pos:end="153:18">(<argument pos:start="153:17" pos:end="153:17"><expr pos:start="153:17" pos:end="153:17"><name pos:start="153:17" pos:end="153:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:16">(<expr pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">&lt;</operator> <literal type="number" pos:start="155:15" pos:end="155:15">0</literal></expr>)</condition> <block pos:start="155:18" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:21">

        <expr_stmt pos:start="157:9" pos:end="157:36"><expr pos:start="157:9" pos:end="157:35"><call pos:start="157:9" pos:end="157:35"><name pos:start="157:9" pos:end="157:24">error_report_err</name><argument_list pos:start="157:25" pos:end="157:35">(<argument pos:start="157:26" pos:end="157:34"><expr pos:start="157:26" pos:end="157:34"><name pos:start="157:26" pos:end="157:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="159:9" pos:end="159:21">goto <name pos:start="159:14" pos:end="159:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:63"><expr pos:start="165:5" pos:end="165:62"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:62"><name pos:start="165:11" pos:end="165:34">bdrv_all_create_snapshot</name><argument_list pos:start="165:35" pos:end="165:62">(<argument pos:start="165:36" pos:end="165:37"><expr pos:start="165:36" pos:end="165:37"><name pos:start="165:36" pos:end="165:37">sn</name></expr></argument>, <argument pos:start="165:40" pos:end="165:41"><expr pos:start="165:40" pos:end="165:41"><name pos:start="165:40" pos:end="165:41">bs</name></expr></argument>, <argument pos:start="165:44" pos:end="165:56"><expr pos:start="165:44" pos:end="165:56"><name pos:start="165:44" pos:end="165:56">vm_state_size</name></expr></argument>, <argument pos:start="165:59" pos:end="165:61"><expr pos:start="165:59" pos:end="165:61"><operator pos:start="165:59" pos:end="165:59">&amp;</operator><name pos:start="165:60" pos:end="165:61">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">&lt;</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>)</condition> <block pos:start="167:18" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:49">

        <expr_stmt pos:start="169:9" pos:end="171:49"><expr pos:start="169:9" pos:end="171:48"><call pos:start="169:9" pos:end="171:48"><name pos:start="169:9" pos:end="169:22">monitor_printf</name><argument_list pos:start="169:23" pos:end="171:48">(<argument pos:start="169:24" pos:end="169:26"><expr pos:start="169:24" pos:end="169:26"><name pos:start="169:24" pos:end="169:26">mon</name></expr></argument>, <argument pos:start="169:29" pos:end="169:69"><expr pos:start="169:29" pos:end="169:69"><literal type="string" pos:start="169:29" pos:end="169:69">"Error while creating snapshot on '%s'\n"</literal></expr></argument>,

                       <argument pos:start="171:24" pos:end="171:47"><expr pos:start="171:24" pos:end="171:47"><call pos:start="171:24" pos:end="171:47"><name pos:start="171:24" pos:end="171:43">bdrv_get_device_name</name><argument_list pos:start="171:44" pos:end="171:47">(<argument pos:start="171:45" pos:end="171:46"><expr pos:start="171:45" pos:end="171:46"><name pos:start="171:45" pos:end="171:46">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



 <label pos:start="177:2" pos:end="177:9"><name pos:start="177:2" pos:end="177:8">the_end</name>:</label>

    <expr_stmt pos:start="179:5" pos:end="179:37"><expr pos:start="179:5" pos:end="179:36"><call pos:start="179:5" pos:end="179:36"><name pos:start="179:5" pos:end="179:23">aio_context_release</name><argument_list pos:start="179:24" pos:end="179:36">(<argument pos:start="179:25" pos:end="179:35"><expr pos:start="179:25" pos:end="179:35"><name pos:start="179:25" pos:end="179:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="185:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:25">(<expr pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:24">saved_vm_running</name></expr>)</condition> <block pos:start="181:27" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:19">

        <expr_stmt pos:start="183:9" pos:end="183:19"><expr pos:start="183:9" pos:end="183:18"><call pos:start="183:9" pos:end="183:18"><name pos:start="183:9" pos:end="183:16">vm_start</name><argument_list pos:start="183:17" pos:end="183:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
