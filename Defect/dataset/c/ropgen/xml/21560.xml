<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21560.c" pos:tabs="8"><function pos:start="1:1" pos:end="543:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_heathrow_init</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="543:1">{<block_content pos:start="5:5" pos:end="541:52">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:49">= <expr pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:37">machine</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">PowerPCCPU</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">cpu</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUPPCState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">pic</name></decl>, <decl pos:start="25:20" pos:end="25:34"><type ref="prev" pos:start="25:5" pos:end="25:14"><modifier pos:start="25:20" pos:end="25:20">*</modifier><modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:34">heathrow_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">linux_boot</name></decl>, <decl pos:start="27:21" pos:end="27:21"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:21" pos:end="27:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:21">ram</name> <init pos:start="29:23" pos:end="29:46">= <expr pos:start="29:25" pos:end="29:46"><call pos:start="29:25" pos:end="29:46"><name pos:start="29:25" pos:end="29:29">g_new</name><argument_list pos:start="29:30" pos:end="29:46">(<argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">MemoryRegion</name></expr></argument>, <argument pos:start="29:45" pos:end="29:45"><expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:48"><decl pos:start="31:5" pos:end="31:47"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:22">bios</name> <init pos:start="31:24" pos:end="31:47">= <expr pos:start="31:26" pos:end="31:47"><call pos:start="31:26" pos:end="31:47"><name pos:start="31:26" pos:end="31:30">g_new</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:43"><expr pos:start="31:32" pos:end="31:43"><name pos:start="31:32" pos:end="31:43">MemoryRegion</name></expr></argument>, <argument pos:start="31:46" pos:end="31:46"><expr pos:start="31:46" pos:end="31:46"><literal type="number" pos:start="31:46" pos:end="31:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:47"><decl pos:start="33:5" pos:end="33:46"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">isa</name> <init pos:start="33:23" pos:end="33:46">= <expr pos:start="33:25" pos:end="33:46"><call pos:start="33:25" pos:end="33:46"><name pos:start="33:25" pos:end="33:29">g_new</name><argument_list pos:start="33:30" pos:end="33:46">(<argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">MemoryRegion</name></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:56"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint32_t</name></type> <name pos:start="35:14" pos:end="35:24">kernel_base</name></decl>, <decl pos:start="35:27" pos:end="35:37"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:27" pos:end="35:37">initrd_base</name></decl>, <decl pos:start="35:40" pos:end="35:55"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:40" pos:end="35:51">cmdline_base</name> <init pos:start="35:53" pos:end="35:55">= <expr pos:start="35:55" pos:end="35:55"><literal type="number" pos:start="35:55" pos:end="35:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:37"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:11">int32_t</name></type> <name pos:start="37:13" pos:end="37:23">kernel_size</name></decl>, <decl pos:start="37:26" pos:end="37:36"><type ref="prev" pos:start="37:5" pos:end="37:11"/><name pos:start="37:26" pos:end="37:36">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">PCIBus</name> <modifier pos:start="39:12" pos:end="39:12">*</modifier></type><name pos:start="39:13" pos:end="39:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">PCIDevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:20">macio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:17">MACIOIDEState</name> <modifier pos:start="43:19" pos:end="43:19">*</modifier></type><name pos:start="43:20" pos:end="43:28">macio_ide</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:21"><decl pos:start="45:5" pos:end="45:20"><type pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:15">DeviceState</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:22"><decl pos:start="47:5" pos:end="47:21"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">BusState</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:21">adb_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:18"><decl pos:start="49:5" pos:end="49:17"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:26"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:25">pic_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:63"><decl pos:start="53:5" pos:end="53:26"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:26">escc_mem</name></decl>, <decl pos:start="53:29" pos:end="53:62"><type ref="prev" pos:start="53:5" pos:end="53:18"><modifier pos:start="53:29" pos:end="53:29">*</modifier></type><name pos:start="53:30" pos:end="53:37">escc_bar</name> <init pos:start="53:39" pos:end="53:62">= <expr pos:start="53:41" pos:end="53:62"><call pos:start="53:41" pos:end="53:62"><name pos:start="53:41" pos:end="53:45">g_new</name><argument_list pos:start="53:46" pos:end="53:62">(<argument pos:start="53:47" pos:end="53:58"><expr pos:start="53:47" pos:end="53:58"><name pos:start="53:47" pos:end="53:58">MemoryRegion</name></expr></argument>, <argument pos:start="53:61" pos:end="53:61"><expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:29"><decl pos:start="55:5" pos:end="55:28"><type pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:12">uint16_t</name></type> <name pos:start="55:14" pos:end="55:28">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:46"><decl pos:start="57:5" pos:end="57:45"><type pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">DriveInfo</name> <modifier pos:start="57:15" pos:end="57:15">*</modifier></type><name pos:start="57:16" pos:end="57:45"><name pos:start="57:16" pos:end="57:17">hd</name><index pos:start="57:18" pos:end="57:45">[<expr pos:start="57:19" pos:end="57:44"><name pos:start="57:19" pos:end="57:29">MAX_IDE_BUS</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <name pos:start="57:33" pos:end="57:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:17"><decl pos:start="59:5" pos:end="59:16"><type pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:8">void</name> <modifier pos:start="59:10" pos:end="59:10">*</modifier></type><name pos:start="59:11" pos:end="59:16">fw_cfg</name></decl>;</decl_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:14">linux_boot</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:33">kernel_filename</name> <operator pos:start="63:35" pos:end="63:36">!=</operator> <name pos:start="63:38" pos:end="63:41">NULL</name><operator pos:start="63:42" pos:end="63:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:19">/* init CPUs */</comment>

    <if_stmt pos:start="69:5" pos:end="71:25"><if pos:start="69:5" pos:end="71:25">if <condition pos:start="69:8" pos:end="69:26">(<expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:17">cpu_model</name> <operator pos:start="69:19" pos:end="69:20">==</operator> <name pos:start="69:22" pos:end="69:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:25"><block_content pos:start="71:9" pos:end="71:25">

        <expr_stmt pos:start="71:9" pos:end="71:25"><expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:17">cpu_model</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="string" pos:start="71:21" pos:end="71:24">"G3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="73:5" pos:end="95:5">for <control pos:start="73:9" pos:end="73:34">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:29"><expr pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:28">smp_cpus</name></expr>;</condition> <incr pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:31">i</name><operator pos:start="73:32" pos:end="73:33">++</operator></expr></incr>)</control> <block pos:start="73:36" pos:end="95:5">{<block_content pos:start="75:9" pos:end="93:53">

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:11">cpu</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:37"><name pos:start="75:15" pos:end="75:26">cpu_ppc_init</name><argument_list pos:start="75:27" pos:end="75:37">(<argument pos:start="75:28" pos:end="75:36"><expr pos:start="75:28" pos:end="75:36"><name pos:start="75:28" pos:end="75:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:24">(<expr pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:15">cpu</name> <operator pos:start="77:17" pos:end="77:18">==</operator> <name pos:start="77:20" pos:end="77:23">NULL</name></expr>)</condition> <block pos:start="77:26" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:20">

            <expr_stmt pos:start="79:13" pos:end="79:71"><expr pos:start="79:13" pos:end="79:70"><call pos:start="79:13" pos:end="79:70"><name pos:start="79:13" pos:end="79:19">fprintf</name><argument_list pos:start="79:20" pos:end="79:70">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">stderr</name></expr></argument>, <argument pos:start="79:29" pos:end="79:69"><expr pos:start="79:29" pos:end="79:69"><literal type="string" pos:start="79:29" pos:end="79:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:20"><expr pos:start="81:13" pos:end="81:19"><call pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:16">exit</name><argument_list pos:start="81:17" pos:end="81:19">(<argument pos:start="81:18" pos:end="81:18"><expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:11">env</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">&amp;</operator><name pos:start="85:16" pos:end="85:23"><name pos:start="85:16" pos:end="85:18">cpu</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="89:9" pos:end="89:49">/* Set time-base frequency to 16.6 Mhz */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:38"><expr pos:start="91:9" pos:end="91:37"><call pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:23">cpu_ppc_tb_init</name><argument_list pos:start="91:24" pos:end="91:37">(<argument pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><name pos:start="91:25" pos:end="91:27">env</name></expr></argument>,  <argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><call pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:27">qemu_register_reset</name><argument_list pos:start="93:28" pos:end="93:52">(<argument pos:start="93:29" pos:end="93:46"><expr pos:start="93:29" pos:end="93:46"><name pos:start="93:29" pos:end="93:46">ppc_heathrow_reset</name></expr></argument>, <argument pos:start="93:49" pos:end="93:51"><expr pos:start="93:49" pos:end="93:51"><name pos:start="93:49" pos:end="93:51">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="99:5" pos:end="99:22">/* allocate RAM */</comment>

    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:32">(<expr pos:start="101:9" pos:end="101:31"><name pos:start="101:9" pos:end="101:16">ram_size</name> <operator pos:start="101:18" pos:end="101:18">&gt;</operator> <operator pos:start="101:20" pos:end="101:20">(</operator><literal type="number" pos:start="101:21" pos:end="101:24">2047</literal> <operator pos:start="101:26" pos:end="101:27">&lt;&lt;</operator> <literal type="number" pos:start="101:29" pos:end="101:30">20</literal><operator pos:start="101:31" pos:end="101:31">)</operator></expr>)</condition> <block pos:start="101:34" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:16">

        <expr_stmt pos:start="103:9" pos:end="107:54"><expr pos:start="103:9" pos:end="107:53"><call pos:start="103:9" pos:end="107:53"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="107:53">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>,

                <argument pos:start="105:17" pos:end="105:82"><expr pos:start="105:17" pos:end="105:82"><literal type="string" pos:start="105:17" pos:end="105:82">"qemu: Too much memory for this machine: %d MB, maximum 2047 MB\n"</literal></expr></argument>,

                <argument pos:start="107:17" pos:end="107:52"><expr pos:start="107:17" pos:end="107:52"><operator pos:start="107:17" pos:end="107:17">(</operator><operator pos:start="107:18" pos:end="107:18">(</operator><name pos:start="107:19" pos:end="107:26">unsigned</name> <name pos:start="107:28" pos:end="107:30">int</name><operator pos:start="107:31" pos:end="107:31">)</operator><name pos:start="107:32" pos:end="107:39">ram_size</name> <operator pos:start="107:41" pos:end="107:41">/</operator> <operator pos:start="107:43" pos:end="107:43">(</operator><literal type="number" pos:start="107:44" pos:end="107:44">1</literal> <operator pos:start="107:46" pos:end="107:47">&lt;&lt;</operator> <literal type="number" pos:start="107:49" pos:end="107:50">20</literal><operator pos:start="107:51" pos:end="107:51">)</operator><operator pos:start="107:52" pos:end="107:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:16"><expr pos:start="109:9" pos:end="109:15"><call pos:start="109:9" pos:end="109:15"><name pos:start="109:9" pos:end="109:12">exit</name><argument_list pos:start="109:13" pos:end="109:15">(<argument pos:start="109:14" pos:end="109:14"><expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="117:51"><expr pos:start="115:5" pos:end="117:50"><call pos:start="115:5" pos:end="117:50"><name pos:start="115:5" pos:end="115:40">memory_region_allocate_system_memory</name><argument_list pos:start="115:41" pos:end="117:50">(<argument pos:start="115:42" pos:end="115:44"><expr pos:start="115:42" pos:end="115:44"><name pos:start="115:42" pos:end="115:44">ram</name></expr></argument>, <argument pos:start="115:47" pos:end="115:50"><expr pos:start="115:47" pos:end="115:50"><name pos:start="115:47" pos:end="115:50">NULL</name></expr></argument>, <argument pos:start="115:53" pos:end="115:70"><expr pos:start="115:53" pos:end="115:70"><literal type="string" pos:start="115:53" pos:end="115:70">"ppc_heathrow.ram"</literal></expr></argument>,

                                         <argument pos:start="117:42" pos:end="117:49"><expr pos:start="117:42" pos:end="117:49"><name pos:start="117:42" pos:end="117:49">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:48"><expr pos:start="119:5" pos:end="119:47"><call pos:start="119:5" pos:end="119:47"><name pos:start="119:5" pos:end="119:31">memory_region_add_subregion</name><argument_list pos:start="119:32" pos:end="119:47">(<argument pos:start="119:33" pos:end="119:38"><expr pos:start="119:33" pos:end="119:38"><name pos:start="119:33" pos:end="119:38">sysmem</name></expr></argument>, <argument pos:start="119:41" pos:end="119:41"><expr pos:start="119:41" pos:end="119:41"><literal type="number" pos:start="119:41" pos:end="119:41">0</literal></expr></argument>, <argument pos:start="119:44" pos:end="119:46"><expr pos:start="119:44" pos:end="119:46"><name pos:start="119:44" pos:end="119:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:71"><expr pos:start="125:5" pos:end="125:70"><call pos:start="125:5" pos:end="125:70"><name pos:start="125:5" pos:end="125:26">memory_region_init_ram</name><argument_list pos:start="125:27" pos:end="125:70">(<argument pos:start="125:28" pos:end="125:31"><expr pos:start="125:28" pos:end="125:31"><name pos:start="125:28" pos:end="125:31">bios</name></expr></argument>, <argument pos:start="125:34" pos:end="125:37"><expr pos:start="125:34" pos:end="125:37"><name pos:start="125:34" pos:end="125:37">NULL</name></expr></argument>, <argument pos:start="125:40" pos:end="125:58"><expr pos:start="125:40" pos:end="125:58"><literal type="string" pos:start="125:40" pos:end="125:58">"ppc_heathrow.bios"</literal></expr></argument>, <argument pos:start="125:61" pos:end="125:69"><expr pos:start="125:61" pos:end="125:69"><name pos:start="125:61" pos:end="125:69">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:38"><expr pos:start="127:5" pos:end="127:37"><call pos:start="127:5" pos:end="127:37"><name pos:start="127:5" pos:end="127:31">vmstate_register_ram_global</name><argument_list pos:start="127:32" pos:end="127:37">(<argument pos:start="127:33" pos:end="127:36"><expr pos:start="127:33" pos:end="127:36"><name pos:start="127:33" pos:end="127:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="133:34"><if pos:start="131:5" pos:end="133:34">if <condition pos:start="131:8" pos:end="131:26">(<expr pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:17">bios_name</name> <operator pos:start="131:19" pos:end="131:20">==</operator> <name pos:start="131:22" pos:end="131:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:34"><block_content pos:start="133:9" pos:end="133:34">

        <expr_stmt pos:start="133:9" pos:end="133:34"><expr pos:start="133:9" pos:end="133:33"><name pos:start="133:9" pos:end="133:17">bios_name</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:62"><expr pos:start="135:5" pos:end="135:61"><name pos:start="135:5" pos:end="135:12">filename</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:61"><name pos:start="135:16" pos:end="135:29">qemu_find_file</name><argument_list pos:start="135:30" pos:end="135:61">(<argument pos:start="135:31" pos:end="135:49"><expr pos:start="135:31" pos:end="135:49"><name pos:start="135:31" pos:end="135:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="135:52" pos:end="135:60"><expr pos:start="135:52" pos:end="135:60"><name pos:start="135:52" pos:end="135:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:43"><expr pos:start="137:5" pos:end="137:42"><call pos:start="137:5" pos:end="137:42"><name pos:start="137:5" pos:end="137:30">memory_region_set_readonly</name><argument_list pos:start="137:31" pos:end="137:42">(<argument pos:start="137:32" pos:end="137:35"><expr pos:start="137:32" pos:end="137:35"><name pos:start="137:32" pos:end="137:35">bios</name></expr></argument>, <argument pos:start="137:38" pos:end="137:41"><expr pos:start="137:38" pos:end="137:41"><name pos:start="137:38" pos:end="137:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:57"><expr pos:start="139:5" pos:end="139:56"><call pos:start="139:5" pos:end="139:56"><name pos:start="139:5" pos:end="139:31">memory_region_add_subregion</name><argument_list pos:start="139:32" pos:end="139:56">(<argument pos:start="139:33" pos:end="139:38"><expr pos:start="139:33" pos:end="139:38"><name pos:start="139:33" pos:end="139:38">sysmem</name></expr></argument>, <argument pos:start="139:41" pos:end="139:49"><expr pos:start="139:41" pos:end="139:49"><name pos:start="139:41" pos:end="139:49">PROM_ADDR</name></expr></argument>, <argument pos:start="139:52" pos:end="139:55"><expr pos:start="139:52" pos:end="139:55"><name pos:start="139:52" pos:end="139:55">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="145:5" pos:end="157:5"><if pos:start="145:5" pos:end="153:5">if <condition pos:start="145:8" pos:end="145:17">(<expr pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">filename</name></expr>)</condition> <block pos:start="145:19" pos:end="153:5">{<block_content pos:start="147:9" pos:end="151:25">

        <expr_stmt pos:start="147:9" pos:end="149:48"><expr pos:start="147:9" pos:end="149:47"><name pos:start="147:9" pos:end="147:17">bios_size</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="149:47"><name pos:start="147:21" pos:end="147:28">load_elf</name><argument_list pos:start="147:29" pos:end="149:47">(<argument pos:start="147:30" pos:end="147:37"><expr pos:start="147:30" pos:end="147:37"><name pos:start="147:30" pos:end="147:37">filename</name></expr></argument>, <argument pos:start="147:40" pos:end="147:40"><expr pos:start="147:40" pos:end="147:40"><literal type="number" pos:start="147:40" pos:end="147:40">0</literal></expr></argument>, <argument pos:start="147:43" pos:end="147:46"><expr pos:start="147:43" pos:end="147:46"><name pos:start="147:43" pos:end="147:46">NULL</name></expr></argument>, <argument pos:start="147:49" pos:end="147:52"><expr pos:start="147:49" pos:end="147:52"><name pos:start="147:49" pos:end="147:52">NULL</name></expr></argument>, <argument pos:start="147:55" pos:end="147:58"><expr pos:start="147:55" pos:end="147:58"><name pos:start="147:55" pos:end="147:58">NULL</name></expr></argument>, <argument pos:start="147:61" pos:end="147:64"><expr pos:start="147:61" pos:end="147:64"><name pos:start="147:61" pos:end="147:64">NULL</name></expr></argument>,

                             <argument pos:start="149:30" pos:end="149:30"><expr pos:start="149:30" pos:end="149:30"><literal type="number" pos:start="149:30" pos:end="149:30">1</literal></expr></argument>, <argument pos:start="149:33" pos:end="149:43"><expr pos:start="149:33" pos:end="149:43"><name pos:start="149:33" pos:end="149:43">ELF_MACHINE</name></expr></argument>, <argument pos:start="149:46" pos:end="149:46"><expr pos:start="149:46" pos:end="149:46"><literal type="number" pos:start="149:46" pos:end="149:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:25"><expr pos:start="151:9" pos:end="151:24"><call pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:14">g_free</name><argument_list pos:start="151:15" pos:end="151:24">(<argument pos:start="151:16" pos:end="151:23"><expr pos:start="151:16" pos:end="151:23"><name pos:start="151:16" pos:end="151:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="157:5">else <block pos:start="153:12" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:23">

        <expr_stmt pos:start="155:9" pos:end="155:23"><expr pos:start="155:9" pos:end="155:22"><name pos:start="155:9" pos:end="155:17">bios_size</name> <operator pos:start="155:19" pos:end="155:19">=</operator> <operator pos:start="155:21" pos:end="155:21">-</operator><literal type="number" pos:start="155:22" pos:end="155:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:47">(<expr pos:start="159:9" pos:end="159:46"><name pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:17">bios_size</name> <argument_list type="generic" pos:start="159:19" pos:end="159:36">&lt; <argument pos:start="159:21" pos:end="159:34"><expr pos:start="159:21" pos:end="159:34"><literal type="number" pos:start="159:21" pos:end="159:21">0</literal> <operator pos:start="159:23" pos:end="159:24">||</operator> <name pos:start="159:26" pos:end="159:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="159:38" pos:end="159:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="159:49" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:16">

        <expr_stmt pos:start="161:9" pos:end="161:72"><expr pos:start="161:9" pos:end="161:71"><call pos:start="161:9" pos:end="161:71"><name pos:start="161:9" pos:end="161:16">hw_error</name><argument_list pos:start="161:17" pos:end="161:71">(<argument pos:start="161:18" pos:end="161:59"><expr pos:start="161:18" pos:end="161:59"><literal type="string" pos:start="161:18" pos:end="161:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="161:62" pos:end="161:70"><expr pos:start="161:62" pos:end="161:70"><name pos:start="161:62" pos:end="161:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:16"><expr pos:start="163:9" pos:end="163:15"><call pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:12">exit</name><argument_list pos:start="163:13" pos:end="163:15">(<argument pos:start="163:14" pos:end="163:14"><expr pos:start="163:14" pos:end="163:14"><literal type="number" pos:start="163:14" pos:end="163:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="307:5"><if pos:start="169:5" pos:end="253:5">if <condition pos:start="169:8" pos:end="169:19">(<expr pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:18">linux_boot</name></expr>)</condition> <block pos:start="169:21" pos:end="253:5">{<block_content pos:start="171:9" pos:end="251:30">

        <decl_stmt pos:start="171:9" pos:end="171:29"><decl pos:start="171:9" pos:end="171:28"><type pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:16">uint64_t</name></type> <name pos:start="171:18" pos:end="171:24">lowaddr</name> <init pos:start="171:26" pos:end="171:28">= <expr pos:start="171:28" pos:end="171:28"><literal type="number" pos:start="171:28" pos:end="171:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="178:0"><decl pos:start="173:9" pos:end="173:24"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="177:1" pos:end="177:19">#<cpp:directive pos:start="177:2" pos:end="177:6">ifdef</cpp:directive> <name pos:start="177:8" pos:end="177:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="179:9" pos:end="182:0"><expr pos:start="179:9" pos:end="179:24"><name pos:start="179:9" pos:end="179:20">bswap_needed</name> <operator pos:start="179:22" pos:end="179:22">=</operator> <literal type="number" pos:start="179:24" pos:end="179:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="181:1" pos:end="181:5">#<cpp:directive pos:start="181:2" pos:end="181:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="183:9" pos:end="186:0"><expr pos:start="183:9" pos:end="183:24"><name pos:start="183:9" pos:end="183:20">bswap_needed</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <literal type="number" pos:start="183:24" pos:end="183:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="187:9" pos:end="187:39"><expr pos:start="187:9" pos:end="187:38"><name pos:start="187:9" pos:end="187:19">kernel_base</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="191:72"><expr pos:start="189:9" pos:end="191:71"><name pos:start="189:9" pos:end="189:19">kernel_size</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <call pos:start="189:23" pos:end="191:71"><name pos:start="189:23" pos:end="189:30">load_elf</name><argument_list pos:start="189:31" pos:end="191:71">(<argument pos:start="189:32" pos:end="189:46"><expr pos:start="189:32" pos:end="189:46"><name pos:start="189:32" pos:end="189:46">kernel_filename</name></expr></argument>, <argument pos:start="189:49" pos:end="189:72"><expr pos:start="189:49" pos:end="189:72"><name pos:start="189:49" pos:end="189:72">translate_kernel_address</name></expr></argument>, <argument pos:start="189:75" pos:end="189:78"><expr pos:start="189:75" pos:end="189:78"><name pos:start="189:75" pos:end="189:78">NULL</name></expr></argument>,

                               <argument pos:start="191:32" pos:end="191:35"><expr pos:start="191:32" pos:end="191:35"><name pos:start="191:32" pos:end="191:35">NULL</name></expr></argument>, <argument pos:start="191:38" pos:end="191:45"><expr pos:start="191:38" pos:end="191:45"><operator pos:start="191:38" pos:end="191:38">&amp;</operator><name pos:start="191:39" pos:end="191:45">lowaddr</name></expr></argument>, <argument pos:start="191:48" pos:end="191:51"><expr pos:start="191:48" pos:end="191:51"><name pos:start="191:48" pos:end="191:51">NULL</name></expr></argument>, <argument pos:start="191:54" pos:end="191:54"><expr pos:start="191:54" pos:end="191:54"><literal type="number" pos:start="191:54" pos:end="191:54">1</literal></expr></argument>, <argument pos:start="191:57" pos:end="191:67"><expr pos:start="191:57" pos:end="191:67"><name pos:start="191:57" pos:end="191:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="191:70" pos:end="191:70"><expr pos:start="191:70" pos:end="191:70"><literal type="number" pos:start="191:70" pos:end="191:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="199:54"><if pos:start="193:9" pos:end="199:54">if <condition pos:start="193:12" pos:end="193:28">(<expr pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:23">kernel_size</name> <operator pos:start="193:25" pos:end="193:25">&lt;</operator> <literal type="number" pos:start="193:27" pos:end="193:27">0</literal></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="199:54"><block_content pos:start="195:13" pos:end="199:54">

            <expr_stmt pos:start="195:13" pos:end="199:54"><expr pos:start="195:13" pos:end="199:53"><name pos:start="195:13" pos:end="195:23">kernel_size</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <call pos:start="195:27" pos:end="199:53"><name pos:start="195:27" pos:end="195:35">load_aout</name><argument_list pos:start="195:36" pos:end="199:53">(<argument pos:start="195:37" pos:end="195:51"><expr pos:start="195:37" pos:end="195:51"><name pos:start="195:37" pos:end="195:51">kernel_filename</name></expr></argument>, <argument pos:start="195:54" pos:end="195:64"><expr pos:start="195:54" pos:end="195:64"><name pos:start="195:54" pos:end="195:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="197:37" pos:end="197:58"><expr pos:start="197:37" pos:end="197:58"><name pos:start="197:37" pos:end="197:44">ram_size</name> <operator pos:start="197:46" pos:end="197:46">-</operator> <name pos:start="197:48" pos:end="197:58">kernel_base</name></expr></argument>, <argument pos:start="197:61" pos:end="197:72"><expr pos:start="197:61" pos:end="197:72"><name pos:start="197:61" pos:end="197:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="199:37" pos:end="199:52"><expr pos:start="199:37" pos:end="199:52"><name pos:start="199:37" pos:end="199:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="201:9" pos:end="207:70"><if pos:start="201:9" pos:end="207:70">if <condition pos:start="201:12" pos:end="201:28">(<expr pos:start="201:13" pos:end="201:27"><name pos:start="201:13" pos:end="201:23">kernel_size</name> <operator pos:start="201:25" pos:end="201:25">&lt;</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="207:70"><block_content pos:start="203:13" pos:end="207:70">

            <expr_stmt pos:start="203:13" pos:end="207:70"><expr pos:start="203:13" pos:end="207:69"><name pos:start="203:13" pos:end="203:23">kernel_size</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <call pos:start="203:27" pos:end="207:69"><name pos:start="203:27" pos:end="203:45">load_image_targphys</name><argument_list pos:start="203:46" pos:end="207:69">(<argument pos:start="203:47" pos:end="203:61"><expr pos:start="203:47" pos:end="203:61"><name pos:start="203:47" pos:end="203:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="205:47" pos:end="205:57"><expr pos:start="205:47" pos:end="205:57"><name pos:start="205:47" pos:end="205:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="207:47" pos:end="207:68"><expr pos:start="207:47" pos:end="207:68"><name pos:start="207:47" pos:end="207:54">ram_size</name> <operator pos:start="207:56" pos:end="207:56">-</operator> <name pos:start="207:58" pos:end="207:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="209:9" pos:end="217:9"><if pos:start="209:9" pos:end="217:9">if <condition pos:start="209:12" pos:end="209:28">(<expr pos:start="209:13" pos:end="209:27"><name pos:start="209:13" pos:end="209:23">kernel_size</name> <operator pos:start="209:25" pos:end="209:25">&lt;</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>)</condition> <block pos:start="209:30" pos:end="217:9">{<block_content pos:start="211:13" pos:end="215:20">

            <expr_stmt pos:start="211:13" pos:end="213:39"><expr pos:start="211:13" pos:end="213:38"><call pos:start="211:13" pos:end="213:38"><name pos:start="211:13" pos:end="211:20">hw_error</name><argument_list pos:start="211:21" pos:end="213:38">(<argument pos:start="211:22" pos:end="211:57"><expr pos:start="211:22" pos:end="211:57"><literal type="string" pos:start="211:22" pos:end="211:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="213:23" pos:end="213:37"><expr pos:start="213:23" pos:end="213:37"><name pos:start="213:23" pos:end="213:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:16">exit</name><argument_list pos:start="215:17" pos:end="215:19">(<argument pos:start="215:18" pos:end="215:18"><expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="219:9" pos:end="219:25">/* load initrd */</comment>

        <if_stmt pos:start="221:9" pos:end="249:9"><if pos:start="221:9" pos:end="241:9">if <condition pos:start="221:12" pos:end="221:28">(<expr pos:start="221:13" pos:end="221:27"><name pos:start="221:13" pos:end="221:27">initrd_filename</name></expr>)</condition> <block pos:start="221:30" pos:end="241:9">{<block_content pos:start="223:13" pos:end="239:65">

            <expr_stmt pos:start="223:13" pos:end="223:77"><expr pos:start="223:13" pos:end="223:76"><name pos:start="223:13" pos:end="223:23">initrd_base</name> <operator pos:start="223:25" pos:end="223:25">=</operator> <call pos:start="223:27" pos:end="223:76"><name pos:start="223:27" pos:end="223:36">round_page</name><argument_list pos:start="223:37" pos:end="223:76">(<argument pos:start="223:38" pos:end="223:75"><expr pos:start="223:38" pos:end="223:75"><name pos:start="223:38" pos:end="223:48">kernel_base</name> <operator pos:start="223:50" pos:end="223:50">+</operator> <name pos:start="223:52" pos:end="223:62">kernel_size</name> <operator pos:start="223:64" pos:end="223:64">+</operator> <name pos:start="223:66" pos:end="223:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="227:70"><expr pos:start="225:13" pos:end="227:69"><name pos:start="225:13" pos:end="225:23">initrd_size</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <call pos:start="225:27" pos:end="227:69"><name pos:start="225:27" pos:end="225:45">load_image_targphys</name><argument_list pos:start="225:46" pos:end="227:69">(<argument pos:start="225:47" pos:end="225:61"><expr pos:start="225:47" pos:end="225:61"><name pos:start="225:47" pos:end="225:61">initrd_filename</name></expr></argument>, <argument pos:start="225:64" pos:end="225:74"><expr pos:start="225:64" pos:end="225:74"><name pos:start="225:64" pos:end="225:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="227:47" pos:end="227:68"><expr pos:start="227:47" pos:end="227:68"><name pos:start="227:47" pos:end="227:54">ram_size</name> <operator pos:start="227:56" pos:end="227:56">-</operator> <name pos:start="227:58" pos:end="227:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="237:13"><if pos:start="229:13" pos:end="237:13">if <condition pos:start="229:16" pos:end="229:32">(<expr pos:start="229:17" pos:end="229:31"><name pos:start="229:17" pos:end="229:27">initrd_size</name> <operator pos:start="229:29" pos:end="229:29">&lt;</operator> <literal type="number" pos:start="229:31" pos:end="229:31">0</literal></expr>)</condition> <block pos:start="229:34" pos:end="237:13">{<block_content pos:start="231:17" pos:end="235:24">

                <expr_stmt pos:start="231:17" pos:end="233:42"><expr pos:start="231:17" pos:end="233:41"><call pos:start="231:17" pos:end="233:41"><name pos:start="231:17" pos:end="231:24">hw_error</name><argument_list pos:start="231:25" pos:end="233:41">(<argument pos:start="231:26" pos:end="231:71"><expr pos:start="231:26" pos:end="231:71"><literal type="string" pos:start="231:26" pos:end="231:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="233:26" pos:end="233:40"><expr pos:start="233:26" pos:end="233:40"><name pos:start="233:26" pos:end="233:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:24"><expr pos:start="235:17" pos:end="235:23"><call pos:start="235:17" pos:end="235:23"><name pos:start="235:17" pos:end="235:20">exit</name><argument_list pos:start="235:21" pos:end="235:23">(<argument pos:start="235:22" pos:end="235:22"><expr pos:start="235:22" pos:end="235:22"><literal type="number" pos:start="235:22" pos:end="235:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:65"><expr pos:start="239:13" pos:end="239:64"><name pos:start="239:13" pos:end="239:24">cmdline_base</name> <operator pos:start="239:26" pos:end="239:26">=</operator> <call pos:start="239:28" pos:end="239:64"><name pos:start="239:28" pos:end="239:37">round_page</name><argument_list pos:start="239:38" pos:end="239:64">(<argument pos:start="239:39" pos:end="239:63"><expr pos:start="239:39" pos:end="239:63"><name pos:start="239:39" pos:end="239:49">initrd_base</name> <operator pos:start="239:51" pos:end="239:51">+</operator> <name pos:start="239:53" pos:end="239:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="241:11" pos:end="249:9">else <block pos:start="241:16" pos:end="249:9">{<block_content pos:start="243:13" pos:end="247:78">

            <expr_stmt pos:start="243:13" pos:end="243:28"><expr pos:start="243:13" pos:end="243:27"><name pos:start="243:13" pos:end="243:23">initrd_base</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <literal type="number" pos:start="243:27" pos:end="243:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:28"><expr pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:23">initrd_size</name> <operator pos:start="245:25" pos:end="245:25">=</operator> <literal type="number" pos:start="245:27" pos:end="245:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:78"><expr pos:start="247:13" pos:end="247:77"><name pos:start="247:13" pos:end="247:24">cmdline_base</name> <operator pos:start="247:26" pos:end="247:26">=</operator> <call pos:start="247:28" pos:end="247:77"><name pos:start="247:28" pos:end="247:37">round_page</name><argument_list pos:start="247:38" pos:end="247:77">(<argument pos:start="247:39" pos:end="247:76"><expr pos:start="247:39" pos:end="247:76"><name pos:start="247:39" pos:end="247:49">kernel_base</name> <operator pos:start="247:51" pos:end="247:51">+</operator> <name pos:start="247:53" pos:end="247:63">kernel_size</name> <operator pos:start="247:65" pos:end="247:65">+</operator> <name pos:start="247:67" pos:end="247:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:30"><expr pos:start="251:9" pos:end="251:29"><name pos:start="251:9" pos:end="251:23">ppc_boot_device</name> <operator pos:start="251:25" pos:end="251:25">=</operator> <literal type="char" pos:start="251:27" pos:end="251:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="253:7" pos:end="307:5">else <block pos:start="253:12" pos:end="307:5">{<block_content pos:start="255:9" pos:end="305:9">

        <expr_stmt pos:start="255:9" pos:end="255:24"><expr pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:19">kernel_base</name> <operator pos:start="255:21" pos:end="255:21">=</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:24"><expr pos:start="257:9" pos:end="257:23"><name pos:start="257:9" pos:end="257:19">kernel_size</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:24"><expr pos:start="259:9" pos:end="259:23"><name pos:start="259:9" pos:end="259:19">initrd_base</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <literal type="number" pos:start="259:23" pos:end="259:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:24"><expr pos:start="261:9" pos:end="261:23"><name pos:start="261:9" pos:end="261:19">initrd_size</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <literal type="number" pos:start="261:23" pos:end="261:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:31"><expr pos:start="263:9" pos:end="263:30"><name pos:start="263:9" pos:end="263:23">ppc_boot_device</name> <operator pos:start="263:25" pos:end="263:25">=</operator> <literal type="char" pos:start="263:27" pos:end="263:30">'\0'</literal></expr>;</expr_stmt>

        <for pos:start="265:9" pos:end="297:9">for <control pos:start="265:13" pos:end="265:48">(<init pos:start="265:14" pos:end="265:19"><expr pos:start="265:14" pos:end="265:18"><name pos:start="265:14" pos:end="265:14">i</name> <operator pos:start="265:16" pos:end="265:16">=</operator> <literal type="number" pos:start="265:18" pos:end="265:18">0</literal></expr>;</init> <condition pos:start="265:21" pos:end="265:43"><expr pos:start="265:21" pos:end="265:42"><name pos:start="265:21" pos:end="265:34"><name pos:start="265:21" pos:end="265:31">boot_device</name><index pos:start="265:32" pos:end="265:34">[<expr pos:start="265:33" pos:end="265:33"><name pos:start="265:33" pos:end="265:33">i</name></expr>]</index></name> <operator pos:start="265:36" pos:end="265:37">!=</operator> <literal type="char" pos:start="265:39" pos:end="265:42">'\0'</literal></expr>;</condition> <incr pos:start="265:45" pos:end="265:47"><expr pos:start="265:45" pos:end="265:47"><name pos:start="265:45" pos:end="265:45">i</name><operator pos:start="265:46" pos:end="265:47">++</operator></expr></incr>)</control> <block pos:start="265:50" pos:end="297:9">{<block_content pos:start="287:13" pos:end="296:0">

            <comment type="block" pos:start="267:13" pos:end="273:15">/* TOFIX: for now, the second IDE channel is not properly

             *        used by OHW. The Mac floppy disk are not emulated.

             *        For now, OHW cannot boot from the network.

             */</comment>

<cpp:if pos:start="275:1" pos:end="275:5">#<cpp:directive pos:start="275:2" pos:end="275:3">if</cpp:directive> <expr pos:start="275:5" pos:end="275:5"><literal type="number" pos:start="275:5" pos:end="275:5">0</literal></expr></cpp:if>

            if (boot_device[i] &gt;= 'a' &amp;&amp; boot_device[i] &lt;= 'f') {

                ppc_boot_device = boot_device[i];

                break;

            }

<cpp:else pos:start="285:1" pos:end="285:5">#<cpp:directive pos:start="285:2" pos:end="285:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="287:13" pos:end="296:0"><if pos:start="287:13" pos:end="296:0">if <condition pos:start="287:16" pos:end="287:63">(<expr pos:start="287:17" pos:end="287:62"><name pos:start="287:17" pos:end="287:30"><name pos:start="287:17" pos:end="287:27">boot_device</name><index pos:start="287:28" pos:end="287:30">[<expr pos:start="287:29" pos:end="287:29"><name pos:start="287:29" pos:end="287:29">i</name></expr>]</index></name> <operator pos:start="287:32" pos:end="287:33">&gt;=</operator> <literal type="char" pos:start="287:35" pos:end="287:37">'c'</literal> <operator pos:start="287:39" pos:end="287:40">&amp;&amp;</operator> <name pos:start="287:42" pos:end="287:55"><name pos:start="287:42" pos:end="287:52">boot_device</name><index pos:start="287:53" pos:end="287:55">[<expr pos:start="287:54" pos:end="287:54"><name pos:start="287:54" pos:end="287:54">i</name></expr>]</index></name> <operator pos:start="287:57" pos:end="287:58">&lt;=</operator> <literal type="char" pos:start="287:60" pos:end="287:62">'d'</literal></expr>)</condition> <block pos:start="287:65" pos:end="296:0">{<block_content pos:start="289:17" pos:end="291:22">

                <expr_stmt pos:start="289:17" pos:end="289:49"><expr pos:start="289:17" pos:end="289:48"><name pos:start="289:17" pos:end="289:31">ppc_boot_device</name> <operator pos:start="289:33" pos:end="289:33">=</operator> <name pos:start="289:35" pos:end="289:48"><name pos:start="289:35" pos:end="289:45">boot_device</name><index pos:start="289:46" pos:end="289:48">[<expr pos:start="289:47" pos:end="289:47"><name pos:start="289:47" pos:end="289:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="291:17" pos:end="291:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="295:1" pos:end="295:6">#<cpp:directive pos:start="295:2" pos:end="295:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <if_stmt pos:start="299:9" pos:end="305:9"><if pos:start="299:9" pos:end="305:9">if <condition pos:start="299:12" pos:end="299:36">(<expr pos:start="299:13" pos:end="299:35"><name pos:start="299:13" pos:end="299:27">ppc_boot_device</name> <operator pos:start="299:29" pos:end="299:30">==</operator> <literal type="char" pos:start="299:32" pos:end="299:35">'\0'</literal></expr>)</condition> <block pos:start="299:38" pos:end="305:9">{<block_content pos:start="301:13" pos:end="303:20">

            <expr_stmt pos:start="301:13" pos:end="301:75"><expr pos:start="301:13" pos:end="301:74"><call pos:start="301:13" pos:end="301:74"><name pos:start="301:13" pos:end="301:19">fprintf</name><argument_list pos:start="301:20" pos:end="301:74">(<argument pos:start="301:21" pos:end="301:26"><expr pos:start="301:21" pos:end="301:26"><name pos:start="301:21" pos:end="301:26">stderr</name></expr></argument>, <argument pos:start="301:29" pos:end="301:73"><expr pos:start="301:29" pos:end="301:73"><literal type="string" pos:start="301:29" pos:end="301:73">"No valid boot device for G3 Beige machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:20"><expr pos:start="303:13" pos:end="303:19"><call pos:start="303:13" pos:end="303:19"><name pos:start="303:13" pos:end="303:16">exit</name><argument_list pos:start="303:17" pos:end="303:19">(<argument pos:start="303:18" pos:end="303:18"><expr pos:start="303:18" pos:end="303:18"><literal type="number" pos:start="303:18" pos:end="303:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="311:5" pos:end="311:39">/* Register 2 MB of ISA IO space */</comment>

    <expr_stmt pos:start="313:5" pos:end="315:61"><expr pos:start="313:5" pos:end="315:60"><call pos:start="313:5" pos:end="315:60"><name pos:start="313:5" pos:end="313:28">memory_region_init_alias</name><argument_list pos:start="313:29" pos:end="315:60">(<argument pos:start="313:30" pos:end="313:32"><expr pos:start="313:30" pos:end="313:32"><name pos:start="313:30" pos:end="313:32">isa</name></expr></argument>, <argument pos:start="313:35" pos:end="313:38"><expr pos:start="313:35" pos:end="313:38"><name pos:start="313:35" pos:end="313:38">NULL</name></expr></argument>, <argument pos:start="313:41" pos:end="313:50"><expr pos:start="313:41" pos:end="313:50"><literal type="string" pos:start="313:41" pos:end="313:50">"isa_mmio"</literal></expr></argument>,

                             <argument pos:start="315:30" pos:end="315:44"><expr pos:start="315:30" pos:end="315:44"><call pos:start="315:30" pos:end="315:44"><name pos:start="315:30" pos:end="315:42">get_system_io</name><argument_list pos:start="315:43" pos:end="315:44">()</argument_list></call></expr></argument>, <argument pos:start="315:47" pos:end="315:47"><expr pos:start="315:47" pos:end="315:47"><literal type="number" pos:start="315:47" pos:end="315:47">0</literal></expr></argument>, <argument pos:start="315:50" pos:end="315:59"><expr pos:start="315:50" pos:end="315:59"><literal type="number" pos:start="315:50" pos:end="315:59">0x00200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:57"><expr pos:start="317:5" pos:end="317:56"><call pos:start="317:5" pos:end="317:56"><name pos:start="317:5" pos:end="317:31">memory_region_add_subregion</name><argument_list pos:start="317:32" pos:end="317:56">(<argument pos:start="317:33" pos:end="317:38"><expr pos:start="317:33" pos:end="317:38"><name pos:start="317:33" pos:end="317:38">sysmem</name></expr></argument>, <argument pos:start="317:41" pos:end="317:50"><expr pos:start="317:41" pos:end="317:50"><literal type="number" pos:start="317:41" pos:end="317:50">0xfe000000</literal></expr></argument>, <argument pos:start="317:53" pos:end="317:55"><expr pos:start="317:53" pos:end="317:55"><name pos:start="317:53" pos:end="317:55">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="321:5" pos:end="321:61">/* XXX: we register only 1 output pin for heathrow PIC */</comment>

    <expr_stmt pos:start="323:5" pos:end="323:61"><expr pos:start="323:5" pos:end="323:60"><name pos:start="323:5" pos:end="323:17">heathrow_irqs</name> <operator pos:start="323:19" pos:end="323:19">=</operator> <call pos:start="323:21" pos:end="323:60"><name pos:start="323:21" pos:end="323:29">g_malloc0</name><argument_list pos:start="323:30" pos:end="323:60">(<argument pos:start="323:31" pos:end="323:59"><expr pos:start="323:31" pos:end="323:59"><name pos:start="323:31" pos:end="323:38">smp_cpus</name> <operator pos:start="323:40" pos:end="323:40">*</operator> <sizeof pos:start="323:42" pos:end="323:59">sizeof<argument_list pos:start="323:48" pos:end="323:59">(<argument pos:start="323:49" pos:end="323:58"><expr pos:start="323:49" pos:end="323:58"><name pos:start="323:49" pos:end="323:56">qemu_irq</name> <operator pos:start="323:58" pos:end="323:58">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="327:51"><expr pos:start="325:5" pos:end="327:50"><name pos:start="325:5" pos:end="325:20"><name pos:start="325:5" pos:end="325:17">heathrow_irqs</name><index pos:start="325:18" pos:end="325:20">[<expr pos:start="325:19" pos:end="325:19"><literal type="number" pos:start="325:19" pos:end="325:19">0</literal></expr>]</index></name> <operator pos:start="325:22" pos:end="325:22">=</operator>

        <call pos:start="327:9" pos:end="327:50"><name pos:start="327:9" pos:end="327:17">g_malloc0</name><argument_list pos:start="327:18" pos:end="327:50">(<argument pos:start="327:19" pos:end="327:49"><expr pos:start="327:19" pos:end="327:49"><name pos:start="327:19" pos:end="327:26">smp_cpus</name> <operator pos:start="327:28" pos:end="327:28">*</operator> <sizeof pos:start="327:30" pos:end="327:45">sizeof<argument_list pos:start="327:36" pos:end="327:45">(<argument pos:start="327:37" pos:end="327:44"><expr pos:start="327:37" pos:end="327:44"><name pos:start="327:37" pos:end="327:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="327:47" pos:end="327:47">*</operator> <literal type="number" pos:start="327:49" pos:end="327:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="329:5" pos:end="329:57">/* Connect the heathrow PIC outputs to the 6xx bus */</comment>

    <for pos:start="331:5" pos:end="351:5">for <control pos:start="331:9" pos:end="331:34">(<init pos:start="331:10" pos:end="331:15"><expr pos:start="331:10" pos:end="331:14"><name pos:start="331:10" pos:end="331:10">i</name> <operator pos:start="331:12" pos:end="331:12">=</operator> <literal type="number" pos:start="331:14" pos:end="331:14">0</literal></expr>;</init> <condition pos:start="331:17" pos:end="331:29"><expr pos:start="331:17" pos:end="331:28"><name pos:start="331:17" pos:end="331:17">i</name> <operator pos:start="331:19" pos:end="331:19">&lt;</operator> <name pos:start="331:21" pos:end="331:28">smp_cpus</name></expr>;</condition> <incr pos:start="331:31" pos:end="331:33"><expr pos:start="331:31" pos:end="331:33"><name pos:start="331:31" pos:end="331:31">i</name><operator pos:start="331:32" pos:end="331:33">++</operator></expr></incr>)</control> <block pos:start="331:36" pos:end="351:5">{<block_content pos:start="333:9" pos:end="349:9">

        <switch pos:start="333:9" pos:end="349:9">switch <condition pos:start="333:16" pos:end="333:31">(<expr pos:start="333:17" pos:end="333:30"><call pos:start="333:17" pos:end="333:30"><name pos:start="333:17" pos:end="333:25">PPC_INPUT</name><argument_list pos:start="333:26" pos:end="333:30">(<argument pos:start="333:27" pos:end="333:29"><expr pos:start="333:27" pos:end="333:29"><name pos:start="333:27" pos:end="333:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:33" pos:end="349:9">{<block_content pos:start="335:9" pos:end="347:74">

        <case pos:start="335:9" pos:end="335:33">case <expr pos:start="335:14" pos:end="335:32"><name pos:start="335:14" pos:end="335:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="337:13" pos:end="337:58"><expr pos:start="337:13" pos:end="337:57"><name pos:start="337:13" pos:end="337:28"><name pos:start="337:13" pos:end="337:25">heathrow_irqs</name><index pos:start="337:26" pos:end="337:28">[<expr pos:start="337:27" pos:end="337:27"><name pos:start="337:27" pos:end="337:27">i</name></expr>]</index></name> <operator pos:start="337:30" pos:end="337:30">=</operator> <name pos:start="337:32" pos:end="337:47"><name pos:start="337:32" pos:end="337:44">heathrow_irqs</name><index pos:start="337:45" pos:end="337:47">[<expr pos:start="337:46" pos:end="337:46"><literal type="number" pos:start="337:46" pos:end="337:46">0</literal></expr>]</index></name> <operator pos:start="337:49" pos:end="337:49">+</operator> <operator pos:start="337:51" pos:end="337:51">(</operator><name pos:start="337:52" pos:end="337:52">i</name> <operator pos:start="337:54" pos:end="337:54">*</operator> <literal type="number" pos:start="337:56" pos:end="337:56">1</literal><operator pos:start="337:57" pos:end="337:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="341:64"><expr pos:start="339:13" pos:end="341:63"><name pos:start="339:13" pos:end="339:31"><name pos:start="339:13" pos:end="339:25">heathrow_irqs</name><index pos:start="339:26" pos:end="339:28">[<expr pos:start="339:27" pos:end="339:27"><name pos:start="339:27" pos:end="339:27">i</name></expr>]</index><index pos:start="339:29" pos:end="339:31">[<expr pos:start="339:30" pos:end="339:30"><literal type="number" pos:start="339:30" pos:end="339:30">0</literal></expr>]</index></name> <operator pos:start="339:33" pos:end="339:33">=</operator>

                <operator pos:start="341:17" pos:end="341:17">(</operator><operator pos:start="341:18" pos:end="341:18">(</operator><name pos:start="341:19" pos:end="341:26">qemu_irq</name> <operator pos:start="341:28" pos:end="341:28">*</operator><operator pos:start="341:29" pos:end="341:29">)</operator><name pos:start="341:30" pos:end="341:44"><name pos:start="341:30" pos:end="341:32">env</name><operator pos:start="341:33" pos:end="341:34">-&gt;</operator><name pos:start="341:35" pos:end="341:44">irq_inputs</name></name><operator pos:start="341:45" pos:end="341:45">)</operator><index pos:start="341:46" pos:end="341:63">[<expr pos:start="341:47" pos:end="341:62"><name pos:start="341:47" pos:end="341:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="343:13" pos:end="343:18">break;</break>

        <default pos:start="345:9" pos:end="345:16">default:</default>

            <expr_stmt pos:start="347:13" pos:end="347:74"><expr pos:start="347:13" pos:end="347:73"><call pos:start="347:13" pos:end="347:73"><name pos:start="347:13" pos:end="347:20">hw_error</name><argument_list pos:start="347:21" pos:end="347:73">(<argument pos:start="347:22" pos:end="347:72"><expr pos:start="347:22" pos:end="347:72"><literal type="string" pos:start="347:22" pos:end="347:72">"Bus model not supported on OldWorld Mac machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="355:5" pos:end="355:32">/* init basic PC hardware */</comment>

    <if_stmt pos:start="357:5" pos:end="361:5"><if pos:start="357:5" pos:end="361:5">if <condition pos:start="357:8" pos:end="357:46">(<expr pos:start="357:9" pos:end="357:45"><call pos:start="357:9" pos:end="357:22"><name pos:start="357:9" pos:end="357:17">PPC_INPUT</name><argument_list pos:start="357:18" pos:end="357:22">(<argument pos:start="357:19" pos:end="357:21"><expr pos:start="357:19" pos:end="357:21"><name pos:start="357:19" pos:end="357:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="357:24" pos:end="357:25">!=</operator> <name pos:start="357:27" pos:end="357:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="357:48" pos:end="361:5">{<block_content pos:start="359:9" pos:end="359:68">

        <expr_stmt pos:start="359:9" pos:end="359:68"><expr pos:start="359:9" pos:end="359:67"><call pos:start="359:9" pos:end="359:67"><name pos:start="359:9" pos:end="359:16">hw_error</name><argument_list pos:start="359:17" pos:end="359:67">(<argument pos:start="359:18" pos:end="359:66"><expr pos:start="359:18" pos:end="359:66"><literal type="string" pos:start="359:18" pos:end="359:66">"Only 6xx bus is supported on heathrow machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:56"><expr pos:start="363:5" pos:end="363:55"><name pos:start="363:5" pos:end="363:7">pic</name> <operator pos:start="363:9" pos:end="363:9">=</operator> <call pos:start="363:11" pos:end="363:55"><name pos:start="363:11" pos:end="363:27">heathrow_pic_init</name><argument_list pos:start="363:28" pos:end="363:55">(<argument pos:start="363:29" pos:end="363:36"><expr pos:start="363:29" pos:end="363:36"><operator pos:start="363:29" pos:end="363:29">&amp;</operator><name pos:start="363:30" pos:end="363:36">pic_mem</name></expr></argument>, <argument pos:start="363:39" pos:end="363:39"><expr pos:start="363:39" pos:end="363:39"><literal type="number" pos:start="363:39" pos:end="363:39">1</literal></expr></argument>, <argument pos:start="363:42" pos:end="363:54"><expr pos:start="363:42" pos:end="363:54"><name pos:start="363:42" pos:end="363:54">heathrow_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="369:48"><expr pos:start="365:5" pos:end="369:47"><name pos:start="365:5" pos:end="365:11">pci_bus</name> <operator pos:start="365:13" pos:end="365:13">=</operator> <call pos:start="365:15" pos:end="369:47"><name pos:start="365:15" pos:end="365:30">pci_grackle_init</name><argument_list pos:start="365:31" pos:end="369:47">(<argument pos:start="365:32" pos:end="365:41"><expr pos:start="365:32" pos:end="365:41"><literal type="number" pos:start="365:32" pos:end="365:41">0xfec00000</literal></expr></argument>, <argument pos:start="365:44" pos:end="365:46"><expr pos:start="365:44" pos:end="365:46"><name pos:start="365:44" pos:end="365:46">pic</name></expr></argument>,

                               <argument pos:start="367:32" pos:end="367:50"><expr pos:start="367:32" pos:end="367:50"><call pos:start="367:32" pos:end="367:50"><name pos:start="367:32" pos:end="367:48">get_system_memory</name><argument_list pos:start="367:49" pos:end="367:50">()</argument_list></call></expr></argument>,

                               <argument pos:start="369:32" pos:end="369:46"><expr pos:start="369:32" pos:end="369:46"><call pos:start="369:32" pos:end="369:46"><name pos:start="369:32" pos:end="369:44">get_system_io</name><argument_list pos:start="369:45" pos:end="369:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:26"><expr pos:start="371:5" pos:end="371:25"><call pos:start="371:5" pos:end="371:25"><name pos:start="371:5" pos:end="371:16">pci_vga_init</name><argument_list pos:start="371:17" pos:end="371:25">(<argument pos:start="371:18" pos:end="371:24"><expr pos:start="371:18" pos:end="371:24"><name pos:start="371:18" pos:end="371:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="375:5" pos:end="377:61"><expr pos:start="375:5" pos:end="377:60"><name pos:start="375:5" pos:end="375:12">escc_mem</name> <operator pos:start="375:14" pos:end="375:14">=</operator> <call pos:start="375:16" pos:end="377:60"><name pos:start="375:16" pos:end="375:24">escc_init</name><argument_list pos:start="375:25" pos:end="377:60">(<argument pos:start="375:26" pos:end="375:26"><expr pos:start="375:26" pos:end="375:26"><literal type="number" pos:start="375:26" pos:end="375:26">0</literal></expr></argument>, <argument pos:start="375:29" pos:end="375:37"><expr pos:start="375:29" pos:end="375:37"><name pos:start="375:29" pos:end="375:37"><name pos:start="375:29" pos:end="375:31">pic</name><index pos:start="375:32" pos:end="375:37">[<expr pos:start="375:33" pos:end="375:36"><literal type="number" pos:start="375:33" pos:end="375:36">0x0f</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:40" pos:end="375:48"><expr pos:start="375:40" pos:end="375:48"><name pos:start="375:40" pos:end="375:48"><name pos:start="375:40" pos:end="375:42">pic</name><index pos:start="375:43" pos:end="375:48">[<expr pos:start="375:44" pos:end="375:47"><literal type="number" pos:start="375:44" pos:end="375:47">0x10</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:51" pos:end="375:63"><expr pos:start="375:51" pos:end="375:63"><name pos:start="375:51" pos:end="375:63"><name pos:start="375:51" pos:end="375:60">serial_hds</name><index pos:start="375:61" pos:end="375:63">[<expr pos:start="375:62" pos:end="375:62"><literal type="number" pos:start="375:62" pos:end="375:62">0</literal></expr>]</index></name></expr></argument>,

                               <argument pos:start="377:32" pos:end="377:44"><expr pos:start="377:32" pos:end="377:44"><name pos:start="377:32" pos:end="377:44"><name pos:start="377:32" pos:end="377:41">serial_hds</name><index pos:start="377:42" pos:end="377:44">[<expr pos:start="377:43" pos:end="377:43"><literal type="number" pos:start="377:43" pos:end="377:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="377:47" pos:end="377:56"><expr pos:start="377:47" pos:end="377:56"><name pos:start="377:47" pos:end="377:56">ESCC_CLOCK</name></expr></argument>, <argument pos:start="377:59" pos:end="377:59"><expr pos:start="377:59" pos:end="377:59"><literal type="number" pos:start="377:59" pos:end="377:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="381:72"><expr pos:start="379:5" pos:end="381:71"><call pos:start="379:5" pos:end="381:71"><name pos:start="379:5" pos:end="379:28">memory_region_init_alias</name><argument_list pos:start="379:29" pos:end="381:71">(<argument pos:start="379:30" pos:end="379:37"><expr pos:start="379:30" pos:end="379:37"><name pos:start="379:30" pos:end="379:37">escc_bar</name></expr></argument>, <argument pos:start="379:40" pos:end="379:43"><expr pos:start="379:40" pos:end="379:43"><name pos:start="379:40" pos:end="379:43">NULL</name></expr></argument>, <argument pos:start="379:46" pos:end="379:55"><expr pos:start="379:46" pos:end="379:55"><literal type="string" pos:start="379:46" pos:end="379:55">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="381:30" pos:end="381:37"><expr pos:start="381:30" pos:end="381:37"><name pos:start="381:30" pos:end="381:37">escc_mem</name></expr></argument>, <argument pos:start="381:40" pos:end="381:40"><expr pos:start="381:40" pos:end="381:40"><literal type="number" pos:start="381:40" pos:end="381:40">0</literal></expr></argument>, <argument pos:start="381:43" pos:end="381:70"><expr pos:start="381:43" pos:end="381:70"><call pos:start="381:43" pos:end="381:70"><name pos:start="381:43" pos:end="381:60">memory_region_size</name><argument_list pos:start="381:61" pos:end="381:70">(<argument pos:start="381:62" pos:end="381:69"><expr pos:start="381:62" pos:end="381:69"><name pos:start="381:62" pos:end="381:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="385:5" pos:end="387:69">for<control pos:start="385:8" pos:end="385:32">(<init pos:start="385:9" pos:end="385:14"><expr pos:start="385:9" pos:end="385:13"><name pos:start="385:9" pos:end="385:9">i</name> <operator pos:start="385:11" pos:end="385:11">=</operator> <literal type="number" pos:start="385:13" pos:end="385:13">0</literal></expr>;</init> <condition pos:start="385:16" pos:end="385:27"><expr pos:start="385:16" pos:end="385:26"><name pos:start="385:16" pos:end="385:16">i</name> <operator pos:start="385:18" pos:end="385:18">&lt;</operator> <name pos:start="385:20" pos:end="385:26">nb_nics</name></expr>;</condition> <incr pos:start="385:29" pos:end="385:31"><expr pos:start="385:29" pos:end="385:31"><name pos:start="385:29" pos:end="385:29">i</name><operator pos:start="385:30" pos:end="385:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="387:9" pos:end="387:69"><block_content pos:start="387:9" pos:end="387:69">

        <expr_stmt pos:start="387:9" pos:end="387:69"><expr pos:start="387:9" pos:end="387:68"><call pos:start="387:9" pos:end="387:68"><name pos:start="387:9" pos:end="387:27">pci_nic_init_nofail</name><argument_list pos:start="387:28" pos:end="387:68">(<argument pos:start="387:29" pos:end="387:40"><expr pos:start="387:29" pos:end="387:40"><operator pos:start="387:29" pos:end="387:29">&amp;</operator><name pos:start="387:30" pos:end="387:40"><name pos:start="387:30" pos:end="387:37">nd_table</name><index pos:start="387:38" pos:end="387:40">[<expr pos:start="387:39" pos:end="387:39"><name pos:start="387:39" pos:end="387:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="387:43" pos:end="387:49"><expr pos:start="387:43" pos:end="387:49"><name pos:start="387:43" pos:end="387:49">pci_bus</name></expr></argument>, <argument pos:start="387:52" pos:end="387:61"><expr pos:start="387:52" pos:end="387:61"><literal type="string" pos:start="387:52" pos:end="387:61">"ne2k_pci"</literal></expr></argument>, <argument pos:start="387:64" pos:end="387:67"><expr pos:start="387:64" pos:end="387:67"><name pos:start="387:64" pos:end="387:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <expr_stmt pos:start="393:5" pos:end="393:35"><expr pos:start="393:5" pos:end="393:34"><call pos:start="393:5" pos:end="393:34"><name pos:start="393:5" pos:end="393:17">ide_drive_get</name><argument_list pos:start="393:18" pos:end="393:34">(<argument pos:start="393:19" pos:end="393:20"><expr pos:start="393:19" pos:end="393:20"><name pos:start="393:19" pos:end="393:20">hd</name></expr></argument>, <argument pos:start="393:23" pos:end="393:33"><expr pos:start="393:23" pos:end="393:33"><name pos:start="393:23" pos:end="393:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="397:5" pos:end="397:57"><expr pos:start="397:5" pos:end="397:56"><name pos:start="397:5" pos:end="397:9">macio</name> <operator pos:start="397:11" pos:end="397:11">=</operator> <call pos:start="397:13" pos:end="397:56"><name pos:start="397:13" pos:end="397:22">pci_create</name><argument_list pos:start="397:23" pos:end="397:56">(<argument pos:start="397:24" pos:end="397:30"><expr pos:start="397:24" pos:end="397:30"><name pos:start="397:24" pos:end="397:30">pci_bus</name></expr></argument>, <argument pos:start="397:33" pos:end="397:34"><expr pos:start="397:33" pos:end="397:34"><operator pos:start="397:33" pos:end="397:33">-</operator><literal type="number" pos:start="397:34" pos:end="397:34">1</literal></expr></argument>, <argument pos:start="397:37" pos:end="397:55"><expr pos:start="397:37" pos:end="397:55"><name pos:start="397:37" pos:end="397:55">TYPE_OLDWORLD_MACIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:24"><expr pos:start="399:5" pos:end="399:23"><name pos:start="399:5" pos:end="399:7">dev</name> <operator pos:start="399:9" pos:end="399:9">=</operator> <call pos:start="399:11" pos:end="399:23"><name pos:start="399:11" pos:end="399:16">DEVICE</name><argument_list pos:start="399:17" pos:end="399:23">(<argument pos:start="399:18" pos:end="399:22"><expr pos:start="399:18" pos:end="399:22"><name pos:start="399:18" pos:end="399:22">macio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:45"><expr pos:start="401:5" pos:end="401:44"><call pos:start="401:5" pos:end="401:44"><name pos:start="401:5" pos:end="401:25">qdev_connect_gpio_out</name><argument_list pos:start="401:26" pos:end="401:44">(<argument pos:start="401:27" pos:end="401:29"><expr pos:start="401:27" pos:end="401:29"><name pos:start="401:27" pos:end="401:29">dev</name></expr></argument>, <argument pos:start="401:32" pos:end="401:32"><expr pos:start="401:32" pos:end="401:32"><literal type="number" pos:start="401:32" pos:end="401:32">0</literal></expr></argument>, <argument pos:start="401:35" pos:end="401:43"><expr pos:start="401:35" pos:end="401:43"><name pos:start="401:35" pos:end="401:43"><name pos:start="401:35" pos:end="401:37">pic</name><index pos:start="401:38" pos:end="401:43">[<expr pos:start="401:39" pos:end="401:42"><literal type="number" pos:start="401:39" pos:end="401:42">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="401:47" pos:end="401:56">/* CUDA */</comment>

    <expr_stmt pos:start="403:5" pos:end="403:45"><expr pos:start="403:5" pos:end="403:44"><call pos:start="403:5" pos:end="403:44"><name pos:start="403:5" pos:end="403:25">qdev_connect_gpio_out</name><argument_list pos:start="403:26" pos:end="403:44">(<argument pos:start="403:27" pos:end="403:29"><expr pos:start="403:27" pos:end="403:29"><name pos:start="403:27" pos:end="403:29">dev</name></expr></argument>, <argument pos:start="403:32" pos:end="403:32"><expr pos:start="403:32" pos:end="403:32"><literal type="number" pos:start="403:32" pos:end="403:32">1</literal></expr></argument>, <argument pos:start="403:35" pos:end="403:43"><expr pos:start="403:35" pos:end="403:43"><name pos:start="403:35" pos:end="403:43"><name pos:start="403:35" pos:end="403:37">pic</name><index pos:start="403:38" pos:end="403:43">[<expr pos:start="403:39" pos:end="403:42"><literal type="number" pos:start="403:39" pos:end="403:42">0x0D</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="403:47" pos:end="403:57">/* IDE-0 */</comment>

    <expr_stmt pos:start="405:5" pos:end="405:45"><expr pos:start="405:5" pos:end="405:44"><call pos:start="405:5" pos:end="405:44"><name pos:start="405:5" pos:end="405:25">qdev_connect_gpio_out</name><argument_list pos:start="405:26" pos:end="405:44">(<argument pos:start="405:27" pos:end="405:29"><expr pos:start="405:27" pos:end="405:29"><name pos:start="405:27" pos:end="405:29">dev</name></expr></argument>, <argument pos:start="405:32" pos:end="405:32"><expr pos:start="405:32" pos:end="405:32"><literal type="number" pos:start="405:32" pos:end="405:32">2</literal></expr></argument>, <argument pos:start="405:35" pos:end="405:43"><expr pos:start="405:35" pos:end="405:43"><name pos:start="405:35" pos:end="405:43"><name pos:start="405:35" pos:end="405:37">pic</name><index pos:start="405:38" pos:end="405:43">[<expr pos:start="405:39" pos:end="405:42"><literal type="number" pos:start="405:39" pos:end="405:42">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="405:47" pos:end="405:61">/* IDE-0 DMA */</comment>

    <expr_stmt pos:start="407:5" pos:end="407:45"><expr pos:start="407:5" pos:end="407:44"><call pos:start="407:5" pos:end="407:44"><name pos:start="407:5" pos:end="407:25">qdev_connect_gpio_out</name><argument_list pos:start="407:26" pos:end="407:44">(<argument pos:start="407:27" pos:end="407:29"><expr pos:start="407:27" pos:end="407:29"><name pos:start="407:27" pos:end="407:29">dev</name></expr></argument>, <argument pos:start="407:32" pos:end="407:32"><expr pos:start="407:32" pos:end="407:32"><literal type="number" pos:start="407:32" pos:end="407:32">3</literal></expr></argument>, <argument pos:start="407:35" pos:end="407:43"><expr pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:37">pic</name><index pos:start="407:38" pos:end="407:43">[<expr pos:start="407:39" pos:end="407:42"><literal type="number" pos:start="407:39" pos:end="407:42">0x0E</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="407:47" pos:end="407:57">/* IDE-1 */</comment>

    <expr_stmt pos:start="409:5" pos:end="409:45"><expr pos:start="409:5" pos:end="409:44"><call pos:start="409:5" pos:end="409:44"><name pos:start="409:5" pos:end="409:25">qdev_connect_gpio_out</name><argument_list pos:start="409:26" pos:end="409:44">(<argument pos:start="409:27" pos:end="409:29"><expr pos:start="409:27" pos:end="409:29"><name pos:start="409:27" pos:end="409:29">dev</name></expr></argument>, <argument pos:start="409:32" pos:end="409:32"><expr pos:start="409:32" pos:end="409:32"><literal type="number" pos:start="409:32" pos:end="409:32">4</literal></expr></argument>, <argument pos:start="409:35" pos:end="409:43"><expr pos:start="409:35" pos:end="409:43"><name pos:start="409:35" pos:end="409:43"><name pos:start="409:35" pos:end="409:37">pic</name><index pos:start="409:38" pos:end="409:43">[<expr pos:start="409:39" pos:end="409:42"><literal type="number" pos:start="409:39" pos:end="409:42">0x03</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="409:47" pos:end="409:61">/* IDE-1 DMA */</comment>

    <expr_stmt pos:start="411:5" pos:end="411:41"><expr pos:start="411:5" pos:end="411:40"><call pos:start="411:5" pos:end="411:40"><name pos:start="411:5" pos:end="411:14">macio_init</name><argument_list pos:start="411:15" pos:end="411:40">(<argument pos:start="411:16" pos:end="411:20"><expr pos:start="411:16" pos:end="411:20"><name pos:start="411:16" pos:end="411:20">macio</name></expr></argument>, <argument pos:start="411:23" pos:end="411:29"><expr pos:start="411:23" pos:end="411:29"><name pos:start="411:23" pos:end="411:29">pic_mem</name></expr></argument>, <argument pos:start="411:32" pos:end="411:39"><expr pos:start="411:32" pos:end="411:39"><name pos:start="411:32" pos:end="411:39">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="415:5" pos:end="417:67"><expr pos:start="415:5" pos:end="417:66"><name pos:start="415:5" pos:end="415:13">macio_ide</name> <operator pos:start="415:15" pos:end="415:15">=</operator> <call pos:start="415:17" pos:end="417:66"><name pos:start="415:17" pos:end="415:25">MACIO_IDE</name><argument_list pos:start="415:26" pos:end="417:66">(<argument pos:start="415:27" pos:end="417:65"><expr pos:start="415:27" pos:end="417:65"><call pos:start="415:27" pos:end="417:65"><name pos:start="415:27" pos:end="415:55">object_resolve_path_component</name><argument_list pos:start="415:56" pos:end="417:65">(<argument pos:start="415:57" pos:end="415:69"><expr pos:start="415:57" pos:end="415:69"><call pos:start="415:57" pos:end="415:69"><name pos:start="415:57" pos:end="415:62">OBJECT</name><argument_list pos:start="415:63" pos:end="415:69">(<argument pos:start="415:64" pos:end="415:68"><expr pos:start="415:64" pos:end="415:68"><name pos:start="415:64" pos:end="415:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="417:57" pos:end="417:64"><expr pos:start="417:57" pos:end="417:64"><literal type="string" pos:start="417:57" pos:end="417:64">"ide[0]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:41"><expr pos:start="419:5" pos:end="419:40"><call pos:start="419:5" pos:end="419:40"><name pos:start="419:5" pos:end="419:25">macio_ide_init_drives</name><argument_list pos:start="419:26" pos:end="419:40">(<argument pos:start="419:27" pos:end="419:35"><expr pos:start="419:27" pos:end="419:35"><name pos:start="419:27" pos:end="419:35">macio_ide</name></expr></argument>, <argument pos:start="419:38" pos:end="419:39"><expr pos:start="419:38" pos:end="419:39"><name pos:start="419:38" pos:end="419:39">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="423:5" pos:end="425:67"><expr pos:start="423:5" pos:end="425:66"><name pos:start="423:5" pos:end="423:13">macio_ide</name> <operator pos:start="423:15" pos:end="423:15">=</operator> <call pos:start="423:17" pos:end="425:66"><name pos:start="423:17" pos:end="423:25">MACIO_IDE</name><argument_list pos:start="423:26" pos:end="425:66">(<argument pos:start="423:27" pos:end="425:65"><expr pos:start="423:27" pos:end="425:65"><call pos:start="423:27" pos:end="425:65"><name pos:start="423:27" pos:end="423:55">object_resolve_path_component</name><argument_list pos:start="423:56" pos:end="425:65">(<argument pos:start="423:57" pos:end="423:69"><expr pos:start="423:57" pos:end="423:69"><call pos:start="423:57" pos:end="423:69"><name pos:start="423:57" pos:end="423:62">OBJECT</name><argument_list pos:start="423:63" pos:end="423:69">(<argument pos:start="423:64" pos:end="423:68"><expr pos:start="423:64" pos:end="423:68"><name pos:start="423:64" pos:end="423:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="425:57" pos:end="425:64"><expr pos:start="425:57" pos:end="425:64"><literal type="string" pos:start="425:57" pos:end="425:64">"ide[1]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:56"><expr pos:start="427:5" pos:end="427:55"><call pos:start="427:5" pos:end="427:55"><name pos:start="427:5" pos:end="427:25">macio_ide_init_drives</name><argument_list pos:start="427:26" pos:end="427:55">(<argument pos:start="427:27" pos:end="427:35"><expr pos:start="427:27" pos:end="427:35"><name pos:start="427:27" pos:end="427:35">macio_ide</name></expr></argument>, <argument pos:start="427:38" pos:end="427:54"><expr pos:start="427:38" pos:end="427:54"><operator pos:start="427:38" pos:end="427:38">&amp;</operator><name pos:start="427:39" pos:end="427:54"><name pos:start="427:39" pos:end="427:40">hd</name><index pos:start="427:41" pos:end="427:54">[<expr pos:start="427:42" pos:end="427:53"><name pos:start="427:42" pos:end="427:53">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="431:5" pos:end="431:71"><expr pos:start="431:5" pos:end="431:70"><name pos:start="431:5" pos:end="431:7">dev</name> <operator pos:start="431:9" pos:end="431:9">=</operator> <call pos:start="431:11" pos:end="431:70"><name pos:start="431:11" pos:end="431:16">DEVICE</name><argument_list pos:start="431:17" pos:end="431:70">(<argument pos:start="431:18" pos:end="431:69"><expr pos:start="431:18" pos:end="431:69"><call pos:start="431:18" pos:end="431:69"><name pos:start="431:18" pos:end="431:46">object_resolve_path_component</name><argument_list pos:start="431:47" pos:end="431:69">(<argument pos:start="431:48" pos:end="431:60"><expr pos:start="431:48" pos:end="431:60"><call pos:start="431:48" pos:end="431:60"><name pos:start="431:48" pos:end="431:53">OBJECT</name><argument_list pos:start="431:54" pos:end="431:60">(<argument pos:start="431:55" pos:end="431:59"><expr pos:start="431:55" pos:end="431:59"><name pos:start="431:55" pos:end="431:59">macio</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="431:63" pos:end="431:68"><expr pos:start="431:63" pos:end="431:68"><literal type="string" pos:start="431:63" pos:end="431:68">"cuda"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:47"><expr pos:start="433:5" pos:end="433:46"><name pos:start="433:5" pos:end="433:11">adb_bus</name> <operator pos:start="433:13" pos:end="433:13">=</operator> <call pos:start="433:15" pos:end="433:46"><name pos:start="433:15" pos:end="433:32">qdev_get_child_bus</name><argument_list pos:start="433:33" pos:end="433:46">(<argument pos:start="433:34" pos:end="433:36"><expr pos:start="433:34" pos:end="433:36"><name pos:start="433:34" pos:end="433:36">dev</name></expr></argument>, <argument pos:start="433:39" pos:end="433:45"><expr pos:start="433:39" pos:end="433:45"><literal type="string" pos:start="433:39" pos:end="433:45">"adb.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:50"><expr pos:start="435:5" pos:end="435:49"><name pos:start="435:5" pos:end="435:7">dev</name> <operator pos:start="435:9" pos:end="435:9">=</operator> <call pos:start="435:11" pos:end="435:49"><name pos:start="435:11" pos:end="435:21">qdev_create</name><argument_list pos:start="435:22" pos:end="435:49">(<argument pos:start="435:23" pos:end="435:29"><expr pos:start="435:23" pos:end="435:29"><name pos:start="435:23" pos:end="435:29">adb_bus</name></expr></argument>, <argument pos:start="435:32" pos:end="435:48"><expr pos:start="435:32" pos:end="435:48"><name pos:start="435:32" pos:end="435:48">TYPE_ADB_KEYBOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:26"><expr pos:start="437:5" pos:end="437:25"><call pos:start="437:5" pos:end="437:25"><name pos:start="437:5" pos:end="437:20">qdev_init_nofail</name><argument_list pos:start="437:21" pos:end="437:25">(<argument pos:start="437:22" pos:end="437:24"><expr pos:start="437:22" pos:end="437:24"><name pos:start="437:22" pos:end="437:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:47"><expr pos:start="439:5" pos:end="439:46"><name pos:start="439:5" pos:end="439:7">dev</name> <operator pos:start="439:9" pos:end="439:9">=</operator> <call pos:start="439:11" pos:end="439:46"><name pos:start="439:11" pos:end="439:21">qdev_create</name><argument_list pos:start="439:22" pos:end="439:46">(<argument pos:start="439:23" pos:end="439:29"><expr pos:start="439:23" pos:end="439:29"><name pos:start="439:23" pos:end="439:29">adb_bus</name></expr></argument>, <argument pos:start="439:32" pos:end="439:45"><expr pos:start="439:32" pos:end="439:45"><name pos:start="439:32" pos:end="439:45">TYPE_ADB_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:26"><expr pos:start="441:5" pos:end="441:25"><call pos:start="441:5" pos:end="441:25"><name pos:start="441:5" pos:end="441:20">qdev_init_nofail</name><argument_list pos:start="441:21" pos:end="441:25">(<argument pos:start="441:22" pos:end="441:24"><expr pos:start="441:22" pos:end="441:24"><name pos:start="441:22" pos:end="441:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="445:5" pos:end="449:5"><if pos:start="445:5" pos:end="449:5">if <condition pos:start="445:8" pos:end="445:27">(<expr pos:start="445:9" pos:end="445:26"><call pos:start="445:9" pos:end="445:26"><name pos:start="445:9" pos:end="445:19">usb_enabled</name><argument_list pos:start="445:20" pos:end="445:26">(<argument pos:start="445:21" pos:end="445:25"><expr pos:start="445:21" pos:end="445:25"><name pos:start="445:21" pos:end="445:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="445:29" pos:end="449:5">{<block_content pos:start="447:9" pos:end="447:51">

        <expr_stmt pos:start="447:9" pos:end="447:51"><expr pos:start="447:9" pos:end="447:50"><call pos:start="447:9" pos:end="447:50"><name pos:start="447:9" pos:end="447:25">pci_create_simple</name><argument_list pos:start="447:26" pos:end="447:50">(<argument pos:start="447:27" pos:end="447:33"><expr pos:start="447:27" pos:end="447:33"><name pos:start="447:27" pos:end="447:33">pci_bus</name></expr></argument>, <argument pos:start="447:36" pos:end="447:37"><expr pos:start="447:36" pos:end="447:37"><operator pos:start="447:36" pos:end="447:36">-</operator><literal type="number" pos:start="447:37" pos:end="447:37">1</literal></expr></argument>, <argument pos:start="447:40" pos:end="447:49"><expr pos:start="447:40" pos:end="447:49"><literal type="string" pos:start="447:40" pos:end="447:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="453:5" pos:end="455:27"><if pos:start="453:5" pos:end="455:27">if <condition pos:start="453:8" pos:end="453:73">(<expr pos:start="453:9" pos:end="453:72"><name pos:start="453:9" pos:end="453:21">graphic_depth</name> <operator pos:start="453:23" pos:end="453:24">!=</operator> <literal type="number" pos:start="453:26" pos:end="453:27">15</literal> <operator pos:start="453:29" pos:end="453:30">&amp;&amp;</operator> <name pos:start="453:32" pos:end="453:44">graphic_depth</name> <operator pos:start="453:46" pos:end="453:47">!=</operator> <literal type="number" pos:start="453:49" pos:end="453:50">32</literal> <operator pos:start="453:52" pos:end="453:53">&amp;&amp;</operator> <name pos:start="453:55" pos:end="453:67">graphic_depth</name> <operator pos:start="453:69" pos:end="453:70">!=</operator> <literal type="number" pos:start="453:72" pos:end="453:72">8</literal></expr>)</condition><block type="pseudo" pos:start="455:9" pos:end="455:27"><block_content pos:start="455:9" pos:end="455:27">

        <expr_stmt pos:start="455:9" pos:end="455:27"><expr pos:start="455:9" pos:end="455:26"><name pos:start="455:9" pos:end="455:21">graphic_depth</name> <operator pos:start="455:23" pos:end="455:23">=</operator> <literal type="number" pos:start="455:25" pos:end="455:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="459:5" pos:end="459:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="463:5" pos:end="463:55"><expr pos:start="463:5" pos:end="463:54"><name pos:start="463:5" pos:end="463:10">fw_cfg</name> <operator pos:start="463:12" pos:end="463:12">=</operator> <call pos:start="463:14" pos:end="463:54"><name pos:start="463:14" pos:end="463:24">fw_cfg_init</name><argument_list pos:start="463:25" pos:end="463:54">(<argument pos:start="463:26" pos:end="463:26"><expr pos:start="463:26" pos:end="463:26"><literal type="number" pos:start="463:26" pos:end="463:26">0</literal></expr></argument>, <argument pos:start="463:29" pos:end="463:29"><expr pos:start="463:29" pos:end="463:29"><literal type="number" pos:start="463:29" pos:end="463:29">0</literal></expr></argument>, <argument pos:start="463:32" pos:end="463:39"><expr pos:start="463:32" pos:end="463:39"><name pos:start="463:32" pos:end="463:39">CFG_ADDR</name></expr></argument>, <argument pos:start="463:42" pos:end="463:53"><expr pos:start="463:42" pos:end="463:53"><name pos:start="463:42" pos:end="463:49">CFG_ADDR</name> <operator pos:start="463:51" pos:end="463:51">+</operator> <literal type="number" pos:start="463:53" pos:end="463:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:64"><expr pos:start="465:5" pos:end="465:63"><call pos:start="465:5" pos:end="465:63"><name pos:start="465:5" pos:end="465:18">fw_cfg_add_i16</name><argument_list pos:start="465:19" pos:end="465:63">(<argument pos:start="465:20" pos:end="465:25"><expr pos:start="465:20" pos:end="465:25"><name pos:start="465:20" pos:end="465:25">fw_cfg</name></expr></argument>, <argument pos:start="465:28" pos:end="465:42"><expr pos:start="465:28" pos:end="465:42"><name pos:start="465:28" pos:end="465:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="465:45" pos:end="465:62"><expr pos:start="465:45" pos:end="465:62"><operator pos:start="465:45" pos:end="465:45">(</operator><name pos:start="465:46" pos:end="465:53">uint16_t</name><operator pos:start="465:54" pos:end="465:54">)</operator><name pos:start="465:55" pos:end="465:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="467:41"><expr pos:start="467:5" pos:end="467:40"><call pos:start="467:5" pos:end="467:40"><name pos:start="467:5" pos:end="467:18">fw_cfg_add_i32</name><argument_list pos:start="467:19" pos:end="467:40">(<argument pos:start="467:20" pos:end="467:25"><expr pos:start="467:20" pos:end="467:25"><name pos:start="467:20" pos:end="467:25">fw_cfg</name></expr></argument>, <argument pos:start="467:28" pos:end="467:36"><expr pos:start="467:28" pos:end="467:36"><name pos:start="467:28" pos:end="467:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="467:39" pos:end="467:39"><expr pos:start="467:39" pos:end="467:39"><literal type="number" pos:start="467:39" pos:end="467:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="469:5" pos:end="469:64"><expr pos:start="469:5" pos:end="469:63"><call pos:start="469:5" pos:end="469:63"><name pos:start="469:5" pos:end="469:18">fw_cfg_add_i64</name><argument_list pos:start="469:19" pos:end="469:63">(<argument pos:start="469:20" pos:end="469:25"><expr pos:start="469:20" pos:end="469:25"><name pos:start="469:20" pos:end="469:25">fw_cfg</name></expr></argument>, <argument pos:start="469:28" pos:end="469:42"><expr pos:start="469:28" pos:end="469:42"><name pos:start="469:28" pos:end="469:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="469:45" pos:end="469:62"><expr pos:start="469:45" pos:end="469:62"><operator pos:start="469:45" pos:end="469:45">(</operator><name pos:start="469:46" pos:end="469:53">uint64_t</name><operator pos:start="469:54" pos:end="469:54">)</operator><name pos:start="469:55" pos:end="469:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:61"><expr pos:start="471:5" pos:end="471:60"><call pos:start="471:5" pos:end="471:60"><name pos:start="471:5" pos:end="471:18">fw_cfg_add_i16</name><argument_list pos:start="471:19" pos:end="471:60">(<argument pos:start="471:20" pos:end="471:25"><expr pos:start="471:20" pos:end="471:25"><name pos:start="471:20" pos:end="471:25">fw_cfg</name></expr></argument>, <argument pos:start="471:28" pos:end="471:44"><expr pos:start="471:28" pos:end="471:44"><name pos:start="471:28" pos:end="471:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="471:47" pos:end="471:59"><expr pos:start="471:47" pos:end="471:59"><name pos:start="471:47" pos:end="471:59">ARCH_HEATHROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:60"><expr pos:start="473:5" pos:end="473:59"><call pos:start="473:5" pos:end="473:59"><name pos:start="473:5" pos:end="473:18">fw_cfg_add_i32</name><argument_list pos:start="473:19" pos:end="473:59">(<argument pos:start="473:20" pos:end="473:25"><expr pos:start="473:20" pos:end="473:25"><name pos:start="473:20" pos:end="473:25">fw_cfg</name></expr></argument>, <argument pos:start="473:28" pos:end="473:45"><expr pos:start="473:28" pos:end="473:45"><name pos:start="473:28" pos:end="473:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="473:48" pos:end="473:58"><expr pos:start="473:48" pos:end="473:58"><name pos:start="473:48" pos:end="473:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:60"><expr pos:start="475:5" pos:end="475:59"><call pos:start="475:5" pos:end="475:59"><name pos:start="475:5" pos:end="475:18">fw_cfg_add_i32</name><argument_list pos:start="475:19" pos:end="475:59">(<argument pos:start="475:20" pos:end="475:25"><expr pos:start="475:20" pos:end="475:25"><name pos:start="475:20" pos:end="475:25">fw_cfg</name></expr></argument>, <argument pos:start="475:28" pos:end="475:45"><expr pos:start="475:28" pos:end="475:45"><name pos:start="475:28" pos:end="475:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="475:48" pos:end="475:58"><expr pos:start="475:48" pos:end="475:58"><name pos:start="475:48" pos:end="475:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="477:5" pos:end="487:5"><if pos:start="477:5" pos:end="483:5">if <condition pos:start="477:8" pos:end="477:23">(<expr pos:start="477:9" pos:end="477:22"><name pos:start="477:9" pos:end="477:22">kernel_cmdline</name></expr>)</condition> <block pos:start="477:25" pos:end="483:5">{<block_content pos:start="479:9" pos:end="481:84">

        <expr_stmt pos:start="479:9" pos:end="479:68"><expr pos:start="479:9" pos:end="479:67"><call pos:start="479:9" pos:end="479:67"><name pos:start="479:9" pos:end="479:22">fw_cfg_add_i32</name><argument_list pos:start="479:23" pos:end="479:67">(<argument pos:start="479:24" pos:end="479:29"><expr pos:start="479:24" pos:end="479:29"><name pos:start="479:24" pos:end="479:29">fw_cfg</name></expr></argument>, <argument pos:start="479:32" pos:end="479:52"><expr pos:start="479:32" pos:end="479:52"><name pos:start="479:32" pos:end="479:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="479:55" pos:end="479:66"><expr pos:start="479:55" pos:end="479:66"><name pos:start="479:55" pos:end="479:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:84"><expr pos:start="481:9" pos:end="481:83"><call pos:start="481:9" pos:end="481:83"><name pos:start="481:9" pos:end="481:24">pstrcpy_targphys</name><argument_list pos:start="481:25" pos:end="481:83">(<argument pos:start="481:26" pos:end="481:34"><expr pos:start="481:26" pos:end="481:34"><literal type="string" pos:start="481:26" pos:end="481:34">"cmdline"</literal></expr></argument>, <argument pos:start="481:37" pos:end="481:48"><expr pos:start="481:37" pos:end="481:48"><name pos:start="481:37" pos:end="481:48">cmdline_base</name></expr></argument>, <argument pos:start="481:51" pos:end="481:66"><expr pos:start="481:51" pos:end="481:66"><name pos:start="481:51" pos:end="481:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="481:69" pos:end="481:82"><expr pos:start="481:69" pos:end="481:82"><name pos:start="481:69" pos:end="481:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="483:7" pos:end="487:5">else <block pos:start="483:12" pos:end="487:5">{<block_content pos:start="485:9" pos:end="485:57">

        <expr_stmt pos:start="485:9" pos:end="485:57"><expr pos:start="485:9" pos:end="485:56"><call pos:start="485:9" pos:end="485:56"><name pos:start="485:9" pos:end="485:22">fw_cfg_add_i32</name><argument_list pos:start="485:23" pos:end="485:56">(<argument pos:start="485:24" pos:end="485:29"><expr pos:start="485:24" pos:end="485:29"><name pos:start="485:24" pos:end="485:29">fw_cfg</name></expr></argument>, <argument pos:start="485:32" pos:end="485:52"><expr pos:start="485:32" pos:end="485:52"><name pos:start="485:32" pos:end="485:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="485:55" pos:end="485:55"><expr pos:start="485:55" pos:end="485:55"><literal type="number" pos:start="485:55" pos:end="485:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:60"><expr pos:start="489:5" pos:end="489:59"><call pos:start="489:5" pos:end="489:59"><name pos:start="489:5" pos:end="489:18">fw_cfg_add_i32</name><argument_list pos:start="489:19" pos:end="489:59">(<argument pos:start="489:20" pos:end="489:25"><expr pos:start="489:20" pos:end="489:25"><name pos:start="489:20" pos:end="489:25">fw_cfg</name></expr></argument>, <argument pos:start="489:28" pos:end="489:45"><expr pos:start="489:28" pos:end="489:45"><name pos:start="489:28" pos:end="489:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="489:48" pos:end="489:58"><expr pos:start="489:48" pos:end="489:58"><name pos:start="489:48" pos:end="489:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:60"><expr pos:start="491:5" pos:end="491:59"><call pos:start="491:5" pos:end="491:59"><name pos:start="491:5" pos:end="491:18">fw_cfg_add_i32</name><argument_list pos:start="491:19" pos:end="491:59">(<argument pos:start="491:20" pos:end="491:25"><expr pos:start="491:20" pos:end="491:25"><name pos:start="491:20" pos:end="491:25">fw_cfg</name></expr></argument>, <argument pos:start="491:28" pos:end="491:45"><expr pos:start="491:28" pos:end="491:45"><name pos:start="491:28" pos:end="491:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="491:48" pos:end="491:58"><expr pos:start="491:48" pos:end="491:58"><name pos:start="491:48" pos:end="491:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:64"><expr pos:start="493:5" pos:end="493:63"><call pos:start="493:5" pos:end="493:63"><name pos:start="493:5" pos:end="493:18">fw_cfg_add_i16</name><argument_list pos:start="493:19" pos:end="493:63">(<argument pos:start="493:20" pos:end="493:25"><expr pos:start="493:20" pos:end="493:25"><name pos:start="493:20" pos:end="493:25">fw_cfg</name></expr></argument>, <argument pos:start="493:28" pos:end="493:45"><expr pos:start="493:28" pos:end="493:45"><name pos:start="493:28" pos:end="493:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="493:48" pos:end="493:62"><expr pos:start="493:48" pos:end="493:62"><name pos:start="493:48" pos:end="493:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="497:5" pos:end="497:60"><expr pos:start="497:5" pos:end="497:59"><call pos:start="497:5" pos:end="497:59"><name pos:start="497:5" pos:end="497:18">fw_cfg_add_i16</name><argument_list pos:start="497:19" pos:end="497:59">(<argument pos:start="497:20" pos:end="497:25"><expr pos:start="497:20" pos:end="497:25"><name pos:start="497:20" pos:end="497:25">fw_cfg</name></expr></argument>, <argument pos:start="497:28" pos:end="497:43"><expr pos:start="497:28" pos:end="497:43"><name pos:start="497:28" pos:end="497:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="497:46" pos:end="497:58"><expr pos:start="497:46" pos:end="497:58"><name pos:start="497:46" pos:end="497:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:62"><expr pos:start="499:5" pos:end="499:61"><call pos:start="499:5" pos:end="499:61"><name pos:start="499:5" pos:end="499:18">fw_cfg_add_i16</name><argument_list pos:start="499:19" pos:end="499:61">(<argument pos:start="499:20" pos:end="499:25"><expr pos:start="499:20" pos:end="499:25"><name pos:start="499:20" pos:end="499:25">fw_cfg</name></expr></argument>, <argument pos:start="499:28" pos:end="499:44"><expr pos:start="499:28" pos:end="499:44"><name pos:start="499:28" pos:end="499:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="499:47" pos:end="499:60"><expr pos:start="499:47" pos:end="499:60"><name pos:start="499:47" pos:end="499:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:60"><expr pos:start="501:5" pos:end="501:59"><call pos:start="501:5" pos:end="501:59"><name pos:start="501:5" pos:end="501:18">fw_cfg_add_i16</name><argument_list pos:start="501:19" pos:end="501:59">(<argument pos:start="501:20" pos:end="501:25"><expr pos:start="501:20" pos:end="501:25"><name pos:start="501:20" pos:end="501:25">fw_cfg</name></expr></argument>, <argument pos:start="501:28" pos:end="501:43"><expr pos:start="501:28" pos:end="501:43"><name pos:start="501:28" pos:end="501:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="501:46" pos:end="501:58"><expr pos:start="501:46" pos:end="501:58"><name pos:start="501:46" pos:end="501:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="505:5" pos:end="505:61"><expr pos:start="505:5" pos:end="505:60"><call pos:start="505:5" pos:end="505:60"><name pos:start="505:5" pos:end="505:18">fw_cfg_add_i32</name><argument_list pos:start="505:19" pos:end="505:60">(<argument pos:start="505:20" pos:end="505:25"><expr pos:start="505:20" pos:end="505:25"><name pos:start="505:20" pos:end="505:25">fw_cfg</name></expr></argument>, <argument pos:start="505:28" pos:end="505:44"><expr pos:start="505:28" pos:end="505:44"><name pos:start="505:28" pos:end="505:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="505:47" pos:end="505:59"><expr pos:start="505:47" pos:end="505:59"><call pos:start="505:47" pos:end="505:59"><name pos:start="505:47" pos:end="505:57">kvm_enabled</name><argument_list pos:start="505:58" pos:end="505:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="507:5" pos:end="531:5"><if pos:start="507:5" pos:end="527:5">if <condition pos:start="507:8" pos:end="507:22">(<expr pos:start="507:9" pos:end="507:21"><call pos:start="507:9" pos:end="507:21"><name pos:start="507:9" pos:end="507:19">kvm_enabled</name><argument_list pos:start="507:20" pos:end="507:21">()</argument_list></call></expr>)</condition> <block pos:start="507:24" pos:end="527:5">{<block_content pos:start="511:9" pos:end="526:0">

<cpp:ifdef pos:start="509:1" pos:end="509:17">#<cpp:directive pos:start="509:2" pos:end="509:6">ifdef</cpp:directive> <name pos:start="509:8" pos:end="509:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="511:9" pos:end="511:27"><decl pos:start="511:9" pos:end="511:26"><type pos:start="511:9" pos:end="511:17"><name pos:start="511:9" pos:end="511:15">uint8_t</name> <modifier pos:start="511:17" pos:end="511:17">*</modifier></type><name pos:start="511:18" pos:end="511:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="515:9" pos:end="515:71"><expr pos:start="515:9" pos:end="515:70"><call pos:start="515:9" pos:end="515:70"><name pos:start="515:9" pos:end="515:22">fw_cfg_add_i32</name><argument_list pos:start="515:23" pos:end="515:70">(<argument pos:start="515:24" pos:end="515:29"><expr pos:start="515:24" pos:end="515:29"><name pos:start="515:24" pos:end="515:29">fw_cfg</name></expr></argument>, <argument pos:start="515:32" pos:end="515:48"><expr pos:start="515:32" pos:end="515:48"><name pos:start="515:32" pos:end="515:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="515:51" pos:end="515:69"><expr pos:start="515:51" pos:end="515:69"><call pos:start="515:51" pos:end="515:69"><name pos:start="515:51" pos:end="515:67">kvmppc_get_tbfreq</name><argument_list pos:start="515:68" pos:end="515:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:33"><expr pos:start="517:9" pos:end="517:32"><name pos:start="517:9" pos:end="517:17">hypercall</name> <operator pos:start="517:19" pos:end="517:19">=</operator> <call pos:start="517:21" pos:end="517:32"><name pos:start="517:21" pos:end="517:28">g_malloc</name><argument_list pos:start="517:29" pos:end="517:32">(<argument pos:start="517:30" pos:end="517:31"><expr pos:start="517:30" pos:end="517:31"><literal type="number" pos:start="517:30" pos:end="517:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="519:9" pos:end="519:49"><expr pos:start="519:9" pos:end="519:48"><call pos:start="519:9" pos:end="519:48"><name pos:start="519:9" pos:end="519:28">kvmppc_get_hypercall</name><argument_list pos:start="519:29" pos:end="519:48">(<argument pos:start="519:30" pos:end="519:32"><expr pos:start="519:30" pos:end="519:32"><name pos:start="519:30" pos:end="519:32">env</name></expr></argument>, <argument pos:start="519:35" pos:end="519:43"><expr pos:start="519:35" pos:end="519:43"><name pos:start="519:35" pos:end="519:43">hypercall</name></expr></argument>, <argument pos:start="519:46" pos:end="519:47"><expr pos:start="519:46" pos:end="519:47"><literal type="number" pos:start="519:46" pos:end="519:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="521:9" pos:end="521:67"><expr pos:start="521:9" pos:end="521:66"><call pos:start="521:9" pos:end="521:66"><name pos:start="521:9" pos:end="521:24">fw_cfg_add_bytes</name><argument_list pos:start="521:25" pos:end="521:66">(<argument pos:start="521:26" pos:end="521:31"><expr pos:start="521:26" pos:end="521:31"><name pos:start="521:26" pos:end="521:31">fw_cfg</name></expr></argument>, <argument pos:start="521:34" pos:end="521:50"><expr pos:start="521:34" pos:end="521:50"><name pos:start="521:34" pos:end="521:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="521:53" pos:end="521:61"><expr pos:start="521:53" pos:end="521:61"><name pos:start="521:53" pos:end="521:61">hypercall</name></expr></argument>, <argument pos:start="521:64" pos:end="521:65"><expr pos:start="521:64" pos:end="521:65"><literal type="number" pos:start="521:64" pos:end="521:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="523:9" pos:end="526:0"><expr pos:start="523:9" pos:end="523:60"><call pos:start="523:9" pos:end="523:60"><name pos:start="523:9" pos:end="523:22">fw_cfg_add_i32</name><argument_list pos:start="523:23" pos:end="523:60">(<argument pos:start="523:24" pos:end="523:29"><expr pos:start="523:24" pos:end="523:29"><name pos:start="523:24" pos:end="523:29">fw_cfg</name></expr></argument>, <argument pos:start="523:32" pos:end="523:49"><expr pos:start="523:32" pos:end="523:49"><name pos:start="523:32" pos:end="523:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="523:52" pos:end="523:59"><expr pos:start="523:52" pos:end="523:59"><call pos:start="523:52" pos:end="523:59"><name pos:start="523:52" pos:end="523:57">getpid</name><argument_list pos:start="523:58" pos:end="523:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="525:1" pos:end="525:6">#<cpp:directive pos:start="525:2" pos:end="525:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="527:7" pos:end="531:5">else <block pos:start="527:12" pos:end="531:5">{<block_content pos:start="529:9" pos:end="529:58">

        <expr_stmt pos:start="529:9" pos:end="529:58"><expr pos:start="529:9" pos:end="529:57"><call pos:start="529:9" pos:end="529:57"><name pos:start="529:9" pos:end="529:22">fw_cfg_add_i32</name><argument_list pos:start="529:23" pos:end="529:57">(<argument pos:start="529:24" pos:end="529:29"><expr pos:start="529:24" pos:end="529:29"><name pos:start="529:24" pos:end="529:29">fw_cfg</name></expr></argument>, <argument pos:start="529:32" pos:end="529:48"><expr pos:start="529:32" pos:end="529:48"><name pos:start="529:32" pos:end="529:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="529:51" pos:end="529:56"><expr pos:start="529:51" pos:end="529:56"><name pos:start="529:51" pos:end="529:56">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="533:5" pos:end="533:78">/* Mac OS X requires a "known good" clock-frequency value; pass it one. */</comment>

    <expr_stmt pos:start="535:5" pos:end="535:60"><expr pos:start="535:5" pos:end="535:59"><call pos:start="535:5" pos:end="535:59"><name pos:start="535:5" pos:end="535:18">fw_cfg_add_i32</name><argument_list pos:start="535:19" pos:end="535:59">(<argument pos:start="535:20" pos:end="535:25"><expr pos:start="535:20" pos:end="535:25"><name pos:start="535:20" pos:end="535:25">fw_cfg</name></expr></argument>, <argument pos:start="535:28" pos:end="535:47"><expr pos:start="535:28" pos:end="535:47"><name pos:start="535:28" pos:end="535:47">FW_CFG_PPC_CLOCKFREQ</name></expr></argument>, <argument pos:start="535:50" pos:end="535:58"><expr pos:start="535:50" pos:end="535:58"><name pos:start="535:50" pos:end="535:58">CLOCKFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="537:5" pos:end="537:56"><expr pos:start="537:5" pos:end="537:55"><call pos:start="537:5" pos:end="537:55"><name pos:start="537:5" pos:end="537:18">fw_cfg_add_i32</name><argument_list pos:start="537:19" pos:end="537:55">(<argument pos:start="537:20" pos:end="537:25"><expr pos:start="537:20" pos:end="537:25"><name pos:start="537:20" pos:end="537:25">fw_cfg</name></expr></argument>, <argument pos:start="537:28" pos:end="537:45"><expr pos:start="537:28" pos:end="537:45"><name pos:start="537:28" pos:end="537:45">FW_CFG_PPC_BUSFREQ</name></expr></argument>, <argument pos:start="537:48" pos:end="537:54"><expr pos:start="537:48" pos:end="537:54"><name pos:start="537:48" pos:end="537:54">BUSFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="541:5" pos:end="541:52"><expr pos:start="541:5" pos:end="541:51"><call pos:start="541:5" pos:end="541:51"><name pos:start="541:5" pos:end="541:26">qemu_register_boot_set</name><argument_list pos:start="541:27" pos:end="541:51">(<argument pos:start="541:28" pos:end="541:42"><expr pos:start="541:28" pos:end="541:42"><name pos:start="541:28" pos:end="541:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="541:45" pos:end="541:50"><expr pos:start="541:45" pos:end="541:50"><name pos:start="541:45" pos:end="541:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
