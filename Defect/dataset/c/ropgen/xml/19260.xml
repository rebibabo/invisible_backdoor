<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19260.c" pos:tabs="8"><function pos:start="1:1" pos:end="1599:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:16">tcg_target_ulong</name></type> <name pos:start="1:18" pos:end="1:33">tcg_qemu_tb_exec</name><parameter_list pos:start="1:34" pos:end="1:74">(<parameter pos:start="1:35" pos:end="1:56"><decl pos:start="1:35" pos:end="1:56"><type pos:start="1:35" pos:end="1:56"><name pos:start="1:35" pos:end="1:46">CPUArchState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:56">cpustate</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:73"><decl pos:start="1:59" pos:end="1:73"><type pos:start="1:59" pos:end="1:73"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:73">tb_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1599:1">{<block_content pos:start="5:5" pos:end="1597:19">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20">tcg_target_ulong</name></type> <name pos:start="5:22" pos:end="5:28">next_tb</name> <init pos:start="5:30" pos:end="5:32">= <expr pos:start="5:32" pos:end="5:32"><literal type="number" pos:start="5:32" pos:end="5:32">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:19"><expr pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:7">env</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <name pos:start="9:11" pos:end="9:18">cpustate</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:47"><expr pos:start="11:5" pos:end="11:46"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:11">tci_reg</name><index pos:start="11:12" pos:end="11:22">[<expr pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:21">TCG_AREG0</name></expr>]</index></name> <operator pos:start="11:24" pos:end="11:24">=</operator> <operator pos:start="11:26" pos:end="11:26">(</operator><name pos:start="11:27" pos:end="11:42">tcg_target_ulong</name><operator pos:start="11:43" pos:end="11:43">)</operator><name pos:start="11:44" pos:end="11:46">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><call pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:18">(<argument pos:start="13:12" pos:end="13:17"><expr pos:start="13:12" pos:end="13:17"><name pos:start="13:12" pos:end="13:17">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="17:5" pos:end="1593:5">for <control pos:start="17:9" pos:end="17:12">(<init pos:start="17:10" pos:end="17:10">;</init><condition pos:start="17:11" pos:end="17:11">;</condition><incr/>)</control> <block pos:start="17:14" pos:end="1593:5">{<block_content pos:start="21:9" pos:end="1591:49">

<cpp:if pos:start="19:1" pos:end="19:18">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:18"><call pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:18">(<argument pos:start="19:13" pos:end="19:17"><expr pos:start="19:13" pos:end="19:17"><name pos:start="19:13" pos:end="19:17">GETPC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="21:9" pos:end="24:0"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:18">tci_tb_ptr</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:31">uintptr_t</name><operator pos:start="21:32" pos:end="21:32">)</operator><name pos:start="21:33" pos:end="21:38">tb_ptr</name></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="25:9" pos:end="28:0"><decl pos:start="25:9" pos:end="25:33"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:17">TCGOpcode</name></type> <name pos:start="25:19" pos:end="25:21">opc</name> <init pos:start="25:23" pos:end="25:33">= <expr pos:start="25:25" pos:end="25:33"><name pos:start="25:25" pos:end="25:33"><name pos:start="25:25" pos:end="25:30">tb_ptr</name><index pos:start="25:31" pos:end="25:33">[<expr pos:start="25:32" pos:end="25:32"><literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="27:1" pos:end="27:20">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:20"><operator pos:start="27:5" pos:end="27:5">!</operator><call pos:start="27:6" pos:end="27:20"><name pos:start="27:6" pos:end="27:12">defined</name><argument_list pos:start="27:13" pos:end="27:20">(<argument pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:19"><name pos:start="27:14" pos:end="27:19">NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="29:9" pos:end="29:36"><decl pos:start="29:9" pos:end="29:35"><type pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:15">uint8_t</name></type> <name pos:start="29:17" pos:end="29:23">op_size</name> <init pos:start="29:25" pos:end="29:35">= <expr pos:start="29:27" pos:end="29:35"><name pos:start="29:27" pos:end="29:35"><name pos:start="29:27" pos:end="29:32">tb_ptr</name><index pos:start="29:33" pos:end="29:35">[<expr pos:start="29:34" pos:end="29:34"><literal type="number" pos:start="29:34" pos:end="29:34">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="34:0"><decl pos:start="31:9" pos:end="31:38"><type pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:15">uint8_t</name> <modifier pos:start="31:17" pos:end="31:17">*</modifier></type><name pos:start="31:18" pos:end="31:29">old_code_ptr</name> <init pos:start="31:31" pos:end="31:38">= <expr pos:start="31:33" pos:end="31:38"><name pos:start="31:33" pos:end="31:38">tb_ptr</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="35:9" pos:end="35:28"><decl pos:start="35:9" pos:end="35:27"><type pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:24">tcg_target_ulong</name></type> <name pos:start="35:26" pos:end="35:27">t0</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:28"><decl pos:start="37:9" pos:end="37:27"><type pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">tcg_target_ulong</name></type> <name pos:start="37:26" pos:end="37:27">t1</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:28"><decl pos:start="39:9" pos:end="39:27"><type pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:24">tcg_target_ulong</name></type> <name pos:start="39:26" pos:end="39:27">t2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:31"><decl pos:start="41:9" pos:end="41:30"><type pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:24">tcg_target_ulong</name></type> <name pos:start="41:26" pos:end="41:30">label</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:26"><decl pos:start="43:9" pos:end="43:25"><type pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:15">TCGCond</name></type> <name pos:start="43:17" pos:end="43:25">condition</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="48:0"><decl pos:start="45:9" pos:end="45:26"><type pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:20">target_ulong</name></type> <name pos:start="45:22" pos:end="45:26">taddr</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="47:1" pos:end="47:22">#<cpp:directive pos:start="47:2" pos:end="47:7">ifndef</cpp:directive> <name pos:start="47:9" pos:end="47:22">CONFIG_SOFTMMU</name></cpp:ifndef>

        <decl_stmt pos:start="49:9" pos:end="52:0"><decl pos:start="49:9" pos:end="49:34"><type pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:24">tcg_target_ulong</name></type> <name pos:start="49:26" pos:end="49:34">host_addr</name></decl>;</decl_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="53:9" pos:end="53:21"><decl pos:start="53:9" pos:end="53:20"><type pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:15">uint8_t</name></type> <name pos:start="53:17" pos:end="53:20">tmp8</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:23"><decl pos:start="55:9" pos:end="55:22"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint16_t</name></type> <name pos:start="55:18" pos:end="55:22">tmp16</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:23"><decl pos:start="57:9" pos:end="57:22"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">uint32_t</name></type> <name pos:start="57:18" pos:end="57:22">tmp32</name></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="62:0"><decl pos:start="59:9" pos:end="59:22"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint64_t</name></type> <name pos:start="59:18" pos:end="59:22">tmp64</name></decl>;</decl_stmt>

<cpp:if pos:start="61:1" pos:end="61:29">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:23">TCG_TARGET_REG_BITS</name> <operator pos:start="61:25" pos:end="61:26">==</operator> <literal type="number" pos:start="61:28" pos:end="61:29">32</literal></expr></cpp:if>

        <decl_stmt pos:start="63:9" pos:end="66:0"><decl pos:start="63:9" pos:end="63:20"><type pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">uint64_t</name></type> <name pos:start="63:18" pos:end="63:20">v64</name></decl>;</decl_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="69:9" pos:end="69:41">/* Skip opcode and size entry. */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:20"><expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:14">tb_ptr</name> <operator pos:start="71:16" pos:end="71:17">+=</operator> <literal type="number" pos:start="71:19" pos:end="71:19">2</literal></expr>;</expr_stmt>



        <switch pos:start="75:9" pos:end="1589:9">switch <condition pos:start="75:16" pos:end="75:20">(<expr pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">opc</name></expr>)</condition> <block pos:start="75:22" pos:end="1589:9">{<block_content pos:start="77:9" pos:end="1587:18">

        <case pos:start="77:9" pos:end="77:26">case <expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:25">INDEX_op_end</name></expr>:</case>

        <case pos:start="79:9" pos:end="79:26">case <expr pos:start="79:14" pos:end="79:25"><name pos:start="79:14" pos:end="79:25">INDEX_op_nop</name></expr>:</case>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:27">case <expr pos:start="83:14" pos:end="83:26"><name pos:start="83:14" pos:end="83:26">INDEX_op_nop1</name></expr>:</case>

        <case pos:start="85:9" pos:end="85:27">case <expr pos:start="85:14" pos:end="85:26"><name pos:start="85:14" pos:end="85:26">INDEX_op_nop2</name></expr>:</case>

        <case pos:start="87:9" pos:end="87:27">case <expr pos:start="87:14" pos:end="87:26"><name pos:start="87:14" pos:end="87:26">INDEX_op_nop3</name></expr>:</case>

        <case pos:start="89:9" pos:end="89:27">case <expr pos:start="89:14" pos:end="89:26"><name pos:start="89:14" pos:end="89:26">INDEX_op_nopn</name></expr>:</case>

        <case pos:start="91:9" pos:end="91:30">case <expr pos:start="91:14" pos:end="91:29"><name pos:start="91:14" pos:end="91:29">INDEX_op_discard</name></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:19"><expr pos:start="93:13" pos:end="93:18"><call pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:16">TODO</name><argument_list pos:start="93:17" pos:end="93:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:32">case <expr pos:start="97:14" pos:end="97:31"><name pos:start="97:14" pos:end="97:31">INDEX_op_set_label</name></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:19"><expr pos:start="99:13" pos:end="99:18"><call pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:16">TODO</name><argument_list pos:start="99:17" pos:end="99:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:27">case <expr pos:start="103:14" pos:end="103:26"><name pos:start="103:14" pos:end="103:26">INDEX_op_call</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="108:0"><expr pos:start="105:13" pos:end="105:37"><name pos:start="105:13" pos:end="105:14">t0</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:37"><name pos:start="105:18" pos:end="105:28">tci_read_ri</name><argument_list pos:start="105:29" pos:end="105:37">(<argument pos:start="105:30" pos:end="105:36"><expr pos:start="105:30" pos:end="105:36"><operator pos:start="105:30" pos:end="105:30">&amp;</operator><name pos:start="105:31" pos:end="105:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="107:1" pos:end="107:29">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:29"><name pos:start="107:5" pos:end="107:23">TCG_TARGET_REG_BITS</name> <operator pos:start="107:25" pos:end="107:26">==</operator> <literal type="number" pos:start="107:28" pos:end="107:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="109:13" pos:end="127:69"><expr pos:start="109:13" pos:end="127:68"><name pos:start="109:13" pos:end="109:17">tmp64</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <operator pos:start="109:21" pos:end="109:21">(</operator><operator pos:start="109:22" pos:end="109:22">(</operator><name pos:start="109:23" pos:end="109:37">helper_function</name><operator pos:start="109:38" pos:end="109:38">)</operator><name pos:start="109:39" pos:end="109:40">t0</name><operator pos:start="109:41" pos:end="109:41">)</operator><operator pos:start="109:42" pos:end="109:42">(</operator><call pos:start="109:43" pos:end="109:66"><name pos:start="109:43" pos:end="109:54">tci_read_reg</name><argument_list pos:start="109:55" pos:end="109:66">(<argument pos:start="109:56" pos:end="109:65"><expr pos:start="109:56" pos:end="109:65"><name pos:start="109:56" pos:end="109:65">TCG_REG_R0</name></expr></argument>)</argument_list></call><operator pos:start="109:67" pos:end="109:67">,</operator>

                                          <call pos:start="111:43" pos:end="111:66"><name pos:start="111:43" pos:end="111:54">tci_read_reg</name><argument_list pos:start="111:55" pos:end="111:66">(<argument pos:start="111:56" pos:end="111:65"><expr pos:start="111:56" pos:end="111:65"><name pos:start="111:56" pos:end="111:65">TCG_REG_R1</name></expr></argument>)</argument_list></call><operator pos:start="111:67" pos:end="111:67">,</operator>

                                          <call pos:start="113:43" pos:end="113:66"><name pos:start="113:43" pos:end="113:54">tci_read_reg</name><argument_list pos:start="113:55" pos:end="113:66">(<argument pos:start="113:56" pos:end="113:65"><expr pos:start="113:56" pos:end="113:65"><name pos:start="113:56" pos:end="113:65">TCG_REG_R2</name></expr></argument>)</argument_list></call><operator pos:start="113:67" pos:end="113:67">,</operator>

                                          <call pos:start="115:43" pos:end="115:66"><name pos:start="115:43" pos:end="115:54">tci_read_reg</name><argument_list pos:start="115:55" pos:end="115:66">(<argument pos:start="115:56" pos:end="115:65"><expr pos:start="115:56" pos:end="115:65"><name pos:start="115:56" pos:end="115:65">TCG_REG_R3</name></expr></argument>)</argument_list></call><operator pos:start="115:67" pos:end="115:67">,</operator>

                                          <call pos:start="117:43" pos:end="117:66"><name pos:start="117:43" pos:end="117:54">tci_read_reg</name><argument_list pos:start="117:55" pos:end="117:66">(<argument pos:start="117:56" pos:end="117:65"><expr pos:start="117:56" pos:end="117:65"><name pos:start="117:56" pos:end="117:65">TCG_REG_R5</name></expr></argument>)</argument_list></call><operator pos:start="117:67" pos:end="117:67">,</operator>

                                          <call pos:start="119:43" pos:end="119:66"><name pos:start="119:43" pos:end="119:54">tci_read_reg</name><argument_list pos:start="119:55" pos:end="119:66">(<argument pos:start="119:56" pos:end="119:65"><expr pos:start="119:56" pos:end="119:65"><name pos:start="119:56" pos:end="119:65">TCG_REG_R6</name></expr></argument>)</argument_list></call><operator pos:start="119:67" pos:end="119:67">,</operator>

                                          <call pos:start="121:43" pos:end="121:66"><name pos:start="121:43" pos:end="121:54">tci_read_reg</name><argument_list pos:start="121:55" pos:end="121:66">(<argument pos:start="121:56" pos:end="121:65"><expr pos:start="121:56" pos:end="121:65"><name pos:start="121:56" pos:end="121:65">TCG_REG_R7</name></expr></argument>)</argument_list></call><operator pos:start="121:67" pos:end="121:67">,</operator>

                                          <call pos:start="123:43" pos:end="123:66"><name pos:start="123:43" pos:end="123:54">tci_read_reg</name><argument_list pos:start="123:55" pos:end="123:66">(<argument pos:start="123:56" pos:end="123:65"><expr pos:start="123:56" pos:end="123:65"><name pos:start="123:56" pos:end="123:65">TCG_REG_R8</name></expr></argument>)</argument_list></call><operator pos:start="123:67" pos:end="123:67">,</operator>

                                          <call pos:start="125:43" pos:end="125:66"><name pos:start="125:43" pos:end="125:54">tci_read_reg</name><argument_list pos:start="125:55" pos:end="125:66">(<argument pos:start="125:56" pos:end="125:65"><expr pos:start="125:56" pos:end="125:65"><name pos:start="125:56" pos:end="125:65">TCG_REG_R9</name></expr></argument>)</argument_list></call><operator pos:start="125:67" pos:end="125:67">,</operator>

                                          <call pos:start="127:43" pos:end="127:67"><name pos:start="127:43" pos:end="127:54">tci_read_reg</name><argument_list pos:start="127:55" pos:end="127:67">(<argument pos:start="127:56" pos:end="127:66"><expr pos:start="127:56" pos:end="127:66"><name pos:start="127:56" pos:end="127:66">TCG_REG_R10</name></expr></argument>)</argument_list></call><operator pos:start="127:68" pos:end="127:68">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:45"><expr pos:start="129:13" pos:end="129:44"><call pos:start="129:13" pos:end="129:44"><name pos:start="129:13" pos:end="129:25">tci_write_reg</name><argument_list pos:start="129:26" pos:end="129:44">(<argument pos:start="129:27" pos:end="129:36"><expr pos:start="129:27" pos:end="129:36"><name pos:start="129:27" pos:end="129:36">TCG_REG_R0</name></expr></argument>, <argument pos:start="129:39" pos:end="129:43"><expr pos:start="129:39" pos:end="129:43"><name pos:start="129:39" pos:end="129:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="134:0"><expr pos:start="131:13" pos:end="131:50"><call pos:start="131:13" pos:end="131:50"><name pos:start="131:13" pos:end="131:25">tci_write_reg</name><argument_list pos:start="131:26" pos:end="131:50">(<argument pos:start="131:27" pos:end="131:36"><expr pos:start="131:27" pos:end="131:36"><name pos:start="131:27" pos:end="131:36">TCG_REG_R1</name></expr></argument>, <argument pos:start="131:39" pos:end="131:49"><expr pos:start="131:39" pos:end="131:49"><name pos:start="131:39" pos:end="131:43">tmp64</name> <operator pos:start="131:45" pos:end="131:46">&gt;&gt;</operator> <literal type="number" pos:start="131:48" pos:end="131:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="133:1" pos:end="133:5">#<cpp:directive pos:start="133:2" pos:end="133:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="135:13" pos:end="143:68"><expr pos:start="135:13" pos:end="143:67"><name pos:start="135:13" pos:end="135:17">tmp64</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <operator pos:start="135:21" pos:end="135:21">(</operator><operator pos:start="135:22" pos:end="135:22">(</operator><name pos:start="135:23" pos:end="135:37">helper_function</name><operator pos:start="135:38" pos:end="135:38">)</operator><name pos:start="135:39" pos:end="135:40">t0</name><operator pos:start="135:41" pos:end="135:41">)</operator><operator pos:start="135:42" pos:end="135:42">(</operator><call pos:start="135:43" pos:end="135:66"><name pos:start="135:43" pos:end="135:54">tci_read_reg</name><argument_list pos:start="135:55" pos:end="135:66">(<argument pos:start="135:56" pos:end="135:65"><expr pos:start="135:56" pos:end="135:65"><name pos:start="135:56" pos:end="135:65">TCG_REG_R0</name></expr></argument>)</argument_list></call><operator pos:start="135:67" pos:end="135:67">,</operator>

                                          <call pos:start="137:43" pos:end="137:66"><name pos:start="137:43" pos:end="137:54">tci_read_reg</name><argument_list pos:start="137:55" pos:end="137:66">(<argument pos:start="137:56" pos:end="137:65"><expr pos:start="137:56" pos:end="137:65"><name pos:start="137:56" pos:end="137:65">TCG_REG_R1</name></expr></argument>)</argument_list></call><operator pos:start="137:67" pos:end="137:67">,</operator>

                                          <call pos:start="139:43" pos:end="139:66"><name pos:start="139:43" pos:end="139:54">tci_read_reg</name><argument_list pos:start="139:55" pos:end="139:66">(<argument pos:start="139:56" pos:end="139:65"><expr pos:start="139:56" pos:end="139:65"><name pos:start="139:56" pos:end="139:65">TCG_REG_R2</name></expr></argument>)</argument_list></call><operator pos:start="139:67" pos:end="139:67">,</operator>

                                          <call pos:start="141:43" pos:end="141:66"><name pos:start="141:43" pos:end="141:54">tci_read_reg</name><argument_list pos:start="141:55" pos:end="141:66">(<argument pos:start="141:56" pos:end="141:65"><expr pos:start="141:56" pos:end="141:65"><name pos:start="141:56" pos:end="141:65">TCG_REG_R3</name></expr></argument>)</argument_list></call><operator pos:start="141:67" pos:end="141:67">,</operator>

                                          <call pos:start="143:43" pos:end="143:66"><name pos:start="143:43" pos:end="143:54">tci_read_reg</name><argument_list pos:start="143:55" pos:end="143:66">(<argument pos:start="143:56" pos:end="143:65"><expr pos:start="143:56" pos:end="143:65"><name pos:start="143:56" pos:end="143:65">TCG_REG_R5</name></expr></argument>)</argument_list></call><operator pos:start="143:67" pos:end="143:67">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="148:0"><expr pos:start="145:13" pos:end="145:44"><call pos:start="145:13" pos:end="145:44"><name pos:start="145:13" pos:end="145:25">tci_write_reg</name><argument_list pos:start="145:26" pos:end="145:44">(<argument pos:start="145:27" pos:end="145:36"><expr pos:start="145:27" pos:end="145:36"><name pos:start="145:27" pos:end="145:36">TCG_REG_R0</name></expr></argument>, <argument pos:start="145:39" pos:end="145:43"><expr pos:start="145:39" pos:end="145:43"><name pos:start="145:39" pos:end="145:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:25">case <expr pos:start="151:14" pos:end="151:24"><name pos:start="151:14" pos:end="151:24">INDEX_op_br</name></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:44"><expr pos:start="153:13" pos:end="153:43"><name pos:start="153:13" pos:end="153:17">label</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <call pos:start="153:21" pos:end="153:43"><name pos:start="153:21" pos:end="153:34">tci_read_label</name><argument_list pos:start="153:35" pos:end="153:43">(<argument pos:start="153:36" pos:end="153:42"><expr pos:start="153:36" pos:end="153:42"><operator pos:start="153:36" pos:end="153:36">&amp;</operator><name pos:start="153:37" pos:end="153:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:53"><expr pos:start="155:13" pos:end="155:52"><call pos:start="155:13" pos:end="155:52"><name pos:start="155:13" pos:end="155:18">assert</name><argument_list pos:start="155:19" pos:end="155:52">(<argument pos:start="155:20" pos:end="155:51"><expr pos:start="155:20" pos:end="155:51"><name pos:start="155:20" pos:end="155:25">tb_ptr</name> <operator pos:start="155:27" pos:end="155:28">==</operator> <name pos:start="155:30" pos:end="155:41">old_code_ptr</name> <operator pos:start="155:43" pos:end="155:43">+</operator> <name pos:start="155:45" pos:end="155:51">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:38"><expr pos:start="157:13" pos:end="157:37"><name pos:start="157:13" pos:end="157:18">tb_ptr</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <operator pos:start="157:22" pos:end="157:22">(</operator><name pos:start="157:23" pos:end="157:29">uint8_t</name> <operator pos:start="157:31" pos:end="157:31">*</operator><operator pos:start="157:32" pos:end="157:32">)</operator><name pos:start="157:33" pos:end="157:37">label</name></expr>;</expr_stmt>

            <continue pos:start="159:13" pos:end="159:21">continue;</continue>

        <case pos:start="161:9" pos:end="161:34">case <expr pos:start="161:14" pos:end="161:33"><name pos:start="161:14" pos:end="161:33">INDEX_op_setcond_i32</name></expr>:</case>

            <expr_stmt pos:start="163:13" pos:end="163:27"><expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:14">t0</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <operator pos:start="163:18" pos:end="163:18">*</operator><name pos:start="163:19" pos:end="163:24">tb_ptr</name><operator pos:start="163:25" pos:end="163:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:39"><expr pos:start="165:13" pos:end="165:38"><name pos:start="165:13" pos:end="165:14">t1</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <call pos:start="165:18" pos:end="165:38"><name pos:start="165:18" pos:end="165:29">tci_read_r32</name><argument_list pos:start="165:30" pos:end="165:38">(<argument pos:start="165:31" pos:end="165:37"><expr pos:start="165:31" pos:end="165:37"><operator pos:start="165:31" pos:end="165:31">&amp;</operator><name pos:start="165:32" pos:end="165:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:40"><expr pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:14">t2</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <call pos:start="167:18" pos:end="167:39"><name pos:start="167:18" pos:end="167:30">tci_read_ri32</name><argument_list pos:start="167:31" pos:end="167:39">(<argument pos:start="167:32" pos:end="167:38"><expr pos:start="167:32" pos:end="167:38"><operator pos:start="167:32" pos:end="167:32">&amp;</operator><name pos:start="167:33" pos:end="167:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:21">condition</name> <operator pos:start="169:23" pos:end="169:23">=</operator> <operator pos:start="169:25" pos:end="169:25">*</operator><name pos:start="169:26" pos:end="169:31">tb_ptr</name><operator pos:start="169:32" pos:end="169:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:66"><expr pos:start="171:13" pos:end="171:65"><call pos:start="171:13" pos:end="171:65"><name pos:start="171:13" pos:end="171:27">tci_write_reg32</name><argument_list pos:start="171:28" pos:end="171:65">(<argument pos:start="171:29" pos:end="171:30"><expr pos:start="171:29" pos:end="171:30"><name pos:start="171:29" pos:end="171:30">t0</name></expr></argument>, <argument pos:start="171:33" pos:end="171:64"><expr pos:start="171:33" pos:end="171:64"><call pos:start="171:33" pos:end="171:64"><name pos:start="171:33" pos:end="171:45">tci_compare32</name><argument_list pos:start="171:46" pos:end="171:64">(<argument pos:start="171:47" pos:end="171:48"><expr pos:start="171:47" pos:end="171:48"><name pos:start="171:47" pos:end="171:48">t1</name></expr></argument>, <argument pos:start="171:51" pos:end="171:52"><expr pos:start="171:51" pos:end="171:52"><name pos:start="171:51" pos:end="171:52">t2</name></expr></argument>, <argument pos:start="171:55" pos:end="171:63"><expr pos:start="171:55" pos:end="171:63"><name pos:start="171:55" pos:end="171:63">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="176:0">break;</break>

<cpp:if pos:start="175:1" pos:end="175:29">#<cpp:directive pos:start="175:2" pos:end="175:3">if</cpp:directive> <expr pos:start="175:5" pos:end="175:29"><name pos:start="175:5" pos:end="175:23">TCG_TARGET_REG_BITS</name> <operator pos:start="175:25" pos:end="175:26">==</operator> <literal type="number" pos:start="175:28" pos:end="175:29">32</literal></expr></cpp:if>

        <case pos:start="177:9" pos:end="177:35">case <expr pos:start="177:14" pos:end="177:34"><name pos:start="177:14" pos:end="177:34">INDEX_op_setcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="179:13" pos:end="179:27"><expr pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:14">t0</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <operator pos:start="179:18" pos:end="179:18">*</operator><name pos:start="179:19" pos:end="179:24">tb_ptr</name><operator pos:start="179:25" pos:end="179:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:42"><expr pos:start="181:13" pos:end="181:41"><name pos:start="181:13" pos:end="181:17">tmp64</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <call pos:start="181:21" pos:end="181:41"><name pos:start="181:21" pos:end="181:32">tci_read_r64</name><argument_list pos:start="181:33" pos:end="181:41">(<argument pos:start="181:34" pos:end="181:40"><expr pos:start="181:34" pos:end="181:40"><operator pos:start="181:34" pos:end="181:34">&amp;</operator><name pos:start="181:35" pos:end="181:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:41"><expr pos:start="183:13" pos:end="183:40"><name pos:start="183:13" pos:end="183:15">v64</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:40"><name pos:start="183:19" pos:end="183:31">tci_read_ri64</name><argument_list pos:start="183:32" pos:end="183:40">(<argument pos:start="183:33" pos:end="183:39"><expr pos:start="183:33" pos:end="183:39"><operator pos:start="183:33" pos:end="183:33">&amp;</operator><name pos:start="183:34" pos:end="183:39">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:34"><expr pos:start="185:13" pos:end="185:33"><name pos:start="185:13" pos:end="185:21">condition</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <operator pos:start="185:25" pos:end="185:25">*</operator><name pos:start="185:26" pos:end="185:31">tb_ptr</name><operator pos:start="185:32" pos:end="185:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:70"><expr pos:start="187:13" pos:end="187:69"><call pos:start="187:13" pos:end="187:69"><name pos:start="187:13" pos:end="187:27">tci_write_reg32</name><argument_list pos:start="187:28" pos:end="187:69">(<argument pos:start="187:29" pos:end="187:30"><expr pos:start="187:29" pos:end="187:30"><name pos:start="187:29" pos:end="187:30">t0</name></expr></argument>, <argument pos:start="187:33" pos:end="187:68"><expr pos:start="187:33" pos:end="187:68"><call pos:start="187:33" pos:end="187:68"><name pos:start="187:33" pos:end="187:45">tci_compare64</name><argument_list pos:start="187:46" pos:end="187:68">(<argument pos:start="187:47" pos:end="187:51"><expr pos:start="187:47" pos:end="187:51"><name pos:start="187:47" pos:end="187:51">tmp64</name></expr></argument>, <argument pos:start="187:54" pos:end="187:56"><expr pos:start="187:54" pos:end="187:56"><name pos:start="187:54" pos:end="187:56">v64</name></expr></argument>, <argument pos:start="187:59" pos:end="187:67"><expr pos:start="187:59" pos:end="187:67"><name pos:start="187:59" pos:end="187:67">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="189:13" pos:end="192:0">break;</break>

<cpp:elif pos:start="191:1" pos:end="191:31">#<cpp:directive pos:start="191:2" pos:end="191:5">elif</cpp:directive> <expr pos:start="191:7" pos:end="191:31"><name pos:start="191:7" pos:end="191:25">TCG_TARGET_REG_BITS</name> <operator pos:start="191:27" pos:end="191:28">==</operator> <literal type="number" pos:start="191:30" pos:end="191:31">64</literal></expr></cpp:elif>

        <case pos:start="193:9" pos:end="193:34">case <expr pos:start="193:14" pos:end="193:33"><name pos:start="193:14" pos:end="193:33">INDEX_op_setcond_i64</name></expr>:</case>

            <expr_stmt pos:start="195:13" pos:end="195:27"><expr pos:start="195:13" pos:end="195:26"><name pos:start="195:13" pos:end="195:14">t0</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <operator pos:start="195:18" pos:end="195:18">*</operator><name pos:start="195:19" pos:end="195:24">tb_ptr</name><operator pos:start="195:25" pos:end="195:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:39"><expr pos:start="197:13" pos:end="197:38"><name pos:start="197:13" pos:end="197:14">t1</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <call pos:start="197:18" pos:end="197:38"><name pos:start="197:18" pos:end="197:29">tci_read_r64</name><argument_list pos:start="197:30" pos:end="197:38">(<argument pos:start="197:31" pos:end="197:37"><expr pos:start="197:31" pos:end="197:37"><operator pos:start="197:31" pos:end="197:31">&amp;</operator><name pos:start="197:32" pos:end="197:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:40"><expr pos:start="199:13" pos:end="199:39"><name pos:start="199:13" pos:end="199:14">t2</name> <operator pos:start="199:16" pos:end="199:16">=</operator> <call pos:start="199:18" pos:end="199:39"><name pos:start="199:18" pos:end="199:30">tci_read_ri64</name><argument_list pos:start="199:31" pos:end="199:39">(<argument pos:start="199:32" pos:end="199:38"><expr pos:start="199:32" pos:end="199:38"><operator pos:start="199:32" pos:end="199:32">&amp;</operator><name pos:start="199:33" pos:end="199:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:21">condition</name> <operator pos:start="201:23" pos:end="201:23">=</operator> <operator pos:start="201:25" pos:end="201:25">*</operator><name pos:start="201:26" pos:end="201:31">tb_ptr</name><operator pos:start="201:32" pos:end="201:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:66"><expr pos:start="203:13" pos:end="203:65"><call pos:start="203:13" pos:end="203:65"><name pos:start="203:13" pos:end="203:27">tci_write_reg64</name><argument_list pos:start="203:28" pos:end="203:65">(<argument pos:start="203:29" pos:end="203:30"><expr pos:start="203:29" pos:end="203:30"><name pos:start="203:29" pos:end="203:30">t0</name></expr></argument>, <argument pos:start="203:33" pos:end="203:64"><expr pos:start="203:33" pos:end="203:64"><call pos:start="203:33" pos:end="203:64"><name pos:start="203:33" pos:end="203:45">tci_compare64</name><argument_list pos:start="203:46" pos:end="203:64">(<argument pos:start="203:47" pos:end="203:48"><expr pos:start="203:47" pos:end="203:48"><name pos:start="203:47" pos:end="203:48">t1</name></expr></argument>, <argument pos:start="203:51" pos:end="203:52"><expr pos:start="203:51" pos:end="203:52"><name pos:start="203:51" pos:end="203:52">t2</name></expr></argument>, <argument pos:start="203:55" pos:end="203:63"><expr pos:start="203:55" pos:end="203:63"><name pos:start="203:55" pos:end="203:63">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="205:13" pos:end="208:0">break;</break>

<cpp:endif pos:start="207:1" pos:end="207:6">#<cpp:directive pos:start="207:2" pos:end="207:6">endif</cpp:directive></cpp:endif>

        <case pos:start="209:9" pos:end="209:30">case <expr pos:start="209:14" pos:end="209:29"><name pos:start="209:14" pos:end="209:29">INDEX_op_mov_i32</name></expr>:</case>

            <expr_stmt pos:start="211:13" pos:end="211:27"><expr pos:start="211:13" pos:end="211:26"><name pos:start="211:13" pos:end="211:14">t0</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <operator pos:start="211:18" pos:end="211:18">*</operator><name pos:start="211:19" pos:end="211:24">tb_ptr</name><operator pos:start="211:25" pos:end="211:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:39"><expr pos:start="213:13" pos:end="213:38"><name pos:start="213:13" pos:end="213:14">t1</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <call pos:start="213:18" pos:end="213:38"><name pos:start="213:18" pos:end="213:29">tci_read_r32</name><argument_list pos:start="213:30" pos:end="213:38">(<argument pos:start="213:31" pos:end="213:37"><expr pos:start="213:31" pos:end="213:37"><operator pos:start="213:31" pos:end="213:31">&amp;</operator><name pos:start="213:32" pos:end="213:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:36"><expr pos:start="215:13" pos:end="215:35"><call pos:start="215:13" pos:end="215:35"><name pos:start="215:13" pos:end="215:27">tci_write_reg32</name><argument_list pos:start="215:28" pos:end="215:35">(<argument pos:start="215:29" pos:end="215:30"><expr pos:start="215:29" pos:end="215:30"><name pos:start="215:29" pos:end="215:30">t0</name></expr></argument>, <argument pos:start="215:33" pos:end="215:34"><expr pos:start="215:33" pos:end="215:34"><name pos:start="215:33" pos:end="215:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:31">case <expr pos:start="219:14" pos:end="219:30"><name pos:start="219:14" pos:end="219:30">INDEX_op_movi_i32</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:27"><expr pos:start="221:13" pos:end="221:26"><name pos:start="221:13" pos:end="221:14">t0</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <operator pos:start="221:18" pos:end="221:18">*</operator><name pos:start="221:19" pos:end="221:24">tb_ptr</name><operator pos:start="221:25" pos:end="221:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:39"><expr pos:start="223:13" pos:end="223:38"><name pos:start="223:13" pos:end="223:14">t1</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <call pos:start="223:18" pos:end="223:38"><name pos:start="223:18" pos:end="223:29">tci_read_i32</name><argument_list pos:start="223:30" pos:end="223:38">(<argument pos:start="223:31" pos:end="223:37"><expr pos:start="223:31" pos:end="223:37"><operator pos:start="223:31" pos:end="223:31">&amp;</operator><name pos:start="223:32" pos:end="223:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:36"><expr pos:start="225:13" pos:end="225:35"><call pos:start="225:13" pos:end="225:35"><name pos:start="225:13" pos:end="225:27">tci_write_reg32</name><argument_list pos:start="225:28" pos:end="225:35">(<argument pos:start="225:29" pos:end="225:30"><expr pos:start="225:29" pos:end="225:30"><name pos:start="225:29" pos:end="225:30">t0</name></expr></argument>, <argument pos:start="225:33" pos:end="225:34"><expr pos:start="225:33" pos:end="225:34"><name pos:start="225:33" pos:end="225:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="227:13" pos:end="227:18">break;</break>



            <comment type="block" pos:start="231:13" pos:end="231:49">/* Load/store operations (32 bit). */</comment>



        <case pos:start="235:9" pos:end="235:31">case <expr pos:start="235:14" pos:end="235:30"><name pos:start="235:14" pos:end="235:30">INDEX_op_ld8u_i32</name></expr>:</case>

            <expr_stmt pos:start="237:13" pos:end="237:27"><expr pos:start="237:13" pos:end="237:26"><name pos:start="237:13" pos:end="237:14">t0</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <operator pos:start="237:18" pos:end="237:18">*</operator><name pos:start="237:19" pos:end="237:24">tb_ptr</name><operator pos:start="237:25" pos:end="237:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:37"><expr pos:start="239:13" pos:end="239:36"><name pos:start="239:13" pos:end="239:14">t1</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <call pos:start="239:18" pos:end="239:36"><name pos:start="239:18" pos:end="239:27">tci_read_r</name><argument_list pos:start="239:28" pos:end="239:36">(<argument pos:start="239:29" pos:end="239:35"><expr pos:start="239:29" pos:end="239:35"><operator pos:start="239:29" pos:end="239:29">&amp;</operator><name pos:start="239:30" pos:end="239:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:39"><expr pos:start="241:13" pos:end="241:38"><name pos:start="241:13" pos:end="241:14">t2</name> <operator pos:start="241:16" pos:end="241:16">=</operator> <call pos:start="241:18" pos:end="241:38"><name pos:start="241:18" pos:end="241:29">tci_read_i32</name><argument_list pos:start="241:30" pos:end="241:38">(<argument pos:start="241:31" pos:end="241:37"><expr pos:start="241:31" pos:end="241:37"><operator pos:start="241:31" pos:end="241:31">&amp;</operator><name pos:start="241:32" pos:end="241:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:54"><expr pos:start="243:13" pos:end="243:53"><call pos:start="243:13" pos:end="243:53"><name pos:start="243:13" pos:end="243:26">tci_write_reg8</name><argument_list pos:start="243:27" pos:end="243:53">(<argument pos:start="243:28" pos:end="243:29"><expr pos:start="243:28" pos:end="243:29"><name pos:start="243:28" pos:end="243:29">t0</name></expr></argument>, <argument pos:start="243:32" pos:end="243:52"><expr pos:start="243:32" pos:end="243:52"><operator pos:start="243:32" pos:end="243:32">*</operator><operator pos:start="243:33" pos:end="243:33">(</operator><name pos:start="243:34" pos:end="243:40">uint8_t</name> <operator pos:start="243:42" pos:end="243:42">*</operator><operator pos:start="243:43" pos:end="243:43">)</operator><operator pos:start="243:44" pos:end="243:44">(</operator><name pos:start="243:45" pos:end="243:46">t1</name> <operator pos:start="243:48" pos:end="243:48">+</operator> <name pos:start="243:50" pos:end="243:51">t2</name><operator pos:start="243:52" pos:end="243:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="245:13" pos:end="245:18">break;</break>

        <case pos:start="247:9" pos:end="247:31">case <expr pos:start="247:14" pos:end="247:30"><name pos:start="247:14" pos:end="247:30">INDEX_op_ld8s_i32</name></expr>:</case>

        <case pos:start="249:9" pos:end="249:32">case <expr pos:start="249:14" pos:end="249:31"><name pos:start="249:14" pos:end="249:31">INDEX_op_ld16u_i32</name></expr>:</case>

            <expr_stmt pos:start="251:13" pos:end="251:19"><expr pos:start="251:13" pos:end="251:18"><call pos:start="251:13" pos:end="251:18"><name pos:start="251:13" pos:end="251:16">TODO</name><argument_list pos:start="251:17" pos:end="251:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        <case pos:start="255:9" pos:end="255:32">case <expr pos:start="255:14" pos:end="255:31"><name pos:start="255:14" pos:end="255:31">INDEX_op_ld16s_i32</name></expr>:</case>

            <expr_stmt pos:start="257:13" pos:end="257:19"><expr pos:start="257:13" pos:end="257:18"><call pos:start="257:13" pos:end="257:18"><name pos:start="257:13" pos:end="257:16">TODO</name><argument_list pos:start="257:17" pos:end="257:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <case pos:start="261:9" pos:end="261:29">case <expr pos:start="261:14" pos:end="261:28"><name pos:start="261:14" pos:end="261:28">INDEX_op_ld_i32</name></expr>:</case>

            <expr_stmt pos:start="263:13" pos:end="263:27"><expr pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:14">t0</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <operator pos:start="263:18" pos:end="263:18">*</operator><name pos:start="263:19" pos:end="263:24">tb_ptr</name><operator pos:start="263:25" pos:end="263:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:37"><expr pos:start="265:13" pos:end="265:36"><name pos:start="265:13" pos:end="265:14">t1</name> <operator pos:start="265:16" pos:end="265:16">=</operator> <call pos:start="265:18" pos:end="265:36"><name pos:start="265:18" pos:end="265:27">tci_read_r</name><argument_list pos:start="265:28" pos:end="265:36">(<argument pos:start="265:29" pos:end="265:35"><expr pos:start="265:29" pos:end="265:35"><operator pos:start="265:29" pos:end="265:29">&amp;</operator><name pos:start="265:30" pos:end="265:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:39"><expr pos:start="267:13" pos:end="267:38"><name pos:start="267:13" pos:end="267:14">t2</name> <operator pos:start="267:16" pos:end="267:16">=</operator> <call pos:start="267:18" pos:end="267:38"><name pos:start="267:18" pos:end="267:29">tci_read_i32</name><argument_list pos:start="267:30" pos:end="267:38">(<argument pos:start="267:31" pos:end="267:37"><expr pos:start="267:31" pos:end="267:37"><operator pos:start="267:31" pos:end="267:31">&amp;</operator><name pos:start="267:32" pos:end="267:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:56"><expr pos:start="269:13" pos:end="269:55"><call pos:start="269:13" pos:end="269:55"><name pos:start="269:13" pos:end="269:27">tci_write_reg32</name><argument_list pos:start="269:28" pos:end="269:55">(<argument pos:start="269:29" pos:end="269:30"><expr pos:start="269:29" pos:end="269:30"><name pos:start="269:29" pos:end="269:30">t0</name></expr></argument>, <argument pos:start="269:33" pos:end="269:54"><expr pos:start="269:33" pos:end="269:54"><operator pos:start="269:33" pos:end="269:33">*</operator><operator pos:start="269:34" pos:end="269:34">(</operator><name pos:start="269:35" pos:end="269:42">uint32_t</name> <operator pos:start="269:44" pos:end="269:44">*</operator><operator pos:start="269:45" pos:end="269:45">)</operator><operator pos:start="269:46" pos:end="269:46">(</operator><name pos:start="269:47" pos:end="269:48">t1</name> <operator pos:start="269:50" pos:end="269:50">+</operator> <name pos:start="269:52" pos:end="269:53">t2</name><operator pos:start="269:54" pos:end="269:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        <case pos:start="273:9" pos:end="273:30">case <expr pos:start="273:14" pos:end="273:29"><name pos:start="273:14" pos:end="273:29">INDEX_op_st8_i32</name></expr>:</case>

            <expr_stmt pos:start="275:13" pos:end="275:38"><expr pos:start="275:13" pos:end="275:37"><name pos:start="275:13" pos:end="275:14">t0</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <call pos:start="275:18" pos:end="275:37"><name pos:start="275:18" pos:end="275:28">tci_read_r8</name><argument_list pos:start="275:29" pos:end="275:37">(<argument pos:start="275:30" pos:end="275:36"><expr pos:start="275:30" pos:end="275:36"><operator pos:start="275:30" pos:end="275:30">&amp;</operator><name pos:start="275:31" pos:end="275:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:37"><expr pos:start="277:13" pos:end="277:36"><name pos:start="277:13" pos:end="277:14">t1</name> <operator pos:start="277:16" pos:end="277:16">=</operator> <call pos:start="277:18" pos:end="277:36"><name pos:start="277:18" pos:end="277:27">tci_read_r</name><argument_list pos:start="277:28" pos:end="277:36">(<argument pos:start="277:29" pos:end="277:35"><expr pos:start="277:29" pos:end="277:35"><operator pos:start="277:29" pos:end="277:29">&amp;</operator><name pos:start="277:30" pos:end="277:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:39"><expr pos:start="279:13" pos:end="279:38"><name pos:start="279:13" pos:end="279:14">t2</name> <operator pos:start="279:16" pos:end="279:16">=</operator> <call pos:start="279:18" pos:end="279:38"><name pos:start="279:18" pos:end="279:29">tci_read_i32</name><argument_list pos:start="279:30" pos:end="279:38">(<argument pos:start="279:31" pos:end="279:37"><expr pos:start="279:31" pos:end="279:37"><operator pos:start="279:31" pos:end="279:31">&amp;</operator><name pos:start="279:32" pos:end="279:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:39"><expr pos:start="281:13" pos:end="281:38"><operator pos:start="281:13" pos:end="281:13">*</operator><operator pos:start="281:14" pos:end="281:14">(</operator><name pos:start="281:15" pos:end="281:21">uint8_t</name> <operator pos:start="281:23" pos:end="281:23">*</operator><operator pos:start="281:24" pos:end="281:24">)</operator><operator pos:start="281:25" pos:end="281:25">(</operator><name pos:start="281:26" pos:end="281:27">t1</name> <operator pos:start="281:29" pos:end="281:29">+</operator> <name pos:start="281:31" pos:end="281:32">t2</name><operator pos:start="281:33" pos:end="281:33">)</operator> <operator pos:start="281:35" pos:end="281:35">=</operator> <name pos:start="281:37" pos:end="281:38">t0</name></expr>;</expr_stmt>

            <break pos:start="283:13" pos:end="283:18">break;</break>

        <case pos:start="285:9" pos:end="285:31">case <expr pos:start="285:14" pos:end="285:30"><name pos:start="285:14" pos:end="285:30">INDEX_op_st16_i32</name></expr>:</case>

            <expr_stmt pos:start="287:13" pos:end="287:39"><expr pos:start="287:13" pos:end="287:38"><name pos:start="287:13" pos:end="287:14">t0</name> <operator pos:start="287:16" pos:end="287:16">=</operator> <call pos:start="287:18" pos:end="287:38"><name pos:start="287:18" pos:end="287:29">tci_read_r16</name><argument_list pos:start="287:30" pos:end="287:38">(<argument pos:start="287:31" pos:end="287:37"><expr pos:start="287:31" pos:end="287:37"><operator pos:start="287:31" pos:end="287:31">&amp;</operator><name pos:start="287:32" pos:end="287:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:37"><expr pos:start="289:13" pos:end="289:36"><name pos:start="289:13" pos:end="289:14">t1</name> <operator pos:start="289:16" pos:end="289:16">=</operator> <call pos:start="289:18" pos:end="289:36"><name pos:start="289:18" pos:end="289:27">tci_read_r</name><argument_list pos:start="289:28" pos:end="289:36">(<argument pos:start="289:29" pos:end="289:35"><expr pos:start="289:29" pos:end="289:35"><operator pos:start="289:29" pos:end="289:29">&amp;</operator><name pos:start="289:30" pos:end="289:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:39"><expr pos:start="291:13" pos:end="291:38"><name pos:start="291:13" pos:end="291:14">t2</name> <operator pos:start="291:16" pos:end="291:16">=</operator> <call pos:start="291:18" pos:end="291:38"><name pos:start="291:18" pos:end="291:29">tci_read_i32</name><argument_list pos:start="291:30" pos:end="291:38">(<argument pos:start="291:31" pos:end="291:37"><expr pos:start="291:31" pos:end="291:37"><operator pos:start="291:31" pos:end="291:31">&amp;</operator><name pos:start="291:32" pos:end="291:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:40"><expr pos:start="293:13" pos:end="293:39"><operator pos:start="293:13" pos:end="293:13">*</operator><operator pos:start="293:14" pos:end="293:14">(</operator><name pos:start="293:15" pos:end="293:22">uint16_t</name> <operator pos:start="293:24" pos:end="293:24">*</operator><operator pos:start="293:25" pos:end="293:25">)</operator><operator pos:start="293:26" pos:end="293:26">(</operator><name pos:start="293:27" pos:end="293:28">t1</name> <operator pos:start="293:30" pos:end="293:30">+</operator> <name pos:start="293:32" pos:end="293:33">t2</name><operator pos:start="293:34" pos:end="293:34">)</operator> <operator pos:start="293:36" pos:end="293:36">=</operator> <name pos:start="293:38" pos:end="293:39">t0</name></expr>;</expr_stmt>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        <case pos:start="297:9" pos:end="297:29">case <expr pos:start="297:14" pos:end="297:28"><name pos:start="297:14" pos:end="297:28">INDEX_op_st_i32</name></expr>:</case>

            <expr_stmt pos:start="299:13" pos:end="299:39"><expr pos:start="299:13" pos:end="299:38"><name pos:start="299:13" pos:end="299:14">t0</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <call pos:start="299:18" pos:end="299:38"><name pos:start="299:18" pos:end="299:29">tci_read_r32</name><argument_list pos:start="299:30" pos:end="299:38">(<argument pos:start="299:31" pos:end="299:37"><expr pos:start="299:31" pos:end="299:37"><operator pos:start="299:31" pos:end="299:31">&amp;</operator><name pos:start="299:32" pos:end="299:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:37"><expr pos:start="301:13" pos:end="301:36"><name pos:start="301:13" pos:end="301:14">t1</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <call pos:start="301:18" pos:end="301:36"><name pos:start="301:18" pos:end="301:27">tci_read_r</name><argument_list pos:start="301:28" pos:end="301:36">(<argument pos:start="301:29" pos:end="301:35"><expr pos:start="301:29" pos:end="301:35"><operator pos:start="301:29" pos:end="301:29">&amp;</operator><name pos:start="301:30" pos:end="301:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:39"><expr pos:start="303:13" pos:end="303:38"><name pos:start="303:13" pos:end="303:14">t2</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <call pos:start="303:18" pos:end="303:38"><name pos:start="303:18" pos:end="303:29">tci_read_i32</name><argument_list pos:start="303:30" pos:end="303:38">(<argument pos:start="303:31" pos:end="303:37"><expr pos:start="303:31" pos:end="303:37"><operator pos:start="303:31" pos:end="303:31">&amp;</operator><name pos:start="303:32" pos:end="303:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:40"><expr pos:start="305:13" pos:end="305:39"><operator pos:start="305:13" pos:end="305:13">*</operator><operator pos:start="305:14" pos:end="305:14">(</operator><name pos:start="305:15" pos:end="305:22">uint32_t</name> <operator pos:start="305:24" pos:end="305:24">*</operator><operator pos:start="305:25" pos:end="305:25">)</operator><operator pos:start="305:26" pos:end="305:26">(</operator><name pos:start="305:27" pos:end="305:28">t1</name> <operator pos:start="305:30" pos:end="305:30">+</operator> <name pos:start="305:32" pos:end="305:33">t2</name><operator pos:start="305:34" pos:end="305:34">)</operator> <operator pos:start="305:36" pos:end="305:36">=</operator> <name pos:start="305:38" pos:end="305:39">t0</name></expr>;</expr_stmt>

            <break pos:start="307:13" pos:end="307:18">break;</break>



            <comment type="block" pos:start="311:13" pos:end="311:49">/* Arithmetic operations (32 bit). */</comment>



        <case pos:start="315:9" pos:end="315:30">case <expr pos:start="315:14" pos:end="315:29"><name pos:start="315:14" pos:end="315:29">INDEX_op_add_i32</name></expr>:</case>

            <expr_stmt pos:start="317:13" pos:end="317:27"><expr pos:start="317:13" pos:end="317:26"><name pos:start="317:13" pos:end="317:14">t0</name> <operator pos:start="317:16" pos:end="317:16">=</operator> <operator pos:start="317:18" pos:end="317:18">*</operator><name pos:start="317:19" pos:end="317:24">tb_ptr</name><operator pos:start="317:25" pos:end="317:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:40"><expr pos:start="319:13" pos:end="319:39"><name pos:start="319:13" pos:end="319:14">t1</name> <operator pos:start="319:16" pos:end="319:16">=</operator> <call pos:start="319:18" pos:end="319:39"><name pos:start="319:18" pos:end="319:30">tci_read_ri32</name><argument_list pos:start="319:31" pos:end="319:39">(<argument pos:start="319:32" pos:end="319:38"><expr pos:start="319:32" pos:end="319:38"><operator pos:start="319:32" pos:end="319:32">&amp;</operator><name pos:start="319:33" pos:end="319:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:40"><expr pos:start="321:13" pos:end="321:39"><name pos:start="321:13" pos:end="321:14">t2</name> <operator pos:start="321:16" pos:end="321:16">=</operator> <call pos:start="321:18" pos:end="321:39"><name pos:start="321:18" pos:end="321:30">tci_read_ri32</name><argument_list pos:start="321:31" pos:end="321:39">(<argument pos:start="321:32" pos:end="321:38"><expr pos:start="321:32" pos:end="321:38"><operator pos:start="321:32" pos:end="321:32">&amp;</operator><name pos:start="321:33" pos:end="321:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:41"><expr pos:start="323:13" pos:end="323:40"><call pos:start="323:13" pos:end="323:40"><name pos:start="323:13" pos:end="323:27">tci_write_reg32</name><argument_list pos:start="323:28" pos:end="323:40">(<argument pos:start="323:29" pos:end="323:30"><expr pos:start="323:29" pos:end="323:30"><name pos:start="323:29" pos:end="323:30">t0</name></expr></argument>, <argument pos:start="323:33" pos:end="323:39"><expr pos:start="323:33" pos:end="323:39"><name pos:start="323:33" pos:end="323:34">t1</name> <operator pos:start="323:36" pos:end="323:36">+</operator> <name pos:start="323:38" pos:end="323:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="325:13" pos:end="325:18">break;</break>

        <case pos:start="327:9" pos:end="327:30">case <expr pos:start="327:14" pos:end="327:29"><name pos:start="327:14" pos:end="327:29">INDEX_op_sub_i32</name></expr>:</case>

            <expr_stmt pos:start="329:13" pos:end="329:27"><expr pos:start="329:13" pos:end="329:26"><name pos:start="329:13" pos:end="329:14">t0</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <operator pos:start="329:18" pos:end="329:18">*</operator><name pos:start="329:19" pos:end="329:24">tb_ptr</name><operator pos:start="329:25" pos:end="329:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:40"><expr pos:start="331:13" pos:end="331:39"><name pos:start="331:13" pos:end="331:14">t1</name> <operator pos:start="331:16" pos:end="331:16">=</operator> <call pos:start="331:18" pos:end="331:39"><name pos:start="331:18" pos:end="331:30">tci_read_ri32</name><argument_list pos:start="331:31" pos:end="331:39">(<argument pos:start="331:32" pos:end="331:38"><expr pos:start="331:32" pos:end="331:38"><operator pos:start="331:32" pos:end="331:32">&amp;</operator><name pos:start="331:33" pos:end="331:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:40"><expr pos:start="333:13" pos:end="333:39"><name pos:start="333:13" pos:end="333:14">t2</name> <operator pos:start="333:16" pos:end="333:16">=</operator> <call pos:start="333:18" pos:end="333:39"><name pos:start="333:18" pos:end="333:30">tci_read_ri32</name><argument_list pos:start="333:31" pos:end="333:39">(<argument pos:start="333:32" pos:end="333:38"><expr pos:start="333:32" pos:end="333:38"><operator pos:start="333:32" pos:end="333:32">&amp;</operator><name pos:start="333:33" pos:end="333:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:41"><expr pos:start="335:13" pos:end="335:40"><call pos:start="335:13" pos:end="335:40"><name pos:start="335:13" pos:end="335:27">tci_write_reg32</name><argument_list pos:start="335:28" pos:end="335:40">(<argument pos:start="335:29" pos:end="335:30"><expr pos:start="335:29" pos:end="335:30"><name pos:start="335:29" pos:end="335:30">t0</name></expr></argument>, <argument pos:start="335:33" pos:end="335:39"><expr pos:start="335:33" pos:end="335:39"><name pos:start="335:33" pos:end="335:34">t1</name> <operator pos:start="335:36" pos:end="335:36">-</operator> <name pos:start="335:38" pos:end="335:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="337:13" pos:end="337:18">break;</break>

        <case pos:start="339:9" pos:end="339:30">case <expr pos:start="339:14" pos:end="339:29"><name pos:start="339:14" pos:end="339:29">INDEX_op_mul_i32</name></expr>:</case>

            <expr_stmt pos:start="341:13" pos:end="341:27"><expr pos:start="341:13" pos:end="341:26"><name pos:start="341:13" pos:end="341:14">t0</name> <operator pos:start="341:16" pos:end="341:16">=</operator> <operator pos:start="341:18" pos:end="341:18">*</operator><name pos:start="341:19" pos:end="341:24">tb_ptr</name><operator pos:start="341:25" pos:end="341:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:40"><expr pos:start="343:13" pos:end="343:39"><name pos:start="343:13" pos:end="343:14">t1</name> <operator pos:start="343:16" pos:end="343:16">=</operator> <call pos:start="343:18" pos:end="343:39"><name pos:start="343:18" pos:end="343:30">tci_read_ri32</name><argument_list pos:start="343:31" pos:end="343:39">(<argument pos:start="343:32" pos:end="343:38"><expr pos:start="343:32" pos:end="343:38"><operator pos:start="343:32" pos:end="343:32">&amp;</operator><name pos:start="343:33" pos:end="343:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:40"><expr pos:start="345:13" pos:end="345:39"><name pos:start="345:13" pos:end="345:14">t2</name> <operator pos:start="345:16" pos:end="345:16">=</operator> <call pos:start="345:18" pos:end="345:39"><name pos:start="345:18" pos:end="345:30">tci_read_ri32</name><argument_list pos:start="345:31" pos:end="345:39">(<argument pos:start="345:32" pos:end="345:38"><expr pos:start="345:32" pos:end="345:38"><operator pos:start="345:32" pos:end="345:32">&amp;</operator><name pos:start="345:33" pos:end="345:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:41"><expr pos:start="347:13" pos:end="347:40"><call pos:start="347:13" pos:end="347:40"><name pos:start="347:13" pos:end="347:27">tci_write_reg32</name><argument_list pos:start="347:28" pos:end="347:40">(<argument pos:start="347:29" pos:end="347:30"><expr pos:start="347:29" pos:end="347:30"><name pos:start="347:29" pos:end="347:30">t0</name></expr></argument>, <argument pos:start="347:33" pos:end="347:39"><expr pos:start="347:33" pos:end="347:39"><name pos:start="347:33" pos:end="347:34">t1</name> <operator pos:start="347:36" pos:end="347:36">*</operator> <name pos:start="347:38" pos:end="347:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="349:13" pos:end="352:0">break;</break>

<cpp:if pos:start="351:1" pos:end="351:26">#<cpp:directive pos:start="351:2" pos:end="351:3">if</cpp:directive> <expr pos:start="351:5" pos:end="351:26"><name pos:start="351:5" pos:end="351:26">TCG_TARGET_HAS_div_i32</name></expr></cpp:if>

        <case pos:start="353:9" pos:end="353:30">case <expr pos:start="353:14" pos:end="353:29"><name pos:start="353:14" pos:end="353:29">INDEX_op_div_i32</name></expr>:</case>

            <expr_stmt pos:start="355:13" pos:end="355:27"><expr pos:start="355:13" pos:end="355:26"><name pos:start="355:13" pos:end="355:14">t0</name> <operator pos:start="355:16" pos:end="355:16">=</operator> <operator pos:start="355:18" pos:end="355:18">*</operator><name pos:start="355:19" pos:end="355:24">tb_ptr</name><operator pos:start="355:25" pos:end="355:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:40"><expr pos:start="357:13" pos:end="357:39"><name pos:start="357:13" pos:end="357:14">t1</name> <operator pos:start="357:16" pos:end="357:16">=</operator> <call pos:start="357:18" pos:end="357:39"><name pos:start="357:18" pos:end="357:30">tci_read_ri32</name><argument_list pos:start="357:31" pos:end="357:39">(<argument pos:start="357:32" pos:end="357:38"><expr pos:start="357:32" pos:end="357:38"><operator pos:start="357:32" pos:end="357:32">&amp;</operator><name pos:start="357:33" pos:end="357:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:40"><expr pos:start="359:13" pos:end="359:39"><name pos:start="359:13" pos:end="359:14">t2</name> <operator pos:start="359:16" pos:end="359:16">=</operator> <call pos:start="359:18" pos:end="359:39"><name pos:start="359:18" pos:end="359:30">tci_read_ri32</name><argument_list pos:start="359:31" pos:end="359:39">(<argument pos:start="359:32" pos:end="359:38"><expr pos:start="359:32" pos:end="359:38"><operator pos:start="359:32" pos:end="359:32">&amp;</operator><name pos:start="359:33" pos:end="359:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:59"><expr pos:start="361:13" pos:end="361:58"><call pos:start="361:13" pos:end="361:58"><name pos:start="361:13" pos:end="361:27">tci_write_reg32</name><argument_list pos:start="361:28" pos:end="361:58">(<argument pos:start="361:29" pos:end="361:30"><expr pos:start="361:29" pos:end="361:30"><name pos:start="361:29" pos:end="361:30">t0</name></expr></argument>, <argument pos:start="361:33" pos:end="361:57"><expr pos:start="361:33" pos:end="361:57"><operator pos:start="361:33" pos:end="361:33">(</operator><name pos:start="361:34" pos:end="361:40">int32_t</name><operator pos:start="361:41" pos:end="361:41">)</operator><name pos:start="361:42" pos:end="361:43">t1</name> <operator pos:start="361:45" pos:end="361:45">/</operator> <operator pos:start="361:47" pos:end="361:47">(</operator><name pos:start="361:48" pos:end="361:54">int32_t</name><operator pos:start="361:55" pos:end="361:55">)</operator><name pos:start="361:56" pos:end="361:57">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="363:13" pos:end="363:18">break;</break>

        <case pos:start="365:9" pos:end="365:31">case <expr pos:start="365:14" pos:end="365:30"><name pos:start="365:14" pos:end="365:30">INDEX_op_divu_i32</name></expr>:</case>

            <expr_stmt pos:start="367:13" pos:end="367:27"><expr pos:start="367:13" pos:end="367:26"><name pos:start="367:13" pos:end="367:14">t0</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <operator pos:start="367:18" pos:end="367:18">*</operator><name pos:start="367:19" pos:end="367:24">tb_ptr</name><operator pos:start="367:25" pos:end="367:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:40"><expr pos:start="369:13" pos:end="369:39"><name pos:start="369:13" pos:end="369:14">t1</name> <operator pos:start="369:16" pos:end="369:16">=</operator> <call pos:start="369:18" pos:end="369:39"><name pos:start="369:18" pos:end="369:30">tci_read_ri32</name><argument_list pos:start="369:31" pos:end="369:39">(<argument pos:start="369:32" pos:end="369:38"><expr pos:start="369:32" pos:end="369:38"><operator pos:start="369:32" pos:end="369:32">&amp;</operator><name pos:start="369:33" pos:end="369:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:40"><expr pos:start="371:13" pos:end="371:39"><name pos:start="371:13" pos:end="371:14">t2</name> <operator pos:start="371:16" pos:end="371:16">=</operator> <call pos:start="371:18" pos:end="371:39"><name pos:start="371:18" pos:end="371:30">tci_read_ri32</name><argument_list pos:start="371:31" pos:end="371:39">(<argument pos:start="371:32" pos:end="371:38"><expr pos:start="371:32" pos:end="371:38"><operator pos:start="371:32" pos:end="371:32">&amp;</operator><name pos:start="371:33" pos:end="371:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:41"><expr pos:start="373:13" pos:end="373:40"><call pos:start="373:13" pos:end="373:40"><name pos:start="373:13" pos:end="373:27">tci_write_reg32</name><argument_list pos:start="373:28" pos:end="373:40">(<argument pos:start="373:29" pos:end="373:30"><expr pos:start="373:29" pos:end="373:30"><name pos:start="373:29" pos:end="373:30">t0</name></expr></argument>, <argument pos:start="373:33" pos:end="373:39"><expr pos:start="373:33" pos:end="373:39"><name pos:start="373:33" pos:end="373:34">t1</name> <operator pos:start="373:36" pos:end="373:36">/</operator> <name pos:start="373:38" pos:end="373:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="375:13" pos:end="375:18">break;</break>

        <case pos:start="377:9" pos:end="377:30">case <expr pos:start="377:14" pos:end="377:29"><name pos:start="377:14" pos:end="377:29">INDEX_op_rem_i32</name></expr>:</case>

            <expr_stmt pos:start="379:13" pos:end="379:27"><expr pos:start="379:13" pos:end="379:26"><name pos:start="379:13" pos:end="379:14">t0</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <operator pos:start="379:18" pos:end="379:18">*</operator><name pos:start="379:19" pos:end="379:24">tb_ptr</name><operator pos:start="379:25" pos:end="379:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:40"><expr pos:start="381:13" pos:end="381:39"><name pos:start="381:13" pos:end="381:14">t1</name> <operator pos:start="381:16" pos:end="381:16">=</operator> <call pos:start="381:18" pos:end="381:39"><name pos:start="381:18" pos:end="381:30">tci_read_ri32</name><argument_list pos:start="381:31" pos:end="381:39">(<argument pos:start="381:32" pos:end="381:38"><expr pos:start="381:32" pos:end="381:38"><operator pos:start="381:32" pos:end="381:32">&amp;</operator><name pos:start="381:33" pos:end="381:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:40"><expr pos:start="383:13" pos:end="383:39"><name pos:start="383:13" pos:end="383:14">t2</name> <operator pos:start="383:16" pos:end="383:16">=</operator> <call pos:start="383:18" pos:end="383:39"><name pos:start="383:18" pos:end="383:30">tci_read_ri32</name><argument_list pos:start="383:31" pos:end="383:39">(<argument pos:start="383:32" pos:end="383:38"><expr pos:start="383:32" pos:end="383:38"><operator pos:start="383:32" pos:end="383:32">&amp;</operator><name pos:start="383:33" pos:end="383:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:59"><expr pos:start="385:13" pos:end="385:58"><call pos:start="385:13" pos:end="385:58"><name pos:start="385:13" pos:end="385:27">tci_write_reg32</name><argument_list pos:start="385:28" pos:end="385:58">(<argument pos:start="385:29" pos:end="385:30"><expr pos:start="385:29" pos:end="385:30"><name pos:start="385:29" pos:end="385:30">t0</name></expr></argument>, <argument pos:start="385:33" pos:end="385:57"><expr pos:start="385:33" pos:end="385:57"><operator pos:start="385:33" pos:end="385:33">(</operator><name pos:start="385:34" pos:end="385:40">int32_t</name><operator pos:start="385:41" pos:end="385:41">)</operator><name pos:start="385:42" pos:end="385:43">t1</name> <operator pos:start="385:45" pos:end="385:45">%</operator> <operator pos:start="385:47" pos:end="385:47">(</operator><name pos:start="385:48" pos:end="385:54">int32_t</name><operator pos:start="385:55" pos:end="385:55">)</operator><name pos:start="385:56" pos:end="385:57">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="387:13" pos:end="387:18">break;</break>

        <case pos:start="389:9" pos:end="389:31">case <expr pos:start="389:14" pos:end="389:30"><name pos:start="389:14" pos:end="389:30">INDEX_op_remu_i32</name></expr>:</case>

            <expr_stmt pos:start="391:13" pos:end="391:27"><expr pos:start="391:13" pos:end="391:26"><name pos:start="391:13" pos:end="391:14">t0</name> <operator pos:start="391:16" pos:end="391:16">=</operator> <operator pos:start="391:18" pos:end="391:18">*</operator><name pos:start="391:19" pos:end="391:24">tb_ptr</name><operator pos:start="391:25" pos:end="391:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:40"><expr pos:start="393:13" pos:end="393:39"><name pos:start="393:13" pos:end="393:14">t1</name> <operator pos:start="393:16" pos:end="393:16">=</operator> <call pos:start="393:18" pos:end="393:39"><name pos:start="393:18" pos:end="393:30">tci_read_ri32</name><argument_list pos:start="393:31" pos:end="393:39">(<argument pos:start="393:32" pos:end="393:38"><expr pos:start="393:32" pos:end="393:38"><operator pos:start="393:32" pos:end="393:32">&amp;</operator><name pos:start="393:33" pos:end="393:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:40"><expr pos:start="395:13" pos:end="395:39"><name pos:start="395:13" pos:end="395:14">t2</name> <operator pos:start="395:16" pos:end="395:16">=</operator> <call pos:start="395:18" pos:end="395:39"><name pos:start="395:18" pos:end="395:30">tci_read_ri32</name><argument_list pos:start="395:31" pos:end="395:39">(<argument pos:start="395:32" pos:end="395:38"><expr pos:start="395:32" pos:end="395:38"><operator pos:start="395:32" pos:end="395:32">&amp;</operator><name pos:start="395:33" pos:end="395:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:41"><expr pos:start="397:13" pos:end="397:40"><call pos:start="397:13" pos:end="397:40"><name pos:start="397:13" pos:end="397:27">tci_write_reg32</name><argument_list pos:start="397:28" pos:end="397:40">(<argument pos:start="397:29" pos:end="397:30"><expr pos:start="397:29" pos:end="397:30"><name pos:start="397:29" pos:end="397:30">t0</name></expr></argument>, <argument pos:start="397:33" pos:end="397:39"><expr pos:start="397:33" pos:end="397:39"><name pos:start="397:33" pos:end="397:34">t1</name> <operator pos:start="397:36" pos:end="397:36">%</operator> <name pos:start="397:38" pos:end="397:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="399:13" pos:end="402:0">break;</break>

<cpp:elif pos:start="401:1" pos:end="401:29">#<cpp:directive pos:start="401:2" pos:end="401:5">elif</cpp:directive> <expr pos:start="401:7" pos:end="401:29"><name pos:start="401:7" pos:end="401:29">TCG_TARGET_HAS_div2_i32</name></expr></cpp:elif>

        <case pos:start="403:9" pos:end="403:31">case <expr pos:start="403:14" pos:end="403:30"><name pos:start="403:14" pos:end="403:30">INDEX_op_div2_i32</name></expr>:</case>

        <case pos:start="405:9" pos:end="405:32">case <expr pos:start="405:14" pos:end="405:31"><name pos:start="405:14" pos:end="405:31">INDEX_op_divu2_i32</name></expr>:</case>

            <expr_stmt pos:start="407:13" pos:end="407:19"><expr pos:start="407:13" pos:end="407:18"><call pos:start="407:13" pos:end="407:18"><name pos:start="407:13" pos:end="407:16">TODO</name><argument_list pos:start="407:17" pos:end="407:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="409:13" pos:end="412:0">break;</break>

<cpp:endif pos:start="411:1" pos:end="411:6">#<cpp:directive pos:start="411:2" pos:end="411:6">endif</cpp:directive></cpp:endif>

        <case pos:start="413:9" pos:end="413:30">case <expr pos:start="413:14" pos:end="413:29"><name pos:start="413:14" pos:end="413:29">INDEX_op_and_i32</name></expr>:</case>

            <expr_stmt pos:start="415:13" pos:end="415:27"><expr pos:start="415:13" pos:end="415:26"><name pos:start="415:13" pos:end="415:14">t0</name> <operator pos:start="415:16" pos:end="415:16">=</operator> <operator pos:start="415:18" pos:end="415:18">*</operator><name pos:start="415:19" pos:end="415:24">tb_ptr</name><operator pos:start="415:25" pos:end="415:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:40"><expr pos:start="417:13" pos:end="417:39"><name pos:start="417:13" pos:end="417:14">t1</name> <operator pos:start="417:16" pos:end="417:16">=</operator> <call pos:start="417:18" pos:end="417:39"><name pos:start="417:18" pos:end="417:30">tci_read_ri32</name><argument_list pos:start="417:31" pos:end="417:39">(<argument pos:start="417:32" pos:end="417:38"><expr pos:start="417:32" pos:end="417:38"><operator pos:start="417:32" pos:end="417:32">&amp;</operator><name pos:start="417:33" pos:end="417:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="419:13" pos:end="419:40"><expr pos:start="419:13" pos:end="419:39"><name pos:start="419:13" pos:end="419:14">t2</name> <operator pos:start="419:16" pos:end="419:16">=</operator> <call pos:start="419:18" pos:end="419:39"><name pos:start="419:18" pos:end="419:30">tci_read_ri32</name><argument_list pos:start="419:31" pos:end="419:39">(<argument pos:start="419:32" pos:end="419:38"><expr pos:start="419:32" pos:end="419:38"><operator pos:start="419:32" pos:end="419:32">&amp;</operator><name pos:start="419:33" pos:end="419:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:41"><expr pos:start="421:13" pos:end="421:40"><call pos:start="421:13" pos:end="421:40"><name pos:start="421:13" pos:end="421:27">tci_write_reg32</name><argument_list pos:start="421:28" pos:end="421:40">(<argument pos:start="421:29" pos:end="421:30"><expr pos:start="421:29" pos:end="421:30"><name pos:start="421:29" pos:end="421:30">t0</name></expr></argument>, <argument pos:start="421:33" pos:end="421:39"><expr pos:start="421:33" pos:end="421:39"><name pos:start="421:33" pos:end="421:34">t1</name> <operator pos:start="421:36" pos:end="421:36">&amp;</operator> <name pos:start="421:38" pos:end="421:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="423:13" pos:end="423:18">break;</break>

        <case pos:start="425:9" pos:end="425:29">case <expr pos:start="425:14" pos:end="425:28"><name pos:start="425:14" pos:end="425:28">INDEX_op_or_i32</name></expr>:</case>

            <expr_stmt pos:start="427:13" pos:end="427:27"><expr pos:start="427:13" pos:end="427:26"><name pos:start="427:13" pos:end="427:14">t0</name> <operator pos:start="427:16" pos:end="427:16">=</operator> <operator pos:start="427:18" pos:end="427:18">*</operator><name pos:start="427:19" pos:end="427:24">tb_ptr</name><operator pos:start="427:25" pos:end="427:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:40"><expr pos:start="429:13" pos:end="429:39"><name pos:start="429:13" pos:end="429:14">t1</name> <operator pos:start="429:16" pos:end="429:16">=</operator> <call pos:start="429:18" pos:end="429:39"><name pos:start="429:18" pos:end="429:30">tci_read_ri32</name><argument_list pos:start="429:31" pos:end="429:39">(<argument pos:start="429:32" pos:end="429:38"><expr pos:start="429:32" pos:end="429:38"><operator pos:start="429:32" pos:end="429:32">&amp;</operator><name pos:start="429:33" pos:end="429:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="431:13" pos:end="431:40"><expr pos:start="431:13" pos:end="431:39"><name pos:start="431:13" pos:end="431:14">t2</name> <operator pos:start="431:16" pos:end="431:16">=</operator> <call pos:start="431:18" pos:end="431:39"><name pos:start="431:18" pos:end="431:30">tci_read_ri32</name><argument_list pos:start="431:31" pos:end="431:39">(<argument pos:start="431:32" pos:end="431:38"><expr pos:start="431:32" pos:end="431:38"><operator pos:start="431:32" pos:end="431:32">&amp;</operator><name pos:start="431:33" pos:end="431:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:41"><expr pos:start="433:13" pos:end="433:40"><call pos:start="433:13" pos:end="433:40"><name pos:start="433:13" pos:end="433:27">tci_write_reg32</name><argument_list pos:start="433:28" pos:end="433:40">(<argument pos:start="433:29" pos:end="433:30"><expr pos:start="433:29" pos:end="433:30"><name pos:start="433:29" pos:end="433:30">t0</name></expr></argument>, <argument pos:start="433:33" pos:end="433:39"><expr pos:start="433:33" pos:end="433:39"><name pos:start="433:33" pos:end="433:34">t1</name> <operator pos:start="433:36" pos:end="433:36">|</operator> <name pos:start="433:38" pos:end="433:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="435:13" pos:end="435:18">break;</break>

        <case pos:start="437:9" pos:end="437:30">case <expr pos:start="437:14" pos:end="437:29"><name pos:start="437:14" pos:end="437:29">INDEX_op_xor_i32</name></expr>:</case>

            <expr_stmt pos:start="439:13" pos:end="439:27"><expr pos:start="439:13" pos:end="439:26"><name pos:start="439:13" pos:end="439:14">t0</name> <operator pos:start="439:16" pos:end="439:16">=</operator> <operator pos:start="439:18" pos:end="439:18">*</operator><name pos:start="439:19" pos:end="439:24">tb_ptr</name><operator pos:start="439:25" pos:end="439:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:40"><expr pos:start="441:13" pos:end="441:39"><name pos:start="441:13" pos:end="441:14">t1</name> <operator pos:start="441:16" pos:end="441:16">=</operator> <call pos:start="441:18" pos:end="441:39"><name pos:start="441:18" pos:end="441:30">tci_read_ri32</name><argument_list pos:start="441:31" pos:end="441:39">(<argument pos:start="441:32" pos:end="441:38"><expr pos:start="441:32" pos:end="441:38"><operator pos:start="441:32" pos:end="441:32">&amp;</operator><name pos:start="441:33" pos:end="441:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:40"><expr pos:start="443:13" pos:end="443:39"><name pos:start="443:13" pos:end="443:14">t2</name> <operator pos:start="443:16" pos:end="443:16">=</operator> <call pos:start="443:18" pos:end="443:39"><name pos:start="443:18" pos:end="443:30">tci_read_ri32</name><argument_list pos:start="443:31" pos:end="443:39">(<argument pos:start="443:32" pos:end="443:38"><expr pos:start="443:32" pos:end="443:38"><operator pos:start="443:32" pos:end="443:32">&amp;</operator><name pos:start="443:33" pos:end="443:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="445:13" pos:end="445:41"><expr pos:start="445:13" pos:end="445:40"><call pos:start="445:13" pos:end="445:40"><name pos:start="445:13" pos:end="445:27">tci_write_reg32</name><argument_list pos:start="445:28" pos:end="445:40">(<argument pos:start="445:29" pos:end="445:30"><expr pos:start="445:29" pos:end="445:30"><name pos:start="445:29" pos:end="445:30">t0</name></expr></argument>, <argument pos:start="445:33" pos:end="445:39"><expr pos:start="445:33" pos:end="445:39"><name pos:start="445:33" pos:end="445:34">t1</name> <operator pos:start="445:36" pos:end="445:36">^</operator> <name pos:start="445:38" pos:end="445:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="447:13" pos:end="447:18">break;</break>



            <comment type="block" pos:start="451:13" pos:end="451:51">/* Shift/rotate operations (32 bit). */</comment>



        <case pos:start="455:9" pos:end="455:30">case <expr pos:start="455:14" pos:end="455:29"><name pos:start="455:14" pos:end="455:29">INDEX_op_shl_i32</name></expr>:</case>

            <expr_stmt pos:start="457:13" pos:end="457:27"><expr pos:start="457:13" pos:end="457:26"><name pos:start="457:13" pos:end="457:14">t0</name> <operator pos:start="457:16" pos:end="457:16">=</operator> <operator pos:start="457:18" pos:end="457:18">*</operator><name pos:start="457:19" pos:end="457:24">tb_ptr</name><operator pos:start="457:25" pos:end="457:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:40"><expr pos:start="459:13" pos:end="459:39"><name pos:start="459:13" pos:end="459:14">t1</name> <operator pos:start="459:16" pos:end="459:16">=</operator> <call pos:start="459:18" pos:end="459:39"><name pos:start="459:18" pos:end="459:30">tci_read_ri32</name><argument_list pos:start="459:31" pos:end="459:39">(<argument pos:start="459:32" pos:end="459:38"><expr pos:start="459:32" pos:end="459:38"><operator pos:start="459:32" pos:end="459:32">&amp;</operator><name pos:start="459:33" pos:end="459:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:40"><expr pos:start="461:13" pos:end="461:39"><name pos:start="461:13" pos:end="461:14">t2</name> <operator pos:start="461:16" pos:end="461:16">=</operator> <call pos:start="461:18" pos:end="461:39"><name pos:start="461:18" pos:end="461:30">tci_read_ri32</name><argument_list pos:start="461:31" pos:end="461:39">(<argument pos:start="461:32" pos:end="461:38"><expr pos:start="461:32" pos:end="461:38"><operator pos:start="461:32" pos:end="461:32">&amp;</operator><name pos:start="461:33" pos:end="461:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="463:13" pos:end="463:42"><expr pos:start="463:13" pos:end="463:41"><call pos:start="463:13" pos:end="463:41"><name pos:start="463:13" pos:end="463:27">tci_write_reg32</name><argument_list pos:start="463:28" pos:end="463:41">(<argument pos:start="463:29" pos:end="463:30"><expr pos:start="463:29" pos:end="463:30"><name pos:start="463:29" pos:end="463:30">t0</name></expr></argument>, <argument pos:start="463:33" pos:end="463:40"><expr pos:start="463:33" pos:end="463:40"><name pos:start="463:33" pos:end="463:34">t1</name> <operator pos:start="463:36" pos:end="463:37">&lt;&lt;</operator> <name pos:start="463:39" pos:end="463:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="465:13" pos:end="465:18">break;</break>

        <case pos:start="467:9" pos:end="467:30">case <expr pos:start="467:14" pos:end="467:29"><name pos:start="467:14" pos:end="467:29">INDEX_op_shr_i32</name></expr>:</case>

            <expr_stmt pos:start="469:13" pos:end="469:27"><expr pos:start="469:13" pos:end="469:26"><name pos:start="469:13" pos:end="469:14">t0</name> <operator pos:start="469:16" pos:end="469:16">=</operator> <operator pos:start="469:18" pos:end="469:18">*</operator><name pos:start="469:19" pos:end="469:24">tb_ptr</name><operator pos:start="469:25" pos:end="469:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="471:13" pos:end="471:40"><expr pos:start="471:13" pos:end="471:39"><name pos:start="471:13" pos:end="471:14">t1</name> <operator pos:start="471:16" pos:end="471:16">=</operator> <call pos:start="471:18" pos:end="471:39"><name pos:start="471:18" pos:end="471:30">tci_read_ri32</name><argument_list pos:start="471:31" pos:end="471:39">(<argument pos:start="471:32" pos:end="471:38"><expr pos:start="471:32" pos:end="471:38"><operator pos:start="471:32" pos:end="471:32">&amp;</operator><name pos:start="471:33" pos:end="471:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="473:13" pos:end="473:40"><expr pos:start="473:13" pos:end="473:39"><name pos:start="473:13" pos:end="473:14">t2</name> <operator pos:start="473:16" pos:end="473:16">=</operator> <call pos:start="473:18" pos:end="473:39"><name pos:start="473:18" pos:end="473:30">tci_read_ri32</name><argument_list pos:start="473:31" pos:end="473:39">(<argument pos:start="473:32" pos:end="473:38"><expr pos:start="473:32" pos:end="473:38"><operator pos:start="473:32" pos:end="473:32">&amp;</operator><name pos:start="473:33" pos:end="473:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="475:13" pos:end="475:42"><expr pos:start="475:13" pos:end="475:41"><call pos:start="475:13" pos:end="475:41"><name pos:start="475:13" pos:end="475:27">tci_write_reg32</name><argument_list pos:start="475:28" pos:end="475:41">(<argument pos:start="475:29" pos:end="475:30"><expr pos:start="475:29" pos:end="475:30"><name pos:start="475:29" pos:end="475:30">t0</name></expr></argument>, <argument pos:start="475:33" pos:end="475:40"><expr pos:start="475:33" pos:end="475:40"><name pos:start="475:33" pos:end="475:34">t1</name> <operator pos:start="475:36" pos:end="475:37">&gt;&gt;</operator> <name pos:start="475:39" pos:end="475:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="477:13" pos:end="477:18">break;</break>

        <case pos:start="479:9" pos:end="479:30">case <expr pos:start="479:14" pos:end="479:29"><name pos:start="479:14" pos:end="479:29">INDEX_op_sar_i32</name></expr>:</case>

            <expr_stmt pos:start="481:13" pos:end="481:27"><expr pos:start="481:13" pos:end="481:26"><name pos:start="481:13" pos:end="481:14">t0</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <operator pos:start="481:18" pos:end="481:18">*</operator><name pos:start="481:19" pos:end="481:24">tb_ptr</name><operator pos:start="481:25" pos:end="481:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:40"><expr pos:start="483:13" pos:end="483:39"><name pos:start="483:13" pos:end="483:14">t1</name> <operator pos:start="483:16" pos:end="483:16">=</operator> <call pos:start="483:18" pos:end="483:39"><name pos:start="483:18" pos:end="483:30">tci_read_ri32</name><argument_list pos:start="483:31" pos:end="483:39">(<argument pos:start="483:32" pos:end="483:38"><expr pos:start="483:32" pos:end="483:38"><operator pos:start="483:32" pos:end="483:32">&amp;</operator><name pos:start="483:33" pos:end="483:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:40"><expr pos:start="485:13" pos:end="485:39"><name pos:start="485:13" pos:end="485:14">t2</name> <operator pos:start="485:16" pos:end="485:16">=</operator> <call pos:start="485:18" pos:end="485:39"><name pos:start="485:18" pos:end="485:30">tci_read_ri32</name><argument_list pos:start="485:31" pos:end="485:39">(<argument pos:start="485:32" pos:end="485:38"><expr pos:start="485:32" pos:end="485:38"><operator pos:start="485:32" pos:end="485:32">&amp;</operator><name pos:start="485:33" pos:end="485:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:53"><expr pos:start="487:13" pos:end="487:52"><call pos:start="487:13" pos:end="487:52"><name pos:start="487:13" pos:end="487:27">tci_write_reg32</name><argument_list pos:start="487:28" pos:end="487:52">(<argument pos:start="487:29" pos:end="487:30"><expr pos:start="487:29" pos:end="487:30"><name pos:start="487:29" pos:end="487:30">t0</name></expr></argument>, <argument pos:start="487:33" pos:end="487:51"><expr pos:start="487:33" pos:end="487:51"><operator pos:start="487:33" pos:end="487:33">(</operator><operator pos:start="487:34" pos:end="487:34">(</operator><name pos:start="487:35" pos:end="487:41">int32_t</name><operator pos:start="487:42" pos:end="487:42">)</operator><name pos:start="487:43" pos:end="487:44">t1</name> <operator pos:start="487:46" pos:end="487:47">&gt;&gt;</operator> <name pos:start="487:49" pos:end="487:50">t2</name><operator pos:start="487:51" pos:end="487:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="489:13" pos:end="492:0">break;</break>

<cpp:if pos:start="491:1" pos:end="491:26">#<cpp:directive pos:start="491:2" pos:end="491:3">if</cpp:directive> <expr pos:start="491:5" pos:end="491:26"><name pos:start="491:5" pos:end="491:26">TCG_TARGET_HAS_rot_i32</name></expr></cpp:if>

        <case pos:start="493:9" pos:end="493:31">case <expr pos:start="493:14" pos:end="493:30"><name pos:start="493:14" pos:end="493:30">INDEX_op_rotl_i32</name></expr>:</case>

            <expr_stmt pos:start="495:13" pos:end="495:27"><expr pos:start="495:13" pos:end="495:26"><name pos:start="495:13" pos:end="495:14">t0</name> <operator pos:start="495:16" pos:end="495:16">=</operator> <operator pos:start="495:18" pos:end="495:18">*</operator><name pos:start="495:19" pos:end="495:24">tb_ptr</name><operator pos:start="495:25" pos:end="495:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:40"><expr pos:start="497:13" pos:end="497:39"><name pos:start="497:13" pos:end="497:14">t1</name> <operator pos:start="497:16" pos:end="497:16">=</operator> <call pos:start="497:18" pos:end="497:39"><name pos:start="497:18" pos:end="497:30">tci_read_ri32</name><argument_list pos:start="497:31" pos:end="497:39">(<argument pos:start="497:32" pos:end="497:38"><expr pos:start="497:32" pos:end="497:38"><operator pos:start="497:32" pos:end="497:32">&amp;</operator><name pos:start="497:33" pos:end="497:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:40"><expr pos:start="499:13" pos:end="499:39"><name pos:start="499:13" pos:end="499:14">t2</name> <operator pos:start="499:16" pos:end="499:16">=</operator> <call pos:start="499:18" pos:end="499:39"><name pos:start="499:18" pos:end="499:30">tci_read_ri32</name><argument_list pos:start="499:31" pos:end="499:39">(<argument pos:start="499:32" pos:end="499:38"><expr pos:start="499:32" pos:end="499:38"><operator pos:start="499:32" pos:end="499:32">&amp;</operator><name pos:start="499:33" pos:end="499:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="501:13" pos:end="501:64"><expr pos:start="501:13" pos:end="501:63"><call pos:start="501:13" pos:end="501:63"><name pos:start="501:13" pos:end="501:27">tci_write_reg32</name><argument_list pos:start="501:28" pos:end="501:63">(<argument pos:start="501:29" pos:end="501:30"><expr pos:start="501:29" pos:end="501:30"><name pos:start="501:29" pos:end="501:30">t0</name></expr></argument>, <argument pos:start="501:33" pos:end="501:62"><expr pos:start="501:33" pos:end="501:62"><operator pos:start="501:33" pos:end="501:33">(</operator><name pos:start="501:34" pos:end="501:35">t1</name> <operator pos:start="501:37" pos:end="501:38">&lt;&lt;</operator> <name pos:start="501:40" pos:end="501:41">t2</name><operator pos:start="501:42" pos:end="501:42">)</operator> <operator pos:start="501:44" pos:end="501:44">|</operator> <operator pos:start="501:46" pos:end="501:46">(</operator><name pos:start="501:47" pos:end="501:48">t1</name> <operator pos:start="501:50" pos:end="501:51">&gt;&gt;</operator> <operator pos:start="501:53" pos:end="501:53">(</operator><literal type="number" pos:start="501:54" pos:end="501:57">32</literal> <operator pos:start="501:57" pos:end="501:57">-</operator> <name pos:start="501:59" pos:end="501:60">t2</name><operator pos:start="501:61" pos:end="501:61">)</operator><operator pos:start="501:62" pos:end="501:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="503:13" pos:end="503:18">break;</break>

        <case pos:start="505:9" pos:end="505:31">case <expr pos:start="505:14" pos:end="505:30"><name pos:start="505:14" pos:end="505:30">INDEX_op_rotr_i32</name></expr>:</case>

            <expr_stmt pos:start="507:13" pos:end="507:27"><expr pos:start="507:13" pos:end="507:26"><name pos:start="507:13" pos:end="507:14">t0</name> <operator pos:start="507:16" pos:end="507:16">=</operator> <operator pos:start="507:18" pos:end="507:18">*</operator><name pos:start="507:19" pos:end="507:24">tb_ptr</name><operator pos:start="507:25" pos:end="507:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:40"><expr pos:start="509:13" pos:end="509:39"><name pos:start="509:13" pos:end="509:14">t1</name> <operator pos:start="509:16" pos:end="509:16">=</operator> <call pos:start="509:18" pos:end="509:39"><name pos:start="509:18" pos:end="509:30">tci_read_ri32</name><argument_list pos:start="509:31" pos:end="509:39">(<argument pos:start="509:32" pos:end="509:38"><expr pos:start="509:32" pos:end="509:38"><operator pos:start="509:32" pos:end="509:32">&amp;</operator><name pos:start="509:33" pos:end="509:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:40"><expr pos:start="511:13" pos:end="511:39"><name pos:start="511:13" pos:end="511:14">t2</name> <operator pos:start="511:16" pos:end="511:16">=</operator> <call pos:start="511:18" pos:end="511:39"><name pos:start="511:18" pos:end="511:30">tci_read_ri32</name><argument_list pos:start="511:31" pos:end="511:39">(<argument pos:start="511:32" pos:end="511:38"><expr pos:start="511:32" pos:end="511:38"><operator pos:start="511:32" pos:end="511:32">&amp;</operator><name pos:start="511:33" pos:end="511:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:64"><expr pos:start="513:13" pos:end="513:63"><call pos:start="513:13" pos:end="513:63"><name pos:start="513:13" pos:end="513:27">tci_write_reg32</name><argument_list pos:start="513:28" pos:end="513:63">(<argument pos:start="513:29" pos:end="513:30"><expr pos:start="513:29" pos:end="513:30"><name pos:start="513:29" pos:end="513:30">t0</name></expr></argument>, <argument pos:start="513:33" pos:end="513:62"><expr pos:start="513:33" pos:end="513:62"><operator pos:start="513:33" pos:end="513:33">(</operator><name pos:start="513:34" pos:end="513:35">t1</name> <operator pos:start="513:37" pos:end="513:38">&gt;&gt;</operator> <name pos:start="513:40" pos:end="513:41">t2</name><operator pos:start="513:42" pos:end="513:42">)</operator> <operator pos:start="513:44" pos:end="513:44">|</operator> <operator pos:start="513:46" pos:end="513:46">(</operator><name pos:start="513:47" pos:end="513:48">t1</name> <operator pos:start="513:50" pos:end="513:51">&lt;&lt;</operator> <operator pos:start="513:53" pos:end="513:53">(</operator><literal type="number" pos:start="513:54" pos:end="513:57">32</literal> <operator pos:start="513:57" pos:end="513:57">-</operator> <name pos:start="513:59" pos:end="513:60">t2</name><operator pos:start="513:61" pos:end="513:61">)</operator><operator pos:start="513:62" pos:end="513:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="515:13" pos:end="520:0">break;</break>

<cpp:endif pos:start="517:1" pos:end="517:6">#<cpp:directive pos:start="517:2" pos:end="517:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="519:1" pos:end="519:30">#<cpp:directive pos:start="519:2" pos:end="519:3">if</cpp:directive> <expr pos:start="519:5" pos:end="519:30"><name pos:start="519:5" pos:end="519:30">TCG_TARGET_HAS_deposit_i32</name></expr></cpp:if>

        <case pos:start="521:9" pos:end="521:34">case <expr pos:start="521:14" pos:end="521:33"><name pos:start="521:14" pos:end="521:33">INDEX_op_deposit_i32</name></expr>:</case>

            <expr_stmt pos:start="523:13" pos:end="523:27"><expr pos:start="523:13" pos:end="523:26"><name pos:start="523:13" pos:end="523:14">t0</name> <operator pos:start="523:16" pos:end="523:16">=</operator> <operator pos:start="523:18" pos:end="523:18">*</operator><name pos:start="523:19" pos:end="523:24">tb_ptr</name><operator pos:start="523:25" pos:end="523:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="525:13" pos:end="525:39"><expr pos:start="525:13" pos:end="525:38"><name pos:start="525:13" pos:end="525:14">t1</name> <operator pos:start="525:16" pos:end="525:16">=</operator> <call pos:start="525:18" pos:end="525:38"><name pos:start="525:18" pos:end="525:29">tci_read_r32</name><argument_list pos:start="525:30" pos:end="525:38">(<argument pos:start="525:31" pos:end="525:37"><expr pos:start="525:31" pos:end="525:37"><operator pos:start="525:31" pos:end="525:31">&amp;</operator><name pos:start="525:32" pos:end="525:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="527:13" pos:end="527:39"><expr pos:start="527:13" pos:end="527:38"><name pos:start="527:13" pos:end="527:14">t2</name> <operator pos:start="527:16" pos:end="527:16">=</operator> <call pos:start="527:18" pos:end="527:38"><name pos:start="527:18" pos:end="527:29">tci_read_r32</name><argument_list pos:start="527:30" pos:end="527:38">(<argument pos:start="527:31" pos:end="527:37"><expr pos:start="527:31" pos:end="527:37"><operator pos:start="527:31" pos:end="527:31">&amp;</operator><name pos:start="527:32" pos:end="527:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="529:13" pos:end="529:30"><expr pos:start="529:13" pos:end="529:29"><name pos:start="529:13" pos:end="529:17">tmp16</name> <operator pos:start="529:19" pos:end="529:19">=</operator> <operator pos:start="529:21" pos:end="529:21">*</operator><name pos:start="529:22" pos:end="529:27">tb_ptr</name><operator pos:start="529:28" pos:end="529:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:29"><expr pos:start="531:13" pos:end="531:28"><name pos:start="531:13" pos:end="531:16">tmp8</name> <operator pos:start="531:18" pos:end="531:18">=</operator> <operator pos:start="531:20" pos:end="531:20">*</operator><name pos:start="531:21" pos:end="531:26">tb_ptr</name><operator pos:start="531:27" pos:end="531:28">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:49"><expr pos:start="533:13" pos:end="533:48"><name pos:start="533:13" pos:end="533:17">tmp32</name> <operator pos:start="533:19" pos:end="533:19">=</operator> <operator pos:start="533:21" pos:end="533:21">(</operator><operator pos:start="533:22" pos:end="533:22">(</operator><operator pos:start="533:23" pos:end="533:23">(</operator><literal type="number" pos:start="533:24" pos:end="533:24">1</literal> <operator pos:start="533:26" pos:end="533:27">&lt;&lt;</operator> <name pos:start="533:29" pos:end="533:32">tmp8</name><operator pos:start="533:33" pos:end="533:33">)</operator> <operator pos:start="533:35" pos:end="533:35">-</operator> <literal type="number" pos:start="533:37" pos:end="533:37">1</literal><operator pos:start="533:38" pos:end="533:38">)</operator> <operator pos:start="533:40" pos:end="533:41">&lt;&lt;</operator> <name pos:start="533:43" pos:end="533:47">tmp16</name><operator pos:start="533:48" pos:end="533:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="535:13" pos:end="535:73"><expr pos:start="535:13" pos:end="535:72"><call pos:start="535:13" pos:end="535:72"><name pos:start="535:13" pos:end="535:27">tci_write_reg32</name><argument_list pos:start="535:28" pos:end="535:72">(<argument pos:start="535:29" pos:end="535:30"><expr pos:start="535:29" pos:end="535:30"><name pos:start="535:29" pos:end="535:30">t0</name></expr></argument>, <argument pos:start="535:33" pos:end="535:71"><expr pos:start="535:33" pos:end="535:71"><operator pos:start="535:33" pos:end="535:33">(</operator><name pos:start="535:34" pos:end="535:35">t1</name> <operator pos:start="535:37" pos:end="535:37">&amp;</operator> <operator pos:start="535:39" pos:end="535:39">~</operator><name pos:start="535:40" pos:end="535:44">tmp32</name><operator pos:start="535:45" pos:end="535:45">)</operator> <operator pos:start="535:47" pos:end="535:47">|</operator> <operator pos:start="535:49" pos:end="535:49">(</operator><operator pos:start="535:50" pos:end="535:50">(</operator><name pos:start="535:51" pos:end="535:52">t2</name> <operator pos:start="535:54" pos:end="535:55">&lt;&lt;</operator> <name pos:start="535:57" pos:end="535:61">tmp16</name><operator pos:start="535:62" pos:end="535:62">)</operator> <operator pos:start="535:64" pos:end="535:64">&amp;</operator> <name pos:start="535:66" pos:end="535:70">tmp32</name><operator pos:start="535:71" pos:end="535:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="537:13" pos:end="540:0">break;</break>

<cpp:endif pos:start="539:1" pos:end="539:6">#<cpp:directive pos:start="539:2" pos:end="539:6">endif</cpp:directive></cpp:endif>

        <case pos:start="541:9" pos:end="541:33">case <expr pos:start="541:14" pos:end="541:32"><name pos:start="541:14" pos:end="541:32">INDEX_op_brcond_i32</name></expr>:</case>

            <expr_stmt pos:start="543:13" pos:end="543:39"><expr pos:start="543:13" pos:end="543:38"><name pos:start="543:13" pos:end="543:14">t0</name> <operator pos:start="543:16" pos:end="543:16">=</operator> <call pos:start="543:18" pos:end="543:38"><name pos:start="543:18" pos:end="543:29">tci_read_r32</name><argument_list pos:start="543:30" pos:end="543:38">(<argument pos:start="543:31" pos:end="543:37"><expr pos:start="543:31" pos:end="543:37"><operator pos:start="543:31" pos:end="543:31">&amp;</operator><name pos:start="543:32" pos:end="543:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="545:13" pos:end="545:40"><expr pos:start="545:13" pos:end="545:39"><name pos:start="545:13" pos:end="545:14">t1</name> <operator pos:start="545:16" pos:end="545:16">=</operator> <call pos:start="545:18" pos:end="545:39"><name pos:start="545:18" pos:end="545:30">tci_read_ri32</name><argument_list pos:start="545:31" pos:end="545:39">(<argument pos:start="545:32" pos:end="545:38"><expr pos:start="545:32" pos:end="545:38"><operator pos:start="545:32" pos:end="545:32">&amp;</operator><name pos:start="545:33" pos:end="545:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:34"><expr pos:start="547:13" pos:end="547:33"><name pos:start="547:13" pos:end="547:21">condition</name> <operator pos:start="547:23" pos:end="547:23">=</operator> <operator pos:start="547:25" pos:end="547:25">*</operator><name pos:start="547:26" pos:end="547:31">tb_ptr</name><operator pos:start="547:32" pos:end="547:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="549:13" pos:end="549:44"><expr pos:start="549:13" pos:end="549:43"><name pos:start="549:13" pos:end="549:17">label</name> <operator pos:start="549:19" pos:end="549:19">=</operator> <call pos:start="549:21" pos:end="549:43"><name pos:start="549:21" pos:end="549:34">tci_read_label</name><argument_list pos:start="549:35" pos:end="549:43">(<argument pos:start="549:36" pos:end="549:42"><expr pos:start="549:36" pos:end="549:42"><operator pos:start="549:36" pos:end="549:36">&amp;</operator><name pos:start="549:37" pos:end="549:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="551:13" pos:end="559:13"><if pos:start="551:13" pos:end="559:13">if <condition pos:start="551:16" pos:end="551:49">(<expr pos:start="551:17" pos:end="551:48"><call pos:start="551:17" pos:end="551:48"><name pos:start="551:17" pos:end="551:29">tci_compare32</name><argument_list pos:start="551:30" pos:end="551:48">(<argument pos:start="551:31" pos:end="551:32"><expr pos:start="551:31" pos:end="551:32"><name pos:start="551:31" pos:end="551:32">t0</name></expr></argument>, <argument pos:start="551:35" pos:end="551:36"><expr pos:start="551:35" pos:end="551:36"><name pos:start="551:35" pos:end="551:36">t1</name></expr></argument>, <argument pos:start="551:39" pos:end="551:47"><expr pos:start="551:39" pos:end="551:47"><name pos:start="551:39" pos:end="551:47">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="551:51" pos:end="559:13">{<block_content pos:start="553:17" pos:end="557:25">

                <expr_stmt pos:start="553:17" pos:end="553:57"><expr pos:start="553:17" pos:end="553:56"><call pos:start="553:17" pos:end="553:56"><name pos:start="553:17" pos:end="553:22">assert</name><argument_list pos:start="553:23" pos:end="553:56">(<argument pos:start="553:24" pos:end="553:55"><expr pos:start="553:24" pos:end="553:55"><name pos:start="553:24" pos:end="553:29">tb_ptr</name> <operator pos:start="553:31" pos:end="553:32">==</operator> <name pos:start="553:34" pos:end="553:45">old_code_ptr</name> <operator pos:start="553:47" pos:end="553:47">+</operator> <name pos:start="553:49" pos:end="553:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="555:17" pos:end="555:42"><expr pos:start="555:17" pos:end="555:41"><name pos:start="555:17" pos:end="555:22">tb_ptr</name> <operator pos:start="555:24" pos:end="555:24">=</operator> <operator pos:start="555:26" pos:end="555:26">(</operator><name pos:start="555:27" pos:end="555:33">uint8_t</name> <operator pos:start="555:35" pos:end="555:35">*</operator><operator pos:start="555:36" pos:end="555:36">)</operator><name pos:start="555:37" pos:end="555:41">label</name></expr>;</expr_stmt>

                <continue pos:start="557:17" pos:end="557:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="561:13" pos:end="564:0">break;</break>

<cpp:if pos:start="563:1" pos:end="563:29">#<cpp:directive pos:start="563:2" pos:end="563:3">if</cpp:directive> <expr pos:start="563:5" pos:end="563:29"><name pos:start="563:5" pos:end="563:23">TCG_TARGET_REG_BITS</name> <operator pos:start="563:25" pos:end="563:26">==</operator> <literal type="number" pos:start="563:28" pos:end="563:29">32</literal></expr></cpp:if>

        <case pos:start="565:9" pos:end="565:31">case <expr pos:start="565:14" pos:end="565:30"><name pos:start="565:14" pos:end="565:30">INDEX_op_add2_i32</name></expr>:</case>

            <expr_stmt pos:start="567:13" pos:end="567:27"><expr pos:start="567:13" pos:end="567:26"><name pos:start="567:13" pos:end="567:14">t0</name> <operator pos:start="567:16" pos:end="567:16">=</operator> <operator pos:start="567:18" pos:end="567:18">*</operator><name pos:start="567:19" pos:end="567:24">tb_ptr</name><operator pos:start="567:25" pos:end="567:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:27"><expr pos:start="569:13" pos:end="569:26"><name pos:start="569:13" pos:end="569:14">t1</name> <operator pos:start="569:16" pos:end="569:16">=</operator> <operator pos:start="569:18" pos:end="569:18">*</operator><name pos:start="569:19" pos:end="569:24">tb_ptr</name><operator pos:start="569:25" pos:end="569:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:42"><expr pos:start="571:13" pos:end="571:41"><name pos:start="571:13" pos:end="571:17">tmp64</name> <operator pos:start="571:19" pos:end="571:19">=</operator> <call pos:start="571:21" pos:end="571:41"><name pos:start="571:21" pos:end="571:32">tci_read_r64</name><argument_list pos:start="571:33" pos:end="571:41">(<argument pos:start="571:34" pos:end="571:40"><expr pos:start="571:34" pos:end="571:40"><operator pos:start="571:34" pos:end="571:34">&amp;</operator><name pos:start="571:35" pos:end="571:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:43"><expr pos:start="573:13" pos:end="573:42"><name pos:start="573:13" pos:end="573:17">tmp64</name> <operator pos:start="573:19" pos:end="573:20">+=</operator> <call pos:start="573:22" pos:end="573:42"><name pos:start="573:22" pos:end="573:33">tci_read_r64</name><argument_list pos:start="573:34" pos:end="573:42">(<argument pos:start="573:35" pos:end="573:41"><expr pos:start="573:35" pos:end="573:41"><operator pos:start="573:35" pos:end="573:35">&amp;</operator><name pos:start="573:36" pos:end="573:41">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="575:13" pos:end="575:43"><expr pos:start="575:13" pos:end="575:42"><call pos:start="575:13" pos:end="575:42"><name pos:start="575:13" pos:end="575:27">tci_write_reg64</name><argument_list pos:start="575:28" pos:end="575:42">(<argument pos:start="575:29" pos:end="575:30"><expr pos:start="575:29" pos:end="575:30"><name pos:start="575:29" pos:end="575:30">t1</name></expr></argument>, <argument pos:start="575:33" pos:end="575:34"><expr pos:start="575:33" pos:end="575:34"><name pos:start="575:33" pos:end="575:34">t0</name></expr></argument>, <argument pos:start="575:37" pos:end="575:41"><expr pos:start="575:37" pos:end="575:41"><name pos:start="575:37" pos:end="575:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="577:13" pos:end="577:18">break;</break>

        <case pos:start="579:9" pos:end="579:31">case <expr pos:start="579:14" pos:end="579:30"><name pos:start="579:14" pos:end="579:30">INDEX_op_sub2_i32</name></expr>:</case>

            <expr_stmt pos:start="581:13" pos:end="581:27"><expr pos:start="581:13" pos:end="581:26"><name pos:start="581:13" pos:end="581:14">t0</name> <operator pos:start="581:16" pos:end="581:16">=</operator> <operator pos:start="581:18" pos:end="581:18">*</operator><name pos:start="581:19" pos:end="581:24">tb_ptr</name><operator pos:start="581:25" pos:end="581:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:27"><expr pos:start="583:13" pos:end="583:26"><name pos:start="583:13" pos:end="583:14">t1</name> <operator pos:start="583:16" pos:end="583:16">=</operator> <operator pos:start="583:18" pos:end="583:18">*</operator><name pos:start="583:19" pos:end="583:24">tb_ptr</name><operator pos:start="583:25" pos:end="583:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="585:13" pos:end="585:42"><expr pos:start="585:13" pos:end="585:41"><name pos:start="585:13" pos:end="585:17">tmp64</name> <operator pos:start="585:19" pos:end="585:19">=</operator> <call pos:start="585:21" pos:end="585:41"><name pos:start="585:21" pos:end="585:32">tci_read_r64</name><argument_list pos:start="585:33" pos:end="585:41">(<argument pos:start="585:34" pos:end="585:40"><expr pos:start="585:34" pos:end="585:40"><operator pos:start="585:34" pos:end="585:34">&amp;</operator><name pos:start="585:35" pos:end="585:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="587:13" pos:end="587:43"><expr pos:start="587:13" pos:end="587:42"><name pos:start="587:13" pos:end="587:17">tmp64</name> <operator pos:start="587:19" pos:end="587:20">-=</operator> <call pos:start="587:22" pos:end="587:42"><name pos:start="587:22" pos:end="587:33">tci_read_r64</name><argument_list pos:start="587:34" pos:end="587:42">(<argument pos:start="587:35" pos:end="587:41"><expr pos:start="587:35" pos:end="587:41"><operator pos:start="587:35" pos:end="587:35">&amp;</operator><name pos:start="587:36" pos:end="587:41">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="589:13" pos:end="589:43"><expr pos:start="589:13" pos:end="589:42"><call pos:start="589:13" pos:end="589:42"><name pos:start="589:13" pos:end="589:27">tci_write_reg64</name><argument_list pos:start="589:28" pos:end="589:42">(<argument pos:start="589:29" pos:end="589:30"><expr pos:start="589:29" pos:end="589:30"><name pos:start="589:29" pos:end="589:30">t1</name></expr></argument>, <argument pos:start="589:33" pos:end="589:34"><expr pos:start="589:33" pos:end="589:34"><name pos:start="589:33" pos:end="589:34">t0</name></expr></argument>, <argument pos:start="589:37" pos:end="589:41"><expr pos:start="589:37" pos:end="589:41"><name pos:start="589:37" pos:end="589:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="591:13" pos:end="591:18">break;</break>

        <case pos:start="593:9" pos:end="593:34">case <expr pos:start="593:14" pos:end="593:33"><name pos:start="593:14" pos:end="593:33">INDEX_op_brcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="595:13" pos:end="595:42"><expr pos:start="595:13" pos:end="595:41"><name pos:start="595:13" pos:end="595:17">tmp64</name> <operator pos:start="595:19" pos:end="595:19">=</operator> <call pos:start="595:21" pos:end="595:41"><name pos:start="595:21" pos:end="595:32">tci_read_r64</name><argument_list pos:start="595:33" pos:end="595:41">(<argument pos:start="595:34" pos:end="595:40"><expr pos:start="595:34" pos:end="595:40"><operator pos:start="595:34" pos:end="595:34">&amp;</operator><name pos:start="595:35" pos:end="595:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:41"><expr pos:start="597:13" pos:end="597:40"><name pos:start="597:13" pos:end="597:15">v64</name> <operator pos:start="597:17" pos:end="597:17">=</operator> <call pos:start="597:19" pos:end="597:40"><name pos:start="597:19" pos:end="597:31">tci_read_ri64</name><argument_list pos:start="597:32" pos:end="597:40">(<argument pos:start="597:33" pos:end="597:39"><expr pos:start="597:33" pos:end="597:39"><operator pos:start="597:33" pos:end="597:33">&amp;</operator><name pos:start="597:34" pos:end="597:39">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="599:13" pos:end="599:34"><expr pos:start="599:13" pos:end="599:33"><name pos:start="599:13" pos:end="599:21">condition</name> <operator pos:start="599:23" pos:end="599:23">=</operator> <operator pos:start="599:25" pos:end="599:25">*</operator><name pos:start="599:26" pos:end="599:31">tb_ptr</name><operator pos:start="599:32" pos:end="599:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="601:13" pos:end="601:44"><expr pos:start="601:13" pos:end="601:43"><name pos:start="601:13" pos:end="601:17">label</name> <operator pos:start="601:19" pos:end="601:19">=</operator> <call pos:start="601:21" pos:end="601:43"><name pos:start="601:21" pos:end="601:34">tci_read_label</name><argument_list pos:start="601:35" pos:end="601:43">(<argument pos:start="601:36" pos:end="601:42"><expr pos:start="601:36" pos:end="601:42"><operator pos:start="601:36" pos:end="601:36">&amp;</operator><name pos:start="601:37" pos:end="601:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="603:13" pos:end="611:13"><if pos:start="603:13" pos:end="611:13">if <condition pos:start="603:16" pos:end="603:53">(<expr pos:start="603:17" pos:end="603:52"><call pos:start="603:17" pos:end="603:52"><name pos:start="603:17" pos:end="603:29">tci_compare64</name><argument_list pos:start="603:30" pos:end="603:52">(<argument pos:start="603:31" pos:end="603:35"><expr pos:start="603:31" pos:end="603:35"><name pos:start="603:31" pos:end="603:35">tmp64</name></expr></argument>, <argument pos:start="603:38" pos:end="603:40"><expr pos:start="603:38" pos:end="603:40"><name pos:start="603:38" pos:end="603:40">v64</name></expr></argument>, <argument pos:start="603:43" pos:end="603:51"><expr pos:start="603:43" pos:end="603:51"><name pos:start="603:43" pos:end="603:51">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="603:55" pos:end="611:13">{<block_content pos:start="605:17" pos:end="609:25">

                <expr_stmt pos:start="605:17" pos:end="605:57"><expr pos:start="605:17" pos:end="605:56"><call pos:start="605:17" pos:end="605:56"><name pos:start="605:17" pos:end="605:22">assert</name><argument_list pos:start="605:23" pos:end="605:56">(<argument pos:start="605:24" pos:end="605:55"><expr pos:start="605:24" pos:end="605:55"><name pos:start="605:24" pos:end="605:29">tb_ptr</name> <operator pos:start="605:31" pos:end="605:32">==</operator> <name pos:start="605:34" pos:end="605:45">old_code_ptr</name> <operator pos:start="605:47" pos:end="605:47">+</operator> <name pos:start="605:49" pos:end="605:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="607:17" pos:end="607:42"><expr pos:start="607:17" pos:end="607:41"><name pos:start="607:17" pos:end="607:22">tb_ptr</name> <operator pos:start="607:24" pos:end="607:24">=</operator> <operator pos:start="607:26" pos:end="607:26">(</operator><name pos:start="607:27" pos:end="607:33">uint8_t</name> <operator pos:start="607:35" pos:end="607:35">*</operator><operator pos:start="607:36" pos:end="607:36">)</operator><name pos:start="607:37" pos:end="607:41">label</name></expr>;</expr_stmt>

                <continue pos:start="609:17" pos:end="609:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="613:13" pos:end="613:18">break;</break>

        <case pos:start="615:9" pos:end="615:32">case <expr pos:start="615:14" pos:end="615:31"><name pos:start="615:14" pos:end="615:31">INDEX_op_mulu2_i32</name></expr>:</case>

            <expr_stmt pos:start="617:13" pos:end="617:27"><expr pos:start="617:13" pos:end="617:26"><name pos:start="617:13" pos:end="617:14">t0</name> <operator pos:start="617:16" pos:end="617:16">=</operator> <operator pos:start="617:18" pos:end="617:18">*</operator><name pos:start="617:19" pos:end="617:24">tb_ptr</name><operator pos:start="617:25" pos:end="617:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="619:13" pos:end="619:27"><expr pos:start="619:13" pos:end="619:26"><name pos:start="619:13" pos:end="619:14">t1</name> <operator pos:start="619:16" pos:end="619:16">=</operator> <operator pos:start="619:18" pos:end="619:18">*</operator><name pos:start="619:19" pos:end="619:24">tb_ptr</name><operator pos:start="619:25" pos:end="619:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="621:13" pos:end="621:39"><expr pos:start="621:13" pos:end="621:38"><name pos:start="621:13" pos:end="621:14">t2</name> <operator pos:start="621:16" pos:end="621:16">=</operator> <call pos:start="621:18" pos:end="621:38"><name pos:start="621:18" pos:end="621:29">tci_read_r32</name><argument_list pos:start="621:30" pos:end="621:38">(<argument pos:start="621:31" pos:end="621:37"><expr pos:start="621:31" pos:end="621:37"><operator pos:start="621:31" pos:end="621:31">&amp;</operator><name pos:start="621:32" pos:end="621:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="623:13" pos:end="623:42"><expr pos:start="623:13" pos:end="623:41"><name pos:start="623:13" pos:end="623:17">tmp64</name> <operator pos:start="623:19" pos:end="623:19">=</operator> <call pos:start="623:21" pos:end="623:41"><name pos:start="623:21" pos:end="623:32">tci_read_r32</name><argument_list pos:start="623:33" pos:end="623:41">(<argument pos:start="623:34" pos:end="623:40"><expr pos:start="623:34" pos:end="623:40"><operator pos:start="623:34" pos:end="623:34">&amp;</operator><name pos:start="623:35" pos:end="623:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="625:13" pos:end="625:48"><expr pos:start="625:13" pos:end="625:47"><call pos:start="625:13" pos:end="625:47"><name pos:start="625:13" pos:end="625:27">tci_write_reg64</name><argument_list pos:start="625:28" pos:end="625:47">(<argument pos:start="625:29" pos:end="625:30"><expr pos:start="625:29" pos:end="625:30"><name pos:start="625:29" pos:end="625:30">t1</name></expr></argument>, <argument pos:start="625:33" pos:end="625:34"><expr pos:start="625:33" pos:end="625:34"><name pos:start="625:33" pos:end="625:34">t0</name></expr></argument>, <argument pos:start="625:37" pos:end="625:46"><expr pos:start="625:37" pos:end="625:46"><name pos:start="625:37" pos:end="625:38">t2</name> <operator pos:start="625:40" pos:end="625:40">*</operator> <name pos:start="625:42" pos:end="625:46">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="627:13" pos:end="632:0">break;</break>

<cpp:endif pos:start="629:1" pos:end="629:6">#<cpp:directive pos:start="629:2" pos:end="629:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="629:8" pos:end="629:38">/* TCG_TARGET_REG_BITS == 32 */</comment>

<cpp:if pos:start="631:1" pos:end="631:28">#<cpp:directive pos:start="631:2" pos:end="631:3">if</cpp:directive> <expr pos:start="631:5" pos:end="631:28"><name pos:start="631:5" pos:end="631:28">TCG_TARGET_HAS_ext8s_i32</name></expr></cpp:if>

        <case pos:start="633:9" pos:end="633:32">case <expr pos:start="633:14" pos:end="633:31"><name pos:start="633:14" pos:end="633:31">INDEX_op_ext8s_i32</name></expr>:</case>

            <expr_stmt pos:start="635:13" pos:end="635:27"><expr pos:start="635:13" pos:end="635:26"><name pos:start="635:13" pos:end="635:14">t0</name> <operator pos:start="635:16" pos:end="635:16">=</operator> <operator pos:start="635:18" pos:end="635:18">*</operator><name pos:start="635:19" pos:end="635:24">tb_ptr</name><operator pos:start="635:25" pos:end="635:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:39"><expr pos:start="637:13" pos:end="637:38"><name pos:start="637:13" pos:end="637:14">t1</name> <operator pos:start="637:16" pos:end="637:16">=</operator> <call pos:start="637:18" pos:end="637:38"><name pos:start="637:18" pos:end="637:29">tci_read_r8s</name><argument_list pos:start="637:30" pos:end="637:38">(<argument pos:start="637:31" pos:end="637:37"><expr pos:start="637:31" pos:end="637:37"><operator pos:start="637:31" pos:end="637:31">&amp;</operator><name pos:start="637:32" pos:end="637:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="639:13" pos:end="639:36"><expr pos:start="639:13" pos:end="639:35"><call pos:start="639:13" pos:end="639:35"><name pos:start="639:13" pos:end="639:27">tci_write_reg32</name><argument_list pos:start="639:28" pos:end="639:35">(<argument pos:start="639:29" pos:end="639:30"><expr pos:start="639:29" pos:end="639:30"><name pos:start="639:29" pos:end="639:30">t0</name></expr></argument>, <argument pos:start="639:33" pos:end="639:34"><expr pos:start="639:33" pos:end="639:34"><name pos:start="639:33" pos:end="639:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="641:13" pos:end="646:0">break;</break>

<cpp:endif pos:start="643:1" pos:end="643:6">#<cpp:directive pos:start="643:2" pos:end="643:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="645:1" pos:end="645:29">#<cpp:directive pos:start="645:2" pos:end="645:3">if</cpp:directive> <expr pos:start="645:5" pos:end="645:29"><name pos:start="645:5" pos:end="645:29">TCG_TARGET_HAS_ext16s_i32</name></expr></cpp:if>

        <case pos:start="647:9" pos:end="647:33">case <expr pos:start="647:14" pos:end="647:32"><name pos:start="647:14" pos:end="647:32">INDEX_op_ext16s_i32</name></expr>:</case>

            <expr_stmt pos:start="649:13" pos:end="649:27"><expr pos:start="649:13" pos:end="649:26"><name pos:start="649:13" pos:end="649:14">t0</name> <operator pos:start="649:16" pos:end="649:16">=</operator> <operator pos:start="649:18" pos:end="649:18">*</operator><name pos:start="649:19" pos:end="649:24">tb_ptr</name><operator pos:start="649:25" pos:end="649:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="651:13" pos:end="651:40"><expr pos:start="651:13" pos:end="651:39"><name pos:start="651:13" pos:end="651:14">t1</name> <operator pos:start="651:16" pos:end="651:16">=</operator> <call pos:start="651:18" pos:end="651:39"><name pos:start="651:18" pos:end="651:30">tci_read_r16s</name><argument_list pos:start="651:31" pos:end="651:39">(<argument pos:start="651:32" pos:end="651:38"><expr pos:start="651:32" pos:end="651:38"><operator pos:start="651:32" pos:end="651:32">&amp;</operator><name pos:start="651:33" pos:end="651:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="653:13" pos:end="653:36"><expr pos:start="653:13" pos:end="653:35"><call pos:start="653:13" pos:end="653:35"><name pos:start="653:13" pos:end="653:27">tci_write_reg32</name><argument_list pos:start="653:28" pos:end="653:35">(<argument pos:start="653:29" pos:end="653:30"><expr pos:start="653:29" pos:end="653:30"><name pos:start="653:29" pos:end="653:30">t0</name></expr></argument>, <argument pos:start="653:33" pos:end="653:34"><expr pos:start="653:33" pos:end="653:34"><name pos:start="653:33" pos:end="653:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="655:13" pos:end="660:0">break;</break>

<cpp:endif pos:start="657:1" pos:end="657:6">#<cpp:directive pos:start="657:2" pos:end="657:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="659:1" pos:end="659:28">#<cpp:directive pos:start="659:2" pos:end="659:3">if</cpp:directive> <expr pos:start="659:5" pos:end="659:28"><name pos:start="659:5" pos:end="659:28">TCG_TARGET_HAS_ext8u_i32</name></expr></cpp:if>

        <case pos:start="661:9" pos:end="661:32">case <expr pos:start="661:14" pos:end="661:31"><name pos:start="661:14" pos:end="661:31">INDEX_op_ext8u_i32</name></expr>:</case>

            <expr_stmt pos:start="663:13" pos:end="663:27"><expr pos:start="663:13" pos:end="663:26"><name pos:start="663:13" pos:end="663:14">t0</name> <operator pos:start="663:16" pos:end="663:16">=</operator> <operator pos:start="663:18" pos:end="663:18">*</operator><name pos:start="663:19" pos:end="663:24">tb_ptr</name><operator pos:start="663:25" pos:end="663:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="665:13" pos:end="665:38"><expr pos:start="665:13" pos:end="665:37"><name pos:start="665:13" pos:end="665:14">t1</name> <operator pos:start="665:16" pos:end="665:16">=</operator> <call pos:start="665:18" pos:end="665:37"><name pos:start="665:18" pos:end="665:28">tci_read_r8</name><argument_list pos:start="665:29" pos:end="665:37">(<argument pos:start="665:30" pos:end="665:36"><expr pos:start="665:30" pos:end="665:36"><operator pos:start="665:30" pos:end="665:30">&amp;</operator><name pos:start="665:31" pos:end="665:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="667:13" pos:end="667:36"><expr pos:start="667:13" pos:end="667:35"><call pos:start="667:13" pos:end="667:35"><name pos:start="667:13" pos:end="667:27">tci_write_reg32</name><argument_list pos:start="667:28" pos:end="667:35">(<argument pos:start="667:29" pos:end="667:30"><expr pos:start="667:29" pos:end="667:30"><name pos:start="667:29" pos:end="667:30">t0</name></expr></argument>, <argument pos:start="667:33" pos:end="667:34"><expr pos:start="667:33" pos:end="667:34"><name pos:start="667:33" pos:end="667:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="669:13" pos:end="674:0">break;</break>

<cpp:endif pos:start="671:1" pos:end="671:6">#<cpp:directive pos:start="671:2" pos:end="671:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="673:1" pos:end="673:29">#<cpp:directive pos:start="673:2" pos:end="673:3">if</cpp:directive> <expr pos:start="673:5" pos:end="673:29"><name pos:start="673:5" pos:end="673:29">TCG_TARGET_HAS_ext16u_i32</name></expr></cpp:if>

        <case pos:start="675:9" pos:end="675:33">case <expr pos:start="675:14" pos:end="675:32"><name pos:start="675:14" pos:end="675:32">INDEX_op_ext16u_i32</name></expr>:</case>

            <expr_stmt pos:start="677:13" pos:end="677:27"><expr pos:start="677:13" pos:end="677:26"><name pos:start="677:13" pos:end="677:14">t0</name> <operator pos:start="677:16" pos:end="677:16">=</operator> <operator pos:start="677:18" pos:end="677:18">*</operator><name pos:start="677:19" pos:end="677:24">tb_ptr</name><operator pos:start="677:25" pos:end="677:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:39"><expr pos:start="679:13" pos:end="679:38"><name pos:start="679:13" pos:end="679:14">t1</name> <operator pos:start="679:16" pos:end="679:16">=</operator> <call pos:start="679:18" pos:end="679:38"><name pos:start="679:18" pos:end="679:29">tci_read_r16</name><argument_list pos:start="679:30" pos:end="679:38">(<argument pos:start="679:31" pos:end="679:37"><expr pos:start="679:31" pos:end="679:37"><operator pos:start="679:31" pos:end="679:31">&amp;</operator><name pos:start="679:32" pos:end="679:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="681:13" pos:end="681:36"><expr pos:start="681:13" pos:end="681:35"><call pos:start="681:13" pos:end="681:35"><name pos:start="681:13" pos:end="681:27">tci_write_reg32</name><argument_list pos:start="681:28" pos:end="681:35">(<argument pos:start="681:29" pos:end="681:30"><expr pos:start="681:29" pos:end="681:30"><name pos:start="681:29" pos:end="681:30">t0</name></expr></argument>, <argument pos:start="681:33" pos:end="681:34"><expr pos:start="681:33" pos:end="681:34"><name pos:start="681:33" pos:end="681:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="683:13" pos:end="688:0">break;</break>

<cpp:endif pos:start="685:1" pos:end="685:6">#<cpp:directive pos:start="685:2" pos:end="685:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="687:1" pos:end="687:30">#<cpp:directive pos:start="687:2" pos:end="687:3">if</cpp:directive> <expr pos:start="687:5" pos:end="687:30"><name pos:start="687:5" pos:end="687:30">TCG_TARGET_HAS_bswap16_i32</name></expr></cpp:if>

        <case pos:start="689:9" pos:end="689:34">case <expr pos:start="689:14" pos:end="689:33"><name pos:start="689:14" pos:end="689:33">INDEX_op_bswap16_i32</name></expr>:</case>

            <expr_stmt pos:start="691:13" pos:end="691:27"><expr pos:start="691:13" pos:end="691:26"><name pos:start="691:13" pos:end="691:14">t0</name> <operator pos:start="691:16" pos:end="691:16">=</operator> <operator pos:start="691:18" pos:end="691:18">*</operator><name pos:start="691:19" pos:end="691:24">tb_ptr</name><operator pos:start="691:25" pos:end="691:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:39"><expr pos:start="693:13" pos:end="693:38"><name pos:start="693:13" pos:end="693:14">t1</name> <operator pos:start="693:16" pos:end="693:16">=</operator> <call pos:start="693:18" pos:end="693:38"><name pos:start="693:18" pos:end="693:29">tci_read_r16</name><argument_list pos:start="693:30" pos:end="693:38">(<argument pos:start="693:31" pos:end="693:37"><expr pos:start="693:31" pos:end="693:37"><operator pos:start="693:31" pos:end="693:31">&amp;</operator><name pos:start="693:32" pos:end="693:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:45"><expr pos:start="695:13" pos:end="695:44"><call pos:start="695:13" pos:end="695:44"><name pos:start="695:13" pos:end="695:27">tci_write_reg32</name><argument_list pos:start="695:28" pos:end="695:44">(<argument pos:start="695:29" pos:end="695:30"><expr pos:start="695:29" pos:end="695:30"><name pos:start="695:29" pos:end="695:30">t0</name></expr></argument>, <argument pos:start="695:33" pos:end="695:43"><expr pos:start="695:33" pos:end="695:43"><call pos:start="695:33" pos:end="695:43"><name pos:start="695:33" pos:end="695:39">bswap16</name><argument_list pos:start="695:40" pos:end="695:43">(<argument pos:start="695:41" pos:end="695:42"><expr pos:start="695:41" pos:end="695:42"><name pos:start="695:41" pos:end="695:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="697:13" pos:end="702:0">break;</break>

<cpp:endif pos:start="699:1" pos:end="699:6">#<cpp:directive pos:start="699:2" pos:end="699:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="701:1" pos:end="701:30">#<cpp:directive pos:start="701:2" pos:end="701:3">if</cpp:directive> <expr pos:start="701:5" pos:end="701:30"><name pos:start="701:5" pos:end="701:30">TCG_TARGET_HAS_bswap32_i32</name></expr></cpp:if>

        <case pos:start="703:9" pos:end="703:34">case <expr pos:start="703:14" pos:end="703:33"><name pos:start="703:14" pos:end="703:33">INDEX_op_bswap32_i32</name></expr>:</case>

            <expr_stmt pos:start="705:13" pos:end="705:27"><expr pos:start="705:13" pos:end="705:26"><name pos:start="705:13" pos:end="705:14">t0</name> <operator pos:start="705:16" pos:end="705:16">=</operator> <operator pos:start="705:18" pos:end="705:18">*</operator><name pos:start="705:19" pos:end="705:24">tb_ptr</name><operator pos:start="705:25" pos:end="705:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:39"><expr pos:start="707:13" pos:end="707:38"><name pos:start="707:13" pos:end="707:14">t1</name> <operator pos:start="707:16" pos:end="707:16">=</operator> <call pos:start="707:18" pos:end="707:38"><name pos:start="707:18" pos:end="707:29">tci_read_r32</name><argument_list pos:start="707:30" pos:end="707:38">(<argument pos:start="707:31" pos:end="707:37"><expr pos:start="707:31" pos:end="707:37"><operator pos:start="707:31" pos:end="707:31">&amp;</operator><name pos:start="707:32" pos:end="707:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:45"><expr pos:start="709:13" pos:end="709:44"><call pos:start="709:13" pos:end="709:44"><name pos:start="709:13" pos:end="709:27">tci_write_reg32</name><argument_list pos:start="709:28" pos:end="709:44">(<argument pos:start="709:29" pos:end="709:30"><expr pos:start="709:29" pos:end="709:30"><name pos:start="709:29" pos:end="709:30">t0</name></expr></argument>, <argument pos:start="709:33" pos:end="709:43"><expr pos:start="709:33" pos:end="709:43"><call pos:start="709:33" pos:end="709:43"><name pos:start="709:33" pos:end="709:39">bswap32</name><argument_list pos:start="709:40" pos:end="709:43">(<argument pos:start="709:41" pos:end="709:42"><expr pos:start="709:41" pos:end="709:42"><name pos:start="709:41" pos:end="709:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="711:13" pos:end="716:0">break;</break>

<cpp:endif pos:start="713:1" pos:end="713:6">#<cpp:directive pos:start="713:2" pos:end="713:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="715:1" pos:end="715:26">#<cpp:directive pos:start="715:2" pos:end="715:3">if</cpp:directive> <expr pos:start="715:5" pos:end="715:26"><name pos:start="715:5" pos:end="715:26">TCG_TARGET_HAS_not_i32</name></expr></cpp:if>

        <case pos:start="717:9" pos:end="717:30">case <expr pos:start="717:14" pos:end="717:29"><name pos:start="717:14" pos:end="717:29">INDEX_op_not_i32</name></expr>:</case>

            <expr_stmt pos:start="719:13" pos:end="719:27"><expr pos:start="719:13" pos:end="719:26"><name pos:start="719:13" pos:end="719:14">t0</name> <operator pos:start="719:16" pos:end="719:16">=</operator> <operator pos:start="719:18" pos:end="719:18">*</operator><name pos:start="719:19" pos:end="719:24">tb_ptr</name><operator pos:start="719:25" pos:end="719:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:39"><expr pos:start="721:13" pos:end="721:38"><name pos:start="721:13" pos:end="721:14">t1</name> <operator pos:start="721:16" pos:end="721:16">=</operator> <call pos:start="721:18" pos:end="721:38"><name pos:start="721:18" pos:end="721:29">tci_read_r32</name><argument_list pos:start="721:30" pos:end="721:38">(<argument pos:start="721:31" pos:end="721:37"><expr pos:start="721:31" pos:end="721:37"><operator pos:start="721:31" pos:end="721:31">&amp;</operator><name pos:start="721:32" pos:end="721:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:37"><expr pos:start="723:13" pos:end="723:36"><call pos:start="723:13" pos:end="723:36"><name pos:start="723:13" pos:end="723:27">tci_write_reg32</name><argument_list pos:start="723:28" pos:end="723:36">(<argument pos:start="723:29" pos:end="723:30"><expr pos:start="723:29" pos:end="723:30"><name pos:start="723:29" pos:end="723:30">t0</name></expr></argument>, <argument pos:start="723:33" pos:end="723:35"><expr pos:start="723:33" pos:end="723:35"><operator pos:start="723:33" pos:end="723:33">~</operator><name pos:start="723:34" pos:end="723:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="725:13" pos:end="730:0">break;</break>

<cpp:endif pos:start="727:1" pos:end="727:6">#<cpp:directive pos:start="727:2" pos:end="727:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="729:1" pos:end="729:26">#<cpp:directive pos:start="729:2" pos:end="729:3">if</cpp:directive> <expr pos:start="729:5" pos:end="729:26"><name pos:start="729:5" pos:end="729:26">TCG_TARGET_HAS_neg_i32</name></expr></cpp:if>

        <case pos:start="731:9" pos:end="731:30">case <expr pos:start="731:14" pos:end="731:29"><name pos:start="731:14" pos:end="731:29">INDEX_op_neg_i32</name></expr>:</case>

            <expr_stmt pos:start="733:13" pos:end="733:27"><expr pos:start="733:13" pos:end="733:26"><name pos:start="733:13" pos:end="733:14">t0</name> <operator pos:start="733:16" pos:end="733:16">=</operator> <operator pos:start="733:18" pos:end="733:18">*</operator><name pos:start="733:19" pos:end="733:24">tb_ptr</name><operator pos:start="733:25" pos:end="733:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:39"><expr pos:start="735:13" pos:end="735:38"><name pos:start="735:13" pos:end="735:14">t1</name> <operator pos:start="735:16" pos:end="735:16">=</operator> <call pos:start="735:18" pos:end="735:38"><name pos:start="735:18" pos:end="735:29">tci_read_r32</name><argument_list pos:start="735:30" pos:end="735:38">(<argument pos:start="735:31" pos:end="735:37"><expr pos:start="735:31" pos:end="735:37"><operator pos:start="735:31" pos:end="735:31">&amp;</operator><name pos:start="735:32" pos:end="735:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:37"><expr pos:start="737:13" pos:end="737:36"><call pos:start="737:13" pos:end="737:36"><name pos:start="737:13" pos:end="737:27">tci_write_reg32</name><argument_list pos:start="737:28" pos:end="737:36">(<argument pos:start="737:29" pos:end="737:30"><expr pos:start="737:29" pos:end="737:30"><name pos:start="737:29" pos:end="737:30">t0</name></expr></argument>, <argument pos:start="737:33" pos:end="737:35"><expr pos:start="737:33" pos:end="737:35"><operator pos:start="737:33" pos:end="737:33">-</operator><name pos:start="737:34" pos:end="737:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="739:13" pos:end="744:0">break;</break>

<cpp:endif pos:start="741:1" pos:end="741:6">#<cpp:directive pos:start="741:2" pos:end="741:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="743:1" pos:end="743:29">#<cpp:directive pos:start="743:2" pos:end="743:3">if</cpp:directive> <expr pos:start="743:5" pos:end="743:29"><name pos:start="743:5" pos:end="743:23">TCG_TARGET_REG_BITS</name> <operator pos:start="743:25" pos:end="743:26">==</operator> <literal type="number" pos:start="743:28" pos:end="743:29">64</literal></expr></cpp:if>

        <case pos:start="745:9" pos:end="745:30">case <expr pos:start="745:14" pos:end="745:29"><name pos:start="745:14" pos:end="745:29">INDEX_op_mov_i64</name></expr>:</case>

            <expr_stmt pos:start="747:13" pos:end="747:27"><expr pos:start="747:13" pos:end="747:26"><name pos:start="747:13" pos:end="747:14">t0</name> <operator pos:start="747:16" pos:end="747:16">=</operator> <operator pos:start="747:18" pos:end="747:18">*</operator><name pos:start="747:19" pos:end="747:24">tb_ptr</name><operator pos:start="747:25" pos:end="747:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="749:13" pos:end="749:39"><expr pos:start="749:13" pos:end="749:38"><name pos:start="749:13" pos:end="749:14">t1</name> <operator pos:start="749:16" pos:end="749:16">=</operator> <call pos:start="749:18" pos:end="749:38"><name pos:start="749:18" pos:end="749:29">tci_read_r64</name><argument_list pos:start="749:30" pos:end="749:38">(<argument pos:start="749:31" pos:end="749:37"><expr pos:start="749:31" pos:end="749:37"><operator pos:start="749:31" pos:end="749:31">&amp;</operator><name pos:start="749:32" pos:end="749:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="751:13" pos:end="751:36"><expr pos:start="751:13" pos:end="751:35"><call pos:start="751:13" pos:end="751:35"><name pos:start="751:13" pos:end="751:27">tci_write_reg64</name><argument_list pos:start="751:28" pos:end="751:35">(<argument pos:start="751:29" pos:end="751:30"><expr pos:start="751:29" pos:end="751:30"><name pos:start="751:29" pos:end="751:30">t0</name></expr></argument>, <argument pos:start="751:33" pos:end="751:34"><expr pos:start="751:33" pos:end="751:34"><name pos:start="751:33" pos:end="751:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="753:13" pos:end="753:18">break;</break>

        <case pos:start="755:9" pos:end="755:31">case <expr pos:start="755:14" pos:end="755:30"><name pos:start="755:14" pos:end="755:30">INDEX_op_movi_i64</name></expr>:</case>

            <expr_stmt pos:start="757:13" pos:end="757:27"><expr pos:start="757:13" pos:end="757:26"><name pos:start="757:13" pos:end="757:14">t0</name> <operator pos:start="757:16" pos:end="757:16">=</operator> <operator pos:start="757:18" pos:end="757:18">*</operator><name pos:start="757:19" pos:end="757:24">tb_ptr</name><operator pos:start="757:25" pos:end="757:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:39"><expr pos:start="759:13" pos:end="759:38"><name pos:start="759:13" pos:end="759:14">t1</name> <operator pos:start="759:16" pos:end="759:16">=</operator> <call pos:start="759:18" pos:end="759:38"><name pos:start="759:18" pos:end="759:29">tci_read_i64</name><argument_list pos:start="759:30" pos:end="759:38">(<argument pos:start="759:31" pos:end="759:37"><expr pos:start="759:31" pos:end="759:37"><operator pos:start="759:31" pos:end="759:31">&amp;</operator><name pos:start="759:32" pos:end="759:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="761:13" pos:end="761:36"><expr pos:start="761:13" pos:end="761:35"><call pos:start="761:13" pos:end="761:35"><name pos:start="761:13" pos:end="761:27">tci_write_reg64</name><argument_list pos:start="761:28" pos:end="761:35">(<argument pos:start="761:29" pos:end="761:30"><expr pos:start="761:29" pos:end="761:30"><name pos:start="761:29" pos:end="761:30">t0</name></expr></argument>, <argument pos:start="761:33" pos:end="761:34"><expr pos:start="761:33" pos:end="761:34"><name pos:start="761:33" pos:end="761:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="763:13" pos:end="763:18">break;</break>



            <comment type="block" pos:start="767:13" pos:end="767:49">/* Load/store operations (64 bit). */</comment>



        <case pos:start="771:9" pos:end="771:31">case <expr pos:start="771:14" pos:end="771:30"><name pos:start="771:14" pos:end="771:30">INDEX_op_ld8u_i64</name></expr>:</case>

            <expr_stmt pos:start="773:13" pos:end="773:27"><expr pos:start="773:13" pos:end="773:26"><name pos:start="773:13" pos:end="773:14">t0</name> <operator pos:start="773:16" pos:end="773:16">=</operator> <operator pos:start="773:18" pos:end="773:18">*</operator><name pos:start="773:19" pos:end="773:24">tb_ptr</name><operator pos:start="773:25" pos:end="773:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:37"><expr pos:start="775:13" pos:end="775:36"><name pos:start="775:13" pos:end="775:14">t1</name> <operator pos:start="775:16" pos:end="775:16">=</operator> <call pos:start="775:18" pos:end="775:36"><name pos:start="775:18" pos:end="775:27">tci_read_r</name><argument_list pos:start="775:28" pos:end="775:36">(<argument pos:start="775:29" pos:end="775:35"><expr pos:start="775:29" pos:end="775:35"><operator pos:start="775:29" pos:end="775:29">&amp;</operator><name pos:start="775:30" pos:end="775:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="777:13" pos:end="777:39"><expr pos:start="777:13" pos:end="777:38"><name pos:start="777:13" pos:end="777:14">t2</name> <operator pos:start="777:16" pos:end="777:16">=</operator> <call pos:start="777:18" pos:end="777:38"><name pos:start="777:18" pos:end="777:29">tci_read_i32</name><argument_list pos:start="777:30" pos:end="777:38">(<argument pos:start="777:31" pos:end="777:37"><expr pos:start="777:31" pos:end="777:37"><operator pos:start="777:31" pos:end="777:31">&amp;</operator><name pos:start="777:32" pos:end="777:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="779:13" pos:end="779:54"><expr pos:start="779:13" pos:end="779:53"><call pos:start="779:13" pos:end="779:53"><name pos:start="779:13" pos:end="779:26">tci_write_reg8</name><argument_list pos:start="779:27" pos:end="779:53">(<argument pos:start="779:28" pos:end="779:29"><expr pos:start="779:28" pos:end="779:29"><name pos:start="779:28" pos:end="779:29">t0</name></expr></argument>, <argument pos:start="779:32" pos:end="779:52"><expr pos:start="779:32" pos:end="779:52"><operator pos:start="779:32" pos:end="779:32">*</operator><operator pos:start="779:33" pos:end="779:33">(</operator><name pos:start="779:34" pos:end="779:40">uint8_t</name> <operator pos:start="779:42" pos:end="779:42">*</operator><operator pos:start="779:43" pos:end="779:43">)</operator><operator pos:start="779:44" pos:end="779:44">(</operator><name pos:start="779:45" pos:end="779:46">t1</name> <operator pos:start="779:48" pos:end="779:48">+</operator> <name pos:start="779:50" pos:end="779:51">t2</name><operator pos:start="779:52" pos:end="779:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="781:13" pos:end="781:18">break;</break>

        <case pos:start="783:9" pos:end="783:31">case <expr pos:start="783:14" pos:end="783:30"><name pos:start="783:14" pos:end="783:30">INDEX_op_ld8s_i64</name></expr>:</case>

        <case pos:start="785:9" pos:end="785:32">case <expr pos:start="785:14" pos:end="785:31"><name pos:start="785:14" pos:end="785:31">INDEX_op_ld16u_i64</name></expr>:</case>

        <case pos:start="787:9" pos:end="787:32">case <expr pos:start="787:14" pos:end="787:31"><name pos:start="787:14" pos:end="787:31">INDEX_op_ld16s_i64</name></expr>:</case>

            <expr_stmt pos:start="789:13" pos:end="789:19"><expr pos:start="789:13" pos:end="789:18"><call pos:start="789:13" pos:end="789:18"><name pos:start="789:13" pos:end="789:16">TODO</name><argument_list pos:start="789:17" pos:end="789:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="791:13" pos:end="791:18">break;</break>

        <case pos:start="793:9" pos:end="793:32">case <expr pos:start="793:14" pos:end="793:31"><name pos:start="793:14" pos:end="793:31">INDEX_op_ld32u_i64</name></expr>:</case>

            <expr_stmt pos:start="795:13" pos:end="795:27"><expr pos:start="795:13" pos:end="795:26"><name pos:start="795:13" pos:end="795:14">t0</name> <operator pos:start="795:16" pos:end="795:16">=</operator> <operator pos:start="795:18" pos:end="795:18">*</operator><name pos:start="795:19" pos:end="795:24">tb_ptr</name><operator pos:start="795:25" pos:end="795:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="797:13" pos:end="797:37"><expr pos:start="797:13" pos:end="797:36"><name pos:start="797:13" pos:end="797:14">t1</name> <operator pos:start="797:16" pos:end="797:16">=</operator> <call pos:start="797:18" pos:end="797:36"><name pos:start="797:18" pos:end="797:27">tci_read_r</name><argument_list pos:start="797:28" pos:end="797:36">(<argument pos:start="797:29" pos:end="797:35"><expr pos:start="797:29" pos:end="797:35"><operator pos:start="797:29" pos:end="797:29">&amp;</operator><name pos:start="797:30" pos:end="797:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="799:13" pos:end="799:39"><expr pos:start="799:13" pos:end="799:38"><name pos:start="799:13" pos:end="799:14">t2</name> <operator pos:start="799:16" pos:end="799:16">=</operator> <call pos:start="799:18" pos:end="799:38"><name pos:start="799:18" pos:end="799:29">tci_read_i32</name><argument_list pos:start="799:30" pos:end="799:38">(<argument pos:start="799:31" pos:end="799:37"><expr pos:start="799:31" pos:end="799:37"><operator pos:start="799:31" pos:end="799:31">&amp;</operator><name pos:start="799:32" pos:end="799:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="801:13" pos:end="801:56"><expr pos:start="801:13" pos:end="801:55"><call pos:start="801:13" pos:end="801:55"><name pos:start="801:13" pos:end="801:27">tci_write_reg32</name><argument_list pos:start="801:28" pos:end="801:55">(<argument pos:start="801:29" pos:end="801:30"><expr pos:start="801:29" pos:end="801:30"><name pos:start="801:29" pos:end="801:30">t0</name></expr></argument>, <argument pos:start="801:33" pos:end="801:54"><expr pos:start="801:33" pos:end="801:54"><operator pos:start="801:33" pos:end="801:33">*</operator><operator pos:start="801:34" pos:end="801:34">(</operator><name pos:start="801:35" pos:end="801:42">uint32_t</name> <operator pos:start="801:44" pos:end="801:44">*</operator><operator pos:start="801:45" pos:end="801:45">)</operator><operator pos:start="801:46" pos:end="801:46">(</operator><name pos:start="801:47" pos:end="801:48">t1</name> <operator pos:start="801:50" pos:end="801:50">+</operator> <name pos:start="801:52" pos:end="801:53">t2</name><operator pos:start="801:54" pos:end="801:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="803:13" pos:end="803:18">break;</break>

        <case pos:start="805:9" pos:end="805:32">case <expr pos:start="805:14" pos:end="805:31"><name pos:start="805:14" pos:end="805:31">INDEX_op_ld32s_i64</name></expr>:</case>

            <expr_stmt pos:start="807:13" pos:end="807:27"><expr pos:start="807:13" pos:end="807:26"><name pos:start="807:13" pos:end="807:14">t0</name> <operator pos:start="807:16" pos:end="807:16">=</operator> <operator pos:start="807:18" pos:end="807:18">*</operator><name pos:start="807:19" pos:end="807:24">tb_ptr</name><operator pos:start="807:25" pos:end="807:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="809:13" pos:end="809:37"><expr pos:start="809:13" pos:end="809:36"><name pos:start="809:13" pos:end="809:14">t1</name> <operator pos:start="809:16" pos:end="809:16">=</operator> <call pos:start="809:18" pos:end="809:36"><name pos:start="809:18" pos:end="809:27">tci_read_r</name><argument_list pos:start="809:28" pos:end="809:36">(<argument pos:start="809:29" pos:end="809:35"><expr pos:start="809:29" pos:end="809:35"><operator pos:start="809:29" pos:end="809:29">&amp;</operator><name pos:start="809:30" pos:end="809:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="811:39"><expr pos:start="811:13" pos:end="811:38"><name pos:start="811:13" pos:end="811:14">t2</name> <operator pos:start="811:16" pos:end="811:16">=</operator> <call pos:start="811:18" pos:end="811:38"><name pos:start="811:18" pos:end="811:29">tci_read_i32</name><argument_list pos:start="811:30" pos:end="811:38">(<argument pos:start="811:31" pos:end="811:37"><expr pos:start="811:31" pos:end="811:37"><operator pos:start="811:31" pos:end="811:31">&amp;</operator><name pos:start="811:32" pos:end="811:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="813:13" pos:end="813:56"><expr pos:start="813:13" pos:end="813:55"><call pos:start="813:13" pos:end="813:55"><name pos:start="813:13" pos:end="813:28">tci_write_reg32s</name><argument_list pos:start="813:29" pos:end="813:55">(<argument pos:start="813:30" pos:end="813:31"><expr pos:start="813:30" pos:end="813:31"><name pos:start="813:30" pos:end="813:31">t0</name></expr></argument>, <argument pos:start="813:34" pos:end="813:54"><expr pos:start="813:34" pos:end="813:54"><operator pos:start="813:34" pos:end="813:34">*</operator><operator pos:start="813:35" pos:end="813:35">(</operator><name pos:start="813:36" pos:end="813:42">int32_t</name> <operator pos:start="813:44" pos:end="813:44">*</operator><operator pos:start="813:45" pos:end="813:45">)</operator><operator pos:start="813:46" pos:end="813:46">(</operator><name pos:start="813:47" pos:end="813:48">t1</name> <operator pos:start="813:50" pos:end="813:50">+</operator> <name pos:start="813:52" pos:end="813:53">t2</name><operator pos:start="813:54" pos:end="813:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="815:13" pos:end="815:18">break;</break>

        <case pos:start="817:9" pos:end="817:29">case <expr pos:start="817:14" pos:end="817:28"><name pos:start="817:14" pos:end="817:28">INDEX_op_ld_i64</name></expr>:</case>

            <expr_stmt pos:start="819:13" pos:end="819:27"><expr pos:start="819:13" pos:end="819:26"><name pos:start="819:13" pos:end="819:14">t0</name> <operator pos:start="819:16" pos:end="819:16">=</operator> <operator pos:start="819:18" pos:end="819:18">*</operator><name pos:start="819:19" pos:end="819:24">tb_ptr</name><operator pos:start="819:25" pos:end="819:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="821:13" pos:end="821:37"><expr pos:start="821:13" pos:end="821:36"><name pos:start="821:13" pos:end="821:14">t1</name> <operator pos:start="821:16" pos:end="821:16">=</operator> <call pos:start="821:18" pos:end="821:36"><name pos:start="821:18" pos:end="821:27">tci_read_r</name><argument_list pos:start="821:28" pos:end="821:36">(<argument pos:start="821:29" pos:end="821:35"><expr pos:start="821:29" pos:end="821:35"><operator pos:start="821:29" pos:end="821:29">&amp;</operator><name pos:start="821:30" pos:end="821:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="823:13" pos:end="823:39"><expr pos:start="823:13" pos:end="823:38"><name pos:start="823:13" pos:end="823:14">t2</name> <operator pos:start="823:16" pos:end="823:16">=</operator> <call pos:start="823:18" pos:end="823:38"><name pos:start="823:18" pos:end="823:29">tci_read_i32</name><argument_list pos:start="823:30" pos:end="823:38">(<argument pos:start="823:31" pos:end="823:37"><expr pos:start="823:31" pos:end="823:37"><operator pos:start="823:31" pos:end="823:31">&amp;</operator><name pos:start="823:32" pos:end="823:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="825:13" pos:end="825:56"><expr pos:start="825:13" pos:end="825:55"><call pos:start="825:13" pos:end="825:55"><name pos:start="825:13" pos:end="825:27">tci_write_reg64</name><argument_list pos:start="825:28" pos:end="825:55">(<argument pos:start="825:29" pos:end="825:30"><expr pos:start="825:29" pos:end="825:30"><name pos:start="825:29" pos:end="825:30">t0</name></expr></argument>, <argument pos:start="825:33" pos:end="825:54"><expr pos:start="825:33" pos:end="825:54"><operator pos:start="825:33" pos:end="825:33">*</operator><operator pos:start="825:34" pos:end="825:34">(</operator><name pos:start="825:35" pos:end="825:42">uint64_t</name> <operator pos:start="825:44" pos:end="825:44">*</operator><operator pos:start="825:45" pos:end="825:45">)</operator><operator pos:start="825:46" pos:end="825:46">(</operator><name pos:start="825:47" pos:end="825:48">t1</name> <operator pos:start="825:50" pos:end="825:50">+</operator> <name pos:start="825:52" pos:end="825:53">t2</name><operator pos:start="825:54" pos:end="825:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="827:13" pos:end="827:18">break;</break>

        <case pos:start="829:9" pos:end="829:30">case <expr pos:start="829:14" pos:end="829:29"><name pos:start="829:14" pos:end="829:29">INDEX_op_st8_i64</name></expr>:</case>

            <expr_stmt pos:start="831:13" pos:end="831:38"><expr pos:start="831:13" pos:end="831:37"><name pos:start="831:13" pos:end="831:14">t0</name> <operator pos:start="831:16" pos:end="831:16">=</operator> <call pos:start="831:18" pos:end="831:37"><name pos:start="831:18" pos:end="831:28">tci_read_r8</name><argument_list pos:start="831:29" pos:end="831:37">(<argument pos:start="831:30" pos:end="831:36"><expr pos:start="831:30" pos:end="831:36"><operator pos:start="831:30" pos:end="831:30">&amp;</operator><name pos:start="831:31" pos:end="831:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="833:13" pos:end="833:37"><expr pos:start="833:13" pos:end="833:36"><name pos:start="833:13" pos:end="833:14">t1</name> <operator pos:start="833:16" pos:end="833:16">=</operator> <call pos:start="833:18" pos:end="833:36"><name pos:start="833:18" pos:end="833:27">tci_read_r</name><argument_list pos:start="833:28" pos:end="833:36">(<argument pos:start="833:29" pos:end="833:35"><expr pos:start="833:29" pos:end="833:35"><operator pos:start="833:29" pos:end="833:29">&amp;</operator><name pos:start="833:30" pos:end="833:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="835:13" pos:end="835:39"><expr pos:start="835:13" pos:end="835:38"><name pos:start="835:13" pos:end="835:14">t2</name> <operator pos:start="835:16" pos:end="835:16">=</operator> <call pos:start="835:18" pos:end="835:38"><name pos:start="835:18" pos:end="835:29">tci_read_i32</name><argument_list pos:start="835:30" pos:end="835:38">(<argument pos:start="835:31" pos:end="835:37"><expr pos:start="835:31" pos:end="835:37"><operator pos:start="835:31" pos:end="835:31">&amp;</operator><name pos:start="835:32" pos:end="835:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="837:13" pos:end="837:39"><expr pos:start="837:13" pos:end="837:38"><operator pos:start="837:13" pos:end="837:13">*</operator><operator pos:start="837:14" pos:end="837:14">(</operator><name pos:start="837:15" pos:end="837:21">uint8_t</name> <operator pos:start="837:23" pos:end="837:23">*</operator><operator pos:start="837:24" pos:end="837:24">)</operator><operator pos:start="837:25" pos:end="837:25">(</operator><name pos:start="837:26" pos:end="837:27">t1</name> <operator pos:start="837:29" pos:end="837:29">+</operator> <name pos:start="837:31" pos:end="837:32">t2</name><operator pos:start="837:33" pos:end="837:33">)</operator> <operator pos:start="837:35" pos:end="837:35">=</operator> <name pos:start="837:37" pos:end="837:38">t0</name></expr>;</expr_stmt>

            <break pos:start="839:13" pos:end="839:18">break;</break>

        <case pos:start="841:9" pos:end="841:31">case <expr pos:start="841:14" pos:end="841:30"><name pos:start="841:14" pos:end="841:30">INDEX_op_st16_i64</name></expr>:</case>

            <expr_stmt pos:start="843:13" pos:end="843:39"><expr pos:start="843:13" pos:end="843:38"><name pos:start="843:13" pos:end="843:14">t0</name> <operator pos:start="843:16" pos:end="843:16">=</operator> <call pos:start="843:18" pos:end="843:38"><name pos:start="843:18" pos:end="843:29">tci_read_r16</name><argument_list pos:start="843:30" pos:end="843:38">(<argument pos:start="843:31" pos:end="843:37"><expr pos:start="843:31" pos:end="843:37"><operator pos:start="843:31" pos:end="843:31">&amp;</operator><name pos:start="843:32" pos:end="843:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="845:13" pos:end="845:37"><expr pos:start="845:13" pos:end="845:36"><name pos:start="845:13" pos:end="845:14">t1</name> <operator pos:start="845:16" pos:end="845:16">=</operator> <call pos:start="845:18" pos:end="845:36"><name pos:start="845:18" pos:end="845:27">tci_read_r</name><argument_list pos:start="845:28" pos:end="845:36">(<argument pos:start="845:29" pos:end="845:35"><expr pos:start="845:29" pos:end="845:35"><operator pos:start="845:29" pos:end="845:29">&amp;</operator><name pos:start="845:30" pos:end="845:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="847:13" pos:end="847:39"><expr pos:start="847:13" pos:end="847:38"><name pos:start="847:13" pos:end="847:14">t2</name> <operator pos:start="847:16" pos:end="847:16">=</operator> <call pos:start="847:18" pos:end="847:38"><name pos:start="847:18" pos:end="847:29">tci_read_i32</name><argument_list pos:start="847:30" pos:end="847:38">(<argument pos:start="847:31" pos:end="847:37"><expr pos:start="847:31" pos:end="847:37"><operator pos:start="847:31" pos:end="847:31">&amp;</operator><name pos:start="847:32" pos:end="847:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="849:13" pos:end="849:40"><expr pos:start="849:13" pos:end="849:39"><operator pos:start="849:13" pos:end="849:13">*</operator><operator pos:start="849:14" pos:end="849:14">(</operator><name pos:start="849:15" pos:end="849:22">uint16_t</name> <operator pos:start="849:24" pos:end="849:24">*</operator><operator pos:start="849:25" pos:end="849:25">)</operator><operator pos:start="849:26" pos:end="849:26">(</operator><name pos:start="849:27" pos:end="849:28">t1</name> <operator pos:start="849:30" pos:end="849:30">+</operator> <name pos:start="849:32" pos:end="849:33">t2</name><operator pos:start="849:34" pos:end="849:34">)</operator> <operator pos:start="849:36" pos:end="849:36">=</operator> <name pos:start="849:38" pos:end="849:39">t0</name></expr>;</expr_stmt>

            <break pos:start="851:13" pos:end="851:18">break;</break>

        <case pos:start="853:9" pos:end="853:31">case <expr pos:start="853:14" pos:end="853:30"><name pos:start="853:14" pos:end="853:30">INDEX_op_st32_i64</name></expr>:</case>

            <expr_stmt pos:start="855:13" pos:end="855:39"><expr pos:start="855:13" pos:end="855:38"><name pos:start="855:13" pos:end="855:14">t0</name> <operator pos:start="855:16" pos:end="855:16">=</operator> <call pos:start="855:18" pos:end="855:38"><name pos:start="855:18" pos:end="855:29">tci_read_r32</name><argument_list pos:start="855:30" pos:end="855:38">(<argument pos:start="855:31" pos:end="855:37"><expr pos:start="855:31" pos:end="855:37"><operator pos:start="855:31" pos:end="855:31">&amp;</operator><name pos:start="855:32" pos:end="855:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="857:13" pos:end="857:37"><expr pos:start="857:13" pos:end="857:36"><name pos:start="857:13" pos:end="857:14">t1</name> <operator pos:start="857:16" pos:end="857:16">=</operator> <call pos:start="857:18" pos:end="857:36"><name pos:start="857:18" pos:end="857:27">tci_read_r</name><argument_list pos:start="857:28" pos:end="857:36">(<argument pos:start="857:29" pos:end="857:35"><expr pos:start="857:29" pos:end="857:35"><operator pos:start="857:29" pos:end="857:29">&amp;</operator><name pos:start="857:30" pos:end="857:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="859:13" pos:end="859:39"><expr pos:start="859:13" pos:end="859:38"><name pos:start="859:13" pos:end="859:14">t2</name> <operator pos:start="859:16" pos:end="859:16">=</operator> <call pos:start="859:18" pos:end="859:38"><name pos:start="859:18" pos:end="859:29">tci_read_i32</name><argument_list pos:start="859:30" pos:end="859:38">(<argument pos:start="859:31" pos:end="859:37"><expr pos:start="859:31" pos:end="859:37"><operator pos:start="859:31" pos:end="859:31">&amp;</operator><name pos:start="859:32" pos:end="859:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:40"><expr pos:start="861:13" pos:end="861:39"><operator pos:start="861:13" pos:end="861:13">*</operator><operator pos:start="861:14" pos:end="861:14">(</operator><name pos:start="861:15" pos:end="861:22">uint32_t</name> <operator pos:start="861:24" pos:end="861:24">*</operator><operator pos:start="861:25" pos:end="861:25">)</operator><operator pos:start="861:26" pos:end="861:26">(</operator><name pos:start="861:27" pos:end="861:28">t1</name> <operator pos:start="861:30" pos:end="861:30">+</operator> <name pos:start="861:32" pos:end="861:33">t2</name><operator pos:start="861:34" pos:end="861:34">)</operator> <operator pos:start="861:36" pos:end="861:36">=</operator> <name pos:start="861:38" pos:end="861:39">t0</name></expr>;</expr_stmt>

            <break pos:start="863:13" pos:end="863:18">break;</break>

        <case pos:start="865:9" pos:end="865:29">case <expr pos:start="865:14" pos:end="865:28"><name pos:start="865:14" pos:end="865:28">INDEX_op_st_i64</name></expr>:</case>

            <expr_stmt pos:start="867:13" pos:end="867:39"><expr pos:start="867:13" pos:end="867:38"><name pos:start="867:13" pos:end="867:14">t0</name> <operator pos:start="867:16" pos:end="867:16">=</operator> <call pos:start="867:18" pos:end="867:38"><name pos:start="867:18" pos:end="867:29">tci_read_r64</name><argument_list pos:start="867:30" pos:end="867:38">(<argument pos:start="867:31" pos:end="867:37"><expr pos:start="867:31" pos:end="867:37"><operator pos:start="867:31" pos:end="867:31">&amp;</operator><name pos:start="867:32" pos:end="867:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="869:13" pos:end="869:37"><expr pos:start="869:13" pos:end="869:36"><name pos:start="869:13" pos:end="869:14">t1</name> <operator pos:start="869:16" pos:end="869:16">=</operator> <call pos:start="869:18" pos:end="869:36"><name pos:start="869:18" pos:end="869:27">tci_read_r</name><argument_list pos:start="869:28" pos:end="869:36">(<argument pos:start="869:29" pos:end="869:35"><expr pos:start="869:29" pos:end="869:35"><operator pos:start="869:29" pos:end="869:29">&amp;</operator><name pos:start="869:30" pos:end="869:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="871:13" pos:end="871:39"><expr pos:start="871:13" pos:end="871:38"><name pos:start="871:13" pos:end="871:14">t2</name> <operator pos:start="871:16" pos:end="871:16">=</operator> <call pos:start="871:18" pos:end="871:38"><name pos:start="871:18" pos:end="871:29">tci_read_i32</name><argument_list pos:start="871:30" pos:end="871:38">(<argument pos:start="871:31" pos:end="871:37"><expr pos:start="871:31" pos:end="871:37"><operator pos:start="871:31" pos:end="871:31">&amp;</operator><name pos:start="871:32" pos:end="871:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:40"><expr pos:start="873:13" pos:end="873:39"><operator pos:start="873:13" pos:end="873:13">*</operator><operator pos:start="873:14" pos:end="873:14">(</operator><name pos:start="873:15" pos:end="873:22">uint64_t</name> <operator pos:start="873:24" pos:end="873:24">*</operator><operator pos:start="873:25" pos:end="873:25">)</operator><operator pos:start="873:26" pos:end="873:26">(</operator><name pos:start="873:27" pos:end="873:28">t1</name> <operator pos:start="873:30" pos:end="873:30">+</operator> <name pos:start="873:32" pos:end="873:33">t2</name><operator pos:start="873:34" pos:end="873:34">)</operator> <operator pos:start="873:36" pos:end="873:36">=</operator> <name pos:start="873:38" pos:end="873:39">t0</name></expr>;</expr_stmt>

            <break pos:start="875:13" pos:end="875:18">break;</break>



            <comment type="block" pos:start="879:13" pos:end="879:49">/* Arithmetic operations (64 bit). */</comment>



        <case pos:start="883:9" pos:end="883:30">case <expr pos:start="883:14" pos:end="883:29"><name pos:start="883:14" pos:end="883:29">INDEX_op_add_i64</name></expr>:</case>

            <expr_stmt pos:start="885:13" pos:end="885:27"><expr pos:start="885:13" pos:end="885:26"><name pos:start="885:13" pos:end="885:14">t0</name> <operator pos:start="885:16" pos:end="885:16">=</operator> <operator pos:start="885:18" pos:end="885:18">*</operator><name pos:start="885:19" pos:end="885:24">tb_ptr</name><operator pos:start="885:25" pos:end="885:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="887:13" pos:end="887:40"><expr pos:start="887:13" pos:end="887:39"><name pos:start="887:13" pos:end="887:14">t1</name> <operator pos:start="887:16" pos:end="887:16">=</operator> <call pos:start="887:18" pos:end="887:39"><name pos:start="887:18" pos:end="887:30">tci_read_ri64</name><argument_list pos:start="887:31" pos:end="887:39">(<argument pos:start="887:32" pos:end="887:38"><expr pos:start="887:32" pos:end="887:38"><operator pos:start="887:32" pos:end="887:32">&amp;</operator><name pos:start="887:33" pos:end="887:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:40"><expr pos:start="889:13" pos:end="889:39"><name pos:start="889:13" pos:end="889:14">t2</name> <operator pos:start="889:16" pos:end="889:16">=</operator> <call pos:start="889:18" pos:end="889:39"><name pos:start="889:18" pos:end="889:30">tci_read_ri64</name><argument_list pos:start="889:31" pos:end="889:39">(<argument pos:start="889:32" pos:end="889:38"><expr pos:start="889:32" pos:end="889:38"><operator pos:start="889:32" pos:end="889:32">&amp;</operator><name pos:start="889:33" pos:end="889:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="891:13" pos:end="891:41"><expr pos:start="891:13" pos:end="891:40"><call pos:start="891:13" pos:end="891:40"><name pos:start="891:13" pos:end="891:27">tci_write_reg64</name><argument_list pos:start="891:28" pos:end="891:40">(<argument pos:start="891:29" pos:end="891:30"><expr pos:start="891:29" pos:end="891:30"><name pos:start="891:29" pos:end="891:30">t0</name></expr></argument>, <argument pos:start="891:33" pos:end="891:39"><expr pos:start="891:33" pos:end="891:39"><name pos:start="891:33" pos:end="891:34">t1</name> <operator pos:start="891:36" pos:end="891:36">+</operator> <name pos:start="891:38" pos:end="891:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="893:13" pos:end="893:18">break;</break>

        <case pos:start="895:9" pos:end="895:30">case <expr pos:start="895:14" pos:end="895:29"><name pos:start="895:14" pos:end="895:29">INDEX_op_sub_i64</name></expr>:</case>

            <expr_stmt pos:start="897:13" pos:end="897:27"><expr pos:start="897:13" pos:end="897:26"><name pos:start="897:13" pos:end="897:14">t0</name> <operator pos:start="897:16" pos:end="897:16">=</operator> <operator pos:start="897:18" pos:end="897:18">*</operator><name pos:start="897:19" pos:end="897:24">tb_ptr</name><operator pos:start="897:25" pos:end="897:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="899:13" pos:end="899:40"><expr pos:start="899:13" pos:end="899:39"><name pos:start="899:13" pos:end="899:14">t1</name> <operator pos:start="899:16" pos:end="899:16">=</operator> <call pos:start="899:18" pos:end="899:39"><name pos:start="899:18" pos:end="899:30">tci_read_ri64</name><argument_list pos:start="899:31" pos:end="899:39">(<argument pos:start="899:32" pos:end="899:38"><expr pos:start="899:32" pos:end="899:38"><operator pos:start="899:32" pos:end="899:32">&amp;</operator><name pos:start="899:33" pos:end="899:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="901:13" pos:end="901:40"><expr pos:start="901:13" pos:end="901:39"><name pos:start="901:13" pos:end="901:14">t2</name> <operator pos:start="901:16" pos:end="901:16">=</operator> <call pos:start="901:18" pos:end="901:39"><name pos:start="901:18" pos:end="901:30">tci_read_ri64</name><argument_list pos:start="901:31" pos:end="901:39">(<argument pos:start="901:32" pos:end="901:38"><expr pos:start="901:32" pos:end="901:38"><operator pos:start="901:32" pos:end="901:32">&amp;</operator><name pos:start="901:33" pos:end="901:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="903:13" pos:end="903:41"><expr pos:start="903:13" pos:end="903:40"><call pos:start="903:13" pos:end="903:40"><name pos:start="903:13" pos:end="903:27">tci_write_reg64</name><argument_list pos:start="903:28" pos:end="903:40">(<argument pos:start="903:29" pos:end="903:30"><expr pos:start="903:29" pos:end="903:30"><name pos:start="903:29" pos:end="903:30">t0</name></expr></argument>, <argument pos:start="903:33" pos:end="903:39"><expr pos:start="903:33" pos:end="903:39"><name pos:start="903:33" pos:end="903:34">t1</name> <operator pos:start="903:36" pos:end="903:36">-</operator> <name pos:start="903:38" pos:end="903:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="905:13" pos:end="905:18">break;</break>

        <case pos:start="907:9" pos:end="907:30">case <expr pos:start="907:14" pos:end="907:29"><name pos:start="907:14" pos:end="907:29">INDEX_op_mul_i64</name></expr>:</case>

            <expr_stmt pos:start="909:13" pos:end="909:27"><expr pos:start="909:13" pos:end="909:26"><name pos:start="909:13" pos:end="909:14">t0</name> <operator pos:start="909:16" pos:end="909:16">=</operator> <operator pos:start="909:18" pos:end="909:18">*</operator><name pos:start="909:19" pos:end="909:24">tb_ptr</name><operator pos:start="909:25" pos:end="909:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="911:13" pos:end="911:40"><expr pos:start="911:13" pos:end="911:39"><name pos:start="911:13" pos:end="911:14">t1</name> <operator pos:start="911:16" pos:end="911:16">=</operator> <call pos:start="911:18" pos:end="911:39"><name pos:start="911:18" pos:end="911:30">tci_read_ri64</name><argument_list pos:start="911:31" pos:end="911:39">(<argument pos:start="911:32" pos:end="911:38"><expr pos:start="911:32" pos:end="911:38"><operator pos:start="911:32" pos:end="911:32">&amp;</operator><name pos:start="911:33" pos:end="911:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="913:13" pos:end="913:40"><expr pos:start="913:13" pos:end="913:39"><name pos:start="913:13" pos:end="913:14">t2</name> <operator pos:start="913:16" pos:end="913:16">=</operator> <call pos:start="913:18" pos:end="913:39"><name pos:start="913:18" pos:end="913:30">tci_read_ri64</name><argument_list pos:start="913:31" pos:end="913:39">(<argument pos:start="913:32" pos:end="913:38"><expr pos:start="913:32" pos:end="913:38"><operator pos:start="913:32" pos:end="913:32">&amp;</operator><name pos:start="913:33" pos:end="913:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="915:13" pos:end="915:41"><expr pos:start="915:13" pos:end="915:40"><call pos:start="915:13" pos:end="915:40"><name pos:start="915:13" pos:end="915:27">tci_write_reg64</name><argument_list pos:start="915:28" pos:end="915:40">(<argument pos:start="915:29" pos:end="915:30"><expr pos:start="915:29" pos:end="915:30"><name pos:start="915:29" pos:end="915:30">t0</name></expr></argument>, <argument pos:start="915:33" pos:end="915:39"><expr pos:start="915:33" pos:end="915:39"><name pos:start="915:33" pos:end="915:34">t1</name> <operator pos:start="915:36" pos:end="915:36">*</operator> <name pos:start="915:38" pos:end="915:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="917:13" pos:end="920:0">break;</break>

<cpp:if pos:start="919:1" pos:end="919:26">#<cpp:directive pos:start="919:2" pos:end="919:3">if</cpp:directive> <expr pos:start="919:5" pos:end="919:26"><name pos:start="919:5" pos:end="919:26">TCG_TARGET_HAS_div_i64</name></expr></cpp:if>

        <case pos:start="921:9" pos:end="921:30">case <expr pos:start="921:14" pos:end="921:29"><name pos:start="921:14" pos:end="921:29">INDEX_op_div_i64</name></expr>:</case>

        <case pos:start="923:9" pos:end="923:31">case <expr pos:start="923:14" pos:end="923:30"><name pos:start="923:14" pos:end="923:30">INDEX_op_divu_i64</name></expr>:</case>

        <case pos:start="925:9" pos:end="925:30">case <expr pos:start="925:14" pos:end="925:29"><name pos:start="925:14" pos:end="925:29">INDEX_op_rem_i64</name></expr>:</case>

        <case pos:start="927:9" pos:end="927:31">case <expr pos:start="927:14" pos:end="927:30"><name pos:start="927:14" pos:end="927:30">INDEX_op_remu_i64</name></expr>:</case>

            <expr_stmt pos:start="929:13" pos:end="929:19"><expr pos:start="929:13" pos:end="929:18"><call pos:start="929:13" pos:end="929:18"><name pos:start="929:13" pos:end="929:16">TODO</name><argument_list pos:start="929:17" pos:end="929:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="931:13" pos:end="934:0">break;</break>

<cpp:elif pos:start="933:1" pos:end="933:29">#<cpp:directive pos:start="933:2" pos:end="933:5">elif</cpp:directive> <expr pos:start="933:7" pos:end="933:29"><name pos:start="933:7" pos:end="933:29">TCG_TARGET_HAS_div2_i64</name></expr></cpp:elif>

        <case pos:start="935:9" pos:end="935:31">case <expr pos:start="935:14" pos:end="935:30"><name pos:start="935:14" pos:end="935:30">INDEX_op_div2_i64</name></expr>:</case>

        <case pos:start="937:9" pos:end="937:32">case <expr pos:start="937:14" pos:end="937:31"><name pos:start="937:14" pos:end="937:31">INDEX_op_divu2_i64</name></expr>:</case>

            <expr_stmt pos:start="939:13" pos:end="939:19"><expr pos:start="939:13" pos:end="939:18"><call pos:start="939:13" pos:end="939:18"><name pos:start="939:13" pos:end="939:16">TODO</name><argument_list pos:start="939:17" pos:end="939:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="941:13" pos:end="944:0">break;</break>

<cpp:endif pos:start="943:1" pos:end="943:6">#<cpp:directive pos:start="943:2" pos:end="943:6">endif</cpp:directive></cpp:endif>

        <case pos:start="945:9" pos:end="945:30">case <expr pos:start="945:14" pos:end="945:29"><name pos:start="945:14" pos:end="945:29">INDEX_op_and_i64</name></expr>:</case>

            <expr_stmt pos:start="947:13" pos:end="947:27"><expr pos:start="947:13" pos:end="947:26"><name pos:start="947:13" pos:end="947:14">t0</name> <operator pos:start="947:16" pos:end="947:16">=</operator> <operator pos:start="947:18" pos:end="947:18">*</operator><name pos:start="947:19" pos:end="947:24">tb_ptr</name><operator pos:start="947:25" pos:end="947:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="949:13" pos:end="949:40"><expr pos:start="949:13" pos:end="949:39"><name pos:start="949:13" pos:end="949:14">t1</name> <operator pos:start="949:16" pos:end="949:16">=</operator> <call pos:start="949:18" pos:end="949:39"><name pos:start="949:18" pos:end="949:30">tci_read_ri64</name><argument_list pos:start="949:31" pos:end="949:39">(<argument pos:start="949:32" pos:end="949:38"><expr pos:start="949:32" pos:end="949:38"><operator pos:start="949:32" pos:end="949:32">&amp;</operator><name pos:start="949:33" pos:end="949:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="951:13" pos:end="951:40"><expr pos:start="951:13" pos:end="951:39"><name pos:start="951:13" pos:end="951:14">t2</name> <operator pos:start="951:16" pos:end="951:16">=</operator> <call pos:start="951:18" pos:end="951:39"><name pos:start="951:18" pos:end="951:30">tci_read_ri64</name><argument_list pos:start="951:31" pos:end="951:39">(<argument pos:start="951:32" pos:end="951:38"><expr pos:start="951:32" pos:end="951:38"><operator pos:start="951:32" pos:end="951:32">&amp;</operator><name pos:start="951:33" pos:end="951:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="953:13" pos:end="953:41"><expr pos:start="953:13" pos:end="953:40"><call pos:start="953:13" pos:end="953:40"><name pos:start="953:13" pos:end="953:27">tci_write_reg64</name><argument_list pos:start="953:28" pos:end="953:40">(<argument pos:start="953:29" pos:end="953:30"><expr pos:start="953:29" pos:end="953:30"><name pos:start="953:29" pos:end="953:30">t0</name></expr></argument>, <argument pos:start="953:33" pos:end="953:39"><expr pos:start="953:33" pos:end="953:39"><name pos:start="953:33" pos:end="953:34">t1</name> <operator pos:start="953:36" pos:end="953:36">&amp;</operator> <name pos:start="953:38" pos:end="953:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="955:13" pos:end="955:18">break;</break>

        <case pos:start="957:9" pos:end="957:29">case <expr pos:start="957:14" pos:end="957:28"><name pos:start="957:14" pos:end="957:28">INDEX_op_or_i64</name></expr>:</case>

            <expr_stmt pos:start="959:13" pos:end="959:27"><expr pos:start="959:13" pos:end="959:26"><name pos:start="959:13" pos:end="959:14">t0</name> <operator pos:start="959:16" pos:end="959:16">=</operator> <operator pos:start="959:18" pos:end="959:18">*</operator><name pos:start="959:19" pos:end="959:24">tb_ptr</name><operator pos:start="959:25" pos:end="959:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="961:13" pos:end="961:40"><expr pos:start="961:13" pos:end="961:39"><name pos:start="961:13" pos:end="961:14">t1</name> <operator pos:start="961:16" pos:end="961:16">=</operator> <call pos:start="961:18" pos:end="961:39"><name pos:start="961:18" pos:end="961:30">tci_read_ri64</name><argument_list pos:start="961:31" pos:end="961:39">(<argument pos:start="961:32" pos:end="961:38"><expr pos:start="961:32" pos:end="961:38"><operator pos:start="961:32" pos:end="961:32">&amp;</operator><name pos:start="961:33" pos:end="961:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="963:13" pos:end="963:40"><expr pos:start="963:13" pos:end="963:39"><name pos:start="963:13" pos:end="963:14">t2</name> <operator pos:start="963:16" pos:end="963:16">=</operator> <call pos:start="963:18" pos:end="963:39"><name pos:start="963:18" pos:end="963:30">tci_read_ri64</name><argument_list pos:start="963:31" pos:end="963:39">(<argument pos:start="963:32" pos:end="963:38"><expr pos:start="963:32" pos:end="963:38"><operator pos:start="963:32" pos:end="963:32">&amp;</operator><name pos:start="963:33" pos:end="963:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="965:13" pos:end="965:41"><expr pos:start="965:13" pos:end="965:40"><call pos:start="965:13" pos:end="965:40"><name pos:start="965:13" pos:end="965:27">tci_write_reg64</name><argument_list pos:start="965:28" pos:end="965:40">(<argument pos:start="965:29" pos:end="965:30"><expr pos:start="965:29" pos:end="965:30"><name pos:start="965:29" pos:end="965:30">t0</name></expr></argument>, <argument pos:start="965:33" pos:end="965:39"><expr pos:start="965:33" pos:end="965:39"><name pos:start="965:33" pos:end="965:34">t1</name> <operator pos:start="965:36" pos:end="965:36">|</operator> <name pos:start="965:38" pos:end="965:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="967:13" pos:end="967:18">break;</break>

        <case pos:start="969:9" pos:end="969:30">case <expr pos:start="969:14" pos:end="969:29"><name pos:start="969:14" pos:end="969:29">INDEX_op_xor_i64</name></expr>:</case>

            <expr_stmt pos:start="971:13" pos:end="971:27"><expr pos:start="971:13" pos:end="971:26"><name pos:start="971:13" pos:end="971:14">t0</name> <operator pos:start="971:16" pos:end="971:16">=</operator> <operator pos:start="971:18" pos:end="971:18">*</operator><name pos:start="971:19" pos:end="971:24">tb_ptr</name><operator pos:start="971:25" pos:end="971:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="973:13" pos:end="973:40"><expr pos:start="973:13" pos:end="973:39"><name pos:start="973:13" pos:end="973:14">t1</name> <operator pos:start="973:16" pos:end="973:16">=</operator> <call pos:start="973:18" pos:end="973:39"><name pos:start="973:18" pos:end="973:30">tci_read_ri64</name><argument_list pos:start="973:31" pos:end="973:39">(<argument pos:start="973:32" pos:end="973:38"><expr pos:start="973:32" pos:end="973:38"><operator pos:start="973:32" pos:end="973:32">&amp;</operator><name pos:start="973:33" pos:end="973:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:40"><expr pos:start="975:13" pos:end="975:39"><name pos:start="975:13" pos:end="975:14">t2</name> <operator pos:start="975:16" pos:end="975:16">=</operator> <call pos:start="975:18" pos:end="975:39"><name pos:start="975:18" pos:end="975:30">tci_read_ri64</name><argument_list pos:start="975:31" pos:end="975:39">(<argument pos:start="975:32" pos:end="975:38"><expr pos:start="975:32" pos:end="975:38"><operator pos:start="975:32" pos:end="975:32">&amp;</operator><name pos:start="975:33" pos:end="975:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="977:13" pos:end="977:41"><expr pos:start="977:13" pos:end="977:40"><call pos:start="977:13" pos:end="977:40"><name pos:start="977:13" pos:end="977:27">tci_write_reg64</name><argument_list pos:start="977:28" pos:end="977:40">(<argument pos:start="977:29" pos:end="977:30"><expr pos:start="977:29" pos:end="977:30"><name pos:start="977:29" pos:end="977:30">t0</name></expr></argument>, <argument pos:start="977:33" pos:end="977:39"><expr pos:start="977:33" pos:end="977:39"><name pos:start="977:33" pos:end="977:34">t1</name> <operator pos:start="977:36" pos:end="977:36">^</operator> <name pos:start="977:38" pos:end="977:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="979:13" pos:end="979:18">break;</break>



            <comment type="block" pos:start="983:13" pos:end="983:51">/* Shift/rotate operations (64 bit). */</comment>



        <case pos:start="987:9" pos:end="987:30">case <expr pos:start="987:14" pos:end="987:29"><name pos:start="987:14" pos:end="987:29">INDEX_op_shl_i64</name></expr>:</case>

            <expr_stmt pos:start="989:13" pos:end="989:27"><expr pos:start="989:13" pos:end="989:26"><name pos:start="989:13" pos:end="989:14">t0</name> <operator pos:start="989:16" pos:end="989:16">=</operator> <operator pos:start="989:18" pos:end="989:18">*</operator><name pos:start="989:19" pos:end="989:24">tb_ptr</name><operator pos:start="989:25" pos:end="989:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="991:13" pos:end="991:40"><expr pos:start="991:13" pos:end="991:39"><name pos:start="991:13" pos:end="991:14">t1</name> <operator pos:start="991:16" pos:end="991:16">=</operator> <call pos:start="991:18" pos:end="991:39"><name pos:start="991:18" pos:end="991:30">tci_read_ri64</name><argument_list pos:start="991:31" pos:end="991:39">(<argument pos:start="991:32" pos:end="991:38"><expr pos:start="991:32" pos:end="991:38"><operator pos:start="991:32" pos:end="991:32">&amp;</operator><name pos:start="991:33" pos:end="991:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="993:13" pos:end="993:40"><expr pos:start="993:13" pos:end="993:39"><name pos:start="993:13" pos:end="993:14">t2</name> <operator pos:start="993:16" pos:end="993:16">=</operator> <call pos:start="993:18" pos:end="993:39"><name pos:start="993:18" pos:end="993:30">tci_read_ri64</name><argument_list pos:start="993:31" pos:end="993:39">(<argument pos:start="993:32" pos:end="993:38"><expr pos:start="993:32" pos:end="993:38"><operator pos:start="993:32" pos:end="993:32">&amp;</operator><name pos:start="993:33" pos:end="993:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="995:13" pos:end="995:42"><expr pos:start="995:13" pos:end="995:41"><call pos:start="995:13" pos:end="995:41"><name pos:start="995:13" pos:end="995:27">tci_write_reg64</name><argument_list pos:start="995:28" pos:end="995:41">(<argument pos:start="995:29" pos:end="995:30"><expr pos:start="995:29" pos:end="995:30"><name pos:start="995:29" pos:end="995:30">t0</name></expr></argument>, <argument pos:start="995:33" pos:end="995:40"><expr pos:start="995:33" pos:end="995:40"><name pos:start="995:33" pos:end="995:34">t1</name> <operator pos:start="995:36" pos:end="995:37">&lt;&lt;</operator> <name pos:start="995:39" pos:end="995:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="997:13" pos:end="997:18">break;</break>

        <case pos:start="999:9" pos:end="999:30">case <expr pos:start="999:14" pos:end="999:29"><name pos:start="999:14" pos:end="999:29">INDEX_op_shr_i64</name></expr>:</case>

            <expr_stmt pos:start="1001:13" pos:end="1001:27"><expr pos:start="1001:13" pos:end="1001:26"><name pos:start="1001:13" pos:end="1001:14">t0</name> <operator pos:start="1001:16" pos:end="1001:16">=</operator> <operator pos:start="1001:18" pos:end="1001:18">*</operator><name pos:start="1001:19" pos:end="1001:24">tb_ptr</name><operator pos:start="1001:25" pos:end="1001:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1003:13" pos:end="1003:40"><expr pos:start="1003:13" pos:end="1003:39"><name pos:start="1003:13" pos:end="1003:14">t1</name> <operator pos:start="1003:16" pos:end="1003:16">=</operator> <call pos:start="1003:18" pos:end="1003:39"><name pos:start="1003:18" pos:end="1003:30">tci_read_ri64</name><argument_list pos:start="1003:31" pos:end="1003:39">(<argument pos:start="1003:32" pos:end="1003:38"><expr pos:start="1003:32" pos:end="1003:38"><operator pos:start="1003:32" pos:end="1003:32">&amp;</operator><name pos:start="1003:33" pos:end="1003:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:40"><expr pos:start="1005:13" pos:end="1005:39"><name pos:start="1005:13" pos:end="1005:14">t2</name> <operator pos:start="1005:16" pos:end="1005:16">=</operator> <call pos:start="1005:18" pos:end="1005:39"><name pos:start="1005:18" pos:end="1005:30">tci_read_ri64</name><argument_list pos:start="1005:31" pos:end="1005:39">(<argument pos:start="1005:32" pos:end="1005:38"><expr pos:start="1005:32" pos:end="1005:38"><operator pos:start="1005:32" pos:end="1005:32">&amp;</operator><name pos:start="1005:33" pos:end="1005:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1007:13" pos:end="1007:42"><expr pos:start="1007:13" pos:end="1007:41"><call pos:start="1007:13" pos:end="1007:41"><name pos:start="1007:13" pos:end="1007:27">tci_write_reg64</name><argument_list pos:start="1007:28" pos:end="1007:41">(<argument pos:start="1007:29" pos:end="1007:30"><expr pos:start="1007:29" pos:end="1007:30"><name pos:start="1007:29" pos:end="1007:30">t0</name></expr></argument>, <argument pos:start="1007:33" pos:end="1007:40"><expr pos:start="1007:33" pos:end="1007:40"><name pos:start="1007:33" pos:end="1007:34">t1</name> <operator pos:start="1007:36" pos:end="1007:37">&gt;&gt;</operator> <name pos:start="1007:39" pos:end="1007:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1009:13" pos:end="1009:18">break;</break>

        <case pos:start="1011:9" pos:end="1011:30">case <expr pos:start="1011:14" pos:end="1011:29"><name pos:start="1011:14" pos:end="1011:29">INDEX_op_sar_i64</name></expr>:</case>

            <expr_stmt pos:start="1013:13" pos:end="1013:27"><expr pos:start="1013:13" pos:end="1013:26"><name pos:start="1013:13" pos:end="1013:14">t0</name> <operator pos:start="1013:16" pos:end="1013:16">=</operator> <operator pos:start="1013:18" pos:end="1013:18">*</operator><name pos:start="1013:19" pos:end="1013:24">tb_ptr</name><operator pos:start="1013:25" pos:end="1013:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1015:13" pos:end="1015:40"><expr pos:start="1015:13" pos:end="1015:39"><name pos:start="1015:13" pos:end="1015:14">t1</name> <operator pos:start="1015:16" pos:end="1015:16">=</operator> <call pos:start="1015:18" pos:end="1015:39"><name pos:start="1015:18" pos:end="1015:30">tci_read_ri64</name><argument_list pos:start="1015:31" pos:end="1015:39">(<argument pos:start="1015:32" pos:end="1015:38"><expr pos:start="1015:32" pos:end="1015:38"><operator pos:start="1015:32" pos:end="1015:32">&amp;</operator><name pos:start="1015:33" pos:end="1015:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1017:13" pos:end="1017:40"><expr pos:start="1017:13" pos:end="1017:39"><name pos:start="1017:13" pos:end="1017:14">t2</name> <operator pos:start="1017:16" pos:end="1017:16">=</operator> <call pos:start="1017:18" pos:end="1017:39"><name pos:start="1017:18" pos:end="1017:30">tci_read_ri64</name><argument_list pos:start="1017:31" pos:end="1017:39">(<argument pos:start="1017:32" pos:end="1017:38"><expr pos:start="1017:32" pos:end="1017:38"><operator pos:start="1017:32" pos:end="1017:32">&amp;</operator><name pos:start="1017:33" pos:end="1017:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1019:13" pos:end="1019:53"><expr pos:start="1019:13" pos:end="1019:52"><call pos:start="1019:13" pos:end="1019:52"><name pos:start="1019:13" pos:end="1019:27">tci_write_reg64</name><argument_list pos:start="1019:28" pos:end="1019:52">(<argument pos:start="1019:29" pos:end="1019:30"><expr pos:start="1019:29" pos:end="1019:30"><name pos:start="1019:29" pos:end="1019:30">t0</name></expr></argument>, <argument pos:start="1019:33" pos:end="1019:51"><expr pos:start="1019:33" pos:end="1019:51"><operator pos:start="1019:33" pos:end="1019:33">(</operator><operator pos:start="1019:34" pos:end="1019:34">(</operator><name pos:start="1019:35" pos:end="1019:41">int64_t</name><operator pos:start="1019:42" pos:end="1019:42">)</operator><name pos:start="1019:43" pos:end="1019:44">t1</name> <operator pos:start="1019:46" pos:end="1019:47">&gt;&gt;</operator> <name pos:start="1019:49" pos:end="1019:50">t2</name><operator pos:start="1019:51" pos:end="1019:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1021:13" pos:end="1024:0">break;</break>

<cpp:if pos:start="1023:1" pos:end="1023:26">#<cpp:directive pos:start="1023:2" pos:end="1023:3">if</cpp:directive> <expr pos:start="1023:5" pos:end="1023:26"><name pos:start="1023:5" pos:end="1023:26">TCG_TARGET_HAS_rot_i64</name></expr></cpp:if>

        <case pos:start="1025:9" pos:end="1025:31">case <expr pos:start="1025:14" pos:end="1025:30"><name pos:start="1025:14" pos:end="1025:30">INDEX_op_rotl_i64</name></expr>:</case>

        <case pos:start="1027:9" pos:end="1027:31">case <expr pos:start="1027:14" pos:end="1027:30"><name pos:start="1027:14" pos:end="1027:30">INDEX_op_rotr_i64</name></expr>:</case>

            <expr_stmt pos:start="1029:13" pos:end="1029:19"><expr pos:start="1029:13" pos:end="1029:18"><call pos:start="1029:13" pos:end="1029:18"><name pos:start="1029:13" pos:end="1029:16">TODO</name><argument_list pos:start="1029:17" pos:end="1029:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1031:13" pos:end="1036:0">break;</break>

<cpp:endif pos:start="1033:1" pos:end="1033:6">#<cpp:directive pos:start="1033:2" pos:end="1033:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1035:1" pos:end="1035:30">#<cpp:directive pos:start="1035:2" pos:end="1035:3">if</cpp:directive> <expr pos:start="1035:5" pos:end="1035:30"><name pos:start="1035:5" pos:end="1035:30">TCG_TARGET_HAS_deposit_i64</name></expr></cpp:if>

        <case pos:start="1037:9" pos:end="1037:34">case <expr pos:start="1037:14" pos:end="1037:33"><name pos:start="1037:14" pos:end="1037:33">INDEX_op_deposit_i64</name></expr>:</case>

            <expr_stmt pos:start="1039:13" pos:end="1039:27"><expr pos:start="1039:13" pos:end="1039:26"><name pos:start="1039:13" pos:end="1039:14">t0</name> <operator pos:start="1039:16" pos:end="1039:16">=</operator> <operator pos:start="1039:18" pos:end="1039:18">*</operator><name pos:start="1039:19" pos:end="1039:24">tb_ptr</name><operator pos:start="1039:25" pos:end="1039:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:39"><expr pos:start="1041:13" pos:end="1041:38"><name pos:start="1041:13" pos:end="1041:14">t1</name> <operator pos:start="1041:16" pos:end="1041:16">=</operator> <call pos:start="1041:18" pos:end="1041:38"><name pos:start="1041:18" pos:end="1041:29">tci_read_r64</name><argument_list pos:start="1041:30" pos:end="1041:38">(<argument pos:start="1041:31" pos:end="1041:37"><expr pos:start="1041:31" pos:end="1041:37"><operator pos:start="1041:31" pos:end="1041:31">&amp;</operator><name pos:start="1041:32" pos:end="1041:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1043:13" pos:end="1043:39"><expr pos:start="1043:13" pos:end="1043:38"><name pos:start="1043:13" pos:end="1043:14">t2</name> <operator pos:start="1043:16" pos:end="1043:16">=</operator> <call pos:start="1043:18" pos:end="1043:38"><name pos:start="1043:18" pos:end="1043:29">tci_read_r64</name><argument_list pos:start="1043:30" pos:end="1043:38">(<argument pos:start="1043:31" pos:end="1043:37"><expr pos:start="1043:31" pos:end="1043:37"><operator pos:start="1043:31" pos:end="1043:31">&amp;</operator><name pos:start="1043:32" pos:end="1043:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1045:13" pos:end="1045:30"><expr pos:start="1045:13" pos:end="1045:29"><name pos:start="1045:13" pos:end="1045:17">tmp16</name> <operator pos:start="1045:19" pos:end="1045:19">=</operator> <operator pos:start="1045:21" pos:end="1045:21">*</operator><name pos:start="1045:22" pos:end="1045:27">tb_ptr</name><operator pos:start="1045:28" pos:end="1045:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1047:13" pos:end="1047:29"><expr pos:start="1047:13" pos:end="1047:28"><name pos:start="1047:13" pos:end="1047:16">tmp8</name> <operator pos:start="1047:18" pos:end="1047:18">=</operator> <operator pos:start="1047:20" pos:end="1047:20">*</operator><name pos:start="1047:21" pos:end="1047:26">tb_ptr</name><operator pos:start="1047:27" pos:end="1047:28">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1049:13" pos:end="1049:52"><expr pos:start="1049:13" pos:end="1049:51"><name pos:start="1049:13" pos:end="1049:17">tmp64</name> <operator pos:start="1049:19" pos:end="1049:19">=</operator> <operator pos:start="1049:21" pos:end="1049:21">(</operator><operator pos:start="1049:22" pos:end="1049:22">(</operator><operator pos:start="1049:23" pos:end="1049:23">(</operator><literal type="number" pos:start="1049:24" pos:end="1049:27">1ULL</literal> <operator pos:start="1049:29" pos:end="1049:30">&lt;&lt;</operator> <name pos:start="1049:32" pos:end="1049:35">tmp8</name><operator pos:start="1049:36" pos:end="1049:36">)</operator> <operator pos:start="1049:38" pos:end="1049:38">-</operator> <literal type="number" pos:start="1049:40" pos:end="1049:40">1</literal><operator pos:start="1049:41" pos:end="1049:41">)</operator> <operator pos:start="1049:43" pos:end="1049:44">&lt;&lt;</operator> <name pos:start="1049:46" pos:end="1049:50">tmp16</name><operator pos:start="1049:51" pos:end="1049:51">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1051:13" pos:end="1051:73"><expr pos:start="1051:13" pos:end="1051:72"><call pos:start="1051:13" pos:end="1051:72"><name pos:start="1051:13" pos:end="1051:27">tci_write_reg64</name><argument_list pos:start="1051:28" pos:end="1051:72">(<argument pos:start="1051:29" pos:end="1051:30"><expr pos:start="1051:29" pos:end="1051:30"><name pos:start="1051:29" pos:end="1051:30">t0</name></expr></argument>, <argument pos:start="1051:33" pos:end="1051:71"><expr pos:start="1051:33" pos:end="1051:71"><operator pos:start="1051:33" pos:end="1051:33">(</operator><name pos:start="1051:34" pos:end="1051:35">t1</name> <operator pos:start="1051:37" pos:end="1051:37">&amp;</operator> <operator pos:start="1051:39" pos:end="1051:39">~</operator><name pos:start="1051:40" pos:end="1051:44">tmp64</name><operator pos:start="1051:45" pos:end="1051:45">)</operator> <operator pos:start="1051:47" pos:end="1051:47">|</operator> <operator pos:start="1051:49" pos:end="1051:49">(</operator><operator pos:start="1051:50" pos:end="1051:50">(</operator><name pos:start="1051:51" pos:end="1051:52">t2</name> <operator pos:start="1051:54" pos:end="1051:55">&lt;&lt;</operator> <name pos:start="1051:57" pos:end="1051:61">tmp16</name><operator pos:start="1051:62" pos:end="1051:62">)</operator> <operator pos:start="1051:64" pos:end="1051:64">&amp;</operator> <name pos:start="1051:66" pos:end="1051:70">tmp64</name><operator pos:start="1051:71" pos:end="1051:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1053:13" pos:end="1056:0">break;</break>

<cpp:endif pos:start="1055:1" pos:end="1055:6">#<cpp:directive pos:start="1055:2" pos:end="1055:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1057:9" pos:end="1057:33">case <expr pos:start="1057:14" pos:end="1057:32"><name pos:start="1057:14" pos:end="1057:32">INDEX_op_brcond_i64</name></expr>:</case>

            <expr_stmt pos:start="1059:13" pos:end="1059:39"><expr pos:start="1059:13" pos:end="1059:38"><name pos:start="1059:13" pos:end="1059:14">t0</name> <operator pos:start="1059:16" pos:end="1059:16">=</operator> <call pos:start="1059:18" pos:end="1059:38"><name pos:start="1059:18" pos:end="1059:29">tci_read_r64</name><argument_list pos:start="1059:30" pos:end="1059:38">(<argument pos:start="1059:31" pos:end="1059:37"><expr pos:start="1059:31" pos:end="1059:37"><operator pos:start="1059:31" pos:end="1059:31">&amp;</operator><name pos:start="1059:32" pos:end="1059:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1061:13" pos:end="1061:40"><expr pos:start="1061:13" pos:end="1061:39"><name pos:start="1061:13" pos:end="1061:14">t1</name> <operator pos:start="1061:16" pos:end="1061:16">=</operator> <call pos:start="1061:18" pos:end="1061:39"><name pos:start="1061:18" pos:end="1061:30">tci_read_ri64</name><argument_list pos:start="1061:31" pos:end="1061:39">(<argument pos:start="1061:32" pos:end="1061:38"><expr pos:start="1061:32" pos:end="1061:38"><operator pos:start="1061:32" pos:end="1061:32">&amp;</operator><name pos:start="1061:33" pos:end="1061:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1063:13" pos:end="1063:34"><expr pos:start="1063:13" pos:end="1063:33"><name pos:start="1063:13" pos:end="1063:21">condition</name> <operator pos:start="1063:23" pos:end="1063:23">=</operator> <operator pos:start="1063:25" pos:end="1063:25">*</operator><name pos:start="1063:26" pos:end="1063:31">tb_ptr</name><operator pos:start="1063:32" pos:end="1063:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1065:13" pos:end="1065:44"><expr pos:start="1065:13" pos:end="1065:43"><name pos:start="1065:13" pos:end="1065:17">label</name> <operator pos:start="1065:19" pos:end="1065:19">=</operator> <call pos:start="1065:21" pos:end="1065:43"><name pos:start="1065:21" pos:end="1065:34">tci_read_label</name><argument_list pos:start="1065:35" pos:end="1065:43">(<argument pos:start="1065:36" pos:end="1065:42"><expr pos:start="1065:36" pos:end="1065:42"><operator pos:start="1065:36" pos:end="1065:36">&amp;</operator><name pos:start="1065:37" pos:end="1065:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1067:13" pos:end="1075:13"><if pos:start="1067:13" pos:end="1075:13">if <condition pos:start="1067:16" pos:end="1067:49">(<expr pos:start="1067:17" pos:end="1067:48"><call pos:start="1067:17" pos:end="1067:48"><name pos:start="1067:17" pos:end="1067:29">tci_compare64</name><argument_list pos:start="1067:30" pos:end="1067:48">(<argument pos:start="1067:31" pos:end="1067:32"><expr pos:start="1067:31" pos:end="1067:32"><name pos:start="1067:31" pos:end="1067:32">t0</name></expr></argument>, <argument pos:start="1067:35" pos:end="1067:36"><expr pos:start="1067:35" pos:end="1067:36"><name pos:start="1067:35" pos:end="1067:36">t1</name></expr></argument>, <argument pos:start="1067:39" pos:end="1067:47"><expr pos:start="1067:39" pos:end="1067:47"><name pos:start="1067:39" pos:end="1067:47">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1067:51" pos:end="1075:13">{<block_content pos:start="1069:17" pos:end="1073:25">

                <expr_stmt pos:start="1069:17" pos:end="1069:57"><expr pos:start="1069:17" pos:end="1069:56"><call pos:start="1069:17" pos:end="1069:56"><name pos:start="1069:17" pos:end="1069:22">assert</name><argument_list pos:start="1069:23" pos:end="1069:56">(<argument pos:start="1069:24" pos:end="1069:55"><expr pos:start="1069:24" pos:end="1069:55"><name pos:start="1069:24" pos:end="1069:29">tb_ptr</name> <operator pos:start="1069:31" pos:end="1069:32">==</operator> <name pos:start="1069:34" pos:end="1069:45">old_code_ptr</name> <operator pos:start="1069:47" pos:end="1069:47">+</operator> <name pos:start="1069:49" pos:end="1069:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1071:17" pos:end="1071:42"><expr pos:start="1071:17" pos:end="1071:41"><name pos:start="1071:17" pos:end="1071:22">tb_ptr</name> <operator pos:start="1071:24" pos:end="1071:24">=</operator> <operator pos:start="1071:26" pos:end="1071:26">(</operator><name pos:start="1071:27" pos:end="1071:33">uint8_t</name> <operator pos:start="1071:35" pos:end="1071:35">*</operator><operator pos:start="1071:36" pos:end="1071:36">)</operator><name pos:start="1071:37" pos:end="1071:41">label</name></expr>;</expr_stmt>

                <continue pos:start="1073:17" pos:end="1073:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="1077:13" pos:end="1080:0">break;</break>

<cpp:if pos:start="1079:1" pos:end="1079:28">#<cpp:directive pos:start="1079:2" pos:end="1079:3">if</cpp:directive> <expr pos:start="1079:5" pos:end="1079:28"><name pos:start="1079:5" pos:end="1079:28">TCG_TARGET_HAS_ext8u_i64</name></expr></cpp:if>

        <case pos:start="1081:9" pos:end="1081:32">case <expr pos:start="1081:14" pos:end="1081:31"><name pos:start="1081:14" pos:end="1081:31">INDEX_op_ext8u_i64</name></expr>:</case>

            <expr_stmt pos:start="1083:13" pos:end="1083:27"><expr pos:start="1083:13" pos:end="1083:26"><name pos:start="1083:13" pos:end="1083:14">t0</name> <operator pos:start="1083:16" pos:end="1083:16">=</operator> <operator pos:start="1083:18" pos:end="1083:18">*</operator><name pos:start="1083:19" pos:end="1083:24">tb_ptr</name><operator pos:start="1083:25" pos:end="1083:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1085:13" pos:end="1085:38"><expr pos:start="1085:13" pos:end="1085:37"><name pos:start="1085:13" pos:end="1085:14">t1</name> <operator pos:start="1085:16" pos:end="1085:16">=</operator> <call pos:start="1085:18" pos:end="1085:37"><name pos:start="1085:18" pos:end="1085:28">tci_read_r8</name><argument_list pos:start="1085:29" pos:end="1085:37">(<argument pos:start="1085:30" pos:end="1085:36"><expr pos:start="1085:30" pos:end="1085:36"><operator pos:start="1085:30" pos:end="1085:30">&amp;</operator><name pos:start="1085:31" pos:end="1085:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1087:13" pos:end="1087:36"><expr pos:start="1087:13" pos:end="1087:35"><call pos:start="1087:13" pos:end="1087:35"><name pos:start="1087:13" pos:end="1087:27">tci_write_reg64</name><argument_list pos:start="1087:28" pos:end="1087:35">(<argument pos:start="1087:29" pos:end="1087:30"><expr pos:start="1087:29" pos:end="1087:30"><name pos:start="1087:29" pos:end="1087:30">t0</name></expr></argument>, <argument pos:start="1087:33" pos:end="1087:34"><expr pos:start="1087:33" pos:end="1087:34"><name pos:start="1087:33" pos:end="1087:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1089:13" pos:end="1094:0">break;</break>

<cpp:endif pos:start="1091:1" pos:end="1091:6">#<cpp:directive pos:start="1091:2" pos:end="1091:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1093:1" pos:end="1093:28">#<cpp:directive pos:start="1093:2" pos:end="1093:3">if</cpp:directive> <expr pos:start="1093:5" pos:end="1093:28"><name pos:start="1093:5" pos:end="1093:28">TCG_TARGET_HAS_ext8s_i64</name></expr></cpp:if>

        <case pos:start="1095:9" pos:end="1095:32">case <expr pos:start="1095:14" pos:end="1095:31"><name pos:start="1095:14" pos:end="1095:31">INDEX_op_ext8s_i64</name></expr>:</case>

            <expr_stmt pos:start="1097:13" pos:end="1097:27"><expr pos:start="1097:13" pos:end="1097:26"><name pos:start="1097:13" pos:end="1097:14">t0</name> <operator pos:start="1097:16" pos:end="1097:16">=</operator> <operator pos:start="1097:18" pos:end="1097:18">*</operator><name pos:start="1097:19" pos:end="1097:24">tb_ptr</name><operator pos:start="1097:25" pos:end="1097:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1099:13" pos:end="1099:39"><expr pos:start="1099:13" pos:end="1099:38"><name pos:start="1099:13" pos:end="1099:14">t1</name> <operator pos:start="1099:16" pos:end="1099:16">=</operator> <call pos:start="1099:18" pos:end="1099:38"><name pos:start="1099:18" pos:end="1099:29">tci_read_r8s</name><argument_list pos:start="1099:30" pos:end="1099:38">(<argument pos:start="1099:31" pos:end="1099:37"><expr pos:start="1099:31" pos:end="1099:37"><operator pos:start="1099:31" pos:end="1099:31">&amp;</operator><name pos:start="1099:32" pos:end="1099:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1101:13" pos:end="1101:36"><expr pos:start="1101:13" pos:end="1101:35"><call pos:start="1101:13" pos:end="1101:35"><name pos:start="1101:13" pos:end="1101:27">tci_write_reg64</name><argument_list pos:start="1101:28" pos:end="1101:35">(<argument pos:start="1101:29" pos:end="1101:30"><expr pos:start="1101:29" pos:end="1101:30"><name pos:start="1101:29" pos:end="1101:30">t0</name></expr></argument>, <argument pos:start="1101:33" pos:end="1101:34"><expr pos:start="1101:33" pos:end="1101:34"><name pos:start="1101:33" pos:end="1101:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1103:13" pos:end="1108:0">break;</break>

<cpp:endif pos:start="1105:1" pos:end="1105:6">#<cpp:directive pos:start="1105:2" pos:end="1105:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1107:1" pos:end="1107:29">#<cpp:directive pos:start="1107:2" pos:end="1107:3">if</cpp:directive> <expr pos:start="1107:5" pos:end="1107:29"><name pos:start="1107:5" pos:end="1107:29">TCG_TARGET_HAS_ext16s_i64</name></expr></cpp:if>

        <case pos:start="1109:9" pos:end="1109:33">case <expr pos:start="1109:14" pos:end="1109:32"><name pos:start="1109:14" pos:end="1109:32">INDEX_op_ext16s_i64</name></expr>:</case>

            <expr_stmt pos:start="1111:13" pos:end="1111:27"><expr pos:start="1111:13" pos:end="1111:26"><name pos:start="1111:13" pos:end="1111:14">t0</name> <operator pos:start="1111:16" pos:end="1111:16">=</operator> <operator pos:start="1111:18" pos:end="1111:18">*</operator><name pos:start="1111:19" pos:end="1111:24">tb_ptr</name><operator pos:start="1111:25" pos:end="1111:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1113:13" pos:end="1113:40"><expr pos:start="1113:13" pos:end="1113:39"><name pos:start="1113:13" pos:end="1113:14">t1</name> <operator pos:start="1113:16" pos:end="1113:16">=</operator> <call pos:start="1113:18" pos:end="1113:39"><name pos:start="1113:18" pos:end="1113:30">tci_read_r16s</name><argument_list pos:start="1113:31" pos:end="1113:39">(<argument pos:start="1113:32" pos:end="1113:38"><expr pos:start="1113:32" pos:end="1113:38"><operator pos:start="1113:32" pos:end="1113:32">&amp;</operator><name pos:start="1113:33" pos:end="1113:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1115:13" pos:end="1115:36"><expr pos:start="1115:13" pos:end="1115:35"><call pos:start="1115:13" pos:end="1115:35"><name pos:start="1115:13" pos:end="1115:27">tci_write_reg64</name><argument_list pos:start="1115:28" pos:end="1115:35">(<argument pos:start="1115:29" pos:end="1115:30"><expr pos:start="1115:29" pos:end="1115:30"><name pos:start="1115:29" pos:end="1115:30">t0</name></expr></argument>, <argument pos:start="1115:33" pos:end="1115:34"><expr pos:start="1115:33" pos:end="1115:34"><name pos:start="1115:33" pos:end="1115:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1117:13" pos:end="1122:0">break;</break>

<cpp:endif pos:start="1119:1" pos:end="1119:6">#<cpp:directive pos:start="1119:2" pos:end="1119:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1121:1" pos:end="1121:29">#<cpp:directive pos:start="1121:2" pos:end="1121:3">if</cpp:directive> <expr pos:start="1121:5" pos:end="1121:29"><name pos:start="1121:5" pos:end="1121:29">TCG_TARGET_HAS_ext16u_i64</name></expr></cpp:if>

        <case pos:start="1123:9" pos:end="1123:33">case <expr pos:start="1123:14" pos:end="1123:32"><name pos:start="1123:14" pos:end="1123:32">INDEX_op_ext16u_i64</name></expr>:</case>

            <expr_stmt pos:start="1125:13" pos:end="1125:27"><expr pos:start="1125:13" pos:end="1125:26"><name pos:start="1125:13" pos:end="1125:14">t0</name> <operator pos:start="1125:16" pos:end="1125:16">=</operator> <operator pos:start="1125:18" pos:end="1125:18">*</operator><name pos:start="1125:19" pos:end="1125:24">tb_ptr</name><operator pos:start="1125:25" pos:end="1125:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1127:13" pos:end="1127:39"><expr pos:start="1127:13" pos:end="1127:38"><name pos:start="1127:13" pos:end="1127:14">t1</name> <operator pos:start="1127:16" pos:end="1127:16">=</operator> <call pos:start="1127:18" pos:end="1127:38"><name pos:start="1127:18" pos:end="1127:29">tci_read_r16</name><argument_list pos:start="1127:30" pos:end="1127:38">(<argument pos:start="1127:31" pos:end="1127:37"><expr pos:start="1127:31" pos:end="1127:37"><operator pos:start="1127:31" pos:end="1127:31">&amp;</operator><name pos:start="1127:32" pos:end="1127:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1129:13" pos:end="1129:36"><expr pos:start="1129:13" pos:end="1129:35"><call pos:start="1129:13" pos:end="1129:35"><name pos:start="1129:13" pos:end="1129:27">tci_write_reg64</name><argument_list pos:start="1129:28" pos:end="1129:35">(<argument pos:start="1129:29" pos:end="1129:30"><expr pos:start="1129:29" pos:end="1129:30"><name pos:start="1129:29" pos:end="1129:30">t0</name></expr></argument>, <argument pos:start="1129:33" pos:end="1129:34"><expr pos:start="1129:33" pos:end="1129:34"><name pos:start="1129:33" pos:end="1129:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1131:13" pos:end="1136:0">break;</break>

<cpp:endif pos:start="1133:1" pos:end="1133:6">#<cpp:directive pos:start="1133:2" pos:end="1133:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1135:1" pos:end="1135:29">#<cpp:directive pos:start="1135:2" pos:end="1135:3">if</cpp:directive> <expr pos:start="1135:5" pos:end="1135:29"><name pos:start="1135:5" pos:end="1135:29">TCG_TARGET_HAS_ext32s_i64</name></expr></cpp:if>

        <case pos:start="1137:9" pos:end="1137:33">case <expr pos:start="1137:14" pos:end="1137:32"><name pos:start="1137:14" pos:end="1137:32">INDEX_op_ext32s_i64</name></expr>:</case>

            <expr_stmt pos:start="1139:13" pos:end="1139:27"><expr pos:start="1139:13" pos:end="1139:26"><name pos:start="1139:13" pos:end="1139:14">t0</name> <operator pos:start="1139:16" pos:end="1139:16">=</operator> <operator pos:start="1139:18" pos:end="1139:18">*</operator><name pos:start="1139:19" pos:end="1139:24">tb_ptr</name><operator pos:start="1139:25" pos:end="1139:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1141:13" pos:end="1141:40"><expr pos:start="1141:13" pos:end="1141:39"><name pos:start="1141:13" pos:end="1141:14">t1</name> <operator pos:start="1141:16" pos:end="1141:16">=</operator> <call pos:start="1141:18" pos:end="1141:39"><name pos:start="1141:18" pos:end="1141:30">tci_read_r32s</name><argument_list pos:start="1141:31" pos:end="1141:39">(<argument pos:start="1141:32" pos:end="1141:38"><expr pos:start="1141:32" pos:end="1141:38"><operator pos:start="1141:32" pos:end="1141:32">&amp;</operator><name pos:start="1141:33" pos:end="1141:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1143:13" pos:end="1143:36"><expr pos:start="1143:13" pos:end="1143:35"><call pos:start="1143:13" pos:end="1143:35"><name pos:start="1143:13" pos:end="1143:27">tci_write_reg64</name><argument_list pos:start="1143:28" pos:end="1143:35">(<argument pos:start="1143:29" pos:end="1143:30"><expr pos:start="1143:29" pos:end="1143:30"><name pos:start="1143:29" pos:end="1143:30">t0</name></expr></argument>, <argument pos:start="1143:33" pos:end="1143:34"><expr pos:start="1143:33" pos:end="1143:34"><name pos:start="1143:33" pos:end="1143:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1145:13" pos:end="1150:0">break;</break>

<cpp:endif pos:start="1147:1" pos:end="1147:6">#<cpp:directive pos:start="1147:2" pos:end="1147:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1149:1" pos:end="1149:29">#<cpp:directive pos:start="1149:2" pos:end="1149:3">if</cpp:directive> <expr pos:start="1149:5" pos:end="1149:29"><name pos:start="1149:5" pos:end="1149:29">TCG_TARGET_HAS_ext32u_i64</name></expr></cpp:if>

        <case pos:start="1151:9" pos:end="1151:33">case <expr pos:start="1151:14" pos:end="1151:32"><name pos:start="1151:14" pos:end="1151:32">INDEX_op_ext32u_i64</name></expr>:</case>

            <expr_stmt pos:start="1153:13" pos:end="1153:27"><expr pos:start="1153:13" pos:end="1153:26"><name pos:start="1153:13" pos:end="1153:14">t0</name> <operator pos:start="1153:16" pos:end="1153:16">=</operator> <operator pos:start="1153:18" pos:end="1153:18">*</operator><name pos:start="1153:19" pos:end="1153:24">tb_ptr</name><operator pos:start="1153:25" pos:end="1153:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1155:13" pos:end="1155:39"><expr pos:start="1155:13" pos:end="1155:38"><name pos:start="1155:13" pos:end="1155:14">t1</name> <operator pos:start="1155:16" pos:end="1155:16">=</operator> <call pos:start="1155:18" pos:end="1155:38"><name pos:start="1155:18" pos:end="1155:29">tci_read_r32</name><argument_list pos:start="1155:30" pos:end="1155:38">(<argument pos:start="1155:31" pos:end="1155:37"><expr pos:start="1155:31" pos:end="1155:37"><operator pos:start="1155:31" pos:end="1155:31">&amp;</operator><name pos:start="1155:32" pos:end="1155:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1157:13" pos:end="1157:36"><expr pos:start="1157:13" pos:end="1157:35"><call pos:start="1157:13" pos:end="1157:35"><name pos:start="1157:13" pos:end="1157:27">tci_write_reg64</name><argument_list pos:start="1157:28" pos:end="1157:35">(<argument pos:start="1157:29" pos:end="1157:30"><expr pos:start="1157:29" pos:end="1157:30"><name pos:start="1157:29" pos:end="1157:30">t0</name></expr></argument>, <argument pos:start="1157:33" pos:end="1157:34"><expr pos:start="1157:33" pos:end="1157:34"><name pos:start="1157:33" pos:end="1157:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1159:13" pos:end="1164:0">break;</break>

<cpp:endif pos:start="1161:1" pos:end="1161:6">#<cpp:directive pos:start="1161:2" pos:end="1161:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1163:1" pos:end="1163:30">#<cpp:directive pos:start="1163:2" pos:end="1163:3">if</cpp:directive> <expr pos:start="1163:5" pos:end="1163:30"><name pos:start="1163:5" pos:end="1163:30">TCG_TARGET_HAS_bswap16_i64</name></expr></cpp:if>

        <case pos:start="1165:9" pos:end="1165:34">case <expr pos:start="1165:14" pos:end="1165:33"><name pos:start="1165:14" pos:end="1165:33">INDEX_op_bswap16_i64</name></expr>:</case>

            <expr_stmt pos:start="1167:13" pos:end="1167:19"><expr pos:start="1167:13" pos:end="1167:18"><call pos:start="1167:13" pos:end="1167:18"><name pos:start="1167:13" pos:end="1167:16">TODO</name><argument_list pos:start="1167:17" pos:end="1167:18">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1169:13" pos:end="1169:27"><expr pos:start="1169:13" pos:end="1169:26"><name pos:start="1169:13" pos:end="1169:14">t0</name> <operator pos:start="1169:16" pos:end="1169:16">=</operator> <operator pos:start="1169:18" pos:end="1169:18">*</operator><name pos:start="1169:19" pos:end="1169:24">tb_ptr</name><operator pos:start="1169:25" pos:end="1169:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1171:13" pos:end="1171:39"><expr pos:start="1171:13" pos:end="1171:38"><name pos:start="1171:13" pos:end="1171:14">t1</name> <operator pos:start="1171:16" pos:end="1171:16">=</operator> <call pos:start="1171:18" pos:end="1171:38"><name pos:start="1171:18" pos:end="1171:29">tci_read_r16</name><argument_list pos:start="1171:30" pos:end="1171:38">(<argument pos:start="1171:31" pos:end="1171:37"><expr pos:start="1171:31" pos:end="1171:37"><operator pos:start="1171:31" pos:end="1171:31">&amp;</operator><name pos:start="1171:32" pos:end="1171:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1173:13" pos:end="1173:45"><expr pos:start="1173:13" pos:end="1173:44"><call pos:start="1173:13" pos:end="1173:44"><name pos:start="1173:13" pos:end="1173:27">tci_write_reg64</name><argument_list pos:start="1173:28" pos:end="1173:44">(<argument pos:start="1173:29" pos:end="1173:30"><expr pos:start="1173:29" pos:end="1173:30"><name pos:start="1173:29" pos:end="1173:30">t0</name></expr></argument>, <argument pos:start="1173:33" pos:end="1173:43"><expr pos:start="1173:33" pos:end="1173:43"><call pos:start="1173:33" pos:end="1173:43"><name pos:start="1173:33" pos:end="1173:39">bswap16</name><argument_list pos:start="1173:40" pos:end="1173:43">(<argument pos:start="1173:41" pos:end="1173:42"><expr pos:start="1173:41" pos:end="1173:42"><name pos:start="1173:41" pos:end="1173:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1175:13" pos:end="1180:0">break;</break>

<cpp:endif pos:start="1177:1" pos:end="1177:6">#<cpp:directive pos:start="1177:2" pos:end="1177:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1179:1" pos:end="1179:30">#<cpp:directive pos:start="1179:2" pos:end="1179:3">if</cpp:directive> <expr pos:start="1179:5" pos:end="1179:30"><name pos:start="1179:5" pos:end="1179:30">TCG_TARGET_HAS_bswap32_i64</name></expr></cpp:if>

        <case pos:start="1181:9" pos:end="1181:34">case <expr pos:start="1181:14" pos:end="1181:33"><name pos:start="1181:14" pos:end="1181:33">INDEX_op_bswap32_i64</name></expr>:</case>

            <expr_stmt pos:start="1183:13" pos:end="1183:27"><expr pos:start="1183:13" pos:end="1183:26"><name pos:start="1183:13" pos:end="1183:14">t0</name> <operator pos:start="1183:16" pos:end="1183:16">=</operator> <operator pos:start="1183:18" pos:end="1183:18">*</operator><name pos:start="1183:19" pos:end="1183:24">tb_ptr</name><operator pos:start="1183:25" pos:end="1183:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1185:13" pos:end="1185:39"><expr pos:start="1185:13" pos:end="1185:38"><name pos:start="1185:13" pos:end="1185:14">t1</name> <operator pos:start="1185:16" pos:end="1185:16">=</operator> <call pos:start="1185:18" pos:end="1185:38"><name pos:start="1185:18" pos:end="1185:29">tci_read_r32</name><argument_list pos:start="1185:30" pos:end="1185:38">(<argument pos:start="1185:31" pos:end="1185:37"><expr pos:start="1185:31" pos:end="1185:37"><operator pos:start="1185:31" pos:end="1185:31">&amp;</operator><name pos:start="1185:32" pos:end="1185:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1187:13" pos:end="1187:45"><expr pos:start="1187:13" pos:end="1187:44"><call pos:start="1187:13" pos:end="1187:44"><name pos:start="1187:13" pos:end="1187:27">tci_write_reg64</name><argument_list pos:start="1187:28" pos:end="1187:44">(<argument pos:start="1187:29" pos:end="1187:30"><expr pos:start="1187:29" pos:end="1187:30"><name pos:start="1187:29" pos:end="1187:30">t0</name></expr></argument>, <argument pos:start="1187:33" pos:end="1187:43"><expr pos:start="1187:33" pos:end="1187:43"><call pos:start="1187:33" pos:end="1187:43"><name pos:start="1187:33" pos:end="1187:39">bswap32</name><argument_list pos:start="1187:40" pos:end="1187:43">(<argument pos:start="1187:41" pos:end="1187:42"><expr pos:start="1187:41" pos:end="1187:42"><name pos:start="1187:41" pos:end="1187:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1189:13" pos:end="1194:0">break;</break>

<cpp:endif pos:start="1191:1" pos:end="1191:6">#<cpp:directive pos:start="1191:2" pos:end="1191:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1193:1" pos:end="1193:30">#<cpp:directive pos:start="1193:2" pos:end="1193:3">if</cpp:directive> <expr pos:start="1193:5" pos:end="1193:30"><name pos:start="1193:5" pos:end="1193:30">TCG_TARGET_HAS_bswap64_i64</name></expr></cpp:if>

        <case pos:start="1195:9" pos:end="1195:34">case <expr pos:start="1195:14" pos:end="1195:33"><name pos:start="1195:14" pos:end="1195:33">INDEX_op_bswap64_i64</name></expr>:</case>

            <expr_stmt pos:start="1197:13" pos:end="1197:27"><expr pos:start="1197:13" pos:end="1197:26"><name pos:start="1197:13" pos:end="1197:14">t0</name> <operator pos:start="1197:16" pos:end="1197:16">=</operator> <operator pos:start="1197:18" pos:end="1197:18">*</operator><name pos:start="1197:19" pos:end="1197:24">tb_ptr</name><operator pos:start="1197:25" pos:end="1197:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1199:13" pos:end="1199:39"><expr pos:start="1199:13" pos:end="1199:38"><name pos:start="1199:13" pos:end="1199:14">t1</name> <operator pos:start="1199:16" pos:end="1199:16">=</operator> <call pos:start="1199:18" pos:end="1199:38"><name pos:start="1199:18" pos:end="1199:29">tci_read_r64</name><argument_list pos:start="1199:30" pos:end="1199:38">(<argument pos:start="1199:31" pos:end="1199:37"><expr pos:start="1199:31" pos:end="1199:37"><operator pos:start="1199:31" pos:end="1199:31">&amp;</operator><name pos:start="1199:32" pos:end="1199:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1201:13" pos:end="1201:45"><expr pos:start="1201:13" pos:end="1201:44"><call pos:start="1201:13" pos:end="1201:44"><name pos:start="1201:13" pos:end="1201:27">tci_write_reg64</name><argument_list pos:start="1201:28" pos:end="1201:44">(<argument pos:start="1201:29" pos:end="1201:30"><expr pos:start="1201:29" pos:end="1201:30"><name pos:start="1201:29" pos:end="1201:30">t0</name></expr></argument>, <argument pos:start="1201:33" pos:end="1201:43"><expr pos:start="1201:33" pos:end="1201:43"><call pos:start="1201:33" pos:end="1201:43"><name pos:start="1201:33" pos:end="1201:39">bswap64</name><argument_list pos:start="1201:40" pos:end="1201:43">(<argument pos:start="1201:41" pos:end="1201:42"><expr pos:start="1201:41" pos:end="1201:42"><name pos:start="1201:41" pos:end="1201:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1203:13" pos:end="1208:0">break;</break>

<cpp:endif pos:start="1205:1" pos:end="1205:6">#<cpp:directive pos:start="1205:2" pos:end="1205:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1207:1" pos:end="1207:26">#<cpp:directive pos:start="1207:2" pos:end="1207:3">if</cpp:directive> <expr pos:start="1207:5" pos:end="1207:26"><name pos:start="1207:5" pos:end="1207:26">TCG_TARGET_HAS_not_i64</name></expr></cpp:if>

        <case pos:start="1209:9" pos:end="1209:30">case <expr pos:start="1209:14" pos:end="1209:29"><name pos:start="1209:14" pos:end="1209:29">INDEX_op_not_i64</name></expr>:</case>

            <expr_stmt pos:start="1211:13" pos:end="1211:27"><expr pos:start="1211:13" pos:end="1211:26"><name pos:start="1211:13" pos:end="1211:14">t0</name> <operator pos:start="1211:16" pos:end="1211:16">=</operator> <operator pos:start="1211:18" pos:end="1211:18">*</operator><name pos:start="1211:19" pos:end="1211:24">tb_ptr</name><operator pos:start="1211:25" pos:end="1211:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1213:13" pos:end="1213:39"><expr pos:start="1213:13" pos:end="1213:38"><name pos:start="1213:13" pos:end="1213:14">t1</name> <operator pos:start="1213:16" pos:end="1213:16">=</operator> <call pos:start="1213:18" pos:end="1213:38"><name pos:start="1213:18" pos:end="1213:29">tci_read_r64</name><argument_list pos:start="1213:30" pos:end="1213:38">(<argument pos:start="1213:31" pos:end="1213:37"><expr pos:start="1213:31" pos:end="1213:37"><operator pos:start="1213:31" pos:end="1213:31">&amp;</operator><name pos:start="1213:32" pos:end="1213:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1215:13" pos:end="1215:37"><expr pos:start="1215:13" pos:end="1215:36"><call pos:start="1215:13" pos:end="1215:36"><name pos:start="1215:13" pos:end="1215:27">tci_write_reg64</name><argument_list pos:start="1215:28" pos:end="1215:36">(<argument pos:start="1215:29" pos:end="1215:30"><expr pos:start="1215:29" pos:end="1215:30"><name pos:start="1215:29" pos:end="1215:30">t0</name></expr></argument>, <argument pos:start="1215:33" pos:end="1215:35"><expr pos:start="1215:33" pos:end="1215:35"><operator pos:start="1215:33" pos:end="1215:33">~</operator><name pos:start="1215:34" pos:end="1215:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1217:13" pos:end="1222:0">break;</break>

<cpp:endif pos:start="1219:1" pos:end="1219:6">#<cpp:directive pos:start="1219:2" pos:end="1219:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1221:1" pos:end="1221:26">#<cpp:directive pos:start="1221:2" pos:end="1221:3">if</cpp:directive> <expr pos:start="1221:5" pos:end="1221:26"><name pos:start="1221:5" pos:end="1221:26">TCG_TARGET_HAS_neg_i64</name></expr></cpp:if>

        <case pos:start="1223:9" pos:end="1223:30">case <expr pos:start="1223:14" pos:end="1223:29"><name pos:start="1223:14" pos:end="1223:29">INDEX_op_neg_i64</name></expr>:</case>

            <expr_stmt pos:start="1225:13" pos:end="1225:27"><expr pos:start="1225:13" pos:end="1225:26"><name pos:start="1225:13" pos:end="1225:14">t0</name> <operator pos:start="1225:16" pos:end="1225:16">=</operator> <operator pos:start="1225:18" pos:end="1225:18">*</operator><name pos:start="1225:19" pos:end="1225:24">tb_ptr</name><operator pos:start="1225:25" pos:end="1225:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1227:13" pos:end="1227:39"><expr pos:start="1227:13" pos:end="1227:38"><name pos:start="1227:13" pos:end="1227:14">t1</name> <operator pos:start="1227:16" pos:end="1227:16">=</operator> <call pos:start="1227:18" pos:end="1227:38"><name pos:start="1227:18" pos:end="1227:29">tci_read_r64</name><argument_list pos:start="1227:30" pos:end="1227:38">(<argument pos:start="1227:31" pos:end="1227:37"><expr pos:start="1227:31" pos:end="1227:37"><operator pos:start="1227:31" pos:end="1227:31">&amp;</operator><name pos:start="1227:32" pos:end="1227:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1229:13" pos:end="1229:37"><expr pos:start="1229:13" pos:end="1229:36"><call pos:start="1229:13" pos:end="1229:36"><name pos:start="1229:13" pos:end="1229:27">tci_write_reg64</name><argument_list pos:start="1229:28" pos:end="1229:36">(<argument pos:start="1229:29" pos:end="1229:30"><expr pos:start="1229:29" pos:end="1229:30"><name pos:start="1229:29" pos:end="1229:30">t0</name></expr></argument>, <argument pos:start="1229:33" pos:end="1229:35"><expr pos:start="1229:33" pos:end="1229:35"><operator pos:start="1229:33" pos:end="1229:33">-</operator><name pos:start="1229:34" pos:end="1229:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1231:13" pos:end="1244:0">break;</break>

<cpp:endif pos:start="1233:1" pos:end="1233:6">#<cpp:directive pos:start="1233:2" pos:end="1233:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="1235:1" pos:end="1235:6">#<cpp:directive pos:start="1235:2" pos:end="1235:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1235:8" pos:end="1235:38">/* TCG_TARGET_REG_BITS == 64 */</comment>



            <comment type="block" pos:start="1239:13" pos:end="1239:43">/* QEMU specific operations. */</comment>



<cpp:if pos:start="1243:1" pos:end="1243:42">#<cpp:directive pos:start="1243:2" pos:end="1243:3">if</cpp:directive> <expr pos:start="1243:5" pos:end="1243:42"><name pos:start="1243:5" pos:end="1243:20">TARGET_LONG_BITS</name> <operator pos:start="1243:22" pos:end="1243:22">&gt;</operator> <name pos:start="1243:24" pos:end="1243:42">TCG_TARGET_REG_BITS</name></expr></cpp:if>

        <case pos:start="1245:9" pos:end="1245:39">case <expr pos:start="1245:14" pos:end="1245:38"><name pos:start="1245:14" pos:end="1245:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <expr_stmt pos:start="1247:13" pos:end="1247:19"><expr pos:start="1247:13" pos:end="1247:18"><call pos:start="1247:13" pos:end="1247:18"><name pos:start="1247:13" pos:end="1247:16">TODO</name><argument_list pos:start="1247:17" pos:end="1247:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1249:13" pos:end="1252:0">break;</break>

<cpp:else pos:start="1251:1" pos:end="1251:5">#<cpp:directive pos:start="1251:2" pos:end="1251:5">else</cpp:directive></cpp:else>

        <case pos:start="1253:9" pos:end="1253:39">case <expr pos:start="1253:14" pos:end="1253:38"><name pos:start="1253:14" pos:end="1253:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <expr_stmt pos:start="1255:13" pos:end="1255:19"><expr pos:start="1255:13" pos:end="1255:18"><call pos:start="1255:13" pos:end="1255:18"><name pos:start="1255:13" pos:end="1255:16">TODO</name><argument_list pos:start="1255:17" pos:end="1255:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1257:13" pos:end="1260:0">break;</break>

<cpp:endif pos:start="1259:1" pos:end="1259:6">#<cpp:directive pos:start="1259:2" pos:end="1259:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1261:9" pos:end="1261:30">case <expr pos:start="1261:14" pos:end="1261:29"><name pos:start="1261:14" pos:end="1261:29">INDEX_op_exit_tb</name></expr>:</case>

            <expr_stmt pos:start="1263:13" pos:end="1263:42"><expr pos:start="1263:13" pos:end="1263:41"><name pos:start="1263:13" pos:end="1263:19">next_tb</name> <operator pos:start="1263:21" pos:end="1263:21">=</operator> <operator pos:start="1263:23" pos:end="1263:23">*</operator><operator pos:start="1263:24" pos:end="1263:24">(</operator><name pos:start="1263:25" pos:end="1263:32">uint64_t</name> <operator pos:start="1263:34" pos:end="1263:34">*</operator><operator pos:start="1263:35" pos:end="1263:35">)</operator><name pos:start="1263:36" pos:end="1263:41">tb_ptr</name></expr>;</expr_stmt>

            <goto pos:start="1265:13" pos:end="1265:22">goto <name pos:start="1265:18" pos:end="1265:21">exit</name>;</goto>

            <break pos:start="1267:13" pos:end="1267:18">break;</break>

        <case pos:start="1269:9" pos:end="1269:30">case <expr pos:start="1269:14" pos:end="1269:29"><name pos:start="1269:14" pos:end="1269:29">INDEX_op_goto_tb</name></expr>:</case>

            <expr_stmt pos:start="1271:13" pos:end="1271:39"><expr pos:start="1271:13" pos:end="1271:38"><name pos:start="1271:13" pos:end="1271:14">t0</name> <operator pos:start="1271:16" pos:end="1271:16">=</operator> <call pos:start="1271:18" pos:end="1271:38"><name pos:start="1271:18" pos:end="1271:29">tci_read_i32</name><argument_list pos:start="1271:30" pos:end="1271:38">(<argument pos:start="1271:31" pos:end="1271:37"><expr pos:start="1271:31" pos:end="1271:37"><operator pos:start="1271:31" pos:end="1271:31">&amp;</operator><name pos:start="1271:32" pos:end="1271:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1273:13" pos:end="1273:53"><expr pos:start="1273:13" pos:end="1273:52"><call pos:start="1273:13" pos:end="1273:52"><name pos:start="1273:13" pos:end="1273:18">assert</name><argument_list pos:start="1273:19" pos:end="1273:52">(<argument pos:start="1273:20" pos:end="1273:51"><expr pos:start="1273:20" pos:end="1273:51"><name pos:start="1273:20" pos:end="1273:25">tb_ptr</name> <operator pos:start="1273:27" pos:end="1273:28">==</operator> <name pos:start="1273:30" pos:end="1273:41">old_code_ptr</name> <operator pos:start="1273:43" pos:end="1273:43">+</operator> <name pos:start="1273:45" pos:end="1273:51">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1275:13" pos:end="1275:34"><expr pos:start="1275:13" pos:end="1275:33"><name pos:start="1275:13" pos:end="1275:18">tb_ptr</name> <operator pos:start="1275:20" pos:end="1275:21">+=</operator> <operator pos:start="1275:23" pos:end="1275:23">(</operator><name pos:start="1275:24" pos:end="1275:30">int32_t</name><operator pos:start="1275:31" pos:end="1275:31">)</operator><name pos:start="1275:32" pos:end="1275:33">t0</name></expr>;</expr_stmt>

            <continue pos:start="1277:13" pos:end="1277:21">continue;</continue>

        <case pos:start="1279:9" pos:end="1279:32">case <expr pos:start="1279:14" pos:end="1279:31"><name pos:start="1279:14" pos:end="1279:31">INDEX_op_qemu_ld8u</name></expr>:</case>

            <expr_stmt pos:start="1281:13" pos:end="1281:27"><expr pos:start="1281:13" pos:end="1281:26"><name pos:start="1281:13" pos:end="1281:14">t0</name> <operator pos:start="1281:16" pos:end="1281:16">=</operator> <operator pos:start="1281:18" pos:end="1281:18">*</operator><name pos:start="1281:19" pos:end="1281:24">tb_ptr</name><operator pos:start="1281:25" pos:end="1281:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1283:13" pos:end="1286:0"><expr pos:start="1283:13" pos:end="1283:43"><name pos:start="1283:13" pos:end="1283:17">taddr</name> <operator pos:start="1283:19" pos:end="1283:19">=</operator> <call pos:start="1283:21" pos:end="1283:43"><name pos:start="1283:21" pos:end="1283:34">tci_read_ulong</name><argument_list pos:start="1283:35" pos:end="1283:43">(<argument pos:start="1283:36" pos:end="1283:42"><expr pos:start="1283:36" pos:end="1283:42"><operator pos:start="1283:36" pos:end="1283:36">&amp;</operator><name pos:start="1283:37" pos:end="1283:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1285:1" pos:end="1285:21">#<cpp:directive pos:start="1285:2" pos:end="1285:6">ifdef</cpp:directive> <name pos:start="1285:8" pos:end="1285:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1287:13" pos:end="1290:0"><expr pos:start="1287:13" pos:end="1287:66"><name pos:start="1287:13" pos:end="1287:16">tmp8</name> <operator pos:start="1287:18" pos:end="1287:18">=</operator> <call pos:start="1287:20" pos:end="1287:66"><name pos:start="1287:20" pos:end="1287:33">helper_ldb_mmu</name><argument_list pos:start="1287:34" pos:end="1287:66">(<argument pos:start="1287:35" pos:end="1287:37"><expr pos:start="1287:35" pos:end="1287:37"><name pos:start="1287:35" pos:end="1287:37">env</name></expr></argument>, <argument pos:start="1287:40" pos:end="1287:44"><expr pos:start="1287:40" pos:end="1287:44"><name pos:start="1287:40" pos:end="1287:44">taddr</name></expr></argument>, <argument pos:start="1287:47" pos:end="1287:65"><expr pos:start="1287:47" pos:end="1287:65"><call pos:start="1287:47" pos:end="1287:65"><name pos:start="1287:47" pos:end="1287:56">tci_read_i</name><argument_list pos:start="1287:57" pos:end="1287:65">(<argument pos:start="1287:58" pos:end="1287:64"><expr pos:start="1287:58" pos:end="1287:64"><operator pos:start="1287:58" pos:end="1287:58">&amp;</operator><name pos:start="1287:59" pos:end="1287:64">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1289:1" pos:end="1289:5">#<cpp:directive pos:start="1289:2" pos:end="1289:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1291:13" pos:end="1291:48"><expr pos:start="1291:13" pos:end="1291:47"><name pos:start="1291:13" pos:end="1291:21">host_addr</name> <operator pos:start="1291:23" pos:end="1291:23">=</operator> <operator pos:start="1291:25" pos:end="1291:25">(</operator><name pos:start="1291:26" pos:end="1291:41">tcg_target_ulong</name><operator pos:start="1291:42" pos:end="1291:42">)</operator><name pos:start="1291:43" pos:end="1291:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1293:13" pos:end="1293:39"><expr pos:start="1293:13" pos:end="1293:38"><call pos:start="1293:13" pos:end="1293:38"><name pos:start="1293:13" pos:end="1293:18">assert</name><argument_list pos:start="1293:19" pos:end="1293:38">(<argument pos:start="1293:20" pos:end="1293:37"><expr pos:start="1293:20" pos:end="1293:37"><name pos:start="1293:20" pos:end="1293:24">taddr</name> <operator pos:start="1293:26" pos:end="1293:27">==</operator> <name pos:start="1293:29" pos:end="1293:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1295:13" pos:end="1298:0"><expr pos:start="1295:13" pos:end="1295:55"><name pos:start="1295:13" pos:end="1295:16">tmp8</name> <operator pos:start="1295:18" pos:end="1295:18">=</operator> <operator pos:start="1295:20" pos:end="1295:20">*</operator><operator pos:start="1295:21" pos:end="1295:21">(</operator><name pos:start="1295:22" pos:end="1295:28">uint8_t</name> <operator pos:start="1295:30" pos:end="1295:30">*</operator><operator pos:start="1295:31" pos:end="1295:31">)</operator><operator pos:start="1295:32" pos:end="1295:32">(</operator><name pos:start="1295:33" pos:end="1295:41">host_addr</name> <operator pos:start="1295:43" pos:end="1295:43">+</operator> <name pos:start="1295:45" pos:end="1295:54">GUEST_BASE</name><operator pos:start="1295:55" pos:end="1295:55">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1297:1" pos:end="1297:6">#<cpp:directive pos:start="1297:2" pos:end="1297:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1299:13" pos:end="1299:37"><expr pos:start="1299:13" pos:end="1299:36"><call pos:start="1299:13" pos:end="1299:36"><name pos:start="1299:13" pos:end="1299:26">tci_write_reg8</name><argument_list pos:start="1299:27" pos:end="1299:36">(<argument pos:start="1299:28" pos:end="1299:29"><expr pos:start="1299:28" pos:end="1299:29"><name pos:start="1299:28" pos:end="1299:29">t0</name></expr></argument>, <argument pos:start="1299:32" pos:end="1299:35"><expr pos:start="1299:32" pos:end="1299:35"><name pos:start="1299:32" pos:end="1299:35">tmp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1301:13" pos:end="1301:18">break;</break>

        <case pos:start="1303:9" pos:end="1303:32">case <expr pos:start="1303:14" pos:end="1303:31"><name pos:start="1303:14" pos:end="1303:31">INDEX_op_qemu_ld8s</name></expr>:</case>

            <expr_stmt pos:start="1305:13" pos:end="1305:27"><expr pos:start="1305:13" pos:end="1305:26"><name pos:start="1305:13" pos:end="1305:14">t0</name> <operator pos:start="1305:16" pos:end="1305:16">=</operator> <operator pos:start="1305:18" pos:end="1305:18">*</operator><name pos:start="1305:19" pos:end="1305:24">tb_ptr</name><operator pos:start="1305:25" pos:end="1305:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1307:13" pos:end="1310:0"><expr pos:start="1307:13" pos:end="1307:43"><name pos:start="1307:13" pos:end="1307:17">taddr</name> <operator pos:start="1307:19" pos:end="1307:19">=</operator> <call pos:start="1307:21" pos:end="1307:43"><name pos:start="1307:21" pos:end="1307:34">tci_read_ulong</name><argument_list pos:start="1307:35" pos:end="1307:43">(<argument pos:start="1307:36" pos:end="1307:42"><expr pos:start="1307:36" pos:end="1307:42"><operator pos:start="1307:36" pos:end="1307:36">&amp;</operator><name pos:start="1307:37" pos:end="1307:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1309:1" pos:end="1309:21">#<cpp:directive pos:start="1309:2" pos:end="1309:6">ifdef</cpp:directive> <name pos:start="1309:8" pos:end="1309:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1311:13" pos:end="1314:0"><expr pos:start="1311:13" pos:end="1311:66"><name pos:start="1311:13" pos:end="1311:16">tmp8</name> <operator pos:start="1311:18" pos:end="1311:18">=</operator> <call pos:start="1311:20" pos:end="1311:66"><name pos:start="1311:20" pos:end="1311:33">helper_ldb_mmu</name><argument_list pos:start="1311:34" pos:end="1311:66">(<argument pos:start="1311:35" pos:end="1311:37"><expr pos:start="1311:35" pos:end="1311:37"><name pos:start="1311:35" pos:end="1311:37">env</name></expr></argument>, <argument pos:start="1311:40" pos:end="1311:44"><expr pos:start="1311:40" pos:end="1311:44"><name pos:start="1311:40" pos:end="1311:44">taddr</name></expr></argument>, <argument pos:start="1311:47" pos:end="1311:65"><expr pos:start="1311:47" pos:end="1311:65"><call pos:start="1311:47" pos:end="1311:65"><name pos:start="1311:47" pos:end="1311:56">tci_read_i</name><argument_list pos:start="1311:57" pos:end="1311:65">(<argument pos:start="1311:58" pos:end="1311:64"><expr pos:start="1311:58" pos:end="1311:64"><operator pos:start="1311:58" pos:end="1311:58">&amp;</operator><name pos:start="1311:59" pos:end="1311:64">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1313:1" pos:end="1313:5">#<cpp:directive pos:start="1313:2" pos:end="1313:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1315:13" pos:end="1315:48"><expr pos:start="1315:13" pos:end="1315:47"><name pos:start="1315:13" pos:end="1315:21">host_addr</name> <operator pos:start="1315:23" pos:end="1315:23">=</operator> <operator pos:start="1315:25" pos:end="1315:25">(</operator><name pos:start="1315:26" pos:end="1315:41">tcg_target_ulong</name><operator pos:start="1315:42" pos:end="1315:42">)</operator><name pos:start="1315:43" pos:end="1315:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1317:39"><expr pos:start="1317:13" pos:end="1317:38"><call pos:start="1317:13" pos:end="1317:38"><name pos:start="1317:13" pos:end="1317:18">assert</name><argument_list pos:start="1317:19" pos:end="1317:38">(<argument pos:start="1317:20" pos:end="1317:37"><expr pos:start="1317:20" pos:end="1317:37"><name pos:start="1317:20" pos:end="1317:24">taddr</name> <operator pos:start="1317:26" pos:end="1317:27">==</operator> <name pos:start="1317:29" pos:end="1317:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1319:13" pos:end="1322:0"><expr pos:start="1319:13" pos:end="1319:55"><name pos:start="1319:13" pos:end="1319:16">tmp8</name> <operator pos:start="1319:18" pos:end="1319:18">=</operator> <operator pos:start="1319:20" pos:end="1319:20">*</operator><operator pos:start="1319:21" pos:end="1319:21">(</operator><name pos:start="1319:22" pos:end="1319:28">uint8_t</name> <operator pos:start="1319:30" pos:end="1319:30">*</operator><operator pos:start="1319:31" pos:end="1319:31">)</operator><operator pos:start="1319:32" pos:end="1319:32">(</operator><name pos:start="1319:33" pos:end="1319:41">host_addr</name> <operator pos:start="1319:43" pos:end="1319:43">+</operator> <name pos:start="1319:45" pos:end="1319:54">GUEST_BASE</name><operator pos:start="1319:55" pos:end="1319:55">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1321:1" pos:end="1321:6">#<cpp:directive pos:start="1321:2" pos:end="1321:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1323:13" pos:end="1323:38"><expr pos:start="1323:13" pos:end="1323:37"><call pos:start="1323:13" pos:end="1323:37"><name pos:start="1323:13" pos:end="1323:27">tci_write_reg8s</name><argument_list pos:start="1323:28" pos:end="1323:37">(<argument pos:start="1323:29" pos:end="1323:30"><expr pos:start="1323:29" pos:end="1323:30"><name pos:start="1323:29" pos:end="1323:30">t0</name></expr></argument>, <argument pos:start="1323:33" pos:end="1323:36"><expr pos:start="1323:33" pos:end="1323:36"><name pos:start="1323:33" pos:end="1323:36">tmp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1325:13" pos:end="1325:18">break;</break>

        <case pos:start="1327:9" pos:end="1327:33">case <expr pos:start="1327:14" pos:end="1327:32"><name pos:start="1327:14" pos:end="1327:32">INDEX_op_qemu_ld16u</name></expr>:</case>

            <expr_stmt pos:start="1329:13" pos:end="1329:27"><expr pos:start="1329:13" pos:end="1329:26"><name pos:start="1329:13" pos:end="1329:14">t0</name> <operator pos:start="1329:16" pos:end="1329:16">=</operator> <operator pos:start="1329:18" pos:end="1329:18">*</operator><name pos:start="1329:19" pos:end="1329:24">tb_ptr</name><operator pos:start="1329:25" pos:end="1329:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1331:13" pos:end="1334:0"><expr pos:start="1331:13" pos:end="1331:43"><name pos:start="1331:13" pos:end="1331:17">taddr</name> <operator pos:start="1331:19" pos:end="1331:19">=</operator> <call pos:start="1331:21" pos:end="1331:43"><name pos:start="1331:21" pos:end="1331:34">tci_read_ulong</name><argument_list pos:start="1331:35" pos:end="1331:43">(<argument pos:start="1331:36" pos:end="1331:42"><expr pos:start="1331:36" pos:end="1331:42"><operator pos:start="1331:36" pos:end="1331:36">&amp;</operator><name pos:start="1331:37" pos:end="1331:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1333:1" pos:end="1333:21">#<cpp:directive pos:start="1333:2" pos:end="1333:6">ifdef</cpp:directive> <name pos:start="1333:8" pos:end="1333:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1335:13" pos:end="1338:0"><expr pos:start="1335:13" pos:end="1335:67"><name pos:start="1335:13" pos:end="1335:17">tmp16</name> <operator pos:start="1335:19" pos:end="1335:19">=</operator> <call pos:start="1335:21" pos:end="1335:67"><name pos:start="1335:21" pos:end="1335:34">helper_ldw_mmu</name><argument_list pos:start="1335:35" pos:end="1335:67">(<argument pos:start="1335:36" pos:end="1335:38"><expr pos:start="1335:36" pos:end="1335:38"><name pos:start="1335:36" pos:end="1335:38">env</name></expr></argument>, <argument pos:start="1335:41" pos:end="1335:45"><expr pos:start="1335:41" pos:end="1335:45"><name pos:start="1335:41" pos:end="1335:45">taddr</name></expr></argument>, <argument pos:start="1335:48" pos:end="1335:66"><expr pos:start="1335:48" pos:end="1335:66"><call pos:start="1335:48" pos:end="1335:66"><name pos:start="1335:48" pos:end="1335:57">tci_read_i</name><argument_list pos:start="1335:58" pos:end="1335:66">(<argument pos:start="1335:59" pos:end="1335:65"><expr pos:start="1335:59" pos:end="1335:65"><operator pos:start="1335:59" pos:end="1335:59">&amp;</operator><name pos:start="1335:60" pos:end="1335:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1337:1" pos:end="1337:5">#<cpp:directive pos:start="1337:2" pos:end="1337:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1339:13" pos:end="1339:48"><expr pos:start="1339:13" pos:end="1339:47"><name pos:start="1339:13" pos:end="1339:21">host_addr</name> <operator pos:start="1339:23" pos:end="1339:23">=</operator> <operator pos:start="1339:25" pos:end="1339:25">(</operator><name pos:start="1339:26" pos:end="1339:41">tcg_target_ulong</name><operator pos:start="1339:42" pos:end="1339:42">)</operator><name pos:start="1339:43" pos:end="1339:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1341:39"><expr pos:start="1341:13" pos:end="1341:38"><call pos:start="1341:13" pos:end="1341:38"><name pos:start="1341:13" pos:end="1341:18">assert</name><argument_list pos:start="1341:19" pos:end="1341:38">(<argument pos:start="1341:20" pos:end="1341:37"><expr pos:start="1341:20" pos:end="1341:37"><name pos:start="1341:20" pos:end="1341:24">taddr</name> <operator pos:start="1341:26" pos:end="1341:27">==</operator> <name pos:start="1341:29" pos:end="1341:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1343:13" pos:end="1346:0"><expr pos:start="1343:13" pos:end="1343:66"><name pos:start="1343:13" pos:end="1343:17">tmp16</name> <operator pos:start="1343:19" pos:end="1343:19">=</operator> <call pos:start="1343:21" pos:end="1343:66"><name pos:start="1343:21" pos:end="1343:27">tswap16</name><argument_list pos:start="1343:28" pos:end="1343:66">(<argument pos:start="1343:29" pos:end="1343:65"><expr pos:start="1343:29" pos:end="1343:65"><operator pos:start="1343:29" pos:end="1343:29">*</operator><operator pos:start="1343:30" pos:end="1343:30">(</operator><name pos:start="1343:31" pos:end="1343:38">uint16_t</name> <operator pos:start="1343:40" pos:end="1343:40">*</operator><operator pos:start="1343:41" pos:end="1343:41">)</operator><operator pos:start="1343:42" pos:end="1343:42">(</operator><name pos:start="1343:43" pos:end="1343:51">host_addr</name> <operator pos:start="1343:53" pos:end="1343:53">+</operator> <name pos:start="1343:55" pos:end="1343:64">GUEST_BASE</name><operator pos:start="1343:65" pos:end="1343:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1345:1" pos:end="1345:6">#<cpp:directive pos:start="1345:2" pos:end="1345:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1347:13" pos:end="1347:39"><expr pos:start="1347:13" pos:end="1347:38"><call pos:start="1347:13" pos:end="1347:38"><name pos:start="1347:13" pos:end="1347:27">tci_write_reg16</name><argument_list pos:start="1347:28" pos:end="1347:38">(<argument pos:start="1347:29" pos:end="1347:30"><expr pos:start="1347:29" pos:end="1347:30"><name pos:start="1347:29" pos:end="1347:30">t0</name></expr></argument>, <argument pos:start="1347:33" pos:end="1347:37"><expr pos:start="1347:33" pos:end="1347:37"><name pos:start="1347:33" pos:end="1347:37">tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1349:13" pos:end="1349:18">break;</break>

        <case pos:start="1351:9" pos:end="1351:33">case <expr pos:start="1351:14" pos:end="1351:32"><name pos:start="1351:14" pos:end="1351:32">INDEX_op_qemu_ld16s</name></expr>:</case>

            <expr_stmt pos:start="1353:13" pos:end="1353:27"><expr pos:start="1353:13" pos:end="1353:26"><name pos:start="1353:13" pos:end="1353:14">t0</name> <operator pos:start="1353:16" pos:end="1353:16">=</operator> <operator pos:start="1353:18" pos:end="1353:18">*</operator><name pos:start="1353:19" pos:end="1353:24">tb_ptr</name><operator pos:start="1353:25" pos:end="1353:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1355:13" pos:end="1358:0"><expr pos:start="1355:13" pos:end="1355:43"><name pos:start="1355:13" pos:end="1355:17">taddr</name> <operator pos:start="1355:19" pos:end="1355:19">=</operator> <call pos:start="1355:21" pos:end="1355:43"><name pos:start="1355:21" pos:end="1355:34">tci_read_ulong</name><argument_list pos:start="1355:35" pos:end="1355:43">(<argument pos:start="1355:36" pos:end="1355:42"><expr pos:start="1355:36" pos:end="1355:42"><operator pos:start="1355:36" pos:end="1355:36">&amp;</operator><name pos:start="1355:37" pos:end="1355:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1357:1" pos:end="1357:21">#<cpp:directive pos:start="1357:2" pos:end="1357:6">ifdef</cpp:directive> <name pos:start="1357:8" pos:end="1357:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1359:13" pos:end="1362:0"><expr pos:start="1359:13" pos:end="1359:67"><name pos:start="1359:13" pos:end="1359:17">tmp16</name> <operator pos:start="1359:19" pos:end="1359:19">=</operator> <call pos:start="1359:21" pos:end="1359:67"><name pos:start="1359:21" pos:end="1359:34">helper_ldw_mmu</name><argument_list pos:start="1359:35" pos:end="1359:67">(<argument pos:start="1359:36" pos:end="1359:38"><expr pos:start="1359:36" pos:end="1359:38"><name pos:start="1359:36" pos:end="1359:38">env</name></expr></argument>, <argument pos:start="1359:41" pos:end="1359:45"><expr pos:start="1359:41" pos:end="1359:45"><name pos:start="1359:41" pos:end="1359:45">taddr</name></expr></argument>, <argument pos:start="1359:48" pos:end="1359:66"><expr pos:start="1359:48" pos:end="1359:66"><call pos:start="1359:48" pos:end="1359:66"><name pos:start="1359:48" pos:end="1359:57">tci_read_i</name><argument_list pos:start="1359:58" pos:end="1359:66">(<argument pos:start="1359:59" pos:end="1359:65"><expr pos:start="1359:59" pos:end="1359:65"><operator pos:start="1359:59" pos:end="1359:59">&amp;</operator><name pos:start="1359:60" pos:end="1359:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1361:1" pos:end="1361:5">#<cpp:directive pos:start="1361:2" pos:end="1361:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1363:13" pos:end="1363:48"><expr pos:start="1363:13" pos:end="1363:47"><name pos:start="1363:13" pos:end="1363:21">host_addr</name> <operator pos:start="1363:23" pos:end="1363:23">=</operator> <operator pos:start="1363:25" pos:end="1363:25">(</operator><name pos:start="1363:26" pos:end="1363:41">tcg_target_ulong</name><operator pos:start="1363:42" pos:end="1363:42">)</operator><name pos:start="1363:43" pos:end="1363:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1365:13" pos:end="1365:39"><expr pos:start="1365:13" pos:end="1365:38"><call pos:start="1365:13" pos:end="1365:38"><name pos:start="1365:13" pos:end="1365:18">assert</name><argument_list pos:start="1365:19" pos:end="1365:38">(<argument pos:start="1365:20" pos:end="1365:37"><expr pos:start="1365:20" pos:end="1365:37"><name pos:start="1365:20" pos:end="1365:24">taddr</name> <operator pos:start="1365:26" pos:end="1365:27">==</operator> <name pos:start="1365:29" pos:end="1365:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1367:13" pos:end="1370:0"><expr pos:start="1367:13" pos:end="1367:66"><name pos:start="1367:13" pos:end="1367:17">tmp16</name> <operator pos:start="1367:19" pos:end="1367:19">=</operator> <call pos:start="1367:21" pos:end="1367:66"><name pos:start="1367:21" pos:end="1367:27">tswap16</name><argument_list pos:start="1367:28" pos:end="1367:66">(<argument pos:start="1367:29" pos:end="1367:65"><expr pos:start="1367:29" pos:end="1367:65"><operator pos:start="1367:29" pos:end="1367:29">*</operator><operator pos:start="1367:30" pos:end="1367:30">(</operator><name pos:start="1367:31" pos:end="1367:38">uint16_t</name> <operator pos:start="1367:40" pos:end="1367:40">*</operator><operator pos:start="1367:41" pos:end="1367:41">)</operator><operator pos:start="1367:42" pos:end="1367:42">(</operator><name pos:start="1367:43" pos:end="1367:51">host_addr</name> <operator pos:start="1367:53" pos:end="1367:53">+</operator> <name pos:start="1367:55" pos:end="1367:64">GUEST_BASE</name><operator pos:start="1367:65" pos:end="1367:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1369:1" pos:end="1369:6">#<cpp:directive pos:start="1369:2" pos:end="1369:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1371:13" pos:end="1371:40"><expr pos:start="1371:13" pos:end="1371:39"><call pos:start="1371:13" pos:end="1371:39"><name pos:start="1371:13" pos:end="1371:28">tci_write_reg16s</name><argument_list pos:start="1371:29" pos:end="1371:39">(<argument pos:start="1371:30" pos:end="1371:31"><expr pos:start="1371:30" pos:end="1371:31"><name pos:start="1371:30" pos:end="1371:31">t0</name></expr></argument>, <argument pos:start="1371:34" pos:end="1371:38"><expr pos:start="1371:34" pos:end="1371:38"><name pos:start="1371:34" pos:end="1371:38">tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1373:13" pos:end="1376:0">break;</break>

<cpp:if pos:start="1375:1" pos:end="1375:29">#<cpp:directive pos:start="1375:2" pos:end="1375:3">if</cpp:directive> <expr pos:start="1375:5" pos:end="1375:29"><name pos:start="1375:5" pos:end="1375:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1375:25" pos:end="1375:26">==</operator> <literal type="number" pos:start="1375:28" pos:end="1375:29">64</literal></expr></cpp:if>

        <case pos:start="1377:9" pos:end="1377:33">case <expr pos:start="1377:14" pos:end="1377:32"><name pos:start="1377:14" pos:end="1377:32">INDEX_op_qemu_ld32u</name></expr>:</case>

            <expr_stmt pos:start="1379:13" pos:end="1379:27"><expr pos:start="1379:13" pos:end="1379:26"><name pos:start="1379:13" pos:end="1379:14">t0</name> <operator pos:start="1379:16" pos:end="1379:16">=</operator> <operator pos:start="1379:18" pos:end="1379:18">*</operator><name pos:start="1379:19" pos:end="1379:24">tb_ptr</name><operator pos:start="1379:25" pos:end="1379:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1381:13" pos:end="1384:0"><expr pos:start="1381:13" pos:end="1381:43"><name pos:start="1381:13" pos:end="1381:17">taddr</name> <operator pos:start="1381:19" pos:end="1381:19">=</operator> <call pos:start="1381:21" pos:end="1381:43"><name pos:start="1381:21" pos:end="1381:34">tci_read_ulong</name><argument_list pos:start="1381:35" pos:end="1381:43">(<argument pos:start="1381:36" pos:end="1381:42"><expr pos:start="1381:36" pos:end="1381:42"><operator pos:start="1381:36" pos:end="1381:36">&amp;</operator><name pos:start="1381:37" pos:end="1381:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1383:1" pos:end="1383:21">#<cpp:directive pos:start="1383:2" pos:end="1383:6">ifdef</cpp:directive> <name pos:start="1383:8" pos:end="1383:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1385:13" pos:end="1388:0"><expr pos:start="1385:13" pos:end="1385:67"><name pos:start="1385:13" pos:end="1385:17">tmp32</name> <operator pos:start="1385:19" pos:end="1385:19">=</operator> <call pos:start="1385:21" pos:end="1385:67"><name pos:start="1385:21" pos:end="1385:34">helper_ldl_mmu</name><argument_list pos:start="1385:35" pos:end="1385:67">(<argument pos:start="1385:36" pos:end="1385:38"><expr pos:start="1385:36" pos:end="1385:38"><name pos:start="1385:36" pos:end="1385:38">env</name></expr></argument>, <argument pos:start="1385:41" pos:end="1385:45"><expr pos:start="1385:41" pos:end="1385:45"><name pos:start="1385:41" pos:end="1385:45">taddr</name></expr></argument>, <argument pos:start="1385:48" pos:end="1385:66"><expr pos:start="1385:48" pos:end="1385:66"><call pos:start="1385:48" pos:end="1385:66"><name pos:start="1385:48" pos:end="1385:57">tci_read_i</name><argument_list pos:start="1385:58" pos:end="1385:66">(<argument pos:start="1385:59" pos:end="1385:65"><expr pos:start="1385:59" pos:end="1385:65"><operator pos:start="1385:59" pos:end="1385:59">&amp;</operator><name pos:start="1385:60" pos:end="1385:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1387:1" pos:end="1387:5">#<cpp:directive pos:start="1387:2" pos:end="1387:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1389:13" pos:end="1389:48"><expr pos:start="1389:13" pos:end="1389:47"><name pos:start="1389:13" pos:end="1389:21">host_addr</name> <operator pos:start="1389:23" pos:end="1389:23">=</operator> <operator pos:start="1389:25" pos:end="1389:25">(</operator><name pos:start="1389:26" pos:end="1389:41">tcg_target_ulong</name><operator pos:start="1389:42" pos:end="1389:42">)</operator><name pos:start="1389:43" pos:end="1389:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1391:13" pos:end="1391:39"><expr pos:start="1391:13" pos:end="1391:38"><call pos:start="1391:13" pos:end="1391:38"><name pos:start="1391:13" pos:end="1391:18">assert</name><argument_list pos:start="1391:19" pos:end="1391:38">(<argument pos:start="1391:20" pos:end="1391:37"><expr pos:start="1391:20" pos:end="1391:37"><name pos:start="1391:20" pos:end="1391:24">taddr</name> <operator pos:start="1391:26" pos:end="1391:27">==</operator> <name pos:start="1391:29" pos:end="1391:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1393:13" pos:end="1396:0"><expr pos:start="1393:13" pos:end="1393:66"><name pos:start="1393:13" pos:end="1393:17">tmp32</name> <operator pos:start="1393:19" pos:end="1393:19">=</operator> <call pos:start="1393:21" pos:end="1393:66"><name pos:start="1393:21" pos:end="1393:27">tswap32</name><argument_list pos:start="1393:28" pos:end="1393:66">(<argument pos:start="1393:29" pos:end="1393:65"><expr pos:start="1393:29" pos:end="1393:65"><operator pos:start="1393:29" pos:end="1393:29">*</operator><operator pos:start="1393:30" pos:end="1393:30">(</operator><name pos:start="1393:31" pos:end="1393:38">uint32_t</name> <operator pos:start="1393:40" pos:end="1393:40">*</operator><operator pos:start="1393:41" pos:end="1393:41">)</operator><operator pos:start="1393:42" pos:end="1393:42">(</operator><name pos:start="1393:43" pos:end="1393:51">host_addr</name> <operator pos:start="1393:53" pos:end="1393:53">+</operator> <name pos:start="1393:55" pos:end="1393:64">GUEST_BASE</name><operator pos:start="1393:65" pos:end="1393:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1395:1" pos:end="1395:6">#<cpp:directive pos:start="1395:2" pos:end="1395:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1397:13" pos:end="1397:39"><expr pos:start="1397:13" pos:end="1397:38"><call pos:start="1397:13" pos:end="1397:38"><name pos:start="1397:13" pos:end="1397:27">tci_write_reg32</name><argument_list pos:start="1397:28" pos:end="1397:38">(<argument pos:start="1397:29" pos:end="1397:30"><expr pos:start="1397:29" pos:end="1397:30"><name pos:start="1397:29" pos:end="1397:30">t0</name></expr></argument>, <argument pos:start="1397:33" pos:end="1397:37"><expr pos:start="1397:33" pos:end="1397:37"><name pos:start="1397:33" pos:end="1397:37">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1399:13" pos:end="1399:18">break;</break>

        <case pos:start="1401:9" pos:end="1401:33">case <expr pos:start="1401:14" pos:end="1401:32"><name pos:start="1401:14" pos:end="1401:32">INDEX_op_qemu_ld32s</name></expr>:</case>

            <expr_stmt pos:start="1403:13" pos:end="1403:27"><expr pos:start="1403:13" pos:end="1403:26"><name pos:start="1403:13" pos:end="1403:14">t0</name> <operator pos:start="1403:16" pos:end="1403:16">=</operator> <operator pos:start="1403:18" pos:end="1403:18">*</operator><name pos:start="1403:19" pos:end="1403:24">tb_ptr</name><operator pos:start="1403:25" pos:end="1403:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1405:13" pos:end="1408:0"><expr pos:start="1405:13" pos:end="1405:43"><name pos:start="1405:13" pos:end="1405:17">taddr</name> <operator pos:start="1405:19" pos:end="1405:19">=</operator> <call pos:start="1405:21" pos:end="1405:43"><name pos:start="1405:21" pos:end="1405:34">tci_read_ulong</name><argument_list pos:start="1405:35" pos:end="1405:43">(<argument pos:start="1405:36" pos:end="1405:42"><expr pos:start="1405:36" pos:end="1405:42"><operator pos:start="1405:36" pos:end="1405:36">&amp;</operator><name pos:start="1405:37" pos:end="1405:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1407:1" pos:end="1407:21">#<cpp:directive pos:start="1407:2" pos:end="1407:6">ifdef</cpp:directive> <name pos:start="1407:8" pos:end="1407:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1409:13" pos:end="1412:0"><expr pos:start="1409:13" pos:end="1409:67"><name pos:start="1409:13" pos:end="1409:17">tmp32</name> <operator pos:start="1409:19" pos:end="1409:19">=</operator> <call pos:start="1409:21" pos:end="1409:67"><name pos:start="1409:21" pos:end="1409:34">helper_ldl_mmu</name><argument_list pos:start="1409:35" pos:end="1409:67">(<argument pos:start="1409:36" pos:end="1409:38"><expr pos:start="1409:36" pos:end="1409:38"><name pos:start="1409:36" pos:end="1409:38">env</name></expr></argument>, <argument pos:start="1409:41" pos:end="1409:45"><expr pos:start="1409:41" pos:end="1409:45"><name pos:start="1409:41" pos:end="1409:45">taddr</name></expr></argument>, <argument pos:start="1409:48" pos:end="1409:66"><expr pos:start="1409:48" pos:end="1409:66"><call pos:start="1409:48" pos:end="1409:66"><name pos:start="1409:48" pos:end="1409:57">tci_read_i</name><argument_list pos:start="1409:58" pos:end="1409:66">(<argument pos:start="1409:59" pos:end="1409:65"><expr pos:start="1409:59" pos:end="1409:65"><operator pos:start="1409:59" pos:end="1409:59">&amp;</operator><name pos:start="1409:60" pos:end="1409:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1411:1" pos:end="1411:5">#<cpp:directive pos:start="1411:2" pos:end="1411:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1413:13" pos:end="1413:48"><expr pos:start="1413:13" pos:end="1413:47"><name pos:start="1413:13" pos:end="1413:21">host_addr</name> <operator pos:start="1413:23" pos:end="1413:23">=</operator> <operator pos:start="1413:25" pos:end="1413:25">(</operator><name pos:start="1413:26" pos:end="1413:41">tcg_target_ulong</name><operator pos:start="1413:42" pos:end="1413:42">)</operator><name pos:start="1413:43" pos:end="1413:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1415:13" pos:end="1415:39"><expr pos:start="1415:13" pos:end="1415:38"><call pos:start="1415:13" pos:end="1415:38"><name pos:start="1415:13" pos:end="1415:18">assert</name><argument_list pos:start="1415:19" pos:end="1415:38">(<argument pos:start="1415:20" pos:end="1415:37"><expr pos:start="1415:20" pos:end="1415:37"><name pos:start="1415:20" pos:end="1415:24">taddr</name> <operator pos:start="1415:26" pos:end="1415:27">==</operator> <name pos:start="1415:29" pos:end="1415:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1417:13" pos:end="1420:0"><expr pos:start="1417:13" pos:end="1417:66"><name pos:start="1417:13" pos:end="1417:17">tmp32</name> <operator pos:start="1417:19" pos:end="1417:19">=</operator> <call pos:start="1417:21" pos:end="1417:66"><name pos:start="1417:21" pos:end="1417:27">tswap32</name><argument_list pos:start="1417:28" pos:end="1417:66">(<argument pos:start="1417:29" pos:end="1417:65"><expr pos:start="1417:29" pos:end="1417:65"><operator pos:start="1417:29" pos:end="1417:29">*</operator><operator pos:start="1417:30" pos:end="1417:30">(</operator><name pos:start="1417:31" pos:end="1417:38">uint32_t</name> <operator pos:start="1417:40" pos:end="1417:40">*</operator><operator pos:start="1417:41" pos:end="1417:41">)</operator><operator pos:start="1417:42" pos:end="1417:42">(</operator><name pos:start="1417:43" pos:end="1417:51">host_addr</name> <operator pos:start="1417:53" pos:end="1417:53">+</operator> <name pos:start="1417:55" pos:end="1417:64">GUEST_BASE</name><operator pos:start="1417:65" pos:end="1417:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1419:1" pos:end="1419:6">#<cpp:directive pos:start="1419:2" pos:end="1419:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1421:13" pos:end="1421:40"><expr pos:start="1421:13" pos:end="1421:39"><call pos:start="1421:13" pos:end="1421:39"><name pos:start="1421:13" pos:end="1421:28">tci_write_reg32s</name><argument_list pos:start="1421:29" pos:end="1421:39">(<argument pos:start="1421:30" pos:end="1421:31"><expr pos:start="1421:30" pos:end="1421:31"><name pos:start="1421:30" pos:end="1421:31">t0</name></expr></argument>, <argument pos:start="1421:34" pos:end="1421:38"><expr pos:start="1421:34" pos:end="1421:38"><name pos:start="1421:34" pos:end="1421:38">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1423:13" pos:end="1426:0">break;</break>

<cpp:endif pos:start="1425:1" pos:end="1425:6">#<cpp:directive pos:start="1425:2" pos:end="1425:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1425:8" pos:end="1425:38">/* TCG_TARGET_REG_BITS == 64 */</comment>

        <case pos:start="1427:9" pos:end="1427:32">case <expr pos:start="1427:14" pos:end="1427:31"><name pos:start="1427:14" pos:end="1427:31">INDEX_op_qemu_ld32</name></expr>:</case>

            <expr_stmt pos:start="1429:13" pos:end="1429:27"><expr pos:start="1429:13" pos:end="1429:26"><name pos:start="1429:13" pos:end="1429:14">t0</name> <operator pos:start="1429:16" pos:end="1429:16">=</operator> <operator pos:start="1429:18" pos:end="1429:18">*</operator><name pos:start="1429:19" pos:end="1429:24">tb_ptr</name><operator pos:start="1429:25" pos:end="1429:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1431:13" pos:end="1434:0"><expr pos:start="1431:13" pos:end="1431:43"><name pos:start="1431:13" pos:end="1431:17">taddr</name> <operator pos:start="1431:19" pos:end="1431:19">=</operator> <call pos:start="1431:21" pos:end="1431:43"><name pos:start="1431:21" pos:end="1431:34">tci_read_ulong</name><argument_list pos:start="1431:35" pos:end="1431:43">(<argument pos:start="1431:36" pos:end="1431:42"><expr pos:start="1431:36" pos:end="1431:42"><operator pos:start="1431:36" pos:end="1431:36">&amp;</operator><name pos:start="1431:37" pos:end="1431:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1433:1" pos:end="1433:21">#<cpp:directive pos:start="1433:2" pos:end="1433:6">ifdef</cpp:directive> <name pos:start="1433:8" pos:end="1433:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1435:13" pos:end="1438:0"><expr pos:start="1435:13" pos:end="1435:67"><name pos:start="1435:13" pos:end="1435:17">tmp32</name> <operator pos:start="1435:19" pos:end="1435:19">=</operator> <call pos:start="1435:21" pos:end="1435:67"><name pos:start="1435:21" pos:end="1435:34">helper_ldl_mmu</name><argument_list pos:start="1435:35" pos:end="1435:67">(<argument pos:start="1435:36" pos:end="1435:38"><expr pos:start="1435:36" pos:end="1435:38"><name pos:start="1435:36" pos:end="1435:38">env</name></expr></argument>, <argument pos:start="1435:41" pos:end="1435:45"><expr pos:start="1435:41" pos:end="1435:45"><name pos:start="1435:41" pos:end="1435:45">taddr</name></expr></argument>, <argument pos:start="1435:48" pos:end="1435:66"><expr pos:start="1435:48" pos:end="1435:66"><call pos:start="1435:48" pos:end="1435:66"><name pos:start="1435:48" pos:end="1435:57">tci_read_i</name><argument_list pos:start="1435:58" pos:end="1435:66">(<argument pos:start="1435:59" pos:end="1435:65"><expr pos:start="1435:59" pos:end="1435:65"><operator pos:start="1435:59" pos:end="1435:59">&amp;</operator><name pos:start="1435:60" pos:end="1435:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1437:1" pos:end="1437:5">#<cpp:directive pos:start="1437:2" pos:end="1437:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1439:13" pos:end="1439:48"><expr pos:start="1439:13" pos:end="1439:47"><name pos:start="1439:13" pos:end="1439:21">host_addr</name> <operator pos:start="1439:23" pos:end="1439:23">=</operator> <operator pos:start="1439:25" pos:end="1439:25">(</operator><name pos:start="1439:26" pos:end="1439:41">tcg_target_ulong</name><operator pos:start="1439:42" pos:end="1439:42">)</operator><name pos:start="1439:43" pos:end="1439:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1441:13" pos:end="1441:39"><expr pos:start="1441:13" pos:end="1441:38"><call pos:start="1441:13" pos:end="1441:38"><name pos:start="1441:13" pos:end="1441:18">assert</name><argument_list pos:start="1441:19" pos:end="1441:38">(<argument pos:start="1441:20" pos:end="1441:37"><expr pos:start="1441:20" pos:end="1441:37"><name pos:start="1441:20" pos:end="1441:24">taddr</name> <operator pos:start="1441:26" pos:end="1441:27">==</operator> <name pos:start="1441:29" pos:end="1441:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1443:13" pos:end="1446:0"><expr pos:start="1443:13" pos:end="1443:66"><name pos:start="1443:13" pos:end="1443:17">tmp32</name> <operator pos:start="1443:19" pos:end="1443:19">=</operator> <call pos:start="1443:21" pos:end="1443:66"><name pos:start="1443:21" pos:end="1443:27">tswap32</name><argument_list pos:start="1443:28" pos:end="1443:66">(<argument pos:start="1443:29" pos:end="1443:65"><expr pos:start="1443:29" pos:end="1443:65"><operator pos:start="1443:29" pos:end="1443:29">*</operator><operator pos:start="1443:30" pos:end="1443:30">(</operator><name pos:start="1443:31" pos:end="1443:38">uint32_t</name> <operator pos:start="1443:40" pos:end="1443:40">*</operator><operator pos:start="1443:41" pos:end="1443:41">)</operator><operator pos:start="1443:42" pos:end="1443:42">(</operator><name pos:start="1443:43" pos:end="1443:51">host_addr</name> <operator pos:start="1443:53" pos:end="1443:53">+</operator> <name pos:start="1443:55" pos:end="1443:64">GUEST_BASE</name><operator pos:start="1443:65" pos:end="1443:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1445:1" pos:end="1445:6">#<cpp:directive pos:start="1445:2" pos:end="1445:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1447:13" pos:end="1447:39"><expr pos:start="1447:13" pos:end="1447:38"><call pos:start="1447:13" pos:end="1447:38"><name pos:start="1447:13" pos:end="1447:27">tci_write_reg32</name><argument_list pos:start="1447:28" pos:end="1447:38">(<argument pos:start="1447:29" pos:end="1447:30"><expr pos:start="1447:29" pos:end="1447:30"><name pos:start="1447:29" pos:end="1447:30">t0</name></expr></argument>, <argument pos:start="1447:33" pos:end="1447:37"><expr pos:start="1447:33" pos:end="1447:37"><name pos:start="1447:33" pos:end="1447:37">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1449:13" pos:end="1449:18">break;</break>

        <case pos:start="1451:9" pos:end="1451:32">case <expr pos:start="1451:14" pos:end="1451:31"><name pos:start="1451:14" pos:end="1451:31">INDEX_op_qemu_ld64</name></expr>:</case>

            <expr_stmt pos:start="1453:13" pos:end="1456:0"><expr pos:start="1453:13" pos:end="1453:26"><name pos:start="1453:13" pos:end="1453:14">t0</name> <operator pos:start="1453:16" pos:end="1453:16">=</operator> <operator pos:start="1453:18" pos:end="1453:18">*</operator><name pos:start="1453:19" pos:end="1453:24">tb_ptr</name><operator pos:start="1453:25" pos:end="1453:26">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="1455:1" pos:end="1455:29">#<cpp:directive pos:start="1455:2" pos:end="1455:3">if</cpp:directive> <expr pos:start="1455:5" pos:end="1455:29"><name pos:start="1455:5" pos:end="1455:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1455:25" pos:end="1455:26">==</operator> <literal type="number" pos:start="1455:28" pos:end="1455:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="1457:13" pos:end="1460:0"><expr pos:start="1457:13" pos:end="1457:26"><name pos:start="1457:13" pos:end="1457:14">t1</name> <operator pos:start="1457:16" pos:end="1457:16">=</operator> <operator pos:start="1457:18" pos:end="1457:18">*</operator><name pos:start="1457:19" pos:end="1457:24">tb_ptr</name><operator pos:start="1457:25" pos:end="1457:26">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1459:1" pos:end="1459:6">#<cpp:directive pos:start="1459:2" pos:end="1459:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1461:13" pos:end="1464:0"><expr pos:start="1461:13" pos:end="1461:43"><name pos:start="1461:13" pos:end="1461:17">taddr</name> <operator pos:start="1461:19" pos:end="1461:19">=</operator> <call pos:start="1461:21" pos:end="1461:43"><name pos:start="1461:21" pos:end="1461:34">tci_read_ulong</name><argument_list pos:start="1461:35" pos:end="1461:43">(<argument pos:start="1461:36" pos:end="1461:42"><expr pos:start="1461:36" pos:end="1461:42"><operator pos:start="1461:36" pos:end="1461:36">&amp;</operator><name pos:start="1461:37" pos:end="1461:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1463:1" pos:end="1463:21">#<cpp:directive pos:start="1463:2" pos:end="1463:6">ifdef</cpp:directive> <name pos:start="1463:8" pos:end="1463:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1465:13" pos:end="1468:0"><expr pos:start="1465:13" pos:end="1465:67"><name pos:start="1465:13" pos:end="1465:17">tmp64</name> <operator pos:start="1465:19" pos:end="1465:19">=</operator> <call pos:start="1465:21" pos:end="1465:67"><name pos:start="1465:21" pos:end="1465:34">helper_ldq_mmu</name><argument_list pos:start="1465:35" pos:end="1465:67">(<argument pos:start="1465:36" pos:end="1465:38"><expr pos:start="1465:36" pos:end="1465:38"><name pos:start="1465:36" pos:end="1465:38">env</name></expr></argument>, <argument pos:start="1465:41" pos:end="1465:45"><expr pos:start="1465:41" pos:end="1465:45"><name pos:start="1465:41" pos:end="1465:45">taddr</name></expr></argument>, <argument pos:start="1465:48" pos:end="1465:66"><expr pos:start="1465:48" pos:end="1465:66"><call pos:start="1465:48" pos:end="1465:66"><name pos:start="1465:48" pos:end="1465:57">tci_read_i</name><argument_list pos:start="1465:58" pos:end="1465:66">(<argument pos:start="1465:59" pos:end="1465:65"><expr pos:start="1465:59" pos:end="1465:65"><operator pos:start="1465:59" pos:end="1465:59">&amp;</operator><name pos:start="1465:60" pos:end="1465:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1467:1" pos:end="1467:5">#<cpp:directive pos:start="1467:2" pos:end="1467:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1469:13" pos:end="1469:48"><expr pos:start="1469:13" pos:end="1469:47"><name pos:start="1469:13" pos:end="1469:21">host_addr</name> <operator pos:start="1469:23" pos:end="1469:23">=</operator> <operator pos:start="1469:25" pos:end="1469:25">(</operator><name pos:start="1469:26" pos:end="1469:41">tcg_target_ulong</name><operator pos:start="1469:42" pos:end="1469:42">)</operator><name pos:start="1469:43" pos:end="1469:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1471:13" pos:end="1471:39"><expr pos:start="1471:13" pos:end="1471:38"><call pos:start="1471:13" pos:end="1471:38"><name pos:start="1471:13" pos:end="1471:18">assert</name><argument_list pos:start="1471:19" pos:end="1471:38">(<argument pos:start="1471:20" pos:end="1471:37"><expr pos:start="1471:20" pos:end="1471:37"><name pos:start="1471:20" pos:end="1471:24">taddr</name> <operator pos:start="1471:26" pos:end="1471:27">==</operator> <name pos:start="1471:29" pos:end="1471:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1473:13" pos:end="1476:0"><expr pos:start="1473:13" pos:end="1473:66"><name pos:start="1473:13" pos:end="1473:17">tmp64</name> <operator pos:start="1473:19" pos:end="1473:19">=</operator> <call pos:start="1473:21" pos:end="1473:66"><name pos:start="1473:21" pos:end="1473:27">tswap64</name><argument_list pos:start="1473:28" pos:end="1473:66">(<argument pos:start="1473:29" pos:end="1473:65"><expr pos:start="1473:29" pos:end="1473:65"><operator pos:start="1473:29" pos:end="1473:29">*</operator><operator pos:start="1473:30" pos:end="1473:30">(</operator><name pos:start="1473:31" pos:end="1473:38">uint64_t</name> <operator pos:start="1473:40" pos:end="1473:40">*</operator><operator pos:start="1473:41" pos:end="1473:41">)</operator><operator pos:start="1473:42" pos:end="1473:42">(</operator><name pos:start="1473:43" pos:end="1473:51">host_addr</name> <operator pos:start="1473:53" pos:end="1473:53">+</operator> <name pos:start="1473:55" pos:end="1473:64">GUEST_BASE</name><operator pos:start="1473:65" pos:end="1473:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1475:1" pos:end="1475:6">#<cpp:directive pos:start="1475:2" pos:end="1475:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1477:13" pos:end="1480:0"><expr pos:start="1477:13" pos:end="1477:36"><call pos:start="1477:13" pos:end="1477:36"><name pos:start="1477:13" pos:end="1477:25">tci_write_reg</name><argument_list pos:start="1477:26" pos:end="1477:36">(<argument pos:start="1477:27" pos:end="1477:28"><expr pos:start="1477:27" pos:end="1477:28"><name pos:start="1477:27" pos:end="1477:28">t0</name></expr></argument>, <argument pos:start="1477:31" pos:end="1477:35"><expr pos:start="1477:31" pos:end="1477:35"><name pos:start="1477:31" pos:end="1477:35">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1479:1" pos:end="1479:29">#<cpp:directive pos:start="1479:2" pos:end="1479:3">if</cpp:directive> <expr pos:start="1479:5" pos:end="1479:29"><name pos:start="1479:5" pos:end="1479:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1479:25" pos:end="1479:26">==</operator> <literal type="number" pos:start="1479:28" pos:end="1479:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="1481:13" pos:end="1484:0"><expr pos:start="1481:13" pos:end="1481:42"><call pos:start="1481:13" pos:end="1481:42"><name pos:start="1481:13" pos:end="1481:25">tci_write_reg</name><argument_list pos:start="1481:26" pos:end="1481:42">(<argument pos:start="1481:27" pos:end="1481:28"><expr pos:start="1481:27" pos:end="1481:28"><name pos:start="1481:27" pos:end="1481:28">t1</name></expr></argument>, <argument pos:start="1481:31" pos:end="1481:41"><expr pos:start="1481:31" pos:end="1481:41"><name pos:start="1481:31" pos:end="1481:35">tmp64</name> <operator pos:start="1481:37" pos:end="1481:38">&gt;&gt;</operator> <literal type="number" pos:start="1481:40" pos:end="1481:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1483:1" pos:end="1483:6">#<cpp:directive pos:start="1483:2" pos:end="1483:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1485:13" pos:end="1485:18">break;</break>

        <case pos:start="1487:9" pos:end="1487:31">case <expr pos:start="1487:14" pos:end="1487:30"><name pos:start="1487:14" pos:end="1487:30">INDEX_op_qemu_st8</name></expr>:</case>

            <expr_stmt pos:start="1489:13" pos:end="1489:38"><expr pos:start="1489:13" pos:end="1489:37"><name pos:start="1489:13" pos:end="1489:14">t0</name> <operator pos:start="1489:16" pos:end="1489:16">=</operator> <call pos:start="1489:18" pos:end="1489:37"><name pos:start="1489:18" pos:end="1489:28">tci_read_r8</name><argument_list pos:start="1489:29" pos:end="1489:37">(<argument pos:start="1489:30" pos:end="1489:36"><expr pos:start="1489:30" pos:end="1489:36"><operator pos:start="1489:30" pos:end="1489:30">&amp;</operator><name pos:start="1489:31" pos:end="1489:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1491:13" pos:end="1494:0"><expr pos:start="1491:13" pos:end="1491:43"><name pos:start="1491:13" pos:end="1491:17">taddr</name> <operator pos:start="1491:19" pos:end="1491:19">=</operator> <call pos:start="1491:21" pos:end="1491:43"><name pos:start="1491:21" pos:end="1491:34">tci_read_ulong</name><argument_list pos:start="1491:35" pos:end="1491:43">(<argument pos:start="1491:36" pos:end="1491:42"><expr pos:start="1491:36" pos:end="1491:42"><operator pos:start="1491:36" pos:end="1491:36">&amp;</operator><name pos:start="1491:37" pos:end="1491:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1493:1" pos:end="1493:21">#<cpp:directive pos:start="1493:2" pos:end="1493:6">ifdef</cpp:directive> <name pos:start="1493:8" pos:end="1493:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1495:13" pos:end="1495:37"><expr pos:start="1495:13" pos:end="1495:36"><name pos:start="1495:13" pos:end="1495:14">t2</name> <operator pos:start="1495:16" pos:end="1495:16">=</operator> <call pos:start="1495:18" pos:end="1495:36"><name pos:start="1495:18" pos:end="1495:27">tci_read_i</name><argument_list pos:start="1495:28" pos:end="1495:36">(<argument pos:start="1495:29" pos:end="1495:35"><expr pos:start="1495:29" pos:end="1495:35"><operator pos:start="1495:29" pos:end="1495:29">&amp;</operator><name pos:start="1495:30" pos:end="1495:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1497:13" pos:end="1500:0"><expr pos:start="1497:13" pos:end="1497:46"><call pos:start="1497:13" pos:end="1497:46"><name pos:start="1497:13" pos:end="1497:26">helper_stb_mmu</name><argument_list pos:start="1497:27" pos:end="1497:46">(<argument pos:start="1497:28" pos:end="1497:30"><expr pos:start="1497:28" pos:end="1497:30"><name pos:start="1497:28" pos:end="1497:30">env</name></expr></argument>, <argument pos:start="1497:33" pos:end="1497:37"><expr pos:start="1497:33" pos:end="1497:37"><name pos:start="1497:33" pos:end="1497:37">taddr</name></expr></argument>, <argument pos:start="1497:40" pos:end="1497:41"><expr pos:start="1497:40" pos:end="1497:41"><name pos:start="1497:40" pos:end="1497:41">t0</name></expr></argument>, <argument pos:start="1497:44" pos:end="1497:45"><expr pos:start="1497:44" pos:end="1497:45"><name pos:start="1497:44" pos:end="1497:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1499:1" pos:end="1499:5">#<cpp:directive pos:start="1499:2" pos:end="1499:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1501:13" pos:end="1501:48"><expr pos:start="1501:13" pos:end="1501:47"><name pos:start="1501:13" pos:end="1501:21">host_addr</name> <operator pos:start="1501:23" pos:end="1501:23">=</operator> <operator pos:start="1501:25" pos:end="1501:25">(</operator><name pos:start="1501:26" pos:end="1501:41">tcg_target_ulong</name><operator pos:start="1501:42" pos:end="1501:42">)</operator><name pos:start="1501:43" pos:end="1501:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1503:13" pos:end="1503:39"><expr pos:start="1503:13" pos:end="1503:38"><call pos:start="1503:13" pos:end="1503:38"><name pos:start="1503:13" pos:end="1503:18">assert</name><argument_list pos:start="1503:19" pos:end="1503:38">(<argument pos:start="1503:20" pos:end="1503:37"><expr pos:start="1503:20" pos:end="1503:37"><name pos:start="1503:20" pos:end="1503:24">taddr</name> <operator pos:start="1503:26" pos:end="1503:27">==</operator> <name pos:start="1503:29" pos:end="1503:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1505:13" pos:end="1508:0"><expr pos:start="1505:13" pos:end="1505:53"><operator pos:start="1505:13" pos:end="1505:13">*</operator><operator pos:start="1505:14" pos:end="1505:14">(</operator><name pos:start="1505:15" pos:end="1505:21">uint8_t</name> <operator pos:start="1505:23" pos:end="1505:23">*</operator><operator pos:start="1505:24" pos:end="1505:24">)</operator><operator pos:start="1505:25" pos:end="1505:25">(</operator><name pos:start="1505:26" pos:end="1505:34">host_addr</name> <operator pos:start="1505:36" pos:end="1505:36">+</operator> <name pos:start="1505:38" pos:end="1505:47">GUEST_BASE</name><operator pos:start="1505:48" pos:end="1505:48">)</operator> <operator pos:start="1505:50" pos:end="1505:50">=</operator> <name pos:start="1505:52" pos:end="1505:53">t0</name></expr>;</expr_stmt>

<cpp:endif pos:start="1507:1" pos:end="1507:6">#<cpp:directive pos:start="1507:2" pos:end="1507:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1509:13" pos:end="1509:18">break;</break>

        <case pos:start="1511:9" pos:end="1511:32">case <expr pos:start="1511:14" pos:end="1511:31"><name pos:start="1511:14" pos:end="1511:31">INDEX_op_qemu_st16</name></expr>:</case>

            <expr_stmt pos:start="1513:13" pos:end="1513:39"><expr pos:start="1513:13" pos:end="1513:38"><name pos:start="1513:13" pos:end="1513:14">t0</name> <operator pos:start="1513:16" pos:end="1513:16">=</operator> <call pos:start="1513:18" pos:end="1513:38"><name pos:start="1513:18" pos:end="1513:29">tci_read_r16</name><argument_list pos:start="1513:30" pos:end="1513:38">(<argument pos:start="1513:31" pos:end="1513:37"><expr pos:start="1513:31" pos:end="1513:37"><operator pos:start="1513:31" pos:end="1513:31">&amp;</operator><name pos:start="1513:32" pos:end="1513:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1515:13" pos:end="1518:0"><expr pos:start="1515:13" pos:end="1515:43"><name pos:start="1515:13" pos:end="1515:17">taddr</name> <operator pos:start="1515:19" pos:end="1515:19">=</operator> <call pos:start="1515:21" pos:end="1515:43"><name pos:start="1515:21" pos:end="1515:34">tci_read_ulong</name><argument_list pos:start="1515:35" pos:end="1515:43">(<argument pos:start="1515:36" pos:end="1515:42"><expr pos:start="1515:36" pos:end="1515:42"><operator pos:start="1515:36" pos:end="1515:36">&amp;</operator><name pos:start="1515:37" pos:end="1515:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1517:1" pos:end="1517:21">#<cpp:directive pos:start="1517:2" pos:end="1517:6">ifdef</cpp:directive> <name pos:start="1517:8" pos:end="1517:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1519:13" pos:end="1519:37"><expr pos:start="1519:13" pos:end="1519:36"><name pos:start="1519:13" pos:end="1519:14">t2</name> <operator pos:start="1519:16" pos:end="1519:16">=</operator> <call pos:start="1519:18" pos:end="1519:36"><name pos:start="1519:18" pos:end="1519:27">tci_read_i</name><argument_list pos:start="1519:28" pos:end="1519:36">(<argument pos:start="1519:29" pos:end="1519:35"><expr pos:start="1519:29" pos:end="1519:35"><operator pos:start="1519:29" pos:end="1519:29">&amp;</operator><name pos:start="1519:30" pos:end="1519:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1521:13" pos:end="1524:0"><expr pos:start="1521:13" pos:end="1521:46"><call pos:start="1521:13" pos:end="1521:46"><name pos:start="1521:13" pos:end="1521:26">helper_stw_mmu</name><argument_list pos:start="1521:27" pos:end="1521:46">(<argument pos:start="1521:28" pos:end="1521:30"><expr pos:start="1521:28" pos:end="1521:30"><name pos:start="1521:28" pos:end="1521:30">env</name></expr></argument>, <argument pos:start="1521:33" pos:end="1521:37"><expr pos:start="1521:33" pos:end="1521:37"><name pos:start="1521:33" pos:end="1521:37">taddr</name></expr></argument>, <argument pos:start="1521:40" pos:end="1521:41"><expr pos:start="1521:40" pos:end="1521:41"><name pos:start="1521:40" pos:end="1521:41">t0</name></expr></argument>, <argument pos:start="1521:44" pos:end="1521:45"><expr pos:start="1521:44" pos:end="1521:45"><name pos:start="1521:44" pos:end="1521:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1523:1" pos:end="1523:5">#<cpp:directive pos:start="1523:2" pos:end="1523:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1525:13" pos:end="1525:48"><expr pos:start="1525:13" pos:end="1525:47"><name pos:start="1525:13" pos:end="1525:21">host_addr</name> <operator pos:start="1525:23" pos:end="1525:23">=</operator> <operator pos:start="1525:25" pos:end="1525:25">(</operator><name pos:start="1525:26" pos:end="1525:41">tcg_target_ulong</name><operator pos:start="1525:42" pos:end="1525:42">)</operator><name pos:start="1525:43" pos:end="1525:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1527:13" pos:end="1527:39"><expr pos:start="1527:13" pos:end="1527:38"><call pos:start="1527:13" pos:end="1527:38"><name pos:start="1527:13" pos:end="1527:18">assert</name><argument_list pos:start="1527:19" pos:end="1527:38">(<argument pos:start="1527:20" pos:end="1527:37"><expr pos:start="1527:20" pos:end="1527:37"><name pos:start="1527:20" pos:end="1527:24">taddr</name> <operator pos:start="1527:26" pos:end="1527:27">==</operator> <name pos:start="1527:29" pos:end="1527:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1529:13" pos:end="1532:0"><expr pos:start="1529:13" pos:end="1529:63"><operator pos:start="1529:13" pos:end="1529:13">*</operator><operator pos:start="1529:14" pos:end="1529:14">(</operator><name pos:start="1529:15" pos:end="1529:22">uint16_t</name> <operator pos:start="1529:24" pos:end="1529:24">*</operator><operator pos:start="1529:25" pos:end="1529:25">)</operator><operator pos:start="1529:26" pos:end="1529:26">(</operator><name pos:start="1529:27" pos:end="1529:35">host_addr</name> <operator pos:start="1529:37" pos:end="1529:37">+</operator> <name pos:start="1529:39" pos:end="1529:48">GUEST_BASE</name><operator pos:start="1529:49" pos:end="1529:49">)</operator> <operator pos:start="1529:51" pos:end="1529:51">=</operator> <call pos:start="1529:53" pos:end="1529:63"><name pos:start="1529:53" pos:end="1529:59">tswap16</name><argument_list pos:start="1529:60" pos:end="1529:63">(<argument pos:start="1529:61" pos:end="1529:62"><expr pos:start="1529:61" pos:end="1529:62"><name pos:start="1529:61" pos:end="1529:62">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1531:1" pos:end="1531:6">#<cpp:directive pos:start="1531:2" pos:end="1531:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1533:13" pos:end="1533:18">break;</break>

        <case pos:start="1535:9" pos:end="1535:32">case <expr pos:start="1535:14" pos:end="1535:31"><name pos:start="1535:14" pos:end="1535:31">INDEX_op_qemu_st32</name></expr>:</case>

            <expr_stmt pos:start="1537:13" pos:end="1537:39"><expr pos:start="1537:13" pos:end="1537:38"><name pos:start="1537:13" pos:end="1537:14">t0</name> <operator pos:start="1537:16" pos:end="1537:16">=</operator> <call pos:start="1537:18" pos:end="1537:38"><name pos:start="1537:18" pos:end="1537:29">tci_read_r32</name><argument_list pos:start="1537:30" pos:end="1537:38">(<argument pos:start="1537:31" pos:end="1537:37"><expr pos:start="1537:31" pos:end="1537:37"><operator pos:start="1537:31" pos:end="1537:31">&amp;</operator><name pos:start="1537:32" pos:end="1537:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1539:13" pos:end="1542:0"><expr pos:start="1539:13" pos:end="1539:43"><name pos:start="1539:13" pos:end="1539:17">taddr</name> <operator pos:start="1539:19" pos:end="1539:19">=</operator> <call pos:start="1539:21" pos:end="1539:43"><name pos:start="1539:21" pos:end="1539:34">tci_read_ulong</name><argument_list pos:start="1539:35" pos:end="1539:43">(<argument pos:start="1539:36" pos:end="1539:42"><expr pos:start="1539:36" pos:end="1539:42"><operator pos:start="1539:36" pos:end="1539:36">&amp;</operator><name pos:start="1539:37" pos:end="1539:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1541:1" pos:end="1541:21">#<cpp:directive pos:start="1541:2" pos:end="1541:6">ifdef</cpp:directive> <name pos:start="1541:8" pos:end="1541:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1543:13" pos:end="1543:37"><expr pos:start="1543:13" pos:end="1543:36"><name pos:start="1543:13" pos:end="1543:14">t2</name> <operator pos:start="1543:16" pos:end="1543:16">=</operator> <call pos:start="1543:18" pos:end="1543:36"><name pos:start="1543:18" pos:end="1543:27">tci_read_i</name><argument_list pos:start="1543:28" pos:end="1543:36">(<argument pos:start="1543:29" pos:end="1543:35"><expr pos:start="1543:29" pos:end="1543:35"><operator pos:start="1543:29" pos:end="1543:29">&amp;</operator><name pos:start="1543:30" pos:end="1543:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1545:13" pos:end="1548:0"><expr pos:start="1545:13" pos:end="1545:46"><call pos:start="1545:13" pos:end="1545:46"><name pos:start="1545:13" pos:end="1545:26">helper_stl_mmu</name><argument_list pos:start="1545:27" pos:end="1545:46">(<argument pos:start="1545:28" pos:end="1545:30"><expr pos:start="1545:28" pos:end="1545:30"><name pos:start="1545:28" pos:end="1545:30">env</name></expr></argument>, <argument pos:start="1545:33" pos:end="1545:37"><expr pos:start="1545:33" pos:end="1545:37"><name pos:start="1545:33" pos:end="1545:37">taddr</name></expr></argument>, <argument pos:start="1545:40" pos:end="1545:41"><expr pos:start="1545:40" pos:end="1545:41"><name pos:start="1545:40" pos:end="1545:41">t0</name></expr></argument>, <argument pos:start="1545:44" pos:end="1545:45"><expr pos:start="1545:44" pos:end="1545:45"><name pos:start="1545:44" pos:end="1545:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1547:1" pos:end="1547:5">#<cpp:directive pos:start="1547:2" pos:end="1547:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1549:13" pos:end="1549:48"><expr pos:start="1549:13" pos:end="1549:47"><name pos:start="1549:13" pos:end="1549:21">host_addr</name> <operator pos:start="1549:23" pos:end="1549:23">=</operator> <operator pos:start="1549:25" pos:end="1549:25">(</operator><name pos:start="1549:26" pos:end="1549:41">tcg_target_ulong</name><operator pos:start="1549:42" pos:end="1549:42">)</operator><name pos:start="1549:43" pos:end="1549:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1551:13" pos:end="1551:39"><expr pos:start="1551:13" pos:end="1551:38"><call pos:start="1551:13" pos:end="1551:38"><name pos:start="1551:13" pos:end="1551:18">assert</name><argument_list pos:start="1551:19" pos:end="1551:38">(<argument pos:start="1551:20" pos:end="1551:37"><expr pos:start="1551:20" pos:end="1551:37"><name pos:start="1551:20" pos:end="1551:24">taddr</name> <operator pos:start="1551:26" pos:end="1551:27">==</operator> <name pos:start="1551:29" pos:end="1551:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1553:13" pos:end="1556:0"><expr pos:start="1553:13" pos:end="1553:63"><operator pos:start="1553:13" pos:end="1553:13">*</operator><operator pos:start="1553:14" pos:end="1553:14">(</operator><name pos:start="1553:15" pos:end="1553:22">uint32_t</name> <operator pos:start="1553:24" pos:end="1553:24">*</operator><operator pos:start="1553:25" pos:end="1553:25">)</operator><operator pos:start="1553:26" pos:end="1553:26">(</operator><name pos:start="1553:27" pos:end="1553:35">host_addr</name> <operator pos:start="1553:37" pos:end="1553:37">+</operator> <name pos:start="1553:39" pos:end="1553:48">GUEST_BASE</name><operator pos:start="1553:49" pos:end="1553:49">)</operator> <operator pos:start="1553:51" pos:end="1553:51">=</operator> <call pos:start="1553:53" pos:end="1553:63"><name pos:start="1553:53" pos:end="1553:59">tswap32</name><argument_list pos:start="1553:60" pos:end="1553:63">(<argument pos:start="1553:61" pos:end="1553:62"><expr pos:start="1553:61" pos:end="1553:62"><name pos:start="1553:61" pos:end="1553:62">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1555:1" pos:end="1555:6">#<cpp:directive pos:start="1555:2" pos:end="1555:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1557:13" pos:end="1557:18">break;</break>

        <case pos:start="1559:9" pos:end="1559:32">case <expr pos:start="1559:14" pos:end="1559:31"><name pos:start="1559:14" pos:end="1559:31">INDEX_op_qemu_st64</name></expr>:</case>

            <expr_stmt pos:start="1561:13" pos:end="1561:42"><expr pos:start="1561:13" pos:end="1561:41"><name pos:start="1561:13" pos:end="1561:17">tmp64</name> <operator pos:start="1561:19" pos:end="1561:19">=</operator> <call pos:start="1561:21" pos:end="1561:41"><name pos:start="1561:21" pos:end="1561:32">tci_read_r64</name><argument_list pos:start="1561:33" pos:end="1561:41">(<argument pos:start="1561:34" pos:end="1561:40"><expr pos:start="1561:34" pos:end="1561:40"><operator pos:start="1561:34" pos:end="1561:34">&amp;</operator><name pos:start="1561:35" pos:end="1561:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1563:13" pos:end="1566:0"><expr pos:start="1563:13" pos:end="1563:43"><name pos:start="1563:13" pos:end="1563:17">taddr</name> <operator pos:start="1563:19" pos:end="1563:19">=</operator> <call pos:start="1563:21" pos:end="1563:43"><name pos:start="1563:21" pos:end="1563:34">tci_read_ulong</name><argument_list pos:start="1563:35" pos:end="1563:43">(<argument pos:start="1563:36" pos:end="1563:42"><expr pos:start="1563:36" pos:end="1563:42"><operator pos:start="1563:36" pos:end="1563:36">&amp;</operator><name pos:start="1563:37" pos:end="1563:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1565:1" pos:end="1565:21">#<cpp:directive pos:start="1565:2" pos:end="1565:6">ifdef</cpp:directive> <name pos:start="1565:8" pos:end="1565:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1567:13" pos:end="1567:37"><expr pos:start="1567:13" pos:end="1567:36"><name pos:start="1567:13" pos:end="1567:14">t2</name> <operator pos:start="1567:16" pos:end="1567:16">=</operator> <call pos:start="1567:18" pos:end="1567:36"><name pos:start="1567:18" pos:end="1567:27">tci_read_i</name><argument_list pos:start="1567:28" pos:end="1567:36">(<argument pos:start="1567:29" pos:end="1567:35"><expr pos:start="1567:29" pos:end="1567:35"><operator pos:start="1567:29" pos:end="1567:29">&amp;</operator><name pos:start="1567:30" pos:end="1567:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1569:13" pos:end="1572:0"><expr pos:start="1569:13" pos:end="1569:49"><call pos:start="1569:13" pos:end="1569:49"><name pos:start="1569:13" pos:end="1569:26">helper_stq_mmu</name><argument_list pos:start="1569:27" pos:end="1569:49">(<argument pos:start="1569:28" pos:end="1569:30"><expr pos:start="1569:28" pos:end="1569:30"><name pos:start="1569:28" pos:end="1569:30">env</name></expr></argument>, <argument pos:start="1569:33" pos:end="1569:37"><expr pos:start="1569:33" pos:end="1569:37"><name pos:start="1569:33" pos:end="1569:37">taddr</name></expr></argument>, <argument pos:start="1569:40" pos:end="1569:44"><expr pos:start="1569:40" pos:end="1569:44"><name pos:start="1569:40" pos:end="1569:44">tmp64</name></expr></argument>, <argument pos:start="1569:47" pos:end="1569:48"><expr pos:start="1569:47" pos:end="1569:48"><name pos:start="1569:47" pos:end="1569:48">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1571:1" pos:end="1571:5">#<cpp:directive pos:start="1571:2" pos:end="1571:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1573:13" pos:end="1573:48"><expr pos:start="1573:13" pos:end="1573:47"><name pos:start="1573:13" pos:end="1573:21">host_addr</name> <operator pos:start="1573:23" pos:end="1573:23">=</operator> <operator pos:start="1573:25" pos:end="1573:25">(</operator><name pos:start="1573:26" pos:end="1573:41">tcg_target_ulong</name><operator pos:start="1573:42" pos:end="1573:42">)</operator><name pos:start="1573:43" pos:end="1573:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1575:13" pos:end="1575:39"><expr pos:start="1575:13" pos:end="1575:38"><call pos:start="1575:13" pos:end="1575:38"><name pos:start="1575:13" pos:end="1575:18">assert</name><argument_list pos:start="1575:19" pos:end="1575:38">(<argument pos:start="1575:20" pos:end="1575:37"><expr pos:start="1575:20" pos:end="1575:37"><name pos:start="1575:20" pos:end="1575:24">taddr</name> <operator pos:start="1575:26" pos:end="1575:27">==</operator> <name pos:start="1575:29" pos:end="1575:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1577:13" pos:end="1580:0"><expr pos:start="1577:13" pos:end="1577:66"><operator pos:start="1577:13" pos:end="1577:13">*</operator><operator pos:start="1577:14" pos:end="1577:14">(</operator><name pos:start="1577:15" pos:end="1577:22">uint64_t</name> <operator pos:start="1577:24" pos:end="1577:24">*</operator><operator pos:start="1577:25" pos:end="1577:25">)</operator><operator pos:start="1577:26" pos:end="1577:26">(</operator><name pos:start="1577:27" pos:end="1577:35">host_addr</name> <operator pos:start="1577:37" pos:end="1577:37">+</operator> <name pos:start="1577:39" pos:end="1577:48">GUEST_BASE</name><operator pos:start="1577:49" pos:end="1577:49">)</operator> <operator pos:start="1577:51" pos:end="1577:51">=</operator> <call pos:start="1577:53" pos:end="1577:66"><name pos:start="1577:53" pos:end="1577:59">tswap64</name><argument_list pos:start="1577:60" pos:end="1577:66">(<argument pos:start="1577:61" pos:end="1577:65"><expr pos:start="1577:61" pos:end="1577:65"><name pos:start="1577:61" pos:end="1577:65">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1579:1" pos:end="1579:6">#<cpp:directive pos:start="1579:2" pos:end="1579:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1581:13" pos:end="1581:18">break;</break>

        <default pos:start="1583:9" pos:end="1583:16">default:</default>

            <expr_stmt pos:start="1585:13" pos:end="1585:19"><expr pos:start="1585:13" pos:end="1585:18"><call pos:start="1585:13" pos:end="1585:18"><name pos:start="1585:13" pos:end="1585:16">TODO</name><argument_list pos:start="1585:17" pos:end="1585:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1587:13" pos:end="1587:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="1591:9" pos:end="1591:49"><expr pos:start="1591:9" pos:end="1591:48"><call pos:start="1591:9" pos:end="1591:48"><name pos:start="1591:9" pos:end="1591:14">assert</name><argument_list pos:start="1591:15" pos:end="1591:48">(<argument pos:start="1591:16" pos:end="1591:47"><expr pos:start="1591:16" pos:end="1591:47"><name pos:start="1591:16" pos:end="1591:21">tb_ptr</name> <operator pos:start="1591:23" pos:end="1591:24">==</operator> <name pos:start="1591:26" pos:end="1591:37">old_code_ptr</name> <operator pos:start="1591:39" pos:end="1591:39">+</operator> <name pos:start="1591:41" pos:end="1591:47">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<label pos:start="1595:1" pos:end="1595:5"><name pos:start="1595:1" pos:end="1595:4">exit</name>:</label>

    <return pos:start="1597:5" pos:end="1597:19">return <expr pos:start="1597:12" pos:end="1597:18"><name pos:start="1597:12" pos:end="1597:18">next_tb</name></expr>;</return>

</block_content>}</block></function>
</unit>
