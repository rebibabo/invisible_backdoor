<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16092.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">sigp_set_prefix</name><parameter_list pos:start="1:28" pos:end="1:62">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:36">CPUState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">cs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:57">run_on_cpu_data</name></type> <name pos:start="1:59" pos:end="1:61">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:41">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">S390CPU</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cpu</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><call pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:27">S390_CPU</name><argument_list pos:start="5:28" pos:end="5:31">(<argument pos:start="5:29" pos:end="5:30"><expr pos:start="5:29" pos:end="5:30"><name pos:start="5:29" pos:end="5:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SigpInfo</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">si</name> <init pos:start="7:18" pos:end="7:31">= <expr pos:start="7:20" pos:end="7:31"><name pos:start="7:20" pos:end="7:31"><name pos:start="7:20" pos:end="7:22">arg</name><operator pos:start="7:23" pos:end="7:23">.</operator><name pos:start="7:24" pos:end="7:31">host_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">addr</name> <init pos:start="9:19" pos:end="9:43">= <expr pos:start="9:21" pos:end="9:43"><name pos:start="9:21" pos:end="9:29"><name pos:start="9:21" pos:end="9:22">si</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:29">param</name></name> <operator pos:start="9:31" pos:end="9:31">&amp;</operator> <literal type="number" pos:start="9:33" pos:end="9:43">0x7fffe000u</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><call pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:25">cpu_synchronize_state</name><argument_list pos:start="13:26" pos:end="13:29">(<argument pos:start="13:27" pos:end="13:28"><expr pos:start="13:27" pos:end="13:28"><name pos:start="13:27" pos:end="13:28">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:67">(<expr pos:start="17:9" pos:end="19:66"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="19:66"><name pos:start="17:10" pos:end="17:35">address_space_access_valid</name><argument_list pos:start="17:36" pos:end="19:66">(<argument pos:start="17:37" pos:end="17:57"><expr pos:start="17:37" pos:end="17:57"><operator pos:start="17:37" pos:end="17:37">&amp;</operator><name pos:start="17:38" pos:end="17:57">address_space_memory</name></expr></argument>, <argument pos:start="17:60" pos:end="17:63"><expr pos:start="17:60" pos:end="17:63"><name pos:start="17:60" pos:end="17:63">addr</name></expr></argument>,

                                    <argument pos:start="19:37" pos:end="19:58"><expr pos:start="19:37" pos:end="19:58"><sizeof pos:start="19:37" pos:end="19:58">sizeof<argument_list pos:start="19:43" pos:end="19:58">(<argument pos:start="19:44" pos:end="19:57"><expr pos:start="19:44" pos:end="19:57">struct <name pos:start="19:51" pos:end="19:57">LowCore</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:61" pos:end="19:65"><expr pos:start="19:61" pos:end="19:65"><name pos:start="19:61" pos:end="19:65">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:69" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:57"><expr pos:start="21:9" pos:end="21:56"><call pos:start="21:9" pos:end="21:56"><name pos:start="21:9" pos:end="21:23">set_sigp_status</name><argument_list pos:start="21:24" pos:end="21:56">(<argument pos:start="21:25" pos:end="21:26"><expr pos:start="21:25" pos:end="21:26"><name pos:start="21:25" pos:end="21:26">si</name></expr></argument>, <argument pos:start="21:29" pos:end="21:55"><expr pos:start="21:29" pos:end="21:55"><name pos:start="21:29" pos:end="21:55">SIGP_STAT_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:31">/* cpu has to be stopped */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:53">(<expr pos:start="31:9" pos:end="31:52"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:26">s390_cpu_get_state</name><argument_list pos:start="31:27" pos:end="31:31">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="31:33" pos:end="31:34">!=</operator> <name pos:start="31:36" pos:end="31:52">CPU_STATE_STOPPED</name></expr>)</condition> <block pos:start="31:55" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:55"><expr pos:start="33:9" pos:end="33:54"><call pos:start="33:9" pos:end="33:54"><name pos:start="33:9" pos:end="33:23">set_sigp_status</name><argument_list pos:start="33:24" pos:end="33:54">(<argument pos:start="33:25" pos:end="33:26"><expr pos:start="33:25" pos:end="33:26"><name pos:start="33:25" pos:end="33:26">si</name></expr></argument>, <argument pos:start="33:29" pos:end="33:53"><expr pos:start="33:29" pos:end="33:53"><name pos:start="33:29" pos:end="33:53">SIGP_STAT_INCORRECT_STATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:7">cpu</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:12">env</name><operator pos:start="41:13" pos:end="41:13">.</operator><name pos:start="41:14" pos:end="41:16">psa</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:23">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><call pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:29">cpu_synchronize_post_init</name><argument_list pos:start="43:30" pos:end="43:33">(<argument pos:start="43:31" pos:end="43:32"><expr pos:start="43:31" pos:end="43:32"><name pos:start="43:31" pos:end="43:32">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:6">si</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:10">cc</name></name> <operator pos:start="45:12" pos:end="45:12">=</operator> <name pos:start="45:14" pos:end="45:40">SIGP_CC_ORDER_CODE_ACCEPTED</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
