<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13930.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">syscall_init</name><parameter_list pos:start="1:18" pos:end="1:23">(<parameter pos:start="1:19" pos:end="1:22"><decl pos:start="1:19" pos:end="1:22"><type pos:start="1:19" pos:end="1:22"><name pos:start="1:19" pos:end="1:22">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="45:1">{<block_content pos:start="3:5" pos:end="44:5">
    <decl_stmt pos:start="3:5" pos:end="3:19"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">IOCTLEntry</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:18">ie</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:19"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:17">argtype</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:27">arg_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="12:0"><decl pos:start="6:5" pos:end="6:9"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:9">i</name></decl>;</decl_stmt>
<cpp:define pos:start="7:1" pos:end="7:97">#<cpp:directive pos:start="7:2" pos:end="7:7">define</cpp:directive> <cpp:macro pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:14">STRUCT</name><parameter_list pos:start="7:15" pos:end="7:25">(<parameter pos:start="7:16" pos:end="7:19"><type pos:start="7:16" pos:end="7:19"><name pos:start="7:16" pos:end="7:19">name</name></type></parameter>, <parameter pos:start="7:22" pos:end="7:24"><type pos:start="7:22" pos:end="7:24"><modifier pos:start="7:22" pos:end="7:24">...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="7:27" pos:end="7:97">thunk_register_struct(STRUCT_ ## name, #name, struct_ ## name ## _def);</cpp:value></cpp:define>
<cpp:define pos:start="8:1" pos:end="8:108">#<cpp:directive pos:start="8:2" pos:end="8:7">define</cpp:directive> <cpp:macro pos:start="8:9" pos:end="8:28"><name pos:start="8:9" pos:end="8:22">STRUCT_SPECIAL</name><parameter_list pos:start="8:23" pos:end="8:28">(<parameter pos:start="8:24" pos:end="8:27"><type pos:start="8:24" pos:end="8:27"><name pos:start="8:24" pos:end="8:27">name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="8:30" pos:end="8:108">thunk_register_struct_direct(STRUCT_ ## name, #name, &amp;struct_ ## name ## _def);</cpp:value></cpp:define>
<cpp:include pos:start="9:1" pos:end="9:26">#<cpp:directive pos:start="9:2" pos:end="9:8">include</cpp:directive> <cpp:file pos:start="9:10" pos:end="9:26">"syscall_types.h"</cpp:file></cpp:include>
<cpp:undef pos:start="10:1" pos:end="10:13">#<cpp:directive pos:start="10:2" pos:end="10:6">undef</cpp:directive> <name pos:start="10:8" pos:end="10:13">STRUCT</name></cpp:undef>
<cpp:undef pos:start="11:1" pos:end="11:21">#<cpp:directive pos:start="11:2" pos:end="11:6">undef</cpp:directive> <name pos:start="11:8" pos:end="11:21">STRUCT_SPECIAL</name></cpp:undef>
    <comment type="block" pos:start="12:5" pos:end="13:39">/* Build target_to_host_errno_table[] table from
     * host_to_target_errno_table[]. */</comment>
    <for pos:start="14:5" pos:end="16:5">for <control pos:start="14:9" pos:end="14:42">(<init pos:start="14:10" pos:end="14:15"><expr pos:start="14:10" pos:end="14:14"><name pos:start="14:10" pos:end="14:10">i</name> <operator pos:start="14:12" pos:end="14:12">=</operator> <literal type="number" pos:start="14:14" pos:end="14:14">0</literal></expr>;</init> <condition pos:start="14:17" pos:end="14:37"><expr pos:start="14:17" pos:end="14:36"><name pos:start="14:17" pos:end="14:17">i</name> <operator pos:start="14:19" pos:end="14:19">&lt;</operator> <name pos:start="14:21" pos:end="14:36">ERRNO_TABLE_SIZE</name></expr>;</condition> <incr pos:start="14:39" pos:end="14:41"><expr pos:start="14:39" pos:end="14:41"><name pos:start="14:39" pos:end="14:39">i</name><operator pos:start="14:40" pos:end="14:41">++</operator></expr></incr>)</control> <block pos:start="14:44" pos:end="16:5">{<block_content pos:start="15:9" pos:end="15:70">
        <expr_stmt pos:start="15:9" pos:end="15:70"><expr pos:start="15:9" pos:end="15:69"><name pos:start="15:9" pos:end="15:65"><name pos:start="15:9" pos:end="15:34">target_to_host_errno_table</name><index pos:start="15:35" pos:end="15:65">[<expr pos:start="15:36" pos:end="15:64"><name pos:start="15:36" pos:end="15:64"><name pos:start="15:36" pos:end="15:61">host_to_target_errno_table</name><index pos:start="15:62" pos:end="15:64">[<expr pos:start="15:63" pos:end="15:63"><name pos:start="15:63" pos:end="15:63">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="15:67" pos:end="15:67">=</operator> <name pos:start="15:69" pos:end="15:69">i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="17:5" pos:end="18:60">/* we patch the ioctl size if necessary. We rely on the fact that
       no ioctl has all the bits at '1' in the size field */</comment>
    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:6">ie</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <name pos:start="19:10" pos:end="19:22">ioctl_entries</name></expr>;</expr_stmt>
    <while pos:start="20:5" pos:end="44:5">while <condition pos:start="20:11" pos:end="20:31">(<expr pos:start="20:12" pos:end="20:30"><name pos:start="20:12" pos:end="20:25"><name pos:start="20:12" pos:end="20:13">ie</name><operator pos:start="20:14" pos:end="20:15">-&gt;</operator><name pos:start="20:16" pos:end="20:25">target_cmd</name></name> <operator pos:start="20:27" pos:end="20:28">!=</operator> <literal type="number" pos:start="20:30" pos:end="20:30">0</literal></expr>)</condition> <block pos:start="20:33" pos:end="44:5">{<block_content pos:start="21:9" pos:end="43:13">
        <if_stmt pos:start="21:9" pos:end="38:0"><if pos:start="21:9" pos:end="38:0">if <condition pos:start="21:12" pos:end="22:32">(<expr pos:start="21:13" pos:end="22:31"><operator pos:start="21:13" pos:end="21:13">(</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:28"><name pos:start="21:15" pos:end="21:16">ie</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:28">target_cmd</name></name> <operator pos:start="21:30" pos:end="21:31">&gt;&gt;</operator> <name pos:start="21:33" pos:end="21:52">TARGET_IOC_SIZESHIFT</name><operator pos:start="21:53" pos:end="21:53">)</operator> <operator pos:start="21:55" pos:end="21:55">&amp;</operator> <name pos:start="21:57" pos:end="21:75">TARGET_IOC_SIZEMASK</name><operator pos:start="21:76" pos:end="21:76">)</operator> <operator pos:start="21:78" pos:end="21:79">==</operator>
            <name pos:start="22:13" pos:end="22:31">TARGET_IOC_SIZEMASK</name></expr>)</condition> <block pos:start="22:34" pos:end="38:0">{<block_content pos:start="23:13" pos:end="33:47">
            <expr_stmt pos:start="23:13" pos:end="23:36"><expr pos:start="23:13" pos:end="23:35"><name pos:start="23:13" pos:end="23:20">arg_type</name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:35"><name pos:start="23:24" pos:end="23:25">ie</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:35">arg_type</name></name></expr>;</expr_stmt>
            <if_stmt pos:start="24:13" pos:end="28:13"><if pos:start="24:13" pos:end="28:13">if <condition pos:start="24:16" pos:end="24:40">(<expr pos:start="24:17" pos:end="24:39"><name pos:start="24:17" pos:end="24:27"><name pos:start="24:17" pos:end="24:24">arg_type</name><index pos:start="24:25" pos:end="24:27">[<expr pos:start="24:26" pos:end="24:26"><literal type="number" pos:start="24:26" pos:end="24:26">0</literal></expr>]</index></name> <operator pos:start="24:29" pos:end="24:30">!=</operator> <name pos:start="24:32" pos:end="24:39">TYPE_PTR</name></expr>)</condition> <block pos:start="24:42" pos:end="28:13">{<block_content pos:start="25:17" pos:end="27:24">
                <expr_stmt pos:start="25:17" pos:end="26:40"><expr pos:start="25:17" pos:end="26:39"><call pos:start="25:17" pos:end="26:39"><name pos:start="25:17" pos:end="25:23">fprintf</name><argument_list pos:start="25:24" pos:end="26:39">(<argument pos:start="25:25" pos:end="25:30"><expr pos:start="25:25" pos:end="25:30"><name pos:start="25:25" pos:end="25:30">stderr</name></expr></argument>, <argument pos:start="25:33" pos:end="25:68"><expr pos:start="25:33" pos:end="25:68"><literal type="string" pos:start="25:33" pos:end="25:68">"cannot patch size for ioctl 0x%x\n"</literal></expr></argument>,
                        <argument pos:start="26:25" pos:end="26:38"><expr pos:start="26:25" pos:end="26:38"><name pos:start="26:25" pos:end="26:38"><name pos:start="26:25" pos:end="26:26">ie</name><operator pos:start="26:27" pos:end="26:28">-&gt;</operator><name pos:start="26:29" pos:end="26:38">target_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="27:17" pos:end="27:24"><expr pos:start="27:17" pos:end="27:23"><call pos:start="27:17" pos:end="27:23"><name pos:start="27:17" pos:end="27:20">exit</name><argument_list pos:start="27:21" pos:end="27:23">(<argument pos:start="27:22" pos:end="27:22"><expr pos:start="27:22" pos:end="27:22"><literal type="number" pos:start="27:22" pos:end="27:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="29:13" pos:end="29:23"><expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:20">arg_type</name><operator pos:start="29:21" pos:end="29:22">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="30:13" pos:end="30:48"><expr pos:start="30:13" pos:end="30:47"><name pos:start="30:13" pos:end="30:16">size</name> <operator pos:start="30:18" pos:end="30:18">=</operator> <call pos:start="30:20" pos:end="30:47"><name pos:start="30:20" pos:end="30:34">thunk_type_size</name><argument_list pos:start="30:35" pos:end="30:47">(<argument pos:start="30:36" pos:end="30:43"><expr pos:start="30:36" pos:end="30:43"><name pos:start="30:36" pos:end="30:43">arg_type</name></expr></argument>, <argument pos:start="30:46" pos:end="30:46"><expr pos:start="30:46" pos:end="30:46"><literal type="number" pos:start="30:46" pos:end="30:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="31:13" pos:end="33:47"><expr pos:start="31:13" pos:end="33:46"><name pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:14">ie</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:26">target_cmd</name></name> <operator pos:start="31:28" pos:end="31:28">=</operator> <operator pos:start="31:30" pos:end="31:30">(</operator><name pos:start="31:31" pos:end="31:44"><name pos:start="31:31" pos:end="31:32">ie</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:44">target_cmd</name></name> <operator pos:start="31:46" pos:end="31:46">&amp;</operator>
                              <operator pos:start="32:31" pos:end="32:31">~</operator><operator pos:start="32:32" pos:end="32:32">(</operator><name pos:start="32:33" pos:end="32:51">TARGET_IOC_SIZEMASK</name> <operator pos:start="32:53" pos:end="32:54">&lt;&lt;</operator> <name pos:start="32:56" pos:end="32:75">TARGET_IOC_SIZESHIFT</name><operator pos:start="32:76" pos:end="32:76">)</operator><operator pos:start="32:77" pos:end="32:77">)</operator> <operator pos:start="32:79" pos:end="32:79">|</operator>
                <operator pos:start="33:17" pos:end="33:17">(</operator><name pos:start="33:18" pos:end="33:21">size</name> <operator pos:start="33:23" pos:end="33:24">&lt;&lt;</operator> <name pos:start="33:26" pos:end="33:45">TARGET_IOC_SIZESHIFT</name><operator pos:start="33:46" pos:end="33:46">)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="35:9" pos:end="35:54">/* automatic consistency check if same arch */</comment>
<cpp:if pos:start="36:1" pos:end="37:51">#<cpp:directive pos:start="36:2" pos:end="36:3">if</cpp:directive> <expr pos:start="36:5" pos:end="37:51"><operator pos:start="36:5" pos:end="36:5">(</operator><call pos:start="36:6" pos:end="36:22"><name pos:start="36:6" pos:end="36:12">defined</name><argument_list pos:start="36:13" pos:end="36:22">(<argument pos:start="36:14" pos:end="36:21"><expr pos:start="36:14" pos:end="36:21"><name pos:start="36:14" pos:end="36:21">__i386__</name></expr></argument>)</argument_list></call> <operator pos:start="36:24" pos:end="36:25">&amp;&amp;</operator> <call pos:start="36:27" pos:end="36:46"><name pos:start="36:27" pos:end="36:33">defined</name><argument_list pos:start="36:34" pos:end="36:46">(<argument pos:start="36:35" pos:end="36:45"><expr pos:start="36:35" pos:end="36:45"><name pos:start="36:35" pos:end="36:45">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="36:48" pos:end="36:49">&amp;&amp;</operator> <call pos:start="36:51" pos:end="36:71"><name pos:start="36:51" pos:end="36:57">defined</name><argument_list pos:start="36:58" pos:end="36:71">(<argument pos:start="36:59" pos:end="36:70"><expr pos:start="36:59" pos:end="36:70"><name pos:start="36:59" pos:end="36:70">TARGET_ABI32</name></expr></argument>)</argument_list></call><operator pos:start="36:72" pos:end="36:72">)</operator> <operator pos:start="36:74" pos:end="36:75">||</operator> \
    <operator pos:start="37:5" pos:end="37:5">(</operator><call pos:start="37:6" pos:end="37:24"><name pos:start="37:6" pos:end="37:12">defined</name><argument_list pos:start="37:13" pos:end="37:24">(<argument pos:start="37:14" pos:end="37:23"><expr pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:23">__x86_64__</name></expr></argument>)</argument_list></call> <operator pos:start="37:26" pos:end="37:27">&amp;&amp;</operator> <call pos:start="37:29" pos:end="37:50"><name pos:start="37:29" pos:end="37:35">defined</name><argument_list pos:start="37:36" pos:end="37:50">(<argument pos:start="37:37" pos:end="37:49"><expr pos:start="37:37" pos:end="37:49"><name pos:start="37:37" pos:end="37:49">TARGET_X86_64</name></expr></argument>)</argument_list></call><operator pos:start="37:51" pos:end="37:51">)</operator></expr></cpp:if>
        <if_stmt pos:start="38:9" pos:end="43:0"><if pos:start="38:9" pos:end="43:0">if <condition pos:start="38:12" pos:end="38:53">(<expr pos:start="38:13" pos:end="38:52"><call pos:start="38:13" pos:end="38:52"><name pos:start="38:13" pos:end="38:20">unlikely</name><argument_list pos:start="38:21" pos:end="38:52">(<argument pos:start="38:22" pos:end="38:51"><expr pos:start="38:22" pos:end="38:51"><name pos:start="38:22" pos:end="38:35"><name pos:start="38:22" pos:end="38:23">ie</name><operator pos:start="38:24" pos:end="38:25">-&gt;</operator><name pos:start="38:26" pos:end="38:35">target_cmd</name></name> <operator pos:start="38:37" pos:end="38:38">!=</operator> <name pos:start="38:40" pos:end="38:51"><name pos:start="38:40" pos:end="38:41">ie</name><operator pos:start="38:42" pos:end="38:43">-&gt;</operator><name pos:start="38:44" pos:end="38:51">host_cmd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="38:55" pos:end="43:0">{<block_content pos:start="39:13" pos:end="40:60">
            <expr_stmt pos:start="39:13" pos:end="40:60"><expr pos:start="39:13" pos:end="40:59"><call pos:start="39:13" pos:end="40:59"><name pos:start="39:13" pos:end="39:19">fprintf</name><argument_list pos:start="39:20" pos:end="40:59">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:26">stderr</name></expr></argument>, <argument pos:start="39:29" pos:end="39:71"><expr pos:start="39:29" pos:end="39:71"><literal type="string" pos:start="39:29" pos:end="39:71">"ERROR: ioctl(%s): target=0x%x host=0x%x\n"</literal></expr></argument>,
                    <argument pos:start="40:21" pos:end="40:28"><expr pos:start="40:21" pos:end="40:28"><name pos:start="40:21" pos:end="40:28"><name pos:start="40:21" pos:end="40:22">ie</name><operator pos:start="40:23" pos:end="40:24">-&gt;</operator><name pos:start="40:25" pos:end="40:28">name</name></name></expr></argument>, <argument pos:start="40:31" pos:end="40:44"><expr pos:start="40:31" pos:end="40:44"><name pos:start="40:31" pos:end="40:44"><name pos:start="40:31" pos:end="40:32">ie</name><operator pos:start="40:33" pos:end="40:34">-&gt;</operator><name pos:start="40:35" pos:end="40:44">target_cmd</name></name></expr></argument>, <argument pos:start="40:47" pos:end="40:58"><expr pos:start="40:47" pos:end="40:58"><name pos:start="40:47" pos:end="40:58"><name pos:start="40:47" pos:end="40:48">ie</name><operator pos:start="40:49" pos:end="40:50">-&gt;</operator><name pos:start="40:51" pos:end="40:58">host_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="42:1" pos:end="42:6">#<cpp:directive pos:start="42:2" pos:end="42:6">endif</cpp:directive></cpp:endif>
        <expr_stmt pos:start="43:9" pos:end="43:13"><expr pos:start="43:9" pos:end="43:12"><name pos:start="43:9" pos:end="43:10">ie</name><operator pos:start="43:11" pos:end="43:12">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function></unit>
