<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16160.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">cpu_x86_fill_host</name><parameter_list pos:start="1:30" pos:end="1:53">(<parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:39">x86_def_t</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">x86_cpu_def</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:35">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">eax</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>, <decl pos:start="5:23" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:23" pos:end="5:25">ebx</name> <init pos:start="5:27" pos:end="5:29">= <expr pos:start="5:29" pos:end="5:29"><literal type="number" pos:start="5:29" pos:end="5:29">0</literal></expr></init></decl>, <decl pos:start="5:32" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:32" pos:end="5:34">ecx</name> <init pos:start="5:36" pos:end="5:38">= <expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">0</literal></expr></init></decl>, <decl pos:start="5:41" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:41" pos:end="5:43">edx</name> <init pos:start="5:45" pos:end="5:47">= <expr pos:start="5:47" pos:end="5:47"><literal type="number" pos:start="5:47" pos:end="5:47">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:31"><expr pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:15">x86_cpu_def</name><operator pos:start="9:16" pos:end="9:17">-&gt;</operator><name pos:start="9:18" pos:end="9:21">name</name></name> <operator pos:start="9:23" pos:end="9:23">=</operator> <literal type="string" pos:start="9:25" pos:end="9:30">"host"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:47"><expr pos:start="11:5" pos:end="11:46"><call pos:start="11:5" pos:end="11:46"><name pos:start="11:5" pos:end="11:14">host_cpuid</name><argument_list pos:start="11:15" pos:end="11:46">(<argument pos:start="11:16" pos:end="11:18"><expr pos:start="11:16" pos:end="11:18"><literal type="number" pos:start="11:16" pos:end="11:18">0x0</literal></expr></argument>, <argument pos:start="11:21" pos:end="11:21"><expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></argument>, <argument pos:start="11:24" pos:end="11:27"><expr pos:start="11:24" pos:end="11:27"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:27">eax</name></expr></argument>, <argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><operator pos:start="11:30" pos:end="11:30">&amp;</operator><name pos:start="11:31" pos:end="11:33">ebx</name></expr></argument>, <argument pos:start="11:36" pos:end="11:39"><expr pos:start="11:36" pos:end="11:39"><operator pos:start="11:36" pos:end="11:36">&amp;</operator><name pos:start="11:37" pos:end="11:39">ecx</name></expr></argument>, <argument pos:start="11:42" pos:end="11:45"><expr pos:start="11:42" pos:end="11:45"><operator pos:start="11:42" pos:end="11:42">&amp;</operator><name pos:start="11:43" pos:end="11:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:15">x86_cpu_def</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:22">level</name></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <name pos:start="13:26" pos:end="13:28">eax</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:15">x86_cpu_def</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:24">vendor1</name></name> <operator pos:start="15:26" pos:end="15:26">=</operator> <name pos:start="15:28" pos:end="15:30">ebx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:15">x86_cpu_def</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:24">vendor2</name></name> <operator pos:start="17:26" pos:end="17:26">=</operator> <name pos:start="17:28" pos:end="17:30">edx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:15">x86_cpu_def</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:24">vendor3</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <name pos:start="19:28" pos:end="19:30">ecx</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><call pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:14">host_cpuid</name><argument_list pos:start="23:15" pos:end="23:46">(<argument pos:start="23:16" pos:end="23:18"><expr pos:start="23:16" pos:end="23:18"><literal type="number" pos:start="23:16" pos:end="23:18">0x1</literal></expr></argument>, <argument pos:start="23:21" pos:end="23:21"><expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr></argument>, <argument pos:start="23:24" pos:end="23:27"><expr pos:start="23:24" pos:end="23:27"><operator pos:start="23:24" pos:end="23:24">&amp;</operator><name pos:start="23:25" pos:end="23:27">eax</name></expr></argument>, <argument pos:start="23:30" pos:end="23:33"><expr pos:start="23:30" pos:end="23:33"><operator pos:start="23:30" pos:end="23:30">&amp;</operator><name pos:start="23:31" pos:end="23:33">ebx</name></expr></argument>, <argument pos:start="23:36" pos:end="23:39"><expr pos:start="23:36" pos:end="23:39"><operator pos:start="23:36" pos:end="23:36">&amp;</operator><name pos:start="23:37" pos:end="23:39">ecx</name></expr></argument>, <argument pos:start="23:42" pos:end="23:45"><expr pos:start="23:42" pos:end="23:45"><operator pos:start="23:42" pos:end="23:42">&amp;</operator><name pos:start="23:43" pos:end="23:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:69"><expr pos:start="25:5" pos:end="25:68"><name pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:15">x86_cpu_def</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:23">family</name></name> <operator pos:start="25:25" pos:end="25:25">=</operator> <operator pos:start="25:27" pos:end="25:27">(</operator><operator pos:start="25:28" pos:end="25:28">(</operator><name pos:start="25:29" pos:end="25:31">eax</name> <operator pos:start="25:33" pos:end="25:34">&gt;&gt;</operator> <literal type="number" pos:start="25:36" pos:end="25:36">8</literal><operator pos:start="25:37" pos:end="25:37">)</operator> <operator pos:start="25:39" pos:end="25:39">&amp;</operator> <literal type="number" pos:start="25:41" pos:end="25:44">0x0F</literal><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:47">+</operator> <operator pos:start="25:49" pos:end="25:49">(</operator><operator pos:start="25:50" pos:end="25:50">(</operator><name pos:start="25:51" pos:end="25:53">eax</name> <operator pos:start="25:55" pos:end="25:56">&gt;&gt;</operator> <literal type="number" pos:start="25:58" pos:end="25:59">20</literal><operator pos:start="25:60" pos:end="25:60">)</operator> <operator pos:start="25:62" pos:end="25:62">&amp;</operator> <literal type="number" pos:start="25:64" pos:end="25:67">0xFF</literal><operator pos:start="25:68" pos:end="25:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:71"><expr pos:start="27:5" pos:end="27:70"><name pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:15">x86_cpu_def</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:22">model</name></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <operator pos:start="27:26" pos:end="27:26">(</operator><operator pos:start="27:27" pos:end="27:27">(</operator><name pos:start="27:28" pos:end="27:30">eax</name> <operator pos:start="27:32" pos:end="27:33">&gt;&gt;</operator> <literal type="number" pos:start="27:35" pos:end="27:35">4</literal><operator pos:start="27:36" pos:end="27:36">)</operator> <operator pos:start="27:38" pos:end="27:38">&amp;</operator> <literal type="number" pos:start="27:40" pos:end="27:43">0x0F</literal><operator pos:start="27:44" pos:end="27:44">)</operator> <operator pos:start="27:46" pos:end="27:46">|</operator> <operator pos:start="27:48" pos:end="27:48">(</operator><operator pos:start="27:49" pos:end="27:49">(</operator><name pos:start="27:50" pos:end="27:52">eax</name> <operator pos:start="27:54" pos:end="27:54">&amp;</operator> <literal type="number" pos:start="27:56" pos:end="27:62">0xF0000</literal><operator pos:start="27:63" pos:end="27:63">)</operator> <operator pos:start="27:65" pos:end="27:66">&gt;&gt;</operator> <literal type="number" pos:start="27:68" pos:end="27:69">12</literal><operator pos:start="27:70" pos:end="27:70">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:15">x86_cpu_def</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:25">stepping</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <name pos:start="29:29" pos:end="29:31">eax</name> <operator pos:start="29:33" pos:end="29:33">&amp;</operator> <literal type="number" pos:start="29:35" pos:end="29:38">0x0F</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:15">x86_cpu_def</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:29">ext_features</name></name> <operator pos:start="31:31" pos:end="31:31">=</operator> <name pos:start="31:33" pos:end="31:35">ecx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:15">x86_cpu_def</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:25">features</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:31">edx</name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:49">(<expr pos:start="37:9" pos:end="37:48"><call pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:19">kvm_enabled</name><argument_list pos:start="37:20" pos:end="37:21">()</argument_list></call> <operator pos:start="37:23" pos:end="37:24">&amp;&amp;</operator> <name pos:start="37:26" pos:end="37:43"><name pos:start="37:26" pos:end="37:36">x86_cpu_def</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:43">level</name></name> <operator pos:start="37:45" pos:end="37:46">&gt;=</operator> <literal type="number" pos:start="37:48" pos:end="37:48">7</literal></expr>)</condition> <block pos:start="37:51" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:101">

        <expr_stmt pos:start="39:9" pos:end="39:101"><expr pos:start="39:9" pos:end="39:100"><name pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:19">x86_cpu_def</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="39:45" pos:end="39:45">=</operator> <call pos:start="39:47" pos:end="39:100"><name pos:start="39:47" pos:end="39:74">kvm_arch_get_supported_cpuid</name><argument_list pos:start="39:75" pos:end="39:100">(<argument pos:start="39:76" pos:end="39:84"><expr pos:start="39:76" pos:end="39:84"><name pos:start="39:76" pos:end="39:84">kvm_state</name></expr></argument>, <argument pos:start="39:87" pos:end="39:89"><expr pos:start="39:87" pos:end="39:89"><literal type="number" pos:start="39:87" pos:end="39:89">0x7</literal></expr></argument>, <argument pos:start="39:92" pos:end="39:92"><expr pos:start="39:92" pos:end="39:92"><literal type="number" pos:start="39:92" pos:end="39:92">0</literal></expr></argument>, <argument pos:start="39:95" pos:end="39:99"><expr pos:start="39:95" pos:end="39:99"><name pos:start="39:95" pos:end="39:99">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:48">

        <expr_stmt pos:start="43:9" pos:end="43:48"><expr pos:start="43:9" pos:end="43:47"><name pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:19">x86_cpu_def</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="43:45" pos:end="43:45">=</operator> <literal type="number" pos:start="43:47" pos:end="43:47">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:54"><expr pos:start="49:5" pos:end="49:53"><call pos:start="49:5" pos:end="49:53"><name pos:start="49:5" pos:end="49:14">host_cpuid</name><argument_list pos:start="49:15" pos:end="49:53">(<argument pos:start="49:16" pos:end="49:25"><expr pos:start="49:16" pos:end="49:25"><literal type="number" pos:start="49:16" pos:end="49:25">0x80000000</literal></expr></argument>, <argument pos:start="49:28" pos:end="49:28"><expr pos:start="49:28" pos:end="49:28"><literal type="number" pos:start="49:28" pos:end="49:28">0</literal></expr></argument>, <argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:34">eax</name></expr></argument>, <argument pos:start="49:37" pos:end="49:40"><expr pos:start="49:37" pos:end="49:40"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:40">ebx</name></expr></argument>, <argument pos:start="49:43" pos:end="49:46"><expr pos:start="49:43" pos:end="49:46"><operator pos:start="49:43" pos:end="49:43">&amp;</operator><name pos:start="49:44" pos:end="49:46">ecx</name></expr></argument>, <argument pos:start="49:49" pos:end="49:52"><expr pos:start="49:49" pos:end="49:52"><operator pos:start="49:49" pos:end="49:49">&amp;</operator><name pos:start="49:50" pos:end="49:52">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:15">x86_cpu_def</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:23">xlevel</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <name pos:start="51:27" pos:end="51:29">eax</name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:54"><expr pos:start="55:5" pos:end="55:53"><call pos:start="55:5" pos:end="55:53"><name pos:start="55:5" pos:end="55:14">host_cpuid</name><argument_list pos:start="55:15" pos:end="55:53">(<argument pos:start="55:16" pos:end="55:25"><expr pos:start="55:16" pos:end="55:25"><literal type="number" pos:start="55:16" pos:end="55:25">0x80000001</literal></expr></argument>, <argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><literal type="number" pos:start="55:28" pos:end="55:28">0</literal></expr></argument>, <argument pos:start="55:31" pos:end="55:34"><expr pos:start="55:31" pos:end="55:34"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:34">eax</name></expr></argument>, <argument pos:start="55:37" pos:end="55:40"><expr pos:start="55:37" pos:end="55:40"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:40">ebx</name></expr></argument>, <argument pos:start="55:43" pos:end="55:46"><expr pos:start="55:43" pos:end="55:46"><operator pos:start="55:43" pos:end="55:43">&amp;</operator><name pos:start="55:44" pos:end="55:46">ecx</name></expr></argument>, <argument pos:start="55:49" pos:end="55:52"><expr pos:start="55:49" pos:end="55:52"><operator pos:start="55:49" pos:end="55:49">&amp;</operator><name pos:start="55:50" pos:end="55:52">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:15">x86_cpu_def</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:30">ext2_features</name></name> <operator pos:start="57:32" pos:end="57:32">=</operator> <name pos:start="57:34" pos:end="57:36">edx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:15">x86_cpu_def</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:30">ext3_features</name></name> <operator pos:start="59:32" pos:end="59:32">=</operator> <name pos:start="59:34" pos:end="59:36">ecx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><call pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:25">cpu_x86_fill_model_id</name><argument_list pos:start="61:26" pos:end="61:48">(<argument pos:start="61:27" pos:end="61:47"><expr pos:start="61:27" pos:end="61:47"><name pos:start="61:27" pos:end="61:47"><name pos:start="61:27" pos:end="61:37">x86_cpu_def</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:47">model_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:32"><name pos:start="63:5" pos:end="63:15">x86_cpu_def</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:32">vendor_override</name></name> <operator pos:start="63:34" pos:end="63:34">=</operator> <literal type="number" pos:start="63:36" pos:end="63:36">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:43">/* Call Centaur's CPUID instruction. */</comment>

    <if_stmt pos:start="69:5" pos:end="89:5"><if pos:start="69:5" pos:end="89:5">if <condition pos:start="69:8" pos:end="73:51">(<expr pos:start="69:9" pos:end="73:50"><name pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:19">x86_cpu_def</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:28">vendor1</name></name> <operator pos:start="69:30" pos:end="69:31">==</operator> <name pos:start="69:33" pos:end="69:50">CPUID_VENDOR_VIA_1</name> <operator pos:start="69:52" pos:end="69:53">&amp;&amp;</operator>

        <name pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:19">x86_cpu_def</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:28">vendor2</name></name> <operator pos:start="71:30" pos:end="71:31">==</operator> <name pos:start="71:33" pos:end="71:50">CPUID_VENDOR_VIA_2</name> <operator pos:start="71:52" pos:end="71:53">&amp;&amp;</operator>

        <name pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:19">x86_cpu_def</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:28">vendor3</name></name> <operator pos:start="73:30" pos:end="73:31">==</operator> <name pos:start="73:33" pos:end="73:50">CPUID_VENDOR_VIA_3</name></expr>)</condition> <block pos:start="73:53" pos:end="89:5">{<block_content pos:start="75:9" pos:end="87:9">

        <expr_stmt pos:start="75:9" pos:end="75:58"><expr pos:start="75:9" pos:end="75:57"><call pos:start="75:9" pos:end="75:57"><name pos:start="75:9" pos:end="75:18">host_cpuid</name><argument_list pos:start="75:19" pos:end="75:57">(<argument pos:start="75:20" pos:end="75:29"><expr pos:start="75:20" pos:end="75:29"><literal type="number" pos:start="75:20" pos:end="75:29">0xC0000000</literal></expr></argument>, <argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><literal type="number" pos:start="75:32" pos:end="75:32">0</literal></expr></argument>, <argument pos:start="75:35" pos:end="75:38"><expr pos:start="75:35" pos:end="75:38"><operator pos:start="75:35" pos:end="75:35">&amp;</operator><name pos:start="75:36" pos:end="75:38">eax</name></expr></argument>, <argument pos:start="75:41" pos:end="75:44"><expr pos:start="75:41" pos:end="75:44"><operator pos:start="75:41" pos:end="75:41">&amp;</operator><name pos:start="75:42" pos:end="75:44">ebx</name></expr></argument>, <argument pos:start="75:47" pos:end="75:50"><expr pos:start="75:47" pos:end="75:50"><operator pos:start="75:47" pos:end="75:47">&amp;</operator><name pos:start="75:48" pos:end="75:50">ecx</name></expr></argument>, <argument pos:start="75:53" pos:end="75:56"><expr pos:start="75:53" pos:end="75:56"><operator pos:start="75:53" pos:end="75:53">&amp;</operator><name pos:start="75:54" pos:end="75:56">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:30">(<expr pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:15">eax</name> <operator pos:start="77:17" pos:end="77:18">&gt;=</operator> <literal type="number" pos:start="77:20" pos:end="77:29">0xC0000001</literal></expr>)</condition> <block pos:start="77:32" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:45">

            <comment type="block" pos:start="79:13" pos:end="79:48">/* Support VIA max extended level */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:39"><expr pos:start="81:13" pos:end="81:38"><name pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:23">x86_cpu_def</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:32">xlevel2</name></name> <operator pos:start="81:34" pos:end="81:34">=</operator> <name pos:start="81:36" pos:end="81:38">eax</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:62"><expr pos:start="83:13" pos:end="83:61"><call pos:start="83:13" pos:end="83:61"><name pos:start="83:13" pos:end="83:22">host_cpuid</name><argument_list pos:start="83:23" pos:end="83:61">(<argument pos:start="83:24" pos:end="83:33"><expr pos:start="83:24" pos:end="83:33"><literal type="number" pos:start="83:24" pos:end="83:33">0xC0000001</literal></expr></argument>, <argument pos:start="83:36" pos:end="83:36"><expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">0</literal></expr></argument>, <argument pos:start="83:39" pos:end="83:42"><expr pos:start="83:39" pos:end="83:42"><operator pos:start="83:39" pos:end="83:39">&amp;</operator><name pos:start="83:40" pos:end="83:42">eax</name></expr></argument>, <argument pos:start="83:45" pos:end="83:48"><expr pos:start="83:45" pos:end="83:48"><operator pos:start="83:45" pos:end="83:45">&amp;</operator><name pos:start="83:46" pos:end="83:48">ebx</name></expr></argument>, <argument pos:start="83:51" pos:end="83:54"><expr pos:start="83:51" pos:end="83:54"><operator pos:start="83:51" pos:end="83:51">&amp;</operator><name pos:start="83:52" pos:end="83:54">ecx</name></expr></argument>, <argument pos:start="83:57" pos:end="83:60"><expr pos:start="83:57" pos:end="83:60"><operator pos:start="83:57" pos:end="83:57">&amp;</operator><name pos:start="83:58" pos:end="83:60">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:45"><expr pos:start="85:13" pos:end="85:44"><name pos:start="85:13" pos:end="85:38"><name pos:start="85:13" pos:end="85:23">x86_cpu_def</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:38">ext4_features</name></name> <operator pos:start="85:40" pos:end="85:40">=</operator> <name pos:start="85:42" pos:end="85:44">edx</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="103:7">/*

     * Every SVM feature requires emulation support in KVM - so we can't just

     * read the host features here. KVM might even support SVM features not

     * available on the host hardware. Just set all bits and mask out the

     * unsupported ones later.

     */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:35"><expr pos:start="105:5" pos:end="105:34"><name pos:start="105:5" pos:end="105:29"><name pos:start="105:5" pos:end="105:15">x86_cpu_def</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:29">svm_features</name></name> <operator pos:start="105:31" pos:end="105:31">=</operator> <operator pos:start="105:33" pos:end="105:33">-</operator><literal type="number" pos:start="105:34" pos:end="105:34">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
