<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27118.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">av_opt_set_defaults2</name><parameter_list pos:start="1:26" pos:end="1:55">(<parameter pos:start="1:27" pos:end="1:33"><decl pos:start="1:27" pos:end="1:33"><type pos:start="1:27" pos:end="1:33"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">s</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:43"><decl pos:start="1:36" pos:end="1:43"><type pos:start="1:36" pos:end="1:43"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:43">mask</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:54"><decl pos:start="1:46" pos:end="1:54"><type pos:start="1:46" pos:end="1:54"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:54">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:5">

<cpp:endif pos:start="5:1" pos:end="5:6">#<cpp:directive pos:start="5:2" pos:end="5:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:20"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">AVOption</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">opt</name> <init pos:start="7:25" pos:end="7:30">= <expr pos:start="7:27" pos:end="7:30"><name pos:start="7:27" pos:end="7:30">NULL</name></expr></init></decl>;</decl_stmt>

    <while pos:start="9:5" pos:end="87:5">while <condition pos:start="9:11" pos:end="9:47">(<expr pos:start="9:12" pos:end="9:46"><operator pos:start="9:12" pos:end="9:12">(</operator><name pos:start="9:13" pos:end="9:15">opt</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <call pos:start="9:19" pos:end="9:37"><name pos:start="9:19" pos:end="9:29">av_opt_next</name><argument_list pos:start="9:30" pos:end="9:37">(<argument pos:start="9:31" pos:end="9:31"><expr pos:start="9:31" pos:end="9:31"><name pos:start="9:31" pos:end="9:31">s</name></expr></argument>, <argument pos:start="9:34" pos:end="9:36"><expr pos:start="9:34" pos:end="9:36"><name pos:start="9:34" pos:end="9:36">opt</name></expr></argument>)</argument_list></call><operator pos:start="9:38" pos:end="9:38">)</operator> <operator pos:start="9:40" pos:end="9:41">!=</operator> <name pos:start="9:43" pos:end="9:46">NULL</name></expr>)</condition> <block pos:start="9:49" pos:end="87:5">{<block_content pos:start="13:9" pos:end="85:9">

<cpp:if pos:start="11:1" pos:end="11:24">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:24">FF_API_OLD_AVOPTIONS</name></expr></cpp:if>

        <if_stmt pos:start="13:9" pos:end="18:0"><if pos:start="13:9" pos:end="18:0">if <condition pos:start="13:12" pos:end="13:41">(<expr pos:start="13:13" pos:end="13:40"><operator pos:start="13:13" pos:end="13:13">(</operator><name pos:start="13:14" pos:end="13:23"><name pos:start="13:14" pos:end="13:16">opt</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:23">flags</name></name> <operator pos:start="13:25" pos:end="13:25">&amp;</operator> <name pos:start="13:27" pos:end="13:30">mask</name><operator pos:start="13:31" pos:end="13:31">)</operator> <operator pos:start="13:33" pos:end="13:34">!=</operator> <name pos:start="13:36" pos:end="13:40">flags</name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="18:0"><block_content pos:start="15:13" pos:end="18:0">

            <continue pos:start="15:13" pos:end="18:0">continue;</continue></block_content></block></if></if_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="19:9" pos:end="85:9">switch <condition pos:start="19:16" pos:end="19:26">(<expr pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:19">opt</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:25">type</name></name></expr>)</condition> <block pos:start="19:28" pos:end="85:9">{<block_content pos:start="21:13" pos:end="83:117">

            <case pos:start="21:13" pos:end="21:35">case <expr pos:start="21:18" pos:end="21:34"><name pos:start="21:18" pos:end="21:34">AV_OPT_TYPE_CONST</name></expr>:</case>

                <comment type="block" pos:start="23:17" pos:end="23:45">/* Nothing to be done here */</comment>

            <break pos:start="25:13" pos:end="25:18">break;</break>

            <case pos:start="27:13" pos:end="27:35">case <expr pos:start="27:18" pos:end="27:34"><name pos:start="27:18" pos:end="27:34">AV_OPT_TYPE_FLAGS</name></expr>:</case>

            <case pos:start="29:13" pos:end="29:33">case <expr pos:start="29:18" pos:end="29:32"><name pos:start="29:18" pos:end="29:32">AV_OPT_TYPE_INT</name></expr>:</case>

            <case pos:start="31:13" pos:end="31:35">case <expr pos:start="31:18" pos:end="31:34"><name pos:start="31:18" pos:end="31:34">AV_OPT_TYPE_INT64</name></expr>:</case>

                <expr_stmt pos:start="33:17" pos:end="33:70"><expr pos:start="33:17" pos:end="33:69"><call pos:start="33:17" pos:end="33:69"><name pos:start="33:17" pos:end="33:30">av_opt_set_int</name><argument_list pos:start="33:31" pos:end="33:69">(<argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><name pos:start="33:32" pos:end="33:32">s</name></expr></argument>, <argument pos:start="33:35" pos:end="33:43"><expr pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:37">opt</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:43">name</name></name></expr></argument>, <argument pos:start="33:46" pos:end="33:65"><expr pos:start="33:46" pos:end="33:65"><name pos:start="33:46" pos:end="33:65"><name pos:start="33:46" pos:end="33:48">opt</name><operator pos:start="33:49" pos:end="33:50">-&gt;</operator><name pos:start="33:51" pos:end="33:61">default_val</name><operator pos:start="33:62" pos:end="33:62">.</operator><name pos:start="33:63" pos:end="33:65">i64</name></name></expr></argument>, <argument pos:start="33:68" pos:end="33:68"><expr pos:start="33:68" pos:end="33:68"><literal type="number" pos:start="33:68" pos:end="33:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

            <case pos:start="37:13" pos:end="37:36">case <expr pos:start="37:18" pos:end="37:35"><name pos:start="37:18" pos:end="37:35">AV_OPT_TYPE_DOUBLE</name></expr>:</case>

            <case pos:start="39:13" pos:end="39:35">case <expr pos:start="39:18" pos:end="39:34"><name pos:start="39:18" pos:end="39:34">AV_OPT_TYPE_FLOAT</name></expr>:</case> <block pos:start="39:37" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:56">

                <decl_stmt pos:start="41:17" pos:end="41:27"><decl pos:start="41:17" pos:end="41:26"><type pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">double</name></type> <name pos:start="41:24" pos:end="41:26">val</name></decl>;</decl_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:43"><expr pos:start="43:17" pos:end="43:42"><name pos:start="43:17" pos:end="43:19">val</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:42"><name pos:start="43:23" pos:end="43:25">opt</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:38">default_val</name><operator pos:start="43:39" pos:end="43:39">.</operator><name pos:start="43:40" pos:end="43:42">dbl</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:56"><expr pos:start="45:17" pos:end="45:55"><call pos:start="45:17" pos:end="45:55"><name pos:start="45:17" pos:end="45:33">av_opt_set_double</name><argument_list pos:start="45:34" pos:end="45:55">(<argument pos:start="45:35" pos:end="45:35"><expr pos:start="45:35" pos:end="45:35"><name pos:start="45:35" pos:end="45:35">s</name></expr></argument>, <argument pos:start="45:38" pos:end="45:46"><expr pos:start="45:38" pos:end="45:46"><name pos:start="45:38" pos:end="45:46"><name pos:start="45:38" pos:end="45:40">opt</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:46">name</name></name></expr></argument>, <argument pos:start="45:49" pos:end="45:51"><expr pos:start="45:49" pos:end="45:51"><name pos:start="45:49" pos:end="45:51">val</name></expr></argument>, <argument pos:start="45:54" pos:end="45:54"><expr pos:start="45:54" pos:end="45:54"><literal type="number" pos:start="45:54" pos:end="45:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="49:13" pos:end="49:18">break;</break>

            <case pos:start="51:13" pos:end="51:38">case <expr pos:start="51:18" pos:end="51:37"><name pos:start="51:18" pos:end="51:37">AV_OPT_TYPE_RATIONAL</name></expr>:</case> <block pos:start="51:40" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:51">

                <decl_stmt pos:start="53:17" pos:end="53:31"><decl pos:start="53:17" pos:end="53:30"><type pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:26">AVRational</name></type> <name pos:start="53:28" pos:end="53:30">val</name></decl>;</decl_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:60"><expr pos:start="55:17" pos:end="55:59"><name pos:start="55:17" pos:end="55:19">val</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:59"><name pos:start="55:23" pos:end="55:28">av_d2q</name><argument_list pos:start="55:29" pos:end="55:59">(<argument pos:start="55:30" pos:end="55:49"><expr pos:start="55:30" pos:end="55:49"><name pos:start="55:30" pos:end="55:49"><name pos:start="55:30" pos:end="55:32">opt</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:45">default_val</name><operator pos:start="55:46" pos:end="55:46">.</operator><name pos:start="55:47" pos:end="55:49">dbl</name></name></expr></argument>, <argument pos:start="55:52" pos:end="55:58"><expr pos:start="55:52" pos:end="55:58"><name pos:start="55:52" pos:end="55:58">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:51"><expr pos:start="57:17" pos:end="57:50"><call pos:start="57:17" pos:end="57:50"><name pos:start="57:17" pos:end="57:28">av_opt_set_q</name><argument_list pos:start="57:29" pos:end="57:50">(<argument pos:start="57:30" pos:end="57:30"><expr pos:start="57:30" pos:end="57:30"><name pos:start="57:30" pos:end="57:30">s</name></expr></argument>, <argument pos:start="57:33" pos:end="57:41"><expr pos:start="57:33" pos:end="57:41"><name pos:start="57:33" pos:end="57:41"><name pos:start="57:33" pos:end="57:35">opt</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:41">name</name></name></expr></argument>, <argument pos:start="57:44" pos:end="57:46"><expr pos:start="57:44" pos:end="57:46"><name pos:start="57:44" pos:end="57:46">val</name></expr></argument>, <argument pos:start="57:49" pos:end="57:49"><expr pos:start="57:49" pos:end="57:49"><literal type="number" pos:start="57:49" pos:end="57:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="61:13" pos:end="61:18">break;</break>

            <case pos:start="63:13" pos:end="63:36">case <expr pos:start="63:18" pos:end="63:35"><name pos:start="63:18" pos:end="63:35">AV_OPT_TYPE_STRING</name></expr>:</case>

            <case pos:start="65:13" pos:end="65:40">case <expr pos:start="65:18" pos:end="65:39"><name pos:start="65:18" pos:end="65:39">AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

            <case pos:start="67:13" pos:end="67:39">case <expr pos:start="67:18" pos:end="67:38"><name pos:start="67:18" pos:end="67:38">AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

            <case pos:start="69:13" pos:end="69:40">case <expr pos:start="69:18" pos:end="69:39"><name pos:start="69:18" pos:end="69:39">AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

                <expr_stmt pos:start="71:17" pos:end="71:66"><expr pos:start="71:17" pos:end="71:65"><call pos:start="71:17" pos:end="71:65"><name pos:start="71:17" pos:end="71:26">av_opt_set</name><argument_list pos:start="71:27" pos:end="71:65">(<argument pos:start="71:28" pos:end="71:28"><expr pos:start="71:28" pos:end="71:28"><name pos:start="71:28" pos:end="71:28">s</name></expr></argument>, <argument pos:start="71:31" pos:end="71:39"><expr pos:start="71:31" pos:end="71:39"><name pos:start="71:31" pos:end="71:39"><name pos:start="71:31" pos:end="71:33">opt</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:39">name</name></name></expr></argument>, <argument pos:start="71:42" pos:end="71:61"><expr pos:start="71:42" pos:end="71:61"><name pos:start="71:42" pos:end="71:61"><name pos:start="71:42" pos:end="71:44">opt</name><operator pos:start="71:45" pos:end="71:46">-&gt;</operator><name pos:start="71:47" pos:end="71:57">default_val</name><operator pos:start="71:58" pos:end="71:58">.</operator><name pos:start="71:59" pos:end="71:61">str</name></name></expr></argument>, <argument pos:start="71:64" pos:end="71:64"><expr pos:start="71:64" pos:end="71:64"><literal type="number" pos:start="71:64" pos:end="71:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="73:17" pos:end="73:22">break;</break>

            <case pos:start="75:13" pos:end="75:36">case <expr pos:start="75:18" pos:end="75:35"><name pos:start="75:18" pos:end="75:35">AV_OPT_TYPE_BINARY</name></expr>:</case>

                <comment type="block" pos:start="77:17" pos:end="77:51">/* Cannot set default for binary */</comment>

            <break pos:start="79:13" pos:end="79:18">break;</break>

            <default pos:start="81:13" pos:end="81:20">default:</default>

                <expr_stmt pos:start="83:17" pos:end="83:117"><expr pos:start="83:17" pos:end="83:116"><call pos:start="83:17" pos:end="83:116"><name pos:start="83:17" pos:end="83:22">av_log</name><argument_list pos:start="83:23" pos:end="83:116">(<argument pos:start="83:24" pos:end="83:24"><expr pos:start="83:24" pos:end="83:24"><name pos:start="83:24" pos:end="83:24">s</name></expr></argument>, <argument pos:start="83:27" pos:end="83:38"><expr pos:start="83:27" pos:end="83:38"><name pos:start="83:27" pos:end="83:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="83:41" pos:end="83:93"><expr pos:start="83:41" pos:end="83:93"><literal type="string" pos:start="83:41" pos:end="83:93">"AVOption type %d of option %s not implemented yet\n"</literal></expr></argument>, <argument pos:start="83:96" pos:end="83:104"><expr pos:start="83:96" pos:end="83:104"><name pos:start="83:96" pos:end="83:104"><name pos:start="83:96" pos:end="83:98">opt</name><operator pos:start="83:99" pos:end="83:100">-&gt;</operator><name pos:start="83:101" pos:end="83:104">type</name></name></expr></argument>, <argument pos:start="83:107" pos:end="83:115"><expr pos:start="83:107" pos:end="83:115"><name pos:start="83:107" pos:end="83:115"><name pos:start="83:107" pos:end="83:109">opt</name><operator pos:start="83:110" pos:end="83:111">-&gt;</operator><name pos:start="83:112" pos:end="83:115">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
