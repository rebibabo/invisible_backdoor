<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2662.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">serial_xmit</name><parameter_list pos:start="1:24" pos:end="1:39">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:35">SerialState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:28">

    <do pos:start="5:5" pos:end="77:40">do <block pos:start="5:8" pos:end="77:5">{<block_content pos:start="7:9" pos:end="69:25">

        <expr_stmt pos:start="7:9" pos:end="7:42"><expr pos:start="7:9" pos:end="7:41"><call pos:start="7:9" pos:end="7:41"><name pos:start="7:9" pos:end="7:14">assert</name><argument_list pos:start="7:15" pos:end="7:41">(<argument pos:start="7:16" pos:end="7:40"><expr pos:start="7:16" pos:end="7:40"><operator pos:start="7:16" pos:end="7:16">!</operator><operator pos:start="7:17" pos:end="7:17">(</operator><name pos:start="7:18" pos:end="7:23"><name pos:start="7:18" pos:end="7:18">s</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:23">lsr</name></name> <operator pos:start="7:25" pos:end="7:25">&amp;</operator> <name pos:start="7:27" pos:end="7:39">UART_LSR_TEMT</name><operator pos:start="7:40" pos:end="7:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="9:9" pos:end="43:9"><if pos:start="9:9" pos:end="43:9">if <condition pos:start="9:12" pos:end="9:30">(<expr pos:start="9:13" pos:end="9:29"><name pos:start="9:13" pos:end="9:24"><name pos:start="9:13" pos:end="9:13">s</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:24">tsr_retry</name></name> <operator pos:start="9:26" pos:end="9:27">==</operator> <literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr>)</condition> <block pos:start="9:32" pos:end="43:9">{<block_content pos:start="11:13" pos:end="41:13">

            <expr_stmt pos:start="11:13" pos:end="11:46"><expr pos:start="11:13" pos:end="11:45"><call pos:start="11:13" pos:end="11:45"><name pos:start="11:13" pos:end="11:18">assert</name><argument_list pos:start="11:19" pos:end="11:45">(<argument pos:start="11:20" pos:end="11:44"><expr pos:start="11:20" pos:end="11:44"><operator pos:start="11:20" pos:end="11:20">!</operator><operator pos:start="11:21" pos:end="11:21">(</operator><name pos:start="11:22" pos:end="11:27"><name pos:start="11:22" pos:end="11:22">s</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:27">lsr</name></name> <operator pos:start="11:29" pos:end="11:29">&amp;</operator> <name pos:start="11:31" pos:end="11:43">UART_LSR_THRE</name><operator pos:start="11:44" pos:end="11:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="15:13" pos:end="33:13"><if pos:start="15:13" pos:end="27:13">if <condition pos:start="15:16" pos:end="15:37">(<expr pos:start="15:17" pos:end="15:36"><name pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:17">s</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:22">fcr</name></name> <operator pos:start="15:24" pos:end="15:24">&amp;</operator> <name pos:start="15:26" pos:end="15:36">UART_FCR_FE</name></expr>)</condition> <block pos:start="15:39" pos:end="27:13">{<block_content pos:start="17:17" pos:end="25:17">

                <expr_stmt pos:start="17:17" pos:end="17:55"><expr pos:start="17:17" pos:end="17:54"><call pos:start="17:17" pos:end="17:54"><name pos:start="17:17" pos:end="17:22">assert</name><argument_list pos:start="17:23" pos:end="17:54">(<argument pos:start="17:24" pos:end="17:53"><expr pos:start="17:24" pos:end="17:53"><operator pos:start="17:24" pos:end="17:24">!</operator><call pos:start="17:25" pos:end="17:53"><name pos:start="17:25" pos:end="17:38">fifo8_is_empty</name><argument_list pos:start="17:39" pos:end="17:53">(<argument pos:start="17:40" pos:end="17:52"><expr pos:start="17:40" pos:end="17:52"><operator pos:start="17:40" pos:end="17:40">&amp;</operator><name pos:start="17:41" pos:end="17:52"><name pos:start="17:41" pos:end="17:41">s</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:52">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="19:17" pos:end="19:50"><expr pos:start="19:17" pos:end="19:49"><name pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:17">s</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:22">tsr</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:49"><name pos:start="19:26" pos:end="19:34">fifo8_pop</name><argument_list pos:start="19:35" pos:end="19:49">(<argument pos:start="19:36" pos:end="19:48"><expr pos:start="19:36" pos:end="19:48"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:48"><name pos:start="19:37" pos:end="19:37">s</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:48">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="21:17" pos:end="25:17"><if pos:start="21:17" pos:end="25:17">if <condition pos:start="21:20" pos:end="21:38">(<expr pos:start="21:21" pos:end="21:37"><operator pos:start="21:21" pos:end="21:21">!</operator><name pos:start="21:22" pos:end="21:37"><name pos:start="21:22" pos:end="21:22">s</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:33">xmit_fifo</name><operator pos:start="21:34" pos:end="21:34">.</operator><name pos:start="21:35" pos:end="21:37">num</name></name></expr>)</condition> <block pos:start="21:40" pos:end="25:17">{<block_content pos:start="23:21" pos:end="23:44">

                    <expr_stmt pos:start="23:21" pos:end="23:44"><expr pos:start="23:21" pos:end="23:43"><name pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:26">lsr</name></name> <operator pos:start="23:28" pos:end="23:29">|=</operator> <name pos:start="23:31" pos:end="23:43">UART_LSR_THRE</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="27:15" pos:end="33:13">else <block pos:start="27:20" pos:end="33:13">{<block_content pos:start="29:17" pos:end="31:40">

                <expr_stmt pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:22">tsr</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:26">s</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:31">thr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:40"><expr pos:start="31:17" pos:end="31:39"><name pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:22">lsr</name></name> <operator pos:start="31:24" pos:end="31:25">|=</operator> <name pos:start="31:27" pos:end="31:39">UART_LSR_THRE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="35:13" pos:end="41:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:61">(<expr pos:start="35:17" pos:end="35:60"><operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:23"><name pos:start="35:18" pos:end="35:18">s</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:23">lsr</name></name> <operator pos:start="35:25" pos:end="35:25">&amp;</operator> <name pos:start="35:27" pos:end="35:39">UART_LSR_THRE</name><operator pos:start="35:40" pos:end="35:40">)</operator> <operator pos:start="35:42" pos:end="35:43">&amp;&amp;</operator> <operator pos:start="35:45" pos:end="35:45">!</operator><name pos:start="35:46" pos:end="35:60"><name pos:start="35:46" pos:end="35:46">s</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:60">thr_ipending</name></name></expr>)</condition> <block pos:start="35:63" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:37">

                <expr_stmt pos:start="37:17" pos:end="37:36"><expr pos:start="37:17" pos:end="37:35"><name pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:31">thr_ipending</name></name> <operator pos:start="37:33" pos:end="37:33">=</operator> <literal type="number" pos:start="37:35" pos:end="37:35">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:37"><expr pos:start="39:17" pos:end="39:36"><call pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:33">serial_update_irq</name><argument_list pos:start="39:34" pos:end="39:36">(<argument pos:start="39:35" pos:end="39:35"><expr pos:start="39:35" pos:end="39:35"><name pos:start="39:35" pos:end="39:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="47:9" pos:end="67:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:18">mcr</name></name> <operator pos:start="47:20" pos:end="47:20">&amp;</operator> <name pos:start="47:22" pos:end="47:34">UART_MCR_LOOP</name></expr>)</condition> <block pos:start="47:37" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:43">

            <comment type="block" pos:start="49:13" pos:end="49:68">/* in loopback mode, say that we just received a char */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:43"><expr pos:start="51:13" pos:end="51:42"><call pos:start="51:13" pos:end="51:42"><name pos:start="51:13" pos:end="51:27">serial_receive1</name><argument_list pos:start="51:28" pos:end="51:42">(<argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><name pos:start="51:29" pos:end="51:29">s</name></expr></argument>, <argument pos:start="51:32" pos:end="51:38"><expr pos:start="51:32" pos:end="51:38"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:33">s</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:38">tsr</name></name></expr></argument>, <argument pos:start="51:41" pos:end="51:41"><expr pos:start="51:41" pos:end="51:41"><literal type="number" pos:start="51:41" pos:end="51:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="53:11" pos:end="67:9">else if <condition pos:start="53:19" pos:end="53:62">(<expr pos:start="53:20" pos:end="53:61"><call pos:start="53:20" pos:end="53:56"><name pos:start="53:20" pos:end="53:36">qemu_chr_fe_write</name><argument_list pos:start="53:37" pos:end="53:56">(<argument pos:start="53:38" pos:end="53:43"><expr pos:start="53:38" pos:end="53:43"><name pos:start="53:38" pos:end="53:43"><name pos:start="53:38" pos:end="53:38">s</name><operator pos:start="53:39" pos:end="53:40">-&gt;</operator><name pos:start="53:41" pos:end="53:43">chr</name></name></expr></argument>, <argument pos:start="53:46" pos:end="53:52"><expr pos:start="53:46" pos:end="53:52"><operator pos:start="53:46" pos:end="53:46">&amp;</operator><name pos:start="53:47" pos:end="53:52"><name pos:start="53:47" pos:end="53:47">s</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:52">tsr</name></name></expr></argument>, <argument pos:start="53:55" pos:end="53:55"><expr pos:start="53:55" pos:end="53:55"><literal type="number" pos:start="53:55" pos:end="53:55">1</literal></expr></argument>)</argument_list></call> <operator pos:start="53:58" pos:end="53:59">!=</operator> <literal type="number" pos:start="53:61" pos:end="53:61">1</literal></expr>)</condition> <block pos:start="53:64" pos:end="67:9">{<block_content pos:start="55:13" pos:end="65:13">

            <if_stmt pos:start="55:13" pos:end="65:13"><if pos:start="55:13" pos:end="65:13">if <condition pos:start="55:16" pos:end="59:62">(<expr pos:start="55:17" pos:end="59:61"><name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:28">tsr_retry</name></name> <operator pos:start="55:30" pos:end="55:30">&lt;</operator> <name pos:start="55:32" pos:end="55:45">MAX_XMIT_RETRY</name> <operator pos:start="55:47" pos:end="55:48">&amp;&amp;</operator>

                <call pos:start="57:17" pos:end="59:57"><name pos:start="57:17" pos:end="57:37">qemu_chr_fe_add_watch</name><argument_list pos:start="57:38" pos:end="59:57">(<argument pos:start="57:39" pos:end="57:44"><expr pos:start="57:39" pos:end="57:44"><name pos:start="57:39" pos:end="57:44"><name pos:start="57:39" pos:end="57:39">s</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:44">chr</name></name></expr></argument>, <argument pos:start="57:47" pos:end="57:63"><expr pos:start="57:47" pos:end="57:63"><name pos:start="57:47" pos:end="57:54">G_IO_OUT</name><operator pos:start="57:55" pos:end="57:55">|</operator><name pos:start="57:56" pos:end="57:63">G_IO_HUP</name></expr></argument>,

                                      <argument pos:start="59:39" pos:end="59:53"><expr pos:start="59:39" pos:end="59:53"><name pos:start="59:39" pos:end="59:53">serial_watch_cb</name></expr></argument>, <argument pos:start="59:56" pos:end="59:56"><expr pos:start="59:56" pos:end="59:56"><name pos:start="59:56" pos:end="59:56">s</name></expr></argument>)</argument_list></call> <operator pos:start="59:59" pos:end="59:59">&gt;</operator> <literal type="number" pos:start="59:61" pos:end="59:61">0</literal></expr>)</condition> <block pos:start="59:64" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:23">

                <expr_stmt pos:start="61:17" pos:end="61:31"><expr pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:28">tsr_retry</name></name><operator pos:start="61:29" pos:end="61:30">++</operator></expr>;</expr_stmt>

                <return pos:start="63:17" pos:end="63:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:25"><expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:20">tsr_retry</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="75:58">/* Transmit another byte if it is already available. It is only

           possible when FIFO is enabled and not empty. */</comment>

    </block_content>}</block> while <condition pos:start="77:13" pos:end="77:39">(<expr pos:start="77:14" pos:end="77:38"><operator pos:start="77:14" pos:end="77:14">!</operator><operator pos:start="77:15" pos:end="77:15">(</operator><name pos:start="77:16" pos:end="77:21"><name pos:start="77:16" pos:end="77:16">s</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:21">lsr</name></name> <operator pos:start="77:23" pos:end="77:23">&amp;</operator> <name pos:start="77:25" pos:end="77:37">UART_LSR_THRE</name><operator pos:start="77:38" pos:end="77:38">)</operator></expr>)</condition>;</do>



    <expr_stmt pos:start="81:5" pos:end="81:60"><expr pos:start="81:5" pos:end="81:59"><name pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:19">last_xmit_ts</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:59"><name pos:start="81:23" pos:end="81:39">qemu_clock_get_ns</name><argument_list pos:start="81:40" pos:end="81:59">(<argument pos:start="81:41" pos:end="81:58"><expr pos:start="81:41" pos:end="81:58"><name pos:start="81:41" pos:end="81:58">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:28"><expr pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:10"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:10">lsr</name></name> <operator pos:start="83:12" pos:end="83:13">|=</operator> <name pos:start="83:15" pos:end="83:27">UART_LSR_TEMT</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
