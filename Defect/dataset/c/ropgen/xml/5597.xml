<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5597.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">tcx_realizefn</name><parameter_list pos:start="1:26" pos:end="1:57">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">DeviceState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:49">Error</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:53">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">SysBusDevice</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">sbd</name> <init pos:start="5:23" pos:end="5:43">= <expr pos:start="5:25" pos:end="5:43"><call pos:start="5:25" pos:end="5:43"><name pos:start="5:25" pos:end="5:38">SYS_BUS_DEVICE</name><argument_list pos:start="5:39" pos:end="5:43">(<argument pos:start="5:40" pos:end="5:42"><expr pos:start="5:40" pos:end="5:42"><name pos:start="5:40" pos:end="5:42">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">TCXState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:26">= <expr pos:start="7:19" pos:end="7:26"><call pos:start="7:19" pos:end="7:26"><name pos:start="7:19" pos:end="7:21">TCX</name><argument_list pos:start="7:22" pos:end="7:26">(<argument pos:start="7:23" pos:end="7:25"><expr pos:start="7:23" pos:end="7:25"><name pos:start="7:23" pos:end="7:25">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:26">vram_offset</name> <init pos:start="9:28" pos:end="9:30">= <expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">vram_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:24">fcode_filename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:69"><expr pos:start="19:5" pos:end="21:68"><call pos:start="19:5" pos:end="21:68"><name pos:start="19:5" pos:end="19:26">memory_region_init_ram</name><argument_list pos:start="19:27" pos:end="21:68">(<argument pos:start="19:28" pos:end="19:39"><expr pos:start="19:28" pos:end="19:39"><operator pos:start="19:28" pos:end="19:28">&amp;</operator><name pos:start="19:29" pos:end="19:39"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:39">vram_mem</name></name></expr></argument>, <argument pos:start="19:42" pos:end="19:50"><expr pos:start="19:42" pos:end="19:50"><call pos:start="19:42" pos:end="19:50"><name pos:start="19:42" pos:end="19:47">OBJECT</name><argument_list pos:start="19:48" pos:end="19:50">(<argument pos:start="19:49" pos:end="19:49"><expr pos:start="19:49" pos:end="19:49"><name pos:start="19:49" pos:end="19:49">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:53" pos:end="19:62"><expr pos:start="19:53" pos:end="19:62"><literal type="string" pos:start="19:53" pos:end="19:62">"tcx.vram"</literal></expr></argument>,

                           <argument pos:start="21:28" pos:end="21:53"><expr pos:start="21:28" pos:end="21:53"><name pos:start="21:28" pos:end="21:39"><name pos:start="21:28" pos:end="21:28">s</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:39">vram_size</name></name> <operator pos:start="21:41" pos:end="21:41">*</operator> <operator pos:start="21:43" pos:end="21:43">(</operator><literal type="number" pos:start="21:44" pos:end="21:46">1</literal> <operator pos:start="21:46" pos:end="21:46">+</operator> <literal type="number" pos:start="21:48" pos:end="21:50">4</literal> <operator pos:start="21:50" pos:end="21:50">+</operator> <literal type="number" pos:start="21:52" pos:end="21:52">4</literal><operator pos:start="21:53" pos:end="21:53">)</operator></expr></argument>, <argument pos:start="21:56" pos:end="21:67"><expr pos:start="21:56" pos:end="21:67"><operator pos:start="21:56" pos:end="21:56">&amp;</operator><name pos:start="21:57" pos:end="21:67">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><call pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:31">vmstate_register_ram_global</name><argument_list pos:start="23:32" pos:end="23:45">(<argument pos:start="23:33" pos:end="23:44"><expr pos:start="23:33" pos:end="23:44"><operator pos:start="23:33" pos:end="23:33">&amp;</operator><name pos:start="23:34" pos:end="23:44"><name pos:start="23:34" pos:end="23:34">s</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:44">vram_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:64"><expr pos:start="25:5" pos:end="25:63"><call pos:start="25:5" pos:end="25:63"><name pos:start="25:5" pos:end="25:25">memory_region_set_log</name><argument_list pos:start="25:26" pos:end="25:63">(<argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:38"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:38">vram_mem</name></name></expr></argument>, <argument pos:start="25:41" pos:end="25:44"><expr pos:start="25:41" pos:end="25:44"><name pos:start="25:41" pos:end="25:44">true</name></expr></argument>, <argument pos:start="25:47" pos:end="25:62"><expr pos:start="25:47" pos:end="25:62"><name pos:start="25:47" pos:end="25:62">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:56"><expr pos:start="27:5" pos:end="27:55"><name pos:start="27:5" pos:end="27:13">vram_base</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:55"><name pos:start="27:17" pos:end="27:41">memory_region_get_ram_ptr</name><argument_list pos:start="27:42" pos:end="27:55">(<argument pos:start="27:43" pos:end="27:54"><expr pos:start="27:43" pos:end="27:54"><operator pos:start="27:43" pos:end="27:43">&amp;</operator><name pos:start="27:44" pos:end="27:54"><name pos:start="27:44" pos:end="27:44">s</name><operator pos:start="27:45" pos:end="27:46">-&gt;</operator><name pos:start="27:47" pos:end="27:54">vram_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:28">/* 10/ROM : FCode ROM */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><call pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:31">vmstate_register_ram_global</name><argument_list pos:start="33:32" pos:end="33:40">(<argument pos:start="33:33" pos:end="33:39"><expr pos:start="33:33" pos:end="33:39"><operator pos:start="33:33" pos:end="33:33">&amp;</operator><name pos:start="33:34" pos:end="33:39"><name pos:start="33:34" pos:end="33:34">s</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:39">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:71"><expr pos:start="35:5" pos:end="35:70"><name pos:start="35:5" pos:end="35:18">fcode_filename</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:70"><name pos:start="35:22" pos:end="35:35">qemu_find_file</name><argument_list pos:start="35:36" pos:end="35:70">(<argument pos:start="35:37" pos:end="35:55"><expr pos:start="35:37" pos:end="35:55"><name pos:start="35:37" pos:end="35:55">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="35:58" pos:end="35:69"><expr pos:start="35:58" pos:end="35:69"><name pos:start="35:58" pos:end="35:69">TCX_ROM_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="51:5">if <condition pos:start="37:8" pos:end="37:23">(<expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:22">fcode_filename</name></expr>)</condition> <block pos:start="37:25" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:9">

        <expr_stmt pos:start="39:9" pos:end="41:54"><expr pos:start="39:9" pos:end="41:53"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="41:53"><name pos:start="39:15" pos:end="39:33">load_image_targphys</name><argument_list pos:start="39:34" pos:end="41:53">(<argument pos:start="39:35" pos:end="39:48"><expr pos:start="39:35" pos:end="39:48"><name pos:start="39:35" pos:end="39:48">fcode_filename</name></expr></argument>, <argument pos:start="39:51" pos:end="39:62"><expr pos:start="39:51" pos:end="39:62"><name pos:start="39:51" pos:end="39:62"><name pos:start="39:51" pos:end="39:51">s</name><operator pos:start="39:52" pos:end="39:53">-&gt;</operator><name pos:start="39:54" pos:end="39:62">prom_addr</name></name></expr></argument>,

                                  <argument pos:start="41:35" pos:end="41:52"><expr pos:start="41:35" pos:end="41:52"><name pos:start="41:35" pos:end="41:52">FCODE_MAX_ROM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><call pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:14">g_free</name><argument_list pos:start="43:15" pos:end="43:30">(<argument pos:start="43:16" pos:end="43:29"><expr pos:start="43:16" pos:end="43:29"><name pos:start="43:16" pos:end="43:29">fcode_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:48">(<expr pos:start="45:13" pos:end="45:47"><name pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:15">ret</name> <argument_list type="generic" pos:start="45:17" pos:end="45:28">&lt; <argument pos:start="45:19" pos:end="45:26"><expr pos:start="45:19" pos:end="45:26"><literal type="number" pos:start="45:19" pos:end="45:19">0</literal> <operator pos:start="45:21" pos:end="45:22">||</operator> <name pos:start="45:24" pos:end="45:26">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="45:30" pos:end="45:47">FCODE_MAX_ROM_SIZE</name></expr>)</condition> <block pos:start="45:50" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:72">

            <expr_stmt pos:start="47:13" pos:end="47:72"><expr pos:start="47:13" pos:end="47:71"><call pos:start="47:13" pos:end="47:71"><name pos:start="47:13" pos:end="47:24">error_report</name><argument_list pos:start="47:25" pos:end="47:71">(<argument pos:start="47:26" pos:end="47:56"><expr pos:start="47:26" pos:end="47:56"><literal type="string" pos:start="47:26" pos:end="47:56">"tcx: could not load prom '%s'"</literal></expr></argument>, <argument pos:start="47:59" pos:end="47:70"><expr pos:start="47:59" pos:end="47:70"><name pos:start="47:59" pos:end="47:70">TCX_ROM_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:30">/* 0/DFB8 : 8-bit plane */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:11">vram</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:23">vram_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:8">size</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <name pos:start="59:12" pos:end="59:23"><name pos:start="59:12" pos:end="59:12">s</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:23">vram_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:62"><expr pos:start="61:5" pos:end="63:61"><call pos:start="61:5" pos:end="63:61"><name pos:start="61:5" pos:end="61:28">memory_region_init_alias</name><argument_list pos:start="61:29" pos:end="63:61">(<argument pos:start="61:30" pos:end="61:42"><expr pos:start="61:30" pos:end="61:42"><operator pos:start="61:30" pos:end="61:30">&amp;</operator><name pos:start="61:31" pos:end="61:42"><name pos:start="61:31" pos:end="61:31">s</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:42">vram_8bit</name></name></expr></argument>, <argument pos:start="61:45" pos:end="61:53"><expr pos:start="61:45" pos:end="61:53"><call pos:start="61:45" pos:end="61:53"><name pos:start="61:45" pos:end="61:50">OBJECT</name><argument_list pos:start="61:51" pos:end="61:53">(<argument pos:start="61:52" pos:end="61:52"><expr pos:start="61:52" pos:end="61:52"><name pos:start="61:52" pos:end="61:52">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:56" pos:end="61:70"><expr pos:start="61:56" pos:end="61:70"><literal type="string" pos:start="61:56" pos:end="61:70">"tcx.vram.8bit"</literal></expr></argument>,

                             <argument pos:start="63:30" pos:end="63:41"><expr pos:start="63:30" pos:end="63:41"><operator pos:start="63:30" pos:end="63:30">&amp;</operator><name pos:start="63:31" pos:end="63:41"><name pos:start="63:31" pos:end="63:31">s</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:41">vram_mem</name></name></expr></argument>, <argument pos:start="63:44" pos:end="63:54"><expr pos:start="63:44" pos:end="63:54"><name pos:start="63:44" pos:end="63:54">vram_offset</name></expr></argument>, <argument pos:start="63:57" pos:end="63:60"><expr pos:start="63:57" pos:end="63:60"><name pos:start="63:57" pos:end="63:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:41"><expr pos:start="65:5" pos:end="65:40"><call pos:start="65:5" pos:end="65:40"><name pos:start="65:5" pos:end="65:20">sysbus_init_mmio</name><argument_list pos:start="65:21" pos:end="65:40">(<argument pos:start="65:22" pos:end="65:24"><expr pos:start="65:22" pos:end="65:24"><name pos:start="65:22" pos:end="65:24">sbd</name></expr></argument>, <argument pos:start="65:27" pos:end="65:39"><expr pos:start="65:27" pos:end="65:39"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:39"><name pos:start="65:28" pos:end="65:28">s</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:39">vram_8bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:24"><expr pos:start="67:5" pos:end="67:23"><name pos:start="67:5" pos:end="67:15">vram_offset</name> <operator pos:start="67:17" pos:end="67:18">+=</operator> <name pos:start="67:20" pos:end="67:23">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:22"><expr pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:13">vram_base</name> <operator pos:start="69:15" pos:end="69:16">+=</operator> <name pos:start="69:18" pos:end="69:21">size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:31">/* 1/DFB24 : 24bit plane */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:28"><expr pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:8">size</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <name pos:start="75:12" pos:end="75:23"><name pos:start="75:12" pos:end="75:12">s</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:23">vram_size</name></name> <operator pos:start="75:25" pos:end="75:25">*</operator> <literal type="number" pos:start="75:27" pos:end="75:27">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:38"><expr pos:start="77:5" pos:end="77:37"><name pos:start="77:5" pos:end="77:13"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:13">vram24</name></name> <operator pos:start="77:15" pos:end="77:15">=</operator> <operator pos:start="77:17" pos:end="77:17">(</operator><name pos:start="77:18" pos:end="77:25">uint32_t</name> <operator pos:start="77:27" pos:end="77:27">*</operator><operator pos:start="77:28" pos:end="77:28">)</operator><name pos:start="77:29" pos:end="77:37">vram_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:35"><expr pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:20">vram24_offset</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:34">vram_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:62"><expr pos:start="81:5" pos:end="83:61"><call pos:start="81:5" pos:end="83:61"><name pos:start="81:5" pos:end="81:28">memory_region_init_alias</name><argument_list pos:start="81:29" pos:end="83:61">(<argument pos:start="81:30" pos:end="81:43"><expr pos:start="81:30" pos:end="81:43"><operator pos:start="81:30" pos:end="81:30">&amp;</operator><name pos:start="81:31" pos:end="81:43"><name pos:start="81:31" pos:end="81:31">s</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:43">vram_24bit</name></name></expr></argument>, <argument pos:start="81:46" pos:end="81:54"><expr pos:start="81:46" pos:end="81:54"><call pos:start="81:46" pos:end="81:54"><name pos:start="81:46" pos:end="81:51">OBJECT</name><argument_list pos:start="81:52" pos:end="81:54">(<argument pos:start="81:53" pos:end="81:53"><expr pos:start="81:53" pos:end="81:53"><name pos:start="81:53" pos:end="81:53">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:57" pos:end="81:72"><expr pos:start="81:57" pos:end="81:72"><literal type="string" pos:start="81:57" pos:end="81:72">"tcx.vram.24bit"</literal></expr></argument>,

                             <argument pos:start="83:30" pos:end="83:41"><expr pos:start="83:30" pos:end="83:41"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:41"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:41">vram_mem</name></name></expr></argument>, <argument pos:start="83:44" pos:end="83:54"><expr pos:start="83:44" pos:end="83:54"><name pos:start="83:44" pos:end="83:54">vram_offset</name></expr></argument>, <argument pos:start="83:57" pos:end="83:60"><expr pos:start="83:57" pos:end="83:60"><name pos:start="83:57" pos:end="83:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:42"><expr pos:start="85:5" pos:end="85:41"><call pos:start="85:5" pos:end="85:41"><name pos:start="85:5" pos:end="85:20">sysbus_init_mmio</name><argument_list pos:start="85:21" pos:end="85:41">(<argument pos:start="85:22" pos:end="85:24"><expr pos:start="85:22" pos:end="85:24"><name pos:start="85:22" pos:end="85:24">sbd</name></expr></argument>, <argument pos:start="85:27" pos:end="85:40"><expr pos:start="85:27" pos:end="85:40"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:40"><name pos:start="85:28" pos:end="85:28">s</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:40">vram_24bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:24"><expr pos:start="87:5" pos:end="87:23"><name pos:start="87:5" pos:end="87:15">vram_offset</name> <operator pos:start="87:17" pos:end="87:18">+=</operator> <name pos:start="87:20" pos:end="87:23">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:22"><expr pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:13">vram_base</name> <operator pos:start="89:15" pos:end="89:16">+=</operator> <name pos:start="89:18" pos:end="89:21">size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:36">/* 4/RDFB32 : Raw Framebuffer */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:8">size</name> <operator pos:start="95:10" pos:end="95:10">=</operator> <name pos:start="95:12" pos:end="95:23"><name pos:start="95:12" pos:end="95:12">s</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:23">vram_size</name></name> <operator pos:start="95:25" pos:end="95:25">*</operator> <literal type="number" pos:start="95:27" pos:end="95:27">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:38"><expr pos:start="97:5" pos:end="97:37"><name pos:start="97:5" pos:end="97:13"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:13">cplane</name></name> <operator pos:start="97:15" pos:end="97:15">=</operator> <operator pos:start="97:17" pos:end="97:17">(</operator><name pos:start="97:18" pos:end="97:25">uint32_t</name> <operator pos:start="97:27" pos:end="97:27">*</operator><operator pos:start="97:28" pos:end="97:28">)</operator><name pos:start="97:29" pos:end="97:37">vram_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:35"><expr pos:start="99:5" pos:end="99:34"><name pos:start="99:5" pos:end="99:20"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:20">cplane_offset</name></name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:34">vram_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="103:62"><expr pos:start="101:5" pos:end="103:61"><call pos:start="101:5" pos:end="103:61"><name pos:start="101:5" pos:end="101:28">memory_region_init_alias</name><argument_list pos:start="101:29" pos:end="103:61">(<argument pos:start="101:30" pos:end="101:44"><expr pos:start="101:30" pos:end="101:44"><operator pos:start="101:30" pos:end="101:30">&amp;</operator><name pos:start="101:31" pos:end="101:44"><name pos:start="101:31" pos:end="101:31">s</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:44">vram_cplane</name></name></expr></argument>, <argument pos:start="101:47" pos:end="101:55"><expr pos:start="101:47" pos:end="101:55"><call pos:start="101:47" pos:end="101:55"><name pos:start="101:47" pos:end="101:52">OBJECT</name><argument_list pos:start="101:53" pos:end="101:55">(<argument pos:start="101:54" pos:end="101:54"><expr pos:start="101:54" pos:end="101:54"><name pos:start="101:54" pos:end="101:54">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:58" pos:end="101:74"><expr pos:start="101:58" pos:end="101:74"><literal type="string" pos:start="101:58" pos:end="101:74">"tcx.vram.cplane"</literal></expr></argument>,

                             <argument pos:start="103:30" pos:end="103:41"><expr pos:start="103:30" pos:end="103:41"><operator pos:start="103:30" pos:end="103:30">&amp;</operator><name pos:start="103:31" pos:end="103:41"><name pos:start="103:31" pos:end="103:31">s</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:41">vram_mem</name></name></expr></argument>, <argument pos:start="103:44" pos:end="103:54"><expr pos:start="103:44" pos:end="103:54"><name pos:start="103:44" pos:end="103:54">vram_offset</name></expr></argument>, <argument pos:start="103:57" pos:end="103:60"><expr pos:start="103:57" pos:end="103:60"><name pos:start="103:57" pos:end="103:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:43"><expr pos:start="105:5" pos:end="105:42"><call pos:start="105:5" pos:end="105:42"><name pos:start="105:5" pos:end="105:20">sysbus_init_mmio</name><argument_list pos:start="105:21" pos:end="105:42">(<argument pos:start="105:22" pos:end="105:24"><expr pos:start="105:22" pos:end="105:24"><name pos:start="105:22" pos:end="105:24">sbd</name></expr></argument>, <argument pos:start="105:27" pos:end="105:41"><expr pos:start="105:27" pos:end="105:41"><operator pos:start="105:27" pos:end="105:27">&amp;</operator><name pos:start="105:28" pos:end="105:41"><name pos:start="105:28" pos:end="105:28">s</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:41">vram_cplane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:73">/* 9/THC24bits : NetBSD writes here even with 8-bit display: dummy */</comment>

    <if_stmt pos:start="111:5" pos:end="119:5"><if pos:start="111:5" pos:end="119:5">if <condition pos:start="111:8" pos:end="111:22">(<expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:16">depth</name></name> <operator pos:start="111:18" pos:end="111:19">==</operator> <literal type="number" pos:start="111:21" pos:end="111:21">8</literal></expr>)</condition> <block pos:start="111:24" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:41">

        <expr_stmt pos:start="113:9" pos:end="115:58"><expr pos:start="113:9" pos:end="115:57"><call pos:start="113:9" pos:end="115:57"><name pos:start="113:9" pos:end="113:29">memory_region_init_io</name><argument_list pos:start="113:30" pos:end="115:57">(<argument pos:start="113:31" pos:end="113:39"><expr pos:start="113:31" pos:end="113:39"><operator pos:start="113:31" pos:end="113:31">&amp;</operator><name pos:start="113:32" pos:end="113:39"><name pos:start="113:32" pos:end="113:32">s</name><operator pos:start="113:33" pos:end="113:34">-&gt;</operator><name pos:start="113:35" pos:end="113:39">thc24</name></name></expr></argument>, <argument pos:start="113:42" pos:end="113:50"><expr pos:start="113:42" pos:end="113:50"><call pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:47">OBJECT</name><argument_list pos:start="113:48" pos:end="113:50">(<argument pos:start="113:49" pos:end="113:49"><expr pos:start="113:49" pos:end="113:49"><name pos:start="113:49" pos:end="113:49">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:53" pos:end="113:66"><expr pos:start="113:53" pos:end="113:66"><operator pos:start="113:53" pos:end="113:53">&amp;</operator><name pos:start="113:54" pos:end="113:66">tcx_dummy_ops</name></expr></argument>, <argument pos:start="113:69" pos:end="113:69"><expr pos:start="113:69" pos:end="113:69"><name pos:start="113:69" pos:end="113:69">s</name></expr></argument>,

                              <argument pos:start="115:31" pos:end="115:41"><expr pos:start="115:31" pos:end="115:41"><literal type="string" pos:start="115:31" pos:end="115:41">"tcx.thc24"</literal></expr></argument>, <argument pos:start="115:44" pos:end="115:56"><expr pos:start="115:44" pos:end="115:56"><name pos:start="115:44" pos:end="115:56">TCX_THC_NREGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:41"><expr pos:start="117:9" pos:end="117:40"><call pos:start="117:9" pos:end="117:40"><name pos:start="117:9" pos:end="117:24">sysbus_init_mmio</name><argument_list pos:start="117:25" pos:end="117:40">(<argument pos:start="117:26" pos:end="117:28"><expr pos:start="117:26" pos:end="117:28"><name pos:start="117:26" pos:end="117:28">sbd</name></expr></argument>, <argument pos:start="117:31" pos:end="117:39"><expr pos:start="117:31" pos:end="117:39"><operator pos:start="117:31" pos:end="117:31">&amp;</operator><name pos:start="117:32" pos:end="117:39"><name pos:start="117:32" pos:end="117:32">s</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:39">thc24</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:34"><expr pos:start="123:5" pos:end="123:33"><call pos:start="123:5" pos:end="123:33"><name pos:start="123:5" pos:end="123:19">sysbus_init_irq</name><argument_list pos:start="123:20" pos:end="123:33">(<argument pos:start="123:21" pos:end="123:23"><expr pos:start="123:21" pos:end="123:23"><name pos:start="123:21" pos:end="123:23">sbd</name></expr></argument>, <argument pos:start="123:26" pos:end="123:32"><expr pos:start="123:26" pos:end="123:32"><operator pos:start="123:26" pos:end="123:26">&amp;</operator><name pos:start="123:27" pos:end="123:32"><name pos:start="123:27" pos:end="123:27">s</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:32">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="135:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:22">(<expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:16">depth</name></name> <operator pos:start="127:18" pos:end="127:19">==</operator> <literal type="number" pos:start="127:21" pos:end="127:21">8</literal></expr>)</condition> <block pos:start="127:24" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:67">

        <expr_stmt pos:start="129:9" pos:end="129:67"><expr pos:start="129:9" pos:end="129:66"><name pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:14">con</name></name> <operator pos:start="129:16" pos:end="129:16">=</operator> <call pos:start="129:18" pos:end="129:66"><name pos:start="129:18" pos:end="129:37">graphic_console_init</name><argument_list pos:start="129:38" pos:end="129:66">(<argument pos:start="129:39" pos:end="129:49"><expr pos:start="129:39" pos:end="129:49"><call pos:start="129:39" pos:end="129:49"><name pos:start="129:39" pos:end="129:44">DEVICE</name><argument_list pos:start="129:45" pos:end="129:49">(<argument pos:start="129:46" pos:end="129:48"><expr pos:start="129:46" pos:end="129:48"><name pos:start="129:46" pos:end="129:48">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:52" pos:end="129:52"><expr pos:start="129:52" pos:end="129:52"><literal type="number" pos:start="129:52" pos:end="129:52">0</literal></expr></argument>, <argument pos:start="129:55" pos:end="129:62"><expr pos:start="129:55" pos:end="129:62"><operator pos:start="129:55" pos:end="129:55">&amp;</operator><name pos:start="129:56" pos:end="129:62">tcx_ops</name></expr></argument>, <argument pos:start="129:65" pos:end="129:65"><expr pos:start="129:65" pos:end="129:65"><name pos:start="129:65" pos:end="129:65">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="135:5">else <block pos:start="131:12" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:69">

        <expr_stmt pos:start="133:9" pos:end="133:69"><expr pos:start="133:9" pos:end="133:68"><name pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:14">con</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <call pos:start="133:18" pos:end="133:68"><name pos:start="133:18" pos:end="133:37">graphic_console_init</name><argument_list pos:start="133:38" pos:end="133:68">(<argument pos:start="133:39" pos:end="133:49"><expr pos:start="133:39" pos:end="133:49"><call pos:start="133:39" pos:end="133:49"><name pos:start="133:39" pos:end="133:44">DEVICE</name><argument_list pos:start="133:45" pos:end="133:49">(<argument pos:start="133:46" pos:end="133:48"><expr pos:start="133:46" pos:end="133:48"><name pos:start="133:46" pos:end="133:48">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="133:52" pos:end="133:52"><expr pos:start="133:52" pos:end="133:52"><literal type="number" pos:start="133:52" pos:end="133:52">0</literal></expr></argument>, <argument pos:start="133:55" pos:end="133:64"><expr pos:start="133:55" pos:end="133:64"><operator pos:start="133:55" pos:end="133:55">&amp;</operator><name pos:start="133:56" pos:end="133:64">tcx24_ops</name></expr></argument>, <argument pos:start="133:67" pos:end="133:67"><expr pos:start="133:67" pos:end="133:67"><name pos:start="133:67" pos:end="133:67">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:14"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:14">thcmisc</name></name> <operator pos:start="137:16" pos:end="137:16">=</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:53"><expr pos:start="141:5" pos:end="141:52"><call pos:start="141:5" pos:end="141:52"><name pos:start="141:5" pos:end="141:23">qemu_console_resize</name><argument_list pos:start="141:24" pos:end="141:52">(<argument pos:start="141:25" pos:end="141:30"><expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:30">con</name></name></expr></argument>, <argument pos:start="141:33" pos:end="141:40"><expr pos:start="141:33" pos:end="141:40"><name pos:start="141:33" pos:end="141:40"><name pos:start="141:33" pos:end="141:33">s</name><operator pos:start="141:34" pos:end="141:35">-&gt;</operator><name pos:start="141:36" pos:end="141:40">width</name></name></expr></argument>, <argument pos:start="141:43" pos:end="141:51"><expr pos:start="141:43" pos:end="141:51"><name pos:start="141:43" pos:end="141:51"><name pos:start="141:43" pos:end="141:43">s</name><operator pos:start="141:44" pos:end="141:45">-&gt;</operator><name pos:start="141:46" pos:end="141:51">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
