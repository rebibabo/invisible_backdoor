<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14576.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">process_incoming_migration_co</name><parameter_list pos:start="1:42" pos:end="1:55">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:38">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">QEMUFile</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">f</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><call pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:32">migration_incoming_state_new</name><argument_list pos:start="13:33" pos:end="13:35">(<argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><name pos:start="13:34" pos:end="13:34">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:52"><expr pos:start="15:5" pos:end="15:51"><call pos:start="15:5" pos:end="15:51"><name pos:start="15:5" pos:end="15:26">migrate_generate_event</name><argument_list pos:start="15:27" pos:end="15:51">(<argument pos:start="15:28" pos:end="15:50"><expr pos:start="15:28" pos:end="15:50"><name pos:start="15:28" pos:end="15:50">MIGRATION_STATUS_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:30"><name pos:start="17:11" pos:end="17:27">qemu_loadvm_state</name><argument_list pos:start="17:28" pos:end="17:30">(<argument pos:start="17:29" pos:end="17:29"><expr pos:start="17:29" pos:end="17:29"><name pos:start="17:29" pos:end="17:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><call pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:15">qemu_fclose</name><argument_list pos:start="21:16" pos:end="21:18">(<argument pos:start="21:17" pos:end="21:17"><expr pos:start="21:17" pos:end="21:17"><name pos:start="21:17" pos:end="21:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><call pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:27">free_xbzrle_decoded_buf</name><argument_list pos:start="23:28" pos:end="23:29">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><call pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:36">migration_incoming_state_destroy</name><argument_list pos:start="25:37" pos:end="25:38">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:27">

        <expr_stmt pos:start="31:9" pos:end="31:56"><expr pos:start="31:9" pos:end="31:55"><call pos:start="31:9" pos:end="31:55"><name pos:start="31:9" pos:end="31:30">migrate_generate_event</name><argument_list pos:start="31:31" pos:end="31:55">(<argument pos:start="31:32" pos:end="31:54"><expr pos:start="31:32" pos:end="31:54"><name pos:start="31:32" pos:end="31:54">MIGRATION_STATUS_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><call pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:68">(<argument pos:start="33:22" pos:end="33:51"><expr pos:start="33:22" pos:end="33:51"><literal type="string" pos:start="33:22" pos:end="33:51">"load of migration failed: %s"</literal></expr></argument>, <argument pos:start="33:54" pos:end="33:67"><expr pos:start="33:54" pos:end="33:67"><call pos:start="33:54" pos:end="33:67"><name pos:start="33:54" pos:end="33:61">strerror</name><argument_list pos:start="33:62" pos:end="33:67">(<argument pos:start="33:63" pos:end="33:66"><expr pos:start="33:63" pos:end="33:66"><operator pos:start="33:63" pos:end="33:63">-</operator><name pos:start="33:64" pos:end="33:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><call pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:39">migrate_decompress_threads_join</name><argument_list pos:start="35:40" pos:end="35:41">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><call pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:26">(<argument pos:start="37:14" pos:end="37:25"><expr pos:start="37:14" pos:end="37:25"><name pos:start="37:14" pos:end="37:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><call pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:26">migrate_generate_event</name><argument_list pos:start="41:27" pos:end="41:54">(<argument pos:start="41:28" pos:end="41:53"><expr pos:start="41:28" pos:end="41:53"><name pos:start="41:28" pos:end="41:53">MIGRATION_STATUS_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:22">qemu_announce_self</name><argument_list pos:start="43:23" pos:end="43:24">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:65">/* Make sure all file formats flush their mutable metadata */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:42"><expr pos:start="49:5" pos:end="49:41"><call pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:29">bdrv_invalidate_cache_all</name><argument_list pos:start="49:30" pos:end="49:41">(<argument pos:start="49:31" pos:end="49:40"><expr pos:start="49:31" pos:end="49:40"><operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:18">(<expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:17">local_err</name></expr>)</condition> <block pos:start="51:20" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:27">

        <expr_stmt pos:start="53:9" pos:end="53:36"><expr pos:start="53:9" pos:end="53:35"><call pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:24">error_report_err</name><argument_list pos:start="53:25" pos:end="53:35">(<argument pos:start="53:26" pos:end="53:34"><expr pos:start="53:26" pos:end="53:34"><name pos:start="53:26" pos:end="53:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><call pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:39">migrate_decompress_threads_join</name><argument_list pos:start="55:40" pos:end="55:41">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><call pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:26">(<argument pos:start="57:14" pos:end="57:25"><expr pos:start="57:14" pos:end="57:25"><name pos:start="57:14" pos:end="57:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="67:23">/* If global state section was not received or we are in running

       state, we need to obey autostart. Any other state is set with

       runstate_set. */</comment>



    <if_stmt pos:start="71:5" pos:end="89:5"><if pos:start="71:5" pos:end="85:5">if <condition pos:start="71:8" pos:end="73:57">(<expr pos:start="71:9" pos:end="73:56"><operator pos:start="71:9" pos:end="71:9">!</operator><call pos:start="71:10" pos:end="71:32"><name pos:start="71:10" pos:end="71:30">global_state_received</name><argument_list pos:start="71:31" pos:end="71:32">()</argument_list></call> <operator pos:start="71:34" pos:end="71:35">||</operator>

        <call pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:33">global_state_get_runstate</name><argument_list pos:start="73:34" pos:end="73:35">()</argument_list></call> <operator pos:start="73:37" pos:end="73:38">==</operator> <name pos:start="73:40" pos:end="73:56">RUN_STATE_RUNNING</name></expr>)</condition> <block pos:start="73:59" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:9">

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:22">(<expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:21">autostart</name></expr>)</condition> <block pos:start="75:24" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:23">

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><call pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:20">vm_start</name><argument_list pos:start="77:21" pos:end="77:22">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="83:9">else <block pos:start="79:16" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:43">

            <expr_stmt pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:42"><call pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:24">runstate_set</name><argument_list pos:start="81:25" pos:end="81:42">(<argument pos:start="81:26" pos:end="81:41"><expr pos:start="81:26" pos:end="81:41"><name pos:start="81:26" pos:end="81:41">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="89:5">else <block pos:start="85:12" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:50">

        <expr_stmt pos:start="87:9" pos:end="87:50"><expr pos:start="87:9" pos:end="87:49"><call pos:start="87:9" pos:end="87:49"><name pos:start="87:9" pos:end="87:20">runstate_set</name><argument_list pos:start="87:21" pos:end="87:49">(<argument pos:start="87:22" pos:end="87:48"><expr pos:start="87:22" pos:end="87:48"><call pos:start="87:22" pos:end="87:48"><name pos:start="87:22" pos:end="87:46">global_state_get_runstate</name><argument_list pos:start="87:47" pos:end="87:48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><call pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:35">migrate_decompress_threads_join</name><argument_list pos:start="91:36" pos:end="91:37">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
