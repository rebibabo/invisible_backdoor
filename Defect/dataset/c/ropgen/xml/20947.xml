<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20947.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">alloc_f</name><parameter_list pos:start="1:19" pos:end="1:41">(<parameter pos:start="1:20" pos:end="1:27"><decl pos:start="1:20" pos:end="1:27"><type pos:start="1:20" pos:end="1:27"><name pos:start="1:20" pos:end="1:22">int</name></type> <name pos:start="1:24" pos:end="1:27">argc</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier><modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">nb_sectors</name></decl>, <decl pos:start="7:21" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:29">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:15"><name pos:start="9:10" pos:end="9:11">s1</name><index pos:start="9:12" pos:end="9:15">[<expr pos:start="9:13" pos:end="9:14"><literal type="number" pos:start="9:13" pos:end="9:14">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">num</name></decl>, <decl pos:start="11:14" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:22">sum_alloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:10">offset</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:28"><name pos:start="17:14" pos:end="17:19">cvtnum</name><argument_list pos:start="17:20" pos:end="17:28">(<argument pos:start="17:21" pos:end="17:27"><expr pos:start="17:21" pos:end="17:27"><name pos:start="17:21" pos:end="17:27"><name pos:start="17:21" pos:end="17:24">argv</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:23">(<expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:14">offset</name> <operator pos:start="19:16" pos:end="19:16">&amp;</operator> <literal type="number" pos:start="19:18" pos:end="19:22">0x1ff</literal></expr>)</condition> <block pos:start="19:25" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:17">

        <expr_stmt pos:start="21:9" pos:end="23:23"><expr pos:start="21:9" pos:end="23:22"><call pos:start="21:9" pos:end="23:22"><name pos:start="21:9" pos:end="21:14">printf</name><argument_list pos:start="21:15" pos:end="23:22">(<argument pos:start="21:16" pos:end="21:59"><expr pos:start="21:16" pos:end="21:59"><literal type="string" pos:start="21:16" pos:end="21:25">"offset %"</literal> <name pos:start="21:27" pos:end="21:32">PRId64</name> <literal type="string" pos:start="21:34" pos:end="21:59">" is not sector aligned\n"</literal></expr></argument>,

               <argument pos:start="23:16" pos:end="23:21"><expr pos:start="23:16" pos:end="23:21"><name pos:start="23:16" pos:end="23:21">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:12">argc</name> <operator pos:start="31:14" pos:end="31:15">==</operator> <literal type="number" pos:start="31:17" pos:end="31:17">3</literal></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:37">

        <expr_stmt pos:start="33:9" pos:end="33:37"><expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:18">nb_sectors</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <call pos:start="33:22" pos:end="33:36"><name pos:start="33:22" pos:end="33:27">cvtnum</name><argument_list pos:start="33:28" pos:end="33:36">(<argument pos:start="33:29" pos:end="33:35"><expr pos:start="33:29" pos:end="33:35"><name pos:start="33:29" pos:end="33:35"><name pos:start="33:29" pos:end="33:32">argv</name><index pos:start="33:33" pos:end="33:35">[<expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:23">

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:18">nb_sectors</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:13">remaining</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:26">nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:18"><expr pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:13">sum_alloc</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>;</expr_stmt>

    <while pos:start="47:5" pos:end="59:5">while <condition pos:start="47:11" pos:end="47:21">(<expr pos:start="47:12" pos:end="47:20"><name pos:start="47:12" pos:end="47:20">remaining</name></expr>)</condition> <block pos:start="47:23" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <expr_stmt pos:start="49:9" pos:end="49:67"><expr pos:start="49:9" pos:end="49:66"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:66"><name pos:start="49:15" pos:end="49:31">bdrv_is_allocated</name><argument_list pos:start="49:32" pos:end="49:66">(<argument pos:start="49:33" pos:end="49:34"><expr pos:start="49:33" pos:end="49:34"><name pos:start="49:33" pos:end="49:34">bs</name></expr></argument>, <argument pos:start="49:37" pos:end="49:47"><expr pos:start="49:37" pos:end="49:47"><name pos:start="49:37" pos:end="49:42">offset</name> <operator pos:start="49:44" pos:end="49:45">&gt;&gt;</operator> <literal type="number" pos:start="49:47" pos:end="49:47">9</literal></expr></argument>, <argument pos:start="49:50" pos:end="49:59"><expr pos:start="49:50" pos:end="49:59"><name pos:start="49:50" pos:end="49:59">nb_sectors</name></expr></argument>, <argument pos:start="49:62" pos:end="49:65"><expr pos:start="49:62" pos:end="49:65"><operator pos:start="49:62" pos:end="49:62">&amp;</operator><name pos:start="49:63" pos:end="49:65">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:17">remaining</name> <operator pos:start="51:19" pos:end="51:20">-=</operator> <name pos:start="51:22" pos:end="51:24">num</name></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:16">(<expr pos:start="53:13" pos:end="53:15"><name pos:start="53:13" pos:end="53:15">ret</name></expr>)</condition> <block pos:start="53:18" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:29">

            <expr_stmt pos:start="55:13" pos:end="55:29"><expr pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:21">sum_alloc</name> <operator pos:start="55:23" pos:end="55:24">+=</operator> <name pos:start="55:26" pos:end="55:28">num</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:10">cvtstr</name><argument_list pos:start="63:11" pos:end="63:34">(<argument pos:start="63:12" pos:end="63:17"><expr pos:start="63:12" pos:end="63:17"><name pos:start="63:12" pos:end="63:17">offset</name></expr></argument>, <argument pos:start="63:20" pos:end="63:21"><expr pos:start="63:20" pos:end="63:21"><name pos:start="63:20" pos:end="63:21">s1</name></expr></argument>, <argument pos:start="63:24" pos:end="63:33"><expr pos:start="63:24" pos:end="63:33"><sizeof pos:start="63:24" pos:end="63:33">sizeof<argument_list pos:start="63:30" pos:end="63:33">(<argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><name pos:start="63:31" pos:end="63:32">s1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="69:38"><expr pos:start="67:5" pos:end="69:37"><call pos:start="67:5" pos:end="69:37"><name pos:start="67:5" pos:end="67:10">printf</name><argument_list pos:start="67:11" pos:end="69:37">(<argument pos:start="67:12" pos:end="67:51"><expr pos:start="67:12" pos:end="67:51"><literal type="string" pos:start="67:12" pos:end="67:51">"%d/%d sectors allocated at offset %s\n"</literal></expr></argument>,

           <argument pos:start="69:12" pos:end="69:20"><expr pos:start="69:12" pos:end="69:20"><name pos:start="69:12" pos:end="69:20">sum_alloc</name></expr></argument>, <argument pos:start="69:23" pos:end="69:32"><expr pos:start="69:23" pos:end="69:32"><name pos:start="69:23" pos:end="69:32">nb_sectors</name></expr></argument>, <argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><name pos:start="69:35" pos:end="69:36">s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
