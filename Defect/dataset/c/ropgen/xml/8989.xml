<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8989.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">onenand_reset</name><parameter_list pos:start="1:26" pos:end="1:52">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">OneNANDState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:51"><decl pos:start="1:44" pos:end="1:51"><type pos:start="1:44" pos:end="1:51"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:51">cold</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:5">

    <expr_stmt pos:start="5:5" pos:end="5:41"><expr pos:start="5:5" pos:end="5:40"><call pos:start="5:5" pos:end="5:40"><name pos:start="5:5" pos:end="5:10">memset</name><argument_list pos:start="5:11" pos:end="5:40">(<argument pos:start="5:12" pos:end="5:19"><expr pos:start="5:12" pos:end="5:19"><operator pos:start="5:12" pos:end="5:12">&amp;</operator><name pos:start="5:13" pos:end="5:19"><name pos:start="5:13" pos:end="5:13">s</name><operator pos:start="5:14" pos:end="5:15">-&gt;</operator><name pos:start="5:16" pos:end="5:19">addr</name></name></expr></argument>, <argument pos:start="5:22" pos:end="5:22"><expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></argument>, <argument pos:start="5:25" pos:end="5:39"><expr pos:start="5:25" pos:end="5:39"><sizeof pos:start="5:25" pos:end="5:39">sizeof<argument_list pos:start="5:31" pos:end="5:39">(<argument pos:start="5:32" pos:end="5:38"><expr pos:start="5:32" pos:end="5:38"><name pos:start="5:32" pos:end="5:38"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:38">addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:19"><expr pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:5">s</name><operator pos:start="7:6" pos:end="7:7">-&gt;</operator><name pos:start="7:8" pos:end="7:14">command</name></name> <operator pos:start="7:16" pos:end="7:16">=</operator> <literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:17"><expr pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:12">count</name></name> <operator pos:start="9:14" pos:end="9:14">=</operator> <literal type="number" pos:start="9:16" pos:end="9:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:14">bufaddr</name></name> <operator pos:start="11:16" pos:end="11:16">=</operator> <literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:13">config</name><index pos:start="13:14" pos:end="13:16">[<expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr>]</index></name> <operator pos:start="13:18" pos:end="13:18">=</operator> <literal type="number" pos:start="13:20" pos:end="13:25">0x40c0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:13">config</name><index pos:start="15:14" pos:end="15:16">[<expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">1</literal></expr>]</index></name> <operator pos:start="15:18" pos:end="15:18">=</operator> <literal type="number" pos:start="15:20" pos:end="15:25">0x0000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:27"><expr pos:start="17:5" pos:end="17:26"><call pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:23">onenand_intr_update</name><argument_list pos:start="17:24" pos:end="17:26">(<argument pos:start="17:25" pos:end="17:25"><expr pos:start="17:25" pos:end="17:25"><name pos:start="17:25" pos:end="17:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><call pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:18">qemu_irq_raise</name><argument_list pos:start="19:19" pos:end="19:26">(<argument pos:start="19:20" pos:end="19:25"><expr pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:20">s</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:25">rdy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:13">status</name></name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:22">0x0000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:16">intstatus</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <ternary pos:start="23:20" pos:end="23:41"><condition pos:start="23:20" pos:end="23:25"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">cold</name></expr> ?</condition><then pos:start="23:27" pos:end="23:32"> <expr pos:start="23:27" pos:end="23:32"><literal type="number" pos:start="23:27" pos:end="23:32">0x8080</literal></expr> </then><else pos:start="23:34" pos:end="23:41">: <expr pos:start="23:36" pos:end="23:41"><literal type="number" pos:start="23:36" pos:end="23:41">0x8010</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">unladdr</name><index pos:start="25:15" pos:end="25:17">[<expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>]</index></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:14">unladdr</name><index pos:start="27:15" pos:end="27:17">[<expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr>]</index></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:15">wpstatus</name></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:24">0x0002</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:12">cycle</name></name> <operator pos:start="31:14" pos:end="31:14">=</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">otpmode</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:15">bdrv_cur</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:25"><name pos:start="35:19" pos:end="35:19">s</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:25">bdrv</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:14">current</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:25"><name pos:start="37:18" pos:end="37:18">s</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:25">image</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:15">secs_cur</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:25"><name pos:start="39:19" pos:end="39:19">s</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:25">secs</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="57:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:13">(<expr pos:start="43:9" pos:end="43:12"><name pos:start="43:9" pos:end="43:12">cold</name></expr>)</condition> <block pos:start="43:15" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:9">

        <comment type="block" pos:start="45:9" pos:end="45:34">/* Lock the whole flash */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:56"><expr pos:start="47:9" pos:end="47:55"><call pos:start="47:9" pos:end="47:55"><name pos:start="47:9" pos:end="47:14">memset</name><argument_list pos:start="47:15" pos:end="47:55">(<argument pos:start="47:16" pos:end="47:25"><expr pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:16">s</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:25">blockwp</name></name></expr></argument>, <argument pos:start="47:28" pos:end="47:43"><expr pos:start="47:28" pos:end="47:43"><name pos:start="47:28" pos:end="47:43">ONEN_LOCK_LOCKED</name></expr></argument>, <argument pos:start="47:46" pos:end="47:54"><expr pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:46">s</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:54">blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:72">(<expr pos:start="51:13" pos:end="51:71"><name pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:23">bdrv_cur</name></name> <operator pos:start="51:25" pos:end="51:26">&amp;&amp;</operator> <call pos:start="51:28" pos:end="51:67"><name pos:start="51:28" pos:end="51:36">bdrv_read</name><argument_list pos:start="51:37" pos:end="51:67">(<argument pos:start="51:38" pos:end="51:48"><expr pos:start="51:38" pos:end="51:48"><name pos:start="51:38" pos:end="51:48"><name pos:start="51:38" pos:end="51:38">s</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:48">bdrv_cur</name></name></expr></argument>, <argument pos:start="51:51" pos:end="51:51"><expr pos:start="51:51" pos:end="51:51"><literal type="number" pos:start="51:51" pos:end="51:51">0</literal></expr></argument>, <argument pos:start="51:54" pos:end="51:63"><expr pos:start="51:54" pos:end="51:63"><name pos:start="51:54" pos:end="51:63"><name pos:start="51:54" pos:end="51:54">s</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:60">boot</name><index pos:start="51:61" pos:end="51:63">[<expr pos:start="51:62" pos:end="51:62"><literal type="number" pos:start="51:62" pos:end="51:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:66" pos:end="51:66"><expr pos:start="51:66" pos:end="51:66"><literal type="number" pos:start="51:66" pos:end="51:66">8</literal></expr></argument>)</argument_list></call> <operator pos:start="51:69" pos:end="51:69">&lt;</operator> <literal type="number" pos:start="51:71" pos:end="51:71">0</literal></expr>)</condition> <block pos:start="51:74" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:68">

            <expr_stmt pos:start="53:13" pos:end="53:68"><expr pos:start="53:13" pos:end="53:67"><call pos:start="53:13" pos:end="53:67"><name pos:start="53:13" pos:end="53:20">hw_error</name><argument_list pos:start="53:21" pos:end="53:67">(<argument pos:start="53:22" pos:end="53:56"><expr pos:start="53:22" pos:end="53:56"><literal type="string" pos:start="53:22" pos:end="53:56">"%s: Loading the BootRAM failed.\n"</literal></expr></argument>, <argument pos:start="53:59" pos:end="53:66"><expr pos:start="53:59" pos:end="53:66"><name pos:start="53:59" pos:end="53:66">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
