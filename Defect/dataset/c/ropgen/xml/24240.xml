<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24240.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">lavfi_read_packet</name><parameter_list pos:start="1:29" pos:end="1:67">(<parameter pos:start="1:30" pos:end="1:51"><decl pos:start="1:30" pos:end="1:51"><type pos:start="1:30" pos:end="1:51"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:66"><decl pos:start="1:54" pos:end="1:66"><type pos:start="1:54" pos:end="1:66"><name pos:start="1:54" pos:end="1:61">AVPacket</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:16">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">LavfiContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">lavfi</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">double</name></type> <name pos:start="7:12" pos:end="7:18">min_pts</name> <init pos:start="7:20" pos:end="7:28">= <expr pos:start="7:22" pos:end="7:28"><name pos:start="7:22" pos:end="7:28">DBL_MAX</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">stream_idx</name></decl>, <decl pos:start="9:21" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:36">min_pts_sink_idx</name> <init pos:start="9:38" pos:end="9:40">= <expr pos:start="9:40" pos:end="9:40"><literal type="number" pos:start="9:40" pos:end="9:40">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">AVFilterBufferRef</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">ref</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">AVPicture</name></type> <name pos:start="13:15" pos:end="13:18">pict</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">size</name> <init pos:start="17:14" pos:end="17:16">= <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="23:21">/* iterate through all the graph sinks. Select the sink with the

     * minimum PTS */</comment>

    <for pos:start="25:5" pos:end="71:5">for <control pos:start="25:9" pos:end="25:43">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:38"><expr pos:start="25:17" pos:end="25:37"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <name pos:start="25:21" pos:end="25:37"><name pos:start="25:21" pos:end="25:25">avctx</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:37">nb_streams</name></name></expr>;</condition> <incr pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:40">i</name><operator pos:start="25:41" pos:end="25:42">++</operator></expr></incr>)</control> <block pos:start="25:45" pos:end="71:5">{<block_content pos:start="27:9" pos:end="69:9">

        <decl_stmt pos:start="27:9" pos:end="27:62"><decl pos:start="27:9" pos:end="27:61"><type pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:18">AVRational</name></type> <name pos:start="27:20" pos:end="27:21">tb</name> <init pos:start="27:23" pos:end="27:61">= <expr pos:start="27:25" pos:end="27:61"><name pos:start="27:25" pos:end="27:39"><name pos:start="27:25" pos:end="27:29">lavfi</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:36">sinks</name><index pos:start="27:37" pos:end="27:39">[<expr pos:start="27:38" pos:end="27:38"><name pos:start="27:38" pos:end="27:38">i</name></expr>]</index></name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:50"><name pos:start="27:42" pos:end="27:47">inputs</name><index pos:start="27:48" pos:end="27:50">[<expr pos:start="27:49" pos:end="27:49"><literal type="number" pos:start="27:49" pos:end="27:49">0</literal></expr>]</index></name><operator pos:start="27:51" pos:end="27:52">-&gt;</operator><name pos:start="27:53" pos:end="27:61">time_base</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:17"><decl pos:start="29:9" pos:end="29:16"><type pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:14">double</name></type> <name pos:start="29:16" pos:end="29:16">d</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:16"><decl pos:start="31:9" pos:end="31:15"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:15">ret</name></decl>;</decl_stmt>



        <if_stmt pos:start="35:9" pos:end="37:21"><if pos:start="35:9" pos:end="37:21">if <condition pos:start="35:12" pos:end="35:31">(<expr pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:17">lavfi</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:27">sink_eof</name><index pos:start="35:28" pos:end="35:30">[<expr pos:start="35:29" pos:end="35:29"><name pos:start="35:29" pos:end="35:29">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <continue pos:start="37:13" pos:end="37:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="43:70"><expr pos:start="41:9" pos:end="43:69"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="43:69"><name pos:start="41:15" pos:end="41:42">av_buffersink_get_buffer_ref</name><argument_list pos:start="41:43" pos:end="43:69">(<argument pos:start="41:44" pos:end="41:58"><expr pos:start="41:44" pos:end="41:58"><name pos:start="41:44" pos:end="41:58"><name pos:start="41:44" pos:end="41:48">lavfi</name><operator pos:start="41:49" pos:end="41:50">-&gt;</operator><name pos:start="41:51" pos:end="41:55">sinks</name><index pos:start="41:56" pos:end="41:58">[<expr pos:start="41:57" pos:end="41:57"><name pos:start="41:57" pos:end="41:57">i</name></expr>]</index></name></expr></argument>,

                                       <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><operator pos:start="43:40" pos:end="43:40">&amp;</operator><name pos:start="43:41" pos:end="43:43">ref</name></expr></argument>, <argument pos:start="43:46" pos:end="43:68"><expr pos:start="43:46" pos:end="43:68"><name pos:start="43:46" pos:end="43:68">AV_BUFFERSINK_FLAG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="55:23"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:31">(<expr pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:18">==</operator> <name pos:start="45:20" pos:end="45:30">AVERROR_EOF</name></expr>)</condition> <block pos:start="45:33" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:21">

            <expr_stmt pos:start="47:13" pos:end="47:51"><expr pos:start="47:13" pos:end="47:50"><call pos:start="47:13" pos:end="47:50"><name pos:start="47:13" pos:end="47:19">av_dlog</name><argument_list pos:start="47:20" pos:end="47:50">(<argument pos:start="47:21" pos:end="47:25"><expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:25">avctx</name></expr></argument>, <argument pos:start="47:28" pos:end="47:46"><expr pos:start="47:28" pos:end="47:46"><literal type="string" pos:start="47:28" pos:end="47:46">"EOF sink_idx:%d\n"</literal></expr></argument>, <argument pos:start="47:49" pos:end="47:49"><expr pos:start="47:49" pos:end="47:49"><name pos:start="47:49" pos:end="47:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:35"><expr pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:17">lavfi</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:27">sink_eof</name><index pos:start="49:28" pos:end="49:30">[<expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">i</name></expr>]</index></name> <operator pos:start="49:32" pos:end="49:32">=</operator> <literal type="number" pos:start="49:34" pos:end="49:34">1</literal></expr>;</expr_stmt>

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="53:11" pos:end="55:23">else if <condition pos:start="53:19" pos:end="53:27">(<expr pos:start="53:20" pos:end="53:26"><name pos:start="53:20" pos:end="53:22">ret</name> <operator pos:start="53:24" pos:end="53:24">&lt;</operator> <literal type="number" pos:start="53:26" pos:end="53:26">0</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:23"><block_content pos:start="55:13" pos:end="55:23">

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:55"><expr pos:start="57:9" pos:end="57:54"><name pos:start="57:9" pos:end="57:9">d</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:24">av_rescale_q</name><argument_list pos:start="57:25" pos:end="57:54">(<argument pos:start="57:26" pos:end="57:33"><expr pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:28">ref</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:33">pts</name></name></expr></argument>, <argument pos:start="57:36" pos:end="57:37"><expr pos:start="57:36" pos:end="57:37"><name pos:start="57:36" pos:end="57:37">tb</name></expr></argument>, <argument pos:start="57:40" pos:end="57:53"><expr pos:start="57:40" pos:end="57:53"><name pos:start="57:40" pos:end="57:53">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:54"><expr pos:start="59:9" pos:end="59:53"><call pos:start="59:9" pos:end="59:53"><name pos:start="59:9" pos:end="59:15">av_dlog</name><argument_list pos:start="59:16" pos:end="59:53">(<argument pos:start="59:17" pos:end="59:21"><expr pos:start="59:17" pos:end="59:21"><name pos:start="59:17" pos:end="59:21">avctx</name></expr></argument>, <argument pos:start="59:24" pos:end="59:46"><expr pos:start="59:24" pos:end="59:46"><literal type="string" pos:start="59:24" pos:end="59:46">"sink_idx:%d time:%f\n"</literal></expr></argument>, <argument pos:start="59:49" pos:end="59:49"><expr pos:start="59:49" pos:end="59:49"><name pos:start="59:49" pos:end="59:49">i</name></expr></argument>, <argument pos:start="59:52" pos:end="59:52"><expr pos:start="59:52" pos:end="59:52"><name pos:start="59:52" pos:end="59:52">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:24">(<expr pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:13">d</name> <operator pos:start="63:15" pos:end="63:15">&lt;</operator> <name pos:start="63:17" pos:end="63:23">min_pts</name></expr>)</condition> <block pos:start="63:26" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:33">

            <expr_stmt pos:start="65:13" pos:end="65:24"><expr pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:19">min_pts</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:23">d</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:28">min_pts_sink_idx</name> <operator pos:start="67:30" pos:end="67:30">=</operator> <name pos:start="67:32" pos:end="67:32">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="73:5" pos:end="75:27"><if pos:start="73:5" pos:end="75:27">if <condition pos:start="73:8" pos:end="73:27">(<expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:15">min_pts</name> <operator pos:start="73:17" pos:end="73:18">==</operator> <name pos:start="73:20" pos:end="73:26">DBL_MAX</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:27"><block_content pos:start="75:9" pos:end="75:27">

        <return pos:start="75:9" pos:end="75:27">return <expr pos:start="75:16" pos:end="75:26"><name pos:start="75:16" pos:end="75:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:62"><expr pos:start="79:5" pos:end="79:61"><call pos:start="79:5" pos:end="79:61"><name pos:start="79:5" pos:end="79:11">av_dlog</name><argument_list pos:start="79:12" pos:end="79:61">(<argument pos:start="79:13" pos:end="79:17"><expr pos:start="79:13" pos:end="79:17"><name pos:start="79:13" pos:end="79:17">avctx</name></expr></argument>, <argument pos:start="79:20" pos:end="79:42"><expr pos:start="79:20" pos:end="79:42"><literal type="string" pos:start="79:20" pos:end="79:42">"min_pts_sink_idx:%i\n"</literal></expr></argument>, <argument pos:start="79:45" pos:end="79:60"><expr pos:start="79:45" pos:end="79:60"><name pos:start="79:45" pos:end="79:60">min_pts_sink_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:74"><expr pos:start="83:5" pos:end="83:73"><call pos:start="83:5" pos:end="83:73"><name pos:start="83:5" pos:end="83:32">av_buffersink_get_buffer_ref</name><argument_list pos:start="83:33" pos:end="83:73">(<argument pos:start="83:34" pos:end="83:63"><expr pos:start="83:34" pos:end="83:63"><name pos:start="83:34" pos:end="83:63"><name pos:start="83:34" pos:end="83:38">lavfi</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:45">sinks</name><index pos:start="83:46" pos:end="83:63">[<expr pos:start="83:47" pos:end="83:62"><name pos:start="83:47" pos:end="83:62">min_pts_sink_idx</name></expr>]</index></name></expr></argument>, <argument pos:start="83:66" pos:end="83:69"><expr pos:start="83:66" pos:end="83:69"><operator pos:start="83:66" pos:end="83:66">&amp;</operator><name pos:start="83:67" pos:end="83:69">ref</name></expr></argument>, <argument pos:start="83:72" pos:end="83:72"><expr pos:start="83:72" pos:end="83:72"><literal type="number" pos:start="83:72" pos:end="83:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:58"><expr pos:start="85:5" pos:end="85:57"><name pos:start="85:5" pos:end="85:14">stream_idx</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <name pos:start="85:18" pos:end="85:57"><name pos:start="85:18" pos:end="85:22">lavfi</name><operator pos:start="85:23" pos:end="85:24">-&gt;</operator><name pos:start="85:25" pos:end="85:39">sink_stream_map</name><index pos:start="85:40" pos:end="85:57">[<expr pos:start="85:41" pos:end="85:56"><name pos:start="85:41" pos:end="85:56">min_pts_sink_idx</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="123:5"><if pos:start="89:5" pos:end="109:5">if <condition pos:start="89:8" pos:end="89:19">(<expr pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:11">ref</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:18">video</name></name></expr>)</condition> <block pos:start="89:21" pos:end="109:5">{<block_content pos:start="91:9" pos:end="107:57">

        <expr_stmt pos:start="91:9" pos:end="91:77"><expr pos:start="91:9" pos:end="91:76"><name pos:start="91:9" pos:end="91:12">size</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:76"><name pos:start="91:16" pos:end="91:33">avpicture_get_size</name><argument_list pos:start="91:34" pos:end="91:76">(<argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:37">ref</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:45">format</name></name></expr></argument>, <argument pos:start="91:48" pos:end="91:60"><expr pos:start="91:48" pos:end="91:60"><name pos:start="91:48" pos:end="91:60"><name pos:start="91:48" pos:end="91:50">ref</name><operator pos:start="91:51" pos:end="91:52">-&gt;</operator><name pos:start="91:53" pos:end="91:57">video</name><operator pos:start="91:58" pos:end="91:59">-&gt;</operator><name pos:start="91:60" pos:end="91:60">w</name></name></expr></argument>, <argument pos:start="91:63" pos:end="91:75"><expr pos:start="91:63" pos:end="91:75"><name pos:start="91:63" pos:end="91:75"><name pos:start="91:63" pos:end="91:65">ref</name><operator pos:start="91:66" pos:end="91:67">-&gt;</operator><name pos:start="91:68" pos:end="91:72">video</name><operator pos:start="91:73" pos:end="91:74">-&gt;</operator><name pos:start="91:75" pos:end="91:75">h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="95:23"><if pos:start="93:9" pos:end="95:23">if <condition pos:start="93:12" pos:end="93:49">(<expr pos:start="93:13" pos:end="93:48"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:16">ret</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:43"><name pos:start="93:20" pos:end="93:32">av_new_packet</name><argument_list pos:start="93:33" pos:end="93:43">(<argument pos:start="93:34" pos:end="93:36"><expr pos:start="93:34" pos:end="93:36"><name pos:start="93:34" pos:end="93:36">pkt</name></expr></argument>, <argument pos:start="93:39" pos:end="93:42"><expr pos:start="93:39" pos:end="93:42"><name pos:start="93:39" pos:end="93:42">size</name></expr></argument>)</argument_list></call><operator pos:start="93:44" pos:end="93:44">)</operator> <operator pos:start="93:46" pos:end="93:46">&lt;</operator> <literal type="number" pos:start="93:48" pos:end="93:48">0</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:23"><block_content pos:start="95:13" pos:end="95:23">

            <return pos:start="95:13" pos:end="95:23">return <expr pos:start="95:20" pos:end="95:22"><name pos:start="95:20" pos:end="95:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:69"><expr pos:start="99:9" pos:end="99:68"><call pos:start="99:9" pos:end="99:68"><name pos:start="99:9" pos:end="99:14">memcpy</name><argument_list pos:start="99:15" pos:end="99:68">(<argument pos:start="99:16" pos:end="99:24"><expr pos:start="99:16" pos:end="99:24"><name pos:start="99:16" pos:end="99:24"><name pos:start="99:16" pos:end="99:19">pict</name><operator pos:start="99:20" pos:end="99:20">.</operator><name pos:start="99:21" pos:end="99:24">data</name></name></expr></argument>,     <argument pos:start="99:31" pos:end="99:39"><expr pos:start="99:31" pos:end="99:39"><name pos:start="99:31" pos:end="99:39"><name pos:start="99:31" pos:end="99:33">ref</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:39">data</name></name></expr></argument>,     <argument pos:start="99:46" pos:end="99:67"><expr pos:start="99:46" pos:end="99:67"><literal type="number" pos:start="99:46" pos:end="99:46">4</literal><operator pos:start="99:47" pos:end="99:47">*</operator><sizeof pos:start="99:48" pos:end="99:67">sizeof<argument_list pos:start="99:54" pos:end="99:67">(<argument pos:start="99:55" pos:end="99:66"><expr pos:start="99:55" pos:end="99:66"><name pos:start="99:55" pos:end="99:66"><name pos:start="99:55" pos:end="99:57">ref</name><operator pos:start="99:58" pos:end="99:59">-&gt;</operator><name pos:start="99:60" pos:end="99:63">data</name><index pos:start="99:64" pos:end="99:66">[<expr pos:start="99:65" pos:end="99:65"><literal type="number" pos:start="99:65" pos:end="99:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:73"><expr pos:start="101:9" pos:end="101:72"><call pos:start="101:9" pos:end="101:72"><name pos:start="101:9" pos:end="101:14">memcpy</name><argument_list pos:start="101:15" pos:end="101:72">(<argument pos:start="101:16" pos:end="101:28"><expr pos:start="101:16" pos:end="101:28"><name pos:start="101:16" pos:end="101:28"><name pos:start="101:16" pos:end="101:19">pict</name><operator pos:start="101:20" pos:end="101:20">.</operator><name pos:start="101:21" pos:end="101:28">linesize</name></name></expr></argument>, <argument pos:start="101:31" pos:end="101:43"><expr pos:start="101:31" pos:end="101:43"><name pos:start="101:31" pos:end="101:43"><name pos:start="101:31" pos:end="101:33">ref</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:43">linesize</name></name></expr></argument>, <argument pos:start="101:46" pos:end="101:71"><expr pos:start="101:46" pos:end="101:71"><literal type="number" pos:start="101:46" pos:end="101:46">4</literal><operator pos:start="101:47" pos:end="101:47">*</operator><sizeof pos:start="101:48" pos:end="101:71">sizeof<argument_list pos:start="101:54" pos:end="101:71">(<argument pos:start="101:55" pos:end="101:70"><expr pos:start="101:55" pos:end="101:70"><name pos:start="101:55" pos:end="101:70"><name pos:start="101:55" pos:end="101:57">ref</name><operator pos:start="101:58" pos:end="101:59">-&gt;</operator><name pos:start="101:60" pos:end="101:67">linesize</name><index pos:start="101:68" pos:end="101:70">[<expr pos:start="101:69" pos:end="101:69"><literal type="number" pos:start="101:69" pos:end="101:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="107:57"><expr pos:start="105:9" pos:end="107:56"><call pos:start="105:9" pos:end="107:56"><name pos:start="105:9" pos:end="105:24">avpicture_layout</name><argument_list pos:start="105:25" pos:end="107:56">(<argument pos:start="105:26" pos:end="105:30"><expr pos:start="105:26" pos:end="105:30"><operator pos:start="105:26" pos:end="105:26">&amp;</operator><name pos:start="105:27" pos:end="105:30">pict</name></expr></argument>, <argument pos:start="105:33" pos:end="105:43"><expr pos:start="105:33" pos:end="105:43"><name pos:start="105:33" pos:end="105:43"><name pos:start="105:33" pos:end="105:35">ref</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:43">format</name></name></expr></argument>, <argument pos:start="105:46" pos:end="105:58"><expr pos:start="105:46" pos:end="105:58"><name pos:start="105:46" pos:end="105:58"><name pos:start="105:46" pos:end="105:48">ref</name><operator pos:start="105:49" pos:end="105:50">-&gt;</operator><name pos:start="105:51" pos:end="105:55">video</name><operator pos:start="105:56" pos:end="105:57">-&gt;</operator><name pos:start="105:58" pos:end="105:58">w</name></name></expr></argument>,

                         <argument pos:start="107:26" pos:end="107:38"><expr pos:start="107:26" pos:end="107:38"><name pos:start="107:26" pos:end="107:38"><name pos:start="107:26" pos:end="107:28">ref</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:35">video</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:38">h</name></name></expr></argument>, <argument pos:start="107:41" pos:end="107:49"><expr pos:start="107:41" pos:end="107:49"><name pos:start="107:41" pos:end="107:49"><name pos:start="107:41" pos:end="107:43">pkt</name><operator pos:start="107:44" pos:end="107:45">-&gt;</operator><name pos:start="107:46" pos:end="107:49">data</name></name></expr></argument>, <argument pos:start="107:52" pos:end="107:55"><expr pos:start="107:52" pos:end="107:55"><name pos:start="107:52" pos:end="107:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="123:5">else if <condition pos:start="109:15" pos:end="109:26">(<expr pos:start="109:16" pos:end="109:25"><name pos:start="109:16" pos:end="109:25"><name pos:start="109:16" pos:end="109:18">ref</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:25">audio</name></name></expr>)</condition> <block pos:start="109:28" pos:end="123:5">{<block_content pos:start="111:9" pos:end="121:46">

        <expr_stmt pos:start="111:9" pos:end="115:74"><expr pos:start="111:9" pos:end="115:73"><name pos:start="111:9" pos:end="111:12">size</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <name pos:start="111:16" pos:end="111:37"><name pos:start="111:16" pos:end="111:18">ref</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:25">audio</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:37">nb_samples</name></name> <operator pos:start="111:39" pos:end="111:39">*</operator>

            <call pos:start="113:13" pos:end="113:48"><name pos:start="113:13" pos:end="113:35">av_get_bytes_per_sample</name><argument_list pos:start="113:36" pos:end="113:48">(<argument pos:start="113:37" pos:end="113:47"><expr pos:start="113:37" pos:end="113:47"><name pos:start="113:37" pos:end="113:47"><name pos:start="113:37" pos:end="113:39">ref</name><operator pos:start="113:40" pos:end="113:41">-&gt;</operator><name pos:start="113:42" pos:end="113:47">format</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:50" pos:end="113:50">*</operator>

            <call pos:start="115:13" pos:end="115:73"><name pos:start="115:13" pos:end="115:45">av_get_channel_layout_nb_channels</name><argument_list pos:start="115:46" pos:end="115:73">(<argument pos:start="115:47" pos:end="115:72"><expr pos:start="115:47" pos:end="115:72"><name pos:start="115:47" pos:end="115:72"><name pos:start="115:47" pos:end="115:49">ref</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:56">audio</name><operator pos:start="115:57" pos:end="115:58">-&gt;</operator><name pos:start="115:59" pos:end="115:72">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="119:23"><if pos:start="117:9" pos:end="119:23">if <condition pos:start="117:12" pos:end="117:49">(<expr pos:start="117:13" pos:end="117:48"><operator pos:start="117:13" pos:end="117:13">(</operator><name pos:start="117:14" pos:end="117:16">ret</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <call pos:start="117:20" pos:end="117:43"><name pos:start="117:20" pos:end="117:32">av_new_packet</name><argument_list pos:start="117:33" pos:end="117:43">(<argument pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><name pos:start="117:34" pos:end="117:36">pkt</name></expr></argument>, <argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">size</name></expr></argument>)</argument_list></call><operator pos:start="117:44" pos:end="117:44">)</operator> <operator pos:start="117:46" pos:end="117:46">&lt;</operator> <literal type="number" pos:start="117:48" pos:end="117:48">0</literal></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:23"><block_content pos:start="119:13" pos:end="119:23">

            <return pos:start="119:13" pos:end="119:23">return <expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:46"><expr pos:start="121:9" pos:end="121:45"><call pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:14">memcpy</name><argument_list pos:start="121:15" pos:end="121:45">(<argument pos:start="121:16" pos:end="121:24"><expr pos:start="121:16" pos:end="121:24"><name pos:start="121:16" pos:end="121:24"><name pos:start="121:16" pos:end="121:18">pkt</name><operator pos:start="121:19" pos:end="121:20">-&gt;</operator><name pos:start="121:21" pos:end="121:24">data</name></name></expr></argument>, <argument pos:start="121:27" pos:end="121:38"><expr pos:start="121:27" pos:end="121:38"><name pos:start="121:27" pos:end="121:38"><name pos:start="121:27" pos:end="121:29">ref</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:35">data</name><index pos:start="121:36" pos:end="121:38">[<expr pos:start="121:37" pos:end="121:37"><literal type="number" pos:start="121:37" pos:end="121:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:41" pos:end="121:44"><expr pos:start="121:41" pos:end="121:44"><name pos:start="121:41" pos:end="121:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="167:5"><if pos:start="127:5" pos:end="167:5">if <condition pos:start="127:8" pos:end="127:22">(<expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:11">ref</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:21">metadata</name></name></expr>)</condition> <block pos:start="127:24" pos:end="167:5">{<block_content pos:start="129:9" pos:end="165:44">

        <decl_stmt pos:start="129:9" pos:end="129:26"><decl pos:start="129:9" pos:end="129:25"><type pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:15">uint8_t</name> <modifier pos:start="129:17" pos:end="129:17">*</modifier></type><name pos:start="129:18" pos:end="129:25">metadata</name></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:36"><decl pos:start="131:9" pos:end="131:35"><type pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:25">AVDictionaryEntry</name> <modifier pos:start="131:27" pos:end="131:27">*</modifier></type><name pos:start="131:28" pos:end="131:28">e</name> <init pos:start="131:30" pos:end="131:35">= <expr pos:start="131:32" pos:end="131:35"><name pos:start="131:32" pos:end="131:35">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:26"><decl pos:start="133:9" pos:end="133:25"><type pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">AVBPrint</name></type> <name pos:start="133:18" pos:end="133:25">meta_buf</name></decl>;</decl_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:63"><expr pos:start="137:9" pos:end="137:62"><call pos:start="137:9" pos:end="137:62"><name pos:start="137:9" pos:end="137:22">av_bprint_init</name><argument_list pos:start="137:23" pos:end="137:62">(<argument pos:start="137:24" pos:end="137:32"><expr pos:start="137:24" pos:end="137:32"><operator pos:start="137:24" pos:end="137:24">&amp;</operator><name pos:start="137:25" pos:end="137:32">meta_buf</name></expr></argument>, <argument pos:start="137:35" pos:end="137:35"><expr pos:start="137:35" pos:end="137:35"><literal type="number" pos:start="137:35" pos:end="137:35">0</literal></expr></argument>, <argument pos:start="137:38" pos:end="137:61"><expr pos:start="137:38" pos:end="137:61"><name pos:start="137:38" pos:end="137:61">AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="139:9" pos:end="149:9">while <condition pos:start="139:15" pos:end="139:78">(<expr pos:start="139:16" pos:end="139:77"><operator pos:start="139:16" pos:end="139:16">(</operator><name pos:start="139:17" pos:end="139:17">e</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <call pos:start="139:21" pos:end="139:76"><name pos:start="139:21" pos:end="139:31">av_dict_get</name><argument_list pos:start="139:32" pos:end="139:76">(<argument pos:start="139:33" pos:end="139:45"><expr pos:start="139:33" pos:end="139:45"><name pos:start="139:33" pos:end="139:45"><name pos:start="139:33" pos:end="139:35">ref</name><operator pos:start="139:36" pos:end="139:37">-&gt;</operator><name pos:start="139:38" pos:end="139:45">metadata</name></name></expr></argument>, <argument pos:start="139:48" pos:end="139:49"><expr pos:start="139:48" pos:end="139:49"><literal type="string" pos:start="139:48" pos:end="139:49">""</literal></expr></argument>, <argument pos:start="139:52" pos:end="139:52"><expr pos:start="139:52" pos:end="139:52"><name pos:start="139:52" pos:end="139:52">e</name></expr></argument>, <argument pos:start="139:55" pos:end="139:75"><expr pos:start="139:55" pos:end="139:75"><name pos:start="139:55" pos:end="139:75">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="139:77" pos:end="139:77">)</operator></expr>)</condition> <block pos:start="139:80" pos:end="149:9">{<block_content pos:start="141:13" pos:end="147:48">

            <expr_stmt pos:start="141:13" pos:end="141:48"><expr pos:start="141:13" pos:end="141:47"><call pos:start="141:13" pos:end="141:47"><name pos:start="141:13" pos:end="141:22">av_bprintf</name><argument_list pos:start="141:23" pos:end="141:47">(<argument pos:start="141:24" pos:end="141:32"><expr pos:start="141:24" pos:end="141:32"><operator pos:start="141:24" pos:end="141:24">&amp;</operator><name pos:start="141:25" pos:end="141:32">meta_buf</name></expr></argument>, <argument pos:start="141:35" pos:end="141:38"><expr pos:start="141:35" pos:end="141:38"><literal type="string" pos:start="141:35" pos:end="141:38">"%s"</literal></expr></argument>, <argument pos:start="141:41" pos:end="141:46"><expr pos:start="141:41" pos:end="141:46"><name pos:start="141:41" pos:end="141:46"><name pos:start="141:41" pos:end="141:41">e</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:46">key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:48"><expr pos:start="143:13" pos:end="143:47"><call pos:start="143:13" pos:end="143:47"><name pos:start="143:13" pos:end="143:27">av_bprint_chars</name><argument_list pos:start="143:28" pos:end="143:47">(<argument pos:start="143:29" pos:end="143:37"><expr pos:start="143:29" pos:end="143:37"><operator pos:start="143:29" pos:end="143:29">&amp;</operator><name pos:start="143:30" pos:end="143:37">meta_buf</name></expr></argument>, <argument pos:start="143:40" pos:end="143:43"><expr pos:start="143:40" pos:end="143:43"><literal type="char" pos:start="143:40" pos:end="143:43">'\0'</literal></expr></argument>, <argument pos:start="143:46" pos:end="143:46"><expr pos:start="143:46" pos:end="143:46"><literal type="number" pos:start="143:46" pos:end="143:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:50"><expr pos:start="145:13" pos:end="145:49"><call pos:start="145:13" pos:end="145:49"><name pos:start="145:13" pos:end="145:22">av_bprintf</name><argument_list pos:start="145:23" pos:end="145:49">(<argument pos:start="145:24" pos:end="145:32"><expr pos:start="145:24" pos:end="145:32"><operator pos:start="145:24" pos:end="145:24">&amp;</operator><name pos:start="145:25" pos:end="145:32">meta_buf</name></expr></argument>, <argument pos:start="145:35" pos:end="145:38"><expr pos:start="145:35" pos:end="145:38"><literal type="string" pos:start="145:35" pos:end="145:38">"%s"</literal></expr></argument>, <argument pos:start="145:41" pos:end="145:48"><expr pos:start="145:41" pos:end="145:48"><name pos:start="145:41" pos:end="145:48"><name pos:start="145:41" pos:end="145:41">e</name><operator pos:start="145:42" pos:end="145:43">-&gt;</operator><name pos:start="145:44" pos:end="145:48">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:48"><expr pos:start="147:13" pos:end="147:47"><call pos:start="147:13" pos:end="147:47"><name pos:start="147:13" pos:end="147:27">av_bprint_chars</name><argument_list pos:start="147:28" pos:end="147:47">(<argument pos:start="147:29" pos:end="147:37"><expr pos:start="147:29" pos:end="147:37"><operator pos:start="147:29" pos:end="147:29">&amp;</operator><name pos:start="147:30" pos:end="147:37">meta_buf</name></expr></argument>, <argument pos:start="147:40" pos:end="147:43"><expr pos:start="147:40" pos:end="147:43"><literal type="char" pos:start="147:40" pos:end="147:43">'\0'</literal></expr></argument>, <argument pos:start="147:46" pos:end="147:46"><expr pos:start="147:46" pos:end="147:46"><literal type="number" pos:start="147:46" pos:end="147:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="161:9">if <condition pos:start="151:12" pos:end="155:64">(<expr pos:start="151:13" pos:end="155:63"><operator pos:start="151:13" pos:end="151:13">!</operator><call pos:start="151:14" pos:end="151:45"><name pos:start="151:14" pos:end="151:34">av_bprint_is_complete</name><argument_list pos:start="151:35" pos:end="151:45">(<argument pos:start="151:36" pos:end="151:44"><expr pos:start="151:36" pos:end="151:44"><operator pos:start="151:36" pos:end="151:36">&amp;</operator><name pos:start="151:37" pos:end="151:44">meta_buf</name></expr></argument>)</argument_list></call> <operator pos:start="151:47" pos:end="151:48">||</operator>

            <operator pos:start="153:13" pos:end="153:13">!</operator><operator pos:start="153:14" pos:end="153:14">(</operator><name pos:start="153:15" pos:end="153:22">metadata</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="155:62"><name pos:start="153:26" pos:end="153:48">av_packet_new_side_data</name><argument_list pos:start="153:49" pos:end="155:62">(<argument pos:start="153:50" pos:end="153:52"><expr pos:start="153:50" pos:end="153:52"><name pos:start="153:50" pos:end="153:52">pkt</name></expr></argument>, <argument pos:start="153:55" pos:end="153:82"><expr pos:start="153:55" pos:end="153:82"><name pos:start="153:55" pos:end="153:82">AV_PKT_DATA_STRINGS_METADATA</name></expr></argument>,

                                                 <argument pos:start="155:50" pos:end="155:61"><expr pos:start="155:50" pos:end="155:61"><name pos:start="155:50" pos:end="155:61"><name pos:start="155:50" pos:end="155:57">meta_buf</name><operator pos:start="155:58" pos:end="155:58">.</operator><name pos:start="155:59" pos:end="155:61">len</name></name></expr></argument>)</argument_list></call><operator pos:start="155:63" pos:end="155:63">)</operator></expr>)</condition> <block pos:start="155:66" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:35">

            <expr_stmt pos:start="157:13" pos:end="157:48"><expr pos:start="157:13" pos:end="157:47"><call pos:start="157:13" pos:end="157:47"><name pos:start="157:13" pos:end="157:30">av_bprint_finalize</name><argument_list pos:start="157:31" pos:end="157:47">(<argument pos:start="157:32" pos:end="157:40"><expr pos:start="157:32" pos:end="157:40"><operator pos:start="157:32" pos:end="157:32">&amp;</operator><name pos:start="157:33" pos:end="157:40">meta_buf</name></expr></argument>, <argument pos:start="157:43" pos:end="157:46"><expr pos:start="157:43" pos:end="157:46"><name pos:start="157:43" pos:end="157:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:35">return <expr pos:start="159:20" pos:end="159:34"><call pos:start="159:20" pos:end="159:34"><name pos:start="159:20" pos:end="159:26">AVERROR</name><argument_list pos:start="159:27" pos:end="159:34">(<argument pos:start="159:28" pos:end="159:33"><expr pos:start="159:28" pos:end="159:33"><name pos:start="159:28" pos:end="159:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:53"><expr pos:start="163:9" pos:end="163:52"><call pos:start="163:9" pos:end="163:52"><name pos:start="163:9" pos:end="163:14">memcpy</name><argument_list pos:start="163:15" pos:end="163:52">(<argument pos:start="163:16" pos:end="163:23"><expr pos:start="163:16" pos:end="163:23"><name pos:start="163:16" pos:end="163:23">metadata</name></expr></argument>, <argument pos:start="163:26" pos:end="163:37"><expr pos:start="163:26" pos:end="163:37"><name pos:start="163:26" pos:end="163:37"><name pos:start="163:26" pos:end="163:33">meta_buf</name><operator pos:start="163:34" pos:end="163:34">.</operator><name pos:start="163:35" pos:end="163:37">str</name></name></expr></argument>, <argument pos:start="163:40" pos:end="163:51"><expr pos:start="163:40" pos:end="163:51"><name pos:start="163:40" pos:end="163:51"><name pos:start="163:40" pos:end="163:47">meta_buf</name><operator pos:start="163:48" pos:end="163:48">.</operator><name pos:start="163:49" pos:end="163:51">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:44"><expr pos:start="165:9" pos:end="165:43"><call pos:start="165:9" pos:end="165:43"><name pos:start="165:9" pos:end="165:26">av_bprint_finalize</name><argument_list pos:start="165:27" pos:end="165:43">(<argument pos:start="165:28" pos:end="165:36"><expr pos:start="165:28" pos:end="165:36"><operator pos:start="165:28" pos:end="165:28">&amp;</operator><name pos:start="165:29" pos:end="165:36">meta_buf</name></expr></argument>, <argument pos:start="165:39" pos:end="165:42"><expr pos:start="165:39" pos:end="165:42"><name pos:start="165:39" pos:end="165:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:35"><expr pos:start="171:5" pos:end="171:34"><name pos:start="171:5" pos:end="171:21"><name pos:start="171:5" pos:end="171:7">pkt</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:21">stream_index</name></name> <operator pos:start="171:23" pos:end="171:23">=</operator> <name pos:start="171:25" pos:end="171:34">stream_idx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:24"><expr pos:start="173:5" pos:end="173:23"><name pos:start="173:5" pos:end="173:12"><name pos:start="173:5" pos:end="173:7">pkt</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:12">pts</name></name> <operator pos:start="173:14" pos:end="173:14">=</operator> <name pos:start="173:16" pos:end="173:23"><name pos:start="173:16" pos:end="173:18">ref</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:23">pts</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:24"><expr pos:start="175:5" pos:end="175:23"><name pos:start="175:5" pos:end="175:12"><name pos:start="175:5" pos:end="175:7">pkt</name><operator pos:start="175:8" pos:end="175:9">-&gt;</operator><name pos:start="175:10" pos:end="175:12">pos</name></name> <operator pos:start="175:14" pos:end="175:14">=</operator> <name pos:start="175:16" pos:end="175:23"><name pos:start="175:16" pos:end="175:18">ref</name><operator pos:start="175:19" pos:end="175:20">-&gt;</operator><name pos:start="175:21" pos:end="175:23">pos</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:21"><expr pos:start="177:5" pos:end="177:20"><name pos:start="177:5" pos:end="177:13"><name pos:start="177:5" pos:end="177:7">pkt</name><operator pos:start="177:8" pos:end="177:9">-&gt;</operator><name pos:start="177:10" pos:end="177:13">size</name></name> <operator pos:start="177:15" pos:end="177:15">=</operator> <name pos:start="177:17" pos:end="177:20">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:31"><expr pos:start="179:5" pos:end="179:30"><call pos:start="179:5" pos:end="179:30"><name pos:start="179:5" pos:end="179:25">avfilter_unref_buffer</name><argument_list pos:start="179:26" pos:end="179:30">(<argument pos:start="179:27" pos:end="179:29"><expr pos:start="179:27" pos:end="179:29"><name pos:start="179:27" pos:end="179:29">ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="181:5" pos:end="181:16">return <expr pos:start="181:12" pos:end="181:15"><name pos:start="181:12" pos:end="181:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
