<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4889.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">fmod_init_in</name> <parameter_list pos:start="1:25" pos:end="1:58">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:34">HWVoiceIn</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">hw</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">audsettings_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">as</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">bits16</name></decl>, <decl pos:start="5:17" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:20">mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">FMODVoiceIn</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">fmd</name> <init pos:start="7:22" pos:end="7:41">= <expr pos:start="7:24" pos:end="7:41"><operator pos:start="7:24" pos:end="7:24">(</operator><name pos:start="7:25" pos:end="7:35">FMODVoiceIn</name> <operator pos:start="7:37" pos:end="7:37">*</operator><operator pos:start="7:38" pos:end="7:38">)</operator> <name pos:start="7:40" pos:end="7:41">hw</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">audsettings_t</name></type> <name pos:start="9:19" pos:end="9:24">obt_as</name> <init pos:start="9:26" pos:end="9:30">= <expr pos:start="9:28" pos:end="9:30"><operator pos:start="9:28" pos:end="9:28">*</operator><name pos:start="9:29" pos:end="9:30">as</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:24">(<expr pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:12">conf</name><operator pos:start="13:13" pos:end="13:13">.</operator><name pos:start="13:14" pos:end="13:23">broken_adc</name></name></expr>)</condition> <block pos:start="13:26" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:18">

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:64"><expr pos:start="21:5" pos:end="21:63"><name pos:start="21:5" pos:end="21:8">mode</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:63"><name pos:start="21:12" pos:end="21:25">aud_to_fmodfmt</name> <argument_list pos:start="21:27" pos:end="21:63">(<argument pos:start="21:28" pos:end="21:34"><expr pos:start="21:28" pos:end="21:34"><name pos:start="21:28" pos:end="21:34"><name pos:start="21:28" pos:end="21:29">as</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:34">fmt</name></name></expr></argument>, <argument pos:start="21:37" pos:end="21:62"><expr pos:start="21:37" pos:end="21:62"><ternary pos:start="21:37" pos:end="21:62"><condition pos:start="21:37" pos:end="21:56"><expr pos:start="21:37" pos:end="21:54"><name pos:start="21:37" pos:end="21:49"><name pos:start="21:37" pos:end="21:38">as</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:49">nchannels</name></name> <operator pos:start="21:51" pos:end="21:52">==</operator> <literal type="number" pos:start="21:54" pos:end="21:54">2</literal></expr> ?</condition><then pos:start="21:58" pos:end="21:58"> <expr pos:start="21:58" pos:end="21:58"><literal type="number" pos:start="21:58" pos:end="21:58">1</literal></expr> </then><else pos:start="21:60" pos:end="21:62">: <expr pos:start="21:62" pos:end="21:62"><literal type="number" pos:start="21:62" pos:end="21:62">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="39:10"><expr pos:start="23:5" pos:end="39:9"><name pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:7">fmd</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:20">fmod_sample</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <call pos:start="23:24" pos:end="39:9"><name pos:start="23:24" pos:end="23:42">FSOUND_Sample_Alloc</name> <argument_list pos:start="23:44" pos:end="39:9">(

        <argument pos:start="25:9" pos:end="25:19"><expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:19">FSOUND_FREE</name></expr></argument>,            <comment type="block" pos:start="25:33" pos:end="25:43">/* index */</comment>

        <argument pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:12">conf</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:23">nb_samples</name></name></expr></argument>,        <comment type="block" pos:start="27:33" pos:end="27:44">/* length */</comment>

        <argument pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:12">mode</name></expr></argument>,                   <comment type="block" pos:start="29:33" pos:end="29:42">/* mode */</comment>

        <argument pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:10">as</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:16">freq</name></name></expr></argument>,               <comment type="block" pos:start="31:33" pos:end="31:42">/* freq */</comment>

        <argument pos:start="33:9" pos:end="33:11"><expr pos:start="33:9" pos:end="33:11"><literal type="number" pos:start="33:9" pos:end="33:11">255</literal></expr></argument>,                    <comment type="block" pos:start="33:33" pos:end="33:44">/* volume */</comment>

        <argument pos:start="35:9" pos:end="35:11"><expr pos:start="35:9" pos:end="35:11"><literal type="number" pos:start="35:9" pos:end="35:11">128</literal></expr></argument>,                    <comment type="block" pos:start="35:33" pos:end="35:41">/* pan */</comment>

        <argument pos:start="37:9" pos:end="37:11"><expr pos:start="37:9" pos:end="37:11"><literal type="number" pos:start="37:9" pos:end="37:11">255</literal></expr></argument>                     <comment type="block" pos:start="37:33" pos:end="37:46">/* priority */</comment>

        )</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:26">(<expr pos:start="43:9" pos:end="43:25"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:25"><name pos:start="43:10" pos:end="43:12">fmd</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:25">fmod_sample</name></name></expr>)</condition> <block pos:start="43:28" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:65"><expr pos:start="45:9" pos:end="45:64"><call pos:start="45:9" pos:end="45:64"><name pos:start="45:9" pos:end="45:20">fmod_logerr2</name> <argument_list pos:start="45:22" pos:end="45:64">(<argument pos:start="45:23" pos:end="45:27"><expr pos:start="45:23" pos:end="45:27"><literal type="string" pos:start="45:23" pos:end="45:27">"ADC"</literal></expr></argument>, <argument pos:start="45:30" pos:end="45:63"><expr pos:start="45:30" pos:end="45:63"><literal type="string" pos:start="45:30" pos:end="45:63">"Failed to allocate FMOD sample\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:55">/* FMOD always operates on little endian frames? */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:10">obt_as</name><operator pos:start="55:11" pos:end="55:11">.</operator><name pos:start="55:12" pos:end="55:21">endianness</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><call pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:23">audio_pcm_init_info</name> <argument_list pos:start="57:25" pos:end="57:44">(<argument pos:start="57:26" pos:end="57:34"><expr pos:start="57:26" pos:end="57:34"><operator pos:start="57:26" pos:end="57:26">&amp;</operator><name pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:28">hw</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:34">info</name></name></expr></argument>, <argument pos:start="57:37" pos:end="57:43"><expr pos:start="57:37" pos:end="57:43"><operator pos:start="57:37" pos:end="57:37">&amp;</operator><name pos:start="57:38" pos:end="57:43">obt_as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:10">bits16</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:18">mode</name> <operator pos:start="59:20" pos:end="59:20">&amp;</operator> <name pos:start="59:22" pos:end="59:34">FSOUND_16BITS</name><operator pos:start="59:35" pos:end="59:35">)</operator> <operator pos:start="59:37" pos:end="59:38">!=</operator> <literal type="number" pos:start="59:40" pos:end="59:40">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:6">hw</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:15">samples</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:33"><name pos:start="61:19" pos:end="61:22">conf</name><operator pos:start="61:23" pos:end="61:23">.</operator><name pos:start="61:24" pos:end="61:33">nb_samples</name></name></expr>;</expr_stmt>

    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
