<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17202.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_playlist</name><parameter_list pos:start="1:26" pos:end="3:63">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:42">AppleHTTPContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">c</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">url</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:45"><decl pos:start="3:27" pos:end="3:45"><type pos:start="3:27" pos:end="3:45"><name pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:32">struct</name> <name pos:start="3:34" pos:end="3:40">variant</name></name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">var</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:62"><decl pos:start="3:48" pos:end="3:62"><type pos:start="3:48" pos:end="3:62"><name pos:start="3:48" pos:end="3:58">AVIOContext</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">in</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="245:1">{<block_content pos:start="7:5" pos:end="243:15">

    <decl_stmt pos:start="7:5" pos:end="7:77"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>, <decl pos:start="7:18" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:25">duration</name> <init pos:start="7:27" pos:end="7:29">= <expr pos:start="7:29" pos:end="7:29"><literal type="number" pos:start="7:29" pos:end="7:29">0</literal></expr></init></decl>, <decl pos:start="7:32" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:41">is_segment</name> <init pos:start="7:43" pos:end="7:45">= <expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">0</literal></expr></init></decl>, <decl pos:start="7:48" pos:end="7:61"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:48" pos:end="7:57">is_variant</name> <init pos:start="7:59" pos:end="7:61">= <expr pos:start="7:61" pos:end="7:61"><literal type="number" pos:start="7:61" pos:end="7:61">0</literal></expr></init></decl>, <decl pos:start="7:64" pos:end="7:76"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:64" pos:end="7:72">bandwidth</name> <init pos:start="7:74" pos:end="7:76">= <expr pos:start="7:76" pos:end="7:76"><literal type="number" pos:start="7:76" pos:end="7:76">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:8">enum</name> <name pos:start="9:10" pos:end="9:16">KeyType</name></name></type> <name pos:start="9:18" pos:end="9:25">key_type</name> <init pos:start="9:27" pos:end="9:36">= <expr pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:36">KEY_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:18"><name pos:start="11:13" pos:end="11:14">iv</name><index pos:start="11:15" pos:end="11:18">[<expr pos:start="11:16" pos:end="11:17"><literal type="number" pos:start="11:16" pos:end="11:17">16</literal></expr>]</index></name> <init pos:start="11:20" pos:end="11:23">= <expr pos:start="11:22" pos:end="11:23"><literal type="string" pos:start="11:22" pos:end="11:23">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">has_iv</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:26"><name pos:start="15:10" pos:end="15:12">key</name><index pos:start="15:13" pos:end="15:26">[<expr pos:start="15:14" pos:end="15:25"><name pos:start="15:14" pos:end="15:25">MAX_URL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:19"><name pos:start="17:10" pos:end="17:13">line</name><index pos:start="17:14" pos:end="17:19">[<expr pos:start="17:15" pos:end="17:18"><literal type="number" pos:start="17:15" pos:end="17:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">close_in</name> <init pos:start="21:18" pos:end="21:20">= <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:12">(<expr pos:start="25:9" pos:end="25:11"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:11">in</name></expr>)</condition> <block pos:start="25:14" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:23">

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:16">close_in</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="33:23"><if pos:start="29:9" pos:end="33:23">if <condition pos:start="29:12" pos:end="31:64">(<expr pos:start="29:13" pos:end="31:63"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:16">ret</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="31:58"><name pos:start="29:20" pos:end="29:29">avio_open2</name><argument_list pos:start="29:30" pos:end="31:58">(<argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:33">in</name></expr></argument>, <argument pos:start="29:36" pos:end="29:38"><expr pos:start="29:36" pos:end="29:38"><name pos:start="29:36" pos:end="29:38">url</name></expr></argument>, <argument pos:start="29:41" pos:end="29:54"><expr pos:start="29:41" pos:end="29:54"><name pos:start="29:41" pos:end="29:54">AVIO_FLAG_READ</name></expr></argument>,

                              <argument pos:start="31:31" pos:end="31:51"><expr pos:start="31:31" pos:end="31:51"><name pos:start="31:31" pos:end="31:51"><name pos:start="31:31" pos:end="31:31">c</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:51">interrupt_callback</name></name></expr></argument>, <argument pos:start="31:54" pos:end="31:57"><expr pos:start="31:54" pos:end="31:57"><name pos:start="31:54" pos:end="31:57">NULL</name></expr></argument>)</argument_list></call><operator pos:start="31:59" pos:end="31:59">)</operator> <operator pos:start="31:61" pos:end="31:61">&lt;</operator> <literal type="number" pos:start="31:63" pos:end="31:63">0</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:23"><block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><call pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:19">read_chomp_line</name><argument_list pos:start="39:20" pos:end="39:43">(<argument pos:start="39:21" pos:end="39:22"><expr pos:start="39:21" pos:end="39:22"><name pos:start="39:21" pos:end="39:22">in</name></expr></argument>, <argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><name pos:start="39:25" pos:end="39:28">line</name></expr></argument>, <argument pos:start="39:31" pos:end="39:42"><expr pos:start="39:31" pos:end="39:42"><sizeof pos:start="39:31" pos:end="39:42">sizeof<argument_list pos:start="39:37" pos:end="39:42">(<argument pos:start="39:38" pos:end="39:41"><expr pos:start="39:38" pos:end="39:41"><name pos:start="39:38" pos:end="39:41">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:32">(<expr pos:start="41:9" pos:end="41:31"><call pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:14">strcmp</name><argument_list pos:start="41:15" pos:end="41:31">(<argument pos:start="41:16" pos:end="41:19"><expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">line</name></expr></argument>, <argument pos:start="41:22" pos:end="41:30"><expr pos:start="41:22" pos:end="41:30"><literal type="string" pos:start="41:22" pos:end="41:30">"#EXTM3U"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:34" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">var</name></expr>)</condition> <block pos:start="51:14" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:26">

        <expr_stmt pos:start="53:9" pos:end="53:31"><expr pos:start="53:9" pos:end="53:30"><call pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:25">free_segment_list</name><argument_list pos:start="53:26" pos:end="53:30">(<argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:11">var</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:21">finished</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <while pos:start="59:5" pos:end="229:5">while <condition pos:start="59:11" pos:end="59:28">(<expr pos:start="59:12" pos:end="59:27"><operator pos:start="59:12" pos:end="59:12">!</operator><name pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:14">in</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:27">eof_reached</name></name></expr>)</condition> <block pos:start="59:30" pos:end="229:5">{<block_content pos:start="61:9" pos:end="227:9">

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><call pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:23">read_chomp_line</name><argument_list pos:start="61:24" pos:end="61:47">(<argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><name pos:start="61:25" pos:end="61:26">in</name></expr></argument>, <argument pos:start="61:29" pos:end="61:32"><expr pos:start="61:29" pos:end="61:32"><name pos:start="61:29" pos:end="61:32">line</name></expr></argument>, <argument pos:start="61:35" pos:end="61:46"><expr pos:start="61:35" pos:end="61:46"><sizeof pos:start="61:35" pos:end="61:46">sizeof<argument_list pos:start="61:41" pos:end="61:46">(<argument pos:start="61:42" pos:end="61:45"><expr pos:start="61:42" pos:end="61:45"><name pos:start="61:42" pos:end="61:45">line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="227:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:58">(<expr pos:start="63:13" pos:end="63:57"><call pos:start="63:13" pos:end="63:57"><name pos:start="63:13" pos:end="63:23">av_strstart</name><argument_list pos:start="63:24" pos:end="63:57">(<argument pos:start="63:25" pos:end="63:28"><expr pos:start="63:25" pos:end="63:28"><name pos:start="63:25" pos:end="63:28">line</name></expr></argument>, <argument pos:start="63:31" pos:end="63:50"><expr pos:start="63:31" pos:end="63:50"><literal type="string" pos:start="63:31" pos:end="63:50">"#EXT-X-STREAM-INF:"</literal></expr></argument>, <argument pos:start="63:53" pos:end="63:56"><expr pos:start="63:53" pos:end="63:56"><operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:56">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:60" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:45">

            <decl_stmt pos:start="65:13" pos:end="65:45"><decl pos:start="65:13" pos:end="65:44"><type pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:18">struct</name> <name pos:start="65:20" pos:end="65:31">variant_info</name></name></type> <name pos:start="65:33" pos:end="65:36">info</name> <init pos:start="65:38" pos:end="65:44">= <expr pos:start="65:40" pos:end="65:44"><block pos:start="65:40" pos:end="65:44">{<expr pos:start="65:41" pos:end="65:43"><block pos:start="65:41" pos:end="65:43">{<expr pos:start="65:42" pos:end="65:42"><literal type="number" pos:start="65:42" pos:end="65:42">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:27"><expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:22">is_variant</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <literal type="number" pos:start="67:26" pos:end="67:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="71:38"><expr pos:start="69:13" pos:end="71:37"><call pos:start="69:13" pos:end="71:37"><name pos:start="69:13" pos:end="69:30">ff_parse_key_value</name><argument_list pos:start="69:31" pos:end="71:37">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">ptr</name></expr></argument>, <argument pos:start="69:37" pos:end="69:77"><expr pos:start="69:37" pos:end="69:77"><operator pos:start="69:37" pos:end="69:37">(</operator><name pos:start="69:38" pos:end="69:56">ff_parse_key_val_cb</name><operator pos:start="69:57" pos:end="69:57">)</operator> <name pos:start="69:59" pos:end="69:77">handle_variant_args</name></expr></argument>,

                               <argument pos:start="71:32" pos:end="71:36"><expr pos:start="71:32" pos:end="71:36"><operator pos:start="71:32" pos:end="71:32">&amp;</operator><name pos:start="71:33" pos:end="71:36">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:45"><expr pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:21">bandwidth</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <call pos:start="73:25" pos:end="73:44"><name pos:start="73:25" pos:end="73:28">atoi</name><argument_list pos:start="73:29" pos:end="73:44">(<argument pos:start="73:30" pos:end="73:43"><expr pos:start="73:30" pos:end="73:43"><name pos:start="73:30" pos:end="73:43"><name pos:start="73:30" pos:end="73:33">info</name><operator pos:start="73:34" pos:end="73:34">.</operator><name pos:start="73:35" pos:end="73:43">bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="75:11" pos:end="101:9">else if <condition pos:start="75:19" pos:end="75:58">(<expr pos:start="75:20" pos:end="75:57"><call pos:start="75:20" pos:end="75:57"><name pos:start="75:20" pos:end="75:30">av_strstart</name><argument_list pos:start="75:31" pos:end="75:57">(<argument pos:start="75:32" pos:end="75:35"><expr pos:start="75:32" pos:end="75:35"><name pos:start="75:32" pos:end="75:35">line</name></expr></argument>, <argument pos:start="75:38" pos:end="75:50"><expr pos:start="75:38" pos:end="75:50"><literal type="string" pos:start="75:38" pos:end="75:50">"#EXT-X-KEY:"</literal></expr></argument>, <argument pos:start="75:53" pos:end="75:56"><expr pos:start="75:53" pos:end="75:56"><operator pos:start="75:53" pos:end="75:53">&amp;</operator><name pos:start="75:54" pos:end="75:56">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:60" pos:end="101:9">{<block_content pos:start="77:13" pos:end="99:51">

            <decl_stmt pos:start="77:13" pos:end="77:41"><decl pos:start="77:13" pos:end="77:40"><type pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:18">struct</name> <name pos:start="77:20" pos:end="77:27">key_info</name></name></type> <name pos:start="77:29" pos:end="77:32">info</name> <init pos:start="77:34" pos:end="77:40">= <expr pos:start="77:36" pos:end="77:40"><block pos:start="77:36" pos:end="77:40">{<expr pos:start="77:37" pos:end="77:39"><block pos:start="77:37" pos:end="77:39">{<expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:38"><expr pos:start="79:13" pos:end="81:37"><call pos:start="79:13" pos:end="81:37"><name pos:start="79:13" pos:end="79:30">ff_parse_key_value</name><argument_list pos:start="79:31" pos:end="81:37">(<argument pos:start="79:32" pos:end="79:34"><expr pos:start="79:32" pos:end="79:34"><name pos:start="79:32" pos:end="79:34">ptr</name></expr></argument>, <argument pos:start="79:37" pos:end="79:73"><expr pos:start="79:37" pos:end="79:73"><operator pos:start="79:37" pos:end="79:37">(</operator><name pos:start="79:38" pos:end="79:56">ff_parse_key_val_cb</name><operator pos:start="79:57" pos:end="79:57">)</operator> <name pos:start="79:59" pos:end="79:73">handle_key_args</name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:36"><expr pos:start="81:32" pos:end="81:36"><operator pos:start="81:32" pos:end="81:32">&amp;</operator><name pos:start="81:33" pos:end="81:36">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:32"><expr pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:20">key_type</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:31">KEY_NONE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:23"><expr pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:18">has_iv</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="89:39"><if pos:start="87:13" pos:end="89:39">if <condition pos:start="87:16" pos:end="87:48">(<expr pos:start="87:17" pos:end="87:47"><operator pos:start="87:17" pos:end="87:17">!</operator><call pos:start="87:18" pos:end="87:47"><name pos:start="87:18" pos:end="87:23">strcmp</name><argument_list pos:start="87:24" pos:end="87:47">(<argument pos:start="87:25" pos:end="87:35"><expr pos:start="87:25" pos:end="87:35"><name pos:start="87:25" pos:end="87:35"><name pos:start="87:25" pos:end="87:28">info</name><operator pos:start="87:29" pos:end="87:29">.</operator><name pos:start="87:30" pos:end="87:35">method</name></name></expr></argument>, <argument pos:start="87:38" pos:end="87:46"><expr pos:start="87:38" pos:end="87:46"><literal type="string" pos:start="87:38" pos:end="87:46">"AES-128"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:39"><block_content pos:start="89:17" pos:end="89:39">

                <expr_stmt pos:start="89:17" pos:end="89:39"><expr pos:start="89:17" pos:end="89:38"><name pos:start="89:17" pos:end="89:24">key_type</name> <operator pos:start="89:26" pos:end="89:26">=</operator> <name pos:start="89:28" pos:end="89:38">KEY_AES_128</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:73">(<expr pos:start="91:17" pos:end="91:72"><operator pos:start="91:17" pos:end="91:17">!</operator><call pos:start="91:18" pos:end="91:42"><name pos:start="91:18" pos:end="91:24">strncmp</name><argument_list pos:start="91:25" pos:end="91:42">(<argument pos:start="91:26" pos:end="91:32"><expr pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:29">info</name><operator pos:start="91:30" pos:end="91:30">.</operator><name pos:start="91:31" pos:end="91:32">iv</name></name></expr></argument>, <argument pos:start="91:35" pos:end="91:38"><expr pos:start="91:35" pos:end="91:38"><literal type="string" pos:start="91:35" pos:end="91:38">"0x"</literal></expr></argument>, <argument pos:start="91:41" pos:end="91:41"><expr pos:start="91:41" pos:end="91:41"><literal type="number" pos:start="91:41" pos:end="91:41">2</literal></expr></argument>)</argument_list></call> <operator pos:start="91:44" pos:end="91:45">||</operator> <operator pos:start="91:47" pos:end="91:47">!</operator><call pos:start="91:48" pos:end="91:72"><name pos:start="91:48" pos:end="91:54">strncmp</name><argument_list pos:start="91:55" pos:end="91:72">(<argument pos:start="91:56" pos:end="91:62"><expr pos:start="91:56" pos:end="91:62"><name pos:start="91:56" pos:end="91:62"><name pos:start="91:56" pos:end="91:59">info</name><operator pos:start="91:60" pos:end="91:60">.</operator><name pos:start="91:61" pos:end="91:62">iv</name></name></expr></argument>, <argument pos:start="91:65" pos:end="91:68"><expr pos:start="91:65" pos:end="91:68"><literal type="string" pos:start="91:65" pos:end="91:68">"0X"</literal></expr></argument>, <argument pos:start="91:71" pos:end="91:71"><expr pos:start="91:71" pos:end="91:71"><literal type="number" pos:start="91:71" pos:end="91:71">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:75" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:27">

                <expr_stmt pos:start="93:17" pos:end="93:48"><expr pos:start="93:17" pos:end="93:47"><call pos:start="93:17" pos:end="93:47"><name pos:start="93:17" pos:end="93:30">ff_hex_to_data</name><argument_list pos:start="93:31" pos:end="93:47">(<argument pos:start="93:32" pos:end="93:33"><expr pos:start="93:32" pos:end="93:33"><name pos:start="93:32" pos:end="93:33">iv</name></expr></argument>, <argument pos:start="93:36" pos:end="93:46"><expr pos:start="93:36" pos:end="93:46"><name pos:start="93:36" pos:end="93:42"><name pos:start="93:36" pos:end="93:39">info</name><operator pos:start="93:40" pos:end="93:40">.</operator><name pos:start="93:41" pos:end="93:42">iv</name></name> <operator pos:start="93:44" pos:end="93:44">+</operator> <literal type="number" pos:start="93:46" pos:end="93:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:27"><expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:22">has_iv</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:51"><expr pos:start="99:13" pos:end="99:50"><call pos:start="99:13" pos:end="99:50"><name pos:start="99:13" pos:end="99:22">av_strlcpy</name><argument_list pos:start="99:23" pos:end="99:50">(<argument pos:start="99:24" pos:end="99:26"><expr pos:start="99:24" pos:end="99:26"><name pos:start="99:24" pos:end="99:26">key</name></expr></argument>, <argument pos:start="99:29" pos:end="99:36"><expr pos:start="99:29" pos:end="99:36"><name pos:start="99:29" pos:end="99:36"><name pos:start="99:29" pos:end="99:32">info</name><operator pos:start="99:33" pos:end="99:33">.</operator><name pos:start="99:34" pos:end="99:36">uri</name></name></expr></argument>, <argument pos:start="99:39" pos:end="99:49"><expr pos:start="99:39" pos:end="99:49"><sizeof pos:start="99:39" pos:end="99:49">sizeof<argument_list pos:start="99:45" pos:end="99:49">(<argument pos:start="99:46" pos:end="99:48"><expr pos:start="99:46" pos:end="99:48"><name pos:start="99:46" pos:end="99:48">key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="101:11" pos:end="119:9">else if <condition pos:start="101:19" pos:end="101:69">(<expr pos:start="101:20" pos:end="101:68"><call pos:start="101:20" pos:end="101:68"><name pos:start="101:20" pos:end="101:30">av_strstart</name><argument_list pos:start="101:31" pos:end="101:68">(<argument pos:start="101:32" pos:end="101:35"><expr pos:start="101:32" pos:end="101:35"><name pos:start="101:32" pos:end="101:35">line</name></expr></argument>, <argument pos:start="101:38" pos:end="101:61"><expr pos:start="101:38" pos:end="101:61"><literal type="string" pos:start="101:38" pos:end="101:61">"#EXT-X-TARGETDURATION:"</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:67"><expr pos:start="101:64" pos:end="101:67"><operator pos:start="101:64" pos:end="101:64">&amp;</operator><name pos:start="101:65" pos:end="101:67">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:71" pos:end="119:9">{<block_content pos:start="103:13" pos:end="117:45">

            <if_stmt pos:start="103:13" pos:end="115:13"><if pos:start="103:13" pos:end="115:13">if <condition pos:start="103:16" pos:end="103:21">(<expr pos:start="103:17" pos:end="103:20"><operator pos:start="103:17" pos:end="103:17">!</operator><name pos:start="103:18" pos:end="103:20">var</name></expr>)</condition> <block pos:start="103:23" pos:end="115:13">{<block_content pos:start="105:17" pos:end="113:17">

                <expr_stmt pos:start="105:17" pos:end="105:51"><expr pos:start="105:17" pos:end="105:50"><name pos:start="105:17" pos:end="105:19">var</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="105:50"><name pos:start="105:23" pos:end="105:33">new_variant</name><argument_list pos:start="105:34" pos:end="105:50">(<argument pos:start="105:35" pos:end="105:35"><expr pos:start="105:35" pos:end="105:35"><name pos:start="105:35" pos:end="105:35">c</name></expr></argument>, <argument pos:start="105:38" pos:end="105:38"><expr pos:start="105:38" pos:end="105:38"><literal type="number" pos:start="105:38" pos:end="105:38">0</literal></expr></argument>, <argument pos:start="105:41" pos:end="105:43"><expr pos:start="105:41" pos:end="105:43"><name pos:start="105:41" pos:end="105:43">url</name></expr></argument>, <argument pos:start="105:46" pos:end="105:49"><expr pos:start="105:46" pos:end="105:49"><name pos:start="105:46" pos:end="105:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="107:17" pos:end="113:17"><if pos:start="107:17" pos:end="113:17">if <condition pos:start="107:20" pos:end="107:25">(<expr pos:start="107:21" pos:end="107:24"><operator pos:start="107:21" pos:end="107:21">!</operator><name pos:start="107:22" pos:end="107:24">var</name></expr>)</condition> <block pos:start="107:27" pos:end="113:17">{<block_content pos:start="109:21" pos:end="111:30">

                    <expr_stmt pos:start="109:21" pos:end="109:42"><expr pos:start="109:21" pos:end="109:41"><name pos:start="109:21" pos:end="109:23">ret</name> <operator pos:start="109:25" pos:end="109:25">=</operator> <call pos:start="109:27" pos:end="109:41"><name pos:start="109:27" pos:end="109:33">AVERROR</name><argument_list pos:start="109:34" pos:end="109:41">(<argument pos:start="109:35" pos:end="109:40"><expr pos:start="109:35" pos:end="109:40"><name pos:start="109:35" pos:end="109:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="111:21" pos:end="111:30">goto <name pos:start="111:26" pos:end="111:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:45"><expr pos:start="117:13" pos:end="117:44"><name pos:start="117:13" pos:end="117:32"><name pos:start="117:13" pos:end="117:15">var</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:32">target_duration</name></name> <operator pos:start="117:34" pos:end="117:34">=</operator> <call pos:start="117:36" pos:end="117:44"><name pos:start="117:36" pos:end="117:39">atoi</name><argument_list pos:start="117:40" pos:end="117:44">(<argument pos:start="117:41" pos:end="117:43"><expr pos:start="117:41" pos:end="117:43"><name pos:start="117:41" pos:end="117:43">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="119:11" pos:end="137:9">else if <condition pos:start="119:19" pos:end="119:69">(<expr pos:start="119:20" pos:end="119:68"><call pos:start="119:20" pos:end="119:68"><name pos:start="119:20" pos:end="119:30">av_strstart</name><argument_list pos:start="119:31" pos:end="119:68">(<argument pos:start="119:32" pos:end="119:35"><expr pos:start="119:32" pos:end="119:35"><name pos:start="119:32" pos:end="119:35">line</name></expr></argument>, <argument pos:start="119:38" pos:end="119:61"><expr pos:start="119:38" pos:end="119:61"><literal type="string" pos:start="119:38" pos:end="119:61">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr></argument>, <argument pos:start="119:64" pos:end="119:67"><expr pos:start="119:64" pos:end="119:67"><operator pos:start="119:64" pos:end="119:64">&amp;</operator><name pos:start="119:65" pos:end="119:67">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:71" pos:end="137:9">{<block_content pos:start="121:13" pos:end="135:42">

            <if_stmt pos:start="121:13" pos:end="133:13"><if pos:start="121:13" pos:end="133:13">if <condition pos:start="121:16" pos:end="121:21">(<expr pos:start="121:17" pos:end="121:20"><operator pos:start="121:17" pos:end="121:17">!</operator><name pos:start="121:18" pos:end="121:20">var</name></expr>)</condition> <block pos:start="121:23" pos:end="133:13">{<block_content pos:start="123:17" pos:end="131:17">

                <expr_stmt pos:start="123:17" pos:end="123:51"><expr pos:start="123:17" pos:end="123:50"><name pos:start="123:17" pos:end="123:19">var</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <call pos:start="123:23" pos:end="123:50"><name pos:start="123:23" pos:end="123:33">new_variant</name><argument_list pos:start="123:34" pos:end="123:50">(<argument pos:start="123:35" pos:end="123:35"><expr pos:start="123:35" pos:end="123:35"><name pos:start="123:35" pos:end="123:35">c</name></expr></argument>, <argument pos:start="123:38" pos:end="123:38"><expr pos:start="123:38" pos:end="123:38"><literal type="number" pos:start="123:38" pos:end="123:38">0</literal></expr></argument>, <argument pos:start="123:41" pos:end="123:43"><expr pos:start="123:41" pos:end="123:43"><name pos:start="123:41" pos:end="123:43">url</name></expr></argument>, <argument pos:start="123:46" pos:end="123:49"><expr pos:start="123:46" pos:end="123:49"><name pos:start="123:46" pos:end="123:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="131:17"><if pos:start="125:17" pos:end="131:17">if <condition pos:start="125:20" pos:end="125:25">(<expr pos:start="125:21" pos:end="125:24"><operator pos:start="125:21" pos:end="125:21">!</operator><name pos:start="125:22" pos:end="125:24">var</name></expr>)</condition> <block pos:start="125:27" pos:end="131:17">{<block_content pos:start="127:21" pos:end="129:30">

                    <expr_stmt pos:start="127:21" pos:end="127:42"><expr pos:start="127:21" pos:end="127:41"><name pos:start="127:21" pos:end="127:23">ret</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <call pos:start="127:27" pos:end="127:41"><name pos:start="127:27" pos:end="127:33">AVERROR</name><argument_list pos:start="127:34" pos:end="127:41">(<argument pos:start="127:35" pos:end="127:40"><expr pos:start="127:35" pos:end="127:40"><name pos:start="127:35" pos:end="127:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="129:21" pos:end="129:30">goto <name pos:start="129:26" pos:end="129:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:42"><expr pos:start="135:13" pos:end="135:41"><name pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:15">var</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:29">start_seq_no</name></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <call pos:start="135:33" pos:end="135:41"><name pos:start="135:33" pos:end="135:36">atoi</name><argument_list pos:start="135:37" pos:end="135:41">(<argument pos:start="135:38" pos:end="135:40"><expr pos:start="135:38" pos:end="135:40"><name pos:start="135:38" pos:end="135:40">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="137:11" pos:end="143:9">else if <condition pos:start="137:19" pos:end="137:61">(<expr pos:start="137:20" pos:end="137:60"><call pos:start="137:20" pos:end="137:60"><name pos:start="137:20" pos:end="137:30">av_strstart</name><argument_list pos:start="137:31" pos:end="137:60">(<argument pos:start="137:32" pos:end="137:35"><expr pos:start="137:32" pos:end="137:35"><name pos:start="137:32" pos:end="137:35">line</name></expr></argument>, <argument pos:start="137:38" pos:end="137:53"><expr pos:start="137:38" pos:end="137:53"><literal type="string" pos:start="137:38" pos:end="137:53">"#EXT-X-ENDLIST"</literal></expr></argument>, <argument pos:start="137:56" pos:end="137:59"><expr pos:start="137:56" pos:end="137:59"><operator pos:start="137:56" pos:end="137:56">&amp;</operator><name pos:start="137:57" pos:end="137:59">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:63" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:34">

            <if_stmt pos:start="139:13" pos:end="141:34"><if pos:start="139:13" pos:end="141:34">if <condition pos:start="139:16" pos:end="139:20">(<expr pos:start="139:17" pos:end="139:19"><name pos:start="139:17" pos:end="139:19">var</name></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:34"><block_content pos:start="141:17" pos:end="141:34">

                <expr_stmt pos:start="141:17" pos:end="141:34"><expr pos:start="141:17" pos:end="141:33"><name pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:19">var</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:29">finished</name></name> <operator pos:start="141:31" pos:end="141:31">=</operator> <literal type="number" pos:start="141:33" pos:end="141:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="143:11" pos:end="149:9">else if <condition pos:start="143:19" pos:end="143:55">(<expr pos:start="143:20" pos:end="143:54"><call pos:start="143:20" pos:end="143:54"><name pos:start="143:20" pos:end="143:30">av_strstart</name><argument_list pos:start="143:31" pos:end="143:54">(<argument pos:start="143:32" pos:end="143:35"><expr pos:start="143:32" pos:end="143:35"><name pos:start="143:32" pos:end="143:35">line</name></expr></argument>, <argument pos:start="143:38" pos:end="143:47"><expr pos:start="143:38" pos:end="143:47"><literal type="string" pos:start="143:38" pos:end="143:47">"#EXTINF:"</literal></expr></argument>, <argument pos:start="143:50" pos:end="143:53"><expr pos:start="143:50" pos:end="143:53"><operator pos:start="143:50" pos:end="143:50">&amp;</operator><name pos:start="143:51" pos:end="143:53">ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:57" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:35">

            <expr_stmt pos:start="145:13" pos:end="145:27"><expr pos:start="145:13" pos:end="145:26"><name pos:start="145:13" pos:end="145:22">is_segment</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <literal type="number" pos:start="145:26" pos:end="145:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:35"><expr pos:start="147:13" pos:end="147:34"><name pos:start="147:13" pos:end="147:20">duration</name>   <operator pos:start="147:24" pos:end="147:24">=</operator> <call pos:start="147:26" pos:end="147:34"><name pos:start="147:26" pos:end="147:29">atoi</name><argument_list pos:start="147:30" pos:end="147:34">(<argument pos:start="147:31" pos:end="147:33"><expr pos:start="147:31" pos:end="147:33"><name pos:start="147:31" pos:end="147:33">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="149:11" pos:end="153:9">else if <condition pos:start="149:19" pos:end="149:48">(<expr pos:start="149:20" pos:end="149:47"><call pos:start="149:20" pos:end="149:47"><name pos:start="149:20" pos:end="149:30">av_strstart</name><argument_list pos:start="149:31" pos:end="149:47">(<argument pos:start="149:32" pos:end="149:35"><expr pos:start="149:32" pos:end="149:35"><name pos:start="149:32" pos:end="149:35">line</name></expr></argument>, <argument pos:start="149:38" pos:end="149:40"><expr pos:start="149:38" pos:end="149:40"><literal type="string" pos:start="149:38" pos:end="149:40">"#"</literal></expr></argument>, <argument pos:start="149:43" pos:end="149:46"><expr pos:start="149:43" pos:end="149:46"><name pos:start="149:43" pos:end="149:46">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:50" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:21">

            <continue pos:start="151:13" pos:end="151:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="153:11" pos:end="227:9">else if <condition pos:start="153:19" pos:end="153:27">(<expr pos:start="153:20" pos:end="153:26"><name pos:start="153:20" pos:end="153:26"><name pos:start="153:20" pos:end="153:23">line</name><index pos:start="153:24" pos:end="153:26">[<expr pos:start="153:25" pos:end="153:25"><literal type="number" pos:start="153:25" pos:end="153:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="153:29" pos:end="227:9">{<block_content pos:start="155:13" pos:end="225:13">

            <if_stmt pos:start="155:13" pos:end="169:13"><if pos:start="155:13" pos:end="169:13">if <condition pos:start="155:16" pos:end="155:27">(<expr pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:26">is_variant</name></expr>)</condition> <block pos:start="155:29" pos:end="169:13">{<block_content pos:start="157:17" pos:end="167:31">

                <if_stmt pos:start="157:17" pos:end="163:17"><if pos:start="157:17" pos:end="163:17">if <condition pos:start="157:20" pos:end="157:58">(<expr pos:start="157:21" pos:end="157:57"><operator pos:start="157:21" pos:end="157:21">!</operator><call pos:start="157:22" pos:end="157:57"><name pos:start="157:22" pos:end="157:32">new_variant</name><argument_list pos:start="157:33" pos:end="157:57">(<argument pos:start="157:34" pos:end="157:34"><expr pos:start="157:34" pos:end="157:34"><name pos:start="157:34" pos:end="157:34">c</name></expr></argument>, <argument pos:start="157:37" pos:end="157:45"><expr pos:start="157:37" pos:end="157:45"><name pos:start="157:37" pos:end="157:45">bandwidth</name></expr></argument>, <argument pos:start="157:48" pos:end="157:51"><expr pos:start="157:48" pos:end="157:51"><name pos:start="157:48" pos:end="157:51">line</name></expr></argument>, <argument pos:start="157:54" pos:end="157:56"><expr pos:start="157:54" pos:end="157:56"><name pos:start="157:54" pos:end="157:56">url</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:60" pos:end="163:17">{<block_content pos:start="159:21" pos:end="161:30">

                    <expr_stmt pos:start="159:21" pos:end="159:42"><expr pos:start="159:21" pos:end="159:41"><name pos:start="159:21" pos:end="159:23">ret</name> <operator pos:start="159:25" pos:end="159:25">=</operator> <call pos:start="159:27" pos:end="159:41"><name pos:start="159:27" pos:end="159:33">AVERROR</name><argument_list pos:start="159:34" pos:end="159:41">(<argument pos:start="159:35" pos:end="159:40"><expr pos:start="159:35" pos:end="159:40"><name pos:start="159:35" pos:end="159:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="161:21" pos:end="161:30">goto <name pos:start="161:26" pos:end="161:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:31"><expr pos:start="165:17" pos:end="165:30"><name pos:start="165:17" pos:end="165:26">is_variant</name> <operator pos:start="165:28" pos:end="165:28">=</operator> <literal type="number" pos:start="165:30" pos:end="165:30">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:31"><expr pos:start="167:17" pos:end="167:30"><name pos:start="167:17" pos:end="167:25">bandwidth</name>  <operator pos:start="167:28" pos:end="167:28">=</operator> <literal type="number" pos:start="167:30" pos:end="167:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="171:13" pos:end="225:13"><if pos:start="171:13" pos:end="225:13">if <condition pos:start="171:16" pos:end="171:27">(<expr pos:start="171:17" pos:end="171:26"><name pos:start="171:17" pos:end="171:26">is_segment</name></expr>)</condition> <block pos:start="171:29" pos:end="225:13">{<block_content pos:start="173:17" pos:end="223:31">

                <decl_stmt pos:start="173:17" pos:end="173:36"><decl pos:start="173:17" pos:end="173:35"><type pos:start="173:17" pos:end="173:32"><name pos:start="173:17" pos:end="173:30"><name pos:start="173:17" pos:end="173:22">struct</name> <name pos:start="173:24" pos:end="173:30">segment</name></name> <modifier pos:start="173:32" pos:end="173:32">*</modifier></type><name pos:start="173:33" pos:end="173:35">seg</name></decl>;</decl_stmt>

                <if_stmt pos:start="175:17" pos:end="187:17"><if pos:start="175:17" pos:end="187:17">if <condition pos:start="175:20" pos:end="175:25">(<expr pos:start="175:21" pos:end="175:24"><operator pos:start="175:21" pos:end="175:21">!</operator><name pos:start="175:22" pos:end="175:24">var</name></expr>)</condition> <block pos:start="175:27" pos:end="187:17">{<block_content pos:start="177:21" pos:end="185:21">

                    <expr_stmt pos:start="177:21" pos:end="177:55"><expr pos:start="177:21" pos:end="177:54"><name pos:start="177:21" pos:end="177:23">var</name> <operator pos:start="177:25" pos:end="177:25">=</operator> <call pos:start="177:27" pos:end="177:54"><name pos:start="177:27" pos:end="177:37">new_variant</name><argument_list pos:start="177:38" pos:end="177:54">(<argument pos:start="177:39" pos:end="177:39"><expr pos:start="177:39" pos:end="177:39"><name pos:start="177:39" pos:end="177:39">c</name></expr></argument>, <argument pos:start="177:42" pos:end="177:42"><expr pos:start="177:42" pos:end="177:42"><literal type="number" pos:start="177:42" pos:end="177:42">0</literal></expr></argument>, <argument pos:start="177:45" pos:end="177:47"><expr pos:start="177:45" pos:end="177:47"><name pos:start="177:45" pos:end="177:47">url</name></expr></argument>, <argument pos:start="177:50" pos:end="177:53"><expr pos:start="177:50" pos:end="177:53"><name pos:start="177:50" pos:end="177:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="179:21" pos:end="185:21"><if pos:start="179:21" pos:end="185:21">if <condition pos:start="179:24" pos:end="179:29">(<expr pos:start="179:25" pos:end="179:28"><operator pos:start="179:25" pos:end="179:25">!</operator><name pos:start="179:26" pos:end="179:28">var</name></expr>)</condition> <block pos:start="179:31" pos:end="185:21">{<block_content pos:start="181:25" pos:end="183:34">

                        <expr_stmt pos:start="181:25" pos:end="181:46"><expr pos:start="181:25" pos:end="181:45"><name pos:start="181:25" pos:end="181:27">ret</name> <operator pos:start="181:29" pos:end="181:29">=</operator> <call pos:start="181:31" pos:end="181:45"><name pos:start="181:31" pos:end="181:37">AVERROR</name><argument_list pos:start="181:38" pos:end="181:45">(<argument pos:start="181:39" pos:end="181:44"><expr pos:start="181:39" pos:end="181:44"><name pos:start="181:39" pos:end="181:44">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="183:25" pos:end="183:34">goto <name pos:start="183:30" pos:end="183:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:56"><expr pos:start="189:17" pos:end="189:55"><name pos:start="189:17" pos:end="189:19">seg</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <call pos:start="189:23" pos:end="189:55"><name pos:start="189:23" pos:end="189:31">av_malloc</name><argument_list pos:start="189:32" pos:end="189:55">(<argument pos:start="189:33" pos:end="189:54"><expr pos:start="189:33" pos:end="189:54"><sizeof pos:start="189:33" pos:end="189:54">sizeof<argument_list pos:start="189:39" pos:end="189:54">(<argument pos:start="189:40" pos:end="189:53"><expr pos:start="189:40" pos:end="189:53">struct <name pos:start="189:47" pos:end="189:53">segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="191:17" pos:end="197:17"><if pos:start="191:17" pos:end="197:17">if <condition pos:start="191:20" pos:end="191:25">(<expr pos:start="191:21" pos:end="191:24"><operator pos:start="191:21" pos:end="191:21">!</operator><name pos:start="191:22" pos:end="191:24">seg</name></expr>)</condition> <block pos:start="191:27" pos:end="197:17">{<block_content pos:start="193:21" pos:end="195:30">

                    <expr_stmt pos:start="193:21" pos:end="193:42"><expr pos:start="193:21" pos:end="193:41"><name pos:start="193:21" pos:end="193:23">ret</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <call pos:start="193:27" pos:end="193:41"><name pos:start="193:27" pos:end="193:33">AVERROR</name><argument_list pos:start="193:34" pos:end="193:41">(<argument pos:start="193:35" pos:end="193:40"><expr pos:start="193:35" pos:end="193:40"><name pos:start="193:35" pos:end="193:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="195:21" pos:end="195:30">goto <name pos:start="195:26" pos:end="195:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:41"><expr pos:start="199:17" pos:end="199:40"><name pos:start="199:17" pos:end="199:29"><name pos:start="199:17" pos:end="199:19">seg</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:29">duration</name></name> <operator pos:start="199:31" pos:end="199:31">=</operator> <name pos:start="199:33" pos:end="199:40">duration</name></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:41"><expr pos:start="201:17" pos:end="201:40"><name pos:start="201:17" pos:end="201:29"><name pos:start="201:17" pos:end="201:19">seg</name><operator pos:start="201:20" pos:end="201:21">-&gt;</operator><name pos:start="201:22" pos:end="201:29">key_type</name></name> <operator pos:start="201:31" pos:end="201:31">=</operator> <name pos:start="201:33" pos:end="201:40">key_type</name></expr>;</expr_stmt>

                <if_stmt pos:start="203:17" pos:end="215:17"><if pos:start="203:17" pos:end="207:17">if <condition pos:start="203:20" pos:end="203:27">(<expr pos:start="203:21" pos:end="203:26"><name pos:start="203:21" pos:end="203:26">has_iv</name></expr>)</condition> <block pos:start="203:29" pos:end="207:17">{<block_content pos:start="205:21" pos:end="205:52">

                    <expr_stmt pos:start="205:21" pos:end="205:52"><expr pos:start="205:21" pos:end="205:51"><call pos:start="205:21" pos:end="205:51"><name pos:start="205:21" pos:end="205:26">memcpy</name><argument_list pos:start="205:27" pos:end="205:51">(<argument pos:start="205:28" pos:end="205:34"><expr pos:start="205:28" pos:end="205:34"><name pos:start="205:28" pos:end="205:34"><name pos:start="205:28" pos:end="205:30">seg</name><operator pos:start="205:31" pos:end="205:32">-&gt;</operator><name pos:start="205:33" pos:end="205:34">iv</name></name></expr></argument>, <argument pos:start="205:37" pos:end="205:38"><expr pos:start="205:37" pos:end="205:38"><name pos:start="205:37" pos:end="205:38">iv</name></expr></argument>, <argument pos:start="205:41" pos:end="205:50"><expr pos:start="205:41" pos:end="205:50"><sizeof pos:start="205:41" pos:end="205:50">sizeof<argument_list pos:start="205:47" pos:end="205:50">(<argument pos:start="205:48" pos:end="205:49"><expr pos:start="205:48" pos:end="205:49"><name pos:start="205:48" pos:end="205:49">iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="207:19" pos:end="215:17">else <block pos:start="207:24" pos:end="215:17">{<block_content pos:start="209:21" pos:end="213:47">

                    <decl_stmt pos:start="209:21" pos:end="209:66"><decl pos:start="209:21" pos:end="209:65"><type pos:start="209:21" pos:end="209:23"><name pos:start="209:21" pos:end="209:23">int</name></type> <name pos:start="209:25" pos:end="209:27">seq</name> <init pos:start="209:29" pos:end="209:65">= <expr pos:start="209:31" pos:end="209:65"><name pos:start="209:31" pos:end="209:47"><name pos:start="209:31" pos:end="209:33">var</name><operator pos:start="209:34" pos:end="209:35">-&gt;</operator><name pos:start="209:36" pos:end="209:47">start_seq_no</name></name> <operator pos:start="209:49" pos:end="209:49">+</operator> <name pos:start="209:51" pos:end="209:65"><name pos:start="209:51" pos:end="209:53">var</name><operator pos:start="209:54" pos:end="209:55">-&gt;</operator><name pos:start="209:56" pos:end="209:65">n_segments</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:56"><expr pos:start="211:21" pos:end="211:55"><call pos:start="211:21" pos:end="211:55"><name pos:start="211:21" pos:end="211:26">memset</name><argument_list pos:start="211:27" pos:end="211:55">(<argument pos:start="211:28" pos:end="211:34"><expr pos:start="211:28" pos:end="211:34"><name pos:start="211:28" pos:end="211:34"><name pos:start="211:28" pos:end="211:30">seg</name><operator pos:start="211:31" pos:end="211:32">-&gt;</operator><name pos:start="211:33" pos:end="211:34">iv</name></name></expr></argument>, <argument pos:start="211:37" pos:end="211:37"><expr pos:start="211:37" pos:end="211:37"><literal type="number" pos:start="211:37" pos:end="211:37">0</literal></expr></argument>, <argument pos:start="211:40" pos:end="211:54"><expr pos:start="211:40" pos:end="211:54"><sizeof pos:start="211:40" pos:end="211:54">sizeof<argument_list pos:start="211:46" pos:end="211:54">(<argument pos:start="211:47" pos:end="211:53"><expr pos:start="211:47" pos:end="211:53"><name pos:start="211:47" pos:end="211:53"><name pos:start="211:47" pos:end="211:49">seg</name><operator pos:start="211:50" pos:end="211:51">-&gt;</operator><name pos:start="211:52" pos:end="211:53">iv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:47"><expr pos:start="213:21" pos:end="213:46"><call pos:start="213:21" pos:end="213:46"><name pos:start="213:21" pos:end="213:27">AV_WB32</name><argument_list pos:start="213:28" pos:end="213:46">(<argument pos:start="213:29" pos:end="213:40"><expr pos:start="213:29" pos:end="213:40"><name pos:start="213:29" pos:end="213:35"><name pos:start="213:29" pos:end="213:31">seg</name><operator pos:start="213:32" pos:end="213:33">-&gt;</operator><name pos:start="213:34" pos:end="213:35">iv</name></name> <operator pos:start="213:37" pos:end="213:37">+</operator> <literal type="number" pos:start="213:39" pos:end="213:40">12</literal></expr></argument>, <argument pos:start="213:43" pos:end="213:45"><expr pos:start="213:43" pos:end="213:45"><name pos:start="213:43" pos:end="213:45">seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:75"><expr pos:start="217:17" pos:end="217:74"><call pos:start="217:17" pos:end="217:74"><name pos:start="217:17" pos:end="217:36">ff_make_absolute_url</name><argument_list pos:start="217:37" pos:end="217:74">(<argument pos:start="217:38" pos:end="217:45"><expr pos:start="217:38" pos:end="217:45"><name pos:start="217:38" pos:end="217:45"><name pos:start="217:38" pos:end="217:40">seg</name><operator pos:start="217:41" pos:end="217:42">-&gt;</operator><name pos:start="217:43" pos:end="217:45">key</name></name></expr></argument>, <argument pos:start="217:48" pos:end="217:63"><expr pos:start="217:48" pos:end="217:63"><sizeof pos:start="217:48" pos:end="217:63">sizeof<argument_list pos:start="217:54" pos:end="217:63">(<argument pos:start="217:55" pos:end="217:62"><expr pos:start="217:55" pos:end="217:62"><name pos:start="217:55" pos:end="217:62"><name pos:start="217:55" pos:end="217:57">seg</name><operator pos:start="217:58" pos:end="217:59">-&gt;</operator><name pos:start="217:60" pos:end="217:62">key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="217:66" pos:end="217:68"><expr pos:start="217:66" pos:end="217:68"><name pos:start="217:66" pos:end="217:68">url</name></expr></argument>, <argument pos:start="217:71" pos:end="217:73"><expr pos:start="217:71" pos:end="217:73"><name pos:start="217:71" pos:end="217:73">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:76"><expr pos:start="219:17" pos:end="219:75"><call pos:start="219:17" pos:end="219:75"><name pos:start="219:17" pos:end="219:36">ff_make_absolute_url</name><argument_list pos:start="219:37" pos:end="219:75">(<argument pos:start="219:38" pos:end="219:45"><expr pos:start="219:38" pos:end="219:45"><name pos:start="219:38" pos:end="219:45"><name pos:start="219:38" pos:end="219:40">seg</name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:45">url</name></name></expr></argument>, <argument pos:start="219:48" pos:end="219:63"><expr pos:start="219:48" pos:end="219:63"><sizeof pos:start="219:48" pos:end="219:63">sizeof<argument_list pos:start="219:54" pos:end="219:63">(<argument pos:start="219:55" pos:end="219:62"><expr pos:start="219:55" pos:end="219:62"><name pos:start="219:55" pos:end="219:62"><name pos:start="219:55" pos:end="219:57">seg</name><operator pos:start="219:58" pos:end="219:59">-&gt;</operator><name pos:start="219:60" pos:end="219:62">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="219:66" pos:end="219:68"><expr pos:start="219:66" pos:end="219:68"><name pos:start="219:66" pos:end="219:68">url</name></expr></argument>, <argument pos:start="219:71" pos:end="219:74"><expr pos:start="219:71" pos:end="219:74"><name pos:start="219:71" pos:end="219:74">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:68"><expr pos:start="221:17" pos:end="221:67"><call pos:start="221:17" pos:end="221:67"><name pos:start="221:17" pos:end="221:28">dynarray_add</name><argument_list pos:start="221:29" pos:end="221:67">(<argument pos:start="221:30" pos:end="221:43"><expr pos:start="221:30" pos:end="221:43"><operator pos:start="221:30" pos:end="221:30">&amp;</operator><name pos:start="221:31" pos:end="221:43"><name pos:start="221:31" pos:end="221:33">var</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:43">segments</name></name></expr></argument>, <argument pos:start="221:46" pos:end="221:61"><expr pos:start="221:46" pos:end="221:61"><operator pos:start="221:46" pos:end="221:46">&amp;</operator><name pos:start="221:47" pos:end="221:61"><name pos:start="221:47" pos:end="221:49">var</name><operator pos:start="221:50" pos:end="221:51">-&gt;</operator><name pos:start="221:52" pos:end="221:61">n_segments</name></name></expr></argument>, <argument pos:start="221:64" pos:end="221:66"><expr pos:start="221:64" pos:end="221:66"><name pos:start="221:64" pos:end="221:66">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:31"><expr pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:26">is_segment</name> <operator pos:start="223:28" pos:end="223:28">=</operator> <literal type="number" pos:start="223:30" pos:end="223:30">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="231:5" pos:end="233:43"><if pos:start="231:5" pos:end="233:43">if <condition pos:start="231:8" pos:end="231:12">(<expr pos:start="231:9" pos:end="231:11"><name pos:start="231:9" pos:end="231:11">var</name></expr>)</condition><block type="pseudo" pos:start="233:9" pos:end="233:43"><block_content pos:start="233:9" pos:end="233:43">

        <expr_stmt pos:start="233:9" pos:end="233:43"><expr pos:start="233:9" pos:end="233:42"><name pos:start="233:9" pos:end="233:27"><name pos:start="233:9" pos:end="233:11">var</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:27">last_load_time</name></name> <operator pos:start="233:29" pos:end="233:29">=</operator> <call pos:start="233:31" pos:end="233:42"><name pos:start="233:31" pos:end="233:40">av_gettime</name><argument_list pos:start="233:41" pos:end="233:42">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="237:1" pos:end="237:5"><name pos:start="237:1" pos:end="237:4">fail</name>:</label>

    <if_stmt pos:start="239:5" pos:end="241:23"><if pos:start="239:5" pos:end="241:23">if <condition pos:start="239:8" pos:end="239:17">(<expr pos:start="239:9" pos:end="239:16"><name pos:start="239:9" pos:end="239:16">close_in</name></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="241:23"><block_content pos:start="241:9" pos:end="241:23">

        <expr_stmt pos:start="241:9" pos:end="241:23"><expr pos:start="241:9" pos:end="241:22"><call pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:18">avio_close</name><argument_list pos:start="241:19" pos:end="241:22">(<argument pos:start="241:20" pos:end="241:21"><expr pos:start="241:20" pos:end="241:21"><name pos:start="241:20" pos:end="241:21">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="243:5" pos:end="243:15">return <expr pos:start="243:12" pos:end="243:14"><name pos:start="243:12" pos:end="243:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
