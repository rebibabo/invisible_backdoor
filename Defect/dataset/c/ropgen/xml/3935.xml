<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3935.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:53">iscsi_co_get_block_status</name><parameter_list pos:start="1:54" pos:end="5:76">(<parameter pos:start="1:55" pos:end="1:74"><decl pos:start="1:55" pos:end="1:74"><type pos:start="1:55" pos:end="1:74"><name pos:start="1:55" pos:end="1:70">BlockDriverState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">bs</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:68"><decl pos:start="3:51" pos:end="3:68"><type pos:start="3:51" pos:end="3:68"><name pos:start="3:51" pos:end="3:57">int64_t</name></type> <name pos:start="3:59" pos:end="3:68">sector_num</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:64">nb_sectors</name></decl></parameter>, <parameter pos:start="5:67" pos:end="5:75"><decl pos:start="5:67" pos:end="5:75"><type pos:start="5:67" pos:end="5:75"><name pos:start="5:67" pos:end="5:69">int</name> <modifier pos:start="5:71" pos:end="5:71">*</modifier></type><name pos:start="5:72" pos:end="5:75">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="191:1">{<block_content pos:start="9:5" pos:end="189:15">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">IscsiLun</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">iscsilun</name> <init pos:start="9:24" pos:end="9:35">= <expr pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:27">bs</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:30"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:30">scsi_get_lba_status</name></name> <modifier pos:start="11:32" pos:end="11:32">*</modifier></type><name pos:start="11:33" pos:end="11:36">lbas</name> <init pos:start="11:38" pos:end="11:43">= <expr pos:start="11:40" pos:end="11:43"><name pos:start="11:40" pos:end="11:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:37">scsi_lba_status_descriptor</name></name> <modifier pos:start="13:39" pos:end="13:39">*</modifier></type><name pos:start="13:40" pos:end="13:44">lbasd</name> <init pos:start="13:46" pos:end="13:51">= <expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:20">IscsiTask</name></name></type> <name pos:start="15:22" pos:end="15:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><call pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:27">iscsi_co_init_iscsitask</name><argument_list pos:start="21:28" pos:end="21:45">(<argument pos:start="21:29" pos:end="21:36"><expr pos:start="21:29" pos:end="21:36"><name pos:start="21:29" pos:end="21:36">iscsilun</name></expr></argument>, <argument pos:start="21:39" pos:end="21:44"><expr pos:start="21:39" pos:end="21:44"><operator pos:start="21:39" pos:end="21:39">&amp;</operator><name pos:start="21:40" pos:end="21:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:66">(<expr pos:start="25:9" pos:end="25:65"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:65"><name pos:start="25:10" pos:end="25:31">is_request_lun_aligned</name><argument_list pos:start="25:32" pos:end="25:65">(<argument pos:start="25:33" pos:end="25:42"><expr pos:start="25:33" pos:end="25:42"><name pos:start="25:33" pos:end="25:42">sector_num</name></expr></argument>, <argument pos:start="25:45" pos:end="25:54"><expr pos:start="25:45" pos:end="25:54"><name pos:start="25:45" pos:end="25:54">nb_sectors</name></expr></argument>, <argument pos:start="25:57" pos:end="25:64"><expr pos:start="25:57" pos:end="25:64"><name pos:start="25:57" pos:end="25:64">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:68" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><name pos:start="27:16" pos:end="27:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:42">/* default to all sectors allocated */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:25">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:70"><expr pos:start="39:5" pos:end="39:69"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:10">|=</operator> <operator pos:start="39:12" pos:end="39:12">(</operator><name pos:start="39:13" pos:end="39:22">sector_num</name> <operator pos:start="39:24" pos:end="39:25">&lt;&lt;</operator> <name pos:start="39:27" pos:end="39:42">BDRV_SECTOR_BITS</name><operator pos:start="39:43" pos:end="39:43">)</operator> <operator pos:start="39:45" pos:end="39:45">|</operator> <name pos:start="39:47" pos:end="39:69">BDRV_BLOCK_OFFSET_VALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><operator pos:start="41:5" pos:end="41:5">*</operator><name pos:start="41:6" pos:end="41:9">pnum</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <name pos:start="41:13" pos:end="41:22">nb_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:57">/* LUN does not support logical block provisioning */</comment>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:25">(<expr pos:start="47:9" pos:end="47:24"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:17">iscsilun</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:24">lbpme</name></name></expr>)</condition> <block pos:start="47:27" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:17">

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="55:1" pos:end="55:6"><name pos:start="55:1" pos:end="55:5">retry</name>:</label>

    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="63:50">(<expr pos:start="57:9" pos:end="63:49"><call pos:start="57:9" pos:end="63:41"><name pos:start="57:9" pos:end="57:33">iscsi_get_lba_status_task</name><argument_list pos:start="57:34" pos:end="63:41">(<argument pos:start="57:35" pos:end="57:49"><expr pos:start="57:35" pos:end="57:49"><name pos:start="57:35" pos:end="57:49"><name pos:start="57:35" pos:end="57:42">iscsilun</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:49">iscsi</name></name></expr></argument>, <argument pos:start="57:52" pos:end="57:64"><expr pos:start="57:52" pos:end="57:64"><name pos:start="57:52" pos:end="57:64"><name pos:start="57:52" pos:end="57:59">iscsilun</name><operator pos:start="57:60" pos:end="57:61">-&gt;</operator><name pos:start="57:62" pos:end="57:64">lun</name></name></expr></argument>,

                                  <argument pos:start="59:35" pos:end="59:71"><expr pos:start="59:35" pos:end="59:71"><call pos:start="59:35" pos:end="59:71"><name pos:start="59:35" pos:end="59:49">sector_qemu2lun</name><argument_list pos:start="59:50" pos:end="59:71">(<argument pos:start="59:51" pos:end="59:60"><expr pos:start="59:51" pos:end="59:60"><name pos:start="59:51" pos:end="59:60">sector_num</name></expr></argument>, <argument pos:start="59:63" pos:end="59:70"><expr pos:start="59:63" pos:end="59:70"><name pos:start="59:63" pos:end="59:70">iscsilun</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="61:35" pos:end="61:40"><expr pos:start="61:35" pos:end="61:40"><literal type="number" pos:start="61:35" pos:end="61:37">8</literal> <operator pos:start="61:37" pos:end="61:37">+</operator> <literal type="number" pos:start="61:39" pos:end="61:40">16</literal></expr></argument>, <argument pos:start="61:43" pos:end="61:61"><expr pos:start="61:43" pos:end="61:61"><name pos:start="61:43" pos:end="61:61">iscsi_co_generic_cb</name></expr></argument>,

                                  <argument pos:start="63:35" pos:end="63:40"><expr pos:start="63:35" pos:end="63:40"><operator pos:start="63:35" pos:end="63:35">&amp;</operator><name pos:start="63:36" pos:end="63:40">iTask</name></expr></argument>)</argument_list></call> <operator pos:start="63:43" pos:end="63:44">==</operator> <name pos:start="63:46" pos:end="63:49">NULL</name></expr>)</condition> <block pos:start="63:52" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:17">

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="73:5" pos:end="79:5">while <condition pos:start="73:11" pos:end="73:27">(<expr pos:start="73:12" pos:end="73:26"><operator pos:start="73:12" pos:end="73:12">!</operator><name pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:17">iTask</name><operator pos:start="73:18" pos:end="73:18">.</operator><name pos:start="73:19" pos:end="73:26">complete</name></name></expr>)</condition> <block pos:start="73:29" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:31">

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><call pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:24">iscsi_set_events</name><argument_list pos:start="75:25" pos:end="75:34">(<argument pos:start="75:26" pos:end="75:33"><expr pos:start="75:26" pos:end="75:33"><name pos:start="75:26" pos:end="75:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><call pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:28">qemu_coroutine_yield</name><argument_list pos:start="77:29" pos:end="77:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="83:5" pos:end="97:5"><if pos:start="83:5" pos:end="97:5">if <condition pos:start="83:8" pos:end="83:23">(<expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:13">iTask</name><operator pos:start="83:14" pos:end="83:14">.</operator><name pos:start="83:15" pos:end="83:22">do_retry</name></name></expr>)</condition> <block pos:start="83:25" pos:end="97:5">{<block_content pos:start="85:9" pos:end="95:19">

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:31">(<expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:17">iTask</name><operator pos:start="85:18" pos:end="85:18">.</operator><name pos:start="85:19" pos:end="85:22">task</name></name> <operator pos:start="85:24" pos:end="85:25">!=</operator> <name pos:start="85:27" pos:end="85:30">NULL</name></expr>)</condition> <block pos:start="85:33" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:30">

            <expr_stmt pos:start="87:13" pos:end="87:44"><expr pos:start="87:13" pos:end="87:43"><call pos:start="87:13" pos:end="87:43"><name pos:start="87:13" pos:end="87:31">scsi_free_scsi_task</name><argument_list pos:start="87:32" pos:end="87:43">(<argument pos:start="87:33" pos:end="87:42"><expr pos:start="87:33" pos:end="87:42"><name pos:start="87:33" pos:end="87:42"><name pos:start="87:33" pos:end="87:37">iTask</name><operator pos:start="87:38" pos:end="87:38">.</operator><name pos:start="87:39" pos:end="87:42">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:17">iTask</name><operator pos:start="89:18" pos:end="89:18">.</operator><name pos:start="89:19" pos:end="89:22">task</name></name> <operator pos:start="89:24" pos:end="89:24">=</operator> <name pos:start="89:26" pos:end="89:29">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:13">iTask</name><operator pos:start="93:14" pos:end="93:14">.</operator><name pos:start="93:15" pos:end="93:22">complete</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:19">goto <name pos:start="95:14" pos:end="95:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="113:5"><if pos:start="101:5" pos:end="113:5">if <condition pos:start="101:8" pos:end="101:41">(<expr pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:13">iTask</name><operator pos:start="101:14" pos:end="101:14">.</operator><name pos:start="101:15" pos:end="101:20">status</name></name> <operator pos:start="101:22" pos:end="101:23">!=</operator> <name pos:start="101:25" pos:end="101:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="101:43" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:17">

        <comment type="block" pos:start="103:9" pos:end="109:41">/* in case the get_lba_status_callout fails (i.e.

         * because the device is busy or the cmd is not

         * supported) we pretend all blocks are allocated

         * for backwards compatibility */</comment>

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:46"><expr pos:start="117:5" pos:end="117:45"><name pos:start="117:5" pos:end="117:8">lbas</name> <operator pos:start="117:10" pos:end="117:10">=</operator> <call pos:start="117:12" pos:end="117:45"><name pos:start="117:12" pos:end="117:33">scsi_datain_unmarshall</name><argument_list pos:start="117:34" pos:end="117:45">(<argument pos:start="117:35" pos:end="117:44"><expr pos:start="117:35" pos:end="117:44"><name pos:start="117:35" pos:end="117:44"><name pos:start="117:35" pos:end="117:39">iTask</name><operator pos:start="117:40" pos:end="117:40">.</operator><name pos:start="117:41" pos:end="117:44">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:21">(<expr pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:12">lbas</name> <operator pos:start="119:14" pos:end="119:15">==</operator> <name pos:start="119:17" pos:end="119:20">NULL</name></expr>)</condition> <block pos:start="119:23" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:17">

        <expr_stmt pos:start="121:9" pos:end="121:19"><expr pos:start="121:9" pos:end="121:18"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <operator pos:start="121:15" pos:end="121:15">-</operator><name pos:start="121:16" pos:end="121:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:17">goto <name pos:start="123:14" pos:end="123:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:34"><expr pos:start="129:5" pos:end="129:33"><name pos:start="129:5" pos:end="129:9">lbasd</name> <operator pos:start="129:11" pos:end="129:11">=</operator> <operator pos:start="129:13" pos:end="129:13">&amp;</operator><name pos:start="129:14" pos:end="129:33"><name pos:start="129:14" pos:end="129:17">lbas</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:30">descriptors</name><index pos:start="129:31" pos:end="129:33">[<expr pos:start="129:32" pos:end="129:32"><literal type="number" pos:start="129:32" pos:end="129:32">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:60">(<expr pos:start="133:9" pos:end="133:59"><call pos:start="133:9" pos:end="133:45"><name pos:start="133:9" pos:end="133:23">sector_qemu2lun</name><argument_list pos:start="133:24" pos:end="133:45">(<argument pos:start="133:25" pos:end="133:34"><expr pos:start="133:25" pos:end="133:34"><name pos:start="133:25" pos:end="133:34">sector_num</name></expr></argument>, <argument pos:start="133:37" pos:end="133:44"><expr pos:start="133:37" pos:end="133:44"><name pos:start="133:37" pos:end="133:44">iscsilun</name></expr></argument>)</argument_list></call> <operator pos:start="133:47" pos:end="133:48">!=</operator> <name pos:start="133:50" pos:end="133:59"><name pos:start="133:50" pos:end="133:54">lbasd</name><operator pos:start="133:55" pos:end="133:56">-&gt;</operator><name pos:start="133:57" pos:end="133:59">lba</name></name></expr>)</condition> <block pos:start="133:62" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:17">

        <expr_stmt pos:start="135:9" pos:end="135:19"><expr pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <operator pos:start="135:15" pos:end="135:15">-</operator><name pos:start="135:16" pos:end="135:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:17">goto <name pos:start="137:14" pos:end="137:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:57"><expr pos:start="143:5" pos:end="143:56"><operator pos:start="143:5" pos:end="143:5">*</operator><name pos:start="143:6" pos:end="143:9">pnum</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <call pos:start="143:13" pos:end="143:56"><name pos:start="143:13" pos:end="143:27">sector_lun2qemu</name><argument_list pos:start="143:28" pos:end="143:56">(<argument pos:start="143:29" pos:end="143:45"><expr pos:start="143:29" pos:end="143:45"><name pos:start="143:29" pos:end="143:45"><name pos:start="143:29" pos:end="143:33">lbasd</name><operator pos:start="143:34" pos:end="143:35">-&gt;</operator><name pos:start="143:36" pos:end="143:45">num_blocks</name></name></expr></argument>, <argument pos:start="143:48" pos:end="143:55"><expr pos:start="143:48" pos:end="143:55"><name pos:start="143:48" pos:end="143:55">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="159:5"><if pos:start="147:5" pos:end="159:5">if <condition pos:start="147:8" pos:end="149:63">(<expr pos:start="147:9" pos:end="149:62"><name pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:13">lbasd</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:27">provisioning</name></name> <operator pos:start="147:29" pos:end="147:30">==</operator> <name pos:start="147:32" pos:end="147:65">SCSI_PROVISIONING_TYPE_DEALLOCATED</name> <operator pos:start="147:67" pos:end="147:68">||</operator>

        <name pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:13">lbasd</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:27">provisioning</name></name> <operator pos:start="149:29" pos:end="149:30">==</operator> <name pos:start="149:32" pos:end="149:62">SCSI_PROVISIONING_TYPE_ANCHORED</name></expr>)</condition> <block pos:start="149:65" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:9">

        <expr_stmt pos:start="151:9" pos:end="151:32"><expr pos:start="151:9" pos:end="151:31"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:14">&amp;=</operator> <operator pos:start="151:16" pos:end="151:16">~</operator><name pos:start="151:17" pos:end="151:31">BDRV_BLOCK_DATA</name></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="157:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:28">(<expr pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:20">iscsilun</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:27">lbprz</name></name></expr>)</condition> <block pos:start="153:30" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:35">

            <expr_stmt pos:start="155:13" pos:end="155:35"><expr pos:start="155:13" pos:end="155:34"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:18">|=</operator> <name pos:start="155:20" pos:end="155:34">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="171:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:30">(<expr pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">&amp;</operator> <name pos:start="163:15" pos:end="163:29">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="163:32" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:63">

        <expr_stmt pos:start="165:9" pos:end="165:63"><expr pos:start="165:9" pos:end="165:62"><call pos:start="165:9" pos:end="165:62"><name pos:start="165:9" pos:end="165:33">iscsi_allocationmap_clear</name><argument_list pos:start="165:34" pos:end="165:62">(<argument pos:start="165:35" pos:end="165:42"><expr pos:start="165:35" pos:end="165:42"><name pos:start="165:35" pos:end="165:42">iscsilun</name></expr></argument>, <argument pos:start="165:45" pos:end="165:54"><expr pos:start="165:45" pos:end="165:54"><name pos:start="165:45" pos:end="165:54">sector_num</name></expr></argument>, <argument pos:start="165:57" pos:end="165:61"><expr pos:start="165:57" pos:end="165:61"><operator pos:start="165:57" pos:end="165:57">*</operator><name pos:start="165:58" pos:end="165:61">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="171:5">else <block pos:start="167:12" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:61">

        <expr_stmt pos:start="169:9" pos:end="169:61"><expr pos:start="169:9" pos:end="169:60"><call pos:start="169:9" pos:end="169:60"><name pos:start="169:9" pos:end="169:31">iscsi_allocationmap_set</name><argument_list pos:start="169:32" pos:end="169:60">(<argument pos:start="169:33" pos:end="169:40"><expr pos:start="169:33" pos:end="169:40"><name pos:start="169:33" pos:end="169:40">iscsilun</name></expr></argument>, <argument pos:start="169:43" pos:end="169:52"><expr pos:start="169:43" pos:end="169:52"><name pos:start="169:43" pos:end="169:52">sector_num</name></expr></argument>, <argument pos:start="169:55" pos:end="169:59"><expr pos:start="169:55" pos:end="169:59"><operator pos:start="169:55" pos:end="169:55">*</operator><name pos:start="169:56" pos:end="169:59">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="175:5" pos:end="179:5"><if pos:start="175:5" pos:end="179:5">if <condition pos:start="175:8" pos:end="175:27">(<expr pos:start="175:9" pos:end="175:26"><operator pos:start="175:9" pos:end="175:9">*</operator><name pos:start="175:10" pos:end="175:13">pnum</name> <operator pos:start="175:15" pos:end="175:15">&gt;</operator> <name pos:start="175:17" pos:end="175:26">nb_sectors</name></expr>)</condition> <block pos:start="175:29" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:27">

        <expr_stmt pos:start="177:9" pos:end="177:27"><expr pos:start="177:9" pos:end="177:26"><operator pos:start="177:9" pos:end="177:9">*</operator><name pos:start="177:10" pos:end="177:13">pnum</name> <operator pos:start="177:15" pos:end="177:15">=</operator> <name pos:start="177:17" pos:end="177:26">nb_sectors</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="181:1" pos:end="181:4"><name pos:start="181:1" pos:end="181:3">out</name>:</label>

    <if_stmt pos:start="183:5" pos:end="187:5"><if pos:start="183:5" pos:end="187:5">if <condition pos:start="183:8" pos:end="183:27">(<expr pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:18"><name pos:start="183:9" pos:end="183:13">iTask</name><operator pos:start="183:14" pos:end="183:14">.</operator><name pos:start="183:15" pos:end="183:18">task</name></name> <operator pos:start="183:20" pos:end="183:21">!=</operator> <name pos:start="183:23" pos:end="183:26">NULL</name></expr>)</condition> <block pos:start="183:29" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:40">

        <expr_stmt pos:start="185:9" pos:end="185:40"><expr pos:start="185:9" pos:end="185:39"><call pos:start="185:9" pos:end="185:39"><name pos:start="185:9" pos:end="185:27">scsi_free_scsi_task</name><argument_list pos:start="185:28" pos:end="185:39">(<argument pos:start="185:29" pos:end="185:38"><expr pos:start="185:29" pos:end="185:38"><name pos:start="185:29" pos:end="185:38"><name pos:start="185:29" pos:end="185:33">iTask</name><operator pos:start="185:34" pos:end="185:34">.</operator><name pos:start="185:35" pos:end="185:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="189:5" pos:end="189:15">return <expr pos:start="189:12" pos:end="189:14"><name pos:start="189:12" pos:end="189:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
