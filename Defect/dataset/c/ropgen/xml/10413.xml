<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10413.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">print_device_sinks</name><parameter_list pos:start="1:30" pos:end="1:70">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:44">AVOutputFormat</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">fmt</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:69"><decl pos:start="1:52" pos:end="1:69"><type pos:start="1:52" pos:end="1:69"><name pos:start="1:52" pos:end="1:63">AVDictionary</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:69">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVFormatContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">dev</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">AVDeviceInfoList</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:33">device_list</name> <init pos:start="9:35" pos:end="9:40">= <expr pos:start="9:37" pos:end="9:40"><name pos:start="9:37" pos:end="9:40">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">AVDictionary</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:26">tmp_opts</name> <init pos:start="11:28" pos:end="11:33">= <expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:31"><if pos:start="15:5" pos:end="17:31">if <condition pos:start="15:8" pos:end="15:85">(<expr pos:start="15:9" pos:end="15:84"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">fmt</name> <operator pos:start="15:14" pos:end="15:15">||</operator> <operator pos:start="15:17" pos:end="15:17">!</operator><name pos:start="15:18" pos:end="15:32"><name pos:start="15:18" pos:end="15:20">fmt</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:32">priv_class</name></name>  <operator pos:start="15:35" pos:end="15:36">||</operator> <operator pos:start="15:38" pos:end="15:38">!</operator><call pos:start="15:39" pos:end="15:84"><name pos:start="15:39" pos:end="15:57">AV_IS_OUTPUT_DEVICE</name><argument_list pos:start="15:58" pos:end="15:84">(<argument pos:start="15:59" pos:end="15:83"><expr pos:start="15:59" pos:end="15:83"><name pos:start="15:59" pos:end="15:83"><name pos:start="15:59" pos:end="15:61">fmt</name><operator pos:start="15:62" pos:end="15:63">-&gt;</operator><name pos:start="15:64" pos:end="15:73">priv_class</name><operator pos:start="15:74" pos:end="15:75">-&gt;</operator><name pos:start="15:76" pos:end="15:83">category</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:55"><expr pos:start="21:5" pos:end="21:54"><call pos:start="21:5" pos:end="21:54"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:54">(<argument pos:start="21:12" pos:end="21:42"><expr pos:start="21:12" pos:end="21:42"><literal type="string" pos:start="21:12" pos:end="21:42">"Audo-detected sinks for %s:\n"</literal></expr></argument>, <argument pos:start="21:45" pos:end="21:53"><expr pos:start="21:45" pos:end="21:53"><name pos:start="21:45" pos:end="21:53"><name pos:start="21:45" pos:end="21:47">fmt</name><operator pos:start="21:48" pos:end="21:49">-&gt;</operator><name pos:start="21:50" pos:end="21:53">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:12">fmt</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:29">get_device_list</name></name></expr>)</condition> <block pos:start="23:32" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:18">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:29"><name pos:start="25:15" pos:end="25:21">AVERROR</name><argument_list pos:start="25:22" pos:end="25:29">(<argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><name pos:start="25:23" pos:end="25:28">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:56"><expr pos:start="27:9" pos:end="27:55"><call pos:start="27:9" pos:end="27:55"><name pos:start="27:9" pos:end="27:14">printf</name><argument_list pos:start="27:15" pos:end="27:55">(<argument pos:start="27:16" pos:end="27:54"><expr pos:start="27:16" pos:end="27:54"><literal type="string" pos:start="27:16" pos:end="27:54">"Cannot list sinks. Not implemented.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:74">(<expr pos:start="35:9" pos:end="35:73"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:12">ret</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:68"><name pos:start="35:16" pos:end="35:45">avformat_alloc_output_context2</name><argument_list pos:start="35:46" pos:end="35:68">(<argument pos:start="35:47" pos:end="35:50"><expr pos:start="35:47" pos:end="35:50"><operator pos:start="35:47" pos:end="35:47">&amp;</operator><name pos:start="35:48" pos:end="35:50">dev</name></expr></argument>, <argument pos:start="35:53" pos:end="35:55"><expr pos:start="35:53" pos:end="35:55"><name pos:start="35:53" pos:end="35:55">fmt</name></expr></argument>, <argument pos:start="35:58" pos:end="35:61"><expr pos:start="35:58" pos:end="35:61"><name pos:start="35:58" pos:end="35:61">NULL</name></expr></argument>, <argument pos:start="35:64" pos:end="35:67"><expr pos:start="35:64" pos:end="35:67"><name pos:start="35:64" pos:end="35:67">NULL</name></expr></argument>)</argument_list></call><operator pos:start="35:69" pos:end="35:69">)</operator> <operator pos:start="35:71" pos:end="35:71">&lt;</operator> <literal type="number" pos:start="35:73" pos:end="35:73">0</literal></expr>)</condition> <block pos:start="35:76" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><call pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:14">printf</name><argument_list pos:start="37:15" pos:end="37:54">(<argument pos:start="37:16" pos:end="37:42"><expr pos:start="37:16" pos:end="37:42"><literal type="string" pos:start="37:16" pos:end="37:42">"Cannot open device: %s.\n"</literal></expr></argument>, <argument pos:start="37:45" pos:end="37:53"><expr pos:start="37:45" pos:end="37:53"><name pos:start="37:45" pos:end="37:53"><name pos:start="37:45" pos:end="37:47">fmt</name><operator pos:start="37:48" pos:end="37:49">-&gt;</operator><name pos:start="37:50" pos:end="37:53">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><call pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:16">av_dict_copy</name><argument_list pos:start="43:17" pos:end="43:36">(<argument pos:start="43:18" pos:end="43:26"><expr pos:start="43:18" pos:end="43:26"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:26">tmp_opts</name></expr></argument>, <argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">opts</name></expr></argument>, <argument pos:start="43:35" pos:end="43:35"><expr pos:start="43:35" pos:end="43:35"><literal type="number" pos:start="43:35" pos:end="43:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:61"><expr pos:start="45:5" pos:end="45:60"><call pos:start="45:5" pos:end="45:60"><name pos:start="45:5" pos:end="45:20">av_opt_set_dict2</name><argument_list pos:start="45:21" pos:end="45:60">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">dev</name></expr></argument>, <argument pos:start="45:27" pos:end="45:35"><expr pos:start="45:27" pos:end="45:35"><operator pos:start="45:27" pos:end="45:27">&amp;</operator><name pos:start="45:28" pos:end="45:35">tmp_opts</name></expr></argument>, <argument pos:start="45:38" pos:end="45:59"><expr pos:start="45:38" pos:end="45:59"><name pos:start="45:38" pos:end="45:59">AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:61">(<expr pos:start="49:9" pos:end="49:60"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:12">ret</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:55"><name pos:start="49:16" pos:end="49:36">avdevice_list_devices</name><argument_list pos:start="49:37" pos:end="49:55">(<argument pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:40">dev</name></expr></argument>, <argument pos:start="49:43" pos:end="49:54"><expr pos:start="49:43" pos:end="49:54"><operator pos:start="49:43" pos:end="49:43">&amp;</operator><name pos:start="49:44" pos:end="49:54">device_list</name></expr></argument>)</argument_list></call><operator pos:start="49:56" pos:end="49:56">)</operator> <operator pos:start="49:58" pos:end="49:58">&lt;</operator> <literal type="number" pos:start="49:60" pos:end="49:60">0</literal></expr>)</condition> <block pos:start="49:63" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:39"><expr pos:start="51:9" pos:end="51:38"><call pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:14">printf</name><argument_list pos:start="51:15" pos:end="51:38">(<argument pos:start="51:16" pos:end="51:37"><expr pos:start="51:16" pos:end="51:37"><literal type="string" pos:start="51:16" pos:end="51:37">"Cannot list sinks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="59:5" pos:end="65:5">for <control pos:start="59:9" pos:end="59:49">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:44"><expr pos:start="59:17" pos:end="59:43"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:43"><name pos:start="59:21" pos:end="59:31">device_list</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:43">nb_devices</name></name></expr>;</condition> <incr pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><name pos:start="59:46" pos:end="59:46">i</name><operator pos:start="59:47" pos:end="59:48">++</operator></expr></incr>)</control> <block pos:start="59:51" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:98">

        <expr_stmt pos:start="61:9" pos:end="63:98"><expr pos:start="61:9" pos:end="63:97"><call pos:start="61:9" pos:end="63:97"><name pos:start="61:9" pos:end="61:14">printf</name><argument_list pos:start="61:15" pos:end="63:97">(<argument pos:start="61:16" pos:end="61:29"><expr pos:start="61:16" pos:end="61:29"><literal type="string" pos:start="61:16" pos:end="61:29">"%s %s [%s]\n"</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:75"><expr pos:start="61:32" pos:end="61:75"><ternary pos:start="61:32" pos:end="61:75"><condition pos:start="61:32" pos:end="61:65"><expr pos:start="61:32" pos:end="61:63"><name pos:start="61:32" pos:end="61:58"><name pos:start="61:32" pos:end="61:42">device_list</name><operator pos:start="61:43" pos:end="61:44">-&gt;</operator><name pos:start="61:45" pos:end="61:58">default_device</name></name> <operator pos:start="61:60" pos:end="61:61">==</operator> <name pos:start="61:63" pos:end="61:63">i</name></expr> ?</condition><then pos:start="61:67" pos:end="61:69"> <expr pos:start="61:67" pos:end="61:69"><literal type="string" pos:start="61:67" pos:end="61:69">"*"</literal></expr> </then><else pos:start="61:71" pos:end="61:75">: <expr pos:start="61:73" pos:end="61:75"><literal type="string" pos:start="61:73" pos:end="61:75">" "</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="63:16" pos:end="63:51"><expr pos:start="63:16" pos:end="63:51"><name pos:start="63:16" pos:end="63:38"><name pos:start="63:16" pos:end="63:26">device_list</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:35">devices</name><index pos:start="63:36" pos:end="63:38">[<expr pos:start="63:37" pos:end="63:37"><name pos:start="63:37" pos:end="63:37">i</name></expr>]</index></name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:51">device_name</name></expr></argument>, <argument pos:start="63:54" pos:end="63:96"><expr pos:start="63:54" pos:end="63:96"><name pos:start="63:54" pos:end="63:76"><name pos:start="63:54" pos:end="63:64">device_list</name><operator pos:start="63:65" pos:end="63:66">-&gt;</operator><name pos:start="63:67" pos:end="63:73">devices</name><index pos:start="63:74" pos:end="63:76">[<expr pos:start="63:75" pos:end="63:75"><name pos:start="63:75" pos:end="63:75">i</name></expr>]</index></name><operator pos:start="63:77" pos:end="63:78">-&gt;</operator><name pos:start="63:79" pos:end="63:96">device_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



  <label pos:start="69:3" pos:end="69:7"><name pos:start="69:3" pos:end="69:6">fail</name>:</label>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><call pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:16">av_dict_free</name><argument_list pos:start="71:17" pos:end="71:27">(<argument pos:start="71:18" pos:end="71:26"><expr pos:start="71:18" pos:end="71:26"><operator pos:start="71:18" pos:end="71:18">&amp;</operator><name pos:start="71:19" pos:end="71:26">tmp_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:45"><expr pos:start="73:5" pos:end="73:44"><call pos:start="73:5" pos:end="73:44"><name pos:start="73:5" pos:end="73:30">avdevice_free_list_devices</name><argument_list pos:start="73:31" pos:end="73:44">(<argument pos:start="73:32" pos:end="73:43"><expr pos:start="73:32" pos:end="73:43"><operator pos:start="73:32" pos:end="73:32">&amp;</operator><name pos:start="73:33" pos:end="73:43">device_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><call pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:25">avformat_free_context</name><argument_list pos:start="75:26" pos:end="75:30">(<argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
