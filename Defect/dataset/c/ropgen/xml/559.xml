<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/559.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:47"><name pos:start="1:1" pos:end="1:20">petalogix_ml605_init</name><argument_list pos:start="1:21" pos:end="1:47">(<argument pos:start="1:22" pos:end="1:46">QEMUMachineInitArgs *args</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="203:1">{<block_content pos:start="5:5" pos:end="199:79">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:35">address_space_mem</name> <init pos:start="9:37" pos:end="9:57">= <expr pos:start="9:39" pos:end="9:57"><call pos:start="9:39" pos:end="9:57"><name pos:start="9:39" pos:end="9:55">get_system_memory</name><argument_list pos:start="9:56" pos:end="9:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">DeviceState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">dev</name></decl>, <decl pos:start="11:23" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:17"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">dma</name></decl>, <decl pos:start="11:29" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:17"><modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:33">eth0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">Object</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:16">peer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">MicroBlazeCPU</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">SysBusDevice</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">CPUMBState</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">DriveInfo</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:38"><decl pos:start="25:5" pos:end="25:37"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">hwaddr</name></type> <name pos:start="25:12" pos:end="25:19">ddr_base</name> <init pos:start="25:21" pos:end="25:37">= <expr pos:start="25:23" pos:end="25:37"><name pos:start="25:23" pos:end="25:37">MEMORY_BASEADDR</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:57"><decl pos:start="27:5" pos:end="27:56"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:31">phys_lmb_bram</name> <init pos:start="27:33" pos:end="27:56">= <expr pos:start="27:35" pos:end="27:56"><call pos:start="27:35" pos:end="27:56"><name pos:start="27:35" pos:end="27:39">g_new</name><argument_list pos:start="27:40" pos:end="27:56">(<argument pos:start="27:41" pos:end="27:52"><expr pos:start="27:41" pos:end="27:52"><name pos:start="27:41" pos:end="27:52">MemoryRegion</name></expr></argument>, <argument pos:start="27:55" pos:end="27:55"><expr pos:start="27:55" pos:end="27:55"><literal type="number" pos:start="27:55" pos:end="27:55">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:52"><decl pos:start="29:5" pos:end="29:51"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:26">phys_ram</name> <init pos:start="29:28" pos:end="29:51">= <expr pos:start="29:30" pos:end="29:51"><call pos:start="29:30" pos:end="29:51"><name pos:start="29:30" pos:end="29:34">g_new</name><argument_list pos:start="29:35" pos:end="29:51">(<argument pos:start="29:36" pos:end="29:47"><expr pos:start="29:36" pos:end="29:47"><name pos:start="29:36" pos:end="29:47">MemoryRegion</name></expr></argument>, <argument pos:start="29:50" pos:end="29:50"><expr pos:start="29:50" pos:end="29:50"><literal type="number" pos:start="29:50" pos:end="29:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:20"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">qemu_irq</name></type> <name pos:start="31:14" pos:end="31:20"><name pos:start="31:14" pos:end="31:16">irq</name><index pos:start="31:17" pos:end="31:20">[<expr pos:start="31:18" pos:end="31:19"><literal type="number" pos:start="31:18" pos:end="31:19">32</literal></expr>]</index></name></decl>, <decl pos:start="31:23" pos:end="31:30"><type ref="prev" pos:start="31:5" pos:end="31:12"><modifier pos:start="31:23" pos:end="31:23">*</modifier></type><name pos:start="31:24" pos:end="31:30">cpu_irq</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:19">/* init CPUs */</comment>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:26">(<expr pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:20">==</operator> <name pos:start="37:22" pos:end="37:25">NULL</name></expr>)</condition> <block pos:start="37:28" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:33">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="string" pos:start="39:21" pos:end="39:32">"microblaze"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:7">cpu</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:32"><name pos:start="43:11" pos:end="43:21">cpu_mb_init</name><argument_list pos:start="43:22" pos:end="43:32">(<argument pos:start="43:23" pos:end="43:31"><expr pos:start="43:23" pos:end="43:31"><name pos:start="43:23" pos:end="43:31">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <operator pos:start="45:11" pos:end="45:11">&amp;</operator><name pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:14">cpu</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:19">env</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:48">/* Attach emulated BRAM through the LMB.  */</comment>

    <expr_stmt pos:start="51:5" pos:end="53:42"><expr pos:start="51:5" pos:end="53:41"><call pos:start="51:5" pos:end="53:41"><name pos:start="51:5" pos:end="51:26">memory_region_init_ram</name><argument_list pos:start="51:27" pos:end="53:41">(<argument pos:start="51:28" pos:end="51:40"><expr pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:40">phys_lmb_bram</name></expr></argument>, <argument pos:start="51:43" pos:end="51:68"><expr pos:start="51:43" pos:end="51:68"><literal type="string" pos:start="51:43" pos:end="51:68">"petalogix_ml605.lmb_bram"</literal></expr></argument>,

                           <argument pos:start="53:28" pos:end="53:40"><expr pos:start="53:28" pos:end="53:40"><name pos:start="53:28" pos:end="53:40">LMB_BRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:47"><expr pos:start="55:5" pos:end="55:46"><call pos:start="55:5" pos:end="55:46"><name pos:start="55:5" pos:end="55:31">vmstate_register_ram_global</name><argument_list pos:start="55:32" pos:end="55:46">(<argument pos:start="55:33" pos:end="55:45"><expr pos:start="55:33" pos:end="55:45"><name pos:start="55:33" pos:end="55:45">phys_lmb_bram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:78"><expr pos:start="57:5" pos:end="57:77"><call pos:start="57:5" pos:end="57:77"><name pos:start="57:5" pos:end="57:31">memory_region_add_subregion</name><argument_list pos:start="57:32" pos:end="57:77">(<argument pos:start="57:33" pos:end="57:49"><expr pos:start="57:33" pos:end="57:49"><name pos:start="57:33" pos:end="57:49">address_space_mem</name></expr></argument>, <argument pos:start="57:52" pos:end="57:61"><expr pos:start="57:52" pos:end="57:61"><literal type="number" pos:start="57:52" pos:end="57:61">0x00000000</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:76"><expr pos:start="57:64" pos:end="57:76"><name pos:start="57:64" pos:end="57:76">phys_lmb_bram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:70"><expr pos:start="61:5" pos:end="61:69"><call pos:start="61:5" pos:end="61:69"><name pos:start="61:5" pos:end="61:26">memory_region_init_ram</name><argument_list pos:start="61:27" pos:end="61:69">(<argument pos:start="61:28" pos:end="61:35"><expr pos:start="61:28" pos:end="61:35"><name pos:start="61:28" pos:end="61:35">phys_ram</name></expr></argument>, <argument pos:start="61:38" pos:end="61:58"><expr pos:start="61:38" pos:end="61:58"><literal type="string" pos:start="61:38" pos:end="61:58">"petalogix_ml605.ram"</literal></expr></argument>, <argument pos:start="61:61" pos:end="61:68"><expr pos:start="61:61" pos:end="61:68"><name pos:start="61:61" pos:end="61:68">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:42"><expr pos:start="63:5" pos:end="63:41"><call pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:31">vmstate_register_ram_global</name><argument_list pos:start="63:32" pos:end="63:41">(<argument pos:start="63:33" pos:end="63:40"><expr pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:40">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:71"><expr pos:start="65:5" pos:end="65:70"><call pos:start="65:5" pos:end="65:70"><name pos:start="65:5" pos:end="65:31">memory_region_add_subregion</name><argument_list pos:start="65:32" pos:end="65:70">(<argument pos:start="65:33" pos:end="65:49"><expr pos:start="65:33" pos:end="65:49"><name pos:start="65:33" pos:end="65:49">address_space_mem</name></expr></argument>, <argument pos:start="65:52" pos:end="65:59"><expr pos:start="65:52" pos:end="65:59"><name pos:start="65:52" pos:end="65:59">ddr_base</name></expr></argument>, <argument pos:start="65:62" pos:end="65:69"><expr pos:start="65:62" pos:end="65:69"><name pos:start="65:62" pos:end="65:69">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:39"><expr pos:start="69:5" pos:end="69:38"><name pos:start="69:5" pos:end="69:9">dinfo</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:38"><name pos:start="69:13" pos:end="69:21">drive_get</name><argument_list pos:start="69:22" pos:end="69:38">(<argument pos:start="69:23" pos:end="69:31"><expr pos:start="69:23" pos:end="69:31"><name pos:start="69:23" pos:end="69:31">IF_PFLASH</name></expr></argument>, <argument pos:start="69:34" pos:end="69:34"><expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">0</literal></expr></argument>, <argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="71:5" pos:end="73:46">/* 5th parameter 2 means bank-width

     * 10th paremeter 0 means little-endian */</comment>

    <expr_stmt pos:start="75:5" pos:end="83:57"><expr pos:start="75:5" pos:end="83:56"><call pos:start="75:5" pos:end="83:56"><name pos:start="75:5" pos:end="75:25">pflash_cfi01_register</name><argument_list pos:start="75:26" pos:end="83:56">(<argument pos:start="75:27" pos:end="75:40"><expr pos:start="75:27" pos:end="75:40"><name pos:start="75:27" pos:end="75:40">FLASH_BASEADDR</name></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:30"><expr pos:start="77:27" pos:end="77:30"><name pos:start="77:27" pos:end="77:30">NULL</name></expr></argument>, <argument pos:start="77:33" pos:end="77:55"><expr pos:start="77:33" pos:end="77:55"><literal type="string" pos:start="77:33" pos:end="77:55">"petalogix_ml605.flash"</literal></expr></argument>, <argument pos:start="77:58" pos:end="77:67"><expr pos:start="77:58" pos:end="77:67"><name pos:start="77:58" pos:end="77:67">FLASH_SIZE</name></expr></argument>,

                          <argument pos:start="79:27" pos:end="79:52"><expr pos:start="79:27" pos:end="79:52"><ternary pos:start="79:27" pos:end="79:52"><condition pos:start="79:27" pos:end="79:33"><expr pos:start="79:27" pos:end="79:31"><name pos:start="79:27" pos:end="79:31">dinfo</name></expr> ?</condition><then pos:start="79:35" pos:end="79:45"> <expr pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:39">dinfo</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:45">bdrv</name></name></expr> </then><else pos:start="79:47" pos:end="79:52">: <expr pos:start="79:49" pos:end="79:52"><name pos:start="79:49" pos:end="79:52">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="79:55" pos:end="79:65"><expr pos:start="79:55" pos:end="79:65"><operator pos:start="79:55" pos:end="79:55">(</operator><literal type="number" pos:start="79:56" pos:end="79:57">64</literal> <operator pos:start="79:59" pos:end="79:59">*</operator> <literal type="number" pos:start="79:61" pos:end="79:64">1024</literal><operator pos:start="79:65" pos:end="79:65">)</operator></expr></argument>,

                          <argument pos:start="81:27" pos:end="81:42"><expr pos:start="81:27" pos:end="81:42"><name pos:start="81:27" pos:end="81:36">FLASH_SIZE</name> <operator pos:start="81:38" pos:end="81:39">&gt;&gt;</operator> <literal type="number" pos:start="81:41" pos:end="81:42">16</literal></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><literal type="number" pos:start="83:27" pos:end="83:27">2</literal></expr></argument>, <argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><literal type="number" pos:start="83:30" pos:end="83:33">0x89</literal></expr></argument>, <argument pos:start="83:36" pos:end="83:39"><expr pos:start="83:36" pos:end="83:39"><literal type="number" pos:start="83:36" pos:end="83:39">0x18</literal></expr></argument>, <argument pos:start="83:42" pos:end="83:47"><expr pos:start="83:42" pos:end="83:47"><literal type="number" pos:start="83:42" pos:end="83:47">0x0000</literal></expr></argument>, <argument pos:start="83:50" pos:end="83:52"><expr pos:start="83:50" pos:end="83:52"><literal type="number" pos:start="83:50" pos:end="83:52">0x0</literal></expr></argument>, <argument pos:start="83:55" pos:end="83:55"><expr pos:start="83:55" pos:end="83:55"><literal type="number" pos:start="83:55" pos:end="83:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="89:5" pos:end="89:43"><expr pos:start="89:5" pos:end="89:42"><name pos:start="89:5" pos:end="89:11">cpu_irq</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:42"><name pos:start="89:15" pos:end="89:37">microblaze_pic_init_cpu</name><argument_list pos:start="89:38" pos:end="89:42">(<argument pos:start="89:39" pos:end="89:41"><expr pos:start="89:39" pos:end="89:41"><name pos:start="89:39" pos:end="89:41">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:59"><expr pos:start="91:5" pos:end="91:58"><name pos:start="91:5" pos:end="91:7">dev</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:58"><name pos:start="91:11" pos:end="91:28">xilinx_intc_create</name><argument_list pos:start="91:29" pos:end="91:58">(<argument pos:start="91:30" pos:end="91:42"><expr pos:start="91:30" pos:end="91:42"><name pos:start="91:30" pos:end="91:42">INTC_BASEADDR</name></expr></argument>, <argument pos:start="91:45" pos:end="91:54"><expr pos:start="91:45" pos:end="91:54"><name pos:start="91:45" pos:end="91:54"><name pos:start="91:45" pos:end="91:51">cpu_irq</name><index pos:start="91:52" pos:end="91:54">[<expr pos:start="91:53" pos:end="91:53"><literal type="number" pos:start="91:53" pos:end="91:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:57" pos:end="91:57"><expr pos:start="91:57" pos:end="91:57"><literal type="number" pos:start="91:57" pos:end="91:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="97:5">for <control pos:start="93:9" pos:end="93:28">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:23"><expr pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <literal type="number" pos:start="93:21" pos:end="93:22">32</literal></expr>;</condition> <incr pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:25">i</name><operator pos:start="93:26" pos:end="93:27">++</operator></expr></incr>)</control> <block pos:start="93:30" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:42">

        <expr_stmt pos:start="95:9" pos:end="95:42"><expr pos:start="95:9" pos:end="95:41"><name pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:11">irq</name><index pos:start="95:12" pos:end="95:14">[<expr pos:start="95:13" pos:end="95:13"><name pos:start="95:13" pos:end="95:13">i</name></expr>]</index></name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:41"><name pos:start="95:18" pos:end="95:33">qdev_get_gpio_in</name><argument_list pos:start="95:34" pos:end="95:41">(<argument pos:start="95:35" pos:end="95:37"><expr pos:start="95:35" pos:end="95:37"><name pos:start="95:35" pos:end="95:37">dev</name></expr></argument>, <argument pos:start="95:40" pos:end="95:40"><expr pos:start="95:40" pos:end="95:40"><name pos:start="95:40" pos:end="95:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="101:5" pos:end="103:72"><expr pos:start="101:5" pos:end="103:71"><call pos:start="101:5" pos:end="103:71"><name pos:start="101:5" pos:end="101:18">serial_mm_init</name><argument_list pos:start="101:19" pos:end="103:71">(<argument pos:start="101:20" pos:end="101:36"><expr pos:start="101:20" pos:end="101:36"><name pos:start="101:20" pos:end="101:36">address_space_mem</name></expr></argument>, <argument pos:start="101:39" pos:end="101:65"><expr pos:start="101:39" pos:end="101:65"><name pos:start="101:39" pos:end="101:56">UART16550_BASEADDR</name> <operator pos:start="101:58" pos:end="101:58">+</operator> <literal type="number" pos:start="101:60" pos:end="101:65">0x1000</literal></expr></argument>, <argument pos:start="101:68" pos:end="101:68"><expr pos:start="101:68" pos:end="101:68"><literal type="number" pos:start="101:68" pos:end="101:68">2</literal></expr></argument>,

                   <argument pos:start="103:20" pos:end="103:25"><expr pos:start="103:20" pos:end="103:25"><name pos:start="103:20" pos:end="103:25"><name pos:start="103:20" pos:end="103:22">irq</name><index pos:start="103:23" pos:end="103:25">[<expr pos:start="103:24" pos:end="103:24"><literal type="number" pos:start="103:24" pos:end="103:24">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:28" pos:end="103:33"><expr pos:start="103:28" pos:end="103:33"><literal type="number" pos:start="103:28" pos:end="103:33">115200</literal></expr></argument>, <argument pos:start="103:36" pos:end="103:48"><expr pos:start="103:36" pos:end="103:48"><name pos:start="103:36" pos:end="103:48"><name pos:start="103:36" pos:end="103:45">serial_hds</name><index pos:start="103:46" pos:end="103:48">[<expr pos:start="103:47" pos:end="103:47"><literal type="number" pos:start="103:47" pos:end="103:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:51" pos:end="103:70"><expr pos:start="103:51" pos:end="103:70"><name pos:start="103:51" pos:end="103:70">DEVICE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:39">/* 2 timers at irq 2 @ 100 Mhz.  */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:66"><expr pos:start="109:5" pos:end="109:65"><call pos:start="109:5" pos:end="109:65"><name pos:start="109:5" pos:end="109:23">xilinx_timer_create</name><argument_list pos:start="109:24" pos:end="109:65">(<argument pos:start="109:25" pos:end="109:38"><expr pos:start="109:25" pos:end="109:38"><name pos:start="109:25" pos:end="109:38">TIMER_BASEADDR</name></expr></argument>, <argument pos:start="109:41" pos:end="109:46"><expr pos:start="109:41" pos:end="109:46"><name pos:start="109:41" pos:end="109:46"><name pos:start="109:41" pos:end="109:43">irq</name><index pos:start="109:44" pos:end="109:46">[<expr pos:start="109:45" pos:end="109:45"><literal type="number" pos:start="109:45" pos:end="109:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:49" pos:end="109:49"><expr pos:start="109:49" pos:end="109:49"><literal type="number" pos:start="109:49" pos:end="109:49">0</literal></expr></argument>, <argument pos:start="109:52" pos:end="109:64"><expr pos:start="109:52" pos:end="109:64"><literal type="number" pos:start="109:52" pos:end="109:54">100</literal> <operator pos:start="109:56" pos:end="109:56">*</operator> <literal type="number" pos:start="109:58" pos:end="109:64">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:46">/* axi ethernet and dma initialization. */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:60"><expr pos:start="115:5" pos:end="115:59"><call pos:start="115:5" pos:end="115:59"><name pos:start="115:5" pos:end="115:24">qemu_check_nic_model</name><argument_list pos:start="115:25" pos:end="115:59">(<argument pos:start="115:26" pos:end="115:37"><expr pos:start="115:26" pos:end="115:37"><operator pos:start="115:26" pos:end="115:26">&amp;</operator><name pos:start="115:27" pos:end="115:37"><name pos:start="115:27" pos:end="115:34">nd_table</name><index pos:start="115:35" pos:end="115:37">[<expr pos:start="115:36" pos:end="115:36"><literal type="number" pos:start="115:36" pos:end="115:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:40" pos:end="115:58"><expr pos:start="115:40" pos:end="115:58"><literal type="string" pos:start="115:40" pos:end="115:58">"xlnx.axi-ethernet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:50"><expr pos:start="117:5" pos:end="117:49"><name pos:start="117:5" pos:end="117:8">eth0</name> <operator pos:start="117:10" pos:end="117:10">=</operator> <call pos:start="117:12" pos:end="117:49"><name pos:start="117:12" pos:end="117:22">qdev_create</name><argument_list pos:start="117:23" pos:end="117:49">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">NULL</name></expr></argument>, <argument pos:start="117:30" pos:end="117:48"><expr pos:start="117:30" pos:end="117:48"><literal type="string" pos:start="117:30" pos:end="117:48">"xlnx.axi-ethernet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:44"><expr pos:start="119:5" pos:end="119:43"><name pos:start="119:5" pos:end="119:7">dma</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:43"><name pos:start="119:11" pos:end="119:21">qdev_create</name><argument_list pos:start="119:22" pos:end="119:43">(<argument pos:start="119:23" pos:end="119:26"><expr pos:start="119:23" pos:end="119:26"><name pos:start="119:23" pos:end="119:26">NULL</name></expr></argument>, <argument pos:start="119:29" pos:end="119:42"><expr pos:start="119:29" pos:end="119:42"><literal type="string" pos:start="119:29" pos:end="119:42">"xlnx.axi-dma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:45">/* FIXME: attach to the sysbus instead */</comment>

    <expr_stmt pos:start="125:5" pos:end="127:36"><expr pos:start="125:5" pos:end="127:35"><call pos:start="125:5" pos:end="127:35"><name pos:start="125:5" pos:end="125:29">object_property_add_child</name><argument_list pos:start="125:30" pos:end="127:35">(<argument pos:start="125:31" pos:end="125:48"><expr pos:start="125:31" pos:end="125:48"><call pos:start="125:31" pos:end="125:48"><name pos:start="125:31" pos:end="125:46">qdev_get_machine</name><argument_list pos:start="125:47" pos:end="125:48">()</argument_list></call></expr></argument>, <argument pos:start="125:51" pos:end="125:62"><expr pos:start="125:51" pos:end="125:62"><literal type="string" pos:start="125:51" pos:end="125:62">"xilinx-eth"</literal></expr></argument>, <argument pos:start="125:65" pos:end="125:76"><expr pos:start="125:65" pos:end="125:76"><call pos:start="125:65" pos:end="125:76"><name pos:start="125:65" pos:end="125:70">OBJECT</name><argument_list pos:start="125:71" pos:end="125:76">(<argument pos:start="125:72" pos:end="125:75"><expr pos:start="125:72" pos:end="125:75"><name pos:start="125:72" pos:end="125:75">eth0</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="127:31" pos:end="127:34"><expr pos:start="127:31" pos:end="127:34"><name pos:start="127:31" pos:end="127:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="131:36"><expr pos:start="129:5" pos:end="131:35"><call pos:start="129:5" pos:end="131:35"><name pos:start="129:5" pos:end="129:29">object_property_add_child</name><argument_list pos:start="129:30" pos:end="131:35">(<argument pos:start="129:31" pos:end="129:48"><expr pos:start="129:31" pos:end="129:48"><call pos:start="129:31" pos:end="129:48"><name pos:start="129:31" pos:end="129:46">qdev_get_machine</name><argument_list pos:start="129:47" pos:end="129:48">()</argument_list></call></expr></argument>, <argument pos:start="129:51" pos:end="129:62"><expr pos:start="129:51" pos:end="129:62"><literal type="string" pos:start="129:51" pos:end="129:62">"xilinx-dma"</literal></expr></argument>, <argument pos:start="129:65" pos:end="129:75"><expr pos:start="129:65" pos:end="129:75"><call pos:start="129:65" pos:end="129:75"><name pos:start="129:65" pos:end="129:70">OBJECT</name><argument_list pos:start="129:71" pos:end="129:75">(<argument pos:start="129:72" pos:end="129:74"><expr pos:start="129:72" pos:end="129:74"><name pos:start="129:72" pos:end="129:74">dma</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="131:31" pos:end="131:34"><expr pos:start="131:31" pos:end="131:34"><name pos:start="131:31" pos:end="131:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:72"><expr pos:start="135:5" pos:end="137:71"><name pos:start="135:5" pos:end="135:8">peer</name> <operator pos:start="135:10" pos:end="135:10">=</operator> <call pos:start="135:12" pos:end="137:71"><name pos:start="135:12" pos:end="135:35">object_property_get_link</name><argument_list pos:start="135:36" pos:end="137:71">(<argument pos:start="135:37" pos:end="135:47"><expr pos:start="135:37" pos:end="135:47"><call pos:start="135:37" pos:end="135:47"><name pos:start="135:37" pos:end="135:42">OBJECT</name><argument_list pos:start="135:43" pos:end="135:47">(<argument pos:start="135:44" pos:end="135:46"><expr pos:start="135:44" pos:end="135:46"><name pos:start="135:44" pos:end="135:46">dma</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="137:37" pos:end="137:64"><expr pos:start="137:37" pos:end="137:64"><literal type="string" pos:start="137:37" pos:end="137:64">"axistream-connected-target"</literal></expr></argument>, <argument pos:start="137:67" pos:end="137:70"><expr pos:start="137:67" pos:end="137:70"><name pos:start="137:67" pos:end="137:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="141:64"><expr pos:start="139:5" pos:end="141:63"><call pos:start="139:5" pos:end="141:63"><name pos:start="139:5" pos:end="139:27">xilinx_axiethernet_init</name><argument_list pos:start="139:28" pos:end="141:63">(<argument pos:start="139:29" pos:end="139:32"><expr pos:start="139:29" pos:end="139:32"><name pos:start="139:29" pos:end="139:32">eth0</name></expr></argument>, <argument pos:start="139:35" pos:end="139:46"><expr pos:start="139:35" pos:end="139:46"><operator pos:start="139:35" pos:end="139:35">&amp;</operator><name pos:start="139:36" pos:end="139:46"><name pos:start="139:36" pos:end="139:43">nd_table</name><index pos:start="139:44" pos:end="139:46">[<expr pos:start="139:45" pos:end="139:45"><literal type="number" pos:start="139:45" pos:end="139:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:49" pos:end="139:66"><expr pos:start="139:49" pos:end="139:66"><call pos:start="139:49" pos:end="139:66"><name pos:start="139:49" pos:end="139:60">STREAM_SLAVE</name><argument_list pos:start="139:61" pos:end="139:66">(<argument pos:start="139:62" pos:end="139:65"><expr pos:start="139:62" pos:end="139:65"><name pos:start="139:62" pos:end="139:65">peer</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="141:29" pos:end="141:38"><expr pos:start="141:29" pos:end="141:38"><literal type="number" pos:start="141:29" pos:end="141:38">0x82780000</literal></expr></argument>, <argument pos:start="141:41" pos:end="141:46"><expr pos:start="141:41" pos:end="141:46"><name pos:start="141:41" pos:end="141:46"><name pos:start="141:41" pos:end="141:43">irq</name><index pos:start="141:44" pos:end="141:46">[<expr pos:start="141:45" pos:end="141:45"><literal type="number" pos:start="141:45" pos:end="141:45">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:49" pos:end="141:54"><expr pos:start="141:49" pos:end="141:54"><literal type="number" pos:start="141:49" pos:end="141:54">0x1000</literal></expr></argument>, <argument pos:start="141:57" pos:end="141:62"><expr pos:start="141:57" pos:end="141:62"><literal type="number" pos:start="141:57" pos:end="141:62">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="147:72"><expr pos:start="145:5" pos:end="147:71"><name pos:start="145:5" pos:end="145:8">peer</name> <operator pos:start="145:10" pos:end="145:10">=</operator> <call pos:start="145:12" pos:end="147:71"><name pos:start="145:12" pos:end="145:35">object_property_get_link</name><argument_list pos:start="145:36" pos:end="147:71">(<argument pos:start="145:37" pos:end="145:48"><expr pos:start="145:37" pos:end="145:48"><call pos:start="145:37" pos:end="145:48"><name pos:start="145:37" pos:end="145:42">OBJECT</name><argument_list pos:start="145:43" pos:end="145:48">(<argument pos:start="145:44" pos:end="145:47"><expr pos:start="145:44" pos:end="145:47"><name pos:start="145:44" pos:end="145:47">eth0</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="147:37" pos:end="147:64"><expr pos:start="147:37" pos:end="147:64"><literal type="string" pos:start="147:37" pos:end="147:64">"axistream-connected-target"</literal></expr></argument>, <argument pos:start="147:67" pos:end="147:70"><expr pos:start="147:67" pos:end="147:70"><name pos:start="147:67" pos:end="147:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="151:38"><expr pos:start="149:5" pos:end="151:37"><call pos:start="149:5" pos:end="151:37"><name pos:start="149:5" pos:end="149:22">xilinx_axidma_init</name><argument_list pos:start="149:23" pos:end="151:37">(<argument pos:start="149:24" pos:end="149:26"><expr pos:start="149:24" pos:end="149:26"><name pos:start="149:24" pos:end="149:26">dma</name></expr></argument>, <argument pos:start="149:29" pos:end="149:46"><expr pos:start="149:29" pos:end="149:46"><call pos:start="149:29" pos:end="149:46"><name pos:start="149:29" pos:end="149:40">STREAM_SLAVE</name><argument_list pos:start="149:41" pos:end="149:46">(<argument pos:start="149:42" pos:end="149:45"><expr pos:start="149:42" pos:end="149:45"><name pos:start="149:42" pos:end="149:45">peer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:49" pos:end="149:58"><expr pos:start="149:49" pos:end="149:58"><literal type="number" pos:start="149:49" pos:end="149:58">0x84600000</literal></expr></argument>, <argument pos:start="149:61" pos:end="149:66"><expr pos:start="149:61" pos:end="149:66"><name pos:start="149:61" pos:end="149:66"><name pos:start="149:61" pos:end="149:63">irq</name><index pos:start="149:64" pos:end="149:66">[<expr pos:start="149:65" pos:end="149:65"><literal type="number" pos:start="149:65" pos:end="149:65">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:69" pos:end="149:74"><expr pos:start="149:69" pos:end="149:74"><name pos:start="149:69" pos:end="149:74"><name pos:start="149:69" pos:end="149:71">irq</name><index pos:start="149:72" pos:end="149:74">[<expr pos:start="149:73" pos:end="149:73"><literal type="number" pos:start="149:73" pos:end="149:73">0</literal></expr>]</index></name></expr></argument>,

                       <argument pos:start="151:24" pos:end="151:36"><expr pos:start="151:24" pos:end="151:36"><literal type="number" pos:start="151:24" pos:end="151:26">100</literal> <operator pos:start="151:28" pos:end="151:28">*</operator> <literal type="number" pos:start="151:30" pos:end="151:36">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <block pos:start="155:5" pos:end="193:5">{<block_content pos:start="157:9" pos:end="191:9">

        <decl_stmt pos:start="157:9" pos:end="157:20"><decl pos:start="157:9" pos:end="157:19"><type pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:14">SSIBus</name> <modifier pos:start="157:16" pos:end="157:16">*</modifier></type><name pos:start="157:17" pos:end="157:19">spi</name></decl>;</decl_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:48"><expr pos:start="161:9" pos:end="161:47"><name pos:start="161:9" pos:end="161:11">dev</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <call pos:start="161:15" pos:end="161:47"><name pos:start="161:15" pos:end="161:25">qdev_create</name><argument_list pos:start="161:26" pos:end="161:47">(<argument pos:start="161:27" pos:end="161:30"><expr pos:start="161:27" pos:end="161:30"><name pos:start="161:27" pos:end="161:30">NULL</name></expr></argument>, <argument pos:start="161:33" pos:end="161:46"><expr pos:start="161:33" pos:end="161:46"><literal type="string" pos:start="161:33" pos:end="161:46">"xlnx.xps-spi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:65"><expr pos:start="163:9" pos:end="163:64"><call pos:start="163:9" pos:end="163:64"><name pos:start="163:9" pos:end="163:27">qdev_prop_set_uint8</name><argument_list pos:start="163:28" pos:end="163:64">(<argument pos:start="163:29" pos:end="163:31"><expr pos:start="163:29" pos:end="163:31"><name pos:start="163:29" pos:end="163:31">dev</name></expr></argument>, <argument pos:start="163:34" pos:end="163:46"><expr pos:start="163:34" pos:end="163:46"><literal type="string" pos:start="163:34" pos:end="163:46">"num-ss-bits"</literal></expr></argument>, <argument pos:start="163:49" pos:end="163:63"><expr pos:start="163:49" pos:end="163:63"><name pos:start="163:49" pos:end="163:63">NUM_SPI_FLASHES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:30"><expr pos:start="165:9" pos:end="165:29"><call pos:start="165:9" pos:end="165:29"><name pos:start="165:9" pos:end="165:24">qdev_init_nofail</name><argument_list pos:start="165:25" pos:end="165:29">(<argument pos:start="165:26" pos:end="165:28"><expr pos:start="165:26" pos:end="165:28"><name pos:start="165:26" pos:end="165:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:37"><expr pos:start="167:9" pos:end="167:36"><name pos:start="167:9" pos:end="167:14">busdev</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <call pos:start="167:18" pos:end="167:36"><name pos:start="167:18" pos:end="167:31">SYS_BUS_DEVICE</name><argument_list pos:start="167:32" pos:end="167:36">(<argument pos:start="167:33" pos:end="167:35"><expr pos:start="167:33" pos:end="167:35"><name pos:start="167:33" pos:end="167:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:47"><expr pos:start="169:9" pos:end="169:46"><call pos:start="169:9" pos:end="169:46"><name pos:start="169:9" pos:end="169:23">sysbus_mmio_map</name><argument_list pos:start="169:24" pos:end="169:46">(<argument pos:start="169:25" pos:end="169:30"><expr pos:start="169:25" pos:end="169:30"><name pos:start="169:25" pos:end="169:30">busdev</name></expr></argument>, <argument pos:start="169:33" pos:end="169:33"><expr pos:start="169:33" pos:end="169:33"><literal type="number" pos:start="169:33" pos:end="169:33">0</literal></expr></argument>, <argument pos:start="169:36" pos:end="169:45"><expr pos:start="169:36" pos:end="169:45"><literal type="number" pos:start="169:36" pos:end="169:45">0x40a00000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:46"><expr pos:start="171:9" pos:end="171:45"><call pos:start="171:9" pos:end="171:45"><name pos:start="171:9" pos:end="171:26">sysbus_connect_irq</name><argument_list pos:start="171:27" pos:end="171:45">(<argument pos:start="171:28" pos:end="171:33"><expr pos:start="171:28" pos:end="171:33"><name pos:start="171:28" pos:end="171:33">busdev</name></expr></argument>, <argument pos:start="171:36" pos:end="171:36"><expr pos:start="171:36" pos:end="171:36"><literal type="number" pos:start="171:36" pos:end="171:36">0</literal></expr></argument>, <argument pos:start="171:39" pos:end="171:44"><expr pos:start="171:39" pos:end="171:44"><name pos:start="171:39" pos:end="171:44"><name pos:start="171:39" pos:end="171:41">irq</name><index pos:start="171:42" pos:end="171:44">[<expr pos:start="171:43" pos:end="171:43"><literal type="number" pos:start="171:43" pos:end="171:43">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:55"><expr pos:start="175:9" pos:end="175:54"><name pos:start="175:9" pos:end="175:11">spi</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <operator pos:start="175:15" pos:end="175:15">(</operator><name pos:start="175:16" pos:end="175:21">SSIBus</name> <operator pos:start="175:23" pos:end="175:23">*</operator><operator pos:start="175:24" pos:end="175:24">)</operator><call pos:start="175:25" pos:end="175:54"><name pos:start="175:25" pos:end="175:42">qdev_get_child_bus</name><argument_list pos:start="175:43" pos:end="175:54">(<argument pos:start="175:44" pos:end="175:46"><expr pos:start="175:44" pos:end="175:46"><name pos:start="175:44" pos:end="175:46">dev</name></expr></argument>, <argument pos:start="175:49" pos:end="175:53"><expr pos:start="175:49" pos:end="175:53"><literal type="string" pos:start="175:49" pos:end="175:53">"spi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="179:9" pos:end="191:9">for <control pos:start="179:13" pos:end="179:45">(<init pos:start="179:14" pos:end="179:19"><expr pos:start="179:14" pos:end="179:18"><name pos:start="179:14" pos:end="179:14">i</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <literal type="number" pos:start="179:18" pos:end="179:18">0</literal></expr>;</init> <condition pos:start="179:21" pos:end="179:40"><expr pos:start="179:21" pos:end="179:39"><name pos:start="179:21" pos:end="179:21">i</name> <operator pos:start="179:23" pos:end="179:23">&lt;</operator> <name pos:start="179:25" pos:end="179:39">NUM_SPI_FLASHES</name></expr>;</condition> <incr pos:start="179:42" pos:end="179:44"><expr pos:start="179:42" pos:end="179:44"><name pos:start="179:42" pos:end="179:42">i</name><operator pos:start="179:43" pos:end="179:44">++</operator></expr></incr>)</control> <block pos:start="179:47" pos:end="191:9">{<block_content pos:start="181:13" pos:end="189:53">

            <decl_stmt pos:start="181:13" pos:end="181:29"><decl pos:start="181:13" pos:end="181:28"><type pos:start="181:13" pos:end="181:20"><name pos:start="181:13" pos:end="181:20">qemu_irq</name></type> <name pos:start="181:22" pos:end="181:28">cs_line</name></decl>;</decl_stmt>



            <expr_stmt pos:start="185:13" pos:end="185:51"><expr pos:start="185:13" pos:end="185:50"><name pos:start="185:13" pos:end="185:15">dev</name> <operator pos:start="185:17" pos:end="185:17">=</operator> <call pos:start="185:19" pos:end="185:50"><name pos:start="185:19" pos:end="185:34">ssi_create_slave</name><argument_list pos:start="185:35" pos:end="185:50">(<argument pos:start="185:36" pos:end="185:38"><expr pos:start="185:36" pos:end="185:38"><name pos:start="185:36" pos:end="185:38">spi</name></expr></argument>, <argument pos:start="185:41" pos:end="185:49"><expr pos:start="185:41" pos:end="185:49"><literal type="string" pos:start="185:41" pos:end="185:49">"n25q128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:47"><expr pos:start="187:13" pos:end="187:46"><name pos:start="187:13" pos:end="187:19">cs_line</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <call pos:start="187:23" pos:end="187:46"><name pos:start="187:23" pos:end="187:38">qdev_get_gpio_in</name><argument_list pos:start="187:39" pos:end="187:46">(<argument pos:start="187:40" pos:end="187:42"><expr pos:start="187:40" pos:end="187:42"><name pos:start="187:40" pos:end="187:42">dev</name></expr></argument>, <argument pos:start="187:45" pos:end="187:45"><expr pos:start="187:45" pos:end="187:45"><literal type="number" pos:start="187:45" pos:end="187:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:53"><expr pos:start="189:13" pos:end="189:52"><call pos:start="189:13" pos:end="189:52"><name pos:start="189:13" pos:end="189:30">sysbus_connect_irq</name><argument_list pos:start="189:31" pos:end="189:52">(<argument pos:start="189:32" pos:end="189:37"><expr pos:start="189:32" pos:end="189:37"><name pos:start="189:32" pos:end="189:37">busdev</name></expr></argument>, <argument pos:start="189:40" pos:end="189:42"><expr pos:start="189:40" pos:end="189:42"><name pos:start="189:40" pos:end="189:40">i</name><operator pos:start="189:41" pos:end="189:41">+</operator><literal type="number" pos:start="189:42" pos:end="189:42">1</literal></expr></argument>, <argument pos:start="189:45" pos:end="189:51"><expr pos:start="189:45" pos:end="189:51"><name pos:start="189:45" pos:end="189:51">cs_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <expr_stmt pos:start="197:5" pos:end="199:79"><expr pos:start="197:5" pos:end="199:78"><call pos:start="197:5" pos:end="199:78"><name pos:start="197:5" pos:end="197:26">microblaze_load_kernel</name><argument_list pos:start="197:27" pos:end="199:78">(<argument pos:start="197:28" pos:end="197:30"><expr pos:start="197:28" pos:end="197:30"><name pos:start="197:28" pos:end="197:30">cpu</name></expr></argument>, <argument pos:start="197:33" pos:end="197:40"><expr pos:start="197:33" pos:end="197:40"><name pos:start="197:33" pos:end="197:40">ddr_base</name></expr></argument>, <argument pos:start="197:43" pos:end="197:50"><expr pos:start="197:43" pos:end="197:50"><name pos:start="197:43" pos:end="197:50">ram_size</name></expr></argument>, <argument pos:start="197:53" pos:end="197:75"><expr pos:start="197:53" pos:end="197:75"><name pos:start="197:53" pos:end="197:75">BINARY_DEVICE_TREE_FILE</name></expr></argument>,

                                                            <argument pos:start="199:61" pos:end="199:77"><expr pos:start="199:61" pos:end="199:77"><name pos:start="199:61" pos:end="199:77">machine_cpu_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block>
</unit>
