<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2153.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">assign_storage</name><parameter_list pos:start="1:27" pos:end="1:56">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:37">SCLPDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">sclp</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:55"><decl pos:start="1:46" pos:end="1:55"><type pos:start="1:46" pos:end="1:55"><name pos:start="1:46" pos:end="1:49">SCCB</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">sccb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:67">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MemoryRegion</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">mr</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:32">this_subregion_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">AssignStorage</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:30">assign_info</name> <init pos:start="9:32" pos:end="9:55">= <expr pos:start="9:34" pos:end="9:55"><operator pos:start="9:34" pos:end="9:34">(</operator><name pos:start="9:35" pos:end="9:47">AssignStorage</name> <operator pos:start="9:49" pos:end="9:49">*</operator><operator pos:start="9:50" pos:end="9:50">)</operator> <name pos:start="9:52" pos:end="9:55">sccb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:62"><decl pos:start="11:5" pos:end="11:61"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24">sclpMemoryHotplugDev</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:29">mhd</name> <init pos:start="11:31" pos:end="11:61">= <expr pos:start="11:33" pos:end="11:61"><call pos:start="11:33" pos:end="11:61"><name pos:start="11:33" pos:end="11:59">get_sclp_memory_hotplug_dev</name><argument_list pos:start="11:60" pos:end="11:61">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:26">assign_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:24">sysmem</name> <init pos:start="15:26" pos:end="15:46">= <expr pos:start="15:28" pos:end="15:46"><call pos:start="15:28" pos:end="15:46"><name pos:start="15:28" pos:end="15:44">get_system_memory</name><argument_list pos:start="15:45" pos:end="15:46">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">mhd</name></expr>)</condition> <block pos:start="19:15" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:74"><expr pos:start="21:9" pos:end="21:73"><name pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:12">sccb</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:15">h</name><operator pos:start="21:16" pos:end="21:16">.</operator><name pos:start="21:17" pos:end="21:29">response_code</name></name> <operator pos:start="21:31" pos:end="21:31">=</operator> <call pos:start="21:33" pos:end="21:73"><name pos:start="21:33" pos:end="21:43">cpu_to_be16</name><argument_list pos:start="21:44" pos:end="21:73">(<argument pos:start="21:45" pos:end="21:72"><expr pos:start="21:45" pos:end="21:72"><name pos:start="21:45" pos:end="21:72">SCLP_RC_INVALID_SCLP_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:15">assign_addr</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <operator pos:start="27:19" pos:end="27:19">(</operator><name pos:start="27:20" pos:end="27:34"><name pos:start="27:20" pos:end="27:30">assign_info</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:34">rn</name></name> <operator pos:start="27:36" pos:end="27:36">-</operator> <literal type="number" pos:start="27:38" pos:end="27:38">1</literal><operator pos:start="27:39" pos:end="27:39">)</operator> <operator pos:start="27:41" pos:end="27:41">*</operator> <name pos:start="27:43" pos:end="27:50"><name pos:start="27:43" pos:end="27:45">mhd</name><operator pos:start="27:46" pos:end="27:47">-&gt;</operator><name pos:start="27:48" pos:end="27:50">rzm</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="113:5"><if pos:start="31:5" pos:end="113:5">if <condition pos:start="31:8" pos:end="33:46">(<expr pos:start="31:9" pos:end="33:45"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:20">assign_addr</name> <operator pos:start="31:22" pos:end="31:22">%</operator> <name pos:start="31:24" pos:end="31:39">MEM_SECTION_SIZE</name> <operator pos:start="31:41" pos:end="31:42">==</operator> <literal type="number" pos:start="31:44" pos:end="31:44">0</literal><operator pos:start="31:45" pos:end="31:45">)</operator> <operator pos:start="31:47" pos:end="31:48">&amp;&amp;</operator>

        <operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:20">assign_addr</name> <operator pos:start="33:22" pos:end="33:23">&gt;=</operator> <name pos:start="33:25" pos:end="33:44"><name pos:start="33:25" pos:end="33:27">mhd</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:44">padded_ram_size</name></name><operator pos:start="33:45" pos:end="33:45">)</operator></expr>)</condition> <block pos:start="33:48" pos:end="113:5">{<block_content pos:start="37:9" pos:end="111:55">

        <comment type="block" pos:start="35:9" pos:end="35:52">/* Re-use existing memory region if found */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:59"><expr pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:10">mr</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:55"><name pos:start="37:14" pos:end="37:31">memory_region_find</name><argument_list pos:start="37:32" pos:end="37:55">(<argument pos:start="37:33" pos:end="37:38"><expr pos:start="37:33" pos:end="37:38"><name pos:start="37:33" pos:end="37:38">sysmem</name></expr></argument>, <argument pos:start="37:41" pos:end="37:51"><expr pos:start="37:41" pos:end="37:51"><name pos:start="37:41" pos:end="37:51">assign_addr</name></expr></argument>, <argument pos:start="37:54" pos:end="37:54"><expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">1</literal></expr></argument>)</argument_list></call><operator pos:start="37:56" pos:end="37:56">.</operator><name pos:start="37:57" pos:end="37:58">mr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><call pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:27">memory_region_unref</name><argument_list pos:start="39:28" pos:end="39:31">(<argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><name pos:start="39:29" pos:end="39:30">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="105:9"><if pos:start="41:9" pos:end="105:9">if <condition pos:start="41:12" pos:end="41:16">(<expr pos:start="41:13" pos:end="41:15"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:15">mr</name></expr>)</condition> <block pos:start="41:18" pos:end="105:9">{<block_content pos:start="45:13" pos:end="103:69">



            <decl_stmt pos:start="45:13" pos:end="45:63"><decl pos:start="45:13" pos:end="45:62"><type pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:24">MemoryRegion</name> <modifier pos:start="45:26" pos:end="45:26">*</modifier></type><name pos:start="45:27" pos:end="45:37">standby_ram</name> <init pos:start="45:39" pos:end="45:62">= <expr pos:start="45:41" pos:end="45:62"><call pos:start="45:41" pos:end="45:62"><name pos:start="45:41" pos:end="45:45">g_new</name><argument_list pos:start="45:46" pos:end="45:62">(<argument pos:start="45:47" pos:end="45:58"><expr pos:start="45:47" pos:end="45:58"><name pos:start="45:47" pos:end="45:58">MemoryRegion</name></expr></argument>, <argument pos:start="45:61" pos:end="45:61"><expr pos:start="45:61" pos:end="45:61"><literal type="number" pos:start="45:61" pos:end="45:61">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="49:13" pos:end="49:74">/* offset to align to standby_subregion_size for allocation */</comment>

            <decl_stmt pos:start="51:13" pos:end="55:62"><decl pos:start="51:13" pos:end="55:61"><type pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:22">ram_addr_t</name></type> <name pos:start="51:24" pos:end="51:29">offset</name> <init pos:start="51:31" pos:end="55:61">= <expr pos:start="51:33" pos:end="55:61"><name pos:start="51:33" pos:end="51:43">assign_addr</name> <operator pos:start="51:45" pos:end="51:45">-</operator>

                                <operator pos:start="53:33" pos:end="53:33">(</operator><name pos:start="53:34" pos:end="53:44">assign_addr</name> <operator pos:start="53:46" pos:end="53:46">-</operator> <name pos:start="53:48" pos:end="53:67"><name pos:start="53:48" pos:end="53:50">mhd</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:67">padded_ram_size</name></name><operator pos:start="53:68" pos:end="53:68">)</operator>

                                <operator pos:start="55:33" pos:end="55:33">%</operator> <name pos:start="55:35" pos:end="55:61"><name pos:start="55:35" pos:end="55:37">mhd</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:61">standby_subregion_size</name></name></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="59:13" pos:end="59:77">/* strlen("standby.ram") + 4 (Max of KVM_MEMORY_SLOTS) +  NULL */</comment>

            <decl_stmt pos:start="61:13" pos:end="61:24"><decl pos:start="61:13" pos:end="61:23"><type pos:start="61:13" pos:end="61:16"><name pos:start="61:13" pos:end="61:16">char</name></type> <name pos:start="61:18" pos:end="61:23"><name pos:start="61:18" pos:end="61:19">id</name><index pos:start="61:20" pos:end="61:23">[<expr pos:start="61:21" pos:end="61:22"><literal type="number" pos:start="61:21" pos:end="61:22">16</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="63:13" pos:end="67:55"><expr pos:start="63:13" pos:end="67:54"><call pos:start="63:13" pos:end="67:54"><name pos:start="63:13" pos:end="63:20">snprintf</name><argument_list pos:start="63:21" pos:end="67:54">(<argument pos:start="63:22" pos:end="63:23"><expr pos:start="63:22" pos:end="63:23"><name pos:start="63:22" pos:end="63:23">id</name></expr></argument>, <argument pos:start="63:26" pos:end="63:27"><expr pos:start="63:26" pos:end="63:27"><literal type="number" pos:start="63:26" pos:end="63:27">16</literal></expr></argument>, <argument pos:start="63:30" pos:end="63:44"><expr pos:start="63:30" pos:end="63:44"><literal type="string" pos:start="63:30" pos:end="63:44">"standby.ram%d"</literal></expr></argument>,

                     <argument pos:start="65:22" pos:end="67:53"><expr pos:start="65:22" pos:end="67:53"><operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:25">int</name><operator pos:start="65:26" pos:end="65:26">)</operator><operator pos:start="65:27" pos:end="65:27">(</operator><operator pos:start="65:28" pos:end="65:28">(</operator><name pos:start="65:29" pos:end="65:34">offset</name> <operator pos:start="65:36" pos:end="65:36">-</operator> <name pos:start="65:38" pos:end="65:57"><name pos:start="65:38" pos:end="65:40">mhd</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:57">padded_ram_size</name></name><operator pos:start="65:58" pos:end="65:58">)</operator> <operator pos:start="65:60" pos:end="65:60">/</operator>

                     <name pos:start="67:22" pos:end="67:48"><name pos:start="67:22" pos:end="67:24">mhd</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:48">standby_subregion_size</name></name><operator pos:start="67:49" pos:end="67:49">)</operator> <operator pos:start="67:51" pos:end="67:51">+</operator> <literal type="number" pos:start="67:53" pos:end="67:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="71:13" pos:end="71:79">/* Allocate a subregion of the calculated standby_subregion_size */</comment>

            <if_stmt pos:start="73:13" pos:end="85:13"><if pos:start="73:13" pos:end="81:13">if <condition pos:start="73:16" pos:end="75:61">(<expr pos:start="73:17" pos:end="75:60"><name pos:start="73:17" pos:end="73:22">offset</name> <operator pos:start="73:24" pos:end="73:24">+</operator> <name pos:start="73:26" pos:end="73:52"><name pos:start="73:26" pos:end="73:28">mhd</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:52">standby_subregion_size</name></name> <operator pos:start="73:54" pos:end="73:54">&gt;</operator>

                <name pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:19">mhd</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:36">padded_ram_size</name></name> <operator pos:start="75:38" pos:end="75:38">+</operator> <name pos:start="75:40" pos:end="75:60"><name pos:start="75:40" pos:end="75:42">mhd</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:60">standby_mem_size</name></name></expr>)</condition> <block pos:start="75:63" pos:end="81:13">{<block_content pos:start="77:17" pos:end="79:49">

                <expr_stmt pos:start="77:17" pos:end="79:49"><expr pos:start="77:17" pos:end="79:48"><name pos:start="77:17" pos:end="77:35">this_subregion_size</name> <operator pos:start="77:37" pos:end="77:37">=</operator> <name pos:start="77:39" pos:end="77:58"><name pos:start="77:39" pos:end="77:41">mhd</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:58">padded_ram_size</name></name> <operator pos:start="77:60" pos:end="77:60">+</operator>

                  <name pos:start="79:19" pos:end="79:39"><name pos:start="79:19" pos:end="79:21">mhd</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:39">standby_mem_size</name></name> <operator pos:start="79:41" pos:end="79:41">-</operator> <name pos:start="79:43" pos:end="79:48">offset</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="81:15" pos:end="85:13">else <block pos:start="81:20" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:66">

                <expr_stmt pos:start="83:17" pos:end="83:66"><expr pos:start="83:17" pos:end="83:65"><name pos:start="83:17" pos:end="83:35">this_subregion_size</name> <operator pos:start="83:37" pos:end="83:37">=</operator> <name pos:start="83:39" pos:end="83:65"><name pos:start="83:39" pos:end="83:41">mhd</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:65">standby_subregion_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:93"><expr pos:start="89:13" pos:end="89:92"><call pos:start="89:13" pos:end="89:92"><name pos:start="89:13" pos:end="89:34">memory_region_init_ram</name><argument_list pos:start="89:35" pos:end="89:92">(<argument pos:start="89:36" pos:end="89:46"><expr pos:start="89:36" pos:end="89:46"><name pos:start="89:36" pos:end="89:46">standby_ram</name></expr></argument>, <argument pos:start="89:49" pos:end="89:52"><expr pos:start="89:49" pos:end="89:52"><name pos:start="89:49" pos:end="89:52">NULL</name></expr></argument>, <argument pos:start="89:55" pos:end="89:56"><expr pos:start="89:55" pos:end="89:56"><name pos:start="89:55" pos:end="89:56">id</name></expr></argument>, <argument pos:start="89:59" pos:end="89:77"><expr pos:start="89:59" pos:end="89:77"><name pos:start="89:59" pos:end="89:77">this_subregion_size</name></expr></argument>, <argument pos:start="89:80" pos:end="89:91"><expr pos:start="89:80" pos:end="89:91"><operator pos:start="89:80" pos:end="89:80">&amp;</operator><name pos:start="89:81" pos:end="89:91">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="91:13" pos:end="95:76">/* This is a hack to make memory hotunplug work again. Once we have

             * subdevices, we have to unparent them when unassigning memory,

             * instead of doing it via the ref count of the MemoryRegion. */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:44"><expr pos:start="97:13" pos:end="97:43"><call pos:start="97:13" pos:end="97:43"><name pos:start="97:13" pos:end="97:22">object_ref</name><argument_list pos:start="97:23" pos:end="97:43">(<argument pos:start="97:24" pos:end="97:42"><expr pos:start="97:24" pos:end="97:42"><call pos:start="97:24" pos:end="97:42"><name pos:start="97:24" pos:end="97:29">OBJECT</name><argument_list pos:start="97:30" pos:end="97:42">(<argument pos:start="97:31" pos:end="97:41"><expr pos:start="97:31" pos:end="97:41"><name pos:start="97:31" pos:end="97:41">standby_ram</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:49"><expr pos:start="99:13" pos:end="99:48"><call pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:27">object_unparent</name><argument_list pos:start="99:28" pos:end="99:48">(<argument pos:start="99:29" pos:end="99:47"><expr pos:start="99:29" pos:end="99:47"><call pos:start="99:29" pos:end="99:47"><name pos:start="99:29" pos:end="99:34">OBJECT</name><argument_list pos:start="99:35" pos:end="99:47">(<argument pos:start="99:36" pos:end="99:46"><expr pos:start="99:36" pos:end="99:46"><name pos:start="99:36" pos:end="99:46">standby_ram</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:53"><expr pos:start="101:13" pos:end="101:52"><call pos:start="101:13" pos:end="101:52"><name pos:start="101:13" pos:end="101:39">vmstate_register_ram_global</name><argument_list pos:start="101:40" pos:end="101:52">(<argument pos:start="101:41" pos:end="101:51"><expr pos:start="101:41" pos:end="101:51"><name pos:start="101:41" pos:end="101:51">standby_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:69"><expr pos:start="103:13" pos:end="103:68"><call pos:start="103:13" pos:end="103:68"><name pos:start="103:13" pos:end="103:39">memory_region_add_subregion</name><argument_list pos:start="103:40" pos:end="103:68">(<argument pos:start="103:41" pos:end="103:46"><expr pos:start="103:41" pos:end="103:46"><name pos:start="103:41" pos:end="103:46">sysmem</name></expr></argument>, <argument pos:start="103:49" pos:end="103:54"><expr pos:start="103:49" pos:end="103:54"><name pos:start="103:49" pos:end="103:54">offset</name></expr></argument>, <argument pos:start="103:57" pos:end="103:67"><expr pos:start="103:57" pos:end="103:67"><name pos:start="103:57" pos:end="103:67">standby_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="107:9" pos:end="107:61">/* The specified subregion is no longer in standby */</comment>

        <expr_stmt pos:start="109:9" pos:end="111:55"><expr pos:start="109:9" pos:end="111:54"><name pos:start="109:9" pos:end="111:50"><name pos:start="109:9" pos:end="109:11">mhd</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:30">standby_state_map</name><index pos:start="109:31" pos:end="111:50">[<expr pos:start="109:32" pos:end="111:49"><operator pos:start="109:32" pos:end="109:32">(</operator><name pos:start="109:33" pos:end="109:43">assign_addr</name> <operator pos:start="109:45" pos:end="109:45">-</operator> <name pos:start="109:47" pos:end="109:66"><name pos:start="109:47" pos:end="109:49">mhd</name><operator pos:start="109:50" pos:end="109:51">-&gt;</operator><name pos:start="109:52" pos:end="109:66">padded_ram_size</name></name><operator pos:start="109:67" pos:end="109:67">)</operator>

                               <operator pos:start="111:32" pos:end="111:32">/</operator> <name pos:start="111:34" pos:end="111:49">MEM_SECTION_SIZE</name></expr>]</index></name> <operator pos:start="111:52" pos:end="111:52">=</operator> <literal type="number" pos:start="111:54" pos:end="111:54">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:67"><expr pos:start="115:5" pos:end="115:66"><name pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:8">sccb</name><operator pos:start="115:9" pos:end="115:10">-&gt;</operator><name pos:start="115:11" pos:end="115:11">h</name><operator pos:start="115:12" pos:end="115:12">.</operator><name pos:start="115:13" pos:end="115:25">response_code</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <call pos:start="115:29" pos:end="115:66"><name pos:start="115:29" pos:end="115:39">cpu_to_be16</name><argument_list pos:start="115:40" pos:end="115:66">(<argument pos:start="115:41" pos:end="115:65"><expr pos:start="115:41" pos:end="115:65"><name pos:start="115:41" pos:end="115:65">SCLP_RC_NORMAL_COMPLETION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
