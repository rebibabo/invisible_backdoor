<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13132.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">pcistb_service_call</name><parameter_list pos:start="1:24" pos:end="3:35">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:48">r1</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:57">uint8_t</name></type> <name pos:start="1:59" pos:end="1:60">r3</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:70">uint64_t</name></type> <name pos:start="1:72" pos:end="1:76">gaddr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:34"><decl pos:start="3:25" pos:end="3:34"><type pos:start="3:25" pos:end="3:34"><name pos:start="3:25" pos:end="3:31">uint8_t</name></type> <name pos:start="3:33" pos:end="3:34">ar</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="159:1">{<block_content pos:start="7:5" pos:end="157:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUS390XState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">env</name> <init pos:start="7:24" pos:end="7:34">= <expr pos:start="7:26" pos:end="7:34"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:29">cpu</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">S390PCIBusDevice</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:17">pcias</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:18">buffer</name><index pos:start="21:19" pos:end="21:23">[<expr pos:start="21:20" pos:end="21:22"><literal type="number" pos:start="21:20" pos:end="21:22">128</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:40">(<expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:11">env</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:16">psw</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:21">mask</name></name> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <name pos:start="25:25" pos:end="25:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="25:42" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:25">program_interrupt</name><argument_list pos:start="27:26" pos:end="27:49">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">env</name></expr></argument>, <argument pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:6">fh</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <name pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:12">env</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:18">regs</name><index pos:start="35:19" pos:end="35:22">[<expr pos:start="35:20" pos:end="35:21"><name pos:start="35:20" pos:end="35:21">r1</name></expr>]</index></name> <operator pos:start="35:24" pos:end="35:25">&gt;&gt;</operator> <literal type="number" pos:start="35:27" pos:end="35:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:9">pcias</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:26"><name pos:start="37:14" pos:end="37:16">env</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:22">regs</name><index pos:start="37:23" pos:end="37:26">[<expr pos:start="37:24" pos:end="37:25"><name pos:start="37:24" pos:end="37:25">r1</name></expr>]</index></name> <operator pos:start="37:28" pos:end="37:29">&gt;&gt;</operator> <literal type="number" pos:start="37:31" pos:end="37:32">16</literal><operator pos:start="37:33" pos:end="37:33">)</operator> <operator pos:start="37:35" pos:end="37:35">&amp;</operator> <literal type="number" pos:start="37:37" pos:end="37:39">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:7">len</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:23"><name pos:start="39:11" pos:end="39:13">env</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">regs</name><index pos:start="39:20" pos:end="39:23">[<expr pos:start="39:21" pos:end="39:22"><name pos:start="39:21" pos:end="39:22">r1</name></expr>]</index></name> <operator pos:start="39:25" pos:end="39:25">&amp;</operator> <literal type="number" pos:start="39:27" pos:end="39:30">0xff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:18">(<expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:13">pcias</name> <operator pos:start="43:15" pos:end="43:15">&gt;</operator> <literal type="number" pos:start="43:17" pos:end="43:17">5</literal></expr>)</condition> <block pos:start="43:20" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:17">

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><call pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:15">DPRINTF</name><argument_list pos:start="45:16" pos:end="45:41">(<argument pos:start="45:17" pos:end="45:40"><expr pos:start="45:17" pos:end="45:40"><literal type="string" pos:start="45:17" pos:end="45:40">"pcistb invalid space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><call pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:13">setcc</name><argument_list pos:start="47:14" pos:end="47:35">(<argument pos:start="47:15" pos:end="47:17"><expr pos:start="47:15" pos:end="47:17"><name pos:start="47:15" pos:end="47:17">cpu</name></expr></argument>, <argument pos:start="47:20" pos:end="47:34"><expr pos:start="47:20" pos:end="47:34"><name pos:start="47:20" pos:end="47:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:60"><expr pos:start="49:9" pos:end="49:59"><call pos:start="49:9" pos:end="49:59"><name pos:start="49:9" pos:end="49:28">s390_set_status_code</name><argument_list pos:start="49:29" pos:end="49:59">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">env</name></expr></argument>, <argument pos:start="49:35" pos:end="49:36"><expr pos:start="49:35" pos:end="49:36"><name pos:start="49:35" pos:end="49:36">r1</name></expr></argument>, <argument pos:start="49:39" pos:end="49:58"><expr pos:start="49:39" pos:end="49:58"><name pos:start="49:39" pos:end="49:58">ZPCI_PCI_ST_INVAL_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:17">return <expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="57:5" pos:end="75:5">switch <condition pos:start="57:12" pos:end="57:16">(<expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">len</name></expr>)</condition> <block pos:start="57:18" pos:end="75:5">{<block_content pos:start="59:5" pos:end="73:17">

    <case pos:start="59:5" pos:end="59:12">case <expr pos:start="59:10" pos:end="59:11"><literal type="number" pos:start="59:10" pos:end="59:11">16</literal></expr>:</case>

    <case pos:start="61:5" pos:end="61:12">case <expr pos:start="61:10" pos:end="61:11"><literal type="number" pos:start="61:10" pos:end="61:11">32</literal></expr>:</case>

    <case pos:start="63:5" pos:end="63:12">case <expr pos:start="63:10" pos:end="63:11"><literal type="number" pos:start="63:10" pos:end="63:11">64</literal></expr>:</case>

    <case pos:start="65:5" pos:end="65:13">case <expr pos:start="65:10" pos:end="65:12"><literal type="number" pos:start="65:10" pos:end="65:12">128</literal></expr>:</case>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <default pos:start="69:5" pos:end="69:12">default:</default>

        <expr_stmt pos:start="71:9" pos:end="71:53"><expr pos:start="71:9" pos:end="71:52"><call pos:start="71:9" pos:end="71:52"><name pos:start="71:9" pos:end="71:25">program_interrupt</name><argument_list pos:start="71:26" pos:end="71:52">(<argument pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><name pos:start="71:27" pos:end="71:29">env</name></expr></argument>, <argument pos:start="71:32" pos:end="71:48"><expr pos:start="71:32" pos:end="71:48"><name pos:start="71:32" pos:end="71:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="71:51" pos:end="71:51"><expr pos:start="71:51" pos:end="71:51"><literal type="number" pos:start="71:51" pos:end="71:51">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="79:5" pos:end="79:40"><expr pos:start="79:5" pos:end="79:39"><name pos:start="79:5" pos:end="79:9">pbdev</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:39"><name pos:start="79:13" pos:end="79:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="79:36" pos:end="79:39">(<argument pos:start="79:37" pos:end="79:38"><expr pos:start="79:37" pos:end="79:38"><name pos:start="79:37" pos:end="79:38">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:15">(<expr pos:start="81:9" pos:end="81:14"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:14">pbdev</name></expr>)</condition> <block pos:start="81:17" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:17">

        <expr_stmt pos:start="83:9" pos:end="83:51"><expr pos:start="83:9" pos:end="83:50"><call pos:start="83:9" pos:end="83:50"><name pos:start="83:9" pos:end="83:15">DPRINTF</name><argument_list pos:start="83:16" pos:end="83:50">(<argument pos:start="83:17" pos:end="83:45"><expr pos:start="83:17" pos:end="83:45"><literal type="string" pos:start="83:17" pos:end="83:45">"pcistb no pci dev fh 0x%x\n"</literal></expr></argument>, <argument pos:start="83:48" pos:end="83:49"><expr pos:start="83:48" pos:end="83:49"><name pos:start="83:48" pos:end="83:49">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:45"><expr pos:start="85:9" pos:end="85:44"><call pos:start="85:9" pos:end="85:44"><name pos:start="85:9" pos:end="85:13">setcc</name><argument_list pos:start="85:14" pos:end="85:44">(<argument pos:start="85:15" pos:end="85:17"><expr pos:start="85:15" pos:end="85:17"><name pos:start="85:15" pos:end="85:17">cpu</name></expr></argument>, <argument pos:start="85:20" pos:end="85:43"><expr pos:start="85:20" pos:end="85:43"><name pos:start="85:20" pos:end="85:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:17">return <expr pos:start="87:16" pos:end="87:16"><literal type="number" pos:start="87:16" pos:end="87:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="93:5" pos:end="119:5">switch <condition pos:start="93:12" pos:end="93:25">(<expr pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:17">pbdev</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:24">state</name></name></expr>)</condition> <block pos:start="93:27" pos:end="119:5">{<block_content pos:start="95:5" pos:end="117:14">

    <case pos:start="95:5" pos:end="95:26">case <expr pos:start="95:10" pos:end="95:25"><name pos:start="95:10" pos:end="95:25">ZPCI_FS_RESERVED</name></expr>:</case>

    <case pos:start="97:5" pos:end="97:25">case <expr pos:start="97:10" pos:end="97:24"><name pos:start="97:10" pos:end="97:24">ZPCI_FS_STANDBY</name></expr>:</case>

    <case pos:start="99:5" pos:end="99:26">case <expr pos:start="99:10" pos:end="99:25"><name pos:start="99:10" pos:end="99:25">ZPCI_FS_DISABLED</name></expr>:</case>

    <case pos:start="101:5" pos:end="101:33">case <expr pos:start="101:10" pos:end="101:32"><name pos:start="101:10" pos:end="101:32">ZPCI_FS_PERMANENT_ERROR</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:45"><expr pos:start="103:9" pos:end="103:44"><call pos:start="103:9" pos:end="103:44"><name pos:start="103:9" pos:end="103:13">setcc</name><argument_list pos:start="103:14" pos:end="103:44">(<argument pos:start="103:15" pos:end="103:17"><expr pos:start="103:15" pos:end="103:17"><name pos:start="103:15" pos:end="103:17">cpu</name></expr></argument>, <argument pos:start="103:20" pos:end="103:43"><expr pos:start="103:20" pos:end="103:43"><name pos:start="103:20" pos:end="103:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:17">return <expr pos:start="105:16" pos:end="105:16"><literal type="number" pos:start="105:16" pos:end="105:16">0</literal></expr>;</return>

    <case pos:start="107:5" pos:end="107:23">case <expr pos:start="107:10" pos:end="107:22"><name pos:start="107:10" pos:end="107:22">ZPCI_FS_ERROR</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:36"><expr pos:start="109:9" pos:end="109:35"><call pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:13">setcc</name><argument_list pos:start="109:14" pos:end="109:35">(<argument pos:start="109:15" pos:end="109:17"><expr pos:start="109:15" pos:end="109:17"><name pos:start="109:15" pos:end="109:17">cpu</name></expr></argument>, <argument pos:start="109:20" pos:end="109:34"><expr pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:59"><expr pos:start="111:9" pos:end="111:58"><call pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:28">s390_set_status_code</name><argument_list pos:start="111:29" pos:end="111:58">(<argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">env</name></expr></argument>, <argument pos:start="111:35" pos:end="111:36"><expr pos:start="111:35" pos:end="111:36"><name pos:start="111:35" pos:end="111:36">r1</name></expr></argument>, <argument pos:start="111:39" pos:end="111:57"><expr pos:start="111:39" pos:end="111:57"><name pos:start="111:39" pos:end="111:57">ZPCI_PCI_ST_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:17">return <expr pos:start="113:16" pos:end="113:16"><literal type="number" pos:start="113:16" pos:end="113:16">0</literal></expr>;</return>

    <default pos:start="115:5" pos:end="115:12">default:</default>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="123:5" pos:end="123:47"><expr pos:start="123:5" pos:end="123:46"><name pos:start="123:5" pos:end="123:6">mr</name> <operator pos:start="123:8" pos:end="123:8">=</operator> <name pos:start="123:10" pos:end="123:39"><name pos:start="123:10" pos:end="123:14">pbdev</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:20">pdev</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:32">io_regions</name><index pos:start="123:33" pos:end="123:39">[<expr pos:start="123:34" pos:end="123:38"><name pos:start="123:34" pos:end="123:38">pcias</name></expr>]</index></name><operator pos:start="123:40" pos:end="123:40">.</operator><name pos:start="123:41" pos:end="123:46">memory</name></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:66">(<expr pos:start="125:9" pos:end="125:65"><operator pos:start="125:9" pos:end="125:9">!</operator><call pos:start="125:10" pos:end="125:65"><name pos:start="125:10" pos:end="125:35">memory_region_access_valid</name><argument_list pos:start="125:36" pos:end="125:65">(<argument pos:start="125:37" pos:end="125:38"><expr pos:start="125:37" pos:end="125:38"><name pos:start="125:37" pos:end="125:38">mr</name></expr></argument>, <argument pos:start="125:41" pos:end="125:53"><expr pos:start="125:41" pos:end="125:53"><name pos:start="125:41" pos:end="125:53"><name pos:start="125:41" pos:end="125:43">env</name><operator pos:start="125:44" pos:end="125:45">-&gt;</operator><name pos:start="125:46" pos:end="125:49">regs</name><index pos:start="125:50" pos:end="125:53">[<expr pos:start="125:51" pos:end="125:52"><name pos:start="125:51" pos:end="125:52">r3</name></expr>]</index></name></expr></argument>, <argument pos:start="125:56" pos:end="125:58"><expr pos:start="125:56" pos:end="125:58"><name pos:start="125:56" pos:end="125:58">len</name></expr></argument>, <argument pos:start="125:61" pos:end="125:64"><expr pos:start="125:61" pos:end="125:64"><name pos:start="125:61" pos:end="125:64">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:68" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:17">

        <expr_stmt pos:start="127:9" pos:end="127:50"><expr pos:start="127:9" pos:end="127:49"><call pos:start="127:9" pos:end="127:49"><name pos:start="127:9" pos:end="127:25">program_interrupt</name><argument_list pos:start="127:26" pos:end="127:49">(<argument pos:start="127:27" pos:end="127:29"><expr pos:start="127:27" pos:end="127:29"><name pos:start="127:27" pos:end="127:29">env</name></expr></argument>, <argument pos:start="127:32" pos:end="127:45"><expr pos:start="127:32" pos:end="127:45"><name pos:start="127:32" pos:end="127:45">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="127:48" pos:end="127:48"><expr pos:start="127:48" pos:end="127:48"><literal type="number" pos:start="127:48" pos:end="127:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:17">return <expr pos:start="129:16" pos:end="129:16"><literal type="number" pos:start="129:16" pos:end="129:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:60">(<expr pos:start="135:9" pos:end="135:59"><call pos:start="135:9" pos:end="135:59"><name pos:start="135:9" pos:end="135:30">s390_cpu_virt_mem_read</name><argument_list pos:start="135:31" pos:end="135:59">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:34">cpu</name></expr></argument>, <argument pos:start="135:37" pos:end="135:41"><expr pos:start="135:37" pos:end="135:41"><name pos:start="135:37" pos:end="135:41">gaddr</name></expr></argument>, <argument pos:start="135:44" pos:end="135:45"><expr pos:start="135:44" pos:end="135:45"><name pos:start="135:44" pos:end="135:45">ar</name></expr></argument>, <argument pos:start="135:48" pos:end="135:53"><expr pos:start="135:48" pos:end="135:53"><name pos:start="135:48" pos:end="135:53">buffer</name></expr></argument>, <argument pos:start="135:56" pos:end="135:58"><expr pos:start="135:56" pos:end="135:58"><name pos:start="135:56" pos:end="135:58">len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:62" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:17">

        <return pos:start="137:9" pos:end="137:17">return <expr pos:start="137:16" pos:end="137:16"><literal type="number" pos:start="137:16" pos:end="137:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="143:5" pos:end="151:5">for <control pos:start="143:9" pos:end="143:33">(<init pos:start="143:10" pos:end="143:15"><expr pos:start="143:10" pos:end="143:14"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <literal type="number" pos:start="143:14" pos:end="143:14">0</literal></expr>;</init> <condition pos:start="143:17" pos:end="143:28"><expr pos:start="143:17" pos:end="143:27"><name pos:start="143:17" pos:end="143:17">i</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <name pos:start="143:21" pos:end="143:23">len</name> <operator pos:start="143:25" pos:end="143:25">/</operator> <literal type="number" pos:start="143:27" pos:end="143:27">8</literal></expr>;</condition> <incr pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><name pos:start="143:30" pos:end="143:30">i</name><operator pos:start="143:31" pos:end="143:32">++</operator></expr></incr>)</control> <block pos:start="143:35" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:61">

        <expr_stmt pos:start="145:9" pos:end="149:61"><expr pos:start="145:9" pos:end="149:60"><call pos:start="145:9" pos:end="149:60"><name pos:start="145:9" pos:end="145:36">memory_region_dispatch_write</name><argument_list pos:start="145:37" pos:end="149:60">(<argument pos:start="145:38" pos:end="145:39"><expr pos:start="145:38" pos:end="145:39"><name pos:start="145:38" pos:end="145:39">mr</name></expr></argument>, <argument pos:start="145:42" pos:end="145:62"><expr pos:start="145:42" pos:end="145:62"><name pos:start="145:42" pos:end="145:54"><name pos:start="145:42" pos:end="145:44">env</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:50">regs</name><index pos:start="145:51" pos:end="145:54">[<expr pos:start="145:52" pos:end="145:53"><name pos:start="145:52" pos:end="145:53">r3</name></expr>]</index></name> <operator pos:start="145:56" pos:end="145:56">+</operator> <name pos:start="145:58" pos:end="145:58">i</name> <operator pos:start="145:60" pos:end="145:60">*</operator> <literal type="number" pos:start="145:62" pos:end="145:62">8</literal></expr></argument>,

                                     <argument pos:start="147:38" pos:end="147:58"><expr pos:start="147:38" pos:end="147:58"><call pos:start="147:38" pos:end="147:58"><name pos:start="147:38" pos:end="147:42">ldq_p</name><argument_list pos:start="147:43" pos:end="147:58">(<argument pos:start="147:44" pos:end="147:57"><expr pos:start="147:44" pos:end="147:57"><name pos:start="147:44" pos:end="147:49">buffer</name> <operator pos:start="147:51" pos:end="147:51">+</operator> <name pos:start="147:53" pos:end="147:53">i</name> <operator pos:start="147:55" pos:end="147:55">*</operator> <literal type="number" pos:start="147:57" pos:end="147:57">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="147:61" pos:end="147:61"><expr pos:start="147:61" pos:end="147:61"><literal type="number" pos:start="147:61" pos:end="147:61">8</literal></expr></argument>,

                                     <argument pos:start="149:38" pos:end="149:59"><expr pos:start="149:38" pos:end="149:59"><name pos:start="149:38" pos:end="149:59">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="155:5" pos:end="155:31"><expr pos:start="155:5" pos:end="155:30"><call pos:start="155:5" pos:end="155:30"><name pos:start="155:5" pos:end="155:9">setcc</name><argument_list pos:start="155:10" pos:end="155:30">(<argument pos:start="155:11" pos:end="155:13"><expr pos:start="155:11" pos:end="155:13"><name pos:start="155:11" pos:end="155:13">cpu</name></expr></argument>, <argument pos:start="155:16" pos:end="155:29"><expr pos:start="155:16" pos:end="155:29"><name pos:start="155:16" pos:end="155:29">ZPCI_PCI_LS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="157:5" pos:end="157:13">return <expr pos:start="157:12" pos:end="157:12"><literal type="number" pos:start="157:12" pos:end="157:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
