<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21884.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">ff_h264_decode_sei</name><parameter_list pos:start="1:23" pos:end="1:38">(<parameter pos:start="1:24" pos:end="1:37"><decl pos:start="1:24" pos:end="1:37"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:34">H264Context</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:13">

    <while pos:start="5:5" pos:end="131:5">while <condition pos:start="5:11" pos:end="5:38">(<expr pos:start="5:12" pos:end="5:37"><call pos:start="5:12" pos:end="5:32"><name pos:start="5:12" pos:end="5:24">get_bits_left</name><argument_list pos:start="5:25" pos:end="5:32">(<argument pos:start="5:26" pos:end="5:31"><expr pos:start="5:26" pos:end="5:31"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:31"><name pos:start="5:27" pos:end="5:27">h</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="5:34" pos:end="5:34">&gt;</operator> <literal type="number" pos:start="5:36" pos:end="5:37">16</literal></expr>)</condition> <block pos:start="5:40" pos:end="131:5">{<block_content pos:start="7:9" pos:end="129:31">

        <decl_stmt pos:start="7:9" pos:end="7:21"><decl pos:start="7:9" pos:end="7:20"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:16">size</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:21"><decl pos:start="9:9" pos:end="9:20"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:16">type</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:21"><decl pos:start="11:9" pos:end="11:20"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:15">ret</name>  <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:21"><decl pos:start="13:9" pos:end="13:20"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:16">last</name> <init pos:start="13:18" pos:end="13:20">= <expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="17:9" pos:end="23:9">while <condition pos:start="17:15" pos:end="19:51">(<expr pos:start="17:16" pos:end="19:50"><call pos:start="17:16" pos:end="17:36"><name pos:start="17:16" pos:end="17:28">get_bits_left</name><argument_list pos:start="17:29" pos:end="17:36">(<argument pos:start="17:30" pos:end="17:35"><expr pos:start="17:30" pos:end="17:35"><operator pos:start="17:30" pos:end="17:30">&amp;</operator><name pos:start="17:31" pos:end="17:35"><name pos:start="17:31" pos:end="17:31">h</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:35">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="17:38" pos:end="17:39">&gt;=</operator> <literal type="number" pos:start="17:41" pos:end="17:41">8</literal> <operator pos:start="17:43" pos:end="17:44">&amp;&amp;</operator>

               <operator pos:start="19:16" pos:end="19:16">(</operator><name pos:start="19:17" pos:end="19:20">last</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <call pos:start="19:24" pos:end="19:42"><name pos:start="19:24" pos:end="19:31">get_bits</name><argument_list pos:start="19:32" pos:end="19:42">(<argument pos:start="19:33" pos:end="19:38"><expr pos:start="19:33" pos:end="19:38"><operator pos:start="19:33" pos:end="19:33">&amp;</operator><name pos:start="19:34" pos:end="19:38"><name pos:start="19:34" pos:end="19:34">h</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:38">gb</name></name></expr></argument>, <argument pos:start="19:41" pos:end="19:41"><expr pos:start="19:41" pos:end="19:41"><literal type="number" pos:start="19:41" pos:end="19:41">8</literal></expr></argument>)</argument_list></call><operator pos:start="19:43" pos:end="19:43">)</operator> <operator pos:start="19:45" pos:end="19:46">==</operator> <literal type="number" pos:start="19:48" pos:end="19:50">255</literal></expr>)</condition> <block pos:start="19:53" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:24">

            <expr_stmt pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:16">type</name> <operator pos:start="21:18" pos:end="21:19">+=</operator> <literal type="number" pos:start="21:21" pos:end="21:23">255</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:12">type</name> <operator pos:start="25:14" pos:end="25:15">+=</operator> <name pos:start="25:17" pos:end="25:20">last</name></expr>;</expr_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:17"><expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:12">last</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</expr_stmt>

        <while pos:start="31:9" pos:end="37:9">while <condition pos:start="31:15" pos:end="33:51">(<expr pos:start="31:16" pos:end="33:50"><call pos:start="31:16" pos:end="31:36"><name pos:start="31:16" pos:end="31:28">get_bits_left</name><argument_list pos:start="31:29" pos:end="31:36">(<argument pos:start="31:30" pos:end="31:35"><expr pos:start="31:30" pos:end="31:35"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:31">h</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:35">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="31:38" pos:end="31:39">&gt;=</operator> <literal type="number" pos:start="31:41" pos:end="31:41">8</literal> <operator pos:start="31:43" pos:end="31:44">&amp;&amp;</operator>

               <operator pos:start="33:16" pos:end="33:16">(</operator><name pos:start="33:17" pos:end="33:20">last</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <call pos:start="33:24" pos:end="33:42"><name pos:start="33:24" pos:end="33:31">get_bits</name><argument_list pos:start="33:32" pos:end="33:42">(<argument pos:start="33:33" pos:end="33:38"><expr pos:start="33:33" pos:end="33:38"><operator pos:start="33:33" pos:end="33:33">&amp;</operator><name pos:start="33:34" pos:end="33:38"><name pos:start="33:34" pos:end="33:34">h</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:38">gb</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:41"><expr pos:start="33:41" pos:end="33:41"><literal type="number" pos:start="33:41" pos:end="33:41">8</literal></expr></argument>)</argument_list></call><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:46">==</operator> <literal type="number" pos:start="33:48" pos:end="33:50">255</literal></expr>)</condition> <block pos:start="33:53" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:24">

            <expr_stmt pos:start="35:13" pos:end="35:24"><expr pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:16">size</name> <operator pos:start="35:18" pos:end="35:19">+=</operator> <literal type="number" pos:start="35:21" pos:end="35:23">255</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:15">+=</operator> <name pos:start="39:17" pos:end="39:20">last</name></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:45">(<expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:16">size</name> <operator pos:start="43:18" pos:end="43:18">&gt;</operator> <call pos:start="43:20" pos:end="43:40"><name pos:start="43:20" pos:end="43:32">get_bits_left</name><argument_list pos:start="43:33" pos:end="43:40">(<argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><operator pos:start="43:34" pos:end="43:34">&amp;</operator><name pos:start="43:35" pos:end="43:39"><name pos:start="43:35" pos:end="43:35">h</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:39">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:42" pos:end="43:42">/</operator> <literal type="number" pos:start="43:44" pos:end="43:44">8</literal></expr>)</condition> <block pos:start="43:47" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:39">

            <expr_stmt pos:start="45:13" pos:end="47:48"><expr pos:start="45:13" pos:end="47:47"><call pos:start="45:13" pos:end="47:47"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="47:47">(<argument pos:start="45:20" pos:end="45:27"><expr pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:20">h</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:27">avctx</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:41"><expr pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:44" pos:end="45:74"><expr pos:start="45:44" pos:end="45:74"><literal type="string" pos:start="45:44" pos:end="45:74">"SEI type %d truncated at %d\n"</literal></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">type</name></expr></argument>, <argument pos:start="47:26" pos:end="47:46"><expr pos:start="47:26" pos:end="47:46"><call pos:start="47:26" pos:end="47:46"><name pos:start="47:26" pos:end="47:38">get_bits_left</name><argument_list pos:start="47:39" pos:end="47:46">(<argument pos:start="47:40" pos:end="47:45"><expr pos:start="47:40" pos:end="47:45"><operator pos:start="47:40" pos:end="47:40">&amp;</operator><name pos:start="47:41" pos:end="47:45"><name pos:start="47:41" pos:end="47:41">h</name><operator pos:start="47:42" pos:end="47:43">-&gt;</operator><name pos:start="47:44" pos:end="47:45">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:39">return <expr pos:start="49:20" pos:end="49:38"><name pos:start="49:20" pos:end="49:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="55:9" pos:end="123:9">switch <condition pos:start="55:16" pos:end="55:21">(<expr pos:start="55:17" pos:end="55:20"><name pos:start="55:17" pos:end="55:20">type</name></expr>)</condition> <block pos:start="55:23" pos:end="123:9">{<block_content pos:start="57:9" pos:end="121:40">

        <case pos:start="57:9" pos:end="57:33">case <expr pos:start="57:14" pos:end="57:32"><name pos:start="57:14" pos:end="57:32">SEI_TYPE_PIC_TIMING</name></expr>:</case> <comment type="line" pos:start="57:35" pos:end="57:55">// Picture timing SEI</comment>

            <expr_stmt pos:start="59:13" pos:end="59:43"><expr pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:42"><name pos:start="59:19" pos:end="59:39">decode_picture_timing</name><argument_list pos:start="59:40" pos:end="59:42">(<argument pos:start="59:41" pos:end="59:41"><expr pos:start="59:41" pos:end="59:41"><name pos:start="59:41" pos:end="59:41">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="63:27"><if pos:start="61:13" pos:end="63:27">if <condition pos:start="61:16" pos:end="61:24">(<expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:19">ret</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:27"><block_content pos:start="63:17" pos:end="63:27">

                <return pos:start="63:17" pos:end="63:27">return <expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:45">case <expr pos:start="67:14" pos:end="67:44"><name pos:start="67:14" pos:end="67:44">SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:57"><expr pos:start="69:13" pos:end="69:56"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:56"><name pos:start="69:19" pos:end="69:47">decode_unregistered_user_data</name><argument_list pos:start="69:48" pos:end="69:56">(<argument pos:start="69:49" pos:end="69:49"><expr pos:start="69:49" pos:end="69:49"><name pos:start="69:49" pos:end="69:49">h</name></expr></argument>, <argument pos:start="69:52" pos:end="69:55"><expr pos:start="69:52" pos:end="69:55"><name pos:start="69:52" pos:end="69:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="73:27"><if pos:start="71:13" pos:end="73:27">if <condition pos:start="71:16" pos:end="71:24">(<expr pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:21">&lt;</operator> <literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:27"><block_content pos:start="73:17" pos:end="73:27">

                <return pos:start="73:17" pos:end="73:27">return <expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:37">case <expr pos:start="77:14" pos:end="77:36"><name pos:start="77:14" pos:end="77:36">SEI_TYPE_RECOVERY_POINT</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:43"><expr pos:start="79:13" pos:end="79:42"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:42"><name pos:start="79:19" pos:end="79:39">decode_recovery_point</name><argument_list pos:start="79:40" pos:end="79:42">(<argument pos:start="79:41" pos:end="79:41"><expr pos:start="79:41" pos:end="79:41"><name pos:start="79:41" pos:end="79:41">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="83:27"><if pos:start="81:13" pos:end="83:27">if <condition pos:start="81:16" pos:end="81:24">(<expr pos:start="81:17" pos:end="81:23"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">&lt;</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:27"><block_content pos:start="83:17" pos:end="83:27">

                <return pos:start="83:17" pos:end="83:27">return <expr pos:start="83:24" pos:end="83:26"><name pos:start="83:24" pos:end="83:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        <case pos:start="87:9" pos:end="87:39">case <expr pos:start="87:14" pos:end="87:38"><name pos:start="87:14" pos:end="87:38">SEI_TYPE_BUFFERING_PERIOD</name></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:45"><expr pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:44"><name pos:start="89:19" pos:end="89:41">decode_buffering_period</name><argument_list pos:start="89:42" pos:end="89:44">(<argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><name pos:start="89:43" pos:end="89:43">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="93:27"><if pos:start="91:13" pos:end="93:27">if <condition pos:start="91:16" pos:end="91:24">(<expr pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:19">ret</name> <operator pos:start="91:21" pos:end="91:21">&lt;</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:27"><block_content pos:start="93:17" pos:end="93:27">

                <return pos:start="93:17" pos:end="93:27">return <expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:36">case <expr pos:start="97:14" pos:end="97:35"><name pos:start="97:14" pos:end="97:35">SEI_TYPE_FRAME_PACKING</name></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:54"><expr pos:start="99:13" pos:end="99:53"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:53"><name pos:start="99:19" pos:end="99:50">decode_frame_packing_arrangement</name><argument_list pos:start="99:51" pos:end="99:53">(<argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><name pos:start="99:52" pos:end="99:52">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="103:27"><if pos:start="101:13" pos:end="103:27">if <condition pos:start="101:16" pos:end="101:24">(<expr pos:start="101:17" pos:end="101:23"><name pos:start="101:17" pos:end="101:19">ret</name> <operator pos:start="101:21" pos:end="101:21">&lt;</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:27"><block_content pos:start="103:17" pos:end="103:27">

                <return pos:start="103:17" pos:end="103:27">return <expr pos:start="103:24" pos:end="103:26"><name pos:start="103:24" pos:end="103:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:42">case <expr pos:start="107:14" pos:end="107:41"><name pos:start="107:14" pos:end="107:41">SEI_TYPE_DISPLAY_ORIENTATION</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:48"><expr pos:start="109:13" pos:end="109:47"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:47"><name pos:start="109:19" pos:end="109:44">decode_display_orientation</name><argument_list pos:start="109:45" pos:end="109:47">(<argument pos:start="109:46" pos:end="109:46"><expr pos:start="109:46" pos:end="109:46"><name pos:start="109:46" pos:end="109:46">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="113:27"><if pos:start="111:13" pos:end="113:27">if <condition pos:start="111:16" pos:end="111:24">(<expr pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:19">ret</name> <operator pos:start="111:21" pos:end="111:21">&lt;</operator> <literal type="number" pos:start="111:23" pos:end="111:23">0</literal></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:27"><block_content pos:start="113:17" pos:end="113:27">

                <return pos:start="113:17" pos:end="113:27">return <expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        <default pos:start="117:9" pos:end="117:16">default:</default>

            <expr_stmt pos:start="119:13" pos:end="119:74"><expr pos:start="119:13" pos:end="119:73"><call pos:start="119:13" pos:end="119:73"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="119:73">(<argument pos:start="119:20" pos:end="119:27"><expr pos:start="119:20" pos:end="119:27"><name pos:start="119:20" pos:end="119:27"><name pos:start="119:20" pos:end="119:20">h</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:27">avctx</name></name></expr></argument>, <argument pos:start="119:30" pos:end="119:41"><expr pos:start="119:30" pos:end="119:41"><name pos:start="119:30" pos:end="119:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="119:44" pos:end="119:66"><expr pos:start="119:44" pos:end="119:66"><literal type="string" pos:start="119:44" pos:end="119:66">"unknown SEI type %d\n"</literal></expr></argument>, <argument pos:start="119:69" pos:end="119:72"><expr pos:start="119:69" pos:end="119:72"><name pos:start="119:69" pos:end="119:72">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:40"><expr pos:start="121:13" pos:end="121:39"><call pos:start="121:13" pos:end="121:39"><name pos:start="121:13" pos:end="121:21">skip_bits</name><argument_list pos:start="121:22" pos:end="121:39">(<argument pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:28"><operator pos:start="121:23" pos:end="121:23">&amp;</operator><name pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:24">h</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:28">gb</name></name></expr></argument>, <argument pos:start="121:31" pos:end="121:38"><expr pos:start="121:31" pos:end="121:38"><literal type="number" pos:start="121:31" pos:end="121:31">8</literal> <operator pos:start="121:33" pos:end="121:33">*</operator> <name pos:start="121:35" pos:end="121:38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <comment type="line" pos:start="127:9" pos:end="127:32">// FIXME check bits here</comment>

        <expr_stmt pos:start="129:9" pos:end="129:31"><expr pos:start="129:9" pos:end="129:30"><call pos:start="129:9" pos:end="129:30"><name pos:start="129:9" pos:end="129:22">align_get_bits</name><argument_list pos:start="129:23" pos:end="129:30">(<argument pos:start="129:24" pos:end="129:29"><expr pos:start="129:24" pos:end="129:29"><operator pos:start="129:24" pos:end="129:24">&amp;</operator><name pos:start="129:25" pos:end="129:29"><name pos:start="129:25" pos:end="129:25">h</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
