<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18030.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:38">qemu_tcg_rr_cpu_thread_fn</name><parameter_list pos:start="1:39" pos:end="1:49">(<parameter pos:start="1:40" pos:end="1:48"><decl pos:start="1:40" pos:end="1:48"><type pos:start="1:40" pos:end="1:45"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">rcu_register_thread</name><argument_list pos:start="9:24" pos:end="9:25">()</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="14:5" pos:end="14:38"><expr pos:start="14:5" pos:end="14:37"><call pos:start="14:5" pos:end="14:37"><name pos:start="14:5" pos:end="14:24">qemu_thread_get_self</name><argument_list pos:start="14:25" pos:end="14:37">(<argument pos:start="14:26" pos:end="14:36"><expr pos:start="14:26" pos:end="14:36"><name pos:start="14:26" pos:end="14:36"><name pos:start="14:26" pos:end="14:28">cpu</name><operator pos:start="14:29" pos:end="14:30">-&gt;</operator><name pos:start="14:31" pos:end="14:36">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="18:5" pos:end="18:20"><name pos:start="18:5" pos:end="18:15">CPU_FOREACH</name><argument_list pos:start="18:16" pos:end="18:20">(<argument pos:start="18:17" pos:end="18:19">cpu</argument>)</argument_list></macro> <block pos:start="18:22" pos:end="26:5">{<block_content pos:start="20:9" pos:end="24:27">

        <expr_stmt pos:start="20:9" pos:end="20:46"><expr pos:start="20:9" pos:end="20:45"><name pos:start="20:9" pos:end="20:22"><name pos:start="20:9" pos:end="20:11">cpu</name><operator pos:start="20:12" pos:end="20:13">-&gt;</operator><name pos:start="20:14" pos:end="20:22">thread_id</name></name> <operator pos:start="20:24" pos:end="20:24">=</operator> <call pos:start="20:26" pos:end="20:45"><name pos:start="20:26" pos:end="20:43">qemu_get_thread_id</name><argument_list pos:start="20:44" pos:end="20:45">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="22:9" pos:end="22:28"><expr pos:start="22:9" pos:end="22:27"><name pos:start="22:9" pos:end="22:20"><name pos:start="22:9" pos:end="22:11">cpu</name><operator pos:start="22:12" pos:end="22:13">-&gt;</operator><name pos:start="22:14" pos:end="22:20">created</name></name> <operator pos:start="22:22" pos:end="22:22">=</operator> <name pos:start="22:24" pos:end="22:27">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="24:9" pos:end="24:27"><expr pos:start="24:9" pos:end="24:26"><name pos:start="24:9" pos:end="24:22"><name pos:start="24:9" pos:end="24:11">cpu</name><operator pos:start="24:12" pos:end="24:13">-&gt;</operator><name pos:start="24:14" pos:end="24:22">can_do_io</name></name> <operator pos:start="24:24" pos:end="24:24">=</operator> <literal type="number" pos:start="24:26" pos:end="24:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="28:5" pos:end="28:37"><expr pos:start="28:5" pos:end="28:36"><call pos:start="28:5" pos:end="28:36"><name pos:start="28:5" pos:end="28:20">qemu_cond_signal</name><argument_list pos:start="28:21" pos:end="28:36">(<argument pos:start="28:22" pos:end="28:35"><expr pos:start="28:22" pos:end="28:35"><operator pos:start="28:22" pos:end="28:22">&amp;</operator><name pos:start="28:23" pos:end="28:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="32:5" pos:end="32:55">/* wait for initial kick-off after machine start */</comment>

    <while pos:start="34:5" pos:end="50:5">while <condition pos:start="34:11" pos:end="34:30">(<expr pos:start="34:12" pos:end="34:29"><name pos:start="34:12" pos:end="34:29"><name pos:start="34:12" pos:end="34:20">first_cpu</name><operator pos:start="34:21" pos:end="34:22">-&gt;</operator><name pos:start="34:23" pos:end="34:29">stopped</name></name></expr>)</condition> <block pos:start="34:32" pos:end="50:5">{<block_content pos:start="36:9" pos:end="48:9">

        <expr_stmt pos:start="36:9" pos:end="36:65"><expr pos:start="36:9" pos:end="36:64"><call pos:start="36:9" pos:end="36:64"><name pos:start="36:9" pos:end="36:22">qemu_cond_wait</name><argument_list pos:start="36:23" pos:end="36:64">(<argument pos:start="36:24" pos:end="36:43"><expr pos:start="36:24" pos:end="36:43"><name pos:start="36:24" pos:end="36:43"><name pos:start="36:24" pos:end="36:32">first_cpu</name><operator pos:start="36:33" pos:end="36:34">-&gt;</operator><name pos:start="36:35" pos:end="36:43">halt_cond</name></name></expr></argument>, <argument pos:start="36:46" pos:end="36:63"><expr pos:start="36:46" pos:end="36:63"><operator pos:start="36:46" pos:end="36:46">&amp;</operator><name pos:start="36:47" pos:end="36:63">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="40:9" pos:end="40:38">/* process any pending work */</comment>

        <macro pos:start="42:9" pos:end="42:24"><name pos:start="42:9" pos:end="42:19">CPU_FOREACH</name><argument_list pos:start="42:20" pos:end="42:24">(<argument pos:start="42:21" pos:end="42:23">cpu</argument>)</argument_list></macro> <block pos:start="42:26" pos:end="48:9">{<block_content pos:start="44:13" pos:end="46:43">

            <expr_stmt pos:start="44:13" pos:end="44:30"><expr pos:start="44:13" pos:end="44:29"><name pos:start="44:13" pos:end="44:23">current_cpu</name> <operator pos:start="44:25" pos:end="44:25">=</operator> <name pos:start="44:27" pos:end="44:29">cpu</name></expr>;</expr_stmt>

            <expr_stmt pos:start="46:13" pos:end="46:43"><expr pos:start="46:13" pos:end="46:42"><call pos:start="46:13" pos:end="46:42"><name pos:start="46:13" pos:end="46:37">qemu_wait_io_event_common</name><argument_list pos:start="46:38" pos:end="46:42">(<argument pos:start="46:39" pos:end="46:41"><expr pos:start="46:39" pos:end="46:41"><name pos:start="46:39" pos:end="46:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></while>



    <expr_stmt pos:start="54:5" pos:end="54:27"><expr pos:start="54:5" pos:end="54:26"><call pos:start="54:5" pos:end="54:26"><name pos:start="54:5" pos:end="54:24">start_tcg_kick_timer</name><argument_list pos:start="54:25" pos:end="54:26">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="58:5" pos:end="58:20"><expr pos:start="58:5" pos:end="58:19"><name pos:start="58:5" pos:end="58:7">cpu</name> <operator pos:start="58:9" pos:end="58:9">=</operator> <name pos:start="58:11" pos:end="58:19">first_cpu</name></expr>;</expr_stmt>



    <comment type="block" pos:start="62:5" pos:end="62:34">/* process any pending work */</comment>

    <expr_stmt pos:start="64:5" pos:end="64:26"><expr pos:start="64:5" pos:end="64:25"><name pos:start="64:5" pos:end="64:21"><name pos:start="64:5" pos:end="64:7">cpu</name><operator pos:start="64:8" pos:end="64:9">-&gt;</operator><name pos:start="64:10" pos:end="64:21">exit_request</name></name> <operator pos:start="64:23" pos:end="64:23">=</operator> <literal type="number" pos:start="64:25" pos:end="64:25">1</literal></expr>;</expr_stmt>



    <while pos:start="68:5" pos:end="159:5">while <condition pos:start="68:11" pos:end="68:13">(<expr pos:start="68:12" pos:end="68:12"><literal type="number" pos:start="68:12" pos:end="68:12">1</literal></expr>)</condition> <block pos:start="68:15" pos:end="159:5">{<block_content pos:start="72:9" pos:end="157:35">

        <comment type="block" pos:start="70:9" pos:end="70:59">/* Account partial waits to QEMU_CLOCK_VIRTUAL.  */</comment>

        <expr_stmt pos:start="72:9" pos:end="72:34"><expr pos:start="72:9" pos:end="72:33"><call pos:start="72:9" pos:end="72:33"><name pos:start="72:9" pos:end="72:31">qemu_account_warp_timer</name><argument_list pos:start="72:32" pos:end="72:33">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="76:9" pos:end="80:9"><if pos:start="76:9" pos:end="80:9">if <condition pos:start="76:12" pos:end="76:17">(<expr pos:start="76:13" pos:end="76:16"><operator pos:start="76:13" pos:end="76:13">!</operator><name pos:start="76:14" pos:end="76:16">cpu</name></expr>)</condition> <block pos:start="76:19" pos:end="80:9">{<block_content pos:start="78:13" pos:end="78:28">

            <expr_stmt pos:start="78:13" pos:end="78:28"><expr pos:start="78:13" pos:end="78:27"><name pos:start="78:13" pos:end="78:15">cpu</name> <operator pos:start="78:17" pos:end="78:17">=</operator> <name pos:start="78:19" pos:end="78:27">first_cpu</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <while pos:start="84:9" pos:end="133:9">while <condition pos:start="84:15" pos:end="84:68">(<expr pos:start="84:16" pos:end="84:67"><name pos:start="84:16" pos:end="84:18">cpu</name> <operator pos:start="84:20" pos:end="84:21">&amp;&amp;</operator> <operator pos:start="84:23" pos:end="84:23">!</operator><name pos:start="84:24" pos:end="84:45"><name pos:start="84:24" pos:end="84:26">cpu</name><operator pos:start="84:27" pos:end="84:28">-&gt;</operator><name pos:start="84:29" pos:end="84:45">queued_work_first</name></name> <operator pos:start="84:47" pos:end="84:48">&amp;&amp;</operator> <operator pos:start="84:50" pos:end="84:50">!</operator><name pos:start="84:51" pos:end="84:67"><name pos:start="84:51" pos:end="84:53">cpu</name><operator pos:start="84:54" pos:end="84:55">-&gt;</operator><name pos:start="84:56" pos:end="84:67">exit_request</name></name></expr>)</condition> <block pos:start="84:70" pos:end="133:9">{<block_content pos:start="88:13" pos:end="131:32">



            <expr_stmt pos:start="88:13" pos:end="88:52"><expr pos:start="88:13" pos:end="88:51"><call pos:start="88:13" pos:end="88:51"><name pos:start="88:13" pos:end="88:25">atomic_mb_set</name><argument_list pos:start="88:26" pos:end="88:51">(<argument pos:start="88:27" pos:end="88:45"><expr pos:start="88:27" pos:end="88:45"><operator pos:start="88:27" pos:end="88:27">&amp;</operator><name pos:start="88:28" pos:end="88:45">tcg_current_rr_cpu</name></expr></argument>, <argument pos:start="88:48" pos:end="88:50"><expr pos:start="88:48" pos:end="88:50"><name pos:start="88:48" pos:end="88:50">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="90:13" pos:end="90:30"><expr pos:start="90:13" pos:end="90:29"><name pos:start="90:13" pos:end="90:23">current_cpu</name> <operator pos:start="90:25" pos:end="90:25">=</operator> <name pos:start="90:27" pos:end="90:29">cpu</name></expr>;</expr_stmt>



            <expr_stmt pos:start="94:13" pos:end="96:78"><expr pos:start="94:13" pos:end="96:77"><call pos:start="94:13" pos:end="96:77"><name pos:start="94:13" pos:end="94:29">qemu_clock_enable</name><argument_list pos:start="94:30" pos:end="96:77">(<argument pos:start="94:31" pos:end="94:48"><expr pos:start="94:31" pos:end="94:48"><name pos:start="94:31" pos:end="94:48">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                              <argument pos:start="96:31" pos:end="96:76"><expr pos:start="96:31" pos:end="96:76"><operator pos:start="96:31" pos:end="96:31">(</operator><name pos:start="96:32" pos:end="96:54"><name pos:start="96:32" pos:end="96:34">cpu</name><operator pos:start="96:35" pos:end="96:36">-&gt;</operator><name pos:start="96:37" pos:end="96:54">singlestep_enabled</name></name> <operator pos:start="96:56" pos:end="96:56">&amp;</operator> <name pos:start="96:58" pos:end="96:70">SSTEP_NOTIMER</name><operator pos:start="96:71" pos:end="96:71">)</operator> <operator pos:start="96:73" pos:end="96:74">==</operator> <literal type="number" pos:start="96:76" pos:end="96:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="100:13" pos:end="127:13"><if pos:start="100:13" pos:end="118:13">if <condition pos:start="100:16" pos:end="100:33">(<expr pos:start="100:17" pos:end="100:32"><call pos:start="100:17" pos:end="100:32"><name pos:start="100:17" pos:end="100:27">cpu_can_run</name><argument_list pos:start="100:28" pos:end="100:32">(<argument pos:start="100:29" pos:end="100:31"><expr pos:start="100:29" pos:end="100:31"><name pos:start="100:29" pos:end="100:31">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="100:35" pos:end="118:13">{<block_content pos:start="102:17" pos:end="116:17">

                <decl_stmt pos:start="102:17" pos:end="102:22"><decl pos:start="102:17" pos:end="102:21"><type pos:start="102:17" pos:end="102:19"><name pos:start="102:17" pos:end="102:19">int</name></type> <name pos:start="102:21" pos:end="102:21">r</name></decl>;</decl_stmt>

                <expr_stmt pos:start="104:17" pos:end="104:38"><expr pos:start="104:17" pos:end="104:37"><name pos:start="104:17" pos:end="104:17">r</name> <operator pos:start="104:19" pos:end="104:19">=</operator> <call pos:start="104:21" pos:end="104:37"><name pos:start="104:21" pos:end="104:32">tcg_cpu_exec</name><argument_list pos:start="104:33" pos:end="104:37">(<argument pos:start="104:34" pos:end="104:36"><expr pos:start="104:34" pos:end="104:36"><name pos:start="104:34" pos:end="104:36">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="106:17" pos:end="116:17"><if pos:start="106:17" pos:end="116:17">if <condition pos:start="106:20" pos:end="106:36">(<expr pos:start="106:21" pos:end="106:35"><name pos:start="106:21" pos:end="106:21">r</name> <operator pos:start="106:23" pos:end="106:24">==</operator> <name pos:start="106:26" pos:end="106:35">EXCP_DEBUG</name></expr>)</condition> <block pos:start="106:38" pos:end="116:17">{<block_content pos:start="108:21" pos:end="108:48">

                    <expr_stmt pos:start="108:21" pos:end="108:48"><expr pos:start="108:21" pos:end="108:47"><call pos:start="108:21" pos:end="108:47"><name pos:start="108:21" pos:end="108:42">cpu_handle_guest_debug</name><argument_list pos:start="108:43" pos:end="108:47">(<argument pos:start="108:44" pos:end="108:46"><expr pos:start="108:44" pos:end="108:46"><name pos:start="108:44" pos:end="108:46">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="118:15" pos:end="127:13">else if <condition pos:start="118:23" pos:end="118:33">(<expr pos:start="118:24" pos:end="118:32"><name pos:start="118:24" pos:end="118:32"><name pos:start="118:24" pos:end="118:26">cpu</name><operator pos:start="118:27" pos:end="118:28">-&gt;</operator><name pos:start="118:29" pos:end="118:32">stop</name></name></expr>)</condition> <block pos:start="118:35" pos:end="127:13">{<block_content pos:start="120:17" pos:end="124:17">

                <if_stmt pos:start="120:17" pos:end="124:17"><if pos:start="120:17" pos:end="124:17">if <condition pos:start="120:20" pos:end="120:32">(<expr pos:start="120:21" pos:end="120:31"><name pos:start="120:21" pos:end="120:31"><name pos:start="120:21" pos:end="120:23">cpu</name><operator pos:start="120:24" pos:end="120:25">-&gt;</operator><name pos:start="120:26" pos:end="120:31">unplug</name></name></expr>)</condition> <block pos:start="120:34" pos:end="124:17">{<block_content pos:start="122:21" pos:end="122:40">

                    <expr_stmt pos:start="122:21" pos:end="122:40"><expr pos:start="122:21" pos:end="122:39"><name pos:start="122:21" pos:end="122:23">cpu</name> <operator pos:start="122:25" pos:end="122:25">=</operator> <call pos:start="122:27" pos:end="122:39"><name pos:start="122:27" pos:end="122:34">CPU_NEXT</name><argument_list pos:start="122:35" pos:end="122:39">(<argument pos:start="122:36" pos:end="122:38"><expr pos:start="122:36" pos:end="122:38"><name pos:start="122:36" pos:end="122:38">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>


            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:32"><expr pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:15">cpu</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="131:31"><name pos:start="131:19" pos:end="131:26">CPU_NEXT</name><argument_list pos:start="131:27" pos:end="131:31">(<argument pos:start="131:28" pos:end="131:30"><expr pos:start="131:28" pos:end="131:30"><name pos:start="131:28" pos:end="131:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while> <comment type="block" pos:start="133:11" pos:end="133:51">/* while (cpu &amp;&amp; !cpu-&gt;exit_request).. */</comment>



        <comment type="block" pos:start="137:9" pos:end="137:77">/* Does not need atomic_mb_set because a spurious wakeup is okay.  */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><call pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:18">atomic_set</name><argument_list pos:start="139:19" pos:end="139:45">(<argument pos:start="139:20" pos:end="139:38"><expr pos:start="139:20" pos:end="139:38"><operator pos:start="139:20" pos:end="139:20">&amp;</operator><name pos:start="139:21" pos:end="139:38">tcg_current_rr_cpu</name></expr></argument>, <argument pos:start="139:41" pos:end="139:44"><expr pos:start="139:41" pos:end="139:44"><name pos:start="139:41" pos:end="139:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:37">(<expr pos:start="143:13" pos:end="143:36"><name pos:start="143:13" pos:end="143:15">cpu</name> <operator pos:start="143:17" pos:end="143:18">&amp;&amp;</operator> <name pos:start="143:20" pos:end="143:36"><name pos:start="143:20" pos:end="143:22">cpu</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:36">exit_request</name></name></expr>)</condition> <block pos:start="143:39" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:49">

            <expr_stmt pos:start="145:13" pos:end="145:49"><expr pos:start="145:13" pos:end="145:48"><call pos:start="145:13" pos:end="145:48"><name pos:start="145:13" pos:end="145:25">atomic_mb_set</name><argument_list pos:start="145:26" pos:end="145:48">(<argument pos:start="145:27" pos:end="145:44"><expr pos:start="145:27" pos:end="145:44"><operator pos:start="145:27" pos:end="145:27">&amp;</operator><name pos:start="145:28" pos:end="145:44"><name pos:start="145:28" pos:end="145:30">cpu</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:44">exit_request</name></name></expr></argument>, <argument pos:start="145:47" pos:end="145:47"><expr pos:start="145:47" pos:end="145:47"><literal type="number" pos:start="145:47" pos:end="145:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:33"><expr pos:start="151:9" pos:end="151:32"><call pos:start="151:9" pos:end="151:32"><name pos:start="151:9" pos:end="151:30">handle_icount_deadline</name><argument_list pos:start="151:31" pos:end="151:32">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:64"><expr pos:start="155:9" pos:end="155:63"><call pos:start="155:9" pos:end="155:63"><name pos:start="155:9" pos:end="155:30">qemu_tcg_wait_io_event</name><argument_list pos:start="155:31" pos:end="155:63">(<argument pos:start="155:32" pos:end="155:62"><expr pos:start="155:32" pos:end="155:62"><ternary pos:start="155:32" pos:end="155:62"><condition pos:start="155:32" pos:end="155:36"><expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:34">cpu</name></expr> ?</condition><then pos:start="155:38" pos:end="155:40"> <expr pos:start="155:38" pos:end="155:40"><name pos:start="155:38" pos:end="155:40">cpu</name></expr> </then><else pos:start="155:42" pos:end="155:62">: <expr pos:start="155:44" pos:end="155:62"><call pos:start="155:44" pos:end="155:62"><name pos:start="155:44" pos:end="155:55">QTAILQ_FIRST</name><argument_list pos:start="155:56" pos:end="155:62">(<argument pos:start="155:57" pos:end="155:61"><expr pos:start="155:57" pos:end="155:61"><operator pos:start="155:57" pos:end="155:57">&amp;</operator><name pos:start="155:58" pos:end="155:61">cpus</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:35"><expr pos:start="157:9" pos:end="157:34"><call pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:32">deal_with_unplugged_cpus</name><argument_list pos:start="157:33" pos:end="157:34">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="163:5" pos:end="163:16">return <expr pos:start="163:12" pos:end="163:15"><name pos:start="163:12" pos:end="163:15">NULL</name></expr>;</return>

</block_content>}</block></function></unit>
