<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12627.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">hmp_nbd_server_start</name><parameter_list pos:start="1:26" pos:end="1:59">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:33">Monitor</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">mon</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:51">QDict</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:38">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">uri</name> <init pos:start="5:21" pos:end="5:49">= <expr pos:start="5:23" pos:end="5:49"><call pos:start="5:23" pos:end="5:49"><name pos:start="5:23" pos:end="5:35">qdict_get_str</name><argument_list pos:start="5:36" pos:end="5:49">(<argument pos:start="5:37" pos:end="5:41"><expr pos:start="5:37" pos:end="5:41"><name pos:start="5:37" pos:end="5:41">qdict</name></expr></argument>, <argument pos:start="5:44" pos:end="5:48"><expr pos:start="5:44" pos:end="5:48"><literal type="string" pos:start="5:44" pos:end="5:48">"uri"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:65"><decl pos:start="7:5" pos:end="7:64"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:17">writable</name> <init pos:start="7:19" pos:end="7:64">= <expr pos:start="7:21" pos:end="7:64"><call pos:start="7:21" pos:end="7:64"><name pos:start="7:21" pos:end="7:38">qdict_get_try_bool</name><argument_list pos:start="7:39" pos:end="7:64">(<argument pos:start="7:40" pos:end="7:44"><expr pos:start="7:40" pos:end="7:44"><name pos:start="7:40" pos:end="7:44">qdict</name></expr></argument>, <argument pos:start="7:47" pos:end="7:56"><expr pos:start="7:47" pos:end="7:56"><literal type="string" pos:start="7:47" pos:end="7:56">"writable"</literal></expr></argument>, <argument pos:start="7:59" pos:end="7:63"><expr pos:start="7:59" pos:end="7:63"><name pos:start="7:59" pos:end="7:63">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:12">all</name> <init pos:start="9:14" pos:end="9:54">= <expr pos:start="9:16" pos:end="9:54"><call pos:start="9:16" pos:end="9:54"><name pos:start="9:16" pos:end="9:33">qdict_get_try_bool</name><argument_list pos:start="9:34" pos:end="9:54">(<argument pos:start="9:35" pos:end="9:39"><expr pos:start="9:35" pos:end="9:39"><name pos:start="9:35" pos:end="9:39">qdict</name></expr></argument>, <argument pos:start="9:42" pos:end="9:46"><expr pos:start="9:42" pos:end="9:46"><literal type="string" pos:start="9:42" pos:end="9:46">"all"</literal></expr></argument>, <argument pos:start="9:49" pos:end="9:53"><expr pos:start="9:49" pos:end="9:53"><name pos:start="9:49" pos:end="9:53">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">BlockInfoList</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:29">block_list</name></decl>, <decl pos:start="13:32" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:19"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:36">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:23">SocketAddressLegacy</name> <modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:29">addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:25">(<expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:16">writable</name> <operator pos:start="19:18" pos:end="19:19">&amp;&amp;</operator> <operator pos:start="19:21" pos:end="19:21">!</operator><name pos:start="19:22" pos:end="19:24">all</name></expr>)</condition> <block pos:start="19:27" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><call pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:64">(<argument pos:start="21:20" pos:end="21:29"><expr pos:start="21:20" pos:end="21:29"><operator pos:start="21:20" pos:end="21:20">&amp;</operator><name pos:start="21:21" pos:end="21:29">local_err</name></expr></argument>, <argument pos:start="21:32" pos:end="21:63"><expr pos:start="21:32" pos:end="21:63"><literal type="string" pos:start="21:32" pos:end="21:63">"-w only valid together with -a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="23:9" pos:end="23:18">goto <name pos:start="23:14" pos:end="23:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:68">/* First check if the address is valid and start the server.  */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:8">addr</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:40"><name pos:start="31:12" pos:end="31:23">socket_parse</name><argument_list pos:start="31:24" pos:end="31:40">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">uri</name></expr></argument>, <argument pos:start="31:30" pos:end="31:39"><expr pos:start="31:30" pos:end="31:39"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">local_err</name> <operator pos:start="33:19" pos:end="33:20">!=</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:56"><expr pos:start="41:5" pos:end="41:55"><call pos:start="41:5" pos:end="41:55"><name pos:start="41:5" pos:end="41:24">qmp_nbd_server_start</name><argument_list pos:start="41:25" pos:end="41:55">(<argument pos:start="41:26" pos:end="41:29"><expr pos:start="41:26" pos:end="41:29"><name pos:start="41:26" pos:end="41:29">addr</name></expr></argument>, <argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:36">false</name></expr></argument>, <argument pos:start="41:39" pos:end="41:42"><expr pos:start="41:39" pos:end="41:42"><name pos:start="41:39" pos:end="41:42">NULL</name></expr></argument>, <argument pos:start="41:45" pos:end="41:54"><expr pos:start="41:45" pos:end="41:54"><operator pos:start="41:45" pos:end="41:45">&amp;</operator><name pos:start="41:46" pos:end="41:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><call pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:33">qapi_free_SocketAddressLegacy</name><argument_list pos:start="43:34" pos:end="43:39">(<argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:26">(<expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:17">local_err</name> <operator pos:start="45:19" pos:end="45:20">!=</operator> <name pos:start="45:22" pos:end="45:25">NULL</name></expr>)</condition> <block pos:start="45:28" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:18">

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">all</name></expr>)</condition> <block pos:start="53:15" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:15">

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="65:7">/* Then try adding all block devices.  If one fails, close all and

     * exit.

     */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:39"><expr pos:start="67:5" pos:end="67:38"><name pos:start="67:5" pos:end="67:14">block_list</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:38"><name pos:start="67:18" pos:end="67:32">qmp_query_block</name><argument_list pos:start="67:33" pos:end="67:38">(<argument pos:start="67:34" pos:end="67:37"><expr pos:start="67:34" pos:end="67:37"><name pos:start="67:34" pos:end="67:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="71:5" pos:end="93:5">for <control pos:start="71:9" pos:end="71:52">(<init pos:start="71:10" pos:end="71:27"><expr pos:start="71:10" pos:end="71:26"><name pos:start="71:10" pos:end="71:13">info</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:26">block_list</name></expr>;</init> <condition pos:start="71:29" pos:end="71:33"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">info</name></expr>;</condition> <incr pos:start="71:35" pos:end="71:51"><expr pos:start="71:35" pos:end="71:51"><name pos:start="71:35" pos:end="71:38">info</name> <operator pos:start="71:40" pos:end="71:40">=</operator> <name pos:start="71:42" pos:end="71:51"><name pos:start="71:42" pos:end="71:45">info</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:51">next</name></name></expr></incr>)</control> <block pos:start="71:54" pos:end="93:5">{<block_content pos:start="73:9" pos:end="91:9">

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:39">(<expr pos:start="73:13" pos:end="73:38"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:38"><name pos:start="73:14" pos:end="73:17">info</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:24">value</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:38">has_inserted</name></name></expr>)</condition> <block pos:start="73:41" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:21">

            <continue pos:start="75:13" pos:end="75:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:76"><expr pos:start="81:9" pos:end="81:75"><call pos:start="81:9" pos:end="81:75"><name pos:start="81:9" pos:end="81:26">qmp_nbd_server_add</name><argument_list pos:start="81:27" pos:end="81:75">(<argument pos:start="81:28" pos:end="81:46"><expr pos:start="81:28" pos:end="81:46"><name pos:start="81:28" pos:end="81:46"><name pos:start="81:28" pos:end="81:31">info</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:38">value</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:46">device</name></name></expr></argument>, <argument pos:start="81:49" pos:end="81:52"><expr pos:start="81:49" pos:end="81:52"><name pos:start="81:49" pos:end="81:52">true</name></expr></argument>, <argument pos:start="81:55" pos:end="81:62"><expr pos:start="81:55" pos:end="81:62"><name pos:start="81:55" pos:end="81:62">writable</name></expr></argument>, <argument pos:start="81:65" pos:end="81:74"><expr pos:start="81:65" pos:end="81:74"><operator pos:start="81:65" pos:end="81:65">&amp;</operator><name pos:start="81:66" pos:end="81:74">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:30">(<expr pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:21">local_err</name> <operator pos:start="85:23" pos:end="85:24">!=</operator> <name pos:start="85:26" pos:end="85:29">NULL</name></expr>)</condition> <block pos:start="85:32" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:18">

            <expr_stmt pos:start="87:13" pos:end="87:38"><expr pos:start="87:13" pos:end="87:37"><call pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:31">qmp_nbd_server_stop</name><argument_list pos:start="87:32" pos:end="87:37">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="97:40"><expr pos:start="97:5" pos:end="97:39"><call pos:start="97:5" pos:end="97:39"><name pos:start="97:5" pos:end="97:27">qapi_free_BlockInfoList</name><argument_list pos:start="97:28" pos:end="97:39">(<argument pos:start="97:29" pos:end="97:38"><expr pos:start="97:29" pos:end="97:38"><name pos:start="97:29" pos:end="97:38">block_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="101:1" pos:end="101:5"><name pos:start="101:1" pos:end="101:4">exit</name>:</label>

    <expr_stmt pos:start="103:5" pos:end="103:38"><expr pos:start="103:5" pos:end="103:37"><call pos:start="103:5" pos:end="103:37"><name pos:start="103:5" pos:end="103:20">hmp_handle_error</name><argument_list pos:start="103:21" pos:end="103:37">(<argument pos:start="103:22" pos:end="103:24"><expr pos:start="103:22" pos:end="103:24"><name pos:start="103:22" pos:end="103:24">mon</name></expr></argument>, <argument pos:start="103:27" pos:end="103:36"><expr pos:start="103:27" pos:end="103:36"><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:36">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
