<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4763.c" pos:tabs="8"><function pos:start="1:1" pos:end="331:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:32">hScale</name>)<parameter_list pos:start="1:34" pos:end="3:87">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:41">int16_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dst</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">dstW</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">src</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:80"><decl pos:start="1:73" pos:end="1:80"><type pos:start="1:73" pos:end="1:80"><name pos:start="1:73" pos:end="1:75">int</name></type> <name pos:start="1:77" pos:end="1:80">srcW</name></decl></parameter>, <parameter pos:start="1:83" pos:end="1:90"><decl pos:start="1:83" pos:end="1:90"><type pos:start="1:83" pos:end="1:90"><name pos:start="1:83" pos:end="1:85">int</name></type> <name pos:start="1:87" pos:end="1:90">xInc</name></decl></parameter>,

				  <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:41">int16_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:49">filter</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:69"><decl pos:start="3:52" pos:end="3:69"><type pos:start="3:52" pos:end="3:69"><name pos:start="3:52" pos:end="3:58">int16_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:69">filterPos</name></decl></parameter>, <parameter pos:start="3:72" pos:end="3:86"><decl pos:start="3:72" pos:end="3:86"><type pos:start="3:72" pos:end="3:86"><name pos:start="3:72" pos:end="3:75">long</name></type> <name pos:start="3:77" pos:end="3:86">filterSize</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="331:1">{<block_content pos:start="9:9" pos:end="330:0">

<cpp:ifdef pos:start="7:1" pos:end="7:15">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:15">HAVE_MMX</name></cpp:ifdef>

	<expr_stmt pos:start="9:9" pos:end="9:52"><expr pos:start="9:9" pos:end="9:51"><call pos:start="9:9" pos:end="9:51"><name pos:start="9:9" pos:end="9:14">assert</name><argument_list pos:start="9:15" pos:end="9:51">(<argument pos:start="9:16" pos:end="9:50"><expr pos:start="9:16" pos:end="9:50"><name pos:start="9:16" pos:end="9:25">filterSize</name> <operator pos:start="9:27" pos:end="9:27">%</operator> <literal type="number" pos:start="9:29" pos:end="9:29">4</literal> <operator pos:start="9:31" pos:end="9:32">==</operator> <literal type="number" pos:start="9:34" pos:end="9:34">0</literal> <operator pos:start="9:36" pos:end="9:37">&amp;&amp;</operator> <name pos:start="9:39" pos:end="9:48">filterSize</name><operator pos:start="9:49" pos:end="9:49">&gt;</operator><literal type="number" pos:start="9:50" pos:end="9:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="11:9" pos:end="290:0"><if pos:start="11:9" pos:end="85:9">if<condition pos:start="11:11" pos:end="11:25">(<expr pos:start="11:12" pos:end="11:24"><name pos:start="11:12" pos:end="11:21">filterSize</name><operator pos:start="11:22" pos:end="11:23">==</operator><literal type="number" pos:start="11:24" pos:end="11:24">4</literal></expr>)</condition> <comment type="line" pos:start="11:27" pos:end="11:79">// allways true for upscaling, sometimes for down too</comment>

	<block pos:start="13:9" pos:end="85:9">{<block_content pos:start="15:17" pos:end="83:18">

		<decl_stmt pos:start="15:17" pos:end="15:38"><decl pos:start="15:17" pos:end="15:37"><type pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">long</name></type> <name pos:start="15:22" pos:end="15:28">counter</name><init pos:start="15:29" pos:end="15:37">= <expr pos:start="15:31" pos:end="15:37"><operator pos:start="15:31" pos:end="15:31">-</operator><literal type="number" pos:start="15:32" pos:end="15:32">2</literal><operator pos:start="15:33" pos:end="15:33">*</operator><name pos:start="15:34" pos:end="15:37">dstW</name></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="17:17" pos:end="17:35"><expr pos:start="17:17" pos:end="17:34"><name pos:start="17:17" pos:end="17:22">filter</name><operator pos:start="17:23" pos:end="17:24">-=</operator> <name pos:start="17:26" pos:end="17:32">counter</name><operator pos:start="17:33" pos:end="17:33">*</operator><literal type="number" pos:start="17:34" pos:end="17:34">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="19:17" pos:end="19:38"><expr pos:start="19:17" pos:end="19:37"><name pos:start="19:17" pos:end="19:25">filterPos</name><operator pos:start="19:26" pos:end="19:27">-=</operator> <name pos:start="19:29" pos:end="19:35">counter</name><operator pos:start="19:36" pos:end="19:36">/</operator><literal type="number" pos:start="19:37" pos:end="19:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="21:17" pos:end="21:32"><expr pos:start="21:17" pos:end="21:31"><name pos:start="21:17" pos:end="21:19">dst</name><operator pos:start="21:20" pos:end="21:21">-=</operator> <name pos:start="21:23" pos:end="21:29">counter</name><operator pos:start="21:30" pos:end="21:30">/</operator><literal type="number" pos:start="21:31" pos:end="21:31">2</literal></expr>;</expr_stmt>

		<asm pos:start="23:17" pos:end="83:18">asm <specifier pos:start="23:21" pos:end="23:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"movq "MANGLE(w02)", %%mm6	\n\t"

			"push %%"REG_BP"		\n\t" <comment type="line" pos:start="29:63" pos:end="29:87">// we use 7 regs here ...</comment>

			"mov %%"REG_a", %%"REG_BP"	\n\t"

			ASMALIGN16

			"1:				\n\t"

			"movzwl (%2, %%"REG_BP"), %%eax	\n\t"

			"movzwl 2(%2, %%"REG_BP"), %%ebx\n\t"

			"movq (%1, %%"REG_BP", 4), %%mm1\n\t"

			"movq 8(%1, %%"REG_BP", 4), %%mm3\n\t"

			"movd (%3, %%"REG_a"), %%mm0	\n\t"

			"movd (%3, %%"REG_b"), %%mm2	\n\t"

			"punpcklbw %%mm7, %%mm0		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm0		\n\t"

			"pmaddwd %%mm2, %%mm3		\n\t"

			"psrad $8, %%mm0		\n\t"

			"psrad $8, %%mm3		\n\t"

			"packssdw %%mm3, %%mm0		\n\t"

			"pmaddwd %%mm6, %%mm0		\n\t"

			"packssdw %%mm0, %%mm0		\n\t"

			"movd %%mm0, (%4, %%"REG_BP")	\n\t"

			"add $4, %%"REG_BP"		\n\t"

			" jnc 1b			\n\t"



			"pop %%"REG_BP"			\n\t"

			: "+a" (counter)

			: "c" (filter), "d" (filterPos), "S" (src), "D" (dst)

			: "%"REG_b

		);</asm>

	</block_content>}</block></if>

	<if type="elseif" pos:start="87:9" pos:end="185:9">else if<condition pos:start="87:16" pos:end="87:30">(<expr pos:start="87:17" pos:end="87:29"><name pos:start="87:17" pos:end="87:26">filterSize</name><operator pos:start="87:27" pos:end="87:28">==</operator><literal type="number" pos:start="87:29" pos:end="87:29">8</literal></expr>)</condition>

	<block pos:start="89:9" pos:end="185:9">{<block_content pos:start="91:17" pos:end="183:18">

		<decl_stmt pos:start="91:17" pos:end="91:38"><decl pos:start="91:17" pos:end="91:37"><type pos:start="91:17" pos:end="91:20"><name pos:start="91:17" pos:end="91:20">long</name></type> <name pos:start="91:22" pos:end="91:28">counter</name><init pos:start="91:29" pos:end="91:37">= <expr pos:start="91:31" pos:end="91:37"><operator pos:start="91:31" pos:end="91:31">-</operator><literal type="number" pos:start="91:32" pos:end="91:32">2</literal><operator pos:start="91:33" pos:end="91:33">*</operator><name pos:start="91:34" pos:end="91:37">dstW</name></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="93:17" pos:end="93:35"><expr pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:22">filter</name><operator pos:start="93:23" pos:end="93:24">-=</operator> <name pos:start="93:26" pos:end="93:32">counter</name><operator pos:start="93:33" pos:end="93:33">*</operator><literal type="number" pos:start="93:34" pos:end="93:34">4</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="95:17" pos:end="95:38"><expr pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:25">filterPos</name><operator pos:start="95:26" pos:end="95:27">-=</operator> <name pos:start="95:29" pos:end="95:35">counter</name><operator pos:start="95:36" pos:end="95:36">/</operator><literal type="number" pos:start="95:37" pos:end="95:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="97:17" pos:end="97:32"><expr pos:start="97:17" pos:end="97:31"><name pos:start="97:17" pos:end="97:19">dst</name><operator pos:start="97:20" pos:end="97:21">-=</operator> <name pos:start="97:23" pos:end="97:29">counter</name><operator pos:start="97:30" pos:end="97:30">/</operator><literal type="number" pos:start="97:31" pos:end="97:31">2</literal></expr>;</expr_stmt>

		<asm pos:start="99:17" pos:end="183:18">asm <specifier pos:start="99:21" pos:end="99:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"movq "MANGLE(w02)", %%mm6	\n\t"

			"push %%"REG_BP"		\n\t" <comment type="line" pos:start="105:63" pos:end="105:87">// we use 7 regs here ...</comment>

			"mov %%"REG_a", %%"REG_BP"	\n\t"

			ASMALIGN16

			"1:				\n\t"

			"movzwl (%2, %%"REG_BP"), %%eax	\n\t"

			"movzwl 2(%2, %%"REG_BP"), %%ebx\n\t"

			"movq (%1, %%"REG_BP", 8), %%mm1\n\t"

			"movq 16(%1, %%"REG_BP", 8), %%mm3\n\t"

			"movd (%3, %%"REG_a"), %%mm0	\n\t"

			"movd (%3, %%"REG_b"), %%mm2	\n\t"

			"punpcklbw %%mm7, %%mm0		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm0		\n\t"

			"pmaddwd %%mm2, %%mm3		\n\t"



			"movq 8(%1, %%"REG_BP", 8), %%mm1\n\t"

			"movq 24(%1, %%"REG_BP", 8), %%mm5\n\t"

			"movd 4(%3, %%"REG_a"), %%mm4	\n\t"

			"movd 4(%3, %%"REG_b"), %%mm2	\n\t"

			"punpcklbw %%mm7, %%mm4		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm4		\n\t"

			"pmaddwd %%mm2, %%mm5		\n\t"

			"paddd %%mm4, %%mm0		\n\t"

			"paddd %%mm5, %%mm3		\n\t"

						

			"psrad $8, %%mm0		\n\t"

			"psrad $8, %%mm3		\n\t"

			"packssdw %%mm3, %%mm0		\n\t"

			"pmaddwd %%mm6, %%mm0		\n\t"

			"packssdw %%mm0, %%mm0		\n\t"

			"movd %%mm0, (%4, %%"REG_BP")	\n\t"

			"add $4, %%"REG_BP"		\n\t"

			" jnc 1b			\n\t"



			"pop %%"REG_BP"			\n\t"

			: "+a" (counter)

			: "c" (filter), "d" (filterPos), "S" (src), "D" (dst)

			: "%"REG_b

		);</asm>

	</block_content>}</block></if>

	<else pos:start="187:9" pos:end="290:0">else

	<block pos:start="189:9" pos:end="290:0">{<block_content pos:start="191:17" pos:end="283:18">

		<decl_stmt pos:start="191:17" pos:end="191:49"><decl pos:start="191:17" pos:end="191:48"><type pos:start="191:17" pos:end="191:25"><name pos:start="191:17" pos:end="191:23">uint8_t</name> <modifier pos:start="191:25" pos:end="191:25">*</modifier></type><name pos:start="191:26" pos:end="191:31">offset</name> <init pos:start="191:33" pos:end="191:48">= <expr pos:start="191:35" pos:end="191:48"><name pos:start="191:35" pos:end="191:37">src</name><operator pos:start="191:38" pos:end="191:38">+</operator><name pos:start="191:39" pos:end="191:48">filterSize</name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="193:17" pos:end="193:38"><decl pos:start="193:17" pos:end="193:37"><type pos:start="193:17" pos:end="193:20"><name pos:start="193:17" pos:end="193:20">long</name></type> <name pos:start="193:22" pos:end="193:28">counter</name><init pos:start="193:29" pos:end="193:37">= <expr pos:start="193:31" pos:end="193:37"><operator pos:start="193:31" pos:end="193:31">-</operator><literal type="number" pos:start="193:32" pos:end="193:32">2</literal><operator pos:start="193:33" pos:end="193:33">*</operator><name pos:start="193:34" pos:end="193:37">dstW</name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="195:1" pos:end="195:46">//		filter-= counter*filterSize/2;</comment>

		<expr_stmt pos:start="197:17" pos:end="197:38"><expr pos:start="197:17" pos:end="197:37"><name pos:start="197:17" pos:end="197:25">filterPos</name><operator pos:start="197:26" pos:end="197:27">-=</operator> <name pos:start="197:29" pos:end="197:35">counter</name><operator pos:start="197:36" pos:end="197:36">/</operator><literal type="number" pos:start="197:37" pos:end="197:37">2</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="199:17" pos:end="199:32"><expr pos:start="199:17" pos:end="199:31"><name pos:start="199:17" pos:end="199:19">dst</name><operator pos:start="199:20" pos:end="199:21">-=</operator> <name pos:start="199:23" pos:end="199:29">counter</name><operator pos:start="199:30" pos:end="199:30">/</operator><literal type="number" pos:start="199:31" pos:end="199:31">2</literal></expr>;</expr_stmt>

		<asm pos:start="201:17" pos:end="283:18">asm <specifier pos:start="201:21" pos:end="201:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"movq "MANGLE(w02)", %%mm6	\n\t"

			ASMALIGN16

			"1:				\n\t"

			"mov %2, %%"REG_c"		\n\t"

			"movzwl (%%"REG_c", %0), %%eax	\n\t"

			"movzwl 2(%%"REG_c", %0), %%ebx	\n\t"

			"mov %5, %%"REG_c"		\n\t"

			"pxor %%mm4, %%mm4		\n\t"

			"pxor %%mm5, %%mm5		\n\t"

			"2:				\n\t"

			"movq (%1), %%mm1		\n\t"

			"movq (%1, %6), %%mm3		\n\t"

			"movd (%%"REG_c", %%"REG_a"), %%mm0\n\t"

			"movd (%%"REG_c", %%"REG_b"), %%mm2\n\t"

			"punpcklbw %%mm7, %%mm0		\n\t"

			"punpcklbw %%mm7, %%mm2		\n\t"

			"pmaddwd %%mm1, %%mm0		\n\t"

			"pmaddwd %%mm2, %%mm3		\n\t"

			"paddd %%mm3, %%mm5		\n\t"

			"paddd %%mm0, %%mm4		\n\t"

			"add $8, %1			\n\t"

			"add $4, %%"REG_c"		\n\t"

			"cmp %4, %%"REG_c"		\n\t"

			" jb 2b				\n\t"

			"add %6, %1			\n\t"

			"psrad $8, %%mm4		\n\t"

			"psrad $8, %%mm5		\n\t"

			"packssdw %%mm5, %%mm4		\n\t"

			"pmaddwd %%mm6, %%mm4		\n\t"

			"packssdw %%mm4, %%mm4		\n\t"

			"mov %3, %%"REG_a"		\n\t"

			"movd %%mm4, (%%"REG_a", %0)	\n\t"

			"add $4, %0			\n\t"

			" jnc 1b			\n\t"



			: "+r" (counter), "+r" (filter)

			: "m" (filterPos), "m" (dst), "m"(offset),

			  "m" (src), "r" (filterSize*2)

			: "%"REG_b, "%"REG_a, "%"REG_c

		);</asm>

	</block_content>}</block></else></if_stmt>

<cpp:else pos:start="287:1" pos:end="287:5">#<cpp:directive pos:start="287:2" pos:end="287:5">else</cpp:directive></cpp:else>

<cpp:ifdef pos:start="289:1" pos:end="289:19">#<cpp:directive pos:start="289:2" pos:end="289:6">ifdef</cpp:directive> <name pos:start="289:8" pos:end="289:19">HAVE_ALTIVEC</name></cpp:ifdef>

	<expr_stmt pos:start="291:9" pos:end="294:0"><expr pos:start="291:9" pos:end="291:86"><call pos:start="291:9" pos:end="291:86"><name pos:start="291:9" pos:end="291:27">hScale_altivec_real</name><argument_list pos:start="291:28" pos:end="291:86">(<argument pos:start="291:29" pos:end="291:31"><expr pos:start="291:29" pos:end="291:31"><name pos:start="291:29" pos:end="291:31">dst</name></expr></argument>, <argument pos:start="291:34" pos:end="291:37"><expr pos:start="291:34" pos:end="291:37"><name pos:start="291:34" pos:end="291:37">dstW</name></expr></argument>, <argument pos:start="291:40" pos:end="291:42"><expr pos:start="291:40" pos:end="291:42"><name pos:start="291:40" pos:end="291:42">src</name></expr></argument>, <argument pos:start="291:45" pos:end="291:48"><expr pos:start="291:45" pos:end="291:48"><name pos:start="291:45" pos:end="291:48">srcW</name></expr></argument>, <argument pos:start="291:51" pos:end="291:54"><expr pos:start="291:51" pos:end="291:54"><name pos:start="291:51" pos:end="291:54">xInc</name></expr></argument>, <argument pos:start="291:57" pos:end="291:62"><expr pos:start="291:57" pos:end="291:62"><name pos:start="291:57" pos:end="291:62">filter</name></expr></argument>, <argument pos:start="291:65" pos:end="291:73"><expr pos:start="291:65" pos:end="291:73"><name pos:start="291:65" pos:end="291:73">filterPos</name></expr></argument>, <argument pos:start="291:76" pos:end="291:85"><expr pos:start="291:76" pos:end="291:85"><name pos:start="291:76" pos:end="291:85">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="293:1" pos:end="293:5">#<cpp:directive pos:start="293:2" pos:end="293:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="295:9" pos:end="295:14"><decl pos:start="295:9" pos:end="295:13"><type pos:start="295:9" pos:end="295:11"><name pos:start="295:9" pos:end="295:11">int</name></type> <name pos:start="295:13" pos:end="295:13">i</name></decl>;</decl_stmt>

	<for pos:start="297:9" pos:end="330:0">for<control pos:start="297:12" pos:end="297:29">(<init pos:start="297:13" pos:end="297:16"><expr pos:start="297:13" pos:end="297:15"><name pos:start="297:13" pos:end="297:13">i</name><operator pos:start="297:14" pos:end="297:14">=</operator><literal type="number" pos:start="297:15" pos:end="297:15">0</literal></expr>;</init> <condition pos:start="297:18" pos:end="297:24"><expr pos:start="297:18" pos:end="297:23"><name pos:start="297:18" pos:end="297:18">i</name><operator pos:start="297:19" pos:end="297:19">&lt;</operator><name pos:start="297:20" pos:end="297:23">dstW</name></expr>;</condition> <incr pos:start="297:26" pos:end="297:28"><expr pos:start="297:26" pos:end="297:28"><name pos:start="297:26" pos:end="297:26">i</name><operator pos:start="297:27" pos:end="297:28">++</operator></expr></incr>)</control>

	<block pos:start="299:9" pos:end="330:0">{<block_content pos:start="301:17" pos:end="321:60">

		<decl_stmt pos:start="301:17" pos:end="301:22"><decl pos:start="301:17" pos:end="301:21"><type pos:start="301:17" pos:end="301:19"><name pos:start="301:17" pos:end="301:19">int</name></type> <name pos:start="301:21" pos:end="301:21">j</name></decl>;</decl_stmt>

		<decl_stmt pos:start="303:17" pos:end="303:41"><decl pos:start="303:17" pos:end="303:40"><type pos:start="303:17" pos:end="303:19"><name pos:start="303:17" pos:end="303:19">int</name></type> <name pos:start="303:21" pos:end="303:26">srcPos</name><init pos:start="303:27" pos:end="303:40">= <expr pos:start="303:29" pos:end="303:40"><name pos:start="303:29" pos:end="303:40"><name pos:start="303:29" pos:end="303:37">filterPos</name><index pos:start="303:38" pos:end="303:40">[<expr pos:start="303:39" pos:end="303:39"><name pos:start="303:39" pos:end="303:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="305:17" pos:end="305:26"><decl pos:start="305:17" pos:end="305:25"><type pos:start="305:17" pos:end="305:19"><name pos:start="305:17" pos:end="305:19">int</name></type> <name pos:start="305:21" pos:end="305:23">val</name><init pos:start="305:24" pos:end="305:25">=<expr pos:start="305:25" pos:end="305:25"><literal type="number" pos:start="305:25" pos:end="305:25">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="307:1" pos:end="307:56">//		printf("filterPos: %d\n", filterPos[i]);</comment>

		<for pos:start="309:17" pos:end="317:17">for<control pos:start="309:20" pos:end="309:43">(<init pos:start="309:21" pos:end="309:24"><expr pos:start="309:21" pos:end="309:23"><name pos:start="309:21" pos:end="309:21">j</name><operator pos:start="309:22" pos:end="309:22">=</operator><literal type="number" pos:start="309:23" pos:end="309:23">0</literal></expr>;</init> <condition pos:start="309:26" pos:end="309:38"><expr pos:start="309:26" pos:end="309:37"><name pos:start="309:26" pos:end="309:26">j</name><operator pos:start="309:27" pos:end="309:27">&lt;</operator><name pos:start="309:28" pos:end="309:37">filterSize</name></expr>;</condition> <incr pos:start="309:40" pos:end="309:42"><expr pos:start="309:40" pos:end="309:42"><name pos:start="309:40" pos:end="309:40">j</name><operator pos:start="309:41" pos:end="309:42">++</operator></expr></incr>)</control>

		<block pos:start="311:17" pos:end="317:17">{<block_content pos:start="315:25" pos:end="315:79">

<comment type="line" pos:start="313:1" pos:end="313:84">//			printf("filter: %d, src: %d\n", filter[i], src[srcPos + j]);</comment>

			<expr_stmt pos:start="315:25" pos:end="315:79"><expr pos:start="315:25" pos:end="315:78"><name pos:start="315:25" pos:end="315:27">val</name> <operator pos:start="315:29" pos:end="315:30">+=</operator> <operator pos:start="315:32" pos:end="315:32">(</operator><operator pos:start="315:33" pos:end="315:33">(</operator><name pos:start="315:34" pos:end="315:36">int</name><operator pos:start="315:37" pos:end="315:37">)</operator><name pos:start="315:38" pos:end="315:52"><name pos:start="315:38" pos:end="315:40">src</name><index pos:start="315:41" pos:end="315:52">[<expr pos:start="315:42" pos:end="315:51"><name pos:start="315:42" pos:end="315:47">srcPos</name> <operator pos:start="315:49" pos:end="315:49">+</operator> <name pos:start="315:51" pos:end="315:51">j</name></expr>]</index></name><operator pos:start="315:53" pos:end="315:53">)</operator><operator pos:start="315:54" pos:end="315:54">*</operator><name pos:start="315:55" pos:end="315:78"><name pos:start="315:55" pos:end="315:60">filter</name><index pos:start="315:61" pos:end="315:78">[<expr pos:start="315:62" pos:end="315:77"><name pos:start="315:62" pos:end="315:71">filterSize</name><operator pos:start="315:72" pos:end="315:72">*</operator><name pos:start="315:73" pos:end="315:73">i</name> <operator pos:start="315:75" pos:end="315:75">+</operator> <name pos:start="315:77" pos:end="315:77">j</name></expr>]</index></name></expr>;</expr_stmt>

		</block_content>}</block></for>

<comment type="line" pos:start="319:1" pos:end="319:38">//		filter += hFilterSize;</comment>

		<expr_stmt pos:start="321:17" pos:end="321:60"><expr pos:start="321:17" pos:end="321:59"><name pos:start="321:17" pos:end="321:22"><name pos:start="321:17" pos:end="321:19">dst</name><index pos:start="321:20" pos:end="321:22">[<expr pos:start="321:21" pos:end="321:21"><name pos:start="321:21" pos:end="321:21">i</name></expr>]</index></name> <operator pos:start="321:24" pos:end="321:24">=</operator> <call pos:start="321:26" pos:end="321:59"><name pos:start="321:26" pos:end="321:30">FFMIN</name><argument_list pos:start="321:31" pos:end="321:59">(<argument pos:start="321:32" pos:end="321:47"><expr pos:start="321:32" pos:end="321:47"><call pos:start="321:32" pos:end="321:47"><name pos:start="321:32" pos:end="321:36">FFMAX</name><argument_list pos:start="321:37" pos:end="321:47">(<argument pos:start="321:38" pos:end="321:38"><expr pos:start="321:38" pos:end="321:38"><literal type="number" pos:start="321:38" pos:end="321:38">0</literal></expr></argument>, <argument pos:start="321:41" pos:end="321:46"><expr pos:start="321:41" pos:end="321:46"><name pos:start="321:41" pos:end="321:43">val</name><operator pos:start="321:44" pos:end="321:45">&gt;&gt;</operator><literal type="number" pos:start="321:46" pos:end="321:46">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="321:50" pos:end="321:58"><expr pos:start="321:50" pos:end="321:58"><operator pos:start="321:50" pos:end="321:50">(</operator><literal type="number" pos:start="321:51" pos:end="321:51">1</literal><operator pos:start="321:52" pos:end="321:53">&lt;&lt;</operator><literal type="number" pos:start="321:54" pos:end="321:55">15</literal><operator pos:start="321:56" pos:end="321:56">)</operator><operator pos:start="321:57" pos:end="321:57">-</operator><literal type="number" pos:start="321:58" pos:end="321:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="321:62" pos:end="321:100">// the cubic equation does overflow ...</comment>

<comment type="line" pos:start="323:1" pos:end="323:32">//		dst[i] = val&gt;&gt;7;</comment>

	</block_content>}</block></for>

<cpp:endif pos:start="327:1" pos:end="327:6">#<cpp:directive pos:start="327:2" pos:end="327:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
