<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20501.c" pos:tabs="8"><function pos:start="1:1" pos:end="473:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">gen_compute_branch</name><parameter_list pos:start="1:31" pos:end="3:74">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:43">DisasContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">ctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:62">opc</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:70"><decl pos:start="1:65" pos:end="1:70"><type pos:start="1:65" pos:end="1:70"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:70">r1</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:37"><decl pos:start="3:32" pos:end="3:37"><type pos:start="3:32" pos:end="3:37"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:37">r2</name></decl></parameter> , <parameter pos:start="3:41" pos:end="3:56"><decl pos:start="3:41" pos:end="3:56"><type pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:47">int32_t</name></type> <name pos:start="3:49" pos:end="3:56">constant</name></decl></parameter> , <parameter pos:start="3:60" pos:end="3:73"><decl pos:start="3:60" pos:end="3:73"><type pos:start="3:60" pos:end="3:73"><name pos:start="3:60" pos:end="3:66">int32_t</name></type> <name pos:start="3:68" pos:end="3:73">offset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="473:1">{<block_content pos:start="7:5" pos:end="471:28">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">TCGv</name></type> <name pos:start="7:10" pos:end="7:13">temp</name></decl>, <decl pos:start="7:16" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:16" pos:end="7:20">temp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="469:5">switch <condition pos:start="13:12" pos:end="13:16">(<expr pos:start="13:13" pos:end="13:15"><name pos:start="13:13" pos:end="13:15">opc</name></expr>)</condition> <block pos:start="13:18" pos:end="469:5">{<block_content pos:start="17:5" pos:end="467:48">

<comment type="block" pos:start="15:1" pos:end="15:21">/* SB-format jumps */</comment>

    <case pos:start="17:5" pos:end="17:22">case <expr pos:start="17:10" pos:end="17:21"><name pos:start="17:10" pos:end="17:21">OPC1_16_SB_J</name></expr>:</case>

    <case pos:start="19:5" pos:end="19:21">case <expr pos:start="19:10" pos:end="19:20"><name pos:start="19:10" pos:end="19:20">OPC1_32_B_J</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:50"><expr pos:start="21:9" pos:end="21:49"><call pos:start="21:9" pos:end="21:49"><name pos:start="21:9" pos:end="21:19">gen_goto_tb</name><argument_list pos:start="21:20" pos:end="21:49">(<argument pos:start="21:21" pos:end="21:23"><expr pos:start="21:21" pos:end="21:23"><name pos:start="21:21" pos:end="21:23">ctx</name></expr></argument>, <argument pos:start="21:26" pos:end="21:26"><expr pos:start="21:26" pos:end="21:26"><literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr></argument>, <argument pos:start="21:29" pos:end="21:48"><expr pos:start="21:29" pos:end="21:48"><name pos:start="21:29" pos:end="21:35"><name pos:start="21:29" pos:end="21:31">ctx</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:35">pc</name></name> <operator pos:start="21:37" pos:end="21:37">+</operator> <name pos:start="21:39" pos:end="21:44">offset</name> <operator pos:start="21:46" pos:end="21:46">*</operator> <literal type="number" pos:start="21:48" pos:end="21:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="23:9" pos:end="23:14">break;</break>

    <case pos:start="25:5" pos:end="25:24">case <expr pos:start="25:10" pos:end="25:23"><name pos:start="25:10" pos:end="25:23">OPC1_32_B_CALL</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:25">case <expr pos:start="27:10" pos:end="27:24"><name pos:start="27:10" pos:end="27:24">OPC1_16_SB_CALL</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><call pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:23">gen_helper_1arg</name><argument_list pos:start="29:24" pos:end="29:43">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">call</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:33">ctx</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:42">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:50"><expr pos:start="31:9" pos:end="31:49"><call pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:19">gen_goto_tb</name><argument_list pos:start="31:20" pos:end="31:49">(<argument pos:start="31:21" pos:end="31:23"><expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">ctx</name></expr></argument>, <argument pos:start="31:26" pos:end="31:26"><expr pos:start="31:26" pos:end="31:26"><literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr></argument>, <argument pos:start="31:29" pos:end="31:48"><expr pos:start="31:29" pos:end="31:48"><name pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:31">ctx</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:35">pc</name></name> <operator pos:start="31:37" pos:end="31:37">+</operator> <name pos:start="31:39" pos:end="31:44">offset</name> <operator pos:start="31:46" pos:end="31:46">*</operator> <literal type="number" pos:start="31:48" pos:end="31:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:23">case <expr pos:start="35:10" pos:end="35:22"><name pos:start="35:10" pos:end="35:22">OPC1_16_SB_JZ</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:69"><expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:24">gen_branch_condi</name><argument_list pos:start="37:25" pos:end="37:68">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">ctx</name></expr></argument>, <argument pos:start="37:31" pos:end="37:41"><expr pos:start="37:31" pos:end="37:41"><name pos:start="37:31" pos:end="37:41">TCG_COND_EQ</name></expr></argument>, <argument pos:start="37:44" pos:end="37:56"><expr pos:start="37:44" pos:end="37:56"><name pos:start="37:44" pos:end="37:56"><name pos:start="37:44" pos:end="37:52">cpu_gpr_d</name><index pos:start="37:53" pos:end="37:56">[<expr pos:start="37:54" pos:end="37:55"><literal type="number" pos:start="37:54" pos:end="37:55">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:59" pos:end="37:59"><expr pos:start="37:59" pos:end="37:59"><literal type="number" pos:start="37:59" pos:end="37:59">0</literal></expr></argument>, <argument pos:start="37:62" pos:end="37:67"><expr pos:start="37:62" pos:end="37:67"><name pos:start="37:62" pos:end="37:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:24">case <expr pos:start="41:10" pos:end="41:23"><name pos:start="41:10" pos:end="41:23">OPC1_16_SB_JNZ</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:69"><expr pos:start="43:9" pos:end="43:68"><call pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:24">gen_branch_condi</name><argument_list pos:start="43:25" pos:end="43:68">(<argument pos:start="43:26" pos:end="43:28"><expr pos:start="43:26" pos:end="43:28"><name pos:start="43:26" pos:end="43:28">ctx</name></expr></argument>, <argument pos:start="43:31" pos:end="43:41"><expr pos:start="43:31" pos:end="43:41"><name pos:start="43:31" pos:end="43:41">TCG_COND_NE</name></expr></argument>, <argument pos:start="43:44" pos:end="43:56"><expr pos:start="43:44" pos:end="43:56"><name pos:start="43:44" pos:end="43:56"><name pos:start="43:44" pos:end="43:52">cpu_gpr_d</name><index pos:start="43:53" pos:end="43:56">[<expr pos:start="43:54" pos:end="43:55"><literal type="number" pos:start="43:54" pos:end="43:55">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="43:59" pos:end="43:59"><expr pos:start="43:59" pos:end="43:59"><literal type="number" pos:start="43:59" pos:end="43:59">0</literal></expr></argument>, <argument pos:start="43:62" pos:end="43:67"><expr pos:start="43:62" pos:end="43:67"><name pos:start="43:62" pos:end="43:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

<comment type="block" pos:start="47:1" pos:end="47:22">/* SBC-format jumps */</comment>

    <case pos:start="49:5" pos:end="49:25">case <expr pos:start="49:10" pos:end="49:24"><name pos:start="49:10" pos:end="49:24">OPC1_16_SBC_JEQ</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:76"><expr pos:start="51:9" pos:end="51:75"><call pos:start="51:9" pos:end="51:75"><name pos:start="51:9" pos:end="51:24">gen_branch_condi</name><argument_list pos:start="51:25" pos:end="51:75">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">ctx</name></expr></argument>, <argument pos:start="51:31" pos:end="51:41"><expr pos:start="51:31" pos:end="51:41"><name pos:start="51:31" pos:end="51:41">TCG_COND_EQ</name></expr></argument>, <argument pos:start="51:44" pos:end="51:56"><expr pos:start="51:44" pos:end="51:56"><name pos:start="51:44" pos:end="51:56"><name pos:start="51:44" pos:end="51:52">cpu_gpr_d</name><index pos:start="51:53" pos:end="51:56">[<expr pos:start="51:54" pos:end="51:55"><literal type="number" pos:start="51:54" pos:end="51:55">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:59" pos:end="51:66"><expr pos:start="51:59" pos:end="51:66"><name pos:start="51:59" pos:end="51:66">constant</name></expr></argument>, <argument pos:start="51:69" pos:end="51:74"><expr pos:start="51:69" pos:end="51:74"><name pos:start="51:69" pos:end="51:74">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:25">case <expr pos:start="55:10" pos:end="55:24"><name pos:start="55:10" pos:end="55:24">OPC1_16_SBC_JNE</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:76"><expr pos:start="57:9" pos:end="57:75"><call pos:start="57:9" pos:end="57:75"><name pos:start="57:9" pos:end="57:24">gen_branch_condi</name><argument_list pos:start="57:25" pos:end="57:75">(<argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:28">ctx</name></expr></argument>, <argument pos:start="57:31" pos:end="57:41"><expr pos:start="57:31" pos:end="57:41"><name pos:start="57:31" pos:end="57:41">TCG_COND_NE</name></expr></argument>, <argument pos:start="57:44" pos:end="57:56"><expr pos:start="57:44" pos:end="57:56"><name pos:start="57:44" pos:end="57:56"><name pos:start="57:44" pos:end="57:52">cpu_gpr_d</name><index pos:start="57:53" pos:end="57:56">[<expr pos:start="57:54" pos:end="57:55"><literal type="number" pos:start="57:54" pos:end="57:55">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="57:59" pos:end="57:66"><expr pos:start="57:59" pos:end="57:66"><name pos:start="57:59" pos:end="57:66">constant</name></expr></argument>, <argument pos:start="57:69" pos:end="57:74"><expr pos:start="57:69" pos:end="57:74"><name pos:start="57:69" pos:end="57:74">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

<comment type="block" pos:start="61:1" pos:end="61:23">/* SBRN-format jumps */</comment>

    <case pos:start="63:5" pos:end="63:27">case <expr pos:start="63:10" pos:end="63:26"><name pos:start="63:10" pos:end="63:26">OPC1_16_SBRN_JZ_T</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:12">temp</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:29"><name pos:start="65:16" pos:end="65:27">tcg_temp_new</name><argument_list pos:start="65:28" pos:end="65:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><call pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:23">tcg_gen_andi_tl</name><argument_list pos:start="67:24" pos:end="67:62">(<argument pos:start="67:25" pos:end="67:28"><expr pos:start="67:25" pos:end="67:28"><name pos:start="67:25" pos:end="67:28">temp</name></expr></argument>, <argument pos:start="67:31" pos:end="67:43"><expr pos:start="67:31" pos:end="67:43"><name pos:start="67:31" pos:end="67:43"><name pos:start="67:31" pos:end="67:39">cpu_gpr_d</name><index pos:start="67:40" pos:end="67:43">[<expr pos:start="67:41" pos:end="67:42"><literal type="number" pos:start="67:41" pos:end="67:42">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:46" pos:end="67:61"><expr pos:start="67:46" pos:end="67:61"><literal type="number" pos:start="67:46" pos:end="67:49">0x1u</literal> <operator pos:start="67:51" pos:end="67:52">&lt;&lt;</operator> <name pos:start="67:54" pos:end="67:61">constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:60"><expr pos:start="69:9" pos:end="69:59"><call pos:start="69:9" pos:end="69:59"><name pos:start="69:9" pos:end="69:24">gen_branch_condi</name><argument_list pos:start="69:25" pos:end="69:59">(<argument pos:start="69:26" pos:end="69:28"><expr pos:start="69:26" pos:end="69:28"><name pos:start="69:26" pos:end="69:28">ctx</name></expr></argument>, <argument pos:start="69:31" pos:end="69:41"><expr pos:start="69:31" pos:end="69:41"><name pos:start="69:31" pos:end="69:41">TCG_COND_EQ</name></expr></argument>, <argument pos:start="69:44" pos:end="69:47"><expr pos:start="69:44" pos:end="69:47"><name pos:start="69:44" pos:end="69:47">temp</name></expr></argument>, <argument pos:start="69:50" pos:end="69:50"><expr pos:start="69:50" pos:end="69:50"><literal type="number" pos:start="69:50" pos:end="69:50">0</literal></expr></argument>, <argument pos:start="69:53" pos:end="69:58"><expr pos:start="69:53" pos:end="69:58"><name pos:start="69:53" pos:end="69:58">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:28"><expr pos:start="71:9" pos:end="71:27"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:21">tcg_temp_free</name><argument_list pos:start="71:22" pos:end="71:27">(<argument pos:start="71:23" pos:end="71:26"><expr pos:start="71:23" pos:end="71:26"><name pos:start="71:23" pos:end="71:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:28">case <expr pos:start="75:10" pos:end="75:27"><name pos:start="75:10" pos:end="75:27">OPC1_16_SBRN_JNZ_T</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:12">temp</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:29"><name pos:start="77:16" pos:end="77:27">tcg_temp_new</name><argument_list pos:start="77:28" pos:end="77:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:63"><expr pos:start="79:9" pos:end="79:62"><call pos:start="79:9" pos:end="79:62"><name pos:start="79:9" pos:end="79:23">tcg_gen_andi_tl</name><argument_list pos:start="79:24" pos:end="79:62">(<argument pos:start="79:25" pos:end="79:28"><expr pos:start="79:25" pos:end="79:28"><name pos:start="79:25" pos:end="79:28">temp</name></expr></argument>, <argument pos:start="79:31" pos:end="79:43"><expr pos:start="79:31" pos:end="79:43"><name pos:start="79:31" pos:end="79:43"><name pos:start="79:31" pos:end="79:39">cpu_gpr_d</name><index pos:start="79:40" pos:end="79:43">[<expr pos:start="79:41" pos:end="79:42"><literal type="number" pos:start="79:41" pos:end="79:42">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:46" pos:end="79:61"><expr pos:start="79:46" pos:end="79:61"><literal type="number" pos:start="79:46" pos:end="79:49">0x1u</literal> <operator pos:start="79:51" pos:end="79:52">&lt;&lt;</operator> <name pos:start="79:54" pos:end="79:61">constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:24">gen_branch_condi</name><argument_list pos:start="81:25" pos:end="81:59">(<argument pos:start="81:26" pos:end="81:28"><expr pos:start="81:26" pos:end="81:28"><name pos:start="81:26" pos:end="81:28">ctx</name></expr></argument>, <argument pos:start="81:31" pos:end="81:41"><expr pos:start="81:31" pos:end="81:41"><name pos:start="81:31" pos:end="81:41">TCG_COND_NE</name></expr></argument>, <argument pos:start="81:44" pos:end="81:47"><expr pos:start="81:44" pos:end="81:47"><name pos:start="81:44" pos:end="81:47">temp</name></expr></argument>, <argument pos:start="81:50" pos:end="81:50"><expr pos:start="81:50" pos:end="81:50"><literal type="number" pos:start="81:50" pos:end="81:50">0</literal></expr></argument>, <argument pos:start="81:53" pos:end="81:58"><expr pos:start="81:53" pos:end="81:58"><name pos:start="81:53" pos:end="81:58">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><call pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:21">tcg_temp_free</name><argument_list pos:start="83:22" pos:end="83:27">(<argument pos:start="83:23" pos:end="83:26"><expr pos:start="83:23" pos:end="83:26"><name pos:start="83:23" pos:end="83:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

<comment type="block" pos:start="87:1" pos:end="87:22">/* SBR-format jumps */</comment>

    <case pos:start="89:5" pos:end="89:25">case <expr pos:start="89:10" pos:end="89:24"><name pos:start="89:10" pos:end="89:24">OPC1_16_SBR_JEQ</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="93:32"><expr pos:start="91:9" pos:end="93:31"><call pos:start="91:9" pos:end="93:31"><name pos:start="91:9" pos:end="91:23">gen_branch_cond</name><argument_list pos:start="91:24" pos:end="93:31">(<argument pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><name pos:start="91:25" pos:end="91:27">ctx</name></expr></argument>, <argument pos:start="91:30" pos:end="91:40"><expr pos:start="91:30" pos:end="91:40"><name pos:start="91:30" pos:end="91:40">TCG_COND_EQ</name></expr></argument>, <argument pos:start="91:43" pos:end="91:55"><expr pos:start="91:43" pos:end="91:55"><name pos:start="91:43" pos:end="91:55"><name pos:start="91:43" pos:end="91:51">cpu_gpr_d</name><index pos:start="91:52" pos:end="91:55">[<expr pos:start="91:53" pos:end="91:54"><name pos:start="91:53" pos:end="91:54">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="91:58" pos:end="91:70"><expr pos:start="91:58" pos:end="91:70"><name pos:start="91:58" pos:end="91:70"><name pos:start="91:58" pos:end="91:66">cpu_gpr_d</name><index pos:start="91:67" pos:end="91:70">[<expr pos:start="91:68" pos:end="91:69"><literal type="number" pos:start="91:68" pos:end="91:69">15</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:30">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:25">case <expr pos:start="97:10" pos:end="97:24"><name pos:start="97:10" pos:end="97:24">OPC1_16_SBR_JNE</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="101:32"><expr pos:start="99:9" pos:end="101:31"><call pos:start="99:9" pos:end="101:31"><name pos:start="99:9" pos:end="99:23">gen_branch_cond</name><argument_list pos:start="99:24" pos:end="101:31">(<argument pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:27">ctx</name></expr></argument>, <argument pos:start="99:30" pos:end="99:40"><expr pos:start="99:30" pos:end="99:40"><name pos:start="99:30" pos:end="99:40">TCG_COND_NE</name></expr></argument>, <argument pos:start="99:43" pos:end="99:55"><expr pos:start="99:43" pos:end="99:55"><name pos:start="99:43" pos:end="99:55"><name pos:start="99:43" pos:end="99:51">cpu_gpr_d</name><index pos:start="99:52" pos:end="99:55">[<expr pos:start="99:53" pos:end="99:54"><name pos:start="99:53" pos:end="99:54">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="99:58" pos:end="99:70"><expr pos:start="99:58" pos:end="99:70"><name pos:start="99:58" pos:end="99:70"><name pos:start="99:58" pos:end="99:66">cpu_gpr_d</name><index pos:start="99:67" pos:end="99:70">[<expr pos:start="99:68" pos:end="99:69"><literal type="number" pos:start="99:68" pos:end="99:69">15</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="101:25" pos:end="101:30"><expr pos:start="101:25" pos:end="101:30"><name pos:start="101:25" pos:end="101:30">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:25">case <expr pos:start="105:10" pos:end="105:24"><name pos:start="105:10" pos:end="105:24">OPC1_16_SBR_JNZ</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:69"><expr pos:start="107:9" pos:end="107:68"><call pos:start="107:9" pos:end="107:68"><name pos:start="107:9" pos:end="107:24">gen_branch_condi</name><argument_list pos:start="107:25" pos:end="107:68">(<argument pos:start="107:26" pos:end="107:28"><expr pos:start="107:26" pos:end="107:28"><name pos:start="107:26" pos:end="107:28">ctx</name></expr></argument>, <argument pos:start="107:31" pos:end="107:41"><expr pos:start="107:31" pos:end="107:41"><name pos:start="107:31" pos:end="107:41">TCG_COND_NE</name></expr></argument>, <argument pos:start="107:44" pos:end="107:56"><expr pos:start="107:44" pos:end="107:56"><name pos:start="107:44" pos:end="107:56"><name pos:start="107:44" pos:end="107:52">cpu_gpr_d</name><index pos:start="107:53" pos:end="107:56">[<expr pos:start="107:54" pos:end="107:55"><name pos:start="107:54" pos:end="107:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="107:59" pos:end="107:59"><expr pos:start="107:59" pos:end="107:59"><literal type="number" pos:start="107:59" pos:end="107:59">0</literal></expr></argument>, <argument pos:start="107:62" pos:end="107:67"><expr pos:start="107:62" pos:end="107:67"><name pos:start="107:62" pos:end="107:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:27">case <expr pos:start="111:10" pos:end="111:26"><name pos:start="111:10" pos:end="111:26">OPC1_16_SBR_JNZ_A</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:69"><expr pos:start="113:9" pos:end="113:68"><call pos:start="113:9" pos:end="113:68"><name pos:start="113:9" pos:end="113:24">gen_branch_condi</name><argument_list pos:start="113:25" pos:end="113:68">(<argument pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:28">ctx</name></expr></argument>, <argument pos:start="113:31" pos:end="113:41"><expr pos:start="113:31" pos:end="113:41"><name pos:start="113:31" pos:end="113:41">TCG_COND_NE</name></expr></argument>, <argument pos:start="113:44" pos:end="113:56"><expr pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:52">cpu_gpr_a</name><index pos:start="113:53" pos:end="113:56">[<expr pos:start="113:54" pos:end="113:55"><name pos:start="113:54" pos:end="113:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="113:59" pos:end="113:59"><expr pos:start="113:59" pos:end="113:59"><literal type="number" pos:start="113:59" pos:end="113:59">0</literal></expr></argument>, <argument pos:start="113:62" pos:end="113:67"><expr pos:start="113:62" pos:end="113:67"><name pos:start="113:62" pos:end="113:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:26">case <expr pos:start="117:10" pos:end="117:25"><name pos:start="117:10" pos:end="117:25">OPC1_16_SBR_JGEZ</name></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:69"><expr pos:start="119:9" pos:end="119:68"><call pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:24">gen_branch_condi</name><argument_list pos:start="119:25" pos:end="119:68">(<argument pos:start="119:26" pos:end="119:28"><expr pos:start="119:26" pos:end="119:28"><name pos:start="119:26" pos:end="119:28">ctx</name></expr></argument>, <argument pos:start="119:31" pos:end="119:41"><expr pos:start="119:31" pos:end="119:41"><name pos:start="119:31" pos:end="119:41">TCG_COND_GE</name></expr></argument>, <argument pos:start="119:44" pos:end="119:56"><expr pos:start="119:44" pos:end="119:56"><name pos:start="119:44" pos:end="119:56"><name pos:start="119:44" pos:end="119:52">cpu_gpr_d</name><index pos:start="119:53" pos:end="119:56">[<expr pos:start="119:54" pos:end="119:55"><name pos:start="119:54" pos:end="119:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="119:59" pos:end="119:59"><expr pos:start="119:59" pos:end="119:59"><literal type="number" pos:start="119:59" pos:end="119:59">0</literal></expr></argument>, <argument pos:start="119:62" pos:end="119:67"><expr pos:start="119:62" pos:end="119:67"><name pos:start="119:62" pos:end="119:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:26">case <expr pos:start="123:10" pos:end="123:25"><name pos:start="123:10" pos:end="123:25">OPC1_16_SBR_JGTZ</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:69"><expr pos:start="125:9" pos:end="125:68"><call pos:start="125:9" pos:end="125:68"><name pos:start="125:9" pos:end="125:24">gen_branch_condi</name><argument_list pos:start="125:25" pos:end="125:68">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><name pos:start="125:26" pos:end="125:28">ctx</name></expr></argument>, <argument pos:start="125:31" pos:end="125:41"><expr pos:start="125:31" pos:end="125:41"><name pos:start="125:31" pos:end="125:41">TCG_COND_GT</name></expr></argument>, <argument pos:start="125:44" pos:end="125:56"><expr pos:start="125:44" pos:end="125:56"><name pos:start="125:44" pos:end="125:56"><name pos:start="125:44" pos:end="125:52">cpu_gpr_d</name><index pos:start="125:53" pos:end="125:56">[<expr pos:start="125:54" pos:end="125:55"><name pos:start="125:54" pos:end="125:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="125:59" pos:end="125:59"><expr pos:start="125:59" pos:end="125:59"><literal type="number" pos:start="125:59" pos:end="125:59">0</literal></expr></argument>, <argument pos:start="125:62" pos:end="125:67"><expr pos:start="125:62" pos:end="125:67"><name pos:start="125:62" pos:end="125:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:26">case <expr pos:start="129:10" pos:end="129:25"><name pos:start="129:10" pos:end="129:25">OPC1_16_SBR_JLEZ</name></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:69"><expr pos:start="131:9" pos:end="131:68"><call pos:start="131:9" pos:end="131:68"><name pos:start="131:9" pos:end="131:24">gen_branch_condi</name><argument_list pos:start="131:25" pos:end="131:68">(<argument pos:start="131:26" pos:end="131:28"><expr pos:start="131:26" pos:end="131:28"><name pos:start="131:26" pos:end="131:28">ctx</name></expr></argument>, <argument pos:start="131:31" pos:end="131:41"><expr pos:start="131:31" pos:end="131:41"><name pos:start="131:31" pos:end="131:41">TCG_COND_LE</name></expr></argument>, <argument pos:start="131:44" pos:end="131:56"><expr pos:start="131:44" pos:end="131:56"><name pos:start="131:44" pos:end="131:56"><name pos:start="131:44" pos:end="131:52">cpu_gpr_d</name><index pos:start="131:53" pos:end="131:56">[<expr pos:start="131:54" pos:end="131:55"><name pos:start="131:54" pos:end="131:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="131:59" pos:end="131:59"><expr pos:start="131:59" pos:end="131:59"><literal type="number" pos:start="131:59" pos:end="131:59">0</literal></expr></argument>, <argument pos:start="131:62" pos:end="131:67"><expr pos:start="131:62" pos:end="131:67"><name pos:start="131:62" pos:end="131:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:26">case <expr pos:start="135:10" pos:end="135:25"><name pos:start="135:10" pos:end="135:25">OPC1_16_SBR_JLTZ</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:69"><expr pos:start="137:9" pos:end="137:68"><call pos:start="137:9" pos:end="137:68"><name pos:start="137:9" pos:end="137:24">gen_branch_condi</name><argument_list pos:start="137:25" pos:end="137:68">(<argument pos:start="137:26" pos:end="137:28"><expr pos:start="137:26" pos:end="137:28"><name pos:start="137:26" pos:end="137:28">ctx</name></expr></argument>, <argument pos:start="137:31" pos:end="137:41"><expr pos:start="137:31" pos:end="137:41"><name pos:start="137:31" pos:end="137:41">TCG_COND_LT</name></expr></argument>, <argument pos:start="137:44" pos:end="137:56"><expr pos:start="137:44" pos:end="137:56"><name pos:start="137:44" pos:end="137:56"><name pos:start="137:44" pos:end="137:52">cpu_gpr_d</name><index pos:start="137:53" pos:end="137:56">[<expr pos:start="137:54" pos:end="137:55"><name pos:start="137:54" pos:end="137:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="137:59" pos:end="137:59"><expr pos:start="137:59" pos:end="137:59"><literal type="number" pos:start="137:59" pos:end="137:59">0</literal></expr></argument>, <argument pos:start="137:62" pos:end="137:67"><expr pos:start="137:62" pos:end="137:67"><name pos:start="137:62" pos:end="137:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <case pos:start="141:5" pos:end="141:24">case <expr pos:start="141:10" pos:end="141:23"><name pos:start="141:10" pos:end="141:23">OPC1_16_SBR_JZ</name></expr>:</case>

        <expr_stmt pos:start="143:9" pos:end="143:69"><expr pos:start="143:9" pos:end="143:68"><call pos:start="143:9" pos:end="143:68"><name pos:start="143:9" pos:end="143:24">gen_branch_condi</name><argument_list pos:start="143:25" pos:end="143:68">(<argument pos:start="143:26" pos:end="143:28"><expr pos:start="143:26" pos:end="143:28"><name pos:start="143:26" pos:end="143:28">ctx</name></expr></argument>, <argument pos:start="143:31" pos:end="143:41"><expr pos:start="143:31" pos:end="143:41"><name pos:start="143:31" pos:end="143:41">TCG_COND_EQ</name></expr></argument>, <argument pos:start="143:44" pos:end="143:56"><expr pos:start="143:44" pos:end="143:56"><name pos:start="143:44" pos:end="143:56"><name pos:start="143:44" pos:end="143:52">cpu_gpr_d</name><index pos:start="143:53" pos:end="143:56">[<expr pos:start="143:54" pos:end="143:55"><name pos:start="143:54" pos:end="143:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="143:59" pos:end="143:59"><expr pos:start="143:59" pos:end="143:59"><literal type="number" pos:start="143:59" pos:end="143:59">0</literal></expr></argument>, <argument pos:start="143:62" pos:end="143:67"><expr pos:start="143:62" pos:end="143:67"><name pos:start="143:62" pos:end="143:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:26">case <expr pos:start="147:10" pos:end="147:25"><name pos:start="147:10" pos:end="147:25">OPC1_16_SBR_JZ_A</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:69"><expr pos:start="149:9" pos:end="149:68"><call pos:start="149:9" pos:end="149:68"><name pos:start="149:9" pos:end="149:24">gen_branch_condi</name><argument_list pos:start="149:25" pos:end="149:68">(<argument pos:start="149:26" pos:end="149:28"><expr pos:start="149:26" pos:end="149:28"><name pos:start="149:26" pos:end="149:28">ctx</name></expr></argument>, <argument pos:start="149:31" pos:end="149:41"><expr pos:start="149:31" pos:end="149:41"><name pos:start="149:31" pos:end="149:41">TCG_COND_EQ</name></expr></argument>, <argument pos:start="149:44" pos:end="149:56"><expr pos:start="149:44" pos:end="149:56"><name pos:start="149:44" pos:end="149:56"><name pos:start="149:44" pos:end="149:52">cpu_gpr_a</name><index pos:start="149:53" pos:end="149:56">[<expr pos:start="149:54" pos:end="149:55"><name pos:start="149:54" pos:end="149:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="149:59" pos:end="149:59"><expr pos:start="149:59" pos:end="149:59"><literal type="number" pos:start="149:59" pos:end="149:59">0</literal></expr></argument>, <argument pos:start="149:62" pos:end="149:67"><expr pos:start="149:62" pos:end="149:67"><name pos:start="149:62" pos:end="149:67">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:26">case <expr pos:start="153:10" pos:end="153:25"><name pos:start="153:10" pos:end="153:25">OPC1_16_SBR_LOOP</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="155:43"><expr pos:start="155:9" pos:end="155:42"><call pos:start="155:9" pos:end="155:42"><name pos:start="155:9" pos:end="155:16">gen_loop</name><argument_list pos:start="155:17" pos:end="155:42">(<argument pos:start="155:18" pos:end="155:20"><expr pos:start="155:18" pos:end="155:20"><name pos:start="155:18" pos:end="155:20">ctx</name></expr></argument>, <argument pos:start="155:23" pos:end="155:24"><expr pos:start="155:23" pos:end="155:24"><name pos:start="155:23" pos:end="155:24">r1</name></expr></argument>, <argument pos:start="155:27" pos:end="155:41"><expr pos:start="155:27" pos:end="155:41"><name pos:start="155:27" pos:end="155:32">offset</name> <operator pos:start="155:34" pos:end="155:34">*</operator> <literal type="number" pos:start="155:36" pos:end="155:38">2</literal> <operator pos:start="155:38" pos:end="155:38">-</operator> <literal type="number" pos:start="155:40" pos:end="155:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

<comment type="block" pos:start="159:1" pos:end="159:21">/* SR-format jumps */</comment>

    <case pos:start="161:5" pos:end="161:23">case <expr pos:start="161:10" pos:end="161:22"><name pos:start="161:10" pos:end="161:22">OPC1_16_SR_JI</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:59"><expr pos:start="163:9" pos:end="163:58"><call pos:start="163:9" pos:end="163:58"><name pos:start="163:9" pos:end="163:23">tcg_gen_andi_tl</name><argument_list pos:start="163:24" pos:end="163:58">(<argument pos:start="163:25" pos:end="163:30"><expr pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:30">cpu_PC</name></expr></argument>, <argument pos:start="163:33" pos:end="163:45"><expr pos:start="163:33" pos:end="163:45"><name pos:start="163:33" pos:end="163:45"><name pos:start="163:33" pos:end="163:41">cpu_gpr_a</name><index pos:start="163:42" pos:end="163:45">[<expr pos:start="163:43" pos:end="163:44"><name pos:start="163:43" pos:end="163:44">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="163:48" pos:end="163:57"><expr pos:start="163:48" pos:end="163:57"><literal type="number" pos:start="163:48" pos:end="163:57">0xfffffffe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><call pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:23">tcg_gen_exit_tb</name><argument_list pos:start="165:24" pos:end="165:26">(<argument pos:start="165:25" pos:end="165:25"><expr pos:start="165:25" pos:end="165:25"><literal type="number" pos:start="165:25" pos:end="165:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:25">case <expr pos:start="169:10" pos:end="169:24"><name pos:start="169:10" pos:end="169:24">OPC2_32_SYS_RET</name></expr>:</case>

    <case pos:start="171:5" pos:end="171:24">case <expr pos:start="171:10" pos:end="171:23"><name pos:start="171:10" pos:end="171:23">OPC2_16_SR_RET</name></expr>:</case>

        <expr_stmt pos:start="173:9" pos:end="173:32"><expr pos:start="173:9" pos:end="173:31"><call pos:start="173:9" pos:end="173:31"><name pos:start="173:9" pos:end="173:22">gen_helper_ret</name><argument_list pos:start="173:23" pos:end="173:31">(<argument pos:start="173:24" pos:end="173:30"><expr pos:start="173:24" pos:end="173:30"><name pos:start="173:24" pos:end="173:30">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:27"><expr pos:start="175:9" pos:end="175:26"><call pos:start="175:9" pos:end="175:26"><name pos:start="175:9" pos:end="175:23">tcg_gen_exit_tb</name><argument_list pos:start="175:24" pos:end="175:26">(<argument pos:start="175:25" pos:end="175:25"><expr pos:start="175:25" pos:end="175:25"><literal type="number" pos:start="175:25" pos:end="175:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="177:9" pos:end="177:14">break;</break>

<comment type="block" pos:start="179:1" pos:end="179:14">/* B-format */</comment>

    <case pos:start="181:5" pos:end="181:25">case <expr pos:start="181:10" pos:end="181:24"><name pos:start="181:10" pos:end="181:24">OPC1_32_B_CALLA</name></expr>:</case>

        <expr_stmt pos:start="183:9" pos:end="183:44"><expr pos:start="183:9" pos:end="183:43"><call pos:start="183:9" pos:end="183:43"><name pos:start="183:9" pos:end="183:23">gen_helper_1arg</name><argument_list pos:start="183:24" pos:end="183:43">(<argument pos:start="183:25" pos:end="183:28"><expr pos:start="183:25" pos:end="183:28"><name pos:start="183:25" pos:end="183:28">call</name></expr></argument>, <argument pos:start="183:31" pos:end="183:42"><expr pos:start="183:31" pos:end="183:42"><name pos:start="183:31" pos:end="183:42"><name pos:start="183:31" pos:end="183:33">ctx</name><operator pos:start="183:34" pos:end="183:35">-&gt;</operator><name pos:start="183:36" pos:end="183:42">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:50"><expr pos:start="185:9" pos:end="185:49"><call pos:start="185:9" pos:end="185:49"><name pos:start="185:9" pos:end="185:19">gen_goto_tb</name><argument_list pos:start="185:20" pos:end="185:49">(<argument pos:start="185:21" pos:end="185:23"><expr pos:start="185:21" pos:end="185:23"><name pos:start="185:21" pos:end="185:23">ctx</name></expr></argument>, <argument pos:start="185:26" pos:end="185:26"><expr pos:start="185:26" pos:end="185:26"><literal type="number" pos:start="185:26" pos:end="185:26">0</literal></expr></argument>, <argument pos:start="185:29" pos:end="185:48"><expr pos:start="185:29" pos:end="185:48"><call pos:start="185:29" pos:end="185:48"><name pos:start="185:29" pos:end="185:40">EA_B_ABSOLUT</name><argument_list pos:start="185:41" pos:end="185:48">(<argument pos:start="185:42" pos:end="185:47"><expr pos:start="185:42" pos:end="185:47"><name pos:start="185:42" pos:end="185:47">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:23">case <expr pos:start="189:10" pos:end="189:22"><name pos:start="189:10" pos:end="189:22">OPC1_32_B_JLA</name></expr>:</case>

        <expr_stmt pos:start="191:9" pos:end="191:53"><expr pos:start="191:9" pos:end="191:52"><call pos:start="191:9" pos:end="191:52"><name pos:start="191:9" pos:end="191:23">tcg_gen_movi_tl</name><argument_list pos:start="191:24" pos:end="191:52">(<argument pos:start="191:25" pos:end="191:37"><expr pos:start="191:25" pos:end="191:37"><name pos:start="191:25" pos:end="191:37"><name pos:start="191:25" pos:end="191:33">cpu_gpr_a</name><index pos:start="191:34" pos:end="191:37">[<expr pos:start="191:35" pos:end="191:36"><literal type="number" pos:start="191:35" pos:end="191:36">11</literal></expr>]</index></name></expr></argument>, <argument pos:start="191:40" pos:end="191:51"><expr pos:start="191:40" pos:end="191:51"><name pos:start="191:40" pos:end="191:51"><name pos:start="191:40" pos:end="191:42">ctx</name><operator pos:start="191:43" pos:end="191:44">-&gt;</operator><name pos:start="191:45" pos:end="191:51">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:26">/* fall through */</comment>

    <case pos:start="195:5" pos:end="195:22">case <expr pos:start="195:10" pos:end="195:21"><name pos:start="195:10" pos:end="195:21">OPC1_32_B_JA</name></expr>:</case>

        <expr_stmt pos:start="197:9" pos:end="197:50"><expr pos:start="197:9" pos:end="197:49"><call pos:start="197:9" pos:end="197:49"><name pos:start="197:9" pos:end="197:19">gen_goto_tb</name><argument_list pos:start="197:20" pos:end="197:49">(<argument pos:start="197:21" pos:end="197:23"><expr pos:start="197:21" pos:end="197:23"><name pos:start="197:21" pos:end="197:23">ctx</name></expr></argument>, <argument pos:start="197:26" pos:end="197:26"><expr pos:start="197:26" pos:end="197:26"><literal type="number" pos:start="197:26" pos:end="197:26">0</literal></expr></argument>, <argument pos:start="197:29" pos:end="197:48"><expr pos:start="197:29" pos:end="197:48"><call pos:start="197:29" pos:end="197:48"><name pos:start="197:29" pos:end="197:40">EA_B_ABSOLUT</name><argument_list pos:start="197:41" pos:end="197:48">(<argument pos:start="197:42" pos:end="197:47"><expr pos:start="197:42" pos:end="197:47"><name pos:start="197:42" pos:end="197:47">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:22">case <expr pos:start="201:10" pos:end="201:21"><name pos:start="201:10" pos:end="201:21">OPC1_32_B_JL</name></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:53"><expr pos:start="203:9" pos:end="203:52"><call pos:start="203:9" pos:end="203:52"><name pos:start="203:9" pos:end="203:23">tcg_gen_movi_tl</name><argument_list pos:start="203:24" pos:end="203:52">(<argument pos:start="203:25" pos:end="203:37"><expr pos:start="203:25" pos:end="203:37"><name pos:start="203:25" pos:end="203:37"><name pos:start="203:25" pos:end="203:33">cpu_gpr_a</name><index pos:start="203:34" pos:end="203:37">[<expr pos:start="203:35" pos:end="203:36"><literal type="number" pos:start="203:35" pos:end="203:36">11</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:40" pos:end="203:51"><expr pos:start="203:40" pos:end="203:51"><name pos:start="203:40" pos:end="203:51"><name pos:start="203:40" pos:end="203:42">ctx</name><operator pos:start="203:43" pos:end="203:44">-&gt;</operator><name pos:start="203:45" pos:end="203:51">next_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:50"><expr pos:start="205:9" pos:end="205:49"><call pos:start="205:9" pos:end="205:49"><name pos:start="205:9" pos:end="205:19">gen_goto_tb</name><argument_list pos:start="205:20" pos:end="205:49">(<argument pos:start="205:21" pos:end="205:23"><expr pos:start="205:21" pos:end="205:23"><name pos:start="205:21" pos:end="205:23">ctx</name></expr></argument>, <argument pos:start="205:26" pos:end="205:26"><expr pos:start="205:26" pos:end="205:26"><literal type="number" pos:start="205:26" pos:end="205:26">0</literal></expr></argument>, <argument pos:start="205:29" pos:end="205:48"><expr pos:start="205:29" pos:end="205:48"><name pos:start="205:29" pos:end="205:35"><name pos:start="205:29" pos:end="205:31">ctx</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:35">pc</name></name> <operator pos:start="205:37" pos:end="205:37">+</operator> <name pos:start="205:39" pos:end="205:44">offset</name> <operator pos:start="205:46" pos:end="205:46">*</operator> <literal type="number" pos:start="205:48" pos:end="205:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>

<comment type="block" pos:start="209:1" pos:end="209:16">/* BOL format */</comment>

    <case pos:start="211:5" pos:end="211:28">case <expr pos:start="211:10" pos:end="211:27"><name pos:start="211:10" pos:end="211:27">OPCM_32_BRC_EQ_NEQ</name></expr>:</case>

         <if_stmt pos:start="213:10" pos:end="221:10"><if pos:start="213:10" pos:end="217:10">if <condition pos:start="213:13" pos:end="213:61">(<expr pos:start="213:14" pos:end="213:60"><call pos:start="213:14" pos:end="213:41"><name pos:start="213:14" pos:end="213:28">MASK_OP_BRC_OP2</name><argument_list pos:start="213:29" pos:end="213:41">(<argument pos:start="213:30" pos:end="213:40"><expr pos:start="213:30" pos:end="213:40"><name pos:start="213:30" pos:end="213:40"><name pos:start="213:30" pos:end="213:32">ctx</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:40">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="213:43" pos:end="213:44">==</operator> <name pos:start="213:46" pos:end="213:60">OPC2_32_BRC_JEQ</name></expr>)</condition> <block pos:start="213:63" pos:end="217:10">{<block_content pos:start="215:13" pos:end="215:80">

            <expr_stmt pos:start="215:13" pos:end="215:80"><expr pos:start="215:13" pos:end="215:79"><call pos:start="215:13" pos:end="215:79"><name pos:start="215:13" pos:end="215:28">gen_branch_condi</name><argument_list pos:start="215:29" pos:end="215:79">(<argument pos:start="215:30" pos:end="215:32"><expr pos:start="215:30" pos:end="215:32"><name pos:start="215:30" pos:end="215:32">ctx</name></expr></argument>, <argument pos:start="215:35" pos:end="215:45"><expr pos:start="215:35" pos:end="215:45"><name pos:start="215:35" pos:end="215:45">TCG_COND_EQ</name></expr></argument>, <argument pos:start="215:48" pos:end="215:60"><expr pos:start="215:48" pos:end="215:60"><name pos:start="215:48" pos:end="215:60"><name pos:start="215:48" pos:end="215:56">cpu_gpr_d</name><index pos:start="215:57" pos:end="215:60">[<expr pos:start="215:58" pos:end="215:59"><name pos:start="215:58" pos:end="215:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="215:63" pos:end="215:70"><expr pos:start="215:63" pos:end="215:70"><name pos:start="215:63" pos:end="215:70">constant</name></expr></argument>, <argument pos:start="215:73" pos:end="215:78"><expr pos:start="215:73" pos:end="215:78"><name pos:start="215:73" pos:end="215:78">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></if> <else pos:start="217:12" pos:end="221:10">else <block pos:start="217:17" pos:end="221:10">{<block_content pos:start="219:13" pos:end="219:80">

            <expr_stmt pos:start="219:13" pos:end="219:80"><expr pos:start="219:13" pos:end="219:79"><call pos:start="219:13" pos:end="219:79"><name pos:start="219:13" pos:end="219:28">gen_branch_condi</name><argument_list pos:start="219:29" pos:end="219:79">(<argument pos:start="219:30" pos:end="219:32"><expr pos:start="219:30" pos:end="219:32"><name pos:start="219:30" pos:end="219:32">ctx</name></expr></argument>, <argument pos:start="219:35" pos:end="219:45"><expr pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:45">TCG_COND_NE</name></expr></argument>, <argument pos:start="219:48" pos:end="219:60"><expr pos:start="219:48" pos:end="219:60"><name pos:start="219:48" pos:end="219:60"><name pos:start="219:48" pos:end="219:56">cpu_gpr_d</name><index pos:start="219:57" pos:end="219:60">[<expr pos:start="219:58" pos:end="219:59"><name pos:start="219:58" pos:end="219:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="219:63" pos:end="219:70"><expr pos:start="219:63" pos:end="219:70"><name pos:start="219:63" pos:end="219:70">constant</name></expr></argument>, <argument pos:start="219:73" pos:end="219:78"><expr pos:start="219:73" pos:end="219:78"><name pos:start="219:73" pos:end="219:78">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></else></if_stmt>

         <break pos:start="223:10" pos:end="223:15">break;</break>

    <case pos:start="225:5" pos:end="225:24">case <expr pos:start="225:10" pos:end="225:23"><name pos:start="225:10" pos:end="225:23">OPCM_32_BRC_GE</name></expr>:</case>

         <if_stmt pos:start="227:10" pos:end="239:10"><if pos:start="227:10" pos:end="231:10">if <condition pos:start="227:13" pos:end="227:60">(<expr pos:start="227:14" pos:end="227:59"><call pos:start="227:14" pos:end="227:41"><name pos:start="227:14" pos:end="227:28">MASK_OP_BRC_OP2</name><argument_list pos:start="227:29" pos:end="227:41">(<argument pos:start="227:30" pos:end="227:40"><expr pos:start="227:30" pos:end="227:40"><name pos:start="227:30" pos:end="227:40"><name pos:start="227:30" pos:end="227:32">ctx</name><operator pos:start="227:33" pos:end="227:34">-&gt;</operator><name pos:start="227:35" pos:end="227:40">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="227:43" pos:end="227:44">==</operator> <name pos:start="227:46" pos:end="227:59">OP2_32_BRC_JGE</name></expr>)</condition> <block pos:start="227:62" pos:end="231:10">{<block_content pos:start="229:13" pos:end="229:80">

            <expr_stmt pos:start="229:13" pos:end="229:80"><expr pos:start="229:13" pos:end="229:79"><call pos:start="229:13" pos:end="229:79"><name pos:start="229:13" pos:end="229:28">gen_branch_condi</name><argument_list pos:start="229:29" pos:end="229:79">(<argument pos:start="229:30" pos:end="229:32"><expr pos:start="229:30" pos:end="229:32"><name pos:start="229:30" pos:end="229:32">ctx</name></expr></argument>, <argument pos:start="229:35" pos:end="229:45"><expr pos:start="229:35" pos:end="229:45"><name pos:start="229:35" pos:end="229:45">TCG_COND_GE</name></expr></argument>, <argument pos:start="229:48" pos:end="229:60"><expr pos:start="229:48" pos:end="229:60"><name pos:start="229:48" pos:end="229:60"><name pos:start="229:48" pos:end="229:56">cpu_gpr_d</name><index pos:start="229:57" pos:end="229:60">[<expr pos:start="229:58" pos:end="229:59"><name pos:start="229:58" pos:end="229:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="229:63" pos:end="229:70"><expr pos:start="229:63" pos:end="229:70"><name pos:start="229:63" pos:end="229:70">constant</name></expr></argument>, <argument pos:start="229:73" pos:end="229:78"><expr pos:start="229:73" pos:end="229:78"><name pos:start="229:73" pos:end="229:78">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></if> <else pos:start="231:12" pos:end="239:10">else <block pos:start="231:17" pos:end="239:10">{<block_content pos:start="233:13" pos:end="237:37">

            <expr_stmt pos:start="233:13" pos:end="233:55"><expr pos:start="233:13" pos:end="233:54"><name pos:start="233:13" pos:end="233:20">constant</name> <operator pos:start="233:22" pos:end="233:22">=</operator> <call pos:start="233:24" pos:end="233:54"><name pos:start="233:24" pos:end="233:41">MASK_OP_BRC_CONST4</name><argument_list pos:start="233:42" pos:end="233:54">(<argument pos:start="233:43" pos:end="233:53"><expr pos:start="233:43" pos:end="233:53"><name pos:start="233:43" pos:end="233:53"><name pos:start="233:43" pos:end="233:45">ctx</name><operator pos:start="233:46" pos:end="233:47">-&gt;</operator><name pos:start="233:48" pos:end="233:53">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="237:37"><expr pos:start="235:13" pos:end="237:36"><call pos:start="235:13" pos:end="237:36"><name pos:start="235:13" pos:end="235:28">gen_branch_condi</name><argument_list pos:start="235:29" pos:end="237:36">(<argument pos:start="235:30" pos:end="235:32"><expr pos:start="235:30" pos:end="235:32"><name pos:start="235:30" pos:end="235:32">ctx</name></expr></argument>, <argument pos:start="235:35" pos:end="235:46"><expr pos:start="235:35" pos:end="235:46"><name pos:start="235:35" pos:end="235:46">TCG_COND_GEU</name></expr></argument>, <argument pos:start="235:49" pos:end="235:61"><expr pos:start="235:49" pos:end="235:61"><name pos:start="235:49" pos:end="235:61"><name pos:start="235:49" pos:end="235:57">cpu_gpr_d</name><index pos:start="235:58" pos:end="235:61">[<expr pos:start="235:59" pos:end="235:60"><name pos:start="235:59" pos:end="235:60">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="235:64" pos:end="235:71"><expr pos:start="235:64" pos:end="235:71"><name pos:start="235:64" pos:end="235:71">constant</name></expr></argument>,

                             <argument pos:start="237:30" pos:end="237:35"><expr pos:start="237:30" pos:end="237:35"><name pos:start="237:30" pos:end="237:35">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></else></if_stmt>

         <break pos:start="241:10" pos:end="241:15">break;</break>

    <case pos:start="243:5" pos:end="243:25">case <expr pos:start="243:10" pos:end="243:24"><name pos:start="243:10" pos:end="243:24">OPCM_32_BRC_JLT</name></expr>:</case>

         <if_stmt pos:start="245:10" pos:end="257:10"><if pos:start="245:10" pos:end="249:10">if <condition pos:start="245:13" pos:end="245:61">(<expr pos:start="245:14" pos:end="245:60"><call pos:start="245:14" pos:end="245:41"><name pos:start="245:14" pos:end="245:28">MASK_OP_BRC_OP2</name><argument_list pos:start="245:29" pos:end="245:41">(<argument pos:start="245:30" pos:end="245:40"><expr pos:start="245:30" pos:end="245:40"><name pos:start="245:30" pos:end="245:40"><name pos:start="245:30" pos:end="245:32">ctx</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:40">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="245:43" pos:end="245:44">==</operator> <name pos:start="245:46" pos:end="245:60">OPC2_32_BRC_JLT</name></expr>)</condition> <block pos:start="245:63" pos:end="249:10">{<block_content pos:start="247:13" pos:end="247:80">

            <expr_stmt pos:start="247:13" pos:end="247:80"><expr pos:start="247:13" pos:end="247:79"><call pos:start="247:13" pos:end="247:79"><name pos:start="247:13" pos:end="247:28">gen_branch_condi</name><argument_list pos:start="247:29" pos:end="247:79">(<argument pos:start="247:30" pos:end="247:32"><expr pos:start="247:30" pos:end="247:32"><name pos:start="247:30" pos:end="247:32">ctx</name></expr></argument>, <argument pos:start="247:35" pos:end="247:45"><expr pos:start="247:35" pos:end="247:45"><name pos:start="247:35" pos:end="247:45">TCG_COND_LT</name></expr></argument>, <argument pos:start="247:48" pos:end="247:60"><expr pos:start="247:48" pos:end="247:60"><name pos:start="247:48" pos:end="247:60"><name pos:start="247:48" pos:end="247:56">cpu_gpr_d</name><index pos:start="247:57" pos:end="247:60">[<expr pos:start="247:58" pos:end="247:59"><name pos:start="247:58" pos:end="247:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="247:63" pos:end="247:70"><expr pos:start="247:63" pos:end="247:70"><name pos:start="247:63" pos:end="247:70">constant</name></expr></argument>, <argument pos:start="247:73" pos:end="247:78"><expr pos:start="247:73" pos:end="247:78"><name pos:start="247:73" pos:end="247:78">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></if> <else pos:start="249:12" pos:end="257:10">else <block pos:start="249:17" pos:end="257:10">{<block_content pos:start="251:13" pos:end="255:37">

            <expr_stmt pos:start="251:13" pos:end="251:55"><expr pos:start="251:13" pos:end="251:54"><name pos:start="251:13" pos:end="251:20">constant</name> <operator pos:start="251:22" pos:end="251:22">=</operator> <call pos:start="251:24" pos:end="251:54"><name pos:start="251:24" pos:end="251:41">MASK_OP_BRC_CONST4</name><argument_list pos:start="251:42" pos:end="251:54">(<argument pos:start="251:43" pos:end="251:53"><expr pos:start="251:43" pos:end="251:53"><name pos:start="251:43" pos:end="251:53"><name pos:start="251:43" pos:end="251:45">ctx</name><operator pos:start="251:46" pos:end="251:47">-&gt;</operator><name pos:start="251:48" pos:end="251:53">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="255:37"><expr pos:start="253:13" pos:end="255:36"><call pos:start="253:13" pos:end="255:36"><name pos:start="253:13" pos:end="253:28">gen_branch_condi</name><argument_list pos:start="253:29" pos:end="255:36">(<argument pos:start="253:30" pos:end="253:32"><expr pos:start="253:30" pos:end="253:32"><name pos:start="253:30" pos:end="253:32">ctx</name></expr></argument>, <argument pos:start="253:35" pos:end="253:46"><expr pos:start="253:35" pos:end="253:46"><name pos:start="253:35" pos:end="253:46">TCG_COND_LTU</name></expr></argument>, <argument pos:start="253:49" pos:end="253:61"><expr pos:start="253:49" pos:end="253:61"><name pos:start="253:49" pos:end="253:61"><name pos:start="253:49" pos:end="253:57">cpu_gpr_d</name><index pos:start="253:58" pos:end="253:61">[<expr pos:start="253:59" pos:end="253:60"><name pos:start="253:59" pos:end="253:60">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="253:64" pos:end="253:71"><expr pos:start="253:64" pos:end="253:71"><name pos:start="253:64" pos:end="253:71">constant</name></expr></argument>,

                             <argument pos:start="255:30" pos:end="255:35"><expr pos:start="255:30" pos:end="255:35"><name pos:start="255:30" pos:end="255:35">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         </block_content>}</block></else></if_stmt>

         <break pos:start="259:10" pos:end="259:15">break;</break>

    <case pos:start="261:5" pos:end="261:25">case <expr pos:start="261:10" pos:end="261:24"><name pos:start="261:10" pos:end="261:24">OPCM_32_BRC_JNE</name></expr>:</case>

        <expr_stmt pos:start="263:9" pos:end="263:30"><expr pos:start="263:9" pos:end="263:29"><name pos:start="263:9" pos:end="263:12">temp</name> <operator pos:start="263:14" pos:end="263:14">=</operator> <call pos:start="263:16" pos:end="263:29"><name pos:start="263:16" pos:end="263:27">tcg_temp_new</name><argument_list pos:start="263:28" pos:end="263:29">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="285:9"><if pos:start="265:9" pos:end="275:9">if <condition pos:start="265:12" pos:end="265:61">(<expr pos:start="265:13" pos:end="265:60"><call pos:start="265:13" pos:end="265:40"><name pos:start="265:13" pos:end="265:27">MASK_OP_BRC_OP2</name><argument_list pos:start="265:28" pos:end="265:40">(<argument pos:start="265:29" pos:end="265:39"><expr pos:start="265:29" pos:end="265:39"><name pos:start="265:29" pos:end="265:39"><name pos:start="265:29" pos:end="265:31">ctx</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="265:42" pos:end="265:43">==</operator> <name pos:start="265:45" pos:end="265:60">OPC2_32_BRC_JNED</name></expr>)</condition> <block pos:start="265:63" pos:end="275:9">{<block_content pos:start="267:13" pos:end="273:71">

            <expr_stmt pos:start="267:13" pos:end="267:48"><expr pos:start="267:13" pos:end="267:47"><call pos:start="267:13" pos:end="267:47"><name pos:start="267:13" pos:end="267:26">tcg_gen_mov_tl</name><argument_list pos:start="267:27" pos:end="267:47">(<argument pos:start="267:28" pos:end="267:31"><expr pos:start="267:28" pos:end="267:31"><name pos:start="267:28" pos:end="267:31">temp</name></expr></argument>, <argument pos:start="267:34" pos:end="267:46"><expr pos:start="267:34" pos:end="267:46"><name pos:start="267:34" pos:end="267:46"><name pos:start="267:34" pos:end="267:42">cpu_gpr_d</name><index pos:start="267:43" pos:end="267:46">[<expr pos:start="267:44" pos:end="267:45"><name pos:start="267:44" pos:end="267:45">r1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="269:13" pos:end="269:39">/* subi is unconditional */</comment>

            <expr_stmt pos:start="271:13" pos:end="271:61"><expr pos:start="271:13" pos:end="271:60"><call pos:start="271:13" pos:end="271:60"><name pos:start="271:13" pos:end="271:27">tcg_gen_subi_tl</name><argument_list pos:start="271:28" pos:end="271:60">(<argument pos:start="271:29" pos:end="271:41"><expr pos:start="271:29" pos:end="271:41"><name pos:start="271:29" pos:end="271:41"><name pos:start="271:29" pos:end="271:37">cpu_gpr_d</name><index pos:start="271:38" pos:end="271:41">[<expr pos:start="271:39" pos:end="271:40"><name pos:start="271:39" pos:end="271:40">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="271:44" pos:end="271:56"><expr pos:start="271:44" pos:end="271:56"><name pos:start="271:44" pos:end="271:56"><name pos:start="271:44" pos:end="271:52">cpu_gpr_d</name><index pos:start="271:53" pos:end="271:56">[<expr pos:start="271:54" pos:end="271:55"><name pos:start="271:54" pos:end="271:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="271:59" pos:end="271:59"><expr pos:start="271:59" pos:end="271:59"><literal type="number" pos:start="271:59" pos:end="271:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:71"><expr pos:start="273:13" pos:end="273:70"><call pos:start="273:13" pos:end="273:70"><name pos:start="273:13" pos:end="273:28">gen_branch_condi</name><argument_list pos:start="273:29" pos:end="273:70">(<argument pos:start="273:30" pos:end="273:32"><expr pos:start="273:30" pos:end="273:32"><name pos:start="273:30" pos:end="273:32">ctx</name></expr></argument>, <argument pos:start="273:35" pos:end="273:45"><expr pos:start="273:35" pos:end="273:45"><name pos:start="273:35" pos:end="273:45">TCG_COND_NE</name></expr></argument>, <argument pos:start="273:48" pos:end="273:51"><expr pos:start="273:48" pos:end="273:51"><name pos:start="273:48" pos:end="273:51">temp</name></expr></argument>, <argument pos:start="273:54" pos:end="273:61"><expr pos:start="273:54" pos:end="273:61"><name pos:start="273:54" pos:end="273:61">constant</name></expr></argument>, <argument pos:start="273:64" pos:end="273:69"><expr pos:start="273:64" pos:end="273:69"><name pos:start="273:64" pos:end="273:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="275:11" pos:end="285:9">else <block pos:start="275:16" pos:end="285:9">{<block_content pos:start="277:13" pos:end="283:71">

            <expr_stmt pos:start="277:13" pos:end="277:48"><expr pos:start="277:13" pos:end="277:47"><call pos:start="277:13" pos:end="277:47"><name pos:start="277:13" pos:end="277:26">tcg_gen_mov_tl</name><argument_list pos:start="277:27" pos:end="277:47">(<argument pos:start="277:28" pos:end="277:31"><expr pos:start="277:28" pos:end="277:31"><name pos:start="277:28" pos:end="277:31">temp</name></expr></argument>, <argument pos:start="277:34" pos:end="277:46"><expr pos:start="277:34" pos:end="277:46"><name pos:start="277:34" pos:end="277:46"><name pos:start="277:34" pos:end="277:42">cpu_gpr_d</name><index pos:start="277:43" pos:end="277:46">[<expr pos:start="277:44" pos:end="277:45"><name pos:start="277:44" pos:end="277:45">r1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="279:13" pos:end="279:39">/* addi is unconditional */</comment>

            <expr_stmt pos:start="281:13" pos:end="281:61"><expr pos:start="281:13" pos:end="281:60"><call pos:start="281:13" pos:end="281:60"><name pos:start="281:13" pos:end="281:27">tcg_gen_addi_tl</name><argument_list pos:start="281:28" pos:end="281:60">(<argument pos:start="281:29" pos:end="281:41"><expr pos:start="281:29" pos:end="281:41"><name pos:start="281:29" pos:end="281:41"><name pos:start="281:29" pos:end="281:37">cpu_gpr_d</name><index pos:start="281:38" pos:end="281:41">[<expr pos:start="281:39" pos:end="281:40"><name pos:start="281:39" pos:end="281:40">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="281:44" pos:end="281:56"><expr pos:start="281:44" pos:end="281:56"><name pos:start="281:44" pos:end="281:56"><name pos:start="281:44" pos:end="281:52">cpu_gpr_d</name><index pos:start="281:53" pos:end="281:56">[<expr pos:start="281:54" pos:end="281:55"><name pos:start="281:54" pos:end="281:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="281:59" pos:end="281:59"><expr pos:start="281:59" pos:end="281:59"><literal type="number" pos:start="281:59" pos:end="281:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:71"><expr pos:start="283:13" pos:end="283:70"><call pos:start="283:13" pos:end="283:70"><name pos:start="283:13" pos:end="283:28">gen_branch_condi</name><argument_list pos:start="283:29" pos:end="283:70">(<argument pos:start="283:30" pos:end="283:32"><expr pos:start="283:30" pos:end="283:32"><name pos:start="283:30" pos:end="283:32">ctx</name></expr></argument>, <argument pos:start="283:35" pos:end="283:45"><expr pos:start="283:35" pos:end="283:45"><name pos:start="283:35" pos:end="283:45">TCG_COND_NE</name></expr></argument>, <argument pos:start="283:48" pos:end="283:51"><expr pos:start="283:48" pos:end="283:51"><name pos:start="283:48" pos:end="283:51">temp</name></expr></argument>, <argument pos:start="283:54" pos:end="283:61"><expr pos:start="283:54" pos:end="283:61"><name pos:start="283:54" pos:end="283:61">constant</name></expr></argument>, <argument pos:start="283:64" pos:end="283:69"><expr pos:start="283:64" pos:end="283:69"><name pos:start="283:64" pos:end="283:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:28"><expr pos:start="287:9" pos:end="287:27"><call pos:start="287:9" pos:end="287:27"><name pos:start="287:9" pos:end="287:21">tcg_temp_free</name><argument_list pos:start="287:22" pos:end="287:27">(<argument pos:start="287:23" pos:end="287:26"><expr pos:start="287:23" pos:end="287:26"><name pos:start="287:23" pos:end="287:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

<comment type="block" pos:start="291:1" pos:end="291:16">/* BRN format */</comment>

    <case pos:start="293:5" pos:end="293:25">case <expr pos:start="293:10" pos:end="293:24"><name pos:start="293:10" pos:end="293:24">OPCM_32_BRN_JTT</name></expr>:</case>

        <expr_stmt pos:start="295:9" pos:end="295:39"><expr pos:start="295:9" pos:end="295:38"><name pos:start="295:9" pos:end="295:9">n</name> <operator pos:start="295:11" pos:end="295:11">=</operator> <call pos:start="295:13" pos:end="295:38"><name pos:start="295:13" pos:end="295:25">MASK_OP_BRN_N</name><argument_list pos:start="295:26" pos:end="295:38">(<argument pos:start="295:27" pos:end="295:37"><expr pos:start="295:27" pos:end="295:37"><name pos:start="295:27" pos:end="295:37"><name pos:start="295:27" pos:end="295:29">ctx</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:37">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="299:9" pos:end="299:30"><expr pos:start="299:9" pos:end="299:29"><name pos:start="299:9" pos:end="299:12">temp</name> <operator pos:start="299:14" pos:end="299:14">=</operator> <call pos:start="299:16" pos:end="299:29"><name pos:start="299:16" pos:end="299:27">tcg_temp_new</name><argument_list pos:start="299:28" pos:end="299:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:55"><expr pos:start="301:9" pos:end="301:54"><call pos:start="301:9" pos:end="301:54"><name pos:start="301:9" pos:end="301:23">tcg_gen_andi_tl</name><argument_list pos:start="301:24" pos:end="301:54">(<argument pos:start="301:25" pos:end="301:28"><expr pos:start="301:25" pos:end="301:28"><name pos:start="301:25" pos:end="301:28">temp</name></expr></argument>, <argument pos:start="301:31" pos:end="301:43"><expr pos:start="301:31" pos:end="301:43"><name pos:start="301:31" pos:end="301:43"><name pos:start="301:31" pos:end="301:39">cpu_gpr_d</name><index pos:start="301:40" pos:end="301:43">[<expr pos:start="301:41" pos:end="301:42"><name pos:start="301:41" pos:end="301:42">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="301:46" pos:end="301:53"><expr pos:start="301:46" pos:end="301:53"><operator pos:start="301:46" pos:end="301:46">(</operator><literal type="number" pos:start="301:47" pos:end="301:47">1</literal> <operator pos:start="301:49" pos:end="301:50">&lt;&lt;</operator> <name pos:start="301:52" pos:end="301:52">n</name><operator pos:start="301:53" pos:end="301:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="305:9" pos:end="313:9"><if pos:start="305:9" pos:end="309:9">if <condition pos:start="305:12" pos:end="305:62">(<expr pos:start="305:13" pos:end="305:61"><call pos:start="305:13" pos:end="305:40"><name pos:start="305:13" pos:end="305:27">MASK_OP_BRN_OP2</name><argument_list pos:start="305:28" pos:end="305:40">(<argument pos:start="305:29" pos:end="305:39"><expr pos:start="305:29" pos:end="305:39"><name pos:start="305:29" pos:end="305:39"><name pos:start="305:29" pos:end="305:31">ctx</name><operator pos:start="305:32" pos:end="305:33">-&gt;</operator><name pos:start="305:34" pos:end="305:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="305:42" pos:end="305:43">==</operator> <name pos:start="305:45" pos:end="305:61">OPC2_32_BRN_JNZ_T</name></expr>)</condition> <block pos:start="305:64" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:64">

            <expr_stmt pos:start="307:13" pos:end="307:64"><expr pos:start="307:13" pos:end="307:63"><call pos:start="307:13" pos:end="307:63"><name pos:start="307:13" pos:end="307:28">gen_branch_condi</name><argument_list pos:start="307:29" pos:end="307:63">(<argument pos:start="307:30" pos:end="307:32"><expr pos:start="307:30" pos:end="307:32"><name pos:start="307:30" pos:end="307:32">ctx</name></expr></argument>, <argument pos:start="307:35" pos:end="307:45"><expr pos:start="307:35" pos:end="307:45"><name pos:start="307:35" pos:end="307:45">TCG_COND_NE</name></expr></argument>, <argument pos:start="307:48" pos:end="307:51"><expr pos:start="307:48" pos:end="307:51"><name pos:start="307:48" pos:end="307:51">temp</name></expr></argument>, <argument pos:start="307:54" pos:end="307:54"><expr pos:start="307:54" pos:end="307:54"><literal type="number" pos:start="307:54" pos:end="307:54">0</literal></expr></argument>, <argument pos:start="307:57" pos:end="307:62"><expr pos:start="307:57" pos:end="307:62"><name pos:start="307:57" pos:end="307:62">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="309:11" pos:end="313:9">else <block pos:start="309:16" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:64">

            <expr_stmt pos:start="311:13" pos:end="311:64"><expr pos:start="311:13" pos:end="311:63"><call pos:start="311:13" pos:end="311:63"><name pos:start="311:13" pos:end="311:28">gen_branch_condi</name><argument_list pos:start="311:29" pos:end="311:63">(<argument pos:start="311:30" pos:end="311:32"><expr pos:start="311:30" pos:end="311:32"><name pos:start="311:30" pos:end="311:32">ctx</name></expr></argument>, <argument pos:start="311:35" pos:end="311:45"><expr pos:start="311:35" pos:end="311:45"><name pos:start="311:35" pos:end="311:45">TCG_COND_EQ</name></expr></argument>, <argument pos:start="311:48" pos:end="311:51"><expr pos:start="311:48" pos:end="311:51"><name pos:start="311:48" pos:end="311:51">temp</name></expr></argument>, <argument pos:start="311:54" pos:end="311:54"><expr pos:start="311:54" pos:end="311:54"><literal type="number" pos:start="311:54" pos:end="311:54">0</literal></expr></argument>, <argument pos:start="311:57" pos:end="311:62"><expr pos:start="311:57" pos:end="311:62"><name pos:start="311:57" pos:end="311:62">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:28"><expr pos:start="315:9" pos:end="315:27"><call pos:start="315:9" pos:end="315:27"><name pos:start="315:9" pos:end="315:21">tcg_temp_free</name><argument_list pos:start="315:22" pos:end="315:27">(<argument pos:start="315:23" pos:end="315:26"><expr pos:start="315:23" pos:end="315:26"><name pos:start="315:23" pos:end="315:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="317:9" pos:end="317:14">break;</break>

<comment type="block" pos:start="319:1" pos:end="319:16">/* BRR Format */</comment>

    <case pos:start="321:5" pos:end="321:28">case <expr pos:start="321:10" pos:end="321:27"><name pos:start="321:10" pos:end="321:27">OPCM_32_BRR_EQ_NEQ</name></expr>:</case>

        <if_stmt pos:start="323:9" pos:end="335:9"><if pos:start="323:9" pos:end="329:9">if <condition pos:start="323:12" pos:end="323:60">(<expr pos:start="323:13" pos:end="323:59"><call pos:start="323:13" pos:end="323:40"><name pos:start="323:13" pos:end="323:27">MASK_OP_BRR_OP2</name><argument_list pos:start="323:28" pos:end="323:40">(<argument pos:start="323:29" pos:end="323:39"><expr pos:start="323:29" pos:end="323:39"><name pos:start="323:29" pos:end="323:39"><name pos:start="323:29" pos:end="323:31">ctx</name><operator pos:start="323:32" pos:end="323:33">-&gt;</operator><name pos:start="323:34" pos:end="323:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="323:42" pos:end="323:43">==</operator> <name pos:start="323:45" pos:end="323:59">OPC2_32_BRR_JEQ</name></expr>)</condition> <block pos:start="323:62" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:36">

            <expr_stmt pos:start="325:13" pos:end="327:36"><expr pos:start="325:13" pos:end="327:35"><call pos:start="325:13" pos:end="327:35"><name pos:start="325:13" pos:end="325:27">gen_branch_cond</name><argument_list pos:start="325:28" pos:end="327:35">(<argument pos:start="325:29" pos:end="325:31"><expr pos:start="325:29" pos:end="325:31"><name pos:start="325:29" pos:end="325:31">ctx</name></expr></argument>, <argument pos:start="325:34" pos:end="325:44"><expr pos:start="325:34" pos:end="325:44"><name pos:start="325:34" pos:end="325:44">TCG_COND_EQ</name></expr></argument>, <argument pos:start="325:47" pos:end="325:59"><expr pos:start="325:47" pos:end="325:59"><name pos:start="325:47" pos:end="325:59"><name pos:start="325:47" pos:end="325:55">cpu_gpr_d</name><index pos:start="325:56" pos:end="325:59">[<expr pos:start="325:57" pos:end="325:58"><name pos:start="325:57" pos:end="325:58">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="325:62" pos:end="325:74"><expr pos:start="325:62" pos:end="325:74"><name pos:start="325:62" pos:end="325:74"><name pos:start="325:62" pos:end="325:70">cpu_gpr_d</name><index pos:start="325:71" pos:end="325:74">[<expr pos:start="325:72" pos:end="325:73"><name pos:start="325:72" pos:end="325:73">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="327:29" pos:end="327:34"><expr pos:start="327:29" pos:end="327:34"><name pos:start="327:29" pos:end="327:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="335:9">else <block pos:start="329:16" pos:end="335:9">{<block_content pos:start="331:13" pos:end="333:36">

            <expr_stmt pos:start="331:13" pos:end="333:36"><expr pos:start="331:13" pos:end="333:35"><call pos:start="331:13" pos:end="333:35"><name pos:start="331:13" pos:end="331:27">gen_branch_cond</name><argument_list pos:start="331:28" pos:end="333:35">(<argument pos:start="331:29" pos:end="331:31"><expr pos:start="331:29" pos:end="331:31"><name pos:start="331:29" pos:end="331:31">ctx</name></expr></argument>, <argument pos:start="331:34" pos:end="331:44"><expr pos:start="331:34" pos:end="331:44"><name pos:start="331:34" pos:end="331:44">TCG_COND_NE</name></expr></argument>, <argument pos:start="331:47" pos:end="331:59"><expr pos:start="331:47" pos:end="331:59"><name pos:start="331:47" pos:end="331:59"><name pos:start="331:47" pos:end="331:55">cpu_gpr_d</name><index pos:start="331:56" pos:end="331:59">[<expr pos:start="331:57" pos:end="331:58"><name pos:start="331:57" pos:end="331:58">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="331:62" pos:end="331:74"><expr pos:start="331:62" pos:end="331:74"><name pos:start="331:62" pos:end="331:74"><name pos:start="331:62" pos:end="331:70">cpu_gpr_d</name><index pos:start="331:71" pos:end="331:74">[<expr pos:start="331:72" pos:end="331:73"><name pos:start="331:72" pos:end="331:73">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="333:29" pos:end="333:34"><expr pos:start="333:29" pos:end="333:34"><name pos:start="333:29" pos:end="333:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="337:9" pos:end="337:14">break;</break>

    <case pos:start="339:5" pos:end="339:33">case <expr pos:start="339:10" pos:end="339:32"><name pos:start="339:10" pos:end="339:32">OPCM_32_BRR_ADDR_EQ_NEQ</name></expr>:</case>

        <if_stmt pos:start="341:9" pos:end="353:9"><if pos:start="341:9" pos:end="347:9">if <condition pos:start="341:12" pos:end="341:62">(<expr pos:start="341:13" pos:end="341:61"><call pos:start="341:13" pos:end="341:40"><name pos:start="341:13" pos:end="341:27">MASK_OP_BRR_OP2</name><argument_list pos:start="341:28" pos:end="341:40">(<argument pos:start="341:29" pos:end="341:39"><expr pos:start="341:29" pos:end="341:39"><name pos:start="341:29" pos:end="341:39"><name pos:start="341:29" pos:end="341:31">ctx</name><operator pos:start="341:32" pos:end="341:33">-&gt;</operator><name pos:start="341:34" pos:end="341:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="341:42" pos:end="341:43">==</operator> <name pos:start="341:45" pos:end="341:61">OPC2_32_BRR_JEQ_A</name></expr>)</condition> <block pos:start="341:64" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:36">

            <expr_stmt pos:start="343:13" pos:end="345:36"><expr pos:start="343:13" pos:end="345:35"><call pos:start="343:13" pos:end="345:35"><name pos:start="343:13" pos:end="343:27">gen_branch_cond</name><argument_list pos:start="343:28" pos:end="345:35">(<argument pos:start="343:29" pos:end="343:31"><expr pos:start="343:29" pos:end="343:31"><name pos:start="343:29" pos:end="343:31">ctx</name></expr></argument>, <argument pos:start="343:34" pos:end="343:44"><expr pos:start="343:34" pos:end="343:44"><name pos:start="343:34" pos:end="343:44">TCG_COND_EQ</name></expr></argument>, <argument pos:start="343:47" pos:end="343:59"><expr pos:start="343:47" pos:end="343:59"><name pos:start="343:47" pos:end="343:59"><name pos:start="343:47" pos:end="343:55">cpu_gpr_a</name><index pos:start="343:56" pos:end="343:59">[<expr pos:start="343:57" pos:end="343:58"><name pos:start="343:57" pos:end="343:58">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="343:62" pos:end="343:74"><expr pos:start="343:62" pos:end="343:74"><name pos:start="343:62" pos:end="343:74"><name pos:start="343:62" pos:end="343:70">cpu_gpr_a</name><index pos:start="343:71" pos:end="343:74">[<expr pos:start="343:72" pos:end="343:73"><name pos:start="343:72" pos:end="343:73">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="345:29" pos:end="345:34"><expr pos:start="345:29" pos:end="345:34"><name pos:start="345:29" pos:end="345:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="347:11" pos:end="353:9">else <block pos:start="347:16" pos:end="353:9">{<block_content pos:start="349:13" pos:end="351:36">

            <expr_stmt pos:start="349:13" pos:end="351:36"><expr pos:start="349:13" pos:end="351:35"><call pos:start="349:13" pos:end="351:35"><name pos:start="349:13" pos:end="349:27">gen_branch_cond</name><argument_list pos:start="349:28" pos:end="351:35">(<argument pos:start="349:29" pos:end="349:31"><expr pos:start="349:29" pos:end="349:31"><name pos:start="349:29" pos:end="349:31">ctx</name></expr></argument>, <argument pos:start="349:34" pos:end="349:44"><expr pos:start="349:34" pos:end="349:44"><name pos:start="349:34" pos:end="349:44">TCG_COND_NE</name></expr></argument>, <argument pos:start="349:47" pos:end="349:59"><expr pos:start="349:47" pos:end="349:59"><name pos:start="349:47" pos:end="349:59"><name pos:start="349:47" pos:end="349:55">cpu_gpr_a</name><index pos:start="349:56" pos:end="349:59">[<expr pos:start="349:57" pos:end="349:58"><name pos:start="349:57" pos:end="349:58">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="349:62" pos:end="349:74"><expr pos:start="349:62" pos:end="349:74"><name pos:start="349:62" pos:end="349:74"><name pos:start="349:62" pos:end="349:70">cpu_gpr_a</name><index pos:start="349:71" pos:end="349:74">[<expr pos:start="349:72" pos:end="349:73"><name pos:start="349:72" pos:end="349:73">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="351:29" pos:end="351:34"><expr pos:start="351:29" pos:end="351:34"><name pos:start="351:29" pos:end="351:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="355:9" pos:end="355:14">break;</break>

    <case pos:start="357:5" pos:end="357:24">case <expr pos:start="357:10" pos:end="357:23"><name pos:start="357:10" pos:end="357:23">OPCM_32_BRR_GE</name></expr>:</case>

        <if_stmt pos:start="359:9" pos:end="371:9"><if pos:start="359:9" pos:end="365:9">if <condition pos:start="359:12" pos:end="359:60">(<expr pos:start="359:13" pos:end="359:59"><call pos:start="359:13" pos:end="359:40"><name pos:start="359:13" pos:end="359:27">MASK_OP_BRR_OP2</name><argument_list pos:start="359:28" pos:end="359:40">(<argument pos:start="359:29" pos:end="359:39"><expr pos:start="359:29" pos:end="359:39"><name pos:start="359:29" pos:end="359:39"><name pos:start="359:29" pos:end="359:31">ctx</name><operator pos:start="359:32" pos:end="359:33">-&gt;</operator><name pos:start="359:34" pos:end="359:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="359:42" pos:end="359:43">==</operator> <name pos:start="359:45" pos:end="359:59">OPC2_32_BRR_JGE</name></expr>)</condition> <block pos:start="359:62" pos:end="365:9">{<block_content pos:start="361:13" pos:end="363:36">

            <expr_stmt pos:start="361:13" pos:end="363:36"><expr pos:start="361:13" pos:end="363:35"><call pos:start="361:13" pos:end="363:35"><name pos:start="361:13" pos:end="361:27">gen_branch_cond</name><argument_list pos:start="361:28" pos:end="363:35">(<argument pos:start="361:29" pos:end="361:31"><expr pos:start="361:29" pos:end="361:31"><name pos:start="361:29" pos:end="361:31">ctx</name></expr></argument>, <argument pos:start="361:34" pos:end="361:44"><expr pos:start="361:34" pos:end="361:44"><name pos:start="361:34" pos:end="361:44">TCG_COND_GE</name></expr></argument>, <argument pos:start="361:47" pos:end="361:59"><expr pos:start="361:47" pos:end="361:59"><name pos:start="361:47" pos:end="361:59"><name pos:start="361:47" pos:end="361:55">cpu_gpr_d</name><index pos:start="361:56" pos:end="361:59">[<expr pos:start="361:57" pos:end="361:58"><name pos:start="361:57" pos:end="361:58">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="361:62" pos:end="361:74"><expr pos:start="361:62" pos:end="361:74"><name pos:start="361:62" pos:end="361:74"><name pos:start="361:62" pos:end="361:70">cpu_gpr_d</name><index pos:start="361:71" pos:end="361:74">[<expr pos:start="361:72" pos:end="361:73"><name pos:start="361:72" pos:end="361:73">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="363:29" pos:end="363:34"><expr pos:start="363:29" pos:end="363:34"><name pos:start="363:29" pos:end="363:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="365:11" pos:end="371:9">else <block pos:start="365:16" pos:end="371:9">{<block_content pos:start="367:13" pos:end="369:36">

            <expr_stmt pos:start="367:13" pos:end="369:36"><expr pos:start="367:13" pos:end="369:35"><call pos:start="367:13" pos:end="369:35"><name pos:start="367:13" pos:end="367:27">gen_branch_cond</name><argument_list pos:start="367:28" pos:end="369:35">(<argument pos:start="367:29" pos:end="367:31"><expr pos:start="367:29" pos:end="367:31"><name pos:start="367:29" pos:end="367:31">ctx</name></expr></argument>, <argument pos:start="367:34" pos:end="367:45"><expr pos:start="367:34" pos:end="367:45"><name pos:start="367:34" pos:end="367:45">TCG_COND_GEU</name></expr></argument>, <argument pos:start="367:48" pos:end="367:60"><expr pos:start="367:48" pos:end="367:60"><name pos:start="367:48" pos:end="367:60"><name pos:start="367:48" pos:end="367:56">cpu_gpr_d</name><index pos:start="367:57" pos:end="367:60">[<expr pos:start="367:58" pos:end="367:59"><name pos:start="367:58" pos:end="367:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="367:63" pos:end="367:75"><expr pos:start="367:63" pos:end="367:75"><name pos:start="367:63" pos:end="367:75"><name pos:start="367:63" pos:end="367:71">cpu_gpr_d</name><index pos:start="367:72" pos:end="367:75">[<expr pos:start="367:73" pos:end="367:74"><name pos:start="367:73" pos:end="367:74">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="369:29" pos:end="369:34"><expr pos:start="369:29" pos:end="369:34"><name pos:start="369:29" pos:end="369:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:25">case <expr pos:start="375:10" pos:end="375:24"><name pos:start="375:10" pos:end="375:24">OPCM_32_BRR_JLT</name></expr>:</case>

        <if_stmt pos:start="377:9" pos:end="389:9"><if pos:start="377:9" pos:end="383:9">if <condition pos:start="377:12" pos:end="377:60">(<expr pos:start="377:13" pos:end="377:59"><call pos:start="377:13" pos:end="377:40"><name pos:start="377:13" pos:end="377:27">MASK_OP_BRR_OP2</name><argument_list pos:start="377:28" pos:end="377:40">(<argument pos:start="377:29" pos:end="377:39"><expr pos:start="377:29" pos:end="377:39"><name pos:start="377:29" pos:end="377:39"><name pos:start="377:29" pos:end="377:31">ctx</name><operator pos:start="377:32" pos:end="377:33">-&gt;</operator><name pos:start="377:34" pos:end="377:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="377:42" pos:end="377:43">==</operator> <name pos:start="377:45" pos:end="377:59">OPC2_32_BRR_JLT</name></expr>)</condition> <block pos:start="377:62" pos:end="383:9">{<block_content pos:start="379:13" pos:end="381:36">

            <expr_stmt pos:start="379:13" pos:end="381:36"><expr pos:start="379:13" pos:end="381:35"><call pos:start="379:13" pos:end="381:35"><name pos:start="379:13" pos:end="379:27">gen_branch_cond</name><argument_list pos:start="379:28" pos:end="381:35">(<argument pos:start="379:29" pos:end="379:31"><expr pos:start="379:29" pos:end="379:31"><name pos:start="379:29" pos:end="379:31">ctx</name></expr></argument>, <argument pos:start="379:34" pos:end="379:44"><expr pos:start="379:34" pos:end="379:44"><name pos:start="379:34" pos:end="379:44">TCG_COND_LT</name></expr></argument>, <argument pos:start="379:47" pos:end="379:59"><expr pos:start="379:47" pos:end="379:59"><name pos:start="379:47" pos:end="379:59"><name pos:start="379:47" pos:end="379:55">cpu_gpr_d</name><index pos:start="379:56" pos:end="379:59">[<expr pos:start="379:57" pos:end="379:58"><name pos:start="379:57" pos:end="379:58">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="379:62" pos:end="379:74"><expr pos:start="379:62" pos:end="379:74"><name pos:start="379:62" pos:end="379:74"><name pos:start="379:62" pos:end="379:70">cpu_gpr_d</name><index pos:start="379:71" pos:end="379:74">[<expr pos:start="379:72" pos:end="379:73"><name pos:start="379:72" pos:end="379:73">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="381:29" pos:end="381:34"><expr pos:start="381:29" pos:end="381:34"><name pos:start="381:29" pos:end="381:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="383:11" pos:end="389:9">else <block pos:start="383:16" pos:end="389:9">{<block_content pos:start="385:13" pos:end="387:36">

            <expr_stmt pos:start="385:13" pos:end="387:36"><expr pos:start="385:13" pos:end="387:35"><call pos:start="385:13" pos:end="387:35"><name pos:start="385:13" pos:end="385:27">gen_branch_cond</name><argument_list pos:start="385:28" pos:end="387:35">(<argument pos:start="385:29" pos:end="385:31"><expr pos:start="385:29" pos:end="385:31"><name pos:start="385:29" pos:end="385:31">ctx</name></expr></argument>, <argument pos:start="385:34" pos:end="385:45"><expr pos:start="385:34" pos:end="385:45"><name pos:start="385:34" pos:end="385:45">TCG_COND_LTU</name></expr></argument>, <argument pos:start="385:48" pos:end="385:60"><expr pos:start="385:48" pos:end="385:60"><name pos:start="385:48" pos:end="385:60"><name pos:start="385:48" pos:end="385:56">cpu_gpr_d</name><index pos:start="385:57" pos:end="385:60">[<expr pos:start="385:58" pos:end="385:59"><name pos:start="385:58" pos:end="385:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="385:63" pos:end="385:75"><expr pos:start="385:63" pos:end="385:75"><name pos:start="385:63" pos:end="385:75"><name pos:start="385:63" pos:end="385:71">cpu_gpr_d</name><index pos:start="385:72" pos:end="385:75">[<expr pos:start="385:73" pos:end="385:74"><name pos:start="385:73" pos:end="385:74">r2</name></expr>]</index></name></expr></argument>,

                            <argument pos:start="387:29" pos:end="387:34"><expr pos:start="387:29" pos:end="387:34"><name pos:start="387:29" pos:end="387:34">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="391:9" pos:end="391:14">break;</break>

    <case pos:start="393:5" pos:end="393:26">case <expr pos:start="393:10" pos:end="393:25"><name pos:start="393:10" pos:end="393:25">OPCM_32_BRR_LOOP</name></expr>:</case>

        <if_stmt pos:start="395:9" pos:end="405:9"><if pos:start="395:9" pos:end="399:9">if <condition pos:start="395:12" pos:end="395:61">(<expr pos:start="395:13" pos:end="395:60"><call pos:start="395:13" pos:end="395:40"><name pos:start="395:13" pos:end="395:27">MASK_OP_BRR_OP2</name><argument_list pos:start="395:28" pos:end="395:40">(<argument pos:start="395:29" pos:end="395:39"><expr pos:start="395:29" pos:end="395:39"><name pos:start="395:29" pos:end="395:39"><name pos:start="395:29" pos:end="395:31">ctx</name><operator pos:start="395:32" pos:end="395:33">-&gt;</operator><name pos:start="395:34" pos:end="395:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="395:42" pos:end="395:43">==</operator> <name pos:start="395:45" pos:end="395:60">OPC2_32_BRR_LOOP</name></expr>)</condition> <block pos:start="395:63" pos:end="399:9">{<block_content pos:start="397:13" pos:end="397:42">

            <expr_stmt pos:start="397:13" pos:end="397:42"><expr pos:start="397:13" pos:end="397:41"><call pos:start="397:13" pos:end="397:41"><name pos:start="397:13" pos:end="397:20">gen_loop</name><argument_list pos:start="397:21" pos:end="397:41">(<argument pos:start="397:22" pos:end="397:24"><expr pos:start="397:22" pos:end="397:24"><name pos:start="397:22" pos:end="397:24">ctx</name></expr></argument>, <argument pos:start="397:27" pos:end="397:28"><expr pos:start="397:27" pos:end="397:28"><name pos:start="397:27" pos:end="397:28">r1</name></expr></argument>, <argument pos:start="397:31" pos:end="397:40"><expr pos:start="397:31" pos:end="397:40"><name pos:start="397:31" pos:end="397:36">offset</name> <operator pos:start="397:38" pos:end="397:38">*</operator> <literal type="number" pos:start="397:40" pos:end="397:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="399:11" pos:end="405:9">else <block pos:start="399:16" pos:end="405:9">{<block_content pos:start="403:13" pos:end="403:54">

            <comment type="block" pos:start="401:13" pos:end="401:35">/* OPC2_32_BRR_LOOPU */</comment>

            <expr_stmt pos:start="403:13" pos:end="403:54"><expr pos:start="403:13" pos:end="403:53"><call pos:start="403:13" pos:end="403:53"><name pos:start="403:13" pos:end="403:23">gen_goto_tb</name><argument_list pos:start="403:24" pos:end="403:53">(<argument pos:start="403:25" pos:end="403:27"><expr pos:start="403:25" pos:end="403:27"><name pos:start="403:25" pos:end="403:27">ctx</name></expr></argument>, <argument pos:start="403:30" pos:end="403:30"><expr pos:start="403:30" pos:end="403:30"><literal type="number" pos:start="403:30" pos:end="403:30">0</literal></expr></argument>, <argument pos:start="403:33" pos:end="403:52"><expr pos:start="403:33" pos:end="403:52"><name pos:start="403:33" pos:end="403:39"><name pos:start="403:33" pos:end="403:35">ctx</name><operator pos:start="403:36" pos:end="403:37">-&gt;</operator><name pos:start="403:38" pos:end="403:39">pc</name></name> <operator pos:start="403:41" pos:end="403:41">+</operator> <name pos:start="403:43" pos:end="403:48">offset</name> <operator pos:start="403:50" pos:end="403:50">*</operator> <literal type="number" pos:start="403:52" pos:end="403:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="407:9" pos:end="407:14">break;</break>

    <case pos:start="409:5" pos:end="409:25">case <expr pos:start="409:10" pos:end="409:24"><name pos:start="409:10" pos:end="409:24">OPCM_32_BRR_JNE</name></expr>:</case>

        <expr_stmt pos:start="411:9" pos:end="411:30"><expr pos:start="411:9" pos:end="411:29"><name pos:start="411:9" pos:end="411:12">temp</name> <operator pos:start="411:14" pos:end="411:14">=</operator> <call pos:start="411:16" pos:end="411:29"><name pos:start="411:16" pos:end="411:27">tcg_temp_new</name><argument_list pos:start="411:28" pos:end="411:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:31"><expr pos:start="413:9" pos:end="413:30"><name pos:start="413:9" pos:end="413:13">temp2</name> <operator pos:start="413:15" pos:end="413:15">=</operator> <call pos:start="413:17" pos:end="413:30"><name pos:start="413:17" pos:end="413:28">tcg_temp_new</name><argument_list pos:start="413:29" pos:end="413:30">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="415:9" pos:end="443:9"><if pos:start="415:9" pos:end="429:9">if <condition pos:start="415:12" pos:end="415:61">(<expr pos:start="415:13" pos:end="415:60"><call pos:start="415:13" pos:end="415:40"><name pos:start="415:13" pos:end="415:27">MASK_OP_BRC_OP2</name><argument_list pos:start="415:28" pos:end="415:40">(<argument pos:start="415:29" pos:end="415:39"><expr pos:start="415:29" pos:end="415:39"><name pos:start="415:29" pos:end="415:39"><name pos:start="415:29" pos:end="415:31">ctx</name><operator pos:start="415:32" pos:end="415:33">-&gt;</operator><name pos:start="415:34" pos:end="415:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="415:42" pos:end="415:43">==</operator> <name pos:start="415:45" pos:end="415:60">OPC2_32_BRR_JNED</name></expr>)</condition> <block pos:start="415:63" pos:end="429:9">{<block_content pos:start="417:13" pos:end="427:67">

            <expr_stmt pos:start="417:13" pos:end="417:48"><expr pos:start="417:13" pos:end="417:47"><call pos:start="417:13" pos:end="417:47"><name pos:start="417:13" pos:end="417:26">tcg_gen_mov_tl</name><argument_list pos:start="417:27" pos:end="417:47">(<argument pos:start="417:28" pos:end="417:31"><expr pos:start="417:28" pos:end="417:31"><name pos:start="417:28" pos:end="417:31">temp</name></expr></argument>, <argument pos:start="417:34" pos:end="417:46"><expr pos:start="417:34" pos:end="417:46"><name pos:start="417:34" pos:end="417:46"><name pos:start="417:34" pos:end="417:42">cpu_gpr_d</name><index pos:start="417:43" pos:end="417:46">[<expr pos:start="417:44" pos:end="417:45"><name pos:start="417:44" pos:end="417:45">r1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="419:13" pos:end="419:77">/* also save r2, in case of r1 == r2, so r2 is not decremented */</comment>

            <expr_stmt pos:start="421:13" pos:end="421:49"><expr pos:start="421:13" pos:end="421:48"><call pos:start="421:13" pos:end="421:48"><name pos:start="421:13" pos:end="421:26">tcg_gen_mov_tl</name><argument_list pos:start="421:27" pos:end="421:48">(<argument pos:start="421:28" pos:end="421:32"><expr pos:start="421:28" pos:end="421:32"><name pos:start="421:28" pos:end="421:32">temp2</name></expr></argument>, <argument pos:start="421:35" pos:end="421:47"><expr pos:start="421:35" pos:end="421:47"><name pos:start="421:35" pos:end="421:47"><name pos:start="421:35" pos:end="421:43">cpu_gpr_d</name><index pos:start="421:44" pos:end="421:47">[<expr pos:start="421:45" pos:end="421:46"><name pos:start="421:45" pos:end="421:46">r2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="423:13" pos:end="423:39">/* subi is unconditional */</comment>

            <expr_stmt pos:start="425:13" pos:end="425:61"><expr pos:start="425:13" pos:end="425:60"><call pos:start="425:13" pos:end="425:60"><name pos:start="425:13" pos:end="425:27">tcg_gen_subi_tl</name><argument_list pos:start="425:28" pos:end="425:60">(<argument pos:start="425:29" pos:end="425:41"><expr pos:start="425:29" pos:end="425:41"><name pos:start="425:29" pos:end="425:41"><name pos:start="425:29" pos:end="425:37">cpu_gpr_d</name><index pos:start="425:38" pos:end="425:41">[<expr pos:start="425:39" pos:end="425:40"><name pos:start="425:39" pos:end="425:40">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="425:44" pos:end="425:56"><expr pos:start="425:44" pos:end="425:56"><name pos:start="425:44" pos:end="425:56"><name pos:start="425:44" pos:end="425:52">cpu_gpr_d</name><index pos:start="425:53" pos:end="425:56">[<expr pos:start="425:54" pos:end="425:55"><name pos:start="425:54" pos:end="425:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="425:59" pos:end="425:59"><expr pos:start="425:59" pos:end="425:59"><literal type="number" pos:start="425:59" pos:end="425:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:67"><expr pos:start="427:13" pos:end="427:66"><call pos:start="427:13" pos:end="427:66"><name pos:start="427:13" pos:end="427:27">gen_branch_cond</name><argument_list pos:start="427:28" pos:end="427:66">(<argument pos:start="427:29" pos:end="427:31"><expr pos:start="427:29" pos:end="427:31"><name pos:start="427:29" pos:end="427:31">ctx</name></expr></argument>, <argument pos:start="427:34" pos:end="427:44"><expr pos:start="427:34" pos:end="427:44"><name pos:start="427:34" pos:end="427:44">TCG_COND_NE</name></expr></argument>, <argument pos:start="427:47" pos:end="427:50"><expr pos:start="427:47" pos:end="427:50"><name pos:start="427:47" pos:end="427:50">temp</name></expr></argument>, <argument pos:start="427:53" pos:end="427:57"><expr pos:start="427:53" pos:end="427:57"><name pos:start="427:53" pos:end="427:57">temp2</name></expr></argument>, <argument pos:start="427:60" pos:end="427:65"><expr pos:start="427:60" pos:end="427:65"><name pos:start="427:60" pos:end="427:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="429:11" pos:end="443:9">else <block pos:start="429:16" pos:end="443:9">{<block_content pos:start="431:13" pos:end="441:67">

            <expr_stmt pos:start="431:13" pos:end="431:48"><expr pos:start="431:13" pos:end="431:47"><call pos:start="431:13" pos:end="431:47"><name pos:start="431:13" pos:end="431:26">tcg_gen_mov_tl</name><argument_list pos:start="431:27" pos:end="431:47">(<argument pos:start="431:28" pos:end="431:31"><expr pos:start="431:28" pos:end="431:31"><name pos:start="431:28" pos:end="431:31">temp</name></expr></argument>, <argument pos:start="431:34" pos:end="431:46"><expr pos:start="431:34" pos:end="431:46"><name pos:start="431:34" pos:end="431:46"><name pos:start="431:34" pos:end="431:42">cpu_gpr_d</name><index pos:start="431:43" pos:end="431:46">[<expr pos:start="431:44" pos:end="431:45"><name pos:start="431:44" pos:end="431:45">r1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="433:13" pos:end="433:77">/* also save r2, in case of r1 == r2, so r2 is not decremented */</comment>

            <expr_stmt pos:start="435:13" pos:end="435:49"><expr pos:start="435:13" pos:end="435:48"><call pos:start="435:13" pos:end="435:48"><name pos:start="435:13" pos:end="435:26">tcg_gen_mov_tl</name><argument_list pos:start="435:27" pos:end="435:48">(<argument pos:start="435:28" pos:end="435:32"><expr pos:start="435:28" pos:end="435:32"><name pos:start="435:28" pos:end="435:32">temp2</name></expr></argument>, <argument pos:start="435:35" pos:end="435:47"><expr pos:start="435:35" pos:end="435:47"><name pos:start="435:35" pos:end="435:47"><name pos:start="435:35" pos:end="435:43">cpu_gpr_d</name><index pos:start="435:44" pos:end="435:47">[<expr pos:start="435:45" pos:end="435:46"><name pos:start="435:45" pos:end="435:46">r2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="437:13" pos:end="437:39">/* addi is unconditional */</comment>

            <expr_stmt pos:start="439:13" pos:end="439:61"><expr pos:start="439:13" pos:end="439:60"><call pos:start="439:13" pos:end="439:60"><name pos:start="439:13" pos:end="439:27">tcg_gen_addi_tl</name><argument_list pos:start="439:28" pos:end="439:60">(<argument pos:start="439:29" pos:end="439:41"><expr pos:start="439:29" pos:end="439:41"><name pos:start="439:29" pos:end="439:41"><name pos:start="439:29" pos:end="439:37">cpu_gpr_d</name><index pos:start="439:38" pos:end="439:41">[<expr pos:start="439:39" pos:end="439:40"><name pos:start="439:39" pos:end="439:40">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="439:44" pos:end="439:56"><expr pos:start="439:44" pos:end="439:56"><name pos:start="439:44" pos:end="439:56"><name pos:start="439:44" pos:end="439:52">cpu_gpr_d</name><index pos:start="439:53" pos:end="439:56">[<expr pos:start="439:54" pos:end="439:55"><name pos:start="439:54" pos:end="439:55">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="439:59" pos:end="439:59"><expr pos:start="439:59" pos:end="439:59"><literal type="number" pos:start="439:59" pos:end="439:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:67"><expr pos:start="441:13" pos:end="441:66"><call pos:start="441:13" pos:end="441:66"><name pos:start="441:13" pos:end="441:27">gen_branch_cond</name><argument_list pos:start="441:28" pos:end="441:66">(<argument pos:start="441:29" pos:end="441:31"><expr pos:start="441:29" pos:end="441:31"><name pos:start="441:29" pos:end="441:31">ctx</name></expr></argument>, <argument pos:start="441:34" pos:end="441:44"><expr pos:start="441:34" pos:end="441:44"><name pos:start="441:34" pos:end="441:44">TCG_COND_NE</name></expr></argument>, <argument pos:start="441:47" pos:end="441:50"><expr pos:start="441:47" pos:end="441:50"><name pos:start="441:47" pos:end="441:50">temp</name></expr></argument>, <argument pos:start="441:53" pos:end="441:57"><expr pos:start="441:53" pos:end="441:57"><name pos:start="441:53" pos:end="441:57">temp2</name></expr></argument>, <argument pos:start="441:60" pos:end="441:65"><expr pos:start="441:60" pos:end="441:65"><name pos:start="441:60" pos:end="441:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="445:9" pos:end="445:28"><expr pos:start="445:9" pos:end="445:27"><call pos:start="445:9" pos:end="445:27"><name pos:start="445:9" pos:end="445:21">tcg_temp_free</name><argument_list pos:start="445:22" pos:end="445:27">(<argument pos:start="445:23" pos:end="445:26"><expr pos:start="445:23" pos:end="445:26"><name pos:start="445:23" pos:end="445:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="447:9" pos:end="447:29"><expr pos:start="447:9" pos:end="447:28"><call pos:start="447:9" pos:end="447:28"><name pos:start="447:9" pos:end="447:21">tcg_temp_free</name><argument_list pos:start="447:22" pos:end="447:28">(<argument pos:start="447:23" pos:end="447:27"><expr pos:start="447:23" pos:end="447:27"><name pos:start="447:23" pos:end="447:27">temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="449:9" pos:end="449:14">break;</break>

    <case pos:start="451:5" pos:end="451:25">case <expr pos:start="451:10" pos:end="451:24"><name pos:start="451:10" pos:end="451:24">OPCM_32_BRR_JNZ</name></expr>:</case>

        <if_stmt pos:start="453:9" pos:end="461:9"><if pos:start="453:9" pos:end="457:9">if <condition pos:start="453:12" pos:end="453:62">(<expr pos:start="453:13" pos:end="453:61"><call pos:start="453:13" pos:end="453:40"><name pos:start="453:13" pos:end="453:27">MASK_OP_BRR_OP2</name><argument_list pos:start="453:28" pos:end="453:40">(<argument pos:start="453:29" pos:end="453:39"><expr pos:start="453:29" pos:end="453:39"><name pos:start="453:29" pos:end="453:39"><name pos:start="453:29" pos:end="453:31">ctx</name><operator pos:start="453:32" pos:end="453:33">-&gt;</operator><name pos:start="453:34" pos:end="453:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="453:42" pos:end="453:43">==</operator> <name pos:start="453:45" pos:end="453:61">OPC2_32_BRR_JNZ_A</name></expr>)</condition> <block pos:start="453:64" pos:end="457:9">{<block_content pos:start="455:13" pos:end="455:73">

            <expr_stmt pos:start="455:13" pos:end="455:73"><expr pos:start="455:13" pos:end="455:72"><call pos:start="455:13" pos:end="455:72"><name pos:start="455:13" pos:end="455:28">gen_branch_condi</name><argument_list pos:start="455:29" pos:end="455:72">(<argument pos:start="455:30" pos:end="455:32"><expr pos:start="455:30" pos:end="455:32"><name pos:start="455:30" pos:end="455:32">ctx</name></expr></argument>, <argument pos:start="455:35" pos:end="455:45"><expr pos:start="455:35" pos:end="455:45"><name pos:start="455:35" pos:end="455:45">TCG_COND_NE</name></expr></argument>, <argument pos:start="455:48" pos:end="455:60"><expr pos:start="455:48" pos:end="455:60"><name pos:start="455:48" pos:end="455:60"><name pos:start="455:48" pos:end="455:56">cpu_gpr_a</name><index pos:start="455:57" pos:end="455:60">[<expr pos:start="455:58" pos:end="455:59"><name pos:start="455:58" pos:end="455:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="455:63" pos:end="455:63"><expr pos:start="455:63" pos:end="455:63"><literal type="number" pos:start="455:63" pos:end="455:63">0</literal></expr></argument>, <argument pos:start="455:66" pos:end="455:71"><expr pos:start="455:66" pos:end="455:71"><name pos:start="455:66" pos:end="455:71">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="457:11" pos:end="461:9">else <block pos:start="457:16" pos:end="461:9">{<block_content pos:start="459:13" pos:end="459:73">

            <expr_stmt pos:start="459:13" pos:end="459:73"><expr pos:start="459:13" pos:end="459:72"><call pos:start="459:13" pos:end="459:72"><name pos:start="459:13" pos:end="459:28">gen_branch_condi</name><argument_list pos:start="459:29" pos:end="459:72">(<argument pos:start="459:30" pos:end="459:32"><expr pos:start="459:30" pos:end="459:32"><name pos:start="459:30" pos:end="459:32">ctx</name></expr></argument>, <argument pos:start="459:35" pos:end="459:45"><expr pos:start="459:35" pos:end="459:45"><name pos:start="459:35" pos:end="459:45">TCG_COND_EQ</name></expr></argument>, <argument pos:start="459:48" pos:end="459:60"><expr pos:start="459:48" pos:end="459:60"><name pos:start="459:48" pos:end="459:60"><name pos:start="459:48" pos:end="459:56">cpu_gpr_a</name><index pos:start="459:57" pos:end="459:60">[<expr pos:start="459:58" pos:end="459:59"><name pos:start="459:58" pos:end="459:59">r1</name></expr>]</index></name></expr></argument>, <argument pos:start="459:63" pos:end="459:63"><expr pos:start="459:63" pos:end="459:63"><literal type="number" pos:start="459:63" pos:end="459:63">0</literal></expr></argument>, <argument pos:start="459:66" pos:end="459:71"><expr pos:start="459:66" pos:end="459:71"><name pos:start="459:66" pos:end="459:71">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="463:9" pos:end="463:14">break;</break>

    <default pos:start="465:5" pos:end="465:12">default:</default>

        <expr_stmt pos:start="467:9" pos:end="467:48"><expr pos:start="467:9" pos:end="467:47"><call pos:start="467:9" pos:end="467:47"><name pos:start="467:9" pos:end="467:14">printf</name><argument_list pos:start="467:15" pos:end="467:47">(<argument pos:start="467:16" pos:end="467:37"><expr pos:start="467:16" pos:end="467:37"><literal type="string" pos:start="467:16" pos:end="467:37">"Branch Error at %x\n"</literal></expr></argument>, <argument pos:start="467:40" pos:end="467:46"><expr pos:start="467:40" pos:end="467:46"><name pos:start="467:40" pos:end="467:46"><name pos:start="467:40" pos:end="467:42">ctx</name><operator pos:start="467:43" pos:end="467:44">-&gt;</operator><name pos:start="467:45" pos:end="467:46">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="471:5" pos:end="471:28"><expr pos:start="471:5" pos:end="471:27"><name pos:start="471:5" pos:end="471:15"><name pos:start="471:5" pos:end="471:7">ctx</name><operator pos:start="471:8" pos:end="471:9">-&gt;</operator><name pos:start="471:10" pos:end="471:15">bstate</name></name> <operator pos:start="471:17" pos:end="471:17">=</operator> <name pos:start="471:19" pos:end="471:27">BS_BRANCH</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
