<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24958.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mainstone_common_init</name><parameter_list pos:start="1:34" pos:end="5:75">(<parameter pos:start="1:35" pos:end="1:65"><decl pos:start="1:35" pos:end="1:65"><type pos:start="1:35" pos:end="1:65"><name pos:start="1:35" pos:end="1:46">MemoryRegion</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:65">address_space_mem</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:55"><decl pos:start="3:35" pos:end="3:55"><type pos:start="3:35" pos:end="3:55"><name pos:start="3:35" pos:end="3:46">MachineState</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:55">machine</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:62"><decl pos:start="5:35" pos:end="5:62"><type pos:start="5:35" pos:end="5:62"><name pos:start="5:35" pos:end="5:56"><name pos:start="5:35" pos:end="5:38">enum</name> <name pos:start="5:40" pos:end="5:56">mainstone_model_e</name></name></type> <name pos:start="5:58" pos:end="5:62">model</name></decl></parameter>, <parameter pos:start="5:65" pos:end="5:74"><decl pos:start="5:65" pos:end="5:74"><type pos:start="5:65" pos:end="5:74"><name pos:start="5:65" pos:end="5:67">int</name></type> <name pos:start="5:69" pos:end="5:74">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="155:1">{<block_content pos:start="9:5" pos:end="153:48">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">sector_len</name> <init pos:start="9:25" pos:end="9:36">= <expr pos:start="9:27" pos:end="9:36"><literal type="number" pos:start="9:27" pos:end="9:29">256</literal> <operator pos:start="9:31" pos:end="9:31">*</operator> <literal type="number" pos:start="9:33" pos:end="9:36">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:65"><decl pos:start="11:5" pos:end="11:64"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:33"><name pos:start="11:12" pos:end="11:31">mainstone_flash_base</name><index pos:start="11:32" pos:end="11:33">[]</index></name> <init pos:start="11:35" pos:end="11:64">= <expr pos:start="11:37" pos:end="11:64"><block pos:start="11:37" pos:end="11:64">{ <expr pos:start="11:39" pos:end="11:49"><name pos:start="11:39" pos:end="11:49">MST_FLASH_0</name></expr>, <expr pos:start="11:52" pos:end="11:62"><name pos:start="11:52" pos:end="11:62">MST_FLASH_1</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">PXA2xxState</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">mpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">DeviceState</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:24">mst_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">DriveInfo</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">be</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:21">rom</name> <init pos:start="23:23" pos:end="23:46">= <expr pos:start="23:25" pos:end="23:46"><call pos:start="23:25" pos:end="23:46"><name pos:start="23:25" pos:end="23:29">g_new</name><argument_list pos:start="23:30" pos:end="23:46">(<argument pos:start="23:31" pos:end="23:42"><expr pos:start="23:31" pos:end="23:42"><name pos:start="23:31" pos:end="23:42">MemoryRegion</name></expr></argument>, <argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:25">cpu_model</name> <init pos:start="25:27" pos:end="25:46">= <expr pos:start="25:29" pos:end="25:46"><name pos:start="25:29" pos:end="25:46"><name pos:start="25:29" pos:end="25:35">machine</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:32"><if pos:start="29:5" pos:end="31:32">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:32"><block_content pos:start="31:9" pos:end="31:32">

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:17">cpu_model</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <literal type="string" pos:start="31:21" pos:end="31:31">"pxa270-c5"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:28">/* Setup CPU &amp; memory */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:78"><expr pos:start="37:5" pos:end="37:77"><name pos:start="37:5" pos:end="37:7">mpu</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:77"><name pos:start="37:11" pos:end="37:21">pxa270_init</name><argument_list pos:start="37:22" pos:end="37:77">(<argument pos:start="37:23" pos:end="37:39"><expr pos:start="37:23" pos:end="37:39"><name pos:start="37:23" pos:end="37:39">address_space_mem</name></expr></argument>, <argument pos:start="37:42" pos:end="37:65"><expr pos:start="37:42" pos:end="37:65"><name pos:start="37:42" pos:end="37:65"><name pos:start="37:42" pos:end="37:56">mainstone_binfo</name><operator pos:start="37:57" pos:end="37:57">.</operator><name pos:start="37:58" pos:end="37:65">ram_size</name></name></expr></argument>, <argument pos:start="37:68" pos:end="37:76"><expr pos:start="37:68" pos:end="37:76"><name pos:start="37:68" pos:end="37:76">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:41"><expr pos:start="39:5" pos:end="41:40"><call pos:start="39:5" pos:end="41:40"><name pos:start="39:5" pos:end="39:26">memory_region_init_ram</name><argument_list pos:start="39:27" pos:end="41:40">(<argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">rom</name></expr></argument>, <argument pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:36"><name pos:start="39:33" pos:end="39:36">NULL</name></expr></argument>, <argument pos:start="39:39" pos:end="39:53"><expr pos:start="39:39" pos:end="39:53"><literal type="string" pos:start="39:39" pos:end="39:53">"mainstone.rom"</literal></expr></argument>, <argument pos:start="39:56" pos:end="39:68"><expr pos:start="39:56" pos:end="39:68"><name pos:start="39:56" pos:end="39:68">MAINSTONE_ROM</name></expr></argument>,

                           <argument pos:start="41:28" pos:end="41:39"><expr pos:start="41:28" pos:end="41:39"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><call pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:31">vmstate_register_ram_global</name><argument_list pos:start="43:32" pos:end="43:36">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><call pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:30">memory_region_set_readonly</name><argument_list pos:start="45:31" pos:end="45:41">(<argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><name pos:start="45:32" pos:end="45:34">rom</name></expr></argument>, <argument pos:start="45:37" pos:end="45:40"><expr pos:start="45:37" pos:end="45:40"><name pos:start="45:37" pos:end="45:40">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="52:0"><expr pos:start="47:5" pos:end="47:58"><call pos:start="47:5" pos:end="47:58"><name pos:start="47:5" pos:end="47:31">memory_region_add_subregion</name><argument_list pos:start="47:32" pos:end="47:58">(<argument pos:start="47:33" pos:end="47:49"><expr pos:start="47:33" pos:end="47:49"><name pos:start="47:33" pos:end="47:49">address_space_mem</name></expr></argument>, <argument pos:start="47:52" pos:end="47:52"><expr pos:start="47:52" pos:end="47:52"><literal type="number" pos:start="47:52" pos:end="47:52">0</literal></expr></argument>, <argument pos:start="47:55" pos:end="47:57"><expr pos:start="47:55" pos:end="47:57"><name pos:start="47:55" pos:end="47:57">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="51:1" pos:end="51:29">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:6">be</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <literal type="number" pos:start="53:10" pos:end="53:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:6">be</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <literal type="number" pos:start="57:10" pos:end="57:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="61:5" pos:end="61:56">/* There are two 32MiB flash devices on the board */</comment>

    <for pos:start="63:5" pos:end="103:5">for <control pos:start="63:9" pos:end="63:28">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:21"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <literal type="number" pos:start="63:21" pos:end="63:21">2</literal></expr>;</condition> <incr pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:24">i</name> <operator pos:start="63:26" pos:end="63:27">++</operator></expr></incr>)</control> <block pos:start="63:30" pos:end="103:5">{<block_content pos:start="65:9" pos:end="101:9">

        <expr_stmt pos:start="65:9" pos:end="65:43"><expr pos:start="65:9" pos:end="65:42"><name pos:start="65:9" pos:end="65:13">dinfo</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:42"><name pos:start="65:17" pos:end="65:25">drive_get</name><argument_list pos:start="65:26" pos:end="65:42">(<argument pos:start="65:27" pos:end="65:35"><expr pos:start="65:27" pos:end="65:35"><name pos:start="65:27" pos:end="65:35">IF_PFLASH</name></expr></argument>, <argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:41"><expr pos:start="65:41" pos:end="65:41"><name pos:start="65:41" pos:end="65:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="81:9"><if pos:start="67:9" pos:end="81:9">if <condition pos:start="67:12" pos:end="67:19">(<expr pos:start="67:13" pos:end="67:18"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:18">dinfo</name></expr>)</condition> <block pos:start="67:21" pos:end="81:9">{<block_content pos:start="69:13" pos:end="79:20">

            <if_stmt pos:start="69:13" pos:end="73:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:32">(<expr pos:start="69:17" pos:end="69:31"><call pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:29">qtest_enabled</name><argument_list pos:start="69:30" pos:end="69:31">()</argument_list></call></expr>)</condition> <block pos:start="69:34" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:22">

                <break pos:start="71:17" pos:end="71:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="77:44"><expr pos:start="75:13" pos:end="77:43"><call pos:start="75:13" pos:end="77:43"><name pos:start="75:13" pos:end="75:19">fprintf</name><argument_list pos:start="75:20" pos:end="77:43">(<argument pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:26">stderr</name></expr></argument>, <argument pos:start="75:29" pos:end="77:42"><expr pos:start="75:29" pos:end="77:42"><literal type="string" pos:start="75:29" pos:end="75:70">"Two flash images must be given with the "</literal>

                    <literal type="string" pos:start="77:21" pos:end="77:42">"'pflash' parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><call pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:16">exit</name><argument_list pos:start="79:17" pos:end="79:19">(<argument pos:start="79:18" pos:end="79:18"><expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="85:9" pos:end="101:9"><if pos:start="85:9" pos:end="101:9">if <condition pos:start="85:12" pos:end="95:54">(<expr pos:start="85:13" pos:end="95:53"><operator pos:start="85:13" pos:end="85:13">!</operator><call pos:start="85:14" pos:end="95:53"><name pos:start="85:14" pos:end="85:34">pflash_cfi01_register</name><argument_list pos:start="85:35" pos:end="95:53">(<argument pos:start="85:36" pos:end="85:58"><expr pos:start="85:36" pos:end="85:58"><name pos:start="85:36" pos:end="85:58"><name pos:start="85:36" pos:end="85:55">mainstone_flash_base</name><index pos:start="85:56" pos:end="85:58">[<expr pos:start="85:57" pos:end="85:57"><name pos:start="85:57" pos:end="85:57">i</name></expr>]</index></name></expr></argument>, <argument pos:start="85:61" pos:end="85:64"><expr pos:start="85:61" pos:end="85:64"><name pos:start="85:61" pos:end="85:64">NULL</name></expr></argument>,

                                   <argument pos:start="87:36" pos:end="87:78"><expr pos:start="87:36" pos:end="87:78"><ternary pos:start="87:36" pos:end="87:78"><condition pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:36"><name pos:start="87:36" pos:end="87:36">i</name></expr> ?</condition><then pos:start="87:40" pos:end="87:57"> <expr pos:start="87:40" pos:end="87:57"><literal type="string" pos:start="87:40" pos:end="87:57">"mainstone.flash1"</literal></expr> </then><else pos:start="87:59" pos:end="87:78">: <expr pos:start="87:61" pos:end="87:78"><literal type="string" pos:start="87:61" pos:end="87:78">"mainstone.flash0"</literal></expr></else></ternary></expr></argument>,

                                   <argument pos:start="89:36" pos:end="89:50"><expr pos:start="89:36" pos:end="89:50"><name pos:start="89:36" pos:end="89:50">MAINSTONE_FLASH</name></expr></argument>,

                                   <argument pos:start="91:36" pos:end="91:61"><expr pos:start="91:36" pos:end="91:61"><call pos:start="91:36" pos:end="91:61"><name pos:start="91:36" pos:end="91:54">blk_by_legacy_dinfo</name><argument_list pos:start="91:55" pos:end="91:61">(<argument pos:start="91:56" pos:end="91:60"><expr pos:start="91:56" pos:end="91:60"><name pos:start="91:56" pos:end="91:60">dinfo</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="93:36" pos:end="93:45"><expr pos:start="93:36" pos:end="93:45"><name pos:start="93:36" pos:end="93:45">sector_len</name></expr></argument>, <argument pos:start="93:48" pos:end="93:75"><expr pos:start="93:48" pos:end="93:75"><name pos:start="93:48" pos:end="93:62">MAINSTONE_FLASH</name> <operator pos:start="93:64" pos:end="93:64">/</operator> <name pos:start="93:66" pos:end="93:75">sector_len</name></expr></argument>,

                                   <argument pos:start="95:36" pos:end="95:36"><expr pos:start="95:36" pos:end="95:36"><literal type="number" pos:start="95:36" pos:end="95:36">4</literal></expr></argument>, <argument pos:start="95:39" pos:end="95:39"><expr pos:start="95:39" pos:end="95:39"><literal type="number" pos:start="95:39" pos:end="95:39">0</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:42"><expr pos:start="95:42" pos:end="95:42"><literal type="number" pos:start="95:42" pos:end="95:42">0</literal></expr></argument>, <argument pos:start="95:45" pos:end="95:45"><expr pos:start="95:45" pos:end="95:45"><literal type="number" pos:start="95:45" pos:end="95:45">0</literal></expr></argument>, <argument pos:start="95:48" pos:end="95:48"><expr pos:start="95:48" pos:end="95:48"><literal type="number" pos:start="95:48" pos:end="95:48">0</literal></expr></argument>, <argument pos:start="95:51" pos:end="95:52"><expr pos:start="95:51" pos:end="95:52"><name pos:start="95:51" pos:end="95:52">be</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:56" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:20">

            <expr_stmt pos:start="97:13" pos:end="97:71"><expr pos:start="97:13" pos:end="97:70"><call pos:start="97:13" pos:end="97:70"><name pos:start="97:13" pos:end="97:19">fprintf</name><argument_list pos:start="97:20" pos:end="97:70">(<argument pos:start="97:21" pos:end="97:26"><expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:26">stderr</name></expr></argument>, <argument pos:start="97:29" pos:end="97:69"><expr pos:start="97:29" pos:end="97:69"><literal type="string" pos:start="97:29" pos:end="97:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:20"><expr pos:start="99:13" pos:end="99:19"><call pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:16">exit</name><argument_list pos:start="99:17" pos:end="99:19">(<argument pos:start="99:18" pos:end="99:18"><expr pos:start="99:18" pos:end="99:18"><literal type="number" pos:start="99:18" pos:end="99:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="107:5" pos:end="109:52"><expr pos:start="107:5" pos:end="109:51"><name pos:start="107:5" pos:end="107:11">mst_irq</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="109:51"><name pos:start="107:15" pos:end="107:34">sysbus_create_simple</name><argument_list pos:start="107:35" pos:end="109:51">(<argument pos:start="107:36" pos:end="107:51"><expr pos:start="107:36" pos:end="107:51"><literal type="string" pos:start="107:36" pos:end="107:51">"mainstone-fpga"</literal></expr></argument>, <argument pos:start="107:54" pos:end="107:66"><expr pos:start="107:54" pos:end="107:66"><name pos:start="107:54" pos:end="107:66">MST_FPGA_PHYS</name></expr></argument>,

                    <argument pos:start="109:21" pos:end="109:50"><expr pos:start="109:21" pos:end="109:50"><call pos:start="109:21" pos:end="109:50"><name pos:start="109:21" pos:end="109:36">qdev_get_gpio_in</name><argument_list pos:start="109:37" pos:end="109:50">(<argument pos:start="109:38" pos:end="109:46"><expr pos:start="109:38" pos:end="109:46"><name pos:start="109:38" pos:end="109:46"><name pos:start="109:38" pos:end="109:40">mpu</name><operator pos:start="109:41" pos:end="109:42">-&gt;</operator><name pos:start="109:43" pos:end="109:46">gpio</name></name></expr></argument>, <argument pos:start="109:49" pos:end="109:49"><expr pos:start="109:49" pos:end="109:49"><literal type="number" pos:start="109:49" pos:end="109:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:22">/* setup keypad */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:47"><expr pos:start="115:5" pos:end="115:46"><call pos:start="115:5" pos:end="115:46"><name pos:start="115:5" pos:end="115:26">pxa27x_register_keypad</name><argument_list pos:start="115:27" pos:end="115:46">(<argument pos:start="115:28" pos:end="115:34"><expr pos:start="115:28" pos:end="115:34"><name pos:start="115:28" pos:end="115:34"><name pos:start="115:28" pos:end="115:30">mpu</name><operator pos:start="115:31" pos:end="115:32">-&gt;</operator><name pos:start="115:33" pos:end="115:34">kp</name></name></expr></argument>, <argument pos:start="115:37" pos:end="115:39"><expr pos:start="115:37" pos:end="115:39"><name pos:start="115:37" pos:end="115:39">map</name></expr></argument>, <argument pos:start="115:42" pos:end="115:45"><expr pos:start="115:42" pos:end="115:45"><literal type="number" pos:start="115:42" pos:end="115:45">0xe0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:21">/* MMC/SD host */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:77"><expr pos:start="121:5" pos:end="121:76"><call pos:start="121:5" pos:end="121:76"><name pos:start="121:5" pos:end="121:24">pxa2xx_mmci_handlers</name><argument_list pos:start="121:25" pos:end="121:76">(<argument pos:start="121:26" pos:end="121:33"><expr pos:start="121:26" pos:end="121:33"><name pos:start="121:26" pos:end="121:33"><name pos:start="121:26" pos:end="121:28">mpu</name><operator pos:start="121:29" pos:end="121:30">-&gt;</operator><name pos:start="121:31" pos:end="121:33">mmc</name></name></expr></argument>, <argument pos:start="121:36" pos:end="121:39"><expr pos:start="121:36" pos:end="121:39"><name pos:start="121:36" pos:end="121:39">NULL</name></expr></argument>, <argument pos:start="121:42" pos:end="121:75"><expr pos:start="121:42" pos:end="121:75"><call pos:start="121:42" pos:end="121:75"><name pos:start="121:42" pos:end="121:57">qdev_get_gpio_in</name><argument_list pos:start="121:58" pos:end="121:75">(<argument pos:start="121:59" pos:end="121:65"><expr pos:start="121:59" pos:end="121:65"><name pos:start="121:59" pos:end="121:65">mst_irq</name></expr></argument>, <argument pos:start="121:68" pos:end="121:74"><expr pos:start="121:68" pos:end="121:74"><name pos:start="121:68" pos:end="121:74">MMC_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="129:50"><expr pos:start="125:5" pos:end="129:49"><call pos:start="125:5" pos:end="129:49"><name pos:start="125:5" pos:end="125:28">pxa2xx_pcmcia_set_irq_cb</name><argument_list pos:start="125:29" pos:end="129:49">(<argument pos:start="125:30" pos:end="125:43"><expr pos:start="125:30" pos:end="125:43"><name pos:start="125:30" pos:end="125:43"><name pos:start="125:30" pos:end="125:32">mpu</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:40">pcmcia</name><index pos:start="125:41" pos:end="125:43">[<expr pos:start="125:42" pos:end="125:42"><literal type="number" pos:start="125:42" pos:end="125:42">0</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="127:13" pos:end="127:45"><expr pos:start="127:13" pos:end="127:45"><call pos:start="127:13" pos:end="127:45"><name pos:start="127:13" pos:end="127:28">qdev_get_gpio_in</name><argument_list pos:start="127:29" pos:end="127:45">(<argument pos:start="127:30" pos:end="127:36"><expr pos:start="127:30" pos:end="127:36"><name pos:start="127:30" pos:end="127:36">mst_irq</name></expr></argument>, <argument pos:start="127:39" pos:end="127:44"><expr pos:start="127:39" pos:end="127:44"><name pos:start="127:39" pos:end="127:44">S0_IRQ</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="129:13" pos:end="129:48"><expr pos:start="129:13" pos:end="129:48"><call pos:start="129:13" pos:end="129:48"><name pos:start="129:13" pos:end="129:28">qdev_get_gpio_in</name><argument_list pos:start="129:29" pos:end="129:48">(<argument pos:start="129:30" pos:end="129:36"><expr pos:start="129:30" pos:end="129:36"><name pos:start="129:30" pos:end="129:36">mst_irq</name></expr></argument>, <argument pos:start="129:39" pos:end="129:47"><expr pos:start="129:39" pos:end="129:47"><name pos:start="129:39" pos:end="129:47">S0_CD_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="135:50"><expr pos:start="131:5" pos:end="135:49"><call pos:start="131:5" pos:end="135:49"><name pos:start="131:5" pos:end="131:28">pxa2xx_pcmcia_set_irq_cb</name><argument_list pos:start="131:29" pos:end="135:49">(<argument pos:start="131:30" pos:end="131:43"><expr pos:start="131:30" pos:end="131:43"><name pos:start="131:30" pos:end="131:43"><name pos:start="131:30" pos:end="131:32">mpu</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:40">pcmcia</name><index pos:start="131:41" pos:end="131:43">[<expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="133:13" pos:end="133:45"><expr pos:start="133:13" pos:end="133:45"><call pos:start="133:13" pos:end="133:45"><name pos:start="133:13" pos:end="133:28">qdev_get_gpio_in</name><argument_list pos:start="133:29" pos:end="133:45">(<argument pos:start="133:30" pos:end="133:36"><expr pos:start="133:30" pos:end="133:36"><name pos:start="133:30" pos:end="133:36">mst_irq</name></expr></argument>, <argument pos:start="133:39" pos:end="133:44"><expr pos:start="133:39" pos:end="133:44"><name pos:start="133:39" pos:end="133:44">S1_IRQ</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="135:13" pos:end="135:48"><expr pos:start="135:13" pos:end="135:48"><call pos:start="135:13" pos:end="135:48"><name pos:start="135:13" pos:end="135:28">qdev_get_gpio_in</name><argument_list pos:start="135:29" pos:end="135:48">(<argument pos:start="135:30" pos:end="135:36"><expr pos:start="135:30" pos:end="135:36"><name pos:start="135:30" pos:end="135:36">mst_irq</name></expr></argument>, <argument pos:start="135:39" pos:end="135:47"><expr pos:start="135:39" pos:end="135:47"><name pos:start="135:39" pos:end="135:47">S1_CD_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="141:61"><expr pos:start="139:5" pos:end="141:60"><call pos:start="139:5" pos:end="141:60"><name pos:start="139:5" pos:end="139:18">smc91c111_init</name><argument_list pos:start="139:19" pos:end="141:60">(<argument pos:start="139:20" pos:end="139:31"><expr pos:start="139:20" pos:end="139:31"><operator pos:start="139:20" pos:end="139:20">&amp;</operator><name pos:start="139:21" pos:end="139:31"><name pos:start="139:21" pos:end="139:28">nd_table</name><index pos:start="139:29" pos:end="139:31">[<expr pos:start="139:30" pos:end="139:30"><literal type="number" pos:start="139:30" pos:end="139:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:34" pos:end="139:45"><expr pos:start="139:34" pos:end="139:45"><name pos:start="139:34" pos:end="139:45">MST_ETH_PHYS</name></expr></argument>,

                    <argument pos:start="141:21" pos:end="141:59"><expr pos:start="141:21" pos:end="141:59"><call pos:start="141:21" pos:end="141:59"><name pos:start="141:21" pos:end="141:36">qdev_get_gpio_in</name><argument_list pos:start="141:37" pos:end="141:59">(<argument pos:start="141:38" pos:end="141:44"><expr pos:start="141:38" pos:end="141:44"><name pos:start="141:38" pos:end="141:44">mst_irq</name></expr></argument>, <argument pos:start="141:47" pos:end="141:58"><expr pos:start="141:47" pos:end="141:58"><name pos:start="141:47" pos:end="141:58">ETHERNET_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:63"><expr pos:start="145:5" pos:end="145:62"><name pos:start="145:5" pos:end="145:35"><name pos:start="145:5" pos:end="145:19">mainstone_binfo</name><operator pos:start="145:20" pos:end="145:20">.</operator><name pos:start="145:21" pos:end="145:35">kernel_filename</name></name> <operator pos:start="145:37" pos:end="145:37">=</operator> <name pos:start="145:39" pos:end="145:62"><name pos:start="145:39" pos:end="145:45">machine</name><operator pos:start="145:46" pos:end="145:47">-&gt;</operator><name pos:start="145:48" pos:end="145:62">kernel_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:61"><expr pos:start="147:5" pos:end="147:60"><name pos:start="147:5" pos:end="147:34"><name pos:start="147:5" pos:end="147:19">mainstone_binfo</name><operator pos:start="147:20" pos:end="147:20">.</operator><name pos:start="147:21" pos:end="147:34">kernel_cmdline</name></name> <operator pos:start="147:36" pos:end="147:36">=</operator> <name pos:start="147:38" pos:end="147:60"><name pos:start="147:38" pos:end="147:44">machine</name><operator pos:start="147:45" pos:end="147:46">-&gt;</operator><name pos:start="147:47" pos:end="147:60">kernel_cmdline</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:63"><expr pos:start="149:5" pos:end="149:62"><name pos:start="149:5" pos:end="149:35"><name pos:start="149:5" pos:end="149:19">mainstone_binfo</name><operator pos:start="149:20" pos:end="149:20">.</operator><name pos:start="149:21" pos:end="149:35">initrd_filename</name></name> <operator pos:start="149:37" pos:end="149:37">=</operator> <name pos:start="149:39" pos:end="149:62"><name pos:start="149:39" pos:end="149:45">machine</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:62">initrd_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:38"><expr pos:start="151:5" pos:end="151:37"><name pos:start="151:5" pos:end="151:28"><name pos:start="151:5" pos:end="151:19">mainstone_binfo</name><operator pos:start="151:20" pos:end="151:20">.</operator><name pos:start="151:21" pos:end="151:28">board_id</name></name> <operator pos:start="151:30" pos:end="151:30">=</operator> <name pos:start="151:32" pos:end="151:37">arm_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:48"><expr pos:start="153:5" pos:end="153:47"><call pos:start="153:5" pos:end="153:47"><name pos:start="153:5" pos:end="153:19">arm_load_kernel</name><argument_list pos:start="153:20" pos:end="153:47">(<argument pos:start="153:21" pos:end="153:28"><expr pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:23">mpu</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:28">cpu</name></name></expr></argument>, <argument pos:start="153:31" pos:end="153:46"><expr pos:start="153:31" pos:end="153:46"><operator pos:start="153:31" pos:end="153:31">&amp;</operator><name pos:start="153:32" pos:end="153:46">mainstone_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
