<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23764.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">read_file</name><parameter_list pos:start="1:14" pos:end="1:64">(<parameter pos:start="1:15" pos:end="1:34"><decl pos:start="1:15" pos:end="1:34"><type pos:start="1:15" pos:end="1:34"><specifier pos:start="1:15" pos:end="1:19">const</specifier> <name pos:start="1:21" pos:end="1:24">char</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:34">filename</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier><modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">bufptr</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:57">size_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">FILE</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">f</name> <init pos:start="5:13" pos:end="5:35">= <expr pos:start="5:15" pos:end="5:35"><call pos:start="5:15" pos:end="5:35"><name pos:start="5:15" pos:end="5:19">fopen</name><argument_list pos:start="5:20" pos:end="5:35">(<argument pos:start="5:21" pos:end="5:28"><expr pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:28">filename</name></expr></argument>, <argument pos:start="5:31" pos:end="5:34"><expr pos:start="5:31" pos:end="5:34"><literal type="string" pos:start="5:31" pos:end="5:34">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:11">(<expr pos:start="9:9" pos:end="9:10"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:10">f</name></expr>)</condition> <block pos:start="9:13" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:30">

        <expr_stmt pos:start="11:9" pos:end="11:93"><expr pos:start="11:9" pos:end="11:92"><call pos:start="11:9" pos:end="11:92"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="11:92">(<argument pos:start="11:16" pos:end="11:19"><expr pos:start="11:16" pos:end="11:19"><name pos:start="11:16" pos:end="11:19">NULL</name></expr></argument>, <argument pos:start="11:22" pos:end="11:33"><expr pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="11:36" pos:end="11:64"><expr pos:start="11:36" pos:end="11:64"><literal type="string" pos:start="11:36" pos:end="11:64">"Cannot read file '%s': %s\n"</literal></expr></argument>, <argument pos:start="11:67" pos:end="11:74"><expr pos:start="11:67" pos:end="11:74"><name pos:start="11:67" pos:end="11:74">filename</name></expr></argument>, <argument pos:start="11:77" pos:end="11:91"><expr pos:start="11:77" pos:end="11:91"><call pos:start="11:77" pos:end="11:91"><name pos:start="11:77" pos:end="11:84">strerror</name><argument_list pos:start="11:85" pos:end="11:91">(<argument pos:start="11:86" pos:end="11:90"><expr pos:start="11:86" pos:end="11:90"><name pos:start="11:86" pos:end="11:90">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:30">return <expr pos:start="13:16" pos:end="13:29"><call pos:start="13:16" pos:end="13:29"><name pos:start="13:16" pos:end="13:22">AVERROR</name><argument_list pos:start="13:23" pos:end="13:29">(<argument pos:start="13:24" pos:end="13:28"><expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">errno</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:9">fseek</name><argument_list pos:start="17:10" pos:end="17:25">(<argument pos:start="17:11" pos:end="17:11"><expr pos:start="17:11" pos:end="17:11"><name pos:start="17:11" pos:end="17:11">f</name></expr></argument>, <argument pos:start="17:14" pos:end="17:14"><expr pos:start="17:14" pos:end="17:14"><literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr></argument>, <argument pos:start="17:17" pos:end="17:24"><expr pos:start="17:17" pos:end="17:24"><name pos:start="17:17" pos:end="17:24">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:9">size</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:17">ftell</name><argument_list pos:start="19:18" pos:end="19:20">(<argument pos:start="19:19" pos:end="19:19"><expr pos:start="19:19" pos:end="19:19"><name pos:start="19:19" pos:end="19:19">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:9">fseek</name><argument_list pos:start="21:10" pos:end="21:25">(<argument pos:start="21:11" pos:end="21:11"><expr pos:start="21:11" pos:end="21:11"><name pos:start="21:11" pos:end="21:11">f</name></expr></argument>, <argument pos:start="21:14" pos:end="21:14"><expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr></argument>, <argument pos:start="21:17" pos:end="21:24"><expr pos:start="21:17" pos:end="21:24"><name pos:start="21:17" pos:end="21:24">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:11">bufptr</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:34"><name pos:start="23:15" pos:end="23:23">av_malloc</name><argument_list pos:start="23:24" pos:end="23:34">(<argument pos:start="23:25" pos:end="23:33"><expr pos:start="23:25" pos:end="23:33"><operator pos:start="23:25" pos:end="23:25">*</operator><name pos:start="23:26" pos:end="23:29">size</name> <operator pos:start="23:31" pos:end="23:31">+</operator> <literal type="number" pos:start="23:33" pos:end="23:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><operator pos:start="25:9" pos:end="25:9">!</operator><operator pos:start="25:10" pos:end="25:10">*</operator><name pos:start="25:11" pos:end="25:16">bufptr</name></expr>)</condition> <block pos:start="25:19" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:31">

        <expr_stmt pos:start="27:9" pos:end="27:71"><expr pos:start="27:9" pos:end="27:70"><call pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:70">(<argument pos:start="27:16" pos:end="27:19"><expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr></argument>, <argument pos:start="27:22" pos:end="27:33"><expr pos:start="27:22" pos:end="27:33"><name pos:start="27:22" pos:end="27:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:36" pos:end="27:69"><expr pos:start="27:36" pos:end="27:69"><literal type="string" pos:start="27:36" pos:end="27:69">"Could not allocate file buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:18"><expr pos:start="29:9" pos:end="29:17"><call pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:14">fclose</name><argument_list pos:start="29:15" pos:end="29:17">(<argument pos:start="29:16" pos:end="29:16"><expr pos:start="29:16" pos:end="29:16"><name pos:start="29:16" pos:end="29:16">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:9">fread</name><argument_list pos:start="35:10" pos:end="35:31">(<argument pos:start="35:11" pos:end="35:17"><expr pos:start="35:11" pos:end="35:17"><operator pos:start="35:11" pos:end="35:11">*</operator><name pos:start="35:12" pos:end="35:17">bufptr</name></expr></argument>, <argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr></argument>, <argument pos:start="35:23" pos:end="35:27"><expr pos:start="35:23" pos:end="35:27"><operator pos:start="35:23" pos:end="35:23">*</operator><name pos:start="35:24" pos:end="35:27">size</name></expr></argument>, <argument pos:start="35:30" pos:end="35:30"><expr pos:start="35:30" pos:end="35:30"><name pos:start="35:30" pos:end="35:30">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><operator pos:start="37:5" pos:end="37:5">(</operator><operator pos:start="37:6" pos:end="37:6">*</operator><name pos:start="37:7" pos:end="37:12">bufptr</name><operator pos:start="37:13" pos:end="37:13">)</operator><index pos:start="37:14" pos:end="37:22">[<expr pos:start="37:15" pos:end="37:21"><operator pos:start="37:15" pos:end="37:15">*</operator><name pos:start="37:16" pos:end="37:19">size</name><operator pos:start="37:20" pos:end="37:21">++</operator></expr>]</index> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="char" pos:start="37:26" pos:end="37:29">'\0'</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:14"><expr pos:start="41:5" pos:end="41:13"><call pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:10">fclose</name><argument_list pos:start="41:11" pos:end="41:13">(<argument pos:start="41:12" pos:end="41:12"><expr pos:start="41:12" pos:end="41:12"><name pos:start="41:12" pos:end="41:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="43:5" pos:end="43:13">return <expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
