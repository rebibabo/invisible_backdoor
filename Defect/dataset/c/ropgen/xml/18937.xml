<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18937.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">n8x0_init</name><parameter_list pos:start="1:22" pos:end="3:61">(<parameter pos:start="1:23" pos:end="1:47"><decl pos:start="1:23" pos:end="1:47"><type pos:start="1:23" pos:end="1:47"><name pos:start="1:23" pos:end="1:41">QEMUMachineInitArgs</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">args</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:49"><decl pos:start="3:23" pos:end="3:49"><type pos:start="3:23" pos:end="3:49"><name pos:start="3:23" pos:end="3:42"><name pos:start="3:23" pos:end="3:28">struct</name> <name pos:start="3:30" pos:end="3:42">arm_boot_info</name></name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:49">binfo</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:60"><decl pos:start="3:52" pos:end="3:60"><type pos:start="3:52" pos:end="3:60"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:60">model</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="167:1">{<block_content pos:start="7:5" pos:end="165:5">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">sysmem</name> <init pos:start="7:26" pos:end="7:46">= <expr pos:start="7:28" pos:end="7:46"><call pos:start="7:28" pos:end="7:46"><name pos:start="7:28" pos:end="7:44">get_system_memory</name><argument_list pos:start="7:45" pos:end="7:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:62"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">n800_s</name></name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:62">= <expr pos:start="9:24" pos:end="9:62"><operator pos:start="9:24" pos:end="9:24">(</operator>struct <name pos:start="9:32" pos:end="9:37">n800_s</name> <operator pos:start="9:39" pos:end="9:39">*</operator><operator pos:start="9:40" pos:end="9:40">)</operator> <call pos:start="9:42" pos:end="9:62"><name pos:start="9:42" pos:end="9:50">g_malloc0</name><argument_list pos:start="9:51" pos:end="9:62">(<argument pos:start="9:52" pos:end="9:61"><expr pos:start="9:52" pos:end="9:61"><sizeof pos:start="9:52" pos:end="9:61">sizeof<argument_list pos:start="9:58" pos:end="9:61">(<argument pos:start="9:59" pos:end="9:60"><expr pos:start="9:59" pos:end="9:60"><operator pos:start="9:59" pos:end="9:59">*</operator><name pos:start="9:60" pos:end="9:60">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">sdram_size</name> <init pos:start="11:20" pos:end="11:36">= <expr pos:start="11:22" pos:end="11:36"><name pos:start="11:22" pos:end="11:36"><name pos:start="11:22" pos:end="11:26">binfo</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:36">ram_size</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:68"><expr pos:start="15:5" pos:end="15:67"><name pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:10">mpu</name></name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:67"><name pos:start="15:14" pos:end="15:30">omap2420_mpu_init</name><argument_list pos:start="15:31" pos:end="15:67">(<argument pos:start="15:32" pos:end="15:37"><expr pos:start="15:32" pos:end="15:37"><name pos:start="15:32" pos:end="15:37">sysmem</name></expr></argument>, <argument pos:start="15:40" pos:end="15:49"><expr pos:start="15:40" pos:end="15:49"><name pos:start="15:40" pos:end="15:49">sdram_size</name></expr></argument>, <argument pos:start="15:52" pos:end="15:66"><expr pos:start="15:52" pos:end="15:66"><name pos:start="15:52" pos:end="15:66"><name pos:start="15:52" pos:end="15:55">args</name><operator pos:start="15:56" pos:end="15:57">-&gt;</operator><name pos:start="15:58" pos:end="15:66">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="67:7">/* Setup peripherals

     *

     * Believed external peripherals layout in the N810:

     * (spi bus 1)

     *   tsc2005

     *   lcd_mipid

     * (spi bus 2)

     *   Conexant cx3110x (WLAN)

     *   optional: pc2400m (WiMAX)

     * (i2c bus 0)

     *   TLV320AIC33 (audio codec)

     *   TCM825x (camera by Toshiba)

     *   lp5521 (clever LEDs)

     *   tsl2563 (light sensor, hwmon, model 7, rev. 0)

     *   lm8323 (keypad, manf 00, rev 04)

     * (i2c bus 1)

     *   tmp105 (temperature sensor, hwmon)

     *   menelaus (pm)

     * (somewhere on i2c - maybe N800-only)

     *   tea5761 (FM tuner)

     * (serial 0)

     *   GPS

     * (some serial port)

     *   csr41814 (Bluetooth)

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:23"><expr pos:start="69:5" pos:end="69:22"><call pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:19">n8x0_gpio_setup</name><argument_list pos:start="69:20" pos:end="69:22">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:23"><expr pos:start="71:5" pos:end="71:22"><call pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:19">n8x0_nand_setup</name><argument_list pos:start="71:20" pos:end="71:22">(<argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><name pos:start="71:21" pos:end="71:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:22"><expr pos:start="73:5" pos:end="73:21"><call pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:18">n8x0_i2c_setup</name><argument_list pos:start="73:19" pos:end="73:21">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="85:5"><if pos:start="75:5" pos:end="77:30">if <condition pos:start="75:8" pos:end="75:21">(<expr pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:13">model</name> <operator pos:start="75:15" pos:end="75:16">==</operator> <literal type="number" pos:start="75:18" pos:end="75:20">800</literal></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:30"><block_content pos:start="77:9" pos:end="77:30">

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><call pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:26">n800_tsc_kbd_setup</name><argument_list pos:start="77:27" pos:end="77:29">(<argument pos:start="77:28" pos:end="77:28"><expr pos:start="77:28" pos:end="77:28"><name pos:start="77:28" pos:end="77:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="79:5" pos:end="85:5">else if <condition pos:start="79:13" pos:end="79:26">(<expr pos:start="79:14" pos:end="79:25"><name pos:start="79:14" pos:end="79:18">model</name> <operator pos:start="79:20" pos:end="79:21">==</operator> <literal type="number" pos:start="79:23" pos:end="79:25">810</literal></expr>)</condition> <block pos:start="79:28" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:26">

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><call pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:22">n810_tsc_setup</name><argument_list pos:start="81:23" pos:end="81:25">(<argument pos:start="81:24" pos:end="81:24"><expr pos:start="81:24" pos:end="81:24"><name pos:start="81:24" pos:end="81:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><call pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:22">n810_kbd_setup</name><argument_list pos:start="83:23" pos:end="83:25">(<argument pos:start="83:24" pos:end="83:24"><expr pos:start="83:24" pos:end="83:24"><name pos:start="83:24" pos:end="83:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:22"><expr pos:start="87:5" pos:end="87:21"><call pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:18">n8x0_spi_setup</name><argument_list pos:start="87:19" pos:end="87:21">(<argument pos:start="87:20" pos:end="87:20"><expr pos:start="87:20" pos:end="87:20"><name pos:start="87:20" pos:end="87:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:22"><expr pos:start="89:5" pos:end="89:21"><call pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:18">n8x0_dss_setup</name><argument_list pos:start="89:19" pos:end="89:21">(<argument pos:start="89:20" pos:end="89:20"><expr pos:start="89:20" pos:end="89:20"><name pos:start="89:20" pos:end="89:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:23"><expr pos:start="91:5" pos:end="91:22"><call pos:start="91:5" pos:end="91:22"><name pos:start="91:5" pos:end="91:19">n8x0_cbus_setup</name><argument_list pos:start="91:20" pos:end="91:22">(<argument pos:start="91:21" pos:end="91:21"><expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:23"><expr pos:start="93:5" pos:end="93:22"><call pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:19">n8x0_uart_setup</name><argument_list pos:start="93:20" pos:end="93:22">(<argument pos:start="93:21" pos:end="93:21"><expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:27">(<expr pos:start="95:9" pos:end="95:26"><call pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:19">usb_enabled</name><argument_list pos:start="95:20" pos:end="95:26">(<argument pos:start="95:21" pos:end="95:25"><expr pos:start="95:21" pos:end="95:25"><name pos:start="95:21" pos:end="95:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:29" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:26">

        <expr_stmt pos:start="97:9" pos:end="97:26"><expr pos:start="97:9" pos:end="97:25"><call pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:22">n8x0_usb_setup</name><argument_list pos:start="97:23" pos:end="97:25">(<argument pos:start="97:24" pos:end="97:24"><expr pos:start="97:24" pos:end="97:24"><name pos:start="97:24" pos:end="97:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="119:5"><if pos:start="103:5" pos:end="119:5">if <condition pos:start="103:8" pos:end="103:30">(<expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:12">args</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:29">kernel_filename</name></name></expr>)</condition> <block pos:start="103:32" pos:end="119:5">{<block_content pos:start="107:9" pos:end="117:47">

        <comment type="block" pos:start="105:9" pos:end="105:38">/* Or at the linux loader.  */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:55"><expr pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:13">binfo</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:30">kernel_filename</name></name> <operator pos:start="107:32" pos:end="107:32">=</operator> <name pos:start="107:34" pos:end="107:54"><name pos:start="107:34" pos:end="107:37">args</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:54">kernel_filename</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:53"><expr pos:start="109:9" pos:end="109:52"><name pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:13">binfo</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:29">kernel_cmdline</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:52"><name pos:start="109:33" pos:end="109:36">args</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:52">kernel_cmdline</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:55"><expr pos:start="111:9" pos:end="111:54"><name pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:13">binfo</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:30">initrd_filename</name></name> <operator pos:start="111:32" pos:end="111:32">=</operator> <name pos:start="111:34" pos:end="111:54"><name pos:start="111:34" pos:end="111:37">args</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:54">initrd_filename</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:44"><expr pos:start="113:9" pos:end="113:43"><call pos:start="113:9" pos:end="113:43"><name pos:start="113:9" pos:end="113:23">arm_load_kernel</name><argument_list pos:start="113:24" pos:end="113:43">(<argument pos:start="113:25" pos:end="113:35"><expr pos:start="113:25" pos:end="113:35"><name pos:start="113:25" pos:end="113:35"><name pos:start="113:25" pos:end="113:25">s</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:30">mpu</name><operator pos:start="113:31" pos:end="113:32">-&gt;</operator><name pos:start="113:33" pos:end="113:35">cpu</name></name></expr></argument>, <argument pos:start="113:38" pos:end="113:42"><expr pos:start="113:38" pos:end="113:42"><name pos:start="113:38" pos:end="113:42">binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:47"><expr pos:start="117:9" pos:end="117:46"><call pos:start="117:9" pos:end="117:46"><name pos:start="117:9" pos:end="117:27">qemu_register_reset</name><argument_list pos:start="117:28" pos:end="117:46">(<argument pos:start="117:29" pos:end="117:42"><expr pos:start="117:29" pos:end="117:42"><name pos:start="117:29" pos:end="117:42">n8x0_boot_init</name></expr></argument>, <argument pos:start="117:45" pos:end="117:45"><expr pos:start="117:45" pos:end="117:45"><name pos:start="117:45" pos:end="117:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="165:5"><if pos:start="123:5" pos:end="165:5">if <condition pos:start="123:8" pos:end="125:64">(<expr pos:start="123:9" pos:end="125:63"><name pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:18">option_rom</name><index pos:start="123:19" pos:end="123:21">[<expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>]</index></name><operator pos:start="123:22" pos:end="123:22">.</operator><name pos:start="123:23" pos:end="123:26">name</name> <operator pos:start="123:28" pos:end="123:29">&amp;&amp;</operator>

        <operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:29"><name pos:start="125:10" pos:end="125:13">args</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:26">boot_device</name><index pos:start="125:27" pos:end="125:29">[<expr pos:start="125:28" pos:end="125:28"><literal type="number" pos:start="125:28" pos:end="125:28">0</literal></expr>]</index></name> <operator pos:start="125:31" pos:end="125:32">==</operator> <literal type="char" pos:start="125:34" pos:end="125:36">'n'</literal> <operator pos:start="125:38" pos:end="125:39">||</operator> <operator pos:start="125:41" pos:end="125:41">!</operator><name pos:start="125:42" pos:end="125:62"><name pos:start="125:42" pos:end="125:45">args</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:62">kernel_filename</name></name><operator pos:start="125:63" pos:end="125:63">)</operator></expr>)</condition> <block pos:start="125:66" pos:end="165:5">{<block_content pos:start="127:9" pos:end="163:71">

        <decl_stmt pos:start="127:9" pos:end="127:35"><decl pos:start="127:9" pos:end="127:34"><type pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:15">uint8_t</name></type> <name pos:start="127:17" pos:end="127:34"><name pos:start="127:17" pos:end="127:25">nolo_tags</name><index pos:start="127:26" pos:end="127:34">[<expr pos:start="127:27" pos:end="127:33"><literal type="number" pos:start="127:27" pos:end="127:33">0x10000</literal></expr>]</index></name></decl>;</decl_stmt>

        <comment type="block" pos:start="129:9" pos:end="129:49">/* No, wait, better start at the ROM.  */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:61"><expr pos:start="131:9" pos:end="131:60"><name pos:start="131:9" pos:end="131:33"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:14">mpu</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:19">cpu</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:24">env</name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:29">regs</name><index pos:start="131:30" pos:end="131:33">[<expr pos:start="131:31" pos:end="131:32"><literal type="number" pos:start="131:31" pos:end="131:32">15</literal></expr>]</index></name> <operator pos:start="131:35" pos:end="131:35">=</operator> <name pos:start="131:37" pos:end="131:49">OMAP2_Q2_BASE</name> <operator pos:start="131:51" pos:end="131:51">+</operator> <literal type="number" pos:start="131:53" pos:end="131:60">0x400000</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="135:9" pos:end="151:22">/* This is intended for loading the `secondary.bin' program from

         * Nokia images (the NOLO bootloader).  The entry point seems

         * to be at OMAP2_Q2_BASE + 0x400000.

         *

         * The `2nd.bin' files contain some kind of earlier boot code and

         * for them the entry point needs to be set to OMAP2_SRAM_BASE.

         *

         * The code above is for loading the `zImage' file from Nokia

         * images.  */</comment>

        <expr_stmt pos:start="153:9" pos:end="157:51"><expr pos:start="153:9" pos:end="157:50"><call pos:start="153:9" pos:end="157:50"><name pos:start="153:9" pos:end="153:27">load_image_targphys</name><argument_list pos:start="153:28" pos:end="157:50">(<argument pos:start="153:29" pos:end="153:46"><expr pos:start="153:29" pos:end="153:46"><name pos:start="153:29" pos:end="153:41"><name pos:start="153:29" pos:end="153:38">option_rom</name><index pos:start="153:39" pos:end="153:41">[<expr pos:start="153:40" pos:end="153:40"><literal type="number" pos:start="153:40" pos:end="153:40">0</literal></expr>]</index></name><operator pos:start="153:42" pos:end="153:42">.</operator><name pos:start="153:43" pos:end="153:46">name</name></expr></argument>,

                            <argument pos:start="155:29" pos:end="155:52"><expr pos:start="155:29" pos:end="155:52"><name pos:start="155:29" pos:end="155:41">OMAP2_Q2_BASE</name> <operator pos:start="155:43" pos:end="155:43">+</operator> <literal type="number" pos:start="155:45" pos:end="155:52">0x400000</literal></expr></argument>,

                            <argument pos:start="157:29" pos:end="157:49"><expr pos:start="157:29" pos:end="157:49"><name pos:start="157:29" pos:end="157:38">sdram_size</name> <operator pos:start="157:40" pos:end="157:40">-</operator> <literal type="number" pos:start="157:42" pos:end="157:49">0x400000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:40"><expr pos:start="161:9" pos:end="161:39"><call pos:start="161:9" pos:end="161:39"><name pos:start="161:9" pos:end="161:28">n800_setup_nolo_tags</name><argument_list pos:start="161:29" pos:end="161:39">(<argument pos:start="161:30" pos:end="161:38"><expr pos:start="161:30" pos:end="161:38"><name pos:start="161:30" pos:end="161:38">nolo_tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:71"><expr pos:start="163:9" pos:end="163:70"><call pos:start="163:9" pos:end="163:70"><name pos:start="163:9" pos:end="163:33">cpu_physical_memory_write</name><argument_list pos:start="163:34" pos:end="163:70">(<argument pos:start="163:35" pos:end="163:49"><expr pos:start="163:35" pos:end="163:49"><name pos:start="163:35" pos:end="163:49">OMAP2_SRAM_BASE</name></expr></argument>, <argument pos:start="163:52" pos:end="163:60"><expr pos:start="163:52" pos:end="163:60"><name pos:start="163:52" pos:end="163:60">nolo_tags</name></expr></argument>, <argument pos:start="163:63" pos:end="163:69"><expr pos:start="163:63" pos:end="163:69"><literal type="number" pos:start="163:63" pos:end="163:69">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
