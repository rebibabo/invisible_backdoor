<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9769.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">adx_encode_frame</name><parameter_list pos:start="1:28" pos:end="3:81">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

			    <parameter pos:start="3:29" pos:end="3:48"><decl pos:start="3:29" pos:end="3:48"><type pos:start="3:29" pos:end="3:48"><name pos:start="3:29" pos:end="3:36">unsigned</name> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">frame</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:62"><decl pos:start="3:51" pos:end="3:62"><type pos:start="3:51" pos:end="3:62"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:62">buf_size</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:80"><decl pos:start="3:65" pos:end="3:80"><type pos:start="3:65" pos:end="3:80"><specifier pos:start="3:65" pos:end="3:69">const</specifier> <name pos:start="3:71" pos:end="3:74">void</name> <modifier pos:start="3:76" pos:end="3:76">*</modifier></type><name pos:start="3:77" pos:end="3:80">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:9" pos:end="91:25">

	<decl_stmt pos:start="7:9" pos:end="7:41"><decl pos:start="7:9" pos:end="7:40"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:18">ADXContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:36"><decl pos:start="9:9" pos:end="9:35"><type pos:start="9:9" pos:end="9:21"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:19">short</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:28">samples</name> <init pos:start="9:30" pos:end="9:35">= <expr pos:start="9:32" pos:end="9:35"><name pos:start="9:32" pos:end="9:35">data</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:35"><decl pos:start="11:9" pos:end="11:34"><type pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:16">unsigned</name> <name pos:start="11:18" pos:end="11:21">char</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:26">dst</name> <init pos:start="11:28" pos:end="11:34">= <expr pos:start="11:30" pos:end="11:34"><name pos:start="11:30" pos:end="11:34">frame</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:37"><decl pos:start="13:9" pos:end="13:36"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:16">rest</name> <init pos:start="13:18" pos:end="13:36">= <expr pos:start="13:20" pos:end="13:36"><name pos:start="13:20" pos:end="13:36"><name pos:start="13:20" pos:end="13:24">avctx</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:36">frame_size</name></name></expr></init></decl>;</decl_stmt>



<comment type="block" pos:start="17:1" pos:end="25:2">/*

	input data size =

	ffmpeg.c: do_audio_out()

	frame_bytes = enc-&gt;frame_size * 2 * enc-&gt;channels;

*/</comment>



<comment type="line" pos:start="29:1" pos:end="29:50">//	printf("sz=%d ",buf_size); fflush(stdout);</comment>

	<if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:30">(<expr pos:start="31:13" pos:end="31:29"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:29"><name pos:start="31:14" pos:end="31:14">c</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:29">header_parsed</name></name></expr>)</condition> <block pos:start="31:32" pos:end="39:9">{<block_content pos:start="33:17" pos:end="37:37">

		<decl_stmt pos:start="33:17" pos:end="33:68"><decl pos:start="33:17" pos:end="33:67"><type pos:start="33:17" pos:end="33:19"><name pos:start="33:17" pos:end="33:19">int</name></type> <name pos:start="33:21" pos:end="33:27">hdrsize</name> <init pos:start="33:29" pos:end="33:67">= <expr pos:start="33:31" pos:end="33:67"><call pos:start="33:31" pos:end="33:67"><name pos:start="33:31" pos:end="33:47">adx_encode_header</name><argument_list pos:start="33:48" pos:end="33:67">(<argument pos:start="33:49" pos:end="33:53"><expr pos:start="33:49" pos:end="33:53"><name pos:start="33:49" pos:end="33:53">avctx</name></expr></argument>,<argument pos:start="33:55" pos:end="33:57"><expr pos:start="33:55" pos:end="33:57"><name pos:start="33:55" pos:end="33:57">dst</name></expr></argument>,<argument pos:start="33:59" pos:end="33:66"><expr pos:start="33:59" pos:end="33:66"><name pos:start="33:59" pos:end="33:66">buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="35:17" pos:end="35:29"><expr pos:start="35:17" pos:end="35:28"><name pos:start="35:17" pos:end="35:19">dst</name><operator pos:start="35:20" pos:end="35:21">+=</operator><name pos:start="35:22" pos:end="35:28">hdrsize</name></expr>;</expr_stmt>

		<expr_stmt pos:start="37:17" pos:end="37:37"><expr pos:start="37:17" pos:end="37:36"><name pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:17">c</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:32">header_parsed</name></name> <operator pos:start="37:34" pos:end="37:34">=</operator> <literal type="number" pos:start="37:36" pos:end="37:36">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="43:9" pos:end="89:9"><if pos:start="43:9" pos:end="57:9">if <condition pos:start="43:12" pos:end="43:31">(<expr pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:17">avctx</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:27">channels</name></name><operator pos:start="43:28" pos:end="43:29">==</operator><literal type="number" pos:start="43:30" pos:end="43:30">1</literal></expr>)</condition> <block pos:start="43:33" pos:end="57:9">{<block_content pos:start="45:17" pos:end="55:17">

		<while pos:start="45:17" pos:end="55:17">while<condition pos:start="45:22" pos:end="45:31">(<expr pos:start="45:23" pos:end="45:30"><name pos:start="45:23" pos:end="45:26">rest</name><operator pos:start="45:27" pos:end="45:28">&gt;=</operator><literal type="number" pos:start="45:29" pos:end="45:30">32</literal></expr>)</condition> <block pos:start="45:33" pos:end="55:17">{<block_content pos:start="47:25" pos:end="53:33">

			<expr_stmt pos:start="47:25" pos:end="47:56"><expr pos:start="47:25" pos:end="47:55"><call pos:start="47:25" pos:end="47:55"><name pos:start="47:25" pos:end="47:34">adx_encode</name><argument_list pos:start="47:35" pos:end="47:55">(<argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">dst</name></expr></argument>,<argument pos:start="47:40" pos:end="47:46"><expr pos:start="47:40" pos:end="47:46"><name pos:start="47:40" pos:end="47:46">samples</name></expr></argument>,<argument pos:start="47:48" pos:end="47:54"><expr pos:start="47:48" pos:end="47:54"><name pos:start="47:48" pos:end="47:54"><name pos:start="47:48" pos:end="47:48">c</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:54">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="49:25" pos:end="49:32"><expr pos:start="49:25" pos:end="49:31"><name pos:start="49:25" pos:end="49:27">dst</name><operator pos:start="49:28" pos:end="49:29">+=</operator><literal type="number" pos:start="49:30" pos:end="49:31">18</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="51:25" pos:end="51:36"><expr pos:start="51:25" pos:end="51:35"><name pos:start="51:25" pos:end="51:31">samples</name><operator pos:start="51:32" pos:end="51:33">+=</operator><literal type="number" pos:start="51:34" pos:end="51:35">32</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="53:25" pos:end="53:33"><expr pos:start="53:25" pos:end="53:32"><name pos:start="53:25" pos:end="53:28">rest</name><operator pos:start="53:29" pos:end="53:30">-=</operator><literal type="number" pos:start="53:31" pos:end="53:32">32</literal></expr>;</expr_stmt>

		</block_content>}</block></while>

	</block_content>}</block></if> <else pos:start="57:11" pos:end="89:9">else <block pos:start="57:16" pos:end="89:9">{<block_content pos:start="59:17" pos:end="87:17">

		<while pos:start="59:17" pos:end="87:17">while<condition pos:start="59:22" pos:end="59:33">(<expr pos:start="59:23" pos:end="59:32"><name pos:start="59:23" pos:end="59:26">rest</name><operator pos:start="59:27" pos:end="59:28">&gt;=</operator><literal type="number" pos:start="59:29" pos:end="59:30">32</literal><operator pos:start="59:31" pos:end="59:31">*</operator><literal type="number" pos:start="59:32" pos:end="59:32">2</literal></expr>)</condition> <block pos:start="59:35" pos:end="87:17">{<block_content pos:start="61:25" pos:end="85:35">

			<decl_stmt pos:start="61:25" pos:end="61:43"><decl pos:start="61:25" pos:end="61:42"><type pos:start="61:25" pos:end="61:29"><name pos:start="61:25" pos:end="61:29">short</name></type> <name pos:start="61:31" pos:end="61:42"><name pos:start="61:31" pos:end="61:36">tmpbuf</name><index pos:start="61:37" pos:end="61:42">[<expr pos:start="61:38" pos:end="61:41"><literal type="number" pos:start="61:38" pos:end="61:39">32</literal><operator pos:start="61:40" pos:end="61:40">*</operator><literal type="number" pos:start="61:41" pos:end="61:41">2</literal></expr>]</index></name></decl>;</decl_stmt>

			<decl_stmt pos:start="63:25" pos:end="63:30"><decl pos:start="63:25" pos:end="63:29"><type pos:start="63:25" pos:end="63:27"><name pos:start="63:25" pos:end="63:27">int</name></type> <name pos:start="63:29" pos:end="63:29">i</name></decl>;</decl_stmt>



			<for pos:start="67:25" pos:end="73:25">for<control pos:start="67:28" pos:end="67:41">(<init pos:start="67:29" pos:end="67:32"><expr pos:start="67:29" pos:end="67:31"><name pos:start="67:29" pos:end="67:29">i</name><operator pos:start="67:30" pos:end="67:30">=</operator><literal type="number" pos:start="67:31" pos:end="67:31">0</literal></expr>;</init><condition pos:start="67:33" pos:end="67:37"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:33">i</name><operator pos:start="67:34" pos:end="67:34">&lt;</operator><literal type="number" pos:start="67:35" pos:end="67:36">32</literal></expr>;</condition><incr pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr></incr>)</control> <block pos:start="67:43" pos:end="73:25">{<block_content pos:start="69:33" pos:end="71:62">

				<expr_stmt pos:start="69:33" pos:end="69:57"><expr pos:start="69:33" pos:end="69:56"><name pos:start="69:33" pos:end="69:41"><name pos:start="69:33" pos:end="69:38">tmpbuf</name><index pos:start="69:39" pos:end="69:41">[<expr pos:start="69:40" pos:end="69:40"><name pos:start="69:40" pos:end="69:40">i</name></expr>]</index></name> <operator pos:start="69:43" pos:end="69:43">=</operator> <name pos:start="69:45" pos:end="69:56"><name pos:start="69:45" pos:end="69:51">samples</name><index pos:start="69:52" pos:end="69:56">[<expr pos:start="69:53" pos:end="69:55"><name pos:start="69:53" pos:end="69:53">i</name><operator pos:start="69:54" pos:end="69:54">*</operator><literal type="number" pos:start="69:55" pos:end="69:55">2</literal></expr>]</index></name></expr>;</expr_stmt>

				<expr_stmt pos:start="71:33" pos:end="71:62"><expr pos:start="71:33" pos:end="71:61"><name pos:start="71:33" pos:end="71:44"><name pos:start="71:33" pos:end="71:38">tmpbuf</name><index pos:start="71:39" pos:end="71:44">[<expr pos:start="71:40" pos:end="71:43"><name pos:start="71:40" pos:end="71:40">i</name><operator pos:start="71:41" pos:end="71:41">+</operator><literal type="number" pos:start="71:42" pos:end="71:43">32</literal></expr>]</index></name> <operator pos:start="71:46" pos:end="71:46">=</operator> <name pos:start="71:48" pos:end="71:61"><name pos:start="71:48" pos:end="71:54">samples</name><index pos:start="71:55" pos:end="71:61">[<expr pos:start="71:56" pos:end="71:60"><name pos:start="71:56" pos:end="71:56">i</name><operator pos:start="71:57" pos:end="71:57">*</operator><literal type="number" pos:start="71:58" pos:end="71:59">2</literal><operator pos:start="71:59" pos:end="71:59">+</operator><literal type="number" pos:start="71:60" pos:end="71:60">1</literal></expr>]</index></name></expr>;</expr_stmt>

			</block_content>}</block></for>



			<expr_stmt pos:start="77:25" pos:end="77:55"><expr pos:start="77:25" pos:end="77:54"><call pos:start="77:25" pos:end="77:54"><name pos:start="77:25" pos:end="77:34">adx_encode</name><argument_list pos:start="77:35" pos:end="77:54">(<argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:38">dst</name></expr></argument>,<argument pos:start="77:40" pos:end="77:45"><expr pos:start="77:40" pos:end="77:45"><name pos:start="77:40" pos:end="77:45">tmpbuf</name></expr></argument>,<argument pos:start="77:47" pos:end="77:53"><expr pos:start="77:47" pos:end="77:53"><name pos:start="77:47" pos:end="77:53"><name pos:start="77:47" pos:end="77:47">c</name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:53">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="79:25" pos:end="79:63"><expr pos:start="79:25" pos:end="79:62"><call pos:start="79:25" pos:end="79:62"><name pos:start="79:25" pos:end="79:34">adx_encode</name><argument_list pos:start="79:35" pos:end="79:62">(<argument pos:start="79:36" pos:end="79:41"><expr pos:start="79:36" pos:end="79:41"><name pos:start="79:36" pos:end="79:38">dst</name><operator pos:start="79:39" pos:end="79:39">+</operator><literal type="number" pos:start="79:40" pos:end="79:41">18</literal></expr></argument>,<argument pos:start="79:43" pos:end="79:51"><expr pos:start="79:43" pos:end="79:51"><name pos:start="79:43" pos:end="79:48">tmpbuf</name><operator pos:start="79:49" pos:end="79:49">+</operator><literal type="number" pos:start="79:50" pos:end="79:51">32</literal></expr></argument>,<argument pos:start="79:53" pos:end="79:61"><expr pos:start="79:53" pos:end="79:61"><name pos:start="79:53" pos:end="79:59"><name pos:start="79:53" pos:end="79:53">c</name><operator pos:start="79:54" pos:end="79:55">-&gt;</operator><name pos:start="79:56" pos:end="79:59">prev</name></name><operator pos:start="79:60" pos:end="79:60">+</operator><literal type="number" pos:start="79:61" pos:end="79:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="81:25" pos:end="81:34"><expr pos:start="81:25" pos:end="81:33"><name pos:start="81:25" pos:end="81:27">dst</name><operator pos:start="81:28" pos:end="81:29">+=</operator><literal type="number" pos:start="81:30" pos:end="81:31">18</literal><operator pos:start="81:32" pos:end="81:32">*</operator><literal type="number" pos:start="81:33" pos:end="81:33">2</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="83:25" pos:end="83:38"><expr pos:start="83:25" pos:end="83:37"><name pos:start="83:25" pos:end="83:31">samples</name><operator pos:start="83:32" pos:end="83:33">+=</operator><literal type="number" pos:start="83:34" pos:end="83:35">32</literal><operator pos:start="83:36" pos:end="83:36">*</operator><literal type="number" pos:start="83:37" pos:end="83:37">2</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="85:25" pos:end="85:35"><expr pos:start="85:25" pos:end="85:34"><name pos:start="85:25" pos:end="85:28">rest</name><operator pos:start="85:29" pos:end="85:30">-=</operator><literal type="number" pos:start="85:31" pos:end="85:32">32</literal><operator pos:start="85:33" pos:end="85:33">*</operator><literal type="number" pos:start="85:34" pos:end="85:34">2</literal></expr>;</expr_stmt>

		</block_content>}</block></while>

	</block_content>}</block></else></if_stmt>

	<return pos:start="91:9" pos:end="91:25">return <expr pos:start="91:16" pos:end="91:24"><name pos:start="91:16" pos:end="91:18">dst</name><operator pos:start="91:19" pos:end="91:19">-</operator><name pos:start="91:20" pos:end="91:24">frame</name></expr>;</return>

</block_content>}</block></function>
</unit>
