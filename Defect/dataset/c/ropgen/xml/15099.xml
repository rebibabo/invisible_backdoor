<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15099.c" pos:tabs="8"><function pos:start="1:1" pos:end="19:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:18">qemu_vmalloc</name><parameter_list pos:start="1:19" pos:end="1:31">(<parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:25"><name pos:start="1:20" pos:end="1:25">size_t</name></type> <name pos:start="1:27" pos:end="1:30">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="19:1">{<block_content pos:start="11:5" pos:end="17:75">

    <comment type="block" pos:start="5:5" pos:end="9:33">/* FIXME: this is not exactly optimal solution since VirtualAlloc

       has 64Kb granularity, but at least it guarantees us that the

       memory is page aligned. */</comment>

    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:14">(<expr pos:start="11:9" pos:end="11:13"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:13">size</name></expr>)</condition> <block pos:start="11:16" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:16">

        <expr_stmt pos:start="13:9" pos:end="13:16"><expr pos:start="13:9" pos:end="13:15"><call pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:13">abort</name><argument_list pos:start="13:14" pos:end="13:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="17:5" pos:end="17:75">return <expr pos:start="17:12" pos:end="17:74"><call pos:start="17:12" pos:end="17:74"><name pos:start="17:12" pos:end="17:20">oom_check</name><argument_list pos:start="17:21" pos:end="17:74">(<argument pos:start="17:22" pos:end="17:73"><expr pos:start="17:22" pos:end="17:73"><call pos:start="17:22" pos:end="17:73"><name pos:start="17:22" pos:end="17:33">VirtualAlloc</name><argument_list pos:start="17:34" pos:end="17:73">(<argument pos:start="17:35" pos:end="17:38"><expr pos:start="17:35" pos:end="17:38"><name pos:start="17:35" pos:end="17:38">NULL</name></expr></argument>, <argument pos:start="17:41" pos:end="17:44"><expr pos:start="17:41" pos:end="17:44"><name pos:start="17:41" pos:end="17:44">size</name></expr></argument>, <argument pos:start="17:47" pos:end="17:56"><expr pos:start="17:47" pos:end="17:56"><name pos:start="17:47" pos:end="17:56">MEM_COMMIT</name></expr></argument>, <argument pos:start="17:59" pos:end="17:72"><expr pos:start="17:59" pos:end="17:72"><name pos:start="17:59" pos:end="17:72">PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
