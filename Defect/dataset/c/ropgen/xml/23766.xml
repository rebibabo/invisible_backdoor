<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23766.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:21"><type pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:20"><name pos:start="1:1" pos:end="1:6">struct</name> <name pos:start="1:8" pos:end="1:20">GuestFileRead</name></name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:41">qmp_guest_file_read</name><parameter_list pos:start="1:42" pos:end="2:70">(<parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:49">int64_t</name></type> <name pos:start="1:51" pos:end="1:56">handle</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:62">bool</name></type> <name pos:start="1:64" pos:end="1:72">has_count</name></decl></parameter>,
                                          <parameter pos:start="2:43" pos:end="2:55"><decl pos:start="2:43" pos:end="2:55"><type pos:start="2:43" pos:end="2:55"><name pos:start="2:43" pos:end="2:49">int64_t</name></type> <name pos:start="2:51" pos:end="2:55">count</name></decl></parameter>, <parameter pos:start="2:58" pos:end="2:69"><decl pos:start="2:58" pos:end="2:69"><type pos:start="2:58" pos:end="2:69"><name pos:start="2:58" pos:end="2:62">Error</name> <modifier pos:start="2:64" pos:end="2:64">*</modifier><modifier pos:start="2:65" pos:end="2:65">*</modifier></type><name pos:start="2:66" pos:end="2:69">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="31:21">{<block_content pos:start="4:5" pos:end="31:21">
    <decl_stmt pos:start="4:5" pos:end="4:64"><decl pos:start="4:5" pos:end="4:63"><type pos:start="4:5" pos:end="4:21"><name pos:start="4:5" pos:end="4:19">GuestFileHandle</name> <modifier pos:start="4:21" pos:end="4:21">*</modifier></type><name pos:start="4:22" pos:end="4:24">gfh</name> <init pos:start="4:26" pos:end="4:63">= <expr pos:start="4:28" pos:end="4:63"><call pos:start="4:28" pos:end="4:63"><name pos:start="4:28" pos:end="4:49">guest_file_handle_find</name><argument_list pos:start="4:50" pos:end="4:63">(<argument pos:start="4:51" pos:end="4:56"><expr pos:start="4:51" pos:end="4:56"><name pos:start="4:51" pos:end="4:56">handle</name></expr></argument>, <argument pos:start="4:59" pos:end="4:62"><expr pos:start="4:59" pos:end="4:62"><name pos:start="4:59" pos:end="4:62">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GuestFileRead</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:28">read_data</name> <init pos:start="5:30" pos:end="5:35">= <expr pos:start="5:32" pos:end="5:35"><name pos:start="5:32" pos:end="5:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:16"><decl pos:start="6:5" pos:end="6:15"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:10">guchar</name> <modifier pos:start="6:12" pos:end="6:12">*</modifier></type><name pos:start="6:13" pos:end="6:15">buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">FILE</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:12">fh</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:22"><decl pos:start="8:5" pos:end="8:21"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:10">size_t</name></type> <name pos:start="8:12" pos:end="8:21">read_count</name></decl>;</decl_stmt>
    <if_stmt pos:start="9:5" pos:end="31:21"><if pos:start="9:5" pos:end="31:21">if <condition pos:start="9:8" pos:end="9:13">(<expr pos:start="9:9" pos:end="9:12"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:12">gfh</name></expr>)</condition> <block pos:start="9:15" pos:end="31:21">{<block_content pos:start="10:5" pos:end="31:21">
    <if_stmt pos:start="10:5" pos:end="31:21"><if pos:start="10:5" pos:end="12:5">if <condition pos:start="10:8" pos:end="10:19">(<expr pos:start="10:9" pos:end="10:18"><operator pos:start="10:9" pos:end="10:9">!</operator><name pos:start="10:10" pos:end="10:18">has_count</name></expr>)</condition> <block pos:start="10:21" pos:end="12:5">{<block_content pos:start="11:9" pos:end="11:39">
        <expr_stmt pos:start="11:9" pos:end="11:39"><expr pos:start="11:9" pos:end="11:38"><name pos:start="11:9" pos:end="11:13">count</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <name pos:start="11:17" pos:end="11:38">QGA_READ_COUNT_DEFAULT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="12:7" pos:end="31:21">else if <condition pos:start="12:15" pos:end="12:25">(<expr pos:start="12:16" pos:end="12:24"><name pos:start="12:16" pos:end="12:20">count</name> <operator pos:start="12:22" pos:end="12:22">&lt;</operator> <literal type="number" pos:start="12:24" pos:end="12:24">0</literal></expr>)</condition> <block pos:start="12:27" pos:end="31:21">{<block_content pos:start="13:9" pos:end="31:21">
        <expr_stmt pos:start="13:9" pos:end="14:26"><expr pos:start="13:9" pos:end="14:25"><call pos:start="13:9" pos:end="14:25"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="14:25">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:76"><expr pos:start="13:26" pos:end="13:76"><literal type="string" pos:start="13:26" pos:end="13:35">"value '%"</literal> <name pos:start="13:37" pos:end="13:42">PRId64</name> <literal type="string" pos:start="13:44" pos:end="13:76">"' is invalid for argument count"</literal></expr></argument>,
                   <argument pos:start="14:20" pos:end="14:24"><expr pos:start="14:20" pos:end="14:24"><name pos:start="14:20" pos:end="14:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:6">fh</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <name pos:start="15:10" pos:end="15:16"><name pos:start="15:10" pos:end="15:12">gfh</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:16">fh</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:29"><expr pos:start="16:5" pos:end="16:28"><name pos:start="16:5" pos:end="16:7">buf</name> <operator pos:start="16:9" pos:end="16:9">=</operator> <call pos:start="16:11" pos:end="16:28"><name pos:start="16:11" pos:end="16:19">g_malloc0</name><argument_list pos:start="16:20" pos:end="16:28">(<argument pos:start="16:21" pos:end="16:27"><expr pos:start="16:21" pos:end="16:27"><name pos:start="16:21" pos:end="16:25">count</name><operator pos:start="16:26" pos:end="16:26">+</operator><literal type="number" pos:start="16:27" pos:end="16:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:14">read_count</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:41"><name pos:start="17:18" pos:end="17:22">fread</name><argument_list pos:start="17:23" pos:end="17:41">(<argument pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:26">buf</name></expr></argument>, <argument pos:start="17:29" pos:end="17:29"><expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">1</literal></expr></argument>, <argument pos:start="17:32" pos:end="17:36"><expr pos:start="17:32" pos:end="17:36"><name pos:start="17:32" pos:end="17:36">count</name></expr></argument>, <argument pos:start="17:39" pos:end="17:40"><expr pos:start="17:39" pos:end="17:40"><name pos:start="17:39" pos:end="17:40">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="31:21"><if pos:start="18:5" pos:end="21:5">if <condition pos:start="18:8" pos:end="18:19">(<expr pos:start="18:9" pos:end="18:18"><call pos:start="18:9" pos:end="18:18"><name pos:start="18:9" pos:end="18:14">ferror</name><argument_list pos:start="18:15" pos:end="18:18">(<argument pos:start="18:16" pos:end="18:17"><expr pos:start="18:16" pos:end="18:17"><name pos:start="18:16" pos:end="18:17">fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="18:21" pos:end="21:5">{<block_content pos:start="19:9" pos:end="20:65">
        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:24">error_setg_errno</name><argument_list pos:start="19:25" pos:end="19:60">(<argument pos:start="19:26" pos:end="19:29"><expr pos:start="19:26" pos:end="19:29"><name pos:start="19:26" pos:end="19:29">errp</name></expr></argument>, <argument pos:start="19:32" pos:end="19:36"><expr pos:start="19:32" pos:end="19:36"><name pos:start="19:32" pos:end="19:36">errno</name></expr></argument>, <argument pos:start="19:39" pos:end="19:59"><expr pos:start="19:39" pos:end="19:59"><literal type="string" pos:start="19:39" pos:end="19:59">"failed to read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:65"><expr pos:start="20:9" pos:end="20:64"><call pos:start="20:9" pos:end="20:64"><name pos:start="20:9" pos:end="20:12">slog</name><argument_list pos:start="20:13" pos:end="20:64">(<argument pos:start="20:14" pos:end="20:55"><expr pos:start="20:14" pos:end="20:55"><literal type="string" pos:start="20:14" pos:end="20:48">"guest-file-read failed, handle: %"</literal> <name pos:start="20:50" pos:end="20:55">PRId64</name></expr></argument>, <argument pos:start="20:58" pos:end="20:63"><expr pos:start="20:58" pos:end="20:63"><name pos:start="20:58" pos:end="20:63">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="21:7" pos:end="31:21">else <block pos:start="21:12" pos:end="31:21">{<block_content pos:start="22:9" pos:end="31:21">
        <expr_stmt pos:start="22:9" pos:end="22:28"><expr pos:start="22:9" pos:end="22:27"><name pos:start="22:9" pos:end="22:23"><name pos:start="22:9" pos:end="22:11">buf</name><index pos:start="22:12" pos:end="22:23">[<expr pos:start="22:13" pos:end="22:22"><name pos:start="22:13" pos:end="22:22">read_count</name></expr>]</index></name> <operator pos:start="22:25" pos:end="22:25">=</operator> <literal type="number" pos:start="22:27" pos:end="22:27">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:45"><expr pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:17">read_data</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:44"><name pos:start="23:21" pos:end="23:26">g_new0</name><argument_list pos:start="23:27" pos:end="23:44">(<argument pos:start="23:28" pos:end="23:40"><expr pos:start="23:28" pos:end="23:40"><name pos:start="23:28" pos:end="23:40">GuestFileRead</name></expr></argument>, <argument pos:start="23:43" pos:end="23:43"><expr pos:start="23:43" pos:end="23:43"><literal type="number" pos:start="23:43" pos:end="23:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:38"><expr pos:start="24:9" pos:end="24:37"><name pos:start="24:9" pos:end="24:24"><name pos:start="24:9" pos:end="24:17">read_data</name><operator pos:start="24:18" pos:end="24:19">-&gt;</operator><name pos:start="24:20" pos:end="24:24">count</name></name> <operator pos:start="24:26" pos:end="24:26">=</operator> <name pos:start="24:28" pos:end="24:37">read_count</name></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:34"><expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:17">read_data</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:22">eof</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:33"><name pos:start="25:26" pos:end="25:29">feof</name><argument_list pos:start="25:30" pos:end="25:33">(<argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="26:9" pos:end="31:21"><if pos:start="26:9" pos:end="31:21">if <condition pos:start="26:12" pos:end="26:23">(<expr pos:start="26:13" pos:end="26:22"><name pos:start="26:13" pos:end="26:22">read_count</name></expr>)</condition> <block pos:start="26:25" pos:end="31:21">{<block_content pos:start="27:13" pos:end="31:21">
            <expr_stmt pos:start="27:13" pos:end="27:66"><expr pos:start="27:13" pos:end="27:65"><name pos:start="27:13" pos:end="27:30"><name pos:start="27:13" pos:end="27:21">read_data</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:30">buf_b64</name></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <call pos:start="27:34" pos:end="27:65"><name pos:start="27:34" pos:end="27:48">g_base64_encode</name><argument_list pos:start="27:49" pos:end="27:65">(<argument pos:start="27:50" pos:end="27:52"><expr pos:start="27:50" pos:end="27:52"><name pos:start="27:50" pos:end="27:52">buf</name></expr></argument>, <argument pos:start="27:55" pos:end="27:64"><expr pos:start="27:55" pos:end="27:64"><name pos:start="27:55" pos:end="27:64">read_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:38"><expr pos:start="28:9" pos:end="28:37"><name pos:start="28:9" pos:end="28:18"><name pos:start="28:9" pos:end="28:11">gfh</name><operator pos:start="28:12" pos:end="28:13">-&gt;</operator><name pos:start="28:14" pos:end="28:18">state</name></name> <operator pos:start="28:20" pos:end="28:20">=</operator> <name pos:start="28:22" pos:end="28:37">RW_STATE_READING</name></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><call pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:10">g_free</name><argument_list pos:start="29:11" pos:end="29:15">(<argument pos:start="29:12" pos:end="29:14"><expr pos:start="29:12" pos:end="29:14"><name pos:start="29:12" pos:end="29:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:17"><expr pos:start="30:5" pos:end="30:16"><call pos:start="30:5" pos:end="30:16"><name pos:start="30:5" pos:end="30:12">clearerr</name><argument_list pos:start="30:13" pos:end="30:16">(<argument pos:start="30:14" pos:end="30:15"><expr pos:start="30:14" pos:end="30:15"><name pos:start="30:14" pos:end="30:15">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="31:5" pos:end="31:21">return <expr pos:start="31:12" pos:end="31:20"><name pos:start="31:12" pos:end="31:20">read_data</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
