<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16226.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">init_output_stream</name><parameter_list pos:start="1:30" pos:end="1:76">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:42">OutputStream</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">ost</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:60"><decl pos:start="1:50" pos:end="1:60"><type pos:start="1:50" pos:end="1:60"><name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">error</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:75"><decl pos:start="1:63" pos:end="1:75"><type pos:start="1:63" pos:end="1:75"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:75">error_len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="211:1">{<block_content pos:start="5:5" pos:end="209:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="175:5"><if pos:start="9:5" pos:end="151:5">if <condition pos:start="9:8" pos:end="9:29">(<expr pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:11">ost</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:28">encoding_needed</name></name></expr>)</condition> <block pos:start="9:31" pos:end="151:5">{<block_content pos:start="11:9" pos:end="149:53">

        <decl_stmt pos:start="11:9" pos:end="11:39"><decl pos:start="11:9" pos:end="11:38"><type pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:15">AVCodec</name>      <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">codec</name> <init pos:start="11:29" pos:end="11:38">= <expr pos:start="11:31" pos:end="11:38"><name pos:start="11:31" pos:end="11:38"><name pos:start="11:31" pos:end="11:33">ost</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:38">enc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:35"><decl pos:start="13:9" pos:end="13:34"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:22">AVCodecContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:27">dec</name> <init pos:start="13:29" pos:end="13:34">= <expr pos:start="13:31" pos:end="13:34"><name pos:start="13:31" pos:end="13:34">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:25"><decl pos:start="15:9" pos:end="15:24"><type pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:19">InputStream</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">ist</name></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:44"><name pos:start="19:15" pos:end="19:39">init_output_stream_encode</name><argument_list pos:start="19:40" pos:end="19:44">(<argument pos:start="19:41" pos:end="19:43"><expr pos:start="19:41" pos:end="19:43"><name pos:start="19:41" pos:end="19:43">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:23"><if pos:start="21:9" pos:end="23:23">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:23"><block_content pos:start="23:13" pos:end="23:23">

            <return pos:start="23:13" pos:end="23:23">return <expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="27:9" pos:end="29:31"><if pos:start="27:9" pos:end="29:31">if <condition pos:start="27:12" pos:end="27:42">(<expr pos:start="27:13" pos:end="27:41"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:16">ist</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:40"><name pos:start="27:20" pos:end="27:35">get_input_stream</name><argument_list pos:start="27:36" pos:end="27:40">(<argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">ost</name></expr></argument>)</argument_list></call><operator pos:start="27:41" pos:end="27:41">)</operator></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:31"><block_content pos:start="29:13" pos:end="29:31">

            <expr_stmt pos:start="29:13" pos:end="29:31"><expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:15">dec</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:21">ist</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:30">dec_ctx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="43:9"><if pos:start="31:9" pos:end="43:9">if <condition pos:start="31:12" pos:end="31:40">(<expr pos:start="31:13" pos:end="31:39"><name pos:start="31:13" pos:end="31:15">dec</name> <operator pos:start="31:17" pos:end="31:18">&amp;&amp;</operator> <name pos:start="31:20" pos:end="31:39"><name pos:start="31:20" pos:end="31:22">dec</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:39">subtitle_header</name></name></expr>)</condition> <block pos:start="31:42" pos:end="43:9">{<block_content pos:start="33:13" pos:end="41:75">

            <expr_stmt pos:start="33:13" pos:end="33:81"><expr pos:start="33:13" pos:end="33:80"><name pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:15">ost</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:24">enc_ctx</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:41">subtitle_header</name></name> <operator pos:start="33:43" pos:end="33:43">=</operator> <call pos:start="33:45" pos:end="33:80"><name pos:start="33:45" pos:end="33:53">av_malloc</name><argument_list pos:start="33:54" pos:end="33:80">(<argument pos:start="33:55" pos:end="33:79"><expr pos:start="33:55" pos:end="33:79"><name pos:start="33:55" pos:end="33:79"><name pos:start="33:55" pos:end="33:57">dec</name><operator pos:start="33:58" pos:end="33:59">-&gt;</operator><name pos:start="33:60" pos:end="33:79">subtitle_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="37:39"><if pos:start="35:13" pos:end="37:39">if <condition pos:start="35:16" pos:end="35:47">(<expr pos:start="35:17" pos:end="35:46"><operator pos:start="35:17" pos:end="35:17">!</operator><name pos:start="35:18" pos:end="35:46"><name pos:start="35:18" pos:end="35:20">ost</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:29">enc_ctx</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:46">subtitle_header</name></name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:39"><block_content pos:start="37:17" pos:end="37:39">

                <return pos:start="37:17" pos:end="37:39">return <expr pos:start="37:24" pos:end="37:38"><call pos:start="37:24" pos:end="37:38"><name pos:start="37:24" pos:end="37:30">AVERROR</name><argument_list pos:start="37:31" pos:end="37:38">(<argument pos:start="37:32" pos:end="37:37"><expr pos:start="37:32" pos:end="37:37"><name pos:start="37:32" pos:end="37:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:99"><expr pos:start="39:13" pos:end="39:98"><call pos:start="39:13" pos:end="39:98"><name pos:start="39:13" pos:end="39:18">memcpy</name><argument_list pos:start="39:19" pos:end="39:98">(<argument pos:start="39:20" pos:end="39:48"><expr pos:start="39:20" pos:end="39:48"><name pos:start="39:20" pos:end="39:48"><name pos:start="39:20" pos:end="39:22">ost</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:31">enc_ctx</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:48">subtitle_header</name></name></expr></argument>, <argument pos:start="39:51" pos:end="39:70"><expr pos:start="39:51" pos:end="39:70"><name pos:start="39:51" pos:end="39:70"><name pos:start="39:51" pos:end="39:53">dec</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:70">subtitle_header</name></name></expr></argument>, <argument pos:start="39:73" pos:end="39:97"><expr pos:start="39:73" pos:end="39:97"><name pos:start="39:73" pos:end="39:97"><name pos:start="39:73" pos:end="39:75">dec</name><operator pos:start="39:76" pos:end="39:77">-&gt;</operator><name pos:start="39:78" pos:end="39:97">subtitle_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:75"><expr pos:start="41:13" pos:end="41:74"><name pos:start="41:13" pos:end="41:46"><name pos:start="41:13" pos:end="41:15">ost</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:24">enc_ctx</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:46">subtitle_header_size</name></name> <operator pos:start="41:48" pos:end="41:48">=</operator> <name pos:start="41:50" pos:end="41:74"><name pos:start="41:50" pos:end="41:52">dec</name><operator pos:start="41:53" pos:end="41:54">-&gt;</operator><name pos:start="41:55" pos:end="41:74">subtitle_header_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="47:66"><if pos:start="45:9" pos:end="47:66">if <condition pos:start="45:12" pos:end="45:64">(<expr pos:start="45:13" pos:end="45:63"><operator pos:start="45:13" pos:end="45:13">!</operator><call pos:start="45:14" pos:end="45:63"><name pos:start="45:14" pos:end="45:24">av_dict_get</name><argument_list pos:start="45:25" pos:end="45:63">(<argument pos:start="45:26" pos:end="45:42"><expr pos:start="45:26" pos:end="45:42"><name pos:start="45:26" pos:end="45:42"><name pos:start="45:26" pos:end="45:28">ost</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:42">encoder_opts</name></name></expr></argument>, <argument pos:start="45:45" pos:end="45:53"><expr pos:start="45:45" pos:end="45:53"><literal type="string" pos:start="45:45" pos:end="45:53">"threads"</literal></expr></argument>, <argument pos:start="45:56" pos:end="45:59"><expr pos:start="45:56" pos:end="45:59"><name pos:start="45:56" pos:end="45:59">NULL</name></expr></argument>, <argument pos:start="45:62" pos:end="45:62"><expr pos:start="45:62" pos:end="45:62"><literal type="number" pos:start="45:62" pos:end="45:62">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:66"><block_content pos:start="47:13" pos:end="47:66">

            <expr_stmt pos:start="47:13" pos:end="47:66"><expr pos:start="47:13" pos:end="47:65"><call pos:start="47:13" pos:end="47:65"><name pos:start="47:13" pos:end="47:23">av_dict_set</name><argument_list pos:start="47:24" pos:end="47:65">(<argument pos:start="47:25" pos:end="47:42"><expr pos:start="47:25" pos:end="47:42"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:42"><name pos:start="47:26" pos:end="47:28">ost</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:42">encoder_opts</name></name></expr></argument>, <argument pos:start="47:45" pos:end="47:53"><expr pos:start="47:45" pos:end="47:53"><literal type="string" pos:start="47:45" pos:end="47:53">"threads"</literal></expr></argument>, <argument pos:start="47:56" pos:end="47:61"><expr pos:start="47:56" pos:end="47:61"><literal type="string" pos:start="47:56" pos:end="47:61">"auto"</literal></expr></argument>, <argument pos:start="47:64" pos:end="47:64"><expr pos:start="47:64" pos:end="47:64"><literal type="number" pos:start="47:64" pos:end="47:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:73">(<expr pos:start="51:13" pos:end="51:72"><name pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:15">ost</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:23">filter</name></name> <operator pos:start="51:25" pos:end="51:26">&amp;&amp;</operator> <name pos:start="51:28" pos:end="51:57"><name pos:start="51:28" pos:end="51:30">ost</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:38">filter</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:46">filter</name><operator pos:start="51:47" pos:end="51:48">-&gt;</operator><name pos:start="51:49" pos:end="51:54">inputs</name><index pos:start="51:55" pos:end="51:57">[<expr pos:start="51:56" pos:end="51:56"><literal type="number" pos:start="51:56" pos:end="51:56">0</literal></expr>]</index></name><operator pos:start="51:58" pos:end="51:59">-&gt;</operator><name pos:start="51:60" pos:end="51:72">hw_frames_ctx</name></expr>)</condition> <block pos:start="51:75" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:39">

            <expr_stmt pos:start="53:13" pos:end="53:103"><expr pos:start="53:13" pos:end="53:102"><name pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:15">ost</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:24">enc_ctx</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:39">hw_frames_ctx</name></name> <operator pos:start="53:41" pos:end="53:41">=</operator> <call pos:start="53:43" pos:end="53:102"><name pos:start="53:43" pos:end="53:55">av_buffer_ref</name><argument_list pos:start="53:56" pos:end="53:102">(<argument pos:start="53:57" pos:end="53:101"><expr pos:start="53:57" pos:end="53:101"><name pos:start="53:57" pos:end="53:86"><name pos:start="53:57" pos:end="53:59">ost</name><operator pos:start="53:60" pos:end="53:61">-&gt;</operator><name pos:start="53:62" pos:end="53:67">filter</name><operator pos:start="53:68" pos:end="53:69">-&gt;</operator><name pos:start="53:70" pos:end="53:75">filter</name><operator pos:start="53:76" pos:end="53:77">-&gt;</operator><name pos:start="53:78" pos:end="53:83">inputs</name><index pos:start="53:84" pos:end="53:86">[<expr pos:start="53:85" pos:end="53:85"><literal type="number" pos:start="53:85" pos:end="53:85">0</literal></expr>]</index></name><operator pos:start="53:87" pos:end="53:88">-&gt;</operator><name pos:start="53:89" pos:end="53:101">hw_frames_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="57:39"><if pos:start="55:13" pos:end="57:39">if <condition pos:start="55:16" pos:end="55:45">(<expr pos:start="55:17" pos:end="55:44"><operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:44"><name pos:start="55:18" pos:end="55:20">ost</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:29">enc_ctx</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:44">hw_frames_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:39"><block_content pos:start="57:17" pos:end="57:39">

                <return pos:start="57:17" pos:end="57:39">return <expr pos:start="57:24" pos:end="57:38"><call pos:start="57:24" pos:end="57:38"><name pos:start="57:24" pos:end="57:30">AVERROR</name><argument_list pos:start="57:31" pos:end="57:38">(<argument pos:start="57:32" pos:end="57:37"><expr pos:start="57:32" pos:end="57:37"><name pos:start="57:32" pos:end="57:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="63:9" pos:end="79:9"><if pos:start="63:9" pos:end="79:9">if <condition pos:start="63:12" pos:end="63:79">(<expr pos:start="63:13" pos:end="63:78"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:16">ret</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:73"><name pos:start="63:20" pos:end="63:32">avcodec_open2</name><argument_list pos:start="63:33" pos:end="63:73">(<argument pos:start="63:34" pos:end="63:45"><expr pos:start="63:34" pos:end="63:45"><name pos:start="63:34" pos:end="63:45"><name pos:start="63:34" pos:end="63:36">ost</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:45">enc_ctx</name></name></expr></argument>, <argument pos:start="63:48" pos:end="63:52"><expr pos:start="63:48" pos:end="63:52"><name pos:start="63:48" pos:end="63:52">codec</name></expr></argument>, <argument pos:start="63:55" pos:end="63:72"><expr pos:start="63:55" pos:end="63:72"><operator pos:start="63:55" pos:end="63:55">&amp;</operator><name pos:start="63:56" pos:end="63:72"><name pos:start="63:56" pos:end="63:58">ost</name><operator pos:start="63:59" pos:end="63:60">-&gt;</operator><name pos:start="63:61" pos:end="63:72">encoder_opts</name></name></expr></argument>)</argument_list></call><operator pos:start="63:74" pos:end="63:74">)</operator> <operator pos:start="63:76" pos:end="63:76">&lt;</operator> <literal type="number" pos:start="63:78" pos:end="63:78">0</literal></expr>)</condition> <block pos:start="63:81" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:23">

            <if_stmt pos:start="65:13" pos:end="67:51"><if pos:start="65:13" pos:end="67:51">if <condition pos:start="65:16" pos:end="65:44">(<expr pos:start="65:17" pos:end="65:43"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:22">==</operator> <name pos:start="65:24" pos:end="65:43">AVERROR_EXPERIMENTAL</name></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:51"><block_content pos:start="67:17" pos:end="67:51">

                <expr_stmt pos:start="67:17" pos:end="67:51"><expr pos:start="67:17" pos:end="67:50"><call pos:start="67:17" pos:end="67:50"><name pos:start="67:17" pos:end="67:40">abort_codec_experimental</name><argument_list pos:start="67:41" pos:end="67:50">(<argument pos:start="67:42" pos:end="67:46"><expr pos:start="67:42" pos:end="67:46"><name pos:start="67:42" pos:end="67:46">codec</name></expr></argument>, <argument pos:start="67:49" pos:end="67:49"><expr pos:start="67:49" pos:end="67:49"><literal type="number" pos:start="67:49" pos:end="67:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="75:49"><expr pos:start="69:13" pos:end="75:48"><call pos:start="69:13" pos:end="75:48"><name pos:start="69:13" pos:end="69:20">snprintf</name><argument_list pos:start="69:21" pos:end="75:48">(<argument pos:start="69:22" pos:end="69:26"><expr pos:start="69:22" pos:end="69:26"><name pos:start="69:22" pos:end="69:26">error</name></expr></argument>, <argument pos:start="69:29" pos:end="69:37"><expr pos:start="69:29" pos:end="69:37"><name pos:start="69:29" pos:end="69:37">error_len</name></expr></argument>,

                     <argument pos:start="71:22" pos:end="73:89"><expr pos:start="71:22" pos:end="73:89"><literal type="string" pos:start="71:22" pos:end="71:78">"Error while opening encoder for output stream #%d:%d - "</literal>

                     <literal type="string" pos:start="73:22" pos:end="73:89">"maybe incorrect parameters such as bit_rate, rate, width or height"</literal></expr></argument>,

                    <argument pos:start="75:21" pos:end="75:35"><expr pos:start="75:21" pos:end="75:35"><name pos:start="75:21" pos:end="75:35"><name pos:start="75:21" pos:end="75:23">ost</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:35">file_index</name></name></expr></argument>, <argument pos:start="75:38" pos:end="75:47"><expr pos:start="75:38" pos:end="75:47"><name pos:start="75:38" pos:end="75:47"><name pos:start="75:38" pos:end="75:40">ost</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:47">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:44"><expr pos:start="81:9" pos:end="81:43"><call pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:24">assert_avoptions</name><argument_list pos:start="81:25" pos:end="81:43">(<argument pos:start="81:26" pos:end="81:42"><expr pos:start="81:26" pos:end="81:42"><name pos:start="81:26" pos:end="81:42"><name pos:start="81:26" pos:end="81:28">ost</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:42">encoder_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="87:87"><if pos:start="83:9" pos:end="87:87">if <condition pos:start="83:12" pos:end="83:68">(<expr pos:start="83:13" pos:end="83:67"><name pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:15">ost</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:24">enc_ctx</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:34">bit_rate</name></name> <operator pos:start="83:36" pos:end="83:37">&amp;&amp;</operator> <name pos:start="83:39" pos:end="83:60"><name pos:start="83:39" pos:end="83:41">ost</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:50">enc_ctx</name><operator pos:start="83:51" pos:end="83:52">-&gt;</operator><name pos:start="83:53" pos:end="83:60">bit_rate</name></name> <operator pos:start="83:62" pos:end="83:62">&lt;</operator> <literal type="number" pos:start="83:64" pos:end="83:67">1000</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="87:87"><block_content pos:start="85:13" pos:end="87:87">

            <expr_stmt pos:start="85:13" pos:end="87:87"><expr pos:start="85:13" pos:end="87:86"><call pos:start="85:13" pos:end="87:86"><name pos:start="85:13" pos:end="85:18">av_log</name><argument_list pos:start="85:19" pos:end="87:86">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">NULL</name></expr></argument>, <argument pos:start="85:26" pos:end="85:39"><expr pos:start="85:26" pos:end="85:39"><name pos:start="85:26" pos:end="85:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="85:42" pos:end="87:85"><expr pos:start="85:42" pos:end="87:85"><literal type="string" pos:start="85:42" pos:end="85:80">"The bitrate parameter is set too low."</literal>

                                         <literal type="string" pos:start="87:42" pos:end="87:85">"It takes bits/s as argument, not kbits/s\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:79"><expr pos:start="91:9" pos:end="91:78"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:78"><name pos:start="91:15" pos:end="91:45">avcodec_parameters_from_context</name><argument_list pos:start="91:46" pos:end="91:78">(<argument pos:start="91:47" pos:end="91:63"><expr pos:start="91:47" pos:end="91:63"><name pos:start="91:47" pos:end="91:63"><name pos:start="91:47" pos:end="91:49">ost</name><operator pos:start="91:50" pos:end="91:51">-&gt;</operator><name pos:start="91:52" pos:end="91:53">st</name><operator pos:start="91:54" pos:end="91:55">-&gt;</operator><name pos:start="91:56" pos:end="91:63">codecpar</name></name></expr></argument>, <argument pos:start="91:66" pos:end="91:77"><expr pos:start="91:66" pos:end="91:77"><name pos:start="91:66" pos:end="91:77"><name pos:start="91:66" pos:end="91:68">ost</name><operator pos:start="91:69" pos:end="91:70">-&gt;</operator><name pos:start="91:71" pos:end="91:77">enc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="101:9"><if pos:start="93:9" pos:end="101:9">if <condition pos:start="93:12" pos:end="93:20">(<expr pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">&lt;</operator> <literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr>)</condition> <block pos:start="93:22" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:28">

            <expr_stmt pos:start="95:13" pos:end="97:76"><expr pos:start="95:13" pos:end="97:75"><call pos:start="95:13" pos:end="97:75"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="97:75">(<argument pos:start="95:20" pos:end="95:23"><expr pos:start="95:20" pos:end="95:23"><name pos:start="95:20" pos:end="95:23">NULL</name></expr></argument>, <argument pos:start="95:26" pos:end="95:37"><expr pos:start="95:26" pos:end="95:37"><name pos:start="95:26" pos:end="95:37">AV_LOG_FATAL</name></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:74"><expr pos:start="97:20" pos:end="97:74"><literal type="string" pos:start="97:20" pos:end="97:74">"Error initializing the output stream codec context.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:28"><expr pos:start="99:13" pos:end="99:27"><call pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:24">exit_program</name><argument_list pos:start="99:25" pos:end="99:27">(<argument pos:start="99:26" pos:end="99:26"><expr pos:start="99:26" pos:end="99:26"><literal type="number" pos:start="99:26" pos:end="99:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="105:9" pos:end="145:9"><if pos:start="105:9" pos:end="145:9">if <condition pos:start="105:12" pos:end="105:45">(<expr pos:start="105:13" pos:end="105:44"><name pos:start="105:13" pos:end="105:44"><name pos:start="105:13" pos:end="105:15">ost</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:24">enc_ctx</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:44">nb_coded_side_data</name></name></expr>)</condition> <block pos:start="105:47" pos:end="145:9">{<block_content pos:start="107:13" pos:end="143:13">

            <decl_stmt pos:start="107:13" pos:end="107:18"><decl pos:start="107:13" pos:end="107:17"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="111:13" pos:end="113:79"><expr pos:start="111:13" pos:end="113:78"><name pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:15">ost</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:19">st</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:30">side_data</name></name> <operator pos:start="111:32" pos:end="111:32">=</operator> <call pos:start="111:34" pos:end="113:78"><name pos:start="111:34" pos:end="111:49">av_realloc_array</name><argument_list pos:start="111:50" pos:end="113:78">(<argument pos:start="111:51" pos:end="111:54"><expr pos:start="111:51" pos:end="111:54"><name pos:start="111:51" pos:end="111:54">NULL</name></expr></argument>, <argument pos:start="111:57" pos:end="111:88"><expr pos:start="111:57" pos:end="111:88"><name pos:start="111:57" pos:end="111:88"><name pos:start="111:57" pos:end="111:59">ost</name><operator pos:start="111:60" pos:end="111:61">-&gt;</operator><name pos:start="111:62" pos:end="111:68">enc_ctx</name><operator pos:start="111:69" pos:end="111:70">-&gt;</operator><name pos:start="111:71" pos:end="111:88">nb_coded_side_data</name></name></expr></argument>,

                                                  <argument pos:start="113:51" pos:end="113:77"><expr pos:start="113:51" pos:end="113:77"><sizeof pos:start="113:51" pos:end="113:77">sizeof<argument_list pos:start="113:57" pos:end="113:77">(<argument pos:start="113:58" pos:end="113:76"><expr pos:start="113:58" pos:end="113:76"><operator pos:start="113:58" pos:end="113:58">*</operator><name pos:start="113:59" pos:end="113:76"><name pos:start="113:59" pos:end="113:61">ost</name><operator pos:start="113:62" pos:end="113:63">-&gt;</operator><name pos:start="113:64" pos:end="113:65">st</name><operator pos:start="113:66" pos:end="113:67">-&gt;</operator><name pos:start="113:68" pos:end="113:76">side_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="117:39"><if pos:start="115:13" pos:end="117:39">if <condition pos:start="115:16" pos:end="115:36">(<expr pos:start="115:17" pos:end="115:35"><operator pos:start="115:17" pos:end="115:17">!</operator><name pos:start="115:18" pos:end="115:35"><name pos:start="115:18" pos:end="115:20">ost</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:24">st</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:35">side_data</name></name></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:39"><block_content pos:start="117:17" pos:end="117:39">

                <return pos:start="117:17" pos:end="117:39">return <expr pos:start="117:24" pos:end="117:38"><call pos:start="117:24" pos:end="117:38"><name pos:start="117:24" pos:end="117:30">AVERROR</name><argument_list pos:start="117:31" pos:end="117:38">(<argument pos:start="117:32" pos:end="117:37"><expr pos:start="117:32" pos:end="117:37"><name pos:start="117:32" pos:end="117:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <for pos:start="121:13" pos:end="143:13">for <control pos:start="121:17" pos:end="121:66">(<init pos:start="121:18" pos:end="121:23"><expr pos:start="121:18" pos:end="121:22"><name pos:start="121:18" pos:end="121:18">i</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <literal type="number" pos:start="121:22" pos:end="121:22">0</literal></expr>;</init> <condition pos:start="121:25" pos:end="121:61"><expr pos:start="121:25" pos:end="121:60"><name pos:start="121:25" pos:end="121:25">i</name> <operator pos:start="121:27" pos:end="121:27">&lt;</operator> <name pos:start="121:29" pos:end="121:60"><name pos:start="121:29" pos:end="121:31">ost</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:40">enc_ctx</name><operator pos:start="121:41" pos:end="121:42">-&gt;</operator><name pos:start="121:43" pos:end="121:60">nb_coded_side_data</name></name></expr>;</condition> <incr pos:start="121:63" pos:end="121:65"><expr pos:start="121:63" pos:end="121:65"><name pos:start="121:63" pos:end="121:63">i</name><operator pos:start="121:64" pos:end="121:65">++</operator></expr></incr>)</control> <block pos:start="121:68" pos:end="143:13">{<block_content pos:start="123:17" pos:end="141:40">

                <decl_stmt pos:start="123:17" pos:end="123:83"><decl pos:start="123:17" pos:end="123:82"><type pos:start="123:17" pos:end="123:40"><specifier pos:start="123:17" pos:end="123:21">const</specifier> <name pos:start="123:23" pos:end="123:38">AVPacketSideData</name> <modifier pos:start="123:40" pos:end="123:40">*</modifier></type><name pos:start="123:41" pos:end="123:46">sd_src</name> <init pos:start="123:48" pos:end="123:82">= <expr pos:start="123:50" pos:end="123:82"><operator pos:start="123:50" pos:end="123:50">&amp;</operator><name pos:start="123:51" pos:end="123:82"><name pos:start="123:51" pos:end="123:53">ost</name><operator pos:start="123:54" pos:end="123:55">-&gt;</operator><name pos:start="123:56" pos:end="123:62">enc_ctx</name><operator pos:start="123:63" pos:end="123:64">-&gt;</operator><name pos:start="123:65" pos:end="123:79">coded_side_data</name><index pos:start="123:80" pos:end="123:82">[<expr pos:start="123:81" pos:end="123:81"><name pos:start="123:81" pos:end="123:81">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="125:17" pos:end="125:66"><decl pos:start="125:17" pos:end="125:65"><type pos:start="125:17" pos:end="125:34"><name pos:start="125:17" pos:end="125:32">AVPacketSideData</name> <modifier pos:start="125:34" pos:end="125:34">*</modifier></type><name pos:start="125:35" pos:end="125:40">sd_dst</name> <init pos:start="125:42" pos:end="125:65">= <expr pos:start="125:44" pos:end="125:65"><operator pos:start="125:44" pos:end="125:44">&amp;</operator><name pos:start="125:45" pos:end="125:65"><name pos:start="125:45" pos:end="125:47">ost</name><operator pos:start="125:48" pos:end="125:49">-&gt;</operator><name pos:start="125:50" pos:end="125:51">st</name><operator pos:start="125:52" pos:end="125:53">-&gt;</operator><name pos:start="125:54" pos:end="125:62">side_data</name><index pos:start="125:63" pos:end="125:65">[<expr pos:start="125:64" pos:end="125:64"><name pos:start="125:64" pos:end="125:64">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="129:17" pos:end="129:55"><expr pos:start="129:17" pos:end="129:54"><name pos:start="129:17" pos:end="129:28"><name pos:start="129:17" pos:end="129:22">sd_dst</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:28">data</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <call pos:start="129:32" pos:end="129:54"><name pos:start="129:32" pos:end="129:40">av_malloc</name><argument_list pos:start="129:41" pos:end="129:54">(<argument pos:start="129:42" pos:end="129:53"><expr pos:start="129:42" pos:end="129:53"><name pos:start="129:42" pos:end="129:53"><name pos:start="129:42" pos:end="129:47">sd_src</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:53">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="133:43"><if pos:start="131:17" pos:end="133:43">if <condition pos:start="131:20" pos:end="131:34">(<expr pos:start="131:21" pos:end="131:33"><operator pos:start="131:21" pos:end="131:21">!</operator><name pos:start="131:22" pos:end="131:33"><name pos:start="131:22" pos:end="131:27">sd_dst</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:33">data</name></name></expr>)</condition><block type="pseudo" pos:start="133:21" pos:end="133:43"><block_content pos:start="133:21" pos:end="133:43">

                    <return pos:start="133:21" pos:end="133:43">return <expr pos:start="133:28" pos:end="133:42"><call pos:start="133:28" pos:end="133:42"><name pos:start="133:28" pos:end="133:34">AVERROR</name><argument_list pos:start="133:35" pos:end="133:42">(<argument pos:start="133:36" pos:end="133:41"><expr pos:start="133:36" pos:end="133:41"><name pos:start="133:36" pos:end="133:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:65"><expr pos:start="135:17" pos:end="135:64"><call pos:start="135:17" pos:end="135:64"><name pos:start="135:17" pos:end="135:22">memcpy</name><argument_list pos:start="135:23" pos:end="135:64">(<argument pos:start="135:24" pos:end="135:35"><expr pos:start="135:24" pos:end="135:35"><name pos:start="135:24" pos:end="135:35"><name pos:start="135:24" pos:end="135:29">sd_dst</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:35">data</name></name></expr></argument>, <argument pos:start="135:38" pos:end="135:49"><expr pos:start="135:38" pos:end="135:49"><name pos:start="135:38" pos:end="135:49"><name pos:start="135:38" pos:end="135:43">sd_src</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:49">data</name></name></expr></argument>, <argument pos:start="135:52" pos:end="135:63"><expr pos:start="135:52" pos:end="135:63"><name pos:start="135:52" pos:end="135:63"><name pos:start="135:52" pos:end="135:57">sd_src</name><operator pos:start="135:58" pos:end="135:59">-&gt;</operator><name pos:start="135:60" pos:end="135:63">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:44"><expr pos:start="137:17" pos:end="137:43"><name pos:start="137:17" pos:end="137:28"><name pos:start="137:17" pos:end="137:22">sd_dst</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:28">size</name></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <name pos:start="137:32" pos:end="137:43"><name pos:start="137:32" pos:end="137:37">sd_src</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:43">size</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:44"><expr pos:start="139:17" pos:end="139:43"><name pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:22">sd_dst</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:28">type</name></name> <operator pos:start="139:30" pos:end="139:30">=</operator> <name pos:start="139:32" pos:end="139:43"><name pos:start="139:32" pos:end="139:37">sd_src</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:43">type</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:40"><expr pos:start="141:17" pos:end="141:39"><name pos:start="141:17" pos:end="141:37"><name pos:start="141:17" pos:end="141:19">ost</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:23">st</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:37">nb_side_data</name></name><operator pos:start="141:38" pos:end="141:39">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:53"><expr pos:start="149:9" pos:end="149:52"><name pos:start="149:9" pos:end="149:26"><name pos:start="149:9" pos:end="149:11">ost</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:15">st</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:26">time_base</name></name> <operator pos:start="149:28" pos:end="149:28">=</operator> <name pos:start="149:30" pos:end="149:52"><name pos:start="149:30" pos:end="149:32">ost</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:41">enc_ctx</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:52">time_base</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="151:7" pos:end="175:5">else if <condition pos:start="151:15" pos:end="151:32">(<expr pos:start="151:16" pos:end="151:31"><name pos:start="151:16" pos:end="151:31"><name pos:start="151:16" pos:end="151:18">ost</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:31">stream_copy</name></name></expr>)</condition> <block pos:start="151:34" pos:end="175:5">{<block_content pos:start="153:9" pos:end="173:23">

        <expr_stmt pos:start="153:9" pos:end="153:49"><expr pos:start="153:9" pos:end="153:48"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:48"><name pos:start="153:15" pos:end="153:43">init_output_stream_streamcopy</name><argument_list pos:start="153:44" pos:end="153:48">(<argument pos:start="153:45" pos:end="153:47"><expr pos:start="153:45" pos:end="153:47"><name pos:start="153:45" pos:end="153:47">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="157:23"><if pos:start="155:9" pos:end="157:23">if <condition pos:start="155:12" pos:end="155:20">(<expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">&lt;</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:23"><block_content pos:start="157:13" pos:end="157:23">

            <return pos:start="157:13" pos:end="157:23">return <expr pos:start="157:20" pos:end="157:22"><name pos:start="157:20" pos:end="157:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="161:9" pos:end="167:11">/*

         * FIXME: will the codec context used by the parser during streamcopy

         * This should go away with the new parser API.

         */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:82"><expr pos:start="169:9" pos:end="169:81"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:81"><name pos:start="169:15" pos:end="169:43">avcodec_parameters_to_context</name><argument_list pos:start="169:44" pos:end="169:81">(<argument pos:start="169:45" pos:end="169:61"><expr pos:start="169:45" pos:end="169:61"><name pos:start="169:45" pos:end="169:61"><name pos:start="169:45" pos:end="169:47">ost</name><operator pos:start="169:48" pos:end="169:49">-&gt;</operator><name pos:start="169:50" pos:end="169:61">parser_avctx</name></name></expr></argument>, <argument pos:start="169:64" pos:end="169:80"><expr pos:start="169:64" pos:end="169:80"><name pos:start="169:64" pos:end="169:80"><name pos:start="169:64" pos:end="169:66">ost</name><operator pos:start="169:67" pos:end="169:68">-&gt;</operator><name pos:start="169:69" pos:end="169:70">st</name><operator pos:start="169:71" pos:end="169:72">-&gt;</operator><name pos:start="169:73" pos:end="169:80">codecpar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="173:23"><if pos:start="171:9" pos:end="173:23">if <condition pos:start="171:12" pos:end="171:20">(<expr pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:15">ret</name> <operator pos:start="171:17" pos:end="171:17">&lt;</operator> <literal type="number" pos:start="171:19" pos:end="171:19">0</literal></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:23"><block_content pos:start="173:13" pos:end="173:23">

            <return pos:start="173:13" pos:end="173:23">return <expr pos:start="173:20" pos:end="173:22"><name pos:start="173:20" pos:end="173:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="183:25">/* initialize bitstream filters for the output stream

     * needs to be done here, because the codec id for streamcopy is not

     * known until now */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:32"><expr pos:start="185:5" pos:end="185:31"><name pos:start="185:5" pos:end="185:7">ret</name> <operator pos:start="185:9" pos:end="185:9">=</operator> <call pos:start="185:11" pos:end="185:31"><name pos:start="185:11" pos:end="185:26">init_output_bsfs</name><argument_list pos:start="185:27" pos:end="185:31">(<argument pos:start="185:28" pos:end="185:30"><expr pos:start="185:28" pos:end="185:30"><name pos:start="185:28" pos:end="185:30">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="189:19"><if pos:start="187:5" pos:end="189:19">if <condition pos:start="187:8" pos:end="187:16">(<expr pos:start="187:9" pos:end="187:15"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">&lt;</operator> <literal type="number" pos:start="187:15" pos:end="187:15">0</literal></expr>)</condition><block type="pseudo" pos:start="189:9" pos:end="189:19"><block_content pos:start="189:9" pos:end="189:19">

        <return pos:start="189:9" pos:end="189:19">return <expr pos:start="189:16" pos:end="189:18"><name pos:start="189:16" pos:end="189:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:43"><expr pos:start="193:5" pos:end="193:42"><name pos:start="193:5" pos:end="193:21"><name pos:start="193:5" pos:end="193:7">ost</name><operator pos:start="193:8" pos:end="193:9">-&gt;</operator><name pos:start="193:10" pos:end="193:21">mux_timebase</name></name> <operator pos:start="193:23" pos:end="193:23">=</operator> <name pos:start="193:25" pos:end="193:42"><name pos:start="193:25" pos:end="193:27">ost</name><operator pos:start="193:28" pos:end="193:29">-&gt;</operator><name pos:start="193:30" pos:end="193:31">st</name><operator pos:start="193:32" pos:end="193:33">-&gt;</operator><name pos:start="193:34" pos:end="193:42">time_base</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:25"><expr pos:start="197:5" pos:end="197:24"><name pos:start="197:5" pos:end="197:20"><name pos:start="197:5" pos:end="197:7">ost</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:20">initialized</name></name> <operator pos:start="197:22" pos:end="197:22">=</operator> <literal type="number" pos:start="197:24" pos:end="197:24">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:81"><expr pos:start="201:5" pos:end="201:80"><name pos:start="201:5" pos:end="201:7">ret</name> <operator pos:start="201:9" pos:end="201:9">=</operator> <call pos:start="201:11" pos:end="201:80"><name pos:start="201:11" pos:end="201:32">check_init_output_file</name><argument_list pos:start="201:33" pos:end="201:80">(<argument pos:start="201:34" pos:end="201:62"><expr pos:start="201:34" pos:end="201:62"><name pos:start="201:34" pos:end="201:62"><name pos:start="201:34" pos:end="201:45">output_files</name><index pos:start="201:46" pos:end="201:62">[<expr pos:start="201:47" pos:end="201:61"><name pos:start="201:47" pos:end="201:61"><name pos:start="201:47" pos:end="201:49">ost</name><operator pos:start="201:50" pos:end="201:51">-&gt;</operator><name pos:start="201:52" pos:end="201:61">file_index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="201:65" pos:end="201:79"><expr pos:start="201:65" pos:end="201:79"><name pos:start="201:65" pos:end="201:79"><name pos:start="201:65" pos:end="201:67">ost</name><operator pos:start="201:68" pos:end="201:69">-&gt;</operator><name pos:start="201:70" pos:end="201:79">file_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="205:19"><if pos:start="203:5" pos:end="205:19">if <condition pos:start="203:8" pos:end="203:16">(<expr pos:start="203:9" pos:end="203:15"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">&lt;</operator> <literal type="number" pos:start="203:15" pos:end="203:15">0</literal></expr>)</condition><block type="pseudo" pos:start="205:9" pos:end="205:19"><block_content pos:start="205:9" pos:end="205:19">

        <return pos:start="205:9" pos:end="205:19">return <expr pos:start="205:16" pos:end="205:18"><name pos:start="205:16" pos:end="205:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="209:5" pos:end="209:15">return <expr pos:start="209:12" pos:end="209:14"><name pos:start="209:12" pos:end="209:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
