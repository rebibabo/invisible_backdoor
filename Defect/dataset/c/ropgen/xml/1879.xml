<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1879.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">spapr_set_vsmt_mode</name><parameter_list pos:start="1:32" pos:end="1:71">(<parameter pos:start="1:33" pos:end="1:56"><decl pos:start="1:33" pos:end="1:56"><type pos:start="1:33" pos:end="1:56"><name pos:start="1:33" pos:end="1:49">sPAPRMachineState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">spapr</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:63">Error</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier><modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:37">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:18">vsmt_user</name> <init pos:start="7:20" pos:end="7:34">= <expr pos:start="7:22" pos:end="7:34"><operator pos:start="7:22" pos:end="7:22">!</operator><operator pos:start="7:23" pos:end="7:23">!</operator><name pos:start="7:24" pos:end="7:34"><name pos:start="7:24" pos:end="7:28">spapr</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:34">vsmt</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">kvm_smt</name> <init pos:start="9:17" pos:end="9:38">= <expr pos:start="9:19" pos:end="9:38"><call pos:start="9:19" pos:end="9:38"><name pos:start="9:19" pos:end="9:36">kvmppc_smt_threads</name><argument_list pos:start="9:37" pos:end="9:38">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:44">(<expr pos:start="15:9" pos:end="15:43"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:22"><name pos:start="15:10" pos:end="15:20">kvm_enabled</name><argument_list pos:start="15:21" pos:end="15:22">()</argument_list></call> <operator pos:start="15:24" pos:end="15:25">&amp;&amp;</operator> <operator pos:start="15:27" pos:end="15:27">(</operator><name pos:start="15:28" pos:end="15:38">smp_threads</name> <operator pos:start="15:40" pos:end="15:40">&gt;</operator> <literal type="number" pos:start="15:42" pos:end="15:42">1</literal><operator pos:start="15:43" pos:end="15:43">)</operator></expr>)</condition> <block pos:start="15:46" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:17">

        <expr_stmt pos:start="17:9" pos:end="19:45"><expr pos:start="17:9" pos:end="19:44"><call pos:start="17:9" pos:end="19:44"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="19:44">(<argument pos:start="17:20" pos:end="17:29"><expr pos:start="17:20" pos:end="17:29"><operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:29">local_err</name></expr></argument>, <argument pos:start="17:32" pos:end="19:43"><expr pos:start="17:32" pos:end="19:43"><literal type="string" pos:start="17:32" pos:end="17:76">"TCG cannot support more than 1 thread/core "</literal>

                     <literal type="string" pos:start="19:22" pos:end="19:43">"on a pseries machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="21:9" pos:end="21:17">goto <name pos:start="21:14" pos:end="21:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:36">(<expr pos:start="25:9" pos:end="25:35"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:35"><name pos:start="25:10" pos:end="25:22">is_power_of_2</name><argument_list pos:start="25:23" pos:end="25:35">(<argument pos:start="25:24" pos:end="25:34"><expr pos:start="25:24" pos:end="25:34"><name pos:start="25:24" pos:end="25:34">smp_threads</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:38" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:17">

        <expr_stmt pos:start="27:9" pos:end="29:77"><expr pos:start="27:9" pos:end="29:76"><call pos:start="27:9" pos:end="29:76"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="29:76">(<argument pos:start="27:20" pos:end="27:29"><expr pos:start="27:20" pos:end="27:29"><operator pos:start="27:20" pos:end="27:20">&amp;</operator><name pos:start="27:21" pos:end="27:29">local_err</name></expr></argument>, <argument pos:start="27:32" pos:end="29:62"><expr pos:start="27:32" pos:end="29:62"><literal type="string" pos:start="27:32" pos:end="27:77">"Cannot support %d threads/core on a pseries "</literal>

                     <literal type="string" pos:start="29:22" pos:end="29:62">"machine because it must be a power of 2"</literal></expr></argument>, <argument pos:start="29:65" pos:end="29:75"><expr pos:start="29:65" pos:end="29:75"><name pos:start="29:65" pos:end="29:75">smp_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:40">/* Detemine the VSMT mode to use: */</comment>

    <if_stmt pos:start="39:5" pos:end="63:5"><if pos:start="39:5" pos:end="55:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:17">vsmt_user</name></expr>)</condition> <block pos:start="39:20" pos:end="55:5">{<block_content pos:start="41:9" pos:end="51:9">

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="41:38">(<expr pos:start="41:13" pos:end="41:37"><name pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:17">spapr</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:23">vsmt</name></name> <operator pos:start="41:25" pos:end="41:25">&lt;</operator> <name pos:start="41:27" pos:end="41:37">smp_threads</name></expr>)</condition> <block pos:start="41:40" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:21">

            <expr_stmt pos:start="43:13" pos:end="47:51"><expr pos:start="43:13" pos:end="47:50"><call pos:start="43:13" pos:end="47:50"><name pos:start="43:13" pos:end="43:22">error_setg</name><argument_list pos:start="43:23" pos:end="47:50">(<argument pos:start="43:24" pos:end="43:33"><expr pos:start="43:24" pos:end="43:33"><operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:33">local_err</name></expr></argument>, <argument pos:start="43:36" pos:end="45:67"><expr pos:start="43:36" pos:end="45:67"><literal type="string" pos:start="43:36" pos:end="43:64">"Cannot support VSMT mode %d"</literal>

                         <literal type="string" pos:start="45:26" pos:end="45:67">" because it must be &gt;= threads/core (%d)"</literal></expr></argument>,

                         <argument pos:start="47:26" pos:end="47:36"><expr pos:start="47:26" pos:end="47:36"><name pos:start="47:26" pos:end="47:36"><name pos:start="47:26" pos:end="47:30">spapr</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:36">vsmt</name></name></expr></argument>, <argument pos:start="47:39" pos:end="47:49"><expr pos:start="47:39" pos:end="47:49"><name pos:start="47:39" pos:end="47:49">smp_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="53:9" pos:end="53:72">/* In this case, spapr-&gt;vsmt has been set by the command line */</comment>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="63:5">else <block pos:start="55:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:48">

        <comment type="block" pos:start="57:9" pos:end="59:70">/* Choose a VSMT mode that may be higher than necessary but is

         * likely to be compatible with hosts that don't have VSMT. */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:13">spapr</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:19">vsmt</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:47"><name pos:start="61:23" pos:end="61:25">MAX</name><argument_list pos:start="61:26" pos:end="61:47">(<argument pos:start="61:27" pos:end="61:33"><expr pos:start="61:27" pos:end="61:33"><name pos:start="61:27" pos:end="61:33">kvm_smt</name></expr></argument>, <argument pos:start="61:36" pos:end="61:46"><expr pos:start="61:36" pos:end="61:46"><name pos:start="61:36" pos:end="61:46">smp_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:46">/* KVM: If necessary, set the SMT mode: */</comment>

    <if_stmt pos:start="69:5" pos:end="123:5"><if pos:start="69:5" pos:end="123:5">if <condition pos:start="69:8" pos:end="69:50">(<expr pos:start="69:9" pos:end="69:49"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:19">kvm_enabled</name><argument_list pos:start="69:20" pos:end="69:21">()</argument_list></call> <operator pos:start="69:23" pos:end="69:24">&amp;&amp;</operator> <operator pos:start="69:26" pos:end="69:26">(</operator><name pos:start="69:27" pos:end="69:37"><name pos:start="69:27" pos:end="69:31">spapr</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:37">vsmt</name></name> <operator pos:start="69:39" pos:end="69:40">!=</operator> <name pos:start="69:42" pos:end="69:48">kvm_smt</name><operator pos:start="69:49" pos:end="69:49">)</operator></expr>)</condition> <block pos:start="69:52" pos:end="123:5">{<block_content pos:start="71:9" pos:end="121:9">

        <expr_stmt pos:start="71:9" pos:end="71:50"><expr pos:start="71:9" pos:end="71:49"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:49"><name pos:start="71:15" pos:end="71:36">kvmppc_set_smt_threads</name><argument_list pos:start="71:37" pos:end="71:49">(<argument pos:start="71:38" pos:end="71:48"><expr pos:start="71:38" pos:end="71:48"><name pos:start="71:38" pos:end="71:48"><name pos:start="71:38" pos:end="71:42">spapr</name><operator pos:start="71:43" pos:end="71:44">-&gt;</operator><name pos:start="71:45" pos:end="71:48">vsmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="121:9"><if pos:start="73:9" pos:end="121:9">if <condition pos:start="73:12" pos:end="73:16">(<expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">ret</name></expr>)</condition> <block pos:start="73:18" pos:end="121:9">{<block_content pos:start="77:13" pos:end="119:13">

            <comment type="block" pos:start="75:13" pos:end="75:63">/* Looks like KVM isn't able to change VSMT mode */</comment>

            <expr_stmt pos:start="77:13" pos:end="81:41"><expr pos:start="77:13" pos:end="81:40"><call pos:start="77:13" pos:end="81:40"><name pos:start="77:13" pos:end="77:22">error_setg</name><argument_list pos:start="77:23" pos:end="81:40">(<argument pos:start="77:24" pos:end="77:33"><expr pos:start="77:24" pos:end="77:33"><operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:33">local_err</name></expr></argument>,

                       <argument pos:start="79:24" pos:end="79:71"><expr pos:start="79:24" pos:end="79:71"><literal type="string" pos:start="79:24" pos:end="79:71">"Failed to set KVM's VSMT mode to %d (errno %d)"</literal></expr></argument>,

                       <argument pos:start="81:24" pos:end="81:34"><expr pos:start="81:24" pos:end="81:34"><name pos:start="81:24" pos:end="81:34"><name pos:start="81:24" pos:end="81:28">spapr</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:34">vsmt</name></name></expr></argument>, <argument pos:start="81:37" pos:end="81:39"><expr pos:start="81:37" pos:end="81:39"><name pos:start="81:37" pos:end="81:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="83:13" pos:end="89:43">/* We can live with that if the default one is big enough

             * for the number of threads, and a submultiple of the one

             * we want.  In this case we'll waste some vcpu ids, but

             * behaviour will be correct */</comment>

            <if_stmt pos:start="91:13" pos:end="119:13"><if pos:start="91:13" pos:end="99:13">if <condition pos:start="91:16" pos:end="91:75">(<expr pos:start="91:17" pos:end="91:74"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:24">kvm_smt</name> <operator pos:start="91:26" pos:end="91:27">&gt;=</operator> <name pos:start="91:29" pos:end="91:39">smp_threads</name><operator pos:start="91:40" pos:end="91:40">)</operator> <operator pos:start="91:42" pos:end="91:43">&amp;&amp;</operator> <operator pos:start="91:45" pos:end="91:45">(</operator><operator pos:start="91:46" pos:end="91:46">(</operator><name pos:start="91:47" pos:end="91:57"><name pos:start="91:47" pos:end="91:51">spapr</name><operator pos:start="91:52" pos:end="91:53">-&gt;</operator><name pos:start="91:54" pos:end="91:57">vsmt</name></name> <operator pos:start="91:59" pos:end="91:59">%</operator> <name pos:start="91:61" pos:end="91:67">kvm_smt</name><operator pos:start="91:68" pos:end="91:68">)</operator> <operator pos:start="91:70" pos:end="91:71">==</operator> <literal type="number" pos:start="91:73" pos:end="91:73">0</literal><operator pos:start="91:74" pos:end="91:74">)</operator></expr>)</condition> <block pos:start="91:77" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:25">

                <expr_stmt pos:start="93:17" pos:end="93:43"><expr pos:start="93:17" pos:end="93:42"><call pos:start="93:17" pos:end="93:42"><name pos:start="93:17" pos:end="93:31">warn_report_err</name><argument_list pos:start="93:32" pos:end="93:42">(<argument pos:start="93:33" pos:end="93:41"><expr pos:start="93:33" pos:end="93:41"><name pos:start="93:33" pos:end="93:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:33"><expr pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:25">local_err</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <name pos:start="95:29" pos:end="95:32">NULL</name></expr>;</expr_stmt>

                <goto pos:start="97:17" pos:end="97:25">goto <name pos:start="97:22" pos:end="97:24">out</name>;</goto>

            </block_content>}</block></if> <else pos:start="99:15" pos:end="119:13">else <block pos:start="99:20" pos:end="119:13">{<block_content pos:start="101:17" pos:end="117:25">

                <if_stmt pos:start="101:17" pos:end="113:17"><if pos:start="101:17" pos:end="113:17">if <condition pos:start="101:20" pos:end="101:31">(<expr pos:start="101:21" pos:end="101:30"><operator pos:start="101:21" pos:end="101:21">!</operator><name pos:start="101:22" pos:end="101:30">vsmt_user</name></expr>)</condition> <block pos:start="101:33" pos:end="113:17">{<block_content pos:start="103:21" pos:end="111:73">

                    <expr_stmt pos:start="103:21" pos:end="111:73"><expr pos:start="103:21" pos:end="111:72"><call pos:start="103:21" pos:end="111:72"><name pos:start="103:21" pos:end="103:37">error_append_hint</name><argument_list pos:start="103:38" pos:end="111:72">(<argument pos:start="103:39" pos:end="103:48"><expr pos:start="103:39" pos:end="103:48"><operator pos:start="103:39" pos:end="103:39">&amp;</operator><name pos:start="103:40" pos:end="103:48">local_err</name></expr></argument>,

                                      <argument pos:start="105:39" pos:end="109:76"><expr pos:start="105:39" pos:end="109:76"><literal type="string" pos:start="105:39" pos:end="105:73">"On PPC, a VM with %d threads/core"</literal>

                                      <literal type="string" pos:start="107:39" pos:end="107:71">" on a host with %d threads/core"</literal>

                                      <literal type="string" pos:start="109:39" pos:end="109:76">" requires the use of VSMT mode %d.\n"</literal></expr></argument>,

                                      <argument pos:start="111:39" pos:end="111:49"><expr pos:start="111:39" pos:end="111:49"><name pos:start="111:39" pos:end="111:49">smp_threads</name></expr></argument>, <argument pos:start="111:52" pos:end="111:58"><expr pos:start="111:52" pos:end="111:58"><name pos:start="111:52" pos:end="111:58">kvm_smt</name></expr></argument>, <argument pos:start="111:61" pos:end="111:71"><expr pos:start="111:61" pos:end="111:71"><name pos:start="111:61" pos:end="111:71"><name pos:start="111:61" pos:end="111:65">spapr</name><operator pos:start="111:66" pos:end="111:67">-&gt;</operator><name pos:start="111:68" pos:end="111:71">vsmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:53"><expr pos:start="115:17" pos:end="115:52"><call pos:start="115:17" pos:end="115:52"><name pos:start="115:17" pos:end="115:40">kvmppc_hint_smt_possible</name><argument_list pos:start="115:41" pos:end="115:52">(<argument pos:start="115:42" pos:end="115:51"><expr pos:start="115:42" pos:end="115:51"><operator pos:start="115:42" pos:end="115:42">&amp;</operator><name pos:start="115:43" pos:end="115:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="117:17" pos:end="117:25">goto <name pos:start="117:22" pos:end="117:24">out</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="125:5" pos:end="125:43">/* else TCG: nothing to do currently */</comment>

<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">out</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:37"><expr pos:start="129:5" pos:end="129:36"><call pos:start="129:5" pos:end="129:36"><name pos:start="129:5" pos:end="129:19">error_propagate</name><argument_list pos:start="129:20" pos:end="129:36">(<argument pos:start="129:21" pos:end="129:24"><expr pos:start="129:21" pos:end="129:24"><name pos:start="129:21" pos:end="129:24">errp</name></expr></argument>, <argument pos:start="129:27" pos:end="129:35"><expr pos:start="129:27" pos:end="129:35"><name pos:start="129:27" pos:end="129:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
