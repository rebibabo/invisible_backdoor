<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12445.c" pos:tabs="8"><function pos:start="1:1" pos:end="15:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">omap_badwidth_write8</name><parameter_list pos:start="1:26" pos:end="3:31">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:38">opaque</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:63"><decl pos:start="1:41" pos:end="1:63"><type pos:start="1:41" pos:end="1:63"><name pos:start="1:41" pos:end="1:58">target_phys_addr_t</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:30"><decl pos:start="3:17" pos:end="3:30"><type pos:start="3:17" pos:end="3:30"><name pos:start="3:17" pos:end="3:24">uint32_t</name></type> <name pos:start="3:26" pos:end="3:30">value</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="15:1">{<block_content pos:start="7:5" pos:end="13:55">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:16">val8</name> <init pos:start="7:18" pos:end="7:24">= <expr pos:start="7:20" pos:end="7:24"><name pos:start="7:20" pos:end="7:24">value</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><call pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:15">OMAP_8B_REG</name><argument_list pos:start="11:16" pos:end="11:21">(<argument pos:start="11:17" pos:end="11:20"><expr pos:start="11:17" pos:end="11:20"><name pos:start="11:17" pos:end="11:20">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><call pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:29">cpu_physical_memory_write</name><argument_list pos:start="13:30" pos:end="13:54">(<argument pos:start="13:31" pos:end="13:34"><expr pos:start="13:31" pos:end="13:34"><name pos:start="13:31" pos:end="13:34">addr</name></expr></argument>, <argument pos:start="13:37" pos:end="13:50"><expr pos:start="13:37" pos:end="13:50"><operator pos:start="13:37" pos:end="13:37">(</operator><name pos:start="13:38" pos:end="13:41">void</name> <operator pos:start="13:43" pos:end="13:43">*</operator><operator pos:start="13:44" pos:end="13:44">)</operator> <operator pos:start="13:46" pos:end="13:46">&amp;</operator><name pos:start="13:47" pos:end="13:50">val8</name></expr></argument>, <argument pos:start="13:53" pos:end="13:53"><expr pos:start="13:53" pos:end="13:53"><literal type="number" pos:start="13:53" pos:end="13:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
