<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2710.c" pos:tabs="8"><function pos:start="1:1" pos:end="68:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">do_subtitle_out</name><parameter_list pos:start="1:28" pos:end="4:44">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:45"><decl pos:start="2:29" pos:end="2:45"><type pos:start="2:29" pos:end="2:45"><name pos:start="2:29" pos:end="2:40">OutputStream</name> <modifier pos:start="2:42" pos:end="2:42">*</modifier></type><name pos:start="2:43" pos:end="2:45">ost</name></decl></parameter>,
                            <parameter pos:start="3:29" pos:end="3:44"><decl pos:start="3:29" pos:end="3:44"><type pos:start="3:29" pos:end="3:44"><name pos:start="3:29" pos:end="3:39">InputStream</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">ist</name></decl></parameter>,
                            <parameter pos:start="4:29" pos:end="4:43"><decl pos:start="4:29" pos:end="4:43"><type pos:start="4:29" pos:end="4:43"><name pos:start="4:29" pos:end="4:38">AVSubtitle</name> <modifier pos:start="4:40" pos:end="4:40">*</modifier></type><name pos:start="4:41" pos:end="4:43">sub</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="68:1">{<block_content pos:start="6:5" pos:end="67:5">
    <decl_stmt pos:start="6:5" pos:end="6:44"><decl pos:start="6:5" pos:end="6:43"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:29">subtitle_out_max_size</name> <init pos:start="6:31" pos:end="6:43">= <expr pos:start="6:33" pos:end="6:43"><literal type="number" pos:start="6:33" pos:end="6:36">1024</literal> <operator pos:start="6:38" pos:end="6:38">*</operator> <literal type="number" pos:start="6:40" pos:end="6:43">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:25">subtitle_out_size</name></decl>, <decl pos:start="7:28" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:29">nb</name></decl>, <decl pos:start="7:32" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:32">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:24"><decl pos:start="8:5" pos:end="8:23"><type pos:start="8:5" pos:end="8:20"><name pos:start="8:5" pos:end="8:18">AVCodecContext</name> <modifier pos:start="8:20" pos:end="8:20">*</modifier></type><name pos:start="8:21" pos:end="8:23">enc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">AVPacket</name></type> <name pos:start="9:14" pos:end="9:16">pkt</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:16"><decl pos:start="10:5" pos:end="10:15"><type pos:start="10:5" pos:end="10:11"><name pos:start="10:5" pos:end="10:11">int64_t</name></type> <name pos:start="10:13" pos:end="10:15">pts</name></decl>;</decl_stmt>
    <if_stmt pos:start="11:5" pos:end="16:5"><if pos:start="11:5" pos:end="16:5">if <condition pos:start="11:8" pos:end="11:35">(<expr pos:start="11:9" pos:end="11:34"><name pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:11">sub</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:16">pts</name></name> <operator pos:start="11:18" pos:end="11:19">==</operator> <name pos:start="11:21" pos:end="11:34">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="11:37" pos:end="16:5">{<block_content pos:start="12:9" pos:end="15:15">
        <expr_stmt pos:start="12:9" pos:end="12:73"><expr pos:start="12:9" pos:end="12:72"><call pos:start="12:9" pos:end="12:72"><name pos:start="12:9" pos:end="12:14">av_log</name><argument_list pos:start="12:15" pos:end="12:72">(<argument pos:start="12:16" pos:end="12:19"><expr pos:start="12:16" pos:end="12:19"><name pos:start="12:16" pos:end="12:19">NULL</name></expr></argument>, <argument pos:start="12:22" pos:end="12:33"><expr pos:start="12:22" pos:end="12:33"><name pos:start="12:22" pos:end="12:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="12:36" pos:end="12:71"><expr pos:start="12:36" pos:end="12:71"><literal type="string" pos:start="12:36" pos:end="12:71">"Subtitle packets must have a pts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="13:9" pos:end="14:28"><if pos:start="13:9" pos:end="14:28">if <condition pos:start="13:12" pos:end="13:26">(<expr pos:start="13:13" pos:end="13:25"><name pos:start="13:13" pos:end="13:25">exit_on_error</name></expr>)</condition><block type="pseudo" pos:start="14:13" pos:end="14:28"><block_content pos:start="14:13" pos:end="14:28">
            <expr_stmt pos:start="14:13" pos:end="14:28"><expr pos:start="14:13" pos:end="14:27"><call pos:start="14:13" pos:end="14:27"><name pos:start="14:13" pos:end="14:24">exit_program</name><argument_list pos:start="14:25" pos:end="14:27">(<argument pos:start="14:26" pos:end="14:26"><expr pos:start="14:26" pos:end="14:26"><literal type="number" pos:start="14:26" pos:end="14:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return pos:start="15:9" pos:end="15:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">enc</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:22"><name pos:start="17:11" pos:end="17:13">ost</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:22">enc_ctx</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="20:5"><if pos:start="18:5" pos:end="20:5">if <condition pos:start="18:8" pos:end="18:22">(<expr pos:start="18:9" pos:end="18:21"><operator pos:start="18:9" pos:end="18:9">!</operator><name pos:start="18:10" pos:end="18:21">subtitle_out</name></expr>)</condition> <block pos:start="18:24" pos:end="20:5">{<block_content pos:start="19:9" pos:end="19:56">
        <expr_stmt pos:start="19:9" pos:end="19:56"><expr pos:start="19:9" pos:end="19:55"><name pos:start="19:9" pos:end="19:20">subtitle_out</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <call pos:start="19:24" pos:end="19:55"><name pos:start="19:24" pos:end="19:32">av_malloc</name><argument_list pos:start="19:33" pos:end="19:55">(<argument pos:start="19:34" pos:end="19:54"><expr pos:start="19:34" pos:end="19:54"><name pos:start="19:34" pos:end="19:54">subtitle_out_max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="21:5" pos:end="22:30">/* Note: DVB subtitle need one packet to draw them and one other
       packet to clear them */</comment>
    <comment type="block" pos:start="23:5" pos:end="23:47">/* XXX: signal it in the codec context ? */</comment>
    <if_stmt pos:start="24:5" pos:end="27:15"><if pos:start="24:5" pos:end="25:15">if <condition pos:start="24:8" pos:end="24:50">(<expr pos:start="24:9" pos:end="24:49"><name pos:start="24:9" pos:end="24:21"><name pos:start="24:9" pos:end="24:11">enc</name><operator pos:start="24:12" pos:end="24:13">-&gt;</operator><name pos:start="24:14" pos:end="24:21">codec_id</name></name> <operator pos:start="24:23" pos:end="24:24">==</operator> <name pos:start="24:26" pos:end="24:49">AV_CODEC_ID_DVB_SUBTITLE</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:15"><block_content pos:start="25:9" pos:end="25:15">
        <expr_stmt pos:start="25:9" pos:end="25:15"><expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">nb</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">2</literal></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="26:5" pos:end="27:15">else<block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">
        <expr_stmt pos:start="27:9" pos:end="27:15"><expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">nb</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <comment type="block" pos:start="28:5" pos:end="28:83">/* shift timestamp to honor -ss and make check_recording_time() work with -t */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:7">pts</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:18"><name pos:start="29:11" pos:end="29:13">sub</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">pts</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="31:57"><if pos:start="30:5" pos:end="31:57">if <condition pos:start="30:8" pos:end="30:68">(<expr pos:start="30:9" pos:end="30:67"><name pos:start="30:9" pos:end="30:37"><name pos:start="30:9" pos:end="30:20">output_files</name><index pos:start="30:21" pos:end="30:37">[<expr pos:start="30:22" pos:end="30:36"><name pos:start="30:22" pos:end="30:36"><name pos:start="30:22" pos:end="30:24">ost</name><operator pos:start="30:25" pos:end="30:26">-&gt;</operator><name pos:start="30:27" pos:end="30:36">file_index</name></name></expr>]</index></name><operator pos:start="30:38" pos:end="30:39">-&gt;</operator><name pos:start="30:40" pos:end="30:49">start_time</name> <operator pos:start="30:51" pos:end="30:52">!=</operator> <name pos:start="30:54" pos:end="30:67">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:57"><block_content pos:start="31:9" pos:end="31:57">
        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:11">pts</name> <operator pos:start="31:13" pos:end="31:14">-=</operator> <name pos:start="31:16" pos:end="31:44"><name pos:start="31:16" pos:end="31:27">output_files</name><index pos:start="31:28" pos:end="31:44">[<expr pos:start="31:29" pos:end="31:43"><name pos:start="31:29" pos:end="31:43"><name pos:start="31:29" pos:end="31:31">ost</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:43">file_index</name></name></expr>]</index></name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:56">start_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="32:5" pos:end="67:5">for <control pos:start="32:9" pos:end="32:28">(<init pos:start="32:10" pos:end="32:15"><expr pos:start="32:10" pos:end="32:14"><name pos:start="32:10" pos:end="32:10">i</name> <operator pos:start="32:12" pos:end="32:12">=</operator> <literal type="number" pos:start="32:14" pos:end="32:14">0</literal></expr>;</init> <condition pos:start="32:17" pos:end="32:23"><expr pos:start="32:17" pos:end="32:22"><name pos:start="32:17" pos:end="32:17">i</name> <operator pos:start="32:19" pos:end="32:19">&lt;</operator> <name pos:start="32:21" pos:end="32:22">nb</name></expr>;</condition> <incr pos:start="32:25" pos:end="32:27"><expr pos:start="32:25" pos:end="32:27"><name pos:start="32:25" pos:end="32:25">i</name><operator pos:start="32:26" pos:end="32:27">++</operator></expr></incr>)</control> <block pos:start="32:30" pos:end="67:5">{<block_content pos:start="33:9" pos:end="66:34">
        <expr_stmt pos:start="33:9" pos:end="33:75"><expr pos:start="33:9" pos:end="33:74"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:11">ost</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:22">sync_opts</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <call pos:start="33:26" pos:end="33:74"><name pos:start="33:26" pos:end="33:37">av_rescale_q</name><argument_list pos:start="33:38" pos:end="33:74">(<argument pos:start="33:39" pos:end="33:41"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:41">pts</name></expr></argument>, <argument pos:start="33:44" pos:end="33:57"><expr pos:start="33:44" pos:end="33:57"><name pos:start="33:44" pos:end="33:57">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="33:60" pos:end="33:73"><expr pos:start="33:60" pos:end="33:73"><name pos:start="33:60" pos:end="33:73"><name pos:start="33:60" pos:end="33:62">enc</name><operator pos:start="33:63" pos:end="33:64">-&gt;</operator><name pos:start="33:65" pos:end="33:73">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="34:9" pos:end="35:19"><if pos:start="34:9" pos:end="35:19">if <condition pos:start="34:12" pos:end="34:39">(<expr pos:start="34:13" pos:end="34:38"><operator pos:start="34:13" pos:end="34:13">!</operator><call pos:start="34:14" pos:end="34:38"><name pos:start="34:14" pos:end="34:33">check_recording_time</name><argument_list pos:start="34:34" pos:end="34:38">(<argument pos:start="34:35" pos:end="34:37"><expr pos:start="34:35" pos:end="34:37"><name pos:start="34:35" pos:end="34:37">ost</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:19"><block_content pos:start="35:13" pos:end="35:19">
            <return pos:start="35:13" pos:end="35:19">return;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:23"><expr pos:start="36:9" pos:end="36:22"><name pos:start="36:9" pos:end="36:16"><name pos:start="36:9" pos:end="36:11">sub</name><operator pos:start="36:12" pos:end="36:13">-&gt;</operator><name pos:start="36:14" pos:end="36:16">pts</name></name> <operator pos:start="36:18" pos:end="36:18">=</operator> <name pos:start="36:20" pos:end="36:22">pts</name></expr>;</expr_stmt>
        <comment type="line" pos:start="37:9" pos:end="37:49">// start_display_time is required to be 0</comment>
        <expr_stmt pos:start="38:9" pos:end="38:113"><expr pos:start="38:9" pos:end="38:112"><name pos:start="38:9" pos:end="38:16"><name pos:start="38:9" pos:end="38:11">sub</name><operator pos:start="38:12" pos:end="38:13">-&gt;</operator><name pos:start="38:14" pos:end="38:16">pts</name></name>               <operator pos:start="38:32" pos:end="38:33">+=</operator> <macro pos:start="38:35" pos:end="38:112"><name pos:start="38:35" pos:end="38:46">av_rescale_q</name><argument_list pos:start="38:47" pos:end="38:112">(<argument pos:start="38:48" pos:end="38:70">sub-&gt;start_display_time</argument>, <argument pos:start="38:73" pos:end="38:87">(AVRational){ <literal type="number" pos:start="38:87" pos:end="38:87">1</literal></argument>, <argument pos:start="38:90" pos:end="38:95"><literal type="number" pos:start="38:90" pos:end="38:93">1000</literal> }</argument>, <argument pos:start="38:98" pos:end="38:111">AV_TIME_BASE_Q</argument>)</argument_list></macro></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:58"><expr pos:start="39:9" pos:end="39:57"><name pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">sub</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:29">end_display_time</name></name>  <operator pos:start="39:32" pos:end="39:33">-=</operator> <name pos:start="39:35" pos:end="39:57"><name pos:start="39:35" pos:end="39:37">sub</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:57">start_display_time</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:36"><expr pos:start="40:9" pos:end="40:35"><name pos:start="40:9" pos:end="40:31"><name pos:start="40:9" pos:end="40:11">sub</name><operator pos:start="40:12" pos:end="40:13">-&gt;</operator><name pos:start="40:14" pos:end="40:31">start_display_time</name></name> <operator pos:start="40:33" pos:end="40:33">=</operator> <literal type="number" pos:start="40:35" pos:end="40:35">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="41:9" pos:end="42:31"><if pos:start="41:9" pos:end="42:31">if <condition pos:start="41:12" pos:end="41:19">(<expr pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:13">i</name> <operator pos:start="41:15" pos:end="41:16">==</operator> <literal type="number" pos:start="41:18" pos:end="41:18">1</literal></expr>)</condition><block type="pseudo" pos:start="42:13" pos:end="42:31"><block_content pos:start="42:13" pos:end="42:31">
            <expr_stmt pos:start="42:13" pos:end="42:31"><expr pos:start="42:13" pos:end="42:30"><name pos:start="42:13" pos:end="42:26"><name pos:start="42:13" pos:end="42:15">sub</name><operator pos:start="42:16" pos:end="42:17">-&gt;</operator><name pos:start="42:18" pos:end="42:26">num_rects</name></name> <operator pos:start="42:28" pos:end="42:28">=</operator> <literal type="number" pos:start="42:30" pos:end="42:30">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:11">ost</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:27">frames_encoded</name></name><operator pos:start="43:28" pos:end="43:29">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="45:80"><expr pos:start="44:9" pos:end="45:79"><name pos:start="44:9" pos:end="44:25">subtitle_out_size</name> <operator pos:start="44:27" pos:end="44:27">=</operator> <call pos:start="44:29" pos:end="45:79"><name pos:start="44:29" pos:end="44:51">avcodec_encode_subtitle</name><argument_list pos:start="44:52" pos:end="45:79">(<argument pos:start="44:53" pos:end="44:55"><expr pos:start="44:53" pos:end="44:55"><name pos:start="44:53" pos:end="44:55">enc</name></expr></argument>, <argument pos:start="44:58" pos:end="44:69"><expr pos:start="44:58" pos:end="44:69"><name pos:start="44:58" pos:end="44:69">subtitle_out</name></expr></argument>,
                                                    <argument pos:start="45:53" pos:end="45:73"><expr pos:start="45:53" pos:end="45:73"><name pos:start="45:53" pos:end="45:73">subtitle_out_max_size</name></expr></argument>, <argument pos:start="45:76" pos:end="45:78"><expr pos:start="45:76" pos:end="45:78"><name pos:start="45:76" pos:end="45:78">sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="46:9" pos:end="47:44"><if pos:start="46:9" pos:end="47:44">if <condition pos:start="46:12" pos:end="46:19">(<expr pos:start="46:13" pos:end="46:18"><name pos:start="46:13" pos:end="46:13">i</name> <operator pos:start="46:15" pos:end="46:16">==</operator> <literal type="number" pos:start="46:18" pos:end="46:18">1</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:44"><block_content pos:start="47:13" pos:end="47:44">
            <expr_stmt pos:start="47:13" pos:end="47:44"><expr pos:start="47:13" pos:end="47:43"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:15">sub</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:26">num_rects</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <name pos:start="47:30" pos:end="47:43">save_num_rects</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="48:9" pos:end="51:9"><if pos:start="48:9" pos:end="51:9">if <condition pos:start="48:12" pos:end="48:34">(<expr pos:start="48:13" pos:end="48:33"><name pos:start="48:13" pos:end="48:29">subtitle_out_size</name> <operator pos:start="48:31" pos:end="48:31">&lt;</operator> <literal type="number" pos:start="48:33" pos:end="48:33">0</literal></expr>)</condition> <block pos:start="48:36" pos:end="51:9">{<block_content pos:start="49:13" pos:end="50:28">
            <expr_stmt pos:start="49:13" pos:end="49:69"><expr pos:start="49:13" pos:end="49:68"><call pos:start="49:13" pos:end="49:68"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="49:68">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">NULL</name></expr></argument>, <argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="49:40" pos:end="49:67"><expr pos:start="49:40" pos:end="49:67"><literal type="string" pos:start="49:40" pos:end="49:67">"Subtitle encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:28"><expr pos:start="50:13" pos:end="50:27"><call pos:start="50:13" pos:end="50:27"><name pos:start="50:13" pos:end="50:24">exit_program</name><argument_list pos:start="50:25" pos:end="50:27">(<argument pos:start="50:26" pos:end="50:26"><expr pos:start="50:26" pos:end="50:26"><literal type="number" pos:start="50:26" pos:end="50:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:29"><expr pos:start="52:9" pos:end="52:28"><call pos:start="52:9" pos:end="52:28"><name pos:start="52:9" pos:end="52:22">av_init_packet</name><argument_list pos:start="52:23" pos:end="52:28">(<argument pos:start="52:24" pos:end="52:27"><expr pos:start="52:24" pos:end="52:27"><operator pos:start="52:24" pos:end="52:24">&amp;</operator><name pos:start="52:25" pos:end="52:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">pkt</name><operator pos:start="53:12" pos:end="53:12">.</operator><name pos:start="53:13" pos:end="53:16">data</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:31">subtitle_out</name></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:37"><expr pos:start="54:9" pos:end="54:36"><name pos:start="54:9" pos:end="54:16"><name pos:start="54:9" pos:end="54:11">pkt</name><operator pos:start="54:12" pos:end="54:12">.</operator><name pos:start="54:13" pos:end="54:16">size</name></name> <operator pos:start="54:18" pos:end="54:18">=</operator> <name pos:start="54:20" pos:end="54:36">subtitle_out_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="55:9" pos:end="55:78"><expr pos:start="55:9" pos:end="55:77"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">pkt</name><operator pos:start="55:12" pos:end="55:12">.</operator><name pos:start="55:13" pos:end="55:15">pts</name></name>  <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:77"><name pos:start="55:20" pos:end="55:31">av_rescale_q</name><argument_list pos:start="55:32" pos:end="55:77">(<argument pos:start="55:33" pos:end="55:40"><expr pos:start="55:33" pos:end="55:40"><name pos:start="55:33" pos:end="55:40"><name pos:start="55:33" pos:end="55:35">sub</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:40">pts</name></name></expr></argument>, <argument pos:start="55:43" pos:end="55:56"><expr pos:start="55:43" pos:end="55:56"><name pos:start="55:43" pos:end="55:56">AV_TIME_BASE_Q</name></expr></argument>, <argument pos:start="55:59" pos:end="55:76"><expr pos:start="55:59" pos:end="55:76"><name pos:start="55:59" pos:end="55:76"><name pos:start="55:59" pos:end="55:61">ost</name><operator pos:start="55:62" pos:end="55:63">-&gt;</operator><name pos:start="55:64" pos:end="55:65">st</name><operator pos:start="55:66" pos:end="55:67">-&gt;</operator><name pos:start="55:68" pos:end="55:76">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="56:9" pos:end="56:104"><expr pos:start="56:9" pos:end="56:103"><name pos:start="56:9" pos:end="56:20"><name pos:start="56:9" pos:end="56:11">pkt</name><operator pos:start="56:12" pos:end="56:12">.</operator><name pos:start="56:13" pos:end="56:20">duration</name></name> <operator pos:start="56:22" pos:end="56:22">=</operator> <macro pos:start="56:24" pos:end="56:103"><name pos:start="56:24" pos:end="56:35">av_rescale_q</name><argument_list pos:start="56:36" pos:end="56:103">(<argument pos:start="56:37" pos:end="56:57">sub-&gt;end_display_time</argument>, <argument pos:start="56:60" pos:end="56:74">(AVRational){ <literal type="number" pos:start="56:74" pos:end="56:74">1</literal></argument>, <argument pos:start="56:77" pos:end="56:82"><literal type="number" pos:start="56:77" pos:end="56:80">1000</literal> }</argument>, <argument pos:start="56:85" pos:end="56:102">ost-&gt;st-&gt;time_base</argument>)</argument_list></macro></expr>;</expr_stmt>
        <if_stmt pos:start="57:9" pos:end="64:9"><if pos:start="57:9" pos:end="64:9">if <condition pos:start="57:12" pos:end="57:54">(<expr pos:start="57:13" pos:end="57:53"><name pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:15">enc</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:25">codec_id</name></name> <operator pos:start="57:27" pos:end="57:28">==</operator> <name pos:start="57:30" pos:end="57:53">AV_CODEC_ID_DVB_SUBTITLE</name></expr>)</condition> <block pos:start="57:56" pos:end="64:9">{<block_content pos:start="60:13" pos:end="63:54">
            <comment type="block" pos:start="58:13" pos:end="59:49">/* XXX: the pts correction is handled here. Maybe handling
               it in the codec would be better */</comment>
            <if_stmt pos:start="60:13" pos:end="63:54"><if pos:start="60:13" pos:end="61:56">if <condition pos:start="60:16" pos:end="60:23">(<expr pos:start="60:17" pos:end="60:22"><name pos:start="60:17" pos:end="60:17">i</name> <operator pos:start="60:19" pos:end="60:20">==</operator> <literal type="number" pos:start="60:22" pos:end="60:22">0</literal></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:56"><block_content pos:start="61:17" pos:end="61:56">
                <expr_stmt pos:start="61:17" pos:end="61:56"><expr pos:start="61:17" pos:end="61:55"><name pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:19">pkt</name><operator pos:start="61:20" pos:end="61:20">.</operator><name pos:start="61:21" pos:end="61:23">pts</name></name> <operator pos:start="61:25" pos:end="61:26">+=</operator> <literal type="number" pos:start="61:28" pos:end="61:29">90</literal> <operator pos:start="61:31" pos:end="61:31">*</operator> <name pos:start="61:33" pos:end="61:55"><name pos:start="61:33" pos:end="61:35">sub</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:55">start_display_time</name></name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="62:13" pos:end="63:54">else<block type="pseudo" pos:start="63:17" pos:end="63:54"><block_content pos:start="63:17" pos:end="63:54">
                <expr_stmt pos:start="63:17" pos:end="63:54"><expr pos:start="63:17" pos:end="63:53"><name pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:19">pkt</name><operator pos:start="63:20" pos:end="63:20">.</operator><name pos:start="63:21" pos:end="63:23">pts</name></name> <operator pos:start="63:25" pos:end="63:26">+=</operator> <literal type="number" pos:start="63:28" pos:end="63:29">90</literal> <operator pos:start="63:31" pos:end="63:31">*</operator> <name pos:start="63:33" pos:end="63:53"><name pos:start="63:33" pos:end="63:35">sub</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:53">end_display_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:11">pkt</name><operator pos:start="65:12" pos:end="65:12">.</operator><name pos:start="65:13" pos:end="65:15">dts</name></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:25"><name pos:start="65:19" pos:end="65:21">pkt</name><operator pos:start="65:22" pos:end="65:22">.</operator><name pos:start="65:23" pos:end="65:25">pts</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="66:9" pos:end="66:34"><expr pos:start="66:9" pos:end="66:33"><call pos:start="66:9" pos:end="66:33"><name pos:start="66:9" pos:end="66:19">write_frame</name><argument_list pos:start="66:20" pos:end="66:33">(<argument pos:start="66:21" pos:end="66:21"><expr pos:start="66:21" pos:end="66:21"><name pos:start="66:21" pos:end="66:21">s</name></expr></argument>, <argument pos:start="66:24" pos:end="66:27"><expr pos:start="66:24" pos:end="66:27"><operator pos:start="66:24" pos:end="66:24">&amp;</operator><name pos:start="66:25" pos:end="66:27">pkt</name></expr></argument>, <argument pos:start="66:30" pos:end="66:32"><expr pos:start="66:30" pos:end="66:32"><name pos:start="66:30" pos:end="66:32">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function></unit>
