<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26096.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">gdv_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">got_frame</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="193:1">{<block_content pos:start="7:5" pos:end="191:39">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">GDVContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">gdv</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">GetByteContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:22">gb</name> <init pos:start="9:24" pos:end="9:33">= <expr pos:start="9:26" pos:end="9:33"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:33"><name pos:start="9:27" pos:end="9:29">gdv</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:33">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">PutByteContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:22">pb</name> <init pos:start="11:24" pos:end="11:33">= <expr pos:start="11:26" pos:end="11:33"><operator pos:start="11:26" pos:end="11:26">&amp;</operator><name pos:start="11:27" pos:end="11:33"><name pos:start="11:27" pos:end="11:29">gdv</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:33">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:18">frame</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:14">i</name></decl>, <decl pos:start="15:17" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:24">pal_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:88"><decl pos:start="17:5" pos:end="17:87"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:22">pal</name> <init pos:start="17:24" pos:end="17:87">= <expr pos:start="17:26" pos:end="17:87"><call pos:start="17:26" pos:end="17:87"><name pos:start="17:26" pos:end="17:48">av_packet_get_side_data</name><argument_list pos:start="17:49" pos:end="17:87">(<argument pos:start="17:50" pos:end="17:54"><expr pos:start="17:50" pos:end="17:54"><name pos:start="17:50" pos:end="17:54">avpkt</name></expr></argument>, <argument pos:start="17:57" pos:end="17:75"><expr pos:start="17:57" pos:end="17:75"><name pos:start="17:57" pos:end="17:75">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="17:78" pos:end="17:86"><expr pos:start="17:78" pos:end="17:86"><operator pos:start="17:78" pos:end="17:78">&amp;</operator><name pos:start="17:79" pos:end="17:86">pal_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">compression</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:16">dst</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if <condition pos:start="27:8" pos:end="27:51">(<expr pos:start="27:9" pos:end="27:50"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">ret</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:45"><name pos:start="27:16" pos:end="27:28">ff_get_buffer</name><argument_list pos:start="27:29" pos:end="27:45">(<argument pos:start="27:30" pos:end="27:34"><expr pos:start="27:30" pos:end="27:34"><name pos:start="27:30" pos:end="27:34">avctx</name></expr></argument>, <argument pos:start="27:37" pos:end="27:41"><expr pos:start="27:37" pos:end="27:41"><name pos:start="27:37" pos:end="27:41">frame</name></expr></argument>, <argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><literal type="number" pos:start="27:44" pos:end="27:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:48">&lt;</operator> <literal type="number" pos:start="27:50" pos:end="27:50">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="33:46"><if pos:start="31:5" pos:end="33:46">if <condition pos:start="31:8" pos:end="31:42">(<expr pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:11">pal</name> <operator pos:start="31:13" pos:end="31:14">&amp;&amp;</operator> <name pos:start="31:16" pos:end="31:23">pal_size</name> <operator pos:start="31:25" pos:end="31:26">==</operator> <name pos:start="31:28" pos:end="31:41">AVPALETTE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:46"><block_content pos:start="33:9" pos:end="33:46">

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><call pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:14">memcpy</name><argument_list pos:start="33:15" pos:end="33:45">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:18">gdv</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:23">pal</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:28"><expr pos:start="33:26" pos:end="33:28"><name pos:start="33:26" pos:end="33:28">pal</name></expr></argument>, <argument pos:start="33:31" pos:end="33:44"><expr pos:start="33:31" pos:end="33:44"><name pos:start="33:31" pos:end="33:44">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><call pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:20">bytestream2_init</name><argument_list pos:start="37:21" pos:end="37:50">(<argument pos:start="37:22" pos:end="37:23"><expr pos:start="37:22" pos:end="37:23"><name pos:start="37:22" pos:end="37:23">gb</name></expr></argument>, <argument pos:start="37:26" pos:end="37:36"><expr pos:start="37:26" pos:end="37:36"><name pos:start="37:26" pos:end="37:36"><name pos:start="37:26" pos:end="37:30">avpkt</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:36">data</name></name></expr></argument>, <argument pos:start="37:39" pos:end="37:49"><expr pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:43">avpkt</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:61"><expr pos:start="39:5" pos:end="39:60"><call pos:start="39:5" pos:end="39:60"><name pos:start="39:5" pos:end="39:27">bytestream2_init_writer</name><argument_list pos:start="39:28" pos:end="39:60">(<argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><name pos:start="39:29" pos:end="39:30">pb</name></expr></argument>, <argument pos:start="39:33" pos:end="39:42"><expr pos:start="39:33" pos:end="39:42"><name pos:start="39:33" pos:end="39:42"><name pos:start="39:33" pos:end="39:35">gdv</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:42">frame</name></name></expr></argument>, <argument pos:start="39:45" pos:end="39:59"><expr pos:start="39:45" pos:end="39:59"><name pos:start="39:45" pos:end="39:59"><name pos:start="39:45" pos:end="39:47">gdv</name><operator pos:start="39:48" pos:end="39:49">-&gt;</operator><name pos:start="39:50" pos:end="39:59">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:9">flags</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:32">bytestream2_get_le32</name><argument_list pos:start="43:33" pos:end="43:36">(<argument pos:start="43:34" pos:end="43:35"><expr pos:start="43:34" pos:end="43:35"><name pos:start="43:34" pos:end="43:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:15">compression</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <name pos:start="45:19" pos:end="45:23">flags</name> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <literal type="number" pos:start="45:27" pos:end="45:29">0xF</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:48"><expr pos:start="49:5" pos:end="51:47"><call pos:start="49:5" pos:end="51:47"><name pos:start="49:5" pos:end="49:11">rescale</name><argument_list pos:start="49:12" pos:end="51:47">(<argument pos:start="49:13" pos:end="49:15"><expr pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">gdv</name></expr></argument>, <argument pos:start="49:18" pos:end="49:27"><expr pos:start="49:18" pos:end="49:27"><name pos:start="49:18" pos:end="49:27"><name pos:start="49:18" pos:end="49:20">gdv</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:27">frame</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:41"><expr pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:34">avctx</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:41">width</name></name></expr></argument>, <argument pos:start="49:44" pos:end="49:56"><expr pos:start="49:44" pos:end="49:56"><name pos:start="49:44" pos:end="49:56"><name pos:start="49:44" pos:end="49:48">avctx</name><operator pos:start="49:49" pos:end="49:50">-&gt;</operator><name pos:start="49:51" pos:end="49:56">height</name></name></expr></argument>,

            <argument pos:start="51:13" pos:end="51:28"><expr pos:start="51:13" pos:end="51:28"><operator pos:start="51:13" pos:end="51:13">!</operator><operator pos:start="51:14" pos:end="51:14">!</operator><operator pos:start="51:15" pos:end="51:15">(</operator><name pos:start="51:16" pos:end="51:20">flags</name> <operator pos:start="51:22" pos:end="51:22">&amp;</operator> <literal type="number" pos:start="51:24" pos:end="51:27">0x10</literal><operator pos:start="51:28" pos:end="51:28">)</operator></expr></argument>, <argument pos:start="51:31" pos:end="51:46"><expr pos:start="51:31" pos:end="51:46"><operator pos:start="51:31" pos:end="51:31">!</operator><operator pos:start="51:32" pos:end="51:32">!</operator><operator pos:start="51:33" pos:end="51:33">(</operator><name pos:start="51:34" pos:end="51:38">flags</name> <operator pos:start="51:40" pos:end="51:40">&amp;</operator> <literal type="number" pos:start="51:42" pos:end="51:45">0x20</literal><operator pos:start="51:46" pos:end="51:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="55:5" pos:end="113:5">switch <condition pos:start="55:12" pos:end="55:24">(<expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:23">compression</name></expr>)</condition> <block pos:start="55:26" pos:end="113:5">{<block_content pos:start="57:5" pos:end="111:35">

    <case pos:start="57:5" pos:end="57:11">case <expr pos:start="57:10" pos:end="57:10"><literal type="number" pos:start="57:10" pos:end="57:10">1</literal></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:79"><expr pos:start="59:9" pos:end="59:78"><call pos:start="59:9" pos:end="59:78"><name pos:start="59:9" pos:end="59:14">memset</name><argument_list pos:start="59:15" pos:end="59:78">(<argument pos:start="59:16" pos:end="59:41"><expr pos:start="59:16" pos:end="59:41"><name pos:start="59:16" pos:end="59:25"><name pos:start="59:16" pos:end="59:18">gdv</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:25">frame</name></name> <operator pos:start="59:27" pos:end="59:27">+</operator> <name pos:start="59:29" pos:end="59:41">PREAMBLE_SIZE</name></expr></argument>, <argument pos:start="59:44" pos:end="59:44"><expr pos:start="59:44" pos:end="59:44"><literal type="number" pos:start="59:44" pos:end="59:44">0</literal></expr></argument>, <argument pos:start="59:47" pos:end="59:77"><expr pos:start="59:47" pos:end="59:77"><name pos:start="59:47" pos:end="59:61"><name pos:start="59:47" pos:end="59:49">gdv</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:61">frame_size</name></name> <operator pos:start="59:63" pos:end="59:63">-</operator> <name pos:start="59:65" pos:end="59:77">PREAMBLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <case pos:start="61:5" pos:end="61:11">case <expr pos:start="61:10" pos:end="61:10"><literal type="number" pos:start="61:10" pos:end="61:10">0</literal></expr>:</case>

        <if_stmt pos:start="63:9" pos:end="65:39"><if pos:start="63:9" pos:end="65:39">if <condition pos:start="63:12" pos:end="63:51">(<expr pos:start="63:13" pos:end="63:50"><call pos:start="63:13" pos:end="63:42"><name pos:start="63:13" pos:end="63:38">bytestream2_get_bytes_left</name><argument_list pos:start="63:39" pos:end="63:42">(<argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><name pos:start="63:40" pos:end="63:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="63:44" pos:end="63:44">&lt;</operator> <literal type="number" pos:start="63:46" pos:end="63:48">256</literal><operator pos:start="63:49" pos:end="63:49">*</operator><literal type="number" pos:start="63:50" pos:end="63:50">3</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:39"><block_content pos:start="65:13" pos:end="65:39">

            <return pos:start="65:13" pos:end="65:39">return <expr pos:start="65:20" pos:end="65:38"><name pos:start="65:20" pos:end="65:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <for pos:start="67:9" pos:end="77:9">for <control pos:start="67:13" pos:end="67:33">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:28"><expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <literal type="number" pos:start="67:25" pos:end="67:27">256</literal></expr>;</condition> <incr pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:30">i</name><operator pos:start="67:31" pos:end="67:32">++</operator></expr></incr>)</control> <block pos:start="67:35" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:67">

            <decl_stmt pos:start="69:13" pos:end="69:50"><decl pos:start="69:13" pos:end="69:49"><type pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">unsigned</name></type> <name pos:start="69:22" pos:end="69:22">r</name> <init pos:start="69:24" pos:end="69:49">= <expr pos:start="69:26" pos:end="69:49"><call pos:start="69:26" pos:end="69:49"><name pos:start="69:26" pos:end="69:45">bytestream2_get_byte</name><argument_list pos:start="69:46" pos:end="69:49">(<argument pos:start="69:47" pos:end="69:48"><expr pos:start="69:47" pos:end="69:48"><name pos:start="69:47" pos:end="69:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="71:13" pos:end="71:50"><decl pos:start="71:13" pos:end="71:49"><type pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:20">unsigned</name></type> <name pos:start="71:22" pos:end="71:22">g</name> <init pos:start="71:24" pos:end="71:49">= <expr pos:start="71:26" pos:end="71:49"><call pos:start="71:26" pos:end="71:49"><name pos:start="71:26" pos:end="71:45">bytestream2_get_byte</name><argument_list pos:start="71:46" pos:end="71:49">(<argument pos:start="71:47" pos:end="71:48"><expr pos:start="71:47" pos:end="71:48"><name pos:start="71:47" pos:end="71:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:50"><decl pos:start="73:13" pos:end="73:49"><type pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:20">unsigned</name></type> <name pos:start="73:22" pos:end="73:22">b</name> <init pos:start="73:24" pos:end="73:49">= <expr pos:start="73:26" pos:end="73:49"><call pos:start="73:26" pos:end="73:49"><name pos:start="73:26" pos:end="73:45">bytestream2_get_byte</name><argument_list pos:start="73:46" pos:end="73:49">(<argument pos:start="73:47" pos:end="73:48"><expr pos:start="73:47" pos:end="73:48"><name pos:start="73:47" pos:end="73:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:67"><expr pos:start="75:13" pos:end="75:66"><name pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:15">gdv</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:20">pal</name><index pos:start="75:21" pos:end="75:23">[<expr pos:start="75:22" pos:end="75:22"><name pos:start="75:22" pos:end="75:22">i</name></expr>]</index></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <literal type="number" pos:start="75:27" pos:end="75:31">0xFFU</literal> <operator pos:start="75:33" pos:end="75:34">&lt;&lt;</operator> <literal type="number" pos:start="75:36" pos:end="75:37">24</literal> <operator pos:start="75:39" pos:end="75:39">|</operator> <name pos:start="75:41" pos:end="75:41">r</name> <operator pos:start="75:43" pos:end="75:44">&lt;&lt;</operator> <literal type="number" pos:start="75:46" pos:end="75:47">18</literal> <operator pos:start="75:49" pos:end="75:49">|</operator> <name pos:start="75:51" pos:end="75:51">g</name> <operator pos:start="75:53" pos:end="75:54">&lt;&lt;</operator> <literal type="number" pos:start="75:56" pos:end="75:57">10</literal> <operator pos:start="75:59" pos:end="75:59">|</operator> <name pos:start="75:61" pos:end="75:61">b</name> <operator pos:start="75:63" pos:end="75:64">&lt;&lt;</operator> <literal type="number" pos:start="75:66" pos:end="75:66">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:11">case <expr pos:start="81:10" pos:end="81:10"><literal type="number" pos:start="81:10" pos:end="81:10">2</literal></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:34"><expr pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:33"><name pos:start="83:15" pos:end="83:26">decompress_2</name><argument_list pos:start="83:27" pos:end="83:33">(<argument pos:start="83:28" pos:end="83:32"><expr pos:start="83:28" pos:end="83:32"><name pos:start="83:28" pos:end="83:32">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:11">case <expr pos:start="87:10" pos:end="87:10"><literal type="number" pos:start="87:10" pos:end="87:10">3</literal></expr>:</case>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="91:11">case <expr pos:start="91:10" pos:end="91:10"><literal type="number" pos:start="91:10" pos:end="91:10">5</literal></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:45"><name pos:start="93:15" pos:end="93:26">decompress_5</name><argument_list pos:start="93:27" pos:end="93:45">(<argument pos:start="93:28" pos:end="93:32"><expr pos:start="93:28" pos:end="93:32"><name pos:start="93:28" pos:end="93:32">avctx</name></expr></argument>, <argument pos:start="93:35" pos:end="93:44"><expr pos:start="93:35" pos:end="93:44"><name pos:start="93:35" pos:end="93:39">flags</name> <operator pos:start="93:41" pos:end="93:42">&gt;&gt;</operator> <literal type="number" pos:start="93:44" pos:end="93:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:11">case <expr pos:start="97:10" pos:end="97:10"><literal type="number" pos:start="97:10" pos:end="97:10">6</literal></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:50"><expr pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:49"><name pos:start="99:15" pos:end="99:27">decompress_68</name><argument_list pos:start="99:28" pos:end="99:49">(<argument pos:start="99:29" pos:end="99:33"><expr pos:start="99:29" pos:end="99:33"><name pos:start="99:29" pos:end="99:33">avctx</name></expr></argument>, <argument pos:start="99:36" pos:end="99:45"><expr pos:start="99:36" pos:end="99:45"><name pos:start="99:36" pos:end="99:40">flags</name> <operator pos:start="99:42" pos:end="99:43">&gt;&gt;</operator> <literal type="number" pos:start="99:45" pos:end="99:45">8</literal></expr></argument>, <argument pos:start="99:48" pos:end="99:48"><expr pos:start="99:48" pos:end="99:48"><literal type="number" pos:start="99:48" pos:end="99:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:11">case <expr pos:start="103:10" pos:end="103:10"><literal type="number" pos:start="103:10" pos:end="103:10">8</literal></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:50"><expr pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:49"><name pos:start="105:15" pos:end="105:27">decompress_68</name><argument_list pos:start="105:28" pos:end="105:49">(<argument pos:start="105:29" pos:end="105:33"><expr pos:start="105:29" pos:end="105:33"><name pos:start="105:29" pos:end="105:33">avctx</name></expr></argument>, <argument pos:start="105:36" pos:end="105:45"><expr pos:start="105:36" pos:end="105:45"><name pos:start="105:36" pos:end="105:40">flags</name> <operator pos:start="105:42" pos:end="105:43">&gt;&gt;</operator> <literal type="number" pos:start="105:45" pos:end="105:45">8</literal></expr></argument>, <argument pos:start="105:48" pos:end="105:48"><expr pos:start="105:48" pos:end="105:48"><literal type="number" pos:start="105:48" pos:end="105:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <default pos:start="109:5" pos:end="109:12">default:</default>

        <return pos:start="111:9" pos:end="111:35">return <expr pos:start="111:16" pos:end="111:34"><name pos:start="111:16" pos:end="111:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="117:5" pos:end="117:53"><expr pos:start="117:5" pos:end="117:52"><call pos:start="117:5" pos:end="117:52"><name pos:start="117:5" pos:end="117:10">memcpy</name><argument_list pos:start="117:11" pos:end="117:52">(<argument pos:start="117:12" pos:end="117:25"><expr pos:start="117:12" pos:end="117:25"><name pos:start="117:12" pos:end="117:25"><name pos:start="117:12" pos:end="117:16">frame</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:22">data</name><index pos:start="117:23" pos:end="117:25">[<expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="117:28" pos:end="117:35"><expr pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:30">gdv</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:35">pal</name></name></expr></argument>, <argument pos:start="117:38" pos:end="117:51"><expr pos:start="117:38" pos:end="117:51"><name pos:start="117:38" pos:end="117:51">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:25"><expr pos:start="119:5" pos:end="119:24"><name pos:start="119:5" pos:end="119:7">dst</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <name pos:start="119:11" pos:end="119:24"><name pos:start="119:11" pos:end="119:15">frame</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:21">data</name><index pos:start="119:22" pos:end="119:24">[<expr pos:start="119:23" pos:end="119:23"><literal type="number" pos:start="119:23" pos:end="119:23">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="183:5"><if pos:start="123:5" pos:end="145:5">if <condition pos:start="123:8" pos:end="123:39">(<expr pos:start="123:9" pos:end="123:38"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:21"><name pos:start="123:10" pos:end="123:12">gdv</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:21">scale_v</name></name> <operator pos:start="123:23" pos:end="123:24">&amp;&amp;</operator> <operator pos:start="123:26" pos:end="123:26">!</operator><name pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:29">gdv</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:38">scale_h</name></name></expr>)</condition> <block pos:start="123:41" pos:end="145:5">{<block_content pos:start="125:9" pos:end="143:9">

        <decl_stmt pos:start="125:9" pos:end="125:43"><decl pos:start="125:9" pos:end="125:32"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:16">sidx</name> <init pos:start="125:18" pos:end="125:32">= <expr pos:start="125:20" pos:end="125:32"><name pos:start="125:20" pos:end="125:32">PREAMBLE_SIZE</name></expr></init></decl>, <decl pos:start="125:35" pos:end="125:42"><type ref="prev" pos:start="125:9" pos:end="125:11"/><name pos:start="125:35" pos:end="125:38">didx</name> <init pos:start="125:40" pos:end="125:42">= <expr pos:start="125:42" pos:end="125:42"><literal type="number" pos:start="125:42" pos:end="125:42">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:17"><decl pos:start="127:9" pos:end="127:13"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:13">y</name></decl>, <decl pos:start="127:16" pos:end="127:16"><type ref="prev" pos:start="127:9" pos:end="127:11"/><name pos:start="127:16" pos:end="127:16">x</name></decl>;</decl_stmt>



        <for pos:start="131:9" pos:end="143:9">for <control pos:start="131:13" pos:end="131:43">(<init pos:start="131:14" pos:end="131:19"><expr pos:start="131:14" pos:end="131:18"><name pos:start="131:14" pos:end="131:14">y</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <literal type="number" pos:start="131:18" pos:end="131:18">0</literal></expr>;</init> <condition pos:start="131:21" pos:end="131:38"><expr pos:start="131:21" pos:end="131:37"><name pos:start="131:21" pos:end="131:21">y</name> <operator pos:start="131:23" pos:end="131:23">&lt;</operator> <name pos:start="131:25" pos:end="131:37"><name pos:start="131:25" pos:end="131:29">avctx</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:37">height</name></name></expr>;</condition> <incr pos:start="131:40" pos:end="131:42"><expr pos:start="131:40" pos:end="131:42"><name pos:start="131:40" pos:end="131:40">y</name><operator pos:start="131:41" pos:end="131:42">++</operator></expr></incr>)</control> <block pos:start="131:45" pos:end="143:9">{<block_content pos:start="133:13" pos:end="141:39">

            <for pos:start="133:13" pos:end="137:13">for <control pos:start="133:17" pos:end="133:46">(<init pos:start="133:18" pos:end="133:23"><expr pos:start="133:18" pos:end="133:22"><name pos:start="133:18" pos:end="133:18">x</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>;</init> <condition pos:start="133:25" pos:end="133:41"><expr pos:start="133:25" pos:end="133:40"><name pos:start="133:25" pos:end="133:25">x</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:40"><name pos:start="133:29" pos:end="133:33">avctx</name><operator pos:start="133:34" pos:end="133:35">-&gt;</operator><name pos:start="133:36" pos:end="133:40">width</name></name></expr>;</condition> <incr pos:start="133:43" pos:end="133:45"><expr pos:start="133:43" pos:end="133:45"><name pos:start="133:43" pos:end="133:43">x</name><operator pos:start="133:44" pos:end="133:45">++</operator></expr></incr>)</control> <block pos:start="133:48" pos:end="137:13">{<block_content pos:start="135:17" pos:end="135:49">

                <expr_stmt pos:start="135:17" pos:end="135:49"><expr pos:start="135:17" pos:end="135:48"><name pos:start="135:17" pos:end="135:27"><name pos:start="135:17" pos:end="135:19">dst</name><index pos:start="135:20" pos:end="135:27">[<expr pos:start="135:21" pos:end="135:26"><name pos:start="135:21" pos:end="135:21">x</name><operator pos:start="135:22" pos:end="135:22">+</operator><name pos:start="135:23" pos:end="135:26">didx</name></expr>]</index></name> <operator pos:start="135:29" pos:end="135:29">=</operator> <name pos:start="135:31" pos:end="135:48"><name pos:start="135:31" pos:end="135:33">gdv</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:40">frame</name><index pos:start="135:41" pos:end="135:48">[<expr pos:start="135:42" pos:end="135:47"><name pos:start="135:42" pos:end="135:42">x</name><operator pos:start="135:43" pos:end="135:43">+</operator><name pos:start="135:44" pos:end="135:47">sidx</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="139:13" pos:end="139:33"><expr pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:16">sidx</name> <operator pos:start="139:18" pos:end="139:19">+=</operator> <name pos:start="139:21" pos:end="139:32"><name pos:start="139:21" pos:end="139:25">avctx</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:32">width</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:39"><expr pos:start="141:13" pos:end="141:38"><name pos:start="141:13" pos:end="141:16">didx</name> <operator pos:start="141:18" pos:end="141:19">+=</operator> <name pos:start="141:21" pos:end="141:38"><name pos:start="141:21" pos:end="141:25">frame</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:35">linesize</name><index pos:start="141:36" pos:end="141:38">[<expr pos:start="141:37" pos:end="141:37"><literal type="number" pos:start="141:37" pos:end="141:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="145:7" pos:end="183:5">else <block pos:start="145:12" pos:end="183:5">{<block_content pos:start="147:9" pos:end="181:9">

        <decl_stmt pos:start="147:9" pos:end="147:43"><decl pos:start="147:9" pos:end="147:32"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:16">sidx</name> <init pos:start="147:18" pos:end="147:32">= <expr pos:start="147:20" pos:end="147:32"><name pos:start="147:20" pos:end="147:32">PREAMBLE_SIZE</name></expr></init></decl>, <decl pos:start="147:35" pos:end="147:42"><type ref="prev" pos:start="147:9" pos:end="147:11"/><name pos:start="147:35" pos:end="147:38">didx</name> <init pos:start="147:40" pos:end="147:42">= <expr pos:start="147:42" pos:end="147:42"><literal type="number" pos:start="147:42" pos:end="147:42">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="149:9" pos:end="149:17"><decl pos:start="149:9" pos:end="149:13"><type pos:start="149:9" pos:end="149:11"><name pos:start="149:9" pos:end="149:11">int</name></type> <name pos:start="149:13" pos:end="149:13">y</name></decl>, <decl pos:start="149:16" pos:end="149:16"><type ref="prev" pos:start="149:9" pos:end="149:11"/><name pos:start="149:16" pos:end="149:16">x</name></decl>;</decl_stmt>



        <for pos:start="153:9" pos:end="181:9">for <control pos:start="153:13" pos:end="153:43">(<init pos:start="153:14" pos:end="153:19"><expr pos:start="153:14" pos:end="153:18"><name pos:start="153:14" pos:end="153:14">y</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>;</init> <condition pos:start="153:21" pos:end="153:38"><expr pos:start="153:21" pos:end="153:37"><name pos:start="153:21" pos:end="153:21">y</name> <operator pos:start="153:23" pos:end="153:23">&lt;</operator> <name pos:start="153:25" pos:end="153:37"><name pos:start="153:25" pos:end="153:29">avctx</name><operator pos:start="153:30" pos:end="153:31">-&gt;</operator><name pos:start="153:32" pos:end="153:37">height</name></name></expr>;</condition> <incr pos:start="153:40" pos:end="153:42"><expr pos:start="153:40" pos:end="153:42"><name pos:start="153:40" pos:end="153:40">y</name><operator pos:start="153:41" pos:end="153:42">++</operator></expr></incr>)</control> <block pos:start="153:45" pos:end="181:9">{<block_content pos:start="155:13" pos:end="179:39">

            <if_stmt pos:start="155:13" pos:end="171:13"><if pos:start="155:13" pos:end="163:13">if <condition pos:start="155:16" pos:end="155:30">(<expr pos:start="155:17" pos:end="155:29"><operator pos:start="155:17" pos:end="155:17">!</operator><name pos:start="155:18" pos:end="155:29"><name pos:start="155:18" pos:end="155:20">gdv</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:29">scale_v</name></name></expr>)</condition> <block pos:start="155:32" pos:end="163:13">{<block_content pos:start="157:17" pos:end="161:17">

                <for pos:start="157:17" pos:end="161:17">for <control pos:start="157:21" pos:end="157:50">(<init pos:start="157:22" pos:end="157:27"><expr pos:start="157:22" pos:end="157:26"><name pos:start="157:22" pos:end="157:22">x</name> <operator pos:start="157:24" pos:end="157:24">=</operator> <literal type="number" pos:start="157:26" pos:end="157:26">0</literal></expr>;</init> <condition pos:start="157:29" pos:end="157:45"><expr pos:start="157:29" pos:end="157:44"><name pos:start="157:29" pos:end="157:29">x</name> <operator pos:start="157:31" pos:end="157:31">&lt;</operator> <name pos:start="157:33" pos:end="157:44"><name pos:start="157:33" pos:end="157:37">avctx</name><operator pos:start="157:38" pos:end="157:39">-&gt;</operator><name pos:start="157:40" pos:end="157:44">width</name></name></expr>;</condition> <incr pos:start="157:47" pos:end="157:49"><expr pos:start="157:47" pos:end="157:49"><name pos:start="157:47" pos:end="157:47">x</name><operator pos:start="157:48" pos:end="157:49">++</operator></expr></incr>)</control> <block pos:start="157:52" pos:end="161:17">{<block_content pos:start="159:21" pos:end="159:57">

                    <expr_stmt pos:start="159:21" pos:end="159:57"><expr pos:start="159:21" pos:end="159:56"><name pos:start="159:21" pos:end="159:33"><name pos:start="159:21" pos:end="159:23">dst</name><index pos:start="159:24" pos:end="159:33">[<expr pos:start="159:25" pos:end="159:32"><name pos:start="159:25" pos:end="159:28">didx</name> <operator pos:start="159:30" pos:end="159:30">+</operator> <name pos:start="159:32" pos:end="159:32">x</name></expr>]</index></name> <operator pos:start="159:35" pos:end="159:35">=</operator> <name pos:start="159:37" pos:end="159:56"><name pos:start="159:37" pos:end="159:39">gdv</name><operator pos:start="159:40" pos:end="159:41">-&gt;</operator><name pos:start="159:42" pos:end="159:46">frame</name><index pos:start="159:47" pos:end="159:56">[<expr pos:start="159:48" pos:end="159:55"><name pos:start="159:48" pos:end="159:51">sidx</name> <operator pos:start="159:53" pos:end="159:53">+</operator> <name pos:start="159:55" pos:end="159:55">x</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="171:13">else <block pos:start="163:20" pos:end="171:13">{<block_content pos:start="165:17" pos:end="169:17">

                <for pos:start="165:17" pos:end="169:17">for <control pos:start="165:21" pos:end="165:50">(<init pos:start="165:22" pos:end="165:27"><expr pos:start="165:22" pos:end="165:26"><name pos:start="165:22" pos:end="165:22">x</name> <operator pos:start="165:24" pos:end="165:24">=</operator> <literal type="number" pos:start="165:26" pos:end="165:26">0</literal></expr>;</init> <condition pos:start="165:29" pos:end="165:45"><expr pos:start="165:29" pos:end="165:44"><name pos:start="165:29" pos:end="165:29">x</name> <operator pos:start="165:31" pos:end="165:31">&lt;</operator> <name pos:start="165:33" pos:end="165:44"><name pos:start="165:33" pos:end="165:37">avctx</name><operator pos:start="165:38" pos:end="165:39">-&gt;</operator><name pos:start="165:40" pos:end="165:44">width</name></name></expr>;</condition> <incr pos:start="165:47" pos:end="165:49"><expr pos:start="165:47" pos:end="165:49"><name pos:start="165:47" pos:end="165:47">x</name><operator pos:start="165:48" pos:end="165:49">++</operator></expr></incr>)</control> <block pos:start="165:52" pos:end="169:17">{<block_content pos:start="167:21" pos:end="167:59">

                    <expr_stmt pos:start="167:21" pos:end="167:59"><expr pos:start="167:21" pos:end="167:58"><name pos:start="167:21" pos:end="167:33"><name pos:start="167:21" pos:end="167:23">dst</name><index pos:start="167:24" pos:end="167:33">[<expr pos:start="167:25" pos:end="167:32"><name pos:start="167:25" pos:end="167:28">didx</name> <operator pos:start="167:30" pos:end="167:30">+</operator> <name pos:start="167:32" pos:end="167:32">x</name></expr>]</index></name> <operator pos:start="167:35" pos:end="167:35">=</operator> <name pos:start="167:37" pos:end="167:58"><name pos:start="167:37" pos:end="167:39">gdv</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:46">frame</name><index pos:start="167:47" pos:end="167:58">[<expr pos:start="167:48" pos:end="167:57"><name pos:start="167:48" pos:end="167:51">sidx</name> <operator pos:start="167:53" pos:end="167:53">+</operator> <name pos:start="167:55" pos:end="167:55">x</name><operator pos:start="167:56" pos:end="167:56">/</operator><literal type="number" pos:start="167:57" pos:end="167:57">2</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="173:13" pos:end="177:13"><if pos:start="173:13" pos:end="177:13">if <condition pos:start="173:16" pos:end="173:48">(<expr pos:start="173:17" pos:end="173:47"><operator pos:start="173:17" pos:end="173:17">!</operator><name pos:start="173:18" pos:end="173:29"><name pos:start="173:18" pos:end="173:20">gdv</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:29">scale_h</name></name> <operator pos:start="173:31" pos:end="173:32">||</operator> <operator pos:start="173:34" pos:end="173:34">(</operator><operator pos:start="173:35" pos:end="173:35">(</operator><name pos:start="173:36" pos:end="173:36">y</name> <operator pos:start="173:38" pos:end="173:38">&amp;</operator> <literal type="number" pos:start="173:40" pos:end="173:40">1</literal><operator pos:start="173:41" pos:end="173:41">)</operator> <operator pos:start="173:43" pos:end="173:44">==</operator> <literal type="number" pos:start="173:46" pos:end="173:46">1</literal><operator pos:start="173:47" pos:end="173:47">)</operator></expr>)</condition> <block pos:start="173:50" pos:end="177:13">{<block_content pos:start="175:17" pos:end="175:70">

                <expr_stmt pos:start="175:17" pos:end="175:70"><expr pos:start="175:17" pos:end="175:69"><name pos:start="175:17" pos:end="175:20">sidx</name> <operator pos:start="175:22" pos:end="175:23">+=</operator> <ternary pos:start="175:25" pos:end="175:69"><condition pos:start="175:25" pos:end="175:39"><expr pos:start="175:25" pos:end="175:37"><operator pos:start="175:25" pos:end="175:25">!</operator><name pos:start="175:26" pos:end="175:37"><name pos:start="175:26" pos:end="175:28">gdv</name><operator pos:start="175:29" pos:end="175:30">-&gt;</operator><name pos:start="175:31" pos:end="175:37">scale_v</name></name></expr> ?</condition><then pos:start="175:41" pos:end="175:52"> <expr pos:start="175:41" pos:end="175:52"><name pos:start="175:41" pos:end="175:52"><name pos:start="175:41" pos:end="175:45">avctx</name><operator pos:start="175:46" pos:end="175:47">-&gt;</operator><name pos:start="175:48" pos:end="175:52">width</name></name></expr> </then><else pos:start="175:54" pos:end="175:69">: <expr pos:start="175:56" pos:end="175:69"><name pos:start="175:56" pos:end="175:67"><name pos:start="175:56" pos:end="175:60">avctx</name><operator pos:start="175:61" pos:end="175:62">-&gt;</operator><name pos:start="175:63" pos:end="175:67">width</name></name><operator pos:start="175:68" pos:end="175:68">/</operator><literal type="number" pos:start="175:69" pos:end="175:69">2</literal></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:39"><expr pos:start="179:13" pos:end="179:38"><name pos:start="179:13" pos:end="179:16">didx</name> <operator pos:start="179:18" pos:end="179:19">+=</operator> <name pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:25">frame</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:35">linesize</name><index pos:start="179:36" pos:end="179:38">[<expr pos:start="179:37" pos:end="179:37"><literal type="number" pos:start="179:37" pos:end="179:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:19"><expr pos:start="187:5" pos:end="187:18"><operator pos:start="187:5" pos:end="187:5">*</operator><name pos:start="187:6" pos:end="187:14">got_frame</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <literal type="number" pos:start="187:18" pos:end="187:18">1</literal></expr>;</expr_stmt>



    <return pos:start="191:5" pos:end="191:39">return <expr pos:start="191:12" pos:end="191:38"><ternary pos:start="191:12" pos:end="191:38"><condition pos:start="191:12" pos:end="191:20"><expr pos:start="191:12" pos:end="191:18"><name pos:start="191:12" pos:end="191:14">ret</name> <operator pos:start="191:16" pos:end="191:16">&lt;</operator> <literal type="number" pos:start="191:18" pos:end="191:18">0</literal></expr> ?</condition><then pos:start="191:22" pos:end="191:24"> <expr pos:start="191:22" pos:end="191:24"><name pos:start="191:22" pos:end="191:24">ret</name></expr> </then><else pos:start="191:26" pos:end="191:38">: <expr pos:start="191:28" pos:end="191:38"><name pos:start="191:28" pos:end="191:38"><name pos:start="191:28" pos:end="191:32">avpkt</name><operator pos:start="191:33" pos:end="191:34">-&gt;</operator><name pos:start="191:35" pos:end="191:38">size</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
