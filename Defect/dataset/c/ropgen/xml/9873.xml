<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9873.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:36"><name pos:start="1:1" pos:end="1:18">vcard_emul_options</name><argument_list pos:start="1:19" pos:end="1:36">(<argument pos:start="1:20" pos:end="1:35">const char *args</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="229:1">{<block_content pos:start="5:5" pos:end="227:16">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">reader_count</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">VCardEmulOptions</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:26">opts</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:77">/* Allow the future use of allocating the options structure on the fly */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:56"><expr pos:start="13:5" pos:end="13:55"><call pos:start="13:5" pos:end="13:55"><name pos:start="13:5" pos:end="13:10">memcpy</name><argument_list pos:start="13:11" pos:end="13:55">(<argument pos:start="13:12" pos:end="13:19"><expr pos:start="13:12" pos:end="13:19"><operator pos:start="13:12" pos:end="13:12">&amp;</operator><name pos:start="13:13" pos:end="13:19">options</name></expr></argument>, <argument pos:start="13:22" pos:end="13:37"><expr pos:start="13:22" pos:end="13:37"><operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:37">default_options</name></expr></argument>, <argument pos:start="13:40" pos:end="13:54"><expr pos:start="13:40" pos:end="13:54"><sizeof pos:start="13:40" pos:end="13:54">sizeof<argument_list pos:start="13:46" pos:end="13:54">(<argument pos:start="13:47" pos:end="13:53"><expr pos:start="13:47" pos:end="13:53"><name pos:start="13:47" pos:end="13:53">options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:8">opts</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <operator pos:start="15:12" pos:end="15:12">&amp;</operator><name pos:start="15:13" pos:end="15:19">options</name></expr>;</expr_stmt>



    <do pos:start="19:5" pos:end="223:25">do <block pos:start="19:8" pos:end="223:5">{<block_content pos:start="21:9" pos:end="221:9">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:12">args</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:26"><name pos:start="21:16" pos:end="21:20">strip</name><argument_list pos:start="21:21" pos:end="21:26">(<argument pos:start="21:22" pos:end="21:25"><expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="21:29" pos:end="21:62">/* strip off the leading spaces */</comment>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><operator pos:start="23:13" pos:end="23:13">*</operator><name pos:start="23:14" pos:end="23:17">args</name> <operator pos:start="23:19" pos:end="23:20">==</operator> <literal type="char" pos:start="23:22" pos:end="23:24">','</literal></expr>)</condition> <block pos:start="23:27" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:21">

            <continue pos:start="25:13" pos:end="25:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="31:37">/* soft=(slot_name,virt_name,emul_type,emul_flags,cert_1, (no eol)

         *       cert_2,cert_3...) */</comment>

        <if_stmt pos:start="33:9" pos:end="221:9"><if pos:start="33:9" pos:end="149:9">if <condition pos:start="33:12" pos:end="33:43">(<expr pos:start="33:13" pos:end="33:42"><call pos:start="33:13" pos:end="33:37"><name pos:start="33:13" pos:end="33:19">strncmp</name><argument_list pos:start="33:20" pos:end="33:37">(<argument pos:start="33:21" pos:end="33:24"><expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">args</name></expr></argument>, <argument pos:start="33:27" pos:end="33:33"><expr pos:start="33:27" pos:end="33:33"><literal type="string" pos:start="33:27" pos:end="33:33">"soft="</literal></expr></argument>, <argument pos:start="33:36" pos:end="33:36"><expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">5</literal></expr></argument>)</argument_list></call> <operator pos:start="33:39" pos:end="33:40">==</operator> <literal type="number" pos:start="33:42" pos:end="33:42">0</literal></expr>)</condition> <block pos:start="33:45" pos:end="149:9">{<block_content pos:start="35:13" pos:end="145:34">

            <decl_stmt pos:start="35:13" pos:end="35:29"><decl pos:start="35:13" pos:end="35:28"><type pos:start="35:13" pos:end="35:24"><specifier pos:start="35:13" pos:end="35:17">const</specifier> <name pos:start="35:19" pos:end="35:22">char</name> <modifier pos:start="35:24" pos:end="35:24">*</modifier></type><name pos:start="35:25" pos:end="35:28">name</name></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:31"><decl pos:start="37:13" pos:end="37:30"><type pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:18">size_t</name></type> <name pos:start="37:20" pos:end="37:30">name_length</name></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:30"><decl pos:start="39:13" pos:end="39:29"><type pos:start="39:13" pos:end="39:24"><specifier pos:start="39:13" pos:end="39:17">const</specifier> <name pos:start="39:19" pos:end="39:22">char</name> <modifier pos:start="39:24" pos:end="39:24">*</modifier></type><name pos:start="39:25" pos:end="39:29">vname</name></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="41:32"><decl pos:start="41:13" pos:end="41:31"><type pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:18">size_t</name></type> <name pos:start="41:20" pos:end="41:31">vname_length</name></decl>;</decl_stmt>

            <decl_stmt pos:start="43:13" pos:end="43:36"><decl pos:start="43:13" pos:end="43:35"><type pos:start="43:13" pos:end="43:24"><specifier pos:start="43:13" pos:end="43:17">const</specifier> <name pos:start="43:19" pos:end="43:22">char</name> <modifier pos:start="43:24" pos:end="43:24">*</modifier></type><name pos:start="43:25" pos:end="43:35">type_params</name></decl>;</decl_stmt>

            <decl_stmt pos:start="45:13" pos:end="45:38"><decl pos:start="45:13" pos:end="45:37"><type pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:18">size_t</name></type> <name pos:start="45:20" pos:end="45:37">type_params_length</name></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:31"><decl pos:start="47:13" pos:end="47:30"><type pos:start="47:13" pos:end="47:16"><name pos:start="47:13" pos:end="47:16">char</name></type> <name pos:start="47:18" pos:end="47:30"><name pos:start="47:18" pos:end="47:25">type_str</name><index pos:start="47:26" pos:end="47:30">[<expr pos:start="47:27" pos:end="47:29"><literal type="number" pos:start="47:27" pos:end="47:29">100</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:31"><decl pos:start="49:13" pos:end="49:30"><type pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:25">VCardEmulType</name></type> <name pos:start="49:27" pos:end="49:30">type</name></decl>;</decl_stmt>

            <decl_stmt pos:start="51:13" pos:end="51:25"><decl pos:start="51:13" pos:end="51:21"><type pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">int</name></type> <name pos:start="51:17" pos:end="51:21">count</name></decl>, <decl pos:start="51:24" pos:end="51:24"><type ref="prev" pos:start="51:13" pos:end="51:15"/><name pos:start="51:24" pos:end="51:24">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="53:13" pos:end="53:52"><decl pos:start="53:13" pos:end="53:51"><type pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:32">VirtualReaderOptions</name> <modifier pos:start="53:34" pos:end="53:34">*</modifier></type><name pos:start="53:35" pos:end="53:44">vreaderOpt</name> <init pos:start="53:46" pos:end="53:51">= <expr pos:start="53:48" pos:end="53:51"><name pos:start="53:48" pos:end="53:51">NULL</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:16">args</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:34"><name pos:start="57:20" pos:end="57:24">strip</name><argument_list pos:start="57:25" pos:end="57:34">(<argument pos:start="57:26" pos:end="57:33"><expr pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:29">args</name> <operator pos:start="57:31" pos:end="57:31">+</operator> <literal type="number" pos:start="57:33" pos:end="57:33">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="63:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:29">(<expr pos:start="59:17" pos:end="59:28"><operator pos:start="59:17" pos:end="59:17">*</operator><name pos:start="59:18" pos:end="59:21">args</name> <operator pos:start="59:23" pos:end="59:24">!=</operator> <literal type="char" pos:start="59:26" pos:end="59:28">'('</literal></expr>)</condition> <block pos:start="59:31" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:25">

                <continue pos:start="61:17" pos:end="61:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:16">args</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:32"><name pos:start="65:20" pos:end="65:24">strip</name><argument_list pos:start="65:25" pos:end="65:32">(<argument pos:start="65:26" pos:end="65:31"><expr pos:start="65:26" pos:end="65:31"><name pos:start="65:26" pos:end="65:29">args</name><operator pos:start="65:30" pos:end="65:30">+</operator><literal type="number" pos:start="65:31" pos:end="65:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <macro pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:22">NEXT_TOKEN</name><argument_list pos:start="69:23" pos:end="69:28">(<argument pos:start="69:24" pos:end="69:27">name</argument>)</argument_list></macro>

            <macro pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:22">NEXT_TOKEN</name><argument_list pos:start="71:23" pos:end="71:29">(<argument pos:start="71:24" pos:end="71:28">vname</argument>)</argument_list></macro>

            <macro pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:22">NEXT_TOKEN</name><argument_list pos:start="73:23" pos:end="73:35">(<argument pos:start="73:24" pos:end="73:34">type_params</argument>)</argument_list></macro>

            <expr_stmt pos:start="75:13" pos:end="75:77"><expr pos:start="75:13" pos:end="75:76"><name pos:start="75:13" pos:end="75:30">type_params_length</name> <operator pos:start="75:32" pos:end="75:32">=</operator> <call pos:start="75:34" pos:end="75:76"><name pos:start="75:34" pos:end="75:36">MIN</name><argument_list pos:start="75:37" pos:end="75:76">(<argument pos:start="75:38" pos:end="75:55"><expr pos:start="75:38" pos:end="75:55"><name pos:start="75:38" pos:end="75:55">type_params_length</name></expr></argument>, <argument pos:start="75:58" pos:end="75:75"><expr pos:start="75:58" pos:end="75:75"><sizeof pos:start="75:58" pos:end="75:73">sizeof<argument_list pos:start="75:64" pos:end="75:73">(<argument pos:start="75:65" pos:end="75:72"><expr pos:start="75:65" pos:end="75:72"><name pos:start="75:65" pos:end="75:72">type_str</name></expr></argument>)</argument_list></sizeof><operator pos:start="75:74" pos:end="75:74">-</operator><literal type="number" pos:start="75:75" pos:end="75:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:62"><expr pos:start="77:13" pos:end="77:61"><call pos:start="77:13" pos:end="77:61"><name pos:start="77:13" pos:end="77:18">memcpy</name><argument_list pos:start="77:19" pos:end="77:61">(<argument pos:start="77:20" pos:end="77:27"><expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27">type_str</name></expr></argument>, <argument pos:start="77:30" pos:end="77:40"><expr pos:start="77:30" pos:end="77:40"><name pos:start="77:30" pos:end="77:40">type_params</name></expr></argument>, <argument pos:start="77:43" pos:end="77:60"><expr pos:start="77:43" pos:end="77:60"><name pos:start="77:43" pos:end="77:60">type_params_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:48"><expr pos:start="79:13" pos:end="79:47"><name pos:start="79:13" pos:end="79:40"><name pos:start="79:13" pos:end="79:20">type_str</name><index pos:start="79:21" pos:end="79:40">[<expr pos:start="79:22" pos:end="79:39"><name pos:start="79:22" pos:end="79:39">type_params_length</name></expr>]</index></name> <operator pos:start="79:42" pos:end="79:42">=</operator> <literal type="char" pos:start="79:44" pos:end="79:47">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:57"><expr pos:start="81:13" pos:end="81:56"><name pos:start="81:13" pos:end="81:16">type</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:56"><name pos:start="81:20" pos:end="81:46">vcard_emul_type_from_string</name><argument_list pos:start="81:47" pos:end="81:56">(<argument pos:start="81:48" pos:end="81:55"><expr pos:start="81:48" pos:end="81:55"><name pos:start="81:48" pos:end="81:55">type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <macro pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:22">NEXT_TOKEN</name><argument_list pos:start="85:23" pos:end="85:35">(<argument pos:start="85:24" pos:end="85:34">type_params</argument>)</argument_list></macro>



            <if_stmt pos:start="89:13" pos:end="93:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:27">(<expr pos:start="89:17" pos:end="89:26"><operator pos:start="89:17" pos:end="89:17">*</operator><name pos:start="89:18" pos:end="89:21">args</name> <operator pos:start="89:23" pos:end="89:24">==</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>)</condition> <block pos:start="89:29" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:22">

                <break pos:start="91:17" pos:end="91:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="97:13" pos:end="105:13"><if pos:start="97:13" pos:end="105:13">if <condition pos:start="97:16" pos:end="97:52">(<expr pos:start="97:17" pos:end="97:51"><name pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:20">opts</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:35">vreader_count</name></name> <operator pos:start="97:37" pos:end="97:38">&gt;=</operator> <name pos:start="97:40" pos:end="97:51">reader_count</name></expr>)</condition> <block pos:start="97:54" pos:end="105:13">{<block_content pos:start="99:17" pos:end="103:51">

                <expr_stmt pos:start="99:17" pos:end="99:44"><expr pos:start="99:17" pos:end="99:43"><name pos:start="99:17" pos:end="99:28">reader_count</name> <operator pos:start="99:30" pos:end="99:31">+=</operator> <name pos:start="99:33" pos:end="99:43">READER_STEP</name></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="103:51"><expr pos:start="101:17" pos:end="103:50"><name pos:start="101:17" pos:end="101:26">vreaderOpt</name> <operator pos:start="101:28" pos:end="101:28">=</operator> <call pos:start="101:30" pos:end="103:50"><name pos:start="101:30" pos:end="101:36">g_renew</name><argument_list pos:start="101:37" pos:end="103:50">(<argument pos:start="101:38" pos:end="101:57"><expr pos:start="101:38" pos:end="101:57"><name pos:start="101:38" pos:end="101:57">VirtualReaderOptions</name></expr></argument>, <argument pos:start="101:60" pos:end="101:72"><expr pos:start="101:60" pos:end="101:72"><name pos:start="101:60" pos:end="101:72"><name pos:start="101:60" pos:end="101:63">opts</name><operator pos:start="101:64" pos:end="101:65">-&gt;</operator><name pos:start="101:66" pos:end="101:72">vreader</name></name></expr></argument>,

                                     <argument pos:start="103:38" pos:end="103:49"><expr pos:start="103:38" pos:end="103:49"><name pos:start="103:38" pos:end="103:49">reader_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:39"><expr pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:16">opts</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:25">vreader</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:38">vreaderOpt</name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:58"><expr pos:start="109:13" pos:end="109:57"><name pos:start="109:13" pos:end="109:22">vreaderOpt</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <operator pos:start="109:26" pos:end="109:26">&amp;</operator><name pos:start="109:27" pos:end="109:57"><name pos:start="109:27" pos:end="109:36">vreaderOpt</name><index pos:start="109:37" pos:end="109:57">[<expr pos:start="109:38" pos:end="109:56"><name pos:start="109:38" pos:end="109:56"><name pos:start="109:38" pos:end="109:41">opts</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:56">vreader_count</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:60"><expr pos:start="111:13" pos:end="111:59"><name pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:22">vreaderOpt</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:28">name</name></name> <operator pos:start="111:30" pos:end="111:30">=</operator> <call pos:start="111:32" pos:end="111:59"><name pos:start="111:32" pos:end="111:40">g_strndup</name><argument_list pos:start="111:41" pos:end="111:59">(<argument pos:start="111:42" pos:end="111:45"><expr pos:start="111:42" pos:end="111:45"><name pos:start="111:42" pos:end="111:45">name</name></expr></argument>, <argument pos:start="111:48" pos:end="111:58"><expr pos:start="111:48" pos:end="111:58"><name pos:start="111:48" pos:end="111:58">name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:63"><expr pos:start="113:13" pos:end="113:62"><name pos:start="113:13" pos:end="113:29"><name pos:start="113:13" pos:end="113:22">vreaderOpt</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:29">vname</name></name> <operator pos:start="113:31" pos:end="113:31">=</operator> <call pos:start="113:33" pos:end="113:62"><name pos:start="113:33" pos:end="113:41">g_strndup</name><argument_list pos:start="113:42" pos:end="113:62">(<argument pos:start="113:43" pos:end="113:47"><expr pos:start="113:43" pos:end="113:47"><name pos:start="113:43" pos:end="113:47">vname</name></expr></argument>, <argument pos:start="113:50" pos:end="113:61"><expr pos:start="113:50" pos:end="113:61"><name pos:start="113:50" pos:end="113:61">vname_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:41"><expr pos:start="115:13" pos:end="115:40"><name pos:start="115:13" pos:end="115:33"><name pos:start="115:13" pos:end="115:22">vreaderOpt</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:33">card_type</name></name> <operator pos:start="115:35" pos:end="115:35">=</operator> <name pos:start="115:37" pos:end="115:40">type</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="119:59"><expr pos:start="117:13" pos:end="119:58"><name pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:22">vreaderOpt</name><operator pos:start="117:23" pos:end="117:24">-&gt;</operator><name pos:start="117:25" pos:end="117:35">type_params</name></name> <operator pos:start="117:37" pos:end="117:37">=</operator>

                <call pos:start="119:17" pos:end="119:58"><name pos:start="119:17" pos:end="119:25">g_strndup</name><argument_list pos:start="119:26" pos:end="119:58">(<argument pos:start="119:27" pos:end="119:37"><expr pos:start="119:27" pos:end="119:37"><name pos:start="119:27" pos:end="119:37">type_params</name></expr></argument>, <argument pos:start="119:40" pos:end="119:57"><expr pos:start="119:40" pos:end="119:57"><name pos:start="119:40" pos:end="119:57">type_params_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:53"><expr pos:start="121:13" pos:end="121:52"><name pos:start="121:13" pos:end="121:17">count</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="121:48"><name pos:start="121:21" pos:end="121:32">count_tokens</name><argument_list pos:start="121:33" pos:end="121:48">(<argument pos:start="121:34" pos:end="121:37"><expr pos:start="121:34" pos:end="121:37"><name pos:start="121:34" pos:end="121:37">args</name></expr></argument>, <argument pos:start="121:40" pos:end="121:42"><expr pos:start="121:40" pos:end="121:42"><literal type="char" pos:start="121:40" pos:end="121:42">','</literal></expr></argument>, <argument pos:start="121:45" pos:end="121:47"><expr pos:start="121:45" pos:end="121:47"><literal type="char" pos:start="121:45" pos:end="121:47">')'</literal></expr></argument>)</argument_list></call> <operator pos:start="121:50" pos:end="121:50">+</operator> <literal type="number" pos:start="121:52" pos:end="121:52">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:34"><name pos:start="123:13" pos:end="123:22">vreaderOpt</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:34">cert_count</name></name> <operator pos:start="123:36" pos:end="123:36">=</operator> <name pos:start="123:38" pos:end="123:42">count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:57"><expr pos:start="125:13" pos:end="125:56"><name pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:22">vreaderOpt</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:33">cert_name</name></name> <operator pos:start="125:35" pos:end="125:35">=</operator> <call pos:start="125:37" pos:end="125:56"><name pos:start="125:37" pos:end="125:41">g_new</name><argument_list pos:start="125:42" pos:end="125:56">(<argument pos:start="125:43" pos:end="125:48"><expr pos:start="125:43" pos:end="125:48"><name pos:start="125:43" pos:end="125:46">char</name> <operator pos:start="125:48" pos:end="125:48">*</operator></expr></argument>, <argument pos:start="125:51" pos:end="125:55"><expr pos:start="125:51" pos:end="125:55"><name pos:start="125:51" pos:end="125:55">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="127:13" pos:end="137:13">for <control pos:start="127:17" pos:end="127:39">(<init pos:start="127:18" pos:end="127:23"><expr pos:start="127:18" pos:end="127:22"><name pos:start="127:18" pos:end="127:18">i</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>;</init> <condition pos:start="127:25" pos:end="127:34"><expr pos:start="127:25" pos:end="127:33"><name pos:start="127:25" pos:end="127:25">i</name> <operator pos:start="127:27" pos:end="127:27">&lt;</operator> <name pos:start="127:29" pos:end="127:33">count</name></expr>;</condition> <incr pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:36">i</name><operator pos:start="127:37" pos:end="127:38">++</operator></expr></incr>)</control> <block pos:start="127:41" pos:end="137:13">{<block_content pos:start="129:17" pos:end="135:37">

                <decl_stmt pos:start="129:17" pos:end="129:40"><decl pos:start="129:17" pos:end="129:39"><type pos:start="129:17" pos:end="129:28"><specifier pos:start="129:17" pos:end="129:21">const</specifier> <name pos:start="129:23" pos:end="129:26">char</name> <modifier pos:start="129:28" pos:end="129:28">*</modifier></type><name pos:start="129:29" pos:end="129:32">cert</name> <init pos:start="129:34" pos:end="129:39">= <expr pos:start="129:36" pos:end="129:39"><name pos:start="129:36" pos:end="129:39">args</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:43"><expr pos:start="131:17" pos:end="131:42"><name pos:start="131:17" pos:end="131:20">args</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <call pos:start="131:24" pos:end="131:42"><name pos:start="131:24" pos:end="131:30">strpbrk</name><argument_list pos:start="131:31" pos:end="131:42">(<argument pos:start="131:32" pos:end="131:35"><expr pos:start="131:32" pos:end="131:35"><name pos:start="131:32" pos:end="131:35">args</name></expr></argument>, <argument pos:start="131:38" pos:end="131:41"><expr pos:start="131:38" pos:end="131:41"><literal type="string" pos:start="131:38" pos:end="131:41">",)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:72"><expr pos:start="133:17" pos:end="133:71"><name pos:start="133:17" pos:end="133:40"><name pos:start="133:17" pos:end="133:26">vreaderOpt</name><operator pos:start="133:27" pos:end="133:28">-&gt;</operator><name pos:start="133:29" pos:end="133:37">cert_name</name><index pos:start="133:38" pos:end="133:40">[<expr pos:start="133:39" pos:end="133:39"><name pos:start="133:39" pos:end="133:39">i</name></expr>]</index></name> <operator pos:start="133:42" pos:end="133:42">=</operator> <call pos:start="133:44" pos:end="133:71"><name pos:start="133:44" pos:end="133:52">g_strndup</name><argument_list pos:start="133:53" pos:end="133:71">(<argument pos:start="133:54" pos:end="133:57"><expr pos:start="133:54" pos:end="133:57"><name pos:start="133:54" pos:end="133:57">cert</name></expr></argument>, <argument pos:start="133:60" pos:end="133:70"><expr pos:start="133:60" pos:end="133:70"><name pos:start="133:60" pos:end="133:63">args</name> <operator pos:start="133:65" pos:end="133:65">-</operator> <name pos:start="133:67" pos:end="133:70">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:37"><expr pos:start="135:17" pos:end="135:36"><name pos:start="135:17" pos:end="135:20">args</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <call pos:start="135:24" pos:end="135:36"><name pos:start="135:24" pos:end="135:28">strip</name><argument_list pos:start="135:29" pos:end="135:36">(<argument pos:start="135:30" pos:end="135:35"><expr pos:start="135:30" pos:end="135:35"><name pos:start="135:30" pos:end="135:33">args</name><operator pos:start="135:34" pos:end="135:34">+</operator><literal type="number" pos:start="135:35" pos:end="135:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:29">(<expr pos:start="139:17" pos:end="139:28"><operator pos:start="139:17" pos:end="139:17">*</operator><name pos:start="139:18" pos:end="139:21">args</name> <operator pos:start="139:23" pos:end="139:24">==</operator> <literal type="char" pos:start="139:26" pos:end="139:28">')'</literal></expr>)</condition> <block pos:start="139:31" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:23">

                <expr_stmt pos:start="141:17" pos:end="141:23"><expr pos:start="141:17" pos:end="141:22"><name pos:start="141:17" pos:end="141:20">args</name><operator pos:start="141:21" pos:end="141:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:34"><expr pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:16">opts</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:31">vreader_count</name></name><operator pos:start="145:32" pos:end="145:33">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="147:9" pos:end="147:21">/* use_hw= */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="149:11" pos:end="167:9">else if <condition pos:start="149:19" pos:end="149:52">(<expr pos:start="149:20" pos:end="149:51"><call pos:start="149:20" pos:end="149:46"><name pos:start="149:20" pos:end="149:26">strncmp</name><argument_list pos:start="149:27" pos:end="149:46">(<argument pos:start="149:28" pos:end="149:31"><expr pos:start="149:28" pos:end="149:31"><name pos:start="149:28" pos:end="149:31">args</name></expr></argument>, <argument pos:start="149:34" pos:end="149:42"><expr pos:start="149:34" pos:end="149:42"><literal type="string" pos:start="149:34" pos:end="149:42">"use_hw="</literal></expr></argument>, <argument pos:start="149:45" pos:end="149:45"><expr pos:start="149:45" pos:end="149:45"><literal type="number" pos:start="149:45" pos:end="149:45">7</literal></expr></argument>)</argument_list></call> <operator pos:start="149:48" pos:end="149:49">==</operator> <literal type="number" pos:start="149:51" pos:end="149:51">0</literal></expr>)</condition> <block pos:start="149:54" pos:end="167:9">{<block_content pos:start="151:13" pos:end="163:36">

            <expr_stmt pos:start="151:13" pos:end="151:33"><expr pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:16">args</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:32"><name pos:start="151:20" pos:end="151:24">strip</name><argument_list pos:start="151:25" pos:end="151:32">(<argument pos:start="151:26" pos:end="151:31"><expr pos:start="151:26" pos:end="151:31"><name pos:start="151:26" pos:end="151:29">args</name><operator pos:start="151:30" pos:end="151:30">+</operator><literal type="number" pos:start="151:31" pos:end="151:31">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="161:13"><if pos:start="153:13" pos:end="157:13">if <condition pos:start="153:16" pos:end="153:77">(<expr pos:start="153:17" pos:end="153:76"><operator pos:start="153:17" pos:end="153:17">*</operator><name pos:start="153:18" pos:end="153:21">args</name> <operator pos:start="153:23" pos:end="153:24">==</operator> <literal type="char" pos:start="153:26" pos:end="153:28">'0'</literal> <operator pos:start="153:30" pos:end="153:31">||</operator> <operator pos:start="153:33" pos:end="153:33">*</operator><name pos:start="153:34" pos:end="153:37">args</name> <operator pos:start="153:39" pos:end="153:40">==</operator> <literal type="char" pos:start="153:42" pos:end="153:44">'N'</literal> <operator pos:start="153:46" pos:end="153:47">||</operator> <operator pos:start="153:49" pos:end="153:49">*</operator><name pos:start="153:50" pos:end="153:53">args</name> <operator pos:start="153:55" pos:end="153:56">==</operator> <literal type="char" pos:start="153:58" pos:end="153:60">'n'</literal> <operator pos:start="153:62" pos:end="153:63">||</operator> <operator pos:start="153:65" pos:end="153:65">*</operator><name pos:start="153:66" pos:end="153:69">args</name> <operator pos:start="153:71" pos:end="153:72">==</operator> <literal type="char" pos:start="153:74" pos:end="153:76">'F'</literal></expr>)</condition> <block pos:start="153:79" pos:end="157:13">{<block_content pos:start="155:17" pos:end="155:40">

                <expr_stmt pos:start="155:17" pos:end="155:40"><expr pos:start="155:17" pos:end="155:39"><name pos:start="155:17" pos:end="155:28"><name pos:start="155:17" pos:end="155:20">opts</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:28">use_hw</name></name> <operator pos:start="155:30" pos:end="155:30">=</operator> <name pos:start="155:32" pos:end="155:39">PR_FALSE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="157:15" pos:end="161:13">else <block pos:start="157:20" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:39">

                <expr_stmt pos:start="159:17" pos:end="159:39"><expr pos:start="159:17" pos:end="159:38"><name pos:start="159:17" pos:end="159:28"><name pos:start="159:17" pos:end="159:20">opts</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:28">use_hw</name></name> <operator pos:start="159:30" pos:end="159:30">=</operator> <name pos:start="159:32" pos:end="159:38">PR_TRUE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:36"><expr pos:start="163:13" pos:end="163:35"><name pos:start="163:13" pos:end="163:16">args</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:35"><name pos:start="163:20" pos:end="163:29">find_blank</name><argument_list pos:start="163:30" pos:end="163:35">(<argument pos:start="163:31" pos:end="163:34"><expr pos:start="163:31" pos:end="163:34"><name pos:start="163:31" pos:end="163:34">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="165:9" pos:end="165:22">/* hw_type= */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="177:9">else if <condition pos:start="167:19" pos:end="167:53">(<expr pos:start="167:20" pos:end="167:52"><call pos:start="167:20" pos:end="167:47"><name pos:start="167:20" pos:end="167:26">strncmp</name><argument_list pos:start="167:27" pos:end="167:47">(<argument pos:start="167:28" pos:end="167:31"><expr pos:start="167:28" pos:end="167:31"><name pos:start="167:28" pos:end="167:31">args</name></expr></argument>, <argument pos:start="167:34" pos:end="167:43"><expr pos:start="167:34" pos:end="167:43"><literal type="string" pos:start="167:34" pos:end="167:43">"hw_type="</literal></expr></argument>, <argument pos:start="167:46" pos:end="167:46"><expr pos:start="167:46" pos:end="167:46"><literal type="number" pos:start="167:46" pos:end="167:46">8</literal></expr></argument>)</argument_list></call> <operator pos:start="167:49" pos:end="167:50">==</operator> <literal type="number" pos:start="167:52" pos:end="167:52">0</literal></expr>)</condition> <block pos:start="167:55" pos:end="177:9">{<block_content pos:start="169:13" pos:end="173:36">

            <expr_stmt pos:start="169:13" pos:end="169:33"><expr pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:16">args</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <call pos:start="169:20" pos:end="169:32"><name pos:start="169:20" pos:end="169:24">strip</name><argument_list pos:start="169:25" pos:end="169:32">(<argument pos:start="169:26" pos:end="169:31"><expr pos:start="169:26" pos:end="169:31"><name pos:start="169:26" pos:end="169:29">args</name><operator pos:start="169:30" pos:end="169:30">+</operator><literal type="number" pos:start="169:31" pos:end="169:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:67"><expr pos:start="171:13" pos:end="171:66"><name pos:start="171:13" pos:end="171:30"><name pos:start="171:13" pos:end="171:16">opts</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:30">hw_card_type</name></name> <operator pos:start="171:32" pos:end="171:32">=</operator> <call pos:start="171:34" pos:end="171:66"><name pos:start="171:34" pos:end="171:60">vcard_emul_type_from_string</name><argument_list pos:start="171:61" pos:end="171:66">(<argument pos:start="171:62" pos:end="171:65"><expr pos:start="171:62" pos:end="171:65"><name pos:start="171:62" pos:end="171:65">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:36"><expr pos:start="173:13" pos:end="173:35"><name pos:start="173:13" pos:end="173:16">args</name> <operator pos:start="173:18" pos:end="173:18">=</operator> <call pos:start="173:20" pos:end="173:35"><name pos:start="173:20" pos:end="173:29">find_blank</name><argument_list pos:start="173:30" pos:end="173:35">(<argument pos:start="173:31" pos:end="173:34"><expr pos:start="173:31" pos:end="173:34"><name pos:start="173:31" pos:end="173:34">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="175:9" pos:end="175:24">/* hw_params= */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="177:11" pos:end="191:9">else if <condition pos:start="177:19" pos:end="177:56">(<expr pos:start="177:20" pos:end="177:55"><call pos:start="177:20" pos:end="177:50"><name pos:start="177:20" pos:end="177:26">strncmp</name><argument_list pos:start="177:27" pos:end="177:50">(<argument pos:start="177:28" pos:end="177:31"><expr pos:start="177:28" pos:end="177:31"><name pos:start="177:28" pos:end="177:31">args</name></expr></argument>, <argument pos:start="177:34" pos:end="177:45"><expr pos:start="177:34" pos:end="177:45"><literal type="string" pos:start="177:34" pos:end="177:45">"hw_params="</literal></expr></argument>, <argument pos:start="177:48" pos:end="177:49"><expr pos:start="177:48" pos:end="177:49"><literal type="number" pos:start="177:48" pos:end="177:49">10</literal></expr></argument>)</argument_list></call> <operator pos:start="177:52" pos:end="177:53">==</operator> <literal type="number" pos:start="177:55" pos:end="177:55">0</literal></expr>)</condition> <block pos:start="177:58" pos:end="191:9">{<block_content pos:start="179:13" pos:end="187:66">

            <decl_stmt pos:start="179:13" pos:end="179:31"><decl pos:start="179:13" pos:end="179:30"><type pos:start="179:13" pos:end="179:24"><specifier pos:start="179:13" pos:end="179:17">const</specifier> <name pos:start="179:19" pos:end="179:22">char</name> <modifier pos:start="179:24" pos:end="179:24">*</modifier></type><name pos:start="179:25" pos:end="179:30">params</name></decl>;</decl_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:34"><expr pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:16">args</name> <operator pos:start="181:18" pos:end="181:18">=</operator> <call pos:start="181:20" pos:end="181:33"><name pos:start="181:20" pos:end="181:24">strip</name><argument_list pos:start="181:25" pos:end="181:33">(<argument pos:start="181:26" pos:end="181:32"><expr pos:start="181:26" pos:end="181:32"><name pos:start="181:26" pos:end="181:29">args</name><operator pos:start="181:30" pos:end="181:30">+</operator><literal type="number" pos:start="181:31" pos:end="181:32">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:26"><expr pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:18">params</name> <operator pos:start="183:20" pos:end="183:20">=</operator> <name pos:start="183:22" pos:end="183:25">args</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:36"><expr pos:start="185:13" pos:end="185:35"><name pos:start="185:13" pos:end="185:16">args</name> <operator pos:start="185:18" pos:end="185:18">=</operator> <call pos:start="185:20" pos:end="185:35"><name pos:start="185:20" pos:end="185:29">find_blank</name><argument_list pos:start="185:30" pos:end="185:35">(<argument pos:start="185:31" pos:end="185:34"><expr pos:start="185:31" pos:end="185:34"><name pos:start="185:31" pos:end="185:34">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:66"><expr pos:start="187:13" pos:end="187:65"><name pos:start="187:13" pos:end="187:32"><name pos:start="187:13" pos:end="187:16">opts</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:32">hw_type_params</name></name> <operator pos:start="187:34" pos:end="187:34">=</operator> <call pos:start="187:36" pos:end="187:65"><name pos:start="187:36" pos:end="187:44">g_strndup</name><argument_list pos:start="187:45" pos:end="187:65">(<argument pos:start="187:46" pos:end="187:51"><expr pos:start="187:46" pos:end="187:51"><name pos:start="187:46" pos:end="187:51">params</name></expr></argument>, <argument pos:start="187:54" pos:end="187:64"><expr pos:start="187:54" pos:end="187:64"><name pos:start="187:54" pos:end="187:57">args</name><operator pos:start="187:58" pos:end="187:58">-</operator><name pos:start="187:59" pos:end="187:64">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="189:9" pos:end="189:34">/* db="/data/base/path" */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="191:11" pos:end="217:9">else if <condition pos:start="191:19" pos:end="191:48">(<expr pos:start="191:20" pos:end="191:47"><call pos:start="191:20" pos:end="191:42"><name pos:start="191:20" pos:end="191:26">strncmp</name><argument_list pos:start="191:27" pos:end="191:42">(<argument pos:start="191:28" pos:end="191:31"><expr pos:start="191:28" pos:end="191:31"><name pos:start="191:28" pos:end="191:31">args</name></expr></argument>, <argument pos:start="191:34" pos:end="191:38"><expr pos:start="191:34" pos:end="191:38"><literal type="string" pos:start="191:34" pos:end="191:38">"db="</literal></expr></argument>, <argument pos:start="191:41" pos:end="191:41"><expr pos:start="191:41" pos:end="191:41"><literal type="number" pos:start="191:41" pos:end="191:41">3</literal></expr></argument>)</argument_list></call> <operator pos:start="191:44" pos:end="191:45">==</operator> <literal type="number" pos:start="191:47" pos:end="191:47">0</literal></expr>)</condition> <block pos:start="191:50" pos:end="217:9">{<block_content pos:start="193:13" pos:end="215:13">

            <decl_stmt pos:start="193:13" pos:end="193:27"><decl pos:start="193:13" pos:end="193:26"><type pos:start="193:13" pos:end="193:24"><specifier pos:start="193:13" pos:end="193:17">const</specifier> <name pos:start="193:19" pos:end="193:22">char</name> <modifier pos:start="193:24" pos:end="193:24">*</modifier></type><name pos:start="193:25" pos:end="193:26">db</name></decl>;</decl_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:33"><expr pos:start="195:13" pos:end="195:32"><name pos:start="195:13" pos:end="195:16">args</name> <operator pos:start="195:18" pos:end="195:18">=</operator> <call pos:start="195:20" pos:end="195:32"><name pos:start="195:20" pos:end="195:24">strip</name><argument_list pos:start="195:25" pos:end="195:32">(<argument pos:start="195:26" pos:end="195:31"><expr pos:start="195:26" pos:end="195:31"><name pos:start="195:26" pos:end="195:29">args</name><operator pos:start="195:30" pos:end="195:30">+</operator><literal type="number" pos:start="195:31" pos:end="195:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="201:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:29">(<expr pos:start="197:17" pos:end="197:28"><operator pos:start="197:17" pos:end="197:17">*</operator><name pos:start="197:18" pos:end="197:21">args</name> <operator pos:start="197:23" pos:end="197:24">!=</operator> <literal type="char" pos:start="197:26" pos:end="197:28">'"'</literal></expr>)</condition> <block pos:start="197:31" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:25">

                <continue pos:start="199:17" pos:end="199:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:19"><expr pos:start="203:13" pos:end="203:18"><name pos:start="203:13" pos:end="203:16">args</name><operator pos:start="203:17" pos:end="203:18">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:22"><expr pos:start="205:13" pos:end="205:21"><name pos:start="205:13" pos:end="205:14">db</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <name pos:start="205:18" pos:end="205:21">args</name></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:41"><expr pos:start="207:13" pos:end="207:40"><name pos:start="207:13" pos:end="207:16">args</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <call pos:start="207:20" pos:end="207:40"><name pos:start="207:20" pos:end="207:26">strpbrk</name><argument_list pos:start="207:27" pos:end="207:40">(<argument pos:start="207:28" pos:end="207:31"><expr pos:start="207:28" pos:end="207:31"><name pos:start="207:28" pos:end="207:31">args</name></expr></argument>, <argument pos:start="207:34" pos:end="207:39"><expr pos:start="207:34" pos:end="207:39"><literal type="string" pos:start="207:34" pos:end="207:39">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:50"><expr pos:start="209:13" pos:end="209:49"><name pos:start="209:13" pos:end="209:24"><name pos:start="209:13" pos:end="209:16">opts</name><operator pos:start="209:17" pos:end="209:18">-&gt;</operator><name pos:start="209:19" pos:end="209:24">nss_db</name></name> <operator pos:start="209:26" pos:end="209:26">=</operator> <call pos:start="209:28" pos:end="209:49"><name pos:start="209:28" pos:end="209:36">g_strndup</name><argument_list pos:start="209:37" pos:end="209:49">(<argument pos:start="209:38" pos:end="209:39"><expr pos:start="209:38" pos:end="209:39"><name pos:start="209:38" pos:end="209:39">db</name></expr></argument>, <argument pos:start="209:42" pos:end="209:48"><expr pos:start="209:42" pos:end="209:48"><name pos:start="209:42" pos:end="209:45">args</name><operator pos:start="209:46" pos:end="209:46">-</operator><name pos:start="209:47" pos:end="209:48">db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="211:13" pos:end="215:13"><if pos:start="211:13" pos:end="215:13">if <condition pos:start="211:16" pos:end="211:27">(<expr pos:start="211:17" pos:end="211:26"><operator pos:start="211:17" pos:end="211:17">*</operator><name pos:start="211:18" pos:end="211:21">args</name> <operator pos:start="211:23" pos:end="211:24">!=</operator> <literal type="number" pos:start="211:26" pos:end="211:26">0</literal></expr>)</condition> <block pos:start="211:29" pos:end="215:13">{<block_content pos:start="213:17" pos:end="213:23">

                <expr_stmt pos:start="213:17" pos:end="213:23"><expr pos:start="213:17" pos:end="213:22"><name pos:start="213:17" pos:end="213:20">args</name><operator pos:start="213:21" pos:end="213:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="217:11" pos:end="221:9">else <block pos:start="217:16" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:36">

            <expr_stmt pos:start="219:13" pos:end="219:36"><expr pos:start="219:13" pos:end="219:35"><name pos:start="219:13" pos:end="219:16">args</name> <operator pos:start="219:18" pos:end="219:18">=</operator> <call pos:start="219:20" pos:end="219:35"><name pos:start="219:20" pos:end="219:29">find_blank</name><argument_list pos:start="219:30" pos:end="219:35">(<argument pos:start="219:31" pos:end="219:34"><expr pos:start="219:31" pos:end="219:34"><name pos:start="219:31" pos:end="219:34">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block> while <condition pos:start="223:13" pos:end="223:24">(<expr pos:start="223:14" pos:end="223:23"><operator pos:start="223:14" pos:end="223:14">*</operator><name pos:start="223:15" pos:end="223:18">args</name> <operator pos:start="223:20" pos:end="223:21">!=</operator> <literal type="number" pos:start="223:23" pos:end="223:23">0</literal></expr>)</condition>;</do>



    <return pos:start="227:5" pos:end="227:16">return <expr pos:start="227:12" pos:end="227:15"><name pos:start="227:12" pos:end="227:15">opts</name></expr>;</return>

</block_content>}</block>
</unit>
