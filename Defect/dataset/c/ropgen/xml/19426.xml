<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19426.c" pos:tabs="8"><function pos:start="1:1" pos:end="484:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">machvirt_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="484:1">{<block_content pos:start="5:5" pos:end="482:34">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">VirtMachineState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">vms</name> <init pos:start="5:27" pos:end="5:49">= <expr pos:start="5:29" pos:end="5:49"><call pos:start="5:29" pos:end="5:49"><name pos:start="5:29" pos:end="5:40">VIRT_MACHINE</name><argument_list pos:start="5:41" pos:end="5:49">(<argument pos:start="5:42" pos:end="5:48"><expr pos:start="5:42" pos:end="5:48"><name pos:start="5:42" pos:end="5:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">VirtMachineClass</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">vmc</name> <init pos:start="7:27" pos:end="7:59">= <expr pos:start="7:29" pos:end="7:59"><call pos:start="7:29" pos:end="7:59"><name pos:start="7:29" pos:end="7:50">VIRT_MACHINE_GET_CLASS</name><argument_list pos:start="7:51" pos:end="7:59">(<argument pos:start="7:52" pos:end="7:58"><expr pos:start="7:52" pos:end="7:58"><name pos:start="7:52" pos:end="7:58">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">qemu_irq</name></type> <name pos:start="9:14" pos:end="9:26"><name pos:start="9:14" pos:end="9:16">pic</name><index pos:start="9:17" pos:end="9:26">[<expr pos:start="9:18" pos:end="9:25"><name pos:start="9:18" pos:end="9:25">NUM_IRQS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">sysmem</name> <init pos:start="11:26" pos:end="11:46">= <expr pos:start="11:28" pos:end="11:46"><call pos:start="11:28" pos:end="11:46"><name pos:start="11:28" pos:end="11:44">get_system_memory</name><argument_list pos:start="11:45" pos:end="11:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:31">secure_sysmem</name> <init pos:start="13:33" pos:end="13:38">= <expr pos:start="13:35" pos:end="13:38"><name pos:start="13:35" pos:end="13:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>, <decl pos:start="15:12" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:24">virt_max_cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">ram</name> <init pos:start="17:23" pos:end="17:46">= <expr pos:start="17:25" pos:end="17:46"><call pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:29">g_new</name><argument_list pos:start="17:30" pos:end="17:46">(<argument pos:start="17:31" pos:end="17:42"><expr pos:start="17:31" pos:end="17:42"><name pos:start="17:31" pos:end="17:42">MemoryRegion</name></expr></argument>, <argument pos:start="17:45" pos:end="17:45"><expr pos:start="17:45" pos:end="17:45"><literal type="number" pos:start="17:45" pos:end="17:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:25">cpu_model</name> <init pos:start="19:27" pos:end="19:46">= <expr pos:start="19:29" pos:end="19:46"><name pos:start="19:29" pos:end="19:46"><name pos:start="19:29" pos:end="19:35">machine</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier><modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:17">cpustr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">ObjectClass</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:19">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:24">typename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">CPUClass</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">Error</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:14">err</name> <init pos:start="29:16" pos:end="29:21">= <expr pos:start="29:18" pos:end="29:21"><name pos:start="29:18" pos:end="29:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:67"><decl pos:start="31:5" pos:end="31:66"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">bool</name></type> <name pos:start="31:10" pos:end="31:24">firmware_loaded</name> <init pos:start="31:26" pos:end="31:66">= <expr pos:start="31:28" pos:end="31:66"><name pos:start="31:28" pos:end="31:36">bios_name</name> <operator pos:start="31:38" pos:end="31:39">||</operator> <call pos:start="31:41" pos:end="31:66"><name pos:start="31:41" pos:end="31:49">drive_get</name><argument_list pos:start="31:50" pos:end="31:66">(<argument pos:start="31:51" pos:end="31:59"><expr pos:start="31:51" pos:end="31:59"><name pos:start="31:51" pos:end="31:59">IF_PFLASH</name></expr></argument>, <argument pos:start="31:62" pos:end="31:62"><expr pos:start="31:62" pos:end="31:62"><literal type="number" pos:start="31:62" pos:end="31:62">0</literal></expr></argument>, <argument pos:start="31:65" pos:end="31:65"><expr pos:start="31:65" pos:end="31:65"><literal type="number" pos:start="31:65" pos:end="31:65">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:11">uint8_t</name></type> <name pos:start="33:13" pos:end="33:21">clustersz</name></decl>;</decl_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">cpu_model</name></expr>)</condition> <block pos:start="37:21" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:33">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="string" pos:start="39:21" pos:end="39:32">"cortex-a15"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="49:7">/* We can probe only here because during property set

     * KVM is not available yet

     */</comment>

    <if_stmt pos:start="51:5" pos:end="73:5"><if pos:start="51:5" pos:end="73:5">if <condition pos:start="51:8" pos:end="51:26">(<expr pos:start="51:9" pos:end="51:25"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:25"><name pos:start="51:10" pos:end="51:12">vms</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:25">gic_version</name></name></expr>)</condition> <block pos:start="51:28" pos:end="73:5">{<block_content pos:start="53:9" pos:end="71:9">

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><operator pos:start="53:13" pos:end="53:13">!</operator><call pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:24">kvm_enabled</name><argument_list pos:start="53:25" pos:end="53:26">()</argument_list></call></expr>)</condition> <block pos:start="53:29" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:20">

            <expr_stmt pos:start="55:13" pos:end="55:58"><expr pos:start="55:13" pos:end="55:57"><call pos:start="55:13" pos:end="55:57"><name pos:start="55:13" pos:end="55:24">error_report</name><argument_list pos:start="55:25" pos:end="55:57">(<argument pos:start="55:26" pos:end="55:56"><expr pos:start="55:26" pos:end="55:56"><literal type="string" pos:start="55:26" pos:end="55:56">"gic-version=host requires KVM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><call pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:16">exit</name><argument_list pos:start="57:17" pos:end="57:19">(<argument pos:start="57:18" pos:end="57:18"><expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:11">vms</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:24">gic_version</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <call pos:start="63:28" pos:end="63:47"><name pos:start="63:28" pos:end="63:45">kvm_arm_vgic_probe</name><argument_list pos:start="63:46" pos:end="63:47">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:30">(<expr pos:start="65:13" pos:end="65:29"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:29"><name pos:start="65:14" pos:end="65:16">vms</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:29">gic_version</name></name></expr>)</condition> <block pos:start="65:32" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:20">

            <expr_stmt pos:start="67:13" pos:end="67:78"><expr pos:start="67:13" pos:end="67:77"><call pos:start="67:13" pos:end="67:77"><name pos:start="67:13" pos:end="67:24">error_report</name><argument_list pos:start="67:25" pos:end="67:77">(<argument pos:start="67:26" pos:end="67:76"><expr pos:start="67:26" pos:end="67:76"><literal type="string" pos:start="67:26" pos:end="67:76">"Unable to determine GIC version supported by host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:19"><call pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:16">exit</name><argument_list pos:start="69:17" pos:end="69:19">(<argument pos:start="69:18" pos:end="69:18"><expr pos:start="69:18" pos:end="69:18"><literal type="number" pos:start="69:18" pos:end="69:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:71">/* Separate the actual CPU model name from any appended features */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:43"><expr pos:start="79:5" pos:end="79:42"><name pos:start="79:5" pos:end="79:10">cpustr</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:42"><name pos:start="79:14" pos:end="79:23">g_strsplit</name><argument_list pos:start="79:24" pos:end="79:42">(<argument pos:start="79:25" pos:end="79:33"><expr pos:start="79:25" pos:end="79:33"><name pos:start="79:25" pos:end="79:33">cpu_model</name></expr></argument>, <argument pos:start="79:36" pos:end="79:38"><expr pos:start="79:36" pos:end="79:38"><literal type="string" pos:start="79:36" pos:end="79:38">","</literal></expr></argument>, <argument pos:start="79:41" pos:end="79:41"><expr pos:start="79:41" pos:end="79:41"><literal type="number" pos:start="79:41" pos:end="79:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:34">(<expr pos:start="83:9" pos:end="83:33"><operator pos:start="83:9" pos:end="83:9">!</operator><call pos:start="83:10" pos:end="83:33"><name pos:start="83:10" pos:end="83:22">cpuname_valid</name><argument_list pos:start="83:23" pos:end="83:33">(<argument pos:start="83:24" pos:end="83:32"><expr pos:start="83:24" pos:end="83:32"><name pos:start="83:24" pos:end="83:32"><name pos:start="83:24" pos:end="83:29">cpustr</name><index pos:start="83:30" pos:end="83:32">[<expr pos:start="83:31" pos:end="83:31"><literal type="number" pos:start="83:31" pos:end="83:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:36" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:16">

        <expr_stmt pos:start="85:9" pos:end="85:67"><expr pos:start="85:9" pos:end="85:66"><call pos:start="85:9" pos:end="85:66"><name pos:start="85:9" pos:end="85:20">error_report</name><argument_list pos:start="85:21" pos:end="85:66">(<argument pos:start="85:22" pos:end="85:54"><expr pos:start="85:22" pos:end="85:54"><literal type="string" pos:start="85:22" pos:end="85:54">"mach-virt: CPU %s not supported"</literal></expr></argument>, <argument pos:start="85:57" pos:end="85:65"><expr pos:start="85:57" pos:end="85:65"><name pos:start="85:57" pos:end="85:65"><name pos:start="85:57" pos:end="85:62">cpustr</name><index pos:start="85:63" pos:end="85:65">[<expr pos:start="85:64" pos:end="85:64"><literal type="number" pos:start="85:64" pos:end="85:64">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">exit</name><argument_list pos:start="87:13" pos:end="87:15">(<argument pos:start="87:14" pos:end="87:14"><expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="111:7">/* If we have an EL3 boot ROM then the assumption is that it will

     * implement PSCI itself, so disable QEMU's internal implementation

     * so it doesn't get in the way. Instead of starting secondary

     * CPUs in PSCI powerdown state we will start them all running and

     * let the boot ROM sort them out.

     * The usual case is that we do use QEMU's PSCI implementation;

     * if the guest has EL2 then we will use SMC as the conduit,

     * and otherwise we will use HVC (for backwards compatibility and

     * because if we're using KVM then we must use HVC).

     */</comment>

    <if_stmt pos:start="113:5" pos:end="125:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:39">(<expr pos:start="113:9" pos:end="113:38"><name pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:11">vms</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:19">secure</name></name> <operator pos:start="113:21" pos:end="113:22">&amp;&amp;</operator> <name pos:start="113:24" pos:end="113:38">firmware_loaded</name></expr>)</condition> <block pos:start="113:41" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:55">

        <expr_stmt pos:start="115:9" pos:end="115:55"><expr pos:start="115:9" pos:end="115:54"><name pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:11">vms</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:25">psci_conduit</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:54">QEMU_PSCI_CONDUIT_DISABLED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="117:7" pos:end="121:5">else if <condition pos:start="117:15" pos:end="117:25">(<expr pos:start="117:16" pos:end="117:24"><name pos:start="117:16" pos:end="117:24"><name pos:start="117:16" pos:end="117:18">vms</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:24">virt</name></name></expr>)</condition> <block pos:start="117:27" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:50">

        <expr_stmt pos:start="119:9" pos:end="119:50"><expr pos:start="119:9" pos:end="119:49"><name pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:11">vms</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:25">psci_conduit</name></name> <operator pos:start="119:27" pos:end="119:27">=</operator> <name pos:start="119:29" pos:end="119:49">QEMU_PSCI_CONDUIT_SMC</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="125:5">else <block pos:start="121:12" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:50">

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:11">vms</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:25">psci_conduit</name></name> <operator pos:start="123:27" pos:end="123:27">=</operator> <name pos:start="123:29" pos:end="123:49">QEMU_PSCI_CONDUIT_HVC</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="133:7">/* The maximum number of CPUs depends on the GIC version, or on how

     * many redistributors we can fit into the memory map.

     */</comment>

    <if_stmt pos:start="135:5" pos:end="147:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:30">(<expr pos:start="135:9" pos:end="135:29"><name pos:start="135:9" pos:end="135:24"><name pos:start="135:9" pos:end="135:11">vms</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:24">gic_version</name></name> <operator pos:start="135:26" pos:end="135:27">==</operator> <literal type="number" pos:start="135:29" pos:end="135:29">3</literal></expr>)</condition> <block pos:start="135:32" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:42">

        <expr_stmt pos:start="137:9" pos:end="137:68"><expr pos:start="137:9" pos:end="137:67"><name pos:start="137:9" pos:end="137:21">virt_max_cpus</name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:52"><name pos:start="137:25" pos:end="137:27">vms</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:35">memmap</name><index pos:start="137:36" pos:end="137:52">[<expr pos:start="137:37" pos:end="137:51"><name pos:start="137:37" pos:end="137:51">VIRT_GIC_REDIST</name></expr>]</index></name><operator pos:start="137:53" pos:end="137:53">.</operator><name pos:start="137:54" pos:end="137:57">size</name> <operator pos:start="137:59" pos:end="137:59">/</operator> <literal type="number" pos:start="137:61" pos:end="137:67">0x20000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:42"><expr pos:start="139:9" pos:end="139:41"><name pos:start="139:9" pos:end="139:17">clustersz</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <name pos:start="139:21" pos:end="139:41">GICV3_TARGETLIST_BITS</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="147:5">else <block pos:start="141:12" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:40">

        <expr_stmt pos:start="143:9" pos:end="143:33"><expr pos:start="143:9" pos:end="143:32"><name pos:start="143:9" pos:end="143:21">virt_max_cpus</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <name pos:start="143:25" pos:end="143:32">GIC_NCPU</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:40"><expr pos:start="145:9" pos:end="145:39"><name pos:start="145:9" pos:end="145:17">clustersz</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <name pos:start="145:21" pos:end="145:39">GIC_TARGETLIST_BITS</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="151:5" pos:end="161:5"><if pos:start="151:5" pos:end="161:5">if <condition pos:start="151:8" pos:end="151:33">(<expr pos:start="151:9" pos:end="151:32"><name pos:start="151:9" pos:end="151:16">max_cpus</name> <operator pos:start="151:18" pos:end="151:18">&gt;</operator> <name pos:start="151:20" pos:end="151:32">virt_max_cpus</name></expr>)</condition> <block pos:start="151:35" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:16">

        <expr_stmt pos:start="153:9" pos:end="157:46"><expr pos:start="153:9" pos:end="157:45"><call pos:start="153:9" pos:end="157:45"><name pos:start="153:9" pos:end="153:20">error_report</name><argument_list pos:start="153:21" pos:end="157:45">(<argument pos:start="153:22" pos:end="155:60"><expr pos:start="153:22" pos:end="155:60"><literal type="string" pos:start="153:22" pos:end="153:74">"Number of SMP CPUs requested (%d) exceeds max CPUs "</literal>

                     <literal type="string" pos:start="155:22" pos:end="155:60">"supported by machine 'mach-virt' (%d)"</literal></expr></argument>,

                     <argument pos:start="157:22" pos:end="157:29"><expr pos:start="157:22" pos:end="157:29"><name pos:start="157:22" pos:end="157:29">max_cpus</name></expr></argument>, <argument pos:start="157:32" pos:end="157:44"><expr pos:start="157:32" pos:end="157:44"><name pos:start="157:32" pos:end="157:44">virt_max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:16"><expr pos:start="159:9" pos:end="159:15"><call pos:start="159:9" pos:end="159:15"><name pos:start="159:9" pos:end="159:12">exit</name><argument_list pos:start="159:13" pos:end="159:15">(<argument pos:start="159:14" pos:end="159:14"><expr pos:start="159:14" pos:end="159:14"><literal type="number" pos:start="159:14" pos:end="159:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:29"><expr pos:start="165:5" pos:end="165:28"><name pos:start="165:5" pos:end="165:17"><name pos:start="165:5" pos:end="165:7">vms</name><operator pos:start="165:8" pos:end="165:9">-&gt;</operator><name pos:start="165:10" pos:end="165:17">smp_cpus</name></name> <operator pos:start="165:19" pos:end="165:19">=</operator> <name pos:start="165:21" pos:end="165:28">smp_cpus</name></expr>;</expr_stmt>



    <if_stmt pos:start="169:5" pos:end="175:5"><if pos:start="169:5" pos:end="175:5">if <condition pos:start="169:8" pos:end="169:55">(<expr pos:start="169:9" pos:end="169:54"><name pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:15">machine</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:25">ram_size</name></name> <operator pos:start="169:27" pos:end="169:27">&gt;</operator> <name pos:start="169:29" pos:end="169:49"><name pos:start="169:29" pos:end="169:31">vms</name><operator pos:start="169:32" pos:end="169:33">-&gt;</operator><name pos:start="169:34" pos:end="169:39">memmap</name><index pos:start="169:40" pos:end="169:49">[<expr pos:start="169:41" pos:end="169:48"><name pos:start="169:41" pos:end="169:48">VIRT_MEM</name></expr>]</index></name><operator pos:start="169:50" pos:end="169:50">.</operator><name pos:start="169:51" pos:end="169:54">size</name></expr>)</condition> <block pos:start="169:57" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:16">

        <expr_stmt pos:start="171:9" pos:end="171:80"><expr pos:start="171:9" pos:end="171:79"><call pos:start="171:9" pos:end="171:79"><name pos:start="171:9" pos:end="171:20">error_report</name><argument_list pos:start="171:21" pos:end="171:79">(<argument pos:start="171:22" pos:end="171:65"><expr pos:start="171:22" pos:end="171:65"><literal type="string" pos:start="171:22" pos:end="171:65">"mach-virt: cannot model more than %dGB RAM"</literal></expr></argument>, <argument pos:start="171:68" pos:end="171:78"><expr pos:start="171:68" pos:end="171:78"><name pos:start="171:68" pos:end="171:78">RAMLIMIT_GB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:16"><expr pos:start="173:9" pos:end="173:15"><call pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:12">exit</name><argument_list pos:start="173:13" pos:end="173:15">(<argument pos:start="173:14" pos:end="173:14"><expr pos:start="173:14" pos:end="173:14"><literal type="number" pos:start="173:14" pos:end="173:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="179:5" pos:end="187:5"><if pos:start="179:5" pos:end="187:5">if <condition pos:start="179:8" pos:end="179:35">(<expr pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:17"><name pos:start="179:9" pos:end="179:11">vms</name><operator pos:start="179:12" pos:end="179:13">-&gt;</operator><name pos:start="179:14" pos:end="179:17">virt</name></name> <operator pos:start="179:19" pos:end="179:20">&amp;&amp;</operator> <call pos:start="179:22" pos:end="179:34"><name pos:start="179:22" pos:end="179:32">kvm_enabled</name><argument_list pos:start="179:33" pos:end="179:34">()</argument_list></call></expr>)</condition> <block pos:start="179:37" pos:end="187:5">{<block_content pos:start="181:9" pos:end="185:16">

        <expr_stmt pos:start="181:9" pos:end="183:67"><expr pos:start="181:9" pos:end="183:66"><call pos:start="181:9" pos:end="183:66"><name pos:start="181:9" pos:end="181:20">error_report</name><argument_list pos:start="181:21" pos:end="183:66">(<argument pos:start="181:22" pos:end="183:65"><expr pos:start="181:22" pos:end="183:65"><literal type="string" pos:start="181:22" pos:end="181:65">"mach-virt: KVM does not support providing "</literal>

                     <literal type="string" pos:start="183:22" pos:end="183:65">"Virtualization extensions to the guest CPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:16"><expr pos:start="185:9" pos:end="185:15"><call pos:start="185:9" pos:end="185:15"><name pos:start="185:9" pos:end="185:12">exit</name><argument_list pos:start="185:13" pos:end="185:15">(<argument pos:start="185:14" pos:end="185:14"><expr pos:start="185:14" pos:end="185:14"><literal type="number" pos:start="185:14" pos:end="185:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="221:5"><if pos:start="191:5" pos:end="221:5">if <condition pos:start="191:8" pos:end="191:20">(<expr pos:start="191:9" pos:end="191:19"><name pos:start="191:9" pos:end="191:19"><name pos:start="191:9" pos:end="191:11">vms</name><operator pos:start="191:12" pos:end="191:13">-&gt;</operator><name pos:start="191:14" pos:end="191:19">secure</name></name></expr>)</condition> <block pos:start="191:22" pos:end="221:5">{<block_content pos:start="193:9" pos:end="219:74">

        <if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:26">(<expr pos:start="193:13" pos:end="193:25"><call pos:start="193:13" pos:end="193:25"><name pos:start="193:13" pos:end="193:23">kvm_enabled</name><argument_list pos:start="193:24" pos:end="193:25">()</argument_list></call></expr>)</condition> <block pos:start="193:28" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:20">

            <expr_stmt pos:start="195:13" pos:end="195:80"><expr pos:start="195:13" pos:end="195:79"><call pos:start="195:13" pos:end="195:79"><name pos:start="195:13" pos:end="195:24">error_report</name><argument_list pos:start="195:25" pos:end="195:79">(<argument pos:start="195:26" pos:end="195:78"><expr pos:start="195:26" pos:end="195:78"><literal type="string" pos:start="195:26" pos:end="195:78">"mach-virt: KVM does not support Security extensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:20"><expr pos:start="197:13" pos:end="197:19"><call pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:16">exit</name><argument_list pos:start="197:17" pos:end="197:19">(<argument pos:start="197:18" pos:end="197:18"><expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="203:9" pos:end="211:11">/* The Secure view of the world is the same as the NonSecure,

         * but with a few extra devices. Create it as a container region

         * containing the system memory at low priority; any secure-only

         * devices go in at higher priority and take precedence.

         */</comment>

        <expr_stmt pos:start="213:9" pos:end="213:47"><expr pos:start="213:9" pos:end="213:46"><name pos:start="213:9" pos:end="213:21">secure_sysmem</name> <operator pos:start="213:23" pos:end="213:23">=</operator> <call pos:start="213:25" pos:end="213:46"><name pos:start="213:25" pos:end="213:29">g_new</name><argument_list pos:start="213:30" pos:end="213:46">(<argument pos:start="213:31" pos:end="213:42"><expr pos:start="213:31" pos:end="213:42"><name pos:start="213:31" pos:end="213:42">MemoryRegion</name></expr></argument>, <argument pos:start="213:45" pos:end="213:45"><expr pos:start="213:45" pos:end="213:45"><literal type="number" pos:start="213:45" pos:end="213:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="217:39"><expr pos:start="215:9" pos:end="217:38"><call pos:start="215:9" pos:end="217:38"><name pos:start="215:9" pos:end="215:26">memory_region_init</name><argument_list pos:start="215:27" pos:end="217:38">(<argument pos:start="215:28" pos:end="215:40"><expr pos:start="215:28" pos:end="215:40"><name pos:start="215:28" pos:end="215:40">secure_sysmem</name></expr></argument>, <argument pos:start="215:43" pos:end="215:57"><expr pos:start="215:43" pos:end="215:57"><call pos:start="215:43" pos:end="215:57"><name pos:start="215:43" pos:end="215:48">OBJECT</name><argument_list pos:start="215:49" pos:end="215:57">(<argument pos:start="215:50" pos:end="215:56"><expr pos:start="215:50" pos:end="215:56"><name pos:start="215:50" pos:end="215:56">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="215:60" pos:end="215:74"><expr pos:start="215:60" pos:end="215:74"><literal type="string" pos:start="215:60" pos:end="215:74">"secure-memory"</literal></expr></argument>,

                           <argument pos:start="217:28" pos:end="217:37"><expr pos:start="217:28" pos:end="217:37"><name pos:start="217:28" pos:end="217:37">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:74"><expr pos:start="219:9" pos:end="219:73"><call pos:start="219:9" pos:end="219:73"><name pos:start="219:9" pos:end="219:43">memory_region_add_subregion_overlap</name><argument_list pos:start="219:44" pos:end="219:73">(<argument pos:start="219:45" pos:end="219:57"><expr pos:start="219:45" pos:end="219:57"><name pos:start="219:45" pos:end="219:57">secure_sysmem</name></expr></argument>, <argument pos:start="219:60" pos:end="219:60"><expr pos:start="219:60" pos:end="219:60"><literal type="number" pos:start="219:60" pos:end="219:60">0</literal></expr></argument>, <argument pos:start="219:63" pos:end="219:68"><expr pos:start="219:63" pos:end="219:68"><name pos:start="219:63" pos:end="219:68">sysmem</name></expr></argument>, <argument pos:start="219:71" pos:end="219:72"><expr pos:start="219:71" pos:end="219:72"><operator pos:start="219:71" pos:end="219:71">-</operator><literal type="number" pos:start="219:72" pos:end="219:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:20"><expr pos:start="225:5" pos:end="225:19"><call pos:start="225:5" pos:end="225:19"><name pos:start="225:5" pos:end="225:14">create_fdt</name><argument_list pos:start="225:15" pos:end="225:19">(<argument pos:start="225:16" pos:end="225:18"><expr pos:start="225:16" pos:end="225:18"><name pos:start="225:16" pos:end="225:18">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:52"><expr pos:start="229:5" pos:end="229:51"><name pos:start="229:5" pos:end="229:6">oc</name> <operator pos:start="229:8" pos:end="229:8">=</operator> <call pos:start="229:10" pos:end="229:51"><name pos:start="229:10" pos:end="229:26">cpu_class_by_name</name><argument_list pos:start="229:27" pos:end="229:51">(<argument pos:start="229:28" pos:end="229:39"><expr pos:start="229:28" pos:end="229:39"><name pos:start="229:28" pos:end="229:39">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="229:42" pos:end="229:50"><expr pos:start="229:42" pos:end="229:50"><name pos:start="229:42" pos:end="229:50"><name pos:start="229:42" pos:end="229:47">cpustr</name><index pos:start="229:48" pos:end="229:50">[<expr pos:start="229:49" pos:end="229:49"><literal type="number" pos:start="229:49" pos:end="229:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="237:5"><if pos:start="231:5" pos:end="237:5">if <condition pos:start="231:8" pos:end="231:12">(<expr pos:start="231:9" pos:end="231:11"><operator pos:start="231:9" pos:end="231:9">!</operator><name pos:start="231:10" pos:end="231:11">oc</name></expr>)</condition> <block pos:start="231:14" pos:end="237:5">{<block_content pos:start="233:9" pos:end="235:16">

        <expr_stmt pos:start="233:9" pos:end="233:54"><expr pos:start="233:9" pos:end="233:53"><call pos:start="233:9" pos:end="233:53"><name pos:start="233:9" pos:end="233:20">error_report</name><argument_list pos:start="233:21" pos:end="233:53">(<argument pos:start="233:22" pos:end="233:52"><expr pos:start="233:22" pos:end="233:52"><literal type="string" pos:start="233:22" pos:end="233:52">"Unable to find CPU definition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:16"><expr pos:start="235:9" pos:end="235:15"><call pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:12">exit</name><argument_list pos:start="235:13" pos:end="235:15">(<argument pos:start="235:14" pos:end="235:14"><expr pos:start="235:14" pos:end="235:14"><literal type="number" pos:start="235:14" pos:end="235:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:41"><expr pos:start="239:5" pos:end="239:40"><name pos:start="239:5" pos:end="239:12">typename</name> <operator pos:start="239:14" pos:end="239:14">=</operator> <call pos:start="239:16" pos:end="239:40"><name pos:start="239:16" pos:end="239:36">object_class_get_name</name><argument_list pos:start="239:37" pos:end="239:40">(<argument pos:start="239:38" pos:end="239:39"><expr pos:start="239:38" pos:end="239:39"><name pos:start="239:38" pos:end="239:39">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:74">/* convert -smp CPU options specified by the user into global props */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:23"><expr pos:start="245:5" pos:end="245:22"><name pos:start="245:5" pos:end="245:6">cc</name> <operator pos:start="245:8" pos:end="245:8">=</operator> <call pos:start="245:10" pos:end="245:22"><name pos:start="245:10" pos:end="245:18">CPU_CLASS</name><argument_list pos:start="245:19" pos:end="245:22">(<argument pos:start="245:20" pos:end="245:21"><expr pos:start="245:20" pos:end="245:21"><name pos:start="245:20" pos:end="245:21">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:50"><expr pos:start="247:5" pos:end="247:49"><call pos:start="247:5" pos:end="247:49"><name pos:start="247:5" pos:end="247:22"><name pos:start="247:5" pos:end="247:6">cc</name><operator pos:start="247:7" pos:end="247:8">-&gt;</operator><name pos:start="247:9" pos:end="247:22">parse_features</name></name><argument_list pos:start="247:23" pos:end="247:49">(<argument pos:start="247:24" pos:end="247:31"><expr pos:start="247:24" pos:end="247:31"><name pos:start="247:24" pos:end="247:31">typename</name></expr></argument>, <argument pos:start="247:34" pos:end="247:42"><expr pos:start="247:34" pos:end="247:42"><name pos:start="247:34" pos:end="247:42"><name pos:start="247:34" pos:end="247:39">cpustr</name><index pos:start="247:40" pos:end="247:42">[<expr pos:start="247:41" pos:end="247:41"><literal type="number" pos:start="247:41" pos:end="247:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:45" pos:end="247:48"><expr pos:start="247:45" pos:end="247:48"><operator pos:start="247:45" pos:end="247:45">&amp;</operator><name pos:start="247:46" pos:end="247:48">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:23"><expr pos:start="249:5" pos:end="249:22"><call pos:start="249:5" pos:end="249:22"><name pos:start="249:5" pos:end="249:14">g_strfreev</name><argument_list pos:start="249:15" pos:end="249:22">(<argument pos:start="249:16" pos:end="249:21"><expr pos:start="249:16" pos:end="249:21"><name pos:start="249:16" pos:end="249:21">cpustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="251:5" pos:end="257:5"><if pos:start="251:5" pos:end="257:5">if <condition pos:start="251:8" pos:end="251:12">(<expr pos:start="251:9" pos:end="251:11"><name pos:start="251:9" pos:end="251:11">err</name></expr>)</condition> <block pos:start="251:14" pos:end="257:5">{<block_content pos:start="253:9" pos:end="255:16">

        <expr_stmt pos:start="253:9" pos:end="253:30"><expr pos:start="253:9" pos:end="253:29"><call pos:start="253:9" pos:end="253:29"><name pos:start="253:9" pos:end="253:24">error_report_err</name><argument_list pos:start="253:25" pos:end="253:29">(<argument pos:start="253:26" pos:end="253:28"><expr pos:start="253:26" pos:end="253:28"><name pos:start="253:26" pos:end="253:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:16"><expr pos:start="255:9" pos:end="255:15"><call pos:start="255:9" pos:end="255:15"><name pos:start="255:9" pos:end="255:12">exit</name><argument_list pos:start="255:13" pos:end="255:15">(<argument pos:start="255:14" pos:end="255:14"><expr pos:start="255:14" pos:end="255:14"><literal type="number" pos:start="255:14" pos:end="255:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="261:5" pos:end="368:5">for <control pos:start="261:9" pos:end="261:34">(<init pos:start="261:10" pos:end="261:15"><expr pos:start="261:10" pos:end="261:14"><name pos:start="261:10" pos:end="261:10">n</name> <operator pos:start="261:12" pos:end="261:12">=</operator> <literal type="number" pos:start="261:14" pos:end="261:14">0</literal></expr>;</init> <condition pos:start="261:17" pos:end="261:29"><expr pos:start="261:17" pos:end="261:28"><name pos:start="261:17" pos:end="261:17">n</name> <operator pos:start="261:19" pos:end="261:19">&lt;</operator> <name pos:start="261:21" pos:end="261:28">smp_cpus</name></expr>;</condition> <incr pos:start="261:31" pos:end="261:33"><expr pos:start="261:31" pos:end="261:33"><name pos:start="261:31" pos:end="261:31">n</name><operator pos:start="261:32" pos:end="261:33">++</operator></expr></incr>)</control> <block pos:start="261:36" pos:end="368:5">{<block_content pos:start="263:9" pos:end="365:65">

        <decl_stmt pos:start="263:9" pos:end="263:46"><decl pos:start="263:9" pos:end="263:45"><type pos:start="263:9" pos:end="263:16"><name pos:start="263:9" pos:end="263:14">Object</name> <modifier pos:start="263:16" pos:end="263:16">*</modifier></type><name pos:start="263:17" pos:end="263:22">cpuobj</name> <init pos:start="263:24" pos:end="263:45">= <expr pos:start="263:26" pos:end="263:45"><call pos:start="263:26" pos:end="263:45"><name pos:start="263:26" pos:end="263:35">object_new</name><argument_list pos:start="263:36" pos:end="263:45">(<argument pos:start="263:37" pos:end="263:44"><expr pos:start="263:37" pos:end="263:44"><name pos:start="263:37" pos:end="263:44">typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="265:9" pos:end="291:9"><if pos:start="265:9" pos:end="291:9">if <condition pos:start="265:12" pos:end="265:47">(<expr pos:start="265:13" pos:end="265:46"><operator pos:start="265:13" pos:end="265:13">!</operator><name pos:start="265:14" pos:end="265:46"><name pos:start="265:14" pos:end="265:16">vmc</name><operator pos:start="265:17" pos:end="265:18">-&gt;</operator><name pos:start="265:19" pos:end="265:46">disallow_affinity_adjustment</name></name></expr>)</condition> <block pos:start="265:49" pos:end="291:9">{<block_content pos:start="283:13" pos:end="289:57">

            <comment type="block" pos:start="267:13" pos:end="281:15">/* Adjust MPIDR like 64-bit KVM hosts, which incorporate the

             * GIC's target-list limitations. 32-bit KVM hosts currently

             * always create clusters of 4 CPUs, but that is expected to

             * change when they gain support for gicv3. When KVM is enabled

             * it will override the changes we make here, therefore our

             * purposes are to make TCG consistent (with 64-bit KVM hosts)

             * and to improve SGI efficiency.

             */</comment>

            <decl_stmt pos:start="283:13" pos:end="283:41"><decl pos:start="283:13" pos:end="283:40"><type pos:start="283:13" pos:end="283:19"><name pos:start="283:13" pos:end="283:19">uint8_t</name></type> <name pos:start="283:21" pos:end="283:24">aff1</name> <init pos:start="283:26" pos:end="283:40">= <expr pos:start="283:28" pos:end="283:40"><name pos:start="283:28" pos:end="283:28">n</name> <operator pos:start="283:30" pos:end="283:30">/</operator> <name pos:start="283:32" pos:end="283:40">clustersz</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="285:13" pos:end="285:41"><decl pos:start="285:13" pos:end="285:40"><type pos:start="285:13" pos:end="285:19"><name pos:start="285:13" pos:end="285:19">uint8_t</name></type> <name pos:start="285:21" pos:end="285:24">aff0</name> <init pos:start="285:26" pos:end="285:40">= <expr pos:start="285:28" pos:end="285:40"><name pos:start="285:28" pos:end="285:28">n</name> <operator pos:start="285:30" pos:end="285:30">%</operator> <name pos:start="285:32" pos:end="285:40">clustersz</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="287:13" pos:end="289:57"><expr pos:start="287:13" pos:end="289:56"><call pos:start="287:13" pos:end="289:56"><name pos:start="287:13" pos:end="287:35">object_property_set_int</name><argument_list pos:start="287:36" pos:end="289:56">(<argument pos:start="287:37" pos:end="287:42"><expr pos:start="287:37" pos:end="287:42"><name pos:start="287:37" pos:end="287:42">cpuobj</name></expr></argument>, <argument pos:start="287:45" pos:end="287:75"><expr pos:start="287:45" pos:end="287:75"><operator pos:start="287:45" pos:end="287:45">(</operator><name pos:start="287:46" pos:end="287:49">aff1</name> <operator pos:start="287:51" pos:end="287:52">&lt;&lt;</operator> <name pos:start="287:54" pos:end="287:67">ARM_AFF1_SHIFT</name><operator pos:start="287:68" pos:end="287:68">)</operator> <operator pos:start="287:70" pos:end="287:70">|</operator> <name pos:start="287:72" pos:end="287:75">aff0</name></expr></argument>,

                                    <argument pos:start="289:37" pos:end="289:49"><expr pos:start="289:37" pos:end="289:49"><literal type="string" pos:start="289:37" pos:end="289:49">"mp-affinity"</literal></expr></argument>, <argument pos:start="289:52" pos:end="289:55"><expr pos:start="289:52" pos:end="289:55"><name pos:start="289:52" pos:end="289:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="295:9" pos:end="299:9"><if pos:start="295:9" pos:end="299:9">if <condition pos:start="295:12" pos:end="295:25">(<expr pos:start="295:13" pos:end="295:24"><operator pos:start="295:13" pos:end="295:13">!</operator><name pos:start="295:14" pos:end="295:24"><name pos:start="295:14" pos:end="295:16">vms</name><operator pos:start="295:17" pos:end="295:18">-&gt;</operator><name pos:start="295:19" pos:end="295:24">secure</name></name></expr>)</condition> <block pos:start="295:27" pos:end="299:9">{<block_content pos:start="297:13" pos:end="297:69">

            <expr_stmt pos:start="297:13" pos:end="297:69"><expr pos:start="297:13" pos:end="297:68"><call pos:start="297:13" pos:end="297:68"><name pos:start="297:13" pos:end="297:36">object_property_set_bool</name><argument_list pos:start="297:37" pos:end="297:68">(<argument pos:start="297:38" pos:end="297:43"><expr pos:start="297:38" pos:end="297:43"><name pos:start="297:38" pos:end="297:43">cpuobj</name></expr></argument>, <argument pos:start="297:46" pos:end="297:50"><expr pos:start="297:46" pos:end="297:50"><name pos:start="297:46" pos:end="297:50">false</name></expr></argument>, <argument pos:start="297:53" pos:end="297:61"><expr pos:start="297:53" pos:end="297:61"><literal type="string" pos:start="297:53" pos:end="297:61">"has_el3"</literal></expr></argument>, <argument pos:start="297:64" pos:end="297:67"><expr pos:start="297:64" pos:end="297:67"><name pos:start="297:64" pos:end="297:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="303:9" pos:end="307:9"><if pos:start="303:9" pos:end="307:9">if <condition pos:start="303:12" pos:end="303:72">(<expr pos:start="303:13" pos:end="303:71"><operator pos:start="303:13" pos:end="303:13">!</operator><name pos:start="303:14" pos:end="303:22"><name pos:start="303:14" pos:end="303:16">vms</name><operator pos:start="303:17" pos:end="303:18">-&gt;</operator><name pos:start="303:19" pos:end="303:22">virt</name></name> <operator pos:start="303:24" pos:end="303:25">&amp;&amp;</operator> <call pos:start="303:27" pos:end="303:71"><name pos:start="303:27" pos:end="303:46">object_property_find</name><argument_list pos:start="303:47" pos:end="303:71">(<argument pos:start="303:48" pos:end="303:53"><expr pos:start="303:48" pos:end="303:53"><name pos:start="303:48" pos:end="303:53">cpuobj</name></expr></argument>, <argument pos:start="303:56" pos:end="303:64"><expr pos:start="303:56" pos:end="303:64"><literal type="string" pos:start="303:56" pos:end="303:64">"has_el2"</literal></expr></argument>, <argument pos:start="303:67" pos:end="303:70"><expr pos:start="303:67" pos:end="303:70"><name pos:start="303:67" pos:end="303:70">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:74" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:69">

            <expr_stmt pos:start="305:13" pos:end="305:69"><expr pos:start="305:13" pos:end="305:68"><call pos:start="305:13" pos:end="305:68"><name pos:start="305:13" pos:end="305:36">object_property_set_bool</name><argument_list pos:start="305:37" pos:end="305:68">(<argument pos:start="305:38" pos:end="305:43"><expr pos:start="305:38" pos:end="305:43"><name pos:start="305:38" pos:end="305:43">cpuobj</name></expr></argument>, <argument pos:start="305:46" pos:end="305:50"><expr pos:start="305:46" pos:end="305:50"><name pos:start="305:46" pos:end="305:50">false</name></expr></argument>, <argument pos:start="305:53" pos:end="305:61"><expr pos:start="305:53" pos:end="305:61"><literal type="string" pos:start="305:53" pos:end="305:61">"has_el2"</literal></expr></argument>, <argument pos:start="305:64" pos:end="305:67"><expr pos:start="305:64" pos:end="305:67"><name pos:start="305:64" pos:end="305:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="311:9" pos:end="329:9"><if pos:start="311:9" pos:end="329:9">if <condition pos:start="311:12" pos:end="311:60">(<expr pos:start="311:13" pos:end="311:59"><name pos:start="311:13" pos:end="311:29"><name pos:start="311:13" pos:end="311:15">vms</name><operator pos:start="311:16" pos:end="311:17">-&gt;</operator><name pos:start="311:18" pos:end="311:29">psci_conduit</name></name> <operator pos:start="311:31" pos:end="311:32">!=</operator> <name pos:start="311:34" pos:end="311:59">QEMU_PSCI_CONDUIT_DISABLED</name></expr>)</condition> <block pos:start="311:62" pos:end="329:9">{<block_content pos:start="313:13" pos:end="327:13">

            <expr_stmt pos:start="313:13" pos:end="315:58"><expr pos:start="313:13" pos:end="315:57"><call pos:start="313:13" pos:end="315:57"><name pos:start="313:13" pos:end="313:35">object_property_set_int</name><argument_list pos:start="313:36" pos:end="315:57">(<argument pos:start="313:37" pos:end="313:42"><expr pos:start="313:37" pos:end="313:42"><name pos:start="313:37" pos:end="313:42">cpuobj</name></expr></argument>, <argument pos:start="313:45" pos:end="313:61"><expr pos:start="313:45" pos:end="313:61"><name pos:start="313:45" pos:end="313:61"><name pos:start="313:45" pos:end="313:47">vms</name><operator pos:start="313:48" pos:end="313:49">-&gt;</operator><name pos:start="313:50" pos:end="313:61">psci_conduit</name></name></expr></argument>,

                                    <argument pos:start="315:37" pos:end="315:50"><expr pos:start="315:37" pos:end="315:50"><literal type="string" pos:start="315:37" pos:end="315:50">"psci-conduit"</literal></expr></argument>, <argument pos:start="315:53" pos:end="315:56"><expr pos:start="315:53" pos:end="315:56"><name pos:start="315:53" pos:end="315:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="319:13" pos:end="319:65">/* Secondary CPUs start in PSCI powered-down state */</comment>

            <if_stmt pos:start="321:13" pos:end="327:13"><if pos:start="321:13" pos:end="327:13">if <condition pos:start="321:16" pos:end="321:22">(<expr pos:start="321:17" pos:end="321:21"><name pos:start="321:17" pos:end="321:17">n</name> <operator pos:start="321:19" pos:end="321:19">&gt;</operator> <literal type="number" pos:start="321:21" pos:end="321:21">0</literal></expr>)</condition> <block pos:start="321:24" pos:end="327:13">{<block_content pos:start="323:17" pos:end="325:68">

                <expr_stmt pos:start="323:17" pos:end="325:68"><expr pos:start="323:17" pos:end="325:67"><call pos:start="323:17" pos:end="325:67"><name pos:start="323:17" pos:end="323:40">object_property_set_bool</name><argument_list pos:start="323:41" pos:end="325:67">(<argument pos:start="323:42" pos:end="323:47"><expr pos:start="323:42" pos:end="323:47"><name pos:start="323:42" pos:end="323:47">cpuobj</name></expr></argument>, <argument pos:start="323:50" pos:end="323:53"><expr pos:start="323:50" pos:end="323:53"><name pos:start="323:50" pos:end="323:53">true</name></expr></argument>,

                                         <argument pos:start="325:42" pos:end="325:60"><expr pos:start="325:42" pos:end="325:60"><literal type="string" pos:start="325:42" pos:end="325:60">"start-powered-off"</literal></expr></argument>, <argument pos:start="325:63" pos:end="325:66"><expr pos:start="325:63" pos:end="325:66"><name pos:start="325:63" pos:end="325:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="333:9" pos:end="337:9"><if pos:start="333:9" pos:end="337:9">if <condition pos:start="333:12" pos:end="333:69">(<expr pos:start="333:13" pos:end="333:68"><name pos:start="333:13" pos:end="333:23"><name pos:start="333:13" pos:end="333:15">vmc</name><operator pos:start="333:16" pos:end="333:17">-&gt;</operator><name pos:start="333:18" pos:end="333:23">no_pmu</name></name> <operator pos:start="333:25" pos:end="333:26">&amp;&amp;</operator> <call pos:start="333:28" pos:end="333:68"><name pos:start="333:28" pos:end="333:47">object_property_find</name><argument_list pos:start="333:48" pos:end="333:68">(<argument pos:start="333:49" pos:end="333:54"><expr pos:start="333:49" pos:end="333:54"><name pos:start="333:49" pos:end="333:54">cpuobj</name></expr></argument>, <argument pos:start="333:57" pos:end="333:61"><expr pos:start="333:57" pos:end="333:61"><literal type="string" pos:start="333:57" pos:end="333:61">"pmu"</literal></expr></argument>, <argument pos:start="333:64" pos:end="333:67"><expr pos:start="333:64" pos:end="333:67"><name pos:start="333:64" pos:end="333:67">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:71" pos:end="337:9">{<block_content pos:start="335:13" pos:end="335:65">

            <expr_stmt pos:start="335:13" pos:end="335:65"><expr pos:start="335:13" pos:end="335:64"><call pos:start="335:13" pos:end="335:64"><name pos:start="335:13" pos:end="335:36">object_property_set_bool</name><argument_list pos:start="335:37" pos:end="335:64">(<argument pos:start="335:38" pos:end="335:43"><expr pos:start="335:38" pos:end="335:43"><name pos:start="335:38" pos:end="335:43">cpuobj</name></expr></argument>, <argument pos:start="335:46" pos:end="335:50"><expr pos:start="335:46" pos:end="335:50"><name pos:start="335:46" pos:end="335:50">false</name></expr></argument>, <argument pos:start="335:53" pos:end="335:57"><expr pos:start="335:53" pos:end="335:57"><literal type="string" pos:start="335:53" pos:end="335:57">"pmu"</literal></expr></argument>, <argument pos:start="335:60" pos:end="335:63"><expr pos:start="335:60" pos:end="335:63"><name pos:start="335:60" pos:end="335:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="341:9" pos:end="347:9"><if pos:start="341:9" pos:end="347:9">if <condition pos:start="341:12" pos:end="341:61">(<expr pos:start="341:13" pos:end="341:60"><call pos:start="341:13" pos:end="341:60"><name pos:start="341:13" pos:end="341:32">object_property_find</name><argument_list pos:start="341:33" pos:end="341:60">(<argument pos:start="341:34" pos:end="341:39"><expr pos:start="341:34" pos:end="341:39"><name pos:start="341:34" pos:end="341:39">cpuobj</name></expr></argument>, <argument pos:start="341:42" pos:end="341:53"><expr pos:start="341:42" pos:end="341:53"><literal type="string" pos:start="341:42" pos:end="341:53">"reset-cbar"</literal></expr></argument>, <argument pos:start="341:56" pos:end="341:59"><expr pos:start="341:56" pos:end="341:59"><name pos:start="341:56" pos:end="341:59">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="341:63" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:64">

            <expr_stmt pos:start="343:13" pos:end="345:64"><expr pos:start="343:13" pos:end="345:63"><call pos:start="343:13" pos:end="345:63"><name pos:start="343:13" pos:end="343:35">object_property_set_int</name><argument_list pos:start="343:36" pos:end="345:63">(<argument pos:start="343:37" pos:end="343:42"><expr pos:start="343:37" pos:end="343:42"><name pos:start="343:37" pos:end="343:42">cpuobj</name></expr></argument>, <argument pos:start="343:45" pos:end="343:77"><expr pos:start="343:45" pos:end="343:77"><name pos:start="343:45" pos:end="343:72"><name pos:start="343:45" pos:end="343:47">vms</name><operator pos:start="343:48" pos:end="343:49">-&gt;</operator><name pos:start="343:50" pos:end="343:55">memmap</name><index pos:start="343:56" pos:end="343:72">[<expr pos:start="343:57" pos:end="343:71"><name pos:start="343:57" pos:end="343:71">VIRT_CPUPERIPHS</name></expr>]</index></name><operator pos:start="343:73" pos:end="343:73">.</operator><name pos:start="343:74" pos:end="343:77">base</name></expr></argument>,

                                    <argument pos:start="345:37" pos:end="345:48"><expr pos:start="345:37" pos:end="345:48"><literal type="string" pos:start="345:37" pos:end="345:48">"reset-cbar"</literal></expr></argument>, <argument pos:start="345:51" pos:end="345:62"><expr pos:start="345:51" pos:end="345:62"><operator pos:start="345:51" pos:end="345:51">&amp;</operator><name pos:start="345:52" pos:end="345:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="351:9" pos:end="353:47"><expr pos:start="351:9" pos:end="353:46"><call pos:start="351:9" pos:end="353:46"><name pos:start="351:9" pos:end="351:32">object_property_set_link</name><argument_list pos:start="351:33" pos:end="353:46">(<argument pos:start="351:34" pos:end="351:39"><expr pos:start="351:34" pos:end="351:39"><name pos:start="351:34" pos:end="351:39">cpuobj</name></expr></argument>, <argument pos:start="351:42" pos:end="351:55"><expr pos:start="351:42" pos:end="351:55"><call pos:start="351:42" pos:end="351:55"><name pos:start="351:42" pos:end="351:47">OBJECT</name><argument_list pos:start="351:48" pos:end="351:55">(<argument pos:start="351:49" pos:end="351:54"><expr pos:start="351:49" pos:end="351:54"><name pos:start="351:49" pos:end="351:54">sysmem</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="351:58" pos:end="351:65"><expr pos:start="351:58" pos:end="351:65"><literal type="string" pos:start="351:58" pos:end="351:65">"memory"</literal></expr></argument>,

                                 <argument pos:start="353:34" pos:end="353:45"><expr pos:start="353:34" pos:end="353:45"><operator pos:start="353:34" pos:end="353:34">&amp;</operator><name pos:start="353:35" pos:end="353:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="355:9" pos:end="361:9"><if pos:start="355:9" pos:end="361:9">if <condition pos:start="355:12" pos:end="355:24">(<expr pos:start="355:13" pos:end="355:23"><name pos:start="355:13" pos:end="355:23"><name pos:start="355:13" pos:end="355:15">vms</name><operator pos:start="355:16" pos:end="355:17">-&gt;</operator><name pos:start="355:18" pos:end="355:23">secure</name></name></expr>)</condition> <block pos:start="355:26" pos:end="361:9">{<block_content pos:start="357:13" pos:end="359:68">

            <expr_stmt pos:start="357:13" pos:end="359:68"><expr pos:start="357:13" pos:end="359:67"><call pos:start="357:13" pos:end="359:67"><name pos:start="357:13" pos:end="357:36">object_property_set_link</name><argument_list pos:start="357:37" pos:end="359:67">(<argument pos:start="357:38" pos:end="357:43"><expr pos:start="357:38" pos:end="357:43"><name pos:start="357:38" pos:end="357:43">cpuobj</name></expr></argument>, <argument pos:start="357:46" pos:end="357:66"><expr pos:start="357:46" pos:end="357:66"><call pos:start="357:46" pos:end="357:66"><name pos:start="357:46" pos:end="357:51">OBJECT</name><argument_list pos:start="357:52" pos:end="357:66">(<argument pos:start="357:53" pos:end="357:65"><expr pos:start="357:53" pos:end="357:65"><name pos:start="357:53" pos:end="357:65">secure_sysmem</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="359:38" pos:end="359:52"><expr pos:start="359:38" pos:end="359:52"><literal type="string" pos:start="359:38" pos:end="359:52">"secure-memory"</literal></expr></argument>, <argument pos:start="359:55" pos:end="359:66"><expr pos:start="359:55" pos:end="359:66"><operator pos:start="359:55" pos:end="359:55">&amp;</operator><name pos:start="359:56" pos:end="359:66">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="365:9" pos:end="365:65"><expr pos:start="365:9" pos:end="365:64"><call pos:start="365:9" pos:end="365:64"><name pos:start="365:9" pos:end="365:32">object_property_set_bool</name><argument_list pos:start="365:33" pos:end="365:64">(<argument pos:start="365:34" pos:end="365:39"><expr pos:start="365:34" pos:end="365:39"><name pos:start="365:34" pos:end="365:39">cpuobj</name></expr></argument>, <argument pos:start="365:42" pos:end="365:45"><expr pos:start="365:42" pos:end="365:45"><name pos:start="365:42" pos:end="365:45">true</name></expr></argument>, <argument pos:start="365:48" pos:end="365:57"><expr pos:start="365:48" pos:end="365:57"><literal type="string" pos:start="365:48" pos:end="365:57">"realized"</literal></expr></argument>, <argument pos:start="365:60" pos:end="365:63"><expr pos:start="365:60" pos:end="365:63"><name pos:start="365:60" pos:end="365:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></for>

    <expr_stmt pos:start="370:5" pos:end="370:29"><expr pos:start="370:5" pos:end="370:28"><call pos:start="370:5" pos:end="370:28"><name pos:start="370:5" pos:end="370:23">fdt_add_timer_nodes</name><argument_list pos:start="370:24" pos:end="370:28">(<argument pos:start="370:25" pos:end="370:27"><expr pos:start="370:25" pos:end="370:27"><name pos:start="370:25" pos:end="370:27">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="372:5" pos:end="372:27"><expr pos:start="372:5" pos:end="372:26"><call pos:start="372:5" pos:end="372:26"><name pos:start="372:5" pos:end="372:21">fdt_add_cpu_nodes</name><argument_list pos:start="372:22" pos:end="372:26">(<argument pos:start="372:23" pos:end="372:25"><expr pos:start="372:23" pos:end="372:25"><name pos:start="372:23" pos:end="372:25">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="374:5" pos:end="374:27"><expr pos:start="374:5" pos:end="374:26"><call pos:start="374:5" pos:end="374:26"><name pos:start="374:5" pos:end="374:21">fdt_add_psci_node</name><argument_list pos:start="374:22" pos:end="374:26">(<argument pos:start="374:23" pos:end="374:25"><expr pos:start="374:23" pos:end="374:25"><name pos:start="374:23" pos:end="374:25">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="378:5" pos:end="380:60"><expr pos:start="378:5" pos:end="380:59"><call pos:start="378:5" pos:end="380:59"><name pos:start="378:5" pos:end="378:40">memory_region_allocate_system_memory</name><argument_list pos:start="378:41" pos:end="380:59">(<argument pos:start="378:42" pos:end="378:44"><expr pos:start="378:42" pos:end="378:44"><name pos:start="378:42" pos:end="378:44">ram</name></expr></argument>, <argument pos:start="378:47" pos:end="378:50"><expr pos:start="378:47" pos:end="378:50"><name pos:start="378:47" pos:end="378:50">NULL</name></expr></argument>, <argument pos:start="378:53" pos:end="378:67"><expr pos:start="378:53" pos:end="378:67"><literal type="string" pos:start="378:53" pos:end="378:67">"mach-virt.ram"</literal></expr></argument>,

                                         <argument pos:start="380:42" pos:end="380:58"><expr pos:start="380:42" pos:end="380:58"><name pos:start="380:42" pos:end="380:58"><name pos:start="380:42" pos:end="380:48">machine</name><operator pos:start="380:49" pos:end="380:50">-&gt;</operator><name pos:start="380:51" pos:end="380:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="382:5" pos:end="382:73"><expr pos:start="382:5" pos:end="382:72"><call pos:start="382:5" pos:end="382:72"><name pos:start="382:5" pos:end="382:31">memory_region_add_subregion</name><argument_list pos:start="382:32" pos:end="382:72">(<argument pos:start="382:33" pos:end="382:38"><expr pos:start="382:33" pos:end="382:38"><name pos:start="382:33" pos:end="382:38">sysmem</name></expr></argument>, <argument pos:start="382:41" pos:end="382:66"><expr pos:start="382:41" pos:end="382:66"><name pos:start="382:41" pos:end="382:61"><name pos:start="382:41" pos:end="382:43">vms</name><operator pos:start="382:44" pos:end="382:45">-&gt;</operator><name pos:start="382:46" pos:end="382:51">memmap</name><index pos:start="382:52" pos:end="382:61">[<expr pos:start="382:53" pos:end="382:60"><name pos:start="382:53" pos:end="382:60">VIRT_MEM</name></expr>]</index></name><operator pos:start="382:62" pos:end="382:62">.</operator><name pos:start="382:63" pos:end="382:66">base</name></expr></argument>, <argument pos:start="382:69" pos:end="382:71"><expr pos:start="382:69" pos:end="382:71"><name pos:start="382:69" pos:end="382:71">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="386:5" pos:end="386:70"><expr pos:start="386:5" pos:end="386:69"><call pos:start="386:5" pos:end="386:69"><name pos:start="386:5" pos:end="386:16">create_flash</name><argument_list pos:start="386:17" pos:end="386:69">(<argument pos:start="386:18" pos:end="386:20"><expr pos:start="386:18" pos:end="386:20"><name pos:start="386:18" pos:end="386:20">vms</name></expr></argument>, <argument pos:start="386:23" pos:end="386:28"><expr pos:start="386:23" pos:end="386:28"><name pos:start="386:23" pos:end="386:28">sysmem</name></expr></argument>, <argument pos:start="386:31" pos:end="386:68"><expr pos:start="386:31" pos:end="386:68"><ternary pos:start="386:31" pos:end="386:68"><condition pos:start="386:31" pos:end="386:45"><expr pos:start="386:31" pos:end="386:43"><name pos:start="386:31" pos:end="386:43">secure_sysmem</name></expr> ?</condition><then pos:start="386:47" pos:end="386:59"> <expr pos:start="386:47" pos:end="386:59"><name pos:start="386:47" pos:end="386:59">secure_sysmem</name></expr> </then><else pos:start="386:61" pos:end="386:68">: <expr pos:start="386:63" pos:end="386:68"><name pos:start="386:63" pos:end="386:68">sysmem</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="390:5" pos:end="390:25"><expr pos:start="390:5" pos:end="390:24"><call pos:start="390:5" pos:end="390:24"><name pos:start="390:5" pos:end="390:14">create_gic</name><argument_list pos:start="390:15" pos:end="390:24">(<argument pos:start="390:16" pos:end="390:18"><expr pos:start="390:16" pos:end="390:18"><name pos:start="390:16" pos:end="390:18">vms</name></expr></argument>, <argument pos:start="390:21" pos:end="390:23"><expr pos:start="390:21" pos:end="390:23"><name pos:start="390:21" pos:end="390:23">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="394:5" pos:end="394:27"><expr pos:start="394:5" pos:end="394:26"><call pos:start="394:5" pos:end="394:26"><name pos:start="394:5" pos:end="394:21">fdt_add_pmu_nodes</name><argument_list pos:start="394:22" pos:end="394:26">(<argument pos:start="394:23" pos:end="394:25"><expr pos:start="394:23" pos:end="394:25"><name pos:start="394:23" pos:end="394:25">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="398:5" pos:end="398:60"><expr pos:start="398:5" pos:end="398:59"><call pos:start="398:5" pos:end="398:59"><name pos:start="398:5" pos:end="398:15">create_uart</name><argument_list pos:start="398:16" pos:end="398:59">(<argument pos:start="398:17" pos:end="398:19"><expr pos:start="398:17" pos:end="398:19"><name pos:start="398:17" pos:end="398:19">vms</name></expr></argument>, <argument pos:start="398:22" pos:end="398:24"><expr pos:start="398:22" pos:end="398:24"><name pos:start="398:22" pos:end="398:24">pic</name></expr></argument>, <argument pos:start="398:27" pos:end="398:35"><expr pos:start="398:27" pos:end="398:35"><name pos:start="398:27" pos:end="398:35">VIRT_UART</name></expr></argument>, <argument pos:start="398:38" pos:end="398:43"><expr pos:start="398:38" pos:end="398:43"><name pos:start="398:38" pos:end="398:43">sysmem</name></expr></argument>, <argument pos:start="398:46" pos:end="398:58"><expr pos:start="398:46" pos:end="398:58"><name pos:start="398:46" pos:end="398:58"><name pos:start="398:46" pos:end="398:55">serial_hds</name><index pos:start="398:56" pos:end="398:58">[<expr pos:start="398:57" pos:end="398:57"><literal type="number" pos:start="398:57" pos:end="398:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="402:5" pos:end="408:5"><if pos:start="402:5" pos:end="408:5">if <condition pos:start="402:8" pos:end="402:20">(<expr pos:start="402:9" pos:end="402:19"><name pos:start="402:9" pos:end="402:19"><name pos:start="402:9" pos:end="402:11">vms</name><operator pos:start="402:12" pos:end="402:13">-&gt;</operator><name pos:start="402:14" pos:end="402:19">secure</name></name></expr>)</condition> <block pos:start="402:22" pos:end="408:5">{<block_content pos:start="404:9" pos:end="406:78">

        <expr_stmt pos:start="404:9" pos:end="404:46"><expr pos:start="404:9" pos:end="404:45"><call pos:start="404:9" pos:end="404:45"><name pos:start="404:9" pos:end="404:25">create_secure_ram</name><argument_list pos:start="404:26" pos:end="404:45">(<argument pos:start="404:27" pos:end="404:29"><expr pos:start="404:27" pos:end="404:29"><name pos:start="404:27" pos:end="404:29">vms</name></expr></argument>, <argument pos:start="404:32" pos:end="404:44"><expr pos:start="404:32" pos:end="404:44"><name pos:start="404:32" pos:end="404:44">secure_sysmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="406:9" pos:end="406:78"><expr pos:start="406:9" pos:end="406:77"><call pos:start="406:9" pos:end="406:77"><name pos:start="406:9" pos:end="406:19">create_uart</name><argument_list pos:start="406:20" pos:end="406:77">(<argument pos:start="406:21" pos:end="406:23"><expr pos:start="406:21" pos:end="406:23"><name pos:start="406:21" pos:end="406:23">vms</name></expr></argument>, <argument pos:start="406:26" pos:end="406:28"><expr pos:start="406:26" pos:end="406:28"><name pos:start="406:26" pos:end="406:28">pic</name></expr></argument>, <argument pos:start="406:31" pos:end="406:46"><expr pos:start="406:31" pos:end="406:46"><name pos:start="406:31" pos:end="406:46">VIRT_SECURE_UART</name></expr></argument>, <argument pos:start="406:49" pos:end="406:61"><expr pos:start="406:49" pos:end="406:61"><name pos:start="406:49" pos:end="406:61">secure_sysmem</name></expr></argument>, <argument pos:start="406:64" pos:end="406:76"><expr pos:start="406:64" pos:end="406:76"><name pos:start="406:64" pos:end="406:76"><name pos:start="406:64" pos:end="406:73">serial_hds</name><index pos:start="406:74" pos:end="406:76">[<expr pos:start="406:75" pos:end="406:75"><literal type="number" pos:start="406:75" pos:end="406:75">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="412:5" pos:end="412:25"><expr pos:start="412:5" pos:end="412:24"><call pos:start="412:5" pos:end="412:24"><name pos:start="412:5" pos:end="412:14">create_rtc</name><argument_list pos:start="412:15" pos:end="412:24">(<argument pos:start="412:16" pos:end="412:18"><expr pos:start="412:16" pos:end="412:18"><name pos:start="412:16" pos:end="412:18">vms</name></expr></argument>, <argument pos:start="412:21" pos:end="412:23"><expr pos:start="412:21" pos:end="412:23"><name pos:start="412:21" pos:end="412:23">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="416:5" pos:end="416:26"><expr pos:start="416:5" pos:end="416:25"><call pos:start="416:5" pos:end="416:25"><name pos:start="416:5" pos:end="416:15">create_pcie</name><argument_list pos:start="416:16" pos:end="416:25">(<argument pos:start="416:17" pos:end="416:19"><expr pos:start="416:17" pos:end="416:19"><name pos:start="416:17" pos:end="416:19">vms</name></expr></argument>, <argument pos:start="416:22" pos:end="416:24"><expr pos:start="416:22" pos:end="416:24"><name pos:start="416:22" pos:end="416:24">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="420:5" pos:end="420:26"><expr pos:start="420:5" pos:end="420:25"><call pos:start="420:5" pos:end="420:25"><name pos:start="420:5" pos:end="420:15">create_gpio</name><argument_list pos:start="420:16" pos:end="420:25">(<argument pos:start="420:17" pos:end="420:19"><expr pos:start="420:17" pos:end="420:19"><name pos:start="420:17" pos:end="420:19">vms</name></expr></argument>, <argument pos:start="420:22" pos:end="420:24"><expr pos:start="420:22" pos:end="420:24"><name pos:start="420:22" pos:end="420:24">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="424:5" pos:end="430:7">/* Create mmio transports, so the user can create virtio backends

     * (which will be automatically plugged in to the transports). If

     * no backend is created the transport will just sit harmlessly idle.

     */</comment>

    <expr_stmt pos:start="432:5" pos:end="432:36"><expr pos:start="432:5" pos:end="432:35"><call pos:start="432:5" pos:end="432:35"><name pos:start="432:5" pos:end="432:25">create_virtio_devices</name><argument_list pos:start="432:26" pos:end="432:35">(<argument pos:start="432:27" pos:end="432:29"><expr pos:start="432:27" pos:end="432:29"><name pos:start="432:27" pos:end="432:29">vms</name></expr></argument>, <argument pos:start="432:32" pos:end="432:34"><expr pos:start="432:32" pos:end="432:34"><name pos:start="432:32" pos:end="432:34">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="436:5" pos:end="436:60"><expr pos:start="436:5" pos:end="436:59"><name pos:start="436:5" pos:end="436:15"><name pos:start="436:5" pos:end="436:7">vms</name><operator pos:start="436:8" pos:end="436:9">-&gt;</operator><name pos:start="436:10" pos:end="436:15">fw_cfg</name></name> <operator pos:start="436:17" pos:end="436:17">=</operator> <call pos:start="436:19" pos:end="436:59"><name pos:start="436:19" pos:end="436:31">create_fw_cfg</name><argument_list pos:start="436:32" pos:end="436:59">(<argument pos:start="436:33" pos:end="436:35"><expr pos:start="436:33" pos:end="436:35"><name pos:start="436:33" pos:end="436:35">vms</name></expr></argument>, <argument pos:start="436:38" pos:end="436:58"><expr pos:start="436:38" pos:end="436:58"><operator pos:start="436:38" pos:end="436:38">&amp;</operator><name pos:start="436:39" pos:end="436:58">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="438:5" pos:end="438:28"><expr pos:start="438:5" pos:end="438:27"><call pos:start="438:5" pos:end="438:27"><name pos:start="438:5" pos:end="438:14">rom_set_fw</name><argument_list pos:start="438:15" pos:end="438:27">(<argument pos:start="438:16" pos:end="438:26"><expr pos:start="438:16" pos:end="438:26"><name pos:start="438:16" pos:end="438:26"><name pos:start="438:16" pos:end="438:18">vms</name><operator pos:start="438:19" pos:end="438:20">-&gt;</operator><name pos:start="438:21" pos:end="438:26">fw_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="442:5" pos:end="442:49"><expr pos:start="442:5" pos:end="442:48"><name pos:start="442:5" pos:end="442:28"><name pos:start="442:5" pos:end="442:7">vms</name><operator pos:start="442:8" pos:end="442:9">-&gt;</operator><name pos:start="442:10" pos:end="442:21">machine_done</name><operator pos:start="442:22" pos:end="442:22">.</operator><name pos:start="442:23" pos:end="442:28">notify</name></name> <operator pos:start="442:30" pos:end="442:30">=</operator> <name pos:start="442:32" pos:end="442:48">virt_machine_done</name></expr>;</expr_stmt>

    <expr_stmt pos:start="444:5" pos:end="444:60"><expr pos:start="444:5" pos:end="444:59"><call pos:start="444:5" pos:end="444:59"><name pos:start="444:5" pos:end="444:39">qemu_add_machine_init_done_notifier</name><argument_list pos:start="444:40" pos:end="444:59">(<argument pos:start="444:41" pos:end="444:58"><expr pos:start="444:41" pos:end="444:58"><operator pos:start="444:41" pos:end="444:41">&amp;</operator><name pos:start="444:42" pos:end="444:58"><name pos:start="444:42" pos:end="444:44">vms</name><operator pos:start="444:45" pos:end="444:46">-&gt;</operator><name pos:start="444:47" pos:end="444:58">machine_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="448:5" pos:end="448:47"><expr pos:start="448:5" pos:end="448:46"><name pos:start="448:5" pos:end="448:26"><name pos:start="448:5" pos:end="448:7">vms</name><operator pos:start="448:8" pos:end="448:9">-&gt;</operator><name pos:start="448:10" pos:end="448:17">bootinfo</name><operator pos:start="448:18" pos:end="448:18">.</operator><name pos:start="448:19" pos:end="448:26">ram_size</name></name> <operator pos:start="448:28" pos:end="448:28">=</operator> <name pos:start="448:30" pos:end="448:46"><name pos:start="448:30" pos:end="448:36">machine</name><operator pos:start="448:37" pos:end="448:38">-&gt;</operator><name pos:start="448:39" pos:end="448:46">ram_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="450:5" pos:end="450:61"><expr pos:start="450:5" pos:end="450:60"><name pos:start="450:5" pos:end="450:33"><name pos:start="450:5" pos:end="450:7">vms</name><operator pos:start="450:8" pos:end="450:9">-&gt;</operator><name pos:start="450:10" pos:end="450:17">bootinfo</name><operator pos:start="450:18" pos:end="450:18">.</operator><name pos:start="450:19" pos:end="450:33">kernel_filename</name></name> <operator pos:start="450:35" pos:end="450:35">=</operator> <name pos:start="450:37" pos:end="450:60"><name pos:start="450:37" pos:end="450:43">machine</name><operator pos:start="450:44" pos:end="450:45">-&gt;</operator><name pos:start="450:46" pos:end="450:60">kernel_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="452:5" pos:end="452:59"><expr pos:start="452:5" pos:end="452:58"><name pos:start="452:5" pos:end="452:32"><name pos:start="452:5" pos:end="452:7">vms</name><operator pos:start="452:8" pos:end="452:9">-&gt;</operator><name pos:start="452:10" pos:end="452:17">bootinfo</name><operator pos:start="452:18" pos:end="452:18">.</operator><name pos:start="452:19" pos:end="452:32">kernel_cmdline</name></name> <operator pos:start="452:34" pos:end="452:34">=</operator> <name pos:start="452:36" pos:end="452:58"><name pos:start="452:36" pos:end="452:42">machine</name><operator pos:start="452:43" pos:end="452:44">-&gt;</operator><name pos:start="452:45" pos:end="452:58">kernel_cmdline</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="454:5" pos:end="454:61"><expr pos:start="454:5" pos:end="454:60"><name pos:start="454:5" pos:end="454:33"><name pos:start="454:5" pos:end="454:7">vms</name><operator pos:start="454:8" pos:end="454:9">-&gt;</operator><name pos:start="454:10" pos:end="454:17">bootinfo</name><operator pos:start="454:18" pos:end="454:18">.</operator><name pos:start="454:19" pos:end="454:33">initrd_filename</name></name> <operator pos:start="454:35" pos:end="454:35">=</operator> <name pos:start="454:37" pos:end="454:60"><name pos:start="454:37" pos:end="454:43">machine</name><operator pos:start="454:44" pos:end="454:45">-&gt;</operator><name pos:start="454:46" pos:end="454:60">initrd_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="456:5" pos:end="456:37"><expr pos:start="456:5" pos:end="456:36"><name pos:start="456:5" pos:end="456:25"><name pos:start="456:5" pos:end="456:7">vms</name><operator pos:start="456:8" pos:end="456:9">-&gt;</operator><name pos:start="456:10" pos:end="456:17">bootinfo</name><operator pos:start="456:18" pos:end="456:18">.</operator><name pos:start="456:19" pos:end="456:25">nb_cpus</name></name> <operator pos:start="456:27" pos:end="456:27">=</operator> <name pos:start="456:29" pos:end="456:36">smp_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="458:5" pos:end="458:32"><expr pos:start="458:5" pos:end="458:31"><name pos:start="458:5" pos:end="458:26"><name pos:start="458:5" pos:end="458:7">vms</name><operator pos:start="458:8" pos:end="458:9">-&gt;</operator><name pos:start="458:10" pos:end="458:17">bootinfo</name><operator pos:start="458:18" pos:end="458:18">.</operator><name pos:start="458:19" pos:end="458:26">board_id</name></name> <operator pos:start="458:28" pos:end="458:28">=</operator> <operator pos:start="458:30" pos:end="458:30">-</operator><literal type="number" pos:start="458:31" pos:end="458:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="460:5" pos:end="460:60"><expr pos:start="460:5" pos:end="460:59"><name pos:start="460:5" pos:end="460:30"><name pos:start="460:5" pos:end="460:7">vms</name><operator pos:start="460:8" pos:end="460:9">-&gt;</operator><name pos:start="460:10" pos:end="460:17">bootinfo</name><operator pos:start="460:18" pos:end="460:18">.</operator><name pos:start="460:19" pos:end="460:30">loader_start</name></name> <operator pos:start="460:32" pos:end="460:32">=</operator> <name pos:start="460:34" pos:end="460:54"><name pos:start="460:34" pos:end="460:36">vms</name><operator pos:start="460:37" pos:end="460:38">-&gt;</operator><name pos:start="460:39" pos:end="460:44">memmap</name><index pos:start="460:45" pos:end="460:54">[<expr pos:start="460:46" pos:end="460:53"><name pos:start="460:46" pos:end="460:53">VIRT_MEM</name></expr>]</index></name><operator pos:start="460:55" pos:end="460:55">.</operator><name pos:start="460:56" pos:end="460:59">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="462:5" pos:end="462:41"><expr pos:start="462:5" pos:end="462:40"><name pos:start="462:5" pos:end="462:25"><name pos:start="462:5" pos:end="462:7">vms</name><operator pos:start="462:8" pos:end="462:9">-&gt;</operator><name pos:start="462:10" pos:end="462:17">bootinfo</name><operator pos:start="462:18" pos:end="462:18">.</operator><name pos:start="462:19" pos:end="462:25">get_dtb</name></name> <operator pos:start="462:27" pos:end="462:27">=</operator> <name pos:start="462:29" pos:end="462:40">machvirt_dtb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="464:5" pos:end="464:52"><expr pos:start="464:5" pos:end="464:51"><name pos:start="464:5" pos:end="464:33"><name pos:start="464:5" pos:end="464:7">vms</name><operator pos:start="464:8" pos:end="464:9">-&gt;</operator><name pos:start="464:10" pos:end="464:17">bootinfo</name><operator pos:start="464:18" pos:end="464:18">.</operator><name pos:start="464:19" pos:end="464:33">firmware_loaded</name></name> <operator pos:start="464:35" pos:end="464:35">=</operator> <name pos:start="464:37" pos:end="464:51">firmware_loaded</name></expr>;</expr_stmt>

    <expr_stmt pos:start="466:5" pos:end="466:56"><expr pos:start="466:5" pos:end="466:55"><call pos:start="466:5" pos:end="466:55"><name pos:start="466:5" pos:end="466:19">arm_load_kernel</name><argument_list pos:start="466:20" pos:end="466:55">(<argument pos:start="466:21" pos:end="466:38"><expr pos:start="466:21" pos:end="466:38"><call pos:start="466:21" pos:end="466:38"><name pos:start="466:21" pos:end="466:27">ARM_CPU</name><argument_list pos:start="466:28" pos:end="466:38">(<argument pos:start="466:29" pos:end="466:37"><expr pos:start="466:29" pos:end="466:37"><name pos:start="466:29" pos:end="466:37">first_cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="466:41" pos:end="466:54"><expr pos:start="466:41" pos:end="466:54"><operator pos:start="466:41" pos:end="466:41">&amp;</operator><name pos:start="466:42" pos:end="466:54"><name pos:start="466:42" pos:end="466:44">vms</name><operator pos:start="466:45" pos:end="466:46">-&gt;</operator><name pos:start="466:47" pos:end="466:54">bootinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="470:5" pos:end="480:7">/*

     * arm_load_kernel machine init done notifier registration must

     * happen before the platform_bus_create call. In this latter,

     * another notifier is registered which adds platform bus nodes.

     * Notifiers are executed in registration reverse order.

     */</comment>

    <expr_stmt pos:start="482:5" pos:end="482:34"><expr pos:start="482:5" pos:end="482:33"><call pos:start="482:5" pos:end="482:33"><name pos:start="482:5" pos:end="482:23">create_platform_bus</name><argument_list pos:start="482:24" pos:end="482:33">(<argument pos:start="482:25" pos:end="482:27"><expr pos:start="482:25" pos:end="482:27"><name pos:start="482:25" pos:end="482:27">vms</name></expr></argument>, <argument pos:start="482:30" pos:end="482:32"><expr pos:start="482:30" pos:end="482:32"><name pos:start="482:30" pos:end="482:32">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
