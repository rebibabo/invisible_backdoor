<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27282.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">sdp_parse</name><parameter_list pos:start="1:21" pos:end="1:61">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:36">AVFormatContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:60"><decl pos:start="1:42" pos:end="1:60"><type pos:start="1:42" pos:end="1:60"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:60">content</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">letter</name></decl>;</decl_stmt>

    <comment type="block" pos:start="9:5" pos:end="21:70">/* Some SDP lines, particularly for Realmedia or ASF RTSP streams,

     * contain long SDP lines containing complete ASF Headers (several

     * kB) or arrays of MDPR (RM stream descriptor) headers plus

     * "rulebooks" describing their properties. Therefore, the SDP line

     * buffer is large.

     *

     * The Vorbis FMTP line can be up to 16KB - see sdp_parse_fmtp. */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">char</name></type> <name pos:start="23:10" pos:end="23:19"><name pos:start="23:10" pos:end="23:12">buf</name><index pos:start="23:13" pos:end="23:19">[<expr pos:start="23:14" pos:end="23:18"><literal type="number" pos:start="23:14" pos:end="23:18">16384</literal></expr>]</index></name></decl>, <decl pos:start="23:22" pos:end="23:23"><type ref="prev" pos:start="23:5" pos:end="23:8"><modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:23">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:58"><decl pos:start="25:5" pos:end="25:33"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:17">SDPParseState</name></type> <name pos:start="25:19" pos:end="25:33">sdp_parse_state</name></decl>, <decl pos:start="25:36" pos:end="25:57"><type ref="prev" pos:start="25:5" pos:end="25:17"><modifier pos:start="25:36" pos:end="25:36">*</modifier></type><name pos:start="25:37" pos:end="25:38">s1</name> <init pos:start="25:40" pos:end="25:57">= <expr pos:start="25:42" pos:end="25:57"><operator pos:start="25:42" pos:end="25:42">&amp;</operator><name pos:start="25:43" pos:end="25:57">sdp_parse_state</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><call pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:40">(<argument pos:start="29:12" pos:end="29:13"><expr pos:start="29:12" pos:end="29:13"><name pos:start="29:12" pos:end="29:13">s1</name></expr></argument>, <argument pos:start="29:16" pos:end="29:16"><expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr></argument>, <argument pos:start="29:19" pos:end="29:39"><expr pos:start="29:19" pos:end="29:39"><sizeof pos:start="29:19" pos:end="29:39">sizeof<argument_list pos:start="29:25" pos:end="29:39">(<argument pos:start="29:26" pos:end="29:38"><expr pos:start="29:26" pos:end="29:38"><name pos:start="29:26" pos:end="29:38">SDPParseState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:16"><expr pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">p</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <name pos:start="31:9" pos:end="31:15">content</name></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="79:5">for<control pos:start="33:8" pos:end="33:11">(<init pos:start="33:9" pos:end="33:9">;</init><condition pos:start="33:10" pos:end="33:10">;</condition><incr/>)</control> <block pos:start="33:13" pos:end="79:5">{<block_content pos:start="35:9" pos:end="77:16">

        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><call pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:19">skip_spaces</name><argument_list pos:start="35:20" pos:end="35:23">(<argument pos:start="35:21" pos:end="35:22"><expr pos:start="35:21" pos:end="35:22"><operator pos:start="35:21" pos:end="35:21">&amp;</operator><name pos:start="35:22" pos:end="35:22">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:20"><expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:14">letter</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <operator pos:start="37:18" pos:end="37:18">*</operator><name pos:start="37:19" pos:end="37:19">p</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="41:18"><if pos:start="39:9" pos:end="41:18">if <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:18">letter</name> <operator pos:start="39:20" pos:end="39:21">==</operator> <literal type="char" pos:start="39:23" pos:end="39:26">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:18"><block_content pos:start="41:13" pos:end="41:18">

            <break pos:start="41:13" pos:end="41:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:12"><expr pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:9">p</name><operator pos:start="43:10" pos:end="43:11">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="47:27"><if pos:start="45:9" pos:end="47:27">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:14">p</name> <operator pos:start="45:16" pos:end="45:17">!=</operator> <literal type="char" pos:start="45:19" pos:end="45:21">'='</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:27"><block_content pos:start="47:13" pos:end="47:27">

            <goto pos:start="47:13" pos:end="47:27">goto <name pos:start="47:18" pos:end="47:26">next_line</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:12"><expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:9">p</name><operator pos:start="49:10" pos:end="49:11">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:29">/* get the content */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:9">q</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <name pos:start="53:13" pos:end="53:15">buf</name></expr>;</expr_stmt>

        <while pos:start="55:9" pos:end="63:9">while <condition pos:start="55:15" pos:end="55:54">(<expr pos:start="55:16" pos:end="55:53"><operator pos:start="55:16" pos:end="55:16">*</operator><name pos:start="55:17" pos:end="55:17">p</name> <operator pos:start="55:19" pos:end="55:20">!=</operator> <literal type="char" pos:start="55:22" pos:end="55:25">'\n'</literal> <operator pos:start="55:27" pos:end="55:28">&amp;&amp;</operator> <operator pos:start="55:30" pos:end="55:30">*</operator><name pos:start="55:31" pos:end="55:31">p</name> <operator pos:start="55:33" pos:end="55:34">!=</operator> <literal type="char" pos:start="55:36" pos:end="55:39">'\r'</literal> <operator pos:start="55:41" pos:end="55:42">&amp;&amp;</operator> <operator pos:start="55:44" pos:end="55:44">*</operator><name pos:start="55:45" pos:end="55:45">p</name> <operator pos:start="55:47" pos:end="55:48">!=</operator> <literal type="char" pos:start="55:50" pos:end="55:53">'\0'</literal></expr>)</condition> <block pos:start="55:56" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:16">

            <if_stmt pos:start="57:13" pos:end="59:26"><if pos:start="57:13" pos:end="59:26">if <condition pos:start="57:16" pos:end="57:44">(<expr pos:start="57:17" pos:end="57:43"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:18">q</name> <operator pos:start="57:20" pos:end="57:20">-</operator> <name pos:start="57:22" pos:end="57:24">buf</name><operator pos:start="57:25" pos:end="57:25">)</operator> <operator pos:start="57:27" pos:end="57:27">&lt;</operator> <sizeof pos:start="57:29" pos:end="57:39">sizeof<argument_list pos:start="57:35" pos:end="57:39">(<argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:38">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="57:41" pos:end="57:41">-</operator> <literal type="number" pos:start="57:43" pos:end="57:43">1</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:26"><block_content pos:start="59:17" pos:end="59:26">

                <expr_stmt pos:start="59:17" pos:end="59:26"><expr pos:start="59:17" pos:end="59:25"><operator pos:start="59:17" pos:end="59:17">*</operator><name pos:start="59:18" pos:end="59:18">q</name><operator pos:start="59:19" pos:end="59:20">++</operator> <operator pos:start="59:22" pos:end="59:22">=</operator> <operator pos:start="59:24" pos:end="59:24">*</operator><name pos:start="59:25" pos:end="59:25">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:16"><expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:13">p</name><operator pos:start="61:14" pos:end="61:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="65:9" pos:end="65:18"><expr pos:start="65:9" pos:end="65:17"><operator pos:start="65:9" pos:end="65:9">*</operator><name pos:start="65:10" pos:end="65:10">q</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="char" pos:start="65:14" pos:end="65:17">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><call pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:22">sdp_parse_line</name><argument_list pos:start="67:23" pos:end="67:42">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">s</name></expr></argument>, <argument pos:start="67:27" pos:end="67:28"><expr pos:start="67:27" pos:end="67:28"><name pos:start="67:27" pos:end="67:28">s1</name></expr></argument>, <argument pos:start="67:31" pos:end="67:36"><expr pos:start="67:31" pos:end="67:36"><name pos:start="67:31" pos:end="67:36">letter</name></expr></argument>, <argument pos:start="67:39" pos:end="67:41"><expr pos:start="67:39" pos:end="67:41"><name pos:start="67:39" pos:end="67:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:13">next_line</name>:</label>

        <while pos:start="71:9" pos:end="73:16">while <condition pos:start="71:15" pos:end="71:40">(<expr pos:start="71:16" pos:end="71:39"><operator pos:start="71:16" pos:end="71:16">*</operator><name pos:start="71:17" pos:end="71:17">p</name> <operator pos:start="71:19" pos:end="71:20">!=</operator> <literal type="char" pos:start="71:22" pos:end="71:25">'\n'</literal> <operator pos:start="71:27" pos:end="71:28">&amp;&amp;</operator> <operator pos:start="71:30" pos:end="71:30">*</operator><name pos:start="71:31" pos:end="71:31">p</name> <operator pos:start="71:33" pos:end="71:34">!=</operator> <literal type="char" pos:start="71:36" pos:end="71:39">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:16"><block_content pos:start="73:13" pos:end="73:16">

            <expr_stmt pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:13">p</name><operator pos:start="73:14" pos:end="73:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <if_stmt pos:start="75:9" pos:end="77:16"><if pos:start="75:9" pos:end="77:16">if <condition pos:start="75:12" pos:end="75:23">(<expr pos:start="75:13" pos:end="75:22"><operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:14">p</name> <operator pos:start="75:16" pos:end="75:17">==</operator> <literal type="char" pos:start="75:19" pos:end="75:22">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:16"><block_content pos:start="77:13" pos:end="77:16">

            <expr_stmt pos:start="77:13" pos:end="77:16"><expr pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:13">p</name><operator pos:start="77:14" pos:end="77:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
