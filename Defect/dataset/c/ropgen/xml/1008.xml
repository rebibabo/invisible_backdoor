<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1008.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">xan_unpack</name><parameter_list pos:start="1:23" pos:end="1:83">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:31">unsigned</name> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">dest</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:68"><decl pos:start="1:45" pos:end="1:68"><type pos:start="1:45" pos:end="1:68"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:58">unsigned</name> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">src</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:82"><decl pos:start="1:71" pos:end="1:82"><type pos:start="1:71" pos:end="1:82"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:82">dest_len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">char</name></type> <name pos:start="5:19" pos:end="5:24">opcode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:27">dest_end</name> <init pos:start="9:29" pos:end="9:45">= <expr pos:start="9:31" pos:end="9:45"><name pos:start="9:31" pos:end="9:34">dest</name> <operator pos:start="9:36" pos:end="9:36">+</operator> <name pos:start="9:38" pos:end="9:45">dest_len</name></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="91:5">while <condition pos:start="13:11" pos:end="13:27">(<expr pos:start="13:12" pos:end="13:26"><name pos:start="13:12" pos:end="13:15">dest</name> <operator pos:start="13:17" pos:end="13:17">&lt;</operator> <name pos:start="13:19" pos:end="13:26">dest_end</name></expr>)</condition> <block pos:start="13:29" pos:end="91:5">{<block_content pos:start="15:9" pos:end="89:9">

        <expr_stmt pos:start="15:9" pos:end="15:24"><expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:14">opcode</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <operator pos:start="15:18" pos:end="15:18">*</operator><name pos:start="15:19" pos:end="15:21">src</name><operator pos:start="15:22" pos:end="15:23">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="19:9" pos:end="89:9"><if pos:start="19:9" pos:end="75:9">if <condition pos:start="19:12" pos:end="19:26">(<expr pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:18">opcode</name> <operator pos:start="19:20" pos:end="19:20">&lt;</operator> <literal type="number" pos:start="19:22" pos:end="19:25">0xe0</literal></expr>)</condition> <block pos:start="19:28" pos:end="75:9">{<block_content pos:start="21:13" pos:end="73:26">

            <decl_stmt pos:start="21:13" pos:end="21:28"><decl pos:start="21:13" pos:end="21:21"><type pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:15">int</name></type> <name pos:start="21:17" pos:end="21:21">size2</name></decl>, <decl pos:start="21:24" pos:end="21:27"><type ref="prev" pos:start="21:13" pos:end="21:15"/><name pos:start="21:24" pos:end="21:27">back</name></decl>;</decl_stmt>

            <if_stmt pos:start="23:13" pos:end="67:13"><if pos:start="23:13" pos:end="37:13">if <condition pos:start="23:16" pos:end="23:39">( <expr pos:start="23:18" pos:end="23:37"><operator pos:start="23:18" pos:end="23:18">(</operator><name pos:start="23:19" pos:end="23:24">opcode</name> <operator pos:start="23:26" pos:end="23:26">&amp;</operator> <literal type="number" pos:start="23:28" pos:end="23:31">0x80</literal><operator pos:start="23:32" pos:end="23:32">)</operator> <operator pos:start="23:34" pos:end="23:35">==</operator> <literal type="number" pos:start="23:37" pos:end="23:37">0</literal></expr> )</condition> <block pos:start="23:41" pos:end="37:13">{<block_content pos:start="27:17" pos:end="33:51">



                <expr_stmt pos:start="27:17" pos:end="27:34"><expr pos:start="27:17" pos:end="27:33"><name pos:start="27:17" pos:end="27:20">size</name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:29">opcode</name> <operator pos:start="27:31" pos:end="27:31">&amp;</operator> <literal type="number" pos:start="27:33" pos:end="27:33">3</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="31:17" pos:end="31:60"><expr pos:start="31:17" pos:end="31:59"><name pos:start="31:17" pos:end="31:20">back</name>  <operator pos:start="31:23" pos:end="31:23">=</operator> <operator pos:start="31:25" pos:end="31:25">(</operator><operator pos:start="31:26" pos:end="31:26">(</operator><name pos:start="31:27" pos:end="31:32">opcode</name> <operator pos:start="31:34" pos:end="31:34">&amp;</operator> <literal type="number" pos:start="31:36" pos:end="31:39">0x60</literal><operator pos:start="31:40" pos:end="31:40">)</operator> <operator pos:start="31:42" pos:end="31:43">&lt;&lt;</operator> <literal type="number" pos:start="31:45" pos:end="31:45">3</literal><operator pos:start="31:46" pos:end="31:46">)</operator> <operator pos:start="31:48" pos:end="31:48">+</operator> <operator pos:start="31:50" pos:end="31:50">*</operator><name pos:start="31:51" pos:end="31:53">src</name><operator pos:start="31:54" pos:end="31:55">++</operator> <operator pos:start="31:57" pos:end="31:57">+</operator> <literal type="number" pos:start="31:59" pos:end="31:59">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:51"><expr pos:start="33:17" pos:end="33:50"><name pos:start="33:17" pos:end="33:21">size2</name> <operator pos:start="33:23" pos:end="33:23">=</operator> <operator pos:start="33:25" pos:end="33:25">(</operator><operator pos:start="33:26" pos:end="33:26">(</operator><name pos:start="33:27" pos:end="33:32">opcode</name> <operator pos:start="33:34" pos:end="33:34">&amp;</operator> <literal type="number" pos:start="33:36" pos:end="33:39">0x1c</literal><operator pos:start="33:40" pos:end="33:40">)</operator> <operator pos:start="33:42" pos:end="33:43">&gt;&gt;</operator> <literal type="number" pos:start="33:45" pos:end="33:45">2</literal><operator pos:start="33:46" pos:end="33:46">)</operator> <operator pos:start="33:48" pos:end="33:48">+</operator> <literal type="number" pos:start="33:50" pos:end="33:50">3</literal></expr>;</expr_stmt>



            </block_content>}</block></if> <if type="elseif" pos:start="37:15" pos:end="51:13">else if <condition pos:start="37:23" pos:end="37:46">( <expr pos:start="37:25" pos:end="37:44"><operator pos:start="37:25" pos:end="37:25">(</operator><name pos:start="37:26" pos:end="37:31">opcode</name> <operator pos:start="37:33" pos:end="37:33">&amp;</operator> <literal type="number" pos:start="37:35" pos:end="37:38">0x40</literal><operator pos:start="37:39" pos:end="37:39">)</operator> <operator pos:start="37:41" pos:end="37:42">==</operator> <literal type="number" pos:start="37:44" pos:end="37:44">0</literal></expr> )</condition> <block pos:start="37:48" pos:end="51:13">{<block_content pos:start="41:17" pos:end="47:44">



                <expr_stmt pos:start="41:17" pos:end="41:33"><expr pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:20">size</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <operator pos:start="41:24" pos:end="41:24">*</operator><name pos:start="41:25" pos:end="41:27">src</name> <operator pos:start="41:29" pos:end="41:30">&gt;&gt;</operator> <literal type="number" pos:start="41:32" pos:end="41:32">6</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="45:17" pos:end="45:65"><expr pos:start="45:17" pos:end="45:64"><name pos:start="45:17" pos:end="45:20">back</name>  <operator pos:start="45:23" pos:end="45:23">=</operator> <operator pos:start="45:25" pos:end="45:25">(</operator><call pos:start="45:26" pos:end="45:50"><name pos:start="45:26" pos:end="45:44">bytestream_get_be16</name><argument_list pos:start="45:45" pos:end="45:50">(<argument pos:start="45:46" pos:end="45:49"><expr pos:start="45:46" pos:end="45:49"><operator pos:start="45:46" pos:end="45:46">&amp;</operator><name pos:start="45:47" pos:end="45:49">src</name></expr></argument>)</argument_list></call> <operator pos:start="45:52" pos:end="45:52">&amp;</operator> <literal type="number" pos:start="45:54" pos:end="45:59">0x3fff</literal><operator pos:start="45:60" pos:end="45:60">)</operator> <operator pos:start="45:62" pos:end="45:62">+</operator> <literal type="number" pos:start="45:64" pos:end="45:64">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:44"><expr pos:start="47:17" pos:end="47:43"><name pos:start="47:17" pos:end="47:21">size2</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <operator pos:start="47:25" pos:end="47:25">(</operator><name pos:start="47:26" pos:end="47:31">opcode</name> <operator pos:start="47:33" pos:end="47:33">&amp;</operator> <literal type="number" pos:start="47:35" pos:end="47:38">0x3f</literal><operator pos:start="47:39" pos:end="47:39">)</operator> <operator pos:start="47:41" pos:end="47:41">+</operator> <literal type="number" pos:start="47:43" pos:end="47:43">4</literal></expr>;</expr_stmt>



            </block_content>}</block></if> <else pos:start="51:15" pos:end="67:13">else <block pos:start="51:20" pos:end="67:13">{<block_content pos:start="55:17" pos:end="65:27">



                <expr_stmt pos:start="55:17" pos:end="55:34"><expr pos:start="55:17" pos:end="55:33"><name pos:start="55:17" pos:end="55:20">size</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:29">opcode</name> <operator pos:start="55:31" pos:end="55:31">&amp;</operator> <literal type="number" pos:start="55:33" pos:end="55:33">3</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="59:17" pos:end="59:80"><expr pos:start="59:17" pos:end="59:79"><name pos:start="59:17" pos:end="59:20">back</name>  <operator pos:start="59:23" pos:end="59:23">=</operator> <operator pos:start="59:25" pos:end="59:25">(</operator><operator pos:start="59:26" pos:end="59:26">(</operator><name pos:start="59:27" pos:end="59:32">opcode</name> <operator pos:start="59:34" pos:end="59:34">&amp;</operator> <literal type="number" pos:start="59:36" pos:end="59:39">0x10</literal><operator pos:start="59:40" pos:end="59:40">)</operator> <operator pos:start="59:42" pos:end="59:43">&lt;&lt;</operator> <literal type="number" pos:start="59:45" pos:end="59:46">12</literal><operator pos:start="59:47" pos:end="59:47">)</operator> <operator pos:start="59:49" pos:end="59:49">+</operator> <call pos:start="59:51" pos:end="59:75"><name pos:start="59:51" pos:end="59:69">bytestream_get_be16</name><argument_list pos:start="59:70" pos:end="59:75">(<argument pos:start="59:71" pos:end="59:74"><expr pos:start="59:71" pos:end="59:74"><operator pos:start="59:71" pos:end="59:71">&amp;</operator><name pos:start="59:72" pos:end="59:74">src</name></expr></argument>)</argument_list></call> <operator pos:start="59:77" pos:end="59:77">+</operator> <literal type="number" pos:start="59:79" pos:end="59:79">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:61"><expr pos:start="61:17" pos:end="61:60"><name pos:start="61:17" pos:end="61:21">size2</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <operator pos:start="61:25" pos:end="61:25">(</operator><operator pos:start="61:26" pos:end="61:26">(</operator><name pos:start="61:27" pos:end="61:32">opcode</name> <operator pos:start="61:34" pos:end="61:34">&amp;</operator> <literal type="number" pos:start="61:36" pos:end="61:39">0x0c</literal><operator pos:start="61:40" pos:end="61:40">)</operator> <operator pos:start="61:42" pos:end="61:43">&lt;&lt;</operator>  <literal type="number" pos:start="61:46" pos:end="61:46">6</literal><operator pos:start="61:47" pos:end="61:47">)</operator> <operator pos:start="61:49" pos:end="61:49">+</operator> <operator pos:start="61:51" pos:end="61:51">*</operator><name pos:start="61:52" pos:end="61:54">src</name><operator pos:start="61:55" pos:end="61:56">++</operator> <operator pos:start="61:58" pos:end="61:58">+</operator> <literal type="number" pos:start="61:60" pos:end="61:60">5</literal></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="65:27"><if pos:start="63:17" pos:end="65:27">if <condition pos:start="63:20" pos:end="63:51">(<expr pos:start="63:21" pos:end="63:50"><name pos:start="63:21" pos:end="63:24">size</name> <operator pos:start="63:26" pos:end="63:26">+</operator> <name pos:start="63:28" pos:end="63:32">size2</name> <operator pos:start="63:34" pos:end="63:34">&gt;</operator> <name pos:start="63:36" pos:end="63:43">dest_end</name> <operator pos:start="63:45" pos:end="63:45">-</operator> <name pos:start="63:47" pos:end="63:50">dest</name></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:27"><block_content pos:start="65:21" pos:end="65:27">

                    <return pos:start="65:21" pos:end="65:27">return;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><call pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:18">memcpy</name><argument_list pos:start="69:19" pos:end="69:35">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">dest</name></expr></argument>, <argument pos:start="69:26" pos:end="69:28"><expr pos:start="69:26" pos:end="69:28"><name pos:start="69:26" pos:end="69:28">src</name></expr></argument>, <argument pos:start="69:31" pos:end="69:34"><expr pos:start="69:31" pos:end="69:34"><name pos:start="69:31" pos:end="69:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt pos:start="69:39" pos:end="69:51"><expr pos:start="69:39" pos:end="69:50"><name pos:start="69:39" pos:end="69:42">dest</name> <operator pos:start="69:44" pos:end="69:45">+=</operator> <name pos:start="69:47" pos:end="69:50">size</name></expr>;</expr_stmt>  <expr_stmt pos:start="69:54" pos:end="69:65"><expr pos:start="69:54" pos:end="69:64"><name pos:start="69:54" pos:end="69:56">src</name> <operator pos:start="69:58" pos:end="69:59">+=</operator> <name pos:start="69:61" pos:end="69:64">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:49"><expr pos:start="71:13" pos:end="71:48"><call pos:start="71:13" pos:end="71:48"><name pos:start="71:13" pos:end="71:29">av_memcpy_backptr</name><argument_list pos:start="71:30" pos:end="71:48">(<argument pos:start="71:31" pos:end="71:34"><expr pos:start="71:31" pos:end="71:34"><name pos:start="71:31" pos:end="71:34">dest</name></expr></argument>, <argument pos:start="71:37" pos:end="71:40"><expr pos:start="71:37" pos:end="71:40"><name pos:start="71:37" pos:end="71:40">back</name></expr></argument>, <argument pos:start="71:43" pos:end="71:47"><expr pos:start="71:43" pos:end="71:47"><name pos:start="71:43" pos:end="71:47">size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:26"><expr pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:16">dest</name> <operator pos:start="73:18" pos:end="73:19">+=</operator> <name pos:start="73:21" pos:end="73:25">size2</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="89:9">else <block pos:start="75:16" pos:end="89:9">{<block_content pos:start="77:13" pos:end="87:23">

            <decl_stmt pos:start="77:13" pos:end="77:40"><decl pos:start="77:13" pos:end="77:39"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:22">finish</name> <init pos:start="77:24" pos:end="77:39">= <expr pos:start="77:26" pos:end="77:39"><name pos:start="77:26" pos:end="77:31">opcode</name> <operator pos:start="77:33" pos:end="77:34">&gt;=</operator> <literal type="number" pos:start="77:36" pos:end="77:39">0xfc</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:68"><expr pos:start="79:13" pos:end="79:67"><name pos:start="79:13" pos:end="79:16">size</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <ternary pos:start="79:20" pos:end="79:67"><condition pos:start="79:20" pos:end="79:27"><expr pos:start="79:20" pos:end="79:25"><name pos:start="79:20" pos:end="79:25">finish</name></expr> ?</condition><then pos:start="79:29" pos:end="79:38"> <expr pos:start="79:29" pos:end="79:38"><name pos:start="79:29" pos:end="79:34">opcode</name> <operator pos:start="79:36" pos:end="79:36">&amp;</operator> <literal type="number" pos:start="79:38" pos:end="79:38">3</literal></expr> </then><else pos:start="79:40" pos:end="79:67">: <expr pos:start="79:42" pos:end="79:67"><operator pos:start="79:42" pos:end="79:42">(</operator><operator pos:start="79:43" pos:end="79:43">(</operator><name pos:start="79:44" pos:end="79:49">opcode</name> <operator pos:start="79:51" pos:end="79:51">&amp;</operator> <literal type="number" pos:start="79:53" pos:end="79:56">0x1f</literal><operator pos:start="79:57" pos:end="79:57">)</operator> <operator pos:start="79:59" pos:end="79:60">&lt;&lt;</operator> <literal type="number" pos:start="79:62" pos:end="79:62">2</literal><operator pos:start="79:63" pos:end="79:63">)</operator> <operator pos:start="79:65" pos:end="79:65">+</operator> <literal type="number" pos:start="79:67" pos:end="79:67">4</literal></expr></else></ternary></expr>;</expr_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:36"><expr pos:start="83:13" pos:end="83:35"><call pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:18">memcpy</name><argument_list pos:start="83:19" pos:end="83:35">(<argument pos:start="83:20" pos:end="83:23"><expr pos:start="83:20" pos:end="83:23"><name pos:start="83:20" pos:end="83:23">dest</name></expr></argument>, <argument pos:start="83:26" pos:end="83:28"><expr pos:start="83:26" pos:end="83:28"><name pos:start="83:26" pos:end="83:28">src</name></expr></argument>, <argument pos:start="83:31" pos:end="83:34"><expr pos:start="83:31" pos:end="83:34"><name pos:start="83:31" pos:end="83:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt pos:start="83:39" pos:end="83:51"><expr pos:start="83:39" pos:end="83:50"><name pos:start="83:39" pos:end="83:42">dest</name> <operator pos:start="83:44" pos:end="83:45">+=</operator> <name pos:start="83:47" pos:end="83:50">size</name></expr>;</expr_stmt>  <expr_stmt pos:start="83:54" pos:end="83:65"><expr pos:start="83:54" pos:end="83:64"><name pos:start="83:54" pos:end="83:56">src</name> <operator pos:start="83:58" pos:end="83:59">+=</operator> <name pos:start="83:61" pos:end="83:64">size</name></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="87:23"><if pos:start="85:13" pos:end="87:23">if <condition pos:start="85:16" pos:end="85:23">(<expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">finish</name></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:23"><block_content pos:start="87:17" pos:end="87:23">

                <return pos:start="87:17" pos:end="87:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
