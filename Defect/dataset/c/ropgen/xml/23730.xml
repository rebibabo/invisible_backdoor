<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23730.c" pos:tabs="8"><function pos:start="1:1" pos:end="423:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:36">cuvid_decode_init</name><parameter_list pos:start="1:37" pos:end="1:59">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="423:1">{<block_content pos:start="5:5" pos:end="421:15">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CuvidContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ctx</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">AVCUDADeviceContext</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:37">device_hwctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">AVHWDeviceContext</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:33">device_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">AVHWFramesContext</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:34">hwframe_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:21">CUVIDPARSERPARAMS</name></type> <name pos:start="13:23" pos:end="13:33">cuparseinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:19">CUVIDEOFORMATEX</name></type> <name pos:start="15:21" pos:end="15:31">cuparse_ext</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:25">CUVIDSOURCEDATAPACKET</name></type> <name pos:start="17:27" pos:end="17:33">seq_pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">CUdevice</name></type> <name pos:start="19:14" pos:end="19:19">device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">CUcontext</name></type> <name pos:start="21:15" pos:end="21:22">cuda_ctx</name> <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:13">CUcontext</name></type> <name pos:start="23:15" pos:end="23:19">dummy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:29"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:27">AVBitStreamFilter</name> <modifier pos:start="25:29" pos:end="25:29">*</modifier></type><name pos:start="25:30" pos:end="25:32">bsf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name> <init pos:start="27:13" pos:end="27:15">= <expr pos:start="27:15" pos:end="27:15"><literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="35:57"><decl pos:start="31:5" pos:end="35:56"><type pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:8">enum</name> <name pos:start="31:10" pos:end="31:22">AVPixelFormat</name></name></type> <name pos:start="31:24" pos:end="31:34"><name pos:start="31:24" pos:end="31:31">pix_fmts</name><index pos:start="31:32" pos:end="31:34">[<expr pos:start="31:33" pos:end="31:33"><literal type="number" pos:start="31:33" pos:end="31:33">3</literal></expr>]</index></name> <init pos:start="31:36" pos:end="35:56">= <expr pos:start="31:38" pos:end="35:56"><block pos:start="31:38" pos:end="35:56">{ <expr pos:start="31:40" pos:end="31:54"><name pos:start="31:40" pos:end="31:54">AV_PIX_FMT_CUDA</name></expr>,

                                       <expr pos:start="33:40" pos:end="33:54"><name pos:start="33:40" pos:end="33:54">AV_PIX_FMT_NV12</name></expr>,

                                       <expr pos:start="35:40" pos:end="35:54"><name pos:start="35:40" pos:end="35:54">AV_PIX_FMT_NONE</name></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:40"><name pos:start="39:11" pos:end="39:23">ff_get_format</name><argument_list pos:start="39:24" pos:end="39:40">(<argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:29">avctx</name></expr></argument>, <argument pos:start="39:32" pos:end="39:39"><expr pos:start="39:32" pos:end="39:39"><name pos:start="39:32" pos:end="39:39">pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:19">

        <expr_stmt pos:start="43:9" pos:end="43:71"><expr pos:start="43:9" pos:end="43:70"><call pos:start="43:9" pos:end="43:70"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:70">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:64"><expr pos:start="43:37" pos:end="43:64"><literal type="string" pos:start="43:37" pos:end="43:64">"ff_get_format failed: %d\n"</literal></expr></argument>, <argument pos:start="43:67" pos:end="43:69"><expr pos:start="43:67" pos:end="43:69"><name pos:start="43:67" pos:end="43:69">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:84"><expr pos:start="51:5" pos:end="51:83"><name pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:20">frame_queue</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:83"><name pos:start="51:24" pos:end="51:36">av_fifo_alloc</name><argument_list pos:start="51:37" pos:end="51:83">(<argument pos:start="51:38" pos:end="51:82"><expr pos:start="51:38" pos:end="51:82"><name pos:start="51:38" pos:end="51:52">MAX_FRAME_COUNT</name> <operator pos:start="51:54" pos:end="51:54">*</operator> <sizeof pos:start="51:56" pos:end="51:82">sizeof<argument_list pos:start="51:62" pos:end="51:82">(<argument pos:start="51:63" pos:end="51:81"><expr pos:start="51:63" pos:end="51:81"><name pos:start="51:63" pos:end="51:81">CUVIDPARSERDISPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:26">(<expr pos:start="53:9" pos:end="53:25"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:25"><name pos:start="53:10" pos:end="53:12">ctx</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:25">frame_queue</name></name></expr>)</condition> <block pos:start="53:28" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:19">

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:29"><name pos:start="55:15" pos:end="55:21">AVERROR</name><argument_list pos:start="55:22" pos:end="55:29">(<argument pos:start="55:23" pos:end="55:28"><expr pos:start="55:23" pos:end="55:28"><name pos:start="55:23" pos:end="55:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:19">goto <name pos:start="57:14" pos:end="57:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:9">avctx</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:18">pix_fmt</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:24">ret</name></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="187:5"><if pos:start="67:5" pos:end="103:5">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:13">avctx</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:28">hw_frames_ctx</name></name></expr>)</condition> <block pos:start="67:31" pos:end="103:5">{<block_content pos:start="69:9" pos:end="101:42">

        <expr_stmt pos:start="69:9" pos:end="69:59"><expr pos:start="69:9" pos:end="69:58"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:11">ctx</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:20">hwframe</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <call pos:start="69:24" pos:end="69:58"><name pos:start="69:24" pos:end="69:36">av_buffer_ref</name><argument_list pos:start="69:37" pos:end="69:58">(<argument pos:start="69:38" pos:end="69:57"><expr pos:start="69:38" pos:end="69:57"><name pos:start="69:38" pos:end="69:57"><name pos:start="69:38" pos:end="69:42">avctx</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:57">hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:26">(<expr pos:start="71:13" pos:end="71:25"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:25"><name pos:start="71:14" pos:end="71:16">ctx</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:25">hwframe</name></name></expr>)</condition> <block pos:start="71:28" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:23">

            <expr_stmt pos:start="73:13" pos:end="73:34"><expr pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:33"><name pos:start="73:19" pos:end="73:25">AVERROR</name><argument_list pos:start="73:26" pos:end="73:33">(<argument pos:start="73:27" pos:end="73:32"><expr pos:start="73:27" pos:end="73:32"><name pos:start="73:27" pos:end="73:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:23">goto <name pos:start="75:18" pos:end="75:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:61"><expr pos:start="81:9" pos:end="81:60"><name pos:start="81:9" pos:end="81:19">hwframe_ctx</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <operator pos:start="81:23" pos:end="81:23">(</operator><name pos:start="81:24" pos:end="81:40">AVHWFramesContext</name><operator pos:start="81:41" pos:end="81:41">*</operator><operator pos:start="81:42" pos:end="81:42">)</operator><name pos:start="81:43" pos:end="81:60"><name pos:start="81:43" pos:end="81:45">ctx</name><operator pos:start="81:46" pos:end="81:47">-&gt;</operator><name pos:start="81:48" pos:end="81:54">hwframe</name><operator pos:start="81:55" pos:end="81:56">-&gt;</operator><name pos:start="81:57" pos:end="81:60">data</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:63"><expr pos:start="85:9" pos:end="85:62"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">ctx</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:21">hwdevice</name></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <call pos:start="85:25" pos:end="85:62"><name pos:start="85:25" pos:end="85:37">av_buffer_ref</name><argument_list pos:start="85:38" pos:end="85:62">(<argument pos:start="85:39" pos:end="85:61"><expr pos:start="85:39" pos:end="85:61"><name pos:start="85:39" pos:end="85:61"><name pos:start="85:39" pos:end="85:49">hwframe_ctx</name><operator pos:start="85:50" pos:end="85:51">-&gt;</operator><name pos:start="85:52" pos:end="85:61">device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:27">(<expr pos:start="87:13" pos:end="87:26"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:26"><name pos:start="87:14" pos:end="87:16">ctx</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:26">hwdevice</name></name></expr>)</condition> <block pos:start="87:29" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:23">

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:33"><name pos:start="89:19" pos:end="89:25">AVERROR</name><argument_list pos:start="89:26" pos:end="89:33">(<argument pos:start="89:27" pos:end="89:32"><expr pos:start="89:27" pos:end="89:32"><name pos:start="89:27" pos:end="89:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:23">goto <name pos:start="91:18" pos:end="91:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:45"><expr pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:18">device_ctx</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:44"><name pos:start="97:22" pos:end="97:32">hwframe_ctx</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:44">device_ctx</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:20">device_hwctx</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:40"><name pos:start="99:24" pos:end="99:33">device_ctx</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:40">hwctx</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:42"><expr pos:start="101:9" pos:end="101:41"><name pos:start="101:9" pos:end="101:16">cuda_ctx</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:41"><name pos:start="101:20" pos:end="101:31">device_hwctx</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:41">cuda_ctx</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="187:5">else <block pos:start="103:12" pos:end="187:5">{<block_content pos:start="105:9" pos:end="185:9">

        <expr_stmt pos:start="105:9" pos:end="105:69"><expr pos:start="105:9" pos:end="105:68"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:11">ctx</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:21">hwdevice</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:68"><name pos:start="105:25" pos:end="105:45">av_hwdevice_ctx_alloc</name><argument_list pos:start="105:46" pos:end="105:68">(<argument pos:start="105:47" pos:end="105:67"><expr pos:start="105:47" pos:end="105:67"><name pos:start="105:47" pos:end="105:67">AV_HWDEVICE_TYPE_CUDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:27">(<expr pos:start="107:13" pos:end="107:26"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:26"><name pos:start="107:14" pos:end="107:16">ctx</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:26">hwdevice</name></name></expr>)</condition> <block pos:start="107:29" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:23">

            <expr_stmt pos:start="109:13" pos:end="109:71"><expr pos:start="109:13" pos:end="109:70"><call pos:start="109:13" pos:end="109:70"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="109:70">(<argument pos:start="109:20" pos:end="109:24"><expr pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:24">avctx</name></expr></argument>, <argument pos:start="109:27" pos:end="109:38"><expr pos:start="109:27" pos:end="109:38"><name pos:start="109:27" pos:end="109:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:41" pos:end="109:69"><expr pos:start="109:41" pos:end="109:69"><literal type="string" pos:start="109:41" pos:end="109:69">"Error allocating hwdevice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:34"><expr pos:start="111:13" pos:end="111:33"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <call pos:start="111:19" pos:end="111:33"><name pos:start="111:19" pos:end="111:25">AVERROR</name><argument_list pos:start="111:26" pos:end="111:33">(<argument pos:start="111:27" pos:end="111:32"><expr pos:start="111:27" pos:end="111:32"><name pos:start="111:27" pos:end="111:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:23">goto <name pos:start="113:18" pos:end="113:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:33"><name pos:start="119:15" pos:end="119:22">CHECK_CU</name><argument_list pos:start="119:23" pos:end="119:33">(<argument pos:start="119:24" pos:end="119:32"><expr pos:start="119:24" pos:end="119:32"><call pos:start="119:24" pos:end="119:32"><name pos:start="119:24" pos:end="119:29">cuInit</name><argument_list pos:start="119:30" pos:end="119:32">(<argument pos:start="119:31" pos:end="119:31"><expr pos:start="119:31" pos:end="119:31"><literal type="number" pos:start="119:31" pos:end="119:31">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="123:23"><if pos:start="121:9" pos:end="123:23">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:23"><block_content pos:start="123:13" pos:end="123:23">

            <goto pos:start="123:13" pos:end="123:23">goto <name pos:start="123:18" pos:end="123:22">error</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:47"><name pos:start="127:15" pos:end="127:22">CHECK_CU</name><argument_list pos:start="127:23" pos:end="127:47">(<argument pos:start="127:24" pos:end="127:46"><expr pos:start="127:24" pos:end="127:46"><call pos:start="127:24" pos:end="127:46"><name pos:start="127:24" pos:end="127:34">cuDeviceGet</name><argument_list pos:start="127:35" pos:end="127:46">(<argument pos:start="127:36" pos:end="127:42"><expr pos:start="127:36" pos:end="127:42"><operator pos:start="127:36" pos:end="127:36">&amp;</operator><name pos:start="127:37" pos:end="127:42">device</name></expr></argument>, <argument pos:start="127:45" pos:end="127:45"><expr pos:start="127:45" pos:end="127:45"><literal type="number" pos:start="127:45" pos:end="127:45">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="131:23"><if pos:start="129:9" pos:end="131:23">if <condition pos:start="129:12" pos:end="129:20">(<expr pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">&lt;</operator> <literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:23"><block_content pos:start="131:13" pos:end="131:23">

            <goto pos:start="131:13" pos:end="131:23">goto <name pos:start="131:18" pos:end="131:22">error</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:83"><expr pos:start="135:9" pos:end="135:82"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:82"><name pos:start="135:15" pos:end="135:22">CHECK_CU</name><argument_list pos:start="135:23" pos:end="135:82">(<argument pos:start="135:24" pos:end="135:81"><expr pos:start="135:24" pos:end="135:81"><call pos:start="135:24" pos:end="135:81"><name pos:start="135:24" pos:end="135:34">cuCtxCreate</name><argument_list pos:start="135:35" pos:end="135:81">(<argument pos:start="135:36" pos:end="135:44"><expr pos:start="135:36" pos:end="135:44"><operator pos:start="135:36" pos:end="135:36">&amp;</operator><name pos:start="135:37" pos:end="135:44">cuda_ctx</name></expr></argument>, <argument pos:start="135:47" pos:end="135:72"><expr pos:start="135:47" pos:end="135:72"><name pos:start="135:47" pos:end="135:72">CU_CTX_SCHED_BLOCKING_SYNC</name></expr></argument>, <argument pos:start="135:75" pos:end="135:80"><expr pos:start="135:75" pos:end="135:80"><name pos:start="135:75" pos:end="135:80">device</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="139:23"><if pos:start="137:9" pos:end="139:23">if <condition pos:start="137:12" pos:end="137:20">(<expr pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">&lt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:23"><block_content pos:start="139:13" pos:end="139:23">

            <goto pos:start="139:13" pos:end="139:23">goto <name pos:start="139:18" pos:end="139:22">error</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:61"><expr pos:start="143:9" pos:end="143:60"><name pos:start="143:9" pos:end="143:18">device_ctx</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <operator pos:start="143:22" pos:end="143:22">(</operator><name pos:start="143:23" pos:end="143:39">AVHWDeviceContext</name><operator pos:start="143:40" pos:end="143:40">*</operator><operator pos:start="143:41" pos:end="143:41">)</operator><name pos:start="143:42" pos:end="143:60"><name pos:start="143:42" pos:end="143:44">ctx</name><operator pos:start="143:45" pos:end="143:46">-&gt;</operator><name pos:start="143:47" pos:end="143:54">hwdevice</name><operator pos:start="143:55" pos:end="143:56">-&gt;</operator><name pos:start="143:57" pos:end="143:60">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:42"><expr pos:start="145:9" pos:end="145:41"><name pos:start="145:9" pos:end="145:24"><name pos:start="145:9" pos:end="145:18">device_ctx</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:24">free</name></name> <operator pos:start="145:26" pos:end="145:26">=</operator> <name pos:start="145:28" pos:end="145:41">cuvid_ctx_free</name></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:20">device_hwctx</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <name pos:start="149:24" pos:end="149:40"><name pos:start="149:24" pos:end="149:33">device_ctx</name><operator pos:start="149:34" pos:end="149:35">-&gt;</operator><name pos:start="149:36" pos:end="149:40">hwctx</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:42"><expr pos:start="151:9" pos:end="151:41"><name pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:20">device_hwctx</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:30">cuda_ctx</name></name> <operator pos:start="151:32" pos:end="151:32">=</operator> <name pos:start="151:34" pos:end="151:41">cuda_ctx</name></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:48"><expr pos:start="155:9" pos:end="155:47"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:47"><name pos:start="155:15" pos:end="155:22">CHECK_CU</name><argument_list pos:start="155:23" pos:end="155:47">(<argument pos:start="155:24" pos:end="155:46"><expr pos:start="155:24" pos:end="155:46"><call pos:start="155:24" pos:end="155:46"><name pos:start="155:24" pos:end="155:38">cuCtxPopCurrent</name><argument_list pos:start="155:39" pos:end="155:46">(<argument pos:start="155:40" pos:end="155:45"><expr pos:start="155:40" pos:end="155:45"><operator pos:start="155:40" pos:end="155:40">&amp;</operator><name pos:start="155:41" pos:end="155:45">dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="159:23"><if pos:start="157:9" pos:end="159:23">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:23"><block_content pos:start="159:13" pos:end="159:23">

            <goto pos:start="159:13" pos:end="159:23">goto <name pos:start="159:18" pos:end="159:22">error</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:50"><expr pos:start="163:9" pos:end="163:49"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:49"><name pos:start="163:15" pos:end="163:34">av_hwdevice_ctx_init</name><argument_list pos:start="163:35" pos:end="163:49">(<argument pos:start="163:36" pos:end="163:48"><expr pos:start="163:36" pos:end="163:48"><name pos:start="163:36" pos:end="163:48"><name pos:start="163:36" pos:end="163:38">ctx</name><operator pos:start="163:39" pos:end="163:40">-&gt;</operator><name pos:start="163:41" pos:end="163:48">hwdevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="171:9"><if pos:start="165:9" pos:end="171:9">if <condition pos:start="165:12" pos:end="165:20">(<expr pos:start="165:13" pos:end="165:19"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">&lt;</operator> <literal type="number" pos:start="165:19" pos:end="165:19">0</literal></expr>)</condition> <block pos:start="165:22" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:23">

            <expr_stmt pos:start="167:13" pos:end="167:73"><expr pos:start="167:13" pos:end="167:72"><call pos:start="167:13" pos:end="167:72"><name pos:start="167:13" pos:end="167:18">av_log</name><argument_list pos:start="167:19" pos:end="167:72">(<argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:24">avctx</name></expr></argument>, <argument pos:start="167:27" pos:end="167:38"><expr pos:start="167:27" pos:end="167:38"><name pos:start="167:27" pos:end="167:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:41" pos:end="167:71"><expr pos:start="167:41" pos:end="167:71"><literal type="string" pos:start="167:41" pos:end="167:71">"av_hwdevice_ctx_init failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="169:13" pos:end="169:23">goto <name pos:start="169:18" pos:end="169:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:59"><expr pos:start="175:9" pos:end="175:58"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:11">ctx</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:20">hwframe</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <call pos:start="175:24" pos:end="175:58"><name pos:start="175:24" pos:end="175:43">av_hwframe_ctx_alloc</name><argument_list pos:start="175:44" pos:end="175:58">(<argument pos:start="175:45" pos:end="175:57"><expr pos:start="175:45" pos:end="175:57"><name pos:start="175:45" pos:end="175:57"><name pos:start="175:45" pos:end="175:47">ctx</name><operator pos:start="175:48" pos:end="175:49">-&gt;</operator><name pos:start="175:50" pos:end="175:57">hwdevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="185:9"><if pos:start="177:9" pos:end="185:9">if <condition pos:start="177:12" pos:end="177:26">(<expr pos:start="177:13" pos:end="177:25"><operator pos:start="177:13" pos:end="177:13">!</operator><name pos:start="177:14" pos:end="177:25"><name pos:start="177:14" pos:end="177:16">ctx</name><operator pos:start="177:17" pos:end="177:18">-&gt;</operator><name pos:start="177:19" pos:end="177:25">hwframe</name></name></expr>)</condition> <block pos:start="177:28" pos:end="185:9">{<block_content pos:start="179:13" pos:end="183:23">

            <expr_stmt pos:start="179:13" pos:end="179:73"><expr pos:start="179:13" pos:end="179:72"><call pos:start="179:13" pos:end="179:72"><name pos:start="179:13" pos:end="179:18">av_log</name><argument_list pos:start="179:19" pos:end="179:72">(<argument pos:start="179:20" pos:end="179:24"><expr pos:start="179:20" pos:end="179:24"><name pos:start="179:20" pos:end="179:24">avctx</name></expr></argument>, <argument pos:start="179:27" pos:end="179:38"><expr pos:start="179:27" pos:end="179:38"><name pos:start="179:27" pos:end="179:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:41" pos:end="179:71"><expr pos:start="179:41" pos:end="179:71"><literal type="string" pos:start="179:41" pos:end="179:71">"av_hwframe_ctx_alloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:34"><expr pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:33"><name pos:start="181:19" pos:end="181:25">AVERROR</name><argument_list pos:start="181:26" pos:end="181:33">(<argument pos:start="181:27" pos:end="181:32"><expr pos:start="181:27" pos:end="181:32"><name pos:start="181:27" pos:end="181:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:23">goto <name pos:start="183:18" pos:end="183:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:49"><expr pos:start="191:5" pos:end="191:48"><call pos:start="191:5" pos:end="191:48"><name pos:start="191:5" pos:end="191:10">memset</name><argument_list pos:start="191:11" pos:end="191:48">(<argument pos:start="191:12" pos:end="191:23"><expr pos:start="191:12" pos:end="191:23"><operator pos:start="191:12" pos:end="191:12">&amp;</operator><name pos:start="191:13" pos:end="191:23">cuparseinfo</name></expr></argument>, <argument pos:start="191:26" pos:end="191:26"><expr pos:start="191:26" pos:end="191:26"><literal type="number" pos:start="191:26" pos:end="191:26">0</literal></expr></argument>, <argument pos:start="191:29" pos:end="191:47"><expr pos:start="191:29" pos:end="191:47"><sizeof pos:start="191:29" pos:end="191:47">sizeof<argument_list pos:start="191:35" pos:end="191:47">(<argument pos:start="191:36" pos:end="191:46"><expr pos:start="191:36" pos:end="191:46"><name pos:start="191:36" pos:end="191:46">cuparseinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:49"><expr pos:start="193:5" pos:end="193:48"><call pos:start="193:5" pos:end="193:48"><name pos:start="193:5" pos:end="193:10">memset</name><argument_list pos:start="193:11" pos:end="193:48">(<argument pos:start="193:12" pos:end="193:23"><expr pos:start="193:12" pos:end="193:23"><operator pos:start="193:12" pos:end="193:12">&amp;</operator><name pos:start="193:13" pos:end="193:23">cuparse_ext</name></expr></argument>, <argument pos:start="193:26" pos:end="193:26"><expr pos:start="193:26" pos:end="193:26"><literal type="number" pos:start="193:26" pos:end="193:26">0</literal></expr></argument>, <argument pos:start="193:29" pos:end="193:47"><expr pos:start="193:29" pos:end="193:47"><sizeof pos:start="193:29" pos:end="193:47">sizeof<argument_list pos:start="193:35" pos:end="193:47">(<argument pos:start="193:36" pos:end="193:46"><expr pos:start="193:36" pos:end="193:46"><name pos:start="193:36" pos:end="193:46">cuparse_ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:41"><expr pos:start="195:5" pos:end="195:40"><call pos:start="195:5" pos:end="195:40"><name pos:start="195:5" pos:end="195:10">memset</name><argument_list pos:start="195:11" pos:end="195:40">(<argument pos:start="195:12" pos:end="195:19"><expr pos:start="195:12" pos:end="195:19"><operator pos:start="195:12" pos:end="195:12">&amp;</operator><name pos:start="195:13" pos:end="195:19">seq_pkt</name></expr></argument>, <argument pos:start="195:22" pos:end="195:22"><expr pos:start="195:22" pos:end="195:22"><literal type="number" pos:start="195:22" pos:end="195:22">0</literal></expr></argument>, <argument pos:start="195:25" pos:end="195:39"><expr pos:start="195:25" pos:end="195:39"><sizeof pos:start="195:25" pos:end="195:39">sizeof<argument_list pos:start="195:31" pos:end="195:39">(<argument pos:start="195:32" pos:end="195:38"><expr pos:start="195:32" pos:end="195:38"><name pos:start="195:32" pos:end="195:38">seq_pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:45"><expr pos:start="199:5" pos:end="199:44"><name pos:start="199:5" pos:end="199:29"><name pos:start="199:5" pos:end="199:15">cuparseinfo</name><operator pos:start="199:16" pos:end="199:16">.</operator><name pos:start="199:17" pos:end="199:29">pExtVideoInfo</name></name> <operator pos:start="199:31" pos:end="199:31">=</operator> <operator pos:start="199:33" pos:end="199:33">&amp;</operator><name pos:start="199:34" pos:end="199:44">cuparse_ext</name></expr>;</expr_stmt>



    <switch pos:start="203:5" pos:end="287:5">switch <condition pos:start="203:12" pos:end="203:29">(<expr pos:start="203:13" pos:end="203:28"><name pos:start="203:13" pos:end="203:28"><name pos:start="203:13" pos:end="203:17">avctx</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:24">codec</name><operator pos:start="203:25" pos:end="203:26">-&gt;</operator><name pos:start="203:27" pos:end="203:28">id</name></name></expr>)</condition> <block pos:start="203:31" pos:end="287:5">{<block_content pos:start="212:5" pos:end="285:27">






<cpp:if pos:start="210:1" pos:end="210:29">#<cpp:directive pos:start="210:2" pos:end="210:3">if</cpp:directive> <expr pos:start="210:5" pos:end="210:29"><name pos:start="210:5" pos:end="210:29">CONFIG_H264_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="212:5" pos:end="212:26">case <expr pos:start="212:10" pos:end="212:25"><name pos:start="212:10" pos:end="212:25">AV_CODEC_ID_H264</name></expr>:</case>

        <expr_stmt pos:start="214:9" pos:end="219:0"><expr pos:start="214:9" pos:end="214:51"><name pos:start="214:9" pos:end="214:29"><name pos:start="214:9" pos:end="214:19">cuparseinfo</name><operator pos:start="214:20" pos:end="214:20">.</operator><name pos:start="214:21" pos:end="214:29">CodecType</name></name> <operator pos:start="214:31" pos:end="214:31">=</operator> <name pos:start="214:33" pos:end="214:51">cudaVideoCodec_H264</name></expr>;</expr_stmt>



<cpp:if pos:start="218:1" pos:end="218:29">#<cpp:directive pos:start="218:2" pos:end="218:3">if</cpp:directive> <expr pos:start="218:5" pos:end="218:29"><name pos:start="218:5" pos:end="218:29">CONFIG_HEVC_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="220:5" pos:end="220:26">case <expr pos:start="220:10" pos:end="220:25"><name pos:start="220:10" pos:end="220:25">AV_CODEC_ID_HEVC</name></expr>:</case>

        <expr_stmt pos:start="222:9" pos:end="227:0"><expr pos:start="222:9" pos:end="222:51"><name pos:start="222:9" pos:end="222:29"><name pos:start="222:9" pos:end="222:19">cuparseinfo</name><operator pos:start="222:20" pos:end="222:20">.</operator><name pos:start="222:21" pos:end="222:29">CodecType</name></name> <operator pos:start="222:31" pos:end="222:31">=</operator> <name pos:start="222:33" pos:end="222:51">cudaVideoCodec_HEVC</name></expr>;</expr_stmt>



<cpp:if pos:start="226:1" pos:end="226:30">#<cpp:directive pos:start="226:2" pos:end="226:3">if</cpp:directive> <expr pos:start="226:5" pos:end="226:30"><name pos:start="226:5" pos:end="226:30">CONFIG_MJPEG_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="228:5" pos:end="228:27">case <expr pos:start="228:10" pos:end="228:26"><name pos:start="228:10" pos:end="228:26">AV_CODEC_ID_MJPEG</name></expr>:</case>

        <expr_stmt pos:start="230:9" pos:end="235:0"><expr pos:start="230:9" pos:end="230:51"><name pos:start="230:9" pos:end="230:29"><name pos:start="230:9" pos:end="230:19">cuparseinfo</name><operator pos:start="230:20" pos:end="230:20">.</operator><name pos:start="230:21" pos:end="230:29">CodecType</name></name> <operator pos:start="230:31" pos:end="230:31">=</operator> <name pos:start="230:33" pos:end="230:51">cudaVideoCodec_JPEG</name></expr>;</expr_stmt>



<cpp:if pos:start="234:1" pos:end="234:30">#<cpp:directive pos:start="234:2" pos:end="234:3">if</cpp:directive> <expr pos:start="234:5" pos:end="234:30"><name pos:start="234:5" pos:end="234:30">CONFIG_MPEG1_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="236:5" pos:end="236:32">case <expr pos:start="236:10" pos:end="236:31"><name pos:start="236:10" pos:end="236:31">AV_CODEC_ID_MPEG1VIDEO</name></expr>:</case>

        <expr_stmt pos:start="238:9" pos:end="243:0"><expr pos:start="238:9" pos:end="238:52"><name pos:start="238:9" pos:end="238:29"><name pos:start="238:9" pos:end="238:19">cuparseinfo</name><operator pos:start="238:20" pos:end="238:20">.</operator><name pos:start="238:21" pos:end="238:29">CodecType</name></name> <operator pos:start="238:31" pos:end="238:31">=</operator> <name pos:start="238:33" pos:end="238:52">cudaVideoCodec_MPEG1</name></expr>;</expr_stmt>



<cpp:if pos:start="242:1" pos:end="242:30">#<cpp:directive pos:start="242:2" pos:end="242:3">if</cpp:directive> <expr pos:start="242:5" pos:end="242:30"><name pos:start="242:5" pos:end="242:30">CONFIG_MPEG2_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="244:5" pos:end="244:32">case <expr pos:start="244:10" pos:end="244:31"><name pos:start="244:10" pos:end="244:31">AV_CODEC_ID_MPEG2VIDEO</name></expr>:</case>

        <expr_stmt pos:start="246:9" pos:end="251:0"><expr pos:start="246:9" pos:end="246:52"><name pos:start="246:9" pos:end="246:29"><name pos:start="246:9" pos:end="246:19">cuparseinfo</name><operator pos:start="246:20" pos:end="246:20">.</operator><name pos:start="246:21" pos:end="246:29">CodecType</name></name> <operator pos:start="246:31" pos:end="246:31">=</operator> <name pos:start="246:33" pos:end="246:52">cudaVideoCodec_MPEG2</name></expr>;</expr_stmt>



<cpp:if pos:start="250:1" pos:end="250:30">#<cpp:directive pos:start="250:2" pos:end="250:3">if</cpp:directive> <expr pos:start="250:5" pos:end="250:30"><name pos:start="250:5" pos:end="250:30">CONFIG_MPEG4_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="252:5" pos:end="258:0">case <expr pos:start="252:10" pos:end="252:26"><name pos:start="252:10" pos:end="252:26">AV_CODEC_ID_MPEG4</name></expr>:</case>




<cpp:if pos:start="257:1" pos:end="257:28">#<cpp:directive pos:start="257:2" pos:end="257:3">if</cpp:directive> <expr pos:start="257:5" pos:end="257:28"><name pos:start="257:5" pos:end="257:28">CONFIG_VP8_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="259:5" pos:end="259:25">case <expr pos:start="259:10" pos:end="259:24"><name pos:start="259:10" pos:end="259:24">AV_CODEC_ID_VP8</name></expr>:</case>

        <expr_stmt pos:start="261:9" pos:end="266:0"><expr pos:start="261:9" pos:end="261:50"><name pos:start="261:9" pos:end="261:29"><name pos:start="261:9" pos:end="261:19">cuparseinfo</name><operator pos:start="261:20" pos:end="261:20">.</operator><name pos:start="261:21" pos:end="261:29">CodecType</name></name> <operator pos:start="261:31" pos:end="261:31">=</operator> <name pos:start="261:33" pos:end="261:50">cudaVideoCodec_VP8</name></expr>;</expr_stmt>



<cpp:if pos:start="265:1" pos:end="265:28">#<cpp:directive pos:start="265:2" pos:end="265:3">if</cpp:directive> <expr pos:start="265:5" pos:end="265:28"><name pos:start="265:5" pos:end="265:28">CONFIG_VP9_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="267:5" pos:end="267:25">case <expr pos:start="267:10" pos:end="267:24"><name pos:start="267:10" pos:end="267:24">AV_CODEC_ID_VP9</name></expr>:</case>

        <expr_stmt pos:start="269:9" pos:end="274:0"><expr pos:start="269:9" pos:end="269:50"><name pos:start="269:9" pos:end="269:29"><name pos:start="269:9" pos:end="269:19">cuparseinfo</name><operator pos:start="269:20" pos:end="269:20">.</operator><name pos:start="269:21" pos:end="269:29">CodecType</name></name> <operator pos:start="269:31" pos:end="269:31">=</operator> <name pos:start="269:33" pos:end="269:50">cudaVideoCodec_VP9</name></expr>;</expr_stmt>



<cpp:if pos:start="273:1" pos:end="273:28">#<cpp:directive pos:start="273:2" pos:end="273:3">if</cpp:directive> <expr pos:start="273:5" pos:end="273:28"><name pos:start="273:5" pos:end="273:28">CONFIG_VC1_CUVID_DECODER</name></expr></cpp:if>

    <case pos:start="275:5" pos:end="275:25">case <expr pos:start="275:10" pos:end="275:24"><name pos:start="275:10" pos:end="275:24">AV_CODEC_ID_VC1</name></expr>:</case>

        <expr_stmt pos:start="277:9" pos:end="277:51"><expr pos:start="277:9" pos:end="277:50"><name pos:start="277:9" pos:end="277:29"><name pos:start="277:9" pos:end="277:19">cuparseinfo</name><operator pos:start="277:20" pos:end="277:20">.</operator><name pos:start="277:21" pos:end="277:29">CodecType</name></name> <operator pos:start="277:31" pos:end="277:31">=</operator> <name pos:start="277:33" pos:end="277:50">cudaVideoCodec_VC1</name></expr>;</expr_stmt>



    <default pos:start="281:5" pos:end="281:12">default:</default>

        <expr_stmt pos:start="283:9" pos:end="283:62"><expr pos:start="283:9" pos:end="283:61"><call pos:start="283:9" pos:end="283:61"><name pos:start="283:9" pos:end="283:14">av_log</name><argument_list pos:start="283:15" pos:end="283:61">(<argument pos:start="283:16" pos:end="283:20"><expr pos:start="283:16" pos:end="283:20"><name pos:start="283:16" pos:end="283:20">avctx</name></expr></argument>, <argument pos:start="283:23" pos:end="283:34"><expr pos:start="283:23" pos:end="283:34"><name pos:start="283:23" pos:end="283:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:37" pos:end="283:60"><expr pos:start="283:37" pos:end="283:60"><literal type="string" pos:start="283:37" pos:end="283:60">"Invalid CUVID codec!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="285:9" pos:end="285:27">return <expr pos:start="285:16" pos:end="285:26"><name pos:start="285:16" pos:end="285:26">AVERROR_BUG</name></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="291:5" pos:end="345:5"><if pos:start="291:5" pos:end="335:5">if <condition pos:start="291:8" pos:end="291:85">(<expr pos:start="291:9" pos:end="291:84"><name pos:start="291:9" pos:end="291:24"><name pos:start="291:9" pos:end="291:13">avctx</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:20">codec</name><operator pos:start="291:21" pos:end="291:22">-&gt;</operator><name pos:start="291:23" pos:end="291:24">id</name></name> <operator pos:start="291:26" pos:end="291:27">==</operator> <name pos:start="291:29" pos:end="291:44">AV_CODEC_ID_H264</name> <operator pos:start="291:46" pos:end="291:47">||</operator> <name pos:start="291:49" pos:end="291:64"><name pos:start="291:49" pos:end="291:53">avctx</name><operator pos:start="291:54" pos:end="291:55">-&gt;</operator><name pos:start="291:56" pos:end="291:60">codec</name><operator pos:start="291:61" pos:end="291:62">-&gt;</operator><name pos:start="291:63" pos:end="291:64">id</name></name> <operator pos:start="291:66" pos:end="291:67">==</operator> <name pos:start="291:69" pos:end="291:84">AV_CODEC_ID_HEVC</name></expr>)</condition> <block pos:start="291:87" pos:end="335:5">{<block_content pos:start="293:9" pos:end="333:94">

        <if_stmt pos:start="293:9" pos:end="299:57"><if pos:start="293:9" pos:end="295:57">if <condition pos:start="293:12" pos:end="293:49">(<expr pos:start="293:13" pos:end="293:48"><name pos:start="293:13" pos:end="293:28"><name pos:start="293:13" pos:end="293:17">avctx</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:24">codec</name><operator pos:start="293:25" pos:end="293:26">-&gt;</operator><name pos:start="293:27" pos:end="293:28">id</name></name> <operator pos:start="293:30" pos:end="293:31">==</operator> <name pos:start="293:33" pos:end="293:48">AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:57"><block_content pos:start="295:13" pos:end="295:57">

            <expr_stmt pos:start="295:13" pos:end="295:57"><expr pos:start="295:13" pos:end="295:56"><name pos:start="295:13" pos:end="295:15">bsf</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <call pos:start="295:19" pos:end="295:56"><name pos:start="295:19" pos:end="295:36">av_bsf_get_by_name</name><argument_list pos:start="295:37" pos:end="295:56">(<argument pos:start="295:38" pos:end="295:55"><expr pos:start="295:38" pos:end="295:55"><literal type="string" pos:start="295:38" pos:end="295:55">"h264_mp4toannexb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="297:9" pos:end="299:57">else<block type="pseudo" pos:start="299:13" pos:end="299:57"><block_content pos:start="299:13" pos:end="299:57">

            <expr_stmt pos:start="299:13" pos:end="299:57"><expr pos:start="299:13" pos:end="299:56"><name pos:start="299:13" pos:end="299:15">bsf</name> <operator pos:start="299:17" pos:end="299:17">=</operator> <call pos:start="299:19" pos:end="299:56"><name pos:start="299:19" pos:end="299:36">av_bsf_get_by_name</name><argument_list pos:start="299:37" pos:end="299:56">(<argument pos:start="299:38" pos:end="299:55"><expr pos:start="299:38" pos:end="299:55"><literal type="string" pos:start="299:38" pos:end="299:55">"hevc_mp4toannexb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="303:17">(<expr pos:start="303:13" pos:end="303:16"><operator pos:start="303:13" pos:end="303:13">!</operator><name pos:start="303:14" pos:end="303:16">bsf</name></expr>)</condition> <block pos:start="303:19" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:23">

            <expr_stmt pos:start="305:13" pos:end="305:40"><expr pos:start="305:13" pos:end="305:39"><name pos:start="305:13" pos:end="305:15">ret</name> <operator pos:start="305:17" pos:end="305:17">=</operator> <name pos:start="305:19" pos:end="305:39">AVERROR_BSF_NOT_FOUND</name></expr>;</expr_stmt>

            <goto pos:start="307:13" pos:end="307:23">goto <name pos:start="307:18" pos:end="307:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="311:9" pos:end="315:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:47">(<expr pos:start="311:13" pos:end="311:46"><name pos:start="311:13" pos:end="311:15">ret</name> <operator pos:start="311:17" pos:end="311:17">=</operator> <call pos:start="311:19" pos:end="311:46"><name pos:start="311:19" pos:end="311:30">av_bsf_alloc</name><argument_list pos:start="311:31" pos:end="311:46">(<argument pos:start="311:32" pos:end="311:34"><expr pos:start="311:32" pos:end="311:34"><name pos:start="311:32" pos:end="311:34">bsf</name></expr></argument>, <argument pos:start="311:37" pos:end="311:45"><expr pos:start="311:37" pos:end="311:45"><operator pos:start="311:37" pos:end="311:37">&amp;</operator><name pos:start="311:38" pos:end="311:45"><name pos:start="311:38" pos:end="311:40">ctx</name><operator pos:start="311:41" pos:end="311:42">-&gt;</operator><name pos:start="311:43" pos:end="311:45">bsf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:49" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:23">

            <goto pos:start="313:13" pos:end="313:23">goto <name pos:start="313:18" pos:end="313:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="317:9" pos:end="323:9"><if pos:start="317:9" pos:end="323:9">if <condition pos:start="317:12" pos:end="317:122">(<expr pos:start="317:13" pos:end="317:121"><operator pos:start="317:13" pos:end="317:13">(</operator><operator pos:start="317:14" pos:end="317:14">(</operator><name pos:start="317:15" pos:end="317:17">ret</name> <operator pos:start="317:19" pos:end="317:19">=</operator> <call pos:start="317:21" pos:end="317:76"><name pos:start="317:21" pos:end="317:51">avcodec_parameters_from_context</name><argument_list pos:start="317:52" pos:end="317:76">(<argument pos:start="317:53" pos:end="317:68"><expr pos:start="317:53" pos:end="317:68"><name pos:start="317:53" pos:end="317:68"><name pos:start="317:53" pos:end="317:55">ctx</name><operator pos:start="317:56" pos:end="317:57">-&gt;</operator><name pos:start="317:58" pos:end="317:60">bsf</name><operator pos:start="317:61" pos:end="317:62">-&gt;</operator><name pos:start="317:63" pos:end="317:68">par_in</name></name></expr></argument>, <argument pos:start="317:71" pos:end="317:75"><expr pos:start="317:71" pos:end="317:75"><name pos:start="317:71" pos:end="317:75">avctx</name></expr></argument>)</argument_list></call><operator pos:start="317:77" pos:end="317:77">)</operator> <operator pos:start="317:79" pos:end="317:79">&lt;</operator> <literal type="number" pos:start="317:81" pos:end="317:81">0</literal><operator pos:start="317:82" pos:end="317:82">)</operator> <operator pos:start="317:84" pos:end="317:85">||</operator> <operator pos:start="317:87" pos:end="317:87">(</operator><operator pos:start="317:88" pos:end="317:88">(</operator><name pos:start="317:89" pos:end="317:91">ret</name> <operator pos:start="317:93" pos:end="317:93">=</operator> <call pos:start="317:95" pos:end="317:115"><name pos:start="317:95" pos:end="317:105">av_bsf_init</name><argument_list pos:start="317:106" pos:end="317:115">(<argument pos:start="317:107" pos:end="317:114"><expr pos:start="317:107" pos:end="317:114"><name pos:start="317:107" pos:end="317:114"><name pos:start="317:107" pos:end="317:109">ctx</name><operator pos:start="317:110" pos:end="317:111">-&gt;</operator><name pos:start="317:112" pos:end="317:114">bsf</name></name></expr></argument>)</argument_list></call><operator pos:start="317:116" pos:end="317:116">)</operator> <operator pos:start="317:118" pos:end="317:118">&lt;</operator> <literal type="number" pos:start="317:120" pos:end="317:120">0</literal><operator pos:start="317:121" pos:end="317:121">)</operator></expr>)</condition> <block pos:start="317:124" pos:end="323:9">{<block_content pos:start="319:13" pos:end="321:23">

            <expr_stmt pos:start="319:13" pos:end="319:35"><expr pos:start="319:13" pos:end="319:34"><call pos:start="319:13" pos:end="319:34"><name pos:start="319:13" pos:end="319:23">av_bsf_free</name><argument_list pos:start="319:24" pos:end="319:34">(<argument pos:start="319:25" pos:end="319:33"><expr pos:start="319:25" pos:end="319:33"><operator pos:start="319:25" pos:end="319:25">&amp;</operator><name pos:start="319:26" pos:end="319:33"><name pos:start="319:26" pos:end="319:28">ctx</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:33">bsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="321:13" pos:end="321:23">goto <name pos:start="321:18" pos:end="321:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="327:9" pos:end="327:82"><expr pos:start="327:9" pos:end="327:81"><name pos:start="327:9" pos:end="327:45"><name pos:start="327:9" pos:end="327:19">cuparse_ext</name><operator pos:start="327:20" pos:end="327:20">.</operator><name pos:start="327:21" pos:end="327:26">format</name><operator pos:start="327:27" pos:end="327:27">.</operator><name pos:start="327:28" pos:end="327:45">seqhdr_data_length</name></name> <operator pos:start="327:47" pos:end="327:47">=</operator> <name pos:start="327:49" pos:end="327:81"><name pos:start="327:49" pos:end="327:51">ctx</name><operator pos:start="327:52" pos:end="327:53">-&gt;</operator><name pos:start="327:54" pos:end="327:56">bsf</name><operator pos:start="327:57" pos:end="327:58">-&gt;</operator><name pos:start="327:59" pos:end="327:65">par_out</name><operator pos:start="327:66" pos:end="327:67">-&gt;</operator><name pos:start="327:68" pos:end="327:81">extradata_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="333:94"><expr pos:start="329:9" pos:end="333:93"><call pos:start="329:9" pos:end="333:93"><name pos:start="329:9" pos:end="329:14">memcpy</name><argument_list pos:start="329:15" pos:end="333:93">(<argument pos:start="329:16" pos:end="329:42"><expr pos:start="329:16" pos:end="329:42"><name pos:start="329:16" pos:end="329:42"><name pos:start="329:16" pos:end="329:26">cuparse_ext</name><operator pos:start="329:27" pos:end="329:27">.</operator><name pos:start="329:28" pos:end="329:42">raw_seqhdr_data</name></name></expr></argument>,

               <argument pos:start="331:16" pos:end="331:43"><expr pos:start="331:16" pos:end="331:43"><name pos:start="331:16" pos:end="331:43"><name pos:start="331:16" pos:end="331:18">ctx</name><operator pos:start="331:19" pos:end="331:20">-&gt;</operator><name pos:start="331:21" pos:end="331:23">bsf</name><operator pos:start="331:24" pos:end="331:25">-&gt;</operator><name pos:start="331:26" pos:end="331:32">par_out</name><operator pos:start="331:33" pos:end="331:34">-&gt;</operator><name pos:start="331:35" pos:end="331:43">extradata</name></name></expr></argument>,

               <argument pos:start="333:16" pos:end="333:92"><expr pos:start="333:16" pos:end="333:92"><call pos:start="333:16" pos:end="333:92"><name pos:start="333:16" pos:end="333:20">FFMIN</name><argument_list pos:start="333:21" pos:end="333:92">(<argument pos:start="333:22" pos:end="333:56"><expr pos:start="333:22" pos:end="333:56"><sizeof pos:start="333:22" pos:end="333:56">sizeof<argument_list pos:start="333:28" pos:end="333:56">(<argument pos:start="333:29" pos:end="333:55"><expr pos:start="333:29" pos:end="333:55"><name pos:start="333:29" pos:end="333:55"><name pos:start="333:29" pos:end="333:39">cuparse_ext</name><operator pos:start="333:40" pos:end="333:40">.</operator><name pos:start="333:41" pos:end="333:55">raw_seqhdr_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="333:59" pos:end="333:91"><expr pos:start="333:59" pos:end="333:91"><name pos:start="333:59" pos:end="333:91"><name pos:start="333:59" pos:end="333:61">ctx</name><operator pos:start="333:62" pos:end="333:63">-&gt;</operator><name pos:start="333:64" pos:end="333:66">bsf</name><operator pos:start="333:67" pos:end="333:68">-&gt;</operator><name pos:start="333:69" pos:end="333:75">par_out</name><operator pos:start="333:76" pos:end="333:77">-&gt;</operator><name pos:start="333:78" pos:end="333:91">extradata_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="335:7" pos:end="345:5">else if <condition pos:start="335:15" pos:end="335:41">(<expr pos:start="335:16" pos:end="335:40"><name pos:start="335:16" pos:end="335:36"><name pos:start="335:16" pos:end="335:20">avctx</name><operator pos:start="335:21" pos:end="335:22">-&gt;</operator><name pos:start="335:23" pos:end="335:36">extradata_size</name></name> <operator pos:start="335:38" pos:end="335:38">&gt;</operator> <literal type="number" pos:start="335:40" pos:end="335:40">0</literal></expr>)</condition> <block pos:start="335:43" pos:end="345:5">{<block_content pos:start="337:9" pos:end="343:82">

        <expr_stmt pos:start="337:9" pos:end="337:70"><expr pos:start="337:9" pos:end="337:69"><name pos:start="337:9" pos:end="337:45"><name pos:start="337:9" pos:end="337:19">cuparse_ext</name><operator pos:start="337:20" pos:end="337:20">.</operator><name pos:start="337:21" pos:end="337:26">format</name><operator pos:start="337:27" pos:end="337:27">.</operator><name pos:start="337:28" pos:end="337:45">seqhdr_data_length</name></name> <operator pos:start="337:47" pos:end="337:47">=</operator> <name pos:start="337:49" pos:end="337:69"><name pos:start="337:49" pos:end="337:53">avctx</name><operator pos:start="337:54" pos:end="337:55">-&gt;</operator><name pos:start="337:56" pos:end="337:69">extradata_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="343:82"><expr pos:start="339:9" pos:end="343:81"><call pos:start="339:9" pos:end="343:81"><name pos:start="339:9" pos:end="339:14">memcpy</name><argument_list pos:start="339:15" pos:end="343:81">(<argument pos:start="339:16" pos:end="339:42"><expr pos:start="339:16" pos:end="339:42"><name pos:start="339:16" pos:end="339:42"><name pos:start="339:16" pos:end="339:26">cuparse_ext</name><operator pos:start="339:27" pos:end="339:27">.</operator><name pos:start="339:28" pos:end="339:42">raw_seqhdr_data</name></name></expr></argument>,

               <argument pos:start="341:16" pos:end="341:31"><expr pos:start="341:16" pos:end="341:31"><name pos:start="341:16" pos:end="341:31"><name pos:start="341:16" pos:end="341:20">avctx</name><operator pos:start="341:21" pos:end="341:22">-&gt;</operator><name pos:start="341:23" pos:end="341:31">extradata</name></name></expr></argument>,

               <argument pos:start="343:16" pos:end="343:80"><expr pos:start="343:16" pos:end="343:80"><call pos:start="343:16" pos:end="343:80"><name pos:start="343:16" pos:end="343:20">FFMIN</name><argument_list pos:start="343:21" pos:end="343:80">(<argument pos:start="343:22" pos:end="343:56"><expr pos:start="343:22" pos:end="343:56"><sizeof pos:start="343:22" pos:end="343:56">sizeof<argument_list pos:start="343:28" pos:end="343:56">(<argument pos:start="343:29" pos:end="343:55"><expr pos:start="343:29" pos:end="343:55"><name pos:start="343:29" pos:end="343:55"><name pos:start="343:29" pos:end="343:39">cuparse_ext</name><operator pos:start="343:40" pos:end="343:40">.</operator><name pos:start="343:41" pos:end="343:55">raw_seqhdr_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="343:59" pos:end="343:79"><expr pos:start="343:59" pos:end="343:79"><name pos:start="343:59" pos:end="343:79"><name pos:start="343:59" pos:end="343:63">avctx</name><operator pos:start="343:64" pos:end="343:65">-&gt;</operator><name pos:start="343:66" pos:end="343:79">extradata_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:57"><expr pos:start="349:5" pos:end="349:56"><name pos:start="349:5" pos:end="349:38"><name pos:start="349:5" pos:end="349:15">cuparseinfo</name><operator pos:start="349:16" pos:end="349:16">.</operator><name pos:start="349:17" pos:end="349:38">ulMaxNumDecodeSurfaces</name></name> <operator pos:start="349:40" pos:end="349:40">=</operator> <name pos:start="349:42" pos:end="349:56">MAX_FRAME_COUNT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:38"><expr pos:start="351:5" pos:end="351:37"><name pos:start="351:5" pos:end="351:33"><name pos:start="351:5" pos:end="351:15">cuparseinfo</name><operator pos:start="351:16" pos:end="351:16">.</operator><name pos:start="351:17" pos:end="351:33">ulMaxDisplayDelay</name></name> <operator pos:start="351:35" pos:end="351:35">=</operator> <literal type="number" pos:start="351:37" pos:end="351:37">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:34"><expr pos:start="353:5" pos:end="353:33"><name pos:start="353:5" pos:end="353:25"><name pos:start="353:5" pos:end="353:15">cuparseinfo</name><operator pos:start="353:16" pos:end="353:16">.</operator><name pos:start="353:17" pos:end="353:25">pUserData</name></name> <operator pos:start="353:27" pos:end="353:27">=</operator> <name pos:start="353:29" pos:end="353:33">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:66"><expr pos:start="355:5" pos:end="355:65"><name pos:start="355:5" pos:end="355:35"><name pos:start="355:5" pos:end="355:15">cuparseinfo</name><operator pos:start="355:16" pos:end="355:16">.</operator><name pos:start="355:17" pos:end="355:35">pfnSequenceCallback</name></name> <operator pos:start="355:37" pos:end="355:37">=</operator> <name pos:start="355:39" pos:end="355:65">cuvid_handle_video_sequence</name></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:63"><expr pos:start="357:5" pos:end="357:62"><name pos:start="357:5" pos:end="357:32"><name pos:start="357:5" pos:end="357:15">cuparseinfo</name><operator pos:start="357:16" pos:end="357:16">.</operator><name pos:start="357:17" pos:end="357:32">pfnDecodePicture</name></name> <operator pos:start="357:34" pos:end="357:34">=</operator> <name pos:start="357:36" pos:end="357:62">cuvid_handle_picture_decode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:65"><expr pos:start="359:5" pos:end="359:64"><name pos:start="359:5" pos:end="359:33"><name pos:start="359:5" pos:end="359:15">cuparseinfo</name><operator pos:start="359:16" pos:end="359:16">.</operator><name pos:start="359:17" pos:end="359:33">pfnDisplayPicture</name></name> <operator pos:start="359:35" pos:end="359:35">=</operator> <name pos:start="359:37" pos:end="359:64">cuvid_handle_picture_display</name></expr>;</expr_stmt>



    <expr_stmt pos:start="363:5" pos:end="363:47"><expr pos:start="363:5" pos:end="363:46"><name pos:start="363:5" pos:end="363:7">ret</name> <operator pos:start="363:9" pos:end="363:9">=</operator> <call pos:start="363:11" pos:end="363:46"><name pos:start="363:11" pos:end="363:18">CHECK_CU</name><argument_list pos:start="363:19" pos:end="363:46">(<argument pos:start="363:20" pos:end="363:45"><expr pos:start="363:20" pos:end="363:45"><call pos:start="363:20" pos:end="363:45"><name pos:start="363:20" pos:end="363:35">cuCtxPushCurrent</name><argument_list pos:start="363:36" pos:end="363:45">(<argument pos:start="363:37" pos:end="363:44"><expr pos:start="363:37" pos:end="363:44"><name pos:start="363:37" pos:end="363:44">cuda_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="365:5" pos:end="367:19"><if pos:start="365:5" pos:end="367:19">if <condition pos:start="365:8" pos:end="365:16">(<expr pos:start="365:9" pos:end="365:15"><name pos:start="365:9" pos:end="365:11">ret</name> <operator pos:start="365:13" pos:end="365:13">&lt;</operator> <literal type="number" pos:start="365:15" pos:end="365:15">0</literal></expr>)</condition><block type="pseudo" pos:start="367:9" pos:end="367:19"><block_content pos:start="367:9" pos:end="367:19">

        <goto pos:start="367:9" pos:end="367:19">goto <name pos:start="367:14" pos:end="367:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="371:5" pos:end="371:56"><expr pos:start="371:5" pos:end="371:55"><name pos:start="371:5" pos:end="371:7">ret</name> <operator pos:start="371:9" pos:end="371:9">=</operator> <call pos:start="371:11" pos:end="371:55"><name pos:start="371:11" pos:end="371:34">cuvid_test_dummy_decoder</name><argument_list pos:start="371:35" pos:end="371:55">(<argument pos:start="371:36" pos:end="371:40"><expr pos:start="371:36" pos:end="371:40"><name pos:start="371:36" pos:end="371:40">avctx</name></expr></argument>, <argument pos:start="371:43" pos:end="371:54"><expr pos:start="371:43" pos:end="371:54"><operator pos:start="371:43" pos:end="371:43">&amp;</operator><name pos:start="371:44" pos:end="371:54">cuparseinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="373:5" pos:end="375:19"><if pos:start="373:5" pos:end="375:19">if <condition pos:start="373:8" pos:end="373:16">(<expr pos:start="373:9" pos:end="373:15"><name pos:start="373:9" pos:end="373:11">ret</name> <operator pos:start="373:13" pos:end="373:13">&lt;</operator> <literal type="number" pos:start="373:15" pos:end="373:15">0</literal></expr>)</condition><block type="pseudo" pos:start="375:9" pos:end="375:19"><block_content pos:start="375:9" pos:end="375:19">

        <goto pos:start="375:9" pos:end="375:19">goto <name pos:start="375:14" pos:end="375:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="379:5" pos:end="379:73"><expr pos:start="379:5" pos:end="379:72"><name pos:start="379:5" pos:end="379:7">ret</name> <operator pos:start="379:9" pos:end="379:9">=</operator> <call pos:start="379:11" pos:end="379:72"><name pos:start="379:11" pos:end="379:18">CHECK_CU</name><argument_list pos:start="379:19" pos:end="379:72">(<argument pos:start="379:20" pos:end="379:71"><expr pos:start="379:20" pos:end="379:71"><call pos:start="379:20" pos:end="379:71"><name pos:start="379:20" pos:end="379:41">cuvidCreateVideoParser</name><argument_list pos:start="379:42" pos:end="379:71">(<argument pos:start="379:43" pos:end="379:56"><expr pos:start="379:43" pos:end="379:56"><operator pos:start="379:43" pos:end="379:43">&amp;</operator><name pos:start="379:44" pos:end="379:56"><name pos:start="379:44" pos:end="379:46">ctx</name><operator pos:start="379:47" pos:end="379:48">-&gt;</operator><name pos:start="379:49" pos:end="379:56">cuparser</name></name></expr></argument>, <argument pos:start="379:59" pos:end="379:70"><expr pos:start="379:59" pos:end="379:70"><operator pos:start="379:59" pos:end="379:59">&amp;</operator><name pos:start="379:60" pos:end="379:70">cuparseinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="381:5" pos:end="383:19"><if pos:start="381:5" pos:end="383:19">if <condition pos:start="381:8" pos:end="381:16">(<expr pos:start="381:9" pos:end="381:15"><name pos:start="381:9" pos:end="381:11">ret</name> <operator pos:start="381:13" pos:end="381:13">&lt;</operator> <literal type="number" pos:start="381:15" pos:end="381:15">0</literal></expr>)</condition><block type="pseudo" pos:start="383:9" pos:end="383:19"><block_content pos:start="383:9" pos:end="383:19">

        <goto pos:start="383:9" pos:end="383:19">goto <name pos:start="383:14" pos:end="383:18">error</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="387:5" pos:end="387:50"><expr pos:start="387:5" pos:end="387:49"><name pos:start="387:5" pos:end="387:19"><name pos:start="387:5" pos:end="387:11">seq_pkt</name><operator pos:start="387:12" pos:end="387:12">.</operator><name pos:start="387:13" pos:end="387:19">payload</name></name> <operator pos:start="387:21" pos:end="387:21">=</operator> <name pos:start="387:23" pos:end="387:49"><name pos:start="387:23" pos:end="387:33">cuparse_ext</name><operator pos:start="387:34" pos:end="387:34">.</operator><name pos:start="387:35" pos:end="387:49">raw_seqhdr_data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:65"><expr pos:start="389:5" pos:end="389:64"><name pos:start="389:5" pos:end="389:24"><name pos:start="389:5" pos:end="389:11">seq_pkt</name><operator pos:start="389:12" pos:end="389:12">.</operator><name pos:start="389:13" pos:end="389:24">payload_size</name></name> <operator pos:start="389:26" pos:end="389:26">=</operator> <name pos:start="389:28" pos:end="389:64"><name pos:start="389:28" pos:end="389:38">cuparse_ext</name><operator pos:start="389:39" pos:end="389:39">.</operator><name pos:start="389:40" pos:end="389:45">format</name><operator pos:start="389:46" pos:end="389:46">.</operator><name pos:start="389:47" pos:end="389:64">seqhdr_data_length</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="393:5" pos:end="401:5"><if pos:start="393:5" pos:end="401:5">if <condition pos:start="393:8" pos:end="393:48">(<expr pos:start="393:9" pos:end="393:47"><name pos:start="393:9" pos:end="393:23"><name pos:start="393:9" pos:end="393:15">seq_pkt</name><operator pos:start="393:16" pos:end="393:16">.</operator><name pos:start="393:17" pos:end="393:23">payload</name></name> <operator pos:start="393:25" pos:end="393:26">&amp;&amp;</operator> <name pos:start="393:28" pos:end="393:47"><name pos:start="393:28" pos:end="393:34">seq_pkt</name><operator pos:start="393:35" pos:end="393:35">.</operator><name pos:start="393:36" pos:end="393:47">payload_size</name></name></expr>)</condition> <block pos:start="393:50" pos:end="401:5">{<block_content pos:start="395:9" pos:end="399:23">

        <expr_stmt pos:start="395:9" pos:end="395:69"><expr pos:start="395:9" pos:end="395:68"><name pos:start="395:9" pos:end="395:11">ret</name> <operator pos:start="395:13" pos:end="395:13">=</operator> <call pos:start="395:15" pos:end="395:68"><name pos:start="395:15" pos:end="395:22">CHECK_CU</name><argument_list pos:start="395:23" pos:end="395:68">(<argument pos:start="395:24" pos:end="395:67"><expr pos:start="395:24" pos:end="395:67"><call pos:start="395:24" pos:end="395:67"><name pos:start="395:24" pos:end="395:42">cuvidParseVideoData</name><argument_list pos:start="395:43" pos:end="395:67">(<argument pos:start="395:44" pos:end="395:56"><expr pos:start="395:44" pos:end="395:56"><name pos:start="395:44" pos:end="395:56"><name pos:start="395:44" pos:end="395:46">ctx</name><operator pos:start="395:47" pos:end="395:48">-&gt;</operator><name pos:start="395:49" pos:end="395:56">cuparser</name></name></expr></argument>, <argument pos:start="395:59" pos:end="395:66"><expr pos:start="395:59" pos:end="395:66"><operator pos:start="395:59" pos:end="395:59">&amp;</operator><name pos:start="395:60" pos:end="395:66">seq_pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="397:9" pos:end="399:23"><if pos:start="397:9" pos:end="399:23">if <condition pos:start="397:12" pos:end="397:20">(<expr pos:start="397:13" pos:end="397:19"><name pos:start="397:13" pos:end="397:15">ret</name> <operator pos:start="397:17" pos:end="397:17">&lt;</operator> <literal type="number" pos:start="397:19" pos:end="397:19">0</literal></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="399:23"><block_content pos:start="399:13" pos:end="399:23">

            <goto pos:start="399:13" pos:end="399:23">goto <name pos:start="399:18" pos:end="399:22">error</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="405:5" pos:end="405:44"><expr pos:start="405:5" pos:end="405:43"><name pos:start="405:5" pos:end="405:7">ret</name> <operator pos:start="405:9" pos:end="405:9">=</operator> <call pos:start="405:11" pos:end="405:43"><name pos:start="405:11" pos:end="405:18">CHECK_CU</name><argument_list pos:start="405:19" pos:end="405:43">(<argument pos:start="405:20" pos:end="405:42"><expr pos:start="405:20" pos:end="405:42"><call pos:start="405:20" pos:end="405:42"><name pos:start="405:20" pos:end="405:34">cuCtxPopCurrent</name><argument_list pos:start="405:35" pos:end="405:42">(<argument pos:start="405:36" pos:end="405:41"><expr pos:start="405:36" pos:end="405:41"><operator pos:start="405:36" pos:end="405:36">&amp;</operator><name pos:start="405:37" pos:end="405:41">dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="407:5" pos:end="409:19"><if pos:start="407:5" pos:end="409:19">if <condition pos:start="407:8" pos:end="407:16">(<expr pos:start="407:9" pos:end="407:15"><name pos:start="407:9" pos:end="407:11">ret</name> <operator pos:start="407:13" pos:end="407:13">&lt;</operator> <literal type="number" pos:start="407:15" pos:end="407:15">0</literal></expr>)</condition><block type="pseudo" pos:start="409:9" pos:end="409:19"><block_content pos:start="409:9" pos:end="409:19">

        <goto pos:start="409:9" pos:end="409:19">goto <name pos:start="409:14" pos:end="409:18">error</name>;</goto></block_content></block></if></if_stmt>



    <return pos:start="413:5" pos:end="413:13">return <expr pos:start="413:12" pos:end="413:12"><literal type="number" pos:start="413:12" pos:end="413:12">0</literal></expr>;</return>



<label pos:start="417:1" pos:end="417:6"><name pos:start="417:1" pos:end="417:5">error</name>:</label>

    <expr_stmt pos:start="419:5" pos:end="419:28"><expr pos:start="419:5" pos:end="419:27"><call pos:start="419:5" pos:end="419:27"><name pos:start="419:5" pos:end="419:20">cuvid_decode_end</name><argument_list pos:start="419:21" pos:end="419:27">(<argument pos:start="419:22" pos:end="419:26"><expr pos:start="419:22" pos:end="419:26"><name pos:start="419:22" pos:end="419:26">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="421:5" pos:end="421:15">return <expr pos:start="421:12" pos:end="421:14"><name pos:start="421:12" pos:end="421:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
