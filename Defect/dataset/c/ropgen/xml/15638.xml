<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15638.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">test_cancel</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">WorkerTestData</name></type> <name pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:23">data</name><index pos:start="5:24" pos:end="5:28">[<expr pos:start="5:25" pos:end="5:27"><literal type="number" pos:start="5:25" pos:end="5:27">100</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">num_canceled</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* Start more work items than there will be threads, to ensure

     * the pool is full.

     */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><call pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">test_submit_many</name><argument_list pos:start="19:21" pos:end="19:22">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:65">/* Start long running jobs, to ensure we can cancel some.  */</comment>

    <for pos:start="25:5" pos:end="35:5">for <control pos:start="25:9" pos:end="25:29">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:24"><expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <literal type="number" pos:start="25:21" pos:end="25:23">100</literal></expr>;</condition> <incr pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:26">i</name><operator pos:start="25:27" pos:end="25:28">++</operator></expr></incr>)</control> <block pos:start="25:31" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:66">

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">data</name><index pos:start="27:13" pos:end="27:15">[<expr pos:start="27:14" pos:end="27:14"><name pos:start="27:14" pos:end="27:14">i</name></expr>]</index></name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:17">n</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:12">data</name><index pos:start="29:13" pos:end="29:15">[<expr pos:start="29:14" pos:end="29:14"><name pos:start="29:14" pos:end="29:14">i</name></expr>]</index></name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:19">ret</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <operator pos:start="29:23" pos:end="29:23">-</operator><name pos:start="29:24" pos:end="29:34">EINPROGRESS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:66"><expr pos:start="31:9" pos:end="33:65"><name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">data</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><name pos:start="31:14" pos:end="31:14">i</name></expr>]</index></name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:21">aiocb</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="33:65"><name pos:start="31:25" pos:end="31:46">thread_pool_submit_aio</name><argument_list pos:start="31:47" pos:end="33:65">(<argument pos:start="31:48" pos:end="31:54"><expr pos:start="31:48" pos:end="31:54"><name pos:start="31:48" pos:end="31:54">long_cb</name></expr></argument>, <argument pos:start="31:57" pos:end="31:64"><expr pos:start="31:57" pos:end="31:64"><operator pos:start="31:57" pos:end="31:57">&amp;</operator><name pos:start="31:58" pos:end="31:64"><name pos:start="31:58" pos:end="31:61">data</name><index pos:start="31:62" pos:end="31:64">[<expr pos:start="31:63" pos:end="31:63"><name pos:start="31:63" pos:end="31:63">i</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="33:48" pos:end="33:54"><expr pos:start="33:48" pos:end="33:54"><name pos:start="33:48" pos:end="33:54">done_cb</name></expr></argument>, <argument pos:start="33:57" pos:end="33:64"><expr pos:start="33:57" pos:end="33:64"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:64"><name pos:start="33:58" pos:end="33:61">data</name><index pos:start="33:62" pos:end="33:64">[<expr pos:start="33:63" pos:end="33:63"><name pos:start="33:63" pos:end="33:63">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="39:5" pos:end="43:7">/* Starting the threads may be left to a bottom half.  Let it

     * run, but do not waste too much time...

     */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:17"><expr pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:10">active</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:16">100</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><call pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:29">qemu_aio_wait_nonblocking</name><argument_list pos:start="47:30" pos:end="47:31">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="55:7">/* Wait some time for the threads to start, with some sanity

     * testing on the behavior of the scheduler...

     */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><call pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:19">g_assert_cmpint</name><argument_list pos:start="57:20" pos:end="57:36">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">active</name></expr></argument>, <argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><operator pos:start="57:29" pos:end="57:30">==</operator></expr></argument>, <argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><literal type="number" pos:start="57:33" pos:end="57:35">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><call pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:12">g_usleep</name><argument_list pos:start="59:13" pos:end="59:21">(<argument pos:start="59:14" pos:end="59:20"><expr pos:start="59:14" pos:end="59:20"><literal type="number" pos:start="59:14" pos:end="59:20">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><call pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:19">g_assert_cmpint</name><argument_list pos:start="61:20" pos:end="61:34">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">active</name></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><operator pos:start="61:29" pos:end="61:29">&gt;</operator></expr></argument>, <argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><literal type="number" pos:start="61:32" pos:end="61:33">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:57">/* Cancel the jobs that haven't been started yet.  */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:21"><expr pos:start="67:5" pos:end="67:20"><name pos:start="67:5" pos:end="67:16">num_canceled</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>;</expr_stmt>

    <for pos:start="69:5" pos:end="83:5">for <control pos:start="69:9" pos:end="69:29">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:24"><expr pos:start="69:17" pos:end="69:23"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <literal type="number" pos:start="69:21" pos:end="69:23">100</literal></expr>;</condition> <incr pos:start="69:26" pos:end="69:28"><expr pos:start="69:26" pos:end="69:28"><name pos:start="69:26" pos:end="69:26">i</name><operator pos:start="69:27" pos:end="69:28">++</operator></expr></incr>)</control> <block pos:start="69:31" pos:end="83:5">{<block_content pos:start="71:9" pos:end="81:9">

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:63">(<expr pos:start="71:13" pos:end="71:62"><call pos:start="71:13" pos:end="71:57"><name pos:start="71:13" pos:end="71:39">__sync_val_compare_and_swap</name><argument_list pos:start="71:40" pos:end="71:57">(<argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><operator pos:start="71:41" pos:end="71:41">&amp;</operator><name pos:start="71:42" pos:end="71:48"><name pos:start="71:42" pos:end="71:45">data</name><index pos:start="71:46" pos:end="71:48">[<expr pos:start="71:47" pos:end="71:47"><name pos:start="71:47" pos:end="71:47">i</name></expr>]</index></name><operator pos:start="71:49" pos:end="71:49">.</operator><name pos:start="71:50" pos:end="71:50">n</name></expr></argument>, <argument pos:start="71:53" pos:end="71:53"><expr pos:start="71:53" pos:end="71:53"><literal type="number" pos:start="71:53" pos:end="71:53">0</literal></expr></argument>, <argument pos:start="71:56" pos:end="71:56"><expr pos:start="71:56" pos:end="71:56"><literal type="number" pos:start="71:56" pos:end="71:56">3</literal></expr></argument>)</argument_list></call> <operator pos:start="71:59" pos:end="71:60">==</operator> <literal type="number" pos:start="71:62" pos:end="71:62">0</literal></expr>)</condition> <block pos:start="71:65" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:27">

            <expr_stmt pos:start="73:13" pos:end="73:37"><expr pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:16">data</name><index pos:start="73:17" pos:end="73:19">[<expr pos:start="73:18" pos:end="73:18"><name pos:start="73:18" pos:end="73:18">i</name></expr>]</index></name><operator pos:start="73:20" pos:end="73:20">.</operator><name pos:start="73:21" pos:end="73:23">ret</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <operator pos:start="73:27" pos:end="73:27">-</operator><name pos:start="73:28" pos:end="73:36">ECANCELED</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:43"><expr pos:start="75:13" pos:end="75:42"><call pos:start="75:13" pos:end="75:42"><name pos:start="75:13" pos:end="75:27">bdrv_aio_cancel</name><argument_list pos:start="75:28" pos:end="75:42">(<argument pos:start="75:29" pos:end="75:41"><expr pos:start="75:29" pos:end="75:41"><name pos:start="75:29" pos:end="75:35"><name pos:start="75:29" pos:end="75:32">data</name><index pos:start="75:33" pos:end="75:35">[<expr pos:start="75:34" pos:end="75:34"><name pos:start="75:34" pos:end="75:34">i</name></expr>]</index></name><operator pos:start="75:36" pos:end="75:36">.</operator><name pos:start="75:37" pos:end="75:41">aiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:21"><expr pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:18">active</name><operator pos:start="77:19" pos:end="77:20">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:27"><expr pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:24">num_canceled</name><operator pos:start="79:25" pos:end="79:26">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="85:5" pos:end="85:34"><expr pos:start="85:5" pos:end="85:33"><call pos:start="85:5" pos:end="85:33"><name pos:start="85:5" pos:end="85:19">g_assert_cmpint</name><argument_list pos:start="85:20" pos:end="85:33">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">active</name></expr></argument>, <argument pos:start="85:29" pos:end="85:29"><expr pos:start="85:29" pos:end="85:29"><operator pos:start="85:29" pos:end="85:29">&gt;</operator></expr></argument>, <argument pos:start="85:32" pos:end="85:32"><expr pos:start="85:32" pos:end="85:32"><literal type="number" pos:start="85:32" pos:end="85:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:42"><expr pos:start="87:5" pos:end="87:41"><call pos:start="87:5" pos:end="87:41"><name pos:start="87:5" pos:end="87:19">g_assert_cmpint</name><argument_list pos:start="87:20" pos:end="87:41">(<argument pos:start="87:21" pos:end="87:32"><expr pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:32">num_canceled</name></expr></argument>, <argument pos:start="87:35" pos:end="87:35"><expr pos:start="87:35" pos:end="87:35"><operator pos:start="87:35" pos:end="87:35">&lt;</operator></expr></argument>, <argument pos:start="87:38" pos:end="87:40"><expr pos:start="87:38" pos:end="87:40"><literal type="number" pos:start="87:38" pos:end="87:40">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:61">/* Canceling the others will be a blocking operation.  */</comment>

    <for pos:start="93:5" pos:end="101:5">for <control pos:start="93:9" pos:end="93:29">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:24"><expr pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <literal type="number" pos:start="93:21" pos:end="93:23">100</literal></expr>;</condition> <incr pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><name pos:start="93:26" pos:end="93:26">i</name><operator pos:start="93:27" pos:end="93:28">++</operator></expr></incr>)</control> <block pos:start="93:31" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:9">

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:27">(<expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:16">data</name><index pos:start="95:17" pos:end="95:19">[<expr pos:start="95:18" pos:end="95:18"><name pos:start="95:18" pos:end="95:18">i</name></expr>]</index></name><operator pos:start="95:20" pos:end="95:20">.</operator><name pos:start="95:21" pos:end="95:21">n</name> <operator pos:start="95:23" pos:end="95:24">!=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">3</literal></expr>)</condition> <block pos:start="95:29" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:43">

            <expr_stmt pos:start="97:13" pos:end="97:43"><expr pos:start="97:13" pos:end="97:42"><call pos:start="97:13" pos:end="97:42"><name pos:start="97:13" pos:end="97:27">bdrv_aio_cancel</name><argument_list pos:start="97:28" pos:end="97:42">(<argument pos:start="97:29" pos:end="97:41"><expr pos:start="97:29" pos:end="97:41"><name pos:start="97:29" pos:end="97:35"><name pos:start="97:29" pos:end="97:32">data</name><index pos:start="97:33" pos:end="97:35">[<expr pos:start="97:34" pos:end="97:34"><name pos:start="97:34" pos:end="97:34">i</name></expr>]</index></name><operator pos:start="97:36" pos:end="97:36">.</operator><name pos:start="97:37" pos:end="97:41">aiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="105:5" pos:end="105:64">/* Finish execution and execute any remaining callbacks.  */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:24"><expr pos:start="107:5" pos:end="107:23"><call pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:21">qemu_aio_wait_all</name><argument_list pos:start="107:22" pos:end="107:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:35"><expr pos:start="109:5" pos:end="109:34"><call pos:start="109:5" pos:end="109:34"><name pos:start="109:5" pos:end="109:19">g_assert_cmpint</name><argument_list pos:start="109:20" pos:end="109:34">(<argument pos:start="109:21" pos:end="109:26"><expr pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:26">active</name></expr></argument>, <argument pos:start="109:29" pos:end="109:30"><expr pos:start="109:29" pos:end="109:30"><operator pos:start="109:29" pos:end="109:30">==</operator></expr></argument>, <argument pos:start="109:33" pos:end="109:33"><expr pos:start="109:33" pos:end="109:33"><literal type="number" pos:start="109:33" pos:end="109:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="111:5" pos:end="129:5">for <control pos:start="111:9" pos:end="111:29">(<init pos:start="111:10" pos:end="111:15"><expr pos:start="111:10" pos:end="111:14"><name pos:start="111:10" pos:end="111:10">i</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr>;</init> <condition pos:start="111:17" pos:end="111:24"><expr pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:17">i</name> <operator pos:start="111:19" pos:end="111:19">&lt;</operator> <literal type="number" pos:start="111:21" pos:end="111:23">100</literal></expr>;</condition> <incr pos:start="111:26" pos:end="111:28"><expr pos:start="111:26" pos:end="111:28"><name pos:start="111:26" pos:end="111:26">i</name><operator pos:start="111:27" pos:end="111:28">++</operator></expr></incr>)</control> <block pos:start="111:31" pos:end="129:5">{<block_content pos:start="113:9" pos:end="127:9">

        <if_stmt pos:start="113:9" pos:end="127:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:27">(<expr pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:16">data</name><index pos:start="113:17" pos:end="113:19">[<expr pos:start="113:18" pos:end="113:18"><name pos:start="113:18" pos:end="113:18">i</name></expr>]</index></name><operator pos:start="113:20" pos:end="113:20">.</operator><name pos:start="113:21" pos:end="113:21">n</name> <operator pos:start="113:23" pos:end="113:24">==</operator> <literal type="number" pos:start="113:26" pos:end="113:26">3</literal></expr>)</condition> <block pos:start="113:29" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:44">

            <expr_stmt pos:start="115:13" pos:end="115:57"><expr pos:start="115:13" pos:end="115:56"><call pos:start="115:13" pos:end="115:56"><name pos:start="115:13" pos:end="115:27">g_assert_cmpint</name><argument_list pos:start="115:28" pos:end="115:56">(<argument pos:start="115:29" pos:end="115:39"><expr pos:start="115:29" pos:end="115:39"><name pos:start="115:29" pos:end="115:35"><name pos:start="115:29" pos:end="115:32">data</name><index pos:start="115:33" pos:end="115:35">[<expr pos:start="115:34" pos:end="115:34"><name pos:start="115:34" pos:end="115:34">i</name></expr>]</index></name><operator pos:start="115:36" pos:end="115:36">.</operator><name pos:start="115:37" pos:end="115:39">ret</name></expr></argument>, <argument pos:start="115:42" pos:end="115:43"><expr pos:start="115:42" pos:end="115:43"><operator pos:start="115:42" pos:end="115:43">==</operator></expr></argument>, <argument pos:start="115:46" pos:end="115:55"><expr pos:start="115:46" pos:end="115:55"><operator pos:start="115:46" pos:end="115:46">-</operator><name pos:start="115:47" pos:end="115:55">ECANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:44"><expr pos:start="117:13" pos:end="117:43"><call pos:start="117:13" pos:end="117:43"><name pos:start="117:13" pos:end="117:20">g_assert</name><argument_list pos:start="117:21" pos:end="117:43">(<argument pos:start="117:22" pos:end="117:42"><expr pos:start="117:22" pos:end="117:42"><name pos:start="117:22" pos:end="117:28"><name pos:start="117:22" pos:end="117:25">data</name><index pos:start="117:26" pos:end="117:28">[<expr pos:start="117:27" pos:end="117:27"><name pos:start="117:27" pos:end="117:27">i</name></expr>]</index></name><operator pos:start="117:29" pos:end="117:29">.</operator><name pos:start="117:30" pos:end="117:34">aiocb</name> <operator pos:start="117:36" pos:end="117:37">!=</operator> <name pos:start="117:39" pos:end="117:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="127:9">else <block pos:start="119:16" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:44">

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><call pos:start="121:13" pos:end="121:45"><name pos:start="121:13" pos:end="121:27">g_assert_cmpint</name><argument_list pos:start="121:28" pos:end="121:45">(<argument pos:start="121:29" pos:end="121:37"><expr pos:start="121:29" pos:end="121:37"><name pos:start="121:29" pos:end="121:35"><name pos:start="121:29" pos:end="121:32">data</name><index pos:start="121:33" pos:end="121:35">[<expr pos:start="121:34" pos:end="121:34"><name pos:start="121:34" pos:end="121:34">i</name></expr>]</index></name><operator pos:start="121:36" pos:end="121:36">.</operator><name pos:start="121:37" pos:end="121:37">n</name></expr></argument>, <argument pos:start="121:40" pos:end="121:41"><expr pos:start="121:40" pos:end="121:41"><operator pos:start="121:40" pos:end="121:41">==</operator></expr></argument>, <argument pos:start="121:44" pos:end="121:44"><expr pos:start="121:44" pos:end="121:44"><literal type="number" pos:start="121:44" pos:end="121:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:48"><expr pos:start="123:13" pos:end="123:47"><call pos:start="123:13" pos:end="123:47"><name pos:start="123:13" pos:end="123:27">g_assert_cmpint</name><argument_list pos:start="123:28" pos:end="123:47">(<argument pos:start="123:29" pos:end="123:39"><expr pos:start="123:29" pos:end="123:39"><name pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:32">data</name><index pos:start="123:33" pos:end="123:35">[<expr pos:start="123:34" pos:end="123:34"><name pos:start="123:34" pos:end="123:34">i</name></expr>]</index></name><operator pos:start="123:36" pos:end="123:36">.</operator><name pos:start="123:37" pos:end="123:39">ret</name></expr></argument>, <argument pos:start="123:42" pos:end="123:43"><expr pos:start="123:42" pos:end="123:43"><operator pos:start="123:42" pos:end="123:43">==</operator></expr></argument>, <argument pos:start="123:46" pos:end="123:46"><expr pos:start="123:46" pos:end="123:46"><literal type="number" pos:start="123:46" pos:end="123:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:44"><expr pos:start="125:13" pos:end="125:43"><call pos:start="125:13" pos:end="125:43"><name pos:start="125:13" pos:end="125:20">g_assert</name><argument_list pos:start="125:21" pos:end="125:43">(<argument pos:start="125:22" pos:end="125:42"><expr pos:start="125:22" pos:end="125:42"><name pos:start="125:22" pos:end="125:28"><name pos:start="125:22" pos:end="125:25">data</name><index pos:start="125:26" pos:end="125:28">[<expr pos:start="125:27" pos:end="125:27"><name pos:start="125:27" pos:end="125:27">i</name></expr>]</index></name><operator pos:start="125:29" pos:end="125:29">.</operator><name pos:start="125:30" pos:end="125:34">aiocb</name> <operator pos:start="125:36" pos:end="125:37">==</operator> <name pos:start="125:39" pos:end="125:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
