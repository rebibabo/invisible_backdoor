<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/927.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">arm_tr_tb_stop</name><parameter_list pos:start="1:27" pos:end="1:67">(<parameter pos:start="1:28" pos:end="1:51"><decl pos:start="1:28" pos:end="1:51"><type pos:start="1:28" pos:end="1:51"><name pos:start="1:28" pos:end="1:43">DisasContextBase</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">dcbase</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:66"><decl pos:start="1:54" pos:end="1:66"><type pos:start="1:54" pos:end="1:66"><name pos:start="1:54" pos:end="1:61">CPUState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="231:1">{<block_content pos:start="5:5" pos:end="229:30">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DisasContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">dc</name> <init pos:start="5:22" pos:end="5:63">= <expr pos:start="5:24" pos:end="5:63"><call pos:start="5:24" pos:end="5:63"><name pos:start="5:24" pos:end="5:35">container_of</name><argument_list pos:start="5:36" pos:end="5:63">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:42">dcbase</name></expr></argument>, <argument pos:start="5:45" pos:end="5:56"><expr pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:56">DisasContext</name></expr></argument>, <argument pos:start="5:59" pos:end="5:62"><expr pos:start="5:59" pos:end="5:62"><name pos:start="5:59" pos:end="5:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:56">(<expr pos:start="9:9" pos:end="9:55"><name pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:10">dc</name><operator pos:start="9:11" pos:end="9:12">-&gt;</operator><name pos:start="9:13" pos:end="9:16">base</name><operator pos:start="9:17" pos:end="9:17">.</operator><name pos:start="9:18" pos:end="9:19">tb</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:27">cflags</name></name> <operator pos:start="9:29" pos:end="9:29">&amp;</operator> <name pos:start="9:31" pos:end="9:40">CF_LAST_IO</name> <operator pos:start="9:42" pos:end="9:43">&amp;&amp;</operator> <name pos:start="9:45" pos:end="9:55"><name pos:start="9:45" pos:end="9:46">dc</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:55">condjmp</name></name></expr>)</condition> <block pos:start="9:58" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:63">

        <comment type="block" pos:start="11:9" pos:end="11:76">/* FIXME: This can theoretically happen with self-modifying code. */</comment>

        <expr_stmt pos:start="13:9" pos:end="13:63"><expr pos:start="13:9" pos:end="13:62"><call pos:start="13:9" pos:end="13:62"><name pos:start="13:9" pos:end="13:17">cpu_abort</name><argument_list pos:start="13:18" pos:end="13:62">(<argument pos:start="13:19" pos:end="13:21"><expr pos:start="13:19" pos:end="13:21"><name pos:start="13:19" pos:end="13:21">cpu</name></expr></argument>, <argument pos:start="13:24" pos:end="13:61"><expr pos:start="13:24" pos:end="13:61"><literal type="string" pos:start="13:24" pos:end="13:61">"IO on conditional branch instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="23:32">/* At this stage dc-&gt;condjmp will only be set when the skipped

       instruction was a conditional branch or trap, and the PC has

       already been written.  */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><call pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:20">gen_set_condexec</name><argument_list pos:start="25:21" pos:end="25:24">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="199:5"><if pos:start="27:5" pos:end="41:5">if <condition pos:start="27:8" pos:end="27:43">(<expr pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:10">dc</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:16">base</name><operator pos:start="27:17" pos:end="27:17">.</operator><name pos:start="27:18" pos:end="27:23">is_jmp</name></name> <operator pos:start="27:25" pos:end="27:26">==</operator> <name pos:start="27:28" pos:end="27:42">DISAS_BX_EXCRET</name></expr>)</condition> <block pos:start="27:45" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:37">

        <comment type="block" pos:start="29:9" pos:end="37:11">/* Exception return branches need some special case code at the

         * end of the TB, which is complex enough that it has to

         * handle the single-step vs not and the condition-failed

         * insn codepath itself.

         */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:37"><expr pos:start="39:9" pos:end="39:36"><call pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:32">gen_bx_excret_final_code</name><argument_list pos:start="39:33" pos:end="39:36">(<argument pos:start="39:34" pos:end="39:35"><expr pos:start="39:34" pos:end="39:35"><name pos:start="39:34" pos:end="39:35">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="97:5">else if <condition pos:start="41:15" pos:end="41:47">(<expr pos:start="41:16" pos:end="41:46"><call pos:start="41:16" pos:end="41:46"><name pos:start="41:16" pos:end="41:23">unlikely</name><argument_list pos:start="41:24" pos:end="41:46">(<argument pos:start="41:25" pos:end="41:45"><expr pos:start="41:25" pos:end="41:45"><call pos:start="41:25" pos:end="41:45"><name pos:start="41:25" pos:end="41:41">is_singlestepping</name><argument_list pos:start="41:42" pos:end="41:45">(<argument pos:start="41:43" pos:end="41:44"><expr pos:start="41:43" pos:end="41:44"><name pos:start="41:43" pos:end="41:44">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:49" pos:end="97:5">{<block_content pos:start="45:9" pos:end="95:9">

        <comment type="block" pos:start="43:9" pos:end="43:72">/* Unconditional and "condition passed" instruction codepath. */</comment>

        <switch pos:start="45:9" pos:end="95:9">switch <condition pos:start="45:16" pos:end="45:32">(<expr pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:18">dc</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:24">base</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:31">is_jmp</name></name></expr>)</condition> <block pos:start="45:34" pos:end="95:9">{<block_content pos:start="47:9" pos:end="93:18">

        <case pos:start="47:9" pos:end="47:23">case <expr pos:start="47:14" pos:end="47:22"><name pos:start="47:14" pos:end="47:22">DISAS_SWI</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:31"><expr pos:start="49:13" pos:end="49:30"><call pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:26">gen_ss_advance</name><argument_list pos:start="49:27" pos:end="49:30">(<argument pos:start="49:28" pos:end="49:29"><expr pos:start="49:28" pos:end="49:29"><name pos:start="49:28" pos:end="49:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="53:52"><expr pos:start="51:13" pos:end="53:51"><call pos:start="51:13" pos:end="53:51"><name pos:start="51:13" pos:end="51:25">gen_exception</name><argument_list pos:start="51:26" pos:end="53:51">(<argument pos:start="51:27" pos:end="51:34"><expr pos:start="51:27" pos:end="51:34"><name pos:start="51:27" pos:end="51:34">EXCP_SWI</name></expr></argument>, <argument pos:start="51:37" pos:end="51:72"><expr pos:start="51:37" pos:end="51:72"><call pos:start="51:37" pos:end="51:72"><name pos:start="51:37" pos:end="51:48">syn_aa32_svc</name><argument_list pos:start="51:49" pos:end="51:72">(<argument pos:start="51:50" pos:end="51:60"><expr pos:start="51:50" pos:end="51:60"><name pos:start="51:50" pos:end="51:60"><name pos:start="51:50" pos:end="51:51">dc</name><operator pos:start="51:52" pos:end="51:53">-&gt;</operator><name pos:start="51:54" pos:end="51:60">svc_imm</name></name></expr></argument>, <argument pos:start="51:63" pos:end="51:71"><expr pos:start="51:63" pos:end="51:71"><name pos:start="51:63" pos:end="51:71"><name pos:start="51:63" pos:end="51:64">dc</name><operator pos:start="51:65" pos:end="51:66">-&gt;</operator><name pos:start="51:67" pos:end="51:71">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="53:27" pos:end="53:50"><expr pos:start="53:27" pos:end="53:50"><call pos:start="53:27" pos:end="53:50"><name pos:start="53:27" pos:end="53:46">default_exception_el</name><argument_list pos:start="53:47" pos:end="53:50">(<argument pos:start="53:48" pos:end="53:49"><expr pos:start="53:48" pos:end="53:49"><name pos:start="53:48" pos:end="53:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:23">case <expr pos:start="57:14" pos:end="57:22"><name pos:start="57:14" pos:end="57:22">DISAS_HVC</name></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:31"><expr pos:start="59:13" pos:end="59:30"><call pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:26">gen_ss_advance</name><argument_list pos:start="59:27" pos:end="59:30">(<argument pos:start="59:28" pos:end="59:29"><expr pos:start="59:28" pos:end="59:29"><name pos:start="59:28" pos:end="59:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:66"><expr pos:start="61:13" pos:end="61:65"><call pos:start="61:13" pos:end="61:65"><name pos:start="61:13" pos:end="61:25">gen_exception</name><argument_list pos:start="61:26" pos:end="61:65">(<argument pos:start="61:27" pos:end="61:34"><expr pos:start="61:27" pos:end="61:34"><name pos:start="61:27" pos:end="61:34">EXCP_HVC</name></expr></argument>, <argument pos:start="61:37" pos:end="61:61"><expr pos:start="61:37" pos:end="61:61"><call pos:start="61:37" pos:end="61:61"><name pos:start="61:37" pos:end="61:48">syn_aa32_hvc</name><argument_list pos:start="61:49" pos:end="61:61">(<argument pos:start="61:50" pos:end="61:60"><expr pos:start="61:50" pos:end="61:60"><name pos:start="61:50" pos:end="61:60"><name pos:start="61:50" pos:end="61:51">dc</name><operator pos:start="61:52" pos:end="61:53">-&gt;</operator><name pos:start="61:54" pos:end="61:60">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:64" pos:end="61:64"><expr pos:start="61:64" pos:end="61:64"><literal type="number" pos:start="61:64" pos:end="61:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:23">case <expr pos:start="65:14" pos:end="65:22"><name pos:start="65:14" pos:end="65:22">DISAS_SMC</name></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:31"><expr pos:start="67:13" pos:end="67:30"><call pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:26">gen_ss_advance</name><argument_list pos:start="67:27" pos:end="67:30">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:55"><expr pos:start="69:13" pos:end="69:54"><call pos:start="69:13" pos:end="69:54"><name pos:start="69:13" pos:end="69:25">gen_exception</name><argument_list pos:start="69:26" pos:end="69:54">(<argument pos:start="69:27" pos:end="69:34"><expr pos:start="69:27" pos:end="69:34"><name pos:start="69:27" pos:end="69:34">EXCP_SMC</name></expr></argument>, <argument pos:start="69:37" pos:end="69:50"><expr pos:start="69:37" pos:end="69:50"><call pos:start="69:37" pos:end="69:50"><name pos:start="69:37" pos:end="69:48">syn_aa32_smc</name><argument_list pos:start="69:49" pos:end="69:50">()</argument_list></call></expr></argument>, <argument pos:start="69:53" pos:end="69:53"><expr pos:start="69:53" pos:end="69:53"><literal type="number" pos:start="69:53" pos:end="69:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:24">case <expr pos:start="73:14" pos:end="73:23"><name pos:start="73:14" pos:end="73:23">DISAS_NEXT</name></expr>:</case>

        <case pos:start="75:9" pos:end="75:28">case <expr pos:start="75:14" pos:end="75:27"><name pos:start="75:14" pos:end="75:27">DISAS_TOO_MANY</name></expr>:</case>

        <case pos:start="77:9" pos:end="77:26">case <expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:25">DISAS_UPDATE</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:38"><expr pos:start="79:13" pos:end="79:37"><call pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:25">gen_set_pc_im</name><argument_list pos:start="79:26" pos:end="79:37">(<argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><name pos:start="79:27" pos:end="79:28">dc</name></expr></argument>, <argument pos:start="79:31" pos:end="79:36"><expr pos:start="79:31" pos:end="79:36"><name pos:start="79:31" pos:end="79:36"><name pos:start="79:31" pos:end="79:32">dc</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="81:13" pos:end="81:30">/* fall through */</comment>

        <default pos:start="83:9" pos:end="83:16">default:</default>

            <comment type="block" pos:start="85:13" pos:end="85:74">/* FIXME: Single stepping a WFI insn will not halt the CPU. */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:41"><expr pos:start="87:13" pos:end="87:40"><call pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:36">gen_singlestep_exception</name><argument_list pos:start="87:37" pos:end="87:40">(<argument pos:start="87:38" pos:end="87:39"><expr pos:start="87:38" pos:end="87:39"><name pos:start="87:38" pos:end="87:39">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:28">case <expr pos:start="91:14" pos:end="91:27"><name pos:start="91:14" pos:end="91:27">DISAS_NORETURN</name></expr>:</case>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="199:5">else <block pos:start="97:12" pos:end="199:5">{<block_content pos:start="115:9" pos:end="197:9">

        <comment type="block" pos:start="99:9" pos:end="113:11">/* While branches must always occur at the end of an IT block,

           there are a few other things that can cause us to terminate

           the TB in the middle of an IT block:

            - Exception generating instructions (bkpt, swi, undefined).

            - Page boundaries.

            - Hardware watchpoints.

           Hardware breakpoints have already been handled and skip this code.

         */</comment>

        <switch pos:start="115:9" pos:end="197:9">switch<condition pos:start="115:15" pos:end="115:31">(<expr pos:start="115:16" pos:end="115:30"><name pos:start="115:16" pos:end="115:30"><name pos:start="115:16" pos:end="115:17">dc</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:23">base</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:30">is_jmp</name></name></expr>)</condition> <block pos:start="115:33" pos:end="197:9">{<block_content pos:start="117:9" pos:end="195:18">

        <case pos:start="117:9" pos:end="117:24">case <expr pos:start="117:14" pos:end="117:23"><name pos:start="117:14" pos:end="117:23">DISAS_NEXT</name></expr>:</case>

        <case pos:start="119:9" pos:end="119:28">case <expr pos:start="119:14" pos:end="119:27"><name pos:start="119:14" pos:end="119:27">DISAS_TOO_MANY</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:39"><expr pos:start="121:13" pos:end="121:38"><call pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:23">gen_goto_tb</name><argument_list pos:start="121:24" pos:end="121:38">(<argument pos:start="121:25" pos:end="121:26"><expr pos:start="121:25" pos:end="121:26"><name pos:start="121:25" pos:end="121:26">dc</name></expr></argument>, <argument pos:start="121:29" pos:end="121:29"><expr pos:start="121:29" pos:end="121:29"><literal type="number" pos:start="121:29" pos:end="121:29">1</literal></expr></argument>, <argument pos:start="121:32" pos:end="121:37"><expr pos:start="121:32" pos:end="121:37"><name pos:start="121:32" pos:end="121:37"><name pos:start="121:32" pos:end="121:33">dc</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:24">case <expr pos:start="125:14" pos:end="125:23"><name pos:start="125:14" pos:end="125:23">DISAS_JUMP</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:27"><expr pos:start="127:13" pos:end="127:26"><call pos:start="127:13" pos:end="127:26"><name pos:start="127:13" pos:end="127:24">gen_goto_ptr</name><argument_list pos:start="127:25" pos:end="127:26">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <case pos:start="131:9" pos:end="131:26">case <expr pos:start="131:14" pos:end="131:25"><name pos:start="131:14" pos:end="131:25">DISAS_UPDATE</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:38"><expr pos:start="133:13" pos:end="133:37"><call pos:start="133:13" pos:end="133:37"><name pos:start="133:13" pos:end="133:25">gen_set_pc_im</name><argument_list pos:start="133:26" pos:end="133:37">(<argument pos:start="133:27" pos:end="133:28"><expr pos:start="133:27" pos:end="133:28"><name pos:start="133:27" pos:end="133:28">dc</name></expr></argument>, <argument pos:start="133:31" pos:end="133:36"><expr pos:start="133:31" pos:end="133:36"><name pos:start="133:31" pos:end="133:36"><name pos:start="133:31" pos:end="133:32">dc</name><operator pos:start="133:33" pos:end="133:34">-&gt;</operator><name pos:start="133:35" pos:end="133:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="135:13" pos:end="135:30">/* fall through */</comment>

        <default pos:start="137:9" pos:end="137:16">default:</default>

            <comment type="block" pos:start="139:13" pos:end="139:79">/* indicate that the hash table must be used to find the next TB */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:31"><expr pos:start="141:13" pos:end="141:30"><call pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:27">tcg_gen_exit_tb</name><argument_list pos:start="141:28" pos:end="141:30">(<argument pos:start="141:29" pos:end="141:29"><expr pos:start="141:29" pos:end="141:29"><literal type="number" pos:start="141:29" pos:end="141:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:28">case <expr pos:start="145:14" pos:end="145:27"><name pos:start="145:14" pos:end="145:27">DISAS_NORETURN</name></expr>:</case>

            <comment type="block" pos:start="147:13" pos:end="147:42">/* nothing more to generate */</comment>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="151:23">case <expr pos:start="151:14" pos:end="151:22"><name pos:start="151:14" pos:end="151:22">DISAS_WFI</name></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:36"><expr pos:start="153:13" pos:end="153:35"><call pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:26">gen_helper_wfi</name><argument_list pos:start="153:27" pos:end="153:35">(<argument pos:start="153:28" pos:end="153:34"><expr pos:start="153:28" pos:end="153:34"><name pos:start="153:28" pos:end="153:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="155:13" pos:end="159:15">/* The helper doesn't necessarily throw an exception, but we

             * must go back to the main loop to check for interrupts anyway.

             */</comment>

            <expr_stmt pos:start="161:13" pos:end="161:31"><expr pos:start="161:13" pos:end="161:30"><call pos:start="161:13" pos:end="161:30"><name pos:start="161:13" pos:end="161:27">tcg_gen_exit_tb</name><argument_list pos:start="161:28" pos:end="161:30">(<argument pos:start="161:29" pos:end="161:29"><expr pos:start="161:29" pos:end="161:29"><literal type="number" pos:start="161:29" pos:end="161:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <case pos:start="165:9" pos:end="165:23">case <expr pos:start="165:14" pos:end="165:22"><name pos:start="165:14" pos:end="165:22">DISAS_WFE</name></expr>:</case>

            <expr_stmt pos:start="167:13" pos:end="167:36"><expr pos:start="167:13" pos:end="167:35"><call pos:start="167:13" pos:end="167:35"><name pos:start="167:13" pos:end="167:26">gen_helper_wfe</name><argument_list pos:start="167:27" pos:end="167:35">(<argument pos:start="167:28" pos:end="167:34"><expr pos:start="167:28" pos:end="167:34"><name pos:start="167:28" pos:end="167:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="169:13" pos:end="169:18">break;</break>

        <case pos:start="171:9" pos:end="171:25">case <expr pos:start="171:14" pos:end="171:24"><name pos:start="171:14" pos:end="171:24">DISAS_YIELD</name></expr>:</case>

            <expr_stmt pos:start="173:13" pos:end="173:38"><expr pos:start="173:13" pos:end="173:37"><call pos:start="173:13" pos:end="173:37"><name pos:start="173:13" pos:end="173:28">gen_helper_yield</name><argument_list pos:start="173:29" pos:end="173:37">(<argument pos:start="173:30" pos:end="173:36"><expr pos:start="173:30" pos:end="173:36"><name pos:start="173:30" pos:end="173:36">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        <case pos:start="177:9" pos:end="177:23">case <expr pos:start="177:14" pos:end="177:22"><name pos:start="177:14" pos:end="177:22">DISAS_SWI</name></expr>:</case>

            <expr_stmt pos:start="179:13" pos:end="181:52"><expr pos:start="179:13" pos:end="181:51"><call pos:start="179:13" pos:end="181:51"><name pos:start="179:13" pos:end="179:25">gen_exception</name><argument_list pos:start="179:26" pos:end="181:51">(<argument pos:start="179:27" pos:end="179:34"><expr pos:start="179:27" pos:end="179:34"><name pos:start="179:27" pos:end="179:34">EXCP_SWI</name></expr></argument>, <argument pos:start="179:37" pos:end="179:72"><expr pos:start="179:37" pos:end="179:72"><call pos:start="179:37" pos:end="179:72"><name pos:start="179:37" pos:end="179:48">syn_aa32_svc</name><argument_list pos:start="179:49" pos:end="179:72">(<argument pos:start="179:50" pos:end="179:60"><expr pos:start="179:50" pos:end="179:60"><name pos:start="179:50" pos:end="179:60"><name pos:start="179:50" pos:end="179:51">dc</name><operator pos:start="179:52" pos:end="179:53">-&gt;</operator><name pos:start="179:54" pos:end="179:60">svc_imm</name></name></expr></argument>, <argument pos:start="179:63" pos:end="179:71"><expr pos:start="179:63" pos:end="179:71"><name pos:start="179:63" pos:end="179:71"><name pos:start="179:63" pos:end="179:64">dc</name><operator pos:start="179:65" pos:end="179:66">-&gt;</operator><name pos:start="179:67" pos:end="179:71">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="181:27" pos:end="181:50"><expr pos:start="181:27" pos:end="181:50"><call pos:start="181:27" pos:end="181:50"><name pos:start="181:27" pos:end="181:46">default_exception_el</name><argument_list pos:start="181:47" pos:end="181:50">(<argument pos:start="181:48" pos:end="181:49"><expr pos:start="181:48" pos:end="181:49"><name pos:start="181:48" pos:end="181:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        <case pos:start="185:9" pos:end="185:23">case <expr pos:start="185:14" pos:end="185:22"><name pos:start="185:14" pos:end="185:22">DISAS_HVC</name></expr>:</case>

            <expr_stmt pos:start="187:13" pos:end="187:66"><expr pos:start="187:13" pos:end="187:65"><call pos:start="187:13" pos:end="187:65"><name pos:start="187:13" pos:end="187:25">gen_exception</name><argument_list pos:start="187:26" pos:end="187:65">(<argument pos:start="187:27" pos:end="187:34"><expr pos:start="187:27" pos:end="187:34"><name pos:start="187:27" pos:end="187:34">EXCP_HVC</name></expr></argument>, <argument pos:start="187:37" pos:end="187:61"><expr pos:start="187:37" pos:end="187:61"><call pos:start="187:37" pos:end="187:61"><name pos:start="187:37" pos:end="187:48">syn_aa32_hvc</name><argument_list pos:start="187:49" pos:end="187:61">(<argument pos:start="187:50" pos:end="187:60"><expr pos:start="187:50" pos:end="187:60"><name pos:start="187:50" pos:end="187:60"><name pos:start="187:50" pos:end="187:51">dc</name><operator pos:start="187:52" pos:end="187:53">-&gt;</operator><name pos:start="187:54" pos:end="187:60">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="187:64" pos:end="187:64"><expr pos:start="187:64" pos:end="187:64"><literal type="number" pos:start="187:64" pos:end="187:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        <case pos:start="191:9" pos:end="191:23">case <expr pos:start="191:14" pos:end="191:22"><name pos:start="191:14" pos:end="191:22">DISAS_SMC</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:55"><expr pos:start="193:13" pos:end="193:54"><call pos:start="193:13" pos:end="193:54"><name pos:start="193:13" pos:end="193:25">gen_exception</name><argument_list pos:start="193:26" pos:end="193:54">(<argument pos:start="193:27" pos:end="193:34"><expr pos:start="193:27" pos:end="193:34"><name pos:start="193:27" pos:end="193:34">EXCP_SMC</name></expr></argument>, <argument pos:start="193:37" pos:end="193:50"><expr pos:start="193:37" pos:end="193:50"><call pos:start="193:37" pos:end="193:50"><name pos:start="193:37" pos:end="193:48">syn_aa32_smc</name><argument_list pos:start="193:49" pos:end="193:50">()</argument_list></call></expr></argument>, <argument pos:start="193:53" pos:end="193:53"><expr pos:start="193:53" pos:end="193:53"><literal type="number" pos:start="193:53" pos:end="193:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="203:5" pos:end="223:5"><if pos:start="203:5" pos:end="223:5">if <condition pos:start="203:8" pos:end="203:20">(<expr pos:start="203:9" pos:end="203:19"><name pos:start="203:9" pos:end="203:19"><name pos:start="203:9" pos:end="203:10">dc</name><operator pos:start="203:11" pos:end="203:12">-&gt;</operator><name pos:start="203:13" pos:end="203:19">condjmp</name></name></expr>)</condition> <block pos:start="203:22" pos:end="223:5">{<block_content pos:start="207:9" pos:end="221:9">

        <comment type="block" pos:start="205:9" pos:end="205:78">/* "Condition failed" instruction codepath for the branch/trap insn */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:37"><expr pos:start="207:9" pos:end="207:36"><call pos:start="207:9" pos:end="207:36"><name pos:start="207:9" pos:end="207:21">gen_set_label</name><argument_list pos:start="207:22" pos:end="207:36">(<argument pos:start="207:23" pos:end="207:35"><expr pos:start="207:23" pos:end="207:35"><name pos:start="207:23" pos:end="207:35"><name pos:start="207:23" pos:end="207:24">dc</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:35">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:29"><expr pos:start="209:9" pos:end="209:28"><call pos:start="209:9" pos:end="209:28"><name pos:start="209:9" pos:end="209:24">gen_set_condexec</name><argument_list pos:start="209:25" pos:end="209:28">(<argument pos:start="209:26" pos:end="209:27"><expr pos:start="209:26" pos:end="209:27"><name pos:start="209:26" pos:end="209:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="221:9"><if pos:start="211:9" pos:end="217:9">if <condition pos:start="211:12" pos:end="211:44">(<expr pos:start="211:13" pos:end="211:43"><call pos:start="211:13" pos:end="211:43"><name pos:start="211:13" pos:end="211:20">unlikely</name><argument_list pos:start="211:21" pos:end="211:43">(<argument pos:start="211:22" pos:end="211:42"><expr pos:start="211:22" pos:end="211:42"><call pos:start="211:22" pos:end="211:42"><name pos:start="211:22" pos:end="211:38">is_singlestepping</name><argument_list pos:start="211:39" pos:end="211:42">(<argument pos:start="211:40" pos:end="211:41"><expr pos:start="211:40" pos:end="211:41"><name pos:start="211:40" pos:end="211:41">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="211:46" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:41">

            <expr_stmt pos:start="213:13" pos:end="213:38"><expr pos:start="213:13" pos:end="213:37"><call pos:start="213:13" pos:end="213:37"><name pos:start="213:13" pos:end="213:25">gen_set_pc_im</name><argument_list pos:start="213:26" pos:end="213:37">(<argument pos:start="213:27" pos:end="213:28"><expr pos:start="213:27" pos:end="213:28"><name pos:start="213:27" pos:end="213:28">dc</name></expr></argument>, <argument pos:start="213:31" pos:end="213:36"><expr pos:start="213:31" pos:end="213:36"><name pos:start="213:31" pos:end="213:36"><name pos:start="213:31" pos:end="213:32">dc</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:41"><expr pos:start="215:13" pos:end="215:40"><call pos:start="215:13" pos:end="215:40"><name pos:start="215:13" pos:end="215:36">gen_singlestep_exception</name><argument_list pos:start="215:37" pos:end="215:40">(<argument pos:start="215:38" pos:end="215:39"><expr pos:start="215:38" pos:end="215:39"><name pos:start="215:38" pos:end="215:39">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="217:11" pos:end="221:9">else <block pos:start="217:16" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:39">

            <expr_stmt pos:start="219:13" pos:end="219:39"><expr pos:start="219:13" pos:end="219:38"><call pos:start="219:13" pos:end="219:38"><name pos:start="219:13" pos:end="219:23">gen_goto_tb</name><argument_list pos:start="219:24" pos:end="219:38">(<argument pos:start="219:25" pos:end="219:26"><expr pos:start="219:25" pos:end="219:26"><name pos:start="219:25" pos:end="219:26">dc</name></expr></argument>, <argument pos:start="219:29" pos:end="219:29"><expr pos:start="219:29" pos:end="219:29"><literal type="number" pos:start="219:29" pos:end="219:29">1</literal></expr></argument>, <argument pos:start="219:32" pos:end="219:37"><expr pos:start="219:32" pos:end="219:37"><name pos:start="219:32" pos:end="219:37"><name pos:start="219:32" pos:end="219:33">dc</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:68">/* Functions above can change dc-&gt;pc, so re-align db-&gt;pc_next */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:30"><expr pos:start="229:5" pos:end="229:29"><name pos:start="229:5" pos:end="229:20"><name pos:start="229:5" pos:end="229:6">dc</name><operator pos:start="229:7" pos:end="229:8">-&gt;</operator><name pos:start="229:9" pos:end="229:12">base</name><operator pos:start="229:13" pos:end="229:13">.</operator><name pos:start="229:14" pos:end="229:20">pc_next</name></name> <operator pos:start="229:22" pos:end="229:22">=</operator> <name pos:start="229:24" pos:end="229:29"><name pos:start="229:24" pos:end="229:25">dc</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:29">pc</name></name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
