<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25529.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">kvm_arch_put_registers</name><parameter_list pos:start="1:27" pos:end="1:51">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">cs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:50"><decl pos:start="1:42" pos:end="1:50"><type pos:start="1:42" pos:end="1:50"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:50">level</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="251:1">{<block_content pos:start="5:5" pos:end="249:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">kvm_one_reg</name></name></type> <name pos:start="5:24" pos:end="5:26">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">fpr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">ARMCPU</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:15">cpu</name> <init pos:start="17:17" pos:end="17:29">= <expr pos:start="17:19" pos:end="17:29"><call pos:start="17:19" pos:end="17:29"><name pos:start="17:19" pos:end="17:25">ARM_CPU</name><argument_list pos:start="17:26" pos:end="17:29">(<argument pos:start="17:27" pos:end="17:28"><expr pos:start="17:27" pos:end="17:28"><name pos:start="17:27" pos:end="17:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUARMState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name> <init pos:start="19:22" pos:end="19:32">= <expr pos:start="19:24" pos:end="19:32"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:27">cpu</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:32">env</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="27:7">/* If we are in AArch32 mode then we need to copy the AArch32 regs to the

     * AArch64 registers before pushing them out to 64-bit KVM.

     */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:20"><name pos:start="29:10" pos:end="29:15">is_a64</name><argument_list pos:start="29:16" pos:end="29:20">(<argument pos:start="29:17" pos:end="29:19"><expr pos:start="29:17" pos:end="29:19"><name pos:start="29:17" pos:end="29:19">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:23" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:35">

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><call pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:29">aarch64_sync_32_to_64</name><argument_list pos:start="31:30" pos:end="31:34">(<argument pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="37:5" pos:end="51:5">for <control pos:start="37:9" pos:end="37:28">(<init pos:start="37:10" pos:end="37:15"><expr pos:start="37:10" pos:end="37:14"><name pos:start="37:10" pos:end="37:10">i</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">0</literal></expr>;</init> <condition pos:start="37:17" pos:end="37:23"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:19">&lt;</operator> <literal type="number" pos:start="37:21" pos:end="37:22">31</literal></expr>;</condition> <incr pos:start="37:25" pos:end="37:27"><expr pos:start="37:25" pos:end="37:27"><name pos:start="37:25" pos:end="37:25">i</name><operator pos:start="37:26" pos:end="37:27">++</operator></expr></incr>)</control> <block pos:start="37:30" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:9">

        <expr_stmt pos:start="39:9" pos:end="39:48"><expr pos:start="39:9" pos:end="39:47"><name pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:11">reg</name><operator pos:start="39:12" pos:end="39:12">.</operator><name pos:start="39:13" pos:end="39:14">id</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:47"><name pos:start="39:18" pos:end="39:33">AARCH64_CORE_REG</name><argument_list pos:start="39:34" pos:end="39:47">(<argument pos:start="39:35" pos:end="39:46"><expr pos:start="39:35" pos:end="39:46"><name pos:start="39:35" pos:end="39:46"><name pos:start="39:35" pos:end="39:38">regs</name><operator pos:start="39:39" pos:end="39:39">.</operator><name pos:start="39:40" pos:end="39:43">regs</name><index pos:start="39:44" pos:end="39:46">[<expr pos:start="39:45" pos:end="39:45"><name pos:start="39:45" pos:end="39:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:46"><expr pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:11">reg</name><operator pos:start="41:12" pos:end="41:12">.</operator><name pos:start="41:13" pos:end="41:16">addr</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <operator pos:start="41:20" pos:end="41:20">(</operator><name pos:start="41:21" pos:end="41:29">uintptr_t</name><operator pos:start="41:30" pos:end="41:30">)</operator> <operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:45"><name pos:start="41:33" pos:end="41:35">env</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:42">xregs</name><index pos:start="41:43" pos:end="41:45">[<expr pos:start="41:44" pos:end="41:44"><name pos:start="41:44" pos:end="41:44">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:56"><expr pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:55"><name pos:start="43:15" pos:end="43:28">kvm_vcpu_ioctl</name><argument_list pos:start="43:29" pos:end="43:55">(<argument pos:start="43:30" pos:end="43:31"><expr pos:start="43:30" pos:end="43:31"><name pos:start="43:30" pos:end="43:31">cs</name></expr></argument>, <argument pos:start="43:34" pos:end="43:48"><expr pos:start="43:34" pos:end="43:48"><name pos:start="43:34" pos:end="43:48">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="43:51" pos:end="43:54"><expr pos:start="43:51" pos:end="43:54"><operator pos:start="43:51" pos:end="43:51">&amp;</operator><name pos:start="43:52" pos:end="43:54">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:16">(<expr pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">ret</name></expr>)</condition> <block pos:start="45:18" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:23">

            <return pos:start="47:13" pos:end="47:23">return <expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="55:5" pos:end="59:7">/* KVM puts SP_EL0 in regs.sp and SP_EL1 in regs.sp_el1. On the

     * QEMU side we keep the current SP in xregs[31] as well.

     */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><call pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:19">aarch64_save_sp</name><argument_list pos:start="61:20" pos:end="61:27">(<argument pos:start="61:21" pos:end="61:23"><expr pos:start="61:21" pos:end="61:23"><name pos:start="61:21" pos:end="61:23">env</name></expr></argument>, <argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><literal type="number" pos:start="61:26" pos:end="61:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:7">reg</name><operator pos:start="65:8" pos:end="65:8">.</operator><name pos:start="65:9" pos:end="65:10">id</name></name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:38"><name pos:start="65:14" pos:end="65:29">AARCH64_CORE_REG</name><argument_list pos:start="65:30" pos:end="65:38">(<argument pos:start="65:31" pos:end="65:37"><expr pos:start="65:31" pos:end="65:37"><name pos:start="65:31" pos:end="65:37"><name pos:start="65:31" pos:end="65:34">regs</name><operator pos:start="65:35" pos:end="65:35">.</operator><name pos:start="65:36" pos:end="65:37">sp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:42"><expr pos:start="67:5" pos:end="67:41"><name pos:start="67:5" pos:end="67:12"><name pos:start="67:5" pos:end="67:7">reg</name><operator pos:start="67:8" pos:end="67:8">.</operator><name pos:start="67:9" pos:end="67:12">addr</name></name> <operator pos:start="67:14" pos:end="67:14">=</operator> <operator pos:start="67:16" pos:end="67:16">(</operator><name pos:start="67:17" pos:end="67:25">uintptr_t</name><operator pos:start="67:26" pos:end="67:26">)</operator> <operator pos:start="67:28" pos:end="67:28">&amp;</operator><name pos:start="67:29" pos:end="67:41"><name pos:start="67:29" pos:end="67:31">env</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:38">sp_el</name><index pos:start="67:39" pos:end="67:41">[<expr pos:start="67:40" pos:end="67:40"><literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:51"><name pos:start="69:11" pos:end="69:24">kvm_vcpu_ioctl</name><argument_list pos:start="69:25" pos:end="69:51">(<argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><name pos:start="69:26" pos:end="69:27">cs</name></expr></argument>, <argument pos:start="69:30" pos:end="69:44"><expr pos:start="69:30" pos:end="69:44"><name pos:start="69:30" pos:end="69:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="69:47" pos:end="69:50"><expr pos:start="69:47" pos:end="69:50"><operator pos:start="69:47" pos:end="69:47">&amp;</operator><name pos:start="69:48" pos:end="69:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">ret</name></expr>)</condition> <block pos:start="71:14" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:19">

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:38"><expr pos:start="79:5" pos:end="79:37"><name pos:start="79:5" pos:end="79:10"><name pos:start="79:5" pos:end="79:7">reg</name><operator pos:start="79:8" pos:end="79:8">.</operator><name pos:start="79:9" pos:end="79:10">id</name></name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:37"><name pos:start="79:14" pos:end="79:29">AARCH64_CORE_REG</name><argument_list pos:start="79:30" pos:end="79:37">(<argument pos:start="79:31" pos:end="79:36"><expr pos:start="79:31" pos:end="79:36"><name pos:start="79:31" pos:end="79:36">sp_el1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:12"><name pos:start="81:5" pos:end="81:7">reg</name><operator pos:start="81:8" pos:end="81:8">.</operator><name pos:start="81:9" pos:end="81:12">addr</name></name> <operator pos:start="81:14" pos:end="81:14">=</operator> <operator pos:start="81:16" pos:end="81:16">(</operator><name pos:start="81:17" pos:end="81:25">uintptr_t</name><operator pos:start="81:26" pos:end="81:26">)</operator> <operator pos:start="81:28" pos:end="81:28">&amp;</operator><name pos:start="81:29" pos:end="81:41"><name pos:start="81:29" pos:end="81:31">env</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:38">sp_el</name><index pos:start="81:39" pos:end="81:41">[<expr pos:start="81:40" pos:end="81:40"><literal type="number" pos:start="81:40" pos:end="81:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:52"><expr pos:start="83:5" pos:end="83:51"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:51"><name pos:start="83:11" pos:end="83:24">kvm_vcpu_ioctl</name><argument_list pos:start="83:25" pos:end="83:51">(<argument pos:start="83:26" pos:end="83:27"><expr pos:start="83:26" pos:end="83:27"><name pos:start="83:26" pos:end="83:27">cs</name></expr></argument>, <argument pos:start="83:30" pos:end="83:44"><expr pos:start="83:30" pos:end="83:44"><name pos:start="83:30" pos:end="83:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="83:47" pos:end="83:50"><expr pos:start="83:47" pos:end="83:50"><operator pos:start="83:47" pos:end="83:47">&amp;</operator><name pos:start="83:48" pos:end="83:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:12">(<expr pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">ret</name></expr>)</condition> <block pos:start="85:14" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:19">

        <return pos:start="87:9" pos:end="87:19">return <expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:69">/* Note that KVM thinks pstate is 64 bit but we use a uint32_t */</comment>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:20">(<expr pos:start="95:9" pos:end="95:19"><call pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:14">is_a64</name><argument_list pos:start="95:15" pos:end="95:19">(<argument pos:start="95:16" pos:end="95:18"><expr pos:start="95:16" pos:end="95:18"><name pos:start="95:16" pos:end="95:18">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:22" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:31">

        <expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:11">val</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:30"><name pos:start="97:15" pos:end="97:25">pstate_read</name><argument_list pos:start="97:26" pos:end="97:30">(<argument pos:start="97:27" pos:end="97:29"><expr pos:start="97:27" pos:end="97:29"><name pos:start="97:27" pos:end="97:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="103:5">else <block pos:start="99:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:29">

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:11">val</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:28"><name pos:start="101:15" pos:end="101:23">cpsr_read</name><argument_list pos:start="101:24" pos:end="101:28">(<argument pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><name pos:start="101:25" pos:end="101:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:43"><expr pos:start="105:5" pos:end="105:42"><name pos:start="105:5" pos:end="105:10"><name pos:start="105:5" pos:end="105:7">reg</name><operator pos:start="105:8" pos:end="105:8">.</operator><name pos:start="105:9" pos:end="105:10">id</name></name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:42"><name pos:start="105:14" pos:end="105:29">AARCH64_CORE_REG</name><argument_list pos:start="105:30" pos:end="105:42">(<argument pos:start="105:31" pos:end="105:41"><expr pos:start="105:31" pos:end="105:41"><name pos:start="105:31" pos:end="105:41"><name pos:start="105:31" pos:end="105:34">regs</name><operator pos:start="105:35" pos:end="105:35">.</operator><name pos:start="105:36" pos:end="105:41">pstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:32"><expr pos:start="107:5" pos:end="107:31"><name pos:start="107:5" pos:end="107:12"><name pos:start="107:5" pos:end="107:7">reg</name><operator pos:start="107:8" pos:end="107:8">.</operator><name pos:start="107:9" pos:end="107:12">addr</name></name> <operator pos:start="107:14" pos:end="107:14">=</operator> <operator pos:start="107:16" pos:end="107:16">(</operator><name pos:start="107:17" pos:end="107:25">uintptr_t</name><operator pos:start="107:26" pos:end="107:26">)</operator> <operator pos:start="107:28" pos:end="107:28">&amp;</operator><name pos:start="107:29" pos:end="107:31">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:52"><expr pos:start="109:5" pos:end="109:51"><name pos:start="109:5" pos:end="109:7">ret</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:51"><name pos:start="109:11" pos:end="109:24">kvm_vcpu_ioctl</name><argument_list pos:start="109:25" pos:end="109:51">(<argument pos:start="109:26" pos:end="109:27"><expr pos:start="109:26" pos:end="109:27"><name pos:start="109:26" pos:end="109:27">cs</name></expr></argument>, <argument pos:start="109:30" pos:end="109:44"><expr pos:start="109:30" pos:end="109:44"><name pos:start="109:30" pos:end="109:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="109:47" pos:end="109:50"><expr pos:start="109:47" pos:end="109:50"><operator pos:start="109:47" pos:end="109:47">&amp;</operator><name pos:start="109:48" pos:end="109:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:12">(<expr pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">ret</name></expr>)</condition> <block pos:start="111:14" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:19">

        <return pos:start="113:9" pos:end="113:19">return <expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:10"><name pos:start="119:5" pos:end="119:7">reg</name><operator pos:start="119:8" pos:end="119:8">.</operator><name pos:start="119:9" pos:end="119:10">id</name></name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:38"><name pos:start="119:14" pos:end="119:29">AARCH64_CORE_REG</name><argument_list pos:start="119:30" pos:end="119:38">(<argument pos:start="119:31" pos:end="119:37"><expr pos:start="119:31" pos:end="119:37"><name pos:start="119:31" pos:end="119:37"><name pos:start="119:31" pos:end="119:34">regs</name><operator pos:start="119:35" pos:end="119:35">.</operator><name pos:start="119:36" pos:end="119:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:36"><expr pos:start="121:5" pos:end="121:35"><name pos:start="121:5" pos:end="121:12"><name pos:start="121:5" pos:end="121:7">reg</name><operator pos:start="121:8" pos:end="121:8">.</operator><name pos:start="121:9" pos:end="121:12">addr</name></name> <operator pos:start="121:14" pos:end="121:14">=</operator> <operator pos:start="121:16" pos:end="121:16">(</operator><name pos:start="121:17" pos:end="121:25">uintptr_t</name><operator pos:start="121:26" pos:end="121:26">)</operator> <operator pos:start="121:28" pos:end="121:28">&amp;</operator><name pos:start="121:29" pos:end="121:35"><name pos:start="121:29" pos:end="121:31">env</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:35">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:52"><expr pos:start="123:5" pos:end="123:51"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:51"><name pos:start="123:11" pos:end="123:24">kvm_vcpu_ioctl</name><argument_list pos:start="123:25" pos:end="123:51">(<argument pos:start="123:26" pos:end="123:27"><expr pos:start="123:26" pos:end="123:27"><name pos:start="123:26" pos:end="123:27">cs</name></expr></argument>, <argument pos:start="123:30" pos:end="123:44"><expr pos:start="123:30" pos:end="123:44"><name pos:start="123:30" pos:end="123:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="123:47" pos:end="123:50"><expr pos:start="123:47" pos:end="123:50"><operator pos:start="123:47" pos:end="123:47">&amp;</operator><name pos:start="123:48" pos:end="123:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:12">(<expr pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">ret</name></expr>)</condition> <block pos:start="125:14" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:19">

        <return pos:start="127:9" pos:end="127:19">return <expr pos:start="127:16" pos:end="127:18"><name pos:start="127:16" pos:end="127:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:39"><expr pos:start="133:5" pos:end="133:38"><name pos:start="133:5" pos:end="133:10"><name pos:start="133:5" pos:end="133:7">reg</name><operator pos:start="133:8" pos:end="133:8">.</operator><name pos:start="133:9" pos:end="133:10">id</name></name> <operator pos:start="133:12" pos:end="133:12">=</operator> <call pos:start="133:14" pos:end="133:38"><name pos:start="133:14" pos:end="133:29">AARCH64_CORE_REG</name><argument_list pos:start="133:30" pos:end="133:38">(<argument pos:start="133:31" pos:end="133:37"><expr pos:start="133:31" pos:end="133:37"><name pos:start="133:31" pos:end="133:37">elr_el1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:43"><expr pos:start="135:5" pos:end="135:42"><name pos:start="135:5" pos:end="135:12"><name pos:start="135:5" pos:end="135:7">reg</name><operator pos:start="135:8" pos:end="135:8">.</operator><name pos:start="135:9" pos:end="135:12">addr</name></name> <operator pos:start="135:14" pos:end="135:14">=</operator> <operator pos:start="135:16" pos:end="135:16">(</operator><name pos:start="135:17" pos:end="135:25">uintptr_t</name><operator pos:start="135:26" pos:end="135:26">)</operator> <operator pos:start="135:28" pos:end="135:28">&amp;</operator><name pos:start="135:29" pos:end="135:42"><name pos:start="135:29" pos:end="135:31">env</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:39">elr_el</name><index pos:start="135:40" pos:end="135:42">[<expr pos:start="135:41" pos:end="135:41"><literal type="number" pos:start="135:41" pos:end="135:41">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:52"><expr pos:start="137:5" pos:end="137:51"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:51"><name pos:start="137:11" pos:end="137:24">kvm_vcpu_ioctl</name><argument_list pos:start="137:25" pos:end="137:51">(<argument pos:start="137:26" pos:end="137:27"><expr pos:start="137:26" pos:end="137:27"><name pos:start="137:26" pos:end="137:27">cs</name></expr></argument>, <argument pos:start="137:30" pos:end="137:44"><expr pos:start="137:30" pos:end="137:44"><name pos:start="137:30" pos:end="137:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="137:47" pos:end="137:50"><expr pos:start="137:47" pos:end="137:50"><operator pos:start="137:47" pos:end="137:47">&amp;</operator><name pos:start="137:48" pos:end="137:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:12">(<expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">ret</name></expr>)</condition> <block pos:start="139:14" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:19">

        <return pos:start="141:9" pos:end="141:19">return <expr pos:start="141:16" pos:end="141:18"><name pos:start="141:16" pos:end="141:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="147:5" pos:end="161:5">for <control pos:start="147:9" pos:end="147:37">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">i</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:32"><expr pos:start="147:17" pos:end="147:31"><name pos:start="147:17" pos:end="147:17">i</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <name pos:start="147:21" pos:end="147:31">KVM_NR_SPSR</name></expr>;</condition> <incr pos:start="147:34" pos:end="147:36"><expr pos:start="147:34" pos:end="147:36"><name pos:start="147:34" pos:end="147:34">i</name><operator pos:start="147:35" pos:end="147:36">++</operator></expr></incr>)</control> <block pos:start="147:39" pos:end="161:5">{<block_content pos:start="149:9" pos:end="159:9">

        <expr_stmt pos:start="149:9" pos:end="149:43"><expr pos:start="149:9" pos:end="149:42"><name pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:11">reg</name><operator pos:start="149:12" pos:end="149:12">.</operator><name pos:start="149:13" pos:end="149:14">id</name></name> <operator pos:start="149:16" pos:end="149:16">=</operator> <call pos:start="149:18" pos:end="149:42"><name pos:start="149:18" pos:end="149:33">AARCH64_CORE_REG</name><argument_list pos:start="149:34" pos:end="149:42">(<argument pos:start="149:35" pos:end="149:41"><expr pos:start="149:35" pos:end="149:41"><name pos:start="149:35" pos:end="149:41"><name pos:start="149:35" pos:end="149:38">spsr</name><index pos:start="149:39" pos:end="149:41">[<expr pos:start="149:40" pos:end="149:40"><name pos:start="149:40" pos:end="149:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:56"><expr pos:start="151:9" pos:end="151:55"><name pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:11">reg</name><operator pos:start="151:12" pos:end="151:12">.</operator><name pos:start="151:13" pos:end="151:16">addr</name></name> <operator pos:start="151:18" pos:end="151:18">=</operator> <operator pos:start="151:20" pos:end="151:20">(</operator><name pos:start="151:21" pos:end="151:29">uintptr_t</name><operator pos:start="151:30" pos:end="151:30">)</operator> <operator pos:start="151:32" pos:end="151:32">&amp;</operator><name pos:start="151:33" pos:end="151:55"><name pos:start="151:33" pos:end="151:35">env</name><operator pos:start="151:36" pos:end="151:37">-&gt;</operator><name pos:start="151:38" pos:end="151:48">banked_spsr</name><index pos:start="151:49" pos:end="151:55">[<expr pos:start="151:50" pos:end="151:54"><name pos:start="151:50" pos:end="151:50">i</name> <operator pos:start="151:52" pos:end="151:52">-</operator> <literal type="number" pos:start="151:54" pos:end="151:54">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:56"><expr pos:start="153:9" pos:end="153:55"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:55"><name pos:start="153:15" pos:end="153:28">kvm_vcpu_ioctl</name><argument_list pos:start="153:29" pos:end="153:55">(<argument pos:start="153:30" pos:end="153:31"><expr pos:start="153:30" pos:end="153:31"><name pos:start="153:30" pos:end="153:31">cs</name></expr></argument>, <argument pos:start="153:34" pos:end="153:48"><expr pos:start="153:34" pos:end="153:48"><name pos:start="153:34" pos:end="153:48">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="153:51" pos:end="153:54"><expr pos:start="153:51" pos:end="153:54"><operator pos:start="153:51" pos:end="153:51">&amp;</operator><name pos:start="153:52" pos:end="153:54">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:16">(<expr pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:15">ret</name></expr>)</condition> <block pos:start="155:18" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:23">

            <return pos:start="157:13" pos:end="157:23">return <expr pos:start="157:20" pos:end="157:22"><name pos:start="157:20" pos:end="157:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="165:5" pos:end="169:7">/* Advanced SIMD and FP registers

     * We map Qn = regs[2n+1]:regs[2n]

     */</comment>

    <for pos:start="171:5" pos:end="203:5">for <control pos:start="171:9" pos:end="171:28">(<init pos:start="171:10" pos:end="171:15"><expr pos:start="171:10" pos:end="171:14"><name pos:start="171:10" pos:end="171:10">i</name> <operator pos:start="171:12" pos:end="171:12">=</operator> <literal type="number" pos:start="171:14" pos:end="171:14">0</literal></expr>;</init> <condition pos:start="171:17" pos:end="171:23"><expr pos:start="171:17" pos:end="171:22"><name pos:start="171:17" pos:end="171:17">i</name> <operator pos:start="171:19" pos:end="171:19">&lt;</operator> <literal type="number" pos:start="171:21" pos:end="171:22">32</literal></expr>;</condition> <incr pos:start="171:25" pos:end="171:27"><expr pos:start="171:25" pos:end="171:27"><name pos:start="171:25" pos:end="171:25">i</name><operator pos:start="171:26" pos:end="171:27">++</operator></expr></incr>)</control> <block pos:start="171:30" pos:end="203:5">{<block_content pos:start="173:9" pos:end="201:9">

        <decl_stmt pos:start="173:9" pos:end="173:24"><decl pos:start="173:9" pos:end="173:23"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:14">rd</name> <init pos:start="173:16" pos:end="173:23">= <expr pos:start="173:18" pos:end="173:23"><name pos:start="173:18" pos:end="173:18">i</name> <operator pos:start="173:20" pos:end="173:21">&lt;&lt;</operator> <literal type="number" pos:start="173:23" pos:end="173:23">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="178:0"><decl pos:start="175:9" pos:end="175:26"><type pos:start="175:9" pos:end="175:16"><name pos:start="175:9" pos:end="175:16">uint64_t</name></type> <name pos:start="175:18" pos:end="175:26"><name pos:start="175:18" pos:end="175:23">fp_val</name><index pos:start="175:24" pos:end="175:26">[<expr pos:start="175:25" pos:end="175:25"><literal type="number" pos:start="175:25" pos:end="175:25">2</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifdef pos:start="177:1" pos:end="177:27">#<cpp:directive pos:start="177:2" pos:end="177:6">ifdef</cpp:directive> <name pos:start="177:8" pos:end="177:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="179:9" pos:end="179:42"><expr pos:start="179:9" pos:end="179:41"><name pos:start="179:9" pos:end="179:17"><name pos:start="179:9" pos:end="179:14">fp_val</name><index pos:start="179:15" pos:end="179:17">[<expr pos:start="179:16" pos:end="179:16"><literal type="number" pos:start="179:16" pos:end="179:16">0</literal></expr>]</index></name> <operator pos:start="179:19" pos:end="179:19">=</operator> <name pos:start="179:21" pos:end="179:41"><name pos:start="179:21" pos:end="179:23">env</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:28">vfp</name><operator pos:start="179:29" pos:end="179:29">.</operator><name pos:start="179:30" pos:end="179:33">regs</name><index pos:start="179:34" pos:end="179:41">[<expr pos:start="179:35" pos:end="179:40"><name pos:start="179:35" pos:end="179:36">rd</name> <operator pos:start="179:38" pos:end="179:38">+</operator> <literal type="number" pos:start="179:40" pos:end="179:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="184:0"><expr pos:start="181:9" pos:end="181:37"><name pos:start="181:9" pos:end="181:17"><name pos:start="181:9" pos:end="181:14">fp_val</name><index pos:start="181:15" pos:end="181:17">[<expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">1</literal></expr>]</index></name> <operator pos:start="181:19" pos:end="181:19">=</operator> <name pos:start="181:21" pos:end="181:37"><name pos:start="181:21" pos:end="181:23">env</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:28">vfp</name><operator pos:start="181:29" pos:end="181:29">.</operator><name pos:start="181:30" pos:end="181:33">regs</name><index pos:start="181:34" pos:end="181:37">[<expr pos:start="181:35" pos:end="181:36"><name pos:start="181:35" pos:end="181:36">rd</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:else pos:start="183:1" pos:end="183:5">#<cpp:directive pos:start="183:2" pos:end="183:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="185:9" pos:end="185:42"><expr pos:start="185:9" pos:end="185:41"><name pos:start="185:9" pos:end="185:17"><name pos:start="185:9" pos:end="185:14">fp_val</name><index pos:start="185:15" pos:end="185:17">[<expr pos:start="185:16" pos:end="185:16"><literal type="number" pos:start="185:16" pos:end="185:16">1</literal></expr>]</index></name> <operator pos:start="185:19" pos:end="185:19">=</operator> <name pos:start="185:21" pos:end="185:41"><name pos:start="185:21" pos:end="185:23">env</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:28">vfp</name><operator pos:start="185:29" pos:end="185:29">.</operator><name pos:start="185:30" pos:end="185:33">regs</name><index pos:start="185:34" pos:end="185:41">[<expr pos:start="185:35" pos:end="185:40"><name pos:start="185:35" pos:end="185:36">rd</name> <operator pos:start="185:38" pos:end="185:38">+</operator> <literal type="number" pos:start="185:40" pos:end="185:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="190:0"><expr pos:start="187:9" pos:end="187:37"><name pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:14">fp_val</name><index pos:start="187:15" pos:end="187:17">[<expr pos:start="187:16" pos:end="187:16"><literal type="number" pos:start="187:16" pos:end="187:16">0</literal></expr>]</index></name> <operator pos:start="187:19" pos:end="187:19">=</operator> <name pos:start="187:21" pos:end="187:37"><name pos:start="187:21" pos:end="187:23">env</name><operator pos:start="187:24" pos:end="187:25">-&gt;</operator><name pos:start="187:26" pos:end="187:28">vfp</name><operator pos:start="187:29" pos:end="187:29">.</operator><name pos:start="187:30" pos:end="187:33">regs</name><index pos:start="187:34" pos:end="187:37">[<expr pos:start="187:35" pos:end="187:36"><name pos:start="187:35" pos:end="187:36">rd</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="191:9" pos:end="191:57"><expr pos:start="191:9" pos:end="191:56"><name pos:start="191:9" pos:end="191:14"><name pos:start="191:9" pos:end="191:11">reg</name><operator pos:start="191:12" pos:end="191:12">.</operator><name pos:start="191:13" pos:end="191:14">id</name></name> <operator pos:start="191:16" pos:end="191:16">=</operator> <call pos:start="191:18" pos:end="191:56"><name pos:start="191:18" pos:end="191:38">AARCH64_SIMD_CORE_REG</name><argument_list pos:start="191:39" pos:end="191:56">(<argument pos:start="191:40" pos:end="191:55"><expr pos:start="191:40" pos:end="191:55"><name pos:start="191:40" pos:end="191:55"><name pos:start="191:40" pos:end="191:46">fp_regs</name><operator pos:start="191:47" pos:end="191:47">.</operator><name pos:start="191:48" pos:end="191:52">vregs</name><index pos:start="191:53" pos:end="191:55">[<expr pos:start="191:54" pos:end="191:54"><name pos:start="191:54" pos:end="191:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:40"><expr pos:start="193:9" pos:end="193:39"><name pos:start="193:9" pos:end="193:16"><name pos:start="193:9" pos:end="193:11">reg</name><operator pos:start="193:12" pos:end="193:12">.</operator><name pos:start="193:13" pos:end="193:16">addr</name></name> <operator pos:start="193:18" pos:end="193:18">=</operator> <operator pos:start="193:20" pos:end="193:20">(</operator><name pos:start="193:21" pos:end="193:29">uintptr_t</name><operator pos:start="193:30" pos:end="193:30">)</operator><operator pos:start="193:31" pos:end="193:31">(</operator><operator pos:start="193:32" pos:end="193:32">&amp;</operator><name pos:start="193:33" pos:end="193:38">fp_val</name><operator pos:start="193:39" pos:end="193:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:56"><expr pos:start="195:9" pos:end="195:55"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:55"><name pos:start="195:15" pos:end="195:28">kvm_vcpu_ioctl</name><argument_list pos:start="195:29" pos:end="195:55">(<argument pos:start="195:30" pos:end="195:31"><expr pos:start="195:30" pos:end="195:31"><name pos:start="195:30" pos:end="195:31">cs</name></expr></argument>, <argument pos:start="195:34" pos:end="195:48"><expr pos:start="195:34" pos:end="195:48"><name pos:start="195:34" pos:end="195:48">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="195:51" pos:end="195:54"><expr pos:start="195:51" pos:end="195:54"><operator pos:start="195:51" pos:end="195:51">&amp;</operator><name pos:start="195:52" pos:end="195:54">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="201:9"><if pos:start="197:9" pos:end="201:9">if <condition pos:start="197:12" pos:end="197:16">(<expr pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">ret</name></expr>)</condition> <block pos:start="197:18" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:23">

            <return pos:start="199:13" pos:end="199:23">return <expr pos:start="199:20" pos:end="199:22"><name pos:start="199:20" pos:end="199:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="207:5" pos:end="207:33"><expr pos:start="207:5" pos:end="207:32"><name pos:start="207:5" pos:end="207:12"><name pos:start="207:5" pos:end="207:7">reg</name><operator pos:start="207:8" pos:end="207:8">.</operator><name pos:start="207:9" pos:end="207:12">addr</name></name> <operator pos:start="207:14" pos:end="207:14">=</operator> <operator pos:start="207:16" pos:end="207:16">(</operator><name pos:start="207:17" pos:end="207:25">uintptr_t</name><operator pos:start="207:26" pos:end="207:26">)</operator><operator pos:start="207:27" pos:end="207:27">(</operator><operator pos:start="207:28" pos:end="207:28">&amp;</operator><name pos:start="207:29" pos:end="207:31">fpr</name><operator pos:start="207:32" pos:end="207:32">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:28"><expr pos:start="209:5" pos:end="209:27"><name pos:start="209:5" pos:end="209:7">fpr</name> <operator pos:start="209:9" pos:end="209:9">=</operator> <call pos:start="209:11" pos:end="209:27"><name pos:start="209:11" pos:end="209:22">vfp_get_fpsr</name><argument_list pos:start="209:23" pos:end="209:27">(<argument pos:start="209:24" pos:end="209:26"><expr pos:start="209:24" pos:end="209:26"><name pos:start="209:24" pos:end="209:26">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:49"><expr pos:start="211:5" pos:end="211:48"><name pos:start="211:5" pos:end="211:10"><name pos:start="211:5" pos:end="211:7">reg</name><operator pos:start="211:8" pos:end="211:8">.</operator><name pos:start="211:9" pos:end="211:10">id</name></name> <operator pos:start="211:12" pos:end="211:12">=</operator> <call pos:start="211:14" pos:end="211:48"><name pos:start="211:14" pos:end="211:34">AARCH64_SIMD_CTRL_REG</name><argument_list pos:start="211:35" pos:end="211:48">(<argument pos:start="211:36" pos:end="211:47"><expr pos:start="211:36" pos:end="211:47"><name pos:start="211:36" pos:end="211:47"><name pos:start="211:36" pos:end="211:42">fp_regs</name><operator pos:start="211:43" pos:end="211:43">.</operator><name pos:start="211:44" pos:end="211:47">fpsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:52"><expr pos:start="213:5" pos:end="213:51"><name pos:start="213:5" pos:end="213:7">ret</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:51"><name pos:start="213:11" pos:end="213:24">kvm_vcpu_ioctl</name><argument_list pos:start="213:25" pos:end="213:51">(<argument pos:start="213:26" pos:end="213:27"><expr pos:start="213:26" pos:end="213:27"><name pos:start="213:26" pos:end="213:27">cs</name></expr></argument>, <argument pos:start="213:30" pos:end="213:44"><expr pos:start="213:30" pos:end="213:44"><name pos:start="213:30" pos:end="213:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="213:47" pos:end="213:50"><expr pos:start="213:47" pos:end="213:50"><operator pos:start="213:47" pos:end="213:47">&amp;</operator><name pos:start="213:48" pos:end="213:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="215:5" pos:end="219:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:12">(<expr pos:start="215:9" pos:end="215:11"><name pos:start="215:9" pos:end="215:11">ret</name></expr>)</condition> <block pos:start="215:14" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:19">

        <return pos:start="217:9" pos:end="217:19">return <expr pos:start="217:16" pos:end="217:18"><name pos:start="217:16" pos:end="217:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:28"><expr pos:start="223:5" pos:end="223:27"><name pos:start="223:5" pos:end="223:7">fpr</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <call pos:start="223:11" pos:end="223:27"><name pos:start="223:11" pos:end="223:22">vfp_get_fpcr</name><argument_list pos:start="223:23" pos:end="223:27">(<argument pos:start="223:24" pos:end="223:26"><expr pos:start="223:24" pos:end="223:26"><name pos:start="223:24" pos:end="223:26">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:49"><expr pos:start="225:5" pos:end="225:48"><name pos:start="225:5" pos:end="225:10"><name pos:start="225:5" pos:end="225:7">reg</name><operator pos:start="225:8" pos:end="225:8">.</operator><name pos:start="225:9" pos:end="225:10">id</name></name> <operator pos:start="225:12" pos:end="225:12">=</operator> <call pos:start="225:14" pos:end="225:48"><name pos:start="225:14" pos:end="225:34">AARCH64_SIMD_CTRL_REG</name><argument_list pos:start="225:35" pos:end="225:48">(<argument pos:start="225:36" pos:end="225:47"><expr pos:start="225:36" pos:end="225:47"><name pos:start="225:36" pos:end="225:47"><name pos:start="225:36" pos:end="225:42">fp_regs</name><operator pos:start="225:43" pos:end="225:43">.</operator><name pos:start="225:44" pos:end="225:47">fpcr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:52"><expr pos:start="227:5" pos:end="227:51"><name pos:start="227:5" pos:end="227:7">ret</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:51"><name pos:start="227:11" pos:end="227:24">kvm_vcpu_ioctl</name><argument_list pos:start="227:25" pos:end="227:51">(<argument pos:start="227:26" pos:end="227:27"><expr pos:start="227:26" pos:end="227:27"><name pos:start="227:26" pos:end="227:27">cs</name></expr></argument>, <argument pos:start="227:30" pos:end="227:44"><expr pos:start="227:30" pos:end="227:44"><name pos:start="227:30" pos:end="227:44">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="227:47" pos:end="227:50"><expr pos:start="227:47" pos:end="227:50"><operator pos:start="227:47" pos:end="227:47">&amp;</operator><name pos:start="227:48" pos:end="227:50">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:12">(<expr pos:start="229:9" pos:end="229:11"><name pos:start="229:9" pos:end="229:11">ret</name></expr>)</condition> <block pos:start="229:14" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:19">

        <return pos:start="231:9" pos:end="231:19">return <expr pos:start="231:16" pos:end="231:18"><name pos:start="231:16" pos:end="231:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="241:5"><if pos:start="237:5" pos:end="241:5">if <condition pos:start="237:8" pos:end="237:37">(<expr pos:start="237:9" pos:end="237:36"><operator pos:start="237:9" pos:end="237:9">!</operator><call pos:start="237:10" pos:end="237:36"><name pos:start="237:10" pos:end="237:31">write_list_to_kvmstate</name><argument_list pos:start="237:32" pos:end="237:36">(<argument pos:start="237:33" pos:end="237:35"><expr pos:start="237:33" pos:end="237:35"><name pos:start="237:33" pos:end="237:35">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:39" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:22">

        <return pos:start="239:9" pos:end="239:22">return <expr pos:start="239:16" pos:end="239:21"><name pos:start="239:16" pos:end="239:21">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:37"><expr pos:start="245:5" pos:end="245:36"><call pos:start="245:5" pos:end="245:36"><name pos:start="245:5" pos:end="245:31">kvm_arm_sync_mpstate_to_kvm</name><argument_list pos:start="245:32" pos:end="245:36">(<argument pos:start="245:33" pos:end="245:35"><expr pos:start="245:33" pos:end="245:35"><name pos:start="245:33" pos:end="245:35">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="249:5" pos:end="249:15">return <expr pos:start="249:12" pos:end="249:14"><name pos:start="249:12" pos:end="249:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
