<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23058.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">io_mem_init</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="38:0">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:89"><expr pos:start="9:5" pos:end="9:88"><call pos:start="9:5" pos:end="9:88"><name pos:start="9:5" pos:end="9:32">cpu_register_io_memory_fixed</name><argument_list pos:start="9:33" pos:end="9:88">(<argument pos:start="9:34" pos:end="9:43"><expr pos:start="9:34" pos:end="9:43"><name pos:start="9:34" pos:end="9:43">IO_MEM_ROM</name></expr></argument>, <argument pos:start="9:46" pos:end="9:59"><expr pos:start="9:46" pos:end="9:59"><name pos:start="9:46" pos:end="9:59">error_mem_read</name></expr></argument>, <argument pos:start="9:62" pos:end="9:81"><expr pos:start="9:62" pos:end="9:81"><name pos:start="9:62" pos:end="9:81">unassigned_mem_write</name></expr></argument>, <argument pos:start="9:84" pos:end="9:87"><expr pos:start="9:84" pos:end="9:87"><name pos:start="9:84" pos:end="9:87">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:101"><expr pos:start="11:5" pos:end="11:100"><call pos:start="11:5" pos:end="11:100"><name pos:start="11:5" pos:end="11:32">cpu_register_io_memory_fixed</name><argument_list pos:start="11:33" pos:end="11:100">(<argument pos:start="11:34" pos:end="11:50"><expr pos:start="11:34" pos:end="11:50"><name pos:start="11:34" pos:end="11:50">IO_MEM_UNASSIGNED</name></expr></argument>, <argument pos:start="11:53" pos:end="11:71"><expr pos:start="11:53" pos:end="11:71"><name pos:start="11:53" pos:end="11:71">unassigned_mem_read</name></expr></argument>, <argument pos:start="11:74" pos:end="11:93"><expr pos:start="11:74" pos:end="11:93"><name pos:start="11:74" pos:end="11:93">unassigned_mem_write</name></expr></argument>, <argument pos:start="11:96" pos:end="11:99"><expr pos:start="11:96" pos:end="11:99"><name pos:start="11:96" pos:end="11:99">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:92"><expr pos:start="13:5" pos:end="13:91"><call pos:start="13:5" pos:end="13:91"><name pos:start="13:5" pos:end="13:32">cpu_register_io_memory_fixed</name><argument_list pos:start="13:33" pos:end="13:91">(<argument pos:start="13:34" pos:end="13:48"><expr pos:start="13:34" pos:end="13:48"><name pos:start="13:34" pos:end="13:48">IO_MEM_NOTDIRTY</name></expr></argument>, <argument pos:start="13:51" pos:end="13:64"><expr pos:start="13:51" pos:end="13:64"><name pos:start="13:51" pos:end="13:64">error_mem_read</name></expr></argument>, <argument pos:start="13:67" pos:end="13:84"><expr pos:start="13:67" pos:end="13:84"><name pos:start="13:67" pos:end="13:84">notdirty_mem_write</name></expr></argument>, <argument pos:start="13:87" pos:end="13:90"><expr pos:start="13:87" pos:end="13:90"><name pos:start="13:87" pos:end="13:90">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="15:5" pos:end="17:27">for <control pos:start="15:9" pos:end="15:23">(<init pos:start="15:10" pos:end="15:13"><expr pos:start="15:10" pos:end="15:12"><name pos:start="15:10" pos:end="15:10">i</name><operator pos:start="15:11" pos:end="15:11">=</operator><literal type="number" pos:start="15:12" pos:end="15:12">0</literal></expr>;</init> <condition pos:start="15:15" pos:end="15:18"><expr pos:start="15:15" pos:end="15:17"><name pos:start="15:15" pos:end="15:15">i</name><operator pos:start="15:16" pos:end="15:16">&lt;</operator><literal type="number" pos:start="15:17" pos:end="15:17">5</literal></expr>;</condition> <incr pos:start="15:20" pos:end="15:22"><expr pos:start="15:20" pos:end="15:22"><name pos:start="15:20" pos:end="15:20">i</name><operator pos:start="15:21" pos:end="15:22">++</operator></expr></incr>)</control><block type="pseudo" pos:start="17:9" pos:end="17:27"><block_content pos:start="17:9" pos:end="17:27">

        <expr_stmt pos:start="17:9" pos:end="17:27"><expr pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:19">io_mem_used</name><index pos:start="17:20" pos:end="17:22">[<expr pos:start="17:21" pos:end="17:21"><name pos:start="17:21" pos:end="17:21">i</name></expr>]</index></name> <operator pos:start="17:24" pos:end="17:24">=</operator> <literal type="number" pos:start="17:26" pos:end="17:26">1</literal></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="21:5" pos:end="26:0"><expr pos:start="21:5" pos:end="23:64"><name pos:start="21:5" pos:end="21:16">io_mem_watch</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="23:64"><name pos:start="21:20" pos:end="21:41">cpu_register_io_memory</name><argument_list pos:start="21:42" pos:end="23:64">(<argument pos:start="21:43" pos:end="21:56"><expr pos:start="21:43" pos:end="21:56"><name pos:start="21:43" pos:end="21:56">watch_mem_read</name></expr></argument>,

                                          <argument pos:start="23:43" pos:end="23:57"><expr pos:start="23:43" pos:end="23:57"><name pos:start="23:43" pos:end="23:57">watch_mem_write</name></expr></argument>, <argument pos:start="23:60" pos:end="23:63"><expr pos:start="23:60" pos:end="23:63"><name pos:start="23:60" pos:end="23:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="25:1" pos:end="25:19">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:19">CONFIG_KQEMU</name></cpp:ifdef>

    <if_stmt pos:start="27:5" pos:end="38:0"><if pos:start="27:5" pos:end="38:0">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:27">kqemu_phys_ram_base</name></expr>)</condition> <block pos:start="27:30" pos:end="38:0">{<block_content pos:start="31:9" pos:end="33:78">

        <comment type="block" pos:start="29:9" pos:end="29:36">/* alloc dirty bits array */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:79"><expr pos:start="31:9" pos:end="31:78"><name pos:start="31:9" pos:end="31:22">phys_ram_dirty</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <call pos:start="31:26" pos:end="31:78"><name pos:start="31:26" pos:end="31:37">qemu_vmalloc</name><argument_list pos:start="31:38" pos:end="31:78">(<argument pos:start="31:39" pos:end="31:77"><expr pos:start="31:39" pos:end="31:77"><name pos:start="31:39" pos:end="31:57">kqemu_phys_ram_size</name> <operator pos:start="31:59" pos:end="31:60">&gt;&gt;</operator> <name pos:start="31:62" pos:end="31:77">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:78"><expr pos:start="33:9" pos:end="33:77"><call pos:start="33:9" pos:end="33:77"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:77">(<argument pos:start="33:16" pos:end="33:29"><expr pos:start="33:16" pos:end="33:29"><name pos:start="33:16" pos:end="33:29">phys_ram_dirty</name></expr></argument>, <argument pos:start="33:32" pos:end="33:35"><expr pos:start="33:32" pos:end="33:35"><literal type="number" pos:start="33:32" pos:end="33:35">0xff</literal></expr></argument>, <argument pos:start="33:38" pos:end="33:76"><expr pos:start="33:38" pos:end="33:76"><name pos:start="33:38" pos:end="33:56">kqemu_phys_ram_size</name> <operator pos:start="33:58" pos:end="33:59">&gt;&gt;</operator> <name pos:start="33:61" pos:end="33:76">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
