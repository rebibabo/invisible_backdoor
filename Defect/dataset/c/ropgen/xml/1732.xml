<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1732.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">usb_msd_command_complete</name><parameter_list pos:start="1:37" pos:end="3:50">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:44">SCSIBus</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">bus</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:61">reason</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:71">uint32_t</name></type> <name pos:start="1:73" pos:end="1:75">tag</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:45">uint32_t</name></type> <name pos:start="3:47" pos:end="3:49">arg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="99:1">{<block_content pos:start="7:5" pos:end="97:5">

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">MSDState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:65">= <expr pos:start="7:19" pos:end="7:65"><call pos:start="7:19" pos:end="7:65"><name pos:start="7:19" pos:end="7:27">DO_UPCAST</name><argument_list pos:start="7:28" pos:end="7:65">(<argument pos:start="7:29" pos:end="7:36"><expr pos:start="7:29" pos:end="7:36"><name pos:start="7:29" pos:end="7:36">MSDState</name></expr></argument>, <argument pos:start="7:39" pos:end="7:46"><expr pos:start="7:39" pos:end="7:46"><name pos:start="7:39" pos:end="7:46"><name pos:start="7:39" pos:end="7:41">dev</name><operator pos:start="7:42" pos:end="7:42">.</operator><name pos:start="7:43" pos:end="7:46">qdev</name></name></expr></argument>, <argument pos:start="7:49" pos:end="7:64"><expr pos:start="7:49" pos:end="7:64"><name pos:start="7:49" pos:end="7:64"><name pos:start="7:49" pos:end="7:51">bus</name><operator pos:start="7:52" pos:end="7:53">-&gt;</operator><name pos:start="7:54" pos:end="7:57">qbus</name><operator pos:start="7:58" pos:end="7:58">.</operator><name pos:start="7:59" pos:end="7:64">parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">USBPacket</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">p</name> <init pos:start="9:18" pos:end="9:28">= <expr pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:20">s</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:28">packet</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:11">tag</name> <operator pos:start="13:13" pos:end="13:14">!=</operator> <name pos:start="13:16" pos:end="13:21"><name pos:start="13:16" pos:end="13:16">s</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:21">tag</name></name></expr>)</condition> <block pos:start="13:24" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:68">

        <expr_stmt pos:start="15:9" pos:end="15:68"><expr pos:start="15:9" pos:end="15:67"><call pos:start="15:9" pos:end="15:67"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:67">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:61"><expr pos:start="15:25" pos:end="15:61"><literal type="string" pos:start="15:25" pos:end="15:61">"usb-msd: Unexpected SCSI Tag 0x%x\n"</literal></expr></argument>, <argument pos:start="15:64" pos:end="15:66"><expr pos:start="15:64" pos:end="15:66"><name pos:start="15:64" pos:end="15:66">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="71:5"><if pos:start="19:5" pos:end="71:5">if <condition pos:start="19:8" pos:end="19:35">(<expr pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:14">reason</name> <operator pos:start="19:16" pos:end="19:17">==</operator> <name pos:start="19:19" pos:end="19:34">SCSI_REASON_DONE</name></expr>)</condition> <block pos:start="19:37" pos:end="71:5">{<block_content pos:start="21:9" pos:end="69:15">

        <expr_stmt pos:start="21:9" pos:end="21:46"><expr pos:start="21:9" pos:end="21:45"><call pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:15">DPRINTF</name><argument_list pos:start="21:16" pos:end="21:45">(<argument pos:start="21:17" pos:end="21:39"><expr pos:start="21:17" pos:end="21:39"><literal type="string" pos:start="21:17" pos:end="21:39">"Command complete %d\n"</literal></expr></argument>, <argument pos:start="21:42" pos:end="21:44"><expr pos:start="21:42" pos:end="21:44"><name pos:start="21:42" pos:end="21:44">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:33"><expr pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:18">residue</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:32"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:32">data_len</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">result</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:23">arg</name> <operator pos:start="25:25" pos:end="25:26">!=</operator> <literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="67:9"><if pos:start="27:9" pos:end="63:9">if <condition pos:start="27:12" pos:end="27:22">(<expr pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">packet</name></name></expr>)</condition> <block pos:start="27:24" pos:end="63:9">{<block_content pos:start="29:13" pos:end="61:44">

            <if_stmt pos:start="29:13" pos:end="57:13"><if pos:start="29:13" pos:end="39:13">if <condition pos:start="29:16" pos:end="29:64">(<expr pos:start="29:17" pos:end="29:63"><name pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:27">data_len</name></name> <operator pos:start="29:29" pos:end="29:30">==</operator> <literal type="number" pos:start="29:32" pos:end="29:32">0</literal> <operator pos:start="29:34" pos:end="29:35">&amp;&amp;</operator> <name pos:start="29:37" pos:end="29:43"><name pos:start="29:37" pos:end="29:37">s</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:43">mode</name></name> <operator pos:start="29:45" pos:end="29:46">==</operator> <name pos:start="29:48" pos:end="29:63">USB_MSDM_DATAOUT</name></expr>)</condition> <block pos:start="29:66" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:39">

                <comment type="block" pos:start="31:17" pos:end="33:46">/* A deferred packet with no write data remaining must be

                   the status read packet.  */</comment>

                <expr_stmt pos:start="35:17" pos:end="35:42"><expr pos:start="35:17" pos:end="35:41"><call pos:start="35:17" pos:end="35:41"><name pos:start="35:17" pos:end="35:35">usb_msd_send_status</name><argument_list pos:start="35:36" pos:end="35:41">(<argument pos:start="35:37" pos:end="35:37"><expr pos:start="35:37" pos:end="35:37"><name pos:start="35:37" pos:end="35:37">s</name></expr></argument>, <argument pos:start="35:40" pos:end="35:40"><expr pos:start="35:40" pos:end="35:40"><name pos:start="35:40" pos:end="35:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:39"><expr pos:start="37:17" pos:end="37:38"><name pos:start="37:17" pos:end="37:23"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:23">mode</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:38">USB_MSDM_CBW</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="39:15" pos:end="57:13">else <block pos:start="39:20" pos:end="57:13">{<block_content pos:start="41:17" pos:end="55:43">

                <if_stmt pos:start="41:17" pos:end="51:17"><if pos:start="41:17" pos:end="51:17">if <condition pos:start="41:20" pos:end="41:32">(<expr pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">data_len</name></name></expr>)</condition> <block pos:start="41:34" pos:end="51:17">{<block_content pos:start="43:21" pos:end="49:35">

                    <expr_stmt pos:start="43:21" pos:end="43:46"><expr pos:start="43:21" pos:end="43:45"><name pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:31">data_len</name></name> <operator pos:start="43:33" pos:end="43:34">-=</operator> <name pos:start="43:36" pos:end="43:45"><name pos:start="43:36" pos:end="43:36">s</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:45">usb_len</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="45:21" pos:end="47:58"><if pos:start="45:21" pos:end="47:58">if <condition pos:start="45:24" pos:end="45:51">(<expr pos:start="45:25" pos:end="45:50"><name pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:25">s</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:31">mode</name></name> <operator pos:start="45:33" pos:end="45:34">==</operator> <name pos:start="45:36" pos:end="45:50">USB_MSDM_DATAIN</name></expr>)</condition><block type="pseudo" pos:start="47:25" pos:end="47:58"><block_content pos:start="47:25" pos:end="47:58">

                        <expr_stmt pos:start="47:25" pos:end="47:58"><expr pos:start="47:25" pos:end="47:57"><call pos:start="47:25" pos:end="47:57"><name pos:start="47:25" pos:end="47:30">memset</name><argument_list pos:start="47:31" pos:end="47:57">(<argument pos:start="47:32" pos:end="47:41"><expr pos:start="47:32" pos:end="47:41"><name pos:start="47:32" pos:end="47:41"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:41">usb_buf</name></name></expr></argument>, <argument pos:start="47:44" pos:end="47:44"><expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:56"><expr pos:start="47:47" pos:end="47:56"><name pos:start="47:47" pos:end="47:56"><name pos:start="47:47" pos:end="47:47">s</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:56">usb_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:35"><expr pos:start="49:21" pos:end="49:34"><name pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:30">usb_len</name></name> <operator pos:start="49:32" pos:end="49:32">=</operator> <literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="53:17" pos:end="55:43"><if pos:start="53:17" pos:end="55:43">if <condition pos:start="53:20" pos:end="53:37">(<expr pos:start="53:21" pos:end="53:36"><name pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:21">s</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:31">data_len</name></name> <operator pos:start="53:33" pos:end="53:34">==</operator> <literal type="number" pos:start="53:36" pos:end="53:36">0</literal></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:43"><block_content pos:start="55:21" pos:end="55:43">

                    <expr_stmt pos:start="55:21" pos:end="55:43"><expr pos:start="55:21" pos:end="55:42"><name pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:27">mode</name></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <name pos:start="55:31" pos:end="55:42">USB_MSDM_CSW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:29"><expr pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:21">packet</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:28">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><call pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:31">usb_packet_complete</name><argument_list pos:start="61:32" pos:end="61:43">(<argument pos:start="61:33" pos:end="61:39"><expr pos:start="61:33" pos:end="61:39"><operator pos:start="61:33" pos:end="61:33">&amp;</operator><name pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:34">s</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:39">dev</name></name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><name pos:start="61:42" pos:end="61:42">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="67:9">else if <condition pos:start="63:19" pos:end="63:36">(<expr pos:start="63:20" pos:end="63:35"><name pos:start="63:20" pos:end="63:30"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:30">data_len</name></name> <operator pos:start="63:32" pos:end="63:33">==</operator> <literal type="number" pos:start="63:35" pos:end="63:35">0</literal></expr>)</condition> <block pos:start="63:38" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:35">

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">mode</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:34">USB_MSDM_CSW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:22"><expr pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:15">scsi_len</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:21">arg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:63"><expr pos:start="75:5" pos:end="75:62"><name pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:15">scsi_buf</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:62"><name pos:start="75:19" pos:end="75:44"><name pos:start="75:19" pos:end="75:19">s</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:29">scsi_dev</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:35">info</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:44">get_buf</name></name><argument_list pos:start="75:45" pos:end="75:62">(<argument pos:start="75:46" pos:end="75:56"><expr pos:start="75:46" pos:end="75:56"><name pos:start="75:46" pos:end="75:56"><name pos:start="75:46" pos:end="75:46">s</name><operator pos:start="75:47" pos:end="75:48">-&gt;</operator><name pos:start="75:49" pos:end="75:56">scsi_dev</name></name></expr></argument>, <argument pos:start="75:59" pos:end="75:61"><expr pos:start="75:59" pos:end="75:61"><name pos:start="75:59" pos:end="75:61">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="97:5"><if pos:start="77:5" pos:end="97:5">if <condition pos:start="77:8" pos:end="77:10">(<expr pos:start="77:9" pos:end="77:9"><name pos:start="77:9" pos:end="77:9">p</name></expr>)</condition> <block pos:start="77:12" pos:end="97:5">{<block_content pos:start="79:9" pos:end="95:9">

        <expr_stmt pos:start="79:9" pos:end="79:29"><expr pos:start="79:9" pos:end="79:28"><call pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:25">usb_msd_copy_data</name><argument_list pos:start="79:26" pos:end="79:28">(<argument pos:start="79:27" pos:end="79:27"><expr pos:start="79:27" pos:end="79:27"><name pos:start="79:27" pos:end="79:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="95:9"><if pos:start="81:9" pos:end="95:9">if <condition pos:start="81:12" pos:end="81:28">(<expr pos:start="81:13" pos:end="81:27"><name pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:22">usb_len</name></name> <operator pos:start="81:24" pos:end="81:25">==</operator> <literal type="number" pos:start="81:27" pos:end="81:27">0</literal></expr>)</condition> <block pos:start="81:30" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:44">

            <comment type="block" pos:start="83:13" pos:end="87:47">/* Set s-&gt;packet to NULL before calling usb_packet_complete

               because another request may be issued before

               usb_packet_complete returns.  */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:47"><expr pos:start="89:13" pos:end="89:46"><call pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:19">DPRINTF</name><argument_list pos:start="89:20" pos:end="89:46">(<argument pos:start="89:21" pos:end="89:42"><expr pos:start="89:21" pos:end="89:42"><literal type="string" pos:start="89:21" pos:end="89:42">"Packet complete %p\n"</literal></expr></argument>, <argument pos:start="89:45" pos:end="89:45"><expr pos:start="89:45" pos:end="89:45"><name pos:start="89:45" pos:end="89:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:29"><expr pos:start="91:13" pos:end="91:28"><name pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:21">packet</name></name> <operator pos:start="91:23" pos:end="91:23">=</operator> <name pos:start="91:25" pos:end="91:28">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:44"><expr pos:start="93:13" pos:end="93:43"><call pos:start="93:13" pos:end="93:43"><name pos:start="93:13" pos:end="93:31">usb_packet_complete</name><argument_list pos:start="93:32" pos:end="93:43">(<argument pos:start="93:33" pos:end="93:39"><expr pos:start="93:33" pos:end="93:39"><operator pos:start="93:33" pos:end="93:33">&amp;</operator><name pos:start="93:34" pos:end="93:39"><name pos:start="93:34" pos:end="93:34">s</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:39">dev</name></name></expr></argument>, <argument pos:start="93:42" pos:end="93:42"><expr pos:start="93:42" pos:end="93:42"><name pos:start="93:42" pos:end="93:42">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
