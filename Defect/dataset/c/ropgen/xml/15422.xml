<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15422.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">sclp_service_call</name><parameter_list pos:start="1:22" pos:end="1:71">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:35">CPUS390XState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">uint32_t</name></type> <name pos:start="1:52" pos:end="1:55">sccb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:65">uint64_t</name></type> <name pos:start="1:67" pos:end="1:70">code</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">r</name> <init pos:start="5:11" pos:end="5:13">= <expr pos:start="5:13" pos:end="5:13"><literal type="number" pos:start="5:13" pos:end="5:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:19">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:19">DEBUG_HELPER</name></cpp:ifdef>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:53"><call pos:start="13:5" pos:end="13:53"><name pos:start="13:5" pos:end="13:10">printf</name><argument_list pos:start="13:11" pos:end="13:53">(<argument pos:start="13:12" pos:end="13:40"><expr pos:start="13:12" pos:end="13:40"><literal type="string" pos:start="13:12" pos:end="13:27">"sclp(0x%x, 0x%"</literal> <name pos:start="13:29" pos:end="13:34">PRIx64</name> <literal type="string" pos:start="13:36" pos:end="13:40">")\n"</literal></expr></argument>, <argument pos:start="13:43" pos:end="13:46"><expr pos:start="13:43" pos:end="13:46"><name pos:start="13:43" pos:end="13:46">sccb</name></expr></argument>, <argument pos:start="13:49" pos:end="13:52"><expr pos:start="13:49" pos:end="13:52"><name pos:start="13:49" pos:end="13:52">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:12">sccb</name> <operator pos:start="19:14" pos:end="19:14">&amp;</operator> <operator pos:start="19:16" pos:end="19:16">~</operator><literal type="number" pos:start="19:17" pos:end="19:28">0x7ffffff8ul</literal></expr>)</condition> <block pos:start="19:31" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:17">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><call pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="21:65">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:58"><expr pos:start="21:25" pos:end="21:58"><literal type="string" pos:start="21:25" pos:end="21:58">"KVM: invalid sccb address 0x%x\n"</literal></expr></argument>, <argument pos:start="21:61" pos:end="21:64"><expr pos:start="21:61" pos:end="21:64"><name pos:start="21:61" pos:end="21:64">sccb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:9">r</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <operator pos:start="23:13" pos:end="23:13">-</operator><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="31:5" pos:end="83:5">switch<condition pos:start="31:11" pos:end="31:16">(<expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">code</name></expr>)</condition> <block pos:start="31:18" pos:end="83:5">{<block_content pos:start="33:9" pos:end="81:18">

        <case pos:start="33:9" pos:end="33:37">case <expr pos:start="33:14" pos:end="33:36"><name pos:start="33:14" pos:end="33:36">SCLP_CMDW_READ_SCP_INFO</name></expr>:</case>

        <case pos:start="35:9" pos:end="35:44">case <expr pos:start="35:14" pos:end="35:43"><name pos:start="35:14" pos:end="35:43">SCLP_CMDW_READ_SCP_INFO_FORCED</name></expr>:</case>

            <while pos:start="37:13" pos:end="41:13">while <condition pos:start="37:19" pos:end="37:54">(<expr pos:start="37:20" pos:end="37:53"><operator pos:start="37:20" pos:end="37:20">(</operator><name pos:start="37:21" pos:end="37:28">ram_size</name> <operator pos:start="37:30" pos:end="37:31">&gt;&gt;</operator> <operator pos:start="37:33" pos:end="37:33">(</operator><literal type="number" pos:start="37:34" pos:end="37:37">20</literal> <operator pos:start="37:37" pos:end="37:37">+</operator> <name pos:start="37:39" pos:end="37:43">shift</name><operator pos:start="37:44" pos:end="37:44">)</operator><operator pos:start="37:45" pos:end="37:45">)</operator> <operator pos:start="37:47" pos:end="37:47">&gt;</operator> <literal type="number" pos:start="37:49" pos:end="37:53">65535</literal></expr>)</condition> <block pos:start="37:56" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:24">

                <expr_stmt pos:start="39:17" pos:end="39:24"><expr pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:21">shift</name><operator pos:start="39:22" pos:end="39:23">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="43:13" pos:end="43:68"><expr pos:start="43:13" pos:end="43:67"><call pos:start="43:13" pos:end="43:67"><name pos:start="43:13" pos:end="43:20">stw_phys</name><argument_list pos:start="43:21" pos:end="43:67">(<argument pos:start="43:22" pos:end="43:40"><expr pos:start="43:22" pos:end="43:40"><name pos:start="43:22" pos:end="43:25">sccb</name> <operator pos:start="43:27" pos:end="43:27">+</operator> <name pos:start="43:29" pos:end="43:40">SCP_MEM_CODE</name></expr></argument>, <argument pos:start="43:43" pos:end="43:66"><expr pos:start="43:43" pos:end="43:66"><name pos:start="43:43" pos:end="43:50">ram_size</name> <operator pos:start="43:52" pos:end="43:53">&gt;&gt;</operator> <operator pos:start="43:55" pos:end="43:55">(</operator><literal type="number" pos:start="43:56" pos:end="43:59">20</literal> <operator pos:start="43:59" pos:end="43:59">+</operator> <name pos:start="43:61" pos:end="43:65">shift</name><operator pos:start="43:66" pos:end="43:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:55"><expr pos:start="45:13" pos:end="45:54"><call pos:start="45:13" pos:end="45:54"><name pos:start="45:13" pos:end="45:20">stb_phys</name><argument_list pos:start="45:21" pos:end="45:54">(<argument pos:start="45:22" pos:end="45:41"><expr pos:start="45:22" pos:end="45:41"><name pos:start="45:22" pos:end="45:25">sccb</name> <operator pos:start="45:27" pos:end="45:27">+</operator> <name pos:start="45:29" pos:end="45:41">SCP_INCREMENT</name></expr></argument>, <argument pos:start="45:44" pos:end="45:53"><expr pos:start="45:44" pos:end="45:53"><literal type="number" pos:start="45:44" pos:end="45:44">1</literal> <operator pos:start="45:46" pos:end="45:47">&lt;&lt;</operator> <name pos:start="45:49" pos:end="45:53">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:53"><expr pos:start="47:13" pos:end="47:52"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:20">stw_phys</name><argument_list pos:start="47:21" pos:end="47:52">(<argument pos:start="47:22" pos:end="47:45"><expr pos:start="47:22" pos:end="47:45"><name pos:start="47:22" pos:end="47:25">sccb</name> <operator pos:start="47:27" pos:end="47:27">+</operator> <name pos:start="47:29" pos:end="47:45">SCP_RESPONSE_CODE</name></expr></argument>, <argument pos:start="47:48" pos:end="47:51"><expr pos:start="47:48" pos:end="47:51"><literal type="number" pos:start="47:48" pos:end="47:51">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="67:13"><if pos:start="51:13" pos:end="61:13">if <condition pos:start="51:16" pos:end="51:30">(<expr pos:start="51:17" pos:end="51:29"><call pos:start="51:17" pos:end="51:29"><name pos:start="51:17" pos:end="51:27">kvm_enabled</name><argument_list pos:start="51:28" pos:end="51:29">()</argument_list></call></expr>)</condition> <block pos:start="51:32" pos:end="61:13">{<block_content pos:start="55:17" pos:end="60:0">

<cpp:ifdef pos:start="53:1" pos:end="53:17">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:17">CONFIG_KVM</name></cpp:ifdef>

                <expr_stmt pos:start="55:17" pos:end="60:0"><expr pos:start="55:17" pos:end="57:60"><call pos:start="55:17" pos:end="57:60"><name pos:start="55:17" pos:end="55:43">kvm_s390_interrupt_internal</name><argument_list pos:start="55:44" pos:end="57:60">(<argument pos:start="55:45" pos:end="55:47"><expr pos:start="55:45" pos:end="55:47"><name pos:start="55:45" pos:end="55:47">env</name></expr></argument>, <argument pos:start="55:50" pos:end="55:69"><expr pos:start="55:50" pos:end="55:69"><name pos:start="55:50" pos:end="55:69">KVM_S390_INT_SERVICE</name></expr></argument>,

                                            <argument pos:start="57:45" pos:end="57:53"><expr pos:start="57:45" pos:end="57:53"><name pos:start="57:45" pos:end="57:48">sccb</name> <operator pos:start="57:50" pos:end="57:50">&amp;</operator> <operator pos:start="57:52" pos:end="57:52">~</operator><literal type="number" pos:start="57:53" pos:end="57:53">3</literal></expr></argument>, <argument pos:start="57:56" pos:end="57:56"><expr pos:start="57:56" pos:end="57:56"><literal type="number" pos:start="57:56" pos:end="57:56">0</literal></expr></argument>, <argument pos:start="57:59" pos:end="57:59"><expr pos:start="57:59" pos:end="57:59"><literal type="number" pos:start="57:59" pos:end="57:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="67:13">else <block pos:start="61:20" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:62">

                <expr_stmt pos:start="63:17" pos:end="63:35"><expr pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:29"><name pos:start="63:17" pos:end="63:19">env</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:24">psw</name><operator pos:start="63:25" pos:end="63:25">.</operator><name pos:start="63:26" pos:end="63:29">addr</name></name> <operator pos:start="63:31" pos:end="63:32">+=</operator> <literal type="number" pos:start="63:34" pos:end="63:34">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:62"><expr pos:start="65:17" pos:end="65:61"><call pos:start="65:17" pos:end="65:61"><name pos:start="65:17" pos:end="65:29">ext_interrupt</name><argument_list pos:start="65:30" pos:end="65:61">(<argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">env</name></expr></argument>, <argument pos:start="65:36" pos:end="65:46"><expr pos:start="65:36" pos:end="65:46"><name pos:start="65:36" pos:end="65:46">EXT_SERVICE</name></expr></argument>, <argument pos:start="65:49" pos:end="65:57"><expr pos:start="65:49" pos:end="65:57"><name pos:start="65:49" pos:end="65:52">sccb</name> <operator pos:start="65:54" pos:end="65:54">&amp;</operator> <operator pos:start="65:56" pos:end="65:56">~</operator><literal type="number" pos:start="65:57" pos:end="65:57">3</literal></expr></argument>, <argument pos:start="65:60" pos:end="65:60"><expr pos:start="65:60" pos:end="65:60"><literal type="number" pos:start="65:60" pos:end="65:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <default pos:start="71:9" pos:end="74:0">default:</default>

<cpp:ifdef pos:start="73:1" pos:end="73:19">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:19">DEBUG_HELPER</name></cpp:ifdef>

            <expr_stmt pos:start="75:13" pos:end="78:0"><expr pos:start="75:13" pos:end="75:80"><call pos:start="75:13" pos:end="75:80"><name pos:start="75:13" pos:end="75:18">printf</name><argument_list pos:start="75:19" pos:end="75:80">(<argument pos:start="75:20" pos:end="75:67"><expr pos:start="75:20" pos:end="75:67"><literal type="string" pos:start="75:20" pos:end="75:54">"KVM: invalid sclp call 0x%x / 0x%"</literal> <name pos:start="75:56" pos:end="75:61">PRIx64</name> <literal type="string" pos:start="75:63" pos:end="75:67">"x\n"</literal></expr></argument>, <argument pos:start="75:70" pos:end="75:73"><expr pos:start="75:70" pos:end="75:73"><name pos:start="75:70" pos:end="75:73">sccb</name></expr></argument>, <argument pos:start="75:76" pos:end="75:79"><expr pos:start="75:76" pos:end="75:79"><name pos:start="75:76" pos:end="75:79">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="79:13" pos:end="79:19"><expr pos:start="79:13" pos:end="79:18"><name pos:start="79:13" pos:end="79:13">r</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <operator pos:start="79:17" pos:end="79:17">-</operator><literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

    </block_content>}</block></switch>



<label pos:start="87:1" pos:end="87:4"><name pos:start="87:1" pos:end="87:3">out</name>:</label>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><name pos:start="89:12" pos:end="89:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
