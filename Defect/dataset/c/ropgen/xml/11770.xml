<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11770.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:39">qio_channel_socket_readv</name><parameter_list pos:start="1:40" pos:end="11:53">(<parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:50">QIOChannel</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">ioc</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:63"><decl pos:start="3:41" pos:end="3:63"><type pos:start="3:41" pos:end="3:63"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:52">struct</name> <name pos:start="3:54" pos:end="3:58">iovec</name></name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">iov</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:51"><decl pos:start="5:41" pos:end="5:51"><type pos:start="5:41" pos:end="5:51"><name pos:start="5:41" pos:end="5:46">size_t</name></type> <name pos:start="5:48" pos:end="5:51">niov</name></decl></parameter>,

                                        <parameter pos:start="7:41" pos:end="7:49"><decl pos:start="7:41" pos:end="7:49"><type pos:start="7:41" pos:end="7:49"><name pos:start="7:41" pos:end="7:43">int</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier><modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:49">fds</name></decl></parameter>,

                                        <parameter pos:start="9:41" pos:end="9:52"><decl pos:start="9:41" pos:end="9:52"><type pos:start="9:41" pos:end="9:52"><name pos:start="9:41" pos:end="9:46">size_t</name> <modifier pos:start="9:48" pos:end="9:48">*</modifier></type><name pos:start="9:49" pos:end="9:52">nfds</name></decl></parameter>,

                                        <parameter pos:start="11:41" pos:end="11:52"><decl pos:start="11:41" pos:end="11:52"><type pos:start="11:41" pos:end="11:52"><name pos:start="11:41" pos:end="11:45">Error</name> <modifier pos:start="11:47" pos:end="11:47">*</modifier><modifier pos:start="11:48" pos:end="11:48">*</modifier></type><name pos:start="11:49" pos:end="11:52">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="95:1">{<block_content pos:start="15:5" pos:end="93:15">

    <decl_stmt pos:start="15:5" pos:end="15:53"><decl pos:start="15:5" pos:end="15:52"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">QIOChannelSocket</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:26">sioc</name> <init pos:start="15:28" pos:end="15:52">= <expr pos:start="15:30" pos:end="15:52"><call pos:start="15:30" pos:end="15:52"><name pos:start="15:30" pos:end="15:47">QIO_CHANNEL_SOCKET</name><argument_list pos:start="15:48" pos:end="15:52">(<argument pos:start="15:49" pos:end="15:51"><expr pos:start="15:49" pos:end="15:51"><name pos:start="15:49" pos:end="15:51">ioc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">ssize_t</name></type> <name pos:start="17:13" pos:end="17:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:17">msghdr</name></name></type> <name pos:start="19:19" pos:end="19:21">msg</name> <init pos:start="19:23" pos:end="19:33">= <expr pos:start="19:25" pos:end="19:33"><block pos:start="19:25" pos:end="19:33">{ <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr>, }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:59"><decl pos:start="21:5" pos:end="21:58"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:58"><name pos:start="21:10" pos:end="21:16">control</name><index pos:start="21:17" pos:end="21:58">[<expr pos:start="21:18" pos:end="21:57"><call pos:start="21:18" pos:end="21:57"><name pos:start="21:18" pos:end="21:27">CMSG_SPACE</name><argument_list pos:start="21:28" pos:end="21:57">(<argument pos:start="21:29" pos:end="21:56"><expr pos:start="21:29" pos:end="21:56"><sizeof pos:start="21:29" pos:end="21:39">sizeof<argument_list pos:start="21:35" pos:end="21:39">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="21:41" pos:end="21:41">*</operator> <name pos:start="21:43" pos:end="21:56">SOCKET_MAX_FDS</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:14">sflags</name> <init pos:start="23:16" pos:end="23:18">= <expr pos:start="23:18" pos:end="23:18"><literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="32:0"><expr pos:start="27:5" pos:end="27:64"><call pos:start="27:5" pos:end="27:64"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:64">(<argument pos:start="27:12" pos:end="27:18"><expr pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:18">control</name></expr></argument>, <argument pos:start="27:21" pos:end="27:21"><expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr></argument>, <argument pos:start="27:24" pos:end="27:63"><expr pos:start="27:24" pos:end="27:63"><call pos:start="27:24" pos:end="27:63"><name pos:start="27:24" pos:end="27:33">CMSG_SPACE</name><argument_list pos:start="27:34" pos:end="27:63">(<argument pos:start="27:35" pos:end="27:62"><expr pos:start="27:35" pos:end="27:62"><sizeof pos:start="27:35" pos:end="27:45">sizeof<argument_list pos:start="27:41" pos:end="27:45">(<argument pos:start="27:42" pos:end="27:44"><expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:44">int</name></expr></argument>)</argument_list></sizeof> <operator pos:start="27:47" pos:end="27:47">*</operator> <name pos:start="27:49" pos:end="27:62">SOCKET_MAX_FDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="31:1" pos:end="31:23">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:23">MSG_CMSG_CLOEXEC</name></cpp:ifdef>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:10">sflags</name> <operator pos:start="33:12" pos:end="33:13">|=</operator> <name pos:start="33:15" pos:end="33:30">MSG_CMSG_CLOEXEC</name></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:7">msg</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:15">msg_iov</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">(</operator>struct <name pos:start="39:27" pos:end="39:31">iovec</name> <operator pos:start="39:33" pos:end="39:33">*</operator><operator pos:start="39:34" pos:end="39:34">)</operator><name pos:start="39:35" pos:end="39:37">iov</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:7">msg</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:18">msg_iovlen</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:25">niov</name></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:20">(<expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:11">fds</name> <operator pos:start="43:13" pos:end="43:14">&amp;&amp;</operator> <name pos:start="43:16" pos:end="43:19">nfds</name></expr>)</condition> <block pos:start="43:22" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:45">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:11">msg</name><operator pos:start="45:12" pos:end="45:12">.</operator><name pos:start="45:13" pos:end="45:23">msg_control</name></name> <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:33">control</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:45"><expr pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:11">msg</name><operator pos:start="47:12" pos:end="47:12">.</operator><name pos:start="47:13" pos:end="47:26">msg_controllen</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <sizeof pos:start="47:30" pos:end="47:44">sizeof<argument_list pos:start="47:36" pos:end="47:44">(<argument pos:start="47:37" pos:end="47:43"><expr pos:start="47:37" pos:end="47:43"><name pos:start="47:37" pos:end="47:43">control</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



 <label pos:start="53:2" pos:end="53:7"><name pos:start="53:2" pos:end="53:6">retry</name>:</label>

    <expr_stmt pos:start="55:5" pos:end="55:42"><expr pos:start="55:5" pos:end="55:41"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:41"><name pos:start="55:11" pos:end="55:17">recvmsg</name><argument_list pos:start="55:18" pos:end="55:41">(<argument pos:start="55:19" pos:end="55:26"><expr pos:start="55:19" pos:end="55:26"><name pos:start="55:19" pos:end="55:26"><name pos:start="55:19" pos:end="55:22">sioc</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:26">fd</name></name></expr></argument>, <argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><operator pos:start="55:29" pos:end="55:29">&amp;</operator><name pos:start="55:30" pos:end="55:32">msg</name></expr></argument>, <argument pos:start="55:35" pos:end="55:40"><expr pos:start="55:35" pos:end="55:40"><name pos:start="55:35" pos:end="55:40">sflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="81:5"><if pos:start="57:5" pos:end="81:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="81:5">{<block_content pos:start="59:9" pos:end="79:18">

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="61:42">(<expr pos:start="59:13" pos:end="61:41"><call pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:24">socket_error</name><argument_list pos:start="59:25" pos:end="59:26">()</argument_list></call> <operator pos:start="59:28" pos:end="59:29">==</operator> <name pos:start="59:31" pos:end="59:36">EAGAIN</name> <operator pos:start="59:38" pos:end="59:39">||</operator>

            <call pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:24">socket_error</name><argument_list pos:start="61:25" pos:end="61:26">()</argument_list></call> <operator pos:start="61:28" pos:end="61:29">==</operator> <name pos:start="61:31" pos:end="61:41">EWOULDBLOCK</name></expr>)</condition> <block pos:start="61:44" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:41">

            <return pos:start="63:13" pos:end="63:41">return <expr pos:start="63:20" pos:end="63:40"><name pos:start="63:20" pos:end="63:40">QIO_CHANNEL_ERR_BLOCK</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:36">(<expr pos:start="67:13" pos:end="67:35"><call pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:24">socket_error</name><argument_list pos:start="67:25" pos:end="67:26">()</argument_list></call> <operator pos:start="67:28" pos:end="67:29">==</operator> <name pos:start="67:31" pos:end="67:35">EINTR</name></expr>)</condition> <block pos:start="67:38" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:23">

            <goto pos:start="69:13" pos:end="69:23">goto <name pos:start="69:18" pos:end="69:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="77:55"><expr pos:start="75:9" pos:end="77:54"><call pos:start="75:9" pos:end="77:54"><name pos:start="75:9" pos:end="75:24">error_setg_errno</name><argument_list pos:start="75:25" pos:end="77:54">(<argument pos:start="75:26" pos:end="75:29"><expr pos:start="75:26" pos:end="75:29"><name pos:start="75:26" pos:end="75:29">errp</name></expr></argument>, <argument pos:start="75:32" pos:end="75:45"><expr pos:start="75:32" pos:end="75:45"><call pos:start="75:32" pos:end="75:45"><name pos:start="75:32" pos:end="75:43">socket_error</name><argument_list pos:start="75:44" pos:end="75:45">()</argument_list></call></expr></argument>,

                         <argument pos:start="77:26" pos:end="77:53"><expr pos:start="77:26" pos:end="77:53"><literal type="string" pos:start="77:26" pos:end="77:53">"Unable to read from socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:20">(<expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:11">fds</name> <operator pos:start="85:13" pos:end="85:14">&amp;&amp;</operator> <name pos:start="85:16" pos:end="85:19">nfds</name></expr>)</condition> <block pos:start="85:22" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:53">

        <expr_stmt pos:start="87:9" pos:end="87:53"><expr pos:start="87:9" pos:end="87:52"><call pos:start="87:9" pos:end="87:52"><name pos:start="87:9" pos:end="87:35">qio_channel_socket_copy_fds</name><argument_list pos:start="87:36" pos:end="87:52">(<argument pos:start="87:37" pos:end="87:40"><expr pos:start="87:37" pos:end="87:40"><operator pos:start="87:37" pos:end="87:37">&amp;</operator><name pos:start="87:38" pos:end="87:40">msg</name></expr></argument>, <argument pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><name pos:start="87:43" pos:end="87:45">fds</name></expr></argument>, <argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">nfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
