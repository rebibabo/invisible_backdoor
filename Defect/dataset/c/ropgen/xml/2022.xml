<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2022.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">tta_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="267:1">{<block_content pos:start="7:5" pos:end="265:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">TTAContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name> <init pos:start="11:19" pos:end="11:36">= <expr pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:25">avctx</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">cur_chan</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>, <decl pos:start="15:23" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:30">framelen</name> <init pos:start="15:32" pos:end="15:48">= <expr pos:start="15:34" pos:end="15:48"><name pos:start="15:34" pos:end="15:48"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:48">frame_length</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int32_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:14">p</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:17">init_get_bits</name><argument_list pos:start="21:18" pos:end="21:42">(<argument pos:start="21:19" pos:end="21:24"><expr pos:start="21:19" pos:end="21:24"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:24">gb</name></name></expr></argument>, <argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><name pos:start="21:27" pos:end="21:29">buf</name></expr></argument>, <argument pos:start="21:32" pos:end="21:41"><expr pos:start="21:32" pos:end="21:41"><name pos:start="21:32" pos:end="21:39">buf_size</name><operator pos:start="21:40" pos:end="21:40">*</operator><literal type="number" pos:start="21:41" pos:end="21:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="25:5" pos:end="25:21">// FIXME: seeking</comment>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:19">total_frames</name></name><operator pos:start="27:20" pos:end="27:21">--</operator></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:40"><if pos:start="29:5" pos:end="31:40">if <condition pos:start="29:8" pos:end="29:49">(<expr pos:start="29:9" pos:end="29:48"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:24"><name pos:start="29:10" pos:end="29:10">s</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:24">total_frames</name></name> <operator pos:start="29:26" pos:end="29:27">&amp;&amp;</operator> <name pos:start="29:29" pos:end="29:48"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:48">last_frame_length</name></name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:40"><block_content pos:start="31:9" pos:end="31:40">

        <expr_stmt pos:start="31:9" pos:end="31:40"><expr pos:start="31:9" pos:end="31:39"><name pos:start="31:9" pos:end="31:16">framelen</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:39"><name pos:start="31:20" pos:end="31:20">s</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:39">last_frame_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:27">/* get output buffer */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:12">frame</name><operator pos:start="37:13" pos:end="37:13">.</operator><name pos:start="37:14" pos:end="37:23">nb_samples</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:34">framelen</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:56">(<expr pos:start="39:9" pos:end="39:55"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:12">ret</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:50"><name pos:start="39:16" pos:end="39:32"><name pos:start="39:16" pos:end="39:20">avctx</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:32">get_buffer</name></name><argument_list pos:start="39:33" pos:end="39:50">(<argument pos:start="39:34" pos:end="39:38"><expr pos:start="39:34" pos:end="39:38"><name pos:start="39:34" pos:end="39:38">avctx</name></expr></argument>, <argument pos:start="39:41" pos:end="39:49"><expr pos:start="39:41" pos:end="39:49"><operator pos:start="39:41" pos:end="39:41">&amp;</operator><name pos:start="39:42" pos:end="39:49"><name pos:start="39:42" pos:end="39:42">s</name><operator pos:start="39:43" pos:end="39:44">-&gt;</operator><name pos:start="39:45" pos:end="39:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="39:51" pos:end="39:51">)</operator> <operator pos:start="39:53" pos:end="39:53">&lt;</operator> <literal type="number" pos:start="39:55" pos:end="39:55">0</literal></expr>)</condition> <block pos:start="39:58" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:19">

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><call pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:60">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:59"><expr pos:start="41:37" pos:end="41:59"><literal type="string" pos:start="41:37" pos:end="41:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="49:5" pos:end="49:64">// decode directly to output buffer for 24-bit sample format</comment>

    <if_stmt pos:start="51:5" pos:end="53:55"><if pos:start="51:5" pos:end="53:55">if <condition pos:start="51:8" pos:end="51:20">(<expr pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:14">bps</name></name> <operator pos:start="51:16" pos:end="51:17">==</operator> <literal type="number" pos:start="51:19" pos:end="51:19">3</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:55"><block_content pos:start="53:9" pos:end="53:55">

        <expr_stmt pos:start="53:9" pos:end="53:55"><expr pos:start="53:9" pos:end="53:54"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:24">decode_buffer</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <operator pos:start="53:28" pos:end="53:28">(</operator><name pos:start="53:29" pos:end="53:35">int32_t</name> <operator pos:start="53:37" pos:end="53:37">*</operator><operator pos:start="53:38" pos:end="53:38">)</operator><name pos:start="53:39" pos:end="53:54"><name pos:start="53:39" pos:end="53:39">s</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:46">frame</name><operator pos:start="53:47" pos:end="53:47">.</operator><name pos:start="53:48" pos:end="53:51">data</name><index pos:start="53:52" pos:end="53:54">[<expr pos:start="53:53" pos:end="53:53"><literal type="number" pos:start="53:53" pos:end="53:53">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="57:5" pos:end="57:30">// init per channel states</comment>

    <for pos:start="59:5" pos:end="67:5">for <control pos:start="59:9" pos:end="59:37">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:32"><expr pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:31"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:31">channels</name></name></expr>;</condition> <incr pos:start="59:34" pos:end="59:36"><expr pos:start="59:34" pos:end="59:36"><name pos:start="59:34" pos:end="59:34">i</name><operator pos:start="59:35" pos:end="59:36">++</operator></expr></incr>)</control> <block pos:start="59:39" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:46">

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:17">ch_ctx</name><index pos:start="61:18" pos:end="61:20">[<expr pos:start="61:19" pos:end="61:19"><name pos:start="61:19" pos:end="61:19">i</name></expr>]</index></name><operator pos:start="61:21" pos:end="61:21">.</operator><name pos:start="61:22" pos:end="61:30">predictor</name> <operator pos:start="61:32" pos:end="61:32">=</operator> <literal type="number" pos:start="61:34" pos:end="61:34">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:109"><expr pos:start="63:9" pos:end="63:108"><call pos:start="63:9" pos:end="63:108"><name pos:start="63:9" pos:end="63:22">ttafilter_init</name><argument_list pos:start="63:23" pos:end="63:108">(<argument pos:start="63:24" pos:end="63:43"><expr pos:start="63:24" pos:end="63:43"><operator pos:start="63:24" pos:end="63:24">&amp;</operator><name pos:start="63:25" pos:end="63:36"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:33">ch_ctx</name><index pos:start="63:34" pos:end="63:36">[<expr pos:start="63:35" pos:end="63:35"><name pos:start="63:35" pos:end="63:35">i</name></expr>]</index></name><operator pos:start="63:37" pos:end="63:37">.</operator><name pos:start="63:38" pos:end="63:43">filter</name></expr></argument>, <argument pos:start="63:46" pos:end="63:75"><expr pos:start="63:46" pos:end="63:75"><name pos:start="63:46" pos:end="63:75"><name pos:start="63:46" pos:end="63:62">ttafilter_configs</name><index pos:start="63:63" pos:end="63:72">[<expr pos:start="63:64" pos:end="63:71"><name pos:start="63:64" pos:end="63:69"><name pos:start="63:64" pos:end="63:64">s</name><operator pos:start="63:65" pos:end="63:66">-&gt;</operator><name pos:start="63:67" pos:end="63:69">bps</name></name><operator pos:start="63:70" pos:end="63:70">-</operator><literal type="number" pos:start="63:71" pos:end="63:71">1</literal></expr>]</index><index pos:start="63:73" pos:end="63:75">[<expr pos:start="63:74" pos:end="63:74"><literal type="number" pos:start="63:74" pos:end="63:74">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:78" pos:end="63:107"><expr pos:start="63:78" pos:end="63:107"><name pos:start="63:78" pos:end="63:107"><name pos:start="63:78" pos:end="63:94">ttafilter_configs</name><index pos:start="63:95" pos:end="63:104">[<expr pos:start="63:96" pos:end="63:103"><name pos:start="63:96" pos:end="63:101"><name pos:start="63:96" pos:end="63:96">s</name><operator pos:start="63:97" pos:end="63:98">-&gt;</operator><name pos:start="63:99" pos:end="63:101">bps</name></name><operator pos:start="63:102" pos:end="63:102">-</operator><literal type="number" pos:start="63:103" pos:end="63:103">1</literal></expr>]</index><index pos:start="63:105" pos:end="63:107">[<expr pos:start="63:106" pos:end="63:106"><literal type="number" pos:start="63:106" pos:end="63:106">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:46"><expr pos:start="65:9" pos:end="65:45"><call pos:start="65:9" pos:end="65:45"><name pos:start="65:9" pos:end="65:17">rice_init</name><argument_list pos:start="65:18" pos:end="65:45">(<argument pos:start="65:19" pos:end="65:36"><expr pos:start="65:19" pos:end="65:36"><operator pos:start="65:19" pos:end="65:19">&amp;</operator><name pos:start="65:20" pos:end="65:31"><name pos:start="65:20" pos:end="65:20">s</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:28">ch_ctx</name><index pos:start="65:29" pos:end="65:31">[<expr pos:start="65:30" pos:end="65:30"><name pos:start="65:30" pos:end="65:30">i</name></expr>]</index></name><operator pos:start="65:32" pos:end="65:32">.</operator><name pos:start="65:33" pos:end="65:36">rice</name></expr></argument>, <argument pos:start="65:39" pos:end="65:40"><expr pos:start="65:39" pos:end="65:40"><literal type="number" pos:start="65:39" pos:end="65:40">10</literal></expr></argument>, <argument pos:start="65:43" pos:end="65:44"><expr pos:start="65:43" pos:end="65:44"><literal type="number" pos:start="65:43" pos:end="65:44">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="71:5" pos:end="219:5">for <control pos:start="71:9" pos:end="71:84">(<init pos:start="71:10" pos:end="71:30"><expr pos:start="71:10" pos:end="71:29"><name pos:start="71:10" pos:end="71:10">p</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:29"><name pos:start="71:14" pos:end="71:14">s</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:29">decode_buffer</name></name></expr>;</init> <condition pos:start="71:32" pos:end="71:79"><expr pos:start="71:32" pos:end="71:78"><name pos:start="71:32" pos:end="71:32">p</name> <operator pos:start="71:34" pos:end="71:34">&lt;</operator> <name pos:start="71:36" pos:end="71:51"><name pos:start="71:36" pos:end="71:36">s</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:51">decode_buffer</name></name> <operator pos:start="71:53" pos:end="71:53">+</operator> <operator pos:start="71:55" pos:end="71:55">(</operator><name pos:start="71:56" pos:end="71:63">framelen</name> <operator pos:start="71:65" pos:end="71:65">*</operator> <name pos:start="71:67" pos:end="71:77"><name pos:start="71:67" pos:end="71:67">s</name><operator pos:start="71:68" pos:end="71:69">-&gt;</operator><name pos:start="71:70" pos:end="71:77">channels</name></name><operator pos:start="71:78" pos:end="71:78">)</operator></expr>;</condition> <incr pos:start="71:81" pos:end="71:83"><expr pos:start="71:81" pos:end="71:83"><name pos:start="71:81" pos:end="71:81">p</name><operator pos:start="71:82" pos:end="71:83">++</operator></expr></incr>)</control> <block pos:start="71:86" pos:end="219:5">{<block_content pos:start="73:9" pos:end="217:9">

        <decl_stmt pos:start="73:9" pos:end="73:60"><decl pos:start="73:9" pos:end="73:59"><type pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:15">int32_t</name> <modifier pos:start="73:17" pos:end="73:17">*</modifier></type><name pos:start="73:18" pos:end="73:26">predictor</name> <init pos:start="73:28" pos:end="73:59">= <expr pos:start="73:30" pos:end="73:59"><operator pos:start="73:30" pos:end="73:30">&amp;</operator><name pos:start="73:31" pos:end="73:49"><name pos:start="73:31" pos:end="73:31">s</name><operator pos:start="73:32" pos:end="73:33">-&gt;</operator><name pos:start="73:34" pos:end="73:39">ch_ctx</name><index pos:start="73:40" pos:end="73:49">[<expr pos:start="73:41" pos:end="73:48"><name pos:start="73:41" pos:end="73:48">cur_chan</name></expr>]</index></name><operator pos:start="73:50" pos:end="73:50">.</operator><name pos:start="73:51" pos:end="73:59">predictor</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:56"><decl pos:start="75:9" pos:end="75:55"><type pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:17">TTAFilter</name> <modifier pos:start="75:19" pos:end="75:19">*</modifier></type><name pos:start="75:20" pos:end="75:25">filter</name> <init pos:start="75:27" pos:end="75:55">= <expr pos:start="75:29" pos:end="75:55"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:48"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:38">ch_ctx</name><index pos:start="75:39" pos:end="75:48">[<expr pos:start="75:40" pos:end="75:47"><name pos:start="75:40" pos:end="75:47">cur_chan</name></expr>]</index></name><operator pos:start="75:49" pos:end="75:49">.</operator><name pos:start="75:50" pos:end="75:55">filter</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:50"><decl pos:start="77:9" pos:end="77:49"><type pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:15">TTARice</name> <modifier pos:start="77:17" pos:end="77:17">*</modifier></type><name pos:start="77:18" pos:end="77:21">rice</name> <init pos:start="77:23" pos:end="77:49">= <expr pos:start="77:25" pos:end="77:49"><operator pos:start="77:25" pos:end="77:25">&amp;</operator><name pos:start="77:26" pos:end="77:44"><name pos:start="77:26" pos:end="77:26">s</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:34">ch_ctx</name><index pos:start="77:35" pos:end="77:44">[<expr pos:start="77:36" pos:end="77:43"><name pos:start="77:36" pos:end="77:43">cur_chan</name></expr>]</index></name><operator pos:start="77:45" pos:end="77:45">.</operator><name pos:start="77:46" pos:end="77:49">rice</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:33"><decl pos:start="79:9" pos:end="79:22"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint32_t</name></type> <name pos:start="79:18" pos:end="79:22">unary</name></decl>, <decl pos:start="79:25" pos:end="79:29"><type ref="prev" pos:start="79:9" pos:end="79:16"/><name pos:start="79:25" pos:end="79:29">depth</name></decl>, <decl pos:start="79:32" pos:end="79:32"><type ref="prev" pos:start="79:9" pos:end="79:16"/><name pos:start="79:32" pos:end="79:32">k</name></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:22"><decl pos:start="81:9" pos:end="81:21"><type pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:15">int32_t</name></type> <name pos:start="81:17" pos:end="81:21">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:38"><expr pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:13">unary</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:37"><name pos:start="85:17" pos:end="85:29">tta_get_unary</name><argument_list pos:start="85:30" pos:end="85:37">(<argument pos:start="85:31" pos:end="85:36"><expr pos:start="85:31" pos:end="85:36"><operator pos:start="85:31" pos:end="85:31">&amp;</operator><name pos:start="85:32" pos:end="85:36"><name pos:start="85:32" pos:end="85:32">s</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:36">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="103:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:23">(<expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:17">unary</name> <operator pos:start="89:19" pos:end="89:20">==</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>)</condition> <block pos:start="89:25" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:25">

            <expr_stmt pos:start="91:13" pos:end="91:22"><expr pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:17">depth</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <literal type="number" pos:start="91:21" pos:end="91:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:25"><expr pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:13">k</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <name pos:start="93:17" pos:end="93:24"><name pos:start="93:17" pos:end="93:20">rice</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:24">k0</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="103:9">else <block pos:start="95:16" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:20">

            <expr_stmt pos:start="97:13" pos:end="97:22"><expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:17">depth</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:25"><expr pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:13">k</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <name pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:20">rice</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:24">k1</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:20"><expr pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:17">unary</name><operator pos:start="101:18" pos:end="101:19">--</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="107:9" pos:end="109:22"><if pos:start="107:9" pos:end="109:22">if <condition pos:start="107:12" pos:end="107:38">(<expr pos:start="107:13" pos:end="107:37"><call pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:25">get_bits_left</name><argument_list pos:start="107:26" pos:end="107:33">(<argument pos:start="107:27" pos:end="107:32"><expr pos:start="107:27" pos:end="107:32"><operator pos:start="107:27" pos:end="107:27">&amp;</operator><name pos:start="107:28" pos:end="107:32"><name pos:start="107:28" pos:end="107:28">s</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="107:35" pos:end="107:35">&lt;</operator> <name pos:start="107:37" pos:end="107:37">k</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:22"><block_content pos:start="109:13" pos:end="109:22">

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="113:9" pos:end="123:26"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:14">(<expr pos:start="113:13" pos:end="113:13"><name pos:start="113:13" pos:end="113:13">k</name></expr>)</condition> <block pos:start="113:16" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:55">

            <if_stmt pos:start="115:13" pos:end="117:26"><if pos:start="115:13" pos:end="117:26">if <condition pos:start="115:16" pos:end="115:35">(<expr pos:start="115:17" pos:end="115:34"><name pos:start="115:17" pos:end="115:17">k</name> <operator pos:start="115:19" pos:end="115:19">&gt;</operator> <name pos:start="115:21" pos:end="115:34">MIN_CACHE_BITS</name></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:26"><block_content pos:start="117:17" pos:end="117:26">

                <return pos:start="117:17" pos:end="117:26">return <expr pos:start="117:24" pos:end="117:25"><operator pos:start="117:24" pos:end="117:24">-</operator><literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:55"><expr pos:start="119:13" pos:end="119:54"><name pos:start="119:13" pos:end="119:17">value</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <operator pos:start="119:21" pos:end="119:21">(</operator><name pos:start="119:22" pos:end="119:26">unary</name> <operator pos:start="119:28" pos:end="119:29">&lt;&lt;</operator> <name pos:start="119:31" pos:end="119:31">k</name><operator pos:start="119:32" pos:end="119:32">)</operator> <operator pos:start="119:34" pos:end="119:34">+</operator> <call pos:start="119:36" pos:end="119:54"><name pos:start="119:36" pos:end="119:43">get_bits</name><argument_list pos:start="119:44" pos:end="119:54">(<argument pos:start="119:45" pos:end="119:50"><expr pos:start="119:45" pos:end="119:50"><operator pos:start="119:45" pos:end="119:45">&amp;</operator><name pos:start="119:46" pos:end="119:50"><name pos:start="119:46" pos:end="119:46">s</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:50">gb</name></name></expr></argument>, <argument pos:start="119:53" pos:end="119:53"><expr pos:start="119:53" pos:end="119:53"><name pos:start="119:53" pos:end="119:53">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="123:26">else<block type="pseudo" pos:start="123:13" pos:end="123:26"><block_content pos:start="123:13" pos:end="123:26">

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:17">value</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <name pos:start="123:21" pos:end="123:25">unary</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="line" pos:start="127:9" pos:end="127:42">// FIXME: copy paste from original</comment>

        <switch pos:start="129:9" pos:end="164:0">switch <condition pos:start="129:16" pos:end="129:22">(<expr pos:start="129:17" pos:end="129:21"><name pos:start="129:17" pos:end="129:21">depth</name></expr>)</condition> <block pos:start="129:24" pos:end="164:0">{<block_content pos:start="131:9" pos:end="155:27">

        <case pos:start="131:9" pos:end="131:15">case <expr pos:start="131:14" pos:end="131:14"><literal type="number" pos:start="131:14" pos:end="131:14">1</literal></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:52"><expr pos:start="133:13" pos:end="133:51"><name pos:start="133:13" pos:end="133:22"><name pos:start="133:13" pos:end="133:16">rice</name><operator pos:start="133:17" pos:end="133:18">-&gt;</operator><name pos:start="133:19" pos:end="133:22">sum1</name></name> <operator pos:start="133:24" pos:end="133:25">+=</operator> <name pos:start="133:27" pos:end="133:31">value</name> <operator pos:start="133:33" pos:end="133:33">-</operator> <operator pos:start="133:35" pos:end="133:35">(</operator><name pos:start="133:36" pos:end="133:45"><name pos:start="133:36" pos:end="133:39">rice</name><operator pos:start="133:40" pos:end="133:41">-&gt;</operator><name pos:start="133:42" pos:end="133:45">sum1</name></name> <operator pos:start="133:47" pos:end="133:48">&gt;&gt;</operator> <literal type="number" pos:start="133:50" pos:end="133:50">4</literal><operator pos:start="133:51" pos:end="133:51">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="141:27"><if pos:start="135:13" pos:end="137:27">if <condition pos:start="135:16" pos:end="135:64">(<expr pos:start="135:17" pos:end="135:63"><name pos:start="135:17" pos:end="135:24"><name pos:start="135:17" pos:end="135:20">rice</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:24">k1</name></name> <operator pos:start="135:26" pos:end="135:26">&gt;</operator> <literal type="number" pos:start="135:28" pos:end="135:28">0</literal> <operator pos:start="135:30" pos:end="135:31">&amp;&amp;</operator> <name pos:start="135:33" pos:end="135:42"><name pos:start="135:33" pos:end="135:36">rice</name><operator pos:start="135:37" pos:end="135:38">-&gt;</operator><name pos:start="135:39" pos:end="135:42">sum1</name></name> <operator pos:start="135:44" pos:end="135:44">&lt;</operator> <name pos:start="135:46" pos:end="135:63"><name pos:start="135:46" pos:end="135:53">shift_16</name><index pos:start="135:54" pos:end="135:63">[<expr pos:start="135:55" pos:end="135:62"><name pos:start="135:55" pos:end="135:62"><name pos:start="135:55" pos:end="135:58">rice</name><operator pos:start="135:59" pos:end="135:60">-&gt;</operator><name pos:start="135:61" pos:end="135:62">k1</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:27"><block_content pos:start="137:17" pos:end="137:27">

                <expr_stmt pos:start="137:17" pos:end="137:27"><expr pos:start="137:17" pos:end="137:26"><name pos:start="137:17" pos:end="137:24"><name pos:start="137:17" pos:end="137:20">rice</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:24">k1</name></name><operator pos:start="137:25" pos:end="137:26">--</operator></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="139:13" pos:end="141:27">else if<condition pos:start="139:20" pos:end="139:56">(<expr pos:start="139:21" pos:end="139:55"><name pos:start="139:21" pos:end="139:30"><name pos:start="139:21" pos:end="139:24">rice</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:30">sum1</name></name> <operator pos:start="139:32" pos:end="139:32">&gt;</operator> <name pos:start="139:34" pos:end="139:55"><name pos:start="139:34" pos:end="139:41">shift_16</name><index pos:start="139:42" pos:end="139:55">[<expr pos:start="139:43" pos:end="139:54"><name pos:start="139:43" pos:end="139:50"><name pos:start="139:43" pos:end="139:46">rice</name><operator pos:start="139:47" pos:end="139:48">-&gt;</operator><name pos:start="139:49" pos:end="139:50">k1</name></name> <operator pos:start="139:52" pos:end="139:52">+</operator> <literal type="number" pos:start="139:54" pos:end="139:54">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:27"><block_content pos:start="141:17" pos:end="141:27">

                <expr_stmt pos:start="141:17" pos:end="141:27"><expr pos:start="141:17" pos:end="141:26"><name pos:start="141:17" pos:end="141:24"><name pos:start="141:17" pos:end="141:20">rice</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:24">k1</name></name><operator pos:start="141:25" pos:end="141:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:39"><expr pos:start="143:13" pos:end="143:38"><name pos:start="143:13" pos:end="143:17">value</name> <operator pos:start="143:19" pos:end="143:20">+=</operator> <name pos:start="143:22" pos:end="143:38"><name pos:start="143:22" pos:end="143:28">shift_1</name><index pos:start="143:29" pos:end="143:38">[<expr pos:start="143:30" pos:end="143:37"><name pos:start="143:30" pos:end="143:37"><name pos:start="143:30" pos:end="143:33">rice</name><operator pos:start="143:34" pos:end="143:35">-&gt;</operator><name pos:start="143:36" pos:end="143:37">k0</name></name></expr>]</index></name></expr>;</expr_stmt>

        <default pos:start="145:9" pos:end="145:16">default:</default>

            <expr_stmt pos:start="147:13" pos:end="147:52"><expr pos:start="147:13" pos:end="147:51"><name pos:start="147:13" pos:end="147:22"><name pos:start="147:13" pos:end="147:16">rice</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:22">sum0</name></name> <operator pos:start="147:24" pos:end="147:25">+=</operator> <name pos:start="147:27" pos:end="147:31">value</name> <operator pos:start="147:33" pos:end="147:33">-</operator> <operator pos:start="147:35" pos:end="147:35">(</operator><name pos:start="147:36" pos:end="147:45"><name pos:start="147:36" pos:end="147:39">rice</name><operator pos:start="147:40" pos:end="147:41">-&gt;</operator><name pos:start="147:42" pos:end="147:45">sum0</name></name> <operator pos:start="147:47" pos:end="147:48">&gt;&gt;</operator> <literal type="number" pos:start="147:50" pos:end="147:50">4</literal><operator pos:start="147:51" pos:end="147:51">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="155:27"><if pos:start="149:13" pos:end="151:27">if <condition pos:start="149:16" pos:end="149:64">(<expr pos:start="149:17" pos:end="149:63"><name pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:20">rice</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:24">k0</name></name> <operator pos:start="149:26" pos:end="149:26">&gt;</operator> <literal type="number" pos:start="149:28" pos:end="149:28">0</literal> <operator pos:start="149:30" pos:end="149:31">&amp;&amp;</operator> <name pos:start="149:33" pos:end="149:42"><name pos:start="149:33" pos:end="149:36">rice</name><operator pos:start="149:37" pos:end="149:38">-&gt;</operator><name pos:start="149:39" pos:end="149:42">sum0</name></name> <operator pos:start="149:44" pos:end="149:44">&lt;</operator> <name pos:start="149:46" pos:end="149:63"><name pos:start="149:46" pos:end="149:53">shift_16</name><index pos:start="149:54" pos:end="149:63">[<expr pos:start="149:55" pos:end="149:62"><name pos:start="149:55" pos:end="149:62"><name pos:start="149:55" pos:end="149:58">rice</name><operator pos:start="149:59" pos:end="149:60">-&gt;</operator><name pos:start="149:61" pos:end="149:62">k0</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:27"><block_content pos:start="151:17" pos:end="151:27">

                <expr_stmt pos:start="151:17" pos:end="151:27"><expr pos:start="151:17" pos:end="151:26"><name pos:start="151:17" pos:end="151:24"><name pos:start="151:17" pos:end="151:20">rice</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:24">k0</name></name><operator pos:start="151:25" pos:end="151:26">--</operator></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="153:13" pos:end="155:27">else if<condition pos:start="153:20" pos:end="153:56">(<expr pos:start="153:21" pos:end="153:55"><name pos:start="153:21" pos:end="153:30"><name pos:start="153:21" pos:end="153:24">rice</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:30">sum0</name></name> <operator pos:start="153:32" pos:end="153:32">&gt;</operator> <name pos:start="153:34" pos:end="153:55"><name pos:start="153:34" pos:end="153:41">shift_16</name><index pos:start="153:42" pos:end="153:55">[<expr pos:start="153:43" pos:end="153:54"><name pos:start="153:43" pos:end="153:50"><name pos:start="153:43" pos:end="153:46">rice</name><operator pos:start="153:47" pos:end="153:48">-&gt;</operator><name pos:start="153:49" pos:end="153:50">k0</name></name> <operator pos:start="153:52" pos:end="153:52">+</operator> <literal type="number" pos:start="153:54" pos:end="153:54">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:27"><block_content pos:start="155:17" pos:end="155:27">

                <expr_stmt pos:start="155:17" pos:end="155:27"><expr pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:24"><name pos:start="155:17" pos:end="155:20">rice</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:24">k0</name></name><operator pos:start="155:25" pos:end="155:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></switch>



        <comment type="line" pos:start="161:9" pos:end="161:30">// extract coded value</comment>

<cpp:define pos:start="163:1" pos:end="163:52">#<cpp:directive pos:start="163:2" pos:end="163:7">define</cpp:directive> <cpp:macro pos:start="163:9" pos:end="163:17"><name pos:start="163:9" pos:end="163:14">UNFOLD</name><parameter_list pos:start="163:15" pos:end="163:17">(<parameter pos:start="163:16" pos:end="163:16"><type pos:start="163:16" pos:end="163:16"><name pos:start="163:16" pos:end="163:16">x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="163:19" pos:end="163:52">(((x)&amp;1) ? (++(x)&gt;&gt;1) : (-(x)&gt;&gt;1))</cpp:value></cpp:define>

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><operator pos:start="165:9" pos:end="165:9">*</operator><name pos:start="165:10" pos:end="165:10">p</name> <operator pos:start="165:12" pos:end="165:12">=</operator> <call pos:start="165:14" pos:end="165:26"><name pos:start="165:14" pos:end="165:19">UNFOLD</name><argument_list pos:start="165:20" pos:end="165:26">(<argument pos:start="165:21" pos:end="165:25"><expr pos:start="165:21" pos:end="165:25"><name pos:start="165:21" pos:end="165:25">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="169:9" pos:end="169:28">// run hybrid filter</comment>

        <expr_stmt pos:start="171:9" pos:end="178:0"><expr pos:start="171:9" pos:end="171:39"><call pos:start="171:9" pos:end="171:39"><name pos:start="171:9" pos:end="171:25">ttafilter_process</name><argument_list pos:start="171:26" pos:end="171:39">(<argument pos:start="171:27" pos:end="171:32"><expr pos:start="171:27" pos:end="171:32"><name pos:start="171:27" pos:end="171:32">filter</name></expr></argument>, <argument pos:start="171:35" pos:end="171:35"><expr pos:start="171:35" pos:end="171:35"><name pos:start="171:35" pos:end="171:35">p</name></expr></argument>, <argument pos:start="171:38" pos:end="171:38"><expr pos:start="171:38" pos:end="171:38"><literal type="number" pos:start="171:38" pos:end="171:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="175:9" pos:end="175:33">// fixed order prediction</comment>

<cpp:define pos:start="177:1" pos:end="177:59">#<cpp:directive pos:start="177:2" pos:end="177:7">define</cpp:directive> <cpp:macro pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:12">PRED</name><parameter_list pos:start="177:13" pos:end="177:18">(<parameter pos:start="177:14" pos:end="177:14"><type pos:start="177:14" pos:end="177:14"><name pos:start="177:14" pos:end="177:14">x</name></type></parameter>, <parameter pos:start="177:17" pos:end="177:17"><type pos:start="177:17" pos:end="177:17"><name pos:start="177:17" pos:end="177:17">k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="177:20" pos:end="177:59">(int32_t)((((uint64_t)x &lt;&lt; k) - x) &gt;&gt; k)</cpp:value></cpp:define>

        <switch pos:start="179:9" pos:end="189:9">switch <condition pos:start="179:16" pos:end="179:23">(<expr pos:start="179:17" pos:end="179:22"><name pos:start="179:17" pos:end="179:22"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:22">bps</name></name></expr>)</condition> <block pos:start="179:25" pos:end="189:9">{<block_content pos:start="181:13" pos:end="187:44">

            <case pos:start="181:13" pos:end="181:19">case <expr pos:start="181:18" pos:end="181:18"><literal type="number" pos:start="181:18" pos:end="181:18">1</literal></expr>:</case> <expr_stmt pos:start="181:21" pos:end="181:46"><expr pos:start="181:21" pos:end="181:45"><operator pos:start="181:21" pos:end="181:21">*</operator><name pos:start="181:22" pos:end="181:22">p</name> <operator pos:start="181:24" pos:end="181:25">+=</operator> <call pos:start="181:27" pos:end="181:45"><name pos:start="181:27" pos:end="181:30">PRED</name><argument_list pos:start="181:31" pos:end="181:45">(<argument pos:start="181:32" pos:end="181:41"><expr pos:start="181:32" pos:end="181:41"><operator pos:start="181:32" pos:end="181:32">*</operator><name pos:start="181:33" pos:end="181:41">predictor</name></expr></argument>, <argument pos:start="181:44" pos:end="181:44"><expr pos:start="181:44" pos:end="181:44"><literal type="number" pos:start="181:44" pos:end="181:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="181:48" pos:end="181:53">break;</break>

            <case pos:start="183:13" pos:end="183:19">case <expr pos:start="183:18" pos:end="183:18"><literal type="number" pos:start="183:18" pos:end="183:18">2</literal></expr>:</case>

            <case pos:start="185:13" pos:end="185:19">case <expr pos:start="185:18" pos:end="185:18"><literal type="number" pos:start="185:18" pos:end="185:18">3</literal></expr>:</case> <expr_stmt pos:start="185:21" pos:end="185:46"><expr pos:start="185:21" pos:end="185:45"><operator pos:start="185:21" pos:end="185:21">*</operator><name pos:start="185:22" pos:end="185:22">p</name> <operator pos:start="185:24" pos:end="185:25">+=</operator> <call pos:start="185:27" pos:end="185:45"><name pos:start="185:27" pos:end="185:30">PRED</name><argument_list pos:start="185:31" pos:end="185:45">(<argument pos:start="185:32" pos:end="185:41"><expr pos:start="185:32" pos:end="185:41"><operator pos:start="185:32" pos:end="185:32">*</operator><name pos:start="185:33" pos:end="185:41">predictor</name></expr></argument>, <argument pos:start="185:44" pos:end="185:44"><expr pos:start="185:44" pos:end="185:44"><literal type="number" pos:start="185:44" pos:end="185:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="185:48" pos:end="185:53">break;</break>

            <case pos:start="187:13" pos:end="187:19">case <expr pos:start="187:18" pos:end="187:18"><literal type="number" pos:start="187:18" pos:end="187:18">4</literal></expr>:</case> <expr_stmt pos:start="187:21" pos:end="187:37"><expr pos:start="187:21" pos:end="187:36"><operator pos:start="187:21" pos:end="187:21">*</operator><name pos:start="187:22" pos:end="187:22">p</name> <operator pos:start="187:24" pos:end="187:25">+=</operator> <operator pos:start="187:27" pos:end="187:27">*</operator><name pos:start="187:28" pos:end="187:36">predictor</name></expr>;</expr_stmt> <break pos:start="187:39" pos:end="187:44">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="191:9" pos:end="191:24"><expr pos:start="191:9" pos:end="191:23"><operator pos:start="191:9" pos:end="191:9">*</operator><name pos:start="191:10" pos:end="191:18">predictor</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <operator pos:start="191:22" pos:end="191:22">*</operator><name pos:start="191:23" pos:end="191:23">p</name></expr>;</expr_stmt>



        <comment type="line" pos:start="195:9" pos:end="195:24">// flip channels</comment>

        <if_stmt pos:start="197:9" pos:end="217:9"><if pos:start="197:9" pos:end="199:23">if <condition pos:start="197:12" pos:end="197:39">(<expr pos:start="197:13" pos:end="197:38"><name pos:start="197:13" pos:end="197:20">cur_chan</name> <operator pos:start="197:22" pos:end="197:22">&lt;</operator> <operator pos:start="197:24" pos:end="197:24">(</operator><name pos:start="197:25" pos:end="197:35"><name pos:start="197:25" pos:end="197:25">s</name><operator pos:start="197:26" pos:end="197:27">-&gt;</operator><name pos:start="197:28" pos:end="197:35">channels</name></name><operator pos:start="197:36" pos:end="197:36">-</operator><literal type="number" pos:start="197:37" pos:end="197:37">1</literal><operator pos:start="197:38" pos:end="197:38">)</operator></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:23"><block_content pos:start="199:13" pos:end="199:23">

            <expr_stmt pos:start="199:13" pos:end="199:23"><expr pos:start="199:13" pos:end="199:22"><name pos:start="199:13" pos:end="199:20">cur_chan</name><operator pos:start="199:21" pos:end="199:22">++</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="201:9" pos:end="217:9">else <block pos:start="201:14" pos:end="217:9">{<block_content pos:start="205:13" pos:end="215:25">

            <comment type="line" pos:start="203:13" pos:end="203:52">// decorrelate in case of stereo integer</comment>

            <if_stmt pos:start="205:13" pos:end="213:13"><if pos:start="205:13" pos:end="213:13">if <condition pos:start="205:16" pos:end="205:32">(<expr pos:start="205:17" pos:end="205:31"><name pos:start="205:17" pos:end="205:27"><name pos:start="205:17" pos:end="205:17">s</name><operator pos:start="205:18" pos:end="205:19">-&gt;</operator><name pos:start="205:20" pos:end="205:27">channels</name></name> <operator pos:start="205:29" pos:end="205:29">&gt;</operator> <literal type="number" pos:start="205:31" pos:end="205:31">1</literal></expr>)</condition> <block pos:start="205:34" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:39">

                <decl_stmt pos:start="207:17" pos:end="207:35"><decl pos:start="207:17" pos:end="207:34"><type pos:start="207:17" pos:end="207:25"><name pos:start="207:17" pos:end="207:23">int32_t</name> <modifier pos:start="207:25" pos:end="207:25">*</modifier></type><name pos:start="207:26" pos:end="207:26">r</name> <init pos:start="207:28" pos:end="207:34">= <expr pos:start="207:30" pos:end="207:34"><name pos:start="207:30" pos:end="207:30">p</name> <operator pos:start="207:32" pos:end="207:32">-</operator> <literal type="number" pos:start="207:34" pos:end="207:34">1</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="209:17" pos:end="211:39">for <control pos:start="209:21" pos:end="209:60">(<init pos:start="209:22" pos:end="209:34"><expr pos:start="209:22" pos:end="209:33"><operator pos:start="209:22" pos:end="209:22">*</operator><name pos:start="209:23" pos:end="209:23">p</name> <operator pos:start="209:25" pos:end="209:26">+=</operator> <operator pos:start="209:28" pos:end="209:28">*</operator><name pos:start="209:29" pos:end="209:29">r</name> <operator pos:start="209:31" pos:end="209:31">/</operator> <literal type="number" pos:start="209:33" pos:end="209:33">2</literal></expr>;</init> <condition pos:start="209:36" pos:end="209:55"><expr pos:start="209:36" pos:end="209:54"><name pos:start="209:36" pos:end="209:36">r</name> <operator pos:start="209:38" pos:end="209:38">&gt;</operator> <name pos:start="209:40" pos:end="209:40">p</name> <operator pos:start="209:42" pos:end="209:42">-</operator> <name pos:start="209:44" pos:end="209:54"><name pos:start="209:44" pos:end="209:44">s</name><operator pos:start="209:45" pos:end="209:46">-&gt;</operator><name pos:start="209:47" pos:end="209:54">channels</name></name></expr>;</condition> <incr pos:start="209:57" pos:end="209:59"><expr pos:start="209:57" pos:end="209:59"><name pos:start="209:57" pos:end="209:57">r</name><operator pos:start="209:58" pos:end="209:59">--</operator></expr></incr>)</control><block type="pseudo" pos:start="211:21" pos:end="211:39"><block_content pos:start="211:21" pos:end="211:39">

                    <expr_stmt pos:start="211:21" pos:end="211:39"><expr pos:start="211:21" pos:end="211:38"><operator pos:start="211:21" pos:end="211:21">*</operator><name pos:start="211:22" pos:end="211:22">r</name> <operator pos:start="211:24" pos:end="211:24">=</operator> <operator pos:start="211:26" pos:end="211:26">*</operator><operator pos:start="211:27" pos:end="211:27">(</operator><name pos:start="211:28" pos:end="211:28">r</name> <operator pos:start="211:30" pos:end="211:30">+</operator> <literal type="number" pos:start="211:32" pos:end="211:32">1</literal><operator pos:start="211:33" pos:end="211:33">)</operator> <operator pos:start="211:35" pos:end="211:35">-</operator> <operator pos:start="211:37" pos:end="211:37">*</operator><name pos:start="211:38" pos:end="211:38">r</name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:25"><expr pos:start="215:13" pos:end="215:24"><name pos:start="215:13" pos:end="215:20">cur_chan</name> <operator pos:start="215:22" pos:end="215:22">=</operator> <literal type="number" pos:start="215:24" pos:end="215:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="223:5" pos:end="225:18"><if pos:start="223:5" pos:end="225:18">if <condition pos:start="223:8" pos:end="223:35">(<expr pos:start="223:9" pos:end="223:34"><call pos:start="223:9" pos:end="223:29"><name pos:start="223:9" pos:end="223:21">get_bits_left</name><argument_list pos:start="223:22" pos:end="223:29">(<argument pos:start="223:23" pos:end="223:28"><expr pos:start="223:23" pos:end="223:28"><operator pos:start="223:23" pos:end="223:23">&amp;</operator><name pos:start="223:24" pos:end="223:28"><name pos:start="223:24" pos:end="223:24">s</name><operator pos:start="223:25" pos:end="223:26">-&gt;</operator><name pos:start="223:27" pos:end="223:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="223:31" pos:end="223:31">&lt;</operator> <literal type="number" pos:start="223:33" pos:end="223:34">32</literal></expr>)</condition><block type="pseudo" pos:start="225:9" pos:end="225:18"><block_content pos:start="225:9" pos:end="225:18">

        <return pos:start="225:9" pos:end="225:18">return <expr pos:start="225:16" pos:end="225:17"><operator pos:start="225:16" pos:end="225:16">-</operator><literal type="number" pos:start="225:17" pos:end="225:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:31"><expr pos:start="227:5" pos:end="227:30"><call pos:start="227:5" pos:end="227:30"><name pos:start="227:5" pos:end="227:18">skip_bits_long</name><argument_list pos:start="227:19" pos:end="227:30">(<argument pos:start="227:20" pos:end="227:25"><expr pos:start="227:20" pos:end="227:25"><operator pos:start="227:20" pos:end="227:20">&amp;</operator><name pos:start="227:21" pos:end="227:25"><name pos:start="227:21" pos:end="227:21">s</name><operator pos:start="227:22" pos:end="227:23">-&gt;</operator><name pos:start="227:24" pos:end="227:25">gb</name></name></expr></argument>, <argument pos:start="227:28" pos:end="227:29"><expr pos:start="227:28" pos:end="227:29"><literal type="number" pos:start="227:28" pos:end="227:29">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="227:33" pos:end="227:44">// frame crc</comment>



    <comment type="line" pos:start="231:5" pos:end="231:31">// convert to output buffer</comment>

    <if_stmt pos:start="233:5" pos:end="255:5"><if pos:start="233:5" pos:end="241:5">if <condition pos:start="233:8" pos:end="233:20">(<expr pos:start="233:9" pos:end="233:19"><name pos:start="233:9" pos:end="233:14"><name pos:start="233:9" pos:end="233:9">s</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:14">bps</name></name> <operator pos:start="233:16" pos:end="233:17">==</operator> <literal type="number" pos:start="233:19" pos:end="233:19">2</literal></expr>)</condition> <block pos:start="233:22" pos:end="241:5">{<block_content pos:start="235:9" pos:end="239:28">

        <decl_stmt pos:start="235:9" pos:end="235:55"><decl pos:start="235:9" pos:end="235:54"><type pos:start="235:9" pos:end="235:17"><name pos:start="235:9" pos:end="235:15">int16_t</name> <modifier pos:start="235:17" pos:end="235:17">*</modifier></type><name pos:start="235:18" pos:end="235:24">samples</name> <init pos:start="235:26" pos:end="235:54">= <expr pos:start="235:28" pos:end="235:54"><operator pos:start="235:28" pos:end="235:28">(</operator><name pos:start="235:29" pos:end="235:35">int16_t</name> <operator pos:start="235:37" pos:end="235:37">*</operator><operator pos:start="235:38" pos:end="235:38">)</operator><name pos:start="235:39" pos:end="235:54"><name pos:start="235:39" pos:end="235:39">s</name><operator pos:start="235:40" pos:end="235:41">-&gt;</operator><name pos:start="235:42" pos:end="235:46">frame</name><operator pos:start="235:47" pos:end="235:47">.</operator><name pos:start="235:48" pos:end="235:51">data</name><index pos:start="235:52" pos:end="235:54">[<expr pos:start="235:53" pos:end="235:53"><literal type="number" pos:start="235:53" pos:end="235:53">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="237:9" pos:end="239:28">for <control pos:start="237:13" pos:end="237:88">(<init pos:start="237:14" pos:end="237:34"><expr pos:start="237:14" pos:end="237:33"><name pos:start="237:14" pos:end="237:14">p</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <name pos:start="237:18" pos:end="237:33"><name pos:start="237:18" pos:end="237:18">s</name><operator pos:start="237:19" pos:end="237:20">-&gt;</operator><name pos:start="237:21" pos:end="237:33">decode_buffer</name></name></expr>;</init> <condition pos:start="237:36" pos:end="237:83"><expr pos:start="237:36" pos:end="237:82"><name pos:start="237:36" pos:end="237:36">p</name> <operator pos:start="237:38" pos:end="237:38">&lt;</operator> <name pos:start="237:40" pos:end="237:55"><name pos:start="237:40" pos:end="237:40">s</name><operator pos:start="237:41" pos:end="237:42">-&gt;</operator><name pos:start="237:43" pos:end="237:55">decode_buffer</name></name> <operator pos:start="237:57" pos:end="237:57">+</operator> <operator pos:start="237:59" pos:end="237:59">(</operator><name pos:start="237:60" pos:end="237:67">framelen</name> <operator pos:start="237:69" pos:end="237:69">*</operator> <name pos:start="237:71" pos:end="237:81"><name pos:start="237:71" pos:end="237:71">s</name><operator pos:start="237:72" pos:end="237:73">-&gt;</operator><name pos:start="237:74" pos:end="237:81">channels</name></name><operator pos:start="237:82" pos:end="237:82">)</operator></expr>;</condition> <incr pos:start="237:85" pos:end="237:87"><expr pos:start="237:85" pos:end="237:87"><name pos:start="237:85" pos:end="237:85">p</name><operator pos:start="237:86" pos:end="237:87">++</operator></expr></incr>)</control><block type="pseudo" pos:start="239:13" pos:end="239:28"><block_content pos:start="239:13" pos:end="239:28">

            <expr_stmt pos:start="239:13" pos:end="239:28"><expr pos:start="239:13" pos:end="239:27"><operator pos:start="239:13" pos:end="239:13">*</operator><name pos:start="239:14" pos:end="239:20">samples</name><operator pos:start="239:21" pos:end="239:22">++</operator> <operator pos:start="239:24" pos:end="239:24">=</operator> <operator pos:start="239:26" pos:end="239:26">*</operator><name pos:start="239:27" pos:end="239:27">p</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="241:7" pos:end="255:5">else <block pos:start="241:12" pos:end="255:5">{<block_content pos:start="245:9" pos:end="253:32">

        <comment type="line" pos:start="243:9" pos:end="243:49">// shift samples for 24-bit sample format</comment>

        <decl_stmt pos:start="245:9" pos:end="245:55"><decl pos:start="245:9" pos:end="245:54"><type pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:15">int32_t</name> <modifier pos:start="245:17" pos:end="245:17">*</modifier></type><name pos:start="245:18" pos:end="245:24">samples</name> <init pos:start="245:26" pos:end="245:54">= <expr pos:start="245:28" pos:end="245:54"><operator pos:start="245:28" pos:end="245:28">(</operator><name pos:start="245:29" pos:end="245:35">int32_t</name> <operator pos:start="245:37" pos:end="245:37">*</operator><operator pos:start="245:38" pos:end="245:38">)</operator><name pos:start="245:39" pos:end="245:54"><name pos:start="245:39" pos:end="245:39">s</name><operator pos:start="245:40" pos:end="245:41">-&gt;</operator><name pos:start="245:42" pos:end="245:46">frame</name><operator pos:start="245:47" pos:end="245:47">.</operator><name pos:start="245:48" pos:end="245:51">data</name><index pos:start="245:52" pos:end="245:54">[<expr pos:start="245:53" pos:end="245:53"><literal type="number" pos:start="245:53" pos:end="245:53">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="247:9" pos:end="249:29">for <control pos:start="247:13" pos:end="247:52">(<init pos:start="247:14" pos:end="247:19"><expr pos:start="247:14" pos:end="247:18"><name pos:start="247:14" pos:end="247:14">i</name> <operator pos:start="247:16" pos:end="247:16">=</operator> <literal type="number" pos:start="247:18" pos:end="247:18">0</literal></expr>;</init> <condition pos:start="247:21" pos:end="247:47"><expr pos:start="247:21" pos:end="247:46"><name pos:start="247:21" pos:end="247:21">i</name> <operator pos:start="247:23" pos:end="247:23">&lt;</operator> <name pos:start="247:25" pos:end="247:32">framelen</name> <operator pos:start="247:34" pos:end="247:34">*</operator> <name pos:start="247:36" pos:end="247:46"><name pos:start="247:36" pos:end="247:36">s</name><operator pos:start="247:37" pos:end="247:38">-&gt;</operator><name pos:start="247:39" pos:end="247:46">channels</name></name></expr>;</condition> <incr pos:start="247:49" pos:end="247:51"><expr pos:start="247:49" pos:end="247:51"><name pos:start="247:49" pos:end="247:49">i</name><operator pos:start="247:50" pos:end="247:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="249:13" pos:end="249:29"><block_content pos:start="249:13" pos:end="249:29">

            <expr_stmt pos:start="249:13" pos:end="249:29"><expr pos:start="249:13" pos:end="249:28"><operator pos:start="249:13" pos:end="249:13">*</operator><name pos:start="249:14" pos:end="249:20">samples</name><operator pos:start="249:21" pos:end="249:22">++</operator> <operator pos:start="249:24" pos:end="249:26">&lt;&lt;=</operator> <literal type="number" pos:start="249:28" pos:end="249:28">8</literal></expr>;</expr_stmt></block_content></block></for>

        <comment type="line" pos:start="251:9" pos:end="251:30">// reset decode buffer</comment>

        <expr_stmt pos:start="253:9" pos:end="253:32"><expr pos:start="253:9" pos:end="253:31"><name pos:start="253:9" pos:end="253:24"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:24">decode_buffer</name></name> <operator pos:start="253:26" pos:end="253:26">=</operator> <name pos:start="253:28" pos:end="253:31">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:25"><expr pos:start="259:5" pos:end="259:24"><operator pos:start="259:5" pos:end="259:5">*</operator><name pos:start="259:6" pos:end="259:18">got_frame_ptr</name>   <operator pos:start="259:22" pos:end="259:22">=</operator> <literal type="number" pos:start="259:24" pos:end="259:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:32"><expr pos:start="261:5" pos:end="261:31"><operator pos:start="261:5" pos:end="261:5">*</operator><operator pos:start="261:6" pos:end="261:6">(</operator><name pos:start="261:7" pos:end="261:13">AVFrame</name> <operator pos:start="261:15" pos:end="261:15">*</operator><operator pos:start="261:16" pos:end="261:16">)</operator><name pos:start="261:17" pos:end="261:20">data</name> <operator pos:start="261:22" pos:end="261:22">=</operator> <name pos:start="261:24" pos:end="261:31"><name pos:start="261:24" pos:end="261:24">s</name><operator pos:start="261:25" pos:end="261:26">-&gt;</operator><name pos:start="261:27" pos:end="261:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="265:5" pos:end="265:20">return <expr pos:start="265:12" pos:end="265:19"><name pos:start="265:12" pos:end="265:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
