<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8498.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">writev_f</name><parameter_list pos:start="1:20" pos:end="1:61">(<parameter pos:start="1:21" pos:end="1:37"><decl pos:start="1:21" pos:end="1:37"><type pos:start="1:21" pos:end="1:37"><name pos:start="1:21" pos:end="1:32">BlockBackend</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">blk</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:47">argc</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:60"><decl pos:start="1:50" pos:end="1:60"><type pos:start="1:50" pos:end="1:60"><name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:14">Cflag</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><name pos:start="7:18" pos:end="7:22">false</name></expr></init></decl>, <decl pos:start="7:25" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:25" pos:end="7:29">qflag</name> <init pos:start="7:31" pos:end="7:37">= <expr pos:start="7:33" pos:end="7:37"><name pos:start="7:33" pos:end="7:37">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">flags</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">offset</name></decl>;</decl_stmt>

    <comment type="block" pos:start="17:5" pos:end="17:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">total</name> <init pos:start="19:15" pos:end="19:17">= <expr pos:start="19:17" pos:end="19:17"><literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:14">nr_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">pattern</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><literal type="number" pos:start="23:19" pos:end="23:22">0xcd</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">QEMUIOVector</name></type> <name pos:start="25:18" pos:end="25:21">qiov</name></decl>;</decl_stmt>



    <while pos:start="29:5" pos:end="69:5">while <condition pos:start="29:11" pos:end="29:50">(<expr pos:start="29:12" pos:end="29:49"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:13">c</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:42"><name pos:start="29:17" pos:end="29:22">getopt</name><argument_list pos:start="29:23" pos:end="29:42">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">argc</name></expr></argument>, <argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">argv</name></expr></argument>, <argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><literal type="string" pos:start="29:36" pos:end="29:41">"CqP:"</literal></expr></argument>)</argument_list></call><operator pos:start="29:43" pos:end="29:43">)</operator> <operator pos:start="29:45" pos:end="29:46">!=</operator> <operator pos:start="29:48" pos:end="29:48">-</operator><literal type="number" pos:start="29:49" pos:end="29:49">1</literal></expr>)</condition> <block pos:start="29:52" pos:end="69:5">{<block_content pos:start="31:9" pos:end="67:9">

        <switch pos:start="31:9" pos:end="67:9">switch <condition pos:start="31:16" pos:end="31:18">(<expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">c</name></expr>)</condition> <block pos:start="31:20" pos:end="67:9">{<block_content pos:start="33:9" pos:end="65:53">

        <case pos:start="33:9" pos:end="33:17">case <expr pos:start="33:14" pos:end="33:16"><literal type="char" pos:start="33:14" pos:end="33:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:17">Cflag</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:24">true</name></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:17">case <expr pos:start="39:14" pos:end="39:16"><literal type="char" pos:start="39:14" pos:end="39:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:34"><expr pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:17">flags</name> <operator pos:start="41:19" pos:end="41:20">|=</operator> <name pos:start="41:22" pos:end="41:33">BDRV_REQ_FUA</name></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:17">qflag</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:24">true</name></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:17">case <expr pos:start="51:14" pos:end="51:16"><literal type="char" pos:start="51:14" pos:end="51:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:44"><expr pos:start="53:13" pos:end="53:43"><name pos:start="53:13" pos:end="53:19">pattern</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:43"><name pos:start="53:23" pos:end="53:35">parse_pattern</name><argument_list pos:start="53:36" pos:end="53:43">(<argument pos:start="53:37" pos:end="53:42"><expr pos:start="53:37" pos:end="53:42"><name pos:start="53:37" pos:end="53:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="59:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:28">(<expr pos:start="55:17" pos:end="55:27"><name pos:start="55:17" pos:end="55:23">pattern</name> <operator pos:start="55:25" pos:end="55:25">&lt;</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>)</condition> <block pos:start="55:30" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:25">

                <return pos:start="57:17" pos:end="57:25">return <expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <default pos:start="63:9" pos:end="63:16">default:</default>

            <return pos:start="65:13" pos:end="65:53">return <expr pos:start="65:20" pos:end="65:52"><call pos:start="65:20" pos:end="65:52"><name pos:start="65:20" pos:end="65:39">qemuio_command_usage</name><argument_list pos:start="65:40" pos:end="65:52">(<argument pos:start="65:41" pos:end="65:51"><expr pos:start="65:41" pos:end="65:51"><operator pos:start="65:41" pos:end="65:41">&amp;</operator><name pos:start="65:42" pos:end="65:51">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:26">(<expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:14">optind</name> <operator pos:start="73:16" pos:end="73:16">&gt;</operator> <name pos:start="73:18" pos:end="73:21">argc</name> <operator pos:start="73:23" pos:end="73:23">-</operator> <literal type="number" pos:start="73:25" pos:end="73:25">2</literal></expr>)</condition> <block pos:start="73:28" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:49">

        <return pos:start="75:9" pos:end="75:49">return <expr pos:start="75:16" pos:end="75:48"><call pos:start="75:16" pos:end="75:48"><name pos:start="75:16" pos:end="75:35">qemuio_command_usage</name><argument_list pos:start="75:36" pos:end="75:48">(<argument pos:start="75:37" pos:end="75:47"><expr pos:start="75:37" pos:end="75:47"><operator pos:start="75:37" pos:end="75:37">&amp;</operator><name pos:start="75:38" pos:end="75:47">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:10">offset</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:33"><name pos:start="81:14" pos:end="81:19">cvtnum</name><argument_list pos:start="81:20" pos:end="81:33">(<argument pos:start="81:21" pos:end="81:32"><expr pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:32"><name pos:start="81:21" pos:end="81:24">argv</name><index pos:start="81:25" pos:end="81:32">[<expr pos:start="81:26" pos:end="81:31"><name pos:start="81:26" pos:end="81:31">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:19">(<expr pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:14">offset</name> <operator pos:start="83:16" pos:end="83:16">&lt;</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>)</condition> <block pos:start="83:21" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:17">

        <expr_stmt pos:start="85:9" pos:end="85:47"><expr pos:start="85:9" pos:end="85:46"><call pos:start="85:9" pos:end="85:46"><name pos:start="85:9" pos:end="85:24">print_cvtnum_err</name><argument_list pos:start="85:25" pos:end="85:46">(<argument pos:start="85:26" pos:end="85:31"><expr pos:start="85:26" pos:end="85:31"><name pos:start="85:26" pos:end="85:31">offset</name></expr></argument>, <argument pos:start="85:34" pos:end="85:45"><expr pos:start="85:34" pos:end="85:45"><name pos:start="85:34" pos:end="85:45"><name pos:start="85:34" pos:end="85:37">argv</name><index pos:start="85:38" pos:end="85:45">[<expr pos:start="85:39" pos:end="85:44"><name pos:start="85:39" pos:end="85:44">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:17">return <expr pos:start="87:16" pos:end="87:16"><literal type="number" pos:start="87:16" pos:end="87:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:13"><expr pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:10">optind</name><operator pos:start="91:11" pos:end="91:12">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:10">nr_iov</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <name pos:start="95:14" pos:end="95:17">argc</name> <operator pos:start="95:19" pos:end="95:19">-</operator> <name pos:start="95:21" pos:end="95:26">optind</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:67"><expr pos:start="97:5" pos:end="97:66"><name pos:start="97:5" pos:end="97:7">buf</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:66"><name pos:start="97:11" pos:end="97:22">create_iovec</name><argument_list pos:start="97:23" pos:end="97:66">(<argument pos:start="97:24" pos:end="97:26"><expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">blk</name></expr></argument>, <argument pos:start="97:29" pos:end="97:33"><expr pos:start="97:29" pos:end="97:33"><operator pos:start="97:29" pos:end="97:29">&amp;</operator><name pos:start="97:30" pos:end="97:33">qiov</name></expr></argument>, <argument pos:start="97:36" pos:end="97:48"><expr pos:start="97:36" pos:end="97:48"><operator pos:start="97:36" pos:end="97:36">&amp;</operator><name pos:start="97:37" pos:end="97:48"><name pos:start="97:37" pos:end="97:40">argv</name><index pos:start="97:41" pos:end="97:48">[<expr pos:start="97:42" pos:end="97:47"><name pos:start="97:42" pos:end="97:47">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="97:51" pos:end="97:56"><expr pos:start="97:51" pos:end="97:56"><name pos:start="97:51" pos:end="97:56">nr_iov</name></expr></argument>, <argument pos:start="97:59" pos:end="97:65"><expr pos:start="97:59" pos:end="97:65"><name pos:start="97:59" pos:end="97:65">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:20">(<expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:11">buf</name> <operator pos:start="99:13" pos:end="99:14">==</operator> <name pos:start="99:16" pos:end="99:19">NULL</name></expr>)</condition> <block pos:start="99:22" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:17">

        <return pos:start="101:9" pos:end="101:17">return <expr pos:start="101:16" pos:end="101:16"><literal type="number" pos:start="101:16" pos:end="101:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:28"><expr pos:start="107:5" pos:end="107:27"><call pos:start="107:5" pos:end="107:27"><name pos:start="107:5" pos:end="107:16">gettimeofday</name><argument_list pos:start="107:17" pos:end="107:27">(<argument pos:start="107:18" pos:end="107:20"><expr pos:start="107:18" pos:end="107:20"><operator pos:start="107:18" pos:end="107:18">&amp;</operator><name pos:start="107:19" pos:end="107:20">t1</name></expr></argument>, <argument pos:start="107:23" pos:end="107:26"><expr pos:start="107:23" pos:end="107:26"><name pos:start="107:23" pos:end="107:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:7">cnt</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:58"><name pos:start="109:11" pos:end="109:23">do_aio_writev</name><argument_list pos:start="109:24" pos:end="109:58">(<argument pos:start="109:25" pos:end="109:27"><expr pos:start="109:25" pos:end="109:27"><name pos:start="109:25" pos:end="109:27">blk</name></expr></argument>, <argument pos:start="109:30" pos:end="109:34"><expr pos:start="109:30" pos:end="109:34"><operator pos:start="109:30" pos:end="109:30">&amp;</operator><name pos:start="109:31" pos:end="109:34">qiov</name></expr></argument>, <argument pos:start="109:37" pos:end="109:42"><expr pos:start="109:37" pos:end="109:42"><name pos:start="109:37" pos:end="109:42">offset</name></expr></argument>, <argument pos:start="109:45" pos:end="109:49"><expr pos:start="109:45" pos:end="109:49"><name pos:start="109:45" pos:end="109:49">flags</name></expr></argument>, <argument pos:start="109:52" pos:end="109:57"><expr pos:start="109:52" pos:end="109:57"><operator pos:start="109:52" pos:end="109:52">&amp;</operator><name pos:start="109:53" pos:end="109:57">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:28"><expr pos:start="111:5" pos:end="111:27"><call pos:start="111:5" pos:end="111:27"><name pos:start="111:5" pos:end="111:16">gettimeofday</name><argument_list pos:start="111:17" pos:end="111:27">(<argument pos:start="111:18" pos:end="111:20"><expr pos:start="111:18" pos:end="111:20"><operator pos:start="111:18" pos:end="111:18">&amp;</operator><name pos:start="111:19" pos:end="111:20">t2</name></expr></argument>, <argument pos:start="111:23" pos:end="111:26"><expr pos:start="111:23" pos:end="111:26"><name pos:start="111:23" pos:end="111:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:16">(<expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:11">cnt</name> <operator pos:start="115:13" pos:end="115:13">&lt;</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>)</condition> <block pos:start="115:18" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:17">

        <expr_stmt pos:start="117:9" pos:end="117:54"><expr pos:start="117:9" pos:end="117:53"><call pos:start="117:9" pos:end="117:53"><name pos:start="117:9" pos:end="117:14">printf</name><argument_list pos:start="117:15" pos:end="117:53">(<argument pos:start="117:16" pos:end="117:36"><expr pos:start="117:16" pos:end="117:36"><literal type="string" pos:start="117:16" pos:end="117:36">"writev failed: %s\n"</literal></expr></argument>, <argument pos:start="117:39" pos:end="117:52"><expr pos:start="117:39" pos:end="117:52"><call pos:start="117:39" pos:end="117:52"><name pos:start="117:39" pos:end="117:46">strerror</name><argument_list pos:start="117:47" pos:end="117:52">(<argument pos:start="117:48" pos:end="117:51"><expr pos:start="117:48" pos:end="117:51"><operator pos:start="117:48" pos:end="117:48">-</operator><name pos:start="117:49" pos:end="117:51">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:17">goto <name pos:start="119:14" pos:end="119:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:14">(<expr pos:start="125:9" pos:end="125:13"><name pos:start="125:9" pos:end="125:13">qflag</name></expr>)</condition> <block pos:start="125:16" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:17">

        <goto pos:start="127:9" pos:end="127:17">goto <name pos:start="127:14" pos:end="127:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:22"><expr pos:start="135:5" pos:end="135:21"><name pos:start="135:5" pos:end="135:6">t2</name> <operator pos:start="135:8" pos:end="135:8">=</operator> <call pos:start="135:10" pos:end="135:21"><name pos:start="135:10" pos:end="135:13">tsub</name><argument_list pos:start="135:14" pos:end="135:21">(<argument pos:start="135:15" pos:end="135:16"><expr pos:start="135:15" pos:end="135:16"><name pos:start="135:15" pos:end="135:16">t2</name></expr></argument>, <argument pos:start="135:19" pos:end="135:20"><expr pos:start="135:19" pos:end="135:20"><name pos:start="135:19" pos:end="135:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:69"><expr pos:start="137:5" pos:end="137:68"><call pos:start="137:5" pos:end="137:68"><name pos:start="137:5" pos:end="137:16">print_report</name><argument_list pos:start="137:17" pos:end="137:68">(<argument pos:start="137:18" pos:end="137:24"><expr pos:start="137:18" pos:end="137:24"><literal type="string" pos:start="137:18" pos:end="137:24">"wrote"</literal></expr></argument>, <argument pos:start="137:27" pos:end="137:29"><expr pos:start="137:27" pos:end="137:29"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:29">t2</name></expr></argument>, <argument pos:start="137:32" pos:end="137:37"><expr pos:start="137:32" pos:end="137:37"><name pos:start="137:32" pos:end="137:37">offset</name></expr></argument>, <argument pos:start="137:40" pos:end="137:48"><expr pos:start="137:40" pos:end="137:48"><name pos:start="137:40" pos:end="137:48"><name pos:start="137:40" pos:end="137:43">qiov</name><operator pos:start="137:44" pos:end="137:44">.</operator><name pos:start="137:45" pos:end="137:48">size</name></name></expr></argument>, <argument pos:start="137:51" pos:end="137:55"><expr pos:start="137:51" pos:end="137:55"><name pos:start="137:51" pos:end="137:55">total</name></expr></argument>, <argument pos:start="137:58" pos:end="137:60"><expr pos:start="137:58" pos:end="137:60"><name pos:start="137:58" pos:end="137:60">cnt</name></expr></argument>, <argument pos:start="137:63" pos:end="137:67"><expr pos:start="137:63" pos:end="137:67"><name pos:start="137:63" pos:end="137:67">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="139:1" pos:end="139:4"><name pos:start="139:1" pos:end="139:3">out</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:30"><expr pos:start="141:5" pos:end="141:29"><call pos:start="141:5" pos:end="141:29"><name pos:start="141:5" pos:end="141:22">qemu_iovec_destroy</name><argument_list pos:start="141:23" pos:end="141:29">(<argument pos:start="141:24" pos:end="141:28"><expr pos:start="141:24" pos:end="141:28"><operator pos:start="141:24" pos:end="141:24">&amp;</operator><name pos:start="141:25" pos:end="141:28">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:22"><expr pos:start="143:5" pos:end="143:21"><call pos:start="143:5" pos:end="143:21"><name pos:start="143:5" pos:end="143:16">qemu_io_free</name><argument_list pos:start="143:17" pos:end="143:21">(<argument pos:start="143:18" pos:end="143:20"><expr pos:start="143:18" pos:end="143:20"><name pos:start="143:18" pos:end="143:20">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="145:5" pos:end="145:13">return <expr pos:start="145:12" pos:end="145:12"><literal type="number" pos:start="145:12" pos:end="145:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
