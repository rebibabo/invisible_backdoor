<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2351.c" pos:tabs="8"><function pos:start="1:1" pos:end="421:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">slirp_pollfds_poll</name><parameter_list pos:start="1:24" pos:end="1:58">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:30">GArray</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:39">pollfds</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:57">select_error</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="421:1">{<block_content pos:start="5:5" pos:end="419:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Slirp</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:16">slirp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">socket</name></name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">so</name></decl>, <decl pos:start="7:24" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:19"><modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:31">so_next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:39">(<expr pos:start="13:9" pos:end="13:38"><call pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:20">QTAILQ_EMPTY</name><argument_list pos:start="13:21" pos:end="13:38">(<argument pos:start="13:22" pos:end="13:37"><expr pos:start="13:22" pos:end="13:37"><operator pos:start="13:22" pos:end="13:22">&amp;</operator><name pos:start="13:23" pos:end="13:37">slirp_instances</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:41" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:53"><expr pos:start="21:5" pos:end="21:52"><name pos:start="21:5" pos:end="21:11">curtime</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:52"><name pos:start="21:15" pos:end="21:31">qemu_clock_get_ms</name><argument_list pos:start="21:32" pos:end="21:52">(<argument pos:start="21:33" pos:end="21:51"><expr pos:start="21:33" pos:end="21:51"><name pos:start="21:33" pos:end="21:51">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="25:5" pos:end="25:50"><name pos:start="25:5" pos:end="25:18">QTAILQ_FOREACH</name><argument_list pos:start="25:19" pos:end="25:50">(<argument pos:start="25:20" pos:end="25:24">slirp</argument>, <argument pos:start="25:27" pos:end="25:42">&amp;slirp_instances</argument>, <argument pos:start="25:45" pos:end="25:49">entry</argument>)</argument_list></macro> <block pos:start="25:52" pos:end="419:5">{<block_content pos:start="33:9" pos:end="417:24">

        <comment type="block" pos:start="27:9" pos:end="31:11">/*

         * See if anything has timed out

         */</comment>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="35:63">(<expr pos:start="33:13" pos:end="35:62"><name pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:17">slirp</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:32">time_fasttimo</name></name> <operator pos:start="33:34" pos:end="33:35">&amp;&amp;</operator>

            <operator pos:start="35:13" pos:end="35:13">(</operator><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:21">curtime</name> <operator pos:start="35:23" pos:end="35:23">-</operator> <name pos:start="35:25" pos:end="35:44"><name pos:start="35:25" pos:end="35:29">slirp</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:44">time_fasttimo</name></name><operator pos:start="35:45" pos:end="35:45">)</operator> <operator pos:start="35:47" pos:end="35:48">&gt;=</operator> <name pos:start="35:50" pos:end="35:61">TIMEOUT_FAST</name><operator pos:start="35:62" pos:end="35:62">)</operator></expr>)</condition> <block pos:start="35:65" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:37">

            <expr_stmt pos:start="37:13" pos:end="37:32"><expr pos:start="37:13" pos:end="37:31"><call pos:start="37:13" pos:end="37:31"><name pos:start="37:13" pos:end="37:24">tcp_fasttimo</name><argument_list pos:start="37:25" pos:end="37:31">(<argument pos:start="37:26" pos:end="37:30"><expr pos:start="37:26" pos:end="37:30"><name pos:start="37:26" pos:end="37:30">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:37"><expr pos:start="39:13" pos:end="39:36"><name pos:start="39:13" pos:end="39:32"><name pos:start="39:13" pos:end="39:17">slirp</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:32">time_fasttimo</name></name> <operator pos:start="39:34" pos:end="39:34">=</operator> <literal type="number" pos:start="39:36" pos:end="39:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="45:63">(<expr pos:start="43:13" pos:end="45:62"><name pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:17">slirp</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:30">do_slowtimo</name></name> <operator pos:start="43:32" pos:end="43:33">&amp;&amp;</operator>

            <operator pos:start="45:13" pos:end="45:13">(</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:21">curtime</name> <operator pos:start="45:23" pos:end="45:23">-</operator> <name pos:start="45:25" pos:end="45:44"><name pos:start="45:25" pos:end="45:29">slirp</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:44">last_slowtimo</name></name><operator pos:start="45:45" pos:end="45:45">)</operator> <operator pos:start="45:47" pos:end="45:48">&gt;=</operator> <name pos:start="45:50" pos:end="45:61">TIMEOUT_SLOW</name><operator pos:start="45:62" pos:end="45:62">)</operator></expr>)</condition> <block pos:start="45:65" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:43">

            <expr_stmt pos:start="47:13" pos:end="47:31"><expr pos:start="47:13" pos:end="47:30"><call pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:23">ip_slowtimo</name><argument_list pos:start="47:24" pos:end="47:30">(<argument pos:start="47:25" pos:end="47:29"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:29">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:32"><expr pos:start="49:13" pos:end="49:31"><call pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:24">tcp_slowtimo</name><argument_list pos:start="49:25" pos:end="49:31">(<argument pos:start="49:26" pos:end="49:30"><expr pos:start="49:26" pos:end="49:30"><name pos:start="49:26" pos:end="49:30">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:43"><expr pos:start="51:13" pos:end="51:42"><name pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:17">slirp</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:32">last_slowtimo</name></name> <operator pos:start="51:34" pos:end="51:34">=</operator> <name pos:start="51:36" pos:end="51:42">curtime</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="61:11">/*

         * Check sockets

         */</comment>

        <if_stmt pos:start="63:9" pos:end="413:9"><if pos:start="63:9" pos:end="413:9">if <condition pos:start="63:12" pos:end="63:26">(<expr pos:start="63:13" pos:end="63:25"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:25">select_error</name></expr>)</condition> <block pos:start="63:28" pos:end="413:9">{<block_content pos:start="71:13" pos:end="411:13">

            <comment type="block" pos:start="65:13" pos:end="69:15">/*

             * Check TCP sockets

             */</comment>

            <for pos:start="71:13" pos:end="323:13">for <control pos:start="71:17" pos:end="73:33">(<init pos:start="71:18" pos:end="71:41"><expr pos:start="71:18" pos:end="71:40"><name pos:start="71:18" pos:end="71:19">so</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:40"><name pos:start="71:23" pos:end="71:27">slirp</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:32">tcb</name><operator pos:start="71:33" pos:end="71:33">.</operator><name pos:start="71:34" pos:end="71:40">so_next</name></name></expr>;</init> <condition pos:start="71:43" pos:end="71:60"><expr pos:start="71:43" pos:end="71:59"><name pos:start="71:43" pos:end="71:44">so</name> <operator pos:start="71:46" pos:end="71:47">!=</operator> <operator pos:start="71:49" pos:end="71:49">&amp;</operator><name pos:start="71:50" pos:end="71:59"><name pos:start="71:50" pos:end="71:54">slirp</name><operator pos:start="71:55" pos:end="71:56">-&gt;</operator><name pos:start="71:57" pos:end="71:59">tcb</name></name></expr>;</condition>

                    <incr pos:start="73:21" pos:end="73:32"><expr pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:22">so</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:32">so_next</name></expr></incr>)</control> <block pos:start="73:35" pos:end="323:13">{<block_content pos:start="75:17" pos:end="322:0">

                <decl_stmt pos:start="75:17" pos:end="75:28"><decl pos:start="75:17" pos:end="75:27"><type pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">int</name></type> <name pos:start="75:21" pos:end="75:27">revents</name></decl>;</decl_stmt>



                <expr_stmt pos:start="79:17" pos:end="79:38"><expr pos:start="79:17" pos:end="79:37"><name pos:start="79:17" pos:end="79:23">so_next</name> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:37"><name pos:start="79:27" pos:end="79:28">so</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:37">so_next</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="83:17" pos:end="83:28"><expr pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:23">revents</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="91:17"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:42">(<expr pos:start="85:21" pos:end="85:41"><name pos:start="85:21" pos:end="85:35"><name pos:start="85:21" pos:end="85:22">so</name><operator pos:start="85:23" pos:end="85:24">-&gt;</operator><name pos:start="85:25" pos:end="85:35">pollfds_idx</name></name> <operator pos:start="85:37" pos:end="85:38">!=</operator> <operator pos:start="85:40" pos:end="85:40">-</operator><literal type="number" pos:start="85:41" pos:end="85:41">1</literal></expr>)</condition> <block pos:start="85:44" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:69">

                    <expr_stmt pos:start="87:21" pos:end="89:69"><expr pos:start="87:21" pos:end="89:68"><name pos:start="87:21" pos:end="87:27">revents</name> <operator pos:start="87:29" pos:end="87:29">=</operator> <call pos:start="87:31" pos:end="89:60"><name pos:start="87:31" pos:end="87:43">g_array_index</name><argument_list pos:start="87:44" pos:end="89:60">(<argument pos:start="87:45" pos:end="87:51"><expr pos:start="87:45" pos:end="87:51"><name pos:start="87:45" pos:end="87:51">pollfds</name></expr></argument>, <argument pos:start="87:54" pos:end="87:60"><expr pos:start="87:54" pos:end="87:60"><name pos:start="87:54" pos:end="87:60">GPollFD</name></expr></argument>,

                                            <argument pos:start="89:45" pos:end="89:59"><expr pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:46">so</name><operator pos:start="89:47" pos:end="89:48">-&gt;</operator><name pos:start="89:49" pos:end="89:59">pollfds_idx</name></name></expr></argument>)</argument_list></call><operator pos:start="89:61" pos:end="89:61">.</operator><name pos:start="89:62" pos:end="89:68">revents</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="95:17" pos:end="99:17"><if pos:start="95:17" pos:end="99:17">if <condition pos:start="95:20" pos:end="95:61">(<expr pos:start="95:21" pos:end="95:60"><name pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:22">so</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:32">so_state</name></name> <operator pos:start="95:34" pos:end="95:34">&amp;</operator> <name pos:start="95:36" pos:end="95:45">SS_NOFDREF</name> <operator pos:start="95:47" pos:end="95:48">||</operator> <name pos:start="95:50" pos:end="95:54"><name pos:start="95:50" pos:end="95:51">so</name><operator pos:start="95:52" pos:end="95:53">-&gt;</operator><name pos:start="95:54" pos:end="95:54">s</name></name> <operator pos:start="95:56" pos:end="95:57">==</operator> <operator pos:start="95:59" pos:end="95:59">-</operator><literal type="number" pos:start="95:60" pos:end="95:60">1</literal></expr>)</condition> <block pos:start="95:63" pos:end="99:17">{<block_content pos:start="97:21" pos:end="97:29">

                    <continue pos:start="97:21" pos:end="97:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="103:17" pos:end="111:19">/*

                 * Check for URG data

                 * This will soread as well, so no need to

                 * test for G_IO_IN below if this succeeds

                 */</comment>

                <if_stmt pos:start="113:17" pos:end="153:17"><if pos:start="113:17" pos:end="117:17">if <condition pos:start="113:20" pos:end="113:39">(<expr pos:start="113:21" pos:end="113:38"><name pos:start="113:21" pos:end="113:27">revents</name> <operator pos:start="113:29" pos:end="113:29">&amp;</operator> <name pos:start="113:31" pos:end="113:38">G_IO_PRI</name></expr>)</condition> <block pos:start="113:41" pos:end="117:17">{<block_content pos:start="115:21" pos:end="115:34">

                    <expr_stmt pos:start="115:21" pos:end="115:34"><expr pos:start="115:21" pos:end="115:33"><call pos:start="115:21" pos:end="115:33"><name pos:start="115:21" pos:end="115:29">sorecvoob</name><argument_list pos:start="115:30" pos:end="115:33">(<argument pos:start="115:31" pos:end="115:32"><expr pos:start="115:31" pos:end="115:32"><name pos:start="115:31" pos:end="115:32">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if>

                <comment type="block" pos:start="119:17" pos:end="123:19">/*

                 * Check sockets for reading

                 */</comment>

                <if type="elseif" pos:start="125:17" pos:end="153:17">else if <condition pos:start="125:25" pos:end="125:67">(<expr pos:start="125:26" pos:end="125:66"><name pos:start="125:26" pos:end="125:32">revents</name> <operator pos:start="125:34" pos:end="125:34">&amp;</operator> <operator pos:start="125:36" pos:end="125:36">(</operator><name pos:start="125:37" pos:end="125:43">G_IO_IN</name> <operator pos:start="125:45" pos:end="125:45">|</operator> <name pos:start="125:47" pos:end="125:54">G_IO_HUP</name> <operator pos:start="125:56" pos:end="125:56">|</operator> <name pos:start="125:58" pos:end="125:65">G_IO_ERR</name><operator pos:start="125:66" pos:end="125:66">)</operator></expr>)</condition> <block pos:start="125:69" pos:end="153:17">{<block_content pos:start="133:21" pos:end="151:21">

                    <comment type="block" pos:start="127:21" pos:end="131:23">/*

                     * Check for incoming connections

                     */</comment>

                    <if_stmt pos:start="133:21" pos:end="139:21"><if pos:start="133:21" pos:end="139:21">if <condition pos:start="133:24" pos:end="133:54">(<expr pos:start="133:25" pos:end="133:53"><name pos:start="133:25" pos:end="133:36"><name pos:start="133:25" pos:end="133:26">so</name><operator pos:start="133:27" pos:end="133:28">-&gt;</operator><name pos:start="133:29" pos:end="133:36">so_state</name></name> <operator pos:start="133:38" pos:end="133:38">&amp;</operator> <name pos:start="133:40" pos:end="133:53">SS_FACCEPTCONN</name></expr>)</condition> <block pos:start="133:56" pos:end="139:21">{<block_content pos:start="135:25" pos:end="137:33">

                        <expr_stmt pos:start="135:25" pos:end="135:40"><expr pos:start="135:25" pos:end="135:39"><call pos:start="135:25" pos:end="135:39"><name pos:start="135:25" pos:end="135:35">tcp_connect</name><argument_list pos:start="135:36" pos:end="135:39">(<argument pos:start="135:37" pos:end="135:38"><expr pos:start="135:37" pos:end="135:38"><name pos:start="135:37" pos:end="135:38">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <continue pos:start="137:25" pos:end="137:33">continue;</continue>

                    </block_content>}</block></if></if_stmt> <comment type="block" pos:start="139:23" pos:end="139:32">/* else */</comment>

                    <expr_stmt pos:start="141:21" pos:end="141:37"><expr pos:start="141:21" pos:end="141:36"><name pos:start="141:21" pos:end="141:23">ret</name> <operator pos:start="141:25" pos:end="141:25">=</operator> <call pos:start="141:27" pos:end="141:36"><name pos:start="141:27" pos:end="141:32">soread</name><argument_list pos:start="141:33" pos:end="141:36">(<argument pos:start="141:34" pos:end="141:35"><expr pos:start="141:34" pos:end="141:35"><name pos:start="141:34" pos:end="141:35">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="145:21" pos:end="145:56">/* Output it if we read something */</comment>

                    <if_stmt pos:start="147:21" pos:end="151:21"><if pos:start="147:21" pos:end="151:21">if <condition pos:start="147:24" pos:end="147:32">(<expr pos:start="147:25" pos:end="147:31"><name pos:start="147:25" pos:end="147:27">ret</name> <operator pos:start="147:29" pos:end="147:29">&gt;</operator> <literal type="number" pos:start="147:31" pos:end="147:31">0</literal></expr>)</condition> <block pos:start="147:34" pos:end="151:21">{<block_content pos:start="149:25" pos:end="149:50">

                        <expr_stmt pos:start="149:25" pos:end="149:50"><expr pos:start="149:25" pos:end="149:49"><call pos:start="149:25" pos:end="149:49"><name pos:start="149:25" pos:end="149:34">tcp_output</name><argument_list pos:start="149:35" pos:end="149:49">(<argument pos:start="149:36" pos:end="149:48"><expr pos:start="149:36" pos:end="149:48"><call pos:start="149:36" pos:end="149:48"><name pos:start="149:36" pos:end="149:44">sototcpcb</name><argument_list pos:start="149:45" pos:end="149:48">(<argument pos:start="149:46" pos:end="149:47"><expr pos:start="149:46" pos:end="149:47"><name pos:start="149:46" pos:end="149:47">so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="157:17" pos:end="161:19">/*

                 * Check sockets for writing

                 */</comment>

                <if_stmt pos:start="163:17" pos:end="252:0"><if pos:start="163:17" pos:end="252:0">if <condition pos:start="163:20" pos:end="165:58">(<expr pos:start="163:21" pos:end="165:57"><operator pos:start="163:21" pos:end="163:21">!</operator><operator pos:start="163:22" pos:end="163:22">(</operator><name pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:24">so</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:34">so_state</name></name> <operator pos:start="163:36" pos:end="163:36">&amp;</operator> <name pos:start="163:38" pos:end="163:47">SS_NOFDREF</name><operator pos:start="163:48" pos:end="163:48">)</operator> <operator pos:start="163:50" pos:end="163:51">&amp;&amp;</operator>

                        <operator pos:start="165:25" pos:end="165:25">(</operator><name pos:start="165:26" pos:end="165:32">revents</name> <operator pos:start="165:34" pos:end="165:34">&amp;</operator> <operator pos:start="165:36" pos:end="165:36">(</operator><name pos:start="165:37" pos:end="165:44">G_IO_OUT</name> <operator pos:start="165:46" pos:end="165:46">|</operator> <name pos:start="165:48" pos:end="165:55">G_IO_ERR</name><operator pos:start="165:56" pos:end="165:56">)</operator><operator pos:start="165:57" pos:end="165:57">)</operator></expr>)</condition> <block pos:start="165:60" pos:end="252:0">{<block_content pos:start="173:21" pos:end="225:21">

                    <comment type="block" pos:start="167:21" pos:end="171:23">/*

                     * Check for non-blocking, still-connecting sockets

                     */</comment>

                    <if_stmt pos:start="173:21" pos:end="225:21"><if pos:start="173:21" pos:end="221:21">if <condition pos:start="173:24" pos:end="173:56">(<expr pos:start="173:25" pos:end="173:55"><name pos:start="173:25" pos:end="173:36"><name pos:start="173:25" pos:end="173:26">so</name><operator pos:start="173:27" pos:end="173:28">-&gt;</operator><name pos:start="173:29" pos:end="173:36">so_state</name></name> <operator pos:start="173:38" pos:end="173:38">&amp;</operator> <name pos:start="173:40" pos:end="173:55">SS_ISFCONNECTING</name></expr>)</condition> <block pos:start="173:58" pos:end="221:21">{<block_content pos:start="177:25" pos:end="217:50">

                        <comment type="block" pos:start="175:25" pos:end="175:39">/* Connected */</comment>

                        <expr_stmt pos:start="177:25" pos:end="177:58"><expr pos:start="177:25" pos:end="177:57"><name pos:start="177:25" pos:end="177:36"><name pos:start="177:25" pos:end="177:26">so</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:36">so_state</name></name> <operator pos:start="177:38" pos:end="177:39">&amp;=</operator> <operator pos:start="177:41" pos:end="177:41">~</operator><name pos:start="177:42" pos:end="177:57">SS_ISFCONNECTING</name></expr>;</expr_stmt>



                        <expr_stmt pos:start="181:25" pos:end="181:69"><expr pos:start="181:25" pos:end="181:68"><name pos:start="181:25" pos:end="181:27">ret</name> <operator pos:start="181:29" pos:end="181:29">=</operator> <call pos:start="181:31" pos:end="181:68"><name pos:start="181:31" pos:end="181:34">send</name><argument_list pos:start="181:35" pos:end="181:68">(<argument pos:start="181:36" pos:end="181:40"><expr pos:start="181:36" pos:end="181:40"><name pos:start="181:36" pos:end="181:40"><name pos:start="181:36" pos:end="181:37">so</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:40">s</name></name></expr></argument>, <argument pos:start="181:43" pos:end="181:61"><expr pos:start="181:43" pos:end="181:61"><operator pos:start="181:43" pos:end="181:43">(</operator><specifier pos:start="181:44" pos:end="181:48">const</specifier> <name pos:start="181:50" pos:end="181:53">void</name> <operator pos:start="181:55" pos:end="181:55">*</operator><operator pos:start="181:56" pos:end="181:56">)</operator> <operator pos:start="181:58" pos:end="181:58">&amp;</operator><name pos:start="181:59" pos:end="181:61">ret</name></expr></argument>, <argument pos:start="181:64" pos:end="181:64"><expr pos:start="181:64" pos:end="181:64"><literal type="number" pos:start="181:64" pos:end="181:64">0</literal></expr></argument>, <argument pos:start="181:67" pos:end="181:67"><expr pos:start="181:67" pos:end="181:67"><literal type="number" pos:start="181:67" pos:end="181:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="183:25" pos:end="203:25"><if pos:start="183:25" pos:end="203:25">if <condition pos:start="183:28" pos:end="183:36">(<expr pos:start="183:29" pos:end="183:35"><name pos:start="183:29" pos:end="183:31">ret</name> <operator pos:start="183:33" pos:end="183:33">&lt;</operator> <literal type="number" pos:start="183:35" pos:end="183:35">0</literal></expr>)</condition> <block pos:start="183:38" pos:end="203:25">{<block_content pos:start="187:29" pos:end="201:55">

                            <comment type="block" pos:start="185:29" pos:end="185:69">/* XXXXX Must fix, zero bytes is a NOP */</comment>

                            <if_stmt pos:start="187:29" pos:end="193:29"><if pos:start="187:29" pos:end="193:29">if <condition pos:start="187:32" pos:end="189:74">(<expr pos:start="187:33" pos:end="189:73"><name pos:start="187:33" pos:end="187:37">errno</name> <operator pos:start="187:39" pos:end="187:40">==</operator> <name pos:start="187:42" pos:end="187:47">EAGAIN</name> <operator pos:start="187:49" pos:end="187:50">||</operator> <name pos:start="187:52" pos:end="187:56">errno</name> <operator pos:start="187:58" pos:end="187:59">==</operator> <name pos:start="187:61" pos:end="187:71">EWOULDBLOCK</name> <operator pos:start="187:73" pos:end="187:74">||</operator>

                                <name pos:start="189:33" pos:end="189:37">errno</name> <operator pos:start="189:39" pos:end="189:40">==</operator> <name pos:start="189:42" pos:end="189:52">EINPROGRESS</name> <operator pos:start="189:54" pos:end="189:55">||</operator> <name pos:start="189:57" pos:end="189:61">errno</name> <operator pos:start="189:63" pos:end="189:64">==</operator> <name pos:start="189:66" pos:end="189:73">ENOTCONN</name></expr>)</condition> <block pos:start="189:76" pos:end="193:29">{<block_content pos:start="191:33" pos:end="191:41">

                                <continue pos:start="191:33" pos:end="191:41">continue;</continue>

                            </block_content>}</block></if></if_stmt>



                            <comment type="block" pos:start="197:29" pos:end="197:45">/* else failed */</comment>

                            <expr_stmt pos:start="199:29" pos:end="199:63"><expr pos:start="199:29" pos:end="199:62"><name pos:start="199:29" pos:end="199:40"><name pos:start="199:29" pos:end="199:30">so</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:40">so_state</name></name> <operator pos:start="199:42" pos:end="199:43">&amp;=</operator> <name pos:start="199:45" pos:end="199:62">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="201:29" pos:end="201:55"><expr pos:start="201:29" pos:end="201:54"><name pos:start="201:29" pos:end="201:40"><name pos:start="201:29" pos:end="201:30">so</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:40">so_state</name></name> <operator pos:start="201:42" pos:end="201:43">|=</operator> <name pos:start="201:45" pos:end="201:54">SS_NOFDREF</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="205:25" pos:end="205:69">/* else so-&gt;so_state &amp;= ~SS_ISFCONNECTING; */</comment>



                        <comment type="block" pos:start="209:25" pos:end="213:27">/*

                         * Continue tcp_input

                         */</comment>

                        <expr_stmt pos:start="215:25" pos:end="217:50"><expr pos:start="215:25" pos:end="217:49"><call pos:start="215:25" pos:end="217:49"><name pos:start="215:25" pos:end="215:33">tcp_input</name><argument_list pos:start="215:34" pos:end="217:49">(<argument pos:start="215:35" pos:end="215:53"><expr pos:start="215:35" pos:end="215:53"><operator pos:start="215:35" pos:end="215:35">(</operator>struct <name pos:start="215:43" pos:end="215:46">mbuf</name> <operator pos:start="215:48" pos:end="215:48">*</operator><operator pos:start="215:49" pos:end="215:49">)</operator><name pos:start="215:50" pos:end="215:53">NULL</name></expr></argument>, <argument pos:start="215:56" pos:end="215:72"><expr pos:start="215:56" pos:end="215:72"><sizeof pos:start="215:56" pos:end="215:72">sizeof<argument_list pos:start="215:62" pos:end="215:72">(<argument pos:start="215:63" pos:end="215:71"><expr pos:start="215:63" pos:end="215:71">struct <name pos:start="215:70" pos:end="215:71">ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="215:75" pos:end="215:76"><expr pos:start="215:75" pos:end="215:76"><name pos:start="215:75" pos:end="215:76">so</name></expr></argument>,

                                  <argument pos:start="217:35" pos:end="217:48"><expr pos:start="217:35" pos:end="217:48"><name pos:start="217:35" pos:end="217:48"><name pos:start="217:35" pos:end="217:36">so</name><operator pos:start="217:37" pos:end="217:38">-&gt;</operator><name pos:start="217:39" pos:end="217:48">so_ffamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="219:25" pos:end="219:39">/* continue; */</comment>

                    </block_content>}</block></if> <else pos:start="221:23" pos:end="225:21">else <block pos:start="221:28" pos:end="225:21">{<block_content pos:start="223:25" pos:end="223:42">

                        <expr_stmt pos:start="223:25" pos:end="223:42"><expr pos:start="223:25" pos:end="223:41"><name pos:start="223:25" pos:end="223:27">ret</name> <operator pos:start="223:29" pos:end="223:29">=</operator> <call pos:start="223:31" pos:end="223:41"><name pos:start="223:31" pos:end="223:37">sowrite</name><argument_list pos:start="223:38" pos:end="223:41">(<argument pos:start="223:39" pos:end="223:40"><expr pos:start="223:39" pos:end="223:40"><name pos:start="223:39" pos:end="223:40">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <comment type="block" pos:start="227:21" pos:end="237:23">/*

                     * XXXXX If we wrote something (a lot), there

                     * could be a need for a window update.

                     * In the worst case, the remote will send

                     * a window probe to get things going again

                     */</comment>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="243:17" pos:end="249:19">/*

                 * Probe a still-connecting, non-blocking socket

                 * to check if it's still alive

                 */</comment>

<cpp:ifdef pos:start="251:1" pos:end="251:17">#<cpp:directive pos:start="251:2" pos:end="251:6">ifdef</cpp:directive> <name pos:start="251:8" pos:end="251:17">PROBE_CONN</name></cpp:ifdef>

                <if_stmt pos:start="253:17" pos:end="322:0"><if pos:start="253:17" pos:end="322:0">if <condition pos:start="253:20" pos:end="253:52">(<expr pos:start="253:21" pos:end="253:51"><name pos:start="253:21" pos:end="253:32"><name pos:start="253:21" pos:end="253:22">so</name><operator pos:start="253:23" pos:end="253:24">-&gt;</operator><name pos:start="253:25" pos:end="253:32">so_state</name></name> <operator pos:start="253:34" pos:end="253:34">&amp;</operator> <name pos:start="253:36" pos:end="253:51">SS_ISFCONNECTING</name></expr>)</condition> <block pos:start="253:54" pos:end="322:0">{<block_content pos:start="255:21" pos:end="317:46">

                    <expr_stmt pos:start="255:21" pos:end="255:55"><expr pos:start="255:21" pos:end="255:54"><name pos:start="255:21" pos:end="255:23">ret</name> <operator pos:start="255:25" pos:end="255:25">=</operator> <call pos:start="255:27" pos:end="255:54"><name pos:start="255:27" pos:end="255:35">qemu_recv</name><argument_list pos:start="255:36" pos:end="255:54">(<argument pos:start="255:37" pos:end="255:41"><expr pos:start="255:37" pos:end="255:41"><name pos:start="255:37" pos:end="255:41"><name pos:start="255:37" pos:end="255:38">so</name><operator pos:start="255:39" pos:end="255:40">-&gt;</operator><name pos:start="255:41" pos:end="255:41">s</name></name></expr></argument>, <argument pos:start="255:44" pos:end="255:47"><expr pos:start="255:44" pos:end="255:47"><operator pos:start="255:44" pos:end="255:44">&amp;</operator><name pos:start="255:45" pos:end="255:47">ret</name></expr></argument>, <argument pos:start="255:50" pos:end="255:50"><expr pos:start="255:50" pos:end="255:50"><literal type="number" pos:start="255:50" pos:end="255:50">0</literal></expr></argument>, <argument pos:start="255:53" pos:end="255:53"><expr pos:start="255:53" pos:end="255:53"><literal type="number" pos:start="255:53" pos:end="255:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="259:21" pos:end="313:21"><if pos:start="259:21" pos:end="283:21">if <condition pos:start="259:24" pos:end="259:32">(<expr pos:start="259:25" pos:end="259:31"><name pos:start="259:25" pos:end="259:27">ret</name> <operator pos:start="259:29" pos:end="259:29">&lt;</operator> <literal type="number" pos:start="259:31" pos:end="259:31">0</literal></expr>)</condition> <block pos:start="259:34" pos:end="283:21">{<block_content pos:start="263:25" pos:end="277:51">

                        <comment type="block" pos:start="261:25" pos:end="261:33">/* XXX */</comment>

                        <if_stmt pos:start="263:25" pos:end="269:25"><if pos:start="263:25" pos:end="269:25">if <condition pos:start="263:28" pos:end="265:70">(<expr pos:start="263:29" pos:end="265:69"><name pos:start="263:29" pos:end="263:33">errno</name> <operator pos:start="263:35" pos:end="263:36">==</operator> <name pos:start="263:38" pos:end="263:43">EAGAIN</name> <operator pos:start="263:45" pos:end="263:46">||</operator> <name pos:start="263:48" pos:end="263:52">errno</name> <operator pos:start="263:54" pos:end="263:55">==</operator> <name pos:start="263:57" pos:end="263:67">EWOULDBLOCK</name> <operator pos:start="263:69" pos:end="263:70">||</operator>

                            <name pos:start="265:29" pos:end="265:33">errno</name> <operator pos:start="265:35" pos:end="265:36">==</operator> <name pos:start="265:38" pos:end="265:48">EINPROGRESS</name> <operator pos:start="265:50" pos:end="265:51">||</operator> <name pos:start="265:53" pos:end="265:57">errno</name> <operator pos:start="265:59" pos:end="265:60">==</operator> <name pos:start="265:62" pos:end="265:69">ENOTCONN</name></expr>)</condition> <block pos:start="265:72" pos:end="269:25">{<block_content pos:start="267:29" pos:end="267:37">

                            <continue pos:start="267:29" pos:end="267:37">continue;</continue> <comment type="block" pos:start="267:39" pos:end="267:70">/* Still connecting, continue */</comment>

                        </block_content>}</block></if></if_stmt>



                        <comment type="block" pos:start="273:25" pos:end="273:41">/* else failed */</comment>

                        <expr_stmt pos:start="275:25" pos:end="275:59"><expr pos:start="275:25" pos:end="275:58"><name pos:start="275:25" pos:end="275:36"><name pos:start="275:25" pos:end="275:26">so</name><operator pos:start="275:27" pos:end="275:28">-&gt;</operator><name pos:start="275:29" pos:end="275:36">so_state</name></name> <operator pos:start="275:38" pos:end="275:39">&amp;=</operator> <name pos:start="275:41" pos:end="275:58">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="277:25" pos:end="277:51"><expr pos:start="277:25" pos:end="277:50"><name pos:start="277:25" pos:end="277:36"><name pos:start="277:25" pos:end="277:26">so</name><operator pos:start="277:27" pos:end="277:28">-&gt;</operator><name pos:start="277:29" pos:end="277:36">so_state</name></name> <operator pos:start="277:38" pos:end="277:39">|=</operator> <name pos:start="277:41" pos:end="277:50">SS_NOFDREF</name></expr>;</expr_stmt>



                        <comment type="block" pos:start="281:25" pos:end="281:60">/* tcp_input will take care of it */</comment>

                    </block_content>}</block></if> <else pos:start="283:23" pos:end="313:21">else <block pos:start="283:28" pos:end="313:21">{<block_content pos:start="285:25" pos:end="309:25">

                        <expr_stmt pos:start="285:25" pos:end="285:54"><expr pos:start="285:25" pos:end="285:53"><name pos:start="285:25" pos:end="285:27">ret</name> <operator pos:start="285:29" pos:end="285:29">=</operator> <call pos:start="285:31" pos:end="285:53"><name pos:start="285:31" pos:end="285:34">send</name><argument_list pos:start="285:35" pos:end="285:53">(<argument pos:start="285:36" pos:end="285:40"><expr pos:start="285:36" pos:end="285:40"><name pos:start="285:36" pos:end="285:40"><name pos:start="285:36" pos:end="285:37">so</name><operator pos:start="285:38" pos:end="285:39">-&gt;</operator><name pos:start="285:40" pos:end="285:40">s</name></name></expr></argument>, <argument pos:start="285:43" pos:end="285:46"><expr pos:start="285:43" pos:end="285:46"><operator pos:start="285:43" pos:end="285:43">&amp;</operator><name pos:start="285:44" pos:end="285:46">ret</name></expr></argument>, <argument pos:start="285:49" pos:end="285:49"><expr pos:start="285:49" pos:end="285:49"><literal type="number" pos:start="285:49" pos:end="285:49">0</literal></expr></argument>, <argument pos:start="285:52" pos:end="285:52"><expr pos:start="285:52" pos:end="285:52"><literal type="number" pos:start="285:52" pos:end="285:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="287:25" pos:end="309:25"><if pos:start="287:25" pos:end="305:25">if <condition pos:start="287:28" pos:end="287:36">(<expr pos:start="287:29" pos:end="287:35"><name pos:start="287:29" pos:end="287:31">ret</name> <operator pos:start="287:33" pos:end="287:33">&lt;</operator> <literal type="number" pos:start="287:35" pos:end="287:35">0</literal></expr>)</condition> <block pos:start="287:38" pos:end="305:25">{<block_content pos:start="291:29" pos:end="303:55">

                            <comment type="block" pos:start="289:29" pos:end="289:37">/* XXX */</comment>

                            <if_stmt pos:start="291:29" pos:end="297:29"><if pos:start="291:29" pos:end="297:29">if <condition pos:start="291:32" pos:end="293:74">(<expr pos:start="291:33" pos:end="293:73"><name pos:start="291:33" pos:end="291:37">errno</name> <operator pos:start="291:39" pos:end="291:40">==</operator> <name pos:start="291:42" pos:end="291:47">EAGAIN</name> <operator pos:start="291:49" pos:end="291:50">||</operator> <name pos:start="291:52" pos:end="291:56">errno</name> <operator pos:start="291:58" pos:end="291:59">==</operator> <name pos:start="291:61" pos:end="291:71">EWOULDBLOCK</name> <operator pos:start="291:73" pos:end="291:74">||</operator>

                                <name pos:start="293:33" pos:end="293:37">errno</name> <operator pos:start="293:39" pos:end="293:40">==</operator> <name pos:start="293:42" pos:end="293:52">EINPROGRESS</name> <operator pos:start="293:54" pos:end="293:55">||</operator> <name pos:start="293:57" pos:end="293:61">errno</name> <operator pos:start="293:63" pos:end="293:64">==</operator> <name pos:start="293:66" pos:end="293:73">ENOTCONN</name></expr>)</condition> <block pos:start="293:76" pos:end="297:29">{<block_content pos:start="295:33" pos:end="295:41">

                                <continue pos:start="295:33" pos:end="295:41">continue;</continue>

                            </block_content>}</block></if></if_stmt>

                            <comment type="block" pos:start="299:29" pos:end="299:45">/* else failed */</comment>

                            <expr_stmt pos:start="301:29" pos:end="301:63"><expr pos:start="301:29" pos:end="301:62"><name pos:start="301:29" pos:end="301:40"><name pos:start="301:29" pos:end="301:30">so</name><operator pos:start="301:31" pos:end="301:32">-&gt;</operator><name pos:start="301:33" pos:end="301:40">so_state</name></name> <operator pos:start="301:42" pos:end="301:43">&amp;=</operator> <name pos:start="301:45" pos:end="301:62">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="303:29" pos:end="303:55"><expr pos:start="303:29" pos:end="303:54"><name pos:start="303:29" pos:end="303:40"><name pos:start="303:29" pos:end="303:30">so</name><operator pos:start="303:31" pos:end="303:32">-&gt;</operator><name pos:start="303:33" pos:end="303:40">so_state</name></name> <operator pos:start="303:42" pos:end="303:43">|=</operator> <name pos:start="303:45" pos:end="303:54">SS_NOFDREF</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="305:27" pos:end="309:25">else <block pos:start="305:32" pos:end="309:25">{<block_content pos:start="307:29" pos:end="307:62">

                            <expr_stmt pos:start="307:29" pos:end="307:62"><expr pos:start="307:29" pos:end="307:61"><name pos:start="307:29" pos:end="307:40"><name pos:start="307:29" pos:end="307:30">so</name><operator pos:start="307:31" pos:end="307:32">-&gt;</operator><name pos:start="307:33" pos:end="307:40">so_state</name></name> <operator pos:start="307:42" pos:end="307:43">&amp;=</operator> <operator pos:start="307:45" pos:end="307:45">~</operator><name pos:start="307:46" pos:end="307:61">SS_ISFCONNECTING</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>



                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="315:21" pos:end="317:46"><expr pos:start="315:21" pos:end="317:45"><call pos:start="315:21" pos:end="317:45"><name pos:start="315:21" pos:end="315:29">tcp_input</name><argument_list pos:start="315:30" pos:end="317:45">(<argument pos:start="315:31" pos:end="315:49"><expr pos:start="315:31" pos:end="315:49"><operator pos:start="315:31" pos:end="315:31">(</operator>struct <name pos:start="315:39" pos:end="315:42">mbuf</name> <operator pos:start="315:44" pos:end="315:44">*</operator><operator pos:start="315:45" pos:end="315:45">)</operator><name pos:start="315:46" pos:end="315:49">NULL</name></expr></argument>, <argument pos:start="315:52" pos:end="315:68"><expr pos:start="315:52" pos:end="315:68"><sizeof pos:start="315:52" pos:end="315:68">sizeof<argument_list pos:start="315:58" pos:end="315:68">(<argument pos:start="315:59" pos:end="315:67"><expr pos:start="315:59" pos:end="315:67">struct <name pos:start="315:66" pos:end="315:67">ip</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="315:71" pos:end="315:72"><expr pos:start="315:71" pos:end="315:72"><name pos:start="315:71" pos:end="315:72">so</name></expr></argument>,

                              <argument pos:start="317:31" pos:end="317:44"><expr pos:start="317:31" pos:end="317:44"><name pos:start="317:31" pos:end="317:44"><name pos:start="317:31" pos:end="317:32">so</name><operator pos:start="317:33" pos:end="317:34">-&gt;</operator><name pos:start="317:35" pos:end="317:44">so_ffamily</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt> <comment type="block" pos:start="319:19" pos:end="319:40">/* SS_ISFCONNECTING */</comment>

<cpp:endif pos:start="321:1" pos:end="321:6">#<cpp:directive pos:start="321:2" pos:end="321:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></for>



            <comment type="block" pos:start="327:13" pos:end="335:15">/*

             * Now UDP sockets.

             * Incoming packets are sent straight away, they're not buffered.

             * Incoming UDP data isn't buffered either.

             */</comment>

            <for pos:start="337:13" pos:end="369:13">for <control pos:start="337:17" pos:end="339:33">(<init pos:start="337:18" pos:end="337:41"><expr pos:start="337:18" pos:end="337:40"><name pos:start="337:18" pos:end="337:19">so</name> <operator pos:start="337:21" pos:end="337:21">=</operator> <name pos:start="337:23" pos:end="337:40"><name pos:start="337:23" pos:end="337:27">slirp</name><operator pos:start="337:28" pos:end="337:29">-&gt;</operator><name pos:start="337:30" pos:end="337:32">udb</name><operator pos:start="337:33" pos:end="337:33">.</operator><name pos:start="337:34" pos:end="337:40">so_next</name></name></expr>;</init> <condition pos:start="337:43" pos:end="337:60"><expr pos:start="337:43" pos:end="337:59"><name pos:start="337:43" pos:end="337:44">so</name> <operator pos:start="337:46" pos:end="337:47">!=</operator> <operator pos:start="337:49" pos:end="337:49">&amp;</operator><name pos:start="337:50" pos:end="337:59"><name pos:start="337:50" pos:end="337:54">slirp</name><operator pos:start="337:55" pos:end="337:56">-&gt;</operator><name pos:start="337:57" pos:end="337:59">udb</name></name></expr>;</condition>

                    <incr pos:start="339:21" pos:end="339:32"><expr pos:start="339:21" pos:end="339:32"><name pos:start="339:21" pos:end="339:22">so</name> <operator pos:start="339:24" pos:end="339:24">=</operator> <name pos:start="339:26" pos:end="339:32">so_next</name></expr></incr>)</control> <block pos:start="339:35" pos:end="369:13">{<block_content pos:start="341:17" pos:end="367:17">

                <decl_stmt pos:start="341:17" pos:end="341:28"><decl pos:start="341:17" pos:end="341:27"><type pos:start="341:17" pos:end="341:19"><name pos:start="341:17" pos:end="341:19">int</name></type> <name pos:start="341:21" pos:end="341:27">revents</name></decl>;</decl_stmt>



                <expr_stmt pos:start="345:17" pos:end="345:38"><expr pos:start="345:17" pos:end="345:37"><name pos:start="345:17" pos:end="345:23">so_next</name> <operator pos:start="345:25" pos:end="345:25">=</operator> <name pos:start="345:27" pos:end="345:37"><name pos:start="345:27" pos:end="345:28">so</name><operator pos:start="345:29" pos:end="345:30">-&gt;</operator><name pos:start="345:31" pos:end="345:37">so_next</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="349:17" pos:end="349:28"><expr pos:start="349:17" pos:end="349:27"><name pos:start="349:17" pos:end="349:23">revents</name> <operator pos:start="349:25" pos:end="349:25">=</operator> <literal type="number" pos:start="349:27" pos:end="349:27">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="351:17" pos:end="357:17"><if pos:start="351:17" pos:end="357:17">if <condition pos:start="351:20" pos:end="351:42">(<expr pos:start="351:21" pos:end="351:41"><name pos:start="351:21" pos:end="351:35"><name pos:start="351:21" pos:end="351:22">so</name><operator pos:start="351:23" pos:end="351:24">-&gt;</operator><name pos:start="351:25" pos:end="351:35">pollfds_idx</name></name> <operator pos:start="351:37" pos:end="351:38">!=</operator> <operator pos:start="351:40" pos:end="351:40">-</operator><literal type="number" pos:start="351:41" pos:end="351:41">1</literal></expr>)</condition> <block pos:start="351:44" pos:end="357:17">{<block_content pos:start="353:21" pos:end="355:53">

                    <expr_stmt pos:start="353:21" pos:end="355:53"><expr pos:start="353:21" pos:end="355:52"><name pos:start="353:21" pos:end="353:27">revents</name> <operator pos:start="353:29" pos:end="353:29">=</operator> <call pos:start="353:31" pos:end="355:44"><name pos:start="353:31" pos:end="353:43">g_array_index</name><argument_list pos:start="353:44" pos:end="355:44">(<argument pos:start="353:45" pos:end="353:51"><expr pos:start="353:45" pos:end="353:51"><name pos:start="353:45" pos:end="353:51">pollfds</name></expr></argument>, <argument pos:start="353:54" pos:end="353:60"><expr pos:start="353:54" pos:end="353:60"><name pos:start="353:54" pos:end="353:60">GPollFD</name></expr></argument>,

                            <argument pos:start="355:29" pos:end="355:43"><expr pos:start="355:29" pos:end="355:43"><name pos:start="355:29" pos:end="355:43"><name pos:start="355:29" pos:end="355:30">so</name><operator pos:start="355:31" pos:end="355:32">-&gt;</operator><name pos:start="355:33" pos:end="355:43">pollfds_idx</name></name></expr></argument>)</argument_list></call><operator pos:start="355:45" pos:end="355:45">.</operator><name pos:start="355:46" pos:end="355:52">revents</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="361:17" pos:end="367:17"><if pos:start="361:17" pos:end="367:17">if <condition pos:start="361:20" pos:end="363:64">(<expr pos:start="361:21" pos:end="363:63"><name pos:start="361:21" pos:end="361:25"><name pos:start="361:21" pos:end="361:22">so</name><operator pos:start="361:23" pos:end="361:24">-&gt;</operator><name pos:start="361:25" pos:end="361:25">s</name></name> <operator pos:start="361:27" pos:end="361:28">!=</operator> <operator pos:start="361:30" pos:end="361:30">-</operator><literal type="number" pos:start="361:31" pos:end="361:31">1</literal> <operator pos:start="361:33" pos:end="361:34">&amp;&amp;</operator>

                    <operator pos:start="363:21" pos:end="363:21">(</operator><name pos:start="363:22" pos:end="363:28">revents</name> <operator pos:start="363:30" pos:end="363:30">&amp;</operator> <operator pos:start="363:32" pos:end="363:32">(</operator><name pos:start="363:33" pos:end="363:39">G_IO_IN</name> <operator pos:start="363:41" pos:end="363:41">|</operator> <name pos:start="363:43" pos:end="363:50">G_IO_HUP</name> <operator pos:start="363:52" pos:end="363:52">|</operator> <name pos:start="363:54" pos:end="363:61">G_IO_ERR</name><operator pos:start="363:62" pos:end="363:62">)</operator><operator pos:start="363:63" pos:end="363:63">)</operator></expr>)</condition> <block pos:start="363:66" pos:end="367:17">{<block_content pos:start="365:21" pos:end="365:35">

                    <expr_stmt pos:start="365:21" pos:end="365:35"><expr pos:start="365:21" pos:end="365:34"><call pos:start="365:21" pos:end="365:34"><name pos:start="365:21" pos:end="365:30">sorecvfrom</name><argument_list pos:start="365:31" pos:end="365:34">(<argument pos:start="365:32" pos:end="365:33"><expr pos:start="365:32" pos:end="365:33"><name pos:start="365:32" pos:end="365:33">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <comment type="block" pos:start="373:13" pos:end="377:15">/*

             * Check incoming ICMP relies.

             */</comment>

            <for pos:start="379:13" pos:end="411:13">for <control pos:start="379:17" pos:end="381:33">(<init pos:start="379:18" pos:end="379:42"><expr pos:start="379:18" pos:end="379:41"><name pos:start="379:18" pos:end="379:19">so</name> <operator pos:start="379:21" pos:end="379:21">=</operator> <name pos:start="379:23" pos:end="379:41"><name pos:start="379:23" pos:end="379:27">slirp</name><operator pos:start="379:28" pos:end="379:29">-&gt;</operator><name pos:start="379:30" pos:end="379:33">icmp</name><operator pos:start="379:34" pos:end="379:34">.</operator><name pos:start="379:35" pos:end="379:41">so_next</name></name></expr>;</init> <condition pos:start="379:44" pos:end="379:62"><expr pos:start="379:44" pos:end="379:61"><name pos:start="379:44" pos:end="379:45">so</name> <operator pos:start="379:47" pos:end="379:48">!=</operator> <operator pos:start="379:50" pos:end="379:50">&amp;</operator><name pos:start="379:51" pos:end="379:61"><name pos:start="379:51" pos:end="379:55">slirp</name><operator pos:start="379:56" pos:end="379:57">-&gt;</operator><name pos:start="379:58" pos:end="379:61">icmp</name></name></expr>;</condition>

                    <incr pos:start="381:21" pos:end="381:32"><expr pos:start="381:21" pos:end="381:32"><name pos:start="381:21" pos:end="381:22">so</name> <operator pos:start="381:24" pos:end="381:24">=</operator> <name pos:start="381:26" pos:end="381:32">so_next</name></expr></incr>)</control> <block pos:start="381:35" pos:end="411:13">{<block_content pos:start="383:21" pos:end="409:17">

                    <decl_stmt pos:start="383:21" pos:end="383:32"><decl pos:start="383:21" pos:end="383:31"><type pos:start="383:21" pos:end="383:23"><name pos:start="383:21" pos:end="383:23">int</name></type> <name pos:start="383:25" pos:end="383:31">revents</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="387:21" pos:end="387:42"><expr pos:start="387:21" pos:end="387:41"><name pos:start="387:21" pos:end="387:27">so_next</name> <operator pos:start="387:29" pos:end="387:29">=</operator> <name pos:start="387:31" pos:end="387:41"><name pos:start="387:31" pos:end="387:32">so</name><operator pos:start="387:33" pos:end="387:34">-&gt;</operator><name pos:start="387:35" pos:end="387:41">so_next</name></name></expr>;</expr_stmt>



                    <expr_stmt pos:start="391:21" pos:end="391:32"><expr pos:start="391:21" pos:end="391:31"><name pos:start="391:21" pos:end="391:27">revents</name> <operator pos:start="391:29" pos:end="391:29">=</operator> <literal type="number" pos:start="391:31" pos:end="391:31">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="393:21" pos:end="399:21"><if pos:start="393:21" pos:end="399:21">if <condition pos:start="393:24" pos:end="393:46">(<expr pos:start="393:25" pos:end="393:45"><name pos:start="393:25" pos:end="393:39"><name pos:start="393:25" pos:end="393:26">so</name><operator pos:start="393:27" pos:end="393:28">-&gt;</operator><name pos:start="393:29" pos:end="393:39">pollfds_idx</name></name> <operator pos:start="393:41" pos:end="393:42">!=</operator> <operator pos:start="393:44" pos:end="393:44">-</operator><literal type="number" pos:start="393:45" pos:end="393:45">1</literal></expr>)</condition> <block pos:start="393:48" pos:end="399:21">{<block_content pos:start="395:25" pos:end="397:73">

                        <expr_stmt pos:start="395:25" pos:end="397:73"><expr pos:start="395:25" pos:end="397:72"><name pos:start="395:25" pos:end="395:31">revents</name> <operator pos:start="395:33" pos:end="395:33">=</operator> <call pos:start="395:35" pos:end="397:64"><name pos:start="395:35" pos:end="395:47">g_array_index</name><argument_list pos:start="395:48" pos:end="397:64">(<argument pos:start="395:49" pos:end="395:55"><expr pos:start="395:49" pos:end="395:55"><name pos:start="395:49" pos:end="395:55">pollfds</name></expr></argument>, <argument pos:start="395:58" pos:end="395:64"><expr pos:start="395:58" pos:end="395:64"><name pos:start="395:58" pos:end="395:64">GPollFD</name></expr></argument>,

                                                <argument pos:start="397:49" pos:end="397:63"><expr pos:start="397:49" pos:end="397:63"><name pos:start="397:49" pos:end="397:63"><name pos:start="397:49" pos:end="397:50">so</name><operator pos:start="397:51" pos:end="397:52">-&gt;</operator><name pos:start="397:53" pos:end="397:63">pollfds_idx</name></name></expr></argument>)</argument_list></call><operator pos:start="397:65" pos:end="397:65">.</operator><name pos:start="397:66" pos:end="397:72">revents</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="403:21" pos:end="409:17"><if pos:start="403:21" pos:end="409:17">if <condition pos:start="403:24" pos:end="405:68">(<expr pos:start="403:25" pos:end="405:67"><name pos:start="403:25" pos:end="403:29"><name pos:start="403:25" pos:end="403:26">so</name><operator pos:start="403:27" pos:end="403:28">-&gt;</operator><name pos:start="403:29" pos:end="403:29">s</name></name> <operator pos:start="403:31" pos:end="403:32">!=</operator> <operator pos:start="403:34" pos:end="403:34">-</operator><literal type="number" pos:start="403:35" pos:end="403:35">1</literal> <operator pos:start="403:37" pos:end="403:38">&amp;&amp;</operator>

                        <operator pos:start="405:25" pos:end="405:25">(</operator><name pos:start="405:26" pos:end="405:32">revents</name> <operator pos:start="405:34" pos:end="405:34">&amp;</operator> <operator pos:start="405:36" pos:end="405:36">(</operator><name pos:start="405:37" pos:end="405:43">G_IO_IN</name> <operator pos:start="405:45" pos:end="405:45">|</operator> <name pos:start="405:47" pos:end="405:54">G_IO_HUP</name> <operator pos:start="405:56" pos:end="405:56">|</operator> <name pos:start="405:58" pos:end="405:65">G_IO_ERR</name><operator pos:start="405:66" pos:end="405:66">)</operator><operator pos:start="405:67" pos:end="405:67">)</operator></expr>)</condition> <block pos:start="405:70" pos:end="409:17">{<block_content pos:start="407:21" pos:end="407:37">

                    <expr_stmt pos:start="407:21" pos:end="407:37"><expr pos:start="407:21" pos:end="407:36"><call pos:start="407:21" pos:end="407:36"><name pos:start="407:21" pos:end="407:32">icmp_receive</name><argument_list pos:start="407:33" pos:end="407:36">(<argument pos:start="407:34" pos:end="407:35"><expr pos:start="407:34" pos:end="407:35"><name pos:start="407:34" pos:end="407:35">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="417:9" pos:end="417:24"><expr pos:start="417:9" pos:end="417:23"><call pos:start="417:9" pos:end="417:23"><name pos:start="417:9" pos:end="417:16">if_start</name><argument_list pos:start="417:17" pos:end="417:23">(<argument pos:start="417:18" pos:end="417:22"><expr pos:start="417:18" pos:end="417:22"><name pos:start="417:18" pos:end="417:22">slirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
