<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6410.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:29"><name pos:start="1:1" pos:end="1:15">iscsi_aio_readv</name><argument_list pos:start="1:16" pos:end="7:29">(<argument pos:start="1:17" pos:end="1:36">BlockDriverState *bs</argument>, <argument pos:start="1:39" pos:end="1:56">int64_t sector_num</argument>,

                <argument pos:start="3:17" pos:end="3:34">QEMUIOVector *qiov</argument>, <argument pos:start="3:37" pos:end="3:50">int nb_sectors</argument>,

                <argument pos:start="5:17" pos:end="5:45">BlockDriverCompletionFunc *cb</argument>,

                <argument pos:start="7:17" pos:end="7:28">void *opaque</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="179:1">{<block_content pos:start="11:5" pos:end="177:24">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">IscsiLun</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">iscsilun</name> <init pos:start="11:24" pos:end="11:35">= <expr pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:27">bs</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:24">iscsi_context</name></name> <modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:31">iscsi</name> <init pos:start="13:33" pos:end="13:49">= <expr pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:42">iscsilun</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:49">iscsi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">IscsiAIOCB</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:25">qemu_read_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:24">num_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:59"><expr pos:start="27:5" pos:end="27:58"><name pos:start="27:5" pos:end="27:18">qemu_read_size</name> <operator pos:start="27:20" pos:end="27:20">=</operator> <name pos:start="27:22" pos:end="27:37">BDRV_SECTOR_SIZE</name> <operator pos:start="27:39" pos:end="27:39">*</operator> <operator pos:start="27:41" pos:end="27:41">(</operator><name pos:start="27:42" pos:end="27:47">size_t</name><operator pos:start="27:48" pos:end="27:48">)</operator><name pos:start="27:49" pos:end="27:58">nb_sectors</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:7">acb</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:57"><name pos:start="31:11" pos:end="31:22">qemu_aio_get</name><argument_list pos:start="31:23" pos:end="31:57">(<argument pos:start="31:24" pos:end="31:40"><expr pos:start="31:24" pos:end="31:40"><operator pos:start="31:24" pos:end="31:24">&amp;</operator><name pos:start="31:25" pos:end="31:40">iscsi_aiocb_info</name></expr></argument>, <argument pos:start="31:43" pos:end="31:44"><expr pos:start="31:43" pos:end="31:44"><name pos:start="31:43" pos:end="31:44">bs</name></expr></argument>, <argument pos:start="31:47" pos:end="31:48"><expr pos:start="31:47" pos:end="31:48"><name pos:start="31:47" pos:end="31:48">cb</name></expr></argument>, <argument pos:start="31:51" pos:end="31:56"><expr pos:start="31:51" pos:end="31:56"><name pos:start="31:51" pos:end="31:56">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:70"><expr pos:start="33:5" pos:end="33:69"><call pos:start="33:5" pos:end="33:69"><name pos:start="33:5" pos:end="33:25">trace_iscsi_aio_readv</name><argument_list pos:start="33:26" pos:end="33:69">(<argument pos:start="33:27" pos:end="33:31"><expr pos:start="33:27" pos:end="33:31"><name pos:start="33:27" pos:end="33:31">iscsi</name></expr></argument>, <argument pos:start="33:34" pos:end="33:43"><expr pos:start="33:34" pos:end="33:43"><name pos:start="33:34" pos:end="33:43">sector_num</name></expr></argument>, <argument pos:start="33:46" pos:end="33:55"><expr pos:start="33:46" pos:end="33:55"><name pos:start="33:46" pos:end="33:55">nb_sectors</name></expr></argument>, <argument pos:start="33:58" pos:end="33:63"><expr pos:start="33:58" pos:end="33:63"><name pos:start="33:58" pos:end="33:63">opaque</name></expr></argument>, <argument pos:start="33:66" pos:end="33:68"><expr pos:start="33:66" pos:end="33:68"><name pos:start="33:66" pos:end="33:68">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:7">acb</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:17">iscsilun</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:28">iscsilun</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:7">acb</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:13">qiov</name></name>     <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:24">qiov</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:7">acb</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:17">canceled</name></name>    <operator pos:start="43:22" pos:end="43:22">=</operator> <literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:7">acb</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:11">bh</name></name>          <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:36"><expr pos:start="47:5" pos:end="47:35"><name pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:7">acb</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:15">status</name></name>      <operator pos:start="47:22" pos:end="47:22">=</operator> <operator pos:start="47:24" pos:end="47:24">-</operator><name pos:start="47:25" pos:end="47:35">EINPROGRESS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:38"><expr pos:start="49:5" pos:end="49:37"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:7">acb</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:18">read_size</name></name>   <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:37">qemu_read_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:7">acb</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:12">buf</name></name>         <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:27">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="61:7">/* If LUN blocksize is bigger than BDRV_BLOCK_SIZE a read from QEMU

     * may be misaligned to the LUN, so we may need to read some extra

     * data.

     */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:20"><name pos:start="63:5" pos:end="63:7">acb</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:20">read_offset</name></name> <operator pos:start="63:22" pos:end="63:22">=</operator> <literal type="number" pos:start="63:24" pos:end="63:24">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:48">(<expr pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:16">iscsilun</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:28">block_size</name></name> <operator pos:start="65:30" pos:end="65:30">&gt;</operator> <name pos:start="65:32" pos:end="65:47">BDRV_SECTOR_SIZE</name></expr>)</condition> <block pos:start="65:50" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:63">

        <decl_stmt pos:start="67:9" pos:end="67:61"><decl pos:start="67:9" pos:end="67:60"><type pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:16">uint64_t</name></type> <name pos:start="67:18" pos:end="67:28">bdrv_offset</name> <init pos:start="67:30" pos:end="67:60">= <expr pos:start="67:32" pos:end="67:60"><name pos:start="67:32" pos:end="67:47">BDRV_SECTOR_SIZE</name> <operator pos:start="67:49" pos:end="67:49">*</operator> <name pos:start="67:51" pos:end="67:60">sector_num</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:63"><expr pos:start="71:9" pos:end="71:62"><name pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:11">acb</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:24">read_offset</name></name>  <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:39">bdrv_offset</name> <operator pos:start="71:41" pos:end="71:41">%</operator> <name pos:start="71:43" pos:end="71:62"><name pos:start="71:43" pos:end="71:50">iscsilun</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:62">block_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="81:43"><expr pos:start="77:5" pos:end="81:42"><name pos:start="77:5" pos:end="77:15">num_sectors</name>  <operator pos:start="77:18" pos:end="77:18">=</operator> <operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:34">qemu_read_size</name> <operator pos:start="77:36" pos:end="77:36">+</operator> <name pos:start="77:38" pos:end="77:57"><name pos:start="77:38" pos:end="77:45">iscsilun</name><operator pos:start="77:46" pos:end="77:47">-&gt;</operator><name pos:start="77:48" pos:end="77:57">block_size</name></name>

                    <operator pos:start="79:21" pos:end="79:21">+</operator> <name pos:start="79:23" pos:end="79:38"><name pos:start="79:23" pos:end="79:25">acb</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:38">read_offset</name></name> <operator pos:start="79:40" pos:end="79:40">-</operator> <literal type="number" pos:start="79:42" pos:end="79:42">1</literal><operator pos:start="79:43" pos:end="79:43">)</operator>

                    <operator pos:start="81:21" pos:end="81:21">/</operator> <name pos:start="81:23" pos:end="81:42"><name pos:start="81:23" pos:end="81:30">iscsilun</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:42">block_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:7">acb</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:13">task</name></name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:48"><name pos:start="85:17" pos:end="85:22">malloc</name><argument_list pos:start="85:23" pos:end="85:48">(<argument pos:start="85:24" pos:end="85:47"><expr pos:start="85:24" pos:end="85:47"><sizeof pos:start="85:24" pos:end="85:47">sizeof<argument_list pos:start="85:30" pos:end="85:47">(<argument pos:start="85:31" pos:end="85:46"><expr pos:start="85:31" pos:end="85:46">struct <name pos:start="85:38" pos:end="85:46">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:26">(<expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:11">acb</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:17">task</name></name> <operator pos:start="87:19" pos:end="87:20">==</operator> <name pos:start="87:22" pos:end="87:25">NULL</name></expr>)</condition> <block pos:start="87:28" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:20">

        <expr_stmt pos:start="89:9" pos:end="91:60"><expr pos:start="89:9" pos:end="91:59"><call pos:start="89:9" pos:end="91:59"><name pos:start="89:9" pos:end="89:20">error_report</name><argument_list pos:start="89:21" pos:end="91:59">(<argument pos:start="89:22" pos:end="91:34"><expr pos:start="89:22" pos:end="91:34"><literal type="string" pos:start="89:22" pos:end="89:70">"iSCSI: Failed to allocate task for scsi READ16 "</literal>

                     <literal type="string" pos:start="91:22" pos:end="91:34">"command. %s"</literal></expr></argument>, <argument pos:start="91:37" pos:end="91:58"><expr pos:start="91:37" pos:end="91:58"><call pos:start="91:37" pos:end="91:58"><name pos:start="91:37" pos:end="91:51">iscsi_get_error</name><argument_list pos:start="91:52" pos:end="91:58">(<argument pos:start="91:53" pos:end="91:57"><expr pos:start="91:53" pos:end="91:57"><name pos:start="91:53" pos:end="91:57">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><call pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:24">qemu_aio_release</name><argument_list pos:start="93:25" pos:end="93:29">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><name pos:start="93:26" pos:end="93:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:20">return <expr pos:start="95:16" pos:end="95:19"><name pos:start="95:16" pos:end="95:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:51"><expr pos:start="99:5" pos:end="99:50"><call pos:start="99:5" pos:end="99:50"><name pos:start="99:5" pos:end="99:10">memset</name><argument_list pos:start="99:11" pos:end="99:50">(<argument pos:start="99:12" pos:end="99:20"><expr pos:start="99:12" pos:end="99:20"><name pos:start="99:12" pos:end="99:20"><name pos:start="99:12" pos:end="99:14">acb</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:20">task</name></name></expr></argument>, <argument pos:start="99:23" pos:end="99:23"><expr pos:start="99:23" pos:end="99:23"><literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr></argument>, <argument pos:start="99:26" pos:end="99:49"><expr pos:start="99:26" pos:end="99:49"><sizeof pos:start="99:26" pos:end="99:49">sizeof<argument_list pos:start="99:32" pos:end="99:49">(<argument pos:start="99:33" pos:end="99:48"><expr pos:start="99:33" pos:end="99:48">struct <name pos:start="99:40" pos:end="99:48">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:7">acb</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:13">task</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:23">xfer_dir</name></name> <operator pos:start="103:25" pos:end="103:25">=</operator> <name pos:start="103:27" pos:end="103:40">SCSI_XFER_READ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:48"><expr pos:start="105:5" pos:end="105:47"><name pos:start="105:5" pos:end="105:7">lba</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:47"><name pos:start="105:11" pos:end="105:25">sector_qemu2lun</name><argument_list pos:start="105:26" pos:end="105:47">(<argument pos:start="105:27" pos:end="105:36"><expr pos:start="105:27" pos:end="105:36"><name pos:start="105:27" pos:end="105:36">sector_num</name></expr></argument>, <argument pos:start="105:39" pos:end="105:46"><expr pos:start="105:39" pos:end="105:46"><name pos:start="105:39" pos:end="105:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:25"><name pos:start="107:5" pos:end="107:7">acb</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:13">task</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:25">expxferlen</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:42">qemu_read_size</name></expr>;</expr_stmt>



    <switch pos:start="111:5" pos:end="139:5">switch <condition pos:start="111:12" pos:end="111:27">(<expr pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:20">iscsilun</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:26">type</name></name></expr>)</condition> <block pos:start="111:29" pos:end="139:5">{<block_content pos:start="113:5" pos:end="137:14">

    <case pos:start="113:5" pos:end="113:19">case <expr pos:start="113:10" pos:end="113:18"><name pos:start="113:10" pos:end="113:18">TYPE_DISK</name></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:33"><expr pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:11">acb</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:17">task</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:27">cdb_size</name></name> <operator pos:start="115:29" pos:end="115:29">=</operator> <literal type="number" pos:start="115:31" pos:end="115:32">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:34"><expr pos:start="117:9" pos:end="117:33"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:11">acb</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:17">task</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:22">cdb</name><index pos:start="117:23" pos:end="117:25">[<expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr>]</index></name>  <operator pos:start="117:28" pos:end="117:28">=</operator> <literal type="number" pos:start="117:30" pos:end="117:33">0x88</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:60"><expr pos:start="119:9" pos:end="119:59"><operator pos:start="119:9" pos:end="119:9">*</operator><operator pos:start="119:10" pos:end="119:10">(</operator><name pos:start="119:11" pos:end="119:18">uint32_t</name> <operator pos:start="119:20" pos:end="119:20">*</operator><operator pos:start="119:21" pos:end="119:21">)</operator><operator pos:start="119:22" pos:end="119:22">&amp;</operator><name pos:start="119:23" pos:end="119:39"><name pos:start="119:23" pos:end="119:25">acb</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:31">task</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:36">cdb</name><index pos:start="119:37" pos:end="119:39">[<expr pos:start="119:38" pos:end="119:38"><literal type="number" pos:start="119:38" pos:end="119:38">2</literal></expr>]</index></name>  <operator pos:start="119:42" pos:end="119:42">=</operator> <call pos:start="119:44" pos:end="119:59"><name pos:start="119:44" pos:end="119:48">htonl</name><argument_list pos:start="119:49" pos:end="119:59">(<argument pos:start="119:50" pos:end="119:58"><expr pos:start="119:50" pos:end="119:58"><name pos:start="119:50" pos:end="119:52">lba</name> <operator pos:start="119:54" pos:end="119:55">&gt;&gt;</operator> <literal type="number" pos:start="119:57" pos:end="119:58">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:67"><expr pos:start="121:9" pos:end="121:66"><operator pos:start="121:9" pos:end="121:9">*</operator><operator pos:start="121:10" pos:end="121:10">(</operator><name pos:start="121:11" pos:end="121:18">uint32_t</name> <operator pos:start="121:20" pos:end="121:20">*</operator><operator pos:start="121:21" pos:end="121:21">)</operator><operator pos:start="121:22" pos:end="121:22">&amp;</operator><name pos:start="121:23" pos:end="121:39"><name pos:start="121:23" pos:end="121:25">acb</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:31">task</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:36">cdb</name><index pos:start="121:37" pos:end="121:39">[<expr pos:start="121:38" pos:end="121:38"><literal type="number" pos:start="121:38" pos:end="121:38">6</literal></expr>]</index></name>  <operator pos:start="121:42" pos:end="121:42">=</operator> <call pos:start="121:44" pos:end="121:66"><name pos:start="121:44" pos:end="121:48">htonl</name><argument_list pos:start="121:49" pos:end="121:66">(<argument pos:start="121:50" pos:end="121:65"><expr pos:start="121:50" pos:end="121:65"><name pos:start="121:50" pos:end="121:52">lba</name> <operator pos:start="121:54" pos:end="121:54">&amp;</operator> <literal type="number" pos:start="121:56" pos:end="121:65">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:62"><expr pos:start="123:9" pos:end="123:61"><operator pos:start="123:9" pos:end="123:9">*</operator><operator pos:start="123:10" pos:end="123:10">(</operator><name pos:start="123:11" pos:end="123:18">uint32_t</name> <operator pos:start="123:20" pos:end="123:20">*</operator><operator pos:start="123:21" pos:end="123:21">)</operator><operator pos:start="123:22" pos:end="123:22">&amp;</operator><name pos:start="123:23" pos:end="123:40"><name pos:start="123:23" pos:end="123:25">acb</name><operator pos:start="123:26" pos:end="123:27">-&gt;</operator><name pos:start="123:28" pos:end="123:31">task</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:36">cdb</name><index pos:start="123:37" pos:end="123:40">[<expr pos:start="123:38" pos:end="123:39"><literal type="number" pos:start="123:38" pos:end="123:39">10</literal></expr>]</index></name> <operator pos:start="123:42" pos:end="123:42">=</operator> <call pos:start="123:44" pos:end="123:61"><name pos:start="123:44" pos:end="123:48">htonl</name><argument_list pos:start="123:49" pos:end="123:61">(<argument pos:start="123:50" pos:end="123:60"><expr pos:start="123:50" pos:end="123:60"><name pos:start="123:50" pos:end="123:60">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <default pos:start="127:5" pos:end="127:12">default:</default>

        <expr_stmt pos:start="129:9" pos:end="129:33"><expr pos:start="129:9" pos:end="129:32"><name pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:11">acb</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:17">task</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:27">cdb_size</name></name> <operator pos:start="129:29" pos:end="129:29">=</operator> <literal type="number" pos:start="129:31" pos:end="129:32">10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:34"><expr pos:start="131:9" pos:end="131:33"><name pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:11">acb</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:17">task</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:22">cdb</name><index pos:start="131:23" pos:end="131:25">[<expr pos:start="131:24" pos:end="131:24"><literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>]</index></name>  <operator pos:start="131:28" pos:end="131:28">=</operator> <literal type="number" pos:start="131:30" pos:end="131:33">0x28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:53"><expr pos:start="133:9" pos:end="133:52"><operator pos:start="133:9" pos:end="133:9">*</operator><operator pos:start="133:10" pos:end="133:10">(</operator><name pos:start="133:11" pos:end="133:18">uint32_t</name> <operator pos:start="133:20" pos:end="133:20">*</operator><operator pos:start="133:21" pos:end="133:21">)</operator><operator pos:start="133:22" pos:end="133:22">&amp;</operator><name pos:start="133:23" pos:end="133:39"><name pos:start="133:23" pos:end="133:25">acb</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:31">task</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:36">cdb</name><index pos:start="133:37" pos:end="133:39">[<expr pos:start="133:38" pos:end="133:38"><literal type="number" pos:start="133:38" pos:end="133:38">2</literal></expr>]</index></name> <operator pos:start="133:41" pos:end="133:41">=</operator> <call pos:start="133:43" pos:end="133:52"><name pos:start="133:43" pos:end="133:47">htonl</name><argument_list pos:start="133:48" pos:end="133:52">(<argument pos:start="133:49" pos:end="133:51"><expr pos:start="133:49" pos:end="133:51"><name pos:start="133:49" pos:end="133:51">lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:61"><expr pos:start="135:9" pos:end="135:60"><operator pos:start="135:9" pos:end="135:9">*</operator><operator pos:start="135:10" pos:end="135:10">(</operator><name pos:start="135:11" pos:end="135:18">uint16_t</name> <operator pos:start="135:20" pos:end="135:20">*</operator><operator pos:start="135:21" pos:end="135:21">)</operator><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:39"><name pos:start="135:23" pos:end="135:25">acb</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:31">task</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:36">cdb</name><index pos:start="135:37" pos:end="135:39">[<expr pos:start="135:38" pos:end="135:38"><literal type="number" pos:start="135:38" pos:end="135:38">7</literal></expr>]</index></name> <operator pos:start="135:41" pos:end="135:41">=</operator> <call pos:start="135:43" pos:end="135:60"><name pos:start="135:43" pos:end="135:47">htons</name><argument_list pos:start="135:48" pos:end="135:60">(<argument pos:start="135:49" pos:end="135:59"><expr pos:start="135:49" pos:end="135:59"><name pos:start="135:49" pos:end="135:59">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    </block_content>}</block></switch>

    

    <if_stmt pos:start="143:5" pos:end="157:5"><if pos:start="143:5" pos:end="157:5">if <condition pos:start="143:8" pos:end="149:43">(<expr pos:start="143:9" pos:end="149:42"><call pos:start="143:9" pos:end="149:37"><name pos:start="143:9" pos:end="143:32">iscsi_scsi_command_async</name><argument_list pos:start="143:33" pos:end="149:37">(<argument pos:start="143:34" pos:end="143:38"><expr pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:38">iscsi</name></expr></argument>, <argument pos:start="143:41" pos:end="143:53"><expr pos:start="143:41" pos:end="143:53"><name pos:start="143:41" pos:end="143:53"><name pos:start="143:41" pos:end="143:48">iscsilun</name><operator pos:start="143:49" pos:end="143:50">-&gt;</operator><name pos:start="143:51" pos:end="143:53">lun</name></name></expr></argument>, <argument pos:start="143:56" pos:end="143:64"><expr pos:start="143:56" pos:end="143:64"><name pos:start="143:56" pos:end="143:64"><name pos:start="143:56" pos:end="143:58">acb</name><operator pos:start="143:59" pos:end="143:60">-&gt;</operator><name pos:start="143:61" pos:end="143:64">task</name></name></expr></argument>,

                                 <argument pos:start="145:34" pos:end="145:52"><expr pos:start="145:34" pos:end="145:52"><name pos:start="145:34" pos:end="145:52">iscsi_aio_read16_cb</name></expr></argument>,

                                 <argument pos:start="147:34" pos:end="147:37"><expr pos:start="147:34" pos:end="147:37"><name pos:start="147:34" pos:end="147:37">NULL</name></expr></argument>,

                                 <argument pos:start="149:34" pos:end="149:36"><expr pos:start="149:34" pos:end="149:36"><name pos:start="149:34" pos:end="149:36">acb</name></expr></argument>)</argument_list></call> <operator pos:start="149:39" pos:end="149:40">!=</operator> <literal type="number" pos:start="149:42" pos:end="149:42">0</literal></expr>)</condition> <block pos:start="149:45" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:20">

        <expr_stmt pos:start="151:9" pos:end="151:39"><expr pos:start="151:9" pos:end="151:38"><call pos:start="151:9" pos:end="151:38"><name pos:start="151:9" pos:end="151:27">scsi_free_scsi_task</name><argument_list pos:start="151:28" pos:end="151:38">(<argument pos:start="151:29" pos:end="151:37"><expr pos:start="151:29" pos:end="151:37"><name pos:start="151:29" pos:end="151:37"><name pos:start="151:29" pos:end="151:31">acb</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:37">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:24">qemu_aio_release</name><argument_list pos:start="153:25" pos:end="153:29">(<argument pos:start="153:26" pos:end="153:28"><expr pos:start="153:26" pos:end="153:28"><name pos:start="153:26" pos:end="153:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:20">return <expr pos:start="155:16" pos:end="155:19"><name pos:start="155:16" pos:end="155:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="161:5" pos:end="169:5">for <control pos:start="161:9" pos:end="161:41">(<init pos:start="161:10" pos:end="161:15"><expr pos:start="161:10" pos:end="161:14"><name pos:start="161:10" pos:end="161:10">i</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <literal type="number" pos:start="161:14" pos:end="161:14">0</literal></expr>;</init> <condition pos:start="161:17" pos:end="161:36"><expr pos:start="161:17" pos:end="161:35"><name pos:start="161:17" pos:end="161:17">i</name> <operator pos:start="161:19" pos:end="161:19">&lt;</operator> <name pos:start="161:21" pos:end="161:35"><name pos:start="161:21" pos:end="161:23">acb</name><operator pos:start="161:24" pos:end="161:25">-&gt;</operator><name pos:start="161:26" pos:end="161:29">qiov</name><operator pos:start="161:30" pos:end="161:31">-&gt;</operator><name pos:start="161:32" pos:end="161:35">niov</name></name></expr>;</condition> <incr pos:start="161:38" pos:end="161:40"><expr pos:start="161:38" pos:end="161:40"><name pos:start="161:38" pos:end="161:38">i</name><operator pos:start="161:39" pos:end="161:40">++</operator></expr></incr>)</control> <block pos:start="161:43" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:44">

        <expr_stmt pos:start="163:9" pos:end="167:44"><expr pos:start="163:9" pos:end="167:43"><call pos:start="163:9" pos:end="167:43"><name pos:start="163:9" pos:end="163:36">scsi_task_add_data_in_buffer</name><argument_list pos:start="163:37" pos:end="167:43">(<argument pos:start="163:38" pos:end="163:46"><expr pos:start="163:38" pos:end="163:46"><name pos:start="163:38" pos:end="163:46"><name pos:start="163:38" pos:end="163:40">acb</name><operator pos:start="163:41" pos:end="163:42">-&gt;</operator><name pos:start="163:43" pos:end="163:46">task</name></name></expr></argument>,

                <argument pos:start="165:17" pos:end="165:41"><expr pos:start="165:17" pos:end="165:41"><name pos:start="165:17" pos:end="165:33"><name pos:start="165:17" pos:end="165:19">acb</name><operator pos:start="165:20" pos:end="165:21">-&gt;</operator><name pos:start="165:22" pos:end="165:25">qiov</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:30">iov</name><index pos:start="165:31" pos:end="165:33">[<expr pos:start="165:32" pos:end="165:32"><name pos:start="165:32" pos:end="165:32">i</name></expr>]</index></name><operator pos:start="165:34" pos:end="165:34">.</operator><name pos:start="165:35" pos:end="165:41">iov_len</name></expr></argument>,

                <argument pos:start="167:17" pos:end="167:42"><expr pos:start="167:17" pos:end="167:42"><name pos:start="167:17" pos:end="167:33"><name pos:start="167:17" pos:end="167:19">acb</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:25">qiov</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:30">iov</name><index pos:start="167:31" pos:end="167:33">[<expr pos:start="167:32" pos:end="167:32"><name pos:start="167:32" pos:end="167:32">i</name></expr>]</index></name><operator pos:start="167:34" pos:end="167:34">.</operator><name pos:start="167:35" pos:end="167:42">iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="173:5" pos:end="173:31"><expr pos:start="173:5" pos:end="173:30"><call pos:start="173:5" pos:end="173:30"><name pos:start="173:5" pos:end="173:20">iscsi_set_events</name><argument_list pos:start="173:21" pos:end="173:30">(<argument pos:start="173:22" pos:end="173:29"><expr pos:start="173:22" pos:end="173:29"><name pos:start="173:22" pos:end="173:29">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="177:5" pos:end="177:24">return <expr pos:start="177:12" pos:end="177:23"><operator pos:start="177:12" pos:end="177:12">&amp;</operator><name pos:start="177:13" pos:end="177:23"><name pos:start="177:13" pos:end="177:15">acb</name><operator pos:start="177:16" pos:end="177:17">-&gt;</operator><name pos:start="177:18" pos:end="177:23">common</name></name></expr>;</return>

</block_content>}</block>
</unit>
