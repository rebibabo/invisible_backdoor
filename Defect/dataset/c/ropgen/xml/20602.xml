<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20602.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">ff_frame_thread_free</name><parameter_list pos:start="1:26" pos:end="1:66">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:65"><decl pos:start="1:50" pos:end="1:65"><type pos:start="1:50" pos:end="1:65"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:65">thread_count</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:24">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">FrameThreadContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:28">fctx</name> <init pos:start="5:30" pos:end="5:58">= <expr pos:start="5:32" pos:end="5:58"><name pos:start="5:32" pos:end="5:58"><name pos:start="5:32" pos:end="5:36">avctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:46">internal</name><operator pos:start="5:47" pos:end="5:48">-&gt;</operator><name pos:start="5:49" pos:end="5:58">thread_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">AVCodec</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:24">codec</name> <init pos:start="7:26" pos:end="7:39">= <expr pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:32">avctx</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:39">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><call pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:29">park_frame_worker_threads</name><argument_list pos:start="13:30" pos:end="13:49">(<argument pos:start="13:31" pos:end="13:34"><expr pos:start="13:31" pos:end="13:34"><name pos:start="13:31" pos:end="13:34">fctx</name></expr></argument>, <argument pos:start="13:37" pos:end="13:48"><expr pos:start="13:37" pos:end="13:48"><name pos:start="13:37" pos:end="13:48">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="27:9"><if pos:start="17:5" pos:end="27:9">if <condition pos:start="17:8" pos:end="17:64">(<expr pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:12">fctx</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:25">prev_thread</name></name> <operator pos:start="17:27" pos:end="17:28">&amp;&amp;</operator> <name pos:start="17:30" pos:end="17:46"><name pos:start="17:30" pos:end="17:33">fctx</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:46">prev_thread</name></name> <operator pos:start="17:48" pos:end="17:49">!=</operator> <name pos:start="17:51" pos:end="17:63"><name pos:start="17:51" pos:end="17:54">fctx</name><operator pos:start="17:55" pos:end="17:56">-&gt;</operator><name pos:start="17:57" pos:end="17:63">threads</name></name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="27:9"><block_content pos:start="19:9" pos:end="27:9">

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:94">(<expr pos:start="19:13" pos:end="19:93"><call pos:start="19:13" pos:end="19:89"><name pos:start="19:13" pos:end="19:38">update_context_from_thread</name><argument_list pos:start="19:39" pos:end="19:89">(<argument pos:start="19:40" pos:end="19:59"><expr pos:start="19:40" pos:end="19:59"><name pos:start="19:40" pos:end="19:59"><name pos:start="19:40" pos:end="19:43">fctx</name><operator pos:start="19:44" pos:end="19:45">-&gt;</operator><name pos:start="19:46" pos:end="19:52">threads</name><operator pos:start="19:53" pos:end="19:54">-&gt;</operator><name pos:start="19:55" pos:end="19:59">avctx</name></name></expr></argument>, <argument pos:start="19:62" pos:end="19:85"><expr pos:start="19:62" pos:end="19:85"><name pos:start="19:62" pos:end="19:85"><name pos:start="19:62" pos:end="19:65">fctx</name><operator pos:start="19:66" pos:end="19:67">-&gt;</operator><name pos:start="19:68" pos:end="19:78">prev_thread</name><operator pos:start="19:79" pos:end="19:80">-&gt;</operator><name pos:start="19:81" pos:end="19:85">avctx</name></name></expr></argument>, <argument pos:start="19:88" pos:end="19:88"><expr pos:start="19:88" pos:end="19:88"><literal type="number" pos:start="19:88" pos:end="19:88">0</literal></expr></argument>)</argument_list></call> <operator pos:start="19:91" pos:end="19:91">&lt;</operator> <literal type="number" pos:start="19:93" pos:end="19:93">0</literal></expr>)</condition> <block pos:start="19:96" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:56">

            <expr_stmt pos:start="21:13" pos:end="21:72"><expr pos:start="21:13" pos:end="21:71"><call pos:start="21:13" pos:end="21:71"><name pos:start="21:13" pos:end="21:18">av_log</name><argument_list pos:start="21:19" pos:end="21:71">(<argument pos:start="21:20" pos:end="21:24"><expr pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:24">avctx</name></expr></argument>, <argument pos:start="21:27" pos:end="21:38"><expr pos:start="21:27" pos:end="21:38"><name pos:start="21:27" pos:end="21:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:41" pos:end="21:70"><expr pos:start="21:41" pos:end="21:70"><literal type="string" pos:start="21:41" pos:end="21:70">"Final thread update failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:98"><expr pos:start="23:13" pos:end="23:97"><name pos:start="23:13" pos:end="23:55"><name pos:start="23:13" pos:end="23:16">fctx</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:29">prev_thread</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:36">avctx</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:46">internal</name><operator pos:start="23:47" pos:end="23:48">-&gt;</operator><name pos:start="23:49" pos:end="23:55">is_copy</name></name> <operator pos:start="23:57" pos:end="23:57">=</operator> <name pos:start="23:59" pos:end="23:97"><name pos:start="23:59" pos:end="23:62">fctx</name><operator pos:start="23:63" pos:end="23:64">-&gt;</operator><name pos:start="23:65" pos:end="23:71">threads</name><operator pos:start="23:72" pos:end="23:73">-&gt;</operator><name pos:start="23:74" pos:end="23:78">avctx</name><operator pos:start="23:79" pos:end="23:80">-&gt;</operator><name pos:start="23:81" pos:end="23:88">internal</name><operator pos:start="23:89" pos:end="23:90">-&gt;</operator><name pos:start="23:91" pos:end="23:97">is_copy</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:56"><expr pos:start="25:13" pos:end="25:55"><name pos:start="25:13" pos:end="25:51"><name pos:start="25:13" pos:end="25:16">fctx</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:25">threads</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:32">avctx</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:42">internal</name><operator pos:start="25:43" pos:end="25:44">-&gt;</operator><name pos:start="25:45" pos:end="25:51">is_copy</name></name> <operator pos:start="25:53" pos:end="25:53">=</operator> <literal type="number" pos:start="25:55" pos:end="25:55">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:8">fctx</name><operator pos:start="31:9" pos:end="31:10">-&gt;</operator><name pos:start="31:11" pos:end="31:13">die</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</expr_stmt>



    <for pos:start="35:5" pos:end="67:5">for <control pos:start="35:9" pos:end="35:38">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:33"><expr pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:32">thread_count</name></expr>;</condition> <incr pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:35">i</name><operator pos:start="35:36" pos:end="35:37">++</operator></expr></incr>)</control> <block pos:start="35:40" pos:end="67:5">{<block_content pos:start="37:9" pos:end="65:33">

        <decl_stmt pos:start="37:9" pos:end="37:48"><decl pos:start="37:9" pos:end="37:47"><type pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:24">PerThreadContext</name> <modifier pos:start="37:26" pos:end="37:26">*</modifier></type><name pos:start="37:27" pos:end="37:27">p</name> <init pos:start="37:29" pos:end="37:47">= <expr pos:start="37:31" pos:end="37:47"><operator pos:start="37:31" pos:end="37:31">&amp;</operator><name pos:start="37:32" pos:end="37:47"><name pos:start="37:32" pos:end="37:35">fctx</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:44">threads</name><index pos:start="37:45" pos:end="37:47">[<expr pos:start="37:46" pos:end="37:46"><name pos:start="37:46" pos:end="37:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><call pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:26">pthread_mutex_lock</name><argument_list pos:start="41:27" pos:end="41:37">(<argument pos:start="41:28" pos:end="41:36"><expr pos:start="41:28" pos:end="41:36"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:36"><name pos:start="41:29" pos:end="41:29">p</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:27">pthread_cond_signal</name><argument_list pos:start="43:28" pos:end="43:43">(<argument pos:start="43:29" pos:end="43:42"><expr pos:start="43:29" pos:end="43:42"><operator pos:start="43:29" pos:end="43:29">&amp;</operator><name pos:start="43:30" pos:end="43:42"><name pos:start="43:30" pos:end="43:30">p</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:42">input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><call pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:28">pthread_mutex_unlock</name><argument_list pos:start="45:29" pos:end="45:39">(<argument pos:start="45:30" pos:end="45:38"><expr pos:start="45:30" pos:end="45:38"><operator pos:start="45:30" pos:end="45:30">&amp;</operator><name pos:start="45:31" pos:end="45:38"><name pos:start="45:31" pos:end="45:31">p</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="51:42"><if pos:start="49:9" pos:end="51:42">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:13">p</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:26">thread_init</name></name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:42"><block_content pos:start="51:13" pos:end="51:42">

            <expr_stmt pos:start="51:13" pos:end="51:42"><expr pos:start="51:13" pos:end="51:41"><call pos:start="51:13" pos:end="51:41"><name pos:start="51:13" pos:end="51:24">pthread_join</name><argument_list pos:start="51:25" pos:end="51:41">(<argument pos:start="51:26" pos:end="51:34"><expr pos:start="51:26" pos:end="51:34"><name pos:start="51:26" pos:end="51:34"><name pos:start="51:26" pos:end="51:26">p</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:34">thread</name></name></expr></argument>, <argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><name pos:start="51:37" pos:end="51:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:25"><expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:9">p</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:22">thread_init</name></name><operator pos:start="53:23" pos:end="53:23">=</operator><literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="59:35"><if pos:start="57:9" pos:end="59:35">if <condition pos:start="57:12" pos:end="57:25">(<expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:17">codec</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:24">close</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:35"><block_content pos:start="59:13" pos:end="59:35">

            <expr_stmt pos:start="59:13" pos:end="59:35"><expr pos:start="59:13" pos:end="59:34"><call pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:17">codec</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:24">close</name></name><argument_list pos:start="59:25" pos:end="59:34">(<argument pos:start="59:26" pos:end="59:33"><expr pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:33"><name pos:start="59:26" pos:end="59:26">p</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:33">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><call pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:31">release_delayed_buffers</name><argument_list pos:start="63:32" pos:end="63:34">(<argument pos:start="63:33" pos:end="63:33"><expr pos:start="63:33" pos:end="63:33"><name pos:start="63:33" pos:end="63:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><call pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:21">av_frame_free</name><argument_list pos:start="65:22" pos:end="65:32">(<argument pos:start="65:23" pos:end="65:31"><expr pos:start="65:23" pos:end="65:31"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:24">p</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:31">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="71:5" pos:end="107:5">for <control pos:start="71:9" pos:end="71:38">(<init pos:start="71:10" pos:end="71:15"><expr pos:start="71:10" pos:end="71:14"><name pos:start="71:10" pos:end="71:10">i</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>;</init> <condition pos:start="71:17" pos:end="71:33"><expr pos:start="71:17" pos:end="71:32"><name pos:start="71:17" pos:end="71:17">i</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <name pos:start="71:21" pos:end="71:32">thread_count</name></expr>;</condition> <incr pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:35">i</name><operator pos:start="71:36" pos:end="71:37">++</operator></expr></incr>)</control> <block pos:start="71:40" pos:end="107:5">{<block_content pos:start="73:9" pos:end="105:28">

        <decl_stmt pos:start="73:9" pos:end="73:48"><decl pos:start="73:9" pos:end="73:47"><type pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:24">PerThreadContext</name> <modifier pos:start="73:26" pos:end="73:26">*</modifier></type><name pos:start="73:27" pos:end="73:27">p</name> <init pos:start="73:29" pos:end="73:47">= <expr pos:start="73:31" pos:end="73:47"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:47"><name pos:start="73:32" pos:end="73:35">fctx</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:44">threads</name><index pos:start="73:45" pos:end="73:47">[<expr pos:start="73:46" pos:end="73:46"><name pos:start="73:46" pos:end="73:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><call pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:29">pthread_mutex_destroy</name><argument_list pos:start="77:30" pos:end="77:40">(<argument pos:start="77:31" pos:end="77:39"><expr pos:start="77:31" pos:end="77:39"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:32">p</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:39">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:50"><expr pos:start="79:9" pos:end="79:49"><call pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:29">pthread_mutex_destroy</name><argument_list pos:start="79:30" pos:end="79:49">(<argument pos:start="79:31" pos:end="79:48"><expr pos:start="79:31" pos:end="79:48"><operator pos:start="79:31" pos:end="79:31">&amp;</operator><name pos:start="79:32" pos:end="79:48"><name pos:start="79:32" pos:end="79:32">p</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:48">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><call pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:28">pthread_cond_destroy</name><argument_list pos:start="81:29" pos:end="81:44">(<argument pos:start="81:30" pos:end="81:43"><expr pos:start="81:30" pos:end="81:43"><operator pos:start="81:30" pos:end="81:30">&amp;</operator><name pos:start="81:31" pos:end="81:43"><name pos:start="81:31" pos:end="81:31">p</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:43">input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><call pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:28">pthread_cond_destroy</name><argument_list pos:start="83:29" pos:end="83:47">(<argument pos:start="83:30" pos:end="83:46"><expr pos:start="83:30" pos:end="83:46"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:46"><name pos:start="83:31" pos:end="83:31">p</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:46">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><call pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:28">pthread_cond_destroy</name><argument_list pos:start="85:29" pos:end="85:45">(<argument pos:start="85:30" pos:end="85:44"><expr pos:start="85:30" pos:end="85:44"><operator pos:start="85:30" pos:end="85:30">&amp;</operator><name pos:start="85:31" pos:end="85:44"><name pos:start="85:31" pos:end="85:31">p</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:44">output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:35"><expr pos:start="87:9" pos:end="87:34"><call pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:23">av_packet_unref</name><argument_list pos:start="87:24" pos:end="87:34">(<argument pos:start="87:25" pos:end="87:33"><expr pos:start="87:25" pos:end="87:33"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:33"><name pos:start="87:26" pos:end="87:26">p</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:33">avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:39"><expr pos:start="89:9" pos:end="89:38"><call pos:start="89:9" pos:end="89:38"><name pos:start="89:9" pos:end="89:16">av_freep</name><argument_list pos:start="89:17" pos:end="89:38">(<argument pos:start="89:18" pos:end="89:37"><expr pos:start="89:18" pos:end="89:37"><operator pos:start="89:18" pos:end="89:18">&amp;</operator><name pos:start="89:19" pos:end="89:37"><name pos:start="89:19" pos:end="89:19">p</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:37">released_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:14">(<expr pos:start="93:13" pos:end="93:13"><name pos:start="93:13" pos:end="93:13">i</name></expr>)</condition> <block pos:start="93:16" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:46">

            <expr_stmt pos:start="95:13" pos:end="95:43"><expr pos:start="95:13" pos:end="95:42"><call pos:start="95:13" pos:end="95:42"><name pos:start="95:13" pos:end="95:20">av_freep</name><argument_list pos:start="95:21" pos:end="95:42">(<argument pos:start="95:22" pos:end="95:41"><expr pos:start="95:22" pos:end="95:41"><operator pos:start="95:22" pos:end="95:22">&amp;</operator><name pos:start="95:23" pos:end="95:41"><name pos:start="95:23" pos:end="95:23">p</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:30">avctx</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:41">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:46"><expr pos:start="97:13" pos:end="97:45"><call pos:start="97:13" pos:end="97:45"><name pos:start="97:13" pos:end="97:20">av_freep</name><argument_list pos:start="97:21" pos:end="97:45">(<argument pos:start="97:22" pos:end="97:44"><expr pos:start="97:22" pos:end="97:44"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:44"><name pos:start="97:23" pos:end="97:23">p</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:30">avctx</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:44">slice_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><call pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:16">av_freep</name><argument_list pos:start="103:17" pos:end="103:37">(<argument pos:start="103:18" pos:end="103:36"><expr pos:start="103:18" pos:end="103:36"><operator pos:start="103:18" pos:end="103:18">&amp;</operator><name pos:start="103:19" pos:end="103:36"><name pos:start="103:19" pos:end="103:19">p</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:26">avctx</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:36">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><call pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:16">av_freep</name><argument_list pos:start="105:17" pos:end="105:27">(<argument pos:start="105:18" pos:end="105:26"><expr pos:start="105:18" pos:end="105:26"><operator pos:start="105:18" pos:end="105:18">&amp;</operator><name pos:start="105:19" pos:end="105:26"><name pos:start="105:19" pos:end="105:19">p</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:26">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="111:5" pos:end="111:29"><expr pos:start="111:5" pos:end="111:28"><call pos:start="111:5" pos:end="111:28"><name pos:start="111:5" pos:end="111:12">av_freep</name><argument_list pos:start="111:13" pos:end="111:28">(<argument pos:start="111:14" pos:end="111:27"><expr pos:start="111:14" pos:end="111:27"><operator pos:start="111:14" pos:end="111:14">&amp;</operator><name pos:start="111:15" pos:end="111:27"><name pos:start="111:15" pos:end="111:18">fctx</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:27">threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:47"><expr pos:start="113:5" pos:end="113:46"><call pos:start="113:5" pos:end="113:46"><name pos:start="113:5" pos:end="113:25">pthread_mutex_destroy</name><argument_list pos:start="113:26" pos:end="113:46">(<argument pos:start="113:27" pos:end="113:45"><expr pos:start="113:27" pos:end="113:45"><operator pos:start="113:27" pos:end="113:27">&amp;</operator><name pos:start="113:28" pos:end="113:45"><name pos:start="113:28" pos:end="113:31">fctx</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:45">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:43"><expr pos:start="115:5" pos:end="115:42"><call pos:start="115:5" pos:end="115:42"><name pos:start="115:5" pos:end="115:12">av_freep</name><argument_list pos:start="115:13" pos:end="115:42">(<argument pos:start="115:14" pos:end="115:41"><expr pos:start="115:14" pos:end="115:41"><operator pos:start="115:14" pos:end="115:14">&amp;</operator><name pos:start="115:15" pos:end="115:41"><name pos:start="115:15" pos:end="115:19">avctx</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:29">internal</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:41">thread_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="121:38"><if pos:start="119:5" pos:end="121:38">if <condition pos:start="119:8" pos:end="119:69">(<expr pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:24">priv_data</name></name> <operator pos:start="119:26" pos:end="119:27">&amp;&amp;</operator> <name pos:start="119:29" pos:end="119:40"><name pos:start="119:29" pos:end="119:33">avctx</name><operator pos:start="119:34" pos:end="119:35">-&gt;</operator><name pos:start="119:36" pos:end="119:40">codec</name></name> <operator pos:start="119:42" pos:end="119:43">&amp;&amp;</operator> <name pos:start="119:45" pos:end="119:68"><name pos:start="119:45" pos:end="119:49">avctx</name><operator pos:start="119:50" pos:end="119:51">-&gt;</operator><name pos:start="119:52" pos:end="119:56">codec</name><operator pos:start="119:57" pos:end="119:58">-&gt;</operator><name pos:start="119:59" pos:end="119:68">priv_class</name></name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:38"><block_content pos:start="121:9" pos:end="121:38">

        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><call pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:19">av_opt_free</name><argument_list pos:start="121:20" pos:end="121:37">(<argument pos:start="121:21" pos:end="121:36"><expr pos:start="121:21" pos:end="121:36"><name pos:start="121:21" pos:end="121:36"><name pos:start="121:21" pos:end="121:25">avctx</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:36">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:24"><expr pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:9">avctx</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:16">codec</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:23">NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
