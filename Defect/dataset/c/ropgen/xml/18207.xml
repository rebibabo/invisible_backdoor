<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18207.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">ff_h2645_packet_split</name><parameter_list pos:start="1:26" pos:end="5:50">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">H2645Packet</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">pkt</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">length</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:30">void</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:38">logctx</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:52"><decl pos:start="3:41" pos:end="3:52"><type pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:52">is_nalff</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:73"><decl pos:start="3:55" pos:end="3:73"><type pos:start="3:55" pos:end="3:73"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:73">nal_length_size</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:49"><decl pos:start="5:27" pos:end="5:49"><type pos:start="5:27" pos:end="5:49"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">enum</name> <name pos:start="5:32" pos:end="5:40">AVCodecID</name></name></type> <name pos:start="5:42" pos:end="5:49">codec_id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="219:1">{<block_content pos:start="9:5" pos:end="217:13">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">consumed</name></decl>, <decl pos:start="9:19" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:21">ret</name> <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:60"><decl pos:start="11:5" pos:end="11:59"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:27">next_avc</name> <init pos:start="11:29" pos:end="11:59">= <expr pos:start="11:31" pos:end="11:59"><name pos:start="11:31" pos:end="11:33">buf</name> <operator pos:start="11:35" pos:end="11:35">+</operator> <operator pos:start="11:37" pos:end="11:37">(</operator><ternary pos:start="11:38" pos:end="11:58"><condition pos:start="11:38" pos:end="11:47"><expr pos:start="11:38" pos:end="11:45"><name pos:start="11:38" pos:end="11:45">is_nalff</name></expr> ?</condition><then pos:start="11:49" pos:end="11:49"> <expr pos:start="11:49" pos:end="11:49"><literal type="number" pos:start="11:49" pos:end="11:49">0</literal></expr> </then><else pos:start="11:51" pos:end="11:58">: <expr pos:start="11:53" pos:end="11:58"><name pos:start="11:53" pos:end="11:58">length</name></expr></else></ternary><operator pos:start="11:59" pos:end="11:59">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:7">pkt</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:16">nb_nals</name></name> <operator pos:start="15:18" pos:end="15:18">=</operator> <literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="213:5">while <condition pos:start="17:11" pos:end="17:23">(<expr pos:start="17:12" pos:end="17:22"><name pos:start="17:12" pos:end="17:17">length</name> <operator pos:start="17:19" pos:end="17:20">&gt;=</operator> <literal type="number" pos:start="17:22" pos:end="17:22">4</literal></expr>)</condition> <block pos:start="17:25" pos:end="213:5">{<block_content pos:start="19:9" pos:end="211:27">

        <decl_stmt pos:start="19:9" pos:end="19:22"><decl pos:start="19:9" pos:end="19:21"><type pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:16">H2645NAL</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">nal</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:31"><decl pos:start="21:9" pos:end="21:30"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:26">extract_length</name> <init pos:start="21:28" pos:end="21:30">= <expr pos:start="21:30" pos:end="21:30"><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:36"><decl pos:start="23:9" pos:end="23:35"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:31">skip_trailing_zeros</name> <init pos:start="23:33" pos:end="23:35">= <expr pos:start="23:35" pos:end="23:35"><literal type="number" pos:start="23:35" pos:end="23:35">1</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="27:9" pos:end="41:11">/*

         * Only parse an AVC1 length field if one is expected at the current

         * buffer position. There are unfortunately streams with multiple

         * NAL units covered by the length field. Those NAL units are delimited

         * by Annex B start code prefixes. ff_h2645_extract_rbsp() detects it

         * correctly and consumes only the first NAL unit. The additional NAL

         * units are handled here in the Annex B parsing code.

         */</comment>

        <if_stmt pos:start="43:9" pos:end="123:9"><if pos:start="43:9" pos:end="73:9">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:15">buf</name> <operator pos:start="43:17" pos:end="43:18">==</operator> <name pos:start="43:20" pos:end="43:27">next_avc</name></expr>)</condition> <block pos:start="43:30" pos:end="73:9">{<block_content pos:start="45:13" pos:end="71:44">

            <decl_stmt pos:start="45:13" pos:end="45:18"><decl pos:start="45:13" pos:end="45:17"><type pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:15">int</name></type> <name pos:start="45:17" pos:end="45:17">i</name></decl>;</decl_stmt>

            <for pos:start="47:13" pos:end="49:64">for <control pos:start="47:17" pos:end="47:49">(<init pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:22"><name pos:start="47:18" pos:end="47:18">i</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:44"><expr pos:start="47:25" pos:end="47:43"><name pos:start="47:25" pos:end="47:25">i</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:43">nal_length_size</name></expr>;</condition> <incr pos:start="47:46" pos:end="47:48"><expr pos:start="47:46" pos:end="47:48"><name pos:start="47:46" pos:end="47:46">i</name><operator pos:start="47:47" pos:end="47:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:17" pos:end="49:64"><block_content pos:start="49:17" pos:end="49:64">

                <expr_stmt pos:start="49:17" pos:end="49:64"><expr pos:start="49:17" pos:end="49:63"><name pos:start="49:17" pos:end="49:30">extract_length</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <operator pos:start="49:34" pos:end="49:34">(</operator><name pos:start="49:35" pos:end="49:48">extract_length</name> <operator pos:start="49:50" pos:end="49:51">&lt;&lt;</operator> <literal type="number" pos:start="49:53" pos:end="49:53">8</literal><operator pos:start="49:54" pos:end="49:54">)</operator> <operator pos:start="49:56" pos:end="49:56">|</operator> <name pos:start="49:58" pos:end="49:63"><name pos:start="49:58" pos:end="49:60">buf</name><index pos:start="49:61" pos:end="49:63">[<expr pos:start="49:62" pos:end="49:62"><name pos:start="49:62" pos:end="49:62">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



            <if_stmt pos:start="53:13" pos:end="63:13"><if pos:start="53:13" pos:end="63:13">if <condition pos:start="53:16" pos:end="53:40">(<expr pos:start="53:17" pos:end="53:39"><name pos:start="53:17" pos:end="53:30">extract_length</name> <operator pos:start="53:32" pos:end="53:32">&gt;</operator> <name pos:start="53:34" pos:end="53:39">length</name></expr>)</condition> <block pos:start="53:42" pos:end="63:13">{<block_content pos:start="55:17" pos:end="61:43">

                <expr_stmt pos:start="55:17" pos:end="59:47"><expr pos:start="55:17" pos:end="59:46"><call pos:start="55:17" pos:end="59:46"><name pos:start="55:17" pos:end="55:22">av_log</name><argument_list pos:start="55:23" pos:end="59:46">(<argument pos:start="55:24" pos:end="55:29"><expr pos:start="55:24" pos:end="55:29"><name pos:start="55:24" pos:end="55:29">logctx</name></expr></argument>, <argument pos:start="55:32" pos:end="55:43"><expr pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:43">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="57:24" pos:end="57:59"><expr pos:start="57:24" pos:end="57:59"><literal type="string" pos:start="57:24" pos:end="57:59">"Invalid NAL unit size (%d &gt; %d).\n"</literal></expr></argument>,

                       <argument pos:start="59:24" pos:end="59:37"><expr pos:start="59:24" pos:end="59:37"><name pos:start="59:24" pos:end="59:37">extract_length</name></expr></argument>, <argument pos:start="59:40" pos:end="59:45"><expr pos:start="59:40" pos:end="59:45"><name pos:start="59:40" pos:end="59:45">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:43">return <expr pos:start="61:24" pos:end="61:42"><name pos:start="61:24" pos:end="61:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:15">buf</name>     <operator pos:start="65:21" pos:end="65:22">+=</operator> <name pos:start="65:24" pos:end="65:38">nal_length_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:39"><expr pos:start="67:13" pos:end="67:38"><name pos:start="67:13" pos:end="67:18">length</name>  <operator pos:start="67:21" pos:end="67:22">-=</operator> <name pos:start="67:24" pos:end="67:38">nal_length_size</name></expr>;</expr_stmt>

            <comment type="line" pos:start="69:13" pos:end="69:55">// keep track of the next AVC1 length field</comment>

            <expr_stmt pos:start="71:13" pos:end="71:44"><expr pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:20">next_avc</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:26">buf</name> <operator pos:start="71:28" pos:end="71:28">+</operator> <name pos:start="71:30" pos:end="71:43">extract_length</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="123:9">else <block pos:start="73:16" pos:end="123:9">{<block_content pos:start="83:13" pos:end="121:13">

            <comment type="block" pos:start="75:13" pos:end="81:15">/*

             * expected to return immediately except for streams with mixed

             * NAL unit coding

             */</comment>

            <decl_stmt pos:start="83:13" pos:end="83:64"><decl pos:start="83:13" pos:end="83:63"><type pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">int</name></type> <name pos:start="83:17" pos:end="83:25">buf_index</name> <init pos:start="83:27" pos:end="83:63">= <expr pos:start="83:29" pos:end="83:63"><call pos:start="83:29" pos:end="83:63"><name pos:start="83:29" pos:end="83:48">find_next_start_code</name><argument_list pos:start="83:49" pos:end="83:63">(<argument pos:start="83:50" pos:end="83:52"><expr pos:start="83:50" pos:end="83:52"><name pos:start="83:50" pos:end="83:52">buf</name></expr></argument>, <argument pos:start="83:55" pos:end="83:62"><expr pos:start="83:55" pos:end="83:62"><name pos:start="83:55" pos:end="83:62">next_avc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:32"><expr pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:15">buf</name>    <operator pos:start="87:20" pos:end="87:21">+=</operator> <name pos:start="87:23" pos:end="87:31">buf_index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:32"><expr pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:18">length</name> <operator pos:start="89:20" pos:end="89:21">-=</operator> <name pos:start="89:23" pos:end="89:31">buf_index</name></expr>;</expr_stmt>



            <comment type="block" pos:start="93:13" pos:end="99:15">/*

             * break if an AVC1 length field is expected at the current buffer

             * position

             */</comment>

            <if_stmt pos:start="101:13" pos:end="103:25"><if pos:start="101:13" pos:end="103:25">if <condition pos:start="101:16" pos:end="101:32">(<expr pos:start="101:17" pos:end="101:31"><name pos:start="101:17" pos:end="101:19">buf</name> <operator pos:start="101:21" pos:end="101:22">==</operator> <name pos:start="101:24" pos:end="101:31">next_avc</name></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:25"><block_content pos:start="103:17" pos:end="103:25">

                <continue pos:start="103:17" pos:end="103:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="107:13" pos:end="121:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:27">(<expr pos:start="107:17" pos:end="107:26"><name pos:start="107:17" pos:end="107:22">length</name> <operator pos:start="107:24" pos:end="107:24">&gt;</operator> <literal type="number" pos:start="107:26" pos:end="107:26">0</literal></expr>)</condition> <block pos:start="107:29" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:40">

                <expr_stmt pos:start="109:17" pos:end="109:40"><expr pos:start="109:17" pos:end="109:39"><name pos:start="109:17" pos:end="109:30">extract_length</name> <operator pos:start="109:32" pos:end="109:32">=</operator> <name pos:start="109:34" pos:end="109:39">length</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="111:15" pos:end="117:13">else if <condition pos:start="111:23" pos:end="111:41">(<expr pos:start="111:24" pos:end="111:40"><name pos:start="111:24" pos:end="111:35"><name pos:start="111:24" pos:end="111:26">pkt</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:35">nb_nals</name></name> <operator pos:start="111:37" pos:end="111:38">==</operator> <literal type="number" pos:start="111:40" pos:end="111:40">0</literal></expr>)</condition> <block pos:start="111:43" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:43">

                <expr_stmt pos:start="113:17" pos:end="113:68"><expr pos:start="113:17" pos:end="113:67"><call pos:start="113:17" pos:end="113:67"><name pos:start="113:17" pos:end="113:22">av_log</name><argument_list pos:start="113:23" pos:end="113:67">(<argument pos:start="113:24" pos:end="113:29"><expr pos:start="113:24" pos:end="113:29"><name pos:start="113:24" pos:end="113:29">logctx</name></expr></argument>, <argument pos:start="113:32" pos:end="113:43"><expr pos:start="113:32" pos:end="113:43"><name pos:start="113:32" pos:end="113:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:46" pos:end="113:66"><expr pos:start="113:46" pos:end="113:66"><literal type="string" pos:start="113:46" pos:end="113:66">"No NAL unit found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="115:17" pos:end="115:43">return <expr pos:start="115:24" pos:end="115:42"><name pos:start="115:24" pos:end="115:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if> <else pos:start="117:15" pos:end="121:13">else <block pos:start="117:20" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:22">

                <break pos:start="119:17" pos:end="119:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="127:9" pos:end="147:9"><if pos:start="127:9" pos:end="147:9">if <condition pos:start="127:12" pos:end="127:51">(<expr pos:start="127:13" pos:end="127:50"><name pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:15">pkt</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:31">nals_allocated</name></name> <operator pos:start="127:33" pos:end="127:33">&lt;</operator> <name pos:start="127:35" pos:end="127:46"><name pos:start="127:35" pos:end="127:37">pkt</name><operator pos:start="127:38" pos:end="127:39">-&gt;</operator><name pos:start="127:40" pos:end="127:46">nb_nals</name></name> <operator pos:start="127:48" pos:end="127:48">+</operator> <literal type="number" pos:start="127:50" pos:end="127:50">1</literal></expr>)</condition> <block pos:start="127:53" pos:end="147:9">{<block_content pos:start="129:13" pos:end="145:43">

            <decl_stmt pos:start="129:13" pos:end="129:51"><decl pos:start="129:13" pos:end="129:50"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:24">new_size</name> <init pos:start="129:26" pos:end="129:50">= <expr pos:start="129:28" pos:end="129:50"><name pos:start="129:28" pos:end="129:46"><name pos:start="129:28" pos:end="129:30">pkt</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:46">nals_allocated</name></name> <operator pos:start="129:48" pos:end="129:48">+</operator> <literal type="number" pos:start="129:50" pos:end="129:50">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="131:13" pos:end="131:80"><decl pos:start="131:13" pos:end="131:79"><type pos:start="131:13" pos:end="131:22"><name pos:start="131:13" pos:end="131:20">H2645NAL</name> <modifier pos:start="131:22" pos:end="131:22">*</modifier></type><name pos:start="131:23" pos:end="131:25">tmp</name> <init pos:start="131:27" pos:end="131:79">= <expr pos:start="131:29" pos:end="131:79"><call pos:start="131:29" pos:end="131:79"><name pos:start="131:29" pos:end="131:44">av_realloc_array</name><argument_list pos:start="131:45" pos:end="131:79">(<argument pos:start="131:46" pos:end="131:54"><expr pos:start="131:46" pos:end="131:54"><name pos:start="131:46" pos:end="131:54"><name pos:start="131:46" pos:end="131:48">pkt</name><operator pos:start="131:49" pos:end="131:50">-&gt;</operator><name pos:start="131:51" pos:end="131:54">nals</name></name></expr></argument>, <argument pos:start="131:57" pos:end="131:64"><expr pos:start="131:57" pos:end="131:64"><name pos:start="131:57" pos:end="131:64">new_size</name></expr></argument>, <argument pos:start="131:67" pos:end="131:78"><expr pos:start="131:67" pos:end="131:78"><sizeof pos:start="131:67" pos:end="131:78">sizeof<argument_list pos:start="131:73" pos:end="131:78">(<argument pos:start="131:74" pos:end="131:77"><expr pos:start="131:74" pos:end="131:77"><operator pos:start="131:74" pos:end="131:74">*</operator><name pos:start="131:75" pos:end="131:77">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="133:13" pos:end="135:39"><if pos:start="133:13" pos:end="135:39">if <condition pos:start="133:16" pos:end="133:21">(<expr pos:start="133:17" pos:end="133:20"><operator pos:start="133:17" pos:end="133:17">!</operator><name pos:start="133:18" pos:end="133:20">tmp</name></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:39"><block_content pos:start="135:17" pos:end="135:39">

                <return pos:start="135:17" pos:end="135:39">return <expr pos:start="135:24" pos:end="135:38"><call pos:start="135:24" pos:end="135:38"><name pos:start="135:24" pos:end="135:30">AVERROR</name><argument_list pos:start="135:31" pos:end="135:38">(<argument pos:start="135:32" pos:end="135:37"><expr pos:start="135:32" pos:end="135:37"><name pos:start="135:32" pos:end="135:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:28"><expr pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:21"><name pos:start="139:13" pos:end="139:15">pkt</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:21">nals</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:27">tmp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="143:68"><expr pos:start="141:13" pos:end="143:67"><call pos:start="141:13" pos:end="143:67"><name pos:start="141:13" pos:end="141:18">memset</name><argument_list pos:start="141:19" pos:end="143:67">(<argument pos:start="141:20" pos:end="141:50"><expr pos:start="141:20" pos:end="141:50"><name pos:start="141:20" pos:end="141:28"><name pos:start="141:20" pos:end="141:22">pkt</name><operator pos:start="141:23" pos:end="141:24">-&gt;</operator><name pos:start="141:25" pos:end="141:28">nals</name></name> <operator pos:start="141:30" pos:end="141:30">+</operator> <name pos:start="141:32" pos:end="141:50"><name pos:start="141:32" pos:end="141:34">pkt</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:50">nals_allocated</name></name></expr></argument>, <argument pos:start="141:53" pos:end="141:53"><expr pos:start="141:53" pos:end="141:53"><literal type="number" pos:start="141:53" pos:end="141:53">0</literal></expr></argument>,

                   <argument pos:start="143:20" pos:end="143:66"><expr pos:start="143:20" pos:end="143:66"><operator pos:start="143:20" pos:end="143:20">(</operator><name pos:start="143:21" pos:end="143:28">new_size</name> <operator pos:start="143:30" pos:end="143:30">-</operator> <name pos:start="143:32" pos:end="143:50"><name pos:start="143:32" pos:end="143:34">pkt</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:50">nals_allocated</name></name><operator pos:start="143:51" pos:end="143:51">)</operator> <operator pos:start="143:53" pos:end="143:53">*</operator> <sizeof pos:start="143:55" pos:end="143:66">sizeof<argument_list pos:start="143:61" pos:end="143:66">(<argument pos:start="143:62" pos:end="143:65"><expr pos:start="143:62" pos:end="143:65"><operator pos:start="143:62" pos:end="143:62">*</operator><name pos:start="143:63" pos:end="143:65">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:43"><expr pos:start="145:13" pos:end="145:42"><name pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:15">pkt</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:31">nals_allocated</name></name> <operator pos:start="145:33" pos:end="145:33">=</operator> <name pos:start="145:35" pos:end="145:42">new_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:11">nal</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <operator pos:start="149:15" pos:end="149:15">&amp;</operator><name pos:start="149:16" pos:end="149:40"><name pos:start="149:16" pos:end="149:18">pkt</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:24">nals</name><index pos:start="149:25" pos:end="149:40">[<expr pos:start="149:26" pos:end="149:39"><name pos:start="149:26" pos:end="149:37"><name pos:start="149:26" pos:end="149:28">pkt</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:37">nb_nals</name></name><operator pos:start="149:38" pos:end="149:39">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:67"><expr pos:start="153:9" pos:end="153:66"><name pos:start="153:9" pos:end="153:16">consumed</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <call pos:start="153:20" pos:end="153:66"><name pos:start="153:20" pos:end="153:40">ff_h2645_extract_rbsp</name><argument_list pos:start="153:41" pos:end="153:66">(<argument pos:start="153:42" pos:end="153:44"><expr pos:start="153:42" pos:end="153:44"><name pos:start="153:42" pos:end="153:44">buf</name></expr></argument>, <argument pos:start="153:47" pos:end="153:60"><expr pos:start="153:47" pos:end="153:60"><name pos:start="153:47" pos:end="153:60">extract_length</name></expr></argument>, <argument pos:start="153:63" pos:end="153:65"><expr pos:start="153:63" pos:end="153:65"><name pos:start="153:63" pos:end="153:65">nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="157:28"><if pos:start="155:9" pos:end="157:28">if <condition pos:start="155:12" pos:end="155:25">(<expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:20">consumed</name> <operator pos:start="155:22" pos:end="155:22">&lt;</operator> <literal type="number" pos:start="155:24" pos:end="155:24">0</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:28"><block_content pos:start="157:13" pos:end="157:28">

            <return pos:start="157:13" pos:end="157:28">return <expr pos:start="157:20" pos:end="157:27"><name pos:start="157:20" pos:end="157:27">consumed</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:34">/* see commit 3566042a0 */</comment>

        <if_stmt pos:start="163:9" pos:end="169:36"><if pos:start="163:9" pos:end="169:36">if <condition pos:start="163:12" pos:end="167:67">(<expr pos:start="163:13" pos:end="167:66"><name pos:start="163:13" pos:end="163:20">consumed</name> <operator pos:start="163:22" pos:end="163:22">&lt;</operator> <name pos:start="163:24" pos:end="163:29">length</name> <operator pos:start="163:31" pos:end="163:31">-</operator> <literal type="number" pos:start="163:33" pos:end="163:33">3</literal> <operator pos:start="163:35" pos:end="163:36">&amp;&amp;</operator>

            <name pos:start="165:13" pos:end="165:25"><name pos:start="165:13" pos:end="165:15">buf</name><index pos:start="165:16" pos:end="165:25">[<expr pos:start="165:17" pos:end="165:24"><name pos:start="165:17" pos:end="165:24">consumed</name></expr>]</index></name>     <operator pos:start="165:31" pos:end="165:32">==</operator> <literal type="number" pos:start="165:34" pos:end="165:37">0x00</literal> <operator pos:start="165:39" pos:end="165:40">&amp;&amp;</operator> <name pos:start="165:42" pos:end="165:58"><name pos:start="165:42" pos:end="165:44">buf</name><index pos:start="165:45" pos:end="165:58">[<expr pos:start="165:46" pos:end="165:57"><name pos:start="165:46" pos:end="165:53">consumed</name> <operator pos:start="165:55" pos:end="165:55">+</operator> <literal type="number" pos:start="165:57" pos:end="165:57">1</literal></expr>]</index></name> <operator pos:start="165:60" pos:end="165:61">==</operator> <literal type="number" pos:start="165:63" pos:end="165:66">0x00</literal> <operator pos:start="165:68" pos:end="165:69">&amp;&amp;</operator>

            <name pos:start="167:13" pos:end="167:29"><name pos:start="167:13" pos:end="167:15">buf</name><index pos:start="167:16" pos:end="167:29">[<expr pos:start="167:17" pos:end="167:28"><name pos:start="167:17" pos:end="167:24">consumed</name> <operator pos:start="167:26" pos:end="167:26">+</operator> <literal type="number" pos:start="167:28" pos:end="167:28">2</literal></expr>]</index></name> <operator pos:start="167:31" pos:end="167:32">==</operator> <literal type="number" pos:start="167:34" pos:end="167:37">0x01</literal> <operator pos:start="167:39" pos:end="167:40">&amp;&amp;</operator> <name pos:start="167:42" pos:end="167:58"><name pos:start="167:42" pos:end="167:44">buf</name><index pos:start="167:45" pos:end="167:58">[<expr pos:start="167:46" pos:end="167:57"><name pos:start="167:46" pos:end="167:53">consumed</name> <operator pos:start="167:55" pos:end="167:55">+</operator> <literal type="number" pos:start="167:57" pos:end="167:57">3</literal></expr>]</index></name> <operator pos:start="167:60" pos:end="167:61">==</operator> <literal type="number" pos:start="167:63" pos:end="167:66">0xE0</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:36"><block_content pos:start="169:13" pos:end="169:36">

            <expr_stmt pos:start="169:13" pos:end="169:36"><expr pos:start="169:13" pos:end="169:35"><name pos:start="169:13" pos:end="169:31">skip_trailing_zeros</name> <operator pos:start="169:33" pos:end="169:33">=</operator> <literal type="number" pos:start="169:35" pos:end="169:35">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:66"><expr pos:start="173:9" pos:end="173:65"><name pos:start="173:9" pos:end="173:22"><name pos:start="173:9" pos:end="173:11">nal</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:22">size_bits</name></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <call pos:start="173:26" pos:end="173:65"><name pos:start="173:26" pos:end="173:39">get_bit_length</name><argument_list pos:start="173:40" pos:end="173:65">(<argument pos:start="173:41" pos:end="173:43"><expr pos:start="173:41" pos:end="173:43"><name pos:start="173:41" pos:end="173:43">nal</name></expr></argument>, <argument pos:start="173:46" pos:end="173:64"><expr pos:start="173:46" pos:end="173:64"><name pos:start="173:46" pos:end="173:64">skip_trailing_zeros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:65"><expr pos:start="177:9" pos:end="177:64"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <call pos:start="177:15" pos:end="177:64"><name pos:start="177:15" pos:end="177:27">init_get_bits</name><argument_list pos:start="177:28" pos:end="177:64">(<argument pos:start="177:29" pos:end="177:36"><expr pos:start="177:29" pos:end="177:36"><operator pos:start="177:29" pos:end="177:29">&amp;</operator><name pos:start="177:30" pos:end="177:36"><name pos:start="177:30" pos:end="177:32">nal</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:36">gb</name></name></expr></argument>, <argument pos:start="177:39" pos:end="177:47"><expr pos:start="177:39" pos:end="177:47"><name pos:start="177:39" pos:end="177:47"><name pos:start="177:39" pos:end="177:41">nal</name><operator pos:start="177:42" pos:end="177:43">-&gt;</operator><name pos:start="177:44" pos:end="177:47">data</name></name></expr></argument>, <argument pos:start="177:50" pos:end="177:63"><expr pos:start="177:50" pos:end="177:63"><name pos:start="177:50" pos:end="177:63"><name pos:start="177:50" pos:end="177:52">nal</name><operator pos:start="177:53" pos:end="177:54">-&gt;</operator><name pos:start="177:55" pos:end="177:63">size_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="181:23"><if pos:start="179:9" pos:end="181:23">if <condition pos:start="179:12" pos:end="179:20">(<expr pos:start="179:13" pos:end="179:19"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">&lt;</operator> <literal type="number" pos:start="179:19" pos:end="179:19">0</literal></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:23"><block_content pos:start="181:13" pos:end="181:23">

            <return pos:start="181:13" pos:end="181:23">return <expr pos:start="181:20" pos:end="181:22"><name pos:start="181:20" pos:end="181:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="185:9" pos:end="191:53"><if pos:start="185:9" pos:end="187:53">if <condition pos:start="185:12" pos:end="185:41">(<expr pos:start="185:13" pos:end="185:40"><name pos:start="185:13" pos:end="185:20">codec_id</name> <operator pos:start="185:22" pos:end="185:23">==</operator> <name pos:start="185:25" pos:end="185:40">AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:53"><block_content pos:start="187:13" pos:end="187:53">

            <expr_stmt pos:start="187:13" pos:end="187:53"><expr pos:start="187:13" pos:end="187:52"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="187:52"><name pos:start="187:19" pos:end="187:39">hevc_parse_nal_header</name><argument_list pos:start="187:40" pos:end="187:52">(<argument pos:start="187:41" pos:end="187:43"><expr pos:start="187:41" pos:end="187:43"><name pos:start="187:41" pos:end="187:43">nal</name></expr></argument>, <argument pos:start="187:46" pos:end="187:51"><expr pos:start="187:46" pos:end="187:51"><name pos:start="187:46" pos:end="187:51">logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="189:9" pos:end="191:53">else<block type="pseudo" pos:start="191:13" pos:end="191:53"><block_content pos:start="191:13" pos:end="191:53">

            <expr_stmt pos:start="191:13" pos:end="191:53"><expr pos:start="191:13" pos:end="191:52"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <call pos:start="191:19" pos:end="191:52"><name pos:start="191:19" pos:end="191:39">h264_parse_nal_header</name><argument_list pos:start="191:40" pos:end="191:52">(<argument pos:start="191:41" pos:end="191:43"><expr pos:start="191:41" pos:end="191:43"><name pos:start="191:41" pos:end="191:43">nal</name></expr></argument>, <argument pos:start="191:46" pos:end="191:51"><expr pos:start="191:46" pos:end="191:51"><name pos:start="191:46" pos:end="191:51">logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="193:9" pos:end="205:9"><if pos:start="193:9" pos:end="205:9">if <condition pos:start="193:12" pos:end="193:21">(<expr pos:start="193:13" pos:end="193:20"><name pos:start="193:13" pos:end="193:15">ret</name> <operator pos:start="193:17" pos:end="193:18">&lt;=</operator> <literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr>)</condition> <block pos:start="193:23" pos:end="205:9">{<block_content pos:start="195:13" pos:end="203:27">

            <if_stmt pos:start="195:13" pos:end="201:13"><if pos:start="195:13" pos:end="201:13">if <condition pos:start="195:16" pos:end="195:24">(<expr pos:start="195:17" pos:end="195:23"><name pos:start="195:17" pos:end="195:19">ret</name> <operator pos:start="195:21" pos:end="195:21">&lt;</operator> <literal type="number" pos:start="195:23" pos:end="195:23">0</literal></expr>)</condition> <block pos:start="195:26" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:34">

                <expr_stmt pos:start="197:17" pos:end="199:34"><expr pos:start="197:17" pos:end="199:33"><call pos:start="197:17" pos:end="199:33"><name pos:start="197:17" pos:end="197:22">av_log</name><argument_list pos:start="197:23" pos:end="199:33">(<argument pos:start="197:24" pos:end="197:29"><expr pos:start="197:24" pos:end="197:29"><name pos:start="197:24" pos:end="197:29">logctx</name></expr></argument>, <argument pos:start="197:32" pos:end="197:43"><expr pos:start="197:32" pos:end="197:43"><name pos:start="197:32" pos:end="197:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:46" pos:end="197:79"><expr pos:start="197:46" pos:end="197:79"><literal type="string" pos:start="197:46" pos:end="197:79">"Invalid NAL unit %d, skipping.\n"</literal></expr></argument>,

                       <argument pos:start="199:24" pos:end="199:32"><expr pos:start="199:24" pos:end="199:32"><name pos:start="199:24" pos:end="199:32"><name pos:start="199:24" pos:end="199:26">nal</name><operator pos:start="199:27" pos:end="199:28">-&gt;</operator><name pos:start="199:29" pos:end="199:32">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:27"><expr pos:start="203:13" pos:end="203:26"><name pos:start="203:13" pos:end="203:24"><name pos:start="203:13" pos:end="203:15">pkt</name><operator pos:start="203:16" pos:end="203:17">-&gt;</operator><name pos:start="203:18" pos:end="203:24">nb_nals</name></name><operator pos:start="203:25" pos:end="203:26">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:27"><expr pos:start="209:9" pos:end="209:26"><name pos:start="209:9" pos:end="209:11">buf</name>    <operator pos:start="209:16" pos:end="209:17">+=</operator> <name pos:start="209:19" pos:end="209:26">consumed</name></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:27"><expr pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:14">length</name> <operator pos:start="211:16" pos:end="211:17">-=</operator> <name pos:start="211:19" pos:end="211:26">consumed</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="217:5" pos:end="217:13">return <expr pos:start="217:12" pos:end="217:12"><literal type="number" pos:start="217:12" pos:end="217:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
