<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22131.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:36">decode_alpha_block</name><parameter_list pos:start="1:37" pos:end="1:129">(<parameter pos:start="1:38" pos:end="1:56"><decl pos:start="1:38" pos:end="1:56"><type pos:start="1:38" pos:end="1:56"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:53">SHQContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:75"><decl pos:start="1:59" pos:end="1:75"><type pos:start="1:59" pos:end="1:75"><name pos:start="1:59" pos:end="1:71">GetBitContext</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:75">gb</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:99"><decl pos:start="1:78" pos:end="1:99"><type pos:start="1:78" pos:end="1:95"><name pos:start="1:78" pos:end="1:84">uint8_t</name></type> <name pos:start="1:86" pos:end="1:99"><name pos:start="1:86" pos:end="1:95">last_alpha</name><index pos:start="1:96" pos:end="1:99">[<expr pos:start="1:97" pos:end="1:98"><literal type="number" pos:start="1:97" pos:end="1:98">16</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:102" pos:end="1:114"><decl pos:start="1:102" pos:end="1:114"><type pos:start="1:102" pos:end="1:114"><name pos:start="1:102" pos:end="1:108">uint8_t</name> <modifier pos:start="1:110" pos:end="1:110">*</modifier></type><name pos:start="1:111" pos:end="1:114">dest</name></decl></parameter>, <parameter pos:start="1:117" pos:end="1:128"><decl pos:start="1:117" pos:end="1:128"><type pos:start="1:117" pos:end="1:128"><name pos:start="1:117" pos:end="1:119">int</name></type> <name pos:start="1:121" pos:end="1:128">linesize</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:22"><name pos:start="5:13" pos:end="5:17">block</name><index pos:start="5:18" pos:end="5:22">[<expr pos:start="5:19" pos:end="5:21"><literal type="number" pos:start="5:19" pos:end="5:21">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name> <init pos:start="7:11" pos:end="7:13">= <expr pos:start="7:13" pos:end="7:13"><literal type="number" pos:start="7:13" pos:end="7:13">0</literal></expr></init></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">x</name></decl>, <decl pos:start="7:19" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:19">y</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><call pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:10">memset</name><argument_list pos:start="11:11" pos:end="11:35">(<argument pos:start="11:12" pos:end="11:16"><expr pos:start="11:12" pos:end="11:16"><name pos:start="11:12" pos:end="11:16">block</name></expr></argument>, <argument pos:start="11:19" pos:end="11:19"><expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></argument>, <argument pos:start="11:22" pos:end="11:34"><expr pos:start="11:22" pos:end="11:34"><sizeof pos:start="11:22" pos:end="11:34">sizeof<argument_list pos:start="11:28" pos:end="11:34">(<argument pos:start="11:29" pos:end="11:33"><expr pos:start="11:29" pos:end="11:33"><name pos:start="11:29" pos:end="11:33">block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <block pos:start="15:5" pos:end="55:5">{<block_content pos:start="17:9" pos:end="53:29">

        <expr_stmt pos:start="17:9" pos:end="17:28"><expr pos:start="17:9" pos:end="17:27"><call pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:19">OPEN_READER</name><argument_list pos:start="17:20" pos:end="17:27">(<argument pos:start="17:21" pos:end="17:22"><expr pos:start="17:21" pos:end="17:22"><name pos:start="17:21" pos:end="17:22">re</name></expr></argument>, <argument pos:start="17:25" pos:end="17:26"><expr pos:start="17:25" pos:end="17:26"><name pos:start="17:25" pos:end="17:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="21:9" pos:end="49:9">for <control pos:start="21:13" pos:end="21:18">( <init pos:start="21:15" pos:end="21:15">;</init><condition pos:start="21:16" pos:end="21:16">;</condition> <incr/>)</control> <block pos:start="21:20" pos:end="49:9">{<block_content pos:start="23:13" pos:end="47:31">

            <decl_stmt pos:start="23:13" pos:end="23:27"><decl pos:start="23:13" pos:end="23:19"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:19">run</name></decl>, <decl pos:start="23:22" pos:end="23:26"><type ref="prev" pos:start="23:13" pos:end="23:15"/><name pos:start="23:22" pos:end="23:26">level</name></decl>;</decl_stmt>



            <expr_stmt pos:start="27:13" pos:end="27:36"><expr pos:start="27:13" pos:end="27:35"><call pos:start="27:13" pos:end="27:35"><name pos:start="27:13" pos:end="27:27">UPDATE_CACHE_LE</name><argument_list pos:start="27:28" pos:end="27:35">(<argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">re</name></expr></argument>, <argument pos:start="27:33" pos:end="27:34"><expr pos:start="27:33" pos:end="27:34"><name pos:start="27:33" pos:end="27:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:82"><expr pos:start="29:13" pos:end="29:81"><call pos:start="29:13" pos:end="29:81"><name pos:start="29:13" pos:end="29:19">GET_VLC</name><argument_list pos:start="29:20" pos:end="29:81">(<argument pos:start="29:21" pos:end="29:23"><expr pos:start="29:21" pos:end="29:23"><name pos:start="29:21" pos:end="29:23">run</name></expr></argument>, <argument pos:start="29:26" pos:end="29:27"><expr pos:start="29:26" pos:end="29:27"><name pos:start="29:26" pos:end="29:27">re</name></expr></argument>, <argument pos:start="29:30" pos:end="29:31"><expr pos:start="29:30" pos:end="29:31"><name pos:start="29:30" pos:end="29:31">gb</name></expr></argument>, <argument pos:start="29:34" pos:end="29:61"><expr pos:start="29:34" pos:end="29:61"><name pos:start="29:34" pos:end="29:61"><name pos:start="29:34" pos:end="29:55">ff_dc_alpha_run_vlc_le</name><operator pos:start="29:56" pos:end="29:56">.</operator><name pos:start="29:57" pos:end="29:61">table</name></name></expr></argument>, <argument pos:start="29:64" pos:end="29:77"><expr pos:start="29:64" pos:end="29:77"><name pos:start="29:64" pos:end="29:77">ALPHA_VLC_BITS</name></expr></argument>, <argument pos:start="29:80" pos:end="29:80"><expr pos:start="29:80" pos:end="29:80"><literal type="number" pos:start="29:80" pos:end="29:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="33:13" pos:end="33:34"><if pos:start="33:13" pos:end="33:34">if <condition pos:start="33:16" pos:end="33:27">(<expr pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:19">run</name> <operator pos:start="33:21" pos:end="33:22">==</operator> <literal type="number" pos:start="33:24" pos:end="33:26">128</literal></expr>)</condition><block type="pseudo" pos:start="33:29" pos:end="33:34"><block_content pos:start="33:29" pos:end="33:34"> <break pos:start="33:29" pos:end="33:34">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:21"><expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:13">i</name> <operator pos:start="35:15" pos:end="35:16">+=</operator> <name pos:start="35:18" pos:end="35:20">run</name></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="39:43"><if pos:start="37:13" pos:end="39:43">if <condition pos:start="37:16" pos:end="37:25">(<expr pos:start="37:17" pos:end="37:24"><name pos:start="37:17" pos:end="37:17">i</name> <operator pos:start="37:19" pos:end="37:20">&gt;=</operator> <literal type="number" pos:start="37:22" pos:end="37:24">128</literal></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:43"><block_content pos:start="39:17" pos:end="39:43">

                <return pos:start="39:17" pos:end="39:43">return <expr pos:start="39:24" pos:end="39:42"><name pos:start="39:24" pos:end="39:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:36"><expr pos:start="43:13" pos:end="43:35"><call pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:27">UPDATE_CACHE_LE</name><argument_list pos:start="43:28" pos:end="43:35">(<argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><name pos:start="43:29" pos:end="43:30">re</name></expr></argument>, <argument pos:start="43:33" pos:end="43:34"><expr pos:start="43:33" pos:end="43:34"><name pos:start="43:33" pos:end="43:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:86"><expr pos:start="45:13" pos:end="45:85"><call pos:start="45:13" pos:end="45:85"><name pos:start="45:13" pos:end="45:19">GET_VLC</name><argument_list pos:start="45:20" pos:end="45:85">(<argument pos:start="45:21" pos:end="45:25"><expr pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:25">level</name></expr></argument>, <argument pos:start="45:28" pos:end="45:29"><expr pos:start="45:28" pos:end="45:29"><name pos:start="45:28" pos:end="45:29">re</name></expr></argument>, <argument pos:start="45:32" pos:end="45:33"><expr pos:start="45:32" pos:end="45:33"><name pos:start="45:32" pos:end="45:33">gb</name></expr></argument>, <argument pos:start="45:36" pos:end="45:65"><expr pos:start="45:36" pos:end="45:65"><name pos:start="45:36" pos:end="45:65"><name pos:start="45:36" pos:end="45:59">ff_dc_alpha_level_vlc_le</name><operator pos:start="45:60" pos:end="45:60">.</operator><name pos:start="45:61" pos:end="45:65">table</name></name></expr></argument>, <argument pos:start="45:68" pos:end="45:81"><expr pos:start="45:68" pos:end="45:81"><name pos:start="45:68" pos:end="45:81">ALPHA_VLC_BITS</name></expr></argument>, <argument pos:start="45:84" pos:end="45:84"><expr pos:start="45:84" pos:end="45:84"><literal type="number" pos:start="45:84" pos:end="45:84">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:31"><expr pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:17">block</name><index pos:start="47:18" pos:end="47:22">[<expr pos:start="47:19" pos:end="47:21"><name pos:start="47:19" pos:end="47:19">i</name><operator pos:start="47:20" pos:end="47:21">++</operator></expr>]</index></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:30">level</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><call pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:20">CLOSE_READER</name><argument_list pos:start="53:21" pos:end="53:28">(<argument pos:start="53:22" pos:end="53:23"><expr pos:start="53:22" pos:end="53:23"><name pos:start="53:22" pos:end="53:23">re</name></expr></argument>, <argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <for pos:start="59:5" pos:end="71:5">for <control pos:start="59:9" pos:end="59:27">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">y</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:21"><name pos:start="59:17" pos:end="59:17">y</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <literal type="number" pos:start="59:21" pos:end="59:21">8</literal></expr>;</condition> <incr pos:start="59:24" pos:end="59:26"><expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:24">y</name><operator pos:start="59:25" pos:end="59:26">++</operator></expr></incr>)</control> <block pos:start="59:29" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:25">

        <for pos:start="61:9" pos:end="65:9">for <control pos:start="61:13" pos:end="61:32">(<init pos:start="61:14" pos:end="61:19"><expr pos:start="61:14" pos:end="61:18"><name pos:start="61:14" pos:end="61:14">x</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>;</init> <condition pos:start="61:21" pos:end="61:27"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:21">x</name> <operator pos:start="61:23" pos:end="61:23">&lt;</operator> <literal type="number" pos:start="61:25" pos:end="61:26">16</literal></expr>;</condition> <incr pos:start="61:29" pos:end="61:31"><expr pos:start="61:29" pos:end="61:31"><name pos:start="61:29" pos:end="61:29">x</name><operator pos:start="61:30" pos:end="61:31">++</operator></expr></incr>)</control> <block pos:start="61:34" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:47">

            <expr_stmt pos:start="63:13" pos:end="63:47"><expr pos:start="63:13" pos:end="63:46"><name pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:22">last_alpha</name><index pos:start="63:23" pos:end="63:25">[<expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">x</name></expr>]</index></name> <operator pos:start="63:27" pos:end="63:28">-=</operator> <name pos:start="63:30" pos:end="63:46"><name pos:start="63:30" pos:end="63:34">block</name><index pos:start="63:35" pos:end="63:46">[<expr pos:start="63:36" pos:end="63:45"><name pos:start="63:36" pos:end="63:36">y</name> <operator pos:start="63:38" pos:end="63:38">*</operator> <literal type="number" pos:start="63:40" pos:end="63:43">16</literal> <operator pos:start="63:43" pos:end="63:43">+</operator> <name pos:start="63:45" pos:end="63:45">x</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><call pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:14">memcpy</name><argument_list pos:start="67:15" pos:end="67:36">(<argument pos:start="67:16" pos:end="67:19"><expr pos:start="67:16" pos:end="67:19"><name pos:start="67:16" pos:end="67:19">dest</name></expr></argument>, <argument pos:start="67:22" pos:end="67:31"><expr pos:start="67:22" pos:end="67:31"><name pos:start="67:22" pos:end="67:31">last_alpha</name></expr></argument>, <argument pos:start="67:34" pos:end="67:35"><expr pos:start="67:34" pos:end="67:35"><literal type="number" pos:start="67:34" pos:end="67:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:25"><expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:12">dest</name> <operator pos:start="69:14" pos:end="69:15">+=</operator> <name pos:start="69:17" pos:end="69:24">linesize</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
