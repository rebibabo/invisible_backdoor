<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7379.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">dmg_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="247:1">{<block_content pos:start="7:5" pos:end="245:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVDMGState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">DmgHeaderState</name></type> <name pos:start="9:20" pos:end="9:21">ds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:29">rsrc_fork_offset</name></decl>, <decl pos:start="11:32" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:32" pos:end="11:47">rsrc_fork_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:48"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:29">plist_xml_offset</name></decl>, <decl pos:start="13:32" pos:end="13:47"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:32" pos:end="13:47">plist_xml_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:44"><expr pos:start="21:5" pos:end="23:43"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:6">bs</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:12">file</name></name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="23:43"><name pos:start="21:16" pos:end="21:30">bdrv_open_child</name><argument_list pos:start="21:31" pos:end="23:43">(<argument pos:start="21:32" pos:end="21:35"><expr pos:start="21:32" pos:end="21:35"><name pos:start="21:32" pos:end="21:35">NULL</name></expr></argument>, <argument pos:start="21:38" pos:end="21:44"><expr pos:start="21:38" pos:end="21:44"><name pos:start="21:38" pos:end="21:44">options</name></expr></argument>, <argument pos:start="21:47" pos:end="21:52"><expr pos:start="21:47" pos:end="21:52"><literal type="string" pos:start="21:47" pos:end="21:52">"file"</literal></expr></argument>, <argument pos:start="21:55" pos:end="21:56"><expr pos:start="21:55" pos:end="21:56"><name pos:start="21:55" pos:end="21:56">bs</name></expr></argument>, <argument pos:start="21:59" pos:end="21:69"><expr pos:start="21:59" pos:end="21:69"><operator pos:start="21:59" pos:end="21:59">&amp;</operator><name pos:start="21:60" pos:end="21:69">child_file</name></expr></argument>,

                               <argument pos:start="23:32" pos:end="23:36"><expr pos:start="23:32" pos:end="23:36"><name pos:start="23:32" pos:end="23:36">false</name></expr></argument>, <argument pos:start="23:39" pos:end="23:42"><expr pos:start="23:39" pos:end="23:42"><name pos:start="23:39" pos:end="23:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:17"><name pos:start="25:10" pos:end="25:11">bs</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:17">file</name></name></expr>)</condition> <block pos:start="25:20" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:23">

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><call pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:25">block_module_load_one</name><argument_list pos:start="33:26" pos:end="33:36">(<argument pos:start="33:27" pos:end="33:35"><expr pos:start="33:27" pos:end="33:35"><literal type="string" pos:start="33:27" pos:end="33:35">"dmg-bz2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:6">bs</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:17">read_only</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:24">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:20"><expr pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:15">n_chunks</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:66"><expr pos:start="41:5" pos:end="41:65"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:14">offsets</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:27"><name pos:start="41:18" pos:end="41:18">s</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:27">lengths</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <name pos:start="41:31" pos:end="41:40"><name pos:start="41:31" pos:end="41:31">s</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:40">sectors</name></name> <operator pos:start="41:42" pos:end="41:42">=</operator> <name pos:start="41:44" pos:end="41:58"><name pos:start="41:44" pos:end="41:44">s</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:58">sectorcounts</name></name> <operator pos:start="41:60" pos:end="41:60">=</operator> <name pos:start="41:62" pos:end="41:65">NULL</name></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:79">/* used by dmg_read_mish_block to keep track of the current I/O position */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:6">ds</name><operator pos:start="45:7" pos:end="45:7">.</operator><name pos:start="45:8" pos:end="45:23">data_fork_offset</name></name> <operator pos:start="45:25" pos:end="45:25">=</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:6">ds</name><operator pos:start="47:7" pos:end="47:7">.</operator><name pos:start="47:8" pos:end="47:26">max_compressed_size</name></name> <operator pos:start="47:28" pos:end="47:28">=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:6">ds</name><operator pos:start="49:7" pos:end="49:7">.</operator><name pos:start="49:8" pos:end="49:28">max_sectors_per_chunk</name></name> <operator pos:start="49:30" pos:end="49:30">=</operator> <literal type="number" pos:start="49:32" pos:end="49:32">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:33">/* locate the UDIF trailer */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:50"><expr pos:start="55:5" pos:end="55:49"><name pos:start="55:5" pos:end="55:10">offset</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:49"><name pos:start="55:14" pos:end="55:33">dmg_find_koly_offset</name><argument_list pos:start="55:34" pos:end="55:49">(<argument pos:start="55:35" pos:end="55:42"><expr pos:start="55:35" pos:end="55:42"><name pos:start="55:35" pos:end="55:42"><name pos:start="55:35" pos:end="55:36">bs</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:42">file</name></name></expr></argument>, <argument pos:start="55:45" pos:end="55:48"><expr pos:start="55:45" pos:end="55:48"><name pos:start="55:45" pos:end="55:48">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:19">(<expr pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:14">offset</name> <operator pos:start="57:16" pos:end="57:16">&lt;</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>)</condition> <block pos:start="57:21" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:20">offset</name></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:18">goto <name pos:start="61:14" pos:end="61:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:46">/* offset of data fork (DataForkOffset) */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:63"><expr pos:start="69:5" pos:end="69:62"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:62"><name pos:start="69:11" pos:end="69:21">read_uint64</name><argument_list pos:start="69:22" pos:end="69:62">(<argument pos:start="69:23" pos:end="69:24"><expr pos:start="69:23" pos:end="69:24"><name pos:start="69:23" pos:end="69:24">bs</name></expr></argument>, <argument pos:start="69:27" pos:end="69:39"><expr pos:start="69:27" pos:end="69:39"><name pos:start="69:27" pos:end="69:32">offset</name> <operator pos:start="69:34" pos:end="69:34">+</operator> <literal type="number" pos:start="69:36" pos:end="69:39">0x18</literal></expr></argument>, <argument pos:start="69:42" pos:end="69:61"><expr pos:start="69:42" pos:end="69:61"><operator pos:start="69:42" pos:end="69:42">&amp;</operator><name pos:start="69:43" pos:end="69:61"><name pos:start="69:43" pos:end="69:44">ds</name><operator pos:start="69:45" pos:end="69:45">.</operator><name pos:start="69:46" pos:end="69:61">data_fork_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:16">(<expr pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <literal type="number" pos:start="71:15" pos:end="71:15">0</literal></expr>)</condition> <block pos:start="71:18" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:18">

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="81:5">else if <condition pos:start="75:15" pos:end="75:44">(<expr pos:start="75:16" pos:end="75:43"><name pos:start="75:16" pos:end="75:34"><name pos:start="75:16" pos:end="75:17">ds</name><operator pos:start="75:18" pos:end="75:18">.</operator><name pos:start="75:19" pos:end="75:34">data_fork_offset</name></name> <operator pos:start="75:36" pos:end="75:36">&gt;</operator> <name pos:start="75:38" pos:end="75:43">offset</name></expr>)</condition> <block pos:start="75:46" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <operator pos:start="77:15" pos:end="77:15">-</operator><name pos:start="77:16" pos:end="77:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:50">/* offset of resource fork (RsrcForkOffset) */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:60"><expr pos:start="87:5" pos:end="87:59"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:59"><name pos:start="87:11" pos:end="87:21">read_uint64</name><argument_list pos:start="87:22" pos:end="87:59">(<argument pos:start="87:23" pos:end="87:24"><expr pos:start="87:23" pos:end="87:24"><name pos:start="87:23" pos:end="87:24">bs</name></expr></argument>, <argument pos:start="87:27" pos:end="87:39"><expr pos:start="87:27" pos:end="87:39"><name pos:start="87:27" pos:end="87:32">offset</name> <operator pos:start="87:34" pos:end="87:34">+</operator> <literal type="number" pos:start="87:36" pos:end="87:39">0x28</literal></expr></argument>, <argument pos:start="87:42" pos:end="87:58"><expr pos:start="87:42" pos:end="87:58"><operator pos:start="87:42" pos:end="87:42">&amp;</operator><name pos:start="87:43" pos:end="87:58">rsrc_fork_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:18">

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:7">ret</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:59"><name pos:start="95:11" pos:end="95:21">read_uint64</name><argument_list pos:start="95:22" pos:end="95:59">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">bs</name></expr></argument>, <argument pos:start="95:27" pos:end="95:39"><expr pos:start="95:27" pos:end="95:39"><name pos:start="95:27" pos:end="95:32">offset</name> <operator pos:start="95:34" pos:end="95:34">+</operator> <literal type="number" pos:start="95:36" pos:end="95:39">0x30</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:58"><expr pos:start="95:42" pos:end="95:58"><operator pos:start="95:42" pos:end="95:42">&amp;</operator><name pos:start="95:43" pos:end="95:58">rsrc_fork_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">&lt;</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>)</condition> <block pos:start="97:18" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:18">

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="111:5">if <condition pos:start="103:8" pos:end="105:53">(<expr pos:start="103:9" pos:end="105:52"><name pos:start="103:9" pos:end="103:24">rsrc_fork_offset</name> <operator pos:start="103:26" pos:end="103:27">&gt;=</operator> <name pos:start="103:29" pos:end="103:34">offset</name> <operator pos:start="103:36" pos:end="103:37">||</operator>

        <name pos:start="105:9" pos:end="105:24">rsrc_fork_length</name> <operator pos:start="105:26" pos:end="105:26">&gt;</operator> <name pos:start="105:28" pos:end="105:33">offset</name> <operator pos:start="105:35" pos:end="105:35">-</operator> <name pos:start="105:37" pos:end="105:52">rsrc_fork_offset</name></expr>)</condition> <block pos:start="105:55" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:18">

        <expr_stmt pos:start="107:9" pos:end="107:22"><expr pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <operator pos:start="107:15" pos:end="107:15">-</operator><name pos:start="107:16" pos:end="107:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="113:5" pos:end="113:45">/* offset of property list (XMLOffset) */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:60"><expr pos:start="115:5" pos:end="115:59"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:59"><name pos:start="115:11" pos:end="115:21">read_uint64</name><argument_list pos:start="115:22" pos:end="115:59">(<argument pos:start="115:23" pos:end="115:24"><expr pos:start="115:23" pos:end="115:24"><name pos:start="115:23" pos:end="115:24">bs</name></expr></argument>, <argument pos:start="115:27" pos:end="115:39"><expr pos:start="115:27" pos:end="115:39"><name pos:start="115:27" pos:end="115:32">offset</name> <operator pos:start="115:34" pos:end="115:34">+</operator> <literal type="number" pos:start="115:36" pos:end="115:39">0xd8</literal></expr></argument>, <argument pos:start="115:42" pos:end="115:58"><expr pos:start="115:42" pos:end="115:58"><operator pos:start="115:42" pos:end="115:42">&amp;</operator><name pos:start="115:43" pos:end="115:58">plist_xml_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">&lt;</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>)</condition> <block pos:start="117:18" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:18">

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:60"><expr pos:start="123:5" pos:end="123:59"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:59"><name pos:start="123:11" pos:end="123:21">read_uint64</name><argument_list pos:start="123:22" pos:end="123:59">(<argument pos:start="123:23" pos:end="123:24"><expr pos:start="123:23" pos:end="123:24"><name pos:start="123:23" pos:end="123:24">bs</name></expr></argument>, <argument pos:start="123:27" pos:end="123:39"><expr pos:start="123:27" pos:end="123:39"><name pos:start="123:27" pos:end="123:32">offset</name> <operator pos:start="123:34" pos:end="123:34">+</operator> <literal type="number" pos:start="123:36" pos:end="123:39">0xe0</literal></expr></argument>, <argument pos:start="123:42" pos:end="123:58"><expr pos:start="123:42" pos:end="123:58"><operator pos:start="123:42" pos:end="123:42">&amp;</operator><name pos:start="123:43" pos:end="123:58">plist_xml_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:16">(<expr pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">&lt;</operator> <literal type="number" pos:start="125:15" pos:end="125:15">0</literal></expr>)</condition> <block pos:start="125:18" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:18">

        <goto pos:start="127:9" pos:end="127:18">goto <name pos:start="127:14" pos:end="127:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="133:53">(<expr pos:start="131:9" pos:end="133:52"><name pos:start="131:9" pos:end="131:24">plist_xml_offset</name> <operator pos:start="131:26" pos:end="131:27">&gt;=</operator> <name pos:start="131:29" pos:end="131:34">offset</name> <operator pos:start="131:36" pos:end="131:37">||</operator>

        <name pos:start="133:9" pos:end="133:24">plist_xml_length</name> <operator pos:start="133:26" pos:end="133:26">&gt;</operator> <name pos:start="133:28" pos:end="133:33">offset</name> <operator pos:start="133:35" pos:end="133:35">-</operator> <name pos:start="133:37" pos:end="133:52">plist_xml_offset</name></expr>)</condition> <block pos:start="133:55" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:18">

        <expr_stmt pos:start="135:9" pos:end="135:22"><expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <operator pos:start="135:15" pos:end="135:15">-</operator><name pos:start="135:16" pos:end="135:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:18">goto <name pos:start="137:14" pos:end="137:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:74"><expr pos:start="141:5" pos:end="141:73"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:73"><name pos:start="141:11" pos:end="141:21">read_uint64</name><argument_list pos:start="141:22" pos:end="141:73">(<argument pos:start="141:23" pos:end="141:24"><expr pos:start="141:23" pos:end="141:24"><name pos:start="141:23" pos:end="141:24">bs</name></expr></argument>, <argument pos:start="141:27" pos:end="141:40"><expr pos:start="141:27" pos:end="141:40"><name pos:start="141:27" pos:end="141:32">offset</name> <operator pos:start="141:34" pos:end="141:34">+</operator> <literal type="number" pos:start="141:36" pos:end="141:40">0x1ec</literal></expr></argument>, <argument pos:start="141:43" pos:end="141:72"><expr pos:start="141:43" pos:end="141:72"><operator pos:start="141:43" pos:end="141:43">(</operator><name pos:start="141:44" pos:end="141:51">uint64_t</name> <operator pos:start="141:53" pos:end="141:53">*</operator><operator pos:start="141:54" pos:end="141:54">)</operator><operator pos:start="141:55" pos:end="141:55">&amp;</operator><name pos:start="141:56" pos:end="141:72"><name pos:start="141:56" pos:end="141:57">bs</name><operator pos:start="141:58" pos:end="141:59">-&gt;</operator><name pos:start="141:60" pos:end="141:72">total_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition> <block pos:start="143:18" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:18">

        <goto pos:start="145:9" pos:end="145:18">goto <name pos:start="145:14" pos:end="145:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="149:5" pos:end="155:5"><if pos:start="149:5" pos:end="155:5">if <condition pos:start="149:8" pos:end="149:30">(<expr pos:start="149:9" pos:end="149:29"><name pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:10">bs</name><operator pos:start="149:11" pos:end="149:12">-&gt;</operator><name pos:start="149:13" pos:end="149:25">total_sectors</name></name> <operator pos:start="149:27" pos:end="149:27">&lt;</operator> <literal type="number" pos:start="149:29" pos:end="149:29">0</literal></expr>)</condition> <block pos:start="149:32" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:18">

        <expr_stmt pos:start="151:9" pos:end="151:22"><expr pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <operator pos:start="151:15" pos:end="151:15">-</operator><name pos:start="151:16" pos:end="151:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="153:9" pos:end="153:18">goto <name pos:start="153:14" pos:end="153:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="157:5" pos:end="185:5"><if pos:start="157:5" pos:end="169:5">if <condition pos:start="157:8" pos:end="157:30">(<expr pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:24">rsrc_fork_length</name> <operator pos:start="157:26" pos:end="157:27">!=</operator> <literal type="number" pos:start="157:29" pos:end="157:29">0</literal></expr>)</condition> <block pos:start="157:32" pos:end="169:5">{<block_content pos:start="159:9" pos:end="167:9">

        <expr_stmt pos:start="159:9" pos:end="161:73"><expr pos:start="159:9" pos:end="161:72"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="161:72"><name pos:start="159:15" pos:end="159:36">dmg_read_resource_fork</name><argument_list pos:start="159:37" pos:end="161:72">(<argument pos:start="159:38" pos:end="159:39"><expr pos:start="159:38" pos:end="159:39"><name pos:start="159:38" pos:end="159:39">bs</name></expr></argument>, <argument pos:start="159:42" pos:end="159:44"><expr pos:start="159:42" pos:end="159:44"><operator pos:start="159:42" pos:end="159:42">&amp;</operator><name pos:start="159:43" pos:end="159:44">ds</name></expr></argument>,

                                     <argument pos:start="161:38" pos:end="161:53"><expr pos:start="161:38" pos:end="161:53"><name pos:start="161:38" pos:end="161:53">rsrc_fork_offset</name></expr></argument>, <argument pos:start="161:56" pos:end="161:71"><expr pos:start="161:56" pos:end="161:71"><name pos:start="161:56" pos:end="161:71">rsrc_fork_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="167:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:20">(<expr pos:start="163:13" pos:end="163:19"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">&lt;</operator> <literal type="number" pos:start="163:19" pos:end="163:19">0</literal></expr>)</condition> <block pos:start="163:22" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:22">

            <goto pos:start="165:13" pos:end="165:22">goto <name pos:start="165:18" pos:end="165:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="169:7" pos:end="179:5">else if <condition pos:start="169:15" pos:end="169:37">(<expr pos:start="169:16" pos:end="169:36"><name pos:start="169:16" pos:end="169:31">plist_xml_length</name> <operator pos:start="169:33" pos:end="169:34">!=</operator> <literal type="number" pos:start="169:36" pos:end="169:36">0</literal></expr>)</condition> <block pos:start="169:39" pos:end="179:5">{<block_content pos:start="171:9" pos:end="177:9">

        <expr_stmt pos:start="171:9" pos:end="171:78"><expr pos:start="171:9" pos:end="171:77"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:77"><name pos:start="171:15" pos:end="171:32">dmg_read_plist_xml</name><argument_list pos:start="171:33" pos:end="171:77">(<argument pos:start="171:34" pos:end="171:35"><expr pos:start="171:34" pos:end="171:35"><name pos:start="171:34" pos:end="171:35">bs</name></expr></argument>, <argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><operator pos:start="171:38" pos:end="171:38">&amp;</operator><name pos:start="171:39" pos:end="171:40">ds</name></expr></argument>, <argument pos:start="171:43" pos:end="171:58"><expr pos:start="171:43" pos:end="171:58"><name pos:start="171:43" pos:end="171:58">plist_xml_offset</name></expr></argument>, <argument pos:start="171:61" pos:end="171:76"><expr pos:start="171:61" pos:end="171:76"><name pos:start="171:61" pos:end="171:76">plist_xml_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="177:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:20">(<expr pos:start="173:13" pos:end="173:19"><name pos:start="173:13" pos:end="173:15">ret</name> <operator pos:start="173:17" pos:end="173:17">&lt;</operator> <literal type="number" pos:start="173:19" pos:end="173:19">0</literal></expr>)</condition> <block pos:start="173:22" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:22">

            <goto pos:start="175:13" pos:end="175:22">goto <name pos:start="175:18" pos:end="175:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="185:5">else <block pos:start="179:12" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:18">

        <expr_stmt pos:start="181:9" pos:end="181:22"><expr pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">-</operator><name pos:start="181:16" pos:end="181:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:18">goto <name pos:start="183:14" pos:end="183:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:32">/* initialize zlib engine */</comment>

    <expr_stmt pos:start="191:5" pos:end="193:74"><expr pos:start="191:5" pos:end="193:73"><name pos:start="191:5" pos:end="191:23"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:23">compressed_chunk</name></name> <operator pos:start="191:25" pos:end="191:25">=</operator> <call pos:start="191:27" pos:end="193:73"><name pos:start="191:27" pos:end="191:45">qemu_try_blockalign</name><argument_list pos:start="191:46" pos:end="193:73">(<argument pos:start="191:47" pos:end="191:58"><expr pos:start="191:47" pos:end="191:58"><name pos:start="191:47" pos:end="191:58"><name pos:start="191:47" pos:end="191:48">bs</name><operator pos:start="191:49" pos:end="191:50">-&gt;</operator><name pos:start="191:51" pos:end="191:54">file</name><operator pos:start="191:55" pos:end="191:56">-&gt;</operator><name pos:start="191:57" pos:end="191:58">bs</name></name></expr></argument>,

                                              <argument pos:start="193:47" pos:end="193:72"><expr pos:start="193:47" pos:end="193:72"><name pos:start="193:47" pos:end="193:68"><name pos:start="193:47" pos:end="193:48">ds</name><operator pos:start="193:49" pos:end="193:49">.</operator><name pos:start="193:50" pos:end="193:68">max_compressed_size</name></name> <operator pos:start="193:70" pos:end="193:70">+</operator> <literal type="number" pos:start="193:72" pos:end="193:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="197:80"><expr pos:start="195:5" pos:end="197:79"><name pos:start="195:5" pos:end="195:25"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:25">uncompressed_chunk</name></name> <operator pos:start="195:27" pos:end="195:27">=</operator> <call pos:start="195:29" pos:end="197:79"><name pos:start="195:29" pos:end="195:47">qemu_try_blockalign</name><argument_list pos:start="195:48" pos:end="197:79">(<argument pos:start="195:49" pos:end="195:60"><expr pos:start="195:49" pos:end="195:60"><name pos:start="195:49" pos:end="195:60"><name pos:start="195:49" pos:end="195:50">bs</name><operator pos:start="195:51" pos:end="195:52">-&gt;</operator><name pos:start="195:53" pos:end="195:56">file</name><operator pos:start="195:57" pos:end="195:58">-&gt;</operator><name pos:start="195:59" pos:end="195:60">bs</name></name></expr></argument>,

                                                <argument pos:start="197:49" pos:end="197:78"><expr pos:start="197:49" pos:end="197:78"><literal type="number" pos:start="197:49" pos:end="197:51">512</literal> <operator pos:start="197:53" pos:end="197:53">*</operator> <name pos:start="197:55" pos:end="197:78"><name pos:start="197:55" pos:end="197:56">ds</name><operator pos:start="197:57" pos:end="197:57">.</operator><name pos:start="197:58" pos:end="197:78">max_sectors_per_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:69">(<expr pos:start="199:9" pos:end="199:68"><name pos:start="199:9" pos:end="199:27"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:27">compressed_chunk</name></name> <operator pos:start="199:29" pos:end="199:30">==</operator> <name pos:start="199:32" pos:end="199:35">NULL</name> <operator pos:start="199:37" pos:end="199:38">||</operator> <name pos:start="199:40" pos:end="199:60"><name pos:start="199:40" pos:end="199:40">s</name><operator pos:start="199:41" pos:end="199:42">-&gt;</operator><name pos:start="199:43" pos:end="199:60">uncompressed_chunk</name></name> <operator pos:start="199:62" pos:end="199:63">==</operator> <name pos:start="199:65" pos:end="199:68">NULL</name></expr>)</condition> <block pos:start="199:71" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:18">

        <expr_stmt pos:start="201:9" pos:end="201:22"><expr pos:start="201:9" pos:end="201:21"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <operator pos:start="201:15" pos:end="201:15">-</operator><name pos:start="201:16" pos:end="201:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="203:9" pos:end="203:18">goto <name pos:start="203:14" pos:end="203:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="215:5"><if pos:start="209:5" pos:end="215:5">if <condition pos:start="209:8" pos:end="209:41">(<expr pos:start="209:9" pos:end="209:40"><call pos:start="209:9" pos:end="209:32"><name pos:start="209:9" pos:end="209:19">inflateInit</name><argument_list pos:start="209:20" pos:end="209:32">(<argument pos:start="209:21" pos:end="209:31"><expr pos:start="209:21" pos:end="209:31"><operator pos:start="209:21" pos:end="209:21">&amp;</operator><name pos:start="209:22" pos:end="209:31"><name pos:start="209:22" pos:end="209:22">s</name><operator pos:start="209:23" pos:end="209:24">-&gt;</operator><name pos:start="209:25" pos:end="209:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="209:34" pos:end="209:35">!=</operator> <name pos:start="209:37" pos:end="209:40">Z_OK</name></expr>)</condition> <block pos:start="209:43" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:18">

        <expr_stmt pos:start="211:9" pos:end="211:22"><expr pos:start="211:9" pos:end="211:21"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <operator pos:start="211:15" pos:end="211:15">-</operator><name pos:start="211:16" pos:end="211:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="213:9" pos:end="213:18">goto <name pos:start="213:14" pos:end="213:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:35"><expr pos:start="219:5" pos:end="219:34"><name pos:start="219:5" pos:end="219:20"><name pos:start="219:5" pos:end="219:5">s</name><operator pos:start="219:6" pos:end="219:7">-&gt;</operator><name pos:start="219:8" pos:end="219:20">current_chunk</name></name> <operator pos:start="219:22" pos:end="219:22">=</operator> <name pos:start="219:24" pos:end="219:34"><name pos:start="219:24" pos:end="219:24">s</name><operator pos:start="219:25" pos:end="219:26">-&gt;</operator><name pos:start="219:27" pos:end="219:34">n_chunks</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:33"><expr pos:start="223:5" pos:end="223:32"><call pos:start="223:5" pos:end="223:32"><name pos:start="223:5" pos:end="223:22">qemu_co_mutex_init</name><argument_list pos:start="223:23" pos:end="223:32">(<argument pos:start="223:24" pos:end="223:31"><expr pos:start="223:24" pos:end="223:31"><operator pos:start="223:24" pos:end="223:24">&amp;</operator><name pos:start="223:25" pos:end="223:31"><name pos:start="223:25" pos:end="223:25">s</name><operator pos:start="223:26" pos:end="223:27">-&gt;</operator><name pos:start="223:28" pos:end="223:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="225:5" pos:end="225:13">return <expr pos:start="225:12" pos:end="225:12"><literal type="number" pos:start="225:12" pos:end="225:12">0</literal></expr>;</return>



<label pos:start="229:1" pos:end="229:5"><name pos:start="229:1" pos:end="229:4">fail</name>:</label>

    <expr_stmt pos:start="231:5" pos:end="231:21"><expr pos:start="231:5" pos:end="231:20"><call pos:start="231:5" pos:end="231:20"><name pos:start="231:5" pos:end="231:10">g_free</name><argument_list pos:start="231:11" pos:end="231:20">(<argument pos:start="231:12" pos:end="231:19"><expr pos:start="231:12" pos:end="231:19"><name pos:start="231:12" pos:end="231:19"><name pos:start="231:12" pos:end="231:12">s</name><operator pos:start="231:13" pos:end="231:14">-&gt;</operator><name pos:start="231:15" pos:end="231:19">types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:23"><expr pos:start="233:5" pos:end="233:22"><call pos:start="233:5" pos:end="233:22"><name pos:start="233:5" pos:end="233:10">g_free</name><argument_list pos:start="233:11" pos:end="233:22">(<argument pos:start="233:12" pos:end="233:21"><expr pos:start="233:12" pos:end="233:21"><name pos:start="233:12" pos:end="233:21"><name pos:start="233:12" pos:end="233:12">s</name><operator pos:start="233:13" pos:end="233:14">-&gt;</operator><name pos:start="233:15" pos:end="233:21">offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:23"><expr pos:start="235:5" pos:end="235:22"><call pos:start="235:5" pos:end="235:22"><name pos:start="235:5" pos:end="235:10">g_free</name><argument_list pos:start="235:11" pos:end="235:22">(<argument pos:start="235:12" pos:end="235:21"><expr pos:start="235:12" pos:end="235:21"><name pos:start="235:12" pos:end="235:21"><name pos:start="235:12" pos:end="235:12">s</name><operator pos:start="235:13" pos:end="235:14">-&gt;</operator><name pos:start="235:15" pos:end="235:21">lengths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:23"><expr pos:start="237:5" pos:end="237:22"><call pos:start="237:5" pos:end="237:22"><name pos:start="237:5" pos:end="237:10">g_free</name><argument_list pos:start="237:11" pos:end="237:22">(<argument pos:start="237:12" pos:end="237:21"><expr pos:start="237:12" pos:end="237:21"><name pos:start="237:12" pos:end="237:21"><name pos:start="237:12" pos:end="237:12">s</name><operator pos:start="237:13" pos:end="237:14">-&gt;</operator><name pos:start="237:15" pos:end="237:21">sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:28"><expr pos:start="239:5" pos:end="239:27"><call pos:start="239:5" pos:end="239:27"><name pos:start="239:5" pos:end="239:10">g_free</name><argument_list pos:start="239:11" pos:end="239:27">(<argument pos:start="239:12" pos:end="239:26"><expr pos:start="239:12" pos:end="239:26"><name pos:start="239:12" pos:end="239:26"><name pos:start="239:12" pos:end="239:12">s</name><operator pos:start="239:13" pos:end="239:14">-&gt;</operator><name pos:start="239:15" pos:end="239:26">sectorcounts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:36"><expr pos:start="241:5" pos:end="241:35"><call pos:start="241:5" pos:end="241:35"><name pos:start="241:5" pos:end="241:14">qemu_vfree</name><argument_list pos:start="241:15" pos:end="241:35">(<argument pos:start="241:16" pos:end="241:34"><expr pos:start="241:16" pos:end="241:34"><name pos:start="241:16" pos:end="241:34"><name pos:start="241:16" pos:end="241:16">s</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:34">compressed_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:38"><expr pos:start="243:5" pos:end="243:37"><call pos:start="243:5" pos:end="243:37"><name pos:start="243:5" pos:end="243:14">qemu_vfree</name><argument_list pos:start="243:15" pos:end="243:37">(<argument pos:start="243:16" pos:end="243:36"><expr pos:start="243:16" pos:end="243:36"><name pos:start="243:16" pos:end="243:36"><name pos:start="243:16" pos:end="243:16">s</name><operator pos:start="243:17" pos:end="243:18">-&gt;</operator><name pos:start="243:19" pos:end="243:36">uncompressed_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="245:5" pos:end="245:15">return <expr pos:start="245:12" pos:end="245:14"><name pos:start="245:12" pos:end="245:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
