<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3276.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">ahci_start_transfer</name><parameter_list pos:start="1:31" pos:end="1:43">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:39"><name pos:start="1:32" pos:end="1:37">IDEDMA</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dma</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AHCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">ad</name> <init pos:start="5:20" pos:end="5:52">= <expr pos:start="5:22" pos:end="5:52"><call pos:start="5:22" pos:end="5:52"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:52">(<argument pos:start="5:32" pos:end="5:41"><expr pos:start="5:32" pos:end="5:41"><name pos:start="5:32" pos:end="5:41">AHCIDevice</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dma</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:34">= <expr pos:start="7:19" pos:end="7:34"><operator pos:start="7:19" pos:end="7:19">&amp;</operator><name pos:start="7:20" pos:end="7:34"><name pos:start="7:20" pos:end="7:21">ad</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:27">port</name><operator pos:start="7:28" pos:end="7:28">.</operator><name pos:start="7:29" pos:end="7:31">ifs</name><index pos:start="7:32" pos:end="7:34">[<expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">size</name> <init pos:start="9:19" pos:end="9:57">= <expr pos:start="9:21" pos:end="9:57"><operator pos:start="9:21" pos:end="9:21">(</operator><name pos:start="9:22" pos:end="9:29">uint32_t</name><operator pos:start="9:30" pos:end="9:30">)</operator><operator pos:start="9:31" pos:end="9:31">(</operator><name pos:start="9:32" pos:end="9:42"><name pos:start="9:32" pos:end="9:32">s</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:42">data_end</name></name> <operator pos:start="9:44" pos:end="9:44">-</operator> <name pos:start="9:46" pos:end="9:56"><name pos:start="9:46" pos:end="9:46">s</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:56">data_ptr</name></name><operator pos:start="9:57" pos:end="9:57">)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:32">/* write == ram -&gt; device */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:50"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">opts</name> <init pos:start="13:19" pos:end="13:50">= <expr pos:start="13:21" pos:end="13:50"><call pos:start="13:21" pos:end="13:50"><name pos:start="13:21" pos:end="13:31">le32_to_cpu</name><argument_list pos:start="13:32" pos:end="13:50">(<argument pos:start="13:33" pos:end="13:49"><expr pos:start="13:33" pos:end="13:49"><name pos:start="13:33" pos:end="13:49"><name pos:start="13:33" pos:end="13:34">ad</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:43">cur_cmd</name><operator pos:start="13:44" pos:end="13:45">-&gt;</operator><name pos:start="13:46" pos:end="13:49">opts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">is_write</name> <init pos:start="15:18" pos:end="15:40">= <expr pos:start="15:20" pos:end="15:40"><name pos:start="15:20" pos:end="15:23">opts</name> <operator pos:start="15:25" pos:end="15:25">&amp;</operator> <name pos:start="15:27" pos:end="15:40">AHCI_CMD_WRITE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">is_atapi</name> <init pos:start="17:18" pos:end="17:40">= <expr pos:start="17:20" pos:end="17:40"><name pos:start="17:20" pos:end="17:23">opts</name> <operator pos:start="17:25" pos:end="17:25">&amp;</operator> <name pos:start="17:27" pos:end="17:40">AHCI_CMD_ATAPI</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">has_sglist</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:43">(<expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:16">is_atapi</name> <operator pos:start="23:18" pos:end="23:19">&amp;&amp;</operator> <operator pos:start="23:21" pos:end="23:21">!</operator><name pos:start="23:22" pos:end="23:42"><name pos:start="23:22" pos:end="23:23">ad</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:42">done_atapi_packet</name></name></expr>)</condition> <block pos:start="23:45" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <comment type="block" pos:start="25:9" pos:end="25:43">/* already prepopulated iobuffer */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:10">ad</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:29">done_atapi_packet</name></name> <operator pos:start="27:31" pos:end="27:31">=</operator> <literal type="number" pos:start="27:33" pos:end="27:33">1</literal></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:42">(<expr pos:start="35:9" pos:end="35:41"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:41"><name pos:start="35:10" pos:end="35:29">ahci_populate_sglist</name><argument_list pos:start="35:30" pos:end="35:41">(<argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><name pos:start="35:31" pos:end="35:32">ad</name></expr></argument>, <argument pos:start="35:35" pos:end="35:40"><expr pos:start="35:35" pos:end="35:40"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:40"><name pos:start="35:36" pos:end="35:36">s</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:40">sg</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:44" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:23">

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:18">has_sglist</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="47:35"><expr pos:start="43:5" pos:end="47:34"><call pos:start="43:5" pos:end="47:34"><name pos:start="43:5" pos:end="43:11">DPRINTF</name><argument_list pos:start="43:12" pos:end="47:34">(<argument pos:start="43:13" pos:end="43:23"><expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:14">ad</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:23">port_no</name></name></expr></argument>, <argument pos:start="43:26" pos:end="43:61"><expr pos:start="43:26" pos:end="43:61"><literal type="string" pos:start="43:26" pos:end="43:61">"%sing %d bytes on %s w/%s sglist\n"</literal></expr></argument>,

            <argument pos:start="45:13" pos:end="45:38"><expr pos:start="45:13" pos:end="45:38"><ternary pos:start="45:13" pos:end="45:38"><condition pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:20">is_write</name></expr> ?</condition><then pos:start="45:24" pos:end="45:29"> <expr pos:start="45:24" pos:end="45:29"><literal type="string" pos:start="45:24" pos:end="45:29">"writ"</literal></expr> </then><else pos:start="45:31" pos:end="45:38">: <expr pos:start="45:33" pos:end="45:38"><literal type="string" pos:start="45:33" pos:end="45:38">"read"</literal></expr></else></ternary></expr></argument>, <argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">size</name></expr></argument>, <argument pos:start="45:47" pos:end="45:72"><expr pos:start="45:47" pos:end="45:72"><ternary pos:start="45:47" pos:end="45:72"><condition pos:start="45:47" pos:end="45:56"><expr pos:start="45:47" pos:end="45:54"><name pos:start="45:47" pos:end="45:54">is_atapi</name></expr> ?</condition><then pos:start="45:58" pos:end="45:64"> <expr pos:start="45:58" pos:end="45:64"><literal type="string" pos:start="45:58" pos:end="45:64">"atapi"</literal></expr> </then><else pos:start="45:66" pos:end="45:72">: <expr pos:start="45:68" pos:end="45:72"><literal type="string" pos:start="45:68" pos:end="45:72">"ata"</literal></expr></else></ternary></expr></argument>,

            <argument pos:start="47:13" pos:end="47:33"><expr pos:start="47:13" pos:end="47:33"><ternary pos:start="47:13" pos:end="47:33"><condition pos:start="47:13" pos:end="47:24"><expr pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:22">has_sglist</name></expr> ?</condition><then pos:start="47:26" pos:end="47:27"> <expr pos:start="47:26" pos:end="47:27"><literal type="string" pos:start="47:26" pos:end="47:27">""</literal></expr> </then><else pos:start="47:29" pos:end="47:33">: <expr pos:start="47:31" pos:end="47:33"><literal type="string" pos:start="47:31" pos:end="47:33">"o"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="63:5"><if pos:start="51:5" pos:end="63:5">if <condition pos:start="51:8" pos:end="51:27">(<expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:18">has_sglist</name> <operator pos:start="51:20" pos:end="51:21">&amp;&amp;</operator> <name pos:start="51:23" pos:end="51:26">size</name></expr>)</condition> <block pos:start="51:29" pos:end="63:5">{<block_content pos:start="53:9" pos:end="61:9">

        <if_stmt pos:start="53:9" pos:end="61:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:21">(<expr pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:20">is_write</name></expr>)</condition> <block pos:start="53:23" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:53">

            <expr_stmt pos:start="55:13" pos:end="55:53"><expr pos:start="55:13" pos:end="55:52"><call pos:start="55:13" pos:end="55:52"><name pos:start="55:13" pos:end="55:25">dma_buf_write</name><argument_list pos:start="55:26" pos:end="55:52">(<argument pos:start="55:27" pos:end="55:37"><expr pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:27">s</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:37">data_ptr</name></name></expr></argument>, <argument pos:start="55:40" pos:end="55:43"><expr pos:start="55:40" pos:end="55:43"><name pos:start="55:40" pos:end="55:43">size</name></expr></argument>, <argument pos:start="55:46" pos:end="55:51"><expr pos:start="55:46" pos:end="55:51"><operator pos:start="55:46" pos:end="55:46">&amp;</operator><name pos:start="55:47" pos:end="55:51"><name pos:start="55:47" pos:end="55:47">s</name><operator pos:start="55:48" pos:end="55:49">-&gt;</operator><name pos:start="55:50" pos:end="55:51">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="61:9">else <block pos:start="57:16" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:52">

            <expr_stmt pos:start="59:13" pos:end="59:52"><expr pos:start="59:13" pos:end="59:51"><call pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:24">dma_buf_read</name><argument_list pos:start="59:25" pos:end="59:51">(<argument pos:start="59:26" pos:end="59:36"><expr pos:start="59:26" pos:end="59:36"><name pos:start="59:26" pos:end="59:36"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:36">data_ptr</name></name></expr></argument>, <argument pos:start="59:39" pos:end="59:42"><expr pos:start="59:39" pos:end="59:42"><name pos:start="59:39" pos:end="59:42">size</name></expr></argument>, <argument pos:start="59:45" pos:end="59:50"><expr pos:start="59:45" pos:end="59:50"><operator pos:start="59:45" pos:end="59:45">&amp;</operator><name pos:start="59:46" pos:end="59:50"><name pos:start="59:46" pos:end="59:46">s</name><operator pos:start="59:47" pos:end="59:48">-&gt;</operator><name pos:start="59:49" pos:end="59:50">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:44">/* update number of transferred bytes */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:79"><expr pos:start="69:5" pos:end="69:78"><name pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:6">ad</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:15">cur_cmd</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:23">status</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:78"><name pos:start="69:27" pos:end="69:37">cpu_to_le32</name><argument_list pos:start="69:38" pos:end="69:78">(<argument pos:start="69:39" pos:end="69:77"><expr pos:start="69:39" pos:end="69:77"><call pos:start="69:39" pos:end="69:70"><name pos:start="69:39" pos:end="69:49">le32_to_cpu</name><argument_list pos:start="69:50" pos:end="69:70">(<argument pos:start="69:51" pos:end="69:69"><expr pos:start="69:51" pos:end="69:69"><name pos:start="69:51" pos:end="69:69"><name pos:start="69:51" pos:end="69:52">ad</name><operator pos:start="69:53" pos:end="69:54">-&gt;</operator><name pos:start="69:55" pos:end="69:61">cur_cmd</name><operator pos:start="69:62" pos:end="69:63">-&gt;</operator><name pos:start="69:64" pos:end="69:69">status</name></name></expr></argument>)</argument_list></call> <operator pos:start="69:72" pos:end="69:72">+</operator> <name pos:start="69:74" pos:end="69:77">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="73:1" pos:end="73:4"><name pos:start="73:1" pos:end="73:3">out</name>:</label>

    <comment type="block" pos:start="75:5" pos:end="75:46">/* declare that we processed everything */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:15">data_ptr</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:29"><name pos:start="77:19" pos:end="77:19">s</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:29">data_end</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:19">(<expr pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:18">has_sglist</name></expr>)</condition> <block pos:start="81:21" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:36">

        <expr_stmt pos:start="83:9" pos:end="83:36"><expr pos:start="83:9" pos:end="83:35"><call pos:start="83:9" pos:end="83:35"><name pos:start="83:9" pos:end="83:27">qemu_sglist_destroy</name><argument_list pos:start="83:28" pos:end="83:35">(<argument pos:start="83:29" pos:end="83:34"><expr pos:start="83:29" pos:end="83:34"><operator pos:start="83:29" pos:end="83:29">&amp;</operator><name pos:start="83:30" pos:end="83:34"><name pos:start="83:30" pos:end="83:30">s</name><operator pos:start="83:31" pos:end="83:32">-&gt;</operator><name pos:start="83:33" pos:end="83:34">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:28"><expr pos:start="89:5" pos:end="89:27"><call pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:24">end_transfer_func</name></name><argument_list pos:start="89:25" pos:end="89:27">(<argument pos:start="89:26" pos:end="89:26"><expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:32">(<expr pos:start="93:9" pos:end="93:31"><operator pos:start="93:9" pos:end="93:9">!</operator><operator pos:start="93:10" pos:end="93:10">(</operator><name pos:start="93:11" pos:end="93:19"><name pos:start="93:11" pos:end="93:11">s</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:19">status</name></name> <operator pos:start="93:21" pos:end="93:21">&amp;</operator> <name pos:start="93:23" pos:end="93:30">DRQ_STAT</name><operator pos:start="93:31" pos:end="93:31">)</operator></expr>)</condition> <block pos:start="93:34" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:57">

        <comment type="block" pos:start="95:9" pos:end="95:27">/* done with DMA */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:57"><expr pos:start="97:9" pos:end="97:56"><call pos:start="97:9" pos:end="97:56"><name pos:start="97:9" pos:end="97:24">ahci_trigger_irq</name><argument_list pos:start="97:25" pos:end="97:56">(<argument pos:start="97:26" pos:end="97:32"><expr pos:start="97:26" pos:end="97:32"><name pos:start="97:26" pos:end="97:32"><name pos:start="97:26" pos:end="97:27">ad</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:32">hba</name></name></expr></argument>, <argument pos:start="97:35" pos:end="97:36"><expr pos:start="97:35" pos:end="97:36"><name pos:start="97:35" pos:end="97:36">ad</name></expr></argument>, <argument pos:start="97:39" pos:end="97:55"><expr pos:start="97:39" pos:end="97:55"><name pos:start="97:39" pos:end="97:55">PORT_IRQ_STAT_DSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
