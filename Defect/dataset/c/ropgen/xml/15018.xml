<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15018.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">css_register_io_adapter</name><parameter_list pos:start="1:28" pos:end="3:56">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:44">CssIoAdapterType</name></type> <name pos:start="1:46" pos:end="1:49">type</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:58">uint8_t</name></type> <name pos:start="1:60" pos:end="1:62">isc</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:68">bool</name></type> <name pos:start="1:70" pos:end="1:73">swap</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:32">bool</name></type> <name pos:start="3:34" pos:end="3:41">maskable</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:51">uint32_t</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:55">id</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:15">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">IoAdapter</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:22">adapter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">found</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">S390FLICState</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">fs</name> <init pos:start="13:23" pos:end="13:39">= <expr pos:start="13:25" pos:end="13:39"><call pos:start="13:25" pos:end="13:39"><name pos:start="13:25" pos:end="13:37">s390_get_flic</name><argument_list pos:start="13:38" pos:end="13:39">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:61"><decl pos:start="15:5" pos:end="15:60"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">S390FLICStateClass</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:27">fsc</name> <init pos:start="15:29" pos:end="15:60">= <expr pos:start="15:31" pos:end="15:60"><call pos:start="15:31" pos:end="15:60"><name pos:start="15:31" pos:end="15:56">S390_FLIC_COMMON_GET_CLASS</name><argument_list pos:start="15:57" pos:end="15:60">(<argument pos:start="15:58" pos:end="15:59"><expr pos:start="15:58" pos:end="15:59"><name pos:start="15:58" pos:end="15:59">fs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:12"><expr pos:start="19:5" pos:end="19:11"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:7">id</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <literal type="number" pos:start="19:11" pos:end="19:11">0</literal></expr>;</expr_stmt>

    <macro pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:18">QTAILQ_FOREACH</name><argument_list pos:start="21:19" pos:end="21:65">(<argument pos:start="21:20" pos:end="21:26">adapter</argument>, <argument pos:start="21:29" pos:end="21:55">&amp;channel_subsys.io_adapters</argument>, <argument pos:start="21:58" pos:end="21:64">sibling</argument>)</argument_list></macro> <block pos:start="21:67" pos:end="41:5">{<block_content pos:start="23:9" pos:end="39:9">

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="23:61">(<expr pos:start="23:13" pos:end="23:60"><operator pos:start="23:13" pos:end="23:13">(</operator><name pos:start="23:14" pos:end="23:26"><name pos:start="23:14" pos:end="23:20">adapter</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:26">type</name></name> <operator pos:start="23:28" pos:end="23:29">==</operator> <name pos:start="23:31" pos:end="23:34">type</name><operator pos:start="23:35" pos:end="23:35">)</operator> <operator pos:start="23:37" pos:end="23:38">&amp;&amp;</operator> <operator pos:start="23:40" pos:end="23:40">(</operator><name pos:start="23:41" pos:end="23:52"><name pos:start="23:41" pos:end="23:47">adapter</name><operator pos:start="23:48" pos:end="23:49">-&gt;</operator><name pos:start="23:50" pos:end="23:52">isc</name></name> <operator pos:start="23:54" pos:end="23:55">==</operator> <name pos:start="23:57" pos:end="23:59">isc</name><operator pos:start="23:60" pos:end="23:60">)</operator></expr>)</condition> <block pos:start="23:63" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:18">

            <expr_stmt pos:start="25:13" pos:end="25:30"><expr pos:start="25:13" pos:end="25:29"><operator pos:start="25:13" pos:end="25:13">*</operator><name pos:start="25:14" pos:end="25:15">id</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:29"><name pos:start="25:19" pos:end="25:25">adapter</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:29">id</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:25"><expr pos:start="27:13" pos:end="27:24"><name pos:start="27:13" pos:end="27:17">found</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:24">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:20"><expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:31">(<expr pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:19">adapter</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:23">id</name></name> <operator pos:start="35:25" pos:end="35:26">&gt;=</operator> <operator pos:start="35:28" pos:end="35:28">*</operator><name pos:start="35:29" pos:end="35:30">id</name></expr>)</condition> <block pos:start="35:33" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:34">

            <expr_stmt pos:start="37:13" pos:end="37:34"><expr pos:start="37:13" pos:end="37:33"><operator pos:start="37:13" pos:end="37:13">*</operator><name pos:start="37:14" pos:end="37:15">id</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:29"><name pos:start="37:19" pos:end="37:25">adapter</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:29">id</name></name> <operator pos:start="37:31" pos:end="37:31">+</operator> <literal type="number" pos:start="37:33" pos:end="37:33">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:14">(<expr pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:13">found</name></expr>)</condition> <block pos:start="43:16" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:17">

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:35"><expr pos:start="49:5" pos:end="49:34"><name pos:start="49:5" pos:end="49:11">adapter</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:34"><name pos:start="49:15" pos:end="49:20">g_new0</name><argument_list pos:start="49:21" pos:end="49:34">(<argument pos:start="49:22" pos:end="49:30"><expr pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:30">IoAdapter</name></expr></argument>, <argument pos:start="49:33" pos:end="49:33"><expr pos:start="49:33" pos:end="49:33"><literal type="number" pos:start="49:33" pos:end="49:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:65"><expr pos:start="51:5" pos:end="51:64"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:64"><name pos:start="51:11" pos:end="51:34"><name pos:start="51:11" pos:end="51:13">fsc</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:34">register_io_adapter</name></name><argument_list pos:start="51:35" pos:end="51:64">(<argument pos:start="51:36" pos:end="51:37"><expr pos:start="51:36" pos:end="51:37"><name pos:start="51:36" pos:end="51:37">fs</name></expr></argument>, <argument pos:start="51:40" pos:end="51:42"><expr pos:start="51:40" pos:end="51:42"><operator pos:start="51:40" pos:end="51:40">*</operator><name pos:start="51:41" pos:end="51:42">id</name></expr></argument>, <argument pos:start="51:45" pos:end="51:47"><expr pos:start="51:45" pos:end="51:47"><name pos:start="51:45" pos:end="51:47">isc</name></expr></argument>, <argument pos:start="51:50" pos:end="51:53"><expr pos:start="51:50" pos:end="51:53"><name pos:start="51:50" pos:end="51:53">swap</name></expr></argument>, <argument pos:start="51:56" pos:end="51:63"><expr pos:start="51:56" pos:end="51:63"><name pos:start="51:56" pos:end="51:63">maskable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="71:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:17">(<expr pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:14">==</operator> <literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>)</condition> <block pos:start="53:19" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:74">

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:15">adapter</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:19">id</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <operator pos:start="55:23" pos:end="55:23">*</operator><name pos:start="55:24" pos:end="55:25">id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:15">adapter</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:20">isc</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:26">isc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:15">adapter</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:21">type</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:28">type</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:74"><expr pos:start="61:9" pos:end="61:73"><call pos:start="61:9" pos:end="61:73"><name pos:start="61:9" pos:end="61:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="61:27" pos:end="61:73">(<argument pos:start="61:28" pos:end="61:54"><expr pos:start="61:28" pos:end="61:54"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:54"><name pos:start="61:29" pos:end="61:42">channel_subsys</name><operator pos:start="61:43" pos:end="61:43">.</operator><name pos:start="61:44" pos:end="61:54">io_adapters</name></name></expr></argument>, <argument pos:start="61:57" pos:end="61:63"><expr pos:start="61:57" pos:end="61:63"><name pos:start="61:57" pos:end="61:63">adapter</name></expr></argument>, <argument pos:start="61:66" pos:end="61:72"><expr pos:start="61:66" pos:end="61:72"><name pos:start="61:66" pos:end="61:72">sibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="71:5">else <block pos:start="63:12" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:26">

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><call pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:14">g_free</name><argument_list pos:start="65:15" pos:end="65:23">(<argument pos:start="65:16" pos:end="65:22"><expr pos:start="65:16" pos:end="65:22"><name pos:start="65:16" pos:end="65:22">adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:26"><expr pos:start="67:9" pos:end="69:25"><call pos:start="67:9" pos:end="69:25"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:25">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:75"><expr pos:start="67:25" pos:end="67:75"><literal type="string" pos:start="67:25" pos:end="67:75">"Unexpected error %d when registering adapter %d\n"</literal></expr></argument>,

                <argument pos:start="69:17" pos:end="69:19"><expr pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">ret</name></expr></argument>, <argument pos:start="69:22" pos:end="69:24"><expr pos:start="69:22" pos:end="69:24"><operator pos:start="69:22" pos:end="69:22">*</operator><name pos:start="69:23" pos:end="69:24">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<label pos:start="73:1" pos:end="73:4"><name pos:start="73:1" pos:end="73:3">out</name>:</label>

    <return pos:start="75:5" pos:end="75:15">return <expr pos:start="75:12" pos:end="75:14"><name pos:start="75:12" pos:end="75:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
