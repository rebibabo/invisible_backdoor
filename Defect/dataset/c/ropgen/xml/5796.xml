<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5796.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">gxf_packet</name><parameter_list pos:start="1:22" pos:end="1:56">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">AVPacket</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">pkt</name></decl></parameter>)</parameter_list> <block pos:start="1:58" pos:end="83:1">{<block_content pos:start="3:5" pos:end="81:24">

    <decl_stmt pos:start="3:5" pos:end="3:30"><decl pos:start="3:5" pos:end="3:29"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:17">ByteIOContext</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:21">pb</name> <init pos:start="3:23" pos:end="3:29">= <expr pos:start="3:25" pos:end="3:29"><name pos:start="3:25" pos:end="3:29"><name pos:start="3:25" pos:end="3:25">s</name><operator pos:start="3:26" pos:end="3:27">-&gt;</operator><name pos:start="3:28" pos:end="3:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">pkt_type_t</name></type> <name pos:start="5:16" pos:end="5:23">pkt_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">pkt_len</name></decl>;</decl_stmt>

    <while pos:start="9:5" pos:end="79:5">while <condition pos:start="9:11" pos:end="9:25">(<expr pos:start="9:12" pos:end="9:24"><operator pos:start="9:12" pos:end="9:12">!</operator><call pos:start="9:13" pos:end="9:24"><name pos:start="9:13" pos:end="9:20">url_feof</name><argument_list pos:start="9:21" pos:end="9:24">(<argument pos:start="9:22" pos:end="9:23"><expr pos:start="9:22" pos:end="9:23"><name pos:start="9:22" pos:end="9:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:27" pos:end="79:5">{<block_content pos:start="11:9" pos:end="77:19">

        <decl_stmt pos:start="11:9" pos:end="11:38"><decl pos:start="11:9" pos:end="11:22"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:22">track_type</name></decl>, <decl pos:start="11:25" pos:end="11:32"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:25" pos:end="11:32">track_id</name></decl>, <decl pos:start="11:35" pos:end="11:37"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:35" pos:end="11:37">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:21"><decl pos:start="13:9" pos:end="13:20"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:20">field_nr</name></decl>;</decl_stmt>

        <if_stmt pos:start="15:9" pos:end="23:9"><if pos:start="15:9" pos:end="23:9">if <condition pos:start="15:12" pos:end="15:58">(<expr pos:start="15:13" pos:end="15:57"><operator pos:start="15:13" pos:end="15:13">!</operator><call pos:start="15:14" pos:end="15:57"><name pos:start="15:14" pos:end="15:32">parse_packet_header</name><argument_list pos:start="15:33" pos:end="15:57">(<argument pos:start="15:34" pos:end="15:35"><expr pos:start="15:34" pos:end="15:35"><name pos:start="15:34" pos:end="15:35">pb</name></expr></argument>, <argument pos:start="15:38" pos:end="15:46"><expr pos:start="15:38" pos:end="15:46"><operator pos:start="15:38" pos:end="15:38">&amp;</operator><name pos:start="15:39" pos:end="15:46">pkt_type</name></expr></argument>, <argument pos:start="15:49" pos:end="15:56"><expr pos:start="15:49" pos:end="15:56"><operator pos:start="15:49" pos:end="15:49">&amp;</operator><name pos:start="15:50" pos:end="15:56">pkt_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:60" pos:end="23:9">{<block_content pos:start="17:13" pos:end="21:22">

            <if_stmt pos:start="17:13" pos:end="19:60"><if pos:start="17:13" pos:end="19:60">if <condition pos:start="17:16" pos:end="17:30">(<expr pos:start="17:17" pos:end="17:29"><operator pos:start="17:17" pos:end="17:17">!</operator><call pos:start="17:18" pos:end="17:29"><name pos:start="17:18" pos:end="17:25">url_feof</name><argument_list pos:start="17:26" pos:end="17:29">(<argument pos:start="17:27" pos:end="17:28"><expr pos:start="17:27" pos:end="17:28"><name pos:start="17:27" pos:end="17:28">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:17" pos:end="19:60"><block_content pos:start="19:17" pos:end="19:60">

                <expr_stmt pos:start="19:17" pos:end="19:60"><expr pos:start="19:17" pos:end="19:59"><call pos:start="19:17" pos:end="19:59"><name pos:start="19:17" pos:end="19:22">av_log</name><argument_list pos:start="19:23" pos:end="19:59">(<argument pos:start="19:24" pos:end="19:24"><expr pos:start="19:24" pos:end="19:24"><name pos:start="19:24" pos:end="19:24">s</name></expr></argument>, <argument pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:38"><name pos:start="19:27" pos:end="19:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:41" pos:end="19:58"><expr pos:start="19:41" pos:end="19:58"><literal type="string" pos:start="19:41" pos:end="19:58">"GXF: sync lost\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="21:13" pos:end="21:22">return <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="31:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:32">(<expr pos:start="25:13" pos:end="25:31"><name pos:start="25:13" pos:end="25:20">pkt_type</name> <operator pos:start="25:22" pos:end="25:23">==</operator> <name pos:start="25:25" pos:end="25:31">PKT_FLT</name></expr>)</condition> <block pos:start="25:34" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:21">

            <expr_stmt pos:start="27:13" pos:end="27:39"><expr pos:start="27:13" pos:end="27:38"><call pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:26">gxf_read_index</name><argument_list pos:start="27:27" pos:end="27:38">(<argument pos:start="27:28" pos:end="27:28"><expr pos:start="27:28" pos:end="27:28"><name pos:start="27:28" pos:end="27:28">s</name></expr></argument>, <argument pos:start="27:31" pos:end="27:37"><expr pos:start="27:31" pos:end="27:37"><name pos:start="27:31" pos:end="27:37">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="29:13" pos:end="29:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:34">(<expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:20">pkt_type</name> <operator pos:start="33:22" pos:end="33:23">!=</operator> <name pos:start="33:25" pos:end="33:33">PKT_MEDIA</name></expr>)</condition> <block pos:start="33:36" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:21">

            <expr_stmt pos:start="35:13" pos:end="35:35"><expr pos:start="35:13" pos:end="35:34"><call pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:21">url_fskip</name><argument_list pos:start="35:22" pos:end="35:34">(<argument pos:start="35:23" pos:end="35:24"><expr pos:start="35:23" pos:end="35:24"><name pos:start="35:23" pos:end="35:24">pb</name></expr></argument>, <argument pos:start="35:27" pos:end="35:33"><expr pos:start="35:27" pos:end="35:33"><name pos:start="35:27" pos:end="35:33">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="37:13" pos:end="37:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:19">pkt_len</name> <operator pos:start="41:21" pos:end="41:21">&lt;</operator> <literal type="number" pos:start="41:23" pos:end="41:24">16</literal></expr>)</condition> <block pos:start="41:27" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:74"><expr pos:start="43:13" pos:end="43:73"><call pos:start="43:13" pos:end="43:73"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="43:73">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">s</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:72"><expr pos:start="43:37" pos:end="43:72"><literal type="string" pos:start="43:37" pos:end="43:72">"GXF: invalid media packet length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="45:13" pos:end="45:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:15">pkt_len</name> <operator pos:start="49:17" pos:end="49:18">-=</operator> <literal type="number" pos:start="49:20" pos:end="49:21">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:18">track_type</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <call pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:29">get_byte</name><argument_list pos:start="51:30" pos:end="51:33">(<argument pos:start="51:31" pos:end="51:32"><expr pos:start="51:31" pos:end="51:32"><name pos:start="51:31" pos:end="51:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:16">track_id</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:31"><name pos:start="53:20" pos:end="53:27">get_byte</name><argument_list pos:start="53:28" pos:end="53:31">(<argument pos:start="53:29" pos:end="53:30"><expr pos:start="53:29" pos:end="53:30"><name pos:start="53:29" pos:end="53:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:16">field_nr</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:31"><name pos:start="55:20" pos:end="55:27">get_be32</name><argument_list pos:start="55:28" pos:end="55:31">(<argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><name pos:start="55:29" pos:end="55:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:21"><expr pos:start="57:9" pos:end="57:20"><call pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:16">get_be32</name><argument_list pos:start="57:17" pos:end="57:20">(<argument pos:start="57:18" pos:end="57:19"><expr pos:start="57:18" pos:end="57:19"><name pos:start="57:18" pos:end="57:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="57:23" pos:end="57:42">// field information</comment>

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><call pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:16">get_be32</name><argument_list pos:start="59:17" pos:end="59:20">(<argument pos:start="59:18" pos:end="59:19"><expr pos:start="59:18" pos:end="59:19"><name pos:start="59:18" pos:end="59:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="59:23" pos:end="59:48">// "timeline" field number</comment>

        <expr_stmt pos:start="61:9" pos:end="61:21"><expr pos:start="61:9" pos:end="61:20"><call pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:16">get_byte</name><argument_list pos:start="61:17" pos:end="61:20">(<argument pos:start="61:18" pos:end="61:19"><expr pos:start="61:18" pos:end="61:19"><name pos:start="61:18" pos:end="61:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="61:23" pos:end="61:30">// flags</comment>

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><call pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:16">get_byte</name><argument_list pos:start="63:17" pos:end="63:20">(<argument pos:start="63:18" pos:end="63:19"><expr pos:start="63:18" pos:end="63:19"><name pos:start="63:18" pos:end="63:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="63:23" pos:end="63:33">// reserved</comment>

        <comment type="line" pos:start="65:9" pos:end="65:61">// NOTE: there is also data length information in the</comment>

        <comment type="line" pos:start="67:9" pos:end="67:74">// field information, it might be better to take this into account</comment>

        <comment type="line" pos:start="69:9" pos:end="69:19">// as well.</comment>

        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:45"><name pos:start="71:15" pos:end="71:27">av_get_packet</name><argument_list pos:start="71:28" pos:end="71:45">(<argument pos:start="71:29" pos:end="71:30"><expr pos:start="71:29" pos:end="71:30"><name pos:start="71:29" pos:end="71:30">pb</name></expr></argument>, <argument pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><name pos:start="71:33" pos:end="71:35">pkt</name></expr></argument>, <argument pos:start="71:38" pos:end="71:44"><expr pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:44">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:64"><expr pos:start="73:9" pos:end="73:63"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:11">pkt</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:25">stream_index</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <call pos:start="73:29" pos:end="73:63"><name pos:start="73:29" pos:end="73:38">get_sindex</name><argument_list pos:start="73:39" pos:end="73:63">(<argument pos:start="73:40" pos:end="73:40"><expr pos:start="73:40" pos:end="73:40"><name pos:start="73:40" pos:end="73:40">s</name></expr></argument>, <argument pos:start="73:43" pos:end="73:50"><expr pos:start="73:43" pos:end="73:50"><name pos:start="73:43" pos:end="73:50">track_id</name></expr></argument>, <argument pos:start="73:53" pos:end="73:62"><expr pos:start="73:53" pos:end="73:62"><name pos:start="73:53" pos:end="73:62">track_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:28"><expr pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:11">pkt</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:16">dts</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <name pos:start="75:20" pos:end="75:27">field_nr</name></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:19">return <expr pos:start="77:16" pos:end="77:18"><name pos:start="77:16" pos:end="77:18">ret</name></expr>;</return>

    </block_content>}</block></while>

    <return pos:start="81:5" pos:end="81:24">return <expr pos:start="81:12" pos:end="81:23"><call pos:start="81:12" pos:end="81:23"><name pos:start="81:12" pos:end="81:18">AVERROR</name><argument_list pos:start="81:19" pos:end="81:23">(<argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
