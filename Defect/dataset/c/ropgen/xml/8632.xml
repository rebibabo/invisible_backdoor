<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8632.c" pos:tabs="8"><function pos:start="1:1" pos:end="265:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">lan9118_writel</name><parameter_list pos:start="1:27" pos:end="3:55">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:66"><decl pos:start="1:42" pos:end="1:66"><type pos:start="1:42" pos:end="1:66"><name pos:start="1:42" pos:end="1:59">target_phys_addr_t</name></type> <name pos:start="1:61" pos:end="1:66">offset</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:39"><decl pos:start="3:28" pos:end="3:39"><type pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:35">uint64_t</name></type> <name pos:start="3:37" pos:end="3:39">val</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:49">unsigned</name></type> <name pos:start="3:51" pos:end="3:54">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="265:1">{<block_content pos:start="7:5" pos:end="263:22">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">lan9118_state</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:46">= <expr pos:start="7:24" pos:end="7:46"><operator pos:start="7:24" pos:end="7:24">(</operator><name pos:start="7:25" pos:end="7:37">lan9118_state</name> <operator pos:start="7:39" pos:end="7:39">*</operator><operator pos:start="7:40" pos:end="7:40">)</operator><name pos:start="7:41" pos:end="7:46">opaque</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:19"><expr pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">offset</name> <operator pos:start="9:12" pos:end="9:13">&amp;=</operator> <literal type="number" pos:start="9:15" pos:end="9:18">0xff</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:63">//DPRINTF("Write reg 0x%02x = 0x%08x\n", (int)offset, val);</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:40">(<expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:14">offset</name> <operator pos:start="15:16" pos:end="15:17">&gt;=</operator> <literal type="number" pos:start="15:19" pos:end="15:22">0x20</literal> <operator pos:start="15:24" pos:end="15:25">&amp;&amp;</operator> <name pos:start="15:27" pos:end="15:32">offset</name> <operator pos:start="15:34" pos:end="15:34">&lt;</operator> <literal type="number" pos:start="15:36" pos:end="15:39">0x40</literal></expr>)</condition> <block pos:start="15:42" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <comment type="block" pos:start="17:9" pos:end="17:21">/* TX FIFO */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:29"><expr pos:start="19:9" pos:end="19:28"><call pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:20">tx_fifo_push</name><argument_list pos:start="19:21" pos:end="19:28">(<argument pos:start="19:22" pos:end="19:22"><expr pos:start="19:22" pos:end="19:22"><name pos:start="19:22" pos:end="19:22">s</name></expr></argument>, <argument pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><name pos:start="19:25" pos:end="19:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="25:5" pos:end="261:5">switch <condition pos:start="25:12" pos:end="25:19">(<expr pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:18">offset</name></expr>)</condition> <block pos:start="25:21" pos:end="261:5">{<block_content pos:start="27:5" pos:end="259:14">

    <case pos:start="27:5" pos:end="27:21">case <expr pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:20">CSR_IRQ_CFG</name></expr>:</case>

        <comment type="block" pos:start="29:9" pos:end="29:63">/* TODO: Implement interrupt deassertion intervals.  */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:11">val</name> <operator pos:start="31:13" pos:end="31:14">&amp;=</operator> <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:22">IRQ_EN</name> <operator pos:start="31:24" pos:end="31:24">|</operator> <name pos:start="31:26" pos:end="31:32">IRQ_POL</name> <operator pos:start="31:34" pos:end="31:34">|</operator> <name pos:start="31:36" pos:end="31:43">IRQ_TYPE</name><operator pos:start="31:44" pos:end="31:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:50"><expr pos:start="33:9" pos:end="33:49"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">irq_cfg</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:32"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:32">irq_cfg</name></name> <operator pos:start="33:34" pos:end="33:34">&amp;</operator> <name pos:start="33:36" pos:end="33:42">IRQ_INT</name><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:45">|</operator> <name pos:start="33:47" pos:end="33:49">val</name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:21">case <expr pos:start="37:10" pos:end="37:20"><name pos:start="37:10" pos:end="37:20">CSR_INT_STS</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:27"><expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">int_sts</name></name> <operator pos:start="39:20" pos:end="39:21">&amp;=</operator> <operator pos:start="39:23" pos:end="39:23">~</operator><name pos:start="39:24" pos:end="39:26">val</name></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:20">case <expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:19">CSR_INT_EN</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:17">int_en</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:23">val</name> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <operator pos:start="45:27" pos:end="45:27">~</operator><name pos:start="45:28" pos:end="45:39">RESERVED_INT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:18">int_sts</name></name> <operator pos:start="47:20" pos:end="47:21">|=</operator> <name pos:start="47:23" pos:end="47:25">val</name> <operator pos:start="47:27" pos:end="47:27">&amp;</operator> <name pos:start="47:29" pos:end="47:34">SW_INT</name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:22">case <expr pos:start="51:10" pos:end="51:21"><name pos:start="51:10" pos:end="51:21">CSR_FIFO_INT</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><call pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:15">DPRINTF</name><argument_list pos:start="53:16" pos:end="53:46">(<argument pos:start="53:17" pos:end="53:40"><expr pos:start="53:17" pos:end="53:40"><literal type="string" pos:start="53:17" pos:end="53:40">"FIFO INT levels %08x\n"</literal></expr></argument>, <argument pos:start="53:43" pos:end="53:45"><expr pos:start="53:43" pos:end="53:45"><name pos:start="53:43" pos:end="53:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">fifo_int</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:25">val</name></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:20">case <expr pos:start="59:10" pos:end="59:19"><name pos:start="59:10" pos:end="59:19">CSR_RX_CFG</name></expr>:</case>

        <if_stmt pos:start="61:9" pos:end="73:9"><if pos:start="61:9" pos:end="73:9">if <condition pos:start="61:12" pos:end="61:25">(<expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:15">val</name> <operator pos:start="61:17" pos:end="61:17">&amp;</operator> <literal type="number" pos:start="61:19" pos:end="61:24">0x8000</literal></expr>)</condition> <block pos:start="61:27" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:58">

            <comment type="block" pos:start="63:13" pos:end="63:25">/* RX_DUMP */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:32"><expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:27">rx_fifo_used</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:39"><expr pos:start="67:13" pos:end="67:38"><name pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:34">rx_status_fifo_used</name></name> <operator pos:start="67:36" pos:end="67:36">=</operator> <literal type="number" pos:start="67:38" pos:end="67:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:60"><expr pos:start="69:13" pos:end="69:59"><name pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:34">rx_packet_size_tail</name></name> <operator pos:start="69:36" pos:end="69:36">=</operator> <name pos:start="69:38" pos:end="69:59"><name pos:start="69:38" pos:end="69:38">s</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:59">rx_packet_size_head</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:58"><expr pos:start="71:13" pos:end="71:57"><name pos:start="71:13" pos:end="71:53"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:29">rx_packet_size</name><index pos:start="71:30" pos:end="71:53">[<expr pos:start="71:31" pos:end="71:52"><name pos:start="71:31" pos:end="71:52"><name pos:start="71:31" pos:end="71:31">s</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:52">rx_packet_size_head</name></name></expr>]</index></name> <operator pos:start="71:55" pos:end="71:55">=</operator> <literal type="number" pos:start="71:57" pos:end="71:57">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:17">rx_cfg</name></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:23">val</name> <operator pos:start="75:25" pos:end="75:25">&amp;</operator> <literal type="number" pos:start="75:27" pos:end="75:36">0xcfff1ff0</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:20">case <expr pos:start="79:10" pos:end="79:19"><name pos:start="79:10" pos:end="79:19">CSR_TX_CFG</name></expr>:</case>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:25">(<expr pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:15">val</name> <operator pos:start="81:17" pos:end="81:17">&amp;</operator> <literal type="number" pos:start="81:19" pos:end="81:24">0x8000</literal></expr>)</condition> <block pos:start="81:27" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:39">

            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:34">tx_status_fifo_used</name></name> <operator pos:start="83:36" pos:end="83:36">=</operator> <literal type="number" pos:start="83:38" pos:end="83:38">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:25">(<expr pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:15">val</name> <operator pos:start="87:17" pos:end="87:17">&amp;</operator> <literal type="number" pos:start="87:19" pos:end="87:24">0x4000</literal></expr>)</condition> <block pos:start="87:27" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:39">

            <expr_stmt pos:start="89:13" pos:end="89:36"><expr pos:start="89:13" pos:end="89:35"><name pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:18">txp</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:25">state</name></name> <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:35">TX_IDLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:34"><expr pos:start="91:13" pos:end="91:33"><name pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:18">txp</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:29">fifo_used</name></name> <operator pos:start="91:31" pos:end="91:31">=</operator> <literal type="number" pos:start="91:33" pos:end="91:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:39"><expr pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:18">txp</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:25">cmd_a</name></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <literal type="number" pos:start="93:29" pos:end="93:38">0xffffffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:17">tx_cfg</name></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:23">val</name> <operator pos:start="97:25" pos:end="97:25">&amp;</operator> <literal type="number" pos:start="97:27" pos:end="97:27">6</literal></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:20">case <expr pos:start="101:10" pos:end="101:19"><name pos:start="101:10" pos:end="101:19">CSR_HW_CFG</name></expr>:</case>

        <if_stmt pos:start="103:9" pos:end="113:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">val</name> <operator pos:start="103:17" pos:end="103:17">&amp;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">1</literal></expr>)</condition> <block pos:start="103:22" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:43">

            <comment type="block" pos:start="105:13" pos:end="105:22">/* SRST */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:43"><expr pos:start="107:13" pos:end="107:42"><call pos:start="107:13" pos:end="107:42"><name pos:start="107:13" pos:end="107:25">lan9118_reset</name><argument_list pos:start="107:26" pos:end="107:42">(<argument pos:start="107:27" pos:end="107:41"><expr pos:start="107:27" pos:end="107:41"><operator pos:start="107:27" pos:end="107:27">&amp;</operator><name pos:start="107:28" pos:end="107:41"><name pos:start="107:28" pos:end="107:28">s</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:36">busdev</name><operator pos:start="107:37" pos:end="107:37">.</operator><name pos:start="107:38" pos:end="107:41">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="113:9">else <block pos:start="109:16" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:62">

            <expr_stmt pos:start="111:13" pos:end="111:62"><expr pos:start="111:13" pos:end="111:61"><name pos:start="111:13" pos:end="111:21"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:21">hw_cfg</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <operator pos:start="111:25" pos:end="111:25">(</operator><name pos:start="111:26" pos:end="111:28">val</name> <operator pos:start="111:30" pos:end="111:30">&amp;</operator> <literal type="number" pos:start="111:32" pos:end="111:40">0x003f300</literal><operator pos:start="111:41" pos:end="111:41">)</operator> <operator pos:start="111:43" pos:end="111:43">|</operator> <operator pos:start="111:45" pos:end="111:45">(</operator><name pos:start="111:46" pos:end="111:54"><name pos:start="111:46" pos:end="111:46">s</name><operator pos:start="111:47" pos:end="111:48">-&gt;</operator><name pos:start="111:49" pos:end="111:54">hw_cfg</name></name> <operator pos:start="111:56" pos:end="111:56">&amp;</operator> <literal type="number" pos:start="111:58" pos:end="111:60">0x4</literal><operator pos:start="111:61" pos:end="111:61">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:24">case <expr pos:start="117:10" pos:end="117:23"><name pos:start="117:10" pos:end="117:23">CSR_RX_DP_CTRL</name></expr>:</case>

        <if_stmt pos:start="119:9" pos:end="147:9"><if pos:start="119:9" pos:end="147:9">if <condition pos:start="119:12" pos:end="119:29">(<expr pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:15">val</name> <operator pos:start="119:17" pos:end="119:17">&amp;</operator> <literal type="number" pos:start="119:19" pos:end="119:28">0x80000000</literal></expr>)</condition> <block pos:start="119:31" pos:end="147:9">{<block_content pos:start="123:13" pos:end="145:13">

            <comment type="block" pos:start="121:13" pos:end="121:47">/* Skip forward to next packet.  */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:27"><expr pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:22">rxp_pad</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <literal type="number" pos:start="123:26" pos:end="123:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:30"><expr pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:25"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:25">rxp_offset</name></name> <operator pos:start="125:27" pos:end="125:27">=</operator> <literal type="number" pos:start="125:29" pos:end="125:29">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="137:13"><if pos:start="127:13" pos:end="137:13">if <condition pos:start="127:16" pos:end="127:33">(<expr pos:start="127:17" pos:end="127:32"><name pos:start="127:17" pos:end="127:27"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:27">rxp_size</name></name> <operator pos:start="127:29" pos:end="127:30">==</operator> <literal type="number" pos:start="127:32" pos:end="127:32">0</literal></expr>)</condition> <block pos:start="127:35" pos:end="137:13">{<block_content pos:start="131:17" pos:end="135:34">

                <comment type="block" pos:start="129:17" pos:end="129:59">/* Pop a word to start the next packet.  */</comment>

                <expr_stmt pos:start="131:17" pos:end="131:31"><expr pos:start="131:17" pos:end="131:30"><call pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:27">rx_fifo_pop</name><argument_list pos:start="131:28" pos:end="131:30">(<argument pos:start="131:29" pos:end="131:29"><expr pos:start="131:29" pos:end="131:29"><name pos:start="131:29" pos:end="131:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:31"><expr pos:start="133:17" pos:end="133:30"><name pos:start="133:17" pos:end="133:26"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:26">rxp_pad</name></name> <operator pos:start="133:28" pos:end="133:28">=</operator> <literal type="number" pos:start="133:30" pos:end="133:30">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:34"><expr pos:start="135:17" pos:end="135:33"><name pos:start="135:17" pos:end="135:29"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:29">rxp_offset</name></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <literal type="number" pos:start="135:33" pos:end="135:33">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:43"><expr pos:start="139:13" pos:end="139:42"><name pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:27">rx_fifo_head</name></name> <operator pos:start="139:29" pos:end="139:30">+=</operator> <name pos:start="139:32" pos:end="139:42"><name pos:start="139:32" pos:end="139:32">s</name><operator pos:start="139:33" pos:end="139:34">-&gt;</operator><name pos:start="139:35" pos:end="139:42">rxp_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="145:13"><if pos:start="141:13" pos:end="145:13">if <condition pos:start="141:16" pos:end="141:51">(<expr pos:start="141:17" pos:end="141:50"><name pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:17">s</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:31">rx_fifo_head</name></name> <operator pos:start="141:33" pos:end="141:34">&gt;=</operator> <name pos:start="141:36" pos:end="141:50"><name pos:start="141:36" pos:end="141:36">s</name><operator pos:start="141:37" pos:end="141:38">-&gt;</operator><name pos:start="141:39" pos:end="141:50">rx_fifo_size</name></name></expr>)</condition> <block pos:start="141:53" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:51">

                <expr_stmt pos:start="143:17" pos:end="143:51"><expr pos:start="143:17" pos:end="143:50"><name pos:start="143:17" pos:end="143:31"><name pos:start="143:17" pos:end="143:17">s</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:31">rx_fifo_head</name></name> <operator pos:start="143:33" pos:end="143:34">-=</operator> <name pos:start="143:36" pos:end="143:50"><name pos:start="143:36" pos:end="143:36">s</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:50">rx_fifo_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:22">case <expr pos:start="151:10" pos:end="151:21"><name pos:start="151:10" pos:end="151:21">CSR_PMT_CTRL</name></expr>:</case>

        <if_stmt pos:start="153:9" pos:end="157:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:24">(<expr pos:start="153:13" pos:end="153:23"><name pos:start="153:13" pos:end="153:15">val</name> <operator pos:start="153:17" pos:end="153:17">&amp;</operator> <literal type="number" pos:start="153:19" pos:end="153:23">0x400</literal></expr>)</condition> <block pos:start="153:26" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:25">

            <expr_stmt pos:start="155:13" pos:end="155:25"><expr pos:start="155:13" pos:end="155:24"><call pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:21">phy_reset</name><argument_list pos:start="155:22" pos:end="155:24">(<argument pos:start="155:23" pos:end="155:23"><expr pos:start="155:23" pos:end="155:23"><name pos:start="155:23" pos:end="155:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:30"><expr pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:19">pmt_ctrl</name></name> <operator pos:start="159:21" pos:end="159:22">&amp;=</operator> <operator pos:start="159:24" pos:end="159:24">~</operator><literal type="number" pos:start="159:25" pos:end="159:29">0x34e</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:37"><expr pos:start="161:9" pos:end="161:36"><name pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:19">pmt_ctrl</name></name> <operator pos:start="161:21" pos:end="161:22">|=</operator> <operator pos:start="161:24" pos:end="161:24">(</operator><name pos:start="161:25" pos:end="161:27">val</name> <operator pos:start="161:29" pos:end="161:29">&amp;</operator> <literal type="number" pos:start="161:31" pos:end="161:35">0x34e</literal><operator pos:start="161:36" pos:end="161:36">)</operator></expr>;</expr_stmt>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <case pos:start="165:5" pos:end="165:22">case <expr pos:start="165:10" pos:end="165:21"><name pos:start="165:10" pos:end="165:21">CSR_GPIO_CFG</name></expr>:</case>

        <comment type="block" pos:start="167:9" pos:end="167:43">/* Probably just enabling LEDs.  */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:39"><expr pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:19">gpio_cfg</name></name> <operator pos:start="169:21" pos:end="169:21">=</operator> <name pos:start="169:23" pos:end="169:25">val</name> <operator pos:start="169:27" pos:end="169:27">&amp;</operator> <literal type="number" pos:start="169:29" pos:end="169:38">0x7777071f</literal></expr>;</expr_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>

    <case pos:start="173:5" pos:end="173:21">case <expr pos:start="173:10" pos:end="173:20"><name pos:start="173:10" pos:end="173:20">CSR_GPT_CFG</name></expr>:</case>

        <if_stmt pos:start="175:9" pos:end="191:9"><if pos:start="175:9" pos:end="191:9">if <condition pos:start="175:12" pos:end="175:46">(<expr pos:start="175:13" pos:end="175:45"><operator pos:start="175:13" pos:end="175:13">(</operator><name pos:start="175:14" pos:end="175:23"><name pos:start="175:14" pos:end="175:14">s</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:23">gpt_cfg</name></name> <operator pos:start="175:25" pos:end="175:25">^</operator> <name pos:start="175:27" pos:end="175:29">val</name><operator pos:start="175:30" pos:end="175:30">)</operator> <operator pos:start="175:32" pos:end="175:32">&amp;</operator> <name pos:start="175:34" pos:end="175:45">GPT_TIMER_EN</name></expr>)</condition> <block pos:start="175:48" pos:end="191:9">{<block_content pos:start="177:13" pos:end="189:13">

            <if_stmt pos:start="177:13" pos:end="189:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:35">(<expr pos:start="177:17" pos:end="177:34"><name pos:start="177:17" pos:end="177:19">val</name> <operator pos:start="177:21" pos:end="177:21">&amp;</operator> <name pos:start="177:23" pos:end="177:34">GPT_TIMER_EN</name></expr>)</condition> <block pos:start="177:37" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:40">

                <expr_stmt pos:start="179:17" pos:end="179:57"><expr pos:start="179:17" pos:end="179:56"><call pos:start="179:17" pos:end="179:56"><name pos:start="179:17" pos:end="179:32">ptimer_set_count</name><argument_list pos:start="179:33" pos:end="179:56">(<argument pos:start="179:34" pos:end="179:41"><expr pos:start="179:34" pos:end="179:41"><name pos:start="179:34" pos:end="179:41"><name pos:start="179:34" pos:end="179:34">s</name><operator pos:start="179:35" pos:end="179:36">-&gt;</operator><name pos:start="179:37" pos:end="179:41">timer</name></name></expr></argument>, <argument pos:start="179:44" pos:end="179:55"><expr pos:start="179:44" pos:end="179:55"><name pos:start="179:44" pos:end="179:46">val</name> <operator pos:start="179:48" pos:end="179:48">&amp;</operator> <literal type="number" pos:start="179:50" pos:end="179:55">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:40"><expr pos:start="181:17" pos:end="181:39"><call pos:start="181:17" pos:end="181:39"><name pos:start="181:17" pos:end="181:26">ptimer_run</name><argument_list pos:start="181:27" pos:end="181:39">(<argument pos:start="181:28" pos:end="181:35"><expr pos:start="181:28" pos:end="181:35"><name pos:start="181:28" pos:end="181:35"><name pos:start="181:28" pos:end="181:28">s</name><operator pos:start="181:29" pos:end="181:30">-&gt;</operator><name pos:start="181:31" pos:end="181:35">timer</name></name></expr></argument>, <argument pos:start="181:38" pos:end="181:38"><expr pos:start="181:38" pos:end="181:38"><literal type="number" pos:start="181:38" pos:end="181:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="183:15" pos:end="189:13">else <block pos:start="183:20" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:51">

                <expr_stmt pos:start="185:17" pos:end="185:38"><expr pos:start="185:17" pos:end="185:37"><call pos:start="185:17" pos:end="185:37"><name pos:start="185:17" pos:end="185:27">ptimer_stop</name><argument_list pos:start="185:28" pos:end="185:37">(<argument pos:start="185:29" pos:end="185:36"><expr pos:start="185:29" pos:end="185:36"><name pos:start="185:29" pos:end="185:36"><name pos:start="185:29" pos:end="185:29">s</name><operator pos:start="185:30" pos:end="185:31">-&gt;</operator><name pos:start="185:32" pos:end="185:36">timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:51"><expr pos:start="187:17" pos:end="187:50"><call pos:start="187:17" pos:end="187:50"><name pos:start="187:17" pos:end="187:32">ptimer_set_count</name><argument_list pos:start="187:33" pos:end="187:50">(<argument pos:start="187:34" pos:end="187:41"><expr pos:start="187:34" pos:end="187:41"><name pos:start="187:34" pos:end="187:41"><name pos:start="187:34" pos:end="187:34">s</name><operator pos:start="187:35" pos:end="187:36">-&gt;</operator><name pos:start="187:37" pos:end="187:41">timer</name></name></expr></argument>, <argument pos:start="187:44" pos:end="187:49"><expr pos:start="187:44" pos:end="187:49"><literal type="number" pos:start="187:44" pos:end="187:49">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:51"><expr pos:start="193:9" pos:end="193:50"><name pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:18">gpt_cfg</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:24">val</name> <operator pos:start="193:26" pos:end="193:26">&amp;</operator> <operator pos:start="193:28" pos:end="193:28">(</operator><name pos:start="193:29" pos:end="193:40">GPT_TIMER_EN</name> <operator pos:start="193:42" pos:end="193:42">|</operator> <literal type="number" pos:start="193:44" pos:end="193:49">0xffff</literal><operator pos:start="193:50" pos:end="193:50">)</operator></expr>;</expr_stmt>

        <break pos:start="195:9" pos:end="195:14">break;</break>

    <case pos:start="197:5" pos:end="197:23">case <expr pos:start="197:10" pos:end="197:22"><name pos:start="197:10" pos:end="197:22">CSR_WORD_SWAP</name></expr>:</case>

        <comment type="block" pos:start="199:9" pos:end="199:52">/* Ignored because we're in 32-bit mode.  */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:27"><expr pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:20"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:20">word_swap</name></name> <operator pos:start="201:22" pos:end="201:22">=</operator> <name pos:start="201:24" pos:end="201:26">val</name></expr>;</expr_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:25">case <expr pos:start="205:10" pos:end="205:24"><name pos:start="205:10" pos:end="205:24">CSR_MAC_CSR_CMD</name></expr>:</case>

        <expr_stmt pos:start="207:9" pos:end="207:38"><expr pos:start="207:9" pos:end="207:37"><name pos:start="207:9" pos:end="207:18"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:18">mac_cmd</name></name> <operator pos:start="207:20" pos:end="207:20">=</operator> <name pos:start="207:22" pos:end="207:24">val</name> <operator pos:start="207:26" pos:end="207:26">&amp;</operator> <literal type="number" pos:start="207:28" pos:end="207:37">0x4000000f</literal></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="225:9"><if pos:start="209:9" pos:end="225:9">if <condition pos:start="209:12" pos:end="209:29">(<expr pos:start="209:13" pos:end="209:28"><name pos:start="209:13" pos:end="209:15">val</name> <operator pos:start="209:17" pos:end="209:17">&amp;</operator> <literal type="number" pos:start="209:19" pos:end="209:28">0x80000000</literal></expr>)</condition> <block pos:start="209:31" pos:end="225:9">{<block_content pos:start="211:13" pos:end="223:13">

            <if_stmt pos:start="211:13" pos:end="223:13"><if pos:start="211:13" pos:end="217:13">if <condition pos:start="211:16" pos:end="211:33">(<expr pos:start="211:17" pos:end="211:32"><name pos:start="211:17" pos:end="211:19">val</name> <operator pos:start="211:21" pos:end="211:21">&amp;</operator> <literal type="number" pos:start="211:23" pos:end="211:32">0x40000000</literal></expr>)</condition> <block pos:start="211:35" pos:end="217:13">{<block_content pos:start="213:17" pos:end="215:74">

                <expr_stmt pos:start="213:17" pos:end="213:56"><expr pos:start="213:17" pos:end="213:55"><name pos:start="213:17" pos:end="213:27"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:27">mac_data</name></name> <operator pos:start="213:29" pos:end="213:29">=</operator> <call pos:start="213:31" pos:end="213:55"><name pos:start="213:31" pos:end="213:41">do_mac_read</name><argument_list pos:start="213:42" pos:end="213:55">(<argument pos:start="213:43" pos:end="213:43"><expr pos:start="213:43" pos:end="213:43"><name pos:start="213:43" pos:end="213:43">s</name></expr></argument>, <argument pos:start="213:46" pos:end="213:54"><expr pos:start="213:46" pos:end="213:54"><name pos:start="213:46" pos:end="213:48">val</name> <operator pos:start="213:50" pos:end="213:50">&amp;</operator> <literal type="number" pos:start="213:52" pos:end="213:54">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:74"><expr pos:start="215:17" pos:end="215:73"><call pos:start="215:17" pos:end="215:73"><name pos:start="215:17" pos:end="215:23">DPRINTF</name><argument_list pos:start="215:24" pos:end="215:73">(<argument pos:start="215:25" pos:end="215:48"><expr pos:start="215:25" pos:end="215:48"><literal type="string" pos:start="215:25" pos:end="215:48">"MAC read %d = 0x%08x\n"</literal></expr></argument>, <argument pos:start="215:51" pos:end="215:59"><expr pos:start="215:51" pos:end="215:59"><name pos:start="215:51" pos:end="215:53">val</name> <operator pos:start="215:55" pos:end="215:55">&amp;</operator> <literal type="number" pos:start="215:57" pos:end="215:59">0xf</literal></expr></argument>, <argument pos:start="215:62" pos:end="215:72"><expr pos:start="215:62" pos:end="215:72"><name pos:start="215:62" pos:end="215:72"><name pos:start="215:62" pos:end="215:62">s</name><operator pos:start="215:63" pos:end="215:64">-&gt;</operator><name pos:start="215:65" pos:end="215:72">mac_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="217:15" pos:end="223:13">else <block pos:start="217:20" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:56">

                <expr_stmt pos:start="219:17" pos:end="219:75"><expr pos:start="219:17" pos:end="219:74"><call pos:start="219:17" pos:end="219:74"><name pos:start="219:17" pos:end="219:23">DPRINTF</name><argument_list pos:start="219:24" pos:end="219:74">(<argument pos:start="219:25" pos:end="219:49"><expr pos:start="219:25" pos:end="219:49"><literal type="string" pos:start="219:25" pos:end="219:49">"MAC write %d = 0x%08x\n"</literal></expr></argument>, <argument pos:start="219:52" pos:end="219:60"><expr pos:start="219:52" pos:end="219:60"><name pos:start="219:52" pos:end="219:54">val</name> <operator pos:start="219:56" pos:end="219:56">&amp;</operator> <literal type="number" pos:start="219:58" pos:end="219:60">0xf</literal></expr></argument>, <argument pos:start="219:63" pos:end="219:73"><expr pos:start="219:63" pos:end="219:73"><name pos:start="219:63" pos:end="219:73"><name pos:start="219:63" pos:end="219:63">s</name><operator pos:start="219:64" pos:end="219:65">-&gt;</operator><name pos:start="219:66" pos:end="219:73">mac_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:56"><expr pos:start="221:17" pos:end="221:55"><call pos:start="221:17" pos:end="221:55"><name pos:start="221:17" pos:end="221:28">do_mac_write</name><argument_list pos:start="221:29" pos:end="221:55">(<argument pos:start="221:30" pos:end="221:30"><expr pos:start="221:30" pos:end="221:30"><name pos:start="221:30" pos:end="221:30">s</name></expr></argument>, <argument pos:start="221:33" pos:end="221:41"><expr pos:start="221:33" pos:end="221:41"><name pos:start="221:33" pos:end="221:35">val</name> <operator pos:start="221:37" pos:end="221:37">&amp;</operator> <literal type="number" pos:start="221:39" pos:end="221:41">0xf</literal></expr></argument>, <argument pos:start="221:44" pos:end="221:54"><expr pos:start="221:44" pos:end="221:54"><name pos:start="221:44" pos:end="221:54"><name pos:start="221:44" pos:end="221:44">s</name><operator pos:start="221:45" pos:end="221:46">-&gt;</operator><name pos:start="221:47" pos:end="221:54">mac_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    <case pos:start="229:5" pos:end="229:26">case <expr pos:start="229:10" pos:end="229:25"><name pos:start="229:10" pos:end="229:25">CSR_MAC_CSR_DATA</name></expr>:</case>

        <expr_stmt pos:start="231:9" pos:end="231:26"><expr pos:start="231:9" pos:end="231:25"><name pos:start="231:9" pos:end="231:19"><name pos:start="231:9" pos:end="231:9">s</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:19">mac_data</name></name> <operator pos:start="231:21" pos:end="231:21">=</operator> <name pos:start="231:23" pos:end="231:25">val</name></expr>;</expr_stmt>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:21">case <expr pos:start="235:10" pos:end="235:20"><name pos:start="235:10" pos:end="235:20">CSR_AFC_CFG</name></expr>:</case>

        <expr_stmt pos:start="237:9" pos:end="237:38"><expr pos:start="237:9" pos:end="237:37"><name pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:9">s</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:18">afc_cfg</name></name> <operator pos:start="237:20" pos:end="237:20">=</operator> <name pos:start="237:22" pos:end="237:24">val</name> <operator pos:start="237:26" pos:end="237:26">&amp;</operator> <literal type="number" pos:start="237:28" pos:end="237:37">0x00ffffff</literal></expr>;</expr_stmt>

        <break pos:start="239:9" pos:end="239:14">break;</break>

    <case pos:start="241:5" pos:end="241:21">case <expr pos:start="241:10" pos:end="241:20"><name pos:start="241:10" pos:end="241:20">CSR_E2P_CMD</name></expr>:</case>

        <expr_stmt pos:start="243:9" pos:end="243:59"><expr pos:start="243:9" pos:end="243:58"><call pos:start="243:9" pos:end="243:58"><name pos:start="243:9" pos:end="243:26">lan9118_eeprom_cmd</name><argument_list pos:start="243:27" pos:end="243:58">(<argument pos:start="243:28" pos:end="243:28"><expr pos:start="243:28" pos:end="243:28"><name pos:start="243:28" pos:end="243:28">s</name></expr></argument>, <argument pos:start="243:31" pos:end="243:45"><expr pos:start="243:31" pos:end="243:45"><operator pos:start="243:31" pos:end="243:31">(</operator><name pos:start="243:32" pos:end="243:34">val</name> <operator pos:start="243:36" pos:end="243:37">&gt;&gt;</operator> <literal type="number" pos:start="243:39" pos:end="243:40">28</literal><operator pos:start="243:41" pos:end="243:41">)</operator> <operator pos:start="243:43" pos:end="243:43">&amp;</operator> <literal type="number" pos:start="243:45" pos:end="243:45">7</literal></expr></argument>, <argument pos:start="243:48" pos:end="243:57"><expr pos:start="243:48" pos:end="243:57"><name pos:start="243:48" pos:end="243:50">val</name> <operator pos:start="243:52" pos:end="243:52">&amp;</operator> <literal type="number" pos:start="243:54" pos:end="243:57">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="245:9" pos:end="245:14">break;</break>

    <case pos:start="247:5" pos:end="247:22">case <expr pos:start="247:10" pos:end="247:21"><name pos:start="247:10" pos:end="247:21">CSR_E2P_DATA</name></expr>:</case>

        <expr_stmt pos:start="249:9" pos:end="249:33"><expr pos:start="249:9" pos:end="249:32"><name pos:start="249:9" pos:end="249:19"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:19">e2p_data</name></name> <operator pos:start="249:21" pos:end="249:21">=</operator> <name pos:start="249:23" pos:end="249:25">val</name> <operator pos:start="249:27" pos:end="249:27">&amp;</operator> <literal type="number" pos:start="249:29" pos:end="249:32">0xff</literal></expr>;</expr_stmt>

        <break pos:start="251:9" pos:end="251:14">break;</break>



    <default pos:start="255:5" pos:end="255:12">default:</default>

        <expr_stmt pos:start="257:9" pos:end="257:78"><expr pos:start="257:9" pos:end="257:77"><call pos:start="257:9" pos:end="257:77"><name pos:start="257:9" pos:end="257:16">hw_error</name><argument_list pos:start="257:17" pos:end="257:77">(<argument pos:start="257:18" pos:end="257:53"><expr pos:start="257:18" pos:end="257:53"><literal type="string" pos:start="257:18" pos:end="257:53">"lan9118_write: Bad reg 0x%x = %x\n"</literal></expr></argument>, <argument pos:start="257:56" pos:end="257:66"><expr pos:start="257:56" pos:end="257:66"><operator pos:start="257:56" pos:end="257:56">(</operator><name pos:start="257:57" pos:end="257:59">int</name><operator pos:start="257:60" pos:end="257:60">)</operator><name pos:start="257:61" pos:end="257:66">offset</name></expr></argument>, <argument pos:start="257:69" pos:end="257:76"><expr pos:start="257:69" pos:end="257:76"><operator pos:start="257:69" pos:end="257:69">(</operator><name pos:start="257:70" pos:end="257:72">int</name><operator pos:start="257:73" pos:end="257:73">)</operator><name pos:start="257:74" pos:end="257:76">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="259:9" pos:end="259:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="263:5" pos:end="263:22"><expr pos:start="263:5" pos:end="263:21"><call pos:start="263:5" pos:end="263:21"><name pos:start="263:5" pos:end="263:18">lan9118_update</name><argument_list pos:start="263:19" pos:end="263:21">(<argument pos:start="263:20" pos:end="263:20"><expr pos:start="263:20" pos:end="263:20"><name pos:start="263:20" pos:end="263:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
