<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24249.c" pos:tabs="8"><function pos:start="1:1" pos:end="343:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">flush_packet</name><parameter_list pos:start="1:25" pos:end="3:63">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:40">AVFormatContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:63"><decl pos:start="1:48" pos:end="1:63"><type pos:start="1:48" pos:end="1:63"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:63">stream_index</name></decl></parameter>, 

                         <parameter pos:start="3:26" pos:end="3:36"><decl pos:start="3:26" pos:end="3:36"><type pos:start="3:26" pos:end="3:36"><name pos:start="3:26" pos:end="3:32">int64_t</name></type> <name pos:start="3:34" pos:end="3:36">pts</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:45">int64_t</name></type> <name pos:start="3:47" pos:end="3:49">dts</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:62"><decl pos:start="3:52" pos:end="3:62"><type pos:start="3:52" pos:end="3:62"><name pos:start="3:52" pos:end="3:58">int64_t</name></type> <name pos:start="3:60" pos:end="3:62">scr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="343:1">{<block_content pos:start="7:5" pos:end="341:35">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegMuxContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:38">= <expr pos:start="7:25" pos:end="7:38"><name pos:start="7:25" pos:end="7:38"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:62"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">StreamInfo</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">stream</name> <init pos:start="9:24" pos:end="9:62">= <expr pos:start="9:26" pos:end="9:62"><name pos:start="9:26" pos:end="9:51"><name pos:start="9:26" pos:end="9:28">ctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:37">streams</name><index pos:start="9:38" pos:end="9:51">[<expr pos:start="9:39" pos:end="9:50"><name pos:start="9:39" pos:end="9:50">stream_index</name></expr>]</index></name><operator pos:start="9:52" pos:end="9:53">-&gt;</operator><name pos:start="9:54" pos:end="9:62">priv_data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:72"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name></decl>, <decl pos:start="13:15" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:26">payload_size</name></decl>, <decl pos:start="13:29" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:29" pos:end="13:37">startcode</name></decl>, <decl pos:start="13:40" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:40" pos:end="13:41">id</name></decl>, <decl pos:start="13:44" pos:end="13:56"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:44" pos:end="13:56">stuffing_size</name></decl>, <decl pos:start="13:59" pos:end="13:59"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:59" pos:end="13:59">i</name></decl>, <decl pos:start="13:62" pos:end="13:71"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:62" pos:end="13:71">header_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">packet_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:18">buffer</name><index pos:start="17:19" pos:end="17:23">[<expr pos:start="17:20" pos:end="17:22"><literal type="number" pos:start="17:20" pos:end="17:22">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">zero_trail_bytes</name> <init pos:start="19:26" pos:end="19:28">= <expr pos:start="19:28" pos:end="19:28"><literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:24">pad_packet_bytes</name> <init pos:start="21:26" pos:end="21:28">= <expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr></init></decl>;</decl_stmt>

    

    <expr_stmt pos:start="25:5" pos:end="36:0"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:6">id</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:19"><name pos:start="25:10" pos:end="25:15">stream</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:19">id</name></name></expr>;</expr_stmt>

    

<cpp:if pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:5"><literal type="number" pos:start="29:5" pos:end="29:5">0</literal></expr></cpp:if>

    printf("packet ID=%2x PTS=%0.3f\n", 

           id, pts / 90000.0);

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:11">buf_ptr</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:20">buffer</name></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="83:5"><if pos:start="43:5" pos:end="83:5">if <condition pos:start="43:8" pos:end="43:56">(<expr pos:start="43:9" pos:end="43:55"><operator pos:start="43:9" pos:end="43:9">(</operator><operator pos:start="43:10" pos:end="43:10">(</operator><name pos:start="43:11" pos:end="43:26"><name pos:start="43:11" pos:end="43:11">s</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:26">packet_number</name></name> <operator pos:start="43:28" pos:end="43:28">%</operator> <name pos:start="43:30" pos:end="43:48"><name pos:start="43:30" pos:end="43:30">s</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:48">pack_header_freq</name></name><operator pos:start="43:49" pos:end="43:49">)</operator> <operator pos:start="43:51" pos:end="43:52">==</operator> <literal type="number" pos:start="43:54" pos:end="43:54">0</literal><operator pos:start="43:55" pos:end="43:55">)</operator></expr>)</condition> <block pos:start="43:58" pos:end="83:5">{<block_content pos:start="47:9" pos:end="81:9">

        <comment type="block" pos:start="45:9" pos:end="45:54">/* output pack and systems header if needed */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:50"><expr pos:start="47:9" pos:end="47:49"><name pos:start="47:9" pos:end="47:12">size</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:49"><name pos:start="47:16" pos:end="47:30">put_pack_header</name><argument_list pos:start="47:31" pos:end="47:49">(<argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:34">ctx</name></expr></argument>, <argument pos:start="47:37" pos:end="47:43"><expr pos:start="47:37" pos:end="47:43"><name pos:start="47:37" pos:end="47:43">buf_ptr</name></expr></argument>, <argument pos:start="47:46" pos:end="47:48"><expr pos:start="47:46" pos:end="47:48"><name pos:start="47:46" pos:end="47:48">scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:24"><expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:15">buf_ptr</name> <operator pos:start="49:17" pos:end="49:18">+=</operator> <name pos:start="49:20" pos:end="49:23">size</name></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="81:9"><if pos:start="53:9" pos:end="71:9">if <condition pos:start="53:12" pos:end="53:22">(<expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:21">is_vcd</name></name></expr>)</condition> <block pos:start="53:24" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:13">

            <comment type="block" pos:start="55:13" pos:end="59:66">/* there is exactly one system header for each stream in a VCD MPEG,

               One in the very first video packet and one in the very first

               audio packet (see VCD standard p. IV-7 and IV-8).*/</comment>

            

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:41">(<expr pos:start="63:17" pos:end="63:40"><name pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:22">stream</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:37">packet_number</name></name><operator pos:start="63:38" pos:end="63:39">==</operator><literal type="number" pos:start="63:40" pos:end="63:40">0</literal></expr>)</condition> <block pos:start="63:43" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:32">

                <expr_stmt pos:start="65:17" pos:end="65:59"><expr pos:start="65:17" pos:end="65:58"><name pos:start="65:17" pos:end="65:20">size</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:58"><name pos:start="65:24" pos:end="65:40">put_system_header</name><argument_list pos:start="65:41" pos:end="65:58">(<argument pos:start="65:42" pos:end="65:44"><expr pos:start="65:42" pos:end="65:44"><name pos:start="65:42" pos:end="65:44">ctx</name></expr></argument>, <argument pos:start="65:47" pos:end="65:53"><expr pos:start="65:47" pos:end="65:53"><name pos:start="65:47" pos:end="65:53">buf_ptr</name></expr></argument>, <argument pos:start="65:56" pos:end="65:57"><expr pos:start="65:56" pos:end="65:57"><name pos:start="65:56" pos:end="65:57">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:23">buf_ptr</name> <operator pos:start="67:25" pos:end="67:26">+=</operator> <name pos:start="67:28" pos:end="67:31">size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="81:9">else <block pos:start="71:16" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:13">

            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:64">(<expr pos:start="73:17" pos:end="73:63"><operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:33"><name pos:start="73:18" pos:end="73:18">s</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:33">packet_number</name></name> <operator pos:start="73:35" pos:end="73:35">%</operator> <name pos:start="73:37" pos:end="73:57"><name pos:start="73:37" pos:end="73:37">s</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:57">system_header_freq</name></name><operator pos:start="73:58" pos:end="73:58">)</operator> <operator pos:start="73:60" pos:end="73:61">==</operator> <literal type="number" pos:start="73:63" pos:end="73:63">0</literal></expr>)</condition> <block pos:start="73:66" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:32">

                <expr_stmt pos:start="75:17" pos:end="75:58"><expr pos:start="75:17" pos:end="75:57"><name pos:start="75:17" pos:end="75:20">size</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:57"><name pos:start="75:24" pos:end="75:40">put_system_header</name><argument_list pos:start="75:41" pos:end="75:57">(<argument pos:start="75:42" pos:end="75:44"><expr pos:start="75:42" pos:end="75:44"><name pos:start="75:42" pos:end="75:44">ctx</name></expr></argument>, <argument pos:start="75:47" pos:end="75:53"><expr pos:start="75:47" pos:end="75:53"><name pos:start="75:47" pos:end="75:53">buf_ptr</name></expr></argument>, <argument pos:start="75:56" pos:end="75:56"><expr pos:start="75:56" pos:end="75:56"><literal type="number" pos:start="75:56" pos:end="75:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:32"><expr pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:23">buf_ptr</name> <operator pos:start="77:25" pos:end="77:26">+=</operator> <name pos:start="77:28" pos:end="77:31">size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:28"><expr pos:start="85:5" pos:end="85:27"><name pos:start="85:5" pos:end="85:8">size</name> <operator pos:start="85:10" pos:end="85:10">=</operator> <name pos:start="85:12" pos:end="85:18">buf_ptr</name> <operator pos:start="85:20" pos:end="85:20">-</operator> <name pos:start="85:22" pos:end="85:27">buffer</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:39"><expr pos:start="87:5" pos:end="87:38"><call pos:start="87:5" pos:end="87:38"><name pos:start="87:5" pos:end="87:14">put_buffer</name><argument_list pos:start="87:15" pos:end="87:38">(<argument pos:start="87:16" pos:end="87:23"><expr pos:start="87:16" pos:end="87:23"><operator pos:start="87:16" pos:end="87:16">&amp;</operator><name pos:start="87:17" pos:end="87:23"><name pos:start="87:17" pos:end="87:19">ctx</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:23">pb</name></name></expr></argument>, <argument pos:start="87:26" pos:end="87:31"><expr pos:start="87:26" pos:end="87:31"><name pos:start="87:26" pos:end="87:31">buffer</name></expr></argument>, <argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:40"><expr pos:start="91:5" pos:end="91:39"><name pos:start="91:5" pos:end="91:15">packet_size</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <name pos:start="91:19" pos:end="91:32"><name pos:start="91:19" pos:end="91:19">s</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:32">packet_size</name></name> <operator pos:start="91:34" pos:end="91:34">-</operator> <name pos:start="91:36" pos:end="91:39">size</name></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="101:31"><if pos:start="95:5" pos:end="101:31">if <condition pos:start="95:8" pos:end="95:36">(<expr pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">is_vcd</name></name> <operator pos:start="95:19" pos:end="95:20">&amp;&amp;</operator> <name pos:start="95:22" pos:end="95:23">id</name> <operator pos:start="95:25" pos:end="95:26">==</operator> <name pos:start="95:28" pos:end="95:35">AUDIO_ID</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:31"><block_content pos:start="101:9" pos:end="101:31">

        <comment type="block" pos:start="97:9" pos:end="99:52">/* The VCD standard demands that 20 zero bytes follow

           each audio pack (see standard p. IV-8).*/</comment>

        <expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:24">zero_trail_bytes</name> <operator pos:start="101:26" pos:end="101:27">+=</operator> <literal type="number" pos:start="101:29" pos:end="101:30">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            

    <if_stmt pos:start="105:5" pos:end="117:5"><if pos:start="105:5" pos:end="117:5">if <condition pos:start="105:8" pos:end="105:46">(<expr pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:17">is_vcd</name></name> <operator pos:start="105:19" pos:end="105:20">&amp;&amp;</operator> <name pos:start="105:22" pos:end="105:42"><name pos:start="105:22" pos:end="105:27">stream</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:42">packet_number</name></name><operator pos:start="105:43" pos:end="105:44">==</operator><literal type="number" pos:start="105:45" pos:end="105:45">0</literal></expr>)</condition> <block pos:start="105:48" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:58">

        <comment type="block" pos:start="107:9" pos:end="113:21">/* the first pack of each stream contains only the pack header,

           the system header and lots of padding (see VCD standard p. IV-6).

           In the case of an audio pack, 20 zero bytes are also added at

           the end.*/</comment>

        <expr_stmt pos:start="115:9" pos:end="115:58"><expr pos:start="115:9" pos:end="115:57"><name pos:start="115:9" pos:end="115:24">pad_packet_bytes</name> <operator pos:start="115:26" pos:end="115:26">=</operator> <name pos:start="115:28" pos:end="115:38">packet_size</name> <operator pos:start="115:40" pos:end="115:40">-</operator> <name pos:start="115:42" pos:end="115:57">zero_trail_bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:55"><expr pos:start="121:5" pos:end="121:54"><name pos:start="121:5" pos:end="121:15">packet_size</name> <operator pos:start="121:17" pos:end="121:18">-=</operator> <name pos:start="121:20" pos:end="121:35">pad_packet_bytes</name> <operator pos:start="121:37" pos:end="121:37">+</operator> <name pos:start="121:39" pos:end="121:54">zero_trail_bytes</name></expr>;</expr_stmt>



    <if_stmt pos:start="125:5" pos:end="315:5"><if pos:start="125:5" pos:end="315:5">if <condition pos:start="125:8" pos:end="125:24">(<expr pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:19">packet_size</name> <operator pos:start="125:21" pos:end="125:21">&gt;</operator> <literal type="number" pos:start="125:23" pos:end="125:23">0</literal></expr>)</condition> <block pos:start="125:26" pos:end="315:5">{<block_content pos:start="131:9" pos:end="313:75">



        <comment type="block" pos:start="129:9" pos:end="129:32">/* packet header size */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:25"><expr pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:19">packet_size</name> <operator pos:start="131:21" pos:end="131:22">-=</operator> <literal type="number" pos:start="131:24" pos:end="131:24">6</literal></expr>;</expr_stmt>

        

        <comment type="block" pos:start="135:9" pos:end="135:27">/* packet header */</comment>

        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:24">(<expr pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="137:26" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:27">

            <expr_stmt pos:start="139:13" pos:end="139:27"><expr pos:start="139:13" pos:end="139:26"><name pos:start="139:13" pos:end="139:22">header_len</name> <operator pos:start="139:24" pos:end="139:24">=</operator> <literal type="number" pos:start="139:26" pos:end="139:26">3</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="145:9">else <block pos:start="141:16" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:27">

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:22">header_len</name> <operator pos:start="143:24" pos:end="143:24">=</operator> <literal type="number" pos:start="143:26" pos:end="143:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="147:9" pos:end="163:9"><if pos:start="147:9" pos:end="157:9">if <condition pos:start="147:12" pos:end="147:34">(<expr pos:start="147:13" pos:end="147:33"><name pos:start="147:13" pos:end="147:15">pts</name> <operator pos:start="147:17" pos:end="147:18">!=</operator> <name pos:start="147:20" pos:end="147:33">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="147:36" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:32">

            <if_stmt pos:start="149:13" pos:end="155:32"><if pos:start="149:13" pos:end="151:36">if <condition pos:start="149:16" pos:end="149:27">(<expr pos:start="149:17" pos:end="149:26"><name pos:start="149:17" pos:end="149:19">dts</name> <operator pos:start="149:21" pos:end="149:22">!=</operator> <name pos:start="149:24" pos:end="149:26">pts</name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:36"><block_content pos:start="151:17" pos:end="151:36">

                <expr_stmt pos:start="151:17" pos:end="151:36"><expr pos:start="151:17" pos:end="151:35"><name pos:start="151:17" pos:end="151:26">header_len</name> <operator pos:start="151:28" pos:end="151:29">+=</operator> <literal type="number" pos:start="151:31" pos:end="151:33">5</literal> <operator pos:start="151:33" pos:end="151:33">+</operator> <literal type="number" pos:start="151:35" pos:end="151:35">5</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="153:13" pos:end="155:32">else<block type="pseudo" pos:start="155:17" pos:end="155:32"><block_content pos:start="155:17" pos:end="155:32">

                <expr_stmt pos:start="155:17" pos:end="155:32"><expr pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:26">header_len</name> <operator pos:start="155:28" pos:end="155:29">+=</operator> <literal type="number" pos:start="155:31" pos:end="155:31">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="163:9">else <block pos:start="157:16" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:29">

            <if_stmt pos:start="159:13" pos:end="161:29"><if pos:start="159:13" pos:end="161:29">if <condition pos:start="159:16" pos:end="159:29">(<expr pos:start="159:17" pos:end="159:28"><operator pos:start="159:17" pos:end="159:17">!</operator><name pos:start="159:18" pos:end="159:28"><name pos:start="159:18" pos:end="159:18">s</name><operator pos:start="159:19" pos:end="159:20">-&gt;</operator><name pos:start="159:21" pos:end="159:28">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:29"><block_content pos:start="161:17" pos:end="161:29">

                <expr_stmt pos:start="161:17" pos:end="161:29"><expr pos:start="161:17" pos:end="161:28"><name pos:start="161:17" pos:end="161:26">header_len</name><operator pos:start="161:27" pos:end="161:28">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:48"><expr pos:start="167:9" pos:end="167:47"><name pos:start="167:9" pos:end="167:20">payload_size</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:34">packet_size</name> <operator pos:start="167:36" pos:end="167:36">-</operator> <name pos:start="167:38" pos:end="167:47">header_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="183:9"><if pos:start="169:9" pos:end="179:9">if <condition pos:start="169:12" pos:end="169:22">(<expr pos:start="169:13" pos:end="169:21"><name pos:start="169:13" pos:end="169:14">id</name> <operator pos:start="169:16" pos:end="169:16">&lt;</operator> <literal type="number" pos:start="169:18" pos:end="169:21">0xc0</literal></expr>)</condition> <block pos:start="169:24" pos:end="179:9">{<block_content pos:start="171:13" pos:end="177:34">

            <expr_stmt pos:start="171:13" pos:end="171:41"><expr pos:start="171:13" pos:end="171:40"><name pos:start="171:13" pos:end="171:21">startcode</name> <operator pos:start="171:23" pos:end="171:23">=</operator> <name pos:start="171:25" pos:end="171:40">PRIVATE_STREAM_1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:30"><expr pos:start="173:13" pos:end="173:29"><name pos:start="173:13" pos:end="173:24">payload_size</name> <operator pos:start="173:26" pos:end="173:27">-=</operator> <literal type="number" pos:start="173:29" pos:end="173:29">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="177:34"><if pos:start="175:13" pos:end="177:34">if <condition pos:start="175:16" pos:end="175:27">(<expr pos:start="175:17" pos:end="175:26"><name pos:start="175:17" pos:end="175:18">id</name> <operator pos:start="175:20" pos:end="175:21">&gt;=</operator> <literal type="number" pos:start="175:23" pos:end="175:26">0xa0</literal></expr>)</condition><block type="pseudo" pos:start="177:17" pos:end="177:34"><block_content pos:start="177:17" pos:end="177:34">

                <expr_stmt pos:start="177:17" pos:end="177:34"><expr pos:start="177:17" pos:end="177:33"><name pos:start="177:17" pos:end="177:28">payload_size</name> <operator pos:start="177:30" pos:end="177:31">-=</operator> <literal type="number" pos:start="177:33" pos:end="177:33">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="179:11" pos:end="183:9">else <block pos:start="179:16" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:35">

            <expr_stmt pos:start="181:13" pos:end="181:35"><expr pos:start="181:13" pos:end="181:34"><name pos:start="181:13" pos:end="181:21">startcode</name> <operator pos:start="181:23" pos:end="181:23">=</operator> <literal type="number" pos:start="181:25" pos:end="181:31">0x100</literal> <operator pos:start="181:31" pos:end="181:31">+</operator> <name pos:start="181:33" pos:end="181:34">id</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:58"><expr pos:start="187:9" pos:end="187:57"><name pos:start="187:9" pos:end="187:21">stuffing_size</name> <operator pos:start="187:23" pos:end="187:23">=</operator> <name pos:start="187:25" pos:end="187:36">payload_size</name> <operator pos:start="187:38" pos:end="187:38">-</operator> <name pos:start="187:40" pos:end="187:57"><name pos:start="187:40" pos:end="187:45">stream</name><operator pos:start="187:46" pos:end="187:47">-&gt;</operator><name pos:start="187:48" pos:end="187:57">buffer_ptr</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="191:30"><if pos:start="189:9" pos:end="191:30">if <condition pos:start="189:12" pos:end="189:30">(<expr pos:start="189:13" pos:end="189:29"><name pos:start="189:13" pos:end="189:25">stuffing_size</name> <operator pos:start="189:27" pos:end="189:27">&lt;</operator> <literal type="number" pos:start="189:29" pos:end="189:29">0</literal></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:30"><block_content pos:start="191:13" pos:end="191:30">

            <expr_stmt pos:start="191:13" pos:end="191:30"><expr pos:start="191:13" pos:end="191:29"><name pos:start="191:13" pos:end="191:25">stuffing_size</name> <operator pos:start="191:27" pos:end="191:27">=</operator> <literal type="number" pos:start="191:29" pos:end="191:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:38"><expr pos:start="193:9" pos:end="193:37"><call pos:start="193:9" pos:end="193:37"><name pos:start="193:9" pos:end="193:16">put_be32</name><argument_list pos:start="193:17" pos:end="193:37">(<argument pos:start="193:18" pos:end="193:25"><expr pos:start="193:18" pos:end="193:25"><operator pos:start="193:18" pos:end="193:18">&amp;</operator><name pos:start="193:19" pos:end="193:25"><name pos:start="193:19" pos:end="193:21">ctx</name><operator pos:start="193:22" pos:end="193:23">-&gt;</operator><name pos:start="193:24" pos:end="193:25">pb</name></name></expr></argument>, <argument pos:start="193:28" pos:end="193:36"><expr pos:start="193:28" pos:end="193:36"><name pos:start="193:28" pos:end="193:36">startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:40"><expr pos:start="197:9" pos:end="197:39"><call pos:start="197:9" pos:end="197:39"><name pos:start="197:9" pos:end="197:16">put_be16</name><argument_list pos:start="197:17" pos:end="197:39">(<argument pos:start="197:18" pos:end="197:25"><expr pos:start="197:18" pos:end="197:25"><operator pos:start="197:18" pos:end="197:18">&amp;</operator><name pos:start="197:19" pos:end="197:25"><name pos:start="197:19" pos:end="197:21">ctx</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:25">pb</name></name></expr></argument>, <argument pos:start="197:28" pos:end="197:38"><expr pos:start="197:28" pos:end="197:38"><name pos:start="197:28" pos:end="197:38">packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <if_stmt pos:start="201:9" pos:end="205:41"><if pos:start="201:9" pos:end="205:41">if <condition pos:start="201:12" pos:end="201:25">(<expr pos:start="201:13" pos:end="201:24"><operator pos:start="201:13" pos:end="201:13">!</operator><name pos:start="201:14" pos:end="201:24"><name pos:start="201:14" pos:end="201:14">s</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:24">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="205:41"><block_content pos:start="203:13" pos:end="205:41">

            <for pos:start="203:13" pos:end="205:41">for<control pos:start="203:16" pos:end="203:40">(<init pos:start="203:17" pos:end="203:20"><expr pos:start="203:17" pos:end="203:19"><name pos:start="203:17" pos:end="203:17">i</name><operator pos:start="203:18" pos:end="203:18">=</operator><literal type="number" pos:start="203:19" pos:end="203:19">0</literal></expr>;</init><condition pos:start="203:21" pos:end="203:36"><expr pos:start="203:21" pos:end="203:35"><name pos:start="203:21" pos:end="203:21">i</name><operator pos:start="203:22" pos:end="203:22">&lt;</operator><name pos:start="203:23" pos:end="203:35">stuffing_size</name></expr>;</condition><incr pos:start="203:37" pos:end="203:39"><expr pos:start="203:37" pos:end="203:39"><name pos:start="203:37" pos:end="203:37">i</name><operator pos:start="203:38" pos:end="203:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="205:17" pos:end="205:41"><block_content pos:start="205:17" pos:end="205:41">

                <expr_stmt pos:start="205:17" pos:end="205:41"><expr pos:start="205:17" pos:end="205:40"><call pos:start="205:17" pos:end="205:40"><name pos:start="205:17" pos:end="205:24">put_byte</name><argument_list pos:start="205:25" pos:end="205:40">(<argument pos:start="205:26" pos:end="205:33"><expr pos:start="205:26" pos:end="205:33"><operator pos:start="205:26" pos:end="205:26">&amp;</operator><name pos:start="205:27" pos:end="205:33"><name pos:start="205:27" pos:end="205:29">ctx</name><operator pos:start="205:30" pos:end="205:31">-&gt;</operator><name pos:start="205:32" pos:end="205:33">pb</name></name></expr></argument>, <argument pos:start="205:36" pos:end="205:39"><expr pos:start="205:36" pos:end="205:39"><literal type="number" pos:start="205:36" pos:end="205:39">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



        <if_stmt pos:start="209:9" pos:end="267:9"><if pos:start="209:9" pos:end="245:9">if <condition pos:start="209:12" pos:end="209:24">(<expr pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="209:26" pos:end="245:9">{<block_content pos:start="211:13" pos:end="243:13">

            <expr_stmt pos:start="211:13" pos:end="211:37"><expr pos:start="211:13" pos:end="211:36"><call pos:start="211:13" pos:end="211:36"><name pos:start="211:13" pos:end="211:20">put_byte</name><argument_list pos:start="211:21" pos:end="211:36">(<argument pos:start="211:22" pos:end="211:29"><expr pos:start="211:22" pos:end="211:29"><operator pos:start="211:22" pos:end="211:22">&amp;</operator><name pos:start="211:23" pos:end="211:29"><name pos:start="211:23" pos:end="211:25">ctx</name><operator pos:start="211:26" pos:end="211:27">-&gt;</operator><name pos:start="211:28" pos:end="211:29">pb</name></name></expr></argument>, <argument pos:start="211:32" pos:end="211:35"><expr pos:start="211:32" pos:end="211:35"><literal type="number" pos:start="211:32" pos:end="211:35">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="211:39" pos:end="211:52">/* mpeg2 id */</comment>



            <if_stmt pos:start="215:13" pos:end="243:13"><if pos:start="215:13" pos:end="237:13">if <condition pos:start="215:16" pos:end="215:38">(<expr pos:start="215:17" pos:end="215:37"><name pos:start="215:17" pos:end="215:19">pts</name> <operator pos:start="215:21" pos:end="215:22">!=</operator> <name pos:start="215:24" pos:end="215:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="215:40" pos:end="237:13">{<block_content pos:start="217:17" pos:end="235:17">

                <if_stmt pos:start="217:17" pos:end="235:17"><if pos:start="217:17" pos:end="227:17">if <condition pos:start="217:20" pos:end="217:31">(<expr pos:start="217:21" pos:end="217:30"><name pos:start="217:21" pos:end="217:23">dts</name> <operator pos:start="217:25" pos:end="217:26">!=</operator> <name pos:start="217:28" pos:end="217:30">pts</name></expr>)</condition> <block pos:start="217:33" pos:end="227:17">{<block_content pos:start="219:21" pos:end="225:55">

                    <expr_stmt pos:start="219:21" pos:end="219:45"><expr pos:start="219:21" pos:end="219:44"><call pos:start="219:21" pos:end="219:44"><name pos:start="219:21" pos:end="219:28">put_byte</name><argument_list pos:start="219:29" pos:end="219:44">(<argument pos:start="219:30" pos:end="219:37"><expr pos:start="219:30" pos:end="219:37"><operator pos:start="219:30" pos:end="219:30">&amp;</operator><name pos:start="219:31" pos:end="219:37"><name pos:start="219:31" pos:end="219:33">ctx</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:37">pb</name></name></expr></argument>, <argument pos:start="219:40" pos:end="219:43"><expr pos:start="219:40" pos:end="219:43"><literal type="number" pos:start="219:40" pos:end="219:43">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="219:47" pos:end="219:57">/* flags */</comment>

                    <expr_stmt pos:start="221:21" pos:end="221:71"><expr pos:start="221:21" pos:end="221:70"><call pos:start="221:21" pos:end="221:70"><name pos:start="221:21" pos:end="221:28">put_byte</name><argument_list pos:start="221:29" pos:end="221:70">(<argument pos:start="221:30" pos:end="221:37"><expr pos:start="221:30" pos:end="221:37"><operator pos:start="221:30" pos:end="221:30">&amp;</operator><name pos:start="221:31" pos:end="221:37"><name pos:start="221:31" pos:end="221:33">ctx</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:37">pb</name></name></expr></argument>, <argument pos:start="221:40" pos:end="221:69"><expr pos:start="221:40" pos:end="221:69"><name pos:start="221:40" pos:end="221:49">header_len</name> <operator pos:start="221:51" pos:end="221:51">-</operator> <literal type="number" pos:start="221:53" pos:end="221:55">3</literal> <operator pos:start="221:55" pos:end="221:55">+</operator> <name pos:start="221:57" pos:end="221:69">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="223:21" pos:end="223:55"><expr pos:start="223:21" pos:end="223:54"><call pos:start="223:21" pos:end="223:54"><name pos:start="223:21" pos:end="223:33">put_timestamp</name><argument_list pos:start="223:34" pos:end="223:54">(<argument pos:start="223:35" pos:end="223:42"><expr pos:start="223:35" pos:end="223:42"><operator pos:start="223:35" pos:end="223:35">&amp;</operator><name pos:start="223:36" pos:end="223:42"><name pos:start="223:36" pos:end="223:38">ctx</name><operator pos:start="223:39" pos:end="223:40">-&gt;</operator><name pos:start="223:41" pos:end="223:42">pb</name></name></expr></argument>, <argument pos:start="223:45" pos:end="223:48"><expr pos:start="223:45" pos:end="223:48"><literal type="number" pos:start="223:45" pos:end="223:48">0x03</literal></expr></argument>, <argument pos:start="223:51" pos:end="223:53"><expr pos:start="223:51" pos:end="223:53"><name pos:start="223:51" pos:end="223:53">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="225:21" pos:end="225:55"><expr pos:start="225:21" pos:end="225:54"><call pos:start="225:21" pos:end="225:54"><name pos:start="225:21" pos:end="225:33">put_timestamp</name><argument_list pos:start="225:34" pos:end="225:54">(<argument pos:start="225:35" pos:end="225:42"><expr pos:start="225:35" pos:end="225:42"><operator pos:start="225:35" pos:end="225:35">&amp;</operator><name pos:start="225:36" pos:end="225:42"><name pos:start="225:36" pos:end="225:38">ctx</name><operator pos:start="225:39" pos:end="225:40">-&gt;</operator><name pos:start="225:41" pos:end="225:42">pb</name></name></expr></argument>, <argument pos:start="225:45" pos:end="225:48"><expr pos:start="225:45" pos:end="225:48"><literal type="number" pos:start="225:45" pos:end="225:48">0x01</literal></expr></argument>, <argument pos:start="225:51" pos:end="225:53"><expr pos:start="225:51" pos:end="225:53"><name pos:start="225:51" pos:end="225:53">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="227:19" pos:end="235:17">else <block pos:start="227:24" pos:end="235:17">{<block_content pos:start="229:21" pos:end="233:55">

                    <expr_stmt pos:start="229:21" pos:end="229:45"><expr pos:start="229:21" pos:end="229:44"><call pos:start="229:21" pos:end="229:44"><name pos:start="229:21" pos:end="229:28">put_byte</name><argument_list pos:start="229:29" pos:end="229:44">(<argument pos:start="229:30" pos:end="229:37"><expr pos:start="229:30" pos:end="229:37"><operator pos:start="229:30" pos:end="229:30">&amp;</operator><name pos:start="229:31" pos:end="229:37"><name pos:start="229:31" pos:end="229:33">ctx</name><operator pos:start="229:34" pos:end="229:35">-&gt;</operator><name pos:start="229:36" pos:end="229:37">pb</name></name></expr></argument>, <argument pos:start="229:40" pos:end="229:43"><expr pos:start="229:40" pos:end="229:43"><literal type="number" pos:start="229:40" pos:end="229:43">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="229:47" pos:end="229:57">/* flags */</comment>

                    <expr_stmt pos:start="231:21" pos:end="231:71"><expr pos:start="231:21" pos:end="231:70"><call pos:start="231:21" pos:end="231:70"><name pos:start="231:21" pos:end="231:28">put_byte</name><argument_list pos:start="231:29" pos:end="231:70">(<argument pos:start="231:30" pos:end="231:37"><expr pos:start="231:30" pos:end="231:37"><operator pos:start="231:30" pos:end="231:30">&amp;</operator><name pos:start="231:31" pos:end="231:37"><name pos:start="231:31" pos:end="231:33">ctx</name><operator pos:start="231:34" pos:end="231:35">-&gt;</operator><name pos:start="231:36" pos:end="231:37">pb</name></name></expr></argument>, <argument pos:start="231:40" pos:end="231:69"><expr pos:start="231:40" pos:end="231:69"><name pos:start="231:40" pos:end="231:49">header_len</name> <operator pos:start="231:51" pos:end="231:51">-</operator> <literal type="number" pos:start="231:53" pos:end="231:55">3</literal> <operator pos:start="231:55" pos:end="231:55">+</operator> <name pos:start="231:57" pos:end="231:69">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:55"><expr pos:start="233:21" pos:end="233:54"><call pos:start="233:21" pos:end="233:54"><name pos:start="233:21" pos:end="233:33">put_timestamp</name><argument_list pos:start="233:34" pos:end="233:54">(<argument pos:start="233:35" pos:end="233:42"><expr pos:start="233:35" pos:end="233:42"><operator pos:start="233:35" pos:end="233:35">&amp;</operator><name pos:start="233:36" pos:end="233:42"><name pos:start="233:36" pos:end="233:38">ctx</name><operator pos:start="233:39" pos:end="233:40">-&gt;</operator><name pos:start="233:41" pos:end="233:42">pb</name></name></expr></argument>, <argument pos:start="233:45" pos:end="233:48"><expr pos:start="233:45" pos:end="233:48"><literal type="number" pos:start="233:45" pos:end="233:48">0x02</literal></expr></argument>, <argument pos:start="233:51" pos:end="233:53"><expr pos:start="233:51" pos:end="233:53"><name pos:start="233:51" pos:end="233:53">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="243:13">else <block pos:start="237:20" pos:end="243:13">{<block_content pos:start="239:17" pos:end="241:67">

                <expr_stmt pos:start="239:17" pos:end="239:41"><expr pos:start="239:17" pos:end="239:40"><call pos:start="239:17" pos:end="239:40"><name pos:start="239:17" pos:end="239:24">put_byte</name><argument_list pos:start="239:25" pos:end="239:40">(<argument pos:start="239:26" pos:end="239:33"><expr pos:start="239:26" pos:end="239:33"><operator pos:start="239:26" pos:end="239:26">&amp;</operator><name pos:start="239:27" pos:end="239:33"><name pos:start="239:27" pos:end="239:29">ctx</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:33">pb</name></name></expr></argument>, <argument pos:start="239:36" pos:end="239:39"><expr pos:start="239:36" pos:end="239:39"><literal type="number" pos:start="239:36" pos:end="239:39">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="239:43" pos:end="239:53">/* flags */</comment>

                <expr_stmt pos:start="241:17" pos:end="241:67"><expr pos:start="241:17" pos:end="241:66"><call pos:start="241:17" pos:end="241:66"><name pos:start="241:17" pos:end="241:24">put_byte</name><argument_list pos:start="241:25" pos:end="241:66">(<argument pos:start="241:26" pos:end="241:33"><expr pos:start="241:26" pos:end="241:33"><operator pos:start="241:26" pos:end="241:26">&amp;</operator><name pos:start="241:27" pos:end="241:33"><name pos:start="241:27" pos:end="241:29">ctx</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:33">pb</name></name></expr></argument>, <argument pos:start="241:36" pos:end="241:65"><expr pos:start="241:36" pos:end="241:65"><name pos:start="241:36" pos:end="241:45">header_len</name> <operator pos:start="241:47" pos:end="241:47">-</operator> <literal type="number" pos:start="241:49" pos:end="241:51">3</literal> <operator pos:start="241:51" pos:end="241:51">+</operator> <name pos:start="241:53" pos:end="241:65">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="245:11" pos:end="267:9">else <block pos:start="245:16" pos:end="267:9">{<block_content pos:start="247:13" pos:end="265:13">

            <if_stmt pos:start="247:13" pos:end="265:13"><if pos:start="247:13" pos:end="261:13">if <condition pos:start="247:16" pos:end="247:38">(<expr pos:start="247:17" pos:end="247:37"><name pos:start="247:17" pos:end="247:19">pts</name> <operator pos:start="247:21" pos:end="247:22">!=</operator> <name pos:start="247:24" pos:end="247:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="247:40" pos:end="261:13">{<block_content pos:start="249:17" pos:end="259:17">

                <if_stmt pos:start="249:17" pos:end="259:17"><if pos:start="249:17" pos:end="255:17">if <condition pos:start="249:20" pos:end="249:31">(<expr pos:start="249:21" pos:end="249:30"><name pos:start="249:21" pos:end="249:23">dts</name> <operator pos:start="249:25" pos:end="249:26">!=</operator> <name pos:start="249:28" pos:end="249:30">pts</name></expr>)</condition> <block pos:start="249:33" pos:end="255:17">{<block_content pos:start="251:21" pos:end="253:55">

                    <expr_stmt pos:start="251:21" pos:end="251:55"><expr pos:start="251:21" pos:end="251:54"><call pos:start="251:21" pos:end="251:54"><name pos:start="251:21" pos:end="251:33">put_timestamp</name><argument_list pos:start="251:34" pos:end="251:54">(<argument pos:start="251:35" pos:end="251:42"><expr pos:start="251:35" pos:end="251:42"><operator pos:start="251:35" pos:end="251:35">&amp;</operator><name pos:start="251:36" pos:end="251:42"><name pos:start="251:36" pos:end="251:38">ctx</name><operator pos:start="251:39" pos:end="251:40">-&gt;</operator><name pos:start="251:41" pos:end="251:42">pb</name></name></expr></argument>, <argument pos:start="251:45" pos:end="251:48"><expr pos:start="251:45" pos:end="251:48"><literal type="number" pos:start="251:45" pos:end="251:48">0x03</literal></expr></argument>, <argument pos:start="251:51" pos:end="251:53"><expr pos:start="251:51" pos:end="251:53"><name pos:start="251:51" pos:end="251:53">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="253:21" pos:end="253:55"><expr pos:start="253:21" pos:end="253:54"><call pos:start="253:21" pos:end="253:54"><name pos:start="253:21" pos:end="253:33">put_timestamp</name><argument_list pos:start="253:34" pos:end="253:54">(<argument pos:start="253:35" pos:end="253:42"><expr pos:start="253:35" pos:end="253:42"><operator pos:start="253:35" pos:end="253:35">&amp;</operator><name pos:start="253:36" pos:end="253:42"><name pos:start="253:36" pos:end="253:38">ctx</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:42">pb</name></name></expr></argument>, <argument pos:start="253:45" pos:end="253:48"><expr pos:start="253:45" pos:end="253:48"><literal type="number" pos:start="253:45" pos:end="253:48">0x01</literal></expr></argument>, <argument pos:start="253:51" pos:end="253:53"><expr pos:start="253:51" pos:end="253:53"><name pos:start="253:51" pos:end="253:53">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="255:19" pos:end="259:17">else <block pos:start="255:24" pos:end="259:17">{<block_content pos:start="257:21" pos:end="257:55">

                    <expr_stmt pos:start="257:21" pos:end="257:55"><expr pos:start="257:21" pos:end="257:54"><call pos:start="257:21" pos:end="257:54"><name pos:start="257:21" pos:end="257:33">put_timestamp</name><argument_list pos:start="257:34" pos:end="257:54">(<argument pos:start="257:35" pos:end="257:42"><expr pos:start="257:35" pos:end="257:42"><operator pos:start="257:35" pos:end="257:35">&amp;</operator><name pos:start="257:36" pos:end="257:42"><name pos:start="257:36" pos:end="257:38">ctx</name><operator pos:start="257:39" pos:end="257:40">-&gt;</operator><name pos:start="257:41" pos:end="257:42">pb</name></name></expr></argument>, <argument pos:start="257:45" pos:end="257:48"><expr pos:start="257:45" pos:end="257:48"><literal type="number" pos:start="257:45" pos:end="257:48">0x02</literal></expr></argument>, <argument pos:start="257:51" pos:end="257:53"><expr pos:start="257:51" pos:end="257:53"><name pos:start="257:51" pos:end="257:53">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="261:15" pos:end="265:13">else <block pos:start="261:20" pos:end="265:13">{<block_content pos:start="263:17" pos:end="263:41">

                <expr_stmt pos:start="263:17" pos:end="263:41"><expr pos:start="263:17" pos:end="263:40"><call pos:start="263:17" pos:end="263:40"><name pos:start="263:17" pos:end="263:24">put_byte</name><argument_list pos:start="263:25" pos:end="263:40">(<argument pos:start="263:26" pos:end="263:33"><expr pos:start="263:26" pos:end="263:33"><operator pos:start="263:26" pos:end="263:26">&amp;</operator><name pos:start="263:27" pos:end="263:33"><name pos:start="263:27" pos:end="263:29">ctx</name><operator pos:start="263:30" pos:end="263:31">-&gt;</operator><name pos:start="263:32" pos:end="263:33">pb</name></name></expr></argument>, <argument pos:start="263:36" pos:end="263:39"><expr pos:start="263:36" pos:end="263:39"><literal type="number" pos:start="263:36" pos:end="263:39">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="271:9" pos:end="299:9"><if pos:start="271:9" pos:end="299:9">if <condition pos:start="271:12" pos:end="271:42">(<expr pos:start="271:13" pos:end="271:41"><name pos:start="271:13" pos:end="271:21">startcode</name> <operator pos:start="271:23" pos:end="271:24">==</operator> <name pos:start="271:26" pos:end="271:41">PRIVATE_STREAM_1</name></expr>)</condition> <block pos:start="271:44" pos:end="299:9">{<block_content pos:start="273:13" pos:end="297:13">

            <expr_stmt pos:start="273:13" pos:end="273:35"><expr pos:start="273:13" pos:end="273:34"><call pos:start="273:13" pos:end="273:34"><name pos:start="273:13" pos:end="273:20">put_byte</name><argument_list pos:start="273:21" pos:end="273:34">(<argument pos:start="273:22" pos:end="273:29"><expr pos:start="273:22" pos:end="273:29"><operator pos:start="273:22" pos:end="273:22">&amp;</operator><name pos:start="273:23" pos:end="273:29"><name pos:start="273:23" pos:end="273:25">ctx</name><operator pos:start="273:26" pos:end="273:27">-&gt;</operator><name pos:start="273:28" pos:end="273:29">pb</name></name></expr></argument>, <argument pos:start="273:32" pos:end="273:33"><expr pos:start="273:32" pos:end="273:33"><name pos:start="273:32" pos:end="273:33">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="297:13"><if pos:start="275:13" pos:end="289:13">if <condition pos:start="275:16" pos:end="275:27">(<expr pos:start="275:17" pos:end="275:26"><name pos:start="275:17" pos:end="275:18">id</name> <operator pos:start="275:20" pos:end="275:21">&gt;=</operator> <literal type="number" pos:start="275:23" pos:end="275:26">0xa0</literal></expr>)</condition> <block pos:start="275:29" pos:end="289:13">{<block_content pos:start="279:17" pos:end="287:59">

                <comment type="block" pos:start="277:17" pos:end="277:49">/* LPCM (XXX: check nb_frames) */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:38"><expr pos:start="279:17" pos:end="279:37"><call pos:start="279:17" pos:end="279:37"><name pos:start="279:17" pos:end="279:24">put_byte</name><argument_list pos:start="279:25" pos:end="279:37">(<argument pos:start="279:26" pos:end="279:33"><expr pos:start="279:26" pos:end="279:33"><operator pos:start="279:26" pos:end="279:26">&amp;</operator><name pos:start="279:27" pos:end="279:33"><name pos:start="279:27" pos:end="279:29">ctx</name><operator pos:start="279:30" pos:end="279:31">-&gt;</operator><name pos:start="279:32" pos:end="279:33">pb</name></name></expr></argument>, <argument pos:start="279:36" pos:end="279:36"><expr pos:start="279:36" pos:end="279:36"><literal type="number" pos:start="279:36" pos:end="279:36">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:38"><expr pos:start="281:17" pos:end="281:37"><call pos:start="281:17" pos:end="281:37"><name pos:start="281:17" pos:end="281:24">put_be16</name><argument_list pos:start="281:25" pos:end="281:37">(<argument pos:start="281:26" pos:end="281:33"><expr pos:start="281:26" pos:end="281:33"><operator pos:start="281:26" pos:end="281:26">&amp;</operator><name pos:start="281:27" pos:end="281:33"><name pos:start="281:27" pos:end="281:29">ctx</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:33">pb</name></name></expr></argument>, <argument pos:start="281:36" pos:end="281:36"><expr pos:start="281:36" pos:end="281:36"><literal type="number" pos:start="281:36" pos:end="281:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="281:40" pos:end="281:64">/* skip 3 header bytes */</comment>

                <expr_stmt pos:start="283:17" pos:end="283:59"><expr pos:start="283:17" pos:end="283:58"><call pos:start="283:17" pos:end="283:58"><name pos:start="283:17" pos:end="283:24">put_byte</name><argument_list pos:start="283:25" pos:end="283:58">(<argument pos:start="283:26" pos:end="283:33"><expr pos:start="283:26" pos:end="283:33"><operator pos:start="283:26" pos:end="283:26">&amp;</operator><name pos:start="283:27" pos:end="283:33"><name pos:start="283:27" pos:end="283:29">ctx</name><operator pos:start="283:30" pos:end="283:31">-&gt;</operator><name pos:start="283:32" pos:end="283:33">pb</name></name></expr></argument>, <argument pos:start="283:36" pos:end="283:57"><expr pos:start="283:36" pos:end="283:57"><name pos:start="283:36" pos:end="283:57"><name pos:start="283:36" pos:end="283:41">stream</name><operator pos:start="283:42" pos:end="283:43">-&gt;</operator><name pos:start="283:44" pos:end="283:54">lpcm_header</name><index pos:start="283:55" pos:end="283:57">[<expr pos:start="283:56" pos:end="283:56"><literal type="number" pos:start="283:56" pos:end="283:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:59"><expr pos:start="285:17" pos:end="285:58"><call pos:start="285:17" pos:end="285:58"><name pos:start="285:17" pos:end="285:24">put_byte</name><argument_list pos:start="285:25" pos:end="285:58">(<argument pos:start="285:26" pos:end="285:33"><expr pos:start="285:26" pos:end="285:33"><operator pos:start="285:26" pos:end="285:26">&amp;</operator><name pos:start="285:27" pos:end="285:33"><name pos:start="285:27" pos:end="285:29">ctx</name><operator pos:start="285:30" pos:end="285:31">-&gt;</operator><name pos:start="285:32" pos:end="285:33">pb</name></name></expr></argument>, <argument pos:start="285:36" pos:end="285:57"><expr pos:start="285:36" pos:end="285:57"><name pos:start="285:36" pos:end="285:57"><name pos:start="285:36" pos:end="285:41">stream</name><operator pos:start="285:42" pos:end="285:43">-&gt;</operator><name pos:start="285:44" pos:end="285:54">lpcm_header</name><index pos:start="285:55" pos:end="285:57">[<expr pos:start="285:56" pos:end="285:56"><literal type="number" pos:start="285:56" pos:end="285:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:59"><expr pos:start="287:17" pos:end="287:58"><call pos:start="287:17" pos:end="287:58"><name pos:start="287:17" pos:end="287:24">put_byte</name><argument_list pos:start="287:25" pos:end="287:58">(<argument pos:start="287:26" pos:end="287:33"><expr pos:start="287:26" pos:end="287:33"><operator pos:start="287:26" pos:end="287:26">&amp;</operator><name pos:start="287:27" pos:end="287:33"><name pos:start="287:27" pos:end="287:29">ctx</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:33">pb</name></name></expr></argument>, <argument pos:start="287:36" pos:end="287:57"><expr pos:start="287:36" pos:end="287:57"><name pos:start="287:36" pos:end="287:57"><name pos:start="287:36" pos:end="287:41">stream</name><operator pos:start="287:42" pos:end="287:43">-&gt;</operator><name pos:start="287:44" pos:end="287:54">lpcm_header</name><index pos:start="287:55" pos:end="287:57">[<expr pos:start="287:56" pos:end="287:56"><literal type="number" pos:start="287:56" pos:end="287:56">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="289:15" pos:end="297:13">else <block pos:start="289:20" pos:end="297:13">{<block_content pos:start="293:17" pos:end="295:63">

                <comment type="block" pos:start="291:17" pos:end="291:25">/* AC3 */</comment>

                <expr_stmt pos:start="293:17" pos:end="293:54"><expr pos:start="293:17" pos:end="293:53"><call pos:start="293:17" pos:end="293:53"><name pos:start="293:17" pos:end="293:24">put_byte</name><argument_list pos:start="293:25" pos:end="293:53">(<argument pos:start="293:26" pos:end="293:33"><expr pos:start="293:26" pos:end="293:33"><operator pos:start="293:26" pos:end="293:26">&amp;</operator><name pos:start="293:27" pos:end="293:33"><name pos:start="293:27" pos:end="293:29">ctx</name><operator pos:start="293:30" pos:end="293:31">-&gt;</operator><name pos:start="293:32" pos:end="293:33">pb</name></name></expr></argument>, <argument pos:start="293:36" pos:end="293:52"><expr pos:start="293:36" pos:end="293:52"><name pos:start="293:36" pos:end="293:52"><name pos:start="293:36" pos:end="293:41">stream</name><operator pos:start="293:42" pos:end="293:43">-&gt;</operator><name pos:start="293:44" pos:end="293:52">nb_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:63"><expr pos:start="295:17" pos:end="295:62"><call pos:start="295:17" pos:end="295:62"><name pos:start="295:17" pos:end="295:24">put_be16</name><argument_list pos:start="295:25" pos:end="295:62">(<argument pos:start="295:26" pos:end="295:33"><expr pos:start="295:26" pos:end="295:33"><operator pos:start="295:26" pos:end="295:26">&amp;</operator><name pos:start="295:27" pos:end="295:33"><name pos:start="295:27" pos:end="295:29">ctx</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:33">pb</name></name></expr></argument>, <argument pos:start="295:36" pos:end="295:61"><expr pos:start="295:36" pos:end="295:61"><name pos:start="295:36" pos:end="295:61"><name pos:start="295:36" pos:end="295:41">stream</name><operator pos:start="295:42" pos:end="295:43">-&gt;</operator><name pos:start="295:44" pos:end="295:61">frame_start_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="303:9" pos:end="307:41"><if pos:start="303:9" pos:end="307:41">if <condition pos:start="303:12" pos:end="303:24">(<expr pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:23"><name pos:start="303:13" pos:end="303:13">s</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:23">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="307:41"><block_content pos:start="305:13" pos:end="307:41">

            <for pos:start="305:13" pos:end="307:41">for<control pos:start="305:16" pos:end="305:40">(<init pos:start="305:17" pos:end="305:20"><expr pos:start="305:17" pos:end="305:19"><name pos:start="305:17" pos:end="305:17">i</name><operator pos:start="305:18" pos:end="305:18">=</operator><literal type="number" pos:start="305:19" pos:end="305:19">0</literal></expr>;</init><condition pos:start="305:21" pos:end="305:36"><expr pos:start="305:21" pos:end="305:35"><name pos:start="305:21" pos:end="305:21">i</name><operator pos:start="305:22" pos:end="305:22">&lt;</operator><name pos:start="305:23" pos:end="305:35">stuffing_size</name></expr>;</condition><incr pos:start="305:37" pos:end="305:39"><expr pos:start="305:37" pos:end="305:39"><name pos:start="305:37" pos:end="305:37">i</name><operator pos:start="305:38" pos:end="305:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="307:17" pos:end="307:41"><block_content pos:start="307:17" pos:end="307:41">

                <expr_stmt pos:start="307:17" pos:end="307:41"><expr pos:start="307:17" pos:end="307:40"><call pos:start="307:17" pos:end="307:40"><name pos:start="307:17" pos:end="307:24">put_byte</name><argument_list pos:start="307:25" pos:end="307:40">(<argument pos:start="307:26" pos:end="307:33"><expr pos:start="307:26" pos:end="307:33"><operator pos:start="307:26" pos:end="307:26">&amp;</operator><name pos:start="307:27" pos:end="307:33"><name pos:start="307:27" pos:end="307:29">ctx</name><operator pos:start="307:30" pos:end="307:31">-&gt;</operator><name pos:start="307:32" pos:end="307:33">pb</name></name></expr></argument>, <argument pos:start="307:36" pos:end="307:39"><expr pos:start="307:36" pos:end="307:39"><literal type="number" pos:start="307:36" pos:end="307:39">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



        <comment type="block" pos:start="311:9" pos:end="311:25">/* output data */</comment>

        <expr_stmt pos:start="313:9" pos:end="313:75"><expr pos:start="313:9" pos:end="313:74"><call pos:start="313:9" pos:end="313:74"><name pos:start="313:9" pos:end="313:18">put_buffer</name><argument_list pos:start="313:19" pos:end="313:74">(<argument pos:start="313:20" pos:end="313:27"><expr pos:start="313:20" pos:end="313:27"><operator pos:start="313:20" pos:end="313:20">&amp;</operator><name pos:start="313:21" pos:end="313:27"><name pos:start="313:21" pos:end="313:23">ctx</name><operator pos:start="313:24" pos:end="313:25">-&gt;</operator><name pos:start="313:26" pos:end="313:27">pb</name></name></expr></argument>, <argument pos:start="313:30" pos:end="313:43"><expr pos:start="313:30" pos:end="313:43"><name pos:start="313:30" pos:end="313:43"><name pos:start="313:30" pos:end="313:35">stream</name><operator pos:start="313:36" pos:end="313:37">-&gt;</operator><name pos:start="313:38" pos:end="313:43">buffer</name></name></expr></argument>, <argument pos:start="313:46" pos:end="313:73"><expr pos:start="313:46" pos:end="313:73"><name pos:start="313:46" pos:end="313:57">payload_size</name> <operator pos:start="313:59" pos:end="313:59">-</operator> <name pos:start="313:61" pos:end="313:73">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="319:5" pos:end="321:59"><if pos:start="319:5" pos:end="321:59">if <condition pos:start="319:8" pos:end="319:29">(<expr pos:start="319:9" pos:end="319:28"><name pos:start="319:9" pos:end="319:24">pad_packet_bytes</name> <operator pos:start="319:26" pos:end="319:26">&gt;</operator> <literal type="number" pos:start="319:28" pos:end="319:28">0</literal></expr>)</condition><block type="pseudo" pos:start="321:9" pos:end="321:59"><block_content pos:start="321:9" pos:end="321:59">

        <expr_stmt pos:start="321:9" pos:end="321:59"><expr pos:start="321:9" pos:end="321:58"><call pos:start="321:9" pos:end="321:58"><name pos:start="321:9" pos:end="321:26">put_padding_packet</name><argument_list pos:start="321:27" pos:end="321:58">(<argument pos:start="321:28" pos:end="321:30"><expr pos:start="321:28" pos:end="321:30"><name pos:start="321:28" pos:end="321:30">ctx</name></expr></argument>,<argument pos:start="321:32" pos:end="321:39"><expr pos:start="321:32" pos:end="321:39"><operator pos:start="321:32" pos:end="321:32">&amp;</operator><name pos:start="321:33" pos:end="321:39"><name pos:start="321:33" pos:end="321:35">ctx</name><operator pos:start="321:36" pos:end="321:37">-&gt;</operator><name pos:start="321:38" pos:end="321:39">pb</name></name></expr></argument>, <argument pos:start="321:42" pos:end="321:57"><expr pos:start="321:42" pos:end="321:57"><name pos:start="321:42" pos:end="321:57">pad_packet_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>    



    <for pos:start="325:5" pos:end="327:33">for<control pos:start="325:8" pos:end="325:35">(<init pos:start="325:9" pos:end="325:12"><expr pos:start="325:9" pos:end="325:11"><name pos:start="325:9" pos:end="325:9">i</name><operator pos:start="325:10" pos:end="325:10">=</operator><literal type="number" pos:start="325:11" pos:end="325:11">0</literal></expr>;</init><condition pos:start="325:13" pos:end="325:31"><expr pos:start="325:13" pos:end="325:30"><name pos:start="325:13" pos:end="325:13">i</name><operator pos:start="325:14" pos:end="325:14">&lt;</operator><name pos:start="325:15" pos:end="325:30">zero_trail_bytes</name></expr>;</condition><incr pos:start="325:32" pos:end="325:34"><expr pos:start="325:32" pos:end="325:34"><name pos:start="325:32" pos:end="325:32">i</name><operator pos:start="325:33" pos:end="325:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="327:9" pos:end="327:33"><block_content pos:start="327:9" pos:end="327:33">

        <expr_stmt pos:start="327:9" pos:end="327:33"><expr pos:start="327:9" pos:end="327:32"><call pos:start="327:9" pos:end="327:32"><name pos:start="327:9" pos:end="327:16">put_byte</name><argument_list pos:start="327:17" pos:end="327:32">(<argument pos:start="327:18" pos:end="327:25"><expr pos:start="327:18" pos:end="327:25"><operator pos:start="327:18" pos:end="327:18">&amp;</operator><name pos:start="327:19" pos:end="327:25"><name pos:start="327:19" pos:end="327:21">ctx</name><operator pos:start="327:22" pos:end="327:23">-&gt;</operator><name pos:start="327:24" pos:end="327:25">pb</name></name></expr></argument>, <argument pos:start="327:28" pos:end="327:31"><expr pos:start="327:28" pos:end="327:31"><literal type="number" pos:start="327:28" pos:end="327:31">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        

    <expr_stmt pos:start="331:5" pos:end="331:31"><expr pos:start="331:5" pos:end="331:30"><call pos:start="331:5" pos:end="331:30"><name pos:start="331:5" pos:end="331:20">put_flush_packet</name><argument_list pos:start="331:21" pos:end="331:30">(<argument pos:start="331:22" pos:end="331:29"><expr pos:start="331:22" pos:end="331:29"><operator pos:start="331:22" pos:end="331:22">&amp;</operator><name pos:start="331:23" pos:end="331:29"><name pos:start="331:23" pos:end="331:25">ctx</name><operator pos:start="331:26" pos:end="331:27">-&gt;</operator><name pos:start="331:28" pos:end="331:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <expr_stmt pos:start="335:5" pos:end="335:23"><expr pos:start="335:5" pos:end="335:22"><name pos:start="335:5" pos:end="335:20"><name pos:start="335:5" pos:end="335:5">s</name><operator pos:start="335:6" pos:end="335:7">-&gt;</operator><name pos:start="335:8" pos:end="335:20">packet_number</name></name><operator pos:start="335:21" pos:end="335:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:28"><expr pos:start="337:5" pos:end="337:27"><name pos:start="337:5" pos:end="337:25"><name pos:start="337:5" pos:end="337:10">stream</name><operator pos:start="337:11" pos:end="337:12">-&gt;</operator><name pos:start="337:13" pos:end="337:25">packet_number</name></name><operator pos:start="337:26" pos:end="337:27">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:26"><expr pos:start="339:5" pos:end="339:25"><name pos:start="339:5" pos:end="339:21"><name pos:start="339:5" pos:end="339:10">stream</name><operator pos:start="339:11" pos:end="339:12">-&gt;</operator><name pos:start="339:13" pos:end="339:21">nb_frames</name></name> <operator pos:start="339:23" pos:end="339:23">=</operator> <literal type="number" pos:start="339:25" pos:end="339:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:35"><expr pos:start="341:5" pos:end="341:34"><name pos:start="341:5" pos:end="341:30"><name pos:start="341:5" pos:end="341:10">stream</name><operator pos:start="341:11" pos:end="341:12">-&gt;</operator><name pos:start="341:13" pos:end="341:30">frame_start_offset</name></name> <operator pos:start="341:32" pos:end="341:32">=</operator> <literal type="number" pos:start="341:34" pos:end="341:34">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
