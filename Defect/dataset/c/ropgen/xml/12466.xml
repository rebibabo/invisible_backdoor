<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12466.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">xen_domain_build_pv</name><parameter_list pos:start="1:24" pos:end="3:44">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">kernel</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:63"><decl pos:start="1:45" pos:end="1:63"><type pos:start="1:45" pos:end="1:63"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">ramdisk</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:43"><decl pos:start="3:25" pos:end="3:43"><type pos:start="3:25" pos:end="3:43"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:43">cmdline</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="143:1">{<block_content pos:start="7:5" pos:end="141:14">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:20">ssidref</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:23">xen_domain_handle_t</name></type> <name pos:start="11:25" pos:end="11:28">uuid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:30">xenstore_port</name> <init pos:start="13:32" pos:end="13:34">= <expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr></init></decl>, <decl pos:start="13:37" pos:end="13:52"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:37" pos:end="13:48">console_port</name> <init pos:start="13:50" pos:end="13:52">= <expr pos:start="13:52" pos:end="13:52"><literal type="number" pos:start="13:52" pos:end="13:52">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">long</name></type> <name pos:start="15:19" pos:end="15:30">xenstore_mfn</name> <init pos:start="15:32" pos:end="15:34">= <expr pos:start="15:34" pos:end="15:34"><literal type="number" pos:start="15:34" pos:end="15:34">0</literal></expr></init></decl>, <decl pos:start="15:37" pos:end="15:51"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:37" pos:end="15:47">console_mfn</name> <init pos:start="15:49" pos:end="15:51">= <expr pos:start="15:51" pos:end="15:51"><literal type="number" pos:start="15:51" pos:end="15:51">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:11"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:42"><expr pos:start="21:5" pos:end="21:41"><call pos:start="21:5" pos:end="21:41"><name pos:start="21:5" pos:end="21:10">memcpy</name><argument_list pos:start="21:11" pos:end="21:41">(<argument pos:start="21:12" pos:end="21:15"><expr pos:start="21:12" pos:end="21:15"><name pos:start="21:12" pos:end="21:15">uuid</name></expr></argument>, <argument pos:start="21:18" pos:end="21:26"><expr pos:start="21:18" pos:end="21:26"><name pos:start="21:18" pos:end="21:26">qemu_uuid</name></expr></argument>, <argument pos:start="21:29" pos:end="21:40"><expr pos:start="21:29" pos:end="21:40"><sizeof pos:start="21:29" pos:end="21:40">sizeof<argument_list pos:start="21:35" pos:end="21:40">(<argument pos:start="21:36" pos:end="21:39"><expr pos:start="21:36" pos:end="21:39"><name pos:start="21:36" pos:end="21:39">uuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:6">rc</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:67"><name pos:start="23:10" pos:end="23:25">xc_domain_create</name><argument_list pos:start="23:26" pos:end="23:67">(<argument pos:start="23:27" pos:end="23:32"><expr pos:start="23:27" pos:end="23:32"><name pos:start="23:27" pos:end="23:32">xen_xc</name></expr></argument>, <argument pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:41"><name pos:start="23:35" pos:end="23:41">ssidref</name></expr></argument>, <argument pos:start="23:44" pos:end="23:47"><expr pos:start="23:44" pos:end="23:47"><name pos:start="23:44" pos:end="23:47">uuid</name></expr></argument>, <argument pos:start="23:50" pos:end="23:54"><expr pos:start="23:50" pos:end="23:54"><name pos:start="23:50" pos:end="23:54">flags</name></expr></argument>, <argument pos:start="23:57" pos:end="23:66"><expr pos:start="23:57" pos:end="23:66"><operator pos:start="23:57" pos:end="23:57">&amp;</operator><name pos:start="23:58" pos:end="23:66">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">&lt;</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition> <block pos:start="25:17" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:60"><expr pos:start="27:9" pos:end="27:59"><call pos:start="27:9" pos:end="27:59"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="27:59">(<argument pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:22"><name pos:start="27:17" pos:end="27:22">stderr</name></expr></argument>, <argument pos:start="27:25" pos:end="27:58"><expr pos:start="27:25" pos:end="27:58"><literal type="string" pos:start="27:25" pos:end="27:58">"xen: xc_domain_create() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:52"><expr pos:start="33:5" pos:end="33:51"><call pos:start="33:5" pos:end="33:51"><name pos:start="33:5" pos:end="33:12">qemu_log</name><argument_list pos:start="33:13" pos:end="33:51">(<argument pos:start="33:14" pos:end="33:39"><expr pos:start="33:14" pos:end="33:39"><literal type="string" pos:start="33:14" pos:end="33:39">"xen: created domain %d\n"</literal></expr></argument>, <argument pos:start="33:42" pos:end="33:50"><expr pos:start="33:42" pos:end="33:50"><name pos:start="33:42" pos:end="33:50">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><call pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:10">atexit</name><argument_list pos:start="35:11" pos:end="35:30">(<argument pos:start="35:12" pos:end="35:29"><expr pos:start="35:12" pos:end="35:29"><name pos:start="35:12" pos:end="35:29">xen_domain_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><call pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:22">xen_domain_watcher</name><argument_list pos:start="37:23" pos:end="37:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><call pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:25">xenstore_domain_init1</name><argument_list pos:start="41:26" pos:end="41:51">(<argument pos:start="41:27" pos:end="41:32"><expr pos:start="41:27" pos:end="41:32"><name pos:start="41:27" pos:end="41:32">kernel</name></expr></argument>, <argument pos:start="41:35" pos:end="41:41"><expr pos:start="41:35" pos:end="41:41"><name pos:start="41:35" pos:end="41:41">ramdisk</name></expr></argument>, <argument pos:start="41:44" pos:end="41:50"><expr pos:start="41:44" pos:end="41:50"><name pos:start="41:44" pos:end="41:50">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:6">rc</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:57"><name pos:start="45:10" pos:end="45:28">xc_domain_max_vcpus</name><argument_list pos:start="45:29" pos:end="45:57">(<argument pos:start="45:30" pos:end="45:35"><expr pos:start="45:30" pos:end="45:35"><name pos:start="45:30" pos:end="45:35">xen_xc</name></expr></argument>, <argument pos:start="45:38" pos:end="45:46"><expr pos:start="45:38" pos:end="45:46"><name pos:start="45:38" pos:end="45:46">xen_domid</name></expr></argument>, <argument pos:start="45:49" pos:end="45:56"><expr pos:start="45:49" pos:end="45:56"><name pos:start="45:49" pos:end="45:56">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="70:0"><if pos:start="47:5" pos:end="70:0">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:10">rc</name> <operator pos:start="47:12" pos:end="47:12">&lt;</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>)</condition> <block pos:start="47:17" pos:end="70:0">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:63"><expr pos:start="49:9" pos:end="49:62"><call pos:start="49:9" pos:end="49:62"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:62">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:61"><expr pos:start="49:25" pos:end="49:61"><literal type="string" pos:start="49:25" pos:end="49:61">"xen: xc_domain_max_vcpus() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

    rc = xc_domain_setcpuweight(xen_xc, xen_domid, 256);

    if (rc &lt; 0) {

        fprintf(stderr, "xen: xc_domain_setcpuweight() failed\n");

        goto err;

    }

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="73:5" pos:end="73:64"><expr pos:start="73:5" pos:end="73:63"><name pos:start="73:5" pos:end="73:6">rc</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="73:63"><name pos:start="73:10" pos:end="73:28">xc_domain_setmaxmem</name><argument_list pos:start="73:29" pos:end="73:63">(<argument pos:start="73:30" pos:end="73:35"><expr pos:start="73:30" pos:end="73:35"><name pos:start="73:30" pos:end="73:35">xen_xc</name></expr></argument>, <argument pos:start="73:38" pos:end="73:46"><expr pos:start="73:38" pos:end="73:46"><name pos:start="73:38" pos:end="73:46">xen_domid</name></expr></argument>, <argument pos:start="73:49" pos:end="73:62"><expr pos:start="73:49" pos:end="73:62"><name pos:start="73:49" pos:end="73:56">ram_size</name> <operator pos:start="73:58" pos:end="73:59">&gt;&gt;</operator> <literal type="number" pos:start="73:61" pos:end="73:62">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:10">rc</name> <operator pos:start="75:12" pos:end="75:12">&lt;</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>)</condition> <block pos:start="75:17" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:17">

        <expr_stmt pos:start="77:9" pos:end="77:63"><expr pos:start="77:9" pos:end="77:62"><call pos:start="77:9" pos:end="77:62"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="77:62">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="77:61"><expr pos:start="77:25" pos:end="77:61"><literal type="string" pos:start="77:25" pos:end="77:61">"xen: xc_domain_setmaxmem() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:17">goto <name pos:start="79:14" pos:end="79:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:66"><expr pos:start="85:5" pos:end="85:65"><name pos:start="85:5" pos:end="85:17">xenstore_port</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:65"><name pos:start="85:21" pos:end="85:43">xc_evtchn_alloc_unbound</name><argument_list pos:start="85:44" pos:end="85:65">(<argument pos:start="85:45" pos:end="85:50"><expr pos:start="85:45" pos:end="85:50"><name pos:start="85:45" pos:end="85:50">xen_xc</name></expr></argument>, <argument pos:start="85:53" pos:end="85:61"><expr pos:start="85:53" pos:end="85:61"><name pos:start="85:53" pos:end="85:61">xen_domid</name></expr></argument>, <argument pos:start="85:64" pos:end="85:64"><expr pos:start="85:64" pos:end="85:64"><literal type="number" pos:start="85:64" pos:end="85:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:65"><expr pos:start="87:5" pos:end="87:64"><name pos:start="87:5" pos:end="87:16">console_port</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:64"><name pos:start="87:20" pos:end="87:42">xc_evtchn_alloc_unbound</name><argument_list pos:start="87:43" pos:end="87:64">(<argument pos:start="87:44" pos:end="87:49"><expr pos:start="87:44" pos:end="87:49"><name pos:start="87:44" pos:end="87:49">xen_xc</name></expr></argument>, <argument pos:start="87:52" pos:end="87:60"><expr pos:start="87:52" pos:end="87:60"><name pos:start="87:52" pos:end="87:60">xen_domid</name></expr></argument>, <argument pos:start="87:63" pos:end="87:63"><expr pos:start="87:63" pos:end="87:63"><literal type="number" pos:start="87:63" pos:end="87:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="99:52"><expr pos:start="91:5" pos:end="99:51"><name pos:start="91:5" pos:end="91:6">rc</name> <operator pos:start="91:8" pos:end="91:8">=</operator> <call pos:start="91:10" pos:end="99:51"><name pos:start="91:10" pos:end="91:23">xc_linux_build</name><argument_list pos:start="91:24" pos:end="99:51">(<argument pos:start="91:25" pos:end="91:30"><expr pos:start="91:25" pos:end="91:30"><name pos:start="91:25" pos:end="91:30">xen_xc</name></expr></argument>, <argument pos:start="91:33" pos:end="91:41"><expr pos:start="91:33" pos:end="91:41"><name pos:start="91:33" pos:end="91:41">xen_domid</name></expr></argument>, <argument pos:start="91:44" pos:end="91:57"><expr pos:start="91:44" pos:end="91:57"><name pos:start="91:44" pos:end="91:51">ram_size</name> <operator pos:start="91:53" pos:end="91:54">&gt;&gt;</operator> <literal type="number" pos:start="91:56" pos:end="91:57">20</literal></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:30">kernel</name></expr></argument>, <argument pos:start="93:33" pos:end="93:39"><expr pos:start="93:33" pos:end="93:39"><name pos:start="93:33" pos:end="93:39">ramdisk</name></expr></argument>, <argument pos:start="93:42" pos:end="93:48"><expr pos:start="93:42" pos:end="93:48"><name pos:start="93:42" pos:end="93:48">cmdline</name></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:25"><expr pos:start="95:25" pos:end="95:25"><literal type="number" pos:start="95:25" pos:end="95:25">0</literal></expr></argument>, <argument pos:start="95:28" pos:end="95:32"><expr pos:start="95:28" pos:end="95:32"><name pos:start="95:28" pos:end="95:32">flags</name></expr></argument>,

                        <argument pos:start="97:25" pos:end="97:37"><expr pos:start="97:25" pos:end="97:37"><name pos:start="97:25" pos:end="97:37">xenstore_port</name></expr></argument>, <argument pos:start="97:40" pos:end="97:52"><expr pos:start="97:40" pos:end="97:52"><operator pos:start="97:40" pos:end="97:40">&amp;</operator><name pos:start="97:41" pos:end="97:52">xenstore_mfn</name></expr></argument>,

                        <argument pos:start="99:25" pos:end="99:36"><expr pos:start="99:25" pos:end="99:36"><name pos:start="99:25" pos:end="99:36">console_port</name></expr></argument>, <argument pos:start="99:39" pos:end="99:50"><expr pos:start="99:39" pos:end="99:50"><operator pos:start="99:39" pos:end="99:39">&amp;</operator><name pos:start="99:40" pos:end="99:50">console_mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:15">(<expr pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:10">rc</name> <operator pos:start="101:12" pos:end="101:12">&lt;</operator> <literal type="number" pos:start="101:14" pos:end="101:14">0</literal></expr>)</condition> <block pos:start="101:17" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:17">

        <expr_stmt pos:start="103:9" pos:end="103:58"><expr pos:start="103:9" pos:end="103:57"><call pos:start="103:9" pos:end="103:57"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="103:57">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>, <argument pos:start="103:25" pos:end="103:56"><expr pos:start="103:25" pos:end="103:56"><literal type="string" pos:start="103:25" pos:end="103:56">"xen: xc_linux_build() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:17">goto <name pos:start="105:14" pos:end="105:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="113:53"><expr pos:start="111:5" pos:end="113:52"><call pos:start="111:5" pos:end="113:52"><name pos:start="111:5" pos:end="111:25">xenstore_domain_init2</name><argument_list pos:start="111:26" pos:end="113:52">(<argument pos:start="111:27" pos:end="111:39"><expr pos:start="111:27" pos:end="111:39"><name pos:start="111:27" pos:end="111:39">xenstore_port</name></expr></argument>, <argument pos:start="111:42" pos:end="111:53"><expr pos:start="111:42" pos:end="111:53"><name pos:start="111:42" pos:end="111:53">xenstore_mfn</name></expr></argument>,

                          <argument pos:start="113:27" pos:end="113:38"><expr pos:start="113:27" pos:end="113:38"><name pos:start="113:27" pos:end="113:38">console_port</name></expr></argument>, <argument pos:start="113:41" pos:end="113:51"><expr pos:start="113:41" pos:end="113:51"><name pos:start="113:41" pos:end="113:51">console_mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:54"><expr pos:start="117:5" pos:end="117:53"><call pos:start="117:5" pos:end="117:53"><name pos:start="117:5" pos:end="117:12">qemu_log</name><argument_list pos:start="117:13" pos:end="117:53">(<argument pos:start="117:14" pos:end="117:41"><expr pos:start="117:14" pos:end="117:41"><literal type="string" pos:start="117:14" pos:end="117:41">"xen: unpausing domain %d\n"</literal></expr></argument>, <argument pos:start="117:44" pos:end="117:52"><expr pos:start="117:44" pos:end="117:52"><name pos:start="117:44" pos:end="117:52">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:46"><expr pos:start="119:5" pos:end="119:45"><name pos:start="119:5" pos:end="119:6">rc</name> <operator pos:start="119:8" pos:end="119:8">=</operator> <call pos:start="119:10" pos:end="119:45"><name pos:start="119:10" pos:end="119:26">xc_domain_unpause</name><argument_list pos:start="119:27" pos:end="119:45">(<argument pos:start="119:28" pos:end="119:33"><expr pos:start="119:28" pos:end="119:33"><name pos:start="119:28" pos:end="119:33">xen_xc</name></expr></argument>, <argument pos:start="119:36" pos:end="119:44"><expr pos:start="119:36" pos:end="119:44"><name pos:start="119:36" pos:end="119:44">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:15">(<expr pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:10">rc</name> <operator pos:start="121:12" pos:end="121:12">&lt;</operator> <literal type="number" pos:start="121:14" pos:end="121:14">0</literal></expr>)</condition> <block pos:start="121:17" pos:end="127:5">{<block_content pos:start="123:9" pos:end="125:17">

        <expr_stmt pos:start="123:9" pos:end="123:61"><expr pos:start="123:9" pos:end="123:60"><call pos:start="123:9" pos:end="123:60"><name pos:start="123:9" pos:end="123:15">fprintf</name><argument_list pos:start="123:16" pos:end="123:60">(<argument pos:start="123:17" pos:end="123:22"><expr pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">stderr</name></expr></argument>, <argument pos:start="123:25" pos:end="123:59"><expr pos:start="123:25" pos:end="123:59"><literal type="string" pos:start="123:25" pos:end="123:59">"xen: xc_domain_unpause() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="125:9" pos:end="125:17">goto <name pos:start="125:14" pos:end="125:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:63"><expr pos:start="131:5" pos:end="131:62"><name pos:start="131:5" pos:end="131:12">xen_poll</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:62"><name pos:start="131:16" pos:end="131:29">qemu_new_timer</name><argument_list pos:start="131:30" pos:end="131:62">(<argument pos:start="131:31" pos:end="131:38"><expr pos:start="131:31" pos:end="131:38"><name pos:start="131:31" pos:end="131:38">rt_clock</name></expr></argument>, <argument pos:start="131:41" pos:end="131:55"><expr pos:start="131:41" pos:end="131:55"><name pos:start="131:41" pos:end="131:55">xen_domain_poll</name></expr></argument>, <argument pos:start="131:58" pos:end="131:61"><expr pos:start="131:58" pos:end="131:61"><name pos:start="131:58" pos:end="131:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:62"><expr pos:start="133:5" pos:end="133:61"><call pos:start="133:5" pos:end="133:61"><name pos:start="133:5" pos:end="133:18">qemu_mod_timer</name><argument_list pos:start="133:19" pos:end="133:61">(<argument pos:start="133:20" pos:end="133:27"><expr pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:27">xen_poll</name></expr></argument>, <argument pos:start="133:30" pos:end="133:60"><expr pos:start="133:30" pos:end="133:60"><call pos:start="133:30" pos:end="133:53"><name pos:start="133:30" pos:end="133:43">qemu_get_clock</name><argument_list pos:start="133:44" pos:end="133:53">(<argument pos:start="133:45" pos:end="133:52"><expr pos:start="133:45" pos:end="133:52"><name pos:start="133:45" pos:end="133:52">rt_clock</name></expr></argument>)</argument_list></call> <operator pos:start="133:55" pos:end="133:55">+</operator> <literal type="number" pos:start="133:57" pos:end="133:60">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>



<label pos:start="139:1" pos:end="139:4"><name pos:start="139:1" pos:end="139:3">err</name>:</label>

    <return pos:start="141:5" pos:end="141:14">return <expr pos:start="141:12" pos:end="141:13"><operator pos:start="141:12" pos:end="141:12">-</operator><literal type="number" pos:start="141:13" pos:end="141:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
