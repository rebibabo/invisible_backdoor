<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/343.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:43"><name pos:start="1:1" pos:end="1:15">ebml_read_ascii</name> <argument_list pos:start="1:17" pos:end="5:43">(<argument pos:start="1:18" pos:end="1:47">MatroskaDemuxContext *matroska</argument>,

                 <argument pos:start="3:18" pos:end="3:41">uint32_t             *id</argument>,

                 <argument pos:start="5:18" pos:end="5:42">char                **str</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="58:1">{<block_content pos:start="9:5" pos:end="56:13">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">ByteIOContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pb</name> <init pos:start="9:23" pos:end="9:41">= <expr pos:start="9:25" pos:end="9:41"><name pos:start="9:25" pos:end="9:41"><name pos:start="9:25" pos:end="9:32">matroska</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:37">ctx</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:41">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:20">rlength</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:19"><if pos:start="17:5" pos:end="21:19">if <condition pos:start="17:8" pos:end="19:65">(<expr pos:start="17:9" pos:end="19:64"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:12">res</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:55"><name pos:start="17:16" pos:end="17:35">ebml_read_element_id</name><argument_list pos:start="17:36" pos:end="17:55">(<argument pos:start="17:37" pos:end="17:44"><expr pos:start="17:37" pos:end="17:44"><name pos:start="17:37" pos:end="17:44">matroska</name></expr></argument>, <argument pos:start="17:47" pos:end="17:48"><expr pos:start="17:47" pos:end="17:48"><name pos:start="17:47" pos:end="17:48">id</name></expr></argument>, <argument pos:start="17:51" pos:end="17:54"><expr pos:start="17:51" pos:end="17:54"><name pos:start="17:51" pos:end="17:54">NULL</name></expr></argument>)</argument_list></call><operator pos:start="17:56" pos:end="17:56">)</operator> <operator pos:start="17:58" pos:end="17:58">&lt;</operator> <literal type="number" pos:start="17:60" pos:end="17:60">0</literal> <operator pos:start="17:62" pos:end="17:63">||</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:12">res</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:59"><name pos:start="19:16" pos:end="19:39">ebml_read_element_length</name><argument_list pos:start="19:40" pos:end="19:59">(<argument pos:start="19:41" pos:end="19:48"><expr pos:start="19:41" pos:end="19:48"><name pos:start="19:41" pos:end="19:48">matroska</name></expr></argument>, <argument pos:start="19:51" pos:end="19:58"><expr pos:start="19:51" pos:end="19:58"><operator pos:start="19:51" pos:end="19:51">&amp;</operator><name pos:start="19:52" pos:end="19:58">rlength</name></expr></argument>)</argument_list></call><operator pos:start="19:60" pos:end="19:60">)</operator> <operator pos:start="19:62" pos:end="19:62">&lt;</operator> <literal type="number" pos:start="19:64" pos:end="19:64">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:19"><block_content pos:start="21:9" pos:end="21:19">

        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">res</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:8">size</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:18">rlength</name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="29:69">/* ebml strings are usually not 0-terminated, so we allocate one

     * byte more, read the string and NULL-terminate it ourselves. */</comment>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:50">(<expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:12">size</name> <operator pos:start="31:14" pos:end="31:14">&lt;</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal> <operator pos:start="31:18" pos:end="31:19">||</operator> <operator pos:start="31:21" pos:end="31:21">!</operator><operator pos:start="31:22" pos:end="31:22">(</operator><operator pos:start="31:23" pos:end="31:23">*</operator><name pos:start="31:24" pos:end="31:26">str</name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:48"><name pos:start="31:30" pos:end="31:38">av_malloc</name><argument_list pos:start="31:39" pos:end="31:48">(<argument pos:start="31:40" pos:end="31:47"><expr pos:start="31:40" pos:end="31:47"><name pos:start="31:40" pos:end="31:43">size</name> <operator pos:start="31:45" pos:end="31:45">+</operator> <literal type="number" pos:start="31:47" pos:end="31:47">1</literal></expr></argument>)</argument_list></call><operator pos:start="31:49" pos:end="31:49">)</operator></expr>)</condition> <block pos:start="31:52" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:31">

        <expr_stmt pos:start="33:9" pos:end="33:74"><expr pos:start="33:9" pos:end="33:73"><call pos:start="33:9" pos:end="33:73"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:73">(<argument pos:start="33:16" pos:end="33:28"><expr pos:start="33:16" pos:end="33:28"><name pos:start="33:16" pos:end="33:28"><name pos:start="33:16" pos:end="33:23">matroska</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:28">ctx</name></name></expr></argument>, <argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:45" pos:end="33:72"><expr pos:start="33:45" pos:end="33:72"><literal type="string" pos:start="33:45" pos:end="33:72">"Memory allocation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="50:5"><if pos:start="39:5" pos:end="50:5">if <condition pos:start="39:8" pos:end="39:55">(<expr pos:start="39:9" pos:end="39:54"><call pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:18">get_buffer</name><argument_list pos:start="39:19" pos:end="39:46">(<argument pos:start="39:20" pos:end="39:21"><expr pos:start="39:20" pos:end="39:21"><name pos:start="39:20" pos:end="39:21">pb</name></expr></argument>, <argument pos:start="39:24" pos:end="39:39"><expr pos:start="39:24" pos:end="39:39"><operator pos:start="39:24" pos:end="39:24">(</operator><name pos:start="39:25" pos:end="39:31">uint8_t</name> <operator pos:start="39:33" pos:end="39:33">*</operator><operator pos:start="39:34" pos:end="39:34">)</operator> <operator pos:start="39:36" pos:end="39:36">*</operator><name pos:start="39:37" pos:end="39:39">str</name></expr></argument>, <argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:45">size</name></expr></argument>)</argument_list></call> <operator pos:start="39:48" pos:end="39:49">!=</operator> <name pos:start="39:51" pos:end="39:54">size</name></expr>)</condition> <block pos:start="39:57" pos:end="50:5">{<block_content pos:start="41:9" pos:end="48:28">

        <decl_stmt pos:start="41:9" pos:end="41:37"><decl pos:start="41:9" pos:end="41:36"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">offset_t</name></type> <name pos:start="41:18" pos:end="41:20">pos</name> <init pos:start="41:22" pos:end="41:36">= <expr pos:start="41:24" pos:end="41:36"><call pos:start="41:24" pos:end="41:36"><name pos:start="41:24" pos:end="41:32">url_ftell</name><argument_list pos:start="41:33" pos:end="41:36">(<argument pos:start="41:34" pos:end="41:35"><expr pos:start="41:34" pos:end="41:35"><name pos:start="41:34" pos:end="41:35">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="45:73"><expr pos:start="43:9" pos:end="45:72"><call pos:start="43:9" pos:end="45:72"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="45:72">(<argument pos:start="43:16" pos:end="43:28"><expr pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:23">matroska</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:28">ctx</name></name></expr></argument>, <argument pos:start="43:31" pos:end="43:42"><expr pos:start="43:31" pos:end="43:42"><name pos:start="43:31" pos:end="43:42">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="45:16" pos:end="45:61"><expr pos:start="45:16" pos:end="45:61"><literal type="string" pos:start="45:16" pos:end="45:37">"Read error at pos. %"</literal><name pos:start="45:38" pos:end="45:43">PRIu64</name><literal type="string" pos:start="45:44" pos:end="45:50">" (0x%"</literal><name pos:start="45:51" pos:end="45:56">PRIx64</name><literal type="string" pos:start="45:57" pos:end="45:61">")\n"</literal></expr></argument>, <argument pos:start="45:64" pos:end="45:66"><expr pos:start="45:64" pos:end="45:66"><name pos:start="45:64" pos:end="45:66">pos</name></expr></argument>, <argument pos:start="45:69" pos:end="45:71"><expr pos:start="45:69" pos:end="45:71"><name pos:start="45:69" pos:end="45:71">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="48:9" pos:end="48:28">return <expr pos:start="48:16" pos:end="48:27"><call pos:start="48:16" pos:end="48:27"><name pos:start="48:16" pos:end="48:22">AVERROR</name><argument_list pos:start="48:23" pos:end="48:27">(<argument pos:start="48:24" pos:end="48:26"><expr pos:start="48:24" pos:end="48:26"><name pos:start="48:24" pos:end="48:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="52:5" pos:end="52:24"><expr pos:start="52:5" pos:end="52:23"><operator pos:start="52:5" pos:end="52:5">(</operator><operator pos:start="52:6" pos:end="52:6">*</operator><name pos:start="52:7" pos:end="52:9">str</name><operator pos:start="52:10" pos:end="52:10">)</operator><index pos:start="52:11" pos:end="52:16">[<expr pos:start="52:12" pos:end="52:15"><name pos:start="52:12" pos:end="52:15">size</name></expr>]</index> <operator pos:start="52:18" pos:end="52:18">=</operator> <literal type="char" pos:start="52:20" pos:end="52:23">'\0'</literal></expr>;</expr_stmt>



    <return pos:start="56:5" pos:end="56:13">return <expr pos:start="56:12" pos:end="56:12"><literal type="number" pos:start="56:12" pos:end="56:12">0</literal></expr>;</return>

</block_content>}</block></unit>
