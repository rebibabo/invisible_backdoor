<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17629.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">nabm_writel</name> <parameter_list pos:start="1:25" pos:end="1:67">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:47">uint32_t</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:66">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">PCIAC97LinkState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">d</name> <init pos:start="5:25" pos:end="5:32">= <expr pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">AC97LinkState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:31">= <expr pos:start="7:24" pos:end="7:31"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:31"><name pos:start="7:25" pos:end="7:25">d</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:31">ac97</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">AC97BusMasterRegs</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">r</name> <init pos:start="9:26" pos:end="9:31">= <expr pos:start="9:28" pos:end="9:31"><name pos:start="9:28" pos:end="9:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">index</name> <init pos:start="11:20" pos:end="11:38">= <expr pos:start="11:22" pos:end="11:38"><name pos:start="11:22" pos:end="11:25">addr</name> <operator pos:start="11:27" pos:end="11:27">-</operator> <name pos:start="11:29" pos:end="11:38"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:35">base</name><index pos:start="11:36" pos:end="11:38">[<expr pos:start="11:37" pos:end="11:37"><literal type="number" pos:start="11:37" pos:end="11:37">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <switch pos:start="13:5" pos:end="65:5">switch <condition pos:start="13:12" pos:end="13:18">(<expr pos:start="13:13" pos:end="13:17"><name pos:start="13:13" pos:end="13:17">index</name></expr>)</condition> <block pos:start="13:20" pos:end="65:5">{<block_content pos:start="15:5" pos:end="63:14">

    <case pos:start="15:5" pos:end="15:18">case <expr pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:17">PI_BDBAR</name></expr>:</case>

    <case pos:start="17:5" pos:end="17:18">case <expr pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:17">PO_BDBAR</name></expr>:</case>

    <case pos:start="19:5" pos:end="19:18">case <expr pos:start="19:10" pos:end="19:17"><name pos:start="19:10" pos:end="19:17">MC_BDBAR</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:40"><expr pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:9">r</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <operator pos:start="21:13" pos:end="21:13">&amp;</operator><name pos:start="21:14" pos:end="21:39"><name pos:start="21:14" pos:end="21:14">s</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">bm_regs</name><index pos:start="21:24" pos:end="21:39">[<expr pos:start="21:25" pos:end="21:38"><call pos:start="21:25" pos:end="21:38"><name pos:start="21:25" pos:end="21:30">GET_BM</name> <argument_list pos:start="21:32" pos:end="21:38">(<argument pos:start="21:33" pos:end="21:37"><expr pos:start="21:33" pos:end="21:37"><name pos:start="21:33" pos:end="21:37">index</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:9">r</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:16">bdbar</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:22">val</name> <operator pos:start="23:24" pos:end="23:24">&amp;</operator> <operator pos:start="23:26" pos:end="23:26">~</operator><literal type="number" pos:start="23:27" pos:end="23:27">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:46"><expr pos:start="25:9" pos:end="27:45"><call pos:start="25:9" pos:end="27:45"><name pos:start="25:9" pos:end="25:13">dolog</name> <argument_list pos:start="25:15" pos:end="27:45">(<argument pos:start="25:16" pos:end="25:47"><expr pos:start="25:16" pos:end="25:47"><literal type="string" pos:start="25:16" pos:end="25:47">"BDBAR[%d] &lt;- %#x (bdbar %#x)\n"</literal></expr></argument>,

               <argument pos:start="27:16" pos:end="27:29"><expr pos:start="27:16" pos:end="27:29"><call pos:start="27:16" pos:end="27:29"><name pos:start="27:16" pos:end="27:21">GET_BM</name> <argument_list pos:start="27:23" pos:end="27:29">(<argument pos:start="27:24" pos:end="27:28"><expr pos:start="27:24" pos:end="27:28"><name pos:start="27:24" pos:end="27:28">index</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">val</name></expr></argument>, <argument pos:start="27:37" pos:end="27:44"><expr pos:start="27:37" pos:end="27:44"><name pos:start="27:37" pos:end="27:44"><name pos:start="27:37" pos:end="27:37">r</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:44">bdbar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:18">case <expr pos:start="31:10" pos:end="31:17"><name pos:start="31:10" pos:end="31:17">GLOB_CNT</name></expr>:</case>

        <if_stmt pos:start="33:9" pos:end="35:27"><if pos:start="33:9" pos:end="35:27">if <condition pos:start="33:12" pos:end="33:24">(<expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:17">&amp;</operator> <name pos:start="33:19" pos:end="33:23">GC_WR</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:27"><block_content pos:start="35:13" pos:end="35:27">

            <expr_stmt pos:start="35:13" pos:end="35:27"><expr pos:start="35:13" pos:end="35:26"><call pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:22">warm_reset</name> <argument_list pos:start="35:24" pos:end="35:26">(<argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><name pos:start="35:25" pos:end="35:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="39:27"><if pos:start="37:9" pos:end="39:27">if <condition pos:start="37:12" pos:end="37:24">(<expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:15">val</name> <operator pos:start="37:17" pos:end="37:17">&amp;</operator> <name pos:start="37:19" pos:end="37:23">GC_CR</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:27"><block_content pos:start="39:13" pos:end="39:27">

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><call pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:22">cold_reset</name> <argument_list pos:start="39:24" pos:end="39:26">(<argument pos:start="39:25" pos:end="39:25"><expr pos:start="39:25" pos:end="39:25"><name pos:start="39:25" pos:end="39:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="43:46"><if pos:start="41:9" pos:end="43:46">if <condition pos:start="41:12" pos:end="41:37">(<expr pos:start="41:13" pos:end="41:36"><operator pos:start="41:13" pos:end="41:13">!</operator><operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:17">val</name> <operator pos:start="41:19" pos:end="41:19">&amp;</operator> <operator pos:start="41:21" pos:end="41:21">(</operator><name pos:start="41:22" pos:end="41:26">GC_WR</name> <operator pos:start="41:28" pos:end="41:28">|</operator> <name pos:start="41:30" pos:end="41:34">GC_CR</name><operator pos:start="41:35" pos:end="41:35">)</operator><operator pos:start="41:36" pos:end="41:36">)</operator></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:46"><block_content pos:start="43:13" pos:end="43:46">

            <expr_stmt pos:start="43:13" pos:end="43:46"><expr pos:start="43:13" pos:end="43:45"><name pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:23">glob_cnt</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:29">val</name> <operator pos:start="43:31" pos:end="43:31">&amp;</operator> <name pos:start="43:33" pos:end="43:45">GC_VALID_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:69"><expr pos:start="45:9" pos:end="45:68"><call pos:start="45:9" pos:end="45:68"><name pos:start="45:9" pos:end="45:13">dolog</name> <argument_list pos:start="45:15" pos:end="45:68">(<argument pos:start="45:16" pos:end="45:49"><expr pos:start="45:16" pos:end="45:49"><literal type="string" pos:start="45:16" pos:end="45:49">"glob_cnt &lt;- %#x (glob_cnt %#x)\n"</literal></expr></argument>, <argument pos:start="45:52" pos:end="45:54"><expr pos:start="45:52" pos:end="45:54"><name pos:start="45:52" pos:end="45:54">val</name></expr></argument>, <argument pos:start="45:57" pos:end="45:67"><expr pos:start="45:57" pos:end="45:67"><name pos:start="45:57" pos:end="45:67"><name pos:start="45:57" pos:end="45:57">s</name><operator pos:start="45:58" pos:end="45:59">-&gt;</operator><name pos:start="45:60" pos:end="45:67">glob_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:18">case <expr pos:start="49:10" pos:end="49:17"><name pos:start="49:10" pos:end="49:17">GLOB_STA</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:19">glob_sta</name></name> <operator pos:start="51:21" pos:end="51:22">&amp;=</operator> <operator pos:start="51:24" pos:end="51:24">~</operator><operator pos:start="51:25" pos:end="51:25">(</operator><name pos:start="51:26" pos:end="51:28">val</name> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <name pos:start="51:32" pos:end="51:45">GS_WCLEAR_MASK</name><operator pos:start="51:46" pos:end="51:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:78"><expr pos:start="53:9" pos:end="53:77"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:19">glob_sta</name></name> <operator pos:start="53:21" pos:end="53:22">|=</operator> <operator pos:start="53:24" pos:end="53:24">(</operator><name pos:start="53:25" pos:end="53:27">val</name> <operator pos:start="53:29" pos:end="53:29">&amp;</operator> <operator pos:start="53:31" pos:end="53:31">~</operator><operator pos:start="53:32" pos:end="53:32">(</operator><name pos:start="53:33" pos:end="53:46">GS_WCLEAR_MASK</name> <operator pos:start="53:48" pos:end="53:48">|</operator> <name pos:start="53:50" pos:end="53:59">GS_RO_MASK</name><operator pos:start="53:60" pos:end="53:60">)</operator><operator pos:start="53:61" pos:end="53:61">)</operator> <operator pos:start="53:63" pos:end="53:63">&amp;</operator> <name pos:start="53:65" pos:end="53:77">GS_VALID_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:69"><expr pos:start="55:9" pos:end="55:68"><call pos:start="55:9" pos:end="55:68"><name pos:start="55:9" pos:end="55:13">dolog</name> <argument_list pos:start="55:15" pos:end="55:68">(<argument pos:start="55:16" pos:end="55:49"><expr pos:start="55:16" pos:end="55:49"><literal type="string" pos:start="55:16" pos:end="55:49">"glob_sta &lt;- %#x (glob_sta %#x)\n"</literal></expr></argument>, <argument pos:start="55:52" pos:end="55:54"><expr pos:start="55:52" pos:end="55:54"><name pos:start="55:52" pos:end="55:54">val</name></expr></argument>, <argument pos:start="55:57" pos:end="55:67"><expr pos:start="55:57" pos:end="55:67"><name pos:start="55:57" pos:end="55:67"><name pos:start="55:57" pos:end="55:57">s</name><operator pos:start="55:58" pos:end="55:59">-&gt;</operator><name pos:start="55:60" pos:end="55:67">glob_sta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <default pos:start="59:5" pos:end="59:12">default:</default>

        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><call pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:13">dolog</name> <argument_list pos:start="61:15" pos:end="61:55">(<argument pos:start="61:16" pos:end="61:43"><expr pos:start="61:16" pos:end="61:43"><literal type="string" pos:start="61:16" pos:end="61:43">"U nabm writel %#x &lt;- %#x\n"</literal></expr></argument>, <argument pos:start="61:46" pos:end="61:49"><expr pos:start="61:46" pos:end="61:49"><name pos:start="61:46" pos:end="61:49">addr</name></expr></argument>, <argument pos:start="61:52" pos:end="61:54"><expr pos:start="61:52" pos:end="61:54"><name pos:start="61:52" pos:end="61:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
