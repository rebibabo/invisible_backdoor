<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25924.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">ehci_advance_async_state</name><parameter_list pos:start="1:37" pos:end="1:53">(<parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:46">EHCIState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">ehci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:19">async</name> <init pos:start="5:21" pos:end="5:23">= <expr pos:start="5:23" pos:end="5:23"><literal type="number" pos:start="5:23" pos:end="5:23">1</literal></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="105:5">switch<condition pos:start="9:11" pos:end="9:39">(<expr pos:start="9:12" pos:end="9:38"><call pos:start="9:12" pos:end="9:38"><name pos:start="9:12" pos:end="9:25">ehci_get_state</name><argument_list pos:start="9:26" pos:end="9:38">(<argument pos:start="9:27" pos:end="9:30"><expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">ehci</name></expr></argument>, <argument pos:start="9:33" pos:end="9:37"><expr pos:start="9:33" pos:end="9:37"><name pos:start="9:33" pos:end="9:37">async</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:41" pos:end="105:5">{<block_content pos:start="11:5" pos:end="103:18">

    <case pos:start="11:5" pos:end="11:22">case <expr pos:start="11:10" pos:end="11:21"><name pos:start="11:10" pos:end="11:21">EST_INACTIVE</name></expr>:</case>

        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if <condition pos:start="13:12" pos:end="13:38">(<expr pos:start="13:13" pos:end="13:37"><operator pos:start="13:13" pos:end="13:13">!</operator><call pos:start="13:14" pos:end="13:37"><name pos:start="13:14" pos:end="13:31">ehci_async_enabled</name><argument_list pos:start="13:32" pos:end="13:37">(<argument pos:start="13:33" pos:end="13:36"><expr pos:start="13:33" pos:end="13:36"><name pos:start="13:33" pos:end="13:36">ehci</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:40" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:18">

            <break pos:start="15:13" pos:end="15:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:48"><expr pos:start="19:9" pos:end="19:47"><call pos:start="19:9" pos:end="19:47"><name pos:start="19:9" pos:end="19:22">ehci_set_state</name><argument_list pos:start="19:23" pos:end="19:47">(<argument pos:start="19:24" pos:end="19:27"><expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">ehci</name></expr></argument>, <argument pos:start="19:30" pos:end="19:34"><expr pos:start="19:30" pos:end="19:34"><name pos:start="19:30" pos:end="19:34">async</name></expr></argument>, <argument pos:start="19:37" pos:end="19:46"><expr pos:start="19:37" pos:end="19:46"><name pos:start="19:37" pos:end="19:46">EST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="21:9" pos:end="21:43">// No break, fall through to ACTIVE</comment>



    <case pos:start="25:5" pos:end="25:20">case <expr pos:start="25:10" pos:end="25:19"><name pos:start="25:10" pos:end="25:19">EST_ACTIVE</name></expr>:</case>

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="35:9">if <condition pos:start="27:12" pos:end="27:38">(<expr pos:start="27:13" pos:end="27:37"><operator pos:start="27:13" pos:end="27:13">!</operator><call pos:start="27:14" pos:end="27:37"><name pos:start="27:14" pos:end="27:31">ehci_async_enabled</name><argument_list pos:start="27:32" pos:end="27:37">(<argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">ehci</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:40" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:18">

            <expr_stmt pos:start="29:13" pos:end="29:45"><expr pos:start="29:13" pos:end="29:44"><call pos:start="29:13" pos:end="29:44"><name pos:start="29:13" pos:end="29:31">ehci_queues_rip_all</name><argument_list pos:start="29:32" pos:end="29:44">(<argument pos:start="29:33" pos:end="29:36"><expr pos:start="29:33" pos:end="29:36"><name pos:start="29:33" pos:end="29:36">ehci</name></expr></argument>, <argument pos:start="29:39" pos:end="29:43"><expr pos:start="29:39" pos:end="29:43"><name pos:start="29:39" pos:end="29:43">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:54"><expr pos:start="31:13" pos:end="31:53"><call pos:start="31:13" pos:end="31:53"><name pos:start="31:13" pos:end="31:26">ehci_set_state</name><argument_list pos:start="31:27" pos:end="31:53">(<argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><name pos:start="31:28" pos:end="31:31">ehci</name></expr></argument>, <argument pos:start="31:34" pos:end="31:38"><expr pos:start="31:34" pos:end="31:38"><name pos:start="31:34" pos:end="31:38">async</name></expr></argument>, <argument pos:start="31:41" pos:end="31:52"><expr pos:start="31:41" pos:end="31:52"><name pos:start="31:41" pos:end="31:52">EST_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:69">/* make sure guest has acknowledged the doorbell interrupt */</comment>

        <comment type="block" pos:start="41:9" pos:end="41:43">/* TO-DO: is this really needed? */</comment>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:38">(<expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:16">ehci</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:24">usbsts</name></name> <operator pos:start="43:26" pos:end="43:26">&amp;</operator> <name pos:start="43:28" pos:end="43:37">USBSTS_IAA</name></expr>)</condition> <block pos:start="43:40" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:18">

            <expr_stmt pos:start="45:13" pos:end="45:51"><expr pos:start="45:13" pos:end="45:50"><call pos:start="45:13" pos:end="45:50"><name pos:start="45:13" pos:end="45:19">DPRINTF</name><argument_list pos:start="45:20" pos:end="45:50">(<argument pos:start="45:21" pos:end="45:49"><expr pos:start="45:21" pos:end="45:49"><literal type="string" pos:start="45:21" pos:end="45:49">"IAA status bit still set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:54">/* check that address register has been set */</comment>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:37">(<expr pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:16">ehci</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:31">asynclistaddr</name></name> <operator pos:start="55:33" pos:end="55:34">==</operator> <literal type="number" pos:start="55:36" pos:end="55:36">0</literal></expr>)</condition> <block pos:start="55:39" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:18">

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:54"><expr pos:start="63:9" pos:end="63:53"><call pos:start="63:9" pos:end="63:53"><name pos:start="63:9" pos:end="63:22">ehci_set_state</name><argument_list pos:start="63:23" pos:end="63:53">(<argument pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">ehci</name></expr></argument>, <argument pos:start="63:30" pos:end="63:34"><expr pos:start="63:30" pos:end="63:34"><name pos:start="63:30" pos:end="63:34">async</name></expr></argument>, <argument pos:start="63:37" pos:end="63:52"><expr pos:start="63:37" pos:end="63:52"><name pos:start="63:37" pos:end="63:52">EST_WAITLISTHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:26">ehci_advance_state</name><argument_list pos:start="65:27" pos:end="65:39">(<argument pos:start="65:28" pos:end="65:31"><expr pos:start="65:28" pos:end="65:31"><name pos:start="65:28" pos:end="65:31">ehci</name></expr></argument>, <argument pos:start="65:34" pos:end="65:38"><expr pos:start="65:34" pos:end="65:38"><name pos:start="65:34" pos:end="65:38">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="69:9" pos:end="75:11">/* If the doorbell is set, the guest wants to make a change to the

         * schedule. The host controller needs to release cached data.

         * (section 4.8.2)

         */</comment>

        <if_stmt pos:start="77:9" pos:end="89:9"><if pos:start="77:9" pos:end="89:9">if <condition pos:start="77:12" pos:end="77:39">(<expr pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:16">ehci</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:24">usbcmd</name></name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <name pos:start="77:28" pos:end="77:38">USBCMD_IAAD</name></expr>)</condition> <block pos:start="77:41" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:49">

            <comment type="block" pos:start="79:13" pos:end="79:64">/* Remove all unseen qhs from the async qhs queue */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:51"><expr pos:start="81:13" pos:end="81:50"><call pos:start="81:13" pos:end="81:50"><name pos:start="81:13" pos:end="81:34">ehci_queues_rip_unused</name><argument_list pos:start="81:35" pos:end="81:50">(<argument pos:start="81:36" pos:end="81:39"><expr pos:start="81:36" pos:end="81:39"><name pos:start="81:36" pos:end="81:39">ehci</name></expr></argument>, <argument pos:start="81:42" pos:end="81:46"><expr pos:start="81:42" pos:end="81:46"><name pos:start="81:42" pos:end="81:46">async</name></expr></argument>, <argument pos:start="81:49" pos:end="81:49"><expr pos:start="81:49" pos:end="81:49"><literal type="number" pos:start="81:49" pos:end="81:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:62"><expr pos:start="83:13" pos:end="83:61"><call pos:start="83:13" pos:end="83:61"><name pos:start="83:13" pos:end="83:19">DPRINTF</name><argument_list pos:start="83:20" pos:end="83:61">(<argument pos:start="83:21" pos:end="83:60"><expr pos:start="83:21" pos:end="83:60"><literal type="string" pos:start="83:21" pos:end="83:60">"ASYNC: doorbell request acknowledged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:41"><expr pos:start="85:13" pos:end="85:40"><name pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:16">ehci</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:24">usbcmd</name></name> <operator pos:start="85:26" pos:end="85:27">&amp;=</operator> <operator pos:start="85:29" pos:end="85:29">~</operator><name pos:start="85:30" pos:end="85:40">USBCMD_IAAD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:49"><expr pos:start="87:13" pos:end="87:48"><call pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:30">ehci_set_interrupt</name><argument_list pos:start="87:31" pos:end="87:48">(<argument pos:start="87:32" pos:end="87:35"><expr pos:start="87:32" pos:end="87:35"><name pos:start="87:32" pos:end="87:35">ehci</name></expr></argument>, <argument pos:start="87:38" pos:end="87:47"><expr pos:start="87:38" pos:end="87:47"><name pos:start="87:38" pos:end="87:47">USBSTS_IAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <default pos:start="95:5" pos:end="95:12">default:</default>

        <comment type="block" pos:start="97:9" pos:end="97:60">/* this should only be due to a developer mistake */</comment>

        <expr_stmt pos:start="99:9" pos:end="101:55"><expr pos:start="99:9" pos:end="101:54"><call pos:start="99:9" pos:end="101:54"><name pos:start="99:9" pos:end="99:15">fprintf</name><argument_list pos:start="99:16" pos:end="101:54">(<argument pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">stderr</name></expr></argument>, <argument pos:start="99:25" pos:end="101:39"><expr pos:start="99:25" pos:end="101:39"><literal type="string" pos:start="99:25" pos:end="99:59">"ehci: Bad asynchronous state %d. "</literal>

                <literal type="string" pos:start="101:17" pos:end="101:39">"Resetting to active\n"</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:53"><expr pos:start="101:42" pos:end="101:53"><name pos:start="101:42" pos:end="101:53"><name pos:start="101:42" pos:end="101:45">ehci</name><operator pos:start="101:46" pos:end="101:47">-&gt;</operator><name pos:start="101:48" pos:end="101:53">astate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:18"><expr pos:start="103:9" pos:end="103:17"><call pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:14">assert</name><argument_list pos:start="103:15" pos:end="103:17">(<argument pos:start="103:16" pos:end="103:16"><expr pos:start="103:16" pos:end="103:16"><literal type="number" pos:start="103:16" pos:end="103:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
