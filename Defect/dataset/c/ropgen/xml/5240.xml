<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5240.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">ide_sector_write_cb</name><parameter_list pos:start="1:32" pos:end="1:54">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:11">ret</name> <operator pos:start="11:13" pos:end="11:14">==</operator> <operator pos:start="11:16" pos:end="11:16">-</operator><name pos:start="11:17" pos:end="11:25">ECANCELED</name></expr>)</condition> <block pos:start="11:28" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:53"><expr pos:start="17:5" pos:end="17:52"><call pos:start="17:5" pos:end="17:52"><name pos:start="17:5" pos:end="17:19">block_acct_done</name><argument_list pos:start="17:20" pos:end="17:52">(<argument pos:start="17:21" pos:end="17:41"><expr pos:start="17:21" pos:end="17:41"><call pos:start="17:21" pos:end="17:41"><name pos:start="17:21" pos:end="17:34">bdrv_get_stats</name><argument_list pos:start="17:35" pos:end="17:41">(<argument pos:start="17:36" pos:end="17:40"><expr pos:start="17:36" pos:end="17:40"><name pos:start="17:36" pos:end="17:40"><name pos:start="17:36" pos:end="17:36">s</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:40">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:44" pos:end="17:51"><expr pos:start="17:44" pos:end="17:51"><operator pos:start="17:44" pos:end="17:44">&amp;</operator><name pos:start="17:45" pos:end="17:51"><name pos:start="17:45" pos:end="17:45">s</name><operator pos:start="17:46" pos:end="17:47">-&gt;</operator><name pos:start="17:48" pos:end="17:51">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:16">pio_aiocb</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <name pos:start="21:20" pos:end="21:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">status</name></name> <operator pos:start="23:15" pos:end="23:16">&amp;=</operator> <operator pos:start="23:18" pos:end="23:18">~</operator><name pos:start="23:19" pos:end="23:27">BUSY_STAT</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:14">!=</operator> <literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>)</condition> <block pos:start="27:19" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:9">

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:56">(<expr pos:start="29:13" pos:end="29:55"><call pos:start="29:13" pos:end="29:55"><name pos:start="29:13" pos:end="29:31">ide_handle_rw_error</name><argument_list pos:start="29:32" pos:end="29:55">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">s</name></expr></argument>, <argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><operator pos:start="29:36" pos:end="29:36">-</operator><name pos:start="29:37" pos:end="29:39">ret</name></expr></argument>, <argument pos:start="29:42" pos:end="29:54"><expr pos:start="29:42" pos:end="29:54"><name pos:start="29:42" pos:end="29:54">IDE_RETRY_PIO</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:58" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:19">

            <return pos:start="31:13" pos:end="31:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:19"><expr pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:5">n</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">nsector</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:11">&gt;</operator> <name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:29">req_nb_sectors</name></name></expr>)</condition> <block pos:start="41:32" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:30">

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:9">n</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <name pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:29">req_nb_sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:14">nsector</name></name> <operator pos:start="47:16" pos:end="47:17">-=</operator> <name pos:start="47:19" pos:end="47:19">n</name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="69:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:24">(<expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:18">nsector</name></name> <operator pos:start="49:20" pos:end="49:21">==</operator> <literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr>)</condition> <block pos:start="49:26" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:29">

        <comment type="block" pos:start="51:9" pos:end="51:38">/* no more sectors to write */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><call pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:25">ide_transfer_stop</name><argument_list pos:start="53:26" pos:end="53:28">(<argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><name pos:start="53:27" pos:end="53:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="69:5">else <block pos:start="55:12" pos:end="69:5">{<block_content pos:start="57:9" pos:end="67:45">

        <decl_stmt pos:start="57:9" pos:end="57:28"><decl pos:start="57:9" pos:end="57:27"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:14">n1</name> <init pos:start="57:16" pos:end="57:27">= <expr pos:start="57:18" pos:end="57:27"><name pos:start="57:18" pos:end="57:27"><name pos:start="57:18" pos:end="57:18">s</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:27">nsector</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:35">(<expr pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:14">n1</name> <operator pos:start="59:16" pos:end="59:16">&gt;</operator> <name pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:18">s</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:34">req_nb_sectors</name></name></expr>)</condition> <block pos:start="59:37" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:35">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:14">n1</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:34"><name pos:start="61:18" pos:end="61:18">s</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:34">req_nb_sectors</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="67:45"><expr pos:start="65:9" pos:end="67:44"><call pos:start="65:9" pos:end="67:44"><name pos:start="65:9" pos:end="65:26">ide_transfer_start</name><argument_list pos:start="65:27" pos:end="67:44">(<argument pos:start="65:28" pos:end="65:28"><expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">s</name></expr></argument>, <argument pos:start="65:31" pos:end="65:42"><expr pos:start="65:31" pos:end="65:42"><name pos:start="65:31" pos:end="65:42"><name pos:start="65:31" pos:end="65:31">s</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:42">io_buffer</name></name></expr></argument>, <argument pos:start="65:45" pos:end="65:65"><expr pos:start="65:45" pos:end="65:65"><name pos:start="65:45" pos:end="65:46">n1</name> <operator pos:start="65:48" pos:end="65:48">*</operator> <name pos:start="65:50" pos:end="65:65">BDRV_SECTOR_SIZE</name></expr></argument>,

                           <argument pos:start="67:28" pos:end="67:43"><expr pos:start="67:28" pos:end="67:43"><name pos:start="67:28" pos:end="67:43">ide_sector_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:18">ide_set_sector</name><argument_list pos:start="71:19" pos:end="71:44">(<argument pos:start="71:20" pos:end="71:20"><expr pos:start="71:20" pos:end="71:20"><name pos:start="71:20" pos:end="71:20">s</name></expr></argument>, <argument pos:start="71:23" pos:end="71:43"><expr pos:start="71:23" pos:end="71:43"><call pos:start="71:23" pos:end="71:39"><name pos:start="71:23" pos:end="71:36">ide_get_sector</name><argument_list pos:start="71:37" pos:end="71:39">(<argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><name pos:start="71:38" pos:end="71:38">s</name></expr></argument>)</argument_list></call> <operator pos:start="71:41" pos:end="71:41">+</operator> <name pos:start="71:43" pos:end="71:43">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="97:5"><if pos:start="75:5" pos:end="93:5">if <condition pos:start="75:8" pos:end="75:59">(<expr pos:start="75:9" pos:end="75:58"><name pos:start="75:9" pos:end="75:26">win2k_install_hack</name> <operator pos:start="75:28" pos:end="75:29">&amp;&amp;</operator> <operator pos:start="75:31" pos:end="75:31">(</operator><operator pos:start="75:32" pos:end="75:32">(</operator><operator pos:start="75:33" pos:end="75:34">++</operator><name pos:start="75:35" pos:end="75:46"><name pos:start="75:35" pos:end="75:35">s</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:46">irq_count</name></name> <operator pos:start="75:48" pos:end="75:48">%</operator> <literal type="number" pos:start="75:50" pos:end="75:51">16</literal><operator pos:start="75:52" pos:end="75:52">)</operator> <operator pos:start="75:54" pos:end="75:55">==</operator> <literal type="number" pos:start="75:57" pos:end="75:57">0</literal><operator pos:start="75:58" pos:end="75:58">)</operator></expr>)</condition> <block pos:start="75:61" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:93">

        <comment type="block" pos:start="77:9" pos:end="87:29">/* It seems there is a bug in the Windows 2000 installer HDD

           IDE driver which fills the disk with empty logs when the

           IDE write IRQ comes too early. This hack tries to correct

           that at the expense of slower write performances. Use this

           option _only_ to install Windows 2000. You must disable it

           for normal use. */</comment>

        <expr_stmt pos:start="89:9" pos:end="91:93"><expr pos:start="89:9" pos:end="91:92"><call pos:start="89:9" pos:end="91:92"><name pos:start="89:9" pos:end="89:17">timer_mod</name><argument_list pos:start="89:18" pos:end="91:92">(<argument pos:start="89:19" pos:end="89:39"><expr pos:start="89:19" pos:end="89:39"><name pos:start="89:19" pos:end="89:39"><name pos:start="89:19" pos:end="89:19">s</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:39">sector_write_timer</name></name></expr></argument>,

                       <argument pos:start="91:24" pos:end="91:91"><expr pos:start="91:24" pos:end="91:91"><call pos:start="91:24" pos:end="91:60"><name pos:start="91:24" pos:end="91:40">qemu_clock_get_ns</name><argument_list pos:start="91:41" pos:end="91:60">(<argument pos:start="91:42" pos:end="91:59"><expr pos:start="91:42" pos:end="91:59"><name pos:start="91:42" pos:end="91:59">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="91:62" pos:end="91:62">+</operator> <operator pos:start="91:64" pos:end="91:64">(</operator><call pos:start="91:65" pos:end="91:83"><name pos:start="91:65" pos:end="91:81">get_ticks_per_sec</name><argument_list pos:start="91:82" pos:end="91:83">()</argument_list></call> <operator pos:start="91:85" pos:end="91:85">/</operator> <literal type="number" pos:start="91:87" pos:end="91:90">1000</literal><operator pos:start="91:91" pos:end="91:91">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="97:5">else <block pos:start="93:12" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:28">

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><call pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:19">ide_set_irq</name><argument_list pos:start="95:20" pos:end="95:27">(<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
