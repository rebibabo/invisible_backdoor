<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20494.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">nbd_negotiate_options</name><parameter_list pos:start="1:33" pos:end="1:51">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:42">NBDClient</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">client</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">flags</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="33:6">/* Client sends:

        [ 0 ..   3]   client flags



        [ 0 ..   7]   NBD_OPTS_MAGIC

        [ 8 ..  11]   NBD option

        [12 ..  15]   Data length

        ...           Rest of request



        [ 0 ..   7]   NBD_OPTS_MAGIC

        [ 8 ..  11]   Second NBD option

        [12 ..  15]   Data length

        ...           Rest of request

    */</comment>



    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="39:22">(<expr pos:start="37:9" pos:end="39:21"><call pos:start="37:9" pos:end="37:62"><name pos:start="37:9" pos:end="37:26">nbd_negotiate_read</name><argument_list pos:start="37:27" pos:end="37:62">(<argument pos:start="37:28" pos:end="37:38"><expr pos:start="37:28" pos:end="37:38"><name pos:start="37:28" pos:end="37:38"><name pos:start="37:28" pos:end="37:33">client</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:38">ioc</name></name></expr></argument>, <argument pos:start="37:41" pos:end="37:46"><expr pos:start="37:41" pos:end="37:46"><operator pos:start="37:41" pos:end="37:41">&amp;</operator><name pos:start="37:42" pos:end="37:46">flags</name></expr></argument>, <argument pos:start="37:49" pos:end="37:61"><expr pos:start="37:49" pos:end="37:61"><sizeof pos:start="37:49" pos:end="37:61">sizeof<argument_list pos:start="37:55" pos:end="37:61">(<argument pos:start="37:56" pos:end="37:60"><expr pos:start="37:56" pos:end="37:60"><name pos:start="37:56" pos:end="37:60">flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="37:64" pos:end="37:65">!=</operator>

        <sizeof pos:start="39:9" pos:end="39:21">sizeof<argument_list pos:start="39:15" pos:end="39:21">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">flags</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="39:24" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:20">

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><call pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:11">LOG</name><argument_list pos:start="41:12" pos:end="41:26">(<argument pos:start="41:13" pos:end="41:25"><expr pos:start="41:13" pos:end="41:25"><literal type="string" pos:start="41:13" pos:end="41:25">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><operator pos:start="43:16" pos:end="43:16">-</operator><name pos:start="43:17" pos:end="43:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><call pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:9">TRACE</name><argument_list pos:start="47:10" pos:end="47:34">(<argument pos:start="47:11" pos:end="47:33"><expr pos:start="47:11" pos:end="47:33"><literal type="string" pos:start="47:11" pos:end="47:33">"Checking client flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><call pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:16">be32_to_cpus</name><argument_list pos:start="49:17" pos:end="49:24">(<argument pos:start="49:18" pos:end="49:23"><expr pos:start="49:18" pos:end="49:23"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:23">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:57">(<expr pos:start="51:9" pos:end="51:56"><name pos:start="51:9" pos:end="51:13">flags</name> <operator pos:start="51:15" pos:end="51:16">!=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal> <operator pos:start="51:20" pos:end="51:21">&amp;&amp;</operator> <name pos:start="51:23" pos:end="51:27">flags</name> <operator pos:start="51:29" pos:end="51:30">!=</operator> <name pos:start="51:32" pos:end="51:56">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>)</condition> <block pos:start="51:59" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:20">

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><call pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:11">LOG</name><argument_list pos:start="53:12" pos:end="53:40">(<argument pos:start="53:13" pos:end="53:39"><expr pos:start="53:13" pos:end="53:39"><literal type="string" pos:start="53:13" pos:end="53:39">"Bad client flags received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:20">return <expr pos:start="55:16" pos:end="55:19"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="61:5" pos:end="159:5">while <condition pos:start="61:11" pos:end="61:13">(<expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">1</literal></expr>)</condition> <block pos:start="61:15" pos:end="159:5">{<block_content pos:start="63:9" pos:end="157:9">

        <decl_stmt pos:start="63:9" pos:end="63:16"><decl pos:start="63:9" pos:end="63:15"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:29"><decl pos:start="65:9" pos:end="65:20"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">uint32_t</name></type> <name pos:start="65:18" pos:end="65:20">tmp</name></decl>, <decl pos:start="65:23" pos:end="65:28"><type ref="prev" pos:start="65:9" pos:end="65:16"/><name pos:start="65:23" pos:end="65:28">length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:23"><decl pos:start="67:9" pos:end="67:22"><type pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:16">uint64_t</name></type> <name pos:start="67:18" pos:end="67:22">magic</name></decl>;</decl_stmt>



        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="73:26">(<expr pos:start="71:13" pos:end="73:25"><call pos:start="71:13" pos:end="71:66"><name pos:start="71:13" pos:end="71:30">nbd_negotiate_read</name><argument_list pos:start="71:31" pos:end="71:66">(<argument pos:start="71:32" pos:end="71:42"><expr pos:start="71:32" pos:end="71:42"><name pos:start="71:32" pos:end="71:42"><name pos:start="71:32" pos:end="71:37">client</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:42">ioc</name></name></expr></argument>, <argument pos:start="71:45" pos:end="71:50"><expr pos:start="71:45" pos:end="71:50"><operator pos:start="71:45" pos:end="71:45">&amp;</operator><name pos:start="71:46" pos:end="71:50">magic</name></expr></argument>, <argument pos:start="71:53" pos:end="71:65"><expr pos:start="71:53" pos:end="71:65"><sizeof pos:start="71:53" pos:end="71:65">sizeof<argument_list pos:start="71:59" pos:end="71:65">(<argument pos:start="71:60" pos:end="71:64"><expr pos:start="71:60" pos:end="71:64"><name pos:start="71:60" pos:end="71:64">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="71:68" pos:end="71:69">!=</operator>

            <sizeof pos:start="73:13" pos:end="73:25">sizeof<argument_list pos:start="73:19" pos:end="73:25">(<argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><name pos:start="73:20" pos:end="73:24">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="73:28" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:27">

            <expr_stmt pos:start="75:13" pos:end="75:31"><expr pos:start="75:13" pos:end="75:30"><call pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:15">LOG</name><argument_list pos:start="75:16" pos:end="75:30">(<argument pos:start="75:17" pos:end="75:29"><expr pos:start="75:17" pos:end="75:29"><literal type="string" pos:start="75:17" pos:end="75:29">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:27">return <expr pos:start="77:20" pos:end="77:26"><operator pos:start="77:20" pos:end="77:20">-</operator><name pos:start="77:21" pos:end="77:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><call pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:13">TRACE</name><argument_list pos:start="81:14" pos:end="81:36">(<argument pos:start="81:15" pos:end="81:35"><expr pos:start="81:15" pos:end="81:35"><literal type="string" pos:start="81:15" pos:end="81:35">"Checking opts magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:49">(<expr pos:start="83:13" pos:end="83:48"><name pos:start="83:13" pos:end="83:17">magic</name> <operator pos:start="83:19" pos:end="83:20">!=</operator> <call pos:start="83:22" pos:end="83:48"><name pos:start="83:22" pos:end="83:32">be64_to_cpu</name><argument_list pos:start="83:33" pos:end="83:48">(<argument pos:start="83:34" pos:end="83:47"><expr pos:start="83:34" pos:end="83:47"><name pos:start="83:34" pos:end="83:47">NBD_OPTS_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:51" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:27">

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><call pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:15">LOG</name><argument_list pos:start="85:16" pos:end="85:37">(<argument pos:start="85:17" pos:end="85:36"><expr pos:start="85:17" pos:end="85:36"><literal type="string" pos:start="85:17" pos:end="85:36">"Bad magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:27">return <expr pos:start="87:20" pos:end="87:26"><operator pos:start="87:20" pos:end="87:20">-</operator><name pos:start="87:21" pos:end="87:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:78">(<expr pos:start="93:13" pos:end="93:77"><call pos:start="93:13" pos:end="93:62"><name pos:start="93:13" pos:end="93:30">nbd_negotiate_read</name><argument_list pos:start="93:31" pos:end="93:62">(<argument pos:start="93:32" pos:end="93:42"><expr pos:start="93:32" pos:end="93:42"><name pos:start="93:32" pos:end="93:42"><name pos:start="93:32" pos:end="93:37">client</name><operator pos:start="93:38" pos:end="93:39">-&gt;</operator><name pos:start="93:40" pos:end="93:42">ioc</name></name></expr></argument>, <argument pos:start="93:45" pos:end="93:48"><expr pos:start="93:45" pos:end="93:48"><operator pos:start="93:45" pos:end="93:45">&amp;</operator><name pos:start="93:46" pos:end="93:48">tmp</name></expr></argument>, <argument pos:start="93:51" pos:end="93:61"><expr pos:start="93:51" pos:end="93:61"><sizeof pos:start="93:51" pos:end="93:61">sizeof<argument_list pos:start="93:57" pos:end="93:61">(<argument pos:start="93:58" pos:end="93:60"><expr pos:start="93:58" pos:end="93:60"><name pos:start="93:58" pos:end="93:60">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="93:64" pos:end="93:65">!=</operator> <sizeof pos:start="93:67" pos:end="93:77">sizeof<argument_list pos:start="93:73" pos:end="93:77">(<argument pos:start="93:74" pos:end="93:76"><expr pos:start="93:74" pos:end="93:76"><name pos:start="93:74" pos:end="93:76">tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="93:80" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:27">

            <expr_stmt pos:start="95:13" pos:end="95:31"><expr pos:start="95:13" pos:end="95:30"><call pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:15">LOG</name><argument_list pos:start="95:16" pos:end="95:30">(<argument pos:start="95:17" pos:end="95:29"><expr pos:start="95:17" pos:end="95:29"><literal type="string" pos:start="95:17" pos:end="95:29">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:27">return <expr pos:start="97:20" pos:end="97:26"><operator pos:start="97:20" pos:end="97:20">-</operator><name pos:start="97:21" pos:end="97:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="103:9" pos:end="111:9"><if pos:start="103:9" pos:end="111:9">if <condition pos:start="103:12" pos:end="105:27">(<expr pos:start="103:13" pos:end="105:26"><call pos:start="103:13" pos:end="103:68"><name pos:start="103:13" pos:end="103:30">nbd_negotiate_read</name><argument_list pos:start="103:31" pos:end="103:68">(<argument pos:start="103:32" pos:end="103:42"><expr pos:start="103:32" pos:end="103:42"><name pos:start="103:32" pos:end="103:42"><name pos:start="103:32" pos:end="103:37">client</name><operator pos:start="103:38" pos:end="103:39">-&gt;</operator><name pos:start="103:40" pos:end="103:42">ioc</name></name></expr></argument>, <argument pos:start="103:45" pos:end="103:51"><expr pos:start="103:45" pos:end="103:51"><operator pos:start="103:45" pos:end="103:45">&amp;</operator><name pos:start="103:46" pos:end="103:51">length</name></expr></argument>, <argument pos:start="103:54" pos:end="103:67"><expr pos:start="103:54" pos:end="103:67"><sizeof pos:start="103:54" pos:end="103:67">sizeof<argument_list pos:start="103:60" pos:end="103:67">(<argument pos:start="103:61" pos:end="103:66"><expr pos:start="103:61" pos:end="103:66"><name pos:start="103:61" pos:end="103:66">length</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="103:70" pos:end="103:71">!=</operator>

            <sizeof pos:start="105:13" pos:end="105:26">sizeof<argument_list pos:start="105:19" pos:end="105:26">(<argument pos:start="105:20" pos:end="105:25"><expr pos:start="105:20" pos:end="105:25"><name pos:start="105:20" pos:end="105:25">length</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="105:29" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:27">

            <expr_stmt pos:start="107:13" pos:end="107:31"><expr pos:start="107:13" pos:end="107:30"><call pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:15">LOG</name><argument_list pos:start="107:16" pos:end="107:30">(<argument pos:start="107:17" pos:end="107:29"><expr pos:start="107:17" pos:end="107:29"><literal type="string" pos:start="107:17" pos:end="107:29">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:27">return <expr pos:start="109:20" pos:end="109:26"><operator pos:start="109:20" pos:end="109:20">-</operator><name pos:start="109:21" pos:end="109:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:37"><expr pos:start="113:9" pos:end="113:36"><name pos:start="113:9" pos:end="113:14">length</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <call pos:start="113:18" pos:end="113:36"><name pos:start="113:18" pos:end="113:28">be32_to_cpu</name><argument_list pos:start="113:29" pos:end="113:36">(<argument pos:start="113:30" pos:end="113:35"><expr pos:start="113:30" pos:end="113:35"><name pos:start="113:30" pos:end="113:35">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:33"><expr pos:start="117:9" pos:end="117:32"><call pos:start="117:9" pos:end="117:32"><name pos:start="117:9" pos:end="117:13">TRACE</name><argument_list pos:start="117:14" pos:end="117:32">(<argument pos:start="117:15" pos:end="117:31"><expr pos:start="117:15" pos:end="117:31"><literal type="string" pos:start="117:15" pos:end="117:31">"Checking option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="119:9" pos:end="157:9">switch <condition pos:start="119:16" pos:end="119:33">(<expr pos:start="119:17" pos:end="119:32"><call pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:27">be32_to_cpu</name><argument_list pos:start="119:28" pos:end="119:32">(<argument pos:start="119:29" pos:end="119:31"><expr pos:start="119:29" pos:end="119:31"><name pos:start="119:29" pos:end="119:31">tmp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:35" pos:end="157:9">{<block_content pos:start="121:9" pos:end="155:27">

        <case pos:start="121:9" pos:end="121:26">case <expr pos:start="121:14" pos:end="121:25"><name pos:start="121:14" pos:end="121:25">NBD_OPT_LIST</name></expr>:</case>

            <expr_stmt pos:start="123:13" pos:end="123:60"><expr pos:start="123:13" pos:end="123:59"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:59"><name pos:start="123:19" pos:end="123:43">nbd_negotiate_handle_list</name><argument_list pos:start="123:44" pos:end="123:59">(<argument pos:start="123:45" pos:end="123:50"><expr pos:start="123:45" pos:end="123:50"><name pos:start="123:45" pos:end="123:50">client</name></expr></argument>, <argument pos:start="123:53" pos:end="123:58"><expr pos:start="123:53" pos:end="123:58"><name pos:start="123:53" pos:end="123:58">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="129:13"><if pos:start="125:13" pos:end="129:13">if <condition pos:start="125:16" pos:end="125:24">(<expr pos:start="125:17" pos:end="125:23"><name pos:start="125:17" pos:end="125:19">ret</name> <operator pos:start="125:21" pos:end="125:21">&lt;</operator> <literal type="number" pos:start="125:23" pos:end="125:23">0</literal></expr>)</condition> <block pos:start="125:26" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:27">

                <return pos:start="127:17" pos:end="127:27">return <expr pos:start="127:24" pos:end="127:26"><name pos:start="127:24" pos:end="127:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>



        <case pos:start="135:9" pos:end="135:27">case <expr pos:start="135:14" pos:end="135:26"><name pos:start="135:14" pos:end="135:26">NBD_OPT_ABORT</name></expr>:</case>

            <return pos:start="137:13" pos:end="137:27">return <expr pos:start="137:20" pos:end="137:26"><operator pos:start="137:20" pos:end="137:20">-</operator><name pos:start="137:21" pos:end="137:26">EINVAL</name></expr>;</return>



        <case pos:start="141:9" pos:end="141:33">case <expr pos:start="141:14" pos:end="141:32"><name pos:start="141:14" pos:end="141:32">NBD_OPT_EXPORT_NAME</name></expr>:</case>

            <return pos:start="143:13" pos:end="143:68">return <expr pos:start="143:20" pos:end="143:67"><call pos:start="143:20" pos:end="143:67"><name pos:start="143:20" pos:end="143:51">nbd_negotiate_handle_export_name</name><argument_list pos:start="143:52" pos:end="143:67">(<argument pos:start="143:53" pos:end="143:58"><expr pos:start="143:53" pos:end="143:58"><name pos:start="143:53" pos:end="143:58">client</name></expr></argument>, <argument pos:start="143:61" pos:end="143:66"><expr pos:start="143:61" pos:end="143:66"><name pos:start="143:61" pos:end="143:66">length</name></expr></argument>)</argument_list></call></expr>;</return>



        <default pos:start="147:9" pos:end="147:16">default:</default>

            <expr_stmt pos:start="149:13" pos:end="149:35"><expr pos:start="149:13" pos:end="149:34"><name pos:start="149:13" pos:end="149:15">tmp</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:34"><name pos:start="149:19" pos:end="149:29">be32_to_cpu</name><argument_list pos:start="149:30" pos:end="149:34">(<argument pos:start="149:31" pos:end="149:33"><expr pos:start="149:31" pos:end="149:33"><name pos:start="149:31" pos:end="149:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:48"><expr pos:start="151:13" pos:end="151:47"><call pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:15">LOG</name><argument_list pos:start="151:16" pos:end="151:47">(<argument pos:start="151:17" pos:end="151:41"><expr pos:start="151:17" pos:end="151:41"><literal type="string" pos:start="151:17" pos:end="151:41">"Unsupported option 0x%x"</literal></expr></argument>, <argument pos:start="151:44" pos:end="151:46"><expr pos:start="151:44" pos:end="151:46"><name pos:start="151:44" pos:end="151:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:72"><expr pos:start="153:13" pos:end="153:71"><call pos:start="153:13" pos:end="153:71"><name pos:start="153:13" pos:end="153:34">nbd_negotiate_send_rep</name><argument_list pos:start="153:35" pos:end="153:71">(<argument pos:start="153:36" pos:end="153:46"><expr pos:start="153:36" pos:end="153:46"><name pos:start="153:36" pos:end="153:46"><name pos:start="153:36" pos:end="153:41">client</name><operator pos:start="153:42" pos:end="153:43">-&gt;</operator><name pos:start="153:44" pos:end="153:46">ioc</name></name></expr></argument>, <argument pos:start="153:49" pos:end="153:65"><expr pos:start="153:49" pos:end="153:65"><name pos:start="153:49" pos:end="153:65">NBD_REP_ERR_UNSUP</name></expr></argument>, <argument pos:start="153:68" pos:end="153:70"><expr pos:start="153:68" pos:end="153:70"><name pos:start="153:68" pos:end="153:70">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="155:13" pos:end="155:27">return <expr pos:start="155:20" pos:end="155:26"><operator pos:start="155:20" pos:end="155:20">-</operator><name pos:start="155:21" pos:end="155:26">EINVAL</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
