<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6151.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_packet</name><parameter_list pos:start="1:25" pos:end="3:61">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><name pos:start="3:26" pos:end="3:28">int</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:43">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:60"><decl pos:start="3:46" pos:end="3:60"><type pos:start="3:46" pos:end="3:60"><name pos:start="3:46" pos:end="3:53">AVPacket</name><modifier pos:start="3:54" pos:end="3:54">*</modifier></type> <name pos:start="3:56" pos:end="3:60">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="221:1">{<block_content pos:start="7:5" pos:end="219:35">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">WMAProDecodeCtx</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:17">GetBitContext</name><modifier pos:start="9:18" pos:end="9:18">*</modifier></type> <name pos:start="9:20" pos:end="9:21">gb</name>  <init pos:start="9:24" pos:end="9:32">= <expr pos:start="9:26" pos:end="9:32"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:32"><name pos:start="9:27" pos:end="9:27">s</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">pgb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:18"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name><modifier pos:start="11:18" pos:end="11:18">*</modifier></type> <name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name>       <init pos:start="13:24" pos:end="13:36">= <expr pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:30">avpkt</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:27">num_bits_prev_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:30">packet_sequence_number</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:23"><expr pos:start="21:5" pos:end="21:22"><operator pos:start="21:5" pos:end="21:5">*</operator><name pos:start="21:6" pos:end="21:18">got_frame_ptr</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="193:5"><if pos:start="25:5" pos:end="149:5">if <condition pos:start="25:8" pos:end="25:41">(<expr pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:22">packet_done</name></name> <operator pos:start="25:24" pos:end="25:25">||</operator> <name pos:start="25:27" pos:end="25:40"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:40">packet_loss</name></name></expr>)</condition> <block pos:start="25:43" pos:end="149:5">{<block_content pos:start="27:9" pos:end="145:9">

        <expr_stmt pos:start="27:9" pos:end="27:27"><expr pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:22">packet_done</name></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="31:9" pos:end="31:49">/** sanity check for the buffer length */</comment>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:42">(<expr pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:20">buf_size</name> <operator pos:start="33:22" pos:end="33:22">&lt;</operator> <name pos:start="33:24" pos:end="33:41"><name pos:start="33:24" pos:end="33:28">avctx</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:41">block_align</name></name></expr>)</condition> <block pos:start="33:44" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:39">

            <expr_stmt pos:start="35:13" pos:end="37:49"><expr pos:start="35:13" pos:end="37:48"><call pos:start="35:13" pos:end="37:48"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="37:48">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:76"><expr pos:start="35:41" pos:end="35:76"><literal type="string" pos:start="35:41" pos:end="35:76">"Input packet too small (%d &lt; %d)\n"</literal></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:27"><expr pos:start="37:20" pos:end="37:27"><name pos:start="37:20" pos:end="37:27">buf_size</name></expr></argument>, <argument pos:start="37:30" pos:end="37:47"><expr pos:start="37:30" pos:end="37:47"><name pos:start="37:30" pos:end="37:47"><name pos:start="37:30" pos:end="37:34">avctx</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:47">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:39">return <expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:28">next_packet_start</name></name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:39">buf_size</name> <operator pos:start="45:41" pos:end="45:41">-</operator> <name pos:start="45:43" pos:end="45:60"><name pos:start="45:43" pos:end="45:47">avctx</name><operator pos:start="45:48" pos:end="45:49">-&gt;</operator><name pos:start="45:50" pos:end="45:60">block_align</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:38"><expr pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:16">buf_size</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:37"><name pos:start="47:20" pos:end="47:24">avctx</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:37">block_align</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:23">buf_bit_size</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:34">buf_size</name> <operator pos:start="49:36" pos:end="49:37">&lt;&lt;</operator> <literal type="number" pos:start="49:39" pos:end="49:39">3</literal></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="53:9" pos:end="53:34">/** parse packet header */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:48"><expr pos:start="55:9" pos:end="55:47"><call pos:start="55:9" pos:end="55:47"><name pos:start="55:9" pos:end="55:21">init_get_bits</name><argument_list pos:start="55:22" pos:end="55:47">(<argument pos:start="55:23" pos:end="55:24"><expr pos:start="55:23" pos:end="55:24"><name pos:start="55:23" pos:end="55:24">gb</name></expr></argument>, <argument pos:start="55:27" pos:end="55:29"><expr pos:start="55:27" pos:end="55:29"><name pos:start="55:27" pos:end="55:29">buf</name></expr></argument>, <argument pos:start="55:32" pos:end="55:46"><expr pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:46">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:30">packet_sequence_number</name> <operator pos:start="57:32" pos:end="57:32">=</operator> <call pos:start="57:34" pos:end="57:48"><name pos:start="57:34" pos:end="57:41">get_bits</name><argument_list pos:start="57:42" pos:end="57:48">(<argument pos:start="57:43" pos:end="57:44"><expr pos:start="57:43" pos:end="57:44"><name pos:start="57:43" pos:end="57:44">gb</name></expr></argument>, <argument pos:start="57:47" pos:end="57:47"><expr pos:start="57:47" pos:end="57:47"><literal type="number" pos:start="57:47" pos:end="57:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><call pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:17">skip_bits</name><argument_list pos:start="59:18" pos:end="59:24">(<argument pos:start="59:19" pos:end="59:20"><expr pos:start="59:19" pos:end="59:20"><name pos:start="59:19" pos:end="59:20">gb</name></expr></argument>, <argument pos:start="59:23" pos:end="59:23"><expr pos:start="59:23" pos:end="59:23"><literal type="number" pos:start="59:23" pos:end="59:23">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="63:9" pos:end="63:77">/** get number of bits that need to be added to the previous frame */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:63"><expr pos:start="65:9" pos:end="65:62"><name pos:start="65:9" pos:end="65:27">num_bits_prev_frame</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <call pos:start="65:31" pos:end="65:62"><name pos:start="65:31" pos:end="65:38">get_bits</name><argument_list pos:start="65:39" pos:end="65:62">(<argument pos:start="65:40" pos:end="65:41"><expr pos:start="65:40" pos:end="65:41"><name pos:start="65:40" pos:end="65:41">gb</name></expr></argument>, <argument pos:start="65:44" pos:end="65:61"><expr pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:61"><name pos:start="65:44" pos:end="65:44">s</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:61">log2_frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:37"><expr pos:start="67:9" pos:end="69:36"><call pos:start="67:9" pos:end="69:36"><name pos:start="67:9" pos:end="67:15">av_dlog</name><argument_list pos:start="67:16" pos:end="69:36">(<argument pos:start="67:17" pos:end="67:21"><expr pos:start="67:17" pos:end="67:21"><name pos:start="67:17" pos:end="67:21">avctx</name></expr></argument>, <argument pos:start="67:24" pos:end="67:46"><expr pos:start="67:24" pos:end="67:46"><literal type="string" pos:start="67:24" pos:end="67:46">"packet[%d]: nbpf %x\n"</literal></expr></argument>, <argument pos:start="67:49" pos:end="67:67"><expr pos:start="67:49" pos:end="67:67"><name pos:start="67:49" pos:end="67:67"><name pos:start="67:49" pos:end="67:53">avctx</name><operator pos:start="67:54" pos:end="67:55">-&gt;</operator><name pos:start="67:56" pos:end="67:67">frame_number</name></name></expr></argument>,

                <argument pos:start="69:17" pos:end="69:35"><expr pos:start="69:17" pos:end="69:35"><name pos:start="69:17" pos:end="69:35">num_bits_prev_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" format="doxygen" pos:start="73:9" pos:end="73:36">/** check for packet loss */</comment>

        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="77:78">(<expr pos:start="75:13" pos:end="77:77"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:27"><name pos:start="75:14" pos:end="75:14">s</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:27">packet_loss</name></name> <operator pos:start="75:29" pos:end="75:30">&amp;&amp;</operator>

            <operator pos:start="77:13" pos:end="77:13">(</operator><operator pos:start="77:14" pos:end="77:14">(</operator><name pos:start="77:15" pos:end="77:39"><name pos:start="77:15" pos:end="77:15">s</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:39">packet_sequence_number</name></name> <operator pos:start="77:41" pos:end="77:41">+</operator> <literal type="number" pos:start="77:43" pos:end="77:43">1</literal><operator pos:start="77:44" pos:end="77:44">)</operator> <operator pos:start="77:46" pos:end="77:46">&amp;</operator> <literal type="number" pos:start="77:48" pos:end="77:50">0xF</literal><operator pos:start="77:51" pos:end="77:51">)</operator> <operator pos:start="77:53" pos:end="77:54">!=</operator> <name pos:start="77:56" pos:end="77:77">packet_sequence_number</name></expr>)</condition> <block pos:start="77:80" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:70">

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:26">packet_loss</name></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="83:70"><expr pos:start="81:13" pos:end="83:69"><call pos:start="81:13" pos:end="83:69"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="83:69">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">avctx</name></expr></argument>, <argument pos:start="81:27" pos:end="81:38"><expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:41" pos:end="81:78"><expr pos:start="81:41" pos:end="81:78"><literal type="string" pos:start="81:41" pos:end="81:78">"Packet loss detected! seq %x vs %x\n"</literal></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:44"><expr pos:start="83:20" pos:end="83:44"><name pos:start="83:20" pos:end="83:44"><name pos:start="83:20" pos:end="83:20">s</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:44">packet_sequence_number</name></name></expr></argument>, <argument pos:start="83:47" pos:end="83:68"><expr pos:start="83:47" pos:end="83:68"><name pos:start="83:47" pos:end="83:68">packet_sequence_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:59"><expr pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:33">packet_sequence_number</name></name> <operator pos:start="87:35" pos:end="87:35">=</operator> <name pos:start="87:37" pos:end="87:58">packet_sequence_number</name></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="129:9"><if pos:start="91:9" pos:end="123:9">if <condition pos:start="91:12" pos:end="91:36">(<expr pos:start="91:13" pos:end="91:35"><name pos:start="91:13" pos:end="91:31">num_bits_prev_frame</name> <operator pos:start="91:33" pos:end="91:33">&gt;</operator> <literal type="number" pos:start="91:35" pos:end="91:35">0</literal></expr>)</condition> <block pos:start="91:38" pos:end="123:9">{<block_content pos:start="93:13" pos:end="121:53">

            <decl_stmt pos:start="93:13" pos:end="93:77"><decl pos:start="93:13" pos:end="93:76"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:37">remaining_packet_bits</name> <init pos:start="93:39" pos:end="93:76">= <expr pos:start="93:41" pos:end="93:76"><name pos:start="93:41" pos:end="93:55"><name pos:start="93:41" pos:end="93:41">s</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:55">buf_bit_size</name></name> <operator pos:start="93:57" pos:end="93:57">-</operator> <call pos:start="93:59" pos:end="93:76"><name pos:start="93:59" pos:end="93:72">get_bits_count</name><argument_list pos:start="93:73" pos:end="93:76">(<argument pos:start="93:74" pos:end="93:75"><expr pos:start="93:74" pos:end="93:75"><name pos:start="93:74" pos:end="93:75">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="95:13" pos:end="101:13"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="95:61">(<expr pos:start="95:17" pos:end="95:60"><name pos:start="95:17" pos:end="95:35">num_bits_prev_frame</name> <operator pos:start="95:37" pos:end="95:38">&gt;=</operator> <name pos:start="95:40" pos:end="95:60">remaining_packet_bits</name></expr>)</condition> <block pos:start="95:63" pos:end="101:13">{<block_content pos:start="97:17" pos:end="99:35">

                <expr_stmt pos:start="97:17" pos:end="97:60"><expr pos:start="97:17" pos:end="97:59"><name pos:start="97:17" pos:end="97:35">num_bits_prev_frame</name> <operator pos:start="97:37" pos:end="97:37">=</operator> <name pos:start="97:39" pos:end="97:59">remaining_packet_bits</name></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:35"><expr pos:start="99:17" pos:end="99:34"><name pos:start="99:17" pos:end="99:30"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:30">packet_done</name></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <literal type="number" pos:start="99:34" pos:end="99:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" format="doxygen" pos:start="105:13" pos:end="107:57">/** append the previous frame data to the remaining data from the

                previous packet to create a full frame */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:53"><expr pos:start="109:13" pos:end="109:52"><call pos:start="109:13" pos:end="109:52"><name pos:start="109:13" pos:end="109:21">save_bits</name><argument_list pos:start="109:22" pos:end="109:52">(<argument pos:start="109:23" pos:end="109:23"><expr pos:start="109:23" pos:end="109:23"><name pos:start="109:23" pos:end="109:23">s</name></expr></argument>, <argument pos:start="109:26" pos:end="109:27"><expr pos:start="109:26" pos:end="109:27"><name pos:start="109:26" pos:end="109:27">gb</name></expr></argument>, <argument pos:start="109:30" pos:end="109:48"><expr pos:start="109:30" pos:end="109:48"><name pos:start="109:30" pos:end="109:48">num_bits_prev_frame</name></expr></argument>, <argument pos:start="109:51" pos:end="109:51"><expr pos:start="109:51" pos:end="109:51"><literal type="number" pos:start="109:51" pos:end="109:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="113:57"><expr pos:start="111:13" pos:end="113:56"><call pos:start="111:13" pos:end="113:56"><name pos:start="111:13" pos:end="111:19">av_dlog</name><argument_list pos:start="111:20" pos:end="113:56">(<argument pos:start="111:21" pos:end="111:25"><expr pos:start="111:21" pos:end="111:25"><name pos:start="111:21" pos:end="111:25">avctx</name></expr></argument>, <argument pos:start="111:28" pos:end="111:64"><expr pos:start="111:28" pos:end="111:64"><literal type="string" pos:start="111:28" pos:end="111:64">"accumulated %x bits of frame data\n"</literal></expr></argument>,

                    <argument pos:start="113:21" pos:end="113:55"><expr pos:start="113:21" pos:end="113:55"><name pos:start="113:21" pos:end="113:37"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:37">num_saved_bits</name></name> <operator pos:start="113:39" pos:end="113:39">-</operator> <name pos:start="113:41" pos:end="113:55"><name pos:start="113:41" pos:end="113:41">s</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" format="doxygen" pos:start="117:13" pos:end="117:63">/** decode the cross packet frame if it is valid */</comment>

            <if_stmt pos:start="119:13" pos:end="121:53"><if pos:start="119:13" pos:end="121:53">if <condition pos:start="119:16" pos:end="119:32">(<expr pos:start="119:17" pos:end="119:31"><operator pos:start="119:17" pos:end="119:17">!</operator><name pos:start="119:18" pos:end="119:31"><name pos:start="119:18" pos:end="119:18">s</name><operator pos:start="119:19" pos:end="119:20">-&gt;</operator><name pos:start="119:21" pos:end="119:31">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:53"><block_content pos:start="121:17" pos:end="121:53">

                <expr_stmt pos:start="121:17" pos:end="121:53"><expr pos:start="121:17" pos:end="121:52"><call pos:start="121:17" pos:end="121:52"><name pos:start="121:17" pos:end="121:28">decode_frame</name><argument_list pos:start="121:29" pos:end="121:52">(<argument pos:start="121:30" pos:end="121:30"><expr pos:start="121:30" pos:end="121:30"><name pos:start="121:30" pos:end="121:30">s</name></expr></argument>, <argument pos:start="121:33" pos:end="121:36"><expr pos:start="121:33" pos:end="121:36"><name pos:start="121:33" pos:end="121:36">data</name></expr></argument>, <argument pos:start="121:39" pos:end="121:51"><expr pos:start="121:39" pos:end="121:51"><name pos:start="121:39" pos:end="121:51">got_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="123:11" pos:end="129:9">else if <condition pos:start="123:19" pos:end="123:55">(<expr pos:start="123:20" pos:end="123:54"><name pos:start="123:20" pos:end="123:36"><name pos:start="123:20" pos:end="123:20">s</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:36">num_saved_bits</name></name> <operator pos:start="123:38" pos:end="123:38">-</operator> <name pos:start="123:40" pos:end="123:54"><name pos:start="123:40" pos:end="123:40">s</name><operator pos:start="123:41" pos:end="123:42">-&gt;</operator><name pos:start="123:43" pos:end="123:54">frame_offset</name></name></expr>)</condition> <block pos:start="123:57" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:57">

            <expr_stmt pos:start="125:13" pos:end="127:57"><expr pos:start="125:13" pos:end="127:56"><call pos:start="125:13" pos:end="127:56"><name pos:start="125:13" pos:end="125:19">av_dlog</name><argument_list pos:start="125:20" pos:end="127:56">(<argument pos:start="125:21" pos:end="125:25"><expr pos:start="125:21" pos:end="125:25"><name pos:start="125:21" pos:end="125:25">avctx</name></expr></argument>, <argument pos:start="125:28" pos:end="125:64"><expr pos:start="125:28" pos:end="125:64"><literal type="string" pos:start="125:28" pos:end="125:64">"ignoring %x previously saved bits\n"</literal></expr></argument>,

                    <argument pos:start="127:21" pos:end="127:55"><expr pos:start="127:21" pos:end="127:55"><name pos:start="127:21" pos:end="127:37"><name pos:start="127:21" pos:end="127:21">s</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:37">num_saved_bits</name></name> <operator pos:start="127:39" pos:end="127:39">-</operator> <name pos:start="127:41" pos:end="127:55"><name pos:start="127:41" pos:end="127:41">s</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:55">frame_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="133:9" pos:end="145:9"><if pos:start="133:9" pos:end="145:9">if <condition pos:start="133:12" pos:end="133:27">(<expr pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:26">packet_loss</name></name></expr>)</condition> <block pos:start="133:29" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:31">

            <comment type="block" format="doxygen" pos:start="135:13" pos:end="139:42">/** reset number of saved bits so that the decoder

                does not start to decode incomplete frames in the

                s-&gt;len_prefix == 0 case */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:34"><expr pos:start="141:13" pos:end="141:33"><name pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:13">s</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:29">num_saved_bits</name></name> <operator pos:start="141:31" pos:end="141:31">=</operator> <literal type="number" pos:start="141:33" pos:end="141:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:31"><expr pos:start="143:13" pos:end="143:30"><name pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:26">packet_loss</name></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <literal type="number" pos:start="143:30" pos:end="143:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <else pos:start="149:7" pos:end="193:5">else <block pos:start="149:12" pos:end="193:5">{<block_content pos:start="151:9" pos:end="191:31">

        <decl_stmt pos:start="151:9" pos:end="151:23"><decl pos:start="151:9" pos:end="151:22"><type pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">int</name></type> <name pos:start="151:13" pos:end="151:22">frame_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:68"><expr pos:start="153:9" pos:end="153:67"><name pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:23">buf_bit_size</name></name> <operator pos:start="153:25" pos:end="153:25">=</operator> <operator pos:start="153:27" pos:end="153:27">(</operator><name pos:start="153:28" pos:end="153:38"><name pos:start="153:28" pos:end="153:32">avpkt</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:38">size</name></name> <operator pos:start="153:40" pos:end="153:40">-</operator> <name pos:start="153:42" pos:end="153:61"><name pos:start="153:42" pos:end="153:42">s</name><operator pos:start="153:43" pos:end="153:44">-&gt;</operator><name pos:start="153:45" pos:end="153:61">next_packet_start</name></name><operator pos:start="153:62" pos:end="153:62">)</operator> <operator pos:start="153:64" pos:end="153:65">&lt;&lt;</operator> <literal type="number" pos:start="153:67" pos:end="153:67">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:56"><expr pos:start="155:9" pos:end="155:55"><call pos:start="155:9" pos:end="155:55"><name pos:start="155:9" pos:end="155:21">init_get_bits</name><argument_list pos:start="155:22" pos:end="155:55">(<argument pos:start="155:23" pos:end="155:24"><expr pos:start="155:23" pos:end="155:24"><name pos:start="155:23" pos:end="155:24">gb</name></expr></argument>, <argument pos:start="155:27" pos:end="155:37"><expr pos:start="155:27" pos:end="155:37"><name pos:start="155:27" pos:end="155:37"><name pos:start="155:27" pos:end="155:31">avpkt</name><operator pos:start="155:32" pos:end="155:33">-&gt;</operator><name pos:start="155:34" pos:end="155:37">data</name></name></expr></argument>, <argument pos:start="155:40" pos:end="155:54"><expr pos:start="155:40" pos:end="155:54"><name pos:start="155:40" pos:end="155:54"><name pos:start="155:40" pos:end="155:40">s</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:54">buf_bit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:40"><expr pos:start="157:9" pos:end="157:39"><call pos:start="157:9" pos:end="157:39"><name pos:start="157:9" pos:end="157:17">skip_bits</name><argument_list pos:start="157:18" pos:end="157:39">(<argument pos:start="157:19" pos:end="157:20"><expr pos:start="157:19" pos:end="157:20"><name pos:start="157:19" pos:end="157:20">gb</name></expr></argument>, <argument pos:start="157:23" pos:end="157:38"><expr pos:start="157:23" pos:end="157:38"><name pos:start="157:23" pos:end="157:38"><name pos:start="157:23" pos:end="157:23">s</name><operator pos:start="157:24" pos:end="157:25">-&gt;</operator><name pos:start="157:26" pos:end="157:38">packet_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="191:31"><if pos:start="159:9" pos:end="169:9">if <condition pos:start="159:12" pos:end="163:48">(<expr pos:start="159:13" pos:end="163:47"><name pos:start="159:13" pos:end="159:25"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:25">len_prefix</name></name> <operator pos:start="159:27" pos:end="159:28">&amp;&amp;</operator> <call pos:start="159:30" pos:end="159:50"><name pos:start="159:30" pos:end="159:43">remaining_bits</name><argument_list pos:start="159:44" pos:end="159:50">(<argument pos:start="159:45" pos:end="159:45"><expr pos:start="159:45" pos:end="159:45"><name pos:start="159:45" pos:end="159:45">s</name></expr></argument>, <argument pos:start="159:48" pos:end="159:49"><expr pos:start="159:48" pos:end="159:49"><name pos:start="159:48" pos:end="159:49">gb</name></expr></argument>)</argument_list></call> <operator pos:start="159:52" pos:end="159:52">&gt;</operator> <name pos:start="159:54" pos:end="159:71"><name pos:start="159:54" pos:end="159:54">s</name><operator pos:start="159:55" pos:end="159:56">-&gt;</operator><name pos:start="159:57" pos:end="159:71">log2_frame_size</name></name> <operator pos:start="159:73" pos:end="159:74">&amp;&amp;</operator>

            <operator pos:start="161:13" pos:end="161:13">(</operator><name pos:start="161:14" pos:end="161:23">frame_size</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <call pos:start="161:27" pos:end="161:59"><name pos:start="161:27" pos:end="161:35">show_bits</name><argument_list pos:start="161:36" pos:end="161:59">(<argument pos:start="161:37" pos:end="161:38"><expr pos:start="161:37" pos:end="161:38"><name pos:start="161:37" pos:end="161:38">gb</name></expr></argument>, <argument pos:start="161:41" pos:end="161:58"><expr pos:start="161:41" pos:end="161:58"><name pos:start="161:41" pos:end="161:58"><name pos:start="161:41" pos:end="161:41">s</name><operator pos:start="161:42" pos:end="161:43">-&gt;</operator><name pos:start="161:44" pos:end="161:58">log2_frame_size</name></name></expr></argument>)</argument_list></call><operator pos:start="161:60" pos:end="161:60">)</operator> <operator pos:start="161:62" pos:end="161:63">&amp;&amp;</operator>

            <name pos:start="163:13" pos:end="163:22">frame_size</name> <operator pos:start="163:24" pos:end="163:25">&lt;=</operator> <call pos:start="163:27" pos:end="163:47"><name pos:start="163:27" pos:end="163:40">remaining_bits</name><argument_list pos:start="163:41" pos:end="163:47">(<argument pos:start="163:42" pos:end="163:42"><expr pos:start="163:42" pos:end="163:42"><name pos:start="163:42" pos:end="163:42">s</name></expr></argument>, <argument pos:start="163:45" pos:end="163:46"><expr pos:start="163:45" pos:end="163:46"><name pos:start="163:45" pos:end="163:46">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:50" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:67">

            <expr_stmt pos:start="165:13" pos:end="165:44"><expr pos:start="165:13" pos:end="165:43"><call pos:start="165:13" pos:end="165:43"><name pos:start="165:13" pos:end="165:21">save_bits</name><argument_list pos:start="165:22" pos:end="165:43">(<argument pos:start="165:23" pos:end="165:23"><expr pos:start="165:23" pos:end="165:23"><name pos:start="165:23" pos:end="165:23">s</name></expr></argument>, <argument pos:start="165:26" pos:end="165:27"><expr pos:start="165:26" pos:end="165:27"><name pos:start="165:26" pos:end="165:27">gb</name></expr></argument>, <argument pos:start="165:30" pos:end="165:39"><expr pos:start="165:30" pos:end="165:39"><name pos:start="165:30" pos:end="165:39">frame_size</name></expr></argument>, <argument pos:start="165:42" pos:end="165:42"><expr pos:start="165:42" pos:end="165:42"><literal type="number" pos:start="165:42" pos:end="165:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:67"><expr pos:start="167:13" pos:end="167:66"><name pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:26">packet_done</name></name> <operator pos:start="167:28" pos:end="167:28">=</operator> <operator pos:start="167:30" pos:end="167:30">!</operator><call pos:start="167:31" pos:end="167:66"><name pos:start="167:31" pos:end="167:42">decode_frame</name><argument_list pos:start="167:43" pos:end="167:66">(<argument pos:start="167:44" pos:end="167:44"><expr pos:start="167:44" pos:end="167:44"><name pos:start="167:44" pos:end="167:44">s</name></expr></argument>, <argument pos:start="167:47" pos:end="167:50"><expr pos:start="167:47" pos:end="167:50"><name pos:start="167:47" pos:end="167:50">data</name></expr></argument>, <argument pos:start="167:53" pos:end="167:65"><expr pos:start="167:53" pos:end="167:65"><name pos:start="167:53" pos:end="167:65">got_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="169:11" pos:end="189:9">else if <condition pos:start="169:19" pos:end="171:65">(<expr pos:start="169:20" pos:end="171:64"><operator pos:start="169:20" pos:end="169:20">!</operator><name pos:start="169:21" pos:end="169:33"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:33">len_prefix</name></name>

                   <operator pos:start="171:20" pos:end="171:21">&amp;&amp;</operator> <name pos:start="171:23" pos:end="171:39"><name pos:start="171:23" pos:end="171:23">s</name><operator pos:start="171:24" pos:end="171:25">-&gt;</operator><name pos:start="171:26" pos:end="171:39">num_saved_bits</name></name> <operator pos:start="171:41" pos:end="171:41">&gt;</operator> <call pos:start="171:43" pos:end="171:64"><name pos:start="171:43" pos:end="171:56">get_bits_count</name><argument_list pos:start="171:57" pos:end="171:64">(<argument pos:start="171:58" pos:end="171:63"><expr pos:start="171:58" pos:end="171:63"><operator pos:start="171:58" pos:end="171:58">&amp;</operator><name pos:start="171:59" pos:end="171:63"><name pos:start="171:59" pos:end="171:59">s</name><operator pos:start="171:60" pos:end="171:61">-&gt;</operator><name pos:start="171:62" pos:end="171:63">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:67" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:67">

            <comment type="block" format="doxygen" pos:start="173:13" pos:end="185:65">/** when the frames do not have a length prefix, we don't know

                the compressed length of the individual frames

                however, we know what part of a new packet belongs to the

                previous frame

                therefore we save the incoming packet first, then we append

                the "previous frame" data from the next packet so that

                we get a buffer that only contains full frames */</comment>

            <expr_stmt pos:start="187:13" pos:end="187:67"><expr pos:start="187:13" pos:end="187:66"><name pos:start="187:13" pos:end="187:26"><name pos:start="187:13" pos:end="187:13">s</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:26">packet_done</name></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <operator pos:start="187:30" pos:end="187:30">!</operator><call pos:start="187:31" pos:end="187:66"><name pos:start="187:31" pos:end="187:42">decode_frame</name><argument_list pos:start="187:43" pos:end="187:66">(<argument pos:start="187:44" pos:end="187:44"><expr pos:start="187:44" pos:end="187:44"><name pos:start="187:44" pos:end="187:44">s</name></expr></argument>, <argument pos:start="187:47" pos:end="187:50"><expr pos:start="187:47" pos:end="187:50"><name pos:start="187:47" pos:end="187:50">data</name></expr></argument>, <argument pos:start="187:53" pos:end="187:65"><expr pos:start="187:53" pos:end="187:65"><name pos:start="187:53" pos:end="187:65">got_frame_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="191:31">else<block type="pseudo" pos:start="191:13" pos:end="191:31"><block_content pos:start="191:13" pos:end="191:31">

            <expr_stmt pos:start="191:13" pos:end="191:31"><expr pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:26">packet_done</name></name> <operator pos:start="191:28" pos:end="191:28">=</operator> <literal type="number" pos:start="191:30" pos:end="191:30">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="197:5" pos:end="207:5"><if pos:start="197:5" pos:end="207:5">if <condition pos:start="197:8" pos:end="199:34">(<expr pos:start="197:9" pos:end="199:33"><name pos:start="197:9" pos:end="197:22"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:22">packet_done</name></name> <operator pos:start="197:24" pos:end="197:25">&amp;&amp;</operator> <operator pos:start="197:27" pos:end="197:27">!</operator><name pos:start="197:28" pos:end="197:41"><name pos:start="197:28" pos:end="197:28">s</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:41">packet_loss</name></name> <operator pos:start="197:43" pos:end="197:44">&amp;&amp;</operator>

        <call pos:start="199:9" pos:end="199:29"><name pos:start="199:9" pos:end="199:22">remaining_bits</name><argument_list pos:start="199:23" pos:end="199:29">(<argument pos:start="199:24" pos:end="199:24"><expr pos:start="199:24" pos:end="199:24"><name pos:start="199:24" pos:end="199:24">s</name></expr></argument>, <argument pos:start="199:27" pos:end="199:28"><expr pos:start="199:27" pos:end="199:28"><name pos:start="199:27" pos:end="199:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="199:31" pos:end="199:31">&gt;</operator> <literal type="number" pos:start="199:33" pos:end="199:33">0</literal></expr>)</condition> <block pos:start="199:36" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:51">

        <comment type="block" format="doxygen" pos:start="201:9" pos:end="203:35">/** save the rest of the data so that it can be decoded

            with the next packet */</comment>

        <expr_stmt pos:start="205:9" pos:end="205:51"><expr pos:start="205:9" pos:end="205:50"><call pos:start="205:9" pos:end="205:50"><name pos:start="205:9" pos:end="205:17">save_bits</name><argument_list pos:start="205:18" pos:end="205:50">(<argument pos:start="205:19" pos:end="205:19"><expr pos:start="205:19" pos:end="205:19"><name pos:start="205:19" pos:end="205:19">s</name></expr></argument>, <argument pos:start="205:22" pos:end="205:23"><expr pos:start="205:22" pos:end="205:23"><name pos:start="205:22" pos:end="205:23">gb</name></expr></argument>, <argument pos:start="205:26" pos:end="205:46"><expr pos:start="205:26" pos:end="205:46"><call pos:start="205:26" pos:end="205:46"><name pos:start="205:26" pos:end="205:39">remaining_bits</name><argument_list pos:start="205:40" pos:end="205:46">(<argument pos:start="205:41" pos:end="205:41"><expr pos:start="205:41" pos:end="205:41"><name pos:start="205:41" pos:end="205:41">s</name></expr></argument>, <argument pos:start="205:44" pos:end="205:45"><expr pos:start="205:44" pos:end="205:45"><name pos:start="205:44" pos:end="205:45">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:49" pos:end="205:49"><expr pos:start="205:49" pos:end="205:49"><literal type="number" pos:start="205:49" pos:end="205:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:46"><expr pos:start="211:5" pos:end="211:45"><name pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:20">packet_offset</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <call pos:start="211:24" pos:end="211:41"><name pos:start="211:24" pos:end="211:37">get_bits_count</name><argument_list pos:start="211:38" pos:end="211:41">(<argument pos:start="211:39" pos:end="211:40"><expr pos:start="211:39" pos:end="211:40"><name pos:start="211:39" pos:end="211:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="211:43" pos:end="211:43">&amp;</operator> <literal type="number" pos:start="211:45" pos:end="211:45">7</literal></expr>;</expr_stmt>

    <if_stmt pos:start="213:5" pos:end="215:35"><if pos:start="213:5" pos:end="215:35">if <condition pos:start="213:8" pos:end="213:23">(<expr pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:9">s</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:22">packet_loss</name></name></expr>)</condition><block type="pseudo" pos:start="215:9" pos:end="215:35"><block_content pos:start="215:9" pos:end="215:35">

        <return pos:start="215:9" pos:end="215:35">return <expr pos:start="215:16" pos:end="215:34"><name pos:start="215:16" pos:end="215:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="219:5" pos:end="219:35">return <expr pos:start="219:12" pos:end="219:34"><call pos:start="219:12" pos:end="219:29"><name pos:start="219:12" pos:end="219:25">get_bits_count</name><argument_list pos:start="219:26" pos:end="219:29">(<argument pos:start="219:27" pos:end="219:28"><expr pos:start="219:27" pos:end="219:28"><name pos:start="219:27" pos:end="219:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="219:31" pos:end="219:32">&gt;&gt;</operator> <literal type="number" pos:start="219:34" pos:end="219:34">3</literal></expr>;</return>

</block_content>}</block></function>
</unit>
