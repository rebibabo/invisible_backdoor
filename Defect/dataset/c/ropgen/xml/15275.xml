<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15275.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">iff_read_packet</name><parameter_list pos:start="1:27" pos:end="3:41">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">AVPacket</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:40">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:15">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">IffDemuxContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">iff</name> <init pos:start="7:26" pos:end="7:39">= <expr pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:39"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">AVIOContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">pb</name> <init pos:start="9:21" pos:end="9:27">= <expr pos:start="9:23" pos:end="9:27"><name pos:start="9:23" pos:end="9:27"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name> <init pos:start="11:18" pos:end="11:32">= <expr pos:start="11:20" pos:end="11:32"><name pos:start="11:20" pos:end="11:32"><name pos:start="11:20" pos:end="11:20">s</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:29">streams</name><index pos:start="11:30" pos:end="11:32">[<expr pos:start="11:31" pos:end="11:31"><literal type="number" pos:start="11:31" pos:end="11:31">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:15">pos</name> <init pos:start="15:17" pos:end="15:31">= <expr pos:start="15:19" pos:end="15:31"><call pos:start="15:19" pos:end="15:31"><name pos:start="15:19" pos:end="15:27">avio_tell</name><argument_list pos:start="15:28" pos:end="15:31">(<argument pos:start="15:29" pos:end="15:30"><expr pos:start="15:29" pos:end="15:30"><name pos:start="15:29" pos:end="15:30">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:27"><if pos:start="19:5" pos:end="21:27">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:11">pos</name> <operator pos:start="19:13" pos:end="19:14">&gt;=</operator> <name pos:start="19:16" pos:end="19:28"><name pos:start="19:16" pos:end="19:18">iff</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:28">body_end</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:27"><block_content pos:start="21:9" pos:end="21:27">

        <return pos:start="21:9" pos:end="21:27">return <expr pos:start="21:16" pos:end="21:26"><name pos:start="21:16" pos:end="21:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="63:5"><if pos:start="25:5" pos:end="37:5">if <condition pos:start="25:8" pos:end="25:52">(<expr pos:start="25:9" pos:end="25:51"><name pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:10">st</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:17">codec</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:29">codec_type</name></name> <operator pos:start="25:31" pos:end="25:32">==</operator> <name pos:start="25:34" pos:end="25:51">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="25:54" pos:end="37:5">{<block_content pos:start="27:9" pos:end="35:9">

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:44">(<expr pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:14">st</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:21">codec</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:32">codec_tag</name></name> <operator pos:start="27:34" pos:end="27:35">==</operator> <name pos:start="27:37" pos:end="27:43">ID_MAUD</name></expr>)</condition> <block pos:start="27:46" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:100">

            <expr_stmt pos:start="29:13" pos:end="29:100"><expr pos:start="29:13" pos:end="29:99"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:99"><name pos:start="29:19" pos:end="29:31">av_get_packet</name><argument_list pos:start="29:32" pos:end="29:99">(<argument pos:start="29:33" pos:end="29:34"><expr pos:start="29:33" pos:end="29:34"><name pos:start="29:33" pos:end="29:34">pb</name></expr></argument>, <argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:39">pkt</name></expr></argument>, <argument pos:start="29:42" pos:end="29:98"><expr pos:start="29:42" pos:end="29:98"><call pos:start="29:42" pos:end="29:98"><name pos:start="29:42" pos:end="29:46">FFMIN</name><argument_list pos:start="29:47" pos:end="29:98">(<argument pos:start="29:48" pos:end="29:66"><expr pos:start="29:48" pos:end="29:66"><name pos:start="29:48" pos:end="29:60"><name pos:start="29:48" pos:end="29:50">iff</name><operator pos:start="29:51" pos:end="29:52">-&gt;</operator><name pos:start="29:53" pos:end="29:60">body_end</name></name> <operator pos:start="29:62" pos:end="29:62">-</operator> <name pos:start="29:64" pos:end="29:66">pos</name></expr></argument>, <argument pos:start="29:69" pos:end="29:97"><expr pos:start="29:69" pos:end="29:97"><literal type="number" pos:start="29:69" pos:end="29:72">1024</literal> <operator pos:start="29:74" pos:end="29:74">*</operator> <name pos:start="29:76" pos:end="29:97"><name pos:start="29:76" pos:end="29:77">st</name><operator pos:start="29:78" pos:end="29:79">-&gt;</operator><name pos:start="29:80" pos:end="29:84">codec</name><operator pos:start="29:85" pos:end="29:86">-&gt;</operator><name pos:start="29:87" pos:end="29:97">block_align</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="35:9">else <block pos:start="31:16" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:57">

            <expr_stmt pos:start="33:13" pos:end="33:57"><expr pos:start="33:13" pos:end="33:56"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:56"><name pos:start="33:19" pos:end="33:31">av_get_packet</name><argument_list pos:start="33:32" pos:end="33:56">(<argument pos:start="33:33" pos:end="33:34"><expr pos:start="33:33" pos:end="33:34"><name pos:start="33:33" pos:end="33:34">pb</name></expr></argument>, <argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">pkt</name></expr></argument>, <argument pos:start="33:42" pos:end="33:55"><expr pos:start="33:42" pos:end="33:55"><name pos:start="33:42" pos:end="33:55"><name pos:start="33:42" pos:end="33:44">iff</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:55">body_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="37:7" pos:end="59:5">else if <condition pos:start="37:15" pos:end="37:59">(<expr pos:start="37:16" pos:end="37:58"><name pos:start="37:16" pos:end="37:36"><name pos:start="37:16" pos:end="37:17">st</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:24">codec</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:36">codec_type</name></name> <operator pos:start="37:38" pos:end="37:39">==</operator> <name pos:start="37:41" pos:end="37:58">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="37:61" pos:end="59:5">{<block_content pos:start="39:9" pos:end="55:49">

        <decl_stmt pos:start="39:9" pos:end="39:21"><decl pos:start="39:9" pos:end="39:20"><type pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:15">uint8_t</name> <modifier pos:start="39:17" pos:end="39:17">*</modifier></type><name pos:start="39:18" pos:end="39:20">buf</name></decl>;</decl_stmt>



        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:55">(<expr pos:start="43:13" pos:end="43:54"><call pos:start="43:13" pos:end="43:50"><name pos:start="43:13" pos:end="43:25">av_new_packet</name><argument_list pos:start="43:26" pos:end="43:50">(<argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">pkt</name></expr></argument>, <argument pos:start="43:32" pos:end="43:49"><expr pos:start="43:32" pos:end="43:49"><name pos:start="43:32" pos:end="43:45"><name pos:start="43:32" pos:end="43:34">iff</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:45">body_size</name></name> <operator pos:start="43:47" pos:end="43:47">+</operator> <literal type="number" pos:start="43:49" pos:end="43:49">2</literal></expr></argument>)</argument_list></call> <operator pos:start="43:52" pos:end="43:52">&lt;</operator> <literal type="number" pos:start="43:54" pos:end="43:54">0</literal></expr>)</condition> <block pos:start="43:57" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:35">

            <return pos:start="45:13" pos:end="45:35">return <expr pos:start="45:20" pos:end="45:34"><call pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:26">AVERROR</name><argument_list pos:start="45:27" pos:end="45:34">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:11">buf</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:23"><name pos:start="51:15" pos:end="51:17">pkt</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:23">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:27">bytestream_put_be16</name><argument_list pos:start="53:28" pos:end="53:36">(<argument pos:start="53:29" pos:end="53:32"><expr pos:start="53:29" pos:end="53:32"><operator pos:start="53:29" pos:end="53:29">&amp;</operator><name pos:start="53:30" pos:end="53:32">buf</name></expr></argument>, <argument pos:start="53:35" pos:end="53:35"><expr pos:start="53:35" pos:end="53:35"><literal type="number" pos:start="53:35" pos:end="53:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:49"><expr pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:48"><name pos:start="55:15" pos:end="55:23">avio_read</name><argument_list pos:start="55:24" pos:end="55:48">(<argument pos:start="55:25" pos:end="55:26"><expr pos:start="55:25" pos:end="55:26"><name pos:start="55:25" pos:end="55:26">pb</name></expr></argument>, <argument pos:start="55:29" pos:end="55:31"><expr pos:start="55:29" pos:end="55:31"><name pos:start="55:29" pos:end="55:31">buf</name></expr></argument>, <argument pos:start="55:34" pos:end="55:47"><expr pos:start="55:34" pos:end="55:47"><name pos:start="55:34" pos:end="55:47"><name pos:start="55:34" pos:end="55:36">iff</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:47">body_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:22">

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><call pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:18">av_assert0</name><argument_list pos:start="61:19" pos:end="61:21">(<argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="67:5" pos:end="69:38"><if pos:start="67:5" pos:end="69:38">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:11">pos</name> <operator pos:start="67:13" pos:end="67:14">==</operator> <name pos:start="67:16" pos:end="67:28"><name pos:start="67:16" pos:end="67:18">iff</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:28">body_pos</name></name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:38"><block_content pos:start="69:9" pos:end="69:38">

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:11">pkt</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:18">flags</name></name> <operator pos:start="69:20" pos:end="69:21">|=</operator> <name pos:start="69:23" pos:end="69:37">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="73:19"><if pos:start="71:5" pos:end="73:19">if <condition pos:start="71:8" pos:end="71:16">(<expr pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <literal type="number" pos:start="71:15" pos:end="71:15">0</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:19"><block_content pos:start="73:9" pos:end="73:19">

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:26"><expr pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:7">pkt</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:21">stream_index</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
