<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23836.c" pos:tabs="8"><function pos:start="1:1" pos:end="625:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">process_ipmovie_chunk</name><parameter_list pos:start="1:33" pos:end="3:18">(<parameter pos:start="1:34" pos:end="1:48"><decl pos:start="1:34" pos:end="1:48"><type pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:45">IPMVEContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:61">AVIOContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">pb</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:17"><decl pos:start="3:5" pos:end="3:17"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:12">AVPacket</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:17">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="625:1">{<block_content pos:start="7:5" pos:end="623:22">

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:53"><name pos:start="7:19" pos:end="7:32">chunk_preamble</name><index pos:start="7:33" pos:end="7:53">[<expr pos:start="7:34" pos:end="7:52"><name pos:start="7:34" pos:end="7:52">CHUNK_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">chunk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:55"><name pos:start="13:19" pos:end="13:33">opcode_preamble</name><index pos:start="13:34" pos:end="13:55">[<expr pos:start="13:35" pos:end="13:54"><name pos:start="13:35" pos:end="13:54">OPCODE_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:29">opcode_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">char</name></type> <name pos:start="17:19" pos:end="17:32">opcode_version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">opcode_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:31"><name pos:start="21:19" pos:end="21:25">scratch</name><index pos:start="21:26" pos:end="21:31">[<expr pos:start="21:27" pos:end="21:30"><literal type="number" pos:start="21:27" pos:end="21:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:12"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">first_color</name></decl>, <decl pos:start="25:22" pos:end="25:31"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:22" pos:end="25:31">last_color</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:19">audio_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:17">char</name></type> <name pos:start="29:19" pos:end="29:19">r</name></decl>, <decl pos:start="29:22" pos:end="29:22"><type ref="prev" pos:start="29:5" pos:end="29:17"/><name pos:start="29:22" pos:end="29:22">g</name></decl>, <decl pos:start="29:25" pos:end="29:25"><type ref="prev" pos:start="29:5" pos:end="29:17"/><name pos:start="29:25" pos:end="29:25">b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:16">int</name></type> <name pos:start="31:18" pos:end="31:22">width</name></decl>, <decl pos:start="31:25" pos:end="31:30"><type ref="prev" pos:start="31:5" pos:end="31:16"/><name pos:start="31:25" pos:end="31:30">height</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:46">/* see if there are any pending packets */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:49"><expr pos:start="37:5" pos:end="37:48"><name pos:start="37:5" pos:end="37:14">chunk_type</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:48"><name pos:start="37:18" pos:end="37:36">load_ipmovie_packet</name><argument_list pos:start="37:37" pos:end="37:48">(<argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">s</name></expr></argument>, <argument pos:start="37:41" pos:end="37:42"><expr pos:start="37:41" pos:end="37:42"><name pos:start="37:41" pos:end="37:42">pb</name></expr></argument>, <argument pos:start="37:45" pos:end="37:47"><expr pos:start="37:45" pos:end="37:47"><name pos:start="37:45" pos:end="37:47">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:26"><if pos:start="39:5" pos:end="41:26">if <condition pos:start="39:8" pos:end="39:33">(<expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:18">chunk_type</name> <operator pos:start="39:20" pos:end="39:21">!=</operator> <name pos:start="39:23" pos:end="39:32">CHUNK_DONE</name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:26"><block_content pos:start="41:9" pos:end="41:26">

        <return pos:start="41:9" pos:end="41:26">return <expr pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:25">chunk_type</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:71">/* read the next chunk, wherever the file happens to be pointing */</comment>

    <if_stmt pos:start="47:5" pos:end="49:25"><if pos:start="47:5" pos:end="49:25">if <condition pos:start="47:8" pos:end="47:22">(<expr pos:start="47:9" pos:end="47:21"><call pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:17">avio_feof</name><argument_list pos:start="47:18" pos:end="47:21">(<argument pos:start="47:19" pos:end="47:20"><expr pos:start="47:19" pos:end="47:20"><name pos:start="47:19" pos:end="47:20">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:25"><block_content pos:start="49:9" pos:end="49:25">

        <return pos:start="49:9" pos:end="49:25">return <expr pos:start="49:16" pos:end="49:24"><name pos:start="49:16" pos:end="49:24">CHUNK_EOF</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="55:25"><if pos:start="51:5" pos:end="55:25">if <condition pos:start="51:8" pos:end="53:28">(<expr pos:start="51:9" pos:end="53:27"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:17">avio_read</name><argument_list pos:start="51:18" pos:end="51:58">(<argument pos:start="51:19" pos:end="51:20"><expr pos:start="51:19" pos:end="51:20"><name pos:start="51:19" pos:end="51:20">pb</name></expr></argument>, <argument pos:start="51:23" pos:end="51:36"><expr pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:36">chunk_preamble</name></expr></argument>, <argument pos:start="51:39" pos:end="51:57"><expr pos:start="51:39" pos:end="51:57"><name pos:start="51:39" pos:end="51:57">CHUNK_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="51:60" pos:end="51:61">!=</operator>

        <name pos:start="53:9" pos:end="53:27">CHUNK_PREAMBLE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:25"><block_content pos:start="55:9" pos:end="55:25">

        <return pos:start="55:9" pos:end="55:25">return <expr pos:start="55:16" pos:end="55:24"><name pos:start="55:16" pos:end="55:24">CHUNK_BAD</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:14">chunk_size</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:44"><name pos:start="57:18" pos:end="57:24">AV_RL16</name><argument_list pos:start="57:25" pos:end="57:44">(<argument pos:start="57:26" pos:end="57:43"><expr pos:start="57:26" pos:end="57:43"><operator pos:start="57:26" pos:end="57:26">&amp;</operator><name pos:start="57:27" pos:end="57:43"><name pos:start="57:27" pos:end="57:40">chunk_preamble</name><index pos:start="57:41" pos:end="57:43">[<expr pos:start="57:42" pos:end="57:42"><literal type="number" pos:start="57:42" pos:end="57:42">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:45"><expr pos:start="59:5" pos:end="59:44"><name pos:start="59:5" pos:end="59:14">chunk_type</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:44"><name pos:start="59:18" pos:end="59:24">AV_RL16</name><argument_list pos:start="59:25" pos:end="59:44">(<argument pos:start="59:26" pos:end="59:43"><expr pos:start="59:26" pos:end="59:43"><operator pos:start="59:26" pos:end="59:26">&amp;</operator><name pos:start="59:27" pos:end="59:43"><name pos:start="59:27" pos:end="59:40">chunk_preamble</name><index pos:start="59:41" pos:end="59:43">[<expr pos:start="59:42" pos:end="59:42"><literal type="number" pos:start="59:42" pos:end="59:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:94"><expr pos:start="63:5" pos:end="63:93"><call pos:start="63:5" pos:end="63:93"><name pos:start="63:5" pos:end="63:10">av_log</name><argument_list pos:start="63:11" pos:end="63:93">(<argument pos:start="63:12" pos:end="63:17"><expr pos:start="63:12" pos:end="63:17"><name pos:start="63:12" pos:end="63:17"><name pos:start="63:12" pos:end="63:12">s</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:17">avf</name></name></expr></argument>, <argument pos:start="63:20" pos:end="63:31"><expr pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:31">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="63:34" pos:end="63:68"><expr pos:start="63:34" pos:end="63:68"><literal type="string" pos:start="63:34" pos:end="63:68">"chunk type 0x%04X, 0x%04X bytes: "</literal></expr></argument>, <argument pos:start="63:71" pos:end="63:80"><expr pos:start="63:71" pos:end="63:80"><name pos:start="63:71" pos:end="63:80">chunk_type</name></expr></argument>, <argument pos:start="63:83" pos:end="63:92"><expr pos:start="63:83" pos:end="63:92"><name pos:start="63:83" pos:end="63:92">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="67:5" pos:end="129:5">switch <condition pos:start="67:12" pos:end="67:23">(<expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:22">chunk_type</name></expr>)</condition> <block pos:start="67:25" pos:end="129:5">{<block_content pos:start="71:5" pos:end="125:14">



    <case pos:start="71:5" pos:end="71:26">case <expr pos:start="71:10" pos:end="71:25"><name pos:start="71:10" pos:end="71:25">CHUNK_INIT_AUDIO</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:59"><expr pos:start="73:9" pos:end="73:58"><call pos:start="73:9" pos:end="73:58"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:58">(<argument pos:start="73:16" pos:end="73:21"><expr pos:start="73:16" pos:end="73:21"><name pos:start="73:16" pos:end="73:21"><name pos:start="73:16" pos:end="73:16">s</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:21">avf</name></name></expr></argument>, <argument pos:start="73:24" pos:end="73:35"><expr pos:start="73:24" pos:end="73:35"><name pos:start="73:24" pos:end="73:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="73:38" pos:end="73:57"><expr pos:start="73:38" pos:end="73:57"><literal type="string" pos:start="73:38" pos:end="73:57">"initialize audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>



    <case pos:start="79:5" pos:end="79:26">case <expr pos:start="79:10" pos:end="79:25"><name pos:start="79:10" pos:end="79:25">CHUNK_AUDIO_ONLY</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:53"><expr pos:start="81:9" pos:end="81:52"><call pos:start="81:9" pos:end="81:52"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:52">(<argument pos:start="81:16" pos:end="81:21"><expr pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:21">avf</name></name></expr></argument>, <argument pos:start="81:24" pos:end="81:35"><expr pos:start="81:24" pos:end="81:35"><name pos:start="81:24" pos:end="81:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="81:38" pos:end="81:51"><expr pos:start="81:38" pos:end="81:51"><literal type="string" pos:start="81:38" pos:end="81:51">"audio only\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>



    <case pos:start="87:5" pos:end="87:26">case <expr pos:start="87:10" pos:end="87:25"><name pos:start="87:10" pos:end="87:25">CHUNK_INIT_VIDEO</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:59"><expr pos:start="89:9" pos:end="89:58"><call pos:start="89:9" pos:end="89:58"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:58">(<argument pos:start="89:16" pos:end="89:21"><expr pos:start="89:16" pos:end="89:21"><name pos:start="89:16" pos:end="89:21"><name pos:start="89:16" pos:end="89:16">s</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:21">avf</name></name></expr></argument>, <argument pos:start="89:24" pos:end="89:35"><expr pos:start="89:24" pos:end="89:35"><name pos:start="89:24" pos:end="89:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="89:38" pos:end="89:57"><expr pos:start="89:38" pos:end="89:57"><literal type="string" pos:start="89:38" pos:end="89:57">"initialize video\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <case pos:start="95:5" pos:end="95:21">case <expr pos:start="95:10" pos:end="95:20"><name pos:start="95:10" pos:end="95:20">CHUNK_VIDEO</name></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:60"><expr pos:start="97:9" pos:end="97:59"><call pos:start="97:9" pos:end="97:59"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:59">(<argument pos:start="97:16" pos:end="97:21"><expr pos:start="97:16" pos:end="97:21"><name pos:start="97:16" pos:end="97:21"><name pos:start="97:16" pos:end="97:16">s</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:21">avf</name></name></expr></argument>, <argument pos:start="97:24" pos:end="97:35"><expr pos:start="97:24" pos:end="97:35"><name pos:start="97:24" pos:end="97:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="97:38" pos:end="97:58"><expr pos:start="97:38" pos:end="97:58"><literal type="string" pos:start="97:38" pos:end="97:58">"video (and audio)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>



    <case pos:start="103:5" pos:end="103:24">case <expr pos:start="103:10" pos:end="103:23"><name pos:start="103:10" pos:end="103:23">CHUNK_SHUTDOWN</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:51"><expr pos:start="105:9" pos:end="105:50"><call pos:start="105:9" pos:end="105:50"><name pos:start="105:9" pos:end="105:14">av_log</name><argument_list pos:start="105:15" pos:end="105:50">(<argument pos:start="105:16" pos:end="105:21"><expr pos:start="105:16" pos:end="105:21"><name pos:start="105:16" pos:end="105:21"><name pos:start="105:16" pos:end="105:16">s</name><operator pos:start="105:17" pos:end="105:18">-&gt;</operator><name pos:start="105:19" pos:end="105:21">avf</name></name></expr></argument>, <argument pos:start="105:24" pos:end="105:35"><expr pos:start="105:24" pos:end="105:35"><name pos:start="105:24" pos:end="105:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="105:38" pos:end="105:49"><expr pos:start="105:38" pos:end="105:49"><literal type="string" pos:start="105:38" pos:end="105:49">"shutdown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>



    <case pos:start="111:5" pos:end="111:19">case <expr pos:start="111:10" pos:end="111:18"><name pos:start="111:10" pos:end="111:18">CHUNK_END</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:46"><expr pos:start="113:9" pos:end="113:45"><call pos:start="113:9" pos:end="113:45"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="113:45">(<argument pos:start="113:16" pos:end="113:21"><expr pos:start="113:16" pos:end="113:21"><name pos:start="113:16" pos:end="113:21"><name pos:start="113:16" pos:end="113:16">s</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:21">avf</name></name></expr></argument>, <argument pos:start="113:24" pos:end="113:35"><expr pos:start="113:24" pos:end="113:35"><name pos:start="113:24" pos:end="113:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="113:38" pos:end="113:44"><expr pos:start="113:38" pos:end="113:44"><literal type="string" pos:start="113:38" pos:end="113:44">"end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>



    <default pos:start="119:5" pos:end="119:12">default:</default>

        <expr_stmt pos:start="121:9" pos:end="121:56"><expr pos:start="121:9" pos:end="121:55"><call pos:start="121:9" pos:end="121:55"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="121:55">(<argument pos:start="121:16" pos:end="121:21"><expr pos:start="121:16" pos:end="121:21"><name pos:start="121:16" pos:end="121:21"><name pos:start="121:16" pos:end="121:16">s</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:21">avf</name></name></expr></argument>, <argument pos:start="121:24" pos:end="121:35"><expr pos:start="121:24" pos:end="121:35"><name pos:start="121:24" pos:end="121:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="121:38" pos:end="121:54"><expr pos:start="121:38" pos:end="121:54"><literal type="string" pos:start="121:38" pos:end="121:54">"invalid chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:31"><expr pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:18">chunk_type</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:30">CHUNK_BAD</name></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>



    </block_content>}</block></switch>



    <while pos:start="133:5" pos:end="599:5">while <condition pos:start="133:11" pos:end="133:57">(<expr pos:start="133:12" pos:end="133:56"><operator pos:start="133:12" pos:end="133:12">(</operator><name pos:start="133:13" pos:end="133:22">chunk_size</name> <operator pos:start="133:24" pos:end="133:24">&gt;</operator> <literal type="number" pos:start="133:26" pos:end="133:26">0</literal><operator pos:start="133:27" pos:end="133:27">)</operator> <operator pos:start="133:29" pos:end="133:30">&amp;&amp;</operator> <operator pos:start="133:32" pos:end="133:32">(</operator><name pos:start="133:33" pos:end="133:42">chunk_type</name> <operator pos:start="133:44" pos:end="133:45">!=</operator> <name pos:start="133:47" pos:end="133:55">CHUNK_BAD</name><operator pos:start="133:56" pos:end="133:56">)</operator></expr>)</condition> <block pos:start="133:59" pos:end="599:5">{<block_content pos:start="139:9" pos:end="597:9">



        <comment type="block" pos:start="137:9" pos:end="137:75">/* read the next chunk, wherever the file happens to be pointing */</comment>

        <if_stmt pos:start="139:9" pos:end="145:9"><if pos:start="139:9" pos:end="145:9">if <condition pos:start="139:12" pos:end="139:26">(<expr pos:start="139:13" pos:end="139:25"><call pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:21">avio_feof</name><argument_list pos:start="139:22" pos:end="139:25">(<argument pos:start="139:23" pos:end="139:24"><expr pos:start="139:23" pos:end="139:24"><name pos:start="139:23" pos:end="139:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:28" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:18">

            <expr_stmt pos:start="141:13" pos:end="141:35"><expr pos:start="141:13" pos:end="141:34"><name pos:start="141:13" pos:end="141:22">chunk_type</name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:34">CHUNK_EOF</name></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="147:9" pos:end="155:9"><if pos:start="147:9" pos:end="155:9">if <condition pos:start="147:12" pos:end="149:32">(<expr pos:start="147:13" pos:end="149:31"><call pos:start="147:13" pos:end="147:63"><name pos:start="147:13" pos:end="147:21">avio_read</name><argument_list pos:start="147:22" pos:end="147:63">(<argument pos:start="147:23" pos:end="147:24"><expr pos:start="147:23" pos:end="147:24"><name pos:start="147:23" pos:end="147:24">pb</name></expr></argument>, <argument pos:start="147:27" pos:end="147:41"><expr pos:start="147:27" pos:end="147:41"><name pos:start="147:27" pos:end="147:41">opcode_preamble</name></expr></argument>, <argument pos:start="147:44" pos:end="147:62"><expr pos:start="147:44" pos:end="147:62"><name pos:start="147:44" pos:end="147:62">CHUNK_PREAMBLE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="147:65" pos:end="147:66">!=</operator>

            <name pos:start="149:13" pos:end="149:31">CHUNK_PREAMBLE_SIZE</name></expr>)</condition> <block pos:start="149:34" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:18">

            <expr_stmt pos:start="151:13" pos:end="151:35"><expr pos:start="151:13" pos:end="151:34"><name pos:start="151:13" pos:end="151:22">chunk_type</name> <operator pos:start="151:24" pos:end="151:24">=</operator> <name pos:start="151:26" pos:end="151:34">CHUNK_BAD</name></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:51"><expr pos:start="159:9" pos:end="159:50"><name pos:start="159:9" pos:end="159:19">opcode_size</name> <operator pos:start="159:21" pos:end="159:21">=</operator> <call pos:start="159:23" pos:end="159:50"><name pos:start="159:23" pos:end="159:29">AV_RL16</name><argument_list pos:start="159:30" pos:end="159:50">(<argument pos:start="159:31" pos:end="159:49"><expr pos:start="159:31" pos:end="159:49"><operator pos:start="159:31" pos:end="159:31">&amp;</operator><name pos:start="159:32" pos:end="159:49"><name pos:start="159:32" pos:end="159:46">opcode_preamble</name><index pos:start="159:47" pos:end="159:49">[<expr pos:start="159:48" pos:end="159:48"><literal type="number" pos:start="159:48" pos:end="159:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:41"><expr pos:start="161:9" pos:end="161:40"><name pos:start="161:9" pos:end="161:19">opcode_type</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <name pos:start="161:23" pos:end="161:40"><name pos:start="161:23" pos:end="161:37">opcode_preamble</name><index pos:start="161:38" pos:end="161:40">[<expr pos:start="161:39" pos:end="161:39"><literal type="number" pos:start="161:39" pos:end="161:39">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:44"><expr pos:start="163:9" pos:end="163:43"><name pos:start="163:9" pos:end="163:22">opcode_version</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <name pos:start="163:26" pos:end="163:43"><name pos:start="163:26" pos:end="163:40">opcode_preamble</name><index pos:start="163:41" pos:end="163:43">[<expr pos:start="163:42" pos:end="163:42"><literal type="number" pos:start="163:42" pos:end="163:42">3</literal></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:43"><expr pos:start="167:9" pos:end="167:42"><name pos:start="167:9" pos:end="167:18">chunk_size</name> <operator pos:start="167:20" pos:end="167:21">-=</operator> <name pos:start="167:23" pos:end="167:42">OPCODE_PREAMBLE_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:34"><expr pos:start="169:9" pos:end="169:33"><name pos:start="169:9" pos:end="169:18">chunk_size</name> <operator pos:start="169:20" pos:end="169:21">-=</operator> <name pos:start="169:23" pos:end="169:33">opcode_size</name></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="171:27">(<expr pos:start="171:13" pos:end="171:26"><name pos:start="171:13" pos:end="171:22">chunk_size</name> <operator pos:start="171:24" pos:end="171:24">&lt;</operator> <literal type="number" pos:start="171:26" pos:end="171:26">0</literal></expr>)</condition> <block pos:start="171:29" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:18">

            <expr_stmt pos:start="173:13" pos:end="173:86"><expr pos:start="173:13" pos:end="173:85"><call pos:start="173:13" pos:end="173:85"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="173:85">(<argument pos:start="173:20" pos:end="173:25"><expr pos:start="173:20" pos:end="173:25"><name pos:start="173:20" pos:end="173:25"><name pos:start="173:20" pos:end="173:20">s</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:25">avf</name></name></expr></argument>, <argument pos:start="173:28" pos:end="173:39"><expr pos:start="173:28" pos:end="173:39"><name pos:start="173:28" pos:end="173:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="173:42" pos:end="173:84"><expr pos:start="173:42" pos:end="173:84"><literal type="string" pos:start="173:42" pos:end="173:84">"chunk_size countdown just went negative\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:35"><expr pos:start="175:13" pos:end="175:34"><name pos:start="175:13" pos:end="175:22">chunk_type</name> <operator pos:start="175:24" pos:end="175:24">=</operator> <name pos:start="175:26" pos:end="175:34">CHUNK_BAD</name></expr>;</expr_stmt>

            <break pos:start="177:13" pos:end="177:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="185:58"><expr pos:start="183:9" pos:end="185:57"><call pos:start="183:9" pos:end="185:57"><name pos:start="183:9" pos:end="183:14">av_log</name><argument_list pos:start="183:15" pos:end="185:57">(<argument pos:start="183:16" pos:end="183:21"><expr pos:start="183:16" pos:end="183:21"><name pos:start="183:16" pos:end="183:21"><name pos:start="183:16" pos:end="183:16">s</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:21">avf</name></name></expr></argument>, <argument pos:start="183:24" pos:end="183:35"><expr pos:start="183:24" pos:end="183:35"><name pos:start="183:24" pos:end="183:35">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="183:38" pos:end="183:85"><expr pos:start="183:38" pos:end="183:85"><literal type="string" pos:start="183:38" pos:end="183:85">"  opcode type %02X, version %d, 0x%04X bytes: "</literal></expr></argument>,

                <argument pos:start="185:17" pos:end="185:27"><expr pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:27">opcode_type</name></expr></argument>, <argument pos:start="185:30" pos:end="185:43"><expr pos:start="185:30" pos:end="185:43"><name pos:start="185:30" pos:end="185:43">opcode_version</name></expr></argument>, <argument pos:start="185:46" pos:end="185:56"><expr pos:start="185:46" pos:end="185:56"><name pos:start="185:46" pos:end="185:56">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="187:9" pos:end="597:9">switch <condition pos:start="187:16" pos:end="187:28">(<expr pos:start="187:17" pos:end="187:27"><name pos:start="187:17" pos:end="187:27">opcode_type</name></expr>)</condition> <block pos:start="187:30" pos:end="597:9">{<block_content pos:start="191:9" pos:end="593:18">



        <case pos:start="191:9" pos:end="191:34">case <expr pos:start="191:14" pos:end="191:33"><name pos:start="191:14" pos:end="191:33">OPCODE_END_OF_STREAM</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:60"><expr pos:start="193:13" pos:end="193:59"><call pos:start="193:13" pos:end="193:59"><name pos:start="193:13" pos:end="193:18">av_log</name><argument_list pos:start="193:19" pos:end="193:59">(<argument pos:start="193:20" pos:end="193:25"><expr pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:20">s</name><operator pos:start="193:21" pos:end="193:22">-&gt;</operator><name pos:start="193:23" pos:end="193:25">avf</name></name></expr></argument>, <argument pos:start="193:28" pos:end="193:39"><expr pos:start="193:28" pos:end="193:39"><name pos:start="193:28" pos:end="193:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="193:42" pos:end="193:58"><expr pos:start="193:42" pos:end="193:58"><literal type="string" pos:start="193:42" pos:end="193:58">"end of stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:39"><expr pos:start="195:13" pos:end="195:38"><call pos:start="195:13" pos:end="195:38"><name pos:start="195:13" pos:end="195:21">avio_skip</name><argument_list pos:start="195:22" pos:end="195:38">(<argument pos:start="195:23" pos:end="195:24"><expr pos:start="195:23" pos:end="195:24"><name pos:start="195:23" pos:end="195:24">pb</name></expr></argument>, <argument pos:start="195:27" pos:end="195:37"><expr pos:start="195:27" pos:end="195:37"><name pos:start="195:27" pos:end="195:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>



        <case pos:start="201:9" pos:end="201:33">case <expr pos:start="201:14" pos:end="201:32"><name pos:start="201:14" pos:end="201:32">OPCODE_END_OF_CHUNK</name></expr>:</case>

            <expr_stmt pos:start="203:13" pos:end="203:59"><expr pos:start="203:13" pos:end="203:58"><call pos:start="203:13" pos:end="203:58"><name pos:start="203:13" pos:end="203:18">av_log</name><argument_list pos:start="203:19" pos:end="203:58">(<argument pos:start="203:20" pos:end="203:25"><expr pos:start="203:20" pos:end="203:25"><name pos:start="203:20" pos:end="203:25"><name pos:start="203:20" pos:end="203:20">s</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:25">avf</name></name></expr></argument>, <argument pos:start="203:28" pos:end="203:39"><expr pos:start="203:28" pos:end="203:39"><name pos:start="203:28" pos:end="203:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="203:42" pos:end="203:57"><expr pos:start="203:42" pos:end="203:57"><literal type="string" pos:start="203:42" pos:end="203:57">"end of chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:39"><expr pos:start="205:13" pos:end="205:38"><call pos:start="205:13" pos:end="205:38"><name pos:start="205:13" pos:end="205:21">avio_skip</name><argument_list pos:start="205:22" pos:end="205:38">(<argument pos:start="205:23" pos:end="205:24"><expr pos:start="205:23" pos:end="205:24"><name pos:start="205:23" pos:end="205:24">pb</name></expr></argument>, <argument pos:start="205:27" pos:end="205:37"><expr pos:start="205:27" pos:end="205:37"><name pos:start="205:27" pos:end="205:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>



        <case pos:start="211:9" pos:end="211:33">case <expr pos:start="211:14" pos:end="211:32"><name pos:start="211:14" pos:end="211:32">OPCODE_CREATE_TIMER</name></expr>:</case>

            <expr_stmt pos:start="213:13" pos:end="213:59"><expr pos:start="213:13" pos:end="213:58"><call pos:start="213:13" pos:end="213:58"><name pos:start="213:13" pos:end="213:18">av_log</name><argument_list pos:start="213:19" pos:end="213:58">(<argument pos:start="213:20" pos:end="213:25"><expr pos:start="213:20" pos:end="213:25"><name pos:start="213:20" pos:end="213:25"><name pos:start="213:20" pos:end="213:20">s</name><operator pos:start="213:21" pos:end="213:22">-&gt;</operator><name pos:start="213:23" pos:end="213:25">avf</name></name></expr></argument>, <argument pos:start="213:28" pos:end="213:39"><expr pos:start="213:28" pos:end="213:39"><name pos:start="213:28" pos:end="213:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="213:42" pos:end="213:57"><expr pos:start="213:42" pos:end="213:57"><literal type="string" pos:start="213:42" pos:end="213:57">"create timer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="223:13"><if pos:start="215:13" pos:end="223:13">if <condition pos:start="215:16" pos:end="215:59">(<expr pos:start="215:17" pos:end="215:58"><operator pos:start="215:17" pos:end="215:17">(</operator><name pos:start="215:18" pos:end="215:31">opcode_version</name> <operator pos:start="215:33" pos:end="215:33">&gt;</operator> <literal type="number" pos:start="215:35" pos:end="215:35">0</literal><operator pos:start="215:36" pos:end="215:36">)</operator> <operator pos:start="215:38" pos:end="215:39">||</operator> <operator pos:start="215:41" pos:end="215:41">(</operator><name pos:start="215:42" pos:end="215:52">opcode_size</name> <operator pos:start="215:54" pos:end="215:55">!=</operator> <literal type="number" pos:start="215:57" pos:end="215:57">6</literal><operator pos:start="215:58" pos:end="215:58">)</operator></expr>)</condition> <block pos:start="215:61" pos:end="223:13">{<block_content pos:start="217:17" pos:end="221:22">

                <expr_stmt pos:start="217:17" pos:end="217:74"><expr pos:start="217:17" pos:end="217:73"><call pos:start="217:17" pos:end="217:73"><name pos:start="217:17" pos:end="217:22">av_log</name><argument_list pos:start="217:23" pos:end="217:73">(<argument pos:start="217:24" pos:end="217:29"><expr pos:start="217:24" pos:end="217:29"><name pos:start="217:24" pos:end="217:29"><name pos:start="217:24" pos:end="217:24">s</name><operator pos:start="217:25" pos:end="217:26">-&gt;</operator><name pos:start="217:27" pos:end="217:29">avf</name></name></expr></argument>, <argument pos:start="217:32" pos:end="217:43"><expr pos:start="217:32" pos:end="217:43"><name pos:start="217:32" pos:end="217:43">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="217:46" pos:end="217:72"><expr pos:start="217:46" pos:end="217:72"><literal type="string" pos:start="217:46" pos:end="217:72">"bad create_timer opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:39"><expr pos:start="219:17" pos:end="219:38"><name pos:start="219:17" pos:end="219:26">chunk_type</name> <operator pos:start="219:28" pos:end="219:28">=</operator> <name pos:start="219:30" pos:end="219:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="221:17" pos:end="221:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="225:13" pos:end="233:13"><if pos:start="225:13" pos:end="233:13">if <condition pos:start="225:16" pos:end="227:28">(<expr pos:start="225:17" pos:end="227:27"><call pos:start="225:17" pos:end="225:51"><name pos:start="225:17" pos:end="225:25">avio_read</name><argument_list pos:start="225:26" pos:end="225:51">(<argument pos:start="225:27" pos:end="225:28"><expr pos:start="225:27" pos:end="225:28"><name pos:start="225:27" pos:end="225:28">pb</name></expr></argument>, <argument pos:start="225:31" pos:end="225:37"><expr pos:start="225:31" pos:end="225:37"><name pos:start="225:31" pos:end="225:37">scratch</name></expr></argument>, <argument pos:start="225:40" pos:end="225:50"><expr pos:start="225:40" pos:end="225:50"><name pos:start="225:40" pos:end="225:50">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="225:53" pos:end="225:54">!=</operator>

                <name pos:start="227:17" pos:end="227:27">opcode_size</name></expr>)</condition> <block pos:start="227:30" pos:end="233:13">{<block_content pos:start="229:17" pos:end="231:22">

                <expr_stmt pos:start="229:17" pos:end="229:39"><expr pos:start="229:17" pos:end="229:38"><name pos:start="229:17" pos:end="229:26">chunk_type</name> <operator pos:start="229:28" pos:end="229:28">=</operator> <name pos:start="229:30" pos:end="229:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="231:17" pos:end="231:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:87"><expr pos:start="235:13" pos:end="235:86"><name pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:13">s</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:28">frame_pts_inc</name></name> <operator pos:start="235:30" pos:end="235:30">=</operator> <operator pos:start="235:32" pos:end="235:32">(</operator><operator pos:start="235:33" pos:end="235:33">(</operator><name pos:start="235:34" pos:end="235:41">uint64_t</name><operator pos:start="235:42" pos:end="235:42">)</operator><call pos:start="235:43" pos:end="235:62"><name pos:start="235:43" pos:end="235:49">AV_RL32</name><argument_list pos:start="235:50" pos:end="235:62">(<argument pos:start="235:51" pos:end="235:61"><expr pos:start="235:51" pos:end="235:61"><operator pos:start="235:51" pos:end="235:51">&amp;</operator><name pos:start="235:52" pos:end="235:61"><name pos:start="235:52" pos:end="235:58">scratch</name><index pos:start="235:59" pos:end="235:61">[<expr pos:start="235:60" pos:end="235:60"><literal type="number" pos:start="235:60" pos:end="235:60">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="235:63" pos:end="235:63">)</operator> <operator pos:start="235:65" pos:end="235:65">*</operator> <call pos:start="235:67" pos:end="235:86"><name pos:start="235:67" pos:end="235:73">AV_RL16</name><argument_list pos:start="235:74" pos:end="235:86">(<argument pos:start="235:75" pos:end="235:85"><expr pos:start="235:75" pos:end="235:85"><operator pos:start="235:75" pos:end="235:75">&amp;</operator><name pos:start="235:76" pos:end="235:85"><name pos:start="235:76" pos:end="235:82">scratch</name><index pos:start="235:83" pos:end="235:85">[<expr pos:start="235:84" pos:end="235:84"><literal type="number" pos:start="235:84" pos:end="235:84">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>



        <case pos:start="241:9" pos:end="241:39">case <expr pos:start="241:14" pos:end="241:38"><name pos:start="241:14" pos:end="241:38">OPCODE_INIT_AUDIO_BUFFERS</name></expr>:</case>

            <expr_stmt pos:start="243:13" pos:end="243:71"><expr pos:start="243:13" pos:end="243:70"><call pos:start="243:13" pos:end="243:70"><name pos:start="243:13" pos:end="243:18">av_log</name><argument_list pos:start="243:19" pos:end="243:70">(<argument pos:start="243:20" pos:end="243:25"><expr pos:start="243:20" pos:end="243:25"><name pos:start="243:20" pos:end="243:25"><name pos:start="243:20" pos:end="243:20">s</name><operator pos:start="243:21" pos:end="243:22">-&gt;</operator><name pos:start="243:23" pos:end="243:25">avf</name></name></expr></argument>, <argument pos:start="243:28" pos:end="243:39"><expr pos:start="243:28" pos:end="243:39"><name pos:start="243:28" pos:end="243:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="243:42" pos:end="243:69"><expr pos:start="243:42" pos:end="243:69"><literal type="string" pos:start="243:42" pos:end="243:69">"initialize audio buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="253:13"><if pos:start="245:13" pos:end="253:13">if <condition pos:start="245:16" pos:end="245:74">(<expr pos:start="245:17" pos:end="245:73"><name pos:start="245:17" pos:end="245:30">opcode_version</name> <operator pos:start="245:32" pos:end="245:32">&gt;</operator> <literal type="number" pos:start="245:34" pos:end="245:34">1</literal> <operator pos:start="245:36" pos:end="245:37">||</operator> <name pos:start="245:39" pos:end="245:49">opcode_size</name> <operator pos:start="245:51" pos:end="245:51">&gt;</operator> <literal type="number" pos:start="245:53" pos:end="245:54">10</literal> <operator pos:start="245:56" pos:end="245:57">||</operator> <name pos:start="245:59" pos:end="245:69">opcode_size</name> <operator pos:start="245:71" pos:end="245:71">&lt;</operator> <literal type="number" pos:start="245:73" pos:end="245:73">6</literal></expr>)</condition> <block pos:start="245:76" pos:end="253:13">{<block_content pos:start="247:17" pos:end="251:22">

                <expr_stmt pos:start="247:17" pos:end="247:80"><expr pos:start="247:17" pos:end="247:79"><call pos:start="247:17" pos:end="247:79"><name pos:start="247:17" pos:end="247:22">av_log</name><argument_list pos:start="247:23" pos:end="247:79">(<argument pos:start="247:24" pos:end="247:29"><expr pos:start="247:24" pos:end="247:29"><name pos:start="247:24" pos:end="247:29"><name pos:start="247:24" pos:end="247:24">s</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:29">avf</name></name></expr></argument>, <argument pos:start="247:32" pos:end="247:43"><expr pos:start="247:32" pos:end="247:43"><name pos:start="247:32" pos:end="247:43">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="247:46" pos:end="247:78"><expr pos:start="247:46" pos:end="247:78"><literal type="string" pos:start="247:46" pos:end="247:78">"bad init_audio_buffers opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:39"><expr pos:start="249:17" pos:end="249:38"><name pos:start="249:17" pos:end="249:26">chunk_type</name> <operator pos:start="249:28" pos:end="249:28">=</operator> <name pos:start="249:30" pos:end="249:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="251:17" pos:end="251:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="255:13" pos:end="263:13"><if pos:start="255:13" pos:end="263:13">if <condition pos:start="255:16" pos:end="257:28">(<expr pos:start="255:17" pos:end="257:27"><call pos:start="255:17" pos:end="255:51"><name pos:start="255:17" pos:end="255:25">avio_read</name><argument_list pos:start="255:26" pos:end="255:51">(<argument pos:start="255:27" pos:end="255:28"><expr pos:start="255:27" pos:end="255:28"><name pos:start="255:27" pos:end="255:28">pb</name></expr></argument>, <argument pos:start="255:31" pos:end="255:37"><expr pos:start="255:31" pos:end="255:37"><name pos:start="255:31" pos:end="255:37">scratch</name></expr></argument>, <argument pos:start="255:40" pos:end="255:50"><expr pos:start="255:40" pos:end="255:50"><name pos:start="255:40" pos:end="255:50">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="255:53" pos:end="255:54">!=</operator>

                <name pos:start="257:17" pos:end="257:27">opcode_size</name></expr>)</condition> <block pos:start="257:30" pos:end="263:13">{<block_content pos:start="259:17" pos:end="261:22">

                <expr_stmt pos:start="259:17" pos:end="259:39"><expr pos:start="259:17" pos:end="259:38"><name pos:start="259:17" pos:end="259:26">chunk_type</name> <operator pos:start="259:28" pos:end="259:28">=</operator> <name pos:start="259:30" pos:end="259:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="261:17" pos:end="261:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:56"><expr pos:start="265:13" pos:end="265:55"><name pos:start="265:13" pos:end="265:32"><name pos:start="265:13" pos:end="265:13">s</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:32">audio_sample_rate</name></name> <operator pos:start="265:34" pos:end="265:34">=</operator> <call pos:start="265:36" pos:end="265:55"><name pos:start="265:36" pos:end="265:42">AV_RL16</name><argument_list pos:start="265:43" pos:end="265:55">(<argument pos:start="265:44" pos:end="265:54"><expr pos:start="265:44" pos:end="265:54"><operator pos:start="265:44" pos:end="265:44">&amp;</operator><name pos:start="265:45" pos:end="265:54"><name pos:start="265:45" pos:end="265:51">scratch</name><index pos:start="265:52" pos:end="265:54">[<expr pos:start="265:53" pos:end="265:53"><literal type="number" pos:start="265:53" pos:end="265:53">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:47"><expr pos:start="267:13" pos:end="267:46"><name pos:start="267:13" pos:end="267:23">audio_flags</name> <operator pos:start="267:25" pos:end="267:25">=</operator> <call pos:start="267:27" pos:end="267:46"><name pos:start="267:27" pos:end="267:33">AV_RL16</name><argument_list pos:start="267:34" pos:end="267:46">(<argument pos:start="267:35" pos:end="267:45"><expr pos:start="267:35" pos:end="267:45"><operator pos:start="267:35" pos:end="267:35">&amp;</operator><name pos:start="267:36" pos:end="267:45"><name pos:start="267:36" pos:end="267:42">scratch</name><index pos:start="267:43" pos:end="267:45">[<expr pos:start="267:44" pos:end="267:44"><literal type="number" pos:start="267:44" pos:end="267:44">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="269:13" pos:end="269:58">/* bit 0 of the flags: 0 = mono, 1 = stereo */</comment>

            <expr_stmt pos:start="271:13" pos:end="271:54"><expr pos:start="271:13" pos:end="271:53"><name pos:start="271:13" pos:end="271:29"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:29">audio_channels</name></name> <operator pos:start="271:31" pos:end="271:31">=</operator> <operator pos:start="271:33" pos:end="271:33">(</operator><name pos:start="271:34" pos:end="271:44">audio_flags</name> <operator pos:start="271:46" pos:end="271:46">&amp;</operator> <literal type="number" pos:start="271:48" pos:end="271:48">1</literal><operator pos:start="271:49" pos:end="271:49">)</operator> <operator pos:start="271:51" pos:end="271:51">+</operator> <literal type="number" pos:start="271:53" pos:end="271:53">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="273:13" pos:end="273:59">/* bit 1 of the flags: 0 = 8 bit, 1 = 16 bit */</comment>

            <expr_stmt pos:start="275:13" pos:end="275:63"><expr pos:start="275:13" pos:end="275:62"><name pos:start="275:13" pos:end="275:25"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:25">audio_bits</name></name> <operator pos:start="275:27" pos:end="275:27">=</operator> <operator pos:start="275:29" pos:end="275:29">(</operator><operator pos:start="275:30" pos:end="275:30">(</operator><operator pos:start="275:31" pos:end="275:31">(</operator><name pos:start="275:32" pos:end="275:42">audio_flags</name> <operator pos:start="275:44" pos:end="275:45">&gt;&gt;</operator> <literal type="number" pos:start="275:47" pos:end="275:47">1</literal><operator pos:start="275:48" pos:end="275:48">)</operator> <operator pos:start="275:50" pos:end="275:50">&amp;</operator> <literal type="number" pos:start="275:52" pos:end="275:52">1</literal><operator pos:start="275:53" pos:end="275:53">)</operator> <operator pos:start="275:55" pos:end="275:55">+</operator> <literal type="number" pos:start="275:57" pos:end="275:57">1</literal><operator pos:start="275:58" pos:end="275:58">)</operator> <operator pos:start="275:60" pos:end="275:60">*</operator> <literal type="number" pos:start="275:62" pos:end="275:62">8</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="277:13" pos:end="277:70">/* bit 2 indicates compressed audio in version 1 opcode */</comment>

            <if_stmt pos:start="279:13" pos:end="289:51"><if pos:start="279:13" pos:end="281:59">if <condition pos:start="279:16" pos:end="279:61">(<expr pos:start="279:17" pos:end="279:60"><operator pos:start="279:17" pos:end="279:17">(</operator><name pos:start="279:18" pos:end="279:31">opcode_version</name> <operator pos:start="279:33" pos:end="279:34">==</operator> <literal type="number" pos:start="279:36" pos:end="279:36">1</literal><operator pos:start="279:37" pos:end="279:37">)</operator> <operator pos:start="279:39" pos:end="279:40">&amp;&amp;</operator> <operator pos:start="279:42" pos:end="279:42">(</operator><name pos:start="279:43" pos:end="279:53">audio_flags</name> <operator pos:start="279:55" pos:end="279:55">&amp;</operator> <literal type="number" pos:start="279:57" pos:end="279:59">0x4</literal><operator pos:start="279:60" pos:end="279:60">)</operator></expr>)</condition><block type="pseudo" pos:start="281:17" pos:end="281:59"><block_content pos:start="281:17" pos:end="281:59">

                <expr_stmt pos:start="281:17" pos:end="281:59"><expr pos:start="281:17" pos:end="281:58"><name pos:start="281:17" pos:end="281:29"><name pos:start="281:17" pos:end="281:17">s</name><operator pos:start="281:18" pos:end="281:19">-&gt;</operator><name pos:start="281:20" pos:end="281:29">audio_type</name></name> <operator pos:start="281:31" pos:end="281:31">=</operator> <name pos:start="281:33" pos:end="281:58">AV_CODEC_ID_INTERPLAY_DPCM</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="283:13" pos:end="285:54">else if <condition pos:start="283:21" pos:end="283:41">(<expr pos:start="283:22" pos:end="283:40"><name pos:start="283:22" pos:end="283:34"><name pos:start="283:22" pos:end="283:22">s</name><operator pos:start="283:23" pos:end="283:24">-&gt;</operator><name pos:start="283:25" pos:end="283:34">audio_bits</name></name> <operator pos:start="283:36" pos:end="283:37">==</operator> <literal type="number" pos:start="283:39" pos:end="283:40">16</literal></expr>)</condition><block type="pseudo" pos:start="285:17" pos:end="285:54"><block_content pos:start="285:17" pos:end="285:54">

                <expr_stmt pos:start="285:17" pos:end="285:54"><expr pos:start="285:17" pos:end="285:53"><name pos:start="285:17" pos:end="285:29"><name pos:start="285:17" pos:end="285:17">s</name><operator pos:start="285:18" pos:end="285:19">-&gt;</operator><name pos:start="285:20" pos:end="285:29">audio_type</name></name> <operator pos:start="285:31" pos:end="285:31">=</operator> <name pos:start="285:33" pos:end="285:53">AV_CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="287:13" pos:end="289:51">else<block type="pseudo" pos:start="289:17" pos:end="289:51"><block_content pos:start="289:17" pos:end="289:51">

                <expr_stmt pos:start="289:17" pos:end="289:51"><expr pos:start="289:17" pos:end="289:50"><name pos:start="289:17" pos:end="289:29"><name pos:start="289:17" pos:end="289:17">s</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:29">audio_type</name></name> <operator pos:start="289:31" pos:end="289:31">=</operator> <name pos:start="289:33" pos:end="289:50">AV_CODEC_ID_PCM_U8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="291:13" pos:end="299:47"><expr pos:start="291:13" pos:end="299:46"><call pos:start="291:13" pos:end="299:46"><name pos:start="291:13" pos:end="291:18">av_log</name><argument_list pos:start="291:19" pos:end="299:46">(<argument pos:start="291:20" pos:end="291:25"><expr pos:start="291:20" pos:end="291:25"><name pos:start="291:20" pos:end="291:25"><name pos:start="291:20" pos:end="291:20">s</name><operator pos:start="291:21" pos:end="291:22">-&gt;</operator><name pos:start="291:23" pos:end="291:25">avf</name></name></expr></argument>, <argument pos:start="291:28" pos:end="291:39"><expr pos:start="291:28" pos:end="291:39"><name pos:start="291:28" pos:end="291:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="291:42" pos:end="291:81"><expr pos:start="291:42" pos:end="291:81"><literal type="string" pos:start="291:42" pos:end="291:81">"audio: %d bits, %d Hz, %s, %s format\n"</literal></expr></argument>,

                    <argument pos:start="293:21" pos:end="293:33"><expr pos:start="293:21" pos:end="293:33"><name pos:start="293:21" pos:end="293:33"><name pos:start="293:21" pos:end="293:21">s</name><operator pos:start="293:22" pos:end="293:23">-&gt;</operator><name pos:start="293:24" pos:end="293:33">audio_bits</name></name></expr></argument>, <argument pos:start="293:36" pos:end="293:55"><expr pos:start="293:36" pos:end="293:55"><name pos:start="293:36" pos:end="293:55"><name pos:start="293:36" pos:end="293:36">s</name><operator pos:start="293:37" pos:end="293:38">-&gt;</operator><name pos:start="293:39" pos:end="293:55">audio_sample_rate</name></name></expr></argument>,

                    <argument pos:start="295:21" pos:end="295:64"><expr pos:start="295:21" pos:end="295:64"><ternary pos:start="295:21" pos:end="295:64"><condition pos:start="295:21" pos:end="295:46"><expr pos:start="295:21" pos:end="295:44"><operator pos:start="295:21" pos:end="295:21">(</operator><name pos:start="295:22" pos:end="295:38"><name pos:start="295:22" pos:end="295:22">s</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:38">audio_channels</name></name> <operator pos:start="295:40" pos:end="295:41">==</operator> <literal type="number" pos:start="295:43" pos:end="295:43">2</literal><operator pos:start="295:44" pos:end="295:44">)</operator></expr> ?</condition><then pos:start="295:48" pos:end="295:55"> <expr pos:start="295:48" pos:end="295:55"><literal type="string" pos:start="295:48" pos:end="295:55">"stereo"</literal></expr> </then><else pos:start="295:57" pos:end="295:64">: <expr pos:start="295:59" pos:end="295:64"><literal type="string" pos:start="295:59" pos:end="295:64">"mono"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="297:21" pos:end="299:45"><expr pos:start="297:21" pos:end="299:45"><ternary pos:start="297:21" pos:end="299:45"><condition pos:start="297:21" pos:end="297:67"><expr pos:start="297:21" pos:end="297:65"><operator pos:start="297:21" pos:end="297:21">(</operator><name pos:start="297:22" pos:end="297:34"><name pos:start="297:22" pos:end="297:22">s</name><operator pos:start="297:23" pos:end="297:24">-&gt;</operator><name pos:start="297:25" pos:end="297:34">audio_type</name></name> <operator pos:start="297:36" pos:end="297:37">==</operator> <name pos:start="297:39" pos:end="297:64">AV_CODEC_ID_INTERPLAY_DPCM</name><operator pos:start="297:65" pos:end="297:65">)</operator></expr> ?</condition><then pos:start="299:21" pos:end="299:37">

                    <expr pos:start="299:21" pos:end="299:37"><literal type="string" pos:start="299:21" pos:end="299:37">"Interplay audio"</literal></expr> </then><else pos:start="299:39" pos:end="299:45">: <expr pos:start="299:41" pos:end="299:45"><literal type="string" pos:start="299:41" pos:end="299:45">"PCM"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>



        <case pos:start="305:9" pos:end="305:37">case <expr pos:start="305:14" pos:end="305:36"><name pos:start="305:14" pos:end="305:36">OPCODE_START_STOP_AUDIO</name></expr>:</case>

            <expr_stmt pos:start="307:13" pos:end="307:63"><expr pos:start="307:13" pos:end="307:62"><call pos:start="307:13" pos:end="307:62"><name pos:start="307:13" pos:end="307:18">av_log</name><argument_list pos:start="307:19" pos:end="307:62">(<argument pos:start="307:20" pos:end="307:25"><expr pos:start="307:20" pos:end="307:25"><name pos:start="307:20" pos:end="307:25"><name pos:start="307:20" pos:end="307:20">s</name><operator pos:start="307:21" pos:end="307:22">-&gt;</operator><name pos:start="307:23" pos:end="307:25">avf</name></name></expr></argument>, <argument pos:start="307:28" pos:end="307:39"><expr pos:start="307:28" pos:end="307:39"><name pos:start="307:28" pos:end="307:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="307:42" pos:end="307:61"><expr pos:start="307:42" pos:end="307:61"><literal type="string" pos:start="307:42" pos:end="307:61">"start/stop audio\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:39"><expr pos:start="309:13" pos:end="309:38"><call pos:start="309:13" pos:end="309:38"><name pos:start="309:13" pos:end="309:21">avio_skip</name><argument_list pos:start="309:22" pos:end="309:38">(<argument pos:start="309:23" pos:end="309:24"><expr pos:start="309:23" pos:end="309:24"><name pos:start="309:23" pos:end="309:24">pb</name></expr></argument>, <argument pos:start="309:27" pos:end="309:37"><expr pos:start="309:27" pos:end="309:37"><name pos:start="309:27" pos:end="309:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="311:13" pos:end="311:18">break;</break>



        <case pos:start="315:9" pos:end="315:39">case <expr pos:start="315:14" pos:end="315:38"><name pos:start="315:14" pos:end="315:38">OPCODE_INIT_VIDEO_BUFFERS</name></expr>:</case>

            <expr_stmt pos:start="317:13" pos:end="317:71"><expr pos:start="317:13" pos:end="317:70"><call pos:start="317:13" pos:end="317:70"><name pos:start="317:13" pos:end="317:18">av_log</name><argument_list pos:start="317:19" pos:end="317:70">(<argument pos:start="317:20" pos:end="317:25"><expr pos:start="317:20" pos:end="317:25"><name pos:start="317:20" pos:end="317:25"><name pos:start="317:20" pos:end="317:20">s</name><operator pos:start="317:21" pos:end="317:22">-&gt;</operator><name pos:start="317:23" pos:end="317:25">avf</name></name></expr></argument>, <argument pos:start="317:28" pos:end="317:39"><expr pos:start="317:28" pos:end="317:39"><name pos:start="317:28" pos:end="317:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="317:42" pos:end="317:69"><expr pos:start="317:42" pos:end="317:69"><literal type="string" pos:start="317:42" pos:end="317:69">"initialize video buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="331:13"><if pos:start="319:13" pos:end="331:13">if <condition pos:start="319:16" pos:end="323:13">(<expr pos:start="319:17" pos:end="321:57"><operator pos:start="319:17" pos:end="319:17">(</operator><name pos:start="319:18" pos:end="319:31">opcode_version</name> <operator pos:start="319:33" pos:end="319:33">&gt;</operator> <literal type="number" pos:start="319:35" pos:end="319:35">2</literal><operator pos:start="319:36" pos:end="319:36">)</operator> <operator pos:start="319:38" pos:end="319:39">||</operator> <operator pos:start="319:41" pos:end="319:41">(</operator><name pos:start="319:42" pos:end="319:52">opcode_size</name> <operator pos:start="319:54" pos:end="319:54">&gt;</operator> <literal type="number" pos:start="319:56" pos:end="319:56">8</literal><operator pos:start="319:57" pos:end="319:57">)</operator> <operator pos:start="319:59" pos:end="319:60">||</operator> <name pos:start="319:62" pos:end="319:72">opcode_size</name> <operator pos:start="319:74" pos:end="319:74">&lt;</operator> <literal type="number" pos:start="319:76" pos:end="319:76">4</literal>

                <operator pos:start="321:17" pos:end="321:18">||</operator> <name pos:start="321:20" pos:end="321:33">opcode_version</name> <operator pos:start="321:35" pos:end="321:36">==</operator> <literal type="number" pos:start="321:38" pos:end="321:38">2</literal> <operator pos:start="321:40" pos:end="321:41">&amp;&amp;</operator> <name pos:start="321:43" pos:end="321:53">opcode_size</name> <operator pos:start="321:55" pos:end="321:55">&lt;</operator> <literal type="number" pos:start="321:57" pos:end="321:57">8</literal></expr>

            )</condition> <block pos:start="323:15" pos:end="331:13">{<block_content pos:start="325:17" pos:end="329:22">

                <expr_stmt pos:start="325:17" pos:end="325:80"><expr pos:start="325:17" pos:end="325:79"><call pos:start="325:17" pos:end="325:79"><name pos:start="325:17" pos:end="325:22">av_log</name><argument_list pos:start="325:23" pos:end="325:79">(<argument pos:start="325:24" pos:end="325:29"><expr pos:start="325:24" pos:end="325:29"><name pos:start="325:24" pos:end="325:29"><name pos:start="325:24" pos:end="325:24">s</name><operator pos:start="325:25" pos:end="325:26">-&gt;</operator><name pos:start="325:27" pos:end="325:29">avf</name></name></expr></argument>, <argument pos:start="325:32" pos:end="325:43"><expr pos:start="325:32" pos:end="325:43"><name pos:start="325:32" pos:end="325:43">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="325:46" pos:end="325:78"><expr pos:start="325:46" pos:end="325:78"><literal type="string" pos:start="325:46" pos:end="325:78">"bad init_video_buffers opcode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:39"><expr pos:start="327:17" pos:end="327:38"><name pos:start="327:17" pos:end="327:26">chunk_type</name> <operator pos:start="327:28" pos:end="327:28">=</operator> <name pos:start="327:30" pos:end="327:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="329:17" pos:end="329:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="333:13" pos:end="341:13"><if pos:start="333:13" pos:end="341:13">if <condition pos:start="333:16" pos:end="335:28">(<expr pos:start="333:17" pos:end="335:27"><call pos:start="333:17" pos:end="333:51"><name pos:start="333:17" pos:end="333:25">avio_read</name><argument_list pos:start="333:26" pos:end="333:51">(<argument pos:start="333:27" pos:end="333:28"><expr pos:start="333:27" pos:end="333:28"><name pos:start="333:27" pos:end="333:28">pb</name></expr></argument>, <argument pos:start="333:31" pos:end="333:37"><expr pos:start="333:31" pos:end="333:37"><name pos:start="333:31" pos:end="333:37">scratch</name></expr></argument>, <argument pos:start="333:40" pos:end="333:50"><expr pos:start="333:40" pos:end="333:50"><name pos:start="333:40" pos:end="333:50">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="333:53" pos:end="333:54">!=</operator>

                <name pos:start="335:17" pos:end="335:27">opcode_size</name></expr>)</condition> <block pos:start="335:30" pos:end="341:13">{<block_content pos:start="337:17" pos:end="339:22">

                <expr_stmt pos:start="337:17" pos:end="337:39"><expr pos:start="337:17" pos:end="337:38"><name pos:start="337:17" pos:end="337:26">chunk_type</name> <operator pos:start="337:28" pos:end="337:28">=</operator> <name pos:start="337:30" pos:end="337:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="339:17" pos:end="339:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:46"><expr pos:start="343:13" pos:end="343:45"><name pos:start="343:13" pos:end="343:17">width</name>  <operator pos:start="343:20" pos:end="343:20">=</operator> <call pos:start="343:22" pos:end="343:41"><name pos:start="343:22" pos:end="343:28">AV_RL16</name><argument_list pos:start="343:29" pos:end="343:41">(<argument pos:start="343:30" pos:end="343:40"><expr pos:start="343:30" pos:end="343:40"><operator pos:start="343:30" pos:end="343:30">&amp;</operator><name pos:start="343:31" pos:end="343:40"><name pos:start="343:31" pos:end="343:37">scratch</name><index pos:start="343:38" pos:end="343:40">[<expr pos:start="343:39" pos:end="343:39"><literal type="number" pos:start="343:39" pos:end="343:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="343:43" pos:end="343:43">*</operator> <literal type="number" pos:start="343:45" pos:end="343:45">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:46"><expr pos:start="345:13" pos:end="345:45"><name pos:start="345:13" pos:end="345:18">height</name> <operator pos:start="345:20" pos:end="345:20">=</operator> <call pos:start="345:22" pos:end="345:41"><name pos:start="345:22" pos:end="345:28">AV_RL16</name><argument_list pos:start="345:29" pos:end="345:41">(<argument pos:start="345:30" pos:end="345:40"><expr pos:start="345:30" pos:end="345:40"><operator pos:start="345:30" pos:end="345:30">&amp;</operator><name pos:start="345:31" pos:end="345:40"><name pos:start="345:31" pos:end="345:37">scratch</name><index pos:start="345:38" pos:end="345:40">[<expr pos:start="345:39" pos:end="345:39"><literal type="number" pos:start="345:39" pos:end="345:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="345:43" pos:end="345:43">*</operator> <literal type="number" pos:start="345:45" pos:end="345:45">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="347:13" pos:end="353:13"><if pos:start="347:13" pos:end="353:13">if <condition pos:start="347:16" pos:end="347:40">(<expr pos:start="347:17" pos:end="347:39"><name pos:start="347:17" pos:end="347:21">width</name> <operator pos:start="347:23" pos:end="347:24">!=</operator> <name pos:start="347:26" pos:end="347:39"><name pos:start="347:26" pos:end="347:26">s</name><operator pos:start="347:27" pos:end="347:28">-&gt;</operator><name pos:start="347:29" pos:end="347:39">video_width</name></name></expr>)</condition> <block pos:start="347:42" pos:end="353:13">{<block_content pos:start="349:17" pos:end="351:29">

                <expr_stmt pos:start="349:17" pos:end="349:39"><expr pos:start="349:17" pos:end="349:38"><name pos:start="349:17" pos:end="349:30"><name pos:start="349:17" pos:end="349:17">s</name><operator pos:start="349:18" pos:end="349:19">-&gt;</operator><name pos:start="349:20" pos:end="349:30">video_width</name></name> <operator pos:start="349:32" pos:end="349:32">=</operator> <name pos:start="349:34" pos:end="349:38">width</name></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:29"><expr pos:start="351:17" pos:end="351:28"><name pos:start="351:17" pos:end="351:26"><name pos:start="351:17" pos:end="351:17">s</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:26">changed</name></name><operator pos:start="351:27" pos:end="351:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="355:13" pos:end="361:13"><if pos:start="355:13" pos:end="361:13">if <condition pos:start="355:16" pos:end="355:42">(<expr pos:start="355:17" pos:end="355:41"><name pos:start="355:17" pos:end="355:22">height</name> <operator pos:start="355:24" pos:end="355:25">!=</operator> <name pos:start="355:27" pos:end="355:41"><name pos:start="355:27" pos:end="355:27">s</name><operator pos:start="355:28" pos:end="355:29">-&gt;</operator><name pos:start="355:30" pos:end="355:41">video_height</name></name></expr>)</condition> <block pos:start="355:44" pos:end="361:13">{<block_content pos:start="357:17" pos:end="359:29">

                <expr_stmt pos:start="357:17" pos:end="357:41"><expr pos:start="357:17" pos:end="357:40"><name pos:start="357:17" pos:end="357:31"><name pos:start="357:17" pos:end="357:17">s</name><operator pos:start="357:18" pos:end="357:19">-&gt;</operator><name pos:start="357:20" pos:end="357:31">video_height</name></name> <operator pos:start="357:33" pos:end="357:33">=</operator> <name pos:start="357:35" pos:end="357:40">height</name></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:29"><expr pos:start="359:17" pos:end="359:28"><name pos:start="359:17" pos:end="359:26"><name pos:start="359:17" pos:end="359:17">s</name><operator pos:start="359:18" pos:end="359:19">-&gt;</operator><name pos:start="359:20" pos:end="359:26">changed</name></name><operator pos:start="359:27" pos:end="359:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="363:13" pos:end="371:13"><if pos:start="363:13" pos:end="367:13">if <condition pos:start="363:16" pos:end="363:60">(<expr pos:start="363:17" pos:end="363:59"><name pos:start="363:17" pos:end="363:30">opcode_version</name> <operator pos:start="363:32" pos:end="363:32">&lt;</operator> <literal type="number" pos:start="363:34" pos:end="363:34">2</literal> <operator pos:start="363:36" pos:end="363:37">||</operator> <operator pos:start="363:39" pos:end="363:39">!</operator><call pos:start="363:40" pos:end="363:59"><name pos:start="363:40" pos:end="363:46">AV_RL16</name><argument_list pos:start="363:47" pos:end="363:59">(<argument pos:start="363:48" pos:end="363:58"><expr pos:start="363:48" pos:end="363:58"><operator pos:start="363:48" pos:end="363:48">&amp;</operator><name pos:start="363:49" pos:end="363:58"><name pos:start="363:49" pos:end="363:55">scratch</name><index pos:start="363:56" pos:end="363:58">[<expr pos:start="363:57" pos:end="363:57"><literal type="number" pos:start="363:57" pos:end="363:57">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="363:62" pos:end="367:13">{<block_content pos:start="365:17" pos:end="365:33">

                <expr_stmt pos:start="365:17" pos:end="365:33"><expr pos:start="365:17" pos:end="365:32"><name pos:start="365:17" pos:end="365:28"><name pos:start="365:17" pos:end="365:17">s</name><operator pos:start="365:18" pos:end="365:19">-&gt;</operator><name pos:start="365:20" pos:end="365:28">video_bpp</name></name> <operator pos:start="365:30" pos:end="365:30">=</operator> <literal type="number" pos:start="365:32" pos:end="365:32">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="367:15" pos:end="371:13">else <block pos:start="367:20" pos:end="371:13">{<block_content pos:start="369:17" pos:end="369:34">

                <expr_stmt pos:start="369:17" pos:end="369:34"><expr pos:start="369:17" pos:end="369:33"><name pos:start="369:17" pos:end="369:28"><name pos:start="369:17" pos:end="369:17">s</name><operator pos:start="369:18" pos:end="369:19">-&gt;</operator><name pos:start="369:20" pos:end="369:28">video_bpp</name></name> <operator pos:start="369:30" pos:end="369:30">=</operator> <literal type="number" pos:start="369:32" pos:end="369:33">16</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="373:13" pos:end="375:53"><expr pos:start="373:13" pos:end="375:52"><call pos:start="373:13" pos:end="375:52"><name pos:start="373:13" pos:end="373:18">av_log</name><argument_list pos:start="373:19" pos:end="375:52">(<argument pos:start="373:20" pos:end="373:25"><expr pos:start="373:20" pos:end="373:25"><name pos:start="373:20" pos:end="373:25"><name pos:start="373:20" pos:end="373:20">s</name><operator pos:start="373:21" pos:end="373:22">-&gt;</operator><name pos:start="373:23" pos:end="373:25">avf</name></name></expr></argument>, <argument pos:start="373:28" pos:end="373:39"><expr pos:start="373:28" pos:end="373:39"><name pos:start="373:28" pos:end="373:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="373:42" pos:end="373:70"><expr pos:start="373:42" pos:end="373:70"><literal type="string" pos:start="373:42" pos:end="373:70">"video resolution: %d x %d\n"</literal></expr></argument>,

                    <argument pos:start="375:21" pos:end="375:34"><expr pos:start="375:21" pos:end="375:34"><name pos:start="375:21" pos:end="375:34"><name pos:start="375:21" pos:end="375:21">s</name><operator pos:start="375:22" pos:end="375:23">-&gt;</operator><name pos:start="375:24" pos:end="375:34">video_width</name></name></expr></argument>, <argument pos:start="375:37" pos:end="375:51"><expr pos:start="375:37" pos:end="375:51"><name pos:start="375:37" pos:end="375:51"><name pos:start="375:37" pos:end="375:37">s</name><operator pos:start="375:38" pos:end="375:39">-&gt;</operator><name pos:start="375:40" pos:end="375:51">video_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="377:13" pos:end="377:18">break;</break>



        <case pos:start="381:9" pos:end="381:31">case <expr pos:start="381:14" pos:end="381:30"><name pos:start="381:14" pos:end="381:30">OPCODE_UNKNOWN_06</name></expr>:</case>

        <case pos:start="383:9" pos:end="383:31">case <expr pos:start="383:14" pos:end="383:30"><name pos:start="383:14" pos:end="383:30">OPCODE_UNKNOWN_0E</name></expr>:</case>

        <case pos:start="385:9" pos:end="385:31">case <expr pos:start="385:14" pos:end="385:30"><name pos:start="385:14" pos:end="385:30">OPCODE_UNKNOWN_10</name></expr>:</case>

        <case pos:start="387:9" pos:end="387:31">case <expr pos:start="387:14" pos:end="387:30"><name pos:start="387:14" pos:end="387:30">OPCODE_UNKNOWN_12</name></expr>:</case>

        <case pos:start="389:9" pos:end="389:31">case <expr pos:start="389:14" pos:end="389:30"><name pos:start="389:14" pos:end="389:30">OPCODE_UNKNOWN_13</name></expr>:</case>

        <case pos:start="391:9" pos:end="391:31">case <expr pos:start="391:14" pos:end="391:30"><name pos:start="391:14" pos:end="391:30">OPCODE_UNKNOWN_14</name></expr>:</case>

        <case pos:start="393:9" pos:end="393:31">case <expr pos:start="393:14" pos:end="393:30"><name pos:start="393:14" pos:end="393:30">OPCODE_UNKNOWN_15</name></expr>:</case>

            <expr_stmt pos:start="395:13" pos:end="395:96"><expr pos:start="395:13" pos:end="395:95"><call pos:start="395:13" pos:end="395:95"><name pos:start="395:13" pos:end="395:18">av_log</name><argument_list pos:start="395:19" pos:end="395:95">(<argument pos:start="395:20" pos:end="395:25"><expr pos:start="395:20" pos:end="395:25"><name pos:start="395:20" pos:end="395:25"><name pos:start="395:20" pos:end="395:20">s</name><operator pos:start="395:21" pos:end="395:22">-&gt;</operator><name pos:start="395:23" pos:end="395:25">avf</name></name></expr></argument>, <argument pos:start="395:28" pos:end="395:39"><expr pos:start="395:28" pos:end="395:39"><name pos:start="395:28" pos:end="395:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="395:42" pos:end="395:81"><expr pos:start="395:42" pos:end="395:81"><literal type="string" pos:start="395:42" pos:end="395:81">"unknown (but documented) opcode %02X\n"</literal></expr></argument>, <argument pos:start="395:84" pos:end="395:94"><expr pos:start="395:84" pos:end="395:94"><name pos:start="395:84" pos:end="395:94">opcode_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:39"><expr pos:start="397:13" pos:end="397:38"><call pos:start="397:13" pos:end="397:38"><name pos:start="397:13" pos:end="397:21">avio_skip</name><argument_list pos:start="397:22" pos:end="397:38">(<argument pos:start="397:23" pos:end="397:24"><expr pos:start="397:23" pos:end="397:24"><name pos:start="397:23" pos:end="397:24">pb</name></expr></argument>, <argument pos:start="397:27" pos:end="397:37"><expr pos:start="397:27" pos:end="397:37"><name pos:start="397:27" pos:end="397:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="399:13" pos:end="399:18">break;</break>



        <case pos:start="403:9" pos:end="403:32">case <expr pos:start="403:14" pos:end="403:31"><name pos:start="403:14" pos:end="403:31">OPCODE_SEND_BUFFER</name></expr>:</case>

            <expr_stmt pos:start="405:13" pos:end="405:58"><expr pos:start="405:13" pos:end="405:57"><call pos:start="405:13" pos:end="405:57"><name pos:start="405:13" pos:end="405:18">av_log</name><argument_list pos:start="405:19" pos:end="405:57">(<argument pos:start="405:20" pos:end="405:25"><expr pos:start="405:20" pos:end="405:25"><name pos:start="405:20" pos:end="405:25"><name pos:start="405:20" pos:end="405:20">s</name><operator pos:start="405:21" pos:end="405:22">-&gt;</operator><name pos:start="405:23" pos:end="405:25">avf</name></name></expr></argument>, <argument pos:start="405:28" pos:end="405:39"><expr pos:start="405:28" pos:end="405:39"><name pos:start="405:28" pos:end="405:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="405:42" pos:end="405:56"><expr pos:start="405:42" pos:end="405:56"><literal type="string" pos:start="405:42" pos:end="405:56">"send buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="407:13" pos:end="407:39"><expr pos:start="407:13" pos:end="407:38"><call pos:start="407:13" pos:end="407:38"><name pos:start="407:13" pos:end="407:21">avio_skip</name><argument_list pos:start="407:22" pos:end="407:38">(<argument pos:start="407:23" pos:end="407:24"><expr pos:start="407:23" pos:end="407:24"><name pos:start="407:23" pos:end="407:24">pb</name></expr></argument>, <argument pos:start="407:27" pos:end="407:37"><expr pos:start="407:27" pos:end="407:37"><name pos:start="407:27" pos:end="407:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:31"><expr pos:start="409:13" pos:end="409:30"><name pos:start="409:13" pos:end="409:26"><name pos:start="409:13" pos:end="409:13">s</name><operator pos:start="409:14" pos:end="409:15">-&gt;</operator><name pos:start="409:16" pos:end="409:26">send_buffer</name></name> <operator pos:start="409:28" pos:end="409:28">=</operator> <literal type="number" pos:start="409:30" pos:end="409:30">1</literal></expr>;</expr_stmt>

            <break pos:start="411:13" pos:end="411:18">break;</break>



        <case pos:start="415:9" pos:end="415:32">case <expr pos:start="415:14" pos:end="415:31"><name pos:start="415:14" pos:end="415:31">OPCODE_AUDIO_FRAME</name></expr>:</case>

            <expr_stmt pos:start="417:13" pos:end="417:58"><expr pos:start="417:13" pos:end="417:57"><call pos:start="417:13" pos:end="417:57"><name pos:start="417:13" pos:end="417:18">av_log</name><argument_list pos:start="417:19" pos:end="417:57">(<argument pos:start="417:20" pos:end="417:25"><expr pos:start="417:20" pos:end="417:25"><name pos:start="417:20" pos:end="417:25"><name pos:start="417:20" pos:end="417:20">s</name><operator pos:start="417:21" pos:end="417:22">-&gt;</operator><name pos:start="417:23" pos:end="417:25">avf</name></name></expr></argument>, <argument pos:start="417:28" pos:end="417:39"><expr pos:start="417:28" pos:end="417:39"><name pos:start="417:28" pos:end="417:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="417:42" pos:end="417:56"><expr pos:start="417:42" pos:end="417:56"><literal type="string" pos:start="417:42" pos:end="417:56">"audio frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="421:13" pos:end="421:50">/* log position and move on for now */</comment>

            <expr_stmt pos:start="423:13" pos:end="423:50"><expr pos:start="423:13" pos:end="423:49"><name pos:start="423:13" pos:end="423:33"><name pos:start="423:13" pos:end="423:13">s</name><operator pos:start="423:14" pos:end="423:15">-&gt;</operator><name pos:start="423:16" pos:end="423:33">audio_chunk_offset</name></name> <operator pos:start="423:35" pos:end="423:35">=</operator> <call pos:start="423:37" pos:end="423:49"><name pos:start="423:37" pos:end="423:45">avio_tell</name><argument_list pos:start="423:46" pos:end="423:49">(<argument pos:start="423:47" pos:end="423:48"><expr pos:start="423:47" pos:end="423:48"><name pos:start="423:47" pos:end="423:48">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:46"><expr pos:start="425:13" pos:end="425:45"><name pos:start="425:13" pos:end="425:31"><name pos:start="425:13" pos:end="425:13">s</name><operator pos:start="425:14" pos:end="425:15">-&gt;</operator><name pos:start="425:16" pos:end="425:31">audio_chunk_size</name></name> <operator pos:start="425:33" pos:end="425:33">=</operator> <name pos:start="425:35" pos:end="425:45">opcode_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:39"><expr pos:start="427:13" pos:end="427:38"><call pos:start="427:13" pos:end="427:38"><name pos:start="427:13" pos:end="427:21">avio_skip</name><argument_list pos:start="427:22" pos:end="427:38">(<argument pos:start="427:23" pos:end="427:24"><expr pos:start="427:23" pos:end="427:24"><name pos:start="427:23" pos:end="427:24">pb</name></expr></argument>, <argument pos:start="427:27" pos:end="427:37"><expr pos:start="427:27" pos:end="427:37"><name pos:start="427:27" pos:end="427:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="429:13" pos:end="429:18">break;</break>



        <case pos:start="433:9" pos:end="433:34">case <expr pos:start="433:14" pos:end="433:33"><name pos:start="433:14" pos:end="433:33">OPCODE_SILENCE_FRAME</name></expr>:</case>

            <expr_stmt pos:start="435:13" pos:end="435:60"><expr pos:start="435:13" pos:end="435:59"><call pos:start="435:13" pos:end="435:59"><name pos:start="435:13" pos:end="435:18">av_log</name><argument_list pos:start="435:19" pos:end="435:59">(<argument pos:start="435:20" pos:end="435:25"><expr pos:start="435:20" pos:end="435:25"><name pos:start="435:20" pos:end="435:25"><name pos:start="435:20" pos:end="435:20">s</name><operator pos:start="435:21" pos:end="435:22">-&gt;</operator><name pos:start="435:23" pos:end="435:25">avf</name></name></expr></argument>, <argument pos:start="435:28" pos:end="435:39"><expr pos:start="435:28" pos:end="435:39"><name pos:start="435:28" pos:end="435:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="435:42" pos:end="435:58"><expr pos:start="435:42" pos:end="435:58"><literal type="string" pos:start="435:42" pos:end="435:58">"silence frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:39"><expr pos:start="437:13" pos:end="437:38"><call pos:start="437:13" pos:end="437:38"><name pos:start="437:13" pos:end="437:21">avio_skip</name><argument_list pos:start="437:22" pos:end="437:38">(<argument pos:start="437:23" pos:end="437:24"><expr pos:start="437:23" pos:end="437:24"><name pos:start="437:23" pos:end="437:24">pb</name></expr></argument>, <argument pos:start="437:27" pos:end="437:37"><expr pos:start="437:27" pos:end="437:37"><name pos:start="437:27" pos:end="437:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="439:13" pos:end="439:18">break;</break>



        <case pos:start="443:9" pos:end="443:36">case <expr pos:start="443:14" pos:end="443:35"><name pos:start="443:14" pos:end="443:35">OPCODE_INIT_VIDEO_MODE</name></expr>:</case>

            <expr_stmt pos:start="445:13" pos:end="445:68"><expr pos:start="445:13" pos:end="445:67"><call pos:start="445:13" pos:end="445:67"><name pos:start="445:13" pos:end="445:18">av_log</name><argument_list pos:start="445:19" pos:end="445:67">(<argument pos:start="445:20" pos:end="445:25"><expr pos:start="445:20" pos:end="445:25"><name pos:start="445:20" pos:end="445:25"><name pos:start="445:20" pos:end="445:20">s</name><operator pos:start="445:21" pos:end="445:22">-&gt;</operator><name pos:start="445:23" pos:end="445:25">avf</name></name></expr></argument>, <argument pos:start="445:28" pos:end="445:39"><expr pos:start="445:28" pos:end="445:39"><name pos:start="445:28" pos:end="445:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="445:42" pos:end="445:66"><expr pos:start="445:42" pos:end="445:66"><literal type="string" pos:start="445:42" pos:end="445:66">"initialize video mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="447:13" pos:end="447:39"><expr pos:start="447:13" pos:end="447:38"><call pos:start="447:13" pos:end="447:38"><name pos:start="447:13" pos:end="447:21">avio_skip</name><argument_list pos:start="447:22" pos:end="447:38">(<argument pos:start="447:23" pos:end="447:24"><expr pos:start="447:23" pos:end="447:24"><name pos:start="447:23" pos:end="447:24">pb</name></expr></argument>, <argument pos:start="447:27" pos:end="447:37"><expr pos:start="447:27" pos:end="447:37"><name pos:start="447:27" pos:end="447:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="449:13" pos:end="449:18">break;</break>



        <case pos:start="453:9" pos:end="453:36">case <expr pos:start="453:14" pos:end="453:35"><name pos:start="453:14" pos:end="453:35">OPCODE_CREATE_GRADIENT</name></expr>:</case>

            <expr_stmt pos:start="455:13" pos:end="455:62"><expr pos:start="455:13" pos:end="455:61"><call pos:start="455:13" pos:end="455:61"><name pos:start="455:13" pos:end="455:18">av_log</name><argument_list pos:start="455:19" pos:end="455:61">(<argument pos:start="455:20" pos:end="455:25"><expr pos:start="455:20" pos:end="455:25"><name pos:start="455:20" pos:end="455:25"><name pos:start="455:20" pos:end="455:20">s</name><operator pos:start="455:21" pos:end="455:22">-&gt;</operator><name pos:start="455:23" pos:end="455:25">avf</name></name></expr></argument>, <argument pos:start="455:28" pos:end="455:39"><expr pos:start="455:28" pos:end="455:39"><name pos:start="455:28" pos:end="455:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="455:42" pos:end="455:60"><expr pos:start="455:42" pos:end="455:60"><literal type="string" pos:start="455:42" pos:end="455:60">"create gradient\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:39"><expr pos:start="457:13" pos:end="457:38"><call pos:start="457:13" pos:end="457:38"><name pos:start="457:13" pos:end="457:21">avio_skip</name><argument_list pos:start="457:22" pos:end="457:38">(<argument pos:start="457:23" pos:end="457:24"><expr pos:start="457:23" pos:end="457:24"><name pos:start="457:23" pos:end="457:24">pb</name></expr></argument>, <argument pos:start="457:27" pos:end="457:37"><expr pos:start="457:27" pos:end="457:37"><name pos:start="457:27" pos:end="457:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="459:13" pos:end="459:18">break;</break>



        <case pos:start="463:9" pos:end="463:32">case <expr pos:start="463:14" pos:end="463:31"><name pos:start="463:14" pos:end="463:31">OPCODE_SET_PALETTE</name></expr>:</case>

            <expr_stmt pos:start="465:13" pos:end="465:58"><expr pos:start="465:13" pos:end="465:57"><call pos:start="465:13" pos:end="465:57"><name pos:start="465:13" pos:end="465:18">av_log</name><argument_list pos:start="465:19" pos:end="465:57">(<argument pos:start="465:20" pos:end="465:25"><expr pos:start="465:20" pos:end="465:25"><name pos:start="465:20" pos:end="465:25"><name pos:start="465:20" pos:end="465:20">s</name><operator pos:start="465:21" pos:end="465:22">-&gt;</operator><name pos:start="465:23" pos:end="465:25">avf</name></name></expr></argument>, <argument pos:start="465:28" pos:end="465:39"><expr pos:start="465:28" pos:end="465:39"><name pos:start="465:28" pos:end="465:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="465:42" pos:end="465:56"><expr pos:start="465:42" pos:end="465:56"><literal type="string" pos:start="465:42" pos:end="465:56">"set palette\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="467:13" pos:end="469:37">/* check for the logical maximum palette size

             * (3 * 256 + 4 bytes) */</comment>

            <if_stmt pos:start="471:13" pos:end="479:13"><if pos:start="471:13" pos:end="479:13">if <condition pos:start="471:16" pos:end="471:55">(<expr pos:start="471:17" pos:end="471:54"><name pos:start="471:17" pos:end="471:27">opcode_size</name> <operator pos:start="471:29" pos:end="471:29">&gt;</operator> <literal type="number" pos:start="471:31" pos:end="471:35">0x304</literal> <operator pos:start="471:37" pos:end="471:38">||</operator> <name pos:start="471:40" pos:end="471:50">opcode_size</name> <operator pos:start="471:52" pos:end="471:52">&lt;</operator> <literal type="number" pos:start="471:54" pos:end="471:54">4</literal></expr>)</condition> <block pos:start="471:57" pos:end="479:13">{<block_content pos:start="473:17" pos:end="477:22">

                <expr_stmt pos:start="473:17" pos:end="473:102"><expr pos:start="473:17" pos:end="473:101"><call pos:start="473:17" pos:end="473:101"><name pos:start="473:17" pos:end="473:22">av_log</name><argument_list pos:start="473:23" pos:end="473:101">(<argument pos:start="473:24" pos:end="473:29"><expr pos:start="473:24" pos:end="473:29"><name pos:start="473:24" pos:end="473:29"><name pos:start="473:24" pos:end="473:24">s</name><operator pos:start="473:25" pos:end="473:26">-&gt;</operator><name pos:start="473:27" pos:end="473:29">avf</name></name></expr></argument>, <argument pos:start="473:32" pos:end="473:43"><expr pos:start="473:32" pos:end="473:43"><name pos:start="473:32" pos:end="473:43">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="473:46" pos:end="473:100"><expr pos:start="473:46" pos:end="473:100"><literal type="string" pos:start="473:46" pos:end="473:100">"demux_ipmovie: set_palette opcode with invalid size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="475:17" pos:end="475:39"><expr pos:start="475:17" pos:end="475:38"><name pos:start="475:17" pos:end="475:26">chunk_type</name> <operator pos:start="475:28" pos:end="475:28">=</operator> <name pos:start="475:30" pos:end="475:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="477:17" pos:end="477:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="481:13" pos:end="487:13"><if pos:start="481:13" pos:end="487:13">if <condition pos:start="481:16" pos:end="481:67">(<expr pos:start="481:17" pos:end="481:66"><call pos:start="481:17" pos:end="481:51"><name pos:start="481:17" pos:end="481:25">avio_read</name><argument_list pos:start="481:26" pos:end="481:51">(<argument pos:start="481:27" pos:end="481:28"><expr pos:start="481:27" pos:end="481:28"><name pos:start="481:27" pos:end="481:28">pb</name></expr></argument>, <argument pos:start="481:31" pos:end="481:37"><expr pos:start="481:31" pos:end="481:37"><name pos:start="481:31" pos:end="481:37">scratch</name></expr></argument>, <argument pos:start="481:40" pos:end="481:50"><expr pos:start="481:40" pos:end="481:50"><name pos:start="481:40" pos:end="481:50">opcode_size</name></expr></argument>)</argument_list></call> <operator pos:start="481:53" pos:end="481:54">!=</operator> <name pos:start="481:56" pos:end="481:66">opcode_size</name></expr>)</condition> <block pos:start="481:69" pos:end="487:13">{<block_content pos:start="483:17" pos:end="485:22">

                <expr_stmt pos:start="483:17" pos:end="483:39"><expr pos:start="483:17" pos:end="483:38"><name pos:start="483:17" pos:end="483:26">chunk_type</name> <operator pos:start="483:28" pos:end="483:28">=</operator> <name pos:start="483:30" pos:end="483:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="485:17" pos:end="485:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="491:13" pos:end="491:63">/* load the palette into internal data structure */</comment>

            <expr_stmt pos:start="493:13" pos:end="493:47"><expr pos:start="493:13" pos:end="493:46"><name pos:start="493:13" pos:end="493:23">first_color</name> <operator pos:start="493:25" pos:end="493:25">=</operator> <call pos:start="493:27" pos:end="493:46"><name pos:start="493:27" pos:end="493:33">AV_RL16</name><argument_list pos:start="493:34" pos:end="493:46">(<argument pos:start="493:35" pos:end="493:45"><expr pos:start="493:35" pos:end="493:45"><operator pos:start="493:35" pos:end="493:35">&amp;</operator><name pos:start="493:36" pos:end="493:45"><name pos:start="493:36" pos:end="493:42">scratch</name><index pos:start="493:43" pos:end="493:45">[<expr pos:start="493:44" pos:end="493:44"><literal type="number" pos:start="493:44" pos:end="493:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:64"><expr pos:start="495:13" pos:end="495:63"><name pos:start="495:13" pos:end="495:22">last_color</name> <operator pos:start="495:24" pos:end="495:24">=</operator> <name pos:start="495:26" pos:end="495:36">first_color</name> <operator pos:start="495:38" pos:end="495:38">+</operator> <call pos:start="495:40" pos:end="495:59"><name pos:start="495:40" pos:end="495:46">AV_RL16</name><argument_list pos:start="495:47" pos:end="495:59">(<argument pos:start="495:48" pos:end="495:58"><expr pos:start="495:48" pos:end="495:58"><operator pos:start="495:48" pos:end="495:48">&amp;</operator><name pos:start="495:49" pos:end="495:58"><name pos:start="495:49" pos:end="495:55">scratch</name><index pos:start="495:56" pos:end="495:58">[<expr pos:start="495:57" pos:end="495:57"><literal type="number" pos:start="495:57" pos:end="495:57">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="495:61" pos:end="495:61">-</operator> <literal type="number" pos:start="495:63" pos:end="495:63">1</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="497:13" pos:end="497:61">/* sanity check (since they are 16 bit values) */</comment>

            <if_stmt pos:start="499:13" pos:end="511:13"><if pos:start="499:13" pos:end="511:13">if <condition pos:start="499:16" pos:end="501:70">(   <expr pos:start="499:20" pos:end="501:69"><operator pos:start="499:20" pos:end="499:20">(</operator><name pos:start="499:21" pos:end="499:31">first_color</name> <operator pos:start="499:33" pos:end="499:33">&gt;</operator> <literal type="number" pos:start="499:35" pos:end="499:38">0xFF</literal><operator pos:start="499:39" pos:end="499:39">)</operator> <operator pos:start="499:41" pos:end="499:42">||</operator> <operator pos:start="499:44" pos:end="499:44">(</operator><name pos:start="499:45" pos:end="499:54">last_color</name> <operator pos:start="499:56" pos:end="499:56">&gt;</operator> <literal type="number" pos:start="499:58" pos:end="499:61">0xFF</literal><operator pos:start="499:62" pos:end="499:62">)</operator>

                <operator pos:start="501:17" pos:end="501:18">||</operator> <operator pos:start="501:20" pos:end="501:20">(</operator><name pos:start="501:21" pos:end="501:30">last_color</name> <operator pos:start="501:32" pos:end="501:32">-</operator> <name pos:start="501:34" pos:end="501:44">first_color</name> <operator pos:start="501:46" pos:end="501:46">+</operator> <literal type="number" pos:start="501:48" pos:end="501:48">1</literal><operator pos:start="501:49" pos:end="501:49">)</operator><operator pos:start="501:50" pos:end="501:50">*</operator><literal type="number" pos:start="501:51" pos:end="501:53">3</literal> <operator pos:start="501:53" pos:end="501:53">+</operator> <literal type="number" pos:start="501:55" pos:end="501:55">4</literal> <operator pos:start="501:57" pos:end="501:57">&gt;</operator> <name pos:start="501:59" pos:end="501:69">opcode_size</name></expr>)</condition> <block pos:start="501:72" pos:end="511:13">{<block_content pos:start="503:17" pos:end="509:22">

                <expr_stmt pos:start="503:17" pos:end="505:45"><expr pos:start="503:17" pos:end="505:44"><call pos:start="503:17" pos:end="505:44"><name pos:start="503:17" pos:end="503:22">av_log</name><argument_list pos:start="503:23" pos:end="505:44">(<argument pos:start="503:24" pos:end="503:29"><expr pos:start="503:24" pos:end="503:29"><name pos:start="503:24" pos:end="503:29"><name pos:start="503:24" pos:end="503:24">s</name><operator pos:start="503:25" pos:end="503:26">-&gt;</operator><name pos:start="503:27" pos:end="503:29">avf</name></name></expr></argument>, <argument pos:start="503:32" pos:end="503:43"><expr pos:start="503:32" pos:end="503:43"><name pos:start="503:32" pos:end="503:43">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="503:46" pos:end="503:107"><expr pos:start="503:46" pos:end="503:107"><literal type="string" pos:start="503:46" pos:end="503:107">"demux_ipmovie: set_palette indexes out of range (%d -&gt; %d)\n"</literal></expr></argument>,

                    <argument pos:start="505:21" pos:end="505:31"><expr pos:start="505:21" pos:end="505:31"><name pos:start="505:21" pos:end="505:31">first_color</name></expr></argument>, <argument pos:start="505:34" pos:end="505:43"><expr pos:start="505:34" pos:end="505:43"><name pos:start="505:34" pos:end="505:43">last_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="507:17" pos:end="507:39"><expr pos:start="507:17" pos:end="507:38"><name pos:start="507:17" pos:end="507:26">chunk_type</name> <operator pos:start="507:28" pos:end="507:28">=</operator> <name pos:start="507:30" pos:end="507:38">CHUNK_BAD</name></expr>;</expr_stmt>

                <break pos:start="509:17" pos:end="509:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:18"><expr pos:start="513:13" pos:end="513:17"><name pos:start="513:13" pos:end="513:13">j</name> <operator pos:start="513:15" pos:end="513:15">=</operator> <literal type="number" pos:start="513:17" pos:end="513:17">4</literal></expr>;</expr_stmt>  <comment type="block" pos:start="513:21" pos:end="513:54">/* offset of first palette data */</comment>

            <for pos:start="515:13" pos:end="531:13">for <control pos:start="515:17" pos:end="515:55">(<init pos:start="515:18" pos:end="515:33"><expr pos:start="515:18" pos:end="515:32"><name pos:start="515:18" pos:end="515:18">i</name> <operator pos:start="515:20" pos:end="515:20">=</operator> <name pos:start="515:22" pos:end="515:32">first_color</name></expr>;</init> <condition pos:start="515:35" pos:end="515:50"><expr pos:start="515:35" pos:end="515:49"><name pos:start="515:35" pos:end="515:35">i</name> <operator pos:start="515:37" pos:end="515:38">&lt;=</operator> <name pos:start="515:40" pos:end="515:49">last_color</name></expr>;</condition> <incr pos:start="515:52" pos:end="515:54"><expr pos:start="515:52" pos:end="515:54"><name pos:start="515:52" pos:end="515:52">i</name><operator pos:start="515:53" pos:end="515:54">++</operator></expr></incr>)</control> <block pos:start="515:57" pos:end="531:13">{<block_content pos:start="521:17" pos:end="529:62">

                <comment type="block" pos:start="517:17" pos:end="519:62">/* the palette is stored as a 6-bit VGA palette, thus each

                 * component is shifted up to a 8-bit range */</comment>

                <expr_stmt pos:start="521:17" pos:end="521:37"><expr pos:start="521:17" pos:end="521:36"><name pos:start="521:17" pos:end="521:17">r</name> <operator pos:start="521:19" pos:end="521:19">=</operator> <name pos:start="521:21" pos:end="521:32"><name pos:start="521:21" pos:end="521:27">scratch</name><index pos:start="521:28" pos:end="521:32">[<expr pos:start="521:29" pos:end="521:31"><name pos:start="521:29" pos:end="521:29">j</name><operator pos:start="521:30" pos:end="521:31">++</operator></expr>]</index></name> <operator pos:start="521:34" pos:end="521:34">*</operator> <literal type="number" pos:start="521:36" pos:end="521:36">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:37"><expr pos:start="523:17" pos:end="523:36"><name pos:start="523:17" pos:end="523:17">g</name> <operator pos:start="523:19" pos:end="523:19">=</operator> <name pos:start="523:21" pos:end="523:32"><name pos:start="523:21" pos:end="523:27">scratch</name><index pos:start="523:28" pos:end="523:32">[<expr pos:start="523:29" pos:end="523:31"><name pos:start="523:29" pos:end="523:29">j</name><operator pos:start="523:30" pos:end="523:31">++</operator></expr>]</index></name> <operator pos:start="523:34" pos:end="523:34">*</operator> <literal type="number" pos:start="523:36" pos:end="523:36">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="525:17" pos:end="525:37"><expr pos:start="525:17" pos:end="525:36"><name pos:start="525:17" pos:end="525:17">b</name> <operator pos:start="525:19" pos:end="525:19">=</operator> <name pos:start="525:21" pos:end="525:32"><name pos:start="525:21" pos:end="525:27">scratch</name><index pos:start="525:28" pos:end="525:32">[<expr pos:start="525:29" pos:end="525:31"><name pos:start="525:29" pos:end="525:29">j</name><operator pos:start="525:30" pos:end="525:31">++</operator></expr>]</index></name> <operator pos:start="525:34" pos:end="525:34">*</operator> <literal type="number" pos:start="525:36" pos:end="525:36">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="527:17" pos:end="527:75"><expr pos:start="527:17" pos:end="527:74"><name pos:start="527:17" pos:end="527:29"><name pos:start="527:17" pos:end="527:17">s</name><operator pos:start="527:18" pos:end="527:19">-&gt;</operator><name pos:start="527:20" pos:end="527:26">palette</name><index pos:start="527:27" pos:end="527:29">[<expr pos:start="527:28" pos:end="527:28"><name pos:start="527:28" pos:end="527:28">i</name></expr>]</index></name> <operator pos:start="527:31" pos:end="527:31">=</operator> <operator pos:start="527:33" pos:end="527:33">(</operator><literal type="number" pos:start="527:34" pos:end="527:38">0xFFU</literal> <operator pos:start="527:40" pos:end="527:41">&lt;&lt;</operator> <literal type="number" pos:start="527:43" pos:end="527:44">24</literal><operator pos:start="527:45" pos:end="527:45">)</operator> <operator pos:start="527:47" pos:end="527:47">|</operator> <operator pos:start="527:49" pos:end="527:49">(</operator><name pos:start="527:50" pos:end="527:50">r</name> <operator pos:start="527:52" pos:end="527:53">&lt;&lt;</operator> <literal type="number" pos:start="527:55" pos:end="527:56">16</literal><operator pos:start="527:57" pos:end="527:57">)</operator> <operator pos:start="527:59" pos:end="527:59">|</operator> <operator pos:start="527:61" pos:end="527:61">(</operator><name pos:start="527:62" pos:end="527:62">g</name> <operator pos:start="527:64" pos:end="527:65">&lt;&lt;</operator> <literal type="number" pos:start="527:67" pos:end="527:67">8</literal><operator pos:start="527:68" pos:end="527:68">)</operator> <operator pos:start="527:70" pos:end="527:70">|</operator> <operator pos:start="527:72" pos:end="527:72">(</operator><name pos:start="527:73" pos:end="527:73">b</name><operator pos:start="527:74" pos:end="527:74">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="529:17" pos:end="529:62"><expr pos:start="529:17" pos:end="529:61"><name pos:start="529:17" pos:end="529:29"><name pos:start="529:17" pos:end="529:17">s</name><operator pos:start="529:18" pos:end="529:19">-&gt;</operator><name pos:start="529:20" pos:end="529:26">palette</name><index pos:start="529:27" pos:end="529:29">[<expr pos:start="529:28" pos:end="529:28"><name pos:start="529:28" pos:end="529:28">i</name></expr>]</index></name> <operator pos:start="529:31" pos:end="529:32">|=</operator> <name pos:start="529:34" pos:end="529:46"><name pos:start="529:34" pos:end="529:34">s</name><operator pos:start="529:35" pos:end="529:36">-&gt;</operator><name pos:start="529:37" pos:end="529:43">palette</name><index pos:start="529:44" pos:end="529:46">[<expr pos:start="529:45" pos:end="529:45"><name pos:start="529:45" pos:end="529:45">i</name></expr>]</index></name> <operator pos:start="529:48" pos:end="529:49">&gt;&gt;</operator> <literal type="number" pos:start="529:51" pos:end="529:51">6</literal> <operator pos:start="529:53" pos:end="529:53">&amp;</operator> <literal type="number" pos:start="529:55" pos:end="529:61">0x30303</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="533:13" pos:end="533:31"><expr pos:start="533:13" pos:end="533:30"><name pos:start="533:13" pos:end="533:26"><name pos:start="533:13" pos:end="533:13">s</name><operator pos:start="533:14" pos:end="533:15">-&gt;</operator><name pos:start="533:16" pos:end="533:26">has_palette</name></name> <operator pos:start="533:28" pos:end="533:28">=</operator> <literal type="number" pos:start="533:30" pos:end="533:30">1</literal></expr>;</expr_stmt>

            <break pos:start="535:13" pos:end="535:18">break;</break>



        <case pos:start="539:9" pos:end="539:43">case <expr pos:start="539:14" pos:end="539:42"><name pos:start="539:14" pos:end="539:42">OPCODE_SET_PALETTE_COMPRESSED</name></expr>:</case>

            <expr_stmt pos:start="541:13" pos:end="541:69"><expr pos:start="541:13" pos:end="541:68"><call pos:start="541:13" pos:end="541:68"><name pos:start="541:13" pos:end="541:18">av_log</name><argument_list pos:start="541:19" pos:end="541:68">(<argument pos:start="541:20" pos:end="541:25"><expr pos:start="541:20" pos:end="541:25"><name pos:start="541:20" pos:end="541:25"><name pos:start="541:20" pos:end="541:20">s</name><operator pos:start="541:21" pos:end="541:22">-&gt;</operator><name pos:start="541:23" pos:end="541:25">avf</name></name></expr></argument>, <argument pos:start="541:28" pos:end="541:39"><expr pos:start="541:28" pos:end="541:39"><name pos:start="541:28" pos:end="541:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="541:42" pos:end="541:67"><expr pos:start="541:42" pos:end="541:67"><literal type="string" pos:start="541:42" pos:end="541:67">"set palette compressed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:39"><expr pos:start="543:13" pos:end="543:38"><call pos:start="543:13" pos:end="543:38"><name pos:start="543:13" pos:end="543:21">avio_skip</name><argument_list pos:start="543:22" pos:end="543:38">(<argument pos:start="543:23" pos:end="543:24"><expr pos:start="543:23" pos:end="543:24"><name pos:start="543:23" pos:end="543:24">pb</name></expr></argument>, <argument pos:start="543:27" pos:end="543:37"><expr pos:start="543:27" pos:end="543:37"><name pos:start="543:27" pos:end="543:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="545:13" pos:end="545:18">break;</break>



        <case pos:start="549:9" pos:end="549:37">case <expr pos:start="549:14" pos:end="549:36"><name pos:start="549:14" pos:end="549:36">OPCODE_SET_DECODING_MAP</name></expr>:</case>

            <expr_stmt pos:start="551:13" pos:end="551:63"><expr pos:start="551:13" pos:end="551:62"><call pos:start="551:13" pos:end="551:62"><name pos:start="551:13" pos:end="551:18">av_log</name><argument_list pos:start="551:19" pos:end="551:62">(<argument pos:start="551:20" pos:end="551:25"><expr pos:start="551:20" pos:end="551:25"><name pos:start="551:20" pos:end="551:25"><name pos:start="551:20" pos:end="551:20">s</name><operator pos:start="551:21" pos:end="551:22">-&gt;</operator><name pos:start="551:23" pos:end="551:25">avf</name></name></expr></argument>, <argument pos:start="551:28" pos:end="551:39"><expr pos:start="551:28" pos:end="551:39"><name pos:start="551:28" pos:end="551:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="551:42" pos:end="551:61"><expr pos:start="551:42" pos:end="551:61"><literal type="string" pos:start="551:42" pos:end="551:61">"set decoding map\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="555:13" pos:end="555:50">/* log position and move on for now */</comment>

            <expr_stmt pos:start="557:13" pos:end="557:55"><expr pos:start="557:13" pos:end="557:54"><name pos:start="557:13" pos:end="557:38"><name pos:start="557:13" pos:end="557:13">s</name><operator pos:start="557:14" pos:end="557:15">-&gt;</operator><name pos:start="557:16" pos:end="557:38">decode_map_chunk_offset</name></name> <operator pos:start="557:40" pos:end="557:40">=</operator> <call pos:start="557:42" pos:end="557:54"><name pos:start="557:42" pos:end="557:50">avio_tell</name><argument_list pos:start="557:51" pos:end="557:54">(<argument pos:start="557:52" pos:end="557:53"><expr pos:start="557:52" pos:end="557:53"><name pos:start="557:52" pos:end="557:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="559:13" pos:end="559:51"><expr pos:start="559:13" pos:end="559:50"><name pos:start="559:13" pos:end="559:36"><name pos:start="559:13" pos:end="559:13">s</name><operator pos:start="559:14" pos:end="559:15">-&gt;</operator><name pos:start="559:16" pos:end="559:36">decode_map_chunk_size</name></name> <operator pos:start="559:38" pos:end="559:38">=</operator> <name pos:start="559:40" pos:end="559:50">opcode_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="561:13" pos:end="561:39"><expr pos:start="561:13" pos:end="561:38"><call pos:start="561:13" pos:end="561:38"><name pos:start="561:13" pos:end="561:21">avio_skip</name><argument_list pos:start="561:22" pos:end="561:38">(<argument pos:start="561:23" pos:end="561:24"><expr pos:start="561:23" pos:end="561:24"><name pos:start="561:23" pos:end="561:24">pb</name></expr></argument>, <argument pos:start="561:27" pos:end="561:37"><expr pos:start="561:27" pos:end="561:37"><name pos:start="561:27" pos:end="561:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="563:13" pos:end="563:18">break;</break>



        <case pos:start="567:9" pos:end="567:34">case <expr pos:start="567:14" pos:end="567:33"><name pos:start="567:14" pos:end="567:33">OPCODE_VIDEO_DATA_11</name></expr>:</case>

            <expr_stmt pos:start="569:13" pos:end="569:61"><expr pos:start="569:13" pos:end="569:60"><call pos:start="569:13" pos:end="569:60"><name pos:start="569:13" pos:end="569:18">av_log</name><argument_list pos:start="569:19" pos:end="569:60">(<argument pos:start="569:20" pos:end="569:25"><expr pos:start="569:20" pos:end="569:25"><name pos:start="569:20" pos:end="569:25"><name pos:start="569:20" pos:end="569:20">s</name><operator pos:start="569:21" pos:end="569:22">-&gt;</operator><name pos:start="569:23" pos:end="569:25">avf</name></name></expr></argument>, <argument pos:start="569:28" pos:end="569:39"><expr pos:start="569:28" pos:end="569:39"><name pos:start="569:28" pos:end="569:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="569:42" pos:end="569:59"><expr pos:start="569:42" pos:end="569:59"><literal type="string" pos:start="569:42" pos:end="569:59">"set video data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:35"><expr pos:start="571:13" pos:end="571:34"><name pos:start="571:13" pos:end="571:27"><name pos:start="571:13" pos:end="571:13">s</name><operator pos:start="571:14" pos:end="571:15">-&gt;</operator><name pos:start="571:16" pos:end="571:27">frame_format</name></name> <operator pos:start="571:29" pos:end="571:29">=</operator> <literal type="number" pos:start="571:31" pos:end="571:34">0x11</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="575:13" pos:end="575:50">/* log position and move on for now */</comment>

            <expr_stmt pos:start="577:13" pos:end="577:50"><expr pos:start="577:13" pos:end="577:49"><name pos:start="577:13" pos:end="577:33"><name pos:start="577:13" pos:end="577:13">s</name><operator pos:start="577:14" pos:end="577:15">-&gt;</operator><name pos:start="577:16" pos:end="577:33">video_chunk_offset</name></name> <operator pos:start="577:35" pos:end="577:35">=</operator> <call pos:start="577:37" pos:end="577:49"><name pos:start="577:37" pos:end="577:45">avio_tell</name><argument_list pos:start="577:46" pos:end="577:49">(<argument pos:start="577:47" pos:end="577:48"><expr pos:start="577:47" pos:end="577:48"><name pos:start="577:47" pos:end="577:48">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:46"><expr pos:start="579:13" pos:end="579:45"><name pos:start="579:13" pos:end="579:31"><name pos:start="579:13" pos:end="579:13">s</name><operator pos:start="579:14" pos:end="579:15">-&gt;</operator><name pos:start="579:16" pos:end="579:31">video_chunk_size</name></name> <operator pos:start="579:33" pos:end="579:33">=</operator> <name pos:start="579:35" pos:end="579:45">opcode_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:39"><expr pos:start="581:13" pos:end="581:38"><call pos:start="581:13" pos:end="581:38"><name pos:start="581:13" pos:end="581:21">avio_skip</name><argument_list pos:start="581:22" pos:end="581:38">(<argument pos:start="581:23" pos:end="581:24"><expr pos:start="581:23" pos:end="581:24"><name pos:start="581:23" pos:end="581:24">pb</name></expr></argument>, <argument pos:start="581:27" pos:end="581:37"><expr pos:start="581:27" pos:end="581:37"><name pos:start="581:27" pos:end="581:37">opcode_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="583:13" pos:end="583:18">break;</break>



        <default pos:start="587:9" pos:end="587:16">default:</default>

            <expr_stmt pos:start="589:13" pos:end="589:70"><expr pos:start="589:13" pos:end="589:69"><call pos:start="589:13" pos:end="589:69"><name pos:start="589:13" pos:end="589:18">av_log</name><argument_list pos:start="589:19" pos:end="589:69">(<argument pos:start="589:20" pos:end="589:25"><expr pos:start="589:20" pos:end="589:25"><name pos:start="589:20" pos:end="589:25"><name pos:start="589:20" pos:end="589:20">s</name><operator pos:start="589:21" pos:end="589:22">-&gt;</operator><name pos:start="589:23" pos:end="589:25">avf</name></name></expr></argument>, <argument pos:start="589:28" pos:end="589:39"><expr pos:start="589:28" pos:end="589:39"><name pos:start="589:28" pos:end="589:39">AV_LOG_TRACE</name></expr></argument>, <argument pos:start="589:42" pos:end="589:68"><expr pos:start="589:42" pos:end="589:68"><literal type="string" pos:start="589:42" pos:end="589:68">"*** unknown opcode type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="591:13" pos:end="591:35"><expr pos:start="591:13" pos:end="591:34"><name pos:start="591:13" pos:end="591:22">chunk_type</name> <operator pos:start="591:24" pos:end="591:24">=</operator> <name pos:start="591:26" pos:end="591:34">CHUNK_BAD</name></expr>;</expr_stmt>

            <break pos:start="593:13" pos:end="593:18">break;</break>



        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="603:5" pos:end="605:27"><if pos:start="603:5" pos:end="605:27">if <condition pos:start="603:8" pos:end="603:49">(<expr pos:start="603:9" pos:end="603:48"><name pos:start="603:9" pos:end="603:26"><name pos:start="603:9" pos:end="603:9">s</name><operator pos:start="603:10" pos:end="603:11">-&gt;</operator><name pos:start="603:12" pos:end="603:14">avf</name><operator pos:start="603:15" pos:end="603:16">-&gt;</operator><name pos:start="603:17" pos:end="603:26">nb_streams</name></name> <operator pos:start="603:28" pos:end="603:29">==</operator> <literal type="number" pos:start="603:31" pos:end="603:31">1</literal> <operator pos:start="603:33" pos:end="603:34">&amp;&amp;</operator> <name pos:start="603:36" pos:end="603:48"><name pos:start="603:36" pos:end="603:36">s</name><operator pos:start="603:37" pos:end="603:38">-&gt;</operator><name pos:start="603:39" pos:end="603:48">audio_type</name></name></expr>)</condition><block type="pseudo" pos:start="605:9" pos:end="605:27"><block_content pos:start="605:9" pos:end="605:27">

        <expr_stmt pos:start="605:9" pos:end="605:27"><expr pos:start="605:9" pos:end="605:26"><call pos:start="605:9" pos:end="605:26"><name pos:start="605:9" pos:end="605:18">init_audio</name><argument_list pos:start="605:19" pos:end="605:26">(<argument pos:start="605:20" pos:end="605:25"><expr pos:start="605:20" pos:end="605:25"><name pos:start="605:20" pos:end="605:25"><name pos:start="605:20" pos:end="605:20">s</name><operator pos:start="605:21" pos:end="605:22">-&gt;</operator><name pos:start="605:23" pos:end="605:25">avf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="609:5" pos:end="609:52">/* make a note of where the stream is sitting */</comment>

    <expr_stmt pos:start="611:5" pos:end="611:41"><expr pos:start="611:5" pos:end="611:40"><name pos:start="611:5" pos:end="611:24"><name pos:start="611:5" pos:end="611:5">s</name><operator pos:start="611:6" pos:end="611:7">-&gt;</operator><name pos:start="611:8" pos:end="611:24">next_chunk_offset</name></name> <operator pos:start="611:26" pos:end="611:26">=</operator> <call pos:start="611:28" pos:end="611:40"><name pos:start="611:28" pos:end="611:36">avio_tell</name><argument_list pos:start="611:37" pos:end="611:40">(<argument pos:start="611:38" pos:end="611:39"><expr pos:start="611:38" pos:end="611:39"><name pos:start="611:38" pos:end="611:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="615:5" pos:end="615:51">/* dispatch the first of any pending packets */</comment>

    <if_stmt pos:start="617:5" pos:end="619:53"><if pos:start="617:5" pos:end="619:53">if <condition pos:start="617:8" pos:end="617:72">(<expr pos:start="617:9" pos:end="617:71"><operator pos:start="617:9" pos:end="617:9">(</operator><name pos:start="617:10" pos:end="617:19">chunk_type</name> <operator pos:start="617:21" pos:end="617:22">==</operator> <name pos:start="617:24" pos:end="617:34">CHUNK_VIDEO</name><operator pos:start="617:35" pos:end="617:35">)</operator> <operator pos:start="617:37" pos:end="617:38">||</operator> <operator pos:start="617:40" pos:end="617:40">(</operator><name pos:start="617:41" pos:end="617:50">chunk_type</name> <operator pos:start="617:52" pos:end="617:53">==</operator> <name pos:start="617:55" pos:end="617:70">CHUNK_AUDIO_ONLY</name><operator pos:start="617:71" pos:end="617:71">)</operator></expr>)</condition><block type="pseudo" pos:start="619:9" pos:end="619:53"><block_content pos:start="619:9" pos:end="619:53">

        <expr_stmt pos:start="619:9" pos:end="619:53"><expr pos:start="619:9" pos:end="619:52"><name pos:start="619:9" pos:end="619:18">chunk_type</name> <operator pos:start="619:20" pos:end="619:20">=</operator> <call pos:start="619:22" pos:end="619:52"><name pos:start="619:22" pos:end="619:40">load_ipmovie_packet</name><argument_list pos:start="619:41" pos:end="619:52">(<argument pos:start="619:42" pos:end="619:42"><expr pos:start="619:42" pos:end="619:42"><name pos:start="619:42" pos:end="619:42">s</name></expr></argument>, <argument pos:start="619:45" pos:end="619:46"><expr pos:start="619:45" pos:end="619:46"><name pos:start="619:45" pos:end="619:46">pb</name></expr></argument>, <argument pos:start="619:49" pos:end="619:51"><expr pos:start="619:49" pos:end="619:51"><name pos:start="619:49" pos:end="619:51">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="623:5" pos:end="623:22">return <expr pos:start="623:12" pos:end="623:21"><name pos:start="623:12" pos:end="623:21">chunk_type</name></expr>;</return>

</block_content>}</block></function>
</unit>
