<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7984.c" pos:tabs="8"><function pos:start="1:1" pos:end="383:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">acpi_table_add</name><parameter_list pos:start="1:19" pos:end="1:40">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:35"><specifier pos:start="1:20" pos:end="1:24">const</specifier> <name pos:start="1:26" pos:end="1:33">QemuOpts</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="383:1">{<block_content pos:start="5:5" pos:end="381:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">AcpiTableOptions</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:26">hdrs</name> <init pos:start="5:28" pos:end="5:33">= <expr pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">err</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier><modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">pathnames</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier><modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">cur</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">size_t</name></type> <name pos:start="15:12" pos:end="15:14">len</name></decl>, <decl pos:start="15:17" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:17" pos:end="15:21">start</name></decl>, <decl pos:start="15:24" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:24" pos:end="15:28">allen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:19">has_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">changed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:28">acpi_table_header</name></name></type> <name pos:start="23:30" pos:end="23:32">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:8">char</name> <name pos:start="25:10" pos:end="25:17">unsigned</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:30">table_start</name></decl>;</decl_stmt>



    <block pos:start="29:5" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:33">

        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:19">OptsVisitor</name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:23">ov</name></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:36"><expr pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:10">ov</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:35"><name pos:start="35:14" pos:end="35:29">opts_visitor_new</name><argument_list pos:start="35:30" pos:end="35:35">(<argument pos:start="35:31" pos:end="35:34"><expr pos:start="35:31" pos:end="35:34"><name pos:start="35:31" pos:end="35:34">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:77"><expr pos:start="37:9" pos:end="37:76"><call pos:start="37:9" pos:end="37:76"><name pos:start="37:9" pos:end="37:35">visit_type_AcpiTableOptions</name><argument_list pos:start="37:36" pos:end="37:76">(<argument pos:start="37:37" pos:end="37:56"><expr pos:start="37:37" pos:end="37:56"><call pos:start="37:37" pos:end="37:56"><name pos:start="37:37" pos:end="37:52">opts_get_visitor</name><argument_list pos:start="37:53" pos:end="37:56">(<argument pos:start="37:54" pos:end="37:55"><expr pos:start="37:54" pos:end="37:55"><name pos:start="37:54" pos:end="37:55">ov</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:59" pos:end="37:63"><expr pos:start="37:59" pos:end="37:63"><operator pos:start="37:59" pos:end="37:59">&amp;</operator><name pos:start="37:60" pos:end="37:63">hdrs</name></expr></argument>, <argument pos:start="37:66" pos:end="37:69"><expr pos:start="37:66" pos:end="37:69"><name pos:start="37:66" pos:end="37:69">NULL</name></expr></argument>, <argument pos:start="37:72" pos:end="37:75"><expr pos:start="37:72" pos:end="37:75"><operator pos:start="37:72" pos:end="37:72">&amp;</operator><name pos:start="37:73" pos:end="37:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:28">opts_visitor_cleanup</name><argument_list pos:start="39:29" pos:end="39:32">(<argument pos:start="39:30" pos:end="39:31"><expr pos:start="39:30" pos:end="39:31"><name pos:start="39:30" pos:end="39:31">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:12">(<expr pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">err</name></expr>)</condition> <block pos:start="45:14" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:17">

        <goto pos:start="47:9" pos:end="47:17">goto <name pos:start="47:14" pos:end="47:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:41">(<expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:12">hdrs</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:22">has_file</name></name> <operator pos:start="51:24" pos:end="51:25">==</operator> <name pos:start="51:27" pos:end="51:40"><name pos:start="51:27" pos:end="51:30">hdrs</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:40">has_data</name></name></expr>)</condition> <block pos:start="51:43" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:17">

        <expr_stmt pos:start="53:9" pos:end="53:74"><expr pos:start="53:9" pos:end="53:73"><call pos:start="53:9" pos:end="53:73"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="53:73">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><operator pos:start="53:20" pos:end="53:20">&amp;</operator><name pos:start="53:21" pos:end="53:23">err</name></expr></argument>, <argument pos:start="53:26" pos:end="53:72"><expr pos:start="53:26" pos:end="53:72"><literal type="string" pos:start="53:26" pos:end="53:72">"'-acpitable' requires one of 'data' or 'file'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:17">goto <name pos:start="55:14" pos:end="55:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:32"><expr pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:14">has_header</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:31"><name pos:start="59:18" pos:end="59:21">hdrs</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:31">has_file</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:77"><expr pos:start="63:5" pos:end="63:76"><name pos:start="63:5" pos:end="63:13">pathnames</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:76"><name pos:start="63:17" pos:end="63:26">g_strsplit</name><argument_list pos:start="63:27" pos:end="63:76">(<argument pos:start="63:28" pos:end="63:67"><expr pos:start="63:28" pos:end="63:67"><ternary pos:start="63:28" pos:end="63:67"><condition pos:start="63:28" pos:end="63:43"><expr pos:start="63:28" pos:end="63:41"><name pos:start="63:28" pos:end="63:41"><name pos:start="63:28" pos:end="63:31">hdrs</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:41">has_file</name></name></expr> ?</condition><then pos:start="63:45" pos:end="63:54"> <expr pos:start="63:45" pos:end="63:54"><name pos:start="63:45" pos:end="63:54"><name pos:start="63:45" pos:end="63:48">hdrs</name><operator pos:start="63:49" pos:end="63:50">-&gt;</operator><name pos:start="63:51" pos:end="63:54">file</name></name></expr> </then><else pos:start="63:56" pos:end="63:67">: <expr pos:start="63:58" pos:end="63:67"><name pos:start="63:58" pos:end="63:67"><name pos:start="63:58" pos:end="63:61">hdrs</name><operator pos:start="63:62" pos:end="63:63">-&gt;</operator><name pos:start="63:64" pos:end="63:67">data</name></name></expr></else></ternary></expr></argument>, <argument pos:start="63:70" pos:end="63:72"><expr pos:start="63:70" pos:end="63:72"><literal type="string" pos:start="63:70" pos:end="63:72">":"</literal></expr></argument>, <argument pos:start="63:75" pos:end="63:75"><expr pos:start="63:75" pos:end="63:75"><literal type="number" pos:start="63:75" pos:end="63:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:50">(<expr pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:17">pathnames</name> <operator pos:start="65:19" pos:end="65:20">==</operator> <name pos:start="65:22" pos:end="65:25">NULL</name> <operator pos:start="65:27" pos:end="65:28">||</operator> <name pos:start="65:30" pos:end="65:41"><name pos:start="65:30" pos:end="65:38">pathnames</name><index pos:start="65:39" pos:end="65:41">[<expr pos:start="65:40" pos:end="65:40"><literal type="number" pos:start="65:40" pos:end="65:40">0</literal></expr>]</index></name> <operator pos:start="65:43" pos:end="65:44">==</operator> <name pos:start="65:46" pos:end="65:49">NULL</name></expr>)</condition> <block pos:start="65:52" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:17">

        <expr_stmt pos:start="67:9" pos:end="67:72"><expr pos:start="67:9" pos:end="67:71"><call pos:start="67:9" pos:end="67:71"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:71">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><operator pos:start="67:20" pos:end="67:20">&amp;</operator><name pos:start="67:21" pos:end="67:23">err</name></expr></argument>, <argument pos:start="67:26" pos:end="67:70"><expr pos:start="67:26" pos:end="67:70"><literal type="string" pos:start="67:26" pos:end="67:70">"'-acpitable' requires at least one pathname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="85:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:21">(<expr pos:start="75:9" pos:end="75:20"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:20">acpi_tables</name></expr>)</condition> <block pos:start="75:23" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:39">

        <expr_stmt pos:start="77:9" pos:end="77:33"><expr pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:13">allen</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <sizeof pos:start="77:17" pos:end="77:32">sizeof<argument_list pos:start="77:23" pos:end="77:32">(<argument pos:start="77:24" pos:end="77:31"><expr pos:start="77:24" pos:end="77:31"><name pos:start="77:24" pos:end="77:31">uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:39"><expr pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:19">acpi_tables</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:38"><name pos:start="79:23" pos:end="79:31">g_malloc0</name><argument_list pos:start="79:32" pos:end="79:38">(<argument pos:start="79:33" pos:end="79:37"><expr pos:start="79:33" pos:end="79:37"><name pos:start="79:33" pos:end="79:37">allen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="85:5">else <block pos:start="81:12" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:32">

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:13">allen</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:31">acpi_tables_len</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:18"><expr pos:start="89:5" pos:end="89:17"><name pos:start="89:5" pos:end="89:9">start</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <name pos:start="89:13" pos:end="89:17">allen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:70"><expr pos:start="91:5" pos:end="91:69"><name pos:start="91:5" pos:end="91:15">acpi_tables</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:69"><name pos:start="91:19" pos:end="91:27">g_realloc</name><argument_list pos:start="91:28" pos:end="91:69">(<argument pos:start="91:29" pos:end="91:39"><expr pos:start="91:29" pos:end="91:39"><name pos:start="91:29" pos:end="91:39">acpi_tables</name></expr></argument>, <argument pos:start="91:42" pos:end="91:68"><expr pos:start="91:42" pos:end="91:68"><name pos:start="91:42" pos:end="91:46">start</name> <operator pos:start="91:48" pos:end="91:48">+</operator> <name pos:start="91:50" pos:end="91:68">ACPI_TABLE_HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:68"><expr pos:start="93:5" pos:end="93:67"><name pos:start="93:5" pos:end="93:9">allen</name> <operator pos:start="93:11" pos:end="93:12">+=</operator> <ternary pos:start="93:14" pos:end="93:67"><condition pos:start="93:14" pos:end="93:25"><expr pos:start="93:14" pos:end="93:23"><name pos:start="93:14" pos:end="93:23">has_header</name></expr> ?</condition><then pos:start="93:27" pos:end="93:45"> <expr pos:start="93:27" pos:end="93:45"><name pos:start="93:27" pos:end="93:45">ACPI_TABLE_PFX_SIZE</name></expr> </then><else pos:start="93:47" pos:end="93:67">: <expr pos:start="93:49" pos:end="93:67"><name pos:start="93:49" pos:end="93:67">ACPI_TABLE_HDR_SIZE</name></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:67">/* now read in the data files, reallocating buffer as needed */</comment>



    <for pos:start="101:5" pos:end="153:5">for <control pos:start="101:9" pos:end="101:38">(<init pos:start="101:10" pos:end="101:25"><expr pos:start="101:10" pos:end="101:24"><name pos:start="101:10" pos:end="101:12">cur</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:24">pathnames</name></expr>;</init> <condition pos:start="101:27" pos:end="101:31"><expr pos:start="101:27" pos:end="101:30"><operator pos:start="101:27" pos:end="101:27">*</operator><name pos:start="101:28" pos:end="101:30">cur</name></expr>;</condition> <incr pos:start="101:33" pos:end="101:37"><expr pos:start="101:33" pos:end="101:37"><operator pos:start="101:33" pos:end="101:34">++</operator><name pos:start="101:35" pos:end="101:37">cur</name></expr></incr>)</control> <block pos:start="101:40" pos:end="153:5">{<block_content pos:start="103:9" pos:end="151:18">

        <decl_stmt pos:start="103:9" pos:end="103:49"><decl pos:start="103:9" pos:end="103:48"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:14">fd</name> <init pos:start="103:16" pos:end="103:48">= <expr pos:start="103:18" pos:end="103:48"><call pos:start="103:18" pos:end="103:48"><name pos:start="103:18" pos:end="103:21">open</name><argument_list pos:start="103:22" pos:end="103:48">(<argument pos:start="103:23" pos:end="103:26"><expr pos:start="103:23" pos:end="103:26"><operator pos:start="103:23" pos:end="103:23">*</operator><name pos:start="103:24" pos:end="103:26">cur</name></expr></argument>, <argument pos:start="103:29" pos:end="103:47"><expr pos:start="103:29" pos:end="103:47"><name pos:start="103:29" pos:end="103:36">O_RDONLY</name> <operator pos:start="103:38" pos:end="103:38">|</operator> <name pos:start="103:40" pos:end="103:47">O_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:19">(<expr pos:start="107:13" pos:end="107:18"><name pos:start="107:13" pos:end="107:14">fd</name> <operator pos:start="107:16" pos:end="107:16">&lt;</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>)</condition> <block pos:start="107:21" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:21">

            <expr_stmt pos:start="109:13" pos:end="109:78"><expr pos:start="109:13" pos:end="109:77"><call pos:start="109:13" pos:end="109:77"><name pos:start="109:13" pos:end="109:22">error_setg</name><argument_list pos:start="109:23" pos:end="109:77">(<argument pos:start="109:24" pos:end="109:27"><expr pos:start="109:24" pos:end="109:27"><operator pos:start="109:24" pos:end="109:24">&amp;</operator><name pos:start="109:25" pos:end="109:27">err</name></expr></argument>, <argument pos:start="109:30" pos:end="109:53"><expr pos:start="109:30" pos:end="109:53"><literal type="string" pos:start="109:30" pos:end="109:53">"can't open file %s: %s"</literal></expr></argument>, <argument pos:start="109:56" pos:end="109:59"><expr pos:start="109:56" pos:end="109:59"><operator pos:start="109:56" pos:end="109:56">*</operator><name pos:start="109:57" pos:end="109:59">cur</name></expr></argument>, <argument pos:start="109:62" pos:end="109:76"><expr pos:start="109:62" pos:end="109:76"><call pos:start="109:62" pos:end="109:76"><name pos:start="109:62" pos:end="109:69">strerror</name><argument_list pos:start="109:70" pos:end="109:76">(<argument pos:start="109:71" pos:end="109:75"><expr pos:start="109:71" pos:end="109:75"><name pos:start="109:71" pos:end="109:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="111:13" pos:end="111:21">goto <name pos:start="111:18" pos:end="111:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="117:9" pos:end="147:9">for <control pos:start="117:13" pos:end="117:16">(<init pos:start="117:14" pos:end="117:14">;</init><condition pos:start="117:15" pos:end="117:15">;</condition><incr/>)</control> <block pos:start="117:18" pos:end="147:9">{<block_content pos:start="119:13" pos:end="145:13">

            <decl_stmt pos:start="119:13" pos:end="119:37"><decl pos:start="119:13" pos:end="119:36"><type pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:16">char</name> <name pos:start="119:18" pos:end="119:25">unsigned</name></type> <name pos:start="119:27" pos:end="119:36"><name pos:start="119:27" pos:end="119:30">data</name><index pos:start="119:31" pos:end="119:36">[<expr pos:start="119:32" pos:end="119:35"><literal type="number" pos:start="119:32" pos:end="119:35">8192</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:45"><expr pos:start="121:13" pos:end="121:44"><name pos:start="121:13" pos:end="121:13">r</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <call pos:start="121:17" pos:end="121:44"><name pos:start="121:17" pos:end="121:20">read</name><argument_list pos:start="121:21" pos:end="121:44">(<argument pos:start="121:22" pos:end="121:23"><expr pos:start="121:22" pos:end="121:23"><name pos:start="121:22" pos:end="121:23">fd</name></expr></argument>, <argument pos:start="121:26" pos:end="121:29"><expr pos:start="121:26" pos:end="121:29"><name pos:start="121:26" pos:end="121:29">data</name></expr></argument>, <argument pos:start="121:32" pos:end="121:43"><expr pos:start="121:32" pos:end="121:43"><sizeof pos:start="121:32" pos:end="121:43">sizeof<argument_list pos:start="121:38" pos:end="121:43">(<argument pos:start="121:39" pos:end="121:42"><expr pos:start="121:39" pos:end="121:42"><name pos:start="121:39" pos:end="121:42">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="145:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:23">(<expr pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:17">r</name> <operator pos:start="123:19" pos:end="123:20">==</operator> <literal type="number" pos:start="123:22" pos:end="123:22">0</literal></expr>)</condition> <block pos:start="123:25" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:22">

                <break pos:start="125:17" pos:end="125:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="127:15" pos:end="135:13">else if <condition pos:start="127:23" pos:end="127:29">(<expr pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:24">r</name> <operator pos:start="127:26" pos:end="127:26">&gt;</operator> <literal type="number" pos:start="127:28" pos:end="127:28">0</literal></expr>)</condition> <block pos:start="127:31" pos:end="135:13">{<block_content pos:start="129:17" pos:end="133:27">

                <expr_stmt pos:start="129:17" pos:end="129:64"><expr pos:start="129:17" pos:end="129:63"><name pos:start="129:17" pos:end="129:27">acpi_tables</name> <operator pos:start="129:29" pos:end="129:29">=</operator> <call pos:start="129:31" pos:end="129:63"><name pos:start="129:31" pos:end="129:39">g_realloc</name><argument_list pos:start="129:40" pos:end="129:63">(<argument pos:start="129:41" pos:end="129:51"><expr pos:start="129:41" pos:end="129:51"><name pos:start="129:41" pos:end="129:51">acpi_tables</name></expr></argument>, <argument pos:start="129:54" pos:end="129:62"><expr pos:start="129:54" pos:end="129:62"><name pos:start="129:54" pos:end="129:58">allen</name> <operator pos:start="129:60" pos:end="129:60">+</operator> <name pos:start="129:62" pos:end="129:62">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:53"><expr pos:start="131:17" pos:end="131:52"><call pos:start="131:17" pos:end="131:52"><name pos:start="131:17" pos:end="131:22">memcpy</name><argument_list pos:start="131:23" pos:end="131:52">(<argument pos:start="131:24" pos:end="131:42"><expr pos:start="131:24" pos:end="131:42"><name pos:start="131:24" pos:end="131:34">acpi_tables</name> <operator pos:start="131:36" pos:end="131:36">+</operator> <name pos:start="131:38" pos:end="131:42">allen</name></expr></argument>, <argument pos:start="131:45" pos:end="131:48"><expr pos:start="131:45" pos:end="131:48"><name pos:start="131:45" pos:end="131:48">data</name></expr></argument>, <argument pos:start="131:51" pos:end="131:51"><expr pos:start="131:51" pos:end="131:51"><name pos:start="131:51" pos:end="131:51">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:27"><expr pos:start="133:17" pos:end="133:26"><name pos:start="133:17" pos:end="133:21">allen</name> <operator pos:start="133:23" pos:end="133:24">+=</operator> <name pos:start="133:26" pos:end="133:26">r</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="135:15" pos:end="145:13">else if <condition pos:start="135:23" pos:end="135:38">(<expr pos:start="135:24" pos:end="135:37"><name pos:start="135:24" pos:end="135:28">errno</name> <operator pos:start="135:30" pos:end="135:31">!=</operator> <name pos:start="135:33" pos:end="135:37">EINTR</name></expr>)</condition> <block pos:start="135:40" pos:end="145:13">{<block_content pos:start="137:17" pos:end="143:25">

                <expr_stmt pos:start="137:17" pos:end="139:50"><expr pos:start="137:17" pos:end="139:49"><call pos:start="137:17" pos:end="139:49"><name pos:start="137:17" pos:end="137:26">error_setg</name><argument_list pos:start="137:27" pos:end="139:49">(<argument pos:start="137:28" pos:end="137:31"><expr pos:start="137:28" pos:end="137:31"><operator pos:start="137:28" pos:end="137:28">&amp;</operator><name pos:start="137:29" pos:end="137:31">err</name></expr></argument>, <argument pos:start="137:34" pos:end="137:57"><expr pos:start="137:34" pos:end="137:57"><literal type="string" pos:start="137:34" pos:end="137:57">"can't read file %s: %s"</literal></expr></argument>,

                           <argument pos:start="139:28" pos:end="139:31"><expr pos:start="139:28" pos:end="139:31"><operator pos:start="139:28" pos:end="139:28">*</operator><name pos:start="139:29" pos:end="139:31">cur</name></expr></argument>, <argument pos:start="139:34" pos:end="139:48"><expr pos:start="139:34" pos:end="139:48"><call pos:start="139:34" pos:end="139:48"><name pos:start="139:34" pos:end="139:41">strerror</name><argument_list pos:start="139:42" pos:end="139:48">(<argument pos:start="139:43" pos:end="139:47"><expr pos:start="139:43" pos:end="139:47"><name pos:start="139:43" pos:end="139:47">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:26"><expr pos:start="141:17" pos:end="141:25"><call pos:start="141:17" pos:end="141:25"><name pos:start="141:17" pos:end="141:21">close</name><argument_list pos:start="141:22" pos:end="141:25">(<argument pos:start="141:23" pos:end="141:24"><expr pos:start="141:23" pos:end="141:24"><name pos:start="141:23" pos:end="141:24">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="143:17" pos:end="143:25">goto <name pos:start="143:22" pos:end="143:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="151:9" pos:end="151:18"><expr pos:start="151:9" pos:end="151:17"><call pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:13">close</name><argument_list pos:start="151:14" pos:end="151:17">(<argument pos:start="151:15" pos:end="151:16"><expr pos:start="151:15" pos:end="151:16"><name pos:start="151:15" pos:end="151:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="157:5" pos:end="157:39">/* now fill in the header fields */</comment>



    <expr_stmt pos:start="161:5" pos:end="161:38"><expr pos:start="161:5" pos:end="161:37"><name pos:start="161:5" pos:end="161:15">table_start</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:29">acpi_tables</name> <operator pos:start="161:31" pos:end="161:31">+</operator> <name pos:start="161:33" pos:end="161:37">start</name></expr>;</expr_stmt>   <comment type="block" pos:start="161:42" pos:end="161:65">/* start of the table */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:16"><expr pos:start="163:5" pos:end="163:15"><name pos:start="163:5" pos:end="163:11">changed</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:59">/* copy the header to temp place to align the fields */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:74"><expr pos:start="169:5" pos:end="169:73"><call pos:start="169:5" pos:end="169:73"><name pos:start="169:5" pos:end="169:10">memcpy</name><argument_list pos:start="169:11" pos:end="169:73">(<argument pos:start="169:12" pos:end="169:15"><expr pos:start="169:12" pos:end="169:15"><operator pos:start="169:12" pos:end="169:12">&amp;</operator><name pos:start="169:13" pos:end="169:15">hdr</name></expr></argument>, <argument pos:start="169:18" pos:end="169:51"><expr pos:start="169:18" pos:end="169:51"><ternary pos:start="169:18" pos:end="169:51"><condition pos:start="169:18" pos:end="169:29"><expr pos:start="169:18" pos:end="169:27"><name pos:start="169:18" pos:end="169:27">has_header</name></expr> ?</condition><then pos:start="169:31" pos:end="169:41"> <expr pos:start="169:31" pos:end="169:41"><name pos:start="169:31" pos:end="169:41">table_start</name></expr> </then><else pos:start="169:43" pos:end="169:51">: <expr pos:start="169:45" pos:end="169:51"><name pos:start="169:45" pos:end="169:51">dfl_hdr</name></expr></else></ternary></expr></argument>, <argument pos:start="169:54" pos:end="169:72"><expr pos:start="169:54" pos:end="169:72"><name pos:start="169:54" pos:end="169:72">ACPI_TABLE_HDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:46">/* length of the table minus our prefix */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:46"><expr pos:start="175:5" pos:end="175:45"><name pos:start="175:5" pos:end="175:7">len</name> <operator pos:start="175:9" pos:end="175:9">=</operator> <name pos:start="175:11" pos:end="175:15">allen</name> <operator pos:start="175:17" pos:end="175:17">-</operator> <name pos:start="175:19" pos:end="175:23">start</name> <operator pos:start="175:25" pos:end="175:25">-</operator> <name pos:start="175:27" pos:end="175:45">ACPI_TABLE_PFX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:35"><expr pos:start="179:5" pos:end="179:34"><name pos:start="179:5" pos:end="179:15"><name pos:start="179:5" pos:end="179:7">hdr</name><operator pos:start="179:8" pos:end="179:8">.</operator><name pos:start="179:9" pos:end="179:15">_length</name></name> <operator pos:start="179:17" pos:end="179:17">=</operator> <call pos:start="179:19" pos:end="179:34"><name pos:start="179:19" pos:end="179:29">cpu_to_le16</name><argument_list pos:start="179:30" pos:end="179:34">(<argument pos:start="179:31" pos:end="179:33"><expr pos:start="179:31" pos:end="179:33"><name pos:start="179:31" pos:end="179:33">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="183:22">(<expr pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:12">hdrs</name><operator pos:start="183:13" pos:end="183:14">-&gt;</operator><name pos:start="183:15" pos:end="183:21">has_sig</name></name></expr>)</condition> <block pos:start="183:24" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:18">

        <comment type="block" pos:start="185:9" pos:end="185:73">/* strncpy is justified: the field need not be NUL-terminated. */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:53"><expr pos:start="187:9" pos:end="187:52"><call pos:start="187:9" pos:end="187:52"><name pos:start="187:9" pos:end="187:15">strncpy</name><argument_list pos:start="187:16" pos:end="187:52">(<argument pos:start="187:17" pos:end="187:23"><expr pos:start="187:17" pos:end="187:23"><name pos:start="187:17" pos:end="187:23"><name pos:start="187:17" pos:end="187:19">hdr</name><operator pos:start="187:20" pos:end="187:20">.</operator><name pos:start="187:21" pos:end="187:23">sig</name></name></expr></argument>, <argument pos:start="187:26" pos:end="187:34"><expr pos:start="187:26" pos:end="187:34"><name pos:start="187:26" pos:end="187:34"><name pos:start="187:26" pos:end="187:29">hdrs</name><operator pos:start="187:30" pos:end="187:31">-&gt;</operator><name pos:start="187:32" pos:end="187:34">sig</name></name></expr></argument>, <argument pos:start="187:37" pos:end="187:51"><expr pos:start="187:37" pos:end="187:51"><sizeof pos:start="187:37" pos:end="187:51">sizeof<argument_list pos:start="187:43" pos:end="187:51">(<argument pos:start="187:44" pos:end="187:50"><expr pos:start="187:44" pos:end="187:50"><name pos:start="187:44" pos:end="187:50"><name pos:start="187:44" pos:end="187:46">hdr</name><operator pos:start="187:47" pos:end="187:47">.</operator><name pos:start="187:48" pos:end="187:50">sig</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:18"><expr pos:start="189:9" pos:end="189:17"><operator pos:start="189:9" pos:end="189:10">++</operator><name pos:start="189:11" pos:end="189:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:56">/* length of the table including header, in bytes */</comment>

    <if_stmt pos:start="197:5" pos:end="221:5"><if pos:start="197:5" pos:end="221:5">if <condition pos:start="197:8" pos:end="197:19">(<expr pos:start="197:9" pos:end="197:18"><name pos:start="197:9" pos:end="197:18">has_header</name></expr>)</condition> <block pos:start="197:21" pos:end="221:5">{<block_content pos:start="199:9" pos:end="219:9">

        <decl_stmt pos:start="199:9" pos:end="199:26"><decl pos:start="199:9" pos:end="199:25"><type pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:16">unsigned</name> <name pos:start="199:18" pos:end="199:21">long</name></type> <name pos:start="199:23" pos:end="199:25">val</name></decl>;</decl_stmt>



        <comment type="block" pos:start="203:9" pos:end="203:47">/* check if actual length is correct */</comment>

        <expr_stmt pos:start="205:9" pos:end="205:38"><expr pos:start="205:9" pos:end="205:37"><name pos:start="205:9" pos:end="205:11">val</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <call pos:start="205:15" pos:end="205:37"><name pos:start="205:15" pos:end="205:25">le32_to_cpu</name><argument_list pos:start="205:26" pos:end="205:37">(<argument pos:start="205:27" pos:end="205:36"><expr pos:start="205:27" pos:end="205:36"><name pos:start="205:27" pos:end="205:36"><name pos:start="205:27" pos:end="205:29">hdr</name><operator pos:start="205:30" pos:end="205:30">.</operator><name pos:start="205:31" pos:end="205:36">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="207:9" pos:end="219:9"><if pos:start="207:9" pos:end="219:9">if <condition pos:start="207:12" pos:end="207:23">(<expr pos:start="207:13" pos:end="207:22"><name pos:start="207:13" pos:end="207:15">val</name> <operator pos:start="207:17" pos:end="207:18">!=</operator> <name pos:start="207:20" pos:end="207:22">len</name></expr>)</condition> <block pos:start="207:25" pos:end="219:9">{<block_content pos:start="209:13" pos:end="217:22">

            <expr_stmt pos:start="209:13" pos:end="215:26"><expr pos:start="209:13" pos:end="215:25"><call pos:start="209:13" pos:end="215:25"><name pos:start="209:13" pos:end="209:19">fprintf</name><argument_list pos:start="209:20" pos:end="215:25">(<argument pos:start="209:21" pos:end="209:26"><expr pos:start="209:21" pos:end="209:26"><name pos:start="209:21" pos:end="209:26">stderr</name></expr></argument>,

                <argument pos:start="211:17" pos:end="213:59"><expr pos:start="211:17" pos:end="213:59"><literal type="string" pos:start="211:17" pos:end="211:54">"warning: acpitable has wrong length,"</literal>

                <literal type="string" pos:start="213:17" pos:end="213:59">" header says %lu, actual size %zu bytes\n"</literal></expr></argument>,

                <argument pos:start="215:17" pos:end="215:19"><expr pos:start="215:17" pos:end="215:19"><name pos:start="215:17" pos:end="215:19">val</name></expr></argument>, <argument pos:start="215:22" pos:end="215:24"><expr pos:start="215:22" pos:end="215:24"><name pos:start="215:22" pos:end="215:24">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:22"><expr pos:start="217:13" pos:end="217:21"><operator pos:start="217:13" pos:end="217:14">++</operator><name pos:start="217:15" pos:end="217:21">changed</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="223:5" pos:end="223:64">/* we may avoid putting length here if has_header is true */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:34"><expr pos:start="225:5" pos:end="225:33"><name pos:start="225:5" pos:end="225:14"><name pos:start="225:5" pos:end="225:7">hdr</name><operator pos:start="225:8" pos:end="225:8">.</operator><name pos:start="225:9" pos:end="225:14">length</name></name> <operator pos:start="225:16" pos:end="225:16">=</operator> <call pos:start="225:18" pos:end="225:33"><name pos:start="225:18" pos:end="225:28">cpu_to_le32</name><argument_list pos:start="225:29" pos:end="225:33">(<argument pos:start="225:30" pos:end="225:32"><expr pos:start="225:30" pos:end="225:32"><name pos:start="225:30" pos:end="225:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if <condition pos:start="229:8" pos:end="229:22">(<expr pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:12">hdrs</name><operator pos:start="229:13" pos:end="229:14">-&gt;</operator><name pos:start="229:15" pos:end="229:21">has_rev</name></name></expr>)</condition> <block pos:start="229:24" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:18">

        <expr_stmt pos:start="231:9" pos:end="231:33"><expr pos:start="231:9" pos:end="231:32"><name pos:start="231:9" pos:end="231:20"><name pos:start="231:9" pos:end="231:11">hdr</name><operator pos:start="231:12" pos:end="231:12">.</operator><name pos:start="231:13" pos:end="231:20">revision</name></name> <operator pos:start="231:22" pos:end="231:22">=</operator> <name pos:start="231:24" pos:end="231:32"><name pos:start="231:24" pos:end="231:27">hdrs</name><operator pos:start="231:28" pos:end="231:29">-&gt;</operator><name pos:start="231:30" pos:end="231:32">rev</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:18"><expr pos:start="233:9" pos:end="233:17"><operator pos:start="233:9" pos:end="233:10">++</operator><name pos:start="233:11" pos:end="233:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="247:5"><if pos:start="239:5" pos:end="247:5">if <condition pos:start="239:8" pos:end="239:25">(<expr pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:12">hdrs</name><operator pos:start="239:13" pos:end="239:14">-&gt;</operator><name pos:start="239:15" pos:end="239:24">has_oem_id</name></name></expr>)</condition> <block pos:start="239:27" pos:end="247:5">{<block_content pos:start="243:9" pos:end="245:18">

        <comment type="block" pos:start="241:9" pos:end="241:73">/* strncpy is justified: the field need not be NUL-terminated. */</comment>

        <expr_stmt pos:start="243:9" pos:end="243:62"><expr pos:start="243:9" pos:end="243:61"><call pos:start="243:9" pos:end="243:61"><name pos:start="243:9" pos:end="243:15">strncpy</name><argument_list pos:start="243:16" pos:end="243:61">(<argument pos:start="243:17" pos:end="243:26"><expr pos:start="243:17" pos:end="243:26"><name pos:start="243:17" pos:end="243:26"><name pos:start="243:17" pos:end="243:19">hdr</name><operator pos:start="243:20" pos:end="243:20">.</operator><name pos:start="243:21" pos:end="243:26">oem_id</name></name></expr></argument>, <argument pos:start="243:29" pos:end="243:40"><expr pos:start="243:29" pos:end="243:40"><name pos:start="243:29" pos:end="243:40"><name pos:start="243:29" pos:end="243:32">hdrs</name><operator pos:start="243:33" pos:end="243:34">-&gt;</operator><name pos:start="243:35" pos:end="243:40">oem_id</name></name></expr></argument>, <argument pos:start="243:43" pos:end="243:60"><expr pos:start="243:43" pos:end="243:60"><sizeof pos:start="243:43" pos:end="243:60">sizeof<argument_list pos:start="243:49" pos:end="243:60">(<argument pos:start="243:50" pos:end="243:59"><expr pos:start="243:50" pos:end="243:59"><name pos:start="243:50" pos:end="243:59"><name pos:start="243:50" pos:end="243:52">hdr</name><operator pos:start="243:53" pos:end="243:53">.</operator><name pos:start="243:54" pos:end="243:59">oem_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:18"><expr pos:start="245:9" pos:end="245:17"><operator pos:start="245:9" pos:end="245:10">++</operator><name pos:start="245:11" pos:end="245:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="251:5" pos:end="261:5"><if pos:start="251:5" pos:end="261:5">if <condition pos:start="251:8" pos:end="251:31">(<expr pos:start="251:9" pos:end="251:30"><name pos:start="251:9" pos:end="251:30"><name pos:start="251:9" pos:end="251:12">hdrs</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:30">has_oem_table_id</name></name></expr>)</condition> <block pos:start="251:33" pos:end="261:5">{<block_content pos:start="255:9" pos:end="259:18">

        <comment type="block" pos:start="253:9" pos:end="253:73">/* strncpy is justified: the field need not be NUL-terminated. */</comment>

        <expr_stmt pos:start="255:9" pos:end="257:42"><expr pos:start="255:9" pos:end="257:41"><call pos:start="255:9" pos:end="257:41"><name pos:start="255:9" pos:end="255:15">strncpy</name><argument_list pos:start="255:16" pos:end="257:41">(<argument pos:start="255:17" pos:end="255:32"><expr pos:start="255:17" pos:end="255:32"><name pos:start="255:17" pos:end="255:32"><name pos:start="255:17" pos:end="255:19">hdr</name><operator pos:start="255:20" pos:end="255:20">.</operator><name pos:start="255:21" pos:end="255:32">oem_table_id</name></name></expr></argument>, <argument pos:start="255:35" pos:end="255:52"><expr pos:start="255:35" pos:end="255:52"><name pos:start="255:35" pos:end="255:52"><name pos:start="255:35" pos:end="255:38">hdrs</name><operator pos:start="255:39" pos:end="255:40">-&gt;</operator><name pos:start="255:41" pos:end="255:52">oem_table_id</name></name></expr></argument>,

                <argument pos:start="257:17" pos:end="257:40"><expr pos:start="257:17" pos:end="257:40"><sizeof pos:start="257:17" pos:end="257:40">sizeof<argument_list pos:start="257:23" pos:end="257:40">(<argument pos:start="257:24" pos:end="257:39"><expr pos:start="257:24" pos:end="257:39"><name pos:start="257:24" pos:end="257:39"><name pos:start="257:24" pos:end="257:26">hdr</name><operator pos:start="257:27" pos:end="257:27">.</operator><name pos:start="257:28" pos:end="257:39">oem_table_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:18"><expr pos:start="259:9" pos:end="259:17"><operator pos:start="259:9" pos:end="259:10">++</operator><name pos:start="259:11" pos:end="259:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="265:5" pos:end="271:5"><if pos:start="265:5" pos:end="271:5">if <condition pos:start="265:8" pos:end="265:26">(<expr pos:start="265:9" pos:end="265:25"><name pos:start="265:9" pos:end="265:25"><name pos:start="265:9" pos:end="265:12">hdrs</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:25">has_oem_rev</name></name></expr>)</condition> <block pos:start="265:28" pos:end="271:5">{<block_content pos:start="267:9" pos:end="269:18">

        <expr_stmt pos:start="267:9" pos:end="267:54"><expr pos:start="267:9" pos:end="267:53"><name pos:start="267:9" pos:end="267:24"><name pos:start="267:9" pos:end="267:11">hdr</name><operator pos:start="267:12" pos:end="267:12">.</operator><name pos:start="267:13" pos:end="267:24">oem_revision</name></name> <operator pos:start="267:26" pos:end="267:26">=</operator> <call pos:start="267:28" pos:end="267:53"><name pos:start="267:28" pos:end="267:38">cpu_to_le32</name><argument_list pos:start="267:39" pos:end="267:53">(<argument pos:start="267:40" pos:end="267:52"><expr pos:start="267:40" pos:end="267:52"><name pos:start="267:40" pos:end="267:52"><name pos:start="267:40" pos:end="267:43">hdrs</name><operator pos:start="267:44" pos:end="267:45">-&gt;</operator><name pos:start="267:46" pos:end="267:52">oem_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:18"><expr pos:start="269:9" pos:end="269:17"><operator pos:start="269:9" pos:end="269:10">++</operator><name pos:start="269:11" pos:end="269:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="275:5" pos:end="285:5"><if pos:start="275:5" pos:end="285:5">if <condition pos:start="275:8" pos:end="275:34">(<expr pos:start="275:9" pos:end="275:33"><name pos:start="275:9" pos:end="275:33"><name pos:start="275:9" pos:end="275:12">hdrs</name><operator pos:start="275:13" pos:end="275:14">-&gt;</operator><name pos:start="275:15" pos:end="275:33">has_asl_compiler_id</name></name></expr>)</condition> <block pos:start="275:36" pos:end="285:5">{<block_content pos:start="279:9" pos:end="283:18">

        <comment type="block" pos:start="277:9" pos:end="277:73">/* strncpy is justified: the field need not be NUL-terminated. */</comment>

        <expr_stmt pos:start="279:9" pos:end="281:45"><expr pos:start="279:9" pos:end="281:44"><call pos:start="279:9" pos:end="281:44"><name pos:start="279:9" pos:end="279:15">strncpy</name><argument_list pos:start="279:16" pos:end="281:44">(<argument pos:start="279:17" pos:end="279:35"><expr pos:start="279:17" pos:end="279:35"><name pos:start="279:17" pos:end="279:35"><name pos:start="279:17" pos:end="279:19">hdr</name><operator pos:start="279:20" pos:end="279:20">.</operator><name pos:start="279:21" pos:end="279:35">asl_compiler_id</name></name></expr></argument>, <argument pos:start="279:38" pos:end="279:58"><expr pos:start="279:38" pos:end="279:58"><name pos:start="279:38" pos:end="279:58"><name pos:start="279:38" pos:end="279:41">hdrs</name><operator pos:start="279:42" pos:end="279:43">-&gt;</operator><name pos:start="279:44" pos:end="279:58">asl_compiler_id</name></name></expr></argument>,

                <argument pos:start="281:17" pos:end="281:43"><expr pos:start="281:17" pos:end="281:43"><sizeof pos:start="281:17" pos:end="281:43">sizeof<argument_list pos:start="281:23" pos:end="281:43">(<argument pos:start="281:24" pos:end="281:42"><expr pos:start="281:24" pos:end="281:42"><name pos:start="281:24" pos:end="281:42"><name pos:start="281:24" pos:end="281:26">hdr</name><operator pos:start="281:27" pos:end="281:27">.</operator><name pos:start="281:28" pos:end="281:42">asl_compiler_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:18"><expr pos:start="283:9" pos:end="283:17"><operator pos:start="283:9" pos:end="283:10">++</operator><name pos:start="283:11" pos:end="283:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="295:5"><if pos:start="289:5" pos:end="295:5">if <condition pos:start="289:8" pos:end="289:35">(<expr pos:start="289:9" pos:end="289:34"><name pos:start="289:9" pos:end="289:34"><name pos:start="289:9" pos:end="289:12">hdrs</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:34">has_asl_compiler_rev</name></name></expr>)</condition> <block pos:start="289:37" pos:end="295:5">{<block_content pos:start="291:9" pos:end="293:18">

        <expr_stmt pos:start="291:9" pos:end="291:72"><expr pos:start="291:9" pos:end="291:71"><name pos:start="291:9" pos:end="291:33"><name pos:start="291:9" pos:end="291:11">hdr</name><operator pos:start="291:12" pos:end="291:12">.</operator><name pos:start="291:13" pos:end="291:33">asl_compiler_revision</name></name> <operator pos:start="291:35" pos:end="291:35">=</operator> <call pos:start="291:37" pos:end="291:71"><name pos:start="291:37" pos:end="291:47">cpu_to_le32</name><argument_list pos:start="291:48" pos:end="291:71">(<argument pos:start="291:49" pos:end="291:70"><expr pos:start="291:49" pos:end="291:70"><name pos:start="291:49" pos:end="291:70"><name pos:start="291:49" pos:end="291:52">hdrs</name><operator pos:start="291:53" pos:end="291:54">-&gt;</operator><name pos:start="291:55" pos:end="291:70">asl_compiler_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:18"><expr pos:start="293:9" pos:end="293:17"><operator pos:start="293:9" pos:end="293:10">++</operator><name pos:start="293:11" pos:end="293:17">changed</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="299:5" pos:end="303:5"><if pos:start="299:5" pos:end="303:5">if <condition pos:start="299:8" pos:end="299:32">(<expr pos:start="299:9" pos:end="299:31"><operator pos:start="299:9" pos:end="299:9">!</operator><name pos:start="299:10" pos:end="299:19">has_header</name> <operator pos:start="299:21" pos:end="299:22">&amp;&amp;</operator> <operator pos:start="299:24" pos:end="299:24">!</operator><name pos:start="299:25" pos:end="299:31">changed</name></expr>)</condition> <block pos:start="299:34" pos:end="303:5">{<block_content pos:start="301:9" pos:end="301:80">

        <expr_stmt pos:start="301:9" pos:end="301:80"><expr pos:start="301:9" pos:end="301:79"><call pos:start="301:9" pos:end="301:79"><name pos:start="301:9" pos:end="301:15">fprintf</name><argument_list pos:start="301:16" pos:end="301:79">(<argument pos:start="301:17" pos:end="301:22"><expr pos:start="301:17" pos:end="301:22"><name pos:start="301:17" pos:end="301:22">stderr</name></expr></argument>, <argument pos:start="301:25" pos:end="301:78"><expr pos:start="301:25" pos:end="301:78"><literal type="string" pos:start="301:25" pos:end="301:78">"warning: acpitable: no table headers are specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="309:5" pos:end="309:71">/* now calculate checksum of the table, complete with the header */</comment>

    <comment type="block" pos:start="311:5" pos:end="311:68">/* we may as well leave checksum intact if has_header is true */</comment>

    <comment type="block" pos:start="313:5" pos:end="313:72">/* alternatively there may be a way to set cksum to a given value */</comment>

    <expr_stmt pos:start="315:5" pos:end="315:21"><expr pos:start="315:5" pos:end="315:20"><name pos:start="315:5" pos:end="315:16"><name pos:start="315:5" pos:end="315:7">hdr</name><operator pos:start="315:8" pos:end="315:8">.</operator><name pos:start="315:9" pos:end="315:16">checksum</name></name> <operator pos:start="315:18" pos:end="315:18">=</operator> <literal type="number" pos:start="315:20" pos:end="315:20">0</literal></expr>;</expr_stmt>    <comment type="block" pos:start="315:26" pos:end="315:55">/* for checksum calculation */</comment>



    <comment type="block" pos:start="319:5" pos:end="319:25">/* put header back */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:43"><expr pos:start="321:5" pos:end="321:42"><call pos:start="321:5" pos:end="321:42"><name pos:start="321:5" pos:end="321:10">memcpy</name><argument_list pos:start="321:11" pos:end="321:42">(<argument pos:start="321:12" pos:end="321:22"><expr pos:start="321:12" pos:end="321:22"><name pos:start="321:12" pos:end="321:22">table_start</name></expr></argument>, <argument pos:start="321:25" pos:end="321:28"><expr pos:start="321:25" pos:end="321:28"><operator pos:start="321:25" pos:end="321:25">&amp;</operator><name pos:start="321:26" pos:end="321:28">hdr</name></expr></argument>, <argument pos:start="321:31" pos:end="321:41"><expr pos:start="321:31" pos:end="321:41"><sizeof pos:start="321:31" pos:end="321:41">sizeof<argument_list pos:start="321:37" pos:end="321:41">(<argument pos:start="321:38" pos:end="321:40"><expr pos:start="321:38" pos:end="321:40"><name pos:start="321:38" pos:end="321:40">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="325:5" pos:end="331:5"><if pos:start="325:5" pos:end="331:5">if <condition pos:start="325:8" pos:end="325:36">(<expr pos:start="325:9" pos:end="325:35"><name pos:start="325:9" pos:end="325:15">changed</name> <operator pos:start="325:17" pos:end="325:18">||</operator> <operator pos:start="325:20" pos:end="325:20">!</operator><name pos:start="325:21" pos:end="325:30">has_header</name> <operator pos:start="325:32" pos:end="325:33">||</operator> <literal type="number" pos:start="325:35" pos:end="325:35">1</literal></expr>)</condition> <block pos:start="325:38" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:77">

        <expr_stmt pos:start="327:9" pos:end="329:77"><expr pos:start="327:9" pos:end="329:76"><operator pos:start="327:9" pos:end="327:9">(</operator><operator pos:start="327:10" pos:end="327:10">(</operator>struct <name pos:start="327:18" pos:end="327:34">acpi_table_header</name> <operator pos:start="327:36" pos:end="327:36">*</operator><operator pos:start="327:37" pos:end="327:37">)</operator><name pos:start="327:38" pos:end="327:48">table_start</name><operator pos:start="327:49" pos:end="327:49">)</operator><operator pos:start="327:50" pos:end="327:51">-&gt;</operator><name pos:start="327:52" pos:end="327:59">checksum</name> <operator pos:start="327:61" pos:end="327:61">=</operator>

            <call pos:start="329:13" pos:end="329:76"><name pos:start="329:13" pos:end="329:25">acpi_checksum</name><argument_list pos:start="329:26" pos:end="329:76">(<argument pos:start="329:27" pos:end="329:70"><expr pos:start="329:27" pos:end="329:70"><operator pos:start="329:27" pos:end="329:27">(</operator><name pos:start="329:28" pos:end="329:34">uint8_t</name> <operator pos:start="329:36" pos:end="329:36">*</operator><operator pos:start="329:37" pos:end="329:37">)</operator><name pos:start="329:38" pos:end="329:48">table_start</name> <operator pos:start="329:50" pos:end="329:50">+</operator> <name pos:start="329:52" pos:end="329:70">ACPI_TABLE_PFX_SIZE</name></expr></argument>, <argument pos:start="329:73" pos:end="329:75"><expr pos:start="329:73" pos:end="329:75"><name pos:start="329:73" pos:end="329:75">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:35">/* increase number of tables */</comment>

    <expr_stmt pos:start="337:5" pos:end="339:63"><expr pos:start="337:5" pos:end="339:62"><operator pos:start="337:5" pos:end="337:5">(</operator><operator pos:start="337:6" pos:end="337:6">*</operator><operator pos:start="337:7" pos:end="337:7">(</operator><name pos:start="337:8" pos:end="337:15">uint16_t</name> <operator pos:start="337:17" pos:end="337:17">*</operator><operator pos:start="337:18" pos:end="337:18">)</operator><name pos:start="337:19" pos:end="337:29">acpi_tables</name><operator pos:start="337:30" pos:end="337:30">)</operator> <operator pos:start="337:32" pos:end="337:32">=</operator>

        <call pos:start="339:9" pos:end="339:62"><name pos:start="339:9" pos:end="339:19">cpu_to_le32</name><argument_list pos:start="339:20" pos:end="339:62">(<argument pos:start="339:21" pos:end="339:61"><expr pos:start="339:21" pos:end="339:61"><call pos:start="339:21" pos:end="339:57"><name pos:start="339:21" pos:end="339:31">le32_to_cpu</name><argument_list pos:start="339:32" pos:end="339:57">(<argument pos:start="339:33" pos:end="339:56"><expr pos:start="339:33" pos:end="339:56"><operator pos:start="339:33" pos:end="339:33">*</operator><operator pos:start="339:34" pos:end="339:34">(</operator><name pos:start="339:35" pos:end="339:42">uint16_t</name> <operator pos:start="339:44" pos:end="339:44">*</operator><operator pos:start="339:45" pos:end="339:45">)</operator><name pos:start="339:46" pos:end="339:56">acpi_tables</name></expr></argument>)</argument_list></call> <operator pos:start="339:59" pos:end="339:59">+</operator> <literal type="number" pos:start="339:61" pos:end="339:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:28"><expr pos:start="343:5" pos:end="343:27"><name pos:start="343:5" pos:end="343:19">acpi_tables_len</name> <operator pos:start="343:21" pos:end="343:21">=</operator> <name pos:start="343:23" pos:end="343:27">allen</name></expr>;</expr_stmt>



<label pos:start="347:1" pos:end="347:4"><name pos:start="347:1" pos:end="347:3">out</name>:</label>

    <expr_stmt pos:start="349:5" pos:end="349:26"><expr pos:start="349:5" pos:end="349:25"><call pos:start="349:5" pos:end="349:25"><name pos:start="349:5" pos:end="349:14">g_strfreev</name><argument_list pos:start="349:15" pos:end="349:25">(<argument pos:start="349:16" pos:end="349:24"><expr pos:start="349:16" pos:end="349:24"><name pos:start="349:16" pos:end="349:24">pathnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="353:5" pos:end="367:5"><if pos:start="353:5" pos:end="367:5">if <condition pos:start="353:8" pos:end="353:21">(<expr pos:start="353:9" pos:end="353:20"><name pos:start="353:9" pos:end="353:12">hdrs</name> <operator pos:start="353:14" pos:end="353:15">!=</operator> <name pos:start="353:17" pos:end="353:20">NULL</name></expr>)</condition> <block pos:start="353:23" pos:end="367:5">{<block_content pos:start="355:9" pos:end="365:41">

        <decl_stmt pos:start="355:9" pos:end="355:31"><decl pos:start="355:9" pos:end="355:30"><type pos:start="355:9" pos:end="355:28"><name pos:start="355:9" pos:end="355:26">QapiDeallocVisitor</name> <modifier pos:start="355:28" pos:end="355:28">*</modifier></type><name pos:start="355:29" pos:end="355:30">dv</name></decl>;</decl_stmt>



        <expr_stmt pos:start="359:9" pos:end="359:40"><expr pos:start="359:9" pos:end="359:39"><name pos:start="359:9" pos:end="359:10">dv</name> <operator pos:start="359:12" pos:end="359:12">=</operator> <call pos:start="359:14" pos:end="359:39"><name pos:start="359:14" pos:end="359:37">qapi_dealloc_visitor_new</name><argument_list pos:start="359:38" pos:end="359:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="361:9" pos:end="363:42"><expr pos:start="361:9" pos:end="363:41"><call pos:start="361:9" pos:end="363:41"><name pos:start="361:9" pos:end="361:35">visit_type_AcpiTableOptions</name><argument_list pos:start="361:36" pos:end="363:41">(<argument pos:start="361:37" pos:end="361:64"><expr pos:start="361:37" pos:end="361:64"><call pos:start="361:37" pos:end="361:64"><name pos:start="361:37" pos:end="361:60">qapi_dealloc_get_visitor</name><argument_list pos:start="361:61" pos:end="361:64">(<argument pos:start="361:62" pos:end="361:63"><expr pos:start="361:62" pos:end="361:63"><name pos:start="361:62" pos:end="361:63">dv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="361:67" pos:end="361:71"><expr pos:start="361:67" pos:end="361:71"><operator pos:start="361:67" pos:end="361:67">&amp;</operator><name pos:start="361:68" pos:end="361:71">hdrs</name></expr></argument>, <argument pos:start="361:74" pos:end="361:77"><expr pos:start="361:74" pos:end="361:77"><name pos:start="361:74" pos:end="361:77">NULL</name></expr></argument>,

                                    <argument pos:start="363:37" pos:end="363:40"><expr pos:start="363:37" pos:end="363:40"><name pos:start="363:37" pos:end="363:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:41"><expr pos:start="365:9" pos:end="365:40"><call pos:start="365:9" pos:end="365:40"><name pos:start="365:9" pos:end="365:36">qapi_dealloc_visitor_cleanup</name><argument_list pos:start="365:37" pos:end="365:40">(<argument pos:start="365:38" pos:end="365:39"><expr pos:start="365:38" pos:end="365:39"><name pos:start="365:38" pos:end="365:39">dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="371:5" pos:end="379:5"><if pos:start="371:5" pos:end="379:5">if <condition pos:start="371:8" pos:end="371:12">(<expr pos:start="371:9" pos:end="371:11"><name pos:start="371:9" pos:end="371:11">err</name></expr>)</condition> <block pos:start="371:14" pos:end="379:5">{<block_content pos:start="373:9" pos:end="377:18">

        <expr_stmt pos:start="373:9" pos:end="373:55"><expr pos:start="373:9" pos:end="373:54"><call pos:start="373:9" pos:end="373:54"><name pos:start="373:9" pos:end="373:15">fprintf</name><argument_list pos:start="373:16" pos:end="373:54">(<argument pos:start="373:17" pos:end="373:22"><expr pos:start="373:17" pos:end="373:22"><name pos:start="373:17" pos:end="373:22">stderr</name></expr></argument>, <argument pos:start="373:25" pos:end="373:30"><expr pos:start="373:25" pos:end="373:30"><literal type="string" pos:start="373:25" pos:end="373:30">"%s\n"</literal></expr></argument>, <argument pos:start="373:33" pos:end="373:53"><expr pos:start="373:33" pos:end="373:53"><call pos:start="373:33" pos:end="373:53"><name pos:start="373:33" pos:end="373:48">error_get_pretty</name><argument_list pos:start="373:49" pos:end="373:53">(<argument pos:start="373:50" pos:end="373:52"><expr pos:start="373:50" pos:end="373:52"><name pos:start="373:50" pos:end="373:52">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:24"><expr pos:start="375:9" pos:end="375:23"><call pos:start="375:9" pos:end="375:23"><name pos:start="375:9" pos:end="375:18">error_free</name><argument_list pos:start="375:19" pos:end="375:23">(<argument pos:start="375:20" pos:end="375:22"><expr pos:start="375:20" pos:end="375:22"><name pos:start="375:20" pos:end="375:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="377:9" pos:end="377:18">return <expr pos:start="377:16" pos:end="377:17"><operator pos:start="377:16" pos:end="377:16">-</operator><literal type="number" pos:start="377:17" pos:end="377:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="381:5" pos:end="381:13">return <expr pos:start="381:12" pos:end="381:12"><literal type="number" pos:start="381:12" pos:end="381:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
