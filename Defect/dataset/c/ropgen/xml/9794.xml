<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9794.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:29">sdp_svc_search</name><parameter_list pos:start="1:30" pos:end="3:62">(<parameter pos:start="1:31" pos:end="1:62"><decl pos:start="1:31" pos:end="1:62"><type pos:start="1:31" pos:end="1:62"><name pos:start="1:31" pos:end="1:57"><name pos:start="1:31" pos:end="1:36">struct</name> <name pos:start="1:38" pos:end="1:57">bt_l2cap_sdp_state_s</name></name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">sdp</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:28"><decl pos:start="3:17" pos:end="3:28"><type pos:start="3:17" pos:end="3:28"><name pos:start="3:17" pos:end="3:23">uint8_t</name> <modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:28">rsp</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:43">uint8_t</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:48">req</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:61"><decl pos:start="3:51" pos:end="3:61"><type pos:start="3:51" pos:end="3:61"><name pos:start="3:51" pos:end="3:57">ssize_t</name></type> <name pos:start="3:59" pos:end="3:61">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="143:1">{<block_content pos:start="7:5" pos:end="141:15">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">ssize_t</name></type> <name pos:start="7:13" pos:end="7:18">seqlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:16">count</name></decl>, <decl pos:start="9:19" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:23">start</name></decl>, <decl pos:start="9:26" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:28">end</name></decl>, <decl pos:start="9:31" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:31" pos:end="9:33">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type> <name pos:start="11:13" pos:end="11:18">handle</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:28">/* Perform the search */</comment>

    <for pos:start="17:5" pos:end="19:39">for <control pos:start="17:9" pos:end="17:40">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:34"><expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:33"><name pos:start="17:21" pos:end="17:23">sdp</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:33">services</name></name></expr>;</condition> <incr pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:36">i</name> <operator pos:start="17:38" pos:end="17:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="19:9" pos:end="19:39"><block_content pos:start="19:9" pos:end="19:39">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:11">sdp</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:25">service_list</name><index pos:start="19:26" pos:end="19:28">[<expr pos:start="19:27" pos:end="19:27"><name pos:start="19:27" pos:end="19:27">i</name></expr>]</index></name><operator pos:start="19:29" pos:end="19:29">.</operator><name pos:start="19:30" pos:end="19:34">match</name> <operator pos:start="19:36" pos:end="19:36">=</operator> <literal type="number" pos:start="19:38" pos:end="19:38">0</literal></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="23:5" pos:end="25:35"><if pos:start="23:5" pos:end="25:35">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">len</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">1</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:35"><block_content pos:start="25:9" pos:end="25:35">

        <return pos:start="25:9" pos:end="25:35">return <expr pos:start="25:16" pos:end="25:34"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="47:35"><if pos:start="27:5" pos:end="45:5">if <condition pos:start="27:8" pos:end="27:50">(<expr pos:start="27:9" pos:end="27:49"><operator pos:start="27:9" pos:end="27:9">(</operator><operator pos:start="27:10" pos:end="27:10">*</operator><name pos:start="27:11" pos:end="27:13">req</name> <operator pos:start="27:15" pos:end="27:15">&amp;</operator> <operator pos:start="27:17" pos:end="27:17">~</operator><name pos:start="27:18" pos:end="27:31">SDP_DSIZE_MASK</name><operator pos:start="27:32" pos:end="27:32">)</operator> <operator pos:start="27:34" pos:end="27:35">==</operator> <name pos:start="27:37" pos:end="27:49">SDP_DTYPE_SEQ</name></expr>)</condition> <block pos:start="27:52" pos:end="45:5">{<block_content pos:start="29:9" pos:end="43:43">

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:14">seqlen</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:40"><name pos:start="29:18" pos:end="29:28">sdp_datalen</name><argument_list pos:start="29:29" pos:end="29:40">(<argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:33">req</name></expr></argument>, <argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:39"><if pos:start="31:9" pos:end="33:39">if <condition pos:start="31:12" pos:end="31:39">(<expr pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:18">seqlen</name> <operator pos:start="31:20" pos:end="31:20">&lt;</operator> <literal type="number" pos:start="31:22" pos:end="31:22">3</literal> <operator pos:start="31:24" pos:end="31:25">||</operator> <name pos:start="31:27" pos:end="31:29">len</name> <operator pos:start="31:31" pos:end="31:31">&lt;</operator> <name pos:start="31:33" pos:end="31:38">seqlen</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><operator pos:start="33:20" pos:end="33:20">-</operator><name pos:start="33:21" pos:end="33:38">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:11">len</name> <operator pos:start="35:13" pos:end="35:14">-=</operator> <name pos:start="35:16" pos:end="35:21">seqlen</name></expr>;</expr_stmt>



        <while pos:start="39:9" pos:end="43:43">while <condition pos:start="39:15" pos:end="39:22">(<expr pos:start="39:16" pos:end="39:21"><name pos:start="39:16" pos:end="39:21">seqlen</name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="43:43"><block_content pos:start="41:13" pos:end="43:43">

            <if_stmt pos:start="41:13" pos:end="43:43"><if pos:start="41:13" pos:end="43:43">if <condition pos:start="41:16" pos:end="41:50">(<expr pos:start="41:17" pos:end="41:49"><call pos:start="41:17" pos:end="41:49"><name pos:start="41:17" pos:end="41:29">sdp_svc_match</name><argument_list pos:start="41:30" pos:end="41:49">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">sdp</name></expr></argument>, <argument pos:start="41:36" pos:end="41:39"><expr pos:start="41:36" pos:end="41:39"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:39">req</name></expr></argument>, <argument pos:start="41:42" pos:end="41:48"><expr pos:start="41:42" pos:end="41:48"><operator pos:start="41:42" pos:end="41:42">&amp;</operator><name pos:start="41:43" pos:end="41:48">seqlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:43"><block_content pos:start="43:17" pos:end="43:43">

                <return pos:start="43:17" pos:end="43:43">return <expr pos:start="43:24" pos:end="43:42"><operator pos:start="43:24" pos:end="43:24">-</operator><name pos:start="43:25" pos:end="43:42">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="47:35">else if <condition pos:start="45:15" pos:end="45:49">(<expr pos:start="45:16" pos:end="45:48"><call pos:start="45:16" pos:end="45:48"><name pos:start="45:16" pos:end="45:28">sdp_svc_match</name><argument_list pos:start="45:29" pos:end="45:48">(<argument pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:32">sdp</name></expr></argument>, <argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><operator pos:start="45:35" pos:end="45:35">&amp;</operator><name pos:start="45:36" pos:end="45:38">req</name></expr></argument>, <argument pos:start="45:41" pos:end="45:47"><expr pos:start="45:41" pos:end="45:47"><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:47">seqlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:35"><block_content pos:start="47:9" pos:end="47:35">

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="53:35"><if pos:start="51:5" pos:end="53:35">if <condition pos:start="51:8" pos:end="51:16">(<expr pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">len</name> <operator pos:start="51:13" pos:end="51:13">&lt;</operator> <literal type="number" pos:start="51:15" pos:end="51:15">3</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:35"><block_content pos:start="53:9" pos:end="53:35">

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><operator pos:start="53:16" pos:end="53:16">-</operator><name pos:start="53:17" pos:end="53:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:7">max</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <operator pos:start="55:11" pos:end="55:11">(</operator><name pos:start="55:12" pos:end="55:17"><name pos:start="55:12" pos:end="55:14">req</name><index pos:start="55:15" pos:end="55:17">[<expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>]</index></name> <operator pos:start="55:19" pos:end="55:20">&lt;&lt;</operator> <literal type="number" pos:start="55:22" pos:end="55:22">8</literal><operator pos:start="55:23" pos:end="55:23">)</operator> <operator pos:start="55:25" pos:end="55:25">|</operator> <name pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:29">req</name><index pos:start="55:30" pos:end="55:32">[<expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:13"><expr pos:start="57:5" pos:end="57:12"><name pos:start="57:5" pos:end="57:7">req</name> <operator pos:start="57:9" pos:end="57:10">+=</operator> <literal type="number" pos:start="57:12" pos:end="57:12">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:13"><expr pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:7">len</name> <operator pos:start="59:9" pos:end="59:10">-=</operator> <literal type="number" pos:start="59:12" pos:end="59:12">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="75:18"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:13">(<expr pos:start="63:9" pos:end="63:12"><operator pos:start="63:9" pos:end="63:9">*</operator><name pos:start="63:10" pos:end="63:12">req</name></expr>)</condition> <block pos:start="63:15" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:45">

        <if_stmt pos:start="65:9" pos:end="67:39"><if pos:start="65:9" pos:end="67:39">if <condition pos:start="65:12" pos:end="65:31">(<expr pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:15">len</name> <operator pos:start="65:17" pos:end="65:18">&lt;=</operator> <sizeof pos:start="65:20" pos:end="65:30">sizeof<argument_list pos:start="65:26" pos:end="65:30">(<argument pos:start="65:27" pos:end="65:29"><expr pos:start="65:27" pos:end="65:29"><name pos:start="65:27" pos:end="65:29">int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:39"><block_content pos:start="67:13" pos:end="67:39">

            <return pos:start="67:13" pos:end="67:39">return <expr pos:start="67:20" pos:end="67:38"><operator pos:start="67:20" pos:end="67:20">-</operator><name pos:start="67:21" pos:end="67:38">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:27"><expr pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:11">len</name> <operator pos:start="69:13" pos:end="69:14">-=</operator> <sizeof pos:start="69:16" pos:end="69:26">sizeof<argument_list pos:start="69:22" pos:end="69:26">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:14">memcpy</name><argument_list pos:start="71:15" pos:end="71:44">(<argument pos:start="71:16" pos:end="71:21"><expr pos:start="71:16" pos:end="71:21"><operator pos:start="71:16" pos:end="71:16">&amp;</operator><name pos:start="71:17" pos:end="71:21">start</name></expr></argument>, <argument pos:start="71:24" pos:end="71:30"><expr pos:start="71:24" pos:end="71:30"><name pos:start="71:24" pos:end="71:26">req</name> <operator pos:start="71:28" pos:end="71:28">+</operator> <literal type="number" pos:start="71:30" pos:end="71:30">1</literal></expr></argument>, <argument pos:start="71:33" pos:end="71:43"><expr pos:start="71:33" pos:end="71:43"><sizeof pos:start="71:33" pos:end="71:43">sizeof<argument_list pos:start="71:39" pos:end="71:43">(<argument pos:start="71:40" pos:end="71:42"><expr pos:start="71:40" pos:end="71:42"><name pos:start="71:40" pos:end="71:42">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="75:18">else<block type="pseudo" pos:start="75:9" pos:end="75:18"><block_content pos:start="75:9" pos:end="75:18">

        <expr_stmt pos:start="75:9" pos:end="75:18"><expr pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:13">start</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="79:5" pos:end="81:35"><if pos:start="79:5" pos:end="81:35">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">len</name> <operator pos:start="79:13" pos:end="79:13">&gt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">1</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:35"><block_content pos:start="81:9" pos:end="81:35">

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><operator pos:start="81:16" pos:end="81:16">-</operator><name pos:start="81:17" pos:end="81:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:28">/* Output the results */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:12"><expr pos:start="87:5" pos:end="87:11"><name pos:start="87:5" pos:end="87:7">len</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <literal type="number" pos:start="87:11" pos:end="87:11">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:14"><expr pos:start="89:5" pos:end="89:13"><name pos:start="89:5" pos:end="89:9">count</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <literal type="number" pos:start="89:13" pos:end="89:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:16"><expr pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:7">end</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <name pos:start="91:11" pos:end="91:15">start</name></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="113:9">for <control pos:start="93:9" pos:end="93:40">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:34"><expr pos:start="93:17" pos:end="93:33"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <name pos:start="93:21" pos:end="93:33"><name pos:start="93:21" pos:end="93:23">sdp</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:33">services</name></name></expr>;</condition> <incr pos:start="93:36" pos:end="93:39"><expr pos:start="93:36" pos:end="93:39"><name pos:start="93:36" pos:end="93:36">i</name> <operator pos:start="93:38" pos:end="93:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="95:9" pos:end="113:9"><block_content pos:start="95:9" pos:end="113:9">

        <if_stmt pos:start="95:9" pos:end="113:9"><if pos:start="95:9" pos:end="113:9">if <condition pos:start="95:12" pos:end="95:39">(<expr pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:32"><name pos:start="95:13" pos:end="95:15">sdp</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:29">service_list</name><index pos:start="95:30" pos:end="95:32">[<expr pos:start="95:31" pos:end="95:31"><name pos:start="95:31" pos:end="95:31">i</name></expr>]</index></name><operator pos:start="95:33" pos:end="95:33">.</operator><name pos:start="95:34" pos:end="95:38">match</name></expr>)</condition> <block pos:start="95:41" pos:end="113:9">{<block_content pos:start="97:13" pos:end="111:21">

            <if_stmt pos:start="97:13" pos:end="107:13"><if pos:start="97:13" pos:end="107:13">if <condition pos:start="97:16" pos:end="97:78">(<expr pos:start="97:17" pos:end="97:77"><name pos:start="97:17" pos:end="97:21">count</name> <operator pos:start="97:23" pos:end="97:24">&gt;=</operator> <name pos:start="97:26" pos:end="97:30">start</name> <operator pos:start="97:32" pos:end="97:33">&amp;&amp;</operator> <name pos:start="97:35" pos:end="97:39">count</name> <operator pos:start="97:41" pos:end="97:41">&lt;</operator> <name pos:start="97:43" pos:end="97:45">max</name> <operator pos:start="97:47" pos:end="97:48">&amp;&amp;</operator> <name pos:start="97:50" pos:end="97:52">len</name> <operator pos:start="97:54" pos:end="97:54">+</operator> <literal type="number" pos:start="97:56" pos:end="97:56">4</literal> <operator pos:start="97:58" pos:end="97:58">&lt;</operator> <name pos:start="97:60" pos:end="97:77">MAX_RSP_PARAM_SIZE</name></expr>)</condition> <block pos:start="97:80" pos:end="107:13">{<block_content pos:start="99:17" pos:end="105:32">

                <expr_stmt pos:start="99:17" pos:end="99:27"><expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:22">handle</name> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:26">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:46"><expr pos:start="101:17" pos:end="101:45"><call pos:start="101:17" pos:end="101:45"><name pos:start="101:17" pos:end="101:22">memcpy</name><argument_list pos:start="101:23" pos:end="101:45">(<argument pos:start="101:24" pos:end="101:32"><expr pos:start="101:24" pos:end="101:32"><name pos:start="101:24" pos:end="101:26">rsp</name> <operator pos:start="101:28" pos:end="101:28">+</operator> <name pos:start="101:30" pos:end="101:32">len</name></expr></argument>, <argument pos:start="101:35" pos:end="101:41"><expr pos:start="101:35" pos:end="101:41"><operator pos:start="101:35" pos:end="101:35">&amp;</operator><name pos:start="101:36" pos:end="101:41">handle</name></expr></argument>, <argument pos:start="101:44" pos:end="101:44"><expr pos:start="101:44" pos:end="101:44"><literal type="number" pos:start="101:44" pos:end="101:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:25"><expr pos:start="103:17" pos:end="103:24"><name pos:start="103:17" pos:end="103:19">len</name> <operator pos:start="103:21" pos:end="103:22">+=</operator> <literal type="number" pos:start="103:24" pos:end="103:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:32"><expr pos:start="105:17" pos:end="105:31"><name pos:start="105:17" pos:end="105:19">end</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:27">count</name> <operator pos:start="105:29" pos:end="105:29">+</operator> <literal type="number" pos:start="105:31" pos:end="105:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:21"><expr pos:start="111:13" pos:end="111:20"><name pos:start="111:13" pos:end="111:17">count</name> <operator pos:start="111:19" pos:end="111:20">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>



    <expr_stmt pos:start="117:5" pos:end="117:24"><expr pos:start="117:5" pos:end="117:23"><name pos:start="117:5" pos:end="117:10"><name pos:start="117:5" pos:end="117:7">rsp</name><index pos:start="117:8" pos:end="117:10">[<expr pos:start="117:9" pos:end="117:9"><literal type="number" pos:start="117:9" pos:end="117:9">0</literal></expr>]</index></name> <operator pos:start="117:12" pos:end="117:12">=</operator> <name pos:start="117:14" pos:end="117:18">count</name> <operator pos:start="117:20" pos:end="117:21">&gt;&gt;</operator> <literal type="number" pos:start="117:23" pos:end="117:23">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:26"><expr pos:start="119:5" pos:end="119:25"><name pos:start="119:5" pos:end="119:10"><name pos:start="119:5" pos:end="119:7">rsp</name><index pos:start="119:8" pos:end="119:10">[<expr pos:start="119:9" pos:end="119:9"><literal type="number" pos:start="119:9" pos:end="119:9">1</literal></expr>]</index></name> <operator pos:start="119:12" pos:end="119:12">=</operator> <name pos:start="119:14" pos:end="119:18">count</name> <operator pos:start="119:20" pos:end="119:20">&amp;</operator> <literal type="number" pos:start="119:22" pos:end="119:25">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:32"><expr pos:start="121:5" pos:end="121:31"><name pos:start="121:5" pos:end="121:10"><name pos:start="121:5" pos:end="121:7">rsp</name><index pos:start="121:8" pos:end="121:10">[<expr pos:start="121:9" pos:end="121:9"><literal type="number" pos:start="121:9" pos:end="121:9">2</literal></expr>]</index></name> <operator pos:start="121:12" pos:end="121:12">=</operator> <operator pos:start="121:14" pos:end="121:14">(</operator><name pos:start="121:15" pos:end="121:17">end</name> <operator pos:start="121:19" pos:end="121:19">-</operator> <name pos:start="121:21" pos:end="121:25">start</name><operator pos:start="121:26" pos:end="121:26">)</operator> <operator pos:start="121:28" pos:end="121:29">&gt;&gt;</operator> <literal type="number" pos:start="121:31" pos:end="121:31">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:34"><expr pos:start="123:5" pos:end="123:33"><name pos:start="123:5" pos:end="123:10"><name pos:start="123:5" pos:end="123:7">rsp</name><index pos:start="123:8" pos:end="123:10">[<expr pos:start="123:9" pos:end="123:9"><literal type="number" pos:start="123:9" pos:end="123:9">3</literal></expr>]</index></name> <operator pos:start="123:12" pos:end="123:12">=</operator> <operator pos:start="123:14" pos:end="123:14">(</operator><name pos:start="123:15" pos:end="123:17">end</name> <operator pos:start="123:19" pos:end="123:19">-</operator> <name pos:start="123:21" pos:end="123:25">start</name><operator pos:start="123:26" pos:end="123:26">)</operator> <operator pos:start="123:28" pos:end="123:28">&amp;</operator> <literal type="number" pos:start="123:30" pos:end="123:33">0xff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="137:24"><if pos:start="127:5" pos:end="135:5">if <condition pos:start="127:8" pos:end="127:20">(<expr pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:11">end</name> <operator pos:start="127:13" pos:end="127:13">&lt;</operator> <name pos:start="127:15" pos:end="127:19">count</name></expr>)</condition> <block pos:start="127:22" pos:end="135:5">{<block_content pos:start="129:9" pos:end="133:17">

        <expr_stmt pos:start="129:9" pos:end="129:34"><expr pos:start="129:9" pos:end="129:33"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:11">rsp</name><index pos:start="129:12" pos:end="129:19">[<expr pos:start="129:13" pos:end="129:18"><name pos:start="129:13" pos:end="129:15">len</name> <operator pos:start="129:17" pos:end="129:18">++</operator></expr>]</index></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <sizeof pos:start="129:23" pos:end="129:33">sizeof<argument_list pos:start="129:29" pos:end="129:33">(<argument pos:start="129:30" pos:end="129:32"><expr pos:start="129:30" pos:end="129:32"><name pos:start="129:30" pos:end="129:32">int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:45"><expr pos:start="131:9" pos:end="131:44"><call pos:start="131:9" pos:end="131:44"><name pos:start="131:9" pos:end="131:14">memcpy</name><argument_list pos:start="131:15" pos:end="131:44">(<argument pos:start="131:16" pos:end="131:24"><expr pos:start="131:16" pos:end="131:24"><name pos:start="131:16" pos:end="131:18">rsp</name> <operator pos:start="131:20" pos:end="131:20">+</operator> <name pos:start="131:22" pos:end="131:24">len</name></expr></argument>, <argument pos:start="131:27" pos:end="131:30"><expr pos:start="131:27" pos:end="131:30"><operator pos:start="131:27" pos:end="131:27">&amp;</operator><name pos:start="131:28" pos:end="131:30">end</name></expr></argument>, <argument pos:start="131:33" pos:end="131:43"><expr pos:start="131:33" pos:end="131:43"><sizeof pos:start="131:33" pos:end="131:43">sizeof<argument_list pos:start="131:39" pos:end="131:43">(<argument pos:start="131:40" pos:end="131:42"><expr pos:start="131:40" pos:end="131:42"><name pos:start="131:40" pos:end="131:42">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:17"><expr pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:11">len</name> <operator pos:start="133:13" pos:end="133:14">+=</operator> <literal type="number" pos:start="133:16" pos:end="133:16">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="137:24">else<block type="pseudo" pos:start="137:9" pos:end="137:24"><block_content pos:start="137:9" pos:end="137:24">

        <expr_stmt pos:start="137:9" pos:end="137:24"><expr pos:start="137:9" pos:end="137:23"><name pos:start="137:9" pos:end="137:19"><name pos:start="137:9" pos:end="137:11">rsp</name><index pos:start="137:12" pos:end="137:19">[<expr pos:start="137:13" pos:end="137:18"><name pos:start="137:13" pos:end="137:15">len</name> <operator pos:start="137:17" pos:end="137:18">++</operator></expr>]</index></name> <operator pos:start="137:21" pos:end="137:21">=</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <return pos:start="141:5" pos:end="141:15">return <expr pos:start="141:12" pos:end="141:14"><name pos:start="141:12" pos:end="141:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
