<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2511.c" pos:tabs="8"><function pos:start="1:1" pos:end="299:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">nbd_trip</name><parameter_list pos:start="1:13" pos:end="5:27">(<parameter pos:start="1:14" pos:end="1:33"><decl pos:start="1:14" pos:end="1:33"><type pos:start="1:14" pos:end="1:33"><name pos:start="1:14" pos:end="1:29">BlockDriverState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:33">bs</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:44">csock</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:51">off_t</name></type> <name pos:start="1:53" pos:end="1:56">size</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:32"><decl pos:start="3:14" pos:end="3:32"><type pos:start="3:14" pos:end="3:32"><name pos:start="3:14" pos:end="3:21">uint64_t</name></type> <name pos:start="3:23" pos:end="3:32">dev_offset</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:51"><decl pos:start="3:35" pos:end="3:51"><type pos:start="3:35" pos:end="3:51"><name pos:start="3:35" pos:end="3:42">uint32_t</name></type> <name pos:start="3:44" pos:end="3:51">nbdflags</name></decl></parameter>,

             <parameter pos:start="5:14" pos:end="5:26"><decl pos:start="5:14" pos:end="5:26"><type pos:start="5:14" pos:end="5:26"><name pos:start="5:14" pos:end="5:20">uint8_t</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:26">data</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="299:1">{<block_content pos:start="9:5" pos:end="297:13">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">nbd_request</name></name></type> <name pos:start="9:24" pos:end="9:30">request</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">nbd_reply</name></name></type> <name pos:start="11:22" pos:end="11:26">reply</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><call pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:9">TRACE</name><argument_list pos:start="17:10" pos:end="17:29">(<argument pos:start="17:11" pos:end="17:28"><expr pos:start="17:11" pos:end="17:28"><literal type="string" pos:start="17:11" pos:end="17:28">"Reading request."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="23:18"><if pos:start="21:5" pos:end="23:18">if <condition pos:start="21:8" pos:end="21:51">(<expr pos:start="21:9" pos:end="21:50"><call pos:start="21:9" pos:end="21:44"><name pos:start="21:9" pos:end="21:27">nbd_receive_request</name><argument_list pos:start="21:28" pos:end="21:44">(<argument pos:start="21:29" pos:end="21:33"><expr pos:start="21:29" pos:end="21:33"><name pos:start="21:29" pos:end="21:33">csock</name></expr></argument>, <argument pos:start="21:36" pos:end="21:43"><expr pos:start="21:36" pos:end="21:43"><operator pos:start="21:36" pos:end="21:36">&amp;</operator><name pos:start="21:37" pos:end="21:43">request</name></expr></argument>)</argument_list></call> <operator pos:start="21:46" pos:end="21:47">==</operator> <operator pos:start="21:49" pos:end="21:49">-</operator><literal type="number" pos:start="21:50" pos:end="21:50">1</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:18"><block_content pos:start="23:9" pos:end="23:18">

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:55">(<expr pos:start="27:9" pos:end="27:54"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:15">request</name><operator pos:start="27:16" pos:end="27:16">.</operator><name pos:start="27:17" pos:end="27:19">len</name></name> <operator pos:start="27:21" pos:end="27:21">+</operator> <name pos:start="27:23" pos:end="27:36">NBD_REPLY_SIZE</name> <operator pos:start="27:38" pos:end="27:38">&gt;</operator> <name pos:start="27:40" pos:end="27:54">NBD_BUFFER_SIZE</name></expr>)</condition> <block pos:start="27:57" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:18">

        <expr_stmt pos:start="29:9" pos:end="31:59"><expr pos:start="29:9" pos:end="31:58"><call pos:start="29:9" pos:end="31:58"><name pos:start="29:9" pos:end="29:11">LOG</name><argument_list pos:start="29:12" pos:end="31:58">(<argument pos:start="29:13" pos:end="29:50"><expr pos:start="29:13" pos:end="29:50"><literal type="string" pos:start="29:13" pos:end="29:50">"len (%u) is larger than max len (%u)"</literal></expr></argument>,

            <argument pos:start="31:13" pos:end="31:40"><expr pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:19">request</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:23">len</name></name> <operator pos:start="31:25" pos:end="31:25">+</operator> <name pos:start="31:27" pos:end="31:40">NBD_REPLY_SIZE</name></expr></argument>, <argument pos:start="31:43" pos:end="31:57"><expr pos:start="31:43" pos:end="31:57"><name pos:start="31:43" pos:end="31:57">NBD_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:13">errno</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:52">(<expr pos:start="41:9" pos:end="41:51"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:16">request</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:21">from</name></name> <operator pos:start="41:23" pos:end="41:23">+</operator> <name pos:start="41:25" pos:end="41:35"><name pos:start="41:25" pos:end="41:31">request</name><operator pos:start="41:32" pos:end="41:32">.</operator><name pos:start="41:33" pos:end="41:35">len</name></name><operator pos:start="41:36" pos:end="41:36">)</operator> <operator pos:start="41:38" pos:end="41:38">&lt;</operator> <name pos:start="41:40" pos:end="41:51"><name pos:start="41:40" pos:end="41:46">request</name><operator pos:start="41:47" pos:end="41:47">.</operator><name pos:start="41:48" pos:end="41:51">from</name></name></expr>)</condition> <block pos:start="41:54" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:18">

        <expr_stmt pos:start="43:9" pos:end="45:46"><expr pos:start="43:9" pos:end="45:45"><call pos:start="43:9" pos:end="45:45"><name pos:start="43:9" pos:end="43:11">LOG</name><argument_list pos:start="43:12" pos:end="45:45">(<argument pos:start="43:13" pos:end="45:44"><expr pos:start="43:13" pos:end="45:44"><literal type="string" pos:start="43:13" pos:end="43:41">"integer overflow detected! "</literal>

            <literal type="string" pos:start="45:13" pos:end="45:44">"you're probably being attacked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:13">errno</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="69:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="55:44">(<expr pos:start="55:9" pos:end="55:43"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:21"><name pos:start="55:10" pos:end="55:16">request</name><operator pos:start="55:17" pos:end="55:17">.</operator><name pos:start="55:18" pos:end="55:21">from</name></name> <operator pos:start="55:23" pos:end="55:23">+</operator> <name pos:start="55:25" pos:end="55:35"><name pos:start="55:25" pos:end="55:31">request</name><operator pos:start="55:32" pos:end="55:32">.</operator><name pos:start="55:33" pos:end="55:35">len</name></name><operator pos:start="55:36" pos:end="55:36">)</operator> <operator pos:start="55:38" pos:end="55:38">&gt;</operator> <name pos:start="55:40" pos:end="55:43">size</name></expr>)</condition> <block pos:start="55:46" pos:end="69:5">{<block_content pos:start="57:13" pos:end="67:18">

            <expr_stmt pos:start="57:13" pos:end="61:75"><expr pos:start="57:13" pos:end="61:74"><call pos:start="57:13" pos:end="61:74"><name pos:start="57:13" pos:end="57:15">LOG</name><argument_list pos:start="57:16" pos:end="61:74">(<argument pos:start="57:17" pos:end="59:37"><expr pos:start="57:17" pos:end="59:37"><literal type="string" pos:start="57:17" pos:end="57:25">"From: %"</literal> <name pos:start="57:27" pos:end="57:32">PRIu64</name> <literal type="string" pos:start="57:34" pos:end="57:53">", Len: %u, Size: %"</literal> <name pos:start="57:55" pos:end="57:60">PRIu64</name>

            <literal type="string" pos:start="59:13" pos:end="59:25">", Offset: %"</literal> <name pos:start="59:27" pos:end="59:32">PRIu64</name> <literal type="string" pos:start="59:34" pos:end="59:37">"\n"</literal></expr></argument>,

                    <argument pos:start="61:21" pos:end="61:32"><expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:27">request</name><operator pos:start="61:28" pos:end="61:28">.</operator><name pos:start="61:29" pos:end="61:32">from</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:45"><expr pos:start="61:35" pos:end="61:45"><name pos:start="61:35" pos:end="61:45"><name pos:start="61:35" pos:end="61:41">request</name><operator pos:start="61:42" pos:end="61:42">.</operator><name pos:start="61:43" pos:end="61:45">len</name></name></expr></argument>, <argument pos:start="61:48" pos:end="61:61"><expr pos:start="61:48" pos:end="61:61"><operator pos:start="61:48" pos:end="61:48">(</operator><name pos:start="61:49" pos:end="61:56">uint64_t</name><operator pos:start="61:57" pos:end="61:57">)</operator><name pos:start="61:58" pos:end="61:61">size</name></expr></argument>, <argument pos:start="61:64" pos:end="61:73"><expr pos:start="61:64" pos:end="61:73"><name pos:start="61:64" pos:end="61:73">dev_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><call pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:11">LOG</name><argument_list pos:start="63:12" pos:end="63:56">(<argument pos:start="63:13" pos:end="63:55"><expr pos:start="63:13" pos:end="63:55"><literal type="string" pos:start="63:13" pos:end="63:55">"requested operation past EOF--bad client?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:13">errno</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><call pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:9">TRACE</name><argument_list pos:start="73:10" pos:end="73:26">(<argument pos:start="73:11" pos:end="73:25"><expr pos:start="73:11" pos:end="73:25"><literal type="string" pos:start="73:11" pos:end="73:25">"Decoding type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:9">reply</name><operator pos:start="77:10" pos:end="77:10">.</operator><name pos:start="77:11" pos:end="77:16">handle</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:33"><name pos:start="77:20" pos:end="77:26">request</name><operator pos:start="77:27" pos:end="77:27">.</operator><name pos:start="77:28" pos:end="77:33">handle</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:20"><expr pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:9">reply</name><operator pos:start="79:10" pos:end="79:10">.</operator><name pos:start="79:11" pos:end="79:15">error</name></name> <operator pos:start="79:17" pos:end="79:17">=</operator> <literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr>;</expr_stmt>



    <switch pos:start="83:5" pos:end="289:5">switch <condition pos:start="83:12" pos:end="83:48">(<expr pos:start="83:13" pos:end="83:47"><name pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:19">request</name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:24">type</name></name> <operator pos:start="83:26" pos:end="83:26">&amp;</operator> <name pos:start="83:28" pos:end="83:47">NBD_CMD_MASK_COMMAND</name></expr>)</condition> <block pos:start="83:50" pos:end="289:5">{<block_content pos:start="85:5" pos:end="287:18">

    <case pos:start="85:5" pos:end="85:22">case <expr pos:start="85:10" pos:end="85:21"><name pos:start="85:10" pos:end="85:21">NBD_CMD_READ</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:38"><expr pos:start="87:9" pos:end="87:37"><call pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:13">TRACE</name><argument_list pos:start="87:14" pos:end="87:37">(<argument pos:start="87:15" pos:end="87:36"><expr pos:start="87:15" pos:end="87:36"><literal type="string" pos:start="87:15" pos:end="87:36">"Request type is READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="91:9" pos:end="95:43"><expr pos:start="91:9" pos:end="95:42"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="95:42"><name pos:start="91:15" pos:end="91:23">bdrv_read</name><argument_list pos:start="91:24" pos:end="95:42">(<argument pos:start="91:25" pos:end="91:26"><expr pos:start="91:25" pos:end="91:26"><name pos:start="91:25" pos:end="91:26">bs</name></expr></argument>, <argument pos:start="91:29" pos:end="91:61"><expr pos:start="91:29" pos:end="91:61"><operator pos:start="91:29" pos:end="91:29">(</operator><name pos:start="91:30" pos:end="91:41"><name pos:start="91:30" pos:end="91:36">request</name><operator pos:start="91:37" pos:end="91:37">.</operator><name pos:start="91:38" pos:end="91:41">from</name></name> <operator pos:start="91:43" pos:end="91:43">+</operator> <name pos:start="91:45" pos:end="91:54">dev_offset</name><operator pos:start="91:55" pos:end="91:55">)</operator> <operator pos:start="91:57" pos:end="91:57">/</operator> <literal type="number" pos:start="91:59" pos:end="91:61">512</literal></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:45"><expr pos:start="93:25" pos:end="93:45"><name pos:start="93:25" pos:end="93:28">data</name> <operator pos:start="93:30" pos:end="93:30">+</operator> <name pos:start="93:32" pos:end="93:45">NBD_REPLY_SIZE</name></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:41"><expr pos:start="95:25" pos:end="95:41"><name pos:start="95:25" pos:end="95:35"><name pos:start="95:25" pos:end="95:31">request</name><operator pos:start="95:32" pos:end="95:32">.</operator><name pos:start="95:33" pos:end="95:35">len</name></name> <operator pos:start="95:37" pos:end="95:37">/</operator> <literal type="number" pos:start="95:39" pos:end="95:41">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="105:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:20">(<expr pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">&lt;</operator> <literal type="number" pos:start="97:19" pos:end="97:19">0</literal></expr>)</condition> <block pos:start="97:22" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:28">

            <expr_stmt pos:start="99:13" pos:end="99:44"><expr pos:start="99:13" pos:end="99:43"><call pos:start="99:13" pos:end="99:43"><name pos:start="99:13" pos:end="99:15">LOG</name><argument_list pos:start="99:16" pos:end="99:43">(<argument pos:start="99:17" pos:end="99:42"><expr pos:start="99:17" pos:end="99:42"><literal type="string" pos:start="99:17" pos:end="99:42">"reading from file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:17">reply</name><operator pos:start="101:18" pos:end="101:18">.</operator><name pos:start="101:19" pos:end="101:23">error</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <operator pos:start="101:27" pos:end="101:27">-</operator><name pos:start="101:28" pos:end="101:30">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:28"><expr pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:19">request</name><operator pos:start="103:20" pos:end="103:20">.</operator><name pos:start="103:21" pos:end="103:23">len</name></name> <operator pos:start="103:25" pos:end="103:25">=</operator> <literal type="number" pos:start="103:27" pos:end="103:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><call pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:13">TRACE</name><argument_list pos:start="109:14" pos:end="109:45">(<argument pos:start="109:15" pos:end="109:31"><expr pos:start="109:15" pos:end="109:31"><literal type="string" pos:start="109:15" pos:end="109:31">"Read %u byte(s)"</literal></expr></argument>, <argument pos:start="109:34" pos:end="109:44"><expr pos:start="109:34" pos:end="109:44"><name pos:start="109:34" pos:end="109:44"><name pos:start="109:34" pos:end="109:40">request</name><operator pos:start="109:41" pos:end="109:41">.</operator><name pos:start="109:42" pos:end="109:44">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="113:9" pos:end="121:11">/* Reply

           [ 0 ..  3]    magic   (NBD_REPLY_MAGIC)

           [ 4 ..  7]    error   (0 == no error)

           [ 7 .. 15]    handle

         */</comment>



        <expr_stmt pos:start="125:9" pos:end="125:55"><expr pos:start="125:9" pos:end="125:54"><call pos:start="125:9" pos:end="125:54"><name pos:start="125:9" pos:end="125:20">cpu_to_be32w</name><argument_list pos:start="125:21" pos:end="125:54">(<argument pos:start="125:22" pos:end="125:36"><expr pos:start="125:22" pos:end="125:36"><operator pos:start="125:22" pos:end="125:22">(</operator><name pos:start="125:23" pos:end="125:30">uint32_t</name><operator pos:start="125:31" pos:end="125:31">*</operator><operator pos:start="125:32" pos:end="125:32">)</operator><name pos:start="125:33" pos:end="125:36">data</name></expr></argument>, <argument pos:start="125:39" pos:end="125:53"><expr pos:start="125:39" pos:end="125:53"><name pos:start="125:39" pos:end="125:53">NBD_REPLY_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:57"><expr pos:start="127:9" pos:end="127:56"><call pos:start="127:9" pos:end="127:56"><name pos:start="127:9" pos:end="127:20">cpu_to_be32w</name><argument_list pos:start="127:21" pos:end="127:56">(<argument pos:start="127:22" pos:end="127:42"><expr pos:start="127:22" pos:end="127:42"><operator pos:start="127:22" pos:end="127:22">(</operator><name pos:start="127:23" pos:end="127:30">uint32_t</name><operator pos:start="127:31" pos:end="127:31">*</operator><operator pos:start="127:32" pos:end="127:32">)</operator><operator pos:start="127:33" pos:end="127:33">(</operator><name pos:start="127:34" pos:end="127:37">data</name> <operator pos:start="127:39" pos:end="127:39">+</operator> <literal type="number" pos:start="127:41" pos:end="127:41">4</literal><operator pos:start="127:42" pos:end="127:42">)</operator></expr></argument>, <argument pos:start="127:45" pos:end="127:55"><expr pos:start="127:45" pos:end="127:55"><name pos:start="127:45" pos:end="127:55"><name pos:start="127:45" pos:end="127:49">reply</name><operator pos:start="127:50" pos:end="127:50">.</operator><name pos:start="127:51" pos:end="127:55">error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:58"><expr pos:start="129:9" pos:end="129:57"><call pos:start="129:9" pos:end="129:57"><name pos:start="129:9" pos:end="129:20">cpu_to_be64w</name><argument_list pos:start="129:21" pos:end="129:57">(<argument pos:start="129:22" pos:end="129:42"><expr pos:start="129:22" pos:end="129:42"><operator pos:start="129:22" pos:end="129:22">(</operator><name pos:start="129:23" pos:end="129:30">uint64_t</name><operator pos:start="129:31" pos:end="129:31">*</operator><operator pos:start="129:32" pos:end="129:32">)</operator><operator pos:start="129:33" pos:end="129:33">(</operator><name pos:start="129:34" pos:end="129:37">data</name> <operator pos:start="129:39" pos:end="129:39">+</operator> <literal type="number" pos:start="129:41" pos:end="129:41">8</literal><operator pos:start="129:42" pos:end="129:42">)</operator></expr></argument>, <argument pos:start="129:45" pos:end="129:56"><expr pos:start="129:45" pos:end="129:56"><name pos:start="129:45" pos:end="129:56"><name pos:start="129:45" pos:end="129:49">reply</name><operator pos:start="129:50" pos:end="129:50">.</operator><name pos:start="129:51" pos:end="129:56">handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:40"><expr pos:start="133:9" pos:end="133:39"><call pos:start="133:9" pos:end="133:39"><name pos:start="133:9" pos:end="133:13">TRACE</name><argument_list pos:start="133:14" pos:end="133:39">(<argument pos:start="133:15" pos:end="133:38"><expr pos:start="133:15" pos:end="133:38"><literal type="string" pos:start="133:15" pos:end="133:38">"Sending data to client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="137:9" pos:end="149:9"><if pos:start="137:9" pos:end="149:9">if <condition pos:start="137:12" pos:end="141:48">(<expr pos:start="137:13" pos:end="141:47"><call pos:start="137:13" pos:end="139:48"><name pos:start="137:13" pos:end="137:22">write_sync</name><argument_list pos:start="137:23" pos:end="139:48">(<argument pos:start="137:24" pos:end="137:28"><expr pos:start="137:24" pos:end="137:28"><name pos:start="137:24" pos:end="137:28">csock</name></expr></argument>, <argument pos:start="137:31" pos:end="137:34"><expr pos:start="137:31" pos:end="137:34"><name pos:start="137:31" pos:end="137:34">data</name></expr></argument>,

                   <argument pos:start="139:20" pos:end="139:47"><expr pos:start="139:20" pos:end="139:47"><name pos:start="139:20" pos:end="139:30"><name pos:start="139:20" pos:end="139:26">request</name><operator pos:start="139:27" pos:end="139:27">.</operator><name pos:start="139:28" pos:end="139:30">len</name></name> <operator pos:start="139:32" pos:end="139:32">+</operator> <name pos:start="139:34" pos:end="139:47">NBD_REPLY_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="139:50" pos:end="139:51">!=</operator>

                   <name pos:start="141:20" pos:end="141:30"><name pos:start="141:20" pos:end="141:26">request</name><operator pos:start="141:27" pos:end="141:27">.</operator><name pos:start="141:28" pos:end="141:30">len</name></name> <operator pos:start="141:32" pos:end="141:32">+</operator> <name pos:start="141:34" pos:end="141:47">NBD_REPLY_SIZE</name></expr>)</condition> <block pos:start="141:50" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:22">

            <expr_stmt pos:start="143:13" pos:end="143:44"><expr pos:start="143:13" pos:end="143:43"><call pos:start="143:13" pos:end="143:43"><name pos:start="143:13" pos:end="143:15">LOG</name><argument_list pos:start="143:16" pos:end="143:43">(<argument pos:start="143:17" pos:end="143:42"><expr pos:start="143:17" pos:end="143:42"><literal type="string" pos:start="143:17" pos:end="143:42">"writing to socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:27"><expr pos:start="145:13" pos:end="145:26"><name pos:start="145:13" pos:end="145:17">errno</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <name pos:start="145:21" pos:end="145:26">EINVAL</name></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:22">return <expr pos:start="147:20" pos:end="147:21"><operator pos:start="147:20" pos:end="147:20">-</operator><literal type="number" pos:start="147:21" pos:end="147:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:23">case <expr pos:start="153:10" pos:end="153:22"><name pos:start="153:10" pos:end="153:22">NBD_CMD_WRITE</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="155:39"><expr pos:start="155:9" pos:end="155:38"><call pos:start="155:9" pos:end="155:38"><name pos:start="155:9" pos:end="155:13">TRACE</name><argument_list pos:start="155:14" pos:end="155:38">(<argument pos:start="155:15" pos:end="155:37"><expr pos:start="155:15" pos:end="155:37"><literal type="string" pos:start="155:15" pos:end="155:37">"Request type is WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:49"><expr pos:start="159:9" pos:end="159:48"><call pos:start="159:9" pos:end="159:48"><name pos:start="159:9" pos:end="159:13">TRACE</name><argument_list pos:start="159:14" pos:end="159:48">(<argument pos:start="159:15" pos:end="159:34"><expr pos:start="159:15" pos:end="159:34"><literal type="string" pos:start="159:15" pos:end="159:34">"Reading %u byte(s)"</literal></expr></argument>, <argument pos:start="159:37" pos:end="159:47"><expr pos:start="159:37" pos:end="159:47"><name pos:start="159:37" pos:end="159:47"><name pos:start="159:37" pos:end="159:43">request</name><operator pos:start="159:44" pos:end="159:44">.</operator><name pos:start="159:45" pos:end="159:47">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="163:9" pos:end="171:9"><if pos:start="163:9" pos:end="171:9">if <condition pos:start="163:12" pos:end="163:63">(<expr pos:start="163:13" pos:end="163:62"><call pos:start="163:13" pos:end="163:47"><name pos:start="163:13" pos:end="163:21">read_sync</name><argument_list pos:start="163:22" pos:end="163:47">(<argument pos:start="163:23" pos:end="163:27"><expr pos:start="163:23" pos:end="163:27"><name pos:start="163:23" pos:end="163:27">csock</name></expr></argument>, <argument pos:start="163:30" pos:end="163:33"><expr pos:start="163:30" pos:end="163:33"><name pos:start="163:30" pos:end="163:33">data</name></expr></argument>, <argument pos:start="163:36" pos:end="163:46"><expr pos:start="163:36" pos:end="163:46"><name pos:start="163:36" pos:end="163:46"><name pos:start="163:36" pos:end="163:42">request</name><operator pos:start="163:43" pos:end="163:43">.</operator><name pos:start="163:44" pos:end="163:46">len</name></name></expr></argument>)</argument_list></call> <operator pos:start="163:49" pos:end="163:50">!=</operator> <name pos:start="163:52" pos:end="163:62"><name pos:start="163:52" pos:end="163:58">request</name><operator pos:start="163:59" pos:end="163:59">.</operator><name pos:start="163:60" pos:end="163:62">len</name></name></expr>)</condition> <block pos:start="163:65" pos:end="171:9">{<block_content pos:start="165:13" pos:end="169:22">

            <expr_stmt pos:start="165:13" pos:end="165:46"><expr pos:start="165:13" pos:end="165:45"><call pos:start="165:13" pos:end="165:45"><name pos:start="165:13" pos:end="165:15">LOG</name><argument_list pos:start="165:16" pos:end="165:45">(<argument pos:start="165:17" pos:end="165:44"><expr pos:start="165:17" pos:end="165:44"><literal type="string" pos:start="165:17" pos:end="165:44">"reading from socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:27"><expr pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:17">errno</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <name pos:start="167:21" pos:end="167:26">EINVAL</name></expr>;</expr_stmt>

            <return pos:start="169:13" pos:end="169:22">return <expr pos:start="169:20" pos:end="169:21"><operator pos:start="169:20" pos:end="169:20">-</operator><literal type="number" pos:start="169:21" pos:end="169:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="217:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:42">(<expr pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:20">nbdflags</name> <operator pos:start="175:22" pos:end="175:22">&amp;</operator> <name pos:start="175:24" pos:end="175:41">NBD_FLAG_READ_ONLY</name></expr>)</condition> <block pos:start="175:44" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:28">

            <expr_stmt pos:start="177:13" pos:end="177:55"><expr pos:start="177:13" pos:end="177:54"><call pos:start="177:13" pos:end="177:54"><name pos:start="177:13" pos:end="177:17">TRACE</name><argument_list pos:start="177:18" pos:end="177:54">(<argument pos:start="177:19" pos:end="177:53"><expr pos:start="177:19" pos:end="177:53"><literal type="string" pos:start="177:19" pos:end="177:53">"Server is read-only, return error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:28"><expr pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:23"><name pos:start="179:13" pos:end="179:17">reply</name><operator pos:start="179:18" pos:end="179:18">.</operator><name pos:start="179:19" pos:end="179:23">error</name></name> <operator pos:start="179:25" pos:end="179:25">=</operator> <literal type="number" pos:start="179:27" pos:end="179:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="181:11" pos:end="217:9">else <block pos:start="181:16" pos:end="217:9">{<block_content pos:start="183:13" pos:end="215:13">

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><call pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:17">TRACE</name><argument_list pos:start="183:18" pos:end="183:38">(<argument pos:start="183:19" pos:end="183:37"><expr pos:start="183:19" pos:end="183:37"><literal type="string" pos:start="183:19" pos:end="183:37">"Writing to device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="187:13" pos:end="189:54"><expr pos:start="187:13" pos:end="189:53"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="189:53"><name pos:start="187:19" pos:end="187:28">bdrv_write</name><argument_list pos:start="187:29" pos:end="189:53">(<argument pos:start="187:30" pos:end="187:31"><expr pos:start="187:30" pos:end="187:31"><name pos:start="187:30" pos:end="187:31">bs</name></expr></argument>, <argument pos:start="187:34" pos:end="187:66"><expr pos:start="187:34" pos:end="187:66"><operator pos:start="187:34" pos:end="187:34">(</operator><name pos:start="187:35" pos:end="187:46"><name pos:start="187:35" pos:end="187:41">request</name><operator pos:start="187:42" pos:end="187:42">.</operator><name pos:start="187:43" pos:end="187:46">from</name></name> <operator pos:start="187:48" pos:end="187:48">+</operator> <name pos:start="187:50" pos:end="187:59">dev_offset</name><operator pos:start="187:60" pos:end="187:60">)</operator> <operator pos:start="187:62" pos:end="187:62">/</operator> <literal type="number" pos:start="187:64" pos:end="187:66">512</literal></expr></argument>,

                             <argument pos:start="189:30" pos:end="189:33"><expr pos:start="189:30" pos:end="189:33"><name pos:start="189:30" pos:end="189:33">data</name></expr></argument>, <argument pos:start="189:36" pos:end="189:52"><expr pos:start="189:36" pos:end="189:52"><name pos:start="189:36" pos:end="189:46"><name pos:start="189:36" pos:end="189:42">request</name><operator pos:start="189:43" pos:end="189:43">.</operator><name pos:start="189:44" pos:end="189:46">len</name></name> <operator pos:start="189:48" pos:end="189:48">/</operator> <literal type="number" pos:start="189:50" pos:end="189:52">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="191:13" pos:end="199:13"><if pos:start="191:13" pos:end="199:13">if <condition pos:start="191:16" pos:end="191:24">(<expr pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:19">ret</name> <operator pos:start="191:21" pos:end="191:21">&lt;</operator> <literal type="number" pos:start="191:23" pos:end="191:23">0</literal></expr>)</condition> <block pos:start="191:26" pos:end="199:13">{<block_content pos:start="193:17" pos:end="197:32">

                <expr_stmt pos:start="193:17" pos:end="193:46"><expr pos:start="193:17" pos:end="193:45"><call pos:start="193:17" pos:end="193:45"><name pos:start="193:17" pos:end="193:19">LOG</name><argument_list pos:start="193:20" pos:end="193:45">(<argument pos:start="193:21" pos:end="193:44"><expr pos:start="193:21" pos:end="193:44"><literal type="string" pos:start="193:21" pos:end="193:44">"writing to file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:35"><expr pos:start="195:17" pos:end="195:34"><name pos:start="195:17" pos:end="195:27"><name pos:start="195:17" pos:end="195:21">reply</name><operator pos:start="195:22" pos:end="195:22">.</operator><name pos:start="195:23" pos:end="195:27">error</name></name> <operator pos:start="195:29" pos:end="195:29">=</operator> <operator pos:start="195:31" pos:end="195:31">-</operator><name pos:start="195:32" pos:end="195:34">ret</name></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:32"><expr pos:start="197:17" pos:end="197:31"><name pos:start="197:17" pos:end="197:27"><name pos:start="197:17" pos:end="197:23">request</name><operator pos:start="197:24" pos:end="197:24">.</operator><name pos:start="197:25" pos:end="197:27">len</name></name> <operator pos:start="197:29" pos:end="197:29">=</operator> <literal type="number" pos:start="197:31" pos:end="197:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="203:13" pos:end="215:13"><if pos:start="203:13" pos:end="215:13">if <condition pos:start="203:16" pos:end="203:48">(<expr pos:start="203:17" pos:end="203:47"><name pos:start="203:17" pos:end="203:28"><name pos:start="203:17" pos:end="203:23">request</name><operator pos:start="203:24" pos:end="203:24">.</operator><name pos:start="203:25" pos:end="203:28">type</name></name> <operator pos:start="203:30" pos:end="203:30">&amp;</operator> <name pos:start="203:32" pos:end="203:47">NBD_CMD_FLAG_FUA</name></expr>)</condition> <block pos:start="203:50" pos:end="215:13">{<block_content pos:start="205:17" pos:end="213:17">

                <expr_stmt pos:start="205:17" pos:end="205:37"><expr pos:start="205:17" pos:end="205:36"><name pos:start="205:17" pos:end="205:19">ret</name> <operator pos:start="205:21" pos:end="205:21">=</operator> <call pos:start="205:23" pos:end="205:36"><name pos:start="205:23" pos:end="205:32">bdrv_flush</name><argument_list pos:start="205:33" pos:end="205:36">(<argument pos:start="205:34" pos:end="205:35"><expr pos:start="205:34" pos:end="205:35"><name pos:start="205:34" pos:end="205:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="207:17" pos:end="213:17"><if pos:start="207:17" pos:end="213:17">if <condition pos:start="207:20" pos:end="207:28">(<expr pos:start="207:21" pos:end="207:27"><name pos:start="207:21" pos:end="207:23">ret</name> <operator pos:start="207:25" pos:end="207:25">&lt;</operator> <literal type="number" pos:start="207:27" pos:end="207:27">0</literal></expr>)</condition> <block pos:start="207:30" pos:end="213:17">{<block_content pos:start="209:21" pos:end="211:39">

                    <expr_stmt pos:start="209:21" pos:end="209:40"><expr pos:start="209:21" pos:end="209:39"><call pos:start="209:21" pos:end="209:39"><name pos:start="209:21" pos:end="209:23">LOG</name><argument_list pos:start="209:24" pos:end="209:39">(<argument pos:start="209:25" pos:end="209:38"><expr pos:start="209:25" pos:end="209:38"><literal type="string" pos:start="209:25" pos:end="209:38">"flush failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:39"><expr pos:start="211:21" pos:end="211:38"><name pos:start="211:21" pos:end="211:31"><name pos:start="211:21" pos:end="211:25">reply</name><operator pos:start="211:26" pos:end="211:26">.</operator><name pos:start="211:27" pos:end="211:31">error</name></name> <operator pos:start="211:33" pos:end="211:33">=</operator> <operator pos:start="211:35" pos:end="211:35">-</operator><name pos:start="211:36" pos:end="211:38">ret</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="221:9" pos:end="223:22"><if pos:start="221:9" pos:end="223:22">if <condition pos:start="221:12" pos:end="221:48">(<expr pos:start="221:13" pos:end="221:47"><call pos:start="221:13" pos:end="221:41"><name pos:start="221:13" pos:end="221:26">nbd_send_reply</name><argument_list pos:start="221:27" pos:end="221:41">(<argument pos:start="221:28" pos:end="221:32"><expr pos:start="221:28" pos:end="221:32"><name pos:start="221:28" pos:end="221:32">csock</name></expr></argument>, <argument pos:start="221:35" pos:end="221:40"><expr pos:start="221:35" pos:end="221:40"><operator pos:start="221:35" pos:end="221:35">&amp;</operator><name pos:start="221:36" pos:end="221:40">reply</name></expr></argument>)</argument_list></call> <operator pos:start="221:43" pos:end="221:44">==</operator> <operator pos:start="221:46" pos:end="221:46">-</operator><literal type="number" pos:start="221:47" pos:end="221:47">1</literal></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:22"><block_content pos:start="223:13" pos:end="223:22">

            <return pos:start="223:13" pos:end="223:22">return <expr pos:start="223:20" pos:end="223:21"><operator pos:start="223:20" pos:end="223:20">-</operator><literal type="number" pos:start="223:21" pos:end="223:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="225:9" pos:end="225:14">break;</break>

    <case pos:start="227:5" pos:end="227:22">case <expr pos:start="227:10" pos:end="227:21"><name pos:start="227:10" pos:end="227:21">NBD_CMD_DISC</name></expr>:</case>

        <expr_stmt pos:start="229:9" pos:end="229:44"><expr pos:start="229:9" pos:end="229:43"><call pos:start="229:9" pos:end="229:43"><name pos:start="229:9" pos:end="229:13">TRACE</name><argument_list pos:start="229:14" pos:end="229:43">(<argument pos:start="229:15" pos:end="229:42"><expr pos:start="229:15" pos:end="229:42"><literal type="string" pos:start="229:15" pos:end="229:42">"Request type is DISCONNECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:18"><expr pos:start="231:9" pos:end="231:17"><name pos:start="231:9" pos:end="231:13">errno</name> <operator pos:start="231:15" pos:end="231:15">=</operator> <literal type="number" pos:start="231:17" pos:end="231:17">0</literal></expr>;</expr_stmt>

        <return pos:start="233:9" pos:end="233:17">return <expr pos:start="233:16" pos:end="233:16"><literal type="number" pos:start="233:16" pos:end="233:16">1</literal></expr>;</return>

    <case pos:start="235:5" pos:end="235:23">case <expr pos:start="235:10" pos:end="235:22"><name pos:start="235:10" pos:end="235:22">NBD_CMD_FLUSH</name></expr>:</case>

        <expr_stmt pos:start="237:9" pos:end="237:39"><expr pos:start="237:9" pos:end="237:38"><call pos:start="237:9" pos:end="237:38"><name pos:start="237:9" pos:end="237:13">TRACE</name><argument_list pos:start="237:14" pos:end="237:38">(<argument pos:start="237:15" pos:end="237:37"><expr pos:start="237:15" pos:end="237:37"><literal type="string" pos:start="237:15" pos:end="237:37">"Request type is FLUSH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="241:9" pos:end="241:29"><expr pos:start="241:9" pos:end="241:28"><name pos:start="241:9" pos:end="241:11">ret</name> <operator pos:start="241:13" pos:end="241:13">=</operator> <call pos:start="241:15" pos:end="241:28"><name pos:start="241:15" pos:end="241:24">bdrv_flush</name><argument_list pos:start="241:25" pos:end="241:28">(<argument pos:start="241:26" pos:end="241:27"><expr pos:start="241:26" pos:end="241:27"><name pos:start="241:26" pos:end="241:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="243:9" pos:end="249:9"><if pos:start="243:9" pos:end="249:9">if <condition pos:start="243:12" pos:end="243:20">(<expr pos:start="243:13" pos:end="243:19"><name pos:start="243:13" pos:end="243:15">ret</name> <operator pos:start="243:17" pos:end="243:17">&lt;</operator> <literal type="number" pos:start="243:19" pos:end="243:19">0</literal></expr>)</condition> <block pos:start="243:22" pos:end="249:9">{<block_content pos:start="245:13" pos:end="247:31">

            <expr_stmt pos:start="245:13" pos:end="245:32"><expr pos:start="245:13" pos:end="245:31"><call pos:start="245:13" pos:end="245:31"><name pos:start="245:13" pos:end="245:15">LOG</name><argument_list pos:start="245:16" pos:end="245:31">(<argument pos:start="245:17" pos:end="245:30"><expr pos:start="245:17" pos:end="245:30"><literal type="string" pos:start="245:17" pos:end="245:30">"flush failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:31"><expr pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:23"><name pos:start="247:13" pos:end="247:17">reply</name><operator pos:start="247:18" pos:end="247:18">.</operator><name pos:start="247:19" pos:end="247:23">error</name></name> <operator pos:start="247:25" pos:end="247:25">=</operator> <operator pos:start="247:27" pos:end="247:27">-</operator><name pos:start="247:28" pos:end="247:30">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="253:9" pos:end="255:22"><if pos:start="253:9" pos:end="255:22">if <condition pos:start="253:12" pos:end="253:48">(<expr pos:start="253:13" pos:end="253:47"><call pos:start="253:13" pos:end="253:41"><name pos:start="253:13" pos:end="253:26">nbd_send_reply</name><argument_list pos:start="253:27" pos:end="253:41">(<argument pos:start="253:28" pos:end="253:32"><expr pos:start="253:28" pos:end="253:32"><name pos:start="253:28" pos:end="253:32">csock</name></expr></argument>, <argument pos:start="253:35" pos:end="253:40"><expr pos:start="253:35" pos:end="253:40"><operator pos:start="253:35" pos:end="253:35">&amp;</operator><name pos:start="253:36" pos:end="253:40">reply</name></expr></argument>)</argument_list></call> <operator pos:start="253:43" pos:end="253:44">==</operator> <operator pos:start="253:46" pos:end="253:46">-</operator><literal type="number" pos:start="253:47" pos:end="253:47">1</literal></expr>)</condition><block type="pseudo" pos:start="255:13" pos:end="255:22"><block_content pos:start="255:13" pos:end="255:22">

            <return pos:start="255:13" pos:end="255:22">return <expr pos:start="255:20" pos:end="255:21"><operator pos:start="255:20" pos:end="255:20">-</operator><literal type="number" pos:start="255:21" pos:end="255:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="257:9" pos:end="257:14">break;</break>

    <case pos:start="259:5" pos:end="259:22">case <expr pos:start="259:10" pos:end="259:21"><name pos:start="259:10" pos:end="259:21">NBD_CMD_TRIM</name></expr>:</case>

        <expr_stmt pos:start="261:9" pos:end="261:38"><expr pos:start="261:9" pos:end="261:37"><call pos:start="261:9" pos:end="261:37"><name pos:start="261:9" pos:end="261:13">TRACE</name><argument_list pos:start="261:14" pos:end="261:37">(<argument pos:start="261:15" pos:end="261:36"><expr pos:start="261:15" pos:end="261:36"><literal type="string" pos:start="261:15" pos:end="261:36">"Request type is TRIM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="265:46"><expr pos:start="263:9" pos:end="265:45"><name pos:start="263:9" pos:end="263:11">ret</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <call pos:start="263:15" pos:end="265:45"><name pos:start="263:15" pos:end="263:26">bdrv_discard</name><argument_list pos:start="263:27" pos:end="265:45">(<argument pos:start="263:28" pos:end="263:29"><expr pos:start="263:28" pos:end="263:29"><name pos:start="263:28" pos:end="263:29">bs</name></expr></argument>, <argument pos:start="263:32" pos:end="263:64"><expr pos:start="263:32" pos:end="263:64"><operator pos:start="263:32" pos:end="263:32">(</operator><name pos:start="263:33" pos:end="263:44"><name pos:start="263:33" pos:end="263:39">request</name><operator pos:start="263:40" pos:end="263:40">.</operator><name pos:start="263:41" pos:end="263:44">from</name></name> <operator pos:start="263:46" pos:end="263:46">+</operator> <name pos:start="263:48" pos:end="263:57">dev_offset</name><operator pos:start="263:58" pos:end="263:58">)</operator> <operator pos:start="263:60" pos:end="263:60">/</operator> <literal type="number" pos:start="263:62" pos:end="263:64">512</literal></expr></argument>,

                           <argument pos:start="265:28" pos:end="265:44"><expr pos:start="265:28" pos:end="265:44"><name pos:start="265:28" pos:end="265:38"><name pos:start="265:28" pos:end="265:34">request</name><operator pos:start="265:35" pos:end="265:35">.</operator><name pos:start="265:36" pos:end="265:38">len</name></name> <operator pos:start="265:40" pos:end="265:40">/</operator> <literal type="number" pos:start="265:42" pos:end="265:44">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="267:9" pos:end="273:9"><if pos:start="267:9" pos:end="273:9">if <condition pos:start="267:12" pos:end="267:20">(<expr pos:start="267:13" pos:end="267:19"><name pos:start="267:13" pos:end="267:15">ret</name> <operator pos:start="267:17" pos:end="267:17">&lt;</operator> <literal type="number" pos:start="267:19" pos:end="267:19">0</literal></expr>)</condition> <block pos:start="267:22" pos:end="273:9">{<block_content pos:start="269:13" pos:end="271:31">

            <expr_stmt pos:start="269:13" pos:end="269:34"><expr pos:start="269:13" pos:end="269:33"><call pos:start="269:13" pos:end="269:33"><name pos:start="269:13" pos:end="269:15">LOG</name><argument_list pos:start="269:16" pos:end="269:33">(<argument pos:start="269:17" pos:end="269:32"><expr pos:start="269:17" pos:end="269:32"><literal type="string" pos:start="269:17" pos:end="269:32">"discard failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:31"><expr pos:start="271:13" pos:end="271:30"><name pos:start="271:13" pos:end="271:23"><name pos:start="271:13" pos:end="271:17">reply</name><operator pos:start="271:18" pos:end="271:18">.</operator><name pos:start="271:19" pos:end="271:23">error</name></name> <operator pos:start="271:25" pos:end="271:25">=</operator> <operator pos:start="271:27" pos:end="271:27">-</operator><name pos:start="271:28" pos:end="271:30">ret</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="275:9" pos:end="277:22"><if pos:start="275:9" pos:end="277:22">if <condition pos:start="275:12" pos:end="275:48">(<expr pos:start="275:13" pos:end="275:47"><call pos:start="275:13" pos:end="275:41"><name pos:start="275:13" pos:end="275:26">nbd_send_reply</name><argument_list pos:start="275:27" pos:end="275:41">(<argument pos:start="275:28" pos:end="275:32"><expr pos:start="275:28" pos:end="275:32"><name pos:start="275:28" pos:end="275:32">csock</name></expr></argument>, <argument pos:start="275:35" pos:end="275:40"><expr pos:start="275:35" pos:end="275:40"><operator pos:start="275:35" pos:end="275:35">&amp;</operator><name pos:start="275:36" pos:end="275:40">reply</name></expr></argument>)</argument_list></call> <operator pos:start="275:43" pos:end="275:44">==</operator> <operator pos:start="275:46" pos:end="275:46">-</operator><literal type="number" pos:start="275:47" pos:end="275:47">1</literal></expr>)</condition><block type="pseudo" pos:start="277:13" pos:end="277:22"><block_content pos:start="277:13" pos:end="277:22">

            <return pos:start="277:13" pos:end="277:22">return <expr pos:start="277:20" pos:end="277:21"><operator pos:start="277:20" pos:end="277:20">-</operator><literal type="number" pos:start="277:21" pos:end="277:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <default pos:start="281:5" pos:end="281:12">default:</default>

        <expr_stmt pos:start="283:9" pos:end="283:64"><expr pos:start="283:9" pos:end="283:63"><call pos:start="283:9" pos:end="283:63"><name pos:start="283:9" pos:end="283:11">LOG</name><argument_list pos:start="283:12" pos:end="283:63">(<argument pos:start="283:13" pos:end="283:48"><expr pos:start="283:13" pos:end="283:48"><literal type="string" pos:start="283:13" pos:end="283:48">"invalid request type (%u) received"</literal></expr></argument>, <argument pos:start="283:51" pos:end="283:62"><expr pos:start="283:51" pos:end="283:62"><name pos:start="283:51" pos:end="283:62"><name pos:start="283:51" pos:end="283:57">request</name><operator pos:start="283:58" pos:end="283:58">.</operator><name pos:start="283:59" pos:end="283:62">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:23"><expr pos:start="285:9" pos:end="285:22"><name pos:start="285:9" pos:end="285:13">errno</name> <operator pos:start="285:15" pos:end="285:15">=</operator> <name pos:start="285:17" pos:end="285:22">EINVAL</name></expr>;</expr_stmt>

        <return pos:start="287:9" pos:end="287:18">return <expr pos:start="287:16" pos:end="287:17"><operator pos:start="287:16" pos:end="287:16">-</operator><literal type="number" pos:start="287:17" pos:end="287:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="293:5" pos:end="293:36"><expr pos:start="293:5" pos:end="293:35"><call pos:start="293:5" pos:end="293:35"><name pos:start="293:5" pos:end="293:9">TRACE</name><argument_list pos:start="293:10" pos:end="293:35">(<argument pos:start="293:11" pos:end="293:34"><expr pos:start="293:11" pos:end="293:34"><literal type="string" pos:start="293:11" pos:end="293:34">"Request/Reply complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="297:5" pos:end="297:13">return <expr pos:start="297:12" pos:end="297:12"><literal type="number" pos:start="297:12" pos:end="297:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
