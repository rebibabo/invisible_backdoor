<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24905.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ape_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="291:41">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">APEContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name> <init pos:start="11:19" pos:end="11:36">= <expr pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:25">avctx</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">sample8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:21">sample16</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int32_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:21">sample24</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:13"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:13">ch</name></decl>, <decl pos:start="19:16" pos:end="19:18"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:16" pos:end="19:18">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">blockstodecode</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:37">/* this should never be negative, but bad things will happen if it is, so

       check it just to make sure. */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><call pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:14">av_assert0</name><argument_list pos:start="29:15" pos:end="29:31">(<argument pos:start="29:16" pos:end="29:30"><expr pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:25">samples</name></name> <operator pos:start="29:27" pos:end="29:28">&gt;=</operator> <literal type="number" pos:start="29:30" pos:end="29:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="153:5"><if pos:start="33:5" pos:end="153:5">if<condition pos:start="33:7" pos:end="33:19">(<expr pos:start="33:8" pos:end="33:18"><operator pos:start="33:8" pos:end="33:8">!</operator><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">samples</name></name></expr>)</condition><block pos:start="33:20" pos:end="153:5">{<block_content pos:start="35:9" pos:end="151:9">

        <decl_stmt pos:start="35:9" pos:end="35:33"><decl pos:start="35:9" pos:end="35:24"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16">uint32_t</name></type> <name pos:start="35:18" pos:end="35:24">nblocks</name></decl>, <decl pos:start="35:27" pos:end="35:32"><type ref="prev" pos:start="35:9" pos:end="35:16"/><name pos:start="35:27" pos:end="35:32">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:21"><decl pos:start="37:9" pos:end="37:20"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:20">buf_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:24"><name pos:start="41:14" pos:end="41:18">avpkt</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:24">size</name></name></expr>)</condition> <block pos:start="41:27" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><operator pos:start="43:13" pos:end="43:13">*</operator><name pos:start="43:14" pos:end="43:26">got_frame_ptr</name> <operator pos:start="43:28" pos:end="43:28">=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:21">return <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:28">(<expr pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:17">avpkt</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">size</name></name> <operator pos:start="49:25" pos:end="49:25">&lt;</operator> <literal type="number" pos:start="49:27" pos:end="49:27">8</literal></expr>)</condition> <block pos:start="49:30" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:39">

            <expr_stmt pos:start="51:13" pos:end="51:65"><expr pos:start="51:13" pos:end="51:64"><call pos:start="51:13" pos:end="51:64"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:64">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:41" pos:end="51:63"><expr pos:start="51:41" pos:end="51:63"><literal type="string" pos:start="51:41" pos:end="51:63">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:39">return <expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:16">buf_size</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:30"><name pos:start="57:20" pos:end="57:24">avpkt</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:30">size</name></name> <operator pos:start="57:32" pos:end="57:32">&amp;</operator> <operator pos:start="57:34" pos:end="57:34">~</operator><literal type="number" pos:start="57:35" pos:end="57:35">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:36">(<expr pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:20">buf_size</name> <operator pos:start="59:22" pos:end="59:23">!=</operator> <name pos:start="59:25" pos:end="59:35"><name pos:start="59:25" pos:end="59:29">avpkt</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:35">size</name></name></expr>)</condition> <block pos:start="59:38" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:64">

            <expr_stmt pos:start="61:13" pos:end="63:64"><expr pos:start="61:13" pos:end="63:63"><call pos:start="61:13" pos:end="63:63"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="63:63">(<argument pos:start="61:20" pos:end="61:24"><expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">avctx</name></expr></argument>, <argument pos:start="61:27" pos:end="61:40"><expr pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="61:43" pos:end="63:62"><expr pos:start="61:43" pos:end="63:62"><literal type="string" pos:start="61:43" pos:end="61:80">"packet size is not a multiple of 4. "</literal>

                   <literal type="string" pos:start="63:20" pos:end="63:62">"extra bytes at the end will be skipped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="69:26"><if pos:start="67:9" pos:end="69:26">if <condition pos:start="67:12" pos:end="67:34">(<expr pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:26">fileversion</name></name> <operator pos:start="67:28" pos:end="67:28">&lt;</operator> <literal type="number" pos:start="67:30" pos:end="67:33">3950</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:26"><block_content pos:start="69:13" pos:end="69:26"> <comment type="line" pos:start="67:36" pos:end="67:74">// previous versions overread two bytes</comment>

            <expr_stmt pos:start="69:13" pos:end="69:26"><expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:20">buf_size</name> <operator pos:start="69:22" pos:end="69:23">+=</operator> <literal type="number" pos:start="69:25" pos:end="69:25">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:58"><expr pos:start="71:9" pos:end="71:57"><call pos:start="71:9" pos:end="71:57"><name pos:start="71:9" pos:end="71:22">av_fast_malloc</name><argument_list pos:start="71:23" pos:end="71:57">(<argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><operator pos:start="71:24" pos:end="71:24">&amp;</operator><name pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:31">data</name></name></expr></argument>, <argument pos:start="71:34" pos:end="71:46"><expr pos:start="71:34" pos:end="71:46"><operator pos:start="71:34" pos:end="71:34">&amp;</operator><name pos:start="71:35" pos:end="71:46"><name pos:start="71:35" pos:end="71:35">s</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:46">data_size</name></name></expr></argument>, <argument pos:start="71:49" pos:end="71:56"><expr pos:start="71:49" pos:end="71:56"><name pos:start="71:49" pos:end="71:56">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:35"><if pos:start="73:9" pos:end="75:35">if <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:20"><name pos:start="73:14" pos:end="73:14">s</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:20">data</name></name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:35"><block_content pos:start="75:13" pos:end="75:35">

            <return pos:start="75:13" pos:end="75:35">return <expr pos:start="75:20" pos:end="75:34"><call pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:26">AVERROR</name><argument_list pos:start="75:27" pos:end="75:34">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:82"><expr pos:start="77:9" pos:end="77:81"><call pos:start="77:9" pos:end="77:81"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">dsp</name><operator pos:start="77:15" pos:end="77:15">.</operator><name pos:start="77:16" pos:end="77:24">bswap_buf</name></name><argument_list pos:start="77:25" pos:end="77:81">(<argument pos:start="77:26" pos:end="77:43"><expr pos:start="77:26" pos:end="77:43"><operator pos:start="77:26" pos:end="77:26">(</operator><name pos:start="77:27" pos:end="77:34">uint32_t</name><operator pos:start="77:35" pos:end="77:35">*</operator><operator pos:start="77:36" pos:end="77:36">)</operator><name pos:start="77:37" pos:end="77:43"><name pos:start="77:37" pos:end="77:37">s</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:43">data</name></name></expr></argument>, <argument pos:start="77:46" pos:end="77:65"><expr pos:start="77:46" pos:end="77:65"><operator pos:start="77:46" pos:end="77:46">(</operator><specifier pos:start="77:47" pos:end="77:51">const</specifier> <name pos:start="77:53" pos:end="77:60">uint32_t</name><operator pos:start="77:61" pos:end="77:61">*</operator><operator pos:start="77:62" pos:end="77:62">)</operator><name pos:start="77:63" pos:end="77:65">buf</name></expr></argument>, <argument pos:start="77:68" pos:end="77:80"><expr pos:start="77:68" pos:end="77:80"><name pos:start="77:68" pos:end="77:75">buf_size</name> <operator pos:start="77:77" pos:end="77:78">&gt;&gt;</operator> <literal type="number" pos:start="77:80" pos:end="77:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:14">memset</name><argument_list pos:start="79:15" pos:end="79:58">(<argument pos:start="79:16" pos:end="79:40"><expr pos:start="79:16" pos:end="79:40"><name pos:start="79:16" pos:end="79:22"><name pos:start="79:16" pos:end="79:16">s</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:22">data</name></name> <operator pos:start="79:24" pos:end="79:24">+</operator> <operator pos:start="79:26" pos:end="79:26">(</operator><name pos:start="79:27" pos:end="79:34">buf_size</name> <operator pos:start="79:36" pos:end="79:36">&amp;</operator> <operator pos:start="79:38" pos:end="79:38">~</operator><literal type="number" pos:start="79:39" pos:end="79:39">3</literal><operator pos:start="79:40" pos:end="79:40">)</operator></expr></argument>, <argument pos:start="79:43" pos:end="79:43"><expr pos:start="79:43" pos:end="79:43"><literal type="number" pos:start="79:43" pos:end="79:43">0</literal></expr></argument>, <argument pos:start="79:46" pos:end="79:57"><expr pos:start="79:46" pos:end="79:57"><name pos:start="79:46" pos:end="79:53">buf_size</name> <operator pos:start="79:55" pos:end="79:55">&amp;</operator> <literal type="number" pos:start="79:57" pos:end="79:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:14">ptr</name></name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:24"><name pos:start="81:18" pos:end="81:18">s</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:24">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:41"><expr pos:start="83:9" pos:end="83:40"><name pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:19">data_end</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:29"><name pos:start="83:23" pos:end="83:23">s</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:29">data</name></name> <operator pos:start="83:31" pos:end="83:31">+</operator> <name pos:start="83:33" pos:end="83:40">buf_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:47"><expr pos:start="87:9" pos:end="87:46"><name pos:start="87:9" pos:end="87:15">nblocks</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <call pos:start="87:19" pos:end="87:46"><name pos:start="87:19" pos:end="87:37">bytestream_get_be32</name><argument_list pos:start="87:38" pos:end="87:46">(<argument pos:start="87:39" pos:end="87:45"><expr pos:start="87:39" pos:end="87:45"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:45"><name pos:start="87:40" pos:end="87:40">s</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:45">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:47"><expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:14">offset</name>  <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:46"><name pos:start="89:19" pos:end="89:37">bytestream_get_be32</name><argument_list pos:start="89:38" pos:end="89:46">(<argument pos:start="89:39" pos:end="89:45"><expr pos:start="89:39" pos:end="89:45"><operator pos:start="89:39" pos:end="89:39">&amp;</operator><name pos:start="89:40" pos:end="89:45"><name pos:start="89:40" pos:end="89:40">s</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:45">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="127:9"><if pos:start="91:9" pos:end="113:9">if <condition pos:start="91:12" pos:end="91:35">(<expr pos:start="91:13" pos:end="91:34"><name pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:26">fileversion</name></name> <operator pos:start="91:28" pos:end="91:29">&gt;=</operator> <literal type="number" pos:start="91:31" pos:end="91:34">3900</literal></expr>)</condition> <block pos:start="91:37" pos:end="113:9">{<block_content pos:start="93:13" pos:end="111:29">

            <if_stmt pos:start="93:13" pos:end="101:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:27">(<expr pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:22">offset</name> <operator pos:start="93:24" pos:end="93:24">&gt;</operator> <literal type="number" pos:start="93:26" pos:end="93:26">3</literal></expr>)</condition> <block pos:start="93:29" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:43">

                <expr_stmt pos:start="95:17" pos:end="95:73"><expr pos:start="95:17" pos:end="95:72"><call pos:start="95:17" pos:end="95:72"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="95:72">(<argument pos:start="95:24" pos:end="95:28"><expr pos:start="95:24" pos:end="95:28"><name pos:start="95:24" pos:end="95:28">avctx</name></expr></argument>, <argument pos:start="95:31" pos:end="95:42"><expr pos:start="95:31" pos:end="95:42"><name pos:start="95:31" pos:end="95:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:45" pos:end="95:71"><expr pos:start="95:45" pos:end="95:71"><literal type="string" pos:start="95:45" pos:end="95:71">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:31"><expr pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:23"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:23">data</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <name pos:start="97:27" pos:end="97:30">NULL</name></expr>;</expr_stmt>

                <return pos:start="99:17" pos:end="99:43">return <expr pos:start="99:24" pos:end="99:42"><name pos:start="99:24" pos:end="99:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="103:13" pos:end="109:13"><if pos:start="103:13" pos:end="109:13">if <condition pos:start="103:16" pos:end="103:46">(<expr pos:start="103:17" pos:end="103:45"><name pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:17">s</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:27">data_end</name></name> <operator pos:start="103:29" pos:end="103:29">-</operator> <name pos:start="103:31" pos:end="103:36"><name pos:start="103:31" pos:end="103:31">s</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:36">ptr</name></name> <operator pos:start="103:38" pos:end="103:38">&lt;</operator> <name pos:start="103:40" pos:end="103:45">offset</name></expr>)</condition> <block pos:start="103:48" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:43">

                <expr_stmt pos:start="105:17" pos:end="105:69"><expr pos:start="105:17" pos:end="105:68"><call pos:start="105:17" pos:end="105:68"><name pos:start="105:17" pos:end="105:22">av_log</name><argument_list pos:start="105:23" pos:end="105:68">(<argument pos:start="105:24" pos:end="105:28"><expr pos:start="105:24" pos:end="105:28"><name pos:start="105:24" pos:end="105:28">avctx</name></expr></argument>, <argument pos:start="105:31" pos:end="105:42"><expr pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:45" pos:end="105:67"><expr pos:start="105:45" pos:end="105:67"><literal type="string" pos:start="105:45" pos:end="105:67">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="107:17" pos:end="107:43">return <expr pos:start="107:24" pos:end="107:42"><name pos:start="107:24" pos:end="107:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:29"><expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:18">ptr</name></name> <operator pos:start="111:20" pos:end="111:21">+=</operator> <name pos:start="111:23" pos:end="111:28">offset</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="127:9">else <block pos:start="113:16" pos:end="127:9">{<block_content pos:start="115:13" pos:end="125:47">

            <if_stmt pos:start="115:13" pos:end="117:27"><if pos:start="115:13" pos:end="117:27">if <condition pos:start="115:16" pos:end="115:81">(<expr pos:start="115:17" pos:end="115:80"><operator pos:start="115:17" pos:end="115:17">(</operator><name pos:start="115:18" pos:end="115:20">ret</name> <operator pos:start="115:22" pos:end="115:22">=</operator> <call pos:start="115:24" pos:end="115:75"><name pos:start="115:24" pos:end="115:37">init_get_bits8</name><argument_list pos:start="115:38" pos:end="115:75">(<argument pos:start="115:39" pos:end="115:44"><expr pos:start="115:39" pos:end="115:44"><operator pos:start="115:39" pos:end="115:39">&amp;</operator><name pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:40">s</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:44">gb</name></name></expr></argument>, <argument pos:start="115:47" pos:end="115:52"><expr pos:start="115:47" pos:end="115:52"><name pos:start="115:47" pos:end="115:52"><name pos:start="115:47" pos:end="115:47">s</name><operator pos:start="115:48" pos:end="115:49">-&gt;</operator><name pos:start="115:50" pos:end="115:52">ptr</name></name></expr></argument>, <argument pos:start="115:55" pos:end="115:74"><expr pos:start="115:55" pos:end="115:74"><name pos:start="115:55" pos:end="115:65"><name pos:start="115:55" pos:end="115:55">s</name><operator pos:start="115:56" pos:end="115:57">-&gt;</operator><name pos:start="115:58" pos:end="115:65">data_end</name></name> <operator pos:start="115:67" pos:end="115:67">-</operator> <name pos:start="115:69" pos:end="115:74"><name pos:start="115:69" pos:end="115:69">s</name><operator pos:start="115:70" pos:end="115:71">-&gt;</operator><name pos:start="115:72" pos:end="115:74">ptr</name></name></expr></argument>)</argument_list></call><operator pos:start="115:76" pos:end="115:76">)</operator> <operator pos:start="115:78" pos:end="115:78">&lt;</operator> <literal type="number" pos:start="115:80" pos:end="115:80">0</literal></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:27"><block_content pos:start="117:17" pos:end="117:27">

                <return pos:start="117:17" pos:end="117:27">return <expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="119:13" pos:end="125:47"><if pos:start="119:13" pos:end="121:51">if <condition pos:start="119:16" pos:end="119:38">(<expr pos:start="119:17" pos:end="119:37"><name pos:start="119:17" pos:end="119:30"><name pos:start="119:17" pos:end="119:17">s</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:30">fileversion</name></name> <operator pos:start="119:32" pos:end="119:32">&gt;</operator> <literal type="number" pos:start="119:34" pos:end="119:37">3800</literal></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:51"><block_content pos:start="121:17" pos:end="121:51">

                <expr_stmt pos:start="121:17" pos:end="121:51"><expr pos:start="121:17" pos:end="121:50"><call pos:start="121:17" pos:end="121:50"><name pos:start="121:17" pos:end="121:30">skip_bits_long</name><argument_list pos:start="121:31" pos:end="121:50">(<argument pos:start="121:32" pos:end="121:37"><expr pos:start="121:32" pos:end="121:37"><operator pos:start="121:32" pos:end="121:32">&amp;</operator><name pos:start="121:33" pos:end="121:37"><name pos:start="121:33" pos:end="121:33">s</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:37">gb</name></name></expr></argument>, <argument pos:start="121:40" pos:end="121:49"><expr pos:start="121:40" pos:end="121:49"><name pos:start="121:40" pos:end="121:45">offset</name> <operator pos:start="121:47" pos:end="121:47">*</operator> <literal type="number" pos:start="121:49" pos:end="121:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="123:13" pos:end="125:47">else<block type="pseudo" pos:start="125:17" pos:end="125:47"><block_content pos:start="125:17" pos:end="125:47">

                <expr_stmt pos:start="125:17" pos:end="125:47"><expr pos:start="125:17" pos:end="125:46"><call pos:start="125:17" pos:end="125:46"><name pos:start="125:17" pos:end="125:30">skip_bits_long</name><argument_list pos:start="125:31" pos:end="125:46">(<argument pos:start="125:32" pos:end="125:37"><expr pos:start="125:32" pos:end="125:37"><operator pos:start="125:32" pos:end="125:32">&amp;</operator><name pos:start="125:33" pos:end="125:37"><name pos:start="125:33" pos:end="125:33">s</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:37">gb</name></name></expr></argument>, <argument pos:start="125:40" pos:end="125:45"><expr pos:start="125:40" pos:end="125:45"><name pos:start="125:40" pos:end="125:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:42">(<expr pos:start="131:13" pos:end="131:41"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:20">nblocks</name> <operator pos:start="131:22" pos:end="131:23">||</operator> <name pos:start="131:25" pos:end="131:31">nblocks</name> <operator pos:start="131:33" pos:end="131:33">&gt;</operator> <name pos:start="131:35" pos:end="131:41">INT_MAX</name></expr>)</condition> <block pos:start="131:44" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:39">

            <expr_stmt pos:start="133:13" pos:end="133:80"><expr pos:start="133:13" pos:end="133:79"><call pos:start="133:13" pos:end="133:79"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="133:79">(<argument pos:start="133:20" pos:end="133:24"><expr pos:start="133:20" pos:end="133:24"><name pos:start="133:20" pos:end="133:24">avctx</name></expr></argument>, <argument pos:start="133:27" pos:end="133:38"><expr pos:start="133:27" pos:end="133:38"><name pos:start="133:27" pos:end="133:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:41" pos:end="133:69"><expr pos:start="133:41" pos:end="133:69"><literal type="string" pos:start="133:41" pos:end="133:69">"Invalid sample count: %u.\n"</literal></expr></argument>, <argument pos:start="133:72" pos:end="133:78"><expr pos:start="133:72" pos:end="133:78"><name pos:start="133:72" pos:end="133:78">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:39">return <expr pos:start="135:20" pos:end="135:38"><name pos:start="135:20" pos:end="135:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:29"><expr pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:18">samples</name></name> <operator pos:start="139:20" pos:end="139:20">=</operator> <name pos:start="139:22" pos:end="139:28">nblocks</name></expr>;</expr_stmt>



        <comment type="block" pos:start="143:9" pos:end="143:42">/* Initialize the frame decoder */</comment>

        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:38">(<expr pos:start="145:13" pos:end="145:37"><call pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:30">init_frame_decoder</name><argument_list pos:start="145:31" pos:end="145:33">(<argument pos:start="145:32" pos:end="145:32"><expr pos:start="145:32" pos:end="145:32"><name pos:start="145:32" pos:end="145:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="145:35" pos:end="145:35">&lt;</operator> <literal type="number" pos:start="145:37" pos:end="145:37">0</literal></expr>)</condition> <block pos:start="145:40" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:39">

            <expr_stmt pos:start="147:13" pos:end="147:72"><expr pos:start="147:13" pos:end="147:71"><call pos:start="147:13" pos:end="147:71"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:71">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:41" pos:end="147:70"><expr pos:start="147:41" pos:end="147:70"><literal type="string" pos:start="147:41" pos:end="147:70">"Error reading frame header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="149:13" pos:end="149:39">return <expr pos:start="149:20" pos:end="149:38"><name pos:start="149:20" pos:end="149:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:17">(<expr pos:start="157:9" pos:end="157:16"><operator pos:start="157:9" pos:end="157:9">!</operator><name pos:start="157:10" pos:end="157:16"><name pos:start="157:10" pos:end="157:10">s</name><operator pos:start="157:11" pos:end="157:12">-&gt;</operator><name pos:start="157:13" pos:end="157:16">data</name></name></expr>)</condition> <block pos:start="157:19" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:27">

        <expr_stmt pos:start="159:9" pos:end="159:27"><expr pos:start="159:9" pos:end="159:26"><operator pos:start="159:9" pos:end="159:9">*</operator><name pos:start="159:10" pos:end="159:22">got_frame_ptr</name> <operator pos:start="159:24" pos:end="159:24">=</operator> <literal type="number" pos:start="159:26" pos:end="159:26">0</literal></expr>;</expr_stmt>

        <return pos:start="161:9" pos:end="161:27">return <expr pos:start="161:16" pos:end="161:26"><name pos:start="161:16" pos:end="161:26"><name pos:start="161:16" pos:end="161:20">avpkt</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:26">size</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:59"><expr pos:start="167:5" pos:end="167:58"><name pos:start="167:5" pos:end="167:18">blockstodecode</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <call pos:start="167:22" pos:end="167:58"><name pos:start="167:22" pos:end="167:26">FFMIN</name><argument_list pos:start="167:27" pos:end="167:58">(<argument pos:start="167:28" pos:end="167:45"><expr pos:start="167:28" pos:end="167:45"><name pos:start="167:28" pos:end="167:45"><name pos:start="167:28" pos:end="167:28">s</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:45">blocks_per_loop</name></name></expr></argument>, <argument pos:start="167:48" pos:end="167:57"><expr pos:start="167:48" pos:end="167:57"><name pos:start="167:48" pos:end="167:57"><name pos:start="167:48" pos:end="167:48">s</name><operator pos:start="167:49" pos:end="167:50">-&gt;</operator><name pos:start="167:51" pos:end="167:57">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="169:5" pos:end="169:55">// for old files coefficients were not interleaved,</comment>

    <comment type="line" pos:start="171:5" pos:end="171:47">// so we need to decode all of them at once</comment>

    <if_stmt pos:start="173:5" pos:end="175:36"><if pos:start="173:5" pos:end="175:36">if <condition pos:start="173:8" pos:end="173:30">(<expr pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:22"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:22">fileversion</name></name> <operator pos:start="173:24" pos:end="173:24">&lt;</operator> <literal type="number" pos:start="173:26" pos:end="173:29">3930</literal></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:36"><block_content pos:start="175:9" pos:end="175:36">

        <expr_stmt pos:start="175:9" pos:end="175:36"><expr pos:start="175:9" pos:end="175:35"><name pos:start="175:9" pos:end="175:22">blockstodecode</name> <operator pos:start="175:24" pos:end="175:24">=</operator> <name pos:start="175:26" pos:end="175:35"><name pos:start="175:26" pos:end="175:26">s</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:35">samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:52">/* reallocate decoded sample buffer if needed */</comment>

    <expr_stmt pos:start="181:5" pos:end="183:80"><expr pos:start="181:5" pos:end="183:79"><call pos:start="181:5" pos:end="183:79"><name pos:start="181:5" pos:end="181:18">av_fast_malloc</name><argument_list pos:start="181:19" pos:end="183:79">(<argument pos:start="181:20" pos:end="181:37"><expr pos:start="181:20" pos:end="181:37"><operator pos:start="181:20" pos:end="181:20">&amp;</operator><name pos:start="181:21" pos:end="181:37"><name pos:start="181:21" pos:end="181:21">s</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:37">decoded_buffer</name></name></expr></argument>, <argument pos:start="181:40" pos:end="181:55"><expr pos:start="181:40" pos:end="181:55"><operator pos:start="181:40" pos:end="181:40">&amp;</operator><name pos:start="181:41" pos:end="181:55"><name pos:start="181:41" pos:end="181:41">s</name><operator pos:start="181:42" pos:end="181:43">-&gt;</operator><name pos:start="181:44" pos:end="181:55">decoded_size</name></name></expr></argument>,

                   <argument pos:start="183:20" pos:end="183:78"><expr pos:start="183:20" pos:end="183:78"><literal type="number" pos:start="183:20" pos:end="183:20">2</literal> <operator pos:start="183:22" pos:end="183:22">*</operator> <call pos:start="183:24" pos:end="183:49"><name pos:start="183:24" pos:end="183:30">FFALIGN</name><argument_list pos:start="183:31" pos:end="183:49">(<argument pos:start="183:32" pos:end="183:45"><expr pos:start="183:32" pos:end="183:45"><name pos:start="183:32" pos:end="183:45">blockstodecode</name></expr></argument>, <argument pos:start="183:48" pos:end="183:48"><expr pos:start="183:48" pos:end="183:48"><literal type="number" pos:start="183:48" pos:end="183:48">8</literal></expr></argument>)</argument_list></call> <operator pos:start="183:51" pos:end="183:51">*</operator> <sizeof pos:start="183:53" pos:end="183:78">sizeof<argument_list pos:start="183:59" pos:end="183:78">(<argument pos:start="183:60" pos:end="183:77"><expr pos:start="183:60" pos:end="183:77"><operator pos:start="183:60" pos:end="183:60">*</operator><name pos:start="183:61" pos:end="183:77"><name pos:start="183:61" pos:end="183:61">s</name><operator pos:start="183:62" pos:end="183:63">-&gt;</operator><name pos:start="183:64" pos:end="183:77">decoded_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="187:31"><if pos:start="185:5" pos:end="187:31">if <condition pos:start="185:8" pos:end="185:27">(<expr pos:start="185:9" pos:end="185:26"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:26"><name pos:start="185:10" pos:end="185:10">s</name><operator pos:start="185:11" pos:end="185:12">-&gt;</operator><name pos:start="185:13" pos:end="185:26">decoded_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:31"><block_content pos:start="187:9" pos:end="187:31">

        <return pos:start="187:9" pos:end="187:31">return <expr pos:start="187:16" pos:end="187:30"><call pos:start="187:16" pos:end="187:30"><name pos:start="187:16" pos:end="187:22">AVERROR</name><argument_list pos:start="187:23" pos:end="187:30">(<argument pos:start="187:24" pos:end="187:29"><expr pos:start="187:24" pos:end="187:29"><name pos:start="187:24" pos:end="187:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:50"><expr pos:start="189:5" pos:end="189:49"><call pos:start="189:5" pos:end="189:49"><name pos:start="189:5" pos:end="189:10">memset</name><argument_list pos:start="189:11" pos:end="189:49">(<argument pos:start="189:12" pos:end="189:28"><expr pos:start="189:12" pos:end="189:28"><name pos:start="189:12" pos:end="189:28"><name pos:start="189:12" pos:end="189:12">s</name><operator pos:start="189:13" pos:end="189:14">-&gt;</operator><name pos:start="189:15" pos:end="189:28">decoded_buffer</name></name></expr></argument>, <argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">0</literal></expr></argument>, <argument pos:start="189:34" pos:end="189:48"><expr pos:start="189:34" pos:end="189:48"><name pos:start="189:34" pos:end="189:48"><name pos:start="189:34" pos:end="189:34">s</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:48">decoded_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:38"><expr pos:start="191:5" pos:end="191:37"><name pos:start="191:5" pos:end="191:17"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:14">decoded</name><index pos:start="191:15" pos:end="191:17">[<expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>]</index></name> <operator pos:start="191:19" pos:end="191:19">=</operator> <name pos:start="191:21" pos:end="191:37"><name pos:start="191:21" pos:end="191:21">s</name><operator pos:start="191:22" pos:end="191:23">-&gt;</operator><name pos:start="191:24" pos:end="191:37">decoded_buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:67"><expr pos:start="193:5" pos:end="193:66"><name pos:start="193:5" pos:end="193:17"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:14">decoded</name><index pos:start="193:15" pos:end="193:17">[<expr pos:start="193:16" pos:end="193:16"><literal type="number" pos:start="193:16" pos:end="193:16">1</literal></expr>]</index></name> <operator pos:start="193:19" pos:end="193:19">=</operator> <name pos:start="193:21" pos:end="193:37"><name pos:start="193:21" pos:end="193:21">s</name><operator pos:start="193:22" pos:end="193:23">-&gt;</operator><name pos:start="193:24" pos:end="193:37">decoded_buffer</name></name> <operator pos:start="193:39" pos:end="193:39">+</operator> <call pos:start="193:41" pos:end="193:66"><name pos:start="193:41" pos:end="193:47">FFALIGN</name><argument_list pos:start="193:48" pos:end="193:66">(<argument pos:start="193:49" pos:end="193:62"><expr pos:start="193:49" pos:end="193:62"><name pos:start="193:49" pos:end="193:62">blockstodecode</name></expr></argument>, <argument pos:start="193:65" pos:end="193:65"><expr pos:start="193:65" pos:end="193:65"><literal type="number" pos:start="193:65" pos:end="193:65">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:27">/* get output buffer */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:39"><expr pos:start="199:5" pos:end="199:38"><name pos:start="199:5" pos:end="199:21"><name pos:start="199:5" pos:end="199:9">frame</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:21">nb_samples</name></name> <operator pos:start="199:23" pos:end="199:23">=</operator> <name pos:start="199:25" pos:end="199:38">blockstodecode</name></expr>;</expr_stmt>

    <if_stmt pos:start="201:5" pos:end="203:19"><if pos:start="201:5" pos:end="203:19">if <condition pos:start="201:8" pos:end="201:51">(<expr pos:start="201:9" pos:end="201:50"><operator pos:start="201:9" pos:end="201:9">(</operator><name pos:start="201:10" pos:end="201:12">ret</name> <operator pos:start="201:14" pos:end="201:14">=</operator> <call pos:start="201:16" pos:end="201:45"><name pos:start="201:16" pos:end="201:28">ff_get_buffer</name><argument_list pos:start="201:29" pos:end="201:45">(<argument pos:start="201:30" pos:end="201:34"><expr pos:start="201:30" pos:end="201:34"><name pos:start="201:30" pos:end="201:34">avctx</name></expr></argument>, <argument pos:start="201:37" pos:end="201:41"><expr pos:start="201:37" pos:end="201:41"><name pos:start="201:37" pos:end="201:41">frame</name></expr></argument>, <argument pos:start="201:44" pos:end="201:44"><expr pos:start="201:44" pos:end="201:44"><literal type="number" pos:start="201:44" pos:end="201:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="201:46" pos:end="201:46">)</operator> <operator pos:start="201:48" pos:end="201:48">&lt;</operator> <literal type="number" pos:start="201:50" pos:end="201:50">0</literal></expr>)</condition><block type="pseudo" pos:start="203:9" pos:end="203:19"><block_content pos:start="203:9" pos:end="203:19">

        <return pos:start="203:9" pos:end="203:19">return <expr pos:start="203:16" pos:end="203:18"><name pos:start="203:16" pos:end="203:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:15"><expr pos:start="207:5" pos:end="207:14"><name pos:start="207:5" pos:end="207:12"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:12">error</name></name><operator pos:start="207:13" pos:end="207:13">=</operator><literal type="number" pos:start="207:14" pos:end="207:14">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="211:5" pos:end="217:45"><if pos:start="211:5" pos:end="213:43">if <condition pos:start="211:8" pos:end="211:76">(<expr pos:start="211:9" pos:end="211:75"><operator pos:start="211:9" pos:end="211:9">(</operator><name pos:start="211:10" pos:end="211:20"><name pos:start="211:10" pos:end="211:10">s</name><operator pos:start="211:11" pos:end="211:12">-&gt;</operator><name pos:start="211:13" pos:end="211:20">channels</name></name> <operator pos:start="211:22" pos:end="211:23">==</operator> <literal type="number" pos:start="211:25" pos:end="211:25">1</literal><operator pos:start="211:26" pos:end="211:26">)</operator> <operator pos:start="211:28" pos:end="211:29">||</operator> <operator pos:start="211:31" pos:end="211:31">(</operator><name pos:start="211:32" pos:end="211:44"><name pos:start="211:32" pos:end="211:32">s</name><operator pos:start="211:33" pos:end="211:34">-&gt;</operator><name pos:start="211:35" pos:end="211:44">frameflags</name></name> <operator pos:start="211:46" pos:end="211:46">&amp;</operator> <name pos:start="211:48" pos:end="211:74">APE_FRAMECODE_PSEUDO_STEREO</name><operator pos:start="211:75" pos:end="211:75">)</operator></expr>)</condition><block type="pseudo" pos:start="213:9" pos:end="213:43"><block_content pos:start="213:9" pos:end="213:43">

        <expr_stmt pos:start="213:9" pos:end="213:43"><expr pos:start="213:9" pos:end="213:42"><call pos:start="213:9" pos:end="213:42"><name pos:start="213:9" pos:end="213:23">ape_unpack_mono</name><argument_list pos:start="213:24" pos:end="213:42">(<argument pos:start="213:25" pos:end="213:25"><expr pos:start="213:25" pos:end="213:25"><name pos:start="213:25" pos:end="213:25">s</name></expr></argument>, <argument pos:start="213:28" pos:end="213:41"><expr pos:start="213:28" pos:end="213:41"><name pos:start="213:28" pos:end="213:41">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="215:5" pos:end="217:45">else<block type="pseudo" pos:start="217:9" pos:end="217:45"><block_content pos:start="217:9" pos:end="217:45">

        <expr_stmt pos:start="217:9" pos:end="217:45"><expr pos:start="217:9" pos:end="217:44"><call pos:start="217:9" pos:end="217:44"><name pos:start="217:9" pos:end="217:25">ape_unpack_stereo</name><argument_list pos:start="217:26" pos:end="217:44">(<argument pos:start="217:27" pos:end="217:27"><expr pos:start="217:27" pos:end="217:27"><name pos:start="217:27" pos:end="217:27">s</name></expr></argument>, <argument pos:start="217:30" pos:end="217:43"><expr pos:start="217:30" pos:end="217:43"><name pos:start="217:30" pos:end="217:43">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:13"><expr pos:start="219:5" pos:end="219:12"><call pos:start="219:5" pos:end="219:12"><name pos:start="219:5" pos:end="219:10">emms_c</name><argument_list pos:start="219:11" pos:end="219:12">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="223:5" pos:end="231:5"><if pos:start="223:5" pos:end="231:5">if <condition pos:start="223:8" pos:end="223:17">(<expr pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:9">s</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:16">error</name></name></expr>)</condition> <block pos:start="223:19" pos:end="231:5">{<block_content pos:start="225:9" pos:end="229:35">

        <expr_stmt pos:start="225:9" pos:end="225:21"><expr pos:start="225:9" pos:end="225:20"><name pos:start="225:9" pos:end="225:18"><name pos:start="225:9" pos:end="225:9">s</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:18">samples</name></name><operator pos:start="225:19" pos:end="225:19">=</operator><literal type="number" pos:start="225:20" pos:end="225:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:62"><expr pos:start="227:9" pos:end="227:61"><call pos:start="227:9" pos:end="227:61"><name pos:start="227:9" pos:end="227:14">av_log</name><argument_list pos:start="227:15" pos:end="227:61">(<argument pos:start="227:16" pos:end="227:20"><expr pos:start="227:16" pos:end="227:20"><name pos:start="227:16" pos:end="227:20">avctx</name></expr></argument>, <argument pos:start="227:23" pos:end="227:34"><expr pos:start="227:23" pos:end="227:34"><name pos:start="227:23" pos:end="227:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:37" pos:end="227:60"><expr pos:start="227:37" pos:end="227:60"><literal type="string" pos:start="227:37" pos:end="227:60">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="229:9" pos:end="229:35">return <expr pos:start="229:16" pos:end="229:34"><name pos:start="229:16" pos:end="229:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="235:5" pos:end="279:5">switch <condition pos:start="235:12" pos:end="235:19">(<expr pos:start="235:13" pos:end="235:18"><name pos:start="235:13" pos:end="235:18"><name pos:start="235:13" pos:end="235:13">s</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:18">bps</name></name></expr>)</condition> <block pos:start="235:21" pos:end="279:5">{<block_content pos:start="237:5" pos:end="277:14">

    <case pos:start="237:5" pos:end="237:11">case <expr pos:start="237:10" pos:end="237:10"><literal type="number" pos:start="237:10" pos:end="237:10">8</literal></expr>:</case>

        <for pos:start="239:9" pos:end="247:9">for <control pos:start="239:13" pos:end="239:44">(<init pos:start="239:14" pos:end="239:20"><expr pos:start="239:14" pos:end="239:19"><name pos:start="239:14" pos:end="239:15">ch</name> <operator pos:start="239:17" pos:end="239:17">=</operator> <literal type="number" pos:start="239:19" pos:end="239:19">0</literal></expr>;</init> <condition pos:start="239:22" pos:end="239:38"><expr pos:start="239:22" pos:end="239:37"><name pos:start="239:22" pos:end="239:23">ch</name> <operator pos:start="239:25" pos:end="239:25">&lt;</operator> <name pos:start="239:27" pos:end="239:37"><name pos:start="239:27" pos:end="239:27">s</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:37">channels</name></name></expr>;</condition> <incr pos:start="239:40" pos:end="239:43"><expr pos:start="239:40" pos:end="239:43"><name pos:start="239:40" pos:end="239:41">ch</name><operator pos:start="239:42" pos:end="239:43">++</operator></expr></incr>)</control> <block pos:start="239:46" pos:end="247:9">{<block_content pos:start="241:13" pos:end="245:63">

            <expr_stmt pos:start="241:13" pos:end="241:49"><expr pos:start="241:13" pos:end="241:48"><name pos:start="241:13" pos:end="241:19">sample8</name> <operator pos:start="241:21" pos:end="241:21">=</operator> <operator pos:start="241:23" pos:end="241:23">(</operator><name pos:start="241:24" pos:end="241:30">uint8_t</name> <operator pos:start="241:32" pos:end="241:32">*</operator><operator pos:start="241:33" pos:end="241:33">)</operator><name pos:start="241:34" pos:end="241:48"><name pos:start="241:34" pos:end="241:38">frame</name><operator pos:start="241:39" pos:end="241:40">-&gt;</operator><name pos:start="241:41" pos:end="241:44">data</name><index pos:start="241:45" pos:end="241:48">[<expr pos:start="241:46" pos:end="241:47"><name pos:start="241:46" pos:end="241:47">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="243:13" pos:end="245:63">for <control pos:start="243:17" pos:end="243:48">(<init pos:start="243:18" pos:end="243:23"><expr pos:start="243:18" pos:end="243:22"><name pos:start="243:18" pos:end="243:18">i</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <literal type="number" pos:start="243:22" pos:end="243:22">0</literal></expr>;</init> <condition pos:start="243:25" pos:end="243:43"><expr pos:start="243:25" pos:end="243:42"><name pos:start="243:25" pos:end="243:25">i</name> <operator pos:start="243:27" pos:end="243:27">&lt;</operator> <name pos:start="243:29" pos:end="243:42">blockstodecode</name></expr>;</condition> <incr pos:start="243:45" pos:end="243:47"><expr pos:start="243:45" pos:end="243:47"><name pos:start="243:45" pos:end="243:45">i</name><operator pos:start="243:46" pos:end="243:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="245:17" pos:end="245:63"><block_content pos:start="245:17" pos:end="245:63">

                <expr_stmt pos:start="245:17" pos:end="245:63"><expr pos:start="245:17" pos:end="245:62"><operator pos:start="245:17" pos:end="245:17">*</operator><name pos:start="245:18" pos:end="245:24">sample8</name><operator pos:start="245:25" pos:end="245:26">++</operator> <operator pos:start="245:28" pos:end="245:28">=</operator> <operator pos:start="245:30" pos:end="245:30">(</operator><name pos:start="245:31" pos:end="245:47"><name pos:start="245:31" pos:end="245:31">s</name><operator pos:start="245:32" pos:end="245:33">-&gt;</operator><name pos:start="245:34" pos:end="245:40">decoded</name><index pos:start="245:41" pos:end="245:44">[<expr pos:start="245:42" pos:end="245:43"><name pos:start="245:42" pos:end="245:43">ch</name></expr>]</index><index pos:start="245:45" pos:end="245:47">[<expr pos:start="245:46" pos:end="245:46"><name pos:start="245:46" pos:end="245:46">i</name></expr>]</index></name> <operator pos:start="245:49" pos:end="245:49">+</operator> <literal type="number" pos:start="245:51" pos:end="245:54">0x80</literal><operator pos:start="245:55" pos:end="245:55">)</operator> <operator pos:start="245:57" pos:end="245:57">&amp;</operator> <literal type="number" pos:start="245:59" pos:end="245:62">0xff</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="249:9" pos:end="249:14">break;</break>

    <case pos:start="251:5" pos:end="251:12">case <expr pos:start="251:10" pos:end="251:11"><literal type="number" pos:start="251:10" pos:end="251:11">16</literal></expr>:</case>

        <for pos:start="253:9" pos:end="261:9">for <control pos:start="253:13" pos:end="253:44">(<init pos:start="253:14" pos:end="253:20"><expr pos:start="253:14" pos:end="253:19"><name pos:start="253:14" pos:end="253:15">ch</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <literal type="number" pos:start="253:19" pos:end="253:19">0</literal></expr>;</init> <condition pos:start="253:22" pos:end="253:38"><expr pos:start="253:22" pos:end="253:37"><name pos:start="253:22" pos:end="253:23">ch</name> <operator pos:start="253:25" pos:end="253:25">&lt;</operator> <name pos:start="253:27" pos:end="253:37"><name pos:start="253:27" pos:end="253:27">s</name><operator pos:start="253:28" pos:end="253:29">-&gt;</operator><name pos:start="253:30" pos:end="253:37">channels</name></name></expr>;</condition> <incr pos:start="253:40" pos:end="253:43"><expr pos:start="253:40" pos:end="253:43"><name pos:start="253:40" pos:end="253:41">ch</name><operator pos:start="253:42" pos:end="253:43">++</operator></expr></incr>)</control> <block pos:start="253:46" pos:end="261:9">{<block_content pos:start="255:13" pos:end="259:48">

            <expr_stmt pos:start="255:13" pos:end="255:50"><expr pos:start="255:13" pos:end="255:49"><name pos:start="255:13" pos:end="255:20">sample16</name> <operator pos:start="255:22" pos:end="255:22">=</operator> <operator pos:start="255:24" pos:end="255:24">(</operator><name pos:start="255:25" pos:end="255:31">int16_t</name> <operator pos:start="255:33" pos:end="255:33">*</operator><operator pos:start="255:34" pos:end="255:34">)</operator><name pos:start="255:35" pos:end="255:49"><name pos:start="255:35" pos:end="255:39">frame</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:45">data</name><index pos:start="255:46" pos:end="255:49">[<expr pos:start="255:47" pos:end="255:48"><name pos:start="255:47" pos:end="255:48">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="257:13" pos:end="259:48">for <control pos:start="257:17" pos:end="257:48">(<init pos:start="257:18" pos:end="257:23"><expr pos:start="257:18" pos:end="257:22"><name pos:start="257:18" pos:end="257:18">i</name> <operator pos:start="257:20" pos:end="257:20">=</operator> <literal type="number" pos:start="257:22" pos:end="257:22">0</literal></expr>;</init> <condition pos:start="257:25" pos:end="257:43"><expr pos:start="257:25" pos:end="257:42"><name pos:start="257:25" pos:end="257:25">i</name> <operator pos:start="257:27" pos:end="257:27">&lt;</operator> <name pos:start="257:29" pos:end="257:42">blockstodecode</name></expr>;</condition> <incr pos:start="257:45" pos:end="257:47"><expr pos:start="257:45" pos:end="257:47"><name pos:start="257:45" pos:end="257:45">i</name><operator pos:start="257:46" pos:end="257:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="259:17" pos:end="259:48"><block_content pos:start="259:17" pos:end="259:48">

                <expr_stmt pos:start="259:17" pos:end="259:48"><expr pos:start="259:17" pos:end="259:47"><operator pos:start="259:17" pos:end="259:17">*</operator><name pos:start="259:18" pos:end="259:25">sample16</name><operator pos:start="259:26" pos:end="259:27">++</operator> <operator pos:start="259:29" pos:end="259:29">=</operator> <name pos:start="259:31" pos:end="259:47"><name pos:start="259:31" pos:end="259:31">s</name><operator pos:start="259:32" pos:end="259:33">-&gt;</operator><name pos:start="259:34" pos:end="259:40">decoded</name><index pos:start="259:41" pos:end="259:44">[<expr pos:start="259:42" pos:end="259:43"><name pos:start="259:42" pos:end="259:43">ch</name></expr>]</index><index pos:start="259:45" pos:end="259:47">[<expr pos:start="259:46" pos:end="259:46"><name pos:start="259:46" pos:end="259:46">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="263:9" pos:end="263:14">break;</break>

    <case pos:start="265:5" pos:end="265:12">case <expr pos:start="265:10" pos:end="265:11"><literal type="number" pos:start="265:10" pos:end="265:11">24</literal></expr>:</case>

        <for pos:start="267:9" pos:end="275:9">for <control pos:start="267:13" pos:end="267:44">(<init pos:start="267:14" pos:end="267:20"><expr pos:start="267:14" pos:end="267:19"><name pos:start="267:14" pos:end="267:15">ch</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <literal type="number" pos:start="267:19" pos:end="267:19">0</literal></expr>;</init> <condition pos:start="267:22" pos:end="267:38"><expr pos:start="267:22" pos:end="267:37"><name pos:start="267:22" pos:end="267:23">ch</name> <operator pos:start="267:25" pos:end="267:25">&lt;</operator> <name pos:start="267:27" pos:end="267:37"><name pos:start="267:27" pos:end="267:27">s</name><operator pos:start="267:28" pos:end="267:29">-&gt;</operator><name pos:start="267:30" pos:end="267:37">channels</name></name></expr>;</condition> <incr pos:start="267:40" pos:end="267:43"><expr pos:start="267:40" pos:end="267:43"><name pos:start="267:40" pos:end="267:41">ch</name><operator pos:start="267:42" pos:end="267:43">++</operator></expr></incr>)</control> <block pos:start="267:46" pos:end="275:9">{<block_content pos:start="269:13" pos:end="273:53">

            <expr_stmt pos:start="269:13" pos:end="269:50"><expr pos:start="269:13" pos:end="269:49"><name pos:start="269:13" pos:end="269:20">sample24</name> <operator pos:start="269:22" pos:end="269:22">=</operator> <operator pos:start="269:24" pos:end="269:24">(</operator><name pos:start="269:25" pos:end="269:31">int32_t</name> <operator pos:start="269:33" pos:end="269:33">*</operator><operator pos:start="269:34" pos:end="269:34">)</operator><name pos:start="269:35" pos:end="269:49"><name pos:start="269:35" pos:end="269:39">frame</name><operator pos:start="269:40" pos:end="269:41">-&gt;</operator><name pos:start="269:42" pos:end="269:45">data</name><index pos:start="269:46" pos:end="269:49">[<expr pos:start="269:47" pos:end="269:48"><name pos:start="269:47" pos:end="269:48">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="271:13" pos:end="273:53">for <control pos:start="271:17" pos:end="271:48">(<init pos:start="271:18" pos:end="271:23"><expr pos:start="271:18" pos:end="271:22"><name pos:start="271:18" pos:end="271:18">i</name> <operator pos:start="271:20" pos:end="271:20">=</operator> <literal type="number" pos:start="271:22" pos:end="271:22">0</literal></expr>;</init> <condition pos:start="271:25" pos:end="271:43"><expr pos:start="271:25" pos:end="271:42"><name pos:start="271:25" pos:end="271:25">i</name> <operator pos:start="271:27" pos:end="271:27">&lt;</operator> <name pos:start="271:29" pos:end="271:42">blockstodecode</name></expr>;</condition> <incr pos:start="271:45" pos:end="271:47"><expr pos:start="271:45" pos:end="271:47"><name pos:start="271:45" pos:end="271:45">i</name><operator pos:start="271:46" pos:end="271:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="273:17" pos:end="273:53"><block_content pos:start="273:17" pos:end="273:53">

                <expr_stmt pos:start="273:17" pos:end="273:53"><expr pos:start="273:17" pos:end="273:52"><operator pos:start="273:17" pos:end="273:17">*</operator><name pos:start="273:18" pos:end="273:25">sample24</name><operator pos:start="273:26" pos:end="273:27">++</operator> <operator pos:start="273:29" pos:end="273:29">=</operator> <name pos:start="273:31" pos:end="273:47"><name pos:start="273:31" pos:end="273:31">s</name><operator pos:start="273:32" pos:end="273:33">-&gt;</operator><name pos:start="273:34" pos:end="273:40">decoded</name><index pos:start="273:41" pos:end="273:44">[<expr pos:start="273:42" pos:end="273:43"><name pos:start="273:42" pos:end="273:43">ch</name></expr>]</index><index pos:start="273:45" pos:end="273:47">[<expr pos:start="273:46" pos:end="273:46"><name pos:start="273:46" pos:end="273:46">i</name></expr>]</index></name> <operator pos:start="273:49" pos:end="273:50">&lt;&lt;</operator> <literal type="number" pos:start="273:52" pos:end="273:52">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>

        <break pos:start="277:9" pos:end="277:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="283:5" pos:end="283:33"><expr pos:start="283:5" pos:end="283:32"><name pos:start="283:5" pos:end="283:14"><name pos:start="283:5" pos:end="283:5">s</name><operator pos:start="283:6" pos:end="283:7">-&gt;</operator><name pos:start="283:8" pos:end="283:14">samples</name></name> <operator pos:start="283:16" pos:end="283:17">-=</operator> <name pos:start="283:19" pos:end="283:32">blockstodecode</name></expr>;</expr_stmt>



    <expr_stmt pos:start="287:5" pos:end="287:23"><expr pos:start="287:5" pos:end="287:22"><operator pos:start="287:5" pos:end="287:5">*</operator><name pos:start="287:6" pos:end="287:18">got_frame_ptr</name> <operator pos:start="287:20" pos:end="287:20">=</operator> <literal type="number" pos:start="287:22" pos:end="287:22">1</literal></expr>;</expr_stmt>



    <return pos:start="291:5" pos:end="291:41">return <expr pos:start="291:12" pos:end="291:40"><ternary pos:start="291:12" pos:end="291:40"><condition pos:start="291:12" pos:end="291:24"><expr pos:start="291:12" pos:end="291:22"><operator pos:start="291:12" pos:end="291:12">!</operator><name pos:start="291:13" pos:end="291:22"><name pos:start="291:13" pos:end="291:13">s</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:22">samples</name></name></expr> ?</condition><then pos:start="291:26" pos:end="291:36"> <expr pos:start="291:26" pos:end="291:36"><name pos:start="291:26" pos:end="291:36"><name pos:start="291:26" pos:end="291:30">avpkt</name><operator pos:start="291:31" pos:end="291:32">-&gt;</operator><name pos:start="291:33" pos:end="291:36">size</name></name></expr> </then><else pos:start="291:38" pos:end="291:40">: <expr pos:start="291:40" pos:end="291:40"><literal type="number" pos:start="291:40" pos:end="291:40">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
