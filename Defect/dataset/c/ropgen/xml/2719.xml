<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2719.c" pos:tabs="8"><function pos:start="1:1" pos:end="319:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">aac_decode_frame_int</name><parameter_list pos:start="1:32" pos:end="3:87">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:50">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:69"><decl pos:start="3:53" pos:end="3:69"><type pos:start="3:53" pos:end="3:69"><name pos:start="3:53" pos:end="3:65">GetBitContext</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:69">gb</name></decl></parameter>, <parameter pos:start="3:72" pos:end="3:86"><decl pos:start="3:72" pos:end="3:86"><type pos:start="3:72" pos:end="3:86"><name pos:start="3:72" pos:end="3:79">AVPacket</name> <modifier pos:start="3:81" pos:end="3:81">*</modifier></type><name pos:start="3:82" pos:end="3:86">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="319:1">{<block_content pos:start="7:5" pos:end="317:15">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AACContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">ac</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">ChannelElement</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">che</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">NULL</name></expr></init></decl>, <decl pos:start="9:33" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:41">che_prev</name> <init pos:start="9:43" pos:end="9:48">= <expr pos:start="9:45" pos:end="9:48"><name pos:start="9:45" pos:end="9:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:63"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:8">enum</name> <name pos:start="11:10" pos:end="11:25">RawDataBlockType</name></name></type> <name pos:start="11:27" pos:end="11:35">elem_type</name></decl>, <decl pos:start="11:38" pos:end="11:62"><type ref="prev" pos:start="11:5" pos:end="11:25"/><name pos:start="11:38" pos:end="11:51">elem_type_prev</name> <init pos:start="11:53" pos:end="11:62">= <expr pos:start="11:55" pos:end="11:62"><name pos:start="11:55" pos:end="11:62">TYPE_END</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">err</name></decl>, <decl pos:start="13:14" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:20">elem_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:64"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">samples</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></init></decl>, <decl pos:start="15:22" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:31">multiplier</name></decl>, <decl pos:start="15:34" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:44">audio_found</name> <init pos:start="15:46" pos:end="15:48">= <expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr></init></decl>, <decl pos:start="15:51" pos:end="15:63"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:51" pos:end="15:59">pce_found</name> <init pos:start="15:61" pos:end="15:63">= <expr pos:start="15:63" pos:end="15:63"><literal type="number" pos:start="15:63" pos:end="15:63">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">is_dmono</name></decl>, <decl pos:start="17:19" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:19" pos:end="17:27">sce_count</name> <init pos:start="17:29" pos:end="17:31">= <expr pos:start="17:31" pos:end="17:31"><literal type="number" pos:start="17:31" pos:end="17:31">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:6">ac</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:13">frame</name></name> <operator pos:start="21:15" pos:end="21:15">=</operator> <name pos:start="21:17" pos:end="21:20">data</name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="47:5"><if pos:start="25:5" pos:end="47:5">if <condition pos:start="25:8" pos:end="25:35">(<expr pos:start="25:9" pos:end="25:34"><call pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:17">show_bits</name><argument_list pos:start="25:18" pos:end="25:25">(<argument pos:start="25:19" pos:end="25:20"><expr pos:start="25:19" pos:end="25:20"><name pos:start="25:19" pos:end="25:20">gb</name></expr></argument>, <argument pos:start="25:23" pos:end="25:24"><expr pos:start="25:23" pos:end="25:24"><literal type="number" pos:start="25:23" pos:end="25:24">12</literal></expr></argument>)</argument_list></call> <operator pos:start="25:27" pos:end="25:28">==</operator> <literal type="number" pos:start="25:30" pos:end="25:34">0xfff</literal></expr>)</condition> <block pos:start="25:37" pos:end="47:5">{<block_content pos:start="27:9" pos:end="45:9">

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="35:9">if <condition pos:start="27:12" pos:end="27:48">(<expr pos:start="27:13" pos:end="27:47"><call pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:35">parse_adts_frame_header</name><argument_list pos:start="27:36" pos:end="27:43">(<argument pos:start="27:37" pos:end="27:38"><expr pos:start="27:37" pos:end="27:38"><name pos:start="27:37" pos:end="27:38">ac</name></expr></argument>, <argument pos:start="27:41" pos:end="27:42"><expr pos:start="27:41" pos:end="27:42"><name pos:start="27:41" pos:end="27:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="27:45" pos:end="27:45">&lt;</operator> <literal type="number" pos:start="27:47" pos:end="27:47">0</literal></expr>)</condition> <block pos:start="27:50" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:22">

            <expr_stmt pos:start="29:13" pos:end="29:78"><expr pos:start="29:13" pos:end="29:77"><call pos:start="29:13" pos:end="29:77"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="29:77">(<argument pos:start="29:20" pos:end="29:24"><expr pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:24">avctx</name></expr></argument>, <argument pos:start="29:27" pos:end="29:38"><expr pos:start="29:27" pos:end="29:38"><name pos:start="29:27" pos:end="29:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:41" pos:end="29:76"><expr pos:start="29:41" pos:end="29:76"><literal type="string" pos:start="29:41" pos:end="29:76">"Error decoding AAC frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:21"><expr pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:15">err</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">-</operator><literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="33:13" pos:end="33:22">goto <name pos:start="33:18" pos:end="33:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:47">(<expr pos:start="37:13" pos:end="37:46"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:14">ac</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:18">oc</name><index pos:start="37:19" pos:end="37:21">[<expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>]</index></name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:41"><name pos:start="37:23" pos:end="37:26">m4ac</name><operator pos:start="37:27" pos:end="37:27">.</operator><name pos:start="37:28" pos:end="37:41">sampling_index</name></name> <operator pos:start="37:43" pos:end="37:43">&gt;</operator> <literal type="number" pos:start="37:45" pos:end="37:46">12</literal></expr>)</condition> <block pos:start="37:49" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:22">

            <expr_stmt pos:start="39:13" pos:end="39:111"><expr pos:start="39:13" pos:end="39:110"><call pos:start="39:13" pos:end="39:110"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="39:110">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:21">ac</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:28">avctx</name></name></expr></argument>, <argument pos:start="39:31" pos:end="39:42"><expr pos:start="39:31" pos:end="39:42"><name pos:start="39:31" pos:end="39:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:45" pos:end="39:78"><expr pos:start="39:45" pos:end="39:78"><literal type="string" pos:start="39:45" pos:end="39:78">"invalid sampling rate index %d\n"</literal></expr></argument>, <argument pos:start="39:81" pos:end="39:109"><expr pos:start="39:81" pos:end="39:109"><name pos:start="39:81" pos:end="39:89"><name pos:start="39:81" pos:end="39:82">ac</name><operator pos:start="39:83" pos:end="39:84">-&gt;</operator><name pos:start="39:85" pos:end="39:86">oc</name><index pos:start="39:87" pos:end="39:89">[<expr pos:start="39:88" pos:end="39:88"><literal type="number" pos:start="39:88" pos:end="39:88">1</literal></expr>]</index></name><operator pos:start="39:90" pos:end="39:90">.</operator><name pos:start="39:91" pos:end="39:109"><name pos:start="39:91" pos:end="39:94">m4ac</name><operator pos:start="39:95" pos:end="39:95">.</operator><name pos:start="39:96" pos:end="39:109">sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:21"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">err</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">-</operator><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="43:13" pos:end="43:22">goto <name pos:start="43:18" pos:end="43:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:44">(<expr pos:start="51:9" pos:end="51:43"><call pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:32">frame_configure_elements</name><argument_list pos:start="51:33" pos:end="51:39">(<argument pos:start="51:34" pos:end="51:38"><expr pos:start="51:34" pos:end="51:38"><name pos:start="51:34" pos:end="51:38">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="51:41" pos:end="51:41">&lt;</operator> <literal type="number" pos:start="51:43" pos:end="51:43">0</literal></expr>)</condition> <block pos:start="51:46" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:17"><expr pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">err</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><literal type="number" pos:start="53:16" pos:end="53:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:24"><expr pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:19"><name pos:start="61:5" pos:end="61:6">ac</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:19">tags_mapped</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="63:5" pos:end="63:12">// parse</comment>

    <while pos:start="65:5" pos:end="245:5">while <condition pos:start="65:11" pos:end="65:53">(<expr pos:start="65:12" pos:end="65:52"><operator pos:start="65:12" pos:end="65:12">(</operator><name pos:start="65:13" pos:end="65:21">elem_type</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:39"><name pos:start="65:25" pos:end="65:32">get_bits</name><argument_list pos:start="65:33" pos:end="65:39">(<argument pos:start="65:34" pos:end="65:35"><expr pos:start="65:34" pos:end="65:35"><name pos:start="65:34" pos:end="65:35">gb</name></expr></argument>, <argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">3</literal></expr></argument>)</argument_list></call><operator pos:start="65:40" pos:end="65:40">)</operator> <operator pos:start="65:42" pos:end="65:43">!=</operator> <name pos:start="65:45" pos:end="65:52">TYPE_END</name></expr>)</condition> <block pos:start="65:55" pos:end="245:5">{<block_content pos:start="67:9" pos:end="243:9">

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:15">elem_id</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:33"><name pos:start="67:19" pos:end="67:26">get_bits</name><argument_list pos:start="67:27" pos:end="67:33">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">gb</name></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><literal type="number" pos:start="67:32" pos:end="67:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="87:9"><if pos:start="71:9" pos:end="87:9">if <condition pos:start="71:12" pos:end="71:33">(<expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:21">elem_type</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:32">TYPE_DSE</name></expr>)</condition> <block pos:start="71:35" pos:end="87:9">{<block_content pos:start="73:13" pos:end="85:27">

            <if_stmt pos:start="73:13" pos:end="83:13"><if pos:start="73:13" pos:end="83:13">if <condition pos:start="73:16" pos:end="73:55">(<expr pos:start="73:17" pos:end="73:54"><operator pos:start="73:17" pos:end="73:17">!</operator><operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:21">che</name><operator pos:start="73:22" pos:end="73:22">=</operator><call pos:start="73:23" pos:end="73:53"><name pos:start="73:23" pos:end="73:29">get_che</name><argument_list pos:start="73:30" pos:end="73:53">(<argument pos:start="73:31" pos:end="73:32"><expr pos:start="73:31" pos:end="73:32"><name pos:start="73:31" pos:end="73:32">ac</name></expr></argument>, <argument pos:start="73:35" pos:end="73:43"><expr pos:start="73:35" pos:end="73:43"><name pos:start="73:35" pos:end="73:43">elem_type</name></expr></argument>, <argument pos:start="73:46" pos:end="73:52"><expr pos:start="73:46" pos:end="73:52"><name pos:start="73:46" pos:end="73:52">elem_id</name></expr></argument>)</argument_list></call><operator pos:start="73:54" pos:end="73:54">)</operator></expr>)</condition> <block pos:start="73:57" pos:end="83:13">{<block_content pos:start="75:17" pos:end="81:26">

                <expr_stmt pos:start="75:17" pos:end="77:43"><expr pos:start="75:17" pos:end="77:42"><call pos:start="75:17" pos:end="77:42"><name pos:start="75:17" pos:end="75:22">av_log</name><argument_list pos:start="75:23" pos:end="77:42">(<argument pos:start="75:24" pos:end="75:32"><expr pos:start="75:24" pos:end="75:32"><name pos:start="75:24" pos:end="75:32"><name pos:start="75:24" pos:end="75:25">ac</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:32">avctx</name></name></expr></argument>, <argument pos:start="75:35" pos:end="75:46"><expr pos:start="75:35" pos:end="75:46"><name pos:start="75:35" pos:end="75:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:49" pos:end="75:90"><expr pos:start="75:49" pos:end="75:90"><literal type="string" pos:start="75:49" pos:end="75:90">"channel element %d.%d is not allocated\n"</literal></expr></argument>,

                       <argument pos:start="77:24" pos:end="77:32"><expr pos:start="77:24" pos:end="77:32"><name pos:start="77:24" pos:end="77:32">elem_type</name></expr></argument>, <argument pos:start="77:35" pos:end="77:41"><expr pos:start="77:35" pos:end="77:41"><name pos:start="77:35" pos:end="77:41">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:25"><expr pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:19">err</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <operator pos:start="79:23" pos:end="79:23">-</operator><literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="81:17" pos:end="81:26">goto <name pos:start="81:22" pos:end="81:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:19">samples</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <literal type="number" pos:start="85:23" pos:end="85:26">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="91:9" pos:end="219:9">switch <condition pos:start="91:16" pos:end="91:26">(<expr pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:25">elem_type</name></expr>)</condition> <block pos:start="91:28" pos:end="219:9">{<block_content pos:start="95:9" pos:end="217:18">



        <case pos:start="95:9" pos:end="95:22">case <expr pos:start="95:14" pos:end="95:21"><name pos:start="95:14" pos:end="95:21">TYPE_SCE</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:56"><expr pos:start="97:13" pos:end="97:55"><name pos:start="97:13" pos:end="97:15">err</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:55"><name pos:start="97:19" pos:end="97:28">decode_ics</name><argument_list pos:start="97:29" pos:end="97:55">(<argument pos:start="97:30" pos:end="97:31"><expr pos:start="97:30" pos:end="97:31"><name pos:start="97:30" pos:end="97:31">ac</name></expr></argument>, <argument pos:start="97:34" pos:end="97:44"><expr pos:start="97:34" pos:end="97:44"><operator pos:start="97:34" pos:end="97:34">&amp;</operator><name pos:start="97:35" pos:end="97:44"><name pos:start="97:35" pos:end="97:37">che</name><operator pos:start="97:38" pos:end="97:39">-&gt;</operator><name pos:start="97:40" pos:end="97:41">ch</name><index pos:start="97:42" pos:end="97:44">[<expr pos:start="97:43" pos:end="97:43"><literal type="number" pos:start="97:43" pos:end="97:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:47" pos:end="97:48"><expr pos:start="97:47" pos:end="97:48"><name pos:start="97:47" pos:end="97:48">gb</name></expr></argument>, <argument pos:start="97:51" pos:end="97:51"><expr pos:start="97:51" pos:end="97:51"><literal type="number" pos:start="97:51" pos:end="97:51">0</literal></expr></argument>, <argument pos:start="97:54" pos:end="97:54"><expr pos:start="97:54" pos:end="97:54"><literal type="number" pos:start="97:54" pos:end="97:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:28"><expr pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:23">audio_found</name> <operator pos:start="99:25" pos:end="99:25">=</operator> <literal type="number" pos:start="99:27" pos:end="99:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:24"><expr pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:21">sce_count</name><operator pos:start="101:22" pos:end="101:23">++</operator></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>



        <case pos:start="107:9" pos:end="107:22">case <expr pos:start="107:14" pos:end="107:21"><name pos:start="107:14" pos:end="107:21">TYPE_CPE</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:42"><expr pos:start="109:13" pos:end="109:41"><name pos:start="109:13" pos:end="109:15">err</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:41"><name pos:start="109:19" pos:end="109:28">decode_cpe</name><argument_list pos:start="109:29" pos:end="109:41">(<argument pos:start="109:30" pos:end="109:31"><expr pos:start="109:30" pos:end="109:31"><name pos:start="109:30" pos:end="109:31">ac</name></expr></argument>, <argument pos:start="109:34" pos:end="109:35"><expr pos:start="109:34" pos:end="109:35"><name pos:start="109:34" pos:end="109:35">gb</name></expr></argument>, <argument pos:start="109:38" pos:end="109:40"><expr pos:start="109:38" pos:end="109:40"><name pos:start="109:38" pos:end="109:40">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:28"><expr pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:23">audio_found</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:27">1</literal></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>



        <case pos:start="117:9" pos:end="117:22">case <expr pos:start="117:14" pos:end="117:21"><name pos:start="117:14" pos:end="117:21">TYPE_CCE</name></expr>:</case>

            <expr_stmt pos:start="119:13" pos:end="119:42"><expr pos:start="119:13" pos:end="119:41"><name pos:start="119:13" pos:end="119:15">err</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <call pos:start="119:19" pos:end="119:41"><name pos:start="119:19" pos:end="119:28">decode_cce</name><argument_list pos:start="119:29" pos:end="119:41">(<argument pos:start="119:30" pos:end="119:31"><expr pos:start="119:30" pos:end="119:31"><name pos:start="119:30" pos:end="119:31">ac</name></expr></argument>, <argument pos:start="119:34" pos:end="119:35"><expr pos:start="119:34" pos:end="119:35"><name pos:start="119:34" pos:end="119:35">gb</name></expr></argument>, <argument pos:start="119:38" pos:end="119:40"><expr pos:start="119:38" pos:end="119:40"><name pos:start="119:38" pos:end="119:40">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>



        <case pos:start="125:9" pos:end="125:22">case <expr pos:start="125:14" pos:end="125:21"><name pos:start="125:14" pos:end="125:21">TYPE_LFE</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:56"><expr pos:start="127:13" pos:end="127:55"><name pos:start="127:13" pos:end="127:15">err</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:55"><name pos:start="127:19" pos:end="127:28">decode_ics</name><argument_list pos:start="127:29" pos:end="127:55">(<argument pos:start="127:30" pos:end="127:31"><expr pos:start="127:30" pos:end="127:31"><name pos:start="127:30" pos:end="127:31">ac</name></expr></argument>, <argument pos:start="127:34" pos:end="127:44"><expr pos:start="127:34" pos:end="127:44"><operator pos:start="127:34" pos:end="127:34">&amp;</operator><name pos:start="127:35" pos:end="127:44"><name pos:start="127:35" pos:end="127:37">che</name><operator pos:start="127:38" pos:end="127:39">-&gt;</operator><name pos:start="127:40" pos:end="127:41">ch</name><index pos:start="127:42" pos:end="127:44">[<expr pos:start="127:43" pos:end="127:43"><literal type="number" pos:start="127:43" pos:end="127:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="127:47" pos:end="127:48"><expr pos:start="127:47" pos:end="127:48"><name pos:start="127:47" pos:end="127:48">gb</name></expr></argument>, <argument pos:start="127:51" pos:end="127:51"><expr pos:start="127:51" pos:end="127:51"><literal type="number" pos:start="127:51" pos:end="127:51">0</literal></expr></argument>, <argument pos:start="127:54" pos:end="127:54"><expr pos:start="127:54" pos:end="127:54"><literal type="number" pos:start="127:54" pos:end="127:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:28"><expr pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:23">audio_found</name> <operator pos:start="129:25" pos:end="129:25">=</operator> <literal type="number" pos:start="129:27" pos:end="129:27">1</literal></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>



        <case pos:start="135:9" pos:end="135:22">case <expr pos:start="135:14" pos:end="135:21"><name pos:start="135:14" pos:end="135:21">TYPE_DSE</name></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:15">err</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:50"><name pos:start="137:19" pos:end="137:42">skip_data_stream_element</name><argument_list pos:start="137:43" pos:end="137:50">(<argument pos:start="137:44" pos:end="137:45"><expr pos:start="137:44" pos:end="137:45"><name pos:start="137:44" pos:end="137:45">ac</name></expr></argument>, <argument pos:start="137:48" pos:end="137:49"><expr pos:start="137:48" pos:end="137:49"><name pos:start="137:48" pos:end="137:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>



        <case pos:start="143:9" pos:end="143:22">case <expr pos:start="143:14" pos:end="143:21"><name pos:start="143:14" pos:end="143:21">TYPE_PCE</name></expr>:</case> <block pos:start="143:24" pos:end="183:9">{<block_content pos:start="145:13" pos:end="181:18">

            <decl_stmt pos:start="145:13" pos:end="145:49"><decl pos:start="145:13" pos:end="145:48"><type pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:19">uint8_t</name></type> <name pos:start="145:21" pos:end="145:48"><name pos:start="145:21" pos:end="145:30">layout_map</name><index pos:start="145:31" pos:end="145:45">[<expr pos:start="145:32" pos:end="145:44"><name pos:start="145:32" pos:end="145:42">MAX_ELEM_ID</name><operator pos:start="145:43" pos:end="145:43">*</operator><literal type="number" pos:start="145:44" pos:end="145:44">4</literal></expr>]</index><index pos:start="145:46" pos:end="145:48">[<expr pos:start="145:47" pos:end="145:47"><literal type="number" pos:start="145:47" pos:end="145:47">3</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="147:13" pos:end="147:21"><decl pos:start="147:13" pos:end="147:20"><type pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">int</name></type> <name pos:start="147:17" pos:end="147:20">tags</name></decl>;</decl_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:42"><expr pos:start="149:13" pos:end="149:41"><call pos:start="149:13" pos:end="149:41"><name pos:start="149:13" pos:end="149:37">push_output_configuration</name><argument_list pos:start="149:38" pos:end="149:41">(<argument pos:start="149:39" pos:end="149:40"><expr pos:start="149:39" pos:end="149:40"><name pos:start="149:39" pos:end="149:40">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:70"><expr pos:start="151:13" pos:end="151:69"><name pos:start="151:13" pos:end="151:16">tags</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:69"><name pos:start="151:20" pos:end="151:29">decode_pce</name><argument_list pos:start="151:30" pos:end="151:69">(<argument pos:start="151:31" pos:end="151:35"><expr pos:start="151:31" pos:end="151:35"><name pos:start="151:31" pos:end="151:35">avctx</name></expr></argument>, <argument pos:start="151:38" pos:end="151:52"><expr pos:start="151:38" pos:end="151:52"><operator pos:start="151:38" pos:end="151:38">&amp;</operator><name pos:start="151:39" pos:end="151:47"><name pos:start="151:39" pos:end="151:40">ac</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:44">oc</name><index pos:start="151:45" pos:end="151:47">[<expr pos:start="151:46" pos:end="151:46"><literal type="number" pos:start="151:46" pos:end="151:46">1</literal></expr>]</index></name><operator pos:start="151:48" pos:end="151:48">.</operator><name pos:start="151:49" pos:end="151:52">m4ac</name></expr></argument>, <argument pos:start="151:55" pos:end="151:64"><expr pos:start="151:55" pos:end="151:64"><name pos:start="151:55" pos:end="151:64">layout_map</name></expr></argument>, <argument pos:start="151:67" pos:end="151:68"><expr pos:start="151:67" pos:end="151:68"><name pos:start="151:67" pos:end="151:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:25">(<expr pos:start="153:17" pos:end="153:24"><name pos:start="153:17" pos:end="153:20">tags</name> <operator pos:start="153:22" pos:end="153:22">&lt;</operator> <literal type="number" pos:start="153:24" pos:end="153:24">0</literal></expr>)</condition> <block pos:start="153:27" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:22">

                <expr_stmt pos:start="155:17" pos:end="155:27"><expr pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:19">err</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <name pos:start="155:23" pos:end="155:26">tags</name></expr>;</expr_stmt>

                <break pos:start="157:17" pos:end="157:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="161:13" pos:end="179:13"><if pos:start="161:13" pos:end="169:13">if <condition pos:start="161:16" pos:end="161:26">(<expr pos:start="161:17" pos:end="161:25"><name pos:start="161:17" pos:end="161:25">pce_found</name></expr>)</condition> <block pos:start="161:28" pos:end="169:13">{<block_content pos:start="163:17" pos:end="167:45">

                <expr_stmt pos:start="163:17" pos:end="165:114"><expr pos:start="163:17" pos:end="165:113"><call pos:start="163:17" pos:end="165:113"><name pos:start="163:17" pos:end="163:22">av_log</name><argument_list pos:start="163:23" pos:end="165:113">(<argument pos:start="163:24" pos:end="163:28"><expr pos:start="163:24" pos:end="163:28"><name pos:start="163:24" pos:end="163:28">avctx</name></expr></argument>, <argument pos:start="163:31" pos:end="163:42"><expr pos:start="163:31" pos:end="163:42"><name pos:start="163:31" pos:end="163:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="165:24" pos:end="165:112"><expr pos:start="165:24" pos:end="165:112"><literal type="string" pos:start="165:24" pos:end="165:112">"Not evaluating a further program_config_element as this construct is dubious at best.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:45"><expr pos:start="167:17" pos:end="167:44"><call pos:start="167:17" pos:end="167:44"><name pos:start="167:17" pos:end="167:40">pop_output_configuration</name><argument_list pos:start="167:41" pos:end="167:44">(<argument pos:start="167:42" pos:end="167:43"><expr pos:start="167:42" pos:end="167:43"><name pos:start="167:42" pos:end="167:43">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="169:15" pos:end="179:13">else <block pos:start="169:20" pos:end="179:13">{<block_content pos:start="171:17" pos:end="177:30">

                <expr_stmt pos:start="171:17" pos:end="171:78"><expr pos:start="171:17" pos:end="171:77"><name pos:start="171:17" pos:end="171:19">err</name> <operator pos:start="171:21" pos:end="171:21">=</operator> <call pos:start="171:23" pos:end="171:77"><name pos:start="171:23" pos:end="171:38">output_configure</name><argument_list pos:start="171:39" pos:end="171:77">(<argument pos:start="171:40" pos:end="171:41"><expr pos:start="171:40" pos:end="171:41"><name pos:start="171:40" pos:end="171:41">ac</name></expr></argument>, <argument pos:start="171:44" pos:end="171:53"><expr pos:start="171:44" pos:end="171:53"><name pos:start="171:44" pos:end="171:53">layout_map</name></expr></argument>, <argument pos:start="171:56" pos:end="171:59"><expr pos:start="171:56" pos:end="171:59"><name pos:start="171:56" pos:end="171:59">tags</name></expr></argument>, <argument pos:start="171:62" pos:end="171:73"><expr pos:start="171:62" pos:end="171:73"><name pos:start="171:62" pos:end="171:73">OC_TRIAL_PCE</name></expr></argument>, <argument pos:start="171:76" pos:end="171:76"><expr pos:start="171:76" pos:end="171:76"><literal type="number" pos:start="171:76" pos:end="171:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="173:17" pos:end="175:51"><if pos:start="173:17" pos:end="175:51">if <condition pos:start="173:20" pos:end="173:25">(<expr pos:start="173:21" pos:end="173:24"><operator pos:start="173:21" pos:end="173:21">!</operator><name pos:start="173:22" pos:end="173:24">err</name></expr>)</condition><block type="pseudo" pos:start="175:21" pos:end="175:51"><block_content pos:start="175:21" pos:end="175:51">

                    <expr_stmt pos:start="175:21" pos:end="175:51"><expr pos:start="175:21" pos:end="175:50"><name pos:start="175:21" pos:end="175:29"><name pos:start="175:21" pos:end="175:22">ac</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:26">oc</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">1</literal></expr>]</index></name><operator pos:start="175:30" pos:end="175:30">.</operator><name pos:start="175:31" pos:end="175:46"><name pos:start="175:31" pos:end="175:34">m4ac</name><operator pos:start="175:35" pos:end="175:35">.</operator><name pos:start="175:36" pos:end="175:46">chan_config</name></name> <operator pos:start="175:48" pos:end="175:48">=</operator> <literal type="number" pos:start="175:50" pos:end="175:50">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:30"><expr pos:start="177:17" pos:end="177:29"><name pos:start="177:17" pos:end="177:25">pce_found</name> <operator pos:start="177:27" pos:end="177:27">=</operator> <literal type="number" pos:start="177:29" pos:end="177:29">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        </block_content>}</block>



        <case pos:start="187:9" pos:end="187:22">case <expr pos:start="187:14" pos:end="187:21"><name pos:start="187:14" pos:end="187:21">TYPE_FIL</name></expr>:</case>

            <if_stmt pos:start="189:13" pos:end="191:47"><if pos:start="189:13" pos:end="191:47">if <condition pos:start="189:16" pos:end="189:30">(<expr pos:start="189:17" pos:end="189:29"><name pos:start="189:17" pos:end="189:23">elem_id</name> <operator pos:start="189:25" pos:end="189:26">==</operator> <literal type="number" pos:start="189:28" pos:end="189:29">15</literal></expr>)</condition><block type="pseudo" pos:start="191:17" pos:end="191:47"><block_content pos:start="191:17" pos:end="191:47">

                <expr_stmt pos:start="191:17" pos:end="191:47"><expr pos:start="191:17" pos:end="191:46"><name pos:start="191:17" pos:end="191:23">elem_id</name> <operator pos:start="191:25" pos:end="191:26">+=</operator> <call pos:start="191:28" pos:end="191:42"><name pos:start="191:28" pos:end="191:35">get_bits</name><argument_list pos:start="191:36" pos:end="191:42">(<argument pos:start="191:37" pos:end="191:38"><expr pos:start="191:37" pos:end="191:38"><name pos:start="191:37" pos:end="191:38">gb</name></expr></argument>, <argument pos:start="191:41" pos:end="191:41"><expr pos:start="191:41" pos:end="191:41"><literal type="number" pos:start="191:41" pos:end="191:41">8</literal></expr></argument>)</argument_list></call> <operator pos:start="191:44" pos:end="191:44">-</operator> <literal type="number" pos:start="191:46" pos:end="191:46">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="193:13" pos:end="201:13"><if pos:start="193:13" pos:end="201:13">if <condition pos:start="193:16" pos:end="193:48">(<expr pos:start="193:17" pos:end="193:47"><call pos:start="193:17" pos:end="193:33"><name pos:start="193:17" pos:end="193:29">get_bits_left</name><argument_list pos:start="193:30" pos:end="193:33">(<argument pos:start="193:31" pos:end="193:32"><expr pos:start="193:31" pos:end="193:32"><name pos:start="193:31" pos:end="193:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="193:35" pos:end="193:35">&lt;</operator> <literal type="number" pos:start="193:37" pos:end="193:37">8</literal> <operator pos:start="193:39" pos:end="193:39">*</operator> <name pos:start="193:41" pos:end="193:47">elem_id</name></expr>)</condition> <block pos:start="193:50" pos:end="201:13">{<block_content pos:start="195:21" pos:end="199:30">

                    <expr_stmt pos:start="195:21" pos:end="195:74"><expr pos:start="195:21" pos:end="195:73"><call pos:start="195:21" pos:end="195:73"><name pos:start="195:21" pos:end="195:26">av_log</name><argument_list pos:start="195:27" pos:end="195:73">(<argument pos:start="195:28" pos:end="195:32"><expr pos:start="195:28" pos:end="195:32"><name pos:start="195:28" pos:end="195:32">avctx</name></expr></argument>, <argument pos:start="195:35" pos:end="195:46"><expr pos:start="195:35" pos:end="195:46"><name pos:start="195:35" pos:end="195:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="195:49" pos:end="195:72"><expr pos:start="195:49" pos:end="195:72"><literal type="string" pos:start="195:49" pos:end="195:60">"TYPE_FIL: "</literal><name pos:start="195:61" pos:end="195:72">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:29"><expr pos:start="197:21" pos:end="197:28"><name pos:start="197:21" pos:end="197:23">err</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <operator pos:start="197:27" pos:end="197:27">-</operator><literal type="number" pos:start="197:28" pos:end="197:28">1</literal></expr>;</expr_stmt>

                    <goto pos:start="199:21" pos:end="199:30">goto <name pos:start="199:26" pos:end="199:29">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <while pos:start="203:13" pos:end="205:95">while <condition pos:start="203:19" pos:end="203:31">(<expr pos:start="203:20" pos:end="203:30"><name pos:start="203:20" pos:end="203:26">elem_id</name> <operator pos:start="203:28" pos:end="203:28">&gt;</operator> <literal type="number" pos:start="203:30" pos:end="203:30">0</literal></expr>)</condition><block type="pseudo" pos:start="205:17" pos:end="205:95"><block_content pos:start="205:17" pos:end="205:95">

                <expr_stmt pos:start="205:17" pos:end="205:95"><expr pos:start="205:17" pos:end="205:94"><name pos:start="205:17" pos:end="205:23">elem_id</name> <operator pos:start="205:25" pos:end="205:26">-=</operator> <call pos:start="205:28" pos:end="205:94"><name pos:start="205:28" pos:end="205:51">decode_extension_payload</name><argument_list pos:start="205:52" pos:end="205:94">(<argument pos:start="205:53" pos:end="205:54"><expr pos:start="205:53" pos:end="205:54"><name pos:start="205:53" pos:end="205:54">ac</name></expr></argument>, <argument pos:start="205:57" pos:end="205:58"><expr pos:start="205:57" pos:end="205:58"><name pos:start="205:57" pos:end="205:58">gb</name></expr></argument>, <argument pos:start="205:61" pos:end="205:67"><expr pos:start="205:61" pos:end="205:67"><name pos:start="205:61" pos:end="205:67">elem_id</name></expr></argument>, <argument pos:start="205:70" pos:end="205:77"><expr pos:start="205:70" pos:end="205:77"><name pos:start="205:70" pos:end="205:77">che_prev</name></expr></argument>, <argument pos:start="205:80" pos:end="205:93"><expr pos:start="205:80" pos:end="205:93"><name pos:start="205:80" pos:end="205:93">elem_type_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="207:13" pos:end="207:20"><expr pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:15">err</name> <operator pos:start="207:17" pos:end="207:17">=</operator> <literal type="number" pos:start="207:19" pos:end="207:19">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="207:22" pos:end="207:32">/* FIXME */</comment>

            <break pos:start="209:13" pos:end="209:18">break;</break>



        <default pos:start="213:9" pos:end="213:16">default:</default>

            <expr_stmt pos:start="215:13" pos:end="215:21"><expr pos:start="215:13" pos:end="215:20"><name pos:start="215:13" pos:end="215:15">err</name> <operator pos:start="215:17" pos:end="215:17">=</operator> <operator pos:start="215:19" pos:end="215:19">-</operator><literal type="number" pos:start="215:20" pos:end="215:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="215:23" pos:end="215:71">/* should not happen, but keeps compiler happy */</comment>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="223:9" pos:end="223:29"><expr pos:start="223:9" pos:end="223:28"><name pos:start="223:9" pos:end="223:16">che_prev</name>       <operator pos:start="223:24" pos:end="223:24">=</operator> <name pos:start="223:26" pos:end="223:28">che</name></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:35"><expr pos:start="225:9" pos:end="225:34"><name pos:start="225:9" pos:end="225:22">elem_type_prev</name> <operator pos:start="225:24" pos:end="225:24">=</operator> <name pos:start="225:26" pos:end="225:34">elem_type</name></expr>;</expr_stmt>



        <if_stmt pos:start="229:9" pos:end="231:22"><if pos:start="229:9" pos:end="231:22">if <condition pos:start="229:12" pos:end="229:16">(<expr pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">err</name></expr>)</condition><block type="pseudo" pos:start="231:13" pos:end="231:22"><block_content pos:start="231:13" pos:end="231:22">

            <goto pos:start="231:13" pos:end="231:22">goto <name pos:start="231:18" pos:end="231:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="235:9" pos:end="243:9"><if pos:start="235:9" pos:end="243:9">if <condition pos:start="235:12" pos:end="235:34">(<expr pos:start="235:13" pos:end="235:33"><call pos:start="235:13" pos:end="235:29"><name pos:start="235:13" pos:end="235:25">get_bits_left</name><argument_list pos:start="235:26" pos:end="235:29">(<argument pos:start="235:27" pos:end="235:28"><expr pos:start="235:27" pos:end="235:28"><name pos:start="235:27" pos:end="235:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="235:31" pos:end="235:31">&lt;</operator> <literal type="number" pos:start="235:33" pos:end="235:33">3</literal></expr>)</condition> <block pos:start="235:36" pos:end="243:9">{<block_content pos:start="237:13" pos:end="241:22">

            <expr_stmt pos:start="237:13" pos:end="237:54"><expr pos:start="237:13" pos:end="237:53"><call pos:start="237:13" pos:end="237:53"><name pos:start="237:13" pos:end="237:18">av_log</name><argument_list pos:start="237:19" pos:end="237:53">(<argument pos:start="237:20" pos:end="237:24"><expr pos:start="237:20" pos:end="237:24"><name pos:start="237:20" pos:end="237:24">avctx</name></expr></argument>, <argument pos:start="237:27" pos:end="237:38"><expr pos:start="237:27" pos:end="237:38"><name pos:start="237:27" pos:end="237:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="237:41" pos:end="237:52"><expr pos:start="237:41" pos:end="237:52"><name pos:start="237:41" pos:end="237:52">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:21"><expr pos:start="239:13" pos:end="239:20"><name pos:start="239:13" pos:end="239:15">err</name> <operator pos:start="239:17" pos:end="239:17">=</operator> <operator pos:start="239:19" pos:end="239:19">-</operator><literal type="number" pos:start="239:20" pos:end="239:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="241:13" pos:end="241:22">goto <name pos:start="241:18" pos:end="241:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="249:5" pos:end="249:27"><expr pos:start="249:5" pos:end="249:26"><call pos:start="249:5" pos:end="249:26"><name pos:start="249:5" pos:end="249:22">spectral_to_sample</name><argument_list pos:start="249:23" pos:end="249:26">(<argument pos:start="249:24" pos:end="249:25"><expr pos:start="249:24" pos:end="249:25"><name pos:start="249:24" pos:end="249:25">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:109"><expr pos:start="253:5" pos:end="253:108"><name pos:start="253:5" pos:end="253:14">multiplier</name> <operator pos:start="253:16" pos:end="253:16">=</operator> <ternary pos:start="253:18" pos:end="253:108"><condition pos:start="253:18" pos:end="253:44"><expr pos:start="253:18" pos:end="253:42"><operator pos:start="253:18" pos:end="253:18">(</operator><name pos:start="253:19" pos:end="253:27"><name pos:start="253:19" pos:end="253:20">ac</name><operator pos:start="253:21" pos:end="253:22">-&gt;</operator><name pos:start="253:23" pos:end="253:24">oc</name><index pos:start="253:25" pos:end="253:27">[<expr pos:start="253:26" pos:end="253:26"><literal type="number" pos:start="253:26" pos:end="253:26">1</literal></expr>]</index></name><operator pos:start="253:28" pos:end="253:28">.</operator><name pos:start="253:29" pos:end="253:36"><name pos:start="253:29" pos:end="253:32">m4ac</name><operator pos:start="253:33" pos:end="253:33">.</operator><name pos:start="253:34" pos:end="253:36">sbr</name></name> <operator pos:start="253:38" pos:end="253:39">==</operator> <literal type="number" pos:start="253:41" pos:end="253:41">1</literal><operator pos:start="253:42" pos:end="253:42">)</operator></expr> ?</condition><then pos:start="253:46" pos:end="253:104"> <expr pos:start="253:46" pos:end="253:104"><name pos:start="253:46" pos:end="253:54"><name pos:start="253:46" pos:end="253:47">ac</name><operator pos:start="253:48" pos:end="253:49">-&gt;</operator><name pos:start="253:50" pos:end="253:51">oc</name><index pos:start="253:52" pos:end="253:54">[<expr pos:start="253:53" pos:end="253:53"><literal type="number" pos:start="253:53" pos:end="253:53">1</literal></expr>]</index></name><operator pos:start="253:55" pos:end="253:55">.</operator><name pos:start="253:56" pos:end="253:75"><name pos:start="253:56" pos:end="253:59">m4ac</name><operator pos:start="253:60" pos:end="253:60">.</operator><name pos:start="253:61" pos:end="253:75">ext_sample_rate</name></name> <operator pos:start="253:77" pos:end="253:77">&gt;</operator> <name pos:start="253:79" pos:end="253:87"><name pos:start="253:79" pos:end="253:80">ac</name><operator pos:start="253:81" pos:end="253:82">-&gt;</operator><name pos:start="253:83" pos:end="253:84">oc</name><index pos:start="253:85" pos:end="253:87">[<expr pos:start="253:86" pos:end="253:86"><literal type="number" pos:start="253:86" pos:end="253:86">1</literal></expr>]</index></name><operator pos:start="253:88" pos:end="253:88">.</operator><name pos:start="253:89" pos:end="253:104"><name pos:start="253:89" pos:end="253:92">m4ac</name><operator pos:start="253:93" pos:end="253:93">.</operator><name pos:start="253:94" pos:end="253:104">sample_rate</name></name></expr> </then><else pos:start="253:106" pos:end="253:108">: <expr pos:start="253:108" pos:end="253:108"><literal type="number" pos:start="253:108" pos:end="253:108">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:27"><expr pos:start="255:5" pos:end="255:26"><name pos:start="255:5" pos:end="255:11">samples</name> <operator pos:start="255:13" pos:end="255:15">&lt;&lt;=</operator> <name pos:start="255:17" pos:end="255:26">multiplier</name></expr>;</expr_stmt>

    <comment type="block" pos:start="257:5" pos:end="257:41">/* for dual-mono audio (SCE + SCE) */</comment>

    <expr_stmt pos:start="259:5" pos:end="261:82"><expr pos:start="259:5" pos:end="261:81"><name pos:start="259:5" pos:end="259:12">is_dmono</name> <operator pos:start="259:14" pos:end="259:14">=</operator> <name pos:start="259:16" pos:end="259:29"><name pos:start="259:16" pos:end="259:17">ac</name><operator pos:start="259:18" pos:end="259:19">-&gt;</operator><name pos:start="259:20" pos:end="259:29">dmono_mode</name></name> <operator pos:start="259:31" pos:end="259:32">&amp;&amp;</operator> <name pos:start="259:34" pos:end="259:42">sce_count</name> <operator pos:start="259:44" pos:end="259:45">==</operator> <literal type="number" pos:start="259:47" pos:end="259:47">2</literal> <operator pos:start="259:49" pos:end="259:50">&amp;&amp;</operator>

               <name pos:start="261:16" pos:end="261:24"><name pos:start="261:16" pos:end="261:17">ac</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:21">oc</name><index pos:start="261:22" pos:end="261:24">[<expr pos:start="261:23" pos:end="261:23"><literal type="number" pos:start="261:23" pos:end="261:23">1</literal></expr>]</index></name><operator pos:start="261:25" pos:end="261:25">.</operator><name pos:start="261:26" pos:end="261:39">channel_layout</name> <operator pos:start="261:41" pos:end="261:42">==</operator> <operator pos:start="261:44" pos:end="261:44">(</operator><name pos:start="261:45" pos:end="261:60">AV_CH_FRONT_LEFT</name> <operator pos:start="261:62" pos:end="261:62">|</operator> <name pos:start="261:64" pos:end="261:80">AV_CH_FRONT_RIGHT</name><operator pos:start="261:81" pos:end="261:81">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="265:5" pos:end="267:40"><if pos:start="265:5" pos:end="267:40">if <condition pos:start="265:8" pos:end="265:16">(<expr pos:start="265:9" pos:end="265:15"><name pos:start="265:9" pos:end="265:15">samples</name></expr>)</condition><block type="pseudo" pos:start="267:9" pos:end="267:40"><block_content pos:start="267:9" pos:end="267:40">

        <expr_stmt pos:start="267:9" pos:end="267:40"><expr pos:start="267:9" pos:end="267:39"><name pos:start="267:9" pos:end="267:29"><name pos:start="267:9" pos:end="267:10">ac</name><operator pos:start="267:11" pos:end="267:12">-&gt;</operator><name pos:start="267:13" pos:end="267:17">frame</name><operator pos:start="267:18" pos:end="267:19">-&gt;</operator><name pos:start="267:20" pos:end="267:29">nb_samples</name></name> <operator pos:start="267:31" pos:end="267:31">=</operator> <name pos:start="267:33" pos:end="267:39">samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:31"><expr pos:start="269:5" pos:end="269:30"><operator pos:start="269:5" pos:end="269:5">*</operator><name pos:start="269:6" pos:end="269:18">got_frame_ptr</name> <operator pos:start="269:20" pos:end="269:20">=</operator> <operator pos:start="269:22" pos:end="269:22">!</operator><operator pos:start="269:23" pos:end="269:23">!</operator><name pos:start="269:24" pos:end="269:30">samples</name></expr>;</expr_stmt>



    <if_stmt pos:start="273:5" pos:end="283:5"><if pos:start="273:5" pos:end="283:5">if <condition pos:start="273:8" pos:end="273:17">(<expr pos:start="273:9" pos:end="273:16"><name pos:start="273:9" pos:end="273:16">is_dmono</name></expr>)</condition> <block pos:start="273:19" pos:end="283:5">{<block_content pos:start="275:9" pos:end="281:67">

        <if_stmt pos:start="275:9" pos:end="281:67"><if pos:start="275:9" pos:end="277:67">if <condition pos:start="275:12" pos:end="275:32">(<expr pos:start="275:13" pos:end="275:31"><name pos:start="275:13" pos:end="275:26"><name pos:start="275:13" pos:end="275:14">ac</name><operator pos:start="275:15" pos:end="275:16">-&gt;</operator><name pos:start="275:17" pos:end="275:26">dmono_mode</name></name> <operator pos:start="275:28" pos:end="275:29">==</operator> <literal type="number" pos:start="275:31" pos:end="275:31">1</literal></expr>)</condition><block type="pseudo" pos:start="277:13" pos:end="277:67"><block_content pos:start="277:13" pos:end="277:67">

            <expr_stmt pos:start="277:13" pos:end="277:67"><expr pos:start="277:13" pos:end="277:66"><operator pos:start="277:13" pos:end="277:13">(</operator><operator pos:start="277:14" pos:end="277:14">(</operator><name pos:start="277:15" pos:end="277:21">AVFrame</name> <operator pos:start="277:23" pos:end="277:23">*</operator><operator pos:start="277:24" pos:end="277:24">)</operator><name pos:start="277:25" pos:end="277:28">data</name><operator pos:start="277:29" pos:end="277:29">)</operator><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:38"><name pos:start="277:32" pos:end="277:35">data</name><index pos:start="277:36" pos:end="277:38">[<expr pos:start="277:37" pos:end="277:37"><literal type="number" pos:start="277:37" pos:end="277:37">1</literal></expr>]</index></name> <operator pos:start="277:40" pos:end="277:40">=</operator><operator pos:start="277:41" pos:end="277:41">(</operator><operator pos:start="277:42" pos:end="277:42">(</operator><name pos:start="277:43" pos:end="277:49">AVFrame</name> <operator pos:start="277:51" pos:end="277:51">*</operator><operator pos:start="277:52" pos:end="277:52">)</operator><name pos:start="277:53" pos:end="277:56">data</name><operator pos:start="277:57" pos:end="277:57">)</operator><operator pos:start="277:58" pos:end="277:59">-&gt;</operator><name pos:start="277:60" pos:end="277:66"><name pos:start="277:60" pos:end="277:63">data</name><index pos:start="277:64" pos:end="277:66">[<expr pos:start="277:65" pos:end="277:65"><literal type="number" pos:start="277:65" pos:end="277:65">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="279:9" pos:end="281:67">else if <condition pos:start="279:17" pos:end="279:37">(<expr pos:start="279:18" pos:end="279:36"><name pos:start="279:18" pos:end="279:31"><name pos:start="279:18" pos:end="279:19">ac</name><operator pos:start="279:20" pos:end="279:21">-&gt;</operator><name pos:start="279:22" pos:end="279:31">dmono_mode</name></name> <operator pos:start="279:33" pos:end="279:34">==</operator> <literal type="number" pos:start="279:36" pos:end="279:36">2</literal></expr>)</condition><block type="pseudo" pos:start="281:13" pos:end="281:67"><block_content pos:start="281:13" pos:end="281:67">

            <expr_stmt pos:start="281:13" pos:end="281:67"><expr pos:start="281:13" pos:end="281:66"><operator pos:start="281:13" pos:end="281:13">(</operator><operator pos:start="281:14" pos:end="281:14">(</operator><name pos:start="281:15" pos:end="281:21">AVFrame</name> <operator pos:start="281:23" pos:end="281:23">*</operator><operator pos:start="281:24" pos:end="281:24">)</operator><name pos:start="281:25" pos:end="281:28">data</name><operator pos:start="281:29" pos:end="281:29">)</operator><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:38"><name pos:start="281:32" pos:end="281:35">data</name><index pos:start="281:36" pos:end="281:38">[<expr pos:start="281:37" pos:end="281:37"><literal type="number" pos:start="281:37" pos:end="281:37">0</literal></expr>]</index></name> <operator pos:start="281:40" pos:end="281:40">=</operator><operator pos:start="281:41" pos:end="281:41">(</operator><operator pos:start="281:42" pos:end="281:42">(</operator><name pos:start="281:43" pos:end="281:49">AVFrame</name> <operator pos:start="281:51" pos:end="281:51">*</operator><operator pos:start="281:52" pos:end="281:52">)</operator><name pos:start="281:53" pos:end="281:56">data</name><operator pos:start="281:57" pos:end="281:57">)</operator><operator pos:start="281:58" pos:end="281:59">-&gt;</operator><name pos:start="281:60" pos:end="281:66"><name pos:start="281:60" pos:end="281:63">data</name><index pos:start="281:64" pos:end="281:66">[<expr pos:start="281:65" pos:end="281:65"><literal type="number" pos:start="281:65" pos:end="281:65">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="287:5" pos:end="295:5"><if pos:start="287:5" pos:end="295:5">if <condition pos:start="287:8" pos:end="287:40">(<expr pos:start="287:9" pos:end="287:39"><name pos:start="287:9" pos:end="287:17"><name pos:start="287:9" pos:end="287:10">ac</name><operator pos:start="287:11" pos:end="287:12">-&gt;</operator><name pos:start="287:13" pos:end="287:14">oc</name><index pos:start="287:15" pos:end="287:17">[<expr pos:start="287:16" pos:end="287:16"><literal type="number" pos:start="287:16" pos:end="287:16">1</literal></expr>]</index></name><operator pos:start="287:18" pos:end="287:18">.</operator><name pos:start="287:19" pos:end="287:24">status</name> <operator pos:start="287:26" pos:end="287:27">&amp;&amp;</operator> <name pos:start="287:29" pos:end="287:39">audio_found</name></expr>)</condition> <block pos:start="287:42" pos:end="295:5">{<block_content pos:start="289:9" pos:end="293:37">

        <expr_stmt pos:start="289:9" pos:end="289:70"><expr pos:start="289:9" pos:end="289:69"><name pos:start="289:9" pos:end="289:26"><name pos:start="289:9" pos:end="289:13">avctx</name><operator pos:start="289:14" pos:end="289:15">-&gt;</operator><name pos:start="289:16" pos:end="289:26">sample_rate</name></name> <operator pos:start="289:28" pos:end="289:28">=</operator> <name pos:start="289:30" pos:end="289:38"><name pos:start="289:30" pos:end="289:31">ac</name><operator pos:start="289:32" pos:end="289:33">-&gt;</operator><name pos:start="289:34" pos:end="289:35">oc</name><index pos:start="289:36" pos:end="289:38">[<expr pos:start="289:37" pos:end="289:37"><literal type="number" pos:start="289:37" pos:end="289:37">1</literal></expr>]</index></name><operator pos:start="289:39" pos:end="289:39">.</operator><name pos:start="289:40" pos:end="289:55"><name pos:start="289:40" pos:end="289:43">m4ac</name><operator pos:start="289:44" pos:end="289:44">.</operator><name pos:start="289:45" pos:end="289:55">sample_rate</name></name> <operator pos:start="289:57" pos:end="289:58">&lt;&lt;</operator> <name pos:start="289:60" pos:end="289:69">multiplier</name></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:36"><expr pos:start="291:9" pos:end="291:35"><name pos:start="291:9" pos:end="291:25"><name pos:start="291:9" pos:end="291:13">avctx</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:25">frame_size</name></name> <operator pos:start="291:27" pos:end="291:27">=</operator> <name pos:start="291:29" pos:end="291:35">samples</name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:37"><expr pos:start="293:9" pos:end="293:36"><name pos:start="293:9" pos:end="293:17"><name pos:start="293:9" pos:end="293:10">ac</name><operator pos:start="293:11" pos:end="293:12">-&gt;</operator><name pos:start="293:13" pos:end="293:14">oc</name><index pos:start="293:15" pos:end="293:17">[<expr pos:start="293:16" pos:end="293:16"><literal type="number" pos:start="293:16" pos:end="293:16">1</literal></expr>]</index></name><operator pos:start="293:18" pos:end="293:18">.</operator><name pos:start="293:19" pos:end="293:24">status</name> <operator pos:start="293:26" pos:end="293:26">=</operator> <name pos:start="293:28" pos:end="293:36">OC_LOCKED</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="299:5" pos:end="309:5"><if pos:start="299:5" pos:end="309:5">if <condition pos:start="299:8" pos:end="299:19">(<expr pos:start="299:9" pos:end="299:18"><name pos:start="299:9" pos:end="299:18">multiplier</name></expr>)</condition> <block pos:start="299:21" pos:end="309:5">{<block_content pos:start="301:9" pos:end="307:43">

        <decl_stmt pos:start="301:9" pos:end="301:22"><decl pos:start="301:9" pos:end="301:21"><type pos:start="301:9" pos:end="301:11"><name pos:start="301:9" pos:end="301:11">int</name></type> <name pos:start="301:13" pos:end="301:21">side_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="303:9" pos:end="303:94"><decl pos:start="303:9" pos:end="303:93"><type pos:start="303:9" pos:end="303:18"><name pos:start="303:9" pos:end="303:16">uint32_t</name> <modifier pos:start="303:18" pos:end="303:18">*</modifier></type><name pos:start="303:19" pos:end="303:22">side</name> <init pos:start="303:24" pos:end="303:93">= <expr pos:start="303:26" pos:end="303:93"><call pos:start="303:26" pos:end="303:93"><name pos:start="303:26" pos:end="303:48">av_packet_get_side_data</name><argument_list pos:start="303:49" pos:end="303:93">(<argument pos:start="303:50" pos:end="303:54"><expr pos:start="303:50" pos:end="303:54"><name pos:start="303:50" pos:end="303:54">avpkt</name></expr></argument>, <argument pos:start="303:57" pos:end="303:80"><expr pos:start="303:57" pos:end="303:80"><name pos:start="303:57" pos:end="303:80">AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>, <argument pos:start="303:83" pos:end="303:92"><expr pos:start="303:83" pos:end="303:92"><operator pos:start="303:83" pos:end="303:83">&amp;</operator><name pos:start="303:84" pos:end="303:92">side_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="305:9" pos:end="307:43"><if pos:start="305:9" pos:end="307:43">if <condition pos:start="305:12" pos:end="305:33">(<expr pos:start="305:13" pos:end="305:32"><name pos:start="305:13" pos:end="305:16">side</name> <operator pos:start="305:18" pos:end="305:19">&amp;&amp;</operator> <name pos:start="305:21" pos:end="305:29">side_size</name><operator pos:start="305:30" pos:end="305:31">&gt;=</operator><literal type="number" pos:start="305:32" pos:end="305:32">4</literal></expr>)</condition><block type="pseudo" pos:start="307:13" pos:end="307:43"><block_content pos:start="307:13" pos:end="307:43">

            <expr_stmt pos:start="307:13" pos:end="307:43"><expr pos:start="307:13" pos:end="307:42"><call pos:start="307:13" pos:end="307:42"><name pos:start="307:13" pos:end="307:19">AV_WL32</name><argument_list pos:start="307:20" pos:end="307:42">(<argument pos:start="307:21" pos:end="307:24"><expr pos:start="307:21" pos:end="307:24"><name pos:start="307:21" pos:end="307:24">side</name></expr></argument>, <argument pos:start="307:27" pos:end="307:41"><expr pos:start="307:27" pos:end="307:41"><literal type="number" pos:start="307:27" pos:end="307:27">2</literal><operator pos:start="307:28" pos:end="307:28">*</operator><call pos:start="307:29" pos:end="307:41"><name pos:start="307:29" pos:end="307:35">AV_RL32</name><argument_list pos:start="307:36" pos:end="307:41">(<argument pos:start="307:37" pos:end="307:40"><expr pos:start="307:37" pos:end="307:40"><name pos:start="307:37" pos:end="307:40">side</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="311:5" pos:end="311:13">return <expr pos:start="311:12" pos:end="311:12"><literal type="number" pos:start="311:12" pos:end="311:12">0</literal></expr>;</return>

<label pos:start="313:1" pos:end="313:5"><name pos:start="313:1" pos:end="313:4">fail</name>:</label>

    <expr_stmt pos:start="315:5" pos:end="315:33"><expr pos:start="315:5" pos:end="315:32"><call pos:start="315:5" pos:end="315:32"><name pos:start="315:5" pos:end="315:28">pop_output_configuration</name><argument_list pos:start="315:29" pos:end="315:32">(<argument pos:start="315:30" pos:end="315:31"><expr pos:start="315:30" pos:end="315:31"><name pos:start="315:30" pos:end="315:31">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="317:5" pos:end="317:15">return <expr pos:start="317:12" pos:end="317:14"><name pos:start="317:12" pos:end="317:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
