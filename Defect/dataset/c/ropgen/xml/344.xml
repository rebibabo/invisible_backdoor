<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/344.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">memory_dump</name><parameter_list pos:start="1:24" pos:end="3:65">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">Monitor</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">mon</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:47"><decl pos:start="1:39" pos:end="1:47"><type pos:start="1:39" pos:end="1:47"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:47">count</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:59">format</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:70"><decl pos:start="1:62" pos:end="1:70"><type pos:start="1:62" pos:end="1:70"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:70">wsize</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:47"><decl pos:start="3:25" pos:end="3:47"><type pos:start="3:25" pos:end="3:47"><name pos:start="3:25" pos:end="3:42">target_phys_addr_t</name></type> <name pos:start="3:44" pos:end="3:47">addr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:64">is_physical</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="245:1">{<block_content pos:start="7:5" pos:end="243:5">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">l</name></decl>, <decl pos:start="9:12" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:20">line_size</name></decl>, <decl pos:start="9:23" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:23">i</name></decl>, <decl pos:start="9:26" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:35">max_digits</name></decl>, <decl pos:start="9:38" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:38" pos:end="9:40">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:19"><name pos:start="11:13" pos:end="11:15">buf</name><index pos:start="11:16" pos:end="11:19">[<expr pos:start="11:17" pos:end="11:18"><literal type="number" pos:start="11:17" pos:end="11:18">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:14">v</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="73:5"><if pos:start="17:5" pos:end="73:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:14">format</name> <operator pos:start="17:16" pos:end="17:17">==</operator> <literal type="char" pos:start="17:19" pos:end="17:21">'i'</literal></expr>)</condition> <block pos:start="17:24" pos:end="73:5">{<block_content pos:start="19:9" pos:end="71:15">

        <decl_stmt pos:start="19:9" pos:end="19:18"><decl pos:start="19:9" pos:end="19:17"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:18"><expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:13">flags</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:11">env</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:25">mon_get_cpu</name><argument_list pos:start="23:26" pos:end="23:27">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="30:0"><if pos:start="25:9" pos:end="30:0">if <condition pos:start="25:12" pos:end="25:33">(<expr pos:start="25:13" pos:end="25:32"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:16">env</name> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <operator pos:start="25:21" pos:end="25:21">!</operator><name pos:start="25:22" pos:end="25:32">is_physical</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="30:0"><block_content pos:start="27:13" pos:end="30:0">

            <return pos:start="27:13" pos:end="30:0">return;</return></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="29:1" pos:end="29:18">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:18">TARGET_I386</name></cpp:ifdef>

        <if_stmt pos:start="31:9" pos:end="68:0"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:23">(<expr pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:17">wsize</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <literal type="number" pos:start="31:22" pos:end="31:22">2</literal></expr>)</condition> <block pos:start="31:25" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:22">

            <expr_stmt pos:start="33:13" pos:end="33:22"><expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:17">flags</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="39:9">else if <condition pos:start="35:19" pos:end="35:30">(<expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:24">wsize</name> <operator pos:start="35:26" pos:end="35:27">==</operator> <literal type="number" pos:start="35:29" pos:end="35:29">4</literal></expr>)</condition> <block pos:start="35:32" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:22">

            <expr_stmt pos:start="37:13" pos:end="37:22"><expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:17">flags</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="68:0">else <block pos:start="39:16" pos:end="68:0">{<block_content pos:start="43:13" pos:end="63:13">

            <comment type="block" pos:start="41:13" pos:end="41:55">/* as default we use the current CS size */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:22"><expr pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:17">flags</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="63:13"><if pos:start="45:13" pos:end="63:13">if <condition pos:start="45:16" pos:end="45:20">(<expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">env</name></expr>)</condition> <block pos:start="45:22" pos:end="63:13">{<block_content pos:start="49:17" pos:end="61:30">

<cpp:ifdef pos:start="47:1" pos:end="47:20">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:20">TARGET_X86_64</name></cpp:ifdef>

                <if_stmt pos:start="49:17" pos:end="61:30"><if pos:start="49:17" pos:end="53:30">if <condition pos:start="49:20" pos:end="51:58">(<expr pos:start="49:21" pos:end="51:57"><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:24">env</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">efer</name></name> <operator pos:start="49:32" pos:end="49:32">&amp;</operator> <name pos:start="49:34" pos:end="49:45">MSR_EFER_LMA</name><operator pos:start="49:46" pos:end="49:46">)</operator> <operator pos:start="49:48" pos:end="49:49">&amp;&amp;</operator>

                    <operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:36"><name pos:start="51:22" pos:end="51:24">env</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:30">segs</name><index pos:start="51:31" pos:end="51:36">[<expr pos:start="51:32" pos:end="51:35"><name pos:start="51:32" pos:end="51:35">R_CS</name></expr>]</index></name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:42">flags</name> <operator pos:start="51:44" pos:end="51:44">&amp;</operator> <name pos:start="51:46" pos:end="51:56">DESC_L_MASK</name><operator pos:start="51:57" pos:end="51:57">)</operator></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:30"><block_content pos:start="53:21" pos:end="53:30">

                    <expr_stmt pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:29"><name pos:start="53:21" pos:end="53:25">flags</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">2</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="55:17" pos:end="61:30">else

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

                if <condition pos:start="59:20" pos:end="59:59">(<expr pos:start="59:21" pos:end="59:58"><operator pos:start="59:21" pos:end="59:21">!</operator><operator pos:start="59:22" pos:end="59:22">(</operator><name pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:25">env</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:31">segs</name><index pos:start="59:32" pos:end="59:37">[<expr pos:start="59:33" pos:end="59:36"><name pos:start="59:33" pos:end="59:36">R_CS</name></expr>]</index></name><operator pos:start="59:38" pos:end="59:38">.</operator><name pos:start="59:39" pos:end="59:43">flags</name> <operator pos:start="59:45" pos:end="59:45">&amp;</operator> <name pos:start="59:47" pos:end="59:57">DESC_B_MASK</name><operator pos:start="59:58" pos:end="59:58">)</operator></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="61:30"><block_content pos:start="61:21" pos:end="61:30">

                    <expr_stmt pos:start="61:21" pos:end="61:30"><expr pos:start="61:21" pos:end="61:29"><name pos:start="61:21" pos:end="61:25">flags</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="69:9" pos:end="69:65"><expr pos:start="69:9" pos:end="69:64"><call pos:start="69:9" pos:end="69:64"><name pos:start="69:9" pos:end="69:21">monitor_disas</name><argument_list pos:start="69:22" pos:end="69:64">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">mon</name></expr></argument>, <argument pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">env</name></expr></argument>, <argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">addr</name></expr></argument>, <argument pos:start="69:39" pos:end="69:43"><expr pos:start="69:39" pos:end="69:43"><name pos:start="69:39" pos:end="69:43">count</name></expr></argument>, <argument pos:start="69:46" pos:end="69:56"><expr pos:start="69:46" pos:end="69:56"><name pos:start="69:46" pos:end="69:56">is_physical</name></expr></argument>, <argument pos:start="69:59" pos:end="69:63"><expr pos:start="69:59" pos:end="69:63"><name pos:start="69:59" pos:end="69:63">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:7">len</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <name pos:start="77:11" pos:end="77:15">wsize</name> <operator pos:start="77:17" pos:end="77:17">*</operator> <name pos:start="77:19" pos:end="77:23">count</name></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:23"><if pos:start="79:5" pos:end="81:22">if <condition pos:start="79:8" pos:end="79:19">(<expr pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:13">wsize</name> <operator pos:start="79:15" pos:end="79:16">==</operator> <literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:22"><block_content pos:start="81:9" pos:end="81:22">

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:17">line_size</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <literal type="number" pos:start="81:21" pos:end="81:21">8</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="83:5" pos:end="85:23">else<block type="pseudo" pos:start="85:9" pos:end="85:23"><block_content pos:start="85:9" pos:end="85:23">

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:17">line_size</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <literal type="number" pos:start="85:21" pos:end="85:22">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:19"><expr pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:14">max_digits</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>;</expr_stmt>



    <switch pos:start="91:5" pos:end="121:5">switch<condition pos:start="91:11" pos:end="91:18">(<expr pos:start="91:12" pos:end="91:17"><name pos:start="91:12" pos:end="91:17">format</name></expr>)</condition> <block pos:start="91:20" pos:end="121:5">{<block_content pos:start="93:5" pos:end="119:14">

    <case pos:start="93:5" pos:end="93:13">case <expr pos:start="93:10" pos:end="93:12"><literal type="char" pos:start="93:10" pos:end="93:12">'o'</literal></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:18">max_digits</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <operator pos:start="95:22" pos:end="95:22">(</operator><name pos:start="95:23" pos:end="95:27">wsize</name> <operator pos:start="95:29" pos:end="95:29">*</operator> <literal type="number" pos:start="95:31" pos:end="95:33">8</literal> <operator pos:start="95:33" pos:end="95:33">+</operator> <literal type="number" pos:start="95:35" pos:end="95:35">2</literal><operator pos:start="95:36" pos:end="95:36">)</operator> <operator pos:start="95:38" pos:end="95:38">/</operator> <literal type="number" pos:start="95:40" pos:end="95:40">3</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <default pos:start="99:5" pos:end="99:12">default:</default>

    <case pos:start="101:5" pos:end="101:13">case <expr pos:start="101:10" pos:end="101:12"><literal type="char" pos:start="101:10" pos:end="101:12">'x'</literal></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:18">max_digits</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <operator pos:start="103:22" pos:end="103:22">(</operator><name pos:start="103:23" pos:end="103:27">wsize</name> <operator pos:start="103:29" pos:end="103:29">*</operator> <literal type="number" pos:start="103:31" pos:end="103:31">8</literal><operator pos:start="103:32" pos:end="103:32">)</operator> <operator pos:start="103:34" pos:end="103:34">/</operator> <literal type="number" pos:start="103:36" pos:end="103:36">4</literal></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:13">case <expr pos:start="107:10" pos:end="107:12"><literal type="char" pos:start="107:10" pos:end="107:12">'u'</literal></expr>:</case>

    <case pos:start="109:5" pos:end="109:13">case <expr pos:start="109:10" pos:end="109:12"><literal type="char" pos:start="109:10" pos:end="109:12">'d'</literal></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:18">max_digits</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <operator pos:start="111:22" pos:end="111:22">(</operator><name pos:start="111:23" pos:end="111:27">wsize</name> <operator pos:start="111:29" pos:end="111:29">*</operator> <literal type="number" pos:start="111:31" pos:end="111:31">8</literal> <operator pos:start="111:33" pos:end="111:33">*</operator> <literal type="number" pos:start="111:35" pos:end="111:38">10</literal> <operator pos:start="111:38" pos:end="111:38">+</operator> <literal type="number" pos:start="111:40" pos:end="111:41">32</literal><operator pos:start="111:42" pos:end="111:42">)</operator> <operator pos:start="111:44" pos:end="111:44">/</operator> <literal type="number" pos:start="111:46" pos:end="111:47">33</literal></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:13">case <expr pos:start="115:10" pos:end="115:12"><literal type="char" pos:start="115:10" pos:end="115:12">'c'</literal></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:18"><expr pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:13">wsize</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:17">1</literal></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    </block_content>}</block></switch>



    <while pos:start="125:5" pos:end="243:5">while <condition pos:start="125:11" pos:end="125:19">(<expr pos:start="125:12" pos:end="125:18"><name pos:start="125:12" pos:end="125:14">len</name> <operator pos:start="125:16" pos:end="125:16">&gt;</operator> <literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>)</condition> <block pos:start="125:21" pos:end="243:5">{<block_content pos:start="127:9" pos:end="241:17">

        <if_stmt pos:start="127:9" pos:end="133:71"><if pos:start="127:9" pos:end="129:58">if <condition pos:start="127:12" pos:end="127:24">(<expr pos:start="127:13" pos:end="127:23"><name pos:start="127:13" pos:end="127:23">is_physical</name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:58"><block_content pos:start="129:13" pos:end="129:58">

            <expr_stmt pos:start="129:13" pos:end="129:58"><expr pos:start="129:13" pos:end="129:57"><call pos:start="129:13" pos:end="129:57"><name pos:start="129:13" pos:end="129:26">monitor_printf</name><argument_list pos:start="129:27" pos:end="129:57">(<argument pos:start="129:28" pos:end="129:30"><expr pos:start="129:28" pos:end="129:30"><name pos:start="129:28" pos:end="129:30">mon</name></expr></argument>, <argument pos:start="129:33" pos:end="129:50"><expr pos:start="129:33" pos:end="129:50"><name pos:start="129:33" pos:end="129:46">TARGET_FMT_plx</name> <literal type="string" pos:start="129:48" pos:end="129:50">":"</literal></expr></argument>, <argument pos:start="129:53" pos:end="129:56"><expr pos:start="129:53" pos:end="129:56"><name pos:start="129:53" pos:end="129:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="131:9" pos:end="133:71">else<block type="pseudo" pos:start="133:13" pos:end="133:71"><block_content pos:start="133:13" pos:end="133:71">

            <expr_stmt pos:start="133:13" pos:end="133:71"><expr pos:start="133:13" pos:end="133:70"><call pos:start="133:13" pos:end="133:70"><name pos:start="133:13" pos:end="133:26">monitor_printf</name><argument_list pos:start="133:27" pos:end="133:70">(<argument pos:start="133:28" pos:end="133:30"><expr pos:start="133:28" pos:end="133:30"><name pos:start="133:28" pos:end="133:30">mon</name></expr></argument>, <argument pos:start="133:33" pos:end="133:49"><expr pos:start="133:33" pos:end="133:49"><name pos:start="133:33" pos:end="133:45">TARGET_FMT_lx</name> <literal type="string" pos:start="133:47" pos:end="133:49">":"</literal></expr></argument>, <argument pos:start="133:52" pos:end="133:69"><expr pos:start="133:52" pos:end="133:69"><operator pos:start="133:52" pos:end="133:52">(</operator><name pos:start="133:53" pos:end="133:64">target_ulong</name><operator pos:start="133:65" pos:end="133:65">)</operator><name pos:start="133:66" pos:end="133:69">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:16"><expr pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:9">l</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <name pos:start="135:13" pos:end="135:15">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="139:26"><if pos:start="137:9" pos:end="139:26">if <condition pos:start="137:12" pos:end="137:26">(<expr pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:13">l</name> <operator pos:start="137:15" pos:end="137:15">&gt;</operator> <name pos:start="137:17" pos:end="137:25">line_size</name></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:26"><block_content pos:start="139:13" pos:end="139:26">

            <expr_stmt pos:start="139:13" pos:end="139:26"><expr pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:13">l</name> <operator pos:start="139:15" pos:end="139:15">=</operator> <name pos:start="139:17" pos:end="139:25">line_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="141:9" pos:end="161:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:24">(<expr pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:23">is_physical</name></expr>)</condition> <block pos:start="141:26" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:52">

            <expr_stmt pos:start="143:13" pos:end="143:52"><expr pos:start="143:13" pos:end="143:51"><call pos:start="143:13" pos:end="143:51"><name pos:start="143:13" pos:end="143:34">cpu_physical_memory_rw</name><argument_list pos:start="143:35" pos:end="143:51">(<argument pos:start="143:36" pos:end="143:39"><expr pos:start="143:36" pos:end="143:39"><name pos:start="143:36" pos:end="143:39">addr</name></expr></argument>, <argument pos:start="143:42" pos:end="143:44"><expr pos:start="143:42" pos:end="143:44"><name pos:start="143:42" pos:end="143:44">buf</name></expr></argument>, <argument pos:start="143:47" pos:end="143:47"><expr pos:start="143:47" pos:end="143:47"><name pos:start="143:47" pos:end="143:47">l</name></expr></argument>, <argument pos:start="143:50" pos:end="143:50"><expr pos:start="143:50" pos:end="143:50"><literal type="number" pos:start="143:50" pos:end="143:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="161:9">else <block pos:start="145:16" pos:end="161:9">{<block_content pos:start="147:13" pos:end="159:13">

            <expr_stmt pos:start="147:13" pos:end="147:32"><expr pos:start="147:13" pos:end="147:31"><name pos:start="147:13" pos:end="147:15">env</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:31"><name pos:start="147:19" pos:end="147:29">mon_get_cpu</name><argument_list pos:start="147:30" pos:end="147:31">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="151:22"><if pos:start="149:13" pos:end="151:22">if <condition pos:start="149:16" pos:end="149:21">(<expr pos:start="149:17" pos:end="149:20"><operator pos:start="149:17" pos:end="149:17">!</operator><name pos:start="149:18" pos:end="149:20">env</name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:22"><block_content pos:start="151:17" pos:end="151:22">

                <break pos:start="151:17" pos:end="151:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:62">(<expr pos:start="153:17" pos:end="153:61"><call pos:start="153:17" pos:end="153:57"><name pos:start="153:17" pos:end="153:35">cpu_memory_rw_debug</name><argument_list pos:start="153:36" pos:end="153:57">(<argument pos:start="153:37" pos:end="153:39"><expr pos:start="153:37" pos:end="153:39"><name pos:start="153:37" pos:end="153:39">env</name></expr></argument>, <argument pos:start="153:42" pos:end="153:45"><expr pos:start="153:42" pos:end="153:45"><name pos:start="153:42" pos:end="153:45">addr</name></expr></argument>, <argument pos:start="153:48" pos:end="153:50"><expr pos:start="153:48" pos:end="153:50"><name pos:start="153:48" pos:end="153:50">buf</name></expr></argument>, <argument pos:start="153:53" pos:end="153:53"><expr pos:start="153:53" pos:end="153:53"><name pos:start="153:53" pos:end="153:53">l</name></expr></argument>, <argument pos:start="153:56" pos:end="153:56"><expr pos:start="153:56" pos:end="153:56"><literal type="number" pos:start="153:56" pos:end="153:56">0</literal></expr></argument>)</argument_list></call> <operator pos:start="153:59" pos:end="153:59">&lt;</operator> <literal type="number" pos:start="153:61" pos:end="153:61">0</literal></expr>)</condition> <block pos:start="153:64" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:22">

                <expr_stmt pos:start="155:17" pos:end="155:63"><expr pos:start="155:17" pos:end="155:62"><call pos:start="155:17" pos:end="155:62"><name pos:start="155:17" pos:end="155:30">monitor_printf</name><argument_list pos:start="155:31" pos:end="155:62">(<argument pos:start="155:32" pos:end="155:34"><expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:34">mon</name></expr></argument>, <argument pos:start="155:37" pos:end="155:61"><expr pos:start="155:37" pos:end="155:61"><literal type="string" pos:start="155:37" pos:end="155:61">" Cannot access memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="157:17" pos:end="157:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:14"><expr pos:start="163:9" pos:end="163:13"><name pos:start="163:9" pos:end="163:9">i</name> <operator pos:start="163:11" pos:end="163:11">=</operator> <literal type="number" pos:start="163:13" pos:end="163:13">0</literal></expr>;</expr_stmt>

        <while pos:start="165:9" pos:end="235:9">while <condition pos:start="165:15" pos:end="165:21">(<expr pos:start="165:16" pos:end="165:20"><name pos:start="165:16" pos:end="165:16">i</name> <operator pos:start="165:18" pos:end="165:18">&lt;</operator> <name pos:start="165:20" pos:end="165:20">l</name></expr>)</condition> <block pos:start="165:23" pos:end="235:9">{<block_content pos:start="167:13" pos:end="233:23">

            <switch pos:start="167:13" pos:end="195:13">switch<condition pos:start="167:19" pos:end="167:25">(<expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:24">wsize</name></expr>)</condition> <block pos:start="167:27" pos:end="195:13">{<block_content pos:start="169:13" pos:end="193:22">

            <default pos:start="169:13" pos:end="169:20">default:</default>

            <case pos:start="171:13" pos:end="171:19">case <expr pos:start="171:18" pos:end="171:18"><literal type="number" pos:start="171:18" pos:end="171:18">1</literal></expr>:</case>

                <expr_stmt pos:start="173:17" pos:end="173:38"><expr pos:start="173:17" pos:end="173:37"><name pos:start="173:17" pos:end="173:17">v</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <call pos:start="173:21" pos:end="173:37"><name pos:start="173:21" pos:end="173:28">ldub_raw</name><argument_list pos:start="173:29" pos:end="173:37">(<argument pos:start="173:30" pos:end="173:36"><expr pos:start="173:30" pos:end="173:36"><name pos:start="173:30" pos:end="173:32">buf</name> <operator pos:start="173:34" pos:end="173:34">+</operator> <name pos:start="173:36" pos:end="173:36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="175:17" pos:end="175:22">break;</break>

            <case pos:start="177:13" pos:end="177:19">case <expr pos:start="177:18" pos:end="177:18"><literal type="number" pos:start="177:18" pos:end="177:18">2</literal></expr>:</case>

                <expr_stmt pos:start="179:17" pos:end="179:38"><expr pos:start="179:17" pos:end="179:37"><name pos:start="179:17" pos:end="179:17">v</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <call pos:start="179:21" pos:end="179:37"><name pos:start="179:21" pos:end="179:28">lduw_raw</name><argument_list pos:start="179:29" pos:end="179:37">(<argument pos:start="179:30" pos:end="179:36"><expr pos:start="179:30" pos:end="179:36"><name pos:start="179:30" pos:end="179:32">buf</name> <operator pos:start="179:34" pos:end="179:34">+</operator> <name pos:start="179:36" pos:end="179:36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="181:17" pos:end="181:22">break;</break>

            <case pos:start="183:13" pos:end="183:19">case <expr pos:start="183:18" pos:end="183:18"><literal type="number" pos:start="183:18" pos:end="183:18">4</literal></expr>:</case>

                <expr_stmt pos:start="185:17" pos:end="185:47"><expr pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:17">v</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <operator pos:start="185:21" pos:end="185:21">(</operator><name pos:start="185:22" pos:end="185:29">uint32_t</name><operator pos:start="185:30" pos:end="185:30">)</operator><call pos:start="185:31" pos:end="185:46"><name pos:start="185:31" pos:end="185:37">ldl_raw</name><argument_list pos:start="185:38" pos:end="185:46">(<argument pos:start="185:39" pos:end="185:45"><expr pos:start="185:39" pos:end="185:45"><name pos:start="185:39" pos:end="185:41">buf</name> <operator pos:start="185:43" pos:end="185:43">+</operator> <name pos:start="185:45" pos:end="185:45">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="187:17" pos:end="187:22">break;</break>

            <case pos:start="189:13" pos:end="189:19">case <expr pos:start="189:18" pos:end="189:18"><literal type="number" pos:start="189:18" pos:end="189:18">8</literal></expr>:</case>

                <expr_stmt pos:start="191:17" pos:end="191:37"><expr pos:start="191:17" pos:end="191:36"><name pos:start="191:17" pos:end="191:17">v</name> <operator pos:start="191:19" pos:end="191:19">=</operator> <call pos:start="191:21" pos:end="191:36"><name pos:start="191:21" pos:end="191:27">ldq_raw</name><argument_list pos:start="191:28" pos:end="191:36">(<argument pos:start="191:29" pos:end="191:35"><expr pos:start="191:29" pos:end="191:35"><name pos:start="191:29" pos:end="191:31">buf</name> <operator pos:start="191:33" pos:end="191:33">+</operator> <name pos:start="191:35" pos:end="191:35">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="193:17" pos:end="193:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="197:13" pos:end="197:37"><expr pos:start="197:13" pos:end="197:36"><call pos:start="197:13" pos:end="197:36"><name pos:start="197:13" pos:end="197:26">monitor_printf</name><argument_list pos:start="197:27" pos:end="197:36">(<argument pos:start="197:28" pos:end="197:30"><expr pos:start="197:28" pos:end="197:30"><name pos:start="197:28" pos:end="197:30">mon</name></expr></argument>, <argument pos:start="197:33" pos:end="197:35"><expr pos:start="197:33" pos:end="197:35"><literal type="string" pos:start="197:33" pos:end="197:35">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="199:13" pos:end="231:13">switch<condition pos:start="199:19" pos:end="199:26">(<expr pos:start="199:20" pos:end="199:25"><name pos:start="199:20" pos:end="199:25">format</name></expr>)</condition> <block pos:start="199:28" pos:end="231:13">{<block_content pos:start="201:13" pos:end="229:22">

            <case pos:start="201:13" pos:end="201:21">case <expr pos:start="201:18" pos:end="201:20"><literal type="char" pos:start="201:18" pos:end="201:20">'o'</literal></expr>:</case>

                <expr_stmt pos:start="203:17" pos:end="203:65"><expr pos:start="203:17" pos:end="203:64"><call pos:start="203:17" pos:end="203:64"><name pos:start="203:17" pos:end="203:30">monitor_printf</name><argument_list pos:start="203:31" pos:end="203:64">(<argument pos:start="203:32" pos:end="203:34"><expr pos:start="203:32" pos:end="203:34"><name pos:start="203:32" pos:end="203:34">mon</name></expr></argument>, <argument pos:start="203:37" pos:end="203:48"><expr pos:start="203:37" pos:end="203:48"><literal type="string" pos:start="203:37" pos:end="203:41">"%#*"</literal> <name pos:start="203:43" pos:end="203:48">PRIo64</name></expr></argument>, <argument pos:start="203:51" pos:end="203:60"><expr pos:start="203:51" pos:end="203:60"><name pos:start="203:51" pos:end="203:60">max_digits</name></expr></argument>, <argument pos:start="203:63" pos:end="203:63"><expr pos:start="203:63" pos:end="203:63"><name pos:start="203:63" pos:end="203:63">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="205:17" pos:end="205:22">break;</break>

            <case pos:start="207:13" pos:end="207:21">case <expr pos:start="207:18" pos:end="207:20"><literal type="char" pos:start="207:18" pos:end="207:20">'x'</literal></expr>:</case>

                <expr_stmt pos:start="209:17" pos:end="209:67"><expr pos:start="209:17" pos:end="209:66"><call pos:start="209:17" pos:end="209:66"><name pos:start="209:17" pos:end="209:30">monitor_printf</name><argument_list pos:start="209:31" pos:end="209:66">(<argument pos:start="209:32" pos:end="209:34"><expr pos:start="209:32" pos:end="209:34"><name pos:start="209:32" pos:end="209:34">mon</name></expr></argument>, <argument pos:start="209:37" pos:end="209:50"><expr pos:start="209:37" pos:end="209:50"><literal type="string" pos:start="209:37" pos:end="209:43">"0x%0*"</literal> <name pos:start="209:45" pos:end="209:50">PRIx64</name></expr></argument>, <argument pos:start="209:53" pos:end="209:62"><expr pos:start="209:53" pos:end="209:62"><name pos:start="209:53" pos:end="209:62">max_digits</name></expr></argument>, <argument pos:start="209:65" pos:end="209:65"><expr pos:start="209:65" pos:end="209:65"><name pos:start="209:65" pos:end="209:65">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="211:17" pos:end="211:22">break;</break>

            <case pos:start="213:13" pos:end="213:21">case <expr pos:start="213:18" pos:end="213:20"><literal type="char" pos:start="213:18" pos:end="213:20">'u'</literal></expr>:</case>

                <expr_stmt pos:start="215:17" pos:end="215:64"><expr pos:start="215:17" pos:end="215:63"><call pos:start="215:17" pos:end="215:63"><name pos:start="215:17" pos:end="215:30">monitor_printf</name><argument_list pos:start="215:31" pos:end="215:63">(<argument pos:start="215:32" pos:end="215:34"><expr pos:start="215:32" pos:end="215:34"><name pos:start="215:32" pos:end="215:34">mon</name></expr></argument>, <argument pos:start="215:37" pos:end="215:47"><expr pos:start="215:37" pos:end="215:47"><literal type="string" pos:start="215:37" pos:end="215:40">"%*"</literal> <name pos:start="215:42" pos:end="215:47">PRIu64</name></expr></argument>, <argument pos:start="215:50" pos:end="215:59"><expr pos:start="215:50" pos:end="215:59"><name pos:start="215:50" pos:end="215:59">max_digits</name></expr></argument>, <argument pos:start="215:62" pos:end="215:62"><expr pos:start="215:62" pos:end="215:62"><name pos:start="215:62" pos:end="215:62">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="217:17" pos:end="217:22">break;</break>

            <case pos:start="219:13" pos:end="219:21">case <expr pos:start="219:18" pos:end="219:20"><literal type="char" pos:start="219:18" pos:end="219:20">'d'</literal></expr>:</case>

                <expr_stmt pos:start="221:17" pos:end="221:64"><expr pos:start="221:17" pos:end="221:63"><call pos:start="221:17" pos:end="221:63"><name pos:start="221:17" pos:end="221:30">monitor_printf</name><argument_list pos:start="221:31" pos:end="221:63">(<argument pos:start="221:32" pos:end="221:34"><expr pos:start="221:32" pos:end="221:34"><name pos:start="221:32" pos:end="221:34">mon</name></expr></argument>, <argument pos:start="221:37" pos:end="221:47"><expr pos:start="221:37" pos:end="221:47"><literal type="string" pos:start="221:37" pos:end="221:40">"%*"</literal> <name pos:start="221:42" pos:end="221:47">PRId64</name></expr></argument>, <argument pos:start="221:50" pos:end="221:59"><expr pos:start="221:50" pos:end="221:59"><name pos:start="221:50" pos:end="221:59">max_digits</name></expr></argument>, <argument pos:start="221:62" pos:end="221:62"><expr pos:start="221:62" pos:end="221:62"><name pos:start="221:62" pos:end="221:62">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="223:17" pos:end="223:22">break;</break>

            <case pos:start="225:13" pos:end="225:21">case <expr pos:start="225:18" pos:end="225:20"><literal type="char" pos:start="225:18" pos:end="225:20">'c'</literal></expr>:</case>

                <expr_stmt pos:start="227:17" pos:end="227:39"><expr pos:start="227:17" pos:end="227:38"><call pos:start="227:17" pos:end="227:38"><name pos:start="227:17" pos:end="227:30">monitor_printc</name><argument_list pos:start="227:31" pos:end="227:38">(<argument pos:start="227:32" pos:end="227:34"><expr pos:start="227:32" pos:end="227:34"><name pos:start="227:32" pos:end="227:34">mon</name></expr></argument>, <argument pos:start="227:37" pos:end="227:37"><expr pos:start="227:37" pos:end="227:37"><name pos:start="227:37" pos:end="227:37">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="229:17" pos:end="229:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="233:13" pos:end="233:23"><expr pos:start="233:13" pos:end="233:22"><name pos:start="233:13" pos:end="233:13">i</name> <operator pos:start="233:15" pos:end="233:16">+=</operator> <name pos:start="233:18" pos:end="233:22">wsize</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="237:9" pos:end="237:34"><expr pos:start="237:9" pos:end="237:33"><call pos:start="237:9" pos:end="237:33"><name pos:start="237:9" pos:end="237:22">monitor_printf</name><argument_list pos:start="237:23" pos:end="237:33">(<argument pos:start="237:24" pos:end="237:26"><expr pos:start="237:24" pos:end="237:26"><name pos:start="237:24" pos:end="237:26">mon</name></expr></argument>, <argument pos:start="237:29" pos:end="237:32"><expr pos:start="237:29" pos:end="237:32"><literal type="string" pos:start="237:29" pos:end="237:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:18"><expr pos:start="239:9" pos:end="239:17"><name pos:start="239:9" pos:end="239:12">addr</name> <operator pos:start="239:14" pos:end="239:15">+=</operator> <name pos:start="239:17" pos:end="239:17">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:17"><expr pos:start="241:9" pos:end="241:16"><name pos:start="241:9" pos:end="241:11">len</name> <operator pos:start="241:13" pos:end="241:14">-=</operator> <name pos:start="241:16" pos:end="241:16">l</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
