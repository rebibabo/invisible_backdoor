<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15734.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">rm_read_audio_stream_info</name><parameter_list pos:start="1:37" pos:end="3:64">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><name pos:start="1:38" pos:end="1:52">AVFormatContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:74"><decl pos:start="1:58" pos:end="1:74"><type pos:start="1:58" pos:end="1:74"><name pos:start="1:58" pos:end="1:70">ByteIOContext</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">pb</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:45">AVStream</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">st</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:63"><decl pos:start="3:52" pos:end="3:63"><type pos:start="3:52" pos:end="3:63"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:63">read_all</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="291:13">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">RMDemuxContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">rm</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:17">[<expr pos:start="9:14" pos:end="9:16"><literal type="number" pos:start="9:14" pos:end="9:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:24">/* ra type header */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:11">version</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:22">get_be32</name><argument_list pos:start="19:23" pos:end="19:26">(<argument pos:start="19:24" pos:end="19:25"><expr pos:start="19:24" pos:end="19:25"><name pos:start="19:24" pos:end="19:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="19:29" pos:end="19:41">/* version */</comment>

    <if_stmt pos:start="21:5" pos:end="289:5"><if pos:start="21:5" pos:end="63:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><operator pos:start="21:9" pos:end="21:9">(</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:17">version</name> <operator pos:start="21:19" pos:end="21:20">&gt;&gt;</operator> <literal type="number" pos:start="21:22" pos:end="21:23">16</literal><operator pos:start="21:24" pos:end="21:24">)</operator> <operator pos:start="21:26" pos:end="21:26">&amp;</operator> <literal type="number" pos:start="21:28" pos:end="21:31">0xff</literal><operator pos:start="21:32" pos:end="21:32">)</operator> <operator pos:start="21:34" pos:end="21:35">==</operator> <literal type="number" pos:start="21:37" pos:end="21:37">3</literal></expr>)</condition> <block pos:start="21:40" pos:end="63:5">{<block_content pos:start="23:9" pos:end="61:46">

        <decl_stmt pos:start="23:9" pos:end="23:41"><decl pos:start="23:9" pos:end="23:40"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">int64_t</name></type> <name pos:start="23:17" pos:end="23:24">startpos</name> <init pos:start="23:26" pos:end="23:40">= <expr pos:start="23:28" pos:end="23:40"><call pos:start="23:28" pos:end="23:40"><name pos:start="23:28" pos:end="23:36">url_ftell</name><argument_list pos:start="23:37" pos:end="23:40">(<argument pos:start="23:38" pos:end="23:39"><expr pos:start="23:38" pos:end="23:39"><name pos:start="23:38" pos:end="23:39">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:30">/* very old version */</comment>

        <for pos:start="27:9" pos:end="29:25">for<control pos:start="27:12" pos:end="27:31">(<init pos:start="27:13" pos:end="27:18"><expr pos:start="27:13" pos:end="27:17"><name pos:start="27:13" pos:end="27:13">i</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>;</init> <condition pos:start="27:20" pos:end="27:26"><expr pos:start="27:20" pos:end="27:25"><name pos:start="27:20" pos:end="27:20">i</name> <operator pos:start="27:22" pos:end="27:22">&lt;</operator> <literal type="number" pos:start="27:24" pos:end="27:25">14</literal></expr>;</condition> <incr pos:start="27:28" pos:end="27:30"><expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:28">i</name><operator pos:start="27:29" pos:end="27:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="29:13" pos:end="29:25"><block_content pos:start="29:13" pos:end="29:25">

            <expr_stmt pos:start="29:13" pos:end="29:25"><expr pos:start="29:13" pos:end="29:24"><call pos:start="29:13" pos:end="29:24"><name pos:start="29:13" pos:end="29:20">get_byte</name><argument_list pos:start="29:21" pos:end="29:24">(<argument pos:start="29:22" pos:end="29:23"><expr pos:start="29:22" pos:end="29:23"><name pos:start="29:22" pos:end="29:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="31:9" pos:end="31:49"><expr pos:start="31:9" pos:end="31:48"><call pos:start="31:9" pos:end="31:48"><name pos:start="31:9" pos:end="31:16">get_str8</name><argument_list pos:start="31:17" pos:end="31:48">(<argument pos:start="31:18" pos:end="31:19"><expr pos:start="31:18" pos:end="31:19"><name pos:start="31:18" pos:end="31:19">pb</name></expr></argument>, <argument pos:start="31:22" pos:end="31:29"><expr pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:22">s</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:29">title</name></name></expr></argument>, <argument pos:start="31:32" pos:end="31:47"><expr pos:start="31:32" pos:end="31:47"><sizeof pos:start="31:32" pos:end="31:47">sizeof<argument_list pos:start="31:38" pos:end="31:47">(<argument pos:start="31:39" pos:end="31:46"><expr pos:start="31:39" pos:end="31:46"><name pos:start="31:39" pos:end="31:46"><name pos:start="31:39" pos:end="31:39">s</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:46">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:16">get_str8</name><argument_list pos:start="33:17" pos:end="33:50">(<argument pos:start="33:18" pos:end="33:19"><expr pos:start="33:18" pos:end="33:19"><name pos:start="33:18" pos:end="33:19">pb</name></expr></argument>, <argument pos:start="33:22" pos:end="33:30"><expr pos:start="33:22" pos:end="33:30"><name pos:start="33:22" pos:end="33:30"><name pos:start="33:22" pos:end="33:22">s</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:30">author</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:49"><expr pos:start="33:33" pos:end="33:49"><sizeof pos:start="33:33" pos:end="33:49">sizeof<argument_list pos:start="33:39" pos:end="33:49">(<argument pos:start="33:40" pos:end="33:48"><expr pos:start="33:40" pos:end="33:48"><name pos:start="33:40" pos:end="33:48"><name pos:start="33:40" pos:end="33:40">s</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:48">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><call pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:16">get_str8</name><argument_list pos:start="35:17" pos:end="35:56">(<argument pos:start="35:18" pos:end="35:19"><expr pos:start="35:18" pos:end="35:19"><name pos:start="35:18" pos:end="35:19">pb</name></expr></argument>, <argument pos:start="35:22" pos:end="35:33"><expr pos:start="35:22" pos:end="35:33"><name pos:start="35:22" pos:end="35:33"><name pos:start="35:22" pos:end="35:22">s</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:33">copyright</name></name></expr></argument>, <argument pos:start="35:36" pos:end="35:55"><expr pos:start="35:36" pos:end="35:55"><sizeof pos:start="35:36" pos:end="35:55">sizeof<argument_list pos:start="35:42" pos:end="35:55">(<argument pos:start="35:43" pos:end="35:54"><expr pos:start="35:43" pos:end="35:54"><name pos:start="35:43" pos:end="35:54"><name pos:start="35:43" pos:end="35:43">s</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:54">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:53"><expr pos:start="37:9" pos:end="37:52"><call pos:start="37:9" pos:end="37:52"><name pos:start="37:9" pos:end="37:16">get_str8</name><argument_list pos:start="37:17" pos:end="37:52">(<argument pos:start="37:18" pos:end="37:19"><expr pos:start="37:18" pos:end="37:19"><name pos:start="37:18" pos:end="37:19">pb</name></expr></argument>, <argument pos:start="37:22" pos:end="37:31"><expr pos:start="37:22" pos:end="37:31"><name pos:start="37:22" pos:end="37:31"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:31">comment</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:51"><expr pos:start="37:34" pos:end="37:51"><sizeof pos:start="37:34" pos:end="37:51">sizeof<argument_list pos:start="37:40" pos:end="37:51">(<argument pos:start="37:41" pos:end="37:50"><expr pos:start="37:41" pos:end="37:50"><name pos:start="37:41" pos:end="37:50"><name pos:start="37:41" pos:end="37:41">s</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:50">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:65">(<expr pos:start="39:13" pos:end="39:64"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:21">startpos</name> <operator pos:start="39:23" pos:end="39:23">+</operator> <operator pos:start="39:25" pos:end="39:25">(</operator><name pos:start="39:26" pos:end="39:32">version</name> <operator pos:start="39:34" pos:end="39:34">&amp;</operator> <literal type="number" pos:start="39:36" pos:end="39:41">0xffff</literal><operator pos:start="39:42" pos:end="39:42">)</operator><operator pos:start="39:43" pos:end="39:43">)</operator> <operator pos:start="39:45" pos:end="39:46">&gt;=</operator> <call pos:start="39:48" pos:end="39:60"><name pos:start="39:48" pos:end="39:56">url_ftell</name><argument_list pos:start="39:57" pos:end="39:60">(<argument pos:start="39:58" pos:end="39:59"><expr pos:start="39:58" pos:end="39:59"><name pos:start="39:58" pos:end="39:59">pb</name></expr></argument>)</argument_list></call> <operator pos:start="39:62" pos:end="39:62">+</operator> <literal type="number" pos:start="39:64" pos:end="39:64">2</literal></expr>)</condition> <block pos:start="39:67" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:43">

            <comment type="line" pos:start="41:13" pos:end="41:47">// fourcc (should always be "lpcJ")</comment>

            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><call pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:20">get_byte</name><argument_list pos:start="43:21" pos:end="43:24">(<argument pos:start="43:22" pos:end="43:23"><expr pos:start="43:22" pos:end="43:23"><name pos:start="43:22" pos:end="43:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:43"><expr pos:start="45:13" pos:end="45:42"><call pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:20">get_str8</name><argument_list pos:start="45:21" pos:end="45:42">(<argument pos:start="45:22" pos:end="45:23"><expr pos:start="45:22" pos:end="45:23"><name pos:start="45:22" pos:end="45:23">pb</name></expr></argument>, <argument pos:start="45:26" pos:end="45:28"><expr pos:start="45:26" pos:end="45:28"><name pos:start="45:26" pos:end="45:28">buf</name></expr></argument>, <argument pos:start="45:31" pos:end="45:41"><expr pos:start="45:31" pos:end="45:41"><sizeof pos:start="45:31" pos:end="45:41">sizeof<argument_list pos:start="45:37" pos:end="45:41">(<argument pos:start="45:38" pos:end="45:40"><expr pos:start="45:38" pos:end="45:40"><name pos:start="45:38" pos:end="45:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="49:9" pos:end="49:60">// Skip extra header crap (this should never happen)</comment>

        <if_stmt pos:start="51:9" pos:end="53:73"><if pos:start="51:9" pos:end="53:73">if <condition pos:start="51:12" pos:end="51:60">(<expr pos:start="51:13" pos:end="51:59"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:21">startpos</name> <operator pos:start="51:23" pos:end="51:23">+</operator> <operator pos:start="51:25" pos:end="51:25">(</operator><name pos:start="51:26" pos:end="51:32">version</name> <operator pos:start="51:34" pos:end="51:34">&amp;</operator> <literal type="number" pos:start="51:36" pos:end="51:41">0xffff</literal><operator pos:start="51:42" pos:end="51:42">)</operator><operator pos:start="51:43" pos:end="51:43">)</operator> <operator pos:start="51:45" pos:end="51:45">&gt;</operator> <call pos:start="51:47" pos:end="51:59"><name pos:start="51:47" pos:end="51:55">url_ftell</name><argument_list pos:start="51:56" pos:end="51:59">(<argument pos:start="51:57" pos:end="51:58"><expr pos:start="51:57" pos:end="51:58"><name pos:start="51:57" pos:end="51:58">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:73"><block_content pos:start="53:13" pos:end="53:73">

            <expr_stmt pos:start="53:13" pos:end="53:73"><expr pos:start="53:13" pos:end="53:72"><call pos:start="53:13" pos:end="53:72"><name pos:start="53:13" pos:end="53:21">url_fskip</name><argument_list pos:start="53:22" pos:end="53:72">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">pb</name></expr></argument>, <argument pos:start="53:27" pos:end="53:71"><expr pos:start="53:27" pos:end="53:71"><operator pos:start="53:27" pos:end="53:27">(</operator><name pos:start="53:28" pos:end="53:34">version</name> <operator pos:start="53:36" pos:end="53:36">&amp;</operator> <literal type="number" pos:start="53:38" pos:end="53:43">0xffff</literal><operator pos:start="53:44" pos:end="53:44">)</operator> <operator pos:start="53:46" pos:end="53:46">+</operator> <name pos:start="53:48" pos:end="53:55">startpos</name> <operator pos:start="53:57" pos:end="53:57">-</operator> <call pos:start="53:59" pos:end="53:71"><name pos:start="53:59" pos:end="53:67">url_ftell</name><argument_list pos:start="53:68" pos:end="53:71">(<argument pos:start="53:69" pos:end="53:70"><expr pos:start="53:69" pos:end="53:70"><name pos:start="53:69" pos:end="53:70">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:10">st</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:17">codec</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:30">sample_rate</name></name> <operator pos:start="55:32" pos:end="55:32">=</operator> <literal type="number" pos:start="55:34" pos:end="55:37">8000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:10">st</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:17">codec</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:27">channels</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <literal type="number" pos:start="57:31" pos:end="57:31">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:10">st</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:17">codec</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:29">codec_type</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <name pos:start="59:33" pos:end="59:48">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:46"><expr pos:start="61:9" pos:end="61:45"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:10">st</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:17">codec</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:27">codec_id</name></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <name pos:start="61:31" pos:end="61:45">CODEC_ID_RA_144</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="289:5">else <block pos:start="63:12" pos:end="289:5">{<block_content pos:start="65:9" pos:end="287:9">

        <decl_stmt pos:start="65:9" pos:end="65:67"><decl pos:start="65:9" pos:end="65:18"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:18">flavor</name></decl>, <decl pos:start="65:21" pos:end="65:32"><type ref="prev" pos:start="65:9" pos:end="65:11"/><name pos:start="65:21" pos:end="65:32">sub_packet_h</name></decl>, <decl pos:start="65:35" pos:end="65:49"><type ref="prev" pos:start="65:9" pos:end="65:11"/><name pos:start="65:35" pos:end="65:49">coded_framesize</name></decl>, <decl pos:start="65:52" pos:end="65:66"><type ref="prev" pos:start="65:9" pos:end="65:11"/><name pos:start="65:52" pos:end="65:66">sub_packet_size</name></decl>;</decl_stmt>

        <comment type="block" pos:start="67:9" pos:end="67:29">/* old version (4) */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:21"><expr pos:start="69:9" pos:end="69:20"><call pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:16">get_be32</name><argument_list pos:start="69:17" pos:end="69:20">(<argument pos:start="69:18" pos:end="69:19"><expr pos:start="69:18" pos:end="69:19"><name pos:start="69:18" pos:end="69:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:23" pos:end="69:32">/* .ra4 */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:21"><expr pos:start="71:9" pos:end="71:20"><call pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:16">get_be32</name><argument_list pos:start="71:17" pos:end="71:20">(<argument pos:start="71:18" pos:end="71:19"><expr pos:start="71:18" pos:end="71:19"><name pos:start="71:18" pos:end="71:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:23" pos:end="71:37">/* data size */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:21"><expr pos:start="73:9" pos:end="73:20"><call pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:16">get_be16</name><argument_list pos:start="73:17" pos:end="73:20">(<argument pos:start="73:18" pos:end="73:19"><expr pos:start="73:18" pos:end="73:19"><name pos:start="73:18" pos:end="73:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:23" pos:end="73:36">/* version2 */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><call pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:16">get_be32</name><argument_list pos:start="75:17" pos:end="75:20">(<argument pos:start="75:18" pos:end="75:19"><expr pos:start="75:18" pos:end="75:19"><name pos:start="75:18" pos:end="75:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="75:23" pos:end="75:39">/* header size */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:29"><expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:14">flavor</name><operator pos:start="77:15" pos:end="77:15">=</operator> <call pos:start="77:17" pos:end="77:28"><name pos:start="77:17" pos:end="77:24">get_be16</name><argument_list pos:start="77:25" pos:end="77:28">(<argument pos:start="77:26" pos:end="77:27"><expr pos:start="77:26" pos:end="77:27"><name pos:start="77:26" pos:end="77:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="77:31" pos:end="77:59">/* add codec info / flavor */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:61"><expr pos:start="79:9" pos:end="79:60"><name pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:10">rm</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:27">coded_framesize</name></name> <operator pos:start="79:29" pos:end="79:29">=</operator> <name pos:start="79:31" pos:end="79:45">coded_framesize</name> <operator pos:start="79:47" pos:end="79:47">=</operator> <call pos:start="79:49" pos:end="79:60"><name pos:start="79:49" pos:end="79:56">get_be32</name><argument_list pos:start="79:57" pos:end="79:60">(<argument pos:start="79:58" pos:end="79:59"><expr pos:start="79:58" pos:end="79:59"><name pos:start="79:58" pos:end="79:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:63" pos:end="79:84">/* coded frame size */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:21"><expr pos:start="81:9" pos:end="81:20"><call pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:16">get_be32</name><argument_list pos:start="81:17" pos:end="81:20">(<argument pos:start="81:18" pos:end="81:19"><expr pos:start="81:18" pos:end="81:19"><name pos:start="81:18" pos:end="81:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="81:23" pos:end="81:31">/* ??? */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><call pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:16">get_be32</name><argument_list pos:start="83:17" pos:end="83:20">(<argument pos:start="83:18" pos:end="83:19"><expr pos:start="83:18" pos:end="83:19"><name pos:start="83:18" pos:end="83:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="83:23" pos:end="83:31">/* ??? */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:21"><expr pos:start="85:9" pos:end="85:20"><call pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:16">get_be32</name><argument_list pos:start="85:17" pos:end="85:20">(<argument pos:start="85:18" pos:end="85:19"><expr pos:start="85:18" pos:end="85:19"><name pos:start="85:18" pos:end="85:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="85:23" pos:end="85:31">/* ??? */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:55"><expr pos:start="87:9" pos:end="87:54"><name pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:10">rm</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:24">sub_packet_h</name></name> <operator pos:start="87:26" pos:end="87:26">=</operator> <name pos:start="87:28" pos:end="87:39">sub_packet_h</name> <operator pos:start="87:41" pos:end="87:41">=</operator> <call pos:start="87:43" pos:end="87:54"><name pos:start="87:43" pos:end="87:50">get_be16</name><argument_list pos:start="87:51" pos:end="87:54">(<argument pos:start="87:52" pos:end="87:53"><expr pos:start="87:52" pos:end="87:53"><name pos:start="87:52" pos:end="87:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="87:57" pos:end="87:63">/* 1 */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:45"><expr pos:start="89:9" pos:end="89:44"><name pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:10">st</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:17">codec</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:30">block_align</name></name><operator pos:start="89:31" pos:end="89:31">=</operator> <call pos:start="89:33" pos:end="89:44"><name pos:start="89:33" pos:end="89:40">get_be16</name><argument_list pos:start="89:41" pos:end="89:44">(<argument pos:start="89:42" pos:end="89:43"><expr pos:start="89:42" pos:end="89:43"><name pos:start="89:42" pos:end="89:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:47" pos:end="89:62">/* frame size */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:61"><expr pos:start="91:9" pos:end="91:60"><name pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:10">rm</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:27">sub_packet_size</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:45">sub_packet_size</name> <operator pos:start="91:47" pos:end="91:47">=</operator> <call pos:start="91:49" pos:end="91:60"><name pos:start="91:49" pos:end="91:56">get_be16</name><argument_list pos:start="91:57" pos:end="91:60">(<argument pos:start="91:58" pos:end="91:59"><expr pos:start="91:58" pos:end="91:59"><name pos:start="91:58" pos:end="91:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:63" pos:end="91:83">/* sub packet size */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:21"><expr pos:start="93:9" pos:end="93:20"><call pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:16">get_be16</name><argument_list pos:start="93:17" pos:end="93:20">(<argument pos:start="93:18" pos:end="93:19"><expr pos:start="93:18" pos:end="93:19"><name pos:start="93:18" pos:end="93:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="93:23" pos:end="93:31">/* ??? */</comment>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:42">(<expr pos:start="95:13" pos:end="95:41"><operator pos:start="95:13" pos:end="95:13">(</operator><operator pos:start="95:14" pos:end="95:14">(</operator><name pos:start="95:15" pos:end="95:21">version</name> <operator pos:start="95:23" pos:end="95:24">&gt;&gt;</operator> <literal type="number" pos:start="95:26" pos:end="95:27">16</literal><operator pos:start="95:28" pos:end="95:28">)</operator> <operator pos:start="95:30" pos:end="95:30">&amp;</operator> <literal type="number" pos:start="95:32" pos:end="95:35">0xff</literal><operator pos:start="95:36" pos:end="95:36">)</operator> <operator pos:start="95:38" pos:end="95:39">==</operator> <literal type="number" pos:start="95:41" pos:end="95:41">5</literal></expr>)</condition> <block pos:start="95:44" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:53">

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><call pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:20">get_be16</name><argument_list pos:start="97:21" pos:end="97:24">(<argument pos:start="97:22" pos:end="97:23"><expr pos:start="97:22" pos:end="97:23"><name pos:start="97:22" pos:end="97:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="97:27" pos:end="97:39"><expr pos:start="97:27" pos:end="97:38"><call pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:34">get_be16</name><argument_list pos:start="97:35" pos:end="97:38">(<argument pos:start="97:36" pos:end="97:37"><expr pos:start="97:36" pos:end="97:37"><name pos:start="97:36" pos:end="97:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="97:41" pos:end="97:53"><expr pos:start="97:41" pos:end="97:52"><call pos:start="97:41" pos:end="97:52"><name pos:start="97:41" pos:end="97:48">get_be16</name><argument_list pos:start="97:49" pos:end="97:52">(<argument pos:start="97:50" pos:end="97:51"><expr pos:start="97:50" pos:end="97:51"><name pos:start="97:50" pos:end="97:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:10">st</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:17">codec</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:30">sample_rate</name></name> <operator pos:start="101:32" pos:end="101:32">=</operator> <call pos:start="101:34" pos:end="101:45"><name pos:start="101:34" pos:end="101:41">get_be16</name><argument_list pos:start="101:42" pos:end="101:45">(<argument pos:start="101:43" pos:end="101:44"><expr pos:start="101:43" pos:end="101:44"><name pos:start="101:43" pos:end="101:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:21"><expr pos:start="103:9" pos:end="103:20"><call pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:16">get_be32</name><argument_list pos:start="103:17" pos:end="103:20">(<argument pos:start="103:18" pos:end="103:19"><expr pos:start="103:18" pos:end="103:19"><name pos:start="103:18" pos:end="103:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:43"><expr pos:start="105:9" pos:end="105:42"><name pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:10">st</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:17">codec</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:27">channels</name></name> <operator pos:start="105:29" pos:end="105:29">=</operator> <call pos:start="105:31" pos:end="105:42"><name pos:start="105:31" pos:end="105:38">get_be16</name><argument_list pos:start="105:39" pos:end="105:42">(<argument pos:start="105:40" pos:end="105:41"><expr pos:start="105:40" pos:end="105:41"><name pos:start="105:40" pos:end="105:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="127:9"><if pos:start="107:9" pos:end="121:9">if <condition pos:start="107:12" pos:end="107:42">(<expr pos:start="107:13" pos:end="107:41"><operator pos:start="107:13" pos:end="107:13">(</operator><operator pos:start="107:14" pos:end="107:14">(</operator><name pos:start="107:15" pos:end="107:21">version</name> <operator pos:start="107:23" pos:end="107:24">&gt;&gt;</operator> <literal type="number" pos:start="107:26" pos:end="107:27">16</literal><operator pos:start="107:28" pos:end="107:28">)</operator> <operator pos:start="107:30" pos:end="107:30">&amp;</operator> <literal type="number" pos:start="107:32" pos:end="107:35">0xff</literal><operator pos:start="107:36" pos:end="107:36">)</operator> <operator pos:start="107:38" pos:end="107:39">==</operator> <literal type="number" pos:start="107:41" pos:end="107:41">5</literal></expr>)</condition> <block pos:start="107:44" pos:end="121:9">{<block_content pos:start="109:13" pos:end="119:23">

            <expr_stmt pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:24"><call pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:20">get_be32</name><argument_list pos:start="109:21" pos:end="109:24">(<argument pos:start="109:22" pos:end="109:23"><expr pos:start="109:22" pos:end="109:23"><name pos:start="109:22" pos:end="109:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:34"><expr pos:start="111:13" pos:end="111:33"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:15">buf</name><index pos:start="111:16" pos:end="111:18">[<expr pos:start="111:17" pos:end="111:17"><literal type="number" pos:start="111:17" pos:end="111:17">0</literal></expr>]</index></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <call pos:start="111:22" pos:end="111:33"><name pos:start="111:22" pos:end="111:29">get_byte</name><argument_list pos:start="111:30" pos:end="111:33">(<argument pos:start="111:31" pos:end="111:32"><expr pos:start="111:31" pos:end="111:32"><name pos:start="111:31" pos:end="111:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:18"><name pos:start="113:13" pos:end="113:15">buf</name><index pos:start="113:16" pos:end="113:18">[<expr pos:start="113:17" pos:end="113:17"><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>]</index></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <call pos:start="113:22" pos:end="113:33"><name pos:start="113:22" pos:end="113:29">get_byte</name><argument_list pos:start="113:30" pos:end="113:33">(<argument pos:start="113:31" pos:end="113:32"><expr pos:start="113:31" pos:end="113:32"><name pos:start="113:31" pos:end="113:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:34"><expr pos:start="115:13" pos:end="115:33"><name pos:start="115:13" pos:end="115:18"><name pos:start="115:13" pos:end="115:15">buf</name><index pos:start="115:16" pos:end="115:18">[<expr pos:start="115:17" pos:end="115:17"><literal type="number" pos:start="115:17" pos:end="115:17">2</literal></expr>]</index></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <call pos:start="115:22" pos:end="115:33"><name pos:start="115:22" pos:end="115:29">get_byte</name><argument_list pos:start="115:30" pos:end="115:33">(<argument pos:start="115:31" pos:end="115:32"><expr pos:start="115:31" pos:end="115:32"><name pos:start="115:31" pos:end="115:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:34"><expr pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:18"><name pos:start="117:13" pos:end="117:15">buf</name><index pos:start="117:16" pos:end="117:18">[<expr pos:start="117:17" pos:end="117:17"><literal type="number" pos:start="117:17" pos:end="117:17">3</literal></expr>]</index></name> <operator pos:start="117:20" pos:end="117:20">=</operator> <call pos:start="117:22" pos:end="117:33"><name pos:start="117:22" pos:end="117:29">get_byte</name><argument_list pos:start="117:30" pos:end="117:33">(<argument pos:start="117:31" pos:end="117:32"><expr pos:start="117:31" pos:end="117:32"><name pos:start="117:31" pos:end="117:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:23"><expr pos:start="119:13" pos:end="119:22"><name pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:15">buf</name><index pos:start="119:16" pos:end="119:18">[<expr pos:start="119:17" pos:end="119:17"><literal type="number" pos:start="119:17" pos:end="119:17">4</literal></expr>]</index></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="127:9">else <block pos:start="121:16" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:43">

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><call pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:20">get_str8</name><argument_list pos:start="123:21" pos:end="123:42">(<argument pos:start="123:22" pos:end="123:23"><expr pos:start="123:22" pos:end="123:23"><name pos:start="123:22" pos:end="123:23">pb</name></expr></argument>, <argument pos:start="123:26" pos:end="123:28"><expr pos:start="123:26" pos:end="123:28"><name pos:start="123:26" pos:end="123:28">buf</name></expr></argument>, <argument pos:start="123:31" pos:end="123:41"><expr pos:start="123:31" pos:end="123:41"><sizeof pos:start="123:31" pos:end="123:41">sizeof<argument_list pos:start="123:37" pos:end="123:41">(<argument pos:start="123:38" pos:end="123:40"><expr pos:start="123:38" pos:end="123:40"><name pos:start="123:38" pos:end="123:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="123:45" pos:end="123:54">/* desc */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:43"><expr pos:start="125:13" pos:end="125:42"><call pos:start="125:13" pos:end="125:42"><name pos:start="125:13" pos:end="125:20">get_str8</name><argument_list pos:start="125:21" pos:end="125:42">(<argument pos:start="125:22" pos:end="125:23"><expr pos:start="125:22" pos:end="125:23"><name pos:start="125:22" pos:end="125:23">pb</name></expr></argument>, <argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><name pos:start="125:26" pos:end="125:28">buf</name></expr></argument>, <argument pos:start="125:31" pos:end="125:41"><expr pos:start="125:31" pos:end="125:41"><sizeof pos:start="125:31" pos:end="125:41">sizeof<argument_list pos:start="125:37" pos:end="125:41">(<argument pos:start="125:38" pos:end="125:40"><expr pos:start="125:38" pos:end="125:40"><name pos:start="125:38" pos:end="125:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="125:45" pos:end="125:54">/* desc */</comment>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:49"><expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:10">st</name><operator pos:start="129:11" pos:end="129:12">-&gt;</operator><name pos:start="129:13" pos:end="129:17">codec</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:29">codec_type</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <name pos:start="129:33" pos:end="129:48">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="267:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:33">(<expr pos:start="131:13" pos:end="131:32"><operator pos:start="131:13" pos:end="131:13">!</operator><call pos:start="131:14" pos:end="131:32"><name pos:start="131:14" pos:end="131:19">strcmp</name><argument_list pos:start="131:20" pos:end="131:32">(<argument pos:start="131:21" pos:end="131:23"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">buf</name></expr></argument>, <argument pos:start="131:26" pos:end="131:31"><expr pos:start="131:26" pos:end="131:31"><literal type="string" pos:start="131:26" pos:end="131:31">"dnet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:35" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:51">

            <expr_stmt pos:start="133:13" pos:end="133:47"><expr pos:start="133:13" pos:end="133:46"><name pos:start="133:13" pos:end="133:31"><name pos:start="133:13" pos:end="133:14">st</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:21">codec</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:31">codec_id</name></name> <operator pos:start="133:33" pos:end="133:33">=</operator> <name pos:start="133:35" pos:end="133:46">CODEC_ID_AC3</name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:51"><expr pos:start="135:13" pos:end="135:50"><name pos:start="135:13" pos:end="135:28"><name pos:start="135:13" pos:end="135:14">st</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:28">need_parsing</name></name> <operator pos:start="135:30" pos:end="135:30">=</operator> <name pos:start="135:32" pos:end="135:50">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="137:11" pos:end="161:9">else if <condition pos:start="137:19" pos:end="137:40">(<expr pos:start="137:20" pos:end="137:39"><operator pos:start="137:20" pos:end="137:20">!</operator><call pos:start="137:21" pos:end="137:39"><name pos:start="137:21" pos:end="137:26">strcmp</name><argument_list pos:start="137:27" pos:end="137:39">(<argument pos:start="137:28" pos:end="137:30"><expr pos:start="137:28" pos:end="137:30"><name pos:start="137:28" pos:end="137:30">buf</name></expr></argument>, <argument pos:start="137:33" pos:end="137:38"><expr pos:start="137:33" pos:end="137:38"><literal type="string" pos:start="137:33" pos:end="137:38">"28_8"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:42" pos:end="161:9">{<block_content pos:start="139:13" pos:end="159:73">

            <expr_stmt pos:start="139:13" pos:end="139:50"><expr pos:start="139:13" pos:end="139:49"><name pos:start="139:13" pos:end="139:31"><name pos:start="139:13" pos:end="139:14">st</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:21">codec</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:31">codec_id</name></name> <operator pos:start="139:33" pos:end="139:33">=</operator> <name pos:start="139:35" pos:end="139:49">CODEC_ID_RA_288</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:41"><expr pos:start="141:13" pos:end="141:40"><name pos:start="141:13" pos:end="141:37"><name pos:start="141:13" pos:end="141:14">st</name><operator pos:start="141:15" pos:end="141:16">-&gt;</operator><name pos:start="141:17" pos:end="141:21">codec</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:37">extradata_size</name></name><operator pos:start="141:38" pos:end="141:38">=</operator> <literal type="number" pos:start="141:40" pos:end="141:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:57"><expr pos:start="143:13" pos:end="143:56"><name pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:14">rm</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:31">audio_framesize</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:56"><name pos:start="143:35" pos:end="143:36">st</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:43">codec</name><operator pos:start="143:44" pos:end="143:45">-&gt;</operator><name pos:start="143:46" pos:end="143:56">block_align</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:53"><expr pos:start="145:13" pos:end="145:52"><name pos:start="145:13" pos:end="145:34"><name pos:start="145:13" pos:end="145:14">st</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:21">codec</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:34">block_align</name></name> <operator pos:start="145:36" pos:end="145:36">=</operator> <name pos:start="145:38" pos:end="145:52">coded_framesize</name></expr>;</expr_stmt>



            <if_stmt pos:start="149:13" pos:end="155:13"><if pos:start="149:13" pos:end="155:13">if<condition pos:start="149:15" pos:end="149:62">(<expr pos:start="149:16" pos:end="149:61"><name pos:start="149:16" pos:end="149:34"><name pos:start="149:16" pos:end="149:17">rm</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:34">audio_framesize</name></name> <operator pos:start="149:36" pos:end="149:37">&gt;=</operator> <name pos:start="149:39" pos:end="149:46">UINT_MAX</name> <operator pos:start="149:48" pos:end="149:48">/</operator> <name pos:start="149:50" pos:end="149:61">sub_packet_h</name></expr>)</condition><block pos:start="149:63" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:26">

                <expr_stmt pos:start="151:17" pos:end="151:90"><expr pos:start="151:17" pos:end="151:89"><call pos:start="151:17" pos:end="151:89"><name pos:start="151:17" pos:end="151:22">av_log</name><argument_list pos:start="151:23" pos:end="151:89">(<argument pos:start="151:24" pos:end="151:24"><expr pos:start="151:24" pos:end="151:24"><name pos:start="151:24" pos:end="151:24">s</name></expr></argument>, <argument pos:start="151:27" pos:end="151:38"><expr pos:start="151:27" pos:end="151:38"><name pos:start="151:27" pos:end="151:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:41" pos:end="151:88"><expr pos:start="151:41" pos:end="151:88"><literal type="string" pos:start="151:41" pos:end="151:88">"rm-&gt;audio_framesize * sub_packet_h too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="153:17" pos:end="153:26">return <expr pos:start="153:24" pos:end="153:25"><operator pos:start="153:24" pos:end="153:24">-</operator><literal type="number" pos:start="153:25" pos:end="153:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="159:13" pos:end="159:73"><expr pos:start="159:13" pos:end="159:72"><name pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:14">rm</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:24">audiobuf</name></name> <operator pos:start="159:26" pos:end="159:26">=</operator> <call pos:start="159:28" pos:end="159:72"><name pos:start="159:28" pos:end="159:36">av_malloc</name><argument_list pos:start="159:37" pos:end="159:72">(<argument pos:start="159:38" pos:end="159:71"><expr pos:start="159:38" pos:end="159:71"><name pos:start="159:38" pos:end="159:56"><name pos:start="159:38" pos:end="159:39">rm</name><operator pos:start="159:40" pos:end="159:41">-&gt;</operator><name pos:start="159:42" pos:end="159:56">audio_framesize</name></name> <operator pos:start="159:58" pos:end="159:58">*</operator> <name pos:start="159:60" pos:end="159:71">sub_packet_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="161:11" pos:end="225:9">else if <condition pos:start="161:19" pos:end="161:94">(<expr pos:start="161:20" pos:end="161:93"><operator pos:start="161:20" pos:end="161:20">(</operator><operator pos:start="161:21" pos:end="161:21">!</operator><call pos:start="161:22" pos:end="161:40"><name pos:start="161:22" pos:end="161:27">strcmp</name><argument_list pos:start="161:28" pos:end="161:40">(<argument pos:start="161:29" pos:end="161:31"><expr pos:start="161:29" pos:end="161:31"><name pos:start="161:29" pos:end="161:31">buf</name></expr></argument>, <argument pos:start="161:34" pos:end="161:39"><expr pos:start="161:34" pos:end="161:39"><literal type="string" pos:start="161:34" pos:end="161:39">"cook"</literal></expr></argument>)</argument_list></call><operator pos:start="161:41" pos:end="161:41">)</operator> <operator pos:start="161:43" pos:end="161:44">||</operator> <operator pos:start="161:46" pos:end="161:46">(</operator><operator pos:start="161:47" pos:end="161:47">!</operator><call pos:start="161:48" pos:end="161:66"><name pos:start="161:48" pos:end="161:53">strcmp</name><argument_list pos:start="161:54" pos:end="161:66">(<argument pos:start="161:55" pos:end="161:57"><expr pos:start="161:55" pos:end="161:57"><name pos:start="161:55" pos:end="161:57">buf</name></expr></argument>, <argument pos:start="161:60" pos:end="161:65"><expr pos:start="161:60" pos:end="161:65"><literal type="string" pos:start="161:60" pos:end="161:65">"atrc"</literal></expr></argument>)</argument_list></call><operator pos:start="161:67" pos:end="161:67">)</operator> <operator pos:start="161:69" pos:end="161:70">||</operator> <operator pos:start="161:72" pos:end="161:72">(</operator><operator pos:start="161:73" pos:end="161:73">!</operator><call pos:start="161:74" pos:end="161:92"><name pos:start="161:74" pos:end="161:79">strcmp</name><argument_list pos:start="161:80" pos:end="161:92">(<argument pos:start="161:81" pos:end="161:83"><expr pos:start="161:81" pos:end="161:83"><name pos:start="161:81" pos:end="161:83">buf</name></expr></argument>, <argument pos:start="161:86" pos:end="161:91"><expr pos:start="161:86" pos:end="161:91"><literal type="string" pos:start="161:86" pos:end="161:91">"sipr"</literal></expr></argument>)</argument_list></call><operator pos:start="161:93" pos:end="161:93">)</operator></expr>)</condition> <block pos:start="161:96" pos:end="225:9">{<block_content pos:start="163:13" pos:end="223:73">

            <decl_stmt pos:start="163:13" pos:end="163:36"><decl pos:start="163:13" pos:end="163:32"><type pos:start="163:13" pos:end="163:15"><name pos:start="163:13" pos:end="163:15">int</name></type> <name pos:start="163:17" pos:end="163:32">codecdata_length</name></decl>, <decl pos:start="163:35" pos:end="163:35"><type ref="prev" pos:start="163:13" pos:end="163:15"/><name pos:start="163:35" pos:end="163:35">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:25"><expr pos:start="165:13" pos:end="165:24"><call pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:20">get_be16</name><argument_list pos:start="165:21" pos:end="165:24">(<argument pos:start="165:22" pos:end="165:23"><expr pos:start="165:22" pos:end="165:23"><name pos:start="165:22" pos:end="165:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="165:27" pos:end="165:39"><expr pos:start="165:27" pos:end="165:38"><call pos:start="165:27" pos:end="165:38"><name pos:start="165:27" pos:end="165:34">get_byte</name><argument_list pos:start="165:35" pos:end="165:38">(<argument pos:start="165:36" pos:end="165:37"><expr pos:start="165:36" pos:end="165:37"><name pos:start="165:36" pos:end="165:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="169:29"><if pos:start="167:13" pos:end="169:29">if <condition pos:start="167:16" pos:end="167:46">(<expr pos:start="167:17" pos:end="167:45"><operator pos:start="167:17" pos:end="167:17">(</operator><operator pos:start="167:18" pos:end="167:18">(</operator><name pos:start="167:19" pos:end="167:25">version</name> <operator pos:start="167:27" pos:end="167:28">&gt;&gt;</operator> <literal type="number" pos:start="167:30" pos:end="167:31">16</literal><operator pos:start="167:32" pos:end="167:32">)</operator> <operator pos:start="167:34" pos:end="167:34">&amp;</operator> <literal type="number" pos:start="167:36" pos:end="167:39">0xff</literal><operator pos:start="167:40" pos:end="167:40">)</operator> <operator pos:start="167:42" pos:end="167:43">==</operator> <literal type="number" pos:start="167:45" pos:end="167:45">5</literal></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:29"><block_content pos:start="169:17" pos:end="169:29">

                <expr_stmt pos:start="169:17" pos:end="169:29"><expr pos:start="169:17" pos:end="169:28"><call pos:start="169:17" pos:end="169:28"><name pos:start="169:17" pos:end="169:24">get_byte</name><argument_list pos:start="169:25" pos:end="169:28">(<argument pos:start="169:26" pos:end="169:27"><expr pos:start="169:26" pos:end="169:27"><name pos:start="169:26" pos:end="169:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:44"><expr pos:start="171:13" pos:end="171:43"><name pos:start="171:13" pos:end="171:28">codecdata_length</name> <operator pos:start="171:30" pos:end="171:30">=</operator> <call pos:start="171:32" pos:end="171:43"><name pos:start="171:32" pos:end="171:39">get_be32</name><argument_list pos:start="171:40" pos:end="171:43">(<argument pos:start="171:41" pos:end="171:42"><expr pos:start="171:41" pos:end="171:42"><name pos:start="171:41" pos:end="171:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="179:13"><if pos:start="173:13" pos:end="179:13">if<condition pos:start="173:15" pos:end="173:93">(<expr pos:start="173:16" pos:end="173:92"><name pos:start="173:16" pos:end="173:31">codecdata_length</name> <operator pos:start="173:33" pos:end="173:33">+</operator> <name pos:start="173:35" pos:end="173:62">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="173:64" pos:end="173:65">&lt;=</operator> <operator pos:start="173:67" pos:end="173:67">(</operator><name pos:start="173:68" pos:end="173:75">unsigned</name><operator pos:start="173:76" pos:end="173:76">)</operator><name pos:start="173:77" pos:end="173:92">codecdata_length</name></expr>)</condition><block pos:start="173:94" pos:end="179:13">{<block_content pos:start="175:17" pos:end="177:26">

                <expr_stmt pos:start="175:17" pos:end="175:72"><expr pos:start="175:17" pos:end="175:71"><call pos:start="175:17" pos:end="175:71"><name pos:start="175:17" pos:end="175:22">av_log</name><argument_list pos:start="175:23" pos:end="175:71">(<argument pos:start="175:24" pos:end="175:24"><expr pos:start="175:24" pos:end="175:24"><name pos:start="175:24" pos:end="175:24">s</name></expr></argument>, <argument pos:start="175:27" pos:end="175:38"><expr pos:start="175:27" pos:end="175:38"><name pos:start="175:27" pos:end="175:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:41" pos:end="175:70"><expr pos:start="175:41" pos:end="175:70"><literal type="string" pos:start="175:41" pos:end="175:70">"codecdata_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="177:17" pos:end="177:26">return <expr pos:start="177:24" pos:end="177:25"><operator pos:start="177:24" pos:end="177:24">-</operator><literal type="number" pos:start="177:25" pos:end="177:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="183:13" pos:end="189:13"><if pos:start="183:13" pos:end="189:13">if<condition pos:start="183:15" pos:end="183:36">(<expr pos:start="183:16" pos:end="183:35"><name pos:start="183:16" pos:end="183:30">sub_packet_size</name> <operator pos:start="183:32" pos:end="183:33">&lt;=</operator> <literal type="number" pos:start="183:35" pos:end="183:35">0</literal></expr>)</condition><block pos:start="183:37" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:26">

                <expr_stmt pos:start="185:17" pos:end="185:72"><expr pos:start="185:17" pos:end="185:71"><call pos:start="185:17" pos:end="185:71"><name pos:start="185:17" pos:end="185:22">av_log</name><argument_list pos:start="185:23" pos:end="185:71">(<argument pos:start="185:24" pos:end="185:24"><expr pos:start="185:24" pos:end="185:24"><name pos:start="185:24" pos:end="185:24">s</name></expr></argument>, <argument pos:start="185:27" pos:end="185:38"><expr pos:start="185:27" pos:end="185:38"><name pos:start="185:27" pos:end="185:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:41" pos:end="185:70"><expr pos:start="185:41" pos:end="185:70"><literal type="string" pos:start="185:41" pos:end="185:70">"sub_packet_size is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="187:17" pos:end="187:26">return <expr pos:start="187:24" pos:end="187:25"><operator pos:start="187:24" pos:end="187:24">-</operator><literal type="number" pos:start="187:25" pos:end="187:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="193:13" pos:end="197:55"><if pos:start="193:13" pos:end="193:74">if <condition pos:start="193:16" pos:end="193:37">(<expr pos:start="193:17" pos:end="193:36"><operator pos:start="193:17" pos:end="193:17">!</operator><call pos:start="193:18" pos:end="193:36"><name pos:start="193:18" pos:end="193:23">strcmp</name><argument_list pos:start="193:24" pos:end="193:36">(<argument pos:start="193:25" pos:end="193:27"><expr pos:start="193:25" pos:end="193:27"><name pos:start="193:25" pos:end="193:27">buf</name></expr></argument>, <argument pos:start="193:30" pos:end="193:35"><expr pos:start="193:30" pos:end="193:35"><literal type="string" pos:start="193:30" pos:end="193:35">"cook"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="193:39" pos:end="193:74"><block_content pos:start="193:39" pos:end="193:74"> <expr_stmt pos:start="193:39" pos:end="193:74"><expr pos:start="193:39" pos:end="193:73"><name pos:start="193:39" pos:end="193:57"><name pos:start="193:39" pos:end="193:40">st</name><operator pos:start="193:41" pos:end="193:42">-&gt;</operator><name pos:start="193:43" pos:end="193:47">codec</name><operator pos:start="193:48" pos:end="193:49">-&gt;</operator><name pos:start="193:50" pos:end="193:57">codec_id</name></name> <operator pos:start="193:59" pos:end="193:59">=</operator> <name pos:start="193:61" pos:end="193:73">CODEC_ID_COOK</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="195:13" pos:end="195:79">else if <condition pos:start="195:21" pos:end="195:42">(<expr pos:start="195:22" pos:end="195:41"><operator pos:start="195:22" pos:end="195:22">!</operator><call pos:start="195:23" pos:end="195:41"><name pos:start="195:23" pos:end="195:28">strcmp</name><argument_list pos:start="195:29" pos:end="195:41">(<argument pos:start="195:30" pos:end="195:32"><expr pos:start="195:30" pos:end="195:32"><name pos:start="195:30" pos:end="195:32">buf</name></expr></argument>, <argument pos:start="195:35" pos:end="195:40"><expr pos:start="195:35" pos:end="195:40"><literal type="string" pos:start="195:35" pos:end="195:40">"sipr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="195:44" pos:end="195:79"><block_content pos:start="195:44" pos:end="195:79"> <expr_stmt pos:start="195:44" pos:end="195:79"><expr pos:start="195:44" pos:end="195:78"><name pos:start="195:44" pos:end="195:62"><name pos:start="195:44" pos:end="195:45">st</name><operator pos:start="195:46" pos:end="195:47">-&gt;</operator><name pos:start="195:48" pos:end="195:52">codec</name><operator pos:start="195:53" pos:end="195:54">-&gt;</operator><name pos:start="195:55" pos:end="195:62">codec_id</name></name> <operator pos:start="195:64" pos:end="195:64">=</operator> <name pos:start="195:66" pos:end="195:78">CODEC_ID_SIPR</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="197:13" pos:end="197:55">else<block type="pseudo" pos:start="197:18" pos:end="197:55"><block_content pos:start="197:18" pos:end="197:55"> <expr_stmt pos:start="197:18" pos:end="197:55"><expr pos:start="197:18" pos:end="197:54"><name pos:start="197:18" pos:end="197:36"><name pos:start="197:18" pos:end="197:19">st</name><operator pos:start="197:20" pos:end="197:21">-&gt;</operator><name pos:start="197:22" pos:end="197:26">codec</name><operator pos:start="197:27" pos:end="197:28">-&gt;</operator><name pos:start="197:29" pos:end="197:36">codec_id</name></name> <operator pos:start="197:38" pos:end="197:38">=</operator> <name pos:start="197:40" pos:end="197:54">CODEC_ID_ATRAC3</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:56"><expr pos:start="199:13" pos:end="199:55"><name pos:start="199:13" pos:end="199:37"><name pos:start="199:13" pos:end="199:14">st</name><operator pos:start="199:15" pos:end="199:16">-&gt;</operator><name pos:start="199:17" pos:end="199:21">codec</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:37">extradata_size</name></name><operator pos:start="199:38" pos:end="199:38">=</operator> <name pos:start="199:40" pos:end="199:55">codecdata_length</name></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:103"><expr pos:start="201:13" pos:end="201:102"><name pos:start="201:13" pos:end="201:32"><name pos:start="201:13" pos:end="201:14">st</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:21">codec</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:32">extradata</name></name><operator pos:start="201:33" pos:end="201:33">=</operator> <call pos:start="201:35" pos:end="201:102"><name pos:start="201:35" pos:end="201:44">av_mallocz</name><argument_list pos:start="201:45" pos:end="201:102">(<argument pos:start="201:46" pos:end="201:101"><expr pos:start="201:46" pos:end="201:101"><name pos:start="201:46" pos:end="201:70"><name pos:start="201:46" pos:end="201:47">st</name><operator pos:start="201:48" pos:end="201:49">-&gt;</operator><name pos:start="201:50" pos:end="201:54">codec</name><operator pos:start="201:55" pos:end="201:56">-&gt;</operator><name pos:start="201:57" pos:end="201:70">extradata_size</name></name> <operator pos:start="201:72" pos:end="201:72">+</operator> <name pos:start="201:74" pos:end="201:101">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="203:13" pos:end="205:67">for<control pos:start="203:16" pos:end="203:49">(<init pos:start="203:17" pos:end="203:22"><expr pos:start="203:17" pos:end="203:21"><name pos:start="203:17" pos:end="203:17">i</name> <operator pos:start="203:19" pos:end="203:19">=</operator> <literal type="number" pos:start="203:21" pos:end="203:21">0</literal></expr>;</init> <condition pos:start="203:24" pos:end="203:44"><expr pos:start="203:24" pos:end="203:43"><name pos:start="203:24" pos:end="203:24">i</name> <operator pos:start="203:26" pos:end="203:26">&lt;</operator> <name pos:start="203:28" pos:end="203:43">codecdata_length</name></expr>;</condition> <incr pos:start="203:46" pos:end="203:48"><expr pos:start="203:46" pos:end="203:48"><name pos:start="203:46" pos:end="203:46">i</name><operator pos:start="203:47" pos:end="203:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="205:17" pos:end="205:67"><block_content pos:start="205:17" pos:end="205:67">

                <expr_stmt pos:start="205:17" pos:end="205:67"><expr pos:start="205:17" pos:end="205:66"><operator pos:start="205:17" pos:end="205:17">(</operator><operator pos:start="205:18" pos:end="205:18">(</operator><name pos:start="205:19" pos:end="205:25">uint8_t</name><operator pos:start="205:26" pos:end="205:26">*</operator><operator pos:start="205:27" pos:end="205:27">)</operator><name pos:start="205:28" pos:end="205:47"><name pos:start="205:28" pos:end="205:29">st</name><operator pos:start="205:30" pos:end="205:31">-&gt;</operator><name pos:start="205:32" pos:end="205:36">codec</name><operator pos:start="205:37" pos:end="205:38">-&gt;</operator><name pos:start="205:39" pos:end="205:47">extradata</name></name><operator pos:start="205:48" pos:end="205:48">)</operator><index pos:start="205:49" pos:end="205:51">[<expr pos:start="205:50" pos:end="205:50"><name pos:start="205:50" pos:end="205:50">i</name></expr>]</index> <operator pos:start="205:53" pos:end="205:53">=</operator> <call pos:start="205:55" pos:end="205:66"><name pos:start="205:55" pos:end="205:62">get_byte</name><argument_list pos:start="205:63" pos:end="205:66">(<argument pos:start="205:64" pos:end="205:65"><expr pos:start="205:64" pos:end="205:65"><name pos:start="205:64" pos:end="205:65">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="207:13" pos:end="207:57"><expr pos:start="207:13" pos:end="207:56"><name pos:start="207:13" pos:end="207:31"><name pos:start="207:13" pos:end="207:14">rm</name><operator pos:start="207:15" pos:end="207:16">-&gt;</operator><name pos:start="207:17" pos:end="207:31">audio_framesize</name></name> <operator pos:start="207:33" pos:end="207:33">=</operator> <name pos:start="207:35" pos:end="207:56"><name pos:start="207:35" pos:end="207:36">st</name><operator pos:start="207:37" pos:end="207:38">-&gt;</operator><name pos:start="207:39" pos:end="207:43">codec</name><operator pos:start="207:44" pos:end="207:45">-&gt;</operator><name pos:start="207:46" pos:end="207:56">block_align</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:57"><expr pos:start="209:13" pos:end="209:56"><name pos:start="209:13" pos:end="209:34"><name pos:start="209:13" pos:end="209:14">st</name><operator pos:start="209:15" pos:end="209:16">-&gt;</operator><name pos:start="209:17" pos:end="209:21">codec</name><operator pos:start="209:22" pos:end="209:23">-&gt;</operator><name pos:start="209:24" pos:end="209:34">block_align</name></name> <operator pos:start="209:36" pos:end="209:36">=</operator> <name pos:start="209:38" pos:end="209:56"><name pos:start="209:38" pos:end="209:39">rm</name><operator pos:start="209:40" pos:end="209:41">-&gt;</operator><name pos:start="209:42" pos:end="209:56">sub_packet_size</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="213:13" pos:end="219:13"><if pos:start="213:13" pos:end="219:13">if<condition pos:start="213:15" pos:end="213:62">(<expr pos:start="213:16" pos:end="213:61"><name pos:start="213:16" pos:end="213:34"><name pos:start="213:16" pos:end="213:17">rm</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:34">audio_framesize</name></name> <operator pos:start="213:36" pos:end="213:37">&gt;=</operator> <name pos:start="213:39" pos:end="213:46">UINT_MAX</name> <operator pos:start="213:48" pos:end="213:48">/</operator> <name pos:start="213:50" pos:end="213:61">sub_packet_h</name></expr>)</condition><block pos:start="213:63" pos:end="219:13">{<block_content pos:start="215:17" pos:end="217:26">

                <expr_stmt pos:start="215:17" pos:end="215:90"><expr pos:start="215:17" pos:end="215:89"><call pos:start="215:17" pos:end="215:89"><name pos:start="215:17" pos:end="215:22">av_log</name><argument_list pos:start="215:23" pos:end="215:89">(<argument pos:start="215:24" pos:end="215:24"><expr pos:start="215:24" pos:end="215:24"><name pos:start="215:24" pos:end="215:24">s</name></expr></argument>, <argument pos:start="215:27" pos:end="215:38"><expr pos:start="215:27" pos:end="215:38"><name pos:start="215:27" pos:end="215:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:41" pos:end="215:88"><expr pos:start="215:41" pos:end="215:88"><literal type="string" pos:start="215:41" pos:end="215:88">"rm-&gt;audio_framesize * sub_packet_h too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="217:17" pos:end="217:26">return <expr pos:start="217:24" pos:end="217:25"><operator pos:start="217:24" pos:end="217:24">-</operator><literal type="number" pos:start="217:25" pos:end="217:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="223:13" pos:end="223:73"><expr pos:start="223:13" pos:end="223:72"><name pos:start="223:13" pos:end="223:24"><name pos:start="223:13" pos:end="223:14">rm</name><operator pos:start="223:15" pos:end="223:16">-&gt;</operator><name pos:start="223:17" pos:end="223:24">audiobuf</name></name> <operator pos:start="223:26" pos:end="223:26">=</operator> <call pos:start="223:28" pos:end="223:72"><name pos:start="223:28" pos:end="223:36">av_malloc</name><argument_list pos:start="223:37" pos:end="223:72">(<argument pos:start="223:38" pos:end="223:71"><expr pos:start="223:38" pos:end="223:71"><name pos:start="223:38" pos:end="223:56"><name pos:start="223:38" pos:end="223:39">rm</name><operator pos:start="223:40" pos:end="223:41">-&gt;</operator><name pos:start="223:42" pos:end="223:56">audio_framesize</name></name> <operator pos:start="223:58" pos:end="223:58">*</operator> <name pos:start="223:60" pos:end="223:71">sub_packet_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="225:11" pos:end="261:9">else if <condition pos:start="225:19" pos:end="225:64">(<expr pos:start="225:20" pos:end="225:63"><operator pos:start="225:20" pos:end="225:20">!</operator><call pos:start="225:21" pos:end="225:39"><name pos:start="225:21" pos:end="225:26">strcmp</name><argument_list pos:start="225:27" pos:end="225:39">(<argument pos:start="225:28" pos:end="225:30"><expr pos:start="225:28" pos:end="225:30"><name pos:start="225:28" pos:end="225:30">buf</name></expr></argument>, <argument pos:start="225:33" pos:end="225:38"><expr pos:start="225:33" pos:end="225:38"><literal type="string" pos:start="225:33" pos:end="225:38">"raac"</literal></expr></argument>)</argument_list></call> <operator pos:start="225:41" pos:end="225:42">||</operator> <operator pos:start="225:44" pos:end="225:44">!</operator><call pos:start="225:45" pos:end="225:63"><name pos:start="225:45" pos:end="225:50">strcmp</name><argument_list pos:start="225:51" pos:end="225:63">(<argument pos:start="225:52" pos:end="225:54"><expr pos:start="225:52" pos:end="225:54"><name pos:start="225:52" pos:end="225:54">buf</name></expr></argument>, <argument pos:start="225:57" pos:end="225:62"><expr pos:start="225:57" pos:end="225:62"><literal type="string" pos:start="225:57" pos:end="225:62">"racp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:66" pos:end="261:9">{<block_content pos:start="227:13" pos:end="259:13">

            <decl_stmt pos:start="227:13" pos:end="227:36"><decl pos:start="227:13" pos:end="227:32"><type pos:start="227:13" pos:end="227:15"><name pos:start="227:13" pos:end="227:15">int</name></type> <name pos:start="227:17" pos:end="227:32">codecdata_length</name></decl>, <decl pos:start="227:35" pos:end="227:35"><type ref="prev" pos:start="227:13" pos:end="227:15"/><name pos:start="227:35" pos:end="227:35">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:25"><expr pos:start="229:13" pos:end="229:24"><call pos:start="229:13" pos:end="229:24"><name pos:start="229:13" pos:end="229:20">get_be16</name><argument_list pos:start="229:21" pos:end="229:24">(<argument pos:start="229:22" pos:end="229:23"><expr pos:start="229:22" pos:end="229:23"><name pos:start="229:22" pos:end="229:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="229:27" pos:end="229:39"><expr pos:start="229:27" pos:end="229:38"><call pos:start="229:27" pos:end="229:38"><name pos:start="229:27" pos:end="229:34">get_byte</name><argument_list pos:start="229:35" pos:end="229:38">(<argument pos:start="229:36" pos:end="229:37"><expr pos:start="229:36" pos:end="229:37"><name pos:start="229:36" pos:end="229:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="233:29"><if pos:start="231:13" pos:end="233:29">if <condition pos:start="231:16" pos:end="231:46">(<expr pos:start="231:17" pos:end="231:45"><operator pos:start="231:17" pos:end="231:17">(</operator><operator pos:start="231:18" pos:end="231:18">(</operator><name pos:start="231:19" pos:end="231:25">version</name> <operator pos:start="231:27" pos:end="231:28">&gt;&gt;</operator> <literal type="number" pos:start="231:30" pos:end="231:31">16</literal><operator pos:start="231:32" pos:end="231:32">)</operator> <operator pos:start="231:34" pos:end="231:34">&amp;</operator> <literal type="number" pos:start="231:36" pos:end="231:39">0xff</literal><operator pos:start="231:40" pos:end="231:40">)</operator> <operator pos:start="231:42" pos:end="231:43">==</operator> <literal type="number" pos:start="231:45" pos:end="231:45">5</literal></expr>)</condition><block type="pseudo" pos:start="233:17" pos:end="233:29"><block_content pos:start="233:17" pos:end="233:29">

                <expr_stmt pos:start="233:17" pos:end="233:29"><expr pos:start="233:17" pos:end="233:28"><call pos:start="233:17" pos:end="233:28"><name pos:start="233:17" pos:end="233:24">get_byte</name><argument_list pos:start="233:25" pos:end="233:28">(<argument pos:start="233:26" pos:end="233:27"><expr pos:start="233:26" pos:end="233:27"><name pos:start="233:26" pos:end="233:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:47"><expr pos:start="235:13" pos:end="235:46"><name pos:start="235:13" pos:end="235:31"><name pos:start="235:13" pos:end="235:14">st</name><operator pos:start="235:15" pos:end="235:16">-&gt;</operator><name pos:start="235:17" pos:end="235:21">codec</name><operator pos:start="235:22" pos:end="235:23">-&gt;</operator><name pos:start="235:24" pos:end="235:31">codec_id</name></name> <operator pos:start="235:33" pos:end="235:33">=</operator> <name pos:start="235:35" pos:end="235:46">CODEC_ID_AAC</name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:44"><expr pos:start="237:13" pos:end="237:43"><name pos:start="237:13" pos:end="237:28">codecdata_length</name> <operator pos:start="237:30" pos:end="237:30">=</operator> <call pos:start="237:32" pos:end="237:43"><name pos:start="237:32" pos:end="237:39">get_be32</name><argument_list pos:start="237:40" pos:end="237:43">(<argument pos:start="237:41" pos:end="237:42"><expr pos:start="237:41" pos:end="237:42"><name pos:start="237:41" pos:end="237:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="239:13" pos:end="245:13"><if pos:start="239:13" pos:end="245:13">if<condition pos:start="239:15" pos:end="239:93">(<expr pos:start="239:16" pos:end="239:92"><name pos:start="239:16" pos:end="239:31">codecdata_length</name> <operator pos:start="239:33" pos:end="239:33">+</operator> <name pos:start="239:35" pos:end="239:62">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="239:64" pos:end="239:65">&lt;=</operator> <operator pos:start="239:67" pos:end="239:67">(</operator><name pos:start="239:68" pos:end="239:75">unsigned</name><operator pos:start="239:76" pos:end="239:76">)</operator><name pos:start="239:77" pos:end="239:92">codecdata_length</name></expr>)</condition><block pos:start="239:94" pos:end="245:13">{<block_content pos:start="241:17" pos:end="243:26">

                <expr_stmt pos:start="241:17" pos:end="241:72"><expr pos:start="241:17" pos:end="241:71"><call pos:start="241:17" pos:end="241:71"><name pos:start="241:17" pos:end="241:22">av_log</name><argument_list pos:start="241:23" pos:end="241:71">(<argument pos:start="241:24" pos:end="241:24"><expr pos:start="241:24" pos:end="241:24"><name pos:start="241:24" pos:end="241:24">s</name></expr></argument>, <argument pos:start="241:27" pos:end="241:38"><expr pos:start="241:27" pos:end="241:38"><name pos:start="241:27" pos:end="241:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:41" pos:end="241:70"><expr pos:start="241:41" pos:end="241:70"><literal type="string" pos:start="241:41" pos:end="241:70">"codecdata_length too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="243:17" pos:end="243:26">return <expr pos:start="243:24" pos:end="243:25"><operator pos:start="243:24" pos:end="243:24">-</operator><literal type="number" pos:start="243:25" pos:end="243:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="247:13" pos:end="259:13"><if pos:start="247:13" pos:end="259:13">if <condition pos:start="247:16" pos:end="247:38">(<expr pos:start="247:17" pos:end="247:37"><name pos:start="247:17" pos:end="247:32">codecdata_length</name> <operator pos:start="247:34" pos:end="247:35">&gt;=</operator> <literal type="number" pos:start="247:37" pos:end="247:37">1</literal></expr>)</condition> <block pos:start="247:40" pos:end="259:13">{<block_content pos:start="249:17" pos:end="257:71">

                <expr_stmt pos:start="249:17" pos:end="249:65"><expr pos:start="249:17" pos:end="249:64"><name pos:start="249:17" pos:end="249:41"><name pos:start="249:17" pos:end="249:18">st</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:25">codec</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:41">extradata_size</name></name> <operator pos:start="249:43" pos:end="249:43">=</operator> <name pos:start="249:45" pos:end="249:60">codecdata_length</name> <operator pos:start="249:62" pos:end="249:62">-</operator> <literal type="number" pos:start="249:64" pos:end="249:64">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:108"><expr pos:start="251:17" pos:end="251:107"><name pos:start="251:17" pos:end="251:36"><name pos:start="251:17" pos:end="251:18">st</name><operator pos:start="251:19" pos:end="251:20">-&gt;</operator><name pos:start="251:21" pos:end="251:25">codec</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:36">extradata</name></name> <operator pos:start="251:38" pos:end="251:38">=</operator> <call pos:start="251:40" pos:end="251:107"><name pos:start="251:40" pos:end="251:49">av_mallocz</name><argument_list pos:start="251:50" pos:end="251:107">(<argument pos:start="251:51" pos:end="251:106"><expr pos:start="251:51" pos:end="251:106"><name pos:start="251:51" pos:end="251:75"><name pos:start="251:51" pos:end="251:52">st</name><operator pos:start="251:53" pos:end="251:54">-&gt;</operator><name pos:start="251:55" pos:end="251:59">codec</name><operator pos:start="251:60" pos:end="251:61">-&gt;</operator><name pos:start="251:62" pos:end="251:75">extradata_size</name></name> <operator pos:start="251:77" pos:end="251:77">+</operator> <name pos:start="251:79" pos:end="251:106">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:29"><expr pos:start="253:17" pos:end="253:28"><call pos:start="253:17" pos:end="253:28"><name pos:start="253:17" pos:end="253:24">get_byte</name><argument_list pos:start="253:25" pos:end="253:28">(<argument pos:start="253:26" pos:end="253:27"><expr pos:start="253:26" pos:end="253:27"><name pos:start="253:26" pos:end="253:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="255:17" pos:end="257:71">for<control pos:start="255:20" pos:end="255:62">(<init pos:start="255:21" pos:end="255:26"><expr pos:start="255:21" pos:end="255:25"><name pos:start="255:21" pos:end="255:21">i</name> <operator pos:start="255:23" pos:end="255:23">=</operator> <literal type="number" pos:start="255:25" pos:end="255:25">0</literal></expr>;</init> <condition pos:start="255:28" pos:end="255:57"><expr pos:start="255:28" pos:end="255:56"><name pos:start="255:28" pos:end="255:28">i</name> <operator pos:start="255:30" pos:end="255:30">&lt;</operator> <name pos:start="255:32" pos:end="255:56"><name pos:start="255:32" pos:end="255:33">st</name><operator pos:start="255:34" pos:end="255:35">-&gt;</operator><name pos:start="255:36" pos:end="255:40">codec</name><operator pos:start="255:41" pos:end="255:42">-&gt;</operator><name pos:start="255:43" pos:end="255:56">extradata_size</name></name></expr>;</condition> <incr pos:start="255:59" pos:end="255:61"><expr pos:start="255:59" pos:end="255:61"><name pos:start="255:59" pos:end="255:59">i</name><operator pos:start="255:60" pos:end="255:61">++</operator></expr></incr>)</control><block type="pseudo" pos:start="257:21" pos:end="257:71"><block_content pos:start="257:21" pos:end="257:71">

                    <expr_stmt pos:start="257:21" pos:end="257:71"><expr pos:start="257:21" pos:end="257:70"><operator pos:start="257:21" pos:end="257:21">(</operator><operator pos:start="257:22" pos:end="257:22">(</operator><name pos:start="257:23" pos:end="257:29">uint8_t</name><operator pos:start="257:30" pos:end="257:30">*</operator><operator pos:start="257:31" pos:end="257:31">)</operator><name pos:start="257:32" pos:end="257:51"><name pos:start="257:32" pos:end="257:33">st</name><operator pos:start="257:34" pos:end="257:35">-&gt;</operator><name pos:start="257:36" pos:end="257:40">codec</name><operator pos:start="257:41" pos:end="257:42">-&gt;</operator><name pos:start="257:43" pos:end="257:51">extradata</name></name><operator pos:start="257:52" pos:end="257:52">)</operator><index pos:start="257:53" pos:end="257:55">[<expr pos:start="257:54" pos:end="257:54"><name pos:start="257:54" pos:end="257:54">i</name></expr>]</index> <operator pos:start="257:57" pos:end="257:57">=</operator> <call pos:start="257:59" pos:end="257:70"><name pos:start="257:59" pos:end="257:66">get_byte</name><argument_list pos:start="257:67" pos:end="257:70">(<argument pos:start="257:68" pos:end="257:69"><expr pos:start="257:68" pos:end="257:69"><name pos:start="257:68" pos:end="257:69">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="261:11" pos:end="267:9">else <block pos:start="261:16" pos:end="267:9">{<block_content pos:start="263:13" pos:end="265:82">

            <expr_stmt pos:start="263:13" pos:end="263:48"><expr pos:start="263:13" pos:end="263:47"><name pos:start="263:13" pos:end="263:31"><name pos:start="263:13" pos:end="263:14">st</name><operator pos:start="263:15" pos:end="263:16">-&gt;</operator><name pos:start="263:17" pos:end="263:21">codec</name><operator pos:start="263:22" pos:end="263:23">-&gt;</operator><name pos:start="263:24" pos:end="263:31">codec_id</name></name> <operator pos:start="263:33" pos:end="263:33">=</operator> <name pos:start="263:35" pos:end="263:47">CODEC_ID_NONE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:82"><expr pos:start="265:13" pos:end="265:81"><call pos:start="265:13" pos:end="265:81"><name pos:start="265:13" pos:end="265:22">av_strlcpy</name><argument_list pos:start="265:23" pos:end="265:81">(<argument pos:start="265:24" pos:end="265:44"><expr pos:start="265:24" pos:end="265:44"><name pos:start="265:24" pos:end="265:44"><name pos:start="265:24" pos:end="265:25">st</name><operator pos:start="265:26" pos:end="265:27">-&gt;</operator><name pos:start="265:28" pos:end="265:32">codec</name><operator pos:start="265:33" pos:end="265:34">-&gt;</operator><name pos:start="265:35" pos:end="265:44">codec_name</name></name></expr></argument>, <argument pos:start="265:47" pos:end="265:49"><expr pos:start="265:47" pos:end="265:49"><name pos:start="265:47" pos:end="265:49">buf</name></expr></argument>, <argument pos:start="265:52" pos:end="265:80"><expr pos:start="265:52" pos:end="265:80"><sizeof pos:start="265:52" pos:end="265:80">sizeof<argument_list pos:start="265:58" pos:end="265:80">(<argument pos:start="265:59" pos:end="265:79"><expr pos:start="265:59" pos:end="265:79"><name pos:start="265:59" pos:end="265:79"><name pos:start="265:59" pos:end="265:60">st</name><operator pos:start="265:61" pos:end="265:62">-&gt;</operator><name pos:start="265:63" pos:end="265:67">codec</name><operator pos:start="265:68" pos:end="265:69">-&gt;</operator><name pos:start="265:70" pos:end="265:79">codec_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="269:9" pos:end="287:9"><if pos:start="269:9" pos:end="287:9">if <condition pos:start="269:12" pos:end="269:21">(<expr pos:start="269:13" pos:end="269:20"><name pos:start="269:13" pos:end="269:20">read_all</name></expr>)</condition> <block pos:start="269:23" pos:end="287:9">{<block_content pos:start="271:13" pos:end="285:57">

            <expr_stmt pos:start="271:13" pos:end="271:25"><expr pos:start="271:13" pos:end="271:24"><call pos:start="271:13" pos:end="271:24"><name pos:start="271:13" pos:end="271:20">get_byte</name><argument_list pos:start="271:21" pos:end="271:24">(<argument pos:start="271:22" pos:end="271:23"><expr pos:start="271:22" pos:end="271:23"><name pos:start="271:22" pos:end="271:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:25"><expr pos:start="273:13" pos:end="273:24"><call pos:start="273:13" pos:end="273:24"><name pos:start="273:13" pos:end="273:20">get_byte</name><argument_list pos:start="273:21" pos:end="273:24">(<argument pos:start="273:22" pos:end="273:23"><expr pos:start="273:22" pos:end="273:23"><name pos:start="273:22" pos:end="273:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:25"><expr pos:start="275:13" pos:end="275:24"><call pos:start="275:13" pos:end="275:24"><name pos:start="275:13" pos:end="275:20">get_byte</name><argument_list pos:start="275:21" pos:end="275:24">(<argument pos:start="275:22" pos:end="275:23"><expr pos:start="275:22" pos:end="275:23"><name pos:start="275:22" pos:end="275:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="279:13" pos:end="279:53"><expr pos:start="279:13" pos:end="279:52"><call pos:start="279:13" pos:end="279:52"><name pos:start="279:13" pos:end="279:20">get_str8</name><argument_list pos:start="279:21" pos:end="279:52">(<argument pos:start="279:22" pos:end="279:23"><expr pos:start="279:22" pos:end="279:23"><name pos:start="279:22" pos:end="279:23">pb</name></expr></argument>, <argument pos:start="279:26" pos:end="279:33"><expr pos:start="279:26" pos:end="279:33"><name pos:start="279:26" pos:end="279:33"><name pos:start="279:26" pos:end="279:26">s</name><operator pos:start="279:27" pos:end="279:28">-&gt;</operator><name pos:start="279:29" pos:end="279:33">title</name></name></expr></argument>, <argument pos:start="279:36" pos:end="279:51"><expr pos:start="279:36" pos:end="279:51"><sizeof pos:start="279:36" pos:end="279:51">sizeof<argument_list pos:start="279:42" pos:end="279:51">(<argument pos:start="279:43" pos:end="279:50"><expr pos:start="279:43" pos:end="279:50"><name pos:start="279:43" pos:end="279:50"><name pos:start="279:43" pos:end="279:43">s</name><operator pos:start="279:44" pos:end="279:45">-&gt;</operator><name pos:start="279:46" pos:end="279:50">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:55"><expr pos:start="281:13" pos:end="281:54"><call pos:start="281:13" pos:end="281:54"><name pos:start="281:13" pos:end="281:20">get_str8</name><argument_list pos:start="281:21" pos:end="281:54">(<argument pos:start="281:22" pos:end="281:23"><expr pos:start="281:22" pos:end="281:23"><name pos:start="281:22" pos:end="281:23">pb</name></expr></argument>, <argument pos:start="281:26" pos:end="281:34"><expr pos:start="281:26" pos:end="281:34"><name pos:start="281:26" pos:end="281:34"><name pos:start="281:26" pos:end="281:26">s</name><operator pos:start="281:27" pos:end="281:28">-&gt;</operator><name pos:start="281:29" pos:end="281:34">author</name></name></expr></argument>, <argument pos:start="281:37" pos:end="281:53"><expr pos:start="281:37" pos:end="281:53"><sizeof pos:start="281:37" pos:end="281:53">sizeof<argument_list pos:start="281:43" pos:end="281:53">(<argument pos:start="281:44" pos:end="281:52"><expr pos:start="281:44" pos:end="281:52"><name pos:start="281:44" pos:end="281:52"><name pos:start="281:44" pos:end="281:44">s</name><operator pos:start="281:45" pos:end="281:46">-&gt;</operator><name pos:start="281:47" pos:end="281:52">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:61"><expr pos:start="283:13" pos:end="283:60"><call pos:start="283:13" pos:end="283:60"><name pos:start="283:13" pos:end="283:20">get_str8</name><argument_list pos:start="283:21" pos:end="283:60">(<argument pos:start="283:22" pos:end="283:23"><expr pos:start="283:22" pos:end="283:23"><name pos:start="283:22" pos:end="283:23">pb</name></expr></argument>, <argument pos:start="283:26" pos:end="283:37"><expr pos:start="283:26" pos:end="283:37"><name pos:start="283:26" pos:end="283:37"><name pos:start="283:26" pos:end="283:26">s</name><operator pos:start="283:27" pos:end="283:28">-&gt;</operator><name pos:start="283:29" pos:end="283:37">copyright</name></name></expr></argument>, <argument pos:start="283:40" pos:end="283:59"><expr pos:start="283:40" pos:end="283:59"><sizeof pos:start="283:40" pos:end="283:59">sizeof<argument_list pos:start="283:46" pos:end="283:59">(<argument pos:start="283:47" pos:end="283:58"><expr pos:start="283:47" pos:end="283:58"><name pos:start="283:47" pos:end="283:58"><name pos:start="283:47" pos:end="283:47">s</name><operator pos:start="283:48" pos:end="283:49">-&gt;</operator><name pos:start="283:50" pos:end="283:58">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:57"><expr pos:start="285:13" pos:end="285:56"><call pos:start="285:13" pos:end="285:56"><name pos:start="285:13" pos:end="285:20">get_str8</name><argument_list pos:start="285:21" pos:end="285:56">(<argument pos:start="285:22" pos:end="285:23"><expr pos:start="285:22" pos:end="285:23"><name pos:start="285:22" pos:end="285:23">pb</name></expr></argument>, <argument pos:start="285:26" pos:end="285:35"><expr pos:start="285:26" pos:end="285:35"><name pos:start="285:26" pos:end="285:35"><name pos:start="285:26" pos:end="285:26">s</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:35">comment</name></name></expr></argument>, <argument pos:start="285:38" pos:end="285:55"><expr pos:start="285:38" pos:end="285:55"><sizeof pos:start="285:38" pos:end="285:55">sizeof<argument_list pos:start="285:44" pos:end="285:55">(<argument pos:start="285:45" pos:end="285:54"><expr pos:start="285:45" pos:end="285:54"><name pos:start="285:45" pos:end="285:54"><name pos:start="285:45" pos:end="285:45">s</name><operator pos:start="285:46" pos:end="285:47">-&gt;</operator><name pos:start="285:48" pos:end="285:54">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="291:5" pos:end="291:13">return <expr pos:start="291:12" pos:end="291:12"><literal type="number" pos:start="291:12" pos:end="291:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
