<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8552.c" pos:tabs="8"><function pos:start="1:1" pos:end="909:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">load_elf_binary</name><parameter_list pos:start="1:20" pos:end="3:45">(<parameter pos:start="1:21" pos:end="1:46"><decl pos:start="1:21" pos:end="1:46"><type pos:start="1:21" pos:end="1:46"><name pos:start="1:21" pos:end="1:39"><name pos:start="1:21" pos:end="1:26">struct</name> <name pos:start="1:28" pos:end="1:39">linux_binprm</name></name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type> <name pos:start="1:43" pos:end="1:46">bprm</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:76"><decl pos:start="1:49" pos:end="1:76"><type pos:start="1:49" pos:end="1:76"><name pos:start="1:49" pos:end="1:69"><name pos:start="1:49" pos:end="1:54">struct</name> <name pos:start="1:56" pos:end="1:69">target_pt_regs</name></name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type> <name pos:start="1:73" pos:end="1:76">regs</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:44"><decl pos:start="3:21" pos:end="3:44"><type pos:start="3:21" pos:end="3:44"><name pos:start="3:21" pos:end="3:37"><name pos:start="3:21" pos:end="3:26">struct</name> <name pos:start="3:28" pos:end="3:37">image_info</name></name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type> <name pos:start="3:41" pos:end="3:44">info</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="909:1">{<block_content pos:start="7:5" pos:end="907:13">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">elfhdr</name></name></type> <name pos:start="7:19" pos:end="7:24">elf_ex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">elfhdr</name></name></type> <name pos:start="9:19" pos:end="9:31">interp_elf_ex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:15">exec</name></name></type> <name pos:start="11:17" pos:end="11:25">interp_ex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">interpreter_fd</name> <init pos:start="13:24" pos:end="13:27">= <expr pos:start="13:26" pos:end="13:27"><operator pos:start="13:26" pos:end="13:26">-</operator><literal type="number" pos:start="13:27" pos:end="13:27">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="13:30" pos:end="13:48">/* avoid warning */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">abi_ulong</name></type> <name pos:start="15:15" pos:end="15:23">load_addr</name></decl>, <decl pos:start="15:26" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:26" pos:end="15:34">load_bias</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:21">load_addr_set</name> <init pos:start="17:23" pos:end="17:25">= <expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:53"><decl pos:start="19:5" pos:end="19:52"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:33">interpreter_type</name> <init pos:start="19:35" pos:end="19:52">= <expr pos:start="19:37" pos:end="19:52"><name pos:start="19:37" pos:end="19:52">INTERPRETER_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:36"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:35">ibcs2_interpreter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:13">abi_ulong</name></type> <name pos:start="25:15" pos:end="25:25">mapped_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:19">elf_phdr</name></name> <modifier pos:start="27:21" pos:end="27:21">*</modifier></type> <name pos:start="27:23" pos:end="27:30">elf_ppnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:10">struct</name> <name pos:start="29:12" pos:end="29:19">elf_phdr</name></name> <modifier pos:start="29:21" pos:end="29:21">*</modifier></type><name pos:start="29:22" pos:end="29:31">elf_phdata</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:15"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:13">abi_ulong</name></type> <name pos:start="31:15" pos:end="31:15">k</name></decl>, <decl pos:start="31:18" pos:end="31:24"><type ref="prev" pos:start="31:5" pos:end="31:13"/><name pos:start="31:18" pos:end="31:24">elf_brk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:15"><decl pos:start="33:5" pos:end="33:14"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">char</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type> <name pos:start="35:12" pos:end="35:26">elf_interpreter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:13">abi_ulong</name></type> <name pos:start="37:15" pos:end="37:23">elf_entry</name></decl>, <decl pos:start="37:26" pos:end="37:45"><type ref="prev" pos:start="37:5" pos:end="37:13"/><name pos:start="37:26" pos:end="37:41">interp_load_addr</name> <init pos:start="37:43" pos:end="37:45">= <expr pos:start="37:45" pos:end="37:45"><literal type="number" pos:start="37:45" pos:end="37:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:15"><decl pos:start="39:5" pos:end="39:14"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:14">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:57"><decl pos:start="41:5" pos:end="41:24"><type pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:13">abi_ulong</name></type> <name pos:start="41:15" pos:end="41:24">start_code</name></decl>, <decl pos:start="41:27" pos:end="41:34"><type ref="prev" pos:start="41:5" pos:end="41:13"/><name pos:start="41:27" pos:end="41:34">end_code</name></decl>, <decl pos:start="41:37" pos:end="41:46"><type ref="prev" pos:start="41:5" pos:end="41:13"/><name pos:start="41:37" pos:end="41:46">start_data</name></decl>, <decl pos:start="41:49" pos:end="41:56"><type ref="prev" pos:start="41:5" pos:end="41:13"/><name pos:start="41:49" pos:end="41:56">end_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:34"><decl pos:start="43:5" pos:end="43:33"><type pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:13">abi_ulong</name></type> <name pos:start="43:15" pos:end="43:29">reloc_func_desc</name> <init pos:start="43:31" pos:end="43:33">= <expr pos:start="43:33" pos:end="43:33"><literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:24"><decl pos:start="45:5" pos:end="45:23"><type pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:13">abi_ulong</name></type> <name pos:start="45:15" pos:end="45:23">elf_stack</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:26"><decl pos:start="47:5" pos:end="47:25"><type pos:start="47:5" pos:end="47:8"><name pos:start="47:5" pos:end="47:8">char</name></type> <name pos:start="47:10" pos:end="47:25"><name pos:start="47:10" pos:end="47:22">passed_fileno</name><index pos:start="47:23" pos:end="47:25">[<expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">6</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:21">ibcs2_interpreter</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:15"><expr pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:10">status</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:13">load_addr</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:13">load_bias</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:10">elf_ex</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <operator pos:start="59:14" pos:end="59:14">*</operator><operator pos:start="59:15" pos:end="59:15">(</operator><operator pos:start="59:16" pos:end="59:16">(</operator>struct <name pos:start="59:24" pos:end="59:29">elfhdr</name> <operator pos:start="59:31" pos:end="59:31">*</operator><operator pos:start="59:32" pos:end="59:32">)</operator> <name pos:start="59:34" pos:end="59:42"><name pos:start="59:34" pos:end="59:37">bprm</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:42">buf</name></name><operator pos:start="59:43" pos:end="59:43">)</operator></expr>;</expr_stmt>          <comment type="block" pos:start="59:55" pos:end="59:71">/* exec-header */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:24"><expr pos:start="61:5" pos:end="61:23"><call pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:14">bswap_ehdr</name><argument_list pos:start="61:15" pos:end="61:23">(<argument pos:start="61:16" pos:end="61:22"><expr pos:start="61:16" pos:end="61:22"><operator pos:start="61:16" pos:end="61:16">&amp;</operator><name pos:start="61:17" pos:end="61:22">elf_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:54">/* First of all, some simple consistency checks */</comment>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="69:45">(<expr pos:start="67:9" pos:end="69:44"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:22"><name pos:start="67:10" pos:end="67:15">elf_ex</name><operator pos:start="67:16" pos:end="67:16">.</operator><name pos:start="67:17" pos:end="67:22">e_type</name></name> <operator pos:start="67:24" pos:end="67:25">!=</operator> <name pos:start="67:27" pos:end="67:33">ET_EXEC</name> <operator pos:start="67:35" pos:end="67:36">&amp;&amp;</operator> <name pos:start="67:38" pos:end="67:50"><name pos:start="67:38" pos:end="67:43">elf_ex</name><operator pos:start="67:44" pos:end="67:44">.</operator><name pos:start="67:45" pos:end="67:50">e_type</name></name> <operator pos:start="67:52" pos:end="67:53">!=</operator> <name pos:start="67:55" pos:end="67:60">ET_DYN</name><operator pos:start="67:61" pos:end="67:61">)</operator> <operator pos:start="67:63" pos:end="67:64">||</operator>

        <operator pos:start="69:9" pos:end="69:9">(</operator><operator pos:start="69:10" pos:end="69:10">!</operator> <call pos:start="69:12" pos:end="69:43"><name pos:start="69:12" pos:end="69:25">elf_check_arch</name><argument_list pos:start="69:26" pos:end="69:43">(<argument pos:start="69:27" pos:end="69:42"><expr pos:start="69:27" pos:end="69:42"><name pos:start="69:27" pos:end="69:42"><name pos:start="69:27" pos:end="69:32">elf_ex</name><operator pos:start="69:33" pos:end="69:33">.</operator><name pos:start="69:34" pos:end="69:42">e_machine</name></name></expr></argument>)</argument_list></call><operator pos:start="69:44" pos:end="69:44">)</operator></expr>)</condition> <block pos:start="69:47" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:24">

        <return pos:start="71:9" pos:end="71:24">return <expr pos:start="71:16" pos:end="71:23"><operator pos:start="71:16" pos:end="71:16">-</operator><name pos:start="71:17" pos:end="71:23">ENOEXEC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:72"><expr pos:start="77:5" pos:end="77:71"><name pos:start="77:5" pos:end="77:11"><name pos:start="77:5" pos:end="77:8">bprm</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:11">p</name></name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:71"><name pos:start="77:15" pos:end="77:30">copy_elf_strings</name><argument_list pos:start="77:31" pos:end="77:71">(<argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">1</literal></expr></argument>, <argument pos:start="77:35" pos:end="77:49"><expr pos:start="77:35" pos:end="77:49"><operator pos:start="77:35" pos:end="77:35">&amp;</operator><name pos:start="77:36" pos:end="77:49"><name pos:start="77:36" pos:end="77:39">bprm</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:49">filename</name></name></expr></argument>, <argument pos:start="77:52" pos:end="77:61"><expr pos:start="77:52" pos:end="77:61"><name pos:start="77:52" pos:end="77:61"><name pos:start="77:52" pos:end="77:55">bprm</name><operator pos:start="77:56" pos:end="77:57">-&gt;</operator><name pos:start="77:58" pos:end="77:61">page</name></name></expr></argument>, <argument pos:start="77:64" pos:end="77:70"><expr pos:start="77:64" pos:end="77:70"><name pos:start="77:64" pos:end="77:70"><name pos:start="77:64" pos:end="77:67">bprm</name><operator pos:start="77:68" pos:end="77:69">-&gt;</operator><name pos:start="77:70" pos:end="77:70">p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:73"><expr pos:start="79:5" pos:end="79:72"><name pos:start="79:5" pos:end="79:11"><name pos:start="79:5" pos:end="79:8">bprm</name><operator pos:start="79:9" pos:end="79:10">-&gt;</operator><name pos:start="79:11" pos:end="79:11">p</name></name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:72"><name pos:start="79:15" pos:end="79:30">copy_elf_strings</name><argument_list pos:start="79:31" pos:end="79:72">(<argument pos:start="79:32" pos:end="79:41"><expr pos:start="79:32" pos:end="79:41"><name pos:start="79:32" pos:end="79:41"><name pos:start="79:32" pos:end="79:35">bprm</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:41">envc</name></name></expr></argument>,<argument pos:start="79:43" pos:end="79:52"><expr pos:start="79:43" pos:end="79:52"><name pos:start="79:43" pos:end="79:52"><name pos:start="79:43" pos:end="79:46">bprm</name><operator pos:start="79:47" pos:end="79:48">-&gt;</operator><name pos:start="79:49" pos:end="79:52">envp</name></name></expr></argument>,<argument pos:start="79:54" pos:end="79:63"><expr pos:start="79:54" pos:end="79:63"><name pos:start="79:54" pos:end="79:63"><name pos:start="79:54" pos:end="79:57">bprm</name><operator pos:start="79:58" pos:end="79:59">-&gt;</operator><name pos:start="79:60" pos:end="79:63">page</name></name></expr></argument>,<argument pos:start="79:65" pos:end="79:71"><expr pos:start="79:65" pos:end="79:71"><name pos:start="79:65" pos:end="79:71"><name pos:start="79:65" pos:end="79:68">bprm</name><operator pos:start="79:69" pos:end="79:70">-&gt;</operator><name pos:start="79:71" pos:end="79:71">p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:73"><expr pos:start="81:5" pos:end="81:72"><name pos:start="81:5" pos:end="81:11"><name pos:start="81:5" pos:end="81:8">bprm</name><operator pos:start="81:9" pos:end="81:10">-&gt;</operator><name pos:start="81:11" pos:end="81:11">p</name></name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:72"><name pos:start="81:15" pos:end="81:30">copy_elf_strings</name><argument_list pos:start="81:31" pos:end="81:72">(<argument pos:start="81:32" pos:end="81:41"><expr pos:start="81:32" pos:end="81:41"><name pos:start="81:32" pos:end="81:41"><name pos:start="81:32" pos:end="81:35">bprm</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:41">argc</name></name></expr></argument>,<argument pos:start="81:43" pos:end="81:52"><expr pos:start="81:43" pos:end="81:52"><name pos:start="81:43" pos:end="81:52"><name pos:start="81:43" pos:end="81:46">bprm</name><operator pos:start="81:47" pos:end="81:48">-&gt;</operator><name pos:start="81:49" pos:end="81:52">argv</name></name></expr></argument>,<argument pos:start="81:54" pos:end="81:63"><expr pos:start="81:54" pos:end="81:63"><name pos:start="81:54" pos:end="81:63"><name pos:start="81:54" pos:end="81:57">bprm</name><operator pos:start="81:58" pos:end="81:59">-&gt;</operator><name pos:start="81:60" pos:end="81:63">page</name></name></expr></argument>,<argument pos:start="81:65" pos:end="81:71"><expr pos:start="81:65" pos:end="81:71"><name pos:start="81:65" pos:end="81:71"><name pos:start="81:65" pos:end="81:68">bprm</name><operator pos:start="81:69" pos:end="81:70">-&gt;</operator><name pos:start="81:71" pos:end="81:71">p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:17">(<expr pos:start="83:9" pos:end="83:16"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:16"><name pos:start="83:10" pos:end="83:13">bprm</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:16">p</name></name></expr>)</condition> <block pos:start="83:19" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:24">

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:14">retval</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <operator pos:start="85:18" pos:end="85:18">-</operator><name pos:start="85:19" pos:end="85:23">E2BIG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:51">/* Now read in all of the header information */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:78"><expr pos:start="93:5" pos:end="93:77"><name pos:start="93:5" pos:end="93:14">elf_phdata</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <operator pos:start="93:18" pos:end="93:18">(</operator>struct <name pos:start="93:26" pos:end="93:33">elf_phdr</name> <operator pos:start="93:35" pos:end="93:35">*</operator><operator pos:start="93:36" pos:end="93:36">)</operator><call pos:start="93:37" pos:end="93:77"><name pos:start="93:37" pos:end="93:42">malloc</name><argument_list pos:start="93:43" pos:end="93:77">(<argument pos:start="93:44" pos:end="93:76"><expr pos:start="93:44" pos:end="93:76"><name pos:start="93:44" pos:end="93:61"><name pos:start="93:44" pos:end="93:49">elf_ex</name><operator pos:start="93:50" pos:end="93:50">.</operator><name pos:start="93:51" pos:end="93:61">e_phentsize</name></name><operator pos:start="93:62" pos:end="93:62">*</operator><name pos:start="93:63" pos:end="93:76"><name pos:start="93:63" pos:end="93:68">elf_ex</name><operator pos:start="93:69" pos:end="93:69">.</operator><name pos:start="93:70" pos:end="93:76">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:27">(<expr pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:18">elf_phdata</name> <operator pos:start="95:20" pos:end="95:21">==</operator> <name pos:start="95:23" pos:end="95:26">NULL</name></expr>)</condition> <block pos:start="95:29" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:23">

        <return pos:start="97:9" pos:end="97:23">return <expr pos:start="97:16" pos:end="97:22"><operator pos:start="97:16" pos:end="97:16">-</operator><name pos:start="97:17" pos:end="97:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:49"><expr pos:start="103:5" pos:end="103:48"><name pos:start="103:5" pos:end="103:5">i</name> <operator pos:start="103:7" pos:end="103:7">=</operator> <name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:14">elf_ex</name><operator pos:start="103:15" pos:end="103:15">.</operator><name pos:start="103:16" pos:end="103:22">e_phnum</name></name> <operator pos:start="103:24" pos:end="103:24">*</operator> <sizeof pos:start="103:26" pos:end="103:48">sizeof<argument_list pos:start="103:32" pos:end="103:48">(<argument pos:start="103:33" pos:end="103:47"><expr pos:start="103:33" pos:end="103:47">struct <name pos:start="103:40" pos:end="103:47">elf_phdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:44">(<expr pos:start="105:9" pos:end="105:43"><name pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:14">elf_ex</name><operator pos:start="105:15" pos:end="105:15">.</operator><name pos:start="105:16" pos:end="105:22">e_phoff</name></name> <operator pos:start="105:24" pos:end="105:24">+</operator> <name pos:start="105:26" pos:end="105:26">i</name> <operator pos:start="105:28" pos:end="105:29">&lt;=</operator> <name pos:start="105:31" pos:end="105:43">BPRM_BUF_SIZE</name></expr>)</condition> <block pos:start="105:46" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:58">

        <expr_stmt pos:start="107:9" pos:end="107:58"><expr pos:start="107:9" pos:end="107:57"><call pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:14">memcpy</name><argument_list pos:start="107:15" pos:end="107:57">(<argument pos:start="107:16" pos:end="107:25"><expr pos:start="107:16" pos:end="107:25"><name pos:start="107:16" pos:end="107:25">elf_phdata</name></expr></argument>, <argument pos:start="107:28" pos:end="107:53"><expr pos:start="107:28" pos:end="107:53"><name pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:31">bprm</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:36">buf</name></name> <operator pos:start="107:38" pos:end="107:38">+</operator> <name pos:start="107:40" pos:end="107:53"><name pos:start="107:40" pos:end="107:45">elf_ex</name><operator pos:start="107:46" pos:end="107:46">.</operator><name pos:start="107:47" pos:end="107:53">e_phoff</name></name></expr></argument>, <argument pos:start="107:56" pos:end="107:56"><expr pos:start="107:56" pos:end="107:56"><name pos:start="107:56" pos:end="107:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="121:5">else <block pos:start="109:12" pos:end="121:5">{<block_content pos:start="111:9" pos:end="119:9">

        <expr_stmt pos:start="111:9" pos:end="111:73"><expr pos:start="111:9" pos:end="111:72"><name pos:start="111:9" pos:end="111:14">retval</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:72"><name pos:start="111:18" pos:end="111:22">pread</name><argument_list pos:start="111:23" pos:end="111:72">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:27">bprm</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:31">fd</name></name></expr></argument>, <argument pos:start="111:34" pos:end="111:52"><expr pos:start="111:34" pos:end="111:52"><operator pos:start="111:34" pos:end="111:34">(</operator><name pos:start="111:35" pos:end="111:38">char</name> <operator pos:start="111:40" pos:end="111:40">*</operator><operator pos:start="111:41" pos:end="111:41">)</operator> <name pos:start="111:43" pos:end="111:52">elf_phdata</name></expr></argument>, <argument pos:start="111:55" pos:end="111:55"><expr pos:start="111:55" pos:end="111:55"><name pos:start="111:55" pos:end="111:55">i</name></expr></argument>, <argument pos:start="111:58" pos:end="111:71"><expr pos:start="111:58" pos:end="111:71"><name pos:start="111:58" pos:end="111:71"><name pos:start="111:58" pos:end="111:63">elf_ex</name><operator pos:start="111:64" pos:end="111:64">.</operator><name pos:start="111:65" pos:end="111:71">e_phoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:24">(<expr pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:18">retval</name> <operator pos:start="113:20" pos:end="113:21">!=</operator> <name pos:start="113:23" pos:end="113:23">i</name></expr>)</condition> <block pos:start="113:26" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:21">

            <expr_stmt pos:start="115:13" pos:end="115:38"><expr pos:start="115:13" pos:end="115:37"><call pos:start="115:13" pos:end="115:37"><name pos:start="115:13" pos:end="115:18">perror</name><argument_list pos:start="115:19" pos:end="115:37">(<argument pos:start="115:20" pos:end="115:36"><expr pos:start="115:20" pos:end="115:36"><literal type="string" pos:start="115:20" pos:end="115:36">"load_elf_binary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:21"><expr pos:start="117:13" pos:end="117:20"><call pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:16">exit</name><argument_list pos:start="117:17" pos:end="117:20">(<argument pos:start="117:18" pos:end="117:19"><expr pos:start="117:18" pos:end="117:19"><operator pos:start="117:18" pos:end="117:18">-</operator><literal type="number" pos:start="117:19" pos:end="117:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:43"><expr pos:start="123:5" pos:end="123:42"><call pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:14">bswap_phdr</name><argument_list pos:start="123:15" pos:end="123:42">(<argument pos:start="123:16" pos:end="123:25"><expr pos:start="123:16" pos:end="123:25"><name pos:start="123:16" pos:end="123:25">elf_phdata</name></expr></argument>, <argument pos:start="123:28" pos:end="123:41"><expr pos:start="123:28" pos:end="123:41"><name pos:start="123:28" pos:end="123:41"><name pos:start="123:28" pos:end="123:33">elf_ex</name><operator pos:start="123:34" pos:end="123:34">.</operator><name pos:start="123:35" pos:end="123:41">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:16"><expr pos:start="127:5" pos:end="127:15"><name pos:start="127:5" pos:end="127:11">elf_brk</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <literal type="number" pos:start="127:15" pos:end="127:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:34"><expr pos:start="129:5" pos:end="129:33"><name pos:start="129:5" pos:end="129:13">elf_stack</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <operator pos:start="129:17" pos:end="129:17">~</operator><operator pos:start="129:18" pos:end="129:18">(</operator><operator pos:start="129:19" pos:end="129:19">(</operator><name pos:start="129:20" pos:end="129:28">abi_ulong</name><operator pos:start="129:29" pos:end="129:29">)</operator><literal type="number" pos:start="129:30" pos:end="129:32">0UL</literal><operator pos:start="129:33" pos:end="129:33">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:19">elf_interpreter</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:35"><expr pos:start="133:5" pos:end="133:34"><name pos:start="133:5" pos:end="133:14">start_code</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <operator pos:start="133:18" pos:end="133:18">~</operator><operator pos:start="133:19" pos:end="133:19">(</operator><operator pos:start="133:20" pos:end="133:20">(</operator><name pos:start="133:21" pos:end="133:29">abi_ulong</name><operator pos:start="133:30" pos:end="133:30">)</operator><literal type="number" pos:start="133:31" pos:end="133:33">0UL</literal><operator pos:start="133:34" pos:end="133:34">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:17"><expr pos:start="135:5" pos:end="135:16"><name pos:start="135:5" pos:end="135:12">end_code</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <literal type="number" pos:start="135:16" pos:end="135:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:14">start_data</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:17"><expr pos:start="139:5" pos:end="139:16"><name pos:start="139:5" pos:end="139:12">end_data</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <literal type="number" pos:start="139:16" pos:end="139:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:25"><expr pos:start="141:5" pos:end="141:24"><name pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:13">interp_ex</name><operator pos:start="141:14" pos:end="141:14">.</operator><name pos:start="141:15" pos:end="141:20">a_info</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <literal type="number" pos:start="141:24" pos:end="141:24">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:26"><expr pos:start="145:5" pos:end="145:25"><name pos:start="145:5" pos:end="145:12">elf_ppnt</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <name pos:start="145:16" pos:end="145:25">elf_phdata</name></expr>;</expr_stmt>

    <for pos:start="147:5" pos:end="279:5">for<control pos:start="147:8" pos:end="147:36">(<init pos:start="147:9" pos:end="147:12"><expr pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:9">i</name><operator pos:start="147:10" pos:end="147:10">=</operator><literal type="number" pos:start="147:11" pos:end="147:11">0</literal></expr>;</init><condition pos:start="147:13" pos:end="147:31"><expr pos:start="147:13" pos:end="147:30"><name pos:start="147:13" pos:end="147:13">i</name> <operator pos:start="147:15" pos:end="147:15">&lt;</operator> <name pos:start="147:17" pos:end="147:30"><name pos:start="147:17" pos:end="147:22">elf_ex</name><operator pos:start="147:23" pos:end="147:23">.</operator><name pos:start="147:24" pos:end="147:30">e_phnum</name></name></expr>;</condition> <incr pos:start="147:33" pos:end="147:35"><expr pos:start="147:33" pos:end="147:35"><name pos:start="147:33" pos:end="147:33">i</name><operator pos:start="147:34" pos:end="147:35">++</operator></expr></incr>)</control> <block pos:start="147:38" pos:end="279:5">{<block_content pos:start="149:9" pos:end="277:19">

        <if_stmt pos:start="149:9" pos:end="275:9"><if pos:start="149:9" pos:end="275:9">if <condition pos:start="149:12" pos:end="149:42">(<expr pos:start="149:13" pos:end="149:41"><name pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:20">elf_ppnt</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:28">p_type</name></name> <operator pos:start="149:30" pos:end="149:31">==</operator> <name pos:start="149:33" pos:end="149:41">PT_INTERP</name></expr>)</condition> <block pos:start="149:44" pos:end="275:9">{<block_content pos:start="151:13" pos:end="273:59">

            <if_stmt pos:start="151:13" pos:end="163:13"><if pos:start="151:13" pos:end="163:13">if <condition pos:start="151:16" pos:end="151:42">( <expr pos:start="151:18" pos:end="151:40"><name pos:start="151:18" pos:end="151:32">elf_interpreter</name> <operator pos:start="151:34" pos:end="151:35">!=</operator> <name pos:start="151:37" pos:end="151:40">NULL</name></expr> )</condition>

            <block pos:start="153:13" pos:end="163:13">{<block_content pos:start="155:17" pos:end="161:31">

                <expr_stmt pos:start="155:17" pos:end="155:34"><expr pos:start="155:17" pos:end="155:33"><call pos:start="155:17" pos:end="155:33"><name pos:start="155:17" pos:end="155:20">free</name> <argument_list pos:start="155:22" pos:end="155:33">(<argument pos:start="155:23" pos:end="155:32"><expr pos:start="155:23" pos:end="155:32"><name pos:start="155:23" pos:end="155:32">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:38"><expr pos:start="157:17" pos:end="157:37"><call pos:start="157:17" pos:end="157:37"><name pos:start="157:17" pos:end="157:20">free</name><argument_list pos:start="157:21" pos:end="157:37">(<argument pos:start="157:22" pos:end="157:36"><expr pos:start="157:22" pos:end="157:36"><name pos:start="157:22" pos:end="157:36">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:32"><expr pos:start="159:17" pos:end="159:31"><call pos:start="159:17" pos:end="159:31"><name pos:start="159:17" pos:end="159:21">close</name><argument_list pos:start="159:22" pos:end="159:31">(<argument pos:start="159:23" pos:end="159:30"><expr pos:start="159:23" pos:end="159:30"><name pos:start="159:23" pos:end="159:30"><name pos:start="159:23" pos:end="159:26">bprm</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:30">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="161:17" pos:end="161:31">return <expr pos:start="161:24" pos:end="161:30"><operator pos:start="161:24" pos:end="161:24">-</operator><name pos:start="161:25" pos:end="161:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="167:13" pos:end="173:15">/* This is the program interpreter used for

             * shared libraries - for now assume that this

             * is an a.out format binary

             */</comment>



            <expr_stmt pos:start="177:13" pos:end="177:65"><expr pos:start="177:13" pos:end="177:64"><name pos:start="177:13" pos:end="177:27">elf_interpreter</name> <operator pos:start="177:29" pos:end="177:29">=</operator> <operator pos:start="177:31" pos:end="177:31">(</operator><name pos:start="177:32" pos:end="177:35">char</name> <operator pos:start="177:37" pos:end="177:37">*</operator><operator pos:start="177:38" pos:end="177:38">)</operator><call pos:start="177:39" pos:end="177:64"><name pos:start="177:39" pos:end="177:44">malloc</name><argument_list pos:start="177:45" pos:end="177:64">(<argument pos:start="177:46" pos:end="177:63"><expr pos:start="177:46" pos:end="177:63"><name pos:start="177:46" pos:end="177:63"><name pos:start="177:46" pos:end="177:53">elf_ppnt</name><operator pos:start="177:54" pos:end="177:55">-&gt;</operator><name pos:start="177:56" pos:end="177:63">p_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="181:13" pos:end="189:13"><if pos:start="181:13" pos:end="189:13">if <condition pos:start="181:16" pos:end="181:40">(<expr pos:start="181:17" pos:end="181:39"><name pos:start="181:17" pos:end="181:31">elf_interpreter</name> <operator pos:start="181:33" pos:end="181:34">==</operator> <name pos:start="181:36" pos:end="181:39">NULL</name></expr>)</condition> <block pos:start="181:42" pos:end="189:13">{<block_content pos:start="183:17" pos:end="187:31">

                <expr_stmt pos:start="183:17" pos:end="183:34"><expr pos:start="183:17" pos:end="183:33"><call pos:start="183:17" pos:end="183:33"><name pos:start="183:17" pos:end="183:20">free</name> <argument_list pos:start="183:22" pos:end="183:33">(<argument pos:start="183:23" pos:end="183:32"><expr pos:start="183:23" pos:end="183:32"><name pos:start="183:23" pos:end="183:32">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:32"><expr pos:start="185:17" pos:end="185:31"><call pos:start="185:17" pos:end="185:31"><name pos:start="185:17" pos:end="185:21">close</name><argument_list pos:start="185:22" pos:end="185:31">(<argument pos:start="185:23" pos:end="185:30"><expr pos:start="185:23" pos:end="185:30"><name pos:start="185:23" pos:end="185:30"><name pos:start="185:23" pos:end="185:26">bprm</name><operator pos:start="185:27" pos:end="185:28">-&gt;</operator><name pos:start="185:29" pos:end="185:30">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="187:17" pos:end="187:31">return <expr pos:start="187:24" pos:end="187:30"><operator pos:start="187:24" pos:end="187:24">-</operator><name pos:start="187:25" pos:end="187:30">ENOMEM</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="193:13" pos:end="213:13"><if pos:start="193:13" pos:end="199:13">if <condition pos:start="193:16" pos:end="193:73">(<expr pos:start="193:17" pos:end="193:72"><name pos:start="193:17" pos:end="193:34"><name pos:start="193:17" pos:end="193:24">elf_ppnt</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:34">p_offset</name></name> <operator pos:start="193:36" pos:end="193:36">+</operator> <name pos:start="193:38" pos:end="193:55"><name pos:start="193:38" pos:end="193:45">elf_ppnt</name><operator pos:start="193:46" pos:end="193:47">-&gt;</operator><name pos:start="193:48" pos:end="193:55">p_filesz</name></name> <operator pos:start="193:57" pos:end="193:58">&lt;=</operator> <name pos:start="193:60" pos:end="193:72">BPRM_BUF_SIZE</name></expr>)</condition> <block pos:start="193:75" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:43">

                <expr_stmt pos:start="195:17" pos:end="197:43"><expr pos:start="195:17" pos:end="197:42"><call pos:start="195:17" pos:end="197:42"><name pos:start="195:17" pos:end="195:22">memcpy</name><argument_list pos:start="195:23" pos:end="197:42">(<argument pos:start="195:24" pos:end="195:38"><expr pos:start="195:24" pos:end="195:38"><name pos:start="195:24" pos:end="195:38">elf_interpreter</name></expr></argument>, <argument pos:start="195:41" pos:end="195:70"><expr pos:start="195:41" pos:end="195:70"><name pos:start="195:41" pos:end="195:49"><name pos:start="195:41" pos:end="195:44">bprm</name><operator pos:start="195:45" pos:end="195:46">-&gt;</operator><name pos:start="195:47" pos:end="195:49">buf</name></name> <operator pos:start="195:51" pos:end="195:51">+</operator> <name pos:start="195:53" pos:end="195:70"><name pos:start="195:53" pos:end="195:60">elf_ppnt</name><operator pos:start="195:61" pos:end="195:62">-&gt;</operator><name pos:start="195:63" pos:end="195:70">p_offset</name></name></expr></argument>,

                       <argument pos:start="197:24" pos:end="197:41"><expr pos:start="197:24" pos:end="197:41"><name pos:start="197:24" pos:end="197:41"><name pos:start="197:24" pos:end="197:31">elf_ppnt</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:41">p_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="199:15" pos:end="213:13">else <block pos:start="199:20" pos:end="213:13">{<block_content pos:start="201:17" pos:end="211:17">

                <expr_stmt pos:start="201:17" pos:end="203:51"><expr pos:start="201:17" pos:end="203:50"><name pos:start="201:17" pos:end="201:22">retval</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <call pos:start="201:26" pos:end="203:50"><name pos:start="201:26" pos:end="201:30">pread</name><argument_list pos:start="201:31" pos:end="203:50">(<argument pos:start="201:32" pos:end="201:39"><expr pos:start="201:32" pos:end="201:39"><name pos:start="201:32" pos:end="201:39"><name pos:start="201:32" pos:end="201:35">bprm</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:39">fd</name></name></expr></argument>, <argument pos:start="201:42" pos:end="201:56"><expr pos:start="201:42" pos:end="201:56"><name pos:start="201:42" pos:end="201:56">elf_interpreter</name></expr></argument>, <argument pos:start="201:59" pos:end="201:76"><expr pos:start="201:59" pos:end="201:76"><name pos:start="201:59" pos:end="201:76"><name pos:start="201:59" pos:end="201:66">elf_ppnt</name><operator pos:start="201:67" pos:end="201:68">-&gt;</operator><name pos:start="201:69" pos:end="201:76">p_filesz</name></name></expr></argument>,

                               <argument pos:start="203:32" pos:end="203:49"><expr pos:start="203:32" pos:end="203:49"><name pos:start="203:32" pos:end="203:49"><name pos:start="203:32" pos:end="203:39">elf_ppnt</name><operator pos:start="203:40" pos:end="203:41">-&gt;</operator><name pos:start="203:42" pos:end="203:49">p_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="205:17" pos:end="211:17"><if pos:start="205:17" pos:end="211:17">if <condition pos:start="205:20" pos:end="205:49">(<expr pos:start="205:21" pos:end="205:48"><name pos:start="205:21" pos:end="205:26">retval</name> <operator pos:start="205:28" pos:end="205:29">!=</operator> <name pos:start="205:31" pos:end="205:48"><name pos:start="205:31" pos:end="205:38">elf_ppnt</name><operator pos:start="205:39" pos:end="205:40">-&gt;</operator><name pos:start="205:41" pos:end="205:48">p_filesz</name></name></expr>)</condition> <block pos:start="205:51" pos:end="211:17">{<block_content pos:start="207:21" pos:end="209:29">

                    <expr_stmt pos:start="207:21" pos:end="207:47"><expr pos:start="207:21" pos:end="207:46"><call pos:start="207:21" pos:end="207:46"><name pos:start="207:21" pos:end="207:26">perror</name><argument_list pos:start="207:27" pos:end="207:46">(<argument pos:start="207:28" pos:end="207:45"><expr pos:start="207:28" pos:end="207:45"><literal type="string" pos:start="207:28" pos:end="207:45">"load_elf_binary2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="209:21" pos:end="209:29"><expr pos:start="209:21" pos:end="209:28"><call pos:start="209:21" pos:end="209:28"><name pos:start="209:21" pos:end="209:24">exit</name><argument_list pos:start="209:25" pos:end="209:28">(<argument pos:start="209:26" pos:end="209:27"><expr pos:start="209:26" pos:end="209:27"><operator pos:start="209:26" pos:end="209:26">-</operator><literal type="number" pos:start="209:27" pos:end="209:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="217:13" pos:end="221:39">/* If the program interpreter is one of these two,

               then assume an iBCS2 image. Otherwise assume

               a native linux image. */</comment>



            <comment type="block" pos:start="225:13" pos:end="225:61">/* JRP - Need to add X86 lib dir stuff here... */</comment>



            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="231:64">(<expr pos:start="229:17" pos:end="231:63"><call pos:start="229:17" pos:end="229:60"><name pos:start="229:17" pos:end="229:22">strcmp</name><argument_list pos:start="229:23" pos:end="229:60">(<argument pos:start="229:24" pos:end="229:38"><expr pos:start="229:24" pos:end="229:38"><name pos:start="229:24" pos:end="229:38">elf_interpreter</name></expr></argument>,<argument pos:start="229:40" pos:end="229:59"><expr pos:start="229:40" pos:end="229:59"><literal type="string" pos:start="229:40" pos:end="229:59">"/usr/lib/libc.so.1"</literal></expr></argument>)</argument_list></call> <operator pos:start="229:62" pos:end="229:63">==</operator> <literal type="number" pos:start="229:65" pos:end="229:65">0</literal> <operator pos:start="229:67" pos:end="229:68">||</operator>

                <call pos:start="231:17" pos:end="231:58"><name pos:start="231:17" pos:end="231:22">strcmp</name><argument_list pos:start="231:23" pos:end="231:58">(<argument pos:start="231:24" pos:end="231:38"><expr pos:start="231:24" pos:end="231:38"><name pos:start="231:24" pos:end="231:38">elf_interpreter</name></expr></argument>,<argument pos:start="231:40" pos:end="231:57"><expr pos:start="231:40" pos:end="231:57"><literal type="string" pos:start="231:40" pos:end="231:57">"/usr/lib/ld.so.1"</literal></expr></argument>)</argument_list></call> <operator pos:start="231:60" pos:end="231:61">==</operator> <literal type="number" pos:start="231:63" pos:end="231:63">0</literal></expr>)</condition> <block pos:start="231:66" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:38">

                <expr_stmt pos:start="233:17" pos:end="233:38"><expr pos:start="233:17" pos:end="233:37"><name pos:start="233:17" pos:end="233:33">ibcs2_interpreter</name> <operator pos:start="233:35" pos:end="233:35">=</operator> <literal type="number" pos:start="233:37" pos:end="233:37">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="239:13" pos:end="239:59"><expr pos:start="239:13" pos:end="239:58"><name pos:start="239:13" pos:end="239:18">retval</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <call pos:start="239:22" pos:end="239:58"><name pos:start="239:22" pos:end="239:25">open</name><argument_list pos:start="239:26" pos:end="239:58">(<argument pos:start="239:27" pos:end="239:47"><expr pos:start="239:27" pos:end="239:47"><call pos:start="239:27" pos:end="239:47"><name pos:start="239:27" pos:end="239:30">path</name><argument_list pos:start="239:31" pos:end="239:47">(<argument pos:start="239:32" pos:end="239:46"><expr pos:start="239:32" pos:end="239:46"><name pos:start="239:32" pos:end="239:46">elf_interpreter</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="239:50" pos:end="239:57"><expr pos:start="239:50" pos:end="239:57"><name pos:start="239:50" pos:end="239:57">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="241:13" pos:end="247:13"><if pos:start="241:13" pos:end="247:13">if <condition pos:start="241:16" pos:end="241:27">(<expr pos:start="241:17" pos:end="241:26"><name pos:start="241:17" pos:end="241:22">retval</name> <operator pos:start="241:24" pos:end="241:24">&lt;</operator> <literal type="number" pos:start="241:26" pos:end="241:26">0</literal></expr>)</condition> <block pos:start="241:29" pos:end="247:13">{<block_content pos:start="243:17" pos:end="245:25">

                <expr_stmt pos:start="243:17" pos:end="243:40"><expr pos:start="243:17" pos:end="243:39"><call pos:start="243:17" pos:end="243:39"><name pos:start="243:17" pos:end="243:22">perror</name><argument_list pos:start="243:23" pos:end="243:39">(<argument pos:start="243:24" pos:end="243:38"><expr pos:start="243:24" pos:end="243:38"><name pos:start="243:24" pos:end="243:38">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:25"><expr pos:start="245:17" pos:end="245:24"><call pos:start="245:17" pos:end="245:24"><name pos:start="245:17" pos:end="245:20">exit</name><argument_list pos:start="245:21" pos:end="245:24">(<argument pos:start="245:22" pos:end="245:23"><expr pos:start="245:22" pos:end="245:23"><operator pos:start="245:22" pos:end="245:22">-</operator><literal type="number" pos:start="245:23" pos:end="245:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:36"><expr pos:start="249:13" pos:end="249:35"><name pos:start="249:13" pos:end="249:26">interpreter_fd</name> <operator pos:start="249:28" pos:end="249:28">=</operator> <name pos:start="249:30" pos:end="249:35">retval</name></expr>;</expr_stmt>



            <expr_stmt pos:start="253:13" pos:end="253:68"><expr pos:start="253:13" pos:end="253:67"><name pos:start="253:13" pos:end="253:18">retval</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <call pos:start="253:22" pos:end="253:67"><name pos:start="253:22" pos:end="253:25">read</name><argument_list pos:start="253:26" pos:end="253:67">(<argument pos:start="253:27" pos:end="253:40"><expr pos:start="253:27" pos:end="253:40"><name pos:start="253:27" pos:end="253:40">interpreter_fd</name></expr></argument>, <argument pos:start="253:43" pos:end="253:51"><expr pos:start="253:43" pos:end="253:51"><name pos:start="253:43" pos:end="253:51"><name pos:start="253:43" pos:end="253:46">bprm</name><operator pos:start="253:47" pos:end="253:48">-&gt;</operator><name pos:start="253:49" pos:end="253:51">buf</name></name></expr></argument>, <argument pos:start="253:54" pos:end="253:66"><expr pos:start="253:54" pos:end="253:66"><name pos:start="253:54" pos:end="253:66">BPRM_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="255:13" pos:end="261:13"><if pos:start="255:13" pos:end="261:13">if <condition pos:start="255:16" pos:end="255:27">(<expr pos:start="255:17" pos:end="255:26"><name pos:start="255:17" pos:end="255:22">retval</name> <operator pos:start="255:24" pos:end="255:24">&lt;</operator> <literal type="number" pos:start="255:26" pos:end="255:26">0</literal></expr>)</condition> <block pos:start="255:29" pos:end="261:13">{<block_content pos:start="257:17" pos:end="259:25">

                <expr_stmt pos:start="257:17" pos:end="257:43"><expr pos:start="257:17" pos:end="257:42"><call pos:start="257:17" pos:end="257:42"><name pos:start="257:17" pos:end="257:22">perror</name><argument_list pos:start="257:23" pos:end="257:42">(<argument pos:start="257:24" pos:end="257:41"><expr pos:start="257:24" pos:end="257:41"><literal type="string" pos:start="257:24" pos:end="257:41">"load_elf_binary3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:25"><expr pos:start="259:17" pos:end="259:24"><call pos:start="259:17" pos:end="259:24"><name pos:start="259:17" pos:end="259:20">exit</name><argument_list pos:start="259:21" pos:end="259:24">(<argument pos:start="259:22" pos:end="259:23"><expr pos:start="259:22" pos:end="259:23"><operator pos:start="259:22" pos:end="259:22">-</operator><literal type="number" pos:start="259:23" pos:end="259:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="263:13" pos:end="267:13"><if pos:start="263:13" pos:end="267:13">if <condition pos:start="263:16" pos:end="263:39">(<expr pos:start="263:17" pos:end="263:38"><name pos:start="263:17" pos:end="263:22">retval</name> <operator pos:start="263:24" pos:end="263:24">&lt;</operator> <name pos:start="263:26" pos:end="263:38">BPRM_BUF_SIZE</name></expr>)</condition> <block pos:start="263:41" pos:end="267:13">{<block_content pos:start="265:17" pos:end="265:61">

                <expr_stmt pos:start="265:17" pos:end="265:61"><expr pos:start="265:17" pos:end="265:60"><call pos:start="265:17" pos:end="265:60"><name pos:start="265:17" pos:end="265:22">memset</name><argument_list pos:start="265:23" pos:end="265:60">(<argument pos:start="265:24" pos:end="265:32"><expr pos:start="265:24" pos:end="265:32"><name pos:start="265:24" pos:end="265:32"><name pos:start="265:24" pos:end="265:27">bprm</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:32">buf</name></name></expr></argument>, <argument pos:start="265:35" pos:end="265:35"><expr pos:start="265:35" pos:end="265:35"><literal type="number" pos:start="265:35" pos:end="265:35">0</literal></expr></argument>, <argument pos:start="265:38" pos:end="265:59"><expr pos:start="265:38" pos:end="265:59"><name pos:start="265:38" pos:end="265:50">BPRM_BUF_SIZE</name> <operator pos:start="265:52" pos:end="265:52">-</operator> <name pos:start="265:54" pos:end="265:59">retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="271:13" pos:end="271:53"><expr pos:start="271:13" pos:end="271:52"><name pos:start="271:13" pos:end="271:21">interp_ex</name> <operator pos:start="271:23" pos:end="271:23">=</operator> <operator pos:start="271:25" pos:end="271:25">*</operator><operator pos:start="271:26" pos:end="271:26">(</operator><operator pos:start="271:27" pos:end="271:27">(</operator>struct <name pos:start="271:35" pos:end="271:38">exec</name> <operator pos:start="271:40" pos:end="271:40">*</operator><operator pos:start="271:41" pos:end="271:41">)</operator> <name pos:start="271:43" pos:end="271:51"><name pos:start="271:43" pos:end="271:46">bprm</name><operator pos:start="271:47" pos:end="271:48">-&gt;</operator><name pos:start="271:49" pos:end="271:51">buf</name></name><operator pos:start="271:52" pos:end="271:52">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="271:55" pos:end="271:76">/* aout exec-header */</comment>

            <expr_stmt pos:start="273:13" pos:end="273:59"><expr pos:start="273:13" pos:end="273:58"><name pos:start="273:13" pos:end="273:25">interp_elf_ex</name> <operator pos:start="273:27" pos:end="273:27">=</operator> <operator pos:start="273:29" pos:end="273:29">*</operator><operator pos:start="273:30" pos:end="273:30">(</operator><operator pos:start="273:31" pos:end="273:31">(</operator>struct <name pos:start="273:39" pos:end="273:44">elfhdr</name> <operator pos:start="273:46" pos:end="273:46">*</operator><operator pos:start="273:47" pos:end="273:47">)</operator> <name pos:start="273:49" pos:end="273:57"><name pos:start="273:49" pos:end="273:52">bprm</name><operator pos:start="273:53" pos:end="273:54">-&gt;</operator><name pos:start="273:55" pos:end="273:57">buf</name></name><operator pos:start="273:58" pos:end="273:58">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="273:61" pos:end="273:81">/* elf exec-header */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:19"><expr pos:start="277:9" pos:end="277:18"><name pos:start="277:9" pos:end="277:16">elf_ppnt</name><operator pos:start="277:17" pos:end="277:18">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="283:5" pos:end="283:60">/* Some simple consistency checks for the interpreter */</comment>

    <if_stmt pos:start="285:5" pos:end="325:5"><if pos:start="285:5" pos:end="325:5">if <condition pos:start="285:8" pos:end="285:24">(<expr pos:start="285:9" pos:end="285:23"><name pos:start="285:9" pos:end="285:23">elf_interpreter</name></expr>)</condition><block pos:start="285:25" pos:end="325:5">{<block_content pos:start="287:9" pos:end="323:9">

        <expr_stmt pos:start="287:9" pos:end="287:62"><expr pos:start="287:9" pos:end="287:61"><name pos:start="287:9" pos:end="287:24">interpreter_type</name> <operator pos:start="287:26" pos:end="287:26">=</operator> <name pos:start="287:28" pos:end="287:42">INTERPRETER_ELF</name> <operator pos:start="287:44" pos:end="287:44">|</operator> <name pos:start="287:46" pos:end="287:61">INTERPRETER_AOUT</name></expr>;</expr_stmt>



        <comment type="block" pos:start="291:9" pos:end="291:55">/* Now figure out which format our binary is */</comment>

        <if_stmt pos:start="293:9" pos:end="299:9"><if pos:start="293:9" pos:end="299:9">if <condition pos:start="293:12" pos:end="295:43">(<expr pos:start="293:13" pos:end="295:42"><operator pos:start="293:13" pos:end="293:13">(</operator><call pos:start="293:14" pos:end="293:31"><name pos:start="293:14" pos:end="293:20">N_MAGIC</name><argument_list pos:start="293:21" pos:end="293:31">(<argument pos:start="293:22" pos:end="293:30"><expr pos:start="293:22" pos:end="293:30"><name pos:start="293:22" pos:end="293:30">interp_ex</name></expr></argument>)</argument_list></call> <operator pos:start="293:33" pos:end="293:34">!=</operator> <name pos:start="293:36" pos:end="293:41">OMAGIC</name><operator pos:start="293:42" pos:end="293:42">)</operator> <operator pos:start="293:44" pos:end="293:45">&amp;&amp;</operator> <operator pos:start="293:47" pos:end="293:47">(</operator><call pos:start="293:48" pos:end="293:65"><name pos:start="293:48" pos:end="293:54">N_MAGIC</name><argument_list pos:start="293:55" pos:end="293:65">(<argument pos:start="293:56" pos:end="293:64"><expr pos:start="293:56" pos:end="293:64"><name pos:start="293:56" pos:end="293:64">interp_ex</name></expr></argument>)</argument_list></call> <operator pos:start="293:67" pos:end="293:68">!=</operator> <name pos:start="293:70" pos:end="293:75">ZMAGIC</name><operator pos:start="293:76" pos:end="293:76">)</operator> <operator pos:start="293:78" pos:end="293:79">&amp;&amp;</operator>

            <operator pos:start="295:13" pos:end="295:13">(</operator><call pos:start="295:14" pos:end="295:31"><name pos:start="295:14" pos:end="295:20">N_MAGIC</name><argument_list pos:start="295:21" pos:end="295:31">(<argument pos:start="295:22" pos:end="295:30"><expr pos:start="295:22" pos:end="295:30"><name pos:start="295:22" pos:end="295:30">interp_ex</name></expr></argument>)</argument_list></call> <operator pos:start="295:33" pos:end="295:34">!=</operator> <name pos:start="295:36" pos:end="295:41">QMAGIC</name><operator pos:start="295:42" pos:end="295:42">)</operator></expr>)</condition> <block pos:start="295:45" pos:end="299:9">{<block_content pos:start="297:13" pos:end="297:47">

            <expr_stmt pos:start="297:13" pos:end="297:47"><expr pos:start="297:13" pos:end="297:46"><name pos:start="297:13" pos:end="297:28">interpreter_type</name> <operator pos:start="297:30" pos:end="297:30">=</operator> <name pos:start="297:32" pos:end="297:46">INTERPRETER_ELF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="305:69">(<expr pos:start="303:13" pos:end="305:68"><name pos:start="303:13" pos:end="303:36"><name pos:start="303:13" pos:end="303:25">interp_elf_ex</name><operator pos:start="303:26" pos:end="303:26">.</operator><name pos:start="303:27" pos:end="303:33">e_ident</name><index pos:start="303:34" pos:end="303:36">[<expr pos:start="303:35" pos:end="303:35"><literal type="number" pos:start="303:35" pos:end="303:35">0</literal></expr>]</index></name> <operator pos:start="303:38" pos:end="303:39">!=</operator> <literal type="number" pos:start="303:41" pos:end="303:44">0x7f</literal> <operator pos:start="303:46" pos:end="303:47">||</operator>

            <call pos:start="305:13" pos:end="305:63"><name pos:start="305:13" pos:end="305:19">strncmp</name><argument_list pos:start="305:20" pos:end="305:63">(<argument pos:start="305:21" pos:end="305:53"><expr pos:start="305:21" pos:end="305:53"><operator pos:start="305:21" pos:end="305:21">(</operator><name pos:start="305:22" pos:end="305:25">char</name> <operator pos:start="305:27" pos:end="305:27">*</operator><operator pos:start="305:28" pos:end="305:28">)</operator><operator pos:start="305:29" pos:end="305:29">&amp;</operator><name pos:start="305:30" pos:end="305:53"><name pos:start="305:30" pos:end="305:42">interp_elf_ex</name><operator pos:start="305:43" pos:end="305:43">.</operator><name pos:start="305:44" pos:end="305:50">e_ident</name><index pos:start="305:51" pos:end="305:53">[<expr pos:start="305:52" pos:end="305:52"><literal type="number" pos:start="305:52" pos:end="305:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="305:56" pos:end="305:60"><expr pos:start="305:56" pos:end="305:60"><literal type="string" pos:start="305:56" pos:end="305:60">"ELF"</literal></expr></argument>,<argument pos:start="305:62" pos:end="305:62"><expr pos:start="305:62" pos:end="305:62"><literal type="number" pos:start="305:62" pos:end="305:62">3</literal></expr></argument>)</argument_list></call> <operator pos:start="305:65" pos:end="305:66">!=</operator> <literal type="number" pos:start="305:68" pos:end="305:68">0</literal></expr>)</condition> <block pos:start="305:71" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:49">

            <expr_stmt pos:start="307:13" pos:end="307:49"><expr pos:start="307:13" pos:end="307:48"><name pos:start="307:13" pos:end="307:28">interpreter_type</name> <operator pos:start="307:30" pos:end="307:31">&amp;=</operator> <operator pos:start="307:33" pos:end="307:33">~</operator><name pos:start="307:34" pos:end="307:48">INTERPRETER_ELF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="313:9" pos:end="323:9"><if pos:start="313:9" pos:end="323:9">if <condition pos:start="313:12" pos:end="313:30">(<expr pos:start="313:13" pos:end="313:29"><operator pos:start="313:13" pos:end="313:13">!</operator><name pos:start="313:14" pos:end="313:29">interpreter_type</name></expr>)</condition> <block pos:start="313:32" pos:end="323:9">{<block_content pos:start="315:13" pos:end="321:28">

            <expr_stmt pos:start="315:13" pos:end="315:34"><expr pos:start="315:13" pos:end="315:33"><call pos:start="315:13" pos:end="315:33"><name pos:start="315:13" pos:end="315:16">free</name><argument_list pos:start="315:17" pos:end="315:33">(<argument pos:start="315:18" pos:end="315:32"><expr pos:start="315:18" pos:end="315:32"><name pos:start="315:18" pos:end="315:32">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:29"><expr pos:start="317:13" pos:end="317:28"><call pos:start="317:13" pos:end="317:28"><name pos:start="317:13" pos:end="317:16">free</name><argument_list pos:start="317:17" pos:end="317:28">(<argument pos:start="317:18" pos:end="317:27"><expr pos:start="317:18" pos:end="317:27"><name pos:start="317:18" pos:end="317:27">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:28"><expr pos:start="319:13" pos:end="319:27"><call pos:start="319:13" pos:end="319:27"><name pos:start="319:13" pos:end="319:17">close</name><argument_list pos:start="319:18" pos:end="319:27">(<argument pos:start="319:19" pos:end="319:26"><expr pos:start="319:19" pos:end="319:26"><name pos:start="319:19" pos:end="319:26"><name pos:start="319:19" pos:end="319:22">bprm</name><operator pos:start="319:23" pos:end="319:24">-&gt;</operator><name pos:start="319:25" pos:end="319:26">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="321:13" pos:end="321:28">return <expr pos:start="321:20" pos:end="321:27"><operator pos:start="321:20" pos:end="321:20">-</operator><name pos:start="321:21" pos:end="321:27">ELIBBAD</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="329:5" pos:end="331:39">/* OK, we are done with that, now set up the arg stuff,

       and then start this sucker up */</comment>



    <block pos:start="335:5" pos:end="375:5">{<block_content pos:start="337:9" pos:end="373:9">

        <decl_stmt pos:start="337:9" pos:end="337:24"><decl pos:start="337:9" pos:end="337:23"><type pos:start="337:9" pos:end="337:14"><name pos:start="337:9" pos:end="337:12">char</name> <modifier pos:start="337:14" pos:end="337:14">*</modifier></type> <name pos:start="337:16" pos:end="337:23">passed_p</name></decl>;</decl_stmt>



        <if_stmt pos:start="341:9" pos:end="357:9"><if pos:start="341:9" pos:end="357:9">if <condition pos:start="341:12" pos:end="341:49">(<expr pos:start="341:13" pos:end="341:48"><name pos:start="341:13" pos:end="341:28">interpreter_type</name> <operator pos:start="341:30" pos:end="341:31">==</operator> <name pos:start="341:33" pos:end="341:48">INTERPRETER_AOUT</name></expr>)</condition> <block pos:start="341:51" pos:end="357:9">{<block_content pos:start="343:13" pos:end="355:13">

            <expr_stmt pos:start="343:13" pos:end="343:75"><expr pos:start="343:13" pos:end="343:74"><call pos:start="343:13" pos:end="343:74"><name pos:start="343:13" pos:end="343:20">snprintf</name><argument_list pos:start="343:21" pos:end="343:74">(<argument pos:start="343:22" pos:end="343:34"><expr pos:start="343:22" pos:end="343:34"><name pos:start="343:22" pos:end="343:34">passed_fileno</name></expr></argument>, <argument pos:start="343:37" pos:end="343:57"><expr pos:start="343:37" pos:end="343:57"><sizeof pos:start="343:37" pos:end="343:57">sizeof<argument_list pos:start="343:43" pos:end="343:57">(<argument pos:start="343:44" pos:end="343:56"><expr pos:start="343:44" pos:end="343:56"><name pos:start="343:44" pos:end="343:56">passed_fileno</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="343:60" pos:end="343:63"><expr pos:start="343:60" pos:end="343:63"><literal type="string" pos:start="343:60" pos:end="343:63">"%d"</literal></expr></argument>, <argument pos:start="343:66" pos:end="343:73"><expr pos:start="343:66" pos:end="343:73"><name pos:start="343:66" pos:end="343:73"><name pos:start="343:66" pos:end="343:69">bprm</name><operator pos:start="343:70" pos:end="343:71">-&gt;</operator><name pos:start="343:72" pos:end="343:73">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:37"><expr pos:start="345:13" pos:end="345:36"><name pos:start="345:13" pos:end="345:20">passed_p</name> <operator pos:start="345:22" pos:end="345:22">=</operator> <name pos:start="345:24" pos:end="345:36">passed_fileno</name></expr>;</expr_stmt>



            <if_stmt pos:start="349:13" pos:end="355:13"><if pos:start="349:13" pos:end="355:13">if <condition pos:start="349:16" pos:end="349:32">(<expr pos:start="349:17" pos:end="349:31"><name pos:start="349:17" pos:end="349:31">elf_interpreter</name></expr>)</condition> <block pos:start="349:34" pos:end="355:13">{<block_content pos:start="351:17" pos:end="353:29">

                <expr_stmt pos:start="351:17" pos:end="351:75"><expr pos:start="351:17" pos:end="351:74"><name pos:start="351:17" pos:end="351:23"><name pos:start="351:17" pos:end="351:20">bprm</name><operator pos:start="351:21" pos:end="351:22">-&gt;</operator><name pos:start="351:23" pos:end="351:23">p</name></name> <operator pos:start="351:25" pos:end="351:25">=</operator> <call pos:start="351:27" pos:end="351:74"><name pos:start="351:27" pos:end="351:42">copy_elf_strings</name><argument_list pos:start="351:43" pos:end="351:74">(<argument pos:start="351:44" pos:end="351:44"><expr pos:start="351:44" pos:end="351:44"><literal type="number" pos:start="351:44" pos:end="351:44">1</literal></expr></argument>,<argument pos:start="351:46" pos:end="351:54"><expr pos:start="351:46" pos:end="351:54"><operator pos:start="351:46" pos:end="351:46">&amp;</operator><name pos:start="351:47" pos:end="351:54">passed_p</name></expr></argument>,<argument pos:start="351:56" pos:end="351:65"><expr pos:start="351:56" pos:end="351:65"><name pos:start="351:56" pos:end="351:65"><name pos:start="351:56" pos:end="351:59">bprm</name><operator pos:start="351:60" pos:end="351:61">-&gt;</operator><name pos:start="351:62" pos:end="351:65">page</name></name></expr></argument>,<argument pos:start="351:67" pos:end="351:73"><expr pos:start="351:67" pos:end="351:73"><name pos:start="351:67" pos:end="351:73"><name pos:start="351:67" pos:end="351:70">bprm</name><operator pos:start="351:71" pos:end="351:72">-&gt;</operator><name pos:start="351:73" pos:end="351:73">p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:29"><expr pos:start="353:17" pos:end="353:28"><name pos:start="353:17" pos:end="353:26"><name pos:start="353:17" pos:end="353:20">bprm</name><operator pos:start="353:21" pos:end="353:22">-&gt;</operator><name pos:start="353:23" pos:end="353:26">argc</name></name><operator pos:start="353:27" pos:end="353:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="359:9" pos:end="373:9"><if pos:start="359:9" pos:end="373:9">if <condition pos:start="359:12" pos:end="359:21">(<expr pos:start="359:13" pos:end="359:20"><operator pos:start="359:13" pos:end="359:13">!</operator><name pos:start="359:14" pos:end="359:20"><name pos:start="359:14" pos:end="359:17">bprm</name><operator pos:start="359:18" pos:end="359:19">-&gt;</operator><name pos:start="359:20" pos:end="359:20">p</name></name></expr>)</condition> <block pos:start="359:23" pos:end="373:9">{<block_content pos:start="361:13" pos:end="371:26">

            <if_stmt pos:start="361:13" pos:end="365:13"><if pos:start="361:13" pos:end="365:13">if <condition pos:start="361:16" pos:end="361:32">(<expr pos:start="361:17" pos:end="361:31"><name pos:start="361:17" pos:end="361:31">elf_interpreter</name></expr>)</condition> <block pos:start="361:34" pos:end="365:13">{<block_content pos:start="363:17" pos:end="363:38">

                <expr_stmt pos:start="363:17" pos:end="363:38"><expr pos:start="363:17" pos:end="363:37"><call pos:start="363:17" pos:end="363:37"><name pos:start="363:17" pos:end="363:20">free</name><argument_list pos:start="363:21" pos:end="363:37">(<argument pos:start="363:22" pos:end="363:36"><expr pos:start="363:22" pos:end="363:36"><name pos:start="363:22" pos:end="363:36">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:30"><expr pos:start="367:13" pos:end="367:29"><call pos:start="367:13" pos:end="367:29"><name pos:start="367:13" pos:end="367:16">free</name> <argument_list pos:start="367:18" pos:end="367:29">(<argument pos:start="367:19" pos:end="367:28"><expr pos:start="367:19" pos:end="367:28"><name pos:start="367:19" pos:end="367:28">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:28"><expr pos:start="369:13" pos:end="369:27"><call pos:start="369:13" pos:end="369:27"><name pos:start="369:13" pos:end="369:17">close</name><argument_list pos:start="369:18" pos:end="369:27">(<argument pos:start="369:19" pos:end="369:26"><expr pos:start="369:19" pos:end="369:26"><name pos:start="369:19" pos:end="369:26"><name pos:start="369:19" pos:end="369:22">bprm</name><operator pos:start="369:23" pos:end="369:24">-&gt;</operator><name pos:start="369:25" pos:end="369:26">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="371:13" pos:end="371:26">return <expr pos:start="371:20" pos:end="371:25"><operator pos:start="371:20" pos:end="371:20">-</operator><name pos:start="371:21" pos:end="371:25">E2BIG</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="379:5" pos:end="379:44">/* OK, This is the point of no return */</comment>

    <expr_stmt pos:start="381:5" pos:end="381:23"><expr pos:start="381:5" pos:end="381:22"><name pos:start="381:5" pos:end="381:18"><name pos:start="381:5" pos:end="381:8">info</name><operator pos:start="381:9" pos:end="381:10">-&gt;</operator><name pos:start="381:11" pos:end="381:18">end_data</name></name> <operator pos:start="381:20" pos:end="381:20">=</operator> <literal type="number" pos:start="381:22" pos:end="381:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:23"><expr pos:start="383:5" pos:end="383:22"><name pos:start="383:5" pos:end="383:18"><name pos:start="383:5" pos:end="383:8">info</name><operator pos:start="383:9" pos:end="383:10">-&gt;</operator><name pos:start="383:11" pos:end="383:18">end_code</name></name> <operator pos:start="383:20" pos:end="383:20">=</operator> <literal type="number" pos:start="383:22" pos:end="383:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:49"><expr pos:start="385:5" pos:end="385:48"><name pos:start="385:5" pos:end="385:20"><name pos:start="385:5" pos:end="385:8">info</name><operator pos:start="385:9" pos:end="385:10">-&gt;</operator><name pos:start="385:11" pos:end="385:20">start_mmap</name></name> <operator pos:start="385:22" pos:end="385:22">=</operator> <operator pos:start="385:24" pos:end="385:24">(</operator><name pos:start="385:25" pos:end="385:33">abi_ulong</name><operator pos:start="385:34" pos:end="385:34">)</operator><name pos:start="385:35" pos:end="385:48">ELF_START_MMAP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="387:5" pos:end="387:19"><expr pos:start="387:5" pos:end="387:18"><name pos:start="387:5" pos:end="387:14"><name pos:start="387:5" pos:end="387:8">info</name><operator pos:start="387:9" pos:end="387:10">-&gt;</operator><name pos:start="387:11" pos:end="387:14">mmap</name></name> <operator pos:start="387:16" pos:end="387:16">=</operator> <literal type="number" pos:start="387:18" pos:end="387:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="394:0"><expr pos:start="389:5" pos:end="389:42"><name pos:start="389:5" pos:end="389:13">elf_entry</name> <operator pos:start="389:15" pos:end="389:15">=</operator> <operator pos:start="389:17" pos:end="389:17">(</operator><name pos:start="389:18" pos:end="389:26">abi_ulong</name><operator pos:start="389:27" pos:end="389:27">)</operator> <name pos:start="389:29" pos:end="389:42"><name pos:start="389:29" pos:end="389:34">elf_ex</name><operator pos:start="389:35" pos:end="389:35">.</operator><name pos:start="389:36" pos:end="389:42">e_entry</name></name></expr>;</expr_stmt>



<cpp:if pos:start="393:1" pos:end="393:34">#<cpp:directive pos:start="393:2" pos:end="393:3">if</cpp:directive> <expr pos:start="393:5" pos:end="393:34"><call pos:start="393:5" pos:end="393:34"><name pos:start="393:5" pos:end="393:11">defined</name><argument_list pos:start="393:12" pos:end="393:34">(<argument pos:start="393:13" pos:end="393:33"><expr pos:start="393:13" pos:end="393:33"><name pos:start="393:13" pos:end="393:33">CONFIG_USE_GUEST_BASE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="395:5" pos:end="401:7">/*

     * In case where user has not explicitly set the guest_base, we

     * probe here that should we set it automatically.

     */</comment>

    <if_stmt pos:start="403:5" pos:end="558:0"><if pos:start="403:5" pos:end="558:0">if <condition pos:start="403:8" pos:end="403:42">(<expr pos:start="403:9" pos:end="403:41"><operator pos:start="403:9" pos:end="403:9">!</operator><operator pos:start="403:10" pos:end="403:10">(</operator><name pos:start="403:11" pos:end="403:25">have_guest_base</name> <operator pos:start="403:27" pos:end="403:28">||</operator> <name pos:start="403:30" pos:end="403:40">reserved_va</name><operator pos:start="403:41" pos:end="403:41">)</operator></expr>)</condition> <block pos:start="403:44" pos:end="558:0">{<block_content pos:start="413:9" pos:end="553:44">

        <comment type="block" pos:start="405:9" pos:end="411:73">/*

         * Go through ELF program header table and find the address

         * range used by loadable segments.  Check that this is available on

         * the host, and if not find a suitable value for guest_base.  */</comment>

        <decl_stmt pos:start="413:9" pos:end="413:33"><decl pos:start="413:9" pos:end="413:32"><type pos:start="413:9" pos:end="413:17"><name pos:start="413:9" pos:end="413:17">abi_ulong</name></type> <name pos:start="413:19" pos:end="413:27">app_start</name> <init pos:start="413:29" pos:end="413:32">= <expr pos:start="413:31" pos:end="413:32"><operator pos:start="413:31" pos:end="413:31">~</operator><literal type="number" pos:start="413:32" pos:end="413:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="415:9" pos:end="415:30"><decl pos:start="415:9" pos:end="415:29"><type pos:start="415:9" pos:end="415:17"><name pos:start="415:9" pos:end="415:17">abi_ulong</name></type> <name pos:start="415:19" pos:end="415:25">app_end</name> <init pos:start="415:27" pos:end="415:29">= <expr pos:start="415:29" pos:end="415:29"><literal type="number" pos:start="415:29" pos:end="415:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="417:9" pos:end="417:23"><decl pos:start="417:9" pos:end="417:22"><type pos:start="417:9" pos:end="417:17"><name pos:start="417:9" pos:end="417:17">abi_ulong</name></type> <name pos:start="417:19" pos:end="417:22">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="419:9" pos:end="419:33"><decl pos:start="419:9" pos:end="419:32"><type pos:start="419:9" pos:end="419:21"><name pos:start="419:9" pos:end="419:16">unsigned</name> <name pos:start="419:18" pos:end="419:21">long</name></type> <name pos:start="419:23" pos:end="419:32">host_start</name></decl>;</decl_stmt>

        <decl_stmt pos:start="421:9" pos:end="421:33"><decl pos:start="421:9" pos:end="421:32"><type pos:start="421:9" pos:end="421:21"><name pos:start="421:9" pos:end="421:16">unsigned</name> <name pos:start="421:18" pos:end="421:21">long</name></type> <name pos:start="421:23" pos:end="421:32">real_start</name></decl>;</decl_stmt>

        <decl_stmt pos:start="423:9" pos:end="423:32"><decl pos:start="423:9" pos:end="423:31"><type pos:start="423:9" pos:end="423:21"><name pos:start="423:9" pos:end="423:16">unsigned</name> <name pos:start="423:18" pos:end="423:21">long</name></type> <name pos:start="423:23" pos:end="423:31">host_size</name></decl>;</decl_stmt>

        <for pos:start="425:9" pos:end="449:9">for <control pos:start="425:13" pos:end="427:29">(<init pos:start="425:14" pos:end="425:42"><expr pos:start="425:14" pos:end="425:18"><name pos:start="425:14" pos:end="425:14">i</name> <operator pos:start="425:16" pos:end="425:16">=</operator> <literal type="number" pos:start="425:18" pos:end="425:18">0</literal></expr><operator pos:start="425:19" pos:end="425:19">,</operator> <expr pos:start="425:21" pos:end="425:41"><name pos:start="425:21" pos:end="425:28">elf_ppnt</name> <operator pos:start="425:30" pos:end="425:30">=</operator> <name pos:start="425:32" pos:end="425:41">elf_phdata</name></expr>;</init> <condition pos:start="425:44" pos:end="425:62"><expr pos:start="425:44" pos:end="425:61"><name pos:start="425:44" pos:end="425:44">i</name> <operator pos:start="425:46" pos:end="425:46">&lt;</operator> <name pos:start="425:48" pos:end="425:61"><name pos:start="425:48" pos:end="425:53">elf_ex</name><operator pos:start="425:54" pos:end="425:54">.</operator><name pos:start="425:55" pos:end="425:61">e_phnum</name></name></expr>;</condition>

             <incr pos:start="427:14" pos:end="427:28"><expr pos:start="427:14" pos:end="427:16"><name pos:start="427:14" pos:end="427:14">i</name><operator pos:start="427:15" pos:end="427:16">++</operator></expr><operator pos:start="427:17" pos:end="427:17">,</operator> <expr pos:start="427:19" pos:end="427:28"><name pos:start="427:19" pos:end="427:26">elf_ppnt</name><operator pos:start="427:27" pos:end="427:28">++</operator></expr></incr>)</control> <block pos:start="427:31" pos:end="449:9">{<block_content pos:start="429:13" pos:end="447:13">

            <if_stmt pos:start="429:13" pos:end="431:25"><if pos:start="429:13" pos:end="431:25">if <condition pos:start="429:16" pos:end="429:44">(<expr pos:start="429:17" pos:end="429:43"><name pos:start="429:17" pos:end="429:32"><name pos:start="429:17" pos:end="429:24">elf_ppnt</name><operator pos:start="429:25" pos:end="429:26">-&gt;</operator><name pos:start="429:27" pos:end="429:32">p_type</name></name> <operator pos:start="429:34" pos:end="429:35">!=</operator> <name pos:start="429:37" pos:end="429:43">PT_LOAD</name></expr>)</condition><block type="pseudo" pos:start="431:17" pos:end="431:25"><block_content pos:start="431:17" pos:end="431:25">

                <continue pos:start="431:17" pos:end="431:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:37"><expr pos:start="433:13" pos:end="433:36"><name pos:start="433:13" pos:end="433:16">addr</name> <operator pos:start="433:18" pos:end="433:18">=</operator> <name pos:start="433:20" pos:end="433:36"><name pos:start="433:20" pos:end="433:27">elf_ppnt</name><operator pos:start="433:28" pos:end="433:29">-&gt;</operator><name pos:start="433:30" pos:end="433:36">p_vaddr</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="435:13" pos:end="439:13"><if pos:start="435:13" pos:end="439:13">if <condition pos:start="435:16" pos:end="435:33">(<expr pos:start="435:17" pos:end="435:32"><name pos:start="435:17" pos:end="435:20">addr</name> <operator pos:start="435:22" pos:end="435:22">&lt;</operator> <name pos:start="435:24" pos:end="435:32">app_start</name></expr>)</condition> <block pos:start="435:35" pos:end="439:13">{<block_content pos:start="437:17" pos:end="437:33">

                <expr_stmt pos:start="437:17" pos:end="437:33"><expr pos:start="437:17" pos:end="437:32"><name pos:start="437:17" pos:end="437:25">app_start</name> <operator pos:start="437:27" pos:end="437:27">=</operator> <name pos:start="437:29" pos:end="437:32">addr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:38"><expr pos:start="441:13" pos:end="441:37"><name pos:start="441:13" pos:end="441:16">addr</name> <operator pos:start="441:18" pos:end="441:19">+=</operator> <name pos:start="441:21" pos:end="441:37"><name pos:start="441:21" pos:end="441:28">elf_ppnt</name><operator pos:start="441:29" pos:end="441:30">-&gt;</operator><name pos:start="441:31" pos:end="441:37">p_memsz</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="443:13" pos:end="447:13"><if pos:start="443:13" pos:end="447:13">if <condition pos:start="443:16" pos:end="443:31">(<expr pos:start="443:17" pos:end="443:30"><name pos:start="443:17" pos:end="443:20">addr</name> <operator pos:start="443:22" pos:end="443:22">&gt;</operator> <name pos:start="443:24" pos:end="443:30">app_end</name></expr>)</condition> <block pos:start="443:33" pos:end="447:13">{<block_content pos:start="445:17" pos:end="445:31">

                <expr_stmt pos:start="445:17" pos:end="445:31"><expr pos:start="445:17" pos:end="445:30"><name pos:start="445:17" pos:end="445:23">app_end</name> <operator pos:start="445:25" pos:end="445:25">=</operator> <name pos:start="445:27" pos:end="445:30">addr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="453:9" pos:end="455:29">/* If we don't have any loadable segments then something

           is very wrong.  */</comment>

        <expr_stmt pos:start="457:9" pos:end="457:36"><expr pos:start="457:9" pos:end="457:35"><call pos:start="457:9" pos:end="457:35"><name pos:start="457:9" pos:end="457:14">assert</name><argument_list pos:start="457:15" pos:end="457:35">(<argument pos:start="457:16" pos:end="457:34"><expr pos:start="457:16" pos:end="457:34"><name pos:start="457:16" pos:end="457:24">app_start</name> <operator pos:start="457:26" pos:end="457:26">&lt;</operator> <name pos:start="457:28" pos:end="457:34">app_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="461:9" pos:end="461:50">/* Round addresses to page boundaries.  */</comment>

        <expr_stmt pos:start="463:9" pos:end="463:52"><expr pos:start="463:9" pos:end="463:51"><name pos:start="463:9" pos:end="463:17">app_start</name> <operator pos:start="463:19" pos:end="463:19">=</operator> <name pos:start="463:21" pos:end="463:29">app_start</name> <operator pos:start="463:31" pos:end="463:31">&amp;</operator> <name pos:start="463:33" pos:end="463:51">qemu_host_page_mask</name></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:43"><expr pos:start="465:9" pos:end="465:42"><name pos:start="465:9" pos:end="465:15">app_end</name> <operator pos:start="465:17" pos:end="465:17">=</operator> <call pos:start="465:19" pos:end="465:42"><name pos:start="465:19" pos:end="465:33">HOST_PAGE_ALIGN</name><argument_list pos:start="465:34" pos:end="465:42">(<argument pos:start="465:35" pos:end="465:41"><expr pos:start="465:35" pos:end="465:41"><name pos:start="465:35" pos:end="465:41">app_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="467:9" pos:end="483:9"><if pos:start="467:9" pos:end="471:9">if <condition pos:start="467:12" pos:end="467:38">(<expr pos:start="467:13" pos:end="467:37"><name pos:start="467:13" pos:end="467:21">app_start</name> <operator pos:start="467:23" pos:end="467:23">&lt;</operator> <name pos:start="467:25" pos:end="467:37">mmap_min_addr</name></expr>)</condition> <block pos:start="467:40" pos:end="471:9">{<block_content pos:start="469:13" pos:end="469:56">

            <expr_stmt pos:start="469:13" pos:end="469:56"><expr pos:start="469:13" pos:end="469:55"><name pos:start="469:13" pos:end="469:22">host_start</name> <operator pos:start="469:24" pos:end="469:24">=</operator> <call pos:start="469:26" pos:end="469:55"><name pos:start="469:26" pos:end="469:40">HOST_PAGE_ALIGN</name><argument_list pos:start="469:41" pos:end="469:55">(<argument pos:start="469:42" pos:end="469:54"><expr pos:start="469:42" pos:end="469:54"><name pos:start="469:42" pos:end="469:54">mmap_min_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="471:11" pos:end="483:9">else <block pos:start="471:16" pos:end="483:9">{<block_content pos:start="473:13" pos:end="481:13">

            <expr_stmt pos:start="473:13" pos:end="473:35"><expr pos:start="473:13" pos:end="473:34"><name pos:start="473:13" pos:end="473:22">host_start</name> <operator pos:start="473:24" pos:end="473:24">=</operator> <name pos:start="473:26" pos:end="473:34">app_start</name></expr>;</expr_stmt>

            <if_stmt pos:start="475:13" pos:end="481:13"><if pos:start="475:13" pos:end="481:13">if <condition pos:start="475:16" pos:end="475:40">(<expr pos:start="475:17" pos:end="475:39"><name pos:start="475:17" pos:end="475:26">host_start</name> <operator pos:start="475:28" pos:end="475:29">!=</operator> <name pos:start="475:31" pos:end="475:39">app_start</name></expr>)</condition> <block pos:start="475:42" pos:end="481:13">{<block_content pos:start="477:17" pos:end="479:24">

                <expr_stmt pos:start="477:17" pos:end="477:79"><expr pos:start="477:17" pos:end="477:78"><call pos:start="477:17" pos:end="477:78"><name pos:start="477:17" pos:end="477:23">fprintf</name><argument_list pos:start="477:24" pos:end="477:78">(<argument pos:start="477:25" pos:end="477:30"><expr pos:start="477:25" pos:end="477:30"><name pos:start="477:25" pos:end="477:30">stderr</name></expr></argument>, <argument pos:start="477:33" pos:end="477:77"><expr pos:start="477:33" pos:end="477:77"><literal type="string" pos:start="477:33" pos:end="477:77">"qemu: Address overflow loading ELF binary\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="479:17" pos:end="479:24"><expr pos:start="479:17" pos:end="479:23"><call pos:start="479:17" pos:end="479:23"><name pos:start="479:17" pos:end="479:21">abort</name><argument_list pos:start="479:22" pos:end="479:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="485:9" pos:end="485:40"><expr pos:start="485:9" pos:end="485:39"><name pos:start="485:9" pos:end="485:17">host_size</name> <operator pos:start="485:19" pos:end="485:19">=</operator> <name pos:start="485:21" pos:end="485:27">app_end</name> <operator pos:start="485:29" pos:end="485:29">-</operator> <name pos:start="485:31" pos:end="485:39">app_start</name></expr>;</expr_stmt>

        <while pos:start="487:9" pos:end="547:9">while <condition pos:start="487:15" pos:end="487:17">(<expr pos:start="487:16" pos:end="487:16"><literal type="number" pos:start="487:16" pos:end="487:16">1</literal></expr>)</condition> <block pos:start="487:19" pos:end="547:9">{<block_content pos:start="495:13" pos:end="545:13">

            <comment type="block" pos:start="489:13" pos:end="493:64">/* Do not use mmap_find_vma here because that is limited to the

               guest address space.  We are going to make the

               guest address space fit whatever we're given.  */</comment>

            <expr_stmt pos:start="495:13" pos:end="497:79"><expr pos:start="495:13" pos:end="497:78"><name pos:start="495:13" pos:end="495:22">real_start</name> <operator pos:start="495:24" pos:end="495:24">=</operator> <operator pos:start="495:26" pos:end="495:26">(</operator><name pos:start="495:27" pos:end="495:34">unsigned</name> <name pos:start="495:36" pos:end="495:39">long</name><operator pos:start="495:40" pos:end="495:40">)</operator><call pos:start="495:41" pos:end="497:78"><name pos:start="495:41" pos:end="495:44">mmap</name><argument_list pos:start="495:45" pos:end="497:78">(<argument pos:start="495:46" pos:end="495:63"><expr pos:start="495:46" pos:end="495:63"><operator pos:start="495:46" pos:end="495:46">(</operator><name pos:start="495:47" pos:end="495:50">void</name> <operator pos:start="495:52" pos:end="495:52">*</operator><operator pos:start="495:53" pos:end="495:53">)</operator><name pos:start="495:54" pos:end="495:63">host_start</name></expr></argument>, <argument pos:start="495:66" pos:end="495:74"><expr pos:start="495:66" pos:end="495:74"><name pos:start="495:66" pos:end="495:74">host_size</name></expr></argument>,

                <argument pos:start="497:17" pos:end="497:25"><expr pos:start="497:17" pos:end="497:25"><name pos:start="497:17" pos:end="497:25">PROT_NONE</name></expr></argument>, <argument pos:start="497:28" pos:end="497:70"><expr pos:start="497:28" pos:end="497:70"><name pos:start="497:28" pos:end="497:40">MAP_ANONYMOUS</name> <operator pos:start="497:42" pos:end="497:42">|</operator> <name pos:start="497:44" pos:end="497:54">MAP_PRIVATE</name> <operator pos:start="497:56" pos:end="497:56">|</operator> <name pos:start="497:58" pos:end="497:70">MAP_NORESERVE</name></expr></argument>, <argument pos:start="497:73" pos:end="497:74"><expr pos:start="497:73" pos:end="497:74"><operator pos:start="497:73" pos:end="497:73">-</operator><literal type="number" pos:start="497:74" pos:end="497:74">1</literal></expr></argument>, <argument pos:start="497:77" pos:end="497:77"><expr pos:start="497:77" pos:end="497:77"><literal type="number" pos:start="497:77" pos:end="497:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="499:13" pos:end="505:13"><if pos:start="499:13" pos:end="505:13">if <condition pos:start="499:16" pos:end="499:48">(<expr pos:start="499:17" pos:end="499:47"><name pos:start="499:17" pos:end="499:26">real_start</name> <operator pos:start="499:28" pos:end="499:29">==</operator> <operator pos:start="499:31" pos:end="499:31">(</operator><name pos:start="499:32" pos:end="499:39">unsigned</name> <name pos:start="499:41" pos:end="499:44">long</name><operator pos:start="499:45" pos:end="499:45">)</operator><operator pos:start="499:46" pos:end="499:46">-</operator><literal type="number" pos:start="499:47" pos:end="499:47">1</literal></expr>)</condition> <block pos:start="499:50" pos:end="505:13">{<block_content pos:start="501:17" pos:end="503:24">

                <expr_stmt pos:start="501:17" pos:end="501:67"><expr pos:start="501:17" pos:end="501:66"><call pos:start="501:17" pos:end="501:66"><name pos:start="501:17" pos:end="501:23">fprintf</name><argument_list pos:start="501:24" pos:end="501:66">(<argument pos:start="501:25" pos:end="501:30"><expr pos:start="501:25" pos:end="501:30"><name pos:start="501:25" pos:end="501:30">stderr</name></expr></argument>, <argument pos:start="501:33" pos:end="501:65"><expr pos:start="501:33" pos:end="501:65"><literal type="string" pos:start="501:33" pos:end="501:65">"qemu: Virtual memory exausted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="503:17" pos:end="503:24"><expr pos:start="503:17" pos:end="503:23"><call pos:start="503:17" pos:end="503:23"><name pos:start="503:17" pos:end="503:21">abort</name><argument_list pos:start="503:22" pos:end="503:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="507:13" pos:end="511:13"><if pos:start="507:13" pos:end="511:13">if <condition pos:start="507:16" pos:end="507:41">(<expr pos:start="507:17" pos:end="507:40"><name pos:start="507:17" pos:end="507:26">real_start</name> <operator pos:start="507:28" pos:end="507:29">==</operator> <name pos:start="507:31" pos:end="507:40">host_start</name></expr>)</condition> <block pos:start="507:43" pos:end="511:13">{<block_content pos:start="509:17" pos:end="509:22">

                <break pos:start="509:17" pos:end="509:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="513:13" pos:end="527:32">/* That address didn't work.  Unmap and try a different one.

               The address the host picked because is typically

               right at the top of the host address space and leaves the

               guest with no usable address space.  Resort to a linear search.

               We already compensated for mmap_min_addr, so this should not

               happen often.  Probably means we got unlucky and host address

               space randomization put a shared library somewhere

               inconvenient.  */</comment>

            <expr_stmt pos:start="529:13" pos:end="529:50"><expr pos:start="529:13" pos:end="529:49"><call pos:start="529:13" pos:end="529:49"><name pos:start="529:13" pos:end="529:18">munmap</name><argument_list pos:start="529:19" pos:end="529:49">(<argument pos:start="529:20" pos:end="529:37"><expr pos:start="529:20" pos:end="529:37"><operator pos:start="529:20" pos:end="529:20">(</operator><name pos:start="529:21" pos:end="529:24">void</name> <operator pos:start="529:26" pos:end="529:26">*</operator><operator pos:start="529:27" pos:end="529:27">)</operator><name pos:start="529:28" pos:end="529:37">real_start</name></expr></argument>, <argument pos:start="529:40" pos:end="529:48"><expr pos:start="529:40" pos:end="529:48"><name pos:start="529:40" pos:end="529:48">host_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:46"><expr pos:start="531:13" pos:end="531:45"><name pos:start="531:13" pos:end="531:22">host_start</name> <operator pos:start="531:24" pos:end="531:25">+=</operator> <name pos:start="531:27" pos:end="531:45">qemu_host_page_size</name></expr>;</expr_stmt>

            <if_stmt pos:start="533:13" pos:end="545:13"><if pos:start="533:13" pos:end="545:13">if <condition pos:start="533:16" pos:end="533:40">(<expr pos:start="533:17" pos:end="533:39"><name pos:start="533:17" pos:end="533:26">host_start</name> <operator pos:start="533:28" pos:end="533:29">==</operator> <name pos:start="533:31" pos:end="533:39">app_start</name></expr>)</condition> <block pos:start="533:42" pos:end="545:13">{<block_content pos:start="541:17" pos:end="543:24">

                <comment type="block" pos:start="535:17" pos:end="539:28">/* Theoretically possible if host doesn't have any

                   suitably aligned areas.  Normally the first mmap will

                   fail.  */</comment>

                <expr_stmt pos:start="541:17" pos:end="541:80"><expr pos:start="541:17" pos:end="541:79"><call pos:start="541:17" pos:end="541:79"><name pos:start="541:17" pos:end="541:23">fprintf</name><argument_list pos:start="541:24" pos:end="541:79">(<argument pos:start="541:25" pos:end="541:30"><expr pos:start="541:25" pos:end="541:30"><name pos:start="541:25" pos:end="541:30">stderr</name></expr></argument>, <argument pos:start="541:33" pos:end="541:78"><expr pos:start="541:33" pos:end="541:78"><literal type="string" pos:start="541:33" pos:end="541:78">"qemu: Unable to find space for application\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="543:17" pos:end="543:24"><expr pos:start="543:17" pos:end="543:23"><call pos:start="543:17" pos:end="543:23"><name pos:start="543:17" pos:end="543:21">abort</name><argument_list pos:start="543:22" pos:end="543:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="549:9" pos:end="551:55"><expr pos:start="549:9" pos:end="551:54"><call pos:start="549:9" pos:end="551:54"><name pos:start="549:9" pos:end="549:16">qemu_log</name><argument_list pos:start="549:17" pos:end="551:54">(<argument pos:start="549:18" pos:end="551:30"><expr pos:start="549:18" pos:end="551:30"><literal type="string" pos:start="549:18" pos:end="549:57">"Relocating guest address space from 0x"</literal> <name pos:start="549:59" pos:end="549:75">TARGET_ABI_FMT_lx</name>

                 <literal type="string" pos:start="551:18" pos:end="551:30">" to 0x%lx\n"</literal></expr></argument>, <argument pos:start="551:33" pos:end="551:41"><expr pos:start="551:33" pos:end="551:41"><name pos:start="551:33" pos:end="551:41">app_start</name></expr></argument>, <argument pos:start="551:44" pos:end="551:53"><expr pos:start="551:44" pos:end="551:53"><name pos:start="551:44" pos:end="551:53">real_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="553:9" pos:end="553:44"><expr pos:start="553:9" pos:end="553:43"><name pos:start="553:9" pos:end="553:18">guest_base</name> <operator pos:start="553:20" pos:end="553:20">=</operator> <name pos:start="553:22" pos:end="553:31">real_start</name> <operator pos:start="553:33" pos:end="553:33">-</operator> <name pos:start="553:35" pos:end="553:43">app_start</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="557:1" pos:end="557:6">#<cpp:directive pos:start="557:2" pos:end="557:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="557:8" pos:end="557:34">/* CONFIG_USE_GUEST_BASE */</comment>



    <comment type="block" pos:start="561:5" pos:end="563:36">/* Do this so that we can load the interpreter, if need be.  We will

       change some of these later */</comment>

    <expr_stmt pos:start="565:5" pos:end="565:18"><expr pos:start="565:5" pos:end="565:17"><name pos:start="565:5" pos:end="565:13"><name pos:start="565:5" pos:end="565:8">info</name><operator pos:start="565:9" pos:end="565:10">-&gt;</operator><name pos:start="565:11" pos:end="565:13">rss</name></name> <operator pos:start="565:15" pos:end="565:15">=</operator> <literal type="number" pos:start="565:17" pos:end="565:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="567:5" pos:end="567:51"><expr pos:start="567:5" pos:end="567:50"><name pos:start="567:5" pos:end="567:11"><name pos:start="567:5" pos:end="567:8">bprm</name><operator pos:start="567:9" pos:end="567:10">-&gt;</operator><name pos:start="567:11" pos:end="567:11">p</name></name> <operator pos:start="567:13" pos:end="567:13">=</operator> <call pos:start="567:15" pos:end="567:50"><name pos:start="567:15" pos:end="567:29">setup_arg_pages</name><argument_list pos:start="567:30" pos:end="567:50">(<argument pos:start="567:31" pos:end="567:37"><expr pos:start="567:31" pos:end="567:37"><name pos:start="567:31" pos:end="567:37"><name pos:start="567:31" pos:end="567:34">bprm</name><operator pos:start="567:35" pos:end="567:36">-&gt;</operator><name pos:start="567:37" pos:end="567:37">p</name></name></expr></argument>, <argument pos:start="567:40" pos:end="567:43"><expr pos:start="567:40" pos:end="567:43"><name pos:start="567:40" pos:end="567:43">bprm</name></expr></argument>, <argument pos:start="567:46" pos:end="567:49"><expr pos:start="567:46" pos:end="567:49"><name pos:start="567:46" pos:end="567:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="569:5" pos:end="569:32"><expr pos:start="569:5" pos:end="569:31"><name pos:start="569:5" pos:end="569:21"><name pos:start="569:5" pos:end="569:8">info</name><operator pos:start="569:9" pos:end="569:10">-&gt;</operator><name pos:start="569:11" pos:end="569:21">start_stack</name></name> <operator pos:start="569:23" pos:end="569:23">=</operator> <name pos:start="569:25" pos:end="569:31"><name pos:start="569:25" pos:end="569:28">bprm</name><operator pos:start="569:29" pos:end="569:30">-&gt;</operator><name pos:start="569:31" pos:end="569:31">p</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="573:5" pos:end="581:7">/* Now we do a little grungy work by mmaping the ELF image into

     * the correct location in memory.  At this point, we assume that

     * the image should be loaded at fixed address, not at a variable

     * address.

     */</comment>



    <for pos:start="585:5" pos:end="743:5">for<control pos:start="585:8" pos:end="585:74">(<init pos:start="585:9" pos:end="585:37"><expr pos:start="585:9" pos:end="585:13"><name pos:start="585:9" pos:end="585:9">i</name> <operator pos:start="585:11" pos:end="585:11">=</operator> <literal type="number" pos:start="585:13" pos:end="585:13">0</literal></expr><operator pos:start="585:14" pos:end="585:14">,</operator> <expr pos:start="585:16" pos:end="585:36"><name pos:start="585:16" pos:end="585:23">elf_ppnt</name> <operator pos:start="585:25" pos:end="585:25">=</operator> <name pos:start="585:27" pos:end="585:36">elf_phdata</name></expr>;</init> <condition pos:start="585:39" pos:end="585:57"><expr pos:start="585:39" pos:end="585:56"><name pos:start="585:39" pos:end="585:39">i</name> <operator pos:start="585:41" pos:end="585:41">&lt;</operator> <name pos:start="585:43" pos:end="585:56"><name pos:start="585:43" pos:end="585:48">elf_ex</name><operator pos:start="585:49" pos:end="585:49">.</operator><name pos:start="585:50" pos:end="585:56">e_phnum</name></name></expr>;</condition> <incr pos:start="585:59" pos:end="585:73"><expr pos:start="585:59" pos:end="585:61"><name pos:start="585:59" pos:end="585:59">i</name><operator pos:start="585:60" pos:end="585:61">++</operator></expr><operator pos:start="585:62" pos:end="585:62">,</operator> <expr pos:start="585:64" pos:end="585:73"><name pos:start="585:64" pos:end="585:71">elf_ppnt</name><operator pos:start="585:72" pos:end="585:73">++</operator></expr></incr>)</control> <block pos:start="585:76" pos:end="743:5">{<block_content pos:start="587:9" pos:end="741:9">

        <decl_stmt pos:start="587:9" pos:end="587:25"><decl pos:start="587:9" pos:end="587:24"><type pos:start="587:9" pos:end="587:11"><name pos:start="587:9" pos:end="587:11">int</name></type> <name pos:start="587:13" pos:end="587:20">elf_prot</name> <init pos:start="587:22" pos:end="587:24">= <expr pos:start="587:24" pos:end="587:24"><literal type="number" pos:start="587:24" pos:end="587:24">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="589:9" pos:end="589:26"><decl pos:start="589:9" pos:end="589:25"><type pos:start="589:9" pos:end="589:11"><name pos:start="589:9" pos:end="589:11">int</name></type> <name pos:start="589:13" pos:end="589:21">elf_flags</name> <init pos:start="589:23" pos:end="589:25">= <expr pos:start="589:25" pos:end="589:25"><literal type="number" pos:start="589:25" pos:end="589:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="591:9" pos:end="591:24"><decl pos:start="591:9" pos:end="591:23"><type pos:start="591:9" pos:end="591:17"><name pos:start="591:9" pos:end="591:17">abi_ulong</name></type> <name pos:start="591:19" pos:end="591:23">error</name></decl>;</decl_stmt>



        <if_stmt pos:start="595:9" pos:end="597:21"><if pos:start="595:9" pos:end="597:21">if <condition pos:start="595:12" pos:end="595:40">(<expr pos:start="595:13" pos:end="595:39"><name pos:start="595:13" pos:end="595:28"><name pos:start="595:13" pos:end="595:20">elf_ppnt</name><operator pos:start="595:21" pos:end="595:22">-&gt;</operator><name pos:start="595:23" pos:end="595:28">p_type</name></name> <operator pos:start="595:30" pos:end="595:31">!=</operator> <name pos:start="595:33" pos:end="595:39">PT_LOAD</name></expr>)</condition><block type="pseudo" pos:start="597:13" pos:end="597:21"><block_content pos:start="597:13" pos:end="597:21">

            <continue pos:start="597:13" pos:end="597:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="601:9" pos:end="601:60"><if pos:start="601:9" pos:end="601:60">if <condition pos:start="601:12" pos:end="601:37">(<expr pos:start="601:13" pos:end="601:36"><name pos:start="601:13" pos:end="601:29"><name pos:start="601:13" pos:end="601:20">elf_ppnt</name><operator pos:start="601:21" pos:end="601:22">-&gt;</operator><name pos:start="601:23" pos:end="601:29">p_flags</name></name> <operator pos:start="601:31" pos:end="601:31">&amp;</operator> <name pos:start="601:33" pos:end="601:36">PF_R</name></expr>)</condition><block type="pseudo" pos:start="601:39" pos:end="601:60"><block_content pos:start="601:39" pos:end="601:60"> <expr_stmt pos:start="601:39" pos:end="601:60"><expr pos:start="601:39" pos:end="601:59"><name pos:start="601:39" pos:end="601:46">elf_prot</name> <operator pos:start="601:48" pos:end="601:49">|=</operator> <name pos:start="601:51" pos:end="601:59">PROT_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="603:9" pos:end="603:61"><if pos:start="603:9" pos:end="603:61">if <condition pos:start="603:12" pos:end="603:37">(<expr pos:start="603:13" pos:end="603:36"><name pos:start="603:13" pos:end="603:29"><name pos:start="603:13" pos:end="603:20">elf_ppnt</name><operator pos:start="603:21" pos:end="603:22">-&gt;</operator><name pos:start="603:23" pos:end="603:29">p_flags</name></name> <operator pos:start="603:31" pos:end="603:31">&amp;</operator> <name pos:start="603:33" pos:end="603:36">PF_W</name></expr>)</condition><block type="pseudo" pos:start="603:39" pos:end="603:61"><block_content pos:start="603:39" pos:end="603:61"> <expr_stmt pos:start="603:39" pos:end="603:61"><expr pos:start="603:39" pos:end="603:60"><name pos:start="603:39" pos:end="603:46">elf_prot</name> <operator pos:start="603:48" pos:end="603:49">|=</operator> <name pos:start="603:51" pos:end="603:60">PROT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="605:9" pos:end="605:60"><if pos:start="605:9" pos:end="605:60">if <condition pos:start="605:12" pos:end="605:37">(<expr pos:start="605:13" pos:end="605:36"><name pos:start="605:13" pos:end="605:29"><name pos:start="605:13" pos:end="605:20">elf_ppnt</name><operator pos:start="605:21" pos:end="605:22">-&gt;</operator><name pos:start="605:23" pos:end="605:29">p_flags</name></name> <operator pos:start="605:31" pos:end="605:31">&amp;</operator> <name pos:start="605:33" pos:end="605:36">PF_X</name></expr>)</condition><block type="pseudo" pos:start="605:39" pos:end="605:60"><block_content pos:start="605:39" pos:end="605:60"> <expr_stmt pos:start="605:39" pos:end="605:60"><expr pos:start="605:39" pos:end="605:59"><name pos:start="605:39" pos:end="605:46">elf_prot</name> <operator pos:start="605:48" pos:end="605:49">|=</operator> <name pos:start="605:51" pos:end="605:59">PROT_EXEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:48"><expr pos:start="607:9" pos:end="607:47"><name pos:start="607:9" pos:end="607:17">elf_flags</name> <operator pos:start="607:19" pos:end="607:19">=</operator> <name pos:start="607:21" pos:end="607:31">MAP_PRIVATE</name> <operator pos:start="607:33" pos:end="607:33">|</operator> <name pos:start="607:35" pos:end="607:47">MAP_DENYWRITE</name></expr>;</expr_stmt>

        <if_stmt pos:start="609:9" pos:end="641:9"><if pos:start="609:9" pos:end="613:9">if <condition pos:start="609:12" pos:end="609:54">(<expr pos:start="609:13" pos:end="609:53"><name pos:start="609:13" pos:end="609:25"><name pos:start="609:13" pos:end="609:18">elf_ex</name><operator pos:start="609:19" pos:end="609:19">.</operator><name pos:start="609:20" pos:end="609:25">e_type</name></name> <operator pos:start="609:27" pos:end="609:28">==</operator> <name pos:start="609:30" pos:end="609:36">ET_EXEC</name> <operator pos:start="609:38" pos:end="609:39">||</operator> <name pos:start="609:41" pos:end="609:53">load_addr_set</name></expr>)</condition> <block pos:start="609:56" pos:end="613:9">{<block_content pos:start="611:13" pos:end="611:35">

            <expr_stmt pos:start="611:13" pos:end="611:35"><expr pos:start="611:13" pos:end="611:34"><name pos:start="611:13" pos:end="611:21">elf_flags</name> <operator pos:start="611:23" pos:end="611:24">|=</operator> <name pos:start="611:26" pos:end="611:34">MAP_FIXED</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="613:11" pos:end="641:9">else if <condition pos:start="613:19" pos:end="613:43">(<expr pos:start="613:20" pos:end="613:42"><name pos:start="613:20" pos:end="613:32"><name pos:start="613:20" pos:end="613:25">elf_ex</name><operator pos:start="613:26" pos:end="613:26">.</operator><name pos:start="613:27" pos:end="613:32">e_type</name></name> <operator pos:start="613:34" pos:end="613:35">==</operator> <name pos:start="613:37" pos:end="613:42">ET_DYN</name></expr>)</condition> <block pos:start="613:45" pos:end="641:9">{<block_content pos:start="625:13" pos:end="639:72">

            <comment type="block" pos:start="615:13" pos:end="619:81">/* Try and get dynamic programs out of the way of the default mmap

               base, as well as whatever program they might try to exec.  This

               is because the brk will follow the loader, and is not movable.  */</comment>

            <comment type="block" pos:start="621:13" pos:end="623:48">/* NOTE: for qemu, we do a big mmap to get enough space

               without hardcoding any address */</comment>

            <expr_stmt pos:start="625:13" pos:end="629:39"><expr pos:start="625:13" pos:end="629:38"><name pos:start="625:13" pos:end="625:17">error</name> <operator pos:start="625:19" pos:end="625:19">=</operator> <call pos:start="625:21" pos:end="629:38"><name pos:start="625:21" pos:end="625:31">target_mmap</name><argument_list pos:start="625:32" pos:end="629:38">(<argument pos:start="625:33" pos:end="625:33"><expr pos:start="625:33" pos:end="625:33"><literal type="number" pos:start="625:33" pos:end="625:33">0</literal></expr></argument>, <argument pos:start="625:36" pos:end="625:50"><expr pos:start="625:36" pos:end="625:50"><name pos:start="625:36" pos:end="625:50">ET_DYN_MAP_SIZE</name></expr></argument>,

                                <argument pos:start="627:33" pos:end="627:41"><expr pos:start="627:33" pos:end="627:41"><name pos:start="627:33" pos:end="627:41">PROT_NONE</name></expr></argument>, <argument pos:start="627:44" pos:end="627:65"><expr pos:start="627:44" pos:end="627:65"><name pos:start="627:44" pos:end="627:54">MAP_PRIVATE</name> <operator pos:start="627:56" pos:end="627:56">|</operator> <name pos:start="627:58" pos:end="627:65">MAP_ANON</name></expr></argument>,

                                <argument pos:start="629:33" pos:end="629:34"><expr pos:start="629:33" pos:end="629:34"><operator pos:start="629:33" pos:end="629:33">-</operator><literal type="number" pos:start="629:34" pos:end="629:34">1</literal></expr></argument>, <argument pos:start="629:37" pos:end="629:37"><expr pos:start="629:37" pos:end="629:37"><literal type="number" pos:start="629:37" pos:end="629:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="631:13" pos:end="637:13"><if pos:start="631:13" pos:end="637:13">if <condition pos:start="631:16" pos:end="631:28">(<expr pos:start="631:17" pos:end="631:27"><name pos:start="631:17" pos:end="631:21">error</name> <operator pos:start="631:23" pos:end="631:24">==</operator> <operator pos:start="631:26" pos:end="631:26">-</operator><literal type="number" pos:start="631:27" pos:end="631:27">1</literal></expr>)</condition> <block pos:start="631:30" pos:end="637:13">{<block_content pos:start="633:17" pos:end="635:25">

                <expr_stmt pos:start="633:17" pos:end="633:31"><expr pos:start="633:17" pos:end="633:30"><call pos:start="633:17" pos:end="633:30"><name pos:start="633:17" pos:end="633:22">perror</name><argument_list pos:start="633:23" pos:end="633:30">(<argument pos:start="633:24" pos:end="633:29"><expr pos:start="633:24" pos:end="633:29"><literal type="string" pos:start="633:24" pos:end="633:29">"mmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="635:17" pos:end="635:25"><expr pos:start="635:17" pos:end="635:24"><call pos:start="635:17" pos:end="635:24"><name pos:start="635:17" pos:end="635:20">exit</name><argument_list pos:start="635:21" pos:end="635:24">(<argument pos:start="635:22" pos:end="635:23"><expr pos:start="635:22" pos:end="635:23"><operator pos:start="635:22" pos:end="635:22">-</operator><literal type="number" pos:start="635:23" pos:end="635:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="639:13" pos:end="639:72"><expr pos:start="639:13" pos:end="639:71"><name pos:start="639:13" pos:end="639:21">load_bias</name> <operator pos:start="639:23" pos:end="639:23">=</operator> <call pos:start="639:25" pos:end="639:71"><name pos:start="639:25" pos:end="639:44">TARGET_ELF_PAGESTART</name><argument_list pos:start="639:45" pos:end="639:71">(<argument pos:start="639:46" pos:end="639:70"><expr pos:start="639:46" pos:end="639:70"><name pos:start="639:46" pos:end="639:50">error</name> <operator pos:start="639:52" pos:end="639:52">-</operator> <name pos:start="639:54" pos:end="639:70"><name pos:start="639:54" pos:end="639:61">elf_ppnt</name><operator pos:start="639:62" pos:end="639:63">-&gt;</operator><name pos:start="639:64" pos:end="639:70">p_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="645:9" pos:end="659:72"><expr pos:start="645:9" pos:end="659:71"><name pos:start="645:9" pos:end="645:13">error</name> <operator pos:start="645:15" pos:end="645:15">=</operator> <call pos:start="645:17" pos:end="659:71"><name pos:start="645:17" pos:end="645:27">target_mmap</name><argument_list pos:start="645:28" pos:end="659:71">(<argument pos:start="645:29" pos:end="645:79"><expr pos:start="645:29" pos:end="645:79"><call pos:start="645:29" pos:end="645:79"><name pos:start="645:29" pos:end="645:48">TARGET_ELF_PAGESTART</name><argument_list pos:start="645:49" pos:end="645:79">(<argument pos:start="645:50" pos:end="645:78"><expr pos:start="645:50" pos:end="645:78"><name pos:start="645:50" pos:end="645:58">load_bias</name> <operator pos:start="645:60" pos:end="645:60">+</operator> <name pos:start="645:62" pos:end="645:78"><name pos:start="645:62" pos:end="645:69">elf_ppnt</name><operator pos:start="645:70" pos:end="645:71">-&gt;</operator><name pos:start="645:72" pos:end="645:78">p_vaddr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="647:29" pos:end="649:70"><expr pos:start="647:29" pos:end="649:70"><operator pos:start="647:29" pos:end="647:29">(</operator><name pos:start="647:30" pos:end="647:47"><name pos:start="647:30" pos:end="647:37">elf_ppnt</name><operator pos:start="647:38" pos:end="647:39">-&gt;</operator><name pos:start="647:40" pos:end="647:47">p_filesz</name></name> <operator pos:start="647:49" pos:end="647:49">+</operator>

                             <call pos:start="649:30" pos:end="649:69"><name pos:start="649:30" pos:end="649:50">TARGET_ELF_PAGEOFFSET</name><argument_list pos:start="649:51" pos:end="649:69">(<argument pos:start="649:52" pos:end="649:68"><expr pos:start="649:52" pos:end="649:68"><name pos:start="649:52" pos:end="649:68"><name pos:start="649:52" pos:end="649:59">elf_ppnt</name><operator pos:start="649:60" pos:end="649:61">-&gt;</operator><name pos:start="649:62" pos:end="649:68">p_vaddr</name></name></expr></argument>)</argument_list></call><operator pos:start="649:70" pos:end="649:70">)</operator></expr></argument>,

                            <argument pos:start="651:29" pos:end="651:36"><expr pos:start="651:29" pos:end="651:36"><name pos:start="651:29" pos:end="651:36">elf_prot</name></expr></argument>,

                            <argument pos:start="653:29" pos:end="653:69"><expr pos:start="653:29" pos:end="653:69"><operator pos:start="653:29" pos:end="653:29">(</operator><name pos:start="653:30" pos:end="653:38">MAP_FIXED</name> <operator pos:start="653:40" pos:end="653:40">|</operator> <name pos:start="653:42" pos:end="653:52">MAP_PRIVATE</name> <operator pos:start="653:54" pos:end="653:54">|</operator> <name pos:start="653:56" pos:end="653:68">MAP_DENYWRITE</name><operator pos:start="653:69" pos:end="653:69">)</operator></expr></argument>,

                            <argument pos:start="655:29" pos:end="655:36"><expr pos:start="655:29" pos:end="655:36"><name pos:start="655:29" pos:end="655:36"><name pos:start="655:29" pos:end="655:32">bprm</name><operator pos:start="655:33" pos:end="655:34">-&gt;</operator><name pos:start="655:35" pos:end="655:36">fd</name></name></expr></argument>,

                            <argument pos:start="657:29" pos:end="659:70"><expr pos:start="657:29" pos:end="659:70"><operator pos:start="657:29" pos:end="657:29">(</operator><name pos:start="657:30" pos:end="657:47"><name pos:start="657:30" pos:end="657:37">elf_ppnt</name><operator pos:start="657:38" pos:end="657:39">-&gt;</operator><name pos:start="657:40" pos:end="657:47">p_offset</name></name> <operator pos:start="657:49" pos:end="657:49">-</operator>

                             <call pos:start="659:30" pos:end="659:69"><name pos:start="659:30" pos:end="659:50">TARGET_ELF_PAGEOFFSET</name><argument_list pos:start="659:51" pos:end="659:69">(<argument pos:start="659:52" pos:end="659:68"><expr pos:start="659:52" pos:end="659:68"><name pos:start="659:52" pos:end="659:68"><name pos:start="659:52" pos:end="659:59">elf_ppnt</name><operator pos:start="659:60" pos:end="659:61">-&gt;</operator><name pos:start="659:62" pos:end="659:68">p_vaddr</name></name></expr></argument>)</argument_list></call><operator pos:start="659:70" pos:end="659:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="661:9" pos:end="672:0"><if pos:start="661:9" pos:end="672:0">if <condition pos:start="661:12" pos:end="661:24">(<expr pos:start="661:13" pos:end="661:23"><name pos:start="661:13" pos:end="661:17">error</name> <operator pos:start="661:19" pos:end="661:20">==</operator> <operator pos:start="661:22" pos:end="661:22">-</operator><literal type="number" pos:start="661:23" pos:end="661:23">1</literal></expr>)</condition> <block pos:start="661:26" pos:end="672:0">{<block_content pos:start="663:13" pos:end="665:21">

            <expr_stmt pos:start="663:13" pos:end="663:27"><expr pos:start="663:13" pos:end="663:26"><call pos:start="663:13" pos:end="663:26"><name pos:start="663:13" pos:end="663:18">perror</name><argument_list pos:start="663:19" pos:end="663:26">(<argument pos:start="663:20" pos:end="663:25"><expr pos:start="663:20" pos:end="663:25"><literal type="string" pos:start="663:20" pos:end="663:25">"mmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="665:13" pos:end="665:21"><expr pos:start="665:13" pos:end="665:20"><call pos:start="665:13" pos:end="665:20"><name pos:start="665:13" pos:end="665:16">exit</name><argument_list pos:start="665:17" pos:end="665:20">(<argument pos:start="665:18" pos:end="665:19"><expr pos:start="665:18" pos:end="665:19"><operator pos:start="665:18" pos:end="665:18">-</operator><literal type="number" pos:start="665:19" pos:end="665:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="671:1" pos:end="671:20">#<cpp:directive pos:start="671:2" pos:end="671:6">ifdef</cpp:directive> <name pos:start="671:8" pos:end="671:20">LOW_ELF_STACK</name></cpp:ifdef>

        <if_stmt pos:start="673:9" pos:end="678:0"><if pos:start="673:9" pos:end="678:0">if <condition pos:start="673:12" pos:end="673:64">(<expr pos:start="673:13" pos:end="673:63"><call pos:start="673:13" pos:end="673:51"><name pos:start="673:13" pos:end="673:32">TARGET_ELF_PAGESTART</name><argument_list pos:start="673:33" pos:end="673:51">(<argument pos:start="673:34" pos:end="673:50"><expr pos:start="673:34" pos:end="673:50"><name pos:start="673:34" pos:end="673:50"><name pos:start="673:34" pos:end="673:41">elf_ppnt</name><operator pos:start="673:42" pos:end="673:43">-&gt;</operator><name pos:start="673:44" pos:end="673:50">p_vaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="673:53" pos:end="673:53">&lt;</operator> <name pos:start="673:55" pos:end="673:63">elf_stack</name></expr>)</condition><block type="pseudo" pos:start="675:13" pos:end="678:0"><block_content pos:start="675:13" pos:end="678:0">

            <expr_stmt pos:start="675:13" pos:end="678:0"><expr pos:start="675:13" pos:end="675:63"><name pos:start="675:13" pos:end="675:21">elf_stack</name> <operator pos:start="675:23" pos:end="675:23">=</operator> <call pos:start="675:25" pos:end="675:63"><name pos:start="675:25" pos:end="675:44">TARGET_ELF_PAGESTART</name><argument_list pos:start="675:45" pos:end="675:63">(<argument pos:start="675:46" pos:end="675:62"><expr pos:start="675:46" pos:end="675:62"><name pos:start="675:46" pos:end="675:62"><name pos:start="675:46" pos:end="675:53">elf_ppnt</name><operator pos:start="675:54" pos:end="675:55">-&gt;</operator><name pos:start="675:56" pos:end="675:62">p_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="677:1" pos:end="677:6">#<cpp:directive pos:start="677:2" pos:end="677:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="681:9" pos:end="699:9"><if pos:start="681:9" pos:end="699:9">if <condition pos:start="681:12" pos:end="681:27">(<expr pos:start="681:13" pos:end="681:26"><operator pos:start="681:13" pos:end="681:13">!</operator><name pos:start="681:14" pos:end="681:26">load_addr_set</name></expr>)</condition> <block pos:start="681:29" pos:end="699:9">{<block_content pos:start="683:13" pos:end="697:13">

            <expr_stmt pos:start="683:13" pos:end="683:30"><expr pos:start="683:13" pos:end="683:29"><name pos:start="683:13" pos:end="683:25">load_addr_set</name> <operator pos:start="683:27" pos:end="683:27">=</operator> <literal type="number" pos:start="683:29" pos:end="683:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="685:13" pos:end="685:63"><expr pos:start="685:13" pos:end="685:62"><name pos:start="685:13" pos:end="685:21">load_addr</name> <operator pos:start="685:23" pos:end="685:23">=</operator> <name pos:start="685:25" pos:end="685:41"><name pos:start="685:25" pos:end="685:32">elf_ppnt</name><operator pos:start="685:33" pos:end="685:34">-&gt;</operator><name pos:start="685:35" pos:end="685:41">p_vaddr</name></name> <operator pos:start="685:43" pos:end="685:43">-</operator> <name pos:start="685:45" pos:end="685:62"><name pos:start="685:45" pos:end="685:52">elf_ppnt</name><operator pos:start="685:53" pos:end="685:54">-&gt;</operator><name pos:start="685:55" pos:end="685:62">p_offset</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="687:13" pos:end="697:13"><if pos:start="687:13" pos:end="697:13">if <condition pos:start="687:16" pos:end="687:40">(<expr pos:start="687:17" pos:end="687:39"><name pos:start="687:17" pos:end="687:29"><name pos:start="687:17" pos:end="687:22">elf_ex</name><operator pos:start="687:23" pos:end="687:23">.</operator><name pos:start="687:24" pos:end="687:29">e_type</name></name> <operator pos:start="687:31" pos:end="687:32">==</operator> <name pos:start="687:34" pos:end="687:39">ET_DYN</name></expr>)</condition> <block pos:start="687:42" pos:end="697:13">{<block_content pos:start="689:17" pos:end="695:44">

                <expr_stmt pos:start="689:17" pos:end="691:72"><expr pos:start="689:17" pos:end="691:71"><name pos:start="689:17" pos:end="689:25">load_bias</name> <operator pos:start="689:27" pos:end="689:28">+=</operator> <name pos:start="689:30" pos:end="689:34">error</name> <operator pos:start="689:36" pos:end="689:36">-</operator>

                    <call pos:start="691:21" pos:end="691:71"><name pos:start="691:21" pos:end="691:40">TARGET_ELF_PAGESTART</name><argument_list pos:start="691:41" pos:end="691:71">(<argument pos:start="691:42" pos:end="691:70"><expr pos:start="691:42" pos:end="691:70"><name pos:start="691:42" pos:end="691:50">load_bias</name> <operator pos:start="691:52" pos:end="691:52">+</operator> <name pos:start="691:54" pos:end="691:70"><name pos:start="691:54" pos:end="691:61">elf_ppnt</name><operator pos:start="691:62" pos:end="691:63">-&gt;</operator><name pos:start="691:64" pos:end="691:70">p_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="693:17" pos:end="693:39"><expr pos:start="693:17" pos:end="693:38"><name pos:start="693:17" pos:end="693:25">load_addr</name> <operator pos:start="693:27" pos:end="693:28">+=</operator> <name pos:start="693:30" pos:end="693:38">load_bias</name></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:44"><expr pos:start="695:17" pos:end="695:43"><name pos:start="695:17" pos:end="695:31">reloc_func_desc</name> <operator pos:start="695:33" pos:end="695:33">=</operator> <name pos:start="695:35" pos:end="695:43">load_bias</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="701:9" pos:end="701:30"><expr pos:start="701:9" pos:end="701:29"><name pos:start="701:9" pos:end="701:9">k</name> <operator pos:start="701:11" pos:end="701:11">=</operator> <name pos:start="701:13" pos:end="701:29"><name pos:start="701:13" pos:end="701:20">elf_ppnt</name><operator pos:start="701:21" pos:end="701:22">-&gt;</operator><name pos:start="701:23" pos:end="701:29">p_vaddr</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="703:9" pos:end="705:27"><if pos:start="703:9" pos:end="705:27">if <condition pos:start="703:12" pos:end="703:27">(<expr pos:start="703:13" pos:end="703:26"><name pos:start="703:13" pos:end="703:13">k</name> <operator pos:start="703:15" pos:end="703:15">&lt;</operator> <name pos:start="703:17" pos:end="703:26">start_code</name></expr>)</condition><block type="pseudo" pos:start="705:13" pos:end="705:27"><block_content pos:start="705:13" pos:end="705:27">

            <expr_stmt pos:start="705:13" pos:end="705:27"><expr pos:start="705:13" pos:end="705:26"><name pos:start="705:13" pos:end="705:22">start_code</name> <operator pos:start="705:24" pos:end="705:24">=</operator> <name pos:start="705:26" pos:end="705:26">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="707:9" pos:end="709:27"><if pos:start="707:9" pos:end="709:27">if <condition pos:start="707:12" pos:end="707:27">(<expr pos:start="707:13" pos:end="707:26"><name pos:start="707:13" pos:end="707:22">start_data</name> <operator pos:start="707:24" pos:end="707:24">&lt;</operator> <name pos:start="707:26" pos:end="707:26">k</name></expr>)</condition><block type="pseudo" pos:start="709:13" pos:end="709:27"><block_content pos:start="709:13" pos:end="709:27">

            <expr_stmt pos:start="709:13" pos:end="709:27"><expr pos:start="709:13" pos:end="709:26"><name pos:start="709:13" pos:end="709:22">start_data</name> <operator pos:start="709:24" pos:end="709:24">=</operator> <name pos:start="709:26" pos:end="709:26">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="711:9" pos:end="711:51"><expr pos:start="711:9" pos:end="711:50"><name pos:start="711:9" pos:end="711:9">k</name> <operator pos:start="711:11" pos:end="711:11">=</operator> <name pos:start="711:13" pos:end="711:29"><name pos:start="711:13" pos:end="711:20">elf_ppnt</name><operator pos:start="711:21" pos:end="711:22">-&gt;</operator><name pos:start="711:23" pos:end="711:29">p_vaddr</name></name> <operator pos:start="711:31" pos:end="711:31">+</operator> <name pos:start="711:33" pos:end="711:50"><name pos:start="711:33" pos:end="711:40">elf_ppnt</name><operator pos:start="711:41" pos:end="711:42">-&gt;</operator><name pos:start="711:43" pos:end="711:50">p_filesz</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="713:9" pos:end="715:25"><if pos:start="713:9" pos:end="715:25">if <condition pos:start="713:12" pos:end="713:56">(<expr pos:start="713:13" pos:end="713:55"><operator pos:start="713:13" pos:end="713:13">(</operator><name pos:start="713:14" pos:end="713:30"><name pos:start="713:14" pos:end="713:21">elf_ppnt</name><operator pos:start="713:22" pos:end="713:23">-&gt;</operator><name pos:start="713:24" pos:end="713:30">p_flags</name></name> <operator pos:start="713:32" pos:end="713:32">&amp;</operator> <name pos:start="713:34" pos:end="713:37">PF_X</name><operator pos:start="713:38" pos:end="713:38">)</operator> <operator pos:start="713:40" pos:end="713:41">&amp;&amp;</operator> <name pos:start="713:43" pos:end="713:50">end_code</name> <operator pos:start="713:52" pos:end="713:52">&lt;</operator>  <name pos:start="713:55" pos:end="713:55">k</name></expr>)</condition><block type="pseudo" pos:start="715:13" pos:end="715:25"><block_content pos:start="715:13" pos:end="715:25">

            <expr_stmt pos:start="715:13" pos:end="715:25"><expr pos:start="715:13" pos:end="715:24"><name pos:start="715:13" pos:end="715:20">end_code</name> <operator pos:start="715:22" pos:end="715:22">=</operator> <name pos:start="715:24" pos:end="715:24">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="717:9" pos:end="719:25"><if pos:start="717:9" pos:end="719:25">if <condition pos:start="717:12" pos:end="717:25">(<expr pos:start="717:13" pos:end="717:24"><name pos:start="717:13" pos:end="717:20">end_data</name> <operator pos:start="717:22" pos:end="717:22">&lt;</operator> <name pos:start="717:24" pos:end="717:24">k</name></expr>)</condition><block type="pseudo" pos:start="719:13" pos:end="719:25"><block_content pos:start="719:13" pos:end="719:25">

            <expr_stmt pos:start="719:13" pos:end="719:25"><expr pos:start="719:13" pos:end="719:24"><name pos:start="719:13" pos:end="719:20">end_data</name> <operator pos:start="719:22" pos:end="719:22">=</operator> <name pos:start="719:24" pos:end="719:24">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="721:9" pos:end="721:50"><expr pos:start="721:9" pos:end="721:49"><name pos:start="721:9" pos:end="721:9">k</name> <operator pos:start="721:11" pos:end="721:11">=</operator> <name pos:start="721:13" pos:end="721:29"><name pos:start="721:13" pos:end="721:20">elf_ppnt</name><operator pos:start="721:21" pos:end="721:22">-&gt;</operator><name pos:start="721:23" pos:end="721:29">p_vaddr</name></name> <operator pos:start="721:31" pos:end="721:31">+</operator> <name pos:start="721:33" pos:end="721:49"><name pos:start="721:33" pos:end="721:40">elf_ppnt</name><operator pos:start="721:41" pos:end="721:42">-&gt;</operator><name pos:start="721:43" pos:end="721:49">p_memsz</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="723:9" pos:end="727:9"><if pos:start="723:9" pos:end="727:9">if <condition pos:start="723:12" pos:end="723:24">(<expr pos:start="723:13" pos:end="723:23"><name pos:start="723:13" pos:end="723:13">k</name> <operator pos:start="723:15" pos:end="723:15">&gt;</operator> <name pos:start="723:17" pos:end="723:23">elf_brk</name></expr>)</condition> <block pos:start="723:26" pos:end="727:9">{<block_content pos:start="725:13" pos:end="725:43">

            <expr_stmt pos:start="725:13" pos:end="725:43"><expr pos:start="725:13" pos:end="725:42"><name pos:start="725:13" pos:end="725:19">elf_brk</name> <operator pos:start="725:21" pos:end="725:21">=</operator> <call pos:start="725:23" pos:end="725:42"><name pos:start="725:23" pos:end="725:39">TARGET_PAGE_ALIGN</name><argument_list pos:start="725:40" pos:end="725:42">(<argument pos:start="725:41" pos:end="725:41"><expr pos:start="725:41" pos:end="725:41"><name pos:start="725:41" pos:end="725:41">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="731:9" pos:end="731:75">/* If the load segment requests extra zeros (e.g. bss), map it.  */</comment>

        <if_stmt pos:start="733:9" pos:end="741:9"><if pos:start="733:9" pos:end="741:9">if <condition pos:start="733:12" pos:end="733:51">(<expr pos:start="733:13" pos:end="733:50"><name pos:start="733:13" pos:end="733:30"><name pos:start="733:13" pos:end="733:20">elf_ppnt</name><operator pos:start="733:21" pos:end="733:22">-&gt;</operator><name pos:start="733:23" pos:end="733:30">p_filesz</name></name> <operator pos:start="733:32" pos:end="733:32">&lt;</operator> <name pos:start="733:34" pos:end="733:50"><name pos:start="733:34" pos:end="733:41">elf_ppnt</name><operator pos:start="733:42" pos:end="733:43">-&gt;</operator><name pos:start="733:44" pos:end="733:50">p_memsz</name></name></expr>)</condition> <block pos:start="733:53" pos:end="741:9">{<block_content pos:start="735:13" pos:end="739:57">

            <decl_stmt pos:start="735:13" pos:end="735:59"><decl pos:start="735:13" pos:end="735:58"><type pos:start="735:13" pos:end="735:21"><name pos:start="735:13" pos:end="735:21">abi_ulong</name></type> <name pos:start="735:23" pos:end="735:26">base</name> <init pos:start="735:28" pos:end="735:58">= <expr pos:start="735:30" pos:end="735:58"><name pos:start="735:30" pos:end="735:38">load_bias</name> <operator pos:start="735:40" pos:end="735:40">+</operator> <name pos:start="735:42" pos:end="735:58"><name pos:start="735:42" pos:end="735:49">elf_ppnt</name><operator pos:start="735:50" pos:end="735:51">-&gt;</operator><name pos:start="735:52" pos:end="735:58">p_vaddr</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="737:13" pos:end="739:57"><expr pos:start="737:13" pos:end="739:56"><call pos:start="737:13" pos:end="739:56"><name pos:start="737:13" pos:end="737:20">zero_bss</name><argument_list pos:start="737:21" pos:end="739:56">(<argument pos:start="737:22" pos:end="737:46"><expr pos:start="737:22" pos:end="737:46"><name pos:start="737:22" pos:end="737:25">base</name> <operator pos:start="737:27" pos:end="737:27">+</operator> <name pos:start="737:29" pos:end="737:46"><name pos:start="737:29" pos:end="737:36">elf_ppnt</name><operator pos:start="737:37" pos:end="737:38">-&gt;</operator><name pos:start="737:39" pos:end="737:46">p_filesz</name></name></expr></argument>,

                     <argument pos:start="739:22" pos:end="739:45"><expr pos:start="739:22" pos:end="739:45"><name pos:start="739:22" pos:end="739:25">base</name> <operator pos:start="739:27" pos:end="739:27">+</operator> <name pos:start="739:29" pos:end="739:45"><name pos:start="739:29" pos:end="739:36">elf_ppnt</name><operator pos:start="739:37" pos:end="739:38">-&gt;</operator><name pos:start="739:39" pos:end="739:45">p_memsz</name></name></expr></argument>, <argument pos:start="739:48" pos:end="739:55"><expr pos:start="739:48" pos:end="739:55"><name pos:start="739:48" pos:end="739:55">elf_prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="747:5" pos:end="747:27"><expr pos:start="747:5" pos:end="747:26"><name pos:start="747:5" pos:end="747:13">elf_entry</name> <operator pos:start="747:15" pos:end="747:16">+=</operator> <name pos:start="747:18" pos:end="747:26">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="749:5" pos:end="749:25"><expr pos:start="749:5" pos:end="749:24"><name pos:start="749:5" pos:end="749:11">elf_brk</name> <operator pos:start="749:13" pos:end="749:14">+=</operator> <name pos:start="749:16" pos:end="749:24">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="751:5" pos:end="751:28"><expr pos:start="751:5" pos:end="751:27"><name pos:start="751:5" pos:end="751:14">start_code</name> <operator pos:start="751:16" pos:end="751:17">+=</operator> <name pos:start="751:19" pos:end="751:27">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="753:5" pos:end="753:26"><expr pos:start="753:5" pos:end="753:25"><name pos:start="753:5" pos:end="753:12">end_code</name> <operator pos:start="753:14" pos:end="753:15">+=</operator> <name pos:start="753:17" pos:end="753:25">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="755:5" pos:end="755:28"><expr pos:start="755:5" pos:end="755:27"><name pos:start="755:5" pos:end="755:14">start_data</name> <operator pos:start="755:16" pos:end="755:17">+=</operator> <name pos:start="755:19" pos:end="755:27">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="757:5" pos:end="757:26"><expr pos:start="757:5" pos:end="757:25"><name pos:start="757:5" pos:end="757:12">end_data</name> <operator pos:start="757:14" pos:end="757:15">+=</operator> <name pos:start="757:17" pos:end="757:25">load_bias</name></expr>;</expr_stmt>



    <if_stmt pos:start="761:5" pos:end="797:5"><if pos:start="761:5" pos:end="797:5">if <condition pos:start="761:8" pos:end="761:24">(<expr pos:start="761:9" pos:end="761:23"><name pos:start="761:9" pos:end="761:23">elf_interpreter</name></expr>)</condition> <block pos:start="761:26" pos:end="797:5">{<block_content pos:start="763:9" pos:end="795:9">

        <if_stmt pos:start="763:9" pos:end="773:9"><if pos:start="763:9" pos:end="767:9">if <condition pos:start="763:12" pos:end="763:33">(<expr pos:start="763:13" pos:end="763:32"><name pos:start="763:13" pos:end="763:28">interpreter_type</name> <operator pos:start="763:30" pos:end="763:30">&amp;</operator> <literal type="number" pos:start="763:32" pos:end="763:32">1</literal></expr>)</condition> <block pos:start="763:35" pos:end="767:9">{<block_content pos:start="765:13" pos:end="765:69">

            <expr_stmt pos:start="765:13" pos:end="765:69"><expr pos:start="765:13" pos:end="765:68"><name pos:start="765:13" pos:end="765:21">elf_entry</name> <operator pos:start="765:23" pos:end="765:23">=</operator> <call pos:start="765:25" pos:end="765:68"><name pos:start="765:25" pos:end="765:40">load_aout_interp</name><argument_list pos:start="765:41" pos:end="765:68">(<argument pos:start="765:42" pos:end="765:51"><expr pos:start="765:42" pos:end="765:51"><operator pos:start="765:42" pos:end="765:42">&amp;</operator><name pos:start="765:43" pos:end="765:51">interp_ex</name></expr></argument>, <argument pos:start="765:54" pos:end="765:67"><expr pos:start="765:54" pos:end="765:67"><name pos:start="765:54" pos:end="765:67">interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="767:11" pos:end="773:9">else if <condition pos:start="767:19" pos:end="767:40">(<expr pos:start="767:20" pos:end="767:39"><name pos:start="767:20" pos:end="767:35">interpreter_type</name> <operator pos:start="767:37" pos:end="767:37">&amp;</operator> <literal type="number" pos:start="767:39" pos:end="767:39">2</literal></expr>)</condition> <block pos:start="767:42" pos:end="773:9">{<block_content pos:start="769:13" pos:end="771:70">

            <expr_stmt pos:start="769:13" pos:end="771:70"><expr pos:start="769:13" pos:end="771:69"><name pos:start="769:13" pos:end="769:21">elf_entry</name> <operator pos:start="769:23" pos:end="769:23">=</operator> <call pos:start="769:25" pos:end="771:69"><name pos:start="769:25" pos:end="769:39">load_elf_interp</name><argument_list pos:start="769:40" pos:end="771:69">(<argument pos:start="769:41" pos:end="769:54"><expr pos:start="769:41" pos:end="769:54"><operator pos:start="769:41" pos:end="769:41">&amp;</operator><name pos:start="769:42" pos:end="769:54">interp_elf_ex</name></expr></argument>, <argument pos:start="769:57" pos:end="769:70"><expr pos:start="769:57" pos:end="769:70"><name pos:start="769:57" pos:end="769:70">interpreter_fd</name></expr></argument>,

                                        <argument pos:start="771:41" pos:end="771:57"><expr pos:start="771:41" pos:end="771:57"><operator pos:start="771:41" pos:end="771:41">&amp;</operator><name pos:start="771:42" pos:end="771:57">interp_load_addr</name></expr></argument>, <argument pos:start="771:60" pos:end="771:68"><expr pos:start="771:60" pos:end="771:68"><name pos:start="771:60" pos:end="771:68"><name pos:start="771:60" pos:end="771:63">bprm</name><operator pos:start="771:64" pos:end="771:65">-&gt;</operator><name pos:start="771:66" pos:end="771:68">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="775:9" pos:end="775:43"><expr pos:start="775:9" pos:end="775:42"><name pos:start="775:9" pos:end="775:23">reloc_func_desc</name> <operator pos:start="775:25" pos:end="775:25">=</operator> <name pos:start="775:27" pos:end="775:42">interp_load_addr</name></expr>;</expr_stmt>



        <expr_stmt pos:start="779:9" pos:end="779:30"><expr pos:start="779:9" pos:end="779:29"><call pos:start="779:9" pos:end="779:29"><name pos:start="779:9" pos:end="779:13">close</name><argument_list pos:start="779:14" pos:end="779:29">(<argument pos:start="779:15" pos:end="779:28"><expr pos:start="779:15" pos:end="779:28"><name pos:start="779:15" pos:end="779:28">interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="781:9" pos:end="781:30"><expr pos:start="781:9" pos:end="781:29"><call pos:start="781:9" pos:end="781:29"><name pos:start="781:9" pos:end="781:12">free</name><argument_list pos:start="781:13" pos:end="781:29">(<argument pos:start="781:14" pos:end="781:28"><expr pos:start="781:14" pos:end="781:28"><name pos:start="781:14" pos:end="781:28">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="785:9" pos:end="795:9"><if pos:start="785:9" pos:end="795:9">if <condition pos:start="785:12" pos:end="785:43">(<expr pos:start="785:13" pos:end="785:42"><name pos:start="785:13" pos:end="785:21">elf_entry</name> <operator pos:start="785:23" pos:end="785:24">==</operator> <operator pos:start="785:26" pos:end="785:26">~</operator><operator pos:start="785:27" pos:end="785:27">(</operator><operator pos:start="785:28" pos:end="785:28">(</operator><name pos:start="785:29" pos:end="785:37">abi_ulong</name><operator pos:start="785:38" pos:end="785:38">)</operator><literal type="number" pos:start="785:39" pos:end="785:41">0UL</literal><operator pos:start="785:42" pos:end="785:42">)</operator></expr>)</condition> <block pos:start="785:45" pos:end="795:9">{<block_content pos:start="787:13" pos:end="793:21">

            <expr_stmt pos:start="787:13" pos:end="787:51"><expr pos:start="787:13" pos:end="787:50"><call pos:start="787:13" pos:end="787:50"><name pos:start="787:13" pos:end="787:18">printf</name><argument_list pos:start="787:19" pos:end="787:50">(<argument pos:start="787:20" pos:end="787:49"><expr pos:start="787:20" pos:end="787:49"><literal type="string" pos:start="787:20" pos:end="787:49">"Unable to load interpreter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="789:13" pos:end="789:29"><expr pos:start="789:13" pos:end="789:28"><call pos:start="789:13" pos:end="789:28"><name pos:start="789:13" pos:end="789:16">free</name><argument_list pos:start="789:17" pos:end="789:28">(<argument pos:start="789:18" pos:end="789:27"><expr pos:start="789:18" pos:end="789:27"><name pos:start="789:18" pos:end="789:27">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="791:13" pos:end="791:21"><expr pos:start="791:13" pos:end="791:20"><call pos:start="791:13" pos:end="791:20"><name pos:start="791:13" pos:end="791:16">exit</name><argument_list pos:start="791:17" pos:end="791:20">(<argument pos:start="791:18" pos:end="791:19"><expr pos:start="791:18" pos:end="791:19"><operator pos:start="791:18" pos:end="791:18">-</operator><literal type="number" pos:start="791:19" pos:end="791:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="793:13" pos:end="793:21">return <expr pos:start="793:20" pos:end="793:20"><literal type="number" pos:start="793:20" pos:end="793:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="801:5" pos:end="801:21"><expr pos:start="801:5" pos:end="801:20"><call pos:start="801:5" pos:end="801:20"><name pos:start="801:5" pos:end="801:8">free</name><argument_list pos:start="801:9" pos:end="801:20">(<argument pos:start="801:10" pos:end="801:19"><expr pos:start="801:10" pos:end="801:19"><name pos:start="801:10" pos:end="801:19">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="805:5" pos:end="809:5"><if pos:start="805:5" pos:end="809:5">if <condition pos:start="805:8" pos:end="805:27">(<expr pos:start="805:9" pos:end="805:26"><call pos:start="805:9" pos:end="805:26"><name pos:start="805:9" pos:end="805:24">qemu_log_enabled</name><argument_list pos:start="805:25" pos:end="805:26">()</argument_list></call></expr>)</condition> <block pos:start="805:29" pos:end="809:5">{<block_content pos:start="807:9" pos:end="807:51">

        <expr_stmt pos:start="807:9" pos:end="807:51"><expr pos:start="807:9" pos:end="807:50"><call pos:start="807:9" pos:end="807:50"><name pos:start="807:9" pos:end="807:20">load_symbols</name><argument_list pos:start="807:21" pos:end="807:50">(<argument pos:start="807:22" pos:end="807:28"><expr pos:start="807:22" pos:end="807:28"><operator pos:start="807:22" pos:end="807:22">&amp;</operator><name pos:start="807:23" pos:end="807:28">elf_ex</name></expr></argument>, <argument pos:start="807:31" pos:end="807:38"><expr pos:start="807:31" pos:end="807:38"><name pos:start="807:31" pos:end="807:38"><name pos:start="807:31" pos:end="807:34">bprm</name><operator pos:start="807:35" pos:end="807:36">-&gt;</operator><name pos:start="807:37" pos:end="807:38">fd</name></name></expr></argument>, <argument pos:start="807:41" pos:end="807:49"><expr pos:start="807:41" pos:end="807:49"><name pos:start="807:41" pos:end="807:49">load_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="813:5" pos:end="813:62"><if pos:start="813:5" pos:end="813:62">if <condition pos:start="813:8" pos:end="813:45">(<expr pos:start="813:9" pos:end="813:44"><name pos:start="813:9" pos:end="813:24">interpreter_type</name> <operator pos:start="813:26" pos:end="813:27">!=</operator> <name pos:start="813:29" pos:end="813:44">INTERPRETER_AOUT</name></expr>)</condition><block type="pseudo" pos:start="813:47" pos:end="813:62"><block_content pos:start="813:47" pos:end="813:62"> <expr_stmt pos:start="813:47" pos:end="813:62"><expr pos:start="813:47" pos:end="813:61"><call pos:start="813:47" pos:end="813:61"><name pos:start="813:47" pos:end="813:51">close</name><argument_list pos:start="813:52" pos:end="813:61">(<argument pos:start="813:53" pos:end="813:60"><expr pos:start="813:53" pos:end="813:60"><name pos:start="813:53" pos:end="813:60"><name pos:start="813:53" pos:end="813:56">bprm</name><operator pos:start="813:57" pos:end="813:58">-&gt;</operator><name pos:start="813:59" pos:end="813:60">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="815:5" pos:end="820:0"><expr pos:start="815:5" pos:end="815:66"><name pos:start="815:5" pos:end="815:21"><name pos:start="815:5" pos:end="815:8">info</name><operator pos:start="815:9" pos:end="815:10">-&gt;</operator><name pos:start="815:11" pos:end="815:21">personality</name></name> <operator pos:start="815:23" pos:end="815:23">=</operator> <operator pos:start="815:25" pos:end="815:25">(</operator><ternary pos:start="815:26" pos:end="815:65"><condition pos:start="815:26" pos:end="815:44"><expr pos:start="815:26" pos:end="815:42"><name pos:start="815:26" pos:end="815:42">ibcs2_interpreter</name></expr> ?</condition><then pos:start="815:46" pos:end="815:53"> <expr pos:start="815:46" pos:end="815:53"><name pos:start="815:46" pos:end="815:53">PER_SVR4</name></expr> </then><else pos:start="815:55" pos:end="815:65">: <expr pos:start="815:57" pos:end="815:65"><name pos:start="815:57" pos:end="815:65">PER_LINUX</name></expr></else></ternary><operator pos:start="815:66" pos:end="815:66">)</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="819:1" pos:end="819:20">#<cpp:directive pos:start="819:2" pos:end="819:6">ifdef</cpp:directive> <name pos:start="819:8" pos:end="819:20">LOW_ELF_STACK</name></cpp:ifdef>

    <expr_stmt pos:start="821:5" pos:end="824:0"><expr pos:start="821:5" pos:end="821:47"><name pos:start="821:5" pos:end="821:21"><name pos:start="821:5" pos:end="821:8">info</name><operator pos:start="821:9" pos:end="821:10">-&gt;</operator><name pos:start="821:11" pos:end="821:21">start_stack</name></name> <operator pos:start="821:23" pos:end="821:23">=</operator> <name pos:start="821:25" pos:end="821:31"><name pos:start="821:25" pos:end="821:28">bprm</name><operator pos:start="821:29" pos:end="821:30">-&gt;</operator><name pos:start="821:31" pos:end="821:31">p</name></name> <operator pos:start="821:33" pos:end="821:33">=</operator> <name pos:start="821:35" pos:end="821:43">elf_stack</name> <operator pos:start="821:45" pos:end="821:45">-</operator> <literal type="number" pos:start="821:47" pos:end="821:47">4</literal></expr>;</expr_stmt>

<cpp:endif pos:start="823:1" pos:end="823:6">#<cpp:directive pos:start="823:2" pos:end="823:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="825:5" pos:end="839:38"><expr pos:start="825:5" pos:end="839:37"><name pos:start="825:5" pos:end="825:11"><name pos:start="825:5" pos:end="825:8">bprm</name><operator pos:start="825:9" pos:end="825:10">-&gt;</operator><name pos:start="825:11" pos:end="825:11">p</name></name> <operator pos:start="825:13" pos:end="825:13">=</operator> <call pos:start="825:15" pos:end="839:37"><name pos:start="825:15" pos:end="825:31">create_elf_tables</name><argument_list pos:start="825:32" pos:end="839:37">(<argument pos:start="825:33" pos:end="825:39"><expr pos:start="825:33" pos:end="825:39"><name pos:start="825:33" pos:end="825:39"><name pos:start="825:33" pos:end="825:36">bprm</name><operator pos:start="825:37" pos:end="825:38">-&gt;</operator><name pos:start="825:39" pos:end="825:39">p</name></name></expr></argument>,

                                <argument pos:start="827:33" pos:end="827:42"><expr pos:start="827:33" pos:end="827:42"><name pos:start="827:33" pos:end="827:42"><name pos:start="827:33" pos:end="827:36">bprm</name><operator pos:start="827:37" pos:end="827:38">-&gt;</operator><name pos:start="827:39" pos:end="827:42">argc</name></name></expr></argument>,

                                <argument pos:start="829:33" pos:end="829:42"><expr pos:start="829:33" pos:end="829:42"><name pos:start="829:33" pos:end="829:42"><name pos:start="829:33" pos:end="829:36">bprm</name><operator pos:start="829:37" pos:end="829:38">-&gt;</operator><name pos:start="829:39" pos:end="829:42">envc</name></name></expr></argument>,

                                <argument pos:start="831:33" pos:end="831:39"><expr pos:start="831:33" pos:end="831:39"><operator pos:start="831:33" pos:end="831:33">&amp;</operator><name pos:start="831:34" pos:end="831:39">elf_ex</name></expr></argument>,

                                <argument pos:start="833:33" pos:end="833:41"><expr pos:start="833:33" pos:end="833:41"><name pos:start="833:33" pos:end="833:41">load_addr</name></expr></argument>, <argument pos:start="833:44" pos:end="833:52"><expr pos:start="833:44" pos:end="833:52"><name pos:start="833:44" pos:end="833:52">load_bias</name></expr></argument>,

                                <argument pos:start="835:33" pos:end="835:48"><expr pos:start="835:33" pos:end="835:48"><name pos:start="835:33" pos:end="835:48">interp_load_addr</name></expr></argument>,

                                <argument pos:start="837:33" pos:end="837:78"><expr pos:start="837:33" pos:end="837:78"><operator pos:start="837:33" pos:end="837:33">(</operator><ternary pos:start="837:34" pos:end="837:77"><condition pos:start="837:34" pos:end="837:71"><expr pos:start="837:34" pos:end="837:69"><name pos:start="837:34" pos:end="837:49">interpreter_type</name> <operator pos:start="837:51" pos:end="837:52">==</operator> <name pos:start="837:54" pos:end="837:69">INTERPRETER_AOUT</name></expr> ?</condition><then pos:start="837:73" pos:end="837:73"> <expr pos:start="837:73" pos:end="837:73"><literal type="number" pos:start="837:73" pos:end="837:73">0</literal></expr> </then><else pos:start="837:75" pos:end="837:77">: <expr pos:start="837:77" pos:end="837:77"><literal type="number" pos:start="837:77" pos:end="837:77">1</literal></expr></else></ternary><operator pos:start="837:78" pos:end="837:78">)</operator></expr></argument>,

                                <argument pos:start="839:33" pos:end="839:36"><expr pos:start="839:33" pos:end="839:36"><name pos:start="839:33" pos:end="839:36">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="841:5" pos:end="841:38"><expr pos:start="841:5" pos:end="841:37"><name pos:start="841:5" pos:end="841:19"><name pos:start="841:5" pos:end="841:8">info</name><operator pos:start="841:9" pos:end="841:10">-&gt;</operator><name pos:start="841:11" pos:end="841:19">load_addr</name></name> <operator pos:start="841:21" pos:end="841:21">=</operator> <name pos:start="841:23" pos:end="841:37">reloc_func_desc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="843:5" pos:end="843:42"><expr pos:start="843:5" pos:end="843:41"><name pos:start="843:5" pos:end="843:19"><name pos:start="843:5" pos:end="843:8">info</name><operator pos:start="843:9" pos:end="843:10">-&gt;</operator><name pos:start="843:11" pos:end="843:19">start_brk</name></name> <operator pos:start="843:21" pos:end="843:21">=</operator> <name pos:start="843:23" pos:end="843:31"><name pos:start="843:23" pos:end="843:26">info</name><operator pos:start="843:27" pos:end="843:28">-&gt;</operator><name pos:start="843:29" pos:end="843:31">brk</name></name> <operator pos:start="843:33" pos:end="843:33">=</operator> <name pos:start="843:35" pos:end="843:41">elf_brk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="845:5" pos:end="845:30"><expr pos:start="845:5" pos:end="845:29"><name pos:start="845:5" pos:end="845:18"><name pos:start="845:5" pos:end="845:8">info</name><operator pos:start="845:9" pos:end="845:10">-&gt;</operator><name pos:start="845:11" pos:end="845:18">end_code</name></name> <operator pos:start="845:20" pos:end="845:20">=</operator> <name pos:start="845:22" pos:end="845:29">end_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="847:5" pos:end="847:34"><expr pos:start="847:5" pos:end="847:33"><name pos:start="847:5" pos:end="847:20"><name pos:start="847:5" pos:end="847:8">info</name><operator pos:start="847:9" pos:end="847:10">-&gt;</operator><name pos:start="847:11" pos:end="847:20">start_code</name></name> <operator pos:start="847:22" pos:end="847:22">=</operator> <name pos:start="847:24" pos:end="847:33">start_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="849:5" pos:end="849:34"><expr pos:start="849:5" pos:end="849:33"><name pos:start="849:5" pos:end="849:20"><name pos:start="849:5" pos:end="849:8">info</name><operator pos:start="849:9" pos:end="849:10">-&gt;</operator><name pos:start="849:11" pos:end="849:20">start_data</name></name> <operator pos:start="849:22" pos:end="849:22">=</operator> <name pos:start="849:24" pos:end="849:33">start_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="851:5" pos:end="851:30"><expr pos:start="851:5" pos:end="851:29"><name pos:start="851:5" pos:end="851:18"><name pos:start="851:5" pos:end="851:8">info</name><operator pos:start="851:9" pos:end="851:10">-&gt;</operator><name pos:start="851:11" pos:end="851:18">end_data</name></name> <operator pos:start="851:20" pos:end="851:20">=</operator> <name pos:start="851:22" pos:end="851:29">end_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="853:5" pos:end="872:0"><expr pos:start="853:5" pos:end="853:31"><name pos:start="853:5" pos:end="853:21"><name pos:start="853:5" pos:end="853:8">info</name><operator pos:start="853:9" pos:end="853:10">-&gt;</operator><name pos:start="853:11" pos:end="853:21">start_stack</name></name> <operator pos:start="853:23" pos:end="853:23">=</operator> <name pos:start="853:25" pos:end="853:31"><name pos:start="853:25" pos:end="853:28">bprm</name><operator pos:start="853:29" pos:end="853:30">-&gt;</operator><name pos:start="853:31" pos:end="853:31">p</name></name></expr>;</expr_stmt>



<cpp:if pos:start="857:1" pos:end="857:5">#<cpp:directive pos:start="857:2" pos:end="857:3">if</cpp:directive> <expr pos:start="857:5" pos:end="857:5"><literal type="number" pos:start="857:5" pos:end="857:5">0</literal></expr></cpp:if>

    printf("(start_brk) %x\n" , info-&gt;start_brk);

    printf("(end_code) %x\n" , info-&gt;end_code);

    printf("(start_code) %x\n" , info-&gt;start_code);

    printf("(end_data) %x\n" , info-&gt;end_data);

    printf("(start_stack) %x\n" , info-&gt;start_stack);

    printf("(brk) %x\n" , info-&gt;brk);

<cpp:endif pos:start="871:1" pos:end="871:6">#<cpp:directive pos:start="871:2" pos:end="871:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="875:5" pos:end="891:5"><if pos:start="875:5" pos:end="891:5">if <condition pos:start="875:8" pos:end="875:40">( <expr pos:start="875:10" pos:end="875:38"><name pos:start="875:10" pos:end="875:26"><name pos:start="875:10" pos:end="875:13">info</name><operator pos:start="875:14" pos:end="875:15">-&gt;</operator><name pos:start="875:16" pos:end="875:26">personality</name></name> <operator pos:start="875:28" pos:end="875:29">==</operator> <name pos:start="875:31" pos:end="875:38">PER_SVR4</name></expr> )</condition>

    <block pos:start="877:5" pos:end="891:5">{<block_content pos:start="887:9" pos:end="889:66">

        <comment type="block" pos:start="879:9" pos:end="885:48">/* Why this, you ask???  Well SVr4 maps page 0 as read-only,

           and some applications "depend" upon this behavior.

           Since we do not have the power to recompile these, we

           emulate the SVr4 behavior.  Sigh.  */</comment>

        <expr_stmt pos:start="887:9" pos:end="889:66"><expr pos:start="887:9" pos:end="889:65"><name pos:start="887:9" pos:end="887:19">mapped_addr</name> <operator pos:start="887:21" pos:end="887:21">=</operator> <call pos:start="887:23" pos:end="889:65"><name pos:start="887:23" pos:end="887:33">target_mmap</name><argument_list pos:start="887:34" pos:end="889:65">(<argument pos:start="887:35" pos:end="887:35"><expr pos:start="887:35" pos:end="887:35"><literal type="number" pos:start="887:35" pos:end="887:35">0</literal></expr></argument>, <argument pos:start="887:38" pos:end="887:56"><expr pos:start="887:38" pos:end="887:56"><name pos:start="887:38" pos:end="887:56">qemu_host_page_size</name></expr></argument>, <argument pos:start="887:59" pos:end="887:79"><expr pos:start="887:59" pos:end="887:79"><name pos:start="887:59" pos:end="887:67">PROT_READ</name> <operator pos:start="887:69" pos:end="887:69">|</operator> <name pos:start="887:71" pos:end="887:79">PROT_EXEC</name></expr></argument>,

                                  <argument pos:start="889:35" pos:end="889:57"><expr pos:start="889:35" pos:end="889:57"><name pos:start="889:35" pos:end="889:43">MAP_FIXED</name> <operator pos:start="889:45" pos:end="889:45">|</operator> <name pos:start="889:47" pos:end="889:57">MAP_PRIVATE</name></expr></argument>, <argument pos:start="889:60" pos:end="889:61"><expr pos:start="889:60" pos:end="889:61"><operator pos:start="889:60" pos:end="889:60">-</operator><literal type="number" pos:start="889:61" pos:end="889:61">1</literal></expr></argument>, <argument pos:start="889:64" pos:end="889:64"><expr pos:start="889:64" pos:end="889:64"><literal type="number" pos:start="889:64" pos:end="889:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="895:5" pos:end="900:0"><expr pos:start="895:5" pos:end="895:27"><name pos:start="895:5" pos:end="895:15"><name pos:start="895:5" pos:end="895:8">info</name><operator pos:start="895:9" pos:end="895:10">-&gt;</operator><name pos:start="895:11" pos:end="895:15">entry</name></name> <operator pos:start="895:17" pos:end="895:17">=</operator> <name pos:start="895:19" pos:end="895:27">elf_entry</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="899:1" pos:end="899:24">#<cpp:directive pos:start="899:2" pos:end="899:6">ifdef</cpp:directive> <name pos:start="899:8" pos:end="899:24">USE_ELF_CORE_DUMP</name></cpp:ifdef>

    <expr_stmt pos:start="901:5" pos:end="904:0"><expr pos:start="901:5" pos:end="901:36"><name pos:start="901:5" pos:end="901:19"><name pos:start="901:5" pos:end="901:8">bprm</name><operator pos:start="901:9" pos:end="901:10">-&gt;</operator><name pos:start="901:11" pos:end="901:19">core_dump</name></name> <operator pos:start="901:21" pos:end="901:21">=</operator> <operator pos:start="901:23" pos:end="901:23">&amp;</operator><name pos:start="901:24" pos:end="901:36">elf_core_dump</name></expr>;</expr_stmt>

<cpp:endif pos:start="903:1" pos:end="903:6">#<cpp:directive pos:start="903:2" pos:end="903:6">endif</cpp:directive></cpp:endif>



    <return pos:start="907:5" pos:end="907:13">return <expr pos:start="907:12" pos:end="907:12"><literal type="number" pos:start="907:12" pos:end="907:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
