<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23798.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">predictor_decompress_fir_adapt</name><parameter_list pos:start="1:43" pos:end="13:72">(<parameter pos:start="1:44" pos:end="1:64"><decl pos:start="1:44" pos:end="1:64"><type pos:start="1:44" pos:end="1:64"><name pos:start="1:44" pos:end="1:50">int32_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:64">error_buffer</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:62"><decl pos:start="3:44" pos:end="3:62"><type pos:start="3:44" pos:end="3:62"><name pos:start="3:44" pos:end="3:50">int32_t</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:62">buffer_out</name></decl></parameter>,

                                           <parameter pos:start="5:44" pos:end="5:58"><decl pos:start="5:44" pos:end="5:58"><type pos:start="5:44" pos:end="5:58"><name pos:start="5:44" pos:end="5:46">int</name></type> <name pos:start="5:48" pos:end="5:58">output_size</name></decl></parameter>,

                                           <parameter pos:start="7:44" pos:end="7:61"><decl pos:start="7:44" pos:end="7:61"><type pos:start="7:44" pos:end="7:61"><name pos:start="7:44" pos:end="7:46">int</name></type> <name pos:start="7:48" pos:end="7:61">readsamplesize</name></decl></parameter>,

                                           <parameter pos:start="9:44" pos:end="9:72"><decl pos:start="9:44" pos:end="9:72"><type pos:start="9:44" pos:end="9:72"><name pos:start="9:44" pos:end="9:50">int16_t</name> <modifier pos:start="9:52" pos:end="9:52">*</modifier></type><name pos:start="9:53" pos:end="9:72">predictor_coef_table</name></decl></parameter>,

                                           <parameter pos:start="11:44" pos:end="11:65"><decl pos:start="11:44" pos:end="11:65"><type pos:start="11:44" pos:end="11:65"><name pos:start="11:44" pos:end="11:46">int</name></type> <name pos:start="11:48" pos:end="11:65">predictor_coef_num</name></decl></parameter>,

                                           <parameter pos:start="13:44" pos:end="13:71"><decl pos:start="13:44" pos:end="13:71"><type pos:start="13:44" pos:end="13:71"><name pos:start="13:44" pos:end="13:46">int</name></type> <name pos:start="13:48" pos:end="13:71">predictor_quantitization</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="149:1">{<block_content pos:start="17:5" pos:end="147:5">

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:36">/* first sample always copies */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:15">buffer_out</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">*</operator><name pos:start="23:20" pos:end="23:31">error_buffer</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="41:5"><if pos:start="27:5" pos:end="41:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:27">predictor_coef_num</name></expr>)</condition> <block pos:start="27:30" pos:end="41:5">{<block_content pos:start="29:9" pos:end="39:15">

        <if_stmt pos:start="29:9" pos:end="31:19"><if pos:start="29:9" pos:end="31:19">if <condition pos:start="29:12" pos:end="29:29">(<expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:23">output_size</name> <operator pos:start="29:25" pos:end="29:26">&lt;=</operator> <literal type="number" pos:start="29:28" pos:end="29:28">1</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:19"><block_content pos:start="31:13" pos:end="31:19">

            <return pos:start="31:13" pos:end="31:19">return;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="37:56"><expr pos:start="35:9" pos:end="37:55"><call pos:start="35:9" pos:end="37:55"><name pos:start="35:9" pos:end="35:14">memcpy</name><argument_list pos:start="35:15" pos:end="37:55">(<argument pos:start="35:16" pos:end="35:29"><expr pos:start="35:16" pos:end="35:29"><operator pos:start="35:16" pos:end="35:16">&amp;</operator><name pos:start="35:17" pos:end="35:29"><name pos:start="35:17" pos:end="35:26">buffer_out</name><index pos:start="35:27" pos:end="35:29">[<expr pos:start="35:28" pos:end="35:28"><literal type="number" pos:start="35:28" pos:end="35:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="35:32" pos:end="35:47"><expr pos:start="35:32" pos:end="35:47"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:47"><name pos:start="35:33" pos:end="35:44">error_buffer</name><index pos:start="35:45" pos:end="35:47">[<expr pos:start="35:46" pos:end="35:46"><literal type="number" pos:start="35:46" pos:end="35:46">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="37:16" pos:end="37:54"><expr pos:start="37:16" pos:end="37:54"><operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:27">output_size</name> <operator pos:start="37:29" pos:end="37:29">-</operator> <literal type="number" pos:start="37:31" pos:end="37:31">1</literal><operator pos:start="37:32" pos:end="37:32">)</operator> <operator pos:start="37:34" pos:end="37:34">*</operator> <sizeof pos:start="37:36" pos:end="37:54">sizeof<argument_list pos:start="37:42" pos:end="37:54">(<argument pos:start="37:43" pos:end="37:53"><expr pos:start="37:43" pos:end="37:53"><operator pos:start="37:43" pos:end="37:43">*</operator><name pos:start="37:44" pos:end="37:53">buffer_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="63:5"><if pos:start="45:5" pos:end="63:5">if <condition pos:start="45:8" pos:end="45:33">(<expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:26">predictor_coef_num</name> <operator pos:start="45:28" pos:end="45:29">==</operator> <literal type="number" pos:start="45:31" pos:end="45:32">31</literal></expr>)</condition> <block pos:start="45:35" pos:end="63:5">{<block_content pos:start="49:9" pos:end="61:15">

        <comment type="block" pos:start="47:9" pos:end="47:41">/* simple 1st-order prediction */</comment>

        <if_stmt pos:start="49:9" pos:end="51:19"><if pos:start="49:9" pos:end="51:19">if <condition pos:start="49:12" pos:end="49:29">(<expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:23">output_size</name> <operator pos:start="49:25" pos:end="49:26">&lt;=</operator> <literal type="number" pos:start="49:28" pos:end="49:28">1</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:19"><block_content pos:start="51:13" pos:end="51:19">

            <return pos:start="51:13" pos:end="51:19">return;</return></block_content></block></if></if_stmt>

        <for pos:start="53:9" pos:end="59:9">for <control pos:start="53:13" pos:end="53:41">(<init pos:start="53:14" pos:end="53:19"><expr pos:start="53:14" pos:end="53:18"><name pos:start="53:14" pos:end="53:14">i</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">1</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:36"><expr pos:start="53:21" pos:end="53:35"><name pos:start="53:21" pos:end="53:21">i</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <name pos:start="53:25" pos:end="53:35">output_size</name></expr>;</condition> <incr pos:start="53:38" pos:end="53:40"><expr pos:start="53:38" pos:end="53:40"><name pos:start="53:38" pos:end="53:38">i</name><operator pos:start="53:39" pos:end="53:40">++</operator></expr></incr>)</control> <block pos:start="53:43" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:56">

            <expr_stmt pos:start="55:13" pos:end="57:56"><expr pos:start="55:13" pos:end="57:55"><name pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:22">buffer_out</name><index pos:start="55:23" pos:end="55:25">[<expr pos:start="55:24" pos:end="55:24"><name pos:start="55:24" pos:end="55:24">i</name></expr>]</index></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <call pos:start="55:29" pos:end="57:55"><name pos:start="55:29" pos:end="55:39">sign_extend</name><argument_list pos:start="55:40" pos:end="57:55">(<argument pos:start="55:41" pos:end="55:75"><expr pos:start="55:41" pos:end="55:75"><name pos:start="55:41" pos:end="55:57"><name pos:start="55:41" pos:end="55:50">buffer_out</name><index pos:start="55:51" pos:end="55:57">[<expr pos:start="55:52" pos:end="55:56"><name pos:start="55:52" pos:end="55:52">i</name> <operator pos:start="55:54" pos:end="55:54">-</operator> <literal type="number" pos:start="55:56" pos:end="55:56">1</literal></expr>]</index></name> <operator pos:start="55:59" pos:end="55:59">+</operator> <name pos:start="55:61" pos:end="55:75"><name pos:start="55:61" pos:end="55:72">error_buffer</name><index pos:start="55:73" pos:end="55:75">[<expr pos:start="55:74" pos:end="55:74"><name pos:start="55:74" pos:end="55:74">i</name></expr>]</index></name></expr></argument>,

                                        <argument pos:start="57:41" pos:end="57:54"><expr pos:start="57:41" pos:end="57:54"><name pos:start="57:41" pos:end="57:54">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:30">/* read warm-up samples */</comment>

    <for pos:start="69:5" pos:end="75:5">for <control pos:start="69:9" pos:end="69:44">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:39"><expr pos:start="69:17" pos:end="69:38"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:38">predictor_coef_num</name></expr>;</condition> <incr pos:start="69:41" pos:end="69:43"><expr pos:start="69:41" pos:end="69:43"><name pos:start="69:41" pos:end="69:41">i</name><operator pos:start="69:42" pos:end="69:43">++</operator></expr></incr>)</control> <block pos:start="69:46" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:56">

        <expr_stmt pos:start="71:9" pos:end="73:56"><expr pos:start="71:9" pos:end="73:55"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:18">buffer_out</name><index pos:start="71:19" pos:end="71:25">[<expr pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:20">i</name> <operator pos:start="71:22" pos:end="71:22">+</operator> <literal type="number" pos:start="71:24" pos:end="71:24">1</literal></expr>]</index></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <call pos:start="71:29" pos:end="73:55"><name pos:start="71:29" pos:end="71:39">sign_extend</name><argument_list pos:start="71:40" pos:end="73:55">(<argument pos:start="71:41" pos:end="71:75"><expr pos:start="71:41" pos:end="71:75"><name pos:start="71:41" pos:end="71:53"><name pos:start="71:41" pos:end="71:50">buffer_out</name><index pos:start="71:51" pos:end="71:53">[<expr pos:start="71:52" pos:end="71:52"><name pos:start="71:52" pos:end="71:52">i</name></expr>]</index></name> <operator pos:start="71:55" pos:end="71:55">+</operator> <name pos:start="71:57" pos:end="71:75"><name pos:start="71:57" pos:end="71:68">error_buffer</name><index pos:start="71:69" pos:end="71:75">[<expr pos:start="71:70" pos:end="71:74"><name pos:start="71:70" pos:end="71:70">i</name> <operator pos:start="71:72" pos:end="71:72">+</operator> <literal type="number" pos:start="71:74" pos:end="71:74">1</literal></expr>]</index></name></expr></argument>,

                                        <argument pos:start="73:41" pos:end="73:54"><expr pos:start="73:41" pos:end="73:54"><name pos:start="73:41" pos:end="73:54">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="79:5" pos:end="79:70">/* NOTE: 4 and 8 are very common cases that could be optimized. */</comment>



    <comment type="block" pos:start="83:5" pos:end="83:22">/* general case */</comment>

    <for pos:start="85:5" pos:end="147:5">for <control pos:start="85:9" pos:end="85:58">(<init pos:start="85:10" pos:end="85:32"><expr pos:start="85:10" pos:end="85:31"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <name pos:start="85:14" pos:end="85:31">predictor_coef_num</name></expr>;</init> <condition pos:start="85:34" pos:end="85:53"><expr pos:start="85:34" pos:end="85:52"><name pos:start="85:34" pos:end="85:34">i</name> <operator pos:start="85:36" pos:end="85:36">&lt;</operator> <name pos:start="85:38" pos:end="85:48">output_size</name> <operator pos:start="85:50" pos:end="85:50">-</operator> <literal type="number" pos:start="85:52" pos:end="85:52">1</literal></expr>;</condition> <incr pos:start="85:55" pos:end="85:57"><expr pos:start="85:55" pos:end="85:57"><name pos:start="85:55" pos:end="85:55">i</name><operator pos:start="85:56" pos:end="85:57">++</operator></expr></incr>)</control> <block pos:start="85:60" pos:end="147:5">{<block_content pos:start="87:9" pos:end="145:9">

        <decl_stmt pos:start="87:9" pos:end="87:14"><decl pos:start="87:9" pos:end="87:13"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:20"><decl pos:start="89:9" pos:end="89:19"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:15">val</name> <init pos:start="89:17" pos:end="89:19">= <expr pos:start="89:19" pos:end="89:19"><literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:44"><decl pos:start="91:9" pos:end="91:43"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:21">error_val</name> <init pos:start="91:23" pos:end="91:43">= <expr pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:36">error_buffer</name><index pos:start="91:37" pos:end="91:43">[<expr pos:start="91:38" pos:end="91:42"><name pos:start="91:38" pos:end="91:38">i</name> <operator pos:start="91:40" pos:end="91:40">+</operator> <literal type="number" pos:start="91:42" pos:end="91:42">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:23"><decl pos:start="93:9" pos:end="93:22"><type pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">int</name></type> <name pos:start="93:13" pos:end="93:22">error_sign</name></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:51"><decl pos:start="95:9" pos:end="95:50"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:13">d</name> <init pos:start="95:15" pos:end="95:50">= <expr pos:start="95:17" pos:end="95:50"><name pos:start="95:17" pos:end="95:50"><name pos:start="95:17" pos:end="95:26">buffer_out</name><index pos:start="95:27" pos:end="95:50">[<expr pos:start="95:28" pos:end="95:49"><name pos:start="95:28" pos:end="95:28">i</name> <operator pos:start="95:30" pos:end="95:30">-</operator> <name pos:start="95:32" pos:end="95:49">predictor_coef_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <for pos:start="99:9" pos:end="105:9">for <control pos:start="99:13" pos:end="99:48">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">j</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:43"><expr pos:start="99:21" pos:end="99:42"><name pos:start="99:21" pos:end="99:21">j</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <name pos:start="99:25" pos:end="99:42">predictor_coef_num</name></expr>;</condition> <incr pos:start="99:45" pos:end="99:47"><expr pos:start="99:45" pos:end="99:47"><name pos:start="99:45" pos:end="99:45">j</name><operator pos:start="99:46" pos:end="99:47">++</operator></expr></incr>)</control> <block pos:start="99:50" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:43">

            <expr_stmt pos:start="101:13" pos:end="103:43"><expr pos:start="101:13" pos:end="103:42"><name pos:start="101:13" pos:end="101:15">val</name> <operator pos:start="101:17" pos:end="101:18">+=</operator> <operator pos:start="101:20" pos:end="101:20">(</operator><name pos:start="101:21" pos:end="101:37"><name pos:start="101:21" pos:end="101:30">buffer_out</name><index pos:start="101:31" pos:end="101:37">[<expr pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:32">i</name> <operator pos:start="101:34" pos:end="101:34">-</operator> <name pos:start="101:36" pos:end="101:36">j</name></expr>]</index></name> <operator pos:start="101:39" pos:end="101:39">-</operator> <name pos:start="101:41" pos:end="101:41">d</name><operator pos:start="101:42" pos:end="101:42">)</operator> <operator pos:start="101:44" pos:end="101:44">*</operator>

                   <name pos:start="103:20" pos:end="103:42"><name pos:start="103:20" pos:end="103:39">predictor_coef_table</name><index pos:start="103:40" pos:end="103:42">[<expr pos:start="103:41" pos:end="103:41"><name pos:start="103:41" pos:end="103:41">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="109:9" pos:end="111:39"><expr pos:start="109:9" pos:end="111:38"><name pos:start="109:9" pos:end="109:11">val</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">(</operator><name pos:start="109:16" pos:end="109:18">val</name> <operator pos:start="109:20" pos:end="109:20">+</operator> <operator pos:start="109:22" pos:end="109:22">(</operator><literal type="number" pos:start="109:23" pos:end="109:23">1</literal> <operator pos:start="109:25" pos:end="109:26">&lt;&lt;</operator> <operator pos:start="109:28" pos:end="109:28">(</operator><name pos:start="109:29" pos:end="109:52">predictor_quantitization</name> <operator pos:start="109:54" pos:end="109:54">-</operator> <literal type="number" pos:start="109:56" pos:end="109:56">1</literal><operator pos:start="109:57" pos:end="109:57">)</operator><operator pos:start="109:58" pos:end="109:58">)</operator><operator pos:start="109:59" pos:end="109:59">)</operator> <operator pos:start="109:61" pos:end="109:62">&gt;&gt;</operator>

              <name pos:start="111:15" pos:end="111:38">predictor_quantitization</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:29"><expr pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:11">val</name> <operator pos:start="113:13" pos:end="113:14">+=</operator> <name pos:start="113:16" pos:end="113:16">d</name> <operator pos:start="113:18" pos:end="113:18">+</operator> <name pos:start="113:20" pos:end="113:28">error_val</name></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:61"><expr pos:start="117:9" pos:end="117:60"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:18">buffer_out</name><index pos:start="117:19" pos:end="117:25">[<expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:20">i</name> <operator pos:start="117:22" pos:end="117:22">+</operator> <literal type="number" pos:start="117:24" pos:end="117:24">1</literal></expr>]</index></name> <operator pos:start="117:27" pos:end="117:27">=</operator> <call pos:start="117:29" pos:end="117:60"><name pos:start="117:29" pos:end="117:39">sign_extend</name><argument_list pos:start="117:40" pos:end="117:60">(<argument pos:start="117:41" pos:end="117:43"><expr pos:start="117:41" pos:end="117:43"><name pos:start="117:41" pos:end="117:43">val</name></expr></argument>, <argument pos:start="117:46" pos:end="117:59"><expr pos:start="117:46" pos:end="117:59"><name pos:start="117:46" pos:end="117:59">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:36">/* adapt LPC coefficients */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:42"><expr pos:start="123:9" pos:end="123:41"><name pos:start="123:9" pos:end="123:18">error_sign</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="123:41"><name pos:start="123:22" pos:end="123:30">sign_only</name><argument_list pos:start="123:31" pos:end="123:41">(<argument pos:start="123:32" pos:end="123:40"><expr pos:start="123:32" pos:end="123:40"><name pos:start="123:32" pos:end="123:40">error_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="145:9"><if pos:start="125:9" pos:end="145:9">if <condition pos:start="125:12" pos:end="125:23">(<expr pos:start="125:13" pos:end="125:22"><name pos:start="125:13" pos:end="125:22">error_sign</name></expr>)</condition> <block pos:start="125:25" pos:end="145:9">{<block_content pos:start="127:13" pos:end="143:13">

            <for pos:start="127:13" pos:end="143:13">for <control pos:start="127:17" pos:end="127:87">(<init pos:start="127:18" pos:end="127:44"><expr pos:start="127:18" pos:end="127:43"><name pos:start="127:18" pos:end="127:18">j</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <name pos:start="127:22" pos:end="127:39">predictor_coef_num</name> <operator pos:start="127:41" pos:end="127:41">-</operator> <literal type="number" pos:start="127:43" pos:end="127:43">1</literal></expr>;</init> <condition pos:start="127:46" pos:end="127:82"><expr pos:start="127:46" pos:end="127:81"><name pos:start="127:46" pos:end="127:46">j</name> <operator pos:start="127:48" pos:end="127:49">&gt;=</operator> <literal type="number" pos:start="127:51" pos:end="127:51">0</literal> <operator pos:start="127:53" pos:end="127:54">&amp;&amp;</operator> <name pos:start="127:56" pos:end="127:64">error_val</name> <operator pos:start="127:66" pos:end="127:66">*</operator> <name pos:start="127:68" pos:end="127:77">error_sign</name> <operator pos:start="127:79" pos:end="127:79">&gt;</operator> <literal type="number" pos:start="127:81" pos:end="127:81">0</literal></expr>;</condition> <incr pos:start="127:84" pos:end="127:86"><expr pos:start="127:84" pos:end="127:86"><name pos:start="127:84" pos:end="127:84">j</name><operator pos:start="127:85" pos:end="127:86">--</operator></expr></incr>)</control> <block pos:start="127:89" pos:end="143:13">{<block_content pos:start="129:17" pos:end="141:56">

                <decl_stmt pos:start="129:17" pos:end="129:25"><decl pos:start="129:17" pos:end="129:24"><type pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">int</name></type> <name pos:start="129:21" pos:end="129:24">sign</name></decl>;</decl_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:45"><expr pos:start="131:17" pos:end="131:44"><name pos:start="131:17" pos:end="131:19">val</name>  <operator pos:start="131:22" pos:end="131:22">=</operator> <name pos:start="131:24" pos:end="131:24">d</name> <operator pos:start="131:26" pos:end="131:26">-</operator> <name pos:start="131:28" pos:end="131:44"><name pos:start="131:28" pos:end="131:37">buffer_out</name><index pos:start="131:38" pos:end="131:44">[<expr pos:start="131:39" pos:end="131:43"><name pos:start="131:39" pos:end="131:39">i</name> <operator pos:start="131:41" pos:end="131:41">-</operator> <name pos:start="131:43" pos:end="131:43">j</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:51"><expr pos:start="133:17" pos:end="133:50"><name pos:start="133:17" pos:end="133:20">sign</name> <operator pos:start="133:22" pos:end="133:22">=</operator> <call pos:start="133:24" pos:end="133:37"><name pos:start="133:24" pos:end="133:32">sign_only</name><argument_list pos:start="133:33" pos:end="133:37">(<argument pos:start="133:34" pos:end="133:36"><expr pos:start="133:34" pos:end="133:36"><name pos:start="133:34" pos:end="133:36">val</name></expr></argument>)</argument_list></call> <operator pos:start="133:39" pos:end="133:39">*</operator> <name pos:start="133:41" pos:end="133:50">error_sign</name></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:48"><expr pos:start="135:17" pos:end="135:47"><name pos:start="135:17" pos:end="135:39"><name pos:start="135:17" pos:end="135:36">predictor_coef_table</name><index pos:start="135:37" pos:end="135:39">[<expr pos:start="135:38" pos:end="135:38"><name pos:start="135:38" pos:end="135:38">j</name></expr>]</index></name> <operator pos:start="135:41" pos:end="135:42">-=</operator> <name pos:start="135:44" pos:end="135:47">sign</name></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:28"><expr pos:start="137:17" pos:end="137:27"><name pos:start="137:17" pos:end="137:19">val</name> <operator pos:start="137:21" pos:end="137:22">*=</operator> <name pos:start="137:24" pos:end="137:27">sign</name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="141:56"><expr pos:start="139:17" pos:end="141:55"><name pos:start="139:17" pos:end="139:25">error_val</name> <operator pos:start="139:27" pos:end="139:28">-=</operator> <operator pos:start="139:30" pos:end="139:30">(</operator><operator pos:start="139:31" pos:end="139:31">(</operator><name pos:start="139:32" pos:end="139:34">val</name> <operator pos:start="139:36" pos:end="139:37">&gt;&gt;</operator> <name pos:start="139:39" pos:end="139:62">predictor_quantitization</name><operator pos:start="139:63" pos:end="139:63">)</operator> <operator pos:start="139:65" pos:end="139:65">*</operator>

                              <operator pos:start="141:31" pos:end="141:31">(</operator><name pos:start="141:32" pos:end="141:49">predictor_coef_num</name> <operator pos:start="141:51" pos:end="141:51">-</operator> <name pos:start="141:53" pos:end="141:53">j</name><operator pos:start="141:54" pos:end="141:54">)</operator><operator pos:start="141:55" pos:end="141:55">)</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
