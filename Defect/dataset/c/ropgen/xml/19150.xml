<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19150.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:36">avcodec_open</name><parameter_list pos:start="1:37" pos:end="1:75">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:58"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:67">AVCodec</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">codec</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name><init pos:start="5:12" pos:end="5:15">= <expr pos:start="5:14" pos:end="5:15"><operator pos:start="5:14" pos:end="5:14">-</operator><literal type="number" pos:start="5:15" pos:end="5:15">1</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="11:24" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:22">

        <if_stmt pos:start="13:9" pos:end="15:22"><if pos:start="13:9" pos:end="15:22">if <condition pos:start="13:12" pos:end="13:59">(<expr pos:start="13:13" pos:end="13:58"><call pos:start="13:13" pos:end="13:58">(<modifier pos:start="13:14" pos:end="13:14">*</modifier><name pos:start="13:15" pos:end="13:27">ff_lockmgr_cb</name>)<argument_list pos:start="13:29" pos:end="13:58">(<argument pos:start="13:30" pos:end="13:41"><expr pos:start="13:30" pos:end="13:41"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:41">codec_mutex</name></expr></argument>, <argument pos:start="13:44" pos:end="13:57"><expr pos:start="13:44" pos:end="13:57"><name pos:start="13:44" pos:end="13:57">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:22"><block_content pos:start="15:13" pos:end="15:22">

            <return pos:start="15:13" pos:end="15:22">return <expr pos:start="15:20" pos:end="15:21"><operator pos:start="15:20" pos:end="15:20">-</operator><literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:28">entangled_thread_counter</name><operator pos:start="21:29" pos:end="21:30">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if<condition pos:start="23:7" pos:end="23:37">(<expr pos:start="23:8" pos:end="23:36"><name pos:start="23:8" pos:end="23:31">entangled_thread_counter</name> <operator pos:start="23:33" pos:end="23:34">!=</operator> <literal type="number" pos:start="23:36" pos:end="23:36">1</literal></expr>)</condition><block pos:start="23:38" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:97"><expr pos:start="25:9" pos:end="25:96"><call pos:start="25:9" pos:end="25:96"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:96">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:95"><expr pos:start="25:37" pos:end="25:95"><literal type="string" pos:start="25:37" pos:end="25:95">"insufficient thread locking around avcodec_open/close()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="35:17"><if pos:start="33:5" pos:end="35:17">if<condition pos:start="33:7" pos:end="33:30">(<expr pos:start="33:8" pos:end="33:29"><name pos:start="33:8" pos:end="33:19"><name pos:start="33:8" pos:end="33:12">avctx</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:19">codec</name></name> <operator pos:start="33:21" pos:end="33:22">||</operator> <operator pos:start="33:24" pos:end="33:24">!</operator><name pos:start="33:25" pos:end="33:29">codec</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:17"><block_content pos:start="35:9" pos:end="35:17">

        <goto pos:start="35:9" pos:end="35:17">goto <name pos:start="35:14" pos:end="35:16">end</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="55:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:13">codec</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:29">priv_data_size</name></name> <operator pos:start="39:31" pos:end="39:31">&gt;</operator> <literal type="number" pos:start="39:33" pos:end="39:33">0</literal></expr>)</condition> <block pos:start="39:36" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:9">

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:24">priv_data</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <call pos:start="41:28" pos:end="41:60"><name pos:start="41:28" pos:end="41:37">av_mallocz</name><argument_list pos:start="41:38" pos:end="41:60">(<argument pos:start="41:39" pos:end="41:59"><expr pos:start="41:39" pos:end="41:59"><name pos:start="41:39" pos:end="41:59"><name pos:start="41:39" pos:end="41:43">codec</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:59">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:29"><name pos:start="43:14" pos:end="43:18">avctx</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:29">priv_data</name></name></expr>)</condition> <block pos:start="43:32" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:21">

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:33"><name pos:start="45:19" pos:end="45:25">AVERROR</name><argument_list pos:start="45:26" pos:end="45:33">(<argument pos:start="45:27" pos:end="45:32"><expr pos:start="45:27" pos:end="45:32"><name pos:start="45:27" pos:end="45:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="47:13" pos:end="47:21">goto <name pos:start="47:18" pos:end="47:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:32">

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:24">priv_data</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:31">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="59:5" pos:end="70:0"><if pos:start="59:5" pos:end="61:79">if<condition pos:start="59:7" pos:end="59:49">(<expr pos:start="59:8" pos:end="59:48"><name pos:start="59:8" pos:end="59:25"><name pos:start="59:8" pos:end="59:12">avctx</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:25">coded_width</name></name> <operator pos:start="59:27" pos:end="59:28">&amp;&amp;</operator> <name pos:start="59:30" pos:end="59:48"><name pos:start="59:30" pos:end="59:34">avctx</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:48">coded_height</name></name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:79"><block_content pos:start="61:9" pos:end="61:79">

        <expr_stmt pos:start="61:9" pos:end="61:79"><expr pos:start="61:9" pos:end="61:78"><call pos:start="61:9" pos:end="61:78"><name pos:start="61:9" pos:end="61:30">avcodec_set_dimensions</name><argument_list pos:start="61:31" pos:end="61:78">(<argument pos:start="61:32" pos:end="61:36"><expr pos:start="61:32" pos:end="61:36"><name pos:start="61:32" pos:end="61:36">avctx</name></expr></argument>, <argument pos:start="61:39" pos:end="61:56"><expr pos:start="61:39" pos:end="61:56"><name pos:start="61:39" pos:end="61:56"><name pos:start="61:39" pos:end="61:43">avctx</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:56">coded_width</name></name></expr></argument>, <argument pos:start="61:59" pos:end="61:77"><expr pos:start="61:59" pos:end="61:77"><name pos:start="61:59" pos:end="61:77"><name pos:start="61:59" pos:end="61:63">avctx</name><operator pos:start="61:64" pos:end="61:65">-&gt;</operator><name pos:start="61:66" pos:end="61:77">coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="63:5" pos:end="70:0">else if<condition pos:start="63:12" pos:end="63:42">(<expr pos:start="63:13" pos:end="63:41"><name pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:17">avctx</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:24">width</name></name> <operator pos:start="63:26" pos:end="63:27">&amp;&amp;</operator> <name pos:start="63:29" pos:end="63:41"><name pos:start="63:29" pos:end="63:33">avctx</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:41">height</name></name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="70:0"><block_content pos:start="65:9" pos:end="70:0">

        <expr_stmt pos:start="65:9" pos:end="70:0"><expr pos:start="65:9" pos:end="65:66"><call pos:start="65:9" pos:end="65:66"><name pos:start="65:9" pos:end="65:30">avcodec_set_dimensions</name><argument_list pos:start="65:31" pos:end="65:66">(<argument pos:start="65:32" pos:end="65:36"><expr pos:start="65:32" pos:end="65:36"><name pos:start="65:32" pos:end="65:36">avctx</name></expr></argument>, <argument pos:start="65:39" pos:end="65:50"><expr pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:43">avctx</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:50">width</name></name></expr></argument>, <argument pos:start="65:53" pos:end="65:65"><expr pos:start="65:53" pos:end="65:65"><name pos:start="65:53" pos:end="65:65"><name pos:start="65:53" pos:end="65:57">avctx</name><operator pos:start="65:58" pos:end="65:59">-&gt;</operator><name pos:start="65:60" pos:end="65:65">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="69:1" pos:end="69:29">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:24">SANE_NB_CHANNELS</name></cpp:macro> <cpp:value pos:start="69:26" pos:end="69:29">128U</cpp:value></cpp:define>

    <if_stmt pos:start="71:5" pos:end="81:5"><if pos:start="71:5" pos:end="81:5">if <condition pos:start="71:8" pos:end="75:46">(<expr pos:start="71:9" pos:end="75:45"><operator pos:start="71:9" pos:end="71:9">(</operator><operator pos:start="71:10" pos:end="71:10">(</operator><name pos:start="71:11" pos:end="71:28"><name pos:start="71:11" pos:end="71:15">avctx</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:28">coded_width</name></name> <operator pos:start="71:30" pos:end="71:31">||</operator> <name pos:start="71:33" pos:end="71:51"><name pos:start="71:33" pos:end="71:37">avctx</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:51">coded_height</name></name><operator pos:start="71:52" pos:end="71:52">)</operator>

        <operator pos:start="73:9" pos:end="73:10">&amp;&amp;</operator> <call pos:start="73:12" pos:end="73:81"><name pos:start="73:12" pos:end="73:30">av_image_check_size</name><argument_list pos:start="73:31" pos:end="73:81">(<argument pos:start="73:32" pos:end="73:49"><expr pos:start="73:32" pos:end="73:49"><name pos:start="73:32" pos:end="73:49"><name pos:start="73:32" pos:end="73:36">avctx</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:49">coded_width</name></name></expr></argument>, <argument pos:start="73:52" pos:end="73:70"><expr pos:start="73:52" pos:end="73:70"><name pos:start="73:52" pos:end="73:70"><name pos:start="73:52" pos:end="73:56">avctx</name><operator pos:start="73:57" pos:end="73:58">-&gt;</operator><name pos:start="73:59" pos:end="73:70">coded_height</name></name></expr></argument>, <argument pos:start="73:73" pos:end="73:73"><expr pos:start="73:73" pos:end="73:73"><literal type="number" pos:start="73:73" pos:end="73:73">0</literal></expr></argument>, <argument pos:start="73:76" pos:end="73:80"><expr pos:start="73:76" pos:end="73:80"><name pos:start="73:76" pos:end="73:80">avctx</name></expr></argument>)</argument_list></call><operator pos:start="73:82" pos:end="73:82">)</operator>

        <operator pos:start="75:9" pos:end="75:10">||</operator> <name pos:start="75:12" pos:end="75:26"><name pos:start="75:12" pos:end="75:16">avctx</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:26">channels</name></name> <operator pos:start="75:28" pos:end="75:28">&gt;</operator> <name pos:start="75:30" pos:end="75:45">SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="75:48" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:26">

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:29"><name pos:start="77:15" pos:end="77:21">AVERROR</name><argument_list pos:start="77:22" pos:end="77:29">(<argument pos:start="77:23" pos:end="77:28"><expr pos:start="77:23" pos:end="77:28"><name pos:start="77:23" pos:end="77:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:26">goto <name pos:start="79:14" pos:end="79:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:25"><expr pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:16"><name pos:start="85:5" pos:end="85:9">avctx</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:16">codec</name></name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:24">codec</name></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="89:41">(<expr pos:start="87:9" pos:end="89:40"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:26"><name pos:start="87:10" pos:end="87:14">avctx</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:26">codec_type</name></name> <operator pos:start="87:28" pos:end="87:29">==</operator> <name pos:start="87:31" pos:end="87:50">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="87:52" pos:end="87:53">||</operator> <name pos:start="87:55" pos:end="87:71"><name pos:start="87:55" pos:end="87:59">avctx</name><operator pos:start="87:60" pos:end="87:61">-&gt;</operator><name pos:start="87:62" pos:end="87:71">codec_type</name></name> <operator pos:start="87:73" pos:end="87:74">==</operator> <name pos:start="87:76" pos:end="87:86"><name pos:start="87:76" pos:end="87:80">codec</name><operator pos:start="87:81" pos:end="87:82">-&gt;</operator><name pos:start="87:83" pos:end="87:86">type</name></name><operator pos:start="87:87" pos:end="87:87">)</operator> <operator pos:start="87:89" pos:end="87:90">&amp;&amp;</operator>

        <name pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:13">avctx</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:23">codec_id</name></name> <operator pos:start="89:25" pos:end="89:26">==</operator> <name pos:start="89:28" pos:end="89:40">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="89:43" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:38">

        <expr_stmt pos:start="91:9" pos:end="91:40"><expr pos:start="91:9" pos:end="91:39"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:13">avctx</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:25">codec_type</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <name pos:start="91:29" pos:end="91:39"><name pos:start="91:29" pos:end="91:33">codec</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:39">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:38"><expr pos:start="93:9" pos:end="93:37"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:13">avctx</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:23">codec_id</name></name>   <operator pos:start="93:27" pos:end="93:27">=</operator> <name pos:start="93:29" pos:end="93:37"><name pos:start="93:29" pos:end="93:33">codec</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:37">id</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if<condition pos:start="97:7" pos:end="97:72">(<expr pos:start="97:8" pos:end="97:71"><name pos:start="97:8" pos:end="97:22"><name pos:start="97:8" pos:end="97:12">avctx</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:22">codec_id</name></name> <operator pos:start="97:24" pos:end="97:25">!=</operator> <name pos:start="97:27" pos:end="97:35"><name pos:start="97:27" pos:end="97:31">codec</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:35">id</name></name> <operator pos:start="97:37" pos:end="97:38">||</operator> <name pos:start="97:40" pos:end="97:56"><name pos:start="97:40" pos:end="97:44">avctx</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:56">codec_type</name></name> <operator pos:start="97:58" pos:end="97:59">!=</operator> <name pos:start="97:61" pos:end="97:71"><name pos:start="97:61" pos:end="97:65">codec</name><operator pos:start="97:66" pos:end="97:67">-&gt;</operator><name pos:start="97:68" pos:end="97:71">type</name></name></expr>)</condition><block pos:start="97:73" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:26">

        <expr_stmt pos:start="99:9" pos:end="99:69"><expr pos:start="99:9" pos:end="99:68"><call pos:start="99:9" pos:end="99:68"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="99:68">(<argument pos:start="99:16" pos:end="99:20"><expr pos:start="99:16" pos:end="99:20"><name pos:start="99:16" pos:end="99:20">avctx</name></expr></argument>, <argument pos:start="99:23" pos:end="99:34"><expr pos:start="99:23" pos:end="99:34"><name pos:start="99:23" pos:end="99:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:37" pos:end="99:67"><expr pos:start="99:37" pos:end="99:67"><literal type="string" pos:start="99:37" pos:end="99:67">"codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:26">goto <name pos:start="101:14" pos:end="101:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:28"><expr pos:start="105:5" pos:end="105:27"><name pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:9">avctx</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:23">frame_number</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <literal type="number" pos:start="105:27" pos:end="105:27">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:49">(<expr pos:start="107:9" pos:end="107:48"><name pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:13">avctx</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:20">codec</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:32">max_lowres</name></name> <operator pos:start="107:34" pos:end="107:34">&lt;</operator> <name pos:start="107:36" pos:end="107:48"><name pos:start="107:36" pos:end="107:40">avctx</name><operator pos:start="107:41" pos:end="107:42">-&gt;</operator><name pos:start="107:43" pos:end="107:48">lowres</name></name></expr>)</condition> <block pos:start="107:51" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:26">

        <expr_stmt pos:start="109:9" pos:end="111:41"><expr pos:start="109:9" pos:end="111:40"><call pos:start="109:9" pos:end="111:40"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="111:40">(<argument pos:start="109:16" pos:end="109:20"><expr pos:start="109:16" pos:end="109:20"><name pos:start="109:16" pos:end="109:20">avctx</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:37" pos:end="109:99"><expr pos:start="109:37" pos:end="109:99"><literal type="string" pos:start="109:37" pos:end="109:99">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,

               <argument pos:start="111:16" pos:end="111:39"><expr pos:start="111:16" pos:end="111:39"><name pos:start="111:16" pos:end="111:39"><name pos:start="111:16" pos:end="111:20">avctx</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:27">codec</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:39">max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:26">goto <name pos:start="113:14" pos:end="113:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="129:5"><if pos:start="119:5" pos:end="129:5">if<condition pos:start="119:7" pos:end="119:26">(<expr pos:start="119:8" pos:end="119:25"><name pos:start="119:8" pos:end="119:25"><name pos:start="119:8" pos:end="119:12">avctx</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:19">codec</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:25">init</name></name></expr>)</condition><block pos:start="119:27" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:9">

        <expr_stmt pos:start="121:9" pos:end="121:40"><expr pos:start="121:9" pos:end="121:39"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="121:39"><name pos:start="121:15" pos:end="121:32"><name pos:start="121:15" pos:end="121:19">avctx</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:26">codec</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:32">init</name></name><argument_list pos:start="121:33" pos:end="121:39">(<argument pos:start="121:34" pos:end="121:38"><expr pos:start="121:34" pos:end="121:38"><name pos:start="121:34" pos:end="121:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:20">(<expr pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">&lt;</operator> <literal type="number" pos:start="123:19" pos:end="123:19">0</literal></expr>)</condition> <block pos:start="123:22" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:30">

            <goto pos:start="125:13" pos:end="125:30">goto <name pos:start="125:18" pos:end="125:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:10"><expr pos:start="131:5" pos:end="131:9"><name pos:start="131:5" pos:end="131:7">ret</name><operator pos:start="131:8" pos:end="131:8">=</operator><literal type="number" pos:start="131:9" pos:end="131:9">0</literal></expr>;</expr_stmt>

<label pos:start="133:1" pos:end="133:4"><name pos:start="133:1" pos:end="133:3">end</name>:</label>

    <expr_stmt pos:start="135:5" pos:end="135:31"><expr pos:start="135:5" pos:end="135:30"><name pos:start="135:5" pos:end="135:28">entangled_thread_counter</name><operator pos:start="135:29" pos:end="135:30">--</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:42">/* Release any user-supplied mutex. */</comment>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:22">(<expr pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="141:24" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:56">

        <expr_stmt pos:start="143:9" pos:end="143:56"><expr pos:start="143:9" pos:end="143:55"><call pos:start="143:9" pos:end="143:55">(<modifier pos:start="143:10" pos:end="143:10">*</modifier><name pos:start="143:11" pos:end="143:23">ff_lockmgr_cb</name>)<argument_list pos:start="143:25" pos:end="143:55">(<argument pos:start="143:26" pos:end="143:37"><expr pos:start="143:26" pos:end="143:37"><operator pos:start="143:26" pos:end="143:26">&amp;</operator><name pos:start="143:27" pos:end="143:37">codec_mutex</name></expr></argument>, <argument pos:start="143:40" pos:end="143:54"><expr pos:start="143:40" pos:end="143:54"><name pos:start="143:40" pos:end="143:54">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="147:5" pos:end="147:15">return <expr pos:start="147:12" pos:end="147:14"><name pos:start="147:12" pos:end="147:14">ret</name></expr>;</return>

<label pos:start="149:1" pos:end="149:13"><name pos:start="149:1" pos:end="149:12">free_and_end</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:32"><expr pos:start="151:5" pos:end="151:31"><call pos:start="151:5" pos:end="151:31"><name pos:start="151:5" pos:end="151:12">av_freep</name><argument_list pos:start="151:13" pos:end="151:31">(<argument pos:start="151:14" pos:end="151:30"><expr pos:start="151:14" pos:end="151:30"><operator pos:start="151:14" pos:end="151:14">&amp;</operator><name pos:start="151:15" pos:end="151:30"><name pos:start="151:15" pos:end="151:19">avctx</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:23"><expr pos:start="153:5" pos:end="153:22"><name pos:start="153:5" pos:end="153:16"><name pos:start="153:5" pos:end="153:9">avctx</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:16">codec</name></name><operator pos:start="153:17" pos:end="153:17">=</operator> <name pos:start="153:19" pos:end="153:22">NULL</name></expr>;</expr_stmt>

    <goto pos:start="155:5" pos:end="155:13">goto <name pos:start="155:10" pos:end="155:12">end</name>;</goto>

</block_content>}</block></function>
</unit>
