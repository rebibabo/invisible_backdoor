<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20388.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ff_id3v2_parse</name><parameter_list pos:start="1:27" pos:end="1:116">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">len</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><name pos:start="1:57" pos:end="1:63">uint8_t</name></type> <name pos:start="1:65" pos:end="1:71">version</name></decl></parameter>, <parameter pos:start="1:74" pos:end="1:86"><decl pos:start="1:74" pos:end="1:86"><type pos:start="1:74" pos:end="1:86"><name pos:start="1:74" pos:end="1:80">uint8_t</name></type> <name pos:start="1:82" pos:end="1:86">flags</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:115"><decl pos:start="1:89" pos:end="1:115"><type pos:start="1:89" pos:end="1:115"><name pos:start="1:89" pos:end="1:102">ID3v2ExtraMeta</name> <modifier pos:start="1:104" pos:end="1:104">*</modifier><modifier pos:start="1:105" pos:end="1:105">*</modifier></type><name pos:start="1:106" pos:end="1:115">extra_meta</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="243:1">{<block_content pos:start="5:5" pos:end="241:11">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">isv34</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">tlen</name></decl>, <decl pos:start="5:22" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:27">unsync</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:15"><name pos:start="7:10" pos:end="7:12">tag</name><index pos:start="7:13" pos:end="7:15">[<expr pos:start="7:14" pos:end="7:14"><literal type="number" pos:start="7:14" pos:end="7:14">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:16">next</name></decl>, <decl pos:start="9:19" pos:end="9:46"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:19" pos:end="9:21">end</name> <init pos:start="9:23" pos:end="9:46">= <expr pos:start="9:25" pos:end="9:46"><call pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:33">avio_tell</name><argument_list pos:start="9:34" pos:end="9:40">(<argument pos:start="9:35" pos:end="9:39"><expr pos:start="9:35" pos:end="9:39"><name pos:start="9:35" pos:end="9:39"><name pos:start="9:35" pos:end="9:35">s</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:39">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:42" pos:end="9:42">+</operator> <name pos:start="9:44" pos:end="9:46">len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">taghdrlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:22">reason</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">AVIOContext</name></type> <name pos:start="15:17" pos:end="15:18">pb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">AVIOContext</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">pbx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">char</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:25">buffer</name> <init pos:start="19:27" pos:end="19:32">= <expr pos:start="19:29" pos:end="19:32"><name pos:start="19:29" pos:end="19:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">buffer_size</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>;</decl_stmt>

    <function_decl pos:start="23:5" pos:end="23:92"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">void</name></type> (<modifier pos:start="23:11" pos:end="23:11">*</modifier><name pos:start="23:12" pos:end="23:21">extra_func</name>)<parameter_list pos:start="23:23" pos:end="23:84">(<parameter pos:start="23:24" pos:end="23:39"><decl pos:start="23:24" pos:end="23:39"><type pos:start="23:24" pos:end="23:39"><name pos:start="23:24" pos:end="23:38">AVFormatContext</name><modifier pos:start="23:39" pos:end="23:39">*</modifier></type></decl></parameter>, <parameter pos:start="23:42" pos:end="23:53"><decl pos:start="23:42" pos:end="23:53"><type pos:start="23:42" pos:end="23:53"><name pos:start="23:42" pos:end="23:52">AVIOContext</name><modifier pos:start="23:53" pos:end="23:53">*</modifier></type></decl></parameter>, <parameter pos:start="23:56" pos:end="23:58"><decl pos:start="23:56" pos:end="23:58"><type pos:start="23:56" pos:end="23:58"><name pos:start="23:56" pos:end="23:58">int</name></type></decl></parameter>, <parameter pos:start="23:61" pos:end="23:65"><decl pos:start="23:61" pos:end="23:65"><type pos:start="23:61" pos:end="23:65"><name pos:start="23:61" pos:end="23:64">char</name><modifier pos:start="23:65" pos:end="23:65">*</modifier></type></decl></parameter>, <parameter pos:start="23:68" pos:end="23:83"><decl pos:start="23:68" pos:end="23:83"><type pos:start="23:68" pos:end="23:83"><name pos:start="23:68" pos:end="23:81">ID3v2ExtraMeta</name><modifier pos:start="23:82" pos:end="23:82">*</modifier><modifier pos:start="23:83" pos:end="23:83">*</modifier></type></decl></parameter>)</parameter_list> <init pos:start="23:86" pos:end="23:91">= <expr pos:start="23:88" pos:end="23:91"><name pos:start="23:88" pos:end="23:91">NULL</name></expr></init>;</function_decl>



    <switch pos:start="27:5" pos:end="65:5">switch <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:19">version</name></expr>)</condition> <block pos:start="27:22" pos:end="65:5">{<block_content pos:start="29:5" pos:end="63:19">

    <case pos:start="29:5" pos:end="29:11">case <expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">2</literal></expr>:</case>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:25">(<expr pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:17">flags</name> <operator pos:start="31:19" pos:end="31:19">&amp;</operator> <literal type="number" pos:start="31:21" pos:end="31:24">0x40</literal></expr>)</condition> <block pos:start="31:27" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:23">

            <expr_stmt pos:start="33:13" pos:end="33:35"><expr pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:18">reason</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="string" pos:start="33:22" pos:end="33:34">"compression"</literal></expr>;</expr_stmt>

            <goto pos:start="35:13" pos:end="35:23">goto <name pos:start="35:18" pos:end="35:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:18"><expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:13">isv34</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:17">taghdrlen</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">6</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:11">case <expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">3</literal></expr>:</case>

    <case pos:start="49:5" pos:end="49:11">case <expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">4</literal></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:18"><expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:13">isv34</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:23"><expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:17">taghdrlen</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:22">10</literal></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>



    <default pos:start="59:5" pos:end="59:12">default:</default>

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:14">reason</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="string" pos:start="61:18" pos:end="61:26">"version"</literal></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:19">goto <name pos:start="63:14" pos:end="63:18">error</name>;</goto>

    </block_content>}</block></switch>



    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:10">unsync</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:18">flags</name> <operator pos:start="69:20" pos:end="69:20">&amp;</operator> <literal type="number" pos:start="69:22" pos:end="69:25">0x80</literal></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="75:45"><if pos:start="73:5" pos:end="75:45">if <condition pos:start="73:8" pos:end="73:30">(<expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:13">isv34</name> <operator pos:start="73:15" pos:end="73:16">&amp;&amp;</operator> <name pos:start="73:18" pos:end="73:22">flags</name> <operator pos:start="73:24" pos:end="73:24">&amp;</operator> <literal type="number" pos:start="73:26" pos:end="73:29">0x40</literal></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:45"><block_content pos:start="75:9" pos:end="75:45"> <comment type="block" pos:start="73:32" pos:end="73:79">/* Extended header present, just skip over it */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><call pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:17">avio_skip</name><argument_list pos:start="75:18" pos:end="75:44">(<argument pos:start="75:19" pos:end="75:23"><expr pos:start="75:19" pos:end="75:23"><name pos:start="75:19" pos:end="75:23"><name pos:start="75:19" pos:end="75:19">s</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:23">pb</name></name></expr></argument>, <argument pos:start="75:26" pos:end="75:43"><expr pos:start="75:26" pos:end="75:43"><call pos:start="75:26" pos:end="75:43"><name pos:start="75:26" pos:end="75:33">get_size</name><argument_list pos:start="75:34" pos:end="75:43">(<argument pos:start="75:35" pos:end="75:39"><expr pos:start="75:35" pos:end="75:39"><name pos:start="75:35" pos:end="75:39"><name pos:start="75:35" pos:end="75:35">s</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:39">pb</name></name></expr></argument>, <argument pos:start="75:42" pos:end="75:42"><expr pos:start="75:42" pos:end="75:42"><literal type="number" pos:start="75:42" pos:end="75:42">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <while pos:start="79:5" pos:end="221:5">while <condition pos:start="79:11" pos:end="79:28">(<expr pos:start="79:12" pos:end="79:27"><name pos:start="79:12" pos:end="79:14">len</name> <operator pos:start="79:16" pos:end="79:17">&gt;=</operator> <name pos:start="79:19" pos:end="79:27">taghdrlen</name></expr>)</condition> <block pos:start="79:30" pos:end="221:5">{<block_content pos:start="81:9" pos:end="219:41">

        <decl_stmt pos:start="81:9" pos:end="81:32"><decl pos:start="81:9" pos:end="81:31"><type pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:16">unsigned</name> <name pos:start="81:18" pos:end="81:20">int</name></type> <name pos:start="81:22" pos:end="81:27">tflags</name> <init pos:start="81:29" pos:end="81:31">= <expr pos:start="81:31" pos:end="81:31"><literal type="number" pos:start="81:31" pos:end="81:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:24"><decl pos:start="83:9" pos:end="83:23"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:19">tunsync</name> <init pos:start="83:21" pos:end="83:23">= <expr pos:start="83:23" pos:end="83:23"><literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="87:9" pos:end="113:9"><if pos:start="87:9" pos:end="105:9">if <condition pos:start="87:12" pos:end="87:18">(<expr pos:start="87:13" pos:end="87:17"><name pos:start="87:13" pos:end="87:17">isv34</name></expr>)</condition> <block pos:start="87:20" pos:end="105:9">{<block_content pos:start="89:13" pos:end="103:50">

            <expr_stmt pos:start="89:13" pos:end="89:37"><expr pos:start="89:13" pos:end="89:36"><call pos:start="89:13" pos:end="89:36"><name pos:start="89:13" pos:end="89:21">avio_read</name><argument_list pos:start="89:22" pos:end="89:36">(<argument pos:start="89:23" pos:end="89:27"><expr pos:start="89:23" pos:end="89:27"><name pos:start="89:23" pos:end="89:27"><name pos:start="89:23" pos:end="89:23">s</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:27">pb</name></name></expr></argument>, <argument pos:start="89:30" pos:end="89:32"><expr pos:start="89:30" pos:end="89:32"><name pos:start="89:30" pos:end="89:32">tag</name></expr></argument>, <argument pos:start="89:35" pos:end="89:35"><expr pos:start="89:35" pos:end="89:35"><literal type="number" pos:start="89:35" pos:end="89:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:23"><expr pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:15">tag</name><index pos:start="91:16" pos:end="91:18">[<expr pos:start="91:17" pos:end="91:17"><literal type="number" pos:start="91:17" pos:end="91:17">4</literal></expr>]</index></name> <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="99:42"><if pos:start="93:13" pos:end="97:13">if<condition pos:start="93:15" pos:end="93:26">(<expr pos:start="93:16" pos:end="93:25"><name pos:start="93:16" pos:end="93:22">version</name><operator pos:start="93:23" pos:end="93:24">==</operator><literal type="number" pos:start="93:25" pos:end="93:25">3</literal></expr>)</condition><block pos:start="93:27" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:40">

                <expr_stmt pos:start="95:17" pos:end="95:40"><expr pos:start="95:17" pos:end="95:39"><name pos:start="95:17" pos:end="95:20">tlen</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="95:39"><name pos:start="95:24" pos:end="95:32">avio_rb32</name><argument_list pos:start="95:33" pos:end="95:39">(<argument pos:start="95:34" pos:end="95:38"><expr pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:38">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="97:14" pos:end="99:42">else<block type="pseudo" pos:start="99:17" pos:end="99:42"><block_content pos:start="99:17" pos:end="99:42">

                <expr_stmt pos:start="99:17" pos:end="99:42"><expr pos:start="99:17" pos:end="99:41"><name pos:start="99:17" pos:end="99:20">tlen</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <call pos:start="99:24" pos:end="99:41"><name pos:start="99:24" pos:end="99:31">get_size</name><argument_list pos:start="99:32" pos:end="99:41">(<argument pos:start="99:33" pos:end="99:37"><expr pos:start="99:33" pos:end="99:37"><name pos:start="99:33" pos:end="99:37"><name pos:start="99:33" pos:end="99:33">s</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:37">pb</name></name></expr></argument>, <argument pos:start="99:40" pos:end="99:40"><expr pos:start="99:40" pos:end="99:40"><literal type="number" pos:start="99:40" pos:end="99:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:38"><expr pos:start="101:13" pos:end="101:37"><name pos:start="101:13" pos:end="101:18">tflags</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="101:37"><name pos:start="101:22" pos:end="101:30">avio_rb16</name><argument_list pos:start="101:31" pos:end="101:37">(<argument pos:start="101:32" pos:end="101:36"><expr pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:32">s</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:36">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:50"><expr pos:start="103:13" pos:end="103:49"><name pos:start="103:13" pos:end="103:19">tunsync</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:28">tflags</name> <operator pos:start="103:30" pos:end="103:30">&amp;</operator> <name pos:start="103:32" pos:end="103:49">ID3v2_FLAG_UNSYNCH</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="113:9">else <block pos:start="105:16" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:36">

            <expr_stmt pos:start="107:13" pos:end="107:37"><expr pos:start="107:13" pos:end="107:36"><call pos:start="107:13" pos:end="107:36"><name pos:start="107:13" pos:end="107:21">avio_read</name><argument_list pos:start="107:22" pos:end="107:36">(<argument pos:start="107:23" pos:end="107:27"><expr pos:start="107:23" pos:end="107:27"><name pos:start="107:23" pos:end="107:27"><name pos:start="107:23" pos:end="107:23">s</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:27">pb</name></name></expr></argument>, <argument pos:start="107:30" pos:end="107:32"><expr pos:start="107:30" pos:end="107:32"><name pos:start="107:30" pos:end="107:32">tag</name></expr></argument>, <argument pos:start="107:35" pos:end="107:35"><expr pos:start="107:35" pos:end="107:35"><literal type="number" pos:start="107:35" pos:end="107:35">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:23"><expr pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:15">tag</name><index pos:start="109:16" pos:end="109:18">[<expr pos:start="109:17" pos:end="109:17"><literal type="number" pos:start="109:17" pos:end="109:17">3</literal></expr>]</index></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:36"><expr pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:16">tlen</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:35"><name pos:start="111:20" pos:end="111:28">avio_rb24</name><argument_list pos:start="111:29" pos:end="111:35">(<argument pos:start="111:30" pos:end="111:34"><expr pos:start="111:30" pos:end="111:34"><name pos:start="111:30" pos:end="111:34"><name pos:start="111:30" pos:end="111:30">s</name><operator pos:start="111:31" pos:end="111:32">-&gt;</operator><name pos:start="111:33" pos:end="111:34">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:48">(<expr pos:start="115:13" pos:end="115:47"><name pos:start="115:13" pos:end="115:16">tlen</name> <operator pos:start="115:18" pos:end="115:19">&lt;=</operator> <literal type="number" pos:start="115:21" pos:end="115:21">0</literal> <operator pos:start="115:23" pos:end="115:24">||</operator> <name pos:start="115:26" pos:end="115:29">tlen</name> <operator pos:start="115:31" pos:end="115:31">&gt;</operator> <name pos:start="115:33" pos:end="115:35">len</name> <operator pos:start="115:37" pos:end="115:37">-</operator> <name pos:start="115:39" pos:end="115:47">taghdrlen</name></expr>)</condition> <block pos:start="115:50" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:18">

            <expr_stmt pos:start="117:13" pos:end="117:100"><expr pos:start="117:13" pos:end="117:99"><call pos:start="117:13" pos:end="117:99"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:99">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">s</name></expr></argument>, <argument pos:start="117:23" pos:end="117:36"><expr pos:start="117:23" pos:end="117:36"><name pos:start="117:23" pos:end="117:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="117:39" pos:end="117:93"><expr pos:start="117:39" pos:end="117:93"><literal type="string" pos:start="117:39" pos:end="117:93">"Invalid size in frame %s, skipping the rest of tag.\n"</literal></expr></argument>, <argument pos:start="117:96" pos:end="117:98"><expr pos:start="117:96" pos:end="117:98"><name pos:start="117:96" pos:end="117:98">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:32"><expr pos:start="123:9" pos:end="123:31"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:14">-=</operator> <name pos:start="123:16" pos:end="123:24">taghdrlen</name> <operator pos:start="123:26" pos:end="123:26">+</operator> <name pos:start="123:28" pos:end="123:31">tlen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:12">next</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:31"><name pos:start="125:16" pos:end="125:24">avio_tell</name><argument_list pos:start="125:25" pos:end="125:31">(<argument pos:start="125:26" pos:end="125:30"><expr pos:start="125:26" pos:end="125:30"><name pos:start="125:26" pos:end="125:30"><name pos:start="125:26" pos:end="125:26">s</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:30">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:33" pos:end="125:33">+</operator> <name pos:start="125:35" pos:end="125:38">tlen</name></expr>;</expr_stmt>



        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:40">(<expr pos:start="129:13" pos:end="129:39"><name pos:start="129:13" pos:end="129:18">tflags</name> <operator pos:start="129:20" pos:end="129:20">&amp;</operator> <name pos:start="129:22" pos:end="129:39">ID3v2_FLAG_DATALEN</name></expr>)</condition> <block pos:start="129:42" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><call pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:21">avio_rb32</name><argument_list pos:start="131:22" pos:end="131:28">(<argument pos:start="131:23" pos:end="131:27"><expr pos:start="131:23" pos:end="131:27"><name pos:start="131:23" pos:end="131:27"><name pos:start="131:23" pos:end="131:23">s</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:27">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:22"><expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:16">tlen</name> <operator pos:start="133:18" pos:end="133:19">-=</operator> <literal type="number" pos:start="133:21" pos:end="133:21">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="139:9" pos:end="213:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="139:70">(<expr pos:start="139:13" pos:end="139:69"><name pos:start="139:13" pos:end="139:18">tflags</name> <operator pos:start="139:20" pos:end="139:20">&amp;</operator> <operator pos:start="139:22" pos:end="139:22">(</operator><name pos:start="139:23" pos:end="139:43">ID3v2_FLAG_ENCRYPTION</name> <operator pos:start="139:45" pos:end="139:45">|</operator> <name pos:start="139:47" pos:end="139:68">ID3v2_FLAG_COMPRESSION</name><operator pos:start="139:69" pos:end="139:69">)</operator></expr>)</condition> <block pos:start="139:72" pos:end="147:9">{<block_content pos:start="141:13" pos:end="143:35">

            <expr_stmt pos:start="141:13" pos:end="141:94"><expr pos:start="141:13" pos:end="141:93"><call pos:start="141:13" pos:end="141:93"><name pos:start="141:13" pos:end="141:18">av_log</name><argument_list pos:start="141:19" pos:end="141:93">(<argument pos:start="141:20" pos:end="141:20"><expr pos:start="141:20" pos:end="141:20"><name pos:start="141:20" pos:end="141:20">s</name></expr></argument>, <argument pos:start="141:23" pos:end="141:36"><expr pos:start="141:23" pos:end="141:36"><name pos:start="141:23" pos:end="141:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="141:39" pos:end="141:87"><expr pos:start="141:39" pos:end="141:87"><literal type="string" pos:start="141:39" pos:end="141:87">"Skipping encrypted/compressed ID3v2 frame %s.\n"</literal></expr></argument>, <argument pos:start="141:90" pos:end="141:92"><expr pos:start="141:90" pos:end="141:92"><name pos:start="141:90" pos:end="141:92">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:35"><expr pos:start="143:13" pos:end="143:34"><call pos:start="143:13" pos:end="143:34"><name pos:start="143:13" pos:end="143:21">avio_skip</name><argument_list pos:start="143:22" pos:end="143:34">(<argument pos:start="143:23" pos:end="143:27"><expr pos:start="143:23" pos:end="143:27"><name pos:start="143:23" pos:end="143:27"><name pos:start="143:23" pos:end="143:23">s</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:27">pb</name></name></expr></argument>, <argument pos:start="143:30" pos:end="143:33"><expr pos:start="143:30" pos:end="143:33"><name pos:start="143:30" pos:end="143:33">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="145:9" pos:end="145:62">/* check for text tag or supported special meta tag */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="147:11" pos:end="201:9">else if <condition pos:start="147:19" pos:end="147:105">(<expr pos:start="147:20" pos:end="147:104"><name pos:start="147:20" pos:end="147:25"><name pos:start="147:20" pos:end="147:22">tag</name><index pos:start="147:23" pos:end="147:25">[<expr pos:start="147:24" pos:end="147:24"><literal type="number" pos:start="147:24" pos:end="147:24">0</literal></expr>]</index></name> <operator pos:start="147:27" pos:end="147:28">==</operator> <literal type="char" pos:start="147:30" pos:end="147:32">'T'</literal> <operator pos:start="147:34" pos:end="147:35">||</operator> <operator pos:start="147:37" pos:end="147:37">(</operator><name pos:start="147:38" pos:end="147:47">extra_meta</name> <operator pos:start="147:49" pos:end="147:50">&amp;&amp;</operator> <operator pos:start="147:52" pos:end="147:52">(</operator><name pos:start="147:53" pos:end="147:62">extra_func</name> <operator pos:start="147:64" pos:end="147:64">=</operator> <call pos:start="147:66" pos:end="147:96"><name pos:start="147:66" pos:end="147:84">get_extra_meta_func</name><argument_list pos:start="147:85" pos:end="147:96">(<argument pos:start="147:86" pos:end="147:88"><expr pos:start="147:86" pos:end="147:88"><name pos:start="147:86" pos:end="147:88">tag</name></expr></argument>, <argument pos:start="147:91" pos:end="147:95"><expr pos:start="147:91" pos:end="147:95"><name pos:start="147:91" pos:end="147:95">isv34</name></expr></argument>)</argument_list></call><operator pos:start="147:97" pos:end="147:98">-&gt;</operator><name pos:start="147:99" pos:end="147:102">read</name><operator pos:start="147:103" pos:end="147:103">)</operator><operator pos:start="147:104" pos:end="147:104">)</operator></expr>)</condition> <block pos:start="147:107" pos:end="201:9">{<block_content pos:start="149:13" pos:end="199:58">

            <if_stmt pos:start="149:13" pos:end="187:13"><if pos:start="149:13" pos:end="183:13">if <condition pos:start="149:16" pos:end="149:34">(<expr pos:start="149:17" pos:end="149:33"><name pos:start="149:17" pos:end="149:22">unsync</name> <operator pos:start="149:24" pos:end="149:25">||</operator> <name pos:start="149:27" pos:end="149:33">tunsync</name></expr>)</condition> <block pos:start="149:36" pos:end="183:13">{<block_content pos:start="151:17" pos:end="181:26">

                <decl_stmt pos:start="151:17" pos:end="151:25"><decl pos:start="151:17" pos:end="151:21"><type pos:start="151:17" pos:end="151:19"><name pos:start="151:17" pos:end="151:19">int</name></type> <name pos:start="151:21" pos:end="151:21">i</name></decl>, <decl pos:start="151:24" pos:end="151:24"><type ref="prev" pos:start="151:17" pos:end="151:19"/><name pos:start="151:24" pos:end="151:24">j</name></decl>;</decl_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:60"><expr pos:start="153:17" pos:end="153:59"><call pos:start="153:17" pos:end="153:59"><name pos:start="153:17" pos:end="153:30">av_fast_malloc</name><argument_list pos:start="153:31" pos:end="153:59">(<argument pos:start="153:32" pos:end="153:38"><expr pos:start="153:32" pos:end="153:38"><operator pos:start="153:32" pos:end="153:32">&amp;</operator><name pos:start="153:33" pos:end="153:38">buffer</name></expr></argument>, <argument pos:start="153:41" pos:end="153:52"><expr pos:start="153:41" pos:end="153:52"><operator pos:start="153:41" pos:end="153:41">&amp;</operator><name pos:start="153:42" pos:end="153:52">buffer_size</name></expr></argument>, <argument pos:start="153:55" pos:end="153:58"><expr pos:start="153:55" pos:end="153:58"><name pos:start="153:55" pos:end="153:58">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="161:17"><if pos:start="155:17" pos:end="161:17">if <condition pos:start="155:20" pos:end="155:28">(<expr pos:start="155:21" pos:end="155:27"><operator pos:start="155:21" pos:end="155:21">!</operator><name pos:start="155:22" pos:end="155:27">buffer</name></expr>)</condition> <block pos:start="155:30" pos:end="161:17">{<block_content pos:start="157:21" pos:end="159:30">

                    <expr_stmt pos:start="157:21" pos:end="157:80"><expr pos:start="157:21" pos:end="157:79"><call pos:start="157:21" pos:end="157:79"><name pos:start="157:21" pos:end="157:26">av_log</name><argument_list pos:start="157:27" pos:end="157:79">(<argument pos:start="157:28" pos:end="157:28"><expr pos:start="157:28" pos:end="157:28"><name pos:start="157:28" pos:end="157:28">s</name></expr></argument>, <argument pos:start="157:31" pos:end="157:42"><expr pos:start="157:31" pos:end="157:42"><name pos:start="157:31" pos:end="157:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:45" pos:end="157:72"><expr pos:start="157:45" pos:end="157:72"><literal type="string" pos:start="157:45" pos:end="157:72">"Failed to alloc %d bytes\n"</literal></expr></argument>, <argument pos:start="157:75" pos:end="157:78"><expr pos:start="157:75" pos:end="157:78"><name pos:start="157:75" pos:end="157:78">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="159:21" pos:end="159:30">goto <name pos:start="159:26" pos:end="159:29">seek</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <for pos:start="163:17" pos:end="175:17">for <control pos:start="163:21" pos:end="163:54">(<init pos:start="163:22" pos:end="163:34"><expr pos:start="163:22" pos:end="163:26"><name pos:start="163:22" pos:end="163:22">i</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr><operator pos:start="163:27" pos:end="163:27">,</operator> <expr pos:start="163:29" pos:end="163:33"><name pos:start="163:29" pos:end="163:29">j</name> <operator pos:start="163:31" pos:end="163:31">=</operator> <literal type="number" pos:start="163:33" pos:end="163:33">0</literal></expr>;</init> <condition pos:start="163:36" pos:end="163:44"><expr pos:start="163:36" pos:end="163:43"><name pos:start="163:36" pos:end="163:36">i</name> <operator pos:start="163:38" pos:end="163:38">&lt;</operator> <name pos:start="163:40" pos:end="163:43">tlen</name></expr>;</condition> <incr pos:start="163:46" pos:end="163:53"><expr pos:start="163:46" pos:end="163:48"><name pos:start="163:46" pos:end="163:46">i</name><operator pos:start="163:47" pos:end="163:48">++</operator></expr><operator pos:start="163:49" pos:end="163:49">,</operator> <expr pos:start="163:51" pos:end="163:53"><name pos:start="163:51" pos:end="163:51">j</name><operator pos:start="163:52" pos:end="163:53">++</operator></expr></incr>)</control> <block pos:start="163:56" pos:end="175:17">{<block_content pos:start="165:21" pos:end="173:21">

                    <expr_stmt pos:start="165:21" pos:end="165:47"><expr pos:start="165:21" pos:end="165:46"><name pos:start="165:21" pos:end="165:29"><name pos:start="165:21" pos:end="165:26">buffer</name><index pos:start="165:27" pos:end="165:29">[<expr pos:start="165:28" pos:end="165:28"><name pos:start="165:28" pos:end="165:28">j</name></expr>]</index></name> <operator pos:start="165:31" pos:end="165:31">=</operator> <call pos:start="165:33" pos:end="165:46"><name pos:start="165:33" pos:end="165:39">avio_r8</name><argument_list pos:start="165:40" pos:end="165:46">(<argument pos:start="165:41" pos:end="165:45"><expr pos:start="165:41" pos:end="165:45"><name pos:start="165:41" pos:end="165:45"><name pos:start="165:41" pos:end="165:41">s</name><operator pos:start="165:42" pos:end="165:43">-&gt;</operator><name pos:start="165:44" pos:end="165:45">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="167:21" pos:end="173:21"><if pos:start="167:21" pos:end="173:21">if <condition pos:start="167:24" pos:end="167:69">(<expr pos:start="167:25" pos:end="167:68"><name pos:start="167:25" pos:end="167:25">j</name> <operator pos:start="167:27" pos:end="167:27">&gt;</operator> <literal type="number" pos:start="167:29" pos:end="167:29">0</literal> <operator pos:start="167:31" pos:end="167:32">&amp;&amp;</operator> <operator pos:start="167:34" pos:end="167:34">!</operator><name pos:start="167:35" pos:end="167:43"><name pos:start="167:35" pos:end="167:40">buffer</name><index pos:start="167:41" pos:end="167:43">[<expr pos:start="167:42" pos:end="167:42"><name pos:start="167:42" pos:end="167:42">j</name></expr>]</index></name> <operator pos:start="167:45" pos:end="167:46">&amp;&amp;</operator> <name pos:start="167:48" pos:end="167:60"><name pos:start="167:48" pos:end="167:53">buffer</name><index pos:start="167:54" pos:end="167:60">[<expr pos:start="167:55" pos:end="167:59"><name pos:start="167:55" pos:end="167:55">j</name> <operator pos:start="167:57" pos:end="167:57">-</operator> <literal type="number" pos:start="167:59" pos:end="167:59">1</literal></expr>]</index></name> <operator pos:start="167:62" pos:end="167:63">==</operator> <literal type="number" pos:start="167:65" pos:end="167:68">0xff</literal></expr>)</condition> <block pos:start="167:71" pos:end="173:21">{<block_content pos:start="171:25" pos:end="171:28">

                        <comment type="block" pos:start="169:25" pos:end="169:58">/* Unsynchronised byte, skip it */</comment>

                        <expr_stmt pos:start="171:25" pos:end="171:28"><expr pos:start="171:25" pos:end="171:27"><name pos:start="171:25" pos:end="171:25">j</name><operator pos:start="171:26" pos:end="171:27">--</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="177:17" pos:end="177:77"><expr pos:start="177:17" pos:end="177:76"><call pos:start="177:17" pos:end="177:76"><name pos:start="177:17" pos:end="177:33">ffio_init_context</name><argument_list pos:start="177:34" pos:end="177:76">(<argument pos:start="177:35" pos:end="177:37"><expr pos:start="177:35" pos:end="177:37"><operator pos:start="177:35" pos:end="177:35">&amp;</operator><name pos:start="177:36" pos:end="177:37">pb</name></expr></argument>, <argument pos:start="177:40" pos:end="177:45"><expr pos:start="177:40" pos:end="177:45"><name pos:start="177:40" pos:end="177:45">buffer</name></expr></argument>, <argument pos:start="177:48" pos:end="177:48"><expr pos:start="177:48" pos:end="177:48"><name pos:start="177:48" pos:end="177:48">j</name></expr></argument>, <argument pos:start="177:51" pos:end="177:51"><expr pos:start="177:51" pos:end="177:51"><literal type="number" pos:start="177:51" pos:end="177:51">0</literal></expr></argument>, <argument pos:start="177:54" pos:end="177:57"><expr pos:start="177:54" pos:end="177:57"><name pos:start="177:54" pos:end="177:57">NULL</name></expr></argument>, <argument pos:start="177:60" pos:end="177:63"><expr pos:start="177:60" pos:end="177:63"><name pos:start="177:60" pos:end="177:63">NULL</name></expr></argument>, <argument pos:start="177:66" pos:end="177:69"><expr pos:start="177:66" pos:end="177:69"><name pos:start="177:66" pos:end="177:69">NULL</name></expr></argument>, <argument pos:start="177:72" pos:end="177:75"><expr pos:start="177:72" pos:end="177:75"><name pos:start="177:72" pos:end="177:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:25"><expr pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:20">tlen</name> <operator pos:start="179:22" pos:end="179:22">=</operator> <name pos:start="179:24" pos:end="179:24">j</name></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:26"><expr pos:start="181:17" pos:end="181:25"><name pos:start="181:17" pos:end="181:19">pbx</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <operator pos:start="181:23" pos:end="181:23">&amp;</operator><name pos:start="181:24" pos:end="181:25">pb</name></expr>;</expr_stmt> <comment type="line" pos:start="181:28" pos:end="181:51">// read from sync buffer</comment>

            </block_content>}</block></if> <else pos:start="183:15" pos:end="187:13">else <block pos:start="183:20" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:28">

                <expr_stmt pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:19">pbx</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:27"><name pos:start="185:23" pos:end="185:23">s</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:27">pb</name></name></expr>;</expr_stmt> <comment type="line" pos:start="185:30" pos:end="185:56">// read straight from input</comment>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="189:13" pos:end="199:58"><if pos:start="189:13" pos:end="193:45">if <condition pos:start="189:16" pos:end="189:30">(<expr pos:start="189:17" pos:end="189:29"><name pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:19">tag</name><index pos:start="189:20" pos:end="189:22">[<expr pos:start="189:21" pos:end="189:21"><literal type="number" pos:start="189:21" pos:end="189:21">0</literal></expr>]</index></name> <operator pos:start="189:24" pos:end="189:25">==</operator> <literal type="char" pos:start="189:27" pos:end="189:29">'T'</literal></expr>)</condition><block type="pseudo" pos:start="193:17" pos:end="193:45"><block_content pos:start="193:17" pos:end="193:45">

                <comment type="block" pos:start="191:17" pos:end="191:36">/* parse text tag */</comment>

                <expr_stmt pos:start="193:17" pos:end="193:45"><expr pos:start="193:17" pos:end="193:44"><call pos:start="193:17" pos:end="193:44"><name pos:start="193:17" pos:end="193:25">read_ttag</name><argument_list pos:start="193:26" pos:end="193:44">(<argument pos:start="193:27" pos:end="193:27"><expr pos:start="193:27" pos:end="193:27"><name pos:start="193:27" pos:end="193:27">s</name></expr></argument>, <argument pos:start="193:30" pos:end="193:32"><expr pos:start="193:30" pos:end="193:32"><name pos:start="193:30" pos:end="193:32">pbx</name></expr></argument>, <argument pos:start="193:35" pos:end="193:38"><expr pos:start="193:35" pos:end="193:38"><name pos:start="193:35" pos:end="193:38">tlen</name></expr></argument>, <argument pos:start="193:41" pos:end="193:43"><expr pos:start="193:41" pos:end="193:43"><name pos:start="193:41" pos:end="193:43">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="195:13" pos:end="199:58">else<block type="pseudo" pos:start="199:17" pos:end="199:58"><block_content pos:start="199:17" pos:end="199:58">

                <comment type="block" pos:start="197:17" pos:end="197:44">/* parse special meta tag */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:58"><expr pos:start="199:17" pos:end="199:57"><call pos:start="199:17" pos:end="199:57"><name pos:start="199:17" pos:end="199:26">extra_func</name><argument_list pos:start="199:27" pos:end="199:57">(<argument pos:start="199:28" pos:end="199:28"><expr pos:start="199:28" pos:end="199:28"><name pos:start="199:28" pos:end="199:28">s</name></expr></argument>, <argument pos:start="199:31" pos:end="199:33"><expr pos:start="199:31" pos:end="199:33"><name pos:start="199:31" pos:end="199:33">pbx</name></expr></argument>, <argument pos:start="199:36" pos:end="199:39"><expr pos:start="199:36" pos:end="199:39"><name pos:start="199:36" pos:end="199:39">tlen</name></expr></argument>, <argument pos:start="199:42" pos:end="199:44"><expr pos:start="199:42" pos:end="199:44"><name pos:start="199:42" pos:end="199:44">tag</name></expr></argument>, <argument pos:start="199:47" pos:end="199:56"><expr pos:start="199:47" pos:end="199:56"><name pos:start="199:47" pos:end="199:56">extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if>

        <if type="elseif" pos:start="203:9" pos:end="213:9">else if <condition pos:start="203:17" pos:end="203:25">(<expr pos:start="203:18" pos:end="203:24"><operator pos:start="203:18" pos:end="203:18">!</operator><name pos:start="203:19" pos:end="203:24"><name pos:start="203:19" pos:end="203:21">tag</name><index pos:start="203:22" pos:end="203:24">[<expr pos:start="203:23" pos:end="203:23"><literal type="number" pos:start="203:23" pos:end="203:23">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="203:27" pos:end="213:9">{<block_content pos:start="205:13" pos:end="211:18">

            <if_stmt pos:start="205:13" pos:end="207:80"><if pos:start="205:13" pos:end="207:80">if <condition pos:start="205:16" pos:end="205:23">(<expr pos:start="205:17" pos:end="205:22"><name pos:start="205:17" pos:end="205:22"><name pos:start="205:17" pos:end="205:19">tag</name><index pos:start="205:20" pos:end="205:22">[<expr pos:start="205:21" pos:end="205:21"><literal type="number" pos:start="205:21" pos:end="205:21">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:80"><block_content pos:start="207:17" pos:end="207:80">

                <expr_stmt pos:start="207:17" pos:end="207:80"><expr pos:start="207:17" pos:end="207:79"><call pos:start="207:17" pos:end="207:79"><name pos:start="207:17" pos:end="207:22">av_log</name><argument_list pos:start="207:23" pos:end="207:79">(<argument pos:start="207:24" pos:end="207:24"><expr pos:start="207:24" pos:end="207:24"><name pos:start="207:24" pos:end="207:24">s</name></expr></argument>, <argument pos:start="207:27" pos:end="207:40"><expr pos:start="207:27" pos:end="207:40"><name pos:start="207:27" pos:end="207:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="207:43" pos:end="207:78"><expr pos:start="207:43" pos:end="207:78"><literal type="string" pos:start="207:43" pos:end="207:78">"invalid frame id, assuming padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:35"><expr pos:start="209:13" pos:end="209:34"><call pos:start="209:13" pos:end="209:34"><name pos:start="209:13" pos:end="209:21">avio_skip</name><argument_list pos:start="209:22" pos:end="209:34">(<argument pos:start="209:23" pos:end="209:27"><expr pos:start="209:23" pos:end="209:27"><name pos:start="209:23" pos:end="209:27"><name pos:start="209:23" pos:end="209:23">s</name><operator pos:start="209:24" pos:end="209:25">-&gt;</operator><name pos:start="209:26" pos:end="209:27">pb</name></name></expr></argument>, <argument pos:start="209:30" pos:end="209:33"><expr pos:start="209:30" pos:end="209:33"><name pos:start="209:30" pos:end="209:33">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="211:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="215:9" pos:end="215:32">/* Skip to end of tag */</comment>

<label pos:start="217:1" pos:end="217:5"><name pos:start="217:1" pos:end="217:4">seek</name>:</label>

        <expr_stmt pos:start="219:9" pos:end="219:41"><expr pos:start="219:9" pos:end="219:40"><call pos:start="219:9" pos:end="219:40"><name pos:start="219:9" pos:end="219:17">avio_seek</name><argument_list pos:start="219:18" pos:end="219:40">(<argument pos:start="219:19" pos:end="219:23"><expr pos:start="219:19" pos:end="219:23"><name pos:start="219:19" pos:end="219:23"><name pos:start="219:19" pos:end="219:19">s</name><operator pos:start="219:20" pos:end="219:21">-&gt;</operator><name pos:start="219:22" pos:end="219:23">pb</name></name></expr></argument>, <argument pos:start="219:26" pos:end="219:29"><expr pos:start="219:26" pos:end="219:29"><name pos:start="219:26" pos:end="219:29">next</name></expr></argument>, <argument pos:start="219:32" pos:end="219:39"><expr pos:start="219:32" pos:end="219:39"><name pos:start="219:32" pos:end="219:39">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="225:5" pos:end="227:18"><if pos:start="225:5" pos:end="227:18">if <condition pos:start="225:8" pos:end="225:37">(<expr pos:start="225:9" pos:end="225:36"><name pos:start="225:9" pos:end="225:15">version</name> <operator pos:start="225:17" pos:end="225:18">==</operator> <literal type="number" pos:start="225:20" pos:end="225:20">4</literal> <operator pos:start="225:22" pos:end="225:23">&amp;&amp;</operator> <name pos:start="225:25" pos:end="225:29">flags</name> <operator pos:start="225:31" pos:end="225:31">&amp;</operator> <literal type="number" pos:start="225:33" pos:end="225:36">0x10</literal></expr>)</condition><block type="pseudo" pos:start="227:9" pos:end="227:18"><block_content pos:start="227:9" pos:end="227:18"> <comment type="block" pos:start="225:39" pos:end="225:88">/* Footer preset, always 10 bytes, skip over it */</comment>

        <expr_stmt pos:start="227:9" pos:end="227:18"><expr pos:start="227:9" pos:end="227:17"><name pos:start="227:9" pos:end="227:11">end</name> <operator pos:start="227:13" pos:end="227:14">+=</operator> <literal type="number" pos:start="227:16" pos:end="227:17">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <label pos:start="231:3" pos:end="231:8"><name pos:start="231:3" pos:end="231:7">error</name>:</label>

    <if_stmt pos:start="233:5" pos:end="235:92"><if pos:start="233:5" pos:end="235:92">if <condition pos:start="233:8" pos:end="233:15">(<expr pos:start="233:9" pos:end="233:14"><name pos:start="233:9" pos:end="233:14">reason</name></expr>)</condition><block type="pseudo" pos:start="235:9" pos:end="235:92"><block_content pos:start="235:9" pos:end="235:92">

        <expr_stmt pos:start="235:9" pos:end="235:92"><expr pos:start="235:9" pos:end="235:91"><call pos:start="235:9" pos:end="235:91"><name pos:start="235:9" pos:end="235:14">av_log</name><argument_list pos:start="235:15" pos:end="235:91">(<argument pos:start="235:16" pos:end="235:16"><expr pos:start="235:16" pos:end="235:16"><name pos:start="235:16" pos:end="235:16">s</name></expr></argument>, <argument pos:start="235:19" pos:end="235:29"><expr pos:start="235:19" pos:end="235:29"><name pos:start="235:19" pos:end="235:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="235:32" pos:end="235:73"><expr pos:start="235:32" pos:end="235:73"><literal type="string" pos:start="235:32" pos:end="235:73">"ID3v2.%d tag skipped, cannot handle %s\n"</literal></expr></argument>, <argument pos:start="235:76" pos:end="235:82"><expr pos:start="235:76" pos:end="235:82"><name pos:start="235:76" pos:end="235:82">version</name></expr></argument>, <argument pos:start="235:85" pos:end="235:90"><expr pos:start="235:85" pos:end="235:90"><name pos:start="235:85" pos:end="235:90">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:36"><expr pos:start="237:5" pos:end="237:35"><call pos:start="237:5" pos:end="237:35"><name pos:start="237:5" pos:end="237:13">avio_seek</name><argument_list pos:start="237:14" pos:end="237:35">(<argument pos:start="237:15" pos:end="237:19"><expr pos:start="237:15" pos:end="237:19"><name pos:start="237:15" pos:end="237:19"><name pos:start="237:15" pos:end="237:15">s</name><operator pos:start="237:16" pos:end="237:17">-&gt;</operator><name pos:start="237:18" pos:end="237:19">pb</name></name></expr></argument>, <argument pos:start="237:22" pos:end="237:24"><expr pos:start="237:22" pos:end="237:24"><name pos:start="237:22" pos:end="237:24">end</name></expr></argument>, <argument pos:start="237:27" pos:end="237:34"><expr pos:start="237:27" pos:end="237:34"><name pos:start="237:27" pos:end="237:34">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:20"><expr pos:start="239:5" pos:end="239:19"><call pos:start="239:5" pos:end="239:19"><name pos:start="239:5" pos:end="239:11">av_free</name><argument_list pos:start="239:12" pos:end="239:19">(<argument pos:start="239:13" pos:end="239:18"><expr pos:start="239:13" pos:end="239:18"><name pos:start="239:13" pos:end="239:18">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="241:5" pos:end="241:11">return;</return>

</block_content>}</block></function>
</unit>
