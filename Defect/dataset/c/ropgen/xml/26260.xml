<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26260.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">generate_eeprom_spd</name><parameter_list pos:start="1:32" pos:end="1:69">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:39">uint8_t</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">eeprom</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:68"><decl pos:start="1:50" pos:end="1:68"><type pos:start="1:50" pos:end="1:68"><name pos:start="1:50" pos:end="1:59">ram_addr_t</name></type> <name pos:start="1:61" pos:end="1:68">ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:53">

    <enum pos:start="5:5" pos:end="5:40">enum <block pos:start="5:10" pos:end="5:34">{ <decl pos:start="5:12" pos:end="5:20"><name pos:start="5:12" pos:end="5:14">SDR</name> <init pos:start="5:16" pos:end="5:20">= <expr pos:start="5:18" pos:end="5:20"><literal type="number" pos:start="5:18" pos:end="5:20">0x4</literal></expr></init></decl>, <decl pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:26">DDR2</name> <init pos:start="5:28" pos:end="5:32">= <expr pos:start="5:30" pos:end="5:32"><literal type="number" pos:start="5:30" pos:end="5:32">0x8</literal></expr></init></decl> }</block> <decl pos:start="5:36" pos:end="5:39"><name pos:start="5:36" pos:end="5:39">type</name></decl>;</enum>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">spd</name> <init pos:start="7:18" pos:end="7:38">= <expr pos:start="7:20" pos:end="7:38"><name pos:start="7:20" pos:end="7:38"><name pos:start="7:20" pos:end="7:29">spd_eeprom</name><operator pos:start="7:30" pos:end="7:30">.</operator><name pos:start="7:31" pos:end="7:38">contents</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:18">nbanks</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:20">density</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:29">/* work in terms of MB */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:12">ram_size</name> <operator pos:start="19:14" pos:end="19:16">&gt;&gt;=</operator> <literal type="number" pos:start="19:18" pos:end="19:19">20</literal></expr>;</expr_stmt>



    <while pos:start="23:5" pos:end="33:5">while <condition pos:start="23:11" pos:end="23:44">(<expr pos:start="23:12" pos:end="23:43"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:20">ram_size</name> <operator pos:start="23:22" pos:end="23:23">&gt;=</operator> <literal type="number" pos:start="23:25" pos:end="23:25">4</literal><operator pos:start="23:26" pos:end="23:26">)</operator> <operator pos:start="23:28" pos:end="23:29">&amp;&amp;</operator> <operator pos:start="23:31" pos:end="23:31">(</operator><name pos:start="23:32" pos:end="23:37">nbanks</name> <operator pos:start="23:39" pos:end="23:40">&lt;=</operator> <literal type="number" pos:start="23:42" pos:end="23:42">2</literal><operator pos:start="23:43" pos:end="23:43">)</operator></expr>)</condition> <block pos:start="23:46" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:33">

        <decl_stmt pos:start="25:9" pos:end="25:52"><decl pos:start="25:9" pos:end="25:51"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:19">sz_log2</name> <init pos:start="25:21" pos:end="25:51">= <expr pos:start="25:23" pos:end="25:51"><call pos:start="25:23" pos:end="25:51"><name pos:start="25:23" pos:end="25:25">MIN</name><argument_list pos:start="25:26" pos:end="25:51">(<argument pos:start="25:27" pos:end="25:46"><expr pos:start="25:27" pos:end="25:46"><literal type="number" pos:start="25:27" pos:end="25:30">31</literal> <operator pos:start="25:30" pos:end="25:30">-</operator> <call pos:start="25:32" pos:end="25:46"><name pos:start="25:32" pos:end="25:36">clz32</name><argument_list pos:start="25:37" pos:end="25:46">(<argument pos:start="25:38" pos:end="25:45"><expr pos:start="25:38" pos:end="25:45"><name pos:start="25:38" pos:end="25:45">ram_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:49" pos:end="25:50"><expr pos:start="25:49" pos:end="25:50"><literal type="number" pos:start="25:49" pos:end="25:50">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:17"><expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:14">nbanks</name><operator pos:start="27:15" pos:end="27:16">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:15">density</name> <operator pos:start="29:17" pos:end="29:18">|=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">1</literal> <operator pos:start="29:22" pos:end="29:23">&lt;&lt;</operator> <operator pos:start="29:25" pos:end="29:25">(</operator><name pos:start="29:26" pos:end="29:32">sz_log2</name> <operator pos:start="29:34" pos:end="29:34">-</operator> <literal type="number" pos:start="29:36" pos:end="29:36">2</literal><operator pos:start="29:37" pos:end="29:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:16">ram_size</name> <operator pos:start="31:18" pos:end="31:19">-=</operator> <literal type="number" pos:start="31:21" pos:end="31:21">1</literal> <operator pos:start="31:23" pos:end="31:24">&lt;&lt;</operator> <name pos:start="31:26" pos:end="31:32">sz_log2</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="37:5" pos:end="37:38">/* split to 2 banks if possible */</comment>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:39">(<expr pos:start="39:9" pos:end="39:38"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:15">nbanks</name> <operator pos:start="39:17" pos:end="39:18">==</operator> <literal type="number" pos:start="39:20" pos:end="39:20">1</literal><operator pos:start="39:21" pos:end="39:21">)</operator> <operator pos:start="39:23" pos:end="39:24">&amp;&amp;</operator> <operator pos:start="39:26" pos:end="39:26">(</operator><name pos:start="39:27" pos:end="39:33">density</name> <operator pos:start="39:35" pos:end="39:35">&gt;</operator> <literal type="number" pos:start="39:37" pos:end="39:37">1</literal><operator pos:start="39:38" pos:end="39:38">)</operator></expr>)</condition> <block pos:start="39:41" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:22">

        <expr_stmt pos:start="41:9" pos:end="41:17"><expr pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:14">nbanks</name><operator pos:start="41:15" pos:end="41:16">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:15">density</name> <operator pos:start="43:17" pos:end="43:19">&gt;&gt;=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="63:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:25">(<expr pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:15">density</name> <operator pos:start="49:17" pos:end="49:17">&amp;</operator> <literal type="number" pos:start="49:19" pos:end="49:24">0xff00</literal></expr>)</condition> <block pos:start="49:27" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:20">

        <expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:15">density</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <operator pos:start="51:19" pos:end="51:19">(</operator><name pos:start="51:20" pos:end="51:26">density</name> <operator pos:start="51:28" pos:end="51:28">&amp;</operator> <literal type="number" pos:start="51:30" pos:end="51:33">0xe0</literal><operator pos:start="51:34" pos:end="51:34">)</operator> <operator pos:start="51:36" pos:end="51:36">|</operator> <operator pos:start="51:38" pos:end="51:38">(</operator><operator pos:start="51:39" pos:end="51:39">(</operator><name pos:start="51:40" pos:end="51:46">density</name> <operator pos:start="51:48" pos:end="51:49">&gt;&gt;</operator> <literal type="number" pos:start="51:51" pos:end="51:51">8</literal><operator pos:start="51:52" pos:end="51:52">)</operator> <operator pos:start="51:54" pos:end="51:54">&amp;</operator> <literal type="number" pos:start="51:56" pos:end="51:59">0x1f</literal><operator pos:start="51:60" pos:end="51:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:20"><expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:12">type</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <name pos:start="53:16" pos:end="53:19">DDR2</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="59:5">else if <condition pos:start="55:15" pos:end="55:33">(<expr pos:start="55:16" pos:end="55:32"><operator pos:start="55:16" pos:end="55:16">!</operator><operator pos:start="55:17" pos:end="55:17">(</operator><name pos:start="55:18" pos:end="55:24">density</name> <operator pos:start="55:26" pos:end="55:26">&amp;</operator> <literal type="number" pos:start="55:28" pos:end="55:31">0x1f</literal><operator pos:start="55:32" pos:end="55:32">)</operator></expr>)</condition> <block pos:start="55:35" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:20">

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:12">type</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:19">DDR2</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:19">

        <expr_stmt pos:start="61:9" pos:end="61:19"><expr pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:12">type</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:18">SDR</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:17">(<expr pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:16">ram_size</name></expr>)</condition> <block pos:start="67:19" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:46">

        <expr_stmt pos:start="69:9" pos:end="71:46"><expr pos:start="69:9" pos:end="71:45"><call pos:start="69:9" pos:end="71:45"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="71:45">(<argument pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">stderr</name></expr></argument>, <argument pos:start="69:25" pos:end="71:29"><expr pos:start="69:25" pos:end="71:29"><literal type="string" pos:start="69:25" pos:end="69:66">"Warning: SPD cannot represent final %dMB"</literal>

                <literal type="string" pos:start="71:17" pos:end="71:29">" of SDRAM\n"</literal></expr></argument>, <argument pos:start="71:32" pos:end="71:44"><expr pos:start="71:32" pos:end="71:44"><operator pos:start="71:32" pos:end="71:32">(</operator><name pos:start="71:33" pos:end="71:35">int</name><operator pos:start="71:36" pos:end="71:36">)</operator><name pos:start="71:37" pos:end="71:44">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:40">/* fill in SPD memory information */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:10"><name pos:start="79:5" pos:end="79:7">spd</name><index pos:start="79:8" pos:end="79:10">[<expr pos:start="79:9" pos:end="79:9"><literal type="number" pos:start="79:9" pos:end="79:9">2</literal></expr>]</index></name> <operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:17">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:20"><expr pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:10"><name pos:start="81:5" pos:end="81:7">spd</name><index pos:start="81:8" pos:end="81:10">[<expr pos:start="81:9" pos:end="81:9"><literal type="number" pos:start="81:9" pos:end="81:9">5</literal></expr>]</index></name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:19">nbanks</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:22"><expr pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:11"><name pos:start="83:5" pos:end="83:7">spd</name><index pos:start="83:8" pos:end="83:11">[<expr pos:start="83:9" pos:end="83:10"><literal type="number" pos:start="83:9" pos:end="83:10">31</literal></expr>]</index></name> <operator pos:start="83:13" pos:end="83:13">=</operator> <name pos:start="83:15" pos:end="83:21">density</name></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:18">/* checksum */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:11"><name pos:start="89:5" pos:end="89:7">spd</name><index pos:start="89:8" pos:end="89:11">[<expr pos:start="89:9" pos:end="89:10"><literal type="number" pos:start="89:9" pos:end="89:10">63</literal></expr>]</index></name> <operator pos:start="89:13" pos:end="89:13">=</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>;</expr_stmt>

    <for pos:start="91:5" pos:end="95:5">for <control pos:start="91:9" pos:end="91:28">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:23"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <literal type="number" pos:start="91:21" pos:end="91:22">63</literal></expr>;</condition> <incr pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><name pos:start="91:25" pos:end="91:25">i</name><operator pos:start="91:26" pos:end="91:27">++</operator></expr></incr>)</control> <block pos:start="91:30" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:26">

        <expr_stmt pos:start="93:9" pos:end="93:26"><expr pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">spd</name><index pos:start="93:12" pos:end="93:15">[<expr pos:start="93:13" pos:end="93:14"><literal type="number" pos:start="93:13" pos:end="93:14">63</literal></expr>]</index></name> <operator pos:start="93:17" pos:end="93:18">+=</operator> <name pos:start="93:20" pos:end="93:25"><name pos:start="93:20" pos:end="93:22">spd</name><index pos:start="93:23" pos:end="93:25">[<expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="99:5" pos:end="99:24">/* copy for SMBUS */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:53"><expr pos:start="101:5" pos:end="101:52"><call pos:start="101:5" pos:end="101:52"><name pos:start="101:5" pos:end="101:10">memcpy</name><argument_list pos:start="101:11" pos:end="101:52">(<argument pos:start="101:12" pos:end="101:17"><expr pos:start="101:12" pos:end="101:17"><name pos:start="101:12" pos:end="101:17">eeprom</name></expr></argument>, <argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">spd</name></expr></argument>, <argument pos:start="101:25" pos:end="101:51"><expr pos:start="101:25" pos:end="101:51"><sizeof pos:start="101:25" pos:end="101:51">sizeof<argument_list pos:start="101:31" pos:end="101:51">(<argument pos:start="101:32" pos:end="101:50"><expr pos:start="101:32" pos:end="101:50"><name pos:start="101:32" pos:end="101:50"><name pos:start="101:32" pos:end="101:41">spd_eeprom</name><operator pos:start="101:42" pos:end="101:42">.</operator><name pos:start="101:43" pos:end="101:50">contents</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
