<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21854.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">usb_ohci_init</name><parameter_list pos:start="1:26" pos:end="7:67">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:35">OHCIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:41">ohci</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><name pos:start="1:44" pos:end="1:54">DeviceState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">dev</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:39">num_ports</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:50"><decl pos:start="3:42" pos:end="3:50"><type pos:start="3:42" pos:end="3:50"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:50">devfn</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:38"><decl pos:start="5:27" pos:end="5:38"><type pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:34">qemu_irq</name></type> <name pos:start="5:36" pos:end="5:38">irq</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:59"><decl pos:start="5:41" pos:end="5:59"><type pos:start="5:41" pos:end="5:59"><name pos:start="5:41" pos:end="5:54"><name pos:start="5:41" pos:end="5:44">enum</name> <name pos:start="5:46" pos:end="5:54">ohci_type</name></name></type> <name pos:start="5:56" pos:end="5:59">type</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:42"><decl pos:start="7:27" pos:end="7:42"><type pos:start="7:27" pos:end="7:42"><specifier pos:start="7:27" pos:end="7:31">const</specifier> <name pos:start="7:33" pos:end="7:36">char</name> <modifier pos:start="7:38" pos:end="7:38">*</modifier></type><name pos:start="7:39" pos:end="7:42">name</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:66"><decl pos:start="7:45" pos:end="7:66"><type pos:start="7:45" pos:end="7:66"><name pos:start="7:45" pos:end="7:52">uint32_t</name></type> <name pos:start="7:54" pos:end="7:66">localmem_base</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="79:1">{<block_content pos:start="11:5" pos:end="77:21">

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="43:5"><if pos:start="15:5" pos:end="43:5">if <condition pos:start="15:8" pos:end="15:28">(<expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:22">usb_frame_time</name> <operator pos:start="15:24" pos:end="15:25">==</operator> <literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr>)</condition> <block pos:start="15:30" pos:end="43:5">{<block_content pos:start="19:9" pos:end="41:46">

<cpp:ifdef pos:start="17:1" pos:end="17:21">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:21">OHCI_TIME_WARP</name></cpp:ifdef>

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:22">usb_frame_time</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:44"><name pos:start="19:26" pos:end="19:42">get_ticks_per_sec</name><argument_list pos:start="19:43" pos:end="19:44">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="24:0"><expr pos:start="21:9" pos:end="21:68"><name pos:start="21:9" pos:end="21:20">usb_bit_time</name> <operator pos:start="21:22" pos:end="21:22">=</operator> <call pos:start="21:24" pos:end="21:68"><name pos:start="21:24" pos:end="21:31">muldiv64</name><argument_list pos:start="21:32" pos:end="21:68">(<argument pos:start="21:33" pos:end="21:33"><expr pos:start="21:33" pos:end="21:33"><literal type="number" pos:start="21:33" pos:end="21:33">1</literal></expr></argument>, <argument pos:start="21:36" pos:end="21:54"><expr pos:start="21:36" pos:end="21:54"><call pos:start="21:36" pos:end="21:54"><name pos:start="21:36" pos:end="21:52">get_ticks_per_sec</name><argument_list pos:start="21:53" pos:end="21:54">()</argument_list></call></expr></argument>, <argument pos:start="21:57" pos:end="21:67"><expr pos:start="21:57" pos:end="21:67"><name pos:start="21:57" pos:end="21:62">USB_HZ</name><operator pos:start="21:63" pos:end="21:63">/</operator><literal type="number" pos:start="21:64" pos:end="21:67">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="25:9" pos:end="25:64"><expr pos:start="25:9" pos:end="25:63"><name pos:start="25:9" pos:end="25:22">usb_frame_time</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:63"><name pos:start="25:26" pos:end="25:33">muldiv64</name><argument_list pos:start="25:34" pos:end="25:63">(<argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><literal type="number" pos:start="25:35" pos:end="25:35">1</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:56"><expr pos:start="25:38" pos:end="25:56"><call pos:start="25:38" pos:end="25:56"><name pos:start="25:38" pos:end="25:54">get_ticks_per_sec</name><argument_list pos:start="25:55" pos:end="25:56">()</argument_list></call></expr></argument>, <argument pos:start="25:59" pos:end="25:62"><expr pos:start="25:59" pos:end="25:62"><literal type="number" pos:start="25:59" pos:end="25:62">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="38:0"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:42">(<expr pos:start="27:13" pos:end="27:41"><call pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:29">get_ticks_per_sec</name><argument_list pos:start="27:30" pos:end="27:31">()</argument_list></call> <operator pos:start="27:33" pos:end="27:34">&gt;=</operator> <name pos:start="27:36" pos:end="27:41">USB_HZ</name></expr>)</condition> <block pos:start="27:44" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:68">

            <expr_stmt pos:start="29:13" pos:end="29:68"><expr pos:start="29:13" pos:end="29:67"><name pos:start="29:13" pos:end="29:24">usb_bit_time</name> <operator pos:start="29:26" pos:end="29:26">=</operator> <call pos:start="29:28" pos:end="29:67"><name pos:start="29:28" pos:end="29:35">muldiv64</name><argument_list pos:start="29:36" pos:end="29:67">(<argument pos:start="29:37" pos:end="29:37"><expr pos:start="29:37" pos:end="29:37"><literal type="number" pos:start="29:37" pos:end="29:37">1</literal></expr></argument>, <argument pos:start="29:40" pos:end="29:58"><expr pos:start="29:40" pos:end="29:58"><call pos:start="29:40" pos:end="29:58"><name pos:start="29:40" pos:end="29:56">get_ticks_per_sec</name><argument_list pos:start="29:57" pos:end="29:58">()</argument_list></call></expr></argument>, <argument pos:start="29:61" pos:end="29:66"><expr pos:start="29:61" pos:end="29:66"><name pos:start="29:61" pos:end="29:66">USB_HZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="38:0">else <block pos:start="31:16" pos:end="38:0">{<block_content pos:start="33:13" pos:end="33:29">

            <expr_stmt pos:start="33:13" pos:end="33:29"><expr pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:24">usb_bit_time</name> <operator pos:start="33:26" pos:end="33:26">=</operator> <literal type="number" pos:start="33:28" pos:end="33:28">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="39:9" pos:end="41:46"><expr pos:start="39:9" pos:end="41:45"><call pos:start="39:9" pos:end="41:45"><name pos:start="39:9" pos:end="39:15">dprintf</name><argument_list pos:start="39:16" pos:end="41:45">(<argument pos:start="39:17" pos:end="39:81"><expr pos:start="39:17" pos:end="39:81"><literal type="string" pos:start="39:17" pos:end="39:42">"usb-ohci: usb_bit_time=%"</literal> <name pos:start="39:44" pos:end="39:49">PRId64</name> <literal type="string" pos:start="39:51" pos:end="39:69">" usb_frame_time=%"</literal> <name pos:start="39:71" pos:end="39:76">PRId64</name> <literal type="string" pos:start="39:78" pos:end="39:81">"\n"</literal></expr></argument>,

                <argument pos:start="41:17" pos:end="41:30"><expr pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:30">usb_frame_time</name></expr></argument>, <argument pos:start="41:33" pos:end="41:44"><expr pos:start="41:33" pos:end="41:44"><name pos:start="41:33" pos:end="41:44">usb_bit_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:72"><expr pos:start="47:5" pos:end="47:71"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:8">ohci</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:13">mem</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:71"><name pos:start="47:17" pos:end="47:38">cpu_register_io_memory</name><argument_list pos:start="47:39" pos:end="47:71">(<argument pos:start="47:40" pos:end="47:50"><expr pos:start="47:40" pos:end="47:50"><name pos:start="47:40" pos:end="47:50">ohci_readfn</name></expr></argument>, <argument pos:start="47:53" pos:end="47:64"><expr pos:start="47:53" pos:end="47:64"><name pos:start="47:53" pos:end="47:64">ohci_writefn</name></expr></argument>, <argument pos:start="47:67" pos:end="47:70"><expr pos:start="47:67" pos:end="47:70"><name pos:start="47:67" pos:end="47:70">ohci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:40"><expr pos:start="49:5" pos:end="49:39"><name pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:8">ohci</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:23">localmem_base</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:39">localmem_base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:8">ohci</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:14">name</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:21">name</name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:8">ohci</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:13">irq</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:19">irq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:8">ohci</name><operator pos:start="57:9" pos:end="57:10">-&gt;</operator><name pos:start="57:11" pos:end="57:14">type</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:21">type</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><call pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:15">usb_bus_new</name><argument_list pos:start="61:16" pos:end="61:32">(<argument pos:start="61:17" pos:end="61:26"><expr pos:start="61:17" pos:end="61:26"><operator pos:start="61:17" pos:end="61:17">&amp;</operator><name pos:start="61:18" pos:end="61:26"><name pos:start="61:18" pos:end="61:21">ohci</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:26">bus</name></name></expr></argument>, <argument pos:start="61:29" pos:end="61:31"><expr pos:start="61:29" pos:end="61:31"><name pos:start="61:29" pos:end="61:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:32"><expr pos:start="63:5" pos:end="63:31"><name pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:8">ohci</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:19">num_ports</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:31">num_ports</name></expr>;</expr_stmt>

    <for pos:start="65:5" pos:end="69:5">for <control pos:start="65:9" pos:end="65:35">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:30"><expr pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:29">num_ports</name></expr>;</condition> <incr pos:start="65:32" pos:end="65:34"><expr pos:start="65:32" pos:end="65:34"><name pos:start="65:32" pos:end="65:32">i</name><operator pos:start="65:33" pos:end="65:34">++</operator></expr></incr>)</control> <block pos:start="65:37" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:83">

        <expr_stmt pos:start="67:9" pos:end="67:83"><expr pos:start="67:9" pos:end="67:82"><call pos:start="67:9" pos:end="67:82"><name pos:start="67:9" pos:end="67:25">usb_register_port</name><argument_list pos:start="67:26" pos:end="67:82">(<argument pos:start="67:27" pos:end="67:36"><expr pos:start="67:27" pos:end="67:36"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:36"><name pos:start="67:28" pos:end="67:31">ohci</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:36">bus</name></name></expr></argument>, <argument pos:start="67:39" pos:end="67:59"><expr pos:start="67:39" pos:end="67:59"><operator pos:start="67:39" pos:end="67:39">&amp;</operator><name pos:start="67:40" pos:end="67:54"><name pos:start="67:40" pos:end="67:43">ohci</name><operator pos:start="67:44" pos:end="67:45">-&gt;</operator><name pos:start="67:46" pos:end="67:51">rhport</name><index pos:start="67:52" pos:end="67:54">[<expr pos:start="67:53" pos:end="67:53"><name pos:start="67:53" pos:end="67:53">i</name></expr>]</index></name><operator pos:start="67:55" pos:end="67:55">.</operator><name pos:start="67:56" pos:end="67:59">port</name></expr></argument>, <argument pos:start="67:62" pos:end="67:65"><expr pos:start="67:62" pos:end="67:65"><name pos:start="67:62" pos:end="67:65">ohci</name></expr></argument>, <argument pos:start="67:68" pos:end="67:68"><expr pos:start="67:68" pos:end="67:68"><name pos:start="67:68" pos:end="67:68">i</name></expr></argument>, <argument pos:start="67:71" pos:end="67:81"><expr pos:start="67:71" pos:end="67:81"><name pos:start="67:71" pos:end="67:81">ohci_attach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:8">ohci</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:18">async_td</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:42"><expr pos:start="75:5" pos:end="75:41"><call pos:start="75:5" pos:end="75:41"><name pos:start="75:5" pos:end="75:23">qemu_register_reset</name><argument_list pos:start="75:24" pos:end="75:41">(<argument pos:start="75:25" pos:end="75:34"><expr pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:34">ohci_reset</name></expr></argument>, <argument pos:start="75:37" pos:end="75:40"><expr pos:start="75:37" pos:end="75:40"><name pos:start="75:37" pos:end="75:40">ohci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:21"><expr pos:start="77:5" pos:end="77:20"><call pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:14">ohci_reset</name><argument_list pos:start="77:15" pos:end="77:20">(<argument pos:start="77:16" pos:end="77:19"><expr pos:start="77:16" pos:end="77:19"><name pos:start="77:16" pos:end="77:19">ohci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
