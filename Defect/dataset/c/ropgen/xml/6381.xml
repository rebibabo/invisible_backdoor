<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6381.c" pos:tabs="8"><function pos:start="1:1" pos:end="591:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">avi_read_header</name><parameter_list pos:start="1:27" pos:end="1:70">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:69"><decl pos:start="1:48" pos:end="1:69"><type pos:start="1:48" pos:end="1:69"><name pos:start="1:48" pos:end="1:65">AVFormatParameters</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="591:1">{<block_content pos:start="5:5" pos:end="589:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AVIContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">avi</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ByteIOContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">pb</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">tag</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:22">tag1</name></decl>, <decl pos:start="9:25" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:25" pos:end="9:31">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:70"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">codec_type</name></decl>, <decl pos:start="11:21" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:32">stream_index</name></decl>, <decl pos:start="11:35" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:35" pos:end="11:46">frame_period</name></decl>, <decl pos:start="11:49" pos:end="11:56"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:49" pos:end="11:56">bit_rate</name></decl>, <decl pos:start="11:59" pos:end="11:63"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:59" pos:end="11:63">scale</name></decl>, <decl pos:start="11:66" pos:end="11:69"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:66" pos:end="11:69">rate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:21">size</name></decl>, <decl pos:start="13:24" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:24" pos:end="13:32">nb_frames</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">AVStream</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">AVIStream</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:18">ast</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">xan_video</name> <init pos:start="21:19" pos:end="21:21">= <expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="21:25" pos:end="21:53">/* hack to support Xan A/V */</comment>



    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:16">get_riff</name><argument_list pos:start="25:17" pos:end="25:25">(<argument pos:start="25:18" pos:end="25:20"><expr pos:start="25:18" pos:end="25:20"><name pos:start="25:18" pos:end="25:20">avi</name></expr></argument>, <argument pos:start="25:23" pos:end="25:24"><expr pos:start="25:23" pos:end="25:24"><name pos:start="25:23" pos:end="25:24">pb</name></expr></argument>)</argument_list></call> <operator pos:start="25:27" pos:end="25:27">&lt;</operator> <literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:24">/* first list tag */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:16">stream_index</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:14">codec_type</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <operator pos:start="35:18" pos:end="35:18">-</operator><literal type="number" pos:start="35:19" pos:end="35:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:21"><expr pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:16">frame_period</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</expr_stmt>

    <for pos:start="39:5" pos:end="557:5">for<control pos:start="39:8" pos:end="39:11">(<init pos:start="39:9" pos:end="39:9">;</init><condition pos:start="39:10" pos:end="39:10">;</condition><incr/>)</control> <block pos:start="39:13" pos:end="557:5">{<block_content pos:start="41:9" pos:end="555:9">

        <if_stmt pos:start="41:9" pos:end="43:22"><if pos:start="41:9" pos:end="43:22">if <condition pos:start="41:12" pos:end="41:25">(<expr pos:start="41:13" pos:end="41:24"><call pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:20">url_feof</name><argument_list pos:start="41:21" pos:end="41:24">(<argument pos:start="41:22" pos:end="41:23"><expr pos:start="41:22" pos:end="41:23"><name pos:start="41:22" pos:end="41:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:22"><block_content pos:start="43:13" pos:end="43:22">

            <goto pos:start="43:13" pos:end="43:22">goto <name pos:start="43:18" pos:end="43:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:11">tag</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:26"><name pos:start="45:15" pos:end="45:22">get_le32</name><argument_list pos:start="45:23" pos:end="45:26">(<argument pos:start="45:24" pos:end="45:25"><expr pos:start="45:24" pos:end="45:25"><name pos:start="45:24" pos:end="45:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:12">size</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:23">get_le32</name><argument_list pos:start="47:24" pos:end="47:27">(<argument pos:start="47:25" pos:end="47:26"><expr pos:start="47:25" pos:end="47:26"><name pos:start="47:25" pos:end="47:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:12">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:12">DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="51:9" pos:end="54:0"><expr pos:start="51:9" pos:end="51:35"><call pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:17">print_tag</name><argument_list pos:start="51:18" pos:end="51:35">(<argument pos:start="51:19" pos:end="51:23"><expr pos:start="51:19" pos:end="51:23"><literal type="string" pos:start="51:19" pos:end="51:23">"tag"</literal></expr></argument>, <argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">tag</name></expr></argument>, <argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><name pos:start="51:31" pos:end="51:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



        <switch pos:start="57:9" pos:end="555:9">switch<condition pos:start="57:15" pos:end="57:19">(<expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">tag</name></expr>)</condition> <block pos:start="57:21" pos:end="555:9">{<block_content pos:start="59:9" pos:end="553:18">

        <case pos:start="59:9" pos:end="59:39">case <expr pos:start="59:14" pos:end="59:38"><call pos:start="59:14" pos:end="59:38"><name pos:start="59:14" pos:end="59:18">MKTAG</name><argument_list pos:start="59:19" pos:end="59:38">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><literal type="char" pos:start="59:20" pos:end="59:22">'L'</literal></expr></argument>, <argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><literal type="char" pos:start="59:25" pos:end="59:27">'I'</literal></expr></argument>, <argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><literal type="char" pos:start="59:30" pos:end="59:32">'S'</literal></expr></argument>, <argument pos:start="59:35" pos:end="59:37"><expr pos:start="59:35" pos:end="59:37"><literal type="char" pos:start="59:35" pos:end="59:37">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <comment type="block" pos:start="61:13" pos:end="61:61">/* ignored, except when start of video packets */</comment>

            <expr_stmt pos:start="63:13" pos:end="66:0"><expr pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:16">tag1</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:31"><name pos:start="63:20" pos:end="63:27">get_le32</name><argument_list pos:start="63:28" pos:end="63:31">(<argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><name pos:start="63:29" pos:end="63:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="65:1" pos:end="65:12">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:12">DEBUG</name></cpp:ifdef>

            <expr_stmt pos:start="67:13" pos:end="70:0"><expr pos:start="67:13" pos:end="67:38"><call pos:start="67:13" pos:end="67:38"><name pos:start="67:13" pos:end="67:21">print_tag</name><argument_list pos:start="67:22" pos:end="67:38">(<argument pos:start="67:23" pos:end="67:28"><expr pos:start="67:23" pos:end="67:28"><literal type="string" pos:start="67:23" pos:end="67:28">"list"</literal></expr></argument>, <argument pos:start="67:31" pos:end="67:34"><expr pos:start="67:31" pos:end="67:34"><name pos:start="67:31" pos:end="67:34">tag1</name></expr></argument>, <argument pos:start="67:37" pos:end="67:37"><expr pos:start="67:37" pos:end="67:37"><literal type="number" pos:start="67:37" pos:end="67:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="71:13" pos:end="87:13"><if pos:start="71:13" pos:end="87:13">if <condition pos:start="71:16" pos:end="71:50">(<expr pos:start="71:17" pos:end="71:49"><name pos:start="71:17" pos:end="71:20">tag1</name> <operator pos:start="71:22" pos:end="71:23">==</operator> <call pos:start="71:25" pos:end="71:49"><name pos:start="71:25" pos:end="71:29">MKTAG</name><argument_list pos:start="71:30" pos:end="71:49">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><literal type="char" pos:start="71:31" pos:end="71:33">'m'</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:38"><expr pos:start="71:36" pos:end="71:38"><literal type="char" pos:start="71:36" pos:end="71:38">'o'</literal></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><literal type="char" pos:start="71:41" pos:end="71:43">'v'</literal></expr></argument>, <argument pos:start="71:46" pos:end="71:48"><expr pos:start="71:46" pos:end="71:48"><literal type="char" pos:start="71:46" pos:end="71:48">'i'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:52" pos:end="87:13">{<block_content pos:start="73:17" pos:end="85:35">

                <expr_stmt pos:start="73:17" pos:end="73:51"><expr pos:start="73:17" pos:end="73:50"><name pos:start="73:17" pos:end="73:30"><name pos:start="73:17" pos:end="73:19">avi</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:30">movi_list</name></name> <operator pos:start="73:32" pos:end="73:32">=</operator> <call pos:start="73:34" pos:end="73:46"><name pos:start="73:34" pos:end="73:42">url_ftell</name><argument_list pos:start="73:43" pos:end="73:46">(<argument pos:start="73:44" pos:end="73:45"><expr pos:start="73:44" pos:end="73:45"><name pos:start="73:44" pos:end="73:45">pb</name></expr></argument>)</argument_list></call> <operator pos:start="73:48" pos:end="73:48">-</operator> <literal type="number" pos:start="73:50" pos:end="73:50">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="75:17" pos:end="80:0"><if pos:start="75:17" pos:end="75:63">if<condition pos:start="75:19" pos:end="75:24">(<expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">size</name></expr>)</condition><block type="pseudo" pos:start="75:26" pos:end="75:63"><block_content pos:start="75:26" pos:end="75:63"> <expr_stmt pos:start="75:26" pos:end="75:63"><expr pos:start="75:26" pos:end="75:62"><name pos:start="75:26" pos:end="75:38"><name pos:start="75:26" pos:end="75:28">avi</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:38">movi_end</name></name> <operator pos:start="75:40" pos:end="75:40">=</operator> <name pos:start="75:42" pos:end="75:55"><name pos:start="75:42" pos:end="75:44">avi</name><operator pos:start="75:45" pos:end="75:46">-&gt;</operator><name pos:start="75:47" pos:end="75:55">movi_list</name></name> <operator pos:start="75:57" pos:end="75:57">+</operator> <name pos:start="75:59" pos:end="75:62">size</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="77:17" pos:end="80:0">else<block type="pseudo" pos:start="77:26" pos:end="80:0"><block_content pos:start="77:26" pos:end="80:0">     <expr_stmt pos:start="77:26" pos:end="80:0"><expr pos:start="77:26" pos:end="77:69"><name pos:start="77:26" pos:end="77:38"><name pos:start="77:26" pos:end="77:28">avi</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:38">movi_end</name></name> <operator pos:start="77:40" pos:end="77:40">=</operator> <call pos:start="77:42" pos:end="77:69"><name pos:start="77:42" pos:end="77:53">url_filesize</name><argument_list pos:start="77:54" pos:end="77:69">(<argument pos:start="77:55" pos:end="77:68"><expr pos:start="77:55" pos:end="77:68"><call pos:start="77:55" pos:end="77:68"><name pos:start="77:55" pos:end="77:64">url_fileno</name><argument_list pos:start="77:65" pos:end="77:68">(<argument pos:start="77:66" pos:end="77:67"><expr pos:start="77:66" pos:end="77:67"><name pos:start="77:66" pos:end="77:67">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef pos:start="79:1" pos:end="79:12">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:12">DEBUG</name></cpp:ifdef>

                <expr_stmt pos:start="81:17" pos:end="84:0"><expr pos:start="81:17" pos:end="81:55"><call pos:start="81:17" pos:end="81:55"><name pos:start="81:17" pos:end="81:22">printf</name><argument_list pos:start="81:23" pos:end="81:55">(<argument pos:start="81:24" pos:end="81:39"><expr pos:start="81:24" pos:end="81:39"><literal type="string" pos:start="81:24" pos:end="81:39">"movi end=%Lx\n"</literal></expr></argument>, <argument pos:start="81:42" pos:end="81:54"><expr pos:start="81:42" pos:end="81:54"><name pos:start="81:42" pos:end="81:54"><name pos:start="81:42" pos:end="81:44">avi</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:54">movi_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

                <goto pos:start="85:17" pos:end="85:35">goto <name pos:start="85:22" pos:end="85:34">end_of_header</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:39">case <expr pos:start="91:14" pos:end="91:38"><call pos:start="91:14" pos:end="91:38"><name pos:start="91:14" pos:end="91:18">MKTAG</name><argument_list pos:start="91:19" pos:end="91:38">(<argument pos:start="91:20" pos:end="91:22"><expr pos:start="91:20" pos:end="91:22"><literal type="char" pos:start="91:20" pos:end="91:22">'d'</literal></expr></argument>, <argument pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><literal type="char" pos:start="91:25" pos:end="91:27">'m'</literal></expr></argument>, <argument pos:start="91:30" pos:end="91:32"><expr pos:start="91:30" pos:end="91:32"><literal type="char" pos:start="91:30" pos:end="91:32">'l'</literal></expr></argument>, <argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><literal type="char" pos:start="91:35" pos:end="91:37">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>

	    <expr_stmt pos:start="93:13" pos:end="93:29"><expr pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:15">avi</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:24">is_odml</name></name> <operator pos:start="93:26" pos:end="93:26">=</operator> <literal type="number" pos:start="93:28" pos:end="93:28">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="95:13" pos:end="95:45"><expr pos:start="95:13" pos:end="95:44"><call pos:start="95:13" pos:end="95:44"><name pos:start="95:13" pos:end="95:21">url_fskip</name><argument_list pos:start="95:22" pos:end="95:44">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">pb</name></expr></argument>, <argument pos:start="95:27" pos:end="95:43"><expr pos:start="95:27" pos:end="95:43"><name pos:start="95:27" pos:end="95:30">size</name> <operator pos:start="95:32" pos:end="95:32">+</operator> <operator pos:start="95:34" pos:end="95:34">(</operator><name pos:start="95:35" pos:end="95:38">size</name> <operator pos:start="95:40" pos:end="95:40">&amp;</operator> <literal type="number" pos:start="95:42" pos:end="95:42">1</literal><operator pos:start="95:43" pos:end="95:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:39">case <expr pos:start="99:14" pos:end="99:38"><call pos:start="99:14" pos:end="99:38"><name pos:start="99:14" pos:end="99:18">MKTAG</name><argument_list pos:start="99:19" pos:end="99:38">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><literal type="char" pos:start="99:20" pos:end="99:22">'a'</literal></expr></argument>, <argument pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><literal type="char" pos:start="99:25" pos:end="99:27">'v'</literal></expr></argument>, <argument pos:start="99:30" pos:end="99:32"><expr pos:start="99:30" pos:end="99:32"><literal type="char" pos:start="99:30" pos:end="99:32">'i'</literal></expr></argument>, <argument pos:start="99:35" pos:end="99:37"><expr pos:start="99:35" pos:end="99:37"><literal type="char" pos:start="99:35" pos:end="99:37">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>

	    <comment type="block" pos:start="101:13" pos:end="101:28">/* avi header */</comment>

            <comment type="block" pos:start="103:13" pos:end="103:48">/* using frame_period is bad idea */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:40"><expr pos:start="105:13" pos:end="105:39"><name pos:start="105:13" pos:end="105:24">frame_period</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <call pos:start="105:28" pos:end="105:39"><name pos:start="105:28" pos:end="105:35">get_le32</name><argument_list pos:start="105:36" pos:end="105:39">(<argument pos:start="105:37" pos:end="105:38"><expr pos:start="105:37" pos:end="105:38"><name pos:start="105:37" pos:end="105:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:40"><expr pos:start="107:13" pos:end="107:39"><name pos:start="107:13" pos:end="107:20">bit_rate</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <call pos:start="107:24" pos:end="107:35"><name pos:start="107:24" pos:end="107:31">get_le32</name><argument_list pos:start="107:32" pos:end="107:35">(<argument pos:start="107:33" pos:end="107:34"><expr pos:start="107:33" pos:end="107:34"><name pos:start="107:33" pos:end="107:34">pb</name></expr></argument>)</argument_list></call> <operator pos:start="107:37" pos:end="107:37">*</operator> <literal type="number" pos:start="107:39" pos:end="107:39">8</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><call pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:21">url_fskip</name><argument_list pos:start="109:22" pos:end="109:32">(<argument pos:start="109:23" pos:end="109:24"><expr pos:start="109:23" pos:end="109:24"><name pos:start="109:23" pos:end="109:24">pb</name></expr></argument>, <argument pos:start="109:27" pos:end="109:31"><expr pos:start="109:27" pos:end="109:31"><literal type="number" pos:start="109:27" pos:end="109:27">4</literal> <operator pos:start="109:29" pos:end="109:29">*</operator> <literal type="number" pos:start="109:31" pos:end="109:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:29"><expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:13">n</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <call pos:start="111:17" pos:end="111:28"><name pos:start="111:17" pos:end="111:24">get_le32</name><argument_list pos:start="111:25" pos:end="111:28">(<argument pos:start="111:26" pos:end="111:27"><expr pos:start="111:26" pos:end="111:27"><name pos:start="111:26" pos:end="111:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="113:13" pos:end="133:13">for<control pos:start="113:16" pos:end="113:28">(<init pos:start="113:17" pos:end="113:20"><expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:17">i</name><operator pos:start="113:18" pos:end="113:18">=</operator><literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>;</init><condition pos:start="113:21" pos:end="113:24"><expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:21">i</name><operator pos:start="113:22" pos:end="113:22">&lt;</operator><name pos:start="113:23" pos:end="113:23">n</name></expr>;</condition><incr pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:25">i</name><operator pos:start="113:26" pos:end="113:27">++</operator></expr></incr>)</control> <block pos:start="113:30" pos:end="133:13">{<block_content pos:start="115:17" pos:end="131:36">

                <decl_stmt pos:start="115:17" pos:end="115:31"><decl pos:start="115:17" pos:end="115:30"><type pos:start="115:17" pos:end="115:27"><name pos:start="115:17" pos:end="115:25">AVIStream</name> <modifier pos:start="115:27" pos:end="115:27">*</modifier></type><name pos:start="115:28" pos:end="115:30">ast</name></decl>;</decl_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:41"><expr pos:start="117:17" pos:end="117:40"><name pos:start="117:17" pos:end="117:18">st</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <call pos:start="117:22" pos:end="117:40"><name pos:start="117:22" pos:end="117:34">av_new_stream</name><argument_list pos:start="117:35" pos:end="117:40">(<argument pos:start="117:36" pos:end="117:36"><expr pos:start="117:36" pos:end="117:36"><name pos:start="117:36" pos:end="117:36">s</name></expr></argument>, <argument pos:start="117:39" pos:end="117:39"><expr pos:start="117:39" pos:end="117:39"><name pos:start="117:39" pos:end="117:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="121:30"><if pos:start="119:17" pos:end="121:30">if <condition pos:start="119:20" pos:end="119:24">(<expr pos:start="119:21" pos:end="119:23"><operator pos:start="119:21" pos:end="119:21">!</operator><name pos:start="119:22" pos:end="119:23">st</name></expr>)</condition><block type="pseudo" pos:start="121:21" pos:end="121:30"><block_content pos:start="121:21" pos:end="121:30">

                    <goto pos:start="121:21" pos:end="121:30">goto <name pos:start="121:26" pos:end="121:29">fail</name>;</goto></block_content></block></if></if_stmt>



                <expr_stmt pos:start="125:17" pos:end="125:52"><expr pos:start="125:17" pos:end="125:51"><name pos:start="125:17" pos:end="125:19">ast</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <call pos:start="125:23" pos:end="125:51"><name pos:start="125:23" pos:end="125:32">av_mallocz</name><argument_list pos:start="125:33" pos:end="125:51">(<argument pos:start="125:34" pos:end="125:50"><expr pos:start="125:34" pos:end="125:50"><sizeof pos:start="125:34" pos:end="125:50">sizeof<argument_list pos:start="125:40" pos:end="125:50">(<argument pos:start="125:41" pos:end="125:49"><expr pos:start="125:41" pos:end="125:49"><name pos:start="125:41" pos:end="125:49">AVIStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="127:17" pos:end="129:30"><if pos:start="127:17" pos:end="129:30">if <condition pos:start="127:20" pos:end="127:25">(<expr pos:start="127:21" pos:end="127:24"><operator pos:start="127:21" pos:end="127:21">!</operator><name pos:start="127:22" pos:end="127:24">ast</name></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:30"><block_content pos:start="129:21" pos:end="129:30">

                    <goto pos:start="129:21" pos:end="129:30">goto <name pos:start="129:26" pos:end="129:29">fail</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:36"><expr pos:start="131:17" pos:end="131:35"><name pos:start="131:17" pos:end="131:29"><name pos:start="131:17" pos:end="131:18">st</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:29">priv_data</name></name> <operator pos:start="131:31" pos:end="131:31">=</operator> <name pos:start="131:33" pos:end="131:35">ast</name></expr>;</expr_stmt>

	    </block_content>}</block></for>

            <expr_stmt pos:start="135:13" pos:end="135:40"><expr pos:start="135:13" pos:end="135:39"><call pos:start="135:13" pos:end="135:39"><name pos:start="135:13" pos:end="135:21">url_fskip</name><argument_list pos:start="135:22" pos:end="135:39">(<argument pos:start="135:23" pos:end="135:24"><expr pos:start="135:23" pos:end="135:24"><name pos:start="135:23" pos:end="135:24">pb</name></expr></argument>, <argument pos:start="135:27" pos:end="135:38"><expr pos:start="135:27" pos:end="135:38"><name pos:start="135:27" pos:end="135:30">size</name> <operator pos:start="135:32" pos:end="135:32">-</operator> <literal type="number" pos:start="135:34" pos:end="135:34">7</literal> <operator pos:start="135:36" pos:end="135:36">*</operator> <literal type="number" pos:start="135:38" pos:end="135:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <case pos:start="139:9" pos:end="139:39">case <expr pos:start="139:14" pos:end="139:38"><call pos:start="139:14" pos:end="139:38"><name pos:start="139:14" pos:end="139:18">MKTAG</name><argument_list pos:start="139:19" pos:end="139:38">(<argument pos:start="139:20" pos:end="139:22"><expr pos:start="139:20" pos:end="139:22"><literal type="char" pos:start="139:20" pos:end="139:22">'s'</literal></expr></argument>, <argument pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><literal type="char" pos:start="139:25" pos:end="139:27">'t'</literal></expr></argument>, <argument pos:start="139:30" pos:end="139:32"><expr pos:start="139:30" pos:end="139:32"><literal type="char" pos:start="139:30" pos:end="139:32">'r'</literal></expr></argument>, <argument pos:start="139:35" pos:end="139:37"><expr pos:start="139:35" pos:end="139:37"><literal type="char" pos:start="139:35" pos:end="139:37">'h'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <comment type="block" pos:start="141:13" pos:end="141:31">/* stream header */</comment>

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:24">stream_index</name><operator pos:start="143:25" pos:end="143:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:32"><expr pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:16">tag1</name> <operator pos:start="145:18" pos:end="145:18">=</operator> <call pos:start="145:20" pos:end="145:31"><name pos:start="145:20" pos:end="145:27">get_le32</name><argument_list pos:start="145:28" pos:end="145:31">(<argument pos:start="145:29" pos:end="145:30"><expr pos:start="145:29" pos:end="145:30"><name pos:start="145:29" pos:end="145:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="150:0"><expr pos:start="147:13" pos:end="147:34"><name pos:start="147:13" pos:end="147:19">handler</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <call pos:start="147:23" pos:end="147:34"><name pos:start="147:23" pos:end="147:30">get_le32</name><argument_list pos:start="147:31" pos:end="147:34">(<argument pos:start="147:32" pos:end="147:33"><expr pos:start="147:32" pos:end="147:33"><name pos:start="147:32" pos:end="147:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="147:37" pos:end="147:51">/* codec tag */</comment>

<cpp:ifdef pos:start="149:1" pos:end="149:12">#<cpp:directive pos:start="149:2" pos:end="149:6">ifdef</cpp:directive> <name pos:start="149:8" pos:end="149:12">DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="151:9" pos:end="154:0"><expr pos:start="151:9" pos:end="151:35"><call pos:start="151:9" pos:end="151:35"><name pos:start="151:9" pos:end="151:17">print_tag</name><argument_list pos:start="151:18" pos:end="151:35">(<argument pos:start="151:19" pos:end="151:24"><expr pos:start="151:19" pos:end="151:24"><literal type="string" pos:start="151:19" pos:end="151:24">"strh"</literal></expr></argument>, <argument pos:start="151:27" pos:end="151:30"><expr pos:start="151:27" pos:end="151:30"><name pos:start="151:27" pos:end="151:30">tag1</name></expr></argument>, <argument pos:start="151:33" pos:end="151:34"><expr pos:start="151:33" pos:end="151:34"><operator pos:start="151:33" pos:end="151:33">-</operator><literal type="number" pos:start="151:34" pos:end="151:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

            <switch pos:start="155:13" pos:end="391:13">switch<condition pos:start="155:19" pos:end="155:24">(<expr pos:start="155:20" pos:end="155:23"><name pos:start="155:20" pos:end="155:23">tag1</name></expr>)</condition> <block pos:start="155:26" pos:end="391:13">{<block_content pos:start="157:13" pos:end="389:26">

            <case pos:start="157:13" pos:end="157:43">case <expr pos:start="157:18" pos:end="157:42"><call pos:start="157:18" pos:end="157:42"><name pos:start="157:18" pos:end="157:22">MKTAG</name><argument_list pos:start="157:23" pos:end="157:42">(<argument pos:start="157:24" pos:end="157:26"><expr pos:start="157:24" pos:end="157:26"><literal type="char" pos:start="157:24" pos:end="157:26">'i'</literal></expr></argument>, <argument pos:start="157:29" pos:end="157:31"><expr pos:start="157:29" pos:end="157:31"><literal type="char" pos:start="157:29" pos:end="157:31">'a'</literal></expr></argument>, <argument pos:start="157:34" pos:end="157:36"><expr pos:start="157:34" pos:end="157:36"><literal type="char" pos:start="157:34" pos:end="157:36">'v'</literal></expr></argument>, <argument pos:start="157:39" pos:end="157:41"><expr pos:start="157:39" pos:end="157:41"><literal type="char" pos:start="157:39" pos:end="157:41">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

	    <case pos:start="159:13" pos:end="159:43">case <expr pos:start="159:18" pos:end="159:42"><call pos:start="159:18" pos:end="159:42"><name pos:start="159:18" pos:end="159:22">MKTAG</name><argument_list pos:start="159:23" pos:end="159:42">(<argument pos:start="159:24" pos:end="159:26"><expr pos:start="159:24" pos:end="159:26"><literal type="char" pos:start="159:24" pos:end="159:26">'i'</literal></expr></argument>, <argument pos:start="159:29" pos:end="159:31"><expr pos:start="159:29" pos:end="159:31"><literal type="char" pos:start="159:29" pos:end="159:31">'v'</literal></expr></argument>, <argument pos:start="159:34" pos:end="159:36"><expr pos:start="159:34" pos:end="159:36"><literal type="char" pos:start="159:34" pos:end="159:36">'a'</literal></expr></argument>, <argument pos:start="159:39" pos:end="159:41"><expr pos:start="159:39" pos:end="159:41"><literal type="char" pos:start="159:39" pos:end="159:41">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <comment type="block" pos:start="161:17" pos:end="167:19">/* 

	         * After some consideration -- I don't think we 

	         * have to support anything but DV in a type1 AVIs.

	         */</comment>

	        <if_stmt pos:start="169:17" pos:end="171:30"><if pos:start="169:17" pos:end="171:30">if <condition pos:start="169:20" pos:end="169:39">(<expr pos:start="169:21" pos:end="169:38"><name pos:start="169:21" pos:end="169:33"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:33">nb_streams</name></name> <operator pos:start="169:35" pos:end="169:36">!=</operator> <literal type="number" pos:start="169:38" pos:end="169:38">1</literal></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:30"><block_content pos:start="171:21" pos:end="171:30">

		    <goto pos:start="171:21" pos:end="171:30">goto <name pos:start="171:26" pos:end="171:29">fail</name>;</goto></block_content></block></if></if_stmt>

	        

		<if_stmt pos:start="175:17" pos:end="181:29"><if pos:start="175:17" pos:end="181:29">if <condition pos:start="175:20" pos:end="179:57">(<expr pos:start="175:21" pos:end="179:56"><name pos:start="175:21" pos:end="175:27">handler</name> <operator pos:start="175:29" pos:end="175:30">!=</operator> <call pos:start="175:32" pos:end="175:56"><name pos:start="175:32" pos:end="175:36">MKTAG</name><argument_list pos:start="175:37" pos:end="175:56">(<argument pos:start="175:38" pos:end="175:40"><expr pos:start="175:38" pos:end="175:40"><literal type="char" pos:start="175:38" pos:end="175:40">'d'</literal></expr></argument>, <argument pos:start="175:43" pos:end="175:45"><expr pos:start="175:43" pos:end="175:45"><literal type="char" pos:start="175:43" pos:end="175:45">'v'</literal></expr></argument>, <argument pos:start="175:48" pos:end="175:50"><expr pos:start="175:48" pos:end="175:50"><literal type="char" pos:start="175:48" pos:end="175:50">'s'</literal></expr></argument>, <argument pos:start="175:53" pos:end="175:55"><expr pos:start="175:53" pos:end="175:55"><literal type="char" pos:start="175:53" pos:end="175:55">'d'</literal></expr></argument>)</argument_list></call> <operator pos:start="175:58" pos:end="175:59">&amp;&amp;</operator>

	            <name pos:start="177:21" pos:end="177:27">handler</name> <operator pos:start="177:29" pos:end="177:30">!=</operator> <call pos:start="177:32" pos:end="177:56"><name pos:start="177:32" pos:end="177:36">MKTAG</name><argument_list pos:start="177:37" pos:end="177:56">(<argument pos:start="177:38" pos:end="177:40"><expr pos:start="177:38" pos:end="177:40"><literal type="char" pos:start="177:38" pos:end="177:40">'d'</literal></expr></argument>, <argument pos:start="177:43" pos:end="177:45"><expr pos:start="177:43" pos:end="177:45"><literal type="char" pos:start="177:43" pos:end="177:45">'v'</literal></expr></argument>, <argument pos:start="177:48" pos:end="177:50"><expr pos:start="177:48" pos:end="177:50"><literal type="char" pos:start="177:48" pos:end="177:50">'h'</literal></expr></argument>, <argument pos:start="177:53" pos:end="177:55"><expr pos:start="177:53" pos:end="177:55"><literal type="char" pos:start="177:53" pos:end="177:55">'d'</literal></expr></argument>)</argument_list></call> <operator pos:start="177:58" pos:end="177:59">&amp;&amp;</operator>

		    <name pos:start="179:21" pos:end="179:27">handler</name> <operator pos:start="179:29" pos:end="179:30">!=</operator> <call pos:start="179:32" pos:end="179:56"><name pos:start="179:32" pos:end="179:36">MKTAG</name><argument_list pos:start="179:37" pos:end="179:56">(<argument pos:start="179:38" pos:end="179:40"><expr pos:start="179:38" pos:end="179:40"><literal type="char" pos:start="179:38" pos:end="179:40">'d'</literal></expr></argument>, <argument pos:start="179:43" pos:end="179:45"><expr pos:start="179:43" pos:end="179:45"><literal type="char" pos:start="179:43" pos:end="179:45">'v'</literal></expr></argument>, <argument pos:start="179:48" pos:end="179:50"><expr pos:start="179:48" pos:end="179:50"><literal type="char" pos:start="179:48" pos:end="179:50">'s'</literal></expr></argument>, <argument pos:start="179:53" pos:end="179:55"><expr pos:start="179:53" pos:end="179:55"><literal type="char" pos:start="179:53" pos:end="179:55">'l'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="181:20" pos:end="181:29"><block_content pos:start="181:20" pos:end="181:29">

	           <goto pos:start="181:20" pos:end="181:29">goto <name pos:start="181:25" pos:end="181:28">fail</name>;</goto></block_content></block></if></if_stmt>

                

		<expr_stmt pos:start="185:17" pos:end="185:47"><expr pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:19">ast</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:35"><name pos:start="185:23" pos:end="185:23">s</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:32">streams</name><index pos:start="185:33" pos:end="185:35">[<expr pos:start="185:34" pos:end="185:34"><literal type="number" pos:start="185:34" pos:end="185:34">0</literal></expr>]</index></name><operator pos:start="185:36" pos:end="185:37">-&gt;</operator><name pos:start="185:38" pos:end="185:46">priv_data</name></expr>;</expr_stmt>

		<expr_stmt pos:start="187:17" pos:end="187:58"><expr pos:start="187:17" pos:end="187:57"><call pos:start="187:17" pos:end="187:57"><name pos:start="187:17" pos:end="187:24">av_freep</name><argument_list pos:start="187:25" pos:end="187:57">(<argument pos:start="187:26" pos:end="187:56"><expr pos:start="187:26" pos:end="187:56"><operator pos:start="187:26" pos:end="187:26">&amp;</operator><name pos:start="187:27" pos:end="187:39"><name pos:start="187:27" pos:end="187:27">s</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:36">streams</name><index pos:start="187:37" pos:end="187:39">[<expr pos:start="187:38" pos:end="187:38"><literal type="number" pos:start="187:38" pos:end="187:38">0</literal></expr>]</index></name><operator pos:start="187:40" pos:end="187:41">-&gt;</operator><name pos:start="187:42" pos:end="187:56"><name pos:start="187:42" pos:end="187:46">codec</name><operator pos:start="187:47" pos:end="187:47">.</operator><name pos:start="187:48" pos:end="187:56">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="189:17" pos:end="189:41"><expr pos:start="189:17" pos:end="189:40"><call pos:start="189:17" pos:end="189:40"><name pos:start="189:17" pos:end="189:24">av_freep</name><argument_list pos:start="189:25" pos:end="189:40">(<argument pos:start="189:26" pos:end="189:39"><expr pos:start="189:26" pos:end="189:39"><operator pos:start="189:26" pos:end="189:26">&amp;</operator><name pos:start="189:27" pos:end="189:39"><name pos:start="189:27" pos:end="189:27">s</name><operator pos:start="189:28" pos:end="189:29">-&gt;</operator><name pos:start="189:30" pos:end="189:36">streams</name><index pos:start="189:37" pos:end="189:39">[<expr pos:start="189:38" pos:end="189:38"><literal type="number" pos:start="189:38" pos:end="189:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="191:17" pos:end="191:34"><expr pos:start="191:17" pos:end="191:33"><name pos:start="191:17" pos:end="191:29"><name pos:start="191:17" pos:end="191:17">s</name><operator pos:start="191:18" pos:end="191:19">-&gt;</operator><name pos:start="191:20" pos:end="191:29">nb_streams</name></name> <operator pos:start="191:31" pos:end="191:31">=</operator> <literal type="number" pos:start="191:33" pos:end="191:33">0</literal></expr>;</expr_stmt>

	        <expr_stmt pos:start="193:17" pos:end="193:49"><expr pos:start="193:17" pos:end="193:48"><name pos:start="193:17" pos:end="193:29"><name pos:start="193:17" pos:end="193:19">avi</name><operator pos:start="193:20" pos:end="193:21">-&gt;</operator><name pos:start="193:22" pos:end="193:29">dv_demux</name></name> <operator pos:start="193:31" pos:end="193:31">=</operator> <call pos:start="193:33" pos:end="193:48"><name pos:start="193:33" pos:end="193:45">dv_init_demux</name><argument_list pos:start="193:46" pos:end="193:48">(<argument pos:start="193:47" pos:end="193:47"><expr pos:start="193:47" pos:end="193:47"><name pos:start="193:47" pos:end="193:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="195:17" pos:end="197:30"><if pos:start="195:17" pos:end="197:30">if <condition pos:start="195:20" pos:end="195:35">(<expr pos:start="195:21" pos:end="195:34"><operator pos:start="195:21" pos:end="195:21">!</operator><name pos:start="195:22" pos:end="195:34"><name pos:start="195:22" pos:end="195:24">avi</name><operator pos:start="195:25" pos:end="195:26">-&gt;</operator><name pos:start="195:27" pos:end="195:34">dv_demux</name></name></expr>)</condition><block type="pseudo" pos:start="197:21" pos:end="197:30"><block_content pos:start="197:21" pos:end="197:30">

		    <goto pos:start="197:21" pos:end="197:30">goto <name pos:start="197:26" pos:end="197:29">fail</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="199:17" pos:end="199:47"><expr pos:start="199:17" pos:end="199:46"><name pos:start="199:17" pos:end="199:29"><name pos:start="199:17" pos:end="199:17">s</name><operator pos:start="199:18" pos:end="199:19">-&gt;</operator><name pos:start="199:20" pos:end="199:26">streams</name><index pos:start="199:27" pos:end="199:29">[<expr pos:start="199:28" pos:end="199:28"><literal type="number" pos:start="199:28" pos:end="199:28">0</literal></expr>]</index></name><operator pos:start="199:30" pos:end="199:31">-&gt;</operator><name pos:start="199:32" pos:end="199:40">priv_data</name> <operator pos:start="199:42" pos:end="199:42">=</operator> <name pos:start="199:44" pos:end="199:46">ast</name></expr>;</expr_stmt>

		<expr_stmt pos:start="201:17" pos:end="201:37"><expr pos:start="201:17" pos:end="201:36"><call pos:start="201:17" pos:end="201:36"><name pos:start="201:17" pos:end="201:25">url_fskip</name><argument_list pos:start="201:26" pos:end="201:36">(<argument pos:start="201:27" pos:end="201:28"><expr pos:start="201:27" pos:end="201:28"><name pos:start="201:27" pos:end="201:28">pb</name></expr></argument>, <argument pos:start="201:31" pos:end="201:35"><expr pos:start="201:31" pos:end="201:35"><literal type="number" pos:start="201:31" pos:end="201:31">3</literal> <operator pos:start="201:33" pos:end="201:33">*</operator> <literal type="number" pos:start="201:35" pos:end="201:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="203:17" pos:end="203:42"><expr pos:start="203:17" pos:end="203:41"><name pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:19">ast</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:26">scale</name></name> <operator pos:start="203:28" pos:end="203:28">=</operator> <call pos:start="203:30" pos:end="203:41"><name pos:start="203:30" pos:end="203:37">get_le32</name><argument_list pos:start="203:38" pos:end="203:41">(<argument pos:start="203:39" pos:end="203:40"><expr pos:start="203:39" pos:end="203:40"><name pos:start="203:39" pos:end="203:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="205:17" pos:end="205:41"><expr pos:start="205:17" pos:end="205:40"><name pos:start="205:17" pos:end="205:25"><name pos:start="205:17" pos:end="205:19">ast</name><operator pos:start="205:20" pos:end="205:21">-&gt;</operator><name pos:start="205:22" pos:end="205:25">rate</name></name> <operator pos:start="205:27" pos:end="205:27">=</operator> <call pos:start="205:29" pos:end="205:40"><name pos:start="205:29" pos:end="205:36">get_le32</name><argument_list pos:start="205:37" pos:end="205:40">(<argument pos:start="205:38" pos:end="205:39"><expr pos:start="205:38" pos:end="205:39"><name pos:start="205:38" pos:end="205:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <expr_stmt pos:start="207:17" pos:end="207:49"><expr pos:start="207:17" pos:end="207:48"><name pos:start="207:17" pos:end="207:28">stream_index</name> <operator pos:start="207:30" pos:end="207:30">=</operator> <name pos:start="207:32" pos:end="207:44"><name pos:start="207:32" pos:end="207:32">s</name><operator pos:start="207:33" pos:end="207:34">-&gt;</operator><name pos:start="207:35" pos:end="207:44">nb_streams</name></name> <operator pos:start="207:46" pos:end="207:46">-</operator> <literal type="number" pos:start="207:48" pos:end="207:48">1</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="209:17" pos:end="209:42"><expr pos:start="209:17" pos:end="209:41"><call pos:start="209:17" pos:end="209:41"><name pos:start="209:17" pos:end="209:25">url_fskip</name><argument_list pos:start="209:26" pos:end="209:41">(<argument pos:start="209:27" pos:end="209:28"><expr pos:start="209:27" pos:end="209:28"><name pos:start="209:27" pos:end="209:28">pb</name></expr></argument>, <argument pos:start="209:31" pos:end="209:40"><expr pos:start="209:31" pos:end="209:40"><name pos:start="209:31" pos:end="209:34">size</name> <operator pos:start="209:36" pos:end="209:36">-</operator> <literal type="number" pos:start="209:38" pos:end="209:38">7</literal><operator pos:start="209:39" pos:end="209:39">*</operator><literal type="number" pos:start="209:40" pos:end="209:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<break pos:start="211:17" pos:end="211:22">break;</break>

	    <case pos:start="213:13" pos:end="213:43">case <expr pos:start="213:18" pos:end="213:42"><call pos:start="213:18" pos:end="213:42"><name pos:start="213:18" pos:end="213:22">MKTAG</name><argument_list pos:start="213:23" pos:end="213:42">(<argument pos:start="213:24" pos:end="213:26"><expr pos:start="213:24" pos:end="213:26"><literal type="char" pos:start="213:24" pos:end="213:26">'v'</literal></expr></argument>, <argument pos:start="213:29" pos:end="213:31"><expr pos:start="213:29" pos:end="213:31"><literal type="char" pos:start="213:29" pos:end="213:31">'i'</literal></expr></argument>, <argument pos:start="213:34" pos:end="213:36"><expr pos:start="213:34" pos:end="213:36"><literal type="char" pos:start="213:34" pos:end="213:36">'d'</literal></expr></argument>, <argument pos:start="213:39" pos:end="213:41"><expr pos:start="213:39" pos:end="213:41"><literal type="char" pos:start="213:39" pos:end="213:41">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <expr_stmt pos:start="215:17" pos:end="215:46"><expr pos:start="215:17" pos:end="215:45"><name pos:start="215:17" pos:end="215:26">codec_type</name> <operator pos:start="215:28" pos:end="215:28">=</operator> <name pos:start="215:30" pos:end="215:45">CODEC_TYPE_VIDEO</name></expr>;</expr_stmt>



                <if_stmt pos:start="219:17" pos:end="225:17"><if pos:start="219:17" pos:end="225:17">if <condition pos:start="219:20" pos:end="219:50">(<expr pos:start="219:21" pos:end="219:49"><name pos:start="219:21" pos:end="219:32">stream_index</name> <operator pos:start="219:34" pos:end="219:35">&gt;=</operator> <name pos:start="219:37" pos:end="219:49"><name pos:start="219:37" pos:end="219:37">s</name><operator pos:start="219:38" pos:end="219:39">-&gt;</operator><name pos:start="219:40" pos:end="219:49">nb_streams</name></name></expr>)</condition> <block pos:start="219:52" pos:end="225:17">{<block_content pos:start="221:21" pos:end="223:26">

                    <expr_stmt pos:start="221:21" pos:end="221:44"><expr pos:start="221:21" pos:end="221:43"><call pos:start="221:21" pos:end="221:43"><name pos:start="221:21" pos:end="221:29">url_fskip</name><argument_list pos:start="221:30" pos:end="221:43">(<argument pos:start="221:31" pos:end="221:32"><expr pos:start="221:31" pos:end="221:32"><name pos:start="221:31" pos:end="221:32">pb</name></expr></argument>, <argument pos:start="221:35" pos:end="221:42"><expr pos:start="221:35" pos:end="221:42"><name pos:start="221:35" pos:end="221:38">size</name> <operator pos:start="221:40" pos:end="221:40">-</operator> <literal type="number" pos:start="221:42" pos:end="221:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="223:21" pos:end="223:26">break;</break>

                </block_content>}</block></if></if_stmt> 



                <expr_stmt pos:start="229:17" pos:end="229:46"><expr pos:start="229:17" pos:end="229:45"><name pos:start="229:17" pos:end="229:18">st</name> <operator pos:start="229:20" pos:end="229:20">=</operator> <name pos:start="229:22" pos:end="229:45"><name pos:start="229:22" pos:end="229:22">s</name><operator pos:start="229:23" pos:end="229:24">-&gt;</operator><name pos:start="229:25" pos:end="229:31">streams</name><index pos:start="229:32" pos:end="229:45">[<expr pos:start="229:33" pos:end="229:44"><name pos:start="229:33" pos:end="229:44">stream_index</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:36"><expr pos:start="231:17" pos:end="231:35"><name pos:start="231:17" pos:end="231:19">ast</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <name pos:start="231:23" pos:end="231:35"><name pos:start="231:23" pos:end="231:24">st</name><operator pos:start="231:25" pos:end="231:26">-&gt;</operator><name pos:start="231:27" pos:end="231:35">priv_data</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:52"><expr pos:start="233:17" pos:end="233:51"><name pos:start="233:17" pos:end="233:42"><name pos:start="233:17" pos:end="233:18">st</name><operator pos:start="233:19" pos:end="233:20">-&gt;</operator><name pos:start="233:21" pos:end="233:25">codec</name><operator pos:start="233:26" pos:end="233:26">.</operator><name pos:start="233:27" pos:end="233:42">stream_codec_tag</name></name><operator pos:start="233:43" pos:end="233:43">=</operator> <name pos:start="233:45" pos:end="233:51">handler</name></expr>;</expr_stmt>

                

                <expr_stmt pos:start="237:17" pos:end="237:29"><expr pos:start="237:17" pos:end="237:28"><call pos:start="237:17" pos:end="237:28"><name pos:start="237:17" pos:end="237:24">get_le32</name><argument_list pos:start="237:25" pos:end="237:28">(<argument pos:start="237:26" pos:end="237:27"><expr pos:start="237:26" pos:end="237:27"><name pos:start="237:26" pos:end="237:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="237:31" pos:end="237:41">/* flags */</comment>

                <expr_stmt pos:start="239:17" pos:end="239:29"><expr pos:start="239:17" pos:end="239:28"><call pos:start="239:17" pos:end="239:28"><name pos:start="239:17" pos:end="239:24">get_le16</name><argument_list pos:start="239:25" pos:end="239:28">(<argument pos:start="239:26" pos:end="239:27"><expr pos:start="239:26" pos:end="239:27"><name pos:start="239:26" pos:end="239:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="239:31" pos:end="239:44">/* priority */</comment>

                <expr_stmt pos:start="241:17" pos:end="241:29"><expr pos:start="241:17" pos:end="241:28"><call pos:start="241:17" pos:end="241:28"><name pos:start="241:17" pos:end="241:24">get_le16</name><argument_list pos:start="241:25" pos:end="241:28">(<argument pos:start="241:26" pos:end="241:27"><expr pos:start="241:26" pos:end="241:27"><name pos:start="241:26" pos:end="241:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="241:31" pos:end="241:44">/* language */</comment>

                <expr_stmt pos:start="243:17" pos:end="243:29"><expr pos:start="243:17" pos:end="243:28"><call pos:start="243:17" pos:end="243:28"><name pos:start="243:17" pos:end="243:24">get_le32</name><argument_list pos:start="243:25" pos:end="243:28">(<argument pos:start="243:26" pos:end="243:27"><expr pos:start="243:26" pos:end="243:27"><name pos:start="243:26" pos:end="243:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="243:31" pos:end="243:56">/* XXX: initial frame ? */</comment>

                <expr_stmt pos:start="245:17" pos:end="245:37"><expr pos:start="245:17" pos:end="245:36"><name pos:start="245:17" pos:end="245:21">scale</name> <operator pos:start="245:23" pos:end="245:23">=</operator> <call pos:start="245:25" pos:end="245:36"><name pos:start="245:25" pos:end="245:32">get_le32</name><argument_list pos:start="245:33" pos:end="245:36">(<argument pos:start="245:34" pos:end="245:35"><expr pos:start="245:34" pos:end="245:35"><name pos:start="245:34" pos:end="245:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="245:39" pos:end="245:49">/* scale */</comment>

                <expr_stmt pos:start="247:17" pos:end="247:36"><expr pos:start="247:17" pos:end="247:35"><name pos:start="247:17" pos:end="247:20">rate</name> <operator pos:start="247:22" pos:end="247:22">=</operator> <call pos:start="247:24" pos:end="247:35"><name pos:start="247:24" pos:end="247:31">get_le32</name><argument_list pos:start="247:32" pos:end="247:35">(<argument pos:start="247:33" pos:end="247:34"><expr pos:start="247:33" pos:end="247:34"><name pos:start="247:33" pos:end="247:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="247:38" pos:end="247:47">/* rate */</comment>



                <if_stmt pos:start="251:17" pos:end="265:17"><if pos:start="251:17" pos:end="253:17">if<condition pos:start="251:19" pos:end="251:33">(<expr pos:start="251:20" pos:end="251:32"><name pos:start="251:20" pos:end="251:24">scale</name> <operator pos:start="251:26" pos:end="251:27">&amp;&amp;</operator> <name pos:start="251:29" pos:end="251:32">rate</name></expr>)</condition><block pos:start="251:34" pos:end="253:17">{<block_content>

                </block_content>}</block></if><if type="elseif" pos:start="253:18" pos:end="259:17">else if<condition pos:start="253:25" pos:end="253:38">(<expr pos:start="253:26" pos:end="253:37"><name pos:start="253:26" pos:end="253:37">frame_period</name></expr>)</condition><block pos:start="253:39" pos:end="259:17">{<block_content pos:start="255:21" pos:end="257:41">

                    <expr_stmt pos:start="255:21" pos:end="255:35"><expr pos:start="255:21" pos:end="255:34"><name pos:start="255:21" pos:end="255:24">rate</name> <operator pos:start="255:26" pos:end="255:26">=</operator> <literal type="number" pos:start="255:28" pos:end="255:34">1000000</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="257:21" pos:end="257:41"><expr pos:start="257:21" pos:end="257:40"><name pos:start="257:21" pos:end="257:25">scale</name> <operator pos:start="257:27" pos:end="257:27">=</operator> <name pos:start="257:29" pos:end="257:40">frame_period</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="259:18" pos:end="265:17">else<block pos:start="259:22" pos:end="265:17">{<block_content pos:start="261:21" pos:end="263:30">

                    <expr_stmt pos:start="261:21" pos:end="261:30"><expr pos:start="261:21" pos:end="261:29"><name pos:start="261:21" pos:end="261:24">rate</name> <operator pos:start="261:26" pos:end="261:26">=</operator> <literal type="number" pos:start="261:28" pos:end="261:29">25</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="263:21" pos:end="263:30"><expr pos:start="263:21" pos:end="263:29"><name pos:start="263:21" pos:end="263:25">scale</name> <operator pos:start="263:27" pos:end="263:27">=</operator> <literal type="number" pos:start="263:29" pos:end="263:29">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:33"><expr pos:start="267:17" pos:end="267:32"><name pos:start="267:17" pos:end="267:25"><name pos:start="267:17" pos:end="267:19">ast</name><operator pos:start="267:20" pos:end="267:21">-&gt;</operator><name pos:start="267:22" pos:end="267:25">rate</name></name> <operator pos:start="267:27" pos:end="267:27">=</operator> <name pos:start="267:29" pos:end="267:32">rate</name></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:35"><expr pos:start="269:17" pos:end="269:34"><name pos:start="269:17" pos:end="269:26"><name pos:start="269:17" pos:end="269:19">ast</name><operator pos:start="269:20" pos:end="269:21">-&gt;</operator><name pos:start="269:22" pos:end="269:26">scale</name></name> <operator pos:start="269:28" pos:end="269:28">=</operator> <name pos:start="269:30" pos:end="269:34">scale</name></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:53"><expr pos:start="271:17" pos:end="271:52"><call pos:start="271:17" pos:end="271:52"><name pos:start="271:17" pos:end="271:31">av_set_pts_info</name><argument_list pos:start="271:32" pos:end="271:52">(<argument pos:start="271:33" pos:end="271:34"><expr pos:start="271:33" pos:end="271:34"><name pos:start="271:33" pos:end="271:34">st</name></expr></argument>, <argument pos:start="271:37" pos:end="271:38"><expr pos:start="271:37" pos:end="271:38"><literal type="number" pos:start="271:37" pos:end="271:38">64</literal></expr></argument>, <argument pos:start="271:41" pos:end="271:45"><expr pos:start="271:41" pos:end="271:45"><name pos:start="271:41" pos:end="271:45">scale</name></expr></argument>, <argument pos:start="271:48" pos:end="271:51"><expr pos:start="271:48" pos:end="271:51"><name pos:start="271:48" pos:end="271:51">rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:44"><expr pos:start="273:17" pos:end="273:43"><name pos:start="273:17" pos:end="273:36"><name pos:start="273:17" pos:end="273:18">st</name><operator pos:start="273:19" pos:end="273:20">-&gt;</operator><name pos:start="273:21" pos:end="273:25">codec</name><operator pos:start="273:26" pos:end="273:26">.</operator><name pos:start="273:27" pos:end="273:36">frame_rate</name></name> <operator pos:start="273:38" pos:end="273:38">=</operator> <name pos:start="273:40" pos:end="273:43">rate</name></expr>;</expr_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:50"><expr pos:start="275:17" pos:end="275:49"><name pos:start="275:17" pos:end="275:41"><name pos:start="275:17" pos:end="275:18">st</name><operator pos:start="275:19" pos:end="275:20">-&gt;</operator><name pos:start="275:21" pos:end="275:25">codec</name><operator pos:start="275:26" pos:end="275:26">.</operator><name pos:start="275:27" pos:end="275:41">frame_rate_base</name></name> <operator pos:start="275:43" pos:end="275:43">=</operator> <name pos:start="275:45" pos:end="275:49">scale</name></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:29"><expr pos:start="277:17" pos:end="277:28"><call pos:start="277:17" pos:end="277:28"><name pos:start="277:17" pos:end="277:24">get_le32</name><argument_list pos:start="277:25" pos:end="277:28">(<argument pos:start="277:26" pos:end="277:27"><expr pos:start="277:26" pos:end="277:27"><name pos:start="277:26" pos:end="277:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="277:31" pos:end="277:41">/* start */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:41"><expr pos:start="279:17" pos:end="279:40"><name pos:start="279:17" pos:end="279:25">nb_frames</name> <operator pos:start="279:27" pos:end="279:27">=</operator> <call pos:start="279:29" pos:end="279:40"><name pos:start="279:29" pos:end="279:36">get_le32</name><argument_list pos:start="279:37" pos:end="279:40">(<argument pos:start="279:38" pos:end="279:39"><expr pos:start="279:38" pos:end="279:39"><name pos:start="279:38" pos:end="279:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:35"><expr pos:start="281:17" pos:end="281:34"><name pos:start="281:17" pos:end="281:30"><name pos:start="281:17" pos:end="281:18">st</name><operator pos:start="281:19" pos:end="281:20">-&gt;</operator><name pos:start="281:21" pos:end="281:30">start_time</name></name> <operator pos:start="281:32" pos:end="281:32">=</operator> <literal type="number" pos:start="281:34" pos:end="281:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="283:17" pos:end="287:42"><expr pos:start="283:17" pos:end="287:41"><name pos:start="283:17" pos:end="283:28"><name pos:start="283:17" pos:end="283:18">st</name><operator pos:start="283:19" pos:end="283:20">-&gt;</operator><name pos:start="283:21" pos:end="283:28">duration</name></name> <operator pos:start="283:30" pos:end="283:30">=</operator> <call pos:start="283:32" pos:end="287:41"><name pos:start="283:32" pos:end="283:41">av_rescale</name><argument_list pos:start="283:42" pos:end="287:41">(<argument pos:start="283:43" pos:end="283:51"><expr pos:start="283:43" pos:end="283:51"><name pos:start="283:43" pos:end="283:51">nb_frames</name></expr></argument>,

                    <argument pos:start="285:21" pos:end="285:60"><expr pos:start="285:21" pos:end="285:60"><name pos:start="285:21" pos:end="285:45"><name pos:start="285:21" pos:end="285:22">st</name><operator pos:start="285:23" pos:end="285:24">-&gt;</operator><name pos:start="285:25" pos:end="285:29">codec</name><operator pos:start="285:30" pos:end="285:30">.</operator><name pos:start="285:31" pos:end="285:45">frame_rate_base</name></name> <operator pos:start="285:47" pos:end="285:47">*</operator> <name pos:start="285:49" pos:end="285:60">AV_TIME_BASE</name></expr></argument>,

                    <argument pos:start="287:21" pos:end="287:40"><expr pos:start="287:21" pos:end="287:40"><name pos:start="287:21" pos:end="287:40"><name pos:start="287:21" pos:end="287:22">st</name><operator pos:start="287:23" pos:end="287:24">-&gt;</operator><name pos:start="287:25" pos:end="287:29">codec</name><operator pos:start="287:30" pos:end="287:30">.</operator><name pos:start="287:31" pos:end="287:40">frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="289:17" pos:end="289:44"><expr pos:start="289:17" pos:end="289:43"><call pos:start="289:17" pos:end="289:43"><name pos:start="289:17" pos:end="289:25">url_fskip</name><argument_list pos:start="289:26" pos:end="289:43">(<argument pos:start="289:27" pos:end="289:28"><expr pos:start="289:27" pos:end="289:28"><name pos:start="289:27" pos:end="289:28">pb</name></expr></argument>, <argument pos:start="289:31" pos:end="289:42"><expr pos:start="289:31" pos:end="289:42"><name pos:start="289:31" pos:end="289:34">size</name> <operator pos:start="289:36" pos:end="289:36">-</operator> <literal type="number" pos:start="289:38" pos:end="289:38">9</literal> <operator pos:start="289:40" pos:end="289:40">*</operator> <literal type="number" pos:start="289:42" pos:end="289:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="291:17" pos:end="291:22">break;</break>

            <case pos:start="293:13" pos:end="293:43">case <expr pos:start="293:18" pos:end="293:42"><call pos:start="293:18" pos:end="293:42"><name pos:start="293:18" pos:end="293:22">MKTAG</name><argument_list pos:start="293:23" pos:end="293:42">(<argument pos:start="293:24" pos:end="293:26"><expr pos:start="293:24" pos:end="293:26"><literal type="char" pos:start="293:24" pos:end="293:26">'a'</literal></expr></argument>, <argument pos:start="293:29" pos:end="293:31"><expr pos:start="293:29" pos:end="293:31"><literal type="char" pos:start="293:29" pos:end="293:31">'u'</literal></expr></argument>, <argument pos:start="293:34" pos:end="293:36"><expr pos:start="293:34" pos:end="293:36"><literal type="char" pos:start="293:34" pos:end="293:36">'d'</literal></expr></argument>, <argument pos:start="293:39" pos:end="293:41"><expr pos:start="293:39" pos:end="293:41"><literal type="char" pos:start="293:39" pos:end="293:41">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <block pos:start="295:17" pos:end="361:17">{<block_content pos:start="297:21" pos:end="359:49">

                    <decl_stmt pos:start="297:21" pos:end="297:40"><decl pos:start="297:21" pos:end="297:39"><type pos:start="297:21" pos:end="297:32"><name pos:start="297:21" pos:end="297:28">unsigned</name> <name pos:start="297:30" pos:end="297:32">int</name></type> <name pos:start="297:34" pos:end="297:39">length</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="301:21" pos:end="301:50"><expr pos:start="301:21" pos:end="301:49"><name pos:start="301:21" pos:end="301:30">codec_type</name> <operator pos:start="301:32" pos:end="301:32">=</operator> <name pos:start="301:34" pos:end="301:49">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>



                    <if_stmt pos:start="305:21" pos:end="311:21"><if pos:start="305:21" pos:end="311:21">if <condition pos:start="305:24" pos:end="305:54">(<expr pos:start="305:25" pos:end="305:53"><name pos:start="305:25" pos:end="305:36">stream_index</name> <operator pos:start="305:38" pos:end="305:39">&gt;=</operator> <name pos:start="305:41" pos:end="305:53"><name pos:start="305:41" pos:end="305:41">s</name><operator pos:start="305:42" pos:end="305:43">-&gt;</operator><name pos:start="305:44" pos:end="305:53">nb_streams</name></name></expr>)</condition> <block pos:start="305:56" pos:end="311:21">{<block_content pos:start="307:25" pos:end="309:30">

                        <expr_stmt pos:start="307:25" pos:end="307:48"><expr pos:start="307:25" pos:end="307:47"><call pos:start="307:25" pos:end="307:47"><name pos:start="307:25" pos:end="307:33">url_fskip</name><argument_list pos:start="307:34" pos:end="307:47">(<argument pos:start="307:35" pos:end="307:36"><expr pos:start="307:35" pos:end="307:36"><name pos:start="307:35" pos:end="307:36">pb</name></expr></argument>, <argument pos:start="307:39" pos:end="307:46"><expr pos:start="307:39" pos:end="307:46"><name pos:start="307:39" pos:end="307:42">size</name> <operator pos:start="307:44" pos:end="307:44">-</operator> <literal type="number" pos:start="307:46" pos:end="307:46">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="309:25" pos:end="309:30">break;</break>

                    </block_content>}</block></if></if_stmt> 

                    <expr_stmt pos:start="313:21" pos:end="313:50"><expr pos:start="313:21" pos:end="313:49"><name pos:start="313:21" pos:end="313:22">st</name> <operator pos:start="313:24" pos:end="313:24">=</operator> <name pos:start="313:26" pos:end="313:49"><name pos:start="313:26" pos:end="313:26">s</name><operator pos:start="313:27" pos:end="313:28">-&gt;</operator><name pos:start="313:29" pos:end="313:35">streams</name><index pos:start="313:36" pos:end="313:49">[<expr pos:start="313:37" pos:end="313:48"><name pos:start="313:37" pos:end="313:48">stream_index</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="315:21" pos:end="315:40"><expr pos:start="315:21" pos:end="315:39"><name pos:start="315:21" pos:end="315:23">ast</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <name pos:start="315:27" pos:end="315:39"><name pos:start="315:27" pos:end="315:28">st</name><operator pos:start="315:29" pos:end="315:30">-&gt;</operator><name pos:start="315:31" pos:end="315:39">priv_data</name></name></expr>;</expr_stmt>

                    

                    <expr_stmt pos:start="319:21" pos:end="319:33"><expr pos:start="319:21" pos:end="319:32"><call pos:start="319:21" pos:end="319:32"><name pos:start="319:21" pos:end="319:28">get_le32</name><argument_list pos:start="319:29" pos:end="319:32">(<argument pos:start="319:30" pos:end="319:31"><expr pos:start="319:30" pos:end="319:31"><name pos:start="319:30" pos:end="319:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="319:35" pos:end="319:45">/* flags */</comment>

                    <expr_stmt pos:start="321:21" pos:end="321:33"><expr pos:start="321:21" pos:end="321:32"><call pos:start="321:21" pos:end="321:32"><name pos:start="321:21" pos:end="321:28">get_le16</name><argument_list pos:start="321:29" pos:end="321:32">(<argument pos:start="321:30" pos:end="321:31"><expr pos:start="321:30" pos:end="321:31"><name pos:start="321:30" pos:end="321:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="321:35" pos:end="321:48">/* priority */</comment>

                    <expr_stmt pos:start="323:21" pos:end="323:33"><expr pos:start="323:21" pos:end="323:32"><call pos:start="323:21" pos:end="323:32"><name pos:start="323:21" pos:end="323:28">get_le16</name><argument_list pos:start="323:29" pos:end="323:32">(<argument pos:start="323:30" pos:end="323:31"><expr pos:start="323:30" pos:end="323:31"><name pos:start="323:30" pos:end="323:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="323:35" pos:end="323:48">/* language */</comment>

                    <expr_stmt pos:start="325:21" pos:end="325:33"><expr pos:start="325:21" pos:end="325:32"><call pos:start="325:21" pos:end="325:32"><name pos:start="325:21" pos:end="325:28">get_le32</name><argument_list pos:start="325:29" pos:end="325:32">(<argument pos:start="325:30" pos:end="325:31"><expr pos:start="325:30" pos:end="325:31"><name pos:start="325:30" pos:end="325:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="325:35" pos:end="325:53">/* initial frame */</comment>

                    <expr_stmt pos:start="327:21" pos:end="327:46"><expr pos:start="327:21" pos:end="327:45"><name pos:start="327:21" pos:end="327:30"><name pos:start="327:21" pos:end="327:23">ast</name><operator pos:start="327:24" pos:end="327:25">-&gt;</operator><name pos:start="327:26" pos:end="327:30">scale</name></name> <operator pos:start="327:32" pos:end="327:32">=</operator> <call pos:start="327:34" pos:end="327:45"><name pos:start="327:34" pos:end="327:41">get_le32</name><argument_list pos:start="327:42" pos:end="327:45">(<argument pos:start="327:43" pos:end="327:44"><expr pos:start="327:43" pos:end="327:44"><name pos:start="327:43" pos:end="327:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="327:48" pos:end="327:58">/* scale */</comment>

                    <expr_stmt pos:start="329:21" pos:end="329:45"><expr pos:start="329:21" pos:end="329:44"><name pos:start="329:21" pos:end="329:29"><name pos:start="329:21" pos:end="329:23">ast</name><operator pos:start="329:24" pos:end="329:25">-&gt;</operator><name pos:start="329:26" pos:end="329:29">rate</name></name> <operator pos:start="329:31" pos:end="329:31">=</operator> <call pos:start="329:33" pos:end="329:44"><name pos:start="329:33" pos:end="329:40">get_le32</name><argument_list pos:start="329:41" pos:end="329:44">(<argument pos:start="329:42" pos:end="329:43"><expr pos:start="329:42" pos:end="329:43"><name pos:start="329:42" pos:end="329:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="331:21" pos:end="333:37"><if pos:start="331:21" pos:end="333:37">if<condition pos:start="331:23" pos:end="331:34">(<expr pos:start="331:24" pos:end="331:33"><operator pos:start="331:24" pos:end="331:24">!</operator><name pos:start="331:25" pos:end="331:33"><name pos:start="331:25" pos:end="331:27">ast</name><operator pos:start="331:28" pos:end="331:29">-&gt;</operator><name pos:start="331:30" pos:end="331:33">rate</name></name></expr>)</condition><block type="pseudo" pos:start="333:25" pos:end="333:37"><block_content pos:start="333:25" pos:end="333:37">

                        <expr_stmt pos:start="333:25" pos:end="333:37"><expr pos:start="333:25" pos:end="333:36"><name pos:start="333:25" pos:end="333:33"><name pos:start="333:25" pos:end="333:27">ast</name><operator pos:start="333:28" pos:end="333:29">-&gt;</operator><name pos:start="333:30" pos:end="333:33">rate</name></name><operator pos:start="333:34" pos:end="333:34">=</operator> <literal type="number" pos:start="333:36" pos:end="333:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="333:39" pos:end="333:65">//wrong but better then 1/0</comment>

                    <if_stmt pos:start="335:21" pos:end="337:38"><if pos:start="335:21" pos:end="337:38">if<condition pos:start="335:23" pos:end="335:35">(<expr pos:start="335:24" pos:end="335:34"><operator pos:start="335:24" pos:end="335:24">!</operator><name pos:start="335:25" pos:end="335:34"><name pos:start="335:25" pos:end="335:27">ast</name><operator pos:start="335:28" pos:end="335:29">-&gt;</operator><name pos:start="335:30" pos:end="335:34">scale</name></name></expr>)</condition><block type="pseudo" pos:start="337:25" pos:end="337:38"><block_content pos:start="337:25" pos:end="337:38">

                        <expr_stmt pos:start="337:25" pos:end="337:38"><expr pos:start="337:25" pos:end="337:37"><name pos:start="337:25" pos:end="337:34"><name pos:start="337:25" pos:end="337:27">ast</name><operator pos:start="337:28" pos:end="337:29">-&gt;</operator><name pos:start="337:30" pos:end="337:34">scale</name></name><operator pos:start="337:35" pos:end="337:35">=</operator> <literal type="number" pos:start="337:37" pos:end="337:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="337:40" pos:end="337:66">//wrong but better then 1/0</comment>

                    <expr_stmt pos:start="339:21" pos:end="339:67"><expr pos:start="339:21" pos:end="339:66"><call pos:start="339:21" pos:end="339:66"><name pos:start="339:21" pos:end="339:35">av_set_pts_info</name><argument_list pos:start="339:36" pos:end="339:66">(<argument pos:start="339:37" pos:end="339:38"><expr pos:start="339:37" pos:end="339:38"><name pos:start="339:37" pos:end="339:38">st</name></expr></argument>, <argument pos:start="339:41" pos:end="339:42"><expr pos:start="339:41" pos:end="339:42"><literal type="number" pos:start="339:41" pos:end="339:42">64</literal></expr></argument>, <argument pos:start="339:45" pos:end="339:54"><expr pos:start="339:45" pos:end="339:54"><name pos:start="339:45" pos:end="339:54"><name pos:start="339:45" pos:end="339:47">ast</name><operator pos:start="339:48" pos:end="339:49">-&gt;</operator><name pos:start="339:50" pos:end="339:54">scale</name></name></expr></argument>, <argument pos:start="339:57" pos:end="339:65"><expr pos:start="339:57" pos:end="339:65"><name pos:start="339:57" pos:end="339:65"><name pos:start="339:57" pos:end="339:59">ast</name><operator pos:start="339:60" pos:end="339:61">-&gt;</operator><name pos:start="339:62" pos:end="339:65">rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="341:21" pos:end="341:45"><expr pos:start="341:21" pos:end="341:44"><name pos:start="341:21" pos:end="341:30"><name pos:start="341:21" pos:end="341:23">ast</name><operator pos:start="341:24" pos:end="341:25">-&gt;</operator><name pos:start="341:26" pos:end="341:30">start</name></name><operator pos:start="341:31" pos:end="341:31">=</operator> <call pos:start="341:33" pos:end="341:44"><name pos:start="341:33" pos:end="341:40">get_le32</name><argument_list pos:start="341:41" pos:end="341:44">(<argument pos:start="341:42" pos:end="341:43"><expr pos:start="341:42" pos:end="341:43"><name pos:start="341:42" pos:end="341:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="341:47" pos:end="341:57">/* start */</comment>

                    <expr_stmt pos:start="343:21" pos:end="343:42"><expr pos:start="343:21" pos:end="343:41"><name pos:start="343:21" pos:end="343:26">length</name> <operator pos:start="343:28" pos:end="343:28">=</operator> <call pos:start="343:30" pos:end="343:41"><name pos:start="343:30" pos:end="343:37">get_le32</name><argument_list pos:start="343:38" pos:end="343:41">(<argument pos:start="343:39" pos:end="343:40"><expr pos:start="343:39" pos:end="343:40"><name pos:start="343:39" pos:end="343:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="343:44" pos:end="343:76">/* length, in samples or bytes */</comment>

                    <expr_stmt pos:start="345:21" pos:end="345:33"><expr pos:start="345:21" pos:end="345:32"><call pos:start="345:21" pos:end="345:32"><name pos:start="345:21" pos:end="345:28">get_le32</name><argument_list pos:start="345:29" pos:end="345:32">(<argument pos:start="345:30" pos:end="345:31"><expr pos:start="345:30" pos:end="345:31"><name pos:start="345:30" pos:end="345:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="345:35" pos:end="345:51">/* buffer size */</comment>

                    <expr_stmt pos:start="347:21" pos:end="347:33"><expr pos:start="347:21" pos:end="347:32"><call pos:start="347:21" pos:end="347:32"><name pos:start="347:21" pos:end="347:28">get_le32</name><argument_list pos:start="347:29" pos:end="347:32">(<argument pos:start="347:30" pos:end="347:31"><expr pos:start="347:30" pos:end="347:31"><name pos:start="347:30" pos:end="347:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="347:35" pos:end="347:47">/* quality */</comment>

                    <expr_stmt pos:start="349:21" pos:end="349:52"><expr pos:start="349:21" pos:end="349:51"><name pos:start="349:21" pos:end="349:36"><name pos:start="349:21" pos:end="349:23">ast</name><operator pos:start="349:24" pos:end="349:25">-&gt;</operator><name pos:start="349:26" pos:end="349:36">sample_size</name></name> <operator pos:start="349:38" pos:end="349:38">=</operator> <call pos:start="349:40" pos:end="349:51"><name pos:start="349:40" pos:end="349:47">get_le32</name><argument_list pos:start="349:48" pos:end="349:51">(<argument pos:start="349:49" pos:end="349:50"><expr pos:start="349:49" pos:end="349:50"><name pos:start="349:49" pos:end="349:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="349:54" pos:end="349:71">/* sample ssize */</comment>

<comment type="line" pos:start="351:1" pos:end="351:99">//av_log(NULL, AV_LOG_DEBUG, "%d %d %d %d\n", ast-&gt;scale, ast-&gt;rate, ast-&gt;sample_size, ast-&gt;start);</comment>

                    <expr_stmt pos:start="353:21" pos:end="353:39"><expr pos:start="353:21" pos:end="353:38"><name pos:start="353:21" pos:end="353:34"><name pos:start="353:21" pos:end="353:22">st</name><operator pos:start="353:23" pos:end="353:24">-&gt;</operator><name pos:start="353:25" pos:end="353:34">start_time</name></name> <operator pos:start="353:36" pos:end="353:36">=</operator> <literal type="number" pos:start="353:38" pos:end="353:38">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="355:21" pos:end="357:82"><if pos:start="355:21" pos:end="357:82">if <condition pos:start="355:24" pos:end="355:39">(<expr pos:start="355:25" pos:end="355:38"><name pos:start="355:25" pos:end="355:33"><name pos:start="355:25" pos:end="355:27">ast</name><operator pos:start="355:28" pos:end="355:29">-&gt;</operator><name pos:start="355:30" pos:end="355:33">rate</name></name> <operator pos:start="355:35" pos:end="355:36">!=</operator> <literal type="number" pos:start="355:38" pos:end="355:38">0</literal></expr>)</condition><block type="pseudo" pos:start="357:25" pos:end="357:82"><block_content pos:start="357:25" pos:end="357:82">

                        <expr_stmt pos:start="357:25" pos:end="357:82"><expr pos:start="357:25" pos:end="357:81"><name pos:start="357:25" pos:end="357:36"><name pos:start="357:25" pos:end="357:26">st</name><operator pos:start="357:27" pos:end="357:28">-&gt;</operator><name pos:start="357:29" pos:end="357:36">duration</name></name> <operator pos:start="357:38" pos:end="357:38">=</operator> <operator pos:start="357:40" pos:end="357:40">(</operator><name pos:start="357:41" pos:end="357:47">int64_t</name><operator pos:start="357:48" pos:end="357:48">)</operator><name pos:start="357:49" pos:end="357:54">length</name> <operator pos:start="357:56" pos:end="357:56">*</operator> <name pos:start="357:58" pos:end="357:69">AV_TIME_BASE</name> <operator pos:start="357:71" pos:end="357:71">/</operator> <name pos:start="357:73" pos:end="357:81"><name pos:start="357:73" pos:end="357:75">ast</name><operator pos:start="357:76" pos:end="357:77">-&gt;</operator><name pos:start="357:78" pos:end="357:81">rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:49"><expr pos:start="359:21" pos:end="359:48"><call pos:start="359:21" pos:end="359:48"><name pos:start="359:21" pos:end="359:29">url_fskip</name><argument_list pos:start="359:30" pos:end="359:48">(<argument pos:start="359:31" pos:end="359:32"><expr pos:start="359:31" pos:end="359:32"><name pos:start="359:31" pos:end="359:32">pb</name></expr></argument>, <argument pos:start="359:35" pos:end="359:47"><expr pos:start="359:35" pos:end="359:47"><name pos:start="359:35" pos:end="359:38">size</name> <operator pos:start="359:40" pos:end="359:40">-</operator> <literal type="number" pos:start="359:42" pos:end="359:43">12</literal> <operator pos:start="359:45" pos:end="359:45">*</operator> <literal type="number" pos:start="359:47" pos:end="359:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="363:17" pos:end="363:22">break;</break>

            <case pos:start="365:13" pos:end="365:43">case <expr pos:start="365:18" pos:end="365:42"><call pos:start="365:18" pos:end="365:42"><name pos:start="365:18" pos:end="365:22">MKTAG</name><argument_list pos:start="365:23" pos:end="365:42">(<argument pos:start="365:24" pos:end="365:26"><expr pos:start="365:24" pos:end="365:26"><literal type="char" pos:start="365:24" pos:end="365:26">'t'</literal></expr></argument>, <argument pos:start="365:29" pos:end="365:31"><expr pos:start="365:29" pos:end="365:31"><literal type="char" pos:start="365:29" pos:end="365:31">'x'</literal></expr></argument>, <argument pos:start="365:34" pos:end="365:36"><expr pos:start="365:34" pos:end="365:36"><literal type="char" pos:start="365:34" pos:end="365:36">'t'</literal></expr></argument>, <argument pos:start="365:39" pos:end="365:41"><expr pos:start="365:39" pos:end="365:41"><literal type="char" pos:start="365:39" pos:end="365:41">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <comment type="line" pos:start="367:17" pos:end="367:24">//FIXME </comment>

                <expr_stmt pos:start="369:17" pos:end="369:45"><expr pos:start="369:17" pos:end="369:44"><name pos:start="369:17" pos:end="369:26">codec_type</name> <operator pos:start="369:28" pos:end="369:28">=</operator> <name pos:start="369:30" pos:end="369:44">CODEC_TYPE_DATA</name></expr>;</expr_stmt> <comment type="line" pos:start="369:47" pos:end="369:71">//CODEC_TYPE_SUB ?  FIXME</comment>

                <expr_stmt pos:start="371:17" pos:end="371:40"><expr pos:start="371:17" pos:end="371:39"><call pos:start="371:17" pos:end="371:39"><name pos:start="371:17" pos:end="371:25">url_fskip</name><argument_list pos:start="371:26" pos:end="371:39">(<argument pos:start="371:27" pos:end="371:28"><expr pos:start="371:27" pos:end="371:28"><name pos:start="371:27" pos:end="371:28">pb</name></expr></argument>, <argument pos:start="371:31" pos:end="371:38"><expr pos:start="371:31" pos:end="371:38"><name pos:start="371:31" pos:end="371:34">size</name> <operator pos:start="371:36" pos:end="371:36">-</operator> <literal type="number" pos:start="371:38" pos:end="371:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="373:17" pos:end="373:22">break;</break>

            <case pos:start="375:13" pos:end="375:43">case <expr pos:start="375:18" pos:end="375:42"><call pos:start="375:18" pos:end="375:42"><name pos:start="375:18" pos:end="375:22">MKTAG</name><argument_list pos:start="375:23" pos:end="375:42">(<argument pos:start="375:24" pos:end="375:26"><expr pos:start="375:24" pos:end="375:26"><literal type="char" pos:start="375:24" pos:end="375:26">'p'</literal></expr></argument>, <argument pos:start="375:29" pos:end="375:31"><expr pos:start="375:29" pos:end="375:31"><literal type="char" pos:start="375:29" pos:end="375:31">'a'</literal></expr></argument>, <argument pos:start="375:34" pos:end="375:36"><expr pos:start="375:34" pos:end="375:36"><literal type="char" pos:start="375:34" pos:end="375:36">'d'</literal></expr></argument>, <argument pos:start="375:39" pos:end="375:41"><expr pos:start="375:39" pos:end="375:41"><literal type="char" pos:start="375:39" pos:end="375:41">'s'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <expr_stmt pos:start="377:17" pos:end="377:48"><expr pos:start="377:17" pos:end="377:47"><name pos:start="377:17" pos:end="377:26">codec_type</name> <operator pos:start="377:28" pos:end="377:28">=</operator> <name pos:start="377:30" pos:end="377:47">CODEC_TYPE_UNKNOWN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:40"><expr pos:start="379:17" pos:end="379:39"><call pos:start="379:17" pos:end="379:39"><name pos:start="379:17" pos:end="379:25">url_fskip</name><argument_list pos:start="379:26" pos:end="379:39">(<argument pos:start="379:27" pos:end="379:28"><expr pos:start="379:27" pos:end="379:28"><name pos:start="379:27" pos:end="379:28">pb</name></expr></argument>, <argument pos:start="379:31" pos:end="379:38"><expr pos:start="379:31" pos:end="379:38"><name pos:start="379:31" pos:end="379:34">size</name> <operator pos:start="379:36" pos:end="379:36">-</operator> <literal type="number" pos:start="379:38" pos:end="379:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:31"><expr pos:start="381:17" pos:end="381:30"><name pos:start="381:17" pos:end="381:28">stream_index</name><operator pos:start="381:29" pos:end="381:30">--</operator></expr>;</expr_stmt>

                <break pos:start="383:17" pos:end="383:22">break;</break>

            <default pos:start="385:13" pos:end="385:20">default:</default>

                <expr_stmt pos:start="387:17" pos:end="387:74"><expr pos:start="387:17" pos:end="387:73"><call pos:start="387:17" pos:end="387:73"><name pos:start="387:17" pos:end="387:22">av_log</name><argument_list pos:start="387:23" pos:end="387:73">(<argument pos:start="387:24" pos:end="387:24"><expr pos:start="387:24" pos:end="387:24"><name pos:start="387:24" pos:end="387:24">s</name></expr></argument>, <argument pos:start="387:27" pos:end="387:38"><expr pos:start="387:27" pos:end="387:38"><name pos:start="387:27" pos:end="387:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="387:41" pos:end="387:66"><expr pos:start="387:41" pos:end="387:66"><literal type="string" pos:start="387:41" pos:end="387:66">"unknown stream type %X\n"</literal></expr></argument>, <argument pos:start="387:69" pos:end="387:72"><expr pos:start="387:69" pos:end="387:72"><name pos:start="387:69" pos:end="387:72">tag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="389:17" pos:end="389:26">goto <name pos:start="389:22" pos:end="389:25">fail</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="393:13" pos:end="393:18">break;</break>

        <case pos:start="395:9" pos:end="395:39">case <expr pos:start="395:14" pos:end="395:38"><call pos:start="395:14" pos:end="395:38"><name pos:start="395:14" pos:end="395:18">MKTAG</name><argument_list pos:start="395:19" pos:end="395:38">(<argument pos:start="395:20" pos:end="395:22"><expr pos:start="395:20" pos:end="395:22"><literal type="char" pos:start="395:20" pos:end="395:22">'s'</literal></expr></argument>, <argument pos:start="395:25" pos:end="395:27"><expr pos:start="395:25" pos:end="395:27"><literal type="char" pos:start="395:25" pos:end="395:27">'t'</literal></expr></argument>, <argument pos:start="395:30" pos:end="395:32"><expr pos:start="395:30" pos:end="395:32"><literal type="char" pos:start="395:30" pos:end="395:32">'r'</literal></expr></argument>, <argument pos:start="395:35" pos:end="395:37"><expr pos:start="395:35" pos:end="395:37"><literal type="char" pos:start="395:35" pos:end="395:37">'f'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <comment type="block" pos:start="397:13" pos:end="397:31">/* stream header */</comment>

            <if_stmt pos:start="399:13" pos:end="541:13"><if pos:start="399:13" pos:end="403:13">if <condition pos:start="399:16" pos:end="399:63">(<expr pos:start="399:17" pos:end="399:62"><name pos:start="399:17" pos:end="399:28">stream_index</name> <operator pos:start="399:30" pos:end="399:31">&gt;=</operator> <name pos:start="399:33" pos:end="399:45"><name pos:start="399:33" pos:end="399:33">s</name><operator pos:start="399:34" pos:end="399:35">-&gt;</operator><name pos:start="399:36" pos:end="399:45">nb_streams</name></name> <operator pos:start="399:47" pos:end="399:48">||</operator> <name pos:start="399:50" pos:end="399:62"><name pos:start="399:50" pos:end="399:52">avi</name><operator pos:start="399:53" pos:end="399:54">-&gt;</operator><name pos:start="399:55" pos:end="399:62">dv_demux</name></name></expr>)</condition> <block pos:start="399:65" pos:end="403:13">{<block_content pos:start="401:17" pos:end="401:36">

                <expr_stmt pos:start="401:17" pos:end="401:36"><expr pos:start="401:17" pos:end="401:35"><call pos:start="401:17" pos:end="401:35"><name pos:start="401:17" pos:end="401:25">url_fskip</name><argument_list pos:start="401:26" pos:end="401:35">(<argument pos:start="401:27" pos:end="401:28"><expr pos:start="401:27" pos:end="401:28"><name pos:start="401:27" pos:end="401:28">pb</name></expr></argument>, <argument pos:start="401:31" pos:end="401:34"><expr pos:start="401:31" pos:end="401:34"><name pos:start="401:31" pos:end="401:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="403:15" pos:end="541:13">else <block pos:start="403:20" pos:end="541:13">{<block_content pos:start="405:17" pos:end="539:17">

                <expr_stmt pos:start="405:17" pos:end="405:46"><expr pos:start="405:17" pos:end="405:45"><name pos:start="405:17" pos:end="405:18">st</name> <operator pos:start="405:20" pos:end="405:20">=</operator> <name pos:start="405:22" pos:end="405:45"><name pos:start="405:22" pos:end="405:22">s</name><operator pos:start="405:23" pos:end="405:24">-&gt;</operator><name pos:start="405:25" pos:end="405:31">streams</name><index pos:start="405:32" pos:end="405:45">[<expr pos:start="405:33" pos:end="405:44"><name pos:start="405:33" pos:end="405:44">stream_index</name></expr>]</index></name></expr>;</expr_stmt>

                <switch pos:start="407:17" pos:end="539:17">switch<condition pos:start="407:23" pos:end="407:34">(<expr pos:start="407:24" pos:end="407:33"><name pos:start="407:24" pos:end="407:33">codec_type</name></expr>)</condition> <block pos:start="407:36" pos:end="539:17">{<block_content pos:start="409:17" pos:end="537:26">

                <case pos:start="409:17" pos:end="409:38">case <expr pos:start="409:22" pos:end="409:37"><name pos:start="409:22" pos:end="409:37">CODEC_TYPE_VIDEO</name></expr>:</case>

                    <expr_stmt pos:start="411:21" pos:end="411:33"><expr pos:start="411:21" pos:end="411:32"><call pos:start="411:21" pos:end="411:32"><name pos:start="411:21" pos:end="411:28">get_le32</name><argument_list pos:start="411:29" pos:end="411:32">(<argument pos:start="411:30" pos:end="411:31"><expr pos:start="411:30" pos:end="411:31"><name pos:start="411:30" pos:end="411:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="411:35" pos:end="411:44">/* size */</comment>

                    <expr_stmt pos:start="413:21" pos:end="413:51"><expr pos:start="413:21" pos:end="413:50"><name pos:start="413:21" pos:end="413:35"><name pos:start="413:21" pos:end="413:22">st</name><operator pos:start="413:23" pos:end="413:24">-&gt;</operator><name pos:start="413:25" pos:end="413:29">codec</name><operator pos:start="413:30" pos:end="413:30">.</operator><name pos:start="413:31" pos:end="413:35">width</name></name> <operator pos:start="413:37" pos:end="413:37">=</operator> <call pos:start="413:39" pos:end="413:50"><name pos:start="413:39" pos:end="413:46">get_le32</name><argument_list pos:start="413:47" pos:end="413:50">(<argument pos:start="413:48" pos:end="413:49"><expr pos:start="413:48" pos:end="413:49"><name pos:start="413:48" pos:end="413:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="415:21" pos:end="415:52"><expr pos:start="415:21" pos:end="415:51"><name pos:start="415:21" pos:end="415:36"><name pos:start="415:21" pos:end="415:22">st</name><operator pos:start="415:23" pos:end="415:24">-&gt;</operator><name pos:start="415:25" pos:end="415:29">codec</name><operator pos:start="415:30" pos:end="415:30">.</operator><name pos:start="415:31" pos:end="415:36">height</name></name> <operator pos:start="415:38" pos:end="415:38">=</operator> <call pos:start="415:40" pos:end="415:51"><name pos:start="415:40" pos:end="415:47">get_le32</name><argument_list pos:start="415:48" pos:end="415:51">(<argument pos:start="415:49" pos:end="415:50"><expr pos:start="415:49" pos:end="415:50"><name pos:start="415:49" pos:end="415:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="417:21" pos:end="417:33"><expr pos:start="417:21" pos:end="417:32"><call pos:start="417:21" pos:end="417:32"><name pos:start="417:21" pos:end="417:28">get_le16</name><argument_list pos:start="417:29" pos:end="417:32">(<argument pos:start="417:30" pos:end="417:31"><expr pos:start="417:30" pos:end="417:31"><name pos:start="417:30" pos:end="417:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="417:35" pos:end="417:45">/* panes */</comment>

                    <expr_stmt pos:start="419:21" pos:end="419:60"><expr pos:start="419:21" pos:end="419:59"><name pos:start="419:21" pos:end="419:45"><name pos:start="419:21" pos:end="419:22">st</name><operator pos:start="419:23" pos:end="419:24">-&gt;</operator><name pos:start="419:25" pos:end="419:29">codec</name><operator pos:start="419:30" pos:end="419:30">.</operator><name pos:start="419:31" pos:end="419:45">bits_per_sample</name></name><operator pos:start="419:46" pos:end="419:46">=</operator> <call pos:start="419:48" pos:end="419:59"><name pos:start="419:48" pos:end="419:55">get_le16</name><argument_list pos:start="419:56" pos:end="419:59">(<argument pos:start="419:57" pos:end="419:58"><expr pos:start="419:57" pos:end="419:58"><name pos:start="419:57" pos:end="419:58">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="419:62" pos:end="419:72">/* depth */</comment>

                    <expr_stmt pos:start="421:21" pos:end="421:40"><expr pos:start="421:21" pos:end="421:39"><name pos:start="421:21" pos:end="421:24">tag1</name> <operator pos:start="421:26" pos:end="421:26">=</operator> <call pos:start="421:28" pos:end="421:39"><name pos:start="421:28" pos:end="421:35">get_le32</name><argument_list pos:start="421:36" pos:end="421:39">(<argument pos:start="421:37" pos:end="421:38"><expr pos:start="421:37" pos:end="421:38"><name pos:start="421:37" pos:end="421:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="423:21" pos:end="423:33"><expr pos:start="423:21" pos:end="423:32"><call pos:start="423:21" pos:end="423:32"><name pos:start="423:21" pos:end="423:28">get_le32</name><argument_list pos:start="423:29" pos:end="423:32">(<argument pos:start="423:30" pos:end="423:31"><expr pos:start="423:30" pos:end="423:31"><name pos:start="423:30" pos:end="423:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="423:35" pos:end="423:49">/* ImageSize */</comment>

                    <expr_stmt pos:start="425:21" pos:end="425:33"><expr pos:start="425:21" pos:end="425:32"><call pos:start="425:21" pos:end="425:32"><name pos:start="425:21" pos:end="425:28">get_le32</name><argument_list pos:start="425:29" pos:end="425:32">(<argument pos:start="425:30" pos:end="425:31"><expr pos:start="425:30" pos:end="425:31"><name pos:start="425:30" pos:end="425:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="425:35" pos:end="425:53">/* XPelsPerMeter */</comment>

                    <expr_stmt pos:start="427:21" pos:end="427:33"><expr pos:start="427:21" pos:end="427:32"><call pos:start="427:21" pos:end="427:32"><name pos:start="427:21" pos:end="427:28">get_le32</name><argument_list pos:start="427:29" pos:end="427:32">(<argument pos:start="427:30" pos:end="427:31"><expr pos:start="427:30" pos:end="427:31"><name pos:start="427:30" pos:end="427:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="427:35" pos:end="427:53">/* YPelsPerMeter */</comment>

                    <expr_stmt pos:start="429:21" pos:end="429:33"><expr pos:start="429:21" pos:end="429:32"><call pos:start="429:21" pos:end="429:32"><name pos:start="429:21" pos:end="429:28">get_le32</name><argument_list pos:start="429:29" pos:end="429:32">(<argument pos:start="429:30" pos:end="429:31"><expr pos:start="429:30" pos:end="429:31"><name pos:start="429:30" pos:end="429:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="429:35" pos:end="429:47">/* ClrUsed */</comment>

                    <expr_stmt pos:start="431:21" pos:end="431:33"><expr pos:start="431:21" pos:end="431:32"><call pos:start="431:21" pos:end="431:32"><name pos:start="431:21" pos:end="431:28">get_le32</name><argument_list pos:start="431:29" pos:end="431:32">(<argument pos:start="431:30" pos:end="431:31"><expr pos:start="431:30" pos:end="431:31"><name pos:start="431:30" pos:end="431:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="431:35" pos:end="431:52">/* ClrImportant */</comment>



                 <if_stmt pos:start="435:18" pos:end="443:18"><if pos:start="435:18" pos:end="443:18">if<condition pos:start="435:20" pos:end="435:48">(<expr pos:start="435:21" pos:end="435:47"><name pos:start="435:21" pos:end="435:24">size</name> <operator pos:start="435:26" pos:end="435:26">&gt;</operator> <literal type="number" pos:start="435:28" pos:end="435:29">10</literal><operator pos:start="435:30" pos:end="435:30">*</operator><literal type="number" pos:start="435:31" pos:end="435:31">4</literal> <operator pos:start="435:33" pos:end="435:34">&amp;&amp;</operator> <name pos:start="435:36" pos:end="435:39">size</name><operator pos:start="435:40" pos:end="435:40">&lt;</operator><operator pos:start="435:41" pos:end="435:41">(</operator><literal type="number" pos:start="435:42" pos:end="435:42">1</literal><operator pos:start="435:43" pos:end="435:44">&lt;&lt;</operator><literal type="number" pos:start="435:45" pos:end="435:46">30</literal><operator pos:start="435:47" pos:end="435:47">)</operator></expr>)</condition><block pos:start="435:49" pos:end="443:18">{<block_content pos:start="437:21" pos:end="441:82">

                    <expr_stmt pos:start="437:21" pos:end="437:58"><expr pos:start="437:21" pos:end="437:57"><name pos:start="437:21" pos:end="437:44"><name pos:start="437:21" pos:end="437:22">st</name><operator pos:start="437:23" pos:end="437:24">-&gt;</operator><name pos:start="437:25" pos:end="437:29">codec</name><operator pos:start="437:30" pos:end="437:30">.</operator><name pos:start="437:31" pos:end="437:44">extradata_size</name></name><operator pos:start="437:45" pos:end="437:45">=</operator> <name pos:start="437:47" pos:end="437:50">size</name> <operator pos:start="437:52" pos:end="437:52">-</operator> <literal type="number" pos:start="437:54" pos:end="437:55">10</literal><operator pos:start="437:56" pos:end="437:56">*</operator><literal type="number" pos:start="437:57" pos:end="437:57">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="439:21" pos:end="439:108"><expr pos:start="439:21" pos:end="439:107"><name pos:start="439:21" pos:end="439:39"><name pos:start="439:21" pos:end="439:22">st</name><operator pos:start="439:23" pos:end="439:24">-&gt;</operator><name pos:start="439:25" pos:end="439:29">codec</name><operator pos:start="439:30" pos:end="439:30">.</operator><name pos:start="439:31" pos:end="439:39">extradata</name></name><operator pos:start="439:40" pos:end="439:40">=</operator> <call pos:start="439:42" pos:end="439:107"><name pos:start="439:42" pos:end="439:50">av_malloc</name><argument_list pos:start="439:51" pos:end="439:107">(<argument pos:start="439:52" pos:end="439:106"><expr pos:start="439:52" pos:end="439:106"><name pos:start="439:52" pos:end="439:75"><name pos:start="439:52" pos:end="439:53">st</name><operator pos:start="439:54" pos:end="439:55">-&gt;</operator><name pos:start="439:56" pos:end="439:60">codec</name><operator pos:start="439:61" pos:end="439:61">.</operator><name pos:start="439:62" pos:end="439:75">extradata_size</name></name> <operator pos:start="439:77" pos:end="439:77">+</operator> <name pos:start="439:79" pos:end="439:106">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="441:21" pos:end="441:82"><expr pos:start="441:21" pos:end="441:81"><call pos:start="441:21" pos:end="441:81"><name pos:start="441:21" pos:end="441:30">get_buffer</name><argument_list pos:start="441:31" pos:end="441:81">(<argument pos:start="441:32" pos:end="441:33"><expr pos:start="441:32" pos:end="441:33"><name pos:start="441:32" pos:end="441:33">pb</name></expr></argument>, <argument pos:start="441:36" pos:end="441:54"><expr pos:start="441:36" pos:end="441:54"><name pos:start="441:36" pos:end="441:54"><name pos:start="441:36" pos:end="441:37">st</name><operator pos:start="441:38" pos:end="441:39">-&gt;</operator><name pos:start="441:40" pos:end="441:44">codec</name><operator pos:start="441:45" pos:end="441:45">.</operator><name pos:start="441:46" pos:end="441:54">extradata</name></name></expr></argument>, <argument pos:start="441:57" pos:end="441:80"><expr pos:start="441:57" pos:end="441:80"><name pos:start="441:57" pos:end="441:80"><name pos:start="441:57" pos:end="441:58">st</name><operator pos:start="441:59" pos:end="441:60">-&gt;</operator><name pos:start="441:61" pos:end="441:65">codec</name><operator pos:start="441:66" pos:end="441:66">.</operator><name pos:start="441:67" pos:end="441:80">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                 </block_content>}</block></if></if_stmt>

                    

                    <if_stmt pos:start="447:21" pos:end="449:37"><if pos:start="447:21" pos:end="449:37">if<condition pos:start="447:23" pos:end="447:52">(<expr pos:start="447:24" pos:end="447:51"><name pos:start="447:24" pos:end="447:47"><name pos:start="447:24" pos:end="447:25">st</name><operator pos:start="447:26" pos:end="447:27">-&gt;</operator><name pos:start="447:28" pos:end="447:32">codec</name><operator pos:start="447:33" pos:end="447:33">.</operator><name pos:start="447:34" pos:end="447:47">extradata_size</name></name> <operator pos:start="447:49" pos:end="447:49">&amp;</operator> <literal type="number" pos:start="447:51" pos:end="447:51">1</literal></expr>)</condition><block type="pseudo" pos:start="449:25" pos:end="449:37"><block_content pos:start="449:25" pos:end="449:37"> <comment type="line" pos:start="447:54" pos:end="447:107">//FIXME check if the encoder really did this correctly</comment>

                        <expr_stmt pos:start="449:25" pos:end="449:37"><expr pos:start="449:25" pos:end="449:36"><call pos:start="449:25" pos:end="449:36"><name pos:start="449:25" pos:end="449:32">get_byte</name><argument_list pos:start="449:33" pos:end="449:36">(<argument pos:start="449:34" pos:end="449:35"><expr pos:start="449:34" pos:end="449:35"><name pos:start="449:34" pos:end="449:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <comment type="block" pos:start="453:21" pos:end="453:68">/* Extract palette from extradata if bpp &lt;= 8 */</comment>

                    <comment type="block" pos:start="455:21" pos:end="455:80">/* This code assumes that extradata contains only palette */</comment>

                    <comment type="block" pos:start="457:21" pos:end="457:84">/* This is true for all paletted codecs implemented in ffmpeg */</comment>

                    <if_stmt pos:start="459:21" pos:end="484:0"><if pos:start="459:21" pos:end="484:0">if <condition pos:start="459:24" pos:end="459:85">(<expr pos:start="459:25" pos:end="459:84"><name pos:start="459:25" pos:end="459:48"><name pos:start="459:25" pos:end="459:26">st</name><operator pos:start="459:27" pos:end="459:28">-&gt;</operator><name pos:start="459:29" pos:end="459:33">codec</name><operator pos:start="459:34" pos:end="459:34">.</operator><name pos:start="459:35" pos:end="459:48">extradata_size</name></name> <operator pos:start="459:50" pos:end="459:51">&amp;&amp;</operator> <operator pos:start="459:53" pos:end="459:53">(</operator><name pos:start="459:54" pos:end="459:78"><name pos:start="459:54" pos:end="459:55">st</name><operator pos:start="459:56" pos:end="459:57">-&gt;</operator><name pos:start="459:58" pos:end="459:62">codec</name><operator pos:start="459:63" pos:end="459:63">.</operator><name pos:start="459:64" pos:end="459:78">bits_per_sample</name></name> <operator pos:start="459:80" pos:end="459:81">&lt;=</operator> <literal type="number" pos:start="459:83" pos:end="459:83">8</literal><operator pos:start="459:84" pos:end="459:84">)</operator></expr>)</condition> <block pos:start="459:87" pos:end="484:0">{<block_content pos:start="461:25" pos:end="477:63">

                        <expr_stmt pos:start="461:25" pos:end="464:0"><expr pos:start="461:25" pos:end="461:80"><name pos:start="461:25" pos:end="461:41"><name pos:start="461:25" pos:end="461:26">st</name><operator pos:start="461:27" pos:end="461:28">-&gt;</operator><name pos:start="461:29" pos:end="461:33">codec</name><operator pos:start="461:34" pos:end="461:34">.</operator><name pos:start="461:35" pos:end="461:41">palctrl</name></name> <operator pos:start="461:43" pos:end="461:43">=</operator> <call pos:start="461:45" pos:end="461:80"><name pos:start="461:45" pos:end="461:54">av_mallocz</name><argument_list pos:start="461:55" pos:end="461:80">(<argument pos:start="461:56" pos:end="461:79"><expr pos:start="461:56" pos:end="461:79"><sizeof pos:start="461:56" pos:end="461:79">sizeof<argument_list pos:start="461:62" pos:end="461:79">(<argument pos:start="461:63" pos:end="461:78"><expr pos:start="461:63" pos:end="461:78"><name pos:start="461:63" pos:end="461:78">AVPaletteControl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="463:1" pos:end="463:22">#<cpp:directive pos:start="463:2" pos:end="463:6">ifdef</cpp:directive> <name pos:start="463:8" pos:end="463:22">WORDS_BIGENDIAN</name></cpp:ifdef>

                        <for pos:start="465:25" pos:end="470:0">for <control pos:start="465:29" pos:end="465:95">(<init pos:start="465:30" pos:end="465:35"><expr pos:start="465:30" pos:end="465:34"><name pos:start="465:30" pos:end="465:30">i</name> <operator pos:start="465:32" pos:end="465:32">=</operator> <literal type="number" pos:start="465:34" pos:end="465:34">0</literal></expr>;</init> <condition pos:start="465:37" pos:end="465:90"><expr pos:start="465:37" pos:end="465:89"><name pos:start="465:37" pos:end="465:37">i</name> <operator pos:start="465:39" pos:end="465:39">&lt;</operator> <call pos:start="465:41" pos:end="465:87"><name pos:start="465:41" pos:end="465:45">FFMIN</name><argument_list pos:start="465:46" pos:end="465:87">(<argument pos:start="465:47" pos:end="465:70"><expr pos:start="465:47" pos:end="465:70"><name pos:start="465:47" pos:end="465:70"><name pos:start="465:47" pos:end="465:48">st</name><operator pos:start="465:49" pos:end="465:50">-&gt;</operator><name pos:start="465:51" pos:end="465:55">codec</name><operator pos:start="465:56" pos:end="465:56">.</operator><name pos:start="465:57" pos:end="465:70">extradata_size</name></name></expr></argument>, <argument pos:start="465:73" pos:end="465:86"><expr pos:start="465:73" pos:end="465:86"><name pos:start="465:73" pos:end="465:86">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="465:88" pos:end="465:88">/</operator><literal type="number" pos:start="465:89" pos:end="465:89">4</literal></expr>;</condition> <incr pos:start="465:92" pos:end="465:94"><expr pos:start="465:92" pos:end="465:94"><name pos:start="465:92" pos:end="465:92">i</name><operator pos:start="465:93" pos:end="465:94">++</operator></expr></incr>)</control><block type="pseudo" pos:start="467:29" pos:end="470:0"><block_content pos:start="467:29" pos:end="470:0">

                            <expr_stmt pos:start="467:29" pos:end="470:0"><expr pos:start="467:29" pos:end="467:105"><name pos:start="467:29" pos:end="467:57"><name pos:start="467:29" pos:end="467:30">st</name><operator pos:start="467:31" pos:end="467:32">-&gt;</operator><name pos:start="467:33" pos:end="467:37">codec</name><operator pos:start="467:38" pos:end="467:38">.</operator><name pos:start="467:39" pos:end="467:45">palctrl</name><operator pos:start="467:46" pos:end="467:47">-&gt;</operator><name pos:start="467:48" pos:end="467:54">palette</name><index pos:start="467:55" pos:end="467:57">[<expr pos:start="467:56" pos:end="467:56"><name pos:start="467:56" pos:end="467:56">i</name></expr>]</index></name> <operator pos:start="467:59" pos:end="467:59">=</operator> <call pos:start="467:61" pos:end="467:105"><name pos:start="467:61" pos:end="467:68">bswap_32</name><argument_list pos:start="467:69" pos:end="467:105">(<argument pos:start="467:70" pos:end="467:104"><expr pos:start="467:70" pos:end="467:104"><operator pos:start="467:70" pos:end="467:70">(</operator><operator pos:start="467:71" pos:end="467:71">(</operator><name pos:start="467:72" pos:end="467:79">uint32_t</name><operator pos:start="467:80" pos:end="467:80">*</operator><operator pos:start="467:81" pos:end="467:81">)</operator><name pos:start="467:82" pos:end="467:100"><name pos:start="467:82" pos:end="467:83">st</name><operator pos:start="467:84" pos:end="467:85">-&gt;</operator><name pos:start="467:86" pos:end="467:90">codec</name><operator pos:start="467:91" pos:end="467:91">.</operator><name pos:start="467:92" pos:end="467:100">extradata</name></name><operator pos:start="467:101" pos:end="467:101">)</operator><index pos:start="467:102" pos:end="467:104">[<expr pos:start="467:103" pos:end="467:103"><name pos:start="467:103" pos:end="467:103">i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else pos:start="469:1" pos:end="469:5">#<cpp:directive pos:start="469:2" pos:end="469:5">else</cpp:directive></cpp:else>

                        <expr_stmt pos:start="471:25" pos:end="476:0"><expr pos:start="471:25" pos:end="473:79"><call pos:start="471:25" pos:end="473:79"><name pos:start="471:25" pos:end="471:30">memcpy</name><argument_list pos:start="471:31" pos:end="473:79">(<argument pos:start="471:32" pos:end="471:57"><expr pos:start="471:32" pos:end="471:57"><name pos:start="471:32" pos:end="471:57"><name pos:start="471:32" pos:end="471:33">st</name><operator pos:start="471:34" pos:end="471:35">-&gt;</operator><name pos:start="471:36" pos:end="471:40">codec</name><operator pos:start="471:41" pos:end="471:41">.</operator><name pos:start="471:42" pos:end="471:48">palctrl</name><operator pos:start="471:49" pos:end="471:50">-&gt;</operator><name pos:start="471:51" pos:end="471:57">palette</name></name></expr></argument>, <argument pos:start="471:60" pos:end="471:78"><expr pos:start="471:60" pos:end="471:78"><name pos:start="471:60" pos:end="471:78"><name pos:start="471:60" pos:end="471:61">st</name><operator pos:start="471:62" pos:end="471:63">-&gt;</operator><name pos:start="471:64" pos:end="471:68">codec</name><operator pos:start="471:69" pos:end="471:69">.</operator><name pos:start="471:70" pos:end="471:78">extradata</name></name></expr></argument>,

                               <argument pos:start="473:32" pos:end="473:78"><expr pos:start="473:32" pos:end="473:78"><call pos:start="473:32" pos:end="473:78"><name pos:start="473:32" pos:end="473:36">FFMIN</name><argument_list pos:start="473:37" pos:end="473:78">(<argument pos:start="473:38" pos:end="473:61"><expr pos:start="473:38" pos:end="473:61"><name pos:start="473:38" pos:end="473:61"><name pos:start="473:38" pos:end="473:39">st</name><operator pos:start="473:40" pos:end="473:41">-&gt;</operator><name pos:start="473:42" pos:end="473:46">codec</name><operator pos:start="473:47" pos:end="473:47">.</operator><name pos:start="473:48" pos:end="473:61">extradata_size</name></name></expr></argument>, <argument pos:start="473:64" pos:end="473:77"><expr pos:start="473:64" pos:end="473:77"><name pos:start="473:64" pos:end="473:77">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="475:1" pos:end="475:6">#<cpp:directive pos:start="475:2" pos:end="475:6">endif</cpp:directive></cpp:endif>

                        <expr_stmt pos:start="477:25" pos:end="477:63"><expr pos:start="477:25" pos:end="477:62"><name pos:start="477:25" pos:end="477:58"><name pos:start="477:25" pos:end="477:26">st</name><operator pos:start="477:27" pos:end="477:28">-&gt;</operator><name pos:start="477:29" pos:end="477:33">codec</name><operator pos:start="477:34" pos:end="477:34">.</operator><name pos:start="477:35" pos:end="477:41">palctrl</name><operator pos:start="477:42" pos:end="477:43">-&gt;</operator><name pos:start="477:44" pos:end="477:58">palette_changed</name></name> <operator pos:start="477:60" pos:end="477:60">=</operator> <literal type="number" pos:start="477:62" pos:end="477:62">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="483:1" pos:end="483:12">#<cpp:directive pos:start="483:2" pos:end="483:6">ifdef</cpp:directive> <name pos:start="483:8" pos:end="483:12">DEBUG</name></cpp:ifdef>

                    <expr_stmt pos:start="485:21" pos:end="488:0"><expr pos:start="485:21" pos:end="485:47"><call pos:start="485:21" pos:end="485:47"><name pos:start="485:21" pos:end="485:29">print_tag</name><argument_list pos:start="485:30" pos:end="485:47">(<argument pos:start="485:31" pos:end="485:37"><expr pos:start="485:31" pos:end="485:37"><literal type="string" pos:start="485:31" pos:end="485:37">"video"</literal></expr></argument>, <argument pos:start="485:40" pos:end="485:43"><expr pos:start="485:40" pos:end="485:43"><name pos:start="485:40" pos:end="485:43">tag1</name></expr></argument>, <argument pos:start="485:46" pos:end="485:46"><expr pos:start="485:46" pos:end="485:46"><literal type="number" pos:start="485:46" pos:end="485:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="487:1" pos:end="487:6">#<cpp:directive pos:start="487:2" pos:end="487:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="489:21" pos:end="489:60"><expr pos:start="489:21" pos:end="489:59"><name pos:start="489:21" pos:end="489:40"><name pos:start="489:21" pos:end="489:22">st</name><operator pos:start="489:23" pos:end="489:24">-&gt;</operator><name pos:start="489:25" pos:end="489:29">codec</name><operator pos:start="489:30" pos:end="489:30">.</operator><name pos:start="489:31" pos:end="489:40">codec_type</name></name> <operator pos:start="489:42" pos:end="489:42">=</operator> <name pos:start="489:44" pos:end="489:59">CODEC_TYPE_VIDEO</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="491:21" pos:end="491:47"><expr pos:start="491:21" pos:end="491:46"><name pos:start="491:21" pos:end="491:39"><name pos:start="491:21" pos:end="491:22">st</name><operator pos:start="491:23" pos:end="491:24">-&gt;</operator><name pos:start="491:25" pos:end="491:29">codec</name><operator pos:start="491:30" pos:end="491:30">.</operator><name pos:start="491:31" pos:end="491:39">codec_tag</name></name> <operator pos:start="491:41" pos:end="491:41">=</operator> <name pos:start="491:43" pos:end="491:46">tag1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="493:21" pos:end="493:76"><expr pos:start="493:21" pos:end="493:75"><name pos:start="493:21" pos:end="493:38"><name pos:start="493:21" pos:end="493:22">st</name><operator pos:start="493:23" pos:end="493:24">-&gt;</operator><name pos:start="493:25" pos:end="493:29">codec</name><operator pos:start="493:30" pos:end="493:30">.</operator><name pos:start="493:31" pos:end="493:38">codec_id</name></name> <operator pos:start="493:40" pos:end="493:40">=</operator> <call pos:start="493:42" pos:end="493:75"><name pos:start="493:42" pos:end="493:53">codec_get_id</name><argument_list pos:start="493:54" pos:end="493:75">(<argument pos:start="493:55" pos:end="493:68"><expr pos:start="493:55" pos:end="493:68"><name pos:start="493:55" pos:end="493:68">codec_bmp_tags</name></expr></argument>, <argument pos:start="493:71" pos:end="493:74"><expr pos:start="493:71" pos:end="493:74"><name pos:start="493:71" pos:end="493:74">tag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="495:21" pos:end="497:38"><if pos:start="495:21" pos:end="497:38">if <condition pos:start="495:24" pos:end="495:63">(<expr pos:start="495:25" pos:end="495:62"><name pos:start="495:25" pos:end="495:42"><name pos:start="495:25" pos:end="495:26">st</name><operator pos:start="495:27" pos:end="495:28">-&gt;</operator><name pos:start="495:29" pos:end="495:33">codec</name><operator pos:start="495:34" pos:end="495:34">.</operator><name pos:start="495:35" pos:end="495:42">codec_id</name></name> <operator pos:start="495:44" pos:end="495:45">==</operator> <name pos:start="495:47" pos:end="495:62">CODEC_ID_XAN_WC4</name></expr>)</condition><block type="pseudo" pos:start="497:25" pos:end="497:38"><block_content pos:start="497:25" pos:end="497:38">

                        <expr_stmt pos:start="497:25" pos:end="497:38"><expr pos:start="497:25" pos:end="497:37"><name pos:start="497:25" pos:end="497:33">xan_video</name> <operator pos:start="497:35" pos:end="497:35">=</operator> <literal type="number" pos:start="497:37" pos:end="497:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="499:1" pos:end="499:50">//                    url_fskip(pb, size - 5 * 4);</comment>

                    <break pos:start="501:21" pos:end="501:26">break;</break>

                <case pos:start="503:17" pos:end="503:38">case <expr pos:start="503:22" pos:end="503:37"><name pos:start="503:22" pos:end="503:37">CODEC_TYPE_AUDIO</name></expr>:</case>

                    <expr_stmt pos:start="505:21" pos:end="505:57"><expr pos:start="505:21" pos:end="505:56"><call pos:start="505:21" pos:end="505:56"><name pos:start="505:21" pos:end="505:34">get_wav_header</name><argument_list pos:start="505:35" pos:end="505:56">(<argument pos:start="505:36" pos:end="505:37"><expr pos:start="505:36" pos:end="505:37"><name pos:start="505:36" pos:end="505:37">pb</name></expr></argument>, <argument pos:start="505:40" pos:end="505:49"><expr pos:start="505:40" pos:end="505:49"><operator pos:start="505:40" pos:end="505:40">&amp;</operator><name pos:start="505:41" pos:end="505:49"><name pos:start="505:41" pos:end="505:42">st</name><operator pos:start="505:43" pos:end="505:44">-&gt;</operator><name pos:start="505:45" pos:end="505:49">codec</name></name></expr></argument>, <argument pos:start="505:52" pos:end="505:55"><expr pos:start="505:52" pos:end="505:55"><name pos:start="505:52" pos:end="505:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="507:21" pos:end="509:41"><if pos:start="507:21" pos:end="509:41">if <condition pos:start="507:24" pos:end="507:31">(<expr pos:start="507:25" pos:end="507:30"><name pos:start="507:25" pos:end="507:28">size</name><operator pos:start="507:29" pos:end="507:29">%</operator><literal type="number" pos:start="507:30" pos:end="507:30">2</literal></expr>)</condition><block type="pseudo" pos:start="509:25" pos:end="509:41"><block_content pos:start="509:25" pos:end="509:41"> <comment type="block" pos:start="507:33" pos:end="507:99">/* 2-aligned (fix for Stargate SG-1 - 3x18 - Shades of Grey.avi) */</comment>

                        <expr_stmt pos:start="509:25" pos:end="509:41"><expr pos:start="509:25" pos:end="509:40"><call pos:start="509:25" pos:end="509:40"><name pos:start="509:25" pos:end="509:33">url_fskip</name><argument_list pos:start="509:34" pos:end="509:40">(<argument pos:start="509:35" pos:end="509:36"><expr pos:start="509:35" pos:end="509:36"><name pos:start="509:35" pos:end="509:36">pb</name></expr></argument>, <argument pos:start="509:39" pos:end="509:39"><expr pos:start="509:39" pos:end="509:39"><literal type="number" pos:start="509:39" pos:end="509:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="511:21" pos:end="513:63">/* special case time: To support Xan DPCM, hardcode

                     * the format if Xxan is the video codec */</comment>

                    <expr_stmt pos:start="515:21" pos:end="515:41"><expr pos:start="515:21" pos:end="515:40"><name pos:start="515:21" pos:end="515:36"><name pos:start="515:21" pos:end="515:22">st</name><operator pos:start="515:23" pos:end="515:24">-&gt;</operator><name pos:start="515:25" pos:end="515:36">need_parsing</name></name> <operator pos:start="515:38" pos:end="515:38">=</operator> <literal type="number" pos:start="515:40" pos:end="515:40">1</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="517:21" pos:end="519:36">/* force parsing as several audio frames can be in

                       one packet */</comment>

                    <if_stmt pos:start="521:21" pos:end="523:63"><if pos:start="521:21" pos:end="523:63">if <condition pos:start="521:24" pos:end="521:34">(<expr pos:start="521:25" pos:end="521:33"><name pos:start="521:25" pos:end="521:33">xan_video</name></expr>)</condition><block type="pseudo" pos:start="523:25" pos:end="523:63"><block_content pos:start="523:25" pos:end="523:63">

                        <expr_stmt pos:start="523:25" pos:end="523:63"><expr pos:start="523:25" pos:end="523:62"><name pos:start="523:25" pos:end="523:42"><name pos:start="523:25" pos:end="523:26">st</name><operator pos:start="523:27" pos:end="523:28">-&gt;</operator><name pos:start="523:29" pos:end="523:33">codec</name><operator pos:start="523:34" pos:end="523:34">.</operator><name pos:start="523:35" pos:end="523:42">codec_id</name></name> <operator pos:start="523:44" pos:end="523:44">=</operator> <name pos:start="523:46" pos:end="523:62">CODEC_ID_XAN_DPCM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="525:21" pos:end="525:26">break;</break>

                <default pos:start="527:17" pos:end="527:24">default:</default>

                    <expr_stmt pos:start="529:21" pos:end="529:59"><expr pos:start="529:21" pos:end="529:58"><name pos:start="529:21" pos:end="529:40"><name pos:start="529:21" pos:end="529:22">st</name><operator pos:start="529:23" pos:end="529:24">-&gt;</operator><name pos:start="529:25" pos:end="529:29">codec</name><operator pos:start="529:30" pos:end="529:30">.</operator><name pos:start="529:31" pos:end="529:40">codec_type</name></name> <operator pos:start="529:42" pos:end="529:42">=</operator> <name pos:start="529:44" pos:end="529:58">CODEC_TYPE_DATA</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="531:21" pos:end="531:54"><expr pos:start="531:21" pos:end="531:53"><name pos:start="531:21" pos:end="531:38"><name pos:start="531:21" pos:end="531:22">st</name><operator pos:start="531:23" pos:end="531:24">-&gt;</operator><name pos:start="531:25" pos:end="531:29">codec</name><operator pos:start="531:30" pos:end="531:30">.</operator><name pos:start="531:31" pos:end="531:38">codec_id</name></name><operator pos:start="531:39" pos:end="531:39">=</operator> <name pos:start="531:41" pos:end="531:53">CODEC_ID_NONE</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="533:21" pos:end="533:43"><expr pos:start="533:21" pos:end="533:42"><name pos:start="533:21" pos:end="533:39"><name pos:start="533:21" pos:end="533:22">st</name><operator pos:start="533:23" pos:end="533:24">-&gt;</operator><name pos:start="533:25" pos:end="533:29">codec</name><operator pos:start="533:30" pos:end="533:30">.</operator><name pos:start="533:31" pos:end="533:39">codec_tag</name></name><operator pos:start="533:40" pos:end="533:40">=</operator> <literal type="number" pos:start="533:42" pos:end="533:42">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="535:21" pos:end="535:40"><expr pos:start="535:21" pos:end="535:39"><call pos:start="535:21" pos:end="535:39"><name pos:start="535:21" pos:end="535:29">url_fskip</name><argument_list pos:start="535:30" pos:end="535:39">(<argument pos:start="535:31" pos:end="535:32"><expr pos:start="535:31" pos:end="535:32"><name pos:start="535:31" pos:end="535:32">pb</name></expr></argument>, <argument pos:start="535:35" pos:end="535:38"><expr pos:start="535:35" pos:end="535:38"><name pos:start="535:35" pos:end="535:38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="537:21" pos:end="537:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="543:13" pos:end="543:18">break;</break>

        <default pos:start="545:9" pos:end="545:16">default:</default>

            <comment type="block" pos:start="547:13" pos:end="547:26">/* skip tag */</comment>

            <expr_stmt pos:start="549:13" pos:end="549:31"><expr pos:start="549:13" pos:end="549:30"><name pos:start="549:13" pos:end="549:16">size</name> <operator pos:start="549:18" pos:end="549:19">+=</operator> <operator pos:start="549:21" pos:end="549:21">(</operator><name pos:start="549:22" pos:end="549:25">size</name> <operator pos:start="549:27" pos:end="549:27">&amp;</operator> <literal type="number" pos:start="549:29" pos:end="549:29">1</literal><operator pos:start="549:30" pos:end="549:30">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="551:13" pos:end="551:32"><expr pos:start="551:13" pos:end="551:31"><call pos:start="551:13" pos:end="551:31"><name pos:start="551:13" pos:end="551:21">url_fskip</name><argument_list pos:start="551:22" pos:end="551:31">(<argument pos:start="551:23" pos:end="551:24"><expr pos:start="551:23" pos:end="551:24"><name pos:start="551:23" pos:end="551:24">pb</name></expr></argument>, <argument pos:start="551:27" pos:end="551:30"><expr pos:start="551:27" pos:end="551:30"><name pos:start="551:27" pos:end="551:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="553:13" pos:end="553:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

 <label pos:start="559:2" pos:end="559:15"><name pos:start="559:2" pos:end="559:14">end_of_header</name>:</label>

    <comment type="block" pos:start="561:5" pos:end="561:29">/* check stream number */</comment>

    <if_stmt pos:start="563:5" pos:end="577:5"><if pos:start="563:5" pos:end="577:5">if <condition pos:start="563:8" pos:end="563:42">(<expr pos:start="563:9" pos:end="563:41"><name pos:start="563:9" pos:end="563:20">stream_index</name> <operator pos:start="563:22" pos:end="563:23">!=</operator> <name pos:start="563:25" pos:end="563:37"><name pos:start="563:25" pos:end="563:25">s</name><operator pos:start="563:26" pos:end="563:27">-&gt;</operator><name pos:start="563:28" pos:end="563:37">nb_streams</name></name> <operator pos:start="563:39" pos:end="563:39">-</operator> <literal type="number" pos:start="563:41" pos:end="563:41">1</literal></expr>)</condition> <block pos:start="563:44" pos:end="577:5">{<block_content pos:start="565:5" pos:end="575:18">

    <label pos:start="565:5" pos:end="565:9"><name pos:start="565:5" pos:end="565:8">fail</name>:</label>

        <for pos:start="567:9" pos:end="573:9">for<control pos:start="567:12" pos:end="567:36">(<init pos:start="567:13" pos:end="567:16"><expr pos:start="567:13" pos:end="567:15"><name pos:start="567:13" pos:end="567:13">i</name><operator pos:start="567:14" pos:end="567:14">=</operator><literal type="number" pos:start="567:15" pos:end="567:15">0</literal></expr>;</init><condition pos:start="567:17" pos:end="567:32"><expr pos:start="567:17" pos:end="567:31"><name pos:start="567:17" pos:end="567:17">i</name><operator pos:start="567:18" pos:end="567:18">&lt;</operator><name pos:start="567:19" pos:end="567:31"><name pos:start="567:19" pos:end="567:19">s</name><operator pos:start="567:20" pos:end="567:21">-&gt;</operator><name pos:start="567:22" pos:end="567:31">nb_streams</name></name></expr>;</condition><incr pos:start="567:33" pos:end="567:35"><expr pos:start="567:33" pos:end="567:35"><name pos:start="567:33" pos:end="567:33">i</name><operator pos:start="567:34" pos:end="567:35">++</operator></expr></incr>)</control> <block pos:start="567:38" pos:end="573:9">{<block_content pos:start="569:13" pos:end="571:37">

            <expr_stmt pos:start="569:13" pos:end="569:54"><expr pos:start="569:13" pos:end="569:53"><call pos:start="569:13" pos:end="569:53"><name pos:start="569:13" pos:end="569:20">av_freep</name><argument_list pos:start="569:21" pos:end="569:53">(<argument pos:start="569:22" pos:end="569:52"><expr pos:start="569:22" pos:end="569:52"><operator pos:start="569:22" pos:end="569:22">&amp;</operator><name pos:start="569:23" pos:end="569:35"><name pos:start="569:23" pos:end="569:23">s</name><operator pos:start="569:24" pos:end="569:25">-&gt;</operator><name pos:start="569:26" pos:end="569:32">streams</name><index pos:start="569:33" pos:end="569:35">[<expr pos:start="569:34" pos:end="569:34"><name pos:start="569:34" pos:end="569:34">i</name></expr>]</index></name><operator pos:start="569:36" pos:end="569:37">-&gt;</operator><name pos:start="569:38" pos:end="569:52"><name pos:start="569:38" pos:end="569:42">codec</name><operator pos:start="569:43" pos:end="569:43">.</operator><name pos:start="569:44" pos:end="569:52">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:37"><expr pos:start="571:13" pos:end="571:36"><call pos:start="571:13" pos:end="571:36"><name pos:start="571:13" pos:end="571:20">av_freep</name><argument_list pos:start="571:21" pos:end="571:36">(<argument pos:start="571:22" pos:end="571:35"><expr pos:start="571:22" pos:end="571:35"><operator pos:start="571:22" pos:end="571:22">&amp;</operator><name pos:start="571:23" pos:end="571:35"><name pos:start="571:23" pos:end="571:23">s</name><operator pos:start="571:24" pos:end="571:25">-&gt;</operator><name pos:start="571:26" pos:end="571:32">streams</name><index pos:start="571:33" pos:end="571:35">[<expr pos:start="571:34" pos:end="571:34"><name pos:start="571:34" pos:end="571:34">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <return pos:start="575:9" pos:end="575:18">return <expr pos:start="575:16" pos:end="575:17"><operator pos:start="575:16" pos:end="575:16">-</operator><literal type="number" pos:start="575:17" pos:end="575:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="581:5" pos:end="581:31"><expr pos:start="581:5" pos:end="581:30"><call pos:start="581:5" pos:end="581:30"><name pos:start="581:5" pos:end="581:10">assert</name><argument_list pos:start="581:11" pos:end="581:30">(<argument pos:start="581:12" pos:end="581:29"><expr pos:start="581:12" pos:end="581:29"><operator pos:start="581:12" pos:end="581:12">!</operator><name pos:start="581:13" pos:end="581:29"><name pos:start="581:13" pos:end="581:15">avi</name><operator pos:start="581:16" pos:end="581:17">-&gt;</operator><name pos:start="581:18" pos:end="581:29">index_loaded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="583:5" pos:end="583:22"><expr pos:start="583:5" pos:end="583:21"><call pos:start="583:5" pos:end="583:21"><name pos:start="583:5" pos:end="583:18">avi_load_index</name><argument_list pos:start="583:19" pos:end="583:21">(<argument pos:start="583:20" pos:end="583:20"><expr pos:start="583:20" pos:end="583:20"><name pos:start="583:20" pos:end="583:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="585:5" pos:end="585:26"><expr pos:start="585:5" pos:end="585:25"><name pos:start="585:5" pos:end="585:21"><name pos:start="585:5" pos:end="585:7">avi</name><operator pos:start="585:8" pos:end="585:9">-&gt;</operator><name pos:start="585:10" pos:end="585:21">index_loaded</name></name> <operator pos:start="585:23" pos:end="585:23">=</operator> <literal type="number" pos:start="585:25" pos:end="585:25">1</literal></expr>;</expr_stmt>

 

    <return pos:start="589:5" pos:end="589:13">return <expr pos:start="589:12" pos:end="589:12"><literal type="number" pos:start="589:12" pos:end="589:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
