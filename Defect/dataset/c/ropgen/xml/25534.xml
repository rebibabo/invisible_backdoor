<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25534.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">put_pixels16_altivec</name><parameter_list pos:start="1:26" pos:end="1:86">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:33">uint8_t</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:40">block</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:63"><decl pos:start="1:43" pos:end="1:63"><type pos:start="1:43" pos:end="1:63"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:63">pixels</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:78">line_size</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:85"><decl pos:start="1:81" pos:end="1:85"><type pos:start="1:81" pos:end="1:85"><name pos:start="1:81" pos:end="1:83">int</name></type> <name pos:start="1:85" pos:end="1:85">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:1" pos:end="76:0">

<expr_stmt pos:start="5:1" pos:end="8:0"><expr pos:start="5:1" pos:end="5:48"><call pos:start="5:1" pos:end="5:48"><name pos:start="5:1" pos:end="5:19">POWERPC_TBL_DECLARE</name><argument_list pos:start="5:20" pos:end="5:48">(<argument pos:start="5:21" pos:end="5:44"><expr pos:start="5:21" pos:end="5:44"><name pos:start="5:21" pos:end="5:44">altivec_put_pixels16_num</name></expr></argument>, <argument pos:start="5:47" pos:end="5:47"><expr pos:start="5:47" pos:end="5:47"><literal type="number" pos:start="5:47" pos:end="5:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:35">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:35">ALTIVEC_USE_REFERENCE_C_CODE</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



<expr_stmt pos:start="13:1" pos:end="13:53"><expr pos:start="13:1" pos:end="13:52"><call pos:start="13:1" pos:end="13:52"><name pos:start="13:1" pos:end="13:23">POWERPC_TBL_START_COUNT</name><argument_list pos:start="13:24" pos:end="13:52">(<argument pos:start="13:25" pos:end="13:48"><expr pos:start="13:25" pos:end="13:48"><name pos:start="13:25" pos:end="13:48">altivec_put_pixels16_num</name></expr></argument>, <argument pos:start="13:51" pos:end="13:51"><expr pos:start="13:51" pos:end="13:51"><literal type="number" pos:start="13:51" pos:end="13:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="17:5" pos:end="31:5">for<control pos:start="17:8" pos:end="17:22">(<init pos:start="17:9" pos:end="17:12"><expr pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:9">i</name><operator pos:start="17:10" pos:end="17:10">=</operator><literal type="number" pos:start="17:11" pos:end="17:11">0</literal></expr>;</init> <condition pos:start="17:14" pos:end="17:17"><expr pos:start="17:14" pos:end="17:16"><name pos:start="17:14" pos:end="17:14">i</name><operator pos:start="17:15" pos:end="17:15">&lt;</operator><name pos:start="17:16" pos:end="17:16">h</name></expr>;</condition> <incr pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><name pos:start="17:19" pos:end="17:19">i</name><operator pos:start="17:20" pos:end="17:21">++</operator></expr></incr>)</control> <block pos:start="17:24" pos:end="31:5">{<block_content pos:start="19:7" pos:end="29:24">

      <expr_stmt pos:start="19:7" pos:end="19:77"><expr pos:start="19:7" pos:end="19:76"><operator pos:start="19:7" pos:end="19:7">*</operator><operator pos:start="19:8" pos:end="19:8">(</operator><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:17">uint32_t</name><operator pos:start="19:18" pos:end="19:18">*</operator><operator pos:start="19:19" pos:end="19:19">)</operator><operator pos:start="19:20" pos:end="19:20">(</operator><name pos:start="19:21" pos:end="19:25">block</name> <operator pos:start="19:27" pos:end="19:27">)</operator><operator pos:start="19:28" pos:end="19:28">)</operator> <operator pos:start="19:30" pos:end="19:30">=</operator> <operator pos:start="19:32" pos:end="19:32">(</operator><operator pos:start="19:33" pos:end="19:33">(</operator><operator pos:start="19:34" pos:end="19:34">(</operator><specifier pos:start="19:35" pos:end="19:39">const</specifier> struct <name pos:start="19:48" pos:end="19:59">unaligned_32</name> <operator pos:start="19:61" pos:end="19:61">*</operator><operator pos:start="19:62" pos:end="19:62">)</operator> <operator pos:start="19:64" pos:end="19:64">(</operator><name pos:start="19:65" pos:end="19:70">pixels</name><operator pos:start="19:71" pos:end="19:71">)</operator><operator pos:start="19:72" pos:end="19:72">)</operator><operator pos:start="19:73" pos:end="19:74">-&gt;</operator><name pos:start="19:75" pos:end="19:75">l</name><operator pos:start="19:76" pos:end="19:76">)</operator></expr>;</expr_stmt>

      <expr_stmt pos:start="21:7" pos:end="21:80"><expr pos:start="21:7" pos:end="21:79"><operator pos:start="21:7" pos:end="21:7">*</operator><operator pos:start="21:8" pos:end="21:8">(</operator><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:17">uint32_t</name><operator pos:start="21:18" pos:end="21:18">*</operator><operator pos:start="21:19" pos:end="21:19">)</operator><operator pos:start="21:20" pos:end="21:20">(</operator><name pos:start="21:21" pos:end="21:25">block</name><operator pos:start="21:26" pos:end="21:26">+</operator><literal type="number" pos:start="21:27" pos:end="21:27">4</literal><operator pos:start="21:28" pos:end="21:28">)</operator><operator pos:start="21:29" pos:end="21:29">)</operator> <operator pos:start="21:31" pos:end="21:31">=</operator> <operator pos:start="21:33" pos:end="21:33">(</operator><operator pos:start="21:34" pos:end="21:34">(</operator><operator pos:start="21:35" pos:end="21:35">(</operator><specifier pos:start="21:36" pos:end="21:40">const</specifier> struct <name pos:start="21:49" pos:end="21:60">unaligned_32</name> <operator pos:start="21:62" pos:end="21:62">*</operator><operator pos:start="21:63" pos:end="21:63">)</operator> <operator pos:start="21:65" pos:end="21:65">(</operator><name pos:start="21:66" pos:end="21:71">pixels</name><operator pos:start="21:72" pos:end="21:72">+</operator><literal type="number" pos:start="21:73" pos:end="21:73">4</literal><operator pos:start="21:74" pos:end="21:74">)</operator><operator pos:start="21:75" pos:end="21:75">)</operator><operator pos:start="21:76" pos:end="21:77">-&gt;</operator><name pos:start="21:78" pos:end="21:78">l</name><operator pos:start="21:79" pos:end="21:79">)</operator></expr>;</expr_stmt>

      <expr_stmt pos:start="23:7" pos:end="23:80"><expr pos:start="23:7" pos:end="23:79"><operator pos:start="23:7" pos:end="23:7">*</operator><operator pos:start="23:8" pos:end="23:8">(</operator><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:17">uint32_t</name><operator pos:start="23:18" pos:end="23:18">*</operator><operator pos:start="23:19" pos:end="23:19">)</operator><operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:25">block</name><operator pos:start="23:26" pos:end="23:26">+</operator><literal type="number" pos:start="23:27" pos:end="23:27">8</literal><operator pos:start="23:28" pos:end="23:28">)</operator><operator pos:start="23:29" pos:end="23:29">)</operator> <operator pos:start="23:31" pos:end="23:31">=</operator> <operator pos:start="23:33" pos:end="23:33">(</operator><operator pos:start="23:34" pos:end="23:34">(</operator><operator pos:start="23:35" pos:end="23:35">(</operator><specifier pos:start="23:36" pos:end="23:40">const</specifier> struct <name pos:start="23:49" pos:end="23:60">unaligned_32</name> <operator pos:start="23:62" pos:end="23:62">*</operator><operator pos:start="23:63" pos:end="23:63">)</operator> <operator pos:start="23:65" pos:end="23:65">(</operator><name pos:start="23:66" pos:end="23:71">pixels</name><operator pos:start="23:72" pos:end="23:72">+</operator><literal type="number" pos:start="23:73" pos:end="23:73">8</literal><operator pos:start="23:74" pos:end="23:74">)</operator><operator pos:start="23:75" pos:end="23:75">)</operator><operator pos:start="23:76" pos:end="23:77">-&gt;</operator><name pos:start="23:78" pos:end="23:78">l</name><operator pos:start="23:79" pos:end="23:79">)</operator></expr>;</expr_stmt>

      <expr_stmt pos:start="25:7" pos:end="25:82"><expr pos:start="25:7" pos:end="25:81"><operator pos:start="25:7" pos:end="25:7">*</operator><operator pos:start="25:8" pos:end="25:8">(</operator><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:17">uint32_t</name><operator pos:start="25:18" pos:end="25:18">*</operator><operator pos:start="25:19" pos:end="25:19">)</operator><operator pos:start="25:20" pos:end="25:20">(</operator><name pos:start="25:21" pos:end="25:25">block</name><operator pos:start="25:26" pos:end="25:26">+</operator><literal type="number" pos:start="25:27" pos:end="25:28">12</literal><operator pos:start="25:29" pos:end="25:29">)</operator><operator pos:start="25:30" pos:end="25:30">)</operator> <operator pos:start="25:32" pos:end="25:32">=</operator> <operator pos:start="25:34" pos:end="25:34">(</operator><operator pos:start="25:35" pos:end="25:35">(</operator><operator pos:start="25:36" pos:end="25:36">(</operator><specifier pos:start="25:37" pos:end="25:41">const</specifier> struct <name pos:start="25:50" pos:end="25:61">unaligned_32</name> <operator pos:start="25:63" pos:end="25:63">*</operator><operator pos:start="25:64" pos:end="25:64">)</operator> <operator pos:start="25:66" pos:end="25:66">(</operator><name pos:start="25:67" pos:end="25:72">pixels</name><operator pos:start="25:73" pos:end="25:73">+</operator><literal type="number" pos:start="25:74" pos:end="25:75">12</literal><operator pos:start="25:76" pos:end="25:76">)</operator><operator pos:start="25:77" pos:end="25:77">)</operator><operator pos:start="25:78" pos:end="25:79">-&gt;</operator><name pos:start="25:80" pos:end="25:80">l</name><operator pos:start="25:81" pos:end="25:81">)</operator></expr>;</expr_stmt>

      <expr_stmt pos:start="27:7" pos:end="27:24"><expr pos:start="27:7" pos:end="27:23"><name pos:start="27:7" pos:end="27:12">pixels</name><operator pos:start="27:13" pos:end="27:14">+=</operator><name pos:start="27:15" pos:end="27:23">line_size</name></expr>;</expr_stmt>

      <expr_stmt pos:start="29:7" pos:end="29:24"><expr pos:start="29:7" pos:end="29:23"><name pos:start="29:7" pos:end="29:11">block</name> <operator pos:start="29:13" pos:end="29:14">+=</operator><name pos:start="29:15" pos:end="29:23">line_size</name></expr>;</expr_stmt>

    </block_content>}</block></for>



<expr_stmt pos:start="35:1" pos:end="40:0"><expr pos:start="35:1" pos:end="35:51"><call pos:start="35:1" pos:end="35:51"><name pos:start="35:1" pos:end="35:22">POWERPC_TBL_STOP_COUNT</name><argument_list pos:start="35:23" pos:end="35:51">(<argument pos:start="35:24" pos:end="35:47"><expr pos:start="35:24" pos:end="35:47"><name pos:start="35:24" pos:end="35:47">altivec_put_pixels16_num</name></expr></argument>, <argument pos:start="35:50" pos:end="35:50"><expr pos:start="35:50" pos:end="35:50"><literal type="number" pos:start="35:50" pos:end="35:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="39:7" pos:end="39:40">/* ALTIVEC_USE_REFERENCE_C_CODE */</comment>

    <decl_stmt pos:start="41:5" pos:end="41:53"><decl pos:start="41:5" pos:end="41:42"><type pos:start="41:5" pos:end="41:33"><specifier pos:start="41:5" pos:end="41:12">register</specifier> <name pos:start="41:14" pos:end="41:19">vector</name> <name pos:start="41:21" pos:end="41:28">unsigned</name> <name pos:start="41:30" pos:end="41:33">char</name></type> <name pos:start="41:35" pos:end="41:42">pixelsv1</name></decl>, <decl pos:start="41:45" pos:end="41:52"><type ref="prev" pos:start="41:5" pos:end="41:33"/><name pos:start="41:45" pos:end="41:52">pixelsv2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:61"><decl pos:start="43:5" pos:end="43:60"><type pos:start="43:5" pos:end="43:33"><specifier pos:start="43:5" pos:end="43:12">register</specifier> <name pos:start="43:14" pos:end="43:19">vector</name> <name pos:start="43:21" pos:end="43:28">unsigned</name> <name pos:start="43:30" pos:end="43:33">char</name></type> <name pos:start="43:35" pos:end="43:38">perm</name> <init pos:start="43:40" pos:end="43:60">= <expr pos:start="43:42" pos:end="43:60"><call pos:start="43:42" pos:end="43:60"><name pos:start="43:42" pos:end="43:49">vec_lvsl</name><argument_list pos:start="43:50" pos:end="43:60">(<argument pos:start="43:51" pos:end="43:51"><expr pos:start="43:51" pos:end="43:51"><literal type="number" pos:start="43:51" pos:end="43:51">0</literal></expr></argument>, <argument pos:start="43:54" pos:end="43:59"><expr pos:start="43:54" pos:end="43:59"><name pos:start="43:54" pos:end="43:59">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:10"><decl pos:start="45:5" pos:end="45:9"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:9">i</name></decl>;</decl_stmt>



<expr_stmt pos:start="49:1" pos:end="49:53"><expr pos:start="49:1" pos:end="49:52"><call pos:start="49:1" pos:end="49:52"><name pos:start="49:1" pos:end="49:23">POWERPC_TBL_START_COUNT</name><argument_list pos:start="49:24" pos:end="49:52">(<argument pos:start="49:25" pos:end="49:48"><expr pos:start="49:25" pos:end="49:48"><name pos:start="49:25" pos:end="49:48">altivec_put_pixels16_num</name></expr></argument>, <argument pos:start="49:51" pos:end="49:51"><expr pos:start="49:51" pos:end="49:51"><literal type="number" pos:start="49:51" pos:end="49:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="53:5" pos:end="67:5">for<control pos:start="53:8" pos:end="53:22">(<init pos:start="53:9" pos:end="53:12"><expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:9">i</name><operator pos:start="53:10" pos:end="53:10">=</operator><literal type="number" pos:start="53:11" pos:end="53:11">0</literal></expr>;</init> <condition pos:start="53:14" pos:end="53:17"><expr pos:start="53:14" pos:end="53:16"><name pos:start="53:14" pos:end="53:14">i</name><operator pos:start="53:15" pos:end="53:15">&lt;</operator><name pos:start="53:16" pos:end="53:16">h</name></expr>;</condition> <incr pos:start="53:19" pos:end="53:21"><expr pos:start="53:19" pos:end="53:21"><name pos:start="53:19" pos:end="53:19">i</name><operator pos:start="53:20" pos:end="53:21">++</operator></expr></incr>)</control> <block pos:start="53:24" pos:end="67:5">{<block_content pos:start="55:7" pos:end="65:24">

      <expr_stmt pos:start="55:7" pos:end="55:51"><expr pos:start="55:7" pos:end="55:50"><name pos:start="55:7" pos:end="55:14">pixelsv1</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:50"><name pos:start="55:18" pos:end="55:23">vec_ld</name><argument_list pos:start="55:24" pos:end="55:50">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr></argument>, <argument pos:start="55:28" pos:end="55:49"><expr pos:start="55:28" pos:end="55:49"><operator pos:start="55:28" pos:end="55:28">(</operator><name pos:start="55:29" pos:end="55:36">unsigned</name> <name pos:start="55:38" pos:end="55:41">char</name><operator pos:start="55:42" pos:end="55:42">*</operator><operator pos:start="55:43" pos:end="55:43">)</operator><name pos:start="55:44" pos:end="55:49">pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="57:7" pos:end="57:52"><expr pos:start="57:7" pos:end="57:51"><name pos:start="57:7" pos:end="57:14">pixelsv2</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:51"><name pos:start="57:18" pos:end="57:23">vec_ld</name><argument_list pos:start="57:24" pos:end="57:51">(<argument pos:start="57:25" pos:end="57:26"><expr pos:start="57:25" pos:end="57:26"><literal type="number" pos:start="57:25" pos:end="57:26">16</literal></expr></argument>, <argument pos:start="57:29" pos:end="57:50"><expr pos:start="57:29" pos:end="57:50"><operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:37">unsigned</name> <name pos:start="57:39" pos:end="57:42">char</name><operator pos:start="57:43" pos:end="57:43">*</operator><operator pos:start="57:44" pos:end="57:44">)</operator><name pos:start="57:45" pos:end="57:50">pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="59:7" pos:end="61:39"><expr pos:start="59:7" pos:end="61:38"><call pos:start="59:7" pos:end="61:38"><name pos:start="59:7" pos:end="59:12">vec_st</name><argument_list pos:start="59:13" pos:end="61:38">(<argument pos:start="59:14" pos:end="59:47"><expr pos:start="59:14" pos:end="59:47"><call pos:start="59:14" pos:end="59:47"><name pos:start="59:14" pos:end="59:21">vec_perm</name><argument_list pos:start="59:22" pos:end="59:47">(<argument pos:start="59:23" pos:end="59:30"><expr pos:start="59:23" pos:end="59:30"><name pos:start="59:23" pos:end="59:30">pixelsv1</name></expr></argument>, <argument pos:start="59:33" pos:end="59:40"><expr pos:start="59:33" pos:end="59:40"><name pos:start="59:33" pos:end="59:40">pixelsv2</name></expr></argument>, <argument pos:start="59:43" pos:end="59:46"><expr pos:start="59:43" pos:end="59:46"><name pos:start="59:43" pos:end="59:46">perm</name></expr></argument>)</argument_list></call></expr></argument>,

             <argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr></argument>, <argument pos:start="61:17" pos:end="61:37"><expr pos:start="61:17" pos:end="61:37"><operator pos:start="61:17" pos:end="61:17">(</operator><name pos:start="61:18" pos:end="61:25">unsigned</name> <name pos:start="61:27" pos:end="61:30">char</name><operator pos:start="61:31" pos:end="61:31">*</operator><operator pos:start="61:32" pos:end="61:32">)</operator><name pos:start="61:33" pos:end="61:37">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="63:7" pos:end="63:24"><expr pos:start="63:7" pos:end="63:23"><name pos:start="63:7" pos:end="63:12">pixels</name><operator pos:start="63:13" pos:end="63:14">+=</operator><name pos:start="63:15" pos:end="63:23">line_size</name></expr>;</expr_stmt>

      <expr_stmt pos:start="65:7" pos:end="65:24"><expr pos:start="65:7" pos:end="65:23"><name pos:start="65:7" pos:end="65:11">block</name> <operator pos:start="65:13" pos:end="65:14">+=</operator><name pos:start="65:15" pos:end="65:23">line_size</name></expr>;</expr_stmt>

    </block_content>}</block></for>



<expr_stmt pos:start="71:1" pos:end="76:0"><expr pos:start="71:1" pos:end="71:51"><call pos:start="71:1" pos:end="71:51"><name pos:start="71:1" pos:end="71:22">POWERPC_TBL_STOP_COUNT</name><argument_list pos:start="71:23" pos:end="71:51">(<argument pos:start="71:24" pos:end="71:47"><expr pos:start="71:24" pos:end="71:47"><name pos:start="71:24" pos:end="71:47">altivec_put_pixels16_num</name></expr></argument>, <argument pos:start="71:50" pos:end="71:50"><expr pos:start="71:50" pos:end="71:50"><literal type="number" pos:start="71:50" pos:end="71:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="75:8" pos:end="75:41">/* ALTIVEC_USE_REFERENCE_C_CODE */</comment>

</block_content>}</block></function>
</unit>
