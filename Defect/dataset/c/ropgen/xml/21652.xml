<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21652.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">xen_pt_msix_init</name><parameter_list pos:start="1:21" pos:end="1:62">(<parameter pos:start="1:22" pos:end="1:46"><decl pos:start="1:22" pos:end="1:46"><type pos:start="1:22" pos:end="1:46"><name pos:start="1:22" pos:end="1:43">XenPCIPassthroughState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">uint32_t</name></type> <name pos:start="1:58" pos:end="1:61">base</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:5" pos:end="169:14">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:14">id</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:20">control</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:22">table_off</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:24">total_entries</name></decl>, <decl pos:start="11:27" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:27" pos:end="11:35">bar_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">XenHostPCIDevice</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:24">hd</name> <init pos:start="13:26" pos:end="13:42">= <expr pos:start="13:28" pos:end="13:42"><operator pos:start="13:28" pos:end="13:28">&amp;</operator><name pos:start="13:29" pos:end="13:42"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:42">real_device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">PCIDevice</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:16">d</name> <init pos:start="15:18" pos:end="15:26">= <expr pos:start="15:20" pos:end="15:26"><operator pos:start="15:20" pos:end="15:20">&amp;</operator><name pos:start="15:21" pos:end="15:26"><name pos:start="15:21" pos:end="15:21">s</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:26">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">fd</name> <init pos:start="17:12" pos:end="17:15">= <expr pos:start="17:14" pos:end="17:15"><operator pos:start="17:14" pos:end="17:14">-</operator><literal type="number" pos:start="17:15" pos:end="17:15">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">XenPTMSIX</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:19">msix</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">rc</name> <init pos:start="21:12" pos:end="21:14">= <expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:64"><expr pos:start="25:5" pos:end="25:63"><name pos:start="25:5" pos:end="25:6">rc</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:63"><name pos:start="25:10" pos:end="25:30">xen_host_pci_get_byte</name><argument_list pos:start="25:31" pos:end="25:63">(<argument pos:start="25:32" pos:end="25:33"><expr pos:start="25:32" pos:end="25:33"><name pos:start="25:32" pos:end="25:33">hd</name></expr></argument>, <argument pos:start="25:36" pos:end="25:57"><expr pos:start="25:36" pos:end="25:57"><name pos:start="25:36" pos:end="25:39">base</name> <operator pos:start="25:41" pos:end="25:41">+</operator> <name pos:start="25:43" pos:end="25:57">PCI_CAP_LIST_ID</name></expr></argument>, <argument pos:start="25:60" pos:end="25:62"><expr pos:start="25:60" pos:end="25:62"><operator pos:start="25:60" pos:end="25:60">&amp;</operator><name pos:start="25:61" pos:end="25:62">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:11">(<expr pos:start="27:9" pos:end="27:10"><name pos:start="27:9" pos:end="27:10">rc</name></expr>)</condition> <block pos:start="27:13" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><name pos:start="29:16" pos:end="29:17">rc</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:30">(<expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:10">id</name> <operator pos:start="35:12" pos:end="35:13">!=</operator> <name pos:start="35:15" pos:end="35:29">PCI_CAP_ID_MSIX</name></expr>)</condition> <block pos:start="35:32" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:18">XEN_PT_ERR</name><argument_list pos:start="37:19" pos:end="37:60">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">d</name></expr></argument>, <argument pos:start="37:23" pos:end="37:49"><expr pos:start="37:23" pos:end="37:49"><literal type="string" pos:start="37:23" pos:end="37:49">"Invalid id %#x base %#x\n"</literal></expr></argument>, <argument pos:start="37:52" pos:end="37:53"><expr pos:start="37:52" pos:end="37:53"><name pos:start="37:52" pos:end="37:53">id</name></expr></argument>, <argument pos:start="37:56" pos:end="37:59"><expr pos:start="37:56" pos:end="37:59"><name pos:start="37:56" pos:end="37:59">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:63"><expr pos:start="45:5" pos:end="45:62"><call pos:start="45:5" pos:end="45:62"><name pos:start="45:5" pos:end="45:25">xen_host_pci_get_word</name><argument_list pos:start="45:26" pos:end="45:62">(<argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">hd</name></expr></argument>, <argument pos:start="45:31" pos:end="45:51"><expr pos:start="45:31" pos:end="45:51"><name pos:start="45:31" pos:end="45:34">base</name> <operator pos:start="45:36" pos:end="45:36">+</operator> <name pos:start="45:38" pos:end="45:51">PCI_MSIX_FLAGS</name></expr></argument>, <argument pos:start="45:54" pos:end="45:61"><expr pos:start="45:54" pos:end="45:61"><operator pos:start="45:54" pos:end="45:54">&amp;</operator><name pos:start="45:55" pos:end="45:61">control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:17">total_entries</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:27">control</name> <operator pos:start="47:29" pos:end="47:29">&amp;</operator> <name pos:start="47:31" pos:end="47:50">PCI_MSIX_FLAGS_QSIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:17">total_entries</name> <operator pos:start="49:19" pos:end="49:20">+=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="55:67"><expr pos:start="53:5" pos:end="55:66"><name pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:11">msix</name></name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="55:66"><name pos:start="53:15" pos:end="53:23">g_malloc0</name><argument_list pos:start="53:24" pos:end="55:66">(<argument pos:start="53:25" pos:end="55:65"><expr pos:start="53:25" pos:end="55:65"><sizeof pos:start="53:25" pos:end="53:42">sizeof <argument_list pos:start="53:32" pos:end="53:42">(<argument pos:start="53:33" pos:end="53:41"><expr pos:start="53:33" pos:end="53:41"><name pos:start="53:33" pos:end="53:41">XenPTMSIX</name></expr></argument>)</argument_list></sizeof>

                        <operator pos:start="55:25" pos:end="55:25">+</operator> <name pos:start="55:27" pos:end="55:39">total_entries</name> <operator pos:start="55:41" pos:end="55:41">*</operator> <sizeof pos:start="55:43" pos:end="55:65">sizeof <argument_list pos:start="55:50" pos:end="55:65">(<argument pos:start="55:51" pos:end="55:64"><expr pos:start="55:51" pos:end="55:64"><name pos:start="55:51" pos:end="55:64">XenPTMSIXEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:19"><expr pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:8">msix</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <name pos:start="57:12" pos:end="57:18"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:18">msix</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:40"><expr pos:start="61:5" pos:end="61:39"><name pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:8">msix</name><operator pos:start="61:9" pos:end="61:10">-&gt;</operator><name pos:start="61:11" pos:end="61:23">total_entries</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <name pos:start="61:27" pos:end="61:39">total_entries</name></expr>;</expr_stmt>

    <for pos:start="63:5" pos:end="67:5">for <control pos:start="63:9" pos:end="63:39">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:34"><expr pos:start="63:17" pos:end="63:33"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:33">total_entries</name></expr>;</condition> <incr pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:36">i</name><operator pos:start="63:37" pos:end="63:38">++</operator></expr></incr>)</control> <block pos:start="63:41" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:58">

        <expr_stmt pos:start="65:9" pos:end="65:58"><expr pos:start="65:9" pos:end="65:57"><name pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:12">msix</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:24">msix_entry</name><index pos:start="65:25" pos:end="65:27">[<expr pos:start="65:26" pos:end="65:26"><name pos:start="65:26" pos:end="65:26">i</name></expr>]</index></name><operator pos:start="65:28" pos:end="65:28">.</operator><name pos:start="65:29" pos:end="65:32">pirq</name> <operator pos:start="65:34" pos:end="65:34">=</operator> <name pos:start="65:36" pos:end="65:57">XEN_PT_UNASSIGNED_PIRQ</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="71:5" pos:end="79:42"><expr pos:start="71:5" pos:end="79:41"><call pos:start="71:5" pos:end="79:41"><name pos:start="71:5" pos:end="71:25">memory_region_init_io</name><argument_list pos:start="71:26" pos:end="79:41">(<argument pos:start="71:27" pos:end="71:37"><expr pos:start="71:27" pos:end="71:37"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:37"><name pos:start="71:28" pos:end="71:31">msix</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:37">mmio</name></name></expr></argument>, <argument pos:start="71:40" pos:end="71:48"><expr pos:start="71:40" pos:end="71:48"><call pos:start="71:40" pos:end="71:48"><name pos:start="71:40" pos:end="71:45">OBJECT</name><argument_list pos:start="71:46" pos:end="71:48">(<argument pos:start="71:47" pos:end="71:47"><expr pos:start="71:47" pos:end="71:47"><name pos:start="71:47" pos:end="71:47">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:51" pos:end="71:63"><expr pos:start="71:51" pos:end="71:63"><operator pos:start="71:51" pos:end="71:51">&amp;</operator><name pos:start="71:52" pos:end="71:63">pci_msix_ops</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:27"><expr pos:start="73:27" pos:end="73:27"><name pos:start="73:27" pos:end="73:27">s</name></expr></argument>, <argument pos:start="73:30" pos:end="73:46"><expr pos:start="73:30" pos:end="73:46"><literal type="string" pos:start="73:30" pos:end="73:46">"xen-pci-pt-msix"</literal></expr></argument>,

                          <argument pos:start="75:27" pos:end="79:40"><expr pos:start="75:27" pos:end="79:40"><operator pos:start="75:27" pos:end="75:27">(</operator><name pos:start="75:28" pos:end="75:40">total_entries</name> <operator pos:start="75:42" pos:end="75:42">*</operator> <name pos:start="75:44" pos:end="75:62">PCI_MSIX_ENTRY_SIZE</name>

                           <operator pos:start="77:28" pos:end="77:28">+</operator> <name pos:start="77:30" pos:end="77:41">XC_PAGE_SIZE</name> <operator pos:start="77:43" pos:end="77:43">-</operator> <literal type="number" pos:start="77:45" pos:end="77:45">1</literal><operator pos:start="77:46" pos:end="77:46">)</operator>

                          <operator pos:start="79:27" pos:end="79:27">&amp;</operator> <name pos:start="79:29" pos:end="79:40">XC_PAGE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:65"><expr pos:start="83:5" pos:end="83:64"><call pos:start="83:5" pos:end="83:64"><name pos:start="83:5" pos:end="83:25">xen_host_pci_get_long</name><argument_list pos:start="83:26" pos:end="83:64">(<argument pos:start="83:27" pos:end="83:28"><expr pos:start="83:27" pos:end="83:28"><name pos:start="83:27" pos:end="83:28">hd</name></expr></argument>, <argument pos:start="83:31" pos:end="83:51"><expr pos:start="83:31" pos:end="83:51"><name pos:start="83:31" pos:end="83:34">base</name> <operator pos:start="83:36" pos:end="83:36">+</operator> <name pos:start="83:38" pos:end="83:51">PCI_MSIX_TABLE</name></expr></argument>, <argument pos:start="83:54" pos:end="83:63"><expr pos:start="83:54" pos:end="83:63"><operator pos:start="83:54" pos:end="83:54">&amp;</operator><name pos:start="83:55" pos:end="83:63">table_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:69"><expr pos:start="85:5" pos:end="85:68"><name pos:start="85:5" pos:end="85:13">bar_index</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:31"><name pos:start="85:17" pos:end="85:20">msix</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:31">bar_index</name></name> <operator pos:start="85:33" pos:end="85:33">=</operator> <name pos:start="85:35" pos:end="85:43">table_off</name> <operator pos:start="85:45" pos:end="85:45">&amp;</operator> <name pos:start="85:47" pos:end="85:68">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:52"><expr pos:start="87:5" pos:end="87:51"><name pos:start="87:5" pos:end="87:13">table_off</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:25">table_off</name> <operator pos:start="87:27" pos:end="87:27">&amp;</operator> <operator pos:start="87:29" pos:end="87:29">~</operator><name pos:start="87:30" pos:end="87:51">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:70"><expr pos:start="89:5" pos:end="89:69"><name pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:8">msix</name><operator pos:start="89:9" pos:end="89:10">-&gt;</operator><name pos:start="89:11" pos:end="89:20">table_base</name></name> <operator pos:start="89:22" pos:end="89:22">=</operator> <name pos:start="89:24" pos:end="89:59"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:37">real_device</name><operator pos:start="89:38" pos:end="89:38">.</operator><name pos:start="89:39" pos:end="89:48">io_regions</name><index pos:start="89:49" pos:end="89:59">[<expr pos:start="89:50" pos:end="89:58"><name pos:start="89:50" pos:end="89:58">bar_index</name></expr>]</index></name><operator pos:start="89:60" pos:end="89:60">.</operator><name pos:start="89:61" pos:end="89:69">base_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:78"><expr pos:start="91:5" pos:end="91:77"><call pos:start="91:5" pos:end="91:77"><name pos:start="91:5" pos:end="91:14">XEN_PT_LOG</name><argument_list pos:start="91:15" pos:end="91:77">(<argument pos:start="91:16" pos:end="91:16"><expr pos:start="91:16" pos:end="91:16"><name pos:start="91:16" pos:end="91:16">d</name></expr></argument>, <argument pos:start="91:19" pos:end="91:58"><expr pos:start="91:19" pos:end="91:58"><literal type="string" pos:start="91:19" pos:end="91:48">"get MSI-X table BAR base 0x%"</literal><name pos:start="91:49" pos:end="91:54">PRIx64</name><literal type="string" pos:start="91:55" pos:end="91:58">"\n"</literal></expr></argument>, <argument pos:start="91:61" pos:end="91:76"><expr pos:start="91:61" pos:end="91:76"><name pos:start="91:61" pos:end="91:76"><name pos:start="91:61" pos:end="91:64">msix</name><operator pos:start="91:65" pos:end="91:66">-&gt;</operator><name pos:start="91:67" pos:end="91:76">table_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:34"><expr pos:start="95:5" pos:end="95:33"><name pos:start="95:5" pos:end="95:6">fd</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <call pos:start="95:10" pos:end="95:33"><name pos:start="95:10" pos:end="95:13">open</name><argument_list pos:start="95:14" pos:end="95:33">(<argument pos:start="95:15" pos:end="95:24"><expr pos:start="95:15" pos:end="95:24"><literal type="string" pos:start="95:15" pos:end="95:24">"/dev/mem"</literal></expr></argument>, <argument pos:start="95:27" pos:end="95:32"><expr pos:start="95:27" pos:end="95:32"><name pos:start="95:27" pos:end="95:32">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:17">(<expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:10">fd</name> <operator pos:start="97:12" pos:end="97:13">==</operator> <operator pos:start="97:15" pos:end="97:15">-</operator><literal type="number" pos:start="97:16" pos:end="97:16">1</literal></expr>)</condition> <block pos:start="97:19" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:23">

        <expr_stmt pos:start="99:9" pos:end="99:20"><expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:10">rc</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <operator pos:start="99:14" pos:end="99:14">-</operator><name pos:start="99:15" pos:end="99:19">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:68"><expr pos:start="101:9" pos:end="101:67"><call pos:start="101:9" pos:end="101:67"><name pos:start="101:9" pos:end="101:18">XEN_PT_ERR</name><argument_list pos:start="101:19" pos:end="101:67">(<argument pos:start="101:20" pos:end="101:20"><expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">d</name></expr></argument>, <argument pos:start="101:23" pos:end="101:49"><expr pos:start="101:23" pos:end="101:49"><literal type="string" pos:start="101:23" pos:end="101:49">"Can't open /dev/mem: %s\n"</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:66"><expr pos:start="101:52" pos:end="101:66"><call pos:start="101:52" pos:end="101:66"><name pos:start="101:52" pos:end="101:59">strerror</name><argument_list pos:start="101:60" pos:end="101:66">(<argument pos:start="101:61" pos:end="101:65"><expr pos:start="101:61" pos:end="101:65"><name pos:start="101:61" pos:end="101:65">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:23">goto <name pos:start="103:14" pos:end="103:22">error_out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:41"><expr pos:start="107:5" pos:end="109:40"><call pos:start="107:5" pos:end="109:40"><name pos:start="107:5" pos:end="107:14">XEN_PT_LOG</name><argument_list pos:start="107:15" pos:end="109:40">(<argument pos:start="107:16" pos:end="107:16"><expr pos:start="107:16" pos:end="107:16"><name pos:start="107:16" pos:end="107:16">d</name></expr></argument>, <argument pos:start="107:19" pos:end="107:57"><expr pos:start="107:19" pos:end="107:57"><literal type="string" pos:start="107:19" pos:end="107:57">"table_off = %#x, total_entries = %d\n"</literal></expr></argument>,

               <argument pos:start="109:16" pos:end="109:24"><expr pos:start="109:16" pos:end="109:24"><name pos:start="109:16" pos:end="109:24">table_off</name></expr></argument>, <argument pos:start="109:27" pos:end="109:39"><expr pos:start="109:27" pos:end="109:39"><name pos:start="109:27" pos:end="109:39">total_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:51"><expr pos:start="111:5" pos:end="111:50"><name pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:8">msix</name><operator pos:start="111:9" pos:end="111:10">-&gt;</operator><name pos:start="111:11" pos:end="111:29">table_offset_adjust</name></name> <operator pos:start="111:31" pos:end="111:31">=</operator> <name pos:start="111:33" pos:end="111:41">table_off</name> <operator pos:start="111:43" pos:end="111:43">&amp;</operator> <literal type="number" pos:start="111:45" pos:end="111:50">0x0fff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="125:71"><expr pos:start="113:5" pos:end="125:70"><name pos:start="113:5" pos:end="113:25"><name pos:start="113:5" pos:end="113:8">msix</name><operator pos:start="113:9" pos:end="113:10">-&gt;</operator><name pos:start="113:11" pos:end="113:25">phys_iomem_base</name></name> <operator pos:start="113:27" pos:end="113:27">=</operator>

        <call pos:start="115:9" pos:end="125:70"><name pos:start="115:9" pos:end="115:12">mmap</name><argument_list pos:start="115:13" pos:end="125:70">(<argument pos:start="115:14" pos:end="115:17"><expr pos:start="115:14" pos:end="115:17"><name pos:start="115:14" pos:end="115:17">NULL</name></expr></argument>,

             <argument pos:start="117:14" pos:end="117:76"><expr pos:start="117:14" pos:end="117:76"><name pos:start="117:14" pos:end="117:26">total_entries</name> <operator pos:start="117:28" pos:end="117:28">*</operator> <name pos:start="117:30" pos:end="117:48">PCI_MSIX_ENTRY_SIZE</name> <operator pos:start="117:50" pos:end="117:50">+</operator> <name pos:start="117:52" pos:end="117:76"><name pos:start="117:52" pos:end="117:55">msix</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:76">table_offset_adjust</name></name></expr></argument>,

             <argument pos:start="119:14" pos:end="119:22"><expr pos:start="119:14" pos:end="119:22"><name pos:start="119:14" pos:end="119:22">PROT_READ</name></expr></argument>,

             <argument pos:start="121:14" pos:end="121:36"><expr pos:start="121:14" pos:end="121:36"><name pos:start="121:14" pos:end="121:23">MAP_SHARED</name> <operator pos:start="121:25" pos:end="121:25">|</operator> <name pos:start="121:27" pos:end="121:36">MAP_LOCKED</name></expr></argument>,

             <argument pos:start="123:14" pos:end="123:15"><expr pos:start="123:14" pos:end="123:15"><name pos:start="123:14" pos:end="123:15">fd</name></expr></argument>,

             <argument pos:start="125:14" pos:end="125:69"><expr pos:start="125:14" pos:end="125:69"><name pos:start="125:14" pos:end="125:29"><name pos:start="125:14" pos:end="125:17">msix</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:29">table_base</name></name> <operator pos:start="125:31" pos:end="125:31">+</operator> <name pos:start="125:33" pos:end="125:41">table_off</name> <operator pos:start="125:43" pos:end="125:43">-</operator> <name pos:start="125:45" pos:end="125:69"><name pos:start="125:45" pos:end="125:48">msix</name><operator pos:start="125:49" pos:end="125:50">-&gt;</operator><name pos:start="125:51" pos:end="125:69">table_offset_adjust</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:14"><expr pos:start="127:5" pos:end="127:13"><call pos:start="127:5" pos:end="127:13"><name pos:start="127:5" pos:end="127:9">close</name><argument_list pos:start="127:10" pos:end="127:13">(<argument pos:start="127:11" pos:end="127:12"><expr pos:start="127:11" pos:end="127:12"><name pos:start="127:11" pos:end="127:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="137:5"><if pos:start="129:5" pos:end="137:5">if <condition pos:start="129:8" pos:end="129:44">(<expr pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:12">msix</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:29">phys_iomem_base</name></name> <operator pos:start="129:31" pos:end="129:32">==</operator> <name pos:start="129:34" pos:end="129:43">MAP_FAILED</name></expr>)</condition> <block pos:start="129:46" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:23">

        <expr_stmt pos:start="131:9" pos:end="131:20"><expr pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:10">rc</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <operator pos:start="131:14" pos:end="131:14">-</operator><name pos:start="131:15" pos:end="131:19">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:79"><expr pos:start="133:9" pos:end="133:78"><call pos:start="133:9" pos:end="133:78"><name pos:start="133:9" pos:end="133:18">XEN_PT_ERR</name><argument_list pos:start="133:19" pos:end="133:78">(<argument pos:start="133:20" pos:end="133:20"><expr pos:start="133:20" pos:end="133:20"><name pos:start="133:20" pos:end="133:20">d</name></expr></argument>, <argument pos:start="133:23" pos:end="133:60"><expr pos:start="133:23" pos:end="133:60"><literal type="string" pos:start="133:23" pos:end="133:60">"Can't map physical MSI-X table: %s\n"</literal></expr></argument>, <argument pos:start="133:63" pos:end="133:77"><expr pos:start="133:63" pos:end="133:77"><call pos:start="133:63" pos:end="133:77"><name pos:start="133:63" pos:end="133:70">strerror</name><argument_list pos:start="133:71" pos:end="133:77">(<argument pos:start="133:72" pos:end="133:76"><expr pos:start="133:72" pos:end="133:76"><name pos:start="133:72" pos:end="133:76">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:23">goto <name pos:start="135:14" pos:end="135:22">error_out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="141:36"><expr pos:start="139:5" pos:end="141:35"><name pos:start="139:5" pos:end="139:25"><name pos:start="139:5" pos:end="139:8">msix</name><operator pos:start="139:9" pos:end="139:10">-&gt;</operator><name pos:start="139:11" pos:end="139:25">phys_iomem_base</name></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <operator pos:start="139:29" pos:end="139:29">(</operator><name pos:start="139:30" pos:end="139:33">char</name> <operator pos:start="139:35" pos:end="139:35">*</operator><operator pos:start="139:36" pos:end="139:36">)</operator><name pos:start="139:37" pos:end="139:57"><name pos:start="139:37" pos:end="139:40">msix</name><operator pos:start="139:41" pos:end="139:42">-&gt;</operator><name pos:start="139:43" pos:end="139:57">phys_iomem_base</name></name>

        <operator pos:start="141:9" pos:end="141:9">+</operator> <name pos:start="141:11" pos:end="141:35"><name pos:start="141:11" pos:end="141:14">msix</name><operator pos:start="141:15" pos:end="141:16">-&gt;</operator><name pos:start="141:17" pos:end="141:35">table_offset_adjust</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="147:38"><expr pos:start="145:5" pos:end="147:37"><call pos:start="145:5" pos:end="147:37"><name pos:start="145:5" pos:end="145:14">XEN_PT_LOG</name><argument_list pos:start="145:15" pos:end="147:37">(<argument pos:start="145:16" pos:end="145:16"><expr pos:start="145:16" pos:end="145:16"><name pos:start="145:16" pos:end="145:16">d</name></expr></argument>, <argument pos:start="145:19" pos:end="145:56"><expr pos:start="145:19" pos:end="145:56"><literal type="string" pos:start="145:19" pos:end="145:56">"mapping physical MSI-X table to %p\n"</literal></expr></argument>,

               <argument pos:start="147:16" pos:end="147:36"><expr pos:start="147:16" pos:end="147:36"><name pos:start="147:16" pos:end="147:36"><name pos:start="147:16" pos:end="147:19">msix</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:36">phys_iomem_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="155:43"><expr pos:start="151:5" pos:end="155:42"><call pos:start="151:5" pos:end="155:42"><name pos:start="151:5" pos:end="151:39">memory_region_add_subregion_overlap</name><argument_list pos:start="151:40" pos:end="155:42">(<argument pos:start="151:41" pos:end="151:58"><expr pos:start="151:41" pos:end="151:58"><operator pos:start="151:41" pos:end="151:41">&amp;</operator><name pos:start="151:42" pos:end="151:58"><name pos:start="151:42" pos:end="151:42">s</name><operator pos:start="151:43" pos:end="151:44">-&gt;</operator><name pos:start="151:45" pos:end="151:47">bar</name><index pos:start="151:48" pos:end="151:58">[<expr pos:start="151:49" pos:end="151:57"><name pos:start="151:49" pos:end="151:57">bar_index</name></expr>]</index></name></expr></argument>, <argument pos:start="151:61" pos:end="151:69"><expr pos:start="151:61" pos:end="151:69"><name pos:start="151:61" pos:end="151:69">table_off</name></expr></argument>,

                                        <argument pos:start="153:41" pos:end="153:51"><expr pos:start="153:41" pos:end="153:51"><operator pos:start="153:41" pos:end="153:41">&amp;</operator><name pos:start="153:42" pos:end="153:51"><name pos:start="153:42" pos:end="153:45">msix</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:51">mmio</name></name></expr></argument>,

                                        <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="155:45" pos:end="155:75">/* Priority: pci default + 1 */</comment>



    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>



<label pos:start="163:1" pos:end="163:10"><name pos:start="163:1" pos:end="163:9">error_out</name>:</label>

    <expr_stmt pos:start="165:5" pos:end="165:20"><expr pos:start="165:5" pos:end="165:19"><call pos:start="165:5" pos:end="165:19"><name pos:start="165:5" pos:end="165:10">g_free</name><argument_list pos:start="165:11" pos:end="165:19">(<argument pos:start="165:12" pos:end="165:18"><expr pos:start="165:12" pos:end="165:18"><name pos:start="165:12" pos:end="165:18"><name pos:start="165:12" pos:end="165:12">s</name><operator pos:start="165:13" pos:end="165:14">-&gt;</operator><name pos:start="165:15" pos:end="165:18">msix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:19"><expr pos:start="167:5" pos:end="167:18"><name pos:start="167:5" pos:end="167:11"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:11">msix</name></name> <operator pos:start="167:13" pos:end="167:13">=</operator> <name pos:start="167:15" pos:end="167:18">NULL</name></expr>;</expr_stmt>

    <return pos:start="169:5" pos:end="169:14">return <expr pos:start="169:12" pos:end="169:13"><name pos:start="169:12" pos:end="169:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
