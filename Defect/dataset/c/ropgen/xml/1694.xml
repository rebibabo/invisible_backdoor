<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1694.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">zipl_run</name><parameter_list pos:start="1:20" pos:end="1:46">(<parameter pos:start="1:21" pos:end="1:45"><decl pos:start="1:21" pos:end="1:45"><type pos:start="1:21" pos:end="1:45"><name pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:26">struct</name> <name pos:start="1:28" pos:end="1:40">scsi_blockptr</name></name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">pte</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:14">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:27">component_header</name></name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:35">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:26">component_entry</name></name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:33">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:32"><name pos:start="9:13" pos:end="9:19">tmp_sec</name><index pos:start="9:20" pos:end="9:32">[<expr pos:start="9:21" pos:end="9:31"><name pos:start="9:21" pos:end="9:31">SECTOR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><call pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:15">virtio_read</name><argument_list pos:start="13:16" pos:end="13:38">(<argument pos:start="13:17" pos:end="13:28"><expr pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:19">pte</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:28">blockno</name></name></expr></argument>, <argument pos:start="13:31" pos:end="13:37"><expr pos:start="13:31" pos:end="13:37"><name pos:start="13:31" pos:end="13:37">tmp_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:48"><expr pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:10">header</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <operator pos:start="15:14" pos:end="15:14">(</operator>struct <name pos:start="15:22" pos:end="15:37">component_header</name> <operator pos:start="15:39" pos:end="15:39">*</operator><operator pos:start="15:40" pos:end="15:40">)</operator><name pos:start="15:41" pos:end="15:47">tmp_sec</name></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:29">(<expr pos:start="19:9" pos:end="19:28"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:28"><name pos:start="19:10" pos:end="19:19">zipl_magic</name><argument_list pos:start="19:20" pos:end="19:28">(<argument pos:start="19:21" pos:end="19:27"><expr pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:27">tmp_sec</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:31" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:45">(<expr pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:14">header</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">type</name></name> <operator pos:start="27:22" pos:end="27:23">!=</operator> <name pos:start="27:25" pos:end="27:44">ZIPL_COMP_HEADER_IPL</name></expr>)</condition> <block pos:start="27:47" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><call pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:9">dputs</name><argument_list pos:start="35:10" pos:end="35:35">(<argument pos:start="35:11" pos:end="35:34"><expr pos:start="35:11" pos:end="35:34"><literal type="string" pos:start="35:11" pos:end="35:34">"start loading images\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:32">/* Load image(s) into RAM */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:9">entry</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <operator pos:start="41:13" pos:end="41:13">(</operator>struct <name pos:start="41:21" pos:end="41:35">component_entry</name> <operator pos:start="41:37" pos:end="41:37">*</operator><operator pos:start="41:38" pos:end="41:38">)</operator><operator pos:start="41:39" pos:end="41:39">(</operator><operator pos:start="41:40" pos:end="41:40">&amp;</operator><name pos:start="41:41" pos:end="41:49"><name pos:start="41:41" pos:end="41:46">header</name><index pos:start="41:47" pos:end="41:49">[<expr pos:start="41:48" pos:end="41:48"><literal type="number" pos:start="41:48" pos:end="41:48">1</literal></expr>]</index></name><operator pos:start="41:50" pos:end="41:50">)</operator></expr>;</expr_stmt>

    <while pos:start="43:5" pos:end="63:5">while <condition pos:start="43:11" pos:end="43:57">(<expr pos:start="43:12" pos:end="43:56"><name pos:start="43:12" pos:end="43:32"><name pos:start="43:12" pos:end="43:16">entry</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:32">component_type</name></name> <operator pos:start="43:34" pos:end="43:35">==</operator> <name pos:start="43:37" pos:end="43:56">ZIPL_COMP_ENTRY_LOAD</name></expr>)</condition> <block pos:start="43:59" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:9">

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:41">(<expr pos:start="45:13" pos:end="45:40"><call pos:start="45:13" pos:end="45:36"><name pos:start="45:13" pos:end="45:29">zipl_load_segment</name><argument_list pos:start="45:30" pos:end="45:36">(<argument pos:start="45:31" pos:end="45:35"><expr pos:start="45:31" pos:end="45:35"><name pos:start="45:31" pos:end="45:35">entry</name></expr></argument>)</argument_list></call> <operator pos:start="45:38" pos:end="45:38">&lt;</operator> <literal type="number" pos:start="45:40" pos:end="45:40">0</literal></expr>)</condition> <block pos:start="45:43" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:22">

            <goto pos:start="47:13" pos:end="47:22">goto <name pos:start="47:18" pos:end="47:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:13">entry</name><operator pos:start="53:14" pos:end="53:15">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:60">(<expr pos:start="57:13" pos:end="57:59"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:20">uint8_t</name><operator pos:start="57:21" pos:end="57:21">*</operator><operator pos:start="57:22" pos:end="57:22">)</operator><operator pos:start="57:23" pos:end="57:23">(</operator><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:32"><name pos:start="57:25" pos:end="57:29">entry</name><index pos:start="57:30" pos:end="57:32">[<expr pos:start="57:31" pos:end="57:31"><literal type="number" pos:start="57:31" pos:end="57:31">1</literal></expr>]</index></name><operator pos:start="57:33" pos:end="57:33">)</operator> <operator pos:start="57:35" pos:end="57:35">&gt;</operator> <operator pos:start="57:37" pos:end="57:37">(</operator><name pos:start="57:38" pos:end="57:44">tmp_sec</name> <operator pos:start="57:46" pos:end="57:46">+</operator> <name pos:start="57:48" pos:end="57:58">SECTOR_SIZE</name><operator pos:start="57:59" pos:end="57:59">)</operator></expr>)</condition> <block pos:start="57:62" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:22">

            <goto pos:start="59:13" pos:end="59:22">goto <name pos:start="59:18" pos:end="59:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:54">(<expr pos:start="67:9" pos:end="67:53"><name pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:13">entry</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:29">component_type</name></name> <operator pos:start="67:31" pos:end="67:32">!=</operator> <name pos:start="67:34" pos:end="67:53">ZIPL_COMP_ENTRY_EXEC</name></expr>)</condition> <block pos:start="67:56" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:18">

        <goto pos:start="69:9" pos:end="69:18">goto <name pos:start="69:14" pos:end="69:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:27">/* should not return */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><call pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:20">jump_to_IPL_code</name><argument_list pos:start="77:21" pos:end="77:41">(<argument pos:start="77:22" pos:end="77:40"><expr pos:start="77:22" pos:end="77:40"><name pos:start="77:22" pos:end="77:40"><name pos:start="77:22" pos:end="77:26">entry</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:40">load_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>



<label pos:start="85:1" pos:end="85:5"><name pos:start="85:1" pos:end="85:4">fail</name>:</label>

    <expr_stmt pos:start="87:5" pos:end="87:40"><expr pos:start="87:5" pos:end="87:39"><call pos:start="87:5" pos:end="87:39"><name pos:start="87:5" pos:end="87:14">sclp_print</name><argument_list pos:start="87:15" pos:end="87:39">(<argument pos:start="87:16" pos:end="87:38"><expr pos:start="87:16" pos:end="87:38"><literal type="string" pos:start="87:16" pos:end="87:38">"failed running zipl\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:14">return <expr pos:start="89:12" pos:end="89:13"><operator pos:start="89:12" pos:end="89:12">-</operator><literal type="number" pos:start="89:13" pos:end="89:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
