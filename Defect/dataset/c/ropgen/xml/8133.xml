<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8133.c" pos:tabs="8"><function pos:start="1:1" pos:end="395:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="25:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">target</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:37">has_format</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">format</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:40"><decl pos:start="5:23" pos:end="5:40"><type pos:start="5:23" pos:end="5:40"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:40">has_node_name</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:63"><decl pos:start="5:43" pos:end="5:63"><type pos:start="5:43" pos:end="5:63"><specifier pos:start="5:43" pos:end="5:47">const</specifier> <name pos:start="5:49" pos:end="5:52">char</name> <modifier pos:start="5:54" pos:end="5:54">*</modifier></type><name pos:start="5:55" pos:end="5:63">node_name</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:39"><decl pos:start="7:23" pos:end="7:39"><type pos:start="7:23" pos:end="7:39"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:39">has_replaces</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:61"><decl pos:start="7:42" pos:end="7:61"><type pos:start="7:42" pos:end="7:61"><specifier pos:start="7:42" pos:end="7:46">const</specifier> <name pos:start="7:48" pos:end="7:51">char</name> <modifier pos:start="7:53" pos:end="7:53">*</modifier></type><name pos:start="7:54" pos:end="7:61">replaces</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:46"><decl pos:start="9:23" pos:end="9:46"><type pos:start="9:23" pos:end="9:46"><name pos:start="9:23" pos:end="9:41"><name pos:start="9:23" pos:end="9:26">enum</name> <name pos:start="9:28" pos:end="9:41">MirrorSyncMode</name></name></type> <name pos:start="9:43" pos:end="9:46">sync</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:35"><decl pos:start="11:23" pos:end="11:35"><type pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:26">bool</name></type> <name pos:start="11:28" pos:end="11:35">has_mode</name></decl></parameter>, <parameter pos:start="11:38" pos:end="11:59"><decl pos:start="11:38" pos:end="11:59"><type pos:start="11:38" pos:end="11:59"><name pos:start="11:38" pos:end="11:54"><name pos:start="11:38" pos:end="11:41">enum</name> <name pos:start="11:43" pos:end="11:54">NewImageMode</name></name></type> <name pos:start="11:56" pos:end="11:59">mode</name></decl></parameter>,

                      <parameter pos:start="13:23" pos:end="13:36"><decl pos:start="13:23" pos:end="13:36"><type pos:start="13:23" pos:end="13:36"><name pos:start="13:23" pos:end="13:26">bool</name></type> <name pos:start="13:28" pos:end="13:36">has_speed</name></decl></parameter>, <parameter pos:start="13:39" pos:end="13:51"><decl pos:start="13:39" pos:end="13:51"><type pos:start="13:39" pos:end="13:51"><name pos:start="13:39" pos:end="13:45">int64_t</name></type> <name pos:start="13:47" pos:end="13:51">speed</name></decl></parameter>,

                      <parameter pos:start="15:23" pos:end="15:42"><decl pos:start="15:23" pos:end="15:42"><type pos:start="15:23" pos:end="15:42"><name pos:start="15:23" pos:end="15:26">bool</name></type> <name pos:start="15:28" pos:end="15:42">has_granularity</name></decl></parameter>, <parameter pos:start="15:45" pos:end="15:64"><decl pos:start="15:45" pos:end="15:64"><type pos:start="15:45" pos:end="15:64"><name pos:start="15:45" pos:end="15:52">uint32_t</name></type> <name pos:start="15:54" pos:end="15:64">granularity</name></decl></parameter>,

                      <parameter pos:start="17:23" pos:end="17:39"><decl pos:start="17:23" pos:end="17:39"><type pos:start="17:23" pos:end="17:39"><name pos:start="17:23" pos:end="17:26">bool</name></type> <name pos:start="17:28" pos:end="17:39">has_buf_size</name></decl></parameter>, <parameter pos:start="17:42" pos:end="17:57"><decl pos:start="17:42" pos:end="17:57"><type pos:start="17:42" pos:end="17:57"><name pos:start="17:42" pos:end="17:48">int64_t</name></type> <name pos:start="17:50" pos:end="17:57">buf_size</name></decl></parameter>,

                      <parameter pos:start="19:23" pos:end="19:46"><decl pos:start="19:23" pos:end="19:46"><type pos:start="19:23" pos:end="19:46"><name pos:start="19:23" pos:end="19:26">bool</name></type> <name pos:start="19:28" pos:end="19:46">has_on_source_error</name></decl></parameter>, <parameter pos:start="19:49" pos:end="19:79"><decl pos:start="19:49" pos:end="19:79"><type pos:start="19:49" pos:end="19:79"><name pos:start="19:49" pos:end="19:63">BlockdevOnError</name></type> <name pos:start="19:65" pos:end="19:79">on_source_error</name></decl></parameter>,

                      <parameter pos:start="21:23" pos:end="21:46"><decl pos:start="21:23" pos:end="21:46"><type pos:start="21:23" pos:end="21:46"><name pos:start="21:23" pos:end="21:26">bool</name></type> <name pos:start="21:28" pos:end="21:46">has_on_target_error</name></decl></parameter>, <parameter pos:start="21:49" pos:end="21:79"><decl pos:start="21:49" pos:end="21:79"><type pos:start="21:49" pos:end="21:79"><name pos:start="21:49" pos:end="21:63">BlockdevOnError</name></type> <name pos:start="21:65" pos:end="21:79">on_target_error</name></decl></parameter>,

                      <parameter pos:start="23:23" pos:end="23:36"><decl pos:start="23:23" pos:end="23:36"><type pos:start="23:23" pos:end="23:36"><name pos:start="23:23" pos:end="23:26">bool</name></type> <name pos:start="23:28" pos:end="23:36">has_unmap</name></decl></parameter>, <parameter pos:start="23:39" pos:end="23:48"><decl pos:start="23:39" pos:end="23:48"><type pos:start="23:39" pos:end="23:48"><name pos:start="23:39" pos:end="23:42">bool</name></type> <name pos:start="23:44" pos:end="23:48">unmap</name></decl></parameter>,

                      <parameter pos:start="25:23" pos:end="25:34"><decl pos:start="25:23" pos:end="25:34"><type pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:27">Error</name> <modifier pos:start="25:29" pos:end="25:29">*</modifier><modifier pos:start="25:30" pos:end="25:30">*</modifier></type><name pos:start="25:31" pos:end="25:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="27:1" pos:end="395:1">{<block_content pos:start="29:5" pos:end="393:37">

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">BlockBackend</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:20">BlockDriverState</name> <modifier pos:start="31:22" pos:end="31:22">*</modifier></type><name pos:start="31:23" pos:end="31:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:20">BlockDriverState</name> <modifier pos:start="33:22" pos:end="33:22">*</modifier></type><name pos:start="33:23" pos:end="33:28">source</name></decl>, <decl pos:start="33:31" pos:end="33:40"><type ref="prev" pos:start="33:5" pos:end="33:22"><modifier pos:start="33:31" pos:end="33:31">*</modifier></type><name pos:start="33:32" pos:end="33:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:28"><decl pos:start="35:5" pos:end="35:27"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:14">AioContext</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:28"><decl pos:start="37:5" pos:end="37:27"><type pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:15">BlockDriver</name> <modifier pos:start="37:17" pos:end="37:17">*</modifier></type><name pos:start="37:18" pos:end="37:20">drv</name> <init pos:start="37:22" pos:end="37:27">= <expr pos:start="37:24" pos:end="37:27"><name pos:start="37:24" pos:end="37:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:28"><decl pos:start="39:5" pos:end="39:27"><type pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:9">Error</name> <modifier pos:start="39:11" pos:end="39:11">*</modifier></type><name pos:start="39:12" pos:end="39:20">local_err</name> <init pos:start="39:22" pos:end="39:27">= <expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:26"><decl pos:start="41:5" pos:end="41:25"><type pos:start="41:5" pos:end="41:11"><name pos:start="41:5" pos:end="41:9">QDict</name> <modifier pos:start="41:11" pos:end="41:11">*</modifier></type><name pos:start="41:12" pos:end="41:18">options</name> <init pos:start="41:20" pos:end="41:25">= <expr pos:start="41:22" pos:end="41:25"><name pos:start="41:22" pos:end="41:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:14"><decl pos:start="43:5" pos:end="43:13"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:17"><decl pos:start="45:5" pos:end="45:16"><type pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:11">int64_t</name></type> <name pos:start="45:13" pos:end="45:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:12"><decl pos:start="47:5" pos:end="47:11"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:18">has_speed</name></expr>)</condition> <block pos:start="51:21" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:13">speed</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:29">(<expr pos:start="57:9" pos:end="57:28"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:28">has_on_source_error</name></expr>)</condition> <block pos:start="57:31" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:51">

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:23">on_source_error</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:29">(<expr pos:start="63:9" pos:end="63:28"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:28">has_on_target_error</name></expr>)</condition> <block pos:start="63:31" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:51">

        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:23">on_target_error</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:18">(<expr pos:start="69:9" pos:end="69:17"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:17">has_mode</name></expr>)</condition> <block pos:start="69:20" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:45">

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:12">mode</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:44">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:25">(<expr pos:start="75:9" pos:end="75:24"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:24">has_granularity</name></expr>)</condition> <block pos:start="75:27" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:24">

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:19">granularity</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:22">(<expr pos:start="81:9" pos:end="81:21"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:21">has_buf_size</name></expr>)</condition> <block pos:start="81:24" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:21">

        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:16">buf_size</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:19">(<expr pos:start="87:9" pos:end="87:18"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:18">has_unmap</name></expr>)</condition> <block pos:start="87:21" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:21">

        <expr_stmt pos:start="89:9" pos:end="89:21"><expr pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:13">unmap</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:20">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:78">(<expr pos:start="95:9" pos:end="95:77"><name pos:start="95:9" pos:end="95:19">granularity</name> <operator pos:start="95:21" pos:end="95:22">!=</operator> <literal type="number" pos:start="95:24" pos:end="95:24">0</literal> <operator pos:start="95:26" pos:end="95:27">&amp;&amp;</operator> <operator pos:start="95:29" pos:end="95:29">(</operator><name pos:start="95:30" pos:end="95:63"><name pos:start="95:30" pos:end="95:40">granularity</name> <argument_list type="generic" pos:start="95:42" pos:end="95:63">&lt; <argument pos:start="95:44" pos:end="95:61"><expr pos:start="95:44" pos:end="95:61"><literal type="number" pos:start="95:44" pos:end="95:46">512</literal> <operator pos:start="95:48" pos:end="95:49">||</operator> <name pos:start="95:51" pos:end="95:61">granularity</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="95:65" pos:end="95:71">1048576</literal> <operator pos:start="95:73" pos:end="95:73">*</operator> <literal type="number" pos:start="95:75" pos:end="95:76">64</literal><operator pos:start="95:77" pos:end="95:77">)</operator></expr>)</condition> <block pos:start="95:80" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:15">

        <expr_stmt pos:start="97:9" pos:end="99:52"><expr pos:start="97:9" pos:end="99:51"><call pos:start="97:9" pos:end="99:51"><name pos:start="97:9" pos:end="97:18">error_setg</name><argument_list pos:start="97:19" pos:end="99:51">(<argument pos:start="97:20" pos:end="97:23"><expr pos:start="97:20" pos:end="97:23"><name pos:start="97:20" pos:end="97:23">errp</name></expr></argument>, <argument pos:start="97:26" pos:end="97:53"><expr pos:start="97:26" pos:end="97:53"><name pos:start="97:26" pos:end="97:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="97:56" pos:end="97:68"><expr pos:start="97:56" pos:end="97:68"><literal type="string" pos:start="97:56" pos:end="97:68">"granularity"</literal></expr></argument>,

                   <argument pos:start="99:20" pos:end="99:50"><expr pos:start="99:20" pos:end="99:50"><literal type="string" pos:start="99:20" pos:end="99:50">"a value in range [512B, 64MB]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:40">(<expr pos:start="105:9" pos:end="105:39"><name pos:start="105:9" pos:end="105:19">granularity</name> <operator pos:start="105:21" pos:end="105:21">&amp;</operator> <operator pos:start="105:23" pos:end="105:23">(</operator><name pos:start="105:24" pos:end="105:34">granularity</name> <operator pos:start="105:36" pos:end="105:36">-</operator> <literal type="number" pos:start="105:38" pos:end="105:38">1</literal><operator pos:start="105:39" pos:end="105:39">)</operator></expr>)</condition> <block pos:start="105:42" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:15">

        <expr_stmt pos:start="107:9" pos:end="109:33"><expr pos:start="107:9" pos:end="109:32"><call pos:start="107:9" pos:end="109:32"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="109:32">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="107:53"><expr pos:start="107:26" pos:end="107:53"><name pos:start="107:26" pos:end="107:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="107:56" pos:end="107:68"><expr pos:start="107:56" pos:end="107:68"><literal type="string" pos:start="107:56" pos:end="107:68">"granularity"</literal></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:31"><expr pos:start="109:20" pos:end="109:31"><literal type="string" pos:start="109:20" pos:end="109:31">"power of 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:30"><expr pos:start="117:5" pos:end="117:29"><name pos:start="117:5" pos:end="117:7">blk</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:29"><name pos:start="117:11" pos:end="117:21">blk_by_name</name><argument_list pos:start="117:22" pos:end="117:29">(<argument pos:start="117:23" pos:end="117:28"><expr pos:start="117:23" pos:end="117:28"><name pos:start="117:23" pos:end="117:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="127:5"><if pos:start="119:5" pos:end="127:5">if <condition pos:start="119:8" pos:end="119:13">(<expr pos:start="119:9" pos:end="119:12"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:12">blk</name></expr>)</condition> <block pos:start="119:15" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:15">

        <expr_stmt pos:start="121:9" pos:end="123:51"><expr pos:start="121:9" pos:end="123:50"><call pos:start="121:9" pos:end="123:50"><name pos:start="121:9" pos:end="121:17">error_set</name><argument_list pos:start="121:18" pos:end="123:50">(<argument pos:start="121:19" pos:end="121:22"><expr pos:start="121:19" pos:end="121:22"><name pos:start="121:19" pos:end="121:22">errp</name></expr></argument>, <argument pos:start="121:25" pos:end="121:52"><expr pos:start="121:25" pos:end="121:52"><name pos:start="121:25" pos:end="121:52">ERROR_CLASS_DEVICE_NOT_FOUND</name></expr></argument>,

                  <argument pos:start="123:19" pos:end="123:41"><expr pos:start="123:19" pos:end="123:41"><literal type="string" pos:start="123:19" pos:end="123:41">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="123:44" pos:end="123:49"><expr pos:start="123:44" pos:end="123:49"><name pos:start="123:44" pos:end="123:49">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:21"><expr pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:6">bs</name> <operator pos:start="129:8" pos:end="129:8">=</operator> <call pos:start="129:10" pos:end="129:20"><name pos:start="129:10" pos:end="129:15">blk_bs</name><argument_list pos:start="129:16" pos:end="129:20">(<argument pos:start="129:17" pos:end="129:19"><expr pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:43"><expr pos:start="133:5" pos:end="133:42"><name pos:start="133:5" pos:end="133:15">aio_context</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:42"><name pos:start="133:19" pos:end="133:38">bdrv_get_aio_context</name><argument_list pos:start="133:39" pos:end="133:42">(<argument pos:start="133:40" pos:end="133:41"><expr pos:start="133:40" pos:end="133:41"><name pos:start="133:40" pos:end="133:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:37"><expr pos:start="135:5" pos:end="135:36"><call pos:start="135:5" pos:end="135:36"><name pos:start="135:5" pos:end="135:23">aio_context_acquire</name><argument_list pos:start="135:24" pos:end="135:36">(<argument pos:start="135:25" pos:end="135:35"><expr pos:start="135:25" pos:end="135:35"><name pos:start="135:25" pos:end="135:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:30">(<expr pos:start="139:9" pos:end="139:29"><operator pos:start="139:9" pos:end="139:9">!</operator><call pos:start="139:10" pos:end="139:29"><name pos:start="139:10" pos:end="139:25">bdrv_is_inserted</name><argument_list pos:start="139:26" pos:end="139:29">(<argument pos:start="139:27" pos:end="139:28"><expr pos:start="139:27" pos:end="139:28"><name pos:start="139:27" pos:end="139:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:32" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:17">

        <expr_stmt pos:start="141:9" pos:end="141:60"><expr pos:start="141:9" pos:end="141:59"><call pos:start="141:9" pos:end="141:59"><name pos:start="141:9" pos:end="141:18">error_setg</name><argument_list pos:start="141:19" pos:end="141:59">(<argument pos:start="141:20" pos:end="141:23"><expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">errp</name></expr></argument>, <argument pos:start="141:26" pos:end="141:50"><expr pos:start="141:26" pos:end="141:50"><name pos:start="141:26" pos:end="141:50">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="141:53" pos:end="141:58"><expr pos:start="141:53" pos:end="141:58"><name pos:start="141:53" pos:end="141:58">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:17">goto <name pos:start="143:14" pos:end="143:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:20">(<expr pos:start="149:9" pos:end="149:19"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:19">has_format</name></expr>)</condition> <block pos:start="149:22" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:79">

        <expr_stmt pos:start="151:9" pos:end="151:79"><expr pos:start="151:9" pos:end="151:78"><name pos:start="151:9" pos:end="151:14">format</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <ternary pos:start="151:18" pos:end="151:78"><condition pos:start="151:18" pos:end="151:50"><expr pos:start="151:18" pos:end="151:48"><name pos:start="151:18" pos:end="151:21">mode</name> <operator pos:start="151:23" pos:end="151:24">==</operator> <name pos:start="151:26" pos:end="151:48">NEW_IMAGE_MODE_EXISTING</name></expr> ?</condition><then pos:start="151:52" pos:end="151:55"> <expr pos:start="151:52" pos:end="151:55"><name pos:start="151:52" pos:end="151:55">NULL</name></expr> </then><else pos:start="151:57" pos:end="151:78">: <expr pos:start="151:59" pos:end="151:78"><name pos:start="151:59" pos:end="151:78"><name pos:start="151:59" pos:end="151:60">bs</name><operator pos:start="151:61" pos:end="151:62">-&gt;</operator><name pos:start="151:63" pos:end="151:65">drv</name><operator pos:start="151:66" pos:end="151:67">-&gt;</operator><name pos:start="151:68" pos:end="151:78">format_name</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="155:5" pos:end="167:5"><if pos:start="155:5" pos:end="167:5">if <condition pos:start="155:8" pos:end="155:15">(<expr pos:start="155:9" pos:end="155:14"><name pos:start="155:9" pos:end="155:14">format</name></expr>)</condition> <block pos:start="155:17" pos:end="167:5">{<block_content pos:start="157:9" pos:end="165:9">

        <expr_stmt pos:start="157:9" pos:end="157:39"><expr pos:start="157:9" pos:end="157:38"><name pos:start="157:9" pos:end="157:11">drv</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <call pos:start="157:15" pos:end="157:38"><name pos:start="157:15" pos:end="157:30">bdrv_find_format</name><argument_list pos:start="157:31" pos:end="157:38">(<argument pos:start="157:32" pos:end="157:37"><expr pos:start="157:32" pos:end="157:37"><name pos:start="157:32" pos:end="157:37">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="165:9"><if pos:start="159:9" pos:end="165:9">if <condition pos:start="159:12" pos:end="159:17">(<expr pos:start="159:13" pos:end="159:16"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:16">drv</name></expr>)</condition> <block pos:start="159:19" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:21">

            <expr_stmt pos:start="161:13" pos:end="161:64"><expr pos:start="161:13" pos:end="161:63"><call pos:start="161:13" pos:end="161:63"><name pos:start="161:13" pos:end="161:22">error_setg</name><argument_list pos:start="161:23" pos:end="161:63">(<argument pos:start="161:24" pos:end="161:27"><expr pos:start="161:24" pos:end="161:27"><name pos:start="161:24" pos:end="161:27">errp</name></expr></argument>, <argument pos:start="161:30" pos:end="161:54"><expr pos:start="161:30" pos:end="161:54"><name pos:start="161:30" pos:end="161:54">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="161:57" pos:end="161:62"><expr pos:start="161:57" pos:end="161:62"><name pos:start="161:57" pos:end="161:62">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:21">goto <name pos:start="163:18" pos:end="163:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="171:5" pos:end="175:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:59">(<expr pos:start="171:9" pos:end="171:58"><call pos:start="171:9" pos:end="171:58"><name pos:start="171:9" pos:end="171:26">bdrv_op_is_blocked</name><argument_list pos:start="171:27" pos:end="171:58">(<argument pos:start="171:28" pos:end="171:29"><expr pos:start="171:28" pos:end="171:29"><name pos:start="171:28" pos:end="171:29">bs</name></expr></argument>, <argument pos:start="171:32" pos:end="171:51"><expr pos:start="171:32" pos:end="171:51"><name pos:start="171:32" pos:end="171:51">BLOCK_OP_TYPE_MIRROR</name></expr></argument>, <argument pos:start="171:54" pos:end="171:57"><expr pos:start="171:54" pos:end="171:57"><name pos:start="171:54" pos:end="171:57">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:61" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:17">

        <goto pos:start="173:9" pos:end="173:17">goto <name pos:start="173:14" pos:end="173:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:41"><expr pos:start="179:5" pos:end="179:40"><name pos:start="179:5" pos:end="179:9">flags</name> <operator pos:start="179:11" pos:end="179:11">=</operator> <name pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:14">bs</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:26">open_flags</name></name> <operator pos:start="179:28" pos:end="179:28">|</operator> <name pos:start="179:30" pos:end="179:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:28"><expr pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:10">source</name> <operator pos:start="181:12" pos:end="181:12">=</operator> <name pos:start="181:14" pos:end="181:27"><name pos:start="181:14" pos:end="181:15">bs</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:27">backing_hd</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="187:5"><if pos:start="183:5" pos:end="187:5">if <condition pos:start="183:8" pos:end="183:48">(<expr pos:start="183:9" pos:end="183:47"><operator pos:start="183:9" pos:end="183:9">!</operator><name pos:start="183:10" pos:end="183:15">source</name> <operator pos:start="183:17" pos:end="183:18">&amp;&amp;</operator> <name pos:start="183:20" pos:end="183:23">sync</name> <operator pos:start="183:25" pos:end="183:26">==</operator> <name pos:start="183:28" pos:end="183:47">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="183:50" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:37">

        <expr_stmt pos:start="185:9" pos:end="185:37"><expr pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:12">sync</name> <operator pos:start="185:14" pos:end="185:14">=</operator> <name pos:start="185:16" pos:end="185:36">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="189:5" pos:end="193:5"><if pos:start="189:5" pos:end="193:5">if <condition pos:start="189:8" pos:end="189:38">(<expr pos:start="189:9" pos:end="189:37"><name pos:start="189:9" pos:end="189:12">sync</name> <operator pos:start="189:14" pos:end="189:15">==</operator> <name pos:start="189:17" pos:end="189:37">MIRROR_SYNC_MODE_NONE</name></expr>)</condition> <block pos:start="189:40" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:20">

        <expr_stmt pos:start="191:9" pos:end="191:20"><expr pos:start="191:9" pos:end="191:19"><name pos:start="191:9" pos:end="191:14">source</name> <operator pos:start="191:16" pos:end="191:16">=</operator> <name pos:start="191:18" pos:end="191:19">bs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:30"><expr pos:start="197:5" pos:end="197:29"><name pos:start="197:5" pos:end="197:8">size</name> <operator pos:start="197:10" pos:end="197:10">=</operator> <call pos:start="197:12" pos:end="197:29"><name pos:start="197:12" pos:end="197:25">bdrv_getlength</name><argument_list pos:start="197:26" pos:end="197:29">(<argument pos:start="197:27" pos:end="197:28"><expr pos:start="197:27" pos:end="197:28"><name pos:start="197:27" pos:end="197:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:17">(<expr pos:start="199:9" pos:end="199:16"><name pos:start="199:9" pos:end="199:12">size</name> <operator pos:start="199:14" pos:end="199:14">&lt;</operator> <literal type="number" pos:start="199:16" pos:end="199:16">0</literal></expr>)</condition> <block pos:start="199:19" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:17">

        <expr_stmt pos:start="201:9" pos:end="201:63"><expr pos:start="201:9" pos:end="201:62"><call pos:start="201:9" pos:end="201:62"><name pos:start="201:9" pos:end="201:24">error_setg_errno</name><argument_list pos:start="201:25" pos:end="201:62">(<argument pos:start="201:26" pos:end="201:29"><expr pos:start="201:26" pos:end="201:29"><name pos:start="201:26" pos:end="201:29">errp</name></expr></argument>, <argument pos:start="201:32" pos:end="201:36"><expr pos:start="201:32" pos:end="201:36"><operator pos:start="201:32" pos:end="201:32">-</operator><name pos:start="201:33" pos:end="201:36">size</name></expr></argument>, <argument pos:start="201:39" pos:end="201:61"><expr pos:start="201:39" pos:end="201:61"><literal type="string" pos:start="201:39" pos:end="201:61">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="203:9" pos:end="203:17">goto <name pos:start="203:14" pos:end="203:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="265:5"><if pos:start="209:5" pos:end="265:5">if <condition pos:start="209:8" pos:end="209:21">(<expr pos:start="209:9" pos:end="209:20"><name pos:start="209:9" pos:end="209:20">has_replaces</name></expr>)</condition> <block pos:start="209:23" pos:end="265:5">{<block_content pos:start="211:9" pos:end="263:9">

        <decl_stmt pos:start="211:9" pos:end="211:40"><decl pos:start="211:9" pos:end="211:39"><type pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:24">BlockDriverState</name> <modifier pos:start="211:26" pos:end="211:26">*</modifier></type><name pos:start="211:27" pos:end="211:39">to_replace_bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:40"><decl pos:start="213:9" pos:end="213:39"><type pos:start="213:9" pos:end="213:20"><name pos:start="213:9" pos:end="213:18">AioContext</name> <modifier pos:start="213:20" pos:end="213:20">*</modifier></type><name pos:start="213:21" pos:end="213:39">replace_aio_context</name></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:29"><decl pos:start="215:9" pos:end="215:28"><type pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:15">int64_t</name></type> <name pos:start="215:17" pos:end="215:28">replace_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="219:9" pos:end="227:9"><if pos:start="219:9" pos:end="227:9">if <condition pos:start="219:12" pos:end="219:27">(<expr pos:start="219:13" pos:end="219:26"><operator pos:start="219:13" pos:end="219:13">!</operator><name pos:start="219:14" pos:end="219:26">has_node_name</name></expr>)</condition> <block pos:start="219:29" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:21">

            <expr_stmt pos:start="221:13" pos:end="223:57"><expr pos:start="221:13" pos:end="223:56"><call pos:start="221:13" pos:end="223:56"><name pos:start="221:13" pos:end="221:22">error_setg</name><argument_list pos:start="221:23" pos:end="223:56">(<argument pos:start="221:24" pos:end="221:27"><expr pos:start="221:24" pos:end="221:27"><name pos:start="221:24" pos:end="221:27">errp</name></expr></argument>, <argument pos:start="221:30" pos:end="223:55"><expr pos:start="221:30" pos:end="223:55"><literal type="string" pos:start="221:30" pos:end="221:76">"a node-name must be provided when replacing a"</literal>

                             <literal type="string" pos:start="223:30" pos:end="223:55">" named node of the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="225:13" pos:end="225:21">goto <name pos:start="225:18" pos:end="225:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:68"><expr pos:start="231:9" pos:end="231:67"><name pos:start="231:9" pos:end="231:21">to_replace_bs</name> <operator pos:start="231:23" pos:end="231:23">=</operator> <call pos:start="231:25" pos:end="231:67"><name pos:start="231:25" pos:end="231:45">check_to_replace_node</name><argument_list pos:start="231:46" pos:end="231:67">(<argument pos:start="231:47" pos:end="231:54"><expr pos:start="231:47" pos:end="231:54"><name pos:start="231:47" pos:end="231:54">replaces</name></expr></argument>, <argument pos:start="231:57" pos:end="231:66"><expr pos:start="231:57" pos:end="231:66"><operator pos:start="231:57" pos:end="231:57">&amp;</operator><name pos:start="231:58" pos:end="231:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="235:9" pos:end="241:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:27">(<expr pos:start="235:13" pos:end="235:26"><operator pos:start="235:13" pos:end="235:13">!</operator><name pos:start="235:14" pos:end="235:26">to_replace_bs</name></expr>)</condition> <block pos:start="235:29" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:21">

            <expr_stmt pos:start="237:13" pos:end="237:45"><expr pos:start="237:13" pos:end="237:44"><call pos:start="237:13" pos:end="237:44"><name pos:start="237:13" pos:end="237:27">error_propagate</name><argument_list pos:start="237:28" pos:end="237:44">(<argument pos:start="237:29" pos:end="237:32"><expr pos:start="237:29" pos:end="237:32"><name pos:start="237:29" pos:end="237:32">errp</name></expr></argument>, <argument pos:start="237:35" pos:end="237:43"><expr pos:start="237:35" pos:end="237:43"><name pos:start="237:35" pos:end="237:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="239:13" pos:end="239:21">goto <name pos:start="239:18" pos:end="239:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="245:9" pos:end="245:66"><expr pos:start="245:9" pos:end="245:65"><name pos:start="245:9" pos:end="245:27">replace_aio_context</name> <operator pos:start="245:29" pos:end="245:29">=</operator> <call pos:start="245:31" pos:end="245:65"><name pos:start="245:31" pos:end="245:50">bdrv_get_aio_context</name><argument_list pos:start="245:51" pos:end="245:65">(<argument pos:start="245:52" pos:end="245:64"><expr pos:start="245:52" pos:end="245:64"><name pos:start="245:52" pos:end="245:64">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:49"><expr pos:start="247:9" pos:end="247:48"><call pos:start="247:9" pos:end="247:48"><name pos:start="247:9" pos:end="247:27">aio_context_acquire</name><argument_list pos:start="247:28" pos:end="247:48">(<argument pos:start="247:29" pos:end="247:47"><expr pos:start="247:29" pos:end="247:47"><name pos:start="247:29" pos:end="247:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:53"><expr pos:start="249:9" pos:end="249:52"><name pos:start="249:9" pos:end="249:20">replace_size</name> <operator pos:start="249:22" pos:end="249:22">=</operator> <call pos:start="249:24" pos:end="249:52"><name pos:start="249:24" pos:end="249:37">bdrv_getlength</name><argument_list pos:start="249:38" pos:end="249:52">(<argument pos:start="249:39" pos:end="249:51"><expr pos:start="249:39" pos:end="249:51"><name pos:start="249:39" pos:end="249:51">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:49"><expr pos:start="251:9" pos:end="251:48"><call pos:start="251:9" pos:end="251:48"><name pos:start="251:9" pos:end="251:27">aio_context_release</name><argument_list pos:start="251:28" pos:end="251:48">(<argument pos:start="251:29" pos:end="251:47"><expr pos:start="251:29" pos:end="251:47"><name pos:start="251:29" pos:end="251:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="255:9" pos:end="263:9"><if pos:start="255:9" pos:end="263:9">if <condition pos:start="255:12" pos:end="255:33">(<expr pos:start="255:13" pos:end="255:32"><name pos:start="255:13" pos:end="255:16">size</name> <operator pos:start="255:18" pos:end="255:19">!=</operator> <name pos:start="255:21" pos:end="255:32">replace_size</name></expr>)</condition> <block pos:start="255:35" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:21">

            <expr_stmt pos:start="257:13" pos:end="259:47"><expr pos:start="257:13" pos:end="259:46"><call pos:start="257:13" pos:end="259:46"><name pos:start="257:13" pos:end="257:22">error_setg</name><argument_list pos:start="257:23" pos:end="259:46">(<argument pos:start="257:24" pos:end="257:27"><expr pos:start="257:24" pos:end="257:27"><name pos:start="257:24" pos:end="257:27">errp</name></expr></argument>, <argument pos:start="257:30" pos:end="259:45"><expr pos:start="257:30" pos:end="259:45"><literal type="string" pos:start="257:30" pos:end="257:75">"cannot replace image with a mirror image of "</literal>

                             <literal type="string" pos:start="259:30" pos:end="259:45">"different size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="261:13" pos:end="261:21">goto <name pos:start="261:18" pos:end="261:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="269:5" pos:end="311:5"><if pos:start="269:5" pos:end="283:5">if <condition pos:start="269:8" pos:end="271:43">(<expr pos:start="269:9" pos:end="271:42"><operator pos:start="269:9" pos:end="269:9">(</operator><name pos:start="269:10" pos:end="269:13">sync</name> <operator pos:start="269:15" pos:end="269:16">==</operator> <name pos:start="269:18" pos:end="269:38">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="269:40" pos:end="269:41">||</operator> <operator pos:start="269:43" pos:end="269:43">!</operator><name pos:start="269:44" pos:end="269:49">source</name><operator pos:start="269:50" pos:end="269:50">)</operator>

        <operator pos:start="271:9" pos:end="271:10">&amp;&amp;</operator> <name pos:start="271:12" pos:end="271:15">mode</name> <operator pos:start="271:17" pos:end="271:18">!=</operator> <name pos:start="271:20" pos:end="271:42">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition>

    <block pos:start="273:5" pos:end="283:5">{<block_content pos:start="277:9" pos:end="281:74">

        <comment type="block" pos:start="275:9" pos:end="275:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="277:9" pos:end="277:30"><expr pos:start="277:9" pos:end="277:29"><call pos:start="277:9" pos:end="277:29"><name pos:start="277:9" pos:end="277:14">assert</name><argument_list pos:start="277:15" pos:end="277:29">(<argument pos:start="277:16" pos:end="277:28"><expr pos:start="277:16" pos:end="277:28"><name pos:start="277:16" pos:end="277:21">format</name> <operator pos:start="277:23" pos:end="277:24">&amp;&amp;</operator> <name pos:start="277:26" pos:end="277:28">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="281:74"><expr pos:start="279:9" pos:end="281:73"><call pos:start="279:9" pos:end="281:73"><name pos:start="279:9" pos:end="279:23">bdrv_img_create</name><argument_list pos:start="279:24" pos:end="281:73">(<argument pos:start="279:25" pos:end="279:30"><expr pos:start="279:25" pos:end="279:30"><name pos:start="279:25" pos:end="279:30">target</name></expr></argument>, <argument pos:start="279:33" pos:end="279:38"><expr pos:start="279:33" pos:end="279:38"><name pos:start="279:33" pos:end="279:38">format</name></expr></argument>,

                        <argument pos:start="281:25" pos:end="281:28"><expr pos:start="281:25" pos:end="281:28"><name pos:start="281:25" pos:end="281:28">NULL</name></expr></argument>, <argument pos:start="281:31" pos:end="281:34"><expr pos:start="281:31" pos:end="281:34"><name pos:start="281:31" pos:end="281:34">NULL</name></expr></argument>, <argument pos:start="281:37" pos:end="281:40"><expr pos:start="281:37" pos:end="281:40"><name pos:start="281:37" pos:end="281:40">NULL</name></expr></argument>, <argument pos:start="281:43" pos:end="281:46"><expr pos:start="281:43" pos:end="281:46"><name pos:start="281:43" pos:end="281:46">size</name></expr></argument>, <argument pos:start="281:49" pos:end="281:53"><expr pos:start="281:49" pos:end="281:53"><name pos:start="281:49" pos:end="281:53">flags</name></expr></argument>, <argument pos:start="281:56" pos:end="281:65"><expr pos:start="281:56" pos:end="281:65"><operator pos:start="281:56" pos:end="281:56">&amp;</operator><name pos:start="281:57" pos:end="281:65">local_err</name></expr></argument>, <argument pos:start="281:68" pos:end="281:72"><expr pos:start="281:68" pos:end="281:72"><name pos:start="281:68" pos:end="281:72">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="283:7" pos:end="311:5">else <block pos:start="283:12" pos:end="311:5">{<block_content pos:start="285:9" pos:end="309:9">

        <switch pos:start="285:9" pos:end="309:9">switch <condition pos:start="285:16" pos:end="285:21">(<expr pos:start="285:17" pos:end="285:20"><name pos:start="285:17" pos:end="285:20">mode</name></expr>)</condition> <block pos:start="285:23" pos:end="309:9">{<block_content pos:start="287:9" pos:end="307:20">

        <case pos:start="287:9" pos:end="287:37">case <expr pos:start="287:14" pos:end="287:36"><name pos:start="287:14" pos:end="287:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <break pos:start="289:13" pos:end="289:18">break;</break>

        <case pos:start="291:9" pos:end="291:43">case <expr pos:start="291:14" pos:end="291:42"><name pos:start="291:14" pos:end="291:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="293:13" pos:end="293:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="295:13" pos:end="301:66"><expr pos:start="295:13" pos:end="301:65"><call pos:start="295:13" pos:end="301:65"><name pos:start="295:13" pos:end="295:27">bdrv_img_create</name><argument_list pos:start="295:28" pos:end="301:65">(<argument pos:start="295:29" pos:end="295:34"><expr pos:start="295:29" pos:end="295:34"><name pos:start="295:29" pos:end="295:34">target</name></expr></argument>, <argument pos:start="295:37" pos:end="295:42"><expr pos:start="295:37" pos:end="295:42"><name pos:start="295:37" pos:end="295:42">format</name></expr></argument>,

                            <argument pos:start="297:29" pos:end="297:44"><expr pos:start="297:29" pos:end="297:44"><name pos:start="297:29" pos:end="297:44"><name pos:start="297:29" pos:end="297:34">source</name><operator pos:start="297:35" pos:end="297:36">-&gt;</operator><name pos:start="297:37" pos:end="297:44">filename</name></name></expr></argument>,

                            <argument pos:start="299:29" pos:end="299:52"><expr pos:start="299:29" pos:end="299:52"><name pos:start="299:29" pos:end="299:52"><name pos:start="299:29" pos:end="299:34">source</name><operator pos:start="299:35" pos:end="299:36">-&gt;</operator><name pos:start="299:37" pos:end="299:39">drv</name><operator pos:start="299:40" pos:end="299:41">-&gt;</operator><name pos:start="299:42" pos:end="299:52">format_name</name></name></expr></argument>,

                            <argument pos:start="301:29" pos:end="301:32"><expr pos:start="301:29" pos:end="301:32"><name pos:start="301:29" pos:end="301:32">NULL</name></expr></argument>, <argument pos:start="301:35" pos:end="301:38"><expr pos:start="301:35" pos:end="301:38"><name pos:start="301:35" pos:end="301:38">size</name></expr></argument>, <argument pos:start="301:41" pos:end="301:45"><expr pos:start="301:41" pos:end="301:45"><name pos:start="301:41" pos:end="301:45">flags</name></expr></argument>, <argument pos:start="301:48" pos:end="301:57"><expr pos:start="301:48" pos:end="301:57"><operator pos:start="301:48" pos:end="301:48">&amp;</operator><name pos:start="301:49" pos:end="301:57">local_err</name></expr></argument>, <argument pos:start="301:60" pos:end="301:64"><expr pos:start="301:60" pos:end="301:64"><name pos:start="301:60" pos:end="301:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="303:13" pos:end="303:18">break;</break>

        <default pos:start="305:9" pos:end="305:16">default:</default>

            <expr_stmt pos:start="307:13" pos:end="307:20"><expr pos:start="307:13" pos:end="307:19"><call pos:start="307:13" pos:end="307:19"><name pos:start="307:13" pos:end="307:17">abort</name><argument_list pos:start="307:18" pos:end="307:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="315:5" pos:end="321:5"><if pos:start="315:5" pos:end="321:5">if <condition pos:start="315:8" pos:end="315:18">(<expr pos:start="315:9" pos:end="315:17"><name pos:start="315:9" pos:end="315:17">local_err</name></expr>)</condition> <block pos:start="315:20" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:17">

        <expr_stmt pos:start="317:9" pos:end="317:41"><expr pos:start="317:9" pos:end="317:40"><call pos:start="317:9" pos:end="317:40"><name pos:start="317:9" pos:end="317:23">error_propagate</name><argument_list pos:start="317:24" pos:end="317:40">(<argument pos:start="317:25" pos:end="317:28"><expr pos:start="317:25" pos:end="317:28"><name pos:start="317:25" pos:end="317:28">errp</name></expr></argument>, <argument pos:start="317:31" pos:end="317:39"><expr pos:start="317:31" pos:end="317:39"><name pos:start="317:31" pos:end="317:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="319:9" pos:end="319:17">goto <name pos:start="319:14" pos:end="319:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="325:5" pos:end="331:5"><if pos:start="325:5" pos:end="331:5">if <condition pos:start="325:8" pos:end="325:22">(<expr pos:start="325:9" pos:end="325:21"><name pos:start="325:9" pos:end="325:21">has_node_name</name></expr>)</condition> <block pos:start="325:24" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:69">

        <expr_stmt pos:start="327:9" pos:end="327:30"><expr pos:start="327:9" pos:end="327:29"><name pos:start="327:9" pos:end="327:15">options</name> <operator pos:start="327:17" pos:end="327:17">=</operator> <call pos:start="327:19" pos:end="327:29"><name pos:start="327:19" pos:end="327:27">qdict_new</name><argument_list pos:start="327:28" pos:end="327:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:69"><expr pos:start="329:9" pos:end="329:68"><call pos:start="329:9" pos:end="329:68"><name pos:start="329:9" pos:end="329:17">qdict_put</name><argument_list pos:start="329:18" pos:end="329:68">(<argument pos:start="329:19" pos:end="329:25"><expr pos:start="329:19" pos:end="329:25"><name pos:start="329:19" pos:end="329:25">options</name></expr></argument>, <argument pos:start="329:28" pos:end="329:38"><expr pos:start="329:28" pos:end="329:38"><literal type="string" pos:start="329:28" pos:end="329:38">"node-name"</literal></expr></argument>, <argument pos:start="329:41" pos:end="329:67"><expr pos:start="329:41" pos:end="329:67"><call pos:start="329:41" pos:end="329:67"><name pos:start="329:41" pos:end="329:56">qstring_from_str</name><argument_list pos:start="329:57" pos:end="329:67">(<argument pos:start="329:58" pos:end="329:66"><expr pos:start="329:58" pos:end="329:66"><name pos:start="329:58" pos:end="329:66">node_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="335:5" pos:end="339:7">/* Mirroring takes care of copy-on-write using the source's backing

     * file.

     */</comment>

    <expr_stmt pos:start="341:5" pos:end="341:21"><expr pos:start="341:5" pos:end="341:20"><name pos:start="341:5" pos:end="341:13">target_bs</name> <operator pos:start="341:15" pos:end="341:15">=</operator> <name pos:start="341:17" pos:end="341:20">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="343:5" pos:end="345:64"><expr pos:start="343:5" pos:end="345:63"><name pos:start="343:5" pos:end="343:7">ret</name> <operator pos:start="343:9" pos:end="343:9">=</operator> <call pos:start="343:11" pos:end="345:63"><name pos:start="343:11" pos:end="343:19">bdrv_open</name><argument_list pos:start="343:20" pos:end="345:63">(<argument pos:start="343:21" pos:end="343:30"><expr pos:start="343:21" pos:end="343:30"><operator pos:start="343:21" pos:end="343:21">&amp;</operator><name pos:start="343:22" pos:end="343:30">target_bs</name></expr></argument>, <argument pos:start="343:33" pos:end="343:38"><expr pos:start="343:33" pos:end="343:38"><name pos:start="343:33" pos:end="343:38">target</name></expr></argument>, <argument pos:start="343:41" pos:end="343:44"><expr pos:start="343:41" pos:end="343:44"><name pos:start="343:41" pos:end="343:44">NULL</name></expr></argument>, <argument pos:start="343:47" pos:end="343:53"><expr pos:start="343:47" pos:end="343:53"><name pos:start="343:47" pos:end="343:53">options</name></expr></argument>,

                    <argument pos:start="345:21" pos:end="345:45"><expr pos:start="345:21" pos:end="345:45"><name pos:start="345:21" pos:end="345:25">flags</name> <operator pos:start="345:27" pos:end="345:27">|</operator> <name pos:start="345:29" pos:end="345:45">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="345:48" pos:end="345:50"><expr pos:start="345:48" pos:end="345:50"><name pos:start="345:48" pos:end="345:50">drv</name></expr></argument>, <argument pos:start="345:53" pos:end="345:62"><expr pos:start="345:53" pos:end="345:62"><operator pos:start="345:53" pos:end="345:53">&amp;</operator><name pos:start="345:54" pos:end="345:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="347:5" pos:end="353:5"><if pos:start="347:5" pos:end="353:5">if <condition pos:start="347:8" pos:end="347:16">(<expr pos:start="347:9" pos:end="347:15"><name pos:start="347:9" pos:end="347:11">ret</name> <operator pos:start="347:13" pos:end="347:13">&lt;</operator> <literal type="number" pos:start="347:15" pos:end="347:15">0</literal></expr>)</condition> <block pos:start="347:18" pos:end="353:5">{<block_content pos:start="349:9" pos:end="351:17">

        <expr_stmt pos:start="349:9" pos:end="349:41"><expr pos:start="349:9" pos:end="349:40"><call pos:start="349:9" pos:end="349:40"><name pos:start="349:9" pos:end="349:23">error_propagate</name><argument_list pos:start="349:24" pos:end="349:40">(<argument pos:start="349:25" pos:end="349:28"><expr pos:start="349:25" pos:end="349:28"><name pos:start="349:25" pos:end="349:28">errp</name></expr></argument>, <argument pos:start="349:31" pos:end="349:39"><expr pos:start="349:31" pos:end="349:39"><name pos:start="349:31" pos:end="349:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="351:9" pos:end="351:17">goto <name pos:start="351:14" pos:end="351:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="357:5" pos:end="357:49"><expr pos:start="357:5" pos:end="357:48"><call pos:start="357:5" pos:end="357:48"><name pos:start="357:5" pos:end="357:24">bdrv_set_aio_context</name><argument_list pos:start="357:25" pos:end="357:48">(<argument pos:start="357:26" pos:end="357:34"><expr pos:start="357:26" pos:end="357:34"><name pos:start="357:26" pos:end="357:34">target_bs</name></expr></argument>, <argument pos:start="357:37" pos:end="357:47"><expr pos:start="357:37" pos:end="357:47"><name pos:start="357:37" pos:end="357:47">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="361:5" pos:end="365:7">/* pass the node name to replace to mirror start since it's loose coupling

     * and will allow to check whether the node still exist at mirror completion

     */</comment>

    <expr_stmt pos:start="367:5" pos:end="377:47"><expr pos:start="367:5" pos:end="377:46"><call pos:start="367:5" pos:end="377:46"><name pos:start="367:5" pos:end="367:16">mirror_start</name><argument_list pos:start="367:17" pos:end="377:46">(<argument pos:start="367:18" pos:end="367:19"><expr pos:start="367:18" pos:end="367:19"><name pos:start="367:18" pos:end="367:19">bs</name></expr></argument>, <argument pos:start="367:22" pos:end="367:30"><expr pos:start="367:22" pos:end="367:30"><name pos:start="367:22" pos:end="367:30">target_bs</name></expr></argument>,

                 <argument pos:start="369:18" pos:end="369:47"><expr pos:start="369:18" pos:end="369:47"><ternary pos:start="369:18" pos:end="369:47"><condition pos:start="369:18" pos:end="369:31"><expr pos:start="369:18" pos:end="369:29"><name pos:start="369:18" pos:end="369:29">has_replaces</name></expr> ?</condition><then pos:start="369:33" pos:end="369:40"> <expr pos:start="369:33" pos:end="369:40"><name pos:start="369:33" pos:end="369:40">replaces</name></expr> </then><else pos:start="369:42" pos:end="369:47">: <expr pos:start="369:44" pos:end="369:47"><name pos:start="369:44" pos:end="369:47">NULL</name></expr></else></ternary></expr></argument>,

                 <argument pos:start="371:18" pos:end="371:22"><expr pos:start="371:18" pos:end="371:22"><name pos:start="371:18" pos:end="371:22">speed</name></expr></argument>, <argument pos:start="371:25" pos:end="371:35"><expr pos:start="371:25" pos:end="371:35"><name pos:start="371:25" pos:end="371:35">granularity</name></expr></argument>, <argument pos:start="371:38" pos:end="371:45"><expr pos:start="371:38" pos:end="371:45"><name pos:start="371:38" pos:end="371:45">buf_size</name></expr></argument>, <argument pos:start="371:48" pos:end="371:51"><expr pos:start="371:48" pos:end="371:51"><name pos:start="371:48" pos:end="371:51">sync</name></expr></argument>,

                 <argument pos:start="373:18" pos:end="373:32"><expr pos:start="373:18" pos:end="373:32"><name pos:start="373:18" pos:end="373:32">on_source_error</name></expr></argument>, <argument pos:start="373:35" pos:end="373:49"><expr pos:start="373:35" pos:end="373:49"><name pos:start="373:35" pos:end="373:49">on_target_error</name></expr></argument>,

                 <argument pos:start="375:18" pos:end="375:22"><expr pos:start="375:18" pos:end="375:22"><name pos:start="375:18" pos:end="375:22">unmap</name></expr></argument>,

                 <argument pos:start="377:18" pos:end="377:29"><expr pos:start="377:18" pos:end="377:29"><name pos:start="377:18" pos:end="377:29">block_job_cb</name></expr></argument>, <argument pos:start="377:32" pos:end="377:33"><expr pos:start="377:32" pos:end="377:33"><name pos:start="377:32" pos:end="377:33">bs</name></expr></argument>, <argument pos:start="377:36" pos:end="377:45"><expr pos:start="377:36" pos:end="377:45"><operator pos:start="377:36" pos:end="377:36">&amp;</operator><name pos:start="377:37" pos:end="377:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="379:5" pos:end="387:5"><if pos:start="379:5" pos:end="387:5">if <condition pos:start="379:8" pos:end="379:26">(<expr pos:start="379:9" pos:end="379:25"><name pos:start="379:9" pos:end="379:17">local_err</name> <operator pos:start="379:19" pos:end="379:20">!=</operator> <name pos:start="379:22" pos:end="379:25">NULL</name></expr>)</condition> <block pos:start="379:28" pos:end="387:5">{<block_content pos:start="381:9" pos:end="385:17">

        <expr_stmt pos:start="381:9" pos:end="381:30"><expr pos:start="381:9" pos:end="381:29"><call pos:start="381:9" pos:end="381:29"><name pos:start="381:9" pos:end="381:18">bdrv_unref</name><argument_list pos:start="381:19" pos:end="381:29">(<argument pos:start="381:20" pos:end="381:28"><expr pos:start="381:20" pos:end="381:28"><name pos:start="381:20" pos:end="381:28">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:41"><expr pos:start="383:9" pos:end="383:40"><call pos:start="383:9" pos:end="383:40"><name pos:start="383:9" pos:end="383:23">error_propagate</name><argument_list pos:start="383:24" pos:end="383:40">(<argument pos:start="383:25" pos:end="383:28"><expr pos:start="383:25" pos:end="383:28"><name pos:start="383:25" pos:end="383:28">errp</name></expr></argument>, <argument pos:start="383:31" pos:end="383:39"><expr pos:start="383:31" pos:end="383:39"><name pos:start="383:31" pos:end="383:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="385:9" pos:end="385:17">goto <name pos:start="385:14" pos:end="385:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="391:1" pos:end="391:4"><name pos:start="391:1" pos:end="391:3">out</name>:</label>

    <expr_stmt pos:start="393:5" pos:end="393:37"><expr pos:start="393:5" pos:end="393:36"><call pos:start="393:5" pos:end="393:36"><name pos:start="393:5" pos:end="393:23">aio_context_release</name><argument_list pos:start="393:24" pos:end="393:36">(<argument pos:start="393:25" pos:end="393:35"><expr pos:start="393:25" pos:end="393:35"><name pos:start="393:25" pos:end="393:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
