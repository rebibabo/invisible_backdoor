<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2683.c" pos:tabs="8"><function pos:start="1:1" pos:end="623:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:37">yuv2packed2</name>)<parameter_list pos:start="1:39" pos:end="3:82">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:49">SwsContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">c</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:62">uint16_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">buf0</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:84"><decl pos:start="1:71" pos:end="1:84"><type pos:start="1:71" pos:end="1:84"><name pos:start="1:71" pos:end="1:78">uint16_t</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:84">buf1</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:102"><decl pos:start="1:87" pos:end="1:102"><type pos:start="1:87" pos:end="1:102"><name pos:start="1:87" pos:end="1:94">uint16_t</name> <modifier pos:start="1:96" pos:end="1:96">*</modifier></type><name pos:start="1:97" pos:end="1:102">uvbuf0</name></decl></parameter>, <parameter pos:start="1:105" pos:end="1:120"><decl pos:start="1:105" pos:end="1:120"><type pos:start="1:105" pos:end="1:120"><name pos:start="1:105" pos:end="1:112">uint16_t</name> <modifier pos:start="1:114" pos:end="1:114">*</modifier></type><name pos:start="1:115" pos:end="1:120">uvbuf1</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:33">uint8_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">dest</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:49"><decl pos:start="3:42" pos:end="3:49"><type pos:start="3:42" pos:end="3:49"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:49">dstW</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:61"><decl pos:start="3:52" pos:end="3:61"><type pos:start="3:52" pos:end="3:61"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:61">yalpha</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:74"><decl pos:start="3:64" pos:end="3:74"><type pos:start="3:64" pos:end="3:74"><name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:74">uvalpha</name></decl></parameter>, <parameter pos:start="3:77" pos:end="3:81"><decl pos:start="3:77" pos:end="3:81"><type pos:start="3:77" pos:end="3:81"><name pos:start="3:77" pos:end="3:79">int</name></type> <name pos:start="3:81" pos:end="3:81">y</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="623:1">{<block_content pos:start="7:5" pos:end="621:66">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">yalpha1</name><init pos:start="7:16" pos:end="7:27">=<expr pos:start="7:17" pos:end="7:27"><name pos:start="7:17" pos:end="7:22">yalpha</name><operator pos:start="7:23" pos:end="7:23">^</operator><literal type="number" pos:start="7:24" pos:end="7:27">4095</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">uvalpha1</name><init pos:start="9:17" pos:end="9:29">=<expr pos:start="9:18" pos:end="9:29"><name pos:start="9:18" pos:end="9:24">uvalpha</name><operator pos:start="9:25" pos:end="9:25">^</operator><literal type="number" pos:start="9:26" pos:end="9:29">4095</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="446:0"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:5"><literal type="number" pos:start="15:5" pos:end="15:5">0</literal></expr></cpp:if> <comment type="line" pos:start="15:7" pos:end="15:18">//isn't used</comment>

    if (flags&amp;SWS_FULL_CHR_H_INT)

    {

        switch(dstFormat)

        {

<cpp:ifdef pos:start="25:1" pos:end="25:15">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:15">HAVE_MMX</name></cpp:ifdef>

        case PIX_FMT_RGB32:

            asm volatile(





FULL_YSCALEYUV2RGB

            "punpcklbw %%mm1, %%mm3    \n\t" <comment type="line" pos:start="37:46" pos:end="37:56">// BGBGBGBG</comment>

            "punpcklbw %%mm7, %%mm0    \n\t" <comment type="line" pos:start="39:46" pos:end="39:56">// R0R0R0R0</comment>



            "movq      %%mm3, %%mm1    \n\t"

            "punpcklwd %%mm0, %%mm3    \n\t" <comment type="line" pos:start="45:46" pos:end="45:56">// BGR0BGR0</comment>

            "punpckhwd %%mm0, %%mm1    \n\t" <comment type="line" pos:start="47:46" pos:end="47:56">// BGR0BGR0</comment>



            MOVNTQ(%%mm3,  (%4, %%REGa, 4))

            MOVNTQ(%%mm1, 8(%4, %%REGa, 4))



            "add $4, %%"REG_a"  \n\t"

            "cmp %5, %%"REG_a"  \n\t"

            " jb 1b             \n\t"



            :: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "r" (dest), "m" ((long)dstW),

            "m" (yalpha1), "m" (uvalpha1)

            : "%"REG_a

            );

            break;

        case PIX_FMT_BGR24:

            asm volatile(



FULL_YSCALEYUV2RGB



                                              <comment type="line" pos:start="85:47" pos:end="85:60">// lsb ... msb</comment>

            "punpcklbw %%mm1, %%mm3     \n\t" <comment type="line" pos:start="87:47" pos:end="87:57">// BGBGBGBG</comment>

            "punpcklbw %%mm7, %%mm0     \n\t" <comment type="line" pos:start="89:47" pos:end="89:57">// R0R0R0R0</comment>



            "movq      %%mm3, %%mm1     \n\t"

            "punpcklwd %%mm0, %%mm3     \n\t" <comment type="line" pos:start="95:47" pos:end="95:57">// BGR0BGR0</comment>

            "punpckhwd %%mm0, %%mm1     \n\t" <comment type="line" pos:start="97:47" pos:end="97:57">// BGR0BGR0</comment>



            "movq      %%mm3, %%mm2     \n\t" <comment type="line" pos:start="101:47" pos:end="101:57">// BGR0BGR0</comment>

            "psrlq        $8, %%mm3     \n\t" <comment type="line" pos:start="103:47" pos:end="103:57">// GR0BGR00</comment>

            "pand "MANGLE(bm00000111)", %%mm2   \n\t" <comment type="line" pos:start="105:55" pos:end="105:65">// BGR00000</comment>

            "pand "MANGLE(bm11111000)", %%mm3   \n\t" <comment type="line" pos:start="107:55" pos:end="107:65">// 000BGR00</comment>

            "por       %%mm2, %%mm3     \n\t" <comment type="line" pos:start="109:47" pos:end="109:57">// BGRBGR00</comment>

            "movq      %%mm1, %%mm2     \n\t"

            "psllq       $48, %%mm1     \n\t" <comment type="line" pos:start="113:47" pos:end="113:57">// 000000BG</comment>

            "por       %%mm1, %%mm3     \n\t" <comment type="line" pos:start="115:47" pos:end="115:57">// BGRBGRBG</comment>



            "movq      %%mm2, %%mm1     \n\t" <comment type="line" pos:start="119:47" pos:end="119:57">// BGR0BGR0</comment>

            "psrld       $16, %%mm2     \n\t" <comment type="line" pos:start="121:47" pos:end="121:57">// R000R000</comment>

            "psrlq       $24, %%mm1     \n\t" <comment type="line" pos:start="123:47" pos:end="123:57">// 0BGR0000</comment>

            "por       %%mm2, %%mm1     \n\t" <comment type="line" pos:start="125:47" pos:end="125:57">// RBGRR000</comment>



            "mov          %4, %%"REG_b" \n\t"

            "add   %%"REG_a", %%"REG_b" \n\t"



<cpp:ifdef pos:start="135:1" pos:end="135:16">#<cpp:directive pos:start="135:2" pos:end="135:6">ifdef</cpp:directive> <name pos:start="135:8" pos:end="135:16">HAVE_MMX2</name></cpp:ifdef>

            <comment type="line" pos:start="137:13" pos:end="137:29">//FIXME Alignment</comment>

            "movntq %%mm3,  (%%"REG_b", %%"REG_a", 2)   \n\t"

            "movntq %%mm1, 8(%%"REG_b", %%"REG_a", 2)   \n\t"

<cpp:else pos:start="143:1" pos:end="143:5">#<cpp:directive pos:start="143:2" pos:end="143:5">else</cpp:directive></cpp:else>

            "movd %%mm3,  (%%"REG_b", %%"REG_a", 2)     \n\t"

            "psrlq  $32, %%mm3                          \n\t"

            "movd %%mm3, 4(%%"REG_b", %%"REG_a", 2)     \n\t"

            "movd %%mm1, 8(%%"REG_b", %%"REG_a", 2)     \n\t"

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

            "add     $4, %%"REG_a"                      \n\t"

            "cmp     %5, %%"REG_a"                      \n\t"

            " jb     1b                                 \n\t"



            :: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "m" (dest), "m" (dstW),

            "m" (yalpha1), "m" (uvalpha1)

            : "%"REG_a, "%"REG_b

            );

            break;

        case PIX_FMT_BGR555:

            asm volatile(



FULL_YSCALEYUV2RGB

<cpp:ifdef pos:start="181:1" pos:end="181:18">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:18">DITHER1XBPP</name></cpp:ifdef>

            "paddusb "MANGLE(g5Dither)", %%mm1  \n\t"

            "paddusb "MANGLE(r5Dither)", %%mm0  \n\t"

            "paddusb "MANGLE(b5Dither)", %%mm3  \n\t"

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

            "punpcklbw            %%mm7, %%mm1  \n\t" <comment type="line" pos:start="191:55" pos:end="191:65">// 0G0G0G0G</comment>

            "punpcklbw            %%mm7, %%mm3  \n\t" <comment type="line" pos:start="193:55" pos:end="193:65">// 0B0B0B0B</comment>

            "punpcklbw            %%mm7, %%mm0  \n\t" <comment type="line" pos:start="195:55" pos:end="195:65">// 0R0R0R0R</comment>



            "psrlw                   $3, %%mm3  \n\t"

            "psllw                   $2, %%mm1  \n\t"

            "psllw                   $7, %%mm0  \n\t"

            "pand     "MANGLE(g15Mask)", %%mm1  \n\t"

            "pand     "MANGLE(r15Mask)", %%mm0  \n\t"



            "por                  %%mm3, %%mm1  \n\t"

            "por                  %%mm1, %%mm0  \n\t"



            MOVNTQ(%%mm0, (%4, %%REGa, 2))



            "add $4, %%"REG_a"  \n\t"

            "cmp %5, %%"REG_a"  \n\t"

            " jb 1b             \n\t"



            :: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "r" (dest), "m" (dstW),

            "m" (yalpha1), "m" (uvalpha1)

            : "%"REG_a

            );

            break;

        case PIX_FMT_BGR565:

            asm volatile(



FULL_YSCALEYUV2RGB

<cpp:ifdef pos:start="247:1" pos:end="247:18">#<cpp:directive pos:start="247:2" pos:end="247:6">ifdef</cpp:directive> <name pos:start="247:8" pos:end="247:18">DITHER1XBPP</name></cpp:ifdef>

            "paddusb "MANGLE(g6Dither)", %%mm1  \n\t"

            "paddusb "MANGLE(r5Dither)", %%mm0  \n\t"

            "paddusb "MANGLE(b5Dither)", %%mm3  \n\t"

<cpp:endif pos:start="255:1" pos:end="255:6">#<cpp:directive pos:start="255:2" pos:end="255:6">endif</cpp:directive></cpp:endif>

            "punpcklbw            %%mm7, %%mm1  \n\t" <comment type="line" pos:start="257:55" pos:end="257:65">// 0G0G0G0G</comment>

            "punpcklbw            %%mm7, %%mm3  \n\t" <comment type="line" pos:start="259:55" pos:end="259:65">// 0B0B0B0B</comment>

            "punpcklbw            %%mm7, %%mm0  \n\t" <comment type="line" pos:start="261:55" pos:end="261:65">// 0R0R0R0R</comment>



            "psrlw                   $3, %%mm3  \n\t"

            "psllw                   $3, %%mm1  \n\t"

            "psllw                   $8, %%mm0  \n\t"

            "pand     "MANGLE(g16Mask)", %%mm1  \n\t"

            "pand     "MANGLE(r16Mask)", %%mm0  \n\t"



            "por                  %%mm3, %%mm1  \n\t"

            "por                  %%mm1, %%mm0  \n\t"



            MOVNTQ(%%mm0, (%4, %%REGa, 2))



            "add $4, %%"REG_a"  \n\t"

            "cmp %5, %%"REG_a"  \n\t"

            " jb 1b             \n\t"



            :: "r" (buf0), "r" (buf1), "r" (uvbuf0), "r" (uvbuf1), "r" (dest), "m" (dstW),

            "m" (yalpha1), "m" (uvalpha1)

            : "%"REG_a

            );

            break;

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="305:8" pos:end="305:21">/* HAVE_MMX */</comment>

        case PIX_FMT_BGR32:

<cpp:ifndef pos:start="309:1" pos:end="309:16">#<cpp:directive pos:start="309:2" pos:end="309:7">ifndef</cpp:directive> <name pos:start="309:9" pos:end="309:16">HAVE_MMX</name></cpp:ifndef>

        case PIX_FMT_RGB32:

<cpp:endif pos:start="313:1" pos:end="313:6">#<cpp:directive pos:start="313:2" pos:end="313:6">endif</cpp:directive></cpp:endif>

            if (dstFormat==PIX_FMT_RGB32)

            {

                int i;

<cpp:ifdef pos:start="321:1" pos:end="321:22">#<cpp:directive pos:start="321:2" pos:end="321:6">ifdef</cpp:directive> <name pos:start="321:8" pos:end="321:22">WORDS_BIGENDIAN</name></cpp:ifdef>

                dest++;

<cpp:endif pos:start="325:1" pos:end="325:6">#<cpp:directive pos:start="325:2" pos:end="325:6">endif</cpp:directive></cpp:endif>

                for (i=0;i&lt;dstW;i++){

                    <comment type="line" pos:start="329:21" pos:end="329:81">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

                    int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

                    int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

                    int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);

                    dest[0]=clip_table[((Y + yuvtab_40cf[U]) &gt;&gt;13)];

                    dest[1]=clip_table[((Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13)];

                    dest[2]=clip_table[((Y + yuvtab_3343[V]) &gt;&gt;13)];

                    dest+= 4;

                }

            }

            else if (dstFormat==PIX_FMT_BGR24)

            {

                int i;

                for (i=0;i&lt;dstW;i++){

                    <comment type="line" pos:start="357:21" pos:end="357:81">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

                    int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

                    int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

                    int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);

                    dest[0]=clip_table[((Y + yuvtab_40cf[U]) &gt;&gt;13)];

                    dest[1]=clip_table[((Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13)];

                    dest[2]=clip_table[((Y + yuvtab_3343[V]) &gt;&gt;13)];

                    dest+= 3;

                }

            }

            else if (dstFormat==PIX_FMT_BGR565)

            {

                int i;

                for (i=0;i&lt;dstW;i++){

                    <comment type="line" pos:start="385:21" pos:end="385:81">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

                    int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

                    int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

                    int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);



                    ((uint16_t*)dest)[i] =

                        clip_table16b[(Y + yuvtab_40cf[U]) &gt;&gt;13] |

                        clip_table16g[(Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13] |

                        clip_table16r[(Y + yuvtab_3343[V]) &gt;&gt;13];

                }

            }

            else if (dstFormat==PIX_FMT_BGR555)

            {

                int i;

                for (i=0;i&lt;dstW;i++){

                    <comment type="line" pos:start="415:21" pos:end="415:81">// vertical linear interpolation &amp;&amp; yuv2rgb in a single step:</comment>

                    int Y=yuvtab_2568[((buf0[i]*yalpha1+buf1[i]*yalpha)&gt;&gt;19)];

                    int U=((uvbuf0[i]*uvalpha1+uvbuf1[i]*uvalpha)&gt;&gt;19);

                    int V=((uvbuf0[i+2048]*uvalpha1+uvbuf1[i+2048]*uvalpha)&gt;&gt;19);



                    ((uint16_t*)dest)[i] =

                        clip_table15b[(Y + yuvtab_40cf[U]) &gt;&gt;13] |

                        clip_table15g[(Y + yuvtab_1a1e[V] + yuvtab_0c92[U]) &gt;&gt;13] |

                        clip_table15r[(Y + yuvtab_3343[V]) &gt;&gt;13];

                }

            }

        }<comment type="line" pos:start="437:10" pos:end="437:23">//FULL_UV_IPOL</comment>

    else

    {

<cpp:endif pos:start="443:1" pos:end="443:6">#<cpp:directive pos:start="443:2" pos:end="443:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="443:8" pos:end="443:14">// if 0</comment>

<cpp:ifdef pos:start="445:1" pos:end="445:15">#<cpp:directive pos:start="445:2" pos:end="445:6">ifdef</cpp:directive> <name pos:start="445:8" pos:end="445:15">HAVE_MMX</name></cpp:ifdef>

        <switch pos:start="447:9" pos:end="620:0">switch<condition pos:start="447:15" pos:end="447:28">(<expr pos:start="447:16" pos:end="447:27"><name pos:start="447:16" pos:end="447:27"><name pos:start="447:16" pos:end="447:16">c</name><operator pos:start="447:17" pos:end="447:18">-&gt;</operator><name pos:start="447:19" pos:end="447:27">dstFormat</name></name></expr>)</condition>

        <block pos:start="449:9" pos:end="620:0">{<block_content pos:start="453:13" pos:end="615:27">

            <comment type="line" pos:start="451:13" pos:end="451:86">//Note 8280 == DSTW_OFFSET but the preprocessor can't handle that there :(</comment>

            <case pos:start="453:13" pos:end="453:31">case <expr pos:start="453:18" pos:end="453:30"><name pos:start="453:18" pos:end="453:30">PIX_FMT_RGB32</name></expr>:</case>

                <asm pos:start="455:17" pos:end="477:18">asm <specifier pos:start="455:21" pos:end="455:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                WRITEBGR32(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="479:17" pos:end="479:23">return;</return>

            <case pos:start="481:13" pos:end="481:31">case <expr pos:start="481:18" pos:end="481:30"><name pos:start="481:18" pos:end="481:30">PIX_FMT_BGR24</name></expr>:</case>

                <asm pos:start="483:17" pos:end="503:18">asm <specifier pos:start="483:21" pos:end="483:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                WRITEBGR24(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="505:17" pos:end="505:23">return;</return>

            <case pos:start="507:13" pos:end="507:32">case <expr pos:start="507:18" pos:end="507:31"><name pos:start="507:18" pos:end="507:31">PIX_FMT_BGR555</name></expr>:</case>

                <asm pos:start="509:17" pos:end="545:18">asm <specifier pos:start="509:21" pos:end="509:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                <comment type="block" pos:start="519:17" pos:end="519:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="521:1" pos:end="521:18">#<cpp:directive pos:start="521:2" pos:end="521:6">ifdef</cpp:directive> <name pos:start="521:8" pos:end="521:18">DITHER1XBPP</name></cpp:ifdef>

                "paddusb "MANGLE(b5Dither)", %%mm2      \n\t"

                "paddusb "MANGLE(g5Dither)", %%mm4      \n\t"

                "paddusb "MANGLE(r5Dither)", %%mm5      \n\t"

<cpp:endif pos:start="529:1" pos:end="529:6">#<cpp:directive pos:start="529:2" pos:end="529:6">endif</cpp:directive></cpp:endif>



                WRITEBGR15(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"



                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="547:17" pos:end="547:23">return;</return>

            <case pos:start="549:13" pos:end="549:32">case <expr pos:start="549:18" pos:end="549:31"><name pos:start="549:18" pos:end="549:31">PIX_FMT_BGR565</name></expr>:</case>

                <asm pos:start="551:17" pos:end="585:18">asm <specifier pos:start="551:21" pos:end="551:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB(%%REGBP, %5)

                <comment type="block" pos:start="561:17" pos:end="561:54">/* mm2=B, %%mm4=G, %%mm5=R, %%mm7=0 */</comment>

<cpp:ifdef pos:start="563:1" pos:end="563:18">#<cpp:directive pos:start="563:2" pos:end="563:6">ifdef</cpp:directive> <name pos:start="563:8" pos:end="563:18">DITHER1XBPP</name></cpp:ifdef>

                "paddusb "MANGLE(b5Dither)", %%mm2      \n\t"

                "paddusb "MANGLE(g6Dither)", %%mm4      \n\t"

                "paddusb "MANGLE(r5Dither)", %%mm5      \n\t"

<cpp:endif pos:start="571:1" pos:end="571:6">#<cpp:directive pos:start="571:2" pos:end="571:6">endif</cpp:directive></cpp:endif>



                WRITEBGR16(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="587:17" pos:end="587:23">return;</return>

            <case pos:start="589:13" pos:end="589:33">case <expr pos:start="589:18" pos:end="589:32"><name pos:start="589:18" pos:end="589:32">PIX_FMT_YUYV422</name></expr>:</case>

                <asm pos:start="591:17" pos:end="611:18">asm <specifier pos:start="591:21" pos:end="591:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov %4, %%"REG_b"                        \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2PACKED(%%REGBP, %5)

                WRITEYUY2(%%REGb, 8280(%5), %%REGBP)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (uvbuf0), "D" (uvbuf1), "m" (dest),

                "a" (&amp;c-&gt;redDither)

                );</asm>

                <return pos:start="613:17" pos:end="613:23">return;</return>

            <default pos:start="615:13" pos:end="615:20">default:</default> <break pos:start="615:22" pos:end="615:27">break;</break>

        </block_content>}</block></switch>

<cpp:endif pos:start="619:1" pos:end="619:6">#<cpp:directive pos:start="619:2" pos:end="619:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="619:8" pos:end="619:17">//HAVE_MMX</comment>

<macro pos:start="621:1" pos:end="621:66"><name pos:start="621:1" pos:end="621:21">YSCALE_YUV_2_ANYRGB_C</name><argument_list pos:start="621:22" pos:end="621:66">(<argument pos:start="621:23" pos:end="621:41">YSCALE_YUV_2_RGB2_C</argument>, <argument pos:start="621:44" pos:end="621:65">YSCALE_YUV_2_PACKED2_C</argument>)</argument_list></macro>

</block_content>}</block></function>
</unit>
