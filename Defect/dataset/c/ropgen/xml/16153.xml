<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16153.c" pos:tabs="8"><function pos:start="1:1" pos:end="27:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">laio_io_unplug</name><parameter_list pos:start="1:20" pos:end="1:69">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">aio_ctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:68"><decl pos:start="1:58" pos:end="1:68"><type pos:start="1:58" pos:end="1:68"><name pos:start="1:58" pos:end="1:61">bool</name></type> <name pos:start="1:63" pos:end="1:68">unplug</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="27:1">{<block_content pos:start="5:5" pos:end="25:5">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">qemu_laio_state</name></name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:29">s</name> <init pos:start="5:31" pos:end="5:39">= <expr pos:start="5:33" pos:end="5:39"><name pos:start="5:33" pos:end="5:39">aio_ctx</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:43"><expr pos:start="9:5" pos:end="9:42"><call pos:start="9:5" pos:end="9:42"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:42">(<argument pos:start="9:12" pos:end="9:41"><expr pos:start="9:12" pos:end="9:41"><name pos:start="9:12" pos:end="9:26"><name pos:start="9:12" pos:end="9:12">s</name><operator pos:start="9:13" pos:end="9:14">-&gt;</operator><name pos:start="9:15" pos:end="9:18">io_q</name><operator pos:start="9:19" pos:end="9:19">.</operator><name pos:start="9:20" pos:end="9:26">plugged</name></name> <operator pos:start="9:28" pos:end="9:28">&gt;</operator> <literal type="number" pos:start="9:30" pos:end="9:30">0</literal> <operator pos:start="9:32" pos:end="9:33">||</operator> <operator pos:start="9:35" pos:end="9:35">!</operator><name pos:start="9:36" pos:end="9:41">unplug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:40">(<expr pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:14">unplug</name> <operator pos:start="13:16" pos:end="13:17">&amp;&amp;</operator> <operator pos:start="13:19" pos:end="13:20">--</operator><name pos:start="13:21" pos:end="13:35"><name pos:start="13:21" pos:end="13:21">s</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:27">io_q</name><operator pos:start="13:28" pos:end="13:28">.</operator><name pos:start="13:29" pos:end="13:35">plugged</name></name> <operator pos:start="13:37" pos:end="13:37">&gt;</operator> <literal type="number" pos:start="13:39" pos:end="13:39">0</literal></expr>)</condition> <block pos:start="13:42" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:62">(<expr pos:start="21:9" pos:end="21:61"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:10">s</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:16">io_q</name><operator pos:start="21:17" pos:end="21:17">.</operator><name pos:start="21:18" pos:end="21:24">blocked</name></name> <operator pos:start="21:26" pos:end="21:27">&amp;&amp;</operator> <operator pos:start="21:29" pos:end="21:29">!</operator><call pos:start="21:30" pos:end="21:61"><name pos:start="21:30" pos:end="21:43">QSIMPLEQ_EMPTY</name><argument_list pos:start="21:44" pos:end="21:61">(<argument pos:start="21:45" pos:end="21:60"><expr pos:start="21:45" pos:end="21:60"><operator pos:start="21:45" pos:end="21:45">&amp;</operator><name pos:start="21:46" pos:end="21:60"><name pos:start="21:46" pos:end="21:46">s</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:52">io_q</name><operator pos:start="21:53" pos:end="21:53">.</operator><name pos:start="21:54" pos:end="21:60">pending</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:64" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:22">

        <expr_stmt pos:start="23:9" pos:end="23:22"><expr pos:start="23:9" pos:end="23:21"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:18">ioq_submit</name><argument_list pos:start="23:19" pos:end="23:21">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
