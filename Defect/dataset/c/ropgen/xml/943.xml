<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/943.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">save_xbzrle_page</name><parameter_list pos:start="1:28" pos:end="5:63">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:36">RAMState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">rs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:64"><decl pos:start="1:43" pos:end="1:64"><type pos:start="1:43" pos:end="1:64"><name pos:start="1:43" pos:end="1:49">uint8_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:64">current_data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:51"><decl pos:start="3:29" pos:end="3:51"><type pos:start="3:29" pos:end="3:51"><name pos:start="3:29" pos:end="3:38">ram_addr_t</name></type> <name pos:start="3:40" pos:end="3:51">current_addr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">RAMBlock</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:68">block</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:45"><decl pos:start="5:29" pos:end="5:45"><type pos:start="5:29" pos:end="5:45"><name pos:start="5:29" pos:end="5:38">ram_addr_t</name></type> <name pos:start="5:40" pos:end="5:45">offset</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:62"><decl pos:start="5:48" pos:end="5:62"><type pos:start="5:48" pos:end="5:62"><name pos:start="5:48" pos:end="5:51">bool</name></type> <name pos:start="5:53" pos:end="5:62">last_stage</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="125:1">{<block_content pos:start="9:5" pos:end="123:13">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">encoded_len</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>, <decl pos:start="9:26" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:37">bytes_xbzrle</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:29">prev_cached_page</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="41:5"><if pos:start="15:5" pos:end="41:5">if <condition pos:start="15:8" pos:end="15:76">(<expr pos:start="15:9" pos:end="15:75"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:75"><name pos:start="15:10" pos:end="15:24">cache_is_cached</name><argument_list pos:start="15:25" pos:end="15:75">(<argument pos:start="15:26" pos:end="15:37"><expr pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:31">XBZRLE</name><operator pos:start="15:32" pos:end="15:32">.</operator><name pos:start="15:33" pos:end="15:37">cache</name></name></expr></argument>, <argument pos:start="15:40" pos:end="15:51"><expr pos:start="15:40" pos:end="15:51"><name pos:start="15:40" pos:end="15:51">current_addr</name></expr></argument>, <argument pos:start="15:54" pos:end="15:74"><expr pos:start="15:54" pos:end="15:74"><name pos:start="15:54" pos:end="15:74"><name pos:start="15:54" pos:end="15:55">rs</name><operator pos:start="15:56" pos:end="15:57">-&gt;</operator><name pos:start="15:58" pos:end="15:74">bitmap_sync_count</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:78" pos:end="41:5">{<block_content pos:start="17:9" pos:end="39:18">

        <expr_stmt pos:start="17:9" pos:end="17:32"><expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:10">rs</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:29">xbzrle_cache_miss</name></name><operator pos:start="17:30" pos:end="17:31">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="37:9"><if pos:start="19:9" pos:end="37:9">if <condition pos:start="19:12" pos:end="19:24">(<expr pos:start="19:13" pos:end="19:23"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:23">last_stage</name></expr>)</condition> <block pos:start="19:26" pos:end="37:9">{<block_content pos:start="21:13" pos:end="35:13">

            <if_stmt pos:start="21:13" pos:end="35:13"><if pos:start="21:13" pos:end="27:13">if <condition pos:start="21:16" pos:end="23:58">(<expr pos:start="21:17" pos:end="23:57"><call pos:start="21:17" pos:end="23:51"><name pos:start="21:17" pos:end="21:28">cache_insert</name><argument_list pos:start="21:29" pos:end="23:51">(<argument pos:start="21:30" pos:end="21:41"><expr pos:start="21:30" pos:end="21:41"><name pos:start="21:30" pos:end="21:41"><name pos:start="21:30" pos:end="21:35">XBZRLE</name><operator pos:start="21:36" pos:end="21:36">.</operator><name pos:start="21:37" pos:end="21:41">cache</name></name></expr></argument>, <argument pos:start="21:44" pos:end="21:55"><expr pos:start="21:44" pos:end="21:55"><name pos:start="21:44" pos:end="21:55">current_addr</name></expr></argument>, <argument pos:start="21:58" pos:end="21:70"><expr pos:start="21:58" pos:end="21:70"><operator pos:start="21:58" pos:end="21:58">*</operator><name pos:start="21:59" pos:end="21:70">current_data</name></expr></argument>,

                             <argument pos:start="23:30" pos:end="23:50"><expr pos:start="23:30" pos:end="23:50"><name pos:start="23:30" pos:end="23:50"><name pos:start="23:30" pos:end="23:31">rs</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:50">bitmap_sync_count</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:53" pos:end="23:54">==</operator> <operator pos:start="23:56" pos:end="23:56">-</operator><literal type="number" pos:start="23:57" pos:end="23:57">1</literal></expr>)</condition> <block pos:start="23:60" pos:end="27:13">{<block_content pos:start="25:17" pos:end="25:26">

                <return pos:start="25:17" pos:end="25:26">return <expr pos:start="25:24" pos:end="25:25"><operator pos:start="25:24" pos:end="25:24">-</operator><literal type="number" pos:start="25:25" pos:end="25:25">1</literal></expr>;</return>

            </block_content>}</block></if> <else pos:start="27:15" pos:end="35:13">else <block pos:start="27:20" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:76">

                <comment type="block" pos:start="29:17" pos:end="31:41">/* update *current_data when the page has been

                   inserted into cache */</comment>

                <expr_stmt pos:start="33:17" pos:end="33:76"><expr pos:start="33:17" pos:end="33:75"><operator pos:start="33:17" pos:end="33:17">*</operator><name pos:start="33:18" pos:end="33:29">current_data</name> <operator pos:start="33:31" pos:end="33:31">=</operator> <call pos:start="33:33" pos:end="33:75"><name pos:start="33:33" pos:end="33:47">get_cached_data</name><argument_list pos:start="33:48" pos:end="33:75">(<argument pos:start="33:49" pos:end="33:60"><expr pos:start="33:49" pos:end="33:60"><name pos:start="33:49" pos:end="33:60"><name pos:start="33:49" pos:end="33:54">XBZRLE</name><operator pos:start="33:55" pos:end="33:55">.</operator><name pos:start="33:56" pos:end="33:60">cache</name></name></expr></argument>, <argument pos:start="33:63" pos:end="33:74"><expr pos:start="33:63" pos:end="33:74"><name pos:start="33:63" pos:end="33:74">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:67"><expr pos:start="45:5" pos:end="45:66"><name pos:start="45:5" pos:end="45:20">prev_cached_page</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:66"><name pos:start="45:24" pos:end="45:38">get_cached_data</name><argument_list pos:start="45:39" pos:end="45:66">(<argument pos:start="45:40" pos:end="45:51"><expr pos:start="45:40" pos:end="45:51"><name pos:start="45:40" pos:end="45:51"><name pos:start="45:40" pos:end="45:45">XBZRLE</name><operator pos:start="45:46" pos:end="45:46">.</operator><name pos:start="45:47" pos:end="45:51">cache</name></name></expr></argument>, <argument pos:start="45:54" pos:end="45:65"><expr pos:start="45:54" pos:end="45:65"><name pos:start="45:54" pos:end="45:65">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:41">/* save current buffer into memory */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:64"><expr pos:start="51:5" pos:end="51:63"><call pos:start="51:5" pos:end="51:63"><name pos:start="51:5" pos:end="51:10">memcpy</name><argument_list pos:start="51:11" pos:end="51:63">(<argument pos:start="51:12" pos:end="51:29"><expr pos:start="51:12" pos:end="51:29"><name pos:start="51:12" pos:end="51:29"><name pos:start="51:12" pos:end="51:17">XBZRLE</name><operator pos:start="51:18" pos:end="51:18">.</operator><name pos:start="51:19" pos:end="51:29">current_buf</name></name></expr></argument>, <argument pos:start="51:32" pos:end="51:44"><expr pos:start="51:32" pos:end="51:44"><operator pos:start="51:32" pos:end="51:32">*</operator><name pos:start="51:33" pos:end="51:44">current_data</name></expr></argument>, <argument pos:start="51:47" pos:end="51:62"><expr pos:start="51:47" pos:end="51:62"><name pos:start="51:47" pos:end="51:62">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:51">/* XBZRLE encoding (if there is no overflow) */</comment>

    <expr_stmt pos:start="57:5" pos:end="61:57"><expr pos:start="57:5" pos:end="61:56"><name pos:start="57:5" pos:end="57:15">encoded_len</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="61:56"><name pos:start="57:19" pos:end="57:38">xbzrle_encode_buffer</name><argument_list pos:start="57:39" pos:end="61:56">(<argument pos:start="57:40" pos:end="57:55"><expr pos:start="57:40" pos:end="57:55"><name pos:start="57:40" pos:end="57:55">prev_cached_page</name></expr></argument>, <argument pos:start="57:58" pos:end="57:75"><expr pos:start="57:58" pos:end="57:75"><name pos:start="57:58" pos:end="57:75"><name pos:start="57:58" pos:end="57:63">XBZRLE</name><operator pos:start="57:64" pos:end="57:64">.</operator><name pos:start="57:65" pos:end="57:75">current_buf</name></name></expr></argument>,

                                       <argument pos:start="59:40" pos:end="59:55"><expr pos:start="59:40" pos:end="59:55"><name pos:start="59:40" pos:end="59:55">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="59:58" pos:end="59:75"><expr pos:start="59:58" pos:end="59:75"><name pos:start="59:58" pos:end="59:75"><name pos:start="59:58" pos:end="59:63">XBZRLE</name><operator pos:start="59:64" pos:end="59:64">.</operator><name pos:start="59:65" pos:end="59:75">encoded_buf</name></name></expr></argument>,

                                       <argument pos:start="61:40" pos:end="61:55"><expr pos:start="61:40" pos:end="61:55"><name pos:start="61:40" pos:end="61:55">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="87:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:25">(<expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:19">encoded_len</name> <operator pos:start="63:21" pos:end="63:22">==</operator> <literal type="number" pos:start="63:24" pos:end="63:24">0</literal></expr>)</condition> <block pos:start="63:27" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:17">

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><call pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:39">trace_save_xbzrle_page_skipping</name><argument_list pos:start="65:40" pos:end="65:41">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:17">return <expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="87:5">else if <condition pos:start="69:15" pos:end="69:33">(<expr pos:start="69:16" pos:end="69:32"><name pos:start="69:16" pos:end="69:26">encoded_len</name> <operator pos:start="69:28" pos:end="69:29">==</operator> <operator pos:start="69:31" pos:end="69:31">-</operator><literal type="number" pos:start="69:32" pos:end="69:32">1</literal></expr>)</condition> <block pos:start="69:35" pos:end="87:5">{<block_content pos:start="71:9" pos:end="85:18">

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><call pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:39">trace_save_xbzrle_page_overflow</name><argument_list pos:start="71:40" pos:end="71:41">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:10">rs</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:28">xbzrle_overflows</name></name><operator pos:start="73:29" pos:end="73:30">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="75:9" pos:end="75:38">/* update data in the cache */</comment>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:24">(<expr pos:start="77:13" pos:end="77:23"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:23">last_stage</name></expr>)</condition> <block pos:start="77:26" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:45">

            <expr_stmt pos:start="79:13" pos:end="79:70"><expr pos:start="79:13" pos:end="79:69"><call pos:start="79:13" pos:end="79:69"><name pos:start="79:13" pos:end="79:18">memcpy</name><argument_list pos:start="79:19" pos:end="79:69">(<argument pos:start="79:20" pos:end="79:35"><expr pos:start="79:20" pos:end="79:35"><name pos:start="79:20" pos:end="79:35">prev_cached_page</name></expr></argument>, <argument pos:start="79:38" pos:end="79:50"><expr pos:start="79:38" pos:end="79:50"><operator pos:start="79:38" pos:end="79:38">*</operator><name pos:start="79:39" pos:end="79:50">current_data</name></expr></argument>, <argument pos:start="79:53" pos:end="79:68"><expr pos:start="79:53" pos:end="79:68"><name pos:start="79:53" pos:end="79:68">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:45"><expr pos:start="81:13" pos:end="81:44"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:25">current_data</name> <operator pos:start="81:27" pos:end="81:27">=</operator> <name pos:start="81:29" pos:end="81:44">prev_cached_page</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="85:9" pos:end="85:18">return <expr pos:start="85:16" pos:end="85:17"><operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:80">/* we need to update the data in the cache, in order to get the same data */</comment>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:20">(<expr pos:start="93:9" pos:end="93:19"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:19">last_stage</name></expr>)</condition> <block pos:start="93:22" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:71">

        <expr_stmt pos:start="95:9" pos:end="95:71"><expr pos:start="95:9" pos:end="95:70"><call pos:start="95:9" pos:end="95:70"><name pos:start="95:9" pos:end="95:14">memcpy</name><argument_list pos:start="95:15" pos:end="95:70">(<argument pos:start="95:16" pos:end="95:31"><expr pos:start="95:16" pos:end="95:31"><name pos:start="95:16" pos:end="95:31">prev_cached_page</name></expr></argument>, <argument pos:start="95:34" pos:end="95:51"><expr pos:start="95:34" pos:end="95:51"><name pos:start="95:34" pos:end="95:51"><name pos:start="95:34" pos:end="95:39">XBZRLE</name><operator pos:start="95:40" pos:end="95:40">.</operator><name pos:start="95:41" pos:end="95:51">current_buf</name></name></expr></argument>, <argument pos:start="95:54" pos:end="95:69"><expr pos:start="95:54" pos:end="95:69"><name pos:start="95:54" pos:end="95:69">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:43">/* Send XBZRLE based compressed page */</comment>

    <expr_stmt pos:start="103:5" pos:end="105:67"><expr pos:start="103:5" pos:end="105:66"><name pos:start="103:5" pos:end="103:16">bytes_xbzrle</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="105:66"><name pos:start="103:20" pos:end="103:35">save_page_header</name><argument_list pos:start="103:36" pos:end="105:66">(<argument pos:start="103:37" pos:end="103:38"><expr pos:start="103:37" pos:end="103:38"><name pos:start="103:37" pos:end="103:38">rs</name></expr></argument>, <argument pos:start="103:41" pos:end="103:45"><expr pos:start="103:41" pos:end="103:45"><name pos:start="103:41" pos:end="103:45">block</name></expr></argument>,

                                    <argument pos:start="105:37" pos:end="105:65"><expr pos:start="105:37" pos:end="105:65"><name pos:start="105:37" pos:end="105:42">offset</name> <operator pos:start="105:44" pos:end="105:44">|</operator> <name pos:start="105:46" pos:end="105:65">RAM_SAVE_FLAG_XBZRLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:47"><expr pos:start="107:5" pos:end="107:46"><call pos:start="107:5" pos:end="107:46"><name pos:start="107:5" pos:end="107:17">qemu_put_byte</name><argument_list pos:start="107:18" pos:end="107:46">(<argument pos:start="107:19" pos:end="107:23"><expr pos:start="107:19" pos:end="107:23"><name pos:start="107:19" pos:end="107:23"><name pos:start="107:19" pos:end="107:20">rs</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:23">f</name></name></expr></argument>, <argument pos:start="107:26" pos:end="107:45"><expr pos:start="107:26" pos:end="107:45"><name pos:start="107:26" pos:end="107:45">ENCODING_FLAG_XBZRLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><call pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:17">qemu_put_be16</name><argument_list pos:start="109:18" pos:end="109:37">(<argument pos:start="109:19" pos:end="109:23"><expr pos:start="109:19" pos:end="109:23"><name pos:start="109:19" pos:end="109:23"><name pos:start="109:19" pos:end="109:20">rs</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:23">f</name></name></expr></argument>, <argument pos:start="109:26" pos:end="109:36"><expr pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:36">encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:60"><expr pos:start="111:5" pos:end="111:59"><call pos:start="111:5" pos:end="111:59"><name pos:start="111:5" pos:end="111:19">qemu_put_buffer</name><argument_list pos:start="111:20" pos:end="111:59">(<argument pos:start="111:21" pos:end="111:25"><expr pos:start="111:21" pos:end="111:25"><name pos:start="111:21" pos:end="111:25"><name pos:start="111:21" pos:end="111:22">rs</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:25">f</name></name></expr></argument>, <argument pos:start="111:28" pos:end="111:45"><expr pos:start="111:28" pos:end="111:45"><name pos:start="111:28" pos:end="111:45"><name pos:start="111:28" pos:end="111:33">XBZRLE</name><operator pos:start="111:34" pos:end="111:34">.</operator><name pos:start="111:35" pos:end="111:45">encoded_buf</name></name></expr></argument>, <argument pos:start="111:48" pos:end="111:58"><expr pos:start="111:48" pos:end="111:58"><name pos:start="111:48" pos:end="111:58">encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:40"><expr pos:start="113:5" pos:end="113:39"><name pos:start="113:5" pos:end="113:16">bytes_xbzrle</name> <operator pos:start="113:18" pos:end="113:19">+=</operator> <name pos:start="113:21" pos:end="113:31">encoded_len</name> <operator pos:start="113:33" pos:end="113:33">+</operator> <literal type="number" pos:start="113:35" pos:end="113:37">1</literal> <operator pos:start="113:37" pos:end="113:37">+</operator> <literal type="number" pos:start="113:39" pos:end="113:39">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:23"><expr pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:6">rs</name><operator pos:start="115:7" pos:end="115:8">-&gt;</operator><name pos:start="115:9" pos:end="115:20">xbzrle_pages</name></name><operator pos:start="115:21" pos:end="115:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:20"><name pos:start="117:5" pos:end="117:6">rs</name><operator pos:start="117:7" pos:end="117:8">-&gt;</operator><name pos:start="117:9" pos:end="117:20">xbzrle_bytes</name></name> <operator pos:start="117:22" pos:end="117:23">+=</operator> <name pos:start="117:25" pos:end="117:36">bytes_xbzrle</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:25"><name pos:start="119:5" pos:end="119:6">rs</name><operator pos:start="119:7" pos:end="119:8">-&gt;</operator><name pos:start="119:9" pos:end="119:25">bytes_transferred</name></name> <operator pos:start="119:27" pos:end="119:28">+=</operator> <name pos:start="119:30" pos:end="119:41">bytes_xbzrle</name></expr>;</expr_stmt>



    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
