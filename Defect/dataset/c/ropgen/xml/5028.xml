<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5028.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:14">GuestFileWrite</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:36">qmp_guest_file_write</name><parameter_list pos:start="1:37" pos:end="5:50">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:44">int64_t</name></type> <name pos:start="1:46" pos:end="1:51">handle</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">buf_b64</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:41">bool</name></type> <name pos:start="3:43" pos:end="3:51">has_count</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:66"><decl pos:start="3:54" pos:end="3:66"><type pos:start="3:54" pos:end="3:66"><name pos:start="3:54" pos:end="3:60">int64_t</name></type> <name pos:start="3:62" pos:end="3:66">count</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:49"><decl pos:start="5:38" pos:end="5:49"><type pos:start="5:38" pos:end="5:49"><name pos:start="5:38" pos:end="5:42">Error</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier><modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="77:1">{<block_content pos:start="9:5" pos:end="75:22">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">GuestFileWrite</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:30">write_data</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">guchar</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:15">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">gsize</name></type> <name pos:start="13:11" pos:end="13:17">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:14">is_ok</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">DWORD</name></type> <name pos:start="17:11" pos:end="17:21">write_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:64"><decl pos:start="19:5" pos:end="19:63"><type pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:19">GuestFileHandle</name> <modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:24">gfh</name> <init pos:start="19:26" pos:end="19:63">= <expr pos:start="19:28" pos:end="19:63"><call pos:start="19:28" pos:end="19:63"><name pos:start="19:28" pos:end="19:49">guest_file_handle_find</name><argument_list pos:start="19:50" pos:end="19:63">(<argument pos:start="19:51" pos:end="19:56"><expr pos:start="19:51" pos:end="19:56"><name pos:start="19:51" pos:end="19:56">handle</name></expr></argument>, <argument pos:start="19:59" pos:end="19:62"><expr pos:start="19:59" pos:end="19:62"><name pos:start="19:59" pos:end="19:62">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">HANDLE</name></type> <name pos:start="21:12" pos:end="21:13">fh</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:13">(<expr pos:start="25:9" pos:end="25:12"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:12">gfh</name></expr>)</condition> <block pos:start="25:15" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:20">

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:6">fh</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <name pos:start="31:10" pos:end="31:16"><name pos:start="31:10" pos:end="31:12">gfh</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:16">fh</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:45"><expr pos:start="33:5" pos:end="33:44"><name pos:start="33:5" pos:end="33:7">buf</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:44"><name pos:start="33:11" pos:end="33:25">g_base64_decode</name><argument_list pos:start="33:26" pos:end="33:44">(<argument pos:start="33:27" pos:end="33:33"><expr pos:start="33:27" pos:end="33:33"><name pos:start="33:27" pos:end="33:33">buf_b64</name></expr></argument>, <argument pos:start="33:36" pos:end="33:43"><expr pos:start="33:36" pos:end="33:43"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:43">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:18">has_count</name></expr>)</condition> <block pos:start="37:21" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:24">

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:13">count</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:23">buf_len</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="49:5">else if <condition pos:start="41:15" pos:end="41:44">(<expr pos:start="41:16" pos:end="41:43"><name pos:start="41:16" pos:end="41:35"><name pos:start="41:16" pos:end="41:20">count</name> <argument_list type="generic" pos:start="41:22" pos:end="41:35">&lt; <argument pos:start="41:24" pos:end="41:33"><expr pos:start="41:24" pos:end="41:33"><literal type="number" pos:start="41:24" pos:end="41:24">0</literal> <operator pos:start="41:26" pos:end="41:27">||</operator> <name pos:start="41:29" pos:end="41:33">count</name></expr></argument> &gt;</argument_list></name> <name pos:start="41:37" pos:end="41:43">buf_len</name></expr>)</condition> <block pos:start="41:46" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:18">

        <expr_stmt pos:start="43:9" pos:end="45:61"><expr pos:start="43:9" pos:end="45:60"><call pos:start="43:9" pos:end="45:60"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="45:60">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="45:52"><expr pos:start="43:26" pos:end="45:52"><literal type="string" pos:start="43:26" pos:end="43:35">"value '%"</literal> <name pos:start="43:37" pos:end="43:42">PRId64</name>

                   <literal type="string" pos:start="45:20" pos:end="45:52">"' is invalid for argument count"</literal></expr></argument>, <argument pos:start="45:55" pos:end="45:59"><expr pos:start="45:55" pos:end="45:59"><name pos:start="45:55" pos:end="45:59">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:58"><expr pos:start="53:5" pos:end="53:57"><name pos:start="53:5" pos:end="53:9">is_ok</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:57"><name pos:start="53:13" pos:end="53:21">WriteFile</name><argument_list pos:start="53:22" pos:end="53:57">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">fh</name></expr></argument>, <argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">buf</name></expr></argument>, <argument pos:start="53:32" pos:end="53:36"><expr pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">count</name></expr></argument>, <argument pos:start="53:39" pos:end="53:50"><expr pos:start="53:39" pos:end="53:50"><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:50">write_count</name></expr></argument>, <argument pos:start="53:53" pos:end="53:56"><expr pos:start="53:53" pos:end="53:56"><name pos:start="53:53" pos:end="53:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="67:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:15">(<expr pos:start="55:9" pos:end="55:14"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:14">is_ok</name></expr>)</condition> <block pos:start="55:17" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:66">

        <expr_stmt pos:start="57:9" pos:end="57:74"><expr pos:start="57:9" pos:end="57:73"><call pos:start="57:9" pos:end="57:73"><name pos:start="57:9" pos:end="57:24">error_setg_win32</name><argument_list pos:start="57:25" pos:end="57:73">(<argument pos:start="57:26" pos:end="57:29"><expr pos:start="57:26" pos:end="57:29"><name pos:start="57:26" pos:end="57:29">errp</name></expr></argument>, <argument pos:start="57:32" pos:end="57:45"><expr pos:start="57:32" pos:end="57:45"><call pos:start="57:32" pos:end="57:45"><name pos:start="57:32" pos:end="57:43">GetLastError</name><argument_list pos:start="57:44" pos:end="57:45">()</argument_list></call></expr></argument>, <argument pos:start="57:48" pos:end="57:72"><expr pos:start="57:48" pos:end="57:72"><literal type="string" pos:start="57:48" pos:end="57:72">"failed to write to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:66"><expr pos:start="59:9" pos:end="59:65"><call pos:start="59:9" pos:end="59:65"><name pos:start="59:9" pos:end="59:12">slog</name><argument_list pos:start="59:13" pos:end="59:65">(<argument pos:start="59:14" pos:end="59:56"><expr pos:start="59:14" pos:end="59:56"><literal type="string" pos:start="59:14" pos:end="59:49">"guest-file-write-failed, handle: %"</literal> <name pos:start="59:51" pos:end="59:56">PRId64</name></expr></argument>, <argument pos:start="59:59" pos:end="59:64"><expr pos:start="59:59" pos:end="59:64"><name pos:start="59:59" pos:end="59:64">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="67:5">else <block pos:start="61:12" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:49">

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:18">write_data</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:46"><name pos:start="63:22" pos:end="63:27">g_new0</name><argument_list pos:start="63:28" pos:end="63:46">(<argument pos:start="63:29" pos:end="63:42"><expr pos:start="63:29" pos:end="63:42"><name pos:start="63:29" pos:end="63:42">GuestFileWrite</name></expr></argument>, <argument pos:start="63:45" pos:end="63:45"><expr pos:start="63:45" pos:end="63:45"><literal type="number" pos:start="63:45" pos:end="63:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:18">write_data</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:25">count</name></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:35">size_t</name><operator pos:start="65:36" pos:end="65:36">)</operator> <name pos:start="65:38" pos:end="65:48">write_count</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="71:1" pos:end="71:5"><name pos:start="71:1" pos:end="71:4">done</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:16"><expr pos:start="73:5" pos:end="73:15"><call pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:15">(<argument pos:start="73:12" pos:end="73:14"><expr pos:start="73:12" pos:end="73:14"><name pos:start="73:12" pos:end="73:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:22">return <expr pos:start="75:12" pos:end="75:21"><name pos:start="75:12" pos:end="75:21">write_data</name></expr>;</return>

</block_content>}</block></function>
</unit>
