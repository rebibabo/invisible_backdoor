<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6262.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">BlockJob</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:27">backup_job_create</name><parameter_list pos:start="1:28" pos:end="17:49">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:38">char</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">job_id</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:42"><decl pos:start="3:19" pos:end="3:42"><type pos:start="3:19" pos:end="3:42"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:42">target</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:51">int64_t</name></type> <name pos:start="3:53" pos:end="3:57">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:32">MirrorSyncMode</name></type> <name pos:start="5:34" pos:end="5:42">sync_mode</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:72"><decl pos:start="5:45" pos:end="5:72"><type pos:start="5:45" pos:end="5:72"><name pos:start="5:45" pos:end="5:59">BdrvDirtyBitmap</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:72">sync_bitmap</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:31"><decl pos:start="7:19" pos:end="7:31"><type pos:start="7:19" pos:end="7:31"><name pos:start="7:19" pos:end="7:22">bool</name></type> <name pos:start="7:24" pos:end="7:31">compress</name></decl></parameter>,

                  <parameter pos:start="9:19" pos:end="9:49"><decl pos:start="9:19" pos:end="9:49"><type pos:start="9:19" pos:end="9:49"><name pos:start="9:19" pos:end="9:33">BlockdevOnError</name></type> <name pos:start="9:35" pos:end="9:49">on_source_error</name></decl></parameter>,

                  <parameter pos:start="11:19" pos:end="11:49"><decl pos:start="11:19" pos:end="11:49"><type pos:start="11:19" pos:end="11:49"><name pos:start="11:19" pos:end="11:33">BlockdevOnError</name></type> <name pos:start="11:35" pos:end="11:49">on_target_error</name></decl></parameter>,

                  <parameter pos:start="13:19" pos:end="13:36"><decl pos:start="13:19" pos:end="13:36"><type pos:start="13:19" pos:end="13:36"><name pos:start="13:19" pos:end="13:21">int</name></type> <name pos:start="13:23" pos:end="13:36">creation_flags</name></decl></parameter>,

                  <parameter pos:start="15:19" pos:end="15:41"><decl pos:start="15:19" pos:end="15:41"><type pos:start="15:19" pos:end="15:41"><name pos:start="15:19" pos:end="15:37">BlockCompletionFunc</name> <modifier pos:start="15:39" pos:end="15:39">*</modifier></type><name pos:start="15:40" pos:end="15:41">cb</name></decl></parameter>, <parameter pos:start="15:44" pos:end="15:55"><decl pos:start="15:44" pos:end="15:55"><type pos:start="15:44" pos:end="15:55"><name pos:start="15:44" pos:end="15:47">void</name> <modifier pos:start="15:49" pos:end="15:49">*</modifier></type><name pos:start="15:50" pos:end="15:55">opaque</name></decl></parameter>,

                  <parameter pos:start="17:19" pos:end="17:34"><decl pos:start="17:19" pos:end="17:34"><type pos:start="17:19" pos:end="17:34"><name pos:start="17:19" pos:end="17:29">BlockJobTxn</name> <modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:34">txn</name></decl></parameter>, <parameter pos:start="17:37" pos:end="17:48"><decl pos:start="17:37" pos:end="17:48"><type pos:start="17:37" pos:end="17:48"><name pos:start="17:37" pos:end="17:41">Error</name> <modifier pos:start="17:43" pos:end="17:43">*</modifier><modifier pos:start="17:44" pos:end="17:44">*</modifier></type><name pos:start="17:45" pos:end="17:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="19:1" pos:end="293:1">{<block_content pos:start="21:5" pos:end="291:16">

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:19">BlockDriverInfo</name></type> <name pos:start="23:21" pos:end="23:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:18">BackupBlockJob</name> <modifier pos:start="25:20" pos:end="25:20">*</modifier></type><name pos:start="25:21" pos:end="25:23">job</name> <init pos:start="25:25" pos:end="25:30">= <expr pos:start="25:27" pos:end="25:30"><name pos:start="25:27" pos:end="25:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:12"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:15"><expr pos:start="31:5" pos:end="31:14"><call pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:14">(<argument pos:start="31:12" pos:end="31:13"><expr pos:start="31:12" pos:end="31:13"><name pos:start="31:12" pos:end="31:13">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><call pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:18">(<argument pos:start="33:12" pos:end="33:17"><expr pos:start="33:12" pos:end="33:17"><name pos:start="33:12" pos:end="33:17">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:10">bs</name> <operator pos:start="37:12" pos:end="37:13">==</operator> <name pos:start="37:15" pos:end="37:20">target</name></expr>)</condition> <block pos:start="37:23" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:20">

        <expr_stmt pos:start="39:9" pos:end="39:65"><expr pos:start="39:9" pos:end="39:64"><call pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:64">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:63"><expr pos:start="39:26" pos:end="39:63"><literal type="string" pos:start="39:26" pos:end="39:63">"Source and target cannot be the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:20">return <expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:30">(<expr pos:start="47:9" pos:end="47:29"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:29"><name pos:start="47:10" pos:end="47:25">bdrv_is_inserted</name><argument_list pos:start="47:26" pos:end="47:29">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:32" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:20">

        <expr_stmt pos:start="49:9" pos:end="51:45"><expr pos:start="49:9" pos:end="51:44"><call pos:start="49:9" pos:end="51:44"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="51:44">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:53"><expr pos:start="49:26" pos:end="49:53"><literal type="string" pos:start="49:26" pos:end="49:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:43"><expr pos:start="51:20" pos:end="51:43"><call pos:start="51:20" pos:end="51:43"><name pos:start="51:20" pos:end="51:39">bdrv_get_device_name</name><argument_list pos:start="51:40" pos:end="51:43">(<argument pos:start="51:41" pos:end="51:42"><expr pos:start="51:41" pos:end="51:42"><name pos:start="51:41" pos:end="51:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:20">return <expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:33"><name pos:start="59:10" pos:end="59:25">bdrv_is_inserted</name><argument_list pos:start="59:26" pos:end="59:33">(<argument pos:start="59:27" pos:end="59:32"><expr pos:start="59:27" pos:end="59:32"><name pos:start="59:27" pos:end="59:32">target</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:36" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:20">

        <expr_stmt pos:start="61:9" pos:end="63:49"><expr pos:start="61:9" pos:end="63:48"><call pos:start="61:9" pos:end="63:48"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="63:48">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:53"><expr pos:start="61:26" pos:end="61:53"><literal type="string" pos:start="61:26" pos:end="61:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:47"><expr pos:start="63:20" pos:end="63:47"><call pos:start="63:20" pos:end="63:47"><name pos:start="63:20" pos:end="63:39">bdrv_get_device_name</name><argument_list pos:start="63:40" pos:end="63:47">(<argument pos:start="63:41" pos:end="63:46"><expr pos:start="63:41" pos:end="63:46"><name pos:start="63:41" pos:end="63:46">target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:20">return <expr pos:start="65:16" pos:end="65:19"><name pos:start="65:16" pos:end="65:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:68">(<expr pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:16">compress</name> <operator pos:start="71:18" pos:end="71:19">&amp;&amp;</operator> <name pos:start="71:21" pos:end="71:59"><name pos:start="71:21" pos:end="71:26">target</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:31">drv</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:59">bdrv_co_pwritev_compressed</name></name> <operator pos:start="71:61" pos:end="71:62">==</operator> <name pos:start="71:64" pos:end="71:67">NULL</name></expr>)</condition> <block pos:start="71:70" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:20">

        <expr_stmt pos:start="73:9" pos:end="75:49"><expr pos:start="73:9" pos:end="75:48"><call pos:start="73:9" pos:end="75:48"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="75:48">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:73"><expr pos:start="73:26" pos:end="73:73"><literal type="string" pos:start="73:26" pos:end="73:73">"Compression is not supported for this drive %s"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:47"><expr pos:start="75:20" pos:end="75:47"><call pos:start="75:20" pos:end="75:47"><name pos:start="75:20" pos:end="75:39">bdrv_get_device_name</name><argument_list pos:start="75:40" pos:end="75:47">(<argument pos:start="75:41" pos:end="75:46"><expr pos:start="75:41" pos:end="75:46"><name pos:start="75:41" pos:end="75:46">target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:20">return <expr pos:start="77:16" pos:end="77:19"><name pos:start="77:16" pos:end="77:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:66">(<expr pos:start="83:9" pos:end="83:65"><call pos:start="83:9" pos:end="83:65"><name pos:start="83:9" pos:end="83:26">bdrv_op_is_blocked</name><argument_list pos:start="83:27" pos:end="83:65">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">bs</name></expr></argument>, <argument pos:start="83:32" pos:end="83:58"><expr pos:start="83:32" pos:end="83:58"><name pos:start="83:32" pos:end="83:58">BLOCK_OP_TYPE_BACKUP_SOURCE</name></expr></argument>, <argument pos:start="83:61" pos:end="83:64"><expr pos:start="83:61" pos:end="83:64"><name pos:start="83:61" pos:end="83:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:68" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:20">

        <return pos:start="85:9" pos:end="85:20">return <expr pos:start="85:16" pos:end="85:19"><name pos:start="85:16" pos:end="85:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:70">(<expr pos:start="91:9" pos:end="91:69"><call pos:start="91:9" pos:end="91:69"><name pos:start="91:9" pos:end="91:26">bdrv_op_is_blocked</name><argument_list pos:start="91:27" pos:end="91:69">(<argument pos:start="91:28" pos:end="91:33"><expr pos:start="91:28" pos:end="91:33"><name pos:start="91:28" pos:end="91:33">target</name></expr></argument>, <argument pos:start="91:36" pos:end="91:62"><expr pos:start="91:36" pos:end="91:62"><name pos:start="91:36" pos:end="91:62">BLOCK_OP_TYPE_BACKUP_TARGET</name></expr></argument>, <argument pos:start="91:65" pos:end="91:68"><expr pos:start="91:65" pos:end="91:68"><name pos:start="91:65" pos:end="91:68">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:72" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:20">

        <return pos:start="93:9" pos:end="93:20">return <expr pos:start="93:16" pos:end="93:19"><name pos:start="93:16" pos:end="93:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="133:5"><if pos:start="99:5" pos:end="121:5">if <condition pos:start="99:8" pos:end="99:50">(<expr pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:17">sync_mode</name> <operator pos:start="99:19" pos:end="99:20">==</operator> <name pos:start="99:22" pos:end="99:49">MIRROR_SYNC_MODE_INCREMENTAL</name></expr>)</condition> <block pos:start="99:52" pos:end="121:5">{<block_content pos:start="101:9" pos:end="119:9">

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="109:9">if <condition pos:start="101:12" pos:end="101:25">(<expr pos:start="101:13" pos:end="101:24"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:24">sync_bitmap</name></expr>)</condition> <block pos:start="101:27" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:24">

            <expr_stmt pos:start="103:13" pos:end="105:58"><expr pos:start="103:13" pos:end="105:57"><call pos:start="103:13" pos:end="105:57"><name pos:start="103:13" pos:end="103:22">error_setg</name><argument_list pos:start="103:23" pos:end="105:57">(<argument pos:start="103:24" pos:end="103:27"><expr pos:start="103:24" pos:end="103:27"><name pos:start="103:24" pos:end="103:27">errp</name></expr></argument>, <argument pos:start="103:30" pos:end="105:56"><expr pos:start="103:30" pos:end="105:56"><literal type="string" pos:start="103:30" pos:end="103:68">"must provide a valid bitmap name for "</literal>

                             <literal type="string" pos:start="105:30" pos:end="105:56">"\"incremental\" sync mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:24">return <expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:63">/* Create a new bitmap, and freeze/disable this one. */</comment>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:74">(<expr pos:start="115:13" pos:end="115:73"><call pos:start="115:13" pos:end="115:69"><name pos:start="115:13" pos:end="115:46">bdrv_dirty_bitmap_create_successor</name><argument_list pos:start="115:47" pos:end="115:69">(<argument pos:start="115:48" pos:end="115:49"><expr pos:start="115:48" pos:end="115:49"><name pos:start="115:48" pos:end="115:49">bs</name></expr></argument>, <argument pos:start="115:52" pos:end="115:62"><expr pos:start="115:52" pos:end="115:62"><name pos:start="115:52" pos:end="115:62">sync_bitmap</name></expr></argument>, <argument pos:start="115:65" pos:end="115:68"><expr pos:start="115:65" pos:end="115:68"><name pos:start="115:65" pos:end="115:68">errp</name></expr></argument>)</argument_list></call> <operator pos:start="115:71" pos:end="115:71">&lt;</operator> <literal type="number" pos:start="115:73" pos:end="115:73">0</literal></expr>)</condition> <block pos:start="115:76" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:24">

            <return pos:start="117:13" pos:end="117:24">return <expr pos:start="117:20" pos:end="117:23"><name pos:start="117:20" pos:end="117:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="133:5">else if <condition pos:start="121:15" pos:end="121:27">(<expr pos:start="121:16" pos:end="121:26"><name pos:start="121:16" pos:end="121:26">sync_bitmap</name></expr>)</condition> <block pos:start="121:29" pos:end="133:5">{<block_content pos:start="123:9" pos:end="131:20">

        <expr_stmt pos:start="123:9" pos:end="129:53"><expr pos:start="123:9" pos:end="129:52"><call pos:start="123:9" pos:end="129:52"><name pos:start="123:9" pos:end="123:18">error_setg</name><argument_list pos:start="123:19" pos:end="129:52">(<argument pos:start="123:20" pos:end="123:23"><expr pos:start="123:20" pos:end="123:23"><name pos:start="123:20" pos:end="123:23">errp</name></expr></argument>,

                   <argument pos:start="125:20" pos:end="127:64"><expr pos:start="125:20" pos:end="127:64"><literal type="string" pos:start="125:20" pos:end="125:63">"a sync_bitmap was provided to backup_run, "</literal>

                   <literal type="string" pos:start="127:20" pos:end="127:64">"but received an incompatible sync_mode (%s)"</literal></expr></argument>,

                   <argument pos:start="129:20" pos:end="129:51"><expr pos:start="129:20" pos:end="129:51"><name pos:start="129:20" pos:end="129:51"><name pos:start="129:20" pos:end="129:40">MirrorSyncMode_lookup</name><index pos:start="129:41" pos:end="129:51">[<expr pos:start="129:42" pos:end="129:50"><name pos:start="129:42" pos:end="129:50">sync_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:20">return <expr pos:start="131:16" pos:end="131:19"><name pos:start="131:16" pos:end="131:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:29"><expr pos:start="137:5" pos:end="137:28"><name pos:start="137:5" pos:end="137:7">len</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:28"><name pos:start="137:11" pos:end="137:24">bdrv_getlength</name><argument_list pos:start="137:25" pos:end="137:28">(<argument pos:start="137:26" pos:end="137:27"><expr pos:start="137:26" pos:end="137:27"><name pos:start="137:26" pos:end="137:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">len</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:19">

        <expr_stmt pos:start="141:9" pos:end="143:51"><expr pos:start="141:9" pos:end="143:50"><call pos:start="141:9" pos:end="143:50"><name pos:start="141:9" pos:end="141:24">error_setg_errno</name><argument_list pos:start="141:25" pos:end="143:50">(<argument pos:start="141:26" pos:end="141:29"><expr pos:start="141:26" pos:end="141:29"><name pos:start="141:26" pos:end="141:29">errp</name></expr></argument>, <argument pos:start="141:32" pos:end="141:35"><expr pos:start="141:32" pos:end="141:35"><operator pos:start="141:32" pos:end="141:32">-</operator><name pos:start="141:33" pos:end="141:35">len</name></expr></argument>, <argument pos:start="141:38" pos:end="141:68"><expr pos:start="141:38" pos:end="141:68"><literal type="string" pos:start="141:38" pos:end="141:68">"unable to get length for '%s'"</literal></expr></argument>,

                         <argument pos:start="143:26" pos:end="143:49"><expr pos:start="143:26" pos:end="143:49"><call pos:start="143:26" pos:end="143:49"><name pos:start="143:26" pos:end="143:45">bdrv_get_device_name</name><argument_list pos:start="143:46" pos:end="143:49">(<argument pos:start="143:47" pos:end="143:48"><expr pos:start="143:47" pos:end="143:48"><name pos:start="143:47" pos:end="143:48">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:19">goto <name pos:start="145:14" pos:end="145:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:60">/* job-&gt;common.len is fixed, so we can't allow resize */</comment>

    <expr_stmt pos:start="153:5" pos:end="161:68"><expr pos:start="153:5" pos:end="161:67"><name pos:start="153:5" pos:end="153:7">job</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="161:67"><name pos:start="153:11" pos:end="153:26">block_job_create</name><argument_list pos:start="153:27" pos:end="161:67">(<argument pos:start="153:28" pos:end="153:33"><expr pos:start="153:28" pos:end="153:33"><name pos:start="153:28" pos:end="153:33">job_id</name></expr></argument>, <argument pos:start="153:36" pos:end="153:53"><expr pos:start="153:36" pos:end="153:53"><operator pos:start="153:36" pos:end="153:36">&amp;</operator><name pos:start="153:37" pos:end="153:53">backup_job_driver</name></expr></argument>, <argument pos:start="153:56" pos:end="153:57"><expr pos:start="153:56" pos:end="153:57"><name pos:start="153:56" pos:end="153:57">bs</name></expr></argument>,

                           <argument pos:start="155:28" pos:end="155:51"><expr pos:start="155:28" pos:end="155:51"><name pos:start="155:28" pos:end="155:51">BLK_PERM_CONSISTENT_READ</name></expr></argument>,

                           <argument pos:start="157:28" pos:end="159:72"><expr pos:start="157:28" pos:end="159:72"><name pos:start="157:28" pos:end="157:51">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="157:53" pos:end="157:53">|</operator> <name pos:start="157:55" pos:end="157:68">BLK_PERM_WRITE</name> <operator pos:start="157:70" pos:end="157:70">|</operator>

                           <name pos:start="159:28" pos:end="159:51">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="159:53" pos:end="159:53">|</operator> <name pos:start="159:55" pos:end="159:72">BLK_PERM_GRAPH_MOD</name></expr></argument>,

                           <argument pos:start="161:28" pos:end="161:32"><expr pos:start="161:28" pos:end="161:32"><name pos:start="161:28" pos:end="161:32">speed</name></expr></argument>, <argument pos:start="161:35" pos:end="161:48"><expr pos:start="161:35" pos:end="161:48"><name pos:start="161:35" pos:end="161:48">creation_flags</name></expr></argument>, <argument pos:start="161:51" pos:end="161:52"><expr pos:start="161:51" pos:end="161:52"><name pos:start="161:51" pos:end="161:52">cb</name></expr></argument>, <argument pos:start="161:55" pos:end="161:60"><expr pos:start="161:55" pos:end="161:60"><name pos:start="161:55" pos:end="161:60">opaque</name></expr></argument>, <argument pos:start="161:63" pos:end="161:66"><expr pos:start="161:63" pos:end="161:66"><name pos:start="161:63" pos:end="161:66">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="167:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:13">(<expr pos:start="163:9" pos:end="163:12"><operator pos:start="163:9" pos:end="163:9">!</operator><name pos:start="163:10" pos:end="163:12">job</name></expr>)</condition> <block pos:start="163:15" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:19">

        <goto pos:start="165:9" pos:end="165:19">goto <name pos:start="165:14" pos:end="165:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:76">/* The target must match the source in size, so no resize here either */</comment>

    <expr_stmt pos:start="173:5" pos:end="177:73"><expr pos:start="173:5" pos:end="177:72"><name pos:start="173:5" pos:end="173:15"><name pos:start="173:5" pos:end="173:7">job</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:15">target</name></name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="177:72"><name pos:start="173:19" pos:end="173:25">blk_new</name><argument_list pos:start="173:26" pos:end="177:72">(<argument pos:start="173:27" pos:end="173:40"><expr pos:start="173:27" pos:end="173:40"><name pos:start="173:27" pos:end="173:40">BLK_PERM_WRITE</name></expr></argument>,

                          <argument pos:start="175:27" pos:end="177:71"><expr pos:start="175:27" pos:end="177:71"><name pos:start="175:27" pos:end="175:50">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="175:52" pos:end="175:52">|</operator> <name pos:start="175:54" pos:end="175:67">BLK_PERM_WRITE</name> <operator pos:start="175:69" pos:end="175:69">|</operator>

                          <name pos:start="177:27" pos:end="177:50">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="177:52" pos:end="177:52">|</operator> <name pos:start="177:54" pos:end="177:71">BLK_PERM_GRAPH_MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:51"><expr pos:start="179:5" pos:end="179:50"><name pos:start="179:5" pos:end="179:7">ret</name> <operator pos:start="179:9" pos:end="179:9">=</operator> <call pos:start="179:11" pos:end="179:50"><name pos:start="179:11" pos:end="179:23">blk_insert_bs</name><argument_list pos:start="179:24" pos:end="179:50">(<argument pos:start="179:25" pos:end="179:35"><expr pos:start="179:25" pos:end="179:35"><name pos:start="179:25" pos:end="179:35"><name pos:start="179:25" pos:end="179:27">job</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:35">target</name></name></expr></argument>, <argument pos:start="179:38" pos:end="179:43"><expr pos:start="179:38" pos:end="179:43"><name pos:start="179:38" pos:end="179:43">target</name></expr></argument>, <argument pos:start="179:46" pos:end="179:49"><expr pos:start="179:46" pos:end="179:49"><name pos:start="179:46" pos:end="179:49">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="185:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:16">(<expr pos:start="181:9" pos:end="181:15"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">&lt;</operator> <literal type="number" pos:start="181:15" pos:end="181:15">0</literal></expr>)</condition> <block pos:start="181:18" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:19">

        <goto pos:start="183:9" pos:end="183:19">goto <name pos:start="183:14" pos:end="183:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:43"><expr pos:start="189:5" pos:end="189:42"><name pos:start="189:5" pos:end="189:24"><name pos:start="189:5" pos:end="189:7">job</name><operator pos:start="189:8" pos:end="189:9">-&gt;</operator><name pos:start="189:10" pos:end="189:24">on_source_error</name></name> <operator pos:start="189:26" pos:end="189:26">=</operator> <name pos:start="189:28" pos:end="189:42">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:43"><expr pos:start="191:5" pos:end="191:42"><name pos:start="191:5" pos:end="191:24"><name pos:start="191:5" pos:end="191:7">job</name><operator pos:start="191:8" pos:end="191:9">-&gt;</operator><name pos:start="191:10" pos:end="191:24">on_target_error</name></name> <operator pos:start="191:26" pos:end="191:26">=</operator> <name pos:start="191:28" pos:end="191:42">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:31"><expr pos:start="193:5" pos:end="193:30"><name pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:7">job</name><operator pos:start="193:8" pos:end="193:9">-&gt;</operator><name pos:start="193:10" pos:end="193:18">sync_mode</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:30">sync_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="197:42"><expr pos:start="195:5" pos:end="197:41"><name pos:start="195:5" pos:end="195:20"><name pos:start="195:5" pos:end="195:7">job</name><operator pos:start="195:8" pos:end="195:9">-&gt;</operator><name pos:start="195:10" pos:end="195:20">sync_bitmap</name></name> <operator pos:start="195:22" pos:end="195:22">=</operator> <ternary pos:start="195:24" pos:end="197:41"><condition pos:start="195:24" pos:end="195:66"><expr pos:start="195:24" pos:end="195:64"><name pos:start="195:24" pos:end="195:32">sync_mode</name> <operator pos:start="195:34" pos:end="195:35">==</operator> <name pos:start="195:37" pos:end="195:64">MIRROR_SYNC_MODE_INCREMENTAL</name></expr> ?</condition><then pos:start="197:24" pos:end="197:34">

                       <expr pos:start="197:24" pos:end="197:34"><name pos:start="197:24" pos:end="197:34">sync_bitmap</name></expr> </then><else pos:start="197:36" pos:end="197:41">: <expr pos:start="197:38" pos:end="197:41"><name pos:start="197:38" pos:end="197:41">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:29"><expr pos:start="199:5" pos:end="199:28"><name pos:start="199:5" pos:end="199:17"><name pos:start="199:5" pos:end="199:7">job</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:17">compress</name></name> <operator pos:start="199:19" pos:end="199:19">=</operator> <name pos:start="199:21" pos:end="199:28">compress</name></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="207:68">/* If there is no backing file on the target, we cannot rely on COW if our

     * backup cluster size is smaller than the target cluster size. Even for

     * targets with a backing file, try to avoid COW if possible. */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:38"><expr pos:start="209:5" pos:end="209:37"><name pos:start="209:5" pos:end="209:7">ret</name> <operator pos:start="209:9" pos:end="209:9">=</operator> <call pos:start="209:11" pos:end="209:37"><name pos:start="209:11" pos:end="209:23">bdrv_get_info</name><argument_list pos:start="209:24" pos:end="209:37">(<argument pos:start="209:25" pos:end="209:30"><expr pos:start="209:25" pos:end="209:30"><name pos:start="209:25" pos:end="209:30">target</name></expr></argument>, <argument pos:start="209:33" pos:end="209:36"><expr pos:start="209:33" pos:end="209:36"><operator pos:start="209:33" pos:end="209:33">&amp;</operator><name pos:start="209:34" pos:end="209:36">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="253:5"><if pos:start="211:5" pos:end="229:5">if <condition pos:start="211:8" pos:end="211:44">(<expr pos:start="211:9" pos:end="211:43"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:14">==</operator> <operator pos:start="211:16" pos:end="211:16">-</operator><name pos:start="211:17" pos:end="211:23">ENOTSUP</name> <operator pos:start="211:25" pos:end="211:26">&amp;&amp;</operator> <operator pos:start="211:28" pos:end="211:28">!</operator><name pos:start="211:29" pos:end="211:43"><name pos:start="211:29" pos:end="211:34">target</name><operator pos:start="211:35" pos:end="211:36">-&gt;</operator><name pos:start="211:37" pos:end="211:43">backing</name></name></expr>)</condition> <block pos:start="211:46" pos:end="229:5">{<block_content pos:start="215:9" pos:end="227:56">

        <comment type="block" pos:start="213:9" pos:end="213:41">/* Cluster size is not defined */</comment>

        <expr_stmt pos:start="215:9" pos:end="225:50"><expr pos:start="215:9" pos:end="225:49"><call pos:start="215:9" pos:end="225:49"><name pos:start="215:9" pos:end="215:20">error_report</name><argument_list pos:start="215:21" pos:end="225:49">(<argument pos:start="215:22" pos:end="223:63"><expr pos:start="215:22" pos:end="223:63"><literal type="string" pos:start="215:22" pos:end="215:72">"WARNING: The target block device doesn't provide "</literal>

                     <literal type="string" pos:start="217:22" pos:end="217:78">"information about the block size and it doesn't have a "</literal>

                     <literal type="string" pos:start="219:22" pos:end="219:75">"backing file. The default block size of %u bytes is "</literal>

                     <literal type="string" pos:start="221:22" pos:end="221:76">"used. If the actual block size of the target exceeds "</literal>

                     <literal type="string" pos:start="223:22" pos:end="223:63">"this default, the backup may be unusable"</literal></expr></argument>,

                     <argument pos:start="225:22" pos:end="225:48"><expr pos:start="225:22" pos:end="225:48"><name pos:start="225:22" pos:end="225:48">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:56"><expr pos:start="227:9" pos:end="227:55"><name pos:start="227:9" pos:end="227:25"><name pos:start="227:9" pos:end="227:11">job</name><operator pos:start="227:12" pos:end="227:13">-&gt;</operator><name pos:start="227:14" pos:end="227:25">cluster_size</name></name> <operator pos:start="227:27" pos:end="227:27">=</operator> <name pos:start="227:29" pos:end="227:55">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="229:7" pos:end="243:5">else if <condition pos:start="229:15" pos:end="229:43">(<expr pos:start="229:16" pos:end="229:42"><name pos:start="229:16" pos:end="229:18">ret</name> <operator pos:start="229:20" pos:end="229:20">&lt;</operator> <literal type="number" pos:start="229:22" pos:end="229:22">0</literal> <operator pos:start="229:24" pos:end="229:25">&amp;&amp;</operator> <operator pos:start="229:27" pos:end="229:27">!</operator><name pos:start="229:28" pos:end="229:42"><name pos:start="229:28" pos:end="229:33">target</name><operator pos:start="229:34" pos:end="229:35">-&gt;</operator><name pos:start="229:36" pos:end="229:42">backing</name></name></expr>)</condition> <block pos:start="229:45" pos:end="243:5">{<block_content pos:start="231:9" pos:end="241:19">

        <expr_stmt pos:start="231:9" pos:end="235:41"><expr pos:start="231:9" pos:end="235:40"><call pos:start="231:9" pos:end="235:40"><name pos:start="231:9" pos:end="231:24">error_setg_errno</name><argument_list pos:start="231:25" pos:end="235:40">(<argument pos:start="231:26" pos:end="231:29"><expr pos:start="231:26" pos:end="231:29"><name pos:start="231:26" pos:end="231:29">errp</name></expr></argument>, <argument pos:start="231:32" pos:end="231:35"><expr pos:start="231:32" pos:end="231:35"><operator pos:start="231:32" pos:end="231:32">-</operator><name pos:start="231:33" pos:end="231:35">ret</name></expr></argument>,

            <argument pos:start="233:13" pos:end="235:39"><expr pos:start="233:13" pos:end="235:39"><literal type="string" pos:start="233:13" pos:end="233:71">"Couldn't determine the cluster size of the target image, "</literal>

            <literal type="string" pos:start="235:13" pos:end="235:39">"which has no backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="239:79"><expr pos:start="237:9" pos:end="239:78"><call pos:start="237:9" pos:end="239:78"><name pos:start="237:9" pos:end="237:25">error_append_hint</name><argument_list pos:start="237:26" pos:end="239:78">(<argument pos:start="237:27" pos:end="237:30"><expr pos:start="237:27" pos:end="237:30"><name pos:start="237:27" pos:end="237:30">errp</name></expr></argument>,

            <argument pos:start="239:13" pos:end="239:77"><expr pos:start="239:13" pos:end="239:77"><literal type="string" pos:start="239:13" pos:end="239:77">"Aborting, since this may create an unusable destination image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="241:9" pos:end="241:19">goto <name pos:start="241:14" pos:end="241:18">error</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="243:7" pos:end="249:5">else if <condition pos:start="243:15" pos:end="243:42">(<expr pos:start="243:16" pos:end="243:41"><name pos:start="243:16" pos:end="243:18">ret</name> <operator pos:start="243:20" pos:end="243:20">&lt;</operator> <literal type="number" pos:start="243:22" pos:end="243:22">0</literal> <operator pos:start="243:24" pos:end="243:25">&amp;&amp;</operator> <name pos:start="243:27" pos:end="243:41"><name pos:start="243:27" pos:end="243:32">target</name><operator pos:start="243:33" pos:end="243:34">-&gt;</operator><name pos:start="243:35" pos:end="243:41">backing</name></name></expr>)</condition> <block pos:start="243:44" pos:end="249:5">{<block_content pos:start="247:9" pos:end="247:56">

        <comment type="block" pos:start="245:9" pos:end="245:46">/* Not fatal; just trudge on ahead. */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:56"><expr pos:start="247:9" pos:end="247:55"><name pos:start="247:9" pos:end="247:25"><name pos:start="247:9" pos:end="247:11">job</name><operator pos:start="247:12" pos:end="247:13">-&gt;</operator><name pos:start="247:14" pos:end="247:25">cluster_size</name></name> <operator pos:start="247:27" pos:end="247:27">=</operator> <name pos:start="247:29" pos:end="247:55">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="249:7" pos:end="253:5">else <block pos:start="249:12" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:79">

        <expr_stmt pos:start="251:9" pos:end="251:79"><expr pos:start="251:9" pos:end="251:78"><name pos:start="251:9" pos:end="251:25"><name pos:start="251:9" pos:end="251:11">job</name><operator pos:start="251:12" pos:end="251:13">-&gt;</operator><name pos:start="251:14" pos:end="251:25">cluster_size</name></name> <operator pos:start="251:27" pos:end="251:27">=</operator> <call pos:start="251:29" pos:end="251:78"><name pos:start="251:29" pos:end="251:31">MAX</name><argument_list pos:start="251:32" pos:end="251:78">(<argument pos:start="251:33" pos:end="251:59"><expr pos:start="251:33" pos:end="251:59"><name pos:start="251:33" pos:end="251:59">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr></argument>, <argument pos:start="251:62" pos:end="251:77"><expr pos:start="251:62" pos:end="251:77"><name pos:start="251:62" pos:end="251:77"><name pos:start="251:62" pos:end="251:64">bdi</name><operator pos:start="251:65" pos:end="251:65">.</operator><name pos:start="251:66" pos:end="251:77">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="257:5" pos:end="257:72">/* Required permissions are already taken with target's blk_new() */</comment>

    <expr_stmt pos:start="259:5" pos:end="261:37"><expr pos:start="259:5" pos:end="261:36"><call pos:start="259:5" pos:end="261:36"><name pos:start="259:5" pos:end="259:22">block_job_add_bdrv</name><argument_list pos:start="259:23" pos:end="261:36">(<argument pos:start="259:24" pos:end="259:35"><expr pos:start="259:24" pos:end="259:35"><operator pos:start="259:24" pos:end="259:24">&amp;</operator><name pos:start="259:25" pos:end="259:35"><name pos:start="259:25" pos:end="259:27">job</name><operator pos:start="259:28" pos:end="259:29">-&gt;</operator><name pos:start="259:30" pos:end="259:35">common</name></name></expr></argument>, <argument pos:start="259:38" pos:end="259:45"><expr pos:start="259:38" pos:end="259:45"><literal type="string" pos:start="259:38" pos:end="259:45">"target"</literal></expr></argument>, <argument pos:start="259:48" pos:end="259:53"><expr pos:start="259:48" pos:end="259:53"><name pos:start="259:48" pos:end="259:53">target</name></expr></argument>, <argument pos:start="259:56" pos:end="259:56"><expr pos:start="259:56" pos:end="259:56"><literal type="number" pos:start="259:56" pos:end="259:56">0</literal></expr></argument>, <argument pos:start="259:59" pos:end="259:70"><expr pos:start="259:59" pos:end="259:70"><name pos:start="259:59" pos:end="259:70">BLK_PERM_ALL</name></expr></argument>,

                       <argument pos:start="261:24" pos:end="261:35"><expr pos:start="261:24" pos:end="261:35"><operator pos:start="261:24" pos:end="261:24">&amp;</operator><name pos:start="261:25" pos:end="261:35">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:26"><expr pos:start="263:5" pos:end="263:25"><name pos:start="263:5" pos:end="263:19"><name pos:start="263:5" pos:end="263:7">job</name><operator pos:start="263:8" pos:end="263:9">-&gt;</operator><name pos:start="263:10" pos:end="263:15">common</name><operator pos:start="263:16" pos:end="263:16">.</operator><name pos:start="263:17" pos:end="263:19">len</name></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <name pos:start="263:23" pos:end="263:25">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:45"><expr pos:start="265:5" pos:end="265:44"><call pos:start="265:5" pos:end="265:44"><name pos:start="265:5" pos:end="265:25">block_job_txn_add_job</name><argument_list pos:start="265:26" pos:end="265:44">(<argument pos:start="265:27" pos:end="265:29"><expr pos:start="265:27" pos:end="265:29"><name pos:start="265:27" pos:end="265:29">txn</name></expr></argument>, <argument pos:start="265:32" pos:end="265:43"><expr pos:start="265:32" pos:end="265:43"><operator pos:start="265:32" pos:end="265:32">&amp;</operator><name pos:start="265:33" pos:end="265:43"><name pos:start="265:33" pos:end="265:35">job</name><operator pos:start="265:36" pos:end="265:37">-&gt;</operator><name pos:start="265:38" pos:end="265:43">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="269:5" pos:end="269:24">return <expr pos:start="269:12" pos:end="269:23"><operator pos:start="269:12" pos:end="269:12">&amp;</operator><name pos:start="269:13" pos:end="269:23"><name pos:start="269:13" pos:end="269:15">job</name><operator pos:start="269:16" pos:end="269:17">-&gt;</operator><name pos:start="269:18" pos:end="269:23">common</name></name></expr>;</return>



 <label pos:start="273:2" pos:end="273:7"><name pos:start="273:2" pos:end="273:6">error</name>:</label>

    <if_stmt pos:start="275:5" pos:end="279:5"><if pos:start="275:5" pos:end="279:5">if <condition pos:start="275:8" pos:end="275:20">(<expr pos:start="275:9" pos:end="275:19"><name pos:start="275:9" pos:end="275:19">sync_bitmap</name></expr>)</condition> <block pos:start="275:22" pos:end="279:5">{<block_content pos:start="277:9" pos:end="277:57">

        <expr_stmt pos:start="277:9" pos:end="277:57"><expr pos:start="277:9" pos:end="277:56"><call pos:start="277:9" pos:end="277:56"><name pos:start="277:9" pos:end="277:33">bdrv_reclaim_dirty_bitmap</name><argument_list pos:start="277:34" pos:end="277:56">(<argument pos:start="277:35" pos:end="277:36"><expr pos:start="277:35" pos:end="277:36"><name pos:start="277:35" pos:end="277:36">bs</name></expr></argument>, <argument pos:start="277:39" pos:end="277:49"><expr pos:start="277:39" pos:end="277:49"><name pos:start="277:39" pos:end="277:49">sync_bitmap</name></expr></argument>, <argument pos:start="277:52" pos:end="277:55"><expr pos:start="277:52" pos:end="277:55"><name pos:start="277:52" pos:end="277:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="281:5" pos:end="287:5"><if pos:start="281:5" pos:end="287:5">if <condition pos:start="281:8" pos:end="281:12">(<expr pos:start="281:9" pos:end="281:11"><name pos:start="281:9" pos:end="281:11">job</name></expr>)</condition> <block pos:start="281:14" pos:end="287:5">{<block_content pos:start="283:9" pos:end="285:43">

        <expr_stmt pos:start="283:9" pos:end="283:35"><expr pos:start="283:9" pos:end="283:34"><call pos:start="283:9" pos:end="283:34"><name pos:start="283:9" pos:end="283:20">backup_clean</name><argument_list pos:start="283:21" pos:end="283:34">(<argument pos:start="283:22" pos:end="283:33"><expr pos:start="283:22" pos:end="283:33"><operator pos:start="283:22" pos:end="283:22">&amp;</operator><name pos:start="283:23" pos:end="283:33"><name pos:start="283:23" pos:end="283:25">job</name><operator pos:start="283:26" pos:end="283:27">-&gt;</operator><name pos:start="283:28" pos:end="283:33">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:43"><expr pos:start="285:9" pos:end="285:42"><call pos:start="285:9" pos:end="285:42"><name pos:start="285:9" pos:end="285:28">block_job_early_fail</name><argument_list pos:start="285:29" pos:end="285:42">(<argument pos:start="285:30" pos:end="285:41"><expr pos:start="285:30" pos:end="285:41"><operator pos:start="285:30" pos:end="285:30">&amp;</operator><name pos:start="285:31" pos:end="285:41"><name pos:start="285:31" pos:end="285:33">job</name><operator pos:start="285:34" pos:end="285:35">-&gt;</operator><name pos:start="285:36" pos:end="285:41">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="291:5" pos:end="291:16">return <expr pos:start="291:12" pos:end="291:15"><name pos:start="291:12" pos:end="291:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
