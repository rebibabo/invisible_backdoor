<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12525.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">abi_long</name></type> <name pos:start="1:17" pos:end="1:22">do_ipc</name><parameter_list pos:start="1:23" pos:end="5:52">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:31">unsigned</name> <name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:40">call</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:50">abi_long</name></type> <name pos:start="1:52" pos:end="1:56">first</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:38"><decl pos:start="3:24" pos:end="3:38"><type pos:start="3:24" pos:end="3:38"><name pos:start="3:24" pos:end="3:31">abi_long</name></type> <name pos:start="3:33" pos:end="3:38">second</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:48">abi_long</name></type> <name pos:start="3:50" pos:end="3:54">third</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:31">abi_long</name></type> <name pos:start="5:33" pos:end="5:35">ptr</name></decl></parameter>, <parameter pos:start="5:38" pos:end="5:51"><decl pos:start="5:38" pos:end="5:51"><type pos:start="5:38" pos:end="5:51"><name pos:start="5:38" pos:end="5:45">abi_long</name></type> <name pos:start="5:47" pos:end="5:51">fifth</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="201:1">{<block_content pos:start="9:5" pos:end="199:15">

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">abi_long</name></type> <name pos:start="11:14" pos:end="11:16">ret</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:11">version</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:18">call</name> <operator pos:start="15:20" pos:end="15:21">&gt;&gt;</operator> <literal type="number" pos:start="15:23" pos:end="15:24">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:8">call</name> <operator pos:start="17:10" pos:end="17:11">&amp;=</operator> <literal type="number" pos:start="17:13" pos:end="17:18">0xffff</literal></expr>;</expr_stmt>



    <switch pos:start="21:5" pos:end="197:5">switch <condition pos:start="21:12" pos:end="21:17">(<expr pos:start="21:13" pos:end="21:16"><name pos:start="21:13" pos:end="21:16">call</name></expr>)</condition> <block pos:start="21:19" pos:end="197:5">{<block_content pos:start="23:5" pos:end="195:14">

    <case pos:start="23:5" pos:end="23:21">case <expr pos:start="23:10" pos:end="23:20"><name pos:start="23:10" pos:end="23:20">IPCOP_semop</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:43"><expr pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:42"><name pos:start="25:15" pos:end="25:22">do_semop</name><argument_list pos:start="25:23" pos:end="25:42">(<argument pos:start="25:24" pos:end="25:28"><expr pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:28">first</name></expr></argument>, <argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">ptr</name></expr></argument>, <argument pos:start="25:36" pos:end="25:41"><expr pos:start="25:36" pos:end="25:41"><name pos:start="25:36" pos:end="25:41">second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>



    <case pos:start="31:5" pos:end="31:22">case <expr pos:start="31:10" pos:end="31:21"><name pos:start="31:10" pos:end="31:21">IPCOP_semget</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:54"><expr pos:start="33:9" pos:end="33:53"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:53"><name pos:start="33:15" pos:end="33:23">get_errno</name><argument_list pos:start="33:24" pos:end="33:53">(<argument pos:start="33:25" pos:end="33:52"><expr pos:start="33:25" pos:end="33:52"><call pos:start="33:25" pos:end="33:52"><name pos:start="33:25" pos:end="33:30">semget</name><argument_list pos:start="33:31" pos:end="33:52">(<argument pos:start="33:32" pos:end="33:36"><expr pos:start="33:32" pos:end="33:36"><name pos:start="33:32" pos:end="33:36">first</name></expr></argument>, <argument pos:start="33:39" pos:end="33:44"><expr pos:start="33:39" pos:end="33:44"><name pos:start="33:39" pos:end="33:44">second</name></expr></argument>, <argument pos:start="33:47" pos:end="33:51"><expr pos:start="33:47" pos:end="33:51"><name pos:start="33:47" pos:end="33:51">third</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>



    <case pos:start="39:5" pos:end="39:22">case <expr pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:21">IPCOP_semctl</name></expr>:</case> <block pos:start="39:24" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:14">

        <comment type="block" pos:start="41:9" pos:end="43:27">/* The semun argument to semctl is passed by value, so dereference the

         * ptr argument. */</comment>

        <decl_stmt pos:start="45:9" pos:end="45:24"><decl pos:start="45:9" pos:end="45:23"><type pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:17">abi_ulong</name></type> <name pos:start="45:19" pos:end="45:23">atptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><call pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:20">get_user_ual</name><argument_list pos:start="47:21" pos:end="47:32">(<argument pos:start="47:22" pos:end="47:26"><expr pos:start="47:22" pos:end="47:26"><name pos:start="47:22" pos:end="47:26">atptr</name></expr></argument>, <argument pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:31">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:53"><expr pos:start="49:9" pos:end="49:52"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:52"><name pos:start="49:15" pos:end="49:23">do_semctl</name><argument_list pos:start="49:24" pos:end="49:52">(<argument pos:start="49:25" pos:end="49:29"><expr pos:start="49:25" pos:end="49:29"><name pos:start="49:25" pos:end="49:29">first</name></expr></argument>, <argument pos:start="49:32" pos:end="49:37"><expr pos:start="49:32" pos:end="49:37"><name pos:start="49:32" pos:end="49:37">second</name></expr></argument>, <argument pos:start="49:40" pos:end="49:44"><expr pos:start="49:40" pos:end="49:44"><name pos:start="49:40" pos:end="49:44">third</name></expr></argument>, <argument pos:start="49:47" pos:end="49:51"><expr pos:start="49:47" pos:end="49:51"><name pos:start="49:47" pos:end="49:51">atptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    </block_content>}</block>



    <case pos:start="57:5" pos:end="57:22">case <expr pos:start="57:10" pos:end="57:21"><name pos:start="57:10" pos:end="57:21">IPCOP_msgget</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:47"><expr pos:start="59:9" pos:end="59:46"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:46"><name pos:start="59:15" pos:end="59:23">get_errno</name><argument_list pos:start="59:24" pos:end="59:46">(<argument pos:start="59:25" pos:end="59:45"><expr pos:start="59:25" pos:end="59:45"><call pos:start="59:25" pos:end="59:45"><name pos:start="59:25" pos:end="59:30">msgget</name><argument_list pos:start="59:31" pos:end="59:45">(<argument pos:start="59:32" pos:end="59:36"><expr pos:start="59:32" pos:end="59:36"><name pos:start="59:32" pos:end="59:36">first</name></expr></argument>, <argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><name pos:start="59:39" pos:end="59:44">second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>



    <case pos:start="65:5" pos:end="65:22">case <expr pos:start="65:10" pos:end="65:21"><name pos:start="65:10" pos:end="65:21">IPCOP_msgsnd</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:50"><name pos:start="67:15" pos:end="67:23">do_msgsnd</name><argument_list pos:start="67:24" pos:end="67:50">(<argument pos:start="67:25" pos:end="67:29"><expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:29">first</name></expr></argument>, <argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">ptr</name></expr></argument>, <argument pos:start="67:37" pos:end="67:42"><expr pos:start="67:37" pos:end="67:42"><name pos:start="67:37" pos:end="67:42">second</name></expr></argument>, <argument pos:start="67:45" pos:end="67:49"><expr pos:start="67:45" pos:end="67:49"><name pos:start="67:45" pos:end="67:49">third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>



    <case pos:start="73:5" pos:end="73:22">case <expr pos:start="73:10" pos:end="73:21"><name pos:start="73:10" pos:end="73:21">IPCOP_msgctl</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:44"><expr pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:43"><name pos:start="75:15" pos:end="75:23">do_msgctl</name><argument_list pos:start="75:24" pos:end="75:43">(<argument pos:start="75:25" pos:end="75:29"><expr pos:start="75:25" pos:end="75:29"><name pos:start="75:25" pos:end="75:29">first</name></expr></argument>, <argument pos:start="75:32" pos:end="75:37"><expr pos:start="75:32" pos:end="75:37"><name pos:start="75:32" pos:end="75:37">second</name></expr></argument>, <argument pos:start="75:40" pos:end="75:42"><expr pos:start="75:40" pos:end="75:42"><name pos:start="75:40" pos:end="75:42">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>



    <case pos:start="81:5" pos:end="81:22">case <expr pos:start="81:10" pos:end="81:21"><name pos:start="81:10" pos:end="81:21">IPCOP_msgrcv</name></expr>:</case>

        <switch pos:start="83:9" pos:end="123:9">switch <condition pos:start="83:16" pos:end="83:24">(<expr pos:start="83:17" pos:end="83:23"><name pos:start="83:17" pos:end="83:23">version</name></expr>)</condition> <block pos:start="83:26" pos:end="123:9">{<block_content pos:start="85:9" pos:end="121:62">

        <case pos:start="85:9" pos:end="85:15">case <expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>:</case>

            <block pos:start="87:13" pos:end="117:13">{<block_content pos:start="89:17" pos:end="115:22">

                <struct pos:start="89:17" pos:end="95:23">struct <name pos:start="89:24" pos:end="89:40">target_ipc_kludge</name> <block pos:start="89:42" pos:end="95:17">{

                    <decl_stmt pos:start="91:21" pos:end="91:34"><decl pos:start="91:21" pos:end="91:33"><type pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:28">abi_long</name></type> <name pos:start="91:30" pos:end="91:33">msgp</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="93:21" pos:end="93:36"><decl pos:start="93:21" pos:end="93:35"><type pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:28">abi_long</name></type> <name pos:start="93:30" pos:end="93:35">msgtyp</name></decl>;</decl_stmt>

                }</block> <decl pos:start="95:19" pos:end="95:22"><modifier pos:start="95:19" pos:end="95:19">*</modifier><name pos:start="95:20" pos:end="95:22">tmp</name></decl>;</struct>



                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if <condition pos:start="99:20" pos:end="99:64">(<expr pos:start="99:21" pos:end="99:63"><operator pos:start="99:21" pos:end="99:21">!</operator><call pos:start="99:22" pos:end="99:63"><name pos:start="99:22" pos:end="99:37">lock_user_struct</name><argument_list pos:start="99:38" pos:end="99:63">(<argument pos:start="99:39" pos:end="99:49"><expr pos:start="99:39" pos:end="99:49"><name pos:start="99:39" pos:end="99:49">VERIFY_READ</name></expr></argument>, <argument pos:start="99:52" pos:end="99:54"><expr pos:start="99:52" pos:end="99:54"><name pos:start="99:52" pos:end="99:54">tmp</name></expr></argument>, <argument pos:start="99:57" pos:end="99:59"><expr pos:start="99:57" pos:end="99:59"><name pos:start="99:57" pos:end="99:59">ptr</name></expr></argument>, <argument pos:start="99:62" pos:end="99:62"><expr pos:start="99:62" pos:end="99:62"><literal type="number" pos:start="99:62" pos:end="99:62">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:66" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:26">

                    <expr_stmt pos:start="101:21" pos:end="101:41"><expr pos:start="101:21" pos:end="101:40"><name pos:start="101:21" pos:end="101:23">ret</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <operator pos:start="101:27" pos:end="101:27">-</operator><name pos:start="101:28" pos:end="101:40">TARGET_EFAULT</name></expr>;</expr_stmt>

                    <break pos:start="103:21" pos:end="103:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="109:17" pos:end="109:96"><expr pos:start="109:17" pos:end="109:95"><name pos:start="109:17" pos:end="109:19">ret</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <call pos:start="109:23" pos:end="109:95"><name pos:start="109:23" pos:end="109:31">do_msgrcv</name><argument_list pos:start="109:32" pos:end="109:95">(<argument pos:start="109:33" pos:end="109:37"><expr pos:start="109:33" pos:end="109:37"><name pos:start="109:33" pos:end="109:37">first</name></expr></argument>, <argument pos:start="109:40" pos:end="109:57"><expr pos:start="109:40" pos:end="109:57"><call pos:start="109:40" pos:end="109:57"><name pos:start="109:40" pos:end="109:46">tswapal</name><argument_list pos:start="109:47" pos:end="109:57">(<argument pos:start="109:48" pos:end="109:56"><expr pos:start="109:48" pos:end="109:56"><name pos:start="109:48" pos:end="109:56"><name pos:start="109:48" pos:end="109:50">tmp</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:56">msgp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:60" pos:end="109:65"><expr pos:start="109:60" pos:end="109:65"><name pos:start="109:60" pos:end="109:65">second</name></expr></argument>, <argument pos:start="109:68" pos:end="109:87"><expr pos:start="109:68" pos:end="109:87"><call pos:start="109:68" pos:end="109:87"><name pos:start="109:68" pos:end="109:74">tswapal</name><argument_list pos:start="109:75" pos:end="109:87">(<argument pos:start="109:76" pos:end="109:86"><expr pos:start="109:76" pos:end="109:86"><name pos:start="109:76" pos:end="109:86"><name pos:start="109:76" pos:end="109:78">tmp</name><operator pos:start="109:79" pos:end="109:80">-&gt;</operator><name pos:start="109:81" pos:end="109:86">msgtyp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:90" pos:end="109:94"><expr pos:start="109:90" pos:end="109:94"><name pos:start="109:90" pos:end="109:94">third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="113:17" pos:end="113:48"><expr pos:start="113:17" pos:end="113:47"><call pos:start="113:17" pos:end="113:47"><name pos:start="113:17" pos:end="113:34">unlock_user_struct</name><argument_list pos:start="113:35" pos:end="113:47">(<argument pos:start="113:36" pos:end="113:38"><expr pos:start="113:36" pos:end="113:38"><name pos:start="113:36" pos:end="113:38">tmp</name></expr></argument>, <argument pos:start="113:41" pos:end="113:43"><expr pos:start="113:41" pos:end="113:43"><name pos:start="113:41" pos:end="113:43">ptr</name></expr></argument>, <argument pos:start="113:46" pos:end="113:46"><expr pos:start="113:46" pos:end="113:46"><literal type="number" pos:start="113:46" pos:end="113:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            </block_content>}</block>

        <default pos:start="119:9" pos:end="119:16">default:</default>

            <expr_stmt pos:start="121:13" pos:end="121:62"><expr pos:start="121:13" pos:end="121:61"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:61"><name pos:start="121:19" pos:end="121:27">do_msgrcv</name><argument_list pos:start="121:28" pos:end="121:61">(<argument pos:start="121:29" pos:end="121:33"><expr pos:start="121:29" pos:end="121:33"><name pos:start="121:29" pos:end="121:33">first</name></expr></argument>, <argument pos:start="121:36" pos:end="121:38"><expr pos:start="121:36" pos:end="121:38"><name pos:start="121:36" pos:end="121:38">ptr</name></expr></argument>, <argument pos:start="121:41" pos:end="121:46"><expr pos:start="121:41" pos:end="121:46"><name pos:start="121:41" pos:end="121:46">second</name></expr></argument>, <argument pos:start="121:49" pos:end="121:53"><expr pos:start="121:49" pos:end="121:53"><name pos:start="121:49" pos:end="121:53">fifth</name></expr></argument>, <argument pos:start="121:56" pos:end="121:60"><expr pos:start="121:56" pos:end="121:60"><name pos:start="121:56" pos:end="121:60">third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <break pos:start="125:9" pos:end="125:14">break;</break>



    <case pos:start="129:5" pos:end="129:21">case <expr pos:start="129:10" pos:end="129:20"><name pos:start="129:10" pos:end="129:20">IPCOP_shmat</name></expr>:</case>

        <switch pos:start="131:9" pos:end="159:9">switch <condition pos:start="131:16" pos:end="131:24">(<expr pos:start="131:17" pos:end="131:23"><name pos:start="131:17" pos:end="131:23">version</name></expr>)</condition> <block pos:start="131:26" pos:end="159:9">{<block_content pos:start="133:9" pos:end="157:18">

        <default pos:start="133:9" pos:end="133:16">default:</default>

        <block pos:start="135:9" pos:end="151:9">{<block_content pos:start="137:13" pos:end="149:18">

            <decl_stmt pos:start="137:13" pos:end="137:28"><decl pos:start="137:13" pos:end="137:27"><type pos:start="137:13" pos:end="137:21"><name pos:start="137:13" pos:end="137:21">abi_ulong</name></type> <name pos:start="137:23" pos:end="137:27">raddr</name></decl>;</decl_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:49"><expr pos:start="139:13" pos:end="139:48"><name pos:start="139:13" pos:end="139:17">raddr</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <call pos:start="139:21" pos:end="139:48"><name pos:start="139:21" pos:end="139:28">do_shmat</name><argument_list pos:start="139:29" pos:end="139:48">(<argument pos:start="139:30" pos:end="139:34"><expr pos:start="139:30" pos:end="139:34"><name pos:start="139:30" pos:end="139:34">first</name></expr></argument>, <argument pos:start="139:37" pos:end="139:39"><expr pos:start="139:37" pos:end="139:39"><name pos:start="139:37" pos:end="139:39">ptr</name></expr></argument>, <argument pos:start="139:42" pos:end="139:47"><expr pos:start="139:42" pos:end="139:47"><name pos:start="139:42" pos:end="139:47">second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="143:40"><if pos:start="141:13" pos:end="143:40">if <condition pos:start="141:16" pos:end="141:32">(<expr pos:start="141:17" pos:end="141:31"><call pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:24">is_error</name><argument_list pos:start="141:25" pos:end="141:31">(<argument pos:start="141:26" pos:end="141:30"><expr pos:start="141:26" pos:end="141:30"><name pos:start="141:26" pos:end="141:30">raddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:40"><block_content pos:start="143:17" pos:end="143:40">

                <return pos:start="143:17" pos:end="143:40">return <expr pos:start="143:24" pos:end="143:39"><call pos:start="143:24" pos:end="143:39"><name pos:start="143:24" pos:end="143:32">get_errno</name><argument_list pos:start="143:33" pos:end="143:39">(<argument pos:start="143:34" pos:end="143:38"><expr pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:38">raddr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="145:13" pos:end="147:38"><if pos:start="145:13" pos:end="147:38">if <condition pos:start="145:16" pos:end="145:43">(<expr pos:start="145:17" pos:end="145:42"><call pos:start="145:17" pos:end="145:42"><name pos:start="145:17" pos:end="145:28">put_user_ual</name><argument_list pos:start="145:29" pos:end="145:42">(<argument pos:start="145:30" pos:end="145:34"><expr pos:start="145:30" pos:end="145:34"><name pos:start="145:30" pos:end="145:34">raddr</name></expr></argument>, <argument pos:start="145:37" pos:end="145:41"><expr pos:start="145:37" pos:end="145:41"><name pos:start="145:37" pos:end="145:41">third</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:38"><block_content pos:start="147:17" pos:end="147:38">

                <return pos:start="147:17" pos:end="147:38">return <expr pos:start="147:24" pos:end="147:37"><operator pos:start="147:24" pos:end="147:24">-</operator><name pos:start="147:25" pos:end="147:37">TARGET_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        </block_content>}</block>

        <case pos:start="153:9" pos:end="153:15">case <expr pos:start="153:14" pos:end="153:14"><literal type="number" pos:start="153:14" pos:end="153:14">1</literal></expr>:</case>

            <expr_stmt pos:start="155:13" pos:end="155:33"><expr pos:start="155:13" pos:end="155:32"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <operator pos:start="155:19" pos:end="155:19">-</operator><name pos:start="155:20" pos:end="155:32">TARGET_EINVAL</name></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        </block_content>}</block></switch>

	<break pos:start="161:9" pos:end="161:14">break;</break>

    <case pos:start="163:5" pos:end="163:21">case <expr pos:start="163:10" pos:end="163:20"><name pos:start="163:10" pos:end="163:20">IPCOP_shmdt</name></expr>:</case>

        <expr_stmt pos:start="165:9" pos:end="165:28"><expr pos:start="165:9" pos:end="165:27"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:27"><name pos:start="165:15" pos:end="165:22">do_shmdt</name><argument_list pos:start="165:23" pos:end="165:27">(<argument pos:start="165:24" pos:end="165:26"><expr pos:start="165:24" pos:end="165:26"><name pos:start="165:24" pos:end="165:26">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="167:9" pos:end="167:14">break;</break>



    <case pos:start="171:5" pos:end="171:22">case <expr pos:start="171:10" pos:end="171:21"><name pos:start="171:10" pos:end="171:21">IPCOP_shmget</name></expr>:</case>

	<comment type="block" pos:start="173:9" pos:end="173:67">/* IPC_* flag values are the same on all linux platforms */</comment>

	<expr_stmt pos:start="175:9" pos:end="175:54"><expr pos:start="175:9" pos:end="175:53"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:53"><name pos:start="175:15" pos:end="175:23">get_errno</name><argument_list pos:start="175:24" pos:end="175:53">(<argument pos:start="175:25" pos:end="175:52"><expr pos:start="175:25" pos:end="175:52"><call pos:start="175:25" pos:end="175:52"><name pos:start="175:25" pos:end="175:30">shmget</name><argument_list pos:start="175:31" pos:end="175:52">(<argument pos:start="175:32" pos:end="175:36"><expr pos:start="175:32" pos:end="175:36"><name pos:start="175:32" pos:end="175:36">first</name></expr></argument>, <argument pos:start="175:39" pos:end="175:44"><expr pos:start="175:39" pos:end="175:44"><name pos:start="175:39" pos:end="175:44">second</name></expr></argument>, <argument pos:start="175:47" pos:end="175:51"><expr pos:start="175:47" pos:end="175:51"><name pos:start="175:47" pos:end="175:51">third</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="177:9" pos:end="177:14">break;</break>



	<comment type="block" pos:start="181:9" pos:end="181:80">/* IPC_* and SHM_* command values are the same on all linux platforms */</comment>

    <case pos:start="183:5" pos:end="183:22">case <expr pos:start="183:10" pos:end="183:21"><name pos:start="183:10" pos:end="183:21">IPCOP_shmctl</name></expr>:</case>

        <expr_stmt pos:start="185:9" pos:end="185:44"><expr pos:start="185:9" pos:end="185:43"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:43"><name pos:start="185:15" pos:end="185:23">do_shmctl</name><argument_list pos:start="185:24" pos:end="185:43">(<argument pos:start="185:25" pos:end="185:29"><expr pos:start="185:25" pos:end="185:29"><name pos:start="185:25" pos:end="185:29">first</name></expr></argument>, <argument pos:start="185:32" pos:end="185:37"><expr pos:start="185:32" pos:end="185:37"><name pos:start="185:32" pos:end="185:37">second</name></expr></argument>, <argument pos:start="185:40" pos:end="185:42"><expr pos:start="185:40" pos:end="185:42"><name pos:start="185:40" pos:end="185:42">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <default pos:start="189:5" pos:end="189:12">default:</default>

	<expr_stmt pos:start="191:9" pos:end="191:75"><expr pos:start="191:9" pos:end="191:74"><call pos:start="191:9" pos:end="191:74"><name pos:start="191:9" pos:end="191:16">gemu_log</name><argument_list pos:start="191:17" pos:end="191:74">(<argument pos:start="191:18" pos:end="191:58"><expr pos:start="191:18" pos:end="191:58"><literal type="string" pos:start="191:18" pos:end="191:58">"Unsupported ipc call: %d (version %d)\n"</literal></expr></argument>, <argument pos:start="191:61" pos:end="191:64"><expr pos:start="191:61" pos:end="191:64"><name pos:start="191:61" pos:end="191:64">call</name></expr></argument>, <argument pos:start="191:67" pos:end="191:73"><expr pos:start="191:67" pos:end="191:73"><name pos:start="191:67" pos:end="191:73">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="193:9" pos:end="193:29"><expr pos:start="193:9" pos:end="193:28"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <operator pos:start="193:15" pos:end="193:15">-</operator><name pos:start="193:16" pos:end="193:28">TARGET_ENOSYS</name></expr>;</expr_stmt>

	<break pos:start="195:9" pos:end="195:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="199:5" pos:end="199:15">return <expr pos:start="199:12" pos:end="199:14"><name pos:start="199:12" pos:end="199:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
