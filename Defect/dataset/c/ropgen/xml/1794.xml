<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1794.c" pos:tabs="8"><function pos:start="1:1" pos:end="480:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_vol_header</name><parameter_list pos:start="1:29" pos:end="1:66">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:43">MpegEncContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:61">GetBitContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">gb</name></decl></parameter>)</parameter_list><block pos:start="1:67" pos:end="480:13">{<block_content pos:start="3:5" pos:end="480:13">

    <decl_stmt pos:start="3:5" pos:end="3:33"><decl pos:start="3:5" pos:end="3:13"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:13">width</name></decl>, <decl pos:start="3:16" pos:end="3:21"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:16" pos:end="3:21">height</name></decl>, <decl pos:start="3:24" pos:end="3:32"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:24" pos:end="3:32">vo_ver_id</name></decl>;</decl_stmt>



    <comment type="block" pos:start="7:5" pos:end="7:20">/* vol header */</comment>

    <expr_stmt pos:start="9:5" pos:end="9:21"><expr pos:start="9:5" pos:end="9:20"><call pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:13">skip_bits</name><argument_list pos:start="9:14" pos:end="9:20">(<argument pos:start="9:15" pos:end="9:16"><expr pos:start="9:15" pos:end="9:16"><name pos:start="9:15" pos:end="9:16">gb</name></expr></argument>, <argument pos:start="9:19" pos:end="9:19"><expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="9:23" pos:end="9:41">/* random access */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:32"><expr pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:14">vo_type</name></name><operator pos:start="11:15" pos:end="11:15">=</operator> <call pos:start="11:17" pos:end="11:31"><name pos:start="11:17" pos:end="11:24">get_bits</name><argument_list pos:start="11:25" pos:end="11:31">(<argument pos:start="11:26" pos:end="11:27"><expr pos:start="11:26" pos:end="11:27"><name pos:start="11:26" pos:end="11:27">gb</name></expr></argument>, <argument pos:start="11:30" pos:end="11:30"><expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="480:13"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><call pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:17">get_bits1</name><argument_list pos:start="13:18" pos:end="13:21">(<argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><name pos:start="13:19" pos:end="13:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="13:23" pos:end="13:24">!=</operator> <literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr>)</condition> <block pos:start="13:29" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:25"> <comment type="block" pos:start="13:31" pos:end="13:44">/* is_ol_id */</comment>

        <expr_stmt pos:start="15:9" pos:end="15:36"><expr pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:17">vo_ver_id</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <call pos:start="15:21" pos:end="15:35"><name pos:start="15:21" pos:end="15:28">get_bits</name><argument_list pos:start="15:29" pos:end="15:35">(<argument pos:start="15:30" pos:end="15:31"><expr pos:start="15:30" pos:end="15:31"><name pos:start="15:30" pos:end="15:31">gb</name></expr></argument>, <argument pos:start="15:34" pos:end="15:34"><expr pos:start="15:34" pos:end="15:34"><literal type="number" pos:start="15:34" pos:end="15:34">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="15:38" pos:end="15:52">/* vo_ver_id */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:25"><expr pos:start="17:9" pos:end="17:24"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:17">skip_bits</name><argument_list pos:start="17:18" pos:end="17:24">(<argument pos:start="17:19" pos:end="17:20"><expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">gb</name></expr></argument>, <argument pos:start="17:23" pos:end="17:23"><expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:27" pos:end="17:43">/* vo_priority */</comment>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="480:13">else <block pos:start="19:12" pos:end="480:13">{<block_content pos:start="21:9" pos:end="480:13">

        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:17">vo_ver_id</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</expr_stmt>


<comment type="line" pos:start="24:1" pos:end="24:36">//printf("vo type:%d\n",s-&gt;vo_type);</comment>

    <expr_stmt pos:start="26:5" pos:end="26:42"><expr pos:start="26:5" pos:end="26:41"><name pos:start="26:5" pos:end="26:24"><name pos:start="26:5" pos:end="26:5">s</name><operator pos:start="26:6" pos:end="26:7">-&gt;</operator><name pos:start="26:8" pos:end="26:24">aspect_ratio_info</name></name><operator pos:start="26:25" pos:end="26:25">=</operator> <call pos:start="26:27" pos:end="26:41"><name pos:start="26:27" pos:end="26:34">get_bits</name><argument_list pos:start="26:35" pos:end="26:41">(<argument pos:start="26:36" pos:end="26:37"><expr pos:start="26:36" pos:end="26:37"><name pos:start="26:36" pos:end="26:37">gb</name></expr></argument>, <argument pos:start="26:40" pos:end="26:40"><expr pos:start="26:40" pos:end="26:40"><literal type="number" pos:start="26:40" pos:end="26:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="28:5" pos:end="480:13"><if pos:start="28:5" pos:end="34:5">if<condition pos:start="28:7" pos:end="28:50">(<expr pos:start="28:8" pos:end="28:49"><name pos:start="28:8" pos:end="28:27"><name pos:start="28:8" pos:end="28:8">s</name><operator pos:start="28:9" pos:end="28:10">-&gt;</operator><name pos:start="28:11" pos:end="28:27">aspect_ratio_info</name></name> <operator pos:start="28:29" pos:end="28:30">==</operator> <name pos:start="28:32" pos:end="28:49">FF_ASPECT_EXTENDED</name></expr>)</condition><block pos:start="28:51" pos:end="34:5">{<block_content pos:start="30:9" pos:end="32:59">

        <expr_stmt pos:start="30:9" pos:end="30:59"><expr pos:start="30:9" pos:end="30:58"><name pos:start="30:9" pos:end="30:41"><name pos:start="30:9" pos:end="30:9">s</name><operator pos:start="30:10" pos:end="30:11">-&gt;</operator><name pos:start="30:12" pos:end="30:16">avctx</name><operator pos:start="30:17" pos:end="30:18">-&gt;</operator><name pos:start="30:19" pos:end="30:37">sample_aspect_ratio</name><operator pos:start="30:38" pos:end="30:38">.</operator><name pos:start="30:39" pos:end="30:41">num</name></name><operator pos:start="30:42" pos:end="30:42">=</operator> <call pos:start="30:44" pos:end="30:58"><name pos:start="30:44" pos:end="30:51">get_bits</name><argument_list pos:start="30:52" pos:end="30:58">(<argument pos:start="30:53" pos:end="30:54"><expr pos:start="30:53" pos:end="30:54"><name pos:start="30:53" pos:end="30:54">gb</name></expr></argument>, <argument pos:start="30:57" pos:end="30:57"><expr pos:start="30:57" pos:end="30:57"><literal type="number" pos:start="30:57" pos:end="30:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="30:61" pos:end="30:72">// par_width</comment>

        <expr_stmt pos:start="32:9" pos:end="32:59"><expr pos:start="32:9" pos:end="32:58"><name pos:start="32:9" pos:end="32:41"><name pos:start="32:9" pos:end="32:9">s</name><operator pos:start="32:10" pos:end="32:11">-&gt;</operator><name pos:start="32:12" pos:end="32:16">avctx</name><operator pos:start="32:17" pos:end="32:18">-&gt;</operator><name pos:start="32:19" pos:end="32:37">sample_aspect_ratio</name><operator pos:start="32:38" pos:end="32:38">.</operator><name pos:start="32:39" pos:end="32:41">den</name></name><operator pos:start="32:42" pos:end="32:42">=</operator> <call pos:start="32:44" pos:end="32:58"><name pos:start="32:44" pos:end="32:51">get_bits</name><argument_list pos:start="32:52" pos:end="32:58">(<argument pos:start="32:53" pos:end="32:54"><expr pos:start="32:53" pos:end="32:54"><name pos:start="32:53" pos:end="32:54">gb</name></expr></argument>, <argument pos:start="32:57" pos:end="32:57"><expr pos:start="32:57" pos:end="32:57"><literal type="number" pos:start="32:57" pos:end="32:57">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="32:61" pos:end="32:73">// par_height</comment>

    </block_content>}</block></if><else pos:start="34:6" pos:end="480:13">else<block pos:start="34:10" pos:end="480:13">{<block_content pos:start="36:9" pos:end="480:13">

        <expr_stmt pos:start="36:9" pos:end="36:74"><expr pos:start="36:9" pos:end="36:73"><name pos:start="36:9" pos:end="36:37"><name pos:start="36:9" pos:end="36:9">s</name><operator pos:start="36:10" pos:end="36:11">-&gt;</operator><name pos:start="36:12" pos:end="36:16">avctx</name><operator pos:start="36:17" pos:end="36:18">-&gt;</operator><name pos:start="36:19" pos:end="36:37">sample_aspect_ratio</name></name><operator pos:start="36:38" pos:end="36:38">=</operator> <name pos:start="36:40" pos:end="36:73"><name pos:start="36:40" pos:end="36:51">pixel_aspect</name><index pos:start="36:52" pos:end="36:73">[<expr pos:start="36:53" pos:end="36:72"><name pos:start="36:53" pos:end="36:72"><name pos:start="36:53" pos:end="36:53">s</name><operator pos:start="36:54" pos:end="36:55">-&gt;</operator><name pos:start="36:56" pos:end="36:72">aspect_ratio_info</name></name></expr>]</index></name></expr>;</expr_stmt>




    <if_stmt pos:start="41:5" pos:end="480:13"><if pos:start="41:5" pos:end="480:13">if <condition pos:start="41:8" pos:end="41:50">(<expr pos:start="41:9" pos:end="41:49"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:34"><name pos:start="41:10" pos:end="41:10">s</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:34">vol_control_parameters</name></name><operator pos:start="41:35" pos:end="41:35">=</operator><call pos:start="41:36" pos:end="41:48"><name pos:start="41:36" pos:end="41:44">get_bits1</name><argument_list pos:start="41:45" pos:end="41:48">(<argument pos:start="41:46" pos:end="41:47"><expr pos:start="41:46" pos:end="41:47"><name pos:start="41:46" pos:end="41:47">gb</name></expr></argument>)</argument_list></call><operator pos:start="41:49" pos:end="41:49">)</operator></expr>)</condition> <block pos:start="41:52" pos:end="480:13">{<block_content pos:start="43:9" pos:end="480:13"> <comment type="block" pos:start="41:54" pos:end="41:80">/* vol control parameter */</comment>

        <decl_stmt pos:start="43:9" pos:end="43:43"><decl pos:start="43:9" pos:end="43:42"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:25">chroma_format</name><init pos:start="43:26" pos:end="43:42">= <expr pos:start="43:28" pos:end="43:42"><call pos:start="43:28" pos:end="43:42"><name pos:start="43:28" pos:end="43:35">get_bits</name><argument_list pos:start="43:36" pos:end="43:42">(<argument pos:start="43:37" pos:end="43:38"><expr pos:start="43:37" pos:end="43:38"><name pos:start="43:37" pos:end="43:38">gb</name></expr></argument>, <argument pos:start="43:41" pos:end="43:41"><expr pos:start="43:41" pos:end="43:41"><literal type="number" pos:start="43:41" pos:end="43:41">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="45:9" pos:end="480:13"><if pos:start="45:9" pos:end="480:13">if<condition pos:start="45:11" pos:end="45:28">(<expr pos:start="45:12" pos:end="45:27"><name pos:start="45:12" pos:end="45:24">chroma_format</name><operator pos:start="45:25" pos:end="45:26">!=</operator><literal type="number" pos:start="45:27" pos:end="45:27">1</literal></expr>)</condition><block pos:start="45:29" pos:end="480:13">{<block_content pos:start="47:13" pos:end="480:13">

            <expr_stmt pos:start="47:13" pos:end="47:70"><expr pos:start="47:13" pos:end="47:69"><call pos:start="47:13" pos:end="47:69"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:69">(<argument pos:start="47:20" pos:end="47:27"><expr pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:27">avctx</name></name></expr></argument>, <argument pos:start="47:30" pos:end="47:41"><expr pos:start="47:30" pos:end="47:41"><name pos:start="47:30" pos:end="47:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:44" pos:end="47:68"><expr pos:start="47:44" pos:end="47:68"><literal type="string" pos:start="47:44" pos:end="47:68">"illegal chroma format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="50:9" pos:end="50:36"><expr pos:start="50:9" pos:end="50:35"><name pos:start="50:9" pos:end="50:20"><name pos:start="50:9" pos:end="50:9">s</name><operator pos:start="50:10" pos:end="50:11">-&gt;</operator><name pos:start="50:12" pos:end="50:20">low_delay</name></name><operator pos:start="50:21" pos:end="50:21">=</operator> <call pos:start="50:23" pos:end="50:35"><name pos:start="50:23" pos:end="50:31">get_bits1</name><argument_list pos:start="50:32" pos:end="50:35">(<argument pos:start="50:33" pos:end="50:34"><expr pos:start="50:33" pos:end="50:34"><name pos:start="50:33" pos:end="50:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="52:9" pos:end="480:13"><if pos:start="52:9" pos:end="77:5">if<condition pos:start="52:11" pos:end="52:25">(<expr pos:start="52:12" pos:end="52:24"><call pos:start="52:12" pos:end="52:24"><name pos:start="52:12" pos:end="52:20">get_bits1</name><argument_list pos:start="52:21" pos:end="52:24">(<argument pos:start="52:22" pos:end="52:23"><expr pos:start="52:22" pos:end="52:23"><name pos:start="52:22" pos:end="52:23">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="52:26" pos:end="77:5">{<block_content pos:start="54:13" pos:end="74:27"> <comment type="block" pos:start="52:28" pos:end="52:47">/* vbv parameters */</comment>

            <expr_stmt pos:start="54:13" pos:end="54:29"><expr pos:start="54:13" pos:end="54:28"><call pos:start="54:13" pos:end="54:28"><name pos:start="54:13" pos:end="54:20">get_bits</name><argument_list pos:start="54:21" pos:end="54:28">(<argument pos:start="54:22" pos:end="54:23"><expr pos:start="54:22" pos:end="54:23"><name pos:start="54:22" pos:end="54:23">gb</name></expr></argument>, <argument pos:start="54:26" pos:end="54:27"><expr pos:start="54:26" pos:end="54:27"><literal type="number" pos:start="54:26" pos:end="54:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="54:33" pos:end="54:56">/* first_half_bitrate */</comment>

            <expr_stmt pos:start="56:13" pos:end="56:27"><expr pos:start="56:13" pos:end="56:26"><call pos:start="56:13" pos:end="56:26"><name pos:start="56:13" pos:end="56:22">skip_bits1</name><argument_list pos:start="56:23" pos:end="56:26">(<argument pos:start="56:24" pos:end="56:25"><expr pos:start="56:24" pos:end="56:25"><name pos:start="56:24" pos:end="56:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="56:33" pos:end="56:44">/* marker */</comment>

            <expr_stmt pos:start="58:13" pos:end="58:29"><expr pos:start="58:13" pos:end="58:28"><call pos:start="58:13" pos:end="58:28"><name pos:start="58:13" pos:end="58:20">get_bits</name><argument_list pos:start="58:21" pos:end="58:28">(<argument pos:start="58:22" pos:end="58:23"><expr pos:start="58:22" pos:end="58:23"><name pos:start="58:22" pos:end="58:23">gb</name></expr></argument>, <argument pos:start="58:26" pos:end="58:27"><expr pos:start="58:26" pos:end="58:27"><literal type="number" pos:start="58:26" pos:end="58:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="58:33" pos:end="58:57">/* latter_half_bitrate */</comment>

            <expr_stmt pos:start="60:13" pos:end="60:27"><expr pos:start="60:13" pos:end="60:26"><call pos:start="60:13" pos:end="60:26"><name pos:start="60:13" pos:end="60:22">skip_bits1</name><argument_list pos:start="60:23" pos:end="60:26">(<argument pos:start="60:24" pos:end="60:25"><expr pos:start="60:24" pos:end="60:25"><name pos:start="60:24" pos:end="60:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="60:33" pos:end="60:44">/* marker */</comment>

            <expr_stmt pos:start="62:13" pos:end="62:29"><expr pos:start="62:13" pos:end="62:28"><call pos:start="62:13" pos:end="62:28"><name pos:start="62:13" pos:end="62:20">get_bits</name><argument_list pos:start="62:21" pos:end="62:28">(<argument pos:start="62:22" pos:end="62:23"><expr pos:start="62:22" pos:end="62:23"><name pos:start="62:22" pos:end="62:23">gb</name></expr></argument>, <argument pos:start="62:26" pos:end="62:27"><expr pos:start="62:26" pos:end="62:27"><literal type="number" pos:start="62:26" pos:end="62:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="62:33" pos:end="62:64">/* first_half_vbv_buffer_size */</comment>

            <expr_stmt pos:start="64:13" pos:end="64:27"><expr pos:start="64:13" pos:end="64:26"><call pos:start="64:13" pos:end="64:26"><name pos:start="64:13" pos:end="64:22">skip_bits1</name><argument_list pos:start="64:23" pos:end="64:26">(<argument pos:start="64:24" pos:end="64:25"><expr pos:start="64:24" pos:end="64:25"><name pos:start="64:24" pos:end="64:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="64:33" pos:end="64:44">/* marker */</comment>

            <expr_stmt pos:start="66:13" pos:end="66:28"><expr pos:start="66:13" pos:end="66:27"><call pos:start="66:13" pos:end="66:27"><name pos:start="66:13" pos:end="66:20">get_bits</name><argument_list pos:start="66:21" pos:end="66:27">(<argument pos:start="66:22" pos:end="66:23"><expr pos:start="66:22" pos:end="66:23"><name pos:start="66:22" pos:end="66:23">gb</name></expr></argument>, <argument pos:start="66:26" pos:end="66:26"><expr pos:start="66:26" pos:end="66:26"><literal type="number" pos:start="66:26" pos:end="66:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="66:33" pos:end="66:65">/* latter_half_vbv_buffer_size */</comment>

            <expr_stmt pos:start="68:13" pos:end="68:29"><expr pos:start="68:13" pos:end="68:28"><call pos:start="68:13" pos:end="68:28"><name pos:start="68:13" pos:end="68:20">get_bits</name><argument_list pos:start="68:21" pos:end="68:28">(<argument pos:start="68:22" pos:end="68:23"><expr pos:start="68:22" pos:end="68:23"><name pos:start="68:22" pos:end="68:23">gb</name></expr></argument>, <argument pos:start="68:26" pos:end="68:27"><expr pos:start="68:26" pos:end="68:27"><literal type="number" pos:start="68:26" pos:end="68:27">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="68:33" pos:end="68:62">/* first_half_vbv_occupancy */</comment>

            <expr_stmt pos:start="70:13" pos:end="70:27"><expr pos:start="70:13" pos:end="70:26"><call pos:start="70:13" pos:end="70:26"><name pos:start="70:13" pos:end="70:22">skip_bits1</name><argument_list pos:start="70:23" pos:end="70:26">(<argument pos:start="70:24" pos:end="70:25"><expr pos:start="70:24" pos:end="70:25"><name pos:start="70:24" pos:end="70:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="70:33" pos:end="70:44">/* marker */</comment>

            <expr_stmt pos:start="72:13" pos:end="72:29"><expr pos:start="72:13" pos:end="72:28"><call pos:start="72:13" pos:end="72:28"><name pos:start="72:13" pos:end="72:20">get_bits</name><argument_list pos:start="72:21" pos:end="72:28">(<argument pos:start="72:22" pos:end="72:23"><expr pos:start="72:22" pos:end="72:23"><name pos:start="72:22" pos:end="72:23">gb</name></expr></argument>, <argument pos:start="72:26" pos:end="72:27"><expr pos:start="72:26" pos:end="72:27"><literal type="number" pos:start="72:26" pos:end="72:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="72:33" pos:end="72:63">/* latter_half_vbv_occupancy */</comment>

            <expr_stmt pos:start="74:13" pos:end="74:27"><expr pos:start="74:13" pos:end="74:26"><call pos:start="74:13" pos:end="74:26"><name pos:start="74:13" pos:end="74:22">skip_bits1</name><argument_list pos:start="74:23" pos:end="74:26">(<argument pos:start="74:24" pos:end="74:25"><expr pos:start="74:24" pos:end="74:25"><name pos:start="74:24" pos:end="74:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="74:33" pos:end="74:44">/* marker */</comment>


    </block_content>}</block></if><else pos:start="77:6" pos:end="480:13">else<block pos:start="77:10" pos:end="480:13">{<block_content pos:start="81:9" pos:end="480:13">

        <comment type="line" pos:start="79:9" pos:end="79:92">// set low delay flag only once the smartest? low delay detection won't be overriden</comment>

        <if_stmt pos:start="81:9" pos:end="83:27"><if pos:start="81:9" pos:end="83:27">if<condition pos:start="81:11" pos:end="81:32">(<expr pos:start="81:12" pos:end="81:31"><name pos:start="81:12" pos:end="81:28"><name pos:start="81:12" pos:end="81:12">s</name><operator pos:start="81:13" pos:end="81:14">-&gt;</operator><name pos:start="81:15" pos:end="81:28">picture_number</name></name><operator pos:start="81:29" pos:end="81:30">==</operator><literal type="number" pos:start="81:31" pos:end="81:31">0</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:27"><block_content pos:start="83:13" pos:end="83:27">

            <expr_stmt pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:24">low_delay</name></name><operator pos:start="83:25" pos:end="83:25">=</operator><literal type="number" pos:start="83:26" pos:end="83:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




    <expr_stmt pos:start="88:5" pos:end="88:31"><expr pos:start="88:5" pos:end="88:30"><name pos:start="88:5" pos:end="88:12"><name pos:start="88:5" pos:end="88:5">s</name><operator pos:start="88:6" pos:end="88:7">-&gt;</operator><name pos:start="88:8" pos:end="88:12">shape</name></name> <operator pos:start="88:14" pos:end="88:14">=</operator> <call pos:start="88:16" pos:end="88:30"><name pos:start="88:16" pos:end="88:23">get_bits</name><argument_list pos:start="88:24" pos:end="88:30">(<argument pos:start="88:25" pos:end="88:26"><expr pos:start="88:25" pos:end="88:26"><name pos:start="88:25" pos:end="88:26">gb</name></expr></argument>, <argument pos:start="88:29" pos:end="88:29"><expr pos:start="88:29" pos:end="88:29"><literal type="number" pos:start="88:29" pos:end="88:29">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="88:33" pos:end="88:47">/* vol shape */</comment>

    <if_stmt pos:start="90:5" pos:end="90:98"><if pos:start="90:5" pos:end="90:98">if<condition pos:start="90:7" pos:end="90:30">(<expr pos:start="90:8" pos:end="90:29"><name pos:start="90:8" pos:end="90:15"><name pos:start="90:8" pos:end="90:8">s</name><operator pos:start="90:9" pos:end="90:10">-&gt;</operator><name pos:start="90:11" pos:end="90:15">shape</name></name> <operator pos:start="90:17" pos:end="90:18">!=</operator> <name pos:start="90:20" pos:end="90:29">RECT_SHAPE</name></expr>)</condition><block type="pseudo" pos:start="90:32" pos:end="90:98"><block_content pos:start="90:32" pos:end="90:98"> <expr_stmt pos:start="90:32" pos:end="90:98"><expr pos:start="90:32" pos:end="90:97"><call pos:start="90:32" pos:end="90:97"><name pos:start="90:32" pos:end="90:37">av_log</name><argument_list pos:start="90:38" pos:end="90:97">(<argument pos:start="90:39" pos:end="90:46"><expr pos:start="90:39" pos:end="90:46"><name pos:start="90:39" pos:end="90:46"><name pos:start="90:39" pos:end="90:39">s</name><operator pos:start="90:40" pos:end="90:41">-&gt;</operator><name pos:start="90:42" pos:end="90:46">avctx</name></name></expr></argument>, <argument pos:start="90:49" pos:end="90:60"><expr pos:start="90:49" pos:end="90:60"><name pos:start="90:49" pos:end="90:60">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="90:63" pos:end="90:96"><expr pos:start="90:63" pos:end="90:96"><literal type="string" pos:start="90:63" pos:end="90:96">"only rectangular vol supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="92:5" pos:end="480:13"><if pos:start="92:5" pos:end="480:13">if<condition pos:start="92:7" pos:end="92:48">(<expr pos:start="92:8" pos:end="92:47"><name pos:start="92:8" pos:end="92:15"><name pos:start="92:8" pos:end="92:8">s</name><operator pos:start="92:9" pos:end="92:10">-&gt;</operator><name pos:start="92:11" pos:end="92:15">shape</name></name> <operator pos:start="92:17" pos:end="92:18">==</operator> <name pos:start="92:20" pos:end="92:29">GRAY_SHAPE</name> <operator pos:start="92:31" pos:end="92:32">&amp;&amp;</operator> <name pos:start="92:34" pos:end="92:42">vo_ver_id</name> <operator pos:start="92:44" pos:end="92:45">!=</operator> <literal type="number" pos:start="92:47" pos:end="92:47">1</literal></expr>)</condition><block pos:start="92:49" pos:end="480:13">{<block_content pos:start="94:9" pos:end="480:13">

        <expr_stmt pos:start="94:9" pos:end="94:69"><expr pos:start="94:9" pos:end="94:68"><call pos:start="94:9" pos:end="94:68"><name pos:start="94:9" pos:end="94:14">av_log</name><argument_list pos:start="94:15" pos:end="94:68">(<argument pos:start="94:16" pos:end="94:23"><expr pos:start="94:16" pos:end="94:23"><name pos:start="94:16" pos:end="94:23"><name pos:start="94:16" pos:end="94:16">s</name><operator pos:start="94:17" pos:end="94:18">-&gt;</operator><name pos:start="94:19" pos:end="94:23">avctx</name></name></expr></argument>, <argument pos:start="94:26" pos:end="94:37"><expr pos:start="94:26" pos:end="94:37"><name pos:start="94:26" pos:end="94:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="94:40" pos:end="94:67"><expr pos:start="94:40" pos:end="94:67"><literal type="string" pos:start="94:40" pos:end="94:67">"Gray shape not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="96:9" pos:end="96:25"><expr pos:start="96:9" pos:end="96:24"><call pos:start="96:9" pos:end="96:24"><name pos:start="96:9" pos:end="96:17">skip_bits</name><argument_list pos:start="96:18" pos:end="96:24">(<argument pos:start="96:19" pos:end="96:20"><expr pos:start="96:19" pos:end="96:20"><name pos:start="96:19" pos:end="96:20">gb</name></expr></argument>, <argument pos:start="96:23" pos:end="96:23"><expr pos:start="96:23" pos:end="96:23"><literal type="number" pos:start="96:23" pos:end="96:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="96:28" pos:end="96:63">//video_object_layer_shape_extension</comment>




    <expr_stmt pos:start="101:5" pos:end="101:57"><expr pos:start="101:5" pos:end="101:56"><call pos:start="101:5" pos:end="101:56"><name pos:start="101:5" pos:end="101:16">check_marker</name><argument_list pos:start="101:17" pos:end="101:56">(<argument pos:start="101:18" pos:end="101:19"><expr pos:start="101:18" pos:end="101:19"><name pos:start="101:18" pos:end="101:19">gb</name></expr></argument>, <argument pos:start="101:22" pos:end="101:55"><expr pos:start="101:22" pos:end="101:55"><literal type="string" pos:start="101:22" pos:end="101:55">"before time_increment_resolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:27"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:12">avctx</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:23">time_base</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:27">den</name></name> <operator pos:start="105:29" pos:end="105:29">=</operator> <call pos:start="105:31" pos:end="105:46"><name pos:start="105:31" pos:end="105:38">get_bits</name><argument_list pos:start="105:39" pos:end="105:46">(<argument pos:start="105:40" pos:end="105:41"><expr pos:start="105:40" pos:end="105:41"><name pos:start="105:40" pos:end="105:41">gb</name></expr></argument>, <argument pos:start="105:44" pos:end="105:45"><expr pos:start="105:44" pos:end="105:45"><literal type="number" pos:start="105:44" pos:end="105:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="480:13"><if pos:start="107:5" pos:end="480:13">if<condition pos:start="107:7" pos:end="107:32">(<expr pos:start="107:8" pos:end="107:31"><operator pos:start="107:8" pos:end="107:8">!</operator><name pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:16">avctx</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:27">time_base</name><operator pos:start="107:28" pos:end="107:28">.</operator><name pos:start="107:29" pos:end="107:31">den</name></name></expr>)</condition><block pos:start="107:33" pos:end="480:13">{<block_content pos:start="109:9" pos:end="480:13">

        <expr_stmt pos:start="109:9" pos:end="109:61"><expr pos:start="109:9" pos:end="109:60"><call pos:start="109:9" pos:end="109:60"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:60">(<argument pos:start="109:16" pos:end="109:23"><expr pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:23"><name pos:start="109:16" pos:end="109:16">s</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:23">avctx</name></name></expr></argument>, <argument pos:start="109:26" pos:end="109:37"><expr pos:start="109:26" pos:end="109:37"><name pos:start="109:26" pos:end="109:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:40" pos:end="109:59"><expr pos:start="109:40" pos:end="109:59"><literal type="string" pos:start="109:40" pos:end="109:59">"time_base.den==0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="115:5" pos:end="115:70"><expr pos:start="115:5" pos:end="115:69"><name pos:start="115:5" pos:end="115:26"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:26">time_increment_bits</name></name> <operator pos:start="115:28" pos:end="115:28">=</operator> <call pos:start="115:30" pos:end="115:65"><name pos:start="115:30" pos:end="115:36">av_log2</name><argument_list pos:start="115:37" pos:end="115:65">(<argument pos:start="115:38" pos:end="115:64"><expr pos:start="115:38" pos:end="115:64"><name pos:start="115:38" pos:end="115:60"><name pos:start="115:38" pos:end="115:38">s</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:45">avctx</name><operator pos:start="115:46" pos:end="115:47">-&gt;</operator><name pos:start="115:48" pos:end="115:56">time_base</name><operator pos:start="115:57" pos:end="115:57">.</operator><name pos:start="115:58" pos:end="115:60">den</name></name> <operator pos:start="115:62" pos:end="115:62">-</operator> <literal type="number" pos:start="115:64" pos:end="115:64">1</literal></expr></argument>)</argument_list></call> <operator pos:start="115:67" pos:end="115:67">+</operator> <literal type="number" pos:start="115:69" pos:end="115:69">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="119:35"><if pos:start="117:5" pos:end="119:35">if <condition pos:start="117:8" pos:end="117:35">(<expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:30"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:30">time_increment_bits</name></name> <operator pos:start="117:32" pos:end="117:32">&lt;</operator> <literal type="number" pos:start="117:34" pos:end="117:34">1</literal></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:35"><block_content pos:start="119:9" pos:end="119:35">

        <expr_stmt pos:start="119:9" pos:end="119:35"><expr pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:30">time_increment_bits</name></name> <operator pos:start="119:32" pos:end="119:32">=</operator> <literal type="number" pos:start="119:34" pos:end="119:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:46"><expr pos:start="123:5" pos:end="123:45"><call pos:start="123:5" pos:end="123:45"><name pos:start="123:5" pos:end="123:16">check_marker</name><argument_list pos:start="123:17" pos:end="123:45">(<argument pos:start="123:18" pos:end="123:19"><expr pos:start="123:18" pos:end="123:19"><name pos:start="123:18" pos:end="123:19">gb</name></expr></argument>, <argument pos:start="123:22" pos:end="123:44"><expr pos:start="123:22" pos:end="123:44"><literal type="string" pos:start="123:22" pos:end="123:44">"before fixed_vop_rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="133:36"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:27">(<expr pos:start="127:9" pos:end="127:26"><call pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:17">get_bits1</name><argument_list pos:start="127:18" pos:end="127:21">(<argument pos:start="127:19" pos:end="127:20"><expr pos:start="127:19" pos:end="127:20"><name pos:start="127:19" pos:end="127:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="127:23" pos:end="127:24">!=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal></expr>)</condition> <block pos:start="127:29" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:71">   <comment type="block" pos:start="127:33" pos:end="127:53">/* fixed_vop_rate  */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:71"><expr pos:start="129:9" pos:end="129:70"><name pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:16">avctx</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:27">time_base</name><operator pos:start="129:28" pos:end="129:28">.</operator><name pos:start="129:29" pos:end="129:31">num</name></name> <operator pos:start="129:33" pos:end="129:33">=</operator> <call pos:start="129:35" pos:end="129:70"><name pos:start="129:35" pos:end="129:42">get_bits</name><argument_list pos:start="129:43" pos:end="129:70">(<argument pos:start="129:44" pos:end="129:45"><expr pos:start="129:44" pos:end="129:45"><name pos:start="129:44" pos:end="129:45">gb</name></expr></argument>, <argument pos:start="129:48" pos:end="129:69"><expr pos:start="129:48" pos:end="129:69"><name pos:start="129:48" pos:end="129:69"><name pos:start="129:48" pos:end="129:48">s</name><operator pos:start="129:49" pos:end="129:50">-&gt;</operator><name pos:start="129:51" pos:end="129:69">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="131:6" pos:end="133:36">else<block type="pseudo" pos:start="133:9" pos:end="133:36"><block_content pos:start="133:9" pos:end="133:36">

        <expr_stmt pos:start="133:9" pos:end="133:36"><expr pos:start="133:9" pos:end="133:35"><name pos:start="133:9" pos:end="133:31"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:16">avctx</name><operator pos:start="133:17" pos:end="133:18">-&gt;</operator><name pos:start="133:19" pos:end="133:27">time_base</name><operator pos:start="133:28" pos:end="133:28">.</operator><name pos:start="133:29" pos:end="133:31">num</name></name> <operator pos:start="133:33" pos:end="133:33">=</operator> <literal type="number" pos:start="133:35" pos:end="133:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:17"><expr pos:start="137:5" pos:end="137:16"><name pos:start="137:5" pos:end="137:14"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:14">t_frame</name></name><operator pos:start="137:15" pos:end="137:15">=</operator><literal type="number" pos:start="137:16" pos:end="137:16">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="141:5" pos:end="480:13"><if pos:start="141:5" pos:end="480:13">if <condition pos:start="141:8" pos:end="141:35">(<expr pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:16">shape</name></name> <operator pos:start="141:18" pos:end="141:19">!=</operator> <name pos:start="141:21" pos:end="141:34">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="141:37" pos:end="480:13">{<block_content pos:start="143:9" pos:end="480:13">

        <if_stmt pos:start="143:9" pos:end="480:13"><if pos:start="143:9" pos:end="480:13">if <condition pos:start="143:12" pos:end="143:35">(<expr pos:start="143:13" pos:end="143:34"><name pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:20">shape</name></name> <operator pos:start="143:22" pos:end="143:23">==</operator> <name pos:start="143:25" pos:end="143:34">RECT_SHAPE</name></expr>)</condition> <block pos:start="143:37" pos:end="480:13">{<block_content pos:start="145:13" pos:end="480:13">

            <expr_stmt pos:start="145:13" pos:end="145:27"><expr pos:start="145:13" pos:end="145:26"><call pos:start="145:13" pos:end="145:26"><name pos:start="145:13" pos:end="145:22">skip_bits1</name><argument_list pos:start="145:23" pos:end="145:26">(<argument pos:start="145:24" pos:end="145:25"><expr pos:start="145:24" pos:end="145:25"><name pos:start="145:24" pos:end="145:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="145:31" pos:end="145:42">/* marker */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:37"><expr pos:start="147:13" pos:end="147:36"><name pos:start="147:13" pos:end="147:17">width</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="147:36"><name pos:start="147:21" pos:end="147:28">get_bits</name><argument_list pos:start="147:29" pos:end="147:36">(<argument pos:start="147:30" pos:end="147:31"><expr pos:start="147:30" pos:end="147:31"><name pos:start="147:30" pos:end="147:31">gb</name></expr></argument>, <argument pos:start="147:34" pos:end="147:35"><expr pos:start="147:34" pos:end="147:35"><literal type="number" pos:start="147:34" pos:end="147:35">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:27"><expr pos:start="149:13" pos:end="149:26"><call pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:22">skip_bits1</name><argument_list pos:start="149:23" pos:end="149:26">(<argument pos:start="149:24" pos:end="149:25"><expr pos:start="149:24" pos:end="149:25"><name pos:start="149:24" pos:end="149:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="149:31" pos:end="149:42">/* marker */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:38"><expr pos:start="151:13" pos:end="151:37"><name pos:start="151:13" pos:end="151:18">height</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:37"><name pos:start="151:22" pos:end="151:29">get_bits</name><argument_list pos:start="151:30" pos:end="151:37">(<argument pos:start="151:31" pos:end="151:32"><expr pos:start="151:31" pos:end="151:32"><name pos:start="151:31" pos:end="151:32">gb</name></expr></argument>, <argument pos:start="151:35" pos:end="151:36"><expr pos:start="151:35" pos:end="151:36"><literal type="number" pos:start="151:35" pos:end="151:36">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:26"><call pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:22">skip_bits1</name><argument_list pos:start="153:23" pos:end="153:26">(<argument pos:start="153:24" pos:end="153:25"><expr pos:start="153:24" pos:end="153:25"><name pos:start="153:24" pos:end="153:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="153:31" pos:end="153:42">/* marker */</comment>

            <if_stmt pos:start="155:13" pos:end="480:13"><if pos:start="155:13" pos:end="480:13">if<condition pos:start="155:15" pos:end="155:87">(<expr pos:start="155:16" pos:end="155:86"><name pos:start="155:16" pos:end="155:20">width</name> <operator pos:start="155:22" pos:end="155:23">&amp;&amp;</operator> <name pos:start="155:25" pos:end="155:30">height</name> <operator pos:start="155:32" pos:end="155:33">&amp;&amp;</operator> <operator pos:start="155:35" pos:end="155:35">!</operator><operator pos:start="155:36" pos:end="155:36">(</operator><name pos:start="155:37" pos:end="155:44"><name pos:start="155:37" pos:end="155:37">s</name><operator pos:start="155:38" pos:end="155:39">-&gt;</operator><name pos:start="155:40" pos:end="155:44">width</name></name> <operator pos:start="155:46" pos:end="155:47">&amp;&amp;</operator> <name pos:start="155:49" pos:end="155:60"><name pos:start="155:49" pos:end="155:49">s</name><operator pos:start="155:50" pos:end="155:51">-&gt;</operator><name pos:start="155:52" pos:end="155:60">codec_tag</name></name> <operator pos:start="155:62" pos:end="155:63">==</operator> <call pos:start="155:65" pos:end="155:85"><name pos:start="155:65" pos:end="155:77">ff_get_fourcc</name><argument_list pos:start="155:78" pos:end="155:85">(<argument pos:start="155:79" pos:end="155:84"><expr pos:start="155:79" pos:end="155:84"><literal type="string" pos:start="155:79" pos:end="155:84">"MP4S"</literal></expr></argument>)</argument_list></call><operator pos:start="155:86" pos:end="155:86">)</operator></expr>)</condition><block pos:start="155:88" pos:end="480:13">{<block_content pos:start="157:17" pos:end="480:13"> <comment type="block" pos:start="155:90" pos:end="155:136">/* they should be non zero but who knows ... */</comment>

                <expr_stmt pos:start="157:17" pos:end="157:33"><expr pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:24"><name pos:start="157:17" pos:end="157:17">s</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:24">width</name></name> <operator pos:start="157:26" pos:end="157:26">=</operator> <name pos:start="157:28" pos:end="157:32">width</name></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:35"><expr pos:start="159:17" pos:end="159:34"><name pos:start="159:17" pos:end="159:25"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:25">height</name></name> <operator pos:start="159:27" pos:end="159:27">=</operator> <name pos:start="159:29" pos:end="159:34">height</name></expr>;</expr_stmt>

<comment type="line" pos:start="161:1" pos:end="161:65">//                printf("width/height: %d %d\n", width, height);</comment>





        <expr_stmt pos:start="167:9" pos:end="169:46"><expr pos:start="167:9" pos:end="169:45"><name pos:start="167:9" pos:end="167:31"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:31">progressive_sequence</name></name><operator pos:start="167:32" pos:end="167:32">=</operator>

        <name pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:28">progressive_frame</name></name><operator pos:start="169:29" pos:end="169:29">=</operator> <call pos:start="169:31" pos:end="169:43"><name pos:start="169:31" pos:end="169:39">get_bits1</name><argument_list pos:start="169:40" pos:end="169:43">(<argument pos:start="169:41" pos:end="169:42"><expr pos:start="169:41" pos:end="169:42"><name pos:start="169:41" pos:end="169:42">gb</name></expr></argument>)</argument_list></call><operator pos:start="169:44" pos:end="169:44">^</operator><literal type="number" pos:start="169:45" pos:end="169:45">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:28"><expr pos:start="171:9" pos:end="171:27"><name pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:25">interlaced_dct</name></name><operator pos:start="171:26" pos:end="171:26">=</operator><literal type="number" pos:start="171:27" pos:end="171:27">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="175:100"><if pos:start="173:9" pos:end="175:100">if<condition pos:start="173:11" pos:end="173:68">(<expr pos:start="173:12" pos:end="173:67"><operator pos:start="173:12" pos:end="173:12">!</operator><call pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:21">get_bits1</name><argument_list pos:start="173:22" pos:end="173:25">(<argument pos:start="173:23" pos:end="173:24"><expr pos:start="173:23" pos:end="173:24"><name pos:start="173:23" pos:end="173:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="173:27" pos:end="173:28">&amp;&amp;</operator> <operator pos:start="173:30" pos:end="173:30">(</operator><name pos:start="173:31" pos:end="173:45"><name pos:start="173:31" pos:end="173:31">s</name><operator pos:start="173:32" pos:end="173:33">-&gt;</operator><name pos:start="173:34" pos:end="173:38">avctx</name><operator pos:start="173:39" pos:end="173:40">-&gt;</operator><name pos:start="173:41" pos:end="173:45">debug</name></name> <operator pos:start="173:47" pos:end="173:47">&amp;</operator> <name pos:start="173:49" pos:end="173:66">FF_DEBUG_PICT_INFO</name><operator pos:start="173:67" pos:end="173:67">)</operator></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:100"><block_content pos:start="175:13" pos:end="175:100">

            <expr_stmt pos:start="175:13" pos:end="175:100"><expr pos:start="175:13" pos:end="175:99"><call pos:start="175:13" pos:end="175:99"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="175:99">(<argument pos:start="175:20" pos:end="175:27"><expr pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:27">avctx</name></name></expr></argument>, <argument pos:start="175:30" pos:end="175:40"><expr pos:start="175:30" pos:end="175:40"><name pos:start="175:30" pos:end="175:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="175:43" pos:end="175:98"><expr pos:start="175:43" pos:end="175:98"><literal type="string" pos:start="175:43" pos:end="175:98">"MPEG4 OBMC not supported (very likely buggy encoder)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block" pos:start="175:104" pos:end="175:121">/* OBMC Disable */</comment>

        <if_stmt pos:start="177:9" pos:end="480:13"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:27">(<expr pos:start="177:13" pos:end="177:26"><name pos:start="177:13" pos:end="177:21">vo_ver_id</name> <operator pos:start="177:23" pos:end="177:24">==</operator> <literal type="number" pos:start="177:26" pos:end="177:26">1</literal></expr>)</condition> <block pos:start="177:29" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:48">

            <expr_stmt pos:start="179:13" pos:end="179:48"><expr pos:start="179:13" pos:end="179:47"><name pos:start="179:13" pos:end="179:31"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:31">vol_sprite_usage</name></name> <operator pos:start="179:33" pos:end="179:33">=</operator> <call pos:start="179:35" pos:end="179:47"><name pos:start="179:35" pos:end="179:43">get_bits1</name><argument_list pos:start="179:44" pos:end="179:47">(<argument pos:start="179:45" pos:end="179:46"><expr pos:start="179:45" pos:end="179:46"><name pos:start="179:45" pos:end="179:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="179:50" pos:end="179:71">/* vol_sprite_usage */</comment>

        </block_content>}</block></if> <else pos:start="181:11" pos:end="480:13">else <block pos:start="181:16" pos:end="480:13">{<block_content pos:start="183:13" pos:end="480:13">

            <expr_stmt pos:start="183:13" pos:end="183:50"><expr pos:start="183:13" pos:end="183:49"><name pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:31">vol_sprite_usage</name></name> <operator pos:start="183:33" pos:end="183:33">=</operator> <call pos:start="183:35" pos:end="183:49"><name pos:start="183:35" pos:end="183:42">get_bits</name><argument_list pos:start="183:43" pos:end="183:49">(<argument pos:start="183:44" pos:end="183:45"><expr pos:start="183:44" pos:end="183:45"><name pos:start="183:44" pos:end="183:45">gb</name></expr></argument>, <argument pos:start="183:48" pos:end="183:48"><expr pos:start="183:48" pos:end="183:48"><literal type="number" pos:start="183:48" pos:end="183:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="183:52" pos:end="183:73">/* vol_sprite_usage */</comment>


        <if_stmt pos:start="186:9" pos:end="186:112"><if pos:start="186:9" pos:end="186:112">if<condition pos:start="186:11" pos:end="186:46">(<expr pos:start="186:12" pos:end="186:45"><name pos:start="186:12" pos:end="186:30"><name pos:start="186:12" pos:end="186:12">s</name><operator pos:start="186:13" pos:end="186:14">-&gt;</operator><name pos:start="186:15" pos:end="186:30">vol_sprite_usage</name></name><operator pos:start="186:31" pos:end="186:32">==</operator><name pos:start="186:33" pos:end="186:45">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="186:48" pos:end="186:112"><block_content pos:start="186:48" pos:end="186:112"> <expr_stmt pos:start="186:48" pos:end="186:112"><expr pos:start="186:48" pos:end="186:111"><call pos:start="186:48" pos:end="186:111"><name pos:start="186:48" pos:end="186:53">av_log</name><argument_list pos:start="186:54" pos:end="186:111">(<argument pos:start="186:55" pos:end="186:62"><expr pos:start="186:55" pos:end="186:62"><name pos:start="186:55" pos:end="186:62"><name pos:start="186:55" pos:end="186:55">s</name><operator pos:start="186:56" pos:end="186:57">-&gt;</operator><name pos:start="186:58" pos:end="186:62">avctx</name></name></expr></argument>, <argument pos:start="186:65" pos:end="186:76"><expr pos:start="186:65" pos:end="186:76"><name pos:start="186:65" pos:end="186:76">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="186:79" pos:end="186:110"><expr pos:start="186:79" pos:end="186:110"><literal type="string" pos:start="186:79" pos:end="186:110">"Static Sprites not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="188:9" pos:end="480:13"><if pos:start="188:9" pos:end="480:13">if<condition pos:start="188:11" pos:end="188:81">(<expr pos:start="188:12" pos:end="188:80"><name pos:start="188:12" pos:end="188:30"><name pos:start="188:12" pos:end="188:12">s</name><operator pos:start="188:13" pos:end="188:14">-&gt;</operator><name pos:start="188:15" pos:end="188:30">vol_sprite_usage</name></name><operator pos:start="188:31" pos:end="188:32">==</operator><name pos:start="188:33" pos:end="188:45">STATIC_SPRITE</name> <operator pos:start="188:47" pos:end="188:48">||</operator> <name pos:start="188:50" pos:end="188:68"><name pos:start="188:50" pos:end="188:50">s</name><operator pos:start="188:51" pos:end="188:52">-&gt;</operator><name pos:start="188:53" pos:end="188:68">vol_sprite_usage</name></name><operator pos:start="188:69" pos:end="188:70">==</operator><name pos:start="188:71" pos:end="188:80">GMC_SPRITE</name></expr>)</condition><block pos:start="188:82" pos:end="480:13">{<block_content pos:start="190:13" pos:end="480:13">

            <if_stmt pos:start="190:13" pos:end="480:13"><if pos:start="190:13" pos:end="480:13">if<condition pos:start="190:15" pos:end="190:50">(<expr pos:start="190:16" pos:end="190:49"><name pos:start="190:16" pos:end="190:34"><name pos:start="190:16" pos:end="190:16">s</name><operator pos:start="190:17" pos:end="190:18">-&gt;</operator><name pos:start="190:19" pos:end="190:34">vol_sprite_usage</name></name><operator pos:start="190:35" pos:end="190:36">==</operator><name pos:start="190:37" pos:end="190:49">STATIC_SPRITE</name></expr>)</condition><block pos:start="190:51" pos:end="480:13">{<block_content pos:start="192:17" pos:end="480:13">

                <expr_stmt pos:start="192:17" pos:end="192:51"><expr pos:start="192:17" pos:end="192:50"><name pos:start="192:17" pos:end="192:31"><name pos:start="192:17" pos:end="192:17">s</name><operator pos:start="192:18" pos:end="192:19">-&gt;</operator><name pos:start="192:20" pos:end="192:31">sprite_width</name></name> <operator pos:start="192:33" pos:end="192:33">=</operator> <call pos:start="192:35" pos:end="192:50"><name pos:start="192:35" pos:end="192:42">get_bits</name><argument_list pos:start="192:43" pos:end="192:50">(<argument pos:start="192:44" pos:end="192:45"><expr pos:start="192:44" pos:end="192:45"><name pos:start="192:44" pos:end="192:45">gb</name></expr></argument>, <argument pos:start="192:48" pos:end="192:49"><expr pos:start="192:48" pos:end="192:49"><literal type="number" pos:start="192:48" pos:end="192:49">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="194:17" pos:end="194:31"><expr pos:start="194:17" pos:end="194:30"><call pos:start="194:17" pos:end="194:30"><name pos:start="194:17" pos:end="194:26">skip_bits1</name><argument_list pos:start="194:27" pos:end="194:30">(<argument pos:start="194:28" pos:end="194:29"><expr pos:start="194:28" pos:end="194:29"><name pos:start="194:28" pos:end="194:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="194:33" pos:end="194:44">/* marker */</comment>

                <expr_stmt pos:start="196:17" pos:end="196:51"><expr pos:start="196:17" pos:end="196:50"><name pos:start="196:17" pos:end="196:32"><name pos:start="196:17" pos:end="196:17">s</name><operator pos:start="196:18" pos:end="196:19">-&gt;</operator><name pos:start="196:20" pos:end="196:32">sprite_height</name></name><operator pos:start="196:33" pos:end="196:33">=</operator> <call pos:start="196:35" pos:end="196:50"><name pos:start="196:35" pos:end="196:42">get_bits</name><argument_list pos:start="196:43" pos:end="196:50">(<argument pos:start="196:44" pos:end="196:45"><expr pos:start="196:44" pos:end="196:45"><name pos:start="196:44" pos:end="196:45">gb</name></expr></argument>, <argument pos:start="196:48" pos:end="196:49"><expr pos:start="196:48" pos:end="196:49"><literal type="number" pos:start="196:48" pos:end="196:49">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="198:17" pos:end="198:31"><expr pos:start="198:17" pos:end="198:30"><call pos:start="198:17" pos:end="198:30"><name pos:start="198:17" pos:end="198:26">skip_bits1</name><argument_list pos:start="198:27" pos:end="198:30">(<argument pos:start="198:28" pos:end="198:29"><expr pos:start="198:28" pos:end="198:29"><name pos:start="198:28" pos:end="198:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="198:33" pos:end="198:44">/* marker */</comment>

                <expr_stmt pos:start="200:17" pos:end="200:51"><expr pos:start="200:17" pos:end="200:50"><name pos:start="200:17" pos:end="200:30"><name pos:start="200:17" pos:end="200:17">s</name><operator pos:start="200:18" pos:end="200:19">-&gt;</operator><name pos:start="200:20" pos:end="200:30">sprite_left</name></name>  <operator pos:start="200:33" pos:end="200:33">=</operator> <call pos:start="200:35" pos:end="200:50"><name pos:start="200:35" pos:end="200:42">get_bits</name><argument_list pos:start="200:43" pos:end="200:50">(<argument pos:start="200:44" pos:end="200:45"><expr pos:start="200:44" pos:end="200:45"><name pos:start="200:44" pos:end="200:45">gb</name></expr></argument>, <argument pos:start="200:48" pos:end="200:49"><expr pos:start="200:48" pos:end="200:49"><literal type="number" pos:start="200:48" pos:end="200:49">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="202:17" pos:end="202:31"><expr pos:start="202:17" pos:end="202:30"><call pos:start="202:17" pos:end="202:30"><name pos:start="202:17" pos:end="202:26">skip_bits1</name><argument_list pos:start="202:27" pos:end="202:30">(<argument pos:start="202:28" pos:end="202:29"><expr pos:start="202:28" pos:end="202:29"><name pos:start="202:28" pos:end="202:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="202:33" pos:end="202:44">/* marker */</comment>

                <expr_stmt pos:start="204:17" pos:end="204:51"><expr pos:start="204:17" pos:end="204:50"><name pos:start="204:17" pos:end="204:29"><name pos:start="204:17" pos:end="204:17">s</name><operator pos:start="204:18" pos:end="204:19">-&gt;</operator><name pos:start="204:20" pos:end="204:29">sprite_top</name></name>   <operator pos:start="204:33" pos:end="204:33">=</operator> <call pos:start="204:35" pos:end="204:50"><name pos:start="204:35" pos:end="204:42">get_bits</name><argument_list pos:start="204:43" pos:end="204:50">(<argument pos:start="204:44" pos:end="204:45"><expr pos:start="204:44" pos:end="204:45"><name pos:start="204:44" pos:end="204:45">gb</name></expr></argument>, <argument pos:start="204:48" pos:end="204:49"><expr pos:start="204:48" pos:end="204:49"><literal type="number" pos:start="204:48" pos:end="204:49">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="206:17" pos:end="206:31"><expr pos:start="206:17" pos:end="206:30"><call pos:start="206:17" pos:end="206:30"><name pos:start="206:17" pos:end="206:26">skip_bits1</name><argument_list pos:start="206:27" pos:end="206:30">(<argument pos:start="206:28" pos:end="206:29"><expr pos:start="206:28" pos:end="206:29"><name pos:start="206:28" pos:end="206:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="206:33" pos:end="206:44">/* marker */</comment>


            <expr_stmt pos:start="209:13" pos:end="209:58"><expr pos:start="209:13" pos:end="209:57"><name pos:start="209:13" pos:end="209:40"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:40">num_sprite_warping_points</name></name><operator pos:start="209:41" pos:end="209:41">=</operator> <call pos:start="209:43" pos:end="209:57"><name pos:start="209:43" pos:end="209:50">get_bits</name><argument_list pos:start="209:51" pos:end="209:57">(<argument pos:start="209:52" pos:end="209:53"><expr pos:start="209:52" pos:end="209:53"><name pos:start="209:52" pos:end="209:53">gb</name></expr></argument>, <argument pos:start="209:56" pos:end="209:56"><expr pos:start="209:56" pos:end="209:56"><literal type="number" pos:start="209:56" pos:end="209:56">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






            <expr_stmt pos:start="216:13" pos:end="216:57"><expr pos:start="216:13" pos:end="216:56"><name pos:start="216:13" pos:end="216:38"><name pos:start="216:13" pos:end="216:13">s</name><operator pos:start="216:14" pos:end="216:15">-&gt;</operator><name pos:start="216:16" pos:end="216:38">sprite_warping_accuracy</name></name> <operator pos:start="216:40" pos:end="216:40">=</operator> <call pos:start="216:42" pos:end="216:56"><name pos:start="216:42" pos:end="216:49">get_bits</name><argument_list pos:start="216:50" pos:end="216:56">(<argument pos:start="216:51" pos:end="216:52"><expr pos:start="216:51" pos:end="216:52"><name pos:start="216:51" pos:end="216:52">gb</name></expr></argument>, <argument pos:start="216:55" pos:end="216:55"><expr pos:start="216:55" pos:end="216:55"><literal type="number" pos:start="216:55" pos:end="216:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="218:13" pos:end="218:55"><expr pos:start="218:13" pos:end="218:54"><name pos:start="218:13" pos:end="218:39"><name pos:start="218:13" pos:end="218:13">s</name><operator pos:start="218:14" pos:end="218:15">-&gt;</operator><name pos:start="218:16" pos:end="218:39">sprite_brightness_change</name></name><operator pos:start="218:40" pos:end="218:40">=</operator> <call pos:start="218:42" pos:end="218:54"><name pos:start="218:42" pos:end="218:50">get_bits1</name><argument_list pos:start="218:51" pos:end="218:54">(<argument pos:start="218:52" pos:end="218:53"><expr pos:start="218:52" pos:end="218:53"><name pos:start="218:52" pos:end="218:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="220:13" pos:end="222:53"><if pos:start="220:13" pos:end="222:53">if<condition pos:start="220:15" pos:end="220:50">(<expr pos:start="220:16" pos:end="220:49"><name pos:start="220:16" pos:end="220:34"><name pos:start="220:16" pos:end="220:16">s</name><operator pos:start="220:17" pos:end="220:18">-&gt;</operator><name pos:start="220:19" pos:end="220:34">vol_sprite_usage</name></name><operator pos:start="220:35" pos:end="220:36">==</operator><name pos:start="220:37" pos:end="220:49">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="222:17" pos:end="222:53"><block_content pos:start="222:17" pos:end="222:53">

                <expr_stmt pos:start="222:17" pos:end="222:53"><expr pos:start="222:17" pos:end="222:52"><name pos:start="222:17" pos:end="222:37"><name pos:start="222:17" pos:end="222:17">s</name><operator pos:start="222:18" pos:end="222:19">-&gt;</operator><name pos:start="222:20" pos:end="222:37">low_latency_sprite</name></name><operator pos:start="222:38" pos:end="222:38">=</operator> <call pos:start="222:40" pos:end="222:52"><name pos:start="222:40" pos:end="222:48">get_bits1</name><argument_list pos:start="222:49" pos:end="222:52">(<argument pos:start="222:50" pos:end="222:51"><expr pos:start="222:50" pos:end="222:51"><name pos:start="222:50" pos:end="222:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


        <comment type="line" pos:start="225:9" pos:end="225:64">// FIXME sadct disable bit if verid!=1 &amp;&amp; shape not rect</comment>



        <if_stmt pos:start="229:9" pos:end="480:13"><if pos:start="229:9" pos:end="237:9">if <condition pos:start="229:12" pos:end="229:31">(<expr pos:start="229:13" pos:end="229:30"><call pos:start="229:13" pos:end="229:25"><name pos:start="229:13" pos:end="229:21">get_bits1</name><argument_list pos:start="229:22" pos:end="229:25">(<argument pos:start="229:23" pos:end="229:24"><expr pos:start="229:23" pos:end="229:24"><name pos:start="229:23" pos:end="229:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="229:27" pos:end="229:28">==</operator> <literal type="number" pos:start="229:30" pos:end="229:30">1</literal></expr>)</condition> <block pos:start="229:33" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:113">   <comment type="block" pos:start="229:37" pos:end="229:51">/* not_8_bit */</comment>

            <expr_stmt pos:start="231:13" pos:end="231:49"><expr pos:start="231:13" pos:end="231:48"><name pos:start="231:13" pos:end="231:30"><name pos:start="231:13" pos:end="231:13">s</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:30">quant_precision</name></name> <operator pos:start="231:32" pos:end="231:32">=</operator> <call pos:start="231:34" pos:end="231:48"><name pos:start="231:34" pos:end="231:41">get_bits</name><argument_list pos:start="231:42" pos:end="231:48">(<argument pos:start="231:43" pos:end="231:44"><expr pos:start="231:43" pos:end="231:44"><name pos:start="231:43" pos:end="231:44">gb</name></expr></argument>, <argument pos:start="231:47" pos:end="231:47"><expr pos:start="231:47" pos:end="231:47"><literal type="number" pos:start="231:47" pos:end="231:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="231:51" pos:end="231:71">/* quant_precision */</comment>

            <if_stmt pos:start="233:13" pos:end="233:91"><if pos:start="233:13" pos:end="233:91">if<condition pos:start="233:15" pos:end="233:34">(<expr pos:start="233:16" pos:end="233:33"><call pos:start="233:16" pos:end="233:30"><name pos:start="233:16" pos:end="233:23">get_bits</name><argument_list pos:start="233:24" pos:end="233:30">(<argument pos:start="233:25" pos:end="233:26"><expr pos:start="233:25" pos:end="233:26"><name pos:start="233:25" pos:end="233:26">gb</name></expr></argument>, <argument pos:start="233:29" pos:end="233:29"><expr pos:start="233:29" pos:end="233:29"><literal type="number" pos:start="233:29" pos:end="233:29">4</literal></expr></argument>)</argument_list></call><operator pos:start="233:31" pos:end="233:32">!=</operator><literal type="number" pos:start="233:33" pos:end="233:33">8</literal></expr>)</condition><block type="pseudo" pos:start="233:36" pos:end="233:91"><block_content pos:start="233:36" pos:end="233:91"> <expr_stmt pos:start="233:36" pos:end="233:91"><expr pos:start="233:36" pos:end="233:90"><call pos:start="233:36" pos:end="233:90"><name pos:start="233:36" pos:end="233:41">av_log</name><argument_list pos:start="233:42" pos:end="233:90">(<argument pos:start="233:43" pos:end="233:50"><expr pos:start="233:43" pos:end="233:50"><name pos:start="233:43" pos:end="233:50"><name pos:start="233:43" pos:end="233:43">s</name><operator pos:start="233:44" pos:end="233:45">-&gt;</operator><name pos:start="233:46" pos:end="233:50">avctx</name></name></expr></argument>, <argument pos:start="233:53" pos:end="233:64"><expr pos:start="233:53" pos:end="233:64"><name pos:start="233:53" pos:end="233:64">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:67" pos:end="233:89"><expr pos:start="233:67" pos:end="233:89"><literal type="string" pos:start="233:67" pos:end="233:89">"N-bit not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="233:93" pos:end="233:112">/* bits_per_pixel */</comment>

            <if_stmt pos:start="235:13" pos:end="235:113"><if pos:start="235:13" pos:end="235:113">if<condition pos:start="235:15" pos:end="235:37">(<expr pos:start="235:16" pos:end="235:36"><name pos:start="235:16" pos:end="235:33"><name pos:start="235:16" pos:end="235:16">s</name><operator pos:start="235:17" pos:end="235:18">-&gt;</operator><name pos:start="235:19" pos:end="235:33">quant_precision</name></name><operator pos:start="235:34" pos:end="235:35">!=</operator><literal type="number" pos:start="235:36" pos:end="235:36">5</literal></expr>)</condition><block type="pseudo" pos:start="235:39" pos:end="235:113"><block_content pos:start="235:39" pos:end="235:113"> <expr_stmt pos:start="235:39" pos:end="235:113"><expr pos:start="235:39" pos:end="235:112"><call pos:start="235:39" pos:end="235:112"><name pos:start="235:39" pos:end="235:44">av_log</name><argument_list pos:start="235:45" pos:end="235:112">(<argument pos:start="235:46" pos:end="235:53"><expr pos:start="235:46" pos:end="235:53"><name pos:start="235:46" pos:end="235:53"><name pos:start="235:46" pos:end="235:46">s</name><operator pos:start="235:47" pos:end="235:48">-&gt;</operator><name pos:start="235:49" pos:end="235:53">avctx</name></name></expr></argument>, <argument pos:start="235:56" pos:end="235:67"><expr pos:start="235:56" pos:end="235:67"><name pos:start="235:56" pos:end="235:67">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="235:70" pos:end="235:91"><expr pos:start="235:70" pos:end="235:91"><literal type="string" pos:start="235:70" pos:end="235:91">"quant precision %d\n"</literal></expr></argument>, <argument pos:start="235:94" pos:end="235:111"><expr pos:start="235:94" pos:end="235:111"><name pos:start="235:94" pos:end="235:111"><name pos:start="235:94" pos:end="235:94">s</name><operator pos:start="235:95" pos:end="235:96">-&gt;</operator><name pos:start="235:97" pos:end="235:111">quant_precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="237:11" pos:end="480:13">else <block pos:start="237:16" pos:end="480:13">{<block_content pos:start="239:13" pos:end="480:13">

            <expr_stmt pos:start="239:13" pos:end="239:35"><expr pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:30"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:30">quant_precision</name></name> <operator pos:start="239:32" pos:end="239:32">=</operator> <literal type="number" pos:start="239:34" pos:end="239:34">5</literal></expr>;</expr_stmt>




        <comment type="line" pos:start="244:9" pos:end="244:50">// FIXME a bunch of grayscale shape things</comment>



        <if_stmt pos:start="248:9" pos:end="480:13"><if pos:start="248:9" pos:end="480:13">if<condition pos:start="248:11" pos:end="248:41">(<expr pos:start="248:12" pos:end="248:40"><operator pos:start="248:12" pos:end="248:12">(</operator><name pos:start="248:13" pos:end="248:25"><name pos:start="248:13" pos:end="248:13">s</name><operator pos:start="248:14" pos:end="248:15">-&gt;</operator><name pos:start="248:16" pos:end="248:25">mpeg_quant</name></name><operator pos:start="248:26" pos:end="248:26">=</operator><call pos:start="248:27" pos:end="248:39"><name pos:start="248:27" pos:end="248:35">get_bits1</name><argument_list pos:start="248:36" pos:end="248:39">(<argument pos:start="248:37" pos:end="248:38"><expr pos:start="248:37" pos:end="248:38"><name pos:start="248:37" pos:end="248:38">gb</name></expr></argument>)</argument_list></call><operator pos:start="248:40" pos:end="248:40">)</operator></expr>)</condition><block pos:start="248:42" pos:end="480:13">{<block_content pos:start="250:13" pos:end="480:13"> <comment type="block" pos:start="248:44" pos:end="248:63">/* vol_quant_type */</comment>

            <decl_stmt pos:start="250:13" pos:end="250:21"><decl pos:start="250:13" pos:end="250:17"><type pos:start="250:13" pos:end="250:15"><name pos:start="250:13" pos:end="250:15">int</name></type> <name pos:start="250:17" pos:end="250:17">i</name></decl>, <decl pos:start="250:20" pos:end="250:20"><type ref="prev" pos:start="250:13" pos:end="250:15"/><name pos:start="250:20" pos:end="250:20">v</name></decl>;</decl_stmt>



            <comment type="block" pos:start="254:13" pos:end="254:39">/* load default matrixes */</comment>

            <for pos:start="256:13" pos:end="480:13">for<control pos:start="256:16" pos:end="256:31">(<init pos:start="256:17" pos:end="256:20"><expr pos:start="256:17" pos:end="256:19"><name pos:start="256:17" pos:end="256:17">i</name><operator pos:start="256:18" pos:end="256:18">=</operator><literal type="number" pos:start="256:19" pos:end="256:19">0</literal></expr>;</init> <condition pos:start="256:22" pos:end="256:26"><expr pos:start="256:22" pos:end="256:25"><name pos:start="256:22" pos:end="256:22">i</name><operator pos:start="256:23" pos:end="256:23">&lt;</operator><literal type="number" pos:start="256:24" pos:end="256:25">64</literal></expr>;</condition> <incr pos:start="256:28" pos:end="256:30"><expr pos:start="256:28" pos:end="256:30"><name pos:start="256:28" pos:end="256:28">i</name><operator pos:start="256:29" pos:end="256:30">++</operator></expr></incr>)</control><block pos:start="256:32" pos:end="480:13">{<block_content pos:start="258:17" pos:end="480:13">

                <decl_stmt pos:start="258:17" pos:end="258:50"><decl pos:start="258:17" pos:end="258:49"><type pos:start="258:17" pos:end="258:19"><name pos:start="258:17" pos:end="258:19">int</name></type> <name pos:start="258:21" pos:end="258:21">j</name><init pos:start="258:22" pos:end="258:49">= <expr pos:start="258:24" pos:end="258:49"><name pos:start="258:24" pos:end="258:49"><name pos:start="258:24" pos:end="258:24">s</name><operator pos:start="258:25" pos:end="258:26">-&gt;</operator><name pos:start="258:27" pos:end="258:29">dsp</name><operator pos:start="258:30" pos:end="258:30">.</operator><name pos:start="258:31" pos:end="258:46">idct_permutation</name><index pos:start="258:47" pos:end="258:49">[<expr pos:start="258:48" pos:end="258:48"><name pos:start="258:48" pos:end="258:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="260:17" pos:end="260:52"><expr pos:start="260:17" pos:end="260:51"><name pos:start="260:17" pos:end="260:17">v</name><operator pos:start="260:18" pos:end="260:18">=</operator> <name pos:start="260:20" pos:end="260:51"><name pos:start="260:20" pos:end="260:48">ff_mpeg4_default_intra_matrix</name><index pos:start="260:49" pos:end="260:51">[<expr pos:start="260:50" pos:end="260:50"><name pos:start="260:50" pos:end="260:50">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="262:17" pos:end="262:38"><expr pos:start="262:17" pos:end="262:37"><name pos:start="262:17" pos:end="262:34"><name pos:start="262:17" pos:end="262:17">s</name><operator pos:start="262:18" pos:end="262:19">-&gt;</operator><name pos:start="262:20" pos:end="262:31">intra_matrix</name><index pos:start="262:32" pos:end="262:34">[<expr pos:start="262:33" pos:end="262:33"><name pos:start="262:33" pos:end="262:33">j</name></expr>]</index></name><operator pos:start="262:35" pos:end="262:35">=</operator> <name pos:start="262:37" pos:end="262:37">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="264:17" pos:end="264:45"><expr pos:start="264:17" pos:end="264:44"><name pos:start="264:17" pos:end="264:41"><name pos:start="264:17" pos:end="264:17">s</name><operator pos:start="264:18" pos:end="264:19">-&gt;</operator><name pos:start="264:20" pos:end="264:38">chroma_intra_matrix</name><index pos:start="264:39" pos:end="264:41">[<expr pos:start="264:40" pos:end="264:40"><name pos:start="264:40" pos:end="264:40">j</name></expr>]</index></name><operator pos:start="264:42" pos:end="264:42">=</operator> <name pos:start="264:44" pos:end="264:44">v</name></expr>;</expr_stmt>



                <expr_stmt pos:start="268:17" pos:end="268:56"><expr pos:start="268:17" pos:end="268:55"><name pos:start="268:17" pos:end="268:17">v</name><operator pos:start="268:18" pos:end="268:18">=</operator> <name pos:start="268:20" pos:end="268:55"><name pos:start="268:20" pos:end="268:52">ff_mpeg4_default_non_intra_matrix</name><index pos:start="268:53" pos:end="268:55">[<expr pos:start="268:54" pos:end="268:54"><name pos:start="268:54" pos:end="268:54">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="270:17" pos:end="270:38"><expr pos:start="270:17" pos:end="270:37"><name pos:start="270:17" pos:end="270:34"><name pos:start="270:17" pos:end="270:17">s</name><operator pos:start="270:18" pos:end="270:19">-&gt;</operator><name pos:start="270:20" pos:end="270:31">inter_matrix</name><index pos:start="270:32" pos:end="270:34">[<expr pos:start="270:33" pos:end="270:33"><name pos:start="270:33" pos:end="270:33">j</name></expr>]</index></name><operator pos:start="270:35" pos:end="270:35">=</operator> <name pos:start="270:37" pos:end="270:37">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="272:17" pos:end="272:45"><expr pos:start="272:17" pos:end="272:44"><name pos:start="272:17" pos:end="272:41"><name pos:start="272:17" pos:end="272:17">s</name><operator pos:start="272:18" pos:end="272:19">-&gt;</operator><name pos:start="272:20" pos:end="272:38">chroma_inter_matrix</name><index pos:start="272:39" pos:end="272:41">[<expr pos:start="272:40" pos:end="272:40"><name pos:start="272:40" pos:end="272:40">j</name></expr>]</index></name><operator pos:start="272:42" pos:end="272:42">=</operator> <name pos:start="272:44" pos:end="272:44">v</name></expr>;</expr_stmt>




            <comment type="block" pos:start="277:13" pos:end="277:42">/* load custom intra matrix */</comment>

            <if_stmt pos:start="279:13" pos:end="480:13"><if pos:start="279:13" pos:end="480:13">if<condition pos:start="279:15" pos:end="279:29">(<expr pos:start="279:16" pos:end="279:28"><call pos:start="279:16" pos:end="279:28"><name pos:start="279:16" pos:end="279:24">get_bits1</name><argument_list pos:start="279:25" pos:end="279:28">(<argument pos:start="279:26" pos:end="279:27"><expr pos:start="279:26" pos:end="279:27"><name pos:start="279:26" pos:end="279:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="279:30" pos:end="480:13">{<block_content pos:start="281:17" pos:end="480:13">

                <decl_stmt pos:start="281:17" pos:end="281:27"><decl pos:start="281:17" pos:end="281:26"><type pos:start="281:17" pos:end="281:19"><name pos:start="281:17" pos:end="281:19">int</name></type> <name pos:start="281:21" pos:end="281:24">last</name><init pos:start="281:25" pos:end="281:26">=<expr pos:start="281:26" pos:end="281:26"><literal type="number" pos:start="281:26" pos:end="281:26">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="283:17" pos:end="480:13">for<control pos:start="283:20" pos:end="283:35">(<init pos:start="283:21" pos:end="283:24"><expr pos:start="283:21" pos:end="283:23"><name pos:start="283:21" pos:end="283:21">i</name><operator pos:start="283:22" pos:end="283:22">=</operator><literal type="number" pos:start="283:23" pos:end="283:23">0</literal></expr>;</init> <condition pos:start="283:26" pos:end="283:30"><expr pos:start="283:26" pos:end="283:29"><name pos:start="283:26" pos:end="283:26">i</name><operator pos:start="283:27" pos:end="283:27">&lt;</operator><literal type="number" pos:start="283:28" pos:end="283:29">64</literal></expr>;</condition> <incr pos:start="283:32" pos:end="283:34"><expr pos:start="283:32" pos:end="283:34"><name pos:start="283:32" pos:end="283:32">i</name><operator pos:start="283:33" pos:end="283:34">++</operator></expr></incr>)</control><block pos:start="283:36" pos:end="480:13">{<block_content pos:start="285:21" pos:end="480:13">

                    <decl_stmt pos:start="285:21" pos:end="285:26"><decl pos:start="285:21" pos:end="285:25"><type pos:start="285:21" pos:end="285:23"><name pos:start="285:21" pos:end="285:23">int</name></type> <name pos:start="285:25" pos:end="285:25">j</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:39"><expr pos:start="287:21" pos:end="287:38"><name pos:start="287:21" pos:end="287:21">v</name><operator pos:start="287:22" pos:end="287:22">=</operator> <call pos:start="287:24" pos:end="287:38"><name pos:start="287:24" pos:end="287:31">get_bits</name><argument_list pos:start="287:32" pos:end="287:38">(<argument pos:start="287:33" pos:end="287:34"><expr pos:start="287:33" pos:end="287:34"><name pos:start="287:33" pos:end="287:34">gb</name></expr></argument>, <argument pos:start="287:37" pos:end="287:37"><expr pos:start="287:37" pos:end="287:37"><literal type="number" pos:start="287:37" pos:end="287:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="289:21" pos:end="289:35"><if pos:start="289:21" pos:end="289:35">if<condition pos:start="289:23" pos:end="289:28">(<expr pos:start="289:24" pos:end="289:27"><name pos:start="289:24" pos:end="289:24">v</name><operator pos:start="289:25" pos:end="289:26">==</operator><literal type="number" pos:start="289:27" pos:end="289:27">0</literal></expr>)</condition><block type="pseudo" pos:start="289:30" pos:end="289:35"><block_content pos:start="289:30" pos:end="289:35"> <break pos:start="289:30" pos:end="289:35">break;</break></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="293:21" pos:end="293:28"><expr pos:start="293:21" pos:end="293:27"><name pos:start="293:21" pos:end="293:24">last</name><operator pos:start="293:25" pos:end="293:25">=</operator> <name pos:start="293:27" pos:end="293:27">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:70"><expr pos:start="295:21" pos:end="295:69"><name pos:start="295:21" pos:end="295:21">j</name><operator pos:start="295:22" pos:end="295:22">=</operator> <name pos:start="295:24" pos:end="295:69"><name pos:start="295:24" pos:end="295:24">s</name><operator pos:start="295:25" pos:end="295:26">-&gt;</operator><name pos:start="295:27" pos:end="295:29">dsp</name><operator pos:start="295:30" pos:end="295:30">.</operator><name pos:start="295:31" pos:end="295:46">idct_permutation</name><index pos:start="295:47" pos:end="295:69">[ <expr pos:start="295:49" pos:end="295:67"><name pos:start="295:49" pos:end="295:67"><name pos:start="295:49" pos:end="295:64">ff_zigzag_direct</name><index pos:start="295:65" pos:end="295:67">[<expr pos:start="295:66" pos:end="295:66"><name pos:start="295:66" pos:end="295:66">i</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:42"><expr pos:start="297:21" pos:end="297:41"><name pos:start="297:21" pos:end="297:38"><name pos:start="297:21" pos:end="297:21">s</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:35">intra_matrix</name><index pos:start="297:36" pos:end="297:38">[<expr pos:start="297:37" pos:end="297:37"><name pos:start="297:37" pos:end="297:37">j</name></expr>]</index></name><operator pos:start="297:39" pos:end="297:39">=</operator> <name pos:start="297:41" pos:end="297:41">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:49"><expr pos:start="299:21" pos:end="299:48"><name pos:start="299:21" pos:end="299:45"><name pos:start="299:21" pos:end="299:21">s</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:42">chroma_intra_matrix</name><index pos:start="299:43" pos:end="299:45">[<expr pos:start="299:44" pos:end="299:44"><name pos:start="299:44" pos:end="299:44">j</name></expr>]</index></name><operator pos:start="299:46" pos:end="299:46">=</operator> <name pos:start="299:48" pos:end="299:48">v</name></expr>;</expr_stmt>




                <comment type="block" pos:start="304:17" pos:end="304:42">/* replicate last value */</comment>

                <for pos:start="306:17" pos:end="480:13">for<control pos:start="306:20" pos:end="306:32">(<init pos:start="306:21" pos:end="306:21">;</init> <condition pos:start="306:23" pos:end="306:27"><expr pos:start="306:23" pos:end="306:26"><name pos:start="306:23" pos:end="306:23">i</name><operator pos:start="306:24" pos:end="306:24">&lt;</operator><literal type="number" pos:start="306:25" pos:end="306:26">64</literal></expr>;</condition> <incr pos:start="306:29" pos:end="306:31"><expr pos:start="306:29" pos:end="306:31"><name pos:start="306:29" pos:end="306:29">i</name><operator pos:start="306:30" pos:end="306:31">++</operator></expr></incr>)</control><block pos:start="306:33" pos:end="480:13">{<block_content pos:start="308:21" pos:end="480:13">

                    <decl_stmt pos:start="308:21" pos:end="308:74"><decl pos:start="308:21" pos:end="308:73"><type pos:start="308:21" pos:end="308:23"><name pos:start="308:21" pos:end="308:23">int</name></type> <name pos:start="308:25" pos:end="308:25">j</name><init pos:start="308:26" pos:end="308:73">= <expr pos:start="308:28" pos:end="308:73"><name pos:start="308:28" pos:end="308:73"><name pos:start="308:28" pos:end="308:28">s</name><operator pos:start="308:29" pos:end="308:30">-&gt;</operator><name pos:start="308:31" pos:end="308:33">dsp</name><operator pos:start="308:34" pos:end="308:34">.</operator><name pos:start="308:35" pos:end="308:50">idct_permutation</name><index pos:start="308:51" pos:end="308:73">[ <expr pos:start="308:53" pos:end="308:71"><name pos:start="308:53" pos:end="308:71"><name pos:start="308:53" pos:end="308:68">ff_zigzag_direct</name><index pos:start="308:69" pos:end="308:71">[<expr pos:start="308:70" pos:end="308:70"><name pos:start="308:70" pos:end="308:70">i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="310:21" pos:end="310:45"><expr pos:start="310:21" pos:end="310:44"><name pos:start="310:21" pos:end="310:38"><name pos:start="310:21" pos:end="310:21">s</name><operator pos:start="310:22" pos:end="310:23">-&gt;</operator><name pos:start="310:24" pos:end="310:35">intra_matrix</name><index pos:start="310:36" pos:end="310:38">[<expr pos:start="310:37" pos:end="310:37"><name pos:start="310:37" pos:end="310:37">j</name></expr>]</index></name><operator pos:start="310:39" pos:end="310:39">=</operator> <name pos:start="310:41" pos:end="310:44">last</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="312:21" pos:end="312:52"><expr pos:start="312:21" pos:end="312:51"><name pos:start="312:21" pos:end="312:45"><name pos:start="312:21" pos:end="312:21">s</name><operator pos:start="312:22" pos:end="312:23">-&gt;</operator><name pos:start="312:24" pos:end="312:42">chroma_intra_matrix</name><index pos:start="312:43" pos:end="312:45">[<expr pos:start="312:44" pos:end="312:44"><name pos:start="312:44" pos:end="312:44">j</name></expr>]</index></name><operator pos:start="312:46" pos:end="312:46">=</operator> <name pos:start="312:48" pos:end="312:51">last</name></expr>;</expr_stmt>





            <comment type="block" pos:start="318:13" pos:end="318:46">/* load custom non intra matrix */</comment>

            <if_stmt pos:start="320:13" pos:end="480:13"><if pos:start="320:13" pos:end="480:13">if<condition pos:start="320:15" pos:end="320:29">(<expr pos:start="320:16" pos:end="320:28"><call pos:start="320:16" pos:end="320:28"><name pos:start="320:16" pos:end="320:24">get_bits1</name><argument_list pos:start="320:25" pos:end="320:28">(<argument pos:start="320:26" pos:end="320:27"><expr pos:start="320:26" pos:end="320:27"><name pos:start="320:26" pos:end="320:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="320:30" pos:end="480:13">{<block_content pos:start="322:17" pos:end="480:13">

                <decl_stmt pos:start="322:17" pos:end="322:27"><decl pos:start="322:17" pos:end="322:26"><type pos:start="322:17" pos:end="322:19"><name pos:start="322:17" pos:end="322:19">int</name></type> <name pos:start="322:21" pos:end="322:24">last</name><init pos:start="322:25" pos:end="322:26">=<expr pos:start="322:26" pos:end="322:26"><literal type="number" pos:start="322:26" pos:end="322:26">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="324:17" pos:end="480:13">for<control pos:start="324:20" pos:end="324:35">(<init pos:start="324:21" pos:end="324:24"><expr pos:start="324:21" pos:end="324:23"><name pos:start="324:21" pos:end="324:21">i</name><operator pos:start="324:22" pos:end="324:22">=</operator><literal type="number" pos:start="324:23" pos:end="324:23">0</literal></expr>;</init> <condition pos:start="324:26" pos:end="324:30"><expr pos:start="324:26" pos:end="324:29"><name pos:start="324:26" pos:end="324:26">i</name><operator pos:start="324:27" pos:end="324:27">&lt;</operator><literal type="number" pos:start="324:28" pos:end="324:29">64</literal></expr>;</condition> <incr pos:start="324:32" pos:end="324:34"><expr pos:start="324:32" pos:end="324:34"><name pos:start="324:32" pos:end="324:32">i</name><operator pos:start="324:33" pos:end="324:34">++</operator></expr></incr>)</control><block pos:start="324:36" pos:end="480:13">{<block_content pos:start="326:21" pos:end="480:13">

                    <decl_stmt pos:start="326:21" pos:end="326:26"><decl pos:start="326:21" pos:end="326:25"><type pos:start="326:21" pos:end="326:23"><name pos:start="326:21" pos:end="326:23">int</name></type> <name pos:start="326:25" pos:end="326:25">j</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="328:21" pos:end="328:39"><expr pos:start="328:21" pos:end="328:38"><name pos:start="328:21" pos:end="328:21">v</name><operator pos:start="328:22" pos:end="328:22">=</operator> <call pos:start="328:24" pos:end="328:38"><name pos:start="328:24" pos:end="328:31">get_bits</name><argument_list pos:start="328:32" pos:end="328:38">(<argument pos:start="328:33" pos:end="328:34"><expr pos:start="328:33" pos:end="328:34"><name pos:start="328:33" pos:end="328:34">gb</name></expr></argument>, <argument pos:start="328:37" pos:end="328:37"><expr pos:start="328:37" pos:end="328:37"><literal type="number" pos:start="328:37" pos:end="328:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="330:21" pos:end="330:35"><if pos:start="330:21" pos:end="330:35">if<condition pos:start="330:23" pos:end="330:28">(<expr pos:start="330:24" pos:end="330:27"><name pos:start="330:24" pos:end="330:24">v</name><operator pos:start="330:25" pos:end="330:26">==</operator><literal type="number" pos:start="330:27" pos:end="330:27">0</literal></expr>)</condition><block type="pseudo" pos:start="330:30" pos:end="330:35"><block_content pos:start="330:30" pos:end="330:35"> <break pos:start="330:30" pos:end="330:35">break;</break></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="334:21" pos:end="334:28"><expr pos:start="334:21" pos:end="334:27"><name pos:start="334:21" pos:end="334:24">last</name><operator pos:start="334:25" pos:end="334:25">=</operator> <name pos:start="334:27" pos:end="334:27">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="336:21" pos:end="336:70"><expr pos:start="336:21" pos:end="336:69"><name pos:start="336:21" pos:end="336:21">j</name><operator pos:start="336:22" pos:end="336:22">=</operator> <name pos:start="336:24" pos:end="336:69"><name pos:start="336:24" pos:end="336:24">s</name><operator pos:start="336:25" pos:end="336:26">-&gt;</operator><name pos:start="336:27" pos:end="336:29">dsp</name><operator pos:start="336:30" pos:end="336:30">.</operator><name pos:start="336:31" pos:end="336:46">idct_permutation</name><index pos:start="336:47" pos:end="336:69">[ <expr pos:start="336:49" pos:end="336:67"><name pos:start="336:49" pos:end="336:67"><name pos:start="336:49" pos:end="336:64">ff_zigzag_direct</name><index pos:start="336:65" pos:end="336:67">[<expr pos:start="336:66" pos:end="336:66"><name pos:start="336:66" pos:end="336:66">i</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="338:21" pos:end="338:42"><expr pos:start="338:21" pos:end="338:41"><name pos:start="338:21" pos:end="338:38"><name pos:start="338:21" pos:end="338:21">s</name><operator pos:start="338:22" pos:end="338:23">-&gt;</operator><name pos:start="338:24" pos:end="338:35">inter_matrix</name><index pos:start="338:36" pos:end="338:38">[<expr pos:start="338:37" pos:end="338:37"><name pos:start="338:37" pos:end="338:37">j</name></expr>]</index></name><operator pos:start="338:39" pos:end="338:39">=</operator> <name pos:start="338:41" pos:end="338:41">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="340:21" pos:end="340:49"><expr pos:start="340:21" pos:end="340:48"><name pos:start="340:21" pos:end="340:45"><name pos:start="340:21" pos:end="340:21">s</name><operator pos:start="340:22" pos:end="340:23">-&gt;</operator><name pos:start="340:24" pos:end="340:42">chroma_inter_matrix</name><index pos:start="340:43" pos:end="340:45">[<expr pos:start="340:44" pos:end="340:44"><name pos:start="340:44" pos:end="340:44">j</name></expr>]</index></name><operator pos:start="340:46" pos:end="340:46">=</operator> <name pos:start="340:48" pos:end="340:48">v</name></expr>;</expr_stmt>




                <comment type="block" pos:start="345:17" pos:end="345:42">/* replicate last value */</comment>

                <for pos:start="347:17" pos:end="480:13">for<control pos:start="347:20" pos:end="347:32">(<init pos:start="347:21" pos:end="347:21">;</init> <condition pos:start="347:23" pos:end="347:27"><expr pos:start="347:23" pos:end="347:26"><name pos:start="347:23" pos:end="347:23">i</name><operator pos:start="347:24" pos:end="347:24">&lt;</operator><literal type="number" pos:start="347:25" pos:end="347:26">64</literal></expr>;</condition> <incr pos:start="347:29" pos:end="347:31"><expr pos:start="347:29" pos:end="347:31"><name pos:start="347:29" pos:end="347:29">i</name><operator pos:start="347:30" pos:end="347:31">++</operator></expr></incr>)</control><block pos:start="347:33" pos:end="480:13">{<block_content pos:start="349:21" pos:end="480:13">

                    <decl_stmt pos:start="349:21" pos:end="349:74"><decl pos:start="349:21" pos:end="349:73"><type pos:start="349:21" pos:end="349:23"><name pos:start="349:21" pos:end="349:23">int</name></type> <name pos:start="349:25" pos:end="349:25">j</name><init pos:start="349:26" pos:end="349:73">= <expr pos:start="349:28" pos:end="349:73"><name pos:start="349:28" pos:end="349:73"><name pos:start="349:28" pos:end="349:28">s</name><operator pos:start="349:29" pos:end="349:30">-&gt;</operator><name pos:start="349:31" pos:end="349:33">dsp</name><operator pos:start="349:34" pos:end="349:34">.</operator><name pos:start="349:35" pos:end="349:50">idct_permutation</name><index pos:start="349:51" pos:end="349:73">[ <expr pos:start="349:53" pos:end="349:71"><name pos:start="349:53" pos:end="349:71"><name pos:start="349:53" pos:end="349:68">ff_zigzag_direct</name><index pos:start="349:69" pos:end="349:71">[<expr pos:start="349:70" pos:end="349:70"><name pos:start="349:70" pos:end="349:70">i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:45"><expr pos:start="351:21" pos:end="351:44"><name pos:start="351:21" pos:end="351:38"><name pos:start="351:21" pos:end="351:21">s</name><operator pos:start="351:22" pos:end="351:23">-&gt;</operator><name pos:start="351:24" pos:end="351:35">inter_matrix</name><index pos:start="351:36" pos:end="351:38">[<expr pos:start="351:37" pos:end="351:37"><name pos:start="351:37" pos:end="351:37">j</name></expr>]</index></name><operator pos:start="351:39" pos:end="351:39">=</operator> <name pos:start="351:41" pos:end="351:44">last</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="353:21" pos:end="353:52"><expr pos:start="353:21" pos:end="353:51"><name pos:start="353:21" pos:end="353:45"><name pos:start="353:21" pos:end="353:21">s</name><operator pos:start="353:22" pos:end="353:23">-&gt;</operator><name pos:start="353:24" pos:end="353:42">chroma_inter_matrix</name><index pos:start="353:43" pos:end="353:45">[<expr pos:start="353:44" pos:end="353:44"><name pos:start="353:44" pos:end="353:44">j</name></expr>]</index></name><operator pos:start="353:46" pos:end="353:46">=</operator> <name pos:start="353:48" pos:end="353:51">last</name></expr>;</expr_stmt>





            <comment type="line" pos:start="359:13" pos:end="359:54">// FIXME a bunch of grayscale shape things</comment>




        <if_stmt pos:start="364:9" pos:end="368:33"><if pos:start="364:9" pos:end="366:46">if<condition pos:start="364:11" pos:end="364:26">(<expr pos:start="364:12" pos:end="364:25"><name pos:start="364:12" pos:end="364:20">vo_ver_id</name> <operator pos:start="364:22" pos:end="364:23">!=</operator> <literal type="number" pos:start="364:25" pos:end="364:25">1</literal></expr>)</condition><block type="pseudo" pos:start="366:14" pos:end="366:46"><block_content pos:start="366:14" pos:end="366:46">

             <expr_stmt pos:start="366:14" pos:end="366:46"><expr pos:start="366:14" pos:end="366:45"><name pos:start="366:14" pos:end="366:30"><name pos:start="366:14" pos:end="366:14">s</name><operator pos:start="366:15" pos:end="366:16">-&gt;</operator><name pos:start="366:17" pos:end="366:30">quarter_sample</name></name><operator pos:start="366:31" pos:end="366:31">=</operator> <call pos:start="366:33" pos:end="366:45"><name pos:start="366:33" pos:end="366:41">get_bits1</name><argument_list pos:start="366:42" pos:end="366:45">(<argument pos:start="366:43" pos:end="366:44"><expr pos:start="366:43" pos:end="366:44"><name pos:start="366:43" pos:end="366:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="368:9" pos:end="368:33">else<block type="pseudo" pos:start="368:14" pos:end="368:33"><block_content pos:start="368:14" pos:end="368:33"> <expr_stmt pos:start="368:14" pos:end="368:33"><expr pos:start="368:14" pos:end="368:32"><name pos:start="368:14" pos:end="368:30"><name pos:start="368:14" pos:end="368:14">s</name><operator pos:start="368:15" pos:end="368:16">-&gt;</operator><name pos:start="368:17" pos:end="368:30">quarter_sample</name></name><operator pos:start="368:31" pos:end="368:31">=</operator><literal type="number" pos:start="368:32" pos:end="368:32">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="372:9" pos:end="372:99"><if pos:start="372:9" pos:end="372:99">if<condition pos:start="372:11" pos:end="372:26">(<expr pos:start="372:12" pos:end="372:25"><operator pos:start="372:12" pos:end="372:12">!</operator><call pos:start="372:13" pos:end="372:25"><name pos:start="372:13" pos:end="372:21">get_bits1</name><argument_list pos:start="372:22" pos:end="372:25">(<argument pos:start="372:23" pos:end="372:24"><expr pos:start="372:23" pos:end="372:24"><name pos:start="372:23" pos:end="372:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="372:28" pos:end="372:99"><block_content pos:start="372:28" pos:end="372:99"> <expr_stmt pos:start="372:28" pos:end="372:99"><expr pos:start="372:28" pos:end="372:98"><call pos:start="372:28" pos:end="372:98"><name pos:start="372:28" pos:end="372:33">av_log</name><argument_list pos:start="372:34" pos:end="372:98">(<argument pos:start="372:35" pos:end="372:42"><expr pos:start="372:35" pos:end="372:42"><name pos:start="372:35" pos:end="372:42"><name pos:start="372:35" pos:end="372:35">s</name><operator pos:start="372:36" pos:end="372:37">-&gt;</operator><name pos:start="372:38" pos:end="372:42">avctx</name></name></expr></argument>, <argument pos:start="372:45" pos:end="372:56"><expr pos:start="372:45" pos:end="372:56"><name pos:start="372:45" pos:end="372:56">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="372:59" pos:end="372:97"><expr pos:start="372:59" pos:end="372:97"><literal type="string" pos:start="372:59" pos:end="372:97">"Complexity estimation not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="376:9" pos:end="376:41"><expr pos:start="376:9" pos:end="376:40"><name pos:start="376:9" pos:end="376:24"><name pos:start="376:9" pos:end="376:9">s</name><operator pos:start="376:10" pos:end="376:11">-&gt;</operator><name pos:start="376:12" pos:end="376:24">resync_marker</name></name><operator pos:start="376:25" pos:end="376:25">=</operator> <operator pos:start="376:27" pos:end="376:27">!</operator><call pos:start="376:28" pos:end="376:40"><name pos:start="376:28" pos:end="376:36">get_bits1</name><argument_list pos:start="376:37" pos:end="376:40">(<argument pos:start="376:38" pos:end="376:39"><expr pos:start="376:38" pos:end="376:39"><name pos:start="376:38" pos:end="376:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="376:43" pos:end="376:70">/* resync_marker_disabled */</comment>



        <expr_stmt pos:start="380:9" pos:end="380:44"><expr pos:start="380:9" pos:end="380:43"><name pos:start="380:9" pos:end="380:28"><name pos:start="380:9" pos:end="380:9">s</name><operator pos:start="380:10" pos:end="380:11">-&gt;</operator><name pos:start="380:12" pos:end="380:28">data_partitioning</name></name><operator pos:start="380:29" pos:end="380:29">=</operator> <call pos:start="380:31" pos:end="380:43"><name pos:start="380:31" pos:end="380:39">get_bits1</name><argument_list pos:start="380:40" pos:end="380:43">(<argument pos:start="380:41" pos:end="380:42"><expr pos:start="380:41" pos:end="380:42"><name pos:start="380:41" pos:end="380:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="382:9" pos:end="480:13"><if pos:start="382:9" pos:end="480:13">if<condition pos:start="382:11" pos:end="382:32">(<expr pos:start="382:12" pos:end="382:31"><name pos:start="382:12" pos:end="382:31"><name pos:start="382:12" pos:end="382:12">s</name><operator pos:start="382:13" pos:end="382:14">-&gt;</operator><name pos:start="382:15" pos:end="382:31">data_partitioning</name></name></expr>)</condition><block pos:start="382:33" pos:end="480:13">{<block_content pos:start="384:13" pos:end="480:13">

            <expr_stmt pos:start="384:13" pos:end="384:35"><expr pos:start="384:13" pos:end="384:34"><name pos:start="384:13" pos:end="384:19"><name pos:start="384:13" pos:end="384:13">s</name><operator pos:start="384:14" pos:end="384:15">-&gt;</operator><name pos:start="384:16" pos:end="384:19">rvlc</name></name><operator pos:start="384:20" pos:end="384:20">=</operator> <call pos:start="384:22" pos:end="384:34"><name pos:start="384:22" pos:end="384:30">get_bits1</name><argument_list pos:start="384:31" pos:end="384:34">(<argument pos:start="384:32" pos:end="384:33"><expr pos:start="384:32" pos:end="384:33"><name pos:start="384:32" pos:end="384:33">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        <if_stmt pos:start="389:9" pos:end="480:13"><if pos:start="389:9" pos:end="480:13">if<condition pos:start="389:11" pos:end="389:26">(<expr pos:start="389:12" pos:end="389:25"><name pos:start="389:12" pos:end="389:20">vo_ver_id</name> <operator pos:start="389:22" pos:end="389:23">!=</operator> <literal type="number" pos:start="389:25" pos:end="389:25">1</literal></expr>)</condition> <block pos:start="389:28" pos:end="480:13">{<block_content pos:start="391:13" pos:end="480:13">

            <expr_stmt pos:start="391:13" pos:end="391:39"><expr pos:start="391:13" pos:end="391:38"><name pos:start="391:13" pos:end="391:23"><name pos:start="391:13" pos:end="391:13">s</name><operator pos:start="391:14" pos:end="391:15">-&gt;</operator><name pos:start="391:16" pos:end="391:23">new_pred</name></name><operator pos:start="391:24" pos:end="391:24">=</operator> <call pos:start="391:26" pos:end="391:38"><name pos:start="391:26" pos:end="391:34">get_bits1</name><argument_list pos:start="391:35" pos:end="391:38">(<argument pos:start="391:36" pos:end="391:37"><expr pos:start="391:36" pos:end="391:37"><name pos:start="391:36" pos:end="391:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="393:13" pos:end="480:13"><if pos:start="393:13" pos:end="480:13">if<condition pos:start="393:15" pos:end="393:27">(<expr pos:start="393:16" pos:end="393:26"><name pos:start="393:16" pos:end="393:26"><name pos:start="393:16" pos:end="393:16">s</name><operator pos:start="393:17" pos:end="393:18">-&gt;</operator><name pos:start="393:19" pos:end="393:26">new_pred</name></name></expr>)</condition><block pos:start="393:28" pos:end="480:13">{<block_content pos:start="395:17" pos:end="480:13">

                <expr_stmt pos:start="395:17" pos:end="395:75"><expr pos:start="395:17" pos:end="395:74"><call pos:start="395:17" pos:end="395:74"><name pos:start="395:17" pos:end="395:22">av_log</name><argument_list pos:start="395:23" pos:end="395:74">(<argument pos:start="395:24" pos:end="395:31"><expr pos:start="395:24" pos:end="395:31"><name pos:start="395:24" pos:end="395:31"><name pos:start="395:24" pos:end="395:24">s</name><operator pos:start="395:25" pos:end="395:26">-&gt;</operator><name pos:start="395:27" pos:end="395:31">avctx</name></name></expr></argument>, <argument pos:start="395:34" pos:end="395:45"><expr pos:start="395:34" pos:end="395:45"><name pos:start="395:34" pos:end="395:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="395:48" pos:end="395:73"><expr pos:start="395:48" pos:end="395:73"><literal type="string" pos:start="395:48" pos:end="395:73">"new pred not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="397:17" pos:end="397:33"><expr pos:start="397:17" pos:end="397:32"><call pos:start="397:17" pos:end="397:32"><name pos:start="397:17" pos:end="397:25">skip_bits</name><argument_list pos:start="397:26" pos:end="397:32">(<argument pos:start="397:27" pos:end="397:28"><expr pos:start="397:27" pos:end="397:28"><name pos:start="397:27" pos:end="397:28">gb</name></expr></argument>, <argument pos:start="397:31" pos:end="397:31"><expr pos:start="397:31" pos:end="397:31"><literal type="number" pos:start="397:31" pos:end="397:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="397:35" pos:end="397:71">/* requested upstream message type */</comment>

                <expr_stmt pos:start="399:17" pos:end="399:31"><expr pos:start="399:17" pos:end="399:30"><call pos:start="399:17" pos:end="399:30"><name pos:start="399:17" pos:end="399:26">skip_bits1</name><argument_list pos:start="399:27" pos:end="399:30">(<argument pos:start="399:28" pos:end="399:29"><expr pos:start="399:28" pos:end="399:29"><name pos:start="399:28" pos:end="399:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="399:33" pos:end="399:58">/* newpred segment type */</comment>


            <expr_stmt pos:start="402:13" pos:end="402:46"><expr pos:start="402:13" pos:end="402:45"><name pos:start="402:13" pos:end="402:30"><name pos:start="402:13" pos:end="402:13">s</name><operator pos:start="402:14" pos:end="402:15">-&gt;</operator><name pos:start="402:16" pos:end="402:30">reduced_res_vop</name></name><operator pos:start="402:31" pos:end="402:31">=</operator> <call pos:start="402:33" pos:end="402:45"><name pos:start="402:33" pos:end="402:41">get_bits1</name><argument_list pos:start="402:42" pos:end="402:45">(<argument pos:start="402:43" pos:end="402:44"><expr pos:start="402:43" pos:end="402:44"><name pos:start="402:43" pos:end="402:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="404:13" pos:end="480:13"><if pos:start="404:13" pos:end="404:108">if<condition pos:start="404:15" pos:end="404:34">(<expr pos:start="404:16" pos:end="404:33"><name pos:start="404:16" pos:end="404:33"><name pos:start="404:16" pos:end="404:16">s</name><operator pos:start="404:17" pos:end="404:18">-&gt;</operator><name pos:start="404:19" pos:end="404:33">reduced_res_vop</name></name></expr>)</condition><block type="pseudo" pos:start="404:36" pos:end="404:108"><block_content pos:start="404:36" pos:end="404:108"> <expr_stmt pos:start="404:36" pos:end="404:108"><expr pos:start="404:36" pos:end="404:107"><call pos:start="404:36" pos:end="404:107"><name pos:start="404:36" pos:end="404:41">av_log</name><argument_list pos:start="404:42" pos:end="404:107">(<argument pos:start="404:43" pos:end="404:50"><expr pos:start="404:43" pos:end="404:50"><name pos:start="404:43" pos:end="404:50"><name pos:start="404:43" pos:end="404:43">s</name><operator pos:start="404:44" pos:end="404:45">-&gt;</operator><name pos:start="404:46" pos:end="404:50">avctx</name></name></expr></argument>, <argument pos:start="404:53" pos:end="404:64"><expr pos:start="404:53" pos:end="404:64"><name pos:start="404:53" pos:end="404:64">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="404:67" pos:end="404:106"><expr pos:start="404:67" pos:end="404:106"><literal type="string" pos:start="404:67" pos:end="404:106">"reduced resolution VOP not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>


        <else pos:start="407:9" pos:end="480:13">else<block pos:start="407:13" pos:end="480:13">{<block_content pos:start="409:13" pos:end="480:13">

            <expr_stmt pos:start="409:13" pos:end="409:26"><expr pos:start="409:13" pos:end="409:25"><name pos:start="409:13" pos:end="409:23"><name pos:start="409:13" pos:end="409:13">s</name><operator pos:start="409:14" pos:end="409:15">-&gt;</operator><name pos:start="409:16" pos:end="409:23">new_pred</name></name><operator pos:start="409:24" pos:end="409:24">=</operator><literal type="number" pos:start="409:25" pos:end="409:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:34"><expr pos:start="411:13" pos:end="411:33"><name pos:start="411:13" pos:end="411:30"><name pos:start="411:13" pos:end="411:13">s</name><operator pos:start="411:14" pos:end="411:15">-&gt;</operator><name pos:start="411:16" pos:end="411:30">reduced_res_vop</name></name><operator pos:start="411:31" pos:end="411:31">=</operator> <literal type="number" pos:start="411:33" pos:end="411:33">0</literal></expr>;</expr_stmt>




        <expr_stmt pos:start="416:9" pos:end="416:38"><expr pos:start="416:9" pos:end="416:37"><name pos:start="416:9" pos:end="416:22"><name pos:start="416:9" pos:end="416:9">s</name><operator pos:start="416:10" pos:end="416:11">-&gt;</operator><name pos:start="416:12" pos:end="416:22">scalability</name></name><operator pos:start="416:23" pos:end="416:23">=</operator> <call pos:start="416:25" pos:end="416:37"><name pos:start="416:25" pos:end="416:33">get_bits1</name><argument_list pos:start="416:34" pos:end="416:37">(<argument pos:start="416:35" pos:end="416:36"><expr pos:start="416:35" pos:end="416:36"><name pos:start="416:35" pos:end="416:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="420:9" pos:end="480:13"><if pos:start="420:9" pos:end="480:13">if <condition pos:start="420:12" pos:end="420:27">(<expr pos:start="420:13" pos:end="420:26"><name pos:start="420:13" pos:end="420:26"><name pos:start="420:13" pos:end="420:13">s</name><operator pos:start="420:14" pos:end="420:15">-&gt;</operator><name pos:start="420:16" pos:end="420:26">scalability</name></name></expr>)</condition> <block pos:start="420:29" pos:end="480:13">{<block_content pos:start="422:13" pos:end="480:13">

            <decl_stmt pos:start="422:13" pos:end="422:35"><decl pos:start="422:13" pos:end="422:34"><type pos:start="422:13" pos:end="422:25"><name pos:start="422:13" pos:end="422:25">GetBitContext</name></type> <name pos:start="422:27" pos:end="422:29">bak</name><init pos:start="422:30" pos:end="422:34">= <expr pos:start="422:32" pos:end="422:34"><operator pos:start="422:32" pos:end="422:32">*</operator><name pos:start="422:33" pos:end="422:34">gb</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="424:13" pos:end="424:29"><decl pos:start="424:13" pos:end="424:28"><type pos:start="424:13" pos:end="424:15"><name pos:start="424:13" pos:end="424:15">int</name></type> <name pos:start="424:17" pos:end="424:28">ref_layer_id</name></decl>;</decl_stmt>

            <decl_stmt pos:start="426:13" pos:end="426:39"><decl pos:start="426:13" pos:end="426:38"><type pos:start="426:13" pos:end="426:15"><name pos:start="426:13" pos:end="426:15">int</name></type> <name pos:start="426:17" pos:end="426:38">ref_layer_sampling_dir</name></decl>;</decl_stmt>

            <decl_stmt pos:start="428:13" pos:end="428:36"><decl pos:start="428:13" pos:end="428:35"><type pos:start="428:13" pos:end="428:15"><name pos:start="428:13" pos:end="428:15">int</name></type> <name pos:start="428:17" pos:end="428:35">h_sampling_factor_n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="430:13" pos:end="430:36"><decl pos:start="430:13" pos:end="430:35"><type pos:start="430:13" pos:end="430:15"><name pos:start="430:13" pos:end="430:15">int</name></type> <name pos:start="430:17" pos:end="430:35">h_sampling_factor_m</name></decl>;</decl_stmt>

            <decl_stmt pos:start="432:13" pos:end="432:36"><decl pos:start="432:13" pos:end="432:35"><type pos:start="432:13" pos:end="432:15"><name pos:start="432:13" pos:end="432:15">int</name></type> <name pos:start="432:17" pos:end="432:35">v_sampling_factor_n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="434:13" pos:end="434:36"><decl pos:start="434:13" pos:end="434:35"><type pos:start="434:13" pos:end="434:15"><name pos:start="434:13" pos:end="434:15">int</name></type> <name pos:start="434:17" pos:end="434:35">v_sampling_factor_m</name></decl>;</decl_stmt>



            <expr_stmt pos:start="438:13" pos:end="438:44"><expr pos:start="438:13" pos:end="438:43"><name pos:start="438:13" pos:end="438:28"><name pos:start="438:13" pos:end="438:13">s</name><operator pos:start="438:14" pos:end="438:15">-&gt;</operator><name pos:start="438:16" pos:end="438:28">hierachy_type</name></name><operator pos:start="438:29" pos:end="438:29">=</operator> <call pos:start="438:31" pos:end="438:43"><name pos:start="438:31" pos:end="438:39">get_bits1</name><argument_list pos:start="438:40" pos:end="438:43">(<argument pos:start="438:41" pos:end="438:42"><expr pos:start="438:41" pos:end="438:42"><name pos:start="438:41" pos:end="438:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="440:13" pos:end="440:42"><expr pos:start="440:13" pos:end="440:41"><name pos:start="440:13" pos:end="440:24">ref_layer_id</name><operator pos:start="440:25" pos:end="440:25">=</operator> <call pos:start="440:27" pos:end="440:41"><name pos:start="440:27" pos:end="440:34">get_bits</name><argument_list pos:start="440:35" pos:end="440:41">(<argument pos:start="440:36" pos:end="440:37"><expr pos:start="440:36" pos:end="440:37"><name pos:start="440:36" pos:end="440:37">gb</name></expr></argument>, <argument pos:start="440:40" pos:end="440:40"><expr pos:start="440:40" pos:end="440:40"><literal type="number" pos:start="440:40" pos:end="440:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="442:13" pos:end="442:50"><expr pos:start="442:13" pos:end="442:49"><name pos:start="442:13" pos:end="442:34">ref_layer_sampling_dir</name><operator pos:start="442:35" pos:end="442:35">=</operator> <call pos:start="442:37" pos:end="442:49"><name pos:start="442:37" pos:end="442:45">get_bits1</name><argument_list pos:start="442:46" pos:end="442:49">(<argument pos:start="442:47" pos:end="442:48"><expr pos:start="442:47" pos:end="442:48"><name pos:start="442:47" pos:end="442:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="444:13" pos:end="444:49"><expr pos:start="444:13" pos:end="444:48"><name pos:start="444:13" pos:end="444:31">h_sampling_factor_n</name><operator pos:start="444:32" pos:end="444:32">=</operator> <call pos:start="444:34" pos:end="444:48"><name pos:start="444:34" pos:end="444:41">get_bits</name><argument_list pos:start="444:42" pos:end="444:48">(<argument pos:start="444:43" pos:end="444:44"><expr pos:start="444:43" pos:end="444:44"><name pos:start="444:43" pos:end="444:44">gb</name></expr></argument>, <argument pos:start="444:47" pos:end="444:47"><expr pos:start="444:47" pos:end="444:47"><literal type="number" pos:start="444:47" pos:end="444:47">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="446:13" pos:end="446:49"><expr pos:start="446:13" pos:end="446:48"><name pos:start="446:13" pos:end="446:31">h_sampling_factor_m</name><operator pos:start="446:32" pos:end="446:32">=</operator> <call pos:start="446:34" pos:end="446:48"><name pos:start="446:34" pos:end="446:41">get_bits</name><argument_list pos:start="446:42" pos:end="446:48">(<argument pos:start="446:43" pos:end="446:44"><expr pos:start="446:43" pos:end="446:44"><name pos:start="446:43" pos:end="446:44">gb</name></expr></argument>, <argument pos:start="446:47" pos:end="446:47"><expr pos:start="446:47" pos:end="446:47"><literal type="number" pos:start="446:47" pos:end="446:47">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="448:13" pos:end="448:49"><expr pos:start="448:13" pos:end="448:48"><name pos:start="448:13" pos:end="448:31">v_sampling_factor_n</name><operator pos:start="448:32" pos:end="448:32">=</operator> <call pos:start="448:34" pos:end="448:48"><name pos:start="448:34" pos:end="448:41">get_bits</name><argument_list pos:start="448:42" pos:end="448:48">(<argument pos:start="448:43" pos:end="448:44"><expr pos:start="448:43" pos:end="448:44"><name pos:start="448:43" pos:end="448:44">gb</name></expr></argument>, <argument pos:start="448:47" pos:end="448:47"><expr pos:start="448:47" pos:end="448:47"><literal type="number" pos:start="448:47" pos:end="448:47">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="450:13" pos:end="450:49"><expr pos:start="450:13" pos:end="450:48"><name pos:start="450:13" pos:end="450:31">v_sampling_factor_m</name><operator pos:start="450:32" pos:end="450:32">=</operator> <call pos:start="450:34" pos:end="450:48"><name pos:start="450:34" pos:end="450:41">get_bits</name><argument_list pos:start="450:42" pos:end="450:48">(<argument pos:start="450:43" pos:end="450:44"><expr pos:start="450:43" pos:end="450:44"><name pos:start="450:43" pos:end="450:44">gb</name></expr></argument>, <argument pos:start="450:47" pos:end="450:47"><expr pos:start="450:47" pos:end="450:47"><literal type="number" pos:start="450:47" pos:end="450:47">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="452:13" pos:end="452:47"><expr pos:start="452:13" pos:end="452:46"><name pos:start="452:13" pos:end="452:31"><name pos:start="452:13" pos:end="452:13">s</name><operator pos:start="452:14" pos:end="452:15">-&gt;</operator><name pos:start="452:16" pos:end="452:31">enhancement_type</name></name><operator pos:start="452:32" pos:end="452:32">=</operator> <call pos:start="452:34" pos:end="452:46"><name pos:start="452:34" pos:end="452:42">get_bits1</name><argument_list pos:start="452:43" pos:end="452:46">(<argument pos:start="452:44" pos:end="452:45"><expr pos:start="452:44" pos:end="452:45"><name pos:start="452:44" pos:end="452:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="456:13" pos:end="472:78"><if pos:start="456:13" pos:end="470:13">if<condition pos:start="456:15" pos:end="458:67">(   <expr pos:start="456:19" pos:end="458:66"><name pos:start="456:19" pos:end="456:37">h_sampling_factor_n</name><operator pos:start="456:38" pos:end="456:39">==</operator><literal type="number" pos:start="456:40" pos:end="456:40">0</literal> <operator pos:start="456:42" pos:end="456:43">||</operator> <name pos:start="456:45" pos:end="456:63">h_sampling_factor_m</name><operator pos:start="456:64" pos:end="456:65">==</operator><literal type="number" pos:start="456:66" pos:end="456:66">0</literal>

               <operator pos:start="458:16" pos:end="458:17">||</operator> <name pos:start="458:19" pos:end="458:37">v_sampling_factor_n</name><operator pos:start="458:38" pos:end="458:39">==</operator><literal type="number" pos:start="458:40" pos:end="458:40">0</literal> <operator pos:start="458:42" pos:end="458:43">||</operator> <name pos:start="458:45" pos:end="458:63">v_sampling_factor_m</name><operator pos:start="458:64" pos:end="458:65">==</operator><literal type="number" pos:start="458:66" pos:end="458:66">0</literal></expr>)</condition><block pos:start="458:68" pos:end="470:13">{<block_content pos:start="464:17" pos:end="468:25">



<comment type="line" pos:start="462:1" pos:end="462:110">//                fprintf(stderr, "illegal scalability header (VERY broken encoder), trying to workaround\n");</comment>

                <expr_stmt pos:start="464:17" pos:end="464:33"><expr pos:start="464:17" pos:end="464:32"><name pos:start="464:17" pos:end="464:30"><name pos:start="464:17" pos:end="464:17">s</name><operator pos:start="464:18" pos:end="464:19">-&gt;</operator><name pos:start="464:20" pos:end="464:30">scalability</name></name><operator pos:start="464:31" pos:end="464:31">=</operator><literal type="number" pos:start="464:32" pos:end="464:32">0</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="468:17" pos:end="468:25"><expr pos:start="468:17" pos:end="468:24"><operator pos:start="468:17" pos:end="468:17">*</operator><name pos:start="468:18" pos:end="468:19">gb</name><operator pos:start="468:20" pos:end="468:20">=</operator> <name pos:start="468:22" pos:end="468:24">bak</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="470:14" pos:end="472:78">else<block type="pseudo" pos:start="472:17" pos:end="472:78"><block_content pos:start="472:17" pos:end="472:78">

                <expr_stmt pos:start="472:17" pos:end="472:78"><expr pos:start="472:17" pos:end="472:77"><call pos:start="472:17" pos:end="472:77"><name pos:start="472:17" pos:end="472:22">av_log</name><argument_list pos:start="472:23" pos:end="472:77">(<argument pos:start="472:24" pos:end="472:31"><expr pos:start="472:24" pos:end="472:31"><name pos:start="472:24" pos:end="472:31"><name pos:start="472:24" pos:end="472:24">s</name><operator pos:start="472:25" pos:end="472:26">-&gt;</operator><name pos:start="472:27" pos:end="472:31">avctx</name></name></expr></argument>, <argument pos:start="472:34" pos:end="472:45"><expr pos:start="472:34" pos:end="472:45"><name pos:start="472:34" pos:end="472:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="472:48" pos:end="472:76"><expr pos:start="472:48" pos:end="472:76"><literal type="string" pos:start="472:48" pos:end="472:76">"scalability not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <comment type="line" pos:start="476:13" pos:end="476:36">// bin shape stuff FIXME</comment>



    <return pos:start="480:5" pos:end="480:13">return <expr pos:start="480:12" pos:end="480:12"><literal type="number" pos:start="480:12" pos:end="480:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></function>
</unit>
