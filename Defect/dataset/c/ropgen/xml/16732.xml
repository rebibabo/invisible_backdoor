<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16732.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">posix_aio_process_queue</name><parameter_list pos:start="1:35" pos:end="1:48">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:18">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">PosixAioState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:29">= <expr pos:start="5:24" pos:end="5:29"><name pos:start="5:24" pos:end="5:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">qemu_paiocb</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">acb</name></decl>, <decl pos:start="7:30" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:24"><modifier pos:start="7:30" pos:end="7:30">*</modifier><modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">pacb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">result</name> <init pos:start="11:16" pos:end="11:18">= <expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:24">async_context_id</name> <init pos:start="13:26" pos:end="13:49">= <expr pos:start="13:28" pos:end="13:49"><call pos:start="13:28" pos:end="13:49"><name pos:start="13:28" pos:end="13:47">get_async_context_id</name><argument_list pos:start="13:48" pos:end="13:49">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="105:5">for<control pos:start="17:8" pos:end="17:11">(<init pos:start="17:9" pos:end="17:9">;</init><condition pos:start="17:10" pos:end="17:10">;</condition><incr/>)</control> <block pos:start="17:13" pos:end="105:5">{<block_content pos:start="19:9" pos:end="103:9">

        <expr_stmt pos:start="19:9" pos:end="19:29"><expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:12">pacb</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <operator pos:start="19:16" pos:end="19:16">&amp;</operator><name pos:start="19:17" pos:end="19:28"><name pos:start="19:17" pos:end="19:17">s</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:28">first_aio</name></name></expr>;</expr_stmt>

        <for pos:start="21:9" pos:end="103:9">for<control pos:start="21:12" pos:end="21:15">(<init pos:start="21:13" pos:end="21:13">;</init><condition pos:start="21:14" pos:end="21:14">;</condition><incr/>)</control> <block pos:start="21:17" pos:end="103:9">{<block_content pos:start="23:13" pos:end="101:13">

            <expr_stmt pos:start="23:13" pos:end="23:24"><expr pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:15">acb</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">*</operator><name pos:start="23:20" pos:end="23:23">pacb</name></expr>;</expr_stmt>

            <if_stmt pos:start="25:13" pos:end="27:30"><if pos:start="25:13" pos:end="27:30">if <condition pos:start="25:16" pos:end="25:21">(<expr pos:start="25:17" pos:end="25:20"><operator pos:start="25:17" pos:end="25:17">!</operator><name pos:start="25:18" pos:end="25:20">acb</name></expr>)</condition><block type="pseudo" pos:start="27:17" pos:end="27:30"><block_content pos:start="27:17" pos:end="27:30">

                <return pos:start="27:17" pos:end="27:30">return <expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">result</name></expr>;</return></block_content></block></if></if_stmt>



            <comment type="block" pos:start="31:13" pos:end="31:72">/* we're only interested in requests in the right context */</comment>

            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:58">(<expr pos:start="33:17" pos:end="33:57"><name pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:19">acb</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:37">async_context_id</name></name> <operator pos:start="33:39" pos:end="33:40">!=</operator> <name pos:start="33:42" pos:end="33:57">async_context_id</name></expr>)</condition> <block pos:start="33:60" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:25">

                <expr_stmt pos:start="35:17" pos:end="35:34"><expr pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:20">pacb</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:33"><name pos:start="35:25" pos:end="35:27">acb</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:33">next</name></name></expr>;</expr_stmt>

                <continue pos:start="37:17" pos:end="37:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:38"><name pos:start="43:19" pos:end="43:33">qemu_paio_error</name><argument_list pos:start="43:34" pos:end="43:38">(<argument pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><name pos:start="43:35" pos:end="43:37">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="101:13"><if pos:start="45:13" pos:end="55:13">if <condition pos:start="45:16" pos:end="45:33">(<expr pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:22">==</operator> <name pos:start="45:24" pos:end="45:32">ECANCELED</name></expr>)</condition> <block pos:start="45:35" pos:end="55:13">{<block_content pos:start="49:17" pos:end="53:27">

                <comment type="block" pos:start="47:17" pos:end="47:40">/* remove the request */</comment>

                <expr_stmt pos:start="49:17" pos:end="49:34"><expr pos:start="49:17" pos:end="49:33"><operator pos:start="49:17" pos:end="49:17">*</operator><name pos:start="49:18" pos:end="49:21">pacb</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:33"><name pos:start="49:25" pos:end="49:27">acb</name><operator pos:start="49:28" pos:end="49:29">-&gt;</operator><name pos:start="49:30" pos:end="49:33">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:38"><expr pos:start="51:17" pos:end="51:37"><call pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:32">qemu_aio_release</name><argument_list pos:start="51:33" pos:end="51:37">(<argument pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><name pos:start="51:34" pos:end="51:36">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:27"><expr pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:22">result</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <literal type="number" pos:start="53:26" pos:end="53:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="55:15" pos:end="97:13">else if <condition pos:start="55:23" pos:end="55:42">(<expr pos:start="55:24" pos:end="55:41"><name pos:start="55:24" pos:end="55:26">ret</name> <operator pos:start="55:28" pos:end="55:29">!=</operator> <name pos:start="55:31" pos:end="55:41">EINPROGRESS</name></expr>)</condition> <block pos:start="55:44" pos:end="97:13">{<block_content pos:start="59:17" pos:end="95:22">

                <comment type="block" pos:start="57:17" pos:end="57:32">/* end of aio */</comment>

                <if_stmt pos:start="59:17" pos:end="75:17"><if pos:start="59:17" pos:end="71:17">if <condition pos:start="59:20" pos:end="59:29">(<expr pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:23">ret</name> <operator pos:start="59:25" pos:end="59:26">==</operator> <literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>)</condition> <block pos:start="59:31" pos:end="71:17">{<block_content pos:start="61:21" pos:end="69:38">

                    <expr_stmt pos:start="61:21" pos:end="61:48"><expr pos:start="61:21" pos:end="61:47"><name pos:start="61:21" pos:end="61:23">ret</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <call pos:start="61:27" pos:end="61:47"><name pos:start="61:27" pos:end="61:42">qemu_paio_return</name><argument_list pos:start="61:43" pos:end="61:47">(<argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><name pos:start="61:44" pos:end="61:46">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="63:21" pos:end="69:38"><if pos:start="63:21" pos:end="65:32">if <condition pos:start="63:24" pos:end="63:47">(<expr pos:start="63:25" pos:end="63:46"><name pos:start="63:25" pos:end="63:27">ret</name> <operator pos:start="63:29" pos:end="63:30">==</operator> <name pos:start="63:32" pos:end="63:46"><name pos:start="63:32" pos:end="63:34">acb</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:46">aio_nbytes</name></name></expr>)</condition><block type="pseudo" pos:start="65:25" pos:end="65:32"><block_content pos:start="65:25" pos:end="65:32">

                        <expr_stmt pos:start="65:25" pos:end="65:32"><expr pos:start="65:25" pos:end="65:31"><name pos:start="65:25" pos:end="65:27">ret</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="67:21" pos:end="69:38">else<block type="pseudo" pos:start="69:25" pos:end="69:38"><block_content pos:start="69:25" pos:end="69:38">

                        <expr_stmt pos:start="69:25" pos:end="69:38"><expr pos:start="69:25" pos:end="69:37"><name pos:start="69:25" pos:end="69:27">ret</name> <operator pos:start="69:29" pos:end="69:29">=</operator> <operator pos:start="69:31" pos:end="69:31">-</operator><name pos:start="69:32" pos:end="69:37">EINVAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="71:19" pos:end="75:17">else <block pos:start="71:24" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:31">

                    <expr_stmt pos:start="73:21" pos:end="73:31"><expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:23">ret</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <operator pos:start="73:27" pos:end="73:27">-</operator><name pos:start="73:28" pos:end="73:30">ret</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="79:17" pos:end="79:66"><expr pos:start="79:17" pos:end="79:65"><call pos:start="79:17" pos:end="79:65"><name pos:start="79:17" pos:end="79:35">trace_paio_complete</name><argument_list pos:start="79:36" pos:end="79:65">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">acb</name></expr></argument>, <argument pos:start="79:42" pos:end="79:59"><expr pos:start="79:42" pos:end="79:59"><name pos:start="79:42" pos:end="79:59"><name pos:start="79:42" pos:end="79:44">acb</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:52">common</name><operator pos:start="79:53" pos:end="79:53">.</operator><name pos:start="79:54" pos:end="79:59">opaque</name></name></expr></argument>, <argument pos:start="79:62" pos:end="79:64"><expr pos:start="79:62" pos:end="79:64"><name pos:start="79:62" pos:end="79:64">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="83:17" pos:end="83:40">/* remove the request */</comment>

                <expr_stmt pos:start="85:17" pos:end="85:34"><expr pos:start="85:17" pos:end="85:33"><operator pos:start="85:17" pos:end="85:17">*</operator><name pos:start="85:18" pos:end="85:21">pacb</name> <operator pos:start="85:23" pos:end="85:23">=</operator> <name pos:start="85:25" pos:end="85:33"><name pos:start="85:25" pos:end="85:27">acb</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:33">next</name></name></expr>;</expr_stmt>

                <comment type="block" pos:start="87:17" pos:end="87:39">/* call the callback */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:56"><expr pos:start="89:17" pos:end="89:55"><call pos:start="89:17" pos:end="89:55"><name pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:19">acb</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:27">common</name><operator pos:start="89:28" pos:end="89:28">.</operator><name pos:start="89:29" pos:end="89:30">cb</name></name><argument_list pos:start="89:31" pos:end="89:55">(<argument pos:start="89:32" pos:end="89:49"><expr pos:start="89:32" pos:end="89:49"><name pos:start="89:32" pos:end="89:49"><name pos:start="89:32" pos:end="89:34">acb</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:42">common</name><operator pos:start="89:43" pos:end="89:43">.</operator><name pos:start="89:44" pos:end="89:49">opaque</name></name></expr></argument>, <argument pos:start="89:52" pos:end="89:54"><expr pos:start="89:52" pos:end="89:54"><name pos:start="89:52" pos:end="89:54">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:38"><expr pos:start="91:17" pos:end="91:37"><call pos:start="91:17" pos:end="91:37"><name pos:start="91:17" pos:end="91:32">qemu_aio_release</name><argument_list pos:start="91:33" pos:end="91:37">(<argument pos:start="91:34" pos:end="91:36"><expr pos:start="91:34" pos:end="91:36"><name pos:start="91:34" pos:end="91:36">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:27"><expr pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:22">result</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">1</literal></expr>;</expr_stmt>

                <break pos:start="95:17" pos:end="95:22">break;</break>

            </block_content>}</block></if> <else pos:start="97:15" pos:end="101:13">else <block pos:start="97:20" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:34">

                <expr_stmt pos:start="99:17" pos:end="99:34"><expr pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:20">pacb</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <operator pos:start="99:24" pos:end="99:24">&amp;</operator><name pos:start="99:25" pos:end="99:33"><name pos:start="99:25" pos:end="99:27">acb</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:33">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <return pos:start="109:5" pos:end="109:18">return <expr pos:start="109:12" pos:end="109:17"><name pos:start="109:12" pos:end="109:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
