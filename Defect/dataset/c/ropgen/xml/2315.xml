<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2315.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:39">scsi_target_send_command</name><parameter_list pos:start="1:40" pos:end="1:71">(<parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:51">SCSIRequest</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">req</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:18">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SCSITargetReq</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">r</name> <init pos:start="5:22" pos:end="5:57">= <expr pos:start="5:24" pos:end="5:57"><call pos:start="5:24" pos:end="5:57"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:57">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">SCSITargetReq</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">req</name></expr></argument>, <argument pos:start="5:54" pos:end="5:56"><expr pos:start="5:54" pos:end="5:56"><name pos:start="5:54" pos:end="5:56">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="67:5">switch <condition pos:start="9:12" pos:end="9:19">(<expr pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:15">buf</name><index pos:start="9:16" pos:end="9:18">[<expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="9:21" pos:end="67:5">{<block_content pos:start="11:5" pos:end="65:17">

    <case pos:start="11:5" pos:end="11:21">case <expr pos:start="11:10" pos:end="11:20"><name pos:start="11:10" pos:end="11:20">REPORT_LUNS</name></expr>:</case>

        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if <condition pos:start="13:12" pos:end="13:48">(<expr pos:start="13:13" pos:end="13:47"><operator pos:start="13:13" pos:end="13:13">!</operator><call pos:start="13:14" pos:end="13:47"><name pos:start="13:14" pos:end="13:44">scsi_target_emulate_report_luns</name><argument_list pos:start="13:45" pos:end="13:47">(<argument pos:start="13:46" pos:end="13:46"><expr pos:start="13:46" pos:end="13:46"><name pos:start="13:46" pos:end="13:46">r</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:50" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:33">

            <goto pos:start="15:13" pos:end="15:33">goto <name pos:start="15:18" pos:end="15:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:17">case <expr pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:16">INQUIRY</name></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:44">(<expr pos:start="23:13" pos:end="23:43"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:43"><name pos:start="23:14" pos:end="23:40">scsi_target_emulate_inquiry</name><argument_list pos:start="23:41" pos:end="23:43">(<argument pos:start="23:42" pos:end="23:42"><expr pos:start="23:42" pos:end="23:42"><name pos:start="23:42" pos:end="23:42">r</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:46" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:33">

            <goto pos:start="25:13" pos:end="25:33">goto <name pos:start="25:18" pos:end="25:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:23">case <expr pos:start="31:10" pos:end="31:22"><name pos:start="31:10" pos:end="31:22">REQUEST_SENSE</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="37:67"><expr pos:start="33:9" pos:end="37:66"><name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:9">r</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:14">len</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="37:66"><name pos:start="33:18" pos:end="33:38">scsi_device_get_sense</name><argument_list pos:start="33:39" pos:end="37:66">(<argument pos:start="33:40" pos:end="33:49"><expr pos:start="33:40" pos:end="33:49"><name pos:start="33:40" pos:end="33:49"><name pos:start="33:40" pos:end="33:40">r</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:45">req</name><operator pos:start="33:46" pos:end="33:46">.</operator><name pos:start="33:47" pos:end="33:49">dev</name></name></expr></argument>, <argument pos:start="33:52" pos:end="33:57"><expr pos:start="33:52" pos:end="33:57"><name pos:start="33:52" pos:end="33:57"><name pos:start="33:52" pos:end="33:52">r</name><operator pos:start="33:53" pos:end="33:54">-&gt;</operator><name pos:start="33:55" pos:end="33:57">buf</name></name></expr></argument>,

                                       <argument pos:start="35:40" pos:end="35:72"><expr pos:start="35:40" pos:end="35:72"><call pos:start="35:40" pos:end="35:72"><name pos:start="35:40" pos:end="35:42">MIN</name><argument_list pos:start="35:43" pos:end="35:72">(<argument pos:start="35:44" pos:end="35:56"><expr pos:start="35:44" pos:end="35:56"><name pos:start="35:44" pos:end="35:56"><name pos:start="35:44" pos:end="35:46">req</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:51">cmd</name><operator pos:start="35:52" pos:end="35:52">.</operator><name pos:start="35:53" pos:end="35:56">xfer</name></name></expr></argument>, <argument pos:start="35:59" pos:end="35:71"><expr pos:start="35:59" pos:end="35:71"><sizeof pos:start="35:59" pos:end="35:71">sizeof <name pos:start="35:66" pos:end="35:71"><name pos:start="35:66" pos:end="35:66">r</name><operator pos:start="35:67" pos:end="35:68">-&gt;</operator><name pos:start="35:69" pos:end="35:71">buf</name></name></sizeof></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="37:40" pos:end="37:65"><expr pos:start="37:40" pos:end="37:65"><operator pos:start="37:40" pos:end="37:40">(</operator><name pos:start="37:41" pos:end="37:55"><name pos:start="37:41" pos:end="37:43">req</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:48">cmd</name><operator pos:start="37:49" pos:end="37:49">.</operator><name pos:start="37:50" pos:end="37:52">buf</name><index pos:start="37:53" pos:end="37:55">[<expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">1</literal></expr>]</index></name> <operator pos:start="37:57" pos:end="37:57">&amp;</operator> <literal type="number" pos:start="37:59" pos:end="37:59">1</literal><operator pos:start="37:60" pos:end="37:60">)</operator> <operator pos:start="37:62" pos:end="37:63">==</operator> <literal type="number" pos:start="37:65" pos:end="37:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:36">(<expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:13">r</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">req</name><operator pos:start="39:19" pos:end="39:19">.</operator><name pos:start="39:20" pos:end="39:22">dev</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:35">sense_is_ua</name></name></expr>)</condition> <block pos:start="39:38" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:44">

            <expr_stmt pos:start="41:13" pos:end="41:58"><expr pos:start="41:13" pos:end="41:57"><call pos:start="41:13" pos:end="41:57"><name pos:start="41:13" pos:end="41:47">scsi_device_unit_attention_reported</name><argument_list pos:start="41:48" pos:end="41:57">(<argument pos:start="41:49" pos:end="41:56"><expr pos:start="41:49" pos:end="41:56"><name pos:start="41:49" pos:end="41:56"><name pos:start="41:49" pos:end="41:51">req</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:56">dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:13">r</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:18">req</name><operator pos:start="43:19" pos:end="43:19">.</operator><name pos:start="43:20" pos:end="43:22">dev</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:33">sense_len</name></name> <operator pos:start="43:35" pos:end="43:35">=</operator> <literal type="number" pos:start="43:37" pos:end="43:37">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:44"><expr pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:13">r</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:18">req</name><operator pos:start="45:19" pos:end="45:19">.</operator><name pos:start="45:20" pos:end="45:22">dev</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:35">sense_is_ua</name></name> <operator pos:start="45:37" pos:end="45:37">=</operator> <name pos:start="45:39" pos:end="45:43">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><call pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:28">scsi_req_build_sense</name><argument_list pos:start="53:29" pos:end="53:64">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">req</name></expr></argument>, <argument pos:start="53:35" pos:end="53:63"><expr pos:start="53:35" pos:end="53:63"><call pos:start="53:35" pos:end="53:63"><name pos:start="53:35" pos:end="53:44">SENSE_CODE</name><argument_list pos:start="53:45" pos:end="53:63">(<argument pos:start="53:46" pos:end="53:62"><expr pos:start="53:46" pos:end="53:62"><name pos:start="53:46" pos:end="53:62">LUN_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:48"><expr pos:start="55:9" pos:end="55:47"><call pos:start="55:9" pos:end="55:47"><name pos:start="55:9" pos:end="55:25">scsi_req_complete</name><argument_list pos:start="55:26" pos:end="55:47">(<argument pos:start="55:27" pos:end="55:29"><expr pos:start="55:27" pos:end="55:29"><name pos:start="55:27" pos:end="55:29">req</name></expr></argument>, <argument pos:start="55:32" pos:end="55:46"><expr pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:46">CHECK_CONDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</return>

    <label pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:19">illegal_request</name>:</label>

        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><call pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:28">scsi_req_build_sense</name><argument_list pos:start="61:29" pos:end="61:60">(<argument pos:start="61:30" pos:end="61:32"><expr pos:start="61:30" pos:end="61:32"><name pos:start="61:30" pos:end="61:32">req</name></expr></argument>, <argument pos:start="61:35" pos:end="61:59"><expr pos:start="61:35" pos:end="61:59"><call pos:start="61:35" pos:end="61:59"><name pos:start="61:35" pos:end="61:44">SENSE_CODE</name><argument_list pos:start="61:45" pos:end="61:59">(<argument pos:start="61:46" pos:end="61:58"><expr pos:start="61:46" pos:end="61:58"><name pos:start="61:46" pos:end="61:58">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><call pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:25">scsi_req_complete</name><argument_list pos:start="63:26" pos:end="63:47">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">req</name></expr></argument>, <argument pos:start="63:32" pos:end="63:46"><expr pos:start="63:32" pos:end="63:46"><name pos:start="63:32" pos:end="63:46">CHECK_CONDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:16">(<expr pos:start="71:9" pos:end="71:15"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:15"><name pos:start="71:10" pos:end="71:10">r</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:15">len</name></name></expr>)</condition> <block pos:start="71:18" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:37">

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><call pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:25">scsi_req_complete</name><argument_list pos:start="73:26" pos:end="73:36">(<argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">req</name></expr></argument>, <argument pos:start="73:32" pos:end="73:35"><expr pos:start="73:32" pos:end="73:35"><name pos:start="73:32" pos:end="73:35">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="77:5" pos:end="77:18">return <expr pos:start="77:12" pos:end="77:17"><name pos:start="77:12" pos:end="77:17"><name pos:start="77:12" pos:end="77:12">r</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:17">len</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
