<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26574.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">handle_arg_reserved_va</name><parameter_list pos:start="1:35" pos:end="1:51">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:47"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:5">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:38"><expr pos:start="9:5" pos:end="9:37"><name pos:start="9:5" pos:end="9:15">reserved_va</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <call pos:start="9:19" pos:end="9:37"><name pos:start="9:19" pos:end="9:25">strtoul</name><argument_list pos:start="9:26" pos:end="9:37">(<argument pos:start="9:27" pos:end="9:29"><expr pos:start="9:27" pos:end="9:29"><name pos:start="9:27" pos:end="9:29">arg</name></expr></argument>, <argument pos:start="9:32" pos:end="9:33"><expr pos:start="9:32" pos:end="9:33"><operator pos:start="9:32" pos:end="9:32">&amp;</operator><name pos:start="9:33" pos:end="9:33">p</name></expr></argument>, <argument pos:start="9:36" pos:end="9:36"><expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="11:5" pos:end="33:5">switch <condition pos:start="11:12" pos:end="11:15">(<expr pos:start="11:13" pos:end="11:14"><operator pos:start="11:13" pos:end="11:13">*</operator><name pos:start="11:14" pos:end="11:14">p</name></expr>)</condition> <block pos:start="11:17" pos:end="33:5">{<block_content pos:start="13:5" pos:end="31:14">

    <case pos:start="13:5" pos:end="13:13">case <expr pos:start="13:10" pos:end="13:12"><literal type="char" pos:start="13:10" pos:end="13:12">'k'</literal></expr>:</case>

    <case pos:start="15:5" pos:end="15:13">case <expr pos:start="15:10" pos:end="15:12"><literal type="char" pos:start="15:10" pos:end="15:12">'K'</literal></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:19"><expr pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:13">shift</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <literal type="number" pos:start="17:17" pos:end="17:18">10</literal></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:13">case <expr pos:start="21:10" pos:end="21:12"><literal type="char" pos:start="21:10" pos:end="21:12">'M'</literal></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:19"><expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:13">shift</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="number" pos:start="23:17" pos:end="23:18">20</literal></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:13">case <expr pos:start="27:10" pos:end="27:12"><literal type="char" pos:start="27:10" pos:end="27:12">'G'</literal></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:19"><expr pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:13">shift</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <literal type="number" pos:start="29:17" pos:end="29:18">30</literal></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="35:5" pos:end="59:5"><if pos:start="35:5" pos:end="59:5">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">shift</name></expr>)</condition> <block pos:start="35:16" pos:end="59:5">{<block_content pos:start="37:9" pos:end="57:9">

        <decl_stmt pos:start="37:9" pos:end="37:46"><decl pos:start="37:9" pos:end="37:45"><type pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:16">unsigned</name> <name pos:start="37:18" pos:end="37:21">long</name></type> <name pos:start="37:23" pos:end="37:31">unshifted</name> <init pos:start="37:33" pos:end="37:45">= <expr pos:start="37:35" pos:end="37:45"><name pos:start="37:35" pos:end="37:45">reserved_va</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:12"><expr pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:9">p</name><operator pos:start="39:10" pos:end="39:11">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:19">reserved_va</name> <operator pos:start="41:21" pos:end="41:23">&lt;&lt;=</operator> <name pos:start="41:25" pos:end="41:29">shift</name></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="57:9"><if pos:start="43:9" pos:end="57:9">if <condition pos:start="43:12" pos:end="51:13">(<expr pos:start="43:13" pos:end="50:0"><operator pos:start="43:13" pos:end="43:13">(</operator><operator pos:start="43:14" pos:end="43:14">(</operator><name pos:start="43:15" pos:end="43:25">reserved_va</name> <operator pos:start="43:27" pos:end="43:28">&gt;&gt;</operator> <name pos:start="43:30" pos:end="43:34">shift</name><operator pos:start="43:35" pos:end="43:35">)</operator> <operator pos:start="43:37" pos:end="43:38">!=</operator> <name pos:start="43:40" pos:end="43:48">unshifted</name><operator pos:start="43:49" pos:end="46:0">)</operator>

<cpp:if pos:start="45:1" pos:end="45:48">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:48"><name pos:start="45:5" pos:end="45:18">HOST_LONG_BITS</name> <operator pos:start="45:20" pos:end="45:20">&gt;</operator> <name pos:start="45:22" pos:end="45:48">TARGET_VIRT_ADDR_SPACE_BITS</name></expr></cpp:if>

            <operator pos:start="47:13" pos:end="47:14">||</operator> <operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:27">reserved_va</name> <operator pos:start="47:29" pos:end="47:29">&gt;</operator> <operator pos:start="47:31" pos:end="47:31">(</operator><literal type="number" pos:start="47:32" pos:end="47:34">1ul</literal> <operator pos:start="47:36" pos:end="47:37">&lt;&lt;</operator> <name pos:start="47:39" pos:end="47:65">TARGET_VIRT_ADDR_SPACE_BITS</name><operator pos:start="47:66" pos:end="47:66">)</operator><operator pos:start="47:67" pos:end="50:0">)</operator></expr>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

            )</condition> <block pos:start="51:15" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:31">

            <expr_stmt pos:start="53:13" pos:end="53:66"><expr pos:start="53:13" pos:end="53:65"><call pos:start="53:13" pos:end="53:65"><name pos:start="53:13" pos:end="53:19">fprintf</name><argument_list pos:start="53:20" pos:end="53:65">(<argument pos:start="53:21" pos:end="53:26"><expr pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:26">stderr</name></expr></argument>, <argument pos:start="53:29" pos:end="53:64"><expr pos:start="53:29" pos:end="53:64"><literal type="string" pos:start="53:29" pos:end="53:64">"Reserved virtual address too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:31"><expr pos:start="55:13" pos:end="55:30"><call pos:start="55:13" pos:end="55:30"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:30">(<argument pos:start="55:18" pos:end="55:29"><expr pos:start="55:18" pos:end="55:29"><name pos:start="55:18" pos:end="55:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:11">(<expr pos:start="61:9" pos:end="61:10"><operator pos:start="61:9" pos:end="61:9">*</operator><name pos:start="61:10" pos:end="61:10">p</name></expr>)</condition> <block pos:start="61:13" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:27">

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><call pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:15">fprintf</name><argument_list pos:start="63:16" pos:end="63:64">(<argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">stderr</name></expr></argument>, <argument pos:start="63:25" pos:end="63:60"><expr pos:start="63:25" pos:end="63:60"><literal type="string" pos:start="63:25" pos:end="63:60">"Unrecognised -R size suffix '%s'\n"</literal></expr></argument>, <argument pos:start="63:63" pos:end="63:63"><expr pos:start="63:63" pos:end="63:63"><name pos:start="63:63" pos:end="63:63">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:27"><expr pos:start="65:9" pos:end="65:26"><call pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:12">exit</name><argument_list pos:start="65:13" pos:end="65:26">(<argument pos:start="65:14" pos:end="65:25"><expr pos:start="65:14" pos:end="65:25"><name pos:start="65:14" pos:end="65:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
