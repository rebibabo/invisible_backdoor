<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2848.c" pos:tabs="8"><function pos:start="1:1" pos:end="30:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">thread_pool_completion_bh</name><parameter_list pos:start="1:38" pos:end="1:51">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:44"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">opaque</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="16:22">{<block_content pos:start="3:5" pos:end="16:22">
    <decl_stmt pos:start="3:5" pos:end="3:30"><decl pos:start="3:5" pos:end="3:29"><type pos:start="3:5" pos:end="3:16"><name pos:start="3:5" pos:end="3:14">ThreadPool</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:20">pool</name> <init pos:start="3:22" pos:end="3:29">= <expr pos:start="3:24" pos:end="3:29"><name pos:start="3:24" pos:end="3:29">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:35"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:23"><name pos:start="4:5" pos:end="4:21">ThreadPoolElement</name> <modifier pos:start="4:23" pos:end="4:23">*</modifier></type><name pos:start="4:24" pos:end="4:27">elem</name></decl>, <decl pos:start="4:30" pos:end="4:34"><type ref="prev" pos:start="4:5" pos:end="4:23"><modifier pos:start="4:30" pos:end="4:30">*</modifier></type><name pos:start="4:31" pos:end="4:34">next</name></decl>;</decl_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:35"><expr pos:start="5:5" pos:end="5:34"><call pos:start="5:5" pos:end="5:34"><name pos:start="5:5" pos:end="5:23">aio_context_acquire</name><argument_list pos:start="5:24" pos:end="5:34">(<argument pos:start="5:25" pos:end="5:33"><expr pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:28">pool</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:33">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label pos:start="6:1" pos:end="6:8"><name pos:start="6:1" pos:end="6:7">restart</name>:</label>
    <macro pos:start="7:5" pos:end="7:52"><name pos:start="7:5" pos:end="7:22">QLIST_FOREACH_SAFE</name><argument_list pos:start="7:23" pos:end="7:52">(<argument pos:start="7:24" pos:end="7:27">elem</argument>, <argument pos:start="7:30" pos:end="7:40">&amp;pool-&gt;head</argument>, <argument pos:start="7:43" pos:end="7:45">all</argument>, <argument pos:start="7:48" pos:end="7:51">next</argument>)</argument_list></macro> <block pos:start="7:54" pos:end="16:22">{<block_content pos:start="8:9" pos:end="16:22">
        <if_stmt pos:start="8:9" pos:end="10:9"><if pos:start="8:9" pos:end="10:9">if <condition pos:start="8:12" pos:end="8:39">(<expr pos:start="8:13" pos:end="8:38"><name pos:start="8:13" pos:end="8:23"><name pos:start="8:13" pos:end="8:16">elem</name><operator pos:start="8:17" pos:end="8:18">-&gt;</operator><name pos:start="8:19" pos:end="8:23">state</name></name> <operator pos:start="8:25" pos:end="8:26">!=</operator> <name pos:start="8:28" pos:end="8:38">THREAD_DONE</name></expr>)</condition> <block pos:start="8:41" pos:end="10:9">{<block_content pos:start="9:13" pos:end="9:21">
            <continue pos:start="9:13" pos:end="9:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="11:9" pos:end="12:46"><expr pos:start="11:9" pos:end="12:45"><call pos:start="11:9" pos:end="12:45"><name pos:start="11:9" pos:end="11:34">trace_thread_pool_complete</name><argument_list pos:start="11:35" pos:end="12:45">(<argument pos:start="11:36" pos:end="11:39"><expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">pool</name></expr></argument>, <argument pos:start="11:42" pos:end="11:45"><expr pos:start="11:42" pos:end="11:45"><name pos:start="11:42" pos:end="11:45">elem</name></expr></argument>, <argument pos:start="11:48" pos:end="11:66"><expr pos:start="11:48" pos:end="11:66"><name pos:start="11:48" pos:end="11:66"><name pos:start="11:48" pos:end="11:51">elem</name><operator pos:start="11:52" pos:end="11:53">-&gt;</operator><name pos:start="11:54" pos:end="11:59">common</name><operator pos:start="11:60" pos:end="11:60">.</operator><name pos:start="11:61" pos:end="11:66">opaque</name></name></expr></argument>,
                                   <argument pos:start="12:36" pos:end="12:44"><expr pos:start="12:36" pos:end="12:44"><name pos:start="12:36" pos:end="12:44"><name pos:start="12:36" pos:end="12:39">elem</name><operator pos:start="12:40" pos:end="12:41">-&gt;</operator><name pos:start="12:42" pos:end="12:44">ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:32"><expr pos:start="13:9" pos:end="13:31"><call pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:20">QLIST_REMOVE</name><argument_list pos:start="13:21" pos:end="13:31">(<argument pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">elem</name></expr></argument>, <argument pos:start="13:28" pos:end="13:30"><expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="14:9" pos:end="16:22"><if pos:start="14:9" pos:end="16:22">if <condition pos:start="14:12" pos:end="14:28">(<expr pos:start="14:13" pos:end="14:27"><name pos:start="14:13" pos:end="14:27"><name pos:start="14:13" pos:end="14:16">elem</name><operator pos:start="14:17" pos:end="14:18">-&gt;</operator><name pos:start="14:19" pos:end="14:24">common</name><operator pos:start="14:25" pos:end="14:25">.</operator><name pos:start="14:26" pos:end="14:27">cb</name></name></expr>)</condition> <block pos:start="14:30" pos:end="16:22">{<block_content pos:start="16:13" pos:end="16:22">
            <comment type="block" pos:start="15:13" pos:end="15:41">/* Read state before ret.  */</comment>
            <expr_stmt pos:start="16:13" pos:end="16:22"><expr pos:start="16:13" pos:end="16:21"><call pos:start="16:13" pos:end="16:21"><name pos:start="16:13" pos:end="16:19">smp_rmb</name><argument_list pos:start="16:20" pos:end="16:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></function>
            <comment type="block">/* Schedule ourselves in case elem-&gt;common.cb() calls aio_poll() to
             * wait for another request that completed at the same time.
            qemu_bh_schedule(pool-&gt;completion_bh);
            aio_context_release(pool-&gt;ctx);
            elem-&gt;common.cb(elem-&gt;common.opaque, elem-&gt;ret);
            aio_context_acquire(pool-&gt;ctx);
            qemu_aio_unref(elem);
            goto restart;
        } else {
            qemu_aio_unref(elem);
        }
    }
    aio_context_release(pool-&gt;ctx);
}</comment></unit>
