<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8404.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:12">const</specifier> <name pos:start="1:14" pos:end="1:17">char</name> <modifier pos:start="1:19" pos:end="1:19">*</modifier></type><name pos:start="1:20" pos:end="1:35">keyval_parse_one</name><parameter_list pos:start="1:36" pos:end="5:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:41">QDict</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">qdict</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:68"><decl pos:start="1:51" pos:end="1:68"><type pos:start="1:51" pos:end="1:68"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:68">params</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:59"><decl pos:start="3:37" pos:end="3:59"><type pos:start="3:37" pos:end="3:59"><specifier pos:start="3:37" pos:end="3:41">const</specifier> <name pos:start="3:43" pos:end="3:46">char</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:59">implied_key</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:48"><decl pos:start="5:37" pos:end="5:48"><type pos:start="5:37" pos:end="5:48"><name pos:start="5:37" pos:end="5:41">Error</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier><modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="185:1">{<block_content pos:start="9:5" pos:end="183:13">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">key</name></decl>, <decl pos:start="9:22" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:29">key_end</name></decl>, <decl pos:start="9:32" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:32" pos:end="9:32">*</modifier></type><name pos:start="9:33" pos:end="9:33">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:24"><name pos:start="13:10" pos:end="13:19">key_in_cur</name><index pos:start="13:20" pos:end="13:24">[<expr pos:start="13:21" pos:end="13:23"><literal type="number" pos:start="13:21" pos:end="13:23">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">cur</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">QObject</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">QString</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:7">key</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:16">params</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:7">len</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:31"><name pos:start="25:11" pos:end="25:17">strcspn</name><argument_list pos:start="25:18" pos:end="25:31">(<argument pos:start="25:19" pos:end="25:24"><expr pos:start="25:19" pos:end="25:24"><name pos:start="25:19" pos:end="25:24">params</name></expr></argument>, <argument pos:start="25:27" pos:end="25:30"><expr pos:start="25:27" pos:end="25:30"><literal type="string" pos:start="25:27" pos:end="25:30">"=,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:46">(<expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:19">implied_key</name> <operator pos:start="27:21" pos:end="27:22">&amp;&amp;</operator> <name pos:start="27:24" pos:end="27:26">len</name> <operator pos:start="27:28" pos:end="27:29">&amp;&amp;</operator> <name pos:start="27:31" pos:end="27:38"><name pos:start="27:31" pos:end="27:33">key</name><index pos:start="27:34" pos:end="27:38">[<expr pos:start="27:35" pos:end="27:37"><name pos:start="27:35" pos:end="27:37">len</name></expr>]</index></name> <operator pos:start="27:40" pos:end="27:41">!=</operator> <literal type="char" pos:start="27:43" pos:end="27:45">'='</literal></expr>)</condition> <block pos:start="27:48" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:34">

        <comment type="block" pos:start="29:9" pos:end="29:33">/* Desugar implied key */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:26"><expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:11">key</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:25">implied_key</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:11">len</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:33"><name pos:start="33:15" pos:end="33:20">strlen</name><argument_list pos:start="33:21" pos:end="33:33">(<argument pos:start="33:22" pos:end="33:32"><expr pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:32">implied_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:11">key_end</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:17">key</name> <operator pos:start="37:19" pos:end="37:19">+</operator> <name pos:start="37:21" pos:end="37:23">len</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="47:7">/*

     * Loop over key fragments: @s points to current fragment, it

     * applies to @cur.  @key_in_cur[] holds the previous fragment.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:16"><expr pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">cur</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:15">qdict</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:12"><expr pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:5">s</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <name pos:start="51:9" pos:end="51:11">key</name></expr>;</expr_stmt>

    <for pos:start="53:5" pos:end="123:5">for <control pos:start="53:9" pos:end="53:12">(<init pos:start="53:10" pos:end="53:10">;</init><condition pos:start="53:11" pos:end="53:11">;</condition><incr/>)</control> <block pos:start="53:14" pos:end="123:5">{<block_content pos:start="55:9" pos:end="121:12">

        <for pos:start="55:9" pos:end="57:9">for <control pos:start="55:13" pos:end="55:64">(<init pos:start="55:14" pos:end="55:21"><expr pos:start="55:14" pos:end="55:20"><name pos:start="55:14" pos:end="55:16">len</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</init> <condition pos:start="55:23" pos:end="55:57"><expr pos:start="55:23" pos:end="55:56"><name pos:start="55:23" pos:end="55:23">s</name> <operator pos:start="55:25" pos:end="55:25">+</operator> <name pos:start="55:27" pos:end="55:29">len</name> <operator pos:start="55:31" pos:end="55:31">&lt;</operator> <name pos:start="55:33" pos:end="55:39">key_end</name> <operator pos:start="55:41" pos:end="55:42">&amp;&amp;</operator> <name pos:start="55:44" pos:end="55:49"><name pos:start="55:44" pos:end="55:44">s</name><index pos:start="55:45" pos:end="55:49">[<expr pos:start="55:46" pos:end="55:48"><name pos:start="55:46" pos:end="55:48">len</name></expr>]</index></name> <operator pos:start="55:51" pos:end="55:52">!=</operator> <literal type="char" pos:start="55:54" pos:end="55:56">'.'</literal></expr>;</condition> <incr pos:start="55:59" pos:end="55:63"><expr pos:start="55:59" pos:end="55:63"><name pos:start="55:59" pos:end="55:61">len</name><operator pos:start="55:62" pos:end="55:63">++</operator></expr></incr>)</control> <block pos:start="55:66" pos:end="57:9">{<block_content>

        </block_content>}</block></for>

        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">len</name></expr>)</condition> <block pos:start="59:19" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:24">

            <expr_stmt pos:start="61:13" pos:end="61:39"><expr pos:start="61:13" pos:end="61:38"><call pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:18">assert</name><argument_list pos:start="61:19" pos:end="61:38">(<argument pos:start="61:20" pos:end="61:37"><expr pos:start="61:20" pos:end="61:37"><name pos:start="61:20" pos:end="61:22">key</name> <operator pos:start="61:24" pos:end="61:25">!=</operator> <name pos:start="61:27" pos:end="61:37">implied_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="65:50"><expr pos:start="63:13" pos:end="65:49"><call pos:start="63:13" pos:end="65:49"><name pos:start="63:13" pos:end="63:22">error_setg</name><argument_list pos:start="63:23" pos:end="65:49">(<argument pos:start="63:24" pos:end="63:27"><expr pos:start="63:24" pos:end="63:27"><name pos:start="63:24" pos:end="63:27">errp</name></expr></argument>, <argument pos:start="63:30" pos:end="63:55"><expr pos:start="63:30" pos:end="63:55"><literal type="string" pos:start="63:30" pos:end="63:55">"Invalid parameter '%.*s'"</literal></expr></argument>,

                       <argument pos:start="65:24" pos:end="65:43"><expr pos:start="65:24" pos:end="65:43"><operator pos:start="65:24" pos:end="65:24">(</operator><name pos:start="65:25" pos:end="65:27">int</name><operator pos:start="65:28" pos:end="65:28">)</operator><operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:36">key_end</name> <operator pos:start="65:38" pos:end="65:38">-</operator> <name pos:start="65:40" pos:end="65:42">key</name><operator pos:start="65:43" pos:end="65:43">)</operator></expr></argument>, <argument pos:start="65:46" pos:end="65:48"><expr pos:start="65:46" pos:end="65:48"><name pos:start="65:46" pos:end="65:48">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:24">return <expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="83:9"><if pos:start="71:9" pos:end="83:9">if <condition pos:start="71:12" pos:end="71:38">(<expr pos:start="71:13" pos:end="71:37"><name pos:start="71:13" pos:end="71:15">len</name> <operator pos:start="71:17" pos:end="71:18">&gt;=</operator> <sizeof pos:start="71:20" pos:end="71:37">sizeof<argument_list pos:start="71:26" pos:end="71:37">(<argument pos:start="71:27" pos:end="71:36"><expr pos:start="71:27" pos:end="71:36"><name pos:start="71:27" pos:end="71:36">key_in_cur</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="71:40" pos:end="83:9">{<block_content pos:start="73:13" pos:end="81:24">

            <expr_stmt pos:start="73:13" pos:end="73:39"><expr pos:start="73:13" pos:end="73:38"><call pos:start="73:13" pos:end="73:38"><name pos:start="73:13" pos:end="73:18">assert</name><argument_list pos:start="73:19" pos:end="73:38">(<argument pos:start="73:20" pos:end="73:37"><expr pos:start="73:20" pos:end="73:37"><name pos:start="73:20" pos:end="73:22">key</name> <operator pos:start="73:24" pos:end="73:25">!=</operator> <name pos:start="73:27" pos:end="73:37">implied_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="79:36"><expr pos:start="75:13" pos:end="79:35"><call pos:start="75:13" pos:end="79:35"><name pos:start="75:13" pos:end="75:22">error_setg</name><argument_list pos:start="75:23" pos:end="79:35">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">errp</name></expr></argument>, <argument pos:start="75:30" pos:end="75:61"><expr pos:start="75:30" pos:end="75:61"><literal type="string" pos:start="75:30" pos:end="75:61">"Parameter%s '%.*s' is too long"</literal></expr></argument>,

                       <argument pos:start="77:24" pos:end="77:72"><expr pos:start="77:24" pos:end="77:72"><ternary pos:start="77:24" pos:end="77:72"><condition pos:start="77:24" pos:end="77:55"><expr pos:start="77:24" pos:end="77:53"><name pos:start="77:24" pos:end="77:24">s</name> <operator pos:start="77:26" pos:end="77:27">!=</operator> <name pos:start="77:29" pos:end="77:31">key</name> <operator pos:start="77:33" pos:end="77:34">||</operator> <name pos:start="77:36" pos:end="77:36">s</name> <operator pos:start="77:38" pos:end="77:38">+</operator> <name pos:start="77:40" pos:end="77:42">len</name> <operator pos:start="77:44" pos:end="77:45">!=</operator> <name pos:start="77:47" pos:end="77:53">key_end</name></expr> ?</condition><then pos:start="77:57" pos:end="77:67"> <expr pos:start="77:57" pos:end="77:67"><literal type="string" pos:start="77:57" pos:end="77:67">" fragment"</literal></expr> </then><else pos:start="77:69" pos:end="77:72">: <expr pos:start="77:71" pos:end="77:72"><literal type="string" pos:start="77:71" pos:end="77:72">""</literal></expr></else></ternary></expr></argument>,

                       <argument pos:start="79:24" pos:end="79:31"><expr pos:start="79:24" pos:end="79:31"><operator pos:start="79:24" pos:end="79:24">(</operator><name pos:start="79:25" pos:end="79:27">int</name><operator pos:start="79:28" pos:end="79:28">)</operator><name pos:start="79:29" pos:end="79:31">len</name></expr></argument>, <argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><name pos:start="79:34" pos:end="79:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:24">return <expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="103:9"><if pos:start="87:9" pos:end="103:9">if <condition pos:start="87:12" pos:end="87:21">(<expr pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:13">s</name> <operator pos:start="87:15" pos:end="87:16">!=</operator> <name pos:start="87:18" pos:end="87:20">key</name></expr>)</condition> <block pos:start="87:23" pos:end="103:9">{<block_content pos:start="89:13" pos:end="101:24">

            <expr_stmt pos:start="89:13" pos:end="91:54"><expr pos:start="89:13" pos:end="91:53"><name pos:start="89:13" pos:end="89:16">next</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="91:53"><name pos:start="89:20" pos:end="89:35">keyval_parse_put</name><argument_list pos:start="89:36" pos:end="91:53">(<argument pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:39">cur</name></expr></argument>, <argument pos:start="89:42" pos:end="89:51"><expr pos:start="89:42" pos:end="89:51"><name pos:start="89:42" pos:end="89:51">key_in_cur</name></expr></argument>, <argument pos:start="89:54" pos:end="89:57"><expr pos:start="89:54" pos:end="89:57"><name pos:start="89:54" pos:end="89:57">NULL</name></expr></argument>,

                                    <argument pos:start="91:37" pos:end="91:39"><expr pos:start="91:37" pos:end="91:39"><name pos:start="91:37" pos:end="91:39">key</name></expr></argument>, <argument pos:start="91:42" pos:end="91:46"><expr pos:start="91:42" pos:end="91:46"><name pos:start="91:42" pos:end="91:42">s</name> <operator pos:start="91:44" pos:end="91:44">-</operator> <literal type="number" pos:start="91:46" pos:end="91:46">1</literal></expr></argument>, <argument pos:start="91:49" pos:end="91:52"><expr pos:start="91:49" pos:end="91:52"><name pos:start="91:49" pos:end="91:52">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:22">(<expr pos:start="93:17" pos:end="93:21"><operator pos:start="93:17" pos:end="93:17">!</operator><name pos:start="93:18" pos:end="93:21">next</name></expr>)</condition> <block pos:start="93:24" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:28">

                <return pos:start="95:17" pos:end="95:28">return <expr pos:start="95:24" pos:end="95:27"><name pos:start="95:24" pos:end="95:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:41"><expr pos:start="99:13" pos:end="99:40"><name pos:start="99:13" pos:end="99:15">cur</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:40"><name pos:start="99:19" pos:end="99:34">qobject_to_qdict</name><argument_list pos:start="99:35" pos:end="99:40">(<argument pos:start="99:36" pos:end="99:39"><expr pos:start="99:36" pos:end="99:39"><name pos:start="99:36" pos:end="99:39">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:24"><expr pos:start="101:13" pos:end="101:23"><call pos:start="101:13" pos:end="101:23"><name pos:start="101:13" pos:end="101:18">assert</name><argument_list pos:start="101:19" pos:end="101:23">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:35"><expr pos:start="107:9" pos:end="107:34"><call pos:start="107:9" pos:end="107:34"><name pos:start="107:9" pos:end="107:14">memcpy</name><argument_list pos:start="107:15" pos:end="107:34">(<argument pos:start="107:16" pos:end="107:25"><expr pos:start="107:16" pos:end="107:25"><name pos:start="107:16" pos:end="107:25">key_in_cur</name></expr></argument>, <argument pos:start="107:28" pos:end="107:28"><expr pos:start="107:28" pos:end="107:28"><name pos:start="107:28" pos:end="107:28">s</name></expr></argument>, <argument pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:33">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:28"><expr pos:start="109:9" pos:end="109:27"><name pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:18">key_in_cur</name><index pos:start="109:19" pos:end="109:23">[<expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">len</name></expr>]</index></name> <operator pos:start="109:25" pos:end="109:25">=</operator> <literal type="number" pos:start="109:27" pos:end="109:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:17"><expr pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:9">s</name> <operator pos:start="111:11" pos:end="111:12">+=</operator> <name pos:start="111:14" pos:end="111:16">len</name></expr>;</expr_stmt>



        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:22">(<expr pos:start="115:13" pos:end="115:21"><operator pos:start="115:13" pos:end="115:13">*</operator><name pos:start="115:14" pos:end="115:14">s</name> <operator pos:start="115:16" pos:end="115:17">!=</operator> <literal type="char" pos:start="115:19" pos:end="115:21">'.'</literal></expr>)</condition> <block pos:start="115:24" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:18">

            <break pos:start="117:13" pos:end="117:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:12"><expr pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="127:5" pos:end="147:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:27">(<expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:11">key</name> <operator pos:start="127:13" pos:end="127:14">==</operator> <name pos:start="127:16" pos:end="127:26">implied_key</name></expr>)</condition> <block pos:start="127:29" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:19">

        <expr_stmt pos:start="129:9" pos:end="129:20"><expr pos:start="129:9" pos:end="129:19"><call pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:14">assert</name><argument_list pos:start="129:15" pos:end="129:19">(<argument pos:start="129:16" pos:end="129:18"><expr pos:start="129:16" pos:end="129:18"><operator pos:start="129:16" pos:end="129:16">!</operator><operator pos:start="129:17" pos:end="129:17">*</operator><name pos:start="129:18" pos:end="129:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:19"><expr pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:9">s</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <name pos:start="131:13" pos:end="131:18">params</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="147:5">else <block pos:start="133:12" pos:end="147:5">{<block_content pos:start="135:9" pos:end="145:12">

        <if_stmt pos:start="135:9" pos:end="143:9"><if pos:start="135:9" pos:end="143:9">if <condition pos:start="135:12" pos:end="135:22">(<expr pos:start="135:13" pos:end="135:21"><operator pos:start="135:13" pos:end="135:13">*</operator><name pos:start="135:14" pos:end="135:14">s</name> <operator pos:start="135:16" pos:end="135:17">!=</operator> <literal type="char" pos:start="135:19" pos:end="135:21">'='</literal></expr>)</condition> <block pos:start="135:24" pos:end="143:9">{<block_content pos:start="137:13" pos:end="141:24">

            <expr_stmt pos:start="137:13" pos:end="139:44"><expr pos:start="137:13" pos:end="139:43"><call pos:start="137:13" pos:end="139:43"><name pos:start="137:13" pos:end="137:22">error_setg</name><argument_list pos:start="137:23" pos:end="139:43">(<argument pos:start="137:24" pos:end="137:27"><expr pos:start="137:24" pos:end="137:27"><name pos:start="137:24" pos:end="137:27">errp</name></expr></argument>, <argument pos:start="137:30" pos:end="137:66"><expr pos:start="137:30" pos:end="137:66"><literal type="string" pos:start="137:30" pos:end="137:66">"Expected '=' after parameter '%.*s'"</literal></expr></argument>,

                       <argument pos:start="139:24" pos:end="139:37"><expr pos:start="139:24" pos:end="139:37"><operator pos:start="139:24" pos:end="139:24">(</operator><name pos:start="139:25" pos:end="139:27">int</name><operator pos:start="139:28" pos:end="139:28">)</operator><operator pos:start="139:29" pos:end="139:29">(</operator><name pos:start="139:30" pos:end="139:30">s</name> <operator pos:start="139:32" pos:end="139:32">-</operator> <name pos:start="139:34" pos:end="139:36">key</name><operator pos:start="139:37" pos:end="139:37">)</operator></expr></argument>, <argument pos:start="139:40" pos:end="139:42"><expr pos:start="139:40" pos:end="139:42"><name pos:start="139:40" pos:end="139:42">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="141:13" pos:end="141:24">return <expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:12"><expr pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:24"><expr pos:start="151:5" pos:end="151:23"><name pos:start="151:5" pos:end="151:7">val</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="151:23"><name pos:start="151:11" pos:end="151:21">qstring_new</name><argument_list pos:start="151:22" pos:end="151:23">()</argument_list></call></expr>;</expr_stmt>

    <for pos:start="153:5" pos:end="173:5">for <control pos:start="153:9" pos:end="153:12">(<init pos:start="153:10" pos:end="153:10">;</init><condition pos:start="153:11" pos:end="153:11">;</condition><incr/>)</control> <block pos:start="153:14" pos:end="173:5">{<block_content pos:start="155:9" pos:end="171:38">

        <if_stmt pos:start="155:9" pos:end="169:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:16">(<expr pos:start="155:13" pos:end="155:15"><operator pos:start="155:13" pos:end="155:13">!</operator><operator pos:start="155:14" pos:end="155:14">*</operator><name pos:start="155:15" pos:end="155:15">s</name></expr>)</condition> <block pos:start="155:18" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:18">

            <break pos:start="157:13" pos:end="157:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="159:11" pos:end="169:9">else if <condition pos:start="159:19" pos:end="159:29">(<expr pos:start="159:20" pos:end="159:28"><operator pos:start="159:20" pos:end="159:20">*</operator><name pos:start="159:21" pos:end="159:21">s</name> <operator pos:start="159:23" pos:end="159:24">==</operator> <literal type="char" pos:start="159:26" pos:end="159:28">','</literal></expr>)</condition> <block pos:start="159:31" pos:end="169:9">{<block_content pos:start="161:13" pos:end="167:13">

            <expr_stmt pos:start="161:13" pos:end="161:16"><expr pos:start="161:13" pos:end="161:15"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="163:13" pos:end="167:13"><if pos:start="163:13" pos:end="167:13">if <condition pos:start="163:16" pos:end="163:26">(<expr pos:start="163:17" pos:end="163:25"><operator pos:start="163:17" pos:end="163:17">*</operator><name pos:start="163:18" pos:end="163:18">s</name> <operator pos:start="163:20" pos:end="163:21">!=</operator> <literal type="char" pos:start="163:23" pos:end="163:25">','</literal></expr>)</condition> <block pos:start="163:28" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:22">

                <break pos:start="165:17" pos:end="165:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><call pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:26">qstring_append_chr</name><argument_list pos:start="171:27" pos:end="171:37">(<argument pos:start="171:28" pos:end="171:30"><expr pos:start="171:28" pos:end="171:30"><name pos:start="171:28" pos:end="171:30">val</name></expr></argument>, <argument pos:start="171:33" pos:end="171:36"><expr pos:start="171:33" pos:end="171:36"><operator pos:start="171:33" pos:end="171:33">*</operator><name pos:start="171:34" pos:end="171:34">s</name><operator pos:start="171:35" pos:end="171:36">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:68">(<expr pos:start="177:9" pos:end="177:67"><operator pos:start="177:9" pos:end="177:9">!</operator><call pos:start="177:10" pos:end="177:67"><name pos:start="177:10" pos:end="177:25">keyval_parse_put</name><argument_list pos:start="177:26" pos:end="177:67">(<argument pos:start="177:27" pos:end="177:29"><expr pos:start="177:27" pos:end="177:29"><name pos:start="177:27" pos:end="177:29">cur</name></expr></argument>, <argument pos:start="177:32" pos:end="177:41"><expr pos:start="177:32" pos:end="177:41"><name pos:start="177:32" pos:end="177:41">key_in_cur</name></expr></argument>, <argument pos:start="177:44" pos:end="177:46"><expr pos:start="177:44" pos:end="177:46"><name pos:start="177:44" pos:end="177:46">val</name></expr></argument>, <argument pos:start="177:49" pos:end="177:51"><expr pos:start="177:49" pos:end="177:51"><name pos:start="177:49" pos:end="177:51">key</name></expr></argument>, <argument pos:start="177:54" pos:end="177:60"><expr pos:start="177:54" pos:end="177:60"><name pos:start="177:54" pos:end="177:60">key_end</name></expr></argument>, <argument pos:start="177:63" pos:end="177:66"><expr pos:start="177:63" pos:end="177:66"><name pos:start="177:63" pos:end="177:66">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:70" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:20">

        <return pos:start="179:9" pos:end="179:20">return <expr pos:start="179:16" pos:end="179:19"><name pos:start="179:16" pos:end="179:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="183:5" pos:end="183:13">return <expr pos:start="183:12" pos:end="183:12"><name pos:start="183:12" pos:end="183:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
