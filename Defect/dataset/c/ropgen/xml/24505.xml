<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24505.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:27">gen_outs</name><parameter_list pos:start="1:28" pos:end="1:52">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:40">DisasContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:51"><decl pos:start="1:46" pos:end="1:51"><type pos:start="1:46" pos:end="1:51"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:51">ot</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:5">

    <expr_stmt pos:start="5:5" pos:end="5:30"><expr pos:start="5:5" pos:end="5:29"><call pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:26">gen_string_movl_A0_ESI</name><argument_list pos:start="5:27" pos:end="5:29">(<argument pos:start="5:28" pos:end="5:28"><expr pos:start="5:28" pos:end="5:28"><name pos:start="5:28" pos:end="5:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:39"><expr pos:start="7:5" pos:end="7:38"><call pos:start="7:5" pos:end="7:38"><name pos:start="7:5" pos:end="7:19">gen_op_ld_T0_A0</name><argument_list pos:start="7:20" pos:end="7:38">(<argument pos:start="7:21" pos:end="7:37"><expr pos:start="7:21" pos:end="7:37"><name pos:start="7:21" pos:end="7:22">ot</name> <operator pos:start="7:24" pos:end="7:24">+</operator> <name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:41"><expr pos:start="11:5" pos:end="11:40"><call pos:start="11:5" pos:end="11:40"><name pos:start="11:5" pos:end="11:21">gen_op_mov_TN_reg</name><argument_list pos:start="11:22" pos:end="11:40">(<argument pos:start="11:23" pos:end="11:29"><expr pos:start="11:23" pos:end="11:29"><name pos:start="11:23" pos:end="11:29">OT_WORD</name></expr></argument>, <argument pos:start="11:32" pos:end="11:32"><expr pos:start="11:32" pos:end="11:32"><literal type="number" pos:start="11:32" pos:end="11:32">1</literal></expr></argument>, <argument pos:start="11:35" pos:end="11:39"><expr pos:start="11:35" pos:end="11:39"><name pos:start="11:35" pos:end="11:39">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:49"><expr pos:start="13:5" pos:end="13:48"><call pos:start="13:5" pos:end="13:48"><name pos:start="13:5" pos:end="13:24">tcg_gen_trunc_tl_i32</name><argument_list pos:start="13:25" pos:end="13:48">(<argument pos:start="13:26" pos:end="13:37"><expr pos:start="13:26" pos:end="13:37"><name pos:start="13:26" pos:end="13:37">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="13:40" pos:end="13:47"><expr pos:start="13:40" pos:end="13:47"><name pos:start="13:40" pos:end="13:47"><name pos:start="13:40" pos:end="13:44">cpu_T</name><index pos:start="13:45" pos:end="13:47">[<expr pos:start="13:46" pos:end="13:46"><literal type="number" pos:start="13:46" pos:end="13:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:57"><expr pos:start="15:5" pos:end="15:56"><call pos:start="15:5" pos:end="15:56"><name pos:start="15:5" pos:end="15:20">tcg_gen_andi_i32</name><argument_list pos:start="15:21" pos:end="15:56">(<argument pos:start="15:22" pos:end="15:33"><expr pos:start="15:22" pos:end="15:33"><name pos:start="15:22" pos:end="15:33">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="15:36" pos:end="15:47"><expr pos:start="15:36" pos:end="15:47"><name pos:start="15:36" pos:end="15:47">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="15:50" pos:end="15:55"><expr pos:start="15:50" pos:end="15:55"><literal type="number" pos:start="15:50" pos:end="15:55">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:49"><expr pos:start="17:5" pos:end="17:48"><call pos:start="17:5" pos:end="17:48"><name pos:start="17:5" pos:end="17:24">tcg_gen_trunc_tl_i32</name><argument_list pos:start="17:25" pos:end="17:48">(<argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">cpu_tmp3_i32</name></expr></argument>, <argument pos:start="17:40" pos:end="17:47"><expr pos:start="17:40" pos:end="17:47"><name pos:start="17:40" pos:end="17:47"><name pos:start="17:40" pos:end="17:44">cpu_T</name><index pos:start="17:45" pos:end="17:47">[<expr pos:start="17:46" pos:end="17:46"><literal type="number" pos:start="17:46" pos:end="17:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:72"><expr pos:start="19:5" pos:end="19:71"><call pos:start="19:5" pos:end="19:71"><name pos:start="19:5" pos:end="19:22">tcg_gen_helper_0_2</name><argument_list pos:start="19:23" pos:end="19:71">(<argument pos:start="19:24" pos:end="19:42"><expr pos:start="19:24" pos:end="19:42"><name pos:start="19:24" pos:end="19:42"><name pos:start="19:24" pos:end="19:38">helper_out_func</name><index pos:start="19:39" pos:end="19:42">[<expr pos:start="19:40" pos:end="19:41"><name pos:start="19:40" pos:end="19:41">ot</name></expr>]</index></name></expr></argument>, <argument pos:start="19:45" pos:end="19:56"><expr pos:start="19:45" pos:end="19:56"><name pos:start="19:45" pos:end="19:56">cpu_tmp2_i32</name></expr></argument>, <argument pos:start="19:59" pos:end="19:70"><expr pos:start="19:59" pos:end="19:70"><name pos:start="19:59" pos:end="19:70">cpu_tmp3_i32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:25">gen_op_movl_T0_Dshift</name><index pos:start="23:26" pos:end="23:29">[<expr pos:start="23:27" pos:end="23:28"><name pos:start="23:27" pos:end="23:28">ot</name></expr>]</index></name><operator pos:start="23:30" pos:end="23:30">(</operator><operator pos:start="23:31" pos:end="23:31">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:20">TARGET_X86_64</name></cpp:ifdef>

    <if_stmt pos:start="27:5" pos:end="43:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:16">aflag</name></name> <operator pos:start="27:18" pos:end="27:19">==</operator> <literal type="number" pos:start="27:21" pos:end="27:21">2</literal></expr>)</condition> <block pos:start="27:24" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:29">

        <expr_stmt pos:start="29:9" pos:end="29:29"><expr pos:start="29:9" pos:end="29:28"><call pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:26">gen_op_addq_ESI_T0</name><argument_list pos:start="29:27" pos:end="29:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="39:5">else

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:16">aflag</name></name></expr>)</condition> <block pos:start="35:19" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:29">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><call pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:26">gen_op_addl_ESI_T0</name><argument_list pos:start="37:27" pos:end="37:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:29">

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><call pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:26">gen_op_addw_ESI_T0</name><argument_list pos:start="41:27" pos:end="41:28">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
