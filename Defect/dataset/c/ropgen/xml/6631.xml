<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6631.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">bdrv_qed_open</name><parameter_list pos:start="1:25" pos:end="1:57">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:56"><decl pos:start="1:48" pos:end="1:56"><type pos:start="1:48" pos:end="1:56"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:56">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVQEDState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">QEDHeader</name></type> <name pos:start="7:15" pos:end="7:23">le_header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:21">file_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:9">bs</name></name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:14">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><call pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:17">QSIMPLEQ_INIT</name><argument_list pos:start="17:18" pos:end="17:44">(<argument pos:start="17:19" pos:end="17:43"><expr pos:start="17:19" pos:end="17:43"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:43"><name pos:start="17:20" pos:end="17:20">s</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:43">allocating_write_reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:65"><expr pos:start="21:5" pos:end="21:64"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:64"><name pos:start="21:11" pos:end="21:20">bdrv_pread</name><argument_list pos:start="21:21" pos:end="21:64">(<argument pos:start="21:22" pos:end="21:29"><expr pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:23">bs</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:29">file</name></name></expr></argument>, <argument pos:start="21:32" pos:end="21:32"><expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">0</literal></expr></argument>, <argument pos:start="21:35" pos:end="21:44"><expr pos:start="21:35" pos:end="21:44"><operator pos:start="21:35" pos:end="21:35">&amp;</operator><name pos:start="21:36" pos:end="21:44">le_header</name></expr></argument>, <argument pos:start="21:47" pos:end="21:63"><expr pos:start="21:47" pos:end="21:63"><sizeof pos:start="21:47" pos:end="21:63">sizeof<argument_list pos:start="21:53" pos:end="21:63">(<argument pos:start="21:54" pos:end="21:62"><expr pos:start="21:54" pos:end="21:62"><name pos:start="21:54" pos:end="21:62">le_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:19">

        <return pos:start="25:9" pos:end="25:19">return <expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:12"><expr pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="29:14" pos:end="29:51">/* ret should always be 0 or -errno */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><call pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:24">qed_header_le_to_cpu</name><argument_list pos:start="31:25" pos:end="31:48">(<argument pos:start="31:26" pos:end="31:35"><expr pos:start="31:26" pos:end="31:35"><operator pos:start="31:26" pos:end="31:26">&amp;</operator><name pos:start="31:27" pos:end="31:35">le_header</name></expr></argument>, <argument pos:start="31:38" pos:end="31:47"><expr pos:start="31:38" pos:end="31:47"><operator pos:start="31:38" pos:end="31:38">&amp;</operator><name pos:start="31:39" pos:end="31:47"><name pos:start="31:39" pos:end="31:39">s</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:47">header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:37">(<expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">header</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:23">magic</name></name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <name pos:start="35:28" pos:end="35:36">QED_MAGIC</name></expr>)</condition> <block pos:start="35:39" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:23">

        <return pos:start="37:9" pos:end="37:23">return <expr pos:start="37:16" pos:end="37:22"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="57:5"><if pos:start="41:5" pos:end="57:5">if <condition pos:start="41:8" pos:end="41:47">(<expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">header</name><operator pos:start="41:18" pos:end="41:18">.</operator><name pos:start="41:19" pos:end="41:26">features</name></name> <operator pos:start="41:28" pos:end="41:28">&amp;</operator> <operator pos:start="41:30" pos:end="41:30">~</operator><name pos:start="41:31" pos:end="41:46">QED_FEATURE_MASK</name></expr>)</condition> <block pos:start="41:49" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:24">

        <comment type="block" pos:start="43:9" pos:end="43:49">/* image uses unsupported feature bits */</comment>

        <decl_stmt pos:start="45:9" pos:end="45:21"><decl pos:start="45:9" pos:end="45:20"><type pos:start="45:9" pos:end="45:12"><name pos:start="45:9" pos:end="45:12">char</name></type> <name pos:start="45:14" pos:end="45:20"><name pos:start="45:14" pos:end="45:16">buf</name><index pos:start="45:17" pos:end="45:20">[<expr pos:start="45:18" pos:end="45:19"><literal type="number" pos:start="45:18" pos:end="45:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:52"><expr pos:start="47:9" pos:end="49:51"><call pos:start="47:9" pos:end="49:51"><name pos:start="47:9" pos:end="47:16">snprintf</name><argument_list pos:start="47:17" pos:end="49:51">(<argument pos:start="47:18" pos:end="47:20"><expr pos:start="47:18" pos:end="47:20"><name pos:start="47:18" pos:end="47:20">buf</name></expr></argument>, <argument pos:start="47:23" pos:end="47:33"><expr pos:start="47:23" pos:end="47:33"><sizeof pos:start="47:23" pos:end="47:33">sizeof<argument_list pos:start="47:29" pos:end="47:33">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:36" pos:end="47:45"><expr pos:start="47:36" pos:end="47:45"><literal type="string" pos:start="47:36" pos:end="47:38">"%"</literal> <name pos:start="47:40" pos:end="47:45">PRIx64</name></expr></argument>,

            <argument pos:start="49:13" pos:end="49:50"><expr pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:21">header</name><operator pos:start="49:22" pos:end="49:22">.</operator><name pos:start="49:23" pos:end="49:30">features</name></name> <operator pos:start="49:32" pos:end="49:32">&amp;</operator> <operator pos:start="49:34" pos:end="49:34">~</operator><name pos:start="49:35" pos:end="49:50">QED_FEATURE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:41"><expr pos:start="51:9" pos:end="53:40"><call pos:start="51:9" pos:end="53:40"><name pos:start="51:9" pos:end="51:21">qerror_report</name><argument_list pos:start="51:22" pos:end="53:40">(<argument pos:start="51:23" pos:end="51:55"><expr pos:start="51:23" pos:end="51:55"><name pos:start="51:23" pos:end="51:55">QERR_UNKNOWN_BLOCK_FORMAT_FEATURE</name></expr></argument>,

            <argument pos:start="53:13" pos:end="53:27"><expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:14">bs</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:27">device_name</name></name></expr></argument>, <argument pos:start="53:30" pos:end="53:34"><expr pos:start="53:30" pos:end="53:34"><literal type="string" pos:start="53:30" pos:end="53:34">"QED"</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><name pos:start="53:37" pos:end="53:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:24">return <expr pos:start="55:16" pos:end="55:23"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:59">(<expr pos:start="59:9" pos:end="59:58"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:58"><name pos:start="59:10" pos:end="59:34">qed_is_cluster_size_valid</name><argument_list pos:start="59:35" pos:end="59:58">(<argument pos:start="59:36" pos:end="59:57"><expr pos:start="59:36" pos:end="59:57"><name pos:start="59:36" pos:end="59:57"><name pos:start="59:36" pos:end="59:36">s</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:44">header</name><operator pos:start="59:45" pos:end="59:45">.</operator><name pos:start="59:46" pos:end="59:57">cluster_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:61" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:23">

        <return pos:start="61:9" pos:end="61:23">return <expr pos:start="61:16" pos:end="61:22"><operator pos:start="61:16" pos:end="61:16">-</operator><name pos:start="61:17" pos:end="61:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:50">/* Round down file size to the last cluster */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:13">file_size</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <call pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:30">bdrv_getlength</name><argument_list pos:start="69:31" pos:end="69:40">(<argument pos:start="69:32" pos:end="69:39"><expr pos:start="69:32" pos:end="69:39"><name pos:start="69:32" pos:end="69:39"><name pos:start="69:32" pos:end="69:33">bs</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:39">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:22">(<expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:17">file_size</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr>)</condition> <block pos:start="71:24" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:25">

        <return pos:start="73:9" pos:end="73:25">return <expr pos:start="73:16" pos:end="73:24"><name pos:start="73:16" pos:end="73:24">file_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:54"><expr pos:start="77:5" pos:end="77:53"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:16">file_size</name></name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:53"><name pos:start="77:20" pos:end="77:39">qed_start_of_cluster</name><argument_list pos:start="77:40" pos:end="77:53">(<argument pos:start="77:41" pos:end="77:41"><expr pos:start="77:41" pos:end="77:41"><name pos:start="77:41" pos:end="77:41">s</name></expr></argument>, <argument pos:start="77:44" pos:end="77:52"><expr pos:start="77:44" pos:end="77:52"><name pos:start="77:44" pos:end="77:52">file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:55">(<expr pos:start="81:9" pos:end="81:54"><operator pos:start="81:9" pos:end="81:9">!</operator><call pos:start="81:10" pos:end="81:54"><name pos:start="81:10" pos:end="81:32">qed_is_table_size_valid</name><argument_list pos:start="81:33" pos:end="81:54">(<argument pos:start="81:34" pos:end="81:53"><expr pos:start="81:34" pos:end="81:53"><name pos:start="81:34" pos:end="81:53"><name pos:start="81:34" pos:end="81:34">s</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:42">header</name><operator pos:start="81:43" pos:end="81:43">.</operator><name pos:start="81:44" pos:end="81:53">table_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:57" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:23">

        <return pos:start="83:9" pos:end="83:23">return <expr pos:start="83:16" pos:end="83:22"><operator pos:start="83:16" pos:end="83:16">-</operator><name pos:start="83:17" pos:end="83:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="91:55">(<expr pos:start="87:9" pos:end="91:54"><operator pos:start="87:9" pos:end="87:9">!</operator><call pos:start="87:10" pos:end="91:54"><name pos:start="87:10" pos:end="87:32">qed_is_image_size_valid</name><argument_list pos:start="87:33" pos:end="91:54">(<argument pos:start="87:34" pos:end="87:53"><expr pos:start="87:34" pos:end="87:53"><name pos:start="87:34" pos:end="87:53"><name pos:start="87:34" pos:end="87:34">s</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:42">header</name><operator pos:start="87:43" pos:end="87:43">.</operator><name pos:start="87:44" pos:end="87:53">image_size</name></name></expr></argument>,

                                 <argument pos:start="89:34" pos:end="89:55"><expr pos:start="89:34" pos:end="89:55"><name pos:start="89:34" pos:end="89:55"><name pos:start="89:34" pos:end="89:34">s</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:42">header</name><operator pos:start="89:43" pos:end="89:43">.</operator><name pos:start="89:44" pos:end="89:55">cluster_size</name></name></expr></argument>,

                                 <argument pos:start="91:34" pos:end="91:53"><expr pos:start="91:34" pos:end="91:53"><name pos:start="91:34" pos:end="91:53"><name pos:start="91:34" pos:end="91:34">s</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:42">header</name><operator pos:start="91:43" pos:end="91:43">.</operator><name pos:start="91:44" pos:end="91:53">table_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:57" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:23">

        <return pos:start="93:9" pos:end="93:23">return <expr pos:start="93:16" pos:end="93:22"><operator pos:start="93:16" pos:end="93:16">-</operator><name pos:start="93:17" pos:end="93:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:62">(<expr pos:start="97:9" pos:end="97:61"><operator pos:start="97:9" pos:end="97:9">!</operator><call pos:start="97:10" pos:end="97:61"><name pos:start="97:10" pos:end="97:31">qed_check_table_offset</name><argument_list pos:start="97:32" pos:end="97:61">(<argument pos:start="97:33" pos:end="97:33"><expr pos:start="97:33" pos:end="97:33"><name pos:start="97:33" pos:end="97:33">s</name></expr></argument>, <argument pos:start="97:36" pos:end="97:60"><expr pos:start="97:36" pos:end="97:60"><name pos:start="97:36" pos:end="97:60"><name pos:start="97:36" pos:end="97:36">s</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:44">header</name><operator pos:start="97:45" pos:end="97:45">.</operator><name pos:start="97:46" pos:end="97:60">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:64" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:23">

        <return pos:start="99:9" pos:end="99:23">return <expr pos:start="99:16" pos:end="99:22"><operator pos:start="99:16" pos:end="99:16">-</operator><name pos:start="99:17" pos:end="99:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="107:39"><expr pos:start="105:5" pos:end="107:38"><name pos:start="105:5" pos:end="105:19"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:19">table_nelems</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <operator pos:start="105:23" pos:end="105:23">(</operator><name pos:start="105:24" pos:end="105:45"><name pos:start="105:24" pos:end="105:24">s</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:32">header</name><operator pos:start="105:33" pos:end="105:33">.</operator><name pos:start="105:34" pos:end="105:45">cluster_size</name></name> <operator pos:start="105:47" pos:end="105:47">*</operator> <name pos:start="105:49" pos:end="105:68"><name pos:start="105:49" pos:end="105:49">s</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:57">header</name><operator pos:start="105:58" pos:end="105:58">.</operator><name pos:start="105:59" pos:end="105:68">table_size</name></name><operator pos:start="105:69" pos:end="105:69">)</operator> <operator pos:start="105:71" pos:end="105:71">/</operator>

                      <sizeof pos:start="107:23" pos:end="107:38">sizeof<argument_list pos:start="107:29" pos:end="107:38">(<argument pos:start="107:30" pos:end="107:37"><expr pos:start="107:30" pos:end="107:37"><name pos:start="107:30" pos:end="107:37">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:50"><expr pos:start="109:5" pos:end="109:49"><name pos:start="109:5" pos:end="109:15"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:15">l2_shift</name></name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:45"><name pos:start="109:19" pos:end="109:21">ffs</name><argument_list pos:start="109:22" pos:end="109:45">(<argument pos:start="109:23" pos:end="109:44"><expr pos:start="109:23" pos:end="109:44"><name pos:start="109:23" pos:end="109:44"><name pos:start="109:23" pos:end="109:23">s</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:31">header</name><operator pos:start="109:32" pos:end="109:32">.</operator><name pos:start="109:33" pos:end="109:44">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="109:47" pos:end="109:47">-</operator> <literal type="number" pos:start="109:49" pos:end="109:49">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:37"><expr pos:start="111:5" pos:end="111:36"><name pos:start="111:5" pos:end="111:14"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:14">l2_mask</name></name> <operator pos:start="111:16" pos:end="111:16">=</operator> <name pos:start="111:18" pos:end="111:32"><name pos:start="111:18" pos:end="111:18">s</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:32">table_nelems</name></name> <operator pos:start="111:34" pos:end="111:34">-</operator> <literal type="number" pos:start="111:36" pos:end="111:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:57"><expr pos:start="113:5" pos:end="113:56"><name pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:15">l1_shift</name></name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:29"><name pos:start="113:19" pos:end="113:19">s</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:29">l2_shift</name></name> <operator pos:start="113:31" pos:end="113:31">+</operator> <call pos:start="113:33" pos:end="113:52"><name pos:start="113:33" pos:end="113:35">ffs</name><argument_list pos:start="113:36" pos:end="113:52">(<argument pos:start="113:37" pos:end="113:51"><expr pos:start="113:37" pos:end="113:51"><name pos:start="113:37" pos:end="113:51"><name pos:start="113:37" pos:end="113:37">s</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:51">table_nelems</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:54" pos:end="113:54">-</operator> <literal type="number" pos:start="113:56" pos:end="113:56">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="151:5"><if pos:start="117:5" pos:end="151:5">if <condition pos:start="117:8" pos:end="117:50">(<expr pos:start="117:9" pos:end="117:49"><operator pos:start="117:9" pos:end="117:9">(</operator><name pos:start="117:10" pos:end="117:27"><name pos:start="117:10" pos:end="117:10">s</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:18">header</name><operator pos:start="117:19" pos:end="117:19">.</operator><name pos:start="117:20" pos:end="117:27">features</name></name> <operator pos:start="117:29" pos:end="117:29">&amp;</operator> <name pos:start="117:31" pos:end="117:48">QED_F_BACKING_FILE</name><operator pos:start="117:49" pos:end="117:49">)</operator></expr>)</condition> <block pos:start="117:52" pos:end="151:5">{<block_content pos:start="119:9" pos:end="149:9">

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="123:59">(<expr pos:start="119:13" pos:end="123:58"><operator pos:start="119:13" pos:end="119:13">(</operator><name pos:start="119:14" pos:end="119:21">uint64_t</name><operator pos:start="119:22" pos:end="119:22">)</operator><name pos:start="119:23" pos:end="119:55"><name pos:start="119:23" pos:end="119:23">s</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:31">header</name><operator pos:start="119:32" pos:end="119:32">.</operator><name pos:start="119:33" pos:end="119:55">backing_filename_offset</name></name> <operator pos:start="119:57" pos:end="119:57">+</operator>

            <name pos:start="121:13" pos:end="121:43"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:21">header</name><operator pos:start="121:22" pos:end="121:22">.</operator><name pos:start="121:23" pos:end="121:43">backing_filename_size</name></name> <operator pos:start="121:45" pos:end="121:45">&gt;</operator>

            <name pos:start="123:13" pos:end="123:34"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:21">header</name><operator pos:start="123:22" pos:end="123:22">.</operator><name pos:start="123:23" pos:end="123:34">cluster_size</name></name> <operator pos:start="123:36" pos:end="123:36">*</operator> <name pos:start="123:38" pos:end="123:58"><name pos:start="123:38" pos:end="123:38">s</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:46">header</name><operator pos:start="123:47" pos:end="123:47">.</operator><name pos:start="123:48" pos:end="123:58">header_size</name></name></expr>)</condition> <block pos:start="123:61" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:27">

            <return pos:start="125:13" pos:end="125:27">return <expr pos:start="125:20" pos:end="125:26"><operator pos:start="125:20" pos:end="125:20">-</operator><name pos:start="125:21" pos:end="125:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="131:9" pos:end="135:56"><expr pos:start="131:9" pos:end="135:55"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="135:55"><name pos:start="131:15" pos:end="131:29">qed_read_string</name><argument_list pos:start="131:30" pos:end="135:55">(<argument pos:start="131:31" pos:end="131:38"><expr pos:start="131:31" pos:end="131:38"><name pos:start="131:31" pos:end="131:38"><name pos:start="131:31" pos:end="131:32">bs</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:38">file</name></name></expr></argument>, <argument pos:start="131:41" pos:end="131:73"><expr pos:start="131:41" pos:end="131:73"><name pos:start="131:41" pos:end="131:73"><name pos:start="131:41" pos:end="131:41">s</name><operator pos:start="131:42" pos:end="131:43">-&gt;</operator><name pos:start="131:44" pos:end="131:49">header</name><operator pos:start="131:50" pos:end="131:50">.</operator><name pos:start="131:51" pos:end="131:73">backing_filename_offset</name></name></expr></argument>,

                              <argument pos:start="133:31" pos:end="133:61"><expr pos:start="133:31" pos:end="133:61"><name pos:start="133:31" pos:end="133:61"><name pos:start="133:31" pos:end="133:31">s</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:39">header</name><operator pos:start="133:40" pos:end="133:40">.</operator><name pos:start="133:41" pos:end="133:61">backing_filename_size</name></name></expr></argument>, <argument pos:start="133:64" pos:end="133:79"><expr pos:start="133:64" pos:end="133:79"><name pos:start="133:64" pos:end="133:79"><name pos:start="133:64" pos:end="133:65">bs</name><operator pos:start="133:66" pos:end="133:67">-&gt;</operator><name pos:start="133:68" pos:end="133:79">backing_file</name></name></expr></argument>,

                              <argument pos:start="135:31" pos:end="135:54"><expr pos:start="135:31" pos:end="135:54"><sizeof pos:start="135:31" pos:end="135:54">sizeof<argument_list pos:start="135:37" pos:end="135:54">(<argument pos:start="135:38" pos:end="135:53"><expr pos:start="135:38" pos:end="135:53"><name pos:start="135:38" pos:end="135:53"><name pos:start="135:38" pos:end="135:39">bs</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:53">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:20">(<expr pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">&lt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>)</condition> <block pos:start="137:22" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:23">

            <return pos:start="139:13" pos:end="139:23">return <expr pos:start="139:20" pos:end="139:22"><name pos:start="139:20" pos:end="139:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:63">(<expr pos:start="145:13" pos:end="145:62"><name pos:start="145:13" pos:end="145:30"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:21">header</name><operator pos:start="145:22" pos:end="145:22">.</operator><name pos:start="145:23" pos:end="145:30">features</name></name> <operator pos:start="145:32" pos:end="145:32">&amp;</operator> <name pos:start="145:34" pos:end="145:62">QED_F_BACKING_FORMAT_NO_PROBE</name></expr>)</condition> <block pos:start="145:65" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:75">

            <expr_stmt pos:start="147:13" pos:end="147:75"><expr pos:start="147:13" pos:end="147:74"><call pos:start="147:13" pos:end="147:74"><name pos:start="147:13" pos:end="147:19">pstrcpy</name><argument_list pos:start="147:20" pos:end="147:74">(<argument pos:start="147:21" pos:end="147:38"><expr pos:start="147:21" pos:end="147:38"><name pos:start="147:21" pos:end="147:38"><name pos:start="147:21" pos:end="147:22">bs</name><operator pos:start="147:23" pos:end="147:24">-&gt;</operator><name pos:start="147:25" pos:end="147:38">backing_format</name></name></expr></argument>, <argument pos:start="147:41" pos:end="147:66"><expr pos:start="147:41" pos:end="147:66"><sizeof pos:start="147:41" pos:end="147:66">sizeof<argument_list pos:start="147:47" pos:end="147:66">(<argument pos:start="147:48" pos:end="147:65"><expr pos:start="147:48" pos:end="147:65"><name pos:start="147:48" pos:end="147:65"><name pos:start="147:48" pos:end="147:49">bs</name><operator pos:start="147:50" pos:end="147:51">-&gt;</operator><name pos:start="147:52" pos:end="147:65">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="147:69" pos:end="147:73"><expr pos:start="147:69" pos:end="147:73"><literal type="string" pos:start="147:69" pos:end="147:73">"raw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="165:7">/* Reset unknown autoclear feature bits.  This is a backwards

     * compatibility mechanism that allows images to be opened by older

     * programs, which "knock out" unknown feature bits.  When an image is

     * opened by a newer program again it can detect that the autoclear

     * feature is no longer valid.

     */</comment>

    <if_stmt pos:start="167:5" pos:end="189:5"><if pos:start="167:5" pos:end="189:5">if <condition pos:start="167:8" pos:end="169:37">(<expr pos:start="167:9" pos:end="169:36"><operator pos:start="167:9" pos:end="167:9">(</operator><name pos:start="167:10" pos:end="167:37"><name pos:start="167:10" pos:end="167:10">s</name><operator pos:start="167:11" pos:end="167:12">-&gt;</operator><name pos:start="167:13" pos:end="167:18">header</name><operator pos:start="167:19" pos:end="167:19">.</operator><name pos:start="167:20" pos:end="167:37">autoclear_features</name></name> <operator pos:start="167:39" pos:end="167:39">&amp;</operator> <operator pos:start="167:41" pos:end="167:41">~</operator><name pos:start="167:42" pos:end="167:67">QED_AUTOCLEAR_FEATURE_MASK</name><operator pos:start="167:68" pos:end="167:68">)</operator> <operator pos:start="167:70" pos:end="167:71">!=</operator> <literal type="number" pos:start="167:73" pos:end="167:73">0</literal> <operator pos:start="167:75" pos:end="167:76">&amp;&amp;</operator>

        <operator pos:start="169:9" pos:end="169:9">!</operator><call pos:start="169:10" pos:end="169:36"><name pos:start="169:10" pos:end="169:26">bdrv_is_read_only</name><argument_list pos:start="169:27" pos:end="169:36">(<argument pos:start="169:28" pos:end="169:35"><expr pos:start="169:28" pos:end="169:35"><name pos:start="169:28" pos:end="169:35"><name pos:start="169:28" pos:end="169:29">bs</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:35">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="169:39" pos:end="189:5">{<block_content pos:start="171:9" pos:end="187:29">

        <expr_stmt pos:start="171:9" pos:end="171:67"><expr pos:start="171:9" pos:end="171:66"><name pos:start="171:9" pos:end="171:36"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:17">header</name><operator pos:start="171:18" pos:end="171:18">.</operator><name pos:start="171:19" pos:end="171:36">autoclear_features</name></name> <operator pos:start="171:38" pos:end="171:39">&amp;=</operator> <name pos:start="171:41" pos:end="171:66">QED_AUTOCLEAR_FEATURE_MASK</name></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:39"><expr pos:start="175:9" pos:end="175:38"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:38"><name pos:start="175:15" pos:end="175:35">qed_write_header_sync</name><argument_list pos:start="175:36" pos:end="175:38">(<argument pos:start="175:37" pos:end="175:37"><expr pos:start="175:37" pos:end="175:37"><name pos:start="175:37" pos:end="175:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="181:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:16">(<expr pos:start="177:13" pos:end="177:15"><name pos:start="177:13" pos:end="177:15">ret</name></expr>)</condition> <block pos:start="177:18" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:23">

            <return pos:start="179:13" pos:end="179:23">return <expr pos:start="179:20" pos:end="179:22"><name pos:start="179:20" pos:end="179:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="185:9" pos:end="185:70">/* From here on only known autoclear feature bits are valid */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><call pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:18">bdrv_flush</name><argument_list pos:start="187:19" pos:end="187:28">(<argument pos:start="187:20" pos:end="187:27"><expr pos:start="187:20" pos:end="187:27"><name pos:start="187:20" pos:end="187:27"><name pos:start="187:20" pos:end="187:21">bs</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:27">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:37"><expr pos:start="193:5" pos:end="193:36"><name pos:start="193:5" pos:end="193:15"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:15">l1_table</name></name> <operator pos:start="193:17" pos:end="193:17">=</operator> <call pos:start="193:19" pos:end="193:36"><name pos:start="193:19" pos:end="193:33">qed_alloc_table</name><argument_list pos:start="193:34" pos:end="193:36">(<argument pos:start="193:35" pos:end="193:35"><expr pos:start="193:35" pos:end="193:35"><name pos:start="193:35" pos:end="193:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:36"><expr pos:start="195:5" pos:end="195:35"><call pos:start="195:5" pos:end="195:35"><name pos:start="195:5" pos:end="195:21">qed_init_l2_cache</name><argument_list pos:start="195:22" pos:end="195:35">(<argument pos:start="195:23" pos:end="195:34"><expr pos:start="195:23" pos:end="195:34"><operator pos:start="195:23" pos:end="195:23">&amp;</operator><name pos:start="195:24" pos:end="195:34"><name pos:start="195:24" pos:end="195:24">s</name><operator pos:start="195:25" pos:end="195:26">-&gt;</operator><name pos:start="195:27" pos:end="195:34">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:36"><expr pos:start="199:5" pos:end="199:35"><name pos:start="199:5" pos:end="199:7">ret</name> <operator pos:start="199:9" pos:end="199:9">=</operator> <call pos:start="199:11" pos:end="199:35"><name pos:start="199:11" pos:end="199:32">qed_read_l1_table_sync</name><argument_list pos:start="199:33" pos:end="199:35">(<argument pos:start="199:34" pos:end="199:34"><expr pos:start="199:34" pos:end="199:34"><name pos:start="199:34" pos:end="199:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="201:5" pos:end="205:5"><if pos:start="201:5" pos:end="205:5">if <condition pos:start="201:8" pos:end="201:12">(<expr pos:start="201:9" pos:end="201:11"><name pos:start="201:9" pos:end="201:11">ret</name></expr>)</condition> <block pos:start="201:14" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:17">

        <goto pos:start="203:9" pos:end="203:17">goto <name pos:start="203:14" pos:end="203:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:60">/* If image was not closed cleanly, check consistency */</comment>

    <if_stmt pos:start="211:5" pos:end="247:5"><if pos:start="211:5" pos:end="247:5">if <condition pos:start="211:8" pos:end="211:46">(<expr pos:start="211:9" pos:end="211:45"><name pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:17">header</name><operator pos:start="211:18" pos:end="211:18">.</operator><name pos:start="211:19" pos:end="211:26">features</name></name> <operator pos:start="211:28" pos:end="211:28">&amp;</operator> <name pos:start="211:30" pos:end="211:45">QED_F_NEED_CHECK</name></expr>)</condition> <block pos:start="211:48" pos:end="247:5">{<block_content pos:start="223:9" pos:end="245:9">

        <comment type="block" pos:start="213:9" pos:end="221:11">/* Read-only images cannot be fixed.  There is no risk of corruption

         * since write operations are not possible.  Therefore, allow

         * potentially inconsistent images to be opened read-only.  This can

         * aid data recovery from an otherwise inconsistent image.

         */</comment>

        <if_stmt pos:start="223:9" pos:end="245:9"><if pos:start="223:9" pos:end="245:9">if <condition pos:start="223:12" pos:end="223:41">(<expr pos:start="223:13" pos:end="223:40"><operator pos:start="223:13" pos:end="223:13">!</operator><call pos:start="223:14" pos:end="223:40"><name pos:start="223:14" pos:end="223:30">bdrv_is_read_only</name><argument_list pos:start="223:31" pos:end="223:40">(<argument pos:start="223:32" pos:end="223:39"><expr pos:start="223:32" pos:end="223:39"><name pos:start="223:32" pos:end="223:39"><name pos:start="223:32" pos:end="223:33">bs</name><operator pos:start="223:34" pos:end="223:35">-&gt;</operator><name pos:start="223:36" pos:end="223:39">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:43" pos:end="245:9">{<block_content pos:start="225:13" pos:end="243:13">

            <decl_stmt pos:start="225:13" pos:end="225:41"><decl pos:start="225:13" pos:end="225:40"><type pos:start="225:13" pos:end="225:27"><name pos:start="225:13" pos:end="225:27">BdrvCheckResult</name></type> <name pos:start="225:29" pos:end="225:34">result</name> <init pos:start="225:36" pos:end="225:40">= <expr pos:start="225:38" pos:end="225:40"><block pos:start="225:38" pos:end="225:40">{<expr pos:start="225:39" pos:end="225:39"><literal type="number" pos:start="225:39" pos:end="225:39">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:46"><expr pos:start="229:13" pos:end="229:45"><name pos:start="229:13" pos:end="229:15">ret</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:45"><name pos:start="229:19" pos:end="229:27">qed_check</name><argument_list pos:start="229:28" pos:end="229:45">(<argument pos:start="229:29" pos:end="229:29"><expr pos:start="229:29" pos:end="229:29"><name pos:start="229:29" pos:end="229:29">s</name></expr></argument>, <argument pos:start="229:32" pos:end="229:38"><expr pos:start="229:32" pos:end="229:38"><operator pos:start="229:32" pos:end="229:32">&amp;</operator><name pos:start="229:33" pos:end="229:38">result</name></expr></argument>, <argument pos:start="229:41" pos:end="229:44"><expr pos:start="229:41" pos:end="229:44"><name pos:start="229:41" pos:end="229:44">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="243:13"><if pos:start="231:13" pos:end="243:13">if <condition pos:start="231:16" pos:end="231:68">(<expr pos:start="231:17" pos:end="231:67"><operator pos:start="231:17" pos:end="231:17">!</operator><name pos:start="231:18" pos:end="231:20">ret</name> <operator pos:start="231:22" pos:end="231:23">&amp;&amp;</operator> <operator pos:start="231:25" pos:end="231:25">!</operator><name pos:start="231:26" pos:end="231:43"><name pos:start="231:26" pos:end="231:31">result</name><operator pos:start="231:32" pos:end="231:32">.</operator><name pos:start="231:33" pos:end="231:43">corruptions</name></name> <operator pos:start="231:45" pos:end="231:46">&amp;&amp;</operator> <operator pos:start="231:48" pos:end="231:48">!</operator><name pos:start="231:49" pos:end="231:67"><name pos:start="231:49" pos:end="231:54">result</name><operator pos:start="231:55" pos:end="231:55">.</operator><name pos:start="231:56" pos:end="231:67">check_errors</name></name></expr>)</condition> <block pos:start="231:70" pos:end="243:13">{<block_content pos:start="235:17" pos:end="241:41">

                <comment type="block" pos:start="233:17" pos:end="233:74">/* Ensure fixes reach storage before clearing check bit */</comment>

                <expr_stmt pos:start="235:17" pos:end="235:34"><expr pos:start="235:17" pos:end="235:33"><call pos:start="235:17" pos:end="235:33"><name pos:start="235:17" pos:end="235:26">bdrv_flush</name><argument_list pos:start="235:27" pos:end="235:33">(<argument pos:start="235:28" pos:end="235:32"><expr pos:start="235:28" pos:end="235:32"><name pos:start="235:28" pos:end="235:32"><name pos:start="235:28" pos:end="235:28">s</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:32">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="239:17" pos:end="239:56"><expr pos:start="239:17" pos:end="239:55"><name pos:start="239:17" pos:end="239:34"><name pos:start="239:17" pos:end="239:17">s</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:25">header</name><operator pos:start="239:26" pos:end="239:26">.</operator><name pos:start="239:27" pos:end="239:34">features</name></name> <operator pos:start="239:36" pos:end="239:37">&amp;=</operator> <operator pos:start="239:39" pos:end="239:39">~</operator><name pos:start="239:40" pos:end="239:55">QED_F_NEED_CHECK</name></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:41"><expr pos:start="241:17" pos:end="241:40"><call pos:start="241:17" pos:end="241:40"><name pos:start="241:17" pos:end="241:37">qed_write_header_sync</name><argument_list pos:start="241:38" pos:end="241:40">(<argument pos:start="241:39" pos:end="241:39"><expr pos:start="241:39" pos:end="241:39"><name pos:start="241:39" pos:end="241:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="251:1" pos:end="251:4"><name pos:start="251:1" pos:end="251:3">out</name>:</label>

    <if_stmt pos:start="253:5" pos:end="259:5"><if pos:start="253:5" pos:end="259:5">if <condition pos:start="253:8" pos:end="253:12">(<expr pos:start="253:9" pos:end="253:11"><name pos:start="253:9" pos:end="253:11">ret</name></expr>)</condition> <block pos:start="253:14" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:32">

        <expr_stmt pos:start="255:9" pos:end="255:40"><expr pos:start="255:9" pos:end="255:39"><call pos:start="255:9" pos:end="255:39"><name pos:start="255:9" pos:end="255:25">qed_free_l2_cache</name><argument_list pos:start="255:26" pos:end="255:39">(<argument pos:start="255:27" pos:end="255:38"><expr pos:start="255:27" pos:end="255:38"><operator pos:start="255:27" pos:end="255:27">&amp;</operator><name pos:start="255:28" pos:end="255:38"><name pos:start="255:28" pos:end="255:28">s</name><operator pos:start="255:29" pos:end="255:30">-&gt;</operator><name pos:start="255:31" pos:end="255:38">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:32"><expr pos:start="257:9" pos:end="257:31"><call pos:start="257:9" pos:end="257:31"><name pos:start="257:9" pos:end="257:18">qemu_vfree</name><argument_list pos:start="257:19" pos:end="257:31">(<argument pos:start="257:20" pos:end="257:30"><expr pos:start="257:20" pos:end="257:30"><name pos:start="257:20" pos:end="257:30"><name pos:start="257:20" pos:end="257:20">s</name><operator pos:start="257:21" pos:end="257:22">-&gt;</operator><name pos:start="257:23" pos:end="257:30">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="261:5" pos:end="261:15">return <expr pos:start="261:12" pos:end="261:14"><name pos:start="261:12" pos:end="261:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
