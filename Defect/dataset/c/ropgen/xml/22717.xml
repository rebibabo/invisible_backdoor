<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22717.c" pos:tabs="8"><function pos:start="1:1" pos:end="371:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">aac_decode_frame_int</name><parameter_list pos:start="1:32" pos:end="3:87">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:50">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:69"><decl pos:start="3:53" pos:end="3:69"><type pos:start="3:53" pos:end="3:69"><name pos:start="3:53" pos:end="3:65">GetBitContext</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:69">gb</name></decl></parameter>, <parameter pos:start="3:72" pos:end="3:86"><decl pos:start="3:72" pos:end="3:86"><type pos:start="3:72" pos:end="3:86"><name pos:start="3:72" pos:end="3:79">AVPacket</name> <modifier pos:start="3:81" pos:end="3:81">*</modifier></type><name pos:start="3:82" pos:end="3:86">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="371:1">{<block_content pos:start="7:5" pos:end="369:15">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AACContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">ac</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">ChannelElement</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">che</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">NULL</name></expr></init></decl>, <decl pos:start="9:33" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:41">che_prev</name> <init pos:start="9:43" pos:end="9:48">= <expr pos:start="9:45" pos:end="9:48"><name pos:start="9:45" pos:end="9:48">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:62"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:8">enum</name> <name pos:start="11:10" pos:end="11:25">RawDataBlockType</name></name></type> <name pos:start="11:27" pos:end="11:35">elem_type</name></decl>, <decl pos:start="11:38" pos:end="11:61"><type ref="prev" pos:start="11:5" pos:end="11:25"/><name pos:start="11:38" pos:end="11:50">che_prev_type</name> <init pos:start="11:52" pos:end="11:61">= <expr pos:start="11:54" pos:end="11:61"><name pos:start="11:54" pos:end="11:61">TYPE_END</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">err</name></decl>, <decl pos:start="13:14" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:20">elem_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:64"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">samples</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></init></decl>, <decl pos:start="15:22" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:31">multiplier</name></decl>, <decl pos:start="15:34" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:44">audio_found</name> <init pos:start="15:46" pos:end="15:48">= <expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr></init></decl>, <decl pos:start="15:51" pos:end="15:63"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:51" pos:end="15:59">pce_found</name> <init pos:start="15:61" pos:end="15:63">= <expr pos:start="15:63" pos:end="15:63"><literal type="number" pos:start="15:63" pos:end="15:63">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">is_dmono</name></decl>, <decl pos:start="17:19" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:19" pos:end="17:27">sce_count</name> <init pos:start="17:29" pos:end="17:31">= <expr pos:start="17:31" pos:end="17:31"><literal type="number" pos:start="17:31" pos:end="17:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:25">payload_alignment</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:6">ac</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:13">frame</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:20">data</name></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="47:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><call pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:17">show_bits</name><argument_list pos:start="27:18" pos:end="27:25">(<argument pos:start="27:19" pos:end="27:20"><expr pos:start="27:19" pos:end="27:20"><name pos:start="27:19" pos:end="27:20">gb</name></expr></argument>, <argument pos:start="27:23" pos:end="27:24"><expr pos:start="27:23" pos:end="27:24"><literal type="number" pos:start="27:23" pos:end="27:24">12</literal></expr></argument>)</argument_list></call> <operator pos:start="27:27" pos:end="27:28">==</operator> <literal type="number" pos:start="27:30" pos:end="27:34">0xfff</literal></expr>)</condition> <block pos:start="27:37" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:9">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:56">(<expr pos:start="29:13" pos:end="29:55"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:16">err</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:50"><name pos:start="29:20" pos:end="29:42">parse_adts_frame_header</name><argument_list pos:start="29:43" pos:end="29:50">(<argument pos:start="29:44" pos:end="29:45"><expr pos:start="29:44" pos:end="29:45"><name pos:start="29:44" pos:end="29:45">ac</name></expr></argument>, <argument pos:start="29:48" pos:end="29:49"><expr pos:start="29:48" pos:end="29:49"><name pos:start="29:48" pos:end="29:49">gb</name></expr></argument>)</argument_list></call><operator pos:start="29:51" pos:end="29:51">)</operator> <operator pos:start="29:53" pos:end="29:53">&lt;</operator> <literal type="number" pos:start="29:55" pos:end="29:55">0</literal></expr>)</condition> <block pos:start="29:58" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:22">

            <expr_stmt pos:start="31:13" pos:end="31:78"><expr pos:start="31:13" pos:end="31:77"><call pos:start="31:13" pos:end="31:77"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:77">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:41" pos:end="31:76"><expr pos:start="31:41" pos:end="31:76"><literal type="string" pos:start="31:41" pos:end="31:76">"Error decoding AAC frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="33:13" pos:end="33:22">goto <name pos:start="33:18" pos:end="33:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:47">(<expr pos:start="37:13" pos:end="37:46"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:14">ac</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:18">oc</name><index pos:start="37:19" pos:end="37:21">[<expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>]</index></name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:41"><name pos:start="37:23" pos:end="37:26">m4ac</name><operator pos:start="37:27" pos:end="37:27">.</operator><name pos:start="37:28" pos:end="37:41">sampling_index</name></name> <operator pos:start="37:43" pos:end="37:43">&gt;</operator> <literal type="number" pos:start="37:45" pos:end="37:46">12</literal></expr>)</condition> <block pos:start="37:49" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:22">

            <expr_stmt pos:start="39:13" pos:end="39:111"><expr pos:start="39:13" pos:end="39:110"><call pos:start="39:13" pos:end="39:110"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="39:110">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:21">ac</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:28">avctx</name></name></expr></argument>, <argument pos:start="39:31" pos:end="39:42"><expr pos:start="39:31" pos:end="39:42"><name pos:start="39:31" pos:end="39:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:45" pos:end="39:78"><expr pos:start="39:45" pos:end="39:78"><literal type="string" pos:start="39:45" pos:end="39:78">"invalid sampling rate index %d\n"</literal></expr></argument>, <argument pos:start="39:81" pos:end="39:109"><expr pos:start="39:81" pos:end="39:109"><name pos:start="39:81" pos:end="39:89"><name pos:start="39:81" pos:end="39:82">ac</name><operator pos:start="39:83" pos:end="39:84">-&gt;</operator><name pos:start="39:85" pos:end="39:86">oc</name><index pos:start="39:87" pos:end="39:89">[<expr pos:start="39:88" pos:end="39:88"><literal type="number" pos:start="39:88" pos:end="39:88">1</literal></expr>]</index></name><operator pos:start="39:90" pos:end="39:90">.</operator><name pos:start="39:91" pos:end="39:109"><name pos:start="39:91" pos:end="39:94">m4ac</name><operator pos:start="39:95" pos:end="39:95">.</operator><name pos:start="39:96" pos:end="39:109">sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:38"><expr pos:start="41:13" pos:end="41:37"><name pos:start="41:13" pos:end="41:15">err</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="43:13" pos:end="43:22">goto <name pos:start="43:18" pos:end="43:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="53:18"><if pos:start="51:5" pos:end="53:18">if <condition pos:start="51:8" pos:end="51:52">(<expr pos:start="51:9" pos:end="51:51"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:12">err</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:46"><name pos:start="51:16" pos:end="51:39">frame_configure_elements</name><argument_list pos:start="51:40" pos:end="51:46">(<argument pos:start="51:41" pos:end="51:45"><expr pos:start="51:41" pos:end="51:45"><name pos:start="51:41" pos:end="51:45">avctx</name></expr></argument>)</argument_list></call><operator pos:start="51:47" pos:end="51:47">)</operator> <operator pos:start="51:49" pos:end="51:49">&lt;</operator> <literal type="number" pos:start="51:51" pos:end="51:51">0</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:18"><block_content pos:start="53:9" pos:end="53:18">

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="line" pos:start="57:5" pos:end="57:59">// The FF_PROFILE_AAC_* defines are all object_type - 1</comment>

    <comment type="line" pos:start="59:5" pos:end="59:59">// This may lead to an undefined profile being signaled</comment>

    <expr_stmt pos:start="61:5" pos:end="61:56"><expr pos:start="61:5" pos:end="61:55"><name pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:6">ac</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:22">profile</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:34"><name pos:start="61:26" pos:end="61:27">ac</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:31">oc</name><index pos:start="61:32" pos:end="61:34">[<expr pos:start="61:33" pos:end="61:33"><literal type="number" pos:start="61:33" pos:end="61:33">1</literal></expr>]</index></name><operator pos:start="61:35" pos:end="61:35">.</operator><name pos:start="61:36" pos:end="61:51"><name pos:start="61:36" pos:end="61:39">m4ac</name><operator pos:start="61:40" pos:end="61:40">.</operator><name pos:start="61:41" pos:end="61:51">object_type</name></name> <operator pos:start="61:53" pos:end="61:53">-</operator> <literal type="number" pos:start="61:55" pos:end="61:55">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:43"><expr pos:start="65:5" pos:end="65:42"><name pos:start="65:5" pos:end="65:21">payload_alignment</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <call pos:start="65:25" pos:end="65:42"><name pos:start="65:25" pos:end="65:38">get_bits_count</name><argument_list pos:start="65:39" pos:end="65:42">(<argument pos:start="65:40" pos:end="65:41"><expr pos:start="65:40" pos:end="65:41"><name pos:start="65:40" pos:end="65:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:24"><expr pos:start="67:5" pos:end="67:23"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:6">ac</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:19">tags_mapped</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="69:5" pos:end="69:12">// parse</comment>

    <while pos:start="71:5" pos:end="275:5">while <condition pos:start="71:11" pos:end="71:53">(<expr pos:start="71:12" pos:end="71:52"><operator pos:start="71:12" pos:end="71:12">(</operator><name pos:start="71:13" pos:end="71:21">elem_type</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:39"><name pos:start="71:25" pos:end="71:32">get_bits</name><argument_list pos:start="71:33" pos:end="71:39">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">gb</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">3</literal></expr></argument>)</argument_list></call><operator pos:start="71:40" pos:end="71:40">)</operator> <operator pos:start="71:42" pos:end="71:43">!=</operator> <name pos:start="71:45" pos:end="71:52">TYPE_END</name></expr>)</condition> <block pos:start="71:55" pos:end="275:5">{<block_content pos:start="73:9" pos:end="273:9">

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:15">elem_id</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:33"><name pos:start="73:19" pos:end="73:26">get_bits</name><argument_list pos:start="73:27" pos:end="73:33">(<argument pos:start="73:28" pos:end="73:29"><expr pos:start="73:28" pos:end="73:29"><name pos:start="73:28" pos:end="73:29">gb</name></expr></argument>, <argument pos:start="73:32" pos:end="73:32"><expr pos:start="73:32" pos:end="73:32"><literal type="number" pos:start="73:32" pos:end="73:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="79:84"><if pos:start="77:9" pos:end="79:84">if <condition pos:start="77:12" pos:end="77:46">(<expr pos:start="77:13" pos:end="77:45"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:17">avctx</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:24">debug</name></name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <name pos:start="77:28" pos:end="77:45">FF_DEBUG_STARTCODE</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:84"><block_content pos:start="79:13" pos:end="79:84">

            <expr_stmt pos:start="79:13" pos:end="79:84"><expr pos:start="79:13" pos:end="79:83"><call pos:start="79:13" pos:end="79:83"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="79:83">(<argument pos:start="79:20" pos:end="79:24"><expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:24">avctx</name></expr></argument>, <argument pos:start="79:27" pos:end="79:38"><expr pos:start="79:27" pos:end="79:38"><name pos:start="79:27" pos:end="79:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="79:41" pos:end="79:62"><expr pos:start="79:41" pos:end="79:62"><literal type="string" pos:start="79:41" pos:end="79:62">"Elem type:%x id:%x\n"</literal></expr></argument>, <argument pos:start="79:65" pos:end="79:73"><expr pos:start="79:65" pos:end="79:73"><name pos:start="79:65" pos:end="79:73">elem_type</name></expr></argument>, <argument pos:start="79:76" pos:end="79:82"><expr pos:start="79:76" pos:end="79:82"><name pos:start="79:76" pos:end="79:82">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:54">(<expr pos:start="83:13" pos:end="83:53"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:28"><name pos:start="83:14" pos:end="83:18">avctx</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:28">channels</name></name> <operator pos:start="83:30" pos:end="83:31">&amp;&amp;</operator> <name pos:start="83:33" pos:end="83:41">elem_type</name> <operator pos:start="83:43" pos:end="83:44">!=</operator> <name pos:start="83:46" pos:end="83:53">TYPE_PCE</name></expr>)</condition> <block pos:start="83:56" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:15">err</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:22">goto <name pos:start="87:18" pos:end="87:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="93:9" pos:end="111:9"><if pos:start="93:9" pos:end="111:9">if <condition pos:start="93:12" pos:end="93:33">(<expr pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:21">elem_type</name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <name pos:start="93:25" pos:end="93:32">TYPE_DSE</name></expr>)</condition> <block pos:start="93:35" pos:end="111:9">{<block_content pos:start="95:13" pos:end="109:29">

            <if_stmt pos:start="95:13" pos:end="105:13"><if pos:start="95:13" pos:end="105:13">if <condition pos:start="95:16" pos:end="95:55">(<expr pos:start="95:17" pos:end="95:54"><operator pos:start="95:17" pos:end="95:17">!</operator><operator pos:start="95:18" pos:end="95:18">(</operator><name pos:start="95:19" pos:end="95:21">che</name><operator pos:start="95:22" pos:end="95:22">=</operator><call pos:start="95:23" pos:end="95:53"><name pos:start="95:23" pos:end="95:29">get_che</name><argument_list pos:start="95:30" pos:end="95:53">(<argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><name pos:start="95:31" pos:end="95:32">ac</name></expr></argument>, <argument pos:start="95:35" pos:end="95:43"><expr pos:start="95:35" pos:end="95:43"><name pos:start="95:35" pos:end="95:43">elem_type</name></expr></argument>, <argument pos:start="95:46" pos:end="95:52"><expr pos:start="95:46" pos:end="95:52"><name pos:start="95:46" pos:end="95:52">elem_id</name></expr></argument>)</argument_list></call><operator pos:start="95:54" pos:end="95:54">)</operator></expr>)</condition> <block pos:start="95:57" pos:end="105:13">{<block_content pos:start="97:17" pos:end="103:26">

                <expr_stmt pos:start="97:17" pos:end="99:43"><expr pos:start="97:17" pos:end="99:42"><call pos:start="97:17" pos:end="99:42"><name pos:start="97:17" pos:end="97:22">av_log</name><argument_list pos:start="97:23" pos:end="99:42">(<argument pos:start="97:24" pos:end="97:32"><expr pos:start="97:24" pos:end="97:32"><name pos:start="97:24" pos:end="97:32"><name pos:start="97:24" pos:end="97:25">ac</name><operator pos:start="97:26" pos:end="97:27">-&gt;</operator><name pos:start="97:28" pos:end="97:32">avctx</name></name></expr></argument>, <argument pos:start="97:35" pos:end="97:46"><expr pos:start="97:35" pos:end="97:46"><name pos:start="97:35" pos:end="97:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:49" pos:end="97:90"><expr pos:start="97:49" pos:end="97:90"><literal type="string" pos:start="97:49" pos:end="97:90">"channel element %d.%d is not allocated\n"</literal></expr></argument>,

                       <argument pos:start="99:24" pos:end="99:32"><expr pos:start="99:24" pos:end="99:32"><name pos:start="99:24" pos:end="99:32">elem_type</name></expr></argument>, <argument pos:start="99:35" pos:end="99:41"><expr pos:start="99:35" pos:end="99:41"><name pos:start="99:35" pos:end="99:41">elem_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:42"><expr pos:start="101:17" pos:end="101:41"><name pos:start="101:17" pos:end="101:19">err</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="103:17" pos:end="103:26">goto <name pos:start="103:22" pos:end="103:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:27"><expr pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:19">samples</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <literal type="number" pos:start="107:23" pos:end="107:26">1024</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:29"><expr pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:15">che</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:24">present</name></name> <operator pos:start="109:26" pos:end="109:26">=</operator> <literal type="number" pos:start="109:28" pos:end="109:28">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="115:9" pos:end="245:9">switch <condition pos:start="115:16" pos:end="115:26">(<expr pos:start="115:17" pos:end="115:25"><name pos:start="115:17" pos:end="115:25">elem_type</name></expr>)</condition> <block pos:start="115:28" pos:end="245:9">{<block_content pos:start="119:9" pos:end="243:18">



        <case pos:start="119:9" pos:end="119:22">case <expr pos:start="119:14" pos:end="119:21"><name pos:start="119:14" pos:end="119:21">TYPE_SCE</name></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:56"><expr pos:start="121:13" pos:end="121:55"><name pos:start="121:13" pos:end="121:15">err</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:55"><name pos:start="121:19" pos:end="121:28">decode_ics</name><argument_list pos:start="121:29" pos:end="121:55">(<argument pos:start="121:30" pos:end="121:31"><expr pos:start="121:30" pos:end="121:31"><name pos:start="121:30" pos:end="121:31">ac</name></expr></argument>, <argument pos:start="121:34" pos:end="121:44"><expr pos:start="121:34" pos:end="121:44"><operator pos:start="121:34" pos:end="121:34">&amp;</operator><name pos:start="121:35" pos:end="121:44"><name pos:start="121:35" pos:end="121:37">che</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:41">ch</name><index pos:start="121:42" pos:end="121:44">[<expr pos:start="121:43" pos:end="121:43"><literal type="number" pos:start="121:43" pos:end="121:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:47" pos:end="121:48"><expr pos:start="121:47" pos:end="121:48"><name pos:start="121:47" pos:end="121:48">gb</name></expr></argument>, <argument pos:start="121:51" pos:end="121:51"><expr pos:start="121:51" pos:end="121:51"><literal type="number" pos:start="121:51" pos:end="121:51">0</literal></expr></argument>, <argument pos:start="121:54" pos:end="121:54"><expr pos:start="121:54" pos:end="121:54"><literal type="number" pos:start="121:54" pos:end="121:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:28"><expr pos:start="123:13" pos:end="123:27"><name pos:start="123:13" pos:end="123:23">audio_found</name> <operator pos:start="123:25" pos:end="123:25">=</operator> <literal type="number" pos:start="123:27" pos:end="123:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:24"><expr pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:21">sce_count</name><operator pos:start="125:22" pos:end="125:23">++</operator></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>



        <case pos:start="131:9" pos:end="131:22">case <expr pos:start="131:14" pos:end="131:21"><name pos:start="131:14" pos:end="131:21">TYPE_CPE</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:42"><expr pos:start="133:13" pos:end="133:41"><name pos:start="133:13" pos:end="133:15">err</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:41"><name pos:start="133:19" pos:end="133:28">decode_cpe</name><argument_list pos:start="133:29" pos:end="133:41">(<argument pos:start="133:30" pos:end="133:31"><expr pos:start="133:30" pos:end="133:31"><name pos:start="133:30" pos:end="133:31">ac</name></expr></argument>, <argument pos:start="133:34" pos:end="133:35"><expr pos:start="133:34" pos:end="133:35"><name pos:start="133:34" pos:end="133:35">gb</name></expr></argument>, <argument pos:start="133:38" pos:end="133:40"><expr pos:start="133:38" pos:end="133:40"><name pos:start="133:38" pos:end="133:40">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:28"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:23">audio_found</name> <operator pos:start="135:25" pos:end="135:25">=</operator> <literal type="number" pos:start="135:27" pos:end="135:27">1</literal></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>



        <case pos:start="141:9" pos:end="141:22">case <expr pos:start="141:14" pos:end="141:21"><name pos:start="141:14" pos:end="141:21">TYPE_CCE</name></expr>:</case>

            <expr_stmt pos:start="143:13" pos:end="143:42"><expr pos:start="143:13" pos:end="143:41"><name pos:start="143:13" pos:end="143:15">err</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:41"><name pos:start="143:19" pos:end="143:28">decode_cce</name><argument_list pos:start="143:29" pos:end="143:41">(<argument pos:start="143:30" pos:end="143:31"><expr pos:start="143:30" pos:end="143:31"><name pos:start="143:30" pos:end="143:31">ac</name></expr></argument>, <argument pos:start="143:34" pos:end="143:35"><expr pos:start="143:34" pos:end="143:35"><name pos:start="143:34" pos:end="143:35">gb</name></expr></argument>, <argument pos:start="143:38" pos:end="143:40"><expr pos:start="143:38" pos:end="143:40"><name pos:start="143:38" pos:end="143:40">che</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>



        <case pos:start="149:9" pos:end="149:22">case <expr pos:start="149:14" pos:end="149:21"><name pos:start="149:14" pos:end="149:21">TYPE_LFE</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:56"><expr pos:start="151:13" pos:end="151:55"><name pos:start="151:13" pos:end="151:15">err</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <call pos:start="151:19" pos:end="151:55"><name pos:start="151:19" pos:end="151:28">decode_ics</name><argument_list pos:start="151:29" pos:end="151:55">(<argument pos:start="151:30" pos:end="151:31"><expr pos:start="151:30" pos:end="151:31"><name pos:start="151:30" pos:end="151:31">ac</name></expr></argument>, <argument pos:start="151:34" pos:end="151:44"><expr pos:start="151:34" pos:end="151:44"><operator pos:start="151:34" pos:end="151:34">&amp;</operator><name pos:start="151:35" pos:end="151:44"><name pos:start="151:35" pos:end="151:37">che</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:41">ch</name><index pos:start="151:42" pos:end="151:44">[<expr pos:start="151:43" pos:end="151:43"><literal type="number" pos:start="151:43" pos:end="151:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="151:47" pos:end="151:48"><expr pos:start="151:47" pos:end="151:48"><name pos:start="151:47" pos:end="151:48">gb</name></expr></argument>, <argument pos:start="151:51" pos:end="151:51"><expr pos:start="151:51" pos:end="151:51"><literal type="number" pos:start="151:51" pos:end="151:51">0</literal></expr></argument>, <argument pos:start="151:54" pos:end="151:54"><expr pos:start="151:54" pos:end="151:54"><literal type="number" pos:start="151:54" pos:end="151:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:28"><expr pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:23">audio_found</name> <operator pos:start="153:25" pos:end="153:25">=</operator> <literal type="number" pos:start="153:27" pos:end="153:27">1</literal></expr>;</expr_stmt>

            <break pos:start="155:13" pos:end="155:18">break;</break>



        <case pos:start="159:9" pos:end="159:22">case <expr pos:start="159:14" pos:end="159:21"><name pos:start="159:14" pos:end="159:21">TYPE_DSE</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:51"><expr pos:start="161:13" pos:end="161:50"><name pos:start="161:13" pos:end="161:15">err</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:50"><name pos:start="161:19" pos:end="161:42">skip_data_stream_element</name><argument_list pos:start="161:43" pos:end="161:50">(<argument pos:start="161:44" pos:end="161:45"><expr pos:start="161:44" pos:end="161:45"><name pos:start="161:44" pos:end="161:45">ac</name></expr></argument>, <argument pos:start="161:48" pos:end="161:49"><expr pos:start="161:48" pos:end="161:49"><name pos:start="161:48" pos:end="161:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>



        <case pos:start="167:9" pos:end="167:22">case <expr pos:start="167:14" pos:end="167:21"><name pos:start="167:14" pos:end="167:21">TYPE_PCE</name></expr>:</case> <block pos:start="167:24" pos:end="209:9">{<block_content pos:start="169:13" pos:end="207:18">

            <decl_stmt pos:start="169:13" pos:end="169:49"><decl pos:start="169:13" pos:end="169:48"><type pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:19">uint8_t</name></type> <name pos:start="169:21" pos:end="169:48"><name pos:start="169:21" pos:end="169:30">layout_map</name><index pos:start="169:31" pos:end="169:45">[<expr pos:start="169:32" pos:end="169:44"><name pos:start="169:32" pos:end="169:42">MAX_ELEM_ID</name><operator pos:start="169:43" pos:end="169:43">*</operator><literal type="number" pos:start="169:44" pos:end="169:44">4</literal></expr>]</index><index pos:start="169:46" pos:end="169:48">[<expr pos:start="169:47" pos:end="169:47"><literal type="number" pos:start="169:47" pos:end="169:47">3</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="171:13" pos:end="171:21"><decl pos:start="171:13" pos:end="171:20"><type pos:start="171:13" pos:end="171:15"><name pos:start="171:13" pos:end="171:15">int</name></type> <name pos:start="171:17" pos:end="171:20">tags</name></decl>;</decl_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:42"><expr pos:start="173:13" pos:end="173:41"><call pos:start="173:13" pos:end="173:41"><name pos:start="173:13" pos:end="173:37">push_output_configuration</name><argument_list pos:start="173:38" pos:end="173:41">(<argument pos:start="173:39" pos:end="173:40"><expr pos:start="173:39" pos:end="173:40"><name pos:start="173:39" pos:end="173:40">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="177:49"><expr pos:start="175:13" pos:end="177:48"><name pos:start="175:13" pos:end="175:16">tags</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <call pos:start="175:20" pos:end="177:48"><name pos:start="175:20" pos:end="175:29">decode_pce</name><argument_list pos:start="175:30" pos:end="177:48">(<argument pos:start="175:31" pos:end="175:35"><expr pos:start="175:31" pos:end="175:35"><name pos:start="175:31" pos:end="175:35">avctx</name></expr></argument>, <argument pos:start="175:38" pos:end="175:52"><expr pos:start="175:38" pos:end="175:52"><operator pos:start="175:38" pos:end="175:38">&amp;</operator><name pos:start="175:39" pos:end="175:47"><name pos:start="175:39" pos:end="175:40">ac</name><operator pos:start="175:41" pos:end="175:42">-&gt;</operator><name pos:start="175:43" pos:end="175:44">oc</name><index pos:start="175:45" pos:end="175:47">[<expr pos:start="175:46" pos:end="175:46"><literal type="number" pos:start="175:46" pos:end="175:46">1</literal></expr>]</index></name><operator pos:start="175:48" pos:end="175:48">.</operator><name pos:start="175:49" pos:end="175:52">m4ac</name></expr></argument>, <argument pos:start="175:55" pos:end="175:64"><expr pos:start="175:55" pos:end="175:64"><name pos:start="175:55" pos:end="175:64">layout_map</name></expr></argument>, <argument pos:start="175:67" pos:end="175:68"><expr pos:start="175:67" pos:end="175:68"><name pos:start="175:67" pos:end="175:68">gb</name></expr></argument>,

                              <argument pos:start="177:31" pos:end="177:47"><expr pos:start="177:31" pos:end="177:47"><name pos:start="177:31" pos:end="177:47">payload_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="185:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:25">(<expr pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:20">tags</name> <operator pos:start="179:22" pos:end="179:22">&lt;</operator> <literal type="number" pos:start="179:24" pos:end="179:24">0</literal></expr>)</condition> <block pos:start="179:27" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:22">

                <expr_stmt pos:start="181:17" pos:end="181:27"><expr pos:start="181:17" pos:end="181:26"><name pos:start="181:17" pos:end="181:19">err</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <name pos:start="181:23" pos:end="181:26">tags</name></expr>;</expr_stmt>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="187:13" pos:end="205:13"><if pos:start="187:13" pos:end="195:13">if <condition pos:start="187:16" pos:end="187:26">(<expr pos:start="187:17" pos:end="187:25"><name pos:start="187:17" pos:end="187:25">pce_found</name></expr>)</condition> <block pos:start="187:28" pos:end="195:13">{<block_content pos:start="189:17" pos:end="193:45">

                <expr_stmt pos:start="189:17" pos:end="191:114"><expr pos:start="189:17" pos:end="191:113"><call pos:start="189:17" pos:end="191:113"><name pos:start="189:17" pos:end="189:22">av_log</name><argument_list pos:start="189:23" pos:end="191:113">(<argument pos:start="189:24" pos:end="189:28"><expr pos:start="189:24" pos:end="189:28"><name pos:start="189:24" pos:end="189:28">avctx</name></expr></argument>, <argument pos:start="189:31" pos:end="189:42"><expr pos:start="189:31" pos:end="189:42"><name pos:start="189:31" pos:end="189:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="191:24" pos:end="191:112"><expr pos:start="191:24" pos:end="191:112"><literal type="string" pos:start="191:24" pos:end="191:112">"Not evaluating a further program_config_element as this construct is dubious at best.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:45"><expr pos:start="193:17" pos:end="193:44"><call pos:start="193:17" pos:end="193:44"><name pos:start="193:17" pos:end="193:40">pop_output_configuration</name><argument_list pos:start="193:41" pos:end="193:44">(<argument pos:start="193:42" pos:end="193:43"><expr pos:start="193:42" pos:end="193:43"><name pos:start="193:42" pos:end="193:43">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="195:15" pos:end="205:13">else <block pos:start="195:20" pos:end="205:13">{<block_content pos:start="197:17" pos:end="203:30">

                <expr_stmt pos:start="197:17" pos:end="197:78"><expr pos:start="197:17" pos:end="197:77"><name pos:start="197:17" pos:end="197:19">err</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <call pos:start="197:23" pos:end="197:77"><name pos:start="197:23" pos:end="197:38">output_configure</name><argument_list pos:start="197:39" pos:end="197:77">(<argument pos:start="197:40" pos:end="197:41"><expr pos:start="197:40" pos:end="197:41"><name pos:start="197:40" pos:end="197:41">ac</name></expr></argument>, <argument pos:start="197:44" pos:end="197:53"><expr pos:start="197:44" pos:end="197:53"><name pos:start="197:44" pos:end="197:53">layout_map</name></expr></argument>, <argument pos:start="197:56" pos:end="197:59"><expr pos:start="197:56" pos:end="197:59"><name pos:start="197:56" pos:end="197:59">tags</name></expr></argument>, <argument pos:start="197:62" pos:end="197:73"><expr pos:start="197:62" pos:end="197:73"><name pos:start="197:62" pos:end="197:73">OC_TRIAL_PCE</name></expr></argument>, <argument pos:start="197:76" pos:end="197:76"><expr pos:start="197:76" pos:end="197:76"><literal type="number" pos:start="197:76" pos:end="197:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="199:17" pos:end="201:51"><if pos:start="199:17" pos:end="201:51">if <condition pos:start="199:20" pos:end="199:25">(<expr pos:start="199:21" pos:end="199:24"><operator pos:start="199:21" pos:end="199:21">!</operator><name pos:start="199:22" pos:end="199:24">err</name></expr>)</condition><block type="pseudo" pos:start="201:21" pos:end="201:51"><block_content pos:start="201:21" pos:end="201:51">

                    <expr_stmt pos:start="201:21" pos:end="201:51"><expr pos:start="201:21" pos:end="201:50"><name pos:start="201:21" pos:end="201:29"><name pos:start="201:21" pos:end="201:22">ac</name><operator pos:start="201:23" pos:end="201:24">-&gt;</operator><name pos:start="201:25" pos:end="201:26">oc</name><index pos:start="201:27" pos:end="201:29">[<expr pos:start="201:28" pos:end="201:28"><literal type="number" pos:start="201:28" pos:end="201:28">1</literal></expr>]</index></name><operator pos:start="201:30" pos:end="201:30">.</operator><name pos:start="201:31" pos:end="201:46"><name pos:start="201:31" pos:end="201:34">m4ac</name><operator pos:start="201:35" pos:end="201:35">.</operator><name pos:start="201:36" pos:end="201:46">chan_config</name></name> <operator pos:start="201:48" pos:end="201:48">=</operator> <literal type="number" pos:start="201:50" pos:end="201:50">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:30"><expr pos:start="203:17" pos:end="203:29"><name pos:start="203:17" pos:end="203:25">pce_found</name> <operator pos:start="203:27" pos:end="203:27">=</operator> <literal type="number" pos:start="203:29" pos:end="203:29">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>

        </block_content>}</block>



        <case pos:start="213:9" pos:end="213:22">case <expr pos:start="213:14" pos:end="213:21"><name pos:start="213:14" pos:end="213:21">TYPE_FIL</name></expr>:</case>

            <if_stmt pos:start="215:13" pos:end="217:47"><if pos:start="215:13" pos:end="217:47">if <condition pos:start="215:16" pos:end="215:30">(<expr pos:start="215:17" pos:end="215:29"><name pos:start="215:17" pos:end="215:23">elem_id</name> <operator pos:start="215:25" pos:end="215:26">==</operator> <literal type="number" pos:start="215:28" pos:end="215:29">15</literal></expr>)</condition><block type="pseudo" pos:start="217:17" pos:end="217:47"><block_content pos:start="217:17" pos:end="217:47">

                <expr_stmt pos:start="217:17" pos:end="217:47"><expr pos:start="217:17" pos:end="217:46"><name pos:start="217:17" pos:end="217:23">elem_id</name> <operator pos:start="217:25" pos:end="217:26">+=</operator> <call pos:start="217:28" pos:end="217:42"><name pos:start="217:28" pos:end="217:35">get_bits</name><argument_list pos:start="217:36" pos:end="217:42">(<argument pos:start="217:37" pos:end="217:38"><expr pos:start="217:37" pos:end="217:38"><name pos:start="217:37" pos:end="217:38">gb</name></expr></argument>, <argument pos:start="217:41" pos:end="217:41"><expr pos:start="217:41" pos:end="217:41"><literal type="number" pos:start="217:41" pos:end="217:41">8</literal></expr></argument>)</argument_list></call> <operator pos:start="217:44" pos:end="217:44">-</operator> <literal type="number" pos:start="217:46" pos:end="217:46">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="219:13" pos:end="227:13"><if pos:start="219:13" pos:end="227:13">if <condition pos:start="219:16" pos:end="219:48">(<expr pos:start="219:17" pos:end="219:47"><call pos:start="219:17" pos:end="219:33"><name pos:start="219:17" pos:end="219:29">get_bits_left</name><argument_list pos:start="219:30" pos:end="219:33">(<argument pos:start="219:31" pos:end="219:32"><expr pos:start="219:31" pos:end="219:32"><name pos:start="219:31" pos:end="219:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="219:35" pos:end="219:35">&lt;</operator> <literal type="number" pos:start="219:37" pos:end="219:37">8</literal> <operator pos:start="219:39" pos:end="219:39">*</operator> <name pos:start="219:41" pos:end="219:47">elem_id</name></expr>)</condition> <block pos:start="219:50" pos:end="227:13">{<block_content pos:start="221:21" pos:end="225:30">

                    <expr_stmt pos:start="221:21" pos:end="221:74"><expr pos:start="221:21" pos:end="221:73"><call pos:start="221:21" pos:end="221:73"><name pos:start="221:21" pos:end="221:26">av_log</name><argument_list pos:start="221:27" pos:end="221:73">(<argument pos:start="221:28" pos:end="221:32"><expr pos:start="221:28" pos:end="221:32"><name pos:start="221:28" pos:end="221:32">avctx</name></expr></argument>, <argument pos:start="221:35" pos:end="221:46"><expr pos:start="221:35" pos:end="221:46"><name pos:start="221:35" pos:end="221:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="221:49" pos:end="221:72"><expr pos:start="221:49" pos:end="221:72"><literal type="string" pos:start="221:49" pos:end="221:60">"TYPE_FIL: "</literal><name pos:start="221:61" pos:end="221:72">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="223:21" pos:end="223:46"><expr pos:start="223:21" pos:end="223:45"><name pos:start="223:21" pos:end="223:23">err</name> <operator pos:start="223:25" pos:end="223:25">=</operator> <name pos:start="223:27" pos:end="223:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                    <goto pos:start="225:21" pos:end="225:30">goto <name pos:start="225:26" pos:end="225:29">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <while pos:start="229:13" pos:end="231:94">while <condition pos:start="229:19" pos:end="229:31">(<expr pos:start="229:20" pos:end="229:30"><name pos:start="229:20" pos:end="229:26">elem_id</name> <operator pos:start="229:28" pos:end="229:28">&gt;</operator> <literal type="number" pos:start="229:30" pos:end="229:30">0</literal></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:94"><block_content pos:start="231:17" pos:end="231:94">

                <expr_stmt pos:start="231:17" pos:end="231:94"><expr pos:start="231:17" pos:end="231:93"><name pos:start="231:17" pos:end="231:23">elem_id</name> <operator pos:start="231:25" pos:end="231:26">-=</operator> <call pos:start="231:28" pos:end="231:93"><name pos:start="231:28" pos:end="231:51">decode_extension_payload</name><argument_list pos:start="231:52" pos:end="231:93">(<argument pos:start="231:53" pos:end="231:54"><expr pos:start="231:53" pos:end="231:54"><name pos:start="231:53" pos:end="231:54">ac</name></expr></argument>, <argument pos:start="231:57" pos:end="231:58"><expr pos:start="231:57" pos:end="231:58"><name pos:start="231:57" pos:end="231:58">gb</name></expr></argument>, <argument pos:start="231:61" pos:end="231:67"><expr pos:start="231:61" pos:end="231:67"><name pos:start="231:61" pos:end="231:67">elem_id</name></expr></argument>, <argument pos:start="231:70" pos:end="231:77"><expr pos:start="231:70" pos:end="231:77"><name pos:start="231:70" pos:end="231:77">che_prev</name></expr></argument>, <argument pos:start="231:80" pos:end="231:92"><expr pos:start="231:80" pos:end="231:92"><name pos:start="231:80" pos:end="231:92">che_prev_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="233:13" pos:end="233:20"><expr pos:start="233:13" pos:end="233:19"><name pos:start="233:13" pos:end="233:15">err</name> <operator pos:start="233:17" pos:end="233:17">=</operator> <literal type="number" pos:start="233:19" pos:end="233:19">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="233:22" pos:end="233:32">/* FIXME */</comment>

            <break pos:start="235:13" pos:end="235:18">break;</break>



        <default pos:start="239:9" pos:end="239:16">default:</default>

            <expr_stmt pos:start="241:13" pos:end="241:30"><expr pos:start="241:13" pos:end="241:29"><name pos:start="241:13" pos:end="241:15">err</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <name pos:start="241:19" pos:end="241:29">AVERROR_BUG</name></expr>;</expr_stmt> <comment type="block" pos:start="241:32" pos:end="241:80">/* should not happen, but keeps compiler happy */</comment>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="249:9" pos:end="255:9"><if pos:start="249:9" pos:end="255:9">if <condition pos:start="249:12" pos:end="249:33">(<expr pos:start="249:13" pos:end="249:32"><name pos:start="249:13" pos:end="249:21">elem_type</name> <operator pos:start="249:23" pos:end="249:23">&lt;</operator> <name pos:start="249:25" pos:end="249:32">TYPE_DSE</name></expr>)</condition> <block pos:start="249:35" pos:end="255:9">{<block_content pos:start="251:13" pos:end="253:38">

            <expr_stmt pos:start="251:13" pos:end="251:32"><expr pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:20">che_prev</name>      <operator pos:start="251:27" pos:end="251:27">=</operator> <name pos:start="251:29" pos:end="251:31">che</name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:38"><expr pos:start="253:13" pos:end="253:37"><name pos:start="253:13" pos:end="253:25">che_prev_type</name> <operator pos:start="253:27" pos:end="253:27">=</operator> <name pos:start="253:29" pos:end="253:37">elem_type</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="259:9" pos:end="261:22"><if pos:start="259:9" pos:end="261:22">if <condition pos:start="259:12" pos:end="259:16">(<expr pos:start="259:13" pos:end="259:15"><name pos:start="259:13" pos:end="259:15">err</name></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="261:22"><block_content pos:start="261:13" pos:end="261:22">

            <goto pos:start="261:13" pos:end="261:22">goto <name pos:start="261:18" pos:end="261:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="265:9" pos:end="273:9"><if pos:start="265:9" pos:end="273:9">if <condition pos:start="265:12" pos:end="265:34">(<expr pos:start="265:13" pos:end="265:33"><call pos:start="265:13" pos:end="265:29"><name pos:start="265:13" pos:end="265:25">get_bits_left</name><argument_list pos:start="265:26" pos:end="265:29">(<argument pos:start="265:27" pos:end="265:28"><expr pos:start="265:27" pos:end="265:28"><name pos:start="265:27" pos:end="265:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="265:31" pos:end="265:31">&lt;</operator> <literal type="number" pos:start="265:33" pos:end="265:33">3</literal></expr>)</condition> <block pos:start="265:36" pos:end="273:9">{<block_content pos:start="267:13" pos:end="271:22">

            <expr_stmt pos:start="267:13" pos:end="267:54"><expr pos:start="267:13" pos:end="267:53"><call pos:start="267:13" pos:end="267:53"><name pos:start="267:13" pos:end="267:18">av_log</name><argument_list pos:start="267:19" pos:end="267:53">(<argument pos:start="267:20" pos:end="267:24"><expr pos:start="267:20" pos:end="267:24"><name pos:start="267:20" pos:end="267:24">avctx</name></expr></argument>, <argument pos:start="267:27" pos:end="267:38"><expr pos:start="267:27" pos:end="267:38"><name pos:start="267:27" pos:end="267:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:41" pos:end="267:52"><expr pos:start="267:41" pos:end="267:52"><name pos:start="267:41" pos:end="267:52">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:38"><expr pos:start="269:13" pos:end="269:37"><name pos:start="269:13" pos:end="269:15">err</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <name pos:start="269:19" pos:end="269:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="271:13" pos:end="271:22">goto <name pos:start="271:18" pos:end="271:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="279:5" pos:end="285:5"><if pos:start="279:5" pos:end="285:5">if <condition pos:start="279:8" pos:end="279:25">(<expr pos:start="279:9" pos:end="279:24"><operator pos:start="279:9" pos:end="279:9">!</operator><name pos:start="279:10" pos:end="279:24"><name pos:start="279:10" pos:end="279:14">avctx</name><operator pos:start="279:15" pos:end="279:16">-&gt;</operator><name pos:start="279:17" pos:end="279:24">channels</name></name></expr>)</condition> <block pos:start="279:27" pos:end="285:5">{<block_content pos:start="281:9" pos:end="283:17">

        <expr_stmt pos:start="281:9" pos:end="281:27"><expr pos:start="281:9" pos:end="281:26"><operator pos:start="281:9" pos:end="281:9">*</operator><name pos:start="281:10" pos:end="281:22">got_frame_ptr</name> <operator pos:start="281:24" pos:end="281:24">=</operator> <literal type="number" pos:start="281:26" pos:end="281:26">0</literal></expr>;</expr_stmt>

        <return pos:start="283:9" pos:end="283:17">return <expr pos:start="283:16" pos:end="283:16"><literal type="number" pos:start="283:16" pos:end="283:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:109"><expr pos:start="289:5" pos:end="289:108"><name pos:start="289:5" pos:end="289:14">multiplier</name> <operator pos:start="289:16" pos:end="289:16">=</operator> <ternary pos:start="289:18" pos:end="289:108"><condition pos:start="289:18" pos:end="289:44"><expr pos:start="289:18" pos:end="289:42"><operator pos:start="289:18" pos:end="289:18">(</operator><name pos:start="289:19" pos:end="289:27"><name pos:start="289:19" pos:end="289:20">ac</name><operator pos:start="289:21" pos:end="289:22">-&gt;</operator><name pos:start="289:23" pos:end="289:24">oc</name><index pos:start="289:25" pos:end="289:27">[<expr pos:start="289:26" pos:end="289:26"><literal type="number" pos:start="289:26" pos:end="289:26">1</literal></expr>]</index></name><operator pos:start="289:28" pos:end="289:28">.</operator><name pos:start="289:29" pos:end="289:36"><name pos:start="289:29" pos:end="289:32">m4ac</name><operator pos:start="289:33" pos:end="289:33">.</operator><name pos:start="289:34" pos:end="289:36">sbr</name></name> <operator pos:start="289:38" pos:end="289:39">==</operator> <literal type="number" pos:start="289:41" pos:end="289:41">1</literal><operator pos:start="289:42" pos:end="289:42">)</operator></expr> ?</condition><then pos:start="289:46" pos:end="289:104"> <expr pos:start="289:46" pos:end="289:104"><name pos:start="289:46" pos:end="289:54"><name pos:start="289:46" pos:end="289:47">ac</name><operator pos:start="289:48" pos:end="289:49">-&gt;</operator><name pos:start="289:50" pos:end="289:51">oc</name><index pos:start="289:52" pos:end="289:54">[<expr pos:start="289:53" pos:end="289:53"><literal type="number" pos:start="289:53" pos:end="289:53">1</literal></expr>]</index></name><operator pos:start="289:55" pos:end="289:55">.</operator><name pos:start="289:56" pos:end="289:75"><name pos:start="289:56" pos:end="289:59">m4ac</name><operator pos:start="289:60" pos:end="289:60">.</operator><name pos:start="289:61" pos:end="289:75">ext_sample_rate</name></name> <operator pos:start="289:77" pos:end="289:77">&gt;</operator> <name pos:start="289:79" pos:end="289:87"><name pos:start="289:79" pos:end="289:80">ac</name><operator pos:start="289:81" pos:end="289:82">-&gt;</operator><name pos:start="289:83" pos:end="289:84">oc</name><index pos:start="289:85" pos:end="289:87">[<expr pos:start="289:86" pos:end="289:86"><literal type="number" pos:start="289:86" pos:end="289:86">1</literal></expr>]</index></name><operator pos:start="289:88" pos:end="289:88">.</operator><name pos:start="289:89" pos:end="289:104"><name pos:start="289:89" pos:end="289:92">m4ac</name><operator pos:start="289:93" pos:end="289:93">.</operator><name pos:start="289:94" pos:end="289:104">sample_rate</name></name></expr> </then><else pos:start="289:106" pos:end="289:108">: <expr pos:start="289:108" pos:end="289:108"><literal type="number" pos:start="289:108" pos:end="289:108">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:27"><expr pos:start="291:5" pos:end="291:26"><name pos:start="291:5" pos:end="291:11">samples</name> <operator pos:start="291:13" pos:end="291:15">&lt;&lt;=</operator> <name pos:start="291:17" pos:end="291:26">multiplier</name></expr>;</expr_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:36"><expr pos:start="295:5" pos:end="295:35"><call pos:start="295:5" pos:end="295:35"><name pos:start="295:5" pos:end="295:22">spectral_to_sample</name><argument_list pos:start="295:23" pos:end="295:35">(<argument pos:start="295:24" pos:end="295:25"><expr pos:start="295:24" pos:end="295:25"><name pos:start="295:24" pos:end="295:25">ac</name></expr></argument>, <argument pos:start="295:28" pos:end="295:34"><expr pos:start="295:28" pos:end="295:34"><name pos:start="295:28" pos:end="295:34">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="299:5" pos:end="307:5"><if pos:start="299:5" pos:end="307:5">if <condition pos:start="299:8" pos:end="299:40">(<expr pos:start="299:9" pos:end="299:39"><name pos:start="299:9" pos:end="299:17"><name pos:start="299:9" pos:end="299:10">ac</name><operator pos:start="299:11" pos:end="299:12">-&gt;</operator><name pos:start="299:13" pos:end="299:14">oc</name><index pos:start="299:15" pos:end="299:17">[<expr pos:start="299:16" pos:end="299:16"><literal type="number" pos:start="299:16" pos:end="299:16">1</literal></expr>]</index></name><operator pos:start="299:18" pos:end="299:18">.</operator><name pos:start="299:19" pos:end="299:24">status</name> <operator pos:start="299:26" pos:end="299:27">&amp;&amp;</operator> <name pos:start="299:29" pos:end="299:39">audio_found</name></expr>)</condition> <block pos:start="299:42" pos:end="307:5">{<block_content pos:start="301:9" pos:end="305:37">

        <expr_stmt pos:start="301:9" pos:end="301:70"><expr pos:start="301:9" pos:end="301:69"><name pos:start="301:9" pos:end="301:26"><name pos:start="301:9" pos:end="301:13">avctx</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:26">sample_rate</name></name> <operator pos:start="301:28" pos:end="301:28">=</operator> <name pos:start="301:30" pos:end="301:38"><name pos:start="301:30" pos:end="301:31">ac</name><operator pos:start="301:32" pos:end="301:33">-&gt;</operator><name pos:start="301:34" pos:end="301:35">oc</name><index pos:start="301:36" pos:end="301:38">[<expr pos:start="301:37" pos:end="301:37"><literal type="number" pos:start="301:37" pos:end="301:37">1</literal></expr>]</index></name><operator pos:start="301:39" pos:end="301:39">.</operator><name pos:start="301:40" pos:end="301:55"><name pos:start="301:40" pos:end="301:43">m4ac</name><operator pos:start="301:44" pos:end="301:44">.</operator><name pos:start="301:45" pos:end="301:55">sample_rate</name></name> <operator pos:start="301:57" pos:end="301:58">&lt;&lt;</operator> <name pos:start="301:60" pos:end="301:69">multiplier</name></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:36"><expr pos:start="303:9" pos:end="303:35"><name pos:start="303:9" pos:end="303:25"><name pos:start="303:9" pos:end="303:13">avctx</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:25">frame_size</name></name> <operator pos:start="303:27" pos:end="303:27">=</operator> <name pos:start="303:29" pos:end="303:35">samples</name></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:37"><expr pos:start="305:9" pos:end="305:36"><name pos:start="305:9" pos:end="305:17"><name pos:start="305:9" pos:end="305:10">ac</name><operator pos:start="305:11" pos:end="305:12">-&gt;</operator><name pos:start="305:13" pos:end="305:14">oc</name><index pos:start="305:15" pos:end="305:17">[<expr pos:start="305:16" pos:end="305:16"><literal type="number" pos:start="305:16" pos:end="305:16">1</literal></expr>]</index></name><operator pos:start="305:18" pos:end="305:18">.</operator><name pos:start="305:19" pos:end="305:24">status</name> <operator pos:start="305:26" pos:end="305:26">=</operator> <name pos:start="305:28" pos:end="305:36">OC_LOCKED</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="311:5" pos:end="313:53"><if pos:start="311:5" pos:end="313:53">if <condition pos:start="311:8" pos:end="311:19">(<expr pos:start="311:9" pos:end="311:18"><name pos:start="311:9" pos:end="311:18">multiplier</name></expr>)</condition><block type="pseudo" pos:start="313:9" pos:end="313:53"><block_content pos:start="313:9" pos:end="313:53">

        <expr_stmt pos:start="313:9" pos:end="313:53"><expr pos:start="313:9" pos:end="313:52"><name pos:start="313:9" pos:end="313:48"><name pos:start="313:9" pos:end="313:13">avctx</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:23">internal</name><operator pos:start="313:24" pos:end="313:25">-&gt;</operator><name pos:start="313:26" pos:end="313:48">skip_samples_multiplier</name></name> <operator pos:start="313:50" pos:end="313:50">=</operator> <literal type="number" pos:start="313:52" pos:end="313:52">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="317:5" pos:end="325:5"><if pos:start="317:5" pos:end="325:5">if <condition pos:start="317:8" pos:end="317:39">(<expr pos:start="317:9" pos:end="317:38"><operator pos:start="317:9" pos:end="317:9">!</operator><name pos:start="317:10" pos:end="317:27"><name pos:start="317:10" pos:end="317:11">ac</name><operator pos:start="317:12" pos:end="317:13">-&gt;</operator><name pos:start="317:14" pos:end="317:18">frame</name><operator pos:start="317:19" pos:end="317:20">-&gt;</operator><name pos:start="317:21" pos:end="317:24">data</name><index pos:start="317:25" pos:end="317:27">[<expr pos:start="317:26" pos:end="317:26"><literal type="number" pos:start="317:26" pos:end="317:26">0</literal></expr>]</index></name> <operator pos:start="317:29" pos:end="317:30">&amp;&amp;</operator> <name pos:start="317:32" pos:end="317:38">samples</name></expr>)</condition> <block pos:start="317:41" pos:end="325:5">{<block_content pos:start="319:9" pos:end="323:18">

        <expr_stmt pos:start="319:9" pos:end="319:61"><expr pos:start="319:9" pos:end="319:60"><call pos:start="319:9" pos:end="319:60"><name pos:start="319:9" pos:end="319:14">av_log</name><argument_list pos:start="319:15" pos:end="319:60">(<argument pos:start="319:16" pos:end="319:20"><expr pos:start="319:16" pos:end="319:20"><name pos:start="319:16" pos:end="319:20">avctx</name></expr></argument>, <argument pos:start="319:23" pos:end="319:34"><expr pos:start="319:23" pos:end="319:34"><name pos:start="319:23" pos:end="319:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="319:37" pos:end="319:59"><expr pos:start="319:37" pos:end="319:59"><literal type="string" pos:start="319:37" pos:end="319:59">"no frame data found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:34"><expr pos:start="321:9" pos:end="321:33"><name pos:start="321:9" pos:end="321:11">err</name> <operator pos:start="321:13" pos:end="321:13">=</operator> <name pos:start="321:15" pos:end="321:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="323:9" pos:end="323:18">goto <name pos:start="323:14" pos:end="323:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="329:5" pos:end="337:34"><if pos:start="329:5" pos:end="335:5">if <condition pos:start="329:8" pos:end="329:16">(<expr pos:start="329:9" pos:end="329:15"><name pos:start="329:9" pos:end="329:15">samples</name></expr>)</condition> <block pos:start="329:18" pos:end="335:5">{<block_content pos:start="331:9" pos:end="333:52">

        <expr_stmt pos:start="331:9" pos:end="331:40"><expr pos:start="331:9" pos:end="331:39"><name pos:start="331:9" pos:end="331:29"><name pos:start="331:9" pos:end="331:10">ac</name><operator pos:start="331:11" pos:end="331:12">-&gt;</operator><name pos:start="331:13" pos:end="331:17">frame</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:29">nb_samples</name></name> <operator pos:start="331:31" pos:end="331:31">=</operator> <name pos:start="331:33" pos:end="331:39">samples</name></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:52"><expr pos:start="333:9" pos:end="333:51"><name pos:start="333:9" pos:end="333:30"><name pos:start="333:9" pos:end="333:10">ac</name><operator pos:start="333:11" pos:end="333:12">-&gt;</operator><name pos:start="333:13" pos:end="333:17">frame</name><operator pos:start="333:18" pos:end="333:19">-&gt;</operator><name pos:start="333:20" pos:end="333:30">sample_rate</name></name> <operator pos:start="333:32" pos:end="333:32">=</operator> <name pos:start="333:34" pos:end="333:51"><name pos:start="333:34" pos:end="333:38">avctx</name><operator pos:start="333:39" pos:end="333:40">-&gt;</operator><name pos:start="333:41" pos:end="333:51">sample_rate</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="335:7" pos:end="337:34">else<block type="pseudo" pos:start="337:9" pos:end="337:34"><block_content pos:start="337:9" pos:end="337:34">

        <expr_stmt pos:start="337:9" pos:end="337:34"><expr pos:start="337:9" pos:end="337:33"><call pos:start="337:9" pos:end="337:33"><name pos:start="337:9" pos:end="337:22">av_frame_unref</name><argument_list pos:start="337:23" pos:end="337:33">(<argument pos:start="337:24" pos:end="337:32"><expr pos:start="337:24" pos:end="337:32"><name pos:start="337:24" pos:end="337:32"><name pos:start="337:24" pos:end="337:25">ac</name><operator pos:start="337:26" pos:end="337:27">-&gt;</operator><name pos:start="337:28" pos:end="337:32">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:31"><expr pos:start="339:5" pos:end="339:30"><operator pos:start="339:5" pos:end="339:5">*</operator><name pos:start="339:6" pos:end="339:18">got_frame_ptr</name> <operator pos:start="339:20" pos:end="339:20">=</operator> <operator pos:start="339:22" pos:end="339:22">!</operator><operator pos:start="339:23" pos:end="339:23">!</operator><name pos:start="339:24" pos:end="339:30">samples</name></expr>;</expr_stmt>



    <comment type="block" pos:start="343:5" pos:end="343:41">/* for dual-mono audio (SCE + SCE) */</comment>

    <expr_stmt pos:start="345:5" pos:end="347:82"><expr pos:start="345:5" pos:end="347:81"><name pos:start="345:5" pos:end="345:12">is_dmono</name> <operator pos:start="345:14" pos:end="345:14">=</operator> <name pos:start="345:16" pos:end="345:29"><name pos:start="345:16" pos:end="345:17">ac</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:29">dmono_mode</name></name> <operator pos:start="345:31" pos:end="345:32">&amp;&amp;</operator> <name pos:start="345:34" pos:end="345:42">sce_count</name> <operator pos:start="345:44" pos:end="345:45">==</operator> <literal type="number" pos:start="345:47" pos:end="345:47">2</literal> <operator pos:start="345:49" pos:end="345:50">&amp;&amp;</operator>

               <name pos:start="347:16" pos:end="347:24"><name pos:start="347:16" pos:end="347:17">ac</name><operator pos:start="347:18" pos:end="347:19">-&gt;</operator><name pos:start="347:20" pos:end="347:21">oc</name><index pos:start="347:22" pos:end="347:24">[<expr pos:start="347:23" pos:end="347:23"><literal type="number" pos:start="347:23" pos:end="347:23">1</literal></expr>]</index></name><operator pos:start="347:25" pos:end="347:25">.</operator><name pos:start="347:26" pos:end="347:39">channel_layout</name> <operator pos:start="347:41" pos:end="347:42">==</operator> <operator pos:start="347:44" pos:end="347:44">(</operator><name pos:start="347:45" pos:end="347:60">AV_CH_FRONT_LEFT</name> <operator pos:start="347:62" pos:end="347:62">|</operator> <name pos:start="347:64" pos:end="347:80">AV_CH_FRONT_RIGHT</name><operator pos:start="347:81" pos:end="347:81">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="349:5" pos:end="359:5"><if pos:start="349:5" pos:end="359:5">if <condition pos:start="349:8" pos:end="349:17">(<expr pos:start="349:9" pos:end="349:16"><name pos:start="349:9" pos:end="349:16">is_dmono</name></expr>)</condition> <block pos:start="349:19" pos:end="359:5">{<block_content pos:start="351:9" pos:end="357:67">

        <if_stmt pos:start="351:9" pos:end="357:67"><if pos:start="351:9" pos:end="353:67">if <condition pos:start="351:12" pos:end="351:32">(<expr pos:start="351:13" pos:end="351:31"><name pos:start="351:13" pos:end="351:26"><name pos:start="351:13" pos:end="351:14">ac</name><operator pos:start="351:15" pos:end="351:16">-&gt;</operator><name pos:start="351:17" pos:end="351:26">dmono_mode</name></name> <operator pos:start="351:28" pos:end="351:29">==</operator> <literal type="number" pos:start="351:31" pos:end="351:31">1</literal></expr>)</condition><block type="pseudo" pos:start="353:13" pos:end="353:67"><block_content pos:start="353:13" pos:end="353:67">

            <expr_stmt pos:start="353:13" pos:end="353:67"><expr pos:start="353:13" pos:end="353:66"><operator pos:start="353:13" pos:end="353:13">(</operator><operator pos:start="353:14" pos:end="353:14">(</operator><name pos:start="353:15" pos:end="353:21">AVFrame</name> <operator pos:start="353:23" pos:end="353:23">*</operator><operator pos:start="353:24" pos:end="353:24">)</operator><name pos:start="353:25" pos:end="353:28">data</name><operator pos:start="353:29" pos:end="353:29">)</operator><operator pos:start="353:30" pos:end="353:31">-&gt;</operator><name pos:start="353:32" pos:end="353:38"><name pos:start="353:32" pos:end="353:35">data</name><index pos:start="353:36" pos:end="353:38">[<expr pos:start="353:37" pos:end="353:37"><literal type="number" pos:start="353:37" pos:end="353:37">1</literal></expr>]</index></name> <operator pos:start="353:40" pos:end="353:40">=</operator><operator pos:start="353:41" pos:end="353:41">(</operator><operator pos:start="353:42" pos:end="353:42">(</operator><name pos:start="353:43" pos:end="353:49">AVFrame</name> <operator pos:start="353:51" pos:end="353:51">*</operator><operator pos:start="353:52" pos:end="353:52">)</operator><name pos:start="353:53" pos:end="353:56">data</name><operator pos:start="353:57" pos:end="353:57">)</operator><operator pos:start="353:58" pos:end="353:59">-&gt;</operator><name pos:start="353:60" pos:end="353:66"><name pos:start="353:60" pos:end="353:63">data</name><index pos:start="353:64" pos:end="353:66">[<expr pos:start="353:65" pos:end="353:65"><literal type="number" pos:start="353:65" pos:end="353:65">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="355:9" pos:end="357:67">else if <condition pos:start="355:17" pos:end="355:37">(<expr pos:start="355:18" pos:end="355:36"><name pos:start="355:18" pos:end="355:31"><name pos:start="355:18" pos:end="355:19">ac</name><operator pos:start="355:20" pos:end="355:21">-&gt;</operator><name pos:start="355:22" pos:end="355:31">dmono_mode</name></name> <operator pos:start="355:33" pos:end="355:34">==</operator> <literal type="number" pos:start="355:36" pos:end="355:36">2</literal></expr>)</condition><block type="pseudo" pos:start="357:13" pos:end="357:67"><block_content pos:start="357:13" pos:end="357:67">

            <expr_stmt pos:start="357:13" pos:end="357:67"><expr pos:start="357:13" pos:end="357:66"><operator pos:start="357:13" pos:end="357:13">(</operator><operator pos:start="357:14" pos:end="357:14">(</operator><name pos:start="357:15" pos:end="357:21">AVFrame</name> <operator pos:start="357:23" pos:end="357:23">*</operator><operator pos:start="357:24" pos:end="357:24">)</operator><name pos:start="357:25" pos:end="357:28">data</name><operator pos:start="357:29" pos:end="357:29">)</operator><operator pos:start="357:30" pos:end="357:31">-&gt;</operator><name pos:start="357:32" pos:end="357:38"><name pos:start="357:32" pos:end="357:35">data</name><index pos:start="357:36" pos:end="357:38">[<expr pos:start="357:37" pos:end="357:37"><literal type="number" pos:start="357:37" pos:end="357:37">0</literal></expr>]</index></name> <operator pos:start="357:40" pos:end="357:40">=</operator><operator pos:start="357:41" pos:end="357:41">(</operator><operator pos:start="357:42" pos:end="357:42">(</operator><name pos:start="357:43" pos:end="357:49">AVFrame</name> <operator pos:start="357:51" pos:end="357:51">*</operator><operator pos:start="357:52" pos:end="357:52">)</operator><name pos:start="357:53" pos:end="357:56">data</name><operator pos:start="357:57" pos:end="357:57">)</operator><operator pos:start="357:58" pos:end="357:59">-&gt;</operator><name pos:start="357:60" pos:end="357:66"><name pos:start="357:60" pos:end="357:63">data</name><index pos:start="357:64" pos:end="357:66">[<expr pos:start="357:65" pos:end="357:65"><literal type="number" pos:start="357:65" pos:end="357:65">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="363:5" pos:end="363:13">return <expr pos:start="363:12" pos:end="363:12"><literal type="number" pos:start="363:12" pos:end="363:12">0</literal></expr>;</return>

<label pos:start="365:1" pos:end="365:5"><name pos:start="365:1" pos:end="365:4">fail</name>:</label>

    <expr_stmt pos:start="367:5" pos:end="367:33"><expr pos:start="367:5" pos:end="367:32"><call pos:start="367:5" pos:end="367:32"><name pos:start="367:5" pos:end="367:28">pop_output_configuration</name><argument_list pos:start="367:29" pos:end="367:32">(<argument pos:start="367:30" pos:end="367:31"><expr pos:start="367:30" pos:end="367:31"><name pos:start="367:30" pos:end="367:31">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="369:5" pos:end="369:15">return <expr pos:start="369:12" pos:end="369:14"><name pos:start="369:12" pos:end="369:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
