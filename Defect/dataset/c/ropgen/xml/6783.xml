<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6783.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">tcg_out_setcond_i32</name><parameter_list pos:start="1:32" pos:end="3:67">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:42">TCGContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:54">TCGCond</name></type> <name pos:start="1:56" pos:end="1:59">cond</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:71"><decl pos:start="1:62" pos:end="1:71"><type pos:start="1:62" pos:end="1:71"><name pos:start="1:62" pos:end="1:67">TCGReg</name></type> <name pos:start="1:69" pos:end="1:71">ret</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:41"><decl pos:start="3:33" pos:end="3:41"><type pos:start="3:33" pos:end="3:41"><name pos:start="3:33" pos:end="3:38">TCGReg</name></type> <name pos:start="3:40" pos:end="3:41">c1</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:53"><decl pos:start="3:44" pos:end="3:53"><type pos:start="3:44" pos:end="3:53"><name pos:start="3:44" pos:end="3:50">int32_t</name></type> <name pos:start="3:52" pos:end="3:53">c2</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:66"><decl pos:start="3:56" pos:end="3:66"><type pos:start="3:56" pos:end="3:66"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:66">c2const</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="97:1">{<block_content pos:start="9:5" pos:end="95:5">

    <comment type="block" pos:start="7:5" pos:end="7:68">/* For 32-bit comparisons, we can play games with ADDX/SUBX.  */</comment>

    <switch pos:start="9:5" pos:end="81:5">switch <condition pos:start="9:12" pos:end="9:17">(<expr pos:start="9:13" pos:end="9:16"><name pos:start="9:13" pos:end="9:16">cond</name></expr>)</condition> <block pos:start="9:19" pos:end="81:5">{<block_content pos:start="11:5" pos:end="79:15">

    <case pos:start="11:5" pos:end="11:22">case <expr pos:start="11:10" pos:end="11:21"><name pos:start="11:10" pos:end="11:21">TCG_COND_LTU</name></expr>:</case>

    <case pos:start="13:5" pos:end="13:22">case <expr pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:21">TCG_COND_GEU</name></expr>:</case>

        <comment type="block" pos:start="15:9" pos:end="15:64">/* The result of the comparison is in the carry bit.  */</comment>

        <break pos:start="17:9" pos:end="17:14">break;</break>



    <case pos:start="21:5" pos:end="21:21">case <expr pos:start="21:10" pos:end="21:20"><name pos:start="21:10" pos:end="21:20">TCG_COND_EQ</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:21">case <expr pos:start="23:10" pos:end="23:20"><name pos:start="23:10" pos:end="23:20">TCG_COND_NE</name></expr>:</case>

        <comment type="block" pos:start="25:9" pos:end="25:68">/* For equality, we can transform to inequality vs zero.  */</comment>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:14">c2</name> <operator pos:start="27:16" pos:end="27:17">!=</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition> <block pos:start="27:22" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:63">

            <expr_stmt pos:start="29:13" pos:end="29:63"><expr pos:start="29:13" pos:end="29:62"><call pos:start="29:13" pos:end="29:62"><name pos:start="29:13" pos:end="29:26">tcg_out_arithc</name><argument_list pos:start="29:27" pos:end="29:62">(<argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">s</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">ret</name></expr></argument>, <argument pos:start="29:36" pos:end="29:37"><expr pos:start="29:36" pos:end="29:37"><name pos:start="29:36" pos:end="29:37">c1</name></expr></argument>, <argument pos:start="29:40" pos:end="29:41"><expr pos:start="29:40" pos:end="29:41"><name pos:start="29:40" pos:end="29:41">c2</name></expr></argument>, <argument pos:start="29:44" pos:end="29:50"><expr pos:start="29:44" pos:end="29:50"><name pos:start="29:44" pos:end="29:50">c2const</name></expr></argument>, <argument pos:start="29:53" pos:end="29:61"><expr pos:start="29:53" pos:end="29:61"><name pos:start="29:53" pos:end="29:61">ARITH_XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:10">c1</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:23">TCG_REG_G0</name></expr><operator pos:start="33:24" pos:end="33:24">,</operator> <expr pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:27">c2</name> <operator pos:start="33:29" pos:end="33:29">=</operator> <name pos:start="33:31" pos:end="33:33">ret</name></expr><operator pos:start="33:34" pos:end="33:34">,</operator> <expr pos:start="33:36" pos:end="33:46"><name pos:start="33:36" pos:end="33:42">c2const</name> <operator pos:start="33:44" pos:end="33:44">=</operator> <literal type="number" pos:start="33:46" pos:end="33:46">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:67"><expr pos:start="35:9" pos:end="35:66"><name pos:start="35:9" pos:end="35:12">cond</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <operator pos:start="35:16" pos:end="35:16">(</operator><ternary pos:start="35:17" pos:end="35:65"><condition pos:start="35:17" pos:end="35:37"><expr pos:start="35:17" pos:end="35:35"><name pos:start="35:17" pos:end="35:20">cond</name> <operator pos:start="35:22" pos:end="35:23">==</operator> <name pos:start="35:25" pos:end="35:35">TCG_COND_EQ</name></expr> ?</condition><then pos:start="35:39" pos:end="35:50"> <expr pos:start="35:39" pos:end="35:50"><name pos:start="35:39" pos:end="35:50">TCG_COND_GEU</name></expr> </then><else pos:start="35:52" pos:end="35:65">: <expr pos:start="35:54" pos:end="35:65"><name pos:start="35:54" pos:end="35:65">TCG_COND_LTU</name></expr></else></ternary><operator pos:start="35:66" pos:end="35:66">)</operator></expr>;</expr_stmt>

	<break pos:start="37:9" pos:end="37:14">break;</break>



    <case pos:start="41:5" pos:end="41:22">case <expr pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:21">TCG_COND_GTU</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:22">case <expr pos:start="43:10" pos:end="43:21"><name pos:start="43:10" pos:end="43:21">TCG_COND_LEU</name></expr>:</case>

        <comment type="block" pos:start="45:9" pos:end="49:54">/* If we don't need to load a constant into a register, we can

           swap the operands on GTU/LEU.  There's no benefit to loading

           the constant into a temporary register.  */</comment>

        <if_stmt pos:start="51:9" pos:end="65:9"><if pos:start="51:9" pos:end="65:9">if <condition pos:start="51:12" pos:end="51:32">(<expr pos:start="51:13" pos:end="51:31"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:20">c2const</name> <operator pos:start="51:22" pos:end="51:23">||</operator> <name pos:start="51:25" pos:end="51:26">c2</name> <operator pos:start="51:28" pos:end="51:29">==</operator> <literal type="number" pos:start="51:31" pos:end="51:31">0</literal></expr>)</condition> <block pos:start="51:34" pos:end="65:9">{<block_content pos:start="53:13" pos:end="63:18">

            <decl_stmt pos:start="53:13" pos:end="53:26"><decl pos:start="53:13" pos:end="53:25"><type pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:18">TCGReg</name></type> <name pos:start="53:20" pos:end="53:20">t</name> <init pos:start="53:22" pos:end="53:25">= <expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">c1</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:14">c1</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:19">c2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:19"><expr pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:14">c2</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:18">t</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:24"><expr pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:19">c2const</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <literal type="number" pos:start="59:23" pos:end="59:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:39"><expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:16">cond</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:38"><name pos:start="61:20" pos:end="61:32">tcg_swap_cond</name><argument_list pos:start="61:33" pos:end="61:38">(<argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="67:9" pos:end="67:22">/* FALLTHRU */</comment>



    <default pos:start="71:5" pos:end="71:12">default:</default>

        <expr_stmt pos:start="73:9" pos:end="73:40"><expr pos:start="73:9" pos:end="73:39"><call pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:19">tcg_out_cmp</name><argument_list pos:start="73:20" pos:end="73:39">(<argument pos:start="73:21" pos:end="73:21"><expr pos:start="73:21" pos:end="73:21"><name pos:start="73:21" pos:end="73:21">s</name></expr></argument>, <argument pos:start="73:24" pos:end="73:25"><expr pos:start="73:24" pos:end="73:25"><name pos:start="73:24" pos:end="73:25">c1</name></expr></argument>, <argument pos:start="73:28" pos:end="73:29"><expr pos:start="73:28" pos:end="73:29"><name pos:start="73:28" pos:end="73:29">c2</name></expr></argument>, <argument pos:start="73:32" pos:end="73:38"><expr pos:start="73:32" pos:end="73:38"><name pos:start="73:32" pos:end="73:38">c2const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><call pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:26">tcg_out_movi_imm13</name><argument_list pos:start="75:27" pos:end="75:37">(<argument pos:start="75:28" pos:end="75:28"><expr pos:start="75:28" pos:end="75:28"><name pos:start="75:28" pos:end="75:28">s</name></expr></argument>, <argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">ret</name></expr></argument>, <argument pos:start="75:36" pos:end="75:36"><expr pos:start="75:36" pos:end="75:36"><literal type="number" pos:start="75:36" pos:end="75:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:53"><expr pos:start="77:9" pos:end="77:52"><call pos:start="77:9" pos:end="77:52"><name pos:start="77:9" pos:end="77:21">tcg_out_movcc</name><argument_list pos:start="77:22" pos:end="77:52">(<argument pos:start="77:23" pos:end="77:23"><expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">s</name></expr></argument>, <argument pos:start="77:26" pos:end="77:29"><expr pos:start="77:26" pos:end="77:29"><name pos:start="77:26" pos:end="77:29">cond</name></expr></argument>, <argument pos:start="77:32" pos:end="77:40"><expr pos:start="77:32" pos:end="77:40"><name pos:start="77:32" pos:end="77:40">MOVCC_ICC</name></expr></argument>, <argument pos:start="77:43" pos:end="77:45"><expr pos:start="77:43" pos:end="77:45"><name pos:start="77:43" pos:end="77:45">ret</name></expr></argument>, <argument pos:start="77:48" pos:end="77:48"><expr pos:start="77:48" pos:end="77:48"><literal type="number" pos:start="77:48" pos:end="77:48">1</literal></expr></argument>, <argument pos:start="77:51" pos:end="77:51"><expr pos:start="77:51" pos:end="77:51"><literal type="number" pos:start="77:51" pos:end="77:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:15">return;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="85:5" pos:end="85:36"><expr pos:start="85:5" pos:end="85:35"><call pos:start="85:5" pos:end="85:35"><name pos:start="85:5" pos:end="85:15">tcg_out_cmp</name><argument_list pos:start="85:16" pos:end="85:35">(<argument pos:start="85:17" pos:end="85:17"><expr pos:start="85:17" pos:end="85:17"><name pos:start="85:17" pos:end="85:17">s</name></expr></argument>, <argument pos:start="85:20" pos:end="85:21"><expr pos:start="85:20" pos:end="85:21"><name pos:start="85:20" pos:end="85:21">c1</name></expr></argument>, <argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">c2</name></expr></argument>, <argument pos:start="85:28" pos:end="85:34"><expr pos:start="85:28" pos:end="85:34"><name pos:start="85:28" pos:end="85:34">c2const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:29">(<expr pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:12">cond</name> <operator pos:start="87:14" pos:end="87:15">==</operator> <name pos:start="87:17" pos:end="87:28">TCG_COND_LTU</name></expr>)</condition> <block pos:start="87:31" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:58">

        <expr_stmt pos:start="89:9" pos:end="89:58"><expr pos:start="89:9" pos:end="89:57"><call pos:start="89:9" pos:end="89:57"><name pos:start="89:9" pos:end="89:22">tcg_out_arithi</name><argument_list pos:start="89:23" pos:end="89:57">(<argument pos:start="89:24" pos:end="89:24"><expr pos:start="89:24" pos:end="89:24"><name pos:start="89:24" pos:end="89:24">s</name></expr></argument>, <argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><name pos:start="89:27" pos:end="89:29">ret</name></expr></argument>, <argument pos:start="89:32" pos:end="89:41"><expr pos:start="89:32" pos:end="89:41"><name pos:start="89:32" pos:end="89:41">TCG_REG_G0</name></expr></argument>, <argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">0</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:56"><expr pos:start="89:47" pos:end="89:56"><name pos:start="89:47" pos:end="89:56">ARITH_ADDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="95:5">else <block pos:start="91:12" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:59">

        <expr_stmt pos:start="93:9" pos:end="93:59"><expr pos:start="93:9" pos:end="93:58"><call pos:start="93:9" pos:end="93:58"><name pos:start="93:9" pos:end="93:22">tcg_out_arithi</name><argument_list pos:start="93:23" pos:end="93:58">(<argument pos:start="93:24" pos:end="93:24"><expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">s</name></expr></argument>, <argument pos:start="93:27" pos:end="93:29"><expr pos:start="93:27" pos:end="93:29"><name pos:start="93:27" pos:end="93:29">ret</name></expr></argument>, <argument pos:start="93:32" pos:end="93:41"><expr pos:start="93:32" pos:end="93:41"><name pos:start="93:32" pos:end="93:41">TCG_REG_G0</name></expr></argument>, <argument pos:start="93:44" pos:end="93:45"><expr pos:start="93:44" pos:end="93:45"><operator pos:start="93:44" pos:end="93:44">-</operator><literal type="number" pos:start="93:45" pos:end="93:45">1</literal></expr></argument>, <argument pos:start="93:48" pos:end="93:57"><expr pos:start="93:48" pos:end="93:57"><name pos:start="93:48" pos:end="93:57">ARITH_SUBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
