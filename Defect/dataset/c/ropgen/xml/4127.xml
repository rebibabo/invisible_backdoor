<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4127.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:42">aio_read_response</name><parameter_list pos:start="1:43" pos:end="1:56">(<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="243:1">{<block_content pos:start="5:5" pos:end="241:22">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">SheepdogObjRsp</name></type> <name pos:start="5:20" pos:end="5:22">rsp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">BDRVSheepdogState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">s</name> <init pos:start="7:26" pos:end="7:33">= <expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name> <init pos:start="9:12" pos:end="9:18">= <expr pos:start="9:14" pos:end="9:18"><name pos:start="9:14" pos:end="9:18"><name pos:start="9:14" pos:end="9:14">s</name><operator pos:start="9:15" pos:end="9:16">-&gt;</operator><name pos:start="9:17" pos:end="9:18">fd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">AIOReq</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:19">aio_req</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">SheepdogAIOCB</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:16">idx</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:43">(<expr pos:start="21:9" pos:end="21:42"><call pos:start="21:9" pos:end="21:42"><name pos:start="21:9" pos:end="21:19">QLIST_EMPTY</name><argument_list pos:start="21:20" pos:end="21:42">(<argument pos:start="21:21" pos:end="21:41"><expr pos:start="21:21" pos:end="21:41"><operator pos:start="21:21" pos:end="21:21">&amp;</operator><name pos:start="21:22" pos:end="21:41"><name pos:start="21:22" pos:end="21:22">s</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:41">inflight_aio_head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:45" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <goto pos:start="23:9" pos:end="23:17">goto <name pos:start="23:14" pos:end="23:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:23">/* read a header */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:45"><name pos:start="31:11" pos:end="31:22">qemu_co_recv</name><argument_list pos:start="31:23" pos:end="31:45">(<argument pos:start="31:24" pos:end="31:25"><expr pos:start="31:24" pos:end="31:25"><name pos:start="31:24" pos:end="31:25">fd</name></expr></argument>, <argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:31">rsp</name></expr></argument>, <argument pos:start="31:34" pos:end="31:44"><expr pos:start="31:34" pos:end="31:44"><sizeof pos:start="31:34" pos:end="31:44">sizeof<argument_list pos:start="31:40" pos:end="31:44">(<argument pos:start="31:41" pos:end="31:43"><expr pos:start="31:41" pos:end="31:43"><name pos:start="31:41" pos:end="31:43">rsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:17">

        <expr_stmt pos:start="35:9" pos:end="35:70"><expr pos:start="35:9" pos:end="35:69"><call pos:start="35:9" pos:end="35:69"><name pos:start="35:9" pos:end="35:20">error_report</name><argument_list pos:start="35:21" pos:end="35:69">(<argument pos:start="35:22" pos:end="35:51"><expr pos:start="35:22" pos:end="35:51"><literal type="string" pos:start="35:22" pos:end="35:51">"failed to get the header, %s"</literal></expr></argument>, <argument pos:start="35:54" pos:end="35:68"><expr pos:start="35:54" pos:end="35:68"><call pos:start="35:54" pos:end="35:68"><name pos:start="35:54" pos:end="35:61">strerror</name><argument_list pos:start="35:62" pos:end="35:68">(<argument pos:start="35:63" pos:end="35:67"><expr pos:start="35:63" pos:end="35:67"><name pos:start="35:63" pos:end="35:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:59">/* find the right aio_req from the inflight aio list */</comment>

    <macro pos:start="45:5" pos:end="45:63"><name pos:start="45:5" pos:end="45:17">QLIST_FOREACH</name><argument_list pos:start="45:18" pos:end="45:63">(<argument pos:start="45:19" pos:end="45:25">aio_req</argument>, <argument pos:start="45:28" pos:end="45:48">&amp;s-&gt;inflight_aio_head</argument>, <argument pos:start="45:51" pos:end="45:62">aio_siblings</argument>)</argument_list></macro> <block pos:start="45:65" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:9">

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:34">(<expr pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:19">aio_req</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:23">id</name></name> <operator pos:start="47:25" pos:end="47:26">==</operator> <name pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:30">rsp</name><operator pos:start="47:31" pos:end="47:31">.</operator><name pos:start="47:32" pos:end="47:33">id</name></name></expr>)</condition> <block pos:start="47:36" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:18">

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:17">(<expr pos:start="55:9" pos:end="55:16"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:16">aio_req</name></expr>)</condition> <block pos:start="55:19" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:17">

        <expr_stmt pos:start="57:9" pos:end="57:55"><expr pos:start="57:9" pos:end="57:54"><call pos:start="57:9" pos:end="57:54"><name pos:start="57:9" pos:end="57:20">error_report</name><argument_list pos:start="57:21" pos:end="57:54">(<argument pos:start="57:22" pos:end="57:45"><expr pos:start="57:22" pos:end="57:45"><literal type="string" pos:start="57:22" pos:end="57:45">"cannot find aio_req %x"</literal></expr></argument>, <argument pos:start="57:48" pos:end="57:53"><expr pos:start="57:48" pos:end="57:53"><name pos:start="57:48" pos:end="57:53"><name pos:start="57:48" pos:end="57:50">rsp</name><operator pos:start="57:51" pos:end="57:51">.</operator><name pos:start="57:52" pos:end="57:53">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:17">goto <name pos:start="59:14" pos:end="59:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:7">acb</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <name pos:start="65:11" pos:end="65:24"><name pos:start="65:11" pos:end="65:17">aio_req</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:24">aiocb</name></name></expr>;</expr_stmt>



    <switch pos:start="69:5" pos:end="189:5">switch <condition pos:start="69:12" pos:end="69:28">(<expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:15">acb</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:27">aiocb_type</name></name></expr>)</condition> <block pos:start="69:30" pos:end="189:5">{<block_content pos:start="71:5" pos:end="187:9">

    <case pos:start="71:5" pos:end="71:27">case <expr pos:start="71:10" pos:end="71:26"><name pos:start="71:10" pos:end="71:26">AIOCB_WRITE_UDATA</name></expr>:</case>

        <comment type="block" pos:start="73:9" pos:end="75:60">/* this coroutine context is no longer suitable for co_recv

         * because we may send data to update vdi objects */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:18">co_recv</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:25">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:39">(<expr pos:start="79:13" pos:end="79:38"><operator pos:start="79:13" pos:end="79:13">!</operator><call pos:start="79:14" pos:end="79:38"><name pos:start="79:14" pos:end="79:24">is_data_obj</name><argument_list pos:start="79:25" pos:end="79:38">(<argument pos:start="79:26" pos:end="79:37"><expr pos:start="79:26" pos:end="79:37"><name pos:start="79:26" pos:end="79:37"><name pos:start="79:26" pos:end="79:32">aio_req</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:37">oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:41" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:18">

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:11">idx</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:43"><name pos:start="85:15" pos:end="85:29">data_oid_to_idx</name><argument_list pos:start="85:30" pos:end="85:43">(<argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:37">aio_req</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:42">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="125:9"><if pos:start="89:9" pos:end="125:9">if <condition pos:start="89:12" pos:end="89:57">(<expr pos:start="89:13" pos:end="89:56"><name pos:start="89:13" pos:end="89:37"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:20">inode</name><operator pos:start="89:21" pos:end="89:21">.</operator><name pos:start="89:22" pos:end="89:32">data_vdi_id</name><index pos:start="89:33" pos:end="89:37">[<expr pos:start="89:34" pos:end="89:36"><name pos:start="89:34" pos:end="89:36">idx</name></expr>]</index></name> <operator pos:start="89:39" pos:end="89:40">!=</operator> <name pos:start="89:42" pos:end="89:56"><name pos:start="89:42" pos:end="89:42">s</name><operator pos:start="89:43" pos:end="89:44">-&gt;</operator><name pos:start="89:45" pos:end="89:49">inode</name><operator pos:start="89:50" pos:end="89:50">.</operator><name pos:start="89:51" pos:end="89:56">vdi_id</name></name></expr>)</condition> <block pos:start="89:59" pos:end="125:9">{<block_content pos:start="103:13" pos:end="123:46">

            <comment type="block" pos:start="91:13" pos:end="101:15">/*

             * If the object is newly created one, we need to update

             * the vdi object (metadata object).  min_dirty_data_idx

             * and max_dirty_data_idx are changed to include updated

             * index between them.

             */</comment>

            <if_stmt pos:start="103:13" pos:end="111:13"><if pos:start="103:13" pos:end="111:13">if <condition pos:start="103:16" pos:end="103:45">(<expr pos:start="103:17" pos:end="103:44"><name pos:start="103:17" pos:end="103:26"><name pos:start="103:17" pos:end="103:19">rsp</name><operator pos:start="103:20" pos:end="103:20">.</operator><name pos:start="103:21" pos:end="103:26">result</name></name> <operator pos:start="103:28" pos:end="103:29">==</operator> <name pos:start="103:31" pos:end="103:44">SD_RES_SUCCESS</name></expr>)</condition> <block pos:start="103:47" pos:end="111:13">{<block_content pos:start="105:17" pos:end="109:72">

                <expr_stmt pos:start="105:17" pos:end="105:60"><expr pos:start="105:17" pos:end="105:59"><name pos:start="105:17" pos:end="105:41"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:24">inode</name><operator pos:start="105:25" pos:end="105:25">.</operator><name pos:start="105:26" pos:end="105:36">data_vdi_id</name><index pos:start="105:37" pos:end="105:41">[<expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:40">idx</name></expr>]</index></name> <operator pos:start="105:43" pos:end="105:43">=</operator> <name pos:start="105:45" pos:end="105:59"><name pos:start="105:45" pos:end="105:45">s</name><operator pos:start="105:46" pos:end="105:47">-&gt;</operator><name pos:start="105:48" pos:end="105:52">inode</name><operator pos:start="105:53" pos:end="105:53">.</operator><name pos:start="105:54" pos:end="105:59">vdi_id</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:72"><expr pos:start="107:17" pos:end="107:71"><name pos:start="107:17" pos:end="107:37"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:37">max_dirty_data_idx</name></name> <operator pos:start="107:39" pos:end="107:39">=</operator> <call pos:start="107:41" pos:end="107:71"><name pos:start="107:41" pos:end="107:43">MAX</name><argument_list pos:start="107:44" pos:end="107:71">(<argument pos:start="107:45" pos:end="107:47"><expr pos:start="107:45" pos:end="107:47"><name pos:start="107:45" pos:end="107:47">idx</name></expr></argument>, <argument pos:start="107:50" pos:end="107:70"><expr pos:start="107:50" pos:end="107:70"><name pos:start="107:50" pos:end="107:70"><name pos:start="107:50" pos:end="107:50">s</name><operator pos:start="107:51" pos:end="107:52">-&gt;</operator><name pos:start="107:53" pos:end="107:70">max_dirty_data_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:72"><expr pos:start="109:17" pos:end="109:71"><name pos:start="109:17" pos:end="109:37"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:37">min_dirty_data_idx</name></name> <operator pos:start="109:39" pos:end="109:39">=</operator> <call pos:start="109:41" pos:end="109:71"><name pos:start="109:41" pos:end="109:43">MIN</name><argument_list pos:start="109:44" pos:end="109:71">(<argument pos:start="109:45" pos:end="109:47"><expr pos:start="109:45" pos:end="109:47"><name pos:start="109:45" pos:end="109:47">idx</name></expr></argument>, <argument pos:start="109:50" pos:end="109:70"><expr pos:start="109:50" pos:end="109:70"><name pos:start="109:50" pos:end="109:70"><name pos:start="109:50" pos:end="109:50">s</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:70">min_dirty_data_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="113:13" pos:end="121:15">/*

             * Some requests may be blocked because simultaneous

             * create requests are not allowed, so we search the

             * pending requests here.

             */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:46"><expr pos:start="123:13" pos:end="123:45"><call pos:start="123:13" pos:end="123:45"><name pos:start="123:13" pos:end="123:28">send_pending_req</name><argument_list pos:start="123:29" pos:end="123:45">(<argument pos:start="123:30" pos:end="123:30"><expr pos:start="123:30" pos:end="123:30"><name pos:start="123:30" pos:end="123:30">s</name></expr></argument>, <argument pos:start="123:33" pos:end="123:44"><expr pos:start="123:33" pos:end="123:44"><name pos:start="123:33" pos:end="123:44"><name pos:start="123:33" pos:end="123:39">aio_req</name><operator pos:start="123:40" pos:end="123:41">-&gt;</operator><name pos:start="123:42" pos:end="123:44">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:26">case <expr pos:start="129:10" pos:end="129:25"><name pos:start="129:10" pos:end="129:25">AIOCB_READ_UDATA</name></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="133:66"><expr pos:start="131:9" pos:end="133:65"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="133:65"><name pos:start="131:15" pos:end="131:27">qemu_co_recvv</name><argument_list pos:start="131:28" pos:end="133:65">(<argument pos:start="131:29" pos:end="131:30"><expr pos:start="131:29" pos:end="131:30"><name pos:start="131:29" pos:end="131:30">fd</name></expr></argument>, <argument pos:start="131:33" pos:end="131:46"><expr pos:start="131:33" pos:end="131:46"><name pos:start="131:33" pos:end="131:46"><name pos:start="131:33" pos:end="131:35">acb</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:41">qiov</name><operator pos:start="131:42" pos:end="131:43">-&gt;</operator><name pos:start="131:44" pos:end="131:46">iov</name></name></expr></argument>, <argument pos:start="131:49" pos:end="131:63"><expr pos:start="131:49" pos:end="131:63"><name pos:start="131:49" pos:end="131:63"><name pos:start="131:49" pos:end="131:51">acb</name><operator pos:start="131:52" pos:end="131:53">-&gt;</operator><name pos:start="131:54" pos:end="131:57">qiov</name><operator pos:start="131:58" pos:end="131:59">-&gt;</operator><name pos:start="131:60" pos:end="131:63">niov</name></name></expr></argument>,

                            <argument pos:start="133:29" pos:end="133:47"><expr pos:start="133:29" pos:end="133:47"><name pos:start="133:29" pos:end="133:47"><name pos:start="133:29" pos:end="133:35">aio_req</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:47">iov_offset</name></name></expr></argument>, <argument pos:start="133:50" pos:end="133:64"><expr pos:start="133:50" pos:end="133:64"><name pos:start="133:50" pos:end="133:64"><name pos:start="133:50" pos:end="133:52">rsp</name><operator pos:start="133:53" pos:end="133:53">.</operator><name pos:start="133:54" pos:end="133:64">data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:20">(<expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:15">ret</name> <operator pos:start="135:17" pos:end="135:17">&lt;</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>)</condition> <block pos:start="135:22" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:21">

            <expr_stmt pos:start="137:13" pos:end="137:72"><expr pos:start="137:13" pos:end="137:71"><call pos:start="137:13" pos:end="137:71"><name pos:start="137:13" pos:end="137:24">error_report</name><argument_list pos:start="137:25" pos:end="137:71">(<argument pos:start="137:26" pos:end="137:53"><expr pos:start="137:26" pos:end="137:53"><literal type="string" pos:start="137:26" pos:end="137:53">"failed to get the data, %s"</literal></expr></argument>, <argument pos:start="137:56" pos:end="137:70"><expr pos:start="137:56" pos:end="137:70"><call pos:start="137:56" pos:end="137:70"><name pos:start="137:56" pos:end="137:63">strerror</name><argument_list pos:start="137:64" pos:end="137:70">(<argument pos:start="137:65" pos:end="137:69"><expr pos:start="137:65" pos:end="137:69"><name pos:start="137:65" pos:end="137:69">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="139:13" pos:end="139:21">goto <name pos:start="139:18" pos:end="139:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:27">case <expr pos:start="145:10" pos:end="145:26"><name pos:start="145:10" pos:end="145:26">AIOCB_FLUSH_CACHE</name></expr>:</case>

        <if_stmt pos:start="147:9" pos:end="155:9"><if pos:start="147:9" pos:end="155:9">if <condition pos:start="147:12" pos:end="147:47">(<expr pos:start="147:13" pos:end="147:46"><name pos:start="147:13" pos:end="147:22"><name pos:start="147:13" pos:end="147:15">rsp</name><operator pos:start="147:16" pos:end="147:16">.</operator><name pos:start="147:17" pos:end="147:22">result</name></name> <operator pos:start="147:24" pos:end="147:25">==</operator> <name pos:start="147:27" pos:end="147:46">SD_RES_INVALID_PARMS</name></expr>)</condition> <block pos:start="147:49" pos:end="155:9">{<block_content pos:start="149:13" pos:end="153:40">

            <expr_stmt pos:start="149:13" pos:end="149:75"><expr pos:start="149:13" pos:end="149:74"><call pos:start="149:13" pos:end="149:74"><name pos:start="149:13" pos:end="149:19">DPRINTF</name><argument_list pos:start="149:20" pos:end="149:74">(<argument pos:start="149:21" pos:end="149:73"><expr pos:start="149:21" pos:end="149:73"><literal type="string" pos:start="149:21" pos:end="149:73">"disable cache since the server doesn't support it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:48"><expr pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:26">cache_flags</name></name> <operator pos:start="151:28" pos:end="151:28">=</operator> <name pos:start="151:30" pos:end="151:47">SD_FLAG_CMD_DIRECT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:40"><expr pos:start="153:13" pos:end="153:39"><name pos:start="153:13" pos:end="153:22"><name pos:start="153:13" pos:end="153:15">rsp</name><operator pos:start="153:16" pos:end="153:16">.</operator><name pos:start="153:17" pos:end="153:22">result</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:39">SD_RES_SUCCESS</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    <case pos:start="159:5" pos:end="159:27">case <expr pos:start="159:10" pos:end="159:26"><name pos:start="159:10" pos:end="159:26">AIOCB_DISCARD_OBJ</name></expr>:</case>

        <switch pos:start="161:9" pos:end="187:9">switch <condition pos:start="161:16" pos:end="161:27">(<expr pos:start="161:17" pos:end="161:26"><name pos:start="161:17" pos:end="161:26"><name pos:start="161:17" pos:end="161:19">rsp</name><operator pos:start="161:20" pos:end="161:20">.</operator><name pos:start="161:21" pos:end="161:26">result</name></name></expr>)</condition> <block pos:start="161:29" pos:end="187:9">{<block_content pos:start="163:9" pos:end="185:18">

        <case pos:start="163:9" pos:end="163:34">case <expr pos:start="163:14" pos:end="163:33"><name pos:start="163:14" pos:end="163:33">SD_RES_INVALID_PARMS</name></expr>:</case>

            <expr_stmt pos:start="165:13" pos:end="167:39"><expr pos:start="165:13" pos:end="167:38"><call pos:start="165:13" pos:end="167:38"><name pos:start="165:13" pos:end="165:24">error_report</name><argument_list pos:start="165:25" pos:end="167:38">(<argument pos:start="165:26" pos:end="165:68"><expr pos:start="165:26" pos:end="165:68"><literal type="string" pos:start="165:26" pos:end="165:68">"sheep(%s) doesn't support discard command"</literal></expr></argument>,

                         <argument pos:start="167:26" pos:end="167:37"><expr pos:start="167:26" pos:end="167:37"><name pos:start="167:26" pos:end="167:37"><name pos:start="167:26" pos:end="167:26">s</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:37">host_spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:40"><expr pos:start="169:13" pos:end="169:39"><name pos:start="169:13" pos:end="169:22"><name pos:start="169:13" pos:end="169:15">rsp</name><operator pos:start="169:16" pos:end="169:16">.</operator><name pos:start="169:17" pos:end="169:22">result</name></name> <operator pos:start="169:24" pos:end="169:24">=</operator> <name pos:start="169:26" pos:end="169:39">SD_RES_SUCCESS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:41"><expr pos:start="171:13" pos:end="171:40"><name pos:start="171:13" pos:end="171:32"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:32">discard_supported</name></name> <operator pos:start="171:34" pos:end="171:34">=</operator> <name pos:start="171:36" pos:end="171:40">false</name></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:28">case <expr pos:start="175:14" pos:end="175:27"><name pos:start="175:14" pos:end="175:27">SD_RES_SUCCESS</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:48"><expr pos:start="177:13" pos:end="177:47"><name pos:start="177:13" pos:end="177:15">idx</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:47"><name pos:start="177:19" pos:end="177:33">data_oid_to_idx</name><argument_list pos:start="177:34" pos:end="177:47">(<argument pos:start="177:35" pos:end="177:46"><expr pos:start="177:35" pos:end="177:46"><name pos:start="177:35" pos:end="177:46"><name pos:start="177:35" pos:end="177:41">aio_req</name><operator pos:start="177:42" pos:end="177:43">-&gt;</operator><name pos:start="177:44" pos:end="177:46">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:42"><expr pos:start="179:13" pos:end="179:41"><name pos:start="179:13" pos:end="179:37"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:20">inode</name><operator pos:start="179:21" pos:end="179:21">.</operator><name pos:start="179:22" pos:end="179:32">data_vdi_id</name><index pos:start="179:33" pos:end="179:37">[<expr pos:start="179:34" pos:end="179:36"><name pos:start="179:34" pos:end="179:36">idx</name></expr>]</index></name> <operator pos:start="179:39" pos:end="179:39">=</operator> <literal type="number" pos:start="179:41" pos:end="179:41">0</literal></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <default pos:start="183:9" pos:end="183:16">default:</default>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></switch>



    <switch pos:start="193:5" pos:end="219:5">switch <condition pos:start="193:12" pos:end="193:23">(<expr pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:15">rsp</name><operator pos:start="193:16" pos:end="193:16">.</operator><name pos:start="193:17" pos:end="193:22">result</name></name></expr>)</condition> <block pos:start="193:25" pos:end="219:5">{<block_content pos:start="195:5" pos:end="217:14">

    <case pos:start="195:5" pos:end="195:24">case <expr pos:start="195:10" pos:end="195:23"><name pos:start="195:10" pos:end="195:23">SD_RES_SUCCESS</name></expr>:</case>

        <break pos:start="197:9" pos:end="197:14">break;</break>

    <case pos:start="199:5" pos:end="199:25">case <expr pos:start="199:10" pos:end="199:24"><name pos:start="199:10" pos:end="199:24">SD_RES_READONLY</name></expr>:</case>

        <expr_stmt pos:start="201:9" pos:end="201:40"><expr pos:start="201:9" pos:end="201:39"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <call pos:start="201:15" pos:end="201:39"><name pos:start="201:15" pos:end="201:27">resend_aioreq</name><argument_list pos:start="201:28" pos:end="201:39">(<argument pos:start="201:29" pos:end="201:29"><expr pos:start="201:29" pos:end="201:29"><name pos:start="201:29" pos:end="201:29">s</name></expr></argument>, <argument pos:start="201:32" pos:end="201:38"><expr pos:start="201:32" pos:end="201:38"><name pos:start="201:32" pos:end="201:38">aio_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="207:9"><if pos:start="203:9" pos:end="207:9">if <condition pos:start="203:12" pos:end="203:34">(<expr pos:start="203:13" pos:end="203:33"><name pos:start="203:13" pos:end="203:15">ret</name> <operator pos:start="203:17" pos:end="203:18">==</operator> <name pos:start="203:20" pos:end="203:33">SD_RES_SUCCESS</name></expr>)</condition> <block pos:start="203:36" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:21">

            <goto pos:start="205:13" pos:end="205:21">goto <name pos:start="205:18" pos:end="205:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="209:9" pos:end="209:26">/* fall through */</comment>

    <default pos:start="211:5" pos:end="211:12">default:</default>

        <expr_stmt pos:start="213:9" pos:end="213:24"><expr pos:start="213:9" pos:end="213:23"><name pos:start="213:9" pos:end="213:16"><name pos:start="213:9" pos:end="213:11">acb</name><operator pos:start="213:12" pos:end="213:13">-&gt;</operator><name pos:start="213:14" pos:end="213:16">ret</name></name> <operator pos:start="213:18" pos:end="213:18">=</operator> <operator pos:start="213:20" pos:end="213:20">-</operator><name pos:start="213:21" pos:end="213:23">EIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:52"><expr pos:start="215:9" pos:end="215:51"><call pos:start="215:9" pos:end="215:51"><name pos:start="215:9" pos:end="215:20">error_report</name><argument_list pos:start="215:21" pos:end="215:51">(<argument pos:start="215:22" pos:end="215:25"><expr pos:start="215:22" pos:end="215:25"><literal type="string" pos:start="215:22" pos:end="215:25">"%s"</literal></expr></argument>, <argument pos:start="215:28" pos:end="215:50"><expr pos:start="215:28" pos:end="215:50"><call pos:start="215:28" pos:end="215:50"><name pos:start="215:28" pos:end="215:38">sd_strerror</name><argument_list pos:start="215:39" pos:end="215:50">(<argument pos:start="215:40" pos:end="215:49"><expr pos:start="215:40" pos:end="215:49"><name pos:start="215:40" pos:end="215:49"><name pos:start="215:40" pos:end="215:42">rsp</name><operator pos:start="215:43" pos:end="215:43">.</operator><name pos:start="215:44" pos:end="215:49">result</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="217:9" pos:end="217:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="223:5" pos:end="223:29"><expr pos:start="223:5" pos:end="223:28"><call pos:start="223:5" pos:end="223:28"><name pos:start="223:5" pos:end="223:16">free_aio_req</name><argument_list pos:start="223:17" pos:end="223:28">(<argument pos:start="223:18" pos:end="223:18"><expr pos:start="223:18" pos:end="223:18"><name pos:start="223:18" pos:end="223:18">s</name></expr></argument>, <argument pos:start="223:21" pos:end="223:27"><expr pos:start="223:21" pos:end="223:27"><name pos:start="223:21" pos:end="223:27">aio_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="237:5"><if pos:start="225:5" pos:end="237:5">if <condition pos:start="225:8" pos:end="225:25">(<expr pos:start="225:9" pos:end="225:24"><operator pos:start="225:9" pos:end="225:9">!</operator><name pos:start="225:10" pos:end="225:24"><name pos:start="225:10" pos:end="225:12">acb</name><operator pos:start="225:13" pos:end="225:14">-&gt;</operator><name pos:start="225:15" pos:end="225:24">nr_pending</name></name></expr>)</condition> <block pos:start="225:27" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:32">

        <comment type="block" pos:start="227:9" pos:end="233:11">/*

         * We've finished all requests which belong to the AIOCB, so

         * we can switch back to sd_co_readv/writev now.

         */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:32"><expr pos:start="235:9" pos:end="235:31"><call pos:start="235:9" pos:end="235:31"><name pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:11">acb</name><operator pos:start="235:12" pos:end="235:13">-&gt;</operator><name pos:start="235:14" pos:end="235:26">aio_done_func</name></name><argument_list pos:start="235:27" pos:end="235:31">(<argument pos:start="235:28" pos:end="235:30"><expr pos:start="235:28" pos:end="235:30"><name pos:start="235:28" pos:end="235:30">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="239:1" pos:end="239:4"><name pos:start="239:1" pos:end="239:3">out</name>:</label>

    <expr_stmt pos:start="241:5" pos:end="241:22"><expr pos:start="241:5" pos:end="241:21"><name pos:start="241:5" pos:end="241:14"><name pos:start="241:5" pos:end="241:5">s</name><operator pos:start="241:6" pos:end="241:7">-&gt;</operator><name pos:start="241:8" pos:end="241:14">co_recv</name></name> <operator pos:start="241:16" pos:end="241:16">=</operator> <name pos:start="241:18" pos:end="241:21">NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
