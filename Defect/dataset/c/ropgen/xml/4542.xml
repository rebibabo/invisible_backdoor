<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4542.c" pos:tabs="8"><function pos:start="1:1" pos:end="477:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="3:65">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:42"><decl pos:start="3:22" pos:end="3:42"><type pos:start="3:22" pos:end="3:42"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">host_type</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:64"><decl pos:start="3:45" pos:end="3:64"><type pos:start="3:45" pos:end="3:64"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">char</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:64">pci_type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="477:1">{<block_content pos:start="7:5" pos:end="475:5">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PCMachineState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">pcms</name> <init pos:start="7:26" pos:end="7:46">= <expr pos:start="7:28" pos:end="7:46"><call pos:start="7:28" pos:end="7:46"><name pos:start="7:28" pos:end="7:37">PC_MACHINE</name><argument_list pos:start="7:38" pos:end="7:46">(<argument pos:start="7:39" pos:end="7:45"><expr pos:start="7:39" pos:end="7:45"><name pos:start="7:39" pos:end="7:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineClass</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:24">pcmc</name> <init pos:start="9:26" pos:end="9:53">= <expr pos:start="9:28" pos:end="9:53"><call pos:start="9:28" pos:end="9:53"><name pos:start="9:28" pos:end="9:47">PC_MACHINE_GET_CLASS</name><argument_list pos:start="9:48" pos:end="9:53">(<argument pos:start="9:49" pos:end="9:52"><expr pos:start="9:49" pos:end="9:52"><name pos:start="9:49" pos:end="9:52">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:31">system_memory</name> <init pos:start="11:33" pos:end="11:53">= <expr pos:start="11:35" pos:end="11:53"><call pos:start="11:35" pos:end="11:53"><name pos:start="11:35" pos:end="11:51">get_system_memory</name><argument_list pos:start="11:52" pos:end="11:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:27">system_io</name> <init pos:start="13:29" pos:end="13:45">= <expr pos:start="13:31" pos:end="13:45"><call pos:start="13:31" pos:end="13:45"><name pos:start="13:31" pos:end="13:43">get_system_io</name><argument_list pos:start="13:44" pos:end="13:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">ISABus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">PCII440FXState</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">piix3_devfn</name> <init pos:start="23:21" pos:end="23:24">= <expr pos:start="23:23" pos:end="23:24"><operator pos:start="23:23" pos:end="23:23">-</operator><literal type="number" pos:start="23:24" pos:end="23:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:21"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">qemu_irq</name></type> <name pos:start="27:14" pos:end="27:20">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">GSIState</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:46"><decl pos:start="31:5" pos:end="31:45"><type pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:13">DriveInfo</name> <modifier pos:start="31:15" pos:end="31:15">*</modifier></type><name pos:start="31:16" pos:end="31:45"><name pos:start="31:16" pos:end="31:17">hd</name><index pos:start="31:18" pos:end="31:45">[<expr pos:start="31:19" pos:end="31:44"><name pos:start="31:19" pos:end="31:29">MAX_IDE_BUS</name> <operator pos:start="31:31" pos:end="31:31">*</operator> <name pos:start="31:33" pos:end="31:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:34"><decl pos:start="33:5" pos:end="33:33"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">BusState</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:33"><name pos:start="33:15" pos:end="33:20">idebus</name><index pos:start="33:21" pos:end="33:33">[<expr pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:25"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:13">ISADevice</name> <modifier pos:start="35:15" pos:end="35:15">*</modifier></type><name pos:start="35:16" pos:end="35:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:29"><decl pos:start="37:5" pos:end="37:28"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">MemoryRegion</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:29"><decl pos:start="39:5" pos:end="39:28"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MemoryRegion</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:29"><decl pos:start="41:5" pos:end="41:28"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:14">ram_addr_t</name></type> <name pos:start="43:16" pos:end="43:21">lowmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="107:7">/*

     * Calculate ram split, for memory below and above 4G.  It's a bit

     * complicated for backward compatibility reasons ...

     *

     *  - Traditional split is 3.5G (lowmem = 0xe0000000).  This is the

     *    default value for max_ram_below_4g now.

     *

     *  - Then, to gigabyte align the memory, we move the split to 3G

     *    (lowmem = 0xc0000000).  But only in case we have to split in

     *    the first place, i.e. ram_size is larger than (traditional)

     *    lowmem.  And for new machine types (gigabyte_align = true)

     *    only, for live migration compatibility reasons.

     *

     *  - Next the max-ram-below-4g option was added, which allowed to

     *    reduce lowmem to a smaller value, to allow a larger PCI I/O

     *    window below 4G.  qemu doesn't enforce gigabyte alignment here,

     *    but prints a warning.

     *

     *  - Finally max-ram-below-4g got updated to also allow raising lowmem,

     *    so legacy non-PAE guests can get as much memory as possible in

     *    the 32bit address space below 4G.

     *

     *  - Note that Xen has its own ram setp code in xen_ram_init(),

     *    called via xen_hvm_init().

     *

     * Examples:

     *    qemu -M pc-1.7 -m 4G    (old default)    -&gt; 3584M low,  512M high

     *    qemu -M pc -m 4G        (new default)    -&gt; 3072M low, 1024M high

     *    qemu -M pc,max-ram-below-4g=2G -m 4G     -&gt; 2048M low, 2048M high

     *    qemu -M pc,max-ram-below-4g=4G -m 3968M  -&gt; 3968M low (=4G-128M)

     */</comment>

    <if_stmt pos:start="109:5" pos:end="165:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:22">(<expr pos:start="109:9" pos:end="109:21"><call pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:19">xen_enabled</name><argument_list pos:start="109:20" pos:end="109:21">()</argument_list></call></expr>)</condition> <block pos:start="109:24" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:40">

        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:20">xen_hvm_init</name><argument_list pos:start="111:21" pos:end="111:39">(<argument pos:start="111:22" pos:end="111:25"><expr pos:start="111:22" pos:end="111:25"><name pos:start="111:22" pos:end="111:25">pcms</name></expr></argument>, <argument pos:start="111:28" pos:end="111:38"><expr pos:start="111:28" pos:end="111:38"><operator pos:start="111:28" pos:end="111:28">&amp;</operator><name pos:start="111:29" pos:end="111:38">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="165:5">else <block pos:start="113:12" pos:end="165:5">{<block_content pos:start="115:9" pos:end="163:9">

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:36">(<expr pos:start="115:13" pos:end="115:35"><operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:35"><name pos:start="115:14" pos:end="115:17">pcms</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:35">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="115:38" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:48">

            <expr_stmt pos:start="117:13" pos:end="117:48"><expr pos:start="117:13" pos:end="117:47"><name pos:start="117:13" pos:end="117:34"><name pos:start="117:13" pos:end="117:16">pcms</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:34">max_ram_below_4g</name></name> <operator pos:start="117:36" pos:end="117:36">=</operator> <literal type="number" pos:start="117:38" pos:end="117:47">0xe0000000</literal></expr>;</expr_stmt> <comment type="block" pos:start="117:50" pos:end="117:68">/* default: 3.5G */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:40"><expr pos:start="121:9" pos:end="121:39"><name pos:start="121:9" pos:end="121:14">lowmem</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <name pos:start="121:18" pos:end="121:39"><name pos:start="121:18" pos:end="121:21">pcms</name><operator pos:start="121:22" pos:end="121:23">-&gt;</operator><name pos:start="121:24" pos:end="121:39">max_ram_below_4g</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="147:9"><if pos:start="123:9" pos:end="147:9">if <condition pos:start="123:12" pos:end="123:56">(<expr pos:start="123:13" pos:end="123:55"><name pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:19">machine</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:29">ram_size</name></name> <operator pos:start="123:31" pos:end="123:32">&gt;=</operator> <name pos:start="123:34" pos:end="123:55"><name pos:start="123:34" pos:end="123:37">pcms</name><operator pos:start="123:38" pos:end="123:39">-&gt;</operator><name pos:start="123:40" pos:end="123:55">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="123:58" pos:end="147:9">{<block_content pos:start="125:13" pos:end="145:13">

            <if_stmt pos:start="125:13" pos:end="145:13"><if pos:start="125:13" pos:end="145:13">if <condition pos:start="125:16" pos:end="125:37">(<expr pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:20">pcmc</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:36">gigabyte_align</name></name></expr>)</condition> <block pos:start="125:39" pos:end="145:13">{<block_content pos:start="127:17" pos:end="143:17">

                <if_stmt pos:start="127:17" pos:end="131:17"><if pos:start="127:17" pos:end="131:17">if <condition pos:start="127:20" pos:end="127:40">(<expr pos:start="127:21" pos:end="127:39"><name pos:start="127:21" pos:end="127:26">lowmem</name> <operator pos:start="127:28" pos:end="127:28">&gt;</operator> <literal type="number" pos:start="127:30" pos:end="127:39">0xc0000000</literal></expr>)</condition> <block pos:start="127:42" pos:end="131:17">{<block_content pos:start="129:21" pos:end="129:40">

                    <expr_stmt pos:start="129:21" pos:end="129:40"><expr pos:start="129:21" pos:end="129:39"><name pos:start="129:21" pos:end="129:26">lowmem</name> <operator pos:start="129:28" pos:end="129:28">=</operator> <literal type="number" pos:start="129:30" pos:end="129:39">0xc0000000</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="133:17" pos:end="143:17"><if pos:start="133:17" pos:end="143:17">if <condition pos:start="133:20" pos:end="133:48">(<expr pos:start="133:21" pos:end="133:47"><name pos:start="133:21" pos:end="133:26">lowmem</name> <operator pos:start="133:28" pos:end="133:28">&amp;</operator> <operator pos:start="133:30" pos:end="133:30">(</operator><operator pos:start="133:31" pos:end="133:31">(</operator><literal type="number" pos:start="133:32" pos:end="133:35">1ULL</literal> <operator pos:start="133:37" pos:end="133:38">&lt;&lt;</operator> <literal type="number" pos:start="133:40" pos:end="133:41">30</literal><operator pos:start="133:42" pos:end="133:42">)</operator> <operator pos:start="133:44" pos:end="133:44">-</operator> <literal type="number" pos:start="133:46" pos:end="133:46">1</literal><operator pos:start="133:47" pos:end="133:47">)</operator></expr>)</condition> <block pos:start="133:50" pos:end="143:17">{<block_content pos:start="135:21" pos:end="141:57">

                    <expr_stmt pos:start="135:21" pos:end="141:57"><expr pos:start="135:21" pos:end="141:56"><call pos:start="135:21" pos:end="141:56"><name pos:start="135:21" pos:end="135:32">error_report</name><argument_list pos:start="135:33" pos:end="141:56">(<argument pos:start="135:34" pos:end="139:60"><expr pos:start="135:34" pos:end="139:60"><literal type="string" pos:start="135:34" pos:end="135:79">"Warning: Large machine and max_ram_below_4g "</literal>

                                 <literal type="string" pos:start="137:34" pos:end="137:37">"(%"</literal> <name pos:start="137:39" pos:end="137:44">PRIu64</name> <literal type="string" pos:start="137:46" pos:end="137:71">") not a multiple of 1G; "</literal>

                                 <literal type="string" pos:start="139:34" pos:end="139:60">"possible bad performance."</literal></expr></argument>,

                                 <argument pos:start="141:34" pos:end="141:55"><expr pos:start="141:34" pos:end="141:55"><name pos:start="141:34" pos:end="141:55"><name pos:start="141:34" pos:end="141:37">pcms</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:55">max_ram_below_4g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="151:9" pos:end="163:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:40">(<expr pos:start="151:13" pos:end="151:39"><name pos:start="151:13" pos:end="151:29"><name pos:start="151:13" pos:end="151:19">machine</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:29">ram_size</name></name> <operator pos:start="151:31" pos:end="151:32">&gt;=</operator> <name pos:start="151:34" pos:end="151:39">lowmem</name></expr>)</condition> <block pos:start="151:42" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:45">

            <expr_stmt pos:start="153:13" pos:end="153:65"><expr pos:start="153:13" pos:end="153:64"><name pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:16">pcms</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:35">above_4g_mem_size</name></name> <operator pos:start="153:37" pos:end="153:37">=</operator> <name pos:start="153:39" pos:end="153:55"><name pos:start="153:39" pos:end="153:45">machine</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:55">ram_size</name></name> <operator pos:start="153:57" pos:end="153:57">-</operator> <name pos:start="153:59" pos:end="153:64">lowmem</name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:45"><expr pos:start="155:13" pos:end="155:44"><name pos:start="155:13" pos:end="155:35"><name pos:start="155:13" pos:end="155:16">pcms</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:35">below_4g_mem_size</name></name> <operator pos:start="155:37" pos:end="155:37">=</operator> <name pos:start="155:39" pos:end="155:44">lowmem</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="163:9">else <block pos:start="157:16" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:56">

            <expr_stmt pos:start="159:13" pos:end="159:40"><expr pos:start="159:13" pos:end="159:39"><name pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:16">pcms</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:35">above_4g_mem_size</name></name> <operator pos:start="159:37" pos:end="159:37">=</operator> <literal type="number" pos:start="159:39" pos:end="159:39">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:56"><expr pos:start="161:13" pos:end="161:55"><name pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:16">pcms</name><operator pos:start="161:17" pos:end="161:18">-&gt;</operator><name pos:start="161:19" pos:end="161:35">below_4g_mem_size</name></name> <operator pos:start="161:37" pos:end="161:37">=</operator> <name pos:start="161:39" pos:end="161:55"><name pos:start="161:39" pos:end="161:45">machine</name><operator pos:start="161:46" pos:end="161:47">-&gt;</operator><name pos:start="161:48" pos:end="161:55">ram_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:23"><expr pos:start="169:5" pos:end="169:22"><call pos:start="169:5" pos:end="169:22"><name pos:start="169:5" pos:end="169:16">pc_cpus_init</name><argument_list pos:start="169:17" pos:end="169:22">(<argument pos:start="169:18" pos:end="169:21"><expr pos:start="169:18" pos:end="169:21"><name pos:start="169:18" pos:end="169:21">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="177:5"><if pos:start="173:5" pos:end="177:5">if <condition pos:start="173:8" pos:end="173:48">(<expr pos:start="173:9" pos:end="173:47"><call pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:19">kvm_enabled</name><argument_list pos:start="173:20" pos:end="173:21">()</argument_list></call> <operator pos:start="173:23" pos:end="173:24">&amp;&amp;</operator> <name pos:start="173:26" pos:end="173:47"><name pos:start="173:26" pos:end="173:29">pcmc</name><operator pos:start="173:30" pos:end="173:31">-&gt;</operator><name pos:start="173:32" pos:end="173:47">kvmclock_enabled</name></name></expr>)</condition> <block pos:start="173:50" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:26">

        <expr_stmt pos:start="175:9" pos:end="175:26"><expr pos:start="175:9" pos:end="175:25"><call pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:23">kvmclock_create</name><argument_list pos:start="175:24" pos:end="175:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="195:5"><if pos:start="181:5" pos:end="189:5">if <condition pos:start="181:8" pos:end="181:26">(<expr pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:12">pcmc</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:25">pci_enabled</name></name></expr>)</condition> <block pos:start="181:28" pos:end="189:5">{<block_content pos:start="183:9" pos:end="187:32">

        <expr_stmt pos:start="183:9" pos:end="183:44"><expr pos:start="183:9" pos:end="183:43"><name pos:start="183:9" pos:end="183:18">pci_memory</name> <operator pos:start="183:20" pos:end="183:20">=</operator> <call pos:start="183:22" pos:end="183:43"><name pos:start="183:22" pos:end="183:26">g_new</name><argument_list pos:start="183:27" pos:end="183:43">(<argument pos:start="183:28" pos:end="183:39"><expr pos:start="183:28" pos:end="183:39"><name pos:start="183:28" pos:end="183:39">MemoryRegion</name></expr></argument>, <argument pos:start="183:42" pos:end="183:42"><expr pos:start="183:42" pos:end="183:42"><literal type="number" pos:start="183:42" pos:end="183:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:64"><expr pos:start="185:9" pos:end="185:63"><call pos:start="185:9" pos:end="185:63"><name pos:start="185:9" pos:end="185:26">memory_region_init</name><argument_list pos:start="185:27" pos:end="185:63">(<argument pos:start="185:28" pos:end="185:37"><expr pos:start="185:28" pos:end="185:37"><name pos:start="185:28" pos:end="185:37">pci_memory</name></expr></argument>, <argument pos:start="185:40" pos:end="185:43"><expr pos:start="185:40" pos:end="185:43"><name pos:start="185:40" pos:end="185:43">NULL</name></expr></argument>, <argument pos:start="185:46" pos:end="185:50"><expr pos:start="185:46" pos:end="185:50"><literal type="string" pos:start="185:46" pos:end="185:50">"pci"</literal></expr></argument>, <argument pos:start="185:53" pos:end="185:62"><expr pos:start="185:53" pos:end="185:62"><name pos:start="185:53" pos:end="185:62">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:32"><expr pos:start="187:9" pos:end="187:31"><name pos:start="187:9" pos:end="187:18">rom_memory</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="195:5">else <block pos:start="189:12" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:35">

        <expr_stmt pos:start="191:9" pos:end="191:26"><expr pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:18">pci_memory</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <name pos:start="191:22" pos:end="191:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:35"><expr pos:start="193:9" pos:end="193:34"><name pos:start="193:9" pos:end="193:18">rom_memory</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:29"><expr pos:start="199:5" pos:end="199:28"><call pos:start="199:5" pos:end="199:28"><name pos:start="199:5" pos:end="199:22">pc_guest_info_init</name><argument_list pos:start="199:23" pos:end="199:28">(<argument pos:start="199:24" pos:end="199:27"><expr pos:start="199:24" pos:end="199:27"><name pos:start="199:24" pos:end="199:27">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="203:5" pos:end="217:5"><if pos:start="203:5" pos:end="217:5">if <condition pos:start="203:8" pos:end="203:30">(<expr pos:start="203:9" pos:end="203:29"><name pos:start="203:9" pos:end="203:29"><name pos:start="203:9" pos:end="203:12">pcmc</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:29">smbios_defaults</name></name></expr>)</condition> <block pos:start="203:32" pos:end="217:5">{<block_content pos:start="205:9" pos:end="215:51">

        <decl_stmt pos:start="205:9" pos:end="205:54"><decl pos:start="205:9" pos:end="205:53"><type pos:start="205:9" pos:end="205:22"><name pos:start="205:9" pos:end="205:20">MachineClass</name> <modifier pos:start="205:22" pos:end="205:22">*</modifier></type><name pos:start="205:23" pos:end="205:24">mc</name> <init pos:start="205:26" pos:end="205:53">= <expr pos:start="205:28" pos:end="205:53"><call pos:start="205:28" pos:end="205:53"><name pos:start="205:28" pos:end="205:44">MACHINE_GET_CLASS</name><argument_list pos:start="205:45" pos:end="205:53">(<argument pos:start="205:46" pos:end="205:52"><expr pos:start="205:46" pos:end="205:52"><name pos:start="205:46" pos:end="205:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="207:9" pos:end="207:55">/* These values are guest ABI, do not change */</comment>

        <expr_stmt pos:start="209:9" pos:end="215:51"><expr pos:start="209:9" pos:end="215:50"><call pos:start="209:9" pos:end="215:50"><name pos:start="209:9" pos:end="209:27">smbios_set_defaults</name><argument_list pos:start="209:28" pos:end="215:50">(<argument pos:start="209:29" pos:end="209:34"><expr pos:start="209:29" pos:end="209:34"><literal type="string" pos:start="209:29" pos:end="209:34">"QEMU"</literal></expr></argument>, <argument pos:start="209:37" pos:end="209:71"><expr pos:start="209:37" pos:end="209:71"><literal type="string" pos:start="209:37" pos:end="209:71">"Standard PC (i440FX + PIIX, 1996)"</literal></expr></argument>,

                            <argument pos:start="211:29" pos:end="211:36"><expr pos:start="211:29" pos:end="211:36"><name pos:start="211:29" pos:end="211:36"><name pos:start="211:29" pos:end="211:30">mc</name><operator pos:start="211:31" pos:end="211:32">-&gt;</operator><name pos:start="211:33" pos:end="211:36">name</name></name></expr></argument>, <argument pos:start="211:39" pos:end="211:62"><expr pos:start="211:39" pos:end="211:62"><name pos:start="211:39" pos:end="211:62"><name pos:start="211:39" pos:end="211:42">pcmc</name><operator pos:start="211:43" pos:end="211:44">-&gt;</operator><name pos:start="211:45" pos:end="211:62">smbios_legacy_mode</name></name></expr></argument>,

                            <argument pos:start="213:29" pos:end="213:53"><expr pos:start="213:29" pos:end="213:53"><name pos:start="213:29" pos:end="213:53"><name pos:start="213:29" pos:end="213:32">pcmc</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:53">smbios_uuid_encoded</name></name></expr></argument>,

                            <argument pos:start="215:29" pos:end="215:49"><expr pos:start="215:29" pos:end="215:49"><name pos:start="215:29" pos:end="215:49">SMBIOS_ENTRY_POINT_21</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="221:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="223:5" pos:end="235:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:23">(<expr pos:start="223:9" pos:end="223:22"><operator pos:start="223:9" pos:end="223:9">!</operator><call pos:start="223:10" pos:end="223:22"><name pos:start="223:10" pos:end="223:20">xen_enabled</name><argument_list pos:start="223:21" pos:end="223:22">()</argument_list></call></expr>)</condition> <block pos:start="223:25" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:48">

        <expr_stmt pos:start="225:9" pos:end="227:48"><expr pos:start="225:9" pos:end="227:47"><call pos:start="225:9" pos:end="227:47"><name pos:start="225:9" pos:end="225:22">pc_memory_init</name><argument_list pos:start="225:23" pos:end="227:47">(<argument pos:start="225:24" pos:end="225:27"><expr pos:start="225:24" pos:end="225:27"><name pos:start="225:24" pos:end="225:27">pcms</name></expr></argument>, <argument pos:start="225:30" pos:end="225:42"><expr pos:start="225:30" pos:end="225:42"><name pos:start="225:30" pos:end="225:42">system_memory</name></expr></argument>,

                       <argument pos:start="227:24" pos:end="227:33"><expr pos:start="227:24" pos:end="227:33"><name pos:start="227:24" pos:end="227:33">rom_memory</name></expr></argument>, <argument pos:start="227:36" pos:end="227:46"><expr pos:start="227:36" pos:end="227:46"><operator pos:start="227:36" pos:end="227:36">&amp;</operator><name pos:start="227:37" pos:end="227:46">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="229:7" pos:end="235:5">else if <condition pos:start="229:15" pos:end="229:48">(<expr pos:start="229:16" pos:end="229:47"><name pos:start="229:16" pos:end="229:39"><name pos:start="229:16" pos:end="229:22">machine</name><operator pos:start="229:23" pos:end="229:24">-&gt;</operator><name pos:start="229:25" pos:end="229:39">kernel_filename</name></name> <operator pos:start="229:41" pos:end="229:42">!=</operator> <name pos:start="229:44" pos:end="229:47">NULL</name></expr>)</condition> <block pos:start="229:50" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:29">

        <comment type="block" pos:start="231:9" pos:end="231:61">/* For xen HVM direct kernel boot, load linux here */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:29"><expr pos:start="233:9" pos:end="233:28"><call pos:start="233:9" pos:end="233:28"><name pos:start="233:9" pos:end="233:22">xen_load_linux</name><argument_list pos:start="233:23" pos:end="233:28">(<argument pos:start="233:24" pos:end="233:27"><expr pos:start="233:24" pos:end="233:27"><name pos:start="233:24" pos:end="233:27">pcms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:46"><expr pos:start="239:5" pos:end="239:45"><name pos:start="239:5" pos:end="239:13">gsi_state</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <call pos:start="239:17" pos:end="239:45"><name pos:start="239:17" pos:end="239:25">g_malloc0</name><argument_list pos:start="239:26" pos:end="239:45">(<argument pos:start="239:27" pos:end="239:44"><expr pos:start="239:27" pos:end="239:44"><sizeof pos:start="239:27" pos:end="239:44">sizeof<argument_list pos:start="239:33" pos:end="239:44">(<argument pos:start="239:34" pos:end="239:43"><expr pos:start="239:34" pos:end="239:43"><operator pos:start="239:34" pos:end="239:34">*</operator><name pos:start="239:35" pos:end="239:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="241:5" pos:end="253:5"><if pos:start="241:5" pos:end="249:5">if <condition pos:start="241:8" pos:end="241:31">(<expr pos:start="241:9" pos:end="241:30"><call pos:start="241:9" pos:end="241:30"><name pos:start="241:9" pos:end="241:28">kvm_ioapic_in_kernel</name><argument_list pos:start="241:29" pos:end="241:30">()</argument_list></call></expr>)</condition> <block pos:start="241:33" pos:end="249:5">{<block_content pos:start="243:9" pos:end="247:53">

        <expr_stmt pos:start="243:9" pos:end="243:52"><expr pos:start="243:9" pos:end="243:51"><call pos:start="243:9" pos:end="243:51"><name pos:start="243:9" pos:end="243:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="243:33" pos:end="243:51">(<argument pos:start="243:34" pos:end="243:50"><expr pos:start="243:34" pos:end="243:50"><name pos:start="243:34" pos:end="243:50"><name pos:start="243:34" pos:end="243:37">pcmc</name><operator pos:start="243:38" pos:end="243:39">-&gt;</operator><name pos:start="243:40" pos:end="243:50">pci_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="247:53"><expr pos:start="245:9" pos:end="247:52"><name pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:12">pcms</name><operator pos:start="245:13" pos:end="245:14">-&gt;</operator><name pos:start="245:15" pos:end="245:17">gsi</name></name> <operator pos:start="245:19" pos:end="245:19">=</operator> <call pos:start="245:21" pos:end="247:52"><name pos:start="245:21" pos:end="245:38">qemu_allocate_irqs</name><argument_list pos:start="245:39" pos:end="247:52">(<argument pos:start="245:40" pos:end="245:57"><expr pos:start="245:40" pos:end="245:57"><name pos:start="245:40" pos:end="245:57">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="245:60" pos:end="245:68"><expr pos:start="245:60" pos:end="245:68"><name pos:start="245:60" pos:end="245:68">gsi_state</name></expr></argument>,

                                       <argument pos:start="247:40" pos:end="247:51"><expr pos:start="247:40" pos:end="247:51"><name pos:start="247:40" pos:end="247:51">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="249:7" pos:end="253:5">else <block pos:start="249:12" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:77">

        <expr_stmt pos:start="251:9" pos:end="251:77"><expr pos:start="251:9" pos:end="251:76"><name pos:start="251:9" pos:end="251:17"><name pos:start="251:9" pos:end="251:12">pcms</name><operator pos:start="251:13" pos:end="251:14">-&gt;</operator><name pos:start="251:15" pos:end="251:17">gsi</name></name> <operator pos:start="251:19" pos:end="251:19">=</operator> <call pos:start="251:21" pos:end="251:76"><name pos:start="251:21" pos:end="251:38">qemu_allocate_irqs</name><argument_list pos:start="251:39" pos:end="251:76">(<argument pos:start="251:40" pos:end="251:50"><expr pos:start="251:40" pos:end="251:50"><name pos:start="251:40" pos:end="251:50">gsi_handler</name></expr></argument>, <argument pos:start="251:53" pos:end="251:61"><expr pos:start="251:53" pos:end="251:61"><name pos:start="251:53" pos:end="251:61">gsi_state</name></expr></argument>, <argument pos:start="251:64" pos:end="251:75"><expr pos:start="251:64" pos:end="251:75"><name pos:start="251:64" pos:end="251:75">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="257:5" pos:end="287:5"><if pos:start="257:5" pos:end="275:5">if <condition pos:start="257:8" pos:end="257:26">(<expr pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:12">pcmc</name><operator pos:start="257:13" pos:end="257:14">-&gt;</operator><name pos:start="257:15" pos:end="257:25">pci_enabled</name></name></expr>)</condition> <block pos:start="257:28" pos:end="275:5">{<block_content pos:start="259:9" pos:end="273:28">

        <expr_stmt pos:start="259:9" pos:end="271:54"><expr pos:start="259:9" pos:end="271:53"><name pos:start="259:9" pos:end="259:15">pci_bus</name> <operator pos:start="259:17" pos:end="259:17">=</operator> <call pos:start="259:19" pos:end="271:53"><name pos:start="259:19" pos:end="259:29">i440fx_init</name><argument_list pos:start="259:30" pos:end="271:53">(<argument pos:start="259:31" pos:end="259:39"><expr pos:start="259:31" pos:end="259:39"><name pos:start="259:31" pos:end="259:39">host_type</name></expr></argument>,

                              <argument pos:start="261:31" pos:end="261:38"><expr pos:start="261:31" pos:end="261:38"><name pos:start="261:31" pos:end="261:38">pci_type</name></expr></argument>,

                              <argument pos:start="263:31" pos:end="263:43"><expr pos:start="263:31" pos:end="263:43"><operator pos:start="263:31" pos:end="263:31">&amp;</operator><name pos:start="263:32" pos:end="263:43">i440fx_state</name></expr></argument>, <argument pos:start="263:46" pos:end="263:57"><expr pos:start="263:46" pos:end="263:57"><operator pos:start="263:46" pos:end="263:46">&amp;</operator><name pos:start="263:47" pos:end="263:57">piix3_devfn</name></expr></argument>, <argument pos:start="263:60" pos:end="263:67"><expr pos:start="263:60" pos:end="263:67"><operator pos:start="263:60" pos:end="263:60">&amp;</operator><name pos:start="263:61" pos:end="263:67">isa_bus</name></expr></argument>, <argument pos:start="263:70" pos:end="263:78"><expr pos:start="263:70" pos:end="263:78"><name pos:start="263:70" pos:end="263:78"><name pos:start="263:70" pos:end="263:73">pcms</name><operator pos:start="263:74" pos:end="263:75">-&gt;</operator><name pos:start="263:76" pos:end="263:78">gsi</name></name></expr></argument>,

                              <argument pos:start="265:31" pos:end="265:43"><expr pos:start="265:31" pos:end="265:43"><name pos:start="265:31" pos:end="265:43">system_memory</name></expr></argument>, <argument pos:start="265:46" pos:end="265:54"><expr pos:start="265:46" pos:end="265:54"><name pos:start="265:46" pos:end="265:54">system_io</name></expr></argument>, <argument pos:start="265:57" pos:end="265:73"><expr pos:start="265:57" pos:end="265:73"><name pos:start="265:57" pos:end="265:73"><name pos:start="265:57" pos:end="265:63">machine</name><operator pos:start="265:64" pos:end="265:65">-&gt;</operator><name pos:start="265:66" pos:end="265:73">ram_size</name></name></expr></argument>,

                              <argument pos:start="267:31" pos:end="267:53"><expr pos:start="267:31" pos:end="267:53"><name pos:start="267:31" pos:end="267:53"><name pos:start="267:31" pos:end="267:34">pcms</name><operator pos:start="267:35" pos:end="267:36">-&gt;</operator><name pos:start="267:37" pos:end="267:53">below_4g_mem_size</name></name></expr></argument>,

                              <argument pos:start="269:31" pos:end="269:53"><expr pos:start="269:31" pos:end="269:53"><name pos:start="269:31" pos:end="269:53"><name pos:start="269:31" pos:end="269:34">pcms</name><operator pos:start="269:35" pos:end="269:36">-&gt;</operator><name pos:start="269:37" pos:end="269:53">above_4g_mem_size</name></name></expr></argument>,

                              <argument pos:start="271:31" pos:end="271:40"><expr pos:start="271:31" pos:end="271:40"><name pos:start="271:31" pos:end="271:40">pci_memory</name></expr></argument>, <argument pos:start="271:43" pos:end="271:52"><expr pos:start="271:43" pos:end="271:52"><name pos:start="271:43" pos:end="271:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:28"><expr pos:start="273:9" pos:end="273:27"><name pos:start="273:9" pos:end="273:17"><name pos:start="273:9" pos:end="273:12">pcms</name><operator pos:start="273:13" pos:end="273:14">-&gt;</operator><name pos:start="273:15" pos:end="273:17">bus</name></name> <operator pos:start="273:19" pos:end="273:19">=</operator> <name pos:start="273:21" pos:end="273:27">pci_bus</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="275:7" pos:end="287:5">else <block pos:start="275:12" pos:end="287:5">{<block_content pos:start="277:9" pos:end="285:20">

        <expr_stmt pos:start="277:9" pos:end="277:23"><expr pos:start="277:9" pos:end="277:22"><name pos:start="277:9" pos:end="277:15">pci_bus</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <name pos:start="277:19" pos:end="277:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:28"><expr pos:start="279:9" pos:end="279:27"><name pos:start="279:9" pos:end="279:20">i440fx_state</name> <operator pos:start="279:22" pos:end="279:22">=</operator> <name pos:start="279:24" pos:end="279:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="283:44"><expr pos:start="281:9" pos:end="283:43"><name pos:start="281:9" pos:end="281:15">isa_bus</name> <operator pos:start="281:17" pos:end="281:17">=</operator> <call pos:start="281:19" pos:end="283:43"><name pos:start="281:19" pos:end="281:29">isa_bus_new</name><argument_list pos:start="281:30" pos:end="283:43">(<argument pos:start="281:31" pos:end="281:34"><expr pos:start="281:31" pos:end="281:34"><name pos:start="281:31" pos:end="281:34">NULL</name></expr></argument>, <argument pos:start="281:37" pos:end="281:55"><expr pos:start="281:37" pos:end="281:55"><call pos:start="281:37" pos:end="281:55"><name pos:start="281:37" pos:end="281:53">get_system_memory</name><argument_list pos:start="281:54" pos:end="281:55">()</argument_list></call></expr></argument>, <argument pos:start="281:58" pos:end="281:66"><expr pos:start="281:58" pos:end="281:66"><name pos:start="281:58" pos:end="281:66">system_io</name></expr></argument>,

                              <argument pos:start="283:31" pos:end="283:42"><expr pos:start="283:31" pos:end="283:42"><operator pos:start="283:31" pos:end="283:31">&amp;</operator><name pos:start="283:32" pos:end="283:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:20"><expr pos:start="285:9" pos:end="285:19"><name pos:start="285:9" pos:end="285:15">no_hpet</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <literal type="number" pos:start="285:19" pos:end="285:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:37"><expr pos:start="289:5" pos:end="289:36"><call pos:start="289:5" pos:end="289:36"><name pos:start="289:5" pos:end="289:16">isa_bus_irqs</name><argument_list pos:start="289:17" pos:end="289:36">(<argument pos:start="289:18" pos:end="289:24"><expr pos:start="289:18" pos:end="289:24"><name pos:start="289:18" pos:end="289:24">isa_bus</name></expr></argument>, <argument pos:start="289:27" pos:end="289:35"><expr pos:start="289:27" pos:end="289:35"><name pos:start="289:27" pos:end="289:35"><name pos:start="289:27" pos:end="289:30">pcms</name><operator pos:start="289:31" pos:end="289:32">-&gt;</operator><name pos:start="289:33" pos:end="289:35">gsi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="293:5" pos:end="305:5"><if pos:start="293:5" pos:end="297:5">if <condition pos:start="293:8" pos:end="293:28">(<expr pos:start="293:9" pos:end="293:27"><call pos:start="293:9" pos:end="293:27"><name pos:start="293:9" pos:end="293:25">kvm_pic_in_kernel</name><argument_list pos:start="293:26" pos:end="293:27">()</argument_list></call></expr>)</condition> <block pos:start="293:30" pos:end="297:5">{<block_content pos:start="295:9" pos:end="295:40">

        <expr_stmt pos:start="295:9" pos:end="295:40"><expr pos:start="295:9" pos:end="295:39"><name pos:start="295:9" pos:end="295:13">i8259</name> <operator pos:start="295:15" pos:end="295:15">=</operator> <call pos:start="295:17" pos:end="295:39"><name pos:start="295:17" pos:end="295:30">kvm_i8259_init</name><argument_list pos:start="295:31" pos:end="295:39">(<argument pos:start="295:32" pos:end="295:38"><expr pos:start="295:32" pos:end="295:38"><name pos:start="295:32" pos:end="295:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="297:7" pos:end="301:5">else if <condition pos:start="297:15" pos:end="297:29">(<expr pos:start="297:16" pos:end="297:28"><call pos:start="297:16" pos:end="297:28"><name pos:start="297:16" pos:end="297:26">xen_enabled</name><argument_list pos:start="297:27" pos:end="297:28">()</argument_list></call></expr>)</condition> <block pos:start="297:31" pos:end="301:5">{<block_content pos:start="299:9" pos:end="299:48">

        <expr_stmt pos:start="299:9" pos:end="299:48"><expr pos:start="299:9" pos:end="299:47"><name pos:start="299:9" pos:end="299:13">i8259</name> <operator pos:start="299:15" pos:end="299:15">=</operator> <call pos:start="299:17" pos:end="299:47"><name pos:start="299:17" pos:end="299:45">xen_interrupt_controller_init</name><argument_list pos:start="299:46" pos:end="299:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="301:7" pos:end="305:5">else <block pos:start="301:12" pos:end="305:5">{<block_content pos:start="303:9" pos:end="303:59">

        <expr_stmt pos:start="303:9" pos:end="303:59"><expr pos:start="303:9" pos:end="303:58"><name pos:start="303:9" pos:end="303:13">i8259</name> <operator pos:start="303:15" pos:end="303:15">=</operator> <call pos:start="303:17" pos:end="303:58"><name pos:start="303:17" pos:end="303:26">i8259_init</name><argument_list pos:start="303:27" pos:end="303:58">(<argument pos:start="303:28" pos:end="303:34"><expr pos:start="303:28" pos:end="303:34"><name pos:start="303:28" pos:end="303:34">isa_bus</name></expr></argument>, <argument pos:start="303:37" pos:end="303:57"><expr pos:start="303:37" pos:end="303:57"><call pos:start="303:37" pos:end="303:57"><name pos:start="303:37" pos:end="303:55">pc_allocate_cpu_irq</name><argument_list pos:start="303:56" pos:end="303:57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="309:5" pos:end="313:5">for <control pos:start="309:9" pos:end="309:38">(<init pos:start="309:10" pos:end="309:15"><expr pos:start="309:10" pos:end="309:14"><name pos:start="309:10" pos:end="309:10">i</name> <operator pos:start="309:12" pos:end="309:12">=</operator> <literal type="number" pos:start="309:14" pos:end="309:14">0</literal></expr>;</init> <condition pos:start="309:17" pos:end="309:33"><expr pos:start="309:17" pos:end="309:32"><name pos:start="309:17" pos:end="309:17">i</name> <operator pos:start="309:19" pos:end="309:19">&lt;</operator> <name pos:start="309:21" pos:end="309:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="309:35" pos:end="309:37"><expr pos:start="309:35" pos:end="309:37"><name pos:start="309:35" pos:end="309:35">i</name><operator pos:start="309:36" pos:end="309:37">++</operator></expr></incr>)</control> <block pos:start="309:40" pos:end="313:5">{<block_content pos:start="311:9" pos:end="311:43">

        <expr_stmt pos:start="311:9" pos:end="311:43"><expr pos:start="311:9" pos:end="311:42"><name pos:start="311:9" pos:end="311:31"><name pos:start="311:9" pos:end="311:17">gsi_state</name><operator pos:start="311:18" pos:end="311:19">-&gt;</operator><name pos:start="311:20" pos:end="311:28">i8259_irq</name><index pos:start="311:29" pos:end="311:31">[<expr pos:start="311:30" pos:end="311:30"><name pos:start="311:30" pos:end="311:30">i</name></expr>]</index></name> <operator pos:start="311:33" pos:end="311:33">=</operator> <name pos:start="311:35" pos:end="311:42"><name pos:start="311:35" pos:end="311:39">i8259</name><index pos:start="311:40" pos:end="311:42">[<expr pos:start="311:41" pos:end="311:41"><name pos:start="311:41" pos:end="311:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="315:5" pos:end="315:18"><expr pos:start="315:5" pos:end="315:17"><call pos:start="315:5" pos:end="315:17"><name pos:start="315:5" pos:end="315:10">g_free</name><argument_list pos:start="315:11" pos:end="315:17">(<argument pos:start="315:12" pos:end="315:16"><expr pos:start="315:12" pos:end="315:16"><name pos:start="315:12" pos:end="315:16">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="317:5" pos:end="321:5"><if pos:start="317:5" pos:end="321:5">if <condition pos:start="317:8" pos:end="317:26">(<expr pos:start="317:9" pos:end="317:25"><name pos:start="317:9" pos:end="317:25"><name pos:start="317:9" pos:end="317:12">pcmc</name><operator pos:start="317:13" pos:end="317:14">-&gt;</operator><name pos:start="317:15" pos:end="317:25">pci_enabled</name></name></expr>)</condition> <block pos:start="317:28" pos:end="321:5">{<block_content pos:start="319:9" pos:end="319:45">

        <expr_stmt pos:start="319:9" pos:end="319:45"><expr pos:start="319:9" pos:end="319:44"><call pos:start="319:9" pos:end="319:44"><name pos:start="319:9" pos:end="319:23">ioapic_init_gsi</name><argument_list pos:start="319:24" pos:end="319:44">(<argument pos:start="319:25" pos:end="319:33"><expr pos:start="319:25" pos:end="319:33"><name pos:start="319:25" pos:end="319:33">gsi_state</name></expr></argument>, <argument pos:start="319:36" pos:end="319:43"><expr pos:start="319:36" pos:end="319:43"><literal type="string" pos:start="319:36" pos:end="319:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="325:5" pos:end="325:40"><expr pos:start="325:5" pos:end="325:39"><call pos:start="325:5" pos:end="325:39"><name pos:start="325:5" pos:end="325:24">pc_register_ferr_irq</name><argument_list pos:start="325:25" pos:end="325:39">(<argument pos:start="325:26" pos:end="325:38"><expr pos:start="325:26" pos:end="325:38"><name pos:start="325:26" pos:end="325:38"><name pos:start="325:26" pos:end="325:29">pcms</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:34">gsi</name><index pos:start="325:35" pos:end="325:38">[<expr pos:start="325:36" pos:end="325:37"><literal type="number" pos:start="325:36" pos:end="325:37">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:61"><expr pos:start="329:5" pos:end="329:60"><call pos:start="329:5" pos:end="329:60"><name pos:start="329:5" pos:end="329:15">pc_vga_init</name><argument_list pos:start="329:16" pos:end="329:60">(<argument pos:start="329:17" pos:end="329:23"><expr pos:start="329:17" pos:end="329:23"><name pos:start="329:17" pos:end="329:23">isa_bus</name></expr></argument>, <argument pos:start="329:26" pos:end="329:59"><expr pos:start="329:26" pos:end="329:59"><ternary pos:start="329:26" pos:end="329:59"><condition pos:start="329:26" pos:end="329:44"><expr pos:start="329:26" pos:end="329:42"><name pos:start="329:26" pos:end="329:42"><name pos:start="329:26" pos:end="329:29">pcmc</name><operator pos:start="329:30" pos:end="329:31">-&gt;</operator><name pos:start="329:32" pos:end="329:42">pci_enabled</name></name></expr> ?</condition><then pos:start="329:46" pos:end="329:52"> <expr pos:start="329:46" pos:end="329:52"><name pos:start="329:46" pos:end="329:52">pci_bus</name></expr> </then><else pos:start="329:54" pos:end="329:59">: <expr pos:start="329:56" pos:end="329:59"><name pos:start="329:56" pos:end="329:59">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="333:5" pos:end="333:45"><expr pos:start="333:5" pos:end="333:44"><call pos:start="333:5" pos:end="333:44"><name pos:start="333:5" pos:end="333:10">assert</name><argument_list pos:start="333:11" pos:end="333:44">(<argument pos:start="333:12" pos:end="333:43"><expr pos:start="333:12" pos:end="333:43"><name pos:start="333:12" pos:end="333:23"><name pos:start="333:12" pos:end="333:15">pcms</name><operator pos:start="333:16" pos:end="333:17">-&gt;</operator><name pos:start="333:18" pos:end="333:23">vmport</name></name> <operator pos:start="333:25" pos:end="333:26">!=</operator> <name pos:start="333:28" pos:end="333:43">ON_OFF_AUTO__MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="335:5" pos:end="339:5"><if pos:start="335:5" pos:end="339:5">if <condition pos:start="335:8" pos:end="335:41">(<expr pos:start="335:9" pos:end="335:40"><name pos:start="335:9" pos:end="335:20"><name pos:start="335:9" pos:end="335:12">pcms</name><operator pos:start="335:13" pos:end="335:14">-&gt;</operator><name pos:start="335:15" pos:end="335:20">vmport</name></name> <operator pos:start="335:22" pos:end="335:23">==</operator> <name pos:start="335:25" pos:end="335:40">ON_OFF_AUTO_AUTO</name></expr>)</condition> <block pos:start="335:43" pos:end="339:5">{<block_content pos:start="337:9" pos:end="337:72">

        <expr_stmt pos:start="337:9" pos:end="337:72"><expr pos:start="337:9" pos:end="337:71"><name pos:start="337:9" pos:end="337:20"><name pos:start="337:9" pos:end="337:12">pcms</name><operator pos:start="337:13" pos:end="337:14">-&gt;</operator><name pos:start="337:15" pos:end="337:20">vmport</name></name> <operator pos:start="337:22" pos:end="337:22">=</operator> <ternary pos:start="337:24" pos:end="337:71"><condition pos:start="337:24" pos:end="337:38"><expr pos:start="337:24" pos:end="337:36"><call pos:start="337:24" pos:end="337:36"><name pos:start="337:24" pos:end="337:34">xen_enabled</name><argument_list pos:start="337:35" pos:end="337:36">()</argument_list></call></expr> ?</condition><then pos:start="337:40" pos:end="337:54"> <expr pos:start="337:40" pos:end="337:54"><name pos:start="337:40" pos:end="337:54">ON_OFF_AUTO_OFF</name></expr> </then><else pos:start="337:56" pos:end="337:71">: <expr pos:start="337:58" pos:end="337:71"><name pos:start="337:58" pos:end="337:71">ON_OFF_AUTO_ON</name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="343:5" pos:end="343:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="345:5" pos:end="347:75"><expr pos:start="345:5" pos:end="347:74"><call pos:start="345:5" pos:end="347:74"><name pos:start="345:5" pos:end="345:24">pc_basic_device_init</name><argument_list pos:start="345:25" pos:end="347:74">(<argument pos:start="345:26" pos:end="345:32"><expr pos:start="345:26" pos:end="345:32"><name pos:start="345:26" pos:end="345:32">isa_bus</name></expr></argument>, <argument pos:start="345:35" pos:end="345:43"><expr pos:start="345:35" pos:end="345:43"><name pos:start="345:35" pos:end="345:43"><name pos:start="345:35" pos:end="345:38">pcms</name><operator pos:start="345:39" pos:end="345:40">-&gt;</operator><name pos:start="345:41" pos:end="345:43">gsi</name></name></expr></argument>, <argument pos:start="345:46" pos:end="345:55"><expr pos:start="345:46" pos:end="345:55"><operator pos:start="345:46" pos:end="345:46">&amp;</operator><name pos:start="345:47" pos:end="345:55">rtc_state</name></expr></argument>, <argument pos:start="345:58" pos:end="345:61"><expr pos:start="345:58" pos:end="345:61"><name pos:start="345:58" pos:end="345:61">true</name></expr></argument>,

                         <argument pos:start="347:26" pos:end="347:57"><expr pos:start="347:26" pos:end="347:57"><operator pos:start="347:26" pos:end="347:26">(</operator><name pos:start="347:27" pos:end="347:38"><name pos:start="347:27" pos:end="347:30">pcms</name><operator pos:start="347:31" pos:end="347:32">-&gt;</operator><name pos:start="347:33" pos:end="347:38">vmport</name></name> <operator pos:start="347:40" pos:end="347:41">!=</operator> <name pos:start="347:43" pos:end="347:56">ON_OFF_AUTO_ON</name><operator pos:start="347:57" pos:end="347:57">)</operator></expr></argument>, <argument pos:start="347:60" pos:end="347:68"><expr pos:start="347:60" pos:end="347:68"><name pos:start="347:60" pos:end="347:68"><name pos:start="347:60" pos:end="347:63">pcms</name><operator pos:start="347:64" pos:end="347:65">-&gt;</operator><name pos:start="347:66" pos:end="347:68">pit</name></name></expr></argument>, <argument pos:start="347:71" pos:end="347:73"><expr pos:start="347:71" pos:end="347:73"><literal type="number" pos:start="347:71" pos:end="347:73">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:34"><expr pos:start="351:5" pos:end="351:33"><call pos:start="351:5" pos:end="351:33"><name pos:start="351:5" pos:end="351:15">pc_nic_init</name><argument_list pos:start="351:16" pos:end="351:33">(<argument pos:start="351:17" pos:end="351:23"><expr pos:start="351:17" pos:end="351:23"><name pos:start="351:17" pos:end="351:23">isa_bus</name></expr></argument>, <argument pos:start="351:26" pos:end="351:32"><expr pos:start="351:26" pos:end="351:32"><name pos:start="351:26" pos:end="351:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="355:5" pos:end="355:38"><expr pos:start="355:5" pos:end="355:37"><call pos:start="355:5" pos:end="355:37"><name pos:start="355:5" pos:end="355:17">ide_drive_get</name><argument_list pos:start="355:18" pos:end="355:37">(<argument pos:start="355:19" pos:end="355:20"><expr pos:start="355:19" pos:end="355:20"><name pos:start="355:19" pos:end="355:20">hd</name></expr></argument>, <argument pos:start="355:23" pos:end="355:36"><expr pos:start="355:23" pos:end="355:36"><call pos:start="355:23" pos:end="355:36"><name pos:start="355:23" pos:end="355:32">ARRAY_SIZE</name><argument_list pos:start="355:33" pos:end="355:36">(<argument pos:start="355:34" pos:end="355:35"><expr pos:start="355:34" pos:end="355:35"><name pos:start="355:34" pos:end="355:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="403:5"><if pos:start="357:5" pos:end="375:5">if <condition pos:start="357:8" pos:end="357:26">(<expr pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:12">pcmc</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:25">pci_enabled</name></name></expr>)</condition> <block pos:start="357:28" pos:end="375:5">{<block_content pos:start="359:9" pos:end="373:60">

        <decl_stmt pos:start="359:9" pos:end="359:23"><decl pos:start="359:9" pos:end="359:22"><type pos:start="359:9" pos:end="359:19"><name pos:start="359:9" pos:end="359:17">PCIDevice</name> <modifier pos:start="359:19" pos:end="359:19">*</modifier></type><name pos:start="359:20" pos:end="359:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="361:9" pos:end="369:9"><if pos:start="361:9" pos:end="365:9">if <condition pos:start="361:12" pos:end="361:26">(<expr pos:start="361:13" pos:end="361:25"><call pos:start="361:13" pos:end="361:25"><name pos:start="361:13" pos:end="361:23">xen_enabled</name><argument_list pos:start="361:24" pos:end="361:25">()</argument_list></call></expr>)</condition> <block pos:start="361:28" pos:end="365:9">{<block_content pos:start="363:13" pos:end="363:71">

            <expr_stmt pos:start="363:13" pos:end="363:71"><expr pos:start="363:13" pos:end="363:70"><name pos:start="363:13" pos:end="363:15">dev</name> <operator pos:start="363:17" pos:end="363:17">=</operator> <call pos:start="363:19" pos:end="363:70"><name pos:start="363:19" pos:end="363:40">pci_piix3_xen_ide_init</name><argument_list pos:start="363:41" pos:end="363:70">(<argument pos:start="363:42" pos:end="363:48"><expr pos:start="363:42" pos:end="363:48"><name pos:start="363:42" pos:end="363:48">pci_bus</name></expr></argument>, <argument pos:start="363:51" pos:end="363:52"><expr pos:start="363:51" pos:end="363:52"><name pos:start="363:51" pos:end="363:52">hd</name></expr></argument>, <argument pos:start="363:55" pos:end="363:69"><expr pos:start="363:55" pos:end="363:69"><name pos:start="363:55" pos:end="363:65">piix3_devfn</name> <operator pos:start="363:67" pos:end="363:67">+</operator> <literal type="number" pos:start="363:69" pos:end="363:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="365:11" pos:end="369:9">else <block pos:start="365:16" pos:end="369:9">{<block_content pos:start="367:13" pos:end="367:67">

            <expr_stmt pos:start="367:13" pos:end="367:67"><expr pos:start="367:13" pos:end="367:66"><name pos:start="367:13" pos:end="367:15">dev</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <call pos:start="367:19" pos:end="367:66"><name pos:start="367:19" pos:end="367:36">pci_piix3_ide_init</name><argument_list pos:start="367:37" pos:end="367:66">(<argument pos:start="367:38" pos:end="367:44"><expr pos:start="367:38" pos:end="367:44"><name pos:start="367:38" pos:end="367:44">pci_bus</name></expr></argument>, <argument pos:start="367:47" pos:end="367:48"><expr pos:start="367:47" pos:end="367:48"><name pos:start="367:47" pos:end="367:48">hd</name></expr></argument>, <argument pos:start="367:51" pos:end="367:65"><expr pos:start="367:51" pos:end="367:65"><name pos:start="367:51" pos:end="367:61">piix3_devfn</name> <operator pos:start="367:63" pos:end="367:63">+</operator> <literal type="number" pos:start="367:65" pos:end="367:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:60"><expr pos:start="371:9" pos:end="371:59"><name pos:start="371:9" pos:end="371:17"><name pos:start="371:9" pos:end="371:14">idebus</name><index pos:start="371:15" pos:end="371:17">[<expr pos:start="371:16" pos:end="371:16"><literal type="number" pos:start="371:16" pos:end="371:16">0</literal></expr>]</index></name> <operator pos:start="371:19" pos:end="371:19">=</operator> <call pos:start="371:21" pos:end="371:59"><name pos:start="371:21" pos:end="371:38">qdev_get_child_bus</name><argument_list pos:start="371:39" pos:end="371:59">(<argument pos:start="371:40" pos:end="371:49"><expr pos:start="371:40" pos:end="371:49"><operator pos:start="371:40" pos:end="371:40">&amp;</operator><name pos:start="371:41" pos:end="371:49"><name pos:start="371:41" pos:end="371:43">dev</name><operator pos:start="371:44" pos:end="371:45">-&gt;</operator><name pos:start="371:46" pos:end="371:49">qdev</name></name></expr></argument>, <argument pos:start="371:52" pos:end="371:58"><expr pos:start="371:52" pos:end="371:58"><literal type="string" pos:start="371:52" pos:end="371:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:60"><expr pos:start="373:9" pos:end="373:59"><name pos:start="373:9" pos:end="373:17"><name pos:start="373:9" pos:end="373:14">idebus</name><index pos:start="373:15" pos:end="373:17">[<expr pos:start="373:16" pos:end="373:16"><literal type="number" pos:start="373:16" pos:end="373:16">1</literal></expr>]</index></name> <operator pos:start="373:19" pos:end="373:19">=</operator> <call pos:start="373:21" pos:end="373:59"><name pos:start="373:21" pos:end="373:38">qdev_get_child_bus</name><argument_list pos:start="373:39" pos:end="373:59">(<argument pos:start="373:40" pos:end="373:49"><expr pos:start="373:40" pos:end="373:49"><operator pos:start="373:40" pos:end="373:40">&amp;</operator><name pos:start="373:41" pos:end="373:49"><name pos:start="373:41" pos:end="373:43">dev</name><operator pos:start="373:44" pos:end="373:45">-&gt;</operator><name pos:start="373:46" pos:end="373:49">qdev</name></name></expr></argument>, <argument pos:start="373:52" pos:end="373:58"><expr pos:start="373:52" pos:end="373:58"><literal type="string" pos:start="373:52" pos:end="373:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="375:7" pos:end="403:5">else <block pos:start="375:12" pos:end="403:5">{<block_content pos:start="377:9" pos:end="401:9">

        <for pos:start="377:9" pos:end="401:9">for<control pos:start="377:12" pos:end="377:40">(<init pos:start="377:13" pos:end="377:18"><expr pos:start="377:13" pos:end="377:17"><name pos:start="377:13" pos:end="377:13">i</name> <operator pos:start="377:15" pos:end="377:15">=</operator> <literal type="number" pos:start="377:17" pos:end="377:17">0</literal></expr>;</init> <condition pos:start="377:20" pos:end="377:35"><expr pos:start="377:20" pos:end="377:34"><name pos:start="377:20" pos:end="377:20">i</name> <operator pos:start="377:22" pos:end="377:22">&lt;</operator> <name pos:start="377:24" pos:end="377:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="377:37" pos:end="377:39"><expr pos:start="377:37" pos:end="377:39"><name pos:start="377:37" pos:end="377:37">i</name><operator pos:start="377:38" pos:end="377:39">++</operator></expr></incr>)</control> <block pos:start="377:42" pos:end="401:9">{<block_content pos:start="379:13" pos:end="399:65">

            <decl_stmt pos:start="379:13" pos:end="379:27"><decl pos:start="379:13" pos:end="379:26"><type pos:start="379:13" pos:end="379:23"><name pos:start="379:13" pos:end="379:21">ISADevice</name> <modifier pos:start="379:23" pos:end="379:23">*</modifier></type><name pos:start="379:24" pos:end="379:26">dev</name></decl>;</decl_stmt>

            <decl_stmt pos:start="381:13" pos:end="381:37"><decl pos:start="381:13" pos:end="381:36"><type pos:start="381:13" pos:end="381:16"><name pos:start="381:13" pos:end="381:16">char</name></type> <name pos:start="381:18" pos:end="381:26"><name pos:start="381:18" pos:end="381:24">busname</name><index pos:start="381:25" pos:end="381:26">[]</index></name> <init pos:start="381:28" pos:end="381:36">= <expr pos:start="381:30" pos:end="381:36"><literal type="string" pos:start="381:30" pos:end="381:36">"ide.0"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="383:13" pos:end="387:79"><expr pos:start="383:13" pos:end="387:78"><name pos:start="383:13" pos:end="383:15">dev</name> <operator pos:start="383:17" pos:end="383:17">=</operator> <call pos:start="383:19" pos:end="387:78"><name pos:start="383:19" pos:end="383:30">isa_ide_init</name><argument_list pos:start="383:31" pos:end="387:78">(<argument pos:start="383:32" pos:end="383:38"><expr pos:start="383:32" pos:end="383:38"><name pos:start="383:32" pos:end="383:38">isa_bus</name></expr></argument>, <argument pos:start="383:41" pos:end="383:53"><expr pos:start="383:41" pos:end="383:53"><name pos:start="383:41" pos:end="383:53"><name pos:start="383:41" pos:end="383:50">ide_iobase</name><index pos:start="383:51" pos:end="383:53">[<expr pos:start="383:52" pos:end="383:52"><name pos:start="383:52" pos:end="383:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="383:56" pos:end="383:69"><expr pos:start="383:56" pos:end="383:69"><name pos:start="383:56" pos:end="383:69"><name pos:start="383:56" pos:end="383:66">ide_iobase2</name><index pos:start="383:67" pos:end="383:69">[<expr pos:start="383:68" pos:end="383:68"><name pos:start="383:68" pos:end="383:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="385:32" pos:end="385:41"><expr pos:start="385:32" pos:end="385:41"><name pos:start="385:32" pos:end="385:41"><name pos:start="385:32" pos:end="385:38">ide_irq</name><index pos:start="385:39" pos:end="385:41">[<expr pos:start="385:40" pos:end="385:40"><name pos:start="385:40" pos:end="385:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="387:32" pos:end="387:51"><expr pos:start="387:32" pos:end="387:51"><name pos:start="387:32" pos:end="387:51"><name pos:start="387:32" pos:end="387:33">hd</name><index pos:start="387:34" pos:end="387:51">[<expr pos:start="387:35" pos:end="387:50"><name pos:start="387:35" pos:end="387:46">MAX_IDE_DEVS</name> <operator pos:start="387:48" pos:end="387:48">*</operator> <name pos:start="387:50" pos:end="387:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="387:54" pos:end="387:77"><expr pos:start="387:54" pos:end="387:77"><name pos:start="387:54" pos:end="387:77"><name pos:start="387:54" pos:end="387:55">hd</name><index pos:start="387:56" pos:end="387:77">[<expr pos:start="387:57" pos:end="387:76"><name pos:start="387:57" pos:end="387:68">MAX_IDE_DEVS</name> <operator pos:start="387:70" pos:end="387:70">*</operator> <name pos:start="387:72" pos:end="387:72">i</name> <operator pos:start="387:74" pos:end="387:74">+</operator> <literal type="number" pos:start="387:76" pos:end="387:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="389:13" pos:end="395:15">/*

             * The ide bus name is ide.0 for the first bus and ide.1 for the

             * second one.

             */</comment>

            <expr_stmt pos:start="397:13" pos:end="397:33"><expr pos:start="397:13" pos:end="397:32"><name pos:start="397:13" pos:end="397:22"><name pos:start="397:13" pos:end="397:19">busname</name><index pos:start="397:20" pos:end="397:22">[<expr pos:start="397:21" pos:end="397:21"><literal type="number" pos:start="397:21" pos:end="397:21">4</literal></expr>]</index></name> <operator pos:start="397:24" pos:end="397:24">=</operator> <literal type="char" pos:start="397:26" pos:end="397:28">'0'</literal> <operator pos:start="397:30" pos:end="397:30">+</operator> <name pos:start="397:32" pos:end="397:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:65"><expr pos:start="399:13" pos:end="399:64"><name pos:start="399:13" pos:end="399:21"><name pos:start="399:13" pos:end="399:18">idebus</name><index pos:start="399:19" pos:end="399:21">[<expr pos:start="399:20" pos:end="399:20"><name pos:start="399:20" pos:end="399:20">i</name></expr>]</index></name> <operator pos:start="399:23" pos:end="399:23">=</operator> <call pos:start="399:25" pos:end="399:64"><name pos:start="399:25" pos:end="399:42">qdev_get_child_bus</name><argument_list pos:start="399:43" pos:end="399:64">(<argument pos:start="399:44" pos:end="399:54"><expr pos:start="399:44" pos:end="399:54"><call pos:start="399:44" pos:end="399:54"><name pos:start="399:44" pos:end="399:49">DEVICE</name><argument_list pos:start="399:50" pos:end="399:54">(<argument pos:start="399:51" pos:end="399:53"><expr pos:start="399:51" pos:end="399:53"><name pos:start="399:51" pos:end="399:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="399:57" pos:end="399:63"><expr pos:start="399:57" pos:end="399:63"><name pos:start="399:57" pos:end="399:63">busname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="407:5" pos:end="407:56"><expr pos:start="407:5" pos:end="407:55"><call pos:start="407:5" pos:end="407:55"><name pos:start="407:5" pos:end="407:16">pc_cmos_init</name><argument_list pos:start="407:17" pos:end="407:55">(<argument pos:start="407:18" pos:end="407:21"><expr pos:start="407:18" pos:end="407:21"><name pos:start="407:18" pos:end="407:21">pcms</name></expr></argument>, <argument pos:start="407:24" pos:end="407:32"><expr pos:start="407:24" pos:end="407:32"><name pos:start="407:24" pos:end="407:32"><name pos:start="407:24" pos:end="407:29">idebus</name><index pos:start="407:30" pos:end="407:32">[<expr pos:start="407:31" pos:end="407:31"><literal type="number" pos:start="407:31" pos:end="407:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="407:35" pos:end="407:43"><expr pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:43"><name pos:start="407:35" pos:end="407:40">idebus</name><index pos:start="407:41" pos:end="407:43">[<expr pos:start="407:42" pos:end="407:42"><literal type="number" pos:start="407:42" pos:end="407:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="407:46" pos:end="407:54"><expr pos:start="407:46" pos:end="407:54"><name pos:start="407:46" pos:end="407:54">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="411:5" pos:end="415:5"><if pos:start="411:5" pos:end="415:5">if <condition pos:start="411:8" pos:end="411:50">(<expr pos:start="411:9" pos:end="411:49"><name pos:start="411:9" pos:end="411:25"><name pos:start="411:9" pos:end="411:12">pcmc</name><operator pos:start="411:13" pos:end="411:14">-&gt;</operator><name pos:start="411:15" pos:end="411:25">pci_enabled</name></name> <operator pos:start="411:27" pos:end="411:28">&amp;&amp;</operator> <call pos:start="411:30" pos:end="411:49"><name pos:start="411:30" pos:end="411:40">machine_usb</name><argument_list pos:start="411:41" pos:end="411:49">(<argument pos:start="411:42" pos:end="411:48"><expr pos:start="411:42" pos:end="411:48"><name pos:start="411:42" pos:end="411:48">machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="411:52" pos:end="415:5">{<block_content pos:start="413:9" pos:end="413:70">

        <expr_stmt pos:start="413:9" pos:end="413:70"><expr pos:start="413:9" pos:end="413:69"><call pos:start="413:9" pos:end="413:69"><name pos:start="413:9" pos:end="413:25">pci_create_simple</name><argument_list pos:start="413:26" pos:end="413:69">(<argument pos:start="413:27" pos:end="413:33"><expr pos:start="413:27" pos:end="413:33"><name pos:start="413:27" pos:end="413:33">pci_bus</name></expr></argument>, <argument pos:start="413:36" pos:end="413:50"><expr pos:start="413:36" pos:end="413:50"><name pos:start="413:36" pos:end="413:46">piix3_devfn</name> <operator pos:start="413:48" pos:end="413:48">+</operator> <literal type="number" pos:start="413:50" pos:end="413:50">2</literal></expr></argument>, <argument pos:start="413:53" pos:end="413:68"><expr pos:start="413:53" pos:end="413:68"><literal type="string" pos:start="413:53" pos:end="413:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="419:5" pos:end="457:5"><if pos:start="419:5" pos:end="457:5">if <condition pos:start="419:8" pos:end="419:42">(<expr pos:start="419:9" pos:end="419:41"><name pos:start="419:9" pos:end="419:25"><name pos:start="419:9" pos:end="419:12">pcmc</name><operator pos:start="419:13" pos:end="419:14">-&gt;</operator><name pos:start="419:15" pos:end="419:25">pci_enabled</name></name> <operator pos:start="419:27" pos:end="419:28">&amp;&amp;</operator> <name pos:start="419:30" pos:end="419:41">acpi_enabled</name></expr>)</condition> <block pos:start="419:44" pos:end="457:5">{<block_content pos:start="421:9" pos:end="455:76">

        <decl_stmt pos:start="421:9" pos:end="421:30"><decl pos:start="421:9" pos:end="421:29"><type pos:start="421:9" pos:end="421:21"><name pos:start="421:9" pos:end="421:19">DeviceState</name> <modifier pos:start="421:21" pos:end="421:21">*</modifier></type><name pos:start="421:22" pos:end="421:29">piix4_pm</name></decl>;</decl_stmt>

        <decl_stmt pos:start="423:9" pos:end="423:22"><decl pos:start="423:9" pos:end="423:21"><type pos:start="423:9" pos:end="423:16"><name pos:start="423:9" pos:end="423:14">I2CBus</name> <modifier pos:start="423:16" pos:end="423:16">*</modifier></type><name pos:start="423:17" pos:end="423:21">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="427:9" pos:end="427:73"><expr pos:start="427:9" pos:end="427:72"><name pos:start="427:9" pos:end="427:15">smi_irq</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <call pos:start="427:19" pos:end="427:72"><name pos:start="427:19" pos:end="427:35">qemu_allocate_irq</name><argument_list pos:start="427:36" pos:end="427:72">(<argument pos:start="427:37" pos:end="427:57"><expr pos:start="427:37" pos:end="427:57"><name pos:start="427:37" pos:end="427:57">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="427:60" pos:end="427:68"><expr pos:start="427:60" pos:end="427:68"><name pos:start="427:60" pos:end="427:68">first_cpu</name></expr></argument>, <argument pos:start="427:71" pos:end="427:71"><expr pos:start="427:71" pos:end="427:71"><literal type="number" pos:start="427:71" pos:end="427:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="429:9" pos:end="429:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="431:9" pos:end="437:41"><expr pos:start="431:9" pos:end="437:40"><name pos:start="431:9" pos:end="431:13">smbus</name> <operator pos:start="431:15" pos:end="431:15">=</operator> <call pos:start="431:17" pos:end="437:40"><name pos:start="431:17" pos:end="431:29">piix4_pm_init</name><argument_list pos:start="431:30" pos:end="437:40">(<argument pos:start="431:31" pos:end="431:37"><expr pos:start="431:31" pos:end="431:37"><name pos:start="431:31" pos:end="431:37">pci_bus</name></expr></argument>, <argument pos:start="431:40" pos:end="431:54"><expr pos:start="431:40" pos:end="431:54"><name pos:start="431:40" pos:end="431:50">piix3_devfn</name> <operator pos:start="431:52" pos:end="431:52">+</operator> <literal type="number" pos:start="431:54" pos:end="431:54">3</literal></expr></argument>, <argument pos:start="431:57" pos:end="431:62"><expr pos:start="431:57" pos:end="431:62"><literal type="number" pos:start="431:57" pos:end="431:62">0xb100</literal></expr></argument>,

                              <argument pos:start="433:31" pos:end="433:42"><expr pos:start="433:31" pos:end="433:42"><name pos:start="433:31" pos:end="433:42"><name pos:start="433:31" pos:end="433:34">pcms</name><operator pos:start="433:35" pos:end="433:36">-&gt;</operator><name pos:start="433:37" pos:end="433:39">gsi</name><index pos:start="433:40" pos:end="433:42">[<expr pos:start="433:41" pos:end="433:41"><literal type="number" pos:start="433:41" pos:end="433:41">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="433:45" pos:end="433:51"><expr pos:start="433:45" pos:end="433:51"><name pos:start="433:45" pos:end="433:51">smi_irq</name></expr></argument>,

                              <argument pos:start="435:31" pos:end="435:61"><expr pos:start="435:31" pos:end="435:61"><call pos:start="435:31" pos:end="435:61"><name pos:start="435:31" pos:end="435:55">pc_machine_is_smm_enabled</name><argument_list pos:start="435:56" pos:end="435:61">(<argument pos:start="435:57" pos:end="435:60"><expr pos:start="435:57" pos:end="435:60"><name pos:start="435:57" pos:end="435:60">pcms</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="437:31" pos:end="437:39"><expr pos:start="437:31" pos:end="437:39"><operator pos:start="437:31" pos:end="437:31">&amp;</operator><name pos:start="437:32" pos:end="437:39">piix4_pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:45"><expr pos:start="439:9" pos:end="439:44"><call pos:start="439:9" pos:end="439:44"><name pos:start="439:9" pos:end="439:25">smbus_eeprom_init</name><argument_list pos:start="439:26" pos:end="439:44">(<argument pos:start="439:27" pos:end="439:31"><expr pos:start="439:27" pos:end="439:31"><name pos:start="439:27" pos:end="439:31">smbus</name></expr></argument>, <argument pos:start="439:34" pos:end="439:34"><expr pos:start="439:34" pos:end="439:34"><literal type="number" pos:start="439:34" pos:end="439:34">8</literal></expr></argument>, <argument pos:start="439:37" pos:end="439:40"><expr pos:start="439:37" pos:end="439:40"><name pos:start="439:37" pos:end="439:40">NULL</name></expr></argument>, <argument pos:start="439:43" pos:end="439:43"><expr pos:start="439:43" pos:end="439:43"><literal type="number" pos:start="439:43" pos:end="439:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="443:9" pos:end="451:79"><expr pos:start="443:9" pos:end="451:78"><call pos:start="443:9" pos:end="451:78"><name pos:start="443:9" pos:end="443:32">object_property_add_link</name><argument_list pos:start="443:33" pos:end="451:78">(<argument pos:start="443:34" pos:end="443:48"><expr pos:start="443:34" pos:end="443:48"><call pos:start="443:34" pos:end="443:48"><name pos:start="443:34" pos:end="443:39">OBJECT</name><argument_list pos:start="443:40" pos:end="443:48">(<argument pos:start="443:41" pos:end="443:47"><expr pos:start="443:41" pos:end="443:47"><name pos:start="443:41" pos:end="443:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="443:51" pos:end="443:77"><expr pos:start="443:51" pos:end="443:77"><name pos:start="443:51" pos:end="443:77">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>,

                                 <argument pos:start="445:34" pos:end="445:53"><expr pos:start="445:34" pos:end="445:53"><name pos:start="445:34" pos:end="445:53">TYPE_HOTPLUG_HANDLER</name></expr></argument>,

                                 <argument pos:start="447:34" pos:end="447:59"><expr pos:start="447:34" pos:end="447:59"><operator pos:start="447:34" pos:end="447:34">(</operator><name pos:start="447:35" pos:end="447:40">Object</name> <operator pos:start="447:42" pos:end="447:42">*</operator><operator pos:start="447:43" pos:end="447:43">*</operator><operator pos:start="447:44" pos:end="447:44">)</operator><operator pos:start="447:45" pos:end="447:45">&amp;</operator><name pos:start="447:46" pos:end="447:59"><name pos:start="447:46" pos:end="447:49">pcms</name><operator pos:start="447:50" pos:end="447:51">-&gt;</operator><name pos:start="447:52" pos:end="447:59">acpi_dev</name></name></expr></argument>,

                                 <argument pos:start="449:34" pos:end="449:63"><expr pos:start="449:34" pos:end="449:63"><name pos:start="449:34" pos:end="449:63">object_property_allow_set_link</name></expr></argument>,

                                 <argument pos:start="451:34" pos:end="451:63"><expr pos:start="451:34" pos:end="451:63"><name pos:start="451:34" pos:end="451:63">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="451:66" pos:end="451:77"><expr pos:start="451:66" pos:end="451:77"><operator pos:start="451:66" pos:end="451:66">&amp;</operator><name pos:start="451:67" pos:end="451:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="455:76"><expr pos:start="453:9" pos:end="455:75"><call pos:start="453:9" pos:end="455:75"><name pos:start="453:9" pos:end="453:32">object_property_set_link</name><argument_list pos:start="453:33" pos:end="455:75">(<argument pos:start="453:34" pos:end="453:48"><expr pos:start="453:34" pos:end="453:48"><call pos:start="453:34" pos:end="453:48"><name pos:start="453:34" pos:end="453:39">OBJECT</name><argument_list pos:start="453:40" pos:end="453:48">(<argument pos:start="453:41" pos:end="453:47"><expr pos:start="453:41" pos:end="453:47"><name pos:start="453:41" pos:end="453:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="453:51" pos:end="453:66"><expr pos:start="453:51" pos:end="453:66"><call pos:start="453:51" pos:end="453:66"><name pos:start="453:51" pos:end="453:56">OBJECT</name><argument_list pos:start="453:57" pos:end="453:66">(<argument pos:start="453:58" pos:end="453:65"><expr pos:start="453:58" pos:end="453:65"><name pos:start="453:58" pos:end="453:65">piix4_pm</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="455:34" pos:end="455:60"><expr pos:start="455:34" pos:end="455:60"><name pos:start="455:34" pos:end="455:60">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>, <argument pos:start="455:63" pos:end="455:74"><expr pos:start="455:63" pos:end="455:74"><operator pos:start="455:63" pos:end="455:63">&amp;</operator><name pos:start="455:64" pos:end="455:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="461:5" pos:end="465:5"><if pos:start="461:5" pos:end="465:5">if <condition pos:start="461:8" pos:end="461:26">(<expr pos:start="461:9" pos:end="461:25"><name pos:start="461:9" pos:end="461:25"><name pos:start="461:9" pos:end="461:12">pcmc</name><operator pos:start="461:13" pos:end="461:14">-&gt;</operator><name pos:start="461:15" pos:end="461:25">pci_enabled</name></name></expr>)</condition> <block pos:start="461:28" pos:end="465:5">{<block_content pos:start="463:9" pos:end="463:36">

        <expr_stmt pos:start="463:9" pos:end="463:36"><expr pos:start="463:9" pos:end="463:35"><call pos:start="463:9" pos:end="463:35"><name pos:start="463:9" pos:end="463:26">pc_pci_device_init</name><argument_list pos:start="463:27" pos:end="463:35">(<argument pos:start="463:28" pos:end="463:34"><expr pos:start="463:28" pos:end="463:34"><name pos:start="463:28" pos:end="463:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="469:5" pos:end="475:5"><if pos:start="469:5" pos:end="475:5">if <condition pos:start="469:8" pos:end="469:43">(<expr pos:start="469:9" pos:end="469:42"><name pos:start="469:9" pos:end="469:42"><name pos:start="469:9" pos:end="469:12">pcms</name><operator pos:start="469:13" pos:end="469:14">-&gt;</operator><name pos:start="469:15" pos:end="469:31">acpi_nvdimm_state</name><operator pos:start="469:32" pos:end="469:32">.</operator><name pos:start="469:33" pos:end="469:42">is_enabled</name></name></expr>)</condition> <block pos:start="469:45" pos:end="475:5">{<block_content pos:start="471:9" pos:end="473:59">

        <expr_stmt pos:start="471:9" pos:end="473:59"><expr pos:start="471:9" pos:end="473:58"><call pos:start="471:9" pos:end="473:58"><name pos:start="471:9" pos:end="471:30">nvdimm_init_acpi_state</name><argument_list pos:start="471:31" pos:end="473:58">(<argument pos:start="471:32" pos:end="471:55"><expr pos:start="471:32" pos:end="471:55"><operator pos:start="471:32" pos:end="471:32">&amp;</operator><name pos:start="471:33" pos:end="471:55"><name pos:start="471:33" pos:end="471:36">pcms</name><operator pos:start="471:37" pos:end="471:38">-&gt;</operator><name pos:start="471:39" pos:end="471:55">acpi_nvdimm_state</name></name></expr></argument>, <argument pos:start="471:58" pos:end="471:66"><expr pos:start="471:58" pos:end="471:66"><name pos:start="471:58" pos:end="471:66">system_io</name></expr></argument>,

                               <argument pos:start="473:32" pos:end="473:43"><expr pos:start="473:32" pos:end="473:43"><name pos:start="473:32" pos:end="473:43"><name pos:start="473:32" pos:end="473:35">pcms</name><operator pos:start="473:36" pos:end="473:37">-&gt;</operator><name pos:start="473:38" pos:end="473:43">fw_cfg</name></name></expr></argument>, <argument pos:start="473:46" pos:end="473:57"><expr pos:start="473:46" pos:end="473:57"><call pos:start="473:46" pos:end="473:57"><name pos:start="473:46" pos:end="473:51">OBJECT</name><argument_list pos:start="473:52" pos:end="473:57">(<argument pos:start="473:53" pos:end="473:56"><expr pos:start="473:53" pos:end="473:56"><name pos:start="473:53" pos:end="473:56">pcms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
