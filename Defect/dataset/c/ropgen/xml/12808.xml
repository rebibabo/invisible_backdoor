<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12808.c" pos:tabs="8"><function pos:start="1:1" pos:end="401:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hyscale</name>)<parameter_list pos:start="1:35" pos:end="9:72">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:54">long</name></type> <name pos:start="1:56" pos:end="1:63">dstWidth</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:77"><decl pos:start="1:66" pos:end="1:77"><type pos:start="1:66" pos:end="1:77"><name pos:start="1:66" pos:end="1:72">uint8_t</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">src</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:87"><decl pos:start="1:80" pos:end="1:87"><type pos:start="1:80" pos:end="1:87"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:87">srcW</name></decl></parameter>, <parameter pos:start="1:90" pos:end="1:97"><decl pos:start="1:90" pos:end="1:97"><type pos:start="1:90" pos:end="1:97"><name pos:start="1:90" pos:end="1:92">int</name></type> <name pos:start="1:94" pos:end="1:97">xInc</name></decl></parameter>,

				   <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">flags</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:63"><decl pos:start="3:47" pos:end="3:63"><type pos:start="3:47" pos:end="3:63"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:63">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:84"><decl pos:start="3:66" pos:end="3:84"><type pos:start="3:66" pos:end="3:84"><name pos:start="3:66" pos:end="3:72">int16_t</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:84">hLumFilter</name></decl></parameter>,

				   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hLumFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hLumFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:95"><decl pos:start="5:80" pos:end="5:95"><type pos:start="5:80" pos:end="5:95"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:95">funnyYCode</name></decl></parameter>,

				   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

				   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>, <parameter pos:start="9:60" pos:end="9:71"><decl pos:start="9:60" pos:end="9:71"><type pos:start="9:60" pos:end="9:71"><name pos:start="9:60" pos:end="9:66">uint8_t</name> <modifier pos:start="9:68" pos:end="9:68">*</modifier></type><name pos:start="9:69" pos:end="9:71">pal</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="401:1">{<block_content pos:start="13:5" pos:end="399:5">

    <if_stmt pos:start="13:5" pos:end="126:0"><if pos:start="13:5" pos:end="21:5">if<condition pos:start="13:7" pos:end="13:65">(<expr pos:start="13:8" pos:end="13:64"><name pos:start="13:8" pos:end="13:16">srcFormat</name><operator pos:start="13:17" pos:end="13:18">==</operator><name pos:start="13:19" pos:end="13:33">PIX_FMT_YUYV422</name> <operator pos:start="13:35" pos:end="13:36">||</operator> <name pos:start="13:38" pos:end="13:46">srcFormat</name><operator pos:start="13:47" pos:end="13:48">==</operator><name pos:start="13:49" pos:end="13:64">PIX_FMT_GRAY16BE</name></expr>)</condition>

    <block pos:start="15:5" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:30">

	<function_decl pos:start="17:9" pos:end="17:53"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:14">RENAME</name></type>(<name pos:start="17:16" pos:end="17:22">yuy2ToY</name>)<parameter_list pos:start="17:24" pos:end="17:52">(<parameter pos:start="17:25" pos:end="17:40"><decl pos:start="17:25" pos:end="17:40"><type pos:start="17:25" pos:end="17:40"><name pos:start="17:25" pos:end="17:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="17:43" pos:end="17:45"><decl pos:start="17:43" pos:end="17:45"><type pos:start="17:43" pos:end="17:45"><name pos:start="17:43" pos:end="17:45">src</name></type></decl></parameter>, <parameter pos:start="17:48" pos:end="17:51"><decl pos:start="17:48" pos:end="17:51"><type pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:11">src</name><operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="23:5" pos:end="31:5">else if<condition pos:start="23:12" pos:end="23:70">(<expr pos:start="23:13" pos:end="23:69"><name pos:start="23:13" pos:end="23:21">srcFormat</name><operator pos:start="23:22" pos:end="23:23">==</operator><name pos:start="23:24" pos:end="23:38">PIX_FMT_UYVY422</name> <operator pos:start="23:40" pos:end="23:41">||</operator> <name pos:start="23:43" pos:end="23:51">srcFormat</name><operator pos:start="23:52" pos:end="23:53">==</operator><name pos:start="23:54" pos:end="23:69">PIX_FMT_GRAY16LE</name></expr>)</condition>

    <block pos:start="25:5" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:30">

	<function_decl pos:start="27:9" pos:end="27:53"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">RENAME</name></type>(<name pos:start="27:16" pos:end="27:22">uyvyToY</name>)<parameter_list pos:start="27:24" pos:end="27:52">(<parameter pos:start="27:25" pos:end="27:40"><decl pos:start="27:25" pos:end="27:40"><type pos:start="27:25" pos:end="27:40"><name pos:start="27:25" pos:end="27:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="27:43" pos:end="27:45"><decl pos:start="27:43" pos:end="27:45"><type pos:start="27:43" pos:end="27:45"><name pos:start="27:43" pos:end="27:45">src</name></type></decl></parameter>, <parameter pos:start="27:48" pos:end="27:51"><decl pos:start="27:48" pos:end="27:51"><type pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:11">src</name><operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="33:5" pos:end="41:5">else if<condition pos:start="33:12" pos:end="33:37">(<expr pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:21">srcFormat</name><operator pos:start="33:22" pos:end="33:23">==</operator><name pos:start="33:24" pos:end="33:36">PIX_FMT_RGB32</name></expr>)</condition>

    <block pos:start="35:5" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:30">

	<function_decl pos:start="37:9" pos:end="37:54"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:14">RENAME</name></type>(<name pos:start="37:16" pos:end="37:23">bgr32ToY</name>)<parameter_list pos:start="37:25" pos:end="37:53">(<parameter pos:start="37:26" pos:end="37:41"><decl pos:start="37:26" pos:end="37:41"><type pos:start="37:26" pos:end="37:41"><name pos:start="37:26" pos:end="37:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="37:44" pos:end="37:46"><decl pos:start="37:44" pos:end="37:46"><type pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">src</name></type></decl></parameter>, <parameter pos:start="37:49" pos:end="37:52"><decl pos:start="37:49" pos:end="37:52"><type pos:start="37:49" pos:end="37:52"><name pos:start="37:49" pos:end="37:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">src</name><operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="43:5" pos:end="51:5">else if<condition pos:start="43:12" pos:end="43:37">(<expr pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:21">srcFormat</name><operator pos:start="43:22" pos:end="43:23">==</operator><name pos:start="43:24" pos:end="43:36">PIX_FMT_BGR24</name></expr>)</condition>

    <block pos:start="45:5" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:30">

	<function_decl pos:start="47:9" pos:end="47:54"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:14">RENAME</name></type>(<name pos:start="47:16" pos:end="47:23">bgr24ToY</name>)<parameter_list pos:start="47:25" pos:end="47:53">(<parameter pos:start="47:26" pos:end="47:41"><decl pos:start="47:26" pos:end="47:41"><type pos:start="47:26" pos:end="47:41"><name pos:start="47:26" pos:end="47:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="47:44" pos:end="47:46"><decl pos:start="47:44" pos:end="47:46"><type pos:start="47:44" pos:end="47:46"><name pos:start="47:44" pos:end="47:46">src</name></type></decl></parameter>, <parameter pos:start="47:49" pos:end="47:52"><decl pos:start="47:49" pos:end="47:52"><type pos:start="47:49" pos:end="47:52"><name pos:start="47:49" pos:end="47:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:11">src</name><operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="53:5" pos:end="61:5">else if<condition pos:start="53:12" pos:end="53:38">(<expr pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:21">srcFormat</name><operator pos:start="53:22" pos:end="53:23">==</operator><name pos:start="53:24" pos:end="53:37">PIX_FMT_BGR565</name></expr>)</condition>

    <block pos:start="55:5" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:30">

	<function_decl pos:start="57:9" pos:end="57:54"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:14">RENAME</name></type>(<name pos:start="57:16" pos:end="57:23">bgr16ToY</name>)<parameter_list pos:start="57:25" pos:end="57:53">(<parameter pos:start="57:26" pos:end="57:41"><decl pos:start="57:26" pos:end="57:41"><type pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="57:44" pos:end="57:46"><decl pos:start="57:44" pos:end="57:46"><type pos:start="57:44" pos:end="57:46"><name pos:start="57:44" pos:end="57:46">src</name></type></decl></parameter>, <parameter pos:start="57:49" pos:end="57:52"><decl pos:start="57:49" pos:end="57:52"><type pos:start="57:49" pos:end="57:52"><name pos:start="57:49" pos:end="57:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:11">src</name><operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="63:5" pos:end="71:5">else if<condition pos:start="63:12" pos:end="63:38">(<expr pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:21">srcFormat</name><operator pos:start="63:22" pos:end="63:23">==</operator><name pos:start="63:24" pos:end="63:37">PIX_FMT_BGR555</name></expr>)</condition>

    <block pos:start="65:5" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:30">

	<function_decl pos:start="67:9" pos:end="67:54"><type pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:14">RENAME</name></type>(<name pos:start="67:16" pos:end="67:23">bgr15ToY</name>)<parameter_list pos:start="67:25" pos:end="67:53">(<parameter pos:start="67:26" pos:end="67:41"><decl pos:start="67:26" pos:end="67:41"><type pos:start="67:26" pos:end="67:41"><name pos:start="67:26" pos:end="67:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="67:44" pos:end="67:46"><decl pos:start="67:44" pos:end="67:46"><type pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">src</name></type></decl></parameter>, <parameter pos:start="67:49" pos:end="67:52"><decl pos:start="67:49" pos:end="67:52"><type pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:11">src</name><operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="81:5">else if<condition pos:start="73:12" pos:end="73:37">(<expr pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:21">srcFormat</name><operator pos:start="73:22" pos:end="73:23">==</operator><name pos:start="73:24" pos:end="73:36">PIX_FMT_BGR32</name></expr>)</condition>

    <block pos:start="75:5" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:30">

	<function_decl pos:start="77:9" pos:end="77:54"><type pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:14">RENAME</name></type>(<name pos:start="77:16" pos:end="77:23">rgb32ToY</name>)<parameter_list pos:start="77:25" pos:end="77:53">(<parameter pos:start="77:26" pos:end="77:41"><decl pos:start="77:26" pos:end="77:41"><type pos:start="77:26" pos:end="77:41"><name pos:start="77:26" pos:end="77:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="77:44" pos:end="77:46"><decl pos:start="77:44" pos:end="77:46"><type pos:start="77:44" pos:end="77:46"><name pos:start="77:44" pos:end="77:46">src</name></type></decl></parameter>, <parameter pos:start="77:49" pos:end="77:52"><decl pos:start="77:49" pos:end="77:52"><type pos:start="77:49" pos:end="77:52"><name pos:start="77:49" pos:end="77:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:11">src</name><operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="83:5" pos:end="91:5">else if<condition pos:start="83:12" pos:end="83:37">(<expr pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:21">srcFormat</name><operator pos:start="83:22" pos:end="83:23">==</operator><name pos:start="83:24" pos:end="83:36">PIX_FMT_RGB24</name></expr>)</condition>

    <block pos:start="85:5" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:30">

	<function_decl pos:start="87:9" pos:end="87:54"><type pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:14">RENAME</name></type>(<name pos:start="87:16" pos:end="87:23">rgb24ToY</name>)<parameter_list pos:start="87:25" pos:end="87:53">(<parameter pos:start="87:26" pos:end="87:41"><decl pos:start="87:26" pos:end="87:41"><type pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="87:44" pos:end="87:46"><decl pos:start="87:44" pos:end="87:46"><type pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">src</name></type></decl></parameter>, <parameter pos:start="87:49" pos:end="87:52"><decl pos:start="87:49" pos:end="87:52"><type pos:start="87:49" pos:end="87:52"><name pos:start="87:49" pos:end="87:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:11">src</name><operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="93:5" pos:end="101:5">else if<condition pos:start="93:12" pos:end="93:38">(<expr pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:21">srcFormat</name><operator pos:start="93:22" pos:end="93:23">==</operator><name pos:start="93:24" pos:end="93:37">PIX_FMT_RGB565</name></expr>)</condition>

    <block pos:start="95:5" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:30">

	<function_decl pos:start="97:9" pos:end="97:54"><type pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:14">RENAME</name></type>(<name pos:start="97:16" pos:end="97:23">rgb16ToY</name>)<parameter_list pos:start="97:25" pos:end="97:53">(<parameter pos:start="97:26" pos:end="97:41"><decl pos:start="97:26" pos:end="97:41"><type pos:start="97:26" pos:end="97:41"><name pos:start="97:26" pos:end="97:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="97:44" pos:end="97:46"><decl pos:start="97:44" pos:end="97:46"><type pos:start="97:44" pos:end="97:46"><name pos:start="97:44" pos:end="97:46">src</name></type></decl></parameter>, <parameter pos:start="97:49" pos:end="97:52"><decl pos:start="97:49" pos:end="97:52"><type pos:start="97:49" pos:end="97:52"><name pos:start="97:49" pos:end="97:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:11">src</name><operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="103:5" pos:end="111:5">else if<condition pos:start="103:12" pos:end="103:38">(<expr pos:start="103:13" pos:end="103:37"><name pos:start="103:13" pos:end="103:21">srcFormat</name><operator pos:start="103:22" pos:end="103:23">==</operator><name pos:start="103:24" pos:end="103:37">PIX_FMT_RGB555</name></expr>)</condition>

    <block pos:start="105:5" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:30">

	<function_decl pos:start="107:9" pos:end="107:54"><type pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:14">RENAME</name></type>(<name pos:start="107:16" pos:end="107:23">rgb15ToY</name>)<parameter_list pos:start="107:25" pos:end="107:53">(<parameter pos:start="107:26" pos:end="107:41"><decl pos:start="107:26" pos:end="107:41"><type pos:start="107:26" pos:end="107:41"><name pos:start="107:26" pos:end="107:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="107:44" pos:end="107:46"><decl pos:start="107:44" pos:end="107:46"><type pos:start="107:44" pos:end="107:46"><name pos:start="107:44" pos:end="107:46">src</name></type></decl></parameter>, <parameter pos:start="107:49" pos:end="107:52"><decl pos:start="107:49" pos:end="107:52"><type pos:start="107:49" pos:end="107:52"><name pos:start="107:49" pos:end="107:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:11">src</name><operator pos:start="109:12" pos:end="109:12">=</operator> <name pos:start="109:14" pos:end="109:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="113:5" pos:end="126:0">else if<condition pos:start="113:12" pos:end="113:155">(<expr pos:start="113:13" pos:end="113:154"><name pos:start="113:13" pos:end="113:21">srcFormat</name><operator pos:start="113:22" pos:end="113:23">==</operator><name pos:start="113:24" pos:end="113:35">PIX_FMT_RGB8</name> <operator pos:start="113:37" pos:end="113:38">||</operator> <name pos:start="113:40" pos:end="113:48">srcFormat</name><operator pos:start="113:49" pos:end="113:50">==</operator><name pos:start="113:51" pos:end="113:62">PIX_FMT_BGR8</name> <operator pos:start="113:64" pos:end="113:65">||</operator> <name pos:start="113:67" pos:end="113:75">srcFormat</name><operator pos:start="113:76" pos:end="113:77">==</operator><name pos:start="113:78" pos:end="113:89">PIX_FMT_PAL8</name> <operator pos:start="113:91" pos:end="113:92">||</operator> <name pos:start="113:94" pos:end="113:102">srcFormat</name><operator pos:start="113:103" pos:end="113:104">==</operator><name pos:start="113:105" pos:end="113:121">PIX_FMT_BGR4_BYTE</name>  <operator pos:start="113:124" pos:end="113:125">||</operator> <name pos:start="113:127" pos:end="113:135">srcFormat</name><operator pos:start="113:136" pos:end="113:137">==</operator><name pos:start="113:138" pos:end="113:154">PIX_FMT_RGB4_BYTE</name></expr>)</condition>

    <block pos:start="115:5" pos:end="126:0">{<block_content pos:start="117:9" pos:end="119:30">

	<function_decl pos:start="117:9" pos:end="117:57"><type pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">RENAME</name></type>(<name pos:start="117:16" pos:end="117:21">palToY</name>)<parameter_list pos:start="117:23" pos:end="117:56">(<parameter pos:start="117:24" pos:end="117:39"><decl pos:start="117:24" pos:end="117:39"><type pos:start="117:24" pos:end="117:39"><name pos:start="117:24" pos:end="117:39">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="117:42" pos:end="117:44"><decl pos:start="117:42" pos:end="117:44"><type pos:start="117:42" pos:end="117:44"><name pos:start="117:42" pos:end="117:44">src</name></type></decl></parameter>, <parameter pos:start="117:47" pos:end="117:50"><decl pos:start="117:47" pos:end="117:50"><type pos:start="117:47" pos:end="117:50"><name pos:start="117:47" pos:end="117:50">srcW</name></type></decl></parameter>, <parameter pos:start="117:53" pos:end="117:55"><decl pos:start="117:53" pos:end="117:55"><type pos:start="117:53" pos:end="117:55"><name pos:start="117:53" pos:end="117:55">pal</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="119:9" pos:end="119:30"><expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:11">src</name><operator pos:start="119:12" pos:end="119:12">=</operator> <name pos:start="119:14" pos:end="119:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="125:1" pos:end="125:15">#<cpp:directive pos:start="125:2" pos:end="125:6">ifdef</cpp:directive> <name pos:start="125:8" pos:end="125:15">HAVE_MMX</name></cpp:ifdef>

	<comment type="line" pos:start="127:9" pos:end="127:92">// use the new MMX scaler if the mmx2 can't be used (its faster than the x86asm one)</comment>

    <if_stmt pos:start="129:5" pos:end="399:5"><if pos:start="129:5" pos:end="399:5">if<condition pos:start="129:7" pos:end="132:0">(<expr pos:start="129:8" pos:end="129:53"><operator pos:start="129:8" pos:end="129:8">!</operator><operator pos:start="129:9" pos:end="129:9">(</operator><name pos:start="129:10" pos:end="129:14">flags</name><operator pos:start="129:15" pos:end="129:15">&amp;</operator><name pos:start="129:16" pos:end="129:32">SWS_FAST_BILINEAR</name><operator pos:start="129:33" pos:end="129:33">)</operator> <operator pos:start="129:35" pos:end="129:36">||</operator> <operator pos:start="129:38" pos:end="129:38">(</operator><operator pos:start="129:39" pos:end="129:39">!</operator><name pos:start="129:40" pos:end="129:52">canMMX2BeUsed</name><operator pos:start="129:53" pos:end="129:53">)</operator></expr>)</condition><block type="pseudo" pos:start="133:5" pos:end="399:5"><block_content pos:start="133:5" pos:end="399:5">

<cpp:else pos:start="131:1" pos:end="131:5">#<cpp:directive pos:start="131:2" pos:end="131:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="133:5" pos:end="399:5"><if pos:start="133:5" pos:end="141:5">if<condition pos:start="133:7" pos:end="136:0">(<expr pos:start="133:8" pos:end="133:33"><operator pos:start="133:8" pos:end="133:8">!</operator><operator pos:start="133:9" pos:end="133:9">(</operator><name pos:start="133:10" pos:end="133:14">flags</name><operator pos:start="133:15" pos:end="133:15">&amp;</operator><name pos:start="133:16" pos:end="133:32">SWS_FAST_BILINEAR</name><operator pos:start="133:33" pos:end="133:33">)</operator></expr>)</condition>

<cpp:endif pos:start="135:1" pos:end="135:6">#<cpp:directive pos:start="135:2" pos:end="135:6">endif</cpp:directive></cpp:endif>

    <block pos:start="137:5" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:98">

    	<function_decl pos:start="139:9" pos:end="139:98"><type pos:start="139:9" pos:end="139:14"><name pos:start="139:9" pos:end="139:14">RENAME</name></type>(<name pos:start="139:16" pos:end="139:21">hScale</name>)<parameter_list pos:start="139:23" pos:end="139:97">(<parameter pos:start="139:24" pos:end="139:26"><decl pos:start="139:24" pos:end="139:26"><type pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">dst</name></type></decl></parameter>, <parameter pos:start="139:29" pos:end="139:36"><decl pos:start="139:29" pos:end="139:36"><type pos:start="139:29" pos:end="139:36"><name pos:start="139:29" pos:end="139:36">dstWidth</name></type></decl></parameter>, <parameter pos:start="139:39" pos:end="139:41"><decl pos:start="139:39" pos:end="139:41"><type pos:start="139:39" pos:end="139:41"><name pos:start="139:39" pos:end="139:41">src</name></type></decl></parameter>, <parameter pos:start="139:44" pos:end="139:47"><decl pos:start="139:44" pos:end="139:47"><type pos:start="139:44" pos:end="139:47"><name pos:start="139:44" pos:end="139:47">srcW</name></type></decl></parameter>, <parameter pos:start="139:50" pos:end="139:53"><decl pos:start="139:50" pos:end="139:53"><type pos:start="139:50" pos:end="139:53"><name pos:start="139:50" pos:end="139:53">xInc</name></type></decl></parameter>, <parameter pos:start="139:56" pos:end="139:65"><decl pos:start="139:56" pos:end="139:65"><type pos:start="139:56" pos:end="139:65"><name pos:start="139:56" pos:end="139:65">hLumFilter</name></type></decl></parameter>, <parameter pos:start="139:68" pos:end="139:80"><decl pos:start="139:68" pos:end="139:80"><type pos:start="139:68" pos:end="139:80"><name pos:start="139:68" pos:end="139:80">hLumFilterPos</name></type></decl></parameter>, <parameter pos:start="139:83" pos:end="139:96"><decl pos:start="139:83" pos:end="139:96"><type pos:start="139:83" pos:end="139:96"><name pos:start="139:83" pos:end="139:96">hLumFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></if>

    <else pos:start="143:5" pos:end="399:5">else <comment type="line" pos:start="143:10" pos:end="143:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="145:5" pos:end="399:5">{<block_content pos:start="151:9" pos:end="398:0">

<cpp:if pos:start="147:1" pos:end="147:21">#<cpp:directive pos:start="147:2" pos:end="147:3">if</cpp:directive> <expr pos:start="147:5" pos:end="147:21"><call pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:11">defined</name><argument_list pos:start="147:12" pos:end="147:21">(<argument pos:start="147:13" pos:end="147:20"><expr pos:start="147:13" pos:end="147:20"><name pos:start="147:13" pos:end="147:20">ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="149:1" pos:end="149:16">#<cpp:directive pos:start="149:2" pos:end="149:6">ifdef</cpp:directive> <name pos:start="149:8" pos:end="149:16">HAVE_MMX2</name></cpp:ifdef>

	<decl_stmt pos:start="151:9" pos:end="154:0"><decl pos:start="151:9" pos:end="151:13"><type pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">int</name></type> <name pos:start="151:13" pos:end="151:13">i</name></decl>;</decl_stmt>

<cpp:if pos:start="153:1" pos:end="153:16">#<cpp:directive pos:start="153:2" pos:end="153:3">if</cpp:directive> <expr pos:start="153:5" pos:end="153:16"><call pos:start="153:5" pos:end="153:16"><name pos:start="153:5" pos:end="153:11">defined</name><argument_list pos:start="153:12" pos:end="153:16">(<argument pos:start="153:13" pos:end="153:15"><expr pos:start="153:13" pos:end="153:15"><name pos:start="153:13" pos:end="153:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

	<decl_stmt pos:start="155:9" pos:end="158:0"><decl pos:start="155:9" pos:end="155:52"><type pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:16">uint64_t</name> <name pos:start="155:18" pos:end="155:24">ebxsave</name></type> <name pos:start="155:26" pos:end="155:38">__attribute__</name><argument_list pos:start="155:39" pos:end="155:52">(<argument pos:start="155:40" pos:end="155:51"><expr pos:start="155:40" pos:end="155:51"><operator pos:start="155:40" pos:end="155:40">(</operator><call pos:start="155:41" pos:end="155:50"><name pos:start="155:41" pos:end="155:47">aligned</name><argument_list pos:start="155:48" pos:end="155:50">(<argument pos:start="155:49" pos:end="155:49"><expr pos:start="155:49" pos:end="155:49"><literal type="number" pos:start="155:49" pos:end="155:49">8</literal></expr></argument>)</argument_list></call><operator pos:start="155:51" pos:end="155:51">)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>

	<if_stmt pos:start="159:9" pos:end="378:0"><if pos:start="159:9" pos:end="279:9">if<condition pos:start="159:11" pos:end="159:25">(<expr pos:start="159:12" pos:end="159:24"><name pos:start="159:12" pos:end="159:24">canMMX2BeUsed</name></expr>)</condition>

	<block pos:start="161:9" pos:end="279:9">{<block_content pos:start="163:17" pos:end="277:87">

		<asm pos:start="163:17" pos:end="275:18">asm <specifier pos:start="163:21" pos:end="163:28">volatile</specifier>(

<cpp:if pos:start="165:1" pos:end="165:16">#<cpp:directive pos:start="165:2" pos:end="165:3">if</cpp:directive> <expr pos:start="165:5" pos:end="165:16"><call pos:start="165:5" pos:end="165:16"><name pos:start="165:5" pos:end="165:11">defined</name><argument_list pos:start="165:12" pos:end="165:16">(<argument pos:start="165:13" pos:end="165:15"><expr pos:start="165:13" pos:end="165:15"><name pos:start="165:13" pos:end="165:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			"mov %%"REG_b", %5    \n\t"

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>

			"pxor %%mm7, %%mm7		\n\t"

			"mov %0, %%"REG_c"		\n\t"

			"mov %1, %%"REG_D"		\n\t"

			"mov %2, %%"REG_d"		\n\t"

			"mov %3, %%"REG_b"		\n\t"

			"xor %%"REG_a", %%"REG_a"	\n\t" <comment type="line" pos:start="181:63" pos:end="181:66">// i</comment>

			PREFETCH" (%%"REG_c")		\n\t"

			PREFETCH" 32(%%"REG_c")		\n\t"

			PREFETCH" 64(%%"REG_c")		\n\t"



<cpp:ifdef pos:start="191:1" pos:end="191:18">#<cpp:directive pos:start="191:2" pos:end="191:6">ifdef</cpp:directive> <name pos:start="191:8" pos:end="191:18">ARCH_X86_64</name></cpp:ifdef>



<cpp:define pos:start="195:1" pos:end="211:5">#<cpp:directive pos:start="195:2" pos:end="195:7">define</cpp:directive> <cpp:macro pos:start="195:9" pos:end="195:20"><name pos:start="195:9" pos:end="195:20">FUNNY_Y_CODE</name></cpp:macro> \

			<cpp:value pos:start="197:25" pos:end="211:5">"movl (%%"REG_b"), %%esi	\n\t"\

			"call *%4			\n\t"\

			"movl (%%"REG_b", %%"REG_a"), %%esi\n\t"\

			"add %%"REG_S", %%"REG_c"	\n\t"\

			"add %%"REG_a", %%"REG_D"	\n\t"\

			"xor %%"REG_a", %%"REG_a"	\n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="215:1" pos:end="229:6">#<cpp:directive pos:start="215:2" pos:end="215:7">define</cpp:directive> <cpp:macro pos:start="215:9" pos:end="215:20"><name pos:start="215:9" pos:end="215:20">FUNNY_Y_CODE</name></cpp:macro> \

			<cpp:value pos:start="217:25" pos:end="229:6">"movl (%%"REG_b"), %%esi	\n\t"\

			"call *%4			\n\t"\

			"addl (%%"REG_b", %%"REG_a"), %%"REG_c"\n\t"\

			"add %%"REG_a", %%"REG_D"	\n\t"\

			"xor %%"REG_a", %%"REG_a"	\n\t"\



#endif</cpp:value></cpp:define>



FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE



<cpp:if pos:start="251:1" pos:end="251:16">#<cpp:directive pos:start="251:2" pos:end="251:3">if</cpp:directive> <expr pos:start="251:5" pos:end="251:16"><call pos:start="251:5" pos:end="251:16"><name pos:start="251:5" pos:end="251:11">defined</name><argument_list pos:start="251:12" pos:end="251:16">(<argument pos:start="251:13" pos:end="251:15"><expr pos:start="251:13" pos:end="251:15"><name pos:start="251:13" pos:end="251:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			"mov %5, %%"REG_b"    \n\t"

<cpp:endif pos:start="255:1" pos:end="255:6">#<cpp:directive pos:start="255:2" pos:end="255:6">endif</cpp:directive></cpp:endif>

			:: "m" (src), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

			"m" (funnyYCode)

<cpp:if pos:start="261:1" pos:end="261:16">#<cpp:directive pos:start="261:2" pos:end="261:3">if</cpp:directive> <expr pos:start="261:5" pos:end="261:16"><call pos:start="261:5" pos:end="261:16"><name pos:start="261:5" pos:end="261:11">defined</name><argument_list pos:start="261:12" pos:end="261:16">(<argument pos:start="261:13" pos:end="261:15"><expr pos:start="261:13" pos:end="261:15"><name pos:start="261:13" pos:end="261:15">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			,"m" (ebxsave)

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>

			: "%"REG_a, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

<cpp:if pos:start="269:1" pos:end="269:17">#<cpp:directive pos:start="269:2" pos:end="269:3">if</cpp:directive> <expr pos:start="269:5" pos:end="269:17"><operator pos:start="269:5" pos:end="269:5">!</operator><call pos:start="269:6" pos:end="269:17"><name pos:start="269:6" pos:end="269:12">defined</name><argument_list pos:start="269:13" pos:end="269:17">(<argument pos:start="269:14" pos:end="269:16"><expr pos:start="269:14" pos:end="269:16"><name pos:start="269:14" pos:end="269:16">PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

			,"%"REG_b

<cpp:endif pos:start="273:1" pos:end="273:6">#<cpp:directive pos:start="273:2" pos:end="273:6">endif</cpp:directive></cpp:endif>

		);</asm>

		<for pos:start="277:17" pos:end="277:87">for<control pos:start="277:20" pos:end="277:61">(<init pos:start="277:21" pos:end="277:33"><expr pos:start="277:21" pos:end="277:32"><name pos:start="277:21" pos:end="277:21">i</name><operator pos:start="277:22" pos:end="277:22">=</operator><name pos:start="277:23" pos:end="277:30">dstWidth</name><operator pos:start="277:31" pos:end="277:31">-</operator><literal type="number" pos:start="277:32" pos:end="277:32">1</literal></expr>;</init> <condition pos:start="277:35" pos:end="277:56"><expr pos:start="277:35" pos:end="277:55"><operator pos:start="277:35" pos:end="277:35">(</operator><name pos:start="277:36" pos:end="277:36">i</name><operator pos:start="277:37" pos:end="277:37">*</operator><name pos:start="277:38" pos:end="277:41">xInc</name><operator pos:start="277:42" pos:end="277:42">)</operator><operator pos:start="277:43" pos:end="277:44">&gt;&gt;</operator><literal type="number" pos:start="277:45" pos:end="277:46">16</literal> <operator pos:start="277:48" pos:end="277:49">&gt;=</operator><name pos:start="277:50" pos:end="277:53">srcW</name><operator pos:start="277:54" pos:end="277:54">-</operator><literal type="number" pos:start="277:55" pos:end="277:55">1</literal></expr>;</condition> <incr pos:start="277:58" pos:end="277:60"><expr pos:start="277:58" pos:end="277:60"><name pos:start="277:58" pos:end="277:58">i</name><operator pos:start="277:59" pos:end="277:60">--</operator></expr></incr>)</control><block type="pseudo" pos:start="277:63" pos:end="277:87"><block_content pos:start="277:63" pos:end="277:87"> <expr_stmt pos:start="277:63" pos:end="277:87"><expr pos:start="277:63" pos:end="277:86"><name pos:start="277:63" pos:end="277:68"><name pos:start="277:63" pos:end="277:65">dst</name><index pos:start="277:66" pos:end="277:68">[<expr pos:start="277:67" pos:end="277:67"><name pos:start="277:67" pos:end="277:67">i</name></expr>]</index></name> <operator pos:start="277:70" pos:end="277:70">=</operator> <name pos:start="277:72" pos:end="277:82"><name pos:start="277:72" pos:end="277:74">src</name><index pos:start="277:75" pos:end="277:82">[<expr pos:start="277:76" pos:end="277:81"><name pos:start="277:76" pos:end="277:79">srcW</name><operator pos:start="277:80" pos:end="277:80">-</operator><literal type="number" pos:start="277:81" pos:end="277:81">1</literal></expr>]</index></name><operator pos:start="277:83" pos:end="277:83">*</operator><literal type="number" pos:start="277:84" pos:end="277:86">128</literal></expr>;</expr_stmt></block_content></block></for>

	</block_content>}</block></if>

	<else pos:start="281:9" pos:end="378:0">else

	<block pos:start="283:9" pos:end="378:0">{<block_content pos:start="287:9" pos:end="372:0">

<cpp:endif pos:start="285:1" pos:end="285:6">#<cpp:directive pos:start="285:2" pos:end="285:6">endif</cpp:directive></cpp:endif>

	<decl_stmt pos:start="287:9" pos:end="287:37"><decl pos:start="287:9" pos:end="287:36"><type pos:start="287:9" pos:end="287:12"><name pos:start="287:9" pos:end="287:12">long</name></type> <name pos:start="287:14" pos:end="287:23">xInc_shr16</name> <init pos:start="287:25" pos:end="287:36">= <expr pos:start="287:27" pos:end="287:36"><name pos:start="287:27" pos:end="287:30">xInc</name> <operator pos:start="287:32" pos:end="287:33">&gt;&gt;</operator> <literal type="number" pos:start="287:35" pos:end="287:36">16</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="289:9" pos:end="289:43"><decl pos:start="289:9" pos:end="289:42"><type pos:start="289:9" pos:end="289:16"><name pos:start="289:9" pos:end="289:16">uint16_t</name></type> <name pos:start="289:18" pos:end="289:26">xInc_mask</name> <init pos:start="289:28" pos:end="289:42">= <expr pos:start="289:30" pos:end="289:42"><name pos:start="289:30" pos:end="289:33">xInc</name> <operator pos:start="289:35" pos:end="289:35">&amp;</operator> <literal type="number" pos:start="289:37" pos:end="289:42">0xffff</literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:start="291:9" pos:end="291:36">//NO MMX just normal asm ...</comment>

	<asm pos:start="293:9" pos:end="372:0">asm <specifier pos:start="293:13" pos:end="293:20">volatile</specifier>(

		"xor %%"REG_a", %%"REG_a"	\n\t" <comment type="line" pos:start="295:55" pos:end="295:58">// i</comment>

		"xor %%"REG_d", %%"REG_d"	\n\t" <comment type="line" pos:start="297:55" pos:end="297:59">// xx</comment>

		"xorl %%ecx, %%ecx		\n\t" <comment type="line" pos:start="299:55" pos:end="299:65">// 2*xalpha</comment>

		ASMALIGN(4)

		"1:				\n\t"

		"movzbl  (%0, %%"REG_d"), %%edi	\n\t" <comment type="line" pos:start="305:55" pos:end="305:63">//src[xx]</comment>

		"movzbl 1(%0, %%"REG_d"), %%esi	\n\t" <comment type="line" pos:start="307:55" pos:end="307:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="309:55" pos:end="309:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="311:55" pos:end="311:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="315:55" pos:end="315:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"mov %1, %%"REG_D"		\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, (%%"REG_D", %%"REG_a", 2)\n\t"

		"addw %4, %%cx			\n\t" <comment type="line" pos:start="323:55" pos:end="323:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adc %3, %%"REG_d"		\n\t" <comment type="line" pos:start="325:55" pos:end="325:76">//xx+= xInc&gt;&gt;8 + carry</comment>



		"movzbl (%0, %%"REG_d"), %%edi	\n\t" <comment type="line" pos:start="329:55" pos:end="329:63">//src[xx]</comment>

		"movzbl 1(%0, %%"REG_d"), %%esi	\n\t" <comment type="line" pos:start="331:55" pos:end="331:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="333:55" pos:end="333:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="335:55" pos:end="335:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="339:55" pos:end="339:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"mov %1, %%"REG_D"		\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, 2(%%"REG_D", %%"REG_a", 2)\n\t"

		"addw %4, %%cx			\n\t" <comment type="line" pos:start="347:55" pos:end="347:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adc %3, %%"REG_d"		\n\t" <comment type="line" pos:start="349:55" pos:end="349:76">//xx+= xInc&gt;&gt;8 + carry</comment>





		"add $2, %%"REG_a"		\n\t"

		"cmp %2, %%"REG_a"		\n\t"

		" jb 1b				\n\t"





		:: "r" (src), "m" (dst), "m" (dstWidth), "m" (xInc_shr16), "m" (xInc_mask)

		: "%"REG_a, "%"REG_d, "%ecx", "%"REG_D, "%esi"

		);</asm>

<cpp:ifdef pos:start="371:1" pos:end="371:16">#<cpp:directive pos:start="371:2" pos:end="371:6">ifdef</cpp:directive> <name pos:start="371:8" pos:end="371:16">HAVE_MMX2</name></cpp:ifdef>

	</block_content>}</block></else></if_stmt> <comment type="line" pos:start="373:11" pos:end="373:33">//if MMX2 can't be used</comment>

<cpp:endif pos:start="375:1" pos:end="375:6">#<cpp:directive pos:start="375:2" pos:end="375:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="377:1" pos:end="377:5">#<cpp:directive pos:start="377:2" pos:end="377:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="379:9" pos:end="379:14"><decl pos:start="379:9" pos:end="379:13"><type pos:start="379:9" pos:end="379:11"><name pos:start="379:9" pos:end="379:11">int</name></type> <name pos:start="379:13" pos:end="379:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="381:9" pos:end="381:28"><decl pos:start="381:9" pos:end="381:27"><type pos:start="381:9" pos:end="381:20"><name pos:start="381:9" pos:end="381:16">unsigned</name> <name pos:start="381:18" pos:end="381:20">int</name></type> <name pos:start="381:22" pos:end="381:25">xpos</name><init pos:start="381:26" pos:end="381:27">=<expr pos:start="381:27" pos:end="381:27"><literal type="number" pos:start="381:27" pos:end="381:27">0</literal></expr></init></decl>;</decl_stmt>

	<for pos:start="383:9" pos:end="398:0">for<control pos:start="383:12" pos:end="383:31">(<init pos:start="383:13" pos:end="383:16"><expr pos:start="383:13" pos:end="383:15"><name pos:start="383:13" pos:end="383:13">i</name><operator pos:start="383:14" pos:end="383:14">=</operator><literal type="number" pos:start="383:15" pos:end="383:15">0</literal></expr>;</init><condition pos:start="383:17" pos:end="383:27"><expr pos:start="383:17" pos:end="383:26"><name pos:start="383:17" pos:end="383:17">i</name><operator pos:start="383:18" pos:end="383:18">&lt;</operator><name pos:start="383:19" pos:end="383:26">dstWidth</name></expr>;</condition><incr pos:start="383:28" pos:end="383:30"><expr pos:start="383:28" pos:end="383:30"><name pos:start="383:28" pos:end="383:28">i</name><operator pos:start="383:29" pos:end="383:30">++</operator></expr></incr>)</control>

	<block pos:start="385:9" pos:end="398:0">{<block_content pos:start="387:17" pos:end="393:27">

		<decl_stmt pos:start="387:17" pos:end="387:50"><decl pos:start="387:17" pos:end="387:49"><type pos:start="387:17" pos:end="387:37"><specifier pos:start="387:17" pos:end="387:24">register</specifier> <name pos:start="387:26" pos:end="387:33">unsigned</name> <name pos:start="387:35" pos:end="387:37">int</name></type> <name pos:start="387:39" pos:end="387:40">xx</name><init pos:start="387:41" pos:end="387:49">=<expr pos:start="387:42" pos:end="387:49"><name pos:start="387:42" pos:end="387:45">xpos</name><operator pos:start="387:46" pos:end="387:47">&gt;&gt;</operator><literal type="number" pos:start="387:48" pos:end="387:49">16</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="389:17" pos:end="389:62"><decl pos:start="389:17" pos:end="389:61"><type pos:start="389:17" pos:end="389:37"><specifier pos:start="389:17" pos:end="389:24">register</specifier> <name pos:start="389:26" pos:end="389:33">unsigned</name> <name pos:start="389:35" pos:end="389:37">int</name></type> <name pos:start="389:39" pos:end="389:44">xalpha</name><init pos:start="389:45" pos:end="389:61">=<expr pos:start="389:46" pos:end="389:61"><operator pos:start="389:46" pos:end="389:46">(</operator><name pos:start="389:47" pos:end="389:50">xpos</name><operator pos:start="389:51" pos:end="389:51">&amp;</operator><literal type="number" pos:start="389:52" pos:end="389:57">0xFFFF</literal><operator pos:start="389:58" pos:end="389:58">)</operator><operator pos:start="389:59" pos:end="389:60">&gt;&gt;</operator><literal type="number" pos:start="389:61" pos:end="389:61">9</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="391:17" pos:end="391:68"><expr pos:start="391:17" pos:end="391:67"><name pos:start="391:17" pos:end="391:22"><name pos:start="391:17" pos:end="391:19">dst</name><index pos:start="391:20" pos:end="391:22">[<expr pos:start="391:21" pos:end="391:21"><name pos:start="391:21" pos:end="391:21">i</name></expr>]</index></name><operator pos:start="391:23" pos:end="391:23">=</operator> <operator pos:start="391:25" pos:end="391:25">(</operator><name pos:start="391:26" pos:end="391:32"><name pos:start="391:26" pos:end="391:28">src</name><index pos:start="391:29" pos:end="391:32">[<expr pos:start="391:30" pos:end="391:31"><name pos:start="391:30" pos:end="391:31">xx</name></expr>]</index></name><operator pos:start="391:33" pos:end="391:34">&lt;&lt;</operator><literal type="number" pos:start="391:35" pos:end="391:35">7</literal><operator pos:start="391:36" pos:end="391:36">)</operator> <operator pos:start="391:38" pos:end="391:38">+</operator> <operator pos:start="391:40" pos:end="391:40">(</operator><name pos:start="391:41" pos:end="391:49"><name pos:start="391:41" pos:end="391:43">src</name><index pos:start="391:44" pos:end="391:49">[<expr pos:start="391:45" pos:end="391:48"><name pos:start="391:45" pos:end="391:46">xx</name><operator pos:start="391:47" pos:end="391:47">+</operator><literal type="number" pos:start="391:48" pos:end="391:48">1</literal></expr>]</index></name> <operator pos:start="391:51" pos:end="391:51">-</operator> <name pos:start="391:53" pos:end="391:59"><name pos:start="391:53" pos:end="391:55">src</name><index pos:start="391:56" pos:end="391:59">[<expr pos:start="391:57" pos:end="391:58"><name pos:start="391:57" pos:end="391:58">xx</name></expr>]</index></name><operator pos:start="391:60" pos:end="391:60">)</operator><operator pos:start="391:61" pos:end="391:61">*</operator><name pos:start="391:62" pos:end="391:67">xalpha</name></expr>;</expr_stmt>

		<expr_stmt pos:start="393:17" pos:end="393:27"><expr pos:start="393:17" pos:end="393:26"><name pos:start="393:17" pos:end="393:20">xpos</name><operator pos:start="393:21" pos:end="393:22">+=</operator><name pos:start="393:23" pos:end="393:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

<cpp:endif pos:start="397:1" pos:end="397:6">#<cpp:directive pos:start="397:2" pos:end="397:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
