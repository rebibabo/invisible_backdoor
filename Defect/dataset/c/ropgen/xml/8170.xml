<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8170.c" pos:tabs="8"><function pos:start="1:1" pos:end="480:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">qemu_rdma_registration_handle</name><parameter_list pos:start="1:41" pos:end="1:67">(<parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:49">QEMUFile</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">f</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="480:15">{<block_content pos:start="5:5" pos:end="480:15">

    <decl_stmt pos:start="5:5" pos:end="11:31"><decl pos:start="5:5" pos:end="11:30"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:21">RDMAControlHeader</name></type> <name pos:start="5:23" pos:end="5:30">reg_resp</name> <init pos:start="5:32" pos:end="11:30">= <expr pos:start="5:34" pos:end="11:30"><block pos:start="5:34" pos:end="11:30">{ <expr pos:start="5:36" pos:end="5:68"><operator pos:start="5:36" pos:end="5:36">.</operator><name pos:start="5:37" pos:end="5:39">len</name> <operator pos:start="5:41" pos:end="5:41">=</operator> <sizeof pos:start="5:43" pos:end="5:68">sizeof<argument_list pos:start="5:49" pos:end="5:68">(<argument pos:start="5:50" pos:end="5:67"><expr pos:start="5:50" pos:end="5:67"><name pos:start="5:50" pos:end="5:67">RDMARegisterResult</name></expr></argument>)</argument_list></sizeof></expr>,

                               <expr pos:start="7:32" pos:end="7:67"><operator pos:start="7:32" pos:end="7:32">.</operator><name pos:start="7:33" pos:end="7:36">type</name> <operator pos:start="7:38" pos:end="7:38">=</operator> <name pos:start="7:40" pos:end="7:67">RDMA_CONTROL_REGISTER_RESULT</name></expr>,

                               <expr pos:start="9:32" pos:end="9:42"><operator pos:start="9:32" pos:end="9:32">.</operator><name pos:start="9:33" pos:end="9:38">repeat</name> <operator pos:start="9:40" pos:end="9:40">=</operator> <literal type="number" pos:start="9:42" pos:end="9:42">0</literal></expr>,

                             }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="19:31"><decl pos:start="13:5" pos:end="19:30"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:21">RDMAControlHeader</name></type> <name pos:start="13:23" pos:end="13:32">unreg_resp</name> <init pos:start="13:34" pos:end="19:30">= <expr pos:start="13:36" pos:end="19:30"><block pos:start="13:36" pos:end="19:30">{ <expr pos:start="13:38" pos:end="13:45"><operator pos:start="13:38" pos:end="13:38">.</operator><name pos:start="13:39" pos:end="13:41">len</name> <operator pos:start="13:43" pos:end="13:43">=</operator> <literal type="number" pos:start="13:45" pos:end="13:45">0</literal></expr>,

                               <expr pos:start="15:32" pos:end="15:71"><operator pos:start="15:32" pos:end="15:32">.</operator><name pos:start="15:33" pos:end="15:36">type</name> <operator pos:start="15:38" pos:end="15:38">=</operator> <name pos:start="15:40" pos:end="15:71">RDMA_CONTROL_UNREGISTER_FINISHED</name></expr>,

                               <expr pos:start="17:32" pos:end="17:42"><operator pos:start="17:32" pos:end="17:32">.</operator><name pos:start="17:33" pos:end="17:38">repeat</name> <operator pos:start="17:40" pos:end="17:40">=</operator> <literal type="number" pos:start="17:42" pos:end="17:42">0</literal></expr>,

                             }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="23:47"><decl pos:start="21:5" pos:end="23:46"><type pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:21">RDMAControlHeader</name></type> <name pos:start="21:23" pos:end="21:28">blocks</name> <init pos:start="21:30" pos:end="23:46">= <expr pos:start="21:32" pos:end="23:46"><block pos:start="21:32" pos:end="23:46">{ <expr pos:start="21:34" pos:end="21:71"><operator pos:start="21:34" pos:end="21:34">.</operator><name pos:start="21:35" pos:end="21:38">type</name> <operator pos:start="21:40" pos:end="21:40">=</operator> <name pos:start="21:42" pos:end="21:71">RDMA_CONTROL_RAM_BLOCKS_RESULT</name></expr>,

                                 <expr pos:start="23:34" pos:end="23:44"><operator pos:start="23:34" pos:end="23:34">.</operator><name pos:start="23:35" pos:end="23:40">repeat</name> <operator pos:start="23:42" pos:end="23:42">=</operator> <literal type="number" pos:start="23:44" pos:end="23:44">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">QEMUFileRDMA</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:23">rfile</name> <init pos:start="25:25" pos:end="25:32">= <expr pos:start="25:27" pos:end="25:32"><name pos:start="25:27" pos:end="25:32">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:36"><decl pos:start="27:5" pos:end="27:35"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">RDMAContext</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:21">rdma</name> <init pos:start="27:23" pos:end="27:35">= <expr pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:29">rfile</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:35">rdma</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:53"><decl pos:start="29:5" pos:end="29:52"><type pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:19">RDMALocalBlocks</name> <modifier pos:start="29:21" pos:end="29:21">*</modifier></type><name pos:start="29:22" pos:end="29:26">local</name> <init pos:start="29:28" pos:end="29:52">= <expr pos:start="29:30" pos:end="29:52"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:52"><name pos:start="29:31" pos:end="29:34">rdma</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:52">local_ram_blocks</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:26"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:21">RDMAControlHeader</name></type> <name pos:start="31:23" pos:end="31:26">head</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:34"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">RDMARegister</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">reg</name></decl>, <decl pos:start="33:24" pos:end="33:33"><type ref="prev" pos:start="33:5" pos:end="33:18"><modifier pos:start="33:24" pos:end="33:24">*</modifier></type><name pos:start="33:25" pos:end="33:33">registers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:23"><decl pos:start="35:5" pos:end="35:22"><type pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:16">RDMACompress</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:22">comp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:35"><decl pos:start="37:5" pos:end="37:34"><type pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:22">RDMARegisterResult</name> <modifier pos:start="37:24" pos:end="37:24">*</modifier></type><name pos:start="37:25" pos:end="37:34">reg_result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:77"><decl pos:start="39:5" pos:end="39:76"><type pos:start="39:5" pos:end="39:29"><specifier pos:start="39:5" pos:end="39:10">static</specifier> <name pos:start="39:12" pos:end="39:29">RDMARegisterResult</name></type> <name pos:start="39:31" pos:end="39:76"><name pos:start="39:31" pos:end="39:37">results</name><index pos:start="39:38" pos:end="39:76">[<expr pos:start="39:39" pos:end="39:75"><name pos:start="39:39" pos:end="39:75">RDMA_CONTROL_MAX_COMMANDS_PER_MESSAGE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:26"><decl pos:start="41:5" pos:end="41:25"><type pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:18">RDMALocalBlock</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:25">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:20"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">void</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:19">host_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:16"><decl pos:start="45:5" pos:end="45:15"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:11">ret</name> <init pos:start="45:13" pos:end="45:15">= <expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:16"><decl pos:start="47:5" pos:end="47:15"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:11">idx</name> <init pos:start="47:13" pos:end="47:15">= <expr pos:start="47:15" pos:end="47:15"><literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:18"><decl pos:start="49:5" pos:end="49:17"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:13">count</name> <init pos:start="49:15" pos:end="49:17">= <expr pos:start="49:17" pos:end="49:17"><literal type="number" pos:start="49:17" pos:end="49:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:14"><decl pos:start="51:5" pos:end="51:13"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:9">i</name> <init pos:start="51:11" pos:end="51:13">= <expr pos:start="51:13" pos:end="51:13"><literal type="number" pos:start="51:13" pos:end="51:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:24"><expr pos:start="55:5" pos:end="55:23"><call pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:21">CHECK_ERROR_STATE</name><argument_list pos:start="55:22" pos:end="55:23">()</argument_list></call></expr>;</expr_stmt>



    <do pos:start="59:5" pos:end="480:15">do <block pos:start="59:8" pos:end="480:15">{<block_content pos:start="61:9" pos:end="480:15">

        <expr_stmt pos:start="61:9" pos:end="61:51"><expr pos:start="61:9" pos:end="61:50"><call pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:48">trace_qemu_rdma_registration_handle_wait</name><argument_list pos:start="61:49" pos:end="61:50">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:70"><expr pos:start="65:9" pos:end="65:69"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:69"><name pos:start="65:15" pos:end="65:37">qemu_rdma_exchange_recv</name><argument_list pos:start="65:38" pos:end="65:69">(<argument pos:start="65:39" pos:end="65:42"><expr pos:start="65:39" pos:end="65:42"><name pos:start="65:39" pos:end="65:42">rdma</name></expr></argument>, <argument pos:start="65:45" pos:end="65:49"><expr pos:start="65:45" pos:end="65:49"><operator pos:start="65:45" pos:end="65:45">&amp;</operator><name pos:start="65:46" pos:end="65:49">head</name></expr></argument>, <argument pos:start="65:52" pos:end="65:68"><expr pos:start="65:52" pos:end="65:68"><name pos:start="65:52" pos:end="65:68">RDMA_CONTROL_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="480:15"><if pos:start="69:9" pos:end="480:15">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr>)</condition> <block pos:start="69:22" pos:end="480:15">{<block_content pos:start="75:9" pos:end="480:15">





        <if_stmt pos:start="75:9" pos:end="480:15"><if pos:start="75:9" pos:end="480:15">if <condition pos:start="75:12" pos:end="75:64">(<expr pos:start="75:13" pos:end="75:63"><name pos:start="75:13" pos:end="75:23"><name pos:start="75:13" pos:end="75:16">head</name><operator pos:start="75:17" pos:end="75:17">.</operator><name pos:start="75:18" pos:end="75:23">repeat</name></name> <operator pos:start="75:25" pos:end="75:25">&gt;</operator> <name pos:start="75:27" pos:end="75:63">RDMA_CONTROL_MAX_COMMANDS_PER_MESSAGE</name></expr>)</condition> <block pos:start="75:66" pos:end="480:15">{<block_content pos:start="77:13" pos:end="480:15">

            <expr_stmt pos:start="77:13" pos:end="79:53"><expr pos:start="77:13" pos:end="79:52"><call pos:start="77:13" pos:end="79:52"><name pos:start="77:13" pos:end="77:24">error_report</name><argument_list pos:start="77:25" pos:end="79:52">(<argument pos:start="77:26" pos:end="79:38"><expr pos:start="77:26" pos:end="79:38"><literal type="string" pos:start="77:26" pos:end="77:72">"rdma: Too many requests in this message (%d)."</literal>

                            <literal type="string" pos:start="79:29" pos:end="79:38">"Bailing."</literal></expr></argument>, <argument pos:start="79:41" pos:end="79:51"><expr pos:start="79:41" pos:end="79:51"><name pos:start="79:41" pos:end="79:51"><name pos:start="79:41" pos:end="79:44">head</name><operator pos:start="79:45" pos:end="79:45">.</operator><name pos:start="79:46" pos:end="79:51">repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:23"><expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <operator pos:start="81:19" pos:end="81:19">-</operator><name pos:start="81:20" pos:end="81:22">EIO</name></expr>;</expr_stmt>





        <switch pos:start="87:9" pos:end="480:15">switch <condition pos:start="87:16" pos:end="87:26">(<expr pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:20">head</name><operator pos:start="87:21" pos:end="87:21">.</operator><name pos:start="87:22" pos:end="87:25">type</name></name></expr>)</condition> <block pos:start="87:28" pos:end="480:15">{<block_content pos:start="89:9" pos:end="480:15">

        <case pos:start="89:9" pos:end="89:35">case <expr pos:start="89:14" pos:end="89:34"><name pos:start="89:14" pos:end="89:34">RDMA_CONTROL_COMPRESS</name></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:68"><expr pos:start="91:13" pos:end="91:67"><name pos:start="91:13" pos:end="91:16">comp</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <operator pos:start="91:20" pos:end="91:20">(</operator><name pos:start="91:21" pos:end="91:32">RDMACompress</name> <operator pos:start="91:34" pos:end="91:34">*</operator><operator pos:start="91:35" pos:end="91:35">)</operator> <name pos:start="91:37" pos:end="91:54"><name pos:start="91:37" pos:end="91:40">rdma</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:49">wr_data</name><index pos:start="91:50" pos:end="91:54">[<expr pos:start="91:51" pos:end="91:53"><name pos:start="91:51" pos:end="91:53">idx</name></expr>]</index></name><operator pos:start="91:55" pos:end="91:55">.</operator><name pos:start="91:56" pos:end="91:67">control_curr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:38"><expr pos:start="93:13" pos:end="93:37"><call pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:31">network_to_compress</name><argument_list pos:start="93:32" pos:end="93:37">(<argument pos:start="93:33" pos:end="93:36"><expr pos:start="93:33" pos:end="93:36"><name pos:start="93:33" pos:end="93:36">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="97:13" pos:end="101:71"><expr pos:start="97:13" pos:end="101:70"><call pos:start="97:13" pos:end="101:70"><name pos:start="97:13" pos:end="97:56">trace_qemu_rdma_registration_handle_compress</name><argument_list pos:start="97:57" pos:end="101:70">(<argument pos:start="97:58" pos:end="97:69"><expr pos:start="97:58" pos:end="97:69"><name pos:start="97:58" pos:end="97:69"><name pos:start="97:58" pos:end="97:61">comp</name><operator pos:start="97:62" pos:end="97:63">-&gt;</operator><name pos:start="97:64" pos:end="97:69">length</name></name></expr></argument>,

                                                         <argument pos:start="99:58" pos:end="99:72"><expr pos:start="99:58" pos:end="99:72"><name pos:start="99:58" pos:end="99:72"><name pos:start="99:58" pos:end="99:61">comp</name><operator pos:start="99:62" pos:end="99:63">-&gt;</operator><name pos:start="99:64" pos:end="99:72">block_idx</name></name></expr></argument>,

                                                         <argument pos:start="101:58" pos:end="101:69"><expr pos:start="101:58" pos:end="101:69"><name pos:start="101:58" pos:end="101:69"><name pos:start="101:58" pos:end="101:61">comp</name><operator pos:start="101:62" pos:end="101:63">-&gt;</operator><name pos:start="101:64" pos:end="101:69">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="480:15"><if pos:start="103:13" pos:end="480:15">if <condition pos:start="103:16" pos:end="103:68">(<expr pos:start="103:17" pos:end="103:67"><name pos:start="103:17" pos:end="103:31"><name pos:start="103:17" pos:end="103:20">comp</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:31">block_idx</name></name> <operator pos:start="103:33" pos:end="103:34">&gt;=</operator> <name pos:start="103:36" pos:end="103:67"><name pos:start="103:36" pos:end="103:39">rdma</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:57">local_ram_blocks</name><operator pos:start="103:58" pos:end="103:58">.</operator><name pos:start="103:59" pos:end="103:67">nb_blocks</name></name></expr>)</condition> <block pos:start="103:70" pos:end="480:15">{<block_content pos:start="105:17" pos:end="480:15">

                <expr_stmt pos:start="105:17" pos:end="109:63"><expr pos:start="105:17" pos:end="109:62"><call pos:start="105:17" pos:end="109:62"><name pos:start="105:17" pos:end="105:28">error_report</name><argument_list pos:start="105:29" pos:end="109:62">(<argument pos:start="105:30" pos:end="105:74"><expr pos:start="105:30" pos:end="105:74"><literal type="string" pos:start="105:30" pos:end="105:74">"rdma: 'compress' bad block index %u (vs %d)"</literal></expr></argument>,

                             <argument pos:start="107:30" pos:end="107:58"><expr pos:start="107:30" pos:end="107:58"><operator pos:start="107:30" pos:end="107:30">(</operator><name pos:start="107:31" pos:end="107:38">unsigned</name> <name pos:start="107:40" pos:end="107:42">int</name><operator pos:start="107:43" pos:end="107:43">)</operator><name pos:start="107:44" pos:end="107:58"><name pos:start="107:44" pos:end="107:47">comp</name><operator pos:start="107:48" pos:end="107:49">-&gt;</operator><name pos:start="107:50" pos:end="107:58">block_idx</name></name></expr></argument>,

                             <argument pos:start="109:30" pos:end="109:61"><expr pos:start="109:30" pos:end="109:61"><name pos:start="109:30" pos:end="109:61"><name pos:start="109:30" pos:end="109:33">rdma</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:51">local_ram_blocks</name><operator pos:start="109:52" pos:end="109:52">.</operator><name pos:start="109:53" pos:end="109:61">nb_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:27"><expr pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:19">ret</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <operator pos:start="111:23" pos:end="111:23">-</operator><name pos:start="111:24" pos:end="111:26">EIO</name></expr>;</expr_stmt>



            <expr_stmt pos:start="115:13" pos:end="115:69"><expr pos:start="115:13" pos:end="115:68"><name pos:start="115:13" pos:end="115:17">block</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <operator pos:start="115:21" pos:end="115:21">&amp;</operator><operator pos:start="115:22" pos:end="115:22">(</operator><name pos:start="115:23" pos:end="115:67"><name pos:start="115:23" pos:end="115:26">rdma</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:44">local_ram_blocks</name><operator pos:start="115:45" pos:end="115:45">.</operator><name pos:start="115:46" pos:end="115:50">block</name><index pos:start="115:51" pos:end="115:67">[<expr pos:start="115:52" pos:end="115:66"><name pos:start="115:52" pos:end="115:66"><name pos:start="115:52" pos:end="115:55">comp</name><operator pos:start="115:56" pos:end="115:57">-&gt;</operator><name pos:start="115:58" pos:end="115:66">block_idx</name></name></expr>]</index></name><operator pos:start="115:68" pos:end="115:68">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="119:13" pos:end="121:59"><expr pos:start="119:13" pos:end="121:58"><name pos:start="119:13" pos:end="119:21">host_addr</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:46"><name pos:start="119:25" pos:end="119:29">block</name><operator pos:start="119:30" pos:end="119:31">-&gt;</operator><name pos:start="119:32" pos:end="119:46">local_host_addr</name></name> <operator pos:start="119:48" pos:end="119:48">+</operator>

                            <operator pos:start="121:29" pos:end="121:29">(</operator><name pos:start="121:30" pos:end="121:41"><name pos:start="121:30" pos:end="121:33">comp</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:41">offset</name></name> <operator pos:start="121:43" pos:end="121:43">-</operator> <name pos:start="121:45" pos:end="121:57"><name pos:start="121:45" pos:end="121:49">block</name><operator pos:start="121:50" pos:end="121:51">-&gt;</operator><name pos:start="121:52" pos:end="121:57">offset</name></name><operator pos:start="121:58" pos:end="121:58">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:72"><expr pos:start="125:13" pos:end="125:71"><call pos:start="125:13" pos:end="125:71"><name pos:start="125:13" pos:end="125:33">ram_handle_compressed</name><argument_list pos:start="125:34" pos:end="125:71">(<argument pos:start="125:35" pos:end="125:43"><expr pos:start="125:35" pos:end="125:43"><name pos:start="125:35" pos:end="125:43">host_addr</name></expr></argument>, <argument pos:start="125:46" pos:end="125:56"><expr pos:start="125:46" pos:end="125:56"><name pos:start="125:46" pos:end="125:56"><name pos:start="125:46" pos:end="125:49">comp</name><operator pos:start="125:50" pos:end="125:51">-&gt;</operator><name pos:start="125:52" pos:end="125:56">value</name></name></expr></argument>, <argument pos:start="125:59" pos:end="125:70"><expr pos:start="125:59" pos:end="125:70"><name pos:start="125:59" pos:end="125:70"><name pos:start="125:59" pos:end="125:62">comp</name><operator pos:start="125:63" pos:end="125:64">-&gt;</operator><name pos:start="125:65" pos:end="125:70">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        <case pos:start="130:9" pos:end="130:44">case <expr pos:start="130:14" pos:end="130:43"><name pos:start="130:14" pos:end="130:43">RDMA_CONTROL_REGISTER_FINISHED</name></expr>:</case>

            <expr_stmt pos:start="132:13" pos:end="132:59"><expr pos:start="132:13" pos:end="132:58"><call pos:start="132:13" pos:end="132:58"><name pos:start="132:13" pos:end="132:56">trace_qemu_rdma_registration_handle_finished</name><argument_list pos:start="132:57" pos:end="132:58">()</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="134:13" pos:end="134:21">goto <name pos:start="134:18" pos:end="134:20">out</name>;</goto>



        <case pos:start="138:9" pos:end="138:45">case <expr pos:start="138:14" pos:end="138:44"><name pos:start="138:14" pos:end="138:44">RDMA_CONTROL_RAM_BLOCKS_REQUEST</name></expr>:</case>

            <expr_stmt pos:start="140:13" pos:end="140:61"><expr pos:start="140:13" pos:end="140:60"><call pos:start="140:13" pos:end="140:60"><name pos:start="140:13" pos:end="140:58">trace_qemu_rdma_registration_handle_ram_blocks</name><argument_list pos:start="140:59" pos:end="140:60">()</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="144:13" pos:end="150:15">/* Sort our local RAM Block list so it's the same as the source,

             * we can do this since we've filled in a src_index in the list

             * as we received the RAMBlock list earlier.

             */</comment>

            <expr_stmt pos:start="152:13" pos:end="156:62"><expr pos:start="152:13" pos:end="156:61"><call pos:start="152:13" pos:end="156:61"><name pos:start="152:13" pos:end="152:17">qsort</name><argument_list pos:start="152:18" pos:end="156:61">(<argument pos:start="152:19" pos:end="152:46"><expr pos:start="152:19" pos:end="152:46"><name pos:start="152:19" pos:end="152:46"><name pos:start="152:19" pos:end="152:22">rdma</name><operator pos:start="152:23" pos:end="152:24">-&gt;</operator><name pos:start="152:25" pos:end="152:40">local_ram_blocks</name><operator pos:start="152:41" pos:end="152:41">.</operator><name pos:start="152:42" pos:end="152:46">block</name></name></expr></argument>,

                  <argument pos:start="154:19" pos:end="154:50"><expr pos:start="154:19" pos:end="154:50"><name pos:start="154:19" pos:end="154:50"><name pos:start="154:19" pos:end="154:22">rdma</name><operator pos:start="154:23" pos:end="154:24">-&gt;</operator><name pos:start="154:25" pos:end="154:40">local_ram_blocks</name><operator pos:start="154:41" pos:end="154:41">.</operator><name pos:start="154:42" pos:end="154:50">nb_blocks</name></name></expr></argument>,

                  <argument pos:start="156:19" pos:end="156:40"><expr pos:start="156:19" pos:end="156:40"><sizeof pos:start="156:19" pos:end="156:40">sizeof<argument_list pos:start="156:25" pos:end="156:40">(<argument pos:start="156:26" pos:end="156:39"><expr pos:start="156:26" pos:end="156:39"><name pos:start="156:26" pos:end="156:39">RDMALocalBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="156:43" pos:end="156:60"><expr pos:start="156:43" pos:end="156:60"><name pos:start="156:43" pos:end="156:60">dest_ram_sort_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="158:13" pos:end="480:15"><if pos:start="158:13" pos:end="480:15">if <condition pos:start="158:16" pos:end="158:30">(<expr pos:start="158:17" pos:end="158:29"><name pos:start="158:17" pos:end="158:29"><name pos:start="158:17" pos:end="158:20">rdma</name><operator pos:start="158:21" pos:end="158:22">-&gt;</operator><name pos:start="158:23" pos:end="158:29">pin_all</name></name></expr>)</condition> <block pos:start="158:32" pos:end="480:15">{<block_content pos:start="160:17" pos:end="480:15">

                <expr_stmt pos:start="160:17" pos:end="160:59"><expr pos:start="160:17" pos:end="160:58"><name pos:start="160:17" pos:end="160:19">ret</name> <operator pos:start="160:21" pos:end="160:21">=</operator> <call pos:start="160:23" pos:end="160:58"><name pos:start="160:23" pos:end="160:52">qemu_rdma_reg_whole_ram_blocks</name><argument_list pos:start="160:53" pos:end="160:58">(<argument pos:start="160:54" pos:end="160:57"><expr pos:start="160:54" pos:end="160:57"><name pos:start="160:54" pos:end="160:57">rdma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="162:17" pos:end="480:15"><if pos:start="162:17" pos:end="480:15">if <condition pos:start="162:20" pos:end="162:24">(<expr pos:start="162:21" pos:end="162:23"><name pos:start="162:21" pos:end="162:23">ret</name></expr>)</condition> <block pos:start="162:26" pos:end="480:15">{<block_content pos:start="164:21" pos:end="480:15">

                    <expr_stmt pos:start="164:21" pos:end="166:62"><expr pos:start="164:21" pos:end="166:61"><call pos:start="164:21" pos:end="166:61"><name pos:start="164:21" pos:end="164:32">error_report</name><argument_list pos:start="164:33" pos:end="166:61">(<argument pos:start="164:34" pos:end="166:60"><expr pos:start="164:34" pos:end="166:60"><literal type="string" pos:start="164:34" pos:end="164:62">"rdma migration: error dest "</literal>

                                    <literal type="string" pos:start="166:37" pos:end="166:60">"registering ram blocks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="168:21" pos:end="168:29">goto <name pos:start="168:26" pos:end="168:28">out</name>;</goto>





            <comment type="block" pos:start="174:13" pos:end="184:15">/*

             * Dest uses this to prepare to transmit the RAMBlock descriptions

             * to the source VM after connection setup.

             * Both sides use the "remote" structure to communicate and update

             * their "local" descriptions with what was sent.

             */</comment>

            <for pos:start="186:13" pos:end="480:15">for <control pos:start="186:17" pos:end="186:50">(<init pos:start="186:18" pos:end="186:23"><expr pos:start="186:18" pos:end="186:22"><name pos:start="186:18" pos:end="186:18">i</name> <operator pos:start="186:20" pos:end="186:20">=</operator> <literal type="number" pos:start="186:22" pos:end="186:22">0</literal></expr>;</init> <condition pos:start="186:25" pos:end="186:45"><expr pos:start="186:25" pos:end="186:44"><name pos:start="186:25" pos:end="186:25">i</name> <operator pos:start="186:27" pos:end="186:27">&lt;</operator> <name pos:start="186:29" pos:end="186:44"><name pos:start="186:29" pos:end="186:33">local</name><operator pos:start="186:34" pos:end="186:35">-&gt;</operator><name pos:start="186:36" pos:end="186:44">nb_blocks</name></name></expr>;</condition> <incr pos:start="186:47" pos:end="186:49"><expr pos:start="186:47" pos:end="186:49"><name pos:start="186:47" pos:end="186:47">i</name><operator pos:start="186:48" pos:end="186:49">++</operator></expr></incr>)</control> <block pos:start="186:52" pos:end="480:15">{<block_content pos:start="188:17" pos:end="480:15">

                <expr_stmt pos:start="188:17" pos:end="190:65"><expr pos:start="188:17" pos:end="190:64"><name pos:start="188:17" pos:end="188:36"><name pos:start="188:17" pos:end="188:20">rdma</name><operator pos:start="188:21" pos:end="188:22">-&gt;</operator><name pos:start="188:23" pos:end="188:33">dest_blocks</name><index pos:start="188:34" pos:end="188:36">[<expr pos:start="188:35" pos:end="188:35"><name pos:start="188:35" pos:end="188:35">i</name></expr>]</index></name><operator pos:start="188:37" pos:end="188:37">.</operator><name pos:start="188:38" pos:end="188:53">remote_host_addr</name> <operator pos:start="188:55" pos:end="188:55">=</operator>

                    <operator pos:start="190:21" pos:end="190:21">(</operator><name pos:start="190:22" pos:end="190:30">uintptr_t</name><operator pos:start="190:31" pos:end="190:31">)</operator><operator pos:start="190:32" pos:end="190:32">(</operator><name pos:start="190:33" pos:end="190:47"><name pos:start="190:33" pos:end="190:37">local</name><operator pos:start="190:38" pos:end="190:39">-&gt;</operator><name pos:start="190:40" pos:end="190:44">block</name><index pos:start="190:45" pos:end="190:47">[<expr pos:start="190:46" pos:end="190:46"><name pos:start="190:46" pos:end="190:46">i</name></expr>]</index></name><operator pos:start="190:48" pos:end="190:48">.</operator><name pos:start="190:49" pos:end="190:63">local_host_addr</name><operator pos:start="190:64" pos:end="190:64">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="194:17" pos:end="480:15"><if pos:start="194:17" pos:end="480:15">if <condition pos:start="194:20" pos:end="194:34">(<expr pos:start="194:21" pos:end="194:33"><name pos:start="194:21" pos:end="194:33"><name pos:start="194:21" pos:end="194:24">rdma</name><operator pos:start="194:25" pos:end="194:26">-&gt;</operator><name pos:start="194:27" pos:end="194:33">pin_all</name></name></expr>)</condition> <block pos:start="194:36" pos:end="480:15">{<block_content pos:start="196:21" pos:end="480:15">

                    <expr_stmt pos:start="196:21" pos:end="196:80"><expr pos:start="196:21" pos:end="196:79"><name pos:start="196:21" pos:end="196:40"><name pos:start="196:21" pos:end="196:24">rdma</name><operator pos:start="196:25" pos:end="196:26">-&gt;</operator><name pos:start="196:27" pos:end="196:37">dest_blocks</name><index pos:start="196:38" pos:end="196:40">[<expr pos:start="196:39" pos:end="196:39"><name pos:start="196:39" pos:end="196:39">i</name></expr>]</index></name><operator pos:start="196:41" pos:end="196:41">.</operator><name pos:start="196:42" pos:end="196:52">remote_rkey</name> <operator pos:start="196:54" pos:end="196:54">=</operator> <name pos:start="196:56" pos:end="196:70"><name pos:start="196:56" pos:end="196:60">local</name><operator pos:start="196:61" pos:end="196:62">-&gt;</operator><name pos:start="196:63" pos:end="196:67">block</name><index pos:start="196:68" pos:end="196:70">[<expr pos:start="196:69" pos:end="196:69"><name pos:start="196:69" pos:end="196:69">i</name></expr>]</index></name><operator pos:start="196:71" pos:end="196:71">.</operator><name pos:start="196:72" pos:end="196:79"><name pos:start="196:72" pos:end="196:73">mr</name><operator pos:start="196:74" pos:end="196:75">-&gt;</operator><name pos:start="196:76" pos:end="196:79">rkey</name></name></expr>;</expr_stmt>




                <expr_stmt pos:start="201:17" pos:end="201:69"><expr pos:start="201:17" pos:end="201:68"><name pos:start="201:17" pos:end="201:36"><name pos:start="201:17" pos:end="201:20">rdma</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:33">dest_blocks</name><index pos:start="201:34" pos:end="201:36">[<expr pos:start="201:35" pos:end="201:35"><name pos:start="201:35" pos:end="201:35">i</name></expr>]</index></name><operator pos:start="201:37" pos:end="201:37">.</operator><name pos:start="201:38" pos:end="201:43">offset</name> <operator pos:start="201:45" pos:end="201:45">=</operator> <name pos:start="201:47" pos:end="201:61"><name pos:start="201:47" pos:end="201:51">local</name><operator pos:start="201:52" pos:end="201:53">-&gt;</operator><name pos:start="201:54" pos:end="201:58">block</name><index pos:start="201:59" pos:end="201:61">[<expr pos:start="201:60" pos:end="201:60"><name pos:start="201:60" pos:end="201:60">i</name></expr>]</index></name><operator pos:start="201:62" pos:end="201:62">.</operator><name pos:start="201:63" pos:end="201:68">offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:69"><expr pos:start="203:17" pos:end="203:68"><name pos:start="203:17" pos:end="203:36"><name pos:start="203:17" pos:end="203:20">rdma</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:33">dest_blocks</name><index pos:start="203:34" pos:end="203:36">[<expr pos:start="203:35" pos:end="203:35"><name pos:start="203:35" pos:end="203:35">i</name></expr>]</index></name><operator pos:start="203:37" pos:end="203:37">.</operator><name pos:start="203:38" pos:end="203:43">length</name> <operator pos:start="203:45" pos:end="203:45">=</operator> <name pos:start="203:47" pos:end="203:61"><name pos:start="203:47" pos:end="203:51">local</name><operator pos:start="203:52" pos:end="203:53">-&gt;</operator><name pos:start="203:54" pos:end="203:58">block</name><index pos:start="203:59" pos:end="203:61">[<expr pos:start="203:60" pos:end="203:60"><name pos:start="203:60" pos:end="203:60">i</name></expr>]</index></name><operator pos:start="203:62" pos:end="203:62">.</operator><name pos:start="203:63" pos:end="203:68">length</name></expr>;</expr_stmt>



                <expr_stmt pos:start="207:17" pos:end="207:61"><expr pos:start="207:17" pos:end="207:60"><call pos:start="207:17" pos:end="207:60"><name pos:start="207:17" pos:end="207:37">dest_block_to_network</name><argument_list pos:start="207:38" pos:end="207:60">(<argument pos:start="207:39" pos:end="207:59"><expr pos:start="207:39" pos:end="207:59"><operator pos:start="207:39" pos:end="207:39">&amp;</operator><name pos:start="207:40" pos:end="207:59"><name pos:start="207:40" pos:end="207:43">rdma</name><operator pos:start="207:44" pos:end="207:45">-&gt;</operator><name pos:start="207:46" pos:end="207:56">dest_blocks</name><index pos:start="207:57" pos:end="207:59">[<expr pos:start="207:58" pos:end="207:58"><name pos:start="207:58" pos:end="207:58">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="219:47"><expr pos:start="209:17" pos:end="219:46"><call pos:start="209:17" pos:end="219:46"><name pos:start="209:17" pos:end="209:67">trace_qemu_rdma_registration_handle_ram_blocks_loop</name><argument_list pos:start="209:68" pos:end="219:46">(

                    <argument pos:start="211:21" pos:end="211:46"><expr pos:start="211:21" pos:end="211:46"><name pos:start="211:21" pos:end="211:35"><name pos:start="211:21" pos:end="211:25">local</name><operator pos:start="211:26" pos:end="211:27">-&gt;</operator><name pos:start="211:28" pos:end="211:32">block</name><index pos:start="211:33" pos:end="211:35">[<expr pos:start="211:34" pos:end="211:34"><name pos:start="211:34" pos:end="211:34">i</name></expr>]</index></name><operator pos:start="211:36" pos:end="211:36">.</operator><name pos:start="211:37" pos:end="211:46">block_name</name></expr></argument>,

                    <argument pos:start="213:21" pos:end="213:42"><expr pos:start="213:21" pos:end="213:42"><name pos:start="213:21" pos:end="213:35"><name pos:start="213:21" pos:end="213:25">local</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:32">block</name><index pos:start="213:33" pos:end="213:35">[<expr pos:start="213:34" pos:end="213:34"><name pos:start="213:34" pos:end="213:34">i</name></expr>]</index></name><operator pos:start="213:36" pos:end="213:36">.</operator><name pos:start="213:37" pos:end="213:42">offset</name></expr></argument>,

                    <argument pos:start="215:21" pos:end="215:42"><expr pos:start="215:21" pos:end="215:42"><name pos:start="215:21" pos:end="215:35"><name pos:start="215:21" pos:end="215:25">local</name><operator pos:start="215:26" pos:end="215:27">-&gt;</operator><name pos:start="215:28" pos:end="215:32">block</name><index pos:start="215:33" pos:end="215:35">[<expr pos:start="215:34" pos:end="215:34"><name pos:start="215:34" pos:end="215:34">i</name></expr>]</index></name><operator pos:start="215:36" pos:end="215:36">.</operator><name pos:start="215:37" pos:end="215:42">length</name></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:51"><expr pos:start="217:21" pos:end="217:51"><name pos:start="217:21" pos:end="217:35"><name pos:start="217:21" pos:end="217:25">local</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:32">block</name><index pos:start="217:33" pos:end="217:35">[<expr pos:start="217:34" pos:end="217:34"><name pos:start="217:34" pos:end="217:34">i</name></expr>]</index></name><operator pos:start="217:36" pos:end="217:36">.</operator><name pos:start="217:37" pos:end="217:51">local_host_addr</name></expr></argument>,

                    <argument pos:start="219:21" pos:end="219:45"><expr pos:start="219:21" pos:end="219:45"><name pos:start="219:21" pos:end="219:35"><name pos:start="219:21" pos:end="219:25">local</name><operator pos:start="219:26" pos:end="219:27">-&gt;</operator><name pos:start="219:28" pos:end="219:32">block</name><index pos:start="219:33" pos:end="219:35">[<expr pos:start="219:34" pos:end="219:34"><name pos:start="219:34" pos:end="219:34">i</name></expr>]</index></name><operator pos:start="219:36" pos:end="219:36">.</operator><name pos:start="219:37" pos:end="219:45">src_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




            <expr_stmt pos:start="224:13" pos:end="226:72"><expr pos:start="224:13" pos:end="226:71"><name pos:start="224:13" pos:end="224:22"><name pos:start="224:13" pos:end="224:18">blocks</name><operator pos:start="224:19" pos:end="224:19">.</operator><name pos:start="224:20" pos:end="224:22">len</name></name> <operator pos:start="224:24" pos:end="224:24">=</operator> <name pos:start="224:26" pos:end="224:57"><name pos:start="224:26" pos:end="224:29">rdma</name><operator pos:start="224:30" pos:end="224:31">-&gt;</operator><name pos:start="224:32" pos:end="224:47">local_ram_blocks</name><operator pos:start="224:48" pos:end="224:48">.</operator><name pos:start="224:49" pos:end="224:57">nb_blocks</name></name>

                                                <operator pos:start="226:49" pos:end="226:49">*</operator> <sizeof pos:start="226:51" pos:end="226:71">sizeof<argument_list pos:start="226:57" pos:end="226:71">(<argument pos:start="226:58" pos:end="226:70"><expr pos:start="226:58" pos:end="226:70"><name pos:start="226:58" pos:end="226:70">RDMADestBlock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>





            <expr_stmt pos:start="232:13" pos:end="234:80"><expr pos:start="232:13" pos:end="234:79"><name pos:start="232:13" pos:end="232:15">ret</name> <operator pos:start="232:17" pos:end="232:17">=</operator> <call pos:start="232:19" pos:end="234:79"><name pos:start="232:19" pos:end="232:45">qemu_rdma_post_send_control</name><argument_list pos:start="232:46" pos:end="234:79">(<argument pos:start="232:47" pos:end="232:50"><expr pos:start="232:47" pos:end="232:50"><name pos:start="232:47" pos:end="232:50">rdma</name></expr></argument>,

                                        <argument pos:start="234:41" pos:end="234:69"><expr pos:start="234:41" pos:end="234:69"><operator pos:start="234:41" pos:end="234:41">(</operator><name pos:start="234:42" pos:end="234:48">uint8_t</name> <operator pos:start="234:50" pos:end="234:50">*</operator><operator pos:start="234:51" pos:end="234:51">)</operator> <name pos:start="234:53" pos:end="234:69"><name pos:start="234:53" pos:end="234:56">rdma</name><operator pos:start="234:57" pos:end="234:58">-&gt;</operator><name pos:start="234:59" pos:end="234:69">dest_blocks</name></name></expr></argument>, <argument pos:start="234:72" pos:end="234:78"><expr pos:start="234:72" pos:end="234:78"><operator pos:start="234:72" pos:end="234:72">&amp;</operator><name pos:start="234:73" pos:end="234:78">blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="238:13" pos:end="480:15"><if pos:start="238:13" pos:end="480:15">if <condition pos:start="238:16" pos:end="238:24">(<expr pos:start="238:17" pos:end="238:23"><name pos:start="238:17" pos:end="238:19">ret</name> <operator pos:start="238:21" pos:end="238:21">&lt;</operator> <literal type="number" pos:start="238:23" pos:end="238:23">0</literal></expr>)</condition> <block pos:start="238:26" pos:end="480:15">{<block_content pos:start="240:17" pos:end="480:15">

                <expr_stmt pos:start="240:17" pos:end="240:74"><expr pos:start="240:17" pos:end="240:73"><call pos:start="240:17" pos:end="240:73"><name pos:start="240:17" pos:end="240:28">error_report</name><argument_list pos:start="240:29" pos:end="240:73">(<argument pos:start="240:30" pos:end="240:72"><expr pos:start="240:30" pos:end="240:72"><literal type="string" pos:start="240:30" pos:end="240:72">"rdma migration: error sending remote info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="242:17" pos:end="242:25">goto <name pos:start="242:22" pos:end="242:24">out</name>;</goto>





        <case pos:start="248:9" pos:end="248:43">case <expr pos:start="248:14" pos:end="248:42"><name pos:start="248:14" pos:end="248:42">RDMA_CONTROL_REGISTER_REQUEST</name></expr>:</case>

            <expr_stmt pos:start="250:13" pos:end="250:70"><expr pos:start="250:13" pos:end="250:69"><call pos:start="250:13" pos:end="250:69"><name pos:start="250:13" pos:end="250:56">trace_qemu_rdma_registration_handle_register</name><argument_list pos:start="250:57" pos:end="250:69">(<argument pos:start="250:58" pos:end="250:68"><expr pos:start="250:58" pos:end="250:68"><name pos:start="250:58" pos:end="250:68"><name pos:start="250:58" pos:end="250:61">head</name><operator pos:start="250:62" pos:end="250:62">.</operator><name pos:start="250:63" pos:end="250:68">repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="254:13" pos:end="254:42"><expr pos:start="254:13" pos:end="254:41"><name pos:start="254:13" pos:end="254:27"><name pos:start="254:13" pos:end="254:20">reg_resp</name><operator pos:start="254:21" pos:end="254:21">.</operator><name pos:start="254:22" pos:end="254:27">repeat</name></name> <operator pos:start="254:29" pos:end="254:29">=</operator> <name pos:start="254:31" pos:end="254:41"><name pos:start="254:31" pos:end="254:34">head</name><operator pos:start="254:35" pos:end="254:35">.</operator><name pos:start="254:36" pos:end="254:41">repeat</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="256:13" pos:end="256:73"><expr pos:start="256:13" pos:end="256:72"><name pos:start="256:13" pos:end="256:21">registers</name> <operator pos:start="256:23" pos:end="256:23">=</operator> <operator pos:start="256:25" pos:end="256:25">(</operator><name pos:start="256:26" pos:end="256:37">RDMARegister</name> <operator pos:start="256:39" pos:end="256:39">*</operator><operator pos:start="256:40" pos:end="256:40">)</operator> <name pos:start="256:42" pos:end="256:59"><name pos:start="256:42" pos:end="256:45">rdma</name><operator pos:start="256:46" pos:end="256:47">-&gt;</operator><name pos:start="256:48" pos:end="256:54">wr_data</name><index pos:start="256:55" pos:end="256:59">[<expr pos:start="256:56" pos:end="256:58"><name pos:start="256:56" pos:end="256:58">idx</name></expr>]</index></name><operator pos:start="256:60" pos:end="256:60">.</operator><name pos:start="256:61" pos:end="256:72">control_curr</name></expr>;</expr_stmt>



            <for pos:start="260:13" pos:end="480:15">for <control pos:start="260:17" pos:end="260:57">(<init pos:start="260:18" pos:end="260:27"><expr pos:start="260:18" pos:end="260:26"><name pos:start="260:18" pos:end="260:22">count</name> <operator pos:start="260:24" pos:end="260:24">=</operator> <literal type="number" pos:start="260:26" pos:end="260:26">0</literal></expr>;</init> <condition pos:start="260:29" pos:end="260:48"><expr pos:start="260:29" pos:end="260:47"><name pos:start="260:29" pos:end="260:33">count</name> <operator pos:start="260:35" pos:end="260:35">&lt;</operator> <name pos:start="260:37" pos:end="260:47"><name pos:start="260:37" pos:end="260:40">head</name><operator pos:start="260:41" pos:end="260:41">.</operator><name pos:start="260:42" pos:end="260:47">repeat</name></name></expr>;</condition> <incr pos:start="260:50" pos:end="260:56"><expr pos:start="260:50" pos:end="260:56"><name pos:start="260:50" pos:end="260:54">count</name><operator pos:start="260:55" pos:end="260:56">++</operator></expr></incr>)</control> <block pos:start="260:59" pos:end="480:15">{<block_content pos:start="262:17" pos:end="480:15">

                <decl_stmt pos:start="262:17" pos:end="262:31"><decl pos:start="262:17" pos:end="262:30"><type pos:start="262:17" pos:end="262:24"><name pos:start="262:17" pos:end="262:24">uint64_t</name></type> <name pos:start="262:26" pos:end="262:30">chunk</name></decl>;</decl_stmt>

                <decl_stmt pos:start="264:17" pos:end="264:49"><decl pos:start="264:17" pos:end="264:36"><type pos:start="264:17" pos:end="264:25"><name pos:start="264:17" pos:end="264:23">uint8_t</name> <modifier pos:start="264:25" pos:end="264:25">*</modifier></type><name pos:start="264:26" pos:end="264:36">chunk_start</name></decl>, <decl pos:start="264:39" pos:end="264:48"><type ref="prev" pos:start="264:17" pos:end="264:25"><modifier pos:start="264:39" pos:end="264:39">*</modifier></type><name pos:start="264:40" pos:end="264:48">chunk_end</name></decl>;</decl_stmt>



                <expr_stmt pos:start="268:17" pos:end="268:40"><expr pos:start="268:17" pos:end="268:39"><name pos:start="268:17" pos:end="268:19">reg</name> <operator pos:start="268:21" pos:end="268:21">=</operator> <operator pos:start="268:23" pos:end="268:23">&amp;</operator><name pos:start="268:24" pos:end="268:39"><name pos:start="268:24" pos:end="268:32">registers</name><index pos:start="268:33" pos:end="268:39">[<expr pos:start="268:34" pos:end="268:38"><name pos:start="268:34" pos:end="268:38">count</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="270:17" pos:end="270:41"><expr pos:start="270:17" pos:end="270:40"><call pos:start="270:17" pos:end="270:40"><name pos:start="270:17" pos:end="270:35">network_to_register</name><argument_list pos:start="270:36" pos:end="270:40">(<argument pos:start="270:37" pos:end="270:39"><expr pos:start="270:37" pos:end="270:39"><name pos:start="270:37" pos:end="270:39">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="274:17" pos:end="274:45"><expr pos:start="274:17" pos:end="274:44"><name pos:start="274:17" pos:end="274:26">reg_result</name> <operator pos:start="274:28" pos:end="274:28">=</operator> <operator pos:start="274:30" pos:end="274:30">&amp;</operator><name pos:start="274:31" pos:end="274:44"><name pos:start="274:31" pos:end="274:37">results</name><index pos:start="274:38" pos:end="274:44">[<expr pos:start="274:39" pos:end="274:43"><name pos:start="274:39" pos:end="274:43">count</name></expr>]</index></name></expr>;</expr_stmt>



                <expr_stmt pos:start="278:17" pos:end="280:81"><expr pos:start="278:17" pos:end="280:80"><call pos:start="278:17" pos:end="280:80"><name pos:start="278:17" pos:end="278:65">trace_qemu_rdma_registration_handle_register_loop</name><argument_list pos:start="278:66" pos:end="280:80">(<argument pos:start="278:67" pos:end="278:71"><expr pos:start="278:67" pos:end="278:71"><name pos:start="278:67" pos:end="278:71">count</name></expr></argument>,

                         <argument pos:start="280:26" pos:end="280:43"><expr pos:start="280:26" pos:end="280:43"><name pos:start="280:26" pos:end="280:43"><name pos:start="280:26" pos:end="280:28">reg</name><operator pos:start="280:29" pos:end="280:30">-&gt;</operator><name pos:start="280:31" pos:end="280:43">current_index</name></name></expr></argument>, <argument pos:start="280:46" pos:end="280:66"><expr pos:start="280:46" pos:end="280:66"><name pos:start="280:46" pos:end="280:66"><name pos:start="280:46" pos:end="280:48">reg</name><operator pos:start="280:49" pos:end="280:50">-&gt;</operator><name pos:start="280:51" pos:end="280:53">key</name><operator pos:start="280:54" pos:end="280:54">.</operator><name pos:start="280:55" pos:end="280:66">current_addr</name></name></expr></argument>, <argument pos:start="280:69" pos:end="280:79"><expr pos:start="280:69" pos:end="280:79"><name pos:start="280:69" pos:end="280:79"><name pos:start="280:69" pos:end="280:71">reg</name><operator pos:start="280:72" pos:end="280:73">-&gt;</operator><name pos:start="280:74" pos:end="280:79">chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="284:17" pos:end="480:15"><if pos:start="284:17" pos:end="480:15">if <condition pos:start="284:20" pos:end="284:75">(<expr pos:start="284:21" pos:end="284:74"><name pos:start="284:21" pos:end="284:38"><name pos:start="284:21" pos:end="284:23">reg</name><operator pos:start="284:24" pos:end="284:25">-&gt;</operator><name pos:start="284:26" pos:end="284:38">current_index</name></name> <operator pos:start="284:40" pos:end="284:41">&gt;=</operator> <name pos:start="284:43" pos:end="284:74"><name pos:start="284:43" pos:end="284:46">rdma</name><operator pos:start="284:47" pos:end="284:48">-&gt;</operator><name pos:start="284:49" pos:end="284:64">local_ram_blocks</name><operator pos:start="284:65" pos:end="284:65">.</operator><name pos:start="284:66" pos:end="284:74">nb_blocks</name></name></expr>)</condition> <block pos:start="284:77" pos:end="480:15">{<block_content pos:start="286:21" pos:end="480:15">

                    <expr_stmt pos:start="286:21" pos:end="290:67"><expr pos:start="286:21" pos:end="290:66"><call pos:start="286:21" pos:end="290:66"><name pos:start="286:21" pos:end="286:32">error_report</name><argument_list pos:start="286:33" pos:end="290:66">(<argument pos:start="286:34" pos:end="286:78"><expr pos:start="286:34" pos:end="286:78"><literal type="string" pos:start="286:34" pos:end="286:78">"rdma: 'register' bad block index %u (vs %d)"</literal></expr></argument>,

                                 <argument pos:start="288:34" pos:end="288:65"><expr pos:start="288:34" pos:end="288:65"><operator pos:start="288:34" pos:end="288:34">(</operator><name pos:start="288:35" pos:end="288:42">unsigned</name> <name pos:start="288:44" pos:end="288:46">int</name><operator pos:start="288:47" pos:end="288:47">)</operator><name pos:start="288:48" pos:end="288:65"><name pos:start="288:48" pos:end="288:50">reg</name><operator pos:start="288:51" pos:end="288:52">-&gt;</operator><name pos:start="288:53" pos:end="288:65">current_index</name></name></expr></argument>,

                                 <argument pos:start="290:34" pos:end="290:65"><expr pos:start="290:34" pos:end="290:65"><name pos:start="290:34" pos:end="290:65"><name pos:start="290:34" pos:end="290:37">rdma</name><operator pos:start="290:38" pos:end="290:39">-&gt;</operator><name pos:start="290:40" pos:end="290:55">local_ram_blocks</name><operator pos:start="290:56" pos:end="290:56">.</operator><name pos:start="290:57" pos:end="290:65">nb_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="292:21" pos:end="292:34"><expr pos:start="292:21" pos:end="292:33"><name pos:start="292:21" pos:end="292:23">ret</name> <operator pos:start="292:25" pos:end="292:25">=</operator> <operator pos:start="292:27" pos:end="292:27">-</operator><name pos:start="292:28" pos:end="292:33">ENOENT</name></expr>;</expr_stmt>



                <expr_stmt pos:start="296:17" pos:end="296:76"><expr pos:start="296:17" pos:end="296:75"><name pos:start="296:17" pos:end="296:21">block</name> <operator pos:start="296:23" pos:end="296:23">=</operator> <operator pos:start="296:25" pos:end="296:25">&amp;</operator><operator pos:start="296:26" pos:end="296:26">(</operator><name pos:start="296:27" pos:end="296:74"><name pos:start="296:27" pos:end="296:30">rdma</name><operator pos:start="296:31" pos:end="296:32">-&gt;</operator><name pos:start="296:33" pos:end="296:48">local_ram_blocks</name><operator pos:start="296:49" pos:end="296:49">.</operator><name pos:start="296:50" pos:end="296:54">block</name><index pos:start="296:55" pos:end="296:74">[<expr pos:start="296:56" pos:end="296:73"><name pos:start="296:56" pos:end="296:73"><name pos:start="296:56" pos:end="296:58">reg</name><operator pos:start="296:59" pos:end="296:60">-&gt;</operator><name pos:start="296:61" pos:end="296:73">current_index</name></name></expr>]</index></name><operator pos:start="296:75" pos:end="296:75">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="298:17" pos:end="480:15"><if pos:start="298:17" pos:end="480:15">if <condition pos:start="298:20" pos:end="298:40">(<expr pos:start="298:21" pos:end="298:39"><name pos:start="298:21" pos:end="298:39"><name pos:start="298:21" pos:end="298:25">block</name><operator pos:start="298:26" pos:end="298:27">-&gt;</operator><name pos:start="298:28" pos:end="298:39">is_ram_block</name></name></expr>)</condition> <block pos:start="298:42" pos:end="480:15">{<block_content pos:start="300:21" pos:end="480:15">

                    <if_stmt pos:start="300:21" pos:end="480:15"><if pos:start="300:21" pos:end="321:17">if <condition pos:start="300:24" pos:end="300:62">(<expr pos:start="300:25" pos:end="300:61"><name pos:start="300:25" pos:end="300:37"><name pos:start="300:25" pos:end="300:29">block</name><operator pos:start="300:30" pos:end="300:31">-&gt;</operator><name pos:start="300:32" pos:end="300:37">offset</name></name> <operator pos:start="300:39" pos:end="300:39">&gt;</operator> <name pos:start="300:41" pos:end="300:61"><name pos:start="300:41" pos:end="300:43">reg</name><operator pos:start="300:44" pos:end="300:45">-&gt;</operator><name pos:start="300:46" pos:end="300:48">key</name><operator pos:start="300:49" pos:end="300:49">.</operator><name pos:start="300:50" pos:end="300:61">current_addr</name></name></expr>)</condition> <block pos:start="300:64" pos:end="321:17">{<block_content pos:start="302:25" pos:end="319:67">

                        <expr_stmt pos:start="302:25" pos:end="308:51"><expr pos:start="302:25" pos:end="308:50"><call pos:start="302:25" pos:end="308:50"><name pos:start="302:25" pos:end="302:36">error_report</name><argument_list pos:start="302:37" pos:end="308:50">(<argument pos:start="302:38" pos:end="304:73"><expr pos:start="302:38" pos:end="304:73"><literal type="string" pos:start="302:38" pos:end="302:78">"rdma: bad register address for block %s"</literal>

                            <literal type="string" pos:start="304:29" pos:end="304:40">" offset: %"</literal> <name pos:start="304:42" pos:end="304:47">PRIx64</name> <literal type="string" pos:start="304:49" pos:end="304:66">" current_addr: %"</literal> <name pos:start="304:68" pos:end="304:73">PRIx64</name></expr></argument>,

                            <argument pos:start="306:29" pos:end="306:45"><expr pos:start="306:29" pos:end="306:45"><name pos:start="306:29" pos:end="306:45"><name pos:start="306:29" pos:end="306:33">block</name><operator pos:start="306:34" pos:end="306:35">-&gt;</operator><name pos:start="306:36" pos:end="306:45">block_name</name></name></expr></argument>, <argument pos:start="306:48" pos:end="306:60"><expr pos:start="306:48" pos:end="306:60"><name pos:start="306:48" pos:end="306:60"><name pos:start="306:48" pos:end="306:52">block</name><operator pos:start="306:53" pos:end="306:54">-&gt;</operator><name pos:start="306:55" pos:end="306:60">offset</name></name></expr></argument>,

                            <argument pos:start="308:29" pos:end="308:49"><expr pos:start="308:29" pos:end="308:49"><name pos:start="308:29" pos:end="308:49"><name pos:start="308:29" pos:end="308:31">reg</name><operator pos:start="308:32" pos:end="308:33">-&gt;</operator><name pos:start="308:34" pos:end="308:36">key</name><operator pos:start="308:37" pos:end="308:37">.</operator><name pos:start="308:38" pos:end="308:49">current_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




                    <expr_stmt pos:start="313:21" pos:end="315:73"><expr pos:start="313:21" pos:end="315:72"><name pos:start="313:21" pos:end="313:29">host_addr</name> <operator pos:start="313:31" pos:end="313:31">=</operator> <operator pos:start="313:33" pos:end="313:33">(</operator><name pos:start="313:34" pos:end="313:55"><name pos:start="313:34" pos:end="313:38">block</name><operator pos:start="313:39" pos:end="313:40">-&gt;</operator><name pos:start="313:41" pos:end="313:55">local_host_addr</name></name> <operator pos:start="313:57" pos:end="313:57">+</operator>

                                <operator pos:start="315:33" pos:end="315:33">(</operator><name pos:start="315:34" pos:end="315:54"><name pos:start="315:34" pos:end="315:36">reg</name><operator pos:start="315:37" pos:end="315:38">-&gt;</operator><name pos:start="315:39" pos:end="315:41">key</name><operator pos:start="315:42" pos:end="315:42">.</operator><name pos:start="315:43" pos:end="315:54">current_addr</name></name> <operator pos:start="315:56" pos:end="315:56">-</operator> <name pos:start="315:58" pos:end="315:70"><name pos:start="315:58" pos:end="315:62">block</name><operator pos:start="315:63" pos:end="315:64">-&gt;</operator><name pos:start="315:65" pos:end="315:70">offset</name></name><operator pos:start="315:71" pos:end="315:71">)</operator><operator pos:start="315:72" pos:end="315:72">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="317:21" pos:end="319:67"><expr pos:start="317:21" pos:end="319:66"><name pos:start="317:21" pos:end="317:25">chunk</name> <operator pos:start="317:27" pos:end="317:27">=</operator> <call pos:start="317:29" pos:end="319:66"><name pos:start="317:29" pos:end="317:43">ram_chunk_index</name><argument_list pos:start="317:44" pos:end="319:66">(<argument pos:start="317:45" pos:end="317:66"><expr pos:start="317:45" pos:end="317:66"><name pos:start="317:45" pos:end="317:66"><name pos:start="317:45" pos:end="317:49">block</name><operator pos:start="317:50" pos:end="317:51">-&gt;</operator><name pos:start="317:52" pos:end="317:66">local_host_addr</name></name></expr></argument>,

                                            <argument pos:start="319:45" pos:end="319:65"><expr pos:start="319:45" pos:end="319:65"><operator pos:start="319:45" pos:end="319:45">(</operator><name pos:start="319:46" pos:end="319:52">uint8_t</name> <operator pos:start="319:54" pos:end="319:54">*</operator><operator pos:start="319:55" pos:end="319:55">)</operator> <name pos:start="319:57" pos:end="319:65">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="321:19" pos:end="480:15">else <block pos:start="321:24" pos:end="480:15">{<block_content pos:start="323:21" pos:end="480:15">

                    <expr_stmt pos:start="323:21" pos:end="323:43"><expr pos:start="323:21" pos:end="323:42"><name pos:start="323:21" pos:end="323:25">chunk</name> <operator pos:start="323:27" pos:end="323:27">=</operator> <name pos:start="323:29" pos:end="323:42"><name pos:start="323:29" pos:end="323:31">reg</name><operator pos:start="323:32" pos:end="323:33">-&gt;</operator><name pos:start="323:34" pos:end="323:36">key</name><operator pos:start="323:37" pos:end="323:37">.</operator><name pos:start="323:38" pos:end="323:42">chunk</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="325:21" pos:end="327:73"><expr pos:start="325:21" pos:end="327:72"><name pos:start="325:21" pos:end="325:29">host_addr</name> <operator pos:start="325:31" pos:end="325:31">=</operator> <name pos:start="325:33" pos:end="325:54"><name pos:start="325:33" pos:end="325:37">block</name><operator pos:start="325:38" pos:end="325:39">-&gt;</operator><name pos:start="325:40" pos:end="325:54">local_host_addr</name></name> <operator pos:start="325:56" pos:end="325:56">+</operator>

                        <operator pos:start="327:25" pos:end="327:25">(</operator><name pos:start="327:26" pos:end="327:39"><name pos:start="327:26" pos:end="327:28">reg</name><operator pos:start="327:29" pos:end="327:30">-&gt;</operator><name pos:start="327:31" pos:end="327:33">key</name><operator pos:start="327:34" pos:end="327:34">.</operator><name pos:start="327:35" pos:end="327:39">chunk</name></name> <operator pos:start="327:41" pos:end="327:41">*</operator> <operator pos:start="327:43" pos:end="327:43">(</operator><literal type="number" pos:start="327:44" pos:end="327:46">1UL</literal> <operator pos:start="327:48" pos:end="327:49">&lt;&lt;</operator> <name pos:start="327:51" pos:end="327:70">RDMA_REG_CHUNK_SHIFT</name><operator pos:start="327:71" pos:end="327:71">)</operator><operator pos:start="327:72" pos:end="327:72">)</operator></expr>;</expr_stmt>










                <expr_stmt pos:start="338:17" pos:end="338:60"><expr pos:start="338:17" pos:end="338:59"><name pos:start="338:17" pos:end="338:27">chunk_start</name> <operator pos:start="338:29" pos:end="338:29">=</operator> <call pos:start="338:31" pos:end="338:59"><name pos:start="338:31" pos:end="338:45">ram_chunk_start</name><argument_list pos:start="338:46" pos:end="338:59">(<argument pos:start="338:47" pos:end="338:51"><expr pos:start="338:47" pos:end="338:51"><name pos:start="338:47" pos:end="338:51">block</name></expr></argument>, <argument pos:start="338:54" pos:end="338:58"><expr pos:start="338:54" pos:end="338:58"><name pos:start="338:54" pos:end="338:58">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="340:17" pos:end="340:70"><expr pos:start="340:17" pos:end="340:69"><name pos:start="340:17" pos:end="340:25">chunk_end</name> <operator pos:start="340:27" pos:end="340:27">=</operator> <call pos:start="340:29" pos:end="340:69"><name pos:start="340:29" pos:end="340:41">ram_chunk_end</name><argument_list pos:start="340:42" pos:end="340:69">(<argument pos:start="340:43" pos:end="340:47"><expr pos:start="340:43" pos:end="340:47"><name pos:start="340:43" pos:end="340:47">block</name></expr></argument>, <argument pos:start="340:50" pos:end="340:68"><expr pos:start="340:50" pos:end="340:68"><name pos:start="340:50" pos:end="340:54">chunk</name> <operator pos:start="340:56" pos:end="340:56">+</operator> <name pos:start="340:58" pos:end="340:68"><name pos:start="340:58" pos:end="340:60">reg</name><operator pos:start="340:61" pos:end="340:62">-&gt;</operator><name pos:start="340:63" pos:end="340:68">chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="342:17" pos:end="480:15"><if pos:start="342:17" pos:end="480:15">if <condition pos:start="342:20" pos:end="346:59">(<expr pos:start="342:21" pos:end="346:58"><call pos:start="342:21" pos:end="346:58"><name pos:start="342:21" pos:end="342:51">qemu_rdma_register_and_get_keys</name><argument_list pos:start="342:52" pos:end="346:58">(<argument pos:start="342:53" pos:end="342:56"><expr pos:start="342:53" pos:end="342:56"><name pos:start="342:53" pos:end="342:56">rdma</name></expr></argument>, <argument pos:start="342:59" pos:end="342:63"><expr pos:start="342:59" pos:end="342:63"><name pos:start="342:59" pos:end="342:63">block</name></expr></argument>,

                            <argument pos:start="344:29" pos:end="344:48"><expr pos:start="344:29" pos:end="344:48"><operator pos:start="344:29" pos:end="344:29">(</operator><name pos:start="344:30" pos:end="344:38">uintptr_t</name><operator pos:start="344:39" pos:end="344:39">)</operator><name pos:start="344:40" pos:end="344:48">host_addr</name></expr></argument>, <argument pos:start="344:51" pos:end="344:54"><expr pos:start="344:51" pos:end="344:54"><name pos:start="344:51" pos:end="344:54">NULL</name></expr></argument>, <argument pos:start="344:57" pos:end="344:73"><expr pos:start="344:57" pos:end="344:73"><operator pos:start="344:57" pos:end="344:57">&amp;</operator><name pos:start="344:58" pos:end="344:73"><name pos:start="344:58" pos:end="344:67">reg_result</name><operator pos:start="344:68" pos:end="344:69">-&gt;</operator><name pos:start="344:70" pos:end="344:73">rkey</name></name></expr></argument>,

                            <argument pos:start="346:29" pos:end="346:33"><expr pos:start="346:29" pos:end="346:33"><name pos:start="346:29" pos:end="346:33">chunk</name></expr></argument>, <argument pos:start="346:36" pos:end="346:46"><expr pos:start="346:36" pos:end="346:46"><name pos:start="346:36" pos:end="346:46">chunk_start</name></expr></argument>, <argument pos:start="346:49" pos:end="346:57"><expr pos:start="346:49" pos:end="346:57"><name pos:start="346:49" pos:end="346:57">chunk_end</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="346:61" pos:end="480:15">{<block_content pos:start="348:21" pos:end="480:15">

                    <expr_stmt pos:start="348:21" pos:end="348:52"><expr pos:start="348:21" pos:end="348:51"><call pos:start="348:21" pos:end="348:51"><name pos:start="348:21" pos:end="348:32">error_report</name><argument_list pos:start="348:33" pos:end="348:51">(<argument pos:start="348:34" pos:end="348:50"><expr pos:start="348:34" pos:end="348:50"><literal type="string" pos:start="348:34" pos:end="348:50">"cannot get rkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="350:21" pos:end="350:34"><expr pos:start="350:21" pos:end="350:33"><name pos:start="350:21" pos:end="350:23">ret</name> <operator pos:start="350:25" pos:end="350:25">=</operator> <operator pos:start="350:27" pos:end="350:27">-</operator><name pos:start="350:28" pos:end="350:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="352:21" pos:end="352:29">goto <name pos:start="352:26" pos:end="352:28">out</name>;</goto>




                <expr_stmt pos:start="357:17" pos:end="357:74"><expr pos:start="357:17" pos:end="357:73"><name pos:start="357:17" pos:end="357:37"><name pos:start="357:17" pos:end="357:26">reg_result</name><operator pos:start="357:27" pos:end="357:28">-&gt;</operator><name pos:start="357:29" pos:end="357:37">host_addr</name></name> <operator pos:start="357:39" pos:end="357:39">=</operator> <operator pos:start="357:41" pos:end="357:41">(</operator><name pos:start="357:42" pos:end="357:50">uintptr_t</name><operator pos:start="357:51" pos:end="357:51">)</operator><name pos:start="357:52" pos:end="357:73"><name pos:start="357:52" pos:end="357:56">block</name><operator pos:start="357:57" pos:end="357:58">-&gt;</operator><name pos:start="357:59" pos:end="357:73">local_host_addr</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="361:17" pos:end="363:77"><expr pos:start="361:17" pos:end="363:76"><call pos:start="361:17" pos:end="363:76"><name pos:start="361:17" pos:end="361:65">trace_qemu_rdma_registration_handle_register_rkey</name><argument_list pos:start="361:66" pos:end="363:76">(

                                                           <argument pos:start="363:60" pos:end="363:75"><expr pos:start="363:60" pos:end="363:75"><name pos:start="363:60" pos:end="363:75"><name pos:start="363:60" pos:end="363:69">reg_result</name><operator pos:start="363:70" pos:end="363:71">-&gt;</operator><name pos:start="363:72" pos:end="363:75">rkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="367:17" pos:end="367:46"><expr pos:start="367:17" pos:end="367:45"><call pos:start="367:17" pos:end="367:45"><name pos:start="367:17" pos:end="367:33">result_to_network</name><argument_list pos:start="367:34" pos:end="367:45">(<argument pos:start="367:35" pos:end="367:44"><expr pos:start="367:35" pos:end="367:44"><name pos:start="367:35" pos:end="367:44">reg_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




            <expr_stmt pos:start="372:13" pos:end="374:60"><expr pos:start="372:13" pos:end="374:59"><name pos:start="372:13" pos:end="372:15">ret</name> <operator pos:start="372:17" pos:end="372:17">=</operator> <call pos:start="372:19" pos:end="374:59"><name pos:start="372:19" pos:end="372:45">qemu_rdma_post_send_control</name><argument_list pos:start="372:46" pos:end="374:59">(<argument pos:start="372:47" pos:end="372:50"><expr pos:start="372:47" pos:end="372:50"><name pos:start="372:47" pos:end="372:50">rdma</name></expr></argument>,

                            <argument pos:start="374:29" pos:end="374:47"><expr pos:start="374:29" pos:end="374:47"><operator pos:start="374:29" pos:end="374:29">(</operator><name pos:start="374:30" pos:end="374:36">uint8_t</name> <operator pos:start="374:38" pos:end="374:38">*</operator><operator pos:start="374:39" pos:end="374:39">)</operator> <name pos:start="374:41" pos:end="374:47">results</name></expr></argument>, <argument pos:start="374:50" pos:end="374:58"><expr pos:start="374:50" pos:end="374:58"><operator pos:start="374:50" pos:end="374:50">&amp;</operator><name pos:start="374:51" pos:end="374:58">reg_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="378:13" pos:end="480:15"><if pos:start="378:13" pos:end="480:15">if <condition pos:start="378:16" pos:end="378:24">(<expr pos:start="378:17" pos:end="378:23"><name pos:start="378:17" pos:end="378:19">ret</name> <operator pos:start="378:21" pos:end="378:21">&lt;</operator> <literal type="number" pos:start="378:23" pos:end="378:23">0</literal></expr>)</condition> <block pos:start="378:26" pos:end="480:15">{<block_content pos:start="380:17" pos:end="480:15">

                <expr_stmt pos:start="380:17" pos:end="380:62"><expr pos:start="380:17" pos:end="380:61"><call pos:start="380:17" pos:end="380:61"><name pos:start="380:17" pos:end="380:28">error_report</name><argument_list pos:start="380:29" pos:end="380:61">(<argument pos:start="380:30" pos:end="380:60"><expr pos:start="380:30" pos:end="380:60"><literal type="string" pos:start="380:30" pos:end="380:60">"Failed to send control buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="382:17" pos:end="382:25">goto <name pos:start="382:22" pos:end="382:24">out</name>;</goto>



        <case pos:start="386:9" pos:end="386:45">case <expr pos:start="386:14" pos:end="386:44"><name pos:start="386:14" pos:end="386:44">RDMA_CONTROL_UNREGISTER_REQUEST</name></expr>:</case>

            <expr_stmt pos:start="388:13" pos:end="388:72"><expr pos:start="388:13" pos:end="388:71"><call pos:start="388:13" pos:end="388:71"><name pos:start="388:13" pos:end="388:58">trace_qemu_rdma_registration_handle_unregister</name><argument_list pos:start="388:59" pos:end="388:71">(<argument pos:start="388:60" pos:end="388:70"><expr pos:start="388:60" pos:end="388:70"><name pos:start="388:60" pos:end="388:70"><name pos:start="388:60" pos:end="388:63">head</name><operator pos:start="388:64" pos:end="388:64">.</operator><name pos:start="388:65" pos:end="388:70">repeat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="390:13" pos:end="390:44"><expr pos:start="390:13" pos:end="390:43"><name pos:start="390:13" pos:end="390:29"><name pos:start="390:13" pos:end="390:22">unreg_resp</name><operator pos:start="390:23" pos:end="390:23">.</operator><name pos:start="390:24" pos:end="390:29">repeat</name></name> <operator pos:start="390:31" pos:end="390:31">=</operator> <name pos:start="390:33" pos:end="390:43"><name pos:start="390:33" pos:end="390:36">head</name><operator pos:start="390:37" pos:end="390:37">.</operator><name pos:start="390:38" pos:end="390:43">repeat</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="392:13" pos:end="392:73"><expr pos:start="392:13" pos:end="392:72"><name pos:start="392:13" pos:end="392:21">registers</name> <operator pos:start="392:23" pos:end="392:23">=</operator> <operator pos:start="392:25" pos:end="392:25">(</operator><name pos:start="392:26" pos:end="392:37">RDMARegister</name> <operator pos:start="392:39" pos:end="392:39">*</operator><operator pos:start="392:40" pos:end="392:40">)</operator> <name pos:start="392:42" pos:end="392:59"><name pos:start="392:42" pos:end="392:45">rdma</name><operator pos:start="392:46" pos:end="392:47">-&gt;</operator><name pos:start="392:48" pos:end="392:54">wr_data</name><index pos:start="392:55" pos:end="392:59">[<expr pos:start="392:56" pos:end="392:58"><name pos:start="392:56" pos:end="392:58">idx</name></expr>]</index></name><operator pos:start="392:60" pos:end="392:60">.</operator><name pos:start="392:61" pos:end="392:72">control_curr</name></expr>;</expr_stmt>



            <for pos:start="396:13" pos:end="480:15">for <control pos:start="396:17" pos:end="396:57">(<init pos:start="396:18" pos:end="396:27"><expr pos:start="396:18" pos:end="396:26"><name pos:start="396:18" pos:end="396:22">count</name> <operator pos:start="396:24" pos:end="396:24">=</operator> <literal type="number" pos:start="396:26" pos:end="396:26">0</literal></expr>;</init> <condition pos:start="396:29" pos:end="396:48"><expr pos:start="396:29" pos:end="396:47"><name pos:start="396:29" pos:end="396:33">count</name> <operator pos:start="396:35" pos:end="396:35">&lt;</operator> <name pos:start="396:37" pos:end="396:47"><name pos:start="396:37" pos:end="396:40">head</name><operator pos:start="396:41" pos:end="396:41">.</operator><name pos:start="396:42" pos:end="396:47">repeat</name></name></expr>;</condition> <incr pos:start="396:50" pos:end="396:56"><expr pos:start="396:50" pos:end="396:56"><name pos:start="396:50" pos:end="396:54">count</name><operator pos:start="396:55" pos:end="396:56">++</operator></expr></incr>)</control> <block pos:start="396:59" pos:end="480:15">{<block_content pos:start="398:17" pos:end="480:15">

                <expr_stmt pos:start="398:17" pos:end="398:40"><expr pos:start="398:17" pos:end="398:39"><name pos:start="398:17" pos:end="398:19">reg</name> <operator pos:start="398:21" pos:end="398:21">=</operator> <operator pos:start="398:23" pos:end="398:23">&amp;</operator><name pos:start="398:24" pos:end="398:39"><name pos:start="398:24" pos:end="398:32">registers</name><index pos:start="398:33" pos:end="398:39">[<expr pos:start="398:34" pos:end="398:38"><name pos:start="398:34" pos:end="398:38">count</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="400:17" pos:end="400:41"><expr pos:start="400:17" pos:end="400:40"><call pos:start="400:17" pos:end="400:40"><name pos:start="400:17" pos:end="400:35">network_to_register</name><argument_list pos:start="400:36" pos:end="400:40">(<argument pos:start="400:37" pos:end="400:39"><expr pos:start="400:37" pos:end="400:39"><name pos:start="400:37" pos:end="400:39">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="404:17" pos:end="406:63"><expr pos:start="404:17" pos:end="406:62"><call pos:start="404:17" pos:end="406:62"><name pos:start="404:17" pos:end="404:67">trace_qemu_rdma_registration_handle_unregister_loop</name><argument_list pos:start="404:68" pos:end="406:62">(<argument pos:start="404:69" pos:end="404:73"><expr pos:start="404:69" pos:end="404:73"><name pos:start="404:69" pos:end="404:73">count</name></expr></argument>,

                           <argument pos:start="406:28" pos:end="406:45"><expr pos:start="406:28" pos:end="406:45"><name pos:start="406:28" pos:end="406:45"><name pos:start="406:28" pos:end="406:30">reg</name><operator pos:start="406:31" pos:end="406:32">-&gt;</operator><name pos:start="406:33" pos:end="406:45">current_index</name></name></expr></argument>, <argument pos:start="406:48" pos:end="406:61"><expr pos:start="406:48" pos:end="406:61"><name pos:start="406:48" pos:end="406:61"><name pos:start="406:48" pos:end="406:50">reg</name><operator pos:start="406:51" pos:end="406:52">-&gt;</operator><name pos:start="406:53" pos:end="406:55">key</name><operator pos:start="406:56" pos:end="406:56">.</operator><name pos:start="406:57" pos:end="406:61">chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="410:17" pos:end="410:76"><expr pos:start="410:17" pos:end="410:75"><name pos:start="410:17" pos:end="410:21">block</name> <operator pos:start="410:23" pos:end="410:23">=</operator> <operator pos:start="410:25" pos:end="410:25">&amp;</operator><operator pos:start="410:26" pos:end="410:26">(</operator><name pos:start="410:27" pos:end="410:74"><name pos:start="410:27" pos:end="410:30">rdma</name><operator pos:start="410:31" pos:end="410:32">-&gt;</operator><name pos:start="410:33" pos:end="410:48">local_ram_blocks</name><operator pos:start="410:49" pos:end="410:49">.</operator><name pos:start="410:50" pos:end="410:54">block</name><index pos:start="410:55" pos:end="410:74">[<expr pos:start="410:56" pos:end="410:73"><name pos:start="410:56" pos:end="410:73"><name pos:start="410:56" pos:end="410:58">reg</name><operator pos:start="410:59" pos:end="410:60">-&gt;</operator><name pos:start="410:61" pos:end="410:73">current_index</name></name></expr>]</index></name><operator pos:start="410:75" pos:end="410:75">)</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="414:17" pos:end="414:63"><expr pos:start="414:17" pos:end="414:62"><name pos:start="414:17" pos:end="414:19">ret</name> <operator pos:start="414:21" pos:end="414:21">=</operator> <call pos:start="414:23" pos:end="414:62"><name pos:start="414:23" pos:end="414:34">ibv_dereg_mr</name><argument_list pos:start="414:35" pos:end="414:62">(<argument pos:start="414:36" pos:end="414:61"><expr pos:start="414:36" pos:end="414:61"><name pos:start="414:36" pos:end="414:61"><name pos:start="414:36" pos:end="414:40">block</name><operator pos:start="414:41" pos:end="414:42">-&gt;</operator><name pos:start="414:43" pos:end="414:45">pmr</name><index pos:start="414:46" pos:end="414:61">[<expr pos:start="414:47" pos:end="414:60"><name pos:start="414:47" pos:end="414:60"><name pos:start="414:47" pos:end="414:49">reg</name><operator pos:start="414:50" pos:end="414:51">-&gt;</operator><name pos:start="414:52" pos:end="414:54">key</name><operator pos:start="414:55" pos:end="414:55">.</operator><name pos:start="414:56" pos:end="414:60">chunk</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="416:17" pos:end="416:50"><expr pos:start="416:17" pos:end="416:49"><name pos:start="416:17" pos:end="416:42"><name pos:start="416:17" pos:end="416:21">block</name><operator pos:start="416:22" pos:end="416:23">-&gt;</operator><name pos:start="416:24" pos:end="416:26">pmr</name><index pos:start="416:27" pos:end="416:42">[<expr pos:start="416:28" pos:end="416:41"><name pos:start="416:28" pos:end="416:41"><name pos:start="416:28" pos:end="416:30">reg</name><operator pos:start="416:31" pos:end="416:32">-&gt;</operator><name pos:start="416:33" pos:end="416:35">key</name><operator pos:start="416:36" pos:end="416:36">.</operator><name pos:start="416:37" pos:end="416:41">chunk</name></name></expr>]</index></name> <operator pos:start="416:44" pos:end="416:44">=</operator> <name pos:start="416:46" pos:end="416:49">NULL</name></expr>;</expr_stmt>



                <if_stmt pos:start="420:17" pos:end="480:15"><if pos:start="420:17" pos:end="480:15">if <condition pos:start="420:20" pos:end="420:29">(<expr pos:start="420:21" pos:end="420:28"><name pos:start="420:21" pos:end="420:23">ret</name> <operator pos:start="420:25" pos:end="420:26">!=</operator> <literal type="number" pos:start="420:28" pos:end="420:28">0</literal></expr>)</condition> <block pos:start="420:31" pos:end="480:15">{<block_content pos:start="422:21" pos:end="480:15">

                    <expr_stmt pos:start="422:21" pos:end="422:63"><expr pos:start="422:21" pos:end="422:62"><call pos:start="422:21" pos:end="422:62"><name pos:start="422:21" pos:end="422:26">perror</name><argument_list pos:start="422:27" pos:end="422:62">(<argument pos:start="422:28" pos:end="422:61"><expr pos:start="422:28" pos:end="422:61"><literal type="string" pos:start="422:28" pos:end="422:61">"rdma unregistration chunk failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="424:21" pos:end="424:31"><expr pos:start="424:21" pos:end="424:30"><name pos:start="424:21" pos:end="424:23">ret</name> <operator pos:start="424:25" pos:end="424:25">=</operator> <operator pos:start="424:27" pos:end="424:27">-</operator><name pos:start="424:28" pos:end="424:30">ret</name></expr>;</expr_stmt>

                    <goto pos:start="426:21" pos:end="426:29">goto <name pos:start="426:26" pos:end="426:28">out</name>;</goto>




                <expr_stmt pos:start="431:17" pos:end="431:44"><expr pos:start="431:17" pos:end="431:43"><name pos:start="431:17" pos:end="431:41"><name pos:start="431:17" pos:end="431:20">rdma</name><operator pos:start="431:21" pos:end="431:22">-&gt;</operator><name pos:start="431:23" pos:end="431:41">total_registrations</name></name><operator pos:start="431:42" pos:end="431:43">--</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="435:17" pos:end="437:71"><expr pos:start="435:17" pos:end="437:70"><call pos:start="435:17" pos:end="437:70"><name pos:start="435:17" pos:end="435:70">trace_qemu_rdma_registration_handle_unregister_success</name><argument_list pos:start="435:71" pos:end="437:70">(

                                                       <argument pos:start="437:56" pos:end="437:69"><expr pos:start="437:56" pos:end="437:69"><name pos:start="437:56" pos:end="437:69"><name pos:start="437:56" pos:end="437:58">reg</name><operator pos:start="437:59" pos:end="437:60">-&gt;</operator><name pos:start="437:61" pos:end="437:63">key</name><operator pos:start="437:64" pos:end="437:64">.</operator><name pos:start="437:65" pos:end="437:69">chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




            <expr_stmt pos:start="442:13" pos:end="442:71"><expr pos:start="442:13" pos:end="442:70"><name pos:start="442:13" pos:end="442:15">ret</name> <operator pos:start="442:17" pos:end="442:17">=</operator> <call pos:start="442:19" pos:end="442:70"><name pos:start="442:19" pos:end="442:45">qemu_rdma_post_send_control</name><argument_list pos:start="442:46" pos:end="442:70">(<argument pos:start="442:47" pos:end="442:50"><expr pos:start="442:47" pos:end="442:50"><name pos:start="442:47" pos:end="442:50">rdma</name></expr></argument>, <argument pos:start="442:53" pos:end="442:56"><expr pos:start="442:53" pos:end="442:56"><name pos:start="442:53" pos:end="442:56">NULL</name></expr></argument>, <argument pos:start="442:59" pos:end="442:69"><expr pos:start="442:59" pos:end="442:69"><operator pos:start="442:59" pos:end="442:59">&amp;</operator><name pos:start="442:60" pos:end="442:69">unreg_resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="446:13" pos:end="471:5"><if pos:start="446:13" pos:end="471:5">if <condition pos:start="446:16" pos:end="446:24">(<expr pos:start="446:17" pos:end="446:23"><name pos:start="446:17" pos:end="446:19">ret</name> <operator pos:start="446:21" pos:end="446:21">&lt;</operator> <literal type="number" pos:start="446:23" pos:end="446:23">0</literal></expr>)</condition> <block pos:start="446:26" pos:end="471:5">{<block_content pos:start="448:17" pos:end="468:21">

                <expr_stmt pos:start="448:17" pos:end="448:62"><expr pos:start="448:17" pos:end="448:61"><call pos:start="448:17" pos:end="448:61"><name pos:start="448:17" pos:end="448:28">error_report</name><argument_list pos:start="448:29" pos:end="448:61">(<argument pos:start="448:30" pos:end="448:60"><expr pos:start="448:30" pos:end="448:60"><literal type="string" pos:start="448:30" pos:end="448:60">"Failed to send control buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="450:17" pos:end="450:25">goto <name pos:start="450:22" pos:end="450:24">out</name>;</goto>



        <case pos:start="454:9" pos:end="454:42">case <expr pos:start="454:14" pos:end="454:41"><name pos:start="454:14" pos:end="454:41">RDMA_CONTROL_REGISTER_RESULT</name></expr>:</case>

            <expr_stmt pos:start="456:13" pos:end="456:60"><expr pos:start="456:13" pos:end="456:59"><call pos:start="456:13" pos:end="456:59"><name pos:start="456:13" pos:end="456:24">error_report</name><argument_list pos:start="456:25" pos:end="456:59">(<argument pos:start="456:26" pos:end="456:58"><expr pos:start="456:26" pos:end="456:58"><literal type="string" pos:start="456:26" pos:end="456:58">"Invalid RESULT message at dest."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="458:13" pos:end="458:23"><expr pos:start="458:13" pos:end="458:22"><name pos:start="458:13" pos:end="458:15">ret</name> <operator pos:start="458:17" pos:end="458:17">=</operator> <operator pos:start="458:19" pos:end="458:19">-</operator><name pos:start="458:20" pos:end="458:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="460:13" pos:end="460:21">goto <name pos:start="460:18" pos:end="460:20">out</name>;</goto>

        <default pos:start="462:9" pos:end="462:16">default:</default>

            <expr_stmt pos:start="464:13" pos:end="464:80"><expr pos:start="464:13" pos:end="464:79"><call pos:start="464:13" pos:end="464:79"><name pos:start="464:13" pos:end="464:24">error_report</name><argument_list pos:start="464:25" pos:end="464:79">(<argument pos:start="464:26" pos:end="464:53"><expr pos:start="464:26" pos:end="464:53"><literal type="string" pos:start="464:26" pos:end="464:53">"Unknown control message %s"</literal></expr></argument>, <argument pos:start="464:56" pos:end="464:78"><expr pos:start="464:56" pos:end="464:78"><name pos:start="464:56" pos:end="464:78"><name pos:start="464:56" pos:end="464:67">control_desc</name><index pos:start="464:68" pos:end="464:78">[<expr pos:start="464:69" pos:end="464:77"><name pos:start="464:69" pos:end="464:77"><name pos:start="464:69" pos:end="464:72">head</name><operator pos:start="464:73" pos:end="464:73">.</operator><name pos:start="464:74" pos:end="464:77">type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="466:13" pos:end="466:23"><expr pos:start="466:13" pos:end="466:22"><name pos:start="466:13" pos:end="466:15">ret</name> <operator pos:start="466:17" pos:end="466:17">=</operator> <operator pos:start="466:19" pos:end="466:19">-</operator><name pos:start="466:20" pos:end="466:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="468:13" pos:end="468:21">goto <name pos:start="468:18" pos:end="468:20">out</name>;</goto>


    </block_content>}</block></if></if_stmt> <while pos:start="471:7" pos:end="471:16">while <condition pos:start="471:13" pos:end="471:15">(<expr pos:start="471:14" pos:end="471:14"><literal type="number" pos:start="471:14" pos:end="471:14">1</literal></expr>)</condition><block type="pseudo" pos:start="471:16" pos:end="471:16"><block_content pos:start="471:16" pos:end="471:16"><empty_stmt pos:start="471:16" pos:end="471:16">;</empty_stmt></block_content></block></while>

<label pos:start="473:1" pos:end="473:4"><name pos:start="473:1" pos:end="473:3">out</name>:</label>

    <if_stmt pos:start="475:5" pos:end="480:15"><if pos:start="475:5" pos:end="480:15">if <condition pos:start="475:8" pos:end="475:16">(<expr pos:start="475:9" pos:end="475:15"><name pos:start="475:9" pos:end="475:11">ret</name> <operator pos:start="475:13" pos:end="475:13">&lt;</operator> <literal type="number" pos:start="475:15" pos:end="475:15">0</literal></expr>)</condition> <block pos:start="475:18" pos:end="480:15">{<block_content pos:start="477:9" pos:end="480:15">

        <expr_stmt pos:start="477:9" pos:end="477:32"><expr pos:start="477:9" pos:end="477:31"><name pos:start="477:9" pos:end="477:25"><name pos:start="477:9" pos:end="477:12">rdma</name><operator pos:start="477:13" pos:end="477:14">-&gt;</operator><name pos:start="477:15" pos:end="477:25">error_state</name></name> <operator pos:start="477:27" pos:end="477:27">=</operator> <name pos:start="477:29" pos:end="477:31">ret</name></expr>;</expr_stmt>


    <return pos:start="480:5" pos:end="480:15">return <expr pos:start="480:12" pos:end="480:14"><name pos:start="480:12" pos:end="480:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></do></block_content></block></function>
</unit>
