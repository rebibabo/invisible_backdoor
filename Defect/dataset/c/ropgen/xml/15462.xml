<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15462.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:34">cpu_physical_memory_write_rom</name><parameter_list pos:start="1:35" pos:end="3:63">(<parameter pos:start="1:36" pos:end="1:46"><decl pos:start="1:36" pos:end="1:46"><type pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:41">hwaddr</name></type> <name pos:start="1:43" pos:end="1:46">addr</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:53"><decl pos:start="3:36" pos:end="3:53"><type pos:start="3:36" pos:end="3:53"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:48">uint8_t</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:53">buf</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:62"><decl pos:start="3:56" pos:end="3:62"><type pos:start="3:56" pos:end="3:62"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:62">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:5">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:12">l</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:16">addr1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:20">mr</name></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="53:5">while <condition pos:start="17:11" pos:end="17:19">(<expr pos:start="17:12" pos:end="17:18"><name pos:start="17:12" pos:end="17:14">len</name> <operator pos:start="17:16" pos:end="17:16">&gt;</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>)</condition> <block pos:start="17:21" pos:end="53:5">{<block_content pos:start="19:9" pos:end="51:18">

        <expr_stmt pos:start="19:9" pos:end="19:16"><expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:9">l</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:15">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="23:61"><expr pos:start="21:9" pos:end="23:60"><name pos:start="21:9" pos:end="21:10">mr</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="23:60"><name pos:start="21:14" pos:end="21:36">address_space_translate</name><argument_list pos:start="21:37" pos:end="23:60">(<argument pos:start="21:38" pos:end="21:58"><expr pos:start="21:38" pos:end="21:58"><operator pos:start="21:38" pos:end="21:38">&amp;</operator><name pos:start="21:39" pos:end="21:58">address_space_memory</name></expr></argument>,

                                     <argument pos:start="23:38" pos:end="23:41"><expr pos:start="23:38" pos:end="23:41"><name pos:start="23:38" pos:end="23:41">addr</name></expr></argument>, <argument pos:start="23:44" pos:end="23:49"><expr pos:start="23:44" pos:end="23:49"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:49">addr1</name></expr></argument>, <argument pos:start="23:52" pos:end="23:53"><expr pos:start="23:52" pos:end="23:53"><operator pos:start="23:52" pos:end="23:52">&amp;</operator><name pos:start="23:53" pos:end="23:53">l</name></expr></argument>, <argument pos:start="23:56" pos:end="23:59"><expr pos:start="23:56" pos:end="23:59"><name pos:start="23:56" pos:end="23:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="27:9" pos:end="45:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="29:41">(<expr pos:start="27:13" pos:end="29:40"><operator pos:start="27:13" pos:end="27:13">!</operator><operator pos:start="27:14" pos:end="27:14">(</operator><call pos:start="27:15" pos:end="27:38"><name pos:start="27:15" pos:end="27:34">memory_region_is_ram</name><argument_list pos:start="27:35" pos:end="27:38">(<argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><name pos:start="27:36" pos:end="27:37">mr</name></expr></argument>)</argument_list></call> <operator pos:start="27:40" pos:end="27:41">||</operator>

              <call pos:start="29:15" pos:end="29:39"><name pos:start="29:15" pos:end="29:35">memory_region_is_romd</name><argument_list pos:start="29:36" pos:end="29:39">(<argument pos:start="29:37" pos:end="29:38"><expr pos:start="29:37" pos:end="29:38"><name pos:start="29:37" pos:end="29:38">mr</name></expr></argument>)</argument_list></call><operator pos:start="29:40" pos:end="29:40">)</operator></expr>)</condition> <block pos:start="29:43" pos:end="33:9">{<block_content>

            <comment type="block" pos:start="31:13" pos:end="31:28">/* do nothing */</comment>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="45:9">else <block pos:start="33:16" pos:end="45:9">{<block_content pos:start="35:13" pos:end="43:47">

            <expr_stmt pos:start="35:13" pos:end="35:52"><expr pos:start="35:13" pos:end="35:51"><name pos:start="35:13" pos:end="35:17">addr1</name> <operator pos:start="35:19" pos:end="35:20">+=</operator> <call pos:start="35:22" pos:end="35:51"><name pos:start="35:22" pos:end="35:47">memory_region_get_ram_addr</name><argument_list pos:start="35:48" pos:end="35:51">(<argument pos:start="35:49" pos:end="35:50"><expr pos:start="35:49" pos:end="35:50"><name pos:start="35:49" pos:end="35:50">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="37:13" pos:end="37:30">/* ROM/RAM case */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:15">ptr</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:41"><name pos:start="39:19" pos:end="39:34">qemu_get_ram_ptr</name><argument_list pos:start="39:35" pos:end="39:41">(<argument pos:start="39:36" pos:end="39:40"><expr pos:start="39:36" pos:end="39:40"><name pos:start="39:36" pos:end="39:40">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:32"><expr pos:start="41:13" pos:end="41:31"><call pos:start="41:13" pos:end="41:31"><name pos:start="41:13" pos:end="41:18">memcpy</name><argument_list pos:start="41:19" pos:end="41:31">(<argument pos:start="41:20" pos:end="41:22"><expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">ptr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:27"><expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:27">buf</name></expr></argument>, <argument pos:start="41:30" pos:end="41:30"><expr pos:start="41:30" pos:end="41:30"><name pos:start="41:30" pos:end="41:30">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:47"><expr pos:start="43:13" pos:end="43:46"><call pos:start="43:13" pos:end="43:46"><name pos:start="43:13" pos:end="43:36">invalidate_and_set_dirty</name><argument_list pos:start="43:37" pos:end="43:46">(<argument pos:start="43:38" pos:end="43:42"><expr pos:start="43:38" pos:end="43:42"><name pos:start="43:38" pos:end="43:42">addr1</name></expr></argument>, <argument pos:start="43:45" pos:end="43:45"><expr pos:start="43:45" pos:end="43:45"><name pos:start="43:45" pos:end="43:45">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:14">-=</operator> <name pos:start="47:16" pos:end="47:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:17"><expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:11">buf</name> <operator pos:start="49:13" pos:end="49:14">+=</operator> <name pos:start="49:16" pos:end="49:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:18"><expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:12">addr</name> <operator pos:start="51:14" pos:end="51:15">+=</operator> <name pos:start="51:17" pos:end="51:17">l</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
