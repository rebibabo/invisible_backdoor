<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14095.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_nal_units</name><parameter_list pos:start="1:28" pos:end="1:71">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:51">uint8_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">buf</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:70">buf_size</name></decl></parameter>)</parameter_list><block pos:start="1:72" pos:end="245:1">{<block_content pos:start="3:5" pos:end="243:21">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier> <specifier pos:start="5:22" pos:end="5:26">const</specifier></type> <name pos:start="5:28" pos:end="5:32">avctx</name><init pos:start="5:33" pos:end="5:42">= <expr pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:35">s</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:42">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="20:0"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">buf_index</name><init pos:start="7:18" pos:end="7:19">=<expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:5"><literal type="number" pos:start="9:5" pos:end="9:5">0</literal></expr></cpp:if>

    int i;

    for(i=0; i&lt;32; i++){

        printf("%X ", buf[i]);

    }

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <for pos:start="21:5" pos:end="197:5">for<control pos:start="21:8" pos:end="21:11">(<init pos:start="21:9" pos:end="21:9">;</init><condition pos:start="21:10" pos:end="21:10">;</condition><incr/>)</control><block pos:start="21:12" pos:end="197:5">{<block_content pos:start="23:9" pos:end="195:61">

        <decl_stmt pos:start="23:9" pos:end="23:21"><decl pos:start="23:9" pos:end="23:20"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:20">consumed</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:23"><decl pos:start="25:9" pos:end="25:22"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:22">dst_length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:23"><decl pos:start="27:9" pos:end="27:22"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:22">bit_length</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:21"><decl pos:start="29:9" pos:end="29:20"><type pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:15">uint8_t</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:20">ptr</name></decl>;</decl_stmt>

        

        <comment type="line" pos:start="33:9" pos:end="33:35">// start code prefix search</comment>

        <for pos:start="35:9" pos:end="43:9">for<control pos:start="35:12" pos:end="35:52">(<init pos:start="35:13" pos:end="35:13">;</init> <condition pos:start="35:15" pos:end="35:39"><expr pos:start="35:15" pos:end="35:38"><name pos:start="35:15" pos:end="35:23">buf_index</name> <operator pos:start="35:25" pos:end="35:25">+</operator> <literal type="number" pos:start="35:27" pos:end="35:27">3</literal> <operator pos:start="35:29" pos:end="35:29">&lt;</operator> <name pos:start="35:31" pos:end="35:38">buf_size</name></expr>;</condition> <incr pos:start="35:41" pos:end="35:51"><expr pos:start="35:41" pos:end="35:51"><name pos:start="35:41" pos:end="35:49">buf_index</name><operator pos:start="35:50" pos:end="35:51">++</operator></expr></incr>)</control><block pos:start="35:53" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:22">

            <comment type="line" pos:start="37:13" pos:end="37:65">// this should allways succeed in the first iteration</comment>

            <if_stmt pos:start="39:13" pos:end="41:22"><if pos:start="39:13" pos:end="41:22">if<condition pos:start="39:15" pos:end="39:85">(<expr pos:start="39:16" pos:end="39:84"><name pos:start="39:16" pos:end="39:29"><name pos:start="39:16" pos:end="39:18">buf</name><index pos:start="39:19" pos:end="39:29">[<expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28">buf_index</name></expr>]</index></name> <operator pos:start="39:31" pos:end="39:32">==</operator> <literal type="number" pos:start="39:34" pos:end="39:34">0</literal> <operator pos:start="39:36" pos:end="39:37">&amp;&amp;</operator> <name pos:start="39:39" pos:end="39:54"><name pos:start="39:39" pos:end="39:41">buf</name><index pos:start="39:42" pos:end="39:54">[<expr pos:start="39:43" pos:end="39:53"><name pos:start="39:43" pos:end="39:51">buf_index</name><operator pos:start="39:52" pos:end="39:52">+</operator><literal type="number" pos:start="39:53" pos:end="39:53">1</literal></expr>]</index></name> <operator pos:start="39:56" pos:end="39:57">==</operator> <literal type="number" pos:start="39:59" pos:end="39:59">0</literal> <operator pos:start="39:61" pos:end="39:62">&amp;&amp;</operator> <name pos:start="39:64" pos:end="39:79"><name pos:start="39:64" pos:end="39:66">buf</name><index pos:start="39:67" pos:end="39:79">[<expr pos:start="39:68" pos:end="39:78"><name pos:start="39:68" pos:end="39:76">buf_index</name><operator pos:start="39:77" pos:end="39:77">+</operator><literal type="number" pos:start="39:78" pos:end="39:78">2</literal></expr>]</index></name> <operator pos:start="39:81" pos:end="39:82">==</operator> <literal type="number" pos:start="39:84" pos:end="39:84">1</literal></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:22"><block_content pos:start="41:17" pos:end="41:22">

                <break pos:start="41:17" pos:end="41:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        

        <if_stmt pos:start="47:9" pos:end="47:42"><if pos:start="47:9" pos:end="47:42">if<condition pos:start="47:11" pos:end="47:35">(<expr pos:start="47:12" pos:end="47:34"><name pos:start="47:12" pos:end="47:20">buf_index</name><operator pos:start="47:21" pos:end="47:21">+</operator><literal type="number" pos:start="47:22" pos:end="47:22">3</literal> <operator pos:start="47:24" pos:end="47:25">&gt;=</operator> <name pos:start="47:27" pos:end="47:34">buf_size</name></expr>)</condition><block type="pseudo" pos:start="47:37" pos:end="47:42"><block_content pos:start="47:37" pos:end="47:42"> <break pos:start="47:37" pos:end="47:42">break;</break></block_content></block></if></if_stmt>

        

        <expr_stmt pos:start="51:9" pos:end="51:21"><expr pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:17">buf_index</name><operator pos:start="51:18" pos:end="51:19">+=</operator><literal type="number" pos:start="51:20" pos:end="51:20">3</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="55:9" pos:end="55:90"><expr pos:start="55:9" pos:end="55:89"><name pos:start="55:9" pos:end="55:11">ptr</name><operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:89"><name pos:start="55:14" pos:end="55:23">decode_nal</name><argument_list pos:start="55:24" pos:end="55:89">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">h</name></expr></argument>, <argument pos:start="55:28" pos:end="55:42"><expr pos:start="55:28" pos:end="55:42"><name pos:start="55:28" pos:end="55:30">buf</name> <operator pos:start="55:32" pos:end="55:32">+</operator> <name pos:start="55:34" pos:end="55:42">buf_index</name></expr></argument>, <argument pos:start="55:45" pos:end="55:55"><expr pos:start="55:45" pos:end="55:55"><operator pos:start="55:45" pos:end="55:45">&amp;</operator><name pos:start="55:46" pos:end="55:55">dst_length</name></expr></argument>, <argument pos:start="55:58" pos:end="55:66"><expr pos:start="55:58" pos:end="55:66"><operator pos:start="55:58" pos:end="55:58">&amp;</operator><name pos:start="55:59" pos:end="55:66">consumed</name></expr></argument>, <argument pos:start="55:69" pos:end="55:88"><expr pos:start="55:69" pos:end="55:88"><name pos:start="55:69" pos:end="55:76">buf_size</name> <operator pos:start="55:78" pos:end="55:78">-</operator> <name pos:start="55:80" pos:end="55:88">buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="57:50"><if pos:start="57:9" pos:end="57:50">if<condition pos:start="57:11" pos:end="57:36">(<expr pos:start="57:12" pos:end="57:35"><name pos:start="57:12" pos:end="57:30"><name pos:start="57:12" pos:end="57:14">ptr</name><index pos:start="57:15" pos:end="57:30">[<expr pos:start="57:16" pos:end="57:29"><name pos:start="57:16" pos:end="57:25">dst_length</name> <operator pos:start="57:27" pos:end="57:27">-</operator> <literal type="number" pos:start="57:29" pos:end="57:29">1</literal></expr>]</index></name> <operator pos:start="57:32" pos:end="57:33">==</operator> <literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>)</condition><block type="pseudo" pos:start="57:38" pos:end="57:50"><block_content pos:start="57:38" pos:end="57:50"> <expr_stmt pos:start="57:38" pos:end="57:50"><expr pos:start="57:38" pos:end="57:49"><name pos:start="57:38" pos:end="57:47">dst_length</name><operator pos:start="57:48" pos:end="57:49">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:78"><expr pos:start="59:9" pos:end="59:77"><name pos:start="59:9" pos:end="59:18">bit_length</name><operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">8</literal><operator pos:start="59:22" pos:end="59:22">*</operator><name pos:start="59:23" pos:end="59:32">dst_length</name> <operator pos:start="59:34" pos:end="59:34">-</operator> <call pos:start="59:36" pos:end="59:77"><name pos:start="59:36" pos:end="59:55">decode_rbsp_trailing</name><argument_list pos:start="59:56" pos:end="59:77">(<argument pos:start="59:57" pos:end="59:76"><expr pos:start="59:57" pos:end="59:76"><name pos:start="59:57" pos:end="59:59">ptr</name> <operator pos:start="59:61" pos:end="59:61">+</operator> <name pos:start="59:63" pos:end="59:72">dst_length</name> <operator pos:start="59:74" pos:end="59:74">-</operator> <literal type="number" pos:start="59:76" pos:end="59:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if<condition pos:start="63:11" pos:end="63:46">(<expr pos:start="63:12" pos:end="63:45"><name pos:start="63:12" pos:end="63:26"><name pos:start="63:12" pos:end="63:12">s</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:19">avctx</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:26">debug</name></name><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:45">FF_DEBUG_STARTCODE</name></expr>)</condition><block pos:start="63:47" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:114">

            <expr_stmt pos:start="65:13" pos:end="65:114"><expr pos:start="65:13" pos:end="65:113"><call pos:start="65:13" pos:end="65:113"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:113">(<argument pos:start="65:20" pos:end="65:29"><expr pos:start="65:20" pos:end="65:29"><name pos:start="65:20" pos:end="65:29"><name pos:start="65:20" pos:end="65:20">h</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:23">s</name><operator pos:start="65:24" pos:end="65:24">.</operator><name pos:start="65:25" pos:end="65:29">avctx</name></name></expr></argument>, <argument pos:start="65:32" pos:end="65:43"><expr pos:start="65:32" pos:end="65:43"><name pos:start="65:32" pos:end="65:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="65:46" pos:end="65:71"><expr pos:start="65:46" pos:end="65:71"><literal type="string" pos:start="65:46" pos:end="65:71">"NAL %d at %d length %d\n"</literal></expr></argument>, <argument pos:start="65:74" pos:end="65:89"><expr pos:start="65:74" pos:end="65:89"><name pos:start="65:74" pos:end="65:89"><name pos:start="65:74" pos:end="65:74">h</name><operator pos:start="65:75" pos:end="65:76">-&gt;</operator><name pos:start="65:77" pos:end="65:89">nal_unit_type</name></name></expr></argument>, <argument pos:start="65:92" pos:end="65:100"><expr pos:start="65:92" pos:end="65:100"><name pos:start="65:92" pos:end="65:100">buf_index</name></expr></argument>, <argument pos:start="65:103" pos:end="65:112"><expr pos:start="65:103" pos:end="65:112"><name pos:start="65:103" pos:end="65:112">dst_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:17">buf_index</name> <operator pos:start="71:19" pos:end="71:20">+=</operator> <name pos:start="71:22" pos:end="71:29">consumed</name></expr>;</expr_stmt>



        <if_stmt pos:start="75:9" pos:end="77:21"><if pos:start="75:9" pos:end="77:21">if<condition pos:start="75:11" pos:end="75:40">(<expr pos:start="75:12" pos:end="75:39"><name pos:start="75:12" pos:end="75:25"><name pos:start="75:12" pos:end="75:12">h</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:25">nal_ref_idc</name></name> <operator pos:start="75:27" pos:end="75:27">&lt;</operator> <name pos:start="75:29" pos:end="75:39"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:39">hurry_up</name></name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:21"><block_content pos:start="77:13" pos:end="77:21">

            <continue pos:start="77:13" pos:end="77:21">continue;</continue></block_content></block></if></if_stmt>

        

        <switch pos:start="81:9" pos:end="187:9">switch<condition pos:start="81:15" pos:end="81:32">(<expr pos:start="81:16" pos:end="81:31"><name pos:start="81:16" pos:end="81:31"><name pos:start="81:16" pos:end="81:16">h</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:31">nal_unit_type</name></name></expr>)</condition><block pos:start="81:33" pos:end="187:9">{<block_content pos:start="83:9" pos:end="185:18">

        <case pos:start="83:9" pos:end="83:27">case <expr pos:start="83:14" pos:end="83:26"><name pos:start="83:14" pos:end="83:26">NAL_IDR_SLICE</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:19"><expr pos:start="85:13" pos:end="85:18"><call pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:15">idr</name><argument_list pos:start="85:16" pos:end="85:18">(<argument pos:start="85:17" pos:end="85:17"><expr pos:start="85:17" pos:end="85:17"><name pos:start="85:17" pos:end="85:17">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="85:21" pos:end="85:83">//FIXME ensure we dont loose some frames if there is reordering</comment>

        <case pos:start="87:9" pos:end="87:23">case <expr pos:start="87:14" pos:end="87:22"><name pos:start="87:14" pos:end="87:22">NAL_SLICE</name></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:51"><expr pos:start="89:13" pos:end="89:50"><call pos:start="89:13" pos:end="89:50"><name pos:start="89:13" pos:end="89:25">init_get_bits</name><argument_list pos:start="89:26" pos:end="89:50">(<argument pos:start="89:27" pos:end="89:32"><expr pos:start="89:27" pos:end="89:32"><operator pos:start="89:27" pos:end="89:27">&amp;</operator><name pos:start="89:28" pos:end="89:32"><name pos:start="89:28" pos:end="89:28">s</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:32">gb</name></name></expr></argument>, <argument pos:start="89:35" pos:end="89:37"><expr pos:start="89:35" pos:end="89:37"><name pos:start="89:35" pos:end="89:37">ptr</name></expr></argument>, <argument pos:start="89:40" pos:end="89:49"><expr pos:start="89:40" pos:end="89:49"><name pos:start="89:40" pos:end="89:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="93:36"><expr pos:start="91:13" pos:end="93:35"><name pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:13">h</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:27">intra_gb_ptr</name></name><operator pos:start="91:28" pos:end="91:28">=</operator>

            <name pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:13">h</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:27">inter_gb_ptr</name></name><operator pos:start="93:28" pos:end="93:28">=</operator> <operator pos:start="93:30" pos:end="93:30">&amp;</operator><name pos:start="93:31" pos:end="93:35"><name pos:start="93:31" pos:end="93:31">s</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:35">gb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:37"><expr pos:start="95:13" pos:end="95:36"><name pos:start="95:13" pos:end="95:32"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:32">data_partitioning</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <literal type="number" pos:start="95:36" pos:end="95:36">0</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="99:13" pos:end="99:53"><if pos:start="99:13" pos:end="99:53">if<condition pos:start="99:15" pos:end="99:42">(<expr pos:start="99:16" pos:end="99:41"><call pos:start="99:16" pos:end="99:37"><name pos:start="99:16" pos:end="99:34">decode_slice_header</name><argument_list pos:start="99:35" pos:end="99:37">(<argument pos:start="99:36" pos:end="99:36"><expr pos:start="99:36" pos:end="99:36"><name pos:start="99:36" pos:end="99:36">h</name></expr></argument>)</argument_list></call> <operator pos:start="99:39" pos:end="99:39">&lt;</operator> <literal type="number" pos:start="99:41" pos:end="99:41">0</literal></expr>)</condition><block type="pseudo" pos:start="99:44" pos:end="99:53"><block_content pos:start="99:44" pos:end="99:53"> <return pos:start="99:44" pos:end="99:53">return <expr pos:start="99:51" pos:end="99:52"><operator pos:start="99:51" pos:end="99:51">-</operator><literal type="number" pos:start="99:52" pos:end="99:52">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="101:13" pos:end="103:32"><if pos:start="101:13" pos:end="103:32">if<condition pos:start="101:15" pos:end="101:41">(<expr pos:start="101:16" pos:end="101:40"><name pos:start="101:16" pos:end="101:37"><name pos:start="101:16" pos:end="101:16">h</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:37">redundant_pic_count</name></name><operator pos:start="101:38" pos:end="101:39">==</operator><literal type="number" pos:start="101:40" pos:end="101:40">0</literal></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:32"><block_content pos:start="103:17" pos:end="103:32">

                <expr_stmt pos:start="103:17" pos:end="103:32"><expr pos:start="103:17" pos:end="103:31"><call pos:start="103:17" pos:end="103:31"><name pos:start="103:17" pos:end="103:28">decode_slice</name><argument_list pos:start="103:29" pos:end="103:31">(<argument pos:start="103:30" pos:end="103:30"><expr pos:start="103:30" pos:end="103:30"><name pos:start="103:30" pos:end="103:30">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:21">case <expr pos:start="107:14" pos:end="107:20"><name pos:start="107:14" pos:end="107:20">NAL_DPA</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:51"><expr pos:start="109:13" pos:end="109:50"><call pos:start="109:13" pos:end="109:50"><name pos:start="109:13" pos:end="109:25">init_get_bits</name><argument_list pos:start="109:26" pos:end="109:50">(<argument pos:start="109:27" pos:end="109:32"><expr pos:start="109:27" pos:end="109:32"><operator pos:start="109:27" pos:end="109:27">&amp;</operator><name pos:start="109:28" pos:end="109:32"><name pos:start="109:28" pos:end="109:28">s</name><operator pos:start="109:29" pos:end="109:30">-&gt;</operator><name pos:start="109:31" pos:end="109:32">gb</name></name></expr></argument>, <argument pos:start="109:35" pos:end="109:37"><expr pos:start="109:35" pos:end="109:37"><name pos:start="109:35" pos:end="109:37">ptr</name></expr></argument>, <argument pos:start="109:40" pos:end="109:49"><expr pos:start="109:40" pos:end="109:49"><name pos:start="109:40" pos:end="109:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="113:34"><expr pos:start="111:13" pos:end="113:33"><name pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:13">h</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:27">intra_gb_ptr</name></name><operator pos:start="111:28" pos:end="111:28">=</operator>

            <name pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:13">h</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:27">inter_gb_ptr</name></name><operator pos:start="113:28" pos:end="113:28">=</operator> <name pos:start="113:30" pos:end="113:33">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:32">data_partitioning</name></name> <operator pos:start="115:34" pos:end="115:34">=</operator> <literal type="number" pos:start="115:36" pos:end="115:36">1</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="119:13" pos:end="119:53"><if pos:start="119:13" pos:end="119:53">if<condition pos:start="119:15" pos:end="119:42">(<expr pos:start="119:16" pos:end="119:41"><call pos:start="119:16" pos:end="119:37"><name pos:start="119:16" pos:end="119:34">decode_slice_header</name><argument_list pos:start="119:35" pos:end="119:37">(<argument pos:start="119:36" pos:end="119:36"><expr pos:start="119:36" pos:end="119:36"><name pos:start="119:36" pos:end="119:36">h</name></expr></argument>)</argument_list></call> <operator pos:start="119:39" pos:end="119:39">&lt;</operator> <literal type="number" pos:start="119:41" pos:end="119:41">0</literal></expr>)</condition><block type="pseudo" pos:start="119:44" pos:end="119:53"><block_content pos:start="119:44" pos:end="119:53"> <return pos:start="119:44" pos:end="119:53">return <expr pos:start="119:51" pos:end="119:52"><operator pos:start="119:51" pos:end="119:51">-</operator><literal type="number" pos:start="119:52" pos:end="119:52">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        <case pos:start="123:9" pos:end="123:21">case <expr pos:start="123:14" pos:end="123:20"><name pos:start="123:14" pos:end="123:20">NAL_DPB</name></expr>:</case>

            <expr_stmt pos:start="125:13" pos:end="125:57"><expr pos:start="125:13" pos:end="125:56"><call pos:start="125:13" pos:end="125:56"><name pos:start="125:13" pos:end="125:25">init_get_bits</name><argument_list pos:start="125:26" pos:end="125:56">(<argument pos:start="125:27" pos:end="125:38"><expr pos:start="125:27" pos:end="125:38"><operator pos:start="125:27" pos:end="125:27">&amp;</operator><name pos:start="125:28" pos:end="125:38"><name pos:start="125:28" pos:end="125:28">h</name><operator pos:start="125:29" pos:end="125:30">-&gt;</operator><name pos:start="125:31" pos:end="125:38">intra_gb</name></name></expr></argument>, <argument pos:start="125:41" pos:end="125:43"><expr pos:start="125:41" pos:end="125:43"><name pos:start="125:41" pos:end="125:43">ptr</name></expr></argument>, <argument pos:start="125:46" pos:end="125:55"><expr pos:start="125:46" pos:end="125:55"><name pos:start="125:46" pos:end="125:55">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:42"><expr pos:start="127:13" pos:end="127:41"><name pos:start="127:13" pos:end="127:27"><name pos:start="127:13" pos:end="127:13">h</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:27">intra_gb_ptr</name></name><operator pos:start="127:28" pos:end="127:28">=</operator> <operator pos:start="127:30" pos:end="127:30">&amp;</operator><name pos:start="127:31" pos:end="127:41"><name pos:start="127:31" pos:end="127:31">h</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:41">intra_gb</name></name></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <case pos:start="131:9" pos:end="131:21">case <expr pos:start="131:14" pos:end="131:20"><name pos:start="131:14" pos:end="131:20">NAL_DPC</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:57"><expr pos:start="133:13" pos:end="133:56"><call pos:start="133:13" pos:end="133:56"><name pos:start="133:13" pos:end="133:25">init_get_bits</name><argument_list pos:start="133:26" pos:end="133:56">(<argument pos:start="133:27" pos:end="133:38"><expr pos:start="133:27" pos:end="133:38"><operator pos:start="133:27" pos:end="133:27">&amp;</operator><name pos:start="133:28" pos:end="133:38"><name pos:start="133:28" pos:end="133:28">h</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:38">inter_gb</name></name></expr></argument>, <argument pos:start="133:41" pos:end="133:43"><expr pos:start="133:41" pos:end="133:43"><name pos:start="133:41" pos:end="133:43">ptr</name></expr></argument>, <argument pos:start="133:46" pos:end="133:55"><expr pos:start="133:46" pos:end="133:55"><name pos:start="133:46" pos:end="133:55">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:42"><expr pos:start="135:13" pos:end="135:41"><name pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:13">h</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:27">inter_gb_ptr</name></name><operator pos:start="135:28" pos:end="135:28">=</operator> <operator pos:start="135:30" pos:end="135:30">&amp;</operator><name pos:start="135:31" pos:end="135:41"><name pos:start="135:31" pos:end="135:31">h</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:41">inter_gb</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="139:13" pos:end="141:32"><if pos:start="139:13" pos:end="141:32">if<condition pos:start="139:15" pos:end="139:84">(<expr pos:start="139:16" pos:end="139:83"><name pos:start="139:16" pos:end="139:37"><name pos:start="139:16" pos:end="139:16">h</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:37">redundant_pic_count</name></name><operator pos:start="139:38" pos:end="139:39">==</operator><literal type="number" pos:start="139:40" pos:end="139:40">0</literal> <operator pos:start="139:42" pos:end="139:43">&amp;&amp;</operator> <name pos:start="139:45" pos:end="139:59"><name pos:start="139:45" pos:end="139:45">h</name><operator pos:start="139:46" pos:end="139:47">-&gt;</operator><name pos:start="139:48" pos:end="139:59">intra_gb_ptr</name></name> <operator pos:start="139:61" pos:end="139:62">&amp;&amp;</operator> <name pos:start="139:64" pos:end="139:83"><name pos:start="139:64" pos:end="139:64">s</name><operator pos:start="139:65" pos:end="139:66">-&gt;</operator><name pos:start="139:67" pos:end="139:83">data_partitioning</name></name></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:32"><block_content pos:start="141:17" pos:end="141:32">

                <expr_stmt pos:start="141:17" pos:end="141:32"><expr pos:start="141:17" pos:end="141:31"><call pos:start="141:17" pos:end="141:31"><name pos:start="141:17" pos:end="141:28">decode_slice</name><argument_list pos:start="141:29" pos:end="141:31">(<argument pos:start="141:30" pos:end="141:30"><expr pos:start="141:30" pos:end="141:30"><name pos:start="141:30" pos:end="141:30">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <case pos:start="145:9" pos:end="145:21">case <expr pos:start="145:14" pos:end="145:20"><name pos:start="145:14" pos:end="145:20">NAL_SEI</name></expr>:</case>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:21">case <expr pos:start="149:14" pos:end="149:20"><name pos:start="149:14" pos:end="149:20">NAL_SPS</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:51"><expr pos:start="151:13" pos:end="151:50"><call pos:start="151:13" pos:end="151:50"><name pos:start="151:13" pos:end="151:25">init_get_bits</name><argument_list pos:start="151:26" pos:end="151:50">(<argument pos:start="151:27" pos:end="151:32"><expr pos:start="151:27" pos:end="151:32"><operator pos:start="151:27" pos:end="151:27">&amp;</operator><name pos:start="151:28" pos:end="151:32"><name pos:start="151:28" pos:end="151:28">s</name><operator pos:start="151:29" pos:end="151:30">-&gt;</operator><name pos:start="151:31" pos:end="151:32">gb</name></name></expr></argument>, <argument pos:start="151:35" pos:end="151:37"><expr pos:start="151:35" pos:end="151:37"><name pos:start="151:35" pos:end="151:37">ptr</name></expr></argument>, <argument pos:start="151:40" pos:end="151:49"><expr pos:start="151:40" pos:end="151:49"><name pos:start="151:40" pos:end="151:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:40"><expr pos:start="153:13" pos:end="153:39"><call pos:start="153:13" pos:end="153:39"><name pos:start="153:13" pos:end="153:36">decode_seq_parameter_set</name><argument_list pos:start="153:37" pos:end="153:39">(<argument pos:start="153:38" pos:end="153:38"><expr pos:start="153:38" pos:end="153:38"><name pos:start="153:38" pos:end="153:38">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <if_stmt pos:start="157:13" pos:end="159:31"><if pos:start="157:13" pos:end="159:31">if<condition pos:start="157:15" pos:end="157:46">(<expr pos:start="157:16" pos:end="157:45"><name pos:start="157:16" pos:end="157:23"><name pos:start="157:16" pos:end="157:16">s</name><operator pos:start="157:17" pos:end="157:18">-&gt;</operator><name pos:start="157:19" pos:end="157:23">flags</name></name><operator pos:start="157:24" pos:end="157:24">&amp;</operator> <name pos:start="157:26" pos:end="157:45">CODEC_FLAG_LOW_DELAY</name></expr>)</condition><block type="pseudo" pos:start="159:17" pos:end="159:31"><block_content pos:start="159:17" pos:end="159:31">

                <expr_stmt pos:start="159:17" pos:end="159:31"><expr pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:28"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:28">low_delay</name></name><operator pos:start="159:29" pos:end="159:29">=</operator><literal type="number" pos:start="159:30" pos:end="159:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      

            <expr_stmt pos:start="163:13" pos:end="163:47"><expr pos:start="163:13" pos:end="163:46"><name pos:start="163:13" pos:end="163:31"><name pos:start="163:13" pos:end="163:17">avctx</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:31">has_b_frames</name></name><operator pos:start="163:32" pos:end="163:32">=</operator> <operator pos:start="163:34" pos:end="163:34">!</operator><name pos:start="163:35" pos:end="163:46"><name pos:start="163:35" pos:end="163:35">s</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:46">low_delay</name></name></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:21">case <expr pos:start="167:14" pos:end="167:20"><name pos:start="167:14" pos:end="167:20">NAL_PPS</name></expr>:</case>

            <expr_stmt pos:start="169:13" pos:end="169:51"><expr pos:start="169:13" pos:end="169:50"><call pos:start="169:13" pos:end="169:50"><name pos:start="169:13" pos:end="169:25">init_get_bits</name><argument_list pos:start="169:26" pos:end="169:50">(<argument pos:start="169:27" pos:end="169:32"><expr pos:start="169:27" pos:end="169:32"><operator pos:start="169:27" pos:end="169:27">&amp;</operator><name pos:start="169:28" pos:end="169:32"><name pos:start="169:28" pos:end="169:28">s</name><operator pos:start="169:29" pos:end="169:30">-&gt;</operator><name pos:start="169:31" pos:end="169:32">gb</name></name></expr></argument>, <argument pos:start="169:35" pos:end="169:37"><expr pos:start="169:35" pos:end="169:37"><name pos:start="169:35" pos:end="169:37">ptr</name></expr></argument>, <argument pos:start="169:40" pos:end="169:49"><expr pos:start="169:40" pos:end="169:49"><name pos:start="169:40" pos:end="169:49">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="173:13" pos:end="173:44"><expr pos:start="173:13" pos:end="173:43"><call pos:start="173:13" pos:end="173:43"><name pos:start="173:13" pos:end="173:40">decode_picture_parameter_set</name><argument_list pos:start="173:41" pos:end="173:43">(<argument pos:start="173:42" pos:end="173:42"><expr pos:start="173:42" pos:end="173:42"><name pos:start="173:42" pos:end="173:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <break pos:start="177:13" pos:end="177:18">break;</break>

        <case pos:start="179:9" pos:end="179:35">case <expr pos:start="179:14" pos:end="179:34"><name pos:start="179:14" pos:end="179:34">NAL_PICTURE_DELIMITER</name></expr>:</case>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <case pos:start="183:9" pos:end="183:29">case <expr pos:start="183:14" pos:end="183:28"><name pos:start="183:14" pos:end="183:28">NAL_FILTER_DATA</name></expr>:</case>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        </block_content>}</block></switch>        



        <comment type="line" pos:start="191:9" pos:end="191:43">//FIXME move after where irt is set</comment>

        <expr_stmt pos:start="193:9" pos:end="193:51"><expr pos:start="193:9" pos:end="193:50"><name pos:start="193:9" pos:end="193:36"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:26">current_picture</name><operator pos:start="193:27" pos:end="193:27">.</operator><name pos:start="193:28" pos:end="193:36">pict_type</name></name><operator pos:start="193:37" pos:end="193:37">=</operator> <name pos:start="193:39" pos:end="193:50"><name pos:start="193:39" pos:end="193:39">s</name><operator pos:start="193:40" pos:end="193:41">-&gt;</operator><name pos:start="193:42" pos:end="193:50">pict_type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:61"><expr pos:start="195:9" pos:end="195:60"><name pos:start="195:9" pos:end="195:36"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:26">current_picture</name><operator pos:start="195:27" pos:end="195:27">.</operator><name pos:start="195:28" pos:end="195:36">key_frame</name></name><operator pos:start="195:37" pos:end="195:37">=</operator> <name pos:start="195:39" pos:end="195:50"><name pos:start="195:39" pos:end="195:39">s</name><operator pos:start="195:40" pos:end="195:41">-&gt;</operator><name pos:start="195:42" pos:end="195:50">pict_type</name></name> <operator pos:start="195:52" pos:end="195:53">==</operator> <name pos:start="195:55" pos:end="195:60">I_TYPE</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    

    <if_stmt pos:start="201:5" pos:end="201:49"><if pos:start="201:5" pos:end="201:49">if<condition pos:start="201:7" pos:end="201:31">(<expr pos:start="201:8" pos:end="201:30"><operator pos:start="201:8" pos:end="201:8">!</operator><name pos:start="201:9" pos:end="201:30"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:30">current_picture_ptr</name></name></expr>)</condition><block type="pseudo" pos:start="201:33" pos:end="201:49"><block_content pos:start="201:33" pos:end="201:49"> <return pos:start="201:33" pos:end="201:49">return <expr pos:start="201:40" pos:end="201:48"><name pos:start="201:40" pos:end="201:48">buf_index</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="201:51" pos:end="201:60">//no frame</comment>

    

    <expr_stmt pos:start="205:5" pos:end="205:50"><expr pos:start="205:5" pos:end="205:49"><name pos:start="205:5" pos:end="205:28"><name pos:start="205:5" pos:end="205:5">h</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:28">prev_frame_num_offset</name></name><operator pos:start="205:29" pos:end="205:29">=</operator> <name pos:start="205:31" pos:end="205:49"><name pos:start="205:31" pos:end="205:31">h</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:49">frame_num_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:36"><expr pos:start="207:5" pos:end="207:35"><name pos:start="207:5" pos:end="207:21"><name pos:start="207:5" pos:end="207:5">h</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:21">prev_frame_num</name></name><operator pos:start="207:22" pos:end="207:22">=</operator> <name pos:start="207:24" pos:end="207:35"><name pos:start="207:24" pos:end="207:24">h</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:35">frame_num</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="215:5"><if pos:start="209:5" pos:end="215:5">if<condition pos:start="209:7" pos:end="209:41">(<expr pos:start="209:8" pos:end="209:40"><name pos:start="209:8" pos:end="209:40"><name pos:start="209:8" pos:end="209:8">s</name><operator pos:start="209:9" pos:end="209:10">-&gt;</operator><name pos:start="209:11" pos:end="209:29">current_picture_ptr</name><operator pos:start="209:30" pos:end="209:31">-&gt;</operator><name pos:start="209:32" pos:end="209:40">reference</name></name></expr>)</condition><block pos:start="209:42" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:36">

        <expr_stmt pos:start="211:9" pos:end="211:36"><expr pos:start="211:9" pos:end="211:35"><name pos:start="211:9" pos:end="211:23"><name pos:start="211:9" pos:end="211:9">h</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:23">prev_poc_msb</name></name><operator pos:start="211:24" pos:end="211:24">=</operator> <name pos:start="211:26" pos:end="211:35"><name pos:start="211:26" pos:end="211:26">h</name><operator pos:start="211:27" pos:end="211:28">-&gt;</operator><name pos:start="211:29" pos:end="211:35">poc_msb</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:36"><expr pos:start="213:9" pos:end="213:35"><name pos:start="213:9" pos:end="213:23"><name pos:start="213:9" pos:end="213:9">h</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:23">prev_poc_lsb</name></name><operator pos:start="213:24" pos:end="213:24">=</operator> <name pos:start="213:26" pos:end="213:35"><name pos:start="213:26" pos:end="213:26">h</name><operator pos:start="213:27" pos:end="213:28">-&gt;</operator><name pos:start="213:29" pos:end="213:35">poc_lsb</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="217:5" pos:end="223:33"><if pos:start="217:5" pos:end="219:59">if<condition pos:start="217:7" pos:end="217:41">(<expr pos:start="217:8" pos:end="217:40"><name pos:start="217:8" pos:end="217:40"><name pos:start="217:8" pos:end="217:8">s</name><operator pos:start="217:9" pos:end="217:10">-&gt;</operator><name pos:start="217:11" pos:end="217:29">current_picture_ptr</name><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:40">reference</name></name></expr>)</condition><block type="pseudo" pos:start="219:9" pos:end="219:59"><block_content pos:start="219:9" pos:end="219:59">

        <expr_stmt pos:start="219:9" pos:end="219:59"><expr pos:start="219:9" pos:end="219:58"><call pos:start="219:9" pos:end="219:58"><name pos:start="219:9" pos:end="219:31">execute_ref_pic_marking</name><argument_list pos:start="219:32" pos:end="219:58">(<argument pos:start="219:33" pos:end="219:33"><expr pos:start="219:33" pos:end="219:33"><name pos:start="219:33" pos:end="219:33">h</name></expr></argument>, <argument pos:start="219:36" pos:end="219:42"><expr pos:start="219:36" pos:end="219:42"><name pos:start="219:36" pos:end="219:42"><name pos:start="219:36" pos:end="219:36">h</name><operator pos:start="219:37" pos:end="219:38">-&gt;</operator><name pos:start="219:39" pos:end="219:42">mmco</name></name></expr></argument>, <argument pos:start="219:45" pos:end="219:57"><expr pos:start="219:45" pos:end="219:57"><name pos:start="219:45" pos:end="219:57"><name pos:start="219:45" pos:end="219:45">h</name><operator pos:start="219:46" pos:end="219:47">-&gt;</operator><name pos:start="219:48" pos:end="219:57">mmco_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="221:5" pos:end="223:33">else<block type="pseudo" pos:start="223:9" pos:end="223:33"><block_content pos:start="223:9" pos:end="223:33">

        <expr_stmt pos:start="223:9" pos:end="223:33"><expr pos:start="223:9" pos:end="223:32"><call pos:start="223:9" pos:end="223:32"><name pos:start="223:9" pos:end="223:14">assert</name><argument_list pos:start="223:15" pos:end="223:32">(<argument pos:start="223:16" pos:end="223:31"><expr pos:start="223:16" pos:end="223:31"><name pos:start="223:16" pos:end="223:28"><name pos:start="223:16" pos:end="223:16">h</name><operator pos:start="223:17" pos:end="223:18">-&gt;</operator><name pos:start="223:19" pos:end="223:28">mmco_index</name></name><operator pos:start="223:29" pos:end="223:30">==</operator><literal type="number" pos:start="223:31" pos:end="223:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:23"><expr pos:start="227:5" pos:end="227:22"><call pos:start="227:5" pos:end="227:22"><name pos:start="227:5" pos:end="227:19">ff_er_frame_end</name><argument_list pos:start="227:20" pos:end="227:22">(<argument pos:start="227:21" pos:end="227:21"><expr pos:start="227:21" pos:end="227:21"><name pos:start="227:21" pos:end="227:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="235:5"><if pos:start="231:5" pos:end="235:5">if<condition pos:start="231:7" pos:end="231:47">( <expr pos:start="231:9" pos:end="231:45"><name pos:start="231:9" pos:end="231:40"><name pos:start="231:9" pos:end="231:9">h</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:40">disable_deblocking_filter_idc</name></name> <operator pos:start="231:42" pos:end="231:43">!=</operator> <literal type="number" pos:start="231:45" pos:end="231:45">1</literal></expr> )</condition> <block pos:start="231:49" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:26">

        <expr_stmt pos:start="233:9" pos:end="233:26"><expr pos:start="233:9" pos:end="233:25"><call pos:start="233:9" pos:end="233:25"><name pos:start="233:9" pos:end="233:20">filter_frame</name><argument_list pos:start="233:21" pos:end="233:25">( <argument pos:start="233:23" pos:end="233:23"><expr pos:start="233:23" pos:end="233:23"><name pos:start="233:23" pos:end="233:23">h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:21"><expr pos:start="239:5" pos:end="239:20"><call pos:start="239:5" pos:end="239:20"><name pos:start="239:5" pos:end="239:17">MPV_frame_end</name><argument_list pos:start="239:18" pos:end="239:20">(<argument pos:start="239:19" pos:end="239:19"><expr pos:start="239:19" pos:end="239:19"><name pos:start="239:19" pos:end="239:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="243:5" pos:end="243:21">return <expr pos:start="243:12" pos:end="243:20"><name pos:start="243:12" pos:end="243:20">buf_index</name></expr>;</return>

</block_content>}</block></function>
</unit>
