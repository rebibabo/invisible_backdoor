<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6318.c" pos:tabs="8"><function pos:start="1:1" pos:end="1513:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adpcm_decode_frame</name><parameter_list pos:start="1:30" pos:end="5:44">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="1513:1">{<block_content pos:start="9:5" pos:end="1511:21">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">ADPCMDecodeContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">c</name> <init pos:start="13:27" pos:end="13:44">= <expr pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:44"><name pos:start="13:29" pos:end="13:33">avctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">ADPCMChannelStatus</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:26">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">n</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">m</name></decl>, <decl pos:start="17:15" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:21">channel</name></decl>, <decl pos:start="17:24" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:24" pos:end="17:24">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:23">block_predictor</name><index pos:start="19:24" pos:end="19:26">[<expr pos:start="19:25" pos:end="19:25"><literal type="number" pos:start="19:25" pos:end="19:25">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">short</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">short</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:22">samples_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:19"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:17">uint8_t</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:11"><decl pos:start="27:5" pos:end="27:10"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:10">st</name></decl>;</decl_stmt> <comment type="block" pos:start="27:13" pos:end="27:24">/* stereo */</comment>



    <comment type="block" pos:start="31:5" pos:end="31:40">/* DK3 ADPCM accounting variables */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:32"><decl pos:start="33:5" pos:end="33:31"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:12">unsigned</name> <name pos:start="33:14" pos:end="33:17">char</name></type> <name pos:start="33:19" pos:end="33:27">last_byte</name> <init pos:start="33:29" pos:end="33:31">= <expr pos:start="33:31" pos:end="33:31"><literal type="number" pos:start="33:31" pos:end="33:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:25"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:12">unsigned</name> <name pos:start="35:14" pos:end="35:17">char</name></type> <name pos:start="35:19" pos:end="35:24">nibble</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:35"><decl pos:start="37:5" pos:end="37:34"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:30">decode_top_nibble_next</name> <init pos:start="37:32" pos:end="37:34">= <expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:20">diff_channel</name></decl>;</decl_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:34">/* EA ADPCM state variables */</comment>

    <decl_stmt pos:start="45:5" pos:end="45:30"><decl pos:start="45:5" pos:end="45:29"><type pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:12">uint32_t</name></type> <name pos:start="45:14" pos:end="45:29">samples_in_chunk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:56"><decl pos:start="47:5" pos:end="47:32"><type pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:11">int32_t</name></type> <name pos:start="47:13" pos:end="47:32">previous_left_sample</name></decl>, <decl pos:start="47:35" pos:end="47:55"><type ref="prev" pos:start="47:5" pos:end="47:11"/><name pos:start="47:35" pos:end="47:55">previous_right_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:54"><decl pos:start="49:5" pos:end="49:31"><type pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:11">int32_t</name></type> <name pos:start="49:13" pos:end="49:31">current_left_sample</name></decl>, <decl pos:start="49:34" pos:end="49:53"><type ref="prev" pos:start="49:5" pos:end="49:11"/><name pos:start="49:34" pos:end="49:53">current_right_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:48"><decl pos:start="51:5" pos:end="51:28"><type pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:11">int32_t</name></type> <name pos:start="51:13" pos:end="51:28">next_left_sample</name></decl>, <decl pos:start="51:31" pos:end="51:47"><type ref="prev" pos:start="51:5" pos:end="51:11"/><name pos:start="51:31" pos:end="51:47">next_right_sample</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:47"><decl pos:start="53:5" pos:end="53:19"><type pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:11">int32_t</name></type> <name pos:start="53:13" pos:end="53:19">coeff1l</name></decl>, <decl pos:start="53:22" pos:end="53:28"><type ref="prev" pos:start="53:5" pos:end="53:11"/><name pos:start="53:22" pos:end="53:28">coeff2l</name></decl>, <decl pos:start="53:31" pos:end="53:37"><type ref="prev" pos:start="53:5" pos:end="53:11"/><name pos:start="53:31" pos:end="53:37">coeff1r</name></decl>, <decl pos:start="53:40" pos:end="53:46"><type ref="prev" pos:start="53:5" pos:end="53:11"/><name pos:start="53:40" pos:end="53:46">coeff2r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:36"><decl pos:start="55:5" pos:end="55:22"><type pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:11">uint8_t</name></type> <name pos:start="55:13" pos:end="55:22">shift_left</name></decl>, <decl pos:start="55:25" pos:end="55:35"><type ref="prev" pos:start="55:5" pos:end="55:11"/><name pos:start="55:25" pos:end="55:35">shift_right</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:23"><decl pos:start="57:5" pos:end="57:14"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:14">count1</name></decl>, <decl pos:start="57:17" pos:end="57:22"><type ref="prev" pos:start="57:5" pos:end="57:7"/><name pos:start="57:17" pos:end="57:22">count2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:30"><decl pos:start="59:5" pos:end="59:19"><type pos:start="59:5" pos:end="59:7"><name pos:start="59:5" pos:end="59:7">int</name></type> <name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:13">coeff</name><index pos:start="59:14" pos:end="59:16">[<expr pos:start="59:15" pos:end="59:15"><literal type="number" pos:start="59:15" pos:end="59:15">2</literal></expr>]</index><index pos:start="59:17" pos:end="59:19">[<expr pos:start="59:18" pos:end="59:18"><literal type="number" pos:start="59:18" pos:end="59:18">2</literal></expr>]</index></name></decl>, <decl pos:start="59:22" pos:end="59:29"><type ref="prev" pos:start="59:5" pos:end="59:7"/><name pos:start="59:22" pos:end="59:29"><name pos:start="59:22" pos:end="59:26">shift</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">2</literal></expr>]</index></name></decl>;</decl_stmt><comment type="line" pos:start="59:31" pos:end="59:54">//used in EA MAXIS ADPCM</comment>



    <if_stmt pos:start="63:5" pos:end="65:17"><if pos:start="63:5" pos:end="65:17">if <condition pos:start="63:8" pos:end="63:18">(<expr pos:start="63:9" pos:end="63:17"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:17"><block_content pos:start="65:9" pos:end="65:17">

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="69:5" pos:end="69:44">//should protect all 4bit ADPCM variants</comment>

    <comment type="line" pos:start="71:5" pos:end="71:60">//8 is needed for CODEC_ID_ADPCM_IMA_WAV with 2 channels</comment>

    <comment type="line" pos:start="73:5" pos:end="73:6">//</comment>

    <if_stmt pos:start="75:5" pos:end="77:18"><if pos:start="75:5" pos:end="77:18">if<condition pos:start="75:7" pos:end="75:35">(<expr pos:start="75:8" pos:end="75:34"><operator pos:start="75:8" pos:end="75:8">*</operator><name pos:start="75:9" pos:end="75:17">data_size</name><operator pos:start="75:18" pos:end="75:18">/</operator><literal type="number" pos:start="75:19" pos:end="75:19">4</literal> <operator pos:start="75:21" pos:end="75:21">&lt;</operator> <name pos:start="75:23" pos:end="75:30">buf_size</name> <operator pos:start="75:32" pos:end="75:32">+</operator> <literal type="number" pos:start="75:34" pos:end="75:34">8</literal></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:18"><block_content pos:start="77:9" pos:end="77:18">

        <return pos:start="77:9" pos:end="77:18">return <expr pos:start="77:16" pos:end="77:17"><operator pos:start="77:16" pos:end="77:16">-</operator><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:19"><expr pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:11">samples</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:18">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:40"><expr pos:start="83:5" pos:end="83:39"><name pos:start="83:5" pos:end="83:15">samples_end</name><operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:24">samples</name> <operator pos:start="83:26" pos:end="83:26">+</operator> <operator pos:start="83:28" pos:end="83:28">*</operator><name pos:start="83:29" pos:end="83:37">data_size</name><operator pos:start="83:38" pos:end="83:38">/</operator><literal type="number" pos:start="83:39" pos:end="83:39">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:18"><expr pos:start="85:5" pos:end="85:17"><operator pos:start="85:5" pos:end="85:5">*</operator><name pos:start="85:6" pos:end="85:14">data_size</name><operator pos:start="85:15" pos:end="85:15">=</operator> <literal type="number" pos:start="85:17" pos:end="85:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:14"><expr pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:7">src</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <name pos:start="87:11" pos:end="87:13">buf</name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:6">st</name> <operator pos:start="91:8" pos:end="91:8">=</operator> <ternary pos:start="91:10" pos:end="91:37"><condition pos:start="91:10" pos:end="91:31"><expr pos:start="91:10" pos:end="91:29"><name pos:start="91:10" pos:end="91:24"><name pos:start="91:10" pos:end="91:14">avctx</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:24">channels</name></name> <operator pos:start="91:26" pos:end="91:27">==</operator> <literal type="number" pos:start="91:29" pos:end="91:29">2</literal></expr> ?</condition><then pos:start="91:33" pos:end="91:33"> <expr pos:start="91:33" pos:end="91:33"><literal type="number" pos:start="91:33" pos:end="91:33">1</literal></expr> </then><else pos:start="91:35" pos:end="91:37">: <expr pos:start="91:37" pos:end="91:37"><literal type="number" pos:start="91:37" pos:end="91:37">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <switch pos:start="95:5" pos:end="1507:5">switch<condition pos:start="95:11" pos:end="95:28">(<expr pos:start="95:12" pos:end="95:27"><name pos:start="95:12" pos:end="95:27"><name pos:start="95:12" pos:end="95:16">avctx</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:23">codec</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:27">id</name></name></expr>)</condition> <block pos:start="95:30" pos:end="1507:5">{<block_content pos:start="97:5" pos:end="1505:18">

    <case pos:start="97:5" pos:end="97:31">case <expr pos:start="97:10" pos:end="97:30"><name pos:start="97:10" pos:end="97:30">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:9">n</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:20">buf_size</name> <operator pos:start="99:22" pos:end="99:22">-</operator> <literal type="number" pos:start="99:24" pos:end="99:24">2</literal><operator pos:start="99:25" pos:end="99:25">*</operator><name pos:start="99:26" pos:end="99:40"><name pos:start="99:26" pos:end="99:30">avctx</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:40">channels</name></name></expr>;</expr_stmt>

        <for pos:start="101:9" pos:end="179:9">for <control pos:start="101:13" pos:end="101:63">(<init pos:start="101:14" pos:end="101:25"><expr pos:start="101:14" pos:end="101:24"><name pos:start="101:14" pos:end="101:20">channel</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <literal type="number" pos:start="101:24" pos:end="101:24">0</literal></expr>;</init> <condition pos:start="101:27" pos:end="101:52"><expr pos:start="101:27" pos:end="101:51"><name pos:start="101:27" pos:end="101:33">channel</name> <operator pos:start="101:35" pos:end="101:35">&lt;</operator> <name pos:start="101:37" pos:end="101:51"><name pos:start="101:37" pos:end="101:41">avctx</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:51">channels</name></name></expr>;</condition> <incr pos:start="101:54" pos:end="101:62"><expr pos:start="101:54" pos:end="101:62"><name pos:start="101:54" pos:end="101:60">channel</name><operator pos:start="101:61" pos:end="101:62">++</operator></expr></incr>)</control> <block pos:start="101:65" pos:end="179:9">{<block_content pos:start="103:13" pos:end="177:13">

            <decl_stmt pos:start="103:13" pos:end="103:30"><decl pos:start="103:13" pos:end="103:29"><type pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:19">int16_t</name></type> <name pos:start="103:21" pos:end="103:29">predictor</name></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:27"><decl pos:start="105:13" pos:end="105:26"><type pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">int</name></type> <name pos:start="105:17" pos:end="105:26">step_index</name></decl>;</decl_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:39"><expr pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:14">cs</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <operator pos:start="107:18" pos:end="107:18">&amp;</operator><operator pos:start="107:19" pos:end="107:19">(</operator><name pos:start="107:20" pos:end="107:37"><name pos:start="107:20" pos:end="107:20">c</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:28">status</name><index pos:start="107:29" pos:end="107:37">[<expr pos:start="107:30" pos:end="107:36"><name pos:start="107:30" pos:end="107:36">channel</name></expr>]</index></name><operator pos:start="107:38" pos:end="107:38">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="109:13" pos:end="109:37">/* (pppppp) (piiiiiii) */</comment>



            <comment type="block" pos:start="113:13" pos:end="113:86">/* Bits 15-7 are the _top_ 9 bits of the 16-bit initial predictor value */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:21">predictor</name> <operator pos:start="115:23" pos:end="115:23">=</operator> <call pos:start="115:25" pos:end="115:36"><name pos:start="115:25" pos:end="115:31">AV_RB16</name><argument_list pos:start="115:32" pos:end="115:36">(<argument pos:start="115:33" pos:end="115:35"><expr pos:start="115:33" pos:end="115:35"><name pos:start="115:33" pos:end="115:35">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:42"><expr pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:22">step_index</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:34">predictor</name> <operator pos:start="117:36" pos:end="117:36">&amp;</operator> <literal type="number" pos:start="117:38" pos:end="117:41">0x7F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:32"><expr pos:start="119:13" pos:end="119:31"><name pos:start="119:13" pos:end="119:21">predictor</name> <operator pos:start="119:23" pos:end="119:24">&amp;=</operator> <literal type="number" pos:start="119:26" pos:end="119:31">0xFF80</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:21"><expr pos:start="123:13" pos:end="123:20"><name pos:start="123:13" pos:end="123:15">src</name> <operator pos:start="123:17" pos:end="123:18">+=</operator> <literal type="number" pos:start="123:20" pos:end="123:20">2</literal></expr>;</expr_stmt>



            <if_stmt pos:start="127:13" pos:end="147:13"><if pos:start="127:13" pos:end="139:13">if <condition pos:start="127:16" pos:end="127:45">(<expr pos:start="127:17" pos:end="127:44"><name pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:18">cs</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:30">step_index</name></name> <operator pos:start="127:32" pos:end="127:33">==</operator> <name pos:start="127:35" pos:end="127:44">step_index</name></expr>)</condition> <block pos:start="127:47" pos:end="139:13">{<block_content pos:start="129:17" pos:end="137:32">

                <decl_stmt pos:start="129:17" pos:end="129:58"><decl pos:start="129:17" pos:end="129:57"><type pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">int</name></type> <name pos:start="129:21" pos:end="129:24">diff</name> <init pos:start="129:26" pos:end="129:57">= <expr pos:start="129:28" pos:end="129:57"><operator pos:start="129:28" pos:end="129:28">(</operator><name pos:start="129:29" pos:end="129:31">int</name><operator pos:start="129:32" pos:end="129:32">)</operator><name pos:start="129:33" pos:end="129:41">predictor</name> <operator pos:start="129:43" pos:end="129:43">-</operator> <name pos:start="129:45" pos:end="129:57"><name pos:start="129:45" pos:end="129:46">cs</name><operator pos:start="129:47" pos:end="129:48">-&gt;</operator><name pos:start="129:49" pos:end="129:57">predictor</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="131:17" pos:end="133:34"><if pos:start="131:17" pos:end="133:34">if <condition pos:start="131:20" pos:end="131:29">(<expr pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:24">diff</name> <operator pos:start="131:26" pos:end="131:26">&lt;</operator> <literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>)</condition><block type="pseudo" pos:start="133:21" pos:end="133:34"><block_content pos:start="133:21" pos:end="133:34">

                    <expr_stmt pos:start="133:21" pos:end="133:34"><expr pos:start="133:21" pos:end="133:33"><name pos:start="133:21" pos:end="133:24">diff</name> <operator pos:start="133:26" pos:end="133:26">=</operator> <operator pos:start="133:28" pos:end="133:28">-</operator> <name pos:start="133:30" pos:end="133:33">diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="135:17" pos:end="137:32"><if pos:start="135:17" pos:end="137:32">if <condition pos:start="135:20" pos:end="135:32">(<expr pos:start="135:21" pos:end="135:31"><name pos:start="135:21" pos:end="135:24">diff</name> <operator pos:start="135:26" pos:end="135:26">&gt;</operator> <literal type="number" pos:start="135:28" pos:end="135:31">0x7f</literal></expr>)</condition><block type="pseudo" pos:start="137:21" pos:end="137:32"><block_content pos:start="137:21" pos:end="137:32">

                    <goto pos:start="137:21" pos:end="137:32">goto <name pos:start="137:26" pos:end="137:31">update</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="139:15" pos:end="147:13">else <block pos:start="139:20" pos:end="147:13">{<block_content pos:start="141:13" pos:end="145:42">

            <label pos:start="141:13" pos:end="141:19"><name pos:start="141:13" pos:end="141:18">update</name>:</label>

                <expr_stmt pos:start="143:17" pos:end="143:44"><expr pos:start="143:17" pos:end="143:43"><name pos:start="143:17" pos:end="143:30"><name pos:start="143:17" pos:end="143:18">cs</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:30">step_index</name></name> <operator pos:start="143:32" pos:end="143:32">=</operator> <name pos:start="143:34" pos:end="143:43">step_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:42"><expr pos:start="145:17" pos:end="145:41"><name pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:18">cs</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:29">predictor</name></name> <operator pos:start="145:31" pos:end="145:31">=</operator> <name pos:start="145:33" pos:end="145:41">predictor</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="151:13" pos:end="157:13"><if pos:start="151:13" pos:end="157:13">if <condition pos:start="151:16" pos:end="151:36">(<expr pos:start="151:17" pos:end="151:35"><name pos:start="151:17" pos:end="151:30"><name pos:start="151:17" pos:end="151:18">cs</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:30">step_index</name></name> <operator pos:start="151:32" pos:end="151:32">&gt;</operator> <literal type="number" pos:start="151:34" pos:end="151:35">88</literal></expr>)</condition><block pos:start="151:37" pos:end="157:13">{<block_content pos:start="153:17" pos:end="155:36">

                <expr_stmt pos:start="153:17" pos:end="153:88"><expr pos:start="153:17" pos:end="153:87"><call pos:start="153:17" pos:end="153:87"><name pos:start="153:17" pos:end="153:22">av_log</name><argument_list pos:start="153:23" pos:end="153:87">(<argument pos:start="153:24" pos:end="153:28"><expr pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:28">avctx</name></expr></argument>, <argument pos:start="153:31" pos:end="153:42"><expr pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:45" pos:end="153:70"><expr pos:start="153:45" pos:end="153:70"><literal type="string" pos:start="153:45" pos:end="153:70">"ERROR: step_index = %i\n"</literal></expr></argument>, <argument pos:start="153:73" pos:end="153:86"><expr pos:start="153:73" pos:end="153:86"><name pos:start="153:73" pos:end="153:86"><name pos:start="153:73" pos:end="153:74">cs</name><operator pos:start="153:75" pos:end="153:76">-&gt;</operator><name pos:start="153:77" pos:end="153:86">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:36"><expr pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:30"><name pos:start="155:17" pos:end="155:18">cs</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:30">step_index</name></name> <operator pos:start="155:32" pos:end="155:32">=</operator> <literal type="number" pos:start="155:34" pos:end="155:35">88</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="161:13" pos:end="161:45"><expr pos:start="161:13" pos:end="161:44"><name pos:start="161:13" pos:end="161:19">samples</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <operator pos:start="161:23" pos:end="161:23">(</operator><name pos:start="161:24" pos:end="161:28">short</name><operator pos:start="161:29" pos:end="161:29">*</operator><operator pos:start="161:30" pos:end="161:30">)</operator><name pos:start="161:31" pos:end="161:34">data</name> <operator pos:start="161:36" pos:end="161:36">+</operator> <name pos:start="161:38" pos:end="161:44">channel</name></expr>;</expr_stmt>



            <for pos:start="165:13" pos:end="177:13">for<control pos:start="165:16" pos:end="165:43">(<init pos:start="165:17" pos:end="165:21"><expr pos:start="165:17" pos:end="165:20"><name pos:start="165:17" pos:end="165:17">m</name><operator pos:start="165:18" pos:end="165:18">=</operator><literal type="number" pos:start="165:19" pos:end="165:20">32</literal></expr>;</init> <condition pos:start="165:23" pos:end="165:33"><expr pos:start="165:23" pos:end="165:32"><name pos:start="165:23" pos:end="165:23">n</name><operator pos:start="165:24" pos:end="165:24">&gt;</operator><literal type="number" pos:start="165:25" pos:end="165:25">0</literal> <operator pos:start="165:27" pos:end="165:28">&amp;&amp;</operator> <name pos:start="165:30" pos:end="165:30">m</name><operator pos:start="165:31" pos:end="165:31">&gt;</operator><literal type="number" pos:start="165:32" pos:end="165:32">0</literal></expr>;</condition> <incr pos:start="165:35" pos:end="165:42"><expr pos:start="165:35" pos:end="165:37"><name pos:start="165:35" pos:end="165:35">n</name><operator pos:start="165:36" pos:end="165:37">--</operator></expr><operator pos:start="165:38" pos:end="165:38">,</operator> <expr pos:start="165:40" pos:end="165:42"><name pos:start="165:40" pos:end="165:40">m</name><operator pos:start="165:41" pos:end="165:42">--</operator></expr></incr>)</control> <block pos:start="165:45" pos:end="177:13">{<block_content pos:start="167:17" pos:end="175:23"> <comment type="block" pos:start="165:47" pos:end="165:117">/* in QuickTime, IMA is encoded by chuncks of 34 bytes (=64 samples) */</comment>

                <expr_stmt pos:start="167:17" pos:end="167:76"><expr pos:start="167:17" pos:end="167:75"><operator pos:start="167:17" pos:end="167:17">*</operator><name pos:start="167:18" pos:end="167:24">samples</name> <operator pos:start="167:26" pos:end="167:26">=</operator> <call pos:start="167:28" pos:end="167:75"><name pos:start="167:28" pos:end="167:53">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="167:54" pos:end="167:75">(<argument pos:start="167:55" pos:end="167:56"><expr pos:start="167:55" pos:end="167:56"><name pos:start="167:55" pos:end="167:56">cs</name></expr></argument>, <argument pos:start="167:59" pos:end="167:71"><expr pos:start="167:59" pos:end="167:71"><name pos:start="167:59" pos:end="167:64"><name pos:start="167:59" pos:end="167:61">src</name><index pos:start="167:62" pos:end="167:64">[<expr pos:start="167:63" pos:end="167:63"><literal type="number" pos:start="167:63" pos:end="167:63">0</literal></expr>]</index></name> <operator pos:start="167:66" pos:end="167:66">&amp;</operator> <literal type="number" pos:start="167:68" pos:end="167:71">0x0F</literal></expr></argument>, <argument pos:start="167:74" pos:end="167:74"><expr pos:start="167:74" pos:end="167:74"><literal type="number" pos:start="167:74" pos:end="167:74">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:43"><expr pos:start="169:17" pos:end="169:42"><name pos:start="169:17" pos:end="169:23">samples</name> <operator pos:start="169:25" pos:end="169:26">+=</operator> <name pos:start="169:28" pos:end="169:42"><name pos:start="169:28" pos:end="169:32">avctx</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:42">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:76"><expr pos:start="171:17" pos:end="171:75"><operator pos:start="171:17" pos:end="171:17">*</operator><name pos:start="171:18" pos:end="171:24">samples</name> <operator pos:start="171:26" pos:end="171:26">=</operator> <call pos:start="171:28" pos:end="171:75"><name pos:start="171:28" pos:end="171:53">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="171:54" pos:end="171:75">(<argument pos:start="171:55" pos:end="171:56"><expr pos:start="171:55" pos:end="171:56"><name pos:start="171:55" pos:end="171:56">cs</name></expr></argument>, <argument pos:start="171:59" pos:end="171:69"><expr pos:start="171:59" pos:end="171:69"><name pos:start="171:59" pos:end="171:64"><name pos:start="171:59" pos:end="171:61">src</name><index pos:start="171:62" pos:end="171:64">[<expr pos:start="171:63" pos:end="171:63"><literal type="number" pos:start="171:63" pos:end="171:63">0</literal></expr>]</index></name> <operator pos:start="171:66" pos:end="171:67">&gt;&gt;</operator> <literal type="number" pos:start="171:69" pos:end="171:69">4</literal></expr></argument>  , <argument pos:start="171:74" pos:end="171:74"><expr pos:start="171:74" pos:end="171:74"><literal type="number" pos:start="171:74" pos:end="171:74">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:43"><expr pos:start="173:17" pos:end="173:42"><name pos:start="173:17" pos:end="173:23">samples</name> <operator pos:start="173:25" pos:end="173:26">+=</operator> <name pos:start="173:28" pos:end="173:42"><name pos:start="173:28" pos:end="173:32">avctx</name><operator pos:start="173:33" pos:end="173:34">-&gt;</operator><name pos:start="173:35" pos:end="173:42">channels</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:23"><expr pos:start="175:17" pos:end="175:22"><name pos:start="175:17" pos:end="175:19">src</name> <operator pos:start="175:21" pos:end="175:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <if_stmt pos:start="181:9" pos:end="183:22"><if pos:start="181:9" pos:end="183:22">if <condition pos:start="181:12" pos:end="181:15">(<expr pos:start="181:13" pos:end="181:14"><name pos:start="181:13" pos:end="181:14">st</name></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:22"><block_content pos:start="183:13" pos:end="183:22">

            <expr_stmt pos:start="183:13" pos:end="183:22"><expr pos:start="183:13" pos:end="183:21"><name pos:start="183:13" pos:end="183:19">samples</name><operator pos:start="183:20" pos:end="183:21">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    <case pos:start="187:5" pos:end="187:32">case <expr pos:start="187:10" pos:end="187:31"><name pos:start="187:10" pos:end="187:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <if_stmt pos:start="189:9" pos:end="191:42"><if pos:start="189:9" pos:end="191:42">if <condition pos:start="189:12" pos:end="189:69">(<expr pos:start="189:13" pos:end="189:68"><name pos:start="189:13" pos:end="189:30"><name pos:start="189:13" pos:end="189:17">avctx</name><operator pos:start="189:18" pos:end="189:19">-&gt;</operator><name pos:start="189:20" pos:end="189:30">block_align</name></name> <operator pos:start="189:32" pos:end="189:33">!=</operator> <literal type="number" pos:start="189:35" pos:end="189:35">0</literal> <operator pos:start="189:37" pos:end="189:38">&amp;&amp;</operator> <name pos:start="189:40" pos:end="189:47">buf_size</name> <operator pos:start="189:49" pos:end="189:49">&gt;</operator> <name pos:start="189:51" pos:end="189:68"><name pos:start="189:51" pos:end="189:55">avctx</name><operator pos:start="189:56" pos:end="189:57">-&gt;</operator><name pos:start="189:58" pos:end="189:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:42"><block_content pos:start="191:13" pos:end="191:42">

            <expr_stmt pos:start="191:13" pos:end="191:42"><expr pos:start="191:13" pos:end="191:41"><name pos:start="191:13" pos:end="191:20">buf_size</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <name pos:start="191:24" pos:end="191:41"><name pos:start="191:24" pos:end="191:28">avctx</name><operator pos:start="191:29" pos:end="191:30">-&gt;</operator><name pos:start="191:31" pos:end="191:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<comment type="line" pos:start="195:1" pos:end="195:89">//        samples_per_block= (block_align-4*chanels)*8 / (bits_per_sample * chanels) + 1;</comment>



        <for pos:start="199:9" pos:end="219:9">for<control pos:start="199:12" pos:end="199:40">(<init pos:start="199:13" pos:end="199:16"><expr pos:start="199:13" pos:end="199:15"><name pos:start="199:13" pos:end="199:13">i</name><operator pos:start="199:14" pos:end="199:14">=</operator><literal type="number" pos:start="199:15" pos:end="199:15">0</literal></expr>;</init> <condition pos:start="199:18" pos:end="199:35"><expr pos:start="199:18" pos:end="199:34"><name pos:start="199:18" pos:end="199:18">i</name><operator pos:start="199:19" pos:end="199:19">&lt;</operator><name pos:start="199:20" pos:end="199:34"><name pos:start="199:20" pos:end="199:24">avctx</name><operator pos:start="199:25" pos:end="199:26">-&gt;</operator><name pos:start="199:27" pos:end="199:34">channels</name></name></expr>;</condition> <incr pos:start="199:37" pos:end="199:39"><expr pos:start="199:37" pos:end="199:39"><name pos:start="199:37" pos:end="199:37">i</name><operator pos:start="199:38" pos:end="199:39">++</operator></expr></incr>)</control><block pos:start="199:41" pos:end="219:9">{<block_content pos:start="201:13" pos:end="217:105">

            <expr_stmt pos:start="201:13" pos:end="201:33"><expr pos:start="201:13" pos:end="201:32"><name pos:start="201:13" pos:end="201:14">cs</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <operator pos:start="201:18" pos:end="201:18">&amp;</operator><operator pos:start="201:19" pos:end="201:19">(</operator><name pos:start="201:20" pos:end="201:31"><name pos:start="201:20" pos:end="201:20">c</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:28">status</name><index pos:start="201:29" pos:end="201:31">[<expr pos:start="201:30" pos:end="201:30"><name pos:start="201:30" pos:end="201:30">i</name></expr>]</index></name><operator pos:start="201:32" pos:end="201:32">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:76"><expr pos:start="203:13" pos:end="203:75"><name pos:start="203:13" pos:end="203:25"><name pos:start="203:13" pos:end="203:14">cs</name><operator pos:start="203:15" pos:end="203:16">-&gt;</operator><name pos:start="203:17" pos:end="203:25">predictor</name></name> <operator pos:start="203:27" pos:end="203:27">=</operator> <operator pos:start="203:29" pos:end="203:29">*</operator><name pos:start="203:30" pos:end="203:36">samples</name><operator pos:start="203:37" pos:end="203:38">++</operator> <operator pos:start="203:40" pos:end="203:40">=</operator> <operator pos:start="203:42" pos:end="203:42">(</operator><name pos:start="203:43" pos:end="203:49">int16_t</name><operator pos:start="203:50" pos:end="203:50">)</operator><call pos:start="203:51" pos:end="203:75"><name pos:start="203:51" pos:end="203:69">bytestream_get_le16</name><argument_list pos:start="203:70" pos:end="203:75">(<argument pos:start="203:71" pos:end="203:74"><expr pos:start="203:71" pos:end="203:74"><operator pos:start="203:71" pos:end="203:71">&amp;</operator><name pos:start="203:72" pos:end="203:74">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:36"><expr pos:start="207:13" pos:end="207:35"><name pos:start="207:13" pos:end="207:26"><name pos:start="207:13" pos:end="207:14">cs</name><operator pos:start="207:15" pos:end="207:16">-&gt;</operator><name pos:start="207:17" pos:end="207:26">step_index</name></name> <operator pos:start="207:28" pos:end="207:28">=</operator> <operator pos:start="207:30" pos:end="207:30">*</operator><name pos:start="207:31" pos:end="207:33">src</name><operator pos:start="207:34" pos:end="207:35">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="215:13"><if pos:start="209:13" pos:end="215:13">if <condition pos:start="209:16" pos:end="209:36">(<expr pos:start="209:17" pos:end="209:35"><name pos:start="209:17" pos:end="209:30"><name pos:start="209:17" pos:end="209:18">cs</name><operator pos:start="209:19" pos:end="209:20">-&gt;</operator><name pos:start="209:21" pos:end="209:30">step_index</name></name> <operator pos:start="209:32" pos:end="209:32">&gt;</operator> <literal type="number" pos:start="209:34" pos:end="209:35">88</literal></expr>)</condition><block pos:start="209:37" pos:end="215:13">{<block_content pos:start="211:17" pos:end="213:36">

                <expr_stmt pos:start="211:17" pos:end="211:88"><expr pos:start="211:17" pos:end="211:87"><call pos:start="211:17" pos:end="211:87"><name pos:start="211:17" pos:end="211:22">av_log</name><argument_list pos:start="211:23" pos:end="211:87">(<argument pos:start="211:24" pos:end="211:28"><expr pos:start="211:24" pos:end="211:28"><name pos:start="211:24" pos:end="211:28">avctx</name></expr></argument>, <argument pos:start="211:31" pos:end="211:42"><expr pos:start="211:31" pos:end="211:42"><name pos:start="211:31" pos:end="211:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:45" pos:end="211:70"><expr pos:start="211:45" pos:end="211:70"><literal type="string" pos:start="211:45" pos:end="211:70">"ERROR: step_index = %i\n"</literal></expr></argument>, <argument pos:start="211:73" pos:end="211:86"><expr pos:start="211:73" pos:end="211:86"><name pos:start="211:73" pos:end="211:86"><name pos:start="211:73" pos:end="211:74">cs</name><operator pos:start="211:75" pos:end="211:76">-&gt;</operator><name pos:start="211:77" pos:end="211:86">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:36"><expr pos:start="213:17" pos:end="213:35"><name pos:start="213:17" pos:end="213:30"><name pos:start="213:17" pos:end="213:18">cs</name><operator pos:start="213:19" pos:end="213:20">-&gt;</operator><name pos:start="213:21" pos:end="213:30">step_index</name></name> <operator pos:start="213:32" pos:end="213:32">=</operator> <literal type="number" pos:start="213:34" pos:end="213:35">88</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="217:13" pos:end="217:105"><if pos:start="217:13" pos:end="217:105">if <condition pos:start="217:16" pos:end="217:23">(<expr pos:start="217:17" pos:end="217:22"><operator pos:start="217:17" pos:end="217:17">*</operator><name pos:start="217:18" pos:end="217:20">src</name><operator pos:start="217:21" pos:end="217:22">++</operator></expr>)</condition><block type="pseudo" pos:start="217:25" pos:end="217:105"><block_content pos:start="217:25" pos:end="217:105"> <expr_stmt pos:start="217:25" pos:end="217:105"><expr pos:start="217:25" pos:end="217:104"><call pos:start="217:25" pos:end="217:104"><name pos:start="217:25" pos:end="217:30">av_log</name><argument_list pos:start="217:31" pos:end="217:104">(<argument pos:start="217:32" pos:end="217:36"><expr pos:start="217:32" pos:end="217:36"><name pos:start="217:32" pos:end="217:36">avctx</name></expr></argument>, <argument pos:start="217:39" pos:end="217:50"><expr pos:start="217:39" pos:end="217:50"><name pos:start="217:39" pos:end="217:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:53" pos:end="217:94"><expr pos:start="217:53" pos:end="217:94"><literal type="string" pos:start="217:53" pos:end="217:94">"unused byte should be null but is %d!!\n"</literal></expr></argument>, <argument pos:start="217:97" pos:end="217:103"><expr pos:start="217:97" pos:end="217:103"><name pos:start="217:97" pos:end="217:103"><name pos:start="217:97" pos:end="217:99">src</name><index pos:start="217:100" pos:end="217:103">[<expr pos:start="217:101" pos:end="217:102"><operator pos:start="217:101" pos:end="217:101">-</operator><literal type="number" pos:start="217:102" pos:end="217:102">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="217:107" pos:end="217:118">/* unused */</comment>

        </block_content>}</block></for>



        <while pos:start="223:9" pos:end="241:9">while<condition pos:start="223:14" pos:end="223:35">(<expr pos:start="223:15" pos:end="223:34"><name pos:start="223:15" pos:end="223:17">src</name> <operator pos:start="223:19" pos:end="223:19">&lt;</operator> <name pos:start="223:21" pos:end="223:23">buf</name> <operator pos:start="223:25" pos:end="223:25">+</operator> <name pos:start="223:27" pos:end="223:34">buf_size</name></expr>)</condition><block pos:start="223:36" pos:end="241:9">{<block_content pos:start="225:13" pos:end="239:24">

            <for pos:start="225:13" pos:end="237:13">for<control pos:start="225:16" pos:end="225:30">(<init pos:start="225:17" pos:end="225:20"><expr pos:start="225:17" pos:end="225:19"><name pos:start="225:17" pos:end="225:17">m</name><operator pos:start="225:18" pos:end="225:18">=</operator><literal type="number" pos:start="225:19" pos:end="225:19">0</literal></expr>;</init> <condition pos:start="225:22" pos:end="225:25"><expr pos:start="225:22" pos:end="225:24"><name pos:start="225:22" pos:end="225:22">m</name><operator pos:start="225:23" pos:end="225:23">&lt;</operator><literal type="number" pos:start="225:24" pos:end="225:24">4</literal></expr>;</condition> <incr pos:start="225:27" pos:end="225:29"><expr pos:start="225:27" pos:end="225:29"><name pos:start="225:27" pos:end="225:27">m</name><operator pos:start="225:28" pos:end="225:29">++</operator></expr></incr>)</control><block pos:start="225:31" pos:end="237:13">{<block_content pos:start="227:17" pos:end="235:22">

                <for pos:start="227:17" pos:end="229:92">for<control pos:start="227:20" pos:end="227:36">(<init pos:start="227:21" pos:end="227:24"><expr pos:start="227:21" pos:end="227:23"><name pos:start="227:21" pos:end="227:21">i</name><operator pos:start="227:22" pos:end="227:22">=</operator><literal type="number" pos:start="227:23" pos:end="227:23">0</literal></expr>;</init> <condition pos:start="227:26" pos:end="227:31"><expr pos:start="227:26" pos:end="227:30"><name pos:start="227:26" pos:end="227:26">i</name><operator pos:start="227:27" pos:end="227:28">&lt;=</operator><name pos:start="227:29" pos:end="227:30">st</name></expr>;</condition> <incr pos:start="227:33" pos:end="227:35"><expr pos:start="227:33" pos:end="227:35"><name pos:start="227:33" pos:end="227:33">i</name><operator pos:start="227:34" pos:end="227:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="229:21" pos:end="229:92"><block_content pos:start="229:21" pos:end="229:92">

                    <expr_stmt pos:start="229:21" pos:end="229:92"><expr pos:start="229:21" pos:end="229:91"><operator pos:start="229:21" pos:end="229:21">*</operator><name pos:start="229:22" pos:end="229:28">samples</name><operator pos:start="229:29" pos:end="229:30">++</operator> <operator pos:start="229:32" pos:end="229:32">=</operator> <call pos:start="229:34" pos:end="229:91"><name pos:start="229:34" pos:end="229:56">adpcm_ima_expand_nibble</name><argument_list pos:start="229:57" pos:end="229:91">(<argument pos:start="229:58" pos:end="229:70"><expr pos:start="229:58" pos:end="229:70"><operator pos:start="229:58" pos:end="229:58">&amp;</operator><name pos:start="229:59" pos:end="229:70"><name pos:start="229:59" pos:end="229:59">c</name><operator pos:start="229:60" pos:end="229:61">-&gt;</operator><name pos:start="229:62" pos:end="229:67">status</name><index pos:start="229:68" pos:end="229:70">[<expr pos:start="229:69" pos:end="229:69"><name pos:start="229:69" pos:end="229:69">i</name></expr>]</index></name></expr></argument>, <argument pos:start="229:73" pos:end="229:87"><expr pos:start="229:73" pos:end="229:87"><name pos:start="229:73" pos:end="229:80"><name pos:start="229:73" pos:end="229:75">src</name><index pos:start="229:76" pos:end="229:80">[<expr pos:start="229:77" pos:end="229:79"><literal type="number" pos:start="229:77" pos:end="229:77">4</literal><operator pos:start="229:78" pos:end="229:78">*</operator><name pos:start="229:79" pos:end="229:79">i</name></expr>]</index></name> <operator pos:start="229:82" pos:end="229:82">&amp;</operator> <literal type="number" pos:start="229:84" pos:end="229:87">0x0F</literal></expr></argument>, <argument pos:start="229:90" pos:end="229:90"><expr pos:start="229:90" pos:end="229:90"><literal type="number" pos:start="229:90" pos:end="229:90">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <for pos:start="231:17" pos:end="233:92">for<control pos:start="231:20" pos:end="231:36">(<init pos:start="231:21" pos:end="231:24"><expr pos:start="231:21" pos:end="231:23"><name pos:start="231:21" pos:end="231:21">i</name><operator pos:start="231:22" pos:end="231:22">=</operator><literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>;</init> <condition pos:start="231:26" pos:end="231:31"><expr pos:start="231:26" pos:end="231:30"><name pos:start="231:26" pos:end="231:26">i</name><operator pos:start="231:27" pos:end="231:28">&lt;=</operator><name pos:start="231:29" pos:end="231:30">st</name></expr>;</condition> <incr pos:start="231:33" pos:end="231:35"><expr pos:start="231:33" pos:end="231:35"><name pos:start="231:33" pos:end="231:33">i</name><operator pos:start="231:34" pos:end="231:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="233:21" pos:end="233:92"><block_content pos:start="233:21" pos:end="233:92">

                    <expr_stmt pos:start="233:21" pos:end="233:92"><expr pos:start="233:21" pos:end="233:91"><operator pos:start="233:21" pos:end="233:21">*</operator><name pos:start="233:22" pos:end="233:28">samples</name><operator pos:start="233:29" pos:end="233:30">++</operator> <operator pos:start="233:32" pos:end="233:32">=</operator> <call pos:start="233:34" pos:end="233:91"><name pos:start="233:34" pos:end="233:56">adpcm_ima_expand_nibble</name><argument_list pos:start="233:57" pos:end="233:91">(<argument pos:start="233:58" pos:end="233:70"><expr pos:start="233:58" pos:end="233:70"><operator pos:start="233:58" pos:end="233:58">&amp;</operator><name pos:start="233:59" pos:end="233:70"><name pos:start="233:59" pos:end="233:59">c</name><operator pos:start="233:60" pos:end="233:61">-&gt;</operator><name pos:start="233:62" pos:end="233:67">status</name><index pos:start="233:68" pos:end="233:70">[<expr pos:start="233:69" pos:end="233:69"><name pos:start="233:69" pos:end="233:69">i</name></expr>]</index></name></expr></argument>, <argument pos:start="233:73" pos:end="233:85"><expr pos:start="233:73" pos:end="233:85"><name pos:start="233:73" pos:end="233:80"><name pos:start="233:73" pos:end="233:75">src</name><index pos:start="233:76" pos:end="233:80">[<expr pos:start="233:77" pos:end="233:79"><literal type="number" pos:start="233:77" pos:end="233:77">4</literal><operator pos:start="233:78" pos:end="233:78">*</operator><name pos:start="233:79" pos:end="233:79">i</name></expr>]</index></name> <operator pos:start="233:82" pos:end="233:83">&gt;&gt;</operator> <literal type="number" pos:start="233:85" pos:end="233:85">4</literal></expr></argument>  , <argument pos:start="233:90" pos:end="233:90"><expr pos:start="233:90" pos:end="233:90"><literal type="number" pos:start="233:90" pos:end="233:90">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="235:17" pos:end="235:22"><expr pos:start="235:17" pos:end="235:21"><name pos:start="235:17" pos:end="235:19">src</name><operator pos:start="235:20" pos:end="235:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="239:13" pos:end="239:24"><expr pos:start="239:13" pos:end="239:23"><name pos:start="239:13" pos:end="239:15">src</name> <operator pos:start="239:17" pos:end="239:18">+=</operator> <literal type="number" pos:start="239:20" pos:end="239:20">4</literal><operator pos:start="239:21" pos:end="239:21">*</operator><name pos:start="239:22" pos:end="239:23">st</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="243:9" pos:end="243:14">break;</break>

    <case pos:start="245:5" pos:end="245:28">case <expr pos:start="245:10" pos:end="245:27"><name pos:start="245:10" pos:end="245:27">CODEC_ID_ADPCM_4XM</name></expr>:</case>

        <expr_stmt pos:start="247:9" pos:end="247:29"><expr pos:start="247:9" pos:end="247:28"><name pos:start="247:9" pos:end="247:10">cs</name> <operator pos:start="247:12" pos:end="247:12">=</operator> <operator pos:start="247:14" pos:end="247:14">&amp;</operator><operator pos:start="247:15" pos:end="247:15">(</operator><name pos:start="247:16" pos:end="247:27"><name pos:start="247:16" pos:end="247:16">c</name><operator pos:start="247:17" pos:end="247:18">-&gt;</operator><name pos:start="247:19" pos:end="247:24">status</name><index pos:start="247:25" pos:end="247:27">[<expr pos:start="247:26" pos:end="247:26"><literal type="number" pos:start="247:26" pos:end="247:26">0</literal></expr>]</index></name><operator pos:start="247:28" pos:end="247:28">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:67"><expr pos:start="249:9" pos:end="249:66"><name pos:start="249:9" pos:end="249:20"><name pos:start="249:9" pos:end="249:9">c</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:17">status</name><index pos:start="249:18" pos:end="249:20">[<expr pos:start="249:19" pos:end="249:19"><literal type="number" pos:start="249:19" pos:end="249:19">0</literal></expr>]</index></name><operator pos:start="249:21" pos:end="249:21">.</operator><name pos:start="249:22" pos:end="249:30">predictor</name><operator pos:start="249:31" pos:end="249:31">=</operator> <operator pos:start="249:33" pos:end="249:33">(</operator><name pos:start="249:34" pos:end="249:40">int16_t</name><operator pos:start="249:41" pos:end="249:41">)</operator><call pos:start="249:42" pos:end="249:66"><name pos:start="249:42" pos:end="249:60">bytestream_get_le16</name><argument_list pos:start="249:61" pos:end="249:66">(<argument pos:start="249:62" pos:end="249:65"><expr pos:start="249:62" pos:end="249:65"><operator pos:start="249:62" pos:end="249:62">&amp;</operator><name pos:start="249:63" pos:end="249:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="255:9"><if pos:start="251:9" pos:end="255:9">if<condition pos:start="251:11" pos:end="251:14">(<expr pos:start="251:12" pos:end="251:13"><name pos:start="251:12" pos:end="251:13">st</name></expr>)</condition><block pos:start="251:15" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:71">

            <expr_stmt pos:start="253:13" pos:end="253:71"><expr pos:start="253:13" pos:end="253:70"><name pos:start="253:13" pos:end="253:24"><name pos:start="253:13" pos:end="253:13">c</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:21">status</name><index pos:start="253:22" pos:end="253:24">[<expr pos:start="253:23" pos:end="253:23"><literal type="number" pos:start="253:23" pos:end="253:23">1</literal></expr>]</index></name><operator pos:start="253:25" pos:end="253:25">.</operator><name pos:start="253:26" pos:end="253:34">predictor</name><operator pos:start="253:35" pos:end="253:35">=</operator> <operator pos:start="253:37" pos:end="253:37">(</operator><name pos:start="253:38" pos:end="253:44">int16_t</name><operator pos:start="253:45" pos:end="253:45">)</operator><call pos:start="253:46" pos:end="253:70"><name pos:start="253:46" pos:end="253:64">bytestream_get_le16</name><argument_list pos:start="253:65" pos:end="253:70">(<argument pos:start="253:66" pos:end="253:69"><expr pos:start="253:66" pos:end="253:69"><operator pos:start="253:66" pos:end="253:66">&amp;</operator><name pos:start="253:67" pos:end="253:69">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:68"><expr pos:start="257:9" pos:end="257:67"><name pos:start="257:9" pos:end="257:20"><name pos:start="257:9" pos:end="257:9">c</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:17">status</name><index pos:start="257:18" pos:end="257:20">[<expr pos:start="257:19" pos:end="257:19"><literal type="number" pos:start="257:19" pos:end="257:19">0</literal></expr>]</index></name><operator pos:start="257:21" pos:end="257:21">.</operator><name pos:start="257:22" pos:end="257:31">step_index</name><operator pos:start="257:32" pos:end="257:32">=</operator> <operator pos:start="257:34" pos:end="257:34">(</operator><name pos:start="257:35" pos:end="257:41">int16_t</name><operator pos:start="257:42" pos:end="257:42">)</operator><call pos:start="257:43" pos:end="257:67"><name pos:start="257:43" pos:end="257:61">bytestream_get_le16</name><argument_list pos:start="257:62" pos:end="257:67">(<argument pos:start="257:63" pos:end="257:66"><expr pos:start="257:63" pos:end="257:66"><operator pos:start="257:63" pos:end="257:63">&amp;</operator><name pos:start="257:64" pos:end="257:66">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if<condition pos:start="259:11" pos:end="259:14">(<expr pos:start="259:12" pos:end="259:13"><name pos:start="259:12" pos:end="259:13">st</name></expr>)</condition><block pos:start="259:15" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:72">

            <expr_stmt pos:start="261:13" pos:end="261:72"><expr pos:start="261:13" pos:end="261:71"><name pos:start="261:13" pos:end="261:24"><name pos:start="261:13" pos:end="261:13">c</name><operator pos:start="261:14" pos:end="261:15">-&gt;</operator><name pos:start="261:16" pos:end="261:21">status</name><index pos:start="261:22" pos:end="261:24">[<expr pos:start="261:23" pos:end="261:23"><literal type="number" pos:start="261:23" pos:end="261:23">1</literal></expr>]</index></name><operator pos:start="261:25" pos:end="261:25">.</operator><name pos:start="261:26" pos:end="261:35">step_index</name><operator pos:start="261:36" pos:end="261:36">=</operator> <operator pos:start="261:38" pos:end="261:38">(</operator><name pos:start="261:39" pos:end="261:45">int16_t</name><operator pos:start="261:46" pos:end="261:46">)</operator><call pos:start="261:47" pos:end="261:71"><name pos:start="261:47" pos:end="261:65">bytestream_get_le16</name><argument_list pos:start="261:66" pos:end="261:71">(<argument pos:start="261:67" pos:end="261:70"><expr pos:start="261:67" pos:end="261:70"><operator pos:start="261:67" pos:end="261:67">&amp;</operator><name pos:start="261:68" pos:end="261:70">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="265:9" pos:end="265:51"><if pos:start="265:9" pos:end="265:51">if <condition pos:start="265:12" pos:end="265:31">(<expr pos:start="265:13" pos:end="265:30"><name pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:14">cs</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:26">step_index</name></name> <operator pos:start="265:28" pos:end="265:28">&lt;</operator> <literal type="number" pos:start="265:30" pos:end="265:30">0</literal></expr>)</condition><block type="pseudo" pos:start="265:33" pos:end="265:51"><block_content pos:start="265:33" pos:end="265:51"> <expr_stmt pos:start="265:33" pos:end="265:51"><expr pos:start="265:33" pos:end="265:50"><name pos:start="265:33" pos:end="265:46"><name pos:start="265:33" pos:end="265:34">cs</name><operator pos:start="265:35" pos:end="265:36">-&gt;</operator><name pos:start="265:37" pos:end="265:46">step_index</name></name> <operator pos:start="265:48" pos:end="265:48">=</operator> <literal type="number" pos:start="265:50" pos:end="265:50">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="267:9" pos:end="267:53"><if pos:start="267:9" pos:end="267:53">if <condition pos:start="267:12" pos:end="267:32">(<expr pos:start="267:13" pos:end="267:31"><name pos:start="267:13" pos:end="267:26"><name pos:start="267:13" pos:end="267:14">cs</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:26">step_index</name></name> <operator pos:start="267:28" pos:end="267:28">&gt;</operator> <literal type="number" pos:start="267:30" pos:end="267:31">88</literal></expr>)</condition><block type="pseudo" pos:start="267:34" pos:end="267:53"><block_content pos:start="267:34" pos:end="267:53"> <expr_stmt pos:start="267:34" pos:end="267:53"><expr pos:start="267:34" pos:end="267:52"><name pos:start="267:34" pos:end="267:47"><name pos:start="267:34" pos:end="267:35">cs</name><operator pos:start="267:36" pos:end="267:37">-&gt;</operator><name pos:start="267:38" pos:end="267:47">step_index</name></name> <operator pos:start="267:49" pos:end="267:49">=</operator> <literal type="number" pos:start="267:51" pos:end="267:52">88</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="271:9" pos:end="271:40"><expr pos:start="271:9" pos:end="271:39"><name pos:start="271:9" pos:end="271:9">m</name><operator pos:start="271:10" pos:end="271:10">=</operator> <operator pos:start="271:12" pos:end="271:12">(</operator><name pos:start="271:13" pos:end="271:20">buf_size</name> <operator pos:start="271:22" pos:end="271:22">-</operator> <operator pos:start="271:24" pos:end="271:24">(</operator><name pos:start="271:25" pos:end="271:27">src</name> <operator pos:start="271:29" pos:end="271:29">-</operator> <name pos:start="271:31" pos:end="271:33">buf</name><operator pos:start="271:34" pos:end="271:34">)</operator><operator pos:start="271:35" pos:end="271:35">)</operator><operator pos:start="271:36" pos:end="271:37">&gt;&gt;</operator><name pos:start="271:38" pos:end="271:39">st</name></expr>;</expr_stmt>

        <for pos:start="273:9" pos:end="287:9">for<control pos:start="273:12" pos:end="273:26">(<init pos:start="273:13" pos:end="273:16"><expr pos:start="273:13" pos:end="273:15"><name pos:start="273:13" pos:end="273:13">i</name><operator pos:start="273:14" pos:end="273:14">=</operator><literal type="number" pos:start="273:15" pos:end="273:15">0</literal></expr>;</init> <condition pos:start="273:18" pos:end="273:21"><expr pos:start="273:18" pos:end="273:20"><name pos:start="273:18" pos:end="273:18">i</name><operator pos:start="273:19" pos:end="273:19">&lt;</operator><name pos:start="273:20" pos:end="273:20">m</name></expr>;</condition> <incr pos:start="273:23" pos:end="273:25"><expr pos:start="273:23" pos:end="273:25"><name pos:start="273:23" pos:end="273:23">i</name><operator pos:start="273:24" pos:end="273:25">++</operator></expr></incr>)</control> <block pos:start="273:28" pos:end="287:9">{<block_content pos:start="275:13" pos:end="285:86">

            <expr_stmt pos:start="275:13" pos:end="275:82"><expr pos:start="275:13" pos:end="275:81"><operator pos:start="275:13" pos:end="275:13">*</operator><name pos:start="275:14" pos:end="275:20">samples</name><operator pos:start="275:21" pos:end="275:22">++</operator> <operator pos:start="275:24" pos:end="275:24">=</operator> <call pos:start="275:26" pos:end="275:81"><name pos:start="275:26" pos:end="275:48">adpcm_ima_expand_nibble</name><argument_list pos:start="275:49" pos:end="275:81">(<argument pos:start="275:50" pos:end="275:62"><expr pos:start="275:50" pos:end="275:62"><operator pos:start="275:50" pos:end="275:50">&amp;</operator><name pos:start="275:51" pos:end="275:62"><name pos:start="275:51" pos:end="275:51">c</name><operator pos:start="275:52" pos:end="275:53">-&gt;</operator><name pos:start="275:54" pos:end="275:59">status</name><index pos:start="275:60" pos:end="275:62">[<expr pos:start="275:61" pos:end="275:61"><literal type="number" pos:start="275:61" pos:end="275:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="275:65" pos:end="275:77"><expr pos:start="275:65" pos:end="275:77"><name pos:start="275:65" pos:end="275:70"><name pos:start="275:65" pos:end="275:67">src</name><index pos:start="275:68" pos:end="275:70">[<expr pos:start="275:69" pos:end="275:69"><name pos:start="275:69" pos:end="275:69">i</name></expr>]</index></name> <operator pos:start="275:72" pos:end="275:72">&amp;</operator> <literal type="number" pos:start="275:74" pos:end="275:77">0x0F</literal></expr></argument>, <argument pos:start="275:80" pos:end="275:80"><expr pos:start="275:80" pos:end="275:80"><literal type="number" pos:start="275:80" pos:end="275:80">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="277:13" pos:end="279:88"><if pos:start="277:13" pos:end="279:88">if <condition pos:start="277:16" pos:end="277:19">(<expr pos:start="277:17" pos:end="277:18"><name pos:start="277:17" pos:end="277:18">st</name></expr>)</condition><block type="pseudo" pos:start="279:17" pos:end="279:88"><block_content pos:start="279:17" pos:end="279:88">

                <expr_stmt pos:start="279:17" pos:end="279:88"><expr pos:start="279:17" pos:end="279:87"><operator pos:start="279:17" pos:end="279:17">*</operator><name pos:start="279:18" pos:end="279:24">samples</name><operator pos:start="279:25" pos:end="279:26">++</operator> <operator pos:start="279:28" pos:end="279:28">=</operator> <call pos:start="279:30" pos:end="279:87"><name pos:start="279:30" pos:end="279:52">adpcm_ima_expand_nibble</name><argument_list pos:start="279:53" pos:end="279:87">(<argument pos:start="279:54" pos:end="279:66"><expr pos:start="279:54" pos:end="279:66"><operator pos:start="279:54" pos:end="279:54">&amp;</operator><name pos:start="279:55" pos:end="279:66"><name pos:start="279:55" pos:end="279:55">c</name><operator pos:start="279:56" pos:end="279:57">-&gt;</operator><name pos:start="279:58" pos:end="279:63">status</name><index pos:start="279:64" pos:end="279:66">[<expr pos:start="279:65" pos:end="279:65"><literal type="number" pos:start="279:65" pos:end="279:65">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="279:69" pos:end="279:83"><expr pos:start="279:69" pos:end="279:83"><name pos:start="279:69" pos:end="279:76"><name pos:start="279:69" pos:end="279:71">src</name><index pos:start="279:72" pos:end="279:76">[<expr pos:start="279:73" pos:end="279:75"><name pos:start="279:73" pos:end="279:73">i</name><operator pos:start="279:74" pos:end="279:74">+</operator><name pos:start="279:75" pos:end="279:75">m</name></expr>]</index></name> <operator pos:start="279:78" pos:end="279:78">&amp;</operator> <literal type="number" pos:start="279:80" pos:end="279:83">0x0F</literal></expr></argument>, <argument pos:start="279:86" pos:end="279:86"><expr pos:start="279:86" pos:end="279:86"><literal type="number" pos:start="279:86" pos:end="279:86">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:80"><expr pos:start="281:13" pos:end="281:79"><operator pos:start="281:13" pos:end="281:13">*</operator><name pos:start="281:14" pos:end="281:20">samples</name><operator pos:start="281:21" pos:end="281:22">++</operator> <operator pos:start="281:24" pos:end="281:24">=</operator> <call pos:start="281:26" pos:end="281:79"><name pos:start="281:26" pos:end="281:48">adpcm_ima_expand_nibble</name><argument_list pos:start="281:49" pos:end="281:79">(<argument pos:start="281:50" pos:end="281:62"><expr pos:start="281:50" pos:end="281:62"><operator pos:start="281:50" pos:end="281:50">&amp;</operator><name pos:start="281:51" pos:end="281:62"><name pos:start="281:51" pos:end="281:51">c</name><operator pos:start="281:52" pos:end="281:53">-&gt;</operator><name pos:start="281:54" pos:end="281:59">status</name><index pos:start="281:60" pos:end="281:62">[<expr pos:start="281:61" pos:end="281:61"><literal type="number" pos:start="281:61" pos:end="281:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="281:65" pos:end="281:75"><expr pos:start="281:65" pos:end="281:75"><name pos:start="281:65" pos:end="281:70"><name pos:start="281:65" pos:end="281:67">src</name><index pos:start="281:68" pos:end="281:70">[<expr pos:start="281:69" pos:end="281:69"><name pos:start="281:69" pos:end="281:69">i</name></expr>]</index></name> <operator pos:start="281:72" pos:end="281:73">&gt;&gt;</operator> <literal type="number" pos:start="281:75" pos:end="281:75">4</literal></expr></argument>, <argument pos:start="281:78" pos:end="281:78"><expr pos:start="281:78" pos:end="281:78"><literal type="number" pos:start="281:78" pos:end="281:78">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="283:13" pos:end="285:86"><if pos:start="283:13" pos:end="285:86">if <condition pos:start="283:16" pos:end="283:19">(<expr pos:start="283:17" pos:end="283:18"><name pos:start="283:17" pos:end="283:18">st</name></expr>)</condition><block type="pseudo" pos:start="285:17" pos:end="285:86"><block_content pos:start="285:17" pos:end="285:86">

                <expr_stmt pos:start="285:17" pos:end="285:86"><expr pos:start="285:17" pos:end="285:85"><operator pos:start="285:17" pos:end="285:17">*</operator><name pos:start="285:18" pos:end="285:24">samples</name><operator pos:start="285:25" pos:end="285:26">++</operator> <operator pos:start="285:28" pos:end="285:28">=</operator> <call pos:start="285:30" pos:end="285:85"><name pos:start="285:30" pos:end="285:52">adpcm_ima_expand_nibble</name><argument_list pos:start="285:53" pos:end="285:85">(<argument pos:start="285:54" pos:end="285:66"><expr pos:start="285:54" pos:end="285:66"><operator pos:start="285:54" pos:end="285:54">&amp;</operator><name pos:start="285:55" pos:end="285:66"><name pos:start="285:55" pos:end="285:55">c</name><operator pos:start="285:56" pos:end="285:57">-&gt;</operator><name pos:start="285:58" pos:end="285:63">status</name><index pos:start="285:64" pos:end="285:66">[<expr pos:start="285:65" pos:end="285:65"><literal type="number" pos:start="285:65" pos:end="285:65">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="285:69" pos:end="285:81"><expr pos:start="285:69" pos:end="285:81"><name pos:start="285:69" pos:end="285:76"><name pos:start="285:69" pos:end="285:71">src</name><index pos:start="285:72" pos:end="285:76">[<expr pos:start="285:73" pos:end="285:75"><name pos:start="285:73" pos:end="285:73">i</name><operator pos:start="285:74" pos:end="285:74">+</operator><name pos:start="285:75" pos:end="285:75">m</name></expr>]</index></name> <operator pos:start="285:78" pos:end="285:79">&gt;&gt;</operator> <literal type="number" pos:start="285:81" pos:end="285:81">4</literal></expr></argument>, <argument pos:start="285:84" pos:end="285:84"><expr pos:start="285:84" pos:end="285:84"><literal type="number" pos:start="285:84" pos:end="285:84">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="291:9" pos:end="291:21"><expr pos:start="291:9" pos:end="291:20"><name pos:start="291:9" pos:end="291:11">src</name> <operator pos:start="291:13" pos:end="291:14">+=</operator> <name pos:start="291:16" pos:end="291:16">m</name><operator pos:start="291:17" pos:end="291:18">&lt;&lt;</operator><name pos:start="291:19" pos:end="291:20">st</name></expr>;</expr_stmt>



        <break pos:start="295:9" pos:end="295:14">break;</break>

    <case pos:start="297:5" pos:end="297:27">case <expr pos:start="297:10" pos:end="297:26"><name pos:start="297:10" pos:end="297:26">CODEC_ID_ADPCM_MS</name></expr>:</case>

        <if_stmt pos:start="299:9" pos:end="301:42"><if pos:start="299:9" pos:end="301:42">if <condition pos:start="299:12" pos:end="299:69">(<expr pos:start="299:13" pos:end="299:68"><name pos:start="299:13" pos:end="299:30"><name pos:start="299:13" pos:end="299:17">avctx</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:30">block_align</name></name> <operator pos:start="299:32" pos:end="299:33">!=</operator> <literal type="number" pos:start="299:35" pos:end="299:35">0</literal> <operator pos:start="299:37" pos:end="299:38">&amp;&amp;</operator> <name pos:start="299:40" pos:end="299:47">buf_size</name> <operator pos:start="299:49" pos:end="299:49">&gt;</operator> <name pos:start="299:51" pos:end="299:68"><name pos:start="299:51" pos:end="299:55">avctx</name><operator pos:start="299:56" pos:end="299:57">-&gt;</operator><name pos:start="299:58" pos:end="299:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="301:13" pos:end="301:42"><block_content pos:start="301:13" pos:end="301:42">

            <expr_stmt pos:start="301:13" pos:end="301:42"><expr pos:start="301:13" pos:end="301:41"><name pos:start="301:13" pos:end="301:20">buf_size</name> <operator pos:start="301:22" pos:end="301:22">=</operator> <name pos:start="301:24" pos:end="301:41"><name pos:start="301:24" pos:end="301:28">avctx</name><operator pos:start="301:29" pos:end="301:30">-&gt;</operator><name pos:start="301:31" pos:end="301:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:43"><expr pos:start="303:9" pos:end="303:42"><name pos:start="303:9" pos:end="303:9">n</name> <operator pos:start="303:11" pos:end="303:11">=</operator> <name pos:start="303:13" pos:end="303:20">buf_size</name> <operator pos:start="303:22" pos:end="303:22">-</operator> <literal type="number" pos:start="303:24" pos:end="303:24">7</literal> <operator pos:start="303:26" pos:end="303:26">*</operator> <name pos:start="303:28" pos:end="303:42"><name pos:start="303:28" pos:end="303:32">avctx</name><operator pos:start="303:33" pos:end="303:34">-&gt;</operator><name pos:start="303:35" pos:end="303:42">channels</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="305:9" pos:end="307:22"><if pos:start="305:9" pos:end="307:22">if <condition pos:start="305:12" pos:end="305:18">(<expr pos:start="305:13" pos:end="305:17"><name pos:start="305:13" pos:end="305:13">n</name> <operator pos:start="305:15" pos:end="305:15">&lt;</operator> <literal type="number" pos:start="305:17" pos:end="305:17">0</literal></expr>)</condition><block type="pseudo" pos:start="307:13" pos:end="307:22"><block_content pos:start="307:13" pos:end="307:22">

            <return pos:start="307:13" pos:end="307:22">return <expr pos:start="307:20" pos:end="307:21"><operator pos:start="307:20" pos:end="307:20">-</operator><literal type="number" pos:start="307:21" pos:end="307:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:51"><expr pos:start="309:9" pos:end="309:50"><name pos:start="309:9" pos:end="309:26"><name pos:start="309:9" pos:end="309:23">block_predictor</name><index pos:start="309:24" pos:end="309:26">[<expr pos:start="309:25" pos:end="309:25"><literal type="number" pos:start="309:25" pos:end="309:25">0</literal></expr>]</index></name> <operator pos:start="309:28" pos:end="309:28">=</operator> <call pos:start="309:30" pos:end="309:50"><name pos:start="309:30" pos:end="309:36">av_clip</name><argument_list pos:start="309:37" pos:end="309:50">(<argument pos:start="309:38" pos:end="309:43"><expr pos:start="309:38" pos:end="309:43"><operator pos:start="309:38" pos:end="309:38">*</operator><name pos:start="309:39" pos:end="309:41">src</name><operator pos:start="309:42" pos:end="309:43">++</operator></expr></argument>, <argument pos:start="309:46" pos:end="309:46"><expr pos:start="309:46" pos:end="309:46"><literal type="number" pos:start="309:46" pos:end="309:46">0</literal></expr></argument>, <argument pos:start="309:49" pos:end="309:49"><expr pos:start="309:49" pos:end="309:49"><literal type="number" pos:start="309:49" pos:end="309:49">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:31"><expr pos:start="311:9" pos:end="311:30"><name pos:start="311:9" pos:end="311:26"><name pos:start="311:9" pos:end="311:23">block_predictor</name><index pos:start="311:24" pos:end="311:26">[<expr pos:start="311:25" pos:end="311:25"><literal type="number" pos:start="311:25" pos:end="311:25">1</literal></expr>]</index></name> <operator pos:start="311:28" pos:end="311:28">=</operator> <literal type="number" pos:start="311:30" pos:end="311:30">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="315:55"><if pos:start="313:9" pos:end="315:55">if <condition pos:start="313:12" pos:end="313:15">(<expr pos:start="313:13" pos:end="313:14"><name pos:start="313:13" pos:end="313:14">st</name></expr>)</condition><block type="pseudo" pos:start="315:13" pos:end="315:55"><block_content pos:start="315:13" pos:end="315:55">

            <expr_stmt pos:start="315:13" pos:end="315:55"><expr pos:start="315:13" pos:end="315:54"><name pos:start="315:13" pos:end="315:30"><name pos:start="315:13" pos:end="315:27">block_predictor</name><index pos:start="315:28" pos:end="315:30">[<expr pos:start="315:29" pos:end="315:29"><literal type="number" pos:start="315:29" pos:end="315:29">1</literal></expr>]</index></name> <operator pos:start="315:32" pos:end="315:32">=</operator> <call pos:start="315:34" pos:end="315:54"><name pos:start="315:34" pos:end="315:40">av_clip</name><argument_list pos:start="315:41" pos:end="315:54">(<argument pos:start="315:42" pos:end="315:47"><expr pos:start="315:42" pos:end="315:47"><operator pos:start="315:42" pos:end="315:42">*</operator><name pos:start="315:43" pos:end="315:45">src</name><operator pos:start="315:46" pos:end="315:47">++</operator></expr></argument>, <argument pos:start="315:50" pos:end="315:50"><expr pos:start="315:50" pos:end="315:50"><literal type="number" pos:start="315:50" pos:end="315:50">0</literal></expr></argument>, <argument pos:start="315:53" pos:end="315:53"><expr pos:start="315:53" pos:end="315:53"><literal type="number" pos:start="315:53" pos:end="315:53">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:65"><expr pos:start="317:9" pos:end="317:64"><name pos:start="317:9" pos:end="317:20"><name pos:start="317:9" pos:end="317:9">c</name><operator pos:start="317:10" pos:end="317:11">-&gt;</operator><name pos:start="317:12" pos:end="317:17">status</name><index pos:start="317:18" pos:end="317:20">[<expr pos:start="317:19" pos:end="317:19"><literal type="number" pos:start="317:19" pos:end="317:19">0</literal></expr>]</index></name><operator pos:start="317:21" pos:end="317:21">.</operator><name pos:start="317:22" pos:end="317:27">idelta</name> <operator pos:start="317:29" pos:end="317:29">=</operator> <operator pos:start="317:31" pos:end="317:31">(</operator><name pos:start="317:32" pos:end="317:38">int16_t</name><operator pos:start="317:39" pos:end="317:39">)</operator><call pos:start="317:40" pos:end="317:64"><name pos:start="317:40" pos:end="317:58">bytestream_get_le16</name><argument_list pos:start="317:59" pos:end="317:64">(<argument pos:start="317:60" pos:end="317:63"><expr pos:start="317:60" pos:end="317:63"><operator pos:start="317:60" pos:end="317:60">&amp;</operator><name pos:start="317:61" pos:end="317:63">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="319:9" pos:end="323:9"><if pos:start="319:9" pos:end="323:9">if <condition pos:start="319:12" pos:end="319:15">(<expr pos:start="319:13" pos:end="319:14"><name pos:start="319:13" pos:end="319:14">st</name></expr>)</condition><block pos:start="319:16" pos:end="323:9">{<block_content pos:start="321:13" pos:end="321:69">

            <expr_stmt pos:start="321:13" pos:end="321:69"><expr pos:start="321:13" pos:end="321:68"><name pos:start="321:13" pos:end="321:24"><name pos:start="321:13" pos:end="321:13">c</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:21">status</name><index pos:start="321:22" pos:end="321:24">[<expr pos:start="321:23" pos:end="321:23"><literal type="number" pos:start="321:23" pos:end="321:23">1</literal></expr>]</index></name><operator pos:start="321:25" pos:end="321:25">.</operator><name pos:start="321:26" pos:end="321:31">idelta</name> <operator pos:start="321:33" pos:end="321:33">=</operator> <operator pos:start="321:35" pos:end="321:35">(</operator><name pos:start="321:36" pos:end="321:42">int16_t</name><operator pos:start="321:43" pos:end="321:43">)</operator><call pos:start="321:44" pos:end="321:68"><name pos:start="321:44" pos:end="321:62">bytestream_get_le16</name><argument_list pos:start="321:63" pos:end="321:68">(<argument pos:start="321:64" pos:end="321:67"><expr pos:start="321:64" pos:end="321:67"><operator pos:start="321:64" pos:end="321:64">&amp;</operator><name pos:start="321:65" pos:end="321:67">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:71"><expr pos:start="325:9" pos:end="325:70"><name pos:start="325:9" pos:end="325:20"><name pos:start="325:9" pos:end="325:9">c</name><operator pos:start="325:10" pos:end="325:11">-&gt;</operator><name pos:start="325:12" pos:end="325:17">status</name><index pos:start="325:18" pos:end="325:20">[<expr pos:start="325:19" pos:end="325:19"><literal type="number" pos:start="325:19" pos:end="325:19">0</literal></expr>]</index></name><operator pos:start="325:21" pos:end="325:21">.</operator><name pos:start="325:22" pos:end="325:27">coeff1</name> <operator pos:start="325:29" pos:end="325:29">=</operator> <name pos:start="325:31" pos:end="325:70"><name pos:start="325:31" pos:end="325:50">ff_adpcm_AdaptCoeff1</name><index pos:start="325:51" pos:end="325:70">[<expr pos:start="325:52" pos:end="325:69"><name pos:start="325:52" pos:end="325:69"><name pos:start="325:52" pos:end="325:66">block_predictor</name><index pos:start="325:67" pos:end="325:69">[<expr pos:start="325:68" pos:end="325:68"><literal type="number" pos:start="325:68" pos:end="325:68">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:71"><expr pos:start="327:9" pos:end="327:70"><name pos:start="327:9" pos:end="327:20"><name pos:start="327:9" pos:end="327:9">c</name><operator pos:start="327:10" pos:end="327:11">-&gt;</operator><name pos:start="327:12" pos:end="327:17">status</name><index pos:start="327:18" pos:end="327:20">[<expr pos:start="327:19" pos:end="327:19"><literal type="number" pos:start="327:19" pos:end="327:19">0</literal></expr>]</index></name><operator pos:start="327:21" pos:end="327:21">.</operator><name pos:start="327:22" pos:end="327:27">coeff2</name> <operator pos:start="327:29" pos:end="327:29">=</operator> <name pos:start="327:31" pos:end="327:70"><name pos:start="327:31" pos:end="327:50">ff_adpcm_AdaptCoeff2</name><index pos:start="327:51" pos:end="327:70">[<expr pos:start="327:52" pos:end="327:69"><name pos:start="327:52" pos:end="327:69"><name pos:start="327:52" pos:end="327:66">block_predictor</name><index pos:start="327:67" pos:end="327:69">[<expr pos:start="327:68" pos:end="327:68"><literal type="number" pos:start="327:68" pos:end="327:68">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:71"><expr pos:start="329:9" pos:end="329:70"><name pos:start="329:9" pos:end="329:20"><name pos:start="329:9" pos:end="329:9">c</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:17">status</name><index pos:start="329:18" pos:end="329:20">[<expr pos:start="329:19" pos:end="329:19"><literal type="number" pos:start="329:19" pos:end="329:19">1</literal></expr>]</index></name><operator pos:start="329:21" pos:end="329:21">.</operator><name pos:start="329:22" pos:end="329:27">coeff1</name> <operator pos:start="329:29" pos:end="329:29">=</operator> <name pos:start="329:31" pos:end="329:70"><name pos:start="329:31" pos:end="329:50">ff_adpcm_AdaptCoeff1</name><index pos:start="329:51" pos:end="329:70">[<expr pos:start="329:52" pos:end="329:69"><name pos:start="329:52" pos:end="329:69"><name pos:start="329:52" pos:end="329:66">block_predictor</name><index pos:start="329:67" pos:end="329:69">[<expr pos:start="329:68" pos:end="329:68"><literal type="number" pos:start="329:68" pos:end="329:68">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:71"><expr pos:start="331:9" pos:end="331:70"><name pos:start="331:9" pos:end="331:20"><name pos:start="331:9" pos:end="331:9">c</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:17">status</name><index pos:start="331:18" pos:end="331:20">[<expr pos:start="331:19" pos:end="331:19"><literal type="number" pos:start="331:19" pos:end="331:19">1</literal></expr>]</index></name><operator pos:start="331:21" pos:end="331:21">.</operator><name pos:start="331:22" pos:end="331:27">coeff2</name> <operator pos:start="331:29" pos:end="331:29">=</operator> <name pos:start="331:31" pos:end="331:70"><name pos:start="331:31" pos:end="331:50">ff_adpcm_AdaptCoeff2</name><index pos:start="331:51" pos:end="331:70">[<expr pos:start="331:52" pos:end="331:69"><name pos:start="331:52" pos:end="331:69"><name pos:start="331:52" pos:end="331:66">block_predictor</name><index pos:start="331:67" pos:end="331:69">[<expr pos:start="331:68" pos:end="331:68"><literal type="number" pos:start="331:68" pos:end="331:68">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:57"><expr pos:start="335:9" pos:end="335:56"><name pos:start="335:9" pos:end="335:20"><name pos:start="335:9" pos:end="335:9">c</name><operator pos:start="335:10" pos:end="335:11">-&gt;</operator><name pos:start="335:12" pos:end="335:17">status</name><index pos:start="335:18" pos:end="335:20">[<expr pos:start="335:19" pos:end="335:19"><literal type="number" pos:start="335:19" pos:end="335:19">0</literal></expr>]</index></name><operator pos:start="335:21" pos:end="335:21">.</operator><name pos:start="335:22" pos:end="335:28">sample1</name> <operator pos:start="335:30" pos:end="335:30">=</operator> <call pos:start="335:32" pos:end="335:56"><name pos:start="335:32" pos:end="335:50">bytestream_get_le16</name><argument_list pos:start="335:51" pos:end="335:56">(<argument pos:start="335:52" pos:end="335:55"><expr pos:start="335:52" pos:end="335:55"><operator pos:start="335:52" pos:end="335:52">&amp;</operator><name pos:start="335:53" pos:end="335:55">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="337:9" pos:end="337:65"><if pos:start="337:9" pos:end="337:65">if <condition pos:start="337:12" pos:end="337:15">(<expr pos:start="337:13" pos:end="337:14"><name pos:start="337:13" pos:end="337:14">st</name></expr>)</condition><block type="pseudo" pos:start="337:17" pos:end="337:65"><block_content pos:start="337:17" pos:end="337:65"> <expr_stmt pos:start="337:17" pos:end="337:65"><expr pos:start="337:17" pos:end="337:64"><name pos:start="337:17" pos:end="337:28"><name pos:start="337:17" pos:end="337:17">c</name><operator pos:start="337:18" pos:end="337:19">-&gt;</operator><name pos:start="337:20" pos:end="337:25">status</name><index pos:start="337:26" pos:end="337:28">[<expr pos:start="337:27" pos:end="337:27"><literal type="number" pos:start="337:27" pos:end="337:27">1</literal></expr>]</index></name><operator pos:start="337:29" pos:end="337:29">.</operator><name pos:start="337:30" pos:end="337:36">sample1</name> <operator pos:start="337:38" pos:end="337:38">=</operator> <call pos:start="337:40" pos:end="337:64"><name pos:start="337:40" pos:end="337:58">bytestream_get_le16</name><argument_list pos:start="337:59" pos:end="337:64">(<argument pos:start="337:60" pos:end="337:63"><expr pos:start="337:60" pos:end="337:63"><operator pos:start="337:60" pos:end="337:60">&amp;</operator><name pos:start="337:61" pos:end="337:63">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:57"><expr pos:start="339:9" pos:end="339:56"><name pos:start="339:9" pos:end="339:20"><name pos:start="339:9" pos:end="339:9">c</name><operator pos:start="339:10" pos:end="339:11">-&gt;</operator><name pos:start="339:12" pos:end="339:17">status</name><index pos:start="339:18" pos:end="339:20">[<expr pos:start="339:19" pos:end="339:19"><literal type="number" pos:start="339:19" pos:end="339:19">0</literal></expr>]</index></name><operator pos:start="339:21" pos:end="339:21">.</operator><name pos:start="339:22" pos:end="339:28">sample2</name> <operator pos:start="339:30" pos:end="339:30">=</operator> <call pos:start="339:32" pos:end="339:56"><name pos:start="339:32" pos:end="339:50">bytestream_get_le16</name><argument_list pos:start="339:51" pos:end="339:56">(<argument pos:start="339:52" pos:end="339:55"><expr pos:start="339:52" pos:end="339:55"><operator pos:start="339:52" pos:end="339:52">&amp;</operator><name pos:start="339:53" pos:end="339:55">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="341:9" pos:end="341:65"><if pos:start="341:9" pos:end="341:65">if <condition pos:start="341:12" pos:end="341:15">(<expr pos:start="341:13" pos:end="341:14"><name pos:start="341:13" pos:end="341:14">st</name></expr>)</condition><block type="pseudo" pos:start="341:17" pos:end="341:65"><block_content pos:start="341:17" pos:end="341:65"> <expr_stmt pos:start="341:17" pos:end="341:65"><expr pos:start="341:17" pos:end="341:64"><name pos:start="341:17" pos:end="341:28"><name pos:start="341:17" pos:end="341:17">c</name><operator pos:start="341:18" pos:end="341:19">-&gt;</operator><name pos:start="341:20" pos:end="341:25">status</name><index pos:start="341:26" pos:end="341:28">[<expr pos:start="341:27" pos:end="341:27"><literal type="number" pos:start="341:27" pos:end="341:27">1</literal></expr>]</index></name><operator pos:start="341:29" pos:end="341:29">.</operator><name pos:start="341:30" pos:end="341:36">sample2</name> <operator pos:start="341:38" pos:end="341:38">=</operator> <call pos:start="341:40" pos:end="341:64"><name pos:start="341:40" pos:end="341:58">bytestream_get_le16</name><argument_list pos:start="341:59" pos:end="341:64">(<argument pos:start="341:60" pos:end="341:63"><expr pos:start="341:60" pos:end="341:63"><operator pos:start="341:60" pos:end="341:60">&amp;</operator><name pos:start="341:61" pos:end="341:63">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="345:9" pos:end="345:42"><expr pos:start="345:9" pos:end="345:41"><operator pos:start="345:9" pos:end="345:9">*</operator><name pos:start="345:10" pos:end="345:16">samples</name><operator pos:start="345:17" pos:end="345:18">++</operator> <operator pos:start="345:20" pos:end="345:20">=</operator> <name pos:start="345:22" pos:end="345:33"><name pos:start="345:22" pos:end="345:22">c</name><operator pos:start="345:23" pos:end="345:24">-&gt;</operator><name pos:start="345:25" pos:end="345:30">status</name><index pos:start="345:31" pos:end="345:33">[<expr pos:start="345:32" pos:end="345:32"><literal type="number" pos:start="345:32" pos:end="345:32">0</literal></expr>]</index></name><operator pos:start="345:34" pos:end="345:34">.</operator><name pos:start="345:35" pos:end="345:41">sample2</name></expr>;</expr_stmt>

        <if_stmt pos:start="347:9" pos:end="347:50"><if pos:start="347:9" pos:end="347:50">if <condition pos:start="347:12" pos:end="347:15">(<expr pos:start="347:13" pos:end="347:14"><name pos:start="347:13" pos:end="347:14">st</name></expr>)</condition><block type="pseudo" pos:start="347:17" pos:end="347:50"><block_content pos:start="347:17" pos:end="347:50"> <expr_stmt pos:start="347:17" pos:end="347:50"><expr pos:start="347:17" pos:end="347:49"><operator pos:start="347:17" pos:end="347:17">*</operator><name pos:start="347:18" pos:end="347:24">samples</name><operator pos:start="347:25" pos:end="347:26">++</operator> <operator pos:start="347:28" pos:end="347:28">=</operator> <name pos:start="347:30" pos:end="347:41"><name pos:start="347:30" pos:end="347:30">c</name><operator pos:start="347:31" pos:end="347:32">-&gt;</operator><name pos:start="347:33" pos:end="347:38">status</name><index pos:start="347:39" pos:end="347:41">[<expr pos:start="347:40" pos:end="347:40"><literal type="number" pos:start="347:40" pos:end="347:40">1</literal></expr>]</index></name><operator pos:start="347:42" pos:end="347:42">.</operator><name pos:start="347:43" pos:end="347:49">sample2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:42"><expr pos:start="349:9" pos:end="349:41"><operator pos:start="349:9" pos:end="349:9">*</operator><name pos:start="349:10" pos:end="349:16">samples</name><operator pos:start="349:17" pos:end="349:18">++</operator> <operator pos:start="349:20" pos:end="349:20">=</operator> <name pos:start="349:22" pos:end="349:33"><name pos:start="349:22" pos:end="349:22">c</name><operator pos:start="349:23" pos:end="349:24">-&gt;</operator><name pos:start="349:25" pos:end="349:30">status</name><index pos:start="349:31" pos:end="349:33">[<expr pos:start="349:32" pos:end="349:32"><literal type="number" pos:start="349:32" pos:end="349:32">0</literal></expr>]</index></name><operator pos:start="349:34" pos:end="349:34">.</operator><name pos:start="349:35" pos:end="349:41">sample1</name></expr>;</expr_stmt>

        <if_stmt pos:start="351:9" pos:end="351:50"><if pos:start="351:9" pos:end="351:50">if <condition pos:start="351:12" pos:end="351:15">(<expr pos:start="351:13" pos:end="351:14"><name pos:start="351:13" pos:end="351:14">st</name></expr>)</condition><block type="pseudo" pos:start="351:17" pos:end="351:50"><block_content pos:start="351:17" pos:end="351:50"> <expr_stmt pos:start="351:17" pos:end="351:50"><expr pos:start="351:17" pos:end="351:49"><operator pos:start="351:17" pos:end="351:17">*</operator><name pos:start="351:18" pos:end="351:24">samples</name><operator pos:start="351:25" pos:end="351:26">++</operator> <operator pos:start="351:28" pos:end="351:28">=</operator> <name pos:start="351:30" pos:end="351:41"><name pos:start="351:30" pos:end="351:30">c</name><operator pos:start="351:31" pos:end="351:32">-&gt;</operator><name pos:start="351:33" pos:end="351:38">status</name><index pos:start="351:39" pos:end="351:41">[<expr pos:start="351:40" pos:end="351:40"><literal type="number" pos:start="351:40" pos:end="351:40">1</literal></expr>]</index></name><operator pos:start="351:42" pos:end="351:42">.</operator><name pos:start="351:43" pos:end="351:49">sample1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="353:9" pos:end="361:9">for<control pos:start="353:12" pos:end="353:21">(<init pos:start="353:13" pos:end="353:13">;</init><condition pos:start="353:14" pos:end="353:17"><expr pos:start="353:14" pos:end="353:16"><name pos:start="353:14" pos:end="353:14">n</name><operator pos:start="353:15" pos:end="353:15">&gt;</operator><literal type="number" pos:start="353:16" pos:end="353:16">0</literal></expr>;</condition><incr pos:start="353:18" pos:end="353:20"><expr pos:start="353:18" pos:end="353:20"><name pos:start="353:18" pos:end="353:18">n</name><operator pos:start="353:19" pos:end="353:20">--</operator></expr></incr>)</control> <block pos:start="353:23" pos:end="361:9">{<block_content pos:start="355:13" pos:end="359:19">

            <expr_stmt pos:start="355:13" pos:end="355:79"><expr pos:start="355:13" pos:end="355:78"><operator pos:start="355:13" pos:end="355:13">*</operator><name pos:start="355:14" pos:end="355:20">samples</name><operator pos:start="355:21" pos:end="355:22">++</operator> <operator pos:start="355:24" pos:end="355:24">=</operator> <call pos:start="355:26" pos:end="355:78"><name pos:start="355:26" pos:end="355:47">adpcm_ms_expand_nibble</name><argument_list pos:start="355:48" pos:end="355:78">(<argument pos:start="355:49" pos:end="355:62"><expr pos:start="355:49" pos:end="355:62"><operator pos:start="355:49" pos:end="355:49">&amp;</operator><name pos:start="355:50" pos:end="355:62"><name pos:start="355:50" pos:end="355:50">c</name><operator pos:start="355:51" pos:end="355:52">-&gt;</operator><name pos:start="355:53" pos:end="355:58">status</name><index pos:start="355:59" pos:end="355:62">[<expr pos:start="355:60" pos:end="355:60"><literal type="number" pos:start="355:60" pos:end="355:60">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="355:65" pos:end="355:75"><expr pos:start="355:65" pos:end="355:75"><name pos:start="355:65" pos:end="355:70"><name pos:start="355:65" pos:end="355:67">src</name><index pos:start="355:68" pos:end="355:70">[<expr pos:start="355:69" pos:end="355:69"><literal type="number" pos:start="355:69" pos:end="355:69">0</literal></expr>]</index></name> <operator pos:start="355:72" pos:end="355:73">&gt;&gt;</operator> <literal type="number" pos:start="355:75" pos:end="355:75">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:79"><expr pos:start="357:13" pos:end="357:78"><operator pos:start="357:13" pos:end="357:13">*</operator><name pos:start="357:14" pos:end="357:20">samples</name><operator pos:start="357:21" pos:end="357:22">++</operator> <operator pos:start="357:24" pos:end="357:24">=</operator> <call pos:start="357:26" pos:end="357:78"><name pos:start="357:26" pos:end="357:47">adpcm_ms_expand_nibble</name><argument_list pos:start="357:48" pos:end="357:78">(<argument pos:start="357:49" pos:end="357:62"><expr pos:start="357:49" pos:end="357:62"><operator pos:start="357:49" pos:end="357:49">&amp;</operator><name pos:start="357:50" pos:end="357:62"><name pos:start="357:50" pos:end="357:50">c</name><operator pos:start="357:51" pos:end="357:52">-&gt;</operator><name pos:start="357:53" pos:end="357:58">status</name><index pos:start="357:59" pos:end="357:62">[<expr pos:start="357:60" pos:end="357:61"><name pos:start="357:60" pos:end="357:61">st</name></expr>]</index></name></expr></argument>, <argument pos:start="357:65" pos:end="357:77"><expr pos:start="357:65" pos:end="357:77"><name pos:start="357:65" pos:end="357:70"><name pos:start="357:65" pos:end="357:67">src</name><index pos:start="357:68" pos:end="357:70">[<expr pos:start="357:69" pos:end="357:69"><literal type="number" pos:start="357:69" pos:end="357:69">0</literal></expr>]</index></name> <operator pos:start="357:72" pos:end="357:72">&amp;</operator> <literal type="number" pos:start="357:74" pos:end="357:77">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:19"><expr pos:start="359:13" pos:end="359:18"><name pos:start="359:13" pos:end="359:15">src</name> <operator pos:start="359:17" pos:end="359:18">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="363:9" pos:end="363:14">break;</break>

    <case pos:start="365:5" pos:end="365:32">case <expr pos:start="365:10" pos:end="365:31"><name pos:start="365:10" pos:end="365:31">CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>

        <if_stmt pos:start="367:9" pos:end="369:42"><if pos:start="367:9" pos:end="369:42">if <condition pos:start="367:12" pos:end="367:69">(<expr pos:start="367:13" pos:end="367:68"><name pos:start="367:13" pos:end="367:30"><name pos:start="367:13" pos:end="367:17">avctx</name><operator pos:start="367:18" pos:end="367:19">-&gt;</operator><name pos:start="367:20" pos:end="367:30">block_align</name></name> <operator pos:start="367:32" pos:end="367:33">!=</operator> <literal type="number" pos:start="367:35" pos:end="367:35">0</literal> <operator pos:start="367:37" pos:end="367:38">&amp;&amp;</operator> <name pos:start="367:40" pos:end="367:47">buf_size</name> <operator pos:start="367:49" pos:end="367:49">&gt;</operator> <name pos:start="367:51" pos:end="367:68"><name pos:start="367:51" pos:end="367:55">avctx</name><operator pos:start="367:56" pos:end="367:57">-&gt;</operator><name pos:start="367:58" pos:end="367:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:42"><block_content pos:start="369:13" pos:end="369:42">

            <expr_stmt pos:start="369:13" pos:end="369:42"><expr pos:start="369:13" pos:end="369:41"><name pos:start="369:13" pos:end="369:20">buf_size</name> <operator pos:start="369:22" pos:end="369:22">=</operator> <name pos:start="369:24" pos:end="369:41"><name pos:start="369:24" pos:end="369:28">avctx</name><operator pos:start="369:29" pos:end="369:30">-&gt;</operator><name pos:start="369:31" pos:end="369:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="373:9" pos:end="373:69"><expr pos:start="373:9" pos:end="373:68"><name pos:start="373:9" pos:end="373:20"><name pos:start="373:9" pos:end="373:9">c</name><operator pos:start="373:10" pos:end="373:11">-&gt;</operator><name pos:start="373:12" pos:end="373:17">status</name><index pos:start="373:18" pos:end="373:20">[<expr pos:start="373:19" pos:end="373:19"><literal type="number" pos:start="373:19" pos:end="373:19">0</literal></expr>]</index></name><operator pos:start="373:21" pos:end="373:21">.</operator><name pos:start="373:22" pos:end="373:30">predictor</name>  <operator pos:start="373:33" pos:end="373:33">=</operator> <operator pos:start="373:35" pos:end="373:35">(</operator><name pos:start="373:36" pos:end="373:42">int16_t</name><operator pos:start="373:43" pos:end="373:43">)</operator><call pos:start="373:44" pos:end="373:68"><name pos:start="373:44" pos:end="373:62">bytestream_get_le16</name><argument_list pos:start="373:63" pos:end="373:68">(<argument pos:start="373:64" pos:end="373:67"><expr pos:start="373:64" pos:end="373:67"><operator pos:start="373:64" pos:end="373:64">&amp;</operator><name pos:start="373:65" pos:end="373:67">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:41"><expr pos:start="375:9" pos:end="375:40"><name pos:start="375:9" pos:end="375:20"><name pos:start="375:9" pos:end="375:9">c</name><operator pos:start="375:10" pos:end="375:11">-&gt;</operator><name pos:start="375:12" pos:end="375:17">status</name><index pos:start="375:18" pos:end="375:20">[<expr pos:start="375:19" pos:end="375:19"><literal type="number" pos:start="375:19" pos:end="375:19">0</literal></expr>]</index></name><operator pos:start="375:21" pos:end="375:21">.</operator><name pos:start="375:22" pos:end="375:31">step_index</name> <operator pos:start="375:33" pos:end="375:33">=</operator> <operator pos:start="375:35" pos:end="375:35">*</operator><name pos:start="375:36" pos:end="375:38">src</name><operator pos:start="375:39" pos:end="375:40">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:14"><expr pos:start="377:9" pos:end="377:13"><name pos:start="377:9" pos:end="377:11">src</name><operator pos:start="377:12" pos:end="377:13">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:44"><expr pos:start="379:9" pos:end="379:43"><operator pos:start="379:9" pos:end="379:9">*</operator><name pos:start="379:10" pos:end="379:16">samples</name><operator pos:start="379:17" pos:end="379:18">++</operator> <operator pos:start="379:20" pos:end="379:20">=</operator> <name pos:start="379:22" pos:end="379:33"><name pos:start="379:22" pos:end="379:22">c</name><operator pos:start="379:23" pos:end="379:24">-&gt;</operator><name pos:start="379:25" pos:end="379:30">status</name><index pos:start="379:31" pos:end="379:33">[<expr pos:start="379:32" pos:end="379:32"><literal type="number" pos:start="379:32" pos:end="379:32">0</literal></expr>]</index></name><operator pos:start="379:34" pos:end="379:34">.</operator><name pos:start="379:35" pos:end="379:43">predictor</name></expr>;</expr_stmt>

        <if_stmt pos:start="381:9" pos:end="391:9"><if pos:start="381:9" pos:end="391:9">if <condition pos:start="381:12" pos:end="381:15">(<expr pos:start="381:13" pos:end="381:14"><name pos:start="381:13" pos:end="381:14">st</name></expr>)</condition> <block pos:start="381:17" pos:end="391:9">{<block_content pos:start="383:13" pos:end="389:48">

            <expr_stmt pos:start="383:13" pos:end="383:73"><expr pos:start="383:13" pos:end="383:72"><name pos:start="383:13" pos:end="383:24"><name pos:start="383:13" pos:end="383:13">c</name><operator pos:start="383:14" pos:end="383:15">-&gt;</operator><name pos:start="383:16" pos:end="383:21">status</name><index pos:start="383:22" pos:end="383:24">[<expr pos:start="383:23" pos:end="383:23"><literal type="number" pos:start="383:23" pos:end="383:23">1</literal></expr>]</index></name><operator pos:start="383:25" pos:end="383:25">.</operator><name pos:start="383:26" pos:end="383:34">predictor</name>  <operator pos:start="383:37" pos:end="383:37">=</operator> <operator pos:start="383:39" pos:end="383:39">(</operator><name pos:start="383:40" pos:end="383:46">int16_t</name><operator pos:start="383:47" pos:end="383:47">)</operator><call pos:start="383:48" pos:end="383:72"><name pos:start="383:48" pos:end="383:66">bytestream_get_le16</name><argument_list pos:start="383:67" pos:end="383:72">(<argument pos:start="383:68" pos:end="383:71"><expr pos:start="383:68" pos:end="383:71"><operator pos:start="383:68" pos:end="383:68">&amp;</operator><name pos:start="383:69" pos:end="383:71">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:45"><expr pos:start="385:13" pos:end="385:44"><name pos:start="385:13" pos:end="385:24"><name pos:start="385:13" pos:end="385:13">c</name><operator pos:start="385:14" pos:end="385:15">-&gt;</operator><name pos:start="385:16" pos:end="385:21">status</name><index pos:start="385:22" pos:end="385:24">[<expr pos:start="385:23" pos:end="385:23"><literal type="number" pos:start="385:23" pos:end="385:23">1</literal></expr>]</index></name><operator pos:start="385:25" pos:end="385:25">.</operator><name pos:start="385:26" pos:end="385:35">step_index</name> <operator pos:start="385:37" pos:end="385:37">=</operator> <operator pos:start="385:39" pos:end="385:39">*</operator><name pos:start="385:40" pos:end="385:42">src</name><operator pos:start="385:43" pos:end="385:44">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:18"><expr pos:start="387:13" pos:end="387:17"><name pos:start="387:13" pos:end="387:15">src</name><operator pos:start="387:16" pos:end="387:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:48"><expr pos:start="389:13" pos:end="389:47"><operator pos:start="389:13" pos:end="389:13">*</operator><name pos:start="389:14" pos:end="389:20">samples</name><operator pos:start="389:21" pos:end="389:22">++</operator> <operator pos:start="389:24" pos:end="389:24">=</operator> <name pos:start="389:26" pos:end="389:37"><name pos:start="389:26" pos:end="389:26">c</name><operator pos:start="389:27" pos:end="389:28">-&gt;</operator><name pos:start="389:29" pos:end="389:34">status</name><index pos:start="389:35" pos:end="389:37">[<expr pos:start="389:36" pos:end="389:36"><literal type="number" pos:start="389:36" pos:end="389:36">1</literal></expr>]</index></name><operator pos:start="389:38" pos:end="389:38">.</operator><name pos:start="389:39" pos:end="389:47">predictor</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <while pos:start="393:9" pos:end="425:9">while <condition pos:start="393:15" pos:end="393:36">(<expr pos:start="393:16" pos:end="393:35"><name pos:start="393:16" pos:end="393:18">src</name> <operator pos:start="393:20" pos:end="393:20">&lt;</operator> <name pos:start="393:22" pos:end="393:24">buf</name> <operator pos:start="393:26" pos:end="393:26">+</operator> <name pos:start="393:28" pos:end="393:35">buf_size</name></expr>)</condition> <block pos:start="393:38" pos:end="425:9">{<block_content pos:start="399:13" pos:end="423:18">



            <comment type="block" pos:start="397:13" pos:end="397:75">/* take care of the top nibble (always left or mono channel) */</comment>

            <expr_stmt pos:start="399:13" pos:end="401:32"><expr pos:start="399:13" pos:end="401:31"><operator pos:start="399:13" pos:end="399:13">*</operator><name pos:start="399:14" pos:end="399:20">samples</name><operator pos:start="399:21" pos:end="399:22">++</operator> <operator pos:start="399:24" pos:end="399:24">=</operator> <call pos:start="399:26" pos:end="401:31"><name pos:start="399:26" pos:end="399:48">adpcm_ima_expand_nibble</name><argument_list pos:start="399:49" pos:end="401:31">(<argument pos:start="399:50" pos:end="399:62"><expr pos:start="399:50" pos:end="399:62"><operator pos:start="399:50" pos:end="399:50">&amp;</operator><name pos:start="399:51" pos:end="399:62"><name pos:start="399:51" pos:end="399:51">c</name><operator pos:start="399:52" pos:end="399:53">-&gt;</operator><name pos:start="399:54" pos:end="399:59">status</name><index pos:start="399:60" pos:end="399:62">[<expr pos:start="399:61" pos:end="399:61"><literal type="number" pos:start="399:61" pos:end="399:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="401:17" pos:end="401:27"><expr pos:start="401:17" pos:end="401:27"><name pos:start="401:17" pos:end="401:22"><name pos:start="401:17" pos:end="401:19">src</name><index pos:start="401:20" pos:end="401:22">[<expr pos:start="401:21" pos:end="401:21"><literal type="number" pos:start="401:21" pos:end="401:21">0</literal></expr>]</index></name> <operator pos:start="401:24" pos:end="401:25">&gt;&gt;</operator> <literal type="number" pos:start="401:27" pos:end="401:27">4</literal></expr></argument>, <argument pos:start="401:30" pos:end="401:30"><expr pos:start="401:30" pos:end="401:30"><literal type="number" pos:start="401:30" pos:end="401:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="405:13" pos:end="407:48">/* take care of the bottom nibble, which is right sample for

             * stereo, or another mono sample */</comment>

            <if_stmt pos:start="409:13" pos:end="419:38"><if pos:start="409:13" pos:end="413:38">if <condition pos:start="409:16" pos:end="409:19">(<expr pos:start="409:17" pos:end="409:18"><name pos:start="409:17" pos:end="409:18">st</name></expr>)</condition><block type="pseudo" pos:start="411:17" pos:end="413:38"><block_content pos:start="411:17" pos:end="413:38">

                <expr_stmt pos:start="411:17" pos:end="413:38"><expr pos:start="411:17" pos:end="413:37"><operator pos:start="411:17" pos:end="411:17">*</operator><name pos:start="411:18" pos:end="411:24">samples</name><operator pos:start="411:25" pos:end="411:26">++</operator> <operator pos:start="411:28" pos:end="411:28">=</operator> <call pos:start="411:30" pos:end="413:37"><name pos:start="411:30" pos:end="411:52">adpcm_ima_expand_nibble</name><argument_list pos:start="411:53" pos:end="413:37">(<argument pos:start="411:54" pos:end="411:66"><expr pos:start="411:54" pos:end="411:66"><operator pos:start="411:54" pos:end="411:54">&amp;</operator><name pos:start="411:55" pos:end="411:66"><name pos:start="411:55" pos:end="411:55">c</name><operator pos:start="411:56" pos:end="411:57">-&gt;</operator><name pos:start="411:58" pos:end="411:63">status</name><index pos:start="411:64" pos:end="411:66">[<expr pos:start="411:65" pos:end="411:65"><literal type="number" pos:start="411:65" pos:end="411:65">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="413:21" pos:end="413:33"><expr pos:start="413:21" pos:end="413:33"><name pos:start="413:21" pos:end="413:26"><name pos:start="413:21" pos:end="413:23">src</name><index pos:start="413:24" pos:end="413:26">[<expr pos:start="413:25" pos:end="413:25"><literal type="number" pos:start="413:25" pos:end="413:25">0</literal></expr>]</index></name> <operator pos:start="413:28" pos:end="413:28">&amp;</operator> <literal type="number" pos:start="413:30" pos:end="413:33">0x0F</literal></expr></argument>, <argument pos:start="413:36" pos:end="413:36"><expr pos:start="413:36" pos:end="413:36"><literal type="number" pos:start="413:36" pos:end="413:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="415:13" pos:end="419:38">else<block type="pseudo" pos:start="417:17" pos:end="419:38"><block_content pos:start="417:17" pos:end="419:38">

                <expr_stmt pos:start="417:17" pos:end="419:38"><expr pos:start="417:17" pos:end="419:37"><operator pos:start="417:17" pos:end="417:17">*</operator><name pos:start="417:18" pos:end="417:24">samples</name><operator pos:start="417:25" pos:end="417:26">++</operator> <operator pos:start="417:28" pos:end="417:28">=</operator> <call pos:start="417:30" pos:end="419:37"><name pos:start="417:30" pos:end="417:52">adpcm_ima_expand_nibble</name><argument_list pos:start="417:53" pos:end="419:37">(<argument pos:start="417:54" pos:end="417:66"><expr pos:start="417:54" pos:end="417:66"><operator pos:start="417:54" pos:end="417:54">&amp;</operator><name pos:start="417:55" pos:end="417:66"><name pos:start="417:55" pos:end="417:55">c</name><operator pos:start="417:56" pos:end="417:57">-&gt;</operator><name pos:start="417:58" pos:end="417:63">status</name><index pos:start="417:64" pos:end="417:66">[<expr pos:start="417:65" pos:end="417:65"><literal type="number" pos:start="417:65" pos:end="417:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="419:21" pos:end="419:33"><expr pos:start="419:21" pos:end="419:33"><name pos:start="419:21" pos:end="419:26"><name pos:start="419:21" pos:end="419:23">src</name><index pos:start="419:24" pos:end="419:26">[<expr pos:start="419:25" pos:end="419:25"><literal type="number" pos:start="419:25" pos:end="419:25">0</literal></expr>]</index></name> <operator pos:start="419:28" pos:end="419:28">&amp;</operator> <literal type="number" pos:start="419:30" pos:end="419:33">0x0F</literal></expr></argument>, <argument pos:start="419:36" pos:end="419:36"><expr pos:start="419:36" pos:end="419:36"><literal type="number" pos:start="419:36" pos:end="419:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="423:13" pos:end="423:18"><expr pos:start="423:13" pos:end="423:17"><name pos:start="423:13" pos:end="423:15">src</name><operator pos:start="423:16" pos:end="423:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="427:9" pos:end="427:14">break;</break>

    <case pos:start="429:5" pos:end="429:32">case <expr pos:start="429:10" pos:end="429:31"><name pos:start="429:10" pos:end="429:31">CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>

        <if_stmt pos:start="431:9" pos:end="433:42"><if pos:start="431:9" pos:end="433:42">if <condition pos:start="431:12" pos:end="431:69">(<expr pos:start="431:13" pos:end="431:68"><name pos:start="431:13" pos:end="431:30"><name pos:start="431:13" pos:end="431:17">avctx</name><operator pos:start="431:18" pos:end="431:19">-&gt;</operator><name pos:start="431:20" pos:end="431:30">block_align</name></name> <operator pos:start="431:32" pos:end="431:33">!=</operator> <literal type="number" pos:start="431:35" pos:end="431:35">0</literal> <operator pos:start="431:37" pos:end="431:38">&amp;&amp;</operator> <name pos:start="431:40" pos:end="431:47">buf_size</name> <operator pos:start="431:49" pos:end="431:49">&gt;</operator> <name pos:start="431:51" pos:end="431:68"><name pos:start="431:51" pos:end="431:55">avctx</name><operator pos:start="431:56" pos:end="431:57">-&gt;</operator><name pos:start="431:58" pos:end="431:68">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="433:13" pos:end="433:42"><block_content pos:start="433:13" pos:end="433:42">

            <expr_stmt pos:start="433:13" pos:end="433:42"><expr pos:start="433:13" pos:end="433:41"><name pos:start="433:13" pos:end="433:20">buf_size</name> <operator pos:start="433:22" pos:end="433:22">=</operator> <name pos:start="433:24" pos:end="433:41"><name pos:start="433:24" pos:end="433:28">avctx</name><operator pos:start="433:29" pos:end="433:30">-&gt;</operator><name pos:start="433:31" pos:end="433:41">block_align</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="437:9" pos:end="439:22"><if pos:start="437:9" pos:end="439:22">if<condition pos:start="437:11" pos:end="437:55">(<expr pos:start="437:12" pos:end="437:54"><name pos:start="437:12" pos:end="437:19">buf_size</name> <operator pos:start="437:21" pos:end="437:21">+</operator> <literal type="number" pos:start="437:23" pos:end="437:24">16</literal> <operator pos:start="437:26" pos:end="437:26">&gt;</operator> <operator pos:start="437:28" pos:end="437:28">(</operator><name pos:start="437:29" pos:end="437:39">samples_end</name> <operator pos:start="437:41" pos:end="437:41">-</operator> <name pos:start="437:43" pos:end="437:49">samples</name><operator pos:start="437:50" pos:end="437:50">)</operator><operator pos:start="437:51" pos:end="437:51">*</operator><literal type="number" pos:start="437:52" pos:end="437:52">3</literal><operator pos:start="437:53" pos:end="437:53">/</operator><literal type="number" pos:start="437:54" pos:end="437:54">8</literal></expr>)</condition><block type="pseudo" pos:start="439:13" pos:end="439:22"><block_content pos:start="439:13" pos:end="439:22">

            <return pos:start="439:13" pos:end="439:22">return <expr pos:start="439:20" pos:end="439:21"><operator pos:start="439:20" pos:end="439:20">-</operator><literal type="number" pos:start="439:21" pos:end="439:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="443:9" pos:end="443:61"><expr pos:start="443:9" pos:end="443:60"><name pos:start="443:9" pos:end="443:20"><name pos:start="443:9" pos:end="443:9">c</name><operator pos:start="443:10" pos:end="443:11">-&gt;</operator><name pos:start="443:12" pos:end="443:17">status</name><index pos:start="443:18" pos:end="443:20">[<expr pos:start="443:19" pos:end="443:19"><literal type="number" pos:start="443:19" pos:end="443:19">0</literal></expr>]</index></name><operator pos:start="443:21" pos:end="443:21">.</operator><name pos:start="443:22" pos:end="443:30">predictor</name>  <operator pos:start="443:33" pos:end="443:33">=</operator> <operator pos:start="443:35" pos:end="443:35">(</operator><name pos:start="443:36" pos:end="443:42">int16_t</name><operator pos:start="443:43" pos:end="443:43">)</operator><call pos:start="443:44" pos:end="443:60"><name pos:start="443:44" pos:end="443:50">AV_RL16</name><argument_list pos:start="443:51" pos:end="443:60">(<argument pos:start="443:52" pos:end="443:59"><expr pos:start="443:52" pos:end="443:59"><name pos:start="443:52" pos:end="443:54">src</name> <operator pos:start="443:56" pos:end="443:56">+</operator> <literal type="number" pos:start="443:58" pos:end="443:59">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="445:9" pos:end="445:61"><expr pos:start="445:9" pos:end="445:60"><name pos:start="445:9" pos:end="445:20"><name pos:start="445:9" pos:end="445:9">c</name><operator pos:start="445:10" pos:end="445:11">-&gt;</operator><name pos:start="445:12" pos:end="445:17">status</name><index pos:start="445:18" pos:end="445:20">[<expr pos:start="445:19" pos:end="445:19"><literal type="number" pos:start="445:19" pos:end="445:19">1</literal></expr>]</index></name><operator pos:start="445:21" pos:end="445:21">.</operator><name pos:start="445:22" pos:end="445:30">predictor</name>  <operator pos:start="445:33" pos:end="445:33">=</operator> <operator pos:start="445:35" pos:end="445:35">(</operator><name pos:start="445:36" pos:end="445:42">int16_t</name><operator pos:start="445:43" pos:end="445:43">)</operator><call pos:start="445:44" pos:end="445:60"><name pos:start="445:44" pos:end="445:50">AV_RL16</name><argument_list pos:start="445:51" pos:end="445:60">(<argument pos:start="445:52" pos:end="445:59"><expr pos:start="445:52" pos:end="445:59"><name pos:start="445:52" pos:end="445:54">src</name> <operator pos:start="445:56" pos:end="445:56">+</operator> <literal type="number" pos:start="445:58" pos:end="445:59">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="447:9" pos:end="447:42"><expr pos:start="447:9" pos:end="447:41"><name pos:start="447:9" pos:end="447:20"><name pos:start="447:9" pos:end="447:9">c</name><operator pos:start="447:10" pos:end="447:11">-&gt;</operator><name pos:start="447:12" pos:end="447:17">status</name><index pos:start="447:18" pos:end="447:20">[<expr pos:start="447:19" pos:end="447:19"><literal type="number" pos:start="447:19" pos:end="447:19">0</literal></expr>]</index></name><operator pos:start="447:21" pos:end="447:21">.</operator><name pos:start="447:22" pos:end="447:31">step_index</name> <operator pos:start="447:33" pos:end="447:33">=</operator> <name pos:start="447:35" pos:end="447:41"><name pos:start="447:35" pos:end="447:37">src</name><index pos:start="447:38" pos:end="447:41">[<expr pos:start="447:39" pos:end="447:40"><literal type="number" pos:start="447:39" pos:end="447:40">14</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:42"><expr pos:start="449:9" pos:end="449:41"><name pos:start="449:9" pos:end="449:20"><name pos:start="449:9" pos:end="449:9">c</name><operator pos:start="449:10" pos:end="449:11">-&gt;</operator><name pos:start="449:12" pos:end="449:17">status</name><index pos:start="449:18" pos:end="449:20">[<expr pos:start="449:19" pos:end="449:19"><literal type="number" pos:start="449:19" pos:end="449:19">1</literal></expr>]</index></name><operator pos:start="449:21" pos:end="449:21">.</operator><name pos:start="449:22" pos:end="449:31">step_index</name> <operator pos:start="449:33" pos:end="449:33">=</operator> <name pos:start="449:35" pos:end="449:41"><name pos:start="449:35" pos:end="449:37">src</name><index pos:start="449:38" pos:end="449:41">[<expr pos:start="449:39" pos:end="449:40"><literal type="number" pos:start="449:39" pos:end="449:40">15</literal></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="451:9" pos:end="451:40">/* sign extend the predictors */</comment>

        <expr_stmt pos:start="453:9" pos:end="453:18"><expr pos:start="453:9" pos:end="453:17"><name pos:start="453:9" pos:end="453:11">src</name> <operator pos:start="453:13" pos:end="453:14">+=</operator> <literal type="number" pos:start="453:16" pos:end="453:17">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:46"><expr pos:start="455:9" pos:end="455:45"><name pos:start="455:9" pos:end="455:20">diff_channel</name> <operator pos:start="455:22" pos:end="455:22">=</operator> <name pos:start="455:24" pos:end="455:35"><name pos:start="455:24" pos:end="455:24">c</name><operator pos:start="455:25" pos:end="455:26">-&gt;</operator><name pos:start="455:27" pos:end="455:32">status</name><index pos:start="455:33" pos:end="455:35">[<expr pos:start="455:34" pos:end="455:34"><literal type="number" pos:start="455:34" pos:end="455:34">1</literal></expr>]</index></name><operator pos:start="455:36" pos:end="455:36">.</operator><name pos:start="455:37" pos:end="455:45">predictor</name></expr>;</expr_stmt>



        <comment type="block" pos:start="459:9" pos:end="461:36">/* the DK3_GET_NEXT_NIBBLE macro issues the break statement when

         * the buffer is consumed */</comment>

        <while pos:start="463:9" pos:end="515:9">while <condition pos:start="463:15" pos:end="463:17">(<expr pos:start="463:16" pos:end="463:16"><literal type="number" pos:start="463:16" pos:end="463:16">1</literal></expr>)</condition> <block pos:start="463:19" pos:end="515:9">{<block_content pos:start="475:13" pos:end="513:73">



            <comment type="block" pos:start="467:13" pos:end="469:50">/* for this algorithm, c-&gt;status[0] is the sum channel and

             * c-&gt;status[1] is the diff channel */</comment>



            <comment type="block" pos:start="473:13" pos:end="473:64">/* process the first predictor of the sum channel */</comment>

            <expr_stmt pos:start="475:13" pos:end="475:34"><expr pos:start="475:13" pos:end="475:33"><call pos:start="475:13" pos:end="475:33"><name pos:start="475:13" pos:end="475:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="475:32" pos:end="475:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="477:13" pos:end="477:62"><expr pos:start="477:13" pos:end="477:61"><call pos:start="477:13" pos:end="477:61"><name pos:start="477:13" pos:end="477:35">adpcm_ima_expand_nibble</name><argument_list pos:start="477:36" pos:end="477:61">(<argument pos:start="477:37" pos:end="477:49"><expr pos:start="477:37" pos:end="477:49"><operator pos:start="477:37" pos:end="477:37">&amp;</operator><name pos:start="477:38" pos:end="477:49"><name pos:start="477:38" pos:end="477:38">c</name><operator pos:start="477:39" pos:end="477:40">-&gt;</operator><name pos:start="477:41" pos:end="477:46">status</name><index pos:start="477:47" pos:end="477:49">[<expr pos:start="477:48" pos:end="477:48"><literal type="number" pos:start="477:48" pos:end="477:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="477:52" pos:end="477:57"><expr pos:start="477:52" pos:end="477:57"><name pos:start="477:52" pos:end="477:57">nibble</name></expr></argument>, <argument pos:start="477:60" pos:end="477:60"><expr pos:start="477:60" pos:end="477:60"><literal type="number" pos:start="477:60" pos:end="477:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="481:13" pos:end="481:52">/* process the diff channel predictor */</comment>

            <expr_stmt pos:start="483:13" pos:end="483:34"><expr pos:start="483:13" pos:end="483:33"><call pos:start="483:13" pos:end="483:33"><name pos:start="483:13" pos:end="483:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="483:32" pos:end="483:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:62"><expr pos:start="485:13" pos:end="485:61"><call pos:start="485:13" pos:end="485:61"><name pos:start="485:13" pos:end="485:35">adpcm_ima_expand_nibble</name><argument_list pos:start="485:36" pos:end="485:61">(<argument pos:start="485:37" pos:end="485:49"><expr pos:start="485:37" pos:end="485:49"><operator pos:start="485:37" pos:end="485:37">&amp;</operator><name pos:start="485:38" pos:end="485:49"><name pos:start="485:38" pos:end="485:38">c</name><operator pos:start="485:39" pos:end="485:40">-&gt;</operator><name pos:start="485:41" pos:end="485:46">status</name><index pos:start="485:47" pos:end="485:49">[<expr pos:start="485:48" pos:end="485:48"><literal type="number" pos:start="485:48" pos:end="485:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="485:52" pos:end="485:57"><expr pos:start="485:52" pos:end="485:57"><name pos:start="485:52" pos:end="485:57">nibble</name></expr></argument>, <argument pos:start="485:60" pos:end="485:60"><expr pos:start="485:60" pos:end="485:60"><literal type="number" pos:start="485:60" pos:end="485:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="489:13" pos:end="489:62">/* process the first pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="491:13" pos:end="491:71"><expr pos:start="491:13" pos:end="491:70"><name pos:start="491:13" pos:end="491:24">diff_channel</name> <operator pos:start="491:26" pos:end="491:26">=</operator> <operator pos:start="491:28" pos:end="491:28">(</operator><name pos:start="491:29" pos:end="491:40">diff_channel</name> <operator pos:start="491:42" pos:end="491:42">+</operator> <name pos:start="491:44" pos:end="491:55"><name pos:start="491:44" pos:end="491:44">c</name><operator pos:start="491:45" pos:end="491:46">-&gt;</operator><name pos:start="491:47" pos:end="491:52">status</name><index pos:start="491:53" pos:end="491:55">[<expr pos:start="491:54" pos:end="491:54"><literal type="number" pos:start="491:54" pos:end="491:54">1</literal></expr>]</index></name><operator pos:start="491:56" pos:end="491:56">.</operator><name pos:start="491:57" pos:end="491:65">predictor</name><operator pos:start="491:66" pos:end="491:66">)</operator> <operator pos:start="491:68" pos:end="491:68">/</operator> <literal type="number" pos:start="491:70" pos:end="491:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:73"><expr pos:start="493:13" pos:end="493:72"><operator pos:start="493:13" pos:end="493:13">*</operator><name pos:start="493:14" pos:end="493:20">samples</name><operator pos:start="493:21" pos:end="493:22">++</operator> <operator pos:start="493:24" pos:end="493:24">=</operator> <name pos:start="493:26" pos:end="493:37"><name pos:start="493:26" pos:end="493:26">c</name><operator pos:start="493:27" pos:end="493:28">-&gt;</operator><name pos:start="493:29" pos:end="493:34">status</name><index pos:start="493:35" pos:end="493:37">[<expr pos:start="493:36" pos:end="493:36"><literal type="number" pos:start="493:36" pos:end="493:36">0</literal></expr>]</index></name><operator pos:start="493:38" pos:end="493:38">.</operator><name pos:start="493:39" pos:end="493:47">predictor</name> <operator pos:start="493:49" pos:end="493:49">+</operator> <name pos:start="493:51" pos:end="493:62"><name pos:start="493:51" pos:end="493:51">c</name><operator pos:start="493:52" pos:end="493:53">-&gt;</operator><name pos:start="493:54" pos:end="493:59">status</name><index pos:start="493:60" pos:end="493:62">[<expr pos:start="493:61" pos:end="493:61"><literal type="number" pos:start="493:61" pos:end="493:61">1</literal></expr>]</index></name><operator pos:start="493:63" pos:end="493:63">.</operator><name pos:start="493:64" pos:end="493:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:73"><expr pos:start="495:13" pos:end="495:72"><operator pos:start="495:13" pos:end="495:13">*</operator><name pos:start="495:14" pos:end="495:20">samples</name><operator pos:start="495:21" pos:end="495:22">++</operator> <operator pos:start="495:24" pos:end="495:24">=</operator> <name pos:start="495:26" pos:end="495:37"><name pos:start="495:26" pos:end="495:26">c</name><operator pos:start="495:27" pos:end="495:28">-&gt;</operator><name pos:start="495:29" pos:end="495:34">status</name><index pos:start="495:35" pos:end="495:37">[<expr pos:start="495:36" pos:end="495:36"><literal type="number" pos:start="495:36" pos:end="495:36">0</literal></expr>]</index></name><operator pos:start="495:38" pos:end="495:38">.</operator><name pos:start="495:39" pos:end="495:47">predictor</name> <operator pos:start="495:49" pos:end="495:49">-</operator> <name pos:start="495:51" pos:end="495:62"><name pos:start="495:51" pos:end="495:51">c</name><operator pos:start="495:52" pos:end="495:53">-&gt;</operator><name pos:start="495:54" pos:end="495:59">status</name><index pos:start="495:60" pos:end="495:62">[<expr pos:start="495:61" pos:end="495:61"><literal type="number" pos:start="495:61" pos:end="495:61">1</literal></expr>]</index></name><operator pos:start="495:63" pos:end="495:63">.</operator><name pos:start="495:64" pos:end="495:72">predictor</name></expr>;</expr_stmt>



            <comment type="block" pos:start="499:13" pos:end="499:65">/* process the second predictor of the sum channel */</comment>

            <expr_stmt pos:start="501:13" pos:end="501:34"><expr pos:start="501:13" pos:end="501:33"><call pos:start="501:13" pos:end="501:33"><name pos:start="501:13" pos:end="501:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="501:32" pos:end="501:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:62"><expr pos:start="503:13" pos:end="503:61"><call pos:start="503:13" pos:end="503:61"><name pos:start="503:13" pos:end="503:35">adpcm_ima_expand_nibble</name><argument_list pos:start="503:36" pos:end="503:61">(<argument pos:start="503:37" pos:end="503:49"><expr pos:start="503:37" pos:end="503:49"><operator pos:start="503:37" pos:end="503:37">&amp;</operator><name pos:start="503:38" pos:end="503:49"><name pos:start="503:38" pos:end="503:38">c</name><operator pos:start="503:39" pos:end="503:40">-&gt;</operator><name pos:start="503:41" pos:end="503:46">status</name><index pos:start="503:47" pos:end="503:49">[<expr pos:start="503:48" pos:end="503:48"><literal type="number" pos:start="503:48" pos:end="503:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="503:52" pos:end="503:57"><expr pos:start="503:52" pos:end="503:57"><name pos:start="503:52" pos:end="503:57">nibble</name></expr></argument>, <argument pos:start="503:60" pos:end="503:60"><expr pos:start="503:60" pos:end="503:60"><literal type="number" pos:start="503:60" pos:end="503:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="507:13" pos:end="507:63">/* process the second pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="509:13" pos:end="509:71"><expr pos:start="509:13" pos:end="509:70"><name pos:start="509:13" pos:end="509:24">diff_channel</name> <operator pos:start="509:26" pos:end="509:26">=</operator> <operator pos:start="509:28" pos:end="509:28">(</operator><name pos:start="509:29" pos:end="509:40">diff_channel</name> <operator pos:start="509:42" pos:end="509:42">+</operator> <name pos:start="509:44" pos:end="509:55"><name pos:start="509:44" pos:end="509:44">c</name><operator pos:start="509:45" pos:end="509:46">-&gt;</operator><name pos:start="509:47" pos:end="509:52">status</name><index pos:start="509:53" pos:end="509:55">[<expr pos:start="509:54" pos:end="509:54"><literal type="number" pos:start="509:54" pos:end="509:54">1</literal></expr>]</index></name><operator pos:start="509:56" pos:end="509:56">.</operator><name pos:start="509:57" pos:end="509:65">predictor</name><operator pos:start="509:66" pos:end="509:66">)</operator> <operator pos:start="509:68" pos:end="509:68">/</operator> <literal type="number" pos:start="509:70" pos:end="509:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:73"><expr pos:start="511:13" pos:end="511:72"><operator pos:start="511:13" pos:end="511:13">*</operator><name pos:start="511:14" pos:end="511:20">samples</name><operator pos:start="511:21" pos:end="511:22">++</operator> <operator pos:start="511:24" pos:end="511:24">=</operator> <name pos:start="511:26" pos:end="511:37"><name pos:start="511:26" pos:end="511:26">c</name><operator pos:start="511:27" pos:end="511:28">-&gt;</operator><name pos:start="511:29" pos:end="511:34">status</name><index pos:start="511:35" pos:end="511:37">[<expr pos:start="511:36" pos:end="511:36"><literal type="number" pos:start="511:36" pos:end="511:36">0</literal></expr>]</index></name><operator pos:start="511:38" pos:end="511:38">.</operator><name pos:start="511:39" pos:end="511:47">predictor</name> <operator pos:start="511:49" pos:end="511:49">+</operator> <name pos:start="511:51" pos:end="511:62"><name pos:start="511:51" pos:end="511:51">c</name><operator pos:start="511:52" pos:end="511:53">-&gt;</operator><name pos:start="511:54" pos:end="511:59">status</name><index pos:start="511:60" pos:end="511:62">[<expr pos:start="511:61" pos:end="511:61"><literal type="number" pos:start="511:61" pos:end="511:61">1</literal></expr>]</index></name><operator pos:start="511:63" pos:end="511:63">.</operator><name pos:start="511:64" pos:end="511:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:73"><expr pos:start="513:13" pos:end="513:72"><operator pos:start="513:13" pos:end="513:13">*</operator><name pos:start="513:14" pos:end="513:20">samples</name><operator pos:start="513:21" pos:end="513:22">++</operator> <operator pos:start="513:24" pos:end="513:24">=</operator> <name pos:start="513:26" pos:end="513:37"><name pos:start="513:26" pos:end="513:26">c</name><operator pos:start="513:27" pos:end="513:28">-&gt;</operator><name pos:start="513:29" pos:end="513:34">status</name><index pos:start="513:35" pos:end="513:37">[<expr pos:start="513:36" pos:end="513:36"><literal type="number" pos:start="513:36" pos:end="513:36">0</literal></expr>]</index></name><operator pos:start="513:38" pos:end="513:38">.</operator><name pos:start="513:39" pos:end="513:47">predictor</name> <operator pos:start="513:49" pos:end="513:49">-</operator> <name pos:start="513:51" pos:end="513:62"><name pos:start="513:51" pos:end="513:51">c</name><operator pos:start="513:52" pos:end="513:53">-&gt;</operator><name pos:start="513:54" pos:end="513:59">status</name><index pos:start="513:60" pos:end="513:62">[<expr pos:start="513:61" pos:end="513:61"><literal type="number" pos:start="513:61" pos:end="513:61">1</literal></expr>]</index></name><operator pos:start="513:63" pos:end="513:63">.</operator><name pos:start="513:64" pos:end="513:72">predictor</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="517:9" pos:end="517:14">break;</break>

    <case pos:start="519:5" pos:end="519:32">case <expr pos:start="519:10" pos:end="519:31"><name pos:start="519:10" pos:end="519:31">CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>

        <expr_stmt pos:start="521:9" pos:end="521:60"><expr pos:start="521:9" pos:end="521:59"><name pos:start="521:9" pos:end="521:20"><name pos:start="521:9" pos:end="521:9">c</name><operator pos:start="521:10" pos:end="521:11">-&gt;</operator><name pos:start="521:12" pos:end="521:17">status</name><index pos:start="521:18" pos:end="521:20">[<expr pos:start="521:19" pos:end="521:19"><literal type="number" pos:start="521:19" pos:end="521:19">0</literal></expr>]</index></name><operator pos:start="521:21" pos:end="521:21">.</operator><name pos:start="521:22" pos:end="521:30">predictor</name>  <operator pos:start="521:33" pos:end="521:33">=</operator> <operator pos:start="521:35" pos:end="521:35">(</operator><name pos:start="521:36" pos:end="521:42">int16_t</name><operator pos:start="521:43" pos:end="521:43">)</operator><call pos:start="521:44" pos:end="521:59"><name pos:start="521:44" pos:end="521:50">AV_RL16</name><argument_list pos:start="521:51" pos:end="521:59">(<argument pos:start="521:52" pos:end="521:58"><expr pos:start="521:52" pos:end="521:58"><name pos:start="521:52" pos:end="521:54">src</name> <operator pos:start="521:56" pos:end="521:56">+</operator> <literal type="number" pos:start="521:58" pos:end="521:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="523:9" pos:end="523:41"><expr pos:start="523:9" pos:end="523:40"><name pos:start="523:9" pos:end="523:20"><name pos:start="523:9" pos:end="523:9">c</name><operator pos:start="523:10" pos:end="523:11">-&gt;</operator><name pos:start="523:12" pos:end="523:17">status</name><index pos:start="523:18" pos:end="523:20">[<expr pos:start="523:19" pos:end="523:19"><literal type="number" pos:start="523:19" pos:end="523:19">0</literal></expr>]</index></name><operator pos:start="523:21" pos:end="523:21">.</operator><name pos:start="523:22" pos:end="523:31">step_index</name> <operator pos:start="523:33" pos:end="523:33">=</operator> <name pos:start="523:35" pos:end="523:40"><name pos:start="523:35" pos:end="523:37">src</name><index pos:start="523:38" pos:end="523:40">[<expr pos:start="523:39" pos:end="523:39"><literal type="number" pos:start="523:39" pos:end="523:39">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="525:9" pos:end="525:17"><expr pos:start="525:9" pos:end="525:16"><name pos:start="525:9" pos:end="525:11">src</name> <operator pos:start="525:13" pos:end="525:14">+=</operator> <literal type="number" pos:start="525:16" pos:end="525:16">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="527:9" pos:end="535:9"><if pos:start="527:9" pos:end="535:9">if<condition pos:start="527:11" pos:end="527:14">(<expr pos:start="527:12" pos:end="527:13"><name pos:start="527:12" pos:end="527:13">st</name></expr>)</condition> <block pos:start="527:16" pos:end="535:9">{<block_content pos:start="529:13" pos:end="533:21">

            <expr_stmt pos:start="529:13" pos:end="529:64"><expr pos:start="529:13" pos:end="529:63"><name pos:start="529:13" pos:end="529:24"><name pos:start="529:13" pos:end="529:13">c</name><operator pos:start="529:14" pos:end="529:15">-&gt;</operator><name pos:start="529:16" pos:end="529:21">status</name><index pos:start="529:22" pos:end="529:24">[<expr pos:start="529:23" pos:end="529:23"><literal type="number" pos:start="529:23" pos:end="529:23">1</literal></expr>]</index></name><operator pos:start="529:25" pos:end="529:25">.</operator><name pos:start="529:26" pos:end="529:34">predictor</name>  <operator pos:start="529:37" pos:end="529:37">=</operator> <operator pos:start="529:39" pos:end="529:39">(</operator><name pos:start="529:40" pos:end="529:46">int16_t</name><operator pos:start="529:47" pos:end="529:47">)</operator><call pos:start="529:48" pos:end="529:63"><name pos:start="529:48" pos:end="529:54">AV_RL16</name><argument_list pos:start="529:55" pos:end="529:63">(<argument pos:start="529:56" pos:end="529:62"><expr pos:start="529:56" pos:end="529:62"><name pos:start="529:56" pos:end="529:58">src</name> <operator pos:start="529:60" pos:end="529:60">+</operator> <literal type="number" pos:start="529:62" pos:end="529:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:45"><expr pos:start="531:13" pos:end="531:44"><name pos:start="531:13" pos:end="531:24"><name pos:start="531:13" pos:end="531:13">c</name><operator pos:start="531:14" pos:end="531:15">-&gt;</operator><name pos:start="531:16" pos:end="531:21">status</name><index pos:start="531:22" pos:end="531:24">[<expr pos:start="531:23" pos:end="531:23"><literal type="number" pos:start="531:23" pos:end="531:23">1</literal></expr>]</index></name><operator pos:start="531:25" pos:end="531:25">.</operator><name pos:start="531:26" pos:end="531:35">step_index</name> <operator pos:start="531:37" pos:end="531:37">=</operator> <name pos:start="531:39" pos:end="531:44"><name pos:start="531:39" pos:end="531:41">src</name><index pos:start="531:42" pos:end="531:44">[<expr pos:start="531:43" pos:end="531:43"><literal type="number" pos:start="531:43" pos:end="531:43">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:21"><expr pos:start="533:13" pos:end="533:20"><name pos:start="533:13" pos:end="533:15">src</name> <operator pos:start="533:17" pos:end="533:18">+=</operator> <literal type="number" pos:start="533:20" pos:end="533:20">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <while pos:start="539:9" pos:end="569:9">while <condition pos:start="539:15" pos:end="539:36">(<expr pos:start="539:16" pos:end="539:35"><name pos:start="539:16" pos:end="539:18">src</name> <operator pos:start="539:20" pos:end="539:20">&lt;</operator> <name pos:start="539:22" pos:end="539:24">buf</name> <operator pos:start="539:26" pos:end="539:26">+</operator> <name pos:start="539:28" pos:end="539:35">buf_size</name></expr>)</condition> <block pos:start="539:38" pos:end="569:9">{<block_content pos:start="543:13" pos:end="567:18">



            <if_stmt pos:start="543:13" pos:end="563:13"><if pos:start="543:13" pos:end="553:13">if <condition pos:start="543:16" pos:end="543:19">(<expr pos:start="543:17" pos:end="543:18"><name pos:start="543:17" pos:end="543:18">st</name></expr>)</condition> <block pos:start="543:21" pos:end="553:13">{<block_content pos:start="545:17" pos:end="551:38">

                <expr_stmt pos:start="545:17" pos:end="547:38"><expr pos:start="545:17" pos:end="547:37"><operator pos:start="545:17" pos:end="545:17">*</operator><name pos:start="545:18" pos:end="545:24">samples</name><operator pos:start="545:25" pos:end="545:26">++</operator> <operator pos:start="545:28" pos:end="545:28">=</operator> <call pos:start="545:30" pos:end="547:37"><name pos:start="545:30" pos:end="545:52">adpcm_ima_expand_nibble</name><argument_list pos:start="545:53" pos:end="547:37">(<argument pos:start="545:54" pos:end="545:66"><expr pos:start="545:54" pos:end="545:66"><operator pos:start="545:54" pos:end="545:54">&amp;</operator><name pos:start="545:55" pos:end="545:66"><name pos:start="545:55" pos:end="545:55">c</name><operator pos:start="545:56" pos:end="545:57">-&gt;</operator><name pos:start="545:58" pos:end="545:63">status</name><index pos:start="545:64" pos:end="545:66">[<expr pos:start="545:65" pos:end="545:65"><literal type="number" pos:start="545:65" pos:end="545:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="547:21" pos:end="547:31"><expr pos:start="547:21" pos:end="547:31"><name pos:start="547:21" pos:end="547:26"><name pos:start="547:21" pos:end="547:23">src</name><index pos:start="547:24" pos:end="547:26">[<expr pos:start="547:25" pos:end="547:25"><literal type="number" pos:start="547:25" pos:end="547:25">0</literal></expr>]</index></name> <operator pos:start="547:28" pos:end="547:29">&gt;&gt;</operator> <literal type="number" pos:start="547:31" pos:end="547:31">4</literal></expr></argument>  , <argument pos:start="547:36" pos:end="547:36"><expr pos:start="547:36" pos:end="547:36"><literal type="number" pos:start="547:36" pos:end="547:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="549:17" pos:end="551:38"><expr pos:start="549:17" pos:end="551:37"><operator pos:start="549:17" pos:end="549:17">*</operator><name pos:start="549:18" pos:end="549:24">samples</name><operator pos:start="549:25" pos:end="549:26">++</operator> <operator pos:start="549:28" pos:end="549:28">=</operator> <call pos:start="549:30" pos:end="551:37"><name pos:start="549:30" pos:end="549:52">adpcm_ima_expand_nibble</name><argument_list pos:start="549:53" pos:end="551:37">(<argument pos:start="549:54" pos:end="549:66"><expr pos:start="549:54" pos:end="549:66"><operator pos:start="549:54" pos:end="549:54">&amp;</operator><name pos:start="549:55" pos:end="549:66"><name pos:start="549:55" pos:end="549:55">c</name><operator pos:start="549:56" pos:end="549:57">-&gt;</operator><name pos:start="549:58" pos:end="549:63">status</name><index pos:start="549:64" pos:end="549:66">[<expr pos:start="549:65" pos:end="549:65"><literal type="number" pos:start="549:65" pos:end="549:65">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="551:21" pos:end="551:33"><expr pos:start="551:21" pos:end="551:33"><name pos:start="551:21" pos:end="551:26"><name pos:start="551:21" pos:end="551:23">src</name><index pos:start="551:24" pos:end="551:26">[<expr pos:start="551:25" pos:end="551:25"><literal type="number" pos:start="551:25" pos:end="551:25">0</literal></expr>]</index></name> <operator pos:start="551:28" pos:end="551:28">&amp;</operator> <literal type="number" pos:start="551:30" pos:end="551:33">0x0F</literal></expr></argument>, <argument pos:start="551:36" pos:end="551:36"><expr pos:start="551:36" pos:end="551:36"><literal type="number" pos:start="551:36" pos:end="551:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="553:15" pos:end="563:13">else <block pos:start="553:20" pos:end="563:13">{<block_content pos:start="555:17" pos:end="561:38">

                <expr_stmt pos:start="555:17" pos:end="557:38"><expr pos:start="555:17" pos:end="557:37"><operator pos:start="555:17" pos:end="555:17">*</operator><name pos:start="555:18" pos:end="555:24">samples</name><operator pos:start="555:25" pos:end="555:26">++</operator> <operator pos:start="555:28" pos:end="555:28">=</operator> <call pos:start="555:30" pos:end="557:37"><name pos:start="555:30" pos:end="555:52">adpcm_ima_expand_nibble</name><argument_list pos:start="555:53" pos:end="557:37">(<argument pos:start="555:54" pos:end="555:66"><expr pos:start="555:54" pos:end="555:66"><operator pos:start="555:54" pos:end="555:54">&amp;</operator><name pos:start="555:55" pos:end="555:66"><name pos:start="555:55" pos:end="555:55">c</name><operator pos:start="555:56" pos:end="555:57">-&gt;</operator><name pos:start="555:58" pos:end="555:63">status</name><index pos:start="555:64" pos:end="555:66">[<expr pos:start="555:65" pos:end="555:65"><literal type="number" pos:start="555:65" pos:end="555:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="557:21" pos:end="557:33"><expr pos:start="557:21" pos:end="557:33"><name pos:start="557:21" pos:end="557:26"><name pos:start="557:21" pos:end="557:23">src</name><index pos:start="557:24" pos:end="557:26">[<expr pos:start="557:25" pos:end="557:25"><literal type="number" pos:start="557:25" pos:end="557:25">0</literal></expr>]</index></name> <operator pos:start="557:28" pos:end="557:28">&amp;</operator> <literal type="number" pos:start="557:30" pos:end="557:33">0x0F</literal></expr></argument>, <argument pos:start="557:36" pos:end="557:36"><expr pos:start="557:36" pos:end="557:36"><literal type="number" pos:start="557:36" pos:end="557:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="559:17" pos:end="561:38"><expr pos:start="559:17" pos:end="561:37"><operator pos:start="559:17" pos:end="559:17">*</operator><name pos:start="559:18" pos:end="559:24">samples</name><operator pos:start="559:25" pos:end="559:26">++</operator> <operator pos:start="559:28" pos:end="559:28">=</operator> <call pos:start="559:30" pos:end="561:37"><name pos:start="559:30" pos:end="559:52">adpcm_ima_expand_nibble</name><argument_list pos:start="559:53" pos:end="561:37">(<argument pos:start="559:54" pos:end="559:66"><expr pos:start="559:54" pos:end="559:66"><operator pos:start="559:54" pos:end="559:54">&amp;</operator><name pos:start="559:55" pos:end="559:66"><name pos:start="559:55" pos:end="559:55">c</name><operator pos:start="559:56" pos:end="559:57">-&gt;</operator><name pos:start="559:58" pos:end="559:63">status</name><index pos:start="559:64" pos:end="559:66">[<expr pos:start="559:65" pos:end="559:65"><literal type="number" pos:start="559:65" pos:end="559:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="561:21" pos:end="561:31"><expr pos:start="561:21" pos:end="561:31"><name pos:start="561:21" pos:end="561:26"><name pos:start="561:21" pos:end="561:23">src</name><index pos:start="561:24" pos:end="561:26">[<expr pos:start="561:25" pos:end="561:25"><literal type="number" pos:start="561:25" pos:end="561:25">0</literal></expr>]</index></name> <operator pos:start="561:28" pos:end="561:29">&gt;&gt;</operator> <literal type="number" pos:start="561:31" pos:end="561:31">4</literal></expr></argument>  , <argument pos:start="561:36" pos:end="561:36"><expr pos:start="561:36" pos:end="561:36"><literal type="number" pos:start="561:36" pos:end="561:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="567:13" pos:end="567:18"><expr pos:start="567:13" pos:end="567:17"><name pos:start="567:13" pos:end="567:15">src</name><operator pos:start="567:16" pos:end="567:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="571:9" pos:end="571:14">break;</break>

    <case pos:start="573:5" pos:end="573:31">case <expr pos:start="573:10" pos:end="573:30"><name pos:start="573:10" pos:end="573:30">CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>

        <comment type="block" pos:start="575:9" pos:end="575:71">/* no per-block initialization; just start decoding the data */</comment>

        <while pos:start="577:9" pos:end="607:9">while <condition pos:start="577:15" pos:end="577:36">(<expr pos:start="577:16" pos:end="577:35"><name pos:start="577:16" pos:end="577:18">src</name> <operator pos:start="577:20" pos:end="577:20">&lt;</operator> <name pos:start="577:22" pos:end="577:24">buf</name> <operator pos:start="577:26" pos:end="577:26">+</operator> <name pos:start="577:28" pos:end="577:35">buf_size</name></expr>)</condition> <block pos:start="577:38" pos:end="607:9">{<block_content pos:start="581:13" pos:end="605:18">



            <if_stmt pos:start="581:13" pos:end="601:13"><if pos:start="581:13" pos:end="591:13">if <condition pos:start="581:16" pos:end="581:19">(<expr pos:start="581:17" pos:end="581:18"><name pos:start="581:17" pos:end="581:18">st</name></expr>)</condition> <block pos:start="581:21" pos:end="591:13">{<block_content pos:start="583:17" pos:end="589:38">

                <expr_stmt pos:start="583:17" pos:end="585:38"><expr pos:start="583:17" pos:end="585:37"><operator pos:start="583:17" pos:end="583:17">*</operator><name pos:start="583:18" pos:end="583:24">samples</name><operator pos:start="583:25" pos:end="583:26">++</operator> <operator pos:start="583:28" pos:end="583:28">=</operator> <call pos:start="583:30" pos:end="585:37"><name pos:start="583:30" pos:end="583:52">adpcm_ima_expand_nibble</name><argument_list pos:start="583:53" pos:end="585:37">(<argument pos:start="583:54" pos:end="583:66"><expr pos:start="583:54" pos:end="583:66"><operator pos:start="583:54" pos:end="583:54">&amp;</operator><name pos:start="583:55" pos:end="583:66"><name pos:start="583:55" pos:end="583:55">c</name><operator pos:start="583:56" pos:end="583:57">-&gt;</operator><name pos:start="583:58" pos:end="583:63">status</name><index pos:start="583:64" pos:end="583:66">[<expr pos:start="583:65" pos:end="583:65"><literal type="number" pos:start="583:65" pos:end="583:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="585:21" pos:end="585:31"><expr pos:start="585:21" pos:end="585:31"><name pos:start="585:21" pos:end="585:26"><name pos:start="585:21" pos:end="585:23">src</name><index pos:start="585:24" pos:end="585:26">[<expr pos:start="585:25" pos:end="585:25"><literal type="number" pos:start="585:25" pos:end="585:25">0</literal></expr>]</index></name> <operator pos:start="585:28" pos:end="585:29">&gt;&gt;</operator> <literal type="number" pos:start="585:31" pos:end="585:31">4</literal></expr></argument>  , <argument pos:start="585:36" pos:end="585:36"><expr pos:start="585:36" pos:end="585:36"><literal type="number" pos:start="585:36" pos:end="585:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="587:17" pos:end="589:38"><expr pos:start="587:17" pos:end="589:37"><operator pos:start="587:17" pos:end="587:17">*</operator><name pos:start="587:18" pos:end="587:24">samples</name><operator pos:start="587:25" pos:end="587:26">++</operator> <operator pos:start="587:28" pos:end="587:28">=</operator> <call pos:start="587:30" pos:end="589:37"><name pos:start="587:30" pos:end="587:52">adpcm_ima_expand_nibble</name><argument_list pos:start="587:53" pos:end="589:37">(<argument pos:start="587:54" pos:end="587:66"><expr pos:start="587:54" pos:end="587:66"><operator pos:start="587:54" pos:end="587:54">&amp;</operator><name pos:start="587:55" pos:end="587:66"><name pos:start="587:55" pos:end="587:55">c</name><operator pos:start="587:56" pos:end="587:57">-&gt;</operator><name pos:start="587:58" pos:end="587:63">status</name><index pos:start="587:64" pos:end="587:66">[<expr pos:start="587:65" pos:end="587:65"><literal type="number" pos:start="587:65" pos:end="587:65">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="589:21" pos:end="589:33"><expr pos:start="589:21" pos:end="589:33"><name pos:start="589:21" pos:end="589:26"><name pos:start="589:21" pos:end="589:23">src</name><index pos:start="589:24" pos:end="589:26">[<expr pos:start="589:25" pos:end="589:25"><literal type="number" pos:start="589:25" pos:end="589:25">0</literal></expr>]</index></name> <operator pos:start="589:28" pos:end="589:28">&amp;</operator> <literal type="number" pos:start="589:30" pos:end="589:33">0x0F</literal></expr></argument>, <argument pos:start="589:36" pos:end="589:36"><expr pos:start="589:36" pos:end="589:36"><literal type="number" pos:start="589:36" pos:end="589:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="591:15" pos:end="601:13">else <block pos:start="591:20" pos:end="601:13">{<block_content pos:start="593:17" pos:end="599:38">

                <expr_stmt pos:start="593:17" pos:end="595:38"><expr pos:start="593:17" pos:end="595:37"><operator pos:start="593:17" pos:end="593:17">*</operator><name pos:start="593:18" pos:end="593:24">samples</name><operator pos:start="593:25" pos:end="593:26">++</operator> <operator pos:start="593:28" pos:end="593:28">=</operator> <call pos:start="593:30" pos:end="595:37"><name pos:start="593:30" pos:end="593:52">adpcm_ima_expand_nibble</name><argument_list pos:start="593:53" pos:end="595:37">(<argument pos:start="593:54" pos:end="593:66"><expr pos:start="593:54" pos:end="593:66"><operator pos:start="593:54" pos:end="593:54">&amp;</operator><name pos:start="593:55" pos:end="593:66"><name pos:start="593:55" pos:end="593:55">c</name><operator pos:start="593:56" pos:end="593:57">-&gt;</operator><name pos:start="593:58" pos:end="593:63">status</name><index pos:start="593:64" pos:end="593:66">[<expr pos:start="593:65" pos:end="593:65"><literal type="number" pos:start="593:65" pos:end="593:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="595:21" pos:end="595:31"><expr pos:start="595:21" pos:end="595:31"><name pos:start="595:21" pos:end="595:26"><name pos:start="595:21" pos:end="595:23">src</name><index pos:start="595:24" pos:end="595:26">[<expr pos:start="595:25" pos:end="595:25"><literal type="number" pos:start="595:25" pos:end="595:25">0</literal></expr>]</index></name> <operator pos:start="595:28" pos:end="595:29">&gt;&gt;</operator> <literal type="number" pos:start="595:31" pos:end="595:31">4</literal></expr></argument>  , <argument pos:start="595:36" pos:end="595:36"><expr pos:start="595:36" pos:end="595:36"><literal type="number" pos:start="595:36" pos:end="595:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="597:17" pos:end="599:38"><expr pos:start="597:17" pos:end="599:37"><operator pos:start="597:17" pos:end="597:17">*</operator><name pos:start="597:18" pos:end="597:24">samples</name><operator pos:start="597:25" pos:end="597:26">++</operator> <operator pos:start="597:28" pos:end="597:28">=</operator> <call pos:start="597:30" pos:end="599:37"><name pos:start="597:30" pos:end="597:52">adpcm_ima_expand_nibble</name><argument_list pos:start="597:53" pos:end="599:37">(<argument pos:start="597:54" pos:end="597:66"><expr pos:start="597:54" pos:end="597:66"><operator pos:start="597:54" pos:end="597:54">&amp;</operator><name pos:start="597:55" pos:end="597:66"><name pos:start="597:55" pos:end="597:55">c</name><operator pos:start="597:56" pos:end="597:57">-&gt;</operator><name pos:start="597:58" pos:end="597:63">status</name><index pos:start="597:64" pos:end="597:66">[<expr pos:start="597:65" pos:end="597:65"><literal type="number" pos:start="597:65" pos:end="597:65">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="599:21" pos:end="599:33"><expr pos:start="599:21" pos:end="599:33"><name pos:start="599:21" pos:end="599:26"><name pos:start="599:21" pos:end="599:23">src</name><index pos:start="599:24" pos:end="599:26">[<expr pos:start="599:25" pos:end="599:25"><literal type="number" pos:start="599:25" pos:end="599:25">0</literal></expr>]</index></name> <operator pos:start="599:28" pos:end="599:28">&amp;</operator> <literal type="number" pos:start="599:30" pos:end="599:33">0x0F</literal></expr></argument>, <argument pos:start="599:36" pos:end="599:36"><expr pos:start="599:36" pos:end="599:36"><literal type="number" pos:start="599:36" pos:end="599:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="605:13" pos:end="605:18"><expr pos:start="605:13" pos:end="605:17"><name pos:start="605:13" pos:end="605:15">src</name><operator pos:start="605:16" pos:end="605:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="609:9" pos:end="609:14">break;</break>

    <case pos:start="611:5" pos:end="611:27">case <expr pos:start="611:10" pos:end="611:26"><name pos:start="611:10" pos:end="611:26">CODEC_ID_ADPCM_XA</name></expr>:</case>

        <while pos:start="613:9" pos:end="625:9">while <condition pos:start="613:15" pos:end="613:31">(<expr pos:start="613:16" pos:end="613:30"><name pos:start="613:16" pos:end="613:23">buf_size</name> <operator pos:start="613:25" pos:end="613:26">&gt;=</operator> <literal type="number" pos:start="613:28" pos:end="613:30">128</literal></expr>)</condition> <block pos:start="613:33" pos:end="625:9">{<block_content pos:start="615:13" pos:end="623:28">

            <expr_stmt pos:start="615:13" pos:end="617:33"><expr pos:start="615:13" pos:end="617:32"><call pos:start="615:13" pos:end="617:32"><name pos:start="615:13" pos:end="615:21">xa_decode</name><argument_list pos:start="615:22" pos:end="617:32">(<argument pos:start="615:23" pos:end="615:29"><expr pos:start="615:23" pos:end="615:29"><name pos:start="615:23" pos:end="615:29">samples</name></expr></argument>, <argument pos:start="615:32" pos:end="615:34"><expr pos:start="615:32" pos:end="615:34"><name pos:start="615:32" pos:end="615:34">src</name></expr></argument>, <argument pos:start="615:37" pos:end="615:49"><expr pos:start="615:37" pos:end="615:49"><operator pos:start="615:37" pos:end="615:37">&amp;</operator><name pos:start="615:38" pos:end="615:49"><name pos:start="615:38" pos:end="615:38">c</name><operator pos:start="615:39" pos:end="615:40">-&gt;</operator><name pos:start="615:41" pos:end="615:46">status</name><index pos:start="615:47" pos:end="615:49">[<expr pos:start="615:48" pos:end="615:48"><literal type="number" pos:start="615:48" pos:end="615:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="615:52" pos:end="615:64"><expr pos:start="615:52" pos:end="615:64"><operator pos:start="615:52" pos:end="615:52">&amp;</operator><name pos:start="615:53" pos:end="615:64"><name pos:start="615:53" pos:end="615:53">c</name><operator pos:start="615:54" pos:end="615:55">-&gt;</operator><name pos:start="615:56" pos:end="615:61">status</name><index pos:start="615:62" pos:end="615:64">[<expr pos:start="615:63" pos:end="615:63"><literal type="number" pos:start="615:63" pos:end="615:63">1</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="617:17" pos:end="617:31"><expr pos:start="617:17" pos:end="617:31"><name pos:start="617:17" pos:end="617:31"><name pos:start="617:17" pos:end="617:21">avctx</name><operator pos:start="617:22" pos:end="617:23">-&gt;</operator><name pos:start="617:24" pos:end="617:31">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="619:13" pos:end="619:23"><expr pos:start="619:13" pos:end="619:22"><name pos:start="619:13" pos:end="619:15">src</name> <operator pos:start="619:17" pos:end="619:18">+=</operator> <literal type="number" pos:start="619:20" pos:end="619:22">128</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="621:13" pos:end="621:30"><expr pos:start="621:13" pos:end="621:29"><name pos:start="621:13" pos:end="621:19">samples</name> <operator pos:start="621:21" pos:end="621:22">+=</operator> <literal type="number" pos:start="621:24" pos:end="621:25">28</literal> <operator pos:start="621:27" pos:end="621:27">*</operator> <literal type="number" pos:start="621:29" pos:end="621:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="623:13" pos:end="623:28"><expr pos:start="623:13" pos:end="623:27"><name pos:start="623:13" pos:end="623:20">buf_size</name> <operator pos:start="623:22" pos:end="623:23">-=</operator> <literal type="number" pos:start="623:25" pos:end="623:27">128</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="627:9" pos:end="627:14">break;</break>

    <case pos:start="629:5" pos:end="629:36">case <expr pos:start="629:10" pos:end="629:35"><name pos:start="629:10" pos:end="629:35">CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>

        <expr_stmt pos:start="631:9" pos:end="631:63"><expr pos:start="631:9" pos:end="631:62"><name pos:start="631:9" pos:end="631:24">samples_in_chunk</name> <operator pos:start="631:26" pos:end="631:26">=</operator> <call pos:start="631:28" pos:end="631:52"><name pos:start="631:28" pos:end="631:46">bytestream_get_le32</name><argument_list pos:start="631:47" pos:end="631:52">(<argument pos:start="631:48" pos:end="631:51"><expr pos:start="631:48" pos:end="631:51"><operator pos:start="631:48" pos:end="631:48">&amp;</operator><name pos:start="631:49" pos:end="631:51">src</name></expr></argument>)</argument_list></call> <operator pos:start="631:54" pos:end="631:55">&gt;&gt;</operator> <operator pos:start="631:57" pos:end="631:57">(</operator><literal type="number" pos:start="631:58" pos:end="631:59">1</literal><operator pos:start="631:59" pos:end="631:59">-</operator><name pos:start="631:60" pos:end="631:61">st</name><operator pos:start="631:62" pos:end="631:62">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="635:9" pos:end="641:9"><if pos:start="635:9" pos:end="641:9">if <condition pos:start="635:12" pos:end="635:50">(<expr pos:start="635:13" pos:end="635:49"><name pos:start="635:13" pos:end="635:28">samples_in_chunk</name> <operator pos:start="635:30" pos:end="635:30">&gt;</operator> <name pos:start="635:32" pos:end="635:39">buf_size</name><operator pos:start="635:40" pos:end="635:40">-</operator><literal type="number" pos:start="635:41" pos:end="635:42">4</literal><operator pos:start="635:42" pos:end="635:42">-</operator><operator pos:start="635:43" pos:end="635:43">(</operator><literal type="number" pos:start="635:44" pos:end="635:44">8</literal><operator pos:start="635:45" pos:end="635:46">&lt;&lt;</operator><name pos:start="635:47" pos:end="635:48">st</name><operator pos:start="635:49" pos:end="635:49">)</operator></expr>)</condition> <block pos:start="635:52" pos:end="641:9">{<block_content pos:start="637:13" pos:end="639:18">

            <expr_stmt pos:start="637:13" pos:end="637:32"><expr pos:start="637:13" pos:end="637:31"><name pos:start="637:13" pos:end="637:15">src</name> <operator pos:start="637:17" pos:end="637:18">+=</operator> <name pos:start="637:20" pos:end="637:27">buf_size</name> <operator pos:start="637:29" pos:end="637:29">-</operator> <literal type="number" pos:start="637:31" pos:end="637:31">4</literal></expr>;</expr_stmt>

            <break pos:start="639:13" pos:end="639:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <for pos:start="645:9" pos:end="647:64">for <control pos:start="645:13" pos:end="645:29">(<init pos:start="645:14" pos:end="645:17"><expr pos:start="645:14" pos:end="645:16"><name pos:start="645:14" pos:end="645:14">i</name><operator pos:start="645:15" pos:end="645:15">=</operator><literal type="number" pos:start="645:16" pos:end="645:16">0</literal></expr>;</init> <condition pos:start="645:19" pos:end="645:24"><expr pos:start="645:19" pos:end="645:23"><name pos:start="645:19" pos:end="645:19">i</name><operator pos:start="645:20" pos:end="645:21">&lt;=</operator><name pos:start="645:22" pos:end="645:23">st</name></expr>;</condition> <incr pos:start="645:26" pos:end="645:28"><expr pos:start="645:26" pos:end="645:28"><name pos:start="645:26" pos:end="645:26">i</name><operator pos:start="645:27" pos:end="645:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="647:13" pos:end="647:64"><block_content pos:start="647:13" pos:end="647:64">

            <expr_stmt pos:start="647:13" pos:end="647:64"><expr pos:start="647:13" pos:end="647:63"><name pos:start="647:13" pos:end="647:24"><name pos:start="647:13" pos:end="647:13">c</name><operator pos:start="647:14" pos:end="647:15">-&gt;</operator><name pos:start="647:16" pos:end="647:21">status</name><index pos:start="647:22" pos:end="647:24">[<expr pos:start="647:23" pos:end="647:23"><name pos:start="647:23" pos:end="647:23">i</name></expr>]</index></name><operator pos:start="647:25" pos:end="647:25">.</operator><name pos:start="647:26" pos:end="647:35">step_index</name> <operator pos:start="647:37" pos:end="647:37">=</operator> <call pos:start="647:39" pos:end="647:63"><name pos:start="647:39" pos:end="647:57">bytestream_get_le32</name><argument_list pos:start="647:58" pos:end="647:63">(<argument pos:start="647:59" pos:end="647:62"><expr pos:start="647:59" pos:end="647:62"><operator pos:start="647:59" pos:end="647:59">&amp;</operator><name pos:start="647:60" pos:end="647:62">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="649:9" pos:end="651:64">for <control pos:start="649:13" pos:end="649:29">(<init pos:start="649:14" pos:end="649:17"><expr pos:start="649:14" pos:end="649:16"><name pos:start="649:14" pos:end="649:14">i</name><operator pos:start="649:15" pos:end="649:15">=</operator><literal type="number" pos:start="649:16" pos:end="649:16">0</literal></expr>;</init> <condition pos:start="649:19" pos:end="649:24"><expr pos:start="649:19" pos:end="649:23"><name pos:start="649:19" pos:end="649:19">i</name><operator pos:start="649:20" pos:end="649:21">&lt;=</operator><name pos:start="649:22" pos:end="649:23">st</name></expr>;</condition> <incr pos:start="649:26" pos:end="649:28"><expr pos:start="649:26" pos:end="649:28"><name pos:start="649:26" pos:end="649:26">i</name><operator pos:start="649:27" pos:end="649:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="651:13" pos:end="651:64"><block_content pos:start="651:13" pos:end="651:64">

            <expr_stmt pos:start="651:13" pos:end="651:64"><expr pos:start="651:13" pos:end="651:63"><name pos:start="651:13" pos:end="651:24"><name pos:start="651:13" pos:end="651:13">c</name><operator pos:start="651:14" pos:end="651:15">-&gt;</operator><name pos:start="651:16" pos:end="651:21">status</name><index pos:start="651:22" pos:end="651:24">[<expr pos:start="651:23" pos:end="651:23"><name pos:start="651:23" pos:end="651:23">i</name></expr>]</index></name><operator pos:start="651:25" pos:end="651:25">.</operator><name pos:start="651:26" pos:end="651:34">predictor</name>  <operator pos:start="651:37" pos:end="651:37">=</operator> <call pos:start="651:39" pos:end="651:63"><name pos:start="651:39" pos:end="651:57">bytestream_get_le32</name><argument_list pos:start="651:58" pos:end="651:63">(<argument pos:start="651:59" pos:end="651:62"><expr pos:start="651:59" pos:end="651:62"><operator pos:start="651:59" pos:end="651:59">&amp;</operator><name pos:start="651:60" pos:end="651:62">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="655:9" pos:end="661:9">for <control pos:start="655:13" pos:end="655:59">(<init pos:start="655:14" pos:end="655:14">;</init> <condition pos:start="655:16" pos:end="655:32"><expr pos:start="655:16" pos:end="655:31"><name pos:start="655:16" pos:end="655:31">samples_in_chunk</name></expr>;</condition> <incr pos:start="655:34" pos:end="655:58"><expr pos:start="655:34" pos:end="655:51"><name pos:start="655:34" pos:end="655:49">samples_in_chunk</name><operator pos:start="655:50" pos:end="655:51">--</operator></expr><operator pos:start="655:52" pos:end="655:52">,</operator> <expr pos:start="655:54" pos:end="655:58"><name pos:start="655:54" pos:end="655:56">src</name><operator pos:start="655:57" pos:end="655:58">++</operator></expr></incr>)</control> <block pos:start="655:61" pos:end="661:9">{<block_content pos:start="657:13" pos:end="659:79">

            <expr_stmt pos:start="657:13" pos:end="657:79"><expr pos:start="657:13" pos:end="657:78"><operator pos:start="657:13" pos:end="657:13">*</operator><name pos:start="657:14" pos:end="657:20">samples</name><operator pos:start="657:21" pos:end="657:22">++</operator> <operator pos:start="657:24" pos:end="657:24">=</operator> <call pos:start="657:26" pos:end="657:78"><name pos:start="657:26" pos:end="657:48">adpcm_ima_expand_nibble</name><argument_list pos:start="657:49" pos:end="657:78">(<argument pos:start="657:50" pos:end="657:62"><expr pos:start="657:50" pos:end="657:62"><operator pos:start="657:50" pos:end="657:50">&amp;</operator><name pos:start="657:51" pos:end="657:62"><name pos:start="657:51" pos:end="657:51">c</name><operator pos:start="657:52" pos:end="657:53">-&gt;</operator><name pos:start="657:54" pos:end="657:59">status</name><index pos:start="657:60" pos:end="657:62">[<expr pos:start="657:61" pos:end="657:61"><literal type="number" pos:start="657:61" pos:end="657:61">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="657:66" pos:end="657:72"><expr pos:start="657:66" pos:end="657:72"><operator pos:start="657:66" pos:end="657:66">*</operator><name pos:start="657:67" pos:end="657:69">src</name><operator pos:start="657:70" pos:end="657:71">&gt;&gt;</operator><literal type="number" pos:start="657:72" pos:end="657:72">4</literal></expr></argument>,   <argument pos:start="657:77" pos:end="657:77"><expr pos:start="657:77" pos:end="657:77"><literal type="number" pos:start="657:77" pos:end="657:77">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="659:13" pos:end="659:79"><expr pos:start="659:13" pos:end="659:78"><operator pos:start="659:13" pos:end="659:13">*</operator><name pos:start="659:14" pos:end="659:20">samples</name><operator pos:start="659:21" pos:end="659:22">++</operator> <operator pos:start="659:24" pos:end="659:24">=</operator> <call pos:start="659:26" pos:end="659:78"><name pos:start="659:26" pos:end="659:48">adpcm_ima_expand_nibble</name><argument_list pos:start="659:49" pos:end="659:78">(<argument pos:start="659:50" pos:end="659:63"><expr pos:start="659:50" pos:end="659:63"><operator pos:start="659:50" pos:end="659:50">&amp;</operator><name pos:start="659:51" pos:end="659:63"><name pos:start="659:51" pos:end="659:51">c</name><operator pos:start="659:52" pos:end="659:53">-&gt;</operator><name pos:start="659:54" pos:end="659:59">status</name><index pos:start="659:60" pos:end="659:63">[<expr pos:start="659:61" pos:end="659:62"><name pos:start="659:61" pos:end="659:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="659:66" pos:end="659:74"><expr pos:start="659:66" pos:end="659:74"><operator pos:start="659:66" pos:end="659:66">*</operator><name pos:start="659:67" pos:end="659:69">src</name><operator pos:start="659:70" pos:end="659:70">&amp;</operator><literal type="number" pos:start="659:71" pos:end="659:74">0x0F</literal></expr></argument>, <argument pos:start="659:77" pos:end="659:77"><expr pos:start="659:77" pos:end="659:77"><literal type="number" pos:start="659:77" pos:end="659:77">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="663:9" pos:end="663:14">break;</break>

    <case pos:start="665:5" pos:end="665:36">case <expr pos:start="665:10" pos:end="665:35"><name pos:start="665:10" pos:end="665:35">CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>

        <for pos:start="667:9" pos:end="673:9">for <control pos:start="667:13" pos:end="667:41">(<init pos:start="667:14" pos:end="667:14">;</init> <condition pos:start="667:16" pos:end="667:34"><expr pos:start="667:16" pos:end="667:33"><name pos:start="667:16" pos:end="667:18">src</name> <operator pos:start="667:20" pos:end="667:20">&lt;</operator> <name pos:start="667:22" pos:end="667:24">buf</name><operator pos:start="667:25" pos:end="667:25">+</operator><name pos:start="667:26" pos:end="667:33">buf_size</name></expr>;</condition> <incr pos:start="667:36" pos:end="667:40"><expr pos:start="667:36" pos:end="667:40"><name pos:start="667:36" pos:end="667:38">src</name><operator pos:start="667:39" pos:end="667:40">++</operator></expr></incr>)</control> <block pos:start="667:43" pos:end="673:9">{<block_content pos:start="669:13" pos:end="671:80">

            <expr_stmt pos:start="669:13" pos:end="669:80"><expr pos:start="669:13" pos:end="669:79"><operator pos:start="669:13" pos:end="669:13">*</operator><name pos:start="669:14" pos:end="669:20">samples</name><operator pos:start="669:21" pos:end="669:22">++</operator> <operator pos:start="669:24" pos:end="669:24">=</operator> <call pos:start="669:26" pos:end="669:79"><name pos:start="669:26" pos:end="669:48">adpcm_ima_expand_nibble</name><argument_list pos:start="669:49" pos:end="669:79">(<argument pos:start="669:50" pos:end="669:62"><expr pos:start="669:50" pos:end="669:62"><operator pos:start="669:50" pos:end="669:50">&amp;</operator><name pos:start="669:51" pos:end="669:62"><name pos:start="669:51" pos:end="669:51">c</name><operator pos:start="669:52" pos:end="669:53">-&gt;</operator><name pos:start="669:54" pos:end="669:59">status</name><index pos:start="669:60" pos:end="669:62">[<expr pos:start="669:61" pos:end="669:61"><literal type="number" pos:start="669:61" pos:end="669:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="669:65" pos:end="669:75"><expr pos:start="669:65" pos:end="669:75"><name pos:start="669:65" pos:end="669:70"><name pos:start="669:65" pos:end="669:67">src</name><index pos:start="669:68" pos:end="669:70">[<expr pos:start="669:69" pos:end="669:69"><literal type="number" pos:start="669:69" pos:end="669:69">0</literal></expr>]</index></name> <operator pos:start="669:72" pos:end="669:73">&gt;&gt;</operator> <literal type="number" pos:start="669:75" pos:end="669:75">4</literal></expr></argument>, <argument pos:start="669:78" pos:end="669:78"><expr pos:start="669:78" pos:end="669:78"><literal type="number" pos:start="669:78" pos:end="669:78">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="671:13" pos:end="671:80"><expr pos:start="671:13" pos:end="671:79"><operator pos:start="671:13" pos:end="671:13">*</operator><name pos:start="671:14" pos:end="671:20">samples</name><operator pos:start="671:21" pos:end="671:22">++</operator> <operator pos:start="671:24" pos:end="671:24">=</operator> <call pos:start="671:26" pos:end="671:79"><name pos:start="671:26" pos:end="671:48">adpcm_ima_expand_nibble</name><argument_list pos:start="671:49" pos:end="671:79">(<argument pos:start="671:50" pos:end="671:63"><expr pos:start="671:50" pos:end="671:63"><operator pos:start="671:50" pos:end="671:50">&amp;</operator><name pos:start="671:51" pos:end="671:63"><name pos:start="671:51" pos:end="671:51">c</name><operator pos:start="671:52" pos:end="671:53">-&gt;</operator><name pos:start="671:54" pos:end="671:59">status</name><index pos:start="671:60" pos:end="671:63">[<expr pos:start="671:61" pos:end="671:62"><name pos:start="671:61" pos:end="671:62">st</name></expr>]</index></name></expr></argument>,<argument pos:start="671:65" pos:end="671:75"><expr pos:start="671:65" pos:end="671:75"><name pos:start="671:65" pos:end="671:70"><name pos:start="671:65" pos:end="671:67">src</name><index pos:start="671:68" pos:end="671:70">[<expr pos:start="671:69" pos:end="671:69"><literal type="number" pos:start="671:69" pos:end="671:69">0</literal></expr>]</index></name><operator pos:start="671:71" pos:end="671:71">&amp;</operator><literal type="number" pos:start="671:72" pos:end="671:75">0x0F</literal></expr></argument>, <argument pos:start="671:78" pos:end="671:78"><expr pos:start="671:78" pos:end="671:78"><literal type="number" pos:start="671:78" pos:end="671:78">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="675:9" pos:end="675:14">break;</break>

    <case pos:start="677:5" pos:end="677:27">case <expr pos:start="677:10" pos:end="677:26"><name pos:start="677:10" pos:end="677:26">CODEC_ID_ADPCM_EA</name></expr>:</case>

        <comment type="block" pos:start="679:9" pos:end="681:44">/* Each EA ADPCM frame has a 12-byte header followed by 30-byte pieces,

           each coding 28 stereo samples. */</comment>

        <if_stmt pos:start="683:9" pos:end="689:9"><if pos:start="683:9" pos:end="689:9">if <condition pos:start="683:12" pos:end="683:26">(<expr pos:start="683:13" pos:end="683:25"><name pos:start="683:13" pos:end="683:20">buf_size</name> <operator pos:start="683:22" pos:end="683:22">&lt;</operator> <literal type="number" pos:start="683:24" pos:end="683:25">12</literal></expr>)</condition> <block pos:start="683:28" pos:end="689:9">{<block_content pos:start="685:13" pos:end="687:35">

            <expr_stmt pos:start="685:13" pos:end="685:61"><expr pos:start="685:13" pos:end="685:60"><call pos:start="685:13" pos:end="685:60"><name pos:start="685:13" pos:end="685:18">av_log</name><argument_list pos:start="685:19" pos:end="685:60">(<argument pos:start="685:20" pos:end="685:24"><expr pos:start="685:20" pos:end="685:24"><name pos:start="685:20" pos:end="685:24">avctx</name></expr></argument>, <argument pos:start="685:27" pos:end="685:38"><expr pos:start="685:27" pos:end="685:38"><name pos:start="685:27" pos:end="685:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="685:41" pos:end="685:59"><expr pos:start="685:41" pos:end="685:59"><literal type="string" pos:start="685:41" pos:end="685:59">"frame too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="687:13" pos:end="687:35">return <expr pos:start="687:20" pos:end="687:34"><call pos:start="687:20" pos:end="687:34"><name pos:start="687:20" pos:end="687:26">AVERROR</name><argument_list pos:start="687:27" pos:end="687:34">(<argument pos:start="687:28" pos:end="687:33"><expr pos:start="687:28" pos:end="687:33"><name pos:start="687:28" pos:end="687:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="691:9" pos:end="691:40"><expr pos:start="691:9" pos:end="691:39"><name pos:start="691:9" pos:end="691:24">samples_in_chunk</name> <operator pos:start="691:26" pos:end="691:26">=</operator> <call pos:start="691:28" pos:end="691:39"><name pos:start="691:28" pos:end="691:34">AV_RL32</name><argument_list pos:start="691:35" pos:end="691:39">(<argument pos:start="691:36" pos:end="691:38"><expr pos:start="691:36" pos:end="691:38"><name pos:start="691:36" pos:end="691:38">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="693:9" pos:end="699:9"><if pos:start="693:9" pos:end="699:9">if <condition pos:start="693:12" pos:end="693:57">(<expr pos:start="693:13" pos:end="693:56"><name pos:start="693:13" pos:end="693:28">samples_in_chunk</name> <operator pos:start="693:30" pos:end="693:30">/</operator> <literal type="number" pos:start="693:32" pos:end="693:33">28</literal> <operator pos:start="693:35" pos:end="693:35">&gt;</operator> <operator pos:start="693:37" pos:end="693:37">(</operator><name pos:start="693:38" pos:end="693:45">buf_size</name> <operator pos:start="693:47" pos:end="693:47">-</operator> <literal type="number" pos:start="693:49" pos:end="693:50">12</literal><operator pos:start="693:51" pos:end="693:51">)</operator> <operator pos:start="693:53" pos:end="693:53">/</operator> <literal type="number" pos:start="693:55" pos:end="693:56">30</literal></expr>)</condition> <block pos:start="693:59" pos:end="699:9">{<block_content pos:start="695:13" pos:end="697:35">

            <expr_stmt pos:start="695:13" pos:end="695:59"><expr pos:start="695:13" pos:end="695:58"><call pos:start="695:13" pos:end="695:58"><name pos:start="695:13" pos:end="695:18">av_log</name><argument_list pos:start="695:19" pos:end="695:58">(<argument pos:start="695:20" pos:end="695:24"><expr pos:start="695:20" pos:end="695:24"><name pos:start="695:20" pos:end="695:24">avctx</name></expr></argument>, <argument pos:start="695:27" pos:end="695:38"><expr pos:start="695:27" pos:end="695:38"><name pos:start="695:27" pos:end="695:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="695:41" pos:end="695:57"><expr pos:start="695:41" pos:end="695:57"><literal type="string" pos:start="695:41" pos:end="695:57">"invalid frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="697:13" pos:end="697:35">return <expr pos:start="697:20" pos:end="697:34"><call pos:start="697:20" pos:end="697:34"><name pos:start="697:20" pos:end="697:26">AVERROR</name><argument_list pos:start="697:27" pos:end="697:34">(<argument pos:start="697:28" pos:end="697:33"><expr pos:start="697:28" pos:end="697:33"><name pos:start="697:28" pos:end="697:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="701:9" pos:end="701:17"><expr pos:start="701:9" pos:end="701:16"><name pos:start="701:9" pos:end="701:11">src</name> <operator pos:start="701:13" pos:end="701:14">+=</operator> <literal type="number" pos:start="701:16" pos:end="701:16">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="703:9" pos:end="703:67"><expr pos:start="703:9" pos:end="703:66"><name pos:start="703:9" pos:end="703:27">current_left_sample</name>   <operator pos:start="703:31" pos:end="703:31">=</operator> <operator pos:start="703:33" pos:end="703:33">(</operator><name pos:start="703:34" pos:end="703:40">int16_t</name><operator pos:start="703:41" pos:end="703:41">)</operator><call pos:start="703:42" pos:end="703:66"><name pos:start="703:42" pos:end="703:60">bytestream_get_le16</name><argument_list pos:start="703:61" pos:end="703:66">(<argument pos:start="703:62" pos:end="703:65"><expr pos:start="703:62" pos:end="703:65"><operator pos:start="703:62" pos:end="703:62">&amp;</operator><name pos:start="703:63" pos:end="703:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="705:9" pos:end="705:67"><expr pos:start="705:9" pos:end="705:66"><name pos:start="705:9" pos:end="705:28">previous_left_sample</name>  <operator pos:start="705:31" pos:end="705:31">=</operator> <operator pos:start="705:33" pos:end="705:33">(</operator><name pos:start="705:34" pos:end="705:40">int16_t</name><operator pos:start="705:41" pos:end="705:41">)</operator><call pos:start="705:42" pos:end="705:66"><name pos:start="705:42" pos:end="705:60">bytestream_get_le16</name><argument_list pos:start="705:61" pos:end="705:66">(<argument pos:start="705:62" pos:end="705:65"><expr pos:start="705:62" pos:end="705:65"><operator pos:start="705:62" pos:end="705:62">&amp;</operator><name pos:start="705:63" pos:end="705:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="707:9" pos:end="707:67"><expr pos:start="707:9" pos:end="707:66"><name pos:start="707:9" pos:end="707:28">current_right_sample</name>  <operator pos:start="707:31" pos:end="707:31">=</operator> <operator pos:start="707:33" pos:end="707:33">(</operator><name pos:start="707:34" pos:end="707:40">int16_t</name><operator pos:start="707:41" pos:end="707:41">)</operator><call pos:start="707:42" pos:end="707:66"><name pos:start="707:42" pos:end="707:60">bytestream_get_le16</name><argument_list pos:start="707:61" pos:end="707:66">(<argument pos:start="707:62" pos:end="707:65"><expr pos:start="707:62" pos:end="707:65"><operator pos:start="707:62" pos:end="707:62">&amp;</operator><name pos:start="707:63" pos:end="707:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="709:9" pos:end="709:67"><expr pos:start="709:9" pos:end="709:66"><name pos:start="709:9" pos:end="709:29">previous_right_sample</name> <operator pos:start="709:31" pos:end="709:31">=</operator> <operator pos:start="709:33" pos:end="709:33">(</operator><name pos:start="709:34" pos:end="709:40">int16_t</name><operator pos:start="709:41" pos:end="709:41">)</operator><call pos:start="709:42" pos:end="709:66"><name pos:start="709:42" pos:end="709:60">bytestream_get_le16</name><argument_list pos:start="709:61" pos:end="709:66">(<argument pos:start="709:62" pos:end="709:65"><expr pos:start="709:62" pos:end="709:65"><operator pos:start="709:62" pos:end="709:62">&amp;</operator><name pos:start="709:63" pos:end="709:65">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="713:9" pos:end="773:9">for <control pos:start="713:13" pos:end="713:63">(<init pos:start="713:14" pos:end="713:24"><expr pos:start="713:14" pos:end="713:23"><name pos:start="713:14" pos:end="713:19">count1</name> <operator pos:start="713:21" pos:end="713:21">=</operator> <literal type="number" pos:start="713:23" pos:end="713:23">0</literal></expr>;</init> <condition pos:start="713:26" pos:end="713:54"><expr pos:start="713:26" pos:end="713:53"><name pos:start="713:26" pos:end="713:31">count1</name> <operator pos:start="713:33" pos:end="713:33">&lt;</operator> <name pos:start="713:35" pos:end="713:50">samples_in_chunk</name><operator pos:start="713:51" pos:end="713:51">/</operator><literal type="number" pos:start="713:52" pos:end="713:53">28</literal></expr>;</condition><incr pos:start="713:55" pos:end="713:62"><expr pos:start="713:55" pos:end="713:62"><name pos:start="713:55" pos:end="713:60">count1</name><operator pos:start="713:61" pos:end="713:62">++</operator></expr></incr>)</control> <block pos:start="713:65" pos:end="773:9">{<block_content pos:start="715:13" pos:end="771:13">

            <expr_stmt pos:start="715:13" pos:end="715:56"><expr pos:start="715:13" pos:end="715:55"><name pos:start="715:13" pos:end="715:19">coeff1l</name> <operator pos:start="715:21" pos:end="715:21">=</operator> <name pos:start="715:23" pos:end="715:55"><name pos:start="715:23" pos:end="715:36">ea_adpcm_table</name><index pos:start="715:37" pos:end="715:55">[ <expr pos:start="715:39" pos:end="715:47"><operator pos:start="715:39" pos:end="715:39">*</operator><name pos:start="715:40" pos:end="715:42">src</name> <operator pos:start="715:44" pos:end="715:45">&gt;&gt;</operator> <literal type="number" pos:start="715:47" pos:end="715:47">4</literal></expr>       ]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="717:13" pos:end="717:56"><expr pos:start="717:13" pos:end="717:55"><name pos:start="717:13" pos:end="717:19">coeff2l</name> <operator pos:start="717:21" pos:end="717:21">=</operator> <name pos:start="717:23" pos:end="717:55"><name pos:start="717:23" pos:end="717:36">ea_adpcm_table</name><index pos:start="717:37" pos:end="717:55">[<expr pos:start="717:38" pos:end="717:54"><operator pos:start="717:38" pos:end="717:38">(</operator><operator pos:start="717:39" pos:end="717:39">*</operator><name pos:start="717:40" pos:end="717:42">src</name> <operator pos:start="717:44" pos:end="717:45">&gt;&gt;</operator> <literal type="number" pos:start="717:47" pos:end="717:47">4</literal>  <operator pos:start="717:50" pos:end="717:50">)</operator> <operator pos:start="717:52" pos:end="717:52">+</operator> <literal type="number" pos:start="717:54" pos:end="717:54">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="719:13" pos:end="719:50"><expr pos:start="719:13" pos:end="719:49"><name pos:start="719:13" pos:end="719:19">coeff1r</name> <operator pos:start="719:21" pos:end="719:21">=</operator> <name pos:start="719:23" pos:end="719:49"><name pos:start="719:23" pos:end="719:36">ea_adpcm_table</name><index pos:start="719:37" pos:end="719:49">[<expr pos:start="719:38" pos:end="719:48"><operator pos:start="719:38" pos:end="719:38">*</operator><name pos:start="719:39" pos:end="719:41">src</name> <operator pos:start="719:43" pos:end="719:43">&amp;</operator> <literal type="number" pos:start="719:45" pos:end="719:48">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:56"><expr pos:start="721:13" pos:end="721:55"><name pos:start="721:13" pos:end="721:19">coeff2r</name> <operator pos:start="721:21" pos:end="721:21">=</operator> <name pos:start="721:23" pos:end="721:55"><name pos:start="721:23" pos:end="721:36">ea_adpcm_table</name><index pos:start="721:37" pos:end="721:55">[<expr pos:start="721:38" pos:end="721:54"><operator pos:start="721:38" pos:end="721:38">(</operator><operator pos:start="721:39" pos:end="721:39">*</operator><name pos:start="721:40" pos:end="721:42">src</name> <operator pos:start="721:44" pos:end="721:44">&amp;</operator> <literal type="number" pos:start="721:46" pos:end="721:49">0x0F</literal><operator pos:start="721:50" pos:end="721:50">)</operator> <operator pos:start="721:52" pos:end="721:52">+</operator> <literal type="number" pos:start="721:54" pos:end="721:54">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:18"><expr pos:start="723:13" pos:end="723:17"><name pos:start="723:13" pos:end="723:15">src</name><operator pos:start="723:16" pos:end="723:17">++</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="727:13" pos:end="727:44"><expr pos:start="727:13" pos:end="727:43"><name pos:start="727:13" pos:end="727:22">shift_left</name>  <operator pos:start="727:25" pos:end="727:25">=</operator> <operator pos:start="727:27" pos:end="727:27">(</operator><operator pos:start="727:28" pos:end="727:28">*</operator><name pos:start="727:29" pos:end="727:31">src</name> <operator pos:start="727:33" pos:end="727:34">&gt;&gt;</operator> <literal type="number" pos:start="727:36" pos:end="727:36">4</literal>  <operator pos:start="727:39" pos:end="727:39">)</operator> <operator pos:start="727:41" pos:end="727:41">+</operator> <literal type="number" pos:start="727:43" pos:end="727:43">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="729:13" pos:end="729:44"><expr pos:start="729:13" pos:end="729:43"><name pos:start="729:13" pos:end="729:23">shift_right</name> <operator pos:start="729:25" pos:end="729:25">=</operator> <operator pos:start="729:27" pos:end="729:27">(</operator><operator pos:start="729:28" pos:end="729:28">*</operator><name pos:start="729:29" pos:end="729:31">src</name> <operator pos:start="729:33" pos:end="729:33">&amp;</operator> <literal type="number" pos:start="729:35" pos:end="729:38">0x0F</literal><operator pos:start="729:39" pos:end="729:39">)</operator> <operator pos:start="729:41" pos:end="729:41">+</operator> <literal type="number" pos:start="729:43" pos:end="729:43">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:18"><expr pos:start="731:13" pos:end="731:17"><name pos:start="731:13" pos:end="731:15">src</name><operator pos:start="731:16" pos:end="731:17">++</operator></expr>;</expr_stmt>



            <for pos:start="735:13" pos:end="771:13">for <control pos:start="735:17" pos:end="735:51">(<init pos:start="735:18" pos:end="735:28"><expr pos:start="735:18" pos:end="735:27"><name pos:start="735:18" pos:end="735:23">count2</name> <operator pos:start="735:25" pos:end="735:25">=</operator> <literal type="number" pos:start="735:27" pos:end="735:27">0</literal></expr>;</init> <condition pos:start="735:30" pos:end="735:41"><expr pos:start="735:30" pos:end="735:40"><name pos:start="735:30" pos:end="735:35">count2</name> <operator pos:start="735:37" pos:end="735:37">&lt;</operator> <literal type="number" pos:start="735:39" pos:end="735:40">28</literal></expr>;</condition> <incr pos:start="735:43" pos:end="735:50"><expr pos:start="735:43" pos:end="735:50"><name pos:start="735:43" pos:end="735:48">count2</name><operator pos:start="735:49" pos:end="735:50">++</operator></expr></incr>)</control> <block pos:start="735:53" pos:end="771:13">{<block_content pos:start="737:17" pos:end="769:66">

                <expr_stmt pos:start="737:17" pos:end="737:81"><expr pos:start="737:17" pos:end="737:80"><name pos:start="737:17" pos:end="737:32">next_left_sample</name>  <operator pos:start="737:35" pos:end="737:35">=</operator> <operator pos:start="737:37" pos:end="737:37">(</operator><name pos:start="737:38" pos:end="737:44">int32_t</name><operator pos:start="737:45" pos:end="737:45">)</operator><operator pos:start="737:46" pos:end="737:46">(</operator><operator pos:start="737:47" pos:end="737:47">(</operator><operator pos:start="737:48" pos:end="737:48">*</operator><name pos:start="737:49" pos:end="737:51">src</name> <operator pos:start="737:53" pos:end="737:53">&amp;</operator> <literal type="number" pos:start="737:55" pos:end="737:58">0xF0</literal><operator pos:start="737:59" pos:end="737:59">)</operator> <operator pos:start="737:61" pos:end="737:62">&lt;&lt;</operator> <literal type="number" pos:start="737:64" pos:end="737:65">24</literal><operator pos:start="737:66" pos:end="737:66">)</operator> <operator pos:start="737:68" pos:end="737:69">&gt;&gt;</operator> <name pos:start="737:71" pos:end="737:80">shift_left</name></expr>;</expr_stmt>

                <expr_stmt pos:start="739:17" pos:end="739:82"><expr pos:start="739:17" pos:end="739:81"><name pos:start="739:17" pos:end="739:33">next_right_sample</name> <operator pos:start="739:35" pos:end="739:35">=</operator> <operator pos:start="739:37" pos:end="739:37">(</operator><name pos:start="739:38" pos:end="739:44">int32_t</name><operator pos:start="739:45" pos:end="739:45">)</operator><operator pos:start="739:46" pos:end="739:46">(</operator><operator pos:start="739:47" pos:end="739:47">(</operator><operator pos:start="739:48" pos:end="739:48">*</operator><name pos:start="739:49" pos:end="739:51">src</name> <operator pos:start="739:53" pos:end="739:53">&amp;</operator> <literal type="number" pos:start="739:55" pos:end="739:58">0x0F</literal><operator pos:start="739:59" pos:end="739:59">)</operator> <operator pos:start="739:61" pos:end="739:62">&lt;&lt;</operator> <literal type="number" pos:start="739:64" pos:end="739:65">28</literal><operator pos:start="739:66" pos:end="739:66">)</operator> <operator pos:start="739:68" pos:end="739:69">&gt;&gt;</operator> <name pos:start="739:71" pos:end="739:81">shift_right</name></expr>;</expr_stmt>

                <expr_stmt pos:start="741:17" pos:end="741:22"><expr pos:start="741:17" pos:end="741:21"><name pos:start="741:17" pos:end="741:19">src</name><operator pos:start="741:20" pos:end="741:21">++</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="745:17" pos:end="749:66"><expr pos:start="745:17" pos:end="749:65"><name pos:start="745:17" pos:end="745:32">next_left_sample</name> <operator pos:start="745:34" pos:end="745:34">=</operator> <operator pos:start="745:36" pos:end="745:36">(</operator><name pos:start="745:37" pos:end="745:52">next_left_sample</name> <operator pos:start="745:54" pos:end="745:54">+</operator>

                    <operator pos:start="747:21" pos:end="747:21">(</operator><name pos:start="747:22" pos:end="747:40">current_left_sample</name> <operator pos:start="747:42" pos:end="747:42">*</operator> <name pos:start="747:44" pos:end="747:50">coeff1l</name><operator pos:start="747:51" pos:end="747:51">)</operator> <operator pos:start="747:53" pos:end="747:53">+</operator>

                    <operator pos:start="749:21" pos:end="749:21">(</operator><name pos:start="749:22" pos:end="749:41">previous_left_sample</name> <operator pos:start="749:43" pos:end="749:43">*</operator> <name pos:start="749:45" pos:end="749:51">coeff2l</name><operator pos:start="749:52" pos:end="749:52">)</operator> <operator pos:start="749:54" pos:end="749:54">+</operator> <literal type="number" pos:start="749:56" pos:end="749:59">0x80</literal><operator pos:start="749:60" pos:end="749:60">)</operator> <operator pos:start="749:62" pos:end="749:63">&gt;&gt;</operator> <literal type="number" pos:start="749:65" pos:end="749:65">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="751:17" pos:end="755:67"><expr pos:start="751:17" pos:end="755:66"><name pos:start="751:17" pos:end="751:33">next_right_sample</name> <operator pos:start="751:35" pos:end="751:35">=</operator> <operator pos:start="751:37" pos:end="751:37">(</operator><name pos:start="751:38" pos:end="751:54">next_right_sample</name> <operator pos:start="751:56" pos:end="751:56">+</operator>

                    <operator pos:start="753:21" pos:end="753:21">(</operator><name pos:start="753:22" pos:end="753:41">current_right_sample</name> <operator pos:start="753:43" pos:end="753:43">*</operator> <name pos:start="753:45" pos:end="753:51">coeff1r</name><operator pos:start="753:52" pos:end="753:52">)</operator> <operator pos:start="753:54" pos:end="753:54">+</operator>

                    <operator pos:start="755:21" pos:end="755:21">(</operator><name pos:start="755:22" pos:end="755:42">previous_right_sample</name> <operator pos:start="755:44" pos:end="755:44">*</operator> <name pos:start="755:46" pos:end="755:52">coeff2r</name><operator pos:start="755:53" pos:end="755:53">)</operator> <operator pos:start="755:55" pos:end="755:55">+</operator> <literal type="number" pos:start="755:57" pos:end="755:60">0x80</literal><operator pos:start="755:61" pos:end="755:61">)</operator> <operator pos:start="755:63" pos:end="755:64">&gt;&gt;</operator> <literal type="number" pos:start="755:66" pos:end="755:66">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="759:17" pos:end="759:59"><expr pos:start="759:17" pos:end="759:58"><name pos:start="759:17" pos:end="759:36">previous_left_sample</name> <operator pos:start="759:38" pos:end="759:38">=</operator> <name pos:start="759:40" pos:end="759:58">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="761:17" pos:end="761:70"><expr pos:start="761:17" pos:end="761:69"><name pos:start="761:17" pos:end="761:35">current_left_sample</name> <operator pos:start="761:37" pos:end="761:37">=</operator> <call pos:start="761:39" pos:end="761:69"><name pos:start="761:39" pos:end="761:51">av_clip_int16</name><argument_list pos:start="761:52" pos:end="761:69">(<argument pos:start="761:53" pos:end="761:68"><expr pos:start="761:53" pos:end="761:68"><name pos:start="761:53" pos:end="761:68">next_left_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="763:17" pos:end="763:61"><expr pos:start="763:17" pos:end="763:60"><name pos:start="763:17" pos:end="763:37">previous_right_sample</name> <operator pos:start="763:39" pos:end="763:39">=</operator> <name pos:start="763:41" pos:end="763:60">current_right_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="765:17" pos:end="765:72"><expr pos:start="765:17" pos:end="765:71"><name pos:start="765:17" pos:end="765:36">current_right_sample</name> <operator pos:start="765:38" pos:end="765:38">=</operator> <call pos:start="765:40" pos:end="765:71"><name pos:start="765:40" pos:end="765:52">av_clip_int16</name><argument_list pos:start="765:53" pos:end="765:71">(<argument pos:start="765:54" pos:end="765:70"><expr pos:start="765:54" pos:end="765:70"><name pos:start="765:54" pos:end="765:70">next_right_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="767:17" pos:end="767:65"><expr pos:start="767:17" pos:end="767:64"><operator pos:start="767:17" pos:end="767:17">*</operator><name pos:start="767:18" pos:end="767:24">samples</name><operator pos:start="767:25" pos:end="767:26">++</operator> <operator pos:start="767:28" pos:end="767:28">=</operator> <operator pos:start="767:30" pos:end="767:30">(</operator><name pos:start="767:31" pos:end="767:38">unsigned</name> <name pos:start="767:40" pos:end="767:44">short</name><operator pos:start="767:45" pos:end="767:45">)</operator><name pos:start="767:46" pos:end="767:64">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="769:17" pos:end="769:66"><expr pos:start="769:17" pos:end="769:65"><operator pos:start="769:17" pos:end="769:17">*</operator><name pos:start="769:18" pos:end="769:24">samples</name><operator pos:start="769:25" pos:end="769:26">++</operator> <operator pos:start="769:28" pos:end="769:28">=</operator> <operator pos:start="769:30" pos:end="769:30">(</operator><name pos:start="769:31" pos:end="769:38">unsigned</name> <name pos:start="769:40" pos:end="769:44">short</name><operator pos:start="769:45" pos:end="769:45">)</operator><name pos:start="769:46" pos:end="769:65">current_right_sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="777:9" pos:end="779:21"><if pos:start="777:9" pos:end="779:21">if <condition pos:start="777:12" pos:end="777:38">(<expr pos:start="777:13" pos:end="777:37"><name pos:start="777:13" pos:end="777:15">src</name> <operator pos:start="777:17" pos:end="777:17">-</operator> <name pos:start="777:19" pos:end="777:21">buf</name> <operator pos:start="777:23" pos:end="777:24">==</operator> <name pos:start="777:26" pos:end="777:33">buf_size</name> <operator pos:start="777:35" pos:end="777:35">-</operator> <literal type="number" pos:start="777:37" pos:end="777:37">2</literal></expr>)</condition><block type="pseudo" pos:start="779:13" pos:end="779:21"><block_content pos:start="779:13" pos:end="779:21">

            <expr_stmt pos:start="779:13" pos:end="779:21"><expr pos:start="779:13" pos:end="779:20"><name pos:start="779:13" pos:end="779:15">src</name> <operator pos:start="779:17" pos:end="779:18">+=</operator> <literal type="number" pos:start="779:20" pos:end="779:20">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="779:23" pos:end="779:48">// Skip terminating 0x0000</comment>



        <break pos:start="783:9" pos:end="783:14">break;</break>

    <case pos:start="785:5" pos:end="785:36">case <expr pos:start="785:10" pos:end="785:35"><name pos:start="785:10" pos:end="785:35">CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>

        <for pos:start="787:9" pos:end="797:9">for<control pos:start="787:12" pos:end="787:62">(<init pos:start="787:13" pos:end="787:24"><expr pos:start="787:13" pos:end="787:23"><name pos:start="787:13" pos:end="787:19">channel</name> <operator pos:start="787:21" pos:end="787:21">=</operator> <literal type="number" pos:start="787:23" pos:end="787:23">0</literal></expr>;</init> <condition pos:start="787:26" pos:end="787:51"><expr pos:start="787:26" pos:end="787:50"><name pos:start="787:26" pos:end="787:32">channel</name> <operator pos:start="787:34" pos:end="787:34">&lt;</operator> <name pos:start="787:36" pos:end="787:50"><name pos:start="787:36" pos:end="787:40">avctx</name><operator pos:start="787:41" pos:end="787:42">-&gt;</operator><name pos:start="787:43" pos:end="787:50">channels</name></name></expr>;</condition> <incr pos:start="787:53" pos:end="787:61"><expr pos:start="787:53" pos:end="787:61"><name pos:start="787:53" pos:end="787:59">channel</name><operator pos:start="787:60" pos:end="787:61">++</operator></expr></incr>)</control> <block pos:start="787:64" pos:end="797:9">{<block_content pos:start="789:13" pos:end="795:18">

            <for pos:start="789:13" pos:end="791:70">for <control pos:start="789:17" pos:end="789:31">(<init pos:start="789:18" pos:end="789:21"><expr pos:start="789:18" pos:end="789:20"><name pos:start="789:18" pos:end="789:18">i</name><operator pos:start="789:19" pos:end="789:19">=</operator><literal type="number" pos:start="789:20" pos:end="789:20">0</literal></expr>;</init> <condition pos:start="789:23" pos:end="789:26"><expr pos:start="789:23" pos:end="789:25"><name pos:start="789:23" pos:end="789:23">i</name><operator pos:start="789:24" pos:end="789:24">&lt;</operator><literal type="number" pos:start="789:25" pos:end="789:25">2</literal></expr>;</condition> <incr pos:start="789:28" pos:end="789:30"><expr pos:start="789:28" pos:end="789:30"><name pos:start="789:28" pos:end="789:28">i</name><operator pos:start="789:29" pos:end="789:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="791:17" pos:end="791:70"><block_content pos:start="791:17" pos:end="791:70">

                <expr_stmt pos:start="791:17" pos:end="791:70"><expr pos:start="791:17" pos:end="791:69"><name pos:start="791:17" pos:end="791:33"><name pos:start="791:17" pos:end="791:21">coeff</name><index pos:start="791:22" pos:end="791:30">[<expr pos:start="791:23" pos:end="791:29"><name pos:start="791:23" pos:end="791:29">channel</name></expr>]</index><index pos:start="791:31" pos:end="791:33">[<expr pos:start="791:32" pos:end="791:32"><name pos:start="791:32" pos:end="791:32">i</name></expr>]</index></name> <operator pos:start="791:35" pos:end="791:35">=</operator> <name pos:start="791:37" pos:end="791:69"><name pos:start="791:37" pos:end="791:50">ea_adpcm_table</name><index pos:start="791:51" pos:end="791:69">[<expr pos:start="791:52" pos:end="791:68"><operator pos:start="791:52" pos:end="791:52">(</operator><operator pos:start="791:53" pos:end="791:53">*</operator><name pos:start="791:54" pos:end="791:56">src</name> <operator pos:start="791:58" pos:end="791:59">&gt;&gt;</operator> <literal type="number" pos:start="791:61" pos:end="791:61">4</literal><operator pos:start="791:62" pos:end="791:62">)</operator> <operator pos:start="791:64" pos:end="791:64">+</operator> <literal type="number" pos:start="791:66" pos:end="791:66">4</literal><operator pos:start="791:67" pos:end="791:67">*</operator><name pos:start="791:68" pos:end="791:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="793:13" pos:end="793:47"><expr pos:start="793:13" pos:end="793:46"><name pos:start="793:13" pos:end="793:26"><name pos:start="793:13" pos:end="793:17">shift</name><index pos:start="793:18" pos:end="793:26">[<expr pos:start="793:19" pos:end="793:25"><name pos:start="793:19" pos:end="793:25">channel</name></expr>]</index></name> <operator pos:start="793:28" pos:end="793:28">=</operator> <operator pos:start="793:30" pos:end="793:30">(</operator><operator pos:start="793:31" pos:end="793:31">*</operator><name pos:start="793:32" pos:end="793:34">src</name> <operator pos:start="793:36" pos:end="793:36">&amp;</operator> <literal type="number" pos:start="793:38" pos:end="793:41">0x0F</literal><operator pos:start="793:42" pos:end="793:42">)</operator> <operator pos:start="793:44" pos:end="793:44">+</operator> <literal type="number" pos:start="793:46" pos:end="793:46">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="795:13" pos:end="795:18"><expr pos:start="795:13" pos:end="795:17"><name pos:start="795:13" pos:end="795:15">src</name><operator pos:start="795:16" pos:end="795:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="799:9" pos:end="825:9">for <control pos:start="799:13" pos:end="799:91">(<init pos:start="799:14" pos:end="799:24"><expr pos:start="799:14" pos:end="799:23"><name pos:start="799:14" pos:end="799:19">count1</name> <operator pos:start="799:21" pos:end="799:21">=</operator> <literal type="number" pos:start="799:23" pos:end="799:23">0</literal></expr>;</init> <condition pos:start="799:26" pos:end="799:81"><expr pos:start="799:26" pos:end="799:80"><name pos:start="799:26" pos:end="799:31">count1</name> <operator pos:start="799:33" pos:end="799:33">&lt;</operator> <operator pos:start="799:35" pos:end="799:35">(</operator><name pos:start="799:36" pos:end="799:43">buf_size</name> <operator pos:start="799:45" pos:end="799:45">-</operator> <name pos:start="799:47" pos:end="799:61"><name pos:start="799:47" pos:end="799:51">avctx</name><operator pos:start="799:52" pos:end="799:53">-&gt;</operator><name pos:start="799:54" pos:end="799:61">channels</name></name><operator pos:start="799:62" pos:end="799:62">)</operator> <operator pos:start="799:64" pos:end="799:64">/</operator> <name pos:start="799:66" pos:end="799:80"><name pos:start="799:66" pos:end="799:70">avctx</name><operator pos:start="799:71" pos:end="799:72">-&gt;</operator><name pos:start="799:73" pos:end="799:80">channels</name></name></expr>;</condition> <incr pos:start="799:83" pos:end="799:90"><expr pos:start="799:83" pos:end="799:90"><name pos:start="799:83" pos:end="799:88">count1</name><operator pos:start="799:89" pos:end="799:90">++</operator></expr></incr>)</control> <block pos:start="799:93" pos:end="825:9">{<block_content pos:start="801:13" pos:end="823:33">

            <for pos:start="801:13" pos:end="821:13">for<control pos:start="801:16" pos:end="801:36">(<init pos:start="801:17" pos:end="801:22"><expr pos:start="801:17" pos:end="801:21"><name pos:start="801:17" pos:end="801:17">i</name> <operator pos:start="801:19" pos:end="801:19">=</operator> <literal type="number" pos:start="801:21" pos:end="801:21">4</literal></expr>;</init> <condition pos:start="801:24" pos:end="801:30"><expr pos:start="801:24" pos:end="801:29"><name pos:start="801:24" pos:end="801:24">i</name> <operator pos:start="801:26" pos:end="801:27">&gt;=</operator> <literal type="number" pos:start="801:29" pos:end="801:29">0</literal></expr>;</condition> <incr pos:start="801:32" pos:end="801:35"><expr pos:start="801:32" pos:end="801:35"><name pos:start="801:32" pos:end="801:32">i</name><operator pos:start="801:33" pos:end="801:34">-=</operator><literal type="number" pos:start="801:35" pos:end="801:35">4</literal></expr></incr>)</control> <block pos:start="801:38" pos:end="821:13">{<block_content pos:start="803:17" pos:end="819:17"> <comment type="block" pos:start="801:40" pos:end="801:88">/* Pairwise samples LL RR (st) or LL LL (mono) */</comment>

                <for pos:start="803:17" pos:end="819:17">for<control pos:start="803:20" pos:end="803:70">(<init pos:start="803:21" pos:end="803:32"><expr pos:start="803:21" pos:end="803:31"><name pos:start="803:21" pos:end="803:27">channel</name> <operator pos:start="803:29" pos:end="803:29">=</operator> <literal type="number" pos:start="803:31" pos:end="803:31">0</literal></expr>;</init> <condition pos:start="803:34" pos:end="803:59"><expr pos:start="803:34" pos:end="803:58"><name pos:start="803:34" pos:end="803:40">channel</name> <operator pos:start="803:42" pos:end="803:42">&lt;</operator> <name pos:start="803:44" pos:end="803:58"><name pos:start="803:44" pos:end="803:48">avctx</name><operator pos:start="803:49" pos:end="803:50">-&gt;</operator><name pos:start="803:51" pos:end="803:58">channels</name></name></expr>;</condition> <incr pos:start="803:61" pos:end="803:69"><expr pos:start="803:61" pos:end="803:69"><name pos:start="803:61" pos:end="803:67">channel</name><operator pos:start="803:68" pos:end="803:69">++</operator></expr></incr>)</control> <block pos:start="803:72" pos:end="819:17">{<block_content pos:start="805:21" pos:end="817:60">

                    <decl_stmt pos:start="805:21" pos:end="805:105"><decl pos:start="805:21" pos:end="805:104"><type pos:start="805:21" pos:end="805:27"><name pos:start="805:21" pos:end="805:27">int32_t</name></type> <name pos:start="805:29" pos:end="805:34">sample</name> <init pos:start="805:36" pos:end="805:104">= <expr pos:start="805:38" pos:end="805:104"><operator pos:start="805:38" pos:end="805:38">(</operator><name pos:start="805:39" pos:end="805:45">int32_t</name><operator pos:start="805:46" pos:end="805:46">)</operator><operator pos:start="805:47" pos:end="805:47">(</operator><operator pos:start="805:48" pos:end="805:48">(</operator><operator pos:start="805:49" pos:end="805:49">(</operator><operator pos:start="805:50" pos:end="805:50">*</operator><operator pos:start="805:51" pos:end="805:51">(</operator><name pos:start="805:52" pos:end="805:54">src</name><operator pos:start="805:55" pos:end="805:55">+</operator><name pos:start="805:56" pos:end="805:62">channel</name><operator pos:start="805:63" pos:end="805:63">)</operator> <operator pos:start="805:65" pos:end="805:66">&gt;&gt;</operator> <name pos:start="805:68" pos:end="805:68">i</name><operator pos:start="805:69" pos:end="805:69">)</operator> <operator pos:start="805:71" pos:end="805:71">&amp;</operator> <literal type="number" pos:start="805:73" pos:end="805:76">0x0F</literal><operator pos:start="805:77" pos:end="805:77">)</operator> <operator pos:start="805:79" pos:end="805:80">&lt;&lt;</operator> <literal type="number" pos:start="805:82" pos:end="805:85">0x1C</literal><operator pos:start="805:86" pos:end="805:86">)</operator> <operator pos:start="805:88" pos:end="805:89">&gt;&gt;</operator> <name pos:start="805:91" pos:end="805:104"><name pos:start="805:91" pos:end="805:95">shift</name><index pos:start="805:96" pos:end="805:104">[<expr pos:start="805:97" pos:end="805:103"><name pos:start="805:97" pos:end="805:103">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="807:21" pos:end="811:89"><expr pos:start="807:21" pos:end="811:88"><name pos:start="807:21" pos:end="807:26">sample</name> <operator pos:start="807:28" pos:end="807:28">=</operator> <operator pos:start="807:30" pos:end="807:30">(</operator><name pos:start="807:31" pos:end="807:36">sample</name> <operator pos:start="807:38" pos:end="807:38">+</operator>

                             <name pos:start="809:30" pos:end="809:47"><name pos:start="809:30" pos:end="809:30">c</name><operator pos:start="809:31" pos:end="809:32">-&gt;</operator><name pos:start="809:33" pos:end="809:38">status</name><index pos:start="809:39" pos:end="809:47">[<expr pos:start="809:40" pos:end="809:46"><name pos:start="809:40" pos:end="809:46">channel</name></expr>]</index></name><operator pos:start="809:48" pos:end="809:48">.</operator><name pos:start="809:49" pos:end="809:55">sample1</name> <operator pos:start="809:57" pos:end="809:57">*</operator> <name pos:start="809:59" pos:end="809:75"><name pos:start="809:59" pos:end="809:63">coeff</name><index pos:start="809:64" pos:end="809:72">[<expr pos:start="809:65" pos:end="809:71"><name pos:start="809:65" pos:end="809:71">channel</name></expr>]</index><index pos:start="809:73" pos:end="809:75">[<expr pos:start="809:74" pos:end="809:74"><literal type="number" pos:start="809:74" pos:end="809:74">0</literal></expr>]</index></name> <operator pos:start="809:77" pos:end="809:77">+</operator>

                             <name pos:start="811:30" pos:end="811:47"><name pos:start="811:30" pos:end="811:30">c</name><operator pos:start="811:31" pos:end="811:32">-&gt;</operator><name pos:start="811:33" pos:end="811:38">status</name><index pos:start="811:39" pos:end="811:47">[<expr pos:start="811:40" pos:end="811:46"><name pos:start="811:40" pos:end="811:46">channel</name></expr>]</index></name><operator pos:start="811:48" pos:end="811:48">.</operator><name pos:start="811:49" pos:end="811:55">sample2</name> <operator pos:start="811:57" pos:end="811:57">*</operator> <name pos:start="811:59" pos:end="811:75"><name pos:start="811:59" pos:end="811:63">coeff</name><index pos:start="811:64" pos:end="811:72">[<expr pos:start="811:65" pos:end="811:71"><name pos:start="811:65" pos:end="811:71">channel</name></expr>]</index><index pos:start="811:73" pos:end="811:75">[<expr pos:start="811:74" pos:end="811:74"><literal type="number" pos:start="811:74" pos:end="811:74">1</literal></expr>]</index></name> <operator pos:start="811:77" pos:end="811:77">+</operator> <literal type="number" pos:start="811:79" pos:end="811:82">0x80</literal><operator pos:start="811:83" pos:end="811:83">)</operator> <operator pos:start="811:85" pos:end="811:86">&gt;&gt;</operator> <literal type="number" pos:start="811:88" pos:end="811:88">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="813:21" pos:end="813:76"><expr pos:start="813:21" pos:end="813:75"><name pos:start="813:21" pos:end="813:38"><name pos:start="813:21" pos:end="813:21">c</name><operator pos:start="813:22" pos:end="813:23">-&gt;</operator><name pos:start="813:24" pos:end="813:29">status</name><index pos:start="813:30" pos:end="813:38">[<expr pos:start="813:31" pos:end="813:37"><name pos:start="813:31" pos:end="813:37">channel</name></expr>]</index></name><operator pos:start="813:39" pos:end="813:39">.</operator><name pos:start="813:40" pos:end="813:46">sample2</name> <operator pos:start="813:48" pos:end="813:48">=</operator> <name pos:start="813:50" pos:end="813:67"><name pos:start="813:50" pos:end="813:50">c</name><operator pos:start="813:51" pos:end="813:52">-&gt;</operator><name pos:start="813:53" pos:end="813:58">status</name><index pos:start="813:59" pos:end="813:67">[<expr pos:start="813:60" pos:end="813:66"><name pos:start="813:60" pos:end="813:66">channel</name></expr>]</index></name><operator pos:start="813:68" pos:end="813:68">.</operator><name pos:start="813:69" pos:end="813:75">sample1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="815:21" pos:end="815:71"><expr pos:start="815:21" pos:end="815:70"><name pos:start="815:21" pos:end="815:38"><name pos:start="815:21" pos:end="815:21">c</name><operator pos:start="815:22" pos:end="815:23">-&gt;</operator><name pos:start="815:24" pos:end="815:29">status</name><index pos:start="815:30" pos:end="815:38">[<expr pos:start="815:31" pos:end="815:37"><name pos:start="815:31" pos:end="815:37">channel</name></expr>]</index></name><operator pos:start="815:39" pos:end="815:39">.</operator><name pos:start="815:40" pos:end="815:46">sample1</name> <operator pos:start="815:48" pos:end="815:48">=</operator> <call pos:start="815:50" pos:end="815:70"><name pos:start="815:50" pos:end="815:62">av_clip_int16</name><argument_list pos:start="815:63" pos:end="815:70">(<argument pos:start="815:64" pos:end="815:69"><expr pos:start="815:64" pos:end="815:69"><name pos:start="815:64" pos:end="815:69">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="817:21" pos:end="817:60"><expr pos:start="817:21" pos:end="817:59"><operator pos:start="817:21" pos:end="817:21">*</operator><name pos:start="817:22" pos:end="817:28">samples</name><operator pos:start="817:29" pos:end="817:30">++</operator> <operator pos:start="817:32" pos:end="817:32">=</operator> <name pos:start="817:34" pos:end="817:51"><name pos:start="817:34" pos:end="817:34">c</name><operator pos:start="817:35" pos:end="817:36">-&gt;</operator><name pos:start="817:37" pos:end="817:42">status</name><index pos:start="817:43" pos:end="817:51">[<expr pos:start="817:44" pos:end="817:50"><name pos:start="817:44" pos:end="817:50">channel</name></expr>]</index></name><operator pos:start="817:52" pos:end="817:52">.</operator><name pos:start="817:53" pos:end="817:59">sample1</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <expr_stmt pos:start="823:13" pos:end="823:33"><expr pos:start="823:13" pos:end="823:32"><name pos:start="823:13" pos:end="823:15">src</name><operator pos:start="823:16" pos:end="823:17">+=</operator><name pos:start="823:18" pos:end="823:32"><name pos:start="823:18" pos:end="823:22">avctx</name><operator pos:start="823:23" pos:end="823:24">-&gt;</operator><name pos:start="823:25" pos:end="823:32">channels</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="827:9" pos:end="827:14">break;</break>

    <case pos:start="829:5" pos:end="829:30">case <expr pos:start="829:10" pos:end="829:29"><name pos:start="829:10" pos:end="829:29">CODEC_ID_ADPCM_EA_R1</name></expr>:</case>

    <case pos:start="831:5" pos:end="831:30">case <expr pos:start="831:10" pos:end="831:29"><name pos:start="831:10" pos:end="831:29">CODEC_ID_ADPCM_EA_R2</name></expr>:</case>

    <case pos:start="833:5" pos:end="833:30">case <expr pos:start="833:10" pos:end="833:29"><name pos:start="833:10" pos:end="833:29">CODEC_ID_ADPCM_EA_R3</name></expr>:</case> <block pos:start="833:32" pos:end="999:5">{<block_content pos:start="843:9" pos:end="997:14">

        <comment type="block" pos:start="835:9" pos:end="841:57">/* channel numbering

           2chan: 0=fl, 1=fr

           4chan: 0=fl, 1=rl, 2=fr, 3=rr

           6chan: 0=fl, 1=c,  2=fr, 3=rl,  4=rr, 5=sub */</comment>

        <decl_stmt pos:start="843:9" pos:end="843:72"><decl pos:start="843:9" pos:end="843:71"><type pos:start="843:9" pos:end="843:17"><specifier pos:start="843:9" pos:end="843:13">const</specifier> <name pos:start="843:15" pos:end="843:17">int</name></type> <name pos:start="843:19" pos:end="843:28">big_endian</name> <init pos:start="843:30" pos:end="843:71">= <expr pos:start="843:32" pos:end="843:71"><name pos:start="843:32" pos:end="843:47"><name pos:start="843:32" pos:end="843:36">avctx</name><operator pos:start="843:37" pos:end="843:38">-&gt;</operator><name pos:start="843:39" pos:end="843:43">codec</name><operator pos:start="843:44" pos:end="843:45">-&gt;</operator><name pos:start="843:46" pos:end="843:47">id</name></name> <operator pos:start="843:49" pos:end="843:50">==</operator> <name pos:start="843:52" pos:end="843:71">CODEC_ID_ADPCM_EA_R3</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="845:9" pos:end="845:61"><decl pos:start="845:9" pos:end="845:31"><type pos:start="845:9" pos:end="845:15"><name pos:start="845:9" pos:end="845:15">int32_t</name></type> <name pos:start="845:17" pos:end="845:31">previous_sample</name></decl>, <decl pos:start="845:34" pos:end="845:47"><type ref="prev" pos:start="845:9" pos:end="845:15"/><name pos:start="845:34" pos:end="845:47">current_sample</name></decl>, <decl pos:start="845:50" pos:end="845:60"><type ref="prev" pos:start="845:9" pos:end="845:15"/><name pos:start="845:50" pos:end="845:60">next_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="847:9" pos:end="847:31"><decl pos:start="847:9" pos:end="847:22"><type pos:start="847:9" pos:end="847:15"><name pos:start="847:9" pos:end="847:15">int32_t</name></type> <name pos:start="847:17" pos:end="847:22">coeff1</name></decl>, <decl pos:start="847:25" pos:end="847:30"><type ref="prev" pos:start="847:9" pos:end="847:15"/><name pos:start="847:25" pos:end="847:30">coeff2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="849:9" pos:end="849:22"><decl pos:start="849:9" pos:end="849:21"><type pos:start="849:9" pos:end="849:15"><name pos:start="849:9" pos:end="849:15">uint8_t</name></type> <name pos:start="849:17" pos:end="849:21">shift</name></decl>;</decl_stmt>

        <decl_stmt pos:start="851:9" pos:end="851:29"><decl pos:start="851:9" pos:end="851:28"><type pos:start="851:9" pos:end="851:20"><name pos:start="851:9" pos:end="851:16">unsigned</name> <name pos:start="851:18" pos:end="851:20">int</name></type> <name pos:start="851:22" pos:end="851:28">channel</name></decl>;</decl_stmt>

        <decl_stmt pos:start="853:9" pos:end="853:27"><decl pos:start="853:9" pos:end="853:26"><type pos:start="853:9" pos:end="853:18"><name pos:start="853:9" pos:end="853:16">uint16_t</name> <modifier pos:start="853:18" pos:end="853:18">*</modifier></type><name pos:start="853:19" pos:end="853:26">samplesC</name></decl>;</decl_stmt>

        <decl_stmt pos:start="855:9" pos:end="855:28"><decl pos:start="855:9" pos:end="855:27"><type pos:start="855:9" pos:end="855:23"><specifier pos:start="855:9" pos:end="855:13">const</specifier> <name pos:start="855:15" pos:end="855:21">uint8_t</name> <modifier pos:start="855:23" pos:end="855:23">*</modifier></type><name pos:start="855:24" pos:end="855:27">srcC</name></decl>;</decl_stmt>

        <decl_stmt pos:start="857:9" pos:end="857:48"><decl pos:start="857:9" pos:end="857:47"><type pos:start="857:9" pos:end="857:23"><specifier pos:start="857:9" pos:end="857:13">const</specifier> <name pos:start="857:15" pos:end="857:21">uint8_t</name> <modifier pos:start="857:23" pos:end="857:23">*</modifier></type><name pos:start="857:24" pos:end="857:30">src_end</name> <init pos:start="857:32" pos:end="857:47">= <expr pos:start="857:34" pos:end="857:47"><name pos:start="857:34" pos:end="857:36">buf</name> <operator pos:start="857:38" pos:end="857:38">+</operator> <name pos:start="857:40" pos:end="857:47">buf_size</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="861:9" pos:end="863:73"><expr pos:start="861:9" pos:end="863:72"><name pos:start="861:9" pos:end="861:24">samples_in_chunk</name> <operator pos:start="861:26" pos:end="861:26">=</operator> <operator pos:start="861:28" pos:end="861:28">(</operator><ternary pos:start="861:29" pos:end="863:66"><condition pos:start="861:29" pos:end="861:40"><expr pos:start="861:29" pos:end="861:38"><name pos:start="861:29" pos:end="861:38">big_endian</name></expr> ?</condition><then pos:start="861:42" pos:end="861:66"> <expr pos:start="861:42" pos:end="861:66"><call pos:start="861:42" pos:end="861:66"><name pos:start="861:42" pos:end="861:60">bytestream_get_be32</name><argument_list pos:start="861:61" pos:end="861:66">(<argument pos:start="861:62" pos:end="861:65"><expr pos:start="861:62" pos:end="861:65"><operator pos:start="861:62" pos:end="861:62">&amp;</operator><name pos:start="861:63" pos:end="861:65">src</name></expr></argument>)</argument_list></call></expr>

                                       </then><else pos:start="863:40" pos:end="863:66">: <expr pos:start="863:42" pos:end="863:66"><call pos:start="863:42" pos:end="863:66"><name pos:start="863:42" pos:end="863:60">bytestream_get_le32</name><argument_list pos:start="863:61" pos:end="863:66">(<argument pos:start="863:62" pos:end="863:65"><expr pos:start="863:62" pos:end="863:65"><operator pos:start="863:62" pos:end="863:62">&amp;</operator><name pos:start="863:63" pos:end="863:65">src</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="863:67" pos:end="863:67">)</operator> <operator pos:start="863:69" pos:end="863:69">/</operator> <literal type="number" pos:start="863:71" pos:end="863:72">28</literal></expr>;</expr_stmt>

        <if_stmt pos:start="865:9" pos:end="873:9"><if pos:start="865:9" pos:end="873:9">if <condition pos:start="865:12" pos:end="867:70">(<expr pos:start="865:13" pos:end="867:69"><name pos:start="865:13" pos:end="865:28">samples_in_chunk</name> <operator pos:start="865:30" pos:end="865:30">&gt;</operator> <name pos:start="865:32" pos:end="865:41">UINT32_MAX</name><operator pos:start="865:42" pos:end="865:42">/</operator><operator pos:start="865:43" pos:end="865:43">(</operator><literal type="number" pos:start="865:44" pos:end="865:45">28</literal><operator pos:start="865:46" pos:end="865:46">*</operator><name pos:start="865:47" pos:end="865:61"><name pos:start="865:47" pos:end="865:51">avctx</name><operator pos:start="865:52" pos:end="865:53">-&gt;</operator><name pos:start="865:54" pos:end="865:61">channels</name></name><operator pos:start="865:62" pos:end="865:62">)</operator> <operator pos:start="865:64" pos:end="865:65">||</operator>

            <literal type="number" pos:start="867:13" pos:end="867:14">28</literal><operator pos:start="867:15" pos:end="867:15">*</operator><name pos:start="867:16" pos:end="867:31">samples_in_chunk</name><operator pos:start="867:32" pos:end="867:32">*</operator><name pos:start="867:33" pos:end="867:47"><name pos:start="867:33" pos:end="867:37">avctx</name><operator pos:start="867:38" pos:end="867:39">-&gt;</operator><name pos:start="867:40" pos:end="867:47">channels</name></name> <operator pos:start="867:49" pos:end="867:49">&gt;</operator> <name pos:start="867:51" pos:end="867:61">samples_end</name><operator pos:start="867:62" pos:end="867:62">-</operator><name pos:start="867:63" pos:end="867:69">samples</name></expr>)</condition> <block pos:start="867:72" pos:end="873:9">{<block_content pos:start="869:13" pos:end="871:18">

            <expr_stmt pos:start="869:13" pos:end="869:32"><expr pos:start="869:13" pos:end="869:31"><name pos:start="869:13" pos:end="869:15">src</name> <operator pos:start="869:17" pos:end="869:18">+=</operator> <name pos:start="869:20" pos:end="869:27">buf_size</name> <operator pos:start="869:29" pos:end="869:29">-</operator> <literal type="number" pos:start="869:31" pos:end="869:31">4</literal></expr>;</expr_stmt>

            <break pos:start="871:13" pos:end="871:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <for pos:start="877:9" pos:end="989:9">for <control pos:start="877:13" pos:end="877:59">(<init pos:start="877:14" pos:end="877:23"><expr pos:start="877:14" pos:end="877:22"><name pos:start="877:14" pos:end="877:20">channel</name><operator pos:start="877:21" pos:end="877:21">=</operator><literal type="number" pos:start="877:22" pos:end="877:22">0</literal></expr>;</init> <condition pos:start="877:25" pos:end="877:48"><expr pos:start="877:25" pos:end="877:47"><name pos:start="877:25" pos:end="877:31">channel</name><operator pos:start="877:32" pos:end="877:32">&lt;</operator><name pos:start="877:33" pos:end="877:47"><name pos:start="877:33" pos:end="877:37">avctx</name><operator pos:start="877:38" pos:end="877:39">-&gt;</operator><name pos:start="877:40" pos:end="877:47">channels</name></name></expr>;</condition> <incr pos:start="877:50" pos:end="877:58"><expr pos:start="877:50" pos:end="877:58"><name pos:start="877:50" pos:end="877:56">channel</name><operator pos:start="877:57" pos:end="877:58">++</operator></expr></incr>)</control> <block pos:start="877:61" pos:end="989:9">{<block_content pos:start="879:13" pos:end="987:13">

            <decl_stmt pos:start="879:13" pos:end="883:61"><decl pos:start="879:13" pos:end="883:60"><type pos:start="879:13" pos:end="879:19"><name pos:start="879:13" pos:end="879:19">int32_t</name></type> <name pos:start="879:21" pos:end="879:26">offset</name> <init pos:start="879:28" pos:end="883:60">= <expr pos:start="879:30" pos:end="883:60"><operator pos:start="879:30" pos:end="879:30">(</operator><ternary pos:start="879:31" pos:end="881:68"><condition pos:start="879:31" pos:end="879:42"><expr pos:start="879:31" pos:end="879:40"><name pos:start="879:31" pos:end="879:40">big_endian</name></expr> ?</condition><then pos:start="879:44" pos:end="879:68"> <expr pos:start="879:44" pos:end="879:68"><call pos:start="879:44" pos:end="879:68"><name pos:start="879:44" pos:end="879:62">bytestream_get_be32</name><argument_list pos:start="879:63" pos:end="879:68">(<argument pos:start="879:64" pos:end="879:67"><expr pos:start="879:64" pos:end="879:67"><operator pos:start="879:64" pos:end="879:64">&amp;</operator><name pos:start="879:65" pos:end="879:67">src</name></expr></argument>)</argument_list></call></expr>

                                         </then><else pos:start="881:42" pos:end="881:68">: <expr pos:start="881:44" pos:end="881:68"><call pos:start="881:44" pos:end="881:68"><name pos:start="881:44" pos:end="881:62">bytestream_get_le32</name><argument_list pos:start="881:63" pos:end="881:68">(<argument pos:start="881:64" pos:end="881:67"><expr pos:start="881:64" pos:end="881:67"><operator pos:start="881:64" pos:end="881:64">&amp;</operator><name pos:start="881:65" pos:end="881:67">src</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="881:69" pos:end="881:69">)</operator>

                           <operator pos:start="883:28" pos:end="883:28">+</operator> <operator pos:start="883:30" pos:end="883:30">(</operator><name pos:start="883:31" pos:end="883:45"><name pos:start="883:31" pos:end="883:35">avctx</name><operator pos:start="883:36" pos:end="883:37">-&gt;</operator><name pos:start="883:38" pos:end="883:45">channels</name></name><operator pos:start="883:46" pos:end="883:46">-</operator><name pos:start="883:47" pos:end="883:53">channel</name><operator pos:start="883:54" pos:end="883:54">-</operator><literal type="number" pos:start="883:55" pos:end="883:55">1</literal><operator pos:start="883:56" pos:end="883:56">)</operator> <operator pos:start="883:58" pos:end="883:58">*</operator> <literal type="number" pos:start="883:60" pos:end="883:60">4</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="887:13" pos:end="887:69"><if pos:start="887:13" pos:end="887:69">if <condition pos:start="887:16" pos:end="887:62">(<expr pos:start="887:17" pos:end="887:61"><operator pos:start="887:17" pos:end="887:17">(</operator><name pos:start="887:18" pos:end="887:23">offset</name> <operator pos:start="887:25" pos:end="887:25">&lt;</operator> <literal type="number" pos:start="887:27" pos:end="887:27">0</literal><operator pos:start="887:28" pos:end="887:28">)</operator> <operator pos:start="887:30" pos:end="887:31">||</operator> <operator pos:start="887:33" pos:end="887:33">(</operator><name pos:start="887:34" pos:end="887:39">offset</name> <operator pos:start="887:41" pos:end="887:42">&gt;=</operator> <name pos:start="887:44" pos:end="887:50">src_end</name> <operator pos:start="887:52" pos:end="887:52">-</operator> <name pos:start="887:54" pos:end="887:56">src</name> <operator pos:start="887:58" pos:end="887:58">-</operator> <literal type="number" pos:start="887:60" pos:end="887:60">4</literal><operator pos:start="887:61" pos:end="887:61">)</operator></expr>)</condition><block type="pseudo" pos:start="887:64" pos:end="887:69"><block_content pos:start="887:64" pos:end="887:69"> <break pos:start="887:64" pos:end="887:69">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:33"><expr pos:start="889:13" pos:end="889:32"><name pos:start="889:13" pos:end="889:16">srcC</name>  <operator pos:start="889:19" pos:end="889:19">=</operator> <name pos:start="889:21" pos:end="889:23">src</name> <operator pos:start="889:25" pos:end="889:25">+</operator> <name pos:start="889:27" pos:end="889:32">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="891:13" pos:end="891:41"><expr pos:start="891:13" pos:end="891:40"><name pos:start="891:13" pos:end="891:20">samplesC</name> <operator pos:start="891:22" pos:end="891:22">=</operator> <name pos:start="891:24" pos:end="891:30">samples</name> <operator pos:start="891:32" pos:end="891:32">+</operator> <name pos:start="891:34" pos:end="891:40">channel</name></expr>;</expr_stmt>



            <if_stmt pos:start="895:13" pos:end="907:13"><if pos:start="895:13" pos:end="901:13">if <condition pos:start="895:16" pos:end="895:57">(<expr pos:start="895:17" pos:end="895:56"><name pos:start="895:17" pos:end="895:32"><name pos:start="895:17" pos:end="895:21">avctx</name><operator pos:start="895:22" pos:end="895:23">-&gt;</operator><name pos:start="895:24" pos:end="895:28">codec</name><operator pos:start="895:29" pos:end="895:30">-&gt;</operator><name pos:start="895:31" pos:end="895:32">id</name></name> <operator pos:start="895:34" pos:end="895:35">==</operator> <name pos:start="895:37" pos:end="895:56">CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block pos:start="895:59" pos:end="901:13">{<block_content pos:start="897:17" pos:end="899:70">

                <expr_stmt pos:start="897:17" pos:end="897:70"><expr pos:start="897:17" pos:end="897:69"><name pos:start="897:17" pos:end="897:30">current_sample</name>  <operator pos:start="897:33" pos:end="897:33">=</operator> <operator pos:start="897:35" pos:end="897:35">(</operator><name pos:start="897:36" pos:end="897:42">int16_t</name><operator pos:start="897:43" pos:end="897:43">)</operator><call pos:start="897:44" pos:end="897:69"><name pos:start="897:44" pos:end="897:62">bytestream_get_le16</name><argument_list pos:start="897:63" pos:end="897:69">(<argument pos:start="897:64" pos:end="897:68"><expr pos:start="897:64" pos:end="897:68"><operator pos:start="897:64" pos:end="897:64">&amp;</operator><name pos:start="897:65" pos:end="897:68">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="899:17" pos:end="899:70"><expr pos:start="899:17" pos:end="899:69"><name pos:start="899:17" pos:end="899:31">previous_sample</name> <operator pos:start="899:33" pos:end="899:33">=</operator> <operator pos:start="899:35" pos:end="899:35">(</operator><name pos:start="899:36" pos:end="899:42">int16_t</name><operator pos:start="899:43" pos:end="899:43">)</operator><call pos:start="899:44" pos:end="899:69"><name pos:start="899:44" pos:end="899:62">bytestream_get_le16</name><argument_list pos:start="899:63" pos:end="899:69">(<argument pos:start="899:64" pos:end="899:68"><expr pos:start="899:64" pos:end="899:68"><operator pos:start="899:64" pos:end="899:64">&amp;</operator><name pos:start="899:65" pos:end="899:68">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="901:15" pos:end="907:13">else <block pos:start="901:20" pos:end="907:13">{<block_content pos:start="903:17" pos:end="905:65">

                <expr_stmt pos:start="903:17" pos:end="903:63"><expr pos:start="903:17" pos:end="903:62"><name pos:start="903:17" pos:end="903:30">current_sample</name>  <operator pos:start="903:33" pos:end="903:33">=</operator> <name pos:start="903:35" pos:end="903:52"><name pos:start="903:35" pos:end="903:35">c</name><operator pos:start="903:36" pos:end="903:37">-&gt;</operator><name pos:start="903:38" pos:end="903:43">status</name><index pos:start="903:44" pos:end="903:52">[<expr pos:start="903:45" pos:end="903:51"><name pos:start="903:45" pos:end="903:51">channel</name></expr>]</index></name><operator pos:start="903:53" pos:end="903:53">.</operator><name pos:start="903:54" pos:end="903:62">predictor</name></expr>;</expr_stmt>

                <expr_stmt pos:start="905:17" pos:end="905:65"><expr pos:start="905:17" pos:end="905:64"><name pos:start="905:17" pos:end="905:31">previous_sample</name> <operator pos:start="905:33" pos:end="905:33">=</operator> <name pos:start="905:35" pos:end="905:52"><name pos:start="905:35" pos:end="905:35">c</name><operator pos:start="905:36" pos:end="905:37">-&gt;</operator><name pos:start="905:38" pos:end="905:43">status</name><index pos:start="905:44" pos:end="905:52">[<expr pos:start="905:45" pos:end="905:51"><name pos:start="905:45" pos:end="905:51">channel</name></expr>]</index></name><operator pos:start="905:53" pos:end="905:53">.</operator><name pos:start="905:54" pos:end="905:64">prev_sample</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <for pos:start="911:13" pos:end="977:13">for <control pos:start="911:17" pos:end="911:61">(<init pos:start="911:18" pos:end="911:26"><expr pos:start="911:18" pos:end="911:25"><name pos:start="911:18" pos:end="911:23">count1</name><operator pos:start="911:24" pos:end="911:24">=</operator><literal type="number" pos:start="911:25" pos:end="911:25">0</literal></expr>;</init> <condition pos:start="911:28" pos:end="911:51"><expr pos:start="911:28" pos:end="911:50"><name pos:start="911:28" pos:end="911:33">count1</name><operator pos:start="911:34" pos:end="911:34">&lt;</operator><name pos:start="911:35" pos:end="911:50">samples_in_chunk</name></expr>;</condition> <incr pos:start="911:53" pos:end="911:60"><expr pos:start="911:53" pos:end="911:60"><name pos:start="911:53" pos:end="911:58">count1</name><operator pos:start="911:59" pos:end="911:60">++</operator></expr></incr>)</control> <block pos:start="911:63" pos:end="977:13">{<block_content pos:start="913:17" pos:end="975:17">

                <if_stmt pos:start="913:17" pos:end="975:17"><if pos:start="913:17" pos:end="933:17">if <condition pos:start="913:20" pos:end="913:34">(<expr pos:start="913:21" pos:end="913:33"><operator pos:start="913:21" pos:end="913:21">*</operator><name pos:start="913:22" pos:end="913:25">srcC</name> <operator pos:start="913:27" pos:end="913:28">==</operator> <literal type="number" pos:start="913:30" pos:end="913:33">0xEE</literal></expr>)</condition> <block pos:start="913:36" pos:end="933:17">{<block_content pos:start="915:21" pos:end="931:21">  <comment type="block" pos:start="913:39" pos:end="913:66">/* only seen in R2 and R3 */</comment>

                    <expr_stmt pos:start="915:21" pos:end="915:27"><expr pos:start="915:21" pos:end="915:26"><name pos:start="915:21" pos:end="915:24">srcC</name><operator pos:start="915:25" pos:end="915:26">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="917:21" pos:end="917:53"><if pos:start="917:21" pos:end="917:53">if <condition pos:start="917:24" pos:end="917:46">(<expr pos:start="917:25" pos:end="917:45"><name pos:start="917:25" pos:end="917:28">srcC</name> <operator pos:start="917:30" pos:end="917:30">&gt;</operator> <name pos:start="917:32" pos:end="917:38">src_end</name> <operator pos:start="917:40" pos:end="917:40">-</operator> <literal type="number" pos:start="917:42" pos:end="917:43">30</literal><operator pos:start="917:44" pos:end="917:44">*</operator><literal type="number" pos:start="917:45" pos:end="917:45">2</literal></expr>)</condition><block type="pseudo" pos:start="917:48" pos:end="917:53"><block_content pos:start="917:48" pos:end="917:53"> <break pos:start="917:48" pos:end="917:53">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="919:21" pos:end="919:74"><expr pos:start="919:21" pos:end="919:73"><name pos:start="919:21" pos:end="919:34">current_sample</name>  <operator pos:start="919:37" pos:end="919:37">=</operator> <operator pos:start="919:39" pos:end="919:39">(</operator><name pos:start="919:40" pos:end="919:46">int16_t</name><operator pos:start="919:47" pos:end="919:47">)</operator><call pos:start="919:48" pos:end="919:73"><name pos:start="919:48" pos:end="919:66">bytestream_get_be16</name><argument_list pos:start="919:67" pos:end="919:73">(<argument pos:start="919:68" pos:end="919:72"><expr pos:start="919:68" pos:end="919:72"><operator pos:start="919:68" pos:end="919:68">&amp;</operator><name pos:start="919:69" pos:end="919:72">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="921:21" pos:end="921:74"><expr pos:start="921:21" pos:end="921:73"><name pos:start="921:21" pos:end="921:35">previous_sample</name> <operator pos:start="921:37" pos:end="921:37">=</operator> <operator pos:start="921:39" pos:end="921:39">(</operator><name pos:start="921:40" pos:end="921:46">int16_t</name><operator pos:start="921:47" pos:end="921:47">)</operator><call pos:start="921:48" pos:end="921:73"><name pos:start="921:48" pos:end="921:66">bytestream_get_be16</name><argument_list pos:start="921:67" pos:end="921:73">(<argument pos:start="921:68" pos:end="921:72"><expr pos:start="921:68" pos:end="921:72"><operator pos:start="921:68" pos:end="921:68">&amp;</operator><name pos:start="921:69" pos:end="921:72">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <for pos:start="925:21" pos:end="931:21">for <control pos:start="925:25" pos:end="925:55">(<init pos:start="925:26" pos:end="925:34"><expr pos:start="925:26" pos:end="925:33"><name pos:start="925:26" pos:end="925:31">count2</name><operator pos:start="925:32" pos:end="925:32">=</operator><literal type="number" pos:start="925:33" pos:end="925:33">0</literal></expr>;</init> <condition pos:start="925:36" pos:end="925:45"><expr pos:start="925:36" pos:end="925:44"><name pos:start="925:36" pos:end="925:41">count2</name><operator pos:start="925:42" pos:end="925:42">&lt;</operator><literal type="number" pos:start="925:43" pos:end="925:44">28</literal></expr>;</condition> <incr pos:start="925:47" pos:end="925:54"><expr pos:start="925:47" pos:end="925:54"><name pos:start="925:47" pos:end="925:52">count2</name><operator pos:start="925:53" pos:end="925:54">++</operator></expr></incr>)</control> <block pos:start="925:57" pos:end="931:21">{<block_content pos:start="927:25" pos:end="929:52">

                        <expr_stmt pos:start="927:25" pos:end="927:72"><expr pos:start="927:25" pos:end="927:71"><operator pos:start="927:25" pos:end="927:25">*</operator><name pos:start="927:26" pos:end="927:33">samplesC</name> <operator pos:start="927:35" pos:end="927:35">=</operator> <operator pos:start="927:37" pos:end="927:37">(</operator><name pos:start="927:38" pos:end="927:44">int16_t</name><operator pos:start="927:45" pos:end="927:45">)</operator><call pos:start="927:46" pos:end="927:71"><name pos:start="927:46" pos:end="927:64">bytestream_get_be16</name><argument_list pos:start="927:65" pos:end="927:71">(<argument pos:start="927:66" pos:end="927:70"><expr pos:start="927:66" pos:end="927:70"><operator pos:start="927:66" pos:end="927:66">&amp;</operator><name pos:start="927:67" pos:end="927:70">srcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="929:25" pos:end="929:52"><expr pos:start="929:25" pos:end="929:51"><name pos:start="929:25" pos:end="929:32">samplesC</name> <operator pos:start="929:34" pos:end="929:35">+=</operator> <name pos:start="929:37" pos:end="929:51"><name pos:start="929:37" pos:end="929:41">avctx</name><operator pos:start="929:42" pos:end="929:43">-&gt;</operator><name pos:start="929:44" pos:end="929:51">channels</name></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="933:19" pos:end="975:17">else <block pos:start="933:24" pos:end="975:17">{<block_content pos:start="935:21" pos:end="973:21">

                    <expr_stmt pos:start="935:21" pos:end="935:60"><expr pos:start="935:21" pos:end="935:59"><name pos:start="935:21" pos:end="935:26">coeff1</name> <operator pos:start="935:28" pos:end="935:28">=</operator> <name pos:start="935:30" pos:end="935:59"><name pos:start="935:30" pos:end="935:43">ea_adpcm_table</name><index pos:start="935:44" pos:end="935:59">[ <expr pos:start="935:46" pos:end="935:53"><operator pos:start="935:46" pos:end="935:46">*</operator><name pos:start="935:47" pos:end="935:50">srcC</name><operator pos:start="935:51" pos:end="935:52">&gt;&gt;</operator><literal type="number" pos:start="935:53" pos:end="935:53">4</literal></expr>     ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="937:21" pos:end="937:60"><expr pos:start="937:21" pos:end="937:59"><name pos:start="937:21" pos:end="937:26">coeff2</name> <operator pos:start="937:28" pos:end="937:28">=</operator> <name pos:start="937:30" pos:end="937:59"><name pos:start="937:30" pos:end="937:43">ea_adpcm_table</name><index pos:start="937:44" pos:end="937:59">[<expr pos:start="937:45" pos:end="937:58"><operator pos:start="937:45" pos:end="937:45">(</operator><operator pos:start="937:46" pos:end="937:46">*</operator><name pos:start="937:47" pos:end="937:50">srcC</name><operator pos:start="937:51" pos:end="937:52">&gt;&gt;</operator><literal type="number" pos:start="937:53" pos:end="937:53">4</literal><operator pos:start="937:54" pos:end="937:54">)</operator> <operator pos:start="937:56" pos:end="937:56">+</operator> <literal type="number" pos:start="937:58" pos:end="937:58">4</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="939:21" pos:end="939:49"><expr pos:start="939:21" pos:end="939:48"><name pos:start="939:21" pos:end="939:25">shift</name> <operator pos:start="939:27" pos:end="939:27">=</operator> <operator pos:start="939:29" pos:end="939:29">(</operator><operator pos:start="939:30" pos:end="939:30">*</operator><name pos:start="939:31" pos:end="939:34">srcC</name><operator pos:start="939:35" pos:end="939:36">++</operator> <operator pos:start="939:38" pos:end="939:38">&amp;</operator> <literal type="number" pos:start="939:40" pos:end="939:43">0x0F</literal><operator pos:start="939:44" pos:end="939:44">)</operator> <operator pos:start="939:46" pos:end="939:46">+</operator> <literal type="number" pos:start="939:48" pos:end="939:48">8</literal></expr>;</expr_stmt>



                    <if_stmt pos:start="943:21" pos:end="943:51"><if pos:start="943:21" pos:end="943:51">if <condition pos:start="943:24" pos:end="943:44">(<expr pos:start="943:25" pos:end="943:43"><name pos:start="943:25" pos:end="943:28">srcC</name> <operator pos:start="943:30" pos:end="943:30">&gt;</operator> <name pos:start="943:32" pos:end="943:38">src_end</name> <operator pos:start="943:40" pos:end="943:40">-</operator> <literal type="number" pos:start="943:42" pos:end="943:43">14</literal></expr>)</condition><block type="pseudo" pos:start="943:46" pos:end="943:51"><block_content pos:start="943:46" pos:end="943:51"> <break pos:start="943:46" pos:end="943:51">break;</break></block_content></block></if></if_stmt>

                    <for pos:start="945:21" pos:end="973:21">for <control pos:start="945:25" pos:end="945:55">(<init pos:start="945:26" pos:end="945:34"><expr pos:start="945:26" pos:end="945:33"><name pos:start="945:26" pos:end="945:31">count2</name><operator pos:start="945:32" pos:end="945:32">=</operator><literal type="number" pos:start="945:33" pos:end="945:33">0</literal></expr>;</init> <condition pos:start="945:36" pos:end="945:45"><expr pos:start="945:36" pos:end="945:44"><name pos:start="945:36" pos:end="945:41">count2</name><operator pos:start="945:42" pos:end="945:42">&lt;</operator><literal type="number" pos:start="945:43" pos:end="945:44">28</literal></expr>;</condition> <incr pos:start="945:47" pos:end="945:54"><expr pos:start="945:47" pos:end="945:54"><name pos:start="945:47" pos:end="945:52">count2</name><operator pos:start="945:53" pos:end="945:54">++</operator></expr></incr>)</control> <block pos:start="945:57" pos:end="973:21">{<block_content pos:start="947:25" pos:end="971:52">

                        <if_stmt pos:start="947:25" pos:end="953:85"><if pos:start="947:25" pos:end="949:85">if <condition pos:start="947:28" pos:end="947:39">(<expr pos:start="947:29" pos:end="947:38"><name pos:start="947:29" pos:end="947:34">count2</name> <operator pos:start="947:36" pos:end="947:36">&amp;</operator> <literal type="number" pos:start="947:38" pos:end="947:38">1</literal></expr>)</condition><block type="pseudo" pos:start="949:29" pos:end="949:85"><block_content pos:start="949:29" pos:end="949:85">

                            <expr_stmt pos:start="949:29" pos:end="949:85"><expr pos:start="949:29" pos:end="949:84"><name pos:start="949:29" pos:end="949:39">next_sample</name> <operator pos:start="949:41" pos:end="949:41">=</operator> <operator pos:start="949:43" pos:end="949:43">(</operator><name pos:start="949:44" pos:end="949:50">int32_t</name><operator pos:start="949:51" pos:end="949:51">)</operator><operator pos:start="949:52" pos:end="949:52">(</operator><operator pos:start="949:53" pos:end="949:53">(</operator><operator pos:start="949:54" pos:end="949:54">*</operator><name pos:start="949:55" pos:end="949:58">srcC</name><operator pos:start="949:59" pos:end="949:60">++</operator> <operator pos:start="949:62" pos:end="949:62">&amp;</operator> <literal type="number" pos:start="949:64" pos:end="949:67">0x0F</literal><operator pos:start="949:68" pos:end="949:68">)</operator> <operator pos:start="949:70" pos:end="949:71">&lt;&lt;</operator> <literal type="number" pos:start="949:73" pos:end="949:74">28</literal><operator pos:start="949:75" pos:end="949:75">)</operator> <operator pos:start="949:77" pos:end="949:78">&gt;&gt;</operator> <name pos:start="949:80" pos:end="949:84">shift</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="951:25" pos:end="953:85">else<block type="pseudo" pos:start="953:29" pos:end="953:85"><block_content pos:start="953:29" pos:end="953:85">

                            <expr_stmt pos:start="953:29" pos:end="953:85"><expr pos:start="953:29" pos:end="953:84"><name pos:start="953:29" pos:end="953:39">next_sample</name> <operator pos:start="953:41" pos:end="953:41">=</operator> <operator pos:start="953:43" pos:end="953:43">(</operator><name pos:start="953:44" pos:end="953:50">int32_t</name><operator pos:start="953:51" pos:end="953:51">)</operator><operator pos:start="953:52" pos:end="953:52">(</operator><operator pos:start="953:53" pos:end="953:53">(</operator><operator pos:start="953:54" pos:end="953:54">*</operator><name pos:start="953:55" pos:end="953:58">srcC</name>   <operator pos:start="953:62" pos:end="953:62">&amp;</operator> <literal type="number" pos:start="953:64" pos:end="953:67">0xF0</literal><operator pos:start="953:68" pos:end="953:68">)</operator> <operator pos:start="953:70" pos:end="953:71">&lt;&lt;</operator> <literal type="number" pos:start="953:73" pos:end="953:74">24</literal><operator pos:start="953:75" pos:end="953:75">)</operator> <operator pos:start="953:77" pos:end="953:78">&gt;&gt;</operator> <name pos:start="953:80" pos:end="953:84">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                        <expr_stmt pos:start="957:25" pos:end="959:66"><expr pos:start="957:25" pos:end="959:65"><name pos:start="957:25" pos:end="957:35">next_sample</name> <operator pos:start="957:37" pos:end="957:38">+=</operator> <operator pos:start="957:40" pos:end="957:40">(</operator><name pos:start="957:41" pos:end="957:54">current_sample</name>  <operator pos:start="957:57" pos:end="957:57">*</operator> <name pos:start="957:59" pos:end="957:64">coeff1</name><operator pos:start="957:65" pos:end="957:65">)</operator> <operator pos:start="957:67" pos:end="957:67">+</operator>

                                       <operator pos:start="959:40" pos:end="959:40">(</operator><name pos:start="959:41" pos:end="959:55">previous_sample</name> <operator pos:start="959:57" pos:end="959:57">*</operator> <name pos:start="959:59" pos:end="959:64">coeff2</name><operator pos:start="959:65" pos:end="959:65">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="961:25" pos:end="961:70"><expr pos:start="961:25" pos:end="961:69"><name pos:start="961:25" pos:end="961:35">next_sample</name> <operator pos:start="961:37" pos:end="961:37">=</operator> <call pos:start="961:39" pos:end="961:69"><name pos:start="961:39" pos:end="961:51">av_clip_int16</name><argument_list pos:start="961:52" pos:end="961:69">(<argument pos:start="961:53" pos:end="961:68"><expr pos:start="961:53" pos:end="961:68"><name pos:start="961:53" pos:end="961:63">next_sample</name> <operator pos:start="961:65" pos:end="961:66">&gt;&gt;</operator> <literal type="number" pos:start="961:68" pos:end="961:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="965:25" pos:end="965:57"><expr pos:start="965:25" pos:end="965:56"><name pos:start="965:25" pos:end="965:39">previous_sample</name> <operator pos:start="965:41" pos:end="965:41">=</operator> <name pos:start="965:43" pos:end="965:56">current_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="967:25" pos:end="967:54"><expr pos:start="967:25" pos:end="967:53"><name pos:start="967:25" pos:end="967:38">current_sample</name>  <operator pos:start="967:41" pos:end="967:41">=</operator> <name pos:start="967:43" pos:end="967:53">next_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="969:25" pos:end="969:51"><expr pos:start="969:25" pos:end="969:50"><operator pos:start="969:25" pos:end="969:25">*</operator><name pos:start="969:26" pos:end="969:33">samplesC</name> <operator pos:start="969:35" pos:end="969:35">=</operator> <name pos:start="969:37" pos:end="969:50">current_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="971:25" pos:end="971:52"><expr pos:start="971:25" pos:end="971:51"><name pos:start="971:25" pos:end="971:32">samplesC</name> <operator pos:start="971:34" pos:end="971:35">+=</operator> <name pos:start="971:37" pos:end="971:51"><name pos:start="971:37" pos:end="971:41">avctx</name><operator pos:start="971:42" pos:end="971:43">-&gt;</operator><name pos:start="971:44" pos:end="971:51">channels</name></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="981:13" pos:end="987:13"><if pos:start="981:13" pos:end="987:13">if <condition pos:start="981:16" pos:end="981:57">(<expr pos:start="981:17" pos:end="981:56"><name pos:start="981:17" pos:end="981:32"><name pos:start="981:17" pos:end="981:21">avctx</name><operator pos:start="981:22" pos:end="981:23">-&gt;</operator><name pos:start="981:24" pos:end="981:28">codec</name><operator pos:start="981:29" pos:end="981:30">-&gt;</operator><name pos:start="981:31" pos:end="981:32">id</name></name> <operator pos:start="981:34" pos:end="981:35">!=</operator> <name pos:start="981:37" pos:end="981:56">CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block pos:start="981:59" pos:end="987:13">{<block_content pos:start="983:17" pos:end="985:65">

                <expr_stmt pos:start="983:17" pos:end="983:64"><expr pos:start="983:17" pos:end="983:63"><name pos:start="983:17" pos:end="983:34"><name pos:start="983:17" pos:end="983:17">c</name><operator pos:start="983:18" pos:end="983:19">-&gt;</operator><name pos:start="983:20" pos:end="983:25">status</name><index pos:start="983:26" pos:end="983:34">[<expr pos:start="983:27" pos:end="983:33"><name pos:start="983:27" pos:end="983:33">channel</name></expr>]</index></name><operator pos:start="983:35" pos:end="983:35">.</operator><name pos:start="983:36" pos:end="983:44">predictor</name>   <operator pos:start="983:48" pos:end="983:48">=</operator> <name pos:start="983:50" pos:end="983:63">current_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="985:17" pos:end="985:65"><expr pos:start="985:17" pos:end="985:64"><name pos:start="985:17" pos:end="985:34"><name pos:start="985:17" pos:end="985:17">c</name><operator pos:start="985:18" pos:end="985:19">-&gt;</operator><name pos:start="985:20" pos:end="985:25">status</name><index pos:start="985:26" pos:end="985:34">[<expr pos:start="985:27" pos:end="985:33"><name pos:start="985:27" pos:end="985:33">channel</name></expr>]</index></name><operator pos:start="985:35" pos:end="985:35">.</operator><name pos:start="985:36" pos:end="985:46">prev_sample</name> <operator pos:start="985:48" pos:end="985:48">=</operator> <name pos:start="985:50" pos:end="985:64">previous_sample</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="993:9" pos:end="993:55"><expr pos:start="993:9" pos:end="993:54"><name pos:start="993:9" pos:end="993:11">src</name> <operator pos:start="993:13" pos:end="993:13">=</operator> <name pos:start="993:15" pos:end="993:17">src</name> <operator pos:start="993:19" pos:end="993:19">+</operator> <name pos:start="993:21" pos:end="993:28">buf_size</name> <operator pos:start="993:30" pos:end="993:30">-</operator> <operator pos:start="993:32" pos:end="993:32">(</operator><literal type="number" pos:start="993:33" pos:end="993:35">4</literal> <operator pos:start="993:35" pos:end="993:35">+</operator> <literal type="number" pos:start="993:37" pos:end="993:37">4</literal><operator pos:start="993:38" pos:end="993:38">*</operator><name pos:start="993:39" pos:end="993:53"><name pos:start="993:39" pos:end="993:43">avctx</name><operator pos:start="993:44" pos:end="993:45">-&gt;</operator><name pos:start="993:46" pos:end="993:53">channels</name></name><operator pos:start="993:54" pos:end="993:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="995:9" pos:end="995:59"><expr pos:start="995:9" pos:end="995:58"><name pos:start="995:9" pos:end="995:15">samples</name> <operator pos:start="995:17" pos:end="995:18">+=</operator> <literal type="number" pos:start="995:20" pos:end="995:21">28</literal> <operator pos:start="995:23" pos:end="995:23">*</operator> <name pos:start="995:25" pos:end="995:40">samples_in_chunk</name> <operator pos:start="995:42" pos:end="995:42">*</operator> <name pos:start="995:44" pos:end="995:58"><name pos:start="995:44" pos:end="995:48">avctx</name><operator pos:start="995:49" pos:end="995:50">-&gt;</operator><name pos:start="995:51" pos:end="995:58">channels</name></name></expr>;</expr_stmt>

        <break pos:start="997:9" pos:end="997:14">break;</break>

    </block_content>}</block>

    <case pos:start="1001:5" pos:end="1001:31">case <expr pos:start="1001:10" pos:end="1001:30"><name pos:start="1001:10" pos:end="1001:30">CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>

        <if_stmt pos:start="1003:9" pos:end="1011:9"><if pos:start="1003:9" pos:end="1011:9">if <condition pos:start="1003:12" pos:end="1005:51">(<expr pos:start="1003:13" pos:end="1005:50"><name pos:start="1003:13" pos:end="1003:23">samples_end</name><operator pos:start="1003:24" pos:end="1003:24">-</operator><name pos:start="1003:25" pos:end="1003:31">samples</name> <operator pos:start="1003:33" pos:end="1003:33">&lt;</operator> <literal type="number" pos:start="1003:35" pos:end="1003:36">32</literal><operator pos:start="1003:37" pos:end="1003:37">*</operator><literal type="number" pos:start="1003:38" pos:end="1003:38">4</literal><operator pos:start="1003:39" pos:end="1003:39">*</operator><name pos:start="1003:40" pos:end="1003:54"><name pos:start="1003:40" pos:end="1003:44">avctx</name><operator pos:start="1003:45" pos:end="1003:46">-&gt;</operator><name pos:start="1003:47" pos:end="1003:54">channels</name></name>

            <operator pos:start="1005:13" pos:end="1005:14">||</operator> <name pos:start="1005:16" pos:end="1005:23">buf_size</name> <operator pos:start="1005:25" pos:end="1005:25">&lt;</operator> <operator pos:start="1005:27" pos:end="1005:27">(</operator><literal type="number" pos:start="1005:28" pos:end="1005:29">4</literal><operator pos:start="1005:29" pos:end="1005:29">+</operator><literal type="number" pos:start="1005:30" pos:end="1005:31">15</literal><operator pos:start="1005:32" pos:end="1005:32">)</operator><operator pos:start="1005:33" pos:end="1005:33">*</operator><literal type="number" pos:start="1005:34" pos:end="1005:34">4</literal><operator pos:start="1005:35" pos:end="1005:35">*</operator><name pos:start="1005:36" pos:end="1005:50"><name pos:start="1005:36" pos:end="1005:40">avctx</name><operator pos:start="1005:41" pos:end="1005:42">-&gt;</operator><name pos:start="1005:43" pos:end="1005:50">channels</name></name></expr>)</condition> <block pos:start="1005:53" pos:end="1011:9">{<block_content pos:start="1007:13" pos:end="1009:18">

            <expr_stmt pos:start="1007:13" pos:end="1007:28"><expr pos:start="1007:13" pos:end="1007:27"><name pos:start="1007:13" pos:end="1007:15">src</name> <operator pos:start="1007:17" pos:end="1007:18">+=</operator> <name pos:start="1007:20" pos:end="1007:27">buf_size</name></expr>;</expr_stmt>

            <break pos:start="1009:13" pos:end="1009:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <for pos:start="1013:9" pos:end="1057:9">for <control pos:start="1013:13" pos:end="1013:59">(<init pos:start="1013:14" pos:end="1013:23"><expr pos:start="1013:14" pos:end="1013:22"><name pos:start="1013:14" pos:end="1013:20">channel</name><operator pos:start="1013:21" pos:end="1013:21">=</operator><literal type="number" pos:start="1013:22" pos:end="1013:22">0</literal></expr>;</init> <condition pos:start="1013:25" pos:end="1013:48"><expr pos:start="1013:25" pos:end="1013:47"><name pos:start="1013:25" pos:end="1013:31">channel</name><operator pos:start="1013:32" pos:end="1013:32">&lt;</operator><name pos:start="1013:33" pos:end="1013:47"><name pos:start="1013:33" pos:end="1013:37">avctx</name><operator pos:start="1013:38" pos:end="1013:39">-&gt;</operator><name pos:start="1013:40" pos:end="1013:47">channels</name></name></expr>;</condition> <incr pos:start="1013:50" pos:end="1013:58"><expr pos:start="1013:50" pos:end="1013:58"><name pos:start="1013:50" pos:end="1013:56">channel</name><operator pos:start="1013:57" pos:end="1013:58">++</operator></expr></incr>)</control> <block pos:start="1013:61" pos:end="1057:9">{<block_content pos:start="1015:13" pos:end="1055:13">

            <decl_stmt pos:start="1015:13" pos:end="1015:38"><decl pos:start="1015:13" pos:end="1015:27"><type pos:start="1015:13" pos:end="1015:15"><name pos:start="1015:13" pos:end="1015:15">int</name></type> <name pos:start="1015:17" pos:end="1015:27"><name pos:start="1015:17" pos:end="1015:21">coeff</name><index pos:start="1015:22" pos:end="1015:24">[<expr pos:start="1015:23" pos:end="1015:23"><literal type="number" pos:start="1015:23" pos:end="1015:23">2</literal></expr>]</index><index pos:start="1015:25" pos:end="1015:27">[<expr pos:start="1015:26" pos:end="1015:26"><literal type="number" pos:start="1015:26" pos:end="1015:26">4</literal></expr>]</index></name></decl>, <decl pos:start="1015:30" pos:end="1015:37"><type ref="prev" pos:start="1015:13" pos:end="1015:15"/><name pos:start="1015:30" pos:end="1015:37"><name pos:start="1015:30" pos:end="1015:34">shift</name><index pos:start="1015:35" pos:end="1015:37">[<expr pos:start="1015:36" pos:end="1015:36"><literal type="number" pos:start="1015:36" pos:end="1015:36">4</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="1017:13" pos:end="1017:46"><decl pos:start="1017:13" pos:end="1017:21"><type pos:start="1017:13" pos:end="1017:19"><name pos:start="1017:13" pos:end="1017:17">short</name> <modifier pos:start="1017:19" pos:end="1017:19">*</modifier></type><name pos:start="1017:20" pos:end="1017:21">s2</name></decl>, <decl pos:start="1017:24" pos:end="1017:45"><type ref="prev" pos:start="1017:13" pos:end="1017:19"><modifier pos:start="1017:24" pos:end="1017:24">*</modifier></type><name pos:start="1017:25" pos:end="1017:25">s</name> <init pos:start="1017:27" pos:end="1017:45">= <expr pos:start="1017:29" pos:end="1017:45"><operator pos:start="1017:29" pos:end="1017:29">&amp;</operator><name pos:start="1017:30" pos:end="1017:45"><name pos:start="1017:30" pos:end="1017:36">samples</name><index pos:start="1017:37" pos:end="1017:45">[<expr pos:start="1017:38" pos:end="1017:44"><name pos:start="1017:38" pos:end="1017:44">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="1019:13" pos:end="1031:13">for <control pos:start="1019:17" pos:end="1019:54">(<init pos:start="1019:18" pos:end="1019:21"><expr pos:start="1019:18" pos:end="1019:20"><name pos:start="1019:18" pos:end="1019:18">n</name><operator pos:start="1019:19" pos:end="1019:19">=</operator><literal type="number" pos:start="1019:20" pos:end="1019:20">0</literal></expr>;</init> <condition pos:start="1019:23" pos:end="1019:26"><expr pos:start="1019:23" pos:end="1019:25"><name pos:start="1019:23" pos:end="1019:23">n</name><operator pos:start="1019:24" pos:end="1019:24">&lt;</operator><literal type="number" pos:start="1019:25" pos:end="1019:25">4</literal></expr>;</condition> <incr pos:start="1019:28" pos:end="1019:53"><expr pos:start="1019:28" pos:end="1019:30"><name pos:start="1019:28" pos:end="1019:28">n</name><operator pos:start="1019:29" pos:end="1019:30">++</operator></expr><operator pos:start="1019:31" pos:end="1019:31">,</operator> <expr pos:start="1019:33" pos:end="1019:53"><name pos:start="1019:33" pos:end="1019:33">s</name><operator pos:start="1019:34" pos:end="1019:35">+=</operator><literal type="number" pos:start="1019:36" pos:end="1019:37">32</literal><operator pos:start="1019:38" pos:end="1019:38">*</operator><name pos:start="1019:39" pos:end="1019:53"><name pos:start="1019:39" pos:end="1019:43">avctx</name><operator pos:start="1019:44" pos:end="1019:45">-&gt;</operator><name pos:start="1019:46" pos:end="1019:53">channels</name></name></expr></incr>)</control> <block pos:start="1019:56" pos:end="1031:13">{<block_content pos:start="1021:17" pos:end="1029:56">

                <for pos:start="1021:17" pos:end="1023:68">for <control pos:start="1021:21" pos:end="1021:35">(<init pos:start="1021:22" pos:end="1021:25"><expr pos:start="1021:22" pos:end="1021:24"><name pos:start="1021:22" pos:end="1021:22">i</name><operator pos:start="1021:23" pos:end="1021:23">=</operator><literal type="number" pos:start="1021:24" pos:end="1021:24">0</literal></expr>;</init> <condition pos:start="1021:27" pos:end="1021:30"><expr pos:start="1021:27" pos:end="1021:29"><name pos:start="1021:27" pos:end="1021:27">i</name><operator pos:start="1021:28" pos:end="1021:28">&lt;</operator><literal type="number" pos:start="1021:29" pos:end="1021:29">2</literal></expr>;</condition> <incr pos:start="1021:32" pos:end="1021:34"><expr pos:start="1021:32" pos:end="1021:34"><name pos:start="1021:32" pos:end="1021:32">i</name><operator pos:start="1021:33" pos:end="1021:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1023:21" pos:end="1023:68"><block_content pos:start="1023:21" pos:end="1023:68">

                    <expr_stmt pos:start="1023:21" pos:end="1023:68"><expr pos:start="1023:21" pos:end="1023:67"><name pos:start="1023:21" pos:end="1023:31"><name pos:start="1023:21" pos:end="1023:25">coeff</name><index pos:start="1023:26" pos:end="1023:28">[<expr pos:start="1023:27" pos:end="1023:27"><name pos:start="1023:27" pos:end="1023:27">i</name></expr>]</index><index pos:start="1023:29" pos:end="1023:31">[<expr pos:start="1023:30" pos:end="1023:30"><name pos:start="1023:30" pos:end="1023:30">n</name></expr>]</index></name> <operator pos:start="1023:33" pos:end="1023:33">=</operator> <name pos:start="1023:35" pos:end="1023:67"><name pos:start="1023:35" pos:end="1023:48">ea_adpcm_table</name><index pos:start="1023:49" pos:end="1023:67">[<expr pos:start="1023:50" pos:end="1023:66"><operator pos:start="1023:50" pos:end="1023:50">(</operator><name pos:start="1023:51" pos:end="1023:56"><name pos:start="1023:51" pos:end="1023:53">src</name><index pos:start="1023:54" pos:end="1023:56">[<expr pos:start="1023:55" pos:end="1023:55"><literal type="number" pos:start="1023:55" pos:end="1023:55">0</literal></expr>]</index></name><operator pos:start="1023:57" pos:end="1023:57">&amp;</operator><literal type="number" pos:start="1023:58" pos:end="1023:61">0x0F</literal><operator pos:start="1023:62" pos:end="1023:62">)</operator><operator pos:start="1023:63" pos:end="1023:63">+</operator><literal type="number" pos:start="1023:64" pos:end="1023:64">4</literal><operator pos:start="1023:65" pos:end="1023:65">*</operator><name pos:start="1023:66" pos:end="1023:66">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="1025:17" pos:end="1025:45"><expr pos:start="1025:17" pos:end="1025:44"><name pos:start="1025:17" pos:end="1025:24"><name pos:start="1025:17" pos:end="1025:21">shift</name><index pos:start="1025:22" pos:end="1025:24">[<expr pos:start="1025:23" pos:end="1025:23"><name pos:start="1025:23" pos:end="1025:23">n</name></expr>]</index></name> <operator pos:start="1025:26" pos:end="1025:26">=</operator> <operator pos:start="1025:28" pos:end="1025:28">(</operator><name pos:start="1025:29" pos:end="1025:34"><name pos:start="1025:29" pos:end="1025:31">src</name><index pos:start="1025:32" pos:end="1025:34">[<expr pos:start="1025:33" pos:end="1025:33"><literal type="number" pos:start="1025:33" pos:end="1025:33">2</literal></expr>]</index></name><operator pos:start="1025:35" pos:end="1025:35">&amp;</operator><literal type="number" pos:start="1025:36" pos:end="1025:39">0x0F</literal><operator pos:start="1025:40" pos:end="1025:40">)</operator> <operator pos:start="1025:42" pos:end="1025:42">+</operator> <literal type="number" pos:start="1025:44" pos:end="1025:44">8</literal></expr>;</expr_stmt>

                <for pos:start="1027:17" pos:end="1029:56">for <control pos:start="1027:21" pos:end="1027:70">(<init pos:start="1027:22" pos:end="1027:31"><expr pos:start="1027:22" pos:end="1027:25"><name pos:start="1027:22" pos:end="1027:23">s2</name><operator pos:start="1027:24" pos:end="1027:24">=</operator><name pos:start="1027:25" pos:end="1027:25">s</name></expr><operator pos:start="1027:26" pos:end="1027:26">,</operator> <expr pos:start="1027:28" pos:end="1027:30"><name pos:start="1027:28" pos:end="1027:28">i</name><operator pos:start="1027:29" pos:end="1027:29">=</operator><literal type="number" pos:start="1027:30" pos:end="1027:30">0</literal></expr>;</init> <condition pos:start="1027:33" pos:end="1027:36"><expr pos:start="1027:33" pos:end="1027:35"><name pos:start="1027:33" pos:end="1027:33">i</name><operator pos:start="1027:34" pos:end="1027:34">&lt;</operator><literal type="number" pos:start="1027:35" pos:end="1027:35">2</literal></expr>;</condition> <incr pos:start="1027:38" pos:end="1027:69"><expr pos:start="1027:38" pos:end="1027:40"><name pos:start="1027:38" pos:end="1027:38">i</name><operator pos:start="1027:39" pos:end="1027:40">++</operator></expr><operator pos:start="1027:41" pos:end="1027:41">,</operator> <expr pos:start="1027:43" pos:end="1027:48"><name pos:start="1027:43" pos:end="1027:45">src</name><operator pos:start="1027:46" pos:end="1027:47">+=</operator><literal type="number" pos:start="1027:48" pos:end="1027:48">2</literal></expr><operator pos:start="1027:49" pos:end="1027:49">,</operator> <expr pos:start="1027:51" pos:end="1027:69"><name pos:start="1027:51" pos:end="1027:52">s2</name><operator pos:start="1027:53" pos:end="1027:54">+=</operator><name pos:start="1027:55" pos:end="1027:69"><name pos:start="1027:55" pos:end="1027:59">avctx</name><operator pos:start="1027:60" pos:end="1027:61">-&gt;</operator><name pos:start="1027:62" pos:end="1027:69">channels</name></name></expr></incr>)</control><block type="pseudo" pos:start="1029:21" pos:end="1029:56"><block_content pos:start="1029:21" pos:end="1029:56">

                    <expr_stmt pos:start="1029:21" pos:end="1029:56"><expr pos:start="1029:21" pos:end="1029:55"><name pos:start="1029:21" pos:end="1029:25"><name pos:start="1029:21" pos:end="1029:22">s2</name><index pos:start="1029:23" pos:end="1029:25">[<expr pos:start="1029:24" pos:end="1029:24"><literal type="number" pos:start="1029:24" pos:end="1029:24">0</literal></expr>]</index></name> <operator pos:start="1029:27" pos:end="1029:27">=</operator> <operator pos:start="1029:29" pos:end="1029:29">(</operator><name pos:start="1029:30" pos:end="1029:35"><name pos:start="1029:30" pos:end="1029:32">src</name><index pos:start="1029:33" pos:end="1029:35">[<expr pos:start="1029:34" pos:end="1029:34"><literal type="number" pos:start="1029:34" pos:end="1029:34">0</literal></expr>]</index></name><operator pos:start="1029:36" pos:end="1029:36">&amp;</operator><literal type="number" pos:start="1029:37" pos:end="1029:40">0xF0</literal><operator pos:start="1029:41" pos:end="1029:41">)</operator> <operator pos:start="1029:43" pos:end="1029:43">+</operator> <operator pos:start="1029:45" pos:end="1029:45">(</operator><name pos:start="1029:46" pos:end="1029:51"><name pos:start="1029:46" pos:end="1029:48">src</name><index pos:start="1029:49" pos:end="1029:51">[<expr pos:start="1029:50" pos:end="1029:50"><literal type="number" pos:start="1029:50" pos:end="1029:50">1</literal></expr>]</index></name><operator pos:start="1029:52" pos:end="1029:53">&lt;&lt;</operator><literal type="number" pos:start="1029:54" pos:end="1029:54">8</literal><operator pos:start="1029:55" pos:end="1029:55">)</operator></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>



            <for pos:start="1035:13" pos:end="1055:13">for <control pos:start="1035:17" pos:end="1035:33">(<init pos:start="1035:18" pos:end="1035:21"><expr pos:start="1035:18" pos:end="1035:20"><name pos:start="1035:18" pos:end="1035:18">m</name><operator pos:start="1035:19" pos:end="1035:19">=</operator><literal type="number" pos:start="1035:20" pos:end="1035:20">2</literal></expr>;</init> <condition pos:start="1035:23" pos:end="1035:27"><expr pos:start="1035:23" pos:end="1035:26"><name pos:start="1035:23" pos:end="1035:23">m</name><operator pos:start="1035:24" pos:end="1035:24">&lt;</operator><literal type="number" pos:start="1035:25" pos:end="1035:26">32</literal></expr>;</condition> <incr pos:start="1035:29" pos:end="1035:32"><expr pos:start="1035:29" pos:end="1035:32"><name pos:start="1035:29" pos:end="1035:29">m</name><operator pos:start="1035:30" pos:end="1035:31">+=</operator><literal type="number" pos:start="1035:32" pos:end="1035:32">2</literal></expr></incr>)</control> <block pos:start="1035:35" pos:end="1055:13">{<block_content pos:start="1037:17" pos:end="1053:17">

                <expr_stmt pos:start="1037:17" pos:end="1037:58"><expr pos:start="1037:17" pos:end="1037:57"><name pos:start="1037:17" pos:end="1037:17">s</name> <operator pos:start="1037:19" pos:end="1037:19">=</operator> <operator pos:start="1037:21" pos:end="1037:21">&amp;</operator><name pos:start="1037:22" pos:end="1037:57"><name pos:start="1037:22" pos:end="1037:28">samples</name><index pos:start="1037:29" pos:end="1037:57">[<expr pos:start="1037:30" pos:end="1037:56"><name pos:start="1037:30" pos:end="1037:30">m</name><operator pos:start="1037:31" pos:end="1037:31">*</operator><name pos:start="1037:32" pos:end="1037:46"><name pos:start="1037:32" pos:end="1037:36">avctx</name><operator pos:start="1037:37" pos:end="1037:38">-&gt;</operator><name pos:start="1037:39" pos:end="1037:46">channels</name></name> <operator pos:start="1037:48" pos:end="1037:48">+</operator> <name pos:start="1037:50" pos:end="1037:56">channel</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="1039:17" pos:end="1053:17">for <control pos:start="1039:21" pos:end="1039:65">(<init pos:start="1039:22" pos:end="1039:25"><expr pos:start="1039:22" pos:end="1039:24"><name pos:start="1039:22" pos:end="1039:22">n</name><operator pos:start="1039:23" pos:end="1039:23">=</operator><literal type="number" pos:start="1039:24" pos:end="1039:24">0</literal></expr>;</init> <condition pos:start="1039:27" pos:end="1039:30"><expr pos:start="1039:27" pos:end="1039:29"><name pos:start="1039:27" pos:end="1039:27">n</name><operator pos:start="1039:28" pos:end="1039:28">&lt;</operator><literal type="number" pos:start="1039:29" pos:end="1039:29">4</literal></expr>;</condition> <incr pos:start="1039:32" pos:end="1039:64"><expr pos:start="1039:32" pos:end="1039:34"><name pos:start="1039:32" pos:end="1039:32">n</name><operator pos:start="1039:33" pos:end="1039:34">++</operator></expr><operator pos:start="1039:35" pos:end="1039:35">,</operator> <expr pos:start="1039:37" pos:end="1039:41"><name pos:start="1039:37" pos:end="1039:39">src</name><operator pos:start="1039:40" pos:end="1039:41">++</operator></expr><operator pos:start="1039:42" pos:end="1039:42">,</operator> <expr pos:start="1039:44" pos:end="1039:64"><name pos:start="1039:44" pos:end="1039:44">s</name><operator pos:start="1039:45" pos:end="1039:46">+=</operator><literal type="number" pos:start="1039:47" pos:end="1039:48">32</literal><operator pos:start="1039:49" pos:end="1039:49">*</operator><name pos:start="1039:50" pos:end="1039:64"><name pos:start="1039:50" pos:end="1039:54">avctx</name><operator pos:start="1039:55" pos:end="1039:56">-&gt;</operator><name pos:start="1039:57" pos:end="1039:64">channels</name></name></expr></incr>)</control> <block pos:start="1039:67" pos:end="1053:17">{<block_content pos:start="1041:21" pos:end="1051:21">

                    <for pos:start="1041:21" pos:end="1051:21">for <control pos:start="1041:25" pos:end="1041:67">(<init pos:start="1041:26" pos:end="1041:35"><expr pos:start="1041:26" pos:end="1041:29"><name pos:start="1041:26" pos:end="1041:27">s2</name><operator pos:start="1041:28" pos:end="1041:28">=</operator><name pos:start="1041:29" pos:end="1041:29">s</name></expr><operator pos:start="1041:30" pos:end="1041:30">,</operator> <expr pos:start="1041:32" pos:end="1041:34"><name pos:start="1041:32" pos:end="1041:32">i</name><operator pos:start="1041:33" pos:end="1041:33">=</operator><literal type="number" pos:start="1041:34" pos:end="1041:34">0</literal></expr>;</init> <condition pos:start="1041:37" pos:end="1041:40"><expr pos:start="1041:37" pos:end="1041:39"><name pos:start="1041:37" pos:end="1041:37">i</name><operator pos:start="1041:38" pos:end="1041:38">&lt;</operator><literal type="number" pos:start="1041:39" pos:end="1041:39">8</literal></expr>;</condition> <incr pos:start="1041:42" pos:end="1041:66"><expr pos:start="1041:42" pos:end="1041:45"><name pos:start="1041:42" pos:end="1041:42">i</name><operator pos:start="1041:43" pos:end="1041:44">+=</operator><literal type="number" pos:start="1041:45" pos:end="1041:45">4</literal></expr><operator pos:start="1041:46" pos:end="1041:46">,</operator> <expr pos:start="1041:48" pos:end="1041:66"><name pos:start="1041:48" pos:end="1041:49">s2</name><operator pos:start="1041:50" pos:end="1041:51">+=</operator><name pos:start="1041:52" pos:end="1041:66"><name pos:start="1041:52" pos:end="1041:56">avctx</name><operator pos:start="1041:57" pos:end="1041:58">-&gt;</operator><name pos:start="1041:59" pos:end="1041:66">channels</name></name></expr></incr>)</control> <block pos:start="1041:69" pos:end="1051:21">{<block_content pos:start="1043:25" pos:end="1049:74">

                        <decl_stmt pos:start="1043:25" pos:end="1043:88"><decl pos:start="1043:25" pos:end="1043:87"><type pos:start="1043:25" pos:end="1043:27"><name pos:start="1043:25" pos:end="1043:27">int</name></type> <name pos:start="1043:29" pos:end="1043:33">level</name> <init pos:start="1043:35" pos:end="1043:87">= <expr pos:start="1043:37" pos:end="1043:87"><operator pos:start="1043:37" pos:end="1043:37">(</operator><name pos:start="1043:38" pos:end="1043:44">int32_t</name><operator pos:start="1043:45" pos:end="1043:45">)</operator><operator pos:start="1043:46" pos:end="1043:46">(</operator><operator pos:start="1043:47" pos:end="1043:47">(</operator><operator pos:start="1043:48" pos:end="1043:48">*</operator><name pos:start="1043:49" pos:end="1043:51">src</name> <operator pos:start="1043:53" pos:end="1043:53">&amp;</operator> <operator pos:start="1043:55" pos:end="1043:55">(</operator><literal type="number" pos:start="1043:56" pos:end="1043:59">0xF0</literal><operator pos:start="1043:60" pos:end="1043:61">&gt;&gt;</operator><name pos:start="1043:62" pos:end="1043:62">i</name><operator pos:start="1043:63" pos:end="1043:63">)</operator><operator pos:start="1043:64" pos:end="1043:64">)</operator> <operator pos:start="1043:66" pos:end="1043:67">&lt;&lt;</operator> <operator pos:start="1043:69" pos:end="1043:69">(</operator><literal type="number" pos:start="1043:70" pos:end="1043:72">24</literal><operator pos:start="1043:72" pos:end="1043:72">+</operator><name pos:start="1043:73" pos:end="1043:73">i</name><operator pos:start="1043:74" pos:end="1043:74">)</operator><operator pos:start="1043:75" pos:end="1043:75">)</operator> <operator pos:start="1043:77" pos:end="1043:78">&gt;&gt;</operator> <name pos:start="1043:80" pos:end="1043:87"><name pos:start="1043:80" pos:end="1043:84">shift</name><index pos:start="1043:85" pos:end="1043:87">[<expr pos:start="1043:86" pos:end="1043:86"><name pos:start="1043:86" pos:end="1043:86">n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="1045:25" pos:end="1047:73"><decl pos:start="1045:25" pos:end="1047:72"><type pos:start="1045:25" pos:end="1045:27"><name pos:start="1045:25" pos:end="1045:27">int</name></type> <name pos:start="1045:29" pos:end="1045:32">pred</name>  <init pos:start="1045:35" pos:end="1047:72">= <expr pos:start="1045:37" pos:end="1047:72"><name pos:start="1045:37" pos:end="1045:58"><name pos:start="1045:37" pos:end="1045:38">s2</name><index pos:start="1045:39" pos:end="1045:58">[<expr pos:start="1045:40" pos:end="1045:57"><operator pos:start="1045:40" pos:end="1045:40">-</operator><literal type="number" pos:start="1045:41" pos:end="1045:41">1</literal><operator pos:start="1045:42" pos:end="1045:42">*</operator><name pos:start="1045:43" pos:end="1045:57"><name pos:start="1045:43" pos:end="1045:47">avctx</name><operator pos:start="1045:48" pos:end="1045:49">-&gt;</operator><name pos:start="1045:50" pos:end="1045:57">channels</name></name></expr>]</index></name> <operator pos:start="1045:60" pos:end="1045:60">*</operator> <name pos:start="1045:62" pos:end="1045:72"><name pos:start="1045:62" pos:end="1045:66">coeff</name><index pos:start="1045:67" pos:end="1045:69">[<expr pos:start="1045:68" pos:end="1045:68"><literal type="number" pos:start="1045:68" pos:end="1045:68">0</literal></expr>]</index><index pos:start="1045:70" pos:end="1045:72">[<expr pos:start="1045:71" pos:end="1045:71"><name pos:start="1045:71" pos:end="1045:71">n</name></expr>]</index></name>

                                  <operator pos:start="1047:35" pos:end="1047:35">+</operator> <name pos:start="1047:37" pos:end="1047:58"><name pos:start="1047:37" pos:end="1047:38">s2</name><index pos:start="1047:39" pos:end="1047:58">[<expr pos:start="1047:40" pos:end="1047:57"><operator pos:start="1047:40" pos:end="1047:40">-</operator><literal type="number" pos:start="1047:41" pos:end="1047:41">2</literal><operator pos:start="1047:42" pos:end="1047:42">*</operator><name pos:start="1047:43" pos:end="1047:57"><name pos:start="1047:43" pos:end="1047:47">avctx</name><operator pos:start="1047:48" pos:end="1047:49">-&gt;</operator><name pos:start="1047:50" pos:end="1047:57">channels</name></name></expr>]</index></name> <operator pos:start="1047:60" pos:end="1047:60">*</operator> <name pos:start="1047:62" pos:end="1047:72"><name pos:start="1047:62" pos:end="1047:66">coeff</name><index pos:start="1047:67" pos:end="1047:69">[<expr pos:start="1047:68" pos:end="1047:68"><literal type="number" pos:start="1047:68" pos:end="1047:68">1</literal></expr>]</index><index pos:start="1047:70" pos:end="1047:72">[<expr pos:start="1047:71" pos:end="1047:71"><name pos:start="1047:71" pos:end="1047:71">n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="1049:25" pos:end="1049:74"><expr pos:start="1049:25" pos:end="1049:73"><name pos:start="1049:25" pos:end="1049:29"><name pos:start="1049:25" pos:end="1049:26">s2</name><index pos:start="1049:27" pos:end="1049:29">[<expr pos:start="1049:28" pos:end="1049:28"><literal type="number" pos:start="1049:28" pos:end="1049:28">0</literal></expr>]</index></name> <operator pos:start="1049:31" pos:end="1049:31">=</operator> <call pos:start="1049:33" pos:end="1049:73"><name pos:start="1049:33" pos:end="1049:45">av_clip_int16</name><argument_list pos:start="1049:46" pos:end="1049:73">(<argument pos:start="1049:47" pos:end="1049:72"><expr pos:start="1049:47" pos:end="1049:72"><operator pos:start="1049:47" pos:end="1049:47">(</operator><name pos:start="1049:48" pos:end="1049:52">level</name> <operator pos:start="1049:54" pos:end="1049:54">+</operator> <name pos:start="1049:56" pos:end="1049:59">pred</name> <operator pos:start="1049:61" pos:end="1049:61">+</operator> <literal type="number" pos:start="1049:63" pos:end="1049:66">0x80</literal><operator pos:start="1049:67" pos:end="1049:67">)</operator> <operator pos:start="1049:69" pos:end="1049:70">&gt;&gt;</operator> <literal type="number" pos:start="1049:72" pos:end="1049:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="1059:9" pos:end="1059:40"><expr pos:start="1059:9" pos:end="1059:39"><name pos:start="1059:9" pos:end="1059:15">samples</name> <operator pos:start="1059:17" pos:end="1059:18">+=</operator> <literal type="number" pos:start="1059:20" pos:end="1059:21">32</literal><operator pos:start="1059:22" pos:end="1059:22">*</operator><literal type="number" pos:start="1059:23" pos:end="1059:23">4</literal><operator pos:start="1059:24" pos:end="1059:24">*</operator><name pos:start="1059:25" pos:end="1059:39"><name pos:start="1059:25" pos:end="1059:29">avctx</name><operator pos:start="1059:30" pos:end="1059:31">-&gt;</operator><name pos:start="1059:32" pos:end="1059:39">channels</name></name></expr>;</expr_stmt>

        <break pos:start="1061:9" pos:end="1061:14">break;</break>

    <case pos:start="1063:5" pos:end="1063:32">case <expr pos:start="1063:10" pos:end="1063:31"><name pos:start="1063:10" pos:end="1063:31">CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>

    <case pos:start="1065:5" pos:end="1065:35">case <expr pos:start="1065:10" pos:end="1065:34"><name pos:start="1065:10" pos:end="1065:34">CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>

        <expr_stmt pos:start="1067:9" pos:end="1067:68"><expr pos:start="1067:9" pos:end="1067:67"><name pos:start="1067:9" pos:end="1067:20"><name pos:start="1067:9" pos:end="1067:9">c</name><operator pos:start="1067:10" pos:end="1067:11">-&gt;</operator><name pos:start="1067:12" pos:end="1067:17">status</name><index pos:start="1067:18" pos:end="1067:20">[<expr pos:start="1067:19" pos:end="1067:19"><literal type="number" pos:start="1067:19" pos:end="1067:19">0</literal></expr>]</index></name><operator pos:start="1067:21" pos:end="1067:21">.</operator><name pos:start="1067:22" pos:end="1067:30">predictor</name> <operator pos:start="1067:32" pos:end="1067:32">=</operator> <operator pos:start="1067:34" pos:end="1067:34">(</operator><name pos:start="1067:35" pos:end="1067:41">int16_t</name><operator pos:start="1067:42" pos:end="1067:42">)</operator><call pos:start="1067:43" pos:end="1067:67"><name pos:start="1067:43" pos:end="1067:61">bytestream_get_le16</name><argument_list pos:start="1067:62" pos:end="1067:67">(<argument pos:start="1067:63" pos:end="1067:66"><expr pos:start="1067:63" pos:end="1067:66"><operator pos:start="1067:63" pos:end="1067:63">&amp;</operator><name pos:start="1067:64" pos:end="1067:66">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1069:9" pos:end="1069:60"><expr pos:start="1069:9" pos:end="1069:59"><name pos:start="1069:9" pos:end="1069:20"><name pos:start="1069:9" pos:end="1069:9">c</name><operator pos:start="1069:10" pos:end="1069:11">-&gt;</operator><name pos:start="1069:12" pos:end="1069:17">status</name><index pos:start="1069:18" pos:end="1069:20">[<expr pos:start="1069:19" pos:end="1069:19"><literal type="number" pos:start="1069:19" pos:end="1069:19">0</literal></expr>]</index></name><operator pos:start="1069:21" pos:end="1069:21">.</operator><name pos:start="1069:22" pos:end="1069:31">step_index</name> <operator pos:start="1069:33" pos:end="1069:33">=</operator> <call pos:start="1069:35" pos:end="1069:59"><name pos:start="1069:35" pos:end="1069:53">bytestream_get_le16</name><argument_list pos:start="1069:54" pos:end="1069:59">(<argument pos:start="1069:55" pos:end="1069:58"><expr pos:start="1069:55" pos:end="1069:58"><operator pos:start="1069:55" pos:end="1069:55">&amp;</operator><name pos:start="1069:56" pos:end="1069:58">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="1073:9" pos:end="1075:19"><if pos:start="1073:9" pos:end="1075:19">if <condition pos:start="1073:12" pos:end="1073:55">(<expr pos:start="1073:13" pos:end="1073:54"><name pos:start="1073:13" pos:end="1073:28"><name pos:start="1073:13" pos:end="1073:17">avctx</name><operator pos:start="1073:18" pos:end="1073:19">-&gt;</operator><name pos:start="1073:20" pos:end="1073:24">codec</name><operator pos:start="1073:25" pos:end="1073:26">-&gt;</operator><name pos:start="1073:27" pos:end="1073:28">id</name></name> <operator pos:start="1073:30" pos:end="1073:31">==</operator> <name pos:start="1073:33" pos:end="1073:54">CODEC_ID_ADPCM_IMA_AMV</name></expr>)</condition><block type="pseudo" pos:start="1075:13" pos:end="1075:19"><block_content pos:start="1075:13" pos:end="1075:19">

            <expr_stmt pos:start="1075:13" pos:end="1075:19"><expr pos:start="1075:13" pos:end="1075:18"><name pos:start="1075:13" pos:end="1075:15">src</name><operator pos:start="1075:16" pos:end="1075:17">+=</operator><literal type="number" pos:start="1075:18" pos:end="1075:18">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <while pos:start="1079:9" pos:end="1105:9">while <condition pos:start="1079:15" pos:end="1079:36">(<expr pos:start="1079:16" pos:end="1079:35"><name pos:start="1079:16" pos:end="1079:18">src</name> <operator pos:start="1079:20" pos:end="1079:20">&lt;</operator> <name pos:start="1079:22" pos:end="1079:24">buf</name> <operator pos:start="1079:26" pos:end="1079:26">+</operator> <name pos:start="1079:28" pos:end="1079:35">buf_size</name></expr>)</condition> <block pos:start="1079:38" pos:end="1105:9">{<block_content pos:start="1081:13" pos:end="1103:18">

            <decl_stmt pos:start="1081:13" pos:end="1081:24"><decl pos:start="1081:13" pos:end="1081:19"><type pos:start="1081:13" pos:end="1081:16"><name pos:start="1081:13" pos:end="1081:16">char</name></type> <name pos:start="1081:18" pos:end="1081:19">hi</name></decl>, <decl pos:start="1081:22" pos:end="1081:23"><type ref="prev" pos:start="1081:13" pos:end="1081:16"/><name pos:start="1081:22" pos:end="1081:23">lo</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1083:13" pos:end="1083:29"><expr pos:start="1083:13" pos:end="1083:28"><name pos:start="1083:13" pos:end="1083:14">lo</name> <operator pos:start="1083:16" pos:end="1083:16">=</operator> <operator pos:start="1083:18" pos:end="1083:18">*</operator><name pos:start="1083:19" pos:end="1083:21">src</name> <operator pos:start="1083:23" pos:end="1083:23">&amp;</operator> <literal type="number" pos:start="1083:25" pos:end="1083:28">0x0F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1085:13" pos:end="1085:27"><expr pos:start="1085:13" pos:end="1085:26"><name pos:start="1085:13" pos:end="1085:14">hi</name> <operator pos:start="1085:16" pos:end="1085:16">=</operator> <operator pos:start="1085:18" pos:end="1085:18">*</operator><name pos:start="1085:19" pos:end="1085:21">src</name> <operator pos:start="1085:23" pos:end="1085:24">&gt;&gt;</operator> <literal type="number" pos:start="1085:26" pos:end="1085:26">4</literal></expr>;</expr_stmt>



            <if_stmt pos:start="1089:13" pos:end="1091:37"><if pos:start="1089:13" pos:end="1091:37">if <condition pos:start="1089:16" pos:end="1089:59">(<expr pos:start="1089:17" pos:end="1089:58"><name pos:start="1089:17" pos:end="1089:32"><name pos:start="1089:17" pos:end="1089:21">avctx</name><operator pos:start="1089:22" pos:end="1089:23">-&gt;</operator><name pos:start="1089:24" pos:end="1089:28">codec</name><operator pos:start="1089:29" pos:end="1089:30">-&gt;</operator><name pos:start="1089:31" pos:end="1089:32">id</name></name> <operator pos:start="1089:34" pos:end="1089:35">==</operator> <name pos:start="1089:37" pos:end="1089:58">CODEC_ID_ADPCM_IMA_AMV</name></expr>)</condition><block type="pseudo" pos:start="1091:17" pos:end="1091:37"><block_content pos:start="1091:17" pos:end="1091:37">

                <expr_stmt pos:start="1091:17" pos:end="1091:37"><expr pos:start="1091:17" pos:end="1091:36"><call pos:start="1091:17" pos:end="1091:36"><name pos:start="1091:17" pos:end="1091:22">FFSWAP</name><argument_list pos:start="1091:23" pos:end="1091:36">(<argument pos:start="1091:24" pos:end="1091:27"><expr pos:start="1091:24" pos:end="1091:27"><name pos:start="1091:24" pos:end="1091:27">char</name></expr></argument>, <argument pos:start="1091:30" pos:end="1091:31"><expr pos:start="1091:30" pos:end="1091:31"><name pos:start="1091:30" pos:end="1091:31">hi</name></expr></argument>, <argument pos:start="1091:34" pos:end="1091:35"><expr pos:start="1091:34" pos:end="1091:35"><name pos:start="1091:34" pos:end="1091:35">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="1095:13" pos:end="1097:23"><expr pos:start="1095:13" pos:end="1097:22"><operator pos:start="1095:13" pos:end="1095:13">*</operator><name pos:start="1095:14" pos:end="1095:20">samples</name><operator pos:start="1095:21" pos:end="1095:22">++</operator> <operator pos:start="1095:24" pos:end="1095:24">=</operator> <call pos:start="1095:26" pos:end="1097:22"><name pos:start="1095:26" pos:end="1095:48">adpcm_ima_expand_nibble</name><argument_list pos:start="1095:49" pos:end="1097:22">(<argument pos:start="1095:50" pos:end="1095:62"><expr pos:start="1095:50" pos:end="1095:62"><operator pos:start="1095:50" pos:end="1095:50">&amp;</operator><name pos:start="1095:51" pos:end="1095:62"><name pos:start="1095:51" pos:end="1095:51">c</name><operator pos:start="1095:52" pos:end="1095:53">-&gt;</operator><name pos:start="1095:54" pos:end="1095:59">status</name><index pos:start="1095:60" pos:end="1095:62">[<expr pos:start="1095:61" pos:end="1095:61"><literal type="number" pos:start="1095:61" pos:end="1095:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="1097:17" pos:end="1097:18"><expr pos:start="1097:17" pos:end="1097:18"><name pos:start="1097:17" pos:end="1097:18">lo</name></expr></argument>, <argument pos:start="1097:21" pos:end="1097:21"><expr pos:start="1097:21" pos:end="1097:21"><literal type="number" pos:start="1097:21" pos:end="1097:21">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1099:13" pos:end="1101:23"><expr pos:start="1099:13" pos:end="1101:22"><operator pos:start="1099:13" pos:end="1099:13">*</operator><name pos:start="1099:14" pos:end="1099:20">samples</name><operator pos:start="1099:21" pos:end="1099:22">++</operator> <operator pos:start="1099:24" pos:end="1099:24">=</operator> <call pos:start="1099:26" pos:end="1101:22"><name pos:start="1099:26" pos:end="1099:48">adpcm_ima_expand_nibble</name><argument_list pos:start="1099:49" pos:end="1101:22">(<argument pos:start="1099:50" pos:end="1099:62"><expr pos:start="1099:50" pos:end="1099:62"><operator pos:start="1099:50" pos:end="1099:50">&amp;</operator><name pos:start="1099:51" pos:end="1099:62"><name pos:start="1099:51" pos:end="1099:51">c</name><operator pos:start="1099:52" pos:end="1099:53">-&gt;</operator><name pos:start="1099:54" pos:end="1099:59">status</name><index pos:start="1099:60" pos:end="1099:62">[<expr pos:start="1099:61" pos:end="1099:61"><literal type="number" pos:start="1099:61" pos:end="1099:61">0</literal></expr>]</index></name></expr></argument>,

                <argument pos:start="1101:17" pos:end="1101:18"><expr pos:start="1101:17" pos:end="1101:18"><name pos:start="1101:17" pos:end="1101:18">hi</name></expr></argument>, <argument pos:start="1101:21" pos:end="1101:21"><expr pos:start="1101:21" pos:end="1101:21"><literal type="number" pos:start="1101:21" pos:end="1101:21">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1103:13" pos:end="1103:18"><expr pos:start="1103:13" pos:end="1103:17"><name pos:start="1103:13" pos:end="1103:15">src</name><operator pos:start="1103:16" pos:end="1103:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="1107:9" pos:end="1107:14">break;</break>

    <case pos:start="1109:5" pos:end="1109:27">case <expr pos:start="1109:10" pos:end="1109:26"><name pos:start="1109:10" pos:end="1109:26">CODEC_ID_ADPCM_CT</name></expr>:</case>

        <while pos:start="1111:9" pos:end="1137:9">while <condition pos:start="1111:15" pos:end="1111:36">(<expr pos:start="1111:16" pos:end="1111:35"><name pos:start="1111:16" pos:end="1111:18">src</name> <operator pos:start="1111:20" pos:end="1111:20">&lt;</operator> <name pos:start="1111:22" pos:end="1111:24">buf</name> <operator pos:start="1111:26" pos:end="1111:26">+</operator> <name pos:start="1111:28" pos:end="1111:35">buf_size</name></expr>)</condition> <block pos:start="1111:38" pos:end="1137:9">{<block_content pos:start="1113:13" pos:end="1135:18">

            <if_stmt pos:start="1113:13" pos:end="1133:13"><if pos:start="1113:13" pos:end="1123:13">if <condition pos:start="1113:16" pos:end="1113:19">(<expr pos:start="1113:17" pos:end="1113:18"><name pos:start="1113:17" pos:end="1113:18">st</name></expr>)</condition> <block pos:start="1113:21" pos:end="1123:13">{<block_content pos:start="1115:17" pos:end="1121:35">

                <expr_stmt pos:start="1115:17" pos:end="1117:33"><expr pos:start="1115:17" pos:end="1117:32"><operator pos:start="1115:17" pos:end="1115:17">*</operator><name pos:start="1115:18" pos:end="1115:24">samples</name><operator pos:start="1115:25" pos:end="1115:26">++</operator> <operator pos:start="1115:28" pos:end="1115:28">=</operator> <call pos:start="1115:30" pos:end="1117:32"><name pos:start="1115:30" pos:end="1115:51">adpcm_ct_expand_nibble</name><argument_list pos:start="1115:52" pos:end="1117:32">(<argument pos:start="1115:53" pos:end="1115:65"><expr pos:start="1115:53" pos:end="1115:65"><operator pos:start="1115:53" pos:end="1115:53">&amp;</operator><name pos:start="1115:54" pos:end="1115:65"><name pos:start="1115:54" pos:end="1115:54">c</name><operator pos:start="1115:55" pos:end="1115:56">-&gt;</operator><name pos:start="1115:57" pos:end="1115:62">status</name><index pos:start="1115:63" pos:end="1115:65">[<expr pos:start="1115:64" pos:end="1115:64"><literal type="number" pos:start="1115:64" pos:end="1115:64">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1117:21" pos:end="1117:31"><expr pos:start="1117:21" pos:end="1117:31"><name pos:start="1117:21" pos:end="1117:26"><name pos:start="1117:21" pos:end="1117:23">src</name><index pos:start="1117:24" pos:end="1117:26">[<expr pos:start="1117:25" pos:end="1117:25"><literal type="number" pos:start="1117:25" pos:end="1117:25">0</literal></expr>]</index></name> <operator pos:start="1117:28" pos:end="1117:29">&gt;&gt;</operator> <literal type="number" pos:start="1117:31" pos:end="1117:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1119:17" pos:end="1121:35"><expr pos:start="1119:17" pos:end="1121:34"><operator pos:start="1119:17" pos:end="1119:17">*</operator><name pos:start="1119:18" pos:end="1119:24">samples</name><operator pos:start="1119:25" pos:end="1119:26">++</operator> <operator pos:start="1119:28" pos:end="1119:28">=</operator> <call pos:start="1119:30" pos:end="1121:34"><name pos:start="1119:30" pos:end="1119:51">adpcm_ct_expand_nibble</name><argument_list pos:start="1119:52" pos:end="1121:34">(<argument pos:start="1119:53" pos:end="1119:65"><expr pos:start="1119:53" pos:end="1119:65"><operator pos:start="1119:53" pos:end="1119:53">&amp;</operator><name pos:start="1119:54" pos:end="1119:65"><name pos:start="1119:54" pos:end="1119:54">c</name><operator pos:start="1119:55" pos:end="1119:56">-&gt;</operator><name pos:start="1119:57" pos:end="1119:62">status</name><index pos:start="1119:63" pos:end="1119:65">[<expr pos:start="1119:64" pos:end="1119:64"><literal type="number" pos:start="1119:64" pos:end="1119:64">1</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1121:21" pos:end="1121:33"><expr pos:start="1121:21" pos:end="1121:33"><name pos:start="1121:21" pos:end="1121:26"><name pos:start="1121:21" pos:end="1121:23">src</name><index pos:start="1121:24" pos:end="1121:26">[<expr pos:start="1121:25" pos:end="1121:25"><literal type="number" pos:start="1121:25" pos:end="1121:25">0</literal></expr>]</index></name> <operator pos:start="1121:28" pos:end="1121:28">&amp;</operator> <literal type="number" pos:start="1121:30" pos:end="1121:33">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1123:15" pos:end="1133:13">else <block pos:start="1123:20" pos:end="1133:13">{<block_content pos:start="1125:17" pos:end="1131:35">

                <expr_stmt pos:start="1125:17" pos:end="1127:33"><expr pos:start="1125:17" pos:end="1127:32"><operator pos:start="1125:17" pos:end="1125:17">*</operator><name pos:start="1125:18" pos:end="1125:24">samples</name><operator pos:start="1125:25" pos:end="1125:26">++</operator> <operator pos:start="1125:28" pos:end="1125:28">=</operator> <call pos:start="1125:30" pos:end="1127:32"><name pos:start="1125:30" pos:end="1125:51">adpcm_ct_expand_nibble</name><argument_list pos:start="1125:52" pos:end="1127:32">(<argument pos:start="1125:53" pos:end="1125:65"><expr pos:start="1125:53" pos:end="1125:65"><operator pos:start="1125:53" pos:end="1125:53">&amp;</operator><name pos:start="1125:54" pos:end="1125:65"><name pos:start="1125:54" pos:end="1125:54">c</name><operator pos:start="1125:55" pos:end="1125:56">-&gt;</operator><name pos:start="1125:57" pos:end="1125:62">status</name><index pos:start="1125:63" pos:end="1125:65">[<expr pos:start="1125:64" pos:end="1125:64"><literal type="number" pos:start="1125:64" pos:end="1125:64">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1127:21" pos:end="1127:31"><expr pos:start="1127:21" pos:end="1127:31"><name pos:start="1127:21" pos:end="1127:26"><name pos:start="1127:21" pos:end="1127:23">src</name><index pos:start="1127:24" pos:end="1127:26">[<expr pos:start="1127:25" pos:end="1127:25"><literal type="number" pos:start="1127:25" pos:end="1127:25">0</literal></expr>]</index></name> <operator pos:start="1127:28" pos:end="1127:29">&gt;&gt;</operator> <literal type="number" pos:start="1127:31" pos:end="1127:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1129:17" pos:end="1131:35"><expr pos:start="1129:17" pos:end="1131:34"><operator pos:start="1129:17" pos:end="1129:17">*</operator><name pos:start="1129:18" pos:end="1129:24">samples</name><operator pos:start="1129:25" pos:end="1129:26">++</operator> <operator pos:start="1129:28" pos:end="1129:28">=</operator> <call pos:start="1129:30" pos:end="1131:34"><name pos:start="1129:30" pos:end="1129:51">adpcm_ct_expand_nibble</name><argument_list pos:start="1129:52" pos:end="1131:34">(<argument pos:start="1129:53" pos:end="1129:65"><expr pos:start="1129:53" pos:end="1129:65"><operator pos:start="1129:53" pos:end="1129:53">&amp;</operator><name pos:start="1129:54" pos:end="1129:65"><name pos:start="1129:54" pos:end="1129:54">c</name><operator pos:start="1129:55" pos:end="1129:56">-&gt;</operator><name pos:start="1129:57" pos:end="1129:62">status</name><index pos:start="1129:63" pos:end="1129:65">[<expr pos:start="1129:64" pos:end="1129:64"><literal type="number" pos:start="1129:64" pos:end="1129:64">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1131:21" pos:end="1131:33"><expr pos:start="1131:21" pos:end="1131:33"><name pos:start="1131:21" pos:end="1131:26"><name pos:start="1131:21" pos:end="1131:23">src</name><index pos:start="1131:24" pos:end="1131:26">[<expr pos:start="1131:25" pos:end="1131:25"><literal type="number" pos:start="1131:25" pos:end="1131:25">0</literal></expr>]</index></name> <operator pos:start="1131:28" pos:end="1131:28">&amp;</operator> <literal type="number" pos:start="1131:30" pos:end="1131:33">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1135:13" pos:end="1135:18"><expr pos:start="1135:13" pos:end="1135:17"><name pos:start="1135:13" pos:end="1135:15">src</name><operator pos:start="1135:16" pos:end="1135:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="1139:9" pos:end="1139:14">break;</break>

    <case pos:start="1141:5" pos:end="1141:32">case <expr pos:start="1141:10" pos:end="1141:31"><name pos:start="1141:10" pos:end="1141:31">CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>

    <case pos:start="1143:5" pos:end="1143:32">case <expr pos:start="1143:10" pos:end="1143:31"><name pos:start="1143:10" pos:end="1143:31">CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>

    <case pos:start="1145:5" pos:end="1145:32">case <expr pos:start="1145:10" pos:end="1145:31"><name pos:start="1145:10" pos:end="1145:31">CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>

        <if_stmt pos:start="1147:9" pos:end="1159:9"><if pos:start="1147:9" pos:end="1159:9">if <condition pos:start="1147:12" pos:end="1147:37">(<expr pos:start="1147:13" pos:end="1147:36"><operator pos:start="1147:13" pos:end="1147:13">!</operator><name pos:start="1147:14" pos:end="1147:25"><name pos:start="1147:14" pos:end="1147:14">c</name><operator pos:start="1147:15" pos:end="1147:16">-&gt;</operator><name pos:start="1147:17" pos:end="1147:22">status</name><index pos:start="1147:23" pos:end="1147:25">[<expr pos:start="1147:24" pos:end="1147:24"><literal type="number" pos:start="1147:24" pos:end="1147:24">0</literal></expr>]</index></name><operator pos:start="1147:26" pos:end="1147:26">.</operator><name pos:start="1147:27" pos:end="1147:36">step_index</name></expr>)</condition> <block pos:start="1147:39" pos:end="1159:9">{<block_content pos:start="1151:13" pos:end="1157:40">

            <comment type="block" pos:start="1149:13" pos:end="1149:48">/* the first byte is a raw sample */</comment>

            <expr_stmt pos:start="1151:13" pos:end="1151:47"><expr pos:start="1151:13" pos:end="1151:46"><operator pos:start="1151:13" pos:end="1151:13">*</operator><name pos:start="1151:14" pos:end="1151:20">samples</name><operator pos:start="1151:21" pos:end="1151:22">++</operator> <operator pos:start="1151:24" pos:end="1151:24">=</operator> <literal type="number" pos:start="1151:26" pos:end="1151:28">128</literal> <operator pos:start="1151:30" pos:end="1151:30">*</operator> <operator pos:start="1151:32" pos:end="1151:32">(</operator><operator pos:start="1151:33" pos:end="1151:33">*</operator><name pos:start="1151:34" pos:end="1151:36">src</name><operator pos:start="1151:37" pos:end="1151:38">++</operator> <operator pos:start="1151:40" pos:end="1151:40">-</operator> <literal type="number" pos:start="1151:42" pos:end="1151:45">0x80</literal><operator pos:start="1151:46" pos:end="1151:46">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1153:13" pos:end="1155:49"><if pos:start="1153:13" pos:end="1155:49">if <condition pos:start="1153:16" pos:end="1153:19">(<expr pos:start="1153:17" pos:end="1153:18"><name pos:start="1153:17" pos:end="1153:18">st</name></expr>)</condition><block type="pseudo" pos:start="1155:15" pos:end="1155:49"><block_content pos:start="1155:15" pos:end="1155:49">

              <expr_stmt pos:start="1155:15" pos:end="1155:49"><expr pos:start="1155:15" pos:end="1155:48"><operator pos:start="1155:15" pos:end="1155:15">*</operator><name pos:start="1155:16" pos:end="1155:22">samples</name><operator pos:start="1155:23" pos:end="1155:24">++</operator> <operator pos:start="1155:26" pos:end="1155:26">=</operator> <literal type="number" pos:start="1155:28" pos:end="1155:30">128</literal> <operator pos:start="1155:32" pos:end="1155:32">*</operator> <operator pos:start="1155:34" pos:end="1155:34">(</operator><operator pos:start="1155:35" pos:end="1155:35">*</operator><name pos:start="1155:36" pos:end="1155:38">src</name><operator pos:start="1155:39" pos:end="1155:40">++</operator> <operator pos:start="1155:42" pos:end="1155:42">-</operator> <literal type="number" pos:start="1155:44" pos:end="1155:47">0x80</literal><operator pos:start="1155:48" pos:end="1155:48">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1157:13" pos:end="1157:40"><expr pos:start="1157:13" pos:end="1157:39"><name pos:start="1157:13" pos:end="1157:24"><name pos:start="1157:13" pos:end="1157:13">c</name><operator pos:start="1157:14" pos:end="1157:15">-&gt;</operator><name pos:start="1157:16" pos:end="1157:21">status</name><index pos:start="1157:22" pos:end="1157:24">[<expr pos:start="1157:23" pos:end="1157:23"><literal type="number" pos:start="1157:23" pos:end="1157:23">0</literal></expr>]</index></name><operator pos:start="1157:25" pos:end="1157:25">.</operator><name pos:start="1157:26" pos:end="1157:35">step_index</name> <operator pos:start="1157:37" pos:end="1157:37">=</operator> <literal type="number" pos:start="1157:39" pos:end="1157:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1161:9" pos:end="1221:9"><if pos:start="1161:9" pos:end="1177:9">if <condition pos:start="1161:12" pos:end="1161:55">(<expr pos:start="1161:13" pos:end="1161:54"><name pos:start="1161:13" pos:end="1161:28"><name pos:start="1161:13" pos:end="1161:17">avctx</name><operator pos:start="1161:18" pos:end="1161:19">-&gt;</operator><name pos:start="1161:20" pos:end="1161:24">codec</name><operator pos:start="1161:25" pos:end="1161:26">-&gt;</operator><name pos:start="1161:27" pos:end="1161:28">id</name></name> <operator pos:start="1161:30" pos:end="1161:31">==</operator> <name pos:start="1161:33" pos:end="1161:54">CODEC_ID_ADPCM_SBPRO_4</name></expr>)</condition> <block pos:start="1161:57" pos:end="1177:9">{<block_content pos:start="1163:13" pos:end="1175:13">

            <while pos:start="1163:13" pos:end="1175:13">while <condition pos:start="1163:19" pos:end="1163:40">(<expr pos:start="1163:20" pos:end="1163:39"><name pos:start="1163:20" pos:end="1163:22">src</name> <operator pos:start="1163:24" pos:end="1163:24">&lt;</operator> <name pos:start="1163:26" pos:end="1163:28">buf</name> <operator pos:start="1163:30" pos:end="1163:30">+</operator> <name pos:start="1163:32" pos:end="1163:39">buf_size</name></expr>)</condition> <block pos:start="1163:42" pos:end="1175:13">{<block_content pos:start="1165:17" pos:end="1173:22">

                <expr_stmt pos:start="1165:17" pos:end="1167:39"><expr pos:start="1165:17" pos:end="1167:38"><operator pos:start="1165:17" pos:end="1165:17">*</operator><name pos:start="1165:18" pos:end="1165:24">samples</name><operator pos:start="1165:25" pos:end="1165:26">++</operator> <operator pos:start="1165:28" pos:end="1165:28">=</operator> <call pos:start="1165:30" pos:end="1167:38"><name pos:start="1165:30" pos:end="1165:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1165:55" pos:end="1167:38">(<argument pos:start="1165:56" pos:end="1165:68"><expr pos:start="1165:56" pos:end="1165:68"><operator pos:start="1165:56" pos:end="1165:56">&amp;</operator><name pos:start="1165:57" pos:end="1165:68"><name pos:start="1165:57" pos:end="1165:57">c</name><operator pos:start="1165:58" pos:end="1165:59">-&gt;</operator><name pos:start="1165:60" pos:end="1165:65">status</name><index pos:start="1165:66" pos:end="1165:68">[<expr pos:start="1165:67" pos:end="1165:67"><literal type="number" pos:start="1165:67" pos:end="1165:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1167:21" pos:end="1167:31"><expr pos:start="1167:21" pos:end="1167:31"><name pos:start="1167:21" pos:end="1167:26"><name pos:start="1167:21" pos:end="1167:23">src</name><index pos:start="1167:24" pos:end="1167:26">[<expr pos:start="1167:25" pos:end="1167:25"><literal type="number" pos:start="1167:25" pos:end="1167:25">0</literal></expr>]</index></name> <operator pos:start="1167:28" pos:end="1167:29">&gt;&gt;</operator> <literal type="number" pos:start="1167:31" pos:end="1167:31">4</literal></expr></argument>, <argument pos:start="1167:34" pos:end="1167:34"><expr pos:start="1167:34" pos:end="1167:34"><literal type="number" pos:start="1167:34" pos:end="1167:34">4</literal></expr></argument>, <argument pos:start="1167:37" pos:end="1167:37"><expr pos:start="1167:37" pos:end="1167:37"><literal type="number" pos:start="1167:37" pos:end="1167:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1169:17" pos:end="1171:41"><expr pos:start="1169:17" pos:end="1171:40"><operator pos:start="1169:17" pos:end="1169:17">*</operator><name pos:start="1169:18" pos:end="1169:24">samples</name><operator pos:start="1169:25" pos:end="1169:26">++</operator> <operator pos:start="1169:28" pos:end="1169:28">=</operator> <call pos:start="1169:30" pos:end="1171:40"><name pos:start="1169:30" pos:end="1169:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1169:55" pos:end="1171:40">(<argument pos:start="1169:56" pos:end="1169:69"><expr pos:start="1169:56" pos:end="1169:69"><operator pos:start="1169:56" pos:end="1169:56">&amp;</operator><name pos:start="1169:57" pos:end="1169:69"><name pos:start="1169:57" pos:end="1169:57">c</name><operator pos:start="1169:58" pos:end="1169:59">-&gt;</operator><name pos:start="1169:60" pos:end="1169:65">status</name><index pos:start="1169:66" pos:end="1169:69">[<expr pos:start="1169:67" pos:end="1169:68"><name pos:start="1169:67" pos:end="1169:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1171:21" pos:end="1171:33"><expr pos:start="1171:21" pos:end="1171:33"><name pos:start="1171:21" pos:end="1171:26"><name pos:start="1171:21" pos:end="1171:23">src</name><index pos:start="1171:24" pos:end="1171:26">[<expr pos:start="1171:25" pos:end="1171:25"><literal type="number" pos:start="1171:25" pos:end="1171:25">0</literal></expr>]</index></name> <operator pos:start="1171:28" pos:end="1171:28">&amp;</operator> <literal type="number" pos:start="1171:30" pos:end="1171:33">0x0F</literal></expr></argument>, <argument pos:start="1171:36" pos:end="1171:36"><expr pos:start="1171:36" pos:end="1171:36"><literal type="number" pos:start="1171:36" pos:end="1171:36">4</literal></expr></argument>, <argument pos:start="1171:39" pos:end="1171:39"><expr pos:start="1171:39" pos:end="1171:39"><literal type="number" pos:start="1171:39" pos:end="1171:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1173:17" pos:end="1173:22"><expr pos:start="1173:17" pos:end="1173:21"><name pos:start="1173:17" pos:end="1173:19">src</name><operator pos:start="1173:20" pos:end="1173:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <if type="elseif" pos:start="1177:11" pos:end="1197:9">else if <condition pos:start="1177:19" pos:end="1177:62">(<expr pos:start="1177:20" pos:end="1177:61"><name pos:start="1177:20" pos:end="1177:35"><name pos:start="1177:20" pos:end="1177:24">avctx</name><operator pos:start="1177:25" pos:end="1177:26">-&gt;</operator><name pos:start="1177:27" pos:end="1177:31">codec</name><operator pos:start="1177:32" pos:end="1177:33">-&gt;</operator><name pos:start="1177:34" pos:end="1177:35">id</name></name> <operator pos:start="1177:37" pos:end="1177:38">==</operator> <name pos:start="1177:40" pos:end="1177:61">CODEC_ID_ADPCM_SBPRO_3</name></expr>)</condition> <block pos:start="1177:64" pos:end="1197:9">{<block_content pos:start="1179:13" pos:end="1195:13">

            <while pos:start="1179:13" pos:end="1195:13">while <condition pos:start="1179:19" pos:end="1179:69">(<expr pos:start="1179:20" pos:end="1179:68"><name pos:start="1179:20" pos:end="1179:22">src</name> <operator pos:start="1179:24" pos:end="1179:24">&lt;</operator> <name pos:start="1179:26" pos:end="1179:28">buf</name> <operator pos:start="1179:30" pos:end="1179:30">+</operator> <name pos:start="1179:32" pos:end="1179:39">buf_size</name> <operator pos:start="1179:41" pos:end="1179:42">&amp;&amp;</operator> <name pos:start="1179:44" pos:end="1179:50">samples</name> <operator pos:start="1179:52" pos:end="1179:52">+</operator> <literal type="number" pos:start="1179:54" pos:end="1179:54">2</literal> <operator pos:start="1179:56" pos:end="1179:56">&lt;</operator> <name pos:start="1179:58" pos:end="1179:68">samples_end</name></expr>)</condition> <block pos:start="1179:71" pos:end="1195:13">{<block_content pos:start="1181:17" pos:end="1193:22">

                <expr_stmt pos:start="1181:17" pos:end="1183:48"><expr pos:start="1181:17" pos:end="1183:47"><operator pos:start="1181:17" pos:end="1181:17">*</operator><name pos:start="1181:18" pos:end="1181:24">samples</name><operator pos:start="1181:25" pos:end="1181:26">++</operator> <operator pos:start="1181:28" pos:end="1181:28">=</operator> <call pos:start="1181:30" pos:end="1183:47"><name pos:start="1181:30" pos:end="1181:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1181:55" pos:end="1183:47">(<argument pos:start="1181:56" pos:end="1181:68"><expr pos:start="1181:56" pos:end="1181:68"><operator pos:start="1181:56" pos:end="1181:56">&amp;</operator><name pos:start="1181:57" pos:end="1181:68"><name pos:start="1181:57" pos:end="1181:57">c</name><operator pos:start="1181:58" pos:end="1181:59">-&gt;</operator><name pos:start="1181:60" pos:end="1181:65">status</name><index pos:start="1181:66" pos:end="1181:68">[<expr pos:start="1181:67" pos:end="1181:67"><literal type="number" pos:start="1181:67" pos:end="1181:67">0</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="1183:22" pos:end="1183:32"><expr pos:start="1183:22" pos:end="1183:32"><name pos:start="1183:22" pos:end="1183:27"><name pos:start="1183:22" pos:end="1183:24">src</name><index pos:start="1183:25" pos:end="1183:27">[<expr pos:start="1183:26" pos:end="1183:26"><literal type="number" pos:start="1183:26" pos:end="1183:26">0</literal></expr>]</index></name> <operator pos:start="1183:29" pos:end="1183:30">&gt;&gt;</operator> <literal type="number" pos:start="1183:32" pos:end="1183:32">5</literal></expr></argument>        , <argument pos:start="1183:43" pos:end="1183:43"><expr pos:start="1183:43" pos:end="1183:43"><literal type="number" pos:start="1183:43" pos:end="1183:43">3</literal></expr></argument>, <argument pos:start="1183:46" pos:end="1183:46"><expr pos:start="1183:46" pos:end="1183:46"><literal type="number" pos:start="1183:46" pos:end="1183:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1185:17" pos:end="1187:48"><expr pos:start="1185:17" pos:end="1187:47"><operator pos:start="1185:17" pos:end="1185:17">*</operator><name pos:start="1185:18" pos:end="1185:24">samples</name><operator pos:start="1185:25" pos:end="1185:26">++</operator> <operator pos:start="1185:28" pos:end="1185:28">=</operator> <call pos:start="1185:30" pos:end="1187:47"><name pos:start="1185:30" pos:end="1185:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1185:55" pos:end="1187:47">(<argument pos:start="1185:56" pos:end="1185:68"><expr pos:start="1185:56" pos:end="1185:68"><operator pos:start="1185:56" pos:end="1185:56">&amp;</operator><name pos:start="1185:57" pos:end="1185:68"><name pos:start="1185:57" pos:end="1185:57">c</name><operator pos:start="1185:58" pos:end="1185:59">-&gt;</operator><name pos:start="1185:60" pos:end="1185:65">status</name><index pos:start="1185:66" pos:end="1185:68">[<expr pos:start="1185:67" pos:end="1185:67"><literal type="number" pos:start="1185:67" pos:end="1185:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1187:21" pos:end="1187:40"><expr pos:start="1187:21" pos:end="1187:40"><operator pos:start="1187:21" pos:end="1187:21">(</operator><name pos:start="1187:22" pos:end="1187:27"><name pos:start="1187:22" pos:end="1187:24">src</name><index pos:start="1187:25" pos:end="1187:27">[<expr pos:start="1187:26" pos:end="1187:26"><literal type="number" pos:start="1187:26" pos:end="1187:26">0</literal></expr>]</index></name> <operator pos:start="1187:29" pos:end="1187:30">&gt;&gt;</operator> <literal type="number" pos:start="1187:32" pos:end="1187:32">2</literal><operator pos:start="1187:33" pos:end="1187:33">)</operator> <operator pos:start="1187:35" pos:end="1187:35">&amp;</operator> <literal type="number" pos:start="1187:37" pos:end="1187:40">0x07</literal></expr></argument>, <argument pos:start="1187:43" pos:end="1187:43"><expr pos:start="1187:43" pos:end="1187:43"><literal type="number" pos:start="1187:43" pos:end="1187:43">3</literal></expr></argument>, <argument pos:start="1187:46" pos:end="1187:46"><expr pos:start="1187:46" pos:end="1187:46"><literal type="number" pos:start="1187:46" pos:end="1187:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1189:17" pos:end="1191:41"><expr pos:start="1189:17" pos:end="1191:40"><operator pos:start="1189:17" pos:end="1189:17">*</operator><name pos:start="1189:18" pos:end="1189:24">samples</name><operator pos:start="1189:25" pos:end="1189:26">++</operator> <operator pos:start="1189:28" pos:end="1189:28">=</operator> <call pos:start="1189:30" pos:end="1191:40"><name pos:start="1189:30" pos:end="1189:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1189:55" pos:end="1191:40">(<argument pos:start="1189:56" pos:end="1189:68"><expr pos:start="1189:56" pos:end="1189:68"><operator pos:start="1189:56" pos:end="1189:56">&amp;</operator><name pos:start="1189:57" pos:end="1189:68"><name pos:start="1189:57" pos:end="1189:57">c</name><operator pos:start="1189:58" pos:end="1189:59">-&gt;</operator><name pos:start="1189:60" pos:end="1189:65">status</name><index pos:start="1189:66" pos:end="1189:68">[<expr pos:start="1189:67" pos:end="1189:67"><literal type="number" pos:start="1189:67" pos:end="1189:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1191:21" pos:end="1191:33"><expr pos:start="1191:21" pos:end="1191:33"><name pos:start="1191:21" pos:end="1191:26"><name pos:start="1191:21" pos:end="1191:23">src</name><index pos:start="1191:24" pos:end="1191:26">[<expr pos:start="1191:25" pos:end="1191:25"><literal type="number" pos:start="1191:25" pos:end="1191:25">0</literal></expr>]</index></name> <operator pos:start="1191:28" pos:end="1191:28">&amp;</operator> <literal type="number" pos:start="1191:30" pos:end="1191:33">0x03</literal></expr></argument>, <argument pos:start="1191:36" pos:end="1191:36"><expr pos:start="1191:36" pos:end="1191:36"><literal type="number" pos:start="1191:36" pos:end="1191:36">2</literal></expr></argument>, <argument pos:start="1191:39" pos:end="1191:39"><expr pos:start="1191:39" pos:end="1191:39"><literal type="number" pos:start="1191:39" pos:end="1191:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1193:17" pos:end="1193:22"><expr pos:start="1193:17" pos:end="1193:21"><name pos:start="1193:17" pos:end="1193:19">src</name><operator pos:start="1193:20" pos:end="1193:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <else pos:start="1197:11" pos:end="1221:9">else <block pos:start="1197:16" pos:end="1221:9">{<block_content pos:start="1199:13" pos:end="1219:13">

            <while pos:start="1199:13" pos:end="1219:13">while <condition pos:start="1199:19" pos:end="1199:69">(<expr pos:start="1199:20" pos:end="1199:68"><name pos:start="1199:20" pos:end="1199:22">src</name> <operator pos:start="1199:24" pos:end="1199:24">&lt;</operator> <name pos:start="1199:26" pos:end="1199:28">buf</name> <operator pos:start="1199:30" pos:end="1199:30">+</operator> <name pos:start="1199:32" pos:end="1199:39">buf_size</name> <operator pos:start="1199:41" pos:end="1199:42">&amp;&amp;</operator> <name pos:start="1199:44" pos:end="1199:50">samples</name> <operator pos:start="1199:52" pos:end="1199:52">+</operator> <literal type="number" pos:start="1199:54" pos:end="1199:54">3</literal> <operator pos:start="1199:56" pos:end="1199:56">&lt;</operator> <name pos:start="1199:58" pos:end="1199:68">samples_end</name></expr>)</condition> <block pos:start="1199:71" pos:end="1219:13">{<block_content pos:start="1201:17" pos:end="1217:22">

                <expr_stmt pos:start="1201:17" pos:end="1203:48"><expr pos:start="1201:17" pos:end="1203:47"><operator pos:start="1201:17" pos:end="1201:17">*</operator><name pos:start="1201:18" pos:end="1201:24">samples</name><operator pos:start="1201:25" pos:end="1201:26">++</operator> <operator pos:start="1201:28" pos:end="1201:28">=</operator> <call pos:start="1201:30" pos:end="1203:47"><name pos:start="1201:30" pos:end="1201:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1201:55" pos:end="1203:47">(<argument pos:start="1201:56" pos:end="1201:68"><expr pos:start="1201:56" pos:end="1201:68"><operator pos:start="1201:56" pos:end="1201:56">&amp;</operator><name pos:start="1201:57" pos:end="1201:68"><name pos:start="1201:57" pos:end="1201:57">c</name><operator pos:start="1201:58" pos:end="1201:59">-&gt;</operator><name pos:start="1201:60" pos:end="1201:65">status</name><index pos:start="1201:66" pos:end="1201:68">[<expr pos:start="1201:67" pos:end="1201:67"><literal type="number" pos:start="1201:67" pos:end="1201:67">0</literal></expr>]</index></name></expr></argument>,

                     <argument pos:start="1203:22" pos:end="1203:32"><expr pos:start="1203:22" pos:end="1203:32"><name pos:start="1203:22" pos:end="1203:27"><name pos:start="1203:22" pos:end="1203:24">src</name><index pos:start="1203:25" pos:end="1203:27">[<expr pos:start="1203:26" pos:end="1203:26"><literal type="number" pos:start="1203:26" pos:end="1203:26">0</literal></expr>]</index></name> <operator pos:start="1203:29" pos:end="1203:30">&gt;&gt;</operator> <literal type="number" pos:start="1203:32" pos:end="1203:32">6</literal></expr></argument>        , <argument pos:start="1203:43" pos:end="1203:43"><expr pos:start="1203:43" pos:end="1203:43"><literal type="number" pos:start="1203:43" pos:end="1203:43">2</literal></expr></argument>, <argument pos:start="1203:46" pos:end="1203:46"><expr pos:start="1203:46" pos:end="1203:46"><literal type="number" pos:start="1203:46" pos:end="1203:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1205:17" pos:end="1207:48"><expr pos:start="1205:17" pos:end="1207:47"><operator pos:start="1205:17" pos:end="1205:17">*</operator><name pos:start="1205:18" pos:end="1205:24">samples</name><operator pos:start="1205:25" pos:end="1205:26">++</operator> <operator pos:start="1205:28" pos:end="1205:28">=</operator> <call pos:start="1205:30" pos:end="1207:47"><name pos:start="1205:30" pos:end="1205:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1205:55" pos:end="1207:47">(<argument pos:start="1205:56" pos:end="1205:69"><expr pos:start="1205:56" pos:end="1205:69"><operator pos:start="1205:56" pos:end="1205:56">&amp;</operator><name pos:start="1205:57" pos:end="1205:69"><name pos:start="1205:57" pos:end="1205:57">c</name><operator pos:start="1205:58" pos:end="1205:59">-&gt;</operator><name pos:start="1205:60" pos:end="1205:65">status</name><index pos:start="1205:66" pos:end="1205:69">[<expr pos:start="1205:67" pos:end="1205:68"><name pos:start="1205:67" pos:end="1205:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1207:21" pos:end="1207:40"><expr pos:start="1207:21" pos:end="1207:40"><operator pos:start="1207:21" pos:end="1207:21">(</operator><name pos:start="1207:22" pos:end="1207:27"><name pos:start="1207:22" pos:end="1207:24">src</name><index pos:start="1207:25" pos:end="1207:27">[<expr pos:start="1207:26" pos:end="1207:26"><literal type="number" pos:start="1207:26" pos:end="1207:26">0</literal></expr>]</index></name> <operator pos:start="1207:29" pos:end="1207:30">&gt;&gt;</operator> <literal type="number" pos:start="1207:32" pos:end="1207:32">4</literal><operator pos:start="1207:33" pos:end="1207:33">)</operator> <operator pos:start="1207:35" pos:end="1207:35">&amp;</operator> <literal type="number" pos:start="1207:37" pos:end="1207:40">0x03</literal></expr></argument>, <argument pos:start="1207:43" pos:end="1207:43"><expr pos:start="1207:43" pos:end="1207:43"><literal type="number" pos:start="1207:43" pos:end="1207:43">2</literal></expr></argument>, <argument pos:start="1207:46" pos:end="1207:46"><expr pos:start="1207:46" pos:end="1207:46"><literal type="number" pos:start="1207:46" pos:end="1207:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1209:17" pos:end="1211:48"><expr pos:start="1209:17" pos:end="1211:47"><operator pos:start="1209:17" pos:end="1209:17">*</operator><name pos:start="1209:18" pos:end="1209:24">samples</name><operator pos:start="1209:25" pos:end="1209:26">++</operator> <operator pos:start="1209:28" pos:end="1209:28">=</operator> <call pos:start="1209:30" pos:end="1211:47"><name pos:start="1209:30" pos:end="1209:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1209:55" pos:end="1211:47">(<argument pos:start="1209:56" pos:end="1209:68"><expr pos:start="1209:56" pos:end="1209:68"><operator pos:start="1209:56" pos:end="1209:56">&amp;</operator><name pos:start="1209:57" pos:end="1209:68"><name pos:start="1209:57" pos:end="1209:57">c</name><operator pos:start="1209:58" pos:end="1209:59">-&gt;</operator><name pos:start="1209:60" pos:end="1209:65">status</name><index pos:start="1209:66" pos:end="1209:68">[<expr pos:start="1209:67" pos:end="1209:67"><literal type="number" pos:start="1209:67" pos:end="1209:67">0</literal></expr>]</index></name></expr></argument>,

                    <argument pos:start="1211:21" pos:end="1211:40"><expr pos:start="1211:21" pos:end="1211:40"><operator pos:start="1211:21" pos:end="1211:21">(</operator><name pos:start="1211:22" pos:end="1211:27"><name pos:start="1211:22" pos:end="1211:24">src</name><index pos:start="1211:25" pos:end="1211:27">[<expr pos:start="1211:26" pos:end="1211:26"><literal type="number" pos:start="1211:26" pos:end="1211:26">0</literal></expr>]</index></name> <operator pos:start="1211:29" pos:end="1211:30">&gt;&gt;</operator> <literal type="number" pos:start="1211:32" pos:end="1211:32">2</literal><operator pos:start="1211:33" pos:end="1211:33">)</operator> <operator pos:start="1211:35" pos:end="1211:35">&amp;</operator> <literal type="number" pos:start="1211:37" pos:end="1211:40">0x03</literal></expr></argument>, <argument pos:start="1211:43" pos:end="1211:43"><expr pos:start="1211:43" pos:end="1211:43"><literal type="number" pos:start="1211:43" pos:end="1211:43">2</literal></expr></argument>, <argument pos:start="1211:46" pos:end="1211:46"><expr pos:start="1211:46" pos:end="1211:46"><literal type="number" pos:start="1211:46" pos:end="1211:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1213:17" pos:end="1215:41"><expr pos:start="1213:17" pos:end="1215:40"><operator pos:start="1213:17" pos:end="1213:17">*</operator><name pos:start="1213:18" pos:end="1213:24">samples</name><operator pos:start="1213:25" pos:end="1213:26">++</operator> <operator pos:start="1213:28" pos:end="1213:28">=</operator> <call pos:start="1213:30" pos:end="1215:40"><name pos:start="1213:30" pos:end="1213:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1213:55" pos:end="1215:40">(<argument pos:start="1213:56" pos:end="1213:69"><expr pos:start="1213:56" pos:end="1213:69"><operator pos:start="1213:56" pos:end="1213:56">&amp;</operator><name pos:start="1213:57" pos:end="1213:69"><name pos:start="1213:57" pos:end="1213:57">c</name><operator pos:start="1213:58" pos:end="1213:59">-&gt;</operator><name pos:start="1213:60" pos:end="1213:65">status</name><index pos:start="1213:66" pos:end="1213:69">[<expr pos:start="1213:67" pos:end="1213:68"><name pos:start="1213:67" pos:end="1213:68">st</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="1215:21" pos:end="1215:33"><expr pos:start="1215:21" pos:end="1215:33"><name pos:start="1215:21" pos:end="1215:26"><name pos:start="1215:21" pos:end="1215:23">src</name><index pos:start="1215:24" pos:end="1215:26">[<expr pos:start="1215:25" pos:end="1215:25"><literal type="number" pos:start="1215:25" pos:end="1215:25">0</literal></expr>]</index></name> <operator pos:start="1215:28" pos:end="1215:28">&amp;</operator> <literal type="number" pos:start="1215:30" pos:end="1215:33">0x03</literal></expr></argument>, <argument pos:start="1215:36" pos:end="1215:36"><expr pos:start="1215:36" pos:end="1215:36"><literal type="number" pos:start="1215:36" pos:end="1215:36">2</literal></expr></argument>, <argument pos:start="1215:39" pos:end="1215:39"><expr pos:start="1215:39" pos:end="1215:39"><literal type="number" pos:start="1215:39" pos:end="1215:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1217:17" pos:end="1217:22"><expr pos:start="1217:17" pos:end="1217:21"><name pos:start="1217:17" pos:end="1217:19">src</name><operator pos:start="1217:20" pos:end="1217:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1223:9" pos:end="1223:14">break;</break>

    <case pos:start="1225:5" pos:end="1225:28">case <expr pos:start="1225:10" pos:end="1225:27"><name pos:start="1225:10" pos:end="1225:27">CODEC_ID_ADPCM_SWF</name></expr>:</case>

    <block pos:start="1227:5" pos:end="1345:5">{<block_content pos:start="1229:9" pos:end="1343:14">

        <decl_stmt pos:start="1229:9" pos:end="1229:25"><decl pos:start="1229:9" pos:end="1229:24"><type pos:start="1229:9" pos:end="1229:21"><name pos:start="1229:9" pos:end="1229:21">GetBitContext</name></type> <name pos:start="1229:23" pos:end="1229:24">gb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1231:9" pos:end="1231:25"><decl pos:start="1231:9" pos:end="1231:24"><type pos:start="1231:9" pos:end="1231:19"><specifier pos:start="1231:9" pos:end="1231:13">const</specifier> <name pos:start="1231:15" pos:end="1231:17">int</name> <modifier pos:start="1231:19" pos:end="1231:19">*</modifier></type><name pos:start="1231:20" pos:end="1231:24">table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1233:9" pos:end="1233:41"><decl pos:start="1233:9" pos:end="1233:14"><type pos:start="1233:9" pos:end="1233:11"><name pos:start="1233:9" pos:end="1233:11">int</name></type> <name pos:start="1233:13" pos:end="1233:14">k0</name></decl>, <decl pos:start="1233:17" pos:end="1233:24"><type ref="prev" pos:start="1233:9" pos:end="1233:11"/><name pos:start="1233:17" pos:end="1233:24">signmask</name></decl>, <decl pos:start="1233:27" pos:end="1233:33"><type ref="prev" pos:start="1233:9" pos:end="1233:11"/><name pos:start="1233:27" pos:end="1233:33">nb_bits</name></decl>, <decl pos:start="1233:36" pos:end="1233:40"><type ref="prev" pos:start="1233:9" pos:end="1233:11"/><name pos:start="1233:36" pos:end="1233:40">count</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1235:9" pos:end="1235:30"><decl pos:start="1235:9" pos:end="1235:29"><type pos:start="1235:9" pos:end="1235:11"><name pos:start="1235:9" pos:end="1235:11">int</name></type> <name pos:start="1235:13" pos:end="1235:16">size</name> <init pos:start="1235:18" pos:end="1235:29">= <expr pos:start="1235:20" pos:end="1235:29"><name pos:start="1235:20" pos:end="1235:27">buf_size</name><operator pos:start="1235:28" pos:end="1235:28">*</operator><literal type="number" pos:start="1235:29" pos:end="1235:29">8</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="1239:9" pos:end="1239:38"><expr pos:start="1239:9" pos:end="1239:37"><call pos:start="1239:9" pos:end="1239:37"><name pos:start="1239:9" pos:end="1239:21">init_get_bits</name><argument_list pos:start="1239:22" pos:end="1239:37">(<argument pos:start="1239:23" pos:end="1239:25"><expr pos:start="1239:23" pos:end="1239:25"><operator pos:start="1239:23" pos:end="1239:23">&amp;</operator><name pos:start="1239:24" pos:end="1239:25">gb</name></expr></argument>, <argument pos:start="1239:28" pos:end="1239:30"><expr pos:start="1239:28" pos:end="1239:30"><name pos:start="1239:28" pos:end="1239:30">buf</name></expr></argument>, <argument pos:start="1239:33" pos:end="1239:36"><expr pos:start="1239:33" pos:end="1239:36"><name pos:start="1239:33" pos:end="1239:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="1243:9" pos:end="1243:36">//read bits &amp; initial values</comment>

        <expr_stmt pos:start="1245:9" pos:end="1245:37"><expr pos:start="1245:9" pos:end="1245:36"><name pos:start="1245:9" pos:end="1245:15">nb_bits</name> <operator pos:start="1245:17" pos:end="1245:17">=</operator> <call pos:start="1245:19" pos:end="1245:34"><name pos:start="1245:19" pos:end="1245:26">get_bits</name><argument_list pos:start="1245:27" pos:end="1245:34">(<argument pos:start="1245:28" pos:end="1245:30"><expr pos:start="1245:28" pos:end="1245:30"><operator pos:start="1245:28" pos:end="1245:28">&amp;</operator><name pos:start="1245:29" pos:end="1245:30">gb</name></expr></argument>, <argument pos:start="1245:33" pos:end="1245:33"><expr pos:start="1245:33" pos:end="1245:33"><literal type="number" pos:start="1245:33" pos:end="1245:33">2</literal></expr></argument>)</argument_list></call><operator pos:start="1245:35" pos:end="1245:35">+</operator><literal type="number" pos:start="1245:36" pos:end="1245:36">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="1247:9" pos:end="1247:60">//av_log(NULL,AV_LOG_INFO,"nb_bits: %d\n", nb_bits);</comment>

        <expr_stmt pos:start="1249:9" pos:end="1249:44"><expr pos:start="1249:9" pos:end="1249:43"><name pos:start="1249:9" pos:end="1249:13">table</name> <operator pos:start="1249:15" pos:end="1249:15">=</operator> <name pos:start="1249:17" pos:end="1249:43"><name pos:start="1249:17" pos:end="1249:32">swf_index_tables</name><index pos:start="1249:33" pos:end="1249:43">[<expr pos:start="1249:34" pos:end="1249:42"><name pos:start="1249:34" pos:end="1249:40">nb_bits</name><operator pos:start="1249:41" pos:end="1249:41">-</operator><literal type="number" pos:start="1249:42" pos:end="1249:42">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1251:9" pos:end="1251:30"><expr pos:start="1251:9" pos:end="1251:29"><name pos:start="1251:9" pos:end="1251:10">k0</name> <operator pos:start="1251:12" pos:end="1251:12">=</operator> <literal type="number" pos:start="1251:14" pos:end="1251:14">1</literal> <operator pos:start="1251:16" pos:end="1251:17">&lt;&lt;</operator> <operator pos:start="1251:19" pos:end="1251:19">(</operator><name pos:start="1251:20" pos:end="1251:26">nb_bits</name><operator pos:start="1251:27" pos:end="1251:27">-</operator><literal type="number" pos:start="1251:28" pos:end="1251:28">2</literal><operator pos:start="1251:29" pos:end="1251:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1253:9" pos:end="1253:36"><expr pos:start="1253:9" pos:end="1253:35"><name pos:start="1253:9" pos:end="1253:16">signmask</name> <operator pos:start="1253:18" pos:end="1253:18">=</operator> <literal type="number" pos:start="1253:20" pos:end="1253:20">1</literal> <operator pos:start="1253:22" pos:end="1253:23">&lt;&lt;</operator> <operator pos:start="1253:25" pos:end="1253:25">(</operator><name pos:start="1253:26" pos:end="1253:32">nb_bits</name><operator pos:start="1253:33" pos:end="1253:33">-</operator><literal type="number" pos:start="1253:34" pos:end="1253:34">1</literal><operator pos:start="1253:35" pos:end="1253:35">)</operator></expr>;</expr_stmt>



        <while pos:start="1257:9" pos:end="1339:9">while <condition pos:start="1257:15" pos:end="1257:64">(<expr pos:start="1257:16" pos:end="1257:63"><call pos:start="1257:16" pos:end="1257:34"><name pos:start="1257:16" pos:end="1257:29">get_bits_count</name><argument_list pos:start="1257:30" pos:end="1257:34">(<argument pos:start="1257:31" pos:end="1257:33"><expr pos:start="1257:31" pos:end="1257:33"><operator pos:start="1257:31" pos:end="1257:31">&amp;</operator><name pos:start="1257:32" pos:end="1257:33">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1257:36" pos:end="1257:37">&lt;=</operator> <name pos:start="1257:39" pos:end="1257:42">size</name> <operator pos:start="1257:44" pos:end="1257:44">-</operator> <literal type="number" pos:start="1257:46" pos:end="1257:47">22</literal><operator pos:start="1257:48" pos:end="1257:48">*</operator><name pos:start="1257:49" pos:end="1257:63"><name pos:start="1257:49" pos:end="1257:53">avctx</name><operator pos:start="1257:54" pos:end="1257:55">-&gt;</operator><name pos:start="1257:56" pos:end="1257:63">channels</name></name></expr>)</condition> <block pos:start="1257:66" pos:end="1339:9">{<block_content pos:start="1259:13" pos:end="1337:13">

            <for pos:start="1259:13" pos:end="1265:13">for <control pos:start="1259:17" pos:end="1259:49">(<init pos:start="1259:18" pos:end="1259:23"><expr pos:start="1259:18" pos:end="1259:22"><name pos:start="1259:18" pos:end="1259:18">i</name> <operator pos:start="1259:20" pos:end="1259:20">=</operator> <literal type="number" pos:start="1259:22" pos:end="1259:22">0</literal></expr>;</init> <condition pos:start="1259:25" pos:end="1259:44"><expr pos:start="1259:25" pos:end="1259:43"><name pos:start="1259:25" pos:end="1259:25">i</name> <operator pos:start="1259:27" pos:end="1259:27">&lt;</operator> <name pos:start="1259:29" pos:end="1259:43"><name pos:start="1259:29" pos:end="1259:33">avctx</name><operator pos:start="1259:34" pos:end="1259:35">-&gt;</operator><name pos:start="1259:36" pos:end="1259:43">channels</name></name></expr>;</condition> <incr pos:start="1259:46" pos:end="1259:48"><expr pos:start="1259:46" pos:end="1259:48"><name pos:start="1259:46" pos:end="1259:46">i</name><operator pos:start="1259:47" pos:end="1259:48">++</operator></expr></incr>)</control> <block pos:start="1259:51" pos:end="1265:13">{<block_content pos:start="1261:17" pos:end="1263:59">

                <expr_stmt pos:start="1261:17" pos:end="1261:73"><expr pos:start="1261:17" pos:end="1261:72"><operator pos:start="1261:17" pos:end="1261:17">*</operator><name pos:start="1261:18" pos:end="1261:24">samples</name><operator pos:start="1261:25" pos:end="1261:26">++</operator> <operator pos:start="1261:28" pos:end="1261:28">=</operator> <name pos:start="1261:30" pos:end="1261:41"><name pos:start="1261:30" pos:end="1261:30">c</name><operator pos:start="1261:31" pos:end="1261:32">-&gt;</operator><name pos:start="1261:33" pos:end="1261:38">status</name><index pos:start="1261:39" pos:end="1261:41">[<expr pos:start="1261:40" pos:end="1261:40"><name pos:start="1261:40" pos:end="1261:40">i</name></expr>]</index></name><operator pos:start="1261:42" pos:end="1261:42">.</operator><name pos:start="1261:43" pos:end="1261:51">predictor</name> <operator pos:start="1261:53" pos:end="1261:53">=</operator> <call pos:start="1261:55" pos:end="1261:72"><name pos:start="1261:55" pos:end="1261:63">get_sbits</name><argument_list pos:start="1261:64" pos:end="1261:72">(<argument pos:start="1261:65" pos:end="1261:67"><expr pos:start="1261:65" pos:end="1261:67"><operator pos:start="1261:65" pos:end="1261:65">&amp;</operator><name pos:start="1261:66" pos:end="1261:67">gb</name></expr></argument>, <argument pos:start="1261:70" pos:end="1261:71"><expr pos:start="1261:70" pos:end="1261:71"><literal type="number" pos:start="1261:70" pos:end="1261:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1263:17" pos:end="1263:59"><expr pos:start="1263:17" pos:end="1263:58"><name pos:start="1263:17" pos:end="1263:28"><name pos:start="1263:17" pos:end="1263:17">c</name><operator pos:start="1263:18" pos:end="1263:19">-&gt;</operator><name pos:start="1263:20" pos:end="1263:25">status</name><index pos:start="1263:26" pos:end="1263:28">[<expr pos:start="1263:27" pos:end="1263:27"><name pos:start="1263:27" pos:end="1263:27">i</name></expr>]</index></name><operator pos:start="1263:29" pos:end="1263:29">.</operator><name pos:start="1263:30" pos:end="1263:39">step_index</name> <operator pos:start="1263:41" pos:end="1263:41">=</operator> <call pos:start="1263:43" pos:end="1263:58"><name pos:start="1263:43" pos:end="1263:50">get_bits</name><argument_list pos:start="1263:51" pos:end="1263:58">(<argument pos:start="1263:52" pos:end="1263:54"><expr pos:start="1263:52" pos:end="1263:54"><operator pos:start="1263:52" pos:end="1263:52">&amp;</operator><name pos:start="1263:53" pos:end="1263:54">gb</name></expr></argument>, <argument pos:start="1263:57" pos:end="1263:57"><expr pos:start="1263:57" pos:end="1263:57"><literal type="number" pos:start="1263:57" pos:end="1263:57">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <for pos:start="1269:13" pos:end="1337:13">for <control pos:start="1269:17" pos:end="1269:107">(<init pos:start="1269:18" pos:end="1269:27"><expr pos:start="1269:18" pos:end="1269:26"><name pos:start="1269:18" pos:end="1269:22">count</name> <operator pos:start="1269:24" pos:end="1269:24">=</operator> <literal type="number" pos:start="1269:26" pos:end="1269:26">0</literal></expr>;</init> <condition pos:start="1269:29" pos:end="1269:98"><expr pos:start="1269:29" pos:end="1269:97"><call pos:start="1269:29" pos:end="1269:47"><name pos:start="1269:29" pos:end="1269:42">get_bits_count</name><argument_list pos:start="1269:43" pos:end="1269:47">(<argument pos:start="1269:44" pos:end="1269:46"><expr pos:start="1269:44" pos:end="1269:46"><operator pos:start="1269:44" pos:end="1269:44">&amp;</operator><name pos:start="1269:45" pos:end="1269:46">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1269:49" pos:end="1269:50">&lt;=</operator> <name pos:start="1269:52" pos:end="1269:55">size</name> <operator pos:start="1269:57" pos:end="1269:57">-</operator> <name pos:start="1269:59" pos:end="1269:65">nb_bits</name><operator pos:start="1269:66" pos:end="1269:66">*</operator><name pos:start="1269:67" pos:end="1269:81"><name pos:start="1269:67" pos:end="1269:71">avctx</name><operator pos:start="1269:72" pos:end="1269:73">-&gt;</operator><name pos:start="1269:74" pos:end="1269:81">channels</name></name> <operator pos:start="1269:83" pos:end="1269:84">&amp;&amp;</operator> <name pos:start="1269:86" pos:end="1269:90">count</name> <operator pos:start="1269:92" pos:end="1269:92">&lt;</operator> <literal type="number" pos:start="1269:94" pos:end="1269:97">4095</literal></expr>;</condition> <incr pos:start="1269:100" pos:end="1269:106"><expr pos:start="1269:100" pos:end="1269:106"><name pos:start="1269:100" pos:end="1269:104">count</name><operator pos:start="1269:105" pos:end="1269:106">++</operator></expr></incr>)</control> <block pos:start="1269:109" pos:end="1337:13">{<block_content pos:start="1271:17" pos:end="1335:17">

                <decl_stmt pos:start="1271:17" pos:end="1271:22"><decl pos:start="1271:17" pos:end="1271:21"><type pos:start="1271:17" pos:end="1271:19"><name pos:start="1271:17" pos:end="1271:19">int</name></type> <name pos:start="1271:21" pos:end="1271:21">i</name></decl>;</decl_stmt>



                <for pos:start="1275:17" pos:end="1335:17">for <control pos:start="1275:21" pos:end="1275:53">(<init pos:start="1275:22" pos:end="1275:27"><expr pos:start="1275:22" pos:end="1275:26"><name pos:start="1275:22" pos:end="1275:22">i</name> <operator pos:start="1275:24" pos:end="1275:24">=</operator> <literal type="number" pos:start="1275:26" pos:end="1275:26">0</literal></expr>;</init> <condition pos:start="1275:29" pos:end="1275:48"><expr pos:start="1275:29" pos:end="1275:47"><name pos:start="1275:29" pos:end="1275:29">i</name> <operator pos:start="1275:31" pos:end="1275:31">&lt;</operator> <name pos:start="1275:33" pos:end="1275:47"><name pos:start="1275:33" pos:end="1275:37">avctx</name><operator pos:start="1275:38" pos:end="1275:39">-&gt;</operator><name pos:start="1275:40" pos:end="1275:47">channels</name></name></expr>;</condition> <incr pos:start="1275:50" pos:end="1275:52"><expr pos:start="1275:50" pos:end="1275:52"><name pos:start="1275:50" pos:end="1275:50">i</name><operator pos:start="1275:51" pos:end="1275:52">++</operator></expr></incr>)</control> <block pos:start="1275:55" pos:end="1335:17">{<block_content pos:start="1279:21" pos:end="1333:21">

                    <comment type="line" pos:start="1277:21" pos:end="1277:43">// similar to IMA adpcm</comment>

                    <decl_stmt pos:start="1279:21" pos:end="1279:55"><decl pos:start="1279:21" pos:end="1279:54"><type pos:start="1279:21" pos:end="1279:23"><name pos:start="1279:21" pos:end="1279:23">int</name></type> <name pos:start="1279:25" pos:end="1279:29">delta</name> <init pos:start="1279:31" pos:end="1279:54">= <expr pos:start="1279:33" pos:end="1279:54"><call pos:start="1279:33" pos:end="1279:54"><name pos:start="1279:33" pos:end="1279:40">get_bits</name><argument_list pos:start="1279:41" pos:end="1279:54">(<argument pos:start="1279:42" pos:end="1279:44"><expr pos:start="1279:42" pos:end="1279:44"><operator pos:start="1279:42" pos:end="1279:42">&amp;</operator><name pos:start="1279:43" pos:end="1279:44">gb</name></expr></argument>, <argument pos:start="1279:47" pos:end="1279:53"><expr pos:start="1279:47" pos:end="1279:53"><name pos:start="1279:47" pos:end="1279:53">nb_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1281:21" pos:end="1281:76"><decl pos:start="1281:21" pos:end="1281:75"><type pos:start="1281:21" pos:end="1281:23"><name pos:start="1281:21" pos:end="1281:23">int</name></type> <name pos:start="1281:25" pos:end="1281:28">step</name> <init pos:start="1281:30" pos:end="1281:75">= <expr pos:start="1281:32" pos:end="1281:75"><name pos:start="1281:32" pos:end="1281:75"><name pos:start="1281:32" pos:end="1281:50">ff_adpcm_step_table</name><index pos:start="1281:51" pos:end="1281:75">[<expr pos:start="1281:52" pos:end="1281:74"><name pos:start="1281:52" pos:end="1281:63"><name pos:start="1281:52" pos:end="1281:52">c</name><operator pos:start="1281:53" pos:end="1281:54">-&gt;</operator><name pos:start="1281:55" pos:end="1281:60">status</name><index pos:start="1281:61" pos:end="1281:63">[<expr pos:start="1281:62" pos:end="1281:62"><name pos:start="1281:62" pos:end="1281:62">i</name></expr>]</index></name><operator pos:start="1281:64" pos:end="1281:64">.</operator><name pos:start="1281:65" pos:end="1281:74">step_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1283:21" pos:end="1283:36"><decl pos:start="1283:21" pos:end="1283:35"><type pos:start="1283:21" pos:end="1283:24"><name pos:start="1283:21" pos:end="1283:24">long</name></type> <name pos:start="1283:26" pos:end="1283:31">vpdiff</name> <init pos:start="1283:33" pos:end="1283:35">= <expr pos:start="1283:35" pos:end="1283:35"><literal type="number" pos:start="1283:35" pos:end="1283:35">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="1283:38" pos:end="1283:67">// vpdiff = (delta+0.5)*step/4</comment>

                    <decl_stmt pos:start="1285:21" pos:end="1285:31"><decl pos:start="1285:21" pos:end="1285:30"><type pos:start="1285:21" pos:end="1285:23"><name pos:start="1285:21" pos:end="1285:23">int</name></type> <name pos:start="1285:25" pos:end="1285:25">k</name> <init pos:start="1285:27" pos:end="1285:30">= <expr pos:start="1285:29" pos:end="1285:30"><name pos:start="1285:29" pos:end="1285:30">k0</name></expr></init></decl>;</decl_stmt>



                    <do pos:start="1289:21" pos:end="1299:31">do <block pos:start="1289:24" pos:end="1299:21">{<block_content pos:start="1291:25" pos:end="1297:32">

                        <if_stmt pos:start="1291:25" pos:end="1293:43"><if pos:start="1291:25" pos:end="1293:43">if <condition pos:start="1291:28" pos:end="1291:38">(<expr pos:start="1291:29" pos:end="1291:37"><name pos:start="1291:29" pos:end="1291:33">delta</name> <operator pos:start="1291:35" pos:end="1291:35">&amp;</operator> <name pos:start="1291:37" pos:end="1291:37">k</name></expr>)</condition><block type="pseudo" pos:start="1293:29" pos:end="1293:43"><block_content pos:start="1293:29" pos:end="1293:43">

                            <expr_stmt pos:start="1293:29" pos:end="1293:43"><expr pos:start="1293:29" pos:end="1293:42"><name pos:start="1293:29" pos:end="1293:34">vpdiff</name> <operator pos:start="1293:36" pos:end="1293:37">+=</operator> <name pos:start="1293:39" pos:end="1293:42">step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1295:25" pos:end="1295:35"><expr pos:start="1295:25" pos:end="1295:34"><name pos:start="1295:25" pos:end="1295:28">step</name> <operator pos:start="1295:30" pos:end="1295:32">&gt;&gt;=</operator> <literal type="number" pos:start="1295:34" pos:end="1295:34">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="1297:25" pos:end="1297:32"><expr pos:start="1297:25" pos:end="1297:31"><name pos:start="1297:25" pos:end="1297:25">k</name> <operator pos:start="1297:27" pos:end="1297:29">&gt;&gt;=</operator> <literal type="number" pos:start="1297:31" pos:end="1297:31">1</literal></expr>;</expr_stmt>

                    </block_content>}</block> while<condition pos:start="1299:28" pos:end="1299:30">(<expr pos:start="1299:29" pos:end="1299:29"><name pos:start="1299:29" pos:end="1299:29">k</name></expr>)</condition>;</do>

                    <expr_stmt pos:start="1301:21" pos:end="1301:35"><expr pos:start="1301:21" pos:end="1301:34"><name pos:start="1301:21" pos:end="1301:26">vpdiff</name> <operator pos:start="1301:28" pos:end="1301:29">+=</operator> <name pos:start="1301:31" pos:end="1301:34">step</name></expr>;</expr_stmt>



                    <if_stmt pos:start="1305:21" pos:end="1311:57"><if pos:start="1305:21" pos:end="1307:57">if <condition pos:start="1305:24" pos:end="1305:41">(<expr pos:start="1305:25" pos:end="1305:40"><name pos:start="1305:25" pos:end="1305:29">delta</name> <operator pos:start="1305:31" pos:end="1305:31">&amp;</operator> <name pos:start="1305:33" pos:end="1305:40">signmask</name></expr>)</condition><block type="pseudo" pos:start="1307:25" pos:end="1307:57"><block_content pos:start="1307:25" pos:end="1307:57">

                        <expr_stmt pos:start="1307:25" pos:end="1307:57"><expr pos:start="1307:25" pos:end="1307:56"><name pos:start="1307:25" pos:end="1307:36"><name pos:start="1307:25" pos:end="1307:25">c</name><operator pos:start="1307:26" pos:end="1307:27">-&gt;</operator><name pos:start="1307:28" pos:end="1307:33">status</name><index pos:start="1307:34" pos:end="1307:36">[<expr pos:start="1307:35" pos:end="1307:35"><name pos:start="1307:35" pos:end="1307:35">i</name></expr>]</index></name><operator pos:start="1307:37" pos:end="1307:37">.</operator><name pos:start="1307:38" pos:end="1307:46">predictor</name> <operator pos:start="1307:48" pos:end="1307:49">-=</operator> <name pos:start="1307:51" pos:end="1307:56">vpdiff</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1309:21" pos:end="1311:57">else<block type="pseudo" pos:start="1311:25" pos:end="1311:57"><block_content pos:start="1311:25" pos:end="1311:57">

                        <expr_stmt pos:start="1311:25" pos:end="1311:57"><expr pos:start="1311:25" pos:end="1311:56"><name pos:start="1311:25" pos:end="1311:36"><name pos:start="1311:25" pos:end="1311:25">c</name><operator pos:start="1311:26" pos:end="1311:27">-&gt;</operator><name pos:start="1311:28" pos:end="1311:33">status</name><index pos:start="1311:34" pos:end="1311:36">[<expr pos:start="1311:35" pos:end="1311:35"><name pos:start="1311:35" pos:end="1311:35">i</name></expr>]</index></name><operator pos:start="1311:37" pos:end="1311:37">.</operator><name pos:start="1311:38" pos:end="1311:46">predictor</name> <operator pos:start="1311:48" pos:end="1311:49">+=</operator> <name pos:start="1311:51" pos:end="1311:56">vpdiff</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="1315:21" pos:end="1315:74"><expr pos:start="1315:21" pos:end="1315:73"><name pos:start="1315:21" pos:end="1315:32"><name pos:start="1315:21" pos:end="1315:21">c</name><operator pos:start="1315:22" pos:end="1315:23">-&gt;</operator><name pos:start="1315:24" pos:end="1315:29">status</name><index pos:start="1315:30" pos:end="1315:32">[<expr pos:start="1315:31" pos:end="1315:31"><name pos:start="1315:31" pos:end="1315:31">i</name></expr>]</index></name><operator pos:start="1315:33" pos:end="1315:33">.</operator><name pos:start="1315:34" pos:end="1315:43">step_index</name> <operator pos:start="1315:45" pos:end="1315:46">+=</operator> <name pos:start="1315:48" pos:end="1315:73"><name pos:start="1315:48" pos:end="1315:52">table</name><index pos:start="1315:53" pos:end="1315:73">[<expr pos:start="1315:54" pos:end="1315:72"><name pos:start="1315:54" pos:end="1315:58">delta</name> <operator pos:start="1315:60" pos:end="1315:60">&amp;</operator> <operator pos:start="1315:62" pos:end="1315:62">(</operator><operator pos:start="1315:63" pos:end="1315:63">~</operator><name pos:start="1315:64" pos:end="1315:71">signmask</name><operator pos:start="1315:72" pos:end="1315:72">)</operator></expr>]</index></name></expr>;</expr_stmt>



                    <expr_stmt pos:start="1319:21" pos:end="1319:86"><expr pos:start="1319:21" pos:end="1319:85"><name pos:start="1319:21" pos:end="1319:32"><name pos:start="1319:21" pos:end="1319:21">c</name><operator pos:start="1319:22" pos:end="1319:23">-&gt;</operator><name pos:start="1319:24" pos:end="1319:29">status</name><index pos:start="1319:30" pos:end="1319:32">[<expr pos:start="1319:31" pos:end="1319:31"><name pos:start="1319:31" pos:end="1319:31">i</name></expr>]</index></name><operator pos:start="1319:33" pos:end="1319:33">.</operator><name pos:start="1319:34" pos:end="1319:43">step_index</name> <operator pos:start="1319:45" pos:end="1319:45">=</operator> <call pos:start="1319:47" pos:end="1319:85"><name pos:start="1319:47" pos:end="1319:53">av_clip</name><argument_list pos:start="1319:54" pos:end="1319:85">(<argument pos:start="1319:55" pos:end="1319:77"><expr pos:start="1319:55" pos:end="1319:77"><name pos:start="1319:55" pos:end="1319:66"><name pos:start="1319:55" pos:end="1319:55">c</name><operator pos:start="1319:56" pos:end="1319:57">-&gt;</operator><name pos:start="1319:58" pos:end="1319:63">status</name><index pos:start="1319:64" pos:end="1319:66">[<expr pos:start="1319:65" pos:end="1319:65"><name pos:start="1319:65" pos:end="1319:65">i</name></expr>]</index></name><operator pos:start="1319:67" pos:end="1319:67">.</operator><name pos:start="1319:68" pos:end="1319:77">step_index</name></expr></argument>, <argument pos:start="1319:80" pos:end="1319:80"><expr pos:start="1319:80" pos:end="1319:80"><literal type="number" pos:start="1319:80" pos:end="1319:80">0</literal></expr></argument>, <argument pos:start="1319:83" pos:end="1319:84"><expr pos:start="1319:83" pos:end="1319:84"><literal type="number" pos:start="1319:83" pos:end="1319:84">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1321:21" pos:end="1321:83"><expr pos:start="1321:21" pos:end="1321:82"><name pos:start="1321:21" pos:end="1321:32"><name pos:start="1321:21" pos:end="1321:21">c</name><operator pos:start="1321:22" pos:end="1321:23">-&gt;</operator><name pos:start="1321:24" pos:end="1321:29">status</name><index pos:start="1321:30" pos:end="1321:32">[<expr pos:start="1321:31" pos:end="1321:31"><name pos:start="1321:31" pos:end="1321:31">i</name></expr>]</index></name><operator pos:start="1321:33" pos:end="1321:33">.</operator><name pos:start="1321:34" pos:end="1321:42">predictor</name> <operator pos:start="1321:44" pos:end="1321:44">=</operator> <call pos:start="1321:46" pos:end="1321:82"><name pos:start="1321:46" pos:end="1321:58">av_clip_int16</name><argument_list pos:start="1321:59" pos:end="1321:82">(<argument pos:start="1321:60" pos:end="1321:81"><expr pos:start="1321:60" pos:end="1321:81"><name pos:start="1321:60" pos:end="1321:71"><name pos:start="1321:60" pos:end="1321:60">c</name><operator pos:start="1321:61" pos:end="1321:62">-&gt;</operator><name pos:start="1321:63" pos:end="1321:68">status</name><index pos:start="1321:69" pos:end="1321:71">[<expr pos:start="1321:70" pos:end="1321:70"><name pos:start="1321:70" pos:end="1321:70">i</name></expr>]</index></name><operator pos:start="1321:72" pos:end="1321:72">.</operator><name pos:start="1321:73" pos:end="1321:81">predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1325:21" pos:end="1325:56"><expr pos:start="1325:21" pos:end="1325:55"><operator pos:start="1325:21" pos:end="1325:21">*</operator><name pos:start="1325:22" pos:end="1325:28">samples</name><operator pos:start="1325:29" pos:end="1325:30">++</operator> <operator pos:start="1325:32" pos:end="1325:32">=</operator> <name pos:start="1325:34" pos:end="1325:45"><name pos:start="1325:34" pos:end="1325:34">c</name><operator pos:start="1325:35" pos:end="1325:36">-&gt;</operator><name pos:start="1325:37" pos:end="1325:42">status</name><index pos:start="1325:43" pos:end="1325:45">[<expr pos:start="1325:44" pos:end="1325:44"><name pos:start="1325:44" pos:end="1325:44">i</name></expr>]</index></name><operator pos:start="1325:46" pos:end="1325:46">.</operator><name pos:start="1325:47" pos:end="1325:55">predictor</name></expr>;</expr_stmt>

                    <if_stmt pos:start="1327:21" pos:end="1333:21"><if pos:start="1327:21" pos:end="1333:21">if <condition pos:start="1327:24" pos:end="1327:47">(<expr pos:start="1327:25" pos:end="1327:46"><name pos:start="1327:25" pos:end="1327:31">samples</name> <operator pos:start="1327:33" pos:end="1327:34">&gt;=</operator> <name pos:start="1327:36" pos:end="1327:46">samples_end</name></expr>)</condition> <block pos:start="1327:49" pos:end="1333:21">{<block_content pos:start="1329:25" pos:end="1331:34">

                        <expr_stmt pos:start="1329:25" pos:end="1329:94"><expr pos:start="1329:25" pos:end="1329:93"><call pos:start="1329:25" pos:end="1329:93"><name pos:start="1329:25" pos:end="1329:30">av_log</name><argument_list pos:start="1329:31" pos:end="1329:93">(<argument pos:start="1329:32" pos:end="1329:36"><expr pos:start="1329:32" pos:end="1329:36"><name pos:start="1329:32" pos:end="1329:36">avctx</name></expr></argument>, <argument pos:start="1329:39" pos:end="1329:50"><expr pos:start="1329:39" pos:end="1329:50"><name pos:start="1329:39" pos:end="1329:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1329:53" pos:end="1329:92"><expr pos:start="1329:53" pos:end="1329:92"><literal type="string" pos:start="1329:53" pos:end="1329:92">"allocated output buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="1331:25" pos:end="1331:34">return <expr pos:start="1331:32" pos:end="1331:33"><operator pos:start="1331:32" pos:end="1331:32">-</operator><literal type="number" pos:start="1331:33" pos:end="1331:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></while>

        <expr_stmt pos:start="1341:9" pos:end="1341:24"><expr pos:start="1341:9" pos:end="1341:23"><name pos:start="1341:9" pos:end="1341:11">src</name> <operator pos:start="1341:13" pos:end="1341:14">+=</operator> <name pos:start="1341:16" pos:end="1341:23">buf_size</name></expr>;</expr_stmt>

        <break pos:start="1343:9" pos:end="1343:14">break;</break>

    </block_content>}</block>

    <case pos:start="1347:5" pos:end="1347:31">case <expr pos:start="1347:10" pos:end="1347:30"><name pos:start="1347:10" pos:end="1347:30">CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <while pos:start="1349:9" pos:end="1375:9">while <condition pos:start="1349:15" pos:end="1349:36">(<expr pos:start="1349:16" pos:end="1349:35"><name pos:start="1349:16" pos:end="1349:18">src</name> <operator pos:start="1349:20" pos:end="1349:20">&lt;</operator> <name pos:start="1349:22" pos:end="1349:24">buf</name> <operator pos:start="1349:26" pos:end="1349:26">+</operator> <name pos:start="1349:28" pos:end="1349:35">buf_size</name></expr>)</condition> <block pos:start="1349:38" pos:end="1375:9">{<block_content pos:start="1351:13" pos:end="1373:18">

            <if_stmt pos:start="1351:13" pos:end="1371:13"><if pos:start="1351:13" pos:end="1361:13">if <condition pos:start="1351:16" pos:end="1351:19">(<expr pos:start="1351:17" pos:end="1351:18"><name pos:start="1351:17" pos:end="1351:18">st</name></expr>)</condition> <block pos:start="1351:21" pos:end="1361:13">{<block_content pos:start="1353:17" pos:end="1359:39">

                <expr_stmt pos:start="1353:17" pos:end="1355:39"><expr pos:start="1353:17" pos:end="1355:38"><operator pos:start="1353:17" pos:end="1353:17">*</operator><name pos:start="1353:18" pos:end="1353:24">samples</name><operator pos:start="1353:25" pos:end="1353:26">++</operator> <operator pos:start="1353:28" pos:end="1353:28">=</operator> <call pos:start="1353:30" pos:end="1355:38"><name pos:start="1353:30" pos:end="1353:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1353:56" pos:end="1355:38">(<argument pos:start="1353:57" pos:end="1353:69"><expr pos:start="1353:57" pos:end="1353:69"><operator pos:start="1353:57" pos:end="1353:57">&amp;</operator><name pos:start="1353:58" pos:end="1353:69"><name pos:start="1353:58" pos:end="1353:58">c</name><operator pos:start="1353:59" pos:end="1353:60">-&gt;</operator><name pos:start="1353:61" pos:end="1353:66">status</name><index pos:start="1353:67" pos:end="1353:69">[<expr pos:start="1353:68" pos:end="1353:68"><literal type="number" pos:start="1353:68" pos:end="1353:68">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="1355:25" pos:end="1355:37"><expr pos:start="1355:25" pos:end="1355:37"><name pos:start="1355:25" pos:end="1355:30"><name pos:start="1355:25" pos:end="1355:27">src</name><index pos:start="1355:28" pos:end="1355:30">[<expr pos:start="1355:29" pos:end="1355:29"><literal type="number" pos:start="1355:29" pos:end="1355:29">0</literal></expr>]</index></name> <operator pos:start="1355:32" pos:end="1355:32">&amp;</operator> <literal type="number" pos:start="1355:34" pos:end="1355:37">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1357:17" pos:end="1359:39"><expr pos:start="1357:17" pos:end="1359:38"><operator pos:start="1357:17" pos:end="1357:17">*</operator><name pos:start="1357:18" pos:end="1357:24">samples</name><operator pos:start="1357:25" pos:end="1357:26">++</operator> <operator pos:start="1357:28" pos:end="1357:28">=</operator> <call pos:start="1357:30" pos:end="1359:38"><name pos:start="1357:30" pos:end="1357:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1357:56" pos:end="1359:38">(<argument pos:start="1357:57" pos:end="1357:69"><expr pos:start="1357:57" pos:end="1357:69"><operator pos:start="1357:57" pos:end="1357:57">&amp;</operator><name pos:start="1357:58" pos:end="1357:69"><name pos:start="1357:58" pos:end="1357:58">c</name><operator pos:start="1357:59" pos:end="1357:60">-&gt;</operator><name pos:start="1357:61" pos:end="1357:66">status</name><index pos:start="1357:67" pos:end="1357:69">[<expr pos:start="1357:68" pos:end="1357:68"><literal type="number" pos:start="1357:68" pos:end="1357:68">1</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="1359:25" pos:end="1359:35"><expr pos:start="1359:25" pos:end="1359:35"><name pos:start="1359:25" pos:end="1359:30"><name pos:start="1359:25" pos:end="1359:27">src</name><index pos:start="1359:28" pos:end="1359:30">[<expr pos:start="1359:29" pos:end="1359:29"><literal type="number" pos:start="1359:29" pos:end="1359:29">0</literal></expr>]</index></name> <operator pos:start="1359:32" pos:end="1359:33">&gt;&gt;</operator> <literal type="number" pos:start="1359:35" pos:end="1359:35">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1361:15" pos:end="1371:13">else <block pos:start="1361:20" pos:end="1371:13">{<block_content pos:start="1363:17" pos:end="1369:39">

                <expr_stmt pos:start="1363:17" pos:end="1365:39"><expr pos:start="1363:17" pos:end="1365:38"><operator pos:start="1363:17" pos:end="1363:17">*</operator><name pos:start="1363:18" pos:end="1363:24">samples</name><operator pos:start="1363:25" pos:end="1363:26">++</operator> <operator pos:start="1363:28" pos:end="1363:28">=</operator> <call pos:start="1363:30" pos:end="1365:38"><name pos:start="1363:30" pos:end="1363:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1363:56" pos:end="1365:38">(<argument pos:start="1363:57" pos:end="1363:69"><expr pos:start="1363:57" pos:end="1363:69"><operator pos:start="1363:57" pos:end="1363:57">&amp;</operator><name pos:start="1363:58" pos:end="1363:69"><name pos:start="1363:58" pos:end="1363:58">c</name><operator pos:start="1363:59" pos:end="1363:60">-&gt;</operator><name pos:start="1363:61" pos:end="1363:66">status</name><index pos:start="1363:67" pos:end="1363:69">[<expr pos:start="1363:68" pos:end="1363:68"><literal type="number" pos:start="1363:68" pos:end="1363:68">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="1365:25" pos:end="1365:37"><expr pos:start="1365:25" pos:end="1365:37"><name pos:start="1365:25" pos:end="1365:30"><name pos:start="1365:25" pos:end="1365:27">src</name><index pos:start="1365:28" pos:end="1365:30">[<expr pos:start="1365:29" pos:end="1365:29"><literal type="number" pos:start="1365:29" pos:end="1365:29">0</literal></expr>]</index></name> <operator pos:start="1365:32" pos:end="1365:32">&amp;</operator> <literal type="number" pos:start="1365:34" pos:end="1365:37">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1367:17" pos:end="1369:39"><expr pos:start="1367:17" pos:end="1369:38"><operator pos:start="1367:17" pos:end="1367:17">*</operator><name pos:start="1367:18" pos:end="1367:24">samples</name><operator pos:start="1367:25" pos:end="1367:26">++</operator> <operator pos:start="1367:28" pos:end="1367:28">=</operator> <call pos:start="1367:30" pos:end="1369:38"><name pos:start="1367:30" pos:end="1367:55">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1367:56" pos:end="1369:38">(<argument pos:start="1367:57" pos:end="1367:69"><expr pos:start="1367:57" pos:end="1367:69"><operator pos:start="1367:57" pos:end="1367:57">&amp;</operator><name pos:start="1367:58" pos:end="1367:69"><name pos:start="1367:58" pos:end="1367:58">c</name><operator pos:start="1367:59" pos:end="1367:60">-&gt;</operator><name pos:start="1367:61" pos:end="1367:66">status</name><index pos:start="1367:67" pos:end="1367:69">[<expr pos:start="1367:68" pos:end="1367:68"><literal type="number" pos:start="1367:68" pos:end="1367:68">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="1369:25" pos:end="1369:35"><expr pos:start="1369:25" pos:end="1369:35"><name pos:start="1369:25" pos:end="1369:30"><name pos:start="1369:25" pos:end="1369:27">src</name><index pos:start="1369:28" pos:end="1369:30">[<expr pos:start="1369:29" pos:end="1369:29"><literal type="number" pos:start="1369:29" pos:end="1369:29">0</literal></expr>]</index></name> <operator pos:start="1369:32" pos:end="1369:33">&gt;&gt;</operator> <literal type="number" pos:start="1369:35" pos:end="1369:35">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1373:13" pos:end="1373:18"><expr pos:start="1373:13" pos:end="1373:17"><name pos:start="1373:13" pos:end="1373:15">src</name><operator pos:start="1373:16" pos:end="1373:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="1377:9" pos:end="1377:14">break;</break>

    <case pos:start="1379:5" pos:end="1379:28">case <expr pos:start="1379:10" pos:end="1379:27"><name pos:start="1379:10" pos:end="1379:27">CODEC_ID_ADPCM_THP</name></expr>:</case>

    <block pos:start="1381:5" pos:end="1499:5">{<block_content pos:start="1383:9" pos:end="1497:14">

        <decl_stmt pos:start="1383:9" pos:end="1383:25"><decl pos:start="1383:9" pos:end="1383:24"><type pos:start="1383:9" pos:end="1383:11"><name pos:start="1383:9" pos:end="1383:11">int</name></type> <name pos:start="1383:13" pos:end="1383:24"><name pos:start="1383:13" pos:end="1383:17">table</name><index pos:start="1383:18" pos:end="1383:20">[<expr pos:start="1383:19" pos:end="1383:19"><literal type="number" pos:start="1383:19" pos:end="1383:19">2</literal></expr>]</index><index pos:start="1383:21" pos:end="1383:24">[<expr pos:start="1383:22" pos:end="1383:23"><literal type="number" pos:start="1383:22" pos:end="1383:23">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="1385:9" pos:end="1385:31"><decl pos:start="1385:9" pos:end="1385:30"><type pos:start="1385:9" pos:end="1385:20"><name pos:start="1385:9" pos:end="1385:16">unsigned</name> <name pos:start="1385:18" pos:end="1385:20">int</name></type> <name pos:start="1385:22" pos:end="1385:30">samplecnt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1387:9" pos:end="1387:23"><decl pos:start="1387:9" pos:end="1387:22"><type pos:start="1387:9" pos:end="1387:11"><name pos:start="1387:9" pos:end="1387:11">int</name></type> <name pos:start="1387:13" pos:end="1387:22"><name pos:start="1387:13" pos:end="1387:16">prev</name><index pos:start="1387:17" pos:end="1387:19">[<expr pos:start="1387:18" pos:end="1387:18"><literal type="number" pos:start="1387:18" pos:end="1387:18">2</literal></expr>]</index><index pos:start="1387:20" pos:end="1387:22">[<expr pos:start="1387:21" pos:end="1387:21"><literal type="number" pos:start="1387:21" pos:end="1387:21">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="1389:9" pos:end="1389:15"><decl pos:start="1389:9" pos:end="1389:14"><type pos:start="1389:9" pos:end="1389:11"><name pos:start="1389:9" pos:end="1389:11">int</name></type> <name pos:start="1389:13" pos:end="1389:14">ch</name></decl>;</decl_stmt>



        <if_stmt pos:start="1393:9" pos:end="1399:9"><if pos:start="1393:9" pos:end="1399:9">if <condition pos:start="1393:12" pos:end="1393:26">(<expr pos:start="1393:13" pos:end="1393:25"><name pos:start="1393:13" pos:end="1393:20">buf_size</name> <operator pos:start="1393:22" pos:end="1393:22">&lt;</operator> <literal type="number" pos:start="1393:24" pos:end="1393:25">80</literal></expr>)</condition> <block pos:start="1393:28" pos:end="1399:9">{<block_content pos:start="1395:13" pos:end="1397:22">

            <expr_stmt pos:start="1395:13" pos:end="1395:61"><expr pos:start="1395:13" pos:end="1395:60"><call pos:start="1395:13" pos:end="1395:60"><name pos:start="1395:13" pos:end="1395:18">av_log</name><argument_list pos:start="1395:19" pos:end="1395:60">(<argument pos:start="1395:20" pos:end="1395:24"><expr pos:start="1395:20" pos:end="1395:24"><name pos:start="1395:20" pos:end="1395:24">avctx</name></expr></argument>, <argument pos:start="1395:27" pos:end="1395:38"><expr pos:start="1395:27" pos:end="1395:38"><name pos:start="1395:27" pos:end="1395:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1395:41" pos:end="1395:59"><expr pos:start="1395:41" pos:end="1395:59"><literal type="string" pos:start="1395:41" pos:end="1395:59">"frame too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="1397:13" pos:end="1397:22">return <expr pos:start="1397:20" pos:end="1397:21"><operator pos:start="1397:20" pos:end="1397:20">-</operator><literal type="number" pos:start="1397:21" pos:end="1397:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="1403:9" pos:end="1403:15"><expr pos:start="1403:9" pos:end="1403:14"><name pos:start="1403:9" pos:end="1403:11">src</name><operator pos:start="1403:12" pos:end="1403:13">+=</operator><literal type="number" pos:start="1403:14" pos:end="1403:14">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1405:9" pos:end="1405:46"><expr pos:start="1405:9" pos:end="1405:45"><name pos:start="1405:9" pos:end="1405:17">samplecnt</name> <operator pos:start="1405:19" pos:end="1405:19">=</operator> <call pos:start="1405:21" pos:end="1405:45"><name pos:start="1405:21" pos:end="1405:39">bytestream_get_be32</name><argument_list pos:start="1405:40" pos:end="1405:45">(<argument pos:start="1405:41" pos:end="1405:44"><expr pos:start="1405:41" pos:end="1405:44"><operator pos:start="1405:41" pos:end="1405:41">&amp;</operator><name pos:start="1405:42" pos:end="1405:44">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="1409:9" pos:end="1411:61">for <control pos:start="1409:13" pos:end="1409:32">(<init pos:start="1409:14" pos:end="1409:19"><expr pos:start="1409:14" pos:end="1409:18"><name pos:start="1409:14" pos:end="1409:14">i</name> <operator pos:start="1409:16" pos:end="1409:16">=</operator> <literal type="number" pos:start="1409:18" pos:end="1409:18">0</literal></expr>;</init> <condition pos:start="1409:21" pos:end="1409:27"><expr pos:start="1409:21" pos:end="1409:26"><name pos:start="1409:21" pos:end="1409:21">i</name> <operator pos:start="1409:23" pos:end="1409:23">&lt;</operator> <literal type="number" pos:start="1409:25" pos:end="1409:26">32</literal></expr>;</condition> <incr pos:start="1409:29" pos:end="1409:31"><expr pos:start="1409:29" pos:end="1409:31"><name pos:start="1409:29" pos:end="1409:29">i</name><operator pos:start="1409:30" pos:end="1409:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1411:13" pos:end="1411:61"><block_content pos:start="1411:13" pos:end="1411:61">

            <expr_stmt pos:start="1411:13" pos:end="1411:61"><expr pos:start="1411:13" pos:end="1411:60"><name pos:start="1411:13" pos:end="1411:23"><name pos:start="1411:13" pos:end="1411:17">table</name><index pos:start="1411:18" pos:end="1411:20">[<expr pos:start="1411:19" pos:end="1411:19"><literal type="number" pos:start="1411:19" pos:end="1411:19">0</literal></expr>]</index><index pos:start="1411:21" pos:end="1411:23">[<expr pos:start="1411:22" pos:end="1411:22"><name pos:start="1411:22" pos:end="1411:22">i</name></expr>]</index></name> <operator pos:start="1411:25" pos:end="1411:25">=</operator> <operator pos:start="1411:27" pos:end="1411:27">(</operator><name pos:start="1411:28" pos:end="1411:34">int16_t</name><operator pos:start="1411:35" pos:end="1411:35">)</operator><call pos:start="1411:36" pos:end="1411:60"><name pos:start="1411:36" pos:end="1411:54">bytestream_get_be16</name><argument_list pos:start="1411:55" pos:end="1411:60">(<argument pos:start="1411:56" pos:end="1411:59"><expr pos:start="1411:56" pos:end="1411:59"><operator pos:start="1411:56" pos:end="1411:56">&amp;</operator><name pos:start="1411:57" pos:end="1411:59">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <comment type="block" pos:start="1415:9" pos:end="1415:46">/* Initialize the previous sample.  */</comment>

        <for pos:start="1417:9" pos:end="1419:60">for <control pos:start="1417:13" pos:end="1417:31">(<init pos:start="1417:14" pos:end="1417:19"><expr pos:start="1417:14" pos:end="1417:18"><name pos:start="1417:14" pos:end="1417:14">i</name> <operator pos:start="1417:16" pos:end="1417:16">=</operator> <literal type="number" pos:start="1417:18" pos:end="1417:18">0</literal></expr>;</init> <condition pos:start="1417:21" pos:end="1417:26"><expr pos:start="1417:21" pos:end="1417:25"><name pos:start="1417:21" pos:end="1417:21">i</name> <operator pos:start="1417:23" pos:end="1417:23">&lt;</operator> <literal type="number" pos:start="1417:25" pos:end="1417:25">4</literal></expr>;</condition> <incr pos:start="1417:28" pos:end="1417:30"><expr pos:start="1417:28" pos:end="1417:30"><name pos:start="1417:28" pos:end="1417:28">i</name><operator pos:start="1417:29" pos:end="1417:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1419:13" pos:end="1419:60"><block_content pos:start="1419:13" pos:end="1419:60">

            <expr_stmt pos:start="1419:13" pos:end="1419:60"><expr pos:start="1419:13" pos:end="1419:59"><name pos:start="1419:13" pos:end="1419:22"><name pos:start="1419:13" pos:end="1419:16">prev</name><index pos:start="1419:17" pos:end="1419:19">[<expr pos:start="1419:18" pos:end="1419:18"><literal type="number" pos:start="1419:18" pos:end="1419:18">0</literal></expr>]</index><index pos:start="1419:20" pos:end="1419:22">[<expr pos:start="1419:21" pos:end="1419:21"><name pos:start="1419:21" pos:end="1419:21">i</name></expr>]</index></name> <operator pos:start="1419:24" pos:end="1419:24">=</operator> <operator pos:start="1419:26" pos:end="1419:26">(</operator><name pos:start="1419:27" pos:end="1419:33">int16_t</name><operator pos:start="1419:34" pos:end="1419:34">)</operator><call pos:start="1419:35" pos:end="1419:59"><name pos:start="1419:35" pos:end="1419:53">bytestream_get_be16</name><argument_list pos:start="1419:54" pos:end="1419:59">(<argument pos:start="1419:55" pos:end="1419:58"><expr pos:start="1419:55" pos:end="1419:58"><operator pos:start="1419:55" pos:end="1419:55">&amp;</operator><name pos:start="1419:56" pos:end="1419:58">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="1423:9" pos:end="1429:9"><if pos:start="1423:9" pos:end="1429:9">if <condition pos:start="1423:12" pos:end="1423:61">(<expr pos:start="1423:13" pos:end="1423:60"><name pos:start="1423:13" pos:end="1423:21">samplecnt</name> <operator pos:start="1423:23" pos:end="1423:24">&gt;=</operator> <operator pos:start="1423:26" pos:end="1423:26">(</operator><name pos:start="1423:27" pos:end="1423:37">samples_end</name> <operator pos:start="1423:39" pos:end="1423:39">-</operator> <name pos:start="1423:41" pos:end="1423:47">samples</name><operator pos:start="1423:48" pos:end="1423:48">)</operator> <operator pos:start="1423:50" pos:end="1423:50">/</operator>  <operator pos:start="1423:53" pos:end="1423:53">(</operator><name pos:start="1423:54" pos:end="1423:55">st</name> <operator pos:start="1423:57" pos:end="1423:57">+</operator> <literal type="number" pos:start="1423:59" pos:end="1423:59">1</literal><operator pos:start="1423:60" pos:end="1423:60">)</operator></expr>)</condition> <block pos:start="1423:63" pos:end="1429:9">{<block_content pos:start="1425:13" pos:end="1427:22">

            <expr_stmt pos:start="1425:13" pos:end="1425:82"><expr pos:start="1425:13" pos:end="1425:81"><call pos:start="1425:13" pos:end="1425:81"><name pos:start="1425:13" pos:end="1425:18">av_log</name><argument_list pos:start="1425:19" pos:end="1425:81">(<argument pos:start="1425:20" pos:end="1425:24"><expr pos:start="1425:20" pos:end="1425:24"><name pos:start="1425:20" pos:end="1425:24">avctx</name></expr></argument>, <argument pos:start="1425:27" pos:end="1425:38"><expr pos:start="1425:27" pos:end="1425:38"><name pos:start="1425:27" pos:end="1425:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1425:41" pos:end="1425:80"><expr pos:start="1425:41" pos:end="1425:80"><literal type="string" pos:start="1425:41" pos:end="1425:80">"allocated output buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="1427:13" pos:end="1427:22">return <expr pos:start="1427:20" pos:end="1427:21"><operator pos:start="1427:20" pos:end="1427:20">-</operator><literal type="number" pos:start="1427:21" pos:end="1427:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="1433:9" pos:end="1487:9">for <control pos:start="1433:13" pos:end="1433:36">(<init pos:start="1433:14" pos:end="1433:20"><expr pos:start="1433:14" pos:end="1433:19"><name pos:start="1433:14" pos:end="1433:15">ch</name> <operator pos:start="1433:17" pos:end="1433:17">=</operator> <literal type="number" pos:start="1433:19" pos:end="1433:19">0</literal></expr>;</init> <condition pos:start="1433:22" pos:end="1433:30"><expr pos:start="1433:22" pos:end="1433:29"><name pos:start="1433:22" pos:end="1433:23">ch</name> <operator pos:start="1433:25" pos:end="1433:26">&lt;=</operator> <name pos:start="1433:28" pos:end="1433:29">st</name></expr>;</condition> <incr pos:start="1433:32" pos:end="1433:35"><expr pos:start="1433:32" pos:end="1433:35"><name pos:start="1433:32" pos:end="1433:33">ch</name><operator pos:start="1433:34" pos:end="1433:35">++</operator></expr></incr>)</control> <block pos:start="1433:38" pos:end="1487:9">{<block_content pos:start="1435:13" pos:end="1485:13">

            <expr_stmt pos:start="1435:13" pos:end="1435:51"><expr pos:start="1435:13" pos:end="1435:50"><name pos:start="1435:13" pos:end="1435:19">samples</name> <operator pos:start="1435:21" pos:end="1435:21">=</operator> <operator pos:start="1435:23" pos:end="1435:23">(</operator><name pos:start="1435:24" pos:end="1435:31">unsigned</name> <name pos:start="1435:33" pos:end="1435:37">short</name> <operator pos:start="1435:39" pos:end="1435:39">*</operator><operator pos:start="1435:40" pos:end="1435:40">)</operator> <name pos:start="1435:42" pos:end="1435:45">data</name> <operator pos:start="1435:47" pos:end="1435:47">+</operator> <name pos:start="1435:49" pos:end="1435:50">ch</name></expr>;</expr_stmt>



            <comment type="block" pos:start="1439:13" pos:end="1439:57">/* Read in every sample for this channel.  */</comment>

            <for pos:start="1441:13" pos:end="1485:13">for <control pos:start="1441:17" pos:end="1441:48">(<init pos:start="1441:18" pos:end="1441:23"><expr pos:start="1441:18" pos:end="1441:22"><name pos:start="1441:18" pos:end="1441:18">i</name> <operator pos:start="1441:20" pos:end="1441:20">=</operator> <literal type="number" pos:start="1441:22" pos:end="1441:22">0</literal></expr>;</init> <condition pos:start="1441:25" pos:end="1441:43"><expr pos:start="1441:25" pos:end="1441:42"><name pos:start="1441:25" pos:end="1441:25">i</name> <operator pos:start="1441:27" pos:end="1441:27">&lt;</operator> <name pos:start="1441:29" pos:end="1441:37">samplecnt</name> <operator pos:start="1441:39" pos:end="1441:39">/</operator> <literal type="number" pos:start="1441:41" pos:end="1441:42">14</literal></expr>;</condition> <incr pos:start="1441:45" pos:end="1441:47"><expr pos:start="1441:45" pos:end="1441:47"><name pos:start="1441:45" pos:end="1441:45">i</name><operator pos:start="1441:46" pos:end="1441:47">++</operator></expr></incr>)</control> <block pos:start="1441:50" pos:end="1485:13">{<block_content pos:start="1443:17" pos:end="1483:17">

                <decl_stmt pos:start="1443:17" pos:end="1443:44"><decl pos:start="1443:17" pos:end="1443:43"><type pos:start="1443:17" pos:end="1443:19"><name pos:start="1443:17" pos:end="1443:19">int</name></type> <name pos:start="1443:21" pos:end="1443:25">index</name> <init pos:start="1443:27" pos:end="1443:43">= <expr pos:start="1443:29" pos:end="1443:43"><operator pos:start="1443:29" pos:end="1443:29">(</operator><operator pos:start="1443:30" pos:end="1443:30">*</operator><name pos:start="1443:31" pos:end="1443:33">src</name> <operator pos:start="1443:35" pos:end="1443:36">&gt;&gt;</operator> <literal type="number" pos:start="1443:38" pos:end="1443:38">4</literal><operator pos:start="1443:39" pos:end="1443:39">)</operator> <operator pos:start="1443:41" pos:end="1443:41">&amp;</operator> <literal type="number" pos:start="1443:43" pos:end="1443:43">7</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1445:17" pos:end="1445:54"><decl pos:start="1445:17" pos:end="1445:53"><type pos:start="1445:17" pos:end="1445:28"><name pos:start="1445:17" pos:end="1445:24">unsigned</name> <name pos:start="1445:26" pos:end="1445:28">int</name></type> <name pos:start="1445:30" pos:end="1445:32">exp</name> <init pos:start="1445:34" pos:end="1445:53">= <expr pos:start="1445:36" pos:end="1445:53"><literal type="number" pos:start="1445:36" pos:end="1445:39">28</literal> <operator pos:start="1445:39" pos:end="1445:39">-</operator> <operator pos:start="1445:41" pos:end="1445:41">(</operator><operator pos:start="1445:42" pos:end="1445:42">*</operator><name pos:start="1445:43" pos:end="1445:45">src</name><operator pos:start="1445:46" pos:end="1445:47">++</operator> <operator pos:start="1445:49" pos:end="1445:49">&amp;</operator> <literal type="number" pos:start="1445:51" pos:end="1445:52">15</literal><operator pos:start="1445:53" pos:end="1445:53">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1447:17" pos:end="1447:51"><decl pos:start="1447:17" pos:end="1447:50"><type pos:start="1447:17" pos:end="1447:19"><name pos:start="1447:17" pos:end="1447:19">int</name></type> <name pos:start="1447:21" pos:end="1447:27">factor1</name> <init pos:start="1447:29" pos:end="1447:50">= <expr pos:start="1447:31" pos:end="1447:50"><name pos:start="1447:31" pos:end="1447:50"><name pos:start="1447:31" pos:end="1447:35">table</name><index pos:start="1447:36" pos:end="1447:39">[<expr pos:start="1447:37" pos:end="1447:38"><name pos:start="1447:37" pos:end="1447:38">ch</name></expr>]</index><index pos:start="1447:40" pos:end="1447:50">[<expr pos:start="1447:41" pos:end="1447:49"><name pos:start="1447:41" pos:end="1447:45">index</name> <operator pos:start="1447:47" pos:end="1447:47">*</operator> <literal type="number" pos:start="1447:49" pos:end="1447:49">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1449:17" pos:end="1449:55"><decl pos:start="1449:17" pos:end="1449:54"><type pos:start="1449:17" pos:end="1449:19"><name pos:start="1449:17" pos:end="1449:19">int</name></type> <name pos:start="1449:21" pos:end="1449:27">factor2</name> <init pos:start="1449:29" pos:end="1449:54">= <expr pos:start="1449:31" pos:end="1449:54"><name pos:start="1449:31" pos:end="1449:54"><name pos:start="1449:31" pos:end="1449:35">table</name><index pos:start="1449:36" pos:end="1449:39">[<expr pos:start="1449:37" pos:end="1449:38"><name pos:start="1449:37" pos:end="1449:38">ch</name></expr>]</index><index pos:start="1449:40" pos:end="1449:54">[<expr pos:start="1449:41" pos:end="1449:53"><name pos:start="1449:41" pos:end="1449:45">index</name> <operator pos:start="1449:47" pos:end="1449:47">*</operator> <literal type="number" pos:start="1449:49" pos:end="1449:51">2</literal> <operator pos:start="1449:51" pos:end="1449:51">+</operator> <literal type="number" pos:start="1449:53" pos:end="1449:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="1453:17" pos:end="1453:41">/* Decode 14 samples.  */</comment>

                <for pos:start="1455:17" pos:end="1483:17">for <control pos:start="1455:21" pos:end="1455:40">(<init pos:start="1455:22" pos:end="1455:27"><expr pos:start="1455:22" pos:end="1455:26"><name pos:start="1455:22" pos:end="1455:22">n</name> <operator pos:start="1455:24" pos:end="1455:24">=</operator> <literal type="number" pos:start="1455:26" pos:end="1455:26">0</literal></expr>;</init> <condition pos:start="1455:29" pos:end="1455:35"><expr pos:start="1455:29" pos:end="1455:34"><name pos:start="1455:29" pos:end="1455:29">n</name> <operator pos:start="1455:31" pos:end="1455:31">&lt;</operator> <literal type="number" pos:start="1455:33" pos:end="1455:34">14</literal></expr>;</condition> <incr pos:start="1455:37" pos:end="1455:39"><expr pos:start="1455:37" pos:end="1455:39"><name pos:start="1455:37" pos:end="1455:37">n</name><operator pos:start="1455:38" pos:end="1455:39">++</operator></expr></incr>)</control> <block pos:start="1455:42" pos:end="1483:17">{<block_content pos:start="1457:21" pos:end="1481:34">

                    <decl_stmt pos:start="1457:21" pos:end="1457:38"><decl pos:start="1457:21" pos:end="1457:37"><type pos:start="1457:21" pos:end="1457:27"><name pos:start="1457:21" pos:end="1457:27">int32_t</name></type> <name pos:start="1457:29" pos:end="1457:37">sampledat</name></decl>;</decl_stmt>

                    <if_stmt pos:start="1459:21" pos:end="1461:55"><if pos:start="1459:21" pos:end="1459:55">if<condition pos:start="1459:23" pos:end="1459:27">(<expr pos:start="1459:24" pos:end="1459:26"><name pos:start="1459:24" pos:end="1459:24">n</name><operator pos:start="1459:25" pos:end="1459:25">&amp;</operator><literal type="number" pos:start="1459:26" pos:end="1459:26">1</literal></expr>)</condition><block type="pseudo" pos:start="1459:29" pos:end="1459:55"><block_content pos:start="1459:29" pos:end="1459:55"> <expr_stmt pos:start="1459:29" pos:end="1459:55"><expr pos:start="1459:29" pos:end="1459:54"><name pos:start="1459:29" pos:end="1459:37">sampledat</name><operator pos:start="1459:38" pos:end="1459:38">=</operator>  <operator pos:start="1459:41" pos:end="1459:41">*</operator><name pos:start="1459:42" pos:end="1459:44">src</name><operator pos:start="1459:45" pos:end="1459:46">++</operator>    <operator pos:start="1459:51" pos:end="1459:52">&lt;&lt;</operator><literal type="number" pos:start="1459:53" pos:end="1459:54">28</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1461:21" pos:end="1461:55">else<block type="pseudo" pos:start="1461:29" pos:end="1461:55"><block_content pos:start="1461:29" pos:end="1461:55">    <expr_stmt pos:start="1461:29" pos:end="1461:55"><expr pos:start="1461:29" pos:end="1461:54"><name pos:start="1461:29" pos:end="1461:37">sampledat</name><operator pos:start="1461:38" pos:end="1461:38">=</operator> <operator pos:start="1461:40" pos:end="1461:40">(</operator><operator pos:start="1461:41" pos:end="1461:41">*</operator><name pos:start="1461:42" pos:end="1461:44">src</name><operator pos:start="1461:45" pos:end="1461:45">&amp;</operator><literal type="number" pos:start="1461:46" pos:end="1461:49">0xF0</literal><operator pos:start="1461:50" pos:end="1461:50">)</operator><operator pos:start="1461:51" pos:end="1461:52">&lt;&lt;</operator><literal type="number" pos:start="1461:53" pos:end="1461:54">24</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <expr_stmt pos:start="1465:21" pos:end="1467:81"><expr pos:start="1465:21" pos:end="1467:80"><name pos:start="1465:21" pos:end="1465:29">sampledat</name> <operator pos:start="1465:31" pos:end="1465:31">=</operator> <operator pos:start="1465:33" pos:end="1465:33">(</operator><operator pos:start="1465:34" pos:end="1465:34">(</operator><name pos:start="1465:35" pos:end="1465:45"><name pos:start="1465:35" pos:end="1465:38">prev</name><index pos:start="1465:39" pos:end="1465:42">[<expr pos:start="1465:40" pos:end="1465:41"><name pos:start="1465:40" pos:end="1465:41">ch</name></expr>]</index><index pos:start="1465:43" pos:end="1465:45">[<expr pos:start="1465:44" pos:end="1465:44"><literal type="number" pos:start="1465:44" pos:end="1465:44">0</literal></expr>]</index></name><operator pos:start="1465:46" pos:end="1465:46">*</operator><name pos:start="1465:47" pos:end="1465:53">factor1</name>

                                <operator pos:start="1467:33" pos:end="1467:33">+</operator> <name pos:start="1467:35" pos:end="1467:45"><name pos:start="1467:35" pos:end="1467:38">prev</name><index pos:start="1467:39" pos:end="1467:42">[<expr pos:start="1467:40" pos:end="1467:41"><name pos:start="1467:40" pos:end="1467:41">ch</name></expr>]</index><index pos:start="1467:43" pos:end="1467:45">[<expr pos:start="1467:44" pos:end="1467:44"><literal type="number" pos:start="1467:44" pos:end="1467:44">1</literal></expr>]</index></name><operator pos:start="1467:46" pos:end="1467:46">*</operator><name pos:start="1467:47" pos:end="1467:53">factor2</name><operator pos:start="1467:54" pos:end="1467:54">)</operator> <operator pos:start="1467:56" pos:end="1467:57">&gt;&gt;</operator> <literal type="number" pos:start="1467:59" pos:end="1467:60">11</literal><operator pos:start="1467:61" pos:end="1467:61">)</operator> <operator pos:start="1467:63" pos:end="1467:63">+</operator> <operator pos:start="1467:65" pos:end="1467:65">(</operator><name pos:start="1467:66" pos:end="1467:74">sampledat</name><operator pos:start="1467:75" pos:end="1467:76">&gt;&gt;</operator><name pos:start="1467:77" pos:end="1467:79">exp</name><operator pos:start="1467:80" pos:end="1467:80">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1469:21" pos:end="1469:56"><expr pos:start="1469:21" pos:end="1469:55"><operator pos:start="1469:21" pos:end="1469:21">*</operator><name pos:start="1469:22" pos:end="1469:28">samples</name> <operator pos:start="1469:30" pos:end="1469:30">=</operator> <call pos:start="1469:32" pos:end="1469:55"><name pos:start="1469:32" pos:end="1469:44">av_clip_int16</name><argument_list pos:start="1469:45" pos:end="1469:55">(<argument pos:start="1469:46" pos:end="1469:54"><expr pos:start="1469:46" pos:end="1469:54"><name pos:start="1469:46" pos:end="1469:54">sampledat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1471:21" pos:end="1471:46"><expr pos:start="1471:21" pos:end="1471:45"><name pos:start="1471:21" pos:end="1471:31"><name pos:start="1471:21" pos:end="1471:24">prev</name><index pos:start="1471:25" pos:end="1471:28">[<expr pos:start="1471:26" pos:end="1471:27"><name pos:start="1471:26" pos:end="1471:27">ch</name></expr>]</index><index pos:start="1471:29" pos:end="1471:31">[<expr pos:start="1471:30" pos:end="1471:30"><literal type="number" pos:start="1471:30" pos:end="1471:30">1</literal></expr>]</index></name> <operator pos:start="1471:33" pos:end="1471:33">=</operator> <name pos:start="1471:35" pos:end="1471:45"><name pos:start="1471:35" pos:end="1471:38">prev</name><index pos:start="1471:39" pos:end="1471:42">[<expr pos:start="1471:40" pos:end="1471:41"><name pos:start="1471:40" pos:end="1471:41">ch</name></expr>]</index><index pos:start="1471:43" pos:end="1471:45">[<expr pos:start="1471:44" pos:end="1471:44"><literal type="number" pos:start="1471:44" pos:end="1471:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1473:21" pos:end="1473:45"><expr pos:start="1473:21" pos:end="1473:44"><name pos:start="1473:21" pos:end="1473:31"><name pos:start="1473:21" pos:end="1473:24">prev</name><index pos:start="1473:25" pos:end="1473:28">[<expr pos:start="1473:26" pos:end="1473:27"><name pos:start="1473:26" pos:end="1473:27">ch</name></expr>]</index><index pos:start="1473:29" pos:end="1473:31">[<expr pos:start="1473:30" pos:end="1473:30"><literal type="number" pos:start="1473:30" pos:end="1473:30">0</literal></expr>]</index></name> <operator pos:start="1473:33" pos:end="1473:33">=</operator> <operator pos:start="1473:35" pos:end="1473:35">*</operator><name pos:start="1473:36" pos:end="1473:42">samples</name><operator pos:start="1473:43" pos:end="1473:44">++</operator></expr>;</expr_stmt>



                    <comment type="block" pos:start="1477:21" pos:end="1479:52">/* In case of stereo, skip one sample, this sample

                       is for the other channel.  */</comment>

                    <expr_stmt pos:start="1481:21" pos:end="1481:34"><expr pos:start="1481:21" pos:end="1481:33"><name pos:start="1481:21" pos:end="1481:27">samples</name> <operator pos:start="1481:29" pos:end="1481:30">+=</operator> <name pos:start="1481:32" pos:end="1481:33">st</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="block" pos:start="1491:9" pos:end="1493:52">/* In the previous loop, in case stereo is used, samples is

           increased exactly one time too often.  */</comment>

        <expr_stmt pos:start="1495:9" pos:end="1495:22"><expr pos:start="1495:9" pos:end="1495:21"><name pos:start="1495:9" pos:end="1495:15">samples</name> <operator pos:start="1495:17" pos:end="1495:18">-=</operator> <name pos:start="1495:20" pos:end="1495:21">st</name></expr>;</expr_stmt>

        <break pos:start="1497:9" pos:end="1497:14">break;</break>

    </block_content>}</block>



    <default pos:start="1503:5" pos:end="1503:12">default:</default>

        <return pos:start="1505:9" pos:end="1505:18">return <expr pos:start="1505:16" pos:end="1505:17"><operator pos:start="1505:16" pos:end="1505:16">-</operator><literal type="number" pos:start="1505:17" pos:end="1505:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="1509:5" pos:end="1509:54"><expr pos:start="1509:5" pos:end="1509:53"><operator pos:start="1509:5" pos:end="1509:5">*</operator><name pos:start="1509:6" pos:end="1509:14">data_size</name> <operator pos:start="1509:16" pos:end="1509:16">=</operator> <operator pos:start="1509:18" pos:end="1509:18">(</operator><name pos:start="1509:19" pos:end="1509:25">uint8_t</name> <operator pos:start="1509:27" pos:end="1509:27">*</operator><operator pos:start="1509:28" pos:end="1509:28">)</operator><name pos:start="1509:29" pos:end="1509:35">samples</name> <operator pos:start="1509:37" pos:end="1509:37">-</operator> <operator pos:start="1509:39" pos:end="1509:39">(</operator><name pos:start="1509:40" pos:end="1509:46">uint8_t</name> <operator pos:start="1509:48" pos:end="1509:48">*</operator><operator pos:start="1509:49" pos:end="1509:49">)</operator><name pos:start="1509:50" pos:end="1509:53">data</name></expr>;</expr_stmt>

    <return pos:start="1511:5" pos:end="1511:21">return <expr pos:start="1511:12" pos:end="1511:20"><name pos:start="1511:12" pos:end="1511:14">src</name> <operator pos:start="1511:16" pos:end="1511:16">-</operator> <name pos:start="1511:18" pos:end="1511:20">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
