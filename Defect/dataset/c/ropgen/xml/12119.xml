<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12119.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vfio_base_device_init</name><parameter_list pos:start="1:33" pos:end="1:54">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:43">VFIODevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">vbasedev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VFIOGroup</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">group</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VFIODevice</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:29">vbasedev_iter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:23"><name pos:start="9:10" pos:end="9:13">path</name><index pos:start="9:14" pos:end="9:23">[<expr pos:start="9:15" pos:end="9:22"><name pos:start="9:15" pos:end="9:22">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="9:26" pos:end="9:51"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:26" pos:end="9:51"><name pos:start="9:26" pos:end="9:41">iommu_group_path</name><index pos:start="9:42" pos:end="9:51">[<expr pos:start="9:43" pos:end="9:50"><name pos:start="9:43" pos:end="9:50">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="9:54" pos:end="9:64"><type ref="prev" pos:start="9:5" pos:end="9:8"><modifier pos:start="9:54" pos:end="9:54">*</modifier></type><name pos:start="9:55" pos:end="9:64">group_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:15">stat</name></name></type> <name pos:start="13:17" pos:end="13:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">groupid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:44">/* name must be set prior to the call */</comment>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:55">(<expr pos:start="23:9" pos:end="23:54"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:23"><name pos:start="23:10" pos:end="23:17">vbasedev</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:23">name</name></name> <operator pos:start="23:25" pos:end="23:26">||</operator> <call pos:start="23:28" pos:end="23:54"><name pos:start="23:28" pos:end="23:33">strchr</name><argument_list pos:start="23:34" pos:end="23:54">(<argument pos:start="23:35" pos:end="23:48"><expr pos:start="23:35" pos:end="23:48"><name pos:start="23:35" pos:end="23:48"><name pos:start="23:35" pos:end="23:42">vbasedev</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:48">name</name></name></expr></argument>, <argument pos:start="23:51" pos:end="23:53"><expr pos:start="23:51" pos:end="23:53"><literal type="char" pos:start="23:51" pos:end="23:53">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:57" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:23">

        <return pos:start="25:9" pos:end="25:23">return <expr pos:start="25:16" pos:end="25:22"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:43">/* Check that the host device exists */</comment>

    <expr_stmt pos:start="33:5" pos:end="35:31"><expr pos:start="33:5" pos:end="35:30"><call pos:start="33:5" pos:end="35:30"><name pos:start="33:5" pos:end="33:14">g_snprintf</name><argument_list pos:start="33:15" pos:end="35:30">(<argument pos:start="33:16" pos:end="33:19"><expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">path</name></expr></argument>, <argument pos:start="33:22" pos:end="33:33"><expr pos:start="33:22" pos:end="33:33"><sizeof pos:start="33:22" pos:end="33:33">sizeof<argument_list pos:start="33:28" pos:end="33:33">(<argument pos:start="33:29" pos:end="33:32"><expr pos:start="33:29" pos:end="33:32"><name pos:start="33:29" pos:end="33:32">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:36" pos:end="33:66"><expr pos:start="33:36" pos:end="33:66"><literal type="string" pos:start="33:36" pos:end="33:66">"/sys/bus/platform/devices/%s/"</literal></expr></argument>,

               <argument pos:start="35:16" pos:end="35:29"><expr pos:start="35:16" pos:end="35:29"><name pos:start="35:16" pos:end="35:29"><name pos:start="35:16" pos:end="35:23">vbasedev</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:29">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:28">(<expr pos:start="39:9" pos:end="39:27"><call pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:12">stat</name><argument_list pos:start="39:13" pos:end="39:23">(<argument pos:start="39:14" pos:end="39:17"><expr pos:start="39:14" pos:end="39:17"><name pos:start="39:14" pos:end="39:17">path</name></expr></argument>, <argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><operator pos:start="39:20" pos:end="39:20">&amp;</operator><name pos:start="39:21" pos:end="39:22">st</name></expr></argument>)</argument_list></call> <operator pos:start="39:25" pos:end="39:25">&lt;</operator> <literal type="number" pos:start="39:27" pos:end="39:27">0</literal></expr>)</condition> <block pos:start="39:30" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:22">

        <expr_stmt pos:start="41:9" pos:end="41:67"><expr pos:start="41:9" pos:end="41:66"><call pos:start="41:9" pos:end="41:66"><name pos:start="41:9" pos:end="41:20">error_report</name><argument_list pos:start="41:21" pos:end="41:66">(<argument pos:start="41:22" pos:end="41:59"><expr pos:start="41:22" pos:end="41:59"><literal type="string" pos:start="41:22" pos:end="41:59">"vfio: error: no such host device: %s"</literal></expr></argument>, <argument pos:start="41:62" pos:end="41:65"><expr pos:start="41:62" pos:end="41:65"><name pos:start="41:62" pos:end="41:65">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:22">return <expr pos:start="43:16" pos:end="43:21"><operator pos:start="43:16" pos:end="43:16">-</operator><name pos:start="43:17" pos:end="43:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:49"><expr pos:start="49:5" pos:end="49:48"><call pos:start="49:5" pos:end="49:48"><name pos:start="49:5" pos:end="49:13">g_strlcat</name><argument_list pos:start="49:14" pos:end="49:48">(<argument pos:start="49:15" pos:end="49:18"><expr pos:start="49:15" pos:end="49:18"><name pos:start="49:15" pos:end="49:18">path</name></expr></argument>, <argument pos:start="49:21" pos:end="49:33"><expr pos:start="49:21" pos:end="49:33"><literal type="string" pos:start="49:21" pos:end="49:33">"iommu_group"</literal></expr></argument>, <argument pos:start="49:36" pos:end="49:47"><expr pos:start="49:36" pos:end="49:47"><sizeof pos:start="49:36" pos:end="49:47">sizeof<argument_list pos:start="49:42" pos:end="49:47">(<argument pos:start="49:43" pos:end="49:46"><expr pos:start="49:43" pos:end="49:46"><name pos:start="49:43" pos:end="49:46">path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:69"><expr pos:start="51:5" pos:end="51:68"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:68"><name pos:start="51:11" pos:end="51:18">readlink</name><argument_list pos:start="51:19" pos:end="51:68">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">path</name></expr></argument>, <argument pos:start="51:26" pos:end="51:41"><expr pos:start="51:26" pos:end="51:41"><name pos:start="51:26" pos:end="51:41">iommu_group_path</name></expr></argument>, <argument pos:start="51:44" pos:end="51:67"><expr pos:start="51:44" pos:end="51:67"><sizeof pos:start="51:44" pos:end="51:67">sizeof<argument_list pos:start="51:50" pos:end="51:67">(<argument pos:start="51:51" pos:end="51:66"><expr pos:start="51:51" pos:end="51:66"><name pos:start="51:51" pos:end="51:66">iommu_group_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:51">(<expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:11">len</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal> <operator pos:start="53:17" pos:end="53:18">||</operator> <name pos:start="53:20" pos:end="53:22">len</name> <operator pos:start="53:24" pos:end="53:25">&gt;=</operator> <sizeof pos:start="53:27" pos:end="53:50">sizeof<argument_list pos:start="53:33" pos:end="53:50">(<argument pos:start="53:34" pos:end="53:49"><expr pos:start="53:34" pos:end="53:49"><name pos:start="53:34" pos:end="53:49">iommu_group_path</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="53:53" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:48">

        <expr_stmt pos:start="55:9" pos:end="55:62"><expr pos:start="55:9" pos:end="55:61"><call pos:start="55:9" pos:end="55:61"><name pos:start="55:9" pos:end="55:20">error_report</name><argument_list pos:start="55:21" pos:end="55:61">(<argument pos:start="55:22" pos:end="55:60"><expr pos:start="55:22" pos:end="55:60"><literal type="string" pos:start="55:22" pos:end="55:60">"vfio: error no iommu_group for device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:48">return <expr pos:start="57:16" pos:end="57:47"><ternary pos:start="57:16" pos:end="57:47"><condition pos:start="57:16" pos:end="57:24"><expr pos:start="57:16" pos:end="57:22"><name pos:start="57:16" pos:end="57:18">len</name> <operator pos:start="57:20" pos:end="57:20">&lt;</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr> ?</condition><then pos:start="57:26" pos:end="57:31"> <expr pos:start="57:26" pos:end="57:31"><operator pos:start="57:26" pos:end="57:26">-</operator><name pos:start="57:27" pos:end="57:31">errno</name></expr> </then><else pos:start="57:33" pos:end="57:47">: <expr pos:start="57:35" pos:end="57:47"><operator pos:start="57:35" pos:end="57:35">-</operator><name pos:start="57:36" pos:end="57:47">ENAMETOOLONG</name></expr></else></ternary></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:20">iommu_group_path</name><index pos:start="63:21" pos:end="63:25">[<expr pos:start="63:22" pos:end="63:24"><name pos:start="63:22" pos:end="63:24">len</name></expr>]</index></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <literal type="number" pos:start="63:29" pos:end="63:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:44"><expr pos:start="65:5" pos:end="65:43"><name pos:start="65:5" pos:end="65:14">group_name</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:43"><name pos:start="65:18" pos:end="65:25">basename</name><argument_list pos:start="65:26" pos:end="65:43">(<argument pos:start="65:27" pos:end="65:42"><expr pos:start="65:27" pos:end="65:42"><name pos:start="65:27" pos:end="65:42">iommu_group_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:48">(<expr pos:start="69:9" pos:end="69:47"><call pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:14">sscanf</name><argument_list pos:start="69:15" pos:end="69:42">(<argument pos:start="69:16" pos:end="69:25"><expr pos:start="69:16" pos:end="69:25"><name pos:start="69:16" pos:end="69:25">group_name</name></expr></argument>, <argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><literal type="string" pos:start="69:28" pos:end="69:31">"%d"</literal></expr></argument>, <argument pos:start="69:34" pos:end="69:41"><expr pos:start="69:34" pos:end="69:41"><operator pos:start="69:34" pos:end="69:34">&amp;</operator><name pos:start="69:35" pos:end="69:41">groupid</name></expr></argument>)</argument_list></call> <operator pos:start="69:44" pos:end="69:45">!=</operator> <literal type="number" pos:start="69:47" pos:end="69:47">1</literal></expr>)</condition> <block pos:start="69:50" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:22">

        <expr_stmt pos:start="71:9" pos:end="71:57"><expr pos:start="71:9" pos:end="71:56"><call pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:20">error_report</name><argument_list pos:start="71:21" pos:end="71:56">(<argument pos:start="71:22" pos:end="71:49"><expr pos:start="71:22" pos:end="71:49"><literal type="string" pos:start="71:22" pos:end="71:49">"vfio: error reading %s: %m"</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:55"><expr pos:start="71:52" pos:end="71:55"><name pos:start="71:52" pos:end="71:55">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:22">return <expr pos:start="73:16" pos:end="73:21"><operator pos:start="73:16" pos:end="73:16">-</operator><name pos:start="73:17" pos:end="73:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:66"><expr pos:start="79:5" pos:end="79:65"><call pos:start="79:5" pos:end="79:65"><name pos:start="79:5" pos:end="79:40">trace_vfio_platform_base_device_init</name><argument_list pos:start="79:41" pos:end="79:65">(<argument pos:start="79:42" pos:end="79:55"><expr pos:start="79:42" pos:end="79:55"><name pos:start="79:42" pos:end="79:55"><name pos:start="79:42" pos:end="79:49">vbasedev</name><operator pos:start="79:50" pos:end="79:51">-&gt;</operator><name pos:start="79:52" pos:end="79:55">name</name></name></expr></argument>, <argument pos:start="79:58" pos:end="79:64"><expr pos:start="79:58" pos:end="79:64"><name pos:start="79:58" pos:end="79:64">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:59"><expr pos:start="83:5" pos:end="83:58"><name pos:start="83:5" pos:end="83:9">group</name> <operator pos:start="83:11" pos:end="83:11">=</operator> <call pos:start="83:13" pos:end="83:58"><name pos:start="83:13" pos:end="83:26">vfio_get_group</name><argument_list pos:start="83:27" pos:end="83:58">(<argument pos:start="83:28" pos:end="83:34"><expr pos:start="83:28" pos:end="83:34"><name pos:start="83:28" pos:end="83:34">groupid</name></expr></argument>, <argument pos:start="83:37" pos:end="83:57"><expr pos:start="83:37" pos:end="83:57"><operator pos:start="83:37" pos:end="83:37">&amp;</operator><name pos:start="83:38" pos:end="83:57">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:15">(<expr pos:start="85:9" pos:end="85:14"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:14">group</name></expr>)</condition> <block pos:start="85:17" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:23">

        <expr_stmt pos:start="87:9" pos:end="87:62"><expr pos:start="87:9" pos:end="87:61"><call pos:start="87:9" pos:end="87:61"><name pos:start="87:9" pos:end="87:20">error_report</name><argument_list pos:start="87:21" pos:end="87:61">(<argument pos:start="87:22" pos:end="87:51"><expr pos:start="87:22" pos:end="87:51"><literal type="string" pos:start="87:22" pos:end="87:51">"vfio: failed to get group %d"</literal></expr></argument>, <argument pos:start="87:54" pos:end="87:60"><expr pos:start="87:54" pos:end="87:60"><name pos:start="87:54" pos:end="87:60">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:23">return <expr pos:start="89:16" pos:end="89:22"><operator pos:start="89:16" pos:end="89:16">-</operator><name pos:start="89:17" pos:end="89:22">ENOENT</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:57"><expr pos:start="95:5" pos:end="95:56"><call pos:start="95:5" pos:end="95:56"><name pos:start="95:5" pos:end="95:14">g_snprintf</name><argument_list pos:start="95:15" pos:end="95:56">(<argument pos:start="95:16" pos:end="95:19"><expr pos:start="95:16" pos:end="95:19"><name pos:start="95:16" pos:end="95:19">path</name></expr></argument>, <argument pos:start="95:22" pos:end="95:33"><expr pos:start="95:22" pos:end="95:33"><sizeof pos:start="95:22" pos:end="95:33">sizeof<argument_list pos:start="95:28" pos:end="95:33">(<argument pos:start="95:29" pos:end="95:32"><expr pos:start="95:29" pos:end="95:32"><name pos:start="95:29" pos:end="95:32">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:36" pos:end="95:39"><expr pos:start="95:36" pos:end="95:39"><literal type="string" pos:start="95:36" pos:end="95:39">"%s"</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:55"><expr pos:start="95:42" pos:end="95:55"><name pos:start="95:42" pos:end="95:55"><name pos:start="95:42" pos:end="95:49">vbasedev</name><operator pos:start="95:50" pos:end="95:51">-&gt;</operator><name pos:start="95:52" pos:end="95:55">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="99:5" pos:end="99:59"><name pos:start="99:5" pos:end="99:17">QLIST_FOREACH</name><argument_list pos:start="99:18" pos:end="99:59">(<argument pos:start="99:19" pos:end="99:31">vbasedev_iter</argument>, <argument pos:start="99:34" pos:end="99:52">&amp;group-&gt;device_list</argument>, <argument pos:start="99:55" pos:end="99:58">next</argument>)</argument_list></macro> <block pos:start="99:61" pos:end="111:5">{<block_content pos:start="101:9" pos:end="109:9">

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="109:9">if <condition pos:start="101:12" pos:end="101:61">(<expr pos:start="101:13" pos:end="101:60"><call pos:start="101:13" pos:end="101:55"><name pos:start="101:13" pos:end="101:18">strcmp</name><argument_list pos:start="101:19" pos:end="101:55">(<argument pos:start="101:20" pos:end="101:38"><expr pos:start="101:20" pos:end="101:38"><name pos:start="101:20" pos:end="101:38"><name pos:start="101:20" pos:end="101:32">vbasedev_iter</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:38">name</name></name></expr></argument>, <argument pos:start="101:41" pos:end="101:54"><expr pos:start="101:41" pos:end="101:54"><name pos:start="101:41" pos:end="101:54"><name pos:start="101:41" pos:end="101:48">vbasedev</name><operator pos:start="101:49" pos:end="101:50">-&gt;</operator><name pos:start="101:51" pos:end="101:54">name</name></name></expr></argument>)</argument_list></call> <operator pos:start="101:57" pos:end="101:58">==</operator> <literal type="number" pos:start="101:60" pos:end="101:60">0</literal></expr>)</condition> <block pos:start="101:63" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:26">

            <expr_stmt pos:start="103:13" pos:end="103:77"><expr pos:start="103:13" pos:end="103:76"><call pos:start="103:13" pos:end="103:76"><name pos:start="103:13" pos:end="103:24">error_report</name><argument_list pos:start="103:25" pos:end="103:76">(<argument pos:start="103:26" pos:end="103:69"><expr pos:start="103:26" pos:end="103:69"><literal type="string" pos:start="103:26" pos:end="103:69">"vfio: error: device %s is already attached"</literal></expr></argument>, <argument pos:start="103:72" pos:end="103:75"><expr pos:start="103:72" pos:end="103:75"><name pos:start="103:72" pos:end="103:75">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:34"><expr pos:start="105:13" pos:end="105:33"><call pos:start="105:13" pos:end="105:33"><name pos:start="105:13" pos:end="105:26">vfio_put_group</name><argument_list pos:start="105:27" pos:end="105:33">(<argument pos:start="105:28" pos:end="105:32"><expr pos:start="105:28" pos:end="105:32"><name pos:start="105:28" pos:end="105:32">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:26">return <expr pos:start="107:20" pos:end="107:25"><operator pos:start="107:20" pos:end="107:20">-</operator><name pos:start="107:21" pos:end="107:25">EBUSY</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="113:5" pos:end="113:49"><expr pos:start="113:5" pos:end="113:48"><name pos:start="113:5" pos:end="113:7">ret</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:48"><name pos:start="113:11" pos:end="113:25">vfio_get_device</name><argument_list pos:start="113:26" pos:end="113:48">(<argument pos:start="113:27" pos:end="113:31"><expr pos:start="113:27" pos:end="113:31"><name pos:start="113:27" pos:end="113:31">group</name></expr></argument>, <argument pos:start="113:34" pos:end="113:37"><expr pos:start="113:34" pos:end="113:37"><name pos:start="113:34" pos:end="113:37">path</name></expr></argument>, <argument pos:start="113:40" pos:end="113:47"><expr pos:start="113:40" pos:end="113:47"><name pos:start="113:40" pos:end="113:47">vbasedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:12">(<expr pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">ret</name></expr>)</condition> <block pos:start="115:14" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:19">

        <expr_stmt pos:start="117:9" pos:end="117:60"><expr pos:start="117:9" pos:end="117:59"><call pos:start="117:9" pos:end="117:59"><name pos:start="117:9" pos:end="117:20">error_report</name><argument_list pos:start="117:21" pos:end="117:59">(<argument pos:start="117:22" pos:end="117:52"><expr pos:start="117:22" pos:end="117:52"><literal type="string" pos:start="117:22" pos:end="117:52">"vfio: failed to get device %s"</literal></expr></argument>, <argument pos:start="117:55" pos:end="117:58"><expr pos:start="117:55" pos:end="117:58"><name pos:start="117:55" pos:end="117:58">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:30"><expr pos:start="119:9" pos:end="119:29"><call pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:22">vfio_put_group</name><argument_list pos:start="119:23" pos:end="119:29">(<argument pos:start="119:24" pos:end="119:28"><expr pos:start="119:24" pos:end="119:28"><name pos:start="119:24" pos:end="119:28">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:19">return <expr pos:start="121:16" pos:end="121:18"><name pos:start="121:16" pos:end="121:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:41"><expr pos:start="127:5" pos:end="127:40"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="127:40"><name pos:start="127:11" pos:end="127:30">vfio_populate_device</name><argument_list pos:start="127:31" pos:end="127:40">(<argument pos:start="127:32" pos:end="127:39"><expr pos:start="127:32" pos:end="127:39"><name pos:start="127:32" pos:end="127:39">vbasedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:12">(<expr pos:start="129:9" pos:end="129:11"><name pos:start="129:9" pos:end="129:11">ret</name></expr>)</condition> <block pos:start="129:14" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:30">

        <expr_stmt pos:start="131:9" pos:end="131:65"><expr pos:start="131:9" pos:end="131:64"><call pos:start="131:9" pos:end="131:64"><name pos:start="131:9" pos:end="131:20">error_report</name><argument_list pos:start="131:21" pos:end="131:64">(<argument pos:start="131:22" pos:end="131:57"><expr pos:start="131:22" pos:end="131:57"><literal type="string" pos:start="131:22" pos:end="131:57">"vfio: failed to populate device %s"</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:63"><expr pos:start="131:60" pos:end="131:63"><name pos:start="131:60" pos:end="131:63">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:30"><expr pos:start="133:9" pos:end="133:29"><call pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:22">vfio_put_group</name><argument_list pos:start="133:23" pos:end="133:29">(<argument pos:start="133:24" pos:end="133:28"><expr pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:28">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="139:5" pos:end="139:15">return <expr pos:start="139:12" pos:end="139:14"><name pos:start="139:12" pos:end="139:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
