<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7573.c" pos:tabs="8"><function pos:start="1:1" pos:end="479:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">nvic_writel</name><parameter_list pos:start="1:24" pos:end="1:70">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:33">NVICState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:53">offset</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:63">uint32_t</name></type> <name pos:start="1:65" pos:end="1:69">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="479:1">{<block_content pos:start="5:5" pos:end="477:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:19">s</name><operator pos:start="5:20" pos:end="5:21">-&gt;</operator><name pos:start="5:22" pos:end="5:24">cpu</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="477:5">switch <condition pos:start="9:12" pos:end="9:19">(<expr pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:18">offset</name></expr>)</condition> <block pos:start="9:21" pos:end="477:5">{<block_content pos:start="11:5" pos:end="475:63">

    <case pos:start="11:5" pos:end="11:15">case <expr pos:start="11:10" pos:end="11:14"><literal type="number" pos:start="11:10" pos:end="11:14">0xd04</literal></expr>:</case> <comment type="block" pos:start="11:17" pos:end="11:47">/* Interrupt Control State.  */</comment>

        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if <condition pos:start="13:12" pos:end="13:30">(<expr pos:start="13:13" pos:end="13:29"><name pos:start="13:13" pos:end="13:17">value</name> <operator pos:start="13:19" pos:end="13:19">&amp;</operator> <operator pos:start="13:21" pos:end="13:21">(</operator><literal type="number" pos:start="13:22" pos:end="13:22">1</literal> <operator pos:start="13:24" pos:end="13:25">&lt;&lt;</operator> <literal type="number" pos:start="13:27" pos:end="13:28">31</literal><operator pos:start="13:29" pos:end="13:29">)</operator></expr>)</condition> <block pos:start="13:32" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:56">

            <expr_stmt pos:start="15:13" pos:end="15:56"><expr pos:start="15:13" pos:end="15:55"><call pos:start="15:13" pos:end="15:55"><name pos:start="15:13" pos:end="15:35">armv7m_nvic_set_pending</name><argument_list pos:start="15:36" pos:end="15:55">(<argument pos:start="15:37" pos:end="15:37"><expr pos:start="15:37" pos:end="15:37"><name pos:start="15:37" pos:end="15:37">s</name></expr></argument>, <argument pos:start="15:40" pos:end="15:54"><expr pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:54">ARMV7M_EXCP_NMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:17">value</name> <operator pos:start="19:19" pos:end="19:19">&amp;</operator> <operator pos:start="19:21" pos:end="19:21">(</operator><literal type="number" pos:start="19:22" pos:end="19:22">1</literal> <operator pos:start="19:24" pos:end="19:25">&lt;&lt;</operator> <literal type="number" pos:start="19:27" pos:end="19:28">28</literal><operator pos:start="19:29" pos:end="19:29">)</operator></expr>)</condition> <block pos:start="19:32" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:59">

            <expr_stmt pos:start="21:13" pos:end="21:59"><expr pos:start="21:13" pos:end="21:58"><call pos:start="21:13" pos:end="21:58"><name pos:start="21:13" pos:end="21:35">armv7m_nvic_set_pending</name><argument_list pos:start="21:36" pos:end="21:58">(<argument pos:start="21:37" pos:end="21:37"><expr pos:start="21:37" pos:end="21:37"><name pos:start="21:37" pos:end="21:37">s</name></expr></argument>, <argument pos:start="21:40" pos:end="21:57"><expr pos:start="21:40" pos:end="21:57"><name pos:start="21:40" pos:end="21:57">ARMV7M_EXCP_PENDSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="23:11" pos:end="27:9">else if <condition pos:start="23:19" pos:end="23:37">(<expr pos:start="23:20" pos:end="23:36"><name pos:start="23:20" pos:end="23:24">value</name> <operator pos:start="23:26" pos:end="23:26">&amp;</operator> <operator pos:start="23:28" pos:end="23:28">(</operator><literal type="number" pos:start="23:29" pos:end="23:29">1</literal> <operator pos:start="23:31" pos:end="23:32">&lt;&lt;</operator> <literal type="number" pos:start="23:34" pos:end="23:35">27</literal><operator pos:start="23:36" pos:end="23:36">)</operator></expr>)</condition> <block pos:start="23:39" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:61">

            <expr_stmt pos:start="25:13" pos:end="25:61"><expr pos:start="25:13" pos:end="25:60"><call pos:start="25:13" pos:end="25:60"><name pos:start="25:13" pos:end="25:37">armv7m_nvic_clear_pending</name><argument_list pos:start="25:38" pos:end="25:60">(<argument pos:start="25:39" pos:end="25:39"><expr pos:start="25:39" pos:end="25:39"><name pos:start="25:39" pos:end="25:39">s</name></expr></argument>, <argument pos:start="25:42" pos:end="25:59"><expr pos:start="25:42" pos:end="25:59"><name pos:start="25:42" pos:end="25:59">ARMV7M_EXCP_PENDSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:30">(<expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:17">value</name> <operator pos:start="29:19" pos:end="29:19">&amp;</operator> <operator pos:start="29:21" pos:end="29:21">(</operator><literal type="number" pos:start="29:22" pos:end="29:22">1</literal> <operator pos:start="29:24" pos:end="29:25">&lt;&lt;</operator> <literal type="number" pos:start="29:27" pos:end="29:28">26</literal><operator pos:start="29:29" pos:end="29:29">)</operator></expr>)</condition> <block pos:start="29:32" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:60">

            <expr_stmt pos:start="31:13" pos:end="31:60"><expr pos:start="31:13" pos:end="31:59"><call pos:start="31:13" pos:end="31:59"><name pos:start="31:13" pos:end="31:35">armv7m_nvic_set_pending</name><argument_list pos:start="31:36" pos:end="31:59">(<argument pos:start="31:37" pos:end="31:37"><expr pos:start="31:37" pos:end="31:37"><name pos:start="31:37" pos:end="31:37">s</name></expr></argument>, <argument pos:start="31:40" pos:end="31:58"><expr pos:start="31:40" pos:end="31:58"><name pos:start="31:40" pos:end="31:58">ARMV7M_EXCP_SYSTICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="33:11" pos:end="37:9">else if <condition pos:start="33:19" pos:end="33:37">(<expr pos:start="33:20" pos:end="33:36"><name pos:start="33:20" pos:end="33:24">value</name> <operator pos:start="33:26" pos:end="33:26">&amp;</operator> <operator pos:start="33:28" pos:end="33:28">(</operator><literal type="number" pos:start="33:29" pos:end="33:29">1</literal> <operator pos:start="33:31" pos:end="33:32">&lt;&lt;</operator> <literal type="number" pos:start="33:34" pos:end="33:35">25</literal><operator pos:start="33:36" pos:end="33:36">)</operator></expr>)</condition> <block pos:start="33:39" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:62">

            <expr_stmt pos:start="35:13" pos:end="35:62"><expr pos:start="35:13" pos:end="35:61"><call pos:start="35:13" pos:end="35:61"><name pos:start="35:13" pos:end="35:37">armv7m_nvic_clear_pending</name><argument_list pos:start="35:38" pos:end="35:61">(<argument pos:start="35:39" pos:end="35:39"><expr pos:start="35:39" pos:end="35:39"><name pos:start="35:39" pos:end="35:39">s</name></expr></argument>, <argument pos:start="35:42" pos:end="35:60"><expr pos:start="35:42" pos:end="35:60"><name pos:start="35:42" pos:end="35:60">ARMV7M_EXCP_SYSTICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:15">case <expr pos:start="41:10" pos:end="41:14"><literal type="number" pos:start="41:10" pos:end="41:14">0xd08</literal></expr>:</case> <comment type="block" pos:start="41:17" pos:end="41:43">/* Vector Table Offset.  */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:50"><expr pos:start="43:9" pos:end="43:49"><name pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:11">cpu</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:16">env</name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:20">v7m</name><operator pos:start="43:21" pos:end="43:21">.</operator><name pos:start="43:22" pos:end="43:28">vecbase</name></name> <operator pos:start="43:30" pos:end="43:30">=</operator> <name pos:start="43:32" pos:end="43:36">value</name> <operator pos:start="43:38" pos:end="43:38">&amp;</operator> <literal type="number" pos:start="43:40" pos:end="43:49">0xffffff80</literal></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><literal type="number" pos:start="47:10" pos:end="47:14">0xd0c</literal></expr>:</case> <comment type="block" pos:start="47:17" pos:end="47:59">/* Application Interrupt/Reset Control.  */</comment>

        <if_stmt pos:start="49:9" pos:end="81:9"><if pos:start="49:9" pos:end="81:9">if <condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:18">value</name> <operator pos:start="49:20" pos:end="49:21">&gt;&gt;</operator> <literal type="number" pos:start="49:23" pos:end="49:24">16</literal><operator pos:start="49:25" pos:end="49:25">)</operator> <operator pos:start="49:27" pos:end="49:28">==</operator> <literal type="number" pos:start="49:30" pos:end="49:35">0x05fa</literal></expr>)</condition> <block pos:start="49:38" pos:end="81:9">{<block_content pos:start="51:13" pos:end="79:31">

            <if_stmt pos:start="51:13" pos:end="55:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:26">(<expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:21">value</name> <operator pos:start="51:23" pos:end="51:23">&amp;</operator> <literal type="number" pos:start="51:25" pos:end="51:25">4</literal></expr>)</condition> <block pos:start="51:28" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:47">

                <expr_stmt pos:start="53:17" pos:end="53:47"><expr pos:start="53:17" pos:end="53:46"><call pos:start="53:17" pos:end="53:46"><name pos:start="53:17" pos:end="53:30">qemu_irq_pulse</name><argument_list pos:start="53:31" pos:end="53:46">(<argument pos:start="53:32" pos:end="53:45"><expr pos:start="53:32" pos:end="53:45"><name pos:start="53:32" pos:end="53:45"><name pos:start="53:32" pos:end="53:32">s</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:45">sysresetreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="57:13" pos:end="65:13"><if pos:start="57:13" pos:end="65:13">if <condition pos:start="57:16" pos:end="57:26">(<expr pos:start="57:17" pos:end="57:25"><name pos:start="57:17" pos:end="57:21">value</name> <operator pos:start="57:23" pos:end="57:23">&amp;</operator> <literal type="number" pos:start="57:25" pos:end="57:25">2</literal></expr>)</condition> <block pos:start="57:28" pos:end="65:13">{<block_content pos:start="59:17" pos:end="63:52">

                <expr_stmt pos:start="59:17" pos:end="63:52"><expr pos:start="59:17" pos:end="63:51"><call pos:start="59:17" pos:end="63:51"><name pos:start="59:17" pos:end="59:29">qemu_log_mask</name><argument_list pos:start="59:30" pos:end="63:51">(<argument pos:start="59:31" pos:end="59:45"><expr pos:start="59:31" pos:end="59:45"><name pos:start="59:31" pos:end="59:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="61:31" pos:end="63:50"><expr pos:start="61:31" pos:end="63:50"><literal type="string" pos:start="61:31" pos:end="61:77">"Setting VECTCLRACTIVE when not in DEBUG mode "</literal>

                              <literal type="string" pos:start="63:31" pos:end="63:50">"is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="75:13">if <condition pos:start="67:16" pos:end="67:26">(<expr pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:21">value</name> <operator pos:start="67:23" pos:end="67:23">&amp;</operator> <literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr>)</condition> <block pos:start="67:28" pos:end="75:13">{<block_content pos:start="69:17" pos:end="73:52">

                <expr_stmt pos:start="69:17" pos:end="73:52"><expr pos:start="69:17" pos:end="73:51"><call pos:start="69:17" pos:end="73:51"><name pos:start="69:17" pos:end="69:29">qemu_log_mask</name><argument_list pos:start="69:30" pos:end="73:51">(<argument pos:start="69:31" pos:end="69:45"><expr pos:start="69:31" pos:end="69:45"><name pos:start="69:31" pos:end="69:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="71:31" pos:end="73:50"><expr pos:start="71:31" pos:end="73:50"><literal type="string" pos:start="71:31" pos:end="71:73">"Setting VECTRESET when not in DEBUG mode "</literal>

                              <literal type="string" pos:start="73:31" pos:end="73:50">"is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:49"><expr pos:start="77:13" pos:end="77:48"><name pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:23">prigroup</name></name> <operator pos:start="77:25" pos:end="77:25">=</operator> <call pos:start="77:27" pos:end="77:48"><name pos:start="77:27" pos:end="77:35">extract32</name><argument_list pos:start="77:36" pos:end="77:48">(<argument pos:start="77:37" pos:end="77:41"><expr pos:start="77:37" pos:end="77:41"><name pos:start="77:37" pos:end="77:41">value</name></expr></argument>, <argument pos:start="77:44" pos:end="77:44"><expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">8</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:47"><expr pos:start="77:47" pos:end="77:47"><literal type="number" pos:start="77:47" pos:end="77:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><call pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:27">nvic_irq_update</name><argument_list pos:start="79:28" pos:end="79:30">(<argument pos:start="79:29" pos:end="79:29"><expr pos:start="79:29" pos:end="79:29"><name pos:start="79:29" pos:end="79:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:15">case <expr pos:start="85:10" pos:end="85:14"><literal type="number" pos:start="85:10" pos:end="85:14">0xd10</literal></expr>:</case> <comment type="block" pos:start="85:17" pos:end="85:38">/* System Control.  */</comment>

        <comment type="block" pos:start="87:9" pos:end="87:49">/* TODO: Implement control registers.  */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:62"><expr pos:start="89:9" pos:end="89:61"><call pos:start="89:9" pos:end="89:61"><name pos:start="89:9" pos:end="89:21">qemu_log_mask</name><argument_list pos:start="89:22" pos:end="89:61">(<argument pos:start="89:23" pos:end="89:31"><expr pos:start="89:23" pos:end="89:31"><name pos:start="89:23" pos:end="89:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="89:34" pos:end="89:60"><expr pos:start="89:34" pos:end="89:60"><literal type="string" pos:start="89:34" pos:end="89:60">"NVIC: SCR unimplemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:15">case <expr pos:start="93:10" pos:end="93:14"><literal type="number" pos:start="93:10" pos:end="93:14">0xd14</literal></expr>:</case> <comment type="block" pos:start="93:17" pos:end="93:45">/* Configuration Control.  */</comment>

        <comment type="block" pos:start="95:9" pos:end="95:61">/* Enforce RAZ/WI on reserved and must-RAZ/WI bits */</comment>

        <expr_stmt pos:start="97:9" pos:end="107:49"><expr pos:start="97:9" pos:end="107:48"><name pos:start="97:9" pos:end="97:13">value</name> <operator pos:start="97:15" pos:end="97:16">&amp;=</operator> <operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:41">R_V7M_CCR_STKALIGN_MASK</name> <operator pos:start="97:43" pos:end="97:43">|</operator>

                  <name pos:start="99:19" pos:end="99:42">R_V7M_CCR_BFHFNMIGN_MASK</name> <operator pos:start="99:44" pos:end="99:44">|</operator>

                  <name pos:start="101:19" pos:end="101:42">R_V7M_CCR_DIV_0_TRP_MASK</name> <operator pos:start="101:44" pos:end="101:44">|</operator>

                  <name pos:start="103:19" pos:end="103:44">R_V7M_CCR_UNALIGN_TRP_MASK</name> <operator pos:start="103:46" pos:end="103:46">|</operator>

                  <name pos:start="105:19" pos:end="105:45">R_V7M_CCR_USERSETMPEND_MASK</name> <operator pos:start="105:47" pos:end="105:47">|</operator>

                  <name pos:start="107:19" pos:end="107:47">R_V7M_CCR_NONBASETHRDENA_MASK</name><operator pos:start="107:48" pos:end="107:48">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:33"><expr pos:start="111:9" pos:end="111:32"><name pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:11">cpu</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:16">env</name><operator pos:start="111:17" pos:end="111:17">.</operator><name pos:start="111:18" pos:end="111:20">v7m</name><operator pos:start="111:21" pos:end="111:21">.</operator><name pos:start="111:22" pos:end="111:24">ccr</name></name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:32">value</name></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:15">case <expr pos:start="115:10" pos:end="115:14"><literal type="number" pos:start="115:10" pos:end="115:14">0xd24</literal></expr>:</case> <comment type="block" pos:start="115:17" pos:end="115:46">/* System Handler Control.  */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:69"><expr pos:start="117:9" pos:end="117:68"><name pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:18">vectors</name><index pos:start="117:19" pos:end="117:35">[<expr pos:start="117:20" pos:end="117:34"><name pos:start="117:20" pos:end="117:34">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="117:36" pos:end="117:36">.</operator><name pos:start="117:37" pos:end="117:42">active</name> <operator pos:start="117:44" pos:end="117:44">=</operator> <operator pos:start="117:46" pos:end="117:46">(</operator><name pos:start="117:47" pos:end="117:51">value</name> <operator pos:start="117:53" pos:end="117:53">&amp;</operator> <operator pos:start="117:55" pos:end="117:55">(</operator><literal type="number" pos:start="117:56" pos:end="117:56">1</literal> <operator pos:start="117:58" pos:end="117:59">&lt;&lt;</operator> <literal type="number" pos:start="117:61" pos:end="117:61">0</literal><operator pos:start="117:62" pos:end="117:62">)</operator><operator pos:start="117:63" pos:end="117:63">)</operator> <operator pos:start="117:65" pos:end="117:66">!=</operator> <literal type="number" pos:start="117:68" pos:end="117:68">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:69"><expr pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:35"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:18">vectors</name><index pos:start="119:19" pos:end="119:35">[<expr pos:start="119:20" pos:end="119:34"><name pos:start="119:20" pos:end="119:34">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="119:36" pos:end="119:36">.</operator><name pos:start="119:37" pos:end="119:42">active</name> <operator pos:start="119:44" pos:end="119:44">=</operator> <operator pos:start="119:46" pos:end="119:46">(</operator><name pos:start="119:47" pos:end="119:51">value</name> <operator pos:start="119:53" pos:end="119:53">&amp;</operator> <operator pos:start="119:55" pos:end="119:55">(</operator><literal type="number" pos:start="119:56" pos:end="119:56">1</literal> <operator pos:start="119:58" pos:end="119:59">&lt;&lt;</operator> <literal type="number" pos:start="119:61" pos:end="119:61">1</literal><operator pos:start="119:62" pos:end="119:62">)</operator><operator pos:start="119:63" pos:end="119:63">)</operator> <operator pos:start="119:65" pos:end="119:66">!=</operator> <literal type="number" pos:start="119:68" pos:end="119:68">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:71"><expr pos:start="121:9" pos:end="121:70"><name pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:18">vectors</name><index pos:start="121:19" pos:end="121:37">[<expr pos:start="121:20" pos:end="121:36"><name pos:start="121:20" pos:end="121:36">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="121:38" pos:end="121:38">.</operator><name pos:start="121:39" pos:end="121:44">active</name> <operator pos:start="121:46" pos:end="121:46">=</operator> <operator pos:start="121:48" pos:end="121:48">(</operator><name pos:start="121:49" pos:end="121:53">value</name> <operator pos:start="121:55" pos:end="121:55">&amp;</operator> <operator pos:start="121:57" pos:end="121:57">(</operator><literal type="number" pos:start="121:58" pos:end="121:58">1</literal> <operator pos:start="121:60" pos:end="121:61">&lt;&lt;</operator> <literal type="number" pos:start="121:63" pos:end="121:63">3</literal><operator pos:start="121:64" pos:end="121:64">)</operator><operator pos:start="121:65" pos:end="121:65">)</operator> <operator pos:start="121:67" pos:end="121:68">!=</operator> <literal type="number" pos:start="121:70" pos:end="121:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:69"><expr pos:start="123:9" pos:end="123:68"><name pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:18">vectors</name><index pos:start="123:19" pos:end="123:35">[<expr pos:start="123:20" pos:end="123:34"><name pos:start="123:20" pos:end="123:34">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="123:36" pos:end="123:36">.</operator><name pos:start="123:37" pos:end="123:42">active</name> <operator pos:start="123:44" pos:end="123:44">=</operator> <operator pos:start="123:46" pos:end="123:46">(</operator><name pos:start="123:47" pos:end="123:51">value</name> <operator pos:start="123:53" pos:end="123:53">&amp;</operator> <operator pos:start="123:55" pos:end="123:55">(</operator><literal type="number" pos:start="123:56" pos:end="123:56">1</literal> <operator pos:start="123:58" pos:end="123:59">&lt;&lt;</operator> <literal type="number" pos:start="123:61" pos:end="123:61">7</literal><operator pos:start="123:62" pos:end="123:62">)</operator><operator pos:start="123:63" pos:end="123:63">)</operator> <operator pos:start="123:65" pos:end="123:66">!=</operator> <literal type="number" pos:start="123:68" pos:end="123:68">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:71"><expr pos:start="125:9" pos:end="125:70"><name pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:18">vectors</name><index pos:start="125:19" pos:end="125:37">[<expr pos:start="125:20" pos:end="125:36"><name pos:start="125:20" pos:end="125:36">ARMV7M_EXCP_DEBUG</name></expr>]</index></name><operator pos:start="125:38" pos:end="125:38">.</operator><name pos:start="125:39" pos:end="125:44">active</name> <operator pos:start="125:46" pos:end="125:46">=</operator> <operator pos:start="125:48" pos:end="125:48">(</operator><name pos:start="125:49" pos:end="125:53">value</name> <operator pos:start="125:55" pos:end="125:55">&amp;</operator> <operator pos:start="125:57" pos:end="125:57">(</operator><literal type="number" pos:start="125:58" pos:end="125:58">1</literal> <operator pos:start="125:60" pos:end="125:61">&lt;&lt;</operator> <literal type="number" pos:start="125:63" pos:end="125:63">8</literal><operator pos:start="125:64" pos:end="125:64">)</operator><operator pos:start="125:65" pos:end="125:65">)</operator> <operator pos:start="125:67" pos:end="125:68">!=</operator> <literal type="number" pos:start="125:70" pos:end="125:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:73"><expr pos:start="127:9" pos:end="127:72"><name pos:start="127:9" pos:end="127:38"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:18">vectors</name><index pos:start="127:19" pos:end="127:38">[<expr pos:start="127:20" pos:end="127:37"><name pos:start="127:20" pos:end="127:37">ARMV7M_EXCP_PENDSV</name></expr>]</index></name><operator pos:start="127:39" pos:end="127:39">.</operator><name pos:start="127:40" pos:end="127:45">active</name> <operator pos:start="127:47" pos:end="127:47">=</operator> <operator pos:start="127:49" pos:end="127:49">(</operator><name pos:start="127:50" pos:end="127:54">value</name> <operator pos:start="127:56" pos:end="127:56">&amp;</operator> <operator pos:start="127:58" pos:end="127:58">(</operator><literal type="number" pos:start="127:59" pos:end="127:59">1</literal> <operator pos:start="127:61" pos:end="127:62">&lt;&lt;</operator> <literal type="number" pos:start="127:64" pos:end="127:65">10</literal><operator pos:start="127:66" pos:end="127:66">)</operator><operator pos:start="127:67" pos:end="127:67">)</operator> <operator pos:start="127:69" pos:end="127:70">!=</operator> <literal type="number" pos:start="127:72" pos:end="127:72">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:74"><expr pos:start="129:9" pos:end="129:73"><name pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">vectors</name><index pos:start="129:19" pos:end="129:39">[<expr pos:start="129:20" pos:end="129:38"><name pos:start="129:20" pos:end="129:38">ARMV7M_EXCP_SYSTICK</name></expr>]</index></name><operator pos:start="129:40" pos:end="129:40">.</operator><name pos:start="129:41" pos:end="129:46">active</name> <operator pos:start="129:48" pos:end="129:48">=</operator> <operator pos:start="129:50" pos:end="129:50">(</operator><name pos:start="129:51" pos:end="129:55">value</name> <operator pos:start="129:57" pos:end="129:57">&amp;</operator> <operator pos:start="129:59" pos:end="129:59">(</operator><literal type="number" pos:start="129:60" pos:end="129:60">1</literal> <operator pos:start="129:62" pos:end="129:63">&lt;&lt;</operator> <literal type="number" pos:start="129:65" pos:end="129:66">11</literal><operator pos:start="129:67" pos:end="129:67">)</operator><operator pos:start="129:68" pos:end="129:68">)</operator> <operator pos:start="129:70" pos:end="129:71">!=</operator> <literal type="number" pos:start="129:73" pos:end="129:73">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:73"><expr pos:start="131:9" pos:end="131:72"><name pos:start="131:9" pos:end="131:37"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:18">vectors</name><index pos:start="131:19" pos:end="131:37">[<expr pos:start="131:20" pos:end="131:36"><name pos:start="131:20" pos:end="131:36">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="131:38" pos:end="131:38">.</operator><name pos:start="131:39" pos:end="131:45">pending</name> <operator pos:start="131:47" pos:end="131:47">=</operator> <operator pos:start="131:49" pos:end="131:49">(</operator><name pos:start="131:50" pos:end="131:54">value</name> <operator pos:start="131:56" pos:end="131:56">&amp;</operator> <operator pos:start="131:58" pos:end="131:58">(</operator><literal type="number" pos:start="131:59" pos:end="131:59">1</literal> <operator pos:start="131:61" pos:end="131:62">&lt;&lt;</operator> <literal type="number" pos:start="131:64" pos:end="131:65">12</literal><operator pos:start="131:66" pos:end="131:66">)</operator><operator pos:start="131:67" pos:end="131:67">)</operator> <operator pos:start="131:69" pos:end="131:70">!=</operator> <literal type="number" pos:start="131:72" pos:end="131:72">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:71"><expr pos:start="133:9" pos:end="133:70"><name pos:start="133:9" pos:end="133:35"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:18">vectors</name><index pos:start="133:19" pos:end="133:35">[<expr pos:start="133:20" pos:end="133:34"><name pos:start="133:20" pos:end="133:34">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="133:36" pos:end="133:36">.</operator><name pos:start="133:37" pos:end="133:43">pending</name> <operator pos:start="133:45" pos:end="133:45">=</operator> <operator pos:start="133:47" pos:end="133:47">(</operator><name pos:start="133:48" pos:end="133:52">value</name> <operator pos:start="133:54" pos:end="133:54">&amp;</operator> <operator pos:start="133:56" pos:end="133:56">(</operator><literal type="number" pos:start="133:57" pos:end="133:57">1</literal> <operator pos:start="133:59" pos:end="133:60">&lt;&lt;</operator> <literal type="number" pos:start="133:62" pos:end="133:63">13</literal><operator pos:start="133:64" pos:end="133:64">)</operator><operator pos:start="133:65" pos:end="133:65">)</operator> <operator pos:start="133:67" pos:end="133:68">!=</operator> <literal type="number" pos:start="133:70" pos:end="133:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:18">vectors</name><index pos:start="135:19" pos:end="135:35">[<expr pos:start="135:20" pos:end="135:34"><name pos:start="135:20" pos:end="135:34">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="135:36" pos:end="135:36">.</operator><name pos:start="135:37" pos:end="135:43">pending</name> <operator pos:start="135:45" pos:end="135:45">=</operator> <operator pos:start="135:47" pos:end="135:47">(</operator><name pos:start="135:48" pos:end="135:52">value</name> <operator pos:start="135:54" pos:end="135:54">&amp;</operator> <operator pos:start="135:56" pos:end="135:56">(</operator><literal type="number" pos:start="135:57" pos:end="135:57">1</literal> <operator pos:start="135:59" pos:end="135:60">&lt;&lt;</operator> <literal type="number" pos:start="135:62" pos:end="135:63">14</literal><operator pos:start="135:64" pos:end="135:64">)</operator><operator pos:start="135:65" pos:end="135:65">)</operator> <operator pos:start="135:67" pos:end="135:68">!=</operator> <literal type="number" pos:start="135:70" pos:end="135:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:71"><expr pos:start="137:9" pos:end="137:70"><name pos:start="137:9" pos:end="137:35"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">vectors</name><index pos:start="137:19" pos:end="137:35">[<expr pos:start="137:20" pos:end="137:34"><name pos:start="137:20" pos:end="137:34">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="137:36" pos:end="137:36">.</operator><name pos:start="137:37" pos:end="137:43">pending</name> <operator pos:start="137:45" pos:end="137:45">=</operator> <operator pos:start="137:47" pos:end="137:47">(</operator><name pos:start="137:48" pos:end="137:52">value</name> <operator pos:start="137:54" pos:end="137:54">&amp;</operator> <operator pos:start="137:56" pos:end="137:56">(</operator><literal type="number" pos:start="137:57" pos:end="137:57">1</literal> <operator pos:start="137:59" pos:end="137:60">&lt;&lt;</operator> <literal type="number" pos:start="137:62" pos:end="137:63">15</literal><operator pos:start="137:64" pos:end="137:64">)</operator><operator pos:start="137:65" pos:end="137:65">)</operator> <operator pos:start="137:67" pos:end="137:68">!=</operator> <literal type="number" pos:start="137:70" pos:end="137:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:71"><expr pos:start="139:9" pos:end="139:70"><name pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:18">vectors</name><index pos:start="139:19" pos:end="139:35">[<expr pos:start="139:20" pos:end="139:34"><name pos:start="139:20" pos:end="139:34">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="139:36" pos:end="139:36">.</operator><name pos:start="139:37" pos:end="139:43">enabled</name> <operator pos:start="139:45" pos:end="139:45">=</operator> <operator pos:start="139:47" pos:end="139:47">(</operator><name pos:start="139:48" pos:end="139:52">value</name> <operator pos:start="139:54" pos:end="139:54">&amp;</operator> <operator pos:start="139:56" pos:end="139:56">(</operator><literal type="number" pos:start="139:57" pos:end="139:57">1</literal> <operator pos:start="139:59" pos:end="139:60">&lt;&lt;</operator> <literal type="number" pos:start="139:62" pos:end="139:63">16</literal><operator pos:start="139:64" pos:end="139:64">)</operator><operator pos:start="139:65" pos:end="139:65">)</operator> <operator pos:start="139:67" pos:end="139:68">!=</operator> <literal type="number" pos:start="139:70" pos:end="139:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:71"><expr pos:start="141:9" pos:end="141:70"><name pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:18">vectors</name><index pos:start="141:19" pos:end="141:35">[<expr pos:start="141:20" pos:end="141:34"><name pos:start="141:20" pos:end="141:34">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="141:36" pos:end="141:36">.</operator><name pos:start="141:37" pos:end="141:43">enabled</name> <operator pos:start="141:45" pos:end="141:45">=</operator> <operator pos:start="141:47" pos:end="141:47">(</operator><name pos:start="141:48" pos:end="141:52">value</name> <operator pos:start="141:54" pos:end="141:54">&amp;</operator> <operator pos:start="141:56" pos:end="141:56">(</operator><literal type="number" pos:start="141:57" pos:end="141:57">1</literal> <operator pos:start="141:59" pos:end="141:60">&lt;&lt;</operator> <literal type="number" pos:start="141:62" pos:end="141:63">17</literal><operator pos:start="141:64" pos:end="141:64">)</operator><operator pos:start="141:65" pos:end="141:65">)</operator> <operator pos:start="141:67" pos:end="141:68">!=</operator> <literal type="number" pos:start="141:70" pos:end="141:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:73"><expr pos:start="143:9" pos:end="143:72"><name pos:start="143:9" pos:end="143:37"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:18">vectors</name><index pos:start="143:19" pos:end="143:37">[<expr pos:start="143:20" pos:end="143:36"><name pos:start="143:20" pos:end="143:36">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="143:38" pos:end="143:38">.</operator><name pos:start="143:39" pos:end="143:45">enabled</name> <operator pos:start="143:47" pos:end="143:47">=</operator> <operator pos:start="143:49" pos:end="143:49">(</operator><name pos:start="143:50" pos:end="143:54">value</name> <operator pos:start="143:56" pos:end="143:56">&amp;</operator> <operator pos:start="143:58" pos:end="143:58">(</operator><literal type="number" pos:start="143:59" pos:end="143:59">1</literal> <operator pos:start="143:61" pos:end="143:62">&lt;&lt;</operator> <literal type="number" pos:start="143:64" pos:end="143:65">18</literal><operator pos:start="143:66" pos:end="143:66">)</operator><operator pos:start="143:67" pos:end="143:67">)</operator> <operator pos:start="143:69" pos:end="143:70">!=</operator> <literal type="number" pos:start="143:72" pos:end="143:72">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:27"><expr pos:start="145:9" pos:end="145:26"><call pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:23">nvic_irq_update</name><argument_list pos:start="145:24" pos:end="145:26">(<argument pos:start="145:25" pos:end="145:25"><expr pos:start="145:25" pos:end="145:25"><name pos:start="145:25" pos:end="145:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <case pos:start="149:5" pos:end="149:15">case <expr pos:start="149:10" pos:end="149:14"><literal type="number" pos:start="149:10" pos:end="149:14">0xd28</literal></expr>:</case> <comment type="block" pos:start="149:17" pos:end="149:49">/* Configurable Fault Status.  */</comment>

        <expr_stmt pos:start="151:9" pos:end="151:36"><expr pos:start="151:9" pos:end="151:35"><name pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:11">cpu</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:16">env</name><operator pos:start="151:17" pos:end="151:17">.</operator><name pos:start="151:18" pos:end="151:20">v7m</name><operator pos:start="151:21" pos:end="151:21">.</operator><name pos:start="151:22" pos:end="151:25">cfsr</name></name> <operator pos:start="151:27" pos:end="151:28">&amp;=</operator> <operator pos:start="151:30" pos:end="151:30">~</operator><name pos:start="151:31" pos:end="151:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="151:38" pos:end="151:46">/* W1C */</comment>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:15">case <expr pos:start="155:10" pos:end="155:14"><literal type="number" pos:start="155:10" pos:end="155:14">0xd2c</literal></expr>:</case> <comment type="block" pos:start="155:17" pos:end="155:41">/* Hard Fault Status.  */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:36"><expr pos:start="157:9" pos:end="157:35"><name pos:start="157:9" pos:end="157:25"><name pos:start="157:9" pos:end="157:11">cpu</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:16">env</name><operator pos:start="157:17" pos:end="157:17">.</operator><name pos:start="157:18" pos:end="157:20">v7m</name><operator pos:start="157:21" pos:end="157:21">.</operator><name pos:start="157:22" pos:end="157:25">hfsr</name></name> <operator pos:start="157:27" pos:end="157:28">&amp;=</operator> <operator pos:start="157:30" pos:end="157:30">~</operator><name pos:start="157:31" pos:end="157:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="157:38" pos:end="157:46">/* W1C */</comment>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:15">case <expr pos:start="161:10" pos:end="161:14"><literal type="number" pos:start="161:10" pos:end="161:14">0xd30</literal></expr>:</case> <comment type="block" pos:start="161:17" pos:end="161:42">/* Debug Fault Status.  */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:36"><expr pos:start="163:9" pos:end="163:35"><name pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:11">cpu</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:16">env</name><operator pos:start="163:17" pos:end="163:17">.</operator><name pos:start="163:18" pos:end="163:20">v7m</name><operator pos:start="163:21" pos:end="163:21">.</operator><name pos:start="163:22" pos:end="163:25">dfsr</name></name> <operator pos:start="163:27" pos:end="163:28">&amp;=</operator> <operator pos:start="163:30" pos:end="163:30">~</operator><name pos:start="163:31" pos:end="163:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="163:38" pos:end="163:46">/* W1C */</comment>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:15">case <expr pos:start="167:10" pos:end="167:14"><literal type="number" pos:start="167:10" pos:end="167:14">0xd34</literal></expr>:</case> <comment type="block" pos:start="167:17" pos:end="167:42">/* Mem Manage Address.  */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:35"><expr pos:start="169:9" pos:end="169:34"><name pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:11">cpu</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:16">env</name><operator pos:start="169:17" pos:end="169:17">.</operator><name pos:start="169:18" pos:end="169:20">v7m</name><operator pos:start="169:21" pos:end="169:21">.</operator><name pos:start="169:22" pos:end="169:26">mmfar</name></name> <operator pos:start="169:28" pos:end="169:28">=</operator> <name pos:start="169:30" pos:end="169:34">value</name></expr>;</expr_stmt>

        <return pos:start="171:9" pos:end="171:15">return;</return>

    <case pos:start="173:5" pos:end="173:15">case <expr pos:start="173:10" pos:end="173:14"><literal type="number" pos:start="173:10" pos:end="173:14">0xd38</literal></expr>:</case> <comment type="block" pos:start="173:17" pos:end="173:41">/* Bus Fault Address.  */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:25"><name pos:start="175:9" pos:end="175:11">cpu</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:16">env</name><operator pos:start="175:17" pos:end="175:17">.</operator><name pos:start="175:18" pos:end="175:20">v7m</name><operator pos:start="175:21" pos:end="175:21">.</operator><name pos:start="175:22" pos:end="175:25">bfar</name></name> <operator pos:start="175:27" pos:end="175:27">=</operator> <name pos:start="175:29" pos:end="175:33">value</name></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:15">return;</return>

    <case pos:start="179:5" pos:end="179:15">case <expr pos:start="179:10" pos:end="179:14"><literal type="number" pos:start="179:10" pos:end="179:14">0xd3c</literal></expr>:</case> <comment type="block" pos:start="179:17" pos:end="179:40">/* Aux Fault Status.  */</comment>

        <expr_stmt pos:start="181:9" pos:end="183:74"><expr pos:start="181:9" pos:end="183:73"><call pos:start="181:9" pos:end="183:73"><name pos:start="181:9" pos:end="181:21">qemu_log_mask</name><argument_list pos:start="181:22" pos:end="183:73">(<argument pos:start="181:23" pos:end="181:31"><expr pos:start="181:23" pos:end="181:31"><name pos:start="181:23" pos:end="181:31">LOG_UNIMP</name></expr></argument>,

                      <argument pos:start="183:23" pos:end="183:72"><expr pos:start="183:23" pos:end="183:72"><literal type="string" pos:start="183:23" pos:end="183:72">"NVIC: Aux fault status registers unimplemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    <case pos:start="187:5" pos:end="187:15">case <expr pos:start="187:10" pos:end="187:14"><literal type="number" pos:start="187:10" pos:end="187:14">0xd90</literal></expr>:</case> <comment type="block" pos:start="187:17" pos:end="187:30">/* MPU_TYPE */</comment>

        <return pos:start="189:9" pos:end="189:15">return;</return> <comment type="block" pos:start="189:17" pos:end="189:24">/* RO */</comment>

    <case pos:start="191:5" pos:end="191:15">case <expr pos:start="191:10" pos:end="191:14"><literal type="number" pos:start="191:10" pos:end="191:14">0xd94</literal></expr>:</case> <comment type="block" pos:start="191:17" pos:end="191:30">/* MPU_CTRL */</comment>

        <if_stmt pos:start="193:9" pos:end="203:9"><if pos:start="193:9" pos:end="203:9">if <condition pos:start="193:12" pos:end="197:44">(<expr pos:start="193:13" pos:end="197:43"><operator pos:start="193:13" pos:end="193:13">(</operator><name pos:start="193:14" pos:end="193:18">value</name> <operator pos:start="193:20" pos:end="193:20">&amp;</operator>

             <operator pos:start="195:14" pos:end="195:14">(</operator><name pos:start="195:15" pos:end="195:42">R_V7M_MPU_CTRL_HFNMIENA_MASK</name> <operator pos:start="195:44" pos:end="195:44">|</operator> <name pos:start="195:46" pos:end="195:71">R_V7M_MPU_CTRL_ENABLE_MASK</name><operator pos:start="195:72" pos:end="195:72">)</operator><operator pos:start="195:73" pos:end="195:73">)</operator>

            <operator pos:start="197:13" pos:end="197:14">==</operator> <name pos:start="197:16" pos:end="197:43">R_V7M_MPU_CTRL_HFNMIENA_MASK</name></expr>)</condition> <block pos:start="197:46" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:45">

            <expr_stmt pos:start="199:13" pos:end="201:45"><expr pos:start="199:13" pos:end="201:44"><call pos:start="199:13" pos:end="201:44"><name pos:start="199:13" pos:end="199:25">qemu_log_mask</name><argument_list pos:start="199:26" pos:end="201:44">(<argument pos:start="199:27" pos:end="199:41"><expr pos:start="199:27" pos:end="199:41"><name pos:start="199:27" pos:end="199:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="199:44" pos:end="201:43"><expr pos:start="199:44" pos:end="201:43"><literal type="string" pos:start="199:44" pos:end="199:79">"MPU_CTRL: HFNMIENA and !ENABLE is "</literal>

                          <literal type="string" pos:start="201:27" pos:end="201:43">"UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="209:73"><expr pos:start="205:9" pos:end="209:72"><name pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:11">cpu</name><operator pos:start="205:12" pos:end="205:13">-&gt;</operator><name pos:start="205:14" pos:end="205:16">env</name><operator pos:start="205:17" pos:end="205:17">.</operator><name pos:start="205:18" pos:end="205:20">v7m</name><operator pos:start="205:21" pos:end="205:21">.</operator><name pos:start="205:22" pos:end="205:29">mpu_ctrl</name></name> <operator pos:start="205:31" pos:end="205:31">=</operator> <name pos:start="205:33" pos:end="205:37">value</name> <operator pos:start="205:39" pos:end="205:39">&amp;</operator> <operator pos:start="205:41" pos:end="205:41">(</operator><name pos:start="205:42" pos:end="205:67">R_V7M_MPU_CTRL_ENABLE_MASK</name> <operator pos:start="205:69" pos:end="205:69">|</operator>

                                         <name pos:start="207:42" pos:end="207:69">R_V7M_MPU_CTRL_HFNMIENA_MASK</name> <operator pos:start="207:71" pos:end="207:71">|</operator>

                                         <name pos:start="209:42" pos:end="209:71">R_V7M_MPU_CTRL_PRIVDEFENA_MASK</name><operator pos:start="209:72" pos:end="209:72">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:28"><expr pos:start="211:9" pos:end="211:27"><call pos:start="211:9" pos:end="211:27"><name pos:start="211:9" pos:end="211:17">tlb_flush</name><argument_list pos:start="211:18" pos:end="211:27">(<argument pos:start="211:19" pos:end="211:26"><expr pos:start="211:19" pos:end="211:26"><call pos:start="211:19" pos:end="211:26"><name pos:start="211:19" pos:end="211:21">CPU</name><argument_list pos:start="211:22" pos:end="211:26">(<argument pos:start="211:23" pos:end="211:25"><expr pos:start="211:23" pos:end="211:25"><name pos:start="211:23" pos:end="211:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:15">case <expr pos:start="215:10" pos:end="215:14"><literal type="number" pos:start="215:10" pos:end="215:14">0xd98</literal></expr>:</case> <comment type="block" pos:start="215:17" pos:end="215:29">/* MPU_RNR */</comment>

        <if_stmt pos:start="217:9" pos:end="229:9"><if pos:start="217:9" pos:end="225:9">if <condition pos:start="217:12" pos:end="217:41">(<expr pos:start="217:13" pos:end="217:40"><name pos:start="217:13" pos:end="217:17">value</name> <operator pos:start="217:19" pos:end="217:20">&gt;=</operator> <name pos:start="217:22" pos:end="217:40"><name pos:start="217:22" pos:end="217:24">cpu</name><operator pos:start="217:25" pos:end="217:26">-&gt;</operator><name pos:start="217:27" pos:end="217:40">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="217:43" pos:end="225:9">{<block_content pos:start="219:13" pos:end="223:54">

            <expr_stmt pos:start="219:13" pos:end="223:54"><expr pos:start="219:13" pos:end="223:53"><call pos:start="219:13" pos:end="223:53"><name pos:start="219:13" pos:end="219:25">qemu_log_mask</name><argument_list pos:start="219:26" pos:end="223:53">(<argument pos:start="219:27" pos:end="219:41"><expr pos:start="219:27" pos:end="219:41"><name pos:start="219:27" pos:end="219:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="219:44" pos:end="221:49"><expr pos:start="219:44" pos:end="221:49"><literal type="string" pos:start="219:44" pos:end="219:70">"MPU region out of range %"</literal>

                          <name pos:start="221:27" pos:end="221:32">PRIu32</name> <literal type="string" pos:start="221:34" pos:end="221:37">"/%"</literal> <name pos:start="221:39" pos:end="221:44">PRIu32</name> <literal type="string" pos:start="221:46" pos:end="221:49">"\n"</literal></expr></argument>,

                          <argument pos:start="223:27" pos:end="223:31"><expr pos:start="223:27" pos:end="223:31"><name pos:start="223:27" pos:end="223:31">value</name></expr></argument>, <argument pos:start="223:34" pos:end="223:52"><expr pos:start="223:34" pos:end="223:52"><name pos:start="223:34" pos:end="223:52"><name pos:start="223:34" pos:end="223:36">cpu</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:52">pmsav7_dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="225:11" pos:end="229:9">else <block pos:start="225:16" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:40">

            <expr_stmt pos:start="227:13" pos:end="227:40"><expr pos:start="227:13" pos:end="227:39"><name pos:start="227:13" pos:end="227:31"><name pos:start="227:13" pos:end="227:15">cpu</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:20">env</name><operator pos:start="227:21" pos:end="227:21">.</operator><name pos:start="227:22" pos:end="227:27">pmsav7</name><operator pos:start="227:28" pos:end="227:28">.</operator><name pos:start="227:29" pos:end="227:31">rnr</name></name> <operator pos:start="227:33" pos:end="227:33">=</operator> <name pos:start="227:35" pos:end="227:39">value</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="231:9" pos:end="231:14">break;</break>

    <case pos:start="233:5" pos:end="233:15">case <expr pos:start="233:10" pos:end="233:14"><literal type="number" pos:start="233:10" pos:end="233:14">0xd9c</literal></expr>:</case> <comment type="block" pos:start="233:17" pos:end="233:30">/* MPU_RBAR */</comment>

    <case pos:start="235:5" pos:end="235:15">case <expr pos:start="235:10" pos:end="235:14"><literal type="number" pos:start="235:10" pos:end="235:14">0xda4</literal></expr>:</case> <comment type="block" pos:start="235:17" pos:end="235:33">/* MPU_RBAR_A1 */</comment>

    <case pos:start="237:5" pos:end="237:15">case <expr pos:start="237:10" pos:end="237:14"><literal type="number" pos:start="237:10" pos:end="237:14">0xdac</literal></expr>:</case> <comment type="block" pos:start="237:17" pos:end="237:33">/* MPU_RBAR_A2 */</comment>

    <case pos:start="239:5" pos:end="239:15">case <expr pos:start="239:10" pos:end="239:14"><literal type="number" pos:start="239:10" pos:end="239:14">0xdb4</literal></expr>:</case> <comment type="block" pos:start="239:17" pos:end="239:33">/* MPU_RBAR_A3 */</comment>

    <block pos:start="241:5" pos:end="333:5">{<block_content pos:start="243:9" pos:end="331:14">

        <decl_stmt pos:start="243:9" pos:end="243:19"><decl pos:start="243:9" pos:end="243:18"><type pos:start="243:9" pos:end="243:11"><name pos:start="243:9" pos:end="243:11">int</name></type> <name pos:start="243:13" pos:end="243:18">region</name></decl>;</decl_stmt>



        <if_stmt pos:start="247:9" pos:end="283:9"><if pos:start="247:9" pos:end="283:9">if <condition pos:start="247:12" pos:end="247:51">(<expr pos:start="247:13" pos:end="247:50"><call pos:start="247:13" pos:end="247:50"><name pos:start="247:13" pos:end="247:23">arm_feature</name><argument_list pos:start="247:24" pos:end="247:50">(<argument pos:start="247:25" pos:end="247:33"><expr pos:start="247:25" pos:end="247:33"><operator pos:start="247:25" pos:end="247:25">&amp;</operator><name pos:start="247:26" pos:end="247:33"><name pos:start="247:26" pos:end="247:28">cpu</name><operator pos:start="247:29" pos:end="247:30">-&gt;</operator><name pos:start="247:31" pos:end="247:33">env</name></name></expr></argument>, <argument pos:start="247:36" pos:end="247:49"><expr pos:start="247:36" pos:end="247:49"><name pos:start="247:36" pos:end="247:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:53" pos:end="283:9">{<block_content pos:start="259:13" pos:end="281:19">

            <comment type="block" pos:start="249:13" pos:end="257:15">/* PMSAv8M handling of the aliases is different from v7M:

             * aliases A1, A2, A3 override the low two bits of the region

             * number in MPU_RNR, and there is no 'region' field in the

             * RBAR register.

             */</comment>

            <decl_stmt pos:start="259:13" pos:end="259:47"><decl pos:start="259:13" pos:end="259:46"><type pos:start="259:13" pos:end="259:15"><name pos:start="259:13" pos:end="259:15">int</name></type> <name pos:start="259:17" pos:end="259:23">aliasno</name> <init pos:start="259:25" pos:end="259:46">= <expr pos:start="259:27" pos:end="259:46"><operator pos:start="259:27" pos:end="259:27">(</operator><name pos:start="259:28" pos:end="259:33">offset</name> <operator pos:start="259:35" pos:end="259:35">-</operator> <literal type="number" pos:start="259:37" pos:end="259:41">0xd9c</literal><operator pos:start="259:42" pos:end="259:42">)</operator> <operator pos:start="259:44" pos:end="259:44">/</operator> <literal type="number" pos:start="259:46" pos:end="259:46">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="259:49" pos:end="259:58">/* 0..3 */</comment>



            <expr_stmt pos:start="263:13" pos:end="263:41"><expr pos:start="263:13" pos:end="263:40"><name pos:start="263:13" pos:end="263:18">region</name> <operator pos:start="263:20" pos:end="263:20">=</operator> <name pos:start="263:22" pos:end="263:40"><name pos:start="263:22" pos:end="263:24">cpu</name><operator pos:start="263:25" pos:end="263:26">-&gt;</operator><name pos:start="263:27" pos:end="263:29">env</name><operator pos:start="263:30" pos:end="263:30">.</operator><name pos:start="263:31" pos:end="263:36">pmsav7</name><operator pos:start="263:37" pos:end="263:37">.</operator><name pos:start="263:38" pos:end="263:40">rnr</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="265:13" pos:end="269:13"><if pos:start="265:13" pos:end="269:13">if <condition pos:start="265:16" pos:end="265:24">(<expr pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:23">aliasno</name></expr>)</condition> <block pos:start="265:26" pos:end="269:13">{<block_content pos:start="267:17" pos:end="267:58">

                <expr_stmt pos:start="267:17" pos:end="267:58"><expr pos:start="267:17" pos:end="267:57"><name pos:start="267:17" pos:end="267:22">region</name> <operator pos:start="267:24" pos:end="267:24">=</operator> <call pos:start="267:26" pos:end="267:57"><name pos:start="267:26" pos:end="267:34">deposit32</name><argument_list pos:start="267:35" pos:end="267:57">(<argument pos:start="267:36" pos:end="267:41"><expr pos:start="267:36" pos:end="267:41"><name pos:start="267:36" pos:end="267:41">region</name></expr></argument>, <argument pos:start="267:44" pos:end="267:44"><expr pos:start="267:44" pos:end="267:44"><literal type="number" pos:start="267:44" pos:end="267:44">0</literal></expr></argument>, <argument pos:start="267:47" pos:end="267:47"><expr pos:start="267:47" pos:end="267:47"><literal type="number" pos:start="267:47" pos:end="267:47">2</literal></expr></argument>, <argument pos:start="267:50" pos:end="267:56"><expr pos:start="267:50" pos:end="267:56"><name pos:start="267:50" pos:end="267:56">aliasno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="271:13" pos:end="275:13"><if pos:start="271:13" pos:end="275:13">if <condition pos:start="271:16" pos:end="271:46">(<expr pos:start="271:17" pos:end="271:45"><name pos:start="271:17" pos:end="271:22">region</name> <operator pos:start="271:24" pos:end="271:25">&gt;=</operator> <name pos:start="271:27" pos:end="271:45"><name pos:start="271:27" pos:end="271:29">cpu</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="271:48" pos:end="275:13">{<block_content pos:start="273:17" pos:end="273:23">

                <return pos:start="273:17" pos:end="273:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:49"><expr pos:start="277:13" pos:end="277:48"><name pos:start="277:13" pos:end="277:40"><name pos:start="277:13" pos:end="277:15">cpu</name><operator pos:start="277:16" pos:end="277:17">-&gt;</operator><name pos:start="277:18" pos:end="277:20">env</name><operator pos:start="277:21" pos:end="277:21">.</operator><name pos:start="277:22" pos:end="277:27">pmsav8</name><operator pos:start="277:28" pos:end="277:28">.</operator><name pos:start="277:29" pos:end="277:32">rbar</name><index pos:start="277:33" pos:end="277:40">[<expr pos:start="277:34" pos:end="277:39"><name pos:start="277:34" pos:end="277:39">region</name></expr>]</index></name> <operator pos:start="277:42" pos:end="277:42">=</operator> <name pos:start="277:44" pos:end="277:48">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:32"><expr pos:start="279:13" pos:end="279:31"><call pos:start="279:13" pos:end="279:31"><name pos:start="279:13" pos:end="279:21">tlb_flush</name><argument_list pos:start="279:22" pos:end="279:31">(<argument pos:start="279:23" pos:end="279:30"><expr pos:start="279:23" pos:end="279:30"><call pos:start="279:23" pos:end="279:30"><name pos:start="279:23" pos:end="279:25">CPU</name><argument_list pos:start="279:26" pos:end="279:30">(<argument pos:start="279:27" pos:end="279:29"><expr pos:start="279:27" pos:end="279:29"><name pos:start="279:27" pos:end="279:29">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="281:13" pos:end="281:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="287:9" pos:end="315:9"><if pos:start="287:9" pos:end="311:9">if <condition pos:start="287:12" pos:end="287:29">(<expr pos:start="287:13" pos:end="287:28"><name pos:start="287:13" pos:end="287:17">value</name> <operator pos:start="287:19" pos:end="287:19">&amp;</operator> <operator pos:start="287:21" pos:end="287:21">(</operator><literal type="number" pos:start="287:22" pos:end="287:22">1</literal> <operator pos:start="287:24" pos:end="287:25">&lt;&lt;</operator> <literal type="number" pos:start="287:27" pos:end="287:27">4</literal><operator pos:start="287:28" pos:end="287:28">)</operator></expr>)</condition> <block pos:start="287:31" pos:end="311:9">{<block_content pos:start="295:13" pos:end="309:41">

            <comment type="block" pos:start="289:13" pos:end="293:15">/* VALID bit means use the region number specified in this

             * value and also update MPU_RNR.REGION with that value.

             */</comment>

            <expr_stmt pos:start="295:13" pos:end="295:44"><expr pos:start="295:13" pos:end="295:43"><name pos:start="295:13" pos:end="295:18">region</name> <operator pos:start="295:20" pos:end="295:20">=</operator> <call pos:start="295:22" pos:end="295:43"><name pos:start="295:22" pos:end="295:30">extract32</name><argument_list pos:start="295:31" pos:end="295:43">(<argument pos:start="295:32" pos:end="295:36"><expr pos:start="295:32" pos:end="295:36"><name pos:start="295:32" pos:end="295:36">value</name></expr></argument>, <argument pos:start="295:39" pos:end="295:39"><expr pos:start="295:39" pos:end="295:39"><literal type="number" pos:start="295:39" pos:end="295:39">0</literal></expr></argument>, <argument pos:start="295:42" pos:end="295:42"><expr pos:start="295:42" pos:end="295:42"><literal type="number" pos:start="295:42" pos:end="295:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="297:13" pos:end="307:13"><if pos:start="297:13" pos:end="307:13">if <condition pos:start="297:16" pos:end="297:46">(<expr pos:start="297:17" pos:end="297:45"><name pos:start="297:17" pos:end="297:22">region</name> <operator pos:start="297:24" pos:end="297:25">&gt;=</operator> <name pos:start="297:27" pos:end="297:45"><name pos:start="297:27" pos:end="297:29">cpu</name><operator pos:start="297:30" pos:end="297:31">-&gt;</operator><name pos:start="297:32" pos:end="297:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="297:48" pos:end="307:13">{<block_content pos:start="299:17" pos:end="305:23">

                <expr_stmt pos:start="299:17" pos:end="303:59"><expr pos:start="299:17" pos:end="303:58"><call pos:start="299:17" pos:end="303:58"><name pos:start="299:17" pos:end="299:29">qemu_log_mask</name><argument_list pos:start="299:30" pos:end="303:58">(<argument pos:start="299:31" pos:end="299:45"><expr pos:start="299:31" pos:end="299:45"><name pos:start="299:31" pos:end="299:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="301:31" pos:end="301:72"><expr pos:start="301:31" pos:end="301:72"><literal type="string" pos:start="301:31" pos:end="301:60">"MPU region out of range %u/%"</literal> <name pos:start="301:62" pos:end="301:67">PRIu32</name> <literal type="string" pos:start="301:69" pos:end="301:72">"\n"</literal></expr></argument>,

                              <argument pos:start="303:31" pos:end="303:36"><expr pos:start="303:31" pos:end="303:36"><name pos:start="303:31" pos:end="303:36">region</name></expr></argument>, <argument pos:start="303:39" pos:end="303:57"><expr pos:start="303:39" pos:end="303:57"><name pos:start="303:39" pos:end="303:57"><name pos:start="303:39" pos:end="303:41">cpu</name><operator pos:start="303:42" pos:end="303:43">-&gt;</operator><name pos:start="303:44" pos:end="303:57">pmsav7_dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="305:17" pos:end="305:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:41"><expr pos:start="309:13" pos:end="309:40"><name pos:start="309:13" pos:end="309:31"><name pos:start="309:13" pos:end="309:15">cpu</name><operator pos:start="309:16" pos:end="309:17">-&gt;</operator><name pos:start="309:18" pos:end="309:20">env</name><operator pos:start="309:21" pos:end="309:21">.</operator><name pos:start="309:22" pos:end="309:27">pmsav7</name><operator pos:start="309:28" pos:end="309:28">.</operator><name pos:start="309:29" pos:end="309:31">rnr</name></name> <operator pos:start="309:33" pos:end="309:33">=</operator> <name pos:start="309:35" pos:end="309:40">region</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="311:11" pos:end="315:9">else <block pos:start="311:16" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:41">

            <expr_stmt pos:start="313:13" pos:end="313:41"><expr pos:start="313:13" pos:end="313:40"><name pos:start="313:13" pos:end="313:18">region</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <name pos:start="313:22" pos:end="313:40"><name pos:start="313:22" pos:end="313:24">cpu</name><operator pos:start="313:25" pos:end="313:26">-&gt;</operator><name pos:start="313:27" pos:end="313:29">env</name><operator pos:start="313:30" pos:end="313:30">.</operator><name pos:start="313:31" pos:end="313:36">pmsav7</name><operator pos:start="313:37" pos:end="313:37">.</operator><name pos:start="313:38" pos:end="313:40">rnr</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="319:9" pos:end="323:9"><if pos:start="319:9" pos:end="323:9">if <condition pos:start="319:12" pos:end="319:42">(<expr pos:start="319:13" pos:end="319:41"><name pos:start="319:13" pos:end="319:18">region</name> <operator pos:start="319:20" pos:end="319:21">&gt;=</operator> <name pos:start="319:23" pos:end="319:41"><name pos:start="319:23" pos:end="319:25">cpu</name><operator pos:start="319:26" pos:end="319:27">-&gt;</operator><name pos:start="319:28" pos:end="319:41">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="319:44" pos:end="323:9">{<block_content pos:start="321:13" pos:end="321:19">

            <return pos:start="321:13" pos:end="321:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="327:9" pos:end="327:54"><expr pos:start="327:9" pos:end="327:53"><name pos:start="327:9" pos:end="327:37"><name pos:start="327:9" pos:end="327:11">cpu</name><operator pos:start="327:12" pos:end="327:13">-&gt;</operator><name pos:start="327:14" pos:end="327:16">env</name><operator pos:start="327:17" pos:end="327:17">.</operator><name pos:start="327:18" pos:end="327:23">pmsav7</name><operator pos:start="327:24" pos:end="327:24">.</operator><name pos:start="327:25" pos:end="327:29">drbar</name><index pos:start="327:30" pos:end="327:37">[<expr pos:start="327:31" pos:end="327:36"><name pos:start="327:31" pos:end="327:36">region</name></expr>]</index></name> <operator pos:start="327:39" pos:end="327:39">=</operator> <name pos:start="327:41" pos:end="327:45">value</name> <operator pos:start="327:47" pos:end="327:47">&amp;</operator> <operator pos:start="327:49" pos:end="327:49">~</operator><literal type="number" pos:start="327:50" pos:end="327:53">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:28"><expr pos:start="329:9" pos:end="329:27"><call pos:start="329:9" pos:end="329:27"><name pos:start="329:9" pos:end="329:17">tlb_flush</name><argument_list pos:start="329:18" pos:end="329:27">(<argument pos:start="329:19" pos:end="329:26"><expr pos:start="329:19" pos:end="329:26"><call pos:start="329:19" pos:end="329:26"><name pos:start="329:19" pos:end="329:21">CPU</name><argument_list pos:start="329:22" pos:end="329:26">(<argument pos:start="329:23" pos:end="329:25"><expr pos:start="329:23" pos:end="329:25"><name pos:start="329:23" pos:end="329:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="331:9" pos:end="331:14">break;</break>

    </block_content>}</block>

    <case pos:start="335:5" pos:end="335:15">case <expr pos:start="335:10" pos:end="335:14"><literal type="number" pos:start="335:10" pos:end="335:14">0xda0</literal></expr>:</case> <comment type="block" pos:start="335:17" pos:end="335:52">/* MPU_RASR (v7M), MPU_RLAR (v8M) */</comment>

    <case pos:start="337:5" pos:end="337:15">case <expr pos:start="337:10" pos:end="337:14"><literal type="number" pos:start="337:10" pos:end="337:14">0xda8</literal></expr>:</case> <comment type="block" pos:start="337:17" pos:end="337:58">/* MPU_RASR_A1 (v7M), MPU_RLAR_A1 (v8M) */</comment>

    <case pos:start="339:5" pos:end="339:15">case <expr pos:start="339:10" pos:end="339:14"><literal type="number" pos:start="339:10" pos:end="339:14">0xdb0</literal></expr>:</case> <comment type="block" pos:start="339:17" pos:end="339:58">/* MPU_RASR_A2 (v7M), MPU_RLAR_A2 (v8M) */</comment>

    <case pos:start="341:5" pos:end="341:15">case <expr pos:start="341:10" pos:end="341:14"><literal type="number" pos:start="341:10" pos:end="341:14">0xdb8</literal></expr>:</case> <comment type="block" pos:start="341:17" pos:end="341:58">/* MPU_RASR_A3 (v7M), MPU_RLAR_A3 (v8M) */</comment>

    <block pos:start="343:5" pos:end="403:5">{<block_content pos:start="345:9" pos:end="401:14">

        <decl_stmt pos:start="345:9" pos:end="345:41"><decl pos:start="345:9" pos:end="345:40"><type pos:start="345:9" pos:end="345:11"><name pos:start="345:9" pos:end="345:11">int</name></type> <name pos:start="345:13" pos:end="345:18">region</name> <init pos:start="345:20" pos:end="345:40">= <expr pos:start="345:22" pos:end="345:40"><name pos:start="345:22" pos:end="345:40"><name pos:start="345:22" pos:end="345:24">cpu</name><operator pos:start="345:25" pos:end="345:26">-&gt;</operator><name pos:start="345:27" pos:end="345:29">env</name><operator pos:start="345:30" pos:end="345:30">.</operator><name pos:start="345:31" pos:end="345:36">pmsav7</name><operator pos:start="345:37" pos:end="345:37">.</operator><name pos:start="345:38" pos:end="345:40">rnr</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="349:9" pos:end="383:9"><if pos:start="349:9" pos:end="383:9">if <condition pos:start="349:12" pos:end="349:51">(<expr pos:start="349:13" pos:end="349:50"><call pos:start="349:13" pos:end="349:50"><name pos:start="349:13" pos:end="349:23">arm_feature</name><argument_list pos:start="349:24" pos:end="349:50">(<argument pos:start="349:25" pos:end="349:33"><expr pos:start="349:25" pos:end="349:33"><operator pos:start="349:25" pos:end="349:25">&amp;</operator><name pos:start="349:26" pos:end="349:33"><name pos:start="349:26" pos:end="349:28">cpu</name><operator pos:start="349:29" pos:end="349:30">-&gt;</operator><name pos:start="349:31" pos:end="349:33">env</name></name></expr></argument>, <argument pos:start="349:36" pos:end="349:49"><expr pos:start="349:36" pos:end="349:49"><name pos:start="349:36" pos:end="349:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="349:53" pos:end="383:9">{<block_content pos:start="359:13" pos:end="381:19">

            <comment type="block" pos:start="351:13" pos:end="357:15">/* PMSAv8M handling of the aliases is different from v7M:

             * aliases A1, A2, A3 override the low two bits of the region

             * number in MPU_RNR.

             */</comment>

            <decl_stmt pos:start="359:13" pos:end="359:47"><decl pos:start="359:13" pos:end="359:46"><type pos:start="359:13" pos:end="359:15"><name pos:start="359:13" pos:end="359:15">int</name></type> <name pos:start="359:17" pos:end="359:23">aliasno</name> <init pos:start="359:25" pos:end="359:46">= <expr pos:start="359:27" pos:end="359:46"><operator pos:start="359:27" pos:end="359:27">(</operator><name pos:start="359:28" pos:end="359:33">offset</name> <operator pos:start="359:35" pos:end="359:35">-</operator> <literal type="number" pos:start="359:37" pos:end="359:41">0xd9c</literal><operator pos:start="359:42" pos:end="359:42">)</operator> <operator pos:start="359:44" pos:end="359:44">/</operator> <literal type="number" pos:start="359:46" pos:end="359:46">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="359:49" pos:end="359:58">/* 0..3 */</comment>



            <expr_stmt pos:start="363:13" pos:end="363:41"><expr pos:start="363:13" pos:end="363:40"><name pos:start="363:13" pos:end="363:18">region</name> <operator pos:start="363:20" pos:end="363:20">=</operator> <name pos:start="363:22" pos:end="363:40"><name pos:start="363:22" pos:end="363:24">cpu</name><operator pos:start="363:25" pos:end="363:26">-&gt;</operator><name pos:start="363:27" pos:end="363:29">env</name><operator pos:start="363:30" pos:end="363:30">.</operator><name pos:start="363:31" pos:end="363:36">pmsav7</name><operator pos:start="363:37" pos:end="363:37">.</operator><name pos:start="363:38" pos:end="363:40">rnr</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="365:13" pos:end="369:13"><if pos:start="365:13" pos:end="369:13">if <condition pos:start="365:16" pos:end="365:24">(<expr pos:start="365:17" pos:end="365:23"><name pos:start="365:17" pos:end="365:23">aliasno</name></expr>)</condition> <block pos:start="365:26" pos:end="369:13">{<block_content pos:start="367:17" pos:end="367:58">

                <expr_stmt pos:start="367:17" pos:end="367:58"><expr pos:start="367:17" pos:end="367:57"><name pos:start="367:17" pos:end="367:22">region</name> <operator pos:start="367:24" pos:end="367:24">=</operator> <call pos:start="367:26" pos:end="367:57"><name pos:start="367:26" pos:end="367:34">deposit32</name><argument_list pos:start="367:35" pos:end="367:57">(<argument pos:start="367:36" pos:end="367:41"><expr pos:start="367:36" pos:end="367:41"><name pos:start="367:36" pos:end="367:41">region</name></expr></argument>, <argument pos:start="367:44" pos:end="367:44"><expr pos:start="367:44" pos:end="367:44"><literal type="number" pos:start="367:44" pos:end="367:44">0</literal></expr></argument>, <argument pos:start="367:47" pos:end="367:47"><expr pos:start="367:47" pos:end="367:47"><literal type="number" pos:start="367:47" pos:end="367:47">2</literal></expr></argument>, <argument pos:start="367:50" pos:end="367:56"><expr pos:start="367:50" pos:end="367:56"><name pos:start="367:50" pos:end="367:56">aliasno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="371:13" pos:end="375:13"><if pos:start="371:13" pos:end="375:13">if <condition pos:start="371:16" pos:end="371:46">(<expr pos:start="371:17" pos:end="371:45"><name pos:start="371:17" pos:end="371:22">region</name> <operator pos:start="371:24" pos:end="371:25">&gt;=</operator> <name pos:start="371:27" pos:end="371:45"><name pos:start="371:27" pos:end="371:29">cpu</name><operator pos:start="371:30" pos:end="371:31">-&gt;</operator><name pos:start="371:32" pos:end="371:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="371:48" pos:end="375:13">{<block_content pos:start="373:17" pos:end="373:23">

                <return pos:start="373:17" pos:end="373:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:49"><expr pos:start="377:13" pos:end="377:48"><name pos:start="377:13" pos:end="377:40"><name pos:start="377:13" pos:end="377:15">cpu</name><operator pos:start="377:16" pos:end="377:17">-&gt;</operator><name pos:start="377:18" pos:end="377:20">env</name><operator pos:start="377:21" pos:end="377:21">.</operator><name pos:start="377:22" pos:end="377:27">pmsav8</name><operator pos:start="377:28" pos:end="377:28">.</operator><name pos:start="377:29" pos:end="377:32">rlar</name><index pos:start="377:33" pos:end="377:40">[<expr pos:start="377:34" pos:end="377:39"><name pos:start="377:34" pos:end="377:39">region</name></expr>]</index></name> <operator pos:start="377:42" pos:end="377:42">=</operator> <name pos:start="377:44" pos:end="377:48">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:32"><expr pos:start="379:13" pos:end="379:31"><call pos:start="379:13" pos:end="379:31"><name pos:start="379:13" pos:end="379:21">tlb_flush</name><argument_list pos:start="379:22" pos:end="379:31">(<argument pos:start="379:23" pos:end="379:30"><expr pos:start="379:23" pos:end="379:30"><call pos:start="379:23" pos:end="379:30"><name pos:start="379:23" pos:end="379:25">CPU</name><argument_list pos:start="379:26" pos:end="379:30">(<argument pos:start="379:27" pos:end="379:29"><expr pos:start="379:27" pos:end="379:29"><name pos:start="379:27" pos:end="379:29">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="381:13" pos:end="381:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="387:9" pos:end="391:9"><if pos:start="387:9" pos:end="391:9">if <condition pos:start="387:12" pos:end="387:42">(<expr pos:start="387:13" pos:end="387:41"><name pos:start="387:13" pos:end="387:18">region</name> <operator pos:start="387:20" pos:end="387:21">&gt;=</operator> <name pos:start="387:23" pos:end="387:41"><name pos:start="387:23" pos:end="387:25">cpu</name><operator pos:start="387:26" pos:end="387:27">-&gt;</operator><name pos:start="387:28" pos:end="387:41">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="387:44" pos:end="391:9">{<block_content pos:start="389:13" pos:end="389:19">

            <return pos:start="389:13" pos:end="389:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="395:9" pos:end="395:54"><expr pos:start="395:9" pos:end="395:53"><name pos:start="395:9" pos:end="395:36"><name pos:start="395:9" pos:end="395:11">cpu</name><operator pos:start="395:12" pos:end="395:13">-&gt;</operator><name pos:start="395:14" pos:end="395:16">env</name><operator pos:start="395:17" pos:end="395:17">.</operator><name pos:start="395:18" pos:end="395:23">pmsav7</name><operator pos:start="395:24" pos:end="395:24">.</operator><name pos:start="395:25" pos:end="395:28">drsr</name><index pos:start="395:29" pos:end="395:36">[<expr pos:start="395:30" pos:end="395:35"><name pos:start="395:30" pos:end="395:35">region</name></expr>]</index></name> <operator pos:start="395:38" pos:end="395:38">=</operator> <name pos:start="395:40" pos:end="395:44">value</name> <operator pos:start="395:46" pos:end="395:46">&amp;</operator> <literal type="number" pos:start="395:48" pos:end="395:53">0xff3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:63"><expr pos:start="397:9" pos:end="397:62"><name pos:start="397:9" pos:end="397:37"><name pos:start="397:9" pos:end="397:11">cpu</name><operator pos:start="397:12" pos:end="397:13">-&gt;</operator><name pos:start="397:14" pos:end="397:16">env</name><operator pos:start="397:17" pos:end="397:17">.</operator><name pos:start="397:18" pos:end="397:23">pmsav7</name><operator pos:start="397:24" pos:end="397:24">.</operator><name pos:start="397:25" pos:end="397:29">dracr</name><index pos:start="397:30" pos:end="397:37">[<expr pos:start="397:31" pos:end="397:36"><name pos:start="397:31" pos:end="397:36">region</name></expr>]</index></name> <operator pos:start="397:39" pos:end="397:39">=</operator> <operator pos:start="397:41" pos:end="397:41">(</operator><name pos:start="397:42" pos:end="397:46">value</name> <operator pos:start="397:48" pos:end="397:49">&gt;&gt;</operator> <literal type="number" pos:start="397:51" pos:end="397:52">16</literal><operator pos:start="397:53" pos:end="397:53">)</operator> <operator pos:start="397:55" pos:end="397:55">&amp;</operator> <literal type="number" pos:start="397:57" pos:end="397:62">0x173f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:28"><expr pos:start="399:9" pos:end="399:27"><call pos:start="399:9" pos:end="399:27"><name pos:start="399:9" pos:end="399:17">tlb_flush</name><argument_list pos:start="399:18" pos:end="399:27">(<argument pos:start="399:19" pos:end="399:26"><expr pos:start="399:19" pos:end="399:26"><call pos:start="399:19" pos:end="399:26"><name pos:start="399:19" pos:end="399:21">CPU</name><argument_list pos:start="399:22" pos:end="399:26">(<argument pos:start="399:23" pos:end="399:25"><expr pos:start="399:23" pos:end="399:25"><name pos:start="399:23" pos:end="399:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="401:9" pos:end="401:14">break;</break>

    </block_content>}</block>

    <case pos:start="405:5" pos:end="405:15">case <expr pos:start="405:10" pos:end="405:14"><literal type="number" pos:start="405:10" pos:end="405:14">0xdc0</literal></expr>:</case> <comment type="block" pos:start="405:17" pos:end="405:31">/* MPU_MAIR0 */</comment>

        <if_stmt pos:start="407:9" pos:end="411:9"><if pos:start="407:9" pos:end="411:9">if <condition pos:start="407:12" pos:end="407:52">(<expr pos:start="407:13" pos:end="407:51"><operator pos:start="407:13" pos:end="407:13">!</operator><call pos:start="407:14" pos:end="407:51"><name pos:start="407:14" pos:end="407:24">arm_feature</name><argument_list pos:start="407:25" pos:end="407:51">(<argument pos:start="407:26" pos:end="407:34"><expr pos:start="407:26" pos:end="407:34"><operator pos:start="407:26" pos:end="407:26">&amp;</operator><name pos:start="407:27" pos:end="407:34"><name pos:start="407:27" pos:end="407:29">cpu</name><operator pos:start="407:30" pos:end="407:31">-&gt;</operator><name pos:start="407:32" pos:end="407:34">env</name></name></expr></argument>, <argument pos:start="407:37" pos:end="407:50"><expr pos:start="407:37" pos:end="407:50"><name pos:start="407:37" pos:end="407:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="407:54" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:28">

            <goto pos:start="409:13" pos:end="409:28">goto <name pos:start="409:18" pos:end="409:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="413:9" pos:end="419:9"><if pos:start="413:9" pos:end="419:9">if <condition pos:start="413:12" pos:end="413:32">(<expr pos:start="413:13" pos:end="413:31"><name pos:start="413:13" pos:end="413:31"><name pos:start="413:13" pos:end="413:15">cpu</name><operator pos:start="413:16" pos:end="413:17">-&gt;</operator><name pos:start="413:18" pos:end="413:31">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="413:34" pos:end="419:9">{<block_content pos:start="417:13" pos:end="417:42">

            <comment type="block" pos:start="415:13" pos:end="415:68">/* Register is RES0 if no MPU regions are implemented */</comment>

            <expr_stmt pos:start="417:13" pos:end="417:42"><expr pos:start="417:13" pos:end="417:41"><name pos:start="417:13" pos:end="417:33"><name pos:start="417:13" pos:end="417:15">cpu</name><operator pos:start="417:16" pos:end="417:17">-&gt;</operator><name pos:start="417:18" pos:end="417:20">env</name><operator pos:start="417:21" pos:end="417:21">.</operator><name pos:start="417:22" pos:end="417:27">pmsav8</name><operator pos:start="417:28" pos:end="417:28">.</operator><name pos:start="417:29" pos:end="417:33">mair0</name></name> <operator pos:start="417:35" pos:end="417:35">=</operator> <name pos:start="417:37" pos:end="417:41">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="421:9" pos:end="425:11">/* We don't need to do anything else because memory attributes

         * only affect cacheability, and we don't implement caching.

         */</comment>

        <break pos:start="427:9" pos:end="427:14">break;</break>

    <case pos:start="429:5" pos:end="429:15">case <expr pos:start="429:10" pos:end="429:14"><literal type="number" pos:start="429:10" pos:end="429:14">0xdc4</literal></expr>:</case> <comment type="block" pos:start="429:17" pos:end="429:31">/* MPU_MAIR1 */</comment>

        <if_stmt pos:start="431:9" pos:end="435:9"><if pos:start="431:9" pos:end="435:9">if <condition pos:start="431:12" pos:end="431:52">(<expr pos:start="431:13" pos:end="431:51"><operator pos:start="431:13" pos:end="431:13">!</operator><call pos:start="431:14" pos:end="431:51"><name pos:start="431:14" pos:end="431:24">arm_feature</name><argument_list pos:start="431:25" pos:end="431:51">(<argument pos:start="431:26" pos:end="431:34"><expr pos:start="431:26" pos:end="431:34"><operator pos:start="431:26" pos:end="431:26">&amp;</operator><name pos:start="431:27" pos:end="431:34"><name pos:start="431:27" pos:end="431:29">cpu</name><operator pos:start="431:30" pos:end="431:31">-&gt;</operator><name pos:start="431:32" pos:end="431:34">env</name></name></expr></argument>, <argument pos:start="431:37" pos:end="431:50"><expr pos:start="431:37" pos:end="431:50"><name pos:start="431:37" pos:end="431:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="431:54" pos:end="435:9">{<block_content pos:start="433:13" pos:end="433:28">

            <goto pos:start="433:13" pos:end="433:28">goto <name pos:start="433:18" pos:end="433:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="437:9" pos:end="443:9"><if pos:start="437:9" pos:end="443:9">if <condition pos:start="437:12" pos:end="437:32">(<expr pos:start="437:13" pos:end="437:31"><name pos:start="437:13" pos:end="437:31"><name pos:start="437:13" pos:end="437:15">cpu</name><operator pos:start="437:16" pos:end="437:17">-&gt;</operator><name pos:start="437:18" pos:end="437:31">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="437:34" pos:end="443:9">{<block_content pos:start="441:13" pos:end="441:42">

            <comment type="block" pos:start="439:13" pos:end="439:68">/* Register is RES0 if no MPU regions are implemented */</comment>

            <expr_stmt pos:start="441:13" pos:end="441:42"><expr pos:start="441:13" pos:end="441:41"><name pos:start="441:13" pos:end="441:33"><name pos:start="441:13" pos:end="441:15">cpu</name><operator pos:start="441:16" pos:end="441:17">-&gt;</operator><name pos:start="441:18" pos:end="441:20">env</name><operator pos:start="441:21" pos:end="441:21">.</operator><name pos:start="441:22" pos:end="441:27">pmsav8</name><operator pos:start="441:28" pos:end="441:28">.</operator><name pos:start="441:29" pos:end="441:33">mair1</name></name> <operator pos:start="441:35" pos:end="441:35">=</operator> <name pos:start="441:37" pos:end="441:41">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="445:9" pos:end="449:11">/* We don't need to do anything else because memory attributes

         * only affect cacheability, and we don't implement caching.

         */</comment>

        <break pos:start="451:9" pos:end="451:14">break;</break>

    <case pos:start="453:5" pos:end="453:15">case <expr pos:start="453:10" pos:end="453:14"><literal type="number" pos:start="453:10" pos:end="453:14">0xf00</literal></expr>:</case> <comment type="block" pos:start="453:17" pos:end="453:59">/* Software Triggered Interrupt Register */</comment>

    <block pos:start="455:5" pos:end="467:5">{<block_content pos:start="457:9" pos:end="465:14">

        <decl_stmt pos:start="457:9" pos:end="457:54"><decl pos:start="457:9" pos:end="457:53"><type pos:start="457:9" pos:end="457:11"><name pos:start="457:9" pos:end="457:11">int</name></type> <name pos:start="457:13" pos:end="457:18">excnum</name> <init pos:start="457:20" pos:end="457:53">= <expr pos:start="457:22" pos:end="457:53"><operator pos:start="457:22" pos:end="457:22">(</operator><name pos:start="457:23" pos:end="457:27">value</name> <operator pos:start="457:29" pos:end="457:29">&amp;</operator> <literal type="number" pos:start="457:31" pos:end="457:35">0x1ff</literal><operator pos:start="457:36" pos:end="457:36">)</operator> <operator pos:start="457:38" pos:end="457:38">+</operator> <name pos:start="457:40" pos:end="457:53">NVIC_FIRST_IRQ</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="459:9" pos:end="463:9"><if pos:start="459:9" pos:end="463:9">if <condition pos:start="459:12" pos:end="459:32">(<expr pos:start="459:13" pos:end="459:31"><name pos:start="459:13" pos:end="459:18">excnum</name> <operator pos:start="459:20" pos:end="459:20">&lt;</operator> <name pos:start="459:22" pos:end="459:31"><name pos:start="459:22" pos:end="459:22">s</name><operator pos:start="459:23" pos:end="459:24">-&gt;</operator><name pos:start="459:25" pos:end="459:31">num_irq</name></name></expr>)</condition> <block pos:start="459:34" pos:end="463:9">{<block_content pos:start="461:13" pos:end="461:47">

            <expr_stmt pos:start="461:13" pos:end="461:47"><expr pos:start="461:13" pos:end="461:46"><call pos:start="461:13" pos:end="461:46"><name pos:start="461:13" pos:end="461:35">armv7m_nvic_set_pending</name><argument_list pos:start="461:36" pos:end="461:46">(<argument pos:start="461:37" pos:end="461:37"><expr pos:start="461:37" pos:end="461:37"><name pos:start="461:37" pos:end="461:37">s</name></expr></argument>, <argument pos:start="461:40" pos:end="461:45"><expr pos:start="461:40" pos:end="461:45"><name pos:start="461:40" pos:end="461:45">excnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="465:9" pos:end="465:14">break;</break>

    </block_content>}</block>

    <default pos:start="469:5" pos:end="469:12">default:</default>

    <label pos:start="471:5" pos:end="471:15"><name pos:start="471:5" pos:end="471:14">bad_offset</name>:</label>

        <expr_stmt pos:start="473:9" pos:end="475:63"><expr pos:start="473:9" pos:end="475:62"><call pos:start="473:9" pos:end="475:62"><name pos:start="473:9" pos:end="473:21">qemu_log_mask</name><argument_list pos:start="473:22" pos:end="475:62">(<argument pos:start="473:23" pos:end="473:37"><expr pos:start="473:23" pos:end="473:37"><name pos:start="473:23" pos:end="473:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="475:23" pos:end="475:53"><expr pos:start="475:23" pos:end="475:53"><literal type="string" pos:start="475:23" pos:end="475:53">"NVIC: Bad write offset 0x%x\n"</literal></expr></argument>, <argument pos:start="475:56" pos:end="475:61"><expr pos:start="475:56" pos:end="475:61"><name pos:start="475:56" pos:end="475:61">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
