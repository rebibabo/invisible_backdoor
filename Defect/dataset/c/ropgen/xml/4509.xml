<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4509.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vhdx_create_bat</name><parameter_list pos:start="1:27" pos:end="7:43">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:65"><decl pos:start="1:50" pos:end="1:65"><type pos:start="1:50" pos:end="1:65"><name pos:start="1:50" pos:end="1:62">BDRVVHDXState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:65">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:46"><decl pos:start="3:28" pos:end="3:46"><type pos:start="3:28" pos:end="3:46"><name pos:start="3:28" pos:end="3:35">uint64_t</name></type> <name pos:start="3:37" pos:end="3:46">image_size</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:66"><decl pos:start="3:49" pos:end="3:66"><type pos:start="3:49" pos:end="3:66"><name pos:start="3:49" pos:end="3:61">VHDXImageType</name></type> <name pos:start="3:63" pos:end="3:66">type</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:47"><decl pos:start="5:28" pos:end="5:47"><type pos:start="5:28" pos:end="5:47"><name pos:start="5:28" pos:end="5:31">bool</name></type> <name pos:start="5:33" pos:end="5:47">use_zero_blocks</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:69"><decl pos:start="5:50" pos:end="5:69"><type pos:start="5:50" pos:end="5:69"><name pos:start="5:50" pos:end="5:57">uint64_t</name></type> <name pos:start="5:59" pos:end="5:69">file_offset</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:42"><decl pos:start="7:28" pos:end="7:42"><type pos:start="7:28" pos:end="7:42"><name pos:start="7:28" pos:end="7:35">uint32_t</name></type> <name pos:start="7:37" pos:end="7:42">length</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="145:1">{<block_content pos:start="11:5" pos:end="143:15">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:29">data_file_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:26">total_sectors</name> <init pos:start="15:28" pos:end="15:30">= <expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:23">sector_num</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:19">unused</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">block_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18">VHDXSectorInfo</name></type> <name pos:start="23:20" pos:end="23:24">sinfo</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><call pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:26">(<argument pos:start="27:12" pos:end="27:25"><expr pos:start="27:12" pos:end="27:25"><name pos:start="27:12" pos:end="27:17"><name pos:start="27:12" pos:end="27:12">s</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:17">bat</name></name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:19">/* this gives a data start after BAT/bitmap entries, and well

     * past any metadata entries (with a 4 MB buffer for future

     * expansion */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:54"><expr pos:start="37:5" pos:end="37:53"><name pos:start="37:5" pos:end="37:20">data_file_offset</name> <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:34">file_offset</name> <operator pos:start="37:36" pos:end="37:36">+</operator> <name pos:start="37:38" pos:end="37:43">length</name> <operator pos:start="37:45" pos:end="37:45">+</operator> <literal type="number" pos:start="37:47" pos:end="37:47">5</literal> <operator pos:start="37:49" pos:end="37:49">*</operator> <name pos:start="37:51" pos:end="37:53">MiB</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:62"><expr pos:start="39:5" pos:end="39:61"><name pos:start="39:5" pos:end="39:17">total_sectors</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:30">image_size</name> <operator pos:start="39:32" pos:end="39:33">&gt;&gt;</operator> <name pos:start="39:35" pos:end="39:61"><name pos:start="39:35" pos:end="39:35">s</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:61">logical_sector_size_bits</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="73:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:34">(<expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:12">type</name> <operator pos:start="43:14" pos:end="43:15">==</operator> <name pos:start="43:17" pos:end="43:33">VHDX_TYPE_DYNAMIC</name></expr>)</condition> <block pos:start="43:36" pos:end="57:5">{<block_content pos:start="49:9" pos:end="55:9">

        <comment type="block" pos:start="45:9" pos:end="47:55">/* All zeroes, so we can just extend the file - the end of the BAT

         * is the furthest thing we have written yet */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:49"><name pos:start="49:15" pos:end="49:27">bdrv_truncate</name><argument_list pos:start="49:28" pos:end="49:49">(<argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">bs</name></expr></argument>, <argument pos:start="49:33" pos:end="49:48"><expr pos:start="49:33" pos:end="49:48"><name pos:start="49:33" pos:end="49:48">data_file_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition> <block pos:start="51:22" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:22">

            <goto pos:start="53:13" pos:end="53:22">goto <name pos:start="53:18" pos:end="53:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="67:5">else if <condition pos:start="57:15" pos:end="57:39">(<expr pos:start="57:16" pos:end="57:38"><name pos:start="57:16" pos:end="57:19">type</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:38">VHDX_TYPE_FIXED</name></expr>)</condition> <block pos:start="57:41" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:9">

        <expr_stmt pos:start="59:9" pos:end="59:63"><expr pos:start="59:9" pos:end="59:62"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:62"><name pos:start="59:15" pos:end="59:27">bdrv_truncate</name><argument_list pos:start="59:28" pos:end="59:62">(<argument pos:start="59:29" pos:end="59:30"><expr pos:start="59:29" pos:end="59:30"><name pos:start="59:29" pos:end="59:30">bs</name></expr></argument>, <argument pos:start="59:33" pos:end="59:61"><expr pos:start="59:33" pos:end="59:61"><name pos:start="59:33" pos:end="59:48">data_file_offset</name> <operator pos:start="59:50" pos:end="59:50">+</operator> <name pos:start="59:52" pos:end="59:61">image_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition> <block pos:start="61:22" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:22">

            <goto pos:start="63:13" pos:end="63:22">goto <name pos:start="63:18" pos:end="63:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="73:5">else <block pos:start="67:12" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:18">

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">-</operator><name pos:start="69:16" pos:end="69:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">exit</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="131:5"><if pos:start="77:5" pos:end="131:5">if <condition pos:start="77:8" pos:end="81:44">(<expr pos:start="77:9" pos:end="81:43"><name pos:start="77:9" pos:end="77:12">type</name> <operator pos:start="77:14" pos:end="77:15">==</operator> <name pos:start="77:17" pos:end="77:31">VHDX_TYPE_FIXED</name> <operator pos:start="77:33" pos:end="77:34">||</operator>

                <name pos:start="79:17" pos:end="79:31">use_zero_blocks</name> <operator pos:start="79:33" pos:end="79:34">||</operator>

                <call pos:start="81:17" pos:end="81:38"><name pos:start="81:17" pos:end="81:34">bdrv_has_zero_init</name><argument_list pos:start="81:35" pos:end="81:38">(<argument pos:start="81:36" pos:end="81:37"><expr pos:start="81:36" pos:end="81:37"><name pos:start="81:36" pos:end="81:37">bs</name></expr></argument>)</argument_list></call> <operator pos:start="81:40" pos:end="81:41">==</operator> <literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr>)</condition> <block pos:start="81:46" pos:end="131:5">{<block_content pos:start="85:9" pos:end="129:9">

        <comment type="block" pos:start="83:9" pos:end="83:65">/* for a fixed file, the default BAT entry is not zero */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:39"><expr pos:start="85:9" pos:end="85:38"><name pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:14">bat</name></name> <operator pos:start="85:16" pos:end="85:16">=</operator> <call pos:start="85:18" pos:end="85:38"><name pos:start="85:18" pos:end="85:30">g_try_malloc0</name><argument_list pos:start="85:31" pos:end="85:38">(<argument pos:start="85:32" pos:end="85:37"><expr pos:start="85:32" pos:end="85:37"><name pos:start="85:32" pos:end="85:37">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:37">(<expr pos:start="87:13" pos:end="87:36"><name pos:start="87:13" pos:end="87:18">length</name> <operator pos:start="87:20" pos:end="87:21">&amp;&amp;</operator> <name pos:start="87:23" pos:end="87:28"><name pos:start="87:23" pos:end="87:23">s</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:28">bat</name></name> <operator pos:start="87:30" pos:end="87:31">!=</operator> <name pos:start="87:33" pos:end="87:36">NULL</name></expr>)</condition> <block pos:start="87:39" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:22">

            <expr_stmt pos:start="89:13" pos:end="89:26"><expr pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <operator pos:start="89:19" pos:end="89:19">-</operator><name pos:start="89:20" pos:end="89:25">ENOMEM</name></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:22">goto <name pos:start="91:18" pos:end="91:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="97:74"><expr pos:start="95:9" pos:end="97:73"><name pos:start="95:9" pos:end="95:19">block_state</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <ternary pos:start="95:23" pos:end="97:73"><condition pos:start="95:23" pos:end="95:47"><expr pos:start="95:23" pos:end="95:45"><name pos:start="95:23" pos:end="95:26">type</name> <operator pos:start="95:28" pos:end="95:29">==</operator> <name pos:start="95:31" pos:end="95:45">VHDX_TYPE_FIXED</name></expr> ?</condition><then pos:start="95:49" pos:end="95:75"> <expr pos:start="95:49" pos:end="95:75"><name pos:start="95:49" pos:end="95:75">PAYLOAD_BLOCK_FULLY_PRESENT</name></expr> </then><else pos:start="95:77" pos:end="97:73">:

                                                <expr pos:start="97:49" pos:end="97:73"><name pos:start="97:49" pos:end="97:73">PAYLOAD_BLOCK_NOT_PRESENT</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:73"><expr pos:start="99:9" pos:end="99:72"><name pos:start="99:9" pos:end="99:19">block_state</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <ternary pos:start="99:23" pos:end="99:72"><condition pos:start="99:23" pos:end="99:39"><expr pos:start="99:23" pos:end="99:37"><name pos:start="99:23" pos:end="99:37">use_zero_blocks</name></expr> ?</condition><then pos:start="99:41" pos:end="99:58"> <expr pos:start="99:41" pos:end="99:58"><name pos:start="99:41" pos:end="99:58">PAYLOAD_BLOCK_ZERO</name></expr> </then><else pos:start="99:60" pos:end="99:72">: <expr pos:start="99:62" pos:end="99:72"><name pos:start="99:62" pos:end="99:72">block_state</name></expr></else></ternary></expr>;</expr_stmt>

        <comment type="block" pos:start="101:9" pos:end="101:79">/* fill the BAT by emulating sector writes of sectors_per_block size */</comment>

        <while pos:start="103:9" pos:end="121:9">while <condition pos:start="103:15" pos:end="103:42">(<expr pos:start="103:16" pos:end="103:41"><name pos:start="103:16" pos:end="103:25">sector_num</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:41">total_sectors</name></expr>)</condition> <block pos:start="103:44" pos:end="121:9">{<block_content pos:start="105:13" pos:end="119:47">

            <expr_stmt pos:start="105:13" pos:end="105:78"><expr pos:start="105:13" pos:end="105:77"><call pos:start="105:13" pos:end="105:77"><name pos:start="105:13" pos:end="105:32">vhdx_block_translate</name><argument_list pos:start="105:33" pos:end="105:77">(<argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><name pos:start="105:34" pos:end="105:34">s</name></expr></argument>, <argument pos:start="105:37" pos:end="105:46"><expr pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:46">sector_num</name></expr></argument>, <argument pos:start="105:49" pos:end="105:68"><expr pos:start="105:49" pos:end="105:68"><name pos:start="105:49" pos:end="105:68"><name pos:start="105:49" pos:end="105:49">s</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:68">sectors_per_block</name></name></expr></argument>, <argument pos:start="105:71" pos:end="105:76"><expr pos:start="105:71" pos:end="105:76"><operator pos:start="105:71" pos:end="105:71">&amp;</operator><name pos:start="105:72" pos:end="105:76">sinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="109:76"><expr pos:start="107:13" pos:end="109:75"><name pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:17">sinfo</name><operator pos:start="107:18" pos:end="107:18">.</operator><name pos:start="107:19" pos:end="107:29">file_offset</name></name> <operator pos:start="107:31" pos:end="107:31">=</operator> <name pos:start="107:33" pos:end="107:48">data_file_offset</name> <operator pos:start="107:50" pos:end="107:50">+</operator>

                                <operator pos:start="109:33" pos:end="109:33">(</operator><name pos:start="109:34" pos:end="109:43">sector_num</name> <operator pos:start="109:45" pos:end="109:46">&lt;&lt;</operator> <name pos:start="109:48" pos:end="109:74"><name pos:start="109:48" pos:end="109:48">s</name><operator pos:start="109:49" pos:end="109:50">-&gt;</operator><name pos:start="109:51" pos:end="109:74">logical_sector_size_bits</name></name><operator pos:start="109:75" pos:end="109:75">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:65"><expr pos:start="111:13" pos:end="111:64"><name pos:start="111:13" pos:end="111:29"><name pos:start="111:13" pos:end="111:17">sinfo</name><operator pos:start="111:18" pos:end="111:18">.</operator><name pos:start="111:19" pos:end="111:29">file_offset</name></name> <operator pos:start="111:31" pos:end="111:31">=</operator> <call pos:start="111:33" pos:end="111:64"><name pos:start="111:33" pos:end="111:40">ROUND_UP</name><argument_list pos:start="111:41" pos:end="111:64">(<argument pos:start="111:42" pos:end="111:58"><expr pos:start="111:42" pos:end="111:58"><name pos:start="111:42" pos:end="111:58"><name pos:start="111:42" pos:end="111:46">sinfo</name><operator pos:start="111:47" pos:end="111:47">.</operator><name pos:start="111:48" pos:end="111:58">file_offset</name></name></expr></argument>, <argument pos:start="111:61" pos:end="111:63"><expr pos:start="111:61" pos:end="111:63"><name pos:start="111:61" pos:end="111:63">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="115:53"><expr pos:start="113:13" pos:end="115:52"><call pos:start="113:13" pos:end="115:52"><name pos:start="113:13" pos:end="113:39">vhdx_update_bat_table_entry</name><argument_list pos:start="113:40" pos:end="115:52">(<argument pos:start="113:41" pos:end="113:42"><expr pos:start="113:41" pos:end="113:42"><name pos:start="113:41" pos:end="113:42">bs</name></expr></argument>, <argument pos:start="113:45" pos:end="113:45"><expr pos:start="113:45" pos:end="113:45"><name pos:start="113:45" pos:end="113:45">s</name></expr></argument>, <argument pos:start="113:48" pos:end="113:53"><expr pos:start="113:48" pos:end="113:53"><operator pos:start="113:48" pos:end="113:48">&amp;</operator><name pos:start="113:49" pos:end="113:53">sinfo</name></expr></argument>, <argument pos:start="113:56" pos:end="113:62"><expr pos:start="113:56" pos:end="113:62"><operator pos:start="113:56" pos:end="113:56">&amp;</operator><name pos:start="113:57" pos:end="113:62">unused</name></expr></argument>, <argument pos:start="113:65" pos:end="113:71"><expr pos:start="113:65" pos:end="113:71"><operator pos:start="113:65" pos:end="113:65">&amp;</operator><name pos:start="113:66" pos:end="113:71">unused</name></expr></argument>,

                                        <argument pos:start="115:41" pos:end="115:51"><expr pos:start="115:41" pos:end="115:51"><name pos:start="115:41" pos:end="115:51">block_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:49"><expr pos:start="117:13" pos:end="117:48"><call pos:start="117:13" pos:end="117:48"><name pos:start="117:13" pos:end="117:24">cpu_to_le64s</name><argument_list pos:start="117:25" pos:end="117:48">(<argument pos:start="117:26" pos:end="117:47"><expr pos:start="117:26" pos:end="117:47"><operator pos:start="117:26" pos:end="117:26">&amp;</operator><name pos:start="117:27" pos:end="117:47"><name pos:start="117:27" pos:end="117:27">s</name><operator pos:start="117:28" pos:end="117:29">-&gt;</operator><name pos:start="117:30" pos:end="117:32">bat</name><index pos:start="117:33" pos:end="117:47">[<expr pos:start="117:34" pos:end="117:46"><name pos:start="117:34" pos:end="117:46"><name pos:start="117:34" pos:end="117:38">sinfo</name><operator pos:start="117:39" pos:end="117:39">.</operator><name pos:start="117:40" pos:end="117:46">bat_idx</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:47"><expr pos:start="119:13" pos:end="119:46"><name pos:start="119:13" pos:end="119:22">sector_num</name> <operator pos:start="119:24" pos:end="119:25">+=</operator> <name pos:start="119:27" pos:end="119:46"><name pos:start="119:27" pos:end="119:27">s</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:46">sectors_per_block</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="123:9" pos:end="123:59"><expr pos:start="123:9" pos:end="123:58"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="123:58"><name pos:start="123:15" pos:end="123:25">bdrv_pwrite</name><argument_list pos:start="123:26" pos:end="123:58">(<argument pos:start="123:27" pos:end="123:28"><expr pos:start="123:27" pos:end="123:28"><name pos:start="123:27" pos:end="123:28">bs</name></expr></argument>, <argument pos:start="123:31" pos:end="123:41"><expr pos:start="123:31" pos:end="123:41"><name pos:start="123:31" pos:end="123:41">file_offset</name></expr></argument>, <argument pos:start="123:44" pos:end="123:49"><expr pos:start="123:44" pos:end="123:49"><name pos:start="123:44" pos:end="123:49"><name pos:start="123:44" pos:end="123:44">s</name><operator pos:start="123:45" pos:end="123:46">-&gt;</operator><name pos:start="123:47" pos:end="123:49">bat</name></name></expr></argument>, <argument pos:start="123:52" pos:end="123:57"><expr pos:start="123:52" pos:end="123:57"><name pos:start="123:52" pos:end="123:57">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:20">(<expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">&lt;</operator> <literal type="number" pos:start="125:19" pos:end="125:19">0</literal></expr>)</condition> <block pos:start="125:22" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:22">

            <goto pos:start="127:13" pos:end="127:22">goto <name pos:start="127:18" pos:end="127:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>







<label pos:start="139:1" pos:end="139:5"><name pos:start="139:1" pos:end="139:4">exit</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:19"><expr pos:start="141:5" pos:end="141:18"><call pos:start="141:5" pos:end="141:18"><name pos:start="141:5" pos:end="141:10">g_free</name><argument_list pos:start="141:11" pos:end="141:18">(<argument pos:start="141:12" pos:end="141:17"><expr pos:start="141:12" pos:end="141:17"><name pos:start="141:12" pos:end="141:17"><name pos:start="141:12" pos:end="141:12">s</name><operator pos:start="141:13" pos:end="141:14">-&gt;</operator><name pos:start="141:15" pos:end="141:17">bat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:15">return <expr pos:start="143:12" pos:end="143:14"><name pos:start="143:12" pos:end="143:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
