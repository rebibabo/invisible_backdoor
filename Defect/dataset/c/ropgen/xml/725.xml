<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/725.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">do_tb_flush</name><parameter_list pos:start="1:24" pos:end="1:50">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:32">CPUState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">cpu</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:49"><decl pos:start="1:40" pos:end="1:49"><type pos:start="1:40" pos:end="1:49"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:16">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type> <name pos:start="5:14" pos:end="5:25">tb_flush_req</name> <init pos:start="5:27" pos:end="5:55">= <expr pos:start="5:29" pos:end="5:55"><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:37">unsigned</name><operator pos:start="5:38" pos:end="5:38">)</operator> <operator pos:start="5:40" pos:end="5:40">(</operator><name pos:start="5:41" pos:end="5:49">uintptr_t</name><operator pos:start="5:50" pos:end="5:50">)</operator> <name pos:start="5:52" pos:end="5:55">data</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:14"><expr pos:start="9:5" pos:end="9:13"><call pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">tb_lock</name><argument_list pos:start="9:12" pos:end="9:13">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* If it's already been done on request of another CPU,

     * just retry.

     */</comment>

    <if_stmt pos:start="19:5" pos:end="28:0"><if pos:start="19:5" pos:end="28:0">if <condition pos:start="19:8" pos:end="19:54">(<expr pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:15">tcg_ctx</name><operator pos:start="19:16" pos:end="19:16">.</operator><name pos:start="19:17" pos:end="19:22">tb_ctx</name><operator pos:start="19:23" pos:end="19:23">.</operator><name pos:start="19:24" pos:end="19:37">tb_flush_count</name></name> <operator pos:start="19:39" pos:end="19:40">!=</operator> <name pos:start="19:42" pos:end="19:53">tb_flush_req</name></expr>)</condition> <block pos:start="19:56" pos:end="28:0">{<block_content pos:start="21:9" pos:end="21:18">

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="27:1" pos:end="27:24">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:24"><call pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:11">defined</name><argument_list pos:start="27:12" pos:end="27:24">(<argument pos:start="27:13" pos:end="27:23"><expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:23">DEBUG_FLUSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="29:5" pos:end="40:0"><expr pos:start="29:5" pos:end="37:37"><call pos:start="29:5" pos:end="37:37"><name pos:start="29:5" pos:end="29:10">printf</name><argument_list pos:start="29:11" pos:end="37:37">(<argument pos:start="29:12" pos:end="29:66"><expr pos:start="29:12" pos:end="29:66"><literal type="string" pos:start="29:12" pos:end="29:66">"qemu: flush code_size=%ld nb_tbs=%d avg_tb_size=%ld\n"</literal></expr></argument>,

           <argument pos:start="31:12" pos:end="31:74"><expr pos:start="31:12" pos:end="31:74"><operator pos:start="31:12" pos:end="31:12">(</operator><name pos:start="31:13" pos:end="31:20">unsigned</name> <name pos:start="31:22" pos:end="31:25">long</name><operator pos:start="31:26" pos:end="31:26">)</operator><operator pos:start="31:27" pos:end="31:27">(</operator><name pos:start="31:28" pos:end="31:47"><name pos:start="31:28" pos:end="31:34">tcg_ctx</name><operator pos:start="31:35" pos:end="31:35">.</operator><name pos:start="31:36" pos:end="31:47">code_gen_ptr</name></name> <operator pos:start="31:49" pos:end="31:49">-</operator> <name pos:start="31:51" pos:end="31:73"><name pos:start="31:51" pos:end="31:57">tcg_ctx</name><operator pos:start="31:58" pos:end="31:58">.</operator><name pos:start="31:59" pos:end="31:73">code_gen_buffer</name></name><operator pos:start="31:74" pos:end="31:74">)</operator></expr></argument>,

           <argument pos:start="33:12" pos:end="33:32"><expr pos:start="33:12" pos:end="33:32"><name pos:start="33:12" pos:end="33:32"><name pos:start="33:12" pos:end="33:18">tcg_ctx</name><operator pos:start="33:19" pos:end="33:19">.</operator><name pos:start="33:20" pos:end="33:25">tb_ctx</name><operator pos:start="33:26" pos:end="33:26">.</operator><name pos:start="33:27" pos:end="33:32">nb_tbs</name></name></expr></argument>, <argument pos:start="33:35" pos:end="37:36"><expr pos:start="33:35" pos:end="37:36"><ternary pos:start="33:35" pos:end="37:36"><condition pos:start="33:35" pos:end="33:61"><expr pos:start="33:35" pos:end="33:59"><name pos:start="33:35" pos:end="33:55"><name pos:start="33:35" pos:end="33:41">tcg_ctx</name><operator pos:start="33:42" pos:end="33:42">.</operator><name pos:start="33:43" pos:end="33:48">tb_ctx</name><operator pos:start="33:49" pos:end="33:49">.</operator><name pos:start="33:50" pos:end="33:55">nb_tbs</name></name> <operator pos:start="33:57" pos:end="33:57">&gt;</operator> <literal type="number" pos:start="33:59" pos:end="33:59">0</literal></expr> ?</condition><then pos:start="35:12" pos:end="37:32">

           <expr pos:start="35:12" pos:end="37:32"><operator pos:start="35:12" pos:end="35:12">(</operator><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:21">unsigned</name> <name pos:start="35:23" pos:end="35:26">long</name><operator pos:start="35:27" pos:end="35:27">)</operator><operator pos:start="35:28" pos:end="35:28">(</operator><name pos:start="35:29" pos:end="35:48"><name pos:start="35:29" pos:end="35:35">tcg_ctx</name><operator pos:start="35:36" pos:end="35:36">.</operator><name pos:start="35:37" pos:end="35:48">code_gen_ptr</name></name> <operator pos:start="35:50" pos:end="35:50">-</operator> <name pos:start="35:52" pos:end="35:74"><name pos:start="35:52" pos:end="35:58">tcg_ctx</name><operator pos:start="35:59" pos:end="35:59">.</operator><name pos:start="35:60" pos:end="35:74">code_gen_buffer</name></name><operator pos:start="35:75" pos:end="35:75">)</operator><operator pos:start="35:76" pos:end="35:76">)</operator> <operator pos:start="35:78" pos:end="35:78">/</operator>

           <name pos:start="37:12" pos:end="37:32"><name pos:start="37:12" pos:end="37:18">tcg_ctx</name><operator pos:start="37:19" pos:end="37:19">.</operator><name pos:start="37:20" pos:end="37:25">tb_ctx</name><operator pos:start="37:26" pos:end="37:26">.</operator><name pos:start="37:27" pos:end="37:32">nb_tbs</name></name></expr> </then><else pos:start="37:34" pos:end="37:36">: <expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="43:39">(<expr pos:start="41:9" pos:end="43:38"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:17">unsigned</name> <name pos:start="41:19" pos:end="41:22">long</name><operator pos:start="41:23" pos:end="41:23">)</operator><operator pos:start="41:24" pos:end="41:24">(</operator><name pos:start="41:25" pos:end="41:44"><name pos:start="41:25" pos:end="41:31">tcg_ctx</name><operator pos:start="41:32" pos:end="41:32">.</operator><name pos:start="41:33" pos:end="41:44">code_gen_ptr</name></name> <operator pos:start="41:46" pos:end="41:46">-</operator> <name pos:start="41:48" pos:end="41:70"><name pos:start="41:48" pos:end="41:54">tcg_ctx</name><operator pos:start="41:55" pos:end="41:55">.</operator><name pos:start="41:56" pos:end="41:70">code_gen_buffer</name></name><operator pos:start="41:71" pos:end="41:71">)</operator>

        <operator pos:start="43:9" pos:end="43:9">&gt;</operator> <name pos:start="43:11" pos:end="43:38"><name pos:start="43:11" pos:end="43:17">tcg_ctx</name><operator pos:start="43:18" pos:end="43:18">.</operator><name pos:start="43:19" pos:end="43:38">code_gen_buffer_size</name></name></expr>)</condition> <block pos:start="43:41" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:65">

        <expr_stmt pos:start="45:9" pos:end="45:65"><expr pos:start="45:9" pos:end="45:64"><call pos:start="45:9" pos:end="45:64"><name pos:start="45:9" pos:end="45:17">cpu_abort</name><argument_list pos:start="45:18" pos:end="45:64">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><name pos:start="45:19" pos:end="45:21">cpu</name></expr></argument>, <argument pos:start="45:24" pos:end="45:63"><expr pos:start="45:24" pos:end="45:63"><literal type="string" pos:start="45:24" pos:end="45:63">"Internal error: code buffer overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="51:5" pos:end="51:20"><name pos:start="51:5" pos:end="51:15">CPU_FOREACH</name><argument_list pos:start="51:16" pos:end="51:20">(<argument pos:start="51:17" pos:end="51:19">cpu</argument>)</argument_list></macro> <block pos:start="51:22" pos:end="63:5">{<block_content pos:start="53:9" pos:end="61:9">

        <decl_stmt pos:start="53:9" pos:end="53:14"><decl pos:start="53:9" pos:end="53:13"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:13">i</name></decl>;</decl_stmt>



        <for pos:start="57:9" pos:end="61:9">for <control pos:start="57:13" pos:end="57:47">(<init pos:start="57:14" pos:end="57:19"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">i</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>;</init> <condition pos:start="57:21" pos:end="57:42"><expr pos:start="57:21" pos:end="57:41"><name pos:start="57:21" pos:end="57:21">i</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <name pos:start="57:25" pos:end="57:41">TB_JMP_CACHE_SIZE</name></expr>;</condition> <incr pos:start="57:44" pos:end="57:46"><expr pos:start="57:44" pos:end="57:46"><operator pos:start="57:44" pos:end="57:45">++</operator><name pos:start="57:46" pos:end="57:46">i</name></expr></incr>)</control> <block pos:start="57:49" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:52">

            <expr_stmt pos:start="59:13" pos:end="59:52"><expr pos:start="59:13" pos:end="59:51"><call pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:22">atomic_set</name><argument_list pos:start="59:23" pos:end="59:51">(<argument pos:start="59:24" pos:end="59:44"><expr pos:start="59:24" pos:end="59:44"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:44"><name pos:start="59:25" pos:end="59:27">cpu</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:41">tb_jmp_cache</name><index pos:start="59:42" pos:end="59:44">[<expr pos:start="59:43" pos:end="59:43"><name pos:start="59:43" pos:end="59:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="59:47" pos:end="59:50"><expr pos:start="59:47" pos:end="59:50"><name pos:start="59:47" pos:end="59:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:11">tcg_ctx</name><operator pos:start="67:12" pos:end="67:12">.</operator><name pos:start="67:13" pos:end="67:18">tb_ctx</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:25">nb_tbs</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <literal type="number" pos:start="67:29" pos:end="67:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:65"><expr pos:start="69:5" pos:end="69:64"><call pos:start="69:5" pos:end="69:64"><name pos:start="69:5" pos:end="69:18">qht_reset_size</name><argument_list pos:start="69:19" pos:end="69:64">(<argument pos:start="69:20" pos:end="69:41"><expr pos:start="69:20" pos:end="69:41"><operator pos:start="69:20" pos:end="69:20">&amp;</operator><name pos:start="69:21" pos:end="69:41"><name pos:start="69:21" pos:end="69:27">tcg_ctx</name><operator pos:start="69:28" pos:end="69:28">.</operator><name pos:start="69:29" pos:end="69:34">tb_ctx</name><operator pos:start="69:35" pos:end="69:35">.</operator><name pos:start="69:36" pos:end="69:41">htable</name></name></expr></argument>, <argument pos:start="69:44" pos:end="69:63"><expr pos:start="69:44" pos:end="69:63"><name pos:start="69:44" pos:end="69:63">CODE_GEN_HTABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:20"><expr pos:start="71:5" pos:end="71:19"><call pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:17">page_flush_tb</name><argument_list pos:start="71:18" pos:end="71:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:51"><expr pos:start="75:5" pos:end="75:50"><name pos:start="75:5" pos:end="75:24"><name pos:start="75:5" pos:end="75:11">tcg_ctx</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:24">code_gen_ptr</name></name> <operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:50"><name pos:start="75:28" pos:end="75:34">tcg_ctx</name><operator pos:start="75:35" pos:end="75:35">.</operator><name pos:start="75:36" pos:end="75:50">code_gen_buffer</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="77:5" pos:end="79:19">/* XXX: flush processor icache at this point if cache flush is

       expensive */</comment>

    <expr_stmt pos:start="81:5" pos:end="83:53"><expr pos:start="81:5" pos:end="83:52"><call pos:start="81:5" pos:end="83:52"><name pos:start="81:5" pos:end="81:17">atomic_mb_set</name><argument_list pos:start="81:18" pos:end="83:52">(<argument pos:start="81:19" pos:end="81:48"><expr pos:start="81:19" pos:end="81:48"><operator pos:start="81:19" pos:end="81:19">&amp;</operator><name pos:start="81:20" pos:end="81:48"><name pos:start="81:20" pos:end="81:26">tcg_ctx</name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:33">tb_ctx</name><operator pos:start="81:34" pos:end="81:34">.</operator><name pos:start="81:35" pos:end="81:48">tb_flush_count</name></name></expr></argument>,

                  <argument pos:start="83:19" pos:end="83:51"><expr pos:start="83:19" pos:end="83:51"><name pos:start="83:19" pos:end="83:47"><name pos:start="83:19" pos:end="83:25">tcg_ctx</name><operator pos:start="83:26" pos:end="83:26">.</operator><name pos:start="83:27" pos:end="83:32">tb_ctx</name><operator pos:start="83:33" pos:end="83:33">.</operator><name pos:start="83:34" pos:end="83:47">tb_flush_count</name></name> <operator pos:start="83:49" pos:end="83:49">+</operator> <literal type="number" pos:start="83:51" pos:end="83:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="87:1" pos:end="87:5"><name pos:start="87:1" pos:end="87:4">done</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:13">tb_unlock</name><argument_list pos:start="89:14" pos:end="89:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
