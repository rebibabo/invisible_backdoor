<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27252.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:40">handle_aiocb_write_zeroes</name><parameter_list pos:start="1:41" pos:end="1:64">(<parameter pos:start="1:42" pos:end="1:63"><decl pos:start="1:42" pos:end="1:63"><type pos:start="1:42" pos:end="1:58"><name pos:start="1:42" pos:end="1:56">RawPosixAIOData</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:63">aiocb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:15">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:25">= <expr pos:start="5:15" pos:end="5:25"><operator pos:start="5:15" pos:end="5:15">-</operator><name pos:start="5:16" pos:end="5:25">EOPNOTSUPP</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:39">= <expr pos:start="7:23" pos:end="7:39"><name pos:start="7:23" pos:end="7:39"><name pos:start="7:23" pos:end="7:27">aiocb</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:31">bs</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:39">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:33">(<expr pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:27">has_write_zeroes</name></name> <operator pos:start="11:29" pos:end="11:30">==</operator> <literal type="number" pos:start="11:32" pos:end="11:32">0</literal></expr>)</condition> <block pos:start="11:35" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:24">

        <return pos:start="13:9" pos:end="13:24">return <expr pos:start="13:16" pos:end="13:23"><operator pos:start="13:16" pos:end="13:16">-</operator><name pos:start="13:17" pos:end="13:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="53:5"><if pos:start="19:5" pos:end="41:5">if <condition pos:start="19:8" pos:end="19:42">(<expr pos:start="19:9" pos:end="19:41"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:13">aiocb</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:23">aio_type</name></name> <operator pos:start="19:25" pos:end="19:25">&amp;</operator> <name pos:start="19:27" pos:end="19:41">QEMU_AIO_BLKDEV</name></expr>)</condition> <block pos:start="19:44" pos:end="41:5">{<block_content pos:start="23:9" pos:end="40:0">

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">BLKZEROOUT</name></cpp:ifdef>

        <do pos:start="23:9" pos:end="33:33">do <block pos:start="23:12" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:13">

            <decl_stmt pos:start="25:13" pos:end="25:73"><decl pos:start="25:13" pos:end="25:72"><type pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:20">uint64_t</name></type> <name pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:26">range</name><index pos:start="25:27" pos:end="25:29">[<expr pos:start="25:28" pos:end="25:28"><literal type="number" pos:start="25:28" pos:end="25:28">2</literal></expr>]</index></name> <init pos:start="25:31" pos:end="25:72">= <expr pos:start="25:33" pos:end="25:72"><block pos:start="25:33" pos:end="25:72">{ <expr pos:start="25:35" pos:end="25:51"><name pos:start="25:35" pos:end="25:51"><name pos:start="25:35" pos:end="25:39">aiocb</name><operator pos:start="25:40" pos:end="25:41">-&gt;</operator><name pos:start="25:42" pos:end="25:51">aio_offset</name></name></expr>, <expr pos:start="25:54" pos:end="25:70"><name pos:start="25:54" pos:end="25:70"><name pos:start="25:54" pos:end="25:58">aiocb</name><operator pos:start="25:59" pos:end="25:60">-&gt;</operator><name pos:start="25:61" pos:end="25:70">aio_nbytes</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="27:13" pos:end="31:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:65">(<expr pos:start="27:17" pos:end="27:64"><call pos:start="27:17" pos:end="27:59"><name pos:start="27:17" pos:end="27:21">ioctl</name><argument_list pos:start="27:22" pos:end="27:59">(<argument pos:start="27:23" pos:end="27:39"><expr pos:start="27:23" pos:end="27:39"><name pos:start="27:23" pos:end="27:39"><name pos:start="27:23" pos:end="27:27">aiocb</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:39">aio_fildes</name></name></expr></argument>, <argument pos:start="27:42" pos:end="27:51"><expr pos:start="27:42" pos:end="27:51"><name pos:start="27:42" pos:end="27:51">BLKZEROOUT</name></expr></argument>, <argument pos:start="27:54" pos:end="27:58"><expr pos:start="27:54" pos:end="27:58"><name pos:start="27:54" pos:end="27:58">range</name></expr></argument>)</argument_list></call> <operator pos:start="27:61" pos:end="27:62">==</operator> <literal type="number" pos:start="27:64" pos:end="27:64">0</literal></expr>)</condition> <block pos:start="27:67" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:25">

                <return pos:start="29:17" pos:end="29:25">return <expr pos:start="29:24" pos:end="29:24"><literal type="number" pos:start="29:24" pos:end="29:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="33:17" pos:end="33:32">(<expr pos:start="33:18" pos:end="33:31"><name pos:start="33:18" pos:end="33:22">errno</name> <operator pos:start="33:24" pos:end="33:25">==</operator> <name pos:start="33:27" pos:end="33:31">EINTR</name></expr>)</condition>;</do>



        <expr_stmt pos:start="37:9" pos:end="40:0"><expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">-</operator><name pos:start="37:16" pos:end="37:20">errno</name></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="53:5">else <block pos:start="41:12" pos:end="53:5">{<block_content pos:start="45:9" pos:end="52:0">

<cpp:ifdef pos:start="43:1" pos:end="43:17">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:17">CONFIG_XFS</name></cpp:ifdef>

        <if_stmt pos:start="45:9" pos:end="52:0"><if pos:start="45:9" pos:end="52:0">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:21">is_xfs</name></name></expr>)</condition> <block pos:start="45:24" pos:end="52:0">{<block_content pos:start="47:13" pos:end="47:77">

            <return pos:start="47:13" pos:end="47:77">return <expr pos:start="47:20" pos:end="47:76"><call pos:start="47:20" pos:end="47:76"><name pos:start="47:20" pos:end="47:35">xfs_write_zeroes</name><argument_list pos:start="47:36" pos:end="47:76">(<argument pos:start="47:37" pos:end="47:37"><expr pos:start="47:37" pos:end="47:37"><name pos:start="47:37" pos:end="47:37">s</name></expr></argument>, <argument pos:start="47:40" pos:end="47:56"><expr pos:start="47:40" pos:end="47:56"><name pos:start="47:40" pos:end="47:56"><name pos:start="47:40" pos:end="47:44">aiocb</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:56">aio_offset</name></name></expr></argument>, <argument pos:start="47:59" pos:end="47:75"><expr pos:start="47:59" pos:end="47:75"><name pos:start="47:59" pos:end="47:75"><name pos:start="47:59" pos:end="47:63">aiocb</name><operator pos:start="47:64" pos:end="47:65">-&gt;</operator><name pos:start="47:66" pos:end="47:75">aio_nbytes</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:28"><name pos:start="57:11" pos:end="57:23">translate_err</name><argument_list pos:start="57:24" pos:end="57:28">(<argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:24">(<expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:14">==</operator> <operator pos:start="59:16" pos:end="59:16">-</operator><name pos:start="59:17" pos:end="59:23">ENOTSUP</name></expr>)</condition> <block pos:start="59:26" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:36">

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:27">has_write_zeroes</name></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <name pos:start="61:31" pos:end="61:35">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:15">return <expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
