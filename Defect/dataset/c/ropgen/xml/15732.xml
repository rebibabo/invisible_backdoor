<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15732.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:71"><name pos:start="1:1" pos:end="1:13">opts_type_int</name><argument_list pos:start="1:14" pos:end="1:71">(<argument pos:start="1:15" pos:end="1:24">Visitor *v</argument>, <argument pos:start="1:27" pos:end="1:38">int64_t *obj</argument>, <argument pos:start="1:41" pos:end="1:56">const char *name</argument>, <argument pos:start="1:59" pos:end="1:70">Error **errp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:70">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OptsVisitor</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">ov</name> <init pos:start="5:21" pos:end="5:56">= <expr pos:start="5:23" pos:end="5:56"><call pos:start="5:23" pos:end="5:56"><name pos:start="5:23" pos:end="5:31">DO_UPCAST</name><argument_list pos:start="5:32" pos:end="5:56">(<argument pos:start="5:33" pos:end="5:43"><expr pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:43">OptsVisitor</name></expr></argument>, <argument pos:start="5:46" pos:end="5:52"><expr pos:start="5:46" pos:end="5:52"><name pos:start="5:46" pos:end="5:52">visitor</name></expr></argument>, <argument pos:start="5:55" pos:end="5:55"><expr pos:start="5:55" pos:end="5:55"><name pos:start="5:55" pos:end="5:55">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">QemuOpt</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">opt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">long</name> <name pos:start="11:10" pos:end="11:13">long</name></type> <name pos:start="11:15" pos:end="11:17">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:16">endptr</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:44">(<expr pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:10">ov</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:21">list_mode</name></name> <operator pos:start="17:23" pos:end="17:24">==</operator> <name pos:start="17:26" pos:end="17:43">LM_SIGNED_INTERVAL</name></expr>)</condition> <block pos:start="17:46" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><operator pos:start="19:9" pos:end="19:9">*</operator><name pos:start="19:10" pos:end="19:12">obj</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:31"><name pos:start="19:16" pos:end="19:17">ov</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:29">range_next</name><operator pos:start="19:30" pos:end="19:30">.</operator><name pos:start="19:31" pos:end="19:31">s</name></name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:7">opt</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:39"><name pos:start="27:11" pos:end="27:23">lookup_scalar</name><argument_list pos:start="27:24" pos:end="27:39">(<argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><name pos:start="27:25" pos:end="27:26">ov</name></expr></argument>, <argument pos:start="27:29" pos:end="27:32"><expr pos:start="27:29" pos:end="27:32"><name pos:start="27:29" pos:end="27:32">name</name></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:13">(<expr pos:start="29:9" pos:end="29:12"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:12">opt</name></expr>)</condition> <block pos:start="29:15" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:7">str</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <ternary pos:start="35:11" pos:end="35:34"><condition pos:start="35:11" pos:end="35:20"><expr pos:start="35:11" pos:end="35:18"><name pos:start="35:11" pos:end="35:18"><name pos:start="35:11" pos:end="35:13">opt</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">str</name></name></expr> ?</condition><then pos:start="35:22" pos:end="35:29"> <expr pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:24">opt</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:29">str</name></name></expr> </then><else pos:start="35:31" pos:end="35:34">: <expr pos:start="35:33" pos:end="35:34"><literal type="string" pos:start="35:33" pos:end="35:34">""</literal></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:43">/* we've gotten past lookup_scalar() */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:72"><expr pos:start="41:5" pos:end="41:71"><call pos:start="41:5" pos:end="41:71"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:71">(<argument pos:start="41:12" pos:end="41:70"><expr pos:start="41:12" pos:end="41:70"><name pos:start="41:12" pos:end="41:24"><name pos:start="41:12" pos:end="41:13">ov</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:24">list_mode</name></name> <operator pos:start="41:26" pos:end="41:27">==</operator> <name pos:start="41:29" pos:end="41:35">LM_NONE</name> <operator pos:start="41:37" pos:end="41:38">||</operator> <name pos:start="41:40" pos:end="41:52"><name pos:start="41:40" pos:end="41:41">ov</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:52">list_mode</name></name> <operator pos:start="41:54" pos:end="41:55">==</operator> <name pos:start="41:57" pos:end="41:70">LM_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:14"><expr pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:9">errno</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <literal type="number" pos:start="45:13" pos:end="45:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:7">val</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:34"><name pos:start="47:11" pos:end="47:17">strtoll</name><argument_list pos:start="47:18" pos:end="47:34">(<argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><name pos:start="47:19" pos:end="47:21">str</name></expr></argument>, <argument pos:start="47:24" pos:end="47:30"><expr pos:start="47:24" pos:end="47:30"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:30">endptr</name></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="93:5"><if pos:start="49:5" pos:end="93:5">if <condition pos:start="49:8" pos:end="49:75">(<expr pos:start="49:9" pos:end="49:74"><name pos:start="49:9" pos:end="49:13">errno</name> <operator pos:start="49:15" pos:end="49:16">==</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal> <operator pos:start="49:20" pos:end="49:21">&amp;&amp;</operator> <name pos:start="49:23" pos:end="49:28">endptr</name> <operator pos:start="49:30" pos:end="49:30">&gt;</operator> <name pos:start="49:32" pos:end="49:34">str</name> <operator pos:start="49:36" pos:end="49:37">&amp;&amp;</operator> <name pos:start="49:39" pos:end="49:47">INT64_MIN</name> <operator pos:start="49:49" pos:end="49:50">&lt;=</operator> <name pos:start="49:52" pos:end="49:54">val</name> <operator pos:start="49:56" pos:end="49:57">&amp;&amp;</operator> <name pos:start="49:59" pos:end="49:61">val</name> <operator pos:start="49:63" pos:end="49:64">&lt;=</operator> <name pos:start="49:66" pos:end="49:74">INT64_MAX</name></expr>)</condition> <block pos:start="49:77" pos:end="93:5">{<block_content pos:start="51:9" pos:end="91:9">

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:28">(<expr pos:start="51:13" pos:end="51:27"><operator pos:start="51:13" pos:end="51:13">*</operator><name pos:start="51:14" pos:end="51:19">endptr</name> <operator pos:start="51:21" pos:end="51:22">==</operator> <literal type="char" pos:start="51:24" pos:end="51:27">'\0'</literal></expr>)</condition> <block pos:start="51:30" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:19">

            <expr_stmt pos:start="53:13" pos:end="53:23"><expr pos:start="53:13" pos:end="53:22"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:16">obj</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:22">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:32"><expr pos:start="55:13" pos:end="55:31"><call pos:start="55:13" pos:end="55:31"><name pos:start="55:13" pos:end="55:21">processed</name><argument_list pos:start="55:22" pos:end="55:31">(<argument pos:start="55:23" pos:end="55:24"><expr pos:start="55:23" pos:end="55:24"><name pos:start="55:23" pos:end="55:24">ov</name></expr></argument>, <argument pos:start="55:27" pos:end="55:30"><expr pos:start="55:27" pos:end="55:30"><name pos:start="55:27" pos:end="55:30">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="91:9"><if pos:start="61:9" pos:end="91:9">if <condition pos:start="61:12" pos:end="61:62">(<expr pos:start="61:13" pos:end="61:61"><operator pos:start="61:13" pos:end="61:13">*</operator><name pos:start="61:14" pos:end="61:19">endptr</name> <operator pos:start="61:21" pos:end="61:22">==</operator> <literal type="char" pos:start="61:24" pos:end="61:26">'-'</literal> <operator pos:start="61:28" pos:end="61:29">&amp;&amp;</operator> <name pos:start="61:31" pos:end="61:43"><name pos:start="61:31" pos:end="61:32">ov</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:43">list_mode</name></name> <operator pos:start="61:45" pos:end="61:46">==</operator> <name pos:start="61:48" pos:end="61:61">LM_IN_PROGRESS</name></expr>)</condition> <block pos:start="61:64" pos:end="91:9">{<block_content pos:start="63:13" pos:end="89:13">

            <decl_stmt pos:start="63:13" pos:end="63:27"><decl pos:start="63:13" pos:end="63:26"><type pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:16">long</name> <name pos:start="63:18" pos:end="63:21">long</name></type> <name pos:start="63:23" pos:end="63:26">val2</name></decl>;</decl_stmt>



            <expr_stmt pos:start="67:13" pos:end="67:29"><expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:15">str</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:24">endptr</name> <operator pos:start="67:26" pos:end="67:26">+</operator> <literal type="number" pos:start="67:28" pos:end="67:28">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:44"><expr pos:start="69:13" pos:end="69:43"><name pos:start="69:13" pos:end="69:16">val2</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:43"><name pos:start="69:20" pos:end="69:26">strtoll</name><argument_list pos:start="69:27" pos:end="69:43">(<argument pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">str</name></expr></argument>, <argument pos:start="69:33" pos:end="69:39"><expr pos:start="69:33" pos:end="69:39"><operator pos:start="69:33" pos:end="69:33">&amp;</operator><name pos:start="69:34" pos:end="69:39">endptr</name></expr></argument>, <argument pos:start="69:42" pos:end="69:42"><expr pos:start="69:42" pos:end="69:42"><literal type="number" pos:start="69:42" pos:end="69:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="89:13"><if pos:start="71:13" pos:end="89:13">if <condition pos:start="71:16" pos:end="73:70">(<expr pos:start="71:17" pos:end="73:69"><name pos:start="71:17" pos:end="71:21">errno</name> <operator pos:start="71:23" pos:end="71:24">==</operator> <literal type="number" pos:start="71:26" pos:end="71:26">0</literal> <operator pos:start="71:28" pos:end="71:29">&amp;&amp;</operator> <name pos:start="71:31" pos:end="71:36">endptr</name> <operator pos:start="71:38" pos:end="71:38">&gt;</operator> <name pos:start="71:40" pos:end="71:42">str</name> <operator pos:start="71:44" pos:end="71:45">&amp;&amp;</operator> <operator pos:start="71:47" pos:end="71:47">*</operator><name pos:start="71:48" pos:end="71:53">endptr</name> <operator pos:start="71:55" pos:end="71:56">==</operator> <literal type="char" pos:start="71:58" pos:end="71:61">'\0'</literal> <operator pos:start="71:63" pos:end="71:64">&amp;&amp;</operator>

                <name pos:start="73:17" pos:end="73:25">INT64_MIN</name> <operator pos:start="73:27" pos:end="73:28">&lt;=</operator> <name pos:start="73:30" pos:end="73:33">val2</name> <operator pos:start="73:35" pos:end="73:36">&amp;&amp;</operator> <name pos:start="73:38" pos:end="73:41">val2</name> <operator pos:start="73:43" pos:end="73:44">&lt;=</operator> <name pos:start="73:46" pos:end="73:54">INT64_MAX</name> <operator pos:start="73:56" pos:end="73:57">&amp;&amp;</operator> <name pos:start="73:59" pos:end="73:61">val</name> <operator pos:start="73:63" pos:end="73:64">&lt;=</operator> <name pos:start="73:66" pos:end="73:69">val2</name></expr>)</condition> <block pos:start="73:72" pos:end="89:13">{<block_content pos:start="75:17" pos:end="87:23">

                <expr_stmt pos:start="75:17" pos:end="75:39"><expr pos:start="75:17" pos:end="75:38"><name pos:start="75:17" pos:end="75:32"><name pos:start="75:17" pos:end="75:18">ov</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:30">range_next</name><operator pos:start="75:31" pos:end="75:31">.</operator><name pos:start="75:32" pos:end="75:32">s</name></name> <operator pos:start="75:34" pos:end="75:34">=</operator> <name pos:start="75:36" pos:end="75:38">val</name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:41"><expr pos:start="77:17" pos:end="77:40"><name pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:18">ov</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:31">range_limit</name><operator pos:start="77:32" pos:end="77:32">.</operator><name pos:start="77:33" pos:end="77:33">s</name></name> <operator pos:start="77:35" pos:end="77:35">=</operator> <name pos:start="77:37" pos:end="77:40">val2</name></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:51"><expr pos:start="79:17" pos:end="79:50"><name pos:start="79:17" pos:end="79:29"><name pos:start="79:17" pos:end="79:18">ov</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:29">list_mode</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <name pos:start="79:33" pos:end="79:50">LM_SIGNED_INTERVAL</name></expr>;</expr_stmt>



                <comment type="block" pos:start="83:17" pos:end="83:47">/* as if entering on the top */</comment>

                <expr_stmt pos:start="85:17" pos:end="85:40"><expr pos:start="85:17" pos:end="85:39"><operator pos:start="85:17" pos:end="85:17">*</operator><name pos:start="85:18" pos:end="85:20">obj</name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:39"><name pos:start="85:24" pos:end="85:25">ov</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:37">range_next</name><operator pos:start="85:38" pos:end="85:38">.</operator><name pos:start="85:39" pos:end="85:39">s</name></name></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="99:70"><expr pos:start="95:5" pos:end="99:69"><call pos:start="95:5" pos:end="99:69"><name pos:start="95:5" pos:end="95:13">error_set</name><argument_list pos:start="95:14" pos:end="99:69">(<argument pos:start="95:15" pos:end="95:18"><expr pos:start="95:15" pos:end="95:18"><name pos:start="95:15" pos:end="95:18">errp</name></expr></argument>, <argument pos:start="95:21" pos:end="95:48"><expr pos:start="95:21" pos:end="95:48"><name pos:start="95:21" pos:end="95:48">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="95:51" pos:end="95:59"><expr pos:start="95:51" pos:end="95:59"><name pos:start="95:51" pos:end="95:59"><name pos:start="95:51" pos:end="95:53">opt</name><operator pos:start="95:54" pos:end="95:55">-&gt;</operator><name pos:start="95:56" pos:end="95:59">name</name></name></expr></argument>,

              <argument pos:start="97:15" pos:end="99:68"><expr pos:start="97:15" pos:end="99:68"><ternary pos:start="97:15" pos:end="99:68"><condition pos:start="97:15" pos:end="97:42"><expr pos:start="97:15" pos:end="97:40"><operator pos:start="97:15" pos:end="97:15">(</operator><name pos:start="97:16" pos:end="97:28"><name pos:start="97:16" pos:end="97:17">ov</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:28">list_mode</name></name> <operator pos:start="97:30" pos:end="97:31">==</operator> <name pos:start="97:33" pos:end="97:39">LM_NONE</name><operator pos:start="97:40" pos:end="97:40">)</operator></expr> ?</condition><then pos:start="97:44" pos:end="97:59"> <expr pos:start="97:44" pos:end="97:59"><literal type="string" pos:start="97:44" pos:end="97:59">"an int64 value"</literal></expr> </then><else pos:start="97:61" pos:end="99:68">:

                                           <expr pos:start="99:44" pos:end="99:68"><literal type="string" pos:start="99:44" pos:end="99:68">"an int64 value or range"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
