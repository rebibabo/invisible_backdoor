<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7985.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stsz</name><parameter_list pos:start="1:25" pos:end="1:75">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><name pos:start="1:60" pos:end="1:69">MOV_atom_t</name></type> <name pos:start="1:71" pos:end="1:74">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:61"><decl pos:start="7:5" pos:end="7:60"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name> <init pos:start="7:26" pos:end="7:60">= <expr pos:start="7:28" pos:end="7:60"><operator pos:start="7:28" pos:end="7:28">(</operator><name pos:start="7:29" pos:end="7:44">MOVStreamContext</name> <operator pos:start="7:46" pos:end="7:46">*</operator><operator pos:start="7:47" pos:end="7:47">)</operator><name pos:start="7:48" pos:end="7:60"><name pos:start="7:48" pos:end="7:49">st</name><operator pos:start="7:50" pos:end="7:51">-&gt;</operator><name pos:start="7:52" pos:end="7:60">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">entries</name></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><call pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:14">print_atom</name><argument_list pos:start="13:15" pos:end="13:28">(<argument pos:start="13:16" pos:end="13:21"><expr pos:start="13:16" pos:end="13:21"><literal type="string" pos:start="13:16" pos:end="13:21">"stsz"</literal></expr></argument>, <argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><call pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">get_byte</name><argument_list pos:start="17:13" pos:end="17:16">(<argument pos:start="17:14" pos:end="17:15"><expr pos:start="17:14" pos:end="17:15"><name pos:start="17:14" pos:end="17:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:19" pos:end="17:31">/* version */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><call pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">get_byte</name><argument_list pos:start="19:13" pos:end="19:16">(<argument pos:start="19:14" pos:end="19:15"><expr pos:start="19:14" pos:end="19:15"><name pos:start="19:14" pos:end="19:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="19:19" pos:end="19:31"><expr pos:start="19:19" pos:end="19:30"><call pos:start="19:19" pos:end="19:30"><name pos:start="19:19" pos:end="19:26">get_byte</name><argument_list pos:start="19:27" pos:end="19:30">(<argument pos:start="19:28" pos:end="19:29"><expr pos:start="19:28" pos:end="19:29"><name pos:start="19:28" pos:end="19:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="19:33" pos:end="19:45"><expr pos:start="19:33" pos:end="19:44"><call pos:start="19:33" pos:end="19:44"><name pos:start="19:33" pos:end="19:40">get_byte</name><argument_list pos:start="19:41" pos:end="19:44">(<argument pos:start="19:42" pos:end="19:43"><expr pos:start="19:42" pos:end="19:43"><name pos:start="19:42" pos:end="19:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="19:47" pos:end="19:57">/* flags */</comment>



    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:6">sc</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:19">sample_size</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:30">get_be32</name><argument_list pos:start="23:31" pos:end="23:34">(<argument pos:start="23:32" pos:end="23:33"><expr pos:start="23:32" pos:end="23:33"><name pos:start="23:32" pos:end="23:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:11">entries</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:26"><name pos:start="25:15" pos:end="25:22">get_be32</name><argument_list pos:start="25:23" pos:end="25:26">(<argument pos:start="25:24" pos:end="25:25"><expr pos:start="25:24" pos:end="25:25"><name pos:start="25:24" pos:end="25:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:6">sc</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:20">sample_count</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:30">entries</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="29:1" pos:end="29:12">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:107"><call pos:start="31:5" pos:end="31:107"><name pos:start="31:5" pos:end="31:10">av_log</name><argument_list pos:start="31:11" pos:end="31:107">(<argument pos:start="31:12" pos:end="31:15"><expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">NULL</name></expr></argument>, <argument pos:start="31:18" pos:end="31:29"><expr pos:start="31:18" pos:end="31:29"><name pos:start="31:18" pos:end="31:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="31:32" pos:end="31:71"><expr pos:start="31:32" pos:end="31:71"><literal type="string" pos:start="31:32" pos:end="31:71">"sample_size = %ld sample_count = %ld\n"</literal></expr></argument>, <argument pos:start="31:74" pos:end="31:88"><expr pos:start="31:74" pos:end="31:88"><name pos:start="31:74" pos:end="31:88"><name pos:start="31:74" pos:end="31:75">sc</name><operator pos:start="31:76" pos:end="31:77">-&gt;</operator><name pos:start="31:78" pos:end="31:88">sample_size</name></name></expr></argument>, <argument pos:start="31:91" pos:end="31:106"><expr pos:start="31:91" pos:end="31:106"><name pos:start="31:91" pos:end="31:106"><name pos:start="31:91" pos:end="31:92">sc</name><operator pos:start="31:93" pos:end="31:94">-&gt;</operator><name pos:start="31:95" pos:end="31:106">sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="35:5" pos:end="37:17"><if pos:start="35:5" pos:end="37:17">if<condition pos:start="35:7" pos:end="35:23">(<expr pos:start="35:8" pos:end="35:22"><name pos:start="35:8" pos:end="35:22"><name pos:start="35:8" pos:end="35:9">sc</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:22">sample_size</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:17"><block_content pos:start="37:9" pos:end="37:17">

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="37:19" pos:end="37:55">/* there isn't any table following */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:65"><expr pos:start="39:5" pos:end="39:64"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:6">sc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:20">sample_sizes</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <operator pos:start="39:24" pos:end="39:24">(</operator><name pos:start="39:25" pos:end="39:28">long</name><operator pos:start="39:29" pos:end="39:29">*</operator><operator pos:start="39:30" pos:end="39:30">)</operator> <call pos:start="39:32" pos:end="39:64"><name pos:start="39:32" pos:end="39:40">av_malloc</name><argument_list pos:start="39:41" pos:end="39:64">(<argument pos:start="39:42" pos:end="39:63"><expr pos:start="39:42" pos:end="39:63"><name pos:start="39:42" pos:end="39:48">entries</name> <operator pos:start="39:50" pos:end="39:50">*</operator> <sizeof pos:start="39:52" pos:end="39:63">sizeof<argument_list pos:start="39:58" pos:end="39:63">(<argument pos:start="39:59" pos:end="39:62"><expr pos:start="39:59" pos:end="39:62"><name pos:start="39:59" pos:end="39:62">long</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:18"><if pos:start="41:5" pos:end="43:18">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:11">sc</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:25">sample_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:18"><block_content pos:start="43:9" pos:end="43:18">

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="45:5" pos:end="55:5">for<control pos:start="45:8" pos:end="45:28">(<init pos:start="45:9" pos:end="45:12"><expr pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:9">i</name><operator pos:start="45:10" pos:end="45:10">=</operator><literal type="number" pos:start="45:11" pos:end="45:11">0</literal></expr>;</init> <condition pos:start="45:14" pos:end="45:23"><expr pos:start="45:14" pos:end="45:22"><name pos:start="45:14" pos:end="45:14">i</name><operator pos:start="45:15" pos:end="45:15">&lt;</operator><name pos:start="45:16" pos:end="45:22">entries</name></expr>;</condition> <incr pos:start="45:25" pos:end="45:27"><expr pos:start="45:25" pos:end="45:27"><name pos:start="45:25" pos:end="45:25">i</name><operator pos:start="45:26" pos:end="45:27">++</operator></expr></incr>)</control> <block pos:start="45:30" pos:end="55:5">{<block_content pos:start="47:9" pos:end="54:0">

        <expr_stmt pos:start="47:9" pos:end="54:0"><expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:10">sc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:24">sample_sizes</name><index pos:start="47:25" pos:end="47:27">[<expr pos:start="47:26" pos:end="47:26"><name pos:start="47:26" pos:end="47:26">i</name></expr>]</index></name> <operator pos:start="47:29" pos:end="47:29">=</operator> <call pos:start="47:31" pos:end="47:42"><name pos:start="47:31" pos:end="47:38">get_be32</name><argument_list pos:start="47:39" pos:end="47:42">(<argument pos:start="47:40" pos:end="47:41"><expr pos:start="47:40" pos:end="47:41"><name pos:start="47:40" pos:end="47:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:12">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:12">DEBUG</name></cpp:ifdef>

<comment type="block" pos:start="51:1" pos:end="51:85">/*        av_log(NULL, AV_LOG_DEBUG, "sample_sizes[]=%ld\n", sc-&gt;sample_sizes[i]); */</comment>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>

    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
