<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7006.c" pos:tabs="8"><function pos:start="1:1" pos:end="216:18"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_chunks</name><parameter_list pos:start="1:25" pos:end="3:58">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:41"><decl pos:start="2:26" pos:end="2:41"><type pos:start="2:26" pos:end="2:41"><name pos:start="2:26" pos:end="2:32">AVFrame</name> <modifier pos:start="2:34" pos:end="2:34">*</modifier></type><name pos:start="2:35" pos:end="2:41">picture</name></decl></parameter>, <parameter pos:start="2:44" pos:end="2:58"><decl pos:start="2:44" pos:end="2:58"><type pos:start="2:44" pos:end="2:58"><name pos:start="2:44" pos:end="2:46">int</name> <modifier pos:start="2:48" pos:end="2:48">*</modifier></type><name pos:start="2:49" pos:end="2:58">got_output</name></decl></parameter>,
                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:38">uint8_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:43">buf</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:57">buf_size</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="216:18">{<block_content pos:start="5:5" pos:end="216:18">
    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">Mpeg1Context</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:42"><decl pos:start="6:5" pos:end="6:41"><type pos:start="6:5" pos:end="6:20"><name pos:start="6:5" pos:end="6:18">MpegEncContext</name> <modifier pos:start="6:20" pos:end="6:20">*</modifier></type><name pos:start="6:21" pos:end="6:22">s2</name> <init pos:start="6:24" pos:end="6:41">= <expr pos:start="6:26" pos:end="6:41"><operator pos:start="6:26" pos:end="6:26">&amp;</operator><name pos:start="6:27" pos:end="6:41"><name pos:start="6:27" pos:end="6:27">s</name><operator pos:start="6:28" pos:end="6:29">-&gt;</operator><name pos:start="6:30" pos:end="6:41">mpeg_enc_ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:26">buf_ptr</name> <init pos:start="7:28" pos:end="7:32">= <expr pos:start="7:30" pos:end="7:32"><name pos:start="7:30" pos:end="7:32">buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:44"><decl pos:start="8:5" pos:end="8:43"><type pos:start="8:5" pos:end="8:19"><specifier pos:start="8:5" pos:end="8:9">const</specifier> <name pos:start="8:11" pos:end="8:17">uint8_t</name> <modifier pos:start="8:19" pos:end="8:19">*</modifier></type><name pos:start="8:20" pos:end="8:26">buf_end</name> <init pos:start="8:28" pos:end="8:43">= <expr pos:start="8:30" pos:end="8:43"><name pos:start="8:30" pos:end="8:32">buf</name> <operator pos:start="8:34" pos:end="8:34">+</operator> <name pos:start="8:36" pos:end="8:43">buf_size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:23">input_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:38"><decl pos:start="10:5" pos:end="10:21"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:17">last_code</name> <init pos:start="10:19" pos:end="10:21">= <expr pos:start="10:21" pos:end="10:21"><literal type="number" pos:start="10:21" pos:end="10:21">0</literal></expr></init></decl>, <decl pos:start="10:24" pos:end="10:37"><type ref="prev" pos:start="10:5" pos:end="10:7"/><name pos:start="10:24" pos:end="10:33">skip_frame</name> <init pos:start="10:35" pos:end="10:37">= <expr pos:start="10:37" pos:end="10:37"><literal type="number" pos:start="10:37" pos:end="10:37">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:31">picture_start_code_seen</name> <init pos:start="11:33" pos:end="11:35">= <expr pos:start="11:35" pos:end="11:35"><literal type="number" pos:start="11:35" pos:end="11:35">0</literal></expr></init></decl>;</decl_stmt>
    <for pos:start="12:5" pos:end="216:18">for <control pos:start="12:9" pos:end="12:12">(<init pos:start="12:10" pos:end="12:10">;</init><condition pos:start="12:11" pos:end="12:11">;</condition><incr/>)</control> <block pos:start="12:14" pos:end="216:18">{<block_content pos:start="14:9" pos:end="216:18">
        <comment type="block" pos:start="13:9" pos:end="13:34">/* find next start code */</comment>
        <decl_stmt pos:start="14:9" pos:end="14:33"><decl pos:start="14:9" pos:end="14:32"><type pos:start="14:9" pos:end="14:16"><name pos:start="14:9" pos:end="14:16">uint32_t</name></type> <name pos:start="14:18" pos:end="14:27">start_code</name> <init pos:start="14:29" pos:end="14:32">= <expr pos:start="14:31" pos:end="14:32"><operator pos:start="14:31" pos:end="14:31">-</operator><literal type="number" pos:start="14:32" pos:end="14:32">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:72"><expr pos:start="15:9" pos:end="15:71"><name pos:start="15:9" pos:end="15:15">buf_ptr</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="15:71"><name pos:start="15:19" pos:end="15:40">avpriv_find_start_code</name><argument_list pos:start="15:41" pos:end="15:71">(<argument pos:start="15:42" pos:end="15:48"><expr pos:start="15:42" pos:end="15:48"><name pos:start="15:42" pos:end="15:48">buf_ptr</name></expr></argument>, <argument pos:start="15:51" pos:end="15:57"><expr pos:start="15:51" pos:end="15:57"><name pos:start="15:51" pos:end="15:57">buf_end</name></expr></argument>, <argument pos:start="15:60" pos:end="15:70"><expr pos:start="15:60" pos:end="15:70"><operator pos:start="15:60" pos:end="15:60">&amp;</operator><name pos:start="15:61" pos:end="15:70">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="16:9" pos:end="216:18"><if pos:start="16:9" pos:end="216:18">if <condition pos:start="16:12" pos:end="16:31">(<expr pos:start="16:13" pos:end="16:30"><name pos:start="16:13" pos:end="16:22">start_code</name> <operator pos:start="16:24" pos:end="16:24">&gt;</operator> <literal type="number" pos:start="16:26" pos:end="16:30">0x1ff</literal></expr>)</condition> <block pos:start="16:33" pos:end="216:18">{<block_content pos:start="17:13" pos:end="216:18">
            <if_stmt pos:start="17:13" pos:end="216:18"><if pos:start="17:13" pos:end="216:18">if <condition pos:start="17:16" pos:end="17:28">(<expr pos:start="17:17" pos:end="17:27"><operator pos:start="17:17" pos:end="17:17">!</operator><name pos:start="17:18" pos:end="17:27">skip_frame</name></expr>)</condition> <block pos:start="17:30" pos:end="216:18">{<block_content pos:start="18:17" pos:end="216:18">
                <if_stmt pos:start="18:17" pos:end="216:18"><if pos:start="18:17" pos:end="216:18">if <condition pos:start="18:20" pos:end="19:36">(<expr pos:start="18:21" pos:end="19:35"><name pos:start="18:21" pos:end="18:32">HAVE_THREADS</name> <operator pos:start="18:34" pos:end="18:35">&amp;&amp;</operator> <operator pos:start="18:37" pos:end="18:37">(</operator><name pos:start="18:38" pos:end="18:62"><name pos:start="18:38" pos:end="18:42">avctx</name><operator pos:start="18:43" pos:end="18:44">-&gt;</operator><name pos:start="18:45" pos:end="18:62">active_thread_type</name></name> <operator pos:start="18:64" pos:end="18:64">&amp;</operator> <name pos:start="18:66" pos:end="18:80">FF_THREAD_SLICE</name><operator pos:start="18:81" pos:end="18:81">)</operator> <operator pos:start="18:83" pos:end="18:84">&amp;&amp;</operator>
                    <operator pos:start="19:21" pos:end="19:21">!</operator><name pos:start="19:22" pos:end="19:35"><name pos:start="19:22" pos:end="19:26">avctx</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:35">hwaccel</name></name></expr>)</condition> <block pos:start="19:38" pos:end="216:18">{<block_content pos:start="20:21" pos:end="216:18">
                    <decl_stmt pos:start="20:21" pos:end="20:26"><decl pos:start="20:21" pos:end="20:25"><type pos:start="20:21" pos:end="20:23"><name pos:start="20:21" pos:end="20:23">int</name></type> <name pos:start="20:25" pos:end="20:25">i</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="21:21" pos:end="21:56"><expr pos:start="21:21" pos:end="21:55"><call pos:start="21:21" pos:end="21:55"><name pos:start="21:21" pos:end="21:30">av_assert0</name><argument_list pos:start="21:31" pos:end="21:55">(<argument pos:start="21:32" pos:end="21:54"><expr pos:start="21:32" pos:end="21:54"><name pos:start="21:32" pos:end="21:50"><name pos:start="21:32" pos:end="21:36">avctx</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:50">thread_count</name></name> <operator pos:start="21:52" pos:end="21:52">&gt;</operator> <literal type="number" pos:start="21:54" pos:end="21:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="22:21" pos:end="22:125"><expr pos:start="22:21" pos:end="22:124"><call pos:start="22:21" pos:end="22:124"><name pos:start="22:21" pos:end="22:34"><name pos:start="22:21" pos:end="22:25">avctx</name><operator pos:start="22:26" pos:end="22:27">-&gt;</operator><name pos:start="22:28" pos:end="22:34">execute</name></name><argument_list pos:start="22:35" pos:end="22:124">(<argument pos:start="22:36" pos:end="22:40"><expr pos:start="22:36" pos:end="22:40"><name pos:start="22:36" pos:end="22:40">avctx</name></expr></argument>, <argument pos:start="22:43" pos:end="22:61"><expr pos:start="22:43" pos:end="22:61"><name pos:start="22:43" pos:end="22:61">slice_decode_thread</name></expr></argument>,  <argument pos:start="22:65" pos:end="22:86"><expr pos:start="22:65" pos:end="22:86"><operator pos:start="22:65" pos:end="22:65">&amp;</operator><name pos:start="22:66" pos:end="22:86"><name pos:start="22:66" pos:end="22:67">s2</name><operator pos:start="22:68" pos:end="22:69">-&gt;</operator><name pos:start="22:70" pos:end="22:83">thread_context</name><index pos:start="22:84" pos:end="22:86">[<expr pos:start="22:85" pos:end="22:85"><literal type="number" pos:start="22:85" pos:end="22:85">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="22:89" pos:end="22:92"><expr pos:start="22:89" pos:end="22:92"><name pos:start="22:89" pos:end="22:92">NULL</name></expr></argument>, <argument pos:start="22:95" pos:end="22:108"><expr pos:start="22:95" pos:end="22:108"><name pos:start="22:95" pos:end="22:108"><name pos:start="22:95" pos:end="22:95">s</name><operator pos:start="22:96" pos:end="22:97">-&gt;</operator><name pos:start="22:98" pos:end="22:108">slice_count</name></name></expr></argument>, <argument pos:start="22:111" pos:end="22:123"><expr pos:start="22:111" pos:end="22:123"><sizeof pos:start="22:111" pos:end="22:123">sizeof<argument_list pos:start="22:117" pos:end="22:123">(<argument pos:start="22:118" pos:end="22:122"><expr pos:start="22:118" pos:end="22:122"><name pos:start="22:118" pos:end="22:121">void</name><operator pos:start="22:122" pos:end="22:122">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for pos:start="23:21" pos:end="24:84">for <control pos:start="23:25" pos:end="23:56">(<init pos:start="23:26" pos:end="23:31"><expr pos:start="23:26" pos:end="23:30"><name pos:start="23:26" pos:end="23:26">i</name> <operator pos:start="23:28" pos:end="23:28">=</operator> <literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>;</init> <condition pos:start="23:33" pos:end="23:51"><expr pos:start="23:33" pos:end="23:50"><name pos:start="23:33" pos:end="23:33">i</name> <operator pos:start="23:35" pos:end="23:35">&lt;</operator> <name pos:start="23:37" pos:end="23:50"><name pos:start="23:37" pos:end="23:37">s</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:50">slice_count</name></name></expr>;</condition> <incr pos:start="23:53" pos:end="23:55"><expr pos:start="23:53" pos:end="23:55"><name pos:start="23:53" pos:end="23:53">i</name><operator pos:start="23:54" pos:end="23:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="24:25" pos:end="24:84"><block_content pos:start="24:25" pos:end="24:84">
                        <expr_stmt pos:start="24:25" pos:end="24:84"><expr pos:start="24:25" pos:end="24:83"><name pos:start="24:25" pos:end="24:42"><name pos:start="24:25" pos:end="24:26">s2</name><operator pos:start="24:27" pos:end="24:28">-&gt;</operator><name pos:start="24:29" pos:end="24:30">er</name><operator pos:start="24:31" pos:end="24:31">.</operator><name pos:start="24:32" pos:end="24:42">error_count</name></name> <operator pos:start="24:44" pos:end="24:45">+=</operator> <name pos:start="24:47" pos:end="24:67"><name pos:start="24:47" pos:end="24:48">s2</name><operator pos:start="24:49" pos:end="24:50">-&gt;</operator><name pos:start="24:51" pos:end="24:64">thread_context</name><index pos:start="24:65" pos:end="24:67">[<expr pos:start="24:66" pos:end="24:66"><name pos:start="24:66" pos:end="24:66">i</name></expr>]</index></name><operator pos:start="24:68" pos:end="24:69">-&gt;</operator><name pos:start="24:70" pos:end="24:83"><name pos:start="24:70" pos:end="24:71">er</name><operator pos:start="24:72" pos:end="24:72">.</operator><name pos:start="24:73" pos:end="24:83">error_count</name></name></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt pos:start="25:17" pos:end="25:48"><expr pos:start="25:17" pos:end="25:47"><name pos:start="25:17" pos:end="25:19">ret</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:47"><name pos:start="25:23" pos:end="25:31">slice_end</name><argument_list pos:start="25:32" pos:end="25:47">(<argument pos:start="25:33" pos:end="25:37"><expr pos:start="25:33" pos:end="25:37"><name pos:start="25:33" pos:end="25:37">avctx</name></expr></argument>, <argument pos:start="25:40" pos:end="25:46"><expr pos:start="25:40" pos:end="25:46"><name pos:start="25:40" pos:end="25:46">picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="26:17" pos:end="216:18"><if pos:start="26:17" pos:end="27:31">if <condition pos:start="26:20" pos:end="26:28">(<expr pos:start="26:21" pos:end="26:27"><name pos:start="26:21" pos:end="26:23">ret</name> <operator pos:start="26:25" pos:end="26:25">&lt;</operator> <literal type="number" pos:start="26:27" pos:end="26:27">0</literal></expr>)</condition><block type="pseudo" pos:start="27:21" pos:end="27:31"><block_content pos:start="27:21" pos:end="27:31">
                    <return pos:start="27:21" pos:end="27:31">return <expr pos:start="27:28" pos:end="27:30"><name pos:start="27:28" pos:end="27:30">ret</name></expr>;</return></block_content></block></if>
                <if type="elseif" pos:start="28:17" pos:end="216:18">else if <condition pos:start="28:25" pos:end="28:29">(<expr pos:start="28:26" pos:end="28:28"><name pos:start="28:26" pos:end="28:28">ret</name></expr>)</condition> <block pos:start="28:31" pos:end="216:18">{<block_content pos:start="29:21" pos:end="216:18">
                    <if_stmt pos:start="29:21" pos:end="30:40"><if pos:start="29:21" pos:end="30:40">if <condition pos:start="29:24" pos:end="29:62">(<expr pos:start="29:25" pos:end="29:61"><name pos:start="29:25" pos:end="29:44"><name pos:start="29:25" pos:end="29:26">s2</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:44">last_picture_ptr</name></name> <operator pos:start="29:46" pos:end="29:47">||</operator> <name pos:start="29:49" pos:end="29:61"><name pos:start="29:49" pos:end="29:50">s2</name><operator pos:start="29:51" pos:end="29:52">-&gt;</operator><name pos:start="29:53" pos:end="29:61">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="30:25" pos:end="30:40"><block_content pos:start="30:25" pos:end="30:40"> <comment type="line" pos:start="29:64" pos:end="29:112">//FIXME merge with the stuff in mpeg_decode_slice</comment>
                        <expr_stmt pos:start="30:25" pos:end="30:40"><expr pos:start="30:25" pos:end="30:39"><operator pos:start="30:25" pos:end="30:25">*</operator><name pos:start="30:26" pos:end="30:35">got_output</name> <operator pos:start="30:37" pos:end="30:37">=</operator> <literal type="number" pos:start="30:39" pos:end="30:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="31:13" pos:end="31:30"><expr pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:14">s2</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:25">pict_type</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr>;</expr_stmt>
            <return pos:start="32:13" pos:end="32:74">return <expr pos:start="32:20" pos:end="32:73"><call pos:start="32:20" pos:end="32:73"><name pos:start="32:20" pos:end="32:24">FFMAX</name><argument_list pos:start="32:25" pos:end="32:73">(<argument pos:start="32:26" pos:end="32:26"><expr pos:start="32:26" pos:end="32:26"><literal type="number" pos:start="32:26" pos:end="32:26">0</literal></expr></argument>, <argument pos:start="32:29" pos:end="32:72"><expr pos:start="32:29" pos:end="32:72"><name pos:start="32:29" pos:end="32:35">buf_ptr</name> <operator pos:start="32:37" pos:end="32:37">-</operator> <name pos:start="32:39" pos:end="32:41">buf</name> <operator pos:start="32:43" pos:end="32:43">-</operator> <name pos:start="32:45" pos:end="32:72"><name pos:start="32:45" pos:end="32:46">s2</name><operator pos:start="32:47" pos:end="32:48">-&gt;</operator><name pos:start="32:49" pos:end="32:61">parse_context</name><operator pos:start="32:62" pos:end="32:62">.</operator><name pos:start="32:63" pos:end="32:72">last_index</name></name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt pos:start="33:9" pos:end="33:39"><expr pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:18">input_size</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:28">buf_end</name> <operator pos:start="33:30" pos:end="33:30">-</operator> <name pos:start="33:32" pos:end="33:38">buf_ptr</name></expr>;</expr_stmt>
        <if_stmt pos:start="34:9" pos:end="216:18"><if pos:start="34:9" pos:end="216:18">if <condition pos:start="34:12" pos:end="34:46">(<expr pos:start="34:13" pos:end="34:45"><name pos:start="34:13" pos:end="34:24"><name pos:start="34:13" pos:end="34:17">avctx</name><operator pos:start="34:18" pos:end="34:19">-&gt;</operator><name pos:start="34:20" pos:end="34:24">debug</name></name> <operator pos:start="34:26" pos:end="34:26">&amp;</operator> <name pos:start="34:28" pos:end="34:45">FF_DEBUG_STARTCODE</name></expr>)</condition> <block pos:start="34:48" pos:end="216:18">{<block_content pos:start="35:13" pos:end="216:18">
            <expr_stmt pos:start="35:13" pos:end="35:101"><expr pos:start="35:13" pos:end="35:100"><call pos:start="35:13" pos:end="35:100"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:100">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="35:41" pos:end="35:62"><expr pos:start="35:41" pos:end="35:62"><literal type="string" pos:start="35:41" pos:end="35:62">"%3X at %td left %d\n"</literal></expr></argument>, <argument pos:start="35:65" pos:end="35:74"><expr pos:start="35:65" pos:end="35:74"><name pos:start="35:65" pos:end="35:74">start_code</name></expr></argument>, <argument pos:start="35:77" pos:end="35:87"><expr pos:start="35:77" pos:end="35:87"><name pos:start="35:77" pos:end="35:83">buf_ptr</name><operator pos:start="35:84" pos:end="35:84">-</operator><name pos:start="35:85" pos:end="35:87">buf</name></expr></argument>, <argument pos:start="35:90" pos:end="35:99"><expr pos:start="35:90" pos:end="35:99"><name pos:start="35:90" pos:end="35:99">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="36:9" pos:end="36:46">/* prepare data for next start code */</comment>
        <switch pos:start="37:9" pos:end="216:18">switch <condition pos:start="37:16" pos:end="37:27">(<expr pos:start="37:17" pos:end="37:26"><name pos:start="37:17" pos:end="37:26">start_code</name></expr>)</condition> <block pos:start="37:29" pos:end="216:18">{<block_content pos:start="38:9" pos:end="216:18">
        <case pos:start="38:9" pos:end="38:28">case <expr pos:start="38:14" pos:end="38:27"><name pos:start="38:14" pos:end="38:27">SEQ_START_CODE</name></expr>:</case>
            <if_stmt pos:start="39:13" pos:end="216:18"><if pos:start="39:13" pos:end="43:13">if <condition pos:start="39:16" pos:end="39:31">(<expr pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:25">last_code</name> <operator pos:start="39:27" pos:end="39:28">==</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition> <block pos:start="39:33" pos:end="43:13">{<block_content pos:start="40:17" pos:end="42:30">
                <expr_stmt pos:start="40:17" pos:end="40:66"><expr pos:start="40:17" pos:end="40:65"><call pos:start="40:17" pos:end="40:65"><name pos:start="40:17" pos:end="40:37">mpeg1_decode_sequence</name><argument_list pos:start="40:38" pos:end="40:65">(<argument pos:start="40:39" pos:end="40:43"><expr pos:start="40:39" pos:end="40:43"><name pos:start="40:39" pos:end="40:43">avctx</name></expr></argument>, <argument pos:start="40:46" pos:end="40:52"><expr pos:start="40:46" pos:end="40:52"><name pos:start="40:46" pos:end="40:52">buf_ptr</name></expr></argument>, <argument pos:start="40:55" pos:end="40:64"><expr pos:start="40:55" pos:end="40:64"><name pos:start="40:55" pos:end="40:64">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="41:17" pos:end="42:30"><if pos:start="41:17" pos:end="42:30">if<condition pos:start="41:19" pos:end="41:43">(<expr pos:start="41:20" pos:end="41:42"><name pos:start="41:20" pos:end="41:22">buf</name> <operator pos:start="41:24" pos:end="41:25">!=</operator> <name pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:31">avctx</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:42">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="42:21" pos:end="42:30"><block_content pos:start="42:21" pos:end="42:30">
                    <expr_stmt pos:start="42:21" pos:end="42:30"><expr pos:start="42:21" pos:end="42:29"><name pos:start="42:21" pos:end="42:27"><name pos:start="42:21" pos:end="42:21">s</name><operator pos:start="42:22" pos:end="42:23">-&gt;</operator><name pos:start="42:24" pos:end="42:27">sync</name></name><operator pos:start="42:28" pos:end="42:28">=</operator><literal type="number" pos:start="42:29" pos:end="42:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="43:15" pos:end="216:18">else <block pos:start="43:20" pos:end="216:18">{<block_content pos:start="44:17" pos:end="216:18">
                <expr_stmt pos:start="44:17" pos:end="44:93"><expr pos:start="44:17" pos:end="44:92"><call pos:start="44:17" pos:end="44:92"><name pos:start="44:17" pos:end="44:22">av_log</name><argument_list pos:start="44:23" pos:end="44:92">(<argument pos:start="44:24" pos:end="44:28"><expr pos:start="44:24" pos:end="44:28"><name pos:start="44:24" pos:end="44:28">avctx</name></expr></argument>, <argument pos:start="44:31" pos:end="44:42"><expr pos:start="44:31" pos:end="44:42"><name pos:start="44:31" pos:end="44:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="44:45" pos:end="44:80"><expr pos:start="44:45" pos:end="44:80"><literal type="string" pos:start="44:45" pos:end="44:80">"ignoring SEQ_START_CODE after %X\n"</literal></expr></argument>, <argument pos:start="44:83" pos:end="44:91"><expr pos:start="44:83" pos:end="44:91"><name pos:start="44:83" pos:end="44:91">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="45:17" pos:end="46:18"><if pos:start="45:17" pos:end="46:18">if <condition pos:start="45:20" pos:end="45:59">(<expr pos:start="45:21" pos:end="45:58"><name pos:start="45:21" pos:end="45:42"><name pos:start="45:21" pos:end="45:25">avctx</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:42">err_recognition</name></name> <operator pos:start="45:44" pos:end="45:44">&amp;</operator> <name pos:start="45:46" pos:end="45:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="46:13" pos:end="46:18"><block_content pos:start="46:13" pos:end="46:18">
            <break pos:start="46:13" pos:end="46:18">break;</break></block_content></block></if></if_stmt>
        <case pos:start="47:9" pos:end="47:32">case <expr pos:start="47:14" pos:end="47:31"><name pos:start="47:14" pos:end="47:31">PICTURE_START_CODE</name></expr>:</case>
            <if_stmt pos:start="48:13" pos:end="216:18"><if pos:start="48:13" pos:end="216:18">if <condition pos:start="48:16" pos:end="48:79">(<expr pos:start="48:17" pos:end="48:78"><name pos:start="48:17" pos:end="48:39">picture_start_code_seen</name> <operator pos:start="48:41" pos:end="48:42">&amp;&amp;</operator> <name pos:start="48:44" pos:end="48:64"><name pos:start="48:44" pos:end="48:45">s2</name><operator pos:start="48:46" pos:end="48:47">-&gt;</operator><name pos:start="48:48" pos:end="48:64">picture_structure</name></name> <operator pos:start="48:66" pos:end="48:67">==</operator> <name pos:start="48:69" pos:end="48:78">PICT_FRAME</name></expr>)</condition> <block pos:start="48:81" pos:end="216:18">{<block_content pos:start="51:16" pos:end="216:18">
               <comment type="block" pos:start="49:16" pos:end="50:66">/* If it's a frame picture, there can't be more than one picture header.
                  Yet, it does happen and we need to handle it. */</comment>
               <expr_stmt pos:start="51:16" pos:end="51:99"><expr pos:start="51:16" pos:end="51:98"><call pos:start="51:16" pos:end="51:98"><name pos:start="51:16" pos:end="51:21">av_log</name><argument_list pos:start="51:22" pos:end="51:98">(<argument pos:start="51:23" pos:end="51:27"><expr pos:start="51:23" pos:end="51:27"><name pos:start="51:23" pos:end="51:27">avctx</name></expr></argument>, <argument pos:start="51:30" pos:end="51:43"><expr pos:start="51:30" pos:end="51:43"><name pos:start="51:30" pos:end="51:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="51:46" pos:end="51:97"><expr pos:start="51:46" pos:end="51:97"><literal type="string" pos:start="51:46" pos:end="51:97">"ignoring extra picture following a frame-picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <break pos:start="52:16" pos:end="52:21">break;</break>
            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:35">picture_start_code_seen</name> <operator pos:start="53:37" pos:end="53:37">=</operator> <literal type="number" pos:start="53:39" pos:end="53:39">1</literal></expr>;</expr_stmt>
            <if_stmt pos:start="54:13" pos:end="216:18"><if pos:start="54:13" pos:end="216:18">if <condition pos:start="54:16" pos:end="54:50">(<expr pos:start="54:17" pos:end="54:49"><name pos:start="54:17" pos:end="54:25"><name pos:start="54:17" pos:end="54:18">s2</name><operator pos:start="54:19" pos:end="54:20">-&gt;</operator><name pos:start="54:21" pos:end="54:25">width</name></name> <operator pos:start="54:27" pos:end="54:28">&lt;=</operator> <literal type="number" pos:start="54:30" pos:end="54:30">0</literal> <operator pos:start="54:32" pos:end="54:33">||</operator> <name pos:start="54:35" pos:end="54:44"><name pos:start="54:35" pos:end="54:36">s2</name><operator pos:start="54:37" pos:end="54:38">-&gt;</operator><name pos:start="54:39" pos:end="54:44">height</name></name> <operator pos:start="54:46" pos:end="54:47">&lt;=</operator> <literal type="number" pos:start="54:49" pos:end="54:49">0</literal></expr>)</condition> <block pos:start="54:52" pos:end="216:18">{<block_content pos:start="55:17" pos:end="216:18">
                <expr_stmt pos:start="55:17" pos:end="56:46"><expr pos:start="55:17" pos:end="56:45"><call pos:start="55:17" pos:end="56:45"><name pos:start="55:17" pos:end="55:22">av_log</name><argument_list pos:start="55:23" pos:end="56:45">(<argument pos:start="55:24" pos:end="55:28"><expr pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:28">avctx</name></expr></argument>, <argument pos:start="55:31" pos:end="55:42"><expr pos:start="55:31" pos:end="55:42"><name pos:start="55:31" pos:end="55:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:45" pos:end="55:79"><expr pos:start="55:45" pos:end="55:79"><literal type="string" pos:start="55:45" pos:end="55:79">"Invalid frame dimensions %dx%d.\n"</literal></expr></argument>,
                       <argument pos:start="56:24" pos:end="56:32"><expr pos:start="56:24" pos:end="56:32"><name pos:start="56:24" pos:end="56:32"><name pos:start="56:24" pos:end="56:25">s2</name><operator pos:start="56:26" pos:end="56:27">-&gt;</operator><name pos:start="56:28" pos:end="56:32">width</name></name></expr></argument>, <argument pos:start="56:35" pos:end="56:44"><expr pos:start="56:35" pos:end="56:44"><name pos:start="56:35" pos:end="56:44"><name pos:start="56:35" pos:end="56:36">s2</name><operator pos:start="56:37" pos:end="56:38">-&gt;</operator><name pos:start="56:39" pos:end="56:44">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="57:13" pos:end="216:18"><if pos:start="57:13" pos:end="216:18">if<condition pos:start="57:15" pos:end="57:26">(<expr pos:start="57:16" pos:end="57:25"><name pos:start="57:16" pos:end="57:25"><name pos:start="57:16" pos:end="57:16">s</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:25">tmpgexs</name></name></expr>)</condition><block pos:start="57:27" pos:end="216:18">{<block_content pos:start="58:17" pos:end="216:18">
                <expr_stmt pos:start="58:17" pos:end="58:42"><expr pos:start="58:17" pos:end="58:41"><name pos:start="58:17" pos:end="58:38"><name pos:start="58:17" pos:end="58:18">s2</name><operator pos:start="58:19" pos:end="58:20">-&gt;</operator><name pos:start="58:21" pos:end="58:38">intra_dc_precision</name></name><operator pos:start="58:39" pos:end="58:39">=</operator> <literal type="number" pos:start="58:41" pos:end="58:41">3</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="59:17" pos:end="59:39"><expr pos:start="59:17" pos:end="59:38"><name pos:start="59:17" pos:end="59:35"><name pos:start="59:17" pos:end="59:18">s2</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:32">intra_matrix</name><index pos:start="59:33" pos:end="59:35">[<expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">0</literal></expr>]</index></name><operator pos:start="59:36" pos:end="59:36">=</operator> <literal type="number" pos:start="59:38" pos:end="59:38">1</literal></expr>;</expr_stmt>
            <if_stmt pos:start="60:13" pos:end="216:18"><if pos:start="60:13" pos:end="216:18">if <condition pos:start="60:16" pos:end="61:50">(<expr pos:start="60:17" pos:end="61:49"><name pos:start="60:17" pos:end="60:28">HAVE_THREADS</name> <operator pos:start="60:30" pos:end="60:31">&amp;&amp;</operator> <operator pos:start="60:33" pos:end="60:33">(</operator><name pos:start="60:34" pos:end="60:58"><name pos:start="60:34" pos:end="60:38">avctx</name><operator pos:start="60:39" pos:end="60:40">-&gt;</operator><name pos:start="60:41" pos:end="60:58">active_thread_type</name></name> <operator pos:start="60:60" pos:end="60:60">&amp;</operator> <name pos:start="60:62" pos:end="60:76">FF_THREAD_SLICE</name><operator pos:start="60:77" pos:end="60:77">)</operator> <operator pos:start="60:79" pos:end="60:80">&amp;&amp;</operator>
                <operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:31"><name pos:start="61:18" pos:end="61:22">avctx</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:31">hwaccel</name></name> <operator pos:start="61:33" pos:end="61:34">&amp;&amp;</operator> <name pos:start="61:36" pos:end="61:49"><name pos:start="61:36" pos:end="61:36">s</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:49">slice_count</name></name></expr>)</condition> <block pos:start="61:52" pos:end="216:18">{<block_content pos:start="62:17" pos:end="216:18">
                <decl_stmt pos:start="62:17" pos:end="62:22"><decl pos:start="62:17" pos:end="62:21"><type pos:start="62:17" pos:end="62:19"><name pos:start="62:17" pos:end="62:19">int</name></type> <name pos:start="62:21" pos:end="62:21">i</name></decl>;</decl_stmt>
                <expr_stmt pos:start="63:17" pos:end="65:62"><expr pos:start="63:17" pos:end="65:61"><call pos:start="63:17" pos:end="65:61"><name pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:21">avctx</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:30">execute</name></name><argument_list pos:start="63:31" pos:end="65:61">(<argument pos:start="63:32" pos:end="63:36"><expr pos:start="63:32" pos:end="63:36"><name pos:start="63:32" pos:end="63:36">avctx</name></expr></argument>, <argument pos:start="63:39" pos:end="63:57"><expr pos:start="63:39" pos:end="63:57"><name pos:start="63:39" pos:end="63:57">slice_decode_thread</name></expr></argument>,
                               <argument pos:start="64:32" pos:end="64:49"><expr pos:start="64:32" pos:end="64:49"><name pos:start="64:32" pos:end="64:49"><name pos:start="64:32" pos:end="64:33">s2</name><operator pos:start="64:34" pos:end="64:35">-&gt;</operator><name pos:start="64:36" pos:end="64:49">thread_context</name></name></expr></argument>, <argument pos:start="64:52" pos:end="64:55"><expr pos:start="64:52" pos:end="64:55"><name pos:start="64:52" pos:end="64:55">NULL</name></expr></argument>,
                               <argument pos:start="65:32" pos:end="65:45"><expr pos:start="65:32" pos:end="65:45"><name pos:start="65:32" pos:end="65:45"><name pos:start="65:32" pos:end="65:32">s</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:45">slice_count</name></name></expr></argument>, <argument pos:start="65:48" pos:end="65:60"><expr pos:start="65:48" pos:end="65:60"><sizeof pos:start="65:48" pos:end="65:60">sizeof<argument_list pos:start="65:54" pos:end="65:60">(<argument pos:start="65:55" pos:end="65:59"><expr pos:start="65:55" pos:end="65:59"><name pos:start="65:55" pos:end="65:58">void</name><operator pos:start="65:59" pos:end="65:59">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for pos:start="66:17" pos:end="67:80">for <control pos:start="66:21" pos:end="66:52">(<init pos:start="66:22" pos:end="66:27"><expr pos:start="66:22" pos:end="66:26"><name pos:start="66:22" pos:end="66:22">i</name> <operator pos:start="66:24" pos:end="66:24">=</operator> <literal type="number" pos:start="66:26" pos:end="66:26">0</literal></expr>;</init> <condition pos:start="66:29" pos:end="66:47"><expr pos:start="66:29" pos:end="66:46"><name pos:start="66:29" pos:end="66:29">i</name> <operator pos:start="66:31" pos:end="66:31">&lt;</operator> <name pos:start="66:33" pos:end="66:46"><name pos:start="66:33" pos:end="66:33">s</name><operator pos:start="66:34" pos:end="66:35">-&gt;</operator><name pos:start="66:36" pos:end="66:46">slice_count</name></name></expr>;</condition> <incr pos:start="66:49" pos:end="66:51"><expr pos:start="66:49" pos:end="66:51"><name pos:start="66:49" pos:end="66:49">i</name><operator pos:start="66:50" pos:end="66:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="67:21" pos:end="67:80"><block_content pos:start="67:21" pos:end="67:80">
                    <expr_stmt pos:start="67:21" pos:end="67:80"><expr pos:start="67:21" pos:end="67:79"><name pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:22">s2</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:26">er</name><operator pos:start="67:27" pos:end="67:27">.</operator><name pos:start="67:28" pos:end="67:38">error_count</name></name> <operator pos:start="67:40" pos:end="67:41">+=</operator> <name pos:start="67:43" pos:end="67:63"><name pos:start="67:43" pos:end="67:44">s2</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:60">thread_context</name><index pos:start="67:61" pos:end="67:63">[<expr pos:start="67:62" pos:end="67:62"><name pos:start="67:62" pos:end="67:62">i</name></expr>]</index></name><operator pos:start="67:64" pos:end="67:65">-&gt;</operator><name pos:start="67:66" pos:end="67:79"><name pos:start="67:66" pos:end="67:67">er</name><operator pos:start="67:68" pos:end="67:68">.</operator><name pos:start="67:69" pos:end="67:79">error_count</name></name></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt pos:start="68:17" pos:end="68:35"><expr pos:start="68:17" pos:end="68:34"><name pos:start="68:17" pos:end="68:30"><name pos:start="68:17" pos:end="68:17">s</name><operator pos:start="68:18" pos:end="68:19">-&gt;</operator><name pos:start="68:20" pos:end="68:30">slice_count</name></name> <operator pos:start="68:32" pos:end="68:32">=</operator> <literal type="number" pos:start="68:34" pos:end="68:34">0</literal></expr>;</expr_stmt>
            <if_stmt pos:start="69:13" pos:end="216:18"><if pos:start="69:13" pos:end="216:18">if <condition pos:start="69:16" pos:end="69:68">(<expr pos:start="69:17" pos:end="69:67"><name pos:start="69:17" pos:end="69:25">last_code</name> <operator pos:start="69:27" pos:end="69:28">==</operator> <literal type="number" pos:start="69:30" pos:end="69:30">0</literal> <operator pos:start="69:32" pos:end="69:33">||</operator> <name pos:start="69:35" pos:end="69:43">last_code</name> <operator pos:start="69:45" pos:end="69:46">==</operator> <name pos:start="69:48" pos:end="69:67">SLICE_MIN_START_CODE</name></expr>)</condition> <block pos:start="69:70" pos:end="216:18">{<block_content pos:start="70:17" pos:end="216:18">
                <expr_stmt pos:start="70:17" pos:end="70:50"><expr pos:start="70:17" pos:end="70:49"><name pos:start="70:17" pos:end="70:19">ret</name> <operator pos:start="70:21" pos:end="70:21">=</operator> <call pos:start="70:23" pos:end="70:49"><name pos:start="70:23" pos:end="70:42">mpeg_decode_postinit</name><argument_list pos:start="70:43" pos:end="70:49">(<argument pos:start="70:44" pos:end="70:48"><expr pos:start="70:44" pos:end="70:48"><name pos:start="70:44" pos:end="70:48">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="71:17" pos:end="216:18"><if pos:start="71:17" pos:end="79:13">if <condition pos:start="71:20" pos:end="71:28">(<expr pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:23">ret</name> <operator pos:start="71:25" pos:end="71:25">&lt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="79:13">{<block_content pos:start="72:21" pos:end="78:47">
                    <expr_stmt pos:start="72:21" pos:end="72:84"><expr pos:start="72:21" pos:end="72:83"><call pos:start="72:21" pos:end="72:83"><name pos:start="72:21" pos:end="72:26">av_log</name><argument_list pos:start="72:27" pos:end="72:83">(<argument pos:start="72:28" pos:end="72:32"><expr pos:start="72:28" pos:end="72:32"><name pos:start="72:28" pos:end="72:32">avctx</name></expr></argument>, <argument pos:start="72:35" pos:end="72:46"><expr pos:start="72:35" pos:end="72:46"><name pos:start="72:35" pos:end="72:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="72:49" pos:end="72:82"><expr pos:start="72:49" pos:end="72:82"><literal type="string" pos:start="72:49" pos:end="72:82">"mpeg_decode_postinit() failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="73:21" pos:end="73:31">return <expr pos:start="73:28" pos:end="73:30"><name pos:start="73:28" pos:end="73:30">ret</name></expr>;</return>
                <comment type="block" pos:start="74:17" pos:end="74:71">/* we have a complete image: we try to decompress it */</comment>
                <if_stmt pos:start="75:17" pos:end="76:38"><if pos:start="75:17" pos:end="76:38">if <condition pos:start="75:20" pos:end="75:73">(<expr pos:start="75:21" pos:end="75:72"><call pos:start="75:21" pos:end="75:68"><name pos:start="75:21" pos:end="75:40">mpeg1_decode_picture</name><argument_list pos:start="75:41" pos:end="75:68">(<argument pos:start="75:42" pos:end="75:46"><expr pos:start="75:42" pos:end="75:46"><name pos:start="75:42" pos:end="75:46">avctx</name></expr></argument>, <argument pos:start="75:49" pos:end="75:55"><expr pos:start="75:49" pos:end="75:55"><name pos:start="75:49" pos:end="75:55">buf_ptr</name></expr></argument>, <argument pos:start="75:58" pos:end="75:67"><expr pos:start="75:58" pos:end="75:67"><name pos:start="75:58" pos:end="75:67">input_size</name></expr></argument>)</argument_list></call> <operator pos:start="75:70" pos:end="75:70">&lt;</operator> <literal type="number" pos:start="75:72" pos:end="75:72">0</literal></expr>)</condition><block type="pseudo" pos:start="76:21" pos:end="76:38"><block_content pos:start="76:21" pos:end="76:38">
                    <expr_stmt pos:start="76:21" pos:end="76:38"><expr pos:start="76:21" pos:end="76:37"><name pos:start="76:21" pos:end="76:33"><name pos:start="76:21" pos:end="76:22">s2</name><operator pos:start="76:23" pos:end="76:24">-&gt;</operator><name pos:start="76:25" pos:end="76:33">pict_type</name></name> <operator pos:start="76:35" pos:end="76:35">=</operator> <literal type="number" pos:start="76:37" pos:end="76:37">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="77:17" pos:end="77:36"><expr pos:start="77:17" pos:end="77:35"><name pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:18">s2</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:31">first_slice</name></name> <operator pos:start="77:33" pos:end="77:33">=</operator> <literal type="number" pos:start="77:35" pos:end="77:35">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="78:17" pos:end="78:47"><expr pos:start="78:17" pos:end="78:46"><name pos:start="78:17" pos:end="78:25">last_code</name> <operator pos:start="78:27" pos:end="78:27">=</operator> <name pos:start="78:29" pos:end="78:46">PICTURE_START_CODE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="79:15" pos:end="216:18">else <block pos:start="79:20" pos:end="216:18">{<block_content pos:start="80:17" pos:end="216:18">
                <expr_stmt pos:start="80:17" pos:end="80:82"><expr pos:start="80:17" pos:end="80:81"><call pos:start="80:17" pos:end="80:81"><name pos:start="80:17" pos:end="80:22">av_log</name><argument_list pos:start="80:23" pos:end="80:81">(<argument pos:start="80:24" pos:end="80:28"><expr pos:start="80:24" pos:end="80:28"><name pos:start="80:24" pos:end="80:28">avctx</name></expr></argument>, <argument pos:start="80:31" pos:end="80:42"><expr pos:start="80:31" pos:end="80:42"><name pos:start="80:31" pos:end="80:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="80:45" pos:end="80:69"><expr pos:start="80:45" pos:end="80:69"><literal type="string" pos:start="80:45" pos:end="80:69">"ignoring pic after %X\n"</literal></expr></argument>, <argument pos:start="80:72" pos:end="80:80"><expr pos:start="80:72" pos:end="80:80"><name pos:start="80:72" pos:end="80:80">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="81:17" pos:end="82:18"><if pos:start="81:17" pos:end="82:18">if <condition pos:start="81:20" pos:end="81:59">(<expr pos:start="81:21" pos:end="81:58"><name pos:start="81:21" pos:end="81:42"><name pos:start="81:21" pos:end="81:25">avctx</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:42">err_recognition</name></name> <operator pos:start="81:44" pos:end="81:44">&amp;</operator> <name pos:start="81:46" pos:end="81:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="82:13" pos:end="82:18"><block_content pos:start="82:13" pos:end="82:18">
            <break pos:start="82:13" pos:end="82:18">break;</break></block_content></block></if></if_stmt>
        <case pos:start="83:9" pos:end="83:28">case <expr pos:start="83:14" pos:end="83:27"><name pos:start="83:14" pos:end="83:27">EXT_START_CODE</name></expr>:</case>
            <expr_stmt pos:start="84:13" pos:end="84:58"><expr pos:start="84:13" pos:end="84:57"><call pos:start="84:13" pos:end="84:57"><name pos:start="84:13" pos:end="84:25">init_get_bits</name><argument_list pos:start="84:26" pos:end="84:57">(<argument pos:start="84:27" pos:end="84:33"><expr pos:start="84:27" pos:end="84:33"><operator pos:start="84:27" pos:end="84:27">&amp;</operator><name pos:start="84:28" pos:end="84:33"><name pos:start="84:28" pos:end="84:29">s2</name><operator pos:start="84:30" pos:end="84:31">-&gt;</operator><name pos:start="84:32" pos:end="84:33">gb</name></name></expr></argument>, <argument pos:start="84:36" pos:end="84:42"><expr pos:start="84:36" pos:end="84:42"><name pos:start="84:36" pos:end="84:42">buf_ptr</name></expr></argument>, <argument pos:start="84:45" pos:end="84:56"><expr pos:start="84:45" pos:end="84:56"><name pos:start="84:45" pos:end="84:54">input_size</name><operator pos:start="84:55" pos:end="84:55">*</operator><literal type="number" pos:start="84:56" pos:end="84:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="85:13" pos:end="216:18">switch <condition pos:start="85:20" pos:end="85:41">(<expr pos:start="85:21" pos:end="85:40"><call pos:start="85:21" pos:end="85:40"><name pos:start="85:21" pos:end="85:28">get_bits</name><argument_list pos:start="85:29" pos:end="85:40">(<argument pos:start="85:30" pos:end="85:36"><expr pos:start="85:30" pos:end="85:36"><operator pos:start="85:30" pos:end="85:30">&amp;</operator><name pos:start="85:31" pos:end="85:36"><name pos:start="85:31" pos:end="85:32">s2</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:36">gb</name></name></expr></argument>, <argument pos:start="85:39" pos:end="85:39"><expr pos:start="85:39" pos:end="85:39"><literal type="number" pos:start="85:39" pos:end="85:39">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:43" pos:end="216:18">{<block_content pos:start="86:13" pos:end="216:18">
            <case pos:start="86:13" pos:end="86:21">case <expr pos:start="86:18" pos:end="86:20"><literal type="number" pos:start="86:18" pos:end="86:20">0x1</literal></expr>:</case>
                <if_stmt pos:start="87:17" pos:end="216:18"><if pos:start="87:17" pos:end="89:17">if <condition pos:start="87:20" pos:end="87:35">(<expr pos:start="87:21" pos:end="87:34"><name pos:start="87:21" pos:end="87:29">last_code</name> <operator pos:start="87:31" pos:end="87:32">==</operator> <literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr>)</condition> <block pos:start="87:37" pos:end="89:17">{<block_content pos:start="88:17" pos:end="88:50">
                <expr_stmt pos:start="88:17" pos:end="88:50"><expr pos:start="88:17" pos:end="88:49"><call pos:start="88:17" pos:end="88:49"><name pos:start="88:17" pos:end="88:46">mpeg_decode_sequence_extension</name><argument_list pos:start="88:47" pos:end="88:49">(<argument pos:start="88:48" pos:end="88:48"><expr pos:start="88:48" pos:end="88:48"><name pos:start="88:48" pos:end="88:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="89:19" pos:end="216:18">else <block pos:start="89:24" pos:end="216:18">{<block_content pos:start="90:21" pos:end="216:18">
                    <expr_stmt pos:start="90:21" pos:end="90:90"><expr pos:start="90:21" pos:end="90:89"><call pos:start="90:21" pos:end="90:89"><name pos:start="90:21" pos:end="90:26">av_log</name><argument_list pos:start="90:27" pos:end="90:89">(<argument pos:start="90:28" pos:end="90:32"><expr pos:start="90:28" pos:end="90:32"><name pos:start="90:28" pos:end="90:32">avctx</name></expr></argument>, <argument pos:start="90:35" pos:end="90:46"><expr pos:start="90:35" pos:end="90:46"><name pos:start="90:35" pos:end="90:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="90:49" pos:end="90:77"><expr pos:start="90:49" pos:end="90:77"><literal type="string" pos:start="90:49" pos:end="90:77">"ignoring seq ext after %X\n"</literal></expr></argument>, <argument pos:start="90:80" pos:end="90:88"><expr pos:start="90:80" pos:end="90:88"><name pos:start="90:80" pos:end="90:88">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="91:21" pos:end="92:22"><if pos:start="91:21" pos:end="92:22">if <condition pos:start="91:24" pos:end="91:63">(<expr pos:start="91:25" pos:end="91:62"><name pos:start="91:25" pos:end="91:46"><name pos:start="91:25" pos:end="91:29">avctx</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:46">err_recognition</name></name> <operator pos:start="91:48" pos:end="91:48">&amp;</operator> <name pos:start="91:50" pos:end="91:62">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="92:17" pos:end="92:22"><block_content pos:start="92:17" pos:end="92:22">
                <break pos:start="92:17" pos:end="92:22">break;</break></block_content></block></if></if_stmt>
            <case pos:start="93:13" pos:end="93:21">case <expr pos:start="93:18" pos:end="93:20"><literal type="number" pos:start="93:18" pos:end="93:20">0x2</literal></expr>:</case>
                <expr_stmt pos:start="94:17" pos:end="94:58"><expr pos:start="94:17" pos:end="94:57"><call pos:start="94:17" pos:end="94:57"><name pos:start="94:17" pos:end="94:54">mpeg_decode_sequence_display_extension</name><argument_list pos:start="94:55" pos:end="94:57">(<argument pos:start="94:56" pos:end="94:56"><expr pos:start="94:56" pos:end="94:56"><name pos:start="94:56" pos:end="94:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="95:17" pos:end="95:22">break;</break>
            <case pos:start="96:13" pos:end="96:21">case <expr pos:start="96:18" pos:end="96:20"><literal type="number" pos:start="96:18" pos:end="96:20">0x3</literal></expr>:</case>
                <expr_stmt pos:start="97:17" pos:end="97:55"><expr pos:start="97:17" pos:end="97:54"><call pos:start="97:17" pos:end="97:54"><name pos:start="97:17" pos:end="97:50">mpeg_decode_quant_matrix_extension</name><argument_list pos:start="97:51" pos:end="97:54">(<argument pos:start="97:52" pos:end="97:53"><expr pos:start="97:52" pos:end="97:53"><name pos:start="97:52" pos:end="97:53">s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="98:17" pos:end="98:22">break;</break>
            <case pos:start="99:13" pos:end="99:21">case <expr pos:start="99:18" pos:end="99:20"><literal type="number" pos:start="99:18" pos:end="99:20">0x7</literal></expr>:</case>
                <expr_stmt pos:start="100:17" pos:end="100:57"><expr pos:start="100:17" pos:end="100:56"><call pos:start="100:17" pos:end="100:56"><name pos:start="100:17" pos:end="100:53">mpeg_decode_picture_display_extension</name><argument_list pos:start="100:54" pos:end="100:56">(<argument pos:start="100:55" pos:end="100:55"><expr pos:start="100:55" pos:end="100:55"><name pos:start="100:55" pos:end="100:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="101:17" pos:end="101:22">break;</break>
            <case pos:start="102:13" pos:end="102:21">case <expr pos:start="102:18" pos:end="102:20"><literal type="number" pos:start="102:18" pos:end="102:20">0x8</literal></expr>:</case>
                <if_stmt pos:start="103:17" pos:end="216:18"><if pos:start="103:17" pos:end="105:17">if <condition pos:start="103:20" pos:end="103:52">(<expr pos:start="103:21" pos:end="103:51"><name pos:start="103:21" pos:end="103:29">last_code</name> <operator pos:start="103:31" pos:end="103:32">==</operator> <name pos:start="103:34" pos:end="103:51">PICTURE_START_CODE</name></expr>)</condition> <block pos:start="103:54" pos:end="105:17">{<block_content pos:start="104:21" pos:end="104:60">
                    <expr_stmt pos:start="104:21" pos:end="104:60"><expr pos:start="104:21" pos:end="104:59"><call pos:start="104:21" pos:end="104:59"><name pos:start="104:21" pos:end="104:56">mpeg_decode_picture_coding_extension</name><argument_list pos:start="104:57" pos:end="104:59">(<argument pos:start="104:58" pos:end="104:58"><expr pos:start="104:58" pos:end="104:58"><name pos:start="104:58" pos:end="104:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="105:19" pos:end="216:18">else <block pos:start="105:24" pos:end="216:18">{<block_content pos:start="106:21" pos:end="216:18">
                    <expr_stmt pos:start="106:21" pos:end="106:94"><expr pos:start="106:21" pos:end="106:93"><call pos:start="106:21" pos:end="106:93"><name pos:start="106:21" pos:end="106:26">av_log</name><argument_list pos:start="106:27" pos:end="106:93">(<argument pos:start="106:28" pos:end="106:32"><expr pos:start="106:28" pos:end="106:32"><name pos:start="106:28" pos:end="106:32">avctx</name></expr></argument>, <argument pos:start="106:35" pos:end="106:46"><expr pos:start="106:35" pos:end="106:46"><name pos:start="106:35" pos:end="106:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="106:49" pos:end="106:81"><expr pos:start="106:49" pos:end="106:81"><literal type="string" pos:start="106:49" pos:end="106:81">"ignoring pic cod ext after %X\n"</literal></expr></argument>, <argument pos:start="106:84" pos:end="106:92"><expr pos:start="106:84" pos:end="106:92"><name pos:start="106:84" pos:end="106:92">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="107:21" pos:end="108:22"><if pos:start="107:21" pos:end="108:22">if <condition pos:start="107:24" pos:end="107:63">(<expr pos:start="107:25" pos:end="107:62"><name pos:start="107:25" pos:end="107:46"><name pos:start="107:25" pos:end="107:29">avctx</name><operator pos:start="107:30" pos:end="107:31">-&gt;</operator><name pos:start="107:32" pos:end="107:46">err_recognition</name></name> <operator pos:start="107:48" pos:end="107:48">&amp;</operator> <name pos:start="107:50" pos:end="107:62">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="108:17" pos:end="108:22"><block_content pos:start="108:17" pos:end="108:22">
                <break pos:start="108:17" pos:end="108:22">break;</break></block_content></block></if></if_stmt>
            <break pos:start="109:13" pos:end="109:18">break;</break>
        <case pos:start="110:9" pos:end="110:29">case <expr pos:start="110:14" pos:end="110:28"><name pos:start="110:14" pos:end="110:28">USER_START_CODE</name></expr>:</case>
            <expr_stmt pos:start="111:13" pos:end="111:62"><expr pos:start="111:13" pos:end="111:61"><call pos:start="111:13" pos:end="111:61"><name pos:start="111:13" pos:end="111:33">mpeg_decode_user_data</name><argument_list pos:start="111:34" pos:end="111:61">(<argument pos:start="111:35" pos:end="111:39"><expr pos:start="111:35" pos:end="111:39"><name pos:start="111:35" pos:end="111:39">avctx</name></expr></argument>, <argument pos:start="111:42" pos:end="111:48"><expr pos:start="111:42" pos:end="111:48"><name pos:start="111:42" pos:end="111:48">buf_ptr</name></expr></argument>, <argument pos:start="111:51" pos:end="111:60"><expr pos:start="111:51" pos:end="111:60"><name pos:start="111:51" pos:end="111:60">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="112:13" pos:end="112:18">break;</break>
        <case pos:start="113:9" pos:end="113:28">case <expr pos:start="113:14" pos:end="113:27"><name pos:start="113:14" pos:end="113:27">GOP_START_CODE</name></expr>:</case>
            <if_stmt pos:start="114:13" pos:end="216:18"><if pos:start="114:13" pos:end="118:13">if <condition pos:start="114:16" pos:end="114:31">(<expr pos:start="114:17" pos:end="114:30"><name pos:start="114:17" pos:end="114:25">last_code</name> <operator pos:start="114:27" pos:end="114:28">==</operator> <literal type="number" pos:start="114:30" pos:end="114:30">0</literal></expr>)</condition> <block pos:start="114:33" pos:end="118:13">{<block_content pos:start="115:17" pos:end="117:26">
                <expr_stmt pos:start="115:17" pos:end="115:34"><expr pos:start="115:17" pos:end="115:33"><name pos:start="115:17" pos:end="115:31"><name pos:start="115:17" pos:end="115:18">s2</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:31">first_field</name></name><operator pos:start="115:32" pos:end="115:32">=</operator><literal type="number" pos:start="115:33" pos:end="115:33">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="116:17" pos:end="116:60"><expr pos:start="116:17" pos:end="116:59"><call pos:start="116:17" pos:end="116:59"><name pos:start="116:17" pos:end="116:31">mpeg_decode_gop</name><argument_list pos:start="116:32" pos:end="116:59">(<argument pos:start="116:33" pos:end="116:37"><expr pos:start="116:33" pos:end="116:37"><name pos:start="116:33" pos:end="116:37">avctx</name></expr></argument>, <argument pos:start="116:40" pos:end="116:46"><expr pos:start="116:40" pos:end="116:46"><name pos:start="116:40" pos:end="116:46">buf_ptr</name></expr></argument>, <argument pos:start="116:49" pos:end="116:58"><expr pos:start="116:49" pos:end="116:58"><name pos:start="116:49" pos:end="116:58">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="117:17" pos:end="117:26"><expr pos:start="117:17" pos:end="117:25"><name pos:start="117:17" pos:end="117:23"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:23">sync</name></name><operator pos:start="117:24" pos:end="117:24">=</operator><literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="118:15" pos:end="216:18">else <block pos:start="118:20" pos:end="216:18">{<block_content pos:start="119:17" pos:end="216:18">
                <expr_stmt pos:start="119:17" pos:end="119:93"><expr pos:start="119:17" pos:end="119:92"><call pos:start="119:17" pos:end="119:92"><name pos:start="119:17" pos:end="119:22">av_log</name><argument_list pos:start="119:23" pos:end="119:92">(<argument pos:start="119:24" pos:end="119:28"><expr pos:start="119:24" pos:end="119:28"><name pos:start="119:24" pos:end="119:28">avctx</name></expr></argument>, <argument pos:start="119:31" pos:end="119:42"><expr pos:start="119:31" pos:end="119:42"><name pos:start="119:31" pos:end="119:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:45" pos:end="119:80"><expr pos:start="119:45" pos:end="119:80"><literal type="string" pos:start="119:45" pos:end="119:80">"ignoring GOP_START_CODE after %X\n"</literal></expr></argument>, <argument pos:start="119:83" pos:end="119:91"><expr pos:start="119:83" pos:end="119:91"><name pos:start="119:83" pos:end="119:91">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="120:17" pos:end="121:18"><if pos:start="120:17" pos:end="121:18">if <condition pos:start="120:20" pos:end="120:59">(<expr pos:start="120:21" pos:end="120:58"><name pos:start="120:21" pos:end="120:42"><name pos:start="120:21" pos:end="120:25">avctx</name><operator pos:start="120:26" pos:end="120:27">-&gt;</operator><name pos:start="120:28" pos:end="120:42">err_recognition</name></name> <operator pos:start="120:44" pos:end="120:44">&amp;</operator> <name pos:start="120:46" pos:end="120:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:18"><block_content pos:start="121:13" pos:end="121:18">
            <break pos:start="121:13" pos:end="121:18">break;</break></block_content></block></if></if_stmt>
        <default pos:start="122:9" pos:end="122:16">default:</default>
            <if_stmt pos:start="123:13" pos:end="216:18"><if pos:start="123:13" pos:end="216:18">if <condition pos:start="123:16" pos:end="124:86">(<expr pos:start="123:17" pos:end="124:85"><name pos:start="123:17" pos:end="123:26">start_code</name> <operator pos:start="123:28" pos:end="123:29">&gt;=</operator> <name pos:start="123:31" pos:end="123:50">SLICE_MIN_START_CODE</name> <operator pos:start="123:52" pos:end="123:53">&amp;&amp;</operator>
                <name pos:start="124:17" pos:end="124:26">start_code</name> <operator pos:start="124:28" pos:end="124:29">&lt;=</operator> <name pos:start="124:31" pos:end="124:50">SLICE_MAX_START_CODE</name> <operator pos:start="124:52" pos:end="124:53">&amp;&amp;</operator> <name pos:start="124:55" pos:end="124:63">last_code</name> <operator pos:start="124:65" pos:end="124:66">==</operator> <name pos:start="124:68" pos:end="124:85">PICTURE_START_CODE</name></expr>)</condition> <block pos:start="124:88" pos:end="216:18">{<block_content pos:start="125:17" pos:end="216:18">
                <if_stmt pos:start="125:17" pos:end="216:18"><if pos:start="125:17" pos:end="216:18">if <condition pos:start="125:20" pos:end="125:71">(<expr pos:start="125:21" pos:end="125:70"><name pos:start="125:21" pos:end="125:44"><name pos:start="125:21" pos:end="125:22">s2</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:44">progressive_sequence</name></name> <operator pos:start="125:46" pos:end="125:47">&amp;&amp;</operator> <operator pos:start="125:49" pos:end="125:49">!</operator><name pos:start="125:50" pos:end="125:70"><name pos:start="125:50" pos:end="125:51">s2</name><operator pos:start="125:52" pos:end="125:53">-&gt;</operator><name pos:start="125:54" pos:end="125:70">progressive_frame</name></name></expr>)</condition> <block pos:start="125:73" pos:end="216:18">{<block_content pos:start="126:21" pos:end="216:18">
                    <expr_stmt pos:start="126:21" pos:end="126:46"><expr pos:start="126:21" pos:end="126:45"><name pos:start="126:21" pos:end="126:41"><name pos:start="126:21" pos:end="126:22">s2</name><operator pos:start="126:23" pos:end="126:24">-&gt;</operator><name pos:start="126:25" pos:end="126:41">progressive_frame</name></name> <operator pos:start="126:43" pos:end="126:43">=</operator> <literal type="number" pos:start="126:45" pos:end="126:45">1</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="127:21" pos:end="127:108"><expr pos:start="127:21" pos:end="127:107"><call pos:start="127:21" pos:end="127:107"><name pos:start="127:21" pos:end="127:26">av_log</name><argument_list pos:start="127:27" pos:end="127:107">(<argument pos:start="127:28" pos:end="127:36"><expr pos:start="127:28" pos:end="127:36"><name pos:start="127:28" pos:end="127:36"><name pos:start="127:28" pos:end="127:29">s2</name><operator pos:start="127:30" pos:end="127:31">-&gt;</operator><name pos:start="127:32" pos:end="127:36">avctx</name></name></expr></argument>, <argument pos:start="127:39" pos:end="127:50"><expr pos:start="127:39" pos:end="127:50"><name pos:start="127:39" pos:end="127:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:53" pos:end="127:106"><expr pos:start="127:53" pos:end="127:106"><literal type="string" pos:start="127:53" pos:end="127:106">"interlaced frame in progressive sequence, ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="128:17" pos:end="216:18"><if pos:start="128:17" pos:end="216:18">if <condition pos:start="128:20" pos:end="128:113">(<expr pos:start="128:21" pos:end="128:112"><name pos:start="128:21" pos:end="128:41"><name pos:start="128:21" pos:end="128:22">s2</name><operator pos:start="128:23" pos:end="128:24">-&gt;</operator><name pos:start="128:25" pos:end="128:41">picture_structure</name></name> <operator pos:start="128:43" pos:end="128:44">==</operator> <literal type="number" pos:start="128:46" pos:end="128:46">0</literal> <operator pos:start="128:48" pos:end="128:49">||</operator> <operator pos:start="128:51" pos:end="128:51">(</operator><name pos:start="128:52" pos:end="128:72"><name pos:start="128:52" pos:end="128:53">s2</name><operator pos:start="128:54" pos:end="128:55">-&gt;</operator><name pos:start="128:56" pos:end="128:72">progressive_frame</name></name> <operator pos:start="128:74" pos:end="128:75">&amp;&amp;</operator> <name pos:start="128:77" pos:end="128:97"><name pos:start="128:77" pos:end="128:78">s2</name><operator pos:start="128:79" pos:end="128:80">-&gt;</operator><name pos:start="128:81" pos:end="128:97">picture_structure</name></name> <operator pos:start="128:99" pos:end="128:100">!=</operator> <name pos:start="128:102" pos:end="128:111">PICT_FRAME</name><operator pos:start="128:112" pos:end="128:112">)</operator></expr>)</condition> <block pos:start="128:115" pos:end="216:18">{<block_content pos:start="129:21" pos:end="216:18">
                    <expr_stmt pos:start="129:21" pos:end="129:119"><expr pos:start="129:21" pos:end="129:118"><call pos:start="129:21" pos:end="129:118"><name pos:start="129:21" pos:end="129:26">av_log</name><argument_list pos:start="129:27" pos:end="129:118">(<argument pos:start="129:28" pos:end="129:36"><expr pos:start="129:28" pos:end="129:36"><name pos:start="129:28" pos:end="129:36"><name pos:start="129:28" pos:end="129:29">s2</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:36">avctx</name></name></expr></argument>, <argument pos:start="129:39" pos:end="129:50"><expr pos:start="129:39" pos:end="129:50"><name pos:start="129:39" pos:end="129:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:53" pos:end="129:94"><expr pos:start="129:53" pos:end="129:94"><literal type="string" pos:start="129:53" pos:end="129:94">"picture_structure %d invalid, ignoring\n"</literal></expr></argument>, <argument pos:start="129:97" pos:end="129:117"><expr pos:start="129:97" pos:end="129:117"><name pos:start="129:97" pos:end="129:117"><name pos:start="129:97" pos:end="129:98">s2</name><operator pos:start="129:99" pos:end="129:100">-&gt;</operator><name pos:start="129:101" pos:end="129:117">picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="130:21" pos:end="130:55"><expr pos:start="130:21" pos:end="130:54"><name pos:start="130:21" pos:end="130:41"><name pos:start="130:21" pos:end="130:22">s2</name><operator pos:start="130:23" pos:end="130:24">-&gt;</operator><name pos:start="130:25" pos:end="130:41">picture_structure</name></name> <operator pos:start="130:43" pos:end="130:43">=</operator> <name pos:start="130:45" pos:end="130:54">PICT_FRAME</name></expr>;</expr_stmt>
                <if_stmt pos:start="131:17" pos:end="216:18"><if pos:start="131:17" pos:end="216:18">if <condition pos:start="131:20" pos:end="131:74">(<expr pos:start="131:21" pos:end="131:73"><name pos:start="131:21" pos:end="131:44"><name pos:start="131:21" pos:end="131:22">s2</name><operator pos:start="131:23" pos:end="131:24">-&gt;</operator><name pos:start="131:25" pos:end="131:44">progressive_sequence</name></name> <operator pos:start="131:46" pos:end="131:47">&amp;&amp;</operator> <operator pos:start="131:49" pos:end="131:49">!</operator><name pos:start="131:50" pos:end="131:73"><name pos:start="131:50" pos:end="131:51">s2</name><operator pos:start="131:52" pos:end="131:53">-&gt;</operator><name pos:start="131:54" pos:end="131:73">frame_pred_frame_dct</name></name></expr>)</condition> <block pos:start="131:76" pos:end="216:18">{<block_content pos:start="132:21" pos:end="216:18">
                    <expr_stmt pos:start="132:21" pos:end="132:88"><expr pos:start="132:21" pos:end="132:87"><call pos:start="132:21" pos:end="132:87"><name pos:start="132:21" pos:end="132:26">av_log</name><argument_list pos:start="132:27" pos:end="132:87">(<argument pos:start="132:28" pos:end="132:36"><expr pos:start="132:28" pos:end="132:36"><name pos:start="132:28" pos:end="132:36"><name pos:start="132:28" pos:end="132:29">s2</name><operator pos:start="132:30" pos:end="132:31">-&gt;</operator><name pos:start="132:32" pos:end="132:36">avctx</name></name></expr></argument>, <argument pos:start="132:39" pos:end="132:52"><expr pos:start="132:39" pos:end="132:52"><name pos:start="132:39" pos:end="132:52">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="132:55" pos:end="132:86"><expr pos:start="132:55" pos:end="132:86"><literal type="string" pos:start="132:55" pos:end="132:86">"invalid frame_pred_frame_dct\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="133:17" pos:end="216:18"><if pos:start="133:17" pos:end="136:17">if <condition pos:start="133:20" pos:end="133:56">(<expr pos:start="133:21" pos:end="133:55"><name pos:start="133:21" pos:end="133:41"><name pos:start="133:21" pos:end="133:22">s2</name><operator pos:start="133:23" pos:end="133:24">-&gt;</operator><name pos:start="133:25" pos:end="133:41">picture_structure</name></name> <operator pos:start="133:43" pos:end="133:44">==</operator> <name pos:start="133:46" pos:end="133:55">PICT_FRAME</name></expr>)</condition> <block pos:start="133:58" pos:end="136:17">{<block_content pos:start="134:21" pos:end="135:57">
                    <expr_stmt pos:start="134:21" pos:end="134:40"><expr pos:start="134:21" pos:end="134:39"><name pos:start="134:21" pos:end="134:35"><name pos:start="134:21" pos:end="134:22">s2</name><operator pos:start="134:23" pos:end="134:24">-&gt;</operator><name pos:start="134:25" pos:end="134:35">first_field</name></name> <operator pos:start="134:37" pos:end="134:37">=</operator> <literal type="number" pos:start="134:39" pos:end="134:39">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="135:21" pos:end="135:57"><expr pos:start="135:21" pos:end="135:56"><name pos:start="135:21" pos:end="135:34"><name pos:start="135:21" pos:end="135:22">s2</name><operator pos:start="135:23" pos:end="135:24">-&gt;</operator><name pos:start="135:25" pos:end="135:34">v_edge_pos</name></name>  <operator pos:start="135:37" pos:end="135:37">=</operator> <literal type="number" pos:start="135:39" pos:end="135:40">16</literal> <operator pos:start="135:42" pos:end="135:42">*</operator> <name pos:start="135:44" pos:end="135:56"><name pos:start="135:44" pos:end="135:45">s2</name><operator pos:start="135:46" pos:end="135:47">-&gt;</operator><name pos:start="135:48" pos:end="135:56">mb_height</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="136:19" pos:end="216:18">else <block pos:start="136:24" pos:end="216:18">{<block_content pos:start="137:21" pos:end="216:18">
                    <expr_stmt pos:start="137:21" pos:end="137:41"><expr pos:start="137:21" pos:end="137:40"><name pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:22">s2</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:35">first_field</name></name> <operator pos:start="137:37" pos:end="137:38">^=</operator> <literal type="number" pos:start="137:40" pos:end="137:40">1</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="138:21" pos:end="138:57"><expr pos:start="138:21" pos:end="138:56"><name pos:start="138:21" pos:end="138:34"><name pos:start="138:21" pos:end="138:22">s2</name><operator pos:start="138:23" pos:end="138:24">-&gt;</operator><name pos:start="138:25" pos:end="138:34">v_edge_pos</name></name>   <operator pos:start="138:38" pos:end="138:38">=</operator> <literal type="number" pos:start="138:40" pos:end="138:40">8</literal> <operator pos:start="138:42" pos:end="138:42">*</operator> <name pos:start="138:44" pos:end="138:56"><name pos:start="138:44" pos:end="138:45">s2</name><operator pos:start="138:46" pos:end="138:47">-&gt;</operator><name pos:start="138:48" pos:end="138:56">mb_height</name></name></expr>;</expr_stmt>
                    <expr_stmt pos:start="139:21" pos:end="139:79"><expr pos:start="139:21" pos:end="139:78"><call pos:start="139:21" pos:end="139:78"><name pos:start="139:21" pos:end="139:26">memset</name><argument_list pos:start="139:27" pos:end="139:78">(<argument pos:start="139:28" pos:end="139:43"><expr pos:start="139:28" pos:end="139:43"><name pos:start="139:28" pos:end="139:43"><name pos:start="139:28" pos:end="139:29">s2</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:43">mbskip_table</name></name></expr></argument>, <argument pos:start="139:46" pos:end="139:46"><expr pos:start="139:46" pos:end="139:46"><literal type="number" pos:start="139:46" pos:end="139:46">0</literal></expr></argument>, <argument pos:start="139:49" pos:end="139:77"><expr pos:start="139:49" pos:end="139:77"><name pos:start="139:49" pos:end="139:61"><name pos:start="139:49" pos:end="139:50">s2</name><operator pos:start="139:51" pos:end="139:52">-&gt;</operator><name pos:start="139:53" pos:end="139:61">mb_stride</name></name> <operator pos:start="139:63" pos:end="139:63">*</operator> <name pos:start="139:65" pos:end="139:77"><name pos:start="139:65" pos:end="139:66">s2</name><operator pos:start="139:67" pos:end="139:68">-&gt;</operator><name pos:start="139:69" pos:end="139:77">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="140:13" pos:end="216:18"><if pos:start="140:13" pos:end="216:18">if <condition pos:start="140:16" pos:end="141:69">(<expr pos:start="140:17" pos:end="141:68"><name pos:start="140:17" pos:end="140:26">start_code</name> <operator pos:start="140:28" pos:end="140:29">&gt;=</operator> <name pos:start="140:31" pos:end="140:50">SLICE_MIN_START_CODE</name> <operator pos:start="140:52" pos:end="140:53">&amp;&amp;</operator>
                <name pos:start="141:17" pos:end="141:26">start_code</name> <operator pos:start="141:28" pos:end="141:29">&lt;=</operator> <name pos:start="141:31" pos:end="141:50">SLICE_MAX_START_CODE</name> <operator pos:start="141:52" pos:end="141:53">&amp;&amp;</operator> <name pos:start="141:55" pos:end="141:63">last_code</name> <operator pos:start="141:65" pos:end="141:66">!=</operator> <literal type="number" pos:start="141:68" pos:end="141:68">0</literal></expr>)</condition> <block pos:start="141:71" pos:end="216:18">{<block_content pos:start="142:17" pos:end="216:18">
                <decl_stmt pos:start="142:17" pos:end="142:74"><decl pos:start="142:17" pos:end="142:73"><type pos:start="142:17" pos:end="142:25"><specifier pos:start="142:17" pos:end="142:21">const</specifier> <name pos:start="142:23" pos:end="142:25">int</name></type> <name pos:start="142:27" pos:end="142:35">field_pic</name> <init pos:start="142:37" pos:end="142:73">= <expr pos:start="142:39" pos:end="142:73"><name pos:start="142:39" pos:end="142:59"><name pos:start="142:39" pos:end="142:40">s2</name><operator pos:start="142:41" pos:end="142:42">-&gt;</operator><name pos:start="142:43" pos:end="142:59">picture_structure</name></name> <operator pos:start="142:61" pos:end="142:62">!=</operator> <name pos:start="142:64" pos:end="142:73">PICT_FRAME</name></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="143:17" pos:end="143:61"><decl pos:start="143:17" pos:end="143:60"><type pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:19">int</name></type> <name pos:start="143:21" pos:end="143:24">mb_y</name> <init pos:start="143:26" pos:end="143:60">= <expr pos:start="143:28" pos:end="143:60"><name pos:start="143:28" pos:end="143:37">start_code</name> <operator pos:start="143:39" pos:end="143:39">-</operator> <name pos:start="143:41" pos:end="143:60">SLICE_MIN_START_CODE</name></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="144:17" pos:end="144:49"><expr pos:start="144:17" pos:end="144:48"><name pos:start="144:17" pos:end="144:25">last_code</name> <operator pos:start="144:27" pos:end="144:27">=</operator> <name pos:start="144:29" pos:end="144:48">SLICE_MIN_START_CODE</name></expr>;</expr_stmt>
                <if_stmt pos:start="145:17" pos:end="146:47"><if pos:start="145:17" pos:end="146:47">if<condition pos:start="145:19" pos:end="145:85">(<expr pos:start="145:20" pos:end="145:84"><name pos:start="145:20" pos:end="145:31"><name pos:start="145:20" pos:end="145:21">s2</name><operator pos:start="145:22" pos:end="145:23">-&gt;</operator><name pos:start="145:24" pos:end="145:31">codec_id</name></name> <operator pos:start="145:33" pos:end="145:34">!=</operator> <name pos:start="145:36" pos:end="145:57">AV_CODEC_ID_MPEG1VIDEO</name> <operator pos:start="145:59" pos:end="145:60">&amp;&amp;</operator> <name pos:start="145:62" pos:end="145:74"><name pos:start="145:62" pos:end="145:63">s2</name><operator pos:start="145:64" pos:end="145:65">-&gt;</operator><name pos:start="145:66" pos:end="145:74">mb_height</name></name> <operator pos:start="145:76" pos:end="145:76">&gt;</operator> <literal type="number" pos:start="145:78" pos:end="145:81">2800</literal><operator pos:start="145:82" pos:end="145:82">/</operator><literal type="number" pos:start="145:83" pos:end="145:84">16</literal></expr>)</condition><block type="pseudo" pos:start="146:21" pos:end="146:47"><block_content pos:start="146:21" pos:end="146:47">
                    <expr_stmt pos:start="146:21" pos:end="146:47"><expr pos:start="146:21" pos:end="146:46"><name pos:start="146:21" pos:end="146:24">mb_y</name> <operator pos:start="146:26" pos:end="146:27">+=</operator> <operator pos:start="146:29" pos:end="146:29">(</operator><operator pos:start="146:30" pos:end="146:30">*</operator><name pos:start="146:31" pos:end="146:37">buf_ptr</name><operator pos:start="146:38" pos:end="146:38">&amp;</operator><literal type="number" pos:start="146:39" pos:end="146:42">0xE0</literal><operator pos:start="146:43" pos:end="146:43">)</operator><operator pos:start="146:44" pos:end="146:45">&lt;&lt;</operator><literal type="number" pos:start="146:46" pos:end="146:46">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="147:17" pos:end="147:35"><expr pos:start="147:17" pos:end="147:34"><name pos:start="147:17" pos:end="147:20">mb_y</name> <operator pos:start="147:22" pos:end="147:24">&lt;&lt;=</operator> <name pos:start="147:26" pos:end="147:34">field_pic</name></expr>;</expr_stmt>
                <if_stmt pos:start="148:17" pos:end="149:27"><if pos:start="148:17" pos:end="149:27">if <condition pos:start="148:20" pos:end="148:63">(<expr pos:start="148:21" pos:end="148:62"><name pos:start="148:21" pos:end="148:41"><name pos:start="148:21" pos:end="148:22">s2</name><operator pos:start="148:23" pos:end="148:24">-&gt;</operator><name pos:start="148:25" pos:end="148:41">picture_structure</name></name> <operator pos:start="148:43" pos:end="148:44">==</operator> <name pos:start="148:46" pos:end="148:62">PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo" pos:start="149:21" pos:end="149:27"><block_content pos:start="149:21" pos:end="149:27">
                    <expr_stmt pos:start="149:21" pos:end="149:27"><expr pos:start="149:21" pos:end="149:26"><name pos:start="149:21" pos:end="149:24">mb_y</name><operator pos:start="149:25" pos:end="149:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="150:17" pos:end="216:18"><if pos:start="150:17" pos:end="216:18">if <condition pos:start="150:20" pos:end="150:42">(<expr pos:start="150:21" pos:end="150:41"><name pos:start="150:21" pos:end="150:24">mb_y</name> <operator pos:start="150:26" pos:end="150:27">&gt;=</operator> <name pos:start="150:29" pos:end="150:41"><name pos:start="150:29" pos:end="150:30">s2</name><operator pos:start="150:31" pos:end="150:32">-&gt;</operator><name pos:start="150:33" pos:end="150:41">mb_height</name></name></expr>)</condition> <block pos:start="150:44" pos:end="216:18">{<block_content pos:start="151:21" pos:end="216:18">
                    <expr_stmt pos:start="151:21" pos:end="151:107"><expr pos:start="151:21" pos:end="151:106"><call pos:start="151:21" pos:end="151:106"><name pos:start="151:21" pos:end="151:26">av_log</name><argument_list pos:start="151:27" pos:end="151:106">(<argument pos:start="151:28" pos:end="151:36"><expr pos:start="151:28" pos:end="151:36"><name pos:start="151:28" pos:end="151:36"><name pos:start="151:28" pos:end="151:29">s2</name><operator pos:start="151:30" pos:end="151:31">-&gt;</operator><name pos:start="151:32" pos:end="151:36">avctx</name></name></expr></argument>, <argument pos:start="151:39" pos:end="151:50"><expr pos:start="151:39" pos:end="151:50"><name pos:start="151:39" pos:end="151:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:53" pos:end="151:84"><expr pos:start="151:53" pos:end="151:84"><literal type="string" pos:start="151:53" pos:end="151:84">"slice below image (%d &gt;= %d)\n"</literal></expr></argument>, <argument pos:start="151:87" pos:end="151:90"><expr pos:start="151:87" pos:end="151:90"><name pos:start="151:87" pos:end="151:90">mb_y</name></expr></argument>, <argument pos:start="151:93" pos:end="151:105"><expr pos:start="151:93" pos:end="151:105"><name pos:start="151:93" pos:end="151:105"><name pos:start="151:93" pos:end="151:94">s2</name><operator pos:start="151:95" pos:end="151:96">-&gt;</operator><name pos:start="151:97" pos:end="151:105">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="152:21" pos:end="152:30">return <expr pos:start="152:28" pos:end="152:29"><operator pos:start="152:28" pos:end="152:28">-</operator><literal type="number" pos:start="152:29" pos:end="152:29">1</literal></expr>;</return>
                <if_stmt pos:start="153:17" pos:end="216:18"><if pos:start="153:17" pos:end="216:18">if <condition pos:start="153:20" pos:end="153:49">(<expr pos:start="153:21" pos:end="153:48"><name pos:start="153:21" pos:end="153:40"><name pos:start="153:21" pos:end="153:22">s2</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:40">last_picture_ptr</name></name> <operator pos:start="153:42" pos:end="153:43">==</operator> <name pos:start="153:45" pos:end="153:48">NULL</name></expr>)</condition> <block pos:start="153:51" pos:end="216:18">{<block_content pos:start="155:21" pos:end="216:18">
                <comment type="block" pos:start="154:17" pos:end="154:92">/* Skip B-frames if we do not have reference frames and gop is not closed */</comment>
                    <if_stmt pos:start="155:21" pos:end="216:18"><if pos:start="155:21" pos:end="216:18">if <condition pos:start="155:24" pos:end="155:59">(<expr pos:start="155:25" pos:end="155:58"><name pos:start="155:25" pos:end="155:37"><name pos:start="155:25" pos:end="155:26">s2</name><operator pos:start="155:27" pos:end="155:28">-&gt;</operator><name pos:start="155:29" pos:end="155:37">pict_type</name></name> <operator pos:start="155:39" pos:end="155:40">==</operator> <name pos:start="155:42" pos:end="155:58">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="155:61" pos:end="216:18">{<block_content pos:start="156:25" pos:end="216:18">
                        <if_stmt pos:start="156:25" pos:end="216:18"><if pos:start="156:25" pos:end="216:18">if <condition pos:start="156:28" pos:end="156:44">(<expr pos:start="156:29" pos:end="156:43"><operator pos:start="156:29" pos:end="156:29">!</operator><name pos:start="156:30" pos:end="156:43"><name pos:start="156:30" pos:end="156:31">s2</name><operator pos:start="156:32" pos:end="156:33">-&gt;</operator><name pos:start="156:34" pos:end="156:43">closed_gop</name></name></expr>)</condition> <block pos:start="156:46" pos:end="216:18">{<block_content pos:start="157:29" pos:end="216:18">
                            <expr_stmt pos:start="157:29" pos:end="157:43"><expr pos:start="157:29" pos:end="157:42"><name pos:start="157:29" pos:end="157:38">skip_frame</name> <operator pos:start="157:40" pos:end="157:40">=</operator> <literal type="number" pos:start="157:42" pos:end="157:42">1</literal></expr>;</expr_stmt>
                            <break pos:start="158:29" pos:end="158:34">break;</break>
                <if_stmt pos:start="159:17" pos:end="160:30"><if pos:start="159:17" pos:end="160:30">if <condition pos:start="159:20" pos:end="159:94">(<expr pos:start="159:21" pos:end="159:93"><name pos:start="159:21" pos:end="159:33"><name pos:start="159:21" pos:end="159:22">s2</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:33">pict_type</name></name> <operator pos:start="159:35" pos:end="159:36">==</operator> <name pos:start="159:38" pos:end="159:54">AV_PICTURE_TYPE_I</name> <operator pos:start="159:56" pos:end="159:57">||</operator> <operator pos:start="159:59" pos:end="159:59">(</operator><name pos:start="159:60" pos:end="159:69"><name pos:start="159:60" pos:end="159:61">s2</name><operator pos:start="159:62" pos:end="159:63">-&gt;</operator><name pos:start="159:64" pos:end="159:69">flags2</name></name> <operator pos:start="159:71" pos:end="159:71">&amp;</operator> <name pos:start="159:73" pos:end="159:92">CODEC_FLAG2_SHOW_ALL</name><operator pos:start="159:93" pos:end="159:93">)</operator></expr>)</condition><block type="pseudo" pos:start="160:21" pos:end="160:30"><block_content pos:start="160:21" pos:end="160:30">
                    <expr_stmt pos:start="160:21" pos:end="160:30"><expr pos:start="160:21" pos:end="160:29"><name pos:start="160:21" pos:end="160:27"><name pos:start="160:21" pos:end="160:21">s</name><operator pos:start="160:22" pos:end="160:23">-&gt;</operator><name pos:start="160:24" pos:end="160:27">sync</name></name><operator pos:start="160:28" pos:end="160:28">=</operator><literal type="number" pos:start="160:29" pos:end="160:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="161:17" pos:end="216:18"><if pos:start="161:17" pos:end="216:18">if <condition pos:start="161:20" pos:end="161:49">(<expr pos:start="161:21" pos:end="161:48"><name pos:start="161:21" pos:end="161:40"><name pos:start="161:21" pos:end="161:22">s2</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:40">next_picture_ptr</name></name> <operator pos:start="161:42" pos:end="161:43">==</operator> <name pos:start="161:45" pos:end="161:48">NULL</name></expr>)</condition> <block pos:start="161:51" pos:end="216:18">{<block_content pos:start="163:21" pos:end="216:18">
                <comment type="block" pos:start="162:17" pos:end="162:101">/* Skip P-frames if we do not have a reference frame or we have an invalid header. */</comment>
                    <if_stmt pos:start="163:21" pos:end="216:18"><if pos:start="163:21" pos:end="216:18">if <condition pos:start="163:24" pos:end="163:71">(<expr pos:start="163:25" pos:end="163:70"><name pos:start="163:25" pos:end="163:37"><name pos:start="163:25" pos:end="163:26">s2</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:37">pict_type</name></name> <operator pos:start="163:39" pos:end="163:40">==</operator> <name pos:start="163:42" pos:end="163:58">AV_PICTURE_TYPE_P</name> <operator pos:start="163:60" pos:end="163:61">&amp;&amp;</operator> <operator pos:start="163:63" pos:end="163:63">!</operator><name pos:start="163:64" pos:end="163:70"><name pos:start="163:64" pos:end="163:64">s</name><operator pos:start="163:65" pos:end="163:66">-&gt;</operator><name pos:start="163:67" pos:end="163:70">sync</name></name></expr>)</condition> <block pos:start="163:73" pos:end="216:18">{<block_content pos:start="164:25" pos:end="216:18">
                        <expr_stmt pos:start="164:25" pos:end="164:39"><expr pos:start="164:25" pos:end="164:38"><name pos:start="164:25" pos:end="164:34">skip_frame</name> <operator pos:start="164:36" pos:end="164:36">=</operator> <literal type="number" pos:start="164:38" pos:end="164:38">1</literal></expr>;</expr_stmt>
                        <break pos:start="165:25" pos:end="165:30">break;</break>
                <if_stmt pos:start="166:17" pos:end="216:18"><if pos:start="166:17" pos:end="216:18">if <condition pos:start="166:20" pos:end="168:56">(<expr pos:start="166:21" pos:end="168:55"><operator pos:start="166:21" pos:end="166:21">(</operator><name pos:start="166:22" pos:end="166:38"><name pos:start="166:22" pos:end="166:26">avctx</name><operator pos:start="166:27" pos:end="166:28">-&gt;</operator><name pos:start="166:29" pos:end="166:38">skip_frame</name></name> <operator pos:start="166:40" pos:end="166:41">&gt;=</operator> <name pos:start="166:43" pos:end="166:58">AVDISCARD_NONREF</name> <operator pos:start="166:60" pos:end="166:61">&amp;&amp;</operator> <name pos:start="166:63" pos:end="166:75"><name pos:start="166:63" pos:end="166:64">s2</name><operator pos:start="166:65" pos:end="166:66">-&gt;</operator><name pos:start="166:67" pos:end="166:75">pict_type</name></name> <operator pos:start="166:77" pos:end="166:78">==</operator> <name pos:start="166:80" pos:end="166:96">AV_PICTURE_TYPE_B</name><operator pos:start="166:97" pos:end="166:97">)</operator> <operator pos:start="166:99" pos:end="166:100">||</operator>
                    <operator pos:start="167:21" pos:end="167:21">(</operator><name pos:start="167:22" pos:end="167:38"><name pos:start="167:22" pos:end="167:26">avctx</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:38">skip_frame</name></name> <operator pos:start="167:40" pos:end="167:41">&gt;=</operator> <name pos:start="167:43" pos:end="167:58">AVDISCARD_NONKEY</name> <operator pos:start="167:60" pos:end="167:61">&amp;&amp;</operator> <name pos:start="167:63" pos:end="167:75"><name pos:start="167:63" pos:end="167:64">s2</name><operator pos:start="167:65" pos:end="167:66">-&gt;</operator><name pos:start="167:67" pos:end="167:75">pict_type</name></name> <operator pos:start="167:77" pos:end="167:78">!=</operator> <name pos:start="167:80" pos:end="167:96">AV_PICTURE_TYPE_I</name><operator pos:start="167:97" pos:end="167:97">)</operator> <operator pos:start="167:99" pos:end="167:100">||</operator>
                     <name pos:start="168:22" pos:end="168:38"><name pos:start="168:22" pos:end="168:26">avctx</name><operator pos:start="168:27" pos:end="168:28">-&gt;</operator><name pos:start="168:29" pos:end="168:38">skip_frame</name></name> <operator pos:start="168:40" pos:end="168:41">&gt;=</operator> <name pos:start="168:43" pos:end="168:55">AVDISCARD_ALL</name></expr>)</condition> <block pos:start="168:58" pos:end="216:18">{<block_content pos:start="169:21" pos:end="216:18">
                    <expr_stmt pos:start="169:21" pos:end="169:35"><expr pos:start="169:21" pos:end="169:34"><name pos:start="169:21" pos:end="169:30">skip_frame</name> <operator pos:start="169:32" pos:end="169:32">=</operator> <literal type="number" pos:start="169:34" pos:end="169:34">1</literal></expr>;</expr_stmt>
                    <break pos:start="170:21" pos:end="170:26">break;</break>
                <if_stmt pos:start="171:17" pos:end="172:26"><if pos:start="171:17" pos:end="172:26">if <condition pos:start="171:20" pos:end="171:47">(<expr pos:start="171:21" pos:end="171:46"><operator pos:start="171:21" pos:end="171:21">!</operator><name pos:start="171:22" pos:end="171:46"><name pos:start="171:22" pos:end="171:22">s</name><operator pos:start="171:23" pos:end="171:24">-&gt;</operator><name pos:start="171:25" pos:end="171:46">mpeg_enc_ctx_allocated</name></name></expr>)</condition><block type="pseudo" pos:start="172:21" pos:end="172:26"><block_content pos:start="172:21" pos:end="172:26">
                    <break pos:start="172:21" pos:end="172:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="173:17" pos:end="216:18"><if pos:start="173:17" pos:end="216:18">if <condition pos:start="173:20" pos:end="173:59">(<expr pos:start="173:21" pos:end="173:58"><name pos:start="173:21" pos:end="173:32"><name pos:start="173:21" pos:end="173:22">s2</name><operator pos:start="173:23" pos:end="173:24">-&gt;</operator><name pos:start="173:25" pos:end="173:32">codec_id</name></name> <operator pos:start="173:34" pos:end="173:35">==</operator> <name pos:start="173:37" pos:end="173:58">AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block pos:start="173:61" pos:end="216:18">{<block_content pos:start="174:21" pos:end="216:18">
                    <if_stmt pos:start="174:21" pos:end="175:30"><if pos:start="174:21" pos:end="175:30">if <condition pos:start="174:24" pos:end="174:93">(<expr pos:start="174:25" pos:end="174:92"><name pos:start="174:25" pos:end="174:28">mb_y</name> <operator pos:start="174:30" pos:end="174:30">&lt;</operator> <name pos:start="174:32" pos:end="174:46"><name pos:start="174:32" pos:end="174:36">avctx</name><operator pos:start="174:37" pos:end="174:38">-&gt;</operator><name pos:start="174:39" pos:end="174:46">skip_top</name></name> <operator pos:start="174:48" pos:end="174:49">||</operator> <name pos:start="174:51" pos:end="174:54">mb_y</name> <operator pos:start="174:56" pos:end="174:57">&gt;=</operator> <name pos:start="174:59" pos:end="174:71"><name pos:start="174:59" pos:end="174:60">s2</name><operator pos:start="174:61" pos:end="174:62">-&gt;</operator><name pos:start="174:63" pos:end="174:71">mb_height</name></name> <operator pos:start="174:73" pos:end="174:73">-</operator> <name pos:start="174:75" pos:end="174:92"><name pos:start="174:75" pos:end="174:79">avctx</name><operator pos:start="174:80" pos:end="174:81">-&gt;</operator><name pos:start="174:82" pos:end="174:92">skip_bottom</name></name></expr>)</condition><block type="pseudo" pos:start="175:25" pos:end="175:30"><block_content pos:start="175:25" pos:end="175:30">
                        <break pos:start="175:25" pos:end="175:30">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="176:17" pos:end="216:18"><if pos:start="176:17" pos:end="216:18">if <condition pos:start="176:20" pos:end="176:35">(<expr pos:start="176:21" pos:end="176:34"><operator pos:start="176:21" pos:end="176:21">!</operator><name pos:start="176:22" pos:end="176:34"><name pos:start="176:22" pos:end="176:23">s2</name><operator pos:start="176:24" pos:end="176:25">-&gt;</operator><name pos:start="176:26" pos:end="176:34">pict_type</name></name></expr>)</condition> <block pos:start="176:37" pos:end="216:18">{<block_content pos:start="177:21" pos:end="216:18">
                    <expr_stmt pos:start="177:21" pos:end="177:80"><expr pos:start="177:21" pos:end="177:79"><call pos:start="177:21" pos:end="177:79"><name pos:start="177:21" pos:end="177:26">av_log</name><argument_list pos:start="177:27" pos:end="177:79">(<argument pos:start="177:28" pos:end="177:32"><expr pos:start="177:28" pos:end="177:32"><name pos:start="177:28" pos:end="177:32">avctx</name></expr></argument>, <argument pos:start="177:35" pos:end="177:46"><expr pos:start="177:35" pos:end="177:46"><name pos:start="177:35" pos:end="177:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:49" pos:end="177:78"><expr pos:start="177:49" pos:end="177:78"><literal type="string" pos:start="177:49" pos:end="177:78">"Missing picture start code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="178:21" pos:end="179:26"><if pos:start="178:21" pos:end="179:26">if <condition pos:start="178:24" pos:end="178:63">(<expr pos:start="178:25" pos:end="178:62"><name pos:start="178:25" pos:end="178:46"><name pos:start="178:25" pos:end="178:29">avctx</name><operator pos:start="178:30" pos:end="178:31">-&gt;</operator><name pos:start="178:32" pos:end="178:46">err_recognition</name></name> <operator pos:start="178:48" pos:end="178:48">&amp;</operator> <name pos:start="178:50" pos:end="178:62">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="179:21" pos:end="179:26"><block_content pos:start="179:21" pos:end="179:26">
                    <break pos:start="179:21" pos:end="179:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="180:17" pos:end="216:18"><if pos:start="180:17" pos:end="216:18">if <condition pos:start="180:20" pos:end="180:36">(<expr pos:start="180:21" pos:end="180:35"><name pos:start="180:21" pos:end="180:35"><name pos:start="180:21" pos:end="180:22">s2</name><operator pos:start="180:23" pos:end="180:24">-&gt;</operator><name pos:start="180:25" pos:end="180:35">first_slice</name></name></expr>)</condition> <block pos:start="180:38" pos:end="216:18">{<block_content pos:start="181:21" pos:end="216:18">
                    <expr_stmt pos:start="181:21" pos:end="181:35"><expr pos:start="181:21" pos:end="181:34"><name pos:start="181:21" pos:end="181:30">skip_frame</name> <operator pos:start="181:32" pos:end="181:32">=</operator> <literal type="number" pos:start="181:34" pos:end="181:34">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="182:21" pos:end="182:40"><expr pos:start="182:21" pos:end="182:39"><name pos:start="182:21" pos:end="182:35"><name pos:start="182:21" pos:end="182:22">s2</name><operator pos:start="182:23" pos:end="182:24">-&gt;</operator><name pos:start="182:25" pos:end="182:35">first_slice</name></name> <operator pos:start="182:37" pos:end="182:37">=</operator> <literal type="number" pos:start="182:39" pos:end="182:39">0</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="183:21" pos:end="184:34"><if pos:start="183:21" pos:end="184:34">if <condition pos:start="183:24" pos:end="183:64">(<expr pos:start="183:25" pos:end="183:63"><call pos:start="183:25" pos:end="183:59"><name pos:start="183:25" pos:end="183:40">mpeg_field_start</name><argument_list pos:start="183:41" pos:end="183:59">(<argument pos:start="183:42" pos:end="183:43"><expr pos:start="183:42" pos:end="183:43"><name pos:start="183:42" pos:end="183:43">s2</name></expr></argument>, <argument pos:start="183:46" pos:end="183:48"><expr pos:start="183:46" pos:end="183:48"><name pos:start="183:46" pos:end="183:48">buf</name></expr></argument>, <argument pos:start="183:51" pos:end="183:58"><expr pos:start="183:51" pos:end="183:58"><name pos:start="183:51" pos:end="183:58">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="183:61" pos:end="183:61">&lt;</operator> <literal type="number" pos:start="183:63" pos:end="183:63">0</literal></expr>)</condition><block type="pseudo" pos:start="184:25" pos:end="184:34"><block_content pos:start="184:25" pos:end="184:34">
                        <return pos:start="184:25" pos:end="184:34">return <expr pos:start="184:32" pos:end="184:33"><operator pos:start="184:32" pos:end="184:32">-</operator><literal type="number" pos:start="184:33" pos:end="184:33">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt pos:start="185:17" pos:end="216:18"><if pos:start="185:17" pos:end="216:18">if <condition pos:start="185:20" pos:end="185:45">(<expr pos:start="185:21" pos:end="185:44"><operator pos:start="185:21" pos:end="185:21">!</operator><name pos:start="185:22" pos:end="185:44"><name pos:start="185:22" pos:end="185:23">s2</name><operator pos:start="185:24" pos:end="185:25">-&gt;</operator><name pos:start="185:26" pos:end="185:44">current_picture_ptr</name></name></expr>)</condition> <block pos:start="185:47" pos:end="216:18">{<block_content pos:start="186:21" pos:end="216:18">
                    <expr_stmt pos:start="186:21" pos:end="186:85"><expr pos:start="186:21" pos:end="186:84"><call pos:start="186:21" pos:end="186:84"><name pos:start="186:21" pos:end="186:26">av_log</name><argument_list pos:start="186:27" pos:end="186:84">(<argument pos:start="186:28" pos:end="186:32"><expr pos:start="186:28" pos:end="186:32"><name pos:start="186:28" pos:end="186:32">avctx</name></expr></argument>, <argument pos:start="186:35" pos:end="186:46"><expr pos:start="186:35" pos:end="186:46"><name pos:start="186:35" pos:end="186:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="186:49" pos:end="186:83"><expr pos:start="186:49" pos:end="186:83"><literal type="string" pos:start="186:49" pos:end="186:83">"current_picture not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="187:17" pos:end="216:18"><if pos:start="187:17" pos:end="216:18">if <condition pos:start="187:20" pos:end="188:36">(<expr pos:start="187:21" pos:end="188:35"><name pos:start="187:21" pos:end="187:32">HAVE_THREADS</name> <operator pos:start="187:34" pos:end="187:35">&amp;&amp;</operator> <operator pos:start="187:37" pos:end="187:37">(</operator><name pos:start="187:38" pos:end="187:62"><name pos:start="187:38" pos:end="187:42">avctx</name><operator pos:start="187:43" pos:end="187:44">-&gt;</operator><name pos:start="187:45" pos:end="187:62">active_thread_type</name></name> <operator pos:start="187:64" pos:end="187:64">&amp;</operator> <name pos:start="187:66" pos:end="187:80">FF_THREAD_SLICE</name><operator pos:start="187:81" pos:end="187:81">)</operator> <operator pos:start="187:83" pos:end="187:84">&amp;&amp;</operator>
                    <operator pos:start="188:21" pos:end="188:21">!</operator><name pos:start="188:22" pos:end="188:35"><name pos:start="188:22" pos:end="188:26">avctx</name><operator pos:start="188:27" pos:end="188:28">-&gt;</operator><name pos:start="188:29" pos:end="188:35">hwaccel</name></name></expr>)</condition> <block pos:start="188:38" pos:end="216:18">{<block_content pos:start="189:21" pos:end="216:18">
                    <decl_stmt pos:start="189:21" pos:end="191:60"><decl pos:start="189:21" pos:end="191:59"><type pos:start="189:21" pos:end="189:23"><name pos:start="189:21" pos:end="189:23">int</name></type> <name pos:start="189:25" pos:end="189:33">threshold</name> <init pos:start="189:35" pos:end="191:59">= <expr pos:start="189:37" pos:end="191:59"><operator pos:start="189:37" pos:end="189:37">(</operator><name pos:start="189:38" pos:end="189:50"><name pos:start="189:38" pos:end="189:39">s2</name><operator pos:start="189:40" pos:end="189:41">-&gt;</operator><name pos:start="189:42" pos:end="189:50">mb_height</name></name> <operator pos:start="189:52" pos:end="189:52">*</operator> <name pos:start="189:54" pos:end="189:67"><name pos:start="189:54" pos:end="189:54">s</name><operator pos:start="189:55" pos:end="189:56">-&gt;</operator><name pos:start="189:57" pos:end="189:67">slice_count</name></name> <operator pos:start="189:69" pos:end="189:69">+</operator>
                                     <name pos:start="190:38" pos:end="190:60"><name pos:start="190:38" pos:end="190:39">s2</name><operator pos:start="190:40" pos:end="190:41">-&gt;</operator><name pos:start="190:42" pos:end="190:60">slice_context_count</name></name> <operator pos:start="190:62" pos:end="190:62">/</operator> <literal type="number" pos:start="190:64" pos:end="190:64">2</literal><operator pos:start="190:65" pos:end="190:65">)</operator> <operator pos:start="190:67" pos:end="190:67">/</operator>
                                    <name pos:start="191:37" pos:end="191:59"><name pos:start="191:37" pos:end="191:38">s2</name><operator pos:start="191:39" pos:end="191:40">-&gt;</operator><name pos:start="191:41" pos:end="191:59">slice_context_count</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="192:21" pos:end="192:56"><expr pos:start="192:21" pos:end="192:55"><call pos:start="192:21" pos:end="192:55"><name pos:start="192:21" pos:end="192:30">av_assert0</name><argument_list pos:start="192:31" pos:end="192:55">(<argument pos:start="192:32" pos:end="192:54"><expr pos:start="192:32" pos:end="192:54"><name pos:start="192:32" pos:end="192:50"><name pos:start="192:32" pos:end="192:36">avctx</name><operator pos:start="192:37" pos:end="192:38">-&gt;</operator><name pos:start="192:39" pos:end="192:50">thread_count</name></name> <operator pos:start="192:52" pos:end="192:52">&gt;</operator> <literal type="number" pos:start="192:54" pos:end="192:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="193:21" pos:end="216:18"><if pos:start="193:21" pos:end="216:18">if <condition pos:start="193:24" pos:end="193:42">(<expr pos:start="193:25" pos:end="193:41"><name pos:start="193:25" pos:end="193:33">threshold</name> <operator pos:start="193:35" pos:end="193:36">&lt;=</operator> <name pos:start="193:38" pos:end="193:41">mb_y</name></expr>)</condition> <block pos:start="193:44" pos:end="216:18">{<block_content pos:start="194:25" pos:end="216:18">
                        <decl_stmt pos:start="194:25" pos:end="194:92"><decl pos:start="194:25" pos:end="194:91"><type pos:start="194:25" pos:end="194:40"><name pos:start="194:25" pos:end="194:38">MpegEncContext</name> <modifier pos:start="194:40" pos:end="194:40">*</modifier></type><name pos:start="194:41" pos:end="194:54">thread_context</name> <init pos:start="194:56" pos:end="194:91">= <expr pos:start="194:58" pos:end="194:91"><name pos:start="194:58" pos:end="194:91"><name pos:start="194:58" pos:end="194:59">s2</name><operator pos:start="194:60" pos:end="194:61">-&gt;</operator><name pos:start="194:62" pos:end="194:75">thread_context</name><index pos:start="194:76" pos:end="194:91">[<expr pos:start="194:77" pos:end="194:90"><name pos:start="194:77" pos:end="194:90"><name pos:start="194:77" pos:end="194:77">s</name><operator pos:start="194:78" pos:end="194:79">-&gt;</operator><name pos:start="194:80" pos:end="194:90">slice_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt pos:start="195:25" pos:end="195:58"><expr pos:start="195:25" pos:end="195:57"><name pos:start="195:25" pos:end="195:50"><name pos:start="195:25" pos:end="195:38">thread_context</name><operator pos:start="195:39" pos:end="195:40">-&gt;</operator><name pos:start="195:41" pos:end="195:50">start_mb_y</name></name> <operator pos:start="195:52" pos:end="195:52">=</operator> <name pos:start="195:54" pos:end="195:57">mb_y</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="196:25" pos:end="196:67"><expr pos:start="196:25" pos:end="196:66"><name pos:start="196:25" pos:end="196:48"><name pos:start="196:25" pos:end="196:38">thread_context</name><operator pos:start="196:39" pos:end="196:40">-&gt;</operator><name pos:start="196:41" pos:end="196:48">end_mb_y</name></name>   <operator pos:start="196:52" pos:end="196:52">=</operator> <name pos:start="196:54" pos:end="196:66"><name pos:start="196:54" pos:end="196:55">s2</name><operator pos:start="196:56" pos:end="196:57">-&gt;</operator><name pos:start="196:58" pos:end="196:66">mb_height</name></name></expr>;</expr_stmt>
                        <if_stmt pos:start="197:25" pos:end="216:18"><if pos:start="197:25" pos:end="206:17">if <condition pos:start="197:28" pos:end="197:43">(<expr pos:start="197:29" pos:end="197:42"><name pos:start="197:29" pos:end="197:42"><name pos:start="197:29" pos:end="197:29">s</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:42">slice_count</name></name></expr>)</condition> <block pos:start="197:45" pos:end="206:17">{<block_content pos:start="198:29" pos:end="205:33">
                            <expr_stmt pos:start="198:29" pos:end="198:82"><expr pos:start="198:29" pos:end="198:81"><name pos:start="198:29" pos:end="198:64"><name pos:start="198:29" pos:end="198:30">s2</name><operator pos:start="198:31" pos:end="198:32">-&gt;</operator><name pos:start="198:33" pos:end="198:46">thread_context</name><index pos:start="198:47" pos:end="198:64">[<expr pos:start="198:48" pos:end="198:63"><name pos:start="198:48" pos:end="198:61"><name pos:start="198:48" pos:end="198:48">s</name><operator pos:start="198:49" pos:end="198:50">-&gt;</operator><name pos:start="198:51" pos:end="198:61">slice_count</name></name><operator pos:start="198:62" pos:end="198:62">-</operator><literal type="number" pos:start="198:63" pos:end="198:63">1</literal></expr>]</index></name><operator pos:start="198:65" pos:end="198:66">-&gt;</operator><name pos:start="198:67" pos:end="198:74">end_mb_y</name> <operator pos:start="198:76" pos:end="198:76">=</operator> <name pos:start="198:78" pos:end="198:81">mb_y</name></expr>;</expr_stmt>
                            <expr_stmt pos:start="199:29" pos:end="200:66"><expr pos:start="199:29" pos:end="200:65"><name pos:start="199:29" pos:end="199:31">ret</name> <operator pos:start="199:33" pos:end="199:33">=</operator> <call pos:start="199:35" pos:end="200:65"><name pos:start="199:35" pos:end="199:61">ff_update_duplicate_context</name><argument_list pos:start="199:62" pos:end="200:65">(<argument pos:start="199:63" pos:end="199:76"><expr pos:start="199:63" pos:end="199:76"><name pos:start="199:63" pos:end="199:76">thread_context</name></expr></argument>,
                                                              <argument pos:start="200:63" pos:end="200:64"><expr pos:start="200:63" pos:end="200:64"><name pos:start="200:63" pos:end="200:64">s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="201:29" pos:end="202:43"><if pos:start="201:29" pos:end="202:43">if <condition pos:start="201:32" pos:end="201:40">(<expr pos:start="201:33" pos:end="201:39"><name pos:start="201:33" pos:end="201:35">ret</name> <operator pos:start="201:37" pos:end="201:37">&lt;</operator> <literal type="number" pos:start="201:39" pos:end="201:39">0</literal></expr>)</condition><block type="pseudo" pos:start="202:33" pos:end="202:43"><block_content pos:start="202:33" pos:end="202:43">
                                <return pos:start="202:33" pos:end="202:43">return <expr pos:start="202:40" pos:end="202:42"><name pos:start="202:40" pos:end="202:42">ret</name></expr>;</return></block_content></block></if></if_stmt>
                        <expr_stmt pos:start="203:25" pos:end="203:82"><expr pos:start="203:25" pos:end="203:81"><call pos:start="203:25" pos:end="203:81"><name pos:start="203:25" pos:end="203:37">init_get_bits</name><argument_list pos:start="203:38" pos:end="203:81">(<argument pos:start="203:39" pos:end="203:57"><expr pos:start="203:39" pos:end="203:57"><operator pos:start="203:39" pos:end="203:39">&amp;</operator><name pos:start="203:40" pos:end="203:57"><name pos:start="203:40" pos:end="203:53">thread_context</name><operator pos:start="203:54" pos:end="203:55">-&gt;</operator><name pos:start="203:56" pos:end="203:57">gb</name></name></expr></argument>, <argument pos:start="203:60" pos:end="203:66"><expr pos:start="203:60" pos:end="203:66"><name pos:start="203:60" pos:end="203:66">buf_ptr</name></expr></argument>, <argument pos:start="203:69" pos:end="203:80"><expr pos:start="203:69" pos:end="203:80"><name pos:start="203:69" pos:end="203:78">input_size</name><operator pos:start="203:79" pos:end="203:79">*</operator><literal type="number" pos:start="203:80" pos:end="203:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="204:25" pos:end="204:41"><expr pos:start="204:25" pos:end="204:40"><name pos:start="204:25" pos:end="204:38"><name pos:start="204:25" pos:end="204:25">s</name><operator pos:start="204:26" pos:end="204:27">-&gt;</operator><name pos:start="204:28" pos:end="204:38">slice_count</name></name><operator pos:start="204:39" pos:end="204:40">++</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="205:21" pos:end="205:33"><expr pos:start="205:21" pos:end="205:32"><name pos:start="205:21" pos:end="205:27">buf_ptr</name> <operator pos:start="205:29" pos:end="205:30">+=</operator> <literal type="number" pos:start="205:32" pos:end="205:32">2</literal></expr>;</expr_stmt> <comment type="line" pos:start="205:35" pos:end="205:80">// FIXME add minimum number of bytes per slice</comment>
                </block_content>}</block></if> <else pos:start="206:19" pos:end="216:18">else <block pos:start="206:24" pos:end="216:18">{<block_content pos:start="207:21" pos:end="216:18">
                    <expr_stmt pos:start="207:21" pos:end="207:76"><expr pos:start="207:21" pos:end="207:75"><name pos:start="207:21" pos:end="207:23">ret</name> <operator pos:start="207:25" pos:end="207:25">=</operator> <call pos:start="207:27" pos:end="207:75"><name pos:start="207:27" pos:end="207:43">mpeg_decode_slice</name><argument_list pos:start="207:44" pos:end="207:75">(<argument pos:start="207:45" pos:end="207:46"><expr pos:start="207:45" pos:end="207:46"><name pos:start="207:45" pos:end="207:46">s2</name></expr></argument>, <argument pos:start="207:49" pos:end="207:52"><expr pos:start="207:49" pos:end="207:52"><name pos:start="207:49" pos:end="207:52">mb_y</name></expr></argument>, <argument pos:start="207:55" pos:end="207:62"><expr pos:start="207:55" pos:end="207:62"><operator pos:start="207:55" pos:end="207:55">&amp;</operator><name pos:start="207:56" pos:end="207:62">buf_ptr</name></expr></argument>, <argument pos:start="207:65" pos:end="207:74"><expr pos:start="207:65" pos:end="207:74"><name pos:start="207:65" pos:end="207:74">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="208:21" pos:end="208:29"><expr pos:start="208:21" pos:end="208:28"><call pos:start="208:21" pos:end="208:28"><name pos:start="208:21" pos:end="208:26">emms_c</name><argument_list pos:start="208:27" pos:end="208:28">()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="209:21" pos:end="216:18"><if pos:start="209:21" pos:end="214:21">if <condition pos:start="209:24" pos:end="209:32">(<expr pos:start="209:25" pos:end="209:31"><name pos:start="209:25" pos:end="209:27">ret</name> <operator pos:start="209:29" pos:end="209:29">&lt;</operator> <literal type="number" pos:start="209:31" pos:end="209:31">0</literal></expr>)</condition> <block pos:start="209:34" pos:end="214:21">{<block_content pos:start="210:25" pos:end="213:148">
                        <if_stmt pos:start="210:25" pos:end="211:39"><if pos:start="210:25" pos:end="211:39">if <condition pos:start="210:28" pos:end="210:67">(<expr pos:start="210:29" pos:end="210:66"><name pos:start="210:29" pos:end="210:50"><name pos:start="210:29" pos:end="210:33">avctx</name><operator pos:start="210:34" pos:end="210:35">-&gt;</operator><name pos:start="210:36" pos:end="210:50">err_recognition</name></name> <operator pos:start="210:52" pos:end="210:52">&amp;</operator> <name pos:start="210:54" pos:end="210:66">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="211:29" pos:end="211:39"><block_content pos:start="211:29" pos:end="211:39">
                            <return pos:start="211:29" pos:end="211:39">return <expr pos:start="211:36" pos:end="211:38"><name pos:start="211:36" pos:end="211:38">ret</name></expr>;</return></block_content></block></if></if_stmt>
                        <if_stmt pos:start="212:25" pos:end="213:148"><if pos:start="212:25" pos:end="213:148">if <condition pos:start="212:28" pos:end="212:73">(<expr pos:start="212:29" pos:end="212:72"><name pos:start="212:29" pos:end="212:43"><name pos:start="212:29" pos:end="212:30">s2</name><operator pos:start="212:31" pos:end="212:32">-&gt;</operator><name pos:start="212:33" pos:end="212:43">resync_mb_x</name></name> <operator pos:start="212:45" pos:end="212:46">&gt;=</operator> <literal type="number" pos:start="212:48" pos:end="212:48">0</literal> <operator pos:start="212:50" pos:end="212:51">&amp;&amp;</operator> <name pos:start="212:53" pos:end="212:67"><name pos:start="212:53" pos:end="212:54">s2</name><operator pos:start="212:55" pos:end="212:56">-&gt;</operator><name pos:start="212:57" pos:end="212:67">resync_mb_y</name></name> <operator pos:start="212:69" pos:end="212:70">&gt;=</operator> <literal type="number" pos:start="212:72" pos:end="212:72">0</literal></expr>)</condition><block type="pseudo" pos:start="213:29" pos:end="213:148"><block_content pos:start="213:29" pos:end="213:148">
                            <expr_stmt pos:start="213:29" pos:end="213:148"><expr pos:start="213:29" pos:end="213:147"><call pos:start="213:29" pos:end="213:147"><name pos:start="213:29" pos:end="213:43">ff_er_add_slice</name><argument_list pos:start="213:44" pos:end="213:147">(<argument pos:start="213:45" pos:end="213:51"><expr pos:start="213:45" pos:end="213:51"><operator pos:start="213:45" pos:end="213:45">&amp;</operator><name pos:start="213:46" pos:end="213:51"><name pos:start="213:46" pos:end="213:47">s2</name><operator pos:start="213:48" pos:end="213:49">-&gt;</operator><name pos:start="213:50" pos:end="213:51">er</name></name></expr></argument>, <argument pos:start="213:54" pos:end="213:68"><expr pos:start="213:54" pos:end="213:68"><name pos:start="213:54" pos:end="213:68"><name pos:start="213:54" pos:end="213:55">s2</name><operator pos:start="213:56" pos:end="213:57">-&gt;</operator><name pos:start="213:58" pos:end="213:68">resync_mb_x</name></name></expr></argument>, <argument pos:start="213:71" pos:end="213:85"><expr pos:start="213:71" pos:end="213:85"><name pos:start="213:71" pos:end="213:85"><name pos:start="213:71" pos:end="213:72">s2</name><operator pos:start="213:73" pos:end="213:74">-&gt;</operator><name pos:start="213:75" pos:end="213:85">resync_mb_y</name></name></expr></argument>, <argument pos:start="213:88" pos:end="213:95"><expr pos:start="213:88" pos:end="213:95"><name pos:start="213:88" pos:end="213:95"><name pos:start="213:88" pos:end="213:89">s2</name><operator pos:start="213:90" pos:end="213:91">-&gt;</operator><name pos:start="213:92" pos:end="213:95">mb_x</name></name></expr></argument>, <argument pos:start="213:98" pos:end="213:105"><expr pos:start="213:98" pos:end="213:105"><name pos:start="213:98" pos:end="213:105"><name pos:start="213:98" pos:end="213:99">s2</name><operator pos:start="213:100" pos:end="213:101">-&gt;</operator><name pos:start="213:102" pos:end="213:105">mb_y</name></name></expr></argument>, <argument pos:start="213:108" pos:end="213:146"><expr pos:start="213:108" pos:end="213:146"><name pos:start="213:108" pos:end="213:118">ER_AC_ERROR</name> <operator pos:start="213:120" pos:end="213:120">|</operator> <name pos:start="213:122" pos:end="213:132">ER_DC_ERROR</name> <operator pos:start="213:134" pos:end="213:134">|</operator> <name pos:start="213:136" pos:end="213:146">ER_MV_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if> <else pos:start="214:23" pos:end="216:18">else <block pos:start="214:28" pos:end="216:18">{<block_content pos:start="215:25" pos:end="216:18">
                        <expr_stmt pos:start="215:25" pos:end="215:140"><expr pos:start="215:25" pos:end="215:139"><call pos:start="215:25" pos:end="215:139"><name pos:start="215:25" pos:end="215:39">ff_er_add_slice</name><argument_list pos:start="215:40" pos:end="215:139">(<argument pos:start="215:41" pos:end="215:47"><expr pos:start="215:41" pos:end="215:47"><operator pos:start="215:41" pos:end="215:41">&amp;</operator><name pos:start="215:42" pos:end="215:47"><name pos:start="215:42" pos:end="215:43">s2</name><operator pos:start="215:44" pos:end="215:45">-&gt;</operator><name pos:start="215:46" pos:end="215:47">er</name></name></expr></argument>, <argument pos:start="215:50" pos:end="215:64"><expr pos:start="215:50" pos:end="215:64"><name pos:start="215:50" pos:end="215:64"><name pos:start="215:50" pos:end="215:51">s2</name><operator pos:start="215:52" pos:end="215:53">-&gt;</operator><name pos:start="215:54" pos:end="215:64">resync_mb_x</name></name></expr></argument>, <argument pos:start="215:67" pos:end="215:81"><expr pos:start="215:67" pos:end="215:81"><name pos:start="215:67" pos:end="215:81"><name pos:start="215:67" pos:end="215:68">s2</name><operator pos:start="215:69" pos:end="215:70">-&gt;</operator><name pos:start="215:71" pos:end="215:81">resync_mb_y</name></name></expr></argument>, <argument pos:start="215:84" pos:end="215:93"><expr pos:start="215:84" pos:end="215:93"><name pos:start="215:84" pos:end="215:91"><name pos:start="215:84" pos:end="215:85">s2</name><operator pos:start="215:86" pos:end="215:87">-&gt;</operator><name pos:start="215:88" pos:end="215:91">mb_x</name></name><operator pos:start="215:92" pos:end="215:92">-</operator><literal type="number" pos:start="215:93" pos:end="215:93">1</literal></expr></argument>, <argument pos:start="215:96" pos:end="215:103"><expr pos:start="215:96" pos:end="215:103"><name pos:start="215:96" pos:end="215:103"><name pos:start="215:96" pos:end="215:97">s2</name><operator pos:start="215:98" pos:end="215:99">-&gt;</operator><name pos:start="215:100" pos:end="215:103">mb_y</name></name></expr></argument>, <argument pos:start="215:106" pos:end="215:138"><expr pos:start="215:106" pos:end="215:138"><name pos:start="215:106" pos:end="215:114">ER_AC_END</name> <operator pos:start="215:116" pos:end="215:116">|</operator> <name pos:start="215:118" pos:end="215:126">ER_DC_END</name> <operator pos:start="215:128" pos:end="215:128">|</operator> <name pos:start="215:130" pos:end="215:138">ER_MV_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="216:13" pos:end="216:18">break;</break></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function></unit>
