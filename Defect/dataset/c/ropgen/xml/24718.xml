<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24718.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">iothread_complete</name><parameter_list pos:start="1:30" pos:end="1:63">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:43">UserCreatable</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">obj</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:49">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:22">local_error</name> <init pos:start="5:24" pos:end="5:29">= <expr pos:start="5:26" pos:end="5:29"><name pos:start="5:26" pos:end="5:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IOThread</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">iothread</name> <init pos:start="7:24" pos:end="7:38">= <expr pos:start="7:26" pos:end="7:38"><call pos:start="7:26" pos:end="7:38"><name pos:start="7:26" pos:end="7:33">IOTHREAD</name><argument_list pos:start="7:34" pos:end="7:38">(<argument pos:start="7:35" pos:end="7:37"><expr pos:start="7:35" pos:end="7:37"><name pos:start="7:35" pos:end="7:37">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:31"><expr pos:start="11:5" pos:end="11:30"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:12">iothread</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:22">stopping</name></name> <operator pos:start="11:24" pos:end="11:24">=</operator> <name pos:start="11:26" pos:end="11:30">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:12">iothread</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:23">thread_id</name></name> <operator pos:start="13:25" pos:end="13:25">=</operator> <operator pos:start="13:27" pos:end="13:27">-</operator><literal type="number" pos:start="13:28" pos:end="13:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">iothread</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:17">ctx</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <call pos:start="15:21" pos:end="15:49"><name pos:start="15:21" pos:end="15:35">aio_context_new</name><argument_list pos:start="15:36" pos:end="15:49">(<argument pos:start="15:37" pos:end="15:48"><expr pos:start="15:37" pos:end="15:48"><operator pos:start="15:37" pos:end="15:37">&amp;</operator><name pos:start="15:38" pos:end="15:48">local_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:17">iothread</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:22">ctx</name></name></expr>)</condition> <block pos:start="17:25" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:43"><expr pos:start="19:9" pos:end="19:42"><call pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:23">error_propagate</name><argument_list pos:start="19:24" pos:end="19:42">(<argument pos:start="19:25" pos:end="19:28"><expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">errp</name></expr></argument>, <argument pos:start="19:31" pos:end="19:41"><expr pos:start="19:31" pos:end="19:41"><name pos:start="19:31" pos:end="19:41">local_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:19">qemu_mutex_init</name><argument_list pos:start="27:20" pos:end="27:46">(<argument pos:start="27:21" pos:end="27:45"><expr pos:start="27:21" pos:end="27:45"><operator pos:start="27:21" pos:end="27:21">&amp;</operator><name pos:start="27:22" pos:end="27:45"><name pos:start="27:22" pos:end="27:29">iothread</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:45">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><call pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:18">qemu_cond_init</name><argument_list pos:start="29:19" pos:end="29:45">(<argument pos:start="29:20" pos:end="29:44"><expr pos:start="29:20" pos:end="29:44"><operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:44"><name pos:start="29:21" pos:end="29:28">iothread</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:44">init_done_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="37:7">/* This assumes we are called from a thread with useful CPU affinity for us

     * to inherit.

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="41:55"><expr pos:start="39:5" pos:end="41:54"><call pos:start="39:5" pos:end="41:54"><name pos:start="39:5" pos:end="39:22">qemu_thread_create</name><argument_list pos:start="39:23" pos:end="41:54">(<argument pos:start="39:24" pos:end="39:40"><expr pos:start="39:24" pos:end="39:40"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:40"><name pos:start="39:25" pos:end="39:32">iothread</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:40">thread</name></name></expr></argument>, <argument pos:start="39:43" pos:end="39:52"><expr pos:start="39:43" pos:end="39:52"><literal type="string" pos:start="39:43" pos:end="39:52">"iothread"</literal></expr></argument>, <argument pos:start="39:55" pos:end="39:66"><expr pos:start="39:55" pos:end="39:66"><name pos:start="39:55" pos:end="39:66">iothread_run</name></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:31"><expr pos:start="41:24" pos:end="41:31"><name pos:start="41:24" pos:end="41:31">iothread</name></expr></argument>, <argument pos:start="41:34" pos:end="41:53"><expr pos:start="41:34" pos:end="41:53"><name pos:start="41:34" pos:end="41:53">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:45">/* Wait for initialization to complete */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><call pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:19">qemu_mutex_lock</name><argument_list pos:start="47:20" pos:end="47:46">(<argument pos:start="47:21" pos:end="47:45"><expr pos:start="47:21" pos:end="47:45"><operator pos:start="47:21" pos:end="47:21">&amp;</operator><name pos:start="47:22" pos:end="47:45"><name pos:start="47:22" pos:end="47:29">iothread</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:45">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="49:5" pos:end="55:5">while <condition pos:start="49:11" pos:end="49:37">(<expr pos:start="49:12" pos:end="49:36"><name pos:start="49:12" pos:end="49:30"><name pos:start="49:12" pos:end="49:19">iothread</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:30">thread_id</name></name> <operator pos:start="49:32" pos:end="49:33">==</operator> <operator pos:start="49:35" pos:end="49:35">-</operator><literal type="number" pos:start="49:36" pos:end="49:36">1</literal></expr>)</condition> <block pos:start="49:39" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:50">

        <expr_stmt pos:start="51:9" pos:end="53:50"><expr pos:start="51:9" pos:end="53:49"><call pos:start="51:9" pos:end="53:49"><name pos:start="51:9" pos:end="51:22">qemu_cond_wait</name><argument_list pos:start="51:23" pos:end="53:49">(<argument pos:start="51:24" pos:end="51:48"><expr pos:start="51:24" pos:end="51:48"><operator pos:start="51:24" pos:end="51:24">&amp;</operator><name pos:start="51:25" pos:end="51:48"><name pos:start="51:25" pos:end="51:32">iothread</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:48">init_done_cond</name></name></expr></argument>,

                       <argument pos:start="53:24" pos:end="53:48"><expr pos:start="53:24" pos:end="53:48"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:48"><name pos:start="53:25" pos:end="53:32">iothread</name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:48">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="57:5" pos:end="57:49"><expr pos:start="57:5" pos:end="57:48"><call pos:start="57:5" pos:end="57:48"><name pos:start="57:5" pos:end="57:21">qemu_mutex_unlock</name><argument_list pos:start="57:22" pos:end="57:48">(<argument pos:start="57:23" pos:end="57:47"><expr pos:start="57:23" pos:end="57:47"><operator pos:start="57:23" pos:end="57:23">&amp;</operator><name pos:start="57:24" pos:end="57:47"><name pos:start="57:24" pos:end="57:31">iothread</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:47">init_done_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
