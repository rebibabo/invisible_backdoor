<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13688.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stsz</name><parameter_list pos:start="1:25" pos:end="1:72">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">MOVAtom</name></type> <name pos:start="1:68" pos:end="1:71">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>, <decl pos:start="9:21" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:21" pos:end="9:27">entries</name></decl>, <decl pos:start="9:30" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:40">sample_size</name></decl>, <decl pos:start="9:43" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:43" pos:end="9:52">field_size</name></decl>, <decl pos:start="9:55" pos:end="9:63"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:55" pos:end="9:63">num_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name><modifier pos:start="13:18" pos:end="13:18">*</modifier></type> <name pos:start="13:20" pos:end="13:22">buf</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:9">c</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:13">fc</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:25">nb_streams</name></name> <operator pos:start="17:27" pos:end="17:27">&lt;</operator> <literal type="number" pos:start="17:29" pos:end="17:29">1</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:6">st</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <name pos:start="21:10" pos:end="21:44"><name pos:start="21:10" pos:end="21:10">c</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:14">fc</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">streams</name><index pos:start="21:24" pos:end="21:44">[<expr pos:start="21:25" pos:end="21:43"><name pos:start="21:25" pos:end="21:41"><name pos:start="21:25" pos:end="21:25">c</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:29">fc</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:41">nb_streams</name></name><operator pos:start="21:42" pos:end="21:42">-</operator><literal type="number" pos:start="21:43" pos:end="21:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:6">sc</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <name pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:11">st</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:22">priv_data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><call pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:12">get_byte</name><argument_list pos:start="27:13" pos:end="27:16">(<argument pos:start="27:14" pos:end="27:15"><expr pos:start="27:14" pos:end="27:15"><name pos:start="27:14" pos:end="27:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:19" pos:end="27:31">/* version */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><call pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">get_be24</name><argument_list pos:start="29:13" pos:end="29:16">(<argument pos:start="29:14" pos:end="29:15"><expr pos:start="29:14" pos:end="29:15"><name pos:start="29:14" pos:end="29:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:19" pos:end="29:29">/* flags */</comment>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:44">(<expr pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:12">atom</name><operator pos:start="33:13" pos:end="33:13">.</operator><name pos:start="33:14" pos:end="33:17">type</name></name> <operator pos:start="33:19" pos:end="33:20">==</operator> <call pos:start="33:22" pos:end="33:43"><name pos:start="33:22" pos:end="33:26">MKTAG</name><argument_list pos:start="33:27" pos:end="33:43">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><literal type="char" pos:start="33:28" pos:end="33:30">'s'</literal></expr></argument>,<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><literal type="char" pos:start="33:32" pos:end="33:34">'t'</literal></expr></argument>,<argument pos:start="33:36" pos:end="33:38"><expr pos:start="33:36" pos:end="33:38"><literal type="char" pos:start="33:36" pos:end="33:38">'s'</literal></expr></argument>,<argument pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><literal type="char" pos:start="33:40" pos:end="33:42">'z'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:46" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:24">

        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:19">sample_size</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:30">get_be32</name><argument_list pos:start="35:31" pos:end="35:34">(<argument pos:start="35:32" pos:end="35:33"><expr pos:start="35:32" pos:end="35:33"><name pos:start="35:32" pos:end="35:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:42"><if pos:start="37:9" pos:end="39:42">if <condition pos:start="37:12" pos:end="37:29">(<expr pos:start="37:13" pos:end="37:28"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:28"><name pos:start="37:14" pos:end="37:15">sc</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:28">sample_size</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:42"><block_content pos:start="39:13" pos:end="39:42"> <comment type="block" pos:start="37:31" pos:end="37:75">/* do not overwrite value computed in stsd */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:14">sc</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:27">sample_size</name></name> <operator pos:start="39:29" pos:end="39:29">=</operator> <name pos:start="39:31" pos:end="39:41">sample_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:18">field_size</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:23">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="51:5">else <block pos:start="43:12" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:34">

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:19">sample_size</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><call pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:16">get_be24</name><argument_list pos:start="47:17" pos:end="47:20">(<argument pos:start="47:18" pos:end="47:19"><expr pos:start="47:18" pos:end="47:19"><name pos:start="47:18" pos:end="47:19">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:23" pos:end="47:36">/* reserved */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:18">field_size</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:33"><name pos:start="49:22" pos:end="49:29">get_byte</name><argument_list pos:start="49:30" pos:end="49:33">(<argument pos:start="49:31" pos:end="49:32"><expr pos:start="49:31" pos:end="49:32"><name pos:start="49:31" pos:end="49:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:11">entries</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:26"><name pos:start="53:15" pos:end="53:22">get_be32</name><argument_list pos:start="53:23" pos:end="53:26">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:85"><expr pos:start="57:5" pos:end="57:84"><call pos:start="57:5" pos:end="57:84"><name pos:start="57:5" pos:end="57:11">dprintf</name><argument_list pos:start="57:12" pos:end="57:84">(<argument pos:start="57:13" pos:end="57:17"><expr pos:start="57:13" pos:end="57:17"><name pos:start="57:13" pos:end="57:17"><name pos:start="57:13" pos:end="57:13">c</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:17">fc</name></name></expr></argument>, <argument pos:start="57:20" pos:end="57:57"><expr pos:start="57:20" pos:end="57:57"><literal type="string" pos:start="57:20" pos:end="57:57">"sample_size = %d sample_count = %d\n"</literal></expr></argument>, <argument pos:start="57:60" pos:end="57:74"><expr pos:start="57:60" pos:end="57:74"><name pos:start="57:60" pos:end="57:74"><name pos:start="57:60" pos:end="57:61">sc</name><operator pos:start="57:62" pos:end="57:63">-&gt;</operator><name pos:start="57:64" pos:end="57:74">sample_size</name></name></expr></argument>, <argument pos:start="57:77" pos:end="57:83"><expr pos:start="57:77" pos:end="57:83"><name pos:start="57:77" pos:end="57:83">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:6">sc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:20">sample_count</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:30">entries</name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:17"><if pos:start="63:5" pos:end="65:17">if <condition pos:start="63:8" pos:end="63:20">(<expr pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:19">sample_size</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:17"><block_content pos:start="65:9" pos:end="65:17">

        <return pos:start="65:9" pos:end="65:17">return <expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:83">(<expr pos:start="69:9" pos:end="69:82"><name pos:start="69:9" pos:end="69:18">field_size</name> <operator pos:start="69:20" pos:end="69:21">!=</operator> <literal type="number" pos:start="69:23" pos:end="69:23">4</literal> <operator pos:start="69:25" pos:end="69:26">&amp;&amp;</operator> <name pos:start="69:28" pos:end="69:37">field_size</name> <operator pos:start="69:39" pos:end="69:40">!=</operator> <literal type="number" pos:start="69:42" pos:end="69:42">8</literal> <operator pos:start="69:44" pos:end="69:45">&amp;&amp;</operator> <name pos:start="69:47" pos:end="69:56">field_size</name> <operator pos:start="69:58" pos:end="69:59">!=</operator> <literal type="number" pos:start="69:61" pos:end="69:62">16</literal> <operator pos:start="69:64" pos:end="69:65">&amp;&amp;</operator> <name pos:start="69:67" pos:end="69:76">field_size</name> <operator pos:start="69:78" pos:end="69:79">!=</operator> <literal type="number" pos:start="69:81" pos:end="69:82">32</literal></expr>)</condition> <block pos:start="69:85" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:82"><expr pos:start="71:9" pos:end="71:81"><call pos:start="71:9" pos:end="71:81"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:81">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:16">c</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:20">fc</name></name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:68"><expr pos:start="71:37" pos:end="71:68"><literal type="string" pos:start="71:37" pos:end="71:68">"Invalid sample field size %d\n"</literal></expr></argument>, <argument pos:start="71:71" pos:end="71:80"><expr pos:start="71:71" pos:end="71:80"><name pos:start="71:71" pos:end="71:80">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="81:18"><if pos:start="79:5" pos:end="81:18">if<condition pos:start="79:7" pos:end="79:41">(<expr pos:start="79:8" pos:end="79:40"><name pos:start="79:8" pos:end="79:14">entries</name> <operator pos:start="79:16" pos:end="79:17">&gt;=</operator> <name pos:start="79:19" pos:end="79:26">UINT_MAX</name> <operator pos:start="79:28" pos:end="79:28">/</operator> <sizeof pos:start="79:30" pos:end="79:40">sizeof<argument_list pos:start="79:36" pos:end="79:40">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:18"><block_content pos:start="81:9" pos:end="81:18">

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:56"><expr pos:start="83:5" pos:end="83:55"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:6">sc</name><operator pos:start="83:7" pos:end="83:8">-&gt;</operator><name pos:start="83:9" pos:end="83:20">sample_sizes</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:55"><name pos:start="83:24" pos:end="83:32">av_malloc</name><argument_list pos:start="83:33" pos:end="83:55">(<argument pos:start="83:34" pos:end="83:54"><expr pos:start="83:34" pos:end="83:54"><name pos:start="83:34" pos:end="83:40">entries</name> <operator pos:start="83:42" pos:end="83:42">*</operator> <sizeof pos:start="83:44" pos:end="83:54">sizeof<argument_list pos:start="83:50" pos:end="83:54">(<argument pos:start="83:51" pos:end="83:53"><expr pos:start="83:51" pos:end="83:53"><name pos:start="83:51" pos:end="83:53">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:31"><if pos:start="85:5" pos:end="87:31">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:25"><name pos:start="85:10" pos:end="85:11">sc</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:25">sample_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:31"><block_content pos:start="87:9" pos:end="87:31">

        <return pos:start="87:9" pos:end="87:31">return <expr pos:start="87:16" pos:end="87:30"><call pos:start="87:16" pos:end="87:30"><name pos:start="87:16" pos:end="87:22">AVERROR</name><argument_list pos:start="87:23" pos:end="87:30">(<argument pos:start="87:24" pos:end="87:29"><expr pos:start="87:24" pos:end="87:29"><name pos:start="87:24" pos:end="87:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:42"><expr pos:start="91:5" pos:end="91:41"><name pos:start="91:5" pos:end="91:13">num_bytes</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:24">entries</name><operator pos:start="91:25" pos:end="91:25">*</operator><name pos:start="91:26" pos:end="91:35">field_size</name><operator pos:start="91:36" pos:end="91:36">+</operator><literal type="number" pos:start="91:37" pos:end="91:37">4</literal><operator pos:start="91:38" pos:end="91:38">)</operator><operator pos:start="91:39" pos:end="91:40">&gt;&gt;</operator><literal type="number" pos:start="91:41" pos:end="91:41">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:7">buf</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:59"><name pos:start="95:11" pos:end="95:19">av_malloc</name><argument_list pos:start="95:20" pos:end="95:59">(<argument pos:start="95:21" pos:end="95:58"><expr pos:start="95:21" pos:end="95:58"><name pos:start="95:21" pos:end="95:29">num_bytes</name><operator pos:start="95:30" pos:end="95:30">+</operator><name pos:start="95:31" pos:end="95:58">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:13">(<expr pos:start="97:9" pos:end="97:12"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:12">buf</name></expr>)</condition> <block pos:start="97:15" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:31">

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><call pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:16">av_freep</name><argument_list pos:start="99:17" pos:end="99:35">(<argument pos:start="99:18" pos:end="99:34"><expr pos:start="99:18" pos:end="99:34"><operator pos:start="99:18" pos:end="99:18">&amp;</operator><name pos:start="99:19" pos:end="99:34"><name pos:start="99:19" pos:end="99:20">sc</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:34">sample_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:31">return <expr pos:start="101:16" pos:end="101:30"><call pos:start="101:16" pos:end="101:30"><name pos:start="101:16" pos:end="101:22">AVERROR</name><argument_list pos:start="101:23" pos:end="101:30">(<argument pos:start="101:24" pos:end="101:29"><expr pos:start="101:24" pos:end="101:29"><name pos:start="101:24" pos:end="101:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:51">(<expr pos:start="107:9" pos:end="107:50"><call pos:start="107:9" pos:end="107:38"><name pos:start="107:9" pos:end="107:18">get_buffer</name><argument_list pos:start="107:19" pos:end="107:38">(<argument pos:start="107:20" pos:end="107:21"><expr pos:start="107:20" pos:end="107:21"><name pos:start="107:20" pos:end="107:21">pb</name></expr></argument>, <argument pos:start="107:24" pos:end="107:26"><expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:26">buf</name></expr></argument>, <argument pos:start="107:29" pos:end="107:37"><expr pos:start="107:29" pos:end="107:37"><name pos:start="107:29" pos:end="107:37">num_bytes</name></expr></argument>)</argument_list></call> <operator pos:start="107:40" pos:end="107:40">&lt;</operator> <name pos:start="107:42" pos:end="107:50">num_bytes</name></expr>)</condition> <block pos:start="107:53" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:18">

        <expr_stmt pos:start="109:9" pos:end="109:36"><expr pos:start="109:9" pos:end="109:35"><call pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:16">av_freep</name><argument_list pos:start="109:17" pos:end="109:35">(<argument pos:start="109:18" pos:end="109:34"><expr pos:start="109:18" pos:end="109:34"><operator pos:start="109:18" pos:end="109:18">&amp;</operator><name pos:start="109:19" pos:end="109:34"><name pos:start="109:19" pos:end="109:20">sc</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:34">sample_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:21"><expr pos:start="111:9" pos:end="111:20"><call pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:15">av_free</name><argument_list pos:start="111:16" pos:end="111:20">(<argument pos:start="111:17" pos:end="111:19"><expr pos:start="111:17" pos:end="111:19"><name pos:start="111:17" pos:end="111:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:18">return <expr pos:start="113:16" pos:end="113:17"><operator pos:start="113:16" pos:end="113:16">-</operator><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:41"><expr pos:start="119:5" pos:end="119:40"><call pos:start="119:5" pos:end="119:40"><name pos:start="119:5" pos:end="119:17">init_get_bits</name><argument_list pos:start="119:18" pos:end="119:40">(<argument pos:start="119:19" pos:end="119:21"><expr pos:start="119:19" pos:end="119:21"><operator pos:start="119:19" pos:end="119:19">&amp;</operator><name pos:start="119:20" pos:end="119:21">gb</name></expr></argument>, <argument pos:start="119:24" pos:end="119:26"><expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">buf</name></expr></argument>, <argument pos:start="119:29" pos:end="119:39"><expr pos:start="119:29" pos:end="119:39"><literal type="number" pos:start="119:29" pos:end="119:29">8</literal><operator pos:start="119:30" pos:end="119:30">*</operator><name pos:start="119:31" pos:end="119:39">num_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="123:5" pos:end="125:61">for<control pos:start="123:8" pos:end="123:28">(<init pos:start="123:9" pos:end="123:12"><expr pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:9">i</name><operator pos:start="123:10" pos:end="123:10">=</operator><literal type="number" pos:start="123:11" pos:end="123:11">0</literal></expr>;</init> <condition pos:start="123:14" pos:end="123:23"><expr pos:start="123:14" pos:end="123:22"><name pos:start="123:14" pos:end="123:14">i</name><operator pos:start="123:15" pos:end="123:15">&lt;</operator><name pos:start="123:16" pos:end="123:22">entries</name></expr>;</condition> <incr pos:start="123:25" pos:end="123:27"><expr pos:start="123:25" pos:end="123:27"><name pos:start="123:25" pos:end="123:25">i</name><operator pos:start="123:26" pos:end="123:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="125:9" pos:end="125:61"><block_content pos:start="125:9" pos:end="125:61">

        <expr_stmt pos:start="125:9" pos:end="125:61"><expr pos:start="125:9" pos:end="125:60"><name pos:start="125:9" pos:end="125:27"><name pos:start="125:9" pos:end="125:10">sc</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:24">sample_sizes</name><index pos:start="125:25" pos:end="125:27">[<expr pos:start="125:26" pos:end="125:26"><name pos:start="125:26" pos:end="125:26">i</name></expr>]</index></name> <operator pos:start="125:29" pos:end="125:29">=</operator> <call pos:start="125:31" pos:end="125:60"><name pos:start="125:31" pos:end="125:43">get_bits_long</name><argument_list pos:start="125:44" pos:end="125:60">(<argument pos:start="125:45" pos:end="125:47"><expr pos:start="125:45" pos:end="125:47"><operator pos:start="125:45" pos:end="125:45">&amp;</operator><name pos:start="125:46" pos:end="125:47">gb</name></expr></argument>, <argument pos:start="125:50" pos:end="125:59"><expr pos:start="125:50" pos:end="125:59"><name pos:start="125:50" pos:end="125:59">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="129:5" pos:end="129:17"><expr pos:start="129:5" pos:end="129:16"><call pos:start="129:5" pos:end="129:16"><name pos:start="129:5" pos:end="129:11">av_free</name><argument_list pos:start="129:12" pos:end="129:16">(<argument pos:start="129:13" pos:end="129:15"><expr pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
