<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18025.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">spapr_reallocate_hpt</name><parameter_list pos:start="1:33" pos:end="3:46">(<parameter pos:start="1:34" pos:end="1:57"><decl pos:start="1:34" pos:end="1:57"><type pos:start="1:34" pos:end="1:57"><name pos:start="1:34" pos:end="1:50">sPAPRMachineState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">spapr</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">shift</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:38">Error</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier><modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:45">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="99:1">{<block_content pos:start="7:5" pos:end="97:5">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:11">rc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:52">/* Clean up any HPT info from a previous boot */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><call pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:10">g_free</name><argument_list pos:start="13:11" pos:end="13:23">(<argument pos:start="13:12" pos:end="13:22"><expr pos:start="13:12" pos:end="13:22"><name pos:start="13:12" pos:end="13:22"><name pos:start="13:12" pos:end="13:16">spapr</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:22">htab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:23"><expr pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:9">spapr</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:15">htab</name></name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:9">spapr</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:21">htab_shift</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><call pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:17">close_htab_fd</name><argument_list pos:start="19:18" pos:end="19:24">(<argument pos:start="19:19" pos:end="19:23"><expr pos:start="19:19" pos:end="19:23"><name pos:start="19:19" pos:end="19:23">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:6">rc</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:33"><name pos:start="23:10" pos:end="23:26">kvmppc_reset_htab</name><argument_list pos:start="23:27" pos:end="23:33">(<argument pos:start="23:28" pos:end="23:32"><expr pos:start="23:28" pos:end="23:32"><name pos:start="23:28" pos:end="23:32">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="97:5"><if pos:start="25:5" pos:end="39:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">&lt;</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition> <block pos:start="25:17" pos:end="39:5">{<block_content pos:start="29:9" pos:end="33:32">

        <comment type="block" pos:start="27:9" pos:end="27:63">/* kernel-side HPT needed, but couldn't allocate one */</comment>

        <expr_stmt pos:start="29:9" pos:end="33:32"><expr pos:start="29:9" pos:end="33:31"><call pos:start="29:9" pos:end="33:31"><name pos:start="29:9" pos:end="29:24">error_setg_errno</name><argument_list pos:start="29:25" pos:end="33:31">(<argument pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><name pos:start="29:26" pos:end="29:29">errp</name></expr></argument>, <argument pos:start="29:32" pos:end="29:36"><expr pos:start="29:32" pos:end="29:36"><name pos:start="29:32" pos:end="29:36">errno</name></expr></argument>,

                         <argument pos:start="31:26" pos:end="31:87"><expr pos:start="31:26" pos:end="31:87"><literal type="string" pos:start="31:26" pos:end="31:87">"Failed to allocate KVM HPT of order %d (try smaller maxmem?)"</literal></expr></argument>,

                         <argument pos:start="33:26" pos:end="33:30"><expr pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:30">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="37:68">/* This is almost certainly fatal, but if the caller really

         * wants to carry on with shift == 0, it's welcome to try */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="39:7" pos:end="59:5">else if <condition pos:start="39:15" pos:end="39:22">(<expr pos:start="39:16" pos:end="39:21"><name pos:start="39:16" pos:end="39:17">rc</name> <operator pos:start="39:19" pos:end="39:19">&gt;</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>)</condition> <block pos:start="39:24" pos:end="59:5">{<block_content pos:start="43:9" pos:end="57:32">

        <comment type="block" pos:start="41:9" pos:end="41:39">/* kernel-side HPT allocated */</comment>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:14">rc</name> <operator pos:start="43:16" pos:end="43:17">!=</operator> <name pos:start="43:19" pos:end="43:23">shift</name></expr>)</condition> <block pos:start="43:26" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:34">

            <expr_stmt pos:start="45:13" pos:end="49:34"><expr pos:start="45:13" pos:end="49:33"><call pos:start="45:13" pos:end="49:33"><name pos:start="45:13" pos:end="45:22">error_setg</name><argument_list pos:start="45:23" pos:end="49:33">(<argument pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">errp</name></expr></argument>,

                       <argument pos:start="47:24" pos:end="47:101"><expr pos:start="47:24" pos:end="47:101"><literal type="string" pos:start="47:24" pos:end="47:101">"Requested order %d HPT, but kernel allocated order %ld (try smaller maxmem?)"</literal></expr></argument>,

                       <argument pos:start="49:24" pos:end="49:28"><expr pos:start="49:24" pos:end="49:28"><name pos:start="49:24" pos:end="49:28">shift</name></expr></argument>, <argument pos:start="49:31" pos:end="49:32"><expr pos:start="49:31" pos:end="49:32"><name pos:start="49:31" pos:end="49:32">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:13">spapr</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:25">htab_shift</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <name pos:start="55:29" pos:end="55:33">shift</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:24">kvmppc_kern_htab</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:31">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="97:5">else <block pos:start="59:12" pos:end="97:5">{<block_content pos:start="63:9" pos:end="95:9">

        <comment type="block" pos:start="61:9" pos:end="61:71">/* kernel-side HPT not needed, allocate in userspace instead */</comment>

        <decl_stmt pos:start="63:9" pos:end="63:36"><decl pos:start="63:9" pos:end="63:35"><type pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:14">size_t</name></type> <name pos:start="63:16" pos:end="63:19">size</name> <init pos:start="63:21" pos:end="63:35">= <expr pos:start="63:23" pos:end="63:35"><literal type="number" pos:start="63:23" pos:end="63:26">1ULL</literal> <operator pos:start="63:28" pos:end="63:29">&lt;&lt;</operator> <name pos:start="63:31" pos:end="63:35">shift</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:14"><decl pos:start="65:9" pos:end="65:13"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:13">spapr</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:19">htab</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:47"><name pos:start="69:23" pos:end="69:35">qemu_memalign</name><argument_list pos:start="69:36" pos:end="69:47">(<argument pos:start="69:37" pos:end="69:40"><expr pos:start="69:37" pos:end="69:40"><name pos:start="69:37" pos:end="69:40">size</name></expr></argument>, <argument pos:start="69:43" pos:end="69:46"><expr pos:start="69:43" pos:end="69:46"><name pos:start="69:43" pos:end="69:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:25">(<expr pos:start="71:13" pos:end="71:24"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:24"><name pos:start="71:14" pos:end="71:18">spapr</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:24">htab</name></name></expr>)</condition> <block pos:start="71:27" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:19">

            <expr_stmt pos:start="73:13" pos:end="75:74"><expr pos:start="73:13" pos:end="75:73"><call pos:start="73:13" pos:end="75:73"><name pos:start="73:13" pos:end="73:28">error_setg_errno</name><argument_list pos:start="73:29" pos:end="75:73">(<argument pos:start="73:30" pos:end="73:33"><expr pos:start="73:30" pos:end="73:33"><name pos:start="73:30" pos:end="73:33">errp</name></expr></argument>, <argument pos:start="73:36" pos:end="73:40"><expr pos:start="73:36" pos:end="73:40"><name pos:start="73:36" pos:end="73:40">errno</name></expr></argument>,

                             <argument pos:start="75:30" pos:end="75:65"><expr pos:start="75:30" pos:end="75:65"><literal type="string" pos:start="75:30" pos:end="75:65">"Could not allocate HPT of order %d"</literal></expr></argument>, <argument pos:start="75:68" pos:end="75:72"><expr pos:start="75:68" pos:end="75:72"><name pos:start="75:68" pos:end="75:72">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><call pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:14">memset</name><argument_list pos:start="83:15" pos:end="83:36">(<argument pos:start="83:16" pos:end="83:26"><expr pos:start="83:16" pos:end="83:26"><name pos:start="83:16" pos:end="83:26"><name pos:start="83:16" pos:end="83:20">spapr</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:26">htab</name></name></expr></argument>, <argument pos:start="83:29" pos:end="83:29"><expr pos:start="83:29" pos:end="83:29"><literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr></argument>, <argument pos:start="83:32" pos:end="83:35"><expr pos:start="83:32" pos:end="83:35"><name pos:start="83:32" pos:end="83:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:13">spapr</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:25">htab_shift</name></name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:33">shift</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:33"><expr pos:start="87:9" pos:end="87:32"><name pos:start="87:9" pos:end="87:24">kvmppc_kern_htab</name> <operator pos:start="87:26" pos:end="87:26">=</operator> <name pos:start="87:28" pos:end="87:32">false</name></expr>;</expr_stmt>



        <for pos:start="91:9" pos:end="95:9">for <control pos:start="91:13" pos:end="91:53">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:48"><expr pos:start="91:21" pos:end="91:47"><name pos:start="91:21" pos:end="91:21">i</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:28">size</name> <operator pos:start="91:30" pos:end="91:30">/</operator> <name pos:start="91:32" pos:end="91:47">HASH_PTE_SIZE_64</name></expr>;</condition> <incr pos:start="91:50" pos:end="91:52"><expr pos:start="91:50" pos:end="91:52"><name pos:start="91:50" pos:end="91:50">i</name><operator pos:start="91:51" pos:end="91:52">++</operator></expr></incr>)</control> <block pos:start="91:55" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:45">

            <expr_stmt pos:start="93:13" pos:end="93:45"><expr pos:start="93:13" pos:end="93:44"><call pos:start="93:13" pos:end="93:44"><name pos:start="93:13" pos:end="93:22">DIRTY_HPTE</name><argument_list pos:start="93:23" pos:end="93:44">(<argument pos:start="93:24" pos:end="93:43"><expr pos:start="93:24" pos:end="93:43"><call pos:start="93:24" pos:end="93:43"><name pos:start="93:24" pos:end="93:27">HPTE</name><argument_list pos:start="93:28" pos:end="93:43">(<argument pos:start="93:29" pos:end="93:39"><expr pos:start="93:29" pos:end="93:39"><name pos:start="93:29" pos:end="93:39"><name pos:start="93:29" pos:end="93:33">spapr</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:39">htab</name></name></expr></argument>, <argument pos:start="93:42" pos:end="93:42"><expr pos:start="93:42" pos:end="93:42"><name pos:start="93:42" pos:end="93:42">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
