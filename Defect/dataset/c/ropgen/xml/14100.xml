<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14100.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">spapr_machine_device_plug</name><parameter_list pos:start="1:38" pos:end="3:69">(<parameter pos:start="1:39" pos:end="1:65"><decl pos:start="1:39" pos:end="1:65"><type pos:start="1:39" pos:end="1:65"><name pos:start="1:39" pos:end="1:52">HotplugHandler</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:65">hotplug_dev</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:54"><decl pos:start="3:39" pos:end="3:54"><type pos:start="3:39" pos:end="3:54"><name pos:start="3:39" pos:end="3:49">DeviceState</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:54">dev</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:68"><decl pos:start="3:57" pos:end="3:68"><type pos:start="3:57" pos:end="3:68"><name pos:start="3:57" pos:end="3:61">Error</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier><modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:68">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="39:1">{<block_content pos:start="7:5" pos:end="37:5">

    <decl_stmt pos:start="7:5" pos:end="7:73"><decl pos:start="7:5" pos:end="7:72"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineClass</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">smc</name> <init pos:start="7:28" pos:end="7:72">= <expr pos:start="7:30" pos:end="7:72"><call pos:start="7:30" pos:end="7:72"><name pos:start="7:30" pos:end="7:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="7:53" pos:end="7:72">(<argument pos:start="7:54" pos:end="7:71"><expr pos:start="7:54" pos:end="7:71"><call pos:start="7:54" pos:end="7:71"><name pos:start="7:54" pos:end="7:69">qdev_get_machine</name><argument_list pos:start="7:70" pos:end="7:71">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="37:5"><if pos:start="11:5" pos:end="37:5">if <condition pos:start="11:8" pos:end="11:55">(<expr pos:start="11:9" pos:end="11:54"><call pos:start="11:9" pos:end="11:54"><name pos:start="11:9" pos:end="11:27">object_dynamic_cast</name><argument_list pos:start="11:28" pos:end="11:54">(<argument pos:start="11:29" pos:end="11:39"><expr pos:start="11:29" pos:end="11:39"><call pos:start="11:29" pos:end="11:39"><name pos:start="11:29" pos:end="11:34">OBJECT</name><argument_list pos:start="11:35" pos:end="11:39">(<argument pos:start="11:36" pos:end="11:38"><expr pos:start="11:36" pos:end="11:38"><name pos:start="11:36" pos:end="11:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="11:42" pos:end="11:53"><expr pos:start="11:42" pos:end="11:53"><name pos:start="11:42" pos:end="11:53">TYPE_PC_DIMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:57" pos:end="37:5">{<block_content pos:start="13:9" pos:end="35:56">

        <decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:21">node</name></decl>;</decl_stmt>



        <if_stmt pos:start="17:9" pos:end="23:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:33">(<expr pos:start="17:13" pos:end="17:32"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:32"><name pos:start="17:14" pos:end="17:16">smc</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:32">dr_lmb_enabled</name></name></expr>)</condition> <block pos:start="17:35" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:19">

            <expr_stmt pos:start="19:13" pos:end="19:78"><expr pos:start="19:13" pos:end="19:77"><call pos:start="19:13" pos:end="19:77"><name pos:start="19:13" pos:end="19:22">error_setg</name><argument_list pos:start="19:23" pos:end="19:77">(<argument pos:start="19:24" pos:end="19:27"><expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">errp</name></expr></argument>, <argument pos:start="19:30" pos:end="19:76"><expr pos:start="19:30" pos:end="19:76"><literal type="string" pos:start="19:30" pos:end="19:76">"Memory hotplug not supported for this machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="21:13" pos:end="21:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:77"><expr pos:start="25:9" pos:end="25:76"><name pos:start="25:9" pos:end="25:12">node</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:76"><name pos:start="25:16" pos:end="25:38">object_property_get_int</name><argument_list pos:start="25:39" pos:end="25:76">(<argument pos:start="25:40" pos:end="25:50"><expr pos:start="25:40" pos:end="25:50"><call pos:start="25:40" pos:end="25:50"><name pos:start="25:40" pos:end="25:45">OBJECT</name><argument_list pos:start="25:46" pos:end="25:50">(<argument pos:start="25:47" pos:end="25:49"><expr pos:start="25:47" pos:end="25:49"><name pos:start="25:47" pos:end="25:49">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:53" pos:end="25:69"><expr pos:start="25:53" pos:end="25:69"><name pos:start="25:53" pos:end="25:69">PC_DIMM_NODE_PROP</name></expr></argument>, <argument pos:start="25:72" pos:end="25:75"><expr pos:start="25:72" pos:end="25:75"><name pos:start="25:72" pos:end="25:75">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:18">(<expr pos:start="27:13" pos:end="27:17"><operator pos:start="27:13" pos:end="27:13">*</operator><name pos:start="27:14" pos:end="27:17">errp</name></expr>)</condition> <block pos:start="27:20" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:19">

            <return pos:start="29:13" pos:end="29:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><call pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:25">spapr_memory_plug</name><argument_list pos:start="35:26" pos:end="35:55">(<argument pos:start="35:27" pos:end="35:37"><expr pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:37">hotplug_dev</name></expr></argument>, <argument pos:start="35:40" pos:end="35:42"><expr pos:start="35:40" pos:end="35:42"><name pos:start="35:40" pos:end="35:42">dev</name></expr></argument>, <argument pos:start="35:45" pos:end="35:48"><expr pos:start="35:45" pos:end="35:48"><name pos:start="35:45" pos:end="35:48">node</name></expr></argument>, <argument pos:start="35:51" pos:end="35:54"><expr pos:start="35:51" pos:end="35:54"><name pos:start="35:51" pos:end="35:54">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
