<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10934.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">check_exception</name><parameter_list pos:start="1:28" pos:end="7:61">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">PowerPCCPU</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">cpu</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:69"><decl pos:start="1:46" pos:end="1:69"><type pos:start="1:46" pos:end="1:69"><name pos:start="1:46" pos:end="1:62">sPAPRMachineState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">spapr</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:42">token</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:52">uint32_t</name></type> <name pos:start="3:54" pos:end="3:58">nargs</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:45"><decl pos:start="5:29" pos:end="5:45"><type pos:start="5:29" pos:end="5:45"><name pos:start="5:29" pos:end="5:40">target_ulong</name></type> <name pos:start="5:42" pos:end="5:45">args</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:41"><decl pos:start="7:29" pos:end="7:41"><type pos:start="7:29" pos:end="7:41"><name pos:start="7:29" pos:end="7:36">uint32_t</name></type> <name pos:start="7:38" pos:end="7:41">nret</name></decl></parameter>, <parameter pos:start="7:44" pos:end="7:60"><decl pos:start="7:44" pos:end="7:60"><type pos:start="7:44" pos:end="7:60"><name pos:start="7:44" pos:end="7:55">target_ulong</name></type> <name pos:start="7:57" pos:end="7:60">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="107:1">{<block_content pos:start="11:5" pos:end="105:47">

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">mask</name></decl>, <decl pos:start="11:20" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:20" pos:end="11:22">buf</name></decl>, <decl pos:start="11:25" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:25" pos:end="11:27">len</name></decl>, <decl pos:start="11:30" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:30" pos:end="11:38">event_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">xinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:22">sPAPREventLogEntry</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:29">event</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:25">rtas_error_log</name></name> <modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:30">hdr</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:48">(<expr pos:start="21:9" pos:end="21:47"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:14">nargs</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">6</literal><operator pos:start="21:19" pos:end="21:19">)</operator> <operator pos:start="21:21" pos:end="21:22">||</operator> <operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:29">nargs</name> <operator pos:start="21:31" pos:end="21:31">&gt;</operator> <literal type="number" pos:start="21:33" pos:end="21:33">7</literal><operator pos:start="21:34" pos:end="21:34">)</operator> <operator pos:start="21:36" pos:end="21:37">||</operator> <name pos:start="21:39" pos:end="21:42">nret</name> <operator pos:start="21:44" pos:end="21:45">!=</operator> <literal type="number" pos:start="21:47" pos:end="21:47">1</literal></expr>)</condition> <block pos:start="21:50" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:15">rtas_st</name><argument_list pos:start="23:16" pos:end="23:46">(<argument pos:start="23:17" pos:end="23:20"><expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">rets</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:45"><expr pos:start="23:26" pos:end="23:45"><name pos:start="23:26" pos:end="23:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:9">xinfo</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:19">rtas_ld</name><argument_list pos:start="31:20" pos:end="31:28">(<argument pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:24">args</name></expr></argument>, <argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:8">mask</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:27"><name pos:start="33:12" pos:end="33:18">rtas_ld</name><argument_list pos:start="33:19" pos:end="33:27">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">args</name></expr></argument>, <argument pos:start="33:26" pos:end="33:26"><expr pos:start="33:26" pos:end="33:26"><literal type="number" pos:start="33:26" pos:end="33:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:7">buf</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:26"><name pos:start="35:11" pos:end="35:17">rtas_ld</name><argument_list pos:start="35:18" pos:end="35:26">(<argument pos:start="35:19" pos:end="35:22"><expr pos:start="35:19" pos:end="35:22"><name pos:start="35:19" pos:end="35:22">args</name></expr></argument>, <argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><literal type="number" pos:start="35:25" pos:end="35:25">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:7">len</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:26"><name pos:start="37:11" pos:end="37:17">rtas_ld</name><argument_list pos:start="37:18" pos:end="37:26">(<argument pos:start="37:19" pos:end="37:22"><expr pos:start="37:19" pos:end="37:22"><name pos:start="37:19" pos:end="37:22">args</name></expr></argument>, <argument pos:start="37:25" pos:end="37:25"><expr pos:start="37:25" pos:end="37:25"><literal type="number" pos:start="37:25" pos:end="37:25">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:13">nargs</name> <operator pos:start="39:15" pos:end="39:16">==</operator> <literal type="number" pos:start="39:18" pos:end="39:18">7</literal></expr>)</condition> <block pos:start="39:21" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:50">

        <expr_stmt pos:start="41:9" pos:end="41:50"><expr pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:13">xinfo</name> <operator pos:start="41:15" pos:end="41:16">|=</operator> <operator pos:start="41:18" pos:end="41:18">(</operator><name pos:start="41:19" pos:end="41:26">uint64_t</name><operator pos:start="41:27" pos:end="41:27">)</operator><call pos:start="41:28" pos:end="41:43"><name pos:start="41:28" pos:end="41:34">rtas_ld</name><argument_list pos:start="41:35" pos:end="41:43">(<argument pos:start="41:36" pos:end="41:39"><expr pos:start="41:36" pos:end="41:39"><name pos:start="41:36" pos:end="41:39">args</name></expr></argument>, <argument pos:start="41:42" pos:end="41:42"><expr pos:start="41:42" pos:end="41:42"><literal type="number" pos:start="41:42" pos:end="41:42">6</literal></expr></argument>)</argument_list></call> <operator pos:start="41:45" pos:end="41:46">&lt;&lt;</operator> <literal type="number" pos:start="41:48" pos:end="41:49">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:9">event</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:46"><name pos:start="47:13" pos:end="47:34">rtas_event_log_dequeue</name><argument_list pos:start="47:35" pos:end="47:46">(<argument pos:start="47:36" pos:end="47:39"><expr pos:start="47:36" pos:end="47:39"><name pos:start="47:36" pos:end="47:39">mask</name></expr></argument>, <argument pos:start="47:42" pos:end="47:45"><expr pos:start="47:42" pos:end="47:45"><name pos:start="47:42" pos:end="47:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:14">event</name></expr>)</condition> <block pos:start="49:17" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:27">

        <goto pos:start="51:9" pos:end="51:27">goto <name pos:start="51:14" pos:end="51:26">out_no_events</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:7">hdr</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:21"><name pos:start="57:11" pos:end="57:15">event</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:21">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:13">event_len</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:49"><name pos:start="59:17" pos:end="59:27">be32_to_cpu</name><argument_list pos:start="59:28" pos:end="59:49">(<argument pos:start="59:29" pos:end="59:48"><expr pos:start="59:29" pos:end="59:48"><name pos:start="59:29" pos:end="59:48"><name pos:start="59:29" pos:end="59:31">hdr</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:48">extended_length</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:51" pos:end="59:51">+</operator> <sizeof pos:start="59:53" pos:end="59:64">sizeof<argument_list pos:start="59:59" pos:end="59:64">(<argument pos:start="59:60" pos:end="59:63"><expr pos:start="59:60" pos:end="59:63"><operator pos:start="59:60" pos:end="59:60">*</operator><name pos:start="59:61" pos:end="59:63">hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:17">event_len</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:23">len</name></expr>)</condition> <block pos:start="63:26" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:24">

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">len</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:23">event_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><call pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:29">cpu_physical_memory_write</name><argument_list pos:start="71:30" pos:end="71:52">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">buf</name></expr></argument>, <argument pos:start="71:36" pos:end="71:46"><expr pos:start="71:36" pos:end="71:46"><name pos:start="71:36" pos:end="71:46"><name pos:start="71:36" pos:end="71:40">event</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:46">data</name></name></expr></argument>, <argument pos:start="71:49" pos:end="71:51"><expr pos:start="71:49" pos:end="71:51"><name pos:start="71:49" pos:end="71:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:39"><expr pos:start="73:5" pos:end="73:38"><call pos:start="73:5" pos:end="73:38"><name pos:start="73:5" pos:end="73:11">rtas_st</name><argument_list pos:start="73:12" pos:end="73:38">(<argument pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:16"><name pos:start="73:13" pos:end="73:16">rets</name></expr></argument>, <argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr></argument>, <argument pos:start="73:22" pos:end="73:37"><expr pos:start="73:22" pos:end="73:37"><name pos:start="73:22" pos:end="73:37">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><call pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:10">g_free</name><argument_list pos:start="75:11" pos:end="75:23">(<argument pos:start="75:12" pos:end="75:22"><expr pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:16">event</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:22">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:18"><expr pos:start="77:5" pos:end="77:17"><call pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:17">(<argument pos:start="77:12" pos:end="77:16"><expr pos:start="77:12" pos:end="77:16"><name pos:start="77:12" pos:end="77:16">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="89:7">/* according to PAPR+, the IRQ must be left asserted, or re-asserted, if

     * there are still pending events to be fetched via check-exception. We

     * do the latter here, since our code relies on edge-triggered

     * interrupts.

     */</comment>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:44">(<expr pos:start="91:9" pos:end="91:43"><call pos:start="91:9" pos:end="91:43"><name pos:start="91:9" pos:end="91:31">rtas_event_log_contains</name><argument_list pos:start="91:32" pos:end="91:43">(<argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><name pos:start="91:33" pos:end="91:36">mask</name></expr></argument>, <argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><name pos:start="91:39" pos:end="91:42">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:46" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:79">

        <expr_stmt pos:start="93:9" pos:end="93:79"><expr pos:start="93:9" pos:end="93:78"><call pos:start="93:9" pos:end="93:78"><name pos:start="93:9" pos:end="93:22">qemu_irq_pulse</name><argument_list pos:start="93:23" pos:end="93:78">(<argument pos:start="93:24" pos:end="93:77"><expr pos:start="93:24" pos:end="93:77"><call pos:start="93:24" pos:end="93:77"><name pos:start="93:24" pos:end="93:36">xics_get_qirq</name><argument_list pos:start="93:37" pos:end="93:77">(<argument pos:start="93:38" pos:end="93:48"><expr pos:start="93:38" pos:end="93:48"><name pos:start="93:38" pos:end="93:48"><name pos:start="93:38" pos:end="93:42">spapr</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:48">xics</name></name></expr></argument>, <argument pos:start="93:51" pos:end="93:76"><expr pos:start="93:51" pos:end="93:76"><name pos:start="93:51" pos:end="93:76"><name pos:start="93:51" pos:end="93:55">spapr</name><operator pos:start="93:56" pos:end="93:57">-&gt;</operator><name pos:start="93:58" pos:end="93:76">check_exception_irq</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="99:5" pos:end="99:11">return;</return>



<label pos:start="103:1" pos:end="103:14"><name pos:start="103:1" pos:end="103:13">out_no_events</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><call pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:11">rtas_st</name><argument_list pos:start="105:12" pos:end="105:46">(<argument pos:start="105:13" pos:end="105:16"><expr pos:start="105:13" pos:end="105:16"><name pos:start="105:13" pos:end="105:16">rets</name></expr></argument>, <argument pos:start="105:19" pos:end="105:19"><expr pos:start="105:19" pos:end="105:19"><literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr></argument>, <argument pos:start="105:22" pos:end="105:45"><expr pos:start="105:22" pos:end="105:45"><name pos:start="105:22" pos:end="105:45">RTAS_OUT_NO_ERRORS_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
