<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20418.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:23">v9fs_list_xattr</name><parameter_list pos:start="1:24" pos:end="3:50">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:33">FsContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">ctx</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">path</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:35"><decl pos:start="3:25" pos:end="3:35"><type pos:start="3:25" pos:end="3:35"><name pos:start="3:25" pos:end="3:28">void</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:35">value</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:43">size_t</name></type> <name pos:start="3:45" pos:end="3:49">vsize</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="109:1">{<block_content pos:start="7:5" pos:end="107:16">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">ssize_t</name></type> <name pos:start="7:13" pos:end="7:16">size</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:16">buffer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:16">ovalue</name> <init pos:start="11:18" pos:end="11:24">= <expr pos:start="11:20" pos:end="11:24"><name pos:start="11:20" pos:end="11:24">value</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">XattrOperations</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:25">xops</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:20">orig_value</name></decl>, <decl pos:start="15:23" pos:end="15:39"><type ref="prev" pos:start="15:5" pos:end="15:10"><modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:39">orig_value_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:48"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">ssize_t</name></type> <name pos:start="17:13" pos:end="17:21">xattr_len</name></decl>, <decl pos:start="17:24" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:24" pos:end="17:33">parsed_len</name> <init pos:start="17:35" pos:end="17:37">= <expr pos:start="17:37" pos:end="17:37"><literal type="number" pos:start="17:37" pos:end="17:37">0</literal></expr></init></decl>, <decl pos:start="17:40" pos:end="17:47"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:40" pos:end="17:47">attr_len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:28">/* Get the actual len */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:10">buffer</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:29"><name pos:start="23:14" pos:end="23:18">rpath</name><argument_list pos:start="23:19" pos:end="23:29">(<argument pos:start="23:20" pos:end="23:22"><expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">ctx</name></expr></argument>, <argument pos:start="23:25" pos:end="23:28"><expr pos:start="23:25" pos:end="23:28"><name pos:start="23:25" pos:end="23:28">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:13">xattr_len</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:44"><name pos:start="25:17" pos:end="25:26">llistxattr</name><argument_list pos:start="25:27" pos:end="25:44">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">buffer</name></expr></argument>, <argument pos:start="25:36" pos:end="25:40"><expr pos:start="25:36" pos:end="25:40"><name pos:start="25:36" pos:end="25:40">value</name></expr></argument>, <argument pos:start="25:43" pos:end="25:43"><expr pos:start="25:43" pos:end="25:43"><literal type="number" pos:start="25:43" pos:end="25:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:23">(<expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:17">xattr_len</name> <operator pos:start="27:19" pos:end="27:20">&lt;=</operator> <literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr>)</condition> <block pos:start="27:25" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:25">

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><call pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:14">g_free</name><argument_list pos:start="29:15" pos:end="29:22">(<argument pos:start="29:16" pos:end="29:21"><expr pos:start="29:16" pos:end="29:21"><name pos:start="29:16" pos:end="29:21">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:25">return <expr pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:24">xattr_len</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:54">/* Now fetch the xattr and find the actual size */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:14">orig_value</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:36"><name pos:start="39:18" pos:end="39:25">g_malloc</name><argument_list pos:start="39:26" pos:end="39:36">(<argument pos:start="39:27" pos:end="39:35"><expr pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:35">xattr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:58"><expr pos:start="41:5" pos:end="41:57"><name pos:start="41:5" pos:end="41:13">xattr_len</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:57"><name pos:start="41:17" pos:end="41:26">llistxattr</name><argument_list pos:start="41:27" pos:end="41:57">(<argument pos:start="41:28" pos:end="41:33"><expr pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:33">buffer</name></expr></argument>, <argument pos:start="41:36" pos:end="41:45"><expr pos:start="41:36" pos:end="41:45"><name pos:start="41:36" pos:end="41:45">orig_value</name></expr></argument>, <argument pos:start="41:48" pos:end="41:56"><expr pos:start="41:48" pos:end="41:56"><name pos:start="41:48" pos:end="41:56">xattr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><call pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:10">g_free</name><argument_list pos:start="43:11" pos:end="43:18">(<argument pos:start="43:12" pos:end="43:17"><expr pos:start="43:12" pos:end="43:17"><name pos:start="43:12" pos:end="43:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:32">/* store the orig pointer */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:20">orig_value_start</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:33">orig_value</name></expr>;</expr_stmt>

    <while pos:start="51:5" pos:end="93:5">while <condition pos:start="51:11" pos:end="51:34">(<expr pos:start="51:12" pos:end="51:33"><name pos:start="51:12" pos:end="51:20">xattr_len</name> <operator pos:start="51:22" pos:end="51:22">&gt;</operator> <name pos:start="51:24" pos:end="51:33">parsed_len</name></expr>)</condition> <block pos:start="51:36" pos:end="93:5">{<block_content pos:start="53:9" pos:end="91:31">

        <expr_stmt pos:start="53:9" pos:end="53:59"><expr pos:start="53:9" pos:end="53:58"><name pos:start="53:9" pos:end="53:12">xops</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:58"><name pos:start="53:16" pos:end="53:35">get_xattr_operations</name><argument_list pos:start="53:36" pos:end="53:58">(<argument pos:start="53:37" pos:end="53:45"><expr pos:start="53:37" pos:end="53:45"><name pos:start="53:37" pos:end="53:45"><name pos:start="53:37" pos:end="53:39">ctx</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:45">xops</name></name></expr></argument>, <argument pos:start="53:48" pos:end="53:57"><expr pos:start="53:48" pos:end="53:57"><name pos:start="53:48" pos:end="53:57">orig_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:18">(<expr pos:start="55:13" pos:end="55:17"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:17">xops</name></expr>)</condition> <block pos:start="55:20" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:28">

            <goto pos:start="57:13" pos:end="57:28">goto <name pos:start="57:18" pos:end="57:27">next_entry</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="63:9" pos:end="81:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:19">(<expr pos:start="63:13" pos:end="63:18"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:18">value</name></expr>)</condition> <block pos:start="63:21" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:73">

            <expr_stmt pos:start="65:13" pos:end="65:73"><expr pos:start="65:13" pos:end="65:72"><name pos:start="65:13" pos:end="65:16">size</name> <operator pos:start="65:18" pos:end="65:19">+=</operator> <call pos:start="65:21" pos:end="65:72"><name pos:start="65:21" pos:end="65:35"><name pos:start="65:21" pos:end="65:24">xops</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:35">listxattr</name></name><argument_list pos:start="65:36" pos:end="65:72">(<argument pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:39">ctx</name></expr></argument>, <argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><name pos:start="65:42" pos:end="65:45">path</name></expr></argument>, <argument pos:start="65:48" pos:end="65:57"><expr pos:start="65:48" pos:end="65:57"><name pos:start="65:48" pos:end="65:57">orig_value</name></expr></argument>, <argument pos:start="65:60" pos:end="65:64"><expr pos:start="65:60" pos:end="65:64"><name pos:start="65:60" pos:end="65:64">value</name></expr></argument>, <argument pos:start="65:67" pos:end="65:71"><expr pos:start="65:67" pos:end="65:71"><name pos:start="65:67" pos:end="65:71">vsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="81:9">else <block pos:start="67:16" pos:end="81:9">{<block_content pos:start="69:13" pos:end="79:26">

            <expr_stmt pos:start="69:13" pos:end="69:72"><expr pos:start="69:13" pos:end="69:71"><name pos:start="69:13" pos:end="69:16">size</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:71"><name pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:23">xops</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:34">listxattr</name></name><argument_list pos:start="69:35" pos:end="69:71">(<argument pos:start="69:36" pos:end="69:38"><expr pos:start="69:36" pos:end="69:38"><name pos:start="69:36" pos:end="69:38">ctx</name></expr></argument>, <argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><name pos:start="69:41" pos:end="69:44">path</name></expr></argument>, <argument pos:start="69:47" pos:end="69:56"><expr pos:start="69:47" pos:end="69:56"><name pos:start="69:47" pos:end="69:56">orig_value</name></expr></argument>, <argument pos:start="69:59" pos:end="69:63"><expr pos:start="69:59" pos:end="69:63"><name pos:start="69:59" pos:end="69:63">value</name></expr></argument>, <argument pos:start="69:66" pos:end="69:70"><expr pos:start="69:66" pos:end="69:70"><name pos:start="69:66" pos:end="69:70">vsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:25">(<expr pos:start="71:17" pos:end="71:24"><name pos:start="71:17" pos:end="71:20">size</name> <operator pos:start="71:22" pos:end="71:22">&lt;</operator> <literal type="number" pos:start="71:24" pos:end="71:24">0</literal></expr>)</condition> <block pos:start="71:27" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:29">

                <goto pos:start="73:17" pos:end="73:29">goto <name pos:start="73:22" pos:end="73:28">err_out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:26"><expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:17">value</name> <operator pos:start="77:19" pos:end="77:20">+=</operator> <name pos:start="77:22" pos:end="77:25">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:26"><expr pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:17">vsize</name> <operator pos:start="79:19" pos:end="79:20">-=</operator> <name pos:start="79:22" pos:end="79:25">size</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<label pos:start="83:1" pos:end="83:11"><name pos:start="83:1" pos:end="83:10">next_entry</name>:</label>

        <comment type="block" pos:start="85:9" pos:end="85:32">/* Got the next entry */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:42"><expr pos:start="87:9" pos:end="87:41"><name pos:start="87:9" pos:end="87:16">attr_len</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:37"><name pos:start="87:20" pos:end="87:25">strlen</name><argument_list pos:start="87:26" pos:end="87:37">(<argument pos:start="87:27" pos:end="87:36"><expr pos:start="87:27" pos:end="87:36"><name pos:start="87:27" pos:end="87:36">orig_value</name></expr></argument>)</argument_list></call> <operator pos:start="87:39" pos:end="87:39">+</operator> <literal type="number" pos:start="87:41" pos:end="87:41">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:18">parsed_len</name> <operator pos:start="89:20" pos:end="89:21">+=</operator> <name pos:start="89:23" pos:end="89:30">attr_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:18">orig_value</name> <operator pos:start="91:20" pos:end="91:21">+=</operator> <name pos:start="91:23" pos:end="91:30">attr_len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:14">(<expr pos:start="95:9" pos:end="95:13"><name pos:start="95:9" pos:end="95:13">value</name></expr>)</condition> <block pos:start="95:16" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:30">

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:12">size</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <name pos:start="97:16" pos:end="97:20">value</name> <operator pos:start="97:22" pos:end="97:22">-</operator> <name pos:start="97:24" pos:end="97:29">ovalue</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="103:1" pos:end="103:8"><name pos:start="103:1" pos:end="103:7">err_out</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:29"><expr pos:start="105:5" pos:end="105:28"><call pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:10">g_free</name><argument_list pos:start="105:11" pos:end="105:28">(<argument pos:start="105:12" pos:end="105:27"><expr pos:start="105:12" pos:end="105:27"><name pos:start="105:12" pos:end="105:27">orig_value_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:16">return <expr pos:start="107:12" pos:end="107:15"><name pos:start="107:12" pos:end="107:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
