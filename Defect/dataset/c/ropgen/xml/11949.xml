<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11949.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">usbredir_interrupt_packet</name><parameter_list pos:start="1:38" pos:end="5:32">(<parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">priv</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:61">id</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:62"><decl pos:start="3:5" pos:end="3:62"><type pos:start="3:5" pos:end="3:62"><name pos:start="3:5" pos:end="3:44"><name pos:start="3:5" pos:end="3:10">struct</name> <name pos:start="3:12" pos:end="3:44">usb_redir_interrupt_packet_header</name></name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:62">interrupt_packet</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:17">data</name></decl></parameter>, <parameter pos:start="5:20" pos:end="5:31"><decl pos:start="5:20" pos:end="5:31"><type pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:22">int</name></type> <name pos:start="5:24" pos:end="5:31">data_len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:5" pos:end="89:5">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">USBRedirDevice</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">dev</name> <init pos:start="9:25" pos:end="9:30">= <expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">priv</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:14">ep</name> <init pos:start="11:16" pos:end="11:43">= <expr pos:start="11:18" pos:end="11:43"><name pos:start="11:18" pos:end="11:43"><name pos:start="11:18" pos:end="11:33">interrupt_packet</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:43">endpoint</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:56"><expr pos:start="15:5" pos:end="17:55"><call pos:start="15:5" pos:end="17:55"><name pos:start="15:5" pos:end="15:11">DPRINTF</name><argument_list pos:start="15:12" pos:end="17:55">(<argument pos:start="15:13" pos:end="15:59"><expr pos:start="15:13" pos:end="15:59"><literal type="string" pos:start="15:13" pos:end="15:59">"interrupt-in status %d ep %02X len %d id %u\n"</literal></expr></argument>,

            <argument pos:start="17:13" pos:end="17:36"><expr pos:start="17:13" pos:end="17:36"><name pos:start="17:13" pos:end="17:36"><name pos:start="17:13" pos:end="17:28">interrupt_packet</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:36">status</name></name></expr></argument>, <argument pos:start="17:39" pos:end="17:40"><expr pos:start="17:39" pos:end="17:40"><name pos:start="17:39" pos:end="17:40">ep</name></expr></argument>, <argument pos:start="17:43" pos:end="17:50"><expr pos:start="17:43" pos:end="17:50"><name pos:start="17:43" pos:end="17:50">data_len</name></expr></argument>, <argument pos:start="17:53" pos:end="17:54"><expr pos:start="17:53" pos:end="17:54"><name pos:start="17:53" pos:end="17:54">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:62">(<expr pos:start="21:9" pos:end="21:61"><name pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:11">dev</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:21">endpoint</name><index pos:start="21:22" pos:end="21:31">[<expr pos:start="21:23" pos:end="21:30"><call pos:start="21:23" pos:end="21:30"><name pos:start="21:23" pos:end="21:26">EP2I</name><argument_list pos:start="21:27" pos:end="21:30">(<argument pos:start="21:28" pos:end="21:29"><expr pos:start="21:28" pos:end="21:29"><name pos:start="21:28" pos:end="21:29">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="21:32" pos:end="21:32">.</operator><name pos:start="21:33" pos:end="21:36">type</name> <operator pos:start="21:38" pos:end="21:39">!=</operator> <name pos:start="21:41" pos:end="21:61">USB_ENDPOINT_XFER_INT</name></expr>)</condition> <block pos:start="21:64" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="23:75"><expr pos:start="23:9" pos:end="23:74"><call pos:start="23:9" pos:end="23:74"><name pos:start="23:9" pos:end="23:13">ERROR</name><argument_list pos:start="23:14" pos:end="23:74">(<argument pos:start="23:15" pos:end="23:69"><expr pos:start="23:15" pos:end="23:69"><literal type="string" pos:start="23:15" pos:end="23:69">"received int packet for non interrupt endpoint %02X\n"</literal></expr></argument>, <argument pos:start="23:72" pos:end="23:73"><expr pos:start="23:72" pos:end="23:73"><name pos:start="23:72" pos:end="23:73">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:19"><expr pos:start="25:9" pos:end="25:18"><call pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:12">free</name><argument_list pos:start="25:13" pos:end="25:18">(<argument pos:start="25:14" pos:end="25:17"><expr pos:start="25:14" pos:end="25:17"><name pos:start="25:14" pos:end="25:17">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="89:5"><if pos:start="33:5" pos:end="51:5">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:10">ep</name> <operator pos:start="33:12" pos:end="33:12">&amp;</operator> <name pos:start="33:14" pos:end="33:23">USB_DIR_IN</name></expr>)</condition> <block pos:start="33:26" pos:end="51:5">{<block_content pos:start="35:9" pos:end="49:70">

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:59">(<expr pos:start="35:13" pos:end="35:58"><name pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:15">dev</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:25">endpoint</name><index pos:start="35:26" pos:end="35:35">[<expr pos:start="35:27" pos:end="35:34"><call pos:start="35:27" pos:end="35:34"><name pos:start="35:27" pos:end="35:30">EP2I</name><argument_list pos:start="35:31" pos:end="35:34">(<argument pos:start="35:32" pos:end="35:33"><expr pos:start="35:32" pos:end="35:33"><name pos:start="35:32" pos:end="35:33">ep</name></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="35:36" pos:end="35:36">.</operator><name pos:start="35:37" pos:end="35:53">interrupt_started</name> <operator pos:start="35:55" pos:end="35:56">==</operator> <literal type="number" pos:start="35:58" pos:end="35:58">0</literal></expr>)</condition> <block pos:start="35:61" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:19">

            <expr_stmt pos:start="37:13" pos:end="37:75"><expr pos:start="37:13" pos:end="37:74"><call pos:start="37:13" pos:end="37:74"><name pos:start="37:13" pos:end="37:19">DPRINTF</name><argument_list pos:start="37:20" pos:end="37:74">(<argument pos:start="37:21" pos:end="37:69"><expr pos:start="37:21" pos:end="37:69"><literal type="string" pos:start="37:21" pos:end="37:69">"received int packet while not started ep %02X\n"</literal></expr></argument>, <argument pos:start="37:72" pos:end="37:73"><expr pos:start="37:72" pos:end="37:73"><name pos:start="37:72" pos:end="37:73">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:23"><expr pos:start="39:13" pos:end="39:22"><call pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:16">free</name><argument_list pos:start="39:17" pos:end="39:22">(<argument pos:start="39:18" pos:end="39:21"><expr pos:start="39:18" pos:end="39:21"><name pos:start="39:18" pos:end="39:21">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="47:9" pos:end="47:61">/* bufp_alloc also adds the packet to the ep queue */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:70"><expr pos:start="49:9" pos:end="49:69"><call pos:start="49:9" pos:end="49:69"><name pos:start="49:9" pos:end="49:18">bufp_alloc</name><argument_list pos:start="49:19" pos:end="49:69">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">data</name></expr></argument>, <argument pos:start="49:31" pos:end="49:38"><expr pos:start="49:31" pos:end="49:38"><name pos:start="49:31" pos:end="49:38">data_len</name></expr></argument>, <argument pos:start="49:41" pos:end="49:64"><expr pos:start="49:41" pos:end="49:64"><name pos:start="49:41" pos:end="49:64"><name pos:start="49:41" pos:end="49:56">interrupt_packet</name><operator pos:start="49:57" pos:end="49:58">-&gt;</operator><name pos:start="49:59" pos:end="49:64">status</name></name></expr></argument>, <argument pos:start="49:67" pos:end="49:68"><expr pos:start="49:67" pos:end="49:68"><name pos:start="49:67" pos:end="49:68">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="89:5">else <block pos:start="51:12" pos:end="89:5">{<block_content pos:start="53:9" pos:end="87:30">

        <decl_stmt pos:start="53:9" pos:end="53:43"><decl pos:start="53:9" pos:end="53:42"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:15">len</name> <init pos:start="53:17" pos:end="53:42">= <expr pos:start="53:19" pos:end="53:42"><name pos:start="53:19" pos:end="53:42"><name pos:start="53:19" pos:end="53:34">interrupt_packet</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:42">length</name></name></expr></init></decl>;</decl_stmt>



        <decl_stmt pos:start="57:9" pos:end="57:45"><decl pos:start="57:9" pos:end="57:44"><type pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:16">AsyncURB</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:22">aurb</name> <init pos:start="57:24" pos:end="57:44">= <expr pos:start="57:26" pos:end="57:44"><call pos:start="57:26" pos:end="57:44"><name pos:start="57:26" pos:end="57:35">async_find</name><argument_list pos:start="57:36" pos:end="57:44">(<argument pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:39">dev</name></expr></argument>, <argument pos:start="57:42" pos:end="57:43"><expr pos:start="57:42" pos:end="57:43"><name pos:start="57:42" pos:end="57:43">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:18">(<expr pos:start="59:13" pos:end="59:17"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:17">aurb</name></expr>)</condition> <block pos:start="59:20" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:19">

            <return pos:start="61:13" pos:end="61:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:74">(<expr pos:start="67:13" pos:end="67:73"><name pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:16">aurb</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:34">interrupt_packet</name><operator pos:start="67:35" pos:end="67:35">.</operator><name pos:start="67:36" pos:end="67:43">endpoint</name></name> <operator pos:start="67:45" pos:end="67:46">!=</operator> <name pos:start="67:48" pos:end="67:73"><name pos:start="67:48" pos:end="67:63">interrupt_packet</name><operator pos:start="67:64" pos:end="67:65">-&gt;</operator><name pos:start="67:66" pos:end="67:73">endpoint</name></name></expr>)</condition> <block pos:start="67:76" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:30">

            <expr_stmt pos:start="69:13" pos:end="69:71"><expr pos:start="69:13" pos:end="69:70"><call pos:start="69:13" pos:end="69:70"><name pos:start="69:13" pos:end="69:17">ERROR</name><argument_list pos:start="69:18" pos:end="69:70">(<argument pos:start="69:19" pos:end="69:69"><expr pos:start="69:19" pos:end="69:69"><literal type="string" pos:start="69:19" pos:end="69:69">"return int packet mismatch, please report this!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:30"><expr pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:15">len</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:29">USB_RET_NAK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:25">(<expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:16">aurb</name><operator pos:start="77:17" pos:end="77:18">-&gt;</operator><name pos:start="77:19" pos:end="77:24">packet</name></name></expr>)</condition> <block pos:start="77:27" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:57">

            <expr_stmt pos:start="79:13" pos:end="81:78"><expr pos:start="79:13" pos:end="81:77"><name pos:start="79:13" pos:end="79:32"><name pos:start="79:13" pos:end="79:16">aurb</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:24">packet</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:32">result</name></name> <operator pos:start="79:34" pos:end="79:34">=</operator> <call pos:start="79:36" pos:end="81:77"><name pos:start="79:36" pos:end="79:57">usbredir_handle_status</name><argument_list pos:start="79:58" pos:end="81:77">(<argument pos:start="79:59" pos:end="79:61"><expr pos:start="79:59" pos:end="79:61"><name pos:start="79:59" pos:end="79:61">dev</name></expr></argument>,

                                               <argument pos:start="81:48" pos:end="81:71"><expr pos:start="81:48" pos:end="81:71"><name pos:start="81:48" pos:end="81:71"><name pos:start="81:48" pos:end="81:63">interrupt_packet</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:71">status</name></name></expr></argument>, <argument pos:start="81:74" pos:end="81:76"><expr pos:start="81:74" pos:end="81:76"><name pos:start="81:74" pos:end="81:76">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:57"><expr pos:start="83:13" pos:end="83:56"><call pos:start="83:13" pos:end="83:56"><name pos:start="83:13" pos:end="83:31">usb_packet_complete</name><argument_list pos:start="83:32" pos:end="83:56">(<argument pos:start="83:33" pos:end="83:41"><expr pos:start="83:33" pos:end="83:41"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:41"><name pos:start="83:34" pos:end="83:36">dev</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:41">dev</name></name></expr></argument>, <argument pos:start="83:44" pos:end="83:55"><expr pos:start="83:44" pos:end="83:55"><name pos:start="83:44" pos:end="83:55"><name pos:start="83:44" pos:end="83:47">aurb</name><operator pos:start="83:48" pos:end="83:49">-&gt;</operator><name pos:start="83:50" pos:end="83:55">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><call pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:18">async_free</name><argument_list pos:start="87:19" pos:end="87:29">(<argument pos:start="87:20" pos:end="87:22"><expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">dev</name></expr></argument>, <argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">aurb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
