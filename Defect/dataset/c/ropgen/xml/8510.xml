<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8510.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">send_invoke_response</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:42">URLContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><name pos:start="1:48" pos:end="1:57">RTMPPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="211:1">{<block_content pos:start="5:5" pos:end="209:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">RTMPContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">rt</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">double</name></type> <name pos:start="7:12" pos:end="7:17">seqnum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:17">filename</name><index pos:start="9:18" pos:end="9:21">[<expr pos:start="9:19" pos:end="9:20"><literal type="number" pos:start="9:19" pos:end="9:20">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:20"><name pos:start="11:10" pos:end="11:16">command</name><index pos:start="11:17" pos:end="11:20">[<expr pos:start="11:18" pos:end="11:19"><literal type="number" pos:start="11:18" pos:end="11:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">stringlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:15">pchar</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:20">p</name> <init pos:start="17:22" pos:end="17:32">= <expr pos:start="17:24" pos:end="17:32"><name pos:start="17:24" pos:end="17:32"><name pos:start="17:24" pos:end="17:26">pkt</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:32">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:15">pp</name>      <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">RTMPPacket</name></type> <name pos:start="21:16" pos:end="21:19">spkt</name>  <init pos:start="21:22" pos:end="21:28">= <expr pos:start="21:24" pos:end="21:28"><block pos:start="21:24" pos:end="21:28">{ <expr pos:start="21:26" pos:end="21:26"><literal type="number" pos:start="21:26" pos:end="21:26">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18">GetByteContext</name></type> <name pos:start="23:20" pos:end="23:22">gbc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><call pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:20">bytestream2_init</name><argument_list pos:start="29:21" pos:end="29:40">(<argument pos:start="29:22" pos:end="29:25"><expr pos:start="29:22" pos:end="29:25"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:25">gbc</name></expr></argument>, <argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">p</name></expr></argument>, <argument pos:start="29:31" pos:end="29:39"><expr pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:33">pkt</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:39">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="33:39">(<expr pos:start="31:9" pos:end="33:38"><call pos:start="31:9" pos:end="33:38"><name pos:start="31:9" pos:end="31:26">ff_amf_read_string</name><argument_list pos:start="31:27" pos:end="33:38">(<argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:31">gbc</name></expr></argument>, <argument pos:start="31:34" pos:end="31:40"><expr pos:start="31:34" pos:end="31:40"><name pos:start="31:34" pos:end="31:40">command</name></expr></argument>, <argument pos:start="31:43" pos:end="31:57"><expr pos:start="31:43" pos:end="31:57"><sizeof pos:start="31:43" pos:end="31:57">sizeof<argument_list pos:start="31:49" pos:end="31:57">(<argument pos:start="31:50" pos:end="31:56"><expr pos:start="31:50" pos:end="31:56"><name pos:start="31:50" pos:end="31:56">command</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="33:28" pos:end="33:37"><expr pos:start="33:28" pos:end="33:37"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:37">stringlen</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:41" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:35">

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><call pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:55">(<argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><name pos:start="35:16" pos:end="35:16">s</name></expr></argument>, <argument pos:start="35:19" pos:end="35:30"><expr pos:start="35:19" pos:end="35:30"><name pos:start="35:19" pos:end="35:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:33" pos:end="35:54"><expr pos:start="35:33" pos:end="35:54"><literal type="string" pos:start="35:33" pos:end="35:54">"Error in PT_INVOKE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:35">return <expr pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:43"><name pos:start="43:11" pos:end="43:28">ff_amf_read_number</name><argument_list pos:start="43:29" pos:end="43:43">(<argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><operator pos:start="43:30" pos:end="43:30">&amp;</operator><name pos:start="43:31" pos:end="43:33">gbc</name></expr></argument>, <argument pos:start="43:36" pos:end="43:42"><expr pos:start="43:36" pos:end="43:42"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:42">seqnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:19"><if pos:start="45:5" pos:end="47:19">if <condition pos:start="45:8" pos:end="45:12">(<expr pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">ret</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:19"><block_content pos:start="47:9" pos:end="47:19">

        <return pos:start="47:9" pos:end="47:19">return <expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:32"><name pos:start="49:11" pos:end="49:26">ff_amf_read_null</name><argument_list pos:start="49:27" pos:end="49:32">(<argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:31">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="53:19"><if pos:start="51:5" pos:end="53:19">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">ret</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:19"><block_content pos:start="53:9" pos:end="53:19">

        <return pos:start="53:9" pos:end="53:19">return <expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="107:5"><if pos:start="55:5" pos:end="107:5">if <condition pos:start="55:8" pos:end="57:36">(<expr pos:start="55:9" pos:end="57:35"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:37"><name pos:start="55:10" pos:end="55:15">strcmp</name><argument_list pos:start="55:16" pos:end="55:37">(<argument pos:start="55:17" pos:end="55:23"><expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:23">command</name></expr></argument>, <argument pos:start="55:26" pos:end="55:36"><expr pos:start="55:26" pos:end="55:36"><literal type="string" pos:start="55:26" pos:end="55:36">"FCPublish"</literal></expr></argument>)</argument_list></call> <operator pos:start="55:39" pos:end="55:40">||</operator>

        <operator pos:start="57:9" pos:end="57:9">!</operator><call pos:start="57:10" pos:end="57:35"><name pos:start="57:10" pos:end="57:15">strcmp</name><argument_list pos:start="57:16" pos:end="57:35">(<argument pos:start="57:17" pos:end="57:23"><expr pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:23">command</name></expr></argument>, <argument pos:start="57:26" pos:end="57:34"><expr pos:start="57:26" pos:end="57:34"><literal type="string" pos:start="57:26" pos:end="57:34">"publish"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:38" pos:end="107:5">{<block_content pos:start="59:9" pos:end="105:36">

        <expr_stmt pos:start="59:9" pos:end="61:63"><expr pos:start="59:9" pos:end="61:62"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="61:62"><name pos:start="59:15" pos:end="59:32">ff_amf_read_string</name><argument_list pos:start="59:33" pos:end="61:62">(<argument pos:start="59:34" pos:end="59:37"><expr pos:start="59:34" pos:end="59:37"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:37">gbc</name></expr></argument>, <argument pos:start="59:40" pos:end="59:47"><expr pos:start="59:40" pos:end="59:47"><name pos:start="59:40" pos:end="59:47">filename</name></expr></argument>,

                                 <argument pos:start="61:34" pos:end="61:49"><expr pos:start="61:34" pos:end="61:49"><sizeof pos:start="61:34" pos:end="61:49">sizeof<argument_list pos:start="61:40" pos:end="61:49">(<argument pos:start="61:41" pos:end="61:48"><expr pos:start="61:41" pos:end="61:48"><name pos:start="61:41" pos:end="61:48">filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="61:52" pos:end="61:61"><expr pos:start="61:52" pos:end="61:61"><operator pos:start="61:52" pos:end="61:52">&amp;</operator><name pos:start="61:53" pos:end="61:61">stringlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="75:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:16">(<expr pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">ret</name></expr>)</condition> <block pos:start="63:18" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:23">

            <if_stmt pos:start="65:13" pos:end="71:73"><if pos:start="65:13" pos:end="67:90">if <condition pos:start="65:16" pos:end="65:39">(<expr pos:start="65:17" pos:end="65:38"><name pos:start="65:17" pos:end="65:19">ret</name> <operator pos:start="65:21" pos:end="65:22">==</operator> <call pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:30">AVERROR</name><argument_list pos:start="65:31" pos:end="65:38">(<argument pos:start="65:32" pos:end="65:37"><expr pos:start="65:32" pos:end="65:37"><name pos:start="65:32" pos:end="65:37">EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="67:90"><block_content pos:start="67:17" pos:end="67:90">

                <expr_stmt pos:start="67:17" pos:end="67:90"><expr pos:start="67:17" pos:end="67:89"><call pos:start="67:17" pos:end="67:89"><name pos:start="67:17" pos:end="67:22">av_log</name><argument_list pos:start="67:23" pos:end="67:89">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">s</name></expr></argument>, <argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:41" pos:end="67:88"><expr pos:start="67:41" pos:end="67:88"><literal type="string" pos:start="67:41" pos:end="67:88">"Unable to parse stream name - name too long?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="69:13" pos:end="71:73">else<block type="pseudo" pos:start="71:17" pos:end="71:73"><block_content pos:start="71:17" pos:end="71:73">

                <expr_stmt pos:start="71:17" pos:end="71:73"><expr pos:start="71:17" pos:end="71:72"><call pos:start="71:17" pos:end="71:72"><name pos:start="71:17" pos:end="71:22">av_log</name><argument_list pos:start="71:23" pos:end="71:72">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">s</name></expr></argument>, <argument pos:start="71:27" pos:end="71:38"><expr pos:start="71:27" pos:end="71:38"><name pos:start="71:27" pos:end="71:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:41" pos:end="71:71"><expr pos:start="71:41" pos:end="71:71"><literal type="string" pos:start="71:41" pos:end="71:71">"Unable to parse stream name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <return pos:start="73:13" pos:end="73:23">return <expr pos:start="73:20" pos:end="73:22"><name pos:start="73:20" pos:end="73:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="77:9" pos:end="77:25">// check with url</comment>

        <if_stmt pos:start="79:9" pos:end="103:9"><if pos:start="79:9" pos:end="103:9">if <condition pos:start="79:12" pos:end="79:24">(<expr pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:23">filename</name></name></expr>)</condition> <block pos:start="79:26" pos:end="103:9">{<block_content pos:start="81:13" pos:end="101:49">

            <expr_stmt pos:start="81:13" pos:end="81:46"><expr pos:start="81:13" pos:end="81:45"><name pos:start="81:13" pos:end="81:17">pchar</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:45"><name pos:start="81:21" pos:end="81:27">strrchr</name><argument_list pos:start="81:28" pos:end="81:45">(<argument pos:start="81:29" pos:end="81:39"><expr pos:start="81:29" pos:end="81:39"><name pos:start="81:29" pos:end="81:39"><name pos:start="81:29" pos:end="81:29">s</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:39">filename</name></name></expr></argument>, <argument pos:start="81:42" pos:end="81:44"><expr pos:start="81:42" pos:end="81:44"><literal type="char" pos:start="81:42" pos:end="81:44">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="93:13"><if pos:start="83:13" pos:end="93:13">if <condition pos:start="83:16" pos:end="83:23">(<expr pos:start="83:17" pos:end="83:22"><operator pos:start="83:17" pos:end="83:17">!</operator><name pos:start="83:18" pos:end="83:22">pchar</name></expr>)</condition> <block pos:start="83:25" pos:end="93:13">{<block_content pos:start="85:17" pos:end="91:36">

                <expr_stmt pos:start="85:17" pos:end="89:36"><expr pos:start="85:17" pos:end="89:35"><call pos:start="85:17" pos:end="89:35"><name pos:start="85:17" pos:end="85:22">av_log</name><argument_list pos:start="85:23" pos:end="89:35">(<argument pos:start="85:24" pos:end="85:24"><expr pos:start="85:24" pos:end="85:24"><name pos:start="85:24" pos:end="85:24">s</name></expr></argument>, <argument pos:start="85:27" pos:end="85:40"><expr pos:start="85:27" pos:end="85:40"><name pos:start="85:27" pos:end="85:40">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="87:24" pos:end="87:65"><expr pos:start="87:24" pos:end="87:65"><literal type="string" pos:start="87:24" pos:end="87:65">"Unable to find / in url %s, bad format\n"</literal></expr></argument>,

                       <argument pos:start="89:24" pos:end="89:34"><expr pos:start="89:24" pos:end="89:34"><name pos:start="89:24" pos:end="89:34"><name pos:start="89:24" pos:end="89:24">s</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:34">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:36"><expr pos:start="91:17" pos:end="91:35"><name pos:start="91:17" pos:end="91:21">pchar</name> <operator pos:start="91:23" pos:end="91:23">=</operator> <name pos:start="91:25" pos:end="91:35"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:35">filename</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:20"><expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:17">pchar</name><operator pos:start="95:18" pos:end="95:19">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="101:49"><if pos:start="97:13" pos:end="101:49">if <condition pos:start="97:16" pos:end="97:40">(<expr pos:start="97:17" pos:end="97:39"><call pos:start="97:17" pos:end="97:39"><name pos:start="97:17" pos:end="97:22">strcmp</name><argument_list pos:start="97:23" pos:end="97:39">(<argument pos:start="97:24" pos:end="97:28"><expr pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:28">pchar</name></expr></argument>, <argument pos:start="97:31" pos:end="97:38"><expr pos:start="97:31" pos:end="97:38"><name pos:start="97:31" pos:end="97:38">filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="101:49"><block_content pos:start="99:17" pos:end="101:49">

                <expr_stmt pos:start="99:17" pos:end="101:49"><expr pos:start="99:17" pos:end="101:48"><call pos:start="99:17" pos:end="101:48"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="101:48">(<argument pos:start="99:24" pos:end="99:24"><expr pos:start="99:24" pos:end="99:24"><name pos:start="99:24" pos:end="99:24">s</name></expr></argument>, <argument pos:start="99:27" pos:end="99:40"><expr pos:start="99:27" pos:end="99:40"><name pos:start="99:27" pos:end="99:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="99:43" pos:end="101:30"><expr pos:start="99:43" pos:end="101:30"><literal type="string" pos:start="99:43" pos:end="99:75">"Unexpected stream %s, expecting"</literal>

                       <literal type="string" pos:start="101:24" pos:end="101:30">" %s\n"</literal></expr></argument>, <argument pos:start="101:33" pos:end="101:40"><expr pos:start="101:33" pos:end="101:40"><name pos:start="101:33" pos:end="101:40">filename</name></expr></argument>, <argument pos:start="101:43" pos:end="101:47"><expr pos:start="101:43" pos:end="101:47"><name pos:start="101:43" pos:end="101:47">pchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:10">rt</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:17">state</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:35">STATE_RECEIVING</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="199:5"><if pos:start="111:5" pos:end="129:5">if <condition pos:start="111:8" pos:end="111:38">(<expr pos:start="111:9" pos:end="111:37"><operator pos:start="111:9" pos:end="111:9">!</operator><call pos:start="111:10" pos:end="111:37"><name pos:start="111:10" pos:end="111:15">strcmp</name><argument_list pos:start="111:16" pos:end="111:37">(<argument pos:start="111:17" pos:end="111:23"><expr pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:23">command</name></expr></argument>, <argument pos:start="111:26" pos:end="111:36"><expr pos:start="111:26" pos:end="111:36"><literal type="string" pos:start="111:26" pos:end="111:36">"FCPublish"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:40" pos:end="129:5">{<block_content pos:start="113:9" pos:end="127:48">

        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="117:73">(<expr pos:start="113:13" pos:end="117:72"><operator pos:start="113:13" pos:end="113:13">(</operator><name pos:start="113:14" pos:end="113:16">ret</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <call pos:start="113:20" pos:end="117:67"><name pos:start="113:20" pos:end="113:40">ff_rtmp_packet_create</name><argument_list pos:start="113:41" pos:end="117:67">(<argument pos:start="113:42" pos:end="113:46"><expr pos:start="113:42" pos:end="113:46"><operator pos:start="113:42" pos:end="113:42">&amp;</operator><name pos:start="113:43" pos:end="113:46">spkt</name></expr></argument>, <argument pos:start="113:49" pos:end="113:67"><expr pos:start="113:49" pos:end="113:67"><name pos:start="113:49" pos:end="113:67">RTMP_SYSTEM_CHANNEL</name></expr></argument>,

                                         <argument pos:start="115:42" pos:end="115:55"><expr pos:start="115:42" pos:end="115:55"><name pos:start="115:42" pos:end="115:55">RTMP_PT_INVOKE</name></expr></argument>, <argument pos:start="115:58" pos:end="115:58"><expr pos:start="115:58" pos:end="115:58"><literal type="number" pos:start="115:58" pos:end="115:58">0</literal></expr></argument>,

                                         <argument pos:start="117:42" pos:end="117:66"><expr pos:start="117:42" pos:end="117:66"><name pos:start="117:42" pos:end="117:66">RTMP_PKTDATA_DEFAULT_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="117:68" pos:end="117:68">)</operator> <operator pos:start="117:70" pos:end="117:70">&lt;</operator> <literal type="number" pos:start="117:72" pos:end="117:72">0</literal></expr>)</condition> <block pos:start="117:75" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:23">

            <expr_stmt pos:start="119:13" pos:end="119:74"><expr pos:start="119:13" pos:end="119:73"><call pos:start="119:13" pos:end="119:73"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="119:73">(<argument pos:start="119:20" pos:end="119:20"><expr pos:start="119:20" pos:end="119:20"><name pos:start="119:20" pos:end="119:20">s</name></expr></argument>, <argument pos:start="119:23" pos:end="119:34"><expr pos:start="119:23" pos:end="119:34"><name pos:start="119:23" pos:end="119:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:37" pos:end="119:72"><expr pos:start="119:37" pos:end="119:72"><literal type="string" pos:start="119:37" pos:end="119:72">"Unable to create response packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:23">return <expr pos:start="121:20" pos:end="121:22"><name pos:start="121:20" pos:end="121:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:23"><expr pos:start="125:9" pos:end="125:22"><name pos:start="125:9" pos:end="125:10">pp</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <name pos:start="125:14" pos:end="125:22"><name pos:start="125:14" pos:end="125:17">spkt</name><operator pos:start="125:18" pos:end="125:18">.</operator><name pos:start="125:19" pos:end="125:22">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:48"><expr pos:start="127:9" pos:end="127:47"><call pos:start="127:9" pos:end="127:47"><name pos:start="127:9" pos:end="127:27">ff_amf_write_string</name><argument_list pos:start="127:28" pos:end="127:47">(<argument pos:start="127:29" pos:end="127:31"><expr pos:start="127:29" pos:end="127:31"><operator pos:start="127:29" pos:end="127:29">&amp;</operator><name pos:start="127:30" pos:end="127:31">pp</name></expr></argument>, <argument pos:start="127:34" pos:end="127:46"><expr pos:start="127:34" pos:end="127:46"><literal type="string" pos:start="127:34" pos:end="127:46">"onFCPublish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="129:7" pos:end="145:5">else if <condition pos:start="129:15" pos:end="129:43">(<expr pos:start="129:16" pos:end="129:42"><operator pos:start="129:16" pos:end="129:16">!</operator><call pos:start="129:17" pos:end="129:42"><name pos:start="129:17" pos:end="129:22">strcmp</name><argument_list pos:start="129:23" pos:end="129:42">(<argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><name pos:start="129:24" pos:end="129:30">command</name></expr></argument>, <argument pos:start="129:33" pos:end="129:41"><expr pos:start="129:33" pos:end="129:41"><literal type="string" pos:start="129:33" pos:end="129:41">"publish"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:45" pos:end="145:5">{<block_content pos:start="131:9" pos:end="143:37">

        <expr_stmt pos:start="131:9" pos:end="131:29"><expr pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:28"><name pos:start="131:15" pos:end="131:25">write_begin</name><argument_list pos:start="131:26" pos:end="131:28">(<argument pos:start="131:27" pos:end="131:27"><expr pos:start="131:27" pos:end="131:27"><name pos:start="131:27" pos:end="131:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="135:23"><if pos:start="133:9" pos:end="135:23">if <condition pos:start="133:12" pos:end="133:20">(<expr pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">&lt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">0</literal></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:23"><block_content pos:start="135:13" pos:end="135:23">

            <return pos:start="135:13" pos:end="135:23">return <expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="line" pos:start="139:9" pos:end="139:49">// Send onStatus(NetStream.Publish.Start)</comment>

        <return pos:start="141:9" pos:end="143:37">return <expr pos:start="141:16" pos:end="143:36"><call pos:start="141:16" pos:end="143:36"><name pos:start="141:16" pos:end="141:27">write_status</name><argument_list pos:start="141:28" pos:end="143:36">(<argument pos:start="141:29" pos:end="141:29"><expr pos:start="141:29" pos:end="141:29"><name pos:start="141:29" pos:end="141:29">s</name></expr></argument>, <argument pos:start="141:32" pos:end="141:34"><expr pos:start="141:32" pos:end="141:34"><name pos:start="141:32" pos:end="141:34">pkt</name></expr></argument>, <argument pos:start="141:37" pos:end="141:61"><expr pos:start="141:37" pos:end="141:61"><literal type="string" pos:start="141:37" pos:end="141:61">"NetStream.Publish.Start"</literal></expr></argument>,

                           <argument pos:start="143:28" pos:end="143:35"><expr pos:start="143:28" pos:end="143:35"><name pos:start="143:28" pos:end="143:35">filename</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="159:5">else if <condition pos:start="145:15" pos:end="145:40">(<expr pos:start="145:16" pos:end="145:39"><operator pos:start="145:16" pos:end="145:16">!</operator><call pos:start="145:17" pos:end="145:39"><name pos:start="145:17" pos:end="145:22">strcmp</name><argument_list pos:start="145:23" pos:end="145:39">(<argument pos:start="145:24" pos:end="145:30"><expr pos:start="145:24" pos:end="145:30"><name pos:start="145:24" pos:end="145:30">command</name></expr></argument>, <argument pos:start="145:33" pos:end="145:38"><expr pos:start="145:33" pos:end="145:38"><literal type="string" pos:start="145:33" pos:end="145:38">"play"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:42" pos:end="159:5">{<block_content pos:start="147:9" pos:end="157:38">

        <expr_stmt pos:start="147:9" pos:end="147:29"><expr pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:28"><name pos:start="147:15" pos:end="147:25">write_begin</name><argument_list pos:start="147:26" pos:end="147:28">(<argument pos:start="147:27" pos:end="147:27"><expr pos:start="147:27" pos:end="147:27"><name pos:start="147:27" pos:end="147:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="151:23"><if pos:start="149:9" pos:end="151:23">if <condition pos:start="149:12" pos:end="149:20">(<expr pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:15">ret</name> <operator pos:start="149:17" pos:end="149:17">&lt;</operator> <literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:23"><block_content pos:start="151:13" pos:end="151:23">

            <return pos:start="151:13" pos:end="151:23">return <expr pos:start="151:20" pos:end="151:22"><name pos:start="151:20" pos:end="151:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:34"><expr pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:10">rt</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:17">state</name></name> <operator pos:start="153:19" pos:end="153:19">=</operator> <name pos:start="153:21" pos:end="153:33">STATE_SENDING</name></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="157:38">return <expr pos:start="155:16" pos:end="157:37"><call pos:start="155:16" pos:end="157:37"><name pos:start="155:16" pos:end="155:27">write_status</name><argument_list pos:start="155:28" pos:end="157:37">(<argument pos:start="155:29" pos:end="155:29"><expr pos:start="155:29" pos:end="155:29"><name pos:start="155:29" pos:end="155:29">s</name></expr></argument>, <argument pos:start="155:32" pos:end="155:34"><expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:34">pkt</name></expr></argument>, <argument pos:start="155:37" pos:end="155:58"><expr pos:start="155:37" pos:end="155:58"><literal type="string" pos:start="155:37" pos:end="155:58">"NetStream.Play.Start"</literal></expr></argument>,

                            <argument pos:start="157:29" pos:end="157:36"><expr pos:start="157:29" pos:end="157:36"><name pos:start="157:29" pos:end="157:36">filename</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <else pos:start="159:7" pos:end="199:5">else <block pos:start="159:12" pos:end="199:5">{<block_content pos:start="161:9" pos:end="197:9">

        <if_stmt pos:start="161:9" pos:end="171:9"><if pos:start="161:9" pos:end="171:9">if <condition pos:start="161:12" pos:end="165:73">(<expr pos:start="161:13" pos:end="165:72"><operator pos:start="161:13" pos:end="161:13">(</operator><name pos:start="161:14" pos:end="161:16">ret</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <call pos:start="161:20" pos:end="165:67"><name pos:start="161:20" pos:end="161:40">ff_rtmp_packet_create</name><argument_list pos:start="161:41" pos:end="165:67">(<argument pos:start="161:42" pos:end="161:46"><expr pos:start="161:42" pos:end="161:46"><operator pos:start="161:42" pos:end="161:42">&amp;</operator><name pos:start="161:43" pos:end="161:46">spkt</name></expr></argument>, <argument pos:start="161:49" pos:end="161:67"><expr pos:start="161:49" pos:end="161:67"><name pos:start="161:49" pos:end="161:67">RTMP_SYSTEM_CHANNEL</name></expr></argument>,

                                         <argument pos:start="163:42" pos:end="163:55"><expr pos:start="163:42" pos:end="163:55"><name pos:start="163:42" pos:end="163:55">RTMP_PT_INVOKE</name></expr></argument>, <argument pos:start="163:58" pos:end="163:58"><expr pos:start="163:58" pos:end="163:58"><literal type="number" pos:start="163:58" pos:end="163:58">0</literal></expr></argument>,

                                         <argument pos:start="165:42" pos:end="165:66"><expr pos:start="165:42" pos:end="165:66"><name pos:start="165:42" pos:end="165:66">RTMP_PKTDATA_DEFAULT_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="165:68" pos:end="165:68">)</operator> <operator pos:start="165:70" pos:end="165:70">&lt;</operator> <literal type="number" pos:start="165:72" pos:end="165:72">0</literal></expr>)</condition> <block pos:start="165:75" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:23">

            <expr_stmt pos:start="167:13" pos:end="167:74"><expr pos:start="167:13" pos:end="167:73"><call pos:start="167:13" pos:end="167:73"><name pos:start="167:13" pos:end="167:18">av_log</name><argument_list pos:start="167:19" pos:end="167:73">(<argument pos:start="167:20" pos:end="167:20"><expr pos:start="167:20" pos:end="167:20"><name pos:start="167:20" pos:end="167:20">s</name></expr></argument>, <argument pos:start="167:23" pos:end="167:34"><expr pos:start="167:23" pos:end="167:34"><name pos:start="167:23" pos:end="167:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:37" pos:end="167:72"><expr pos:start="167:37" pos:end="167:72"><literal type="string" pos:start="167:37" pos:end="167:72">"Unable to create response packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="169:13" pos:end="169:23">return <expr pos:start="169:20" pos:end="169:22"><name pos:start="169:20" pos:end="169:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:23"><expr pos:start="173:9" pos:end="173:22"><name pos:start="173:9" pos:end="173:10">pp</name> <operator pos:start="173:12" pos:end="173:12">=</operator> <name pos:start="173:14" pos:end="173:22"><name pos:start="173:14" pos:end="173:17">spkt</name><operator pos:start="173:18" pos:end="173:18">.</operator><name pos:start="173:19" pos:end="173:22">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:44"><expr pos:start="175:9" pos:end="175:43"><call pos:start="175:9" pos:end="175:43"><name pos:start="175:9" pos:end="175:27">ff_amf_write_string</name><argument_list pos:start="175:28" pos:end="175:43">(<argument pos:start="175:29" pos:end="175:31"><expr pos:start="175:29" pos:end="175:31"><operator pos:start="175:29" pos:end="175:29">&amp;</operator><name pos:start="175:30" pos:end="175:31">pp</name></expr></argument>, <argument pos:start="175:34" pos:end="175:42"><expr pos:start="175:34" pos:end="175:42"><literal type="string" pos:start="175:34" pos:end="175:42">"_result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:41"><expr pos:start="177:9" pos:end="177:40"><call pos:start="177:9" pos:end="177:40"><name pos:start="177:9" pos:end="177:27">ff_amf_write_number</name><argument_list pos:start="177:28" pos:end="177:40">(<argument pos:start="177:29" pos:end="177:31"><expr pos:start="177:29" pos:end="177:31"><operator pos:start="177:29" pos:end="177:29">&amp;</operator><name pos:start="177:30" pos:end="177:31">pp</name></expr></argument>, <argument pos:start="177:34" pos:end="177:39"><expr pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:39">seqnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:31"><expr pos:start="179:9" pos:end="179:30"><call pos:start="179:9" pos:end="179:30"><name pos:start="179:9" pos:end="179:25">ff_amf_write_null</name><argument_list pos:start="179:26" pos:end="179:30">(<argument pos:start="179:27" pos:end="179:29"><expr pos:start="179:27" pos:end="179:29"><operator pos:start="179:27" pos:end="179:27">&amp;</operator><name pos:start="179:28" pos:end="179:29">pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="181:9" pos:end="197:9"><if pos:start="181:9" pos:end="197:9">if <condition pos:start="181:12" pos:end="181:45">(<expr pos:start="181:13" pos:end="181:44"><operator pos:start="181:13" pos:end="181:13">!</operator><call pos:start="181:14" pos:end="181:44"><name pos:start="181:14" pos:end="181:19">strcmp</name><argument_list pos:start="181:20" pos:end="181:44">(<argument pos:start="181:21" pos:end="181:27"><expr pos:start="181:21" pos:end="181:27"><name pos:start="181:21" pos:end="181:27">command</name></expr></argument>, <argument pos:start="181:30" pos:end="181:43"><expr pos:start="181:30" pos:end="181:43"><literal type="string" pos:start="181:30" pos:end="181:43">"createStream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:47" pos:end="197:9">{<block_content pos:start="183:13" pos:end="189:54">

            <expr_stmt pos:start="183:13" pos:end="183:30"><expr pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:27"><name pos:start="183:13" pos:end="183:14">rt</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:27">nb_streamid</name></name><operator pos:start="183:28" pos:end="183:29">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="185:13" pos:end="187:34"><if pos:start="185:13" pos:end="187:34">if <condition pos:start="185:16" pos:end="185:61">(<expr pos:start="185:17" pos:end="185:60"><name pos:start="185:17" pos:end="185:31"><name pos:start="185:17" pos:end="185:18">rt</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:31">nb_streamid</name></name> <operator pos:start="185:33" pos:end="185:34">==</operator> <literal type="number" pos:start="185:36" pos:end="185:36">0</literal> <operator pos:start="185:38" pos:end="185:39">||</operator> <name pos:start="185:41" pos:end="185:55"><name pos:start="185:41" pos:end="185:42">rt</name><operator pos:start="185:43" pos:end="185:44">-&gt;</operator><name pos:start="185:45" pos:end="185:55">nb_streamid</name></name> <operator pos:start="185:57" pos:end="185:58">==</operator> <literal type="number" pos:start="185:60" pos:end="185:60">2</literal></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:34"><block_content pos:start="187:17" pos:end="187:34">

                <expr_stmt pos:start="187:17" pos:end="187:34"><expr pos:start="187:17" pos:end="187:33"><name pos:start="187:17" pos:end="187:31"><name pos:start="187:17" pos:end="187:18">rt</name><operator pos:start="187:19" pos:end="187:20">-&gt;</operator><name pos:start="187:21" pos:end="187:31">nb_streamid</name></name><operator pos:start="187:32" pos:end="187:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="187:36" pos:end="187:68">/* Values 0 and 2 are reserved */</comment>

            <expr_stmt pos:start="189:13" pos:end="189:54"><expr pos:start="189:13" pos:end="189:53"><call pos:start="189:13" pos:end="189:53"><name pos:start="189:13" pos:end="189:31">ff_amf_write_number</name><argument_list pos:start="189:32" pos:end="189:53">(<argument pos:start="189:33" pos:end="189:35"><expr pos:start="189:33" pos:end="189:35"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:35">pp</name></expr></argument>, <argument pos:start="189:38" pos:end="189:52"><expr pos:start="189:38" pos:end="189:52"><name pos:start="189:38" pos:end="189:52"><name pos:start="189:38" pos:end="189:39">rt</name><operator pos:start="189:40" pos:end="189:41">-&gt;</operator><name pos:start="189:42" pos:end="189:52">nb_streamid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="191:13" pos:end="195:65">/* By now we don't control which streams are removed in

             * deleteStream. There is no stream creation control

             * if a client creates more than 2^32 - 2 streams. */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:31"><expr pos:start="201:5" pos:end="201:30"><name pos:start="201:5" pos:end="201:13"><name pos:start="201:5" pos:end="201:8">spkt</name><operator pos:start="201:9" pos:end="201:9">.</operator><name pos:start="201:10" pos:end="201:13">size</name></name> <operator pos:start="201:15" pos:end="201:15">=</operator> <name pos:start="201:17" pos:end="201:18">pp</name> <operator pos:start="201:20" pos:end="201:20">-</operator> <name pos:start="201:22" pos:end="201:30"><name pos:start="201:22" pos:end="201:25">spkt</name><operator pos:start="201:26" pos:end="201:26">.</operator><name pos:start="201:27" pos:end="201:30">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="205:70"><expr pos:start="203:5" pos:end="205:69"><name pos:start="203:5" pos:end="203:7">ret</name> <operator pos:start="203:9" pos:end="203:9">=</operator> <call pos:start="203:11" pos:end="205:69"><name pos:start="203:11" pos:end="203:30">ff_rtmp_packet_write</name><argument_list pos:start="203:31" pos:end="205:69">(<argument pos:start="203:32" pos:end="203:41"><expr pos:start="203:32" pos:end="203:41"><name pos:start="203:32" pos:end="203:41"><name pos:start="203:32" pos:end="203:33">rt</name><operator pos:start="203:34" pos:end="203:35">-&gt;</operator><name pos:start="203:36" pos:end="203:41">stream</name></name></expr></argument>, <argument pos:start="203:44" pos:end="203:48"><expr pos:start="203:44" pos:end="203:48"><operator pos:start="203:44" pos:end="203:44">&amp;</operator><name pos:start="203:45" pos:end="203:48">spkt</name></expr></argument>, <argument pos:start="203:51" pos:end="203:68"><expr pos:start="203:51" pos:end="203:68"><name pos:start="203:51" pos:end="203:68"><name pos:start="203:51" pos:end="203:52">rt</name><operator pos:start="203:53" pos:end="203:54">-&gt;</operator><name pos:start="203:55" pos:end="203:68">out_chunk_size</name></name></expr></argument>,

                               <argument pos:start="205:32" pos:end="205:47"><expr pos:start="205:32" pos:end="205:47"><operator pos:start="205:32" pos:end="205:32">&amp;</operator><name pos:start="205:33" pos:end="205:47"><name pos:start="205:33" pos:end="205:34">rt</name><operator pos:start="205:35" pos:end="205:36">-&gt;</operator><name pos:start="205:37" pos:end="205:44">prev_pkt</name><index pos:start="205:45" pos:end="205:47">[<expr pos:start="205:46" pos:end="205:46"><literal type="number" pos:start="205:46" pos:end="205:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="205:50" pos:end="205:68"><expr pos:start="205:50" pos:end="205:68"><operator pos:start="205:50" pos:end="205:50">&amp;</operator><name pos:start="205:51" pos:end="205:68"><name pos:start="205:51" pos:end="205:52">rt</name><operator pos:start="205:53" pos:end="205:54">-&gt;</operator><name pos:start="205:55" pos:end="205:65">nb_prev_pkt</name><index pos:start="205:66" pos:end="205:68">[<expr pos:start="205:67" pos:end="205:67"><literal type="number" pos:start="205:67" pos:end="205:67">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:34"><expr pos:start="207:5" pos:end="207:33"><call pos:start="207:5" pos:end="207:33"><name pos:start="207:5" pos:end="207:26">ff_rtmp_packet_destroy</name><argument_list pos:start="207:27" pos:end="207:33">(<argument pos:start="207:28" pos:end="207:32"><expr pos:start="207:28" pos:end="207:32"><operator pos:start="207:28" pos:end="207:28">&amp;</operator><name pos:start="207:29" pos:end="207:32">spkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="209:5" pos:end="209:15">return <expr pos:start="209:12" pos:end="209:14"><name pos:start="209:12" pos:end="209:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
