<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20216.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">pcistg_service_call</name><parameter_list pos:start="1:24" pos:end="1:61">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:48">r1</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:57">uint8_t</name></type> <name pos:start="1:59" pos:end="1:60">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:1">{<block_content pos:start="5:5" pos:end="179:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:19">offset</name></decl>, <decl pos:start="7:22" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:25">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">S390PCIBusDevice</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:17">pcias</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:36"><expr pos:start="19:5" pos:end="19:35"><call pos:start="19:5" pos:end="19:35"><name pos:start="19:5" pos:end="19:25">cpu_synchronize_state</name><argument_list pos:start="19:26" pos:end="19:35">(<argument pos:start="19:27" pos:end="19:34"><expr pos:start="19:27" pos:end="19:34"><call pos:start="19:27" pos:end="19:34"><name pos:start="19:27" pos:end="19:29">CPU</name><argument_list pos:start="19:30" pos:end="19:34">(<argument pos:start="19:31" pos:end="19:33"><expr pos:start="19:31" pos:end="19:33"><name pos:start="19:31" pos:end="19:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:40">(<expr pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:11">env</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:16">psw</name><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:21">mask</name></name> <operator pos:start="23:23" pos:end="23:23">&amp;</operator> <name pos:start="23:25" pos:end="23:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="23:42" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:50"><expr pos:start="25:9" pos:end="25:49"><call pos:start="25:9" pos:end="25:49"><name pos:start="25:9" pos:end="25:25">program_interrupt</name><argument_list pos:start="25:26" pos:end="25:49">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">env</name></expr></argument>, <argument pos:start="25:32" pos:end="25:45"><expr pos:start="25:32" pos:end="25:45"><name pos:start="25:32" pos:end="25:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="25:48" pos:end="25:48"><expr pos:start="25:48" pos:end="25:48"><literal type="number" pos:start="25:48" pos:end="25:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:10">r2</name> <operator pos:start="33:12" pos:end="33:12">&amp;</operator> <literal type="number" pos:start="33:14" pos:end="33:16">0x1</literal></expr>)</condition> <block pos:start="33:19" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:17">

        <expr_stmt pos:start="35:9" pos:end="35:53"><expr pos:start="35:9" pos:end="35:52"><call pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:25">program_interrupt</name><argument_list pos:start="35:26" pos:end="35:52">(<argument pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">env</name></expr></argument>, <argument pos:start="35:32" pos:end="35:48"><expr pos:start="35:32" pos:end="35:48"><name pos:start="35:32" pos:end="35:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="35:51" pos:end="35:51"><expr pos:start="35:51" pos:end="35:51"><literal type="number" pos:start="35:51" pos:end="35:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:6">fh</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <name pos:start="43:10" pos:end="43:22"><name pos:start="43:10" pos:end="43:12">env</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:18">regs</name><index pos:start="43:19" pos:end="43:22">[<expr pos:start="43:20" pos:end="43:21"><name pos:start="43:20" pos:end="43:21">r2</name></expr>]</index></name> <operator pos:start="43:24" pos:end="43:25">&gt;&gt;</operator> <literal type="number" pos:start="43:27" pos:end="43:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:9">pcias</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:26"><name pos:start="45:14" pos:end="45:16">env</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:22">regs</name><index pos:start="45:23" pos:end="45:26">[<expr pos:start="45:24" pos:end="45:25"><name pos:start="45:24" pos:end="45:25">r2</name></expr>]</index></name> <operator pos:start="45:28" pos:end="45:29">&gt;&gt;</operator> <literal type="number" pos:start="45:31" pos:end="45:32">16</literal><operator pos:start="45:33" pos:end="45:33">)</operator> <operator pos:start="45:35" pos:end="45:35">&amp;</operator> <literal type="number" pos:start="45:37" pos:end="45:39">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:7">len</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <name pos:start="47:11" pos:end="47:23"><name pos:start="47:11" pos:end="47:13">env</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:19">regs</name><index pos:start="47:20" pos:end="47:23">[<expr pos:start="47:21" pos:end="47:22"><name pos:start="47:21" pos:end="47:22">r2</name></expr>]</index></name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <literal type="number" pos:start="47:27" pos:end="47:29">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:10">offset</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:30"><name pos:start="49:14" pos:end="49:16">env</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:22">regs</name><index pos:start="49:23" pos:end="49:30">[<expr pos:start="49:24" pos:end="49:29"><name pos:start="49:24" pos:end="49:25">r2</name> <operator pos:start="49:27" pos:end="49:27">+</operator> <literal type="number" pos:start="49:29" pos:end="49:29">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:9">pbdev</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="53:36" pos:end="53:39">(<argument pos:start="53:37" pos:end="53:38"><expr pos:start="53:37" pos:end="53:38"><name pos:start="53:37" pos:end="53:38">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:48">(<expr pos:start="55:9" pos:end="55:47"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:14">pbdev</name> <operator pos:start="55:16" pos:end="55:17">||</operator> <operator pos:start="55:19" pos:end="55:19">!</operator><operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:29"><name pos:start="55:21" pos:end="55:25">pbdev</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:29">fh</name></name> <operator pos:start="55:31" pos:end="55:31">&amp;</operator> <name pos:start="55:33" pos:end="55:46">FH_MASK_ENABLE</name><operator pos:start="55:47" pos:end="55:47">)</operator></expr>)</condition> <block pos:start="55:50" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:17">

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><call pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:15">DPRINTF</name><argument_list pos:start="57:16" pos:end="57:38">(<argument pos:start="57:17" pos:end="57:37"><expr pos:start="57:17" pos:end="57:37"><literal type="string" pos:start="57:17" pos:end="57:37">"pcistg no pci dev\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><call pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:13">setcc</name><argument_list pos:start="59:14" pos:end="59:44">(<argument pos:start="59:15" pos:end="59:17"><expr pos:start="59:15" pos:end="59:17"><name pos:start="59:15" pos:end="59:17">cpu</name></expr></argument>, <argument pos:start="59:20" pos:end="59:43"><expr pos:start="59:20" pos:end="59:43"><name pos:start="59:20" pos:end="59:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:17">return <expr pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:13">pbdev</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:28">lgstg_blocked</name></name></expr>)</condition> <block pos:start="67:31" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:17">

        <expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><call pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:13">setcc</name><argument_list pos:start="69:14" pos:end="69:35">(<argument pos:start="69:15" pos:end="69:17"><expr pos:start="69:15" pos:end="69:17"><name pos:start="69:15" pos:end="69:17">cpu</name></expr></argument>, <argument pos:start="69:20" pos:end="69:34"><expr pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><call pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:28">s390_set_status_code</name><argument_list pos:start="71:29" pos:end="71:58">(<argument pos:start="71:30" pos:end="71:32"><expr pos:start="71:30" pos:end="71:32"><name pos:start="71:30" pos:end="71:32">env</name></expr></argument>, <argument pos:start="71:35" pos:end="71:36"><expr pos:start="71:35" pos:end="71:36"><name pos:start="71:35" pos:end="71:36">r2</name></expr></argument>, <argument pos:start="71:39" pos:end="71:57"><expr pos:start="71:39" pos:end="71:57"><name pos:start="71:39" pos:end="71:57">ZPCI_PCI_ST_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:17">return <expr pos:start="73:16" pos:end="73:16"><literal type="number" pos:start="73:16" pos:end="73:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:25"><expr pos:start="79:5" pos:end="79:24"><name pos:start="79:5" pos:end="79:8">data</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <name pos:start="79:12" pos:end="79:24"><name pos:start="79:12" pos:end="79:14">env</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:20">regs</name><index pos:start="79:21" pos:end="79:24">[<expr pos:start="79:22" pos:end="79:23"><name pos:start="79:22" pos:end="79:23">r1</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="173:5"><if pos:start="81:5" pos:end="113:5">if <condition pos:start="81:8" pos:end="81:18">(<expr pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:13">pcias</name> <operator pos:start="81:15" pos:end="81:15">&lt;</operator> <literal type="number" pos:start="81:17" pos:end="81:17">6</literal></expr>)</condition> <block pos:start="81:20" pos:end="113:5">{<block_content pos:start="83:9" pos:end="111:61">

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:39">(<expr pos:start="83:13" pos:end="83:38"><operator pos:start="83:13" pos:end="83:13">(</operator><literal type="number" pos:start="83:14" pos:end="83:16">8</literal> <operator pos:start="83:16" pos:end="83:16">-</operator> <operator pos:start="83:18" pos:end="83:18">(</operator><name pos:start="83:19" pos:end="83:24">offset</name> <operator pos:start="83:26" pos:end="83:26">&amp;</operator> <literal type="number" pos:start="83:28" pos:end="83:30">0x7</literal><operator pos:start="83:31" pos:end="83:31">)</operator><operator pos:start="83:32" pos:end="83:32">)</operator> <operator pos:start="83:34" pos:end="83:34">&lt;</operator> <name pos:start="83:36" pos:end="83:38">len</name></expr>)</condition> <block pos:start="83:41" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:21">

            <expr_stmt pos:start="85:13" pos:end="85:51"><expr pos:start="85:13" pos:end="85:50"><call pos:start="85:13" pos:end="85:50"><name pos:start="85:13" pos:end="85:29">program_interrupt</name><argument_list pos:start="85:30" pos:end="85:50">(<argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">env</name></expr></argument>, <argument pos:start="85:36" pos:end="85:46"><expr pos:start="85:36" pos:end="85:46"><name pos:start="85:36" pos:end="85:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><literal type="number" pos:start="85:49" pos:end="85:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:21">return <expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:25"><decl pos:start="91:9" pos:end="91:24"><type pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:20">MemoryRegion</name> <modifier pos:start="91:22" pos:end="91:22">*</modifier></type><name pos:start="91:23" pos:end="91:24">mr</name></decl>;</decl_stmt>

        <if_stmt pos:start="93:9" pos:end="105:9"><if pos:start="93:9" pos:end="101:9">if <condition pos:start="93:12" pos:end="93:44">(<expr pos:start="93:13" pos:end="93:43"><call pos:start="93:13" pos:end="93:43"><name pos:start="93:13" pos:end="93:21">trap_msix</name><argument_list pos:start="93:22" pos:end="93:43">(<argument pos:start="93:23" pos:end="93:27"><expr pos:start="93:23" pos:end="93:27"><name pos:start="93:23" pos:end="93:27">pbdev</name></expr></argument>, <argument pos:start="93:30" pos:end="93:35"><expr pos:start="93:30" pos:end="93:35"><name pos:start="93:30" pos:end="93:35">offset</name></expr></argument>, <argument pos:start="93:38" pos:end="93:42"><expr pos:start="93:38" pos:end="93:42"><name pos:start="93:38" pos:end="93:42">pcias</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:46" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:66">

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:18">offset</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:27">offset</name> <operator pos:start="95:29" pos:end="95:29">-</operator> <name pos:start="95:31" pos:end="95:54"><name pos:start="95:31" pos:end="95:35">pbdev</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:41">msix</name><operator pos:start="95:42" pos:end="95:42">.</operator><name pos:start="95:43" pos:end="95:54">table_offset</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:47"><expr pos:start="97:13" pos:end="97:46"><name pos:start="97:13" pos:end="97:14">mr</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <operator pos:start="97:18" pos:end="97:18">&amp;</operator><name pos:start="97:19" pos:end="97:46"><name pos:start="97:19" pos:end="97:23">pbdev</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:29">pdev</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:46">msix_table_mmio</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:66"><expr pos:start="99:13" pos:end="99:65"><call pos:start="99:13" pos:end="99:65"><name pos:start="99:13" pos:end="99:38">update_msix_table_msg_data</name><argument_list pos:start="99:39" pos:end="99:65">(<argument pos:start="99:40" pos:end="99:44"><expr pos:start="99:40" pos:end="99:44"><name pos:start="99:40" pos:end="99:44">pbdev</name></expr></argument>, <argument pos:start="99:47" pos:end="99:52"><expr pos:start="99:47" pos:end="99:52"><name pos:start="99:47" pos:end="99:52">offset</name></expr></argument>, <argument pos:start="99:55" pos:end="99:59"><expr pos:start="99:55" pos:end="99:59"><operator pos:start="99:55" pos:end="99:55">&amp;</operator><name pos:start="99:56" pos:end="99:59">data</name></expr></argument>, <argument pos:start="99:62" pos:end="99:64"><expr pos:start="99:62" pos:end="99:64"><name pos:start="99:62" pos:end="99:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="105:9">else <block pos:start="101:16" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:55">

            <expr_stmt pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:54"><name pos:start="103:13" pos:end="103:14">mr</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <name pos:start="103:18" pos:end="103:47"><name pos:start="103:18" pos:end="103:22">pbdev</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:28">pdev</name><operator pos:start="103:29" pos:end="103:30">-&gt;</operator><name pos:start="103:31" pos:end="103:40">io_regions</name><index pos:start="103:41" pos:end="103:47">[<expr pos:start="103:42" pos:end="103:46"><name pos:start="103:42" pos:end="103:46">pcias</name></expr>]</index></name><operator pos:start="103:48" pos:end="103:48">.</operator><name pos:start="103:49" pos:end="103:54">memory</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="111:61"><expr pos:start="109:9" pos:end="111:60"><call pos:start="109:9" pos:end="111:60"><name pos:start="109:9" pos:end="109:36">memory_region_dispatch_write</name><argument_list pos:start="109:37" pos:end="111:60">(<argument pos:start="109:38" pos:end="109:39"><expr pos:start="109:38" pos:end="109:39"><name pos:start="109:38" pos:end="109:39">mr</name></expr></argument>, <argument pos:start="109:42" pos:end="109:47"><expr pos:start="109:42" pos:end="109:47"><name pos:start="109:42" pos:end="109:47">offset</name></expr></argument>, <argument pos:start="109:50" pos:end="109:53"><expr pos:start="109:50" pos:end="109:53"><name pos:start="109:50" pos:end="109:53">data</name></expr></argument>, <argument pos:start="109:56" pos:end="109:58"><expr pos:start="109:56" pos:end="109:58"><name pos:start="109:56" pos:end="109:58">len</name></expr></argument>,

                                     <argument pos:start="111:38" pos:end="111:59"><expr pos:start="111:38" pos:end="111:59"><name pos:start="111:38" pos:end="111:59">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="113:7" pos:end="163:5">else if <condition pos:start="113:15" pos:end="113:27">(<expr pos:start="113:16" pos:end="113:26"><name pos:start="113:16" pos:end="113:20">pcias</name> <operator pos:start="113:22" pos:end="113:23">==</operator> <literal type="number" pos:start="113:25" pos:end="113:26">15</literal></expr>)</condition> <block pos:start="113:29" pos:end="163:5">{<block_content pos:start="115:9" pos:end="161:48">

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:39">(<expr pos:start="115:13" pos:end="115:38"><operator pos:start="115:13" pos:end="115:13">(</operator><literal type="number" pos:start="115:14" pos:end="115:16">4</literal> <operator pos:start="115:16" pos:end="115:16">-</operator> <operator pos:start="115:18" pos:end="115:18">(</operator><name pos:start="115:19" pos:end="115:24">offset</name> <operator pos:start="115:26" pos:end="115:26">&amp;</operator> <literal type="number" pos:start="115:28" pos:end="115:30">0x3</literal><operator pos:start="115:31" pos:end="115:31">)</operator><operator pos:start="115:32" pos:end="115:32">)</operator> <operator pos:start="115:34" pos:end="115:34">&lt;</operator> <name pos:start="115:36" pos:end="115:38">len</name></expr>)</condition> <block pos:start="115:41" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:21">

            <expr_stmt pos:start="117:13" pos:end="117:51"><expr pos:start="117:13" pos:end="117:50"><call pos:start="117:13" pos:end="117:50"><name pos:start="117:13" pos:end="117:29">program_interrupt</name><argument_list pos:start="117:30" pos:end="117:50">(<argument pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:33">env</name></expr></argument>, <argument pos:start="117:36" pos:end="117:46"><expr pos:start="117:36" pos:end="117:46"><name pos:start="117:36" pos:end="117:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="117:49" pos:end="117:49"><expr pos:start="117:49" pos:end="117:49"><literal type="number" pos:start="117:49" pos:end="117:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:21">return <expr pos:start="119:20" pos:end="119:20"><literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="123:9" pos:end="153:9">switch <condition pos:start="123:16" pos:end="123:20">(<expr pos:start="123:17" pos:end="123:19"><name pos:start="123:17" pos:end="123:19">len</name></expr>)</condition> <block pos:start="123:22" pos:end="153:9">{<block_content pos:start="125:9" pos:end="151:21">

        <case pos:start="125:9" pos:end="125:15">case <expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr>:</case>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <case pos:start="129:9" pos:end="129:15">case <expr pos:start="129:14" pos:end="129:14"><literal type="number" pos:start="129:14" pos:end="129:14">2</literal></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:33"><expr pos:start="131:13" pos:end="131:32"><name pos:start="131:13" pos:end="131:16">data</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <call pos:start="131:20" pos:end="131:32"><name pos:start="131:20" pos:end="131:26">bswap16</name><argument_list pos:start="131:27" pos:end="131:32">(<argument pos:start="131:28" pos:end="131:31"><expr pos:start="131:28" pos:end="131:31"><name pos:start="131:28" pos:end="131:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:15">case <expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">4</literal></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:33"><expr pos:start="137:13" pos:end="137:32"><name pos:start="137:13" pos:end="137:16">data</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <call pos:start="137:20" pos:end="137:32"><name pos:start="137:20" pos:end="137:26">bswap32</name><argument_list pos:start="137:27" pos:end="137:32">(<argument pos:start="137:28" pos:end="137:31"><expr pos:start="137:28" pos:end="137:31"><name pos:start="137:28" pos:end="137:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <case pos:start="141:9" pos:end="141:15">case <expr pos:start="141:14" pos:end="141:14"><literal type="number" pos:start="141:14" pos:end="141:14">8</literal></expr>:</case>

            <expr_stmt pos:start="143:13" pos:end="143:33"><expr pos:start="143:13" pos:end="143:32"><name pos:start="143:13" pos:end="143:16">data</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <call pos:start="143:20" pos:end="143:32"><name pos:start="143:20" pos:end="143:26">bswap64</name><argument_list pos:start="143:27" pos:end="143:32">(<argument pos:start="143:28" pos:end="143:31"><expr pos:start="143:28" pos:end="143:31"><name pos:start="143:28" pos:end="143:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        <default pos:start="147:9" pos:end="147:16">default:</default>

            <expr_stmt pos:start="149:13" pos:end="149:51"><expr pos:start="149:13" pos:end="149:50"><call pos:start="149:13" pos:end="149:50"><name pos:start="149:13" pos:end="149:29">program_interrupt</name><argument_list pos:start="149:30" pos:end="149:50">(<argument pos:start="149:31" pos:end="149:33"><expr pos:start="149:31" pos:end="149:33"><name pos:start="149:31" pos:end="149:33">env</name></expr></argument>, <argument pos:start="149:36" pos:end="149:46"><expr pos:start="149:36" pos:end="149:46"><name pos:start="149:36" pos:end="149:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="149:49" pos:end="149:49"><expr pos:start="149:49" pos:end="149:49"><literal type="number" pos:start="149:49" pos:end="149:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:21">return <expr pos:start="151:20" pos:end="151:20"><literal type="number" pos:start="151:20" pos:end="151:20">0</literal></expr>;</return>

        </block_content>}</block></switch>



        <expr_stmt pos:start="157:9" pos:end="161:48"><expr pos:start="157:9" pos:end="161:47"><call pos:start="157:9" pos:end="161:47"><name pos:start="157:9" pos:end="157:36">pci_host_config_write_common</name><argument_list pos:start="157:37" pos:end="161:47">(<argument pos:start="157:38" pos:end="157:48"><expr pos:start="157:38" pos:end="157:48"><name pos:start="157:38" pos:end="157:48"><name pos:start="157:38" pos:end="157:42">pbdev</name><operator pos:start="157:43" pos:end="157:44">-&gt;</operator><name pos:start="157:45" pos:end="157:48">pdev</name></name></expr></argument>, <argument pos:start="157:51" pos:end="157:56"><expr pos:start="157:51" pos:end="157:56"><name pos:start="157:51" pos:end="157:56">offset</name></expr></argument>,

                                     <argument pos:start="159:38" pos:end="159:65"><expr pos:start="159:38" pos:end="159:65"><call pos:start="159:38" pos:end="159:65"><name pos:start="159:38" pos:end="159:52">pci_config_size</name><argument_list pos:start="159:53" pos:end="159:65">(<argument pos:start="159:54" pos:end="159:64"><expr pos:start="159:54" pos:end="159:64"><name pos:start="159:54" pos:end="159:64"><name pos:start="159:54" pos:end="159:58">pbdev</name><operator pos:start="159:59" pos:end="159:60">-&gt;</operator><name pos:start="159:61" pos:end="159:64">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="161:38" pos:end="161:41"><expr pos:start="161:38" pos:end="161:41"><name pos:start="161:38" pos:end="161:41">data</name></expr></argument>, <argument pos:start="161:44" pos:end="161:46"><expr pos:start="161:44" pos:end="161:46"><name pos:start="161:44" pos:end="161:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="173:5">else <block pos:start="163:12" pos:end="173:5">{<block_content pos:start="165:9" pos:end="171:17">

        <expr_stmt pos:start="165:9" pos:end="165:42"><expr pos:start="165:9" pos:end="165:41"><call pos:start="165:9" pos:end="165:41"><name pos:start="165:9" pos:end="165:15">DPRINTF</name><argument_list pos:start="165:16" pos:end="165:41">(<argument pos:start="165:17" pos:end="165:40"><expr pos:start="165:17" pos:end="165:40"><literal type="string" pos:start="165:17" pos:end="165:40">"pcistg invalid space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:36"><expr pos:start="167:9" pos:end="167:35"><call pos:start="167:9" pos:end="167:35"><name pos:start="167:9" pos:end="167:13">setcc</name><argument_list pos:start="167:14" pos:end="167:35">(<argument pos:start="167:15" pos:end="167:17"><expr pos:start="167:15" pos:end="167:17"><name pos:start="167:15" pos:end="167:17">cpu</name></expr></argument>, <argument pos:start="167:20" pos:end="167:34"><expr pos:start="167:20" pos:end="167:34"><name pos:start="167:20" pos:end="167:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:60"><expr pos:start="169:9" pos:end="169:59"><call pos:start="169:9" pos:end="169:59"><name pos:start="169:9" pos:end="169:28">s390_set_status_code</name><argument_list pos:start="169:29" pos:end="169:59">(<argument pos:start="169:30" pos:end="169:32"><expr pos:start="169:30" pos:end="169:32"><name pos:start="169:30" pos:end="169:32">env</name></expr></argument>, <argument pos:start="169:35" pos:end="169:36"><expr pos:start="169:35" pos:end="169:36"><name pos:start="169:35" pos:end="169:36">r2</name></expr></argument>, <argument pos:start="169:39" pos:end="169:58"><expr pos:start="169:39" pos:end="169:58"><name pos:start="169:39" pos:end="169:58">ZPCI_PCI_ST_INVAL_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="171:9" pos:end="171:17">return <expr pos:start="171:16" pos:end="171:16"><literal type="number" pos:start="171:16" pos:end="171:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:31"><expr pos:start="177:5" pos:end="177:30"><call pos:start="177:5" pos:end="177:30"><name pos:start="177:5" pos:end="177:9">setcc</name><argument_list pos:start="177:10" pos:end="177:30">(<argument pos:start="177:11" pos:end="177:13"><expr pos:start="177:11" pos:end="177:13"><name pos:start="177:11" pos:end="177:13">cpu</name></expr></argument>, <argument pos:start="177:16" pos:end="177:29"><expr pos:start="177:16" pos:end="177:29"><name pos:start="177:16" pos:end="177:29">ZPCI_PCI_LS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="179:5" pos:end="179:13">return <expr pos:start="179:12" pos:end="179:12"><literal type="number" pos:start="179:12" pos:end="179:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
