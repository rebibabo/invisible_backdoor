<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4012.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">mpeg1_decode_sequence</name><parameter_list pos:start="1:33" pos:end="3:66">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><specifier pos:start="3:34" pos:end="3:38">const</specifier> <name pos:start="3:40" pos:end="3:46">uint8_t</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:51">buf</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:65"><decl pos:start="3:54" pos:end="3:65"><type pos:start="3:54" pos:end="3:65"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:65">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:13">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">Mpeg1Context</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">s1</name>  <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MpegEncContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:41">= <expr pos:start="9:25" pos:end="9:41"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:27">s1</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:41">mpeg_enc_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">width</name></decl>, <decl pos:start="11:16" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:21">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">v</name></decl>, <decl pos:start="13:15" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:15">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><call pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:17">init_get_bits</name><argument_list pos:start="17:18" pos:end="17:44">(<argument pos:start="17:19" pos:end="17:24"><expr pos:start="17:19" pos:end="17:24"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:24"><name pos:start="17:20" pos:end="17:20">s</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:24">gb</name></name></expr></argument>, <argument pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:29"><name pos:start="17:27" pos:end="17:29">buf</name></expr></argument>, <argument pos:start="17:32" pos:end="17:43"><expr pos:start="17:32" pos:end="17:43"><name pos:start="17:32" pos:end="17:39">buf_size</name> <operator pos:start="17:41" pos:end="17:41">*</operator> <literal type="number" pos:start="17:43" pos:end="17:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:9">width</name>  <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:33"><name pos:start="21:14" pos:end="21:21">get_bits</name><argument_list pos:start="21:22" pos:end="21:33">(<argument pos:start="21:23" pos:end="21:28"><expr pos:start="21:23" pos:end="21:28"><operator pos:start="21:23" pos:end="21:23">&amp;</operator><name pos:start="21:24" pos:end="21:28"><name pos:start="21:24" pos:end="21:24">s</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:28">gb</name></name></expr></argument>, <argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><literal type="number" pos:start="21:31" pos:end="21:32">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:10">height</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:33"><name pos:start="23:14" pos:end="23:21">get_bits</name><argument_list pos:start="23:22" pos:end="23:33">(<argument pos:start="23:23" pos:end="23:28"><expr pos:start="23:23" pos:end="23:28"><operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:28"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:28">gb</name></name></expr></argument>, <argument pos:start="23:31" pos:end="23:32"><expr pos:start="23:31" pos:end="23:32"><literal type="number" pos:start="23:31" pos:end="23:32">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:34">(<expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:13">width</name> <operator pos:start="25:15" pos:end="25:16">==</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal> <operator pos:start="25:20" pos:end="25:21">||</operator> <name pos:start="25:23" pos:end="25:28">height</name> <operator pos:start="25:30" pos:end="25:31">==</operator> <literal type="number" pos:start="25:33" pos:end="25:33">0</literal></expr>)</condition> <block pos:start="25:36" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:39">

        <expr_stmt pos:start="27:9" pos:end="29:63"><expr pos:start="27:9" pos:end="29:62"><call pos:start="27:9" pos:end="29:62"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:62">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:36"><expr pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="29:16" pos:end="29:61"><expr pos:start="29:16" pos:end="29:61"><literal type="string" pos:start="29:16" pos:end="29:61">"Invalid horizontal or vertical size value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:39"><if pos:start="31:9" pos:end="33:39">if <condition pos:start="31:12" pos:end="31:73">(<expr pos:start="31:13" pos:end="31:72"><name pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:17">avctx</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:34">err_recognition</name></name> <operator pos:start="31:36" pos:end="31:36">&amp;</operator> <operator pos:start="31:38" pos:end="31:38">(</operator><name pos:start="31:39" pos:end="31:53">AV_EF_BITSTREAM</name> <operator pos:start="31:55" pos:end="31:55">|</operator> <name pos:start="31:57" pos:end="31:71">AV_EF_COMPLIANT</name><operator pos:start="31:72" pos:end="31:72">)</operator></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:24">aspect_ratio_info</name></name> <operator pos:start="37:26" pos:end="37:26">=</operator> <call pos:start="37:28" pos:end="37:46"><name pos:start="37:28" pos:end="37:35">get_bits</name><argument_list pos:start="37:36" pos:end="37:46">(<argument pos:start="37:37" pos:end="37:42"><expr pos:start="37:37" pos:end="37:42"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:42"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:42">gb</name></name></expr></argument>, <argument pos:start="37:45" pos:end="37:45"><expr pos:start="37:45" pos:end="37:45"><literal type="number" pos:start="37:45" pos:end="37:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:34">(<expr pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:28">aspect_ratio_info</name></name> <operator pos:start="39:30" pos:end="39:31">==</operator> <literal type="number" pos:start="39:33" pos:end="39:33">0</literal></expr>)</condition> <block pos:start="39:36" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:39">

        <expr_stmt pos:start="41:9" pos:end="41:76"><expr pos:start="41:9" pos:end="41:75"><call pos:start="41:9" pos:end="41:75"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:75">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:74"><expr pos:start="41:37" pos:end="41:74"><literal type="string" pos:start="41:37" pos:end="41:74">"aspect ratio has forbidden 0 value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:39"><if pos:start="43:9" pos:end="45:39">if <condition pos:start="43:12" pos:end="43:73">(<expr pos:start="43:13" pos:end="43:72"><name pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:17">avctx</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:34">err_recognition</name></name> <operator pos:start="43:36" pos:end="43:36">&amp;</operator> <operator pos:start="43:38" pos:end="43:38">(</operator><name pos:start="43:39" pos:end="43:53">AV_EF_BITSTREAM</name> <operator pos:start="43:55" pos:end="43:55">|</operator> <name pos:start="43:57" pos:end="43:71">AV_EF_COMPLIANT</name><operator pos:start="43:72" pos:end="43:72">)</operator></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:39"><block_content pos:start="45:13" pos:end="45:39">

            <return pos:start="45:13" pos:end="45:39">return <expr pos:start="45:20" pos:end="45:38"><name pos:start="45:20" pos:end="45:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:46"><expr pos:start="49:5" pos:end="49:45"><name pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:23">frame_rate_index</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <call pos:start="49:27" pos:end="49:45"><name pos:start="49:27" pos:end="49:34">get_bits</name><argument_list pos:start="49:35" pos:end="49:45">(<argument pos:start="49:36" pos:end="49:41"><expr pos:start="49:36" pos:end="49:41"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:41"><name pos:start="49:37" pos:end="49:37">s</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:41">gb</name></name></expr></argument>, <argument pos:start="49:44" pos:end="49:44"><expr pos:start="49:44" pos:end="49:44"><literal type="number" pos:start="49:44" pos:end="49:44">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:61">(<expr pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:27">frame_rate_index</name></name> <operator pos:start="51:29" pos:end="51:30">==</operator> <literal type="number" pos:start="51:32" pos:end="51:32">0</literal> <operator pos:start="51:34" pos:end="51:35">||</operator> <name pos:start="51:37" pos:end="51:55"><name pos:start="51:37" pos:end="51:37">s</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:55">frame_rate_index</name></name> <operator pos:start="51:57" pos:end="51:57">&gt;</operator> <literal type="number" pos:start="51:59" pos:end="51:60">13</literal></expr>)</condition> <block pos:start="51:63" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:32">

        <expr_stmt pos:start="53:9" pos:end="55:72"><expr pos:start="53:9" pos:end="55:71"><call pos:start="53:9" pos:end="55:71"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="55:71">(<argument pos:start="53:16" pos:end="53:20"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">avctx</name></expr></argument>, <argument pos:start="53:23" pos:end="53:36"><expr pos:start="53:23" pos:end="53:36"><name pos:start="53:23" pos:end="53:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="55:16" pos:end="55:49"><expr pos:start="55:16" pos:end="55:49"><literal type="string" pos:start="55:16" pos:end="55:49">"frame_rate_index %d is invalid\n"</literal></expr></argument>, <argument pos:start="55:52" pos:end="55:70"><expr pos:start="55:52" pos:end="55:70"><name pos:start="55:52" pos:end="55:70"><name pos:start="55:52" pos:end="55:52">s</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:70">frame_rate_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:27">frame_rate_index</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <literal type="number" pos:start="57:31" pos:end="57:31">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:45"><expr pos:start="61:5" pos:end="61:44"><name pos:start="61:5" pos:end="61:15"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:15">bit_rate</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:38"><name pos:start="61:19" pos:end="61:26">get_bits</name><argument_list pos:start="61:27" pos:end="61:38">(<argument pos:start="61:28" pos:end="61:33"><expr pos:start="61:28" pos:end="61:33"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:33"><name pos:start="61:29" pos:end="61:29">s</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:33">gb</name></name></expr></argument>, <argument pos:start="61:36" pos:end="61:37"><expr pos:start="61:36" pos:end="61:37"><literal type="number" pos:start="61:36" pos:end="61:37">18</literal></expr></argument>)</argument_list></call> <operator pos:start="61:40" pos:end="61:40">*</operator> <literal type="number" pos:start="61:42" pos:end="61:44">400</literal></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:31">(<expr pos:start="63:9" pos:end="63:30"><call pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:17">get_bits1</name><argument_list pos:start="63:18" pos:end="63:25">(<argument pos:start="63:19" pos:end="63:24"><expr pos:start="63:19" pos:end="63:24"><operator pos:start="63:19" pos:end="63:19">&amp;</operator><name pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:24">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:27" pos:end="63:28">==</operator> <literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>)</condition> <block pos:start="63:33" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35"> <comment type="block" pos:start="63:35" pos:end="63:46">/* marker */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:75"><expr pos:start="65:9" pos:end="65:74"><call pos:start="65:9" pos:end="65:74"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:74">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:73"><expr pos:start="65:37" pos:end="65:73"><literal type="string" pos:start="65:37" pos:end="65:73">"Marker in sequence header missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:12"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:12">width</name></name>  <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:21">width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:13">height</name></name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:22">height</name></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:64"><expr pos:start="77:5" pos:end="77:63"><name pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:12">avctx</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:28">rc_buffer_size</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <call pos:start="77:32" pos:end="77:51"><name pos:start="77:32" pos:end="77:39">get_bits</name><argument_list pos:start="77:40" pos:end="77:51">(<argument pos:start="77:41" pos:end="77:46"><expr pos:start="77:41" pos:end="77:46"><operator pos:start="77:41" pos:end="77:41">&amp;</operator><name pos:start="77:42" pos:end="77:46"><name pos:start="77:42" pos:end="77:42">s</name><operator pos:start="77:43" pos:end="77:44">-&gt;</operator><name pos:start="77:45" pos:end="77:46">gb</name></name></expr></argument>, <argument pos:start="77:49" pos:end="77:50"><expr pos:start="77:49" pos:end="77:50"><literal type="number" pos:start="77:49" pos:end="77:50">10</literal></expr></argument>)</argument_list></call> <operator pos:start="77:53" pos:end="77:53">*</operator> <literal type="number" pos:start="77:55" pos:end="77:58">1024</literal> <operator pos:start="77:60" pos:end="77:60">*</operator> <literal type="number" pos:start="77:62" pos:end="77:63">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:25"><expr pos:start="79:5" pos:end="79:24"><call pos:start="79:5" pos:end="79:24"><name pos:start="79:5" pos:end="79:13">skip_bits</name><argument_list pos:start="79:14" pos:end="79:24">(<argument pos:start="79:15" pos:end="79:20"><expr pos:start="79:15" pos:end="79:20"><operator pos:start="79:15" pos:end="79:15">&amp;</operator><name pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:16">s</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:20">gb</name></name></expr></argument>, <argument pos:start="79:23" pos:end="79:23"><expr pos:start="79:23" pos:end="79:23"><literal type="number" pos:start="79:23" pos:end="79:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:20">/* get matrix */</comment>

    <if_stmt pos:start="85:5" pos:end="103:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><call pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:17">get_bits1</name><argument_list pos:start="85:18" pos:end="85:25">(<argument pos:start="85:19" pos:end="85:24"><expr pos:start="85:19" pos:end="85:24"><operator pos:start="85:19" pos:end="85:19">&amp;</operator><name pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:28" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:67">

        <expr_stmt pos:start="87:9" pos:end="87:67"><expr pos:start="87:9" pos:end="87:66"><call pos:start="87:9" pos:end="87:66"><name pos:start="87:9" pos:end="87:19">load_matrix</name><argument_list pos:start="87:20" pos:end="87:66">(<argument pos:start="87:21" pos:end="87:21"><expr pos:start="87:21" pos:end="87:21"><name pos:start="87:21" pos:end="87:21">s</name></expr></argument>, <argument pos:start="87:24" pos:end="87:45"><expr pos:start="87:24" pos:end="87:45"><name pos:start="87:24" pos:end="87:45"><name pos:start="87:24" pos:end="87:24">s</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:45">chroma_intra_matrix</name></name></expr></argument>, <argument pos:start="87:48" pos:end="87:62"><expr pos:start="87:48" pos:end="87:62"><name pos:start="87:48" pos:end="87:62"><name pos:start="87:48" pos:end="87:48">s</name><operator pos:start="87:49" pos:end="87:50">-&gt;</operator><name pos:start="87:51" pos:end="87:62">intra_matrix</name></name></expr></argument>, <argument pos:start="87:65" pos:end="87:65"><expr pos:start="87:65" pos:end="87:65"><literal type="number" pos:start="87:65" pos:end="87:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="103:5">else <block pos:start="89:12" pos:end="103:5">{<block_content pos:start="91:9" pos:end="101:9">

        <for pos:start="91:9" pos:end="101:9">for <control pos:start="91:13" pos:end="91:32">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:27"><expr pos:start="91:21" pos:end="91:26"><name pos:start="91:21" pos:end="91:21">i</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <literal type="number" pos:start="91:25" pos:end="91:26">64</literal></expr>;</condition> <incr pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:29">i</name><operator pos:start="91:30" pos:end="91:31">++</operator></expr></incr>)</control> <block pos:start="91:34" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:42">

            <expr_stmt pos:start="93:13" pos:end="93:44"><expr pos:start="93:13" pos:end="93:43"><name pos:start="93:13" pos:end="93:13">j</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <name pos:start="93:17" pos:end="93:43"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:23">idsp</name><operator pos:start="93:24" pos:end="93:24">.</operator><name pos:start="93:25" pos:end="93:40">idct_permutation</name><index pos:start="93:41" pos:end="93:43">[<expr pos:start="93:42" pos:end="93:42"><name pos:start="93:42" pos:end="93:42">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:49"><expr pos:start="95:13" pos:end="95:48"><name pos:start="95:13" pos:end="95:13">v</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:48"><name pos:start="95:17" pos:end="95:45">ff_mpeg1_default_intra_matrix</name><index pos:start="95:46" pos:end="95:48">[<expr pos:start="95:47" pos:end="95:47"><name pos:start="95:47" pos:end="95:47">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:13">s</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:27">intra_matrix</name><index pos:start="97:28" pos:end="97:30">[<expr pos:start="97:29" pos:end="97:29"><name pos:start="97:29" pos:end="97:29">j</name></expr>]</index></name>        <operator pos:start="97:39" pos:end="97:39">=</operator> <name pos:start="97:41" pos:end="97:41">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:42"><expr pos:start="99:13" pos:end="99:41"><name pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:34">chroma_intra_matrix</name><index pos:start="99:35" pos:end="99:37">[<expr pos:start="99:36" pos:end="99:36"><name pos:start="99:36" pos:end="99:36">j</name></expr>]</index></name> <operator pos:start="99:39" pos:end="99:39">=</operator> <name pos:start="99:41" pos:end="99:41">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="105:5" pos:end="123:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><call pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">get_bits1</name><argument_list pos:start="105:18" pos:end="105:25">(<argument pos:start="105:19" pos:end="105:24"><expr pos:start="105:19" pos:end="105:24"><operator pos:start="105:19" pos:end="105:19">&amp;</operator><name pos:start="105:20" pos:end="105:24"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:28" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:67">

        <expr_stmt pos:start="107:9" pos:end="107:67"><expr pos:start="107:9" pos:end="107:66"><call pos:start="107:9" pos:end="107:66"><name pos:start="107:9" pos:end="107:19">load_matrix</name><argument_list pos:start="107:20" pos:end="107:66">(<argument pos:start="107:21" pos:end="107:21"><expr pos:start="107:21" pos:end="107:21"><name pos:start="107:21" pos:end="107:21">s</name></expr></argument>, <argument pos:start="107:24" pos:end="107:45"><expr pos:start="107:24" pos:end="107:45"><name pos:start="107:24" pos:end="107:45"><name pos:start="107:24" pos:end="107:24">s</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:45">chroma_inter_matrix</name></name></expr></argument>, <argument pos:start="107:48" pos:end="107:62"><expr pos:start="107:48" pos:end="107:62"><name pos:start="107:48" pos:end="107:62"><name pos:start="107:48" pos:end="107:48">s</name><operator pos:start="107:49" pos:end="107:50">-&gt;</operator><name pos:start="107:51" pos:end="107:62">inter_matrix</name></name></expr></argument>, <argument pos:start="107:65" pos:end="107:65"><expr pos:start="107:65" pos:end="107:65"><literal type="number" pos:start="107:65" pos:end="107:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="123:5">else <block pos:start="109:12" pos:end="123:5">{<block_content pos:start="111:9" pos:end="121:9">

        <for pos:start="111:9" pos:end="121:9">for <control pos:start="111:13" pos:end="111:32">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:27"><expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <literal type="number" pos:start="111:25" pos:end="111:26">64</literal></expr>;</condition> <incr pos:start="111:29" pos:end="111:31"><expr pos:start="111:29" pos:end="111:31"><name pos:start="111:29" pos:end="111:29">i</name><operator pos:start="111:30" pos:end="111:31">++</operator></expr></incr>)</control> <block pos:start="111:34" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:42">

            <decl_stmt pos:start="113:13" pos:end="113:48"><decl pos:start="113:13" pos:end="113:47"><type pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">int</name></type> <name pos:start="113:17" pos:end="113:17">j</name> <init pos:start="113:19" pos:end="113:47">= <expr pos:start="113:21" pos:end="113:47"><name pos:start="113:21" pos:end="113:47"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:27">idsp</name><operator pos:start="113:28" pos:end="113:28">.</operator><name pos:start="113:29" pos:end="113:44">idct_permutation</name><index pos:start="113:45" pos:end="113:47">[<expr pos:start="113:46" pos:end="113:46"><name pos:start="113:46" pos:end="113:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:53"><expr pos:start="115:13" pos:end="115:52"><name pos:start="115:13" pos:end="115:13">v</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:52"><name pos:start="115:17" pos:end="115:49">ff_mpeg1_default_non_intra_matrix</name><index pos:start="115:50" pos:end="115:52">[<expr pos:start="115:51" pos:end="115:51"><name pos:start="115:51" pos:end="115:51">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:42"><expr pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:30"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:27">inter_matrix</name><index pos:start="117:28" pos:end="117:30">[<expr pos:start="117:29" pos:end="117:29"><name pos:start="117:29" pos:end="117:29">j</name></expr>]</index></name>        <operator pos:start="117:39" pos:end="117:39">=</operator> <name pos:start="117:41" pos:end="117:41">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:42"><expr pos:start="119:13" pos:end="119:41"><name pos:start="119:13" pos:end="119:37"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:34">chroma_inter_matrix</name><index pos:start="119:35" pos:end="119:37">[<expr pos:start="119:36" pos:end="119:36"><name pos:start="119:36" pos:end="119:36">j</name></expr>]</index></name> <operator pos:start="119:39" pos:end="119:39">=</operator> <name pos:start="119:41" pos:end="119:41">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:35">(<expr pos:start="127:9" pos:end="127:34"><call pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:17">show_bits</name><argument_list pos:start="127:18" pos:end="127:29">(<argument pos:start="127:19" pos:end="127:24"><expr pos:start="127:19" pos:end="127:24"><operator pos:start="127:19" pos:end="127:19">&amp;</operator><name pos:start="127:20" pos:end="127:24"><name pos:start="127:20" pos:end="127:20">s</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:24">gb</name></name></expr></argument>, <argument pos:start="127:27" pos:end="127:28"><expr pos:start="127:27" pos:end="127:28"><literal type="number" pos:start="127:27" pos:end="127:28">23</literal></expr></argument>)</argument_list></call> <operator pos:start="127:31" pos:end="127:32">!=</operator> <literal type="number" pos:start="127:34" pos:end="127:34">0</literal></expr>)</condition> <block pos:start="127:37" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:35">

        <expr_stmt pos:start="129:9" pos:end="129:68"><expr pos:start="129:9" pos:end="129:67"><call pos:start="129:9" pos:end="129:67"><name pos:start="129:9" pos:end="129:14">av_log</name><argument_list pos:start="129:15" pos:end="129:67">(<argument pos:start="129:16" pos:end="129:23"><expr pos:start="129:16" pos:end="129:23"><name pos:start="129:16" pos:end="129:23"><name pos:start="129:16" pos:end="129:16">s</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:23">avctx</name></name></expr></argument>, <argument pos:start="129:26" pos:end="129:37"><expr pos:start="129:26" pos:end="129:37"><name pos:start="129:26" pos:end="129:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:40" pos:end="129:66"><expr pos:start="129:40" pos:end="129:66"><literal type="string" pos:start="129:40" pos:end="129:66">"sequence header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:35">return <expr pos:start="131:16" pos:end="131:34"><name pos:start="131:16" pos:end="131:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:62">/* We set MPEG-2 parameters so that it emulates MPEG-1. */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:32"><expr pos:start="139:5" pos:end="139:31"><name pos:start="139:5" pos:end="139:27"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:27">progressive_sequence</name></name> <operator pos:start="139:29" pos:end="139:29">=</operator> <literal type="number" pos:start="139:31" pos:end="139:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:32"><expr pos:start="141:5" pos:end="141:31"><name pos:start="141:5" pos:end="141:24"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:24">progressive_frame</name></name>    <operator pos:start="141:29" pos:end="141:29">=</operator> <literal type="number" pos:start="141:31" pos:end="141:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:41"><expr pos:start="143:5" pos:end="143:40"><name pos:start="143:5" pos:end="143:24"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:24">picture_structure</name></name>    <operator pos:start="143:29" pos:end="143:29">=</operator> <name pos:start="143:31" pos:end="143:40">PICT_FRAME</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:32"><expr pos:start="145:5" pos:end="145:31"><name pos:start="145:5" pos:end="145:18"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:18">first_field</name></name>          <operator pos:start="145:29" pos:end="145:29">=</operator> <literal type="number" pos:start="145:31" pos:end="145:31">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:32"><expr pos:start="147:5" pos:end="147:31"><name pos:start="147:5" pos:end="147:27"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:27">frame_pred_frame_dct</name></name> <operator pos:start="147:29" pos:end="147:29">=</operator> <literal type="number" pos:start="147:31" pos:end="147:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:32"><expr pos:start="149:5" pos:end="149:31"><name pos:start="149:5" pos:end="149:20"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:20">chroma_format</name></name>        <operator pos:start="149:29" pos:end="149:29">=</operator> <literal type="number" pos:start="149:31" pos:end="149:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="153:53"><expr pos:start="151:5" pos:end="153:52"><name pos:start="151:5" pos:end="151:15"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:15">codec_id</name></name>             <operator pos:start="151:29" pos:end="151:29">=</operator>

    <name pos:start="153:5" pos:end="153:22"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:12">avctx</name><operator pos:start="153:13" pos:end="153:14">-&gt;</operator><name pos:start="153:15" pos:end="153:22">codec_id</name></name>      <operator pos:start="153:29" pos:end="153:29">=</operator> <name pos:start="153:31" pos:end="153:52">AV_CODEC_ID_MPEG1VIDEO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:40"><expr pos:start="155:5" pos:end="155:39"><name pos:start="155:5" pos:end="155:17"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:17">out_format</name></name>           <operator pos:start="155:29" pos:end="155:29">=</operator> <name pos:start="155:31" pos:end="155:39">FMT_MPEG1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:32"><expr pos:start="157:5" pos:end="157:31"><name pos:start="157:5" pos:end="157:14"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:14">swap_uv</name></name>              <operator pos:start="157:29" pos:end="157:29">=</operator> <literal type="number" pos:start="157:31" pos:end="157:31">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="157:34" pos:end="157:71">// AFAIK VCR2 does not have SEQ_HEADER</comment>

    <if_stmt pos:start="159:5" pos:end="161:25"><if pos:start="159:5" pos:end="161:25">if <condition pos:start="159:8" pos:end="159:40">(<expr pos:start="159:9" pos:end="159:39"><name pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:16">flags</name></name> <operator pos:start="159:18" pos:end="159:18">&amp;</operator> <name pos:start="159:20" pos:end="159:39">CODEC_FLAG_LOW_DELAY</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:25"><block_content pos:start="161:9" pos:end="161:25">

        <expr_stmt pos:start="161:9" pos:end="161:25"><expr pos:start="161:9" pos:end="161:24"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:20">low_delay</name></name> <operator pos:start="161:22" pos:end="161:22">=</operator> <literal type="number" pos:start="161:24" pos:end="161:24">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="169:76"><if pos:start="165:5" pos:end="169:76">if <condition pos:start="165:8" pos:end="165:45">(<expr pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:16">avctx</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:23">debug</name></name> <operator pos:start="165:25" pos:end="165:25">&amp;</operator> <name pos:start="165:27" pos:end="165:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="167:9" pos:end="169:76"><block_content pos:start="167:9" pos:end="169:76">

        <expr_stmt pos:start="167:9" pos:end="169:76"><expr pos:start="167:9" pos:end="169:75"><call pos:start="167:9" pos:end="169:75"><name pos:start="167:9" pos:end="167:14">av_log</name><argument_list pos:start="167:15" pos:end="169:75">(<argument pos:start="167:16" pos:end="167:23"><expr pos:start="167:16" pos:end="167:23"><name pos:start="167:16" pos:end="167:23"><name pos:start="167:16" pos:end="167:16">s</name><operator pos:start="167:17" pos:end="167:18">-&gt;</operator><name pos:start="167:19" pos:end="167:23">avctx</name></name></expr></argument>, <argument pos:start="167:26" pos:end="167:37"><expr pos:start="167:26" pos:end="167:37"><name pos:start="167:26" pos:end="167:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="167:40" pos:end="167:93"><expr pos:start="167:40" pos:end="167:93"><literal type="string" pos:start="167:40" pos:end="167:93">"vbv buffer: %d, bitrate:%d, aspect_ratio_info: %d \n"</literal></expr></argument>,

               <argument pos:start="169:16" pos:end="169:39"><expr pos:start="169:16" pos:end="169:39"><name pos:start="169:16" pos:end="169:39"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:23">avctx</name><operator pos:start="169:24" pos:end="169:25">-&gt;</operator><name pos:start="169:26" pos:end="169:39">rc_buffer_size</name></name></expr></argument>, <argument pos:start="169:42" pos:end="169:52"><expr pos:start="169:42" pos:end="169:52"><name pos:start="169:42" pos:end="169:52"><name pos:start="169:42" pos:end="169:42">s</name><operator pos:start="169:43" pos:end="169:44">-&gt;</operator><name pos:start="169:45" pos:end="169:52">bit_rate</name></name></expr></argument>, <argument pos:start="169:55" pos:end="169:74"><expr pos:start="169:55" pos:end="169:74"><name pos:start="169:55" pos:end="169:74"><name pos:start="169:55" pos:end="169:55">s</name><operator pos:start="169:56" pos:end="169:57">-&gt;</operator><name pos:start="169:58" pos:end="169:74">aspect_ratio_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
