<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6714.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">do_pcie_aer_inject_error</name><parameter_list pos:start="1:36" pos:end="3:75">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:43">Monitor</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">mon</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:54"><decl pos:start="3:37" pos:end="3:54"><type pos:start="3:37" pos:end="3:54"><specifier pos:start="3:37" pos:end="3:41">const</specifier> <name pos:start="3:43" pos:end="3:47">QDict</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:54">qdict</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:74"><decl pos:start="3:57" pos:end="3:74"><type pos:start="3:57" pos:end="3:74"><name pos:start="3:57" pos:end="3:63">QObject</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier><modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:74">ret_data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:13">

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">id</name> <init pos:start="7:20" pos:end="7:47">= <expr pos:start="7:22" pos:end="7:47"><call pos:start="7:22" pos:end="7:47"><name pos:start="7:22" pos:end="7:34">qdict_get_str</name><argument_list pos:start="7:35" pos:end="7:47">(<argument pos:start="7:36" pos:end="7:40"><expr pos:start="7:36" pos:end="7:40"><name pos:start="7:36" pos:end="7:40">qdict</name></expr></argument>, <argument pos:start="7:43" pos:end="7:46"><expr pos:start="7:43" pos:end="7:46"><literal type="string" pos:start="7:43" pos:end="7:46">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:26">error_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:25">error_status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:20">correctable</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">PCIDevice</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">PCIEAERErr</name></type> <name pos:start="17:16" pos:end="17:18">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:40"><name pos:start="23:11" pos:end="23:30">pci_qdev_find_device</name><argument_list pos:start="23:31" pos:end="23:40">(<argument pos:start="23:32" pos:end="23:33"><expr pos:start="23:32" pos:end="23:33"><name pos:start="23:32" pos:end="23:33">id</name></expr></argument>, <argument pos:start="23:36" pos:end="23:39"><expr pos:start="23:36" pos:end="23:39"><operator pos:start="23:36" pos:end="23:36">&amp;</operator><name pos:start="23:37" pos:end="23:39">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:19">

        <expr_stmt pos:start="27:9" pos:end="31:42"><expr pos:start="27:9" pos:end="31:41"><call pos:start="27:9" pos:end="31:41"><name pos:start="27:9" pos:end="27:22">monitor_printf</name><argument_list pos:start="27:23" pos:end="31:41">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">mon</name></expr></argument>,

                       <argument pos:start="29:24" pos:end="31:36"><expr pos:start="29:24" pos:end="31:36"><literal type="string" pos:start="29:24" pos:end="29:72">"id or pci device path is invalid or device not "</literal>

                       <literal type="string" pos:start="31:24" pos:end="31:36">"found. %s\n"</literal></expr></argument>, <argument pos:start="31:39" pos:end="31:40"><expr pos:start="31:39" pos:end="31:40"><name pos:start="31:39" pos:end="31:40">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:29">(<expr pos:start="37:9" pos:end="37:28"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:28"><name pos:start="37:10" pos:end="37:23">pci_is_express</name><argument_list pos:start="37:24" pos:end="37:28">(<argument pos:start="37:25" pos:end="37:27"><expr pos:start="37:25" pos:end="37:27"><name pos:start="37:25" pos:end="37:27">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:31" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:23">

        <expr_stmt pos:start="39:9" pos:end="41:27"><expr pos:start="39:9" pos:end="41:26"><call pos:start="39:9" pos:end="41:26"><name pos:start="39:9" pos:end="39:22">monitor_printf</name><argument_list pos:start="39:23" pos:end="41:26">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">mon</name></expr></argument>, <argument pos:start="39:29" pos:end="39:74"><expr pos:start="39:29" pos:end="39:74"><literal type="string" pos:start="39:29" pos:end="39:74">"the device doesn't support pci express. %s\n"</literal></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:25"><expr pos:start="41:24" pos:end="41:25"><name pos:start="41:24" pos:end="41:25">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:23">return <expr pos:start="43:16" pos:end="43:22"><operator pos:start="43:16" pos:end="43:16">-</operator><name pos:start="43:17" pos:end="43:22">ENOSYS</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:54"><expr pos:start="49:5" pos:end="49:53"><name pos:start="49:5" pos:end="49:14">error_name</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:53"><name pos:start="49:18" pos:end="49:30">qdict_get_str</name><argument_list pos:start="49:31" pos:end="49:53">(<argument pos:start="49:32" pos:end="49:36"><expr pos:start="49:32" pos:end="49:36"><name pos:start="49:32" pos:end="49:36">qdict</name></expr></argument>, <argument pos:start="49:39" pos:end="49:52"><expr pos:start="49:39" pos:end="49:52"><literal type="string" pos:start="49:39" pos:end="49:52">"error_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="69:5"><if pos:start="51:5" pos:end="69:5">if <condition pos:start="51:8" pos:end="51:77">(<expr pos:start="51:9" pos:end="51:76"><call pos:start="51:9" pos:end="51:76"><name pos:start="51:9" pos:end="51:35">pcie_aer_parse_error_string</name><argument_list pos:start="51:36" pos:end="51:76">(<argument pos:start="51:37" pos:end="51:46"><expr pos:start="51:37" pos:end="51:46"><name pos:start="51:37" pos:end="51:46">error_name</name></expr></argument>, <argument pos:start="51:49" pos:end="51:61"><expr pos:start="51:49" pos:end="51:61"><operator pos:start="51:49" pos:end="51:49">&amp;</operator><name pos:start="51:50" pos:end="51:61">error_status</name></expr></argument>, <argument pos:start="51:64" pos:end="51:75"><expr pos:start="51:64" pos:end="51:75"><operator pos:start="51:64" pos:end="51:64">&amp;</operator><name pos:start="51:65" pos:end="51:75">correctable</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:79" pos:end="69:5">{<block_content pos:start="53:9" pos:end="67:9">

        <decl_stmt pos:start="53:9" pos:end="53:23"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:12">char</name> <modifier pos:start="53:14" pos:end="53:14">*</modifier></type><name pos:start="53:15" pos:end="53:15">e</name> <init pos:start="53:17" pos:end="53:22">= <expr pos:start="53:19" pos:end="53:22"><name pos:start="53:19" pos:end="53:22">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:20">error_status</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <call pos:start="55:24" pos:end="55:49"><name pos:start="55:24" pos:end="55:30">strtoul</name><argument_list pos:start="55:31" pos:end="55:49">(<argument pos:start="55:32" pos:end="55:41"><expr pos:start="55:32" pos:end="55:41"><name pos:start="55:32" pos:end="55:41">error_name</name></expr></argument>, <argument pos:start="55:44" pos:end="55:45"><expr pos:start="55:44" pos:end="55:45"><operator pos:start="55:44" pos:end="55:44">&amp;</operator><name pos:start="55:45" pos:end="55:45">e</name></expr></argument>, <argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><literal type="number" pos:start="55:48" pos:end="55:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:70"><expr pos:start="57:9" pos:end="57:69"><name pos:start="57:9" pos:end="57:19">correctable</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:69"><name pos:start="57:23" pos:end="57:40">qdict_get_try_bool</name><argument_list pos:start="57:41" pos:end="57:69">(<argument pos:start="57:42" pos:end="57:46"><expr pos:start="57:42" pos:end="57:46"><name pos:start="57:42" pos:end="57:46">qdict</name></expr></argument>, <argument pos:start="57:49" pos:end="57:61"><expr pos:start="57:49" pos:end="57:61"><literal type="string" pos:start="57:49" pos:end="57:61">"correctable"</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:68"><expr pos:start="57:64" pos:end="57:68"><name pos:start="57:64" pos:end="57:68">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:29">(<expr pos:start="59:13" pos:end="59:28"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:14">e</name> <operator pos:start="59:16" pos:end="59:17">||</operator> <operator pos:start="59:19" pos:end="59:19">*</operator><name pos:start="59:20" pos:end="59:20">e</name> <operator pos:start="59:22" pos:end="59:23">!=</operator> <literal type="char" pos:start="59:25" pos:end="59:28">'\0'</literal></expr>)</condition> <block pos:start="59:31" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:27">

            <expr_stmt pos:start="61:13" pos:end="63:39"><expr pos:start="61:13" pos:end="63:38"><call pos:start="61:13" pos:end="63:38"><name pos:start="61:13" pos:end="61:26">monitor_printf</name><argument_list pos:start="61:27" pos:end="63:38">(<argument pos:start="61:28" pos:end="61:30"><expr pos:start="61:28" pos:end="61:30"><name pos:start="61:28" pos:end="61:30">mon</name></expr></argument>, <argument pos:start="61:33" pos:end="61:68"><expr pos:start="61:33" pos:end="61:68"><literal type="string" pos:start="61:33" pos:end="61:68">"invalid error status value. \"%s\""</literal></expr></argument>,

                           <argument pos:start="63:28" pos:end="63:37"><expr pos:start="63:28" pos:end="63:37"><name pos:start="63:28" pos:end="63:37">error_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:27">return <expr pos:start="65:20" pos:end="65:26"><operator pos:start="65:20" pos:end="65:20">-</operator><name pos:start="65:21" pos:end="65:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:30"><expr pos:start="71:5" pos:end="71:29"><name pos:start="71:5" pos:end="71:14"><name pos:start="71:5" pos:end="71:7">err</name><operator pos:start="71:8" pos:end="71:8">.</operator><name pos:start="71:9" pos:end="71:14">status</name></name> <operator pos:start="71:16" pos:end="71:16">=</operator> <name pos:start="71:18" pos:end="71:29">error_status</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:42"><expr pos:start="73:5" pos:end="73:41"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:7">err</name><operator pos:start="73:8" pos:end="73:8">.</operator><name pos:start="73:9" pos:end="73:17">source_id</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:41"><name pos:start="73:21" pos:end="73:36">pci_requester_id</name><argument_list pos:start="73:37" pos:end="73:41">(<argument pos:start="73:38" pos:end="73:40"><expr pos:start="73:38" pos:end="73:40"><name pos:start="73:38" pos:end="73:40">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:18"><expr pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:13"><name pos:start="77:5" pos:end="77:7">err</name><operator pos:start="77:8" pos:end="77:8">.</operator><name pos:start="77:9" pos:end="77:13">flags</name></name> <operator pos:start="77:15" pos:end="77:15">=</operator> <literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:20">(<expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:19">correctable</name></expr>)</condition> <block pos:start="79:22" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:49">

        <expr_stmt pos:start="81:9" pos:end="81:49"><expr pos:start="81:9" pos:end="81:48"><name pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:11">err</name><operator pos:start="81:12" pos:end="81:12">.</operator><name pos:start="81:13" pos:end="81:17">flags</name></name> <operator pos:start="81:19" pos:end="81:20">|=</operator> <name pos:start="81:22" pos:end="81:48">PCIE_AER_ERR_IS_CORRECTABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:63">(<expr pos:start="85:9" pos:end="85:62"><call pos:start="85:9" pos:end="85:62"><name pos:start="85:9" pos:end="85:26">qdict_get_try_bool</name><argument_list pos:start="85:27" pos:end="85:62">(<argument pos:start="85:28" pos:end="85:32"><expr pos:start="85:28" pos:end="85:32"><name pos:start="85:28" pos:end="85:32">qdict</name></expr></argument>, <argument pos:start="85:35" pos:end="85:54"><expr pos:start="85:35" pos:end="85:54"><literal type="string" pos:start="85:35" pos:end="85:54">"advisory_non_fatal"</literal></expr></argument>, <argument pos:start="85:57" pos:end="85:61"><expr pos:start="85:57" pos:end="85:61"><name pos:start="85:57" pos:end="85:61">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:65" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:49">

        <expr_stmt pos:start="87:9" pos:end="87:49"><expr pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:11">err</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:17">flags</name></name> <operator pos:start="87:19" pos:end="87:20">|=</operator> <name pos:start="87:22" pos:end="87:48">PCIE_AER_ERR_MAYBE_ADVISORY</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:39">(<expr pos:start="91:9" pos:end="91:38"><call pos:start="91:9" pos:end="91:38"><name pos:start="91:9" pos:end="91:20">qdict_haskey</name><argument_list pos:start="91:21" pos:end="91:38">(<argument pos:start="91:22" pos:end="91:26"><expr pos:start="91:22" pos:end="91:26"><name pos:start="91:22" pos:end="91:26">qdict</name></expr></argument>, <argument pos:start="91:29" pos:end="91:37"><expr pos:start="91:29" pos:end="91:37"><literal type="string" pos:start="91:29" pos:end="91:37">"header0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:41" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:47">

        <expr_stmt pos:start="93:9" pos:end="93:47"><expr pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:11">err</name><operator pos:start="93:12" pos:end="93:12">.</operator><name pos:start="93:13" pos:end="93:17">flags</name></name> <operator pos:start="93:19" pos:end="93:20">|=</operator> <name pos:start="93:22" pos:end="93:46">PCIE_AER_ERR_HEADER_VALID</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:39">(<expr pos:start="97:9" pos:end="97:38"><call pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:20">qdict_haskey</name><argument_list pos:start="97:21" pos:end="97:38">(<argument pos:start="97:22" pos:end="97:26"><expr pos:start="97:22" pos:end="97:26"><name pos:start="97:22" pos:end="97:26">qdict</name></expr></argument>, <argument pos:start="97:29" pos:end="97:37"><expr pos:start="97:29" pos:end="97:37"><literal type="string" pos:start="97:29" pos:end="97:37">"prefix0"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:41" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:53">

        <expr_stmt pos:start="99:9" pos:end="99:53"><expr pos:start="99:9" pos:end="99:52"><name pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:11">err</name><operator pos:start="99:12" pos:end="99:12">.</operator><name pos:start="99:13" pos:end="99:17">flags</name></name> <operator pos:start="99:19" pos:end="99:20">|=</operator> <name pos:start="99:22" pos:end="99:52">PCIE_AER_ERR_TLP_PREFIX_PRESENT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:59"><expr pos:start="105:5" pos:end="105:58"><name pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:7">err</name><operator pos:start="105:8" pos:end="105:8">.</operator><name pos:start="105:9" pos:end="105:14">header</name><index pos:start="105:15" pos:end="105:17">[<expr pos:start="105:16" pos:end="105:16"><literal type="number" pos:start="105:16" pos:end="105:16">0</literal></expr>]</index></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <call pos:start="105:21" pos:end="105:58"><name pos:start="105:21" pos:end="105:37">qdict_get_try_int</name><argument_list pos:start="105:38" pos:end="105:58">(<argument pos:start="105:39" pos:end="105:43"><expr pos:start="105:39" pos:end="105:43"><name pos:start="105:39" pos:end="105:43">qdict</name></expr></argument>, <argument pos:start="105:46" pos:end="105:54"><expr pos:start="105:46" pos:end="105:54"><literal type="string" pos:start="105:46" pos:end="105:54">"header0"</literal></expr></argument>, <argument pos:start="105:57" pos:end="105:57"><expr pos:start="105:57" pos:end="105:57"><literal type="number" pos:start="105:57" pos:end="105:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:59"><expr pos:start="107:5" pos:end="107:58"><name pos:start="107:5" pos:end="107:17"><name pos:start="107:5" pos:end="107:7">err</name><operator pos:start="107:8" pos:end="107:8">.</operator><name pos:start="107:9" pos:end="107:14">header</name><index pos:start="107:15" pos:end="107:17">[<expr pos:start="107:16" pos:end="107:16"><literal type="number" pos:start="107:16" pos:end="107:16">1</literal></expr>]</index></name> <operator pos:start="107:19" pos:end="107:19">=</operator> <call pos:start="107:21" pos:end="107:58"><name pos:start="107:21" pos:end="107:37">qdict_get_try_int</name><argument_list pos:start="107:38" pos:end="107:58">(<argument pos:start="107:39" pos:end="107:43"><expr pos:start="107:39" pos:end="107:43"><name pos:start="107:39" pos:end="107:43">qdict</name></expr></argument>, <argument pos:start="107:46" pos:end="107:54"><expr pos:start="107:46" pos:end="107:54"><literal type="string" pos:start="107:46" pos:end="107:54">"header1"</literal></expr></argument>, <argument pos:start="107:57" pos:end="107:57"><expr pos:start="107:57" pos:end="107:57"><literal type="number" pos:start="107:57" pos:end="107:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:17"><name pos:start="109:5" pos:end="109:7">err</name><operator pos:start="109:8" pos:end="109:8">.</operator><name pos:start="109:9" pos:end="109:14">header</name><index pos:start="109:15" pos:end="109:17">[<expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">2</literal></expr>]</index></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <call pos:start="109:21" pos:end="109:58"><name pos:start="109:21" pos:end="109:37">qdict_get_try_int</name><argument_list pos:start="109:38" pos:end="109:58">(<argument pos:start="109:39" pos:end="109:43"><expr pos:start="109:39" pos:end="109:43"><name pos:start="109:39" pos:end="109:43">qdict</name></expr></argument>, <argument pos:start="109:46" pos:end="109:54"><expr pos:start="109:46" pos:end="109:54"><literal type="string" pos:start="109:46" pos:end="109:54">"header2"</literal></expr></argument>, <argument pos:start="109:57" pos:end="109:57"><expr pos:start="109:57" pos:end="109:57"><literal type="number" pos:start="109:57" pos:end="109:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:59"><expr pos:start="111:5" pos:end="111:58"><name pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:7">err</name><operator pos:start="111:8" pos:end="111:8">.</operator><name pos:start="111:9" pos:end="111:14">header</name><index pos:start="111:15" pos:end="111:17">[<expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">3</literal></expr>]</index></name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:58"><name pos:start="111:21" pos:end="111:37">qdict_get_try_int</name><argument_list pos:start="111:38" pos:end="111:58">(<argument pos:start="111:39" pos:end="111:43"><expr pos:start="111:39" pos:end="111:43"><name pos:start="111:39" pos:end="111:43">qdict</name></expr></argument>, <argument pos:start="111:46" pos:end="111:54"><expr pos:start="111:46" pos:end="111:54"><literal type="string" pos:start="111:46" pos:end="111:54">"header3"</literal></expr></argument>, <argument pos:start="111:57" pos:end="111:57"><expr pos:start="111:57" pos:end="111:57"><literal type="number" pos:start="111:57" pos:end="111:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:59"><expr pos:start="115:5" pos:end="115:58"><name pos:start="115:5" pos:end="115:17"><name pos:start="115:5" pos:end="115:7">err</name><operator pos:start="115:8" pos:end="115:8">.</operator><name pos:start="115:9" pos:end="115:14">prefix</name><index pos:start="115:15" pos:end="115:17">[<expr pos:start="115:16" pos:end="115:16"><literal type="number" pos:start="115:16" pos:end="115:16">0</literal></expr>]</index></name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:58"><name pos:start="115:21" pos:end="115:37">qdict_get_try_int</name><argument_list pos:start="115:38" pos:end="115:58">(<argument pos:start="115:39" pos:end="115:43"><expr pos:start="115:39" pos:end="115:43"><name pos:start="115:39" pos:end="115:43">qdict</name></expr></argument>, <argument pos:start="115:46" pos:end="115:54"><expr pos:start="115:46" pos:end="115:54"><literal type="string" pos:start="115:46" pos:end="115:54">"prefix0"</literal></expr></argument>, <argument pos:start="115:57" pos:end="115:57"><expr pos:start="115:57" pos:end="115:57"><literal type="number" pos:start="115:57" pos:end="115:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:59"><expr pos:start="117:5" pos:end="117:58"><name pos:start="117:5" pos:end="117:17"><name pos:start="117:5" pos:end="117:7">err</name><operator pos:start="117:8" pos:end="117:8">.</operator><name pos:start="117:9" pos:end="117:14">prefix</name><index pos:start="117:15" pos:end="117:17">[<expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">1</literal></expr>]</index></name> <operator pos:start="117:19" pos:end="117:19">=</operator> <call pos:start="117:21" pos:end="117:58"><name pos:start="117:21" pos:end="117:37">qdict_get_try_int</name><argument_list pos:start="117:38" pos:end="117:58">(<argument pos:start="117:39" pos:end="117:43"><expr pos:start="117:39" pos:end="117:43"><name pos:start="117:39" pos:end="117:43">qdict</name></expr></argument>, <argument pos:start="117:46" pos:end="117:54"><expr pos:start="117:46" pos:end="117:54"><literal type="string" pos:start="117:46" pos:end="117:54">"prefix1"</literal></expr></argument>, <argument pos:start="117:57" pos:end="117:57"><expr pos:start="117:57" pos:end="117:57"><literal type="number" pos:start="117:57" pos:end="117:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:59"><expr pos:start="119:5" pos:end="119:58"><name pos:start="119:5" pos:end="119:17"><name pos:start="119:5" pos:end="119:7">err</name><operator pos:start="119:8" pos:end="119:8">.</operator><name pos:start="119:9" pos:end="119:14">prefix</name><index pos:start="119:15" pos:end="119:17">[<expr pos:start="119:16" pos:end="119:16"><literal type="number" pos:start="119:16" pos:end="119:16">2</literal></expr>]</index></name> <operator pos:start="119:19" pos:end="119:19">=</operator> <call pos:start="119:21" pos:end="119:58"><name pos:start="119:21" pos:end="119:37">qdict_get_try_int</name><argument_list pos:start="119:38" pos:end="119:58">(<argument pos:start="119:39" pos:end="119:43"><expr pos:start="119:39" pos:end="119:43"><name pos:start="119:39" pos:end="119:43">qdict</name></expr></argument>, <argument pos:start="119:46" pos:end="119:54"><expr pos:start="119:46" pos:end="119:54"><literal type="string" pos:start="119:46" pos:end="119:54">"prefix2"</literal></expr></argument>, <argument pos:start="119:57" pos:end="119:57"><expr pos:start="119:57" pos:end="119:57"><literal type="number" pos:start="119:57" pos:end="119:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:59"><expr pos:start="121:5" pos:end="121:58"><name pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:7">err</name><operator pos:start="121:8" pos:end="121:8">.</operator><name pos:start="121:9" pos:end="121:14">prefix</name><index pos:start="121:15" pos:end="121:17">[<expr pos:start="121:16" pos:end="121:16"><literal type="number" pos:start="121:16" pos:end="121:16">3</literal></expr>]</index></name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="121:58"><name pos:start="121:21" pos:end="121:37">qdict_get_try_int</name><argument_list pos:start="121:38" pos:end="121:58">(<argument pos:start="121:39" pos:end="121:43"><expr pos:start="121:39" pos:end="121:43"><name pos:start="121:39" pos:end="121:43">qdict</name></expr></argument>, <argument pos:start="121:46" pos:end="121:54"><expr pos:start="121:46" pos:end="121:54"><literal type="string" pos:start="121:46" pos:end="121:54">"prefix3"</literal></expr></argument>, <argument pos:start="121:57" pos:end="121:57"><expr pos:start="121:57" pos:end="121:57"><literal type="number" pos:start="121:57" pos:end="121:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:43"><expr pos:start="125:5" pos:end="125:42"><name pos:start="125:5" pos:end="125:7">ret</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:42"><name pos:start="125:11" pos:end="125:31">pcie_aer_inject_error</name><argument_list pos:start="125:32" pos:end="125:42">(<argument pos:start="125:33" pos:end="125:35"><expr pos:start="125:33" pos:end="125:35"><name pos:start="125:33" pos:end="125:35">dev</name></expr></argument>, <argument pos:start="125:38" pos:end="125:41"><expr pos:start="125:38" pos:end="125:41"><operator pos:start="125:38" pos:end="125:38">&amp;</operator><name pos:start="125:39" pos:end="125:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="137:40"><expr pos:start="127:5" pos:end="137:39"><operator pos:start="127:5" pos:end="127:5">*</operator><name pos:start="127:6" pos:end="127:13">ret_data</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <call pos:start="127:17" pos:end="137:39"><name pos:start="127:17" pos:end="127:34">qobject_from_jsonf</name><argument_list pos:start="127:35" pos:end="137:39">(<argument pos:start="127:36" pos:end="131:47"><expr pos:start="127:36" pos:end="131:47"><literal type="string" pos:start="127:36" pos:end="127:48">"{'id': %s, "</literal>

                                   <literal type="string" pos:start="129:36" pos:end="129:77">"'root_bus': %s, 'bus': %d, 'devfn': %d, "</literal>

                                   <literal type="string" pos:start="131:36" pos:end="131:47">"'ret': %d}"</literal></expr></argument>,

                                   <argument pos:start="133:36" pos:end="133:37"><expr pos:start="133:36" pos:end="133:37"><name pos:start="133:36" pos:end="133:37">id</name></expr></argument>, <argument pos:start="133:40" pos:end="133:61"><expr pos:start="133:40" pos:end="133:61"><call pos:start="133:40" pos:end="133:61"><name pos:start="133:40" pos:end="133:56">pci_root_bus_path</name><argument_list pos:start="133:57" pos:end="133:61">(<argument pos:start="133:58" pos:end="133:60"><expr pos:start="133:58" pos:end="133:60"><name pos:start="133:58" pos:end="133:60">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="135:36" pos:end="135:56"><expr pos:start="135:36" pos:end="135:56"><call pos:start="135:36" pos:end="135:56"><name pos:start="135:36" pos:end="135:46">pci_bus_num</name><argument_list pos:start="135:47" pos:end="135:56">(<argument pos:start="135:48" pos:end="135:55"><expr pos:start="135:48" pos:end="135:55"><name pos:start="135:48" pos:end="135:55"><name pos:start="135:48" pos:end="135:50">dev</name><operator pos:start="135:51" pos:end="135:52">-&gt;</operator><name pos:start="135:53" pos:end="135:55">bus</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:59" pos:end="135:68"><expr pos:start="135:59" pos:end="135:68"><name pos:start="135:59" pos:end="135:68"><name pos:start="135:59" pos:end="135:61">dev</name><operator pos:start="135:62" pos:end="135:63">-&gt;</operator><name pos:start="135:64" pos:end="135:68">devfn</name></name></expr></argument>,

                                   <argument pos:start="137:36" pos:end="137:38"><expr pos:start="137:36" pos:end="137:38"><name pos:start="137:36" pos:end="137:38">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:22"><expr pos:start="139:5" pos:end="139:21"><call pos:start="139:5" pos:end="139:21"><name pos:start="139:5" pos:end="139:10">assert</name><argument_list pos:start="139:11" pos:end="139:21">(<argument pos:start="139:12" pos:end="139:20"><expr pos:start="139:12" pos:end="139:20"><operator pos:start="139:12" pos:end="139:12">*</operator><name pos:start="139:13" pos:end="139:20">ret_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="143:5" pos:end="143:13">return <expr pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
