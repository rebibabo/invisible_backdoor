<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13308.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">m25p80_init</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:31">SSISlave</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:35">ss</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">DriveInfo</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Flash</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:12">s</name> <init pos:start="7:14" pos:end="7:25">= <expr pos:start="7:16" pos:end="7:25"><call pos:start="7:16" pos:end="7:25"><name pos:start="7:16" pos:end="7:21">M25P80</name><argument_list pos:start="7:22" pos:end="7:25">(<argument pos:start="7:23" pos:end="7:24"><expr pos:start="7:23" pos:end="7:24"><name pos:start="7:23" pos:end="7:24">ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">M25P80Class</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">mc</name> <init pos:start="9:21" pos:end="9:41">= <expr pos:start="9:23" pos:end="9:41"><call pos:start="9:23" pos:end="9:41"><name pos:start="9:23" pos:end="9:38">M25P80_GET_CLASS</name><argument_list pos:start="9:39" pos:end="9:41">(<argument pos:start="9:40" pos:end="9:40"><expr pos:start="9:40" pos:end="9:40"><name pos:start="9:40" pos:end="9:40">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:9">pi</name></name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:14">mc</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:18">pi</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:52"><expr pos:start="17:5" pos:end="17:51"><name pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:11">size</name></name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:32"><name pos:start="17:15" pos:end="17:15">s</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:19">pi</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:32">sector_size</name></name> <operator pos:start="17:34" pos:end="17:34">*</operator> <name pos:start="17:36" pos:end="17:51"><name pos:start="17:36" pos:end="17:36">s</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:40">pi</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:51">n_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:17">dirty_page</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <operator pos:start="19:21" pos:end="19:21">-</operator><literal type="number" pos:start="19:22" pos:end="19:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:14">storage</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:48"><name pos:start="21:18" pos:end="21:31">blk_blockalign</name><argument_list pos:start="21:32" pos:end="21:48">(<argument pos:start="21:33" pos:end="21:38"><expr pos:start="21:33" pos:end="21:38"><name pos:start="21:33" pos:end="21:38"><name pos:start="21:33" pos:end="21:33">s</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:38">blk</name></name></expr></argument>, <argument pos:start="21:41" pos:end="21:47"><expr pos:start="21:41" pos:end="21:47"><name pos:start="21:41" pos:end="21:47"><name pos:start="21:41" pos:end="21:41">s</name><operator pos:start="21:42" pos:end="21:43">-&gt;</operator><name pos:start="21:44" pos:end="21:47">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:69">/* FIXME use a qdev drive property instead of drive_get_next() */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:9">dinfo</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:26">drive_get_next</name><argument_list pos:start="27:27" pos:end="27:34">(<argument pos:start="27:28" pos:end="27:33"><expr pos:start="27:28" pos:end="27:33"><name pos:start="27:28" pos:end="27:33">IF_MTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="59:5"><if pos:start="31:5" pos:end="53:5">if <condition pos:start="31:8" pos:end="31:14">(<expr pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:13">dinfo</name></expr>)</condition> <block pos:start="31:16" pos:end="53:5">{<block_content pos:start="33:9" pos:end="51:9">

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:18">DB_PRINT_L</name><argument_list pos:start="33:19" pos:end="33:50">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr></argument>, <argument pos:start="33:23" pos:end="33:49"><expr pos:start="33:23" pos:end="33:49"><literal type="string" pos:start="33:23" pos:end="33:49">"Binding to IF_MTD drive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:14">blk</name></name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:43"><name pos:start="35:18" pos:end="35:36">blk_by_legacy_dinfo</name><argument_list pos:start="35:37" pos:end="35:43">(<argument pos:start="35:38" pos:end="35:42"><expr pos:start="35:38" pos:end="35:42"><name pos:start="35:38" pos:end="35:42">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:29">blk_attach_dev_nofail</name><argument_list pos:start="37:30" pos:end="37:40">(<argument pos:start="37:31" pos:end="37:36"><expr pos:start="37:31" pos:end="37:36"><name pos:start="37:31" pos:end="37:36"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:36">blk</name></name></expr></argument>, <argument pos:start="37:39" pos:end="37:39"><expr pos:start="37:39" pos:end="37:39"><name pos:start="37:39" pos:end="37:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:38">/* FIXME: Move to late init */</comment>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="45:62">(<expr pos:start="43:13" pos:end="45:61"><call pos:start="43:13" pos:end="45:61"><name pos:start="43:13" pos:end="43:20">blk_read</name><argument_list pos:start="43:21" pos:end="45:61">(<argument pos:start="43:22" pos:end="43:27"><expr pos:start="43:22" pos:end="43:27"><name pos:start="43:22" pos:end="43:27"><name pos:start="43:22" pos:end="43:22">s</name><operator pos:start="43:23" pos:end="43:24">-&gt;</operator><name pos:start="43:25" pos:end="43:27">blk</name></name></expr></argument>, <argument pos:start="43:30" pos:end="43:30"><expr pos:start="43:30" pos:end="43:30"><literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr></argument>, <argument pos:start="43:33" pos:end="43:42"><expr pos:start="43:33" pos:end="43:42"><name pos:start="43:33" pos:end="43:42"><name pos:start="43:33" pos:end="43:33">s</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:42">storage</name></name></expr></argument>,

                     <argument pos:start="45:22" pos:end="45:60"><expr pos:start="45:22" pos:end="45:60"><call pos:start="45:22" pos:end="45:60"><name pos:start="45:22" pos:end="45:33">DIV_ROUND_UP</name><argument_list pos:start="45:34" pos:end="45:60">(<argument pos:start="45:35" pos:end="45:41"><expr pos:start="45:35" pos:end="45:41"><name pos:start="45:35" pos:end="45:41"><name pos:start="45:35" pos:end="45:35">s</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:41">size</name></name></expr></argument>, <argument pos:start="45:44" pos:end="45:59"><expr pos:start="45:44" pos:end="45:59"><name pos:start="45:44" pos:end="45:59">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:64" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:21">

            <expr_stmt pos:start="47:13" pos:end="47:65"><expr pos:start="47:13" pos:end="47:64"><call pos:start="47:13" pos:end="47:64"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="47:64">(<argument pos:start="47:21" pos:end="47:26"><expr pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:26">stderr</name></expr></argument>, <argument pos:start="47:29" pos:end="47:63"><expr pos:start="47:29" pos:end="47:63"><literal type="string" pos:start="47:29" pos:end="47:63">"Failed to initialize SPI flash!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="59:5">else <block pos:start="53:12" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:42">

        <expr_stmt pos:start="55:9" pos:end="55:52"><expr pos:start="55:9" pos:end="55:51"><call pos:start="55:9" pos:end="55:51"><name pos:start="55:9" pos:end="55:18">DB_PRINT_L</name><argument_list pos:start="55:19" pos:end="55:51">(<argument pos:start="55:20" pos:end="55:20"><expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr></argument>, <argument pos:start="55:23" pos:end="55:50"><expr pos:start="55:23" pos:end="55:50"><literal type="string" pos:start="55:23" pos:end="55:50">"No BDRV - binding to RAM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><call pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:14">memset</name><argument_list pos:start="57:15" pos:end="57:41">(<argument pos:start="57:16" pos:end="57:25"><expr pos:start="57:16" pos:end="57:25"><name pos:start="57:16" pos:end="57:25"><name pos:start="57:16" pos:end="57:16">s</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:25">storage</name></name></expr></argument>, <argument pos:start="57:28" pos:end="57:31"><expr pos:start="57:28" pos:end="57:31"><literal type="number" pos:start="57:28" pos:end="57:31">0xFF</literal></expr></argument>, <argument pos:start="57:34" pos:end="57:40"><expr pos:start="57:34" pos:end="57:40"><name pos:start="57:34" pos:end="57:40"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:40">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
