<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5712.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:45">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="159:1">{<block_content pos:start="9:5" pos:end="157:54">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">H264Context</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:18">h</name> <init pos:start="13:20" pos:end="13:37">= <expr pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:26">avctx</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">MpegEncContext</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:21">s</name> <init pos:start="15:23" pos:end="15:29">= <expr pos:start="15:25" pos:end="15:29"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:26">h</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">pict</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">buf_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:12">flags</name></name><operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:26"><name pos:start="23:15" pos:end="23:19">avctx</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:13">flags2</name></name><operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:28"><name pos:start="25:16" pos:end="25:20">avctx</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:28">flags2</name></name></expr>;</expr_stmt>



   <comment type="block" pos:start="29:4" pos:end="29:59">/* end of stream, output what is still in the buffers */</comment>

 <label pos:start="31:2" pos:end="31:5"><name pos:start="31:2" pos:end="31:4">out</name>:</label>

    <if_stmt pos:start="33:5" pos:end="81:5"><if pos:start="33:5" pos:end="81:5">if <condition pos:start="33:8" pos:end="33:22">(<expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:16">buf_size</name> <operator pos:start="33:18" pos:end="33:19">==</operator> <literal type="number" pos:start="33:21" pos:end="33:21">0</literal></expr>)</condition> <block pos:start="33:24" pos:end="81:5">{<block_content pos:start="35:9" pos:end="79:17">

        <decl_stmt pos:start="35:9" pos:end="35:21"><decl pos:start="35:9" pos:end="35:20"><type pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:15">Picture</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:20">out</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:23"><decl pos:start="37:9" pos:end="37:13"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:13">i</name></decl>, <decl pos:start="37:16" pos:end="37:22"><type ref="prev" pos:start="37:9" pos:end="37:11"/><name pos:start="37:16" pos:end="37:22">out_idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:30">current_picture_ptr</name></name> <operator pos:start="41:32" pos:end="41:32">=</operator> <name pos:start="41:34" pos:end="41:37">NULL</name></expr>;</expr_stmt>



<comment type="line" pos:start="45:1" pos:end="45:49">//FIXME factorize this with the output code below</comment>

        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:11">out</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:31"><name pos:start="47:15" pos:end="47:15">h</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:28">delayed_pic</name><index pos:start="47:29" pos:end="47:31">[<expr pos:start="47:30" pos:end="47:30"><literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:20"><expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:15">out_idx</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>;</expr_stmt>

        <for pos:start="51:9" pos:end="59:13">for<control pos:start="51:12" pos:end="51:107">(<init pos:start="51:13" pos:end="51:16"><expr pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:13">i</name><operator pos:start="51:14" pos:end="51:14">=</operator><literal type="number" pos:start="51:15" pos:end="51:15">1</literal></expr>;</init> <condition pos:start="51:18" pos:end="51:102"><expr pos:start="51:18" pos:end="51:101"><name pos:start="51:18" pos:end="51:34"><name pos:start="51:18" pos:end="51:18">h</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:31">delayed_pic</name><index pos:start="51:32" pos:end="51:34">[<expr pos:start="51:33" pos:end="51:33"><name pos:start="51:33" pos:end="51:33">i</name></expr>]</index></name> <operator pos:start="51:36" pos:end="51:37">&amp;&amp;</operator> <operator pos:start="51:39" pos:end="51:39">!</operator><name pos:start="51:40" pos:end="51:56"><name pos:start="51:40" pos:end="51:40">h</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:53">delayed_pic</name><index pos:start="51:54" pos:end="51:56">[<expr pos:start="51:55" pos:end="51:55"><name pos:start="51:55" pos:end="51:55">i</name></expr>]</index></name><operator pos:start="51:57" pos:end="51:58">-&gt;</operator><name pos:start="51:59" pos:end="51:67">key_frame</name> <operator pos:start="51:69" pos:end="51:70">&amp;&amp;</operator> <operator pos:start="51:72" pos:end="51:72">!</operator><name pos:start="51:73" pos:end="51:89"><name pos:start="51:73" pos:end="51:73">h</name><operator pos:start="51:74" pos:end="51:75">-&gt;</operator><name pos:start="51:76" pos:end="51:86">delayed_pic</name><index pos:start="51:87" pos:end="51:89">[<expr pos:start="51:88" pos:end="51:88"><name pos:start="51:88" pos:end="51:88">i</name></expr>]</index></name><operator pos:start="51:90" pos:end="51:91">-&gt;</operator><name pos:start="51:92" pos:end="51:101">mmco_reset</name></expr>;</condition> <incr pos:start="51:104" pos:end="51:106"><expr pos:start="51:104" pos:end="51:106"><name pos:start="51:104" pos:end="51:104">i</name><operator pos:start="51:105" pos:end="51:106">++</operator></expr></incr>)</control><block type="pseudo" pos:start="53:13" pos:end="59:13"><block_content pos:start="53:13" pos:end="59:13">

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if<condition pos:start="53:15" pos:end="53:49">(<expr pos:start="53:16" pos:end="53:48"><name pos:start="53:16" pos:end="53:32"><name pos:start="53:16" pos:end="53:16">h</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:29">delayed_pic</name><index pos:start="53:30" pos:end="53:32">[<expr pos:start="53:31" pos:end="53:31"><name pos:start="53:31" pos:end="53:31">i</name></expr>]</index></name><operator pos:start="53:33" pos:end="53:34">-&gt;</operator><name pos:start="53:35" pos:end="53:37">poc</name> <operator pos:start="53:39" pos:end="53:39">&lt;</operator> <name pos:start="53:41" pos:end="53:48"><name pos:start="53:41" pos:end="53:43">out</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:48">poc</name></name></expr>)</condition><block pos:start="53:50" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:28">

                <expr_stmt pos:start="55:17" pos:end="55:40"><expr pos:start="55:17" pos:end="55:39"><name pos:start="55:17" pos:end="55:19">out</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:39"><name pos:start="55:23" pos:end="55:23">h</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:36">delayed_pic</name><index pos:start="55:37" pos:end="55:39">[<expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:28"><expr pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:23">out_idx</name> <operator pos:start="57:25" pos:end="57:25">=</operator> <name pos:start="57:27" pos:end="57:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <for pos:start="63:9" pos:end="65:52">for<control pos:start="63:12" pos:end="63:46">(<init pos:start="63:13" pos:end="63:22"><expr pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:13">i</name><operator pos:start="63:14" pos:end="63:14">=</operator><name pos:start="63:15" pos:end="63:21">out_idx</name></expr>;</init> <condition pos:start="63:24" pos:end="63:41"><expr pos:start="63:24" pos:end="63:40"><name pos:start="63:24" pos:end="63:40"><name pos:start="63:24" pos:end="63:24">h</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:37">delayed_pic</name><index pos:start="63:38" pos:end="63:40">[<expr pos:start="63:39" pos:end="63:39"><name pos:start="63:39" pos:end="63:39">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="63:43" pos:end="63:45"><expr pos:start="63:43" pos:end="63:45"><name pos:start="63:43" pos:end="63:43">i</name><operator pos:start="63:44" pos:end="63:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:13" pos:end="65:52"><block_content pos:start="65:13" pos:end="65:52">

            <expr_stmt pos:start="65:13" pos:end="65:52"><expr pos:start="65:13" pos:end="65:51"><name pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:13">h</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:26">delayed_pic</name><index pos:start="65:27" pos:end="65:29">[<expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">i</name></expr>]</index></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:51"><name pos:start="65:33" pos:end="65:33">h</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:46">delayed_pic</name><index pos:start="65:47" pos:end="65:51">[<expr pos:start="65:48" pos:end="65:50"><name pos:start="65:48" pos:end="65:48">i</name><operator pos:start="65:49" pos:end="65:49">+</operator><literal type="number" pos:start="65:50" pos:end="65:50">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if<condition pos:start="69:11" pos:end="69:15">(<expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">out</name></expr>)</condition><block pos:start="69:16" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:34">

            <expr_stmt pos:start="71:13" pos:end="71:41"><expr pos:start="71:13" pos:end="71:40"><operator pos:start="71:13" pos:end="71:13">*</operator><name pos:start="71:14" pos:end="71:22">data_size</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <sizeof pos:start="71:26" pos:end="71:40">sizeof<argument_list pos:start="71:32" pos:end="71:40">(<argument pos:start="71:33" pos:end="71:39"><expr pos:start="71:33" pos:end="71:39"><name pos:start="71:33" pos:end="71:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:34"><expr pos:start="73:13" pos:end="73:33"><operator pos:start="73:13" pos:end="73:13">*</operator><name pos:start="73:14" pos:end="73:17">pict</name><operator pos:start="73:18" pos:end="73:18">=</operator> <operator pos:start="73:20" pos:end="73:20">*</operator><operator pos:start="73:21" pos:end="73:21">(</operator><name pos:start="73:22" pos:end="73:28">AVFrame</name><operator pos:start="73:29" pos:end="73:29">*</operator><operator pos:start="73:30" pos:end="73:30">)</operator><name pos:start="73:31" pos:end="73:33">out</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="79:9" pos:end="79:17">return <expr pos:start="79:16" pos:end="79:16"><literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:13">buf_index</name><operator pos:start="85:14" pos:end="85:14">=</operator><call pos:start="85:15" pos:end="85:48"><name pos:start="85:15" pos:end="85:30">decode_nal_units</name><argument_list pos:start="85:31" pos:end="85:48">(<argument pos:start="85:32" pos:end="85:32"><expr pos:start="85:32" pos:end="85:32"><name pos:start="85:32" pos:end="85:32">h</name></expr></argument>, <argument pos:start="85:35" pos:end="85:37"><expr pos:start="85:35" pos:end="85:37"><name pos:start="85:35" pos:end="85:37">buf</name></expr></argument>, <argument pos:start="85:40" pos:end="85:47"><expr pos:start="85:40" pos:end="85:47"><name pos:start="85:40" pos:end="85:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:18"><if pos:start="87:5" pos:end="89:18">if<condition pos:start="87:7" pos:end="87:21">(<expr pos:start="87:8" pos:end="87:20"><name pos:start="87:8" pos:end="87:16">buf_index</name> <operator pos:start="87:18" pos:end="87:18">&lt;</operator> <literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:18"><block_content pos:start="89:9" pos:end="89:18">

        <return pos:start="89:9" pos:end="89:18">return <expr pos:start="89:16" pos:end="89:17"><operator pos:start="89:16" pos:end="89:16">-</operator><literal type="number" pos:start="89:17" pos:end="89:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:72">(<expr pos:start="93:9" pos:end="93:71"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:31"><name pos:start="93:10" pos:end="93:10">s</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:31">current_picture_ptr</name></name> <operator pos:start="93:33" pos:end="93:34">&amp;&amp;</operator> <name pos:start="93:36" pos:end="93:51"><name pos:start="93:36" pos:end="93:36">h</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:51">nal_unit_type</name></name> <operator pos:start="93:53" pos:end="93:54">==</operator> <name pos:start="93:56" pos:end="93:71">NAL_END_SEQUENCE</name></expr>)</condition> <block pos:start="93:74" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:17">

        <expr_stmt pos:start="95:9" pos:end="95:21"><expr pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:16">buf_size</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <literal type="number" pos:start="95:20" pos:end="95:20">0</literal></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:17">goto <name pos:start="97:14" pos:end="97:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="113:5"><if pos:start="103:5" pos:end="113:5">if<condition pos:start="103:7" pos:end="103:68">(<expr pos:start="103:8" pos:end="103:67"><operator pos:start="103:8" pos:end="103:8">!</operator><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:18"><name pos:start="103:10" pos:end="103:10">s</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:18">flags2</name></name> <operator pos:start="103:20" pos:end="103:20">&amp;</operator> <name pos:start="103:22" pos:end="103:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="103:40" pos:end="103:40">)</operator> <operator pos:start="103:42" pos:end="103:43">&amp;&amp;</operator> <operator pos:start="103:45" pos:end="103:45">!</operator><name pos:start="103:46" pos:end="103:67"><name pos:start="103:46" pos:end="103:46">s</name><operator pos:start="103:47" pos:end="103:48">-&gt;</operator><name pos:start="103:49" pos:end="103:67">current_picture_ptr</name></name></expr>)</condition><block pos:start="103:69" pos:end="113:5">{<block_content pos:start="105:9" pos:end="111:18">

        <if_stmt pos:start="105:9" pos:end="107:21"><if pos:start="105:9" pos:end="107:21">if <condition pos:start="105:12" pos:end="105:50">(<expr pos:start="105:13" pos:end="105:49"><name pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:17">avctx</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:29">skip_frame</name></name> <operator pos:start="105:31" pos:end="105:32">&gt;=</operator> <name pos:start="105:34" pos:end="105:49">AVDISCARD_NONREF</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:21"><block_content pos:start="107:13" pos:end="107:21">

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:51"><expr pos:start="109:9" pos:end="109:50"><call pos:start="109:9" pos:end="109:50"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:50">(<argument pos:start="109:16" pos:end="109:20"><expr pos:start="109:16" pos:end="109:20"><name pos:start="109:16" pos:end="109:20">avctx</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:37" pos:end="109:49"><expr pos:start="109:37" pos:end="109:49"><literal type="string" pos:start="109:37" pos:end="109:49">"no frame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:18">return <expr pos:start="111:16" pos:end="111:17"><operator pos:start="111:16" pos:end="111:16">-</operator><literal type="number" pos:start="111:17" pos:end="111:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="145:5"><if pos:start="117:5" pos:end="145:5">if<condition pos:start="117:7" pos:end="117:86">(<expr pos:start="117:8" pos:end="117:85"><operator pos:start="117:8" pos:end="117:8">!</operator><operator pos:start="117:9" pos:end="117:9">(</operator><name pos:start="117:10" pos:end="117:18"><name pos:start="117:10" pos:end="117:10">s</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:18">flags2</name></name> <operator pos:start="117:20" pos:end="117:20">&amp;</operator> <name pos:start="117:22" pos:end="117:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="117:40" pos:end="117:40">)</operator> <operator pos:start="117:42" pos:end="117:43">||</operator> <operator pos:start="117:45" pos:end="117:45">(</operator><name pos:start="117:46" pos:end="117:52"><name pos:start="117:46" pos:end="117:46">s</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:52">mb_y</name></name> <operator pos:start="117:54" pos:end="117:55">&gt;=</operator> <name pos:start="117:57" pos:end="117:68"><name pos:start="117:57" pos:end="117:57">s</name><operator pos:start="117:58" pos:end="117:59">-&gt;</operator><name pos:start="117:60" pos:end="117:68">mb_height</name></name> <operator pos:start="117:70" pos:end="117:71">&amp;&amp;</operator> <name pos:start="117:73" pos:end="117:84"><name pos:start="117:73" pos:end="117:73">s</name><operator pos:start="117:74" pos:end="117:75">-&gt;</operator><name pos:start="117:76" pos:end="117:84">mb_height</name></name><operator pos:start="117:85" pos:end="117:85">)</operator></expr>)</condition><block pos:start="117:87" pos:end="145:5">{<block_content pos:start="121:9" pos:end="143:9">



        <if_stmt pos:start="121:9" pos:end="121:62"><if pos:start="121:9" pos:end="121:62">if<condition pos:start="121:11" pos:end="121:42">(<expr pos:start="121:12" pos:end="121:41"><name pos:start="121:12" pos:end="121:20"><name pos:start="121:12" pos:end="121:12">s</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:20">flags2</name></name> <operator pos:start="121:22" pos:end="121:22">&amp;</operator> <name pos:start="121:24" pos:end="121:41">CODEC_FLAG2_CHUNKS</name></expr>)</condition><block type="pseudo" pos:start="121:44" pos:end="121:62"><block_content pos:start="121:44" pos:end="121:62"> <expr_stmt pos:start="121:44" pos:end="121:62"><expr pos:start="121:44" pos:end="121:61"><call pos:start="121:44" pos:end="121:61"><name pos:start="121:44" pos:end="121:58">decode_postinit</name><argument_list pos:start="121:59" pos:end="121:61">(<argument pos:start="121:60" pos:end="121:60"><expr pos:start="121:60" pos:end="121:60"><name pos:start="121:60" pos:end="121:60">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:24"><expr pos:start="125:9" pos:end="125:23"><call pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:17">field_end</name><argument_list pos:start="125:18" pos:end="125:23">(<argument pos:start="125:19" pos:end="125:19"><expr pos:start="125:19" pos:end="125:19"><name pos:start="125:19" pos:end="125:19">h</name></expr></argument>, <argument pos:start="125:22" pos:end="125:22"><expr pos:start="125:22" pos:end="125:22"><literal type="number" pos:start="125:22" pos:end="125:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="129:9" pos:end="143:9"><if pos:start="129:9" pos:end="137:9">if <condition pos:start="129:12" pos:end="129:32">(<expr pos:start="129:13" pos:end="129:31"><operator pos:start="129:13" pos:end="129:13">!</operator><name pos:start="129:14" pos:end="129:31"><name pos:start="129:14" pos:end="129:14">h</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:31">next_output_pic</name></name></expr>)</condition> <block pos:start="129:34" pos:end="137:9">{<block_content pos:start="133:13" pos:end="133:27">

            <comment type="block" pos:start="131:13" pos:end="131:40">/* Wait for second field. */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:27"><expr pos:start="133:13" pos:end="133:26"><operator pos:start="133:13" pos:end="133:13">*</operator><name pos:start="133:14" pos:end="133:22">data_size</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <literal type="number" pos:start="133:26" pos:end="133:26">0</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="137:11" pos:end="143:9">else <block pos:start="137:16" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:50">

            <expr_stmt pos:start="139:13" pos:end="139:41"><expr pos:start="139:13" pos:end="139:40"><operator pos:start="139:13" pos:end="139:13">*</operator><name pos:start="139:14" pos:end="139:22">data_size</name> <operator pos:start="139:24" pos:end="139:24">=</operator> <sizeof pos:start="139:26" pos:end="139:40">sizeof<argument_list pos:start="139:32" pos:end="139:40">(<argument pos:start="139:33" pos:end="139:39"><expr pos:start="139:33" pos:end="139:39"><name pos:start="139:33" pos:end="139:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:50"><expr pos:start="141:13" pos:end="141:49"><operator pos:start="141:13" pos:end="141:13">*</operator><name pos:start="141:14" pos:end="141:17">pict</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <operator pos:start="141:21" pos:end="141:21">*</operator><operator pos:start="141:22" pos:end="141:22">(</operator><name pos:start="141:23" pos:end="141:29">AVFrame</name><operator pos:start="141:30" pos:end="141:30">*</operator><operator pos:start="141:31" pos:end="141:31">)</operator><name pos:start="141:32" pos:end="141:49"><name pos:start="141:32" pos:end="141:32">h</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:49">next_output_pic</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:41"><expr pos:start="149:5" pos:end="149:40"><call pos:start="149:5" pos:end="149:40"><name pos:start="149:5" pos:end="149:10">assert</name><argument_list pos:start="149:11" pos:end="149:40">(<argument pos:start="149:12" pos:end="149:39"><expr pos:start="149:12" pos:end="149:39"><name pos:start="149:12" pos:end="149:24"><name pos:start="149:12" pos:end="149:15">pict</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:21">data</name><index pos:start="149:22" pos:end="149:24">[<expr pos:start="149:23" pos:end="149:23"><literal type="number" pos:start="149:23" pos:end="149:23">0</literal></expr>]</index></name> <operator pos:start="149:26" pos:end="149:27">||</operator> <operator pos:start="149:29" pos:end="149:29">!</operator><operator pos:start="149:30" pos:end="149:30">*</operator><name pos:start="149:31" pos:end="149:39">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:33"><expr pos:start="151:5" pos:end="151:32"><call pos:start="151:5" pos:end="151:32"><name pos:start="151:5" pos:end="151:23">ff_print_debug_info</name><argument_list pos:start="151:24" pos:end="151:32">(<argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><name pos:start="151:25" pos:end="151:25">s</name></expr></argument>, <argument pos:start="151:28" pos:end="151:31"><expr pos:start="151:28" pos:end="151:31"><name pos:start="151:28" pos:end="151:31">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="153:1" pos:end="153:41">//printf("out %d\n", (int)pict-&gt;data[0]);</comment>



    <return pos:start="157:5" pos:end="157:54">return <expr pos:start="157:12" pos:end="157:53"><call pos:start="157:12" pos:end="157:53"><name pos:start="157:12" pos:end="157:29">get_consumed_bytes</name><argument_list pos:start="157:30" pos:end="157:53">(<argument pos:start="157:31" pos:end="157:31"><expr pos:start="157:31" pos:end="157:31"><name pos:start="157:31" pos:end="157:31">s</name></expr></argument>, <argument pos:start="157:34" pos:end="157:42"><expr pos:start="157:34" pos:end="157:42"><name pos:start="157:34" pos:end="157:42">buf_index</name></expr></argument>, <argument pos:start="157:45" pos:end="157:52"><expr pos:start="157:45" pos:end="157:52"><name pos:start="157:45" pos:end="157:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
