<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14486.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:35">crisv32_decoder</name><parameter_list pos:start="1:36" pos:end="1:72">(<parameter pos:start="1:37" pos:end="1:53"><decl pos:start="1:37" pos:end="1:53"><type pos:start="1:37" pos:end="1:53"><name pos:start="1:37" pos:end="1:48">CPUCRISState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">env</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:71"><decl pos:start="1:56" pos:end="1:71"><type pos:start="1:56" pos:end="1:71"><name pos:start="1:56" pos:end="1:67">DisasContext</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:71">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:20">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">insn_len</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:9"><if pos:start="11:5" pos:end="15:9">if <condition pos:start="11:8" pos:end="11:72">(<expr pos:start="11:9" pos:end="11:71"><call pos:start="11:9" pos:end="11:71"><name pos:start="11:9" pos:end="11:16">unlikely</name><argument_list pos:start="11:17" pos:end="11:71">(<argument pos:start="11:18" pos:end="11:70"><expr pos:start="11:18" pos:end="11:70"><call pos:start="11:18" pos:end="11:70"><name pos:start="11:18" pos:end="11:35">qemu_loglevel_mask</name><argument_list pos:start="11:36" pos:end="11:70">(<argument pos:start="11:37" pos:end="11:69"><expr pos:start="11:37" pos:end="11:69"><name pos:start="11:37" pos:end="11:49">CPU_LOG_TB_OP</name> <operator pos:start="11:51" pos:end="11:51">|</operator> <name pos:start="11:53" pos:end="11:69">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:74" pos:end="15:9">{<block_content pos:start="13:9" pos:end="13:41">

        <expr_stmt pos:start="13:9" pos:end="13:41"><expr pos:start="13:9" pos:end="13:40"><call pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:32">tcg_gen_debug_insn_start</name><argument_list pos:start="13:33" pos:end="13:40">(<argument pos:start="13:34" pos:end="13:39"><expr pos:start="13:34" pos:end="13:39"><name pos:start="13:34" pos:end="13:39"><name pos:start="13:34" pos:end="13:35">dc</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:57">/* Load a halfword onto the instruction register.  */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:51"><expr pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:10">dc</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:14">ir</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:50"><name pos:start="21:18" pos:end="21:27">cris_fetch</name><argument_list pos:start="21:28" pos:end="21:50">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">env</name></expr></argument>, <argument pos:start="21:34" pos:end="21:35"><expr pos:start="21:34" pos:end="21:35"><name pos:start="21:34" pos:end="21:35">dc</name></expr></argument>, <argument pos:start="21:38" pos:end="21:43"><expr pos:start="21:38" pos:end="21:43"><name pos:start="21:38" pos:end="21:43"><name pos:start="21:38" pos:end="21:39">dc</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:43">pc</name></name></expr></argument>, <argument pos:start="21:46" pos:end="21:46"><expr pos:start="21:46" pos:end="21:46"><literal type="number" pos:start="21:46" pos:end="21:46">2</literal></expr></argument>, <argument pos:start="21:49" pos:end="21:49"><expr pos:start="21:49" pos:end="21:49"><literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:25">/* Now decode it.  */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:48"><expr pos:start="27:5" pos:end="27:47"><name pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:6">dc</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:14">opcode</name></name>   <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:47"><name pos:start="27:20" pos:end="27:32">EXTRACT_FIELD</name><argument_list pos:start="27:33" pos:end="27:47">(<argument pos:start="27:34" pos:end="27:39"><expr pos:start="27:34" pos:end="27:39"><name pos:start="27:34" pos:end="27:39"><name pos:start="27:34" pos:end="27:35">dc</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:39">ir</name></name></expr></argument>, <argument pos:start="27:42" pos:end="27:42"><expr pos:start="27:42" pos:end="27:42"><literal type="number" pos:start="27:42" pos:end="27:42">4</literal></expr></argument>, <argument pos:start="27:45" pos:end="27:46"><expr pos:start="27:45" pos:end="27:46"><literal type="number" pos:start="27:45" pos:end="27:46">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:11">op1</name></name>      <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:46"><name pos:start="29:20" pos:end="29:32">EXTRACT_FIELD</name><argument_list pos:start="29:33" pos:end="29:46">(<argument pos:start="29:34" pos:end="29:39"><expr pos:start="29:34" pos:end="29:39"><name pos:start="29:34" pos:end="29:39"><name pos:start="29:34" pos:end="29:35">dc</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:39">ir</name></name></expr></argument>, <argument pos:start="29:42" pos:end="29:42"><expr pos:start="29:42" pos:end="29:42"><literal type="number" pos:start="29:42" pos:end="29:42">0</literal></expr></argument>, <argument pos:start="29:45" pos:end="29:45"><expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:6">dc</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:11">op2</name></name>      <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:48"><name pos:start="31:20" pos:end="31:32">EXTRACT_FIELD</name><argument_list pos:start="31:33" pos:end="31:48">(<argument pos:start="31:34" pos:end="31:39"><expr pos:start="31:34" pos:end="31:39"><name pos:start="31:34" pos:end="31:39"><name pos:start="31:34" pos:end="31:35">dc</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:39">ir</name></name></expr></argument>, <argument pos:start="31:42" pos:end="31:43"><expr pos:start="31:42" pos:end="31:43"><literal type="number" pos:start="31:42" pos:end="31:43">12</literal></expr></argument>, <argument pos:start="31:46" pos:end="31:47"><expr pos:start="31:46" pos:end="31:47"><literal type="number" pos:start="31:46" pos:end="31:47">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:13">zsize</name></name>    <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:46"><name pos:start="33:20" pos:end="33:32">EXTRACT_FIELD</name><argument_list pos:start="33:33" pos:end="33:46">(<argument pos:start="33:34" pos:end="33:39"><expr pos:start="33:34" pos:end="33:39"><name pos:start="33:34" pos:end="33:39"><name pos:start="33:34" pos:end="33:35">dc</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:39">ir</name></name></expr></argument>, <argument pos:start="33:42" pos:end="33:42"><expr pos:start="33:42" pos:end="33:42"><literal type="number" pos:start="33:42" pos:end="33:42">4</literal></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:14">zzsize</name></name>   <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:46"><name pos:start="35:20" pos:end="35:32">EXTRACT_FIELD</name><argument_list pos:start="35:33" pos:end="35:46">(<argument pos:start="35:34" pos:end="35:39"><expr pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:35">dc</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:39">ir</name></name></expr></argument>, <argument pos:start="35:42" pos:end="35:42"><expr pos:start="35:42" pos:end="35:42"><literal type="number" pos:start="35:42" pos:end="35:42">4</literal></expr></argument>, <argument pos:start="35:45" pos:end="35:45"><expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:49"><expr pos:start="37:5" pos:end="37:48"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:15">postinc</name></name>  <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:48"><name pos:start="37:20" pos:end="37:32">EXTRACT_FIELD</name><argument_list pos:start="37:33" pos:end="37:48">(<argument pos:start="37:34" pos:end="37:39"><expr pos:start="37:34" pos:end="37:39"><name pos:start="37:34" pos:end="37:39"><name pos:start="37:34" pos:end="37:35">dc</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:39">ir</name></name></expr></argument>, <argument pos:start="37:42" pos:end="37:43"><expr pos:start="37:42" pos:end="37:43"><literal type="number" pos:start="37:42" pos:end="37:43">10</literal></expr></argument>, <argument pos:start="37:46" pos:end="37:47"><expr pos:start="37:46" pos:end="37:47"><literal type="number" pos:start="37:46" pos:end="37:47">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:38">/* Large switch for all insns.  */</comment>

    <for pos:start="43:5" pos:end="58:0">for <control pos:start="43:9" pos:end="43:45">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:40"><expr pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <call pos:start="43:21" pos:end="43:39"><name pos:start="43:21" pos:end="43:30">ARRAY_SIZE</name><argument_list pos:start="43:31" pos:end="43:39">(<argument pos:start="43:32" pos:end="43:38"><expr pos:start="43:32" pos:end="43:38"><name pos:start="43:32" pos:end="43:38">decinfo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="43:42" pos:end="43:44"><expr pos:start="43:42" pos:end="43:44"><name pos:start="43:42" pos:end="43:42">i</name><operator pos:start="43:43" pos:end="43:44">++</operator></expr></incr>)</control> <block pos:start="43:47" pos:end="58:0">{<block_content pos:start="45:9" pos:end="51:9">

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:62">(<expr pos:start="45:13" pos:end="45:61"><operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:23"><name pos:start="45:14" pos:end="45:15">dc</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:23">opcode</name></name> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <name pos:start="45:27" pos:end="45:36"><name pos:start="45:27" pos:end="45:33">decinfo</name><index pos:start="45:34" pos:end="45:36">[<expr pos:start="45:35" pos:end="45:35"><name pos:start="45:35" pos:end="45:35">i</name></expr>]</index></name><operator pos:start="45:37" pos:end="45:37">.</operator><name pos:start="45:38" pos:end="45:41">mask</name><operator pos:start="45:42" pos:end="45:42">)</operator> <operator pos:start="45:44" pos:end="45:45">==</operator> <name pos:start="45:47" pos:end="45:56"><name pos:start="45:47" pos:end="45:53">decinfo</name><index pos:start="45:54" pos:end="45:56">[<expr pos:start="45:55" pos:end="45:55"><name pos:start="45:55" pos:end="45:55">i</name></expr>]</index></name><operator pos:start="45:57" pos:end="45:57">.</operator><name pos:start="45:58" pos:end="45:61">bits</name></expr>)</condition> <block pos:start="45:64" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:18">

            <expr_stmt pos:start="47:13" pos:end="47:47"><expr pos:start="47:13" pos:end="47:46"><name pos:start="47:13" pos:end="47:20">insn_len</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:33"><name pos:start="47:24" pos:end="47:30">decinfo</name><index pos:start="47:31" pos:end="47:33">[<expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">i</name></expr>]</index></name><operator pos:start="47:34" pos:end="47:34">.</operator><call pos:start="47:35" pos:end="47:46"><name pos:start="47:35" pos:end="47:37">dec</name><argument_list pos:start="47:38" pos:end="47:46">(<argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><name pos:start="47:39" pos:end="47:41">env</name></expr></argument>, <argument pos:start="47:44" pos:end="47:45"><expr pos:start="47:44" pos:end="47:45"><name pos:start="47:44" pos:end="47:45">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<cpp:if pos:start="57:1" pos:end="57:30">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:30"><operator pos:start="57:5" pos:end="57:5">!</operator><call pos:start="57:6" pos:end="57:30"><name pos:start="57:6" pos:end="57:12">defined</name><argument_list pos:start="57:13" pos:end="57:30">(<argument pos:start="57:14" pos:end="57:29"><expr pos:start="57:14" pos:end="57:29"><name pos:start="57:14" pos:end="57:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="59:5" pos:end="59:28">/* Single-stepping ?  */</comment>

    <if_stmt pos:start="61:5" pos:end="88:0"><if pos:start="61:5" pos:end="88:0">if <condition pos:start="61:8" pos:end="61:30">(<expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:10">dc</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:20">tb_flags</name></name> <operator pos:start="61:22" pos:end="61:22">&amp;</operator> <name pos:start="61:24" pos:end="61:29">S_FLAG</name></expr>)</condition> <block pos:start="61:32" pos:end="88:0">{<block_content pos:start="63:9" pos:end="83:26">

        <decl_stmt pos:start="63:9" pos:end="63:15"><decl pos:start="63:9" pos:end="63:14"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:14">l1</name></decl>;</decl_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:29"><expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:10">l1</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:28"><name pos:start="67:14" pos:end="67:26">gen_new_label</name><argument_list pos:start="67:27" pos:end="67:28">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:68"><expr pos:start="69:9" pos:end="69:67"><call pos:start="69:9" pos:end="69:67"><name pos:start="69:9" pos:end="69:26">tcg_gen_brcondi_tl</name><argument_list pos:start="69:27" pos:end="69:67">(<argument pos:start="69:28" pos:end="69:38"><expr pos:start="69:28" pos:end="69:38"><name pos:start="69:28" pos:end="69:38">TCG_COND_NE</name></expr></argument>, <argument pos:start="69:41" pos:end="69:54"><expr pos:start="69:41" pos:end="69:54"><name pos:start="69:41" pos:end="69:54"><name pos:start="69:41" pos:end="69:46">cpu_PR</name><index pos:start="69:47" pos:end="69:54">[<expr pos:start="69:48" pos:end="69:53"><name pos:start="69:48" pos:end="69:53">PR_SPC</name></expr>]</index></name></expr></argument>, <argument pos:start="69:57" pos:end="69:62"><expr pos:start="69:57" pos:end="69:62"><name pos:start="69:57" pos:end="69:62"><name pos:start="69:57" pos:end="69:58">dc</name><operator pos:start="69:59" pos:end="69:60">-&gt;</operator><name pos:start="69:61" pos:end="69:62">pc</name></name></expr></argument>, <argument pos:start="69:65" pos:end="69:66"><expr pos:start="69:65" pos:end="69:66"><name pos:start="69:65" pos:end="69:66">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="71:9" pos:end="71:63">/* We treat SPC as a break with an odd trap vector.  */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><call pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:27">cris_evaluate_flags</name><argument_list pos:start="73:28" pos:end="73:31">(<argument pos:start="73:29" pos:end="73:30"><expr pos:start="73:29" pos:end="73:30"><name pos:start="73:29" pos:end="73:30">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:55"><expr pos:start="75:9" pos:end="75:54"><call pos:start="75:9" pos:end="75:54"><name pos:start="75:9" pos:end="75:24">t_gen_mov_env_TN</name><argument_list pos:start="75:25" pos:end="75:54">(<argument pos:start="75:26" pos:end="75:36"><expr pos:start="75:26" pos:end="75:36"><name pos:start="75:26" pos:end="75:36">trap_vector</name></expr></argument>, <argument pos:start="75:39" pos:end="75:53"><expr pos:start="75:39" pos:end="75:53"><call pos:start="75:39" pos:end="75:53"><name pos:start="75:39" pos:end="75:50">tcg_const_tl</name><argument_list pos:start="75:51" pos:end="75:53">(<argument pos:start="75:52" pos:end="75:52"><expr pos:start="75:52" pos:end="75:52"><literal type="number" pos:start="75:52" pos:end="75:52">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:51"><expr pos:start="77:9" pos:end="77:50"><call pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:23">tcg_gen_movi_tl</name><argument_list pos:start="77:24" pos:end="77:50">(<argument pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:30">env_pc</name></expr></argument>, <argument pos:start="77:33" pos:end="77:49"><expr pos:start="77:33" pos:end="77:49"><name pos:start="77:33" pos:end="77:38"><name pos:start="77:33" pos:end="77:34">dc</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:38">pc</name></name> <operator pos:start="77:40" pos:end="77:40">+</operator> <name pos:start="77:42" pos:end="77:49">insn_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:23">tcg_gen_movi_tl</name><argument_list pos:start="79:24" pos:end="79:58">(<argument pos:start="79:25" pos:end="79:38"><expr pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:30">cpu_PR</name><index pos:start="79:31" pos:end="79:38">[<expr pos:start="79:32" pos:end="79:37"><name pos:start="79:32" pos:end="79:37">PR_SPC</name></expr>]</index></name></expr></argument>, <argument pos:start="79:41" pos:end="79:57"><expr pos:start="79:41" pos:end="79:57"><name pos:start="79:41" pos:end="79:46"><name pos:start="79:41" pos:end="79:42">dc</name><operator pos:start="79:43" pos:end="79:44">-&gt;</operator><name pos:start="79:45" pos:end="79:46">pc</name></name> <operator pos:start="79:48" pos:end="79:48">+</operator> <name pos:start="79:50" pos:end="79:57">insn_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:42"><expr pos:start="81:9" pos:end="81:41"><call pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:29">t_gen_raise_exception</name><argument_list pos:start="81:30" pos:end="81:41">(<argument pos:start="81:31" pos:end="81:40"><expr pos:start="81:31" pos:end="81:40"><name pos:start="81:31" pos:end="81:40">EXCP_BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><call pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:21">gen_set_label</name><argument_list pos:start="83:22" pos:end="83:25">(<argument pos:start="83:23" pos:end="83:24"><expr pos:start="83:23" pos:end="83:24"><name pos:start="83:23" pos:end="83:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

    <return pos:start="89:5" pos:end="89:20">return <expr pos:start="89:12" pos:end="89:19"><name pos:start="89:12" pos:end="89:19">insn_len</name></expr>;</return>

</block_content>}</block></function>
</unit>
