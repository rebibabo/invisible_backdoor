<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11606.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">uhci_broadcast_packet</name><parameter_list pos:start="1:33" pos:end="1:60">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:42">UHCIState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:56">USBPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:25">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">UHCIPort</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">USBDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:19">DEBUG_PACKET</name></cpp:ifdef>

    <block pos:start="15:5" pos:end="52:0">{<block_content pos:start="17:9" pos:end="47:9">

        <decl_stmt pos:start="17:9" pos:end="17:27"><decl pos:start="17:9" pos:end="17:26"><type pos:start="17:9" pos:end="17:20"><specifier pos:start="17:9" pos:end="17:13">const</specifier> <name pos:start="17:15" pos:end="17:18">char</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:26">pidstr</name></decl>;</decl_stmt>

        <switch pos:start="19:9" pos:end="29:9">switch<condition pos:start="19:15" pos:end="19:22">(<expr pos:start="19:16" pos:end="19:21"><name pos:start="19:16" pos:end="19:21"><name pos:start="19:16" pos:end="19:16">p</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:21">pid</name></name></expr>)</condition> <block pos:start="19:24" pos:end="29:9">{<block_content pos:start="21:9" pos:end="27:37">

        <case pos:start="21:9" pos:end="21:29">case <expr pos:start="21:14" pos:end="21:28"><name pos:start="21:14" pos:end="21:28">USB_TOKEN_SETUP</name></expr>:</case> <expr_stmt pos:start="21:31" pos:end="21:47"><expr pos:start="21:31" pos:end="21:46"><name pos:start="21:31" pos:end="21:36">pidstr</name> <operator pos:start="21:38" pos:end="21:38">=</operator> <literal type="string" pos:start="21:40" pos:end="21:46">"SETUP"</literal></expr>;</expr_stmt> <break pos:start="21:49" pos:end="21:54">break;</break>

        <case pos:start="23:9" pos:end="23:26">case <expr pos:start="23:14" pos:end="23:25"><name pos:start="23:14" pos:end="23:25">USB_TOKEN_IN</name></expr>:</case> <expr_stmt pos:start="23:28" pos:end="23:41"><expr pos:start="23:28" pos:end="23:40"><name pos:start="23:28" pos:end="23:33">pidstr</name> <operator pos:start="23:35" pos:end="23:35">=</operator> <literal type="string" pos:start="23:37" pos:end="23:40">"IN"</literal></expr>;</expr_stmt> <break pos:start="23:43" pos:end="23:48">break;</break>

        <case pos:start="25:9" pos:end="25:27">case <expr pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:26">USB_TOKEN_OUT</name></expr>:</case> <expr_stmt pos:start="25:29" pos:end="25:43"><expr pos:start="25:29" pos:end="25:42"><name pos:start="25:29" pos:end="25:34">pidstr</name> <operator pos:start="25:36" pos:end="25:36">=</operator> <literal type="string" pos:start="25:38" pos:end="25:42">"OUT"</literal></expr>;</expr_stmt> <break pos:start="25:45" pos:end="25:50">break;</break>

        <default pos:start="27:9" pos:end="27:16">default:</default> <expr_stmt pos:start="27:18" pos:end="27:30"><expr pos:start="27:18" pos:end="27:29"><name pos:start="27:18" pos:end="27:23">pidstr</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <literal type="string" pos:start="27:27" pos:end="27:29">"?"</literal></expr>;</expr_stmt> <break pos:start="27:32" pos:end="27:37">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="31:9" pos:end="33:63"><expr pos:start="31:9" pos:end="33:62"><call pos:start="31:9" pos:end="33:62"><name pos:start="31:9" pos:end="31:14">printf</name><argument_list pos:start="31:15" pos:end="33:62">(<argument pos:start="31:16" pos:end="31:60"><expr pos:start="31:16" pos:end="31:60"><literal type="string" pos:start="31:16" pos:end="31:60">"frame %d: pid=%s addr=0x%02x ep=%d len=%d\n"</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">frnum</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:31"><expr pos:start="33:26" pos:end="33:31"><name pos:start="33:26" pos:end="33:31">pidstr</name></expr></argument>, <argument pos:start="33:34" pos:end="33:43"><expr pos:start="33:34" pos:end="33:43"><name pos:start="33:34" pos:end="33:43"><name pos:start="33:34" pos:end="33:34">p</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:43">devaddr</name></name></expr></argument>, <argument pos:start="33:46" pos:end="33:53"><expr pos:start="33:46" pos:end="33:53"><name pos:start="33:46" pos:end="33:53"><name pos:start="33:46" pos:end="33:46">p</name><operator pos:start="33:47" pos:end="33:48">-&gt;</operator><name pos:start="33:49" pos:end="33:53">devep</name></name></expr></argument>, <argument pos:start="33:56" pos:end="33:61"><expr pos:start="33:56" pos:end="33:61"><name pos:start="33:56" pos:end="33:61"><name pos:start="33:56" pos:end="33:56">p</name><operator pos:start="33:57" pos:end="33:58">-&gt;</operator><name pos:start="33:59" pos:end="33:61">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="47:9"><if pos:start="35:9" pos:end="47:9">if <condition pos:start="35:12" pos:end="35:35">(<expr pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:13">p</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">pid</name></name> <operator pos:start="35:20" pos:end="35:21">!=</operator> <name pos:start="35:23" pos:end="35:34">USB_TOKEN_IN</name></expr>)</condition> <block pos:start="35:37" pos:end="47:9">{<block_content pos:start="37:13" pos:end="45:25">

            <expr_stmt pos:start="37:13" pos:end="37:37"><expr pos:start="37:13" pos:end="37:36"><call pos:start="37:13" pos:end="37:36"><name pos:start="37:13" pos:end="37:18">printf</name><argument_list pos:start="37:19" pos:end="37:36">(<argument pos:start="37:20" pos:end="37:35"><expr pos:start="37:20" pos:end="37:35"><literal type="string" pos:start="37:20" pos:end="37:35">"     data_out="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="39:13" pos:end="43:13">for<control pos:start="39:16" pos:end="39:39">(<init pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:21"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>;</init> <condition pos:start="39:24" pos:end="39:34"><expr pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:24">i</name> <operator pos:start="39:26" pos:end="39:26">&lt;</operator> <name pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:28">p</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:33">len</name></name></expr>;</condition> <incr pos:start="39:36" pos:end="39:38"><expr pos:start="39:36" pos:end="39:38"><name pos:start="39:36" pos:end="39:36">i</name><operator pos:start="39:37" pos:end="39:38">++</operator></expr></incr>)</control> <block pos:start="39:41" pos:end="43:13">{<block_content pos:start="41:17" pos:end="41:44">

                <expr_stmt pos:start="41:17" pos:end="41:44"><expr pos:start="41:17" pos:end="41:43"><call pos:start="41:17" pos:end="41:43"><name pos:start="41:17" pos:end="41:22">printf</name><argument_list pos:start="41:23" pos:end="41:43">(<argument pos:start="41:24" pos:end="41:30"><expr pos:start="41:24" pos:end="41:30"><literal type="string" pos:start="41:24" pos:end="41:30">" %02x"</literal></expr></argument>, <argument pos:start="41:33" pos:end="41:42"><expr pos:start="41:33" pos:end="41:42"><name pos:start="41:33" pos:end="41:42"><name pos:start="41:33" pos:end="41:33">p</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:39">data</name><index pos:start="41:40" pos:end="41:42">[<expr pos:start="41:41" pos:end="41:41"><name pos:start="41:41" pos:end="41:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="45:13" pos:end="45:25"><expr pos:start="45:13" pos:end="45:24"><call pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:18">printf</name><argument_list pos:start="45:19" pos:end="45:24">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><literal type="string" pos:start="45:20" pos:end="45:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <for pos:start="53:5" pos:end="99:5">for<control pos:start="53:8" pos:end="53:33">(<init pos:start="53:9" pos:end="53:14"><expr pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:9">i</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr>;</init> <condition pos:start="53:16" pos:end="53:28"><expr pos:start="53:16" pos:end="53:27"><name pos:start="53:16" pos:end="53:16">i</name> <operator pos:start="53:18" pos:end="53:18">&lt;</operator> <name pos:start="53:20" pos:end="53:27">NB_PORTS</name></expr>;</condition> <incr pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:30">i</name><operator pos:start="53:31" pos:end="53:32">++</operator></expr></incr>)</control> <block pos:start="53:35" pos:end="99:5">{<block_content pos:start="55:9" pos:end="97:9">

        <expr_stmt pos:start="55:9" pos:end="55:28"><expr pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:12">port</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <operator pos:start="55:16" pos:end="55:16">&amp;</operator><name pos:start="55:17" pos:end="55:27"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:24">ports</name><index pos:start="55:25" pos:end="55:27">[<expr pos:start="55:26" pos:end="55:26"><name pos:start="55:26" pos:end="55:26">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:11">dev</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:28"><name pos:start="57:15" pos:end="57:18">port</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:24">port</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:28">dev</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="97:9"><if pos:start="59:9" pos:end="97:9">if <condition pos:start="59:12" pos:end="59:47">(<expr pos:start="59:13" pos:end="59:46"><name pos:start="59:13" pos:end="59:15">dev</name> <operator pos:start="59:17" pos:end="59:18">&amp;&amp;</operator> <operator pos:start="59:20" pos:end="59:20">(</operator><name pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:24">port</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:30">ctrl</name></name> <operator pos:start="59:32" pos:end="59:32">&amp;</operator> <name pos:start="59:34" pos:end="59:45">UHCI_PORT_EN</name><operator pos:start="59:46" pos:end="59:46">)</operator></expr>)</condition> <block pos:start="59:49" pos:end="97:9">{<block_content pos:start="61:13" pos:end="95:13">

            <expr_stmt pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:44"><name pos:start="61:19" pos:end="61:36"><name pos:start="61:19" pos:end="61:21">dev</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:36">handle_packet</name></name><argument_list pos:start="61:37" pos:end="61:44">(<argument pos:start="61:38" pos:end="61:40"><expr pos:start="61:38" pos:end="61:40"><name pos:start="61:38" pos:end="61:40">dev</name></expr></argument>, <argument pos:start="61:43" pos:end="61:43"><expr pos:start="61:43" pos:end="61:43"><name pos:start="61:43" pos:end="61:43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="95:13"><if pos:start="63:13" pos:end="95:13">if <condition pos:start="63:16" pos:end="63:37">(<expr pos:start="63:17" pos:end="63:36"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:22">!=</operator> <name pos:start="63:24" pos:end="63:36">USB_RET_NODEV</name></expr>)</condition> <block pos:start="63:39" pos:end="95:13">{<block_content pos:start="67:17" pos:end="93:27">

<cpp:ifdef pos:start="65:1" pos:end="65:19">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:19">DEBUG_PACKET</name></cpp:ifdef>

                <if_stmt pos:start="67:17" pos:end="92:0"><if pos:start="67:17" pos:end="71:17">if <condition pos:start="67:20" pos:end="67:41">(<expr pos:start="67:21" pos:end="67:40"><name pos:start="67:21" pos:end="67:23">ret</name> <operator pos:start="67:25" pos:end="67:26">==</operator> <name pos:start="67:28" pos:end="67:40">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="67:43" pos:end="71:17">{<block_content pos:start="69:21" pos:end="69:55">

                    <expr_stmt pos:start="69:21" pos:end="69:55"><expr pos:start="69:21" pos:end="69:54"><call pos:start="69:21" pos:end="69:54"><name pos:start="69:21" pos:end="69:26">printf</name><argument_list pos:start="69:27" pos:end="69:54">(<argument pos:start="69:28" pos:end="69:53"><expr pos:start="69:28" pos:end="69:53"><literal type="string" pos:start="69:28" pos:end="69:53">"usb-uhci: Async packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="71:19" pos:end="92:0">else <block pos:start="71:24" pos:end="92:0">{<block_content pos:start="73:21" pos:end="87:33">

                    <expr_stmt pos:start="73:21" pos:end="73:48"><expr pos:start="73:21" pos:end="73:47"><call pos:start="73:21" pos:end="73:47"><name pos:start="73:21" pos:end="73:26">printf</name><argument_list pos:start="73:27" pos:end="73:47">(<argument pos:start="73:28" pos:end="73:41"><expr pos:start="73:28" pos:end="73:41"><literal type="string" pos:start="73:28" pos:end="73:41">"     ret=%d "</literal></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><name pos:start="73:44" pos:end="73:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="75:21" pos:end="85:21"><if pos:start="75:21" pos:end="85:21">if <condition pos:start="75:24" pos:end="75:58">(<expr pos:start="75:25" pos:end="75:57"><name pos:start="75:25" pos:end="75:30"><name pos:start="75:25" pos:end="75:25">p</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:30">pid</name></name> <operator pos:start="75:32" pos:end="75:33">==</operator> <name pos:start="75:35" pos:end="75:46">USB_TOKEN_IN</name> <operator pos:start="75:48" pos:end="75:49">&amp;&amp;</operator> <name pos:start="75:51" pos:end="75:53">ret</name> <operator pos:start="75:55" pos:end="75:55">&gt;</operator> <literal type="number" pos:start="75:57" pos:end="75:57">0</literal></expr>)</condition> <block pos:start="75:60" pos:end="85:21">{<block_content pos:start="77:25" pos:end="83:25">

                        <expr_stmt pos:start="77:25" pos:end="77:43"><expr pos:start="77:25" pos:end="77:42"><call pos:start="77:25" pos:end="77:42"><name pos:start="77:25" pos:end="77:30">printf</name><argument_list pos:start="77:31" pos:end="77:42">(<argument pos:start="77:32" pos:end="77:41"><expr pos:start="77:32" pos:end="77:41"><literal type="string" pos:start="77:32" pos:end="77:41">"data_in="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="79:25" pos:end="83:25">for<control pos:start="79:28" pos:end="79:48">(<init pos:start="79:29" pos:end="79:34"><expr pos:start="79:29" pos:end="79:33"><name pos:start="79:29" pos:end="79:29">i</name> <operator pos:start="79:31" pos:end="79:31">=</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr>;</init> <condition pos:start="79:36" pos:end="79:43"><expr pos:start="79:36" pos:end="79:42"><name pos:start="79:36" pos:end="79:36">i</name> <operator pos:start="79:38" pos:end="79:38">&lt;</operator> <name pos:start="79:40" pos:end="79:42">ret</name></expr>;</condition> <incr pos:start="79:45" pos:end="79:47"><expr pos:start="79:45" pos:end="79:47"><name pos:start="79:45" pos:end="79:45">i</name><operator pos:start="79:46" pos:end="79:47">++</operator></expr></incr>)</control> <block pos:start="79:50" pos:end="83:25">{<block_content pos:start="81:29" pos:end="81:56">

                            <expr_stmt pos:start="81:29" pos:end="81:56"><expr pos:start="81:29" pos:end="81:55"><call pos:start="81:29" pos:end="81:55"><name pos:start="81:29" pos:end="81:34">printf</name><argument_list pos:start="81:35" pos:end="81:55">(<argument pos:start="81:36" pos:end="81:42"><expr pos:start="81:36" pos:end="81:42"><literal type="string" pos:start="81:36" pos:end="81:42">" %02x"</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><name pos:start="81:45" pos:end="81:54"><name pos:start="81:45" pos:end="81:45">p</name><operator pos:start="81:46" pos:end="81:47">-&gt;</operator><name pos:start="81:48" pos:end="81:51">data</name><index pos:start="81:52" pos:end="81:54">[<expr pos:start="81:53" pos:end="81:53"><name pos:start="81:53" pos:end="81:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:33"><expr pos:start="87:21" pos:end="87:32"><call pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:26">printf</name><argument_list pos:start="87:27" pos:end="87:32">(<argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><literal type="string" pos:start="87:28" pos:end="87:31">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

                <return pos:start="93:17" pos:end="93:27">return <expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="101:5" pos:end="101:25">return <expr pos:start="101:12" pos:end="101:24"><name pos:start="101:12" pos:end="101:24">USB_RET_NODEV</name></expr>;</return>

</block_content>}</block></function>
</unit>
